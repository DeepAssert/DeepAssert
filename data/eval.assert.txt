assertEquals("31.10.11 0:00", DateHelper.formatToUserFriendlyFormat(new Date(2011 - 1900, 10 - 1, 31)));
assertTrue(actual);
assertEquals(1, min); assertEquals(DataType.INTEGER, TypeUtil.getDataType(min)); assertEquals(3, max); assertEquals(DataType.INTEGER, TypeUtil.getDataType(max)); assertEquals(2d, average); assertEquals(DataType.DOUBLE, TypeUtil.getDataType(average)); assertEquals(6, sum); assertEquals(DataType.INTEGER, TypeUtil.getDataType(sum)); assertEquals(6, product); assertEquals(DataType.INTEGER, TypeUtil.getDataType(product));
assertEquals(DataType.DOUBLE, getResultDataType(1d, 1f)); assertEquals(DataType.DOUBLE, getResultDataType(1d, 1)); assertEquals(DataType.DOUBLE, getResultDataType(1f, 1d)); assertEquals(DataType.FLOAT, getResultDataType(1f, 1)); assertEquals(DataType.DOUBLE, getResultDataType(1, 1d)); assertEquals(DataType.FLOAT, getResultDataType(1, 1f));
assertEquals(0.010, NormalizationUtil.denormalize(norm, 0.0), 1e-5); assertEquals(0.300, NormalizationUtil.denormalize(norm, 0.047247), 1e-5); assertEquals(7.123, NormalizationUtil.denormalize(norm, 0.741838), 1e-5); assertEquals(11.44, NormalizationUtil.denormalize(norm, 1.0), 1e-5);
assertTrue(VerificationUtil.isZero(0.0005, zeroThreshold)); assertTrue(VerificationUtil.isZero(0, zeroThreshold)); assertTrue(VerificationUtil.isZero(-0.0005, zeroThreshold)); assertFalse(VerificationUtil.isZero(0.0015, zeroThreshold)); assertFalse(VerificationUtil.isZero(-0.0015, zeroThreshold));
assertEquals("3", evaluate(stringThree, null)); assertEquals(3, evaluate(integerThree, null)); assertEquals(3f, evaluate(floatThree, null));
assertNotNull(FieldName.unmarshal("x"));
assertEquals(1, TypeUtil.parse(DataType.INTEGER, "1")); assertEquals(1, TypeUtil.parse(DataType.INTEGER, "1.0")); assertEquals(1, TypeUtil.parse(DataType.INTEGER, "1e+0"));
assertEquals("VALUE", evaluate("uppercase", "Value")); assertEquals("value", evaluate("lowercase", "Value")); assertEquals("", evaluate("substring", "value", 1, 0)); assertEquals("value", evaluate("substring", "value", 1, 5)); assertEquals("alue", evaluate("substring", "value", 2, 4)); assertEquals("valu", evaluate("substring", "value", 1, 4)); assertEquals("value", evaluate("trimBlanks", "\\tvalue\\t"));
assertEquals("value", EvaluatorUtil.decode(value));
assertEquals(first, InlineTableUtil.match(table, createValues(new Object[][]{{"value", "1"}}))); assertEquals(second, InlineTableUtil.match(table, createValues(new Object[][]{{"value", 2}}))); assertEquals(third, InlineTableUtil.match(table, createValues(new Object[][]{{"value", 3d}}))); assertEquals(null, InlineTableUtil.match(table, createValues(new Object[][]{{"value", "false"}})));
assertEquals(Boolean.TRUE, evaluate("not", Boolean.FALSE)); assertEquals(Boolean.FALSE, evaluate("not", Boolean.TRUE));
assertEquals(null, evaluate(expression, createContext())); assertEquals("Missing", evaluate(expression, createContext())); assertEquals(null, evaluate(expression, createContext(name, "3"))); assertEquals("Default", evaluate(expression, createContext(name, "3")));
assertEquals(5d, evaluate(expression, createContext(name, null)));
assertEquals(" 2", evaluate("formatNumber", 2, "%3d")); assertEquals("08/20/04", evaluate("formatDatetime", new LocalDate(2004, 8, 20), "%m/%d/%y"));
assertEquals(0, SparseArrayUtil.getValue(sparseArray, 1)); assertEquals(3, SparseArrayUtil.getValue(sparseArray, 2)); assertEquals(42, SparseArrayUtil.getValue(sparseArray, 5)); assertEquals(0, SparseArrayUtil.getValue(sparseArray, 7));
assertEquals("x", FieldName.marshal(FieldName.create("x"))); assertEquals(null, FieldName.marshal(null));
assertEquals(null, evaluate(expression, createContext())); assertEquals("Missing", evaluate(expression, createContext())); assertEquals(null, evaluate(expression, createContext(name, 3))); assertEquals("Default", evaluate(expression, createContext(name, 3)));
assertEquals(DataType.STRING, TypeUtil.getDataType("value")); assertEquals(DataType.INTEGER, TypeUtil.getDataType(1)); assertEquals(DataType.FLOAT, TypeUtil.getDataType(1f)); assertEquals(DataType.DOUBLE, TypeUtil.getDataType(1d));
assertEquals(Boolean.TRUE, evaluate("isMissing", (String)null)); assertEquals(Boolean.FALSE, evaluate("isMissing", "value")); assertEquals(Boolean.TRUE, evaluate("isNotMissing", "value")); assertEquals(Boolean.FALSE, evaluate("isNotMissing", (String)null));
assertEquals("3", evaluate(expression, createContext(name, "3"))); assertEquals(null, evaluate(expression, createContext(name, null))); assertEquals("Missing", evaluate(expression, createContext(name, null)));
assertFalse(ArgumentUtil.isInvalid(null, null));
assertEquals(DataType.FLOAT, TypeUtil.getConstantDataType("1.0")); assertEquals(DataType.FLOAT, TypeUtil.getConstantDataType("1.0E0")); assertEquals(DataType.STRING, TypeUtil.getConstantDataType("1.0X")); assertEquals(DataType.INTEGER, TypeUtil.getConstantDataType("1")); assertEquals(DataType.STRING, TypeUtil.getConstantDataType("1E0")); assertEquals(DataType.STRING, TypeUtil.getConstantDataType("1X"));
assertEquals(Boolean.TRUE, evaluate("equal", 1, 1d)); assertEquals(Boolean.TRUE, evaluate("equal", 1d, 1d)); assertEquals(Boolean.TRUE, evaluate("notEqual", 1d, 3d)); assertEquals(Boolean.TRUE, evaluate("notEqual", 1, 3));
assertEquals("left", evaluate("if", Boolean.TRUE, "left")); assertEquals("left", evaluate("if", Boolean.TRUE, "left", "right")); assertEquals(null, evaluate("if", Boolean.FALSE, "left")); assertEquals("right", evaluate("if", Boolean.FALSE, "left", "right"));
assertSame(FieldName.create("x"), FieldName.create("x"));
assertEquals(3, evaluate(aggregate, context)); assertEquals(values.get(0), evaluate(aggregate, context)); assertEquals(values.get(2), evaluate(aggregate, context));
assertSame(name, SerializationUtil.clone(name));
assertFalse(ArgumentUtil.isValid(null, null));
assertTrue(VerificationUtil.acceptable(35.12d, TargetUtil.process(target, 8d))); assertEquals(35, TargetUtil.process(target, 8d)); assertEquals(43, TargetUtil.process(target, 12.97d));
assertThat(underTest.changedLines()).containsExactly(2, 3);
assertThat(newScmProvider().forkDate("master", worktree)).isNull();
assertThat(underTest.changedLines()).containsExactly(2, 3, 11, 12, 13);
assertThat(changedLines).containsExactly(entry(filePath, emptySet()));
assertThat(changedLines).isNull();
assertThat(underTest.changedLines()).isEmpty();
assertThat(newScmProvider().forkDate("master", worktree)) .isEqualTo(expectedForkDate.truncatedTo(ChronoUnit.SECONDS));
assertThat(newScmProvider().forkDate("unknown", worktree)).isNull();
assertThat(gitScmProvider.blameCommand()).isEqualTo(jblameCommand);
assertThat(newGitScmProvider().relativePathFromScmRoot(path)).isEqualTo(filename);
assertThat(newScmProvider().branchChangedLines("master", worktree, Collections.singleton(Paths.get("file")))).isNull();
assertThat(logTester.logs()).first() .matches(s -> s.contains("Shallow clone detected, no blame information will be provided."));
assertThat(newGitScmProvider().key()).isEqualTo("git");
assertThat(changedLines).containsExactly(entry(filePath, new HashSet<>(Arrays.asList(1, 4))));
assertThat(newGitScmProvider().supports(baseDirEmpty)).isFalse(); assertThat(newScmProvider().supports(baseDir)).isTrue();
assertThat(factory.newThread(pool).getName()).isEqualTo("git-scm-0"); assertThat(factory.newThread(pool).getName()).isEqualTo("git-scm-1");
assertThat(provider.branchChangedLines("branch", worktree, emptySet())).isNull();
assertThat(changedLines).containsExactly(entry(filePath, new HashSet<>(Arrays.asList(1, 4))));
assertThat(context.getExtensions()).hasSize(3);
assertThat(newScmProvider().branchChangedFiles("nonexistent", worktree)).isNull();
assertThat(newGitScmProvider().relativePathFromScmRoot(path)).isEqualTo(relpath);
assertThat(provider.branchChangedFiles("branch", worktree)).isNull();
assertThat(newScmProvider().branchChangedLines("master", worktree, Collections.singleton(filePath))) .isEmpty();
assertThat(newScmProvider().forkDate("b1", worktree)) .isEqualTo(expectedForkDate.truncatedTo(ChronoUnit.SECONDS));
assertThat(underTest.changedLines()).containsExactly(1);
assertThat(newGitScmProvider().relativePathFromScmRoot(worktree)).isEqualTo(Paths.get(""));
assertThat(sha1before).hasSize(40); assertThat(sha1after).hasSize(40); assertThat(sha1after).isNotEqualTo(sha1before); assertThat(provider.revisionId(projectDir)).isEqualTo(sha1after);
assertThat(newScmProvider().branchChangedLines("nonexistent", worktree, emptySet())).isNull();
assertThat(newScmProvider().forkDate("master", temp.newFolder().toPath())).isNull();
assertThat(underTest.changedLines()).containsExactly(2, 3, 11, 12, 13);
assertThat(newScmProvider().branchChangedFiles("master", projectDir)) .containsOnly(projectDir.resolve("file-b1"));
assertThat(provider.revisionId(projectDir)).isNull();
assertThat(newScmProvider().forkDate("master", worktree)).isNull();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(cpk.toString()).isNotNull();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(model.isIdSet()).isFalse();
assertThat(cpk.isEmpty()).isTrue();
assertEquals(orig, out); assertEquals(orig, out);
assertTrue(snk.getFormat() instanceof RawOutputFormat); assertTrue(snk.getFormat() instanceof AvroDataFileOutputFormat); assertTrue(snk.getFormat() instanceof AvroJsonOutputFormat); assertTrue(snk.getFormat() instanceof SequenceFileOutputFormat);
assertTrue("Expected increasing counts", last < l); assertTrue("Expected increasing counts", last < l); assertEquals("Missing counter value", i, (long) counts.get((int) i));
assertEquals(e.inAggregateMode, true); assertEquals(e.command, "ps -aux"); assertEquals(e.restart, true); assertEquals(e.period, 1000);
assertEquals(0, cnt.getCount()); assertEquals(10 * 10, cnt.getCount()); assertEquals(10 * 10 + 1000, cnt.getCount()); assertEquals(Long.valueOf(20), src.getMetrics().getLongMetric(TailDirSource.A_FILESADDED));
assertEquals(orig, out);
assertTrue(pipe.source().isBlocking()); assertTrue(!pipe.source().isBlocking()); assertTrue(rdSz <= 0);
assertTrue(children.size() > 0);
assertEquals(i, seq.incrementAndGet());
assertTrue(ret.size() == 1); assertNotNull("Report \'reportable1\' not found", rep); assertTrue("Expected exactly one double metric", rep.getDoubleMetricsSize() == 1); assertTrue("Expected double metric to be equal to 0.5", rep .getDoubleMetrics().get("doubleAttr") == 0.5);
assertFalse(node.checkConfig(null)); assertTrue(node.checkConfig(cfgData)); assertFalse(node.checkConfig(cfgData)); assertTrue(node.checkConfig(cfgData2)); assertFalse(node.checkConfig(cfgData2)); assertFalse(node.checkConfig(cfgData)); assertFalse(node.checkConfig(cfgData)); assertFalse(node.checkConfig(cfgData2)); assertFalse(node.checkConfig(cfgData3));
assertTrue("Timeout becuase channel read blocked", done.await(5000, TimeUnit.MILLISECONDS));
assertTrue("Delete not successful!", client.exists("/test-flume", false) == null); assertEquals("Didn\'t get expected \'hello world\' from getData - " + dataString, dataString, "hello world"); assertTrue("Final delete not successful!", client.exists("/test-flume", false) == null);
assertTrue(node.getDriver().waitForState(DriverState.ERROR, 1000)); assertEquals(1, count.get());
assertEquals(57895, cfg.getMasterHeartbeatPort()); assertEquals(57895, cfg.getMasterHeartbeatPort());
assertNotNull(m); assertNotNull(m.get("top"));
assertEquals(orig.get(i), bin);
assertTrue(lns.contains("logical1")); assertTrue(lns.contains("logical2")); assertTrue(lns.contains("logical3")); assertTrue(manager.getLogicalNode("p2").contains("l2")); assertTrue(manager.getLogicalNode("p3").contains("l3"));
assertEquals(2000, cnt.getCount()); assertEquals(Long.valueOf(200), rpt1.getLongMetric(TailDirSource.A_FILESPRESENT)); assertEquals(2000, cnt.getCount()); assertEquals(rpt.getLongMetric(TailDirSource.A_FILESADDED), rpt.getLongMetric(TailDirSource.A_FILESDELETED)); assertEquals(Long.valueOf(0), rpt.getLongMetric(TailDirSource.A_FILESPRESENT));
assertFalse(cmdman.isFailure(id)); assertFalse(cmdman.isSuccess(id)); assertEquals("", status.getMessage()); assertTrue(status.isQueued()); assertEquals("", status.getMessage()); assertTrue(status.isSuccess()); assertFalse(cmdman.isFailure(l)); assertTrue(cmdman.isSuccess(l));
assertEquals(0, NetUtils.findHostIndex(new String[] { "127.0.0.1" })); assertEquals(0, NetUtils.findHostIndex(new String[] { "localhost" })); assertEquals(0, NetUtils.findHostIndex(new String[] { "127.1.0.1" }));
assertTrue(cmdman.isFailure(id)); assertTrue(cmdman.isSuccess(id));
assertEquals(57892, cfg.getMasterGossipPort()); assertEquals(57892, cfg.getMasterGossipPort());
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertEquals("Replacement of tag by date failed: " + test, "Thu", test);
assertTrue(ret.size() == 1); assertNotNull("Report \'reportable1\' not found", rep); assertTrue("Expected exactly one double metric", rep.doubleMetrics.size() == 1); assertTrue("Expected double metric to be equal to 0.5", rep.doubleMetrics .get(new Utf8("doubleAttr")) == 0.5);
assertTrue("source.next did not exit after close within 5 seconds", latch.await(5000, TimeUnit.MILLISECONDS));
assertEquals(orig, out);
assertTrue(f.getAbsolutePath().matches(matchPat));
assertNotNull(m);
assertEquals(attrs + 2, e.getNumMetrics()); assertEquals(e.getLongMetric("event1.another"), Long.valueOf(12345L)); assertEquals(e.getLongMetric("event1.duplicateLong"), Long.valueOf(54321L));
assertEquals(1000, cnt.getCount()); assertEquals(Long.valueOf(10), src.getMetrics().getLongMetric(TailDirSource.A_FILESADDED));
assertNotNull(m);
assertEquals("null", transData.getSourceConfig()); assertEquals("{ nullDeco => null }", transData.getSinkConfig()); assertEquals("null", selfData.getSourceConfig()); assertEquals("{ nullDeco => null }", selfData.getSinkConfig()); assertEquals("null", origData.getSourceConfig()); assertEquals("null", origData.getSinkConfig());
assertTrue(done.await(10, TimeUnit.SECONDS)); assertEquals(count, ctr.getCount());
assertEquals(e.inAggregateMode, false); assertEquals(e.command, "ps -aux"); assertEquals(e.restart, false); assertEquals(e.period, 0);
assertTrue(snk instanceof RollSink);
assertEquals(10, tmp.length()); assertEquals(5, tmp.length());
assertNotNull(m); assertNotNull(m);
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertEquals(1, set.size());
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertNotNull("Report \'repotable1\' not found", rep); assertTrue("Expected exactly one double metric", rep.getDoubleMetricsSize() == 1); assertTrue("Expected double metric to be equal to 0.5", rep .getDoubleMetrics().get("doubleAttr") == 0.5);
assertTrue(rdSz <= sz);
assertTrue(ret); assertEquals(0, buf.position()); assertTrue(ret); assertEquals(0, buf.position()); assertFalse(ret); assertEquals(1, buf.position()); assertFalse(ret); assertEquals(maxSz - 1024, buf.position());
assertNotNull(m); assertTrue(m.containsKey("deco")); assertNotNull(m); assertTrue(m.containsKey("sink"));
assertNotNull(m);
assertEquals("test content", new String(e2.getBody())); assertEquals("value", Attributes.readString(e2, "attr1"));
assertTrue(snk.getFormat() instanceof RawOutputFormat); assertTrue(snk.getFormat() instanceof AvroDataFileOutputFormat); assertTrue(snk.getFormat() instanceof AvroJsonOutputFormat); assertTrue(snk.getFormat() instanceof SequenceFileOutputFormat); assertTrue(snk.getFormat() instanceof SequenceFileOutputFormat);
assertEquals("Replacement of tags in order failed: " + test, "%{henry}", test);
assertNull(cfg.get(FlumeConfiguration.NODE_STATUS_PORT));
assertEquals(hex, outHex);
assertTrue("Didn\'t find expected tag", Event.containsTag("/henry/%{test}")); assertTrue("Didn\'t find expected shorthand tag", Event .containsTag("/henry/%h")); assertFalse("Found non-existant tag", Event.containsTag("/henry/test"));
assertNotNull("No exception thrown!", ex != null);
assertNotNull(m); assertEquals(m.get("node").getText(), "logicalNode"); assertNull(m);
assertEquals( "foo1", rpt.getStringMetric("primary.LazyOpenDecorator.StubbornAppend.foo1.name")); assertEquals("foo2", rpt.getStringMetric("backup.BackoffFailover.primary.LazyOpenDecorator." + "StubbornAppend.foo2.name")); assertEquals("foo3", rpt.getStringMetric("backup.BackoffFailover.backup.LazyOpenDecorator." + "StubbornAppend.foo3.name"));
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertEquals(e.inAggregateMode, true); assertEquals(e.command, "ps -aux"); assertEquals(e.restart, true); assertEquals(e.period, 1000);
assertEquals("Tag replacement of host failed!", "/henry/abcde-test", test); assertEquals("Tag replacement of unknown single character tag failed!", "/henry/", test);
assertEquals(orig, out);
assertNotNull("Report \'reportable1\' not found", rep); assertTrue("Expected exactly one double metric", rep.doubleMetrics.size() == 1); assertTrue("Expected double metric to be equal to 0.5", rep.doubleMetrics .get(new Utf8("doubleAttr")) == 0.5);
assertNotNull(snk);
assertEquals(attrs + 1, e.getNumMetrics());
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertTrue(needsRefresh); assertEquals(0, ns.version); assertTrue(prev <= ns.lastseen); assertEquals(NodeState.HELLO, ns.state); assertEquals(0, ns.version); assertTrue(prev <= ns.lastseen); assertEquals(NodeState.LOST, ns.state);
assertTrue(snk.getFormat() instanceof RawOutputFormat); assertTrue(snk.getFormat() instanceof AvroDataFileOutputFormat); assertTrue(snk.getFormat() instanceof AvroJsonOutputFormat); assertTrue(snk.getFormat() instanceof SequenceFileOutputFormat);
assertNotSame("foo:12345:2181:3181,bar:1345:2181:3181", zksvrs); assertEquals("foo:3181:3182:3183,bar:3181:3182:3183", zksvrs);
assertEquals(false, cfg.getMasterIsDistributed()); assertEquals(true, cfg.getMasterIsDistributed());
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertEquals(DriverState.ERROR, node.getDriver().getState());
assertEquals("null", transData.getSourceConfig()); assertEquals("{ nullDeco => null }", transData.getSinkConfig()); assertEquals("null", selfData.getSourceConfig()); assertEquals("{ nullDeco => null }", selfData.getSinkConfig()); assertEquals("null", origData.getSourceConfig()); assertEquals("null", origData.getSinkConfig());
assertThat(strategies).contains(SMAStrategy.class.getSimpleName());
assertThat(indicator.getName()).isEqualTo(indicator2.getName()); assertThat(indicator).isEqualTo(indicator);
assertThat(resultOne).hasSize(numberOne); assertThat(resultTwo).hasSize(numberTwo); assertThat(resultThree).hasSize(0);
assertThat(resultOne).hasSize(2); assertThat(resultOne).containsExactlyInAnyOrder(T1, T2); assertThat(resultTwo).hasSize(2); assertThat(resultTwo).containsExactlyInAnyOrder(T4, T5);
assertThat(result).hasSize(expected);
assertThat("1", isNumeric()); assertThat("1.2", isNumeric()); assertThat("100000.10000", isNumeric()); assertThat("0.00001", isNumeric()); assertThat("1 a", not(isNumeric())); assertThat("one", not(isNumeric())); assertThat(".", not(isNumeric())); assertThat("", not(isNumeric())); assertThat(null, not(isNumeric())); assertThat("001.2", isNumeric());
assertThat(ticks).hasSize(number); assertThat(result).contains("timestamp");
assertThat(result).hasSize(expected);
assertThat(indicators).contains(BollingerBands.class.getSimpleName()); assertThat(definitions.getIndicators().size()).isGreaterThan(0);
assertThat(result).hasSize(expected);
assertThat(resultOne).hasSize(numberOne); assertThat(resultTwo).hasSize(numberTwo); assertThat(resultThree).hasSize(0);
assertEquals(MAX_ITERATIONS, factorizer.getCount());
assertTrue(threeStooges.isStooge("Moe"));
assertEquals(exObject_1, exObject_2);
assertEquals(MAX_ITERATIONS, factorizer.getCount());
assertEquals(MAX_ITERATIONS * 2, sequence.getValue());
assertNotNull(reasoner); assertEquals(10, reasoner.getNumberOfWorkers()); assertFalse(reasoner.isIncrementalMode());
assertEquals(Runtime.getRuntime().availableProcessors(), reasoner.getNumberOfWorkers());
assertEquals(3, config.getParameterNames().size());
assertEquals(3, defaultConfig.getParameterNames().size());
assertEquals(2, defaultConfig.getParameterNames().size()); assertEquals(1, defaultConfig.getParameterNames().size());
assertEquals(1, test.x); assertEquals(1, test.y); assertEquals(9, test.width); assertEquals(9, test.height);
assertEquals(0, r.x); assertEquals(60, r.y); assertEquals(640, r.width); assertEquals(360, r.height); assertEquals(r.width, (int)r169.width);
assertEquals(size, read); assertEquals(new String(data, 0, size), new String(buffer, 0, size));
assertEquals(size, read); assertEquals(new String(data, 0, size), new String(buffer, 0, size));
assertEquals(-320, test.x); assertEquals(-180, test.y); assertEquals(2560, test.width); assertEquals(1440, test.height); assertEquals(-320, test.x); assertEquals(-180, test.y); assertEquals(2560, test.width); assertEquals(1440, test.height);
assertEquals(-107, r.x); assertEquals(0, r.y); assertEquals(853, r.width); assertEquals(480, r.height); assertEquals(r.height, (int)r169.height);
assertEquals(size, read); assertEquals(new String(data, 0, size), new String(buffer, offset, size));
assertEquals(160, r.x); assertEquals(0, r.y); assertEquals(960, r.width); assertEquals(720, r.height); assertEquals(r.height, (int)r169.height);
assertEquals(1920*2, r.width); assertEquals(1080*2, r.height);
assertEquals(0, r.x); assertEquals(-120, r.y); assertEquals(1280, r.width); assertEquals(960, r.height); assertEquals(r.width, (int)r169.width); assertEquals(r43.getAR(), AspectHelper.ar_4_3, AspectHelper.ar_tolerance);
assertEquals(0, trans.x); assertEquals(0, trans.y); assertEquals(1920, trans.width); assertEquals(1080, trans.height);
assertTrue(AspectHelper.is_16_9(ui.getAR())); assertTrue(AspectHelper.is_16_9(vid.getAR())); assertTrue("Destination and UI should be same size", destVid.equals(ui.asIntRect()));
assertEquals(0, test.x); assertEquals(-80, test.y); assertEquals(640, test.width); assertEquals(640, test.height); assertEquals(0, test.x); assertEquals(-135, test.y); assertEquals(1920, test.width); assertEquals(1080, test.height);
assertEquals(size, read); assertEquals(new String(data, 0, size), new String(buffer, 0, size));
assertEquals(size, read); assertEquals(new String(data, 0, size), new String(buffer, 0, size)); assertEquals(size, read); assertEquals(new String(data, 1, size), new String(buffer, 1, size)); assertEquals(size, read);
assertTrue(AspectHelper.is_16_9(ui.getAR())); assertTrue(AspectHelper.is_16_9(vid.getAR())); assertEquals(new Rectangle(249, 0, 1422, 1080), destVid);
assertEquals(-320, trans.x); assertEquals(0, trans.y); assertEquals(2560, trans.width); assertEquals(1080, trans.height);
assertTrue(AspectHelper.RectF_16_9.equals(AspectHelper.RectF_16_9.copy())); assertFalse(AspectHelper.RectF_16_9.equals(AspectHelper.RectF_4_3));
assertEquals(test.x, 460); assertEquals(test.y, 30); assertEquals(test.width, 1000); assertEquals(test.height, 1020);
assertTrue(AspectHelper.is_16_9(ui.getAR())); assertTrue(AspectHelper.is_4_3(vid.getAR())); assertEquals(ui.asIntRect().height, destVid.height); assertEquals(destVid.x * 2 + destVid.width, ui.asIntRect().width);
assertThat(mIntentCaptor.getValue().getAction(), is("ackAddr")); assertThat(mIntentCaptor.getValue().getStringExtra(Nanny.PROTOCOL_VERSION), is(Nanny.PPP_0_1)); assertThat(mIntentCaptor.getValue().getStringExtra(Nanny.CLIENT_ADDRESS), is("clientAddr"));
assertThat(intentCaptor.getValue().hasExtra(Nanny.CLIENT_ADDRESS), is(false));
assertThat(ans, is(true));
assertThat(actual.getRequestRationale(), is("reason"));
assertThat(mAccountsCaptor.getValue()[0], is(mAccount));
assertThat(mIntentFilterCaptor.getValue().countActions(), is(1)); assertThat(mIntentFilterCaptor.getValue().getAction(0), is(mNannyRequest.mClientAddr));
assertThat(mCursorArgumentCaptor.getValue(), sameInstance(mCursor)); assertThat(mBundleArgumentCaptor.getValue(), equalToBundle(mIntent.getExtras()));
assertThat(future.cancel(false), is(false)); assertThat(future.isCancelled(), is(false)); assertThat(future.isDone(), is(true)); assertThat(future.getResult(1, TimeUnit.DAYS), sameInstance(mAccount));
assertThat(mBundleCaptor.getValue().getString("key"), is("val"));
assertThat(runnable) .isNotNull() .is(mockCondition());
assertThat(mEasyMockConfig.provideMockMaker()) .isNotNull() .isInstanceOf(EasyPowerMockMockMaker.class);
assertThat(constructor).isNotNull(); assertThat(constructor.isAnnotationPresent(Inject.class)).isFalse(); assertThat(constructor.getParameterCount()).isEqualTo(0);
assertThat(key1) .isEqualTo(key5) .isNotEqualTo(key2) .isNotEqualTo(key4); assertThat(key2) .isEqualTo(key3) .isNotEqualTo(key4) .isNotEqualTo(key5);
assertThat(mockspresso) .isNotNull();
assertThat(mEasyMockConfig.provideMockMaker()) .isNotNull() .isInstanceOf(EasyMockMockMaker.class);
assertThat(mMockitoConfig.provideMockAnnotations()) .contains( Spy.class, Mock.class);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(hashMap) .isNotNull() .is(Conditions.mockCondition()); assertThat(retVal).isNull();
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(fields).hasSize(4);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(constructor).isNotNull(); assertThat(constructor.isAnnotationPresent(Inject.class)).isFalse(); assertThat(constructor.getParameterCount()).isEqualTo(0);
assertThat(mMockitoConfig.provideFieldPreparer()) .isNotNull() .isInstanceOf(PowerMockitoFieldPreparer.class);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(mMockitoConfig.provideMockAnnotations()) .contains( Spy.class, Mock.class);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(mEasyMockConfig.provideFieldPreparer()) .isNotNull() .isInstanceOf(EasyPowerMockFieldPreparer.class);
assertThat(mMockitoConfig.provideFieldPreparer()) .isNotNull() .isInstanceOf(MockitoFieldPreparer.class);
assertThat(mMockRunnable) .isNotNull() .is(Conditions.mockCondition()); assertThat(mMockRunnable2) .isNotNull() .is(Conditions.mockCondition()); assertThat(mStrictRunnable) .isNotNull() .is(Conditions.mockCondition()); assertThat(mNiceRunnable) .isNotNull() .is(Conditions.mockCondition());
assertThat(mMockRunnable) .isNotNull() .is(mockCondition());
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock);
assertThat(result1).isTrue(); assertThat(result2).isFalse(); assertThat(result3).isTrue();
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(constructor1.getParameterCount()).isEqualTo(1); assertThat(constructor2.getParameterCount()).isEqualTo(0);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(constructor).isNotNull(); assertThat(constructor.isAnnotationPresent(Inject.class)).isTrue(); assertThat(constructor.getParameterCount()).isEqualTo(2);
assertThat(mMockitoConfig.provideMockMaker()) .isNotNull() .isInstanceOf(PowerMockitoMockMaker.class);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock);
assertThat(result).isEqualTo(test);
assertThat(methodList).hasSize(14); assertTrue(methodList.get(i).getDeclaringClass() == Object.class); assertThat(methodList.get(12).getName()).isEqualTo("doSomething"); assertThat(methodList.get(13).getName()).isEqualTo("doSomethingElse");
assertThat(hashMap) .isNotNull() .is(mockCondition()); assertThat(retVal).isNull();
assertThat(mEasyMockConfig.provideFieldPreparer()) .isNotNull() .isInstanceOf(EasyMockFieldPreparer.class);
assertThat(constructor).isNull();
assertThat(runnable) .isNotNull() .is(mockCondition());
assertThat(result) .containsExactly("nice", "dog");
assertThat(hashMap) .isNotNull() .is(mockCondition()); assertThat(retVal).isNull();
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(constructor).isNull();
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(mInjectionConfig.provideInjectableFieldAnnotations()).containsOnly(Inject.class);
assertThat(testObject.mRunnable).isEqualTo(mRunnableMock);
assertThat(runnable) .isNotNull() .is(Conditions.mockCondition());
assertThat(result) .containsExactly("hi", "sup", "nice", "dog");
assertThat(result) .containsExactly("hi", "sup", "nice", "dog");
assertThat(runnable) .isNotNull() .is(mockCondition());
assertThat(descriptionCaptor.getValue().getMethodName()).isEqualTo("testMethodName"); assertThat(resultStatement).isEqualTo(replacementStatement);
assertThat(hashMap) .isNotNull() .is(mockCondition()); assertThat(retVal).isNull();
assertThat(mMockRunnable) .isNotNull() .is(mockCondition()); assertThat(mSpyRunnable) .isNotNull() .is(spyCondition()); assertThat(mSpyRunnable2) .isNotNull() .is(spyCondition());
assertThat(annotationList).isEmpty();
assertThat(result) .containsExactly("hi", "sup");
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(mEasyMockConfig.provideMockAnnotations()) .contains(Mock.class);
assertThat(mEasyMockConfig.provideMockAnnotations()) .contains( Mock.class, org.powermock.api.easymock.annotation.Mock.class, MockNice.class, MockStrict.class);
assertThat(newBuilder).isNotNull();
assertThat(newBuilder).isNotNull();
assertThat(result1).isTrue(); assertThat(result2).isFalse(); assertThat(result3).isTrue();
assertThat(mMockRunnable) .isNotNull() .is(mockCondition()); assertThat(mSpyRunnable) .isNotNull() .is(spyCondition()); assertThat(mSpyRunnable2) .isNotNull() .is(spyCondition());
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertThat(mMockitoConfig.provideMockMaker()) .isNotNull() .isInstanceOf(MockitoMockMaker.class);
assertThat(returnedBuilder) .isNotNull() .isEqualTo(mBuilder);
assertNull(StringHelper.escapeJava(null));
assertEquals(2, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily()); assertEquals("Vincent", names[1].getGiven()); assertEquals("Van der", names[1].getNonDroppingParticle()); assertEquals("Voort", names[1].getFamily());
assertTrue(CSL.supportsStyle("ieee")); assertTrue(CSL.supportsStyle("apa")); assertFalse(CSL.supportsStyle("jkseghg"));
assertEquals("CSL \'type\' not set", CSLType.THESIS, cid.getType()); assertEquals("CSL \'genre\' not set", "Thesis (Ph.D.)", cid.getGenre());
assertEquals(2, m.size()); assertEquals(2, authors.size()); assertEquals("Ted", authors.get(0)); assertEquals("Mark", authors.get(1)); assertEquals(2, date.size()); assertEquals(2013L, date.get("year")); assertEquals(9L, date.get("month"));
assertEquals(-1, c.compare("Hello 24", "Hello 7846785478595743")); assertEquals(-1, c.compare("Hello 7846785478595742", "Hello 7846785478595743"));
assertEquals("[1]T. Author, \\u201cThe Paper,\\u201d presented at the Conference, The Place.\\n", bib);
assertEquals(1, names.length); assertEquals("Ken", names[0].getGiven()); assertEquals("Thompson", names[0].getFamily());
assertEquals(Integer.valueOf(1), pr.getNumberOfPages()); assertFalse(pr.isMultiplePages());
assertEquals(Arrays.asList("Hello", "Hiplo"), min);
assertEquals(0, pr.getRemainingArgs().length); assertEquals(ShellGetCommand.class, pr.getFirstCommand()); assertEquals(ShellGetStyleCommand.class, pr.getLastCommand()); assertEquals(0, pr.getRemainingArgs().length); assertEquals(ShellGetCommand.class, pr.getFirstCommand()); assertEquals(ShellGetStyleCommand.class, pr.getLastCommand());
assertEquals(Collections.singletonList( new NumberElement("10")), NumberParser.parse("10")); assertEquals(Collections.singletonList( new NumberElement("10")), NumberParser.parse(" 10 ")); assertEquals(Collections.singletonList( new NumberElement("10a")), NumberParser.parse("10a")); assertEquals(Collections.singletonList( new NumberElement("foo")), NumberParser.parse("foo"));
assertEquals(1, names.length); assertEquals("Thompson", names[0].getFamily());
assertArrayEquals(new int[][] { new int[] { 2013, 11, 17 } }, date.getDateParts()); assertArrayEquals(new int[][] { new int[] { 2013, 11, 17 } }, date.getDateParts());
assertEquals("10-20,30-40,45,50-55,5", pr.getLiteral()); assertEquals("5", pr.getPageFirst()); assertEquals(Integer.valueOf(30), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertEquals("10-20,30-40", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertEquals(Integer.valueOf(22), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages()); assertEquals("10-20,30-40", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertEquals(Integer.valueOf(22), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertEquals("10,11", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertEquals(Integer.valueOf(2), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages()); assertEquals("10,11", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertEquals(Integer.valueOf(2), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertArrayEquals(new int[][] { new int[] { 2013, 11, 17 } }, date.getDateParts()); assertArrayEquals(new int[][] { new int[] { 2013, 11 } }, date.getDateParts()); assertArrayEquals(new int[][] { new int[] { 2013 } }, date.getDateParts()); assertArrayEquals(new int[][] { new int[0] }, date.getDateParts());
assertEquals(0, a.get(0).getIndex()); assertEquals("[1]", a.get(0).getText()); assertEquals(1, b.getEntries().length); assertEquals(0, b.getEntries().length);
assertEquals("??", pr.getLiteral()); assertEquals("??", pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertFalse(pr.isMultiplePages());
assertEquals(0, pr.getRemainingArgs().length); assertEquals(ShellCommand.class, pr.getFirstCommand()); assertEquals(0, pr.getRemainingArgs().length); assertEquals(BibliographyCommand.class, pr.getFirstCommand()); assertEquals(1, pr.getRemainingArgs().length); assertEquals("shell", pr.getRemainingArgs()[0]); assertNull(pr.getFirstCommand()); assertNull(pr.getLastCommand());
assertEquals(ik1.next().getValue(), ik2.next()); assertFalse(ik1.hasNext()); assertFalse(ik2.hasNext());
assertEquals(1, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily());
assertEquals(0, pr.getRemainingArgs().length); assertEquals(BibliographyCommand.class, pr.getFirstCommand()); assertEquals(BibliographyCommand.class, pr.getLastCommand()); assertEquals(0, pr.getRemainingArgs().length); assertEquals(ListCommand.class, pr.getFirstCommand());
assertEquals("Bach:1986:UTS", cid.getId()); assertEquals("German", cid.getLanguage());
assertEquals("10-??", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertTrue(pr.isMultiplePages()); assertEquals("10 - ??", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertEquals(1, names.length); assertEquals("Ken", names[0].getGiven()); assertEquals("Thompson", names[0].getFamily());
assertEquals("10", pr.getLiteral()); assertEquals("10", pr.getPageFirst()); assertEquals(Integer.valueOf(1), pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertEquals(1, names.length); assertEquals("George", names[0].getGiven()); assertEquals("Jr.", names[0].getSuffix()); assertEquals("Friedman", names[0].getFamily());
assertEquals(0, a.get(0).getIndex()); assertEquals("<strong>Johnson and Kernighan</strong>, " + "\\u201cThe Programming Language B.\\u201d", a.get(0).getText());
assertEquals(2, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily()); assertEquals("Vincent", names[1].getGiven()); assertEquals("van der", names[1].getNonDroppingParticle()); assertEquals("Voort", names[1].getFamily());
assertEquals(1, names.length); assertEquals("Vincent", names[0].getGiven()); assertEquals("Van der", names[0].getNonDroppingParticle()); assertEquals("Voort", names[0].getFamily());
assertEquals("??-??", pr.getLiteral()); assertEquals("??", pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertTrue(pr.isMultiplePages()); assertEquals("?? - ??", pr.getLiteral()); assertEquals("??", pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertTrue(pr.isMultiplePages());
assertEquals(l, factory.createJsonBuilder().toJson(a));
assertEquals(2, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily()); assertEquals("Vincent", names[1].getGiven()); assertEquals("van der", names[1].getNonDroppingParticle()); assertEquals("Voort", names[1].getFamily());
assertEquals(2, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily()); assertEquals("Vincent", names[1].getGiven()); assertEquals("van der", names[1].getNonDroppingParticle()); assertEquals("Voort", names[1].getFamily());
assertEquals("Hello", min);
assertEquals(1, names.length); assertEquals("Dennis M.", names[0].getGiven()); assertEquals("Ritchie", names[0].getFamily());
assertEquals(1, names.length); assertEquals("S. C.", names[0].getGiven()); assertEquals("Johnson", names[0].getFamily());
assertEquals(1, names.length); assertEquals("Dennis M.", names[0].getGiven()); assertEquals("Ritchie", names[0].getFamily());
assertEquals(1, names.length); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily());
assertArrayEquals(new int[][] { new int[] { 2013, 7 }, new int[] { 2013, 8 } }, d.getDateParts()); assertArrayEquals(new int[][] { new int[] { 2013 } }, d.getDateParts()); assertArrayEquals(new int[][] { new int[] { 2013 }, new int[] { 2014 } }, d.getDateParts());
assertEquals(1, names.length); assertEquals("Given", names[0].getGiven()); assertEquals("Familya Familyb", names[0].getFamily());
assertArrayEquals(new int[][] { new int[] { 2013, 11 } }, date.getDateParts());
assertEquals(Collections.singletonList( new NumberElement("10\\u201312", null, true)), NumberParser.parse("10-12")); assertEquals(Collections.singletonList( new NumberElement("10a, I; 10c, I", null, true)), NumberParser.parse("10a,I; 10c,I")); assertEquals(Collections.singletonList( new NumberElement("1, 2, 3", null, true)), NumberParser.parse("1,2,3"));
assertTrue(ss.size() > 5000); assertTrue(ss.contains("ieee")); assertTrue(ss.contains("apa")); assertTrue(ss.contains("vancouver"));
assertEquals(1, names.length); assertEquals(str, names[0].getLiteral());
assertEquals(1, names.length); assertEquals("George", names[0].getGiven()); assertEquals("Jr.", names[0].getSuffix()); assertEquals("Friedman", names[0].getFamily());
assertEquals(Arrays.asList("Hello", "Hiplo", "Holla"), min);
assertEquals(5, sf.size()); assertTrue(sf.contains("html")); assertTrue(sf.contains("text")); assertTrue(sf.contains("asciidoc")); assertTrue(sf.contains("rtf")); assertTrue(sf.contains("fo"));
assertEquals("A page", pr.getLiteral()); assertNull(pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertFalse(pr.isMultiplePages()); assertEquals("A,,page", pr.getLiteral()); assertNull(pr.getPageFirst()); assertNull(pr.getNumberOfPages()); assertFalse(pr.isMultiplePages());
assertEquals("[1]S. C. Johnson and B. W. Kernighan, \\u201cThe Programming Language B,\\u201d " + "Bell Laboratories, Murray Hill, NJ, USA, 8, 1973.\\n", bibl);
assertEquals(6, m.size()); assertEquals("value", m.get("name")); assertEquals(1302L, m.get("int")); assertEquals(1.57, m.get("float")); assertEquals(-5L, m.get("negint")); assertEquals(-1.57, m.get("negfloat")); assertEquals(-1.5e7, m.get("floatexp"));
assertTrue(ss.size() > 40); assertTrue(ss.contains("de-DE")); assertTrue(ss.contains("en-US")); assertTrue(ss.contains("en-GB")); assertTrue(ss.contains("de")); assertTrue(ss.contains("en"));
assertEquals(1, names.length); assertEquals("Michael", names[0].getGiven()); assertEquals("van", names[0].getNonDroppingParticle()); assertEquals("Gerwen", names[0].getFamily());
assertTrue(nodeInfoColumnars.size() == infoColumnars.size());
assertTrue(null != reverseDictionary);
assertTrue(false); assertTrue(true);
assertEquals(expectedMaskedByteRange[i], maskedByteRange[i]);
assertTrue(carbonTable.getDimensionByName("carbonTestTable", "IMEI").equals(dimension));
assertTrue(carbonMetadata == carbonMetadata1);
assertEquals("carbonTestTable", carbonTable.getFactTableName());
assertTrue(false); assertTrue(true);
assertTrue(null != forwardDictionary);
assertEquals(dimensionOrdinalToBlockMapping.size(), dimensionOrdinalToBlockMappingActual.size()); assertTrue(false); assertTrue(true);
assertEquals(1, blockMetadataInfos.getComplexDimensions().size());
assertEquals(1, carbonTable.getNumberOfMeasures("carbonTestTable"));
assertEquals("carbonTestDatabase", carbonTable.getDatabaseName());
assertEquals(8, blockMetadataInfos.getDimensions().size());
assertEquals(1, carbonMetadata.getNumberOfTables());
assertTrue(3 == carbonDictionaryColumnMetaChunks.size());
assertTrue(null != carbonMetadata.getCarbonTable(tableUniqueName));
assertTrue(null != reverseDictionary); assertTrue(null != reverseDictionary);
assertTrue(null != reverseDictionary);
assertTrue(e instanceof CarbonUtilException); assertTrue(null == reverseDictionary);
assertTrue(null != reverseDictionary); assertTrue(null == reverseDictionary);
assertEquals("carbonTestDatabase_carbonTestTable", carbonTable.getTableUniqueName());
assertEquals(expectedOutPut[i], dimensionBitLength[i]);
assertEquals(1, carbonTable.getNumberOfDimensions("carbonTestTable"));
assertTrue(false); assertTrue(true);
assertTrue(3 == carbonDictionaryColumnMetaChunks.size());
assertEquals(1, carbonMetadata.getCarbonTable(tableUniqueName).getNumberOfMeasures("carbonTestTable"));
assertEquals(expectedMaskedByteRange[i], maskedByteRange[i]);
assertTrue(false); assertTrue(true);
assertEquals(1, carbonMetadata.getCarbonTable(tableUniqueName).getNumberOfDimensions("carbonTestTable"));
assertTrue(tableSchema.equals(cmpEqualsTableSchema)); assertTrue(!(tableSchema.equals(cmpNotEqualsTableSchema)));
assertEquals(measureOrdinalToBlockMapping.size(), measureOrdinalToBlockMappingActual.size()); assertTrue(false); assertTrue(true);
assertTrue(tableInfo.equals(cmpEqualsTableInfo)); assertTrue(!(tableInfo.equals(cmpNotEqualsTableInfo)));
assertEquals("carbonTestTable", carbonMetadata.getCarbonTable(tableUniqueName).getFactTableName());
assertTrue(cacheProvider instanceof CacheProvider);
assertTrue(null != reverseDictionary); assertTrue(null != reverseDictionary);
assertEquals(2, blockMetadataInfos.getMeasures().size());
assertTrue(null != forwardDictionary); assertTrue(null != forwardDictionary);
assertEquals("carbonTestDatabase", carbonMetadata.getCarbonTable(tableUniqueName).getDatabaseName());
assertTrue(dictionaryCache instanceof ForwardDictionaryCache); assertFalse(dictionaryCache instanceof ReverseDictionaryCache); assertTrue(reverseDictionaryCache instanceof ReverseDictionaryCache); assertFalse(reverseDictionaryCache instanceof ForwardDictionaryCache);
assertTrue(null == carbonMetadata.getCarbonTable("notpresent"));
assertEquals(expectedMaskedByteRange[i], maskedByteRange[i]);
assertTrue(metaDataReader.readFooter() != null);
assertTrue(false); assertTrue(false); assertTrue(false);
assertEquals("carbonTestDatabase_carbonTestTable", carbonMetadata.getCarbonTable(tableUniqueName).getTableUniqueName());
assertTrue(null != forwardDictionary);
assertTrue(1 == carbonDictionaryColumnMetaChunks.size()); assertTrue(dataSet1.size() == actual.size());
assertEquals("From node is wrong",0l,e.getFromNodeId());
assertEquals(new Long(0).hashCode(), n.hashCode());
assertEquals("Cost is wrong",3.0,e.getWeight(),0);
assertEquals("From adjacent not right",1l,e.getAdjacent(0)); assertEquals("To adjacent not right",0l,e.getAdjacent(1));
assertEquals(2,vector.getDistance(1),0);
assertEquals(true, n.equals(n1)); assertEquals(false, n.equals(n2));
assertEquals(true, e.equals(e1)); assertEquals(false, e.equals(e2)); assertEquals(false, e.equals(e3)); assertEquals(false, e.equals(e4));
assertEquals("0|1|3.0", e.toString());
assertEquals(el, vector.getElement(1L));
assertEquals(0l, n.getId());
assertEquals("Should be bidirectional",true,e.isBidirectional());
assertEquals("0|1|3.0".hashCode(), e.hashCode());
assertEquals("To node is wrong",1l,e.getToNodeId());
assertTrue(true);
assertNotNull(files); assertTrue(new File(f).exists());
assertNotNull(safeReader);
assertTrue("Empty collections should be equal", CollectionUtils.compareCollectionContents(coll1, coll2));
assertTrue("Comparing equal collections should be return true", CollectionUtils.compareCollectionContents(coll1, coll2)); assertTrue("Comparing equal but differently ordered collections should be return true", CollectionUtils.compareCollectionContents(coll3, coll4)); assertTrue("Comparing differently typed collections with same elements should be return true", CollectionUtils.compareCollectionContents(coll5, coll6));
assertFalse("Short form results in an invalid localname", result.contains("/") || result.contains("#"));
assertFalse(processor.canProcess(noBrackets));
assertEquals(URI.create(namespace2), result); assertTrue(URIUtils.isNamespaceKnown(result)); assertEquals(URI.create(namespace5), result); assertFalse(URIUtils.isNamespaceKnown(result));
assertTrue("Comparing identical collections should be return true", CollectionUtils.compareCollectionContents(coll, coll));
assertFalse("Short form results in an invalid localname", result.contains("/"));
assertFalse("Comparing unequal collections should be return false", CollectionUtils.compareCollectionContents(coll1, coll2));
assertEquals("Unexpected shortened form", prefix1 + ":term", URIUtils.getShortform(pm, uri1)); assertEquals("Unexpected shortened form", prefix2 + ":term", URIUtils.getShortform(pm, uri2)); assertEquals("Unexpected shortened form", prefix3 + ":term", URIUtils.getShortform(pm, uri3));
assertFalse(processor.canProcess(hyperploidyExample));
assertEquals("Unexpected shortened form", prefix1 + ":term", result); assertEquals("Unexpected shortened form", prefix2 + ":term", result);
assertFalse("Short form results in an invalid localname \'" + localName + "\'", localName.isEmpty()); assertFalse("Short form results in an invalid localname \'" + localName + "\'", localName.isEmpty());
assertEquals("Unexpected lengthened form", uri1, URIUtils.getURI(pm, shortform1)); assertEquals("Unexpected lengthened form", uri2, URIUtils.getURI(pm, shortform2));
assertEquals("Wrong number of results", 1, results.size()); assertTrue("Identifiable \'foo\' not found", results.contains(foo)); assertEquals("Wrong number of results", 1, results.size()); assertTrue("Identifiable \'bar\' not found", results.contains(bar)); assertEquals("Wrong number of results", 1, results.size()); assertTrue("Identifiable \'baz\' not found", results.contains(baz));
assertEquals("Wrong number of results", 4, results.size()); assertTrue(results.contains("foo")); assertTrue(results.contains("foo bar")); assertTrue(results.contains("foo bar baz")); assertTrue(results.contains("foo baz"));
assertFalse("Comparing unequal collections should be return false", CollectionUtils.compareCollectionContents(coll1, coll2));
assertEquals("Unexpected number of prefixes", properties.size(), prefixMappings.size()); assertTrue("Could not find \'slash\' prefix", prefixMappings.containsKey("slash")); assertTrue("Could not find \'hash\' prefix", prefixMappings.containsKey("hash"));
assertFalse(processor.canProcess(noTime)); assertTrue(processor.canProcess(day)); assertTrue(processor.canProcess(hours)); assertTrue(processor.canProcess(week)); assertTrue(processor.canProcess(decimal));
assertEquals(DicomEncoding.IVR_LE, readDataSet(IVR_LE));
assertArrayEquals(resourceAsBytes("preamble_fmi_defl.dcm"), bout.toByteArray());
assertEquals(DicomEncoding.EVR_BE, readDataSet(EVR_BE));
assertArrayEquals(EVR_BE_GROUP, writeDataset(DicomEncoding.EVR_BE, true, DicomOutputStream.LengthEncoding.UNDEFINED_OR_ZERO, DicomOutputStream.LengthEncoding.UNDEFINED_OR_ZERO, sequences()));
assertEquals(DicomEncoding.EVR_LE, readDataSet(EVR_LE));
assertNotNull(item); assertTrue(waveformData.bulkDataURI() .endsWith(".blk#length=256")); assertTrue(overlayData.bulkDataURI() .endsWith(".blk#offset=256&length=256")); assertTrue(pixelData.bulkDataURI() .endsWith(".blk#offset=512")); assertTrue(data.get(Tag.DataSetTrailingPadding).isPresent()); assertEquals(792, Files.size(spoolPath));
assertEquals(DicomEncoding.DEFL_EVR_LE, readDataSet("preamble_fmi_defl.dcm"));
assertArrayEquals(StringUtils.EMPTY_STRINGS, StringUtils.split(JOINED, 0, DELIM)); assertArrayEquals(ONE, StringUtils.split(JOINED, 1, DELIM)); assertArrayEquals(ARRAY, StringUtils.split(JOINED, JOINED.length(), DELIM));
assertArrayEquals(resourceAsBytes("waveform_overlay_pixeldata.dcm"), writeDataset(DicomEncoding.EVR_LE, false, DicomOutputStream.LengthEncoding.EXPLICIT, DicomOutputStream.LengthEncoding.EXPLICIT, data));
assertArrayEquals(C_ECHO_RQ, bout.toByteArray());
assertNull(StringUtils.join(null, 0, 0, DELIM)); assertEquals("", StringUtils.join(StringUtils.EMPTY_STRINGS, 0, 0, DELIM)); assertEquals("A", StringUtils.join(ONE, 0, 1, DELIM)); assertEquals(JOINED, StringUtils.join(ARRAY, 0, ARRAY.length, DELIM));
assertEquals("102030.456789", DateTimeUtils.formatTM(LOCAL_TIME));
assertEquals(LOCAL_DATE, DateTimeUtils.parseDA("20070419")); assertEquals(LOCAL_DATE, DateTimeUtils.parseDA("2007.04.19"));
assertNotNull(item); assertTrue(waveformData.bulkDataURI() .endsWith("waveform_overlay_pixeldata.dcm#offset=32&length=256")); assertTrue(overlayData.bulkDataURI() .endsWith("waveform_overlay_pixeldata.dcm#offset=300&length=256")); assertTrue(pixelData.bulkDataURI() .endsWith("waveform_overlay_pixeldata.dcm#offset=568")); assertTrue(data.get(Tag.DataSetTrailingPadding).isPresent());
assertEquals("", StringUtils.cut(JOINED, 0, DELIM, 0)); assertEquals(ARRAY[i], StringUtils.cut(JOINED, JOINED.length(), DELIM, i)); assertEquals("", StringUtils.cut(JOINED, JOINED.length(), DELIM, ARRAY.length));
assertEquals("20070419102030.456789", DateTimeUtils.formatDT(LOCAL_DATE_TIME)); assertEquals("20070419102030.456789+0200", DateTimeUtils.formatDT(ZONED_DATE_TIME));
assertArrayEquals(EXPL_SEQ_LEN, writeDataset(DicomEncoding.IVR_LE, true, DicomOutputStream.LengthEncoding.EXPLICIT, DicomOutputStream.LengthEncoding.UNDEFINED, sequences()));
assertEquals(" A", StringUtils.trim(" A ", StringUtils.Trim.TRAILING)); assertEquals("A ", StringUtils.trim(" A ", StringUtils.Trim.LEADING)); assertEquals("A", StringUtils.trim(" A ", StringUtils.Trim.LEADING_AND_TRAILING));
assertEquals("20070419", DateTimeUtils.formatDA(LOCAL_DATE));
assertArrayEquals(EXPL_ITEM_LEN, writeDataset(DicomEncoding.IVR_LE, true, DicomOutputStream.LengthEncoding.UNDEFINED, DicomOutputStream.LengthEncoding.EXPLICIT, sequences()));
assertNotNull(cmd); assertEquals(48, cmd.getInt(Tag.CommandField).orElseGet(Assertions::fail));
assertArrayEquals(IVR_LE, writeDataset(DicomEncoding.IVR_LE, false, DicomOutputStream.LengthEncoding.UNDEFINED_OR_ZERO, DicomOutputStream.LengthEncoding.UNDEFINED_OR_ZERO, sequences()));
assertThat( geometryCollectionBuilder.toString(), is("GEOMETRYCOLLECTION (LINESTRING (30 10, 10 30, 40 40))"));
assertThat(condition.isRolloverReady(packetBuffer), is(true));
assertThat(bitReader.readBits(8), is((long) 0b10111010));
assertThat(supplier.apply(metacard, null).isPresent(), is(true));
assertThat( finalMetacard.getAttribute(Core.DATATYPE), is(new AttributeImpl(Core.DATATYPE, MpegTsInputTransformer.DATA_TYPE)));
assertThat(result, is(metacard));
assertThat(bitReader.readBits(5), is((long) 0b10111)); assertThat(bitReader.readBits(3), is((long) 0b010));
assertThat(geoBoxHandler.getLatitude3(), is(LAT3));
assertThat(updateRequest, is(modifiedRequest));
assertThat(new TempFileGeneratorImpl().generate(), notNullValue());
assertThat(metacard.getTags(), is(empty()));
assertFalse(supports);
assertThat(loggingKlvHandler.getAttributeName(), is(nullValue()));
assertThat( os.toByteArray(), is(new byte[] {0x01, 0x02, 0x03, 0x01, 0x02, 0x03, 0x01, 0x02, 0x03}));
assertThat(klvHandler.asAttribute().isPresent(), is(false));
assertThat(supplier.apply(new MetacardImpl(), null).isPresent(), is(false));
assertThat(bitReader.readBits(6), is((long) 0b101110)); assertThat(bitReader.readBits(2), is((long) 0b10));
assertThat(klvHandler.asAttribute().isPresent(), is(false));
assertThat(actual, is(expected));
assertThat(result, is(emptyGeo));
assertThat(scaledValues[i], is(values[i] * 2));
assertTrue(supports);
assertThat(e, notNullValue());
assertThat(result.getWidth(), is(inputImage.getWidth())); assertThat(result.getHeight(), is(inputImage.getHeight()));
assertThat(klvHandler.getLongitudeFieldName(), is(LON));
assertThat(condition.toString(), notNullValue());
assertThat(geometryOperatorList.apply(null, new GeometryOperator.Context()), nullValue());
assertThat(lineString, is(nullValue()));
assertThat(convertedValue, is("USA"));
assertFalse(supports);
assertThat(condition.toString(), not(nullValue()));
assertThat(actual.isEmpty(), is(true));
assertThat(token.getPrincipal(), is(instanceOf(VideographerPrincipal.class))); assertThat( token.getCredentials(), is(VideographerAuthenticationToken.VIDEOGRAPHER_CREDENTIALS)); assertThat(token.getIpAddress(), is("127.0.0.1"));
assertThat(tags, is(notNullValue())); assertThat(tags, containsInAnyOrder("Tag-A", "Tag-B"));
assertThat(geoBoxHandler.getLatitude1(), is(LAT1));
assertThat(image, is(notNullValue())); assertThat(image.getWidth(), is(1024)); assertThat(image.getHeight(), is(1024));
assertThat(geoAttributeList, hasSize(1)); assertThat(geoAttributeList.get(0).getValue(), is(TEMPORAL_START_DATE));
assertThat(metacard.getAttribute(name).getValue(), is(value));
assertThat(actual.isValid(), is(true));
assertThat(finalMetacard.getAttribute(Media.TYPE), is(notNullValue())); assertThat( finalMetacard.getAttribute(Media.TYPE).getValue(), is(MpegTsInputTransformer.CONTENT_TYPE)); assertThat(finalMetacard.getContentTypeName(), is(MpegTsInputTransformer.CONTENT_TYPE)); assertThat(finalMetacard.getMetadata(), is("the metadata"));
assertThat(handler, is(instanceOf(UpdateParent.class)));
assertThat(udpStreamMonitor.getStartImmediately(), is(false)); assertThat(udpStreamMonitor.getStartImmediately(), is(true));
assertThat(geoBoxHandler.getLatitude4(), is(LAT4));
assertThat(predicate.test(metacard), is(false));
assertThat(predicate.test(metacard), is(true));
assertThat(actual, nullValue());
assertThat(metacard.getThumbnail(), is(nullValue())); assertThat(metacard.getAttribute(Core.DERIVED_RESOURCE_URI), is(nullValue()));
assertThat(klvHandler.getRawGeoData().get(LAT).get(0), closeTo(10.0, EPSILON));
assertThat(e, notNullValue());
assertThat(condition.isRolloverReady(packetBuffer), is(true));
assertThat(metacard.getLocation(), nullValue());
assertThat(bitReader.readBits(7), is((long) 0b1011101)); assertThat(bitReader.readBits(1), is((long) 0b0));
assertThat(channel, is(RoutingSlip.GMTI_ROUTE));
assertThat(listFilenameGenerator.toString(), notNullValue());
assertThat(metacard.getMetacardType(), is(metacardType)); assertThat(metacard.getContentTypeName(), Matchers.is(Constants.MPEGTS_MIME_TYPE));
assertThat(actual, is(expected));
assertThat(request.getAttributeName(), is(Metacard.RESOURCE_URI)); assertThat(request.getAttributeValue().toString(), is("content:10101#overview")); assertThat(request.getProperties().get(ContentItem.QUALIFIER_KEYWORD), is(OVERVIEW));
assertThat(illegalCharactersFilenameGenerator.toString(), notNullValue());
assertThat(actual.isEmpty(), is(true));
assertThat( udpStreamMonitor.getByteCountRolloverCondition(), is(Math.toIntExact(UdpStreamMonitor.MEGABYTE_COUNT_MIN)));
assertThat(metacard.getPointOfContact(), is(nullValue()));
assertThat(scaledValues[i], is(values[i]));
assertThat(metacard.getLocation(), nullValue());
assertThat(elapsedTimeRolloverCondition.isRolloverReady(packetBuffer), is(true));
assertThat(actual, is(geometry));
assertThat(e, notNullValue());
assertThat(resultMetacards, hasSize(1));
assertThat(bitReader.readBits(3), is((long) 0b101)); assertThat(bitReader.readBits(3), is((long) 0b110)); assertThat(bitReader.readBits(2), is((long) 0b10));
assertThat(actual, nullValue());
assertThat(packetBuffer.toString(), notNullValue());
assertThat(NitfAttributeConverters.fipsToStandardCountryCode("US"), is(nullValue()));
assertThat(geoBoxHandler.getLatitude2(), is(LAT2));
assertThat(geometryOperatorList.toString(), notNullValue());
assertThat(lineString, is("POINT (0 0)"));
assertThat(imageSegment1.getPixelValueType(), is(PixelValueType.INTEGER)); assertThat(imageSegment1.getImageRepresentation(), is(ImageRepresentation.MONOCHROME)); assertThat(imageSegment1.getActualBitsPerPixelPerBand(), is(8)); assertThat(imageSegment1.getNumberOfBitsPerPixelPerBand(), is(8)); assertThat(imageSegment1.getImageBand(1).getImageRepresentation(), is("M"));
assertThat(result.getWidth(), is(102)); assertThat(result.getHeight(), is(102));
assertThat(captor.getValue().getUpdates().get(0).getValue(), is(parent));
assertNotNull(metacard); assertThat(metacard.getMetacardType().getName(), is("isr.gmti"));
assertThat(metacard.getLocation(), is(wkt));
assertThat(catalogOutputAdapter.formatToDMS(30, 30), is("300000N0300000E")); assertThat(catalogOutputAdapter.formatToDMS(-30, 30), is("300000S0300000E")); assertThat(catalogOutputAdapter.formatToDMS(30, -30), is("300000N0300000W")); assertThat(catalogOutputAdapter.formatToDMS(-30, -30), is("300000S0300000W"));
assertThat(klvHandler.getLatitudeFieldName(), is(LAT));
assertThat(lineString, is("LINESTRING (0 0, 10 10)"));
assertThat(actual, is(geometry));
assertThat(mpeg4DecodedStreamData.getNalUnits(), is(nalUnitList));
assertThat(deleteRequest, is(modifiedRequest));
assertThat(handler.asAttribute().isPresent(), is(false));
assertThat(metacardFactoryString, is(notNullValue())); assertThat( metacardFactoryString, is( "InputTransformer {Impl=org.codice.alliance.transformer.nitf.MetacardFactory, id=ddf/catalog/transformer/nitf, mime-type=image/nitf}"));
assertThat(Utilities.isBlankString(" "), is(true)); assertThat(Utilities.isNotBlankString(" "), is(false));
assertThat(actual, is(expected));
assertThat(lineString, is((String) null));
assertThat(geoBoxHandler.getLongitude1(), is(LON1));
assertThat(predicate.test(new MetacardImpl()), is(false));
assertThat(geoAttributeList, hasSize(1)); assertThat(geoAttributeList.get(0).getValue(), is(TEMPORAL_END_DATE));
assertThat(decodedStreams.size(), is(1)); assertThat(decodedStreams, hasKey(497)); assertThat(decodedPackets.size(), is(1));
assertThat(packetBuffer.getAge(), is(0L));
assertThat(actual, is(expected));
assertThat(udpStreamMonitor.getFileNameTemplate(), is(filenameTemplate));
assertThat(bitReader.readableBits(), is(0L));
assertThat(actual, is(expected));
assertThat(lineString, is((String) null));
assertThat(actual, is(geometry));
assertThat(metacard.getPointOfContact(), is(nullValue()));
assertThat(optionalWkt.isPresent(), is(false));
assertThat(scaledValues[i], is(values[i]));
assertThat(outputList, hasSize(packetCount - 1));
assertThat(templateFilenameGenerator.toString(), notNullValue());
assertThat(metacard, is(not(nullValue()))); assertThat( metacard.getAttribute(Validation.VALIDATION_WARNINGS).getValues().size(), equalTo(1)); assertThat( metacard.getAttribute(Security.CLASSIFICATION_SYSTEM).getValue(), is(originalNitfValue));
assertThat(listMetacardUpdater.toString(), notNullValue());
assertThat(bitReader.readBit(), is((byte) 1)); assertThat(bitReader.readBit(), is((byte) 0)); assertThat(bitReader.readBit(), is((byte) 1)); assertThat(bitReader.readBit(), is((byte) 1)); assertThat(bitReader.readBit(), is((byte) 1)); assertThat(bitReader.readBit(), is((byte) 0)); assertThat(bitReader.readBit(), is((byte) 1)); assertThat(bitReader.readBit(), is((byte) 0));
assertThat(condition.isRolloverReady(packetBuffer), is(false));
assertThat(optionalWkt.isPresent(), is(false));
assertThat(bitReader.readBits(2), is((long) 0b10)); assertThat(bitReader.readBits(2), is((long) 0b11)); assertThat(bitReader.readBits(2), is((long) 0b10)); assertThat(bitReader.readBits(2), is((long) 0b10));
assertThat(geoAttributeList, hasSize(1)); assertThat(geoAttributeList.get(0).getValue(), is(TEMPORAL_END_DATE));
assertThat(actual.getCoordinates().length, is(999));
assertThat(resourceSiteName, is(siteName));
assertThat(simplifyGeometryFunction.toString(), notNullValue());
assertThat(dateTime.getZonedDateTime().toInstant(), is(convertedDate.toInstant()));
assertThat(convertedDate, is(nullValue()));
assertThat(timerFactory.get(), notNullValue());
assertThat(start.isPresent(), is(true)); assertThat(start.get(), is(1L));
assertThat(createMetacardRolloverAction.toString(), notNullValue());
assertThat(mpeg4DecodedStreamData.getPacketId(), is(PACKET_ID));
assertThat(convertedDate, is(nullValue()));
assertThat(new ListRolloverAction(Collections.emptyList()).toString(), notNullValue());
assertThat(geoBoxHandler.asAttribute().isPresent(), is(false));
assertThat( simplifyGeometryFunction.apply(wktReader.read(lineStringWkt), context).norm(), is(wktReader.read(expectedLineStringWkt).norm()));
assertThat(imageSegment1.getPixelValueType(), is(PixelValueType.INTEGER)); assertThat(imageSegment1.getImageRepresentation(), is(ImageRepresentation.RGBLUT)); assertThat(imageSegment1.getActualBitsPerPixelPerBand(), is(8)); assertThat(imageSegment1.getNumberOfBitsPerPixelPerBand(), is(8)); assertThat(imageSegment1.getImageBand(1).getImageRepresentation(), is("LU"));
assertThat(elapsedTimeRolloverCondition.toString(), notNullValue());
assertThat(actual.getCoordinates().length, is(1000));
assertThat(nitfSegmentsFlow, notNullValue());
assertThat(elapsedTimeRolloverCondition.isRolloverReady(packetBuffer), is(false));
assertThat(result, is(newGeometry));
assertThat(elapsedTimeRolloverCondition.isRolloverReady(packetBuffer), is(true));
assertThat( transformedGeometry.getCoordinates().length, Matchers.lessThan(originalGeometry.getCoordinates().length));
assertThat(bitReader.readBits(4), is((long) 0b1011)); assertThat(bitReader.readBits(4), is((long) 0b1010));
assertThat(Utilities.isNotStringNone(" "), is(true)); assertThat(Utilities.isNotStringNone("non"), is(true)); assertThat(Utilities.isNotStringNone("none"), is(false)); assertThat(Utilities.isNotStringNone("None"), is(false)); assertThat(Utilities.isNotStringNone("NONE"), is(false)); assertThat(Utilities.isNotStringNone("None "), is(false));
assertThat(stanagParserFactory.createParser(mock(ByteSource.class)), notNullValue());
assertThat(geoBoxHandler.getLongitude2(), is(LON2));
assertThat(geoBoxHandler.getRawGeoData().get(LAT1).get(0), closeTo(10.0, EPSILON));
assertThat(metacard.getPointOfContact(), is(EXPECTED_POC));
assertThat(result, is(emptyGeo));
assertThat(resultMetacards, hasSize(1));
assertThat(t.getDistanceTolerance(), closeTo(value, 0.1));
assertThat(channel, is(RoutingSlip.IMAGE_ROUTE));
assertThat( normalizeGeometry.apply(geometry, new GeometryOperator.Context()), is(normalizedGeometry));
assertThat(metacard.getThumbnail(), is(nullValue())); assertThat(metacard.getAttribute(Core.DERIVED_RESOURCE_URI), is(nullValue()));
assertThat(binaryContent, is(notNullValue())); assertThat(binaryContent.getInputStream(), is(notNullValue())); assertThat(returnedImage.getWidth(), is(1024)); assertThat(returnedImage.getHeight(), is(1024));
assertThat(normalizeGeometry.toString(), notNullValue());
assertThat(loggingKlvHandler.asAttribute().isPresent(), is(false));
assertThat(channel, is(RoutingSlip.IMAGE_ROUTE));
assertThat(result, nullValue());
assertThat(updateField, is(instanceOf(FrameCenterUpdateField.class)));
assertThat(metacard.getThumbnail(), is(nullValue())); assertThat(metacard.getAttribute(Core.DERIVED_RESOURCE_URI), is(nullValue()));
assertThat(metacard.getPointOfContact(), is(nullValue()));
assertThat(resourceRequest.getAttributeValue(), is(id));
assertThat(metacard.getLocation(), is(wktLineString));
assertThat(data.get(LAT), hasSize(1)); assertThat(data.get(LON), hasSize(1)); assertThat(data.get(LAT).get(0), is(closeTo(lat, EPSILON))); assertThat(data.get(LON).get(0), is(closeTo(lon, EPSILON)));
assertThat(actual, is(expected));
assertThat(os.toByteArray(), is(new byte[] {}));
assertThat(metacard.getPointOfContact(), is(EXPECTED_POC));
assertThat(geoBoxHandler.getLongitude3(), is(LON3));
assertThat(geoBoxHandler.getLongitude4(), is(LON4));
assertThat(updateField, is(instanceOf(LocationUpdateField.class))); assertThat(locationUpdateField.getPreUnionGeometryOperator(), is(preUnionGeometryOperator)); assertThat(locationUpdateField.getPostUnionGeometryOperator(), is(postUnionGeometryOperator));
assertThat(result.getWidth(), is(100)); assertThat(result.getHeight(), is(100));
assertThat(actual, is(geometry));
assertThat(locationKlvProcessor.getGeometryFunction(), is(geometryFunction));
assertThat(channel, is(RoutingSlip.IMAGE_ROUTE));
assertThat( udpStreamMonitor.getElapsedTimeRolloverCondition(), is(UdpStreamMonitor.ELAPSED_TIME_MIN));
assertThat(NitfAttributeConverters.fipsToStandardCountryCode(null), is(nullValue()));
assertThat(optionalWkt.isPresent(), is(false));
assertThat(udpStreamMonitor.getStreamUri().isPresent(), is(false));
assertThat(actual, is(nullValue()));
assertThat(metacard.getLocation(), nullValue());
assertThat(result, lessThan(0));
assertThat(disposable.isDisposed(), is(true)); assertThat(disposable.isDisposed(), is(true));
assertThat(result, comparesEqualTo(0));
assertThat(actualTrack, is(queue.get(0)));
assertThat(actual, is(expected));
assertThat(actual, is(expected));
assertThat(Strings.isBlank(" "), is(true));
assertThat(loginManager.isLoggedOut(), is(false));
assertThat(Strings.isBlank("not blank "), is(false));
assertThat(disposable.isDisposed(), is(false)); assertThat(disposable.isDisposed(), is(true));
assertThat(Strings.isBlank(null), is(true));
assertThat(queueManager.currentTrack(), is(queue.get(3))); assertThat(actualPosition, is(3));
assertThat(actualQueue, IsIterableContainingInOrder.contains( queue.get(0), queue.get(1), queue.get(2), queue.get(3), queue.get(4))); assertThat(actualPosition, is(0));
assertThat(actual, is(expected));
assertThat(loginManager.isLoggedOut(), is(true));
assertThat(Strings.isBlank(""), is(true));
assertEquals(kset.size(), 1); assertTrue(kset.contains("Value1")); assertNull(kset); assertNull(kset); assertNotNull(kset); assertEquals(kset.size(), 3); assertTrue(kset.contains("Value4.1")); assertTrue(kset.contains("Value4.2")); assertTrue(kset.contains("Value4.3")); assertNull(kset);
assertEquals(md, r.getMetadata()); assertEquals(md, r.getMetadata());
assertEquals("00000000", IoUtil.fastOpIdExtraction(md.toString())); assertEquals("0000000000000000", IoUtil.fastOpIdExtraction(md.toString())); assertEquals("00000000", IoUtil.fastOpIdExtraction(md.toString())); assertEquals("0000000000000000", IoUtil.fastOpIdExtraction(md.toString())); assertEquals(md.getOpIdString(), IoUtil.fastOpIdExtraction(md.toString()));
assertNotNull(r.toString()); assertEquals("X-Trace Report ver 1.0\\n", r.toString());
assertNotNull(s); assertTrue(s.startsWith("X-Trace Report ver 1.0")); assertTrue(s.contains("Key1: Value1")); assertTrue(s.contains("Key2: Value2")); assertTrue(s.contains("Key4: Value4.1")); assertTrue(s.contains("Key4: Value4.2")); assertTrue(s.contains("Key4: Value4.3")); assertTrue(s.contains("X-Trace: 100000000000000000"));
assertEquals(Locale.CHINA, instance.getLocale());
assertNotNull(result);
assertEquals(1, instance.getRequiredIsas().size()); assertTrue(instance.getRequiredIsas().contains(isa));
assertEquals(expResult, result.toString());
assertEquals(expResult, result.toString());
assertEquals(languageMt, instance.getFormatLanguageMt());
assertNotNull(result);
assertEquals(domainMt, instance.getDomainMt());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(EMU, result);
assertEquals(languageMt, instance.getParseLanguageMt());
assertTrue(result instanceof CycList);
assertNotNull(result);
assertNotNull(result);
assertEquals(expResult, result); assertEquals(Locale.CHINA, instance.getLocale());
assertEquals(1, instance.getRequiredGenls().size()); assertTrue(instance.getRequiredGenls().contains(genl));
assertFalse(instance.shouldDisambiguate());
assertFalse(instance.isPrecise()); assertTrue(instance.isPrecise());
assertTrue("Failed to get an NLFormat instance from " + cyc, result instanceof NLFormat);
assertEquals(mode, instance.getMode());
assertEquals(expResult, result);
assertEquals(rSet.size(), 1);
assertThat(e.getMessage(), is("Unknown symbols [T]"));
assertEquals(vsMap.size(), 2); assertEquals(vs.getId(), "2.16.840.1.113883.3.464.1003.102.12.1011"); assertEquals(vs.getId(), "2.16.840.1.113883.3.464.1003.102.12.1012");
assertThat(def.getName(), is("Female Administrative Sex")); assertThat(def.getId(), is("2.16.840.1.113883.3.560.100.2")); assertThat(def.getVersion(), is(nullValue())); assertThat(def.getCodeSystem().size(), is(0));
assertEquals(rSet.size(), 1); assertEquals(r.getExistence(), Retrieve.Existence.Occurrence); assertEquals(r.getTopic(), "Condition"); assertEquals(r.getValueset(), new ValueSet("2.16.840.1.113883.3.464.1003.102.12.1011")); assertNull(r.getModality());
assertThat(def.getName(), is("Female Administrative Sex")); assertThat(def.getId(), is("2.16.840.1.113883.3.560.100.2")); assertThat(def.getVersion(), is("1")); assertThat(def.getCodeSystem().size(), is(0));
assertEquals(rSet.size(), 1); assertEquals(r.getExistence(), Retrieve.Existence.NonOccurrence); assertEquals(r.getTopic(), "Encounter"); assertEquals(r.getModality(), "Performance"); assertEquals(r.getValueset(), new ValueSet("2.16.840.1.113883.3.464.1003.101.12.1001"));
assertEquals(varSet.size(), 2); assertTrue(varSet.contains("encounter")); assertTrue(varSet.contains("pharyngitis"));
assertThat(this.function.getTypeIdentifier( getTransaction() ), is(KomodoType.USER_DEFINED_FUNCTION));
assertThat(this.wsMgr.findVdbs(getTransaction()).length, is(0));
assertThat(this.table.getTypeIdentifier( getTransaction() ), is(KomodoType.TABLE));
assertThat( this.foreignKey.getReferencesColumns( getTransaction() ), is( notNullValue() ) ); assertThat( this.foreignKey.getReferencesColumns( getTransaction() ).length, is( 0 ) );
assertThat( this.index.getConstraintType(), is( TableConstraint.ConstraintType.INDEX ) ); assertThat( this.index.getRawProperty( getTransaction(), TeiidDdlLexicon.Constraint.TYPE ).getStringValue( getTransaction() ), is( TableConstraint.ConstraintType.INDEX.toValue() ) );
assertThat( this.permission.isAllowRead( getTransaction() ), is( Permission.DEFAULT_ALLOW_READ ) );
assertThat( this.teiid.getAdminPort( getTransaction() ), is( TeiidAdminInfo.Util.defaultPort(teiidVersion) ) );
assertThat(this.vdb.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB));
assertThat( this.procedure.hasProperty( getTransaction(), option ), is( false ) ); assertThat( this.procedure.hasChild( getTransaction(), option ), is( false ) );
assertNotNull(teiid); assertEquals(RepositoryImpl.SERVERS_ROOT + FORWARD_SLASH + ServerManager.DEFAULT_SERVER_NAME, teiid.getAbsolutePath()); assertEquals("admin2", teiid.getAdminUser(getTransaction()));
assertThat( this.dataRole.getPermissions( getTransaction() ), is( notNullValue() ) ); assertThat( this.dataRole.getPermissions( getTransaction() ).length, is( 0 ) );
assertThat(this.function.getTypeIdentifier( getTransaction() ), is(KomodoType.PUSHDOWN_FUNCTION));
assertThat( dataservice, is( notNullValue() ) ); assertThat( _repo.getFromWorkspace( getTransaction(), dataservice.getAbsolutePath() ), is( ( KomodoObject )dataservice ) );
assertThat( this.function.isNullOnNull( getTransaction() ), is( Function.DEFAULT_NULL_ON_NULL ) );
assertThat(this.teiid.getTypeIdentifier( getTransaction() ), is(KomodoType.TEIID));
assertThat( this.teiid.getJdbcPassword( getTransaction() ), is( TeiidJdbcInfo.DEFAULT_JDBC_PASSWORD ) );
assertThat(this.parameter.getTypeIdentifier( getTransaction() ), is(KomodoType.PARAMETER));
assertThat( this.table.getQueryExpression( getTransaction() ), is( nullValue() ) );
assertThat( this.column.isFixedLength( getTransaction() ), is( Column.DEFAULT_FIXED_LENGTH ) );
assertThat( this.foreignKey.getReferencesTable( getTransaction() ), is( this.refTable ) );
assertThat( this.accessPattern.getConstraintType(), is( TableConstraint.ConstraintType.ACCESS_PATTERN ) ); assertThat( this.accessPattern.getRawProperty( getTransaction(), TeiidDdlLexicon.Constraint.TYPE ).getStringValue( getTransaction() ), is( TableConstraint.ConstraintType.ACCESS_PATTERN.toValue() ) );
assertThat( this.permission.isAllowDelete( getTransaction() ), is( Permission.DEFAULT_ALLOW_DELETE ) );
assertThat( this.function.isAllowsOrderBy( getTransaction() ), is( Function.DEFAULT_ALLOWS_ORDER_BY ) );
assertThat( defaultValues.length, is( 0 ) ); assertThat( defaultValues.length, is( 1 ) ); assertThat( value, is( defaultValues[0] ) );
assertThat( this.column.getStandardOptions().get( optionName ), is( nullValue() ) );
assertThat( this.function.isUsesDistinctRows( getTransaction() ), is( Function.DEFAULT_USES_DISTINCT_ROWS ) );
assertThat(this.connection.getTypeIdentifier( getTransaction() ), is(KomodoType.CONNECTION));
assertThat(this.driver.getTypeIdentifier(getTransaction()), is(KomodoType.DRIVER));
assertThat( this.source.getParent( getTransaction() ), is( instanceOf( Model.class ) ) );
assertThat( this.function.hasProperty( getTransaction(), option ), is( false ) ); assertThat( this.function.hasChild( getTransaction(), option ), is( false ) );
assertThat( this.source.getJndiName( getTransaction() ), is( nullValue() ) );
assertThat( this.primaryKey.getConstraintType(), is( TableConstraint.ConstraintType.PRIMARY_KEY ) ); assertThat( this.primaryKey.getRawProperty( getTransaction(), TeiidDdlLexicon.Constraint.TYPE ).getStringValue( getTransaction() ), is( TableConstraint.ConstraintType.PRIMARY_KEY.toValue() ) );
assertThat( this.function.getChildren( getTransaction() ).length, is( 0 ) );
assertThat( filter.rejectProperty( name ), is( false ) );
assertThat(this.wsMgr.resolve(getTransaction(), kobject, UniqueConstraint.class), is(instanceOf(UniqueConstraint.class)));
assertThat(this.view.getTypeIdentifier( getTransaction() ), is(KomodoType.VIEW));
assertThat(this.wsMgr.resolve(getTransaction(), kobject, ForeignKey.class), is(instanceOf(ForeignKey.class)));
assertThat( this.vdb.isPreview( getTransaction() ), is( false ) );
assertThat( this.teiid.getPrimaryType( getTransaction() ).getName(), is( KomodoLexicon.Teiid.NODE_TYPE ) );
assertThat( this.dataRole.isGrantAll( getTransaction() ), is( DataRole.DEFAULT_GRANT_ALL ) );
assertThat(this.wsMgr.findSchemas(getTransaction()).length, is(0));
assertThat( this.permission.getResourceName( getTransaction() ), is( notNullValue() ) ); assertThat( this.permission.getResourceName( getTransaction() ), is( this.permission.getName( getTransaction() ) ) );
assertThat(this.procedure.getTypeIdentifier( getTransaction() ), is(KomodoType.STORED_PROCEDURE));
assertThat( this.function.getPropertyDescriptor( getTransaction(), standard ), is( notNullValue() ) ); assertThat( this.function.getPropertyDescriptor( getTransaction(), standard ).getName(), is( standard ) );
assertThat(fragment, is(notNullValue())); assertThat(fragment.isEmpty(), is(false)); assertEquals(DDL_VIEW, fragment);
assertTrue(myFileDir.mkdir());
assertThat(this.resultSet.getTypeIdentifier( getTransaction() ), is(KomodoType.DATA_TYPE_RESULT_SET));
assertThat( this.vdbImport.getParent( getTransaction() ), is( instanceOf( Vdb.class ) ) );
assertThat(this.model.getTypeIdentifier( getTransaction() ), is(KomodoType.MODEL));
assertThat( this.function.getStatementOptionNames( getTransaction() ).length, is( 2 ) ); assertThat( Arrays.asList( this.function.getStatementOptionNames( getTransaction() ) ), hasItems( custom, standard ) );
assertThat( this.procedure.getChildren( getTransaction() ).length, is( 2 ) );
assertThat( this.function.hasProperty( getTransaction(), option ), is( true ) ); assertThat( this.function.getProperty( getTransaction(), option ), is( instanceOf( StatementOption.class ) ) ); assertThat( this.function.isCustomOption( getTransaction(), option ), is( false ) ); assertThat( this.function.getStatementOptions( getTransaction() ).length, is( 1 ) ); assertThat( statementOption.getName( getTransaction() ), is( option ) ); assertThat( statementOption.getValue( getTransaction() ), is( ( Object )value ) );
assertThat( this.table.getCardinality( getTransaction() ), is( Table.DEFAULT_CARDINALITY ) );
assertThat( defaultValues.length, is( 0 ) ); assertThat( defaultValues.length, is( 1 ) ); assertThat( value, is( defaultValues[0] ) );
assertNotNull(logger);
assertThat( this.procedure.getResultSet( getTransaction() ), is( nullValue() ) );
assertThat(this.foreignKey.getTypeIdentifier( getTransaction() ), is(KomodoType.FOREIGN_KEY));
assertThat( this.teiid.getName( getTransaction() ), is( TEIID_NAME ) );
assertThat( this.parameter.getChildren( getTransaction() ).length, is( 0 ) );
assertThat( this.function.isVarArgs( getTransaction() ), is( Function.DEFAULT_VARARGS ) );
assertThat( this.resultSet.getType( getTransaction() ), is( Type.DEFAULT_VALUE ) );
assertThat( this.dataRole.isAllowCreateTempTables( getTransaction() ), is( DataRole.DEFAULT_ALLOW_CREATE_TEMP_TABLES ) );
assertThat(this.translator.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_TRANSLATOR));
assertThat(this.uniqueConstraint.getTypeIdentifier( getTransaction() ), is(KomodoType.UNIQUE_CONSTRAINT));
assertThat(this.primaryKey.getTypeIdentifier( getTransaction() ), is(KomodoType.PRIMARY_KEY));
assertThat( this.function.isAllowsDistinct( getTransaction() ), is( Function.DEFAULT_ALLOWS_DISTINCT ) );
assertThat( this.vdbImport.isImportDataPolicies( getTransaction() ), is( VdbImport.DEFAULT_IMPORT_DATA_POLICIES ) );
assertThat( descriptors.length > specialProps.size(), is( true ) ); assertThat( specialProps.isEmpty(), is( true ) );
assertThat( this.procedure.getChildren( getTransaction() ).length, is( 0 ) );
assertThat( this.table.isUpdatable( getTransaction() ), is( Table.DEFAULT_UPDATABLE ) );
assertThat( statementOption, is( notNullValue() ) ); assertThat( statementOption.getName( getTransaction() ), is( name ) ); assertThat( statementOption.getOption( getTransaction() ), is( value ) );
assertTrue(Version.TEIID_8_12_4.get().isLessThan(version("9.0.0"))); assertFalse(Version.TEIID_8_12_4.get().isLessThan(version("8.6.0")));
assertThat( this.table.isMaterialized( getTransaction() ), is( Table.DEFAULT_MATERIALIZED ) );
assertThat(this.wsMgr.findModels(getTransaction()).length, is(0));
assertThat( this.permission.getParent( getTransaction() ), is( instanceOf( DataRole.class ) ) );
assertThat(this.schema.getRendition(getTransaction()), is(DDL_VIEW));
assertThat( this.procedure.isNonPrepared( getTransaction() ), is( StoredProcedure.DEFAULT_NON_PREPARED ) );
assertThat(this.wsMgr.findTeiids(getTransaction()).length, is(0));
assertEquals(version("8.0.0"), version("8.0.0").getMaximumVersion()); assertEquals(version("8.9.0"), version("8.x.0").getMaximumVersion()); assertEquals(version("8.0.9"), version("8.0.x").getMaximumVersion()); assertEquals(version("8.9.9"), version("8.x.x").getMaximumVersion());
assertThat( filter.rejectProperty( name ), is( false ) );
assertThat( this.foreignKey.getParent( getTransaction() ), is( instanceOf( Table.class ) ) ); assertThat( this.foreignKey.getTable( getTransaction() ), is( this.parentTable ) );
assertThat( this.view.getParent( getTransaction() ), is( instanceOf( Model.class ) ) ); assertThat( this.view.getParent( getTransaction() ), is( ( KomodoObject )this.model ) );
assertThat( this.vdb.getTranslators( getTransaction() ), is( notNullValue() ) ); assertThat( this.vdb.getTranslators( getTransaction() ).length, is( 0 ) );
assertThat( this.permission.isAllowExecute( getTransaction() ), is( Permission.DEFAULT_ALLOW_EXECUTE ) );
assertThat( this.function.hasProperty( getTransaction(), option ), is( false ) ); assertThat( this.function.hasChild( getTransaction(), option ), is( false ) );
assertThat(this.folder.getTypeIdentifier( getTransaction() ), is(KomodoType.FOLDER));
assertThat( this.procedure.getPropertyDescriptor( getTransaction(), standard ), is( notNullValue() ) ); assertThat( this.procedure.getPropertyDescriptor( getTransaction(), standard ).getName(), is( standard ) );
assertThat(this.option.getTypeIdentifier( getTransaction() ), is(KomodoType.STATEMENT_OPTION));
assertThat( defaultValues.length, is( 0 ) ); assertThat( defaultValues.length, is( 1 ) ); assertThat( value, is( defaultValues[0] ) );
assertThat(this.dataservice.getTypeIdentifier( getTransaction() ), is(KomodoType.DATASERVICE));
assertThat( this.resultSet.getChildren( getTransaction() ).length, is( 1 ) ); assertThat( this.resultSet.getChildren( getTransaction() )[0], is( instanceOf( ResultSetColumn.class ) ) );
assertThat( this.teiid.getAdminPassword( getTransaction() ), is( TeiidAdminInfo.DEFAULT_ADMIN_PASSWORD ) );
assertThat( Arrays.asList( this.vdb.getChildTypes() ), hasItems( DataRole.IDENTIFIER, Entry.IDENTIFIER, Model.IDENTIFIER, Translator.IDENTIFIER, VdbImport.IDENTIFIER ) ); assertThat(this.vdb.getChildTypes().length, is(5));
assertThat( this.condition.getParent( getTransaction() ), is( instanceOf( Permission.class ) ) );
assertThat( this.dataRole.getParent( getTransaction() ), is( instanceOf( Vdb.class ) ) );
assertThat(this.condition.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_CONDITION));
assertThat( this.primaryKey.getParent( getTransaction() ), is( instanceOf( Table.class ) ) ); assertThat( this.primaryKey.getTable( getTransaction() ), is( this.table ) );
assertThat( this.index.getExpression( getTransaction() ), is( nullValue() ) ); assertThat( this.index.hasProperty( getTransaction(), TeiidDdlLexicon.Constraint.EXPRESSION ), is( false ) );
assertThat( Arrays.asList( this.table.getChildTypes() ), hasItems( AccessPattern.IDENTIFIER, Column.IDENTIFIER, ForeignKey.IDENTIFIER, Index.IDENTIFIER, PrimaryKey.IDENTIFIER, UniqueConstraint.IDENTIFIER ) ); assertThat( this.table.getChildTypes().length, is( 6 ) );
assertThat( this.permission.isAllowLanguage( getTransaction() ), is( Permission.DEFAULT_ALLOW_LANGUAGE ) );
assertTrue(results.isEmpty()); assertFalse(hasChild); assertFalse(results.isEmpty()); assertEquals(1, results.size());
assertThat( this.procedure.getStatementOptionNames( getTransaction() ).length, is( 2 ) ); assertThat( Arrays.asList( this.procedure.getStatementOptionNames( getTransaction() ) ), hasItems( custom, standard ) );
assertThat( filter.rejectProperty( name ), is( false ) );
assertThat( this.column.isSelectable( getTransaction() ), is( Column.DEFAULT_SELECTABLE ) );
assertThat( this.function.getDeterminism( getTransaction() ), is( Determinism.DEFAULT_VALUE ) );
assertThat( this.table.getParent( getTransaction() ), is( instanceOf( Model.class ) ) ); assertThat( this.table.getParent( getTransaction() ), is( ( KomodoObject )this.model ) );
assertThat( this.function.getStatementOptionNames( getTransaction() ).length, is( 2 ) ); assertThat( Arrays.asList( this.function.getStatementOptionNames( getTransaction() ) ), hasItems( custom, standard ) );
assertThat( this.procedure.getUpdateCount( getTransaction() ), is( AbstractProcedure.DEFAULT_UPDATE_COUNT ) );
assertThat( this.function.isAnalytic( getTransaction() ), is( Function.DEFAULT_ANALYTIC ) );
assertThat( this.function.getPropertyDescriptor( getTransaction(), standard ), is( notNullValue() ) ); assertThat( this.function.getPropertyDescriptor( getTransaction(), standard ).getName(), is( standard ) );
assertThat( this.entry.getPath( getTransaction() ), is( notNullValue() ) );
assertThat( this.parameter.isResult( getTransaction() ), is( Parameter.DEFAULT_RESULT ) );
assertThat(this.procedure.getTypeIdentifier( getTransaction() ), is(KomodoType.VIRTUAL_PROCEDURE));
assertThat( this.column.isUpdatable( getTransaction() ), is( Column.DEFAULT_UPDATABLE ) );
assertThat( this.column.isCaseSensitive( getTransaction() ), is( Column.DEFAULT_CASE_SENSITIVE ) );
assertThat( Arrays.asList( this.model.getChildTypes() ), hasItems( PushdownFunction.IDENTIFIER, ModelSource.IDENTIFIER, StoredProcedure.IDENTIFIER, Table.IDENTIFIER, UserDefinedFunction.IDENTIFIER, View.IDENTIFIER, VirtualProcedure.IDENTIFIER ) ); assertThat( this.model.getChildTypes().length, is( 7 ) );
assertThat( this.function.getCustomOptions( getTransaction() ).length, is( 2 ) ); assertThat( Arrays.asList( this.function.getStatementOptionNames( getTransaction() ) ), hasItems( sledge, elvis ) );
assertThat( this.column.getSearchable( getTransaction() ), is( Searchable.DEFAULT_VALUE ) );
assertThat( this.vdb.getImports( getTransaction() ), is( notNullValue() ) ); assertThat( this.vdb.getImports( getTransaction() ).length, is( 0 ) );
assertThat( Arrays.asList( this.resultSet.getChildTypes() ), hasItem( ResultSetColumn.IDENTIFIER ) ); assertThat( this.resultSet.getChildTypes().length, is( 1 ) );
assertThat( this.connection.isJdbc( getTransaction() ), is( Connection.DEFAULT_JDBC ) );
assertNotNull(logger); assertTrue(fileMsg.contains("ERROR " + KLogger.class.getName() + " - " + msg)); assertTrue(fileMsg.contains(msg));
assertThat( teiidInstance.getUrl(), is( TeiidConnectionInfo.UrlConstructor.createDefaultTeiidConnectionUrl()) );
assertThat(this.wsMgr.resolve(getTransaction(), kobject, PrimaryKey.class), is(instanceOf(PrimaryKey.class)));
assertThat( this.dataRole.getDescription( getTransaction() ), is( nullValue() ) );
assertThat( defaultValues.length, is( 0 ) ); assertThat( defaultValues.length, is( 1 ) ); assertThat( value, is( defaultValues[0] ) );
assertThat( this.permission.getMasks( getTransaction() ), is( notNullValue() ) ); assertThat( this.permission.getMasks( getTransaction() ).length, is( 0 ) );
assertThat( ( rawProps.length > filteredProps.length ), is( true ) );
assertThat(this.column.getTypeIdentifier( getTransaction() ), is(KomodoType.RESULT_SET_COLUMN));
assertThat( this.vdb.getVersion( getTransaction() ), is( Vdb.DEFAULT_VERSION ) );
assertThat( this.entry.getDescription( getTransaction() ), is( nullValue() ) );
assertThat( this.function.getChildren( getTransaction() ).length, is( 1 ) ); assertThat( this.function.getChildren( getTransaction() )[0], is( ( KomodoObject )resultSet ) );
assertThat( this.function.isAggregate( getTransaction() ), is( Function.DEFAULT_AGGREGATE ) );
assertThat( this.column.getRadix( getTransaction() ), is( Column.DEFAULT_RADIX ) );
assertThat( this.translator.getType( getTransaction() ), is( notNullValue() ) );
assertThat(this.permission.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_PERMISSION));
assertThat( this.resultSet.isArray( getTransaction() ), is( false ) );
assertThat( this.function.getResultSet( getTransaction() ), is( nullValue() ) );
assertThat( this.vdb.getDataRoles( getTransaction() ), is( notNullValue() ) ); assertThat( this.vdb.getDataRoles( getTransaction() ).length, is( 0 ) );
assertNotNull(logger); assertTrue(fileMsg.contains("INFO " + KLogger.class.getName() + " - " + msg));
assertThat(this.wsMgr.resolve(getTransaction(), kobject, Index.class), is(instanceOf(Index.class)));
assertThat( this.table.getPrimaryKey( getTransaction() ), is( nullValue() ) );
assertThat(this.vdbImport.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_IMPORT));
assertThat( folder, is( notNullValue() ) ); assertThat( _repo.getFromWorkspace( getTransaction(), folder.getAbsolutePath() ), is( ( KomodoObject )folder ) );
assertThat( this.permission.getConditions( getTransaction() ), is( notNullValue() ) ); assertThat( this.permission.getConditions( getTransaction() ).length, is( 0 ) );
assertThat(this.resultSet.getTypeIdentifier( getTransaction() ), is(KomodoType.TABULAR_RESULT_SET));
assertThat( this.source.getTranslatorName( getTransaction() ), is( nullValue() ) );
assertThat( defaultValues.length, is( 0 ) ); assertThat( defaultValues.length, is( 1 ) ); assertThat( value, is( defaultValues[0] ) );
assertThat( this.column.getCharOctetLength( getTransaction() ), is( Column.DEFAULT_CHAR_OCTET_LENGTH ) );
assertThat( this.mask.getOrder( getTransaction() ), is( nullValue() ) );
assertThat( this.index.getParent( getTransaction() ), is( instanceOf( Table.class ) ) ); assertThat( this.index.getTable( getTransaction() ), is( this.table ) );
assertThat( this.parameter.getParent( getTransaction() ), is( this.procedure ) );
assertThat( Arrays.asList( this.dataRole.getChildTypes() ), hasItem( Permission.IDENTIFIER ) ); assertThat( this.dataRole.getChildTypes().length, is( 1 ) );
assertThat(this.source.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_MODEL_SOURCE));
assertThat( this.column.getNullValueCount( getTransaction() ), is( Column.DEFAULT_NULL_VALUE_COUNT ) );
assertThat( this.function.getChildren( getTransaction() ).length, is( 2 ) );
assertThat( this.teiid.getAdminUser( getTransaction() ), is( TeiidAdminInfo.DEFAULT_ADMIN_USERNAME ) );
assertThat( this.vdbImport.isImportDataPolicies( getTransaction() ), is( VdbImport.DEFAULT_IMPORT_DATA_POLICIES ) );
assertThat(this.dataRole.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_DATA_ROLE));
assertNotNull(logger); assertTrue(fileMsg.contains("WARN " + KLogger.class.getName() + " - " + msg.replace("{0}", param1)));
assertThat( this.column.isCurrency( getTransaction() ), is( Column.DEFAULT_CURRENCY ) );
assertThat(this.mask.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_MASK));
assertThat( pk, is( notNullValue() ) ); assertThat( pk.getName( getTransaction() ), is( name ) ); assertThat( this.table.hasChild( getTransaction(), name ), is( true ) );
assertThat(fragment, is(notNullValue())); assertThat(fragment.isEmpty(), is(true));
assertThat( this.function.hasProperty( getTransaction(), option ), is( true ) ); assertThat( this.function.getProperty( getTransaction(), option ), is( instanceOf( StatementOption.class ) ) ); assertThat( this.function.isCustomOption( getTransaction(), option ), is( false ) ); assertThat( this.function.getStatementOptions( getTransaction() ).length, is( 1 ) ); assertThat( statementOption.getName( getTransaction() ), is( option ) ); assertThat( statementOption.getValue( getTransaction() ), is( ( Object )value ) );
assertThat( ( rawProps.length > filteredProps.length ), is( true ) );
assertEquals(TREE, tree);
assertTrue(myFileDir.mkdir()); assertTrue(vdbSrcFile.exists()); assertTrue(parent.hasChild(getTransaction(), TestUtilities.SAMPLE_VDB_NAME));
assertThat( ( rawProps.length > filteredProps.length ), is( true ) );
assertThat( this.procedure.getAsClauseStatement( getTransaction() ), is( nullValue() ) ); assertThat( this.procedure.hasProperty( getTransaction(), TeiidDdlLexicon.CreateProcedure.STATEMENT ), is( false ) );
assertThat( this.mask.getParent( getTransaction() ), is( instanceOf( Permission.class ) ) );
assertThat( this.uniqueConstraint.getConstraintType(), is( TableConstraint.ConstraintType.UNIQUE ) ); assertThat( this.uniqueConstraint.getRawProperty( getTransaction(), TeiidDdlLexicon.Constraint.TYPE ).getStringValue( getTransaction() ), is( TableConstraint.ConstraintType.UNIQUE.toValue() ) );
assertThat( this.vdb.getPrimaryType( getTransaction() ).getName(), is( VdbLexicon.Vdb.VIRTUAL_DATABASE ) );
assertThat( this.teiid.isAdminSecure( getTransaction() ), is( TeiidAdminInfo.DEFAULT_SECURE ) );
assertThat( ( rawProps.length > filteredProps.length ), is( true ) );
assertThat( this.permission.isAllowUpdate( getTransaction() ), is( Permission.DEFAULT_ALLOW_UPDATE ) );
assertThat( this.teiid.isJdbcSecure( getTransaction() ), is( TeiidJdbcInfo.DEFAULT_SECURE ) );
assertThat( this.vdb.getModels( getTransaction() ), is( notNullValue() ) ); assertThat( this.vdb.getModels( getTransaction() ).length, is( 0 ) );
assertThat( this.procedure.getParameters( getTransaction() ).length, is( 0 ) );
assertThat( this.translator.getDescription( getTransaction() ), is( nullValue() ) );
assertThat( this.column.isSigned( getTransaction() ), is( Column.DEFAULT_SIGNED ) );
assertThat( this.vdb.getEntries( getTransaction() ), is( notNullValue() ) ); assertThat( this.vdb.getEntries( getTransaction() ).length, is( 0 ) );
assertThat( this.uniqueConstraint.getParent( getTransaction() ), is( instanceOf( Table.class ) ) ); assertThat( this.uniqueConstraint.getTable( getTransaction() ), is( this.table ) );
assertThat( manifest, is( notNullValue() ) ); assertTrue( manifest.length > 0 );
assertThat(this.accessPattern.getTypeIdentifier( getTransaction() ), is(KomodoType.ACCESS_PATTERN));
assertThat(this.wsMgr.resolve(getTransaction(), kobject, AccessPattern.class), is(instanceOf(AccessPattern.class)));
assertThat( this.permission.isAllowAlter( getTransaction() ), is( Permission.DEFAULT_ALLOW_ALTER ) );
assertThat( Arrays.asList( this.procedure.getChildTypes() ), hasItem( Parameter.IDENTIFIER ) ); assertThat( this.procedure.getChildTypes().length, is( 1 ) );
assertThat( this.column.getParent( getTransaction() ), is( instanceOf( Table.class ) ) ); assertThat( this.column.getParent( getTransaction() ), is( ( KomodoObject )this.table ) );
assertThat( manifest, is( notNullValue() ) ); assertThat( manifest.asDocument(), is( notNullValue() ) );
assertThat( Arrays.asList( this.permission.getChildTypes() ), hasItems( Condition.IDENTIFIER, Mask.IDENTIFIER ) ); assertThat( this.permission.getChildTypes().length, is( 2 ) );
assertThat( this.vdb.getOriginalFilePath( getTransaction() ), is( PATH ) );
assertEquals(version("8.0.0"), version("8.0.0").getMinimumVersion()); assertEquals(version("8.0.0"), version("8.x.0").getMinimumVersion()); assertEquals(version("8.0.0"), version("8.0.x").getMinimumVersion()); assertEquals(version("8.0.0"), version("8.x.x").getMinimumVersion());
assertThat(this.entry.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB_ENTRY));
assertThat( this.function.getChildren( getTransaction() ).length, is( 0 ) );
assertThat( Arrays.asList( this.wsMgr.getChildTypes() ), hasItems( Folder.IDENTIFIER, Connection.IDENTIFIER, Dataservice.IDENTIFIER, Vdb.IDENTIFIER, Schema.IDENTIFIER, Teiid.IDENTIFIER ) ); assertThat( this.wsMgr.getChildTypes().length, is( 6 ) );
assertThat( this.procedure.getChildren( getTransaction() ).length, is( 1 ) ); assertThat( this.procedure.getChildren( getTransaction() )[0], is( ( KomodoObject )resultSet ) );
assertThat( filter.rejectProperty( name ), is( false ) );
assertThat(vdb, is(notNullValue())); assertThat(_repo.getFromWorkspace(getTransaction(), vdb.getAbsolutePath()), is((KomodoObject)vdb));
assertThat(this.schema.getTypeIdentifier( getTransaction() ), is(KomodoType.SCHEMA));
assertThat(this.index.getTypeIdentifier( getTransaction() ), is(KomodoType.INDEX));
assertThat( schema, is( notNullValue() ) ); assertThat( _repo.getFromWorkspace( getTransaction(), schema.getAbsolutePath() ), is( ( KomodoObject )schema ) );
assertNotNull(logger); assertTrue(fileMsg.contains(logMsg));
assertThat(this.wsMgr.resolve(getTransaction(), kobject, Table.class), is(instanceOf(Table.class)));
assertThat(vdb, is(notNullValue())); assertThat(vdb.getParent(getTransaction()), is(_repo.komodoWorkspace(getTransaction())));
assertThat( this.vdb.isPreview( getTransaction() ), is( Vdb.DEFAULT_PREVIEW ) );
assertThat( connection, is( notNullValue() ) ); assertThat( _repo.getFromWorkspace( getTransaction(), connection.getAbsolutePath() ), is( ( KomodoObject )connection ) );
assertThat(this.column.getTypeIdentifier( getTransaction() ), is(KomodoType.COLUMN));
assertThat( this.function.isDecomposable( getTransaction() ), is( Function.DEFAULT_DECOMPOSABLE ) );
assertThat( this.condition.isConstraint( getTransaction() ), is( Condition.DEFAULT_CONSTRAINT ) );
assertThat( this.dataRole.getMappedRoles( getTransaction() ), is( notNullValue() ) ); assertThat( this.dataRole.getMappedRoles( getTransaction() ).length, is( 0 ) );
assertThat( this.column.getDistinctValues( getTransaction() ), is( Column.DEFAULT_DISTINCT_VALUES ) );
assertThat( this.accessPattern.getParent( getTransaction() ), is( instanceOf( Table.class ) ) );
assertThat( this.entry.getParent( getTransaction() ), is( instanceOf( Vdb.class ) ) );
assertThat( this.permission.isAllowCreate( getTransaction() ), is( Permission.DEFAULT_ALLOW_CREATE ) );
assertThat( this.dataRole.isAnyAuthenticated( getTransaction() ), is( DataRole.DEFAULT_ANY_AUTHENTICATED ) );
assertThat( this.foreignKey.getConstraintType(), is( TableConstraint.ConstraintType.FOREIGN_KEY ) ); assertThat( this.foreignKey.getRawProperty( getTransaction(), TeiidDdlLexicon.Constraint.TYPE ).getStringValue( getTransaction() ), is( TableConstraint.ConstraintType.FOREIGN_KEY.toValue() ) );
assertThat( statementOption, is( notNullValue() ) ); assertThat( statementOption.getName( getTransaction() ), is( name ) ); assertThat( statementOption.getOption( getTransaction() ), is( value ) );
assertThat( this.vdb.getConnectionType( getTransaction() ), is( nullValue() ) );
assertTrue(supportedTypes.contains(new MediaType("text", "x-java-source"))); assertTrue(supportedTypes.contains(new MediaType("text", "x-groovy"))); assertTrue(supportedTypes.contains(new MediaType("text", "x-c++src"))); assertFalse(sourceCodeParser.getSupportedTypes(new ParseContext()).contains(new MediaType("text", "html")));
assertEquals("Wrong buffer length", 0, stream.getTail().length);
assertTrue(Pattern.matches("\\tone\\n\\n", result));
assertEquals(TestParameters.VP_INDEX_HEAD, chmItspHeader.getIndex_head());
assertTrue(handler.toString().contains(word));
assertTrue(chmBlockInfo.toString().length() > 0);
assertEquals("valueforcustomprop1", metadata.get("customprop1")); assertEquals("valueforcustomprop2", metadata.get("customprop2"));
assertTrue(names.contains("America")); assertTrue(names.size() == 1);
assertEquals(TestParameters.entryType, dle.getEntryType());
assertNotNull(is); assertEquals("org.apache.tika.parser.pdf.PDFParser", pdfParser.getClass().getName()); assertEquals(PDFParserConfig.OCR_STRATEGY.OCR_ONLY, ((PDFParser)pdfParser).getPDFParserConfig().getOcrStrategy()); assertEquals(ImageType.RGB, ((PDFParser)pdfParser).getPDFParserConfig().getOcrImageType());
assertEquals(1, (int)tagFrequencies.get("title")); assertEquals(9, (int)tagFrequencies.get("meta")); assertEquals(12, (int)tagFrequencies.get("link")); assertEquals(6, (int)tagFrequencies.get("script"));
assertEquals(TestParameters.VP_ITSP_BYTEARR_LEN, chmItspHeader.getSystem_uuid().length);
assertTrue("no exception", true); assertTrue("no exception", true); assertTrue("no exception", true);
assertTrue("Dynamic Service Loading Should be true", dynamicValue);
assertTrue(chmLzxcControlData.toString().contains( TestParameters.VP_CONTROL_DATA_SIGNATURE));
assertTrue(i != -1); assertTrue(j != -1); assertTrue(k != -1); assertTrue(l != -1); assertTrue(m != -1); assertTrue(i < j); assertTrue(j < k); assertTrue(k < l); assertTrue(l < m);
assertFalse("mix of " + language + " and " + other + " incorrectly detected as " + identifier, identifier.isReasonablyCertain());
assertTrue("date must be after 1980:"+dateString, parsedDate.getTime() > date1980.getTime());
assertNotNull("Text not translated", transText);
assertEquals("ab\\ufffda\\ufffdc\\ufffdbc", output.toString());
assertEquals("i", AutoPageNumberUtils.asRomanNumeralsLower(1)); assertEquals("xxvi", AutoPageNumberUtils.asRomanNumeralsLower(26)); assertEquals("xxvii", AutoPageNumberUtils.asRomanNumeralsLower(27));
assertEquals("\\ufffd\\ubfff", output.toString());
assertNotNull(contentType); assertEquals("text/html", contentType);
assertEquals(2, results.size()); assertEquals(new Character(','), results.get(0).getDelimiter()); assertEquals(2, results.size()); assertEquals(new Character('\\t'), results.get(0).getDelimiter());
assertEquals("application/vnd.ms-excel.sheet.binary.macroenabled.12", type.toString()); assertEquals(false, (new OfficeParser()).getSupportedTypes(new ParseContext()).contains(type)); assertTrue((new OOXMLParser()).getSupportedTypes(new ParseContext()).contains(type));
assertEquals("abc", output.toString());
assertEquals("Wrong buffer", generateText(count, count), new String( stream.getTail(), UTF_8));
assertEquals(metadata.get("DIF-Entry_ID"),"00794186-48f9-11e3-9dcb-00c0f03d5b7c"); assertEquals(metadata.get("DIF-Metadata_Name"),"ACADIS IDN DIF");
assertEquals(truth, deserialized);
assertEquals(meta1, meta2);
assertEquals("Simple Content", metadata.get(TikaCoreProperties.TITLE));
assertTrue("Couldn\'t set valid values", true);
assertNotNull(sentiment); assertEquals("positive", sentiment);
assertEquals("text/plain; charset=UTF-8", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue(json.indexOf("When in the Course") > -1); assertEquals(12, metadataList.size());
assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("ISO-8859-1", metadata.get(Metadata.CONTENT_ENCODING)); assertEquals("text/plain; charset=ISO-8859-15", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("ISO-8859-15", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue(days.contains("Sunday")); assertTrue(days.contains("MONDAY")); assertTrue(days.contains("Saturday")); assertTrue(days.size() == 3);
assertTrue(found);
assertEquals(".doc", doc.getExtension());
assertEquals(TestParameters.VP_CHM_ENTITIES_NUMBER, chmEntries.size());
assertEquals("Mr B", new JempboxExtractor(null).joinCreators( Arrays.asList("Mr B"))); assertEquals("Mr B, Mr A", new JempboxExtractor(null).joinCreators( Arrays.asList("Mr B", "Mr A")));
assertNull(m);
assertEquals("A", AutoPageNumberUtils.asAlphaNumeric(1)); assertEquals("Z", AutoPageNumberUtils.asAlphaNumeric(26)); assertEquals("AA", AutoPageNumberUtils.asAlphaNumeric(27)); assertEquals("ZZ", AutoPageNumberUtils.asAlphaNumeric(52)); assertEquals("AAA", AutoPageNumberUtils.asAlphaNumeric(53)); assertEquals("ZZZ", AutoPageNumberUtils.asAlphaNumeric(78));
assertFalse(matcher.matchesText()); assertFalse(matcher.matchesElement()); assertTrue(matcher.matchesAttribute(null, "name")); assertFalse(matcher.matchesAttribute(NS, "name")); assertFalse(matcher.matchesAttribute(NS, "eman")); assertEquals(Matcher.FAIL, matcher.descend(NS, "name"));
assertEquals("a", AutoPageNumberUtils.asAlphaNumericLower(1)); assertEquals("z", AutoPageNumberUtils.asAlphaNumericLower(26)); assertEquals("aa", AutoPageNumberUtils.asAlphaNumericLower(27)); assertEquals("zz", AutoPageNumberUtils.asAlphaNumericLower(52)); assertEquals("aaa", AutoPageNumberUtils.asAlphaNumericLower(53)); assertEquals("zzz", AutoPageNumberUtils.asAlphaNumericLower(78));
assertEquals((long) 8, EndianUtils.readUIntBE(new ByteArrayInputStream(data))); assertEquals(4294967280L, EndianUtils.readUIntBE(new ByteArrayInputStream(data)));
assertFalse(ex); assertEquals("null", writer.toString());
assertEquals("51.575762", metadata.get(Metadata.LATITUDE)); assertEquals("-1.567886", metadata.get(Metadata.LONGITUDE));
assertEquals(2, parsers.size()); assertTrue(p.toString(), p instanceof CompositeParser); assertEquals(2, ((CompositeParser)p).getAllComponentParsers().size()); assertTrue(p.toString(), p instanceof ParserDecorator); assertEquals(EmptyParser.class, ((ParserDecorator)p).getWrappedParser().getClass()); assertEquals("hello/world", p.getSupportedTypes(null).iterator().next().toString());
assertEquals(TestParameters.VP_ITSP_UNKNOWN_000C, chmItspHeader.getUnknown_000c());
assertTrue("Couldn\'t set valid values", true);
assertNotNull(contentType); assertEquals("text/html", contentType);
assertEquals( "application/octet-stream", new MediaType("application", "octet-stream").toString()); assertEquals( "text/plain", new MediaType("text", "plain").toString()); assertEquals( "text/plain", new MediaType("text", "plain", parameters).toString()); assertEquals( "text/plain; charset=UTF-8", new MediaType("text", "plain", parameters).toString()); assertEquals( "text/plain; charset=UTF-8; x-eol-style=crlf", new MediaType("text", "plain", parameters).toString());
assertEquals("Hello, World!", output.toString().trim()); assertEquals("text/plain", metadata.get(Metadata.CONTENT_TYPE));
assertEquals(TestParameters.VP_BLOCK_LENGTH, chmItspHeader.getBlock_len());
assertEquals("windows-1251", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue("no exception", true); assertTrue("no exception", true);
assertEquals("Tosteberga \\u00C4ngar", metadata.get(TikaCoreProperties.TITLE)); assertEquals("Bird site in north eastern Sk\\u00E5ne, Sweden.\\n(new line)", metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals("Some Tourist", metadata.get(TikaCoreProperties.CREATOR)); assertTrue(keywords.contains("bird watching")); assertTrue(keywords.contains("coast"));
assertNull( xmpMeta.get( TikaCoreProperties.FORMAT ) );
assertNotNull(sentiment); assertEquals("angry", sentiment);
assertEquals(message, buffer.toString(UTF_8.name()).trim());
assertEquals(expected, translated.toLowerCase(Locale.ROOT));
assertFalse(matcher.matchesText()); assertFalse(matcher.matchesElement()); assertFalse(matcher.matchesAttribute(null, "name")); assertTrue(matcher.matchesAttribute(NS, "name")); assertFalse(matcher.matchesAttribute(NS, "eman")); assertEquals(Matcher.FAIL, matcher.descend(NS, "name"));
assertEquals(TestParameters.offset, dle.getOffset());
assertTrue(bodyText.contains("D\\u00FCsseldorf has non-ascii.")); assertTrue(bodyText.contains("Lines can be split like this.")); assertTrue(bodyText.contains("Spaces at the end of a line \\r\\nmust be encoded.\\r\\n")); assertFalse(bodyText.contains("="));
assertTrue("Couldn\'t set valid values", true);
assertEquals(TestParameters.VP_VERSION, chmItsfHeader.getVersion());
assertEquals("en", metadata.get(Metadata.CONTENT_LANGUAGE));
assertEquals("Bird site in north eastern Sk\\u00E5ne, Sweden.\\n(new line)", metadata.get(TikaCoreProperties.DESCRIPTION)); assertTrue("\'coast\'" + " not in " + keywords, keywords.contains("coast")); assertTrue("\'nature reserve\'" + " not in " + keywords, keywords.contains("nature reserve"));
assertEquals("This is a test message", metadata.get(TikaCoreProperties.TITLE)); assertEquals("This is a test message", metadata.get(TikaCoreProperties.SUBJECT));
assertEquals(EXPECTED_NAMES[i], FilenameUtils.normalize(TEST_NAMES[i]));
assertFalse(CharsetUtils.isSupported(" utf-8")); assertFalse(CharsetUtils.isSupported("my charset name")); assertFalse(CharsetUtils.isSupported("charset1; charset2")); assertFalse(CharsetUtils.isSupported(null)); assertFalse(CharsetUtils.isSupported(""));
assertEquals("78", metadata.get("height")); assertEquals("328", metadata.get("width")); assertEquals("image/x-jbig2", metadata.get("Content-Type"));
assertEquals( "text/plain", new MediaType("TEXT", "PLAIN").toString()); assertEquals( "text/plain", new MediaType("Text", "Plain").toString()); assertEquals( "text/plain", new MediaType("text", "PLAIN", parameters).toString()); assertEquals( "text/plain; charset=UTF-8", new MediaType("TEXT", "plain", parameters).toString()); assertEquals( "text/plain; charset=UTF-8; x-eol-style=crlf", new MediaType("TeXt", "PlAiN", parameters).toString());
assertEquals("Keld J\\u00F8rn Simonsen <keld@dkuug.dk>", metadata.get(TikaCoreProperties.CREATOR)); assertEquals("If you can read this you understand the example.", metadata.get(TikaCoreProperties.TITLE)); assertEquals("If you can read this you understand the example.", metadata.get(TikaCoreProperties.SUBJECT));
assertEquals(TestParameters.VP_RES_TBL_COMPR_LENGTH, chmLzxcResetTable.getCompressedLen());
assertNotNull(dle.toString());
assertNotNull(ignore); assertNotNull(ignore.getParser()); assertEquals(1, ((CompositeParser)ignore.getParser()).getAllComponentParsers().size()); assertNotNull(warn); assertNotNull(warn.getParser()); assertEquals(1, ((CompositeParser)warn.getParser()).getAllComponentParsers().size());
assertEquals(2, profile.getCount("_fo")); assertEquals(2, profile.getCount("foo")); assertEquals(1, profile.getCount("oo_")); assertEquals(1, profile.getCount("oob")); assertEquals(1, profile.getCount("oba")); assertEquals(1, profile.getCount("_ba")); assertEquals(2, profile.getCount("bar")); assertEquals(2, profile.getCount("ar_"));
assertEquals("xmp.did:49E997348D4911E1AB62EBF9B374B234", metadata.get(XMPMM.DOCUMENTID));
assertEquals(TestParameters.VP_BLOCK_INDEX_INTERVAL, chmItspHeader.getBlockidx_intvl());
assertEquals("heic", metadata.get("Major Brand")); assertEquals("512 pixels", metadata.get("Width")); assertEquals("512 pixels", metadata.get("Height")); assertEquals("image/heic", metadata.get(Metadata.CONTENT_TYPE));
assertTrue("Wrong content", Arrays.equals(data, stream.getTail()));
assertEquals(TestParameters.VP_UNKNOWN_000C, chmItsfHeader.getUnknown_000c());
assertEquals("ab\\ufffda\\ufffdc\\ufffdbc", output.toString());
assertEquals(TestParameters.VP_RESET_INTERVAL, chmLzxcControlData.getResetInterval());
assertEquals("ISO-8859-15", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue("correct exception with no extraction, no extract for accessibility", ex); assertTrue("correct exception with no extraction, no extract for accessibility", ex);
assertEquals(TEST_NAME, FilenameUtils.normalize(TEST_NAME));
assertEquals( MediaType.OCTET_STREAM, detector.detect(null, new Metadata()));
assertTrue("Temp file should exist while TempResources is used", Files.exists(tempFile)); assertTrue("Temp file should not exist after TempResources is closed", Files.notExists(tempFile));
assertEquals(XMLReaderUtils.DEFAULT_MAX_ENTITY_EXPANSIONS, XMLReaderUtils.getMaxEntityExpansions()); assertEquals("application/rdf+xml", detect("test-difficult-rdf1.xml", TikaConfig.getDefaultConfig()).toString()); assertEquals(33, XMLReaderUtils.getPoolSize()); assertEquals(5, XMLReaderUtils.getMaxEntityExpansions()); assertEquals("text/plain", detect("test-difficult-rdf1.xml", tikaConfig).toString());
assertEquals("text/plain; charset=IBM866", metadata.get(Metadata.CONTENT_TYPE));
assertTrue(CharsetUtils.isSupported("UTF-8")); assertFalse(CharsetUtils.isSupported("bogus"));
assertNotNull(contentType); assertEquals("text/html", contentType);
assertEquals(0, names.length); assertEquals(1, names.length); assertEquals("name-one", names[0]); assertEquals(2, names.length);
assertNull("Got a frame", stream.nextFrame());
assertEquals(TestParameters.entryName, dle.getName());
assertEquals(TestParameters.VP_RES_TBL_BLOCK_LENGTH, chmLzxcResetTable.getBlockLen());
assertFalse(content == null); assertEquals("Sample RSS File for Junit test", metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals("TestChannel", metadata.get(TikaCoreProperties.TITLE));
assertEquals("Wrong skip result", skipCount, stream.skip(skipCount)); assertEquals("Wrong buffer", generateText(skipCount - tailSize, tailSize), new String(stream.getTail(), UTF_8));
assertEquals(TestParameters.VP_DATA_OFFSET_LENGTH, chmItsfHeader.getDataOffset());
assertNotNull(metadata); assertEquals("Direct read of HDF4 file through CDM library", metadata.get("_History")); assertEquals("Ascending", metadata.get("Pass")); assertEquals("Hierarchical Data Format, version 4", metadata.get("File-Type-Description"));
assertEquals("Expected \'test\', but got \'" + result + "\'", "test", result);
assertTrue(ex);
assertEquals(TestParameters.VP_RESET_TABLE_BA, chmLzxcResetTable.getBlockAddress().length);
assertEquals("UTF-8", CharsetUtils.clean("utf-8")); assertEquals(null, CharsetUtils.clean("")); assertEquals(null, CharsetUtils.clean(null)); assertEquals("US-ASCII", CharsetUtils.clean(" us-ascii ")); assertEquals("UTF-8", CharsetUtils.clean("\\"utf-8\\"")); assertEquals("ISO-8859-1", CharsetUtils.clean("ISO-8859-1, latin1"));
assertEquals( "Mime-type checking for " + filename, mimeTypes[currentI], metadata.get(Metadata.CONTENT_TYPE)); assertEquals("Attachment Test", metadata.get(TikaCoreProperties.TITLE)); assertEquals("Rajiv", metadata.get(TikaCoreProperties.CREATOR));
assertNull(metadata.get("Geographic_NAME")); assertNull(metadata.get("Geographic_LONGITUDE")); assertNull(metadata.get("Geographic_LATITUDE"));
assertEquals("Hello, World!", output.toString().trim());
assertEquals("Hello, World!", output[i].toString().trim());
assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("ISO-8859-1", metadata.get(Metadata.CONTENT_ENCODING)); assertEquals("text/html; charset=ISO-8859-15", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("ISO-8859-15", metadata.get(Metadata.CONTENT_ENCODING));
assertEquals(TestParameters.VP_WINDOWS_PER_RESET, chmLzxcControlData.getWindowsPerReset());
assertTrue("Has empty table elements", content.contains("<body><table><tr><td><table><tr><td>")); assertTrue("Has empty a element", content.contains("<a shape=\\"rect\\" href=\\"Main.php\\"/>")); assertTrue("Has real content", content.contains("<p>This is the real meat")); assertTrue("Ends with appropriate HTML", content.endsWith("</p></body></html>")); assertFalse(content.contains("boilerplate")); assertFalse(content.contains("footer"));
assertNotNull(metadata); assertEquals("5", metadata.get("GranuleMonth"));
assertTrue(tempFile.delete()); assertTrue(tempFile.mkdir()); assertNotNull(tempFileNames);
assertEquals(TestParameters.VP_DIRECTORY_OFFSET, chmItsfHeader.getDirOffset());
assertTrue(tikaEx);
assertNotNull(chmExtractor.getChmDirList());
assertEquals(TestParameters.VP_ITSF_HEADER_LENGTH, chmItsfHeader.getHeaderLen());
assertEquals(TestParameters.VP_ITSP_UNKNOWN_0024, chmItspHeader.getUnknown_0024());
assertEquals(TestParameters.VP_ISTP_SIGNATURE, new String( chmItspHeader.getSignature(), UTF_8));
assertEquals("en", languageDetectorExample.detectLanguage(text));
assertEquals("", handler.toString());
assertTrue("Couldn\'t set valid values", true);
assertEquals(EXPECTED_NAME, FilenameUtils.normalize(TEST_NAME));
assertEquals(textStats.getOOV(s), 0.25, 0.01);
assertEquals(2, metadataList.size()); assertEquals("MACRO", metadataList.get(1).get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));
assertEquals("abc", output.toString());
assertNotNull("Text not translated", transText);
assertTrue(handler instanceof DefaultHandler); assertTrue(handler instanceof DefaultHandler);
assertEquals("fr", metadata.get(Metadata.CONTENT_LANGUAGE)); assertTrue("Missing HTML lang attribute", Pattern.matches("(?s)<html[^>]* lang=\\"fr\\".*", sw.toString()));
assertFalse(matcher.matchesText()); assertFalse(matcher.matchesElement()); assertTrue(matcher.matchesAttribute(null, "name")); assertTrue(matcher.matchesAttribute(NS, "name")); assertTrue(matcher.matchesAttribute(NS, "eman")); assertEquals(Matcher.FAIL, matcher.descend(NS, "name"));
assertEquals("pom.xml: application/xml", buffer.toString(UTF_8.name()).trim());
assertEquals(TestParameters.length, dle.getLength());
assertEquals( "format", xmpMeta.get( TikaCoreProperties.FORMAT ) ); assertEquals( 1, values.length ); assertEquals( "keyword", values[0] );
assertEquals(0, values.length); assertEquals(1, values.length); assertEquals("value1", values[0]); assertEquals(1, values.length); assertEquals("value2", values[0]); assertEquals(2, values.length); assertEquals("new value 1", values[0]); assertEquals("new value 2", values[1]);
assertTrue(tempFile.delete()); assertTrue(tempFile.mkdir()); assertNotNull(tempFileNames);
assertNotNull("Test ENVI file \'envi_test_header.hdr\' not found", stream);
assertEquals(3, result.size()); assertTrue("Chunk under max size", chunk.length() <= example.MAXIMUM_TEXT_CHUNK_SIZE);
assertEquals("2", metadata.get("file-count")); assertEquals("4", metadata.get("tu-count")); assertEquals("en", metadata.get("source-language")); assertEquals("fr", metadata.get("target-language"));
assertEquals(TestParameters.VP_CONTROL_DATA_VERSION, chmLzxcControlData.getVersion());
assertEquals( "application/x-hwp-v5", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("Apache Tika", metadata.get(TikaCoreProperties.TITLE)); assertEquals("SooMyung Lee", metadata.get(TikaCoreProperties.CREATOR));
assertEquals( MediaType.OCTET_STREAM, detector.detect(null, new Metadata()));
assertEquals(TestParameters.VP_TBL_OFFSET, chmLzxcResetTable.getTableOffset());
assertTrue((parser.getSupportedTypes(null).contains(MediaType.application("vnd.ms-outlook-pst"))));
assertTrue(found);
assertEquals("Wrong result", -1, stream.skip(1));
assertEquals("\\n\\n\\n\\n[image: value]", buffer.toString(UTF_8.name()));
assertTrue(chmItsfHeader.toString().contains( TestParameters.VP_ISTF_SIGNATURE));
assertEquals(0, values.length); assertEquals(1, values.length); assertEquals("value1", values[0]); assertEquals(2, values.length); assertEquals("value1", values[0]); assertEquals("value2", values[1]); assertEquals(3, values.length); assertEquals("value1", values[0]); assertEquals("value2", values[1]); assertEquals("value1", values[2]);
assertEquals( "Title : Test Indexation Html", metadata.get(TikaCoreProperties.TITLE)); assertEquals("Tika Developers", metadata.get("Author")); assertEquals("5", metadata.get("refresh")); assertEquals("51.2312", metadata.get(Geographic.LATITUDE)); assertEquals("-5.1987", metadata.get(Geographic.LONGITUDE));
assertEquals(-1, lookahead.read());
assertEquals("Expected \'test\', but got \'" + result + "\'", "test", result);
assertEquals( TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes(UTF_8).length, chmLzxcControlData.getSignature().length);
assertEquals(3805, totalChars[15]); assertEquals(120, unmappedUnicodeChars[15]); assertEquals(3805, totalChars[15]); assertEquals(120, unmappedUnicodeChars[15]);
assertEquals("Expected \'test\', but got \'" + result + "\'", "test", result);
assertTrue(id.startsWith("ghi")); assertTrue(id.endsWith("lmnop.doc"));
assertEquals(TestParameters.VP_ITSP_BYTEARR_LEN, chmItspHeader.getUnknown_0044().length);
assertEquals("en", metadata.get(TikaCoreProperties.LANGUAGE));
assertEquals(TestParameters.VP_INDEX_DEPTH, chmItspHeader.getIndex_depth());
assertEquals(TestParameters.VP_UNKNOWN_OFFSET, chmItsfHeader.getUnknownOffset());
assertEquals("some description", metadata.get("og:description")); assertTrue(metadata.isMultiValued("og:image"));
assertNull(result.get());
assertEquals((long)8, EndianUtils.readUE7(new ByteArrayInputStream(data))); assertEquals((long)542, EndianUtils.readUE7(new ByteArrayInputStream(data))); assertEquals((long)728855, EndianUtils.readUE7(new ByteArrayInputStream(data)));
assertEquals("application/xml", AdvancedTypeDetector.detectWithCustomConfig("pom.xml"));
assertEquals("2", metadata.get("file-count")); assertEquals("4", metadata.get("tu-count")); assertEquals("en", metadata.get("source-language")); assertEquals("fr", metadata.get("target-language"));
assertEquals(TestParameters.VP_RESET_TABLE_BA, chmLzxcResetTable.getBlockCount());
assertEquals("text/plain; charset=UTF-8", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("\\n", handler.toString());
assertEquals(TestParameters.VP_RES_TBL_UNKNOWN, chmLzxcResetTable.getUnknown());
assertEquals("Bird site in north eastern Sk\\u00E5ne, Sweden.\\n(new line)", metadata.get(TikaCoreProperties.DESCRIPTION)); assertTrue(keywords.contains("coast")); assertTrue(keywords.contains("nature reserve"));
assertEquals(TestParameters.VP_INDEX_ROOT, chmItspHeader.getIndex_root());
assertEquals(TestParameters.VP_CONTROL_DATA_SIZE, chmLzxcControlData.getSize());
assertEquals(0, meta.size()); assertEquals(2, meta.size()); assertNotNull(meta.get("name-one")); assertNotNull(meta.get("name-two")); assertEquals(1, meta.size()); assertNull(meta.get("name-one")); assertNotNull(meta.get("name-two")); assertEquals(0, meta.size()); assertNull(meta.get("name-one")); assertNull(meta.get("name-two"));
assertTrue( "<object> tag not correctly found in:\\n" + result, Pattern.matches("(?s).*<object data=\\"http: );
assertEquals("\\u017d", metadata.get(TikaCoreProperties.TITLE));
assertTrue("Couldn\'t set valid values", true);
assertEquals("ISO-8859-1", metadata.get(Metadata.CONTENT_ENCODING));
assertNotNull(chmItsfHeader.getDir_uuid());
assertTrue(result.equals(expected));
assertEquals((long) 8, EndianUtils.readUIntLE(new ByteArrayInputStream(data))); assertEquals(4294967280L, EndianUtils.readUIntLE(new ByteArrayInputStream(data)));
assertEquals(2, results.size()); assertEquals(new Character(','), results.get(0).getDelimiter()); assertEquals(2, results.size()); assertEquals(new Character(','), results.get(0).getDelimiter());
assertEquals("Hello, World!", output.toString().trim()); assertEquals("text/plain", metadata.get(Metadata.CONTENT_TYPE));
assertEquals("text/html; charset=iso-8859-1", metadata.get(TikaCoreProperties.CONTENT_TYPE_HINT)); assertEquals("application/xhtml+xml; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("text/html; charset=iso-NUMBER_SEVEN", metadata.get(TikaCoreProperties.CONTENT_TYPE_HINT)); assertEquals("application/xhtml+xml; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE));
assertTrue(Pattern.matches("(?s).*<meta name=\\"Content-Type\\" content=\\"text/html; charset=UTF-8\\"/>.*$", result)); assertFalse(Pattern.matches("(?s).*<meta name=\\"Language\\".*$", result));
assertTrue(matcher.matchesText()); assertFalse(matcher.matchesElement()); assertFalse(matcher.matchesAttribute(NS, "name")); assertEquals(Matcher.FAIL, matcher.descend(NS, "name"));
assertEquals(estonian, identifier.getLanguage());
assertEquals(null, metadata.get(TikaCoreProperties.TITLE)); assertEquals(null, metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals("251", metadata.get(Metadata.IMAGE_WIDTH)); assertEquals("384", metadata.get(Metadata.IMAGE_LENGTH));
assertEquals(2, results.size());
assertEquals("", linkContentHandler.getLinks().get(0).getText()); assertEquals("\\ttext\\n\\n", linkContentHandler.getLinks().get(0).getText());
assertTrue(reader.ready()); assertTrue(reader.ready());
assertEquals("t1", metadata.get("Image Description")); assertNull("keywords should be excluded from bulk copy because it is a defined field", metadata.get(TikaCoreProperties.SUBJECT)); assertNull(metadata.get(TikaCoreProperties.DESCRIPTION));
assertEquals("\\n\\n\\n\\n[bookmark: value]", buffer.toString(UTF_8.name()));
assertEquals(true, ex.isSupported(tis)); assertEquals(0, tracker.filenames.size()); assertEquals(true, ex.isSupported(tis)); assertEquals(2, tracker.filenames.size());
assertEquals(TestParameters.nameLength, dle.getNameLength());
assertNotNull(links); assertEquals(0, links.size()); assertNotNull(links); assertEquals(0, links.size()); assertNotNull(links); assertEquals(0, links.size());
assertEquals("Parsing should proceed without date", null, metadata.get(TikaCoreProperties.CREATED));
assertEquals(TestParameters.VP_RES_TBL_VERSION, chmLzxcResetTable.getVersion());
assertFalse("Wrong result", stream.skipFrame());
assertEquals(TestParameters.VP_LAST_MODIFIED, chmItsfHeader.getLastModified());
assertEquals("I Urge You to Require Notice of Mercury", m.get(TikaCoreProperties.TITLE));
assertNull(meta.get("a-name")); assertEquals("value-1", meta.get("a-name")); assertEquals("value-1", meta.get("a-name"));
assertTrue(chmLzxcResetTable.toString().length() > 0);
assertTrue(x.getMessage() != null && x.getMessage().contains("name")); assertTrue(x.getMessage() != null && x.getMessage().contains("not be null"));
assertEquals(TestParameters.VP_ITSP_HEADER_LENGTH, chmItspHeader.getHeader_len());
assertEquals("text/plain; charset=IBM500", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE));
assertNull(result.get());
assertEquals(TestParameters.VP_DIRECTORY_LENGTH, chmItsfHeader.getDirLen());
assertEquals(5, metadataList.size()); assertEquals("image/jpeg", jpegMetadata.get(Metadata.CONTENT_TYPE)); assertEquals("1425", jpegMetadata.get(Metadata.IMAGE_LENGTH));
assertFalse(content == null); assertEquals("Sample Atom File for Junit test", metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals("Test Atom Feed", metadata.get(TikaCoreProperties.TITLE));
assertEquals( "text/plain; charset=windows-1252", metadata.get(Metadata.CONTENT_TYPE)); assertEquals( "text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertEquals( "text/plain; charset=ISO-8859-15", metadata.get(Metadata.CONTENT_TYPE));
assertTrue("Should use Dummy Executor", (executorService instanceof DummyExecutor)); assertEquals("Should have configured Core Threads", 3, executorService.getCorePoolSize()); assertEquals("Should have configured Max Threads", 10, executorService.getMaximumPoolSize());
assertTrue("IllegalArgumentException should have been thrown", ex);
assertEquals(TestParameters.VP_ITSP_VERSION, chmItspHeader.getVersion());
assertEquals("I", AutoPageNumberUtils.asRomanNumerals(1)); assertEquals("XXVI", AutoPageNumberUtils.asRomanNumerals(26)); assertEquals("XXVII", AutoPageNumberUtils.asRomanNumerals(27));
assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertNull(metadata.get(Metadata.CONTENT_LANGUAGE)); assertNull(metadata.get(TikaCoreProperties.LANGUAGE));
assertEquals("Saved by Windows Internet Explorer 7", metadata.get(TikaCoreProperties.CREATOR)); assertEquals("Air Permit Programs | Air & Radiation | US EPA", metadata.get(TikaCoreProperties.TITLE)); assertEquals("Air Permit Programs | Air & Radiation | US EPA", metadata.get(TikaCoreProperties.SUBJECT));
assertEquals(24, textPosition[line]); assertTrue(Math.abs(textPosition[col] - 47) < 10);
assertTrue(content.startsWith("This is the real meat")); assertTrue(content.endsWith("This is the end of the text.\\n")); assertFalse(content.contains("boilerplate")); assertFalse(content.contains("footer"));
assertEquals("Tosteberga \\u00C4ngar", metadata.get(TikaCoreProperties.TITLE)); assertEquals("Bird site in north eastern Sk\\u00E5ne, Sweden.\\n(new line)", metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals("Some Tourist", metadata.get(TikaCoreProperties.CREATOR)); assertTrue("got " + keywords, keywords.contains("bird watching"));
assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING)); assertEquals("ISO-8859-1", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue(Pattern.matches("(?s).*<body/>.*$", result));
assertEquals(TestParameters.VP_WINDOW_SIZE, chmLzxcControlData.getWindowSize());
assertEquals(1, duplicates.size()); assertNotNull(parsers); assertEquals(2, parsers.size()); assertEquals(a, parsers.get(0)); assertEquals(b, parsers.get(1));
assertEquals(TestParameters.VP_RES_TBL_UNCOMP_LENGTH, chmLzxcResetTable.getUncompressedLen());
assertEquals(2, parser.getAllComponentParsers().size()); assertTrue(p.toString(), p instanceof ParserDecorator); assertEquals(DefaultParser.class, ((ParserDecorator)p).getWrappedParser().getClass()); assertTrue(p.toString(), p instanceof ParserDecorator); assertEquals(FallbackParser.class, ((ParserDecorator)p).getWrappedParser().getClass()); assertEquals("DISCARD_ALL", fbp.getMetadataPolicy().toString());
assertEquals("", txt.trim());
assertEquals("Should try EXIF Date/Time if Original is not set", "1999-01-01T00:00:00", metadata.get(TikaCoreProperties.CREATED));
assertEquals("Should be ISO date without time zone", "2000-01-01T00:00:00", metadata.get(TikaCoreProperties.CREATED));
assertEquals(TestParameters.VP_UNKNOWN_LEN, chmItsfHeader.getUnknownLen());
assertEquals(TestParameters.VP_UNKNOWN_18, chmLzxcControlData.getUnknown_18());
assertEquals(TestParameters.VP_UNKNOWN_NUM_BLOCKS, chmItspHeader.getNum_blocks());
assertEquals("application/vnd.ms-excel.sheet.4", metadata.get(Metadata.CONTENT_TYPE)); assertEquals(null, metadata.get(TikaCoreProperties.TITLE)); assertEquals(null, metadata.get(TikaCoreProperties.SUBJECT));
assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE)); assertEquals("application/binary; charset=UTF-8", metadata.get(Metadata.CONTENT_TYPE));
assertEquals("ISO-8859-15", metadata.get(Metadata.CONTENT_ENCODING)); assertEquals("ISO-8859-15", metadata.get(Metadata.CONTENT_ENCODING));
assertEquals("Number of embedded documents + 1 for the container document", 12, metadataList.size()); assertEquals("/embed1.zip/embed2.zip/embed3.zip/embed3.txt", m.get("X-TIKA:embedded_resource_path"));
assertNotNull(metadata.get("grobid:header_Title"));
assertEquals("300.0", metadata.get(TIFF.RESOLUTION_HORIZONTAL)); assertEquals("300.0", metadata.get(TIFF.RESOLUTION_VERTICAL));
assertEquals(TestParameters.VP_ITSP_UNKNOWN_002C, chmItspHeader.getUnknown_002c());
assertFalse(meta.isMultiValued("key")); assertFalse(meta.isMultiValued("key")); assertTrue(meta.isMultiValued("key"));
assertEquals(TestParameters.VP_LANGUAGE_ID, chmItspHeader.getLang_id());
assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING)); assertEquals("ISO-8859-1", metadata.get(Metadata.CONTENT_ENCODING));
assertTrue("no exception", true); assertTrue("correct exception", ex);
assertEquals( TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes(UTF_8).length, chmLzxcControlData.getSignature().length);
assertTrue(out.contains("this is a title")); assertTrue(out.contains("body"));
assertEquals(TestParameters.VP_LANGUAGE_ID, chmItsfHeader.getLangId());
assertThat( result, equalTo( 1 ) );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.ONE_LEVEL, whatClauseDn.getType() );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn", "member;Range=0-*", "objectClass" }, attributes );
assertEquals( Messages.getString( "InPlaceMsAdObjectGuidValueEditor.InvalidGuid" ), displayValue ); assertEquals( Messages.getString( "InPlaceMsAdObjectGuidValueEditor.InvalidGuid" ), displayValue2 );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn" }, attributes );
assertEquals( Strings.toLowerCaseAscii( "00112233-4455-6677-8899-AABBCCDDEEFF" ), displayValue );
assertEquals( "01:02", span1.toString() ); assertEquals( "1+02:03", span2.toString() ); assertEquals( "12+03:04:05", span3.toString() ); assertEquals( "123+04:05:06", span4.toString() ); assertEquals( "1234+05:06:07", span5.toString() ); assertEquals( "12345+06:07:08", span6.toString() ); assertEquals( "01:02:03", span7.toString() );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseStar );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn" }, attributes );
assertEquals( Messages.getString( "InPlaceMsAdObjectGuidValueEditor.InvalidGuid" ), displayValue );
assertEquals( 0, comparator.compare( objectClass, objectClass ) ); assertEquals( 0, comparator.compare( cn, cn ) ); assertEquals( 0, comparator.compare( cn, new Attribute( entry, "cn" ) ) );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.REGEX, whatClauseDn.getType() );
assertEquals( 0, comparator.compare( cn_empty_1, cn_empty_1 ) ); assertEquals( 0, comparator.compare( cn_empty_1, cn_empty_2 ) ); assertEquals( 0, comparator.compare( cn_empty_2, cn_empty_1 ) );
assertThat( result, equalTo( -1 ) );
assertEquals( "S-1-5-32-549", displayValue );
assertThat( result, equalTo( 1 ) );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseStar );
assertNotNull( attributes ); assertArrayEquals( new String[] { "1.1" }, attributes );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.ONE, whatClauseDn.getType() );
assertThat( result, equalTo( 0 ) );
assertEquals( "S-1-5-4", displayValue );
assertNull( attributes );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.SUBTREE, whatClauseDn.getType() );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.CHILDREN, whatClauseDn.getType() );
assertTrue( less < 0 ); assertTrue( greater > 0 ); assertEquals( 0, less + greater );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.BASE, whatClauseDn.getType() );
assertTrue( less < 0 ); assertTrue( greater > 0 ); assertEquals( 0, less + greater );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( "", whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.ONE, whatClauseDn.getType() );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn", "s_n", "u_i_d" }, attributes );
assertNotNull( attributes ); assertArrayEquals( new String[0], attributes );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseFilter ); assertEquals( filter, whatClauseFilter.getFilter() );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn", "sn", "uid", "*", "+" }, attributes );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseStar );
assertEquals( 32, sortedValues.size() ); assertEquals( "objectClass", sortedValues.get( 0 ).getAttribute().getDescription() ); assertEquals( "inetOrgPerson", sortedValues.get( 0 ).getStringValue() ); assertEquals( "uid", sortedValues.get( 31 ).getAttribute().getDescription() ); assertEquals( "9", sortedValues.get( 31 ).getStringValue() );
assertEquals( expected, actual );
assertTrue( less < 0 ); assertTrue( greater > 0 ); assertEquals( 0, less + greater );
assertEquals( expected, actual );
assertThat( result, equalTo( -1 ) );
assertNotNull( attributes ); assertArrayEquals( new String[] { "2.5.4.3", "2.5.4.4", "0.9.2342.19200300.100.1.1" }, attributes );
assertEquals( Messages.getString( "InPlaceMsAdObjectSidValueEditor.InvalidSid" ), displayValue );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseFilter ); assertEquals( filter, whatClauseFilter.getFilter() );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.BASE_OBJECT, whatClauseDn.getType() );
assertEquals( expected, actual );
assertEquals( Messages.getString( "InPlaceUuidValueEditor.InvalidUuid" ), displayValue ); assertEquals( Messages.getString( "InPlaceUuidValueEditor.InvalidUuid" ), displayValue2 );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn", "sn;lang-de;lang-en", "uid" }, attributes );
assertEquals( Strings.toLowerCaseAscii( "6ba7b810-9dad-11d1-80b4-00c04fd430c8" ), displayValue );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn", "sn", "uid" }, attributes );
assertEquals( 0, comparator.compare( cn_foo_1, cn_foo_1 ) ); assertEquals( 0, comparator.compare( cn_foo_1, cn_foo_2 ) ); assertEquals( 0, comparator.compare( cn_foo_2, cn_foo_1 ) );
assertEquals( Messages.getString( "InPlaceUuidValueEditor.InvalidUuid" ), displayValue );
assertTrue( less < 0 ); assertTrue( greater > 0 ); assertEquals( 0, less + greater );
assertThat( result, equalTo( 0 ) );
assertEquals( expected, actual );
assertEquals( Strings.toLowerCaseAscii( "{db78ba89-b85f-447f-bd06-e3a40996a9a8}" ), displayValue );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseStar );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.SUB, whatClauseDn.getType() );
assertEquals( Strings.toLowerCaseAscii( "{33221100-5544-7766-8899-AABBCCDDEEFF}" ), displayValue );
assertNotNull( aclItem ); assertNotNull( whatClause ); assertTrue( whatClause instanceof AclWhatClauseDn ); assertEquals( dnPattern, whatClauseDn.getPattern() ); assertEquals( AclWhatClauseDnTypeEnum.EXACT, whatClauseDn.getType() );
assertNotNull( attributes ); assertArrayEquals( new String[] { "cn" }, attributes );
assertFalse(comparisonResult.ok());
assertFalse(comparisonResult.ok());
assertFalse(comparisonResult.ok());
assertTrue(comparisonResult.ok());
assertFalse(comparisonResult.ok());
assertThat(sqlStringReplaced).contains(dateFormatted);
assertThat(days).isEqualTo(gruenDonnerstag2018.plus(0, ChronoUnit.DAYS)); assertThat(days).isEqualTo(gruenDonnerstag2018.plus(5, ChronoUnit.DAYS)); assertThat(days).isEqualTo(gruenDonnerstag2018.plus(6, ChronoUnit.DAYS));
assertThat(map).containsExactly(new SimpleEntry<>(key, value));
assertThat(expectedWb.getCreated()).isNotNull();
assertThat(result).hasSize(returnList.size()); assertThat(result.get(0).getWorkbasketKey()).isEqualTo(returnList.get(0).getWorkbasketKey());
assertThat(expectedEvent.getCreated()).isNotNull();
assertThat(days).isEqualTo(freitag0427.plus(0, ChronoUnit.DAYS)); assertThat(days).isEqualTo(freitag0427.plus(3, ChronoUnit.DAYS)); assertThat(days).isEqualTo(freitag0427.plus(5, ChronoUnit.DAYS));
assertThat(cut.nameIsDn("uid=userid,cn=users,o=TaskanaTest")).isTrue(); assertThat(cut.nameIsDn("uid=userid,cn=users,o=taskanatest")).isTrue(); assertThat(cut.nameIsDn("uid=userid,cn=users,o=taskana")).isFalse();
assertThat(sqlStringReplaced).contains(dateFormatted);
assertThat(map).isEmpty();
assertThat(result).hasSize(returnList.size()); assertThat(result.get(0).getKey()).isEqualTo(returnList.get(0).getKey());
assertThat(cut.checkForMissingConfigurations()).hasSize(LdapSettings.values().length - 2);
assertThat(sqlStringReplaced).contains(dateFormatted);
assertThat(buildUrl).isEqualTo(mapUrl);
assertThat(cut.getDnWithBaseDn("uid=userid,cn=users,o=TaskanaTest")) .isEqualTo("uid=userid,cn=users,o=TaskanaTest"); assertThat(cut.getDnWithBaseDn("uid=userid,cn=users")) .isEqualTo("uid=userid,cn=users,o=TaskanaTest");
assertEquals("one.two.three", id); assertEquals("two.three", id); assertEquals("three", id); assertEquals("", id); assertEquals("two.three", id); assertEquals("three", id); assertEquals("", id); assertEquals("one.two", id); assertEquals("two", id); assertEquals("two", id); assertEquals(uuid, id);
assertEquals("value",ParserUtil.parseGeneratorParameters("key=value").get("key")); assertEquals("",ParserUtil.parseGeneratorParameters("key").get("key"));
assertTrue(ParserUtil.parseGeneratorParameters("").isEmpty());
assertTrue(map.typeMap.size() >= 2); assertEquals("protos.test.protobuf.UnittestRequired.SimpleMessage", map.resolveMessageType(".quickbuf_unittest_import.SimpleMessage").toString()); assertEquals("protos.test.protobuf.UnittestRequired.TestAllTypesRequired", map.resolveMessageType(".quickbuf_unittest_import.TestAllTypesRequired").toString());
assertEquals("value1",params.get("key1")); assertEquals("value2",params.get("key2")); assertEquals("",params.get("key3"));
assertEquals(8, map.typeMap.entrySet().size()); assertEquals("protos.test.protobuf.ContainerMessage", map.resolveMessageType(".quickbuf_unittest.ContainerMessage").toString()); assertEquals("protos.test.protobuf.ForeignEnum", map.resolveMessageType(".quickbuf_unittest.ForeignEnum").toString()); assertEquals("protos.test.protobuf.external.ImportMessage.NestedImportMessage", map.resolveMessageType(typeId).toString());
assertArrayEquals(sample, decodeBase64(input));
assertEquals(10, map.typeMap.entrySet().size()); assertEquals("protos.test.quickbuf.external.ImportMessage", map.resolveMessageType(".quickbuf_unittest_import.ImportMessage").toString()); assertEquals("protos.test.quickbuf.external.ImportMessage.NestedImportMessage", map.resolveMessageType(".quickbuf_unittest_import.ImportMessage.NestedImportMessage").toString()); assertEquals("protos.test.quickbuf.ForeignEnum", map.resolveMessageType(".quickbuf_unittest.ForeignEnum").toString());
assertArrayEquals(sample, decodeBase64(input));
assertArrayEquals(sample, decodeBase64(input));
assertArrayEquals(sample, decodeBase64(input));
assertEquals("redis.get", span.operationName());
assertTrue(connection instanceof TracingRedisSentinelConnection);
assertTrue(tracingConnectionFactory.getConnection() instanceof RedisClusterConnection);
assertEquals(1, pool.getNumActive()); assertEquals(0, pool.getNumActive()); assertEquals(1, pool.getNumIdle()); assertEquals(1, pool.getNumActive()); assertEquals(0, pool.getNumIdle());
assertEquals("get", span.operationName());
assertTrue(tracingConnectionFactory.getConnection() instanceof RedisClusterConnection);
assertTrue(connection instanceof TracingRedisSentinelConnection);
assertTrue(connection instanceof TracingRedisClusterConnection);
assertEquals(2, helper.limitKeys(keys).length);
assertTrue(connection instanceof TracingRedisConnection);
assertEquals("OK", jedis.set("key", "value")); assertEquals("value", jedis.get("key")); assertEquals(2, spans.size());
assertTrue(connection instanceof TracingRedisClusterConnection);
assertEquals(1, pool.getNumActive()); assertEquals(0, pool.getNumActive()); assertEquals(1, pool.getNumIdle()); assertEquals(1, pool.getNumActive()); assertEquals(0, pool.getNumIdle());
assertTrue(resource.isConnected()); assertTrue(resource.isConnected());
assertTrue(connection instanceof TracingRedisConnection);
assertEquals("OK", jedis.set("key", "value")); assertEquals("value", jedis.get("key")); assertEquals(2, spans.size());
assertEquals(numDoubles, producer.getDataLength()); assertEquals(numDoubles, data.length);
assertNotNull(m);
assertTrue(md.getDocument() == null);
assertEquals(numDoubles, ais.getFrameLength()); assertEquals(2*numDoubles, bytesRead);
assertTrue(num >= 0);
assertTrue(ComponentDescription.isVersionNewerThan("5.0", "5.0-SNAPSHOT"));
assertTrue(md.getDocument() == null);
assertEquals(allo1a, allo1b);
assertTrue(ComponentDescription.isVersionNewerThan("5.1-SNAPSHOT", "5.0-SNAPSHOT"));
assertTrue(md.getAudio() == null);
assertTrue(md.getDocument() != null);
assertEquals(targetValue, lookupValue);
assertTrue(ComponentDescription.isVersionNewerThan("0.2", "0.1"));
assertTrue("Expected result length: " + expectedLength +", found: "+result.length, result.length == expectedLength);
assertFalse(ComponentDescription.isVersionNewerThan("5.0-SNAPSHOT", "5.0"));
assertFalse(AllophoneSet.hasAllophoneSet("laaleeloo"));
assertEquals(l.items.length, xl.items.length); assertArrayEquals(l.items, xl.items); assertEquals(l, xl); assertArrayEquals(l.getLabelSymbols(), xl.getLabelSymbols());
assertEquals(targetValue2, lookupValue);
assertTrue(md.getPlainText() == null);
assertEquals(numDoubles, producer.getDataLength()); assertEquals(numDoubles, data.length);
assertEquals(numDoubles, ais.getFrameLength()); assertEquals(2*numDoubles, bytesRead);
assertFalse(MaryDomUtils.isSchemaValid(doc));
assertNotNull(theList); assertEquals(3, theList.size()); assertEquals("a", it.next()); assertEquals("b", it.next()); assertEquals("c", it.next());
assertFalse(ComponentDescription.isVersionNewerThan("5.1-SNAPSHOT", "5.1-SNAPSHOT"));
assertEquals(0, ais.getFrameLength());
assertTrue(MaryDomUtils.isSchemaValid(doc));
assertEquals(producer.DUMMY * .5, result[i], 1.e-10);
assertTrue(md.getData() instanceof Document);
assertTrue(md.getDocument() == null);
assertTrue(md.getDocument() == null);
assertTrue(ComponentDescription.isVersionNewerThan("5.1-SNAPSHOT", "5.0"));
assertNotNull(lookupAudio); assertArrayEquals(targetAudio, lookupAudio);
assertEquals(orderBy(query, columns, order), queryOrderBy);
assertNotNull(group); assertEquals(group.getId(), OPTION_ID); assertEquals(group.getMinimum(), OPTION_MINIMUM); assertEquals(group.getMaximum(), OPTION_MAXIMUM);
assertNotNull(inspectionManager.inspect(mock(Connection.class), objectType));
assertEquals(databaseInfoBase.isAssignable(databaseInfo), assignable, format("%s.isAssignable(%s)", databaseInfoBase, databaseInfo));
assertEquals(getValues(type), values, format("Expecting %s values parsed out from source type \\"%s\\"", values, type));
assertEquals(jdbcTypeNameMap.getTypeName(type.getJdbcTypeDesc(), specifiers), typeName);
assertNotNull(option); assertEquals(option.getId(), OPTION_ID);
assertEquals(cTriggers.size(), 1); assertEquals(get(cTriggers, 0).getTriggerBody() + " END_TRIGGER", table1.getTriggers().iterator().next().getTriggerBody());
assertEquals(actual, expected);
assertEquals(stripQuotes(dialect, "\'users\'"), "users"); assertEquals(stripQuotes(dialect, "\'users"), "\'users"); assertEquals(stripQuotes(dialect, "users\'"), "users\'"); assertEquals(stripQuotes(dialect, "users"), "users");
assertEquals(getEnum(type), values);
assertEquals(where(query, filters, operator), queryWhere);
assertNotNull(argument); assertEquals(argument.getId(), OPTION_ID); assertEquals(argument.getMinimum(), OPTION_MINIMUM); assertEquals(argument.getMaximum(), OPTION_MAXIMUM);
assertFalse(dumper.called);
assertTrue(dumper.called);
assertThat(act, nullValue()); assertThat(auth.isLoggedIn(), is(false));
assertThat(act, is("chatroom.xhtml?faces-redirect=true")); assertThat(auth.isLoggedIn(), is(true));
assertThat(target.getChatRoom().getChats().size(), is(1)); assertThat(target.getChatRoom().getChats().get(0).getContent(), is("chat")); assertThat(target.getChatRoom().getLastPost(), notNullValue());
assertThat(bl.getString("ab", new Locale("a", "b", "c")), is("b")); assertThat(bl.getString("a", new Locale("a", "b", "c")), is("a")); assertThat(bl.getString("a", new Locale("a", "b")), is("a"));
assertEquals(3, map.size()); assertEquals(String.class, map.get("testId")); assertEquals(Integer.class, map.get("testInteger")); assertEquals(SubTestModel.class, map.get("subModel"));
assertThat(ContextId.getContextIdWildCard().isEmpty(), is(true));
assertThat(object.getString("sub"), is(ModelWrapper.wrap(sub).getCompleteModelOID())); assertThat(subObject.getString("id"), is("sub")); assertThat(subObject.getString(EDBConstants.MODEL_TYPE), is(SubModel.class.getName()));
assertFalse(storageFile.exists()); assertTrue(storageFile.exists());
assertThat(filtered, hasItems(1, 2, 3));
assertTrue(rs.next()); assertEquals("A", rs.getString("TESTID")); assertEquals(42, rs.getInt("TESTINTEGER")); assertEquals(new Date(42), rs.getTimestamp("REV_CREATED")); assertFalse(rs.next());
assertThat(provider.getId(), is(NullDomain.class.getSimpleName()));
assertEquals("org.openengsb.core.edbi.models.TestModel", index.getName()); assertEquals(TestModel.class, index.getModelClass()); assertEquals("INDEX_HEAD", index.getHeadTableName()); assertEquals("INDEX_HISTORY", index.getHistoryTableName());
assertThat((Long) map.get("id"), is(42L)); assertThat((List<Double>) map.get("numbers"), is(Arrays.asList(2.0, 3.1415, 1.4142135)));
assertThat(builder.build().getOptions().get(0).getValue(), is("value")); assertThat(builder.build().getOptions().get(0).getLabel().getString(null), is("option"));
assertTrue(CollectionUtils.isEqualCollection(modelManager.findUsers(), expected));
assertFalse(varchar.equals(other));
assertThat(reference.getProperty(Constants.SERVICE_RANKING), nullValue());
assertSame(testObject, abstractOpenEngSBInvocationHandler.invoke(testObject, method, null));
assertThat(provider.getName().getString(Locale.getDefault()), is("name"));
assertEquals("headTableName", index.getHeadTableName()); assertEquals("historyTableName", index.getHistoryTableName());
assertThat(ranking, lessThan(0));
assertEquals(1, findIndexObject.size());
assertEquals(1, findIndexObject.size());
assertFalse(varchar.equals(other));
assertThat(context.getChild("non-existing"), nullValue());
assertTrue(mapper.exists(index));
assertThat(context.getKeys().size(), is(0));
assertThat(ldapDao.exists(DnFactory.user(user)), is(true));
assertTrue(domainProviderNames.contains("Dummy Name"));
assertThat(option0.getLabel().getString(Locale.getDefault()), equalTo(TestEnum.ONE.toString())); assertThat(option0.getValue().toString(), equalTo(TestEnum.ONE.toString())); assertThat(option1.getLabel().getString(Locale.getDefault()), equalTo(TestEnum.ONE.toString())); assertThat(option1.getValue().toString(), equalTo(TestEnum.TWO.toString()));
assertTrue(rs.next()); assertEquals("A", rs.getString("TESTID")); assertEquals(42, rs.getInt("TESTINTEGER")); assertEquals(new Date(42), rs.getTimestamp("REV_CREATED")); assertTrue(rs.next()); assertEquals("B", rs.getString("TESTID")); assertEquals(-42, rs.getInt("TESTINTEGER")); assertEquals(new Date(42), rs.getTimestamp("REV_CREATED")); assertFalse(rs.next());
assertThat(contextDeployerService.canHandle(contextFile), is(true));
assertThat(contextId.getId(), is("someId"));
assertEquals(2, findIndexObject.size());
assertThat(ldapDao.exists(DnFactory.role(role)), is(true));
assertThat(connectorDeployerService.canHandle(connectorFile), is(true));
assertTrue(CollectionUtils.isEqualCollection(modelManager.findRoles(), expected));
assertEquals(TestModel.class.getCanonicalName(), index.getName()); assertEquals(3, index.getFields().size()); assertEquals("subModel", fields[0].getName()); assertEquals(SubTestModel.class, fields[0].getType()); assertEquals("testId", fields[1].getName()); assertEquals(String.class, fields[1].getType()); assertEquals("testInteger", fields[2].getName()); assertEquals(Integer.class, fields[2].getType());
assertEquals(1L, row.get("ID")); assertEquals("Arthur", row.get("NAME")); assertEquals(42, row.get("AGE")); assertEquals(2L, row.get("ID")); assertEquals("Ford", row.get("NAME")); assertNull(row.get("AGE"));
assertThat(model.getId(), is("test")); assertThat(model.getName(), is("testname")); assertThat(model.isCheck(), is(false)); assertThat(model.isCheck2(), is(true)); assertThat(version, notNullValue()); assertThat((Integer) version, is(1));
assertThat(context.get("non-existing"), nullValue());
assertThat(Arrays.asList(values), hasItems("bar", "42"));
assertTrue(Introspector.isModelClass(TestModel.class)); assertTrue(Introspector.isModelClass(SubTestModel.class)); assertFalse(Introspector.isModelClass(IntrospectorTest.class)); assertFalse(Introspector.isModelClass(int.class));
assertThat(result.getClassName(), is(Integer.class.getName())); assertThat((Integer) result.getArg(), is(43));
assertThat(OutputStreamFormater.formatValues("OpenEngSB Version", "3.0.0-SNAPSHOT"), equalTo(string));
assertTrue(CollectionUtils.isEqualCollection(modelManager.findAssignments(), expected));
assertThat(persistenceService.supports(UnknownConfigItem.class), is(false));
assertThat(items.size(), is(1)); assertThat(loadedConfiguration.getMetaData().get(ContextId.META_KEY_ID), is("context2"));
assertThat(ref, not(nullValue()));
assertThat(attributeMap.get("value1"), is("foo")); assertThat(attributeMap.get("value2"), is("bar"));
assertThat(contextDeployerService.canHandle(otherFile), is(false));
assertFalse(indexEngine.indexExists(TestModel.class));
assertThat(filesAfter, is(filesBefore + 1)); assertThat(configFileThatShouldBeCreated.exists(), is(true));
assertThat(ldapDao.exists(DnFactory.permission(permission)), is(true));
assertThat(entry.getType(), is(Integer.class.getName()));
assertThat(s, equalTo(" \\u001B[1mid \\u001B[m status"));
assertTrue(CollectionUtils.isEqualCollection(modelManager.findProjects(), expected));
assertFalse(storageFile.exists()); assertTrue(storageFile.exists());
assertEquals(0, loaded.size());
assertThat(object.get(key1), nullValue()); assertThat(object.get(key2), nullValue());
assertTrue(varchar.equals(other));
assertEquals(0, loaded.size());
assertTrue(varchar.equals(other));
assertThat(result.getClassName(), is(Integer.class.getName())); assertThat((Integer) result.getArg(), is(21));
assertThat(OutputStreamFormater.spaces(20).length(), is(20));
assertThat(testModels.size(), is(2)); assertThat(model.getA(), is(42)); assertThat(model.getB(), is("foo")); assertThat(model.getC(), is(7L)); assertThat(model.getA(), is(21)); assertThat(model.getB(), is("bar")); assertThat(model.getC(), is(9L));
assertEquals("org.openengsb.core.edbi.models.TestModel", index.getName()); assertEquals(TestModel.class, index.getModelClass()); assertEquals("INDEX_HEAD", index.getHeadTableName()); assertEquals("INDEX_HISTORY", index.getHistoryTableName()); assertEquals(3, index.getFields().size());
assertThat(list.get(0).getId(), is("1")); assertThat(list.get(1).getId(), is("b")); assertThat(list.get(2).getId(), is("z"));
assertTrue(service.supports(GlobalConfiguration.class)); assertFalse(service.supports(ImportConfiguration.class));
assertThat(ldapDao.exists(DnFactory.assignment(assignment)), is(true));
assertThat(connectorDeployerService.canHandle(otherFile), is(false));
assertThat(configFileThatShouldBeDeleted.exists(), is(false));
assertFalse(varchar.equals(other));
assertThat(connectorFile.exists(), is(true)); assertThat("old service is not there anymore", references, not(nullValue()));
assertThat(list.get(0).getId(), is("1")); assertThat(list.get(1).getId(), is("b")); assertThat(list.get(2).getId(), is("z"));
assertEquals("PRE_INDEX", prepender.translate(index));
assertEquals("SOMEPROPERTY", new SQLIndexFieldNameTranslator().translate(field));
assertThat(objects.size(), is(1)); assertThat(result.getString(key1), is(CONTEXT_ID + "/testReferenceToModelA")); assertThat(result.getString(key2), is(CONTEXT_ID + "/testReferenceToModelB"));
assertTrue(varchar.equals(varchar));
assertThat(eventString, containsString("class:" + event.getClass())); assertThat(eventString, containsString("int:5;")); assertThat(eventString, containsString("name:test"));
assertTrue(service.supports(RuleBaseConfiguration.class)); assertFalse(service.supports(GlobalConfiguration.class));
assertThat(ranking, notNullValue());
assertFalse(indexEngine.indexExists("org.openengsb.core.edbi.models.TestModel"));
assertThat(persistenceService.supports(ContextConfiguration.class), is(true));
assertEquals("testId", Introspector.getOpenEngSBModelIdProperty(TestModel.class)); assertEquals("testId", Introspector.getOpenEngSBModelIdProperty(SubTestModel.class));
assertThat(provider.getDescription().getString(Locale.getDefault()), is("desc"));
assertTrue(service.supports(ImportConfiguration.class)); assertFalse(service.supports(GlobalConfiguration.class));
assertThat(events.contains(NullEvent.class), is(true)); assertThat(events.size(), is(1));
assertThat(id1.equals(id2), is(true)); assertThat(id2.equals(id1), is(true));
assertEquals(1, findIndexObject.size());
assertEquals(1, findIndexObject.size());
assertEquals(1, findIndexObject.size());
assertEquals("my.package.name", new RuleBaseElementId(RuleBaseElementType.Rule, "my.package", "name").toString());
assertThat(ldapDao.exists(DnFactory.project(project)), is(true));
assertTrue(rs.next()); assertEquals("A", rs.getString("TESTID")); assertEquals(42, rs.getInt("TESTINTEGER")); assertEquals(new Date(42), rs.getTimestamp("REV_CREATED")); assertTrue(rs.next()); assertEquals("B", rs.getString("TESTID")); assertEquals(43, rs.getInt("TESTINTEGER")); assertEquals(new Date(42), rs.getTimestamp("REV_CREATED")); assertFalse(rs.next());
assertThat(new PassThroughStringLocalizer().getString("a", Locale.GERMAN), is("a"));
assertTrue(service.supports(ConnectorConfiguration.class));
assertThat(result.getClassName(), is(Integer.class.getName())); assertThat((Integer) result.getArg(), is(21));
assertEquals("FOO_INDEX", prepender.translate(index));
assertThat(context.getChildren().size(), is(0));
assertTrue(runningServiceIds.contains("dummyId"));
assertEquals("2FD4E1C67A", translator.translate(index));
assertEquals(RuleBaseElementId.DEFAULT_RULE_PACKAGE + ".name", new RuleBaseElementId(RuleBaseElementType.Rule, "name").toString());
assertThat(bl.getString("unique_key", new Locale("a", "b", "c")), is("default"));
assertThat(bl.getString("abc", new Locale("a", "b", "c")), is("c"));
assertThat(metaData, hasEntry("id", "idFromContextId"));
assertThat(result.getClassName(), is(Integer.class.getName())); assertThat((Integer) result.getArg(), is(21));
assertFalse(mapper.exists(index));
assertFalse(engine.exists(testIndex));
assertEquals(4, map.size()); assertEquals(List.class, map.get("openEngSBModelTail")); assertEquals(String.class, map.get("testId")); assertEquals(Integer.class, map.get("testInteger")); assertEquals(SubTestModel.class, map.get("subModel"));
assertTrue(connectorAttributes.get("name1").equals("val1")); assertTrue(connectorAttributes.get("name2").equals("val2"));
assertEquals(proxyRetVal, "teststring");
assertTrue(varchar.equals(other));
assertThat("old service is not there anymore", references, not(nullValue()));
assertEquals(RuleBaseElementId.DEFAULT_RULE_PACKAGE, new RuleBaseElementId().toString());
assertThat(items.size(), is(3));
assertNotNull(descr); assertFalse(descr.length() == 0);
assertNotNull(name); assertFalse(name.length() == 0);
assertNotNull(descr); assertFalse(descr.length() == 0);
assertEquals(DataLinkType.EN10MB, dlt); assertEquals(DataLinkType.PPP, dlt);
assertEquals(3, packets.size()); assertTrue(packets.get(0).contains(IcmpV4EchoPacket.class)); assertTrue(packets.get(1).contains(IcmpV4EchoPacket.class)); assertTrue(packets.get(2).contains(IcmpV4EchoPacket.class)); assertTrue(e.getMessage().startsWith("Failed to set direction:"));
assertNotNull(dev); assertTrue(dev.length() != 0);
assertTrue(dumpFile.exists()); assertTrue(dumpFile.length() >= packet.length());
assertNotNull(list); assertEquals(1, list.size()); assertEquals(DataLinkType.EN10MB, list.get(0));
assertNotNull(err); assertFalse(err.length() == 0);
assertNotNull(ver); assertFalse(ver.length() == 0);
assertNotNull(handle); assertTrue(handle.isOpen());
assertTrue(position >= initialPosition); assertTrue(position >= packet.length());
assertEquals("Statistics aren\'t available from a pcap_open_dead pcap_t", e.getMessage()); assertNotNull(ps);
assertNull(ph.getOriginalLength()); assertEquals(new Integer(74), ph.getOriginalLength()); assertEquals(packet.length(), ph.getOriginalLength().intValue());
assertEquals(1434220771517L, phNano.getTimestamp().getTime()); assertEquals(517995677, phNano.getTimestamp().getNanos()); assertEquals(1434220771517L, phMicro.getTimestamp().getTime()); assertEquals(517995000, phMicro.getTimestamp().getNanos());
assertNull(ph.getTimestamp()); assertEquals(1434220771517L, ph.getTimestamp().getTime());
assertNotNull(name); assertFalse(name.length() == 0);
assertNotNull(devs); assertTrue(devs.size() != 0 || !System.getProperty("user.name").equals("root"));
assertNotNull(result);
assertEquals(array[0],"a"); assertEquals(array[1],"b"); assertEquals(array[2],"c"); assertEquals(array[3],"d");
assertTrue(result);
assertEquals("SELECT user_id userId,user_name userName,pwd pwd FROM user WHERE user_id = :userId", t.getSelectByMultiPkSql()); assertEquals("SELECT user_id userId,group_id groupId,user_name userName,pwd pwd FROM user WHERE user_id = :userId AND group_id = :groupId", multiKeySqlGenerator.getSelectByMultiPkSql());
assertTrue(result);
assertEquals("select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10",sql); assertEquals("select * from ( select * from user ) where rownum <= 100",sql0limit); assertEquals("select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10 for update",forUpdateSql);
assertEquals("INSERT INTO user (user_id,user_name,pwd ) VALUES ( :userId,:userName,:pwd ) ", t.getInsertSql());
assertTrue(result); assertFalse(result); assertTrue(result); assertTrue(result); assertTrue(result); assertFalse(result); assertFalse(result); assertTrue(sqlTypeChecker.isSelectSql("<![CDATA[ select * from user ]]>" ));
assertEquals("select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10",sql);
assertTrue(result); assertTrue(sqlTypeChecker.isUpdateSql("<![CDATA[ update user set username = ? ,abc = ? where id = ? ]]>" )); assertFalse(sqlTypeChecker.isUpdateSql("select usr_id,usr_name,usr_passwd,usr_type,usr_gmt_create,usr_gmt_update from tse_user_base" ));
assertEquals("DELETE FROM user WHERE user_id = ?", t.getDeleteBySinglePkSql()); assertNotNull(espected);
assertTrue(result);
assertEquals("select * from user limit :limit", dialect.getLimitString("select * from user", 0,OFFSET, 0,LIMIT)); assertEquals("select * from user limit :limit", dialect.getLimitString("select * from user", 0,OFFSET,12,LIMIT)); assertEquals("select * from user limit :offset,:limit", dialect.getLimitString("select * from user", 12, OFFSET,0,LIMIT)); assertEquals("select * from user limit :offset,:limit", dialect.getLimitString("select * from user", 12,OFFSET, 34,LIMIT));
assertEquals(result,"Number");
assertEquals("select * from user limit #{limit}", dialect.getLimitString("select * from user", 0,"#{offset}", 0,"#{limit}")); assertEquals("select * from user limit #{offset},#{limit}", dialect.getLimitString("select * from user", 12, "#{offset}",0,"#{limit}"));
assertEquals("SELECT user_id userId,user_name userName,pwd pwd FROM user WHERE user_id = ?", t.getSelectBySinglePkSql()); assertNotNull(espected);
assertEquals("select * from user limit 12", dialect.getLimitString("select * from user", 0, 12)); assertEquals("select * from user limit 12,34", dialect.getLimitString("select * from user", 12, 34));
assertTrue(result); assertTrue(sqlTypeChecker.isInsertSql("<![CDATA[ insert into userinfo (user) values (?) ]]>" )); assertFalse(result);
assertTrue(MetadataCreateUtils.isNativeJavaType(int.class)); assertTrue(MetadataCreateUtils.isNativeJavaType(Integer.class)); assertTrue(MetadataCreateUtils.isNativeJavaType(Date.class)); assertTrue(MetadataCreateUtils.isNativeJavaType(Ref.class)); assertFalse(MetadataCreateUtils.isNativeJavaType(null)); assertFalse(MetadataCreateUtils.isNativeJavaType(AAA.class)); assertFalse(MetadataCreateUtils.isNativeJavaType(new Integer[]{}.getClass())); assertFalse(MetadataCreateUtils.isNativeJavaType(new int[]{}.getClass()));
assertTrue(result);
assertNotNull(result);
assertEquals("user_id userId,user_name userName,pwd pwd", t.getColumnsSql());
assertEquals("select * from user limit 0", dialect.getLimitString("select * from user", 0, 0)); assertEquals("select * from user limit 12", dialect.getLimitString("select * from user", 0, 12)); assertEquals("select * from user limit 12,0", dialect.getLimitString("select * from user", 12, 0)); assertEquals("select * from user limit 12,34", dialect.getLimitString("select * from user", 12, 34));
assertEquals("UPDATE user SET user_name = :userName,pwd = :pwd WHERE user_id = :userId", t.getUpdateByPkSql()); assertEquals("UPDATE user SET user_name = :userName,pwd = :pwd WHERE user_id = :userId AND group_id = :groupId", multiKeySqlGenerator.getUpdateByPkSql()); assertEquals("UPDATE user SET user_name = :userName,pwd = :pwd WHERE user_id = :userId AND group_id = :groupId", multiKeySqlGenerator.getUpdateByPkSql());
assertTrue(result); assertFalse(result); assertTrue(sqlTypeChecker.isDeleteSql("<![CDATA[ delete from userinfo ]]>" )); assertTrue(sqlTypeChecker.isDeleteSql("<![CDATA[ \\ndelete\\n from\\n userinfo ]]>" )); assertTrue(sqlTypeChecker.isDeleteSql("<![CDATA[ \\ndelete air_ld_config\\n where config_name = ?\\n \\n]]>" ));
assertEquals("DELETE FROM user WHERE user_id = :userId", t.getDeleteByMultiPkSql()); assertEquals("DELETE FROM user WHERE user_id = :userId AND group_id = :groupId", multiKeySqlGenerator.getDeleteByMultiPkSql());
assertThat(linkRels, Matchers.hasItem("self")); assertEquals(value.getLink("self"), value.getId()); assertTrue(value.hasLink("bookmarks"));
assertNotNull(output.getContent().getUrl()); assertEquals(input.getUrl(), output.getContent().getUrl());
assertThat(thrown).isInstanceOf(IllegalArgumentException.class);
assertThat(thrown).isInstanceOf(IllegalArgumentException.class);
assertNull(roles);
assertNotNull(list); assertTrue(list.isEmpty()); assertNotNull(list); assertTrue(list.isEmpty()); assertNotNull(list); assertTrue(list.isEmpty());
assertNotNull(oauthCode1); assertNotNull(oauthCode1.code()); assertNotNull(oauthCode1.username()); assertNotNull(oauthCode2); assertEquals(i, 1); assertNull(oauthCode3);
assertNotNull(clientId); assertTrue(clientId.length() == 20);
assertNotNull(list); assertTrue(list.isEmpty());
assertTrue(DateUtils.isDate("2016-12-12")); assertTrue(DateUtils.isDate("2016-01-01")); assertTrue(DateUtils.isDate("0000-12-12")); assertTrue(DateUtils.isDate("3652-02-11"));
assertNotNull(list); assertTrue(list.isEmpty());
assertNull(clientDetails); assertEquals(i, 1); assertNotNull(clientDetails2); assertNotNull(clientDetails2.getClientId());
assertNull(accessToken);
assertTrue(list.isEmpty());
assertNull(clientDetails);
assertNotNull(clientSecret); assertTrue(clientSecret.length() == 20);
assertNull(users);
assertNull(accessToken);
assertEquals(i, 1);
assertTrue(id > 0);
assertNull(accessToken);
assertNotNull(admin); assertEquals(admin, "21232f297a57a5a743894a0e4a801fc3"); assertNotNull(test); assertEquals(test, "098f6bcd4621d373cade4e832627b4f6");
assertNotNull(list); assertTrue(list.isEmpty());
assertThat(merged) .containsExactly(1, "one,1", 2, "two") .inOrder();
assertThat(thrown).isSameAs(exception);
assertThat(mapBoth(Optional.of("foo"), Optional.empty(), action::run)).isEqualTo(Optional.empty());
assertThat(Ordinal.fromIndex(i).toIndex()).isEqualTo(i);
assertThat(last("foo").toString()).isEqualTo("last(\'foo\')");
assertThat(flattened.limit(5).collect(toList())) .containsExactly(1, 2, 3, 4, 5).inOrder();
assertThat(flattened.limit(5).collect(toList())) .containsExactly(1, 2, 3, 4, 5).inOrder();
assertThat(mapBoth(Optional.of("foo"), Optional.empty(), (a, b) -> null)) .isEqualTo(Optional.empty());
assertThat(walker.postOrderFrom("foo")).containsExactly("baz", "bar", "foo").inOrder();
assertThat(indexesFrom(1).limit(3)).containsExactly(1, 2, 3).inOrder(); assertThat(indexesFrom(Integer.MAX_VALUE).limit(3)) .containsExactly(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE + 1).inOrder();
assertThat(Tree.<Integer>walker().inOrderFrom(Tree.leftThenRight(1)).map(Tree::value).limit(5)) .containsExactly(2, 4, 6, 8, 10) .inOrder();
assertThat(walker.breadthFirstFrom("foo")) .containsExactly("foo", "bar", "baz", "dog") .inOrder();
assertThat(suffix("foo").in("foonot")).isEmpty(); assertThat(suffix("foo").in("")).isEmpty(); assertThat(suffix("foo").iterateIn("")).isEmpty();
assertThat(match.length()).isEqualTo(0); assertThat(match.toString()).isEmpty(); assertThat(match.subSequence(0, 0).toString()).isEmpty();
assertThat(walker.postOrderFrom("foo", "zoo")) .containsExactly("cat", "zoo", "dog", "bar", "foo") .inOrder();
assertThat(generated.limit(10).collect(toList())) .containsExactly(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
assertThat(MoreStreams.generate(100, i -> IntStream.rangeClosed(1, i / 10).boxed()) .collect(toList())) .containsExactly(100, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1);
assertThat(BiStream.of(1, 10, 2, 20).collect(BiCollectors.summingInt((a, b) -> a + b))).isEqualTo(33);
assertThat(Utils.mapList(asList(1, 2), Object::toString)).containsExactly("1", "2").inOrder();
assertThat(BiStream.of(1, 3, 2, 4).collect(BiCollectors.averagingInt((Integer a, Integer b) -> a + b))) .isEqualTo(5D);
assertThat(groups).containsExactly(0, ImmutableList.of(0, 1), 1, ImmutableList.of(2)).inOrder();
assertThat(Tree.<String>walker().postOrderFrom(tree).map(Tree::value)) .containsExactly("c", "e", "d", "b", "h", "g", "i", "f", "a") .inOrder();
assertThat(Tree.<Integer>walker().preOrderFrom(Tree.rightFrom(1)).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(result).isEqualTo(6); assertThat(thrown).hasMessageThat().contains("size: 1");
assertThat(spanningInOrder("o", "bar").in("foo car")).isEmpty();
assertThat(Stream.of(1, 2, 3).collect(toListAndThen(Collections::reverse))) .containsExactly(3, 2, 1) .inOrder();
assertThat(assertThrows(MyException.class, maybe::orElseThrow).getMessage()).isEqualTo("bad");
assertThat(Tree.<Integer>walker().postOrderFrom(Tree.rightFrom(1)).map(Tree::value).limit(0)) .isEmpty();
assertThat(Tree.<Integer>walker().breadthFirstFrom(tree).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(MoreStreams.dice(IntStream.range(1, 8).boxed().parallel(), 2) .flatMap(List::stream).collect(toList())) .containsExactly(1, 2, 3, 4, 5, 6, 7); assertThat(MoreStreams.dice(IntStream.range(1, 6).boxed(), 2).parallel() .flatMap(List::stream).collect(toList())) .containsExactly(1, 2, 3, 4, 5);
assertThat(dataType.newWalker().preOrderFrom("root")).containsExactly("root");
assertThat(table.rowMap()).containsExactly("r1", ImmutableMap.of("c1", 11, "c2", 12)).inOrder();
assertThat( BiStream.from(towns, Town::getState, town -> town) .collect(toImmutableMap(summingInt(Town::getPopulation)))) .containsExactly("WA", 4, "FL", 2, "IL", 4, "AZ", 5, "OH", 6, "IN", 7, "CA", 17) .inOrder();
assertThat(walker.breadthFirstFrom("foo", "zoo")) .containsExactly("foo", "zoo", "bar", "cat", "cat", "dog") .inOrder();
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isCompletedExceptionally()).isTrue(); assertThat(inner.isCompletedExceptionally()).isFalse(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isFalse();
assertThat(BiStream.of(1, 10, 2, 20).collect(BiCollectors.summarizingDouble((a, b) -> a + b)).getMin()) .isEqualTo(11D);
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isFalse(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isCompletedExceptionally()).isTrue(); assertThat(inner.isCompletedExceptionally()).isFalse(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isFalse();
assertThat(Tree.<String>walker().inOrderFrom(tree1, tree2).map(Tree::value)) .containsExactly("b", "a", "c", "d", "h", "f", "g", "e") .inOrder();
assertThat(first("x").removeAllFrom("fox x bxr")).isEqualTo("fo br"); assertThat(first("x").removeAllFrom("xaxbxxxcxx")).isEqualTo("abc");
assertThat( whileNotNull(stack::poll) .peek(v -> { if (v.equals("one")) stack.push("two"); })) .containsExactly("one", "two").inOrder(); assertThat(stack).isEmpty();
assertThat(flatMapBoth( Optional.of("foo"), Optional.empty(),(a, b) -> Optional.of(action.run(a, b)))) .isEqualTo(Optional.empty());
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isTrue(); assertThat(outer.isCompletedExceptionally()).isTrue(); assertThat(inner.isCompletedExceptionally()).isTrue(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isTrue();
assertThat(Tree.<String>walker().inOrderFrom(tree).map(Tree::value)) .containsExactly("foo", "right") .inOrder();
assertThat(BiStream.of(1L, 10, 2L, 20).collect(BiCollectors.summingLong((a, b) -> a + b))).isEqualTo(33L);
assertThat(map).containsExactly(1, "one", 1, "uno");
assertThat( whileNotNull(queue::poll) .peek(v -> { if (v.equals("one")) queue.add("two"); })) .containsExactly("one", "two").inOrder(); assertThat(queue).isEmpty();
assertThat(BiStream.of("one", 1, "two", 2).collect(toImmutableListMultimap())) .containsExactly("one", 1, "two", 2);
assertThat(match.length()).isEqualTo(2);
assertThat(Substring.first("bar").in("foobar").get().fullString()).isEqualTo("foobar");
assertThat(BiStream.of(1, 10D, 2, 20D).collect(BiCollectors.summingDouble((a, b) -> a + b))).isEqualTo(33D);
assertThat(flattened.isParallel()).isFalse();
assertThat(match.length()).isEqualTo(2);
assertThat(match.length()).isEqualTo(0); assertThat(match.toString()).isEmpty(); assertThat(match.subSequence(0, 0).toString()).isEmpty();
assertThat(Tree.<Integer>walker().postOrderFrom(Tree.leftThenRight(1)).map(Tree::value).limit(0)) .isEmpty();
assertThat(Stream.of(1).collect(when(i -> i + 1))).hasValue(2); assertThat(Stream.of(1, 2).collect(when(i -> i + 1))).isEmpty(); assertThat(Stream.of(1).collect(when(x -> x == 1, i -> i + 1))).hasValue(2); assertThat(Stream.of(1).collect(when(x -> x == 2, i -> i + 1))).isEmpty();
assertThat(thrown).isSameAs(exception);
assertThat(Utils.cast(1, String.class)).isEqualTo(Optional.empty());
assertThat(cancelled.get()).isNull();
assertThat(Tree.<String>walker().preOrderFrom().map(Tree::value)) .isEmpty();
assertThat(Utils.cast(null, String.class)).isEqualTo(Optional.empty());
assertThat(Stream.of(1, 2).collect(indexingBy(Object::toString))) .containsExactly("1", 1, "2", 2) .inOrder();
assertThat(Tree.<String>walker().inOrderFrom(tree).map(Tree::value)) .containsExactly("left", "foo") .inOrder();
assertThat(MoreStreams.dice(asList(1, 2).stream(), Integer.MAX_VALUE).collect(toList())) .containsExactly(asList(1, 2));
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isTrue(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isTrue();
assertThat(optional(true, null)).isEmpty();
assertThat(map).containsExactly(1, "one", 1, "uno");
assertThat(Tree.<String>walker().breadthFirstFrom().map(Tree::value)) .isEmpty();
assertThat(walker.breadthFirstFrom(ImmutableList.of())).isEmpty();
assertThat(Ordinal.natural().limit(5).map(Ordinal::toString)) .containsExactly("1st", "2nd", "3rd", "4th", "5th") .inOrder();
assertThat(BiStream.of(1, "one", 2, "two").collect(BiCollectors.countingDistinct())) .isEqualTo(2); assertThat(BiStream.of(1, "one", 1, "uno").collect(BiCollectors.countingDistinct())) .isEqualTo(2); assertThat(BiStream.of(1, "one", 2, "one").collect(BiCollectors.countingDistinct())) .isEqualTo(2);
assertThat(stream.isParallel()).isFalse(); assertThat(list).isEmpty(); assertThat(stream.skip(1).limit(1)).containsExactly(3); assertThat(list).containsExactly(1, 3).inOrder();
assertThat(first(Pattern.compile("b.$")).in("foobar")).isEmpty(); assertThat(first(Pattern.compile("b.$")).iterateIn("foobar")).isEmpty();
assertThat(ordinals).isStrictlyOrdered(); assertThat(ordinals.stream().map(Ordinal::toString).limit(7)) .containsExactly("1st", "2nd", "3rd", "4th", "5th", "6th", "7th") .inOrder();
assertSame(exception, assertThrows(Exception.class, () -> maybe.orElseThrow(e -> e)));
assertThat(Math.round(Retryer.fib(0))).isEqualTo(0); assertThat(Math.round(Retryer.fib(1))).isEqualTo(1); assertThat(f).isLessThan(Long.MAX_VALUE); assertThat((double) f) .isWithin(f / 1000).of(results.get(i - 2).doubleValue() + results.get(i - 1).doubleValue());
assertThat(spliterator.hasCharacteristics(Spliterator.NONNULL)).isFalse(); assertThat(MoreStreams.dice(spliterator, 2).hasCharacteristics(Spliterator.NONNULL)).isTrue();
assertThat(Substring.first("foo").in("foobar").get().index()).isEqualTo(0); assertThat(Substring.first("bar").in("foobar").get().index()).isEqualTo(3); assertThat(END.in("foobar").get().index()).isEqualTo(6);
assertThat(Tree.<Integer>walker().inOrderFrom(Tree.leftFrom(1)).map(Tree::value).limit(0)) .isEmpty();
assertThat(exception.getCause()).isSameAs(error);
assertThat(BiStream.of(1, null, 1, null).collect(BiCollectors.countingDistinct())) .isEqualTo(1); assertThat(BiStream.of(null, null, null, null).collect(BiCollectors.countingDistinct())) .isEqualTo(1); assertThat(BiStream.of(null, "one", null, "one").collect(BiCollectors.countingDistinct())) .isEqualTo(1);
assertThat(result) .containsExactly("Joe", 1, "Tom", 2, "Tom", 2) .inOrder();
assertThat(Utils.typed(String.class, condition::test).test("hi")).isTrue();
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isFalse(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isDone()).isFalse(); assertThat(inner.isDone()).isFalse();
assertThat(MoreStreams.generate(1, x -> null).collect(toList())) .containsExactly(1);
assertThat(funnel.run()).isEmpty();
assertThat(walker.preOrderFrom("foo", "bar")) .containsExactly("foo", "cat", "dog", "bar", "lion", "roar", "run", "bar", "lion", "roar") .inOrder();
assertThat(walker.preOrderFrom("foo", "bar")) .containsExactly("foo", "cat", "dog", "bar", "lion", "roar", "run") .inOrder();
assertThat(Tree.<Integer>walker().postOrderFrom(tree).map(Tree::value).limit(1)) .containsExactly(2) .inOrder();
assertThat(Tree.<String>walker().postOrderFrom(tree1, tree2).map(Tree::value)) .containsExactly("b", "d", "c", "a", "g", "h", "f", "e") .inOrder();
assertThat(cancelled.get()).isSameAs(exception);
assertThat(Tree.<Integer>walker().breadthFirstFrom(tree).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(first(Pattern.compile(".*x")).in("bar")).isEmpty(); assertThat(first(Pattern.compile(".*x")).in("")).isEmpty(); assertThat(first(Pattern.compile(".*x")).iterateIn("")).isEmpty();
assertThat(Tree.<String>walker().inOrderFrom(tree).map(Tree::value)) .containsExactly("left", "foo") .inOrder();
assertThat(walker.preOrderFrom("foo")) .containsExactly("foo", "bar", "cat", "run", "dog", "baz", "cat", "run") .inOrder();
assertThat(map).containsExactly(1, "one");
assertThat(Tree.<String>walker().breadthFirstFrom(tree).map(Tree::value)) .containsExactly("a", "b", "f", "c", "d", "g", "i", "e", "h") .inOrder();
assertThat(match.index()).isEqualTo(1); assertThat(match.length()).isEqualTo(6);
assertThat(Tree.<String>walker().preOrderFrom(tree1, tree2).map(Tree::value)) .containsExactly("a", "b", "c", "d", "e", "f", "g", "h") .inOrder();
assertThat(Tree.<String>walker().preOrderFrom(tree).map(Tree::value)) .containsExactly("a", "b", "c", "d", "e", "f", "g", "h") .inOrder();
assertThat(Utils.typed(String.class, x -> true).test(1)).isFalse();
assertThat(merged) .containsExactly(1, "one", 2, "two") .inOrder();
assertThat(whileNotNull(queue::poll)).isEmpty(); assertThat(queue).isEmpty();
assertThat(Tree.<Integer>walker().preOrderFrom(Tree.leftFrom(1)).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(Tree.<Integer>walker().inOrderFrom(Tree.rightFrom(1)).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(first("foo").in("bar")).isEmpty(); assertThat(first("foo").in("")).isEmpty(); assertThat(first("foo").iterateIn("")).isEmpty();
assertThat(suffix(".").addToIfAbsent("a.")).isEqualTo("a.");
assertThat(last("foo").in("bar")).isEmpty(); assertThat(last("foo").in("")).isEmpty(); assertThat(last("foo").iterateIn("bar")).isEmpty(); assertThat(last("f").iterateIn("")).isEmpty();
assertThat(Tree.<String>walker().inOrderFrom(tree).map(Tree::value)) .containsExactly("c", "b", "e", "d", "a", "g", "h", "f") .inOrder();
assertThat(prefix("google3/").addToIfAbsent("java/com")).isEqualTo("google3/java/com");
assertThat(Substring.first("var").replaceAllFrom("var=x", m -> "v")).isEqualTo("v=x");
assertThat(flattened.collect(toList())).containsExactly(1);
assertThat(BiCollection.of().toString()).isEqualTo("[]"); assertThat(BiCollection.of("a", 1).toString()).isEqualTo("[a=1]"); assertThat(BiCollection.of("a", 1, "b", 2).toString()).isEqualTo("[a=1, b=2]");
assertThat(Tree.<String>walker().breadthFirstFrom(tree).map(Tree::value)) .containsExactly("foo");
assertSame(exception, assertThrows(RuntimeException.class, () -> maybe.orElseThrow(e -> e)));
assertThat(BiStream.of(1, 10, 2, 20).collect(BiCollectors.summarizingLong((a, b) -> a + b)).getMin()) .isEqualTo(11L);
assertThat(Utils.mapList(asList(), Object::toString)).isEmpty();
assertThat(spliterator.hasCharacteristics(Spliterator.SUBSIZED)).isTrue(); assertThat(MoreStreams.dice(spliterator, 2).hasCharacteristics(Spliterator.SUBSIZED)) .isFalse();
assertThat(walker.postOrderFrom(ImmutableList.of())).isEmpty();
assertThat(map).containsExactly(1, "one");
assertThat(BiStream.of(1, "one", 2, "two").collect(BiCollectors.counting())).isEqualTo(2L);
assertThat(flatMapBoth(Optional.of("foo"), Optional.of("bar"), (a, b) -> Optional.of(a + b))) .isEqualTo(Optional.of("foobar"));
assertThat(Utils.typed(String.class, condition::test).test(1)).isFalse();
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isCompletedExceptionally()).isTrue(); assertThat(inner.isCompletedExceptionally()).isFalse(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isTrue(); assertThat(inner.get()).isEqualTo("inner");
assertThat(walker.postOrderFrom("foo")).containsExactly("bar", "foo").inOrder();
assertThat(MoreStreams.generate(1, x -> Stream.empty()).collect(toList())) .containsExactly(1);
assertThat(walker.postOrderFrom("foo")).containsExactly("dog", "bar", "baz", "foo").inOrder();
assertThat(exception.getCause().getMessage()).contains("foobar"); assertThat(translated).containsEntry(1, "1"); assertThat(translated).doesNotContainKey(5);
assertThat(new Iteration<Object>().iterate()).isEmpty();
assertThat(stream).containsExactly("two", "one").inOrder(); assertThat(stack).isEmpty();
assertThat(fibonacci().limit(7)) .containsExactly(0L, 1L, 1L, 2L, 3L, 5L, 8L) .inOrder();
assertThat(Tree.<String>walker().postOrderFrom(tree).map(Tree::value)) .containsExactly("right", "foo") .inOrder();
assertThat( BiStream.from(towns, Town::getState, town -> town) .collect(toImmutableMap(summingInt(Town::getPopulation)))) .isEmpty();
assertThat(match.length()).isEqualTo(4);
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isCompletedExceptionally()).isTrue(); assertThat(inner.isCompletedExceptionally()).isTrue(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isTrue();
assertThat(prefix("foo").from("")).isEmpty();
assertThat(Ordinal.of(i).toIndex()).isEqualTo(i - 1);
assertThat(cancelled.get()).isInstanceOf(CancellationException.class);
assertThat(prefix("foo").toString()).isEqualTo("foo");
assertThat(first(Pattern.compile(".*x")).toString()).isEqualTo("first(\\".*x\\", 0)");
assertThat(walker.breadthFirstFrom("foo", "zoo")) .containsExactly("foo", "zoo", "bar", "baz", "cat", "dog") .inOrder();
assertThat(caught.getCause()).isSameAs(exception);
assertThat(BiStream.of(1, "one", 1, null).collect(BiCollectors.countingDistinct())) .isEqualTo(2); assertThat(BiStream.of(1, "one", null, "one").collect(BiCollectors.countingDistinct())) .isEqualTo(2); assertThat(BiStream.of(1, "one", null, null).collect(BiCollectors.countingDistinct())) .isEqualTo(2);
assertThat(walker.preOrderFrom("foo")) .containsExactly("foo", "bar", "cat", "run", "dog", "baz") .inOrder();
assertThat(Tree.<Integer>walker().preOrderFrom(Tree.leftThenRight(1)).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(Tree.<String>walker().postOrderFrom().map(Tree::value)) .isEmpty();
assertThat( BiStream.from(towns, Town::getState, town -> town) .collect(toImmutableMap(summingInt(Town::getPopulation)))) .containsExactly("WA", 150, "IL", 200) .inOrder();
assertThat(suffix("foo").toString()).isEqualTo("foo");
assertThat(flattened.collect(toList())).containsExactly(1, 2, 3, 4).inOrder();
assertThat(Stream.of("foo").collect(toTinyContainer()).when(x -> true, "got:"::concat)) .hasValue("got:foo");
assertThat(MoreStreams.dice(asList(null, null).stream(), 2).collect(toList())) .containsExactly(asList(null, null));
assertThat(flattened.collect(toList())).isEmpty();
assertThat(flattened.collect(toList())).containsExactly(1, 2).inOrder();
assertThat(exception.getCause().getMessage()).contains("foobar"); assertThat(translated).containsEntry(1, "1"); assertThat(translated).doesNotContainKey(4);
assertThat(flattened.limit(5).collect(toList())) .containsExactly(1, 2, 3, 4, 5).inOrder();
assertThat(merged).isEmpty();
assertThat(BiStream.of(2, "two", 1, "one").collect(GuavaCollectors.toImmutableSortedMap(naturalOrder()))) .containsExactly(1, "one", 2, "two") .inOrder();
assertThat(future.isCancelled()).isTrue();
assertThat(Utils.typed(String.class, condition::test).test("hi")).isFalse();
assertThat(dataType.newWalker().postOrderFrom("root")).containsExactly("root");
assertThat(walker.preOrderFrom("foo")).containsExactly("foo", "bar", "baz").inOrder();
assertThat(match.length()).isEqualTo(2);
assertThat(first(Pattern.compile("(.*)x"), 1).in("bar")).isEmpty(); assertThat(first(Pattern.compile("(.*x)"), 1).in("bar")).isEmpty(); assertThat(first(Pattern.compile(".*(x)"), 1).in("bar")).isEmpty(); assertThat(first(Pattern.compile("(.*x)"), 1).in("")).isEmpty(); assertThat(first(Pattern.compile("(.*x)"), 1).iterateIn("")).isEmpty();
assertThat(first(Pattern.compile("^oob.")).in("foobar")).isEmpty(); assertThat(first(Pattern.compile("^oob")).iterateIn("foobar")).isEmpty();
assertThat(cancelled.get()).isNull();
assertThat(Tree.<String>walker().breadthFirstFrom(tree).map(Tree::value)) .containsExactly("foo", "left") .inOrder();
assertThat(walker.postOrderFrom("foo", "zoo")) .containsExactly("dog", "bar", "foo", "cat", "dog", "zoo") .inOrder();
assertThat(translated).doesNotContainKey(3);
assertThat(spanningInOrder("o", "bar", "car").in("far bar car")).isEmpty();
assertThat(walker.preOrderFrom("foo", "bar")) .containsExactly("foo", "cat", "dog", "run", "bar", "lion", "roar") .inOrder();
assertThat( BiStream.of(2, "two", 1, "one", 1, "uno") .collect(toImmutableSortedMap(naturalOrder(), (a, b) -> b))) .containsExactly(1, "uno", 2, "two") .inOrder();
assertThat(flattened.collect(toList())).containsExactly(1, 2).inOrder();
assertThat(walker.breadthFirstFrom("foo")).containsExactly("foo", "bar", "baz").inOrder();
assertThat(stream).containsExactly("one", "two").inOrder(); assertThat(queue).isEmpty();
assertThat(Tree.<String>walker().preOrderFrom(tree("foo")).map(Tree::value)) .containsExactly("foo");
assertThat(map.keySet()).containsExactly(1, 2).inOrder();
assertThat(Maybe.of(1).isPresent()).isTrue(); assertThat(Maybe.except(new Exception()).isPresent()).isFalse();
assertThat(match.index()).isEqualTo(0); assertThat(match.length()).isEqualTo(0);
assertThat(salaries.collect(BiCollectors.mapping((k, v) -> k + ":" + v, toList()))) .containsExactly("Joe:100", "Tom:200") .inOrder();
assertThat(match.length()).isEqualTo(0); assertThat(match.toString()).isEmpty(); assertThat(match.subSequence(0, 0).toString()).isEmpty();
assertThat(whileNotNull(queue::poll)) .containsExactly("one", "two").inOrder(); assertThat(queue).isEmpty();
assertThat(whileNotNull(stack::poll)) .containsExactly("two", "one").inOrder(); assertThat(stack).isEmpty();
assertThat(Tree.<Integer>walker().breadthFirstFrom(tree).map(Tree::value).limit(3)) .containsExactly(1, 2, 3) .inOrder();
assertThat(spanningInOrder("o", "bar").in("far bar car")).isEmpty();
assertThat(first("x").replaceAllFrom("fox x bxr", m -> "yy")).isEqualTo("foyy yy byyr"); assertThat(first("x").replaceAllFrom("xaxbxxcx", m -> "yy")).isEqualTo("yyayybyyyycyy");
assertThat(merged).isEmpty();
assertThat(walker.preOrderFrom(ImmutableList.of())).isEmpty();
assertThat(merged) .containsExactly(1, "one", 2, "two") .inOrder();
assertThat(Stream.of(1).collect(when(() -> "zero"))).isEmpty(); assertThat(Stream.empty().collect(when(() -> "zero"))).hasValue("zero");
assertThat(BiStream.of(1L, 3, 2L, 4).collect(BiCollectors.averagingDouble((Long a, Integer b) -> a + b))) .isEqualTo(5D);
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isTrue(); assertThat(inner.isCancelled()).isTrue(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isTrue();
assertThat(Maybe.of("good").orElse(Throwable::getMessage)).isEqualTo("good"); assertThat(Maybe.except(new Exception("bad")).orElse(Throwable::getMessage)).isEqualTo("bad");
assertThat( Stream.of(ImmutableMap.of(1, "one"), ImmutableMap.of(2, "two")) .collect(BiStream.concatenating(BiStream::from)) .toMap()) .containsExactly(1, "one", 2, "two") .inOrder();
assertThat(Thread.interrupted()).isTrue(); assertThat(interrupted.getCause()).isNull(); assertThat(Thread.interrupted()).isFalse();
assertThat(dataType.newWalker().breadthFirstFrom("foo")).containsExactly("foo");
assertThat(optional(true, "v")).hasValue("v");
assertThat(BiCollection.of()).isSameAs(BiCollection.of());
assertThat(Tree.<String>walker().inOrderFrom(tree("foo")).map(Tree::value)) .containsExactly("foo");
assertThat(Tree.<String>walker().breadthFirstFrom(tree).map(Tree::value)) .containsExactly("foo", "right") .inOrder();
assertThat(first("foo").toString()).isEqualTo("first(\'foo\')");
assertThat(salaries.collect(BiCollectors.flatMapping((k, c) -> nCopies(c, k).stream(), toList()))) .containsExactly("Joe", "Tom", "Tom") .inOrder();
assertThat(Tree.<String>walker().preOrderFrom(tree).map(Tree::value)) .containsExactly("foo", "right") .inOrder();
assertThat(Tree.<Integer>walker().postOrderFrom(Tree.leftFrom(1)).map(Tree::value).limit(0)) .isEmpty();
assertThat(Tree.<String>walker().postOrderFrom(tree("foo")).map(Tree::value)) .containsExactly("foo");
assertThat(match.toString()).isEqualTo("oo barcarbar"); assertThat(match.index()).isEqualTo(1); assertThat(match.length()).isEqualTo(12);
assertThat(spanningInOrder("o", "bar", "car").in("foo bar cat")).isEmpty();
assertThat(Utils.propagateCancellation(outer, inner)).isSameAs(outer); assertThat(outer.isCancelled()).isFalse(); assertThat(inner.isCancelled()).isFalse(); assertThat(outer.isDone()).isTrue(); assertThat(inner.isDone()).isFalse();
assertThat(suffix(".").addToIfAbsent("a")).isEqualTo("a.");
assertThat(map).containsExactly(1, "one", 1, "uno");
assertThat(prefix("google3/").addToIfAbsent("google3/java/com")).isEqualTo("google3/java/com");
assertThat(mapBoth(Optional.of("foo"), Optional.of("bar"), (a, b) -> a + b)) .isEqualTo(Optional.of("foobar"));
assertThat(exception.getSuppressed()).isEmpty();
assertThat(flatMapBoth( Optional.empty(), Optional.of("bar"),(a, b) -> Optional.of(action.run(a, b)))) .isEqualTo(Optional.empty());
assertThat(match.index()).isEqualTo(0); assertThat(match.length()).isEqualTo(3);
assertThat(optionally(true, () -> "v")).hasValue("v");
assertThat(cancelled.get()).isNull();
assertThat(cancelled.get()).isInstanceOf(CancellationException.class);
assertThat(walker.breadthFirstFrom("foo")).containsExactly("foo", "bar").inOrder();
assertThat(map).containsExactly(1, "one", 1, "uno");
assertThat(BiStream.of(1, 10, 2, 20).collect(BiCollectors.summarizingInt((a, b) -> a + b)).getMin()) .isEqualTo(11);
assertThat(walker.postOrderFrom("foo", "zoo")) .containsExactly("dog", "bar", "foo", "cat", "lion", "zoo") .inOrder();
assertThat(BiStream.of(".", 3, "?", 1).collect(toImmutableMultiset(Integer::intValue))) .containsExactly(".", ".", ".", "?") .inOrder();
assertThat(whileNotNull(new ArrayDeque<>()::poll)).isEmpty();
assertThat(result).isEqualTo("foo"); assertThat(thrown).hasMessageThat().contains("size: 3");
assertThat(spanningInOrder("o", "bar", "car").in("foo boo car")).isEmpty();
assertThat(optionally(true, () -> null)).isEmpty();
assertThat(whileNotNull(stack::poll)).isEmpty(); assertThat(stack).isEmpty();
assertSame(error, assertThrows(MyError.class, () -> maybe.orElseThrow(e -> e)));
assertThat(walker.preOrderFrom("foo")).containsExactly("foo", "bar").inOrder();
assertThat(flattened.parallel().limit(1000).collect(toList())) .hasSize(1000);
assertThat(salaries.collect(toReverseMap)) .containsExactly(100, "Joe", 200, "Tom") .inOrder();
assertThat(mapBoth(Optional.empty(), Optional.of("bar"), action::run)).isEqualTo(Optional.empty());
assertThat(BiStream.of(1L, 3, 2L, 4).collect(BiCollectors.averagingLong((Long a, Integer b) -> a + b))) .isEqualTo(5D);
assertThat(optional(false, "whatever")).isEmpty(); assertThat(optional(false, null)).isEmpty();
assertThat(BiStream.of(1, "one", 1, "one").collect(BiCollectors.countingDistinct())) .isEqualTo(1);
assertThat(spliterator.hasCharacteristics(Spliterator.SORTED)).isTrue(); assertThat(spliterator.getComparator()).isNull(); assertThat(MoreStreams.dice(spliterator, 2).hasCharacteristics(Spliterator.SORTED)).isFalse();
assertThat(ordinals.get(ordinal.toIndex())).isSameAs(ordinal);
assertThat(spanningInOrder("o", "bar").toString()).isEqualTo("spanningInOrder(\'o\', \'bar\')");
assertThat(Tree.<String>walker().breadthFirstFrom(tree1, tree2).map(Tree::value)) .containsExactly("a", "e", "b", "c", "f", "d", "g", "h") .inOrder();
assertThat(flattened.collect(toList())).isEmpty();
assertThat(BiStream.of("one", 1, "two", 2).collect(toImmutableSetMultimap())) .containsExactly("one", 1, "two", 2);
assertThat(whileNotNull(stack::poll)) .containsExactly("two", "one").inOrder();
assertThat(Stream.of(2, 3).collect(toTinyContainer()).when((x, y) -> true, Integer::max)) .hasValue(3);
assertThat(Substring.first("bar").from("foo bar")).hasValue("bar");
assertThat(stream.isParallel()).isFalse(); assertThat(list).isEmpty(); assertThat(stream).containsExactly(1); assertThat(list).containsExactly(1).inOrder();
assertThat(Utils.cast("hi", String.class)).isEqualTo(Optional.of("hi"));
assertThat( optionally( false, () -> { throw new AssertionError(); })) .isEmpty();
assertThat(match.index()).isEqualTo(0); assertThat(match.length()).isEqualTo(3);
assertThat(Tree.<String>walker().inOrderFrom().map(Tree::value)) .isEmpty();
assertThat(walker.breadthFirstFrom("foo", "zoo")) .containsExactly("foo", "zoo", "bar", "cat", "dog") .inOrder();
assertThat(to).containsExactly("1", "2");
assertThat(prefix("foo").in("notfoo")).isEmpty(); assertThat(prefix("foo").in("")).isEmpty(); assertThat(prefix("foo").iterateIn("notfoo")).isEmpty(); assertThat(prefix("foo").iterateIn("")).isEmpty();
assertThat(Tree.<String>walker().preOrderFrom(tree).map(Tree::value)) .containsExactly("foo", "left") .inOrder();
assertThat(walker.preOrderFrom(1).limit(4)).containsExactly(1, 2, 3, 4).inOrder();
assertThat(snapshot.getStdDev()) .isEqualTo(1.2688, offset(0.0001));
assertThat(gauge.getValue()) .isEqualTo(1L);
assertThat(scatteredSnapshot.getMean()) .isEqualTo(2);
assertThat(snapshot.size()) .isEqualTo(5);
assertThat(infinite.getValue()) .isNaN();
assertThat(emptySnapshot.getMax()) .isZero();
assertThat(((Gauge) gauges.getMetrics().get(COUNT)).getValue()) .isEqualTo(12);
assertThat(gauge.getValue()).isEqualTo(1);
assertThat(snapshot.getMax()) .isEqualTo(5);
assertThat(a.compareTo(b)).isLessThan(0); assertThat(b.compareTo(a)).isGreaterThan(0); assertThat(b.compareTo(b)).isEqualTo(0); assertThat(b.resolve("key").compareTo(b)).isLessThan(0); assertThat(b.compareTo(b.resolve("key"))).isGreaterThan(0);
assertThat(name.resolve("bar")).isEqualTo(new MetricName("foo.bar"));
assertThat(snapshot.getMean()) .isEqualTo(2.7);
assertThat(gauge2.getValue()) .isEqualTo(3);
assertThat(divByZero.getValue()) .isNaN();
assertThat((Long) gauge.getValue()) .isPositive();
assertThat(snapshot.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertThat(name.resolve(null)).isEqualTo(new MetricName());
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(snapshot.getValue(1.0)) .isEqualTo(5.0, offset(0.1));
assertThat(metrics.getMetrics().keySet()) .containsOnly(PS_OLDGEN_TIME, PS_OLDGEN_COUNT, PS_OLDGEN_TIME_DELTA, PS_OLDGEN_COUNT_DELTA);
assertThat(emptySnapshot.getMin()) .isZero();
assertThat(gauges.getMetrics().keySet()) .containsOnly( MetricName.build("vendor"), MetricName.build("name"), MetricName.build("uptime"));
assertThat(((Gauge) gauges.getMetrics().get(DAEMON_COUNT)).getValue()) .isEqualTo(13);
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(gauge.getValue()) .isNull();
assertThat(emptySnapshot.getMean()) .isZero();
assertThat(gauge.getValue()) .isEqualTo("9928@example.com");
assertThat(output.toString()) .isEqualTo(String.format("1%n2%n3%n4%n5%n"));
assertThat(snapshot.getValue(0.0)) .isEqualTo(1.0, offset(0.1));
assertThat(nan.getValue()) .isNaN();
assertThat(gauge.getValue()) .isEqualTo(1); assertThat(gauge.getValue()) .isEqualTo(2); assertThat(gauge.getValue()) .isEqualTo(2);
assertThat(snapshot.getMin()) .isEqualTo(1);
assertThat(buffers.getMetrics().keySet()) .containsOnly(DIRECT_COUNT, DIRECT_USED, DIRECT_CAPACITY);
assertThat(regular.getValue()) .isEqualTo(0.5);
assertThat(singleItemSnapshot.getStdDev()) .isZero();
assertThat(new ThreadDeadlockDetector().getDeadlockedThreads()) .isNotNull();
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(buffers.getMetrics().keySet()) .containsOnly(DIRECT_COUNT, DIRECT_USED, DIRECT_CAPACITY, MAPPED_COUNT, MAPPED_USED, MAPPED_CAPACITY);
assertThat(singleItemSnapshot.getStdDev()) .isZero();
assertThat(other.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertThat(snapshot.getValue(1.0)) .isEqualTo(5, offset(0.1));
assertThat(gauge.getValue()) .isEqualTo(100L);
assertThat(gauge.getValue()) .isEqualTo("Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 23.7-b01 (1.7)");
assertThat(gauge.getValue()) .isEqualTo(value);
assertThat(emptySnapshot.getStdDev()) .isZero();
assertThat(detector.getDeadlockedThreads()) .isEmpty();
assertThat(snapshot.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertThat(new GarbageCollectorMetricSet().getMetrics().keySet()) .isNotEmpty();
assertThat(gauge.getValue()) .isEqualTo(2L);
assertThat(name.resolve(null)).isEqualTo(new MetricName("foo"));
assertThat(one) .isSameAs(two);
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(Clock.defaultClock()) .isInstanceOf(Clock.UserTimeClock.class);
assertThat(emptySnapshot.getStdDev()) .isZero();
assertThat(snapshot.getMin()) .isEqualTo(1);
assertThat(output.toString()) .isEqualTo(String.format("1%n2%n3%n4%n5%n"));
assertThat(snapshot.getStdDev()) .isEqualTo(1.5811, offset(0.0001));
assertThat(gauge.getValue()).isEqualTo(2L);
assertThat(((Gauge) set.getMetrics().get(COUNT)).getValue()).isNotNull();
assertThat(emptySnapshot.getMin()) .isZero();
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(name.resolve("foo")).isEqualTo(new MetricName("foo"));
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(gauge.getValue()).isEqualTo(1L);
assertThat(gauge.getValue()).isEqualTo(NOT_AVAILABLE); assertThat(gauge.getValue()).isEqualTo(20L);
assertThat(gauges.getMetrics().keySet()) .containsOnly(TERMINATED_COUNT, NEW_COUNT, COUNT, TIMED_WAITING_COUNT, BLOCKED_COUNT, WAITING_COUNT, DAEMON_COUNT, RUNNABLE_COUNT, DEADLOCK_COUNT);
assertThat(emptySnapshot.getMean()) .isZero();
assertThat(snapshot.getValue(0.0)) .isEqualTo(1, offset(0.1));
assertThat(snapshot.getMax()) .isEqualTo(5);
assertThat(emptySnapshot.getMax()) .isZero();
assertThat(((Gauge) gauges.getMetrics().get(DEADLOCK_COUNT)).getValue()) .isEqualTo(1);
assertThat(snapshot.getMean()) .isEqualTo(3.0);
assertThat(snapshot.size()) .isEqualTo(5);
assertEquals(color1, color2);
assertNotEquals(color1, color2);
assertTrue(current>= MINIMUM_VALUE); assertTrue(minReached);
assertNotEquals(color1, color2);
assertEquals(DEFAULT_ICON_SIZE, node.getIconSize());
assertEquals(PhoneController.PHONE_VIEW, pageView);
assertEquals(HomeController.HOME_VIEW, homeView);
assertEquals(ServiceController.SERVICE_VIEW, pageView);
assertEquals(PageController.PAGE_VIEW, pageView);
assertEquals(HomeController.HOME_VIEW, homeView);
assertThat(byEmployee).containsOnly(ionelJanuary, ionelFebruary);
assertTrue(failedSum == MONEY_100Euro.getAmount().doubleValue());
assertThat(employee.fullName()).isEqualTo("XYZ ABC");
assertThat(employeeTo.getErrorCount()).isEqualTo(0L);
assertThat(resultTo.getJobExecutionResults()).hasSize(1); assertThat(jobExecutionResult.getStatus()).isEqualTo(BatchStatus.ABANDONED.toString()); assertThat(jobExecutionResult.getDuration()).isEqualTo(DURATION_IN_SECONDS * 1000);
assertThat(monthlyTaxForEmployees).containsOnly(ionelJanuary, ionelFebruary);
assertThat(payCheck.getJobExecutionId()).isEqualTo(jobExecutionId);
assertThat(successfulByTaxCalculation).isNull();
assertThat(jobExecutionResult.getDuration()).isNull();
assertThat(first10).hasSize(10); assertThat(first10.get(0).getEmail()).isEqualTo("john.smith0@gmail.com");
assertThat(employeeTo.getErrorCount()).isEqualTo(1L);
assertThat(searchedForReport.getId()).isEqualTo(report2.getId());
assertThat(value.getMonthlyReportPdf()).isEqualTo(expectedPdfBytes); assertThat(value.getYear()).isEqualTo(TEST_YEAR); assertThat(value.getMonth()).isEqualTo(TEST_MONTH); assertThat(value.getCalculationDate()).isNotNull();
assertThat(jobResult.getJobExecutionResults()).containsExactly(execution19, execution5, execution2);
assertThat("no error has been thrown").isNotEmpty();
assertThat(exitStatus).isEqualTo(ExitStatus.COMPLETED);
assertThat(jobExecution.getStatus()).isEqualTo(jobExecutionStatus);
assertThat(jobParameters.getLong("year")).isEqualTo(YEAR); assertThat(jobParameters.getLong("month")).isEqualTo(MONTH);
assertThat(exitStatus).isEqualTo(ExitStatus.FAILED);
assertThat(taxCalculation.getJobExecutionId()).isEqualTo(123L); assertThat(taxCalculation.getEmployee()).isEqualTo(employee); assertThat(taxCalculation.getYear()).isEqualTo(2014); assertThat(taxCalculation.getMonth()).isEqualTo(5); assertThat(taxCalculation.getTax()).isEqualTo(Money.of(CurrencyUnit.EUR, 10));
assertThat(employeeTo.getErrorCount()).isEqualTo(1L);
assertThat(pdfDocument) .containsText("WEBSERVICE RETURNS SUCCESS " + SUCCESS_AMOUNT + " euro"); assertThat(pdfDocument) .containsText("WEBSERVICE RETURNS FAILURE " + FAILED_AMOUNT + " euro"); assertThat(pdfDocument) .containsText("PERIOD: " + 5 + " " + TEST_YEAR);
assertThat(jobResults).hasSize(6);
assertThat(PDDocument.load(new ByteArrayInputStream(actual))) .containsText("cegeka-batchers is working");
assertThat(byTaxCalculation).isEqualsToByComparingFields(payCheck); assertThat(payCheck.getPayCheckPdf().length).isEqualTo(SIZE_10_MB);
assertThat(employeeTo.getErrorCount()).isEqualTo(0L);
assertThat(monthlyTaxForEmployee).isEqualsToByComparingFields(ionelJanuary);
assertThat(employeeTaxes).hasSize(1); assertThat(employeeTaxes.get(0).getStatus()).isEqualTo("IN PROGRESS"); assertThat(employeeTaxes.get(0).getYear()).isEqualTo(year); assertThat(employeeTaxes.get(0).getMonth()).isEqualTo(month); assertThat(employeeTaxes.get(0).getTax()).isEqualTo(tax);
assertThat(taxPaymentWebServiceFacade.callTaxService(taxCalculation, taxServiceCallResultCallable)) .isEqualTo(taxWebserviceCallResultValid);
assertThat(actualTaxWebserviceCallResult.isSuccessfulResponse()).isTrue();
assertThat(jobExecutionResult.getDuration()).isEqualTo(1000);
assertThat(totalAmountOfPaidTaxes).isEqualTo(Money.of(CurrencyUnit.EUR, 20.0));
assertThat(employeesSecondPage).hasSize(10); assertThat(employeesSecondPage.get(0).getEmail()).isEqualTo("john.smith10@gmail.com");
assertThat(actualMoney).isEqualTo(expectedMoney);
assertThat(actualResult).isEqualTo("1");
assertThat(taxWebserviceCallResult1.getTaxCalculation().getEmployee()).isEqualTo(employee);
assertThat(jobExecutionResult.getDuration()).isNull();
assertThat(successfulByTaxCalculation).isEqualTo(januaryTry2);
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR); assertThat(response.getBody().get("status").asText()).isEqualTo(TaxController.RESPONSE_BODY_FAIL);
assertThat(forJanuary).containsOnly(januaryTry1, januaryTry2); assertThat(forFebruary).containsOnly(februaryTry1);
assertThat(taxCalculationRepository.getUnprocessedEmployeeIds(2014L, 5L, 0L)).containsOnly( employee1.getId(), employee3.getId(), employee4.getId() );
assertThat(actualJSON).isEqualTo(expectedJSON);
assertThat(foundMarch).isEqualTo(march); assertThat(foundMarch.getMonthlyReportPdf().length).isEqualTo(SIZE_10MB); assertThat(foundApril).isEqualTo(april); assertThat(foundApril.getMonthlyReportPdf().length).isEqualTo(SIZE_10MB);
assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
assertTrue(successSum == MONEY_100Euro.getAmount().doubleValue());
assertThat(byYearAndMonth).containsOnly(gigelJanuary, ionelJanuary);
assertThat(jobResults.get(0).getJobExecutionResults().get(0).getEndTime()).isAfter(jobResults.get(0).getJobExecutionResults().get(1).getEndTime());
assertThat(cleanedLoggerName, not(containsString("%"))); assertThat(cleanedLoggerName, not(containsString("$"))); assertThat(cleanedLoggerName, not(containsString("&"))); assertThat(cleanedLoggerName, not(containsString("!"))); assertThat(cleanedLoggerName, containsString("_"));
assertEquals("Event(s) should have been correctly handled", 0, eventAdmin.getPostEvents().size());
assertEquals("Event(s) should have been correctly handled", 2, eventAdmin.getPostEvents().size());
assertEquals("Event(s) should have been correctly handled", 1, eventAdmin.getPostEvents().size());
assertThat(result.isErr()).isTrue(); assertThat(result.unwrapErrOrElseThrow().getType()).isEqualTo(SlackErrorType.RATE_LIMITED); assertThat(result.unwrapErrOrElseThrow().getError()).isEqualTo(SlackErrorType.RATE_LIMITED.key());
assertEquals("Failed to format an object.", String.format("MockType@%#x", or.uniqueID()), formatter.toString(or, options));
assertNotNull("Default options should never be null.", options); assertEquals("Default options for numeric formatter should have two options.", 2, options.size());
assertEquals("Should get the registered provider", context.getProvider(mockInterface), mockProvider); assertEquals("Should get the registered provider", context.getProvider(mockInterface), mockProvider);
assertNotNull("Should not return null on test method.", VariableUtils.getThisVariable(getStackFrame())); assertNull("Should return null on main method.", VariableUtils.getThisVariable(getSecondLevelStackFrame()));
assertEquals("Should be able to format string type.", "null", formatter.toString(null, options)); assertEquals("Should be able to format string type.", "null", formatter.toString(null, options));
assertFalse("Should not accept null type.", formatter.acceptType(null, new HashMap<>())); assertFalse("Should not accept Foo type.", formatter.acceptType(foo.referenceType(), new HashMap<>())); assertFalse("Should not accept String type.", formatter.acceptType(str.referenceType(), new HashMap<>())); assertFalse("Should not accept boolean type.", formatter.acceptType(boolVar.type(), new HashMap<>())); assertFalse("Should not accept Boolean type.", formatter.acceptType(boolVar.type(), new HashMap<>()));
assertEquals("Failed to format an object.", String.format("MockType@%#o", or.uniqueID()), formatter.toString(or, options));
assertEquals("Should be able to format boolean type.", "true", formatter.toString(boolVar, options)); assertEquals("Should be able to format boolean type.", "false", formatter.toString(boolVar, options));
assertEquals("Should be able to format string type.", "\\"s...\\"", formatter.toString(string, options)); assertEquals("Should be able to format string type.", "\\"st...\\"", formatter.toString(string, options)); assertTrue("Should not trim long string by default", formatter.toString(string, new HashMap<>()).contains(((StringReference) string).value()));
assertNotNull("Default options should never be null.", options); assertEquals("Default options for numeric formatter should have two options.", 1, options.size()); assertTrue("Should contains max string length.", options.containsKey(StringObjectFormatter.MAX_STRING_LENGTH_OPTION));
assertNull("Should return null for null formatter", formatter.valueOf("null", null, options)); assertNull("Should return null for null formatter", formatter.valueOf(null, null, options));
assertNull("Should return null for evaluating \\"null\\".", formatter.valueOf("null", or.referenceType(), new HashMap<>())); assertNull("Should return null for evaluating null.", formatter.valueOf(null, or.referenceType(), new HashMap<>()));
assertFalse("Should not accept null type.", formatter.acceptType(null, new HashMap<>())); assertFalse("Should not accept Foo type.", formatter.acceptType(foo.referenceType(), new HashMap<>())); assertFalse("Should not accept String type.", formatter.acceptType(str.referenceType(), new HashMap<>())); assertTrue("Should accept boolean type.", formatter.acceptType(boolVar.type(), new HashMap<>())); assertFalse("Should not accept Boolean type.", formatter.acceptType(boolVar.type(), new HashMap<>()));
assertEquals("Should be initial empty.", 0, cache.size()); assertEquals("Should be initial empty.", true, cache.isEmpty()); assertEquals("Should be the right size.", i+1, cache.size()); assertEquals("Should keep latest element.", 20000000 - 1, cache.get(String.valueOf(20000000-1))); assertFalse("Should not keep the obsolete element.", cache.containsKey(String.valueOf(20000000 - 101)));
assertNotNull("StringObjectFormatter should be able to create string.", newValue); assertEquals("Should create a String with right value.", "aaa", newValue.value()); assertNotNull("StringObjectFormatter should be able to create string.", newValue); assertEquals("Should create a String with right value.", "aaa", newValue.value()); assertNull("StringObjectFormatter should be able to create null string.", formatter.valueOf("null", string.type(), options)); assertNull("StringObjectFormatter should be able to create null string.", formatter.valueOf(null, string.type(), options));
assertEquals("Failed to format an object.", String.format("MockType@%d", or.uniqueID()), formatter.toString(or, new HashMap<>()));
assertTrue("Should accept any type.", formatter.acceptType(boolVar.type(), new HashMap<>())); assertTrue("Should accept any type.", formatter.acceptType(null, new HashMap<>())); assertTrue("Should accept any type.", formatter.acceptType(or.type(), new HashMap<>())); assertTrue("Should accept String type.", formatter.acceptType(str.referenceType(), new HashMap<>()));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("The split-position(=3) is outside of valid range [1...2]!", e.getMessage());
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("Ein Wert wird erwartet:", "/xml/OKW_Ini.xml", Actuell);
assertEquals(expected, actual);
assertEquals("AAAA", OKW_Helper.getLeftFromDelimiterNumber("AAAAGGBBBBGGDDDD", "GG", 1)); assertEquals("AAAAGGBBBB", OKW_Helper.getLeftFromDelimiterNumber("AAAAGGBBBBGGDDDD", "GG", 2));
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals( expected, actual);
assertEquals(expected, actual);
assertEquals( true, myProperties.getProperty2Boolean( "core.propertyDoesNotExist", "true" ) );
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals( "With DefaultValue P1: Param1", myProperties.getProperty( "ParamaterValues.One_Param_NotExist", "With DefaultValue P1: %P1%", "Param1" ) ); assertEquals( "With DefaultValue P1: Param1; P2: Param2", myProperties.getProperty( "ParamaterValues.Two_Params_1_NotExist", "With DefaultValue P1: %P1%; P2: %P2%", "Param1", "Param2" ) );
assertEquals(expected, actual);
assertEquals("The split-position(=3) is outside of valid range [1...2]!", e.getMessage());
assertEquals(expected, actual);
assertEquals("Delimiter is empty!", e.getMessage());
assertEquals( "", myProperties.getProperty( "ParamaterValues.One_Param_Notexists", null, "Param1" ) );
assertEquals("AAAA", OKW_Helper.getLeftFromDelimiterNumber("AAAACBBBB", "C", 1));
assertEquals( "P1: Param1", myProperties.getProperty( "ParamaterValues.One_Param", null, "Param1" ) ); assertEquals( "P1: Param1; P2: Param2", myProperties.getProperty( "ParamaterValues.Two_Params_1", null, "Param1", "Param2" ) ); assertEquals( "P2: Param2; P1: Param1", myProperties.getProperty( "ParamaterValues.Two_Params_2", null, "Param1", "Param2" ) );
assertEquals(expected, actual);
assertEquals( "Wert 1", myProperties.getProperty( "CombineValues.One_Value" ) ); assertEquals( "Wert 1; Wert 2", myProperties.getProperty( "CombineValues.Two_Values" ) );
assertEquals( expected, actual );
assertEquals("The split-position(=0) is outside of valid range [1...2]!", e.getMessage());
assertEquals( expected, actual );
assertEquals("Ein Wert wird erwartet:", "/OKW_XmlReaderTestXML.xml", Actuell);
assertEquals( lsDosPath, OKW_FileHelper.convertDirectorySeperator( lsUnixPath ) ); assertEquals( lsUnixPath, OKW_FileHelper.convertDirectorySeperator( lsDosPath ) );
assertEquals(expected, actual);
assertEquals("", OKW_Helper.removeBeginEndQuotations("\\"\\"")); assertEquals("A", OKW_Helper.removeBeginEndQuotations("\\"A\\"")); assertEquals("ABC", OKW_Helper.removeBeginEndQuotations("\\"ABC\\""));
assertEquals( expected, actual );
assertEquals( expected, actual );
assertEquals(">Locator1<", Locator_1.getLocator());
assertEquals( "L1", L1.getLocator() ); assertEquals( "L2", L2.getLocator() ); assertEquals( "L2=L2, L1=L1, L2=L2, L1=L1", Locator.getLocator() );
assertEquals("AAAA", OKW_Helper.getLeftFromDelimiterNumber("AAAACBBBBCDDDD", "C", 1));
assertEquals("AAAACBBBB", OKW_Helper.getLeftFromDelimiterNumber("AAAACBBBBCDDDD", "C", 2));
assertEquals( ">Locator1<", L1.getLocator() );
assertEquals(Expected, Actual);
assertEquals( "", myProperties.getProperty( "ParamaterValues.Two_Params_1_Notexists", null, "Param1", "Param2" ) );
assertEquals("\\"", OKW_Helper.removeBeginEndQuotations("\\"\\"\\"")); assertEquals("A\\"", OKW_Helper.removeBeginEndQuotations("\\"A\\"\\""));
assertEquals(expected, actual);
assertEquals("Fuchs \\"liebt\\" Hase", OKW_Helper.removeBeginEndQuotations("Fuchs \\"liebt\\" Hase")); assertEquals("Fuchs \\"liebt\\" Hase", OKW_Helper.removeBeginEndQuotations("\\"Fuchs \\"liebt\\" Hase\\""));
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("The split-position(=0) is outside of valid range [1...2]!", e.getMessage());
assertEquals("Delimiter is empty!", e.getMessage());
assertEquals( "Window.Child", Child.getLocator() ); assertEquals( "Window", Window.getLocator() );
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("L2=L2, L1=L1, L2=L2, L1=L1", Locator.getLocator());
assertEquals(expected, actual);
assertThat(stat.getNumChildren()).isZero(); assertThat(stat).isNotNull(); assertThat(stat.getNumChildren()).isZero();
assertEquals( sortedString("d1", "d2"), sortedString(items) );
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(4, validIndexes.length); assertEquals(0, validIndexes[0]); assertEquals(1, validIndexes[1]); assertEquals(7, validIndexes[2]); assertEquals(8, validIndexes[3]);
assertNull(ConverterUtils.toString((ContainerId)null));
assertNotNull(NetUtils.getLocalInetAddress("127.0.0.1")); assertNull(NetUtils.getLocalInetAddress("invalid-address-for-test")); assertNull(NetUtils.getLocalInetAddress(null));
assertTrue(isThrottleException(exceededException)); assertTrue(isThrottleException(ddb));
assertArrayEquals(write, read);
assertEquals("Should have committed no uploads: " + jobCommitter, 0, results.getCommits().size()); assertEquals("Should have deleted no uploads: " + jobCommitter, 0, results.getDeletes().size()); assertEquals("Should have aborted all uploads: " + jobCommitter, uploads, getAbortedIds(results.getAborts()));
assertFalse(fencer.fence(MOCK_TARGET));
assertNotNull(map.get(bpid, 1234)); assertNotNull(map.get(bpid, 5678));
assertEquals(1, appsInA1.size());
assertEquals("4000", conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS)); assertEquals("200", conf.get(YarnConfiguration.TIMELINE_SERVICE_TTL_MS)); assertEquals(0, e.status);
assertEquals(2, getLinkCount(x1)); assertEquals(2, getLinkCount(x2)); assertEquals(2, getLinkCount(x3)); assertEquals(2, getLinkCount(x1_mult)); assertEquals(2, getLinkCount(x2_mult)); assertEquals(2, getLinkCount(x3_mult)); assertTrue(fetchFileContents(x1_mult).equals(str1 + str3)); assertTrue(fetchFileContents(x1).equals(str1 + str3));
assertSame(weakInternLiteralABC, weakInternSubstringABC); assertSame(weakInternLiteralABC, weakInternHeapABC); assertSame(weakInternSubstringABC, weakInternHeapABC);
assertTrue("should throw!", false); assertEquals("Bad configuration of " + CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH + " at unkn@own:/x/y", e.getMessage());
assertEquals(1, qc1.getNameSpace()); assertEquals(512, qc1.getStorageSpace()); assertEquals(5, qc1.getTypeSpace(type));
assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertThat(rpm.isConfiguredResourceName(resourceName)).isFalse(); assertThat(rpm.isConfiguredResourceName(resourceName)).isTrue();
assertTrue(proxy.notify(request).getAccepted()); assertNotNull(set); assertEquals(0, set.size()); assertEquals( "NM upload metrics aren\'t updated.", 1, SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);
assertEquals("DataChecksum(type=CRC32, chunkSize=512)", DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512).toString());
assertEquals(USER_1_SHORT_NAME, user.getUserName()); assertEquals(stagingPath, JobSubmissionFiles.getStagingDir(cluster, conf, user));
assertEquals("No groups should be returned", expResult, result); assertEquals("No groups should be returned", expResult, result); assertEquals("No groups should be returned", expResult, result);
assertTrue("testRenameWithFalse invalid IOExceptionMessage error !!!", ex .getMessage().startsWith(ERROR_MESSAGE));
assertEquals(false, instance.contains(entry)); assertEquals(true, instance.contains(entry)); assertEquals(false, instance.contains(entry + entry));
assertFalse("-a switch wasn\'t provided but async scheduling option is true", conversionOptions.isEnableAsyncScheduler());
assertEquals("job_0_0000", MRApps.toString(jid));
assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler memory")); assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler vcores"));
assertTrue(ml.includes("10.119.103.112")); assertFalse(ml.includes("10.119.103.111"));
assertThat(report.getApplicationId()).isEqualTo(appId); assertThat(report.getAppNodeLabelExpression()). isEqualTo("test_node_label"); assertThat(report.getYarnApplicationState()). isEqualTo(YarnApplicationState.FINISHED);
assertEquals(DFSNetworkTopology.class, dm1.getNetworkTopology().getClass()); assertEquals(NetworkTopology.class, dm2.getNetworkTopology() .getClass()); assertEquals(MockDfsNetworkTopology.class, dm3.getNetworkTopology() .getClass()); assertEquals(MockDfsNetworkTopology.class, dm4.getNetworkTopology() .getClass());
assertEquals("enqueueTime=10 queueTime=20000 handlerTime=0 " + "processingTime=0 lockfreeTime=0 lockwaitTime=0 locksharedTime=0 " + "lockexclusiveTime=0 responseTime=0", details.toString());
assertEquals(2, updateQueueInfo.size());
assertNull("The hostname translation did return null when the principal is " + "missing from the conf: " + result, result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/yourhost@REALM", result);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect response:", null, response2);
assertNotNull("close didn\'t fail", actualEx); assertEquals(expectedEx, actualEx);
assertEquals( sortedString("d1/f1", "d1/f1.1", "d1/f2"), sortedString(items) );
assertEquals(firstValidInput, inputs[8]);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(1, fileSchemeCount);
assertEquals(EXIT_SUCCESS, result);
assertEquals(-1, qc1.getNameSpace()); assertEquals(-512, qc1.getStorageSpace()); assertEquals(-5, qc1.getTypeSpace(type));
assertNull(simpleSet.addOrReplace(entry)); assertEquals(entry, simpleSet.addOrReplace(entry)); assertNull(intSet.addOrReplace(i)); assertEquals(i, intSet.addOrReplace(i).intValue());
assertNotNull("ClientProtocol is expected", testCluster.getClient());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, apps.length()); assertEquals("incorrect number of elements", MAX_APPS, array.length());
assertEquals(0, e.status);
assertEquals(SingleCounterPage.class, appController.getClazz());
assertThat(lm.countPath(), is(1L)); assertThat(lm.countPath(), is(2L)); assertThat(lm.countPath(), is(2L)); assertThat(lm.countPath(), is(2L)); assertThat(lm.countPath(), is(2L)); assertThat(lm.countPath(), is(2L)); assertThat(lm.countPath(), is(1L));
assertEquals(fileStatus1, fileStatus2);
assertEquals(contenTypeActual, ConfServlet.parseAcceptHeader(request));
assertEquals("Status reponse don\'t match", " Service " + appName + " not found", result);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysFailFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysFailFencer.fencedSvc); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals("foo", AlwaysFailFencer.callArgs.get(0)); assertEquals("bar", AlwaysSucceedFencer.callArgs.get(0));
assertTrue(fs.exists(dst)); assertFalse(fs.exists(new Path(dst, "a"))); assertTrue(fs.exists(new Path(dst, "a"))); assertEquals(len, fs.getFileStatus(new Path(dst, "a")).getLen());
assertEquals("path", uri.toString()); assertEquals("/path", uri.toString());
assertTrue(stdout.toByteArray().length == 0); assertTrue(strErr.contains("unrecognized option"));
assertEquals("bob", RegistryPathUtils .getUsername("/registry/users/bob/services/yarn-service/test1/")); assertEquals("bob-dev", RegistryPathUtils .getUsername("/registry/users/bob-dev/services/yarn-service/test1")); assertEquals("bob.dev", RegistryPathUtils .getUsername("/registry/users/bob.dev/services/yarn-service/test1"));
assertThat(configurableResource.getResource().getMemorySize()). isEqualTo(3072); assertThat(configurableResource.getResource().getVirtualCores()). isEqualTo(3); assertEquals( configurableResource.getResource(clusterResource).getMemorySize(), 3072); assertEquals( configurableResource.getResource(clusterResource).getVirtualCores(), 3); assertThat(configurableResource.getResource(null).getMemorySize()). isEqualTo(3072); assertThat(configurableResource.getResource(null).getVirtualCores()). isEqualTo(3);
assertFalse("Added an integer as a service", addIfService(notAService)); assertTrue("Unable to add a service", addIfService(service)); assertEquals("Incorrect number of services", 1, testService.getServices().size());
assertTrue((errors + " methods were not overridden correctly - see" + " log"), errors <= 0);
assertTrue(staleCkptFile.exists()); assertFalse(staleCkptFile.exists());
assertTrue(cluster.getDataNodes().get(0).isConnectedToNN( cluster.getNameNode().getServiceRpcAddress())); assertFalse(cluster.getDataNodes().get(0).isConnectedToNN( cluster.getNameNode().getServiceRpcAddress()));
assertEquals(testPattern.pattern(), configuration.getPattern("testPattern", Pattern.compile("")).pattern());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect COMMIT3Response:", null, response2);
assertEquals("The getAllTaskTypes method did not return the expected " + "string", "(m|r|s|c|t)", TaskID.getAllTaskTypes());
assertEquals(deletionTask, info.getTask()); assertEquals(successorTaskIds, info.getSuccessorTaskIds()); assertEquals(delTime, info.getDeletionTimestamp());
assertThat("Missing scheme should produce local file paths", getLocalTaskAttemptTempDir(config, jobUUID, tac.getTaskAttemptID()).toString(), StringStartsWith.startsWith(commonPath));
assertEquals("volume", dockerVolumeCommand.getCommandOption());
assertEquals("attempt_0_0000_m_000000_0", MRApps.toString(taid));
assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(12345, addr.getPort()); assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(1000, addr.getPort());
assertTrue(checker.schedule(target1, true).isPresent()); assertTrue(checker.schedule(target1, false).isPresent());
assertEquals(false, instance.remove("apa")); assertEquals(true, instance.remove("apa"));
assertFalse(ml.includes("10.241.22.255")); assertTrue(ml.includes("10.241.23.0")); assertTrue(ml.includes("10.241.23.1")); assertTrue(ml.includes("10.241.23.254")); assertTrue(ml.includes("10.241.23.255")); assertFalse(ml.includes("10.241.24.0")); assertFalse(ml.includes("10.119.103.111"));
assertEquals("Number of devices", 1, devices.size()); assertEquals("Device ID", 0, device.getId()); assertEquals("Major number", 8, device.getMajorNumber()); assertEquals("Minor number", 1, device.getMinorNumber()); assertEquals("Status", "ONLINE", device.getStatus()); assertTrue("Device is not healthy", device.isHealthy());
assertEquals(templateTime, time,30);
assertEquals(0, duDoesNotExist); assertEquals(duNotADirectoryExpected, duNotADirectoryActual); assertNull(ie); assertFalse(FileUtil.canRead(notADirectory)); assertEquals(expected, du3); assertNull(ie); assertFalse(FileUtil.canRead(partitioned)); assertEquals(0, du4);
assertTrue(groups.size() == 3); assertTrue(groups.contains("23")); assertTrue(groups.contains("groupname")); assertTrue(groups.contains("zzz"));
assertEquals(status, DockerCommandExecutor.getContainerStatus( MOCK_CONTAINER_ID, mockExecutor, nmContext));
assertNull("The hostname translation did return null when the principal is " + "missing from the conf: " + result, result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/yourhost@REALM", result);
assertNotNull(record);
assertArrayEquals( new long[] { 2, 2, 1, 11, 111, 2, 22, 222, -1, -1, -1, 3, 33, 333, ReplicaState.RBW.getValue(), 4, 44, 444, ReplicaState.RWR.getValue() }, blocks.getBlockListAsLongs());
assertEquals(0, runTool("-help")); assertEquals(0, runTool("-help", "transitionToActive"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType()); assertNotNull(entities2); assertEquals(entities1, entities2);
assertTrue(emptyException);
assertEquals("one", StringUtils.replaceTokens("$FOO", pattern, replacements)); assertEquals("two", StringUtils.replaceTokens("$BAZ", pattern, replacements)); assertEquals("", StringUtils.replaceTokens("$BAR", pattern, replacements)); assertEquals("", StringUtils.replaceTokens("", pattern, replacements)); assertEquals("one-two-three", StringUtils.replaceTokens("$NUMBERS123", pattern, replacements)); assertEquals("___", StringUtils.replaceTokens("$UNDER_SCORES", pattern, replacements));
assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM) );
assertTrue(x instanceof NoDefaultCtor);
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertThat(new TeraSort().run(args)).isEqualTo(2);
assertEquals("foo", getContent(baseUrl +"test/foo").trim()); assertEquals(port, app1.getListenerAddress().getPort()); assertTrue(app2.getListenerAddress().getPort() > port); assertEquals(port, app3.getListenerAddress().getPort()); assertEquals(46000, app4.getListenerAddress().getPort()); assertTrue(app5.getListenerAddress().getPort() > 46000);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue(targetFile.exists());
assertTrue(ml.includes("1.2.3.4")); assertFalse(ml.includes("1.2.3.5"));
assertEquals(false, instance.retainAll(list)); assertEquals(2, instance.size()); assertEquals(true, instance.retainAll(list2)); assertEquals(1, instance.size());
assertEquals(0, invocationHandler.getCloseCalled()); assertEquals(1, invocationHandler.getCloseCalled());
assertEquals(one, two);
assertEquals(NODE, sConstraint.getScope()); assertEquals(0, sConstraint.getMinCardinality()); assertEquals(0, sConstraint.getMaxCardinality()); assertEquals(1, sConstraint.getTargetExpressions().size()); assertEquals("java", tExpr.getTargetKey()); assertEquals(TargetType.NODE_ATTRIBUTE, tExpr.getTargetType()); assertEquals(1, tExpr.getTargetValues().size()); assertEquals("1.8", tExpr.getTargetValues().iterator().next());
assertEquals(l(), finalDestination(l(MAGIC, BASE)));
assertTrue("NodeGroup should be NodeBase.ROOT for empty location", res.equals(NodeBase.ROOT)); assertTrue("Null Network Location should throw exception!", e.getMessage().contains("Network Location is null"));
assertNotNull("RequestLog should not be null", requestLog); assertEquals("Class mismatch", CustomRequestLog.class, requestLog.getClass());
assertEquals("Number of devices", 1, devices.size()); assertEquals("Device ID", 0, device.getId()); assertEquals("Major number", 8, device.getMajorNumber()); assertEquals("Minor number", 1, device.getMinorNumber()); assertEquals("Status", "Unknown (5)", device.getStatus()); assertFalse("Device should not be healthy", device.isHealthy());
assertEquals("Attempts for " + taskId , appController.getProperty().get("title")); assertEquals(TaskPage.class, appController.getClazz());
assertEquals(STATE.INITED, webAppProxy.getServiceState()); assertEquals(bindHost + ":" + port, ((WebAppProxy) service).getBindAddress()); assertEquals(STATE.STARTED, webAppProxy.getServiceState());
assertTrue(e instanceof IllegalArgumentException); assertEquals(e.getMessage(), "The value of property testClassName must not be null");
assertTrue(socket.isBound());
assertEquals(1, zkAuths.size()); assertEquals("a_scheme", zkAuthInfo.getScheme()); assertArrayEquals("a_password".getBytes(), zkAuthInfo.getAuth());
assertEquals(write, read);
assertTrue(msg, msg.contains("Trying to use aborted output stream"));
assertTrue(bytesRead > 0 && bytesRead <= n); assertThat(new String(buf, 0, bytesRead), is(TEST_STRING.substring(i, i + bytesRead)));
assertEquals("myCipher", options.getCipher()); assertEquals(512, options.getBitLength()); assertEquals("yourCipher", options.getCipher()); assertEquals(128, options.getBitLength()); assertEquals("description", options.getDescription()); assertEquals(attributes, options.getAttributes()); assertEquals(KeyProvider.DEFAULT_CIPHER, options.getCipher()); assertEquals(KeyProvider.DEFAULT_BITLENGTH, options.getBitLength());
assertEquals("Premature EOF from inputStream " + "after skipping 1 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 5 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 0 byte(s).",e.getMessage());
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("Wrong output path from " + sc, HDFS_PATH, sc.getOutputPath());
assertTrue("root.admins.alice preemption setting", csConfig.getBoolean(PREFIX + "root.admins.alice.disable_preemption", false)); assertTrue("root.users.joe preemption setting", csConfig.getBoolean(PREFIX + "root.users.joe.disable_preemption", false));
assertEquals(userStagingPath.toString(), appMaster.stagingDirPath.toString());
assertEquals(EXIT_SUCCESS, result);
assertTrue("cgroup dir should be cerated", cgroup.mkdirs()); assertTrue("Unexpected PrivilegedOperationException from mock!", false); assertTrue("Unexpected ResourceHandler Exception!", false);
assertEquals(newValue, wrapped.get(key));
assertEquals(MediaType.APPLICATION_XML+ "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, nodes.getLength());
assertEquals(RetryDecision.FAIL, caughtRetryAction.action); assertEquals(RetryUpToMaximumCountWithFixedSleep.constructReasonString( maxRetries), caughtRetryAction.reason);
assertEquals(0, adminCLI.run(args)); assertEquals(1, adminCLI.run(args));
assertEquals(0, aux.getServices().size()); assertEquals(0, aux.getServices().size()); assertEquals(0, aux.getServices().size()); assertEquals(2, aux.getServices().size()); assertEquals(0, aux.getServices().size()); assertEquals(2, aux.getServices().size());
assertEquals(expected, actual);
assertEquals(USER_1, user.getUserName()); assertEquals(stagingPath, JobSubmissionFiles.getStagingDir(cluster, conf, user));
assertEquals(numLocations, locations.size()); assertEquals(1, successLocations.size()); assertEquals(0, successLocations.size());
assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertEquals("ns1", DFSUtil.getOnlyNameServiceIdOrNull(conf));
assertEquals(ugi, UserGroupInformation.getLoginUser());
assertEquals(originalEx, interceptedEx);
assertNotNull(NetUtils .bindToLocalAddress(NetUtils.getLocalInetAddress("127.0.0.1"), false)); assertNull(NetUtils .bindToLocalAddress(NetUtils.getLocalInetAddress("127.0.0.1"), true));
assertTrue("The new file already exists!", !existsBefore); assertTrue("The new aggregate file is not successfully created", existsAfter);
assertEquals(1, goodCount.get()); assertEquals(1, badCount.get()); assertEquals(2, goodCount.get()); assertEquals(1, badCount.get());
assertTrue("Conf didn\'t get key " + key1, res.containsKey(key1)); assertTrue("Conf didn\'t get key " + key2, res.containsKey(key2)); assertTrue("Picked out wrong key " + key3, !res.containsKey(key3)); assertTrue("Picked out wrong key " + key4, !res.containsKey(key4));
assertEquals(numLocations, storage.getNumStorageDirs()); assertEquals(0, storage.getNumStorageDirs());
assertTrue(olf1.isPresent()); assertFalse(olf2.isPresent());
assertEquals("last update in " + pm, 100L, pm.getLastUpdated());
assertNotNull(e); assertTrue(e instanceof JobCommitCompletedEvent); assertTrue(startCommitFile.toString(), fs.exists(startCommitFile)); assertTrue(endCommitSuccessFile.toString(), fs.exists(endCommitSuccessFile)); assertFalse(endCommitFailureFile.toString(), fs.exists(endCommitFailureFile));
assertNotNull(metricsSystem.getSource(rpcMetrics.name())); assertNotNull(metricsSystem.getSource(rpcDetailedMetrics.name())); assertNull(metricsSystem.getSource(rpcMetrics.name())); assertNull(metricsSystem.getSource(rpcDetailedMetrics.name()));
assertEquals(1, getLinkCount(x1)); assertEquals(1, getLinkCount(x2)); assertEquals(1, getLinkCount(x3));
assertEquals(EXIT_SUCCESS, result);
assertTrue(ApplicationEntity.isApplicationEntity(te)); assertEquals(false, ApplicationEntity.isApplicationEntity(te)); assertEquals(false, ApplicationEntity.isApplicationEntity(te));
assertEquals("configuration with empty string value, should use aocl", "aocl", openclPlugin.getPathToExecutable());
assertEquals(write, read);
assertTrue(!validation.hasCorruptHeader()); assertEquals(HdfsServerConstants.INVALID_TXID, validation.getEndTxId());
assertEquals("kill", StringUtils.join(",", dockerKillCommand.getDockerCommandWithArguments() .get("docker-command"))); assertEquals("foo", StringUtils.join(",", dockerKillCommand.getDockerCommandWithArguments().get("name"))); assertEquals("SIGUSR2", StringUtils.join(",", dockerKillCommand.getDockerCommandWithArguments().get("signal"))); assertEquals(3, dockerKillCommand.getDockerCommandWithArguments().size());
assertFalse(ml.includes(null));
assertEquals(names.size(), result.size()); assertEquals(NetworkTopology.DEFAULT_RACK, result.get(0)); assertEquals(NetworkTopology.DEFAULT_RACK, result.get(1));
assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));
assertTrue((Boolean)method.invoke(ugi, now)); assertFalse((Boolean)method.invoke(ugi, now)); assertTrue((Boolean)method.invoke(ugi, now)); assertFalse((Boolean)method.invoke(ugi, now));
assertEquals(0, ToolRunner.run(halr, args));
assertTrue(test.equals(SimpleWritable.class));
assertTrue(fencer.tryFence(TEST_TARGET, "echo")); assertFalse(fencer.tryFence(TEST_TARGET, "exit 1")); assertFalse(fencer.tryFence(TEST_TARGET, "xxxxxxxxxxxx"));
assertThat(averageRecordLatency).describedAs("Average time for getting latency records should be bounded") .isBetween(minLatencyWhenDisabledMs, maxLatencyWhenDisabledMs);
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.CONCAT, Feature.RESERVED_REL1_2_0.getInfo().getLayoutVersion()));
assertEquals("Should return hostname when FQDN is specified", "hadoop01", StringUtils.simpleHostname("hadoop01.domain.com")); assertEquals("Should return hostname when only hostname is specified", "hadoop01", StringUtils.simpleHostname("hadoop01")); assertEquals("Should not truncate when IP address is passed", "10.10.5.68", StringUtils.simpleHostname("10.10.5.68"));
assertNull(map.remove(bpid, b)); assertNull(map.remove(bpid, b)); assertNotNull(map.remove(bpid, block)); assertNull(map.remove(bpid, 0)); assertNotNull(map.remove(bpid, block.getBlockId()));
assertEquals(rootTestDir, f);
assertTrue(stats != null && stats.length == 1 && stats[0] == stat);
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains("Invalid options. " + "Can only accept one of show_application_log_info/" + "show_container_log_info.")); assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains("Invalid options. " + "Can only accept one of log_files/" + "log_files_pattern."));
assertEquals(ServerWebApp.getHomeDir("TestServerWebApp0"), "/tmp"); assertEquals(ServerWebApp.getDir("TestServerWebApp0", ".log.dir", "/tmp/log"), "/tmp/log"); assertEquals(ServerWebApp.getDir("TestServerWebApp0", ".log.dir", "/tmp/log"), "/tmplog");
assertNull(preStart);
assertTrue("Number of Open files should not exceed the configured " + "value!-Not Expected", listenerList.size() <= maxOpenFiles); assertTrue("Number of Open files should not exceed the configured " + "value!-Not Expected", listenerList.size() <= maxOpenFiles);
assertEquals(SingleCounterPage.class, appController.getClazz()); assertNotNull(appController.getProperty().get(AppController.COUNTER_GROUP)); assertNotNull(appController.getProperty().get(AppController.COUNTER_NAME));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(bc.getAction(), bc2.getAction()); assertEquals(bc.getBlocks().length, bc2.getBlocks().length); assertEquals(blocks[i], blocks2[i]); assertEquals(dnInfos.length, dnInfos2.length); assertEquals(d1.length, d2.length);
assertThat(masterHostname).isEqualTo("bar.com");
assertTrue( "Expected map:" + slowPeers + ", got map:" + slowPeersConverted1.getSlowPeers(), slowPeersConverted1.equals(slowPeers)); assertTrue( "Expected empty map:" + ", got map:" + slowPeersConverted2, slowPeersConverted2.equals(SlowPeerReports.EMPTY_REPORT));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertThat(report.getContainerId()).isEqualTo(containerId); assertThat(report.getAssignedNode().getHost()).isEqualTo("test host"); assertThat(report.getAssignedNode().getPort()).isEqualTo(100); assertThat(report.getAllocatedResource().getVirtualCores()).isEqualTo(8); assertThat(report.getCreationTime()).isEqualTo(123456);
assertEquals(CLIENT_CONFIG_PATH, StringUtils.join(",", dockerRunCommand.getDockerCommandWithArguments().get("docker-config")));
assertEquals(ID, proto.getId()); assertEquals(USER, proto.getUser()); assertEquals(SUBDIR, new Path(proto.getSubdir())); assertEquals(BASEDIR, new Path(proto.getBasedirs(0))); assertEquals(1, proto.getBasedirsCount());
assertTrue(e instanceof AccessControlException);
assertTrue(appsInDefault.contains(application_0.getApplicationAttemptId())); assertTrue(appsInDefault.contains(application_1.getApplicationAttemptId())); assertEquals(2, appsInDefault.size());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals(null, AlwaysSucceedFencer.callArgs.get(0));
assertEquals("No. of devices", 1, allocated.size()); assertSame("Device", device, allocatedDevice);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(names.size(), result.size()); assertEquals("/rack1", result.get(0)); assertEquals("/rack2", result.get(1));
assertNull(numaResourceHandler.preStart(mockContainer));
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(String.format("Expected minimum compatible layout version " + "%d for feature %s.", baseLV, f), baseLV, f.getInfo().getMinimumCompatibleLayoutVersion()); assertEquals(String.format("Expected feature %s to have minimum " + "compatible layout version set to itself.", f), f.getInfo().getLayoutVersion(), f.getInfo().getMinimumCompatibleLayoutVersion());
assertNotNull("example.com exists:", records);
assertNotNull(clazz);
assertTrue(streams.isEmpty());
assertEquals(0, h.nestLevel);
assertEquals(10, fcq.remainingCapacity());
assertTrue(fs.exists(dst)); assertTrue(fs.exists(new Path(dst, "a")));
assertEquals("Input must match output", DATA1, result);
assertArrayEquals(expectedNames, extractClassNames(classes1)); assertArrayEquals(expectedNames, extractClassNames(classes2));
assertEquals(RetryDecision.FAIL, caughtRetryAction.action); assertEquals(RetryUpToMaximumTimeWithFixedSleep.constructReasonString( maxTime, TimeUnit.NANOSECONDS), caughtRetryAction.reason);
assertTrue(srcFile.exists()); assertTrue(!targetFile.exists()); assertTrue(!srcFile.exists()); assertTrue(targetFile.exists()); assertTrue(srcFile.exists()); assertTrue(!srcFile.exists()); assertTrue(targetFile.exists()); assertTrue(srcFile.exists()); assertTrue(obstacle.exists()); assertTrue(targetFile.exists() && targetFile.isDirectory()); assertTrue(false); assertTrue(srcFile.exists()); assertTrue(targetFile.exists() && targetFile.isDirectory()); assertTrue(obstacle.exists());
assertTrue(localFs.exists(path)); assertTrue(localFs.getFileStatus(path).isDirectory()); assertThat(((SFTPFileSystem) sftpFs).getConnectionPool().getLiveConnCount(), is(1));
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains( "options parsing failed: Unrecognized option: -InvalidOpts"));
assertTrue("Cgroups mount point does not exist", new File( cgroupsMount).exists()); assertTrue(new File(cgroupsMount, controller).exists()); assertTrue(controller + " cgroup not mounted", new File( cgroupsMount + "/" + controller + "/tasks").exists()); assertTrue(controller + " cgroup hierarchy not created", new File(cgroupsMount + "/" + controller + "/" + hierarchy).exists()); assertTrue(controller + " cgroup hierarchy created incorrectly", new File(cgroupsMount + "/" + controller + "/" + hierarchy + "/tasks").exists());
assertTrue(containerExecutor.reapContainer(builder.build()));
assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/yourhost@REALM", result);
assertEquals(1, copyOfCopy.getNewClasses());
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name()); assertEquals(3, dockerCommands.size()); assertEquals("[docker-command-execution]", dockerCommands.get(0)); assertEquals(" docker-command=load", dockerCommands.get(1)); assertEquals(" image=" + MOCK_LOCAL_IMAGE_NAME, dockerCommands.get(2));
assertEquals(result, actual);
assertEquals(source, unmarshalled);
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertEquals("p1", kp.createKey("test4", new Options(conf)).getName()); assertTrue(e instanceof NoSuchAlgorithmException); assertEquals("p3", kp.createKey("test2", new Options(conf)).getName()); assertEquals("p1", kp.createKey("test3", new Options(conf)).getName());
assertFalse(qjm.hasSomeData()); assertTrue(qjm.hasSomeData());
assertTrue(validation.hasCorruptHeader());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
assertTrue("10.113.221.222 is not in the list", cipl.isIn("10.113.221.222")); assertTrue ("10.222.103.121 is not in the list", cipl.isIn("10.222.103.121")); assertFalse("10.113.221.222 is in the list", cipl.isIn("10.113.221.222")); assertFalse ("10.222.103.121 is in the list", cipl.isIn("10.222.103.121"));
assertEquals(path, meta.getPath()); assertNotNull(meta.getListing()); assertFalse(meta.getListing().isEmpty()); assertTrue(meta.getListing().contains(pathMeta1)); assertTrue(meta.getListing().contains(pathMeta2)); assertTrue(meta.getListing().contains(pathMeta3)); assertFalse(meta.isAuthoritative()); assertFalse(meta.getListing().contains(pathMeta1)); assertNull(meta.get(pathMeta1.getFileStatus().getPath()));
assertTrue("testCharAt error1 !!!", text.charAt(i) == line.charAt(i)); assertEquals("testCharAt error2 !!!", -1, text.charAt(-1)); assertEquals("testCharAt error3 !!!", -1, text.charAt(100));
assertEquals(2, nullIndexes[0]); assertEquals(3, nullIndexes[1]); assertEquals(4, nullIndexes[2]); assertEquals(5, nullIndexes[3]); assertEquals(6, nullIndexes[4]);
assertEquals(RetryDecision.FAIL, caughtRetryAction.action); assertEquals("try once and fail.", caughtRetryAction.reason);
assertEquals(b, b1); assertEquals(b, b1);
assertTrue("Creating empty dst file", DST_FILE.createNewFile()); assertTrue("Empty file still exists", DST_FILE.exists()); assertEquals("", DFSTestUtil.readFile(DST_FILE)); assertEquals(TEST_STRING, readBackData);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(SUBDIR, deletionTask.getSubDir());
assertEquals(0, rmAdminCLI.run(args));
assertEquals(expected, quotaUsage.toString());
assertTrue(groups.isEmpty());
assertTrue(checker.schedule(target1, true).isPresent()); assertFalse(checker.schedule(target1, true).isPresent());
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertTrue(Path.isWindowsAbsolutePath("C:\\\\test", false)); assertTrue(Path.isWindowsAbsolutePath("C:/test", false)); assertTrue(Path.isWindowsAbsolutePath("/C:/test", true)); assertFalse(Path.isWindowsAbsolutePath("/test", false)); assertFalse(Path.isWindowsAbsolutePath("/test", true)); assertFalse(Path.isWindowsAbsolutePath("C:test", false)); assertFalse(Path.isWindowsAbsolutePath("/C:test", true));
assertThat(reports.size(), is(3)); assertTrue(isNodeInReports(reports, "node1")); assertTrue(isNodeInReports(reports, "node2")); assertTrue(isNodeInReports(reports, "node4")); assertFalse(isNodeInReports(reports, "node3"));
assertNotNull(hostname);
assertEquals( "Access denied: User user does not have permission to view job job_01_01", appController.getData()); assertEquals( "Access denied: User user does not have permission to view job job_01_01", appController.getData()); assertEquals("Bad request: missing task-type.", appController.getProperty() .get("title")); assertEquals("Bad request: missing attempt-state.", appController .getProperty().get("title")); assertEquals(AttemptsPage.class, appController.getClazz());
assertEquals("Not throwing the expected exception.", "Exception in closing the stream", e.getMessage());
assertEquals(Float.POSITIVE_INFINITY, ratio, 0.00001);
assertTrue(socket.isBound());
assertEquals(1, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress)); assertEquals(2, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress));
assertEquals(info.getClusterID(), info2.getClusterID()); assertEquals(info.getCTime(), info2.getCTime()); assertEquals(info.getLayoutVersion(), info2.getLayoutVersion()); assertEquals(info.getNamespaceID(), info2.getNamespaceID());
assertTrue(cache.checkTotalMemoryUsed());
assertThat(returned.getQueueChildren().size()) .withFailMessage("QueueInfo children weren\'t properly converted") .isEqualTo(1);
assertFalse(writeLock.tryLock()); assertFalse(readLock.tryLock()); assertFalse(locked.get());
assertEquals(inMap.size(), outMap.size()); assertTrue(outMap.containsKey(e.getKey())); assertEquals(0, ((WritableComparable) outMap.get(e.getKey())).compareTo( e.getValue())); assertTrue(copyOfMapOfMaps.containsKey(maps[i])); assertEquals(a.size(), b.size()); assertTrue(b.containsKey(key)); assertEquals(0, aValue.compareTo(bValue));
assertTrue("Invalid on-disk size", duSize >= writtenSize && writtenSize <= (duSize + slack)); assertTrue("Invalid on-disk size", duSize >= writtenSize && writtenSize <= (duSize + slack)); assertTrue("Invalid on-disk size", duSize >= writtenSize && writtenSize <= (duSize + slack));
assertEquals("map1 entries don\'t match map2 entries", map1, map2); assertTrue( "map2 doesn\'t have class information from map1", map2.classToIdMap.containsKey(Text.class) && map2.idToClassMap.containsValue(Text.class));
assertEquals(names.size(), result.size()); assertEquals(result.get(0), NetworkTopology.DEFAULT_RACK); assertEquals(result.get(1), NetworkTopology.DEFAULT_RACK);
assertThat(estimator.getCount()).isZero(); assertThat(estimator.getSampleCount()).isZero(); assertThat(estimator.snapshot()).isNull();
assertEquals("host", SecurityUtil.getHostFromPrincipal("service/host@realm")); assertEquals(null, SecurityUtil.getHostFromPrincipal("service@realm"));
assertEquals(key + " " + expectedResult, result);
assertTrue("The thrown exception is not the expected one.", e .getMessage().startsWith("Invalid resource scheduler memory"));
assertEquals(shouldNotReplace, SecurityUtil.getServerPrincipal(shouldNotReplace, notUsed));
assertFalse(Result.PASS.equals(Result.FAIL)); assertFalse(Result.PASS.equals(Result.STOP)); assertFalse(Result.FAIL.equals(Result.PASS)); assertFalse(Result.FAIL.equals(Result.STOP)); assertFalse(Result.STOP.equals(Result.PASS)); assertFalse(Result.STOP.equals(Result.FAIL));
assertEquals(JobConfPage.class, appController.getClazz());
assertEquals(4, col.size()); assertTrue(col.containsAll(Arrays.asList(new String[]{"foo","bar","baz","blah"})));
assertEquals(pathList, argsList);
assertEquals(-1L, interval);
assertEquals(i, f.getStoragePolicyID());
assertArrayEquals(help, test.getHelp());
assertEquals(expected.getStatus(), actual.getStatus());
assertTrue("expected remaining: " + (fileSize - bytesRead) + " but got: " + available, (fileSize - bytesRead) == available); assertTrue(inputStream.available() == 0);
assertEquals(DeletionTaskType.FILE, deletionTask.getDeletionTaskType()); assertEquals(id, deletionTask.getTaskId());
assertEquals("inspect", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments() .get("docker-command"))); assertEquals("{{range(.NetworkSettings.Networks)}}" + "{{.IPAddress}},{{end}}{{.Config.Hostname}}", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments().get("format"))); assertEquals("foo", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments().get("name"))); assertEquals(3, dockerInspectCommand.getDockerCommandWithArguments().size());
assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(0); assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(-1); assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(1);
assertTrue(checker.isApplicationActive(id));
assertEquals(fileName, result); assertTrue(initialCachedResources.isEmpty());
assertTrue(fencer.tryFence(TEST_TARGET, "echo hello>&2"));
assertEquals(expected, parser.parse(in, Function.identity()));
assertEquals(2, providers.size()); assertEquals(UserProvider.class, providers.get(0).getClass()); assertEquals(JavaKeyStoreProvider.class, providers.get(1).getClass()); assertEquals(userUri, providers.get(0).toString()); assertEquals(jksUri, providers.get(1).toString());
assertNull("Resource should be null for current classloader", currentClassLoader.getResourceAsStream("resource.txt")); assertNotNull("Resource should not be null for app classloader", in); assertEquals("hello", IOUtils.toString(in));
assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(compactDirList)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(spacedDirList)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(pathologicalDirList1)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(pathologicalDirList2)); assertArrayEquals(emptyArray, StringUtils.getTrimmedStrings(emptyList1)); assertArrayEquals(emptyArray, estring);
assertEquals(3, strs.size()); assertArrayEquals(new String[]{ "a", " b", " c" }, strs.toArray(new String[0])); assertEquals(0, strs.size());
assertEquals(conf.size(), 0); assertEquals(conf.size(), 1); assertEquals(conf.get("a"), "A");
assertEquals(ZKFailoverController.ERR_CODE_NO_PARENT_ZNODE, runFC(svc)); assertEquals(0, runFC(svc, "-formatZK")); assertEquals(ZKFailoverController.ERR_CODE_FORMAT_DENIED, runFC(svc, "-formatZK", "-nonInteractive")); assertEquals(0, runFC(svc, "-formatZK", "-force"));
assertTrue(strOut.contains("Prints the classpath")); assertTrue(stderr.toByteArray().length == 0);
assertEquals("container_0_0000_00_25645811", cid); assertEquals(gen.toString(), id.toString()); assertEquals( "container_e03_" + ts + "_36473_4365472_999799999997", cid2); assertEquals(gen2.toString(), id2.toString()); assertEquals( "container_e767_" + ts + "_36473_4365472_1099511627773", cid3); assertEquals(gen3.toString(), id3.toString());
assertNull(ref.getVolume());
assertTrue("Stdout doesn\'t contain yarn-site.xml", stdout.contains("======= yarn-site.xml =======")); assertTrue("Stdout doesn\'t contain capacity-scheduler.xml", stdout.contains("======= capacity-scheduler.xml =======")); assertTrue("Stdout doesn\'t contain mapping-rules.json", stdout.contains("======= mapping-rules.json ======="));
assertEquals(Time.formatTime(time), DATE_FORMAT.get().format(time));
assertEquals("container_0_0000_00_000000", cid); assertEquals(gen, id);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(result, actual);
assertTrue("copyFilter should be instance of TrueCopyFilter", copyFilter instanceof TrueCopyFilter);
assertEquals("Check expected value", 1, IOUtils.wrappedReadForCompressedData(mockStream, buf, 0, 1));
assertEquals(expected, contentSummary.toSnapshot(true));
assertTrue("expected position at: " + pos + ", but got: " + inputStream.getPos(), inputStream.getPos() == pos);
assertEquals( sortedString("../d2/f3"), sortedString(items) );
assertEquals(expected, actual);
assertTrue(FIRST_CALL_FAILURE, tracker.visit(anyRequest)); assertFalse(ANY_VISITED + RACK_FAILURE, tracker.visit(rackRequest)); assertFalse(ANY_VISITED + NODE_FAILURE, tracker.visit(node1Request)); assertFalse(ANY_VISITED + NODE_FAILURE, tracker.visit(node2Request));
assertEquals(write, read);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType. REMOVE_DOCKER_CONTAINER.name(), privOp.getOperationType().name()); assertEquals(1, args.size()); assertEquals(MOCK_CONTAINER_ID, args.get(0));
assertTrue(olf.isPresent()); assertTrue(ee.getCause() instanceof DummyException);
assertThat(schedulable.getMetrics().getMaxApps()). isEqualTo(Integer.MAX_VALUE); assertThat(schedulable.getMetrics().getSchedulingPolicy()).isEqualTo( SchedulingPolicy.DEFAULT_POLICY.getName()); assertTrue("Demand is greater than max allowed ", Resources.equals(schedulable.getDemand(), maxResource));
assertEquals(0, validIndexes.length);
assertEquals(Result.PASS, print.apply(item, -1));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue("Should return an error code", exitCode != 0); assertTrue("Should return an error code", exitCode != 0);
assertEquals("True has to be returned in this case", BLKSIZE_MAXVALUE, inf.getPreferredBlockSize());
assertEquals(proxyAddr, getRemoteAddr(null, proxyAddr, true)); assertEquals(proxyAddr, getRemoteAddr("", proxyAddr, true));
assertTrue("Method returned inconsistent results indicative of" + " a race condition", formattedTime1.equals(formattedTime2));
assertTrue("Wrong message: " + ex.getMessage(), ex.getMessage().contains("The auxiliary service name: 1Asrv1 is " + "invalid. The valid service name should only contain a-zA-Z0-9_" + " and cannot start with numbers."));
assertEquals( "create #1\\n" + "create #2\\n", log.toString()); assertEquals( "stop #1\\n" + "refresh #2\\n", log.toString()); assertEquals( "create #3\\n" + "refresh #2\\n", log.toString());
assertEquals(path, meta.getPath()); assertNotNull(meta.getListing()); assertTrue(meta.getListing().isEmpty()); assertFalse(meta.isAuthoritative()); assertTrue(meta.isAuthoritative());
assertEquals(0, storage.getNumStorageDirs());
assertTrue("-a switch had no effect", conversionOptions.isEnableAsyncScheduler());
assertEquals("java.lang.Integer", conf.getClass("test.class1", null).getCanonicalName()); assertEquals("java.lang.Integer", conf.getClass("test.class2", null).getCanonicalName());
assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue(ml.includes("1.2.3.4")); assertFalse(ml.includes("1.2.3.5"));
assertFalse("AM should not have been allocated!", result);
assertThat(averageRecordLatency).describedAs("Average time for getting latency records should be bounded") .isBetween(minLatencyWhenDisabledMs, maxLatencyWhenDisabledMs);
assertEquals("wrong tokens in user", 2, fs.ugi.getTokens().size());
assertEquals(bc.length, MAX_LIMIT); assertEquals(bc.length, REMAINING_BLOCKS);
assertTrue("Failed to catch the expected bind exception",caught);
assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertTrue(appAttIds.contains(appAttId1)); assertTrue(appAttIds.contains(appAttId2));
assertTrue("Result has proper header", result.startsWith(XMLHEADER)); assertTrue("Result has proper footer", result.endsWith("</configuration>"));
assertTrue(stdout.toByteArray().length == 0); assertTrue(strErr.contains("requires path of jar"));
assertThat(hostname, not(DUMMY_HOSTNAME));
assertEquals("KeyManager dataEncryptionKey should expire in 2 seconds", keyUpdateInterval, remainingTime); assertNotEquals("KeyManager should generate a new data encryption key", dek, dekAfterExpiration); assertTrue("KeyManager has an expired DataEncryptionKey!", dekAfterExpiration.expiryDate > fakeTimer.now());
assertTrue(e.getCause() instanceof IOException);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(1, appsInA1.size()); assertTrue(appsInA.contains(appAttemptId)); assertEquals(1, appsInA.size()); assertTrue(appsInRoot.contains(appAttemptId)); assertEquals(1, appsInRoot.size()); assertEquals(1, appsInA1.size()); assertTrue(appsInA.contains(appAttemptId)); assertEquals(1, appsInA.size()); assertTrue(appsInRoot.contains(appAttemptId)); assertEquals(1, appsInRoot.size());
assertTrue(Shell.isJavaVersionAtLeast(8));
assertTrue(strOut.contains("Prints the classpath")); assertTrue(stderr.toByteArray().length == 0);
assertEquals( sortedString(testDir+"/d1/f1", testDir+"/d1/f1.1"), sortedString(items) ); assertEquals( sortedString(absolutePathNoDriveLetter), sortedString(items) ); assertEquals( sortedString("."), sortedString(items) );
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains( "Invalid ContainerId specified"));
assertEquals(1, deletionTask.getBaseDirs().size()); assertEquals(baseDirs, deletionTask.getBaseDirs());
assertTrue(queue.isEmpty()); assertTrue(connectionCreator.isAlive());
assertEquals(one, two);
assertEquals("Correct configuration should return user setting", getTestParentFolder() + "/aocl", openclPlugin.getPathToExecutable());
assertEquals(longs.length, set.size()); assertTrue(it.hasNext()); assertEquals(longs[i], val.getId());
assertTrue(futureThread.get().isAlive()); assertNotNull(e); assertEquals(InterruptedIOException.class, e.getClass()); assertEquals("Retry interrupted", e.getMessage()); assertEquals(InterruptedException.class, e.getCause().getClass()); assertEquals("sleep interrupted", e.getCause().getMessage());
assertEquals(10, fcq.size());
assertEquals("Did not find first occurrence of pattern \'ello\'", 1, UTF8ByteArrayUtils.findBytes(data, 0, data.length, "ello".getBytes())); assertEquals( "Substring starting at position 2 does not contain pattern \'ello\'", -1, UTF8ByteArrayUtils.findBytes(data, 2, data.length, "ello".getBytes()));
assertEquals(Result.FAIL, name.apply(item, -1));
assertEquals(USER_1, user.getUserName()); assertEquals(stagingPath, JobSubmissionFiles.getStagingDir(cluster, conf, user));
assertFalse(router.getStateStore().isDriverReady());
assertNull("Record is not null", recs);
assertEquals(true, accessed.get());
assertEquals(FTP.DEFAULT_PORT, ftp.getDefaultPort());
assertEquals("trustStoreLocation", clientTsLoc); assertEquals(sslConf, conf);
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals(TEST_VAL, val); assertTrue(foundSetting);
assertEquals(Result.PASS, name.apply(item, -1));
assertNull(FileUtil.stat2Paths(null)); assertEquals(0, paths.length); assertEquals(2, paths.length); assertEquals(paths[0], path1); assertEquals(paths[1], path2);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(2, robotsTxtOutput.length); assertEquals("User-agent: *", robotsTxtOutput[0]); assertEquals("Disallow: /", robotsTxtOutput[1]);
assertNull("RequestLog should be null", requestLog);
assertEquals("375.66", info.getDriverVersion()); assertEquals(2, info.getGpus().size());
assertEquals("root.admins.alice max apps", 2, csConfig.getInt(PREFIX + "root.admins.alice.max-parallel-apps", -1));
assertNull("Retrieved IP file path", path);
assertEquals(0, e.status);
assertEquals(keys, result);
assertEquals(0, conf.size()); assertFalse(conf.iterator().hasNext());
assertEquals(2, ids.size()); assertEquals(user, ids.get(0)); assertEquals(user, ids.get(1));
assertFalse(new Path("/").equals(new Path("/foo")));
assertTrue("Empty Config did not produce an empty list of resources", localResources.isEmpty());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals("foo", AlwaysSucceedFencer.callArgs.get(0));
assertEquals( "Not returning expected number of classes. Number of returned classes =" + classes.length, 1, classes.length); assertEquals("Not returning the default class Name", Configuration.class, classes[0]);
assertTrue("Reported hello as non-alpha string", StringUtils.isAlpha("hello")); assertFalse("Reported hello1 as alpha string", StringUtils.isAlpha("hello1"));
assertEquals(TasksPage.class, appController.getClazz());
assertEquals(IsActiveServlet.RESPONSE_ACTIVE, response);
assertTrue("Script did not timeout" , shexc.isTimedOut());
assertTrue(fileStatus1.compareTo(fileStatus2) < 0); assertTrue(fileStatus2.compareTo(fileStatus1) > 0); assertTrue(Collections.binarySearch(statList, fileStatus1) > -1);
assertEquals(0, rmAdminCLI.run(args));
assertEquals(EXIT_SUCCESS, result);
assertNull("Retrieved IP file path", path);
assertTrue(e instanceof IOException);
assertEquals("The paths are not equal!", useUrl, newURL);
assertNull(value); assertNotNull(value); assertTrue(value.contains(classpath)); assertTrue(value.contains(os)); assertFalse(value.contains(version));
assertEquals("", StringUtils.join(":", s.subList(0, 0))); assertEquals("a", StringUtils.join(":", s.subList(0, 1)));
assertFalse("Agent-based allocation should have failed", result); assertTrue("Agent-based allocation should have failed", plan .getAllReservations().size() == 2);
assertEquals(false, instance.removeAll(list)); assertEquals(true, instance.removeAll(list)); assertEquals(true, instance.isEmpty());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, appAttempts.length()); assertEquals("incorrect number of elements", MAX_APPS, array.length());
assertTrue(e instanceof IllegalArgumentException); assertEquals(e.getMessage(), "Property name must not be null");
assertEquals("375.66", info.getDriverVersion()); assertEquals(1, info.getGpus().size()); assertEquals("N/A", gpu.getProductName()); assertEquals("N/A", gpu.getUuid()); assertEquals(-1, gpu.getMinorNumber()); assertNull(gpu.getGpuMemoryUsage()); assertNull(gpu.getTemperature()); assertNull(gpu.getGpuUtilizations());
assertTrue("first command should be the run command for the platform", command[0].equals(Shell.WINUTILS) || command[0].equals("bash"));
assertEquals(TEST_FAIRSCHED_XML, allocationFile.getName()); assertTrue(fs.exists(allocationFile));
assertEquals(blocks.length, blocks2.length);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(result, actual);
assertEquals("foo:12345", DFSUtil.substituteForWildcardAddress("0.0.0.0:12345", "foo")); assertEquals("127.0.0.1:12345", DFSUtil.substituteForWildcardAddress("127.0.0.1:12345", "foo"));
assertEquals(1, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress)); assertEquals(2, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress));
assertEquals(read, nonEmptyFlag);
assertEquals("foo:/bar", new Path("foo:/","/bar").toString());
assertTrue(e instanceof RuntimeException);
assertThat(stat.getNumChildren()).isEqualTo(nonEmptyNodes);
assertFalse("110.113.221.222 is in the list", ipl.isIn("110.113.221.222"));
assertEquals("MappingRule{matcher=" + matcher.toString() + ", action=" + action.toString() + "}", rule.toString());
assertEquals("Return value", -1, retVal); assertTrue(fsTestCommons.getErrContent() .toString().contains("contains the yarn-site.xml"));
assertArrayEquals(list.toArray(), tree.toArray());
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(TaskAttemptEventType.TA_RESCHEDULE, taskAttemptEventHandler.lastTaskAttemptEvent.getType());
assertTrue(spied.verifyAccess());
assertEquals(TEST_STRING_2, DFSTestUtil.readFile(DST_FILE)); assertEquals("Temporary file should have been cleaned up", DST_FILE.getName(), Joiner.on(",").join(TEST_DIR.list()));
assertThat(host, is(DNS.getDefaultHost(getLoopbackInterface())));
assertEquals(FileUtil.compareFs(null,fs1),false); assertEquals(FileUtil.compareFs(fs1,null),false);
assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/myhost@REALM", result); assertEquals("The hostname translation did not produce the expected " + "results: " + result, "test/yourhost@REALM", result);
assertEquals(header, ContentSummary.getHeader(true));
assertTrue(NameNodeLayoutVersion.supports(LAST_NON_RESERVED_COMMON_FEATURE, first.getInfo().getLayoutVersion())); assertEquals(LAST_COMMON_FEATURE.getInfo().getLayoutVersion() - 1, first.getInfo().getLayoutVersion());
assertEquals("getLength", length, contentSummary.getLength()); assertEquals("getFileCount", fileCount, contentSummary.getFileCount()); assertEquals("getDirectoryCount", directoryCount, contentSummary.getDirectoryCount()); assertEquals("getQuota", quota, contentSummary.getQuota()); assertEquals("getSpaceConsumed", spaceConsumed, contentSummary.getSpaceConsumed()); assertEquals("getSpaceQuota", spaceQuota, contentSummary.getSpaceQuota());
assertEquals(100, QJMTestUtil.recoverAndReturnLastTxn(qjm)); assertEquals(150, QJMTestUtil.recoverAndReturnLastTxn(qjm));
assertEquals("{5=value}", map.toString());
assertEquals( String.format( RestApiErrorMessages.ERROR_KERBEROS_PRINCIPAL_NAME_FORMAT, kp.getPrincipalName()), e.getMessage());
assertEquals(1, toBeCleared.getBlocks().length); assertTrue(toBeCleared.getBlocks().length == 0);
assertTrue(auxService.hasApplication(appAttemptId.getApplicationId())); assertFalse(auxService.hasApplication(appAttemptId.getApplicationId()));
assertEquals(TEST_MD5, computedDigest);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue("Missing parent field", containsParentField); assertTrue("Missing child field", containsChildField); assertTrue("Missing parent method", containsParentMethod); assertTrue("Missing child method", containsChildMethod);
assertEquals(AuthenticationMethod.SIMPLE, ugi.getAuthenticationMethod()); assertTrue (ugi.toString().contains("(auth:SIMPLE)")); assertEquals(AuthenticationMethod.KERBEROS, ugi.getAuthenticationMethod()); assertTrue (ugi.toString().contains("(auth:KERBEROS)"));
assertEquals(s.getBlockpoolID(), s1.getBlockpoolID()); assertEquals(s.getClusterID(), s1.getClusterID()); assertEquals(s.getCTime(), s1.getCTime()); assertEquals(s.getCurSegmentTxId(), s1.getCurSegmentTxId()); assertEquals(s.getLayoutVersion(), s1.getLayoutVersion()); assertEquals(s.getMostRecentCheckpointTxId(), s1.getMostRecentCheckpointTxId()); assertEquals(s.getNamespaceID(), s1.getNamespaceID());
assertTrue(result.delete()); assertTrue(result.getParentFile().delete()); assertFalse(new File(dir).exists());
assertEquals(expected, parser.parse(in, Function.identity()));
assertEquals(r1.getStartTime(), r2.getStartTime()); assertEquals("Comparator Output", 0, policy.getComparator().compare(r1, r2));
assertFalse(fencer.tryFence(TEST_TARGET, "read"));
assertEquals(suffix, getRelativePath(BASE, path));
assertTrue("Agent-based allocation failed", reservationID != null); assertTrue("Agent-based allocation failed", plan.getAllReservations() .size() == 3); assertTrue(cs.toString(), check(cs, 100 * step, 120 * step, 100, 1024, 1));
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals(minResource, ask.getCapability()); assertEquals(minResource, ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(1024, ask.getCapability().getMemorySize()); assertEquals(Resources.createResource(2048, 1), ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(2048, ask.getCapability().getMemorySize());
assertEquals("p1", kp.createKey("test1", new Options(conf)).getName()); assertEquals("p2", kp.createKey("test2", new Options(conf)).getName()); assertEquals("p3", kp.createKey("test3", new Options(conf)).getName()); assertEquals("p1", kp.createKey("test4", new Options(conf)).getName());
assertTrue("unable to mkdir " + currentDir.getName(), currentDir.mkdirs()); assertTrue("Storage directory was formatted", currentDir.exists());
assertArrayEquals("encFile1 not equal", getFileContentsUsingNfs(encFile1, len), getFileContentsUsingDfs(encFile1, len)); assertArrayEquals("encFile2 not equal", getFileContentsUsingNfs(encFile2, len), getFileContentsUsingDfs(encFile2, len));
assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed());
assertTrue(getSlowDisksReportForTesting(tracker).isEmpty());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(0, ret); assertEquals(expectedRunAsUser, fileStatus.getOwner());
assertThat(stat.getNumChildren()).isZero();
assertNotNull(resultDomain); assertEquals(testDomain.getReaders(), resultDomain.getReaders()); assertEquals(testDomain.getOwner(), resultDomain.getOwner()); assertEquals(testDomain.getDescription(), resultDomain.getDescription());
assertEquals("Comparator Output", 0, policy.getComparator().compare(r1, r2)); assertEquals("Comparator Output", 0, policy.getComparator().compare(r1, r2));
assertThat(manager.getRoot().getChildren().size()).isEqualTo(2);
assertNotNull(tree); assertThat(tree, instanceOf(EmptyProcessTree.class));
assertEquals(Collections.singletonList(Path.CUR_DIR), argsList);
assertEquals(createResource(2, 3), add(createResource(1, 1), createResource(1, 2))); assertEquals(createResource(3, 2), add(createResource(1, 1), createResource(2, 1))); assertEquals(createResource(2, 2, 0), add(createResource(1, 1, 0), createResource(1, 1, 0))); assertEquals(createResource(2, 2, 3), add(createResource(1, 1, 1), createResource(1, 1, 2)));
assertFalse(statistics.isTracked(null)); assertFalse(statistics.isTracked(NO_SUCH_OP)); assertTrue(statistics.isTracked(longStatistic.getName()));
assertEquals("Correct generic type is acquired from object", Integer.class, c); assertEquals("Inner generics are acquired from object.", GenericClass.class, c2);
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains( "Invalid AppAttemptId specified"));
assertEquals("Incorrect number of nodes in the cluster", 8, nodeTracker.nodeCount()); assertEquals("Incorrect number of nodes in each rack", 4, nodeTracker.nodeCount("rack0"));
assertEquals("", sw.toString());
assertEquals(inputChecksumSHA256, client.getFileChecksum(file));
assertFalse("foobar not unpacked", new File(unjarDir, TestRunJar.FOOBAR_TXT).exists()); assertTrue("foobaz unpacked", new File(unjarDir, FOOBAZ_TXT).exists());
assertEquals("VariableMatcher{variable=\'%a\', value=\'b\'}", var.toString()); assertEquals("MatchAllMatcher", all.toString()); assertEquals("AndMatcher{matchers=[" + var.toString() + ", " + all.toString() + ", " + var.toString() + "]}", and.toString()); assertEquals("OrMatcher{matchers=[" + var.toString() + ", " + all.toString() + ", " + var.toString() + "]}", or.toString());
assertEquals(0, rc);
assertTrue( "Expected map:" + slowDisks + ", got map:" + slowDisksConverted1.getSlowDisks(), slowDisksConverted1.equals(slowDisks)); assertTrue( "Expected empty map:" + ", got map:" + slowDisksConverted2, slowDisksConverted2.equals(SlowDiskReports.EMPTY_REPORT));
assertEquals("The toString() method returned the wrong value", str, taskId.toString());
assertNotNull(pmNotExpired);
assertEquals("Test spnego key in config is null", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is empty", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is NOT null", DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY, DFSUtil.getSpnegoKeytabKey(conf, defaultKey));
assertTrue(readLock.tryLock()); assertFalse(writeLock.tryLock());
assertEquals(ITEM_COUNT, 1 + abCount + revCount);
assertEquals(precedence, test.getPrecedence());
assertEquals(0, rmAdminCLI.run(args));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(ExitStatus.NO_MOVE_PROGRESS.getExitCode(), r);
assertEquals(1024, tree.first().intValue()); assertEquals(1024, tree.first().intValue());
assertNotEquals(0, fs.getFileStatus(src).getPermission().toShort()); assertEquals(0, fs.getFileStatus(src).getPermission().toShort());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertEquals("foo", AlwaysSucceedFencer.callArgs.get(0));
assertEquals("Fallback result", MappingRuleResultType.SKIP, mpr.getFallback().getResult());
assertEquals(0, longStat.getValue());
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals(header, ContentSummary.getHeader(false));
assertNull(n); assertNull(n); assertNull(n);
assertTrue("Stdout doesn\'t contain yarn-site.xml", stdout.contains("======= yarn-site.xml =======")); assertTrue("Stdout doesn\'t contain capacity-scheduler.xml", stdout.contains("======= capacity-scheduler.xml =======")); assertTrue("Stdout doesn\'t contain mapping-rules.json", stdout.contains("======= mapping-rules.json ======="));
assertThat(iug.getTimeout()).isEqualTo( IdMappingConstant.USERGROUPID_UPDATE_MILLIS_DEFAULT); assertThat(iug.getTimeout()).isEqualTo( IdMappingConstant.USERGROUPID_UPDATE_MILLIS_MIN); assertThat(iug.getTimeout()).isEqualTo( IdMappingConstant.USERGROUPID_UPDATE_MILLIS_DEFAULT * 2);
assertEquals("Read should timeout", "Read timed out", e.getMessage());
assertEquals("wrong name", "26.172.in-addr.arpa.", name.toString());
assertEquals("env1_val", env.get("env1")); assertEquals("env3_val", env.get("env3")); assertEquals("new4_valwith=equals", env.get("env4")); assertEquals("new2_val1,new2_val2,new2_val3", env.get("env2"));
assertArrayEquals(usage, test.getUsage());
assertTrue(shouldCopyPath.toString() + " should be copied", defaultCopyFilter.shouldCopy(shouldCopyPath)); assertFalse(shouldCopyPath.toString() + " shouldn\'t be copied", defaultCopyFilter.shouldCopy(shouldCopyPath)); assertFalse(shouldCopyPath.toString() + " shouldn\'t be copied", defaultCopyFilter.shouldCopy(shouldCopyPath)); assertTrue(shouldCopyPath.toString() + " should be copied", defaultCopyFilter.shouldCopy(shouldCopyPath));
assertNotEquals(0, uploads.size()); assertEquals("Should have aborted no uploads", 0, results.getAborts().size()); assertEquals("Should have deleted no uploads", 0, results.getDeletes().size()); assertEquals("Should have committed all uploads", uploads, getCommittedIds(results.getCommits()));
assertEquals(3, outs.size()); assertEquals(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, outs.get(1));
assertEquals(MD5FileUtils.readStoredMd5ForFile(fsimage), MD5FileUtils.computeMd5ForFile(fsimage));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertFalse(item.hasAttribute(LAST_UPDATED));
assertEquals(expected, contentSummary.toString(true));
assertEquals(expected.getStatus(), actual.getStatus());
assertNotSame(id, idCopy); assertEquals(id, idCopy);
assertEquals("Upload should timeout", "Read timed out", e.getMessage());
assertEquals(inf.getBlockType(), CONTIGUOUS); assertEquals(striped.getBlockType(), STRIPED);
assertEquals("file1-1", text.toString()); assertEquals("file2-1", text.toString()); assertEquals("file1-2", text.toString()); assertEquals("file2-2", text.toString()); assertFalse(reader1.next(text)); assertFalse(reader2.next(text));
assertEquals("simple", conf.get(HADOOP_SECURITY_AUTHENTICATION)); assertEquals("simple", conf.get(HADOOP_SECURITY_AUTHENTICATION)); assertEquals("kerberos", conf.get(HADOOP_SECURITY_AUTHENTICATION));
assertTrue(localFs.mkdirs(new Path(dir0))); assertTrue(localFs.mkdirs(new Path(dir1))); assertEquals(FILENAME, p.getName()); assertEquals("file", p.getFileSystem(conf).getUri().getScheme()); assertEquals(2, count); assertFalse("NoSuchElementException must be thrown, but returned ["+p +"] instead.", true); assertFalse(true);
assertEquals(key + " " + expectedResult, result);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, containers.length()); assertEquals("incorrect number of elements", MAX_APPS, array.length());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertNotNull(sd);
assertEquals( "0xcafebeef", CrcUtil.toSingleCrcString(buf));
assertEquals("0.0.0.0", ((NameNodeRpcServer)cluster.getNameNodeRpc()) .getClientRpcServer().getListenerAddress().getHostName());
assertEquals("Incorrect number of nodes matching ANY", 8, nodeTracker.getNodesByResourceName(ResourceRequest.ANY).size()); assertEquals("Incorrect number of nodes matching rack", 4, nodeTracker.getNodesByResourceName("rack0").size()); assertEquals("Incorrect number of nodes matching node", 1, nodeTracker.getNodesByResourceName("host0").size());
assertEquals(createResource(1, 1), Resources.clone(createResource(1, 1))); assertEquals(createResource(1, 1, 0), Resources.clone(createResource(1, 1))); assertEquals(createResource(1, 1), Resources.clone(createResource(1, 1, 0))); assertEquals(createResource(1, 1, 2), Resources.clone(createResource(1, 1, 2)));
assertTrue("Should successfully accept request", channel.writeInbound(allowedHttpRequest)); assertTrue("Should successfully accept request, second time", channel.writeInbound(allowedHttpRequest2)); assertTrue("Should successfully accept request, third time", channel.writeInbound(allowedHttpRequest3));
assertArrayEquals("Incorrect bytes returned", expected, data);
assertEquals(foo, generic.get());
assertThat(nid.getPort()).isEqualTo(10); assertThat(nid.getHost()).isEqualTo("node"); assertThat(nid.getPort()).isEqualTo(0); assertThat(nid.getHost()).isEqualTo("node");
assertEquals(expected, parser.parse(in, Function.identity()));
assertTrue(handler.isSuppressedLog(IOException.class)); assertTrue(handler.isSuppressedLog(RpcServerException.class)); assertTrue(handler.isSuppressedLog(IpcException.class)); assertFalse(handler.isSuppressedLog(RpcClientException.class));
assertTrue(groups.size() == 2); assertTrue(groups.contains("abc")); assertTrue(groups.contains("def"));
assertEquals(addr.getHostName(), connectAddr.getHostName()); assertEquals(InetAddress.getLocalHost().getHostName(), connectAddr.getHostName());
assertTrue(new File(tmp, "/bar/foo").exists()); assertEquals(12, new File(tmp, "/bar/foo").length()); assertTrue(regularFile.exists()); assertTrue("An IOException expected.", false);
assertEquals("inspect", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments() .get("docker-command"))); assertEquals("{{.State.Status}}", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments().get("format"))); assertEquals("foo", StringUtils.join(",", dockerInspectCommand.getDockerCommandWithArguments().get("name"))); assertEquals(3, dockerInspectCommand.getDockerCommandWithArguments().size());
assertFalse(isNodeInReports(reports, "node4")); assertTrue(isNodeInReports(reports, "node1")); assertTrue(isNodeInReports(reports, "node2")); assertTrue(isNodeInReports(reports, "node3")); assertTrue(isNodeInReports(reports, "node5")); assertTrue(isNodeInReports(reports, "node6"));
assertThat(fileFormat.getRollOverLogMaxSize(conf)) .isEqualTo(defaultRolloverSize); assertThat(fileFormat.getRollOverLogMaxSize(conf)).isZero();
assertEquals("Service state should have been ", STATE.INITED, services[NUM_OF_SERVICES - 1].getServiceState()); assertEquals("Service state should have been ", STATE.STOPPED, services[i].getServiceState());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("The appendTo() method appended the wrong value", str, taskId.appendTo(builder).toString());
assertEquals(b, b2);
assertEquals(3, removeInfo.size()); assertEquals("root.a", removeInfo.get(0)); assertEquals("root.b", removeInfo.get(1)); assertEquals("root.c.c1", removeInfo.get(2));
assertEquals(expected, parser.parse(in, Function.identity()));
assertNull(fcq.poll(10, TimeUnit.MILLISECONDS));
assertEquals("root.xxx", variables.get("%default")); assertEquals("root.xxxxxx", variables.get("%default")); assertEquals("something", variables.get("%empty")); assertEquals("non-null", variables.get("%null")); assertTrue(e instanceof IllegalStateException);
assertEquals(DeletionTaskType.DOCKER_CONTAINER.name(), deletionTask.getDeletionTaskType().name()); assertEquals(id, deletionTask.getTaskId()); assertEquals(dockerContainerId, ((DockerContainerDeletionTask) deletionTask).getContainerId());
assertTrue("appA should be running on queueB", mCS.getAppsInQueue("queueB").contains(expectedAttemptOnQueueB)); assertTrue("appB should be running on queueC", mCS.getAppsInQueue("queueC").contains(expectedAttemptOnQueueC)); assertTrue("appC should be running on queueE", mCS.getAppsInQueue("queueE").contains(expectedAttemptOnQueueE));
assertEquals(EXIT_SUCCESS, result);
assertNull(sc.getOutputPath());
assertTrue(FIRST_CALL_FAILURE, tracker.visit(rackRequest)); assertFalse(RACK_VISITED + ANY_FAILURE, tracker.visit(anyRequest)); assertFalse(RACK_VISITED + NODE_FAILURE, tracker.visit(node1Request)); assertFalse(RACK_VISITED + NODE_FAILURE, tracker.visit(node2Request));
assertEquals(prop.getProperty(KMSAuthenticationFilter.AUTH_TYPE), PseudoDelegationTokenAuthenticationHandler.class.getName()); assertEquals( prop.getProperty(DelegationTokenAuthenticationHandler.TOKEN_KIND), KMSDelegationToken.TOKEN_KIND_STR);
assertFalse(fencer.fence(MOCK_TARGET));
assertNotNull("getJobFile results in null.", jobFile); assertEquals("jobFile with specified user is not as expected.", "/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml", jobFile);
assertEquals(dnInfos0.getNonDfsUsed(), dnInfos1.getNonDfsUsed()); assertEquals(dnInfos0.getNonDfsUsed(), dnInfos3.getNonDfsUsed());
assertEquals("def1_val", env.get("env1")); assertEquals("def3_val", env.get("env3")); assertEquals("new4_val", env.get("env4")); assertEquals("new2_val", env.get("env2"));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue(n instanceof DatanodeDescriptor); assertTrue(dd.getHostName().equals("host13") || dd.getHostName().equals("host14")); assertTrue(n instanceof DatanodeDescriptor); assertTrue(dd.getHostName().equals("host14")); assertTrue(n instanceof DatanodeDescriptor); assertTrue(dd.getHostName().equals("host7") || dd.getHostName().equals("host11")); assertTrue(n instanceof DatanodeDescriptor); assertTrue(dd.getHostName().equals("host7"));
assertEquals( "Array has identical elements as input list", list.get(i), arr[i]);
assertEquals(editsDir.toString(), journalStorage.getRoot().toString());
assertEquals(0.0, ratio, 0.00001);
assertEquals(l("first", "3.txt"), finalDestination(l("first", MAGIC, "2", "3.txt")));
assertFalse("my.var already exists", finalParameters.contains("my.var")); assertEquals("my.var is undefined", "x", conf.get("my.var")); assertFalse("finalparams not copied", finalParameters.contains("my.var")); assertTrue("my.var is not final", finalParameters.contains("my.var"));
assertEquals(172, splitIp[0]); assertEquals(17, splitIp[1]); assertEquals(4, splitIp[2]); assertEquals(0, splitIp[3]);
assertTrue("preStart should throw exception", exception);
assertEquals(expected, contentSummary.toString(false));
assertTrue(NameNodeLayoutVersion.supports( Feature.FSIMAGE_NAME_OPTIMIZATION, version));
assertEquals("Number of devices", 1, devices.size()); assertEquals("Device ID", 0, device.getId()); assertEquals("Major number", 8, device.getMajorNumber()); assertEquals("Minor number", 1, device.getMinorNumber()); assertEquals("Status", "Unknown (-1)", device.getStatus()); assertFalse("Device should not be healthy", device.isHealthy());
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.DELEGATION_TOKEN, Feature.RESERVED_REL20_203.getInfo().getLayoutVersion()));
assertEquals(0, result);
assertEquals(new Path("/foo"), new Path("/foo/bar").getParent()); assertEquals(new Path("foo"), new Path("foo/bar").getParent()); assertEquals(new Path("/"), new Path("/foo").getParent()); assertEquals(null, new Path("/").getParent()); assertEquals(new Path("c:/"), new Path("c:/foo").getParent());
assertEquals(false, instance.containsAll(list)); assertEquals(true, instance.containsAll(list));
assertThat(infoList).isEmpty();
assertNotNull(tree); assertThat(tree.getConf(), sameInstance(conf));
assertEquals(7,ml.getCollection().size()); assertTrue(col.contains(item));
assertEquals(client.getControlKeepAliveTimeout(), FTPFileSystem.DEFAULT_TIMEOUT); assertEquals(client.getControlKeepAliveTimeout(), timeout);
assertEquals(STATE.INITED, historyServer.getServiceState()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState()); assertNotNull(historyService.getClientHandler().getConnectAddress());
assertEquals(0, conf.size()); assertEquals(2, conf.size()); assertEquals("val1", conf.get("key.1")); assertEquals("val2", conf.get("key.2"));
assertEquals("The readFields() method did not produce the expected task ID", "task_1234_0001_r_000000", instance.toString());
assertTrue(e.getMessage().startsWith( "Could not find a serializer for the Key class: \'" + String.class.getName() + "\'.")); assertTrue(e.getMessage().startsWith( "Could not find a serializer for the Value class: \'" + String.class.getName() + "\'.")); assertTrue(e.getMessage().startsWith( "Could not find a deserializer for the Key class: \'" + RandomDatum.class.getName() + "\'."));
assertTrue(localFs.mkdirs(new Path(dir3))); assertTrue(localFs.mkdirs(new Path(dir4)));
assertArrayEquals(write, read);
assertTrue(String.format("Features %s and %s not listed in order of " + "minimum compatible layout version.", prevF, f), f.getInfo().getMinimumCompatibleLayoutVersion() <= prevF.getInfo().getMinimumCompatibleLayoutVersion());
assertEquals(header, QuotaUsage.getHeader());
assertEquals(expected, quotaUsage.toString(true));
assertEquals(expectedOwner, owner); assertNotNull(stat.getGroup()); assertTrue(!stat.getGroup().isEmpty()); assertEquals("Stat mode field should indicate a regular file", S_IFREG, stat.getMode() & S_IFMT);
assertNull(statistics.getLong(null)); assertNull(statistics.getLong(NO_SUCH_OP));
assertEquals("Expected sums to be equal", bufSum, sum);
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(new Path("c:\\\\foo\\\\bar").toString(), "c:/foo/bar"); assertEquals(new Path("c:/foo/bar").toString(), "c:/foo/bar"); assertEquals(new Path("/c:/foo/bar").toString(), "c:/foo/bar");
assertTrue(helper.record(1).shouldLog()); assertFalse(helper.record(i % 2 == 0 ? 0 : 1).shouldLog()); assertTrue(action.shouldLog()); assertEquals(5, action.getCount()); assertEquals(0.5, action.getStats(0).getMean(), 0.01); assertEquals(1.0, action.getStats(0).getMax(), 0.01); assertEquals(0.0, action.getStats(0).getMin(), 0.01);
assertFalse(store.isResourceEvictable("key", mock(FileStatus.class)));
assertEquals(write, read);
assertEquals("No configuration(no environment ALTERAOCLSDKROOT set)" + " should return just a single binary name", "aocl", openclPlugin.getPathToExecutable());
assertEquals(value, wrapped.get(key));
assertEquals("last update in " + dlm, 100L, dlm.getLastUpdated());
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains( "Invalid value for -out option. Please provide a directory."));
assertNull(fcq.poll());
assertNotNull(conf.get(SCHEDULER_JOURNAL_URI)); assertNotNull(conf.get(WORK_THREAD_NUM));
assertEquals(0, deletedFiles.get());
assertEquals(STATE.INITED, historyServer.getServiceState()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState());
assertEquals(1, tid.getJobId().getAppId().getClusterTimestamp()); assertEquals(2, tid.getJobId().getAppId().getId()); assertEquals(2, tid.getJobId().getId()); assertEquals(TaskType.REDUCE, tid.getTaskType()); assertEquals(3, tid.getId()); assertEquals(TaskType.MAP, tid.getTaskType());
assertTrue(Arrays.equals(uuid, header.getClientId().toByteArray()));
assertEquals(0, ret.getInt(i)); assertEquals(0, inputs[i]);
assertNotNull(s1); assertNull(s1); assertNotNull(s2);
assertFalse(fencer.fence(MOCK_TARGET));
assertFalse(fileStatus1.equals(fileStatus2)); assertFalse(fileStatus2.equals(fileStatus1));
assertNull(map.get(bpid, 1234)); assertNotNull(map.get(bpid, 5678));
assertTrue(new File(tmp, "foo").exists()); assertEquals(12, new File(tmp, "foo").length()); assertTrue(regularFile.exists()); assertTrue("An IOException expected.", false);
assertEquals(INITED, s.getServiceState()); assertEquals("Invalid mix of services", 6, latch); assertEquals(STARTED, s.getServiceState()); assertEquals(s.getAuxiliaryLocalPathHandler(), MOCK_AUX_PATH_HANDLER); assertEquals(STOPPED, s.getServiceState());
assertEquals(System.getProperty("user.name"), stat.getOwner()); assertNotNull(stat.getGroup()); assertTrue(!stat.getGroup().isEmpty()); assertEquals("Stat mode field should indicate a regular file", S_IFREG, stat.getMode() & S_IFMT);
assertEquals(0, ret); assertEquals(1, outs.size()); assertThat(outs.get(0), is(allOf(containsString("Triggering an incremental block report on "), containsString(" to namenode "))));
assertEquals(reg.getSoftwareVersion(), reg2.getSoftwareVersion());
assertThat(containerResource.getMemorySize()).isEqualTo(0); assertThat(containerResource.getVirtualCores()).isEqualTo(0);
assertTrue(RetryInvocationHandler.isRpcInvocation(unreliable)); assertTrue(RetryInvocationHandler.isRpcInvocation(xlator)); assertEquals(1, count.get()); assertFalse(RetryInvocationHandler.isRpcInvocation(new Object()));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, apps.length()); assertEquals("incorrect number of elements", MAX_APPS - 1, array.length());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertNull(trimQueueName(null)); assertTrue(trimQueueName(spaces).isEmpty());
assertEquals(NS1_NN1_HTTPS_ADDR, httpsOnlyWebAddr); assertEquals(NS1_NN1_HTTP_ADDR, httpOnlyWebAddr); assertEquals(NS1_NN1_HTTP_ADDR, httpAndHttpsWebAddr);
assertNotNull("Valid class must be returned", factory.getSerializer(LongWritable.class));
assertEquals(write, read);
assertTrue(exitCode != 0); assertTrue(sysErrStream.toString().contains( "Unable to get ApplicationState."));
assertEquals(1, JobEndServlet.calledTimes); assertEquals("jobid=job_20130313155005308_0001&status=SUCCEEDED", JobEndServlet.requestUri.getQuery());
assertEquals(expected, result);
assertNotNull(longStat); assertNotNull(opType); assertTrue(expectedOpsCountMap.containsKey(opType)); assertEquals(expectedOpsCountMap.get(opType).longValue(), longStat.getValue()); assertEquals(OpType.values().length, iterations);
assertTrue( "Instantiation of empty EnumSetWritable with no element type class " + "provided should throw exception.", gotException); assertEquals(read, emptyFlag);
assertEquals("testRenameWithException invalid IOExceptionMessage !!!", ex.getMessage(), ERROR_MESSAGE);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(new File(path), item.toFile()); assertEquals(new File(testDir + "\\\\foo\\\\bar"), item.toFile());
assertTrue(e.getCause() instanceof AuthenticationException);
assertEquals(clone.get("a"), "d"); assertEquals(clone.get("b"), "d"); assertEquals(clone.get("c"), "d"); assertEquals(clone.get("d"), "e"); assertEquals(clone.get("e"), "f");
assertEquals(FileUtil.compareFs(fs1,fs1),true); assertEquals(FileUtil.compareFs(fs1,fs2),false); assertEquals(FileUtil.compareFs(fs1,fs5),false); assertEquals(FileUtil.compareFs(fs3,fs4),true); assertEquals(FileUtil.compareFs(fs1,fs6),false);
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue("expected position at: " + pos + ", but got: " + inputStream.getPos(), inputStream.getPos() == pos); assertTrue("expected position at: " + pos + ", but got: " + inputStream.getPos(), inputStream.getPos() == pos);
assertEquals("Return value", -1, retVal); assertTrue("Error content missing", fsTestCommons.getErrContent() .toString().contains("Missing yarn-site.xml parameter"));
assertEquals(proxyAddr, getRemoteAddr(clientAddr, proxyAddr, false));
assertEquals("Retrieved IP file path", "/test/fpga.aocx", path);
assertNotNull("Fail to get the instance.", diskValidator); assertEquals("Fail to create the correct instance.", diskValidator.getClass(), BasicDiskValidator.class); assertNotNull("Fail to cache the object", DiskValidatorFactory.INSTANCES. get(BasicDiskValidator.class));
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.DELEGATION_TOKEN, Feature.RESERVED_REL20_204.getInfo().getLayoutVersion()));
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals("nn1", DFSUtil.getSecondaryNameServiceId(conf));
assertEquals(expected, contentSummary.toString(false, true));
assertEquals(100, QJMTestUtil.recoverAndReturnLastTxn(qjm)); assertEquals(150, QJMTestUtil.recoverAndReturnLastTxn(qjm));
assertEquals(originalSslEx, interceptedEx.getCause());
assertTrue(false); assertTrue(e.getMessage().matches(".*unknown_junk.*"));
assertEquals(expected, contentSummary.toString(true));
assertArrayEquals( new long[] { 0, 1, -1, -1, -1, 1, 11, 111, ReplicaState.RBW.getValue() }, blocks.getBlockListAsLongs());
assertFalse(checker.isApplicationActive(id)); assertFalse(checker.isApplicationActive(id));
assertTrue("capacity-scheduler.xml was not generated", csConfigExists); assertTrue("yarn-site.xml was not generated", yarnSiteConfigExists);
assertThat(entities.getEntities()).hasSize(1); assertEquals((Long) 123L, entity.getStartTime()); assertEquals(numEntityReadBefore + 5L, summaryLogEntityRead.value());
assertTrue(coder instanceof RSRawErasureCoderFactory); assertTrue(coder instanceof NativeRSRawErasureCoderFactory); assertTrue(coder instanceof RSLegacyRawErasureCoderFactory); assertTrue(coder instanceof XORRawErasureCoderFactory); assertTrue(coder instanceof NativeXORRawErasureCoderFactory);
assertEquals(0, runTool("-transitionToObserver", "nn1"));
assertEquals(AuthenticationMethod.SIMPLE, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod()); assertEquals(AuthenticationMethod.PROXY, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod());
assertTrue((parser.parseLine(line).isEmpty()));
assertEquals(null, new FoldedTreeSet<>().comparator()); assertEquals(comparator, new FoldedTreeSet<>(comparator).comparator()); assertEquals(5, set.size()); assertEquals("apa", set.get("apa"));
assertEquals("375.66", info.getDriverVersion()); assertEquals(2, info.getGpus().size());
assertEquals(nns, nns2);
assertTrue("TaskID for map task did not correctly identify itself " + "as a map task", taskId.isMap()); assertFalse("TaskID for " + type + " task incorrectly identified " + "itself as a map task", taskId.isMap()); assertFalse("TaskID of default type incorrectly identified itself as a " + "map task", taskId.isMap());
assertEquals(2700L, interval);
assertEquals(expected.getStatus(), actual.getStatus());
assertTrue("foobar unpacked", new File(unjarDir, TestRunJar.FOOBAR_TXT).exists()); assertTrue("foobaz unpacked", new File(unjarDir, FOOBAZ_TXT).exists());
assertEquals("Incorrect escaped HTML string returned", escapedStr, StringUtils.escapeHTML(htmlStr));
assertEquals(EXIT_SUCCESS, result);
assertTrue(INCLUDES_FILE.delete());
assertEquals(1, response.size()); assertNotNull(response.get(HOME_SC_ID)); assertEquals(9, response.get(HOME_SC_ID).size());
assertNull("The path is not null!", newURL);
assertEquals(input[i], output[i]); assertEquals(input[i], output[i]); assertEquals(input[i - HALFWAY], output[i]);
assertEquals(key, conf.get(key));
assertEquals("/a/b", KeyProvider.getBaseName("/a/b@3")); assertEquals("/aaa", KeyProvider.getBaseName("/aaa@112")); assertTrue("should have thrown", false); assertTrue(true);
assertTrue("Container allocation is expected to fail!", failedToAllocate);
assertEquals(0, ret); assertEquals(outs.get(0), "Active Volumes : 2");
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue("should throw!", false); assertEquals("Bad configuration of " + KeyProviderFactory.KEY_PROVIDER_PATH + " at unkn@own:/x/y", e.getMessage());
assertFalse("False if clazz is null", GenericsUtil.isLog4jLogger(null)); assertTrue("The implementation is Log4j", GenericsUtil.isLog4jLogger(TestGenericsUtil.class));
assertEquals(i - 1, getblockSafe()); assertTrue(bmSafeMode.isInSafeMode());
assertTrue(socket2.isBound()); assertTrue(socket2.getLocalPort() > min); assertTrue(socket2.getLocalPort() <= max);
assertEquals(2, conf.size());
assertEquals("Incorrect reference count", 1, clr.getReferenceCount());
assertThat(logCapturer.getOutput(), containsString("Process Thread Dump: " + title));
assertEquals("True has to be returned in this case", replication, inf.getFileReplication());
assertTrue("Create test subject", testfile.exists() || testfile.createNewFile()); assertTrue("Rename failed.", renamed);
assertFalse("Node health script should start", NodeHealthScriptRunner.shouldRun("script", nodeHealthscriptFile.getAbsolutePath())); assertFalse("Node health script should start", NodeHealthScriptRunner.shouldRun("script", nodeHealthscriptFile.getAbsolutePath())); assertTrue("Node health script should start", NodeHealthScriptRunner.shouldRun("script", nodeHealthscriptFile.getAbsolutePath()));
assertEquals(DeletionTaskType.FILE.name(), deletionTask.getDeletionTaskType().name()); assertEquals(id, deletionTask.getTaskId()); assertEquals(subdir, ((FileDeletionTask) deletionTask).getSubDir()); assertEquals(basedir, ((FileDeletionTask) deletionTask).getBaseDirs().get(0));
assertEquals(ratioOfMemories, ratio, 0.00001); assertEquals(ratioOfCPUs, ratio, 0.00001);
assertEquals("true", tbw.toString()); assertEquals("12345", tbw.toString()); assertEquals("123456789", tbw.toString()); assertEquals("1.23", tbw.toString()); assertEquals("1.23456789", tbw.toString()); assertEquals("random text", tbw.toString());
assertTrue(lastJournalTimestamp > beginTimestamp); assertTrue(lastJournalTimestamp > beginTimestamp);
assertEquals(ACTIVE_RETRY_LIMIT, counter.get());
assertEquals(addr, RPC.getServerAddress(proxy));
assertEquals("task_0_0000_m_000000", MRApps.toString(tid)); assertEquals("task_0_0000_r_000000", MRApps.toString(tid));
assertTrue("not an ARecord", recs[0] instanceof ARecord); assertTrue("not an ARecord", recs[1] instanceof ARecord);
assertEquals(l("2", "3.txt"), finalDestination(l(MAGIC, "4", BASE, "2", "3.txt")));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(Result.PASS, name.apply(item, -1));
assertEquals(expectedOutput, conf.toString());
assertThat(hostname, is(DUMMY_HOSTNAME));
assertArrayEquals( new long[] { 1, 0, 1, 11, 111, -1, -1, -1 }, blocks.getBlockListAsLongs());
assertEquals(0, instance.size()); assertEquals(1, instance.size()); assertEquals(0, instance.size());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(USER_1, user.getUserName()); assertEquals(stagingPath, JobSubmissionFiles.getStagingDir(cluster, conf, user)); assertEquals(stagingPath, JobSubmissionFiles.getStagingDir(cluster, conf, user));
assertEquals(path, meta.getPath()); assertNotNull(meta.getListing()); assertFalse(meta.getListing().isEmpty()); assertTrue(meta.getListing().contains(pathMeta1)); assertTrue(meta.getListing().contains(pathMeta2)); assertTrue(meta.getListing().contains(pathMeta3)); assertFalse(meta.isAuthoritative()); assertTrue(meta.getListing().contains(pathMeta4)); assertEquals(pathMeta4, meta.get(pathMeta4.getFileStatus().getPath()));
assertEquals(expected, contentSummary.toString());
assertEquals(61*1000, DFSUtil.parseRelativeTime("61s")); assertEquals(61*60*1000, DFSUtil.parseRelativeTime("61m")); assertEquals(0, DFSUtil.parseRelativeTime("0s")); assertEquals(25*60*60*1000, DFSUtil.parseRelativeTime("25h")); assertEquals(4*24*60*60*1000l, DFSUtil.parseRelativeTime("4d")); assertEquals(999*24*60*60*1000l, DFSUtil.parseRelativeTime("999d"));
assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 1L); assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 5L);
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name()); assertEquals(3, dockerCommands.size()); assertEquals("[docker-command-execution]", dockerCommands.get(0)); assertEquals(" docker-command=pull", dockerCommands.get(1)); assertEquals(" image=" + MOCK_IMAGE_NAME, dockerCommands.get(2));
assertEquals(1800L, interval);
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals(1, split("/a").size()); assertEquals(0, split("/").size()); assertEquals(3, split("/a/b/c").size()); assertEquals(3, split("/a/b/c/").size()); assertEquals(3, split("a/b/c").size());
assertTrue(nn1Count.get() < NUM_ITERATIONS && nn1Count.get() > 0); assertTrue(nn2Count.get() < NUM_ITERATIONS && nn2Count.get() > 0); assertTrue(nn3Count.get() < NUM_ITERATIONS && nn3Count.get() > 0); assertEquals(NUM_ITERATIONS, nn1Count.get() + nn2Count.get() + nn3Count.get());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(l("3.txt"), finalDestination(l(MAGIC, "2", "3.txt")));
assertEquals(2, test.getChildQueues().size()); assertEquals(2, childQueuesFound); assertEquals(3, test.getChildQueues().size());
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertTrue("Container allocation is expected to fail!", failedToAllocate);
assertTrue("testBytesToCodePoint error !!!", bytes.position() == 6 );
assertEquals(0, taid.getTaskId().getJobId().getAppId().getClusterTimestamp()); assertEquals(1, taid.getTaskId().getJobId().getAppId().getId()); assertEquals(1, taid.getTaskId().getJobId().getId()); assertEquals(2, taid.getTaskId().getId()); assertEquals(3, taid.getId());
assertEquals(job, newJob);
assertEquals(i, fromList);
assertEquals(0, split("").size()); assertEquals(0, split("/").size());
assertEquals(failureMessage, MOCKED_NOW, new File(unjarDir, TestRunJar.FOOBAR_TXT).lastModified()); assertEquals(failureMessage, MOCKED_NOW_PLUS_TWO_SEC, new File(unjarDir, FOOBAZ_TXT).lastModified());
assertTrue(ml.includes("10.119.103.112")); assertFalse(ml.includes("10.119.103.111"));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue("Reference count should be open", clr.isOpen()); assertFalse("Reference count should be closed", clr.isOpen());
assertEquals("wrong result", "172.17.0.19", ((ARecord) recs[0]).getAddress().getHostAddress()); assertTrue("not an ARecord", recs[0] instanceof ARecord);
assertEquals(Result.FAIL, name.apply(item, -1));
assertEquals(qc2.getTypeSpace(t), qc1.getTypeSpace(t)); assertSame(QuotaCounts.STORAGE_TYPE_RESET, qc1.tsCounts);
assertTrue(stdout.toByteArray().length == 0); assertTrue(stderr.toByteArray().length == 0); assertTrue(file.exists());
assertEquals(keypass, ((TestBuilder)builder).keypass); assertEquals(storepass, ((TestBuilder)builder).keystorePassword); assertEquals(trustpass, ((TestBuilder)builder).truststorePassword);
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals( sortedString("d1/f1", "d1/f1.1"), sortedString(items) );
assertEquals("root children", "default,admins,users", csConfig.get(PREFIX + "root.queues")); assertEquals("root.admins children", "bob,alice", csConfig.get(PREFIX + "root.admins.queues")); assertNull("root.default children", csConfig.get(PREFIX + "root.default" + ".queues")); assertEquals("root.users children", "john,joe", csConfig.get(PREFIX + "root.users.queues"));
assertEquals((long)content.length, infile.length()); assertEquals(ViewFileSystem.class, vfs.getClass()); assertEquals(content.length, stat.getLen()); assertTrue(path + " should have erasure coding unset in " + "FileStatus#toString(): " + stat, stat.toString().contains("isErasureCoded=false")); assertEquals(content.length, deSer.getLen()); assertFalse(deSer.isErasureCoded());
assertNull(factory.getSerializer(byte[].class)); assertNull(factory.getSerializer(byte.class));
assertTrue(isNodeInReports(reports, "node" + i));
assertThat(latencyDetails).describedAs("AbfsPerfTracker should be empty").isNull(); assertThat(latencyDetails).describedAs("AbfsPerfTracker should return no record").isNull();
assertEquals(-1, exitCode);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue(fnfe.getMessage().contains("File does not exist")); assertTrue(e.getMessage().contains("Directory does not exist")); assertTrue(f == from); assertTrue(f == from); assertTrue(fnfe.getMessage().contains("Path is not a file")); assertTrue(d == from);
assertEquals(0, rmAdminCLI.run(args));
assertEquals("/a/b@3", KeyProvider.buildVersionName("/a/b", 3)); assertEquals("/aaa@12", KeyProvider.buildVersionName("/aaa", 12));
assertEquals(expectedNonDfsUsage, spyVolume.getNonDfsUsed());
assertEquals(DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_FACTOR_DEFAULT, scheduler.getDecayFactor(), 0.00001); assertEquals(0.125, scheduler.getDecayFactor(), 0.00001);
assertNotNull(pmExpired);
assertTrue( "Unexpected exception: " + StringUtils.stringifyException(ioe), ioe.getMessage().contains("Unable to download to any storage"));
assertEquals(DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_DEFAULT, scheduler.getDecayPeriodMillis()); assertEquals(1058L, scheduler.getDecayPeriodMillis());
assertEquals("a", trimQueueName(s));
assertEquals("wrong result", "172.17.0.19", ((ARecord) recs[0]).getAddress().getHostAddress()); assertEquals("wrong ttl", 30L, recs[0].getTTL()); assertTrue("not an ARecord", recs[0] instanceof ARecord); assertEquals("wrong ttl", 30L, recs[0].getTTL());
assertEquals("The roll interval was not set correctly", sink.rollIntervalMillis, 600000); assertEquals("The roll offset interval was not set correctly", sink.rollOffsetIntervalMillis, 1); assertEquals("The base path was not set correctly", sink.basePath, new Path("path")); assertEquals("ignore-error was not set correctly", sink.ignoreError, true); assertEquals("allow-append was not set correctly", sink.allowAppend, true); assertEquals("The source was not set correctly", sink.source, "src");
assertEquals(WRONG_ROOT_LOG_DIR_MSG, "/tmp/logs", fc.getRemoteRootLogDir().toString()); assertEquals(WRONG_ROOT_LOG_DIR_SUFFIX_MSG, "logs-tfile", fc.getRemoteRootLogDirSuffix());
assertSame(1, results.size());
assertEquals("images", StringUtils.join(",", dockerImagesCommand.getDockerCommandWithArguments() .get("docker-command"))); assertEquals("image name", "foo", StringUtils.join(",", dockerImagesCommand.getDockerCommandWithArguments().get("image"))); assertEquals(2, dockerImagesCommand.getDockerCommandWithArguments().size());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(expResult, result); assertEquals(expResult, result);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals("foo", getContent(baseUrl +"test/foo").trim()); assertEquals("foo", getContent(baseUrl +"test/foo/index").trim()); assertEquals("bar", getContent(baseUrl +"test/foo/bar").trim()); assertEquals("default", getContent(baseUrl +"test").trim()); assertEquals("default", getContent(baseUrl +"test/").trim()); assertEquals("default", getContent(baseUrl).trim());
assertSame(spyYarnHandler, yarnThread.getUncaughtExceptionHandler());
assertEquals("Incorrect exception message", "No space available in any of the local directories.", e.getMessage());
assertEquals(expected, contentSummary.toSnapshot(false));
assertThat(DistCpUtils.getRelativePath(root, child)).isEqualTo("/a");
assertEquals(0, ret[i]);
assertEquals("stop", StringUtils.join(",", dockerStopCommand.getDockerCommandWithArguments() .get("docker-command"))); assertEquals("foo", StringUtils.join(",", dockerStopCommand.getDockerCommandWithArguments().get("name"))); assertEquals("10", StringUtils.join(",", dockerStopCommand.getDockerCommandWithArguments().get("time"))); assertEquals(3, dockerStopCommand.getDockerCommandWithArguments().size());
assertEquals(before, readModifiedUTF(UTF8.getBytes(before)));
assertEquals("year=2017/month=10", getPartition("year=2017/month=10/part-0000.avro"));
assertEquals("Number of devices", 1, devices.size()); assertEquals("Device ID", 0, device.getId()); assertEquals("Major number", 8, device.getMajorNumber()); assertEquals("Minor number", 1, device.getMinorNumber()); assertEquals("Status", "ONLINE", device.getStatus()); assertTrue("Device is not healthy", device.isHealthy());
assertEquals("create #1\\n", log.toString());
assertEquals("Iteration: " + i, 1.0, set.fillRatio(), 0.0); assertEquals("Iteration: " + i, Math.max((size - i) / (double) size, 0.53125), set.fillRatio(), 0.0);
assertNotNull(attrs); assertEquals("There should be HASH and RANGE attributes", 2, attrs.size()); assertThat(definition.getAttributeName(), anyOf(is(PARENT), is(CHILD))); assertEquals(S.toString(), definition.getAttributeType());
assertFalse("Added an integer as a service", addIfService(notAService)); assertEquals("Incorrect number of services", 2, testService.getServices().size());
assertTrue("should have throttled for at least 8 second", sw.now(TimeUnit.MILLISECONDS) > 8000); assertTrue("should have throttled for at most 12 second", sw.now(TimeUnit.MILLISECONDS) < 12000);
assertTrue(FIRST_CALL_FAILURE, tracker.visit(node1Request)); assertFalse(NODE_VISITED + ANY_FAILURE, tracker.visit(anyRequest)); assertFalse(NODE_VISITED + RACK_FAILURE, tracker.visit(rackRequest)); assertTrue(NODE_VISITED + "Different node visit failed", tracker.visit(node2Request));
assertEquals(0, scheduler.getPriorityLevel(mockCall("A")));
assertEquals(capacities.length, racks.length); assertTrue("\'balancer.id\' file doesn\'t exist!", fs.exists(Balancer.BALANCER_ID_PATH)); assertEquals("Exit status code mismatches", ExitStatus.IO_EXCEPTION.getExitCode(), exitCode); assertTrue("\'balancer.id\' file doesn\'t exist!", fs.exists(Balancer.BALANCER_ID_PATH)); assertEquals("Exit status code mismatches", ExitStatus.SUCCESS.getExitCode(), exitCode);
assertEquals("Return value", -1, retVal); assertTrue("Error content missing", fsTestCommons.getErrContent() .toString() .contains("Output directory or console mode was not defined"));
assertEquals(ID, proto.getId()); assertEquals(USER, proto.getUser()); assertEquals(CONTAINER_ID, proto.getDockerContainerId()); assertEquals(DeletionTaskType.DOCKER_CONTAINER.name(), proto.getTaskType());
assertEquals(map.getDatanodeByHost("1.1.1.1"), dataNodes[0]); assertEquals(map.getDatanodeByHost("2.2.2.2"), dataNodes[1]); assertTrue(node == dataNodes[2] || node == dataNodes[3]); assertNull(map.getDatanodeByHost("4.4.4.4"));
assertTrue("Capacity file exists", capacityFile.exists()); assertTrue("Capacity file length > 0", capacityFile.length() > 0); assertTrue("No. of configuration elements > 0", conf.size() > 0); assertTrue("Yarn site exists", yarnSiteFile.exists()); assertTrue("Yarn site length > 0", yarnSiteFile.length() > 0); assertTrue("Mapping rules file exists", mappingRulesFile.exists()); assertTrue("Mapping rules file length > 0", mappingRulesFile.length() > 0);
assertEquals("No. of devices", 2, allocated.size()); assertTrue("Device missing", allocated.contains(device0)); assertTrue("Device missing", allocated.contains(device1));
assertNotNull("Rule object is null", rule); assertEquals("Names not equal", rule.getName(), exists);
assertTrue("AM should have been allocated!", result);
assertEquals("group1.counter1:1", counters.makeCompactString());
assertEquals(WRONG_ROOT_LOG_DIR_MSG, "target/app-logs/TFile", fc.getRemoteRootLogDir().toString()); assertEquals(WRONG_ROOT_LOG_DIR_SUFFIX_MSG, "TFile", fc.getRemoteRootLogDirSuffix());
assertEquals(oldStatus.getModificationTime(), snapshotStatus.getModificationTime()); assertEquals(oldStatus.getAccessTime(), snapshotStatus.getAccessTime());
assertFalse(proxy.notify(request).getAccepted()); assertNotNull(set); assertEquals(0, set.size()); assertEquals( "NM upload metrics aren\'t updated.", 1, SharedCacheUploaderMetrics.getInstance().getRejectUploads() - rejected);
assertEquals("/tmp/abc.txt", returnedEx.getPath().toString());
assertEquals("val1", conf.get("key1"));
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name()); assertEquals(3, dockerCommands.size()); assertEquals("[docker-command-execution]", dockerCommands.get(0)); assertEquals(" docker-command=stop", dockerCommands.get(1)); assertEquals(" name=" + MOCK_CONTAINER_ID, dockerCommands.get(2));
assertEquals(expected, actual);
assertEquals(0, ret); assertEquals( "One line per DataNode like: Uptime: XXX, Software version: x.y.z," + " Config version: core-x.y.z,hdfs-x", 1, outs.size()); assertThat(outs.get(0), is(allOf(containsString("Uptime:"), containsString("Software version"), containsString("Config version"))));
assertEquals("1st conf param is incorrect", "foo", g.getCommandLine().getOptionValues("conf")[0]); assertEquals("2st conf param is incorrect", "bar", g.getCommandLine().getOptionValues("conf")[1]);
assertTrue("Agent-based allocation failed", reservationID != null); assertTrue("Agent-based allocation failed", plan.getAllReservations() .size() == 3); assertTrue( "Agent-based allocation unexpected", Resources.equals(cs.getResourcesAtTime(i), Resource.newInstance(2048 * 10, 2 * 10))); assertTrue( "Agent-based allocation unexpected", Resources.equals(cs.getResourcesAtTime(i), Resource.newInstance(2048 * 10, 2 * 10)));
assertNull("Retrieved IP file path", path);
assertEquals(new File(testDir.toString()), item.toFile()); assertEquals(new File(testDir + "/d1/f1"), item.toFile()); assertEquals(new File(testDir + "/d1/f1"), item.toFile());
assertEquals(WRONG_ROOT_LOG_DIR_MSG, "target/app-logs/default", fc.getRemoteRootLogDir().toString()); assertEquals(WRONG_ROOT_LOG_DIR_SUFFIX_MSG, "log-tfile", fc.getRemoteRootLogDirSuffix());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(names.size(), result.size()); assertEquals(result.get(0), NetworkTopology.DEFAULT_RACK); assertEquals(result.get(1), NetworkTopology.DEFAULT_RACK);
assertEquals("New option was ignored", "7", g.getCommandLine().getOptionValues("newOpt")[0]);
assertNotNull("testDeleteFile error !!!", writer);
assertNull(conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY));
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name()); assertEquals(4, dockerCommands.size()); assertEquals("[docker-command-execution]", dockerCommands.get(0)); assertEquals(" docker-command=kill", dockerCommands.get(1)); assertEquals(" name=" + MOCK_CONTAINER_ID, dockerCommands.get(2)); assertEquals(" signal=" + ContainerExecutor.Signal.TERM.name(), dockerCommands.get(3));
assertTrue(msg.startsWith("STARTUP_MSG:"));
assertEquals(FTP.BLOCK_TRANSFER_MODE, ftp.getTransferMode(conf)); assertEquals(FTP.STREAM_TRANSFER_MODE, ftp.getTransferMode(conf)); assertEquals(FTP.COMPRESSED_TRANSFER_MODE, ftp.getTransferMode(conf)); assertEquals(FTPClient.BLOCK_TRANSFER_MODE, ftp.getTransferMode(conf));
assertThat(resultEntity.getMetrics()).hasSize(groups * 3); assertEquals(100 * n, m.getSingleDataValue().intValue()); assertEquals(3 * n, m.getSingleDataValue().intValue()); assertEquals(n - 1, m.getSingleDataValue()); assertThat(resultEntity1.getMetrics()).hasSize(3); assertEquals(100 * n, m.getSingleDataValue().intValue()); assertEquals(3 * n, m.getSingleDataValue().intValue()); assertEquals(n - 1, m.getSingleDataValue());
assertEquals(bContiguous, bContiguous2); assertEquals(bStriped, bStriped2);
assertTrue(dir.toString().endsWith("UUID/" + StagingCommitterConstants.STAGING_UPLOADS));
assertFalse("KeyProvider uri is not supported", proto.hasKeyProviderUri());
assertThat(DistCpUtils.getRelativePath(root, child)).isEqualTo("/xyz/file");
assertNotNull("Executing a task on a non-existing volume should throw an " + "Exception.", e); assertEquals(total, count);
assertNotNull(map.get(bpid, block)); assertNull(map.get(bpid, b)); assertNull(map.get(bpid, b)); assertNotNull(map.get(bpid, block.getBlockId())); assertNull(map.get(bpid, 0));
assertTrue(LocalDirAllocator.isContextValid(contextCfgItemName)); assertFalse(LocalDirAllocator.isContextValid(contextCfgItemName));
assertEquals(Result.PASS, test.apply(item, -1)); assertEquals(Result.FAIL, test.apply(item, -1));
assertTrue(exitCode != 0); assertTrue(sysErrStream.toString().startsWith( "Unable to get ApplicationState"));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(USER, context.getUser());
assertEquals(1024 + i, tree.last().intValue()); assertEquals(1279, tree.last().intValue());
assertEquals( "[]", CrcUtil.toMultiCrcString(new byte[0]));
assertSame(spyErrorHandler, errorThread.getUncaughtExceptionHandler());
assertEquals(12, outs.size()); assertEquals(DFS_BLOCK_PLACEMENT_EC_CLASSNAME_KEY, outs.get(1)); assertEquals(DFS_BLOCK_REPLICATOR_CLASSNAME_KEY, outs.get(2)); assertEquals(DFS_HEARTBEAT_INTERVAL_KEY, outs.get(3)); assertEquals(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, outs.get(4)); assertEquals(errs.size(), 0);
assertEquals(ratioOfMemories, ratio, 0.00001); assertEquals(ratioOfExtraResources, ratio, 0.00001);
assertFalse(new Trash(conf).isEnabled()); assertFalse(new Trash(conf).isEnabled()); assertTrue(new Trash(conf).isEnabled()); assertTrue(val1 == 0); assertTrue(val2 == 0);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue(Files.isSymbolicLink(symLink.toAbsolutePath())); assertTrue(Files.exists(untarFile.toPath())); assertTrue(Files.exists(FileSystems.getDefault().getPath(untarFile .getPath(), tmpDir))); assertTrue(Files.isSymbolicLink(FileSystems.getDefault().getPath(untarFile .getPath().toString(), symLink.toString())));
assertTrue("Create file", file.createNewFile()); assertTrue("Make dir", dir.mkdir()); assertTrue("Make jarsDir", jarsDir.mkdir()); assertTrue("Create non-jar file", nonJarFile.createNewFile()); assertTrue("Create jar file", jarFile.createNewFile()); assertEquals(3, urls.length); assertEquals(file.toURI().toURL(), urls[0]); assertEquals(dir.toURI().toURL(), urls[1]); assertEquals(jarFile.toURI().toURL(), urls[2]);
assertEquals(EXIT_SUCCESS, result);
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType. REMOVE_DOCKER_CONTAINER.name(), privOp.getOperationType().name()); assertEquals(2, args.size()); assertEquals(MOCK_CGROUP_HIERARCHY, args.get(0)); assertEquals(MOCK_CONTAINER_ID, args.get(1));
assertNotNull(e); assertTrue(e instanceof JobCommitFailedEvent); assertTrue(fs.exists(startCommitFile)); assertFalse(fs.exists(endCommitSuccessFile)); assertTrue(fs.exists(endCommitFailureFile));
assertEquals(summary, hosts.get(0), normalizedHosts.get(0)); assertFalse("Element 1 equal "+ summary, normalizedHosts.get(1).equals(hosts.get(1))); assertEquals(summary, hosts.get(0), normalizedHosts.get(1)); assertFalse("Element 2 equal " + summary, normalizedHosts.get(2).equals(hosts.get(2))); assertEquals(summary, hosts.get(3), normalizedHosts.get(3));
assertEquals(clientAddr, getRemoteAddr(clientAddr, null, false));
assertEquals("375.66", info.getDriverVersion()); assertEquals(2, info.getGpus().size());
assertFalse(item.hasAttribute(IS_AUTHORITATIVE));
assertNotNull(ni.getHealthReport());
assertEquals("Major number", 16, device0.getMajorNumber()); assertEquals("Minor number", 1, device0.getMinorNumber()); assertEquals("Major number", 29, device1.getMajorNumber()); assertEquals("Minor number", 2, device1.getMinorNumber()); assertEquals("Major number", 4, device2.getMajorNumber()); assertEquals("Minor number", 60, device2.getMinorNumber());
assertNull(store.addResourceReference(key, new SharedCacheResourceReference(id, "user")));
assertTrue(localFs.mkdirs(new Path(dir))); assertEquals(f1.getName(), p1.getName()); assertEquals("file", p1.getFileSystem(conf).getUri().getScheme());
assertFalse(hdfsFileStatus.isSymlink()); assertEquals(expectString, hdfsFileStatus.toString());
assertTrue("Could not create dirs", new File(newMountPoint, "cpu").mkdirs()); assertTrue("Yarn cgroup should exist", hierarchyFile.exists());
assertTrue(DataNodeLayoutVersion.supports(LAST_NON_RESERVED_COMMON_FEATURE, first.getInfo().getLayoutVersion())); assertEquals(LAST_COMMON_FEATURE.getInfo().getLayoutVersion() - 1, first.getInfo().getLayoutVersion());
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals("True has to be returned in this case", preferredBlockSize, inf.getPreferredBlockSize());
assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue()); assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue()); assertEquals("Counter value is not set correctly", expectedValue, counter.getValue());
assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p))); assertFalse(lfs.util().exists(fp));
assertTrue("Array Contents Mismatch", Arrays.equals(INPUT, stream.getBuffer())); assertTrue("Writing beyond limit did not throw an exception", caughtException); assertTrue("Limit did not get reset correctly", (stream.getLimit() == SIZE)); assertTrue("Array Contents Mismatch", Arrays.equals(INPUT, stream.getBuffer())); assertTrue("Writing beyond limit did not throw an exception", caughtException);
assertFalse("Hit error", hasError.get());
assertEquals(actualPath.getName(), localPath.getName()); assertEquals(actualPath.getParent().getName(), localPath.getName());
assertThat(assignedContainer).isEqualTo(1);
assertFalse(curator.exists(node1)); assertNull(curator.getStringData(node1)); assertEquals("setData", curator.getStringData(node1)); assertFalse(curator.exists(node2)); assertNull(curator.getStringData(node2, stat)); assertEquals("setData", curator.getStringData(node2, stat));
assertEquals(2, addQueueInfo.size());
assertEquals("2", lastElement(l("first", "2")));
assertEquals(expectedStat, storageStat);
assertTrue(localFs.mkdirs(new Path(dir1))); assertTrue(localFs.getFileStatus(p1.getParent()).isDirectory()); assertEquals(e.getClass(), FileNotFoundException.class);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(expected.getStatus(), actual.getStatus());
assertEquals( configurableResource.getResource(clusterResource).getMemorySize(), 1024); assertEquals( configurableResource.getResource(clusterResource).getVirtualCores(), 1); assertNull("The absolute resource should be null since object" + " configurableResource is initialized with percentages", configurableResource.getResource()); assertNull("The absolute resource should be null since cluster resource" + " is null", configurableResource.getResource(null));
assertFalse(e.hasExceptions()); assertTrue(e.hasExceptions());
assertFalse(fencer.fence(MOCK_TARGET));
assertEquals(l(BASE, "home", "3.txt"), finalDestination(l(BASE, "home", MAGIC, "2", "3.txt")));
assertNull(ProxyUriUtils.getUriFromTrackingPlugins(id, list));
assertTrue(cc.isUsable()); assertTrue(cc.isActive());
assertEquals(defaultAddr, NetUtils.getHostPortString(addr));
assertTrue("Nested rule should have been Default rule", parent instanceof DefaultPlacementRule);
assertEquals(key, conf.get(key));
assertEquals(true, instance.addAll(list)); assertEquals(false, instance.addAll(list));
assertEquals(Result.FAIL, name.apply(item, -1));
assertTrue(foundSetting);
assertEquals("wrong result", "httpd-1.test1.root.dev.test.", ((PTRRecord) recs[0]).getTarget().toString());
assertEquals(10, records.size()); assertEquals(5, records.size()); assertEquals(3, records.size()); assertEquals(1, records.size()); assertEquals(1, records.size()); assertTrue(records.get(0).isReadOnly()); assertEquals(1, records.size());
assertArrayEquals( new long[] { 0, 0, -1, -1, -1 }, blocks.getBlockListAsLongs());
assertEquals(0,e.status);
assertEquals(TOTAL_FILES, stats.blocksScannedSinceRestart); assertEquals(BYTES_SCANNED_PER_FILE * TOTAL_FILES, stats.bytesScannedInPastHour);
assertNotNull(metricsSystem.getSource(metrics.getName())); assertNull(metricsSystem.getSource(metrics.getName()));
assertTrue(stat1.isDirectory()); assertFalse(stat2.isDirectory());
assertTrue(env.isEmpty());
assertEquals(one, two);
assertNull(ZKUtil.resolveConfIndirection(null)); assertEquals("x", ZKUtil.resolveConfIndirection("x")); assertEquals("hello world", ZKUtil.resolveConfIndirection( "@" + TEST_FILE.getAbsolutePath())); assertTrue(fnfe.getMessage().startsWith(BOGUS_FILE));
assertTrue(test.isAction()); assertFalse(test.isAction());
assertEquals(SERVICE_SHUTDOWN_TIMEOUT, shutdownTimeout, ShutdownHookManager.getShutdownTimeout(conf));
assertTrue(e.getMessage().contains("illegal network location"));
assertTrue(buf[i].compareTo(buf[j]) == -buf[j].compareTo(buf[i])); assertTrue((i == j) == (buf[i].compareTo(buf[j]) == 0)); assertTrue(buf[0].compareTo(buf[1]) < 0); assertTrue(buf[1].compareTo(buf[2]) > 0); assertTrue(buf[2].compareTo(buf[3]) > 0); assertTrue(buf[3].compareTo(buf[4]) < 0);
assertEquals(STATE.INITED, webAppProxy.getServiceState()); assertEquals(proxyAddress, ((WebAppProxy) service).getBindAddress()); assertEquals(STATE.STARTED, webAppProxy.getServiceState());
assertEquals(result, actual);
assertFalse(DFSUtil.isValidName("/foo/../bar")); assertFalse(DFSUtil.isValidName("/foo/./bar"));
assertTrue(fencer.tryFence(TEST_TARGET, "echo hello"));
assertTrue(n instanceof DatanodeDescriptor); assertTrue(diskUnderL1.contains(dd.getHostName())); assertTrue(n instanceof DatanodeDescriptor); assertTrue(ramdiskUnderL1.contains(dd.getHostName())); assertTrue(n instanceof DatanodeDescriptor); assertTrue(archiveUnderL1.contains(dd.getHostName())); assertTrue(n instanceof DatanodeDescriptor); assertTrue(ssdUnderL1.contains(dd.getHostName()));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals("No configuration but with environment ALTERAOCLSDKROOT set", getTestParentFolder() + "/bin/aocl", openclPlugin.getPathToExecutable());
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertTrue(ml.includes("10.119.103.112")); assertTrue(ml.includes("1.2.3.4"));
assertThat("Path should be the same with file scheme", getLocalTaskAttemptTempDir(config, jobUUID, tac.getTaskAttemptID()).toString(), StringStartsWith.startsWith(commonPath));
assertFalse("Agent-based allocation failed", result); assertTrue("Agent-based allocation failed", plan.getAllReservations() .size() == 2);
assertEquals("The next roll time should have been 1 second in the future", calendar.getTimeInMillis() + 1000, rfsSink.nextFlush.getTimeInMillis()); assertEquals("The next roll time should have been 990 ms in the future", calendar.getTimeInMillis() + 990, rfsSink.nextFlush.getTimeInMillis()); assertEquals("The next roll time should have been 990 ms in the future", calendar.getTimeInMillis() + 990, rfsSink.nextFlush.getTimeInMillis());
assertNull(committer.getOutputPath()); assertNull(committer.getWorkPath());
assertEquals("Reading byte after reaching limit should return -1", -1, limitInputStream.read()); assertEquals("Incorrect byte returned", new Random(0).nextInt(), limitInputStream.read());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals("The minimum compatible layout version has changed. " + "Downgrade to prior versions is no longer possible. Please either " + "restore compatibility, or if the incompatibility is intentional, " + "then update this assertion.", expectedMinCompatLV, actualMinCompatLV);
assertFalse ("Null Ip is in the list", ipList.isIn(null));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertNotNull(hostname1); assertEquals(hostname3, hostname2); assertEquals(hostname2, hostname1); assertTrue( "Took too long to determine local host - caching is not working", interval < 20000);
assertEquals(b.getBlock(), b1.getBlock()); assertEquals(dnInfo.length, dnInfo1.length);
assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_B, BLOCK_1_GS1).hashCode()); assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_A, BLOCK_2_GS1).hashCode()); assertEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode());
assertEquals("nn1", DFSUtil.getBackupNameServiceId(conf));
assertTrue("should have throttled for at least 3 second", sw.now(TimeUnit.MILLISECONDS) >= 3000);
assertEquals(0, scheduler.getCallCostSnapshot().size()); assertEquals(1, scheduler.getCallCostSnapshot().get("A").longValue()); assertEquals(1, scheduler.getCallCostSnapshot().get("A").longValue()); assertEquals(3, scheduler.getCallCostSnapshot().get("A").longValue()); assertEquals(1, scheduler.getCallCostSnapshot().get("B").longValue());
assertEquals(0, rmAdminCLI.run(args)); assertNotNull("resource for " + nodeIdStr + " shouldn\'t be null.", resource); assertEquals("resource value for " + nodeIdStr + " is not as expected.", ResourceOption.newInstance(expectedResource, ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT), resource);
assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());
assertEquals(uugi, uugi); assertFalse(uugi.equals(ugi2)); assertFalse(uugi.hashCode() == ugi2.hashCode()); assertEquals(uugi, ugi3); assertEquals(uugi.hashCode(), ugi3.hashCode());
assertEquals(capacity, volumeChanged.getCapacity()); assertEquals(capacity, volumeFixed.getCapacity());
assertEquals("172.17.4.0", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, RANGE, INDEX));
assertNotEquals("trustStoreLocation", clientTsLoc); assertNotEquals(conf, sslConfLoaded);
assertNull(pmExpired);
assertEquals(0, rmAdminCLI.run(args));
assertTrue(NetUtils.isLocalAddress(InetAddress.getLocalHost())); assertTrue(NetUtils.isLocalAddress(addr)); assertFalse(NetUtils.isLocalAddress(InetAddress.getByName("8.8.8.8")));
assertNull(mockDttr.timerTask); assertNull(mockDttr.timerTask); assertNull(mockDttr.timerTask);
assertEquals(l("first", "2"), finalDestination(l("first", MAGIC, "2")));
assertSame(spyOomHandler, oomThread.getUncaughtExceptionHandler());
assertTrue(test != null);
assertEquals(s, new FsPermission(s).toShort()); assertEquals(s, new FsPermission(String.format("%03o", s)).toShort()); assertEquals(s, f.toShort()); assertEquals(s, f2.toShort()); assertEquals(02000, s);
assertNull(sc.getOutputPath());
assertEquals("def1_val", env.get("env1")); assertEquals("def2_val", env.get("env2")); assertEquals("def3_val", env.get("env3")); assertNull(env.get("env4"));
assertEquals(0, falseNeg); assertTrue(falsePos < 2);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertTrue(helper.record(1).shouldLog()); assertFalse(helper.record(base, base * 2).shouldLog()); assertTrue(action.shouldLog()); assertEquals(5, action.getCount()); assertEquals(0.5 * i, action.getStats(i - 1).getMean(), 0.01); assertEquals(1.0 * i, action.getStats(i - 1).getMax(), 0.01); assertEquals(0.0, action.getStats(i - 1).getMin(), 0.01);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(getErrorMessage("maxApps"), 25L, metrics.getMaxApps());
assertTrue(ml.includes("1.2.3.4")); assertFalse(ml.includes("1.2.3.5"));
assertEquals(true, ret);
assertTrue(new Path("/").isAbsolute()); assertTrue(new Path("/foo").isAbsolute()); assertFalse(new Path("foo").isAbsolute()); assertFalse(new Path("foo/bar").isAbsolute()); assertFalse(new Path(".").isAbsolute()); assertTrue(new Path("c:/a/b").isAbsolute()); assertFalse(new Path("c:a/b").isAbsolute());
assertEquals(7, entityTypes.size()); assertEquals("ACL_ENTITY_TYPE_1", entityTypes.get(0)); assertEquals("OLD_ENTITY_TYPE_1", entityTypes.get(1)); assertEquals(entityType1, entityTypes.get(2)); assertEquals(entityType2, entityTypes.get(3)); assertEquals(entityType4, entityTypes.get(4)); assertEquals(entityType5, entityTypes.get(5));
assertEquals("hello", text.toString()); assertEquals(5, text.getTextLength()); assertEquals("hello w", text.toString()); assertEquals(7, text.getTextLength()); assertEquals("he", text.toString()); assertEquals(2, text.getTextLength());
assertTrue("The valid local file should get saved properly", localPaths.get(1).length() > 0);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertNotNull(longStat); assertEquals(expectedStat, longStat.getValue());
assertSame(strongInternLiteralABC, strongInternSubstringABC); assertSame(strongInternLiteralABC, strongInternHeapABC); assertSame(strongInternSubstringABC, strongInternHeapABC);
assertEquals(EXIT_SUCCESS, result);
assertTrue(localFs.mkdirs(dstPath));
assertTrue(fencer.fence(MOCK_TARGET));
assertEquals("Upload UUID", jobUUID, StagingCommitter.getUploadUUID(config, JOB_ID));
assertEquals(1, DelayServlet.calledTimes); assertTrue(elapsedTime < 2000);
assertTrue(helper.record(1, 2).shouldLog());
assertEquals(1, apps.size());
assertEquals("Application ID:", item.key); assertEquals("application_0_0000", item.value); assertEquals("Application Name:", item.key); assertEquals("AppName", item.value); assertEquals("User:", item.key); assertEquals("User", item.value); assertEquals("Started on:", item.key); assertEquals("Elasped: ", item.key);
assertEquals("\'foobar\'", Shell.bashQuote("foobar")); assertEquals("\'foo\'\\\\\'\'bar\'", Shell.bashQuote("foo\'bar")); assertEquals("\'\'\\\\\'\'foo\'\\\\\'\'bar\'\\\\\'\'\'", Shell.bashQuote("\'foo\'bar\'"));
assertTrue(test.equals(SimpleWritable.class)); assertTrue(test.equals(SimpleWritable.class));
assertEquals(SIMPLE, SecurityUtil.getAuthenticationMethod(conf)); assertEquals(SIMPLE, SecurityUtil.getAuthenticationMethod(conf)); assertEquals(KERBEROS, SecurityUtil.getAuthenticationMethod(conf)); assertEquals("java.lang.IllegalArgumentException: " + "Invalid attribute value for " + HADOOP_SECURITY_AUTHENTICATION + " of kaboom", error);
assertEquals( Resource.newInstance(1024 * (alloc[i] + i), (alloc[i] + i)), plan.getTotalCommittedResources(start + i)); assertEquals( Resource.newInstance(1024 * (alloc[i] + i), (alloc[i] + i)), userCons.getCapacityAtTime(start + i)); assertEquals(Resource.newInstance(0, 0), plan.getTotalCommittedResources(start + i)); assertEquals(Resource.newInstance(0, 0), userCons.getCapacityAtTime(start + i));
assertEquals(ExitStatus.NO_MOVE_PROGRESS.getExitCode(), r);
assertEquals(orig, copy);
assertEquals("scheme:/", uri.toString()); assertEquals("scheme:/path", uri.toString());
assertEquals("Assert list creation w/ no elements results in length 0", 0, arr.length);
assertEquals(tbw, readTbw);
assertEquals(0, rmAdminCLI.run(args));
assertTrue("Path doesn\'t end in specified dir: " + localPath, localPath.endsWith("dir" + i)); assertFalse("Path has internal whitespace: " + localPath, localPath.contains(" "));
assertNotEquals(0, ToolRunner.run(halr, args)); assertEquals(FILE_COUNT, app1Files.length);
assertEquals(EXIT_EXCEPTION_THROWN, result);
assertEquals(true, instance.isEmpty()); assertEquals(false, instance.isEmpty()); assertEquals(true, instance.isEmpty());
assertFalse("New reference count should not equal STATUS_CLOSED_MASK", clr.unreference()); assertEquals("Incorrect reference count", 1, clr.getReferenceCount());
assertEquals("ab&lt;cd", HtmlQuoting.quoteHtmlChars("ab<cd")); assertEquals("ab&gt;", HtmlQuoting.quoteHtmlChars("ab>")); assertEquals("&amp;&amp;&amp;", HtmlQuoting.quoteHtmlChars("&&&")); assertEquals(" &apos;\\n", HtmlQuoting.quoteHtmlChars(" \'\\n"));
assertEquals(numLocations, storage.getNumStorageDirs()); assertTrue(addedLocation.isEmpty()); assertEquals(numLocations, storage.getNumStorageDirs()); assertEquals(6, storage.getNumStorageDirs());
assertTrue("should not have throttled", sw.now(TimeUnit.MILLISECONDS) < 1000);
assertEquals(expected, parser.parse(in, Function.identity()));
assertEquals(1, zkAuths.size()); assertEquals("a_scheme", zkAuthInfo.getScheme()); assertArrayEquals("a_password".getBytes(), zkAuthInfo.getAuth()); assertTrue(deleted);
assertEquals("No such interface name-of-an-unknown-interface", e.getMessage());
assertTrue("copyFilter should be instance of RegexpInConfigurationFilter", copyFilter instanceof RegexpInConfigurationFilter);
assertTrue(lfs.util().exists(p));
assertEquals(createResource(1, 0), subtract(createResource(2, 1), createResource(1, 1))); assertEquals(createResource(0, 1), subtract(createResource(1, 2), createResource(1, 1))); assertEquals(createResource(2, 2, 0), subtract(createResource(3, 3, 0), createResource(1, 1, 0))); assertEquals(createResource(1, 1, 2), subtract(createResource(2, 2, 3), createResource(1, 1, 1)));
assertEquals("first", lastElement(l("first")));
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE, client.getDataConnectionMode()); assertEquals(FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE, client.getDataConnectionMode()); assertEquals(FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE, client.getDataConnectionMode()); assertEquals(FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE, client.getDataConnectionMode());
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue(exceptionThrown);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertNull(sslConf.getResource("non-exist-ssl-client.xml")); assertNull(sslConf.get("ssl.client.truststore.location"));
assertTrue(in.wasClosedProperly());
assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p))); assertFalse(lfs.util().exists(fp));
assertTrue(storage.getRemovedStorageDirs().contains(sd));
assertSame("TaskID did not store the JobID correctly", jobId, taskId.getJobID()); assertEquals("Job ID was set unexpectedly in default contsructor", "", taskId.getJobID().getJtIdentifier());
assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType()); assertNotNull(entities2); assertEquals(entities1, entities2);
assertEquals(SERVICE_SHUTDOWN_TIMEOUT, ShutdownHookManager.TIMEOUT_MINIMUM, ShutdownHookManager.getShutdownTimeout(conf));
assertTrue(!MyPartitioner.isGetPartitionCalled());
assertEquals(2, mounts.size());
assertEquals(8, fcq.size());
assertEquals(0, cacheSize()); assertEquals(toConstruct.length, cacheSize()); assertEquals(0, cacheSize());
assertTrue(config.isEmpty());
assertEquals("TaskID incorrectly reported its type", type, taskId.getTaskType()); assertEquals("TaskID of default type incorrectly reported its type", TaskType.REDUCE, taskId.getTaskType());
assertEquals(Result.FAIL, name.apply(item, -1));
assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(12345, addr.getPort()); assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(12345, addr.getPort()); assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(1000, addr.getPort()); assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(1000, addr.getPort());
assertEquals(XATTR.hashCode(), XATTR1.hashCode()); assertFalse(XATTR1.hashCode() == XATTR2.hashCode()); assertFalse(XATTR2.hashCode() == XATTR3.hashCode()); assertFalse(XATTR3.hashCode() == XATTR4.hashCode()); assertFalse(XATTR4.hashCode() == XATTR5.hashCode());
assertNull( "Source node was assigned a value. Expected \'null\' value because " + "chooseTarget was flagged to ignore source node locality", nodeCaptor.getValue());
assertEquals(0, ToolRunner.run(new DFSck(conf, out), new String[] { new Path("/ecDir/ecFile").toString(), "-blockId", id })); assertFalse(out.toString().contains("null"));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertFalse("110.113.221.222 is in the list", ipl.isIn("110.113.221.222"));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(expected, parser.parse(in, Function.identity()));
assertEquals(2, editsDirs.size());
assertTrue("The hashcode() method gave unequal hash codes for two equal " + "task IDs", taskId1.hashCode() == taskId2.hashCode());
assertEquals("",lastPathEntry("/"));
assertNotNull(conn); assertTrue(conn.isUsable());
assertEquals(editsDir.toString(), journalStorage.getRoot().toString()); assertEquals(editsDir.toString(), journalStorage.getRoot().toString());
assertTrue(helper.record().shouldLog()); assertFalse(helper.record().shouldLog()); assertTrue(helper.record().shouldLog());
assertEquals("Incorrect reference count", 1, clr.getReferenceCount());
assertEquals(retryAttempts + 1, FailServlet.calledTimes);
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(0); assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(1); assertThat(policy.getComparator().compare(r1, r2)).isEqualTo(-1);
assertEquals("/", mtEntry.getSourcePath()); assertEquals("/user", mtEntry.getSourcePath()); assertEquals("/user/a", mtEntry.getSourcePath()); assertEquals("/user/a", mtEntry.getSourcePath()); assertEquals("/user/a", mtEntry.getSourcePath()); assertEquals("/user", mtEntry.getSourcePath());
assertEquals(1, nn1Count.get()); assertEquals(0, nn2Count.get()); assertEquals(2, nn1Count.get()); assertEquals(0, nn2Count.get()); assertEquals(NUM_ITERATIONS, nn1Count.get()); assertEquals(0, nn2Count.get());
assertEquals(names.size(), result1.size()); assertEquals("/rack1", result1.get(0)); assertEquals("/rack2", result1.get(1)); assertEquals(result1, result2);
assertEquals("", new Path("/").getName()); assertEquals("foo", new Path("foo").getName()); assertEquals("foo", new Path("/foo").getName()); assertEquals("foo", new Path("/foo/").getName()); assertEquals("bar", new Path("/foo/bar").getName());
assertEquals("Incorrect time diff string returned", timeDiffStr, StringUtils.formatTimeSortable(timeDiff));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(BootstrapStandby.ERR_CODE_ALREADY_FORMATTED, rc); assertEquals(0, forceBootstrap(1));
assertTrue(!MyPartitioner.isGetPartitionCalled());
assertFalse(tmp1.getAbsolutePath().equals(baseFile.getAbsolutePath())); assertFalse(tmp2.getAbsolutePath().equals(baseFile.getAbsolutePath())); assertTrue(tmp1.exists() && tmp2.exists()); assertTrue(tmp1.canWrite() && tmp2.canWrite()); assertTrue(tmp1.canRead() && tmp2.canRead()); assertTrue(!tmp1.exists() && !tmp2.exists());
assertTrue(fs.exists(src)); assertFalse(fs.exists(src));
assertEquals(CONTAINER_ID, deletionTask.getContainerId());
assertNull(numaResourceHandler.preStart(mockContainer));
assertThat(infoList).hasSize(1); assertThat(infoList.get(0).getReservationId().toString()).isEqualTo( id.toString());
assertEquals(ActiveStandbyElector.State.ACTIVE, zkfc.getElectorForTests().getStateForTests()); assertTrue("RPC to cedeActive took " + (et - st) + " ms", et - st < 1000); assertEquals(ActiveStandbyElector.State.INIT, zkfc.getElectorForTests().getStateForTests()); assertTrue("Should take ~3 seconds to rejoin. Only took " + (et2 - et) + "ms before rejoining.", et2 - et > 2800);
assertEquals("/", parentOf("/a")); assertEquals("/", parentOf("/a/")); assertEquals("/a", parentOf("/a/b")); assertEquals("/a/b", parentOf("/a/b/c"));
assertThat(text.find("abd")).isEqualTo(-1); assertThat(text.find("ac")).isEqualTo(-1); assertThat(text.find("\\u20ac")).isEqualTo(4); assertThat(text.find("\\u20ac", 5)).isEqualTo(11);
assertEquals(expected, contentSummary.toString(true, true));
assertEquals(expected.getStatus(), actual.getStatus());
assertTrue(groups.size() == 3); assertTrue(groups.contains("abc")); assertTrue(groups.contains("def")); assertTrue(groups.contains("hij"));
assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString()); assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8, response.getType().toString());
assertEquals(MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8, response.getType().toString());
assertThat(host, is(DNS.getDefaultHost(getLoopbackInterface())));
assertEquals(expected, quotaUsage.toString());
assertEquals("wrong result", "172.17.0.19", ((AAAARecord) recs[0]).getAddress().getHostAddress()); assertTrue("not an ARecord", recs[0] instanceof AAAARecord);
assertEquals("", new Path(".").toString()); assertEquals("..", new Path("..").toString()); assertEquals("/", new Path("/").toString());
assertNotNull(node);
assertEquals(1, qc.getNameSpace()); assertEquals(1, qc.getStorageSpace()); assertEquals(1, qc.getTypeSpace(t));
assertTrue( "Instantiation of empty EnumSetWritable with no element type class " + "provided should throw exception", gotException); assertEquals(read, null);
assertNotNull(ugi); assertEquals("guest@DEFAULT.REALM", ugi.getUserName());
assertEquals(1, copyOfCopy.getNewClasses());
assertEquals(3, strs.size()); assertArrayEquals(new String[]{ "a", "b", "c" }, strs.toArray(new String[0])); assertEquals(0, strs.size());
assertEquals(connectAddr.getHostName(), addr.getHostName()); assertEquals(connectAddr.getHostName(), InetAddress.getLocalHost().getHostName());
assertTrue("Should successfully accept request", channel1.writeInbound(allowedHttpRequest)); assertTrue("Should successfully accept request, second time", channel2.writeInbound(allowedHttpRequest2)); assertTrue("Should successfully accept request, third time", channel3.writeInbound(allowedHttpRequest3));
assertEquals(longs.length, set.size()); assertEquals(val, set.get(new Holder(val)).getId());
assertTrue("Error downloading the job configuration file.", !jobConfXml.contains("Error"));
assertEquals(networkCacheDefault, Security.getProperty(SLSRunner.NETWORK_CACHE_TTL)); assertEquals(networkNegativeCacheDefault, Security.getProperty(SLSRunner.NETWORK_NEGATIVE_CACHE_TTL)); assertEquals("-1", Security.getProperty(SLSRunner.NETWORK_CACHE_TTL)); assertEquals("-1", Security.getProperty(SLSRunner.NETWORK_NEGATIVE_CACHE_TTL));
assertEquals("SchedConfCLI failed to run", 0, exitCode); assertTrue("Failed to get scheduler configuration", sysOutStream.toString().contains("testqueue"));
assertThat(decompressorStream.read(), is((int) TEST_STRING.charAt(i)));
assertEquals("Comparator Output", 0, policy.getComparator().compare(r1, r2));
assertEquals(winutils.getCanonicalPath(), getQualifiedBinInner(methodDir, WINUTILS_EXE).getCanonicalPath());
assertEquals(expected.getStatus(), actual.getStatus());
assertEquals(editsDir.toString(), journalStorage.getRoot().toString());
assertTrue(testLogInfo.matchesGroupId(testGroupId)); assertTrue(testLogInfo.matchesGroupId(testGroupId)); assertFalse(testLogInfo.matchesGroupId(testGroupId)); assertFalse(testLogInfo.matchesGroupId(testGroupId)); assertFalse(testLogInfo.matchesGroupId(testGroupId)); assertTrue(testLogInfo.matchesGroupId(testGroupId)); assertTrue(testLogInfo.matchesGroupId(testGroupId)); assertFalse(testLogInfo.matchesGroupId(testGroupId));
assertNull(fcq.peek());
assertTrue(proxy.notify(request).getAccepted()); assertNotNull(set); assertEquals(0, set.size()); assertEquals( "NM upload metrics aren\'t updated.", 1, SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);
assertThat(report.getApplicationAttemptId()).isEqualTo(appAttemptId); assertThat(report.getFinishTime()).isEqualTo(Integer.MAX_VALUE + 2L); assertThat(report.getOriginalTrackingUrl()). isEqualTo("test original tracking url");
assertTrue(trash.getTrashPolicy().getClass().equals(TestTrashPolicy.class));
assertFalse(lfs.util().exists(p));
assertNull(KMSClientProvider.selectDelegationToken(creds, null)); assertNull(KMSClientProvider .selectDelegationToken(creds, new Text(oldTokenService))); assertEquals(token, KMSClientProvider .selectDelegationToken(creds, new Text(providerUriString)));
assertTrue("Path doesn\'t end in specified dir: " + localPath, localPath.endsWith("dir" + i)); assertFalse("Path has internal whitespace: " + localPath, localPath.contains(" "));
assertEquals("File doesn\'t exists - expected a single binary name", "aocl", openclPlugin.getPathToExecutable());
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertEquals(clientAddr, getRemoteAddr(clientAddr, proxyAddr, true)); assertEquals(clientAddr, getRemoteAddr(chainedClientAddr, proxyAddr, true));
assertEquals(System.getProperty("java.class.path"), strOut.trim()); assertTrue(stderr.toByteArray().length == 0);
assertEquals(info.getBlockPoolID(), info2.getBlockPoolID()); assertEquals(info.getBuildVersion(), info2.getBuildVersion());
assertTrue("User.name flag is missing in service path.", url.contains("user.name")); assertTrue("User.name flag is not matching JVM user.", url.contains(System.getProperty("user.name")));
assertNotNull(entity); assertEquals(entityNew.getEntityId(), entity.getEntityId()); assertEquals(entityNew.getEntityType(), entity.getEntityType());
assertTrue(exitCode == -1); assertTrue(sysErrStream.toString().contains( "Invalid ApplicationId specified"));
assertNotNull(meta.getListing());
assertEquals(EXIT_SUCCESS, result);
assertFalse("110.113.221.222 is in the list", ipl.isIn("110.113.221.222"));
assertEquals("", getRelativePath(BASE, BASE));
assertEquals(0, rmAdminCLI.run(args));
assertFalse("10.113.221.222 is in the list", cipl.isIn("10.113.221.222")); assertFalse ("10.222.103.121 is in the list", cipl.isIn("10.222.103.121")); assertTrue("10.113.221.222 is not in the list", cipl.isIn("10.113.221.222")); assertTrue ("10.222.103.121 is not in the list", cipl.isIn("10.222.103.121"));
assertNotNull("Rule object is null", rule); assertNotNull("Rule object is null", rule);
assertEquals(null, tEvent); assertEquals(event, tEvent); assertEquals(null, tEvent);
assertEquals(container, context.getContainer());
assertEquals(appC, e.getAppId()); assertEquals(MARK_CONTAINER_FOR_KILLABLE, e.getType());
assertNotNull(keySchema); assertEquals("There should be HASH and RANGE key in key schema", 2, keySchema.size()); assertThat(element.getAttributeName(), anyOf(is(PARENT), is(CHILD))); assertThat(element.getKeyType(), anyOf(is(HASH.toString()), is(RANGE.toString())));
assertEquals("Auxiliary service stop caused AuxServices stop", STARTED, aux.getServiceState()); assertEquals(2, aux.getServices().size());
assertTrue(test.isAction()); assertFalse(test.isAction());
assertTrue("File /tmp/zeroBlockFile doesn\'t exist ", fs.exists(testPath)); assertTrue("Name node didn\'t come up", cluster.isNameNodeUp(0));
assertEquals("env1_val", env.get("env1")); assertEquals("env3_val", env.get("env3")); assertEquals("env4_val", env.get("env4")); assertEquals("new_env2_val", env.get("env2"));
assertEquals(l("first", "2"), finalDestination(l("first", "2")));
assertEquals(0, fcq.size()); assertEquals(3, fcq2.size());
assertEquals("/proxy/application_100_0001", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(100l, 1))); assertEquals("/proxy/application_6384623_0005", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5)));
assertEquals(0, mgr.getLabelsOnNode(nodeId).size());
assertEquals(new URI("https", null, "0.0.0.0", DFS_NAMENODE_HTTPS_PORT_DEFAULT, null, null, null), httpsport); assertEquals(new URI("http", null, "0.0.0.0", DFS_NAMENODE_HTTP_PORT_DEFAULT, null, null, null), httpport);
assertEquals(write, read);
assertEquals("root.admins.bob AM share", "1.0", csConfig.get(PREFIX + "root.admins.bob.maximum-am-resource-percent")); assertEquals("root.admins.alice AM share", "0.15", csConfig.get(PREFIX + "root.admins.alice.maximum-am-resource-percent"));
assertFalse(DST_FILE.exists()); assertFalse(DST_FILE.exists()); assertTrue(DST_FILE.exists()); assertEquals(TEST_STRING, readBackData);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue("" + "Exit code returned for help option is incorrect", status == 0);
assertTrue("Deterministic seeding", getSeed("stream1", masterSeed1) == getSeed("stream1", masterSeed1)); assertTrue("Deterministic seeding", getSeed("stream2", masterSeed2) == getSeed("stream2", masterSeed2)); assertTrue("Different streams", getSeed("stream1", masterSeed1) != getSeed("stream2", masterSeed1)); assertTrue("Different master seeds", getSeed("stream1", masterSeed1) != getSeed("stream1", masterSeed2));
assertTrue("copyFilter should be instance of RegexCopyFilter", copyFilter instanceof RegexCopyFilter);
assertEquals(1, jid.getAppId().getClusterTimestamp()); assertEquals(1, jid.getAppId().getId()); assertEquals(1, jid.getId());
assertNotNull(instance);
assertThat(topLeft.x, is(5f)); assertThat(topLeft.y, is(0f)); assertThat(topRight.x, is(400f)); assertThat(topRight.y, is(5f)); assertThat(bottomRight.x, is(395f)); assertThat(bottomRight.y, is(400f)); assertThat(bottomLeft.x, is(0f)); assertThat(bottomLeft.y, is(395f));
assertEquals(null,attr.getImageSrc()); assertEquals("test",attr.getImageSrc());
assertThat(topLeft, is(new RectF(25, 25, 75, 75))); assertThat(topRight, is(new RectF(325, 25, 375, 75))); assertThat(bottomRight, is(new RectF(325, 325, 375, 375))); assertThat(bottomLeft, is(new RectF(25, 325, 75, 375)));
assertEquals(WXImageSharpen.UNSHARPEN,attr.getImageSharpen());
assertEquals(dom.getRef(),"100"); assertEquals(dom.getType(),"div");
assertEquals(false,attr.autoPlay());
assertEquals(child,obj);
assertTrue(WXSDKEngine.registerModule("test", TestModule.class)); assertFalse(WXSDKEngine.registerModule(null,TestModule.class)); assertFalse(WXSDKEngine.registerModule("test",null)); assertFalse(WXSDKEngine.registerModuleWithFactory(null,new TestModuleFactory(TestModule.class),true)); assertTrue(WXSDKEngine.registerModuleWithFactory("test1",new TestModuleFactory(TestModule.class),true)); assertFalse(WXSDKEngine.registerModuleWithFactory("test1",null,true));
assertThat(topLeft.x, is(0f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(0f)); assertThat(bottomRight.x, is(400f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(400f));
assertEquals(adapter.getRealCount(),3);
assertThat(opaque.getOpacity(), is(PixelFormat.OPAQUE)); assertThat(transparent.getOpacity(), is(PixelFormat.TRANSPARENT)); assertThat(half.getOpacity(), is(PixelFormat.TRANSLUCENT)); assertThat(changeAlpha.getOpacity(), is(PixelFormat.TRANSLUCENT));
assertEquals(true,attr.getIsRecycleImage());
assertEquals(true,attr.showIndicators());
assertThat(topLeft.x, is(5f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(5f)); assertThat(bottomRight.x, is(395f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(395f));
assertEquals(WXFileUtils.loadAsset(null,null),"{}");
assertEquals(drawable instanceof BorderDrawable, true);
assertEquals(adapter.getRealCount(),2);
assertFalse(WXSDKEngine.registerComponent(null,(Class<? extends WXComponent>) null,true)); assertTrue(WXSDKEngine.registerComponent("test", TestComponent.class,true)); assertTrue(WXSDKEngine.registerComponent("test1",TestComponent.class)); assertTrue(WXSDKEngine.registerComponent(TestComponent.class,false,"testA","testB","testC")); assertFalse(WXSDKEngine.registerComponent(compInfo,TestComponent.class));
assertEquals(WXImageQuality.LOW,attr.getImageQuality()); assertEquals(WXImageQuality.HIGH,attr.getImageQuality());
assertEquals(null,attr.getLoadMoreRetry());
assertEquals(imageView.getClass(), WXImageView.class);
assertThat(topLeft, is(new RectF(5, 25, 195, 175))); assertThat(topRight, is(new RectF(225, 5, 375, 195))); assertThat(bottomRight, is(new RectF(205, 225, 395, 375))); assertThat(bottomLeft, is(new RectF(25, 205, 175, 395)));
assertEquals(scaleType, ImageView.ScaleType.CENTER_CROP);
assertNotNull(view);
assertEquals(scaleType, ImageView.ScaleType.CENTER_CROP);
assertEquals(list.size(),2); assertEquals(list.get(0).getA(),1); assertEquals(list.get(1).getA(),2); assertEquals(list.size(),0);
assertFalse(WXSDKEngine.registerDomObject("test",null)); assertFalse(WXSDKEngine.registerDomObject("", TestDomObject.class)); assertTrue(WXSDKEngine.registerDomObject("test",TestDomObject.class));
assertThat(topLeft.x, is(5f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(5f)); assertThat(bottomRight.x, is(395f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(395f));
assertEquals(null,attr.getScope());
assertEquals(scaleType, ImageView.ScaleType.CENTER_CROP);
assertFalse(WXSDKEngine.isInitialized()); assertTrue(WXSDKEngine.isInitialized());
assertThat(topLeft.x, is(25f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(25f)); assertThat(bottomRight.x, is(375f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(375f));
assertEquals(adapter.getRealCount(),3);
assertThat(topLeft.x, is(5f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(5f)); assertThat(bottomRight.x, is(395f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(395f));
assertEquals("vertical",attr.getScrollDirection());
assertEquals(null,WXAttr.getValue(attr)); assertEquals("test",WXAttr.getValue(attr));
assertEquals(dom.getChildCount(),1); assertEquals(dom.getChild(0),childDom); assertEquals(dom.getChildCount(),0); assertEquals(dom.getChildCount(),1); assertEquals(dom.getChild(0),childDom);
assertEquals(clone.getRef(),"101"); assertEquals(clone.getType(),"test");
assertThat(topLeft.x, is(5f)); assertThat(topLeft.y, is(25f)); assertThat(topRight.x, is(375f)); assertThat(topRight.y, is(5f)); assertThat(bottomRight.x, is(395f)); assertThat(bottomRight.y, is(375f)); assertThat(bottomLeft.x, is(25f)); assertThat(bottomLeft.y, is(395f));
assertEquals(TypefaceUtil.getFontDO("test").getUrl(),"test");
assertThat(createBorderCorner(corner, 0f, preWidth, postWidth, borderBox).hasOuterCorner(), is(false)); assertThat(createBorderCorner(corner, 50f, preWidth, postWidth, borderBox) .hasOuterCorner(), is(true)); assertThat(createBorderCorner(corner, -10f, preWidth, postWidth, borderBox) .hasOuterCorner(), is(false));
assertEquals(null,attr.getLoadMoreOffset());
assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
assertTrue(cut.isValidUsbDeviceCandidate(mockFile));
assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
assertNotNull("No messages", msgs); assertEquals("No messages", 1, msgs.size()); assertTrue("No companyId", msg.contains("companyId=\\"12345\\"")); assertTrue("No ipAddress", msg.contains("ipAddress=\\"127.0.0.1\\"")); assertTrue("No toAccount", msg.contains("toAccount=\\"123456\\""));
assertEquals("localhost", map.get("mail.server.host"));
assertEquals("[name]", result);
assertEquals(first, second);
assertTrue(predicate.test(0)); assertTrue(predicate.test(0.1)); assertTrue(predicate.test(1.5)); assertFalse(predicate.test(2)); assertTrue(predicate.test(3)); assertTrue(predicate.test(3.93334)); assertTrue(predicate.test(5.0)); assertFalse(predicate.test(Integer.MAX_VALUE));
assertEquals("Value {\\\\", result);
assertEquals("Value {test", result);
assertNull(v1.asIs()); assertEquals("1", v2.notNull().asIs());
assertEquals("Lorem ipsum", object.getMessage()); assertEquals(1, object.getValue());
assertEquals(3, options.size()); assertEquals("en_US.config", options.get(0)); assertEquals("en.config", options.get(1)); assertEquals(".config", options.get(2));
assertEquals("[number_[count]:[count]] [apple_[count]:[count]]", result);
assertEquals(3, options.size()); assertEquals("test-en_US", options.get(0)); assertEquals("test-en", options.get(1)); assertEquals("test", options.get(2));
assertEquals(2, matches.size()); assertEquals("A", matches.get(0).toString()); assertTrue(matches.get(1).components().length == 0);
assertTrue(predicate.test(0)); assertTrue(predicate.test(0.1)); assertTrue(predicate.test(1)); assertTrue(predicate.test(1.5)); assertFalse(predicate.test(-1)); assertFalse(predicate.test(2)); assertFalse(predicate.test(Integer.MAX_VALUE));
assertEquals("{test;param;}", result);
assertEquals(7, matches.size()); assertEquals("app-env-ctx", matches.get(0).toString()); assertEquals("app-ctx", matches.get(1).toString()); assertEquals("app", matches.get(2).toString()); assertEquals("env-ctx", matches.get(3).toString()); assertEquals("env", matches.get(4).toString()); assertEquals("ctx", matches.get(5).toString()); assertTrue(matches.get(6).components().length == 0);
assertNotNull(map.get("items[0]")); assertEquals("1", map.get("items[0]"));
assertEquals("Value {test;param;:", result);
assertEquals("Value }", result);
assertEquals("Value {0[1]}", result);
assertEquals(text, result);
assertEquals("Value {val;:char}", result);
assertTrue(predicate.test(0)); assertTrue(predicate.test(0.1)); assertTrue(predicate.test(1)); assertTrue(predicate.test(1.5)); assertFalse(predicate.test(-1)); assertFalse(predicate.test(2)); assertFalse(predicate.test(Integer.MAX_VALUE));
assertEquals("Value \\\\", result);
assertTrue(map.isEmpty());
assertEquals(someValue, provider.get(id, in(Locale.US)).asIs());
assertEquals("Value {0}", result);
assertEquals(6, options.size()); assertEquals("resource-en_US.properties", options.get(0)); assertEquals("resource-en.properties", options.get(1)); assertEquals("resource.properties", options.get(2)); assertEquals("default-en_US.properties", options.get(3)); assertEquals("default-en.properties", options.get(4)); assertEquals("default.properties", options.get(5));
assertEquals("[name_[COUNT]:[COUNT]]", result);
assertEquals("{name}", result);
assertEquals("[name_[:]:[:]]", result);
assertEquals("Value {test;param;:lit", result);
assertEquals("{:}", result);
assertEquals("Value {0\\\\}", result);
assertEquals("Value [10]", result);
assertEquals(3, options.size()); assertEquals("test-en_US.html", options.get(0)); assertEquals("test-en.html", options.get(1)); assertEquals("test.html", options.get(2));
assertEquals("1", v1.notNull().asIs()); assertEquals("2", v2.notNull().asIs());
assertEquals(object.name(), file.name()); assertTrue(file.actualName().endsWith(object.actualName())); assertEquals(object.size(), file.size());
assertTrue(predicate.test(0)); assertTrue(predicate.test(0.1)); assertTrue(predicate.test(1)); assertTrue(predicate.test(1.5)); assertFalse(predicate.test(-1)); assertFalse(predicate.test(2)); assertFalse(predicate.test(Integer.MAX_VALUE));
assertEquals("[name_[count]:[count]]", result);
assertEquals("[1][2]", result);
assertNotNull(map); assertEquals(5, map.size()); assertEquals("25", map.get("mail.server.port")); assertEquals("localhost", map.get("mail.server.host"));
assertNull(v1.asIs()); assertEquals("1", v2.notNull().asIs());
assertEquals("", result);
assertEquals(3, options.size()); assertEquals("test-en_US.", options.get(0)); assertEquals("test-en.", options.get(1)); assertEquals("test.", options.get(2));
assertEquals(3, matches.size()); assertEquals("A_B", matches.get(0).toString()); assertEquals("A", matches.get(1).toString()); assertTrue(matches.get(2).components().length == 0);
assertEquals("Value {test;param", result);
assertEquals("Value {test;param;:\\\\", result);
assertEquals("1", v1.notNull().asIs()); assertNull(v2.asIs());
assertEquals("Value {0} [1]", result);
assertEquals("fast", value.asIs());
assertEquals("1", value.asIs()); assertEquals("2", value.asIs());
assertEquals("Value \\\\", result);
assertEquals("Value {", result);
assertEquals("slow-ctx", value.asIs());
assertEquals(6, matches.size()); assertEquals("en_US-web", matches.get(0).toString()); assertEquals("en-web", matches.get(1).toString()); assertEquals("en_US", matches.get(2).toString()); assertEquals("en", matches.get(3).toString()); assertEquals("web", matches.get(4).toString()); assertTrue(matches.get(5).components().length == 0);
assertEquals(6, options.size()); assertEquals("test-en_US-WEB.html", options.get(0)); assertEquals("test-en-WEB.html", options.get(1)); assertEquals("test-WEB.html", options.get(2)); assertEquals("test-en_US.html", options.get(3)); assertEquals("test-en.html", options.get(4)); assertEquals("test.html", options.get(5));
assertNull("mContext field must be set to null after destroy method call", context);
assertNotNull("layout field must not be null before destroy method call", getInternalState(removeView, "layout")); assertNotNull("mWindowManager field must not be null before destroy method call", getInternalState(removeView, "windowManager")); assertNull("layout field must be set to null after destroy method call", getInternalState(removeView, "layout")); assertNull("mWindowManager field must be set to null after destroy method call", getInternalState(removeView, "windowManager"));
assertTrue(Arrays.equals(cmp, SignalUtil.joinBytesArrays(a,b,c))); assertTrue(Arrays.equals(cmp2, SignalUtil.joinBytesArrays(a,c,b)));
assertEquals(4, SignalUtil.multipleOfFour(4)); assertEquals(8, SignalUtil.multipleOfFour(6)); assertEquals(8, SignalUtil.multipleOfFour(7));
assertArrayEquals(Arrays.asList(new byte[]{0,0,0},new byte[]{3,3,3},new byte[]{5}).toArray(),res.toArray());
assertEquals(-1,b); assertEquals(0,b); assertEquals(-2,b); assertEquals(-128,b); assertEquals(-64,b);
assertTrue(Arrays.equals(mac,compMac));
assertEquals(-1,bt[0]); assertEquals(-1,bt[1]); assertEquals(0,bt[0]); assertEquals(0,bt[1]); assertEquals(1,bt[0]); assertEquals(-1,bt[1]);
assertTrue(Arrays.equals(a, SignalUtil.fourBytesFromInt(0))); assertTrue(Arrays.equals(b, SignalUtil.fourBytesFromInt(5))); assertTrue(Arrays.equals(c,ts)); assertTrue(Arrays.equals(d,ts));
assertEquals(VISIBLE, view.getVisibility()); assertEquals(INVISIBLE, view.getVisibility());
assertEquals(INVISIBLE, view.getVisibility()); assertEquals(GONE, view.getVisibility());
assertEquals(VISIBLE, view.getVisibility()); assertEquals(GONE, view.getVisibility());
assertEquals(GONE, view.getVisibility()); assertEquals(INVISIBLE, view.getVisibility());
assertTrue(run.get());
assertTrue(run.get());
assertEquals(1, run.get()); assertEquals(2, run.get());
assertTrue(m2.isGreaterThanOrEqual(m2)); assertTrue(m2.isGreaterThanOrEqual(m1)); assertFalse(m1.isGreaterThanOrEqual(m2));
assertEquals(new Money(M1_AMOUNT + M2_AMOUNT), m1.add(m2));
assertEquals(new Money(M2_AMOUNT * multiplier), m2.multiply(multiplier));
assertThat(testClassOptional.isPresent(), is(true)); assertThat(testClass.list, contains(1, 2, 3)); assertThat(testClass.number, is(42L)); assertThat(testClass.string, is("Hello")); assertThat(testClass.testClass, is(nullValue())); assertThat(testClassOptional.isPresent(), is(false)); assertThat( exception, is(instanceOf(UnrecognizedPropertyException.class)));
assertThat(connectorTopologies, contains(ConnectorTopology.OUTGOING)); assertThat( connectorTopologies, not( contains( ConnectorTopology.INCOMING, ConnectorTopology.NONE, ConnectorTopology.INCOMING_AND_OUTGOING)));
assertThat(pagination.getEndPosition(), is(90)); assertThat(pagination.getPage(), is(3)); assertThat(pagination.getPageSize(), is(30)); assertThat(pagination.getStartPosition(), is(60));
assertThat(testClass.list, contains(1, 2, 3)); assertThat(testClass.number, is(42L)); assertThat(testClass.string, is("Hello")); assertThat(testClass.testClass, is(nullValue())); assertThat(exception, is(instanceOf(BadRequestException.class))); assertThat( exception.getMessage(), is("Missing JSON property with the key: null")); assertThat( exception, is(instanceOf(InternalServerErrorException.class))); assertThat(exception.getMessage(), is(expectedMessage));
assertThat( propertyClass.getCanonicalName(), equalTo( "com.liferay.talend.tliferayinput.TLiferayInputProperties"));
assertThat(propertyList, hasSize(4));
assertThat( connectorTopologies, contains( ConnectorTopology.INCOMING, ConnectorTopology.INCOMING_AND_OUTGOING)); assertThat( connectorTopologies, not(contains(ConnectorTopology.OUTGOING, ConnectorTopology.NONE)));
assertThat(multipartBody.getValueAsString("key"), is("value")); assertThat(multipartBody.getValueAsString("null"), is(nullValue()));
assertThat( propertyClass.getCanonicalName(), equalTo( "com.liferay.talend.tliferayoutput.TLiferayOutputProperties"));
assertThat(propertyList, hasSize(2));
assertThat( runtimeInfo.getRuntimeClassName(), equalTo("com.liferay.talend.runtime.LiferaySink"));
assertThat(multipartBody.getBinaryFile("file"), is(binaryFile)); assertThat(multipartBody.getBinaryFile("null"), is(nullValue()));
assertThat( runtimeInfo.getRuntimeClassName(), equalTo("com.liferay.talend.runtime.LiferaySource"));
assertThat(ex.getMessage()).isEqualTo("The instance is sealed");
assertThat(new DownloadVersion("5.0.0-rc1").isRelease()).isFalse(); assertThat(new DownloadVersion("4.1.1-hotfix1").isRelease()).isTrue(); assertThat(new DownloadVersion("4.1.1").isRelease()).isTrue(); assertThat(new DownloadVersion("3.0.0-rc9").isRelease()).isFalse(); assertThat(new DownloadVersion("1.0.0").isRelease()).isTrue();
assertThat(ex.getMessage()).isEqualTo("The instance is sealed");
assertThat(p12File).exists(); assertThat(p12File.length()).isGreaterThan(0);
assertThat(download).isSameAs(v16);
assertFalse(subscriber.isDisposed()); assertTrue(subscriber.isDisposed());
assertNull(subscriber.getEventClass()); assertNull(subscriber.getFilter()); assertNull(subscriber.getScheduler()); assertTrue(true);
assertEquals(expectedHashCode, subscriber.hashCode());
assertTrue(methodCalled); assertNotNull(receivedEvent);
assertTrue(true);
assertThat(dateProvider.isMorning(), is(true));
assertThat(lift1, not(sameInstance(lift2))); assertThat(lift1, equalTo(lift2));
assertThat(dateProvider.isMorning(), is(false));
assertThat(dateProvider.isMorning(), is(false));
assertThat(lift1, not(sameInstance(lift2))); assertThat(lift1, equalTo(lift2));
assertThat(lift1, not(sameInstance(lift2))); assertThat(lift1, equalTo(lift2));
assertEquals(1007.00/4, calculator.average(), .01);
assertEquals(4, calculator.median(), 0.01);
assertThat(dict.words(), nullValue());
assertThat(hasDifferent, is(true));
assertThat(Pinyin.toPinyin(str, ","), is(expected));
assertThat(result.size(), is(1)); assertThat(result.get(0).getStart(), is(0)); assertThat(result.get(0).getEnd(), is(4));
assertThat(result.size(), is(2)); assertThat(result.get(0).getStart(), is(0)); assertThat(result.get(0).getEnd(), is(5)); assertThat(result.get(1).getStart(), is(7)); assertThat(result.get(1).getEnd(), is(8));
assertThat(Utils.dictsToTrie(dicts), notNullValue());
assertThat(dict.words(), is(map.keySet()));
assertThat(dict.toPinyin("1"), nullValue());
assertThat(result.size(), is(3)); assertThat(result.get(0).getStart(), is(0)); assertThat(result.get(0).getEnd(), is(5)); assertThat(result.get(1).getStart(), is(7)); assertThat(result.get(1).getEnd(), is(8)); assertThat(result.get(2).getStart(), is(9)); assertThat(result.get(2).getEnd(), is(10));
assertThat(word.length(), is(pinyins.length));
assertThat(dict.toPinyin("1"), is(map.get("1")));
assertThat(Pinyin.mTrieDict, nullValue()); assertThat(Pinyin.mPinyinDicts, nullValue()); assertThat(Pinyin.mSelector, nullValue());
assertThat(Pinyin.isChinese(c), is(true));
assertThat(result, nullValue());
assertThat(Utils.dictsToTrie(null), nullValue());
assertThat(Pinyin.toPinyin(str, ","), nullValue());
assertThat(Utils.dictsToTrie(dicts), nullValue());
assertThat(dict.toPinyin("2"), nullValue());
assertThat(Utils.dictsToTrie(dicts), nullValue());
assertThat(Pinyin.toPinyin(targetChar), equalTo(pinyins[0])); assertThat(Pinyin.toPinyin(targetChar), equalTo(String.valueOf(targetChar))); assertThat(chineseCount, is(expectedChineseCount));
assertThat(Pinyin.toPinyin(str, ","), is(""));
assertThat(words.contains(null), is(false)); assertThat(words.size(), is(97));
assertThat(Pinyin.isChinese(targetChar), is(true)); assertThat(Pinyin.isChinese(targetChar), is(false));
assertThat(pinyin.matches("[a-zA-Z]+"), is(true));
assertThat(Utils.dictsToTrie(dicts), nullValue());
assertEquals(Legislator.shortTitle("Representative"), "Rep"); assertEquals(Legislator.shortTitle("Senator"), "Sen"); assertEquals(Legislator.shortTitle("Delegate"), "Del"); assertEquals(Legislator.shortTitle("Resident Commissioner"), "Com"); assertEquals(Legislator.shortTitle(""), ""); assertEquals(Legislator.shortTitle("Justice"), "");
assertThat(httpClientStrategyUnderTest.get()).isInstanceOf(RestCommandTransporterStrategy.class);
assertEquals(result, traceId);
assertEquals(Optional.empty(), result);
assertEquals(result, null);
assertEquals(Optional.of(globalTransaction), result);
assertEquals(mockBubbleCache, result.getBubbleCache()); assertEquals(mockApplicationEventPublisher, result.getApplicationEventPublisher()); assertEquals(mockProvision, result.getProvision()); assertEquals(mockCommandOrchestrator, result.getCommandOrchestrator()); assertEquals(mockUtilities, result.getUtilities());
assertThat(globalTransactionUnderTest.getLocalTransactions()).hasSize(1);
assertEquals(false, result);
assertEquals(result.getStatusCode(), HttpStatus.CONFLICT);
assertEquals(Optional.empty(), result);
assertEquals(localTransaction, result.get());
assertEquals(result, globalTransaction);
assertThat(httpClientStrategyUnderTest.get()).isInstanceOf(FeignCommandTransporterStrategy.class);
assertEquals(Optional.empty(), result);
assertThat(inboundCommandUnderTest.getStatus()).isEqualTo(Status.FAILED);
assertFalse(result.isPresent());
assertThat(globalTransaction.isNew()).isTrue(); assertThat(globalTransaction.getName()).isEqualTo("GlobalTransactionName"); assertThat(globalTransaction.getTraceId()).isEqualTo("ASDEF");
assertEquals(result.getProvision().getLocalTransaction(), localTransaction); assertEquals(result.getBubbleCache(), mockBubbleCache); assertEquals(result.getApplicationEventPublisher(), mockApplicationEventPublisher); assertEquals(result.getCommandOrchestrator(), mockCommandOrchestrator);
assertEquals(result.getProvision().getLocalTransaction(), localTransaction); assertEquals(result.getBubbleCache(), mockBubbleCache); assertEquals(result.getApplicationEventPublisher(), mockApplicationEventPublisher); assertEquals(result.getCommandOrchestrator(), mockCommandOrchestrator);
assertEquals(mockBubbleCache, result.getBubbleCache()); assertEquals(mockApplicationEventPublisher, result.getApplicationEventPublisher()); assertEquals(mockProvision, result.getProvision()); assertEquals(mockCommandOrchestrator, result.getCommandOrchestrator()); assertEquals(mockUtilities, result.getUtilities());
assertEquals(bubbleCacheUnderTest.getBubble(key).get(), bubbleMessage);
assertThat(topics).hasSize(2).contains("io.kermoss.test.market", "io.kermoss.test.pizza-shop");
assertEquals(mockBubbleCache, result.getBubbleCache()); assertEquals(mockApplicationEventPublisher, result.getApplicationEventPublisher()); assertEquals(mockProvision, result.getProvision()); assertEquals(mockCommandOrchestrator, result.getCommandOrchestrator()); assertEquals(mockUtilities, result.getUtilities());
assertTrue(result);
assertEquals(result, span);
assertThat(onNext.getIn()).isNotNull(); assertThat(onNext.getMeta().getTransactionName()).isEqualTo("RollBackGlobalService");
assertEquals(result.getStatusCode(), HttpStatus.ACCEPTED);
assertThat(globalTransactionUnderTest.getVariableValue("itemName")).isEqualTo(Optional.of("pizza"));
assertEquals(Optional.empty(), result);
assertEquals(subject, abstractCommandUnderTest.getSubject()); assertEquals(gtx, abstractCommandUnderTest.getGTX()); assertEquals(ltx, abstractCommandUnderTest.getLTX()); assertEquals(pgtx, abstractCommandUnderTest.getPGTX()); assertEquals(fltx, abstractCommandUnderTest.getFLTX()); assertEquals(traceId, abstractCommandUnderTest.getTraceId()); assertEquals(destination, abstractCommandUnderTest.getDestination());
assertEquals(result.getStatusCode(), HttpStatus.ACCEPTED);
assertEquals(Optional.empty(), result);
assertEquals(result, traceId);
assertEquals(payload, result.getPayload());
assertEquals(true, result);
assertEquals(Optional.of(message), result);
assertEquals(Optional.of(message), result);
assertEquals(in, result.getIn()); assertEquals(process, result.getProcess().get()); assertTrue(result.getSend().allMatch(s -> s.equals(send))); assertTrue(result.getBlow().allMatch(b -> b.equals(blow))); assertEquals(meta, result.getMeta()); assertEquals(attach, result.getAttach().get());
assertThat(kafkaDestination).isEqualTo("io.kermoss.test.pizza-shop");
assertThat(globalTransactionUnderTest.getVariables()).hasSize(1);
assertEquals(result, newGlobalSpan);
assertEquals(result.getStatusCode(), HttpStatus.ACCEPTED);
assertEquals(in, result.getIn()); assertEquals(process, result.getProcess().get()); assertTrue(result.getSend().allMatch(s -> s.equals(send))); assertTrue(result.getBlow().allMatch(b -> b.equals(blow))); assertEquals(meta, result.getMeta()); assertEquals(attach, result.getAttach().get());
assertEquals(name.getValue(), "In the child globalTransaction");
assertEquals(result.getGLTX(), gtx); assertEquals(result.getTraceId(), traceId); assertEquals(result.getFLTX(), FLTX); assertEquals(result.getPGTX(), PGTX);
assertThat(onStart.getMeta().getTransactionName()).isEqualTo("RollBackGlobalService");
assertThat(kafkaDestination).isEqualTo("pizza-shop");
assertEquals(result, newGlobalSpan);
assertEquals(true, result);
assertThat(resultQuery).isEqualTo(findFailedCommands);
assertEquals(result.getName(), txName); assertEquals(result.getEventRequestor(), event); assertEquals(result.getGTX(), null); assertEquals(result.getParent(), null); assertEquals(result.getTraceId(), null); assertEquals(result.getCommandRequestor(), null);
assertEquals(name.getValue(),"In the parent globalTransaction");
assertEquals(result.getStatusCode(), HttpStatus.ACCEPTED);
assertEquals(result, traceId);
assertEquals(false, result);
assertThat(inboundCommandUnderTest.getFailedTimestamp()).isNotNull();
assertThat(onError.getIn()).isNotNull(); assertThat(onError.getMeta().getTransactionName()).isEqualTo("RollBackGlobalService");
assertEquals( Optional.of(someData), result);
assertEquals(span, result);
assertEquals( Optional.empty(), result);
assertEquals(result, nestedSpan);
assertEquals(result.getName(), txName); assertEquals(result.getEventRequestor(), event); assertEquals(result.getGTX(), gtx); assertEquals(result.getParent(), pgtx); assertEquals(result.getTraceId(), traceId); assertEquals(result.getCommandRequestor(), null);
assertEquals(null, result);
assertEquals(Optional.empty(), result);
assertEquals(Optional.of(globalTransaction), result);
assertEquals(result, globalTransaction);
assertThat(token.isAuthenticated()).isFalse();
assertThat(webAuthnAuthenticationToken.isAuthenticated()).isTrue();
assertThat(target.extractAAGUID(metadataStatement)).isEqualTo(aaguid);
assertThat(accessor).isNotNull();
assertThat(target.extractAAGUID(metadataStatement)).isEqualTo(AAGUID.ZERO);
assertThat(response.getStatus()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR.value());
assertThat(loadedChallenge).isNull();
assertThat(webAuthnAuthenticator).isEqualTo(expectedAuthenticator);
assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
assertThat(serverPropertyProviderImpl.getRpId(request)).isEqualTo("origin.example.com");
assertThat(token.isAuthenticated()).isTrue();
assertThat(challenge).isNotNull(); assertThat(challenge.getValue()).hasSize(16);
assertThat(instance.getUserPrincipal()).isEqualTo(userDetails);
assertThat(rpIdProvider.provide(httpServletRequest)).isEqualTo("example.com");
assertThat(target.extractAAGUID(metadataStatement)).isEqualTo(AAGUID.NULL);
assertThat(errorResponse.getErrorMessage()).isEqualTo("message");
assertThat(target.isWebAuthnAuthenticated(null)).isFalse(); assertThat(target.isWebAuthnAuthenticated(new WebAuthnAuthenticationToken(null, null, null))).isTrue(); assertThat(target.isWebAuthnAuthenticated(new AnonymousAuthenticationToken("dummy", "dummy", Collections.singletonList(new SimpleGrantedAuthority("dummy"))))).isFalse();
assertThat(optionsProvider.getRpId(request)).isEqualTo("example.com");
assertThat(result).isEqualTo(expected);
assertThat(authenticatedToken.getPrincipal()).isEqualTo(webAuthnPrincipal); assertThat(authenticatedToken.getCredentials()).isEqualTo(request); assertThat(authenticatedToken.getAuthorities().toArray()).containsExactly(grantedAuthority);
assertThat(trustAnchors).isNotEmpty();
assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
assertEquals(COSName.ANNOT, annotation.getCOSObject().getItem(COSName.TYPE)); assertEquals(PDAnnotationWidget.SUB_TYPE, annotation.getCOSObject().getNameAsString(COSName.SUBTYPE));
assertNull(root.getFirstChild());
assertEquals(2, doc.getPages().indexOf(current.findDestinationPage(doc)));
assertEquals(COSName.TRANS, transition.getCOSObject().getCOSName(COSName.TYPE)); assertEquals(PDTransitionStyle.R.name(), transition.getStyle());
assertEquals(i, doc.getPages().indexOf(doc.getPage(i)));
assertEquals(new COSFloat(2), toCOSArray.get(0)); assertEquals(new COSFloat(4), toCOSArray.get(1)); assertEquals(new COSFloat(5), toCOSArray.get(2)); assertEquals(new COSFloat(8), toCOSArray.get(3)); assertEquals(new COSFloat(2), toCOSArray.get(4)); assertEquals(new COSFloat(0), toCOSArray.get(5));
assertEquals(12, labels.length); assertEquals("A1", labels[0]); assertEquals("A2", labels[1]); assertEquals("A3", labels[2]); assertEquals("i", labels[3]); assertEquals("ii", labels[4]); assertEquals("iii", labels[5]); assertEquals("iv", labels[6]); assertEquals("v", labels[7]); assertEquals("vi", labels[8]); assertEquals("vii", labels[9]); assertEquals("Appendix I", labels[10]); assertEquals("Appendix II", labels[11]);
assertEquals(choiceField.getFieldType(), choiceField.getCOSObject().getNameAsString(COSName.FT)); assertEquals(choiceField.getFieldType(), "Ch"); assertFalse(choiceField.isCombo());
assertNull(root.getLastChild());
assertEquals(1, outline.getOpenCount()); assertEquals(-1, root.getOpenCount()); assertEquals(1, outline.getOpenCount()); assertEquals(-2, root.getOpenCount()); assertEquals(1, outline.getOpenCount()); assertEquals(2, root.getOpenCount()); assertEquals(3, outline.getOpenCount());
assertEquals(COSName.ANNOT, annotation.getCOSObject().getItem(COSName.TYPE)); assertEquals(PDAnnotationWidget.SUB_TYPE, annotation.getCOSObject().getNameAsString(COSName.SUBTYPE));
assertEquals(i, doc.getPages().indexOf(doc.getPage(i)));
assertNull(outline.getParent()); assertEquals(outline, root.getParent()); assertEquals(root, child.getParent());
assertEquals(-1, doc.getPages().indexOf(new PDPage()));
assertFalse(iterator.hasNext());
assertEquals(choiceField.getFieldType(), choiceField.getCOSObject().getNameAsString(COSName.FT)); assertEquals(choiceField.getFieldType(), "Ch"); assertTrue(choiceField.isCombo());
assertEquals(0, counter);
assertEquals(COSName.TRANS, transition.getCOSObject().getCOSName(COSName.TYPE)); assertEquals(PDTransitionStyle.Fade.name(), transition.getStyle());
assertFalse(employees.isEmpty()); assertEquals("Test", employee.getName()); assertEquals(35.5, employee.getWageRate(), 0.001);
assertArrayEquals(new byte[] { (byte)0x1D, (byte)0x28, (byte)0x6B, (byte)0x03, (byte)0x00, (byte)0x31, (byte)0x51, (byte)0x30 }, EscPosEncoder.qrCodePrint());
assertEquals(mockImplementation1, appContext.getBean(MockImplementation1.class)); assertEquals(mockImplementation1, appContext.getBean(MockAbstractClass1.class)); assertEquals(mockImplementation1, appContext.getBean(MockInterface1.class)); assertEquals(mockImplementation1, appContext.getBean(MockInterface2.class));
assertArrayEquals(new byte[] { (byte)0x1D, (byte)0x28, (byte)0x6B, (byte)0x03, (byte)0x00, (byte)0x31, (byte)0x45, (byte)0x33 }, EscPosEncoder.qrCodeCorrection(CorrectionLevel.H));
assertEquals(0, DateTimeUtils.calcWorkingTime(0, 0, 0)); assertEquals(60, DateTimeUtils.calcWorkingTime(0, 60, 0)); assertEquals(120, DateTimeUtils.calcWorkingTime(60, 180, 0)); assertEquals(120, DateTimeUtils.calcWorkingTime(60, 240, 60)); assertEquals(120, DateTimeUtils.calcWorkingTime(23 * 60, 60, 0)); assertEquals(240, DateTimeUtils.calcWorkingTime(23 * 60, 240, 60));
assertArrayEquals(new byte[] { (byte)0x1D, (byte)0x28, (byte)0x6B, (byte)0x03, (byte)0x00, (byte)0x31, (byte)0x43, (byte)0x04 }, EscPosEncoder.qrCodeModule((byte)4));
assertEquals(0x58, length[0]); assertEquals(0x1b, length[1]); assertEquals((byte)0xff, length2[0]); assertEquals(0x00, length2[1]); assertEquals(0x00, length3[0]); assertEquals(0x01, length3[1]);
assertEquals(mRootView, mSubject.getView());
assertEquals(-1, subject.getLastBindPosition()); assertNull(subject.getObject()); assertEquals(0, subject.getNbCallUpdateView()); assertEquals(expectedPosition, subject.getLastBindPosition()); assertEquals(expectedObject, subject.getObject()); assertEquals(1, subject.getNbCallUpdateView());
assertFalse(AdapterHelper.isAssignableFrom(params, Vehicle.class, Car.class, Car.class));
assertEquals(mViewParent1, mSubject.findViewByIdEfficient(ID_PARENT_1)); assertEquals(mViewParent2, mSubject.findViewByIdEfficient(ID_PARENT_2));
assertEquals(mRootView, mSubject.findViewByIdEfficient(ID_ROOT_VIEW));
assertEquals(mViewParent1Child1, mSubject.findViewByIdEfficient(ID_CHILD_1)); assertEquals(mViewParent1Child2, mSubject.findViewByIdEfficient(ID_CHILD_2));
assertTrue(AdapterHelper.isAssignableFrom(params, Vehicle.class, Car.class, Animal.class));
assertEquals(mViewParent1Child1, mSubject.findViewByIdEfficient(ID_PARENT_1, ID_CHILD_1)); assertEquals(mViewParent1Child2, mSubject.findViewByIdEfficient(ID_PARENT_1, ID_CHILD_2)); assertEquals(mViewParent2Child1, mSubject.findViewByIdEfficient(ID_PARENT_2, ID_CHILD_1)); assertEquals(mViewParent2Child2, mSubject.findViewByIdEfficient(ID_PARENT_2, ID_CHILD_2));
assertFalse(AdapterHelper.isAssignableFrom(params, Vehicle.class));
assertTrue(settings.contains(SettingsChecker.SettingsType.Developer)); assertTrue(settings.contains(SettingsChecker.SettingsType.Developer)==false);
assertEquals("1234", service.getNearbyCode());
assertEquals("test", connection.getClientID());
assertEquals(t.toString(), "TE: X: 100.000000 Y: 200.000000");
assertNotEquals(null, Whitebox.getInternalState(connection, "connectionsClient")); assertEquals(expected, connection.getClients());
assertEquals(connection, connection2);
assertEquals("1234", service.getNearbyCode());
assertTrue(settings.contains(SettingsChecker.SettingsType.ADBperUSB)); assertTrue(settings.contains(SettingsChecker.SettingsType.ADBperUSB)==false);
assertEquals(NearbyService.ACTION_START, intent.getAction());
assertEquals("1234", service.getNearbyCode()); assertEquals("5678", service.getNearbyCode());
assertNull(connection.getClientID()); assertEquals(empty, connection.getClients());
assertEquals(k1.getAdbPublicKeyPayload(), k2.getAdbPublicKeyPayload());
assertNotNull(group);
assertEquals(updatePolicyResponseDto, response);
assertEquals( "PERMIT", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest) .getPdpDecision()); assertEquals( "NOT_APPLICABLE", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest) .getPdpDecision());
assertEquals(false, response.isValid()); assertEquals(policyDto, response); assertEquals(policyDto.getPolicy(), response.getPolicy()); assertEquals(policyDto.getId(), response.getId());
assertEquals(queryIdMap.get("check"), cstl.getQueryIdMap().get("check"));
assertEquals(queryIdMap.get("check"), cstl.getQueryIdMap().get("check"));
assertNotNull(hl7v3PixXML);
assertEquals(expectedUpdateMsg, cstl.getUpdateMessage());
assertEquals(DIRECT_REFERENCE_LONG, Long.valueOf(sut.getDirectReference(INDIRECT_REFERENCE)));
assertEquals("NOT_APPLICABLE", decision);
assertEquals(redactNodeList.size(), 1);
assertEquals(true, result);
assertEquals(xacmlMock, xacml);
assertTrue(!taggedDocument.contains("<confidentialityCode/>"));
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertEquals(pixAddMock, actualRet);
assertNotNull(sardine);
assertEquals(expectedAddMsg, cstl.getAddMessage());
assertNotNull(hl7v3PixXML);
assertEquals( "PERMIT", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision()); assertEquals( "NOT_APPLICABLE", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision());
assertEquals(vst.findById((long) 1), valueSetDto);
assertEquals(false, result);
assertEquals(resp.getRegistryResponse().getRequestId(), response.getRegistryResponse().getRequestId());
assertEquals("PERMIT", decision);
assertEquals(false, validateCall);
assertFalse(sut.isDocumentOversized(file));
assertEquals(2, ruleExecutionContainer.getSize()); assertEquals("REDACT", ruleExecutionContainer.getExecutionResponseList().get(0).getItemAction()); assertEquals("REDACT", ruleExecutionContainer.getExecutionResponseList().get(1).getItemAction());
assertEquals(116, bytes[0]); assertEquals(101, bytes[1]); assertEquals(115, bytes[2]); assertEquals(116, bytes[3]);
assertEquals(EXPECTED_GLOBAL_DOMAIN_ID, PixManagerConstants.GLOBAL_DOMAIN_ID); assertEquals(EXPECTED_GLOBAL_DOMAIN_NAME, PixManagerConstants.GLOBAL_DOMAIN_NAME);
assertEquals(1, configure.size()); assertEquals(reportFormat.getFormat(), configure.get(JasperReportsMultiFormatView.DEFAULT_FORMAT_KEY));
assertEquals(BASE_PATH+"c/",pathMap.get("new.xsd")); assertNotNull(input);
assertEquals(false, result);
assertEquals(expectedItVersion, actualItversion); assertEquals(expectedId, actualId);
assertEquals(false, validateCall);
assertEquals("Success", actualResponse);
assertEquals(baseClasspathForImgResourcesvalue1, sut.classpath(value1)); assertEquals(baseClasspathForImgResourcesvalue2, sut.classpath(value2));
assertEquals(expectedResponse, actualResponse);
assertNotNull(sut.getMarshaller());
assertEquals(pixQueryXML, actualRet);
assertNotNull(d1); assertNotNull(d2);
assertTrue("actual value" + actRet, actRet.trim().length() == 0);
assertEquals("stateID", sat.login());
assertTrue(b1.length > 0); assertTrue(b2.length > 0);
assertNotNull(acs); assertEquals(errMsg, acs.getMessage()); assertEquals("java.lang.Throwable: "+ errMsg, acs.getMessage()); assertEquals(errMsg, acs.getMessage()); assertEquals(Throwable.class , acs.getCause().getClass());
assertTrue(ruleExecutionResponseContainer .contains("<ruleExecutionContainer>")); assertTrue(ruleExecutionResponseContainer .contains("<executionResponseList>")); assertTrue(ruleExecutionResponseContainer .contains("<executionResponse>")); assertTrue(ruleExecutionResponseContainer .contains("<c32SectionLoincCode>11450-4</c32SectionLoincCode>")); assertTrue(ruleExecutionResponseContainer .contains("<sensitivity>ETH</sensitivity>")); assertTrue(ruleExecutionResponseContainer .contains("<sensitivity>HIV</sensitivity>"));
assertEquals(false, validateCall);
assertEquals(reportImageResolver, field.get());
assertEquals(true, cst.validateConsentDate(new Date(117, 06, 04), new Date(117, 06, 19)));
assertEquals(policyList.size(), response.getPolicies().size()); assertEquals(p1.getId(), response.getPolicies().get(0).getId()); assertEquals(p1.isValid(), response.getPolicies().get(0).isValid()); assertEquals(p2.getId(), response.getPolicies().get(1).getId()); assertEquals(p2.isValid(), response.getPolicies().get(1).isValid());
assertEquals(details, result);
assertEquals(pRPAIN201310UV02Mock, actualObj);
assertTrue("Actual Add message " + pixManagerBean.getAddMessage(), pixManagerBean.getAddMessage().startsWith("Add Failure! "));
assertEquals(e.getMessage(), "Username does not match current active user.");
assertNotEquals(notEncrypted, encrypted); assertTrue(XmlComparator.compareXMLs(testEncrypted, encrypted, Arrays.asList("CipherData")).similar());
assertEquals(expectedUpdateMsg, cstl.getUpdateMessage());
assertEquals(isOverlap, false);
assertEquals(expectedEmail, result);
assertEquals("Delete entry", revType);
assertEquals(2, result.getExceptions().size()); assertTrue(e.getMessage().contains("noSuchElement") || e.getMessage().contains("noSuchElement2"));
assertEquals(false, validateCall);
assertEquals(isPouMatch, false);
assertNotEquals(c32, encrypted); assertTrue(XmlComparator.compareXMLs(testEncrypted, encrypted, Arrays.asList("CipherData")).similar());
assertEquals(2, ruleExecutionContainer.getSize()); assertEquals("REDACT", ruleExecutionContainer.getExecutionResponseList().get(0).getItemAction()); assertEquals("REDACT", ruleExecutionContainer.getExecutionResponseList().get(1).getItemAction());
assertEquals(false, cst.validateConsentDate(new Date(117, 06, 04), new Date(117, 06, 02)));
assertEquals(BASE_PATH+"c/d/",pathMap.get("new.xsd")); assertNotNull(input);
assertEquals(2, configure.size()); assertEquals(classpath1, configure.get(param1)); assertEquals(classpath2, configure.get(param2));
assertEquals(consentDtoMock, consentDto);
assertFalse(clinicalDocumentController.scanMultipartFile(file).toString().equals("true"));
assertEquals(conceptCodeServiceImpl.findAll(), conceptCodeDtos);
assertEquals("20140509", sqt.trasferDateType(date));
assertTrue(sut.isValid());
assertEquals(2, result.size()); assertTrue(providerDto == providerDto1 || providerDto == providerDto2); assertTrue(result.get(0) != result.get(1));
assertNotNull(e1); assertNotNull(e2); assertNotEquals(e1.getAttribute("value"), e2.getAttribute("value"));
assertEquals(false, validateCall);
assertNotEquals(c32, encrypted); assertNull(encrypted);
assertEquals("gov.samhsa.consent2share.service.dto.ConsentPdfDto", className);
assertEquals("Individual Provider", revClassName);
assertTrue(domainEventHandler.isEventFired());
assertEquals(true, cst.areThereDuplicatesInTwoSets(set1, set2));
assertEquals(isOverlap, false);
assertEquals(TEST_VALUE, value); assertEquals(1, counter.get());
assertEquals(nodeValueMock, deprecatedDocumentUniqueId);
assertEquals(hl7v3XmlMock, actRetResponse);
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertEquals(1, configure.size()); assertEquals(reportFormat.getFormat(), configure.get(JasperReportsMultiFormatView.DEFAULT_FORMAT_KEY));
assertTrue(StringUtils.hasText(sqlScript));
assertEquals(isPouMatch, true);
assertEquals(conceptCodeServiceImpl.create(created), conceptCodeDto);
assertEquals(stringURIResolver.resolve("uri","base").getClass().getName(),"javax.xml.transform.stream.StreamSource");
assertEquals(vst.findAll(), codeSystemVersionDtos);
assertNotNull(newJRDataSource); assertTrue(newJRDataSource.next());
assertEquals(expectedItVersion, actualItversion);
assertNotNull(session);
assertEquals(vst.findAllByCode("a", "ETH", 0).get("valueSets"), valueSetDtosMock);
assertEquals(2, configure.size()); assertEquals(classpath1, configure.get(param1)); assertEquals(classpath2, configure.get(param2));
assertTrue(equals1); assertFalse(equals2);
assertEquals(EXPECTED_OUTPUT, actualOutput);
assertTrue(StringUtils.hasText(sqlScript));
assertEquals(pixAddXmlMock, actualRet);
assertEquals(EXPECTED_MARSHALL_RESPONSE, response);
assertTrue(test1); assertFalse(test2);
assertEquals(expectedResponse, actualResponse);
assertEquals( "gov.samhsa.consent2share.domain.consent.SignedPDFConsent", className);
assertEquals(e.getMessage(), "Username does not match current active user.");
assertEquals(registryResponse, actualRegistryResponse);
assertNull(consentDto);
assertEquals(EncryptTool.generateKeyEncryptionKey().getClass().getName(),"com.sun.crypto.provider.DESedeKey");
assertEquals(EXPECTED_OUTPUT, actualOutput);
assertNull(eid);
assertEquals(redactNodeList.size(),12);
assertTrue(compareXMLs(docTransformed, actualOutput, ignoreList) .similar());
assertEquals(retrieveDocumentSetResponseExpected, retrieveDocumentSetResponseActual);
assertEquals(addPatientMock, actualRetResponse);
assertEquals(loginSuccessEventListener.canHandle(event),true);
assertEquals(pixUpdateMock, actualRet);
assertEquals(updatePatientMock, actualRetResponse);
assertEquals(registryErrorListMock, retrieveDocumentSetResponseMock.getRegistryResponse().getRegistryErrorList()); assertEquals(URN_PARTIAL_SUCCESS, retrieveDocumentSetResponseMock.getRegistryResponse().getStatus());
assertEquals(POLICY_ID, policyDto.getId());
assertTrue("actual value" + actRet, actRet.trim().length() == 0);
assertEquals(true, result);
assertEquals(xacmlMock, xacml);
assertEquals(expectedResponse, actualResponse);
assertNotNull(response); assertNotEquals(mockString, response);
assertEquals(accountUserDetailsService.loadUserByUsername(username), user);
assertEquals(findSubmissionSetsResponseMock, actualResponse);
assertEquals(stringURIResolver.resolve("nonexist","base"),null);
assertEquals(isOverlap, true);
assertEquals(pixUpdateXML, actualRet);
assertEquals(cdar2Mock, cdar2);
assertTrue(!policyList.contains(policy1)); assertTrue(policyList.contains(policy2));
assertEquals(1, configure.size()); assertEquals(datasource, configure.get(datasourceKey));
assertEquals(ehrPatIdRsp, sat.insertPatient(ehrWsEmptyReq));
assertEquals(0, actualResponse.getDocumentResponse().size()); assertEquals( "urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure", actualResponse.getRegistryResponse().getStatus()); assertEquals( "Document validation error(s) occurred in Policy Enforcement Point for document(s): [2]. Please contact to system administrator if this error persists.", actualResponse.getRegistryResponse().getRegistryErrorList() .getRegistryError().get(0).getCodeContext());
assertEquals(false, result);
assertEquals(null, value); assertEquals(LIMIT, counter.get());
assertEquals(getPolicyResponseDto, response.getPolicies().get(0));
assertEquals("NOT_APPLICABLE", decision);
assertEquals(EXPECTED_EID, eid);
assertEquals(expectedId, result);
assertEquals(1, configure.size()); assertEquals(reportFormat.getFormat(), configure.get(JasperReportsMultiFormatView.DEFAULT_FORMAT_KEY));
assertEquals(vst.update(updated), codeSystemDto);
assertEquals(false, validateCall);
assertNull(bytes);
assertNotNull(e); assertEquals(FIELD1_VALUE, e.getField1()); assertEquals(FIELD2_VALUE, e.getField2());
assertEquals("Changed entry", revType);
assertEquals(hl7v3XmlMock, actRetResponse);
assertEquals(vst.findById((long) 1), valueSetCategoryDto);
assertEquals(2, configure.size()); assertEquals(classpath1, configure.get(param1)); assertEquals(classpath2, configure.get(param2));
assertEquals(INDIRECT_REFERENCE, sut.getIndirectReference(DIRECT_REFERENCE_STRING));
assertTrue(StringUtils.hasText(sut.generateMessageId()));
assertEquals(today.get(Calendar.HOUR_OF_DAY), 23); assertEquals(today.get(Calendar.MINUTE), 59); assertEquals(today.get(Calendar.SECOND), 59);
assertEquals("CONSENT_SAVED", cst.getConsentSignedStage((long) 1));
assertTrue(result);
assertEquals(false, validateCall);
assertEquals(response, responseActual);
assertEquals(pixUpdateMessageMock, actualRet);
assertEquals(VALUE1, sut.validateAndReturn(KEY1));
assertEquals(c32XmlMock, actualRet);
assertEquals(isPouMatch, true);
assertEquals(false, validateCall);
assertEquals(false, result);
assertEquals(vst.findAllByName("a", null, 0).get("valueSets"), valueSetDtosMock);
assertEquals("Patient", revClassName);
assertEquals(expectedItVersion, actualItversion); assertEquals(expectedFirstName, actualFirstName);
assertEquals(true, result);
assertEquals(expectedResponseMock, actRetResponse);
assertNotNull(creationTime); assertNotNull(modificationTime); assertTrue(modificationTime.after(creationTime));
assertEquals(segmentedC32, result);
assertNotNull(sut.toString(null)); assertNotNull(sut.toString(new Long(10))); assertNotNull(sut.toString(new Boolean(true))); assertNotNull(sut.toString(new Double(2))); assertNotNull(sut.toString(new Integer(2))); assertNotNull(sut.toString(listMock));
assertEquals(1, configure.size()); assertEquals(configure.get(JRParameter.IS_IGNORE_PAGINATION), Boolean.TRUE);
assertNotNull(docString); assertTrue(XmlComparator.compareXMLs(s2, docString, Arrays.asList("")) .similar());
assertEquals(adhocQueryResponse, actualResponse);
assertEquals(pixMgrBean.getQueryMessage(), actObj.getQueryMessage());
assertTrue(StringUtils.hasText(policyId)); assertTrue(policyId.startsWith(MRNMOCK)); assertTrue(policyId.contains(PIDDOMAINIDMOCK)); assertTrue(policyId.contains(PIDDOMAINTYPEMOCK));
assertTrue(diff.similar());
assertTrue(sut.getImageMapping().isPresent()); assertEquals(1, sut.getImageMapping().get().size()); assertEquals(KEY, sut.getImageMapping().get().keySet().stream() .findFirst().get()); assertEquals(VALUE, sut.getImageMapping().get().get(KEY));
assertEquals(expectedXacmlXslUrl, returnedXacmlXslUrl);
assertNotNull(locId); assertTrue(locId.startsWith(new String(c2sEnvType).toUpperCase()));
assertEquals(false, validateCall);
assertEquals(loginSuccessEventListener.canHandle(event),false);
assertEquals(xacmlResponse, response);
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertEquals( conceptCodeServiceImpl.findAllByName("a", null, null, null, 0) .get("conceptCodes"), conceptCodeDtos);
assertEquals(expectedPAdminProfileDto, result);
assertEquals(isOverlap, true);
assertEquals( conceptCodeServiceImpl.findAllByCode("a", null, null, null, 0) .get("conceptCodes"), conceptCodeDtos);
assertTrue( "Actual Update message " + pixManagerBean.getUpdateMessage(), pixManagerBean.getUpdateMessage() .startsWith("Update Failure! "));
assertEquals(valueSetCategorySetMock, response);
assertNotNull(result);
assertTrue(clinicalDocumentController.scanMultipartFile(file).toString().equals("true"));
assertNotNull(xml); assertTrue(StringUtils.hasText(xml));
assertEquals(2, result.size()); assertTrue(providerDto == providerDto1 || providerDto == providerDto2); assertTrue(result.get(0) != result.get(1));
assertEquals(xacmlResponse, response);
assertEquals(isOverlap, true);
assertTrue("actual value" + actRet, actRet.trim().length() == 0);
assertTrue(StringUtils.hasText(policyId)); assertTrue(policyId.startsWith(MRNMOCK)); assertTrue(policyId.contains(PIDDOMAINIDMOCK)); assertTrue(policyId.contains(PIDDOMAINTYPEMOCK));
assertEquals(isOverlap, true);
assertTrue(valid);
assertTrue(compareXMLs(docTransformed, actualOutput, ignoreList) .similar());
assertEquals(expectedResponse, actualResponse);
assertTrue( "Actual Update message " + pixManagerBean.getUpdateMessage(), pixManagerBean.getUpdateMessage() .startsWith("Update Failure! "));
assertEquals(consentDtoMock, consentDto);
assertEquals(false, result);
assertEquals("java.util.LinkedList", object.getClass().getName());
assertFalse(valid);
assertFalse(valid);
assertEquals(resp.getReturn(), response.getReturn());
assertTrue("actual value" + actRet, actRet.trim().length() == 0);
assertFalse(result);
assertEquals(cdar2Mock, cdar2);
assertEquals(conceptCodeServiceImpl.create(created), conceptCodeDto);
assertEquals(isPouMatch, false);
assertEquals(name, sut.getName());
assertNotNull(sut.getMarshaller());
assertEquals(SEGMENTED_DOCUMENT_XML_MOCK, actualResponse);
assertTrue(policyListMock.contains(actualResponse));
assertEquals(pIXManagerPortTypeMock, sut.createPort());
assertEquals(expectedItVersion, actualItversion);
assertEquals( "NOT_APPLICABLE", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision());
assertEquals(false, cst.areThereDuplicatesInTwoSets(set1, set2));
assertEquals(registryResponseMock, actualResponse);
assertEquals(loginFailureEventListener.canHandle(event),false);
assertNotNull(actualValue); assertEquals(expectedValue, actualValue);
assertEquals("PERMIT", decision);
assertEquals(false, validateCall);
assertEquals(expectedPatientProfileDto, result);
assertEquals(expectedResponse, actualResponse);
assertTrue (date.matches("\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}-\\\\d{4}"));
assertEquals(listMock, actualList);
assertEquals(BASE_PATH+"x/",pathMap.get("new.xsd")); assertNotNull(input);
assertTrue(response.getPolicies().contains(getPolicyResponseDto1)); assertTrue(response.getPolicies().contains(getPolicyResponseDto2));
assertEquals(isOverlap, true);
assertEquals( Arrays.asList(patientAdminDto, patientAdminDto2), sut.findAllPatientByFirstNameAndLastName(new String[] { "john", "smith" }));
assertEquals(pRPAIN201310UV02Mock, actualObj);
assertEquals(expectedItVersion, actualItversion);
assertEquals(REPOSITORY_UNIQUE_ID + ":" + DOCUMENT_UNIQUE_ID, xdsbDocumentReference.toString());
assertFalse(result);
assertEquals(false, cst.validateConsentDate(null, null));
assertEquals(pixMgrBean.getQueryMessage(), actObj.getQueryMessage());
assertEquals(pdp.getPolicies(xacmlRequest), policies);
assertEquals(false, result);
assertEquals( "PERMIT", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest) .getPdpDecision()); assertEquals( "DENY", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest) .getPdpDecision());
assertEquals(xacmlMock, xacml);
assertEquals(VALUE2, sut.validateAndReturn(VALUE2));
assertEquals(expectedItVersion, actualItversion);
assertEquals(expectedPatientProfileDto, result);
assertEquals(xacmlResponse, response);
assertEquals(pixAddXmlMock, addResponse); assertEquals(pixUpdateXmlMock, updateResponse); assertEquals(pixQueryXmlMock, queryResponse); assertEquals(nullReturnMock, nullResponse);
assertEquals(consentIdMock, result.getPcmConsentId()); assertEquals(policyIdMock, result.getXacmlCcdId()); assertEquals(patientIdMock, result.getPatientEid()); assertEquals(revokedConsentPdfMock, result.getRevokedPdfConsent());
assertEquals("Create new entry", revType);
assertTrue("Actual Add message " + pixManagerBean.getAddMessage(), pixManagerBean.getAddMessage().startsWith("Add Failure! "));
assertEquals(true, validateCall);
assertEquals(map, add.build().get(0).get().configure(null, null, null));
assertTrue(sut.getTemplateUrl().startsWith(TEMPLATE_LOCATION)); assertTrue(sut.getTemplateUrl().contains(name)); assertTrue(sut.getTemplateUrl().endsWith( ReportProps.REPORT_TEMPLATE_FORMAT));
assertEquals(false, validateCall);
assertTrue(compareXMLs(docTransformed, actualOutput, ignoreList) .similar());
assertTrue(clinicalDocumentController.scanMultipartFile(file).toString().equals("true"));
assertEquals(expectedResponse, actualResponse);
assertEquals(expectedErrorMessage, bean.getQueryMessage());
assertEquals(greenCCDMock, actualObj);
assertEquals(expectedItVersion, actualItversion); assertEquals(expectedFirstName, actualFirstName);
assertEquals(expectedAddMsg, cstl.getAddMessage());
assertNotNull(node); assertNotNull(node2); assertEquals(POLICY_ID1, node.getNodeValue()); assertEquals(POLICY_ID2, node2.getNodeValue());
assertTrue(policyList.contains(policy1)); assertTrue(!policyList.contains(policy2));
assertEquals(false, validateCall);
assertNotNull(docString); assertNotNull(s1, "s1 is null"); assertNotNull(docString, "docString is null"); assertTrue(XmlComparator.compareXMLs(s1, docString, Arrays.asList("")) .similar());
assertEquals(isProviderComboMatch, false);
assertNotNull(actualRet);
assertEquals(expectedResponse, actualResponse);
assertEquals(VALUE2, sut.validateAndReturn(KEY2));
assertEquals(false, cst.validateConsentDate(new Date(100, 06, 04), new Date(200, 06, 04)));
assertEquals("gov.samhsa.consent2share.service.dto.ConsentDto", object .getClass().getName());
assertEquals("gov.samhsa.consent2share.domain.consent.Consent", className);
assertEquals(document.getClass().getName(),"org.hl7.v3.POCDMT000040ClinicalDocument");
assertEquals(isOverlap, false);
assertNotNull(s);
assertEquals("Add provider", revClassName);
assertEquals(vst.findAll(), codeSystemDtos);
assertEquals(expectedXacmlXslUrl, returnedXacmlXslUrl);
assertEquals("Patient", revClassName);
assertEquals(isPouMatch, true);
assertEquals(POLICY_ID, policyDto.getId());
assertNotNull(view); assertEquals(templateUrl, view.getUrl()); assertEquals(datasourceKeyValue, ReflectionTestUtils.getField(view, "reportDataKey"));
assertNotNull(obj);
assertEquals(vst.update(updated), valueSetCategoryDto);
assertNotEquals(c32, encrypted); assertNull(encrypted);
assertEquals(0, configure.size());
assertNotNull(docString); assertTrue(XmlComparator.compareXMLs(s3, docString, Arrays.asList("")) .similar());
assertNotNull(ruleExecutionContainer); assertEquals(2, ruleExecutionContainer.getExecutionResponseList() .size()); assertEquals(EXPECTED_RESPONSE_1, results[0]); assertEquals(EXPECTED_RESPONSE_2, results[1]);
assertEquals(expectedCount, result);
assertEquals("java.util.ArrayList", className);
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertNotNull(bean); assertEquals(expectedQueryMessage, bean.getQueryMessage()); assertEquals(EXPECTED_EID, bean.getQueryIdMap().get(EXPECTED_DOMAIN)); assertEquals("", bean.getAddMessage()); assertEquals("", bean.getUpdateMessage());
assertEquals(requestExpected.getDocumentRequest(), requestActual.getDocumentRequest());
assertEquals(pdp.getPolicies(xacmlRequest), policies);
assertEquals("gov.samhsa.consent2share.service.dto.HistoryDto", className);
assertEquals("java.util.ArrayList", className);
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertEquals( "PERMIT", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision()); assertEquals( "DENY", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision());
assertEquals("Albert", patientDto.getFirstName()); assertEquals("Smith", patientDto.getLastName()); assertEquals("M", patientDto.getGenderCode()); assertEquals("USA", patientDto.getCountry()); assertEquals("20140509", patientDto.getBirthDate());
assertEquals(expectedErrorMessage, bean.getQueryMessage());
assertEquals(pdpResp, resp);
assertEquals(DATASOURCE_KEY, sut.getDatasourceKey());
assertEquals(false, validateCall);
assertEquals(SEGMENTED_DOCUMENT_XML_MOCK, actualResponse);
assertEquals(isOverlap, true);
assertEquals("java.util.ArrayList", className);
assertFalse(isValid0); assertFalse(isValid1); assertFalse(isValid2); assertTrue(isValid3); assertFalse(isValid4); assertFalse(isValid5);
assertEquals(registryResponseMock, actualResponse);
assertNotNull(creationTime); assertNotNull(modificationTime); assertEquals(creationTime, modificationTime);
assertEquals(consentDtoMock, consentDto);
assertEquals(SUCCESS, sut.handleMessage(SUCCESS));
assertEquals(xacmlMock, xacml);
assertEquals( "NOT_APPLICABLE", pdp.evaluateRequest(simplePDP, request, new LinkedList<Evaluatable>(), xacmlRequest) .getPdpDecision());
assertEquals(dtos, sut.findDtoByPatientDto(patientDto));
assertEquals(expectedResponse, actualResponse);
assertTrue(sut.validate(validC32));
assertTrue (date.matches("\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}-\\\\d{4}"));
assertEquals(loginFailureEventListener.canHandle(event),true);
assertTrue(StringUtils.hasText(mrn)); assertTrue(mrn.startsWith(prefixMock));
assertFalse(sut.isDocumentExtensionPermitted(file));
assertEquals(retrieveDocumentSetResponseExpected, retrieveDocumentSetResponseActual);
assertEquals(consentDtoMock, consentDto);
assertNotNull(result);
assertEquals(pixQueryMock, actualRet);
assertEquals(resp.getRequestId(), response.getRequestId());
assertEquals(expectedQueryMsg, cstl.getQueryMessage());
assertEquals(2, configure.size()); assertEquals(webpath1, configure.get(param1)); assertEquals(webpath2, configure.get(param2));
assertNotNull(xml); assertTrue(StringUtils.hasText(xml));
assertEquals(responseMock, actualResponse);
assertEquals(expectedResponse, actualResponse);
assertEquals(false, validateCall);
assertEquals(responseMock, actualResponse);
assertEquals(registryErrorListMock, retrieveDocumentSetResponseMock.getRegistryResponse().getRegistryErrorList()); assertEquals(URN_FAILURE, retrieveDocumentSetResponseMock.getRegistryResponse().getStatus());
assertEquals(isOverlap, true);
assertNotNull(actualValue); assertEquals(expectedValue, actualValue);
assertEquals(isProviderComboMatch, true);
assertEquals(expectedQueryMsg, cstl.getQueryMessage());
assertTrue(compareXMLs(docTransformed, actualOutput, ignoreList) .similar());
assertEquals(EXPECTED_OUTPUT, actualOutput);
assertEquals(pixManagerBeanMock, actualObj);
assertEquals(administrator, result);
assertEquals(cstl.getClass(), actualCstl.getClass());
assertEquals("CONSENT_SIGNED", cst.getConsentSignedStage((long) 1));
assertEquals(spiritUserResponse, sat.usrOrgRoleLogin());
assertEquals(expectedResponse, actualResponse);
assertEquals(hl7v3XmlMock, actRetResponse);
assertEquals(c32Mock, actRet);
assertEquals(vst.findById((long) 1), codeSystemDto);
assertEquals(true, response.isValid()); assertEquals(policyDto, response); assertEquals(policyDto.getPolicy(), response.getPolicy()); assertEquals(policyDto.getId(), response.getId());
assertNotNull(xml1); assertNotNull(xml2); assertTrue(StringUtils.hasText(xml1)); assertTrue(StringUtils.hasText(xml2));
assertEquals(false, validateCall);
assertTrue(sut.isDocumentOversized(file));
assertEquals(false, validateCall);
assertEquals(EncryptTool.generateDataEncryptionKey().getClass().getName(),"javax.crypto.spec.SecretKeySpec");
assertTrue(domainEventHandler.isEventFired());
assertEquals(isOverlap, true);
assertTrue(submissionSetUniqueIds.contains(nodeValueMock));
assertEquals(isProviderComboMatch, false);
assertEquals(vst.findAll(), valueSetDtosMock);
assertFalse(sut.validate(invalidC32));
assertEquals(administrator, result);
assertEquals(1, configure.size()); assertEquals(reportFormat.getFormat(), configure.get(JasperReportsMultiFormatView.DEFAULT_FORMAT_KEY));
assertEquals(isOverlap, true);
assertEquals(BASE_PATH,pathMap.get("new.xsd")); assertNotNull(input);
assertEquals(accountUserDetailsService.loadUserByUsername(username), user);
assertEquals(1, configure.size()); assertEquals(configure.get(JRParameter.IS_IGNORE_PAGINATION), Boolean.TRUE);
assertEquals(expectedPatientProfileDto, result);
assertFalse(sut.isDocumentExtensionPermitted(file));
assertEquals(false, validateCall);
assertFalse(valid);
assertEquals(firstName, administrator.getFirstName());
assertEquals(getSubmissionSetAndContentsResponseMock, actualResponse);
assertTrue(sut.isDocumentExtensionPermitted(file));
assertEquals(retrieveDocumentSetResponse, actualResponse);
assertTrue(result);
assertEquals(expectedResponse, actualResponse);
assertEquals(pixAddMessageMock, actualRet);
assertEquals(stringURIResolver.documents.get("uri"),"document");
assertNotNull(d1); assertNotNull(d2);
assertEquals(name.hashCode(), sut.hashCode());
assertEquals(1, configure.size()); assertEquals(configure.get(JRParameter.IS_IGNORE_PAGINATION), Boolean.TRUE);
assertEquals(contextPathbaseWebpathForImgResourcesvalue1, sut.webpath(value1)); assertEquals(contextPathbaseWebpathForImgResourcesvalue2, sut.webpath(value2));
assertEquals(expectedResponse, actualResponse);
assertEquals(requestExpected.getDocumentRequest(), requestActual.getDocumentRequest());
assertEquals(SEGMENTED_DOCUMENT_XML_MOCK, actualResponse);
assertEquals(filteredResponseMock, actualResponse);
assertEquals(1, actualResponse.getDocumentResponse().size()); assertEquals(document, actualResponse.getDocumentResponse().get(0)); assertEquals( "urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:PartialSuccess", actualResponse.getRegistryResponse().getStatus()); assertEquals( "Document validation error(s) occurred in Policy Enforcement Point for document(s): [2]. Please contact to system administrator if this error persists.", actualResponse.getRegistryResponse().getRegistryErrorList() .getRegistryError().get(0).getCodeContext());
assertEquals(VALUE1, sut.validateAndReturn(VALUE1));
assertEquals(size2, nodeList2.getLength());
assertEquals(expectedResponse, actualResponse);
assertEquals(parameters,configure);
assertEquals(expectedResponse, actualResponse);
assertEquals(SEGMENTED_DOCUMENT_XML_MOCK, actualResponse);
assertEquals(accountUserDetailsService.loadUserByUsername(username), user);
assertEquals(responseMock, actualResponse);
assertTrue(compareXMLs(docTransformed, actualOutput, ignoreList) .similar());
assertNotNull(hl7v3PixXML); assertEquals(transformedXmlMock, hl7v3PixXML);
assertEquals(xacmlResponse, response);
assertEquals(null, value); assertEquals(LIMIT, counter.get());
assertEquals(false, validateCall);
assertEquals("notification_add_provider", result);
assertEquals(expectedItVersion, actualItversion); assertEquals(expectedFirstName, actualFirstName);
assertEquals(xacmlMock, xacml);
assertEquals(TEST_VALUE, value); assertEquals(LIMIT, counter.get());
assertEquals(CODESYSTEM_UPDATE_DISPLAYNAME, codeSystem.getDisplayName());
assertNotNull(output);
assertEquals(mCCIIN000002UV01Mock, actualObj);
assertFalse(clinicalDocumentController.scanMultipartFile(file).toString().equals("true"));
assertEquals(vst.findAll(), valueSetDtos);
assertEquals(expectedItVersion, actualItversion); assertEquals(expectedFirstName, actualFirstName);
assertEquals(null, revType);
assertEquals("::World::", result);
assertTrue(m.matches());
assertTrue(m.matches());
assertTrue(m.matches());
assertEquals(result.get(0), 4.25, TOLERANCE); assertEquals(result.get(1), 5.25, TOLERANCE); assertEquals(result.get(2), 6.25, TOLERANCE);
assertEquals(lut.evaluate(args), 5.0, TOLERANCE);
assertTrue(m.matches());
assertTrue(m.matches());
assertEquals(lut.evaluate(args), 8.0, TOLERANCE);
assertFalse(it.hasNext());
assertTrue(m.matches());
assertEquals(result.get(0), 4.0, TOLERANCE); assertEquals(result.get(1), 5.0, TOLERANCE); assertEquals(result.get(2), 6.0, TOLERANCE);
assertTrue(m.matches());
assertTrue(m.matches());
assertTrue(m.matches());
assertEquals(lut.evaluate(args), 8.0, TOLERANCE);
assertThat(result).isNotNull(); assertThat(result.isNotEmpty()).isTrue(); assertThat(result.getName()).isEqualTo("bar");
assertThat(variables.get("foo")).isEqualTo(1); assertThat(variables.get("bar")).isNull();
assertThat(topic).isEqualTo("/TaskAssignmentCommand/" + taskId + "/" + uuid);
assertThat(testReturn).isEqualTo("test");
assertThat(result).isNotNull(); assertThat(result.isNotEmpty()).isTrue(); assertThat(result.getName()).isEqualTo("foo");
assertTrue(fields.size() == 3); assertEquals(fields.get(idx).getName(), "Col_" + (idx + 1)); assertEquals(fields.get(idx).getSampleValues().size(), 1);
assertThat(actual).isInstanceOf(CustomRuntimeException.class); assertThat(actual).hasCause(sqlException);
assertThat(values).containsExactly(expectedArgs);
assertTrue(regexReplacer.accepts("foofeefoofie"));
assertThat(conns).isNotNull(); assertThat(conns).hasSize(COUNT);
assertFalse(standardizer.accepts(doubleValue));
assertThat(response.getEntity()) .isNotNull() .extracting("id").contains("C1");
assertThat(bIdx).isEqualTo(1); assertThat(xIdx).isEqualTo(-1);
assertThat(set1) .hasSize(1) .containsOnly(USER1); assertThat(set2) .hasSize(2) .containsOnly(USER1, USER2);
assertThat(names).containsExactly("1", "4", "2", "3");
assertThat(result).isFalse(); assertThat(result).isTrue(); assertThat(list).contains("b");
assertThat(option.isPresent()).isTrue();
assertEquals("Quote identifier (null) not retrieved correctly", "", quoteIdentifier);
assertTrue(validator.validate("10.0.0.0")); assertTrue(validator.validate("10.0.0.255")); assertTrue(validator.validate("10.0.255.0")); assertTrue(validator.validate("10.255.0.0")); assertTrue(validator.validate("255.0.0.0"));
assertThat(config.getColumnSpecs()) .isNotEmpty() .extracting("name", "comment", "dataType", "primaryKey", "createDate", "modifiedDate") .contains(tuple("column1", "comment", "type1", true, true, false), tuple("column2", "comment", "type2", false, false, true));
assertEquals("default", standardizer.convertRawValue("")); assertEquals("default", standardizer.convertRawValue(null)); assertEquals("foo", standardizer.convertRawValue("foo"));
assertThat(groupA).isNotNull(); assertThat(optional.isPresent()).isTrue();
assertEquals(expectedValue, regexReplacer.convertRawValue(rawValue));
assertThat(optional.isPresent()).isTrue(); assertThat(groupA).extracting(UserGroup::getSystemName).containsExactly("groupA");
assertEquals(expectedValue, cc.convertRawValue(rawValue));
assertTrue(validator.validate("true")); assertTrue(validator.validate("false")); assertFalse(validator.validate("FALSE")); assertFalse(validator.validate("none")); assertFalse(validator.validate(""));
assertThat(result).isTrue(); assertThat(list).contains("a", "b", "c", "x", "y", "z");
assertNotNull(factory.createJobInstance(bundle));
assertThat(callback.isMultiValued()).isTrue(); assertThat(callback.getValue()).hasValue("value1,value2"); assertThat(callback.getValues()).hasSize(2).contains("value1", "value2");
assertEquals(expectedValue, standardizer.convertRawValue(rawValue));
assertThat(commandLine).isNotEmpty();
assertThat(mgrObjResolved).isInstanceOf(SourceAlertID.class).isEqualTo(mgrId).isEqualTo(mgrStrResolved); assertThat(srcObjResolved).isInstanceOf(SourceAlertID.class).isEqualTo(srcId).isEqualTo(srcStrResolved);
assertFalse(stripNonNumeric.accepts(doubleValue));
assertTrue(standardizer.accepts("string-value"));
assertEquals(expectedValue, standardizer.convertRawValue(rawValue));
assertThat(ds).isNotNull().isNotPresent();
assertThat(id).isEqualTo(fromStr).isEqualTo(fromUUID).isEqualTo(fromID); assertThat(this.provider.getAgreement(fromStr)).isNotNull();
assertEquals(ParserHelper.sqlTypeToHiveType(JDBCType.DOUBLE), "double");
assertEquals(0, results.size()); assertEquals(4, results.size());
assertEquals("2016-06-22 13:33:04.000", convertedValue);
assertFalse(regexReplacer.accepts(doubleValue));
assertThat(option.isPresent()).isTrue();
assertTrue(removeControlCharsStandardizer.accepts("a\\u0000b\\u0007c\\u008fd\\ne"));
assertThat(itr.hasNext()).isFalse(); assertThat(alert1.getId()).isEqualTo(id1); assertThat(alert2.getId()).isEqualTo(id2);
assertThat(values).containsExactly(ARGS);
assertThat(oldElem).isEqualTo("b"); assertThat(list).contains("a", "c");
assertThat(result).isTrue(); assertThat(list).contains("a", "x", "y", "z", "b", "c");
assertThat(cat).extracting("systemName", "description").contains(nameDescr); assertThat(cat.getUserProperties()).isEmpty();
assertThat(bIdx).isEqualTo(1); assertThat(xIdx).isEqualTo(-1);
assertThat(user1.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(user2.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupB"); assertThat(user3.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupD");
assertNotNull(ts.parseTimestamp("2015-01-15 11:10:20.333")); assertNotNull(ts.parseTimestamp("2015-01-15 11:10:20"));
assertThat(set1) .hasSize(2) .containsOnly(USER1, USER3);
assertFalse(standardizer.accepts(doubleValue));
assertEquals("10", String.valueOf(numRDDPartitions));
assertEquals("Quote identifier for null connection not retrieved correctly", "", quoteIdentifier);
assertTrue(standardizer.accepts(null));
assertThat(groupA.getAllContainingGroups()).isEmpty(); assertThat(groupB.getAllContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(groupC.getAllContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(groupD.getAllContainingGroups()).hasSize(2).extracting(g -> g.getSystemName()).contains("groupC", "groupA");
assertTrue(ts.validate(null)); assertTrue(ts.validate("NULL")); assertTrue(ts.validate("null"));
assertThat(role).isNotNull().extracting("systemName", "title", "description").contains("feedEditor", "Editor", "Can edit feeds"); assertThat(role.getAllowedActions().getAvailableActions().stream().flatMap(action -> action.stream())) .extracting("systemName") .contains(FeedAccessControl.ACCESS_DETAILS.getSystemName(), FeedAccessControl.EDIT_DETAILS.getSystemName(), FeedAccessControl.ENABLE_DISABLE.getSystemName(), FeedAccessControl.EXPORT.getSystemName());
assertTrue(ts.validate("2015-01-15")); assertFalse(ts.validate("2015-01-15 11:00:15")); assertFalse(ts.validate("2015/01/15 11:10:20")); assertFalse(ts.validate("12/01/2015")); assertFalse(ts.validate("13/01/2015"));
assertEquals("default", standardizer.convertValue("")); assertEquals("default", standardizer.convertValue(null)); assertEquals("foo", standardizer.convertValue("foo"));
assertThat(values).containsExactly(ARGS);
assertTrue("expecting at least 2 parsers", list.size() >= 2);
assertThat(callback.getCookie()) .containsInstanceOf(Cookie.class) .hasValueSatisfying(cookie -> assertThat(cookie.getValue()).isEqualTo("value"));
assertThat(groupA.getContainingGroups()).isEmpty(); assertThat(groupB.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(groupC.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(groupD.getContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupC");
assertNotNull(info);
assertThat(feed.getName()).isNotNull().isEqualTo("FeedB"); assertThat(feed.getCategory()).isNotNull().hasFieldOrPropertyWithValue("systemName", this.categorySystemName); assertThat(feed.getJson()).isNull(); assertThat(feed.getState()).isNull();
assertEquals(expectedValue, stripNonNumeric.convertRawValue(rawValue));
assertEquals(expectedValue, standardizer.convertRawValue(rawValue));
assertThat(foundScript).isEqualTo(DEFAULT_KINIT_PATH); assertThat(foundScript).isEqualTo(actualResultOfWhich); assertThat(kerberosSparkProperties.getKinitPath()).isEqualTo(actualResultOfWhich);
assertEquals("MEMORY_ONLY", storageLevel);
assertThat(response.getEntity()) .isNotNull() .extracting("id", "format").contains("dataSet1", "jdbc");
assertThat(optional.isPresent()).isTrue(); assertThat(user2).extracting(User::getSystemName, User::getDisplayName, User::isEnabled).containsExactly("user2", "Mr. User Two", true); assertThat(optional.isPresent()).isFalse();
assertThat(groupA.getUsers()).extracting(User::getSystemName).containsExactly("user1"); assertThat(groupB.getUsers()).extracting(User::getSystemName).containsExactly("user2"); assertThat(groupD.getUsers()).extracting(User::getSystemName).containsExactly("user3"); assertThat(groupC.getUsers()).hasSize(0);
assertThat(actualScript).isEqualToIgnoringWhitespace("print 1");
assertEquals("hive.setting.1", first.getName()); assertEquals("value.1", first.getValue()); assertEquals("hive.setting.2", second.getName()); assertEquals("value.2", second.getValue());
assertThat(actual).isInstanceOf(CustomRuntimeException.class); assertThat(actual).hasCause(sqlException); assertThat(ExceptionUtils.indexOfThrowable(actual, socketException.getClass())).isNotNegative();
assertFalse(removeControlCharsStandardizer.accepts(doubleValue));
assertEquals("-1", String.valueOf(defaultRDDPartitions));
assertNotNull(rangerGroup);
assertThat(alert.getType()).isEqualTo(type); assertThat(alert.getLevel()).isEqualTo(Alert.Level.INFO); assertThat(alert.getDescription()).isEqualTo("test"); assertThat((String) alert.getContent()).isEqualTo("content");
assertThat(actual).isNotInstanceOf(CustomRuntimeException.class); assertThat(actual).isNotInstanceOf(CustomRuntimeException.class);
assertThat(actual).hasCause(new SQLException());
assertThat(user1.getAllContainingGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupA"); assertThat(user2.getAllContainingGroups()).hasSize(2).extracting(g -> g.getSystemName()).contains("groupB", "groupA"); assertThat(user3.getAllContainingGroups()).hasSize(3).extracting(g -> g.getSystemName()).contains("groupD", "groupC", "groupA");
assertThat(list).contains("b", "c"); assertThat(list).contains("a", "x", "c");
assertEquals("Quote identifier (actual) not retrieved correctly", "|", quoteIdentifier);
assertEquals(expectedValue, removeControlCharsStandardizer.convertRawValue(rawValue));
assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
assertEquals(expectedValue, cc.convertRawValue(rawValue));
assertTrue(validator.validate("95120")); assertTrue(validator.validate("95120-1234")); assertFalse(validator.validate("450224")); assertFalse(validator.validate(""));
assertThat(dsrc).isNotNull().isPresent(); assertThat(dsList).hasSize(COUNT);
assertEquals("2016-07-25", standardizer.convertValue("07-25-201617:18"));
assertThat(callback.getCookie()).isEmpty();
assertThat(deleted).isTrue(); assertThat(option).isNotNull(); assertThat(option.isPresent()).isFalse(); assertThat(deleted).isFalse();
assertThat(resolved).isEqualTo(id);
assertThat(itr.hasNext()).isTrue(); assertThat(itr.next().getLevel()).isEqualTo(Level.INFO); assertThat(itr.hasNext()).isTrue(); assertThat(itr.next().getLevel()).isEqualTo(Level.CRITICAL); assertThat(itr.hasNext()).isFalse();
assertTrue(fields.size() == 3); assertEquals(fields.get(idx).getName(), "HEAD_" + (idx + 1)); assertEquals(fields.get(idx).getSampleValues().size(), 1);
assertThat(conn).isNotNull().isPresent(); assertThat(conn.get()).extracting("pluginId", "systemName", "title", "description").contains("plugin1", "test_1_connector", "Test 1 Connector", "Test description 1");
assertThat(callback.isMultiValued()).isFalse(); assertThat(callback.getValue()).hasValue("value1"); assertThat(callback.getValues()).hasSize(1).contains("value1");
assertThat(values).containsExactly(expectedArgs);
assertThat(set1) .hasSize(1) .containsOnly(USER3);
assertThat(user1.getPrincipal()).isEqualTo(new UsernamePrincipal("user1")); assertThat(user2.getPrincipal()).isEqualTo(new UsernamePrincipal("user2")); assertThat(user3.getPrincipal()).isEqualTo(new UsernamePrincipal("user3"));
assertThat(users).hasSize(3).extracting(User::getSystemName).contains("user1", "user2", "user3");
assertEquals("2016-05-06 15:32:54.495", convertedTime); assertEquals("2016-05-06 22:32:54.495", convertedTime); assertEquals("2016-05-06", convertedTime); assertEquals("2016-05-06 22:32:54", convertedTime);
assertThat(groupA.getGroups()).hasSize(2).extracting(g -> g.getSystemName()).contains("groupB", "groupC"); assertThat(groupC.getGroups()).hasSize(1).extracting(g -> g.getSystemName()).contains("groupD");
assertThat(response.getEntity()) .isNotNull() .extracting("id", "format").contains("dataSet1", "jdbc");
assertTrue(hiveParams.isEmpty());
assertThat(user1.getAllGroupPrincipals()).hasSize(1).contains(new GroupPrincipal("groupA")); assertThat(user2.getAllGroupPrincipals()).hasSize(2).contains(new GroupPrincipal("groupA"), new GroupPrincipal("groupB")); assertThat(user3.getAllGroupPrincipals()).hasSize(3).contains(new GroupPrincipal("groupA"), new GroupPrincipal("groupC"), new GroupPrincipal("groupD"));
assertTrue(toTest.getJobs().size() == 1);
assertThat(getMgrAlert).isEqualTo(mgrAlert); assertThat(getSrcAlert).isEqualTo(srcAlert);
assertEquals("2004-10-19 07:00:00", standardizer.convertValue("2004-10-19T07:00:00.000Z"));
assertThat(conn).isNotNull().isPresent(); assertThat(conn.get()).extracting("pluginId", "systemName", "title", "description").contains(connectorTuple(COUNT + 1).toArray());
assertEquals(200, response.getStatus()); assertNotNull("Expecting schema object", response.readEntity(DefaultHiveSchema.class));
assertTrue(stripNonNumeric.accepts("$abc24.e32"));
assertThat(option.isPresent()).isTrue(); assertThat(createPrincs).contains(TEST_USER); assertThat(accessPrincs).contains(TEST_USER); assertThat(exportPrincs).doesNotContain(TEST_USER);
assertEquals(15, bytes);
assertThat(this.provider.userExists("user1")).isTrue(); assertThat(this.provider.userExists("bogus")).isFalse();
assertEquals("ABC", standardizer.convertValue("abc")); assertEquals("HOW ARE YOU?", standardizer.convertValue("how are you?")); assertEquals("12 PYRAMID ST.", standardizer.convertValue("12 pyramid st.")); assertEquals("12 PYRAMID ST.", standardizer.convertValue("12 PYRAMID ST.")); assertEquals("", standardizer.convertValue(""));
assertThat(conn).isNotNull().isPresent(); assertThat(dsList).hasSize(COUNT);
assertFalse(cc.accepts(doubleValue));
assertThat(sgJson).isEqualToIgnoringCase("{\\"from\\":1,\\"size\\":2}"); assertThat(statement.getState()).isEqualTo(StatementState.available); assertThat(statement.getOutput().getStatus()).isEqualTo(StatementOutputStatus.ok);
assertEquals("1974-01-14", standardizer.convertValue("1/14/1974")); assertEquals("2014-12-01", standardizer.convertValue("12/01/2014")); assertEquals("1974-01-14", standardizer.convertValue("1-14-1974")); assertEquals("2014-12-01", standardizer.convertValue("12-01-2014"));
assertThat(oldElem).isEqualTo("b"); assertThat(list).contains("a", "x", "c");
assertThat(actualImps).isEqualTo(Sets.newHashSet(testImports.values()));
assertEquals("2016-05-06 15:32:54", standardizer.convertValue("05/06/2016 22:32:54"));
assertEquals(removeControlCharsStandardizer.convertValue(rawValueStr), removeControlCharsStandardizer.convertRawValue(rawValueObj).toString()); assertEquals(removeControlCharsStandardizer.convertValue(rawValueStr), expectedValueStr); assertEquals(removeControlCharsStandardizer.convertRawValue(rawValueObj), expectedValueObj);
assertNotNull(groups);
assertFalse(validator.validate("10.0.0.x")); assertFalse(validator.validate("10.0.0.255.0")); assertFalse(validator.validate("10.0.256.0")); assertFalse(validator.validate("255.0.0")); assertFalse(validator.validate("0"));
assertEquals(expectedValue, stripNonNumeric.convertRawValue(rawValue));
assertThat(callback.isMultiValued()).isFalse(); assertThat(callback.getValue()).isNotPresent(); assertThat(callback.getValues()).isEmpty();
assertThat(ds0).isNotNull().isNotPresent(); assertThat(ds1).isNotNull().isNotPresent();
assertThat(conns).isNotNull(); assertThat(conns).hasSize(COUNT * 2);
assertThat(result).isTrue(); assertThat(list).contains("a", "b", "c", "x", "y");
assertEquals("MEMORY_AND_DISK", defaultStorageLevel);
assertEquals("", regexReplacer.convertValue(" "));
assertEquals(expectedValue, regexReplacer.convertRawValue(rawValue));
assertTrue(validator.validate("0123459789")); assertTrue(validator.validate("")); assertTrue(validator.validate("123")); assertTrue(validator.validate("255.0.0.0")); assertFalse(validator.validate("01234597899")); assertTrue(validator.validate("255")); assertTrue(validator.validate("abc")); assertFalse(validator.validate("abcd")); assertFalse(validator.validate("12"));
assertTrue(standardizer.accepts("2017-03-28"));
assertEquals("barfeebarfie", regexReplacer.convertValue("foofeefoofie")); assertEquals("", regexReplacer.convertValue("")); assertEquals("barfeebarfie", regexReplacer.convertValue("barfeebarfie")); assertEquals("", regexReplacer2.convertValue("N/A")); assertEquals("", regexReplacer3.convertValue("N/A"));
assertEquals("24.32", StripNonNumeric.instance().convertValue("$abc24.e32")); assertEquals("190000232.1234", StripNonNumeric.instance().convertValue("190000232.1234")); assertEquals("999100000", StripNonNumeric.instance().convertValue("999,100,000"));
assertEquals("abcde", c.convertValue("a\\u0000b\\u0007c\\u008fd\\ne")); assertEquals("abc", c.convertValue("a\\n\\fbc")); assertEquals(" ", c.convertValue(" ")); assertEquals("", c.convertValue(""));
assertTrue(fields.size() == 3); assertEquals(fields.get(idx).getName(), "Col_" + (idx + 1)); assertEquals(fields.get(idx).getSampleValues().size(), 1);
assertTrue(validator.validate("foo")); assertFalse(validator.validate("")); assertFalse(validator.validate(" ")); assertFalse(validator.validate(null)); assertTrue(validator.validate("foo")); assertTrue(validator.validate("")); assertTrue(validator.validate(" ")); assertFalse(validator.validate(null)); assertTrue(validator.validate("foo")); assertTrue(validator.validate("")); assertTrue(validator.validate(" ")); assertFalse(validator.validate(null));
assertThat(conns).isNotNull(); assertThat(conns).hasSize(COUNT);
assertThat(ds).isNotNull().isPresent(); assertThat(ds.get()).extracting("systemName", "title", "description").contains(dsTuple(COUNT + 1).toArray()); assertThat(ds.get().getConnector()).isNotNull().extracting("id").contains(this.connId);
assertThat(list).contains("a", "y", "x", "b", "c");
assertThat(this.manager.addDescriptor(descr)).isTrue(); assertThat(descrSet).hasSize(1).extracting("alertType").contains(type); assertThat(descrSet).extracting("contentType").contains("application/json"); assertThat(descrSet).extracting("description").contains("description"); assertThat(descrSet).extracting("respondable").contains(true);
assertTrue(cc.accepts("XXXXXXXXXXX9966"));
assertThat(conn).isNotNull().isNotPresent();
assertEquals(expectedValue, removeControlCharsStandardizer.convertRawValue(rawValue));
assertNull("ReConstructor shouldn\'t instantiate a class with a public constructor unless it can call that constructor.", constructed);
assertNull("ReConstructor shouldn\'t instantiate a class with only private constructors.", constructed);
assertNotNull(constructed); assertThat(constructed, instanceOf(PublicSavedParametersClass.class)); assertEquals(mockContext, ((PublicSavedParametersClass)constructed).context); assertEquals(mockAttrs, ((PublicSavedParametersClass)constructed).attrs);
assertNotNull("ReConstructor should instantiate a class with a valid public constructor.", constructed); assertThat(constructed, instanceOf(PublicConstructorClass.class)); assertNull("ReConstructor should not call any private constructors", ((PublicConstructorClass) constructed).context);
assertNull("ReConstructor shouldn\'t instantiate a class with only a private constructor.", constructed);
assertThat(dedupedInds).isEqualTo(expectedInds);
assertThat(result) .hasSize(11) .contains(sampleNary());
assertThat(util.getMax(toCheck)).hasSameElementsAs(expected);
assertThat(resultReceiver.getReceivedResults()).containsExactlyInAnyOrder(toArray(validInds));
assertThat(resultReceiver.getReceivedResults()).containsExactlyInAnyOrder(toArray(validInds));
assertThat(util.getMax(toCheck)).containsOnly(ind("aaa", "bbb"));
assertThat(actual).as("Input: " + items).isEqualTo(asList("1", "2", "3", "4"));
assertThat(ind.getAllValues()) .hasSize(1) .first() .isEqualTo(expectedInd());
assertThat(ind.getAllValues()) .hasSize(3) .contains(indWithEmptyLhs());
assertThat(ind.getAllValues()) .as("empty column should only form IND with column of same type") .hasSize(2) .contains(emptyColumnOnLhs());
assertThat(util.getMax(toCheck)).hasSameElementsAs(expected);
assertThat(iterator.hasNext()).isFalse();
assertThat(ind.getAllValues()) .hasSize(3);
assertThat(util.getMax(toCheck)).containsOnly(ind("abc", "def"));
assertThat(ind.getAllValues()) .hasSize(1) .first() .isEqualTo(expectedInd());
assertThat(resultReceiver.getReceivedResults()).containsExactlyInAnyOrder(toArray(validInds));
assertThat(util.getMax(toCheck)).hasSameElementsAs(expected);
assertThat(ind.getAllValues()) .hasSize(3) .containsOnlyElementsOf(expectedInd());
assertThat(util.getMax(toCheck)).hasSameElementsAs(expected);
assertThat(util.getMax(emptyList())).isEmpty();
assertThat(resultReceiver.getReceivedResults()).containsExactlyInAnyOrder(toArray(validInds));
assertThat(ind.getAllValues()) .hasSize(1) .first() .isEqualTo(validInd());
assertThat(util.getMax(toCheck)).hasSameElementsAs(expected);
assertThat(ind.getAllValues()) .hasSize(3);
assertThat(result) .hasSize(10) .contains(sampleInd());
assertThat(util.getMax(toCheck)).hasSize(1);
assertThat(info).hasSize(1); assertThat(info1.getColumnNames()).contains("A", "B"); assertThat(info1.getColumnTypes()).containsOnly("String");
assertThat(ind.getAllValues()) .hasSize(1) .first() .isEqualTo(expectedInd());
assertThat(util.getMax(toCheck)).containsOnly(ind("xa", "xb"));
assertThat(util.getMax(toCheck)).containsOnly(ind("wx", "yz"));
assertNotNull(results); assertThat(results.size(), equalTo(0));
assertFalse(presenter.isVolumeButtonsToScroll());
assertThat(index, equalTo(16));
assertTrue(captor.getValue().isNightMode());
assertNotNull(result2); assertEquals(27921, result2.length());
assertEquals(new MigrationStub(1, 2), new MigrationStub(1, 2)); assertNotEquals(new MigrationStub(1, 2), new MigrationStub(1, 3)); assertNotEquals(new MigrationStub(1, 3), new MigrationStub(2, 3)); assertNotEquals(new MigrationStub(1, 2), new MigrationStub(2, 3));
assertEquals(migrationStub1.hashCode(), migrationStub1.hashCode()); assertEquals(migrationStub1, migrationStub2); assertEquals(migrationStub1.hashCode(), migrationStub2.hashCode());
assertNotNull(result3); assertEquals(27909, result3.length());
assertThat(index, equalTo(11));
assertThat(index, equalTo(11));
assertNotNull(bookmarks); assertThat(bookmarks.size(), equalTo(0));
assertNotNull(result3); assertEquals(27879, result3.length());
assertThat(index, equalTo(-1));
assertThat(index, equalTo(16));
assertNull(FilenameUtils.getExtension(null)); assertNull(FilenameUtils.getExtension("")); assertNull(FilenameUtils.getExtension("/b/c")); assertNull(FilenameUtils.getExtension("/b.rtl/c")); assertEquals("gif", FilenameUtils.getExtension("/b.rtl/c.gif"));
assertNotNull(result); assertEquals(testLine, result);
assertNotNull(bookmarks); assertThat(bookmarks.size(), equalTo(bookmarksWithoutTag.size()));
assertNotNull(bookmarks); assertThat(bookmarks.size(), equalTo(bookmarksWithTag.size()));
assertThat(migrations.get(0), equalTo(new MigrationStub(1, 3))); assertThat(migrations.get(1), equalTo(new MigrationStub(1, 2))); assertThat(migrations.get(2), equalTo(new MigrationStub(2, 3))); assertThat(migrations.get(3), equalTo(new MigrationStub(3, 4)));
assertNotNull(result1); assertEquals(27921, result1.length());
assertThat(index, equalTo(-1));
assertNotNull(bookmarksRes); assertThat(bookmarksRes.size(), equalTo(bookmarksWithoutTag.size()));
assertEquals(String.format("%s (%d)", test.getClass().getSimpleName(), test.hashCode()), logger.getTag(test)); assertEquals("test", logger.getTag("test"));
assertEquals("The $300 student discount was not applied", 2000, tax.applyStudentDeduction(2300, 1), 0);
assertEquals("Tax on zero income is not zero", 0, tax.calcTax(0, 0),0 );
assertThat(selector.accessModifierFor("com.spotify.foo"), is(Optional.of(PRIVATE)));
assertThat(DataenumUtils.equal(one, two), is(true));
assertThat( OutputSpecFactory.toOutputClassName(ClassName.get("com.spotify", "My_dataenum")), is(ClassName.get("com.spotify", "My")));
assertThat(selector.accessModifierFor("com.spotify.pkgpriv"), is(Optional.empty()));
assertThat(selector.accessModifierFor("org.apache"), is(Optional.empty()));
assertThat(selector.accessModifierFor("com.spotify.bar.flurb"), is(Optional.of(PROTECTED)));
assertThat(DataenumUtils.equal(null, new Object()), is(false)); assertThat(DataenumUtils.equal(new Object(), null), is(false)); assertThat(DataenumUtils.equal(null, null), is(true));
assertThat(selector.accessModifierFor("com.spotify.bar.spork"), is(Optional.of(PROTECTED)));
assertThat(DataenumUtils.equal(o, o), is(true));
assertThat(DataenumUtils.checkNotNull(expected), is(expected));
assertTrue(cascading.containsValue("key0source1"));
assertEquals("x", CollectionUtils.getByPath(input, "a"));
assertEquals(expect, DateUtils.addTime(start, Calendar.DAY_OF_MONTH, 1));
assertThat(ref.hashCode(), equalTo(String.class.hashCode()));
assertEquals("c", CollectionUtils.getByPath(input, "-1"));
assertEquals(null, DateUtils.toString(input, null));
assertEquals(false, (new SparseSet("+a")).remove("b"));
assertTrue(objmap.containsValue(2000));
assertEquals("value 1", CollectionUtils.putByPath(input, "a/b/c", "value 2")); assertEquals(null, CollectionUtils.putByPath(input, "a/b/d", "value 3"));
assertEquals(Arrays.asList("this","is","astring"), StringUtils.splitString("thisIsAString"));
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("A string with words. "));
assertEquals("A String With Words?", StringUtils.toLabel("is-a-string-with-words"));
assertThat(stack.get(), equalTo(INITIAL_VALUE));
assertEquals(null, CollectionUtils.getByPath(input, "a/1"));
assertEquals(1000, objmap.get("field_int"));
assertEquals("getter value", ObjectUtils.getValue(object, "item"));
assertEquals(null, DateUtils.isSameDay(null, new Date()));
assertEquals(false, (new SparseSet("+a")).add("b"));
assertThat(stack.pop(), nullValue());
assertEquals("value child", ObjectUtils.getValue(object, "field_child"));
assertThat( ClassFinder.findClasses(Interface.class), is(ImmutableSet.of( AbstractClass.class, ConcreteInterface.class, ConcreteClass.class )));
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("a-string-with-words"));
assertEquals("value parent", ObjectUtils.getValue(object, "field_parent"));
assertEquals(expect, pred);
assertEquals(null, StringUtils.toLabel(null));
assertEquals(false, DateUtils.isSameDay(first, second));
assertEquals("getter parent result", ObjectUtils.getValue(object, "parent"));
assertEquals(true, ObjectUtils.equals(null, null));
assertEquals(source1.get("key1"), cascading.get("key1"));
assertEquals(false, cache.isProduced("a"));
assertEquals("A1", cache.get("a"));
assertTrue(objmap.isEmpty());
assertEquals(null, CollectionUtils.getByPath(input, null));
assertEquals(expect, DateUtils.addTime(start, Calendar.DAY_OF_WEEK, 1));
assertTrue(objmap.containsKey("field_priv"));
assertEquals("a,\\"b,c\\",d", StringUtils.toCsv("a","b,c","d"));
assertTrue(objmap.containsValue(1000));
assertEquals("AStringWithWords", StringUtils.toPascalCase("a string with words"));
assertEquals(1, ObjectUtils.compareTo("hello2", "hello1"));
assertEquals(false, (new SparseSet("+a")).contains("b"));
assertEquals("", StringUtils.escapeJavaScript(""));
assertArrayEquals(new String[]{"a,b","c"}, StringUtils.fromCsv("\\"a,b\\",c"));
assertEquals(true, (new SparseSet("+ -foo/ +foo/bar")).contains("")); assertEquals(false, (new SparseSet("-foo/ +foo/bar")).contains(""));
assertEquals("item value", ObjectUtils.getValue(object, "item"));
assertEquals(Collections.<String>emptySet(), new CascadingMap<String, String>().keySet());
assertEquals("2011-05-12 12:45:27", DateUtils.toString(input, "yyyy-MM-dd HH:mm:ss"));
assertThat(stack.get(), equalTo(INITIAL_VALUE));
assertEquals(sources, cascading.getSources());
assertEquals(false, DateUtils.isSameDay(first, second));
assertEquals(0, ObjectUtils.compareTo(new CompareOne(), new CompareTwo()));
assertEquals(expect, input);
assertEquals(true, (new SparseSet("-a/ +a/b")).contains("a/b"));
assertArrayEquals(new String[]{"a","b"}, StringUtils.fromCsv("\\"a\\",b"));
assertArrayEquals(new String[]{"abc","b"}, StringUtils.fromCsv("\\"abc\\",b"));
assertEquals(expect, parser.parse("token1 = true"));
assertEquals(null, cascading.get("missing"));
assertEquals(false, ObjectUtils.equals(TestEnum.value1, "VALUE1"));
assertEquals("pub field value", objmap.get("field_pub")); assertEquals("field child value", objmap.get("field_child"));
assertEquals("a-string-with-words", StringUtils.toHyphenated("a string with words"));
assertEquals(null, DateUtils.isSameDay(null, new Date()));
assertEquals(null, CollectionUtils.getByPath(input, null));
assertEquals(0, ObjectUtils.compareTo(new NotComparableParent(), new NotComparableChild()));
assertThat(stack.popOrError(), equalTo(INITIAL_VALUE));
assertEquals(true, (new SparseSet("+/")).contains("a"));
assertEquals(expect, parser.parse("id = 1"));
assertEquals(null, DateUtils.toString(null, "yyyy-MM-dd HH:mm:ss"));
assertEquals(true, ObjectUtils.equals("hello", "hello"));
assertEquals(expect, DateUtils.fromString("2011/05/13 12:45:27", "yyyy/MM/dd HH:mm:ss"));
assertEquals(combined.size(), cascading.size());
assertFalse(objmap.isEmpty());
assertEquals(expect, pred);
assertEquals(0, ObjectUtils.compareTo(new CompareParent("hello"), new CompareChild("hello")));
assertEquals( "{\\"string1\\":\\"string1\\",\\"string2\\":null,\\"string3\\":null,\\"date1\\":null}", processor.generate(object));
assertFalse(objmap.containsValue("unknown field value"));
assertEquals(expect, DateUtils.fromString("2011/05/12 EDT 12:45:27", "yyyy/MM/dd z HH:mm:ss"));
assertThat(filter.getFilterConfig(), nullValue()); assertThat(filter.getServletContext(), nullValue());
assertEquals(expect, parser.parse("token1 != 1"));
assertEquals("a\',b,c", StringUtils.toCsv("a\'","b","c"));
assertEquals(expect, DateUtils.addTime(start, Calendar.MONTH, 1));
assertEquals(expect, input);
assertEquals(expect, pred);
assertTrue(objmap.containsValue("pub field value")); assertTrue(objmap.containsValue("child field value"));
assertEquals(false, (new SparseSet("+a")).contains("a/b"));
assertEquals(expect, pred);
assertEquals(false, ObjectUtils.compareTo(null, new Object()));
assertEquals(Integer.class, result.getClass()); assertEquals(15, result);
assertEquals(expect, objmap.keySet());
assertEquals(expect, parser.parse("token1 = false"));
assertEquals(Arrays.asList("", "a","string","with","words"), StringUtils.splitString(" A string with words"));
assertEquals("aStringWithWords", StringUtils.toCamelCase("a string with words"));
assertEquals("abc\\\\x27def", StringUtils.escapeJavaScript("abc\'def"));
assertEquals("", StringUtils.toCsv(""));
assertEquals(false, cache.containsKey(new Date()));
assertEquals(-1, ObjectUtils.compareTo(new CompareParent("hello1"), new CompareChild("hello2")));
assertEquals(source2.get("key2"), cascading.get("key2"));
assertTrue(new CascadingMap<String, String>().isEmpty());
assertEquals("a,\\"b\\nc\\",d", StringUtils.toCsv("a","b\\nc","d"));
assertEquals(3, objmap.size());
assertEquals(expect, pred);
assertTrue(objmap.containsKey("field_pub"));
assertEquals("a-string-with-words", StringUtils.toDelimited("a string with words", "-"));
assertEquals(true, (new SparseSet("-a/ +a/b/")).contains("a/b/c"));
assertThat(stack.pop(), equalTo(item)); assertThat(stack.pop(), nullValue());
assertThat(ref.equals(ref), equalTo(true)); assertThat(ref.equals(new TypeReference<String>() { }), equalTo(true)); assertThat(ref.equals(null), equalTo(false)); assertThat(ref.equals(""), equalTo(false)); assertThat(ref.equals(new TypeReference<Boolean>() { }), equalTo(false));
assertEquals("method child result", ObjectUtils.getValue(object, "method_child"));
assertEquals(Arrays.asList("a","string","with","spaces"), StringUtils.splitString("a string with spaces"));
assertEquals(true, (new SparseSet("+a")).contains("a"));
assertEquals("a", CollectionUtils.getByPath(input, "0"));
assertEquals(expect, DateUtils.addTime(start, Calendar.DAY_OF_MONTH, -2));
assertThat(stack.pop(), nullValue());
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("a.string. with. Words"));
assertEquals(expect, DateUtils.addTime(start, Calendar.DAY_OF_MONTH, 1));
assertEquals(true, (new SparseSet("-a +a")).contains("a"));
assertEquals(expect, DateUtils.addTime(start, Calendar.DAY_OF_WEEK, 2));
assertEquals(false, (new SparseSet("+a/ -a/b")).contains("a/b"));
assertTrue(objmap.containsValue("priv field value"));
assertEquals("method parent result", ObjectUtils.getValue(object, "method_parent"));
assertEquals("a-string-with-multiple-things-to-replace-in-a-row", StringUtils.toNormalized("A String With multiple . things to replace in a row"));
assertEquals(null, CollectionUtils.getByPath(input, "-4"));
assertEquals(false, ObjectUtils.compareTo(new Object(), null));
assertTrue(cascading.containsKey("key1"));
assertEquals("private method", ObjectUtils.getValue(object, "privateMethod"));
assertEquals(expect, DateUtils.addTime(start, Calendar.MONTH, 1));
assertEquals("abc\\\\x26def", StringUtils.escapeJavaScript("abc&def"));
assertEquals(false, DateUtils.isSameDay(first, second));
assertEquals(expect, pred);
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("A STRING with WORDS"));
assertEquals(false, ObjectUtils.equals("hello", "goodbye"));
assertEquals(null, StringUtils.toCsv((String[])null));
assertEquals(expect, pred);
assertEquals(expect, output);
assertEquals("1 hour ago", DateUtils.toLabel(new Date(new Date().getTime() - (65 * MINUTE)), true));
assertEquals("getter child result", ObjectUtils.getValue(object, "child"));
assertEquals(null, CollectionUtils.getByPath(input, "3"));
assertFalse(cascading.containsValue("key1source2"));
assertEquals(true, (new SparseSet("+a/")).contains("a/b")); assertEquals(true, (new SparseSet("+a/")).contains("a/b/c"));
assertEquals(3, objmap.size());
assertEquals(null, objmap.get("field_unknown"));
assertEquals(null, DateUtils.toString(null));
assertEquals(20, CollectionUtils.getByPath(input, "b/1"));
assertEquals(combined.entrySet(), cascading.entrySet());
assertEquals("a-string-with-words", StringUtils.toNormalized("\\u00C1 String With Words"));
assertThat(ref.toString(), equalTo(String.class.toString()));
assertEquals("1 hour ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - (65 * MINUTE))));
assertEquals(true, DateUtils.isSameDay(first, second));
assertEquals(expect, objmap.entrySet());
assertEquals(expect, predicate);
assertEquals("a-string-with-quotes", StringUtils.toNormalized("A \'String\' With Quotes"));
assertEquals("pub field value", objmap.get("field_pub"));
assertEquals("5 days ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - ((5 * DAY) + (10 * MINUTE)))));
assertEquals(null, StringUtils.toCsv());
assertThat(filter.getFilterConfig(), is(config));
assertEquals("priv field value", objmap.get("field_priv"));
assertThat(stack.push("push"), equalTo(INITIAL_VALUE));
assertFalse(cascading.isEmpty());
assertEquals(0, ObjectUtils.compareTo("hello", "hello"));
assertEquals(true, DateUtils.isSameDay(first, second));
assertEquals(expect, pred);
assertEquals(expect, pred);
assertEquals("5 minutes ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - ((5 * MINUTE) + (10 * SECOND)))));
assertEquals("2011-05-12T17:45:27Z", DateUtils.toString(input));
assertEquals(null, StringUtils.escapeJavaScript(null));
assertEquals("1 minute ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - (65 * SECOND))));
assertTrue(CollectionUtils.isEqualCollection(expect, objmap.values()));
assertTrue(cascading.containsValue("key1source1"));
assertEquals(expect, parser.parse("token1 = null"));
assertEquals("a-string-with-1-number", StringUtils.toNormalized("A String With 1 Number"));
assertEquals("string3", ObjectUtils.getValue(object, "string3"));
assertEquals("a_string_with_words", StringUtils.toUnderscored("a string with words"));
assertThat(stack.pop(), equalTo(INITIAL_VALUE));
assertFalse(objmap.isEmpty());
assertEquals(null, parser.parse(""));
assertEquals("a-string-with-words", StringUtils.toNormalized("\\u0041\\u0301 String With Words"));
assertArrayEquals(new String[]{"a","b"}, StringUtils.fromCsv("a,b"));
assertEquals(false, (new SparseSet("+a/")).contains("a"));
assertEquals(expect, predicate);
assertThat( ClassFinder.findConcreteClasses(Interface.class), is(ImmutableSet.of( ConcreteInterface.class, ConcreteClass.class )));
assertEquals(combined.keySet(), cascading.keySet());
assertEquals("AStringWithWords", StringUtils.toPascalCase("_a_string_with_words"));
assertEquals(source1.get("key0"), cascading.get("key0"));
assertArrayEquals(null, StringUtils.fromCsv(null));
assertFalse(null == typedef);
assertEquals(expect, input);
assertEquals("5 hours ago", DateUtils.toLabel(new Date(new Date().getTime() - ((5 * HOUR) + (10 * MINUTE))), true));
assertEquals(false, ObjectUtils.equals(null, new Object())); assertEquals(false, ObjectUtils.equals(new Object(), null));
assertEquals(false, (new SparseSet("+a -a")).contains("a"));
assertEquals(null, CollectionUtils.getByPath(input, "d"));
assertThat(ref.compareTo(null), equalTo(0));
assertFalse(cascading.containsKey("key3"));
assertFalse(cascading.containsValue("unknown"));
assertEquals("a,b,c", StringUtils.toCsv("a","b","c"));
assertEquals(true, (new SparseSet("+a -a/b")).add("a"));
assertEquals(null, parser.parse(" "));
assertEquals(Arrays.asList(1,2,3), CollectionUtils.getByPath(Arrays.asList(1,2,3), ""));
assertTrue(cascading.containsKey("key2"));
assertEquals(null, parser.parse(" ( ) "));
assertEquals(expect, input);
assertThat(ref.getType(), equalTo(String.class));
assertEquals("A String With Words", StringUtils.toLabel("a-string-with-words"));
assertTrue(cascading.containsValue("key2source2"));
assertEquals(true, DateUtils.isSameDay(first, second));
assertEquals("abc\\\\x3cdef\\\\x3e", StringUtils.escapeJavaScript("abc<def>"));
assertEquals(null, DateUtils.toLabel(null, true));
assertEquals(true, (new SparseSet("-a +a/b")).remove("a/b"));
assertFalse(objmap.containsKey(new Integer(1)));
assertEquals(expect, DateUtils.addTime(start, Calendar.YEAR, 1));
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("a.string.with.words"));
assertEquals("5 hours ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - ((5 * HOUR) + (10 * MINUTE)))));
assertEquals(null, parser.parse(null));
assertEquals("a-string-with-a-hyphenated-word", StringUtils.toNormalized("A String With a hyphenated-word"));
assertTrue(objmap.containsValue("pub field value"));
assertEquals(false, (new SparseSet("-a/b +a/")).contains("a/b")); assertEquals(false, (new SparseSet("-a/b/ +a/")).contains("a/b/c")); assertEquals(true, (new SparseSet("-a/b/ +a/")).contains("a/c")); assertEquals(true, (new SparseSet("-a/b/ +a/b/c")).contains("a/b/c"));
assertArrayEquals(new String[]{"a\\nb","c"}, StringUtils.fromCsv("\\"a\\nb\\",c"));
assertEquals("method value", ObjectUtils.getValue(object, "item"));
assertEquals(Arrays.asList("a","string","with","words"), StringUtils.splitString("a_string_with_words"));
assertEquals("less than a minute ago", DateUtils.toLabel(new Date(new Date().getTime() - (30 * SECOND))));
assertEquals("1 minute ago", DateUtils.toLabel(new Date(new Date().getTime() - (65 * SECOND)), true));
assertEquals(2, CollectionUtils.getByPath(input, null));
assertEquals(Arrays.asList("a","string","with","caps"), StringUtils.splitString("aStringWithCaps"));
assertEquals(source1.get("unknown"), cascading.get("unknown"));
assertEquals(null, DateUtils.toSimpleElapsedTime(null));
assertEquals(0, new CascadingMap<String, String>().size());
assertThat(filter.getServletContext(), is(servletContext));
assertEquals(false, (new SparseSet("+a/ -a/b/")).contains("a/b/c"));
assertArrayEquals(new String[]{" a"," b "}, StringUtils.fromCsv(" a, b "));
assertThat(stack.pop(), equalTo(INITIAL_VALUE));
assertEquals("abc\\\\x20def", StringUtils.escapeJavaScript("abc def"));
assertEquals(2000, objmap.get("field_Integer"));
assertEquals("string1", ObjectUtils.getValue(object, "string1"));
assertTrue(objmap.containsKey("field_pub")); assertTrue(objmap.containsKey("field_child"));
assertEquals("A1", cache.get("a"));
assertFalse(objmap.containsKey("field2"));
assertEquals("less than a minute ago", DateUtils.toLabel(new Date(new Date().getTime() - (30 * SECOND)), true));
assertEquals("+a -a/b", s.getPattern());
assertEquals("A2", cache.get("a"));
assertEquals("5 minutes ago", DateUtils.toLabel(new Date(new Date().getTime() - ((5 * MINUTE) + (10 * SECOND))), true));
assertEquals("abcdef", StringUtils.escapeJavaScript("abcdef"));
assertEquals(false, (new SparseSet("-a/ +a/b")).contains("a/c"));
assertTrue(cascading.containsKey("key0"));
assertTrue(cascading.containsValue(null));
assertEquals("2011/05/12 12:45:27", DateUtils.toString(input, "yyyy/MM/dd HH:mm:ss"));
assertEquals(true, (new SparseSet("+a/ -a/b")).contains("a/c"));
assertEquals(expect, input);
assertEquals(expect, pred);
assertEquals(null, obj.field_pub);
assertEquals("less than a minute ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - (30 * SECOND))));
assertEquals(null, converter.convert(Integer.class, "a"));
assertEquals(true, ObjectUtils.equals(TestEnum.value1, "value1")); assertEquals(true, ObjectUtils.equals("value2", TestEnum.value2));
assertEquals(-1, ObjectUtils.compareTo("hello1", "hello2"));
assertEquals("1 day ago", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - ((1 * DAY) + (10 * MINUTE)))));
assertEquals(true, cache.containsKey("a"));
assertEquals(expect, input);
assertEquals("a-string-with-words", StringUtils.toNormalized("A String With Words"));
assertNotEquals(left.hashCode(), right.hashCode());
assertFalse(payload.contains("1234.0")); assertTrue(payload.contains("1234")); assertFalse(payload.contains("5.678E20")); assertTrue(payload.contains("567800000000000000000"));
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/post"); assertTrue(request instanceof HttpPost);
assertNull(AbstractAction.getIdFromSource(new Source("data", null)));
assertEquals("DELETE", delete.getRestMethodName()); assertEquals("twitter/tweet/1?version=1", delete.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(customCredentialsProvider, httpClientConfig.getCredentialsProvider());
assertEquals("GET", getSnapshotRepository.getRestMethodName()); assertEquals("/_snapshot/leeseohoo", getSnapshotRepository.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", flush.getRestMethodName()); assertEquals("twitter/_flush?wait_if_ongoing=true", flush.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("HEAD", aliasExists.getRestMethodName()); assertEquals("indexName/_alias/aliasName", aliasExists.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", refresh.getRestMethodName()); assertEquals("twitter%2Cmyspace/_refresh", refresh.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(maxScore); assertEquals(new Float("0.028130025"), maxScore);
assertNull(result.getKeys());
assertNotNull(hit); assertNotNull(hit.source); assertNull(hit.explanation); assertNotNull(hit.sort); assertNotNull(hit.id); assertNull(hit.score); assertEquals(Collections.emptyList(), hit.matchedQueries); assertNotNull(hit); assertNotNull(hit.source); assertNull(hit.explanation); assertNotNull(hit.sort); assertNotNull(hit.id); assertNull(hit.score); assertEquals(Collections.emptyList(), hit.matchedQueries);
assertEquals("POST", explain.getRestMethodName()); assertEquals("twitter/tweet/1/_explain", explain.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("query", explain.getData(null));
assertEquals("POST", rollover.getRestMethodName()); assertEquals("twitter/_rollover", rollover.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("{\\"conditions\\":{\\"max_age\\":\\"1d\\",\\"max_docs\\":\\"10000\\"}}", rollover.getData(new Gson()));
assertEquals("DELETE", deleteMapping.getRestMethodName()); assertEquals("twitter/tweet/_mapping", deleteMapping.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(1, includePattern.size()); assertEquals("includeFieldName", includePattern.get(0).getAsString()); assertEquals(1, excludePattern.size()); assertEquals("excludeFieldName", excludePattern.get(0).getAsString());
assertArrayEquals(new String[][]{ new String[]{"alias", "index", "filter"}, new String[]{"testAlias", "testIndex", "-"} }, catResult.getPlainText());
assertNull(count);
assertEquals("POST", closeIndex.getRestMethodName()); assertEquals("twitter/_close", closeIndex.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", get.getRestMethodName()); assertEquals("twitter/tweet/_mget", get.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/put"); assertTrue(request instanceof HttpPut); assertFalse(((HttpPut) request).getEntity() instanceof GzipCompressingEntity);
assertThat(httpClientConfig.getPreemptiveAuthTargetHosts(), is(targetHosts));
assertEquals("HEAD", aliasExists.getRestMethodName()); assertEquals("_all/_alias/*", aliasExists.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", validate.getRestMethodName()); assertEquals("{query:query}", validate.getData(null)); assertEquals("twitter/tweet/_validate/query", validate.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("HEAD", aliasExists.getRestMethodName()); assertEquals("indexName/_alias/*", aliasExists.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", get.getRestMethodName()); assertEquals("twitter/tweet/1", get.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(index1, index1Duplicate);
assertEquals("POST", restoreSnapshot.getRestMethodName()); assertEquals("/_snapshot/leeseohoo/leeseola/_restore", restoreSnapshot.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("?x=y&x=z&x=q&w=p", dummyAction.getURI(ElasticsearchVersion.UNKNOWN));
assertNull(AbstractAction.getIdFromSource("JEST"));
assertEquals("/_nodes/_all/_shutdown", action.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("PUT", putTemplate.getRestMethodName()); assertEquals("_template/sponsored_tweet", putTemplate.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", getMapping.getRestMethodName()); assertEquals("twitter/_mapping", getMapping.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", getTemplate.getRestMethodName()); assertEquals("_template/personal_tweet", getTemplate.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("DELETE", delete.getRestMethodName()); assertEquals("twitter/tweet/1", delete.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", ping.getRestMethodName()); assertNull(ping.getData(null)); assertEquals("", ping.getURI(ElasticsearchVersion.UNKNOWN));
assertFalse(result.isSucceeded()); assertEquals("\\"Invalid index\\"", result.getErrorMessage());
assertNotNull(request); assertEquals(requestConfig, ((HttpRequestBase) request).getConfig());
assertEquals("POST", rollover.getRestMethodName()); assertEquals("twitter/_rollover", rollover.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("{\\"settings\\":{\\"index.number_of_shards\\":\\"2\\"},\\"conditions\\":{\\"max_age\\":\\"1d\\",\\"max_docs\\":\\"10000\\"}}", rollover.getData(new Gson()));
assertEquals("GET", getAliases.getRestMethodName()); assertEquals("twitter/_alias", getAliases.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", getAliases.getRestMethodName()); assertEquals("twitter/_alias/alias1,alias2", getAliases.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/put"); assertTrue(request instanceof HttpPut); assertTrue(((HttpPut) request).getEntity() instanceof GzipCompressingEntity);
assertEquals("testId", validResult.getId());
assertNotNull(total); assertEquals(new Long(1L), total);
assertNotNull(request); assertEquals(requestConfig, ((HttpRequestBase) request).getConfig());
assertEquals("HEAD", indicesExists.getRestMethodName()); assertEquals("twitter", indicesExists.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("DELETE", deleteSnapshotRepository.getRestMethodName()); assertEquals("/_snapshot/leeseohoo", deleteSnapshotRepository.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(Long.valueOf(2), validResult.getVersion());
assertEquals(multiSearch1, multiSearch1Duplicate);
assertEquals("POST", flush.getRestMethodName()); assertEquals("twitter/_flush?force=true", flush.getURI(ElasticsearchVersion.UNKNOWN));
assertNull(total);
assertEquals("DELETE", delete.getRestMethodName()); assertEquals("twitter/tweet", delete.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/get"); assertTrue(request instanceof HttpGetWithEntity);
assertNotNull(request); assertEquals(requestConfig, ((HttpRequestBase) request).getConfig());
assertEquals("POST", validate.getRestMethodName()); assertEquals("{query:query}", validate.getData(null)); assertEquals("twitter/_validate/query", validate.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(hits); assertTrue(hits.isEmpty()); assertNotNull(hits); assertTrue(hits.isEmpty());
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/delete"); assertTrue(request instanceof HttpDeleteWithEntity);
assertThat(httpClientConfig.getPreemptiveAuthTargetHosts(), hasItem(targetHost));
assertNull(maxScore);
assertNotNull(count);
assertEquals(user, credentials.getUserPrincipal().getName()); assertEquals(password, credentials.getPassword());
assertEquals("DELETE", delete.getRestMethodName()); assertEquals("twitter", delete.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(expected, actual);
assertEquals("DELETE", deleteTemplate.getRestMethodName()); assertEquals("_template/personal_tweet", deleteTemplate.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(jsonMap); assertEquals(4, jsonMap.entrySet().size()); assertEquals(true, jsonMap.get("ok").getAsBoolean()); assertEquals("twitter", jsonMap.get("_index").getAsString()); assertEquals("tweet", jsonMap.get("_type").getAsString()); assertEquals("1", jsonMap.get("_id").getAsString());
assertTrue(result.getErrorMessage(), result.isSucceeded());
assertEquals(expectedUri, updateSettings.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("", updateSettings.getData(null)); assertEquals("PUT", updateSettings.getRestMethodName());
assertNotNull(hit.source); assertNull(hit.explanation); assertNotNull(hit.sort); assertNotNull(hit.score); assertEquals("Incorrect version", someVersion, hit.source.getVersion());
assertTrue(result.getErrorMessage(), result.isSucceeded()); assertEquals(200, result.getResponseCode());
assertEquals("POST", optimize.getRestMethodName()); assertEquals("twitter/_optimize", optimize.getURI(ElasticsearchVersion.UNKNOWN));
assertNull(AbstractAction.getIdFromSource(null));
assertArrayEquals(new String[0][0], catResult.getPlainText());
assertEquals("POST", modifyAliases.getRestMethodName()); assertEquals("/_aliases", modifyAliases.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", script.getRestMethodName());
assertEquals("POST", rollover.getRestMethodName()); assertEquals("twitter/_rollover?dry_run", rollover.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", stats.getRestMethodName()); assertEquals("twitter/_stats", stats.getURI(ElasticsearchVersion.UNKNOWN));
assertFalse(result.isSucceeded());
assertEquals("POST", get.getRestMethodName()); assertEquals("/_mget", get.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(2, scrubbedURIs.size());
assertEquals("testIndex", validResult.getIndex());
assertNotNull(request); assertEquals(requestConfig, ((HttpRequestBase) request).getConfig());
assertEquals("/_cluster/reroute", reroute.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("POST", reroute.getRestMethodName());
assertNotNull(request); assertEquals(request.getURI().getPath(), "jest/head"); assertTrue(request instanceof HttpHead);
assertNull(hit); assertNull(hit);
assertNotEquals(index1, index2);
assertEquals("POST", multiSearch.getRestMethodName()); assertEquals("/_msearch", multiSearch.getURI(ElasticsearchVersion.UNKNOWN)); assertEquals("application/x-ndjson", multiSearch.getHeader("Content-Type"));
assertEquals(expected, actual);
assertEquals(deleteUserKramer, deleteUserKramerDuplicate);
assertEquals(3, actualMap.size()); assertEquals(expectedMap, actualMap);
assertEquals("DELETE", deleteSnapshot.getRestMethodName()); assertEquals("/_snapshot/leeseohoo/leeseola", deleteSnapshot.getURI(ElasticsearchVersion.UNKNOWN));
assertNull(maxScore);
assertEquals("HEAD", typeExist.getRestMethodName()); assertEquals("happyprg/_mapping/seohoo", typeExist.getURI(ElasticsearchVersion.V55));
assertEquals("HEAD", aliasExists.getRestMethodName()); assertEquals("_all/_alias/aliasName", aliasExists.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(jsonMap);
assertNotNull(jsonMap);
assertEquals("GET", getAliases.getRestMethodName()); assertEquals("twitter/_alias/alias", getAliases.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", update.getRestMethodName()); assertEquals("twitter/tweet/1/_update", update.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(2, actualMap.size()); assertEquals(expectedMap, actualMap);
assertNull(invalidResult.getIndex());
assertEquals("PUT", createSnapshotRepository.getRestMethodName()); assertEquals("/_snapshot/" + repository, createSnapshotRepository.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(hit.source); assertNull(hit.explanation); assertNull(hit.sort); assertNotNull(hit.score); assertEquals("1", hit.source.getId()); assertEquals(version, hit.source.getVersion());
assertNotNull(hits); assertFalse("should have 1 hit", hits.isEmpty()); assertNotNull(hits); assertFalse("should have 1 hit", hits.isEmpty());
assertEquals("POST", reindex.getRestMethodName()); assertEquals("/_reindex", reindex.getURI(ElasticsearchVersion.UNKNOWN));
assertArrayEquals(new String[][]{ new String[]{"alias", "index", "filter"}, new String[]{"testAlias", "testIndex", "-"}, new String[]{"testAlias2", "testIndex2", "-"} }, catResult.getPlainText());
assertEquals("POST", forceMerge.getRestMethodName()); assertEquals("twitter/_forcemerge", forceMerge.getURI(ElasticsearchVersion.UNKNOWN));
assertTrue(result.getErrorMessage(), result.isSucceeded());
assertNotNull(hit); assertNotNull(hit.source); assertNull(hit.explanation); assertNotNull(hit.sort); assertNotNull(hit.id); assertNotNull(hit.score); assertNotNull(hit); assertNotNull(hit.source); assertNull(hit.explanation); assertNotNull(hit.sort); assertNotNull(hit.id); assertNotNull(hit.score);
assertEquals("PUT", createSnapshot.getRestMethodName()); assertEquals("/_snapshot/leeseohoo/leeseola?wait_for_completion=true", createSnapshot.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", validate.getRestMethodName()); assertEquals("{query:query}", validate.getData(null)); assertEquals("/_validate/query", validate.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("PUT", putMapping.getRestMethodName()); assertEquals("twitter/tweet/_mapping", putMapping.getURI(ElasticsearchVersion.UNKNOWN));
assertNotNull(request); assertEquals(requestConfig, ((HttpRequestBase) request).getConfig());
assertEquals("POST", flush.getRestMethodName()); assertEquals("twitter%2Cmyspace/_flush", flush.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("POST", openIndex.getRestMethodName()); assertEquals("twitter/_open", openIndex.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals("GET", get.getRestMethodName()); assertEquals("DELETE", del.getRestMethodName());
assertEquals("GET", snapshotStatus.getRestMethodName()); assertEquals("/_snapshot/leeseohoo/leeseola/_status", snapshotStatus.getURI(ElasticsearchVersion.UNKNOWN));
assertEquals(2, includePattern.size()); assertEquals(includePatternItem1, includePattern.get(0).getAsString()); assertEquals(includePatternItem2, includePattern.get(1).getAsString()); assertEquals(2, excludePattern.size()); assertEquals(excludePatternItem1, excludePattern.get(0).getAsString()); assertEquals(excludePatternItem2, excludePattern.get(1).getAsString());
assertEquals("testType", validResult.getType());
assertEquals("PUT", createSnapshot.getRestMethodName()); assertEquals("/_snapshot/leeseohoo/leeseola?wait_for_completion=true", createSnapshot.getURI(ElasticsearchVersion.UNKNOWN));
assertThat(thrown).isInstanceOf(IllegalArgumentException.class) .hasNoCause().hasMessageContaining("foo");
assertEquals(Collections.emptyMap(), StructHelper.get(map, path, Map.class)); assertEquals("\'value\' is not a child of \'patch.value.value\'. Known children: \'name\', " + "\'typed_config\'", message);
assertEquals(map, StructHelper.get(map, "", Map.class)); assertEquals("INSERT_BEFORE", StructHelper.get(map, "patch.operation.", String.class));
assertEquals("INSERT_BEFORE", StructHelper.get(map, "patch.operation", String.class));
assertThat(knownClasses).isNotEmpty(); assertThat(knownClasses).size().isEqualTo(4); assertThat(knownClasses).contains( "me.snowdrop.istio.api.test.Simple", "me.snowdrop.istio.api.test.Interface", "me.snowdrop.istio.api.test.Class", "me.snowdrop.istio.api.test.Map");
assertEquals("stats_outbound", intermediate.get("root_id"));
assertEquals(Collections.emptyMap(), StructHelper.get(map, path, Map.class)); assertEquals("\'" + path + "\' is interrupted at \'patch.operation\' because \'operation\' is a terminal element", message);
assertEquals("stats_outbound", StructHelper.get(map, path, String.class)); assertEquals("\'root_id\' is not a child of \'patch.value.typed_config.value\'. Known children: " + "\'config\'", message);
assertEquals(Collections.emptyMap(), StructHelper.get(map, "patch.operation", Map.class));
assertEquals(intermediate.get("root_id"), StructHelper.get(StructHelperTest.map, "patch.value.typed_config.value.config.root_id", String.class));
assertEquals("body", result.getStringExtra(Intent.EXTRA_TEXT));
assertEquals("test", result.getStringExtra(Intent.EXTRA_SUBJECT));
assertEquals("test", result.getStringExtra(Intent.EXTRA_TEXT));
assertThat(list.size(), equalTo(2));
assertThat(list.size(), equalTo(2));
assertTrue( "complete was not called", new String( baos.toByteArray() ).isEmpty() ); assertEquals( "Write output only after complete", TEST, baos.toString().trim() );
assertEquals( "Write output only after complete", TEST, baos.toString().trim() );
assertEquals( "contentName", reportContentLocation.getName() );
assertEquals( mimeMessage, sec.getMimeMessage() );
assertEquals( 500, clear.getStatus() );
assertEquals( false, emailOutput.supportsPagination() );
assertEquals( reportContentRepository, reportContentLocation.getRepository() );
assertTrue( roh.isRtfVisible() ); assertFalse( roh.isRtfVisible() );
assertEquals( "outputTarget", sra.getOutputTarget() );
assertEquals( paramSet, dependencyGraph.getAllParameterNames() ); assertEquals( paramSet, dependencyGraph.getAllParameterNames() );
assertEquals( outputStream, stream.getParent() );
assertTrue( roh.isCsvAvailable() ); assertFalse( roh.isCsvAvailable() );
assertTrue( roh.isXlsVisible() ); assertFalse( roh.isXlsVisible() );
assertTrue( roh.isXlsxVisible() ); assertFalse( roh.isXlsxVisible() );
assertEquals( manager, rrl.getManager() );
assertEquals( "contentId", reportContentLocation.getContentId() );
assertNotNull( cache.get( SOME_KEY ) ); assertNull( cache.get( SOME_KEY ) );
assertEquals( 200, clear.getStatus() );
assertEquals( 0, rck.hashCode() ); assertEquals( 1403851013, rck.hashCode() );
assertFalse( sra.isPaginateOutput() ); assertTrue( sra.isPaginateOutput() );
assertTrue( listener.getState().getIsQueryLimitReached() );
assertTrue( baos.size() > 0 );
assertNull( rrl.createKey( 0, null ) ); assertNotNull( key ); assertEquals( rrl.SOLUTION_SCHEMA_NAME, key.getSchema() );
assertEquals( "path", sra.getJcrOutputPath() );
assertEquals( AsyncExecutionStatus.QUEUED, listener.getState().getStatus() ); assertEquals( AsyncExecutionStatus.FINISHED, listener.getState().getStatus() ); assertEquals( AsyncExecutionStatus.CANCELED, listener.getState().getStatus() ); assertEquals( AsyncExecutionStatus.CANCELED, listener.getState().getStatus() );
assertNotNull( generateId );
assertNull( handler.getHandlerForChild( "uri", "tagName", attrs ) ); assertNotNull( handler.getHandlerForChild( null, "path", attrs ) ); assertNotNull( handler.getHandlerForChild( null, "username", attrs ) ); assertNotNull( handler.getHandlerForChild( null, "password", attrs ) ); assertNull( handler.getHandlerForChild( null, null, attrs ) );
assertTrue( rck.equals( rck ) ); assertFalse( rck.equals( "" ) ); assertTrue( rck.equals( new ReportCacheKey( "", parameter ) ) ); assertFalse( rck.equals( new ReportCacheKey( "sessionId", parameter ) ) );
assertEquals( mock.getName(), reportContentRepository.getRoot().getName() );
assertEquals( "printer", sra.getPrinter() );
assertEquals( "messageHtml", sec.getMessageHtml() );
assertEquals( "attachmentName", sec.getAttachmentName2() );
assertNotNull( cache.get( SOME_KEY ) ); assertNull( cache.get( SOME_KEY ) );
assertNotNull( response ); assertTrue( response.hasEntity() ); assertTrue( json.contains( uuid.toString() ) );
assertTrue( roh.isXmlTableAvailable() ); assertFalse( roh.isXmlTableAvailable() );
assertTrue( roh.isXlsAvailable() ); assertFalse( roh.isXlsAvailable() );
assertNotNull( generateId ); assertFalse( jobIdGenerator.acquire( mock( IPentahoSession.class ), generateId ) ); assertFalse( jobIdGenerator.acquire( mock, UUID.randomUUID() ) ); assertTrue( jobIdGenerator.acquire( mock, generateId ) ); assertFalse( jobIdGenerator.acquire( mock, generateId ) );
assertEquals( "cc", sec.getCc() );
assertEquals( emailOutput, emailOutput.getReportLock() );
assertNotNull( cache.get( SOME_KEY ) ); assertNull( cache.get( SOME_KEY ) ); assertNotNull( cache.get( SOME_KEY ) ); assertNull( cache.get( SOME_KEY ) ); assertNotNull( cache.get( SOME_KEY ) ); assertNull( cache.get( SOME_KEY ) );
assertTrue( sra.getInputs().size() == 0 ); assertTrue( sra.getInputs().size() == 0 ); assertEquals( inputs, sra.getInputs() ); assertEquals( "value", sra.getInput( "key", "defaultValue" ) );
assertTrue( roh.isXmlPageVisible() ); assertFalse( roh.isXmlPageVisible() );
assertEquals( paramDepGrap.getDependentParameterFor( "param1" ), asSet() ); assertEquals( paramDepGrap.getDependentParameterFor( "param1" ), asSet( "param2", "param3" ) ); assertEquals( paramDepGrap.getDependentParameterFor( "param2" ), Collections.emptySet() );
assertEquals( attachmentContent, sec.getAttachmentContent3() );
assertEquals( -1, emailOutput.generate( new MasterReport(), 1, new ByteArrayOutputStream(), 1 ) );
assertFalse( rrl.isSupportedKey( key ) ); assertTrue( rrl.isSupportedKey( key ) );
assertEquals( "outputType", sra.getOutputType() );
assertTrue( roh.isPdfAvailable() ); assertFalse( roh.isPdfAvailable() );
assertTrue( reportContentLocation.isHiddenExtension( ".jpe" ) ); assertTrue( reportContentLocation.isHiddenExtension( ".jpeg" ) ); assertTrue( reportContentLocation.isHiddenExtension( ".jpg" ) ); assertTrue( reportContentLocation.isHiddenExtension( ".png" ) ); assertTrue( reportContentLocation.isHiddenExtension( ".css" ) ); assertFalse( reportContentLocation.isHiddenExtension( "" ) );
assertEquals( 200, response.getStatus() ); assertNotNull( jsonNode ); assertNotNull( jsonNode.get( "reservedId" ).asText() );
assertTrue( roh.isXmlPageAvailable() ); assertFalse( roh.isXmlPageAvailable() );
assertEquals( 3, result.size() ); assertEquals( "org.pentaho.reporting.platform.plugin.connection.PentahoMondrianConnectionProvider", result.get( 0 ) );
assertEquals( paramDepGrap.getKnownParameter(), asSet( "param1", "param2" ) );
assertEquals( stagingMode, handler.getStagingMode() );
assertEquals( "path", sra.getReportDefinitionPath() );
assertEquals( inputs.get( key ), sec.getInput( key, "" ) );
assertTrue( roh.isHtmlStreamAvailable() ); assertFalse( roh.isHtmlStreamAvailable() );
assertTrue( handler.canSendHeaders() ); assertFalse( "Can\'t send headers after start writing to THRU", handler.canSendHeaders() );
assertEquals( "attachmentName", sec.getAttachmentName() );
assertTrue( true ); assertEquals( "defaultOutputTarget", sra.getDefaultOutputTarget() );
assertTrue( roh.isPdfVisible() ); assertFalse( roh.isPdfVisible() );
assertEquals( "attachmentName", sec.getAttachmentName3() );
assertFalse( sec.validate() ); assertFalse( sec.validate() ); assertFalse( sec.validate() ); assertTrue( sec.validate() );
assertEquals( path, memorizeSchedulingLocationListener.lookupOutputFile( mock ) ); assertEquals( path, memorizeSchedulingLocationListener.lookupOutputFile( mock ) ); assertNull( memorizeSchedulingLocationListener.lookupOutputFile( mock ) );
assertEquals( StagingMode.THRU, mode ); assertEquals( StagingMode.THRU, mode ); assertEquals( StagingMode.MEMORY, mode );
assertFalse( reportContentLocation.delete() );
assertTrue( roh.isPngVisible() ); assertFalse( roh.isPngVisible() );
assertTrue( listener.isFirstPageMode() ); assertFalse( listener2.isFirstPageMode() );
assertNotNull( result );
assertNull( sra.getViewerSessionId() ); assertNull( sra.getViewerSessionId() ); assertEquals( "1", sra.getViewerSessionId() );
assertEquals( "bcc", sec.getBcc() );
assertEquals( attachmentContent, sec.getAttachmentContent() );
assertEquals( outputStream, streamSpy.getWrappedStream() );
assertNotNull( response ); assertEquals( 200, response.getStatus() );
assertFalse( sra.isDashboardMode() ); assertTrue( sra.isDashboardMode() );
assertEquals( result, new SimpleReportingComponent().checkAndGetUserInputQueryLimit( String.valueOf( userLimit ), reportLimit ) );
assertNull( handler.getProvider() ); assertNotNull( handler.getProvider() ); assertNotNull( handler.getObject() ); assertNotNull( handler.getProvider() ); assertNotNull( handler.getObject() ); assertNotNull( handler.getProvider() ); assertNotNull( handler.getObject() );
assertTrue( roh.isCsvVisible() ); assertFalse( roh.isCsvVisible() );
assertFalse( sra.isPrint() ); assertTrue( sra.isPrint() );
assertEquals( "to", sec.getTo() );
assertEquals( StagingMode.THRU, handler.getStagingMode() );
assertEquals( path, memorizeSchedulingLocationListener.lookupOutputFile( mock ) ); assertNull( memorizeSchedulingLocationListener.lookupOutputFile( mock ) );
assertEquals( StagingMode.THRU, mode );
assertEquals( -1, sra.getPageCount() ); assertEquals( report, sra.getReport() ); assertEquals( report, sra.getReport() ); assertEquals( report, sra.getReport() ); assertEquals( report, sra.getReport() );
assertEquals( resource, sra.getReportDefinition() );
assertTrue( reportContentRepository.getMimeRegistry() instanceof DefaultMimeRegistry );
assertEquals( rrl.SOLUTION_SCHEMA_NAME, derivedKey.getSchema() ); assertEquals( "", derivedKey.getIdentifierAsString() ); assertEquals( rrl.SOLUTION_SCHEMA_NAME, derivedKey.getSchema() ); assertEquals( rrl.SOLUTION_SCHEMA_NAME + rrl.SCHEMA_SEPARATOR, derivedKey.getIdentifierAsString() );
assertTrue( roh.isTextAvailable() ); assertFalse( roh.isTextAvailable() );
assertEquals( value, cachingPageableHTMLOutput.paginate( r, 1 ) );
assertNotNull( generateId ); assertFalse( jobIdGenerator.acquire( mock, generateId ) );
assertEquals( 0, emailOutput.paginate( null, 0 ) );
assertFalse( dependencyGraph.doesDependencyExist( "param2" ) ); assertTrue( dependencyGraph.doesDependencyExist( "param2" ) );
assertEquals( rrl.SOLUTION_SCHEMA_NAME, rrl.getSchema() );
assertEquals( STUB, listener.toString() );
assertTrue( handler.canSendHeaders() ); assertEquals( ( (TrackingOutputStream) stream ).getWrappedStream().hashCode(), outputStream.hashCode() ); assertEquals( 0, handler.getWrittenByteCount() );
assertTrue( roh.isRtfAvailable() ); assertFalse( roh.isRtfAvailable() );
assertEquals( "from", sec.getFrom() );
assertTrue( roh.isPngAvailable() ); assertFalse( roh.isPngAvailable() );
assertTrue( roh.isMailAvailable() ); assertFalse( roh.isMailAvailable() );
assertNull( handler.getHandlerForChild( "uri", "tagName", attrs ) ); assertNotNull( handler.getHandlerForChild( null, "path", attrs ) ); assertNull( handler.getHandlerForChild( null, null, attrs ) );
assertEquals( attachmentContent, sec.getAttachmentContent2() );
assertFalse( AsyncExecutionStatus.FINISHED.equals( listener.getState().getStatus() ) );
assertEquals( "subject", sec.getSubject() );
assertNull( reportContentLocation.getParent() );
assertTrue( handler1 instanceof ThruStagingHandler ); assertTrue( handler2 instanceof MemStagingHandler ); assertTrue( handler3 instanceof TempFileStagingHandler );
assertTrue( roh.isHtmlPageVisible() ); assertFalse( roh.isHtmlPageVisible() );
assertTrue( fileSystemCacheBackend.write( Arrays.asList( directoryKey, key ), value, new HashMap<String, Serializable>() ) ); assertEquals( fileSystemCacheBackend.read( Arrays.asList( directoryKey, key ) ), value ); assertTrue( fileSystemCacheBackend.purge( Arrays.asList( directoryKey, key ) ) ); assertNull( fileSystemCacheBackend.read( Arrays.asList( directoryKey, key ) ) );
assertFalse( jobIdGenerator.acquire( mock( IPentahoSession.class ), null ) );
assertEquals( 1, sra.getAcceptedPage() );
assertTrue( handler.isFullyBuffered() );
assertTrue( true );
assertTrue( roh.isXlsxAvailable() ); assertFalse( roh.isXlsxAvailable() );
assertFalse( handler.isFullyBuffered() );
assertTrue( roh.isXmlTableVisible() ); assertFalse( roh.isXmlTableVisible() );
assertEquals( jobManager.getExecutor(), executor );
assertTrue( roh.isMailVisible() ); assertFalse( roh.isMailVisible() );
assertEquals( key, result.getKey() );
assertEquals( paramDepGrap.getAllDependencies( "param1" ), asSet( "param1", "param2" ) ); assertEquals( paramDepGrap.getAllDependencies( asSet( "param1", "param1" ) ), Collections.emptySet() );
assertNotNull( el ); assertEquals( 1, el.getChildNodes().getLength() ); assertNotNull( found ); assertEquals( "error", node.getNodeName() ); assertEquals( HtmlUtils.htmlEscape( xssParameter ), paramName );
assertFalse( listener.isScheduled() ); assertFalse( listener.isScheduled() ); assertTrue( listener.isScheduled() );
assertEquals( "", rck.getSessionId() ); assertEquals( "sessionId", rck.getSessionId() );
assertTrue( handler.isFullyBuffered() );
assertEquals( StagingMode.MEMORY, handler.getStagingMode() );
assertEquals( paramDepGrap.getKnownParameter(), asSet( "param1", "param2", "param3" ) );
assertNotNull( response ); assertEquals( 200, response.getStatus() );
assertEquals( 0, sra.getYieldRate() ); assertEquals( 0, sra.getYieldRate() ); assertEquals( 3, sra.getYieldRate() );
assertFalse( sra.getUseJCR() ); assertTrue( sra.getUseJCR() );
assertEquals( 1, streamSpy.getTrackingSize() ); assertEquals( 2, streamSpy.getTrackingSize() ); assertEquals( 5, streamSpy.getTrackingSize() );
assertEquals( null, reportContentLocation.getAttribute( "", "" ) ); assertEquals( null, reportContentLocation.getAttribute( "org.jfree.repository", "" ) ); assertEquals( null, reportContentLocation.getAttribute( "", "version" ) ); assertEquals( "version", reportContentLocation.getAttribute( "org.jfree.repository", "version" ) );
assertTrue( roh.isHtmlStreamVisible() ); assertFalse( roh.isHtmlStreamVisible() );
assertNotNull( config ); assertNotNull( config.getEntity() ); assertTrue( config.getEntity() instanceof String ); assertNotNull( jsonNode ); assertFalse( jsonNode.get( "supportAsync" ).asBoolean() );
assertTrue( baos.size() > 0 );
assertTrue( roh.isTextVisible() ); assertFalse( roh.isTextVisible() );
assertNotNull( "always have sys param session Id set.", inputs.get( ParameterXmlContentHandler.SYS_PARAM_SESSION_ID ) );
assertEquals( StagingMode.TMPFILE, mode );
assertEquals( 0, listener.getRequestedPage() );
assertNotNull( response ); assertTrue( response.hasEntity() ); assertEquals( "100", page );
assertTrue( roh.isHtmlPageAvailable() ); assertFalse( roh.isHtmlPageAvailable() );
assertFalse( sra._execute() ); assertEquals( 3, sra.getYieldRate() ); assertEquals( "table/html;page-mode=page", sra.getInput( "output-target", "" ) );
assertTrue( true );
assertNotNull( test ); assertEquals( value, test.getName() );
assertFalse( reportContentLocation.setAttribute( "", "", null ) );
assertEquals( "messagePlain", sec.getMessagePlain() );
assertTrue(data != null); assertTrue(data.size() > 0);
assertTrue(properties.getProperty(PropertiesGlobalModelContext.PROPERTY_CURRENT_REGION) != null);
assertTrue(properties.getProperty(PropertiesGlobalModelContext.PROPERTY_ENVIRONMENT_NAME) != null);
assertTrue(columns != null); assertTrue(columns.size() == 2); assertTrue(columns.get(0).equals("Key")); assertTrue(columns.get(1).equals("Value"));
assertTrue(resultado.isPresent()); assertEquals(resultado.get().getLogin(), login);
assertEquals(list, seq1.toList()); assertEquals(list, seq2.toList()); assertEquals(list, buffer.seq().toList());
assertEquals(expected, actual); assertEquals(list, buffer.seq().toList());
assertEquals(list, buffer.seq().toList()); assertEquals(list, buffer.seq().toList());
assertEquals(1, result);
assertEquals(4, result.size()); assertTrue(result.contains(1)); assertTrue(result.contains(2)); assertTrue(result.contains(3)); assertTrue(result.contains(4));
assertEquals(3, result.size());
assertEquals(5, table.getKitty().cardsAsIntStream().count()); assertEquals(5, table.getPlayers().get(0).getNumCardsInHand()); assertEquals(5, table.getPlayers().get(1).getNumCardsInHand()); assertEquals(5, table.getPlayers().get(2).getNumCardsInHand());
assertEquals(handSize, result);
assertEquals(1, result);
assertEquals(8, handList.get(0).cardsAsIntStream().count()); assertEquals(8, handList.get(1).cardsAsIntStream().count()); assertEquals(8, handList.get(2).cardsAsIntStream().count()); assertEquals(8, handList.get(3).cardsAsIntStream().count()); assertEquals(8, handList.get(4).cardsAsIntStream().count());
assertEquals(3, newPlayers.size()); assertEquals(0, newPlayers.get(0).getNumCardsInHand()); assertEquals(0, newPlayers.get(1).getNumCardsInHand()); assertEquals(0, newPlayers.get(2).getNumCardsInHand()); assertEquals(3, newPlayers.stream().map(p -> p.getPlayerStats().getNumGamesWon()).mapToInt(i->i).sum());
assertEquals("Mozart", result.getBidder().getName());
assertEquals(player, bid.getBidder()); assertEquals(4, bid.getOffer()); assertEquals(prizeCard, bid.getPrizeCard());
assertEquals(CoAP.Code.PUT, request.getCode());
assertEquals(CoAP.Code.GET, request.getCode());
assertEquals(CoAP.Code.GET, request.getCode());
assertEquals(CoAP.Code.GET, request.getCode()); assertTrue(request.isObserve());
assertEquals(CoAP.Code.DELETE, request.getCode());
assertEquals(CoAP.Code.POST, request.getCode());
assertThat(list, allOf( iterableWithSize(1), hasItem(debt) ));
assertThat(existingTransactions, allOf( iterableWithSize(1), hasItem( debt(thomas, amount(2.5), simon) ) ));
assertThat(new IllegalCombination(), hasChanges(equalTo(true)));
assertThat(new Add(), hasChanges(equalTo(true)));
assertThat(nobt, hasExpenses(hasItem(hasId(equalTo(1L)))));
assertThat(optimizedDebts, is(debts));
assertTrue(result);
assertThat(modified.getContentType(), is(MediaType.APPLICATION_JSON));
assertThat(nobt, allOf( hasName(equalTo("Test")), hasCurrency(equalTo(EUR)), hasParticipants(containsInAnyOrder(thomas)), hasId(notNullValue(NobtId.class)), hasCreationTime(equalTo(ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC).toInstant())) ));
assertThat(nobt, hasPayments( hasItem( allOf( hasSender(equalTo(thomas)), hasRecipient(equalTo(david)), hasAmount(equalTo(amount(5))) ) ) ));
assertThat(optimalDebts, allOf( Matchers.<Debt>iterableWithSize(5), containsInAnyOrder( debt(matthias, amount(3), thomas), debt(jacqueline, amount(2), thomasB), debt(matthias, amount(11), thomasB), debt(david, amount(5), thomas), debt(david, amount(12), thomasB) ) ));
assertThat(shortUrl.length(), is(12));
assertThat(nobt, hasPayments( allOf( iterableWithSize(greaterThan(0)), everyItem( PaymentMatchers.hasId(notNullValue(Long.class)) ) ) ));
assertThat(conversionInformation, isValid(EUR, is(true)));
assertThat(nobt, hasExpenses( allOf( iterableWithSize(greaterThan(0)), everyItem( hasId(notNullValue(Long.class)) ) ) ));
assertFalse(result);
assertThat(optimalDebtsA, equalTo(optimalDebtsB));
assertThat(new NotCombinable(), hasChanges(equalTo(false)));
assertThat(sut.getKey(), equalTo("EUR"));
assertThat(new Remove(), hasChanges(equalTo(true)));
assertThat(defaultConversionInformation(EUR), hasRate(equalTo(BigDecimal.ONE)));
assertThat(nobt, allOf( hasExpenses(iterableWithSize(0)), hasDeletedExpenses(iterableWithSize(1)) ));
assertThat(debts, containsInAnyOrder( debt(david, amount(30), thomas), debt(thomas, amount(10), thomas), debt(lukas, amount(20), thomas) ));
assertThat(list, allOf( iterableWithSize(0), not(hasItem(debt)) ));
assertThat(participants, containsInAnyOrder(thomas, david, lukas));
assertNull("no item to recycle", getDeleted()); assertNotNull("1 item to recycle", getDeleted());
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 1, getLength());
assertNotNull(re); assertEquals(re.getAidLength(), AID_BASIC.length); assertEquals(AID_BASIC.length, re.getAid(aidData, (short) 0)); assertEquals(HASH_BASIC.length, re.getHash(hashData, (short) 0)); assertEquals(RULE_BASIC.length, re.getRule(ruleData, (short) 0)); assertArrayEquals(AID_BASIC, aidData); assertArrayEquals(HASH_BASIC, hashData); assertArrayEquals(RULE_BASIC, ruleData);
assertEquals("init length", 4, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals(AramConstTest.VALID_AID_REF_DO.length, AramUtils.buildAidRefDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(AramConstTest.VALID_AID_REF_DO, data);
assertEquals(VALID_REF_AR_DO.length, AramUtils.buildRefArDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(VALID_REF_AR_DO, data);
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals("length after deletion", 1, getLength());
assertEquals("init length", 4, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals(AramConstTest.VALID_REF_DO.length, AramUtils.buildRefDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(AramConstTest.VALID_REF_DO, data);
assertEquals("init length", 4, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals("length after deletion", 1, getLength());
assertEquals("init length", 4, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals(AramConstTest.VALID_HASH_REF_DO.length, AramUtils.buildHashRefDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(AramConstTest.VALID_HASH_REF_DO, data);
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 1, getLength());
assertEquals("init length", 4, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 0, getLength());
assertEquals("length after deletion", 1, getLength());
assertEquals(AramConstTest.VALID_AR_DO.length, AramUtils.buildArDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(AramConstTest.VALID_AR_DO, data);
assertEquals("length after deletion", 0, getLength());
assertEquals(queueName, rdq.getName());
assertEquals(1_000, rdq.getUnackTime());
assertTrue(popped.isEmpty()); assertTrue(updated); assertEquals(1, popped.size()); assertEquals(1, popped.get(0).getTimeout()); assertTrue(!updated);
assertNotNull(schemaElement); assertEquals(SCHEMA_ELEMENT_NAME, schemaElement.getQName());
assertNotNull(storageComp); assertEquals(TestNOpPModeSet.class, storageComp.getClass());
assertEquals(soapHeaderBlock.getMustUnderstand(), newSoapHeaderBlock.getMustUnderstand()); assertEquals(soapHeaderBlock.getRelay(), newSoapHeaderBlock.getRelay()); assertEquals(soapHeaderBlock.getRole(), newSoapHeaderBlock.getRole()); assertEquals(soapHeaderBlock.getVersion(), newSoapHeaderBlock.getVersion());
assertEquals("default", Utils.getValue(null, "default")); assertEquals("default", Utils.getValue("", "default")); assertEquals("data", Utils.getValue("data", "default"));
assertTrue(Utils.isNullOrEmpty(validator.validatePMode(validPMode))); assertTrue(Utils.isNullOrEmpty(validator.validatePMode(validPMode)));
assertTrue(Utils.isNullOrEmpty(pmodes));
assertNotNull(errorMessage); assertTrue(it.hasNext()); assertEquals("some_error_code", ebmsError.getErrorCode()); assertEquals(IEbmsError.Severity.failure, ebmsError.getSeverity());
assertEquals(SERVICE_ELEMENT_NAME, sElement.getQName()); assertNull(sElement.getAttributeValue(new QName("type"))); assertEquals("some_name", sElement.getText());
assertNotNull(readProperties); assertEquals(2, readProperties.size());
assertTrue(EventUtils.shouldHandleEvent(config, event)); assertFalse(EventUtils.shouldHandleEvent(config, unhandledEvent));
assertTrue(blocks.size()>0); assertTrue(((SOAPHeaderBlock) blocks.get(0)).getMustUnderstand());
assertTrue(queryManager.isAlreadyProcessed(TestData.userMsg5)); assertFalse(queryManager.isAlreadyProcessed(TestData.userMsg3));
assertTrue(it.hasNext()); assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, it.next().getQName());
assertNotNull(mpElement); assertEquals(Q_ELEMENT_NAME, mpElement.getQName()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertNotNull(svc); assertEquals(svcType, svc.getType()); assertEquals(svcName, svc.getName());
assertNotNull(piElement);
assertEquals(SERVICE_ELEMENT_NAME, sElement.getQName()); assertEquals("some_type", sElement.getAttributeValue(new QName("type"))); assertEquals("some_name", sElement.getText());
assertNotNull(schemaElement); assertEquals(SCHEMA_ELEMENT_NAME, schemaElement.getQName()); assertEquals(schema.getLocation(), schemaElement.getAttributeValue(new QName("location"))); assertEquals(schema.getNamespace(), schemaElement.getAttributeValue(new QName("namespace"))); assertEquals(schema.getVersion(), schemaElement.getAttributeValue(new QName("version")));
assertNotNull(propElement); assertEquals(Q_ELEMENT_NAME, propElement.getQName());
assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, smElement.getQName());
assertFalse(Utils.isNullOrEmpty(pmodes)); assertEquals("tp_ebms_ut_only", pmodes.iterator().next().getId());
assertNotNull(descr); assertEquals(text, descr.getText()); assertNull(descr.getLanguage());
assertEquals(PULLREQUEST_ELEMENT_NAME, prElement.getQName()); assertEquals("some_mpc", prElement.getAttributeValue(new QName("mpc")));
assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertTrue(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertTrue(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode)));
assertNotEquals(T_NEW_MULTI_HOP, errorMsg.usesMultiHop()); assertEquals(T_NEW_MULTI_HOP, errorMsg.usesMultiHop()); assertEquals(T_NEW_MULTI_HOP, errorMsgJPA.usesMultiHop());
assertTrue(it.hasNext()); assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, esElement.getQName()); assertEquals(ERROR_ELEMENT_NAME, eElement.getQName()); assertEquals(IEbmsError.Severity.failure.toString(), eElement.getAttributeValue(SEVERITY_ATTR_NAME)); assertEquals("some_error_code", eElement.getAttributeValue(ERROR_CODE_ATTR_NAME));
assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertNotNull(sigConfig.getKeystoreAlias()); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertTrue(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode)));
assertNotNull(dElement); assertEquals(Q_ELEMENT_NAME, dElement.getQName()); assertEquals(description.getLanguage(), dElement.getAttributeValue(LANG_ATTR_NAME)); assertEquals(description.getText(), dElement.getText());
assertEquals(Handler.InvocationResponse.CONTINUE, invokeResp); assertEquals(ProcessingState.SENDING, userMessageEntity.getCurrentProcessingState().getState());
assertEquals(MultiHopConstants.ROUTING_INPUT_NS_URI, ri.getNamespaceURI()); assertTrue(umChilds.hasNext()); assertEquals(MultiHopConstants.ROUTING_INPUT_NS_URI, umChild.getNamespaceURI()); assertTrue(ciChilds.hasNext()); assertEquals(EbMSConstants.EBMS3_NS_URI, ciChild.getNamespaceURI());
assertTrue(Utils.isNullOrEmpty(xml)); assertTrue(Utils.isNullOrEmpty(xml2));
assertNotNull(agreementReference); assertEquals(name, agreementReference.getName()); assertEquals(type, agreementReference.getType()); assertEquals(pmodeId, agreementReference.getPModeId());
assertNotNull(descr); assertEquals(text, descr.getText()); assertEquals(lang, descr.getLanguage());
assertNotNull(schema); assertEquals(location, schema.getLocation()); assertEquals(ns, schema.getNamespace()); assertEquals(version, schema.getVersion());
assertNotNull(umElement); assertEquals(USER_MESSAGE_ELEMENT_NAME, umElement.getQName()); assertNotNull(MessageInfoElement.getElement(umElement)); assertNotNull(CollaborationInfoElement.getElement(umElement)); assertNotNull(MessagePropertiesElement.getElement(umElement)); assertNotNull(PayloadInfoElement.getElement(umElement));
assertFalse(Utils.isNullOrEmpty(xml)); assertTrue(countElements(xml, "ExecuteInOrder") == 1); assertEquals("false", findElements(xml, "ExecuteInOrder").get(0).getTextContent()); assertTrue(countElements(xml, "StopValidationOn") == 0); assertTrue(countElements(xml, "RejectMessageOn") == 0); assertTrue(countElements(xml, "Validator") == 1);
assertNotNull(requestFlow);
assertNotNull(pElement); assertEquals(Q_ELEMENT_NAME, pElement.getQName()); assertEquals(property.getName(), pElement.getAttributeValue(new QName("name"))); assertEquals(property.getType(), pElement.getAttributeValue(new QName("type"))); assertEquals(property.getValue(), pElement.getText());
assertNotNull(it); assertTrue(it.hasNext());
assertNotNull(piElement); assertEquals("#" + payloadURI, piElement.getAttribute(new QName("href")).getAttributeValue());
assertEquals(AGREEMENT_REF_INFO_ELEMENT_NAME, agreementRefElement.getQName()); assertEquals(name, agreementRefElement.getText()); assertEquals(type, agreementRefElement.getAttributeValue(new QName("type"))); assertEquals(pmodeId, agreementRefElement.getAttributeValue(new QName("pmode")));
assertTrue(Utils.isNullOrEmpty(validator.validatePMode(validPMode)));
assertNotNull(propElements); assertEquals(Q_ELEMENT_NAME, propElement.getQName()); assertFalse(propElements.hasNext()); assertNotNull(propElements); assertEquals(Q_ELEMENT_NAME, propElement.getQName()); assertTrue(propElements.hasNext()); assertEquals(Q_ELEMENT_NAME, propElement.getQName()); assertFalse(propElements.hasNext());
assertNotNull(miElement); assertEquals(MESSAGE_INFO_ELEMENT_NAME, miElement.getQName()); assertFalse(Utils.isNullOrEmpty(msgIdElems)); assertEquals(userMessage.getMessageId(), msgIdElems.next().getText()); assertFalse(Utils.isNullOrEmpty(timestampElems)); assertEquals(Utils.toXMLDateTime(userMessage.getTimestamp()), timestampElems.next().getText()); assertTrue(Utils.isNullOrEmpty(miElement.getChildrenWithName(REF_TO_MESSAGE_ID_ELEMENT_NAME)));
assertTrue(Utils.isNullOrEmpty(validator.validatePMode(validPMode)));
assertEquals(InvocationResponse.CONTINUE, new StartProcessingUsrMessage().invoke(mc)); assertEquals(ProcessingState.PROCESSING, userMessageEntity.getCurrentProcessingState().getState());
assertNotNull(dElement); assertEquals(Q_ELEMENT_NAME, dElement.getQName());
assertNotNull(piElement); assertEquals(payloadURI, piElement.getAttribute(new QName("href")).getAttributeValue());
assertNotNull(mpElement); assertEquals(Q_ELEMENT_NAME, mpElement.getQName()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertTrue(Utils.isNullOrEmpty(result)); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(1 , result.size()); assertEquals(TestData.userMsg1.getMessageId(), mu.getMessageId()); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(1 , result.size()); assertEquals(TestData.userMsg1.getMessageId(), result.iterator().next().getMessageId()); assertTrue(Utils.isNullOrEmpty(result)); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(5 , result.size());
assertNotNull(miElement); assertEquals(MESSAGE_INFO_ELEMENT_NAME, miElement.getQName()); assertFalse(Utils.isNullOrEmpty(msgIdElems)); assertEquals(receipt.getMessageId(), msgIdElems.next().getText()); assertFalse(Utils.isNullOrEmpty(timestampElems)); assertEquals(Utils.toXMLDateTime(receipt.getTimestamp()), timestampElems.next().getText()); assertFalse(Utils.isNullOrEmpty(refToElems)); assertEquals(receipt.getRefToMessageId(), refToElems.next().getText());
assertNotNull(piElement); assertEquals(PAYLOAD_INFO_ELEMENT_NAME, piElement.getQName()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertNotNull(sElement); assertEquals(SERVICE_ELEMENT_NAME, sElement.getQName());
assertNotNull(validators); assertEquals(2, validators.size()); assertTrue( validators.parallelStream().anyMatch(v -> v.getName().equals(new TestValidatorAllWrong().getName())) && validators.parallelStream().anyMatch(v -> v.getName().equals(new TestValidatorAllGood().getName())));
assertEquals(RECEIPT_CHILD_ELEMENT_NAME, receipt.getContent().iterator().next().getQName());
assertEquals(Handler.InvocationResponse.CONTINUE, invokeResp); assertEquals(ProcessingState.FAILURE, HolodeckB2BCoreInterface.getQueryManager().getMessageUnitsWithId(userMessage.getMessageId()).iterator() .next().getCurrentProcessingState().getState()); assertEquals(ProcessingState.READY_FOR_DELIVERY, errorMessageEntity.getCurrentProcessingState().getState());
assertTrue(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertTrue(Utils.isNullOrEmpty(tokenConfig.getUsername())); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertTrue(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode))); assertFalse(Utils.isNullOrEmpty(validator.validatePMode(invalidPMode)));
assertEquals(1, queryManager.getNumberOfTransmissions(new UserMessageEntity(new UserMessage(TestData.userMsg6)))); assertEquals(2, queryManager.getNumberOfTransmissions(new UserMessageEntity(new UserMessage(TestData.userMsg2)))); assertEquals(0, queryManager.getNumberOfTransmissions(new UserMessageEntity(new UserMessage(TestData.userMsg5))));
assertTrue(dir.isDirectory()); assertNotEquals(newFileName1, newFileName2); assertNotEquals(file.getAbsolutePath(), newFileName1); assertNotEquals(file.getAbsolutePath(), newFileName2);
assertNull(pullCfg);
assertNotNull(piElement); assertEquals(PAYLOAD_INFO_ELEMENT_NAME, piElement.getQName());
assertFalse(Utils.isNullOrEmpty(pmodes)); assertEquals("flow_override_ebms_ut_only", pmodes.iterator().next().getId());
assertNotNull(requestFlow);
assertFalse(Utils.isNullOrEmpty(payloads)); assertTrue(payloadsIt.hasNext()); assertEquals(IPayload.Containment.ATTACHMENT, p.getContainment()); assertTrue(payloadsIt.hasNext()); assertEquals(IPayload.Containment.BODY, p.getContainment()); assertFalse(payloadsIt.hasNext());
assertNotNull(propElement); assertEquals(Q_ELEMENT_NAME, propElement.getQName());
assertNotNull(prop); assertEquals(pName, prop.getName()); assertNull(prop.getType()); assertEquals(pValue, prop.getValue());
assertEquals(msgId, msgUnit.getMessageId()); assertEquals(timestamp, msgUnit.getTimestamp()); assertEquals(refToMsgId, msgUnit.getRefToMessageId());
assertEquals("key1", Utils.getKeyByValue(map, "value1")); assertEquals("key2", Utils.getKeyByValue(map, "value2")); assertEquals("key3", Utils.getKeyByValue(map, "value3"));
assertFalse(Utils.isNullOrEmpty(allMsgUnits)); assertEquals(totalMsgUnits - numberDeleted, currentCount);
assertNotEquals(T_NEW_PMODE_ID_1, userMsg.getPModeId()); assertEquals(T_NEW_PMODE_ID_1, userMsg.getPModeId()); assertEquals(T_NEW_PMODE_ID_1, userMsgJPA.getPModeId());
assertNotNull(requestFlow);
assertNull(Utils.getExtension(null)); assertNull(Utils.getExtension("")); assertEquals(mediaTypeName,mimeTypeName); assertEquals(mimeTypeExtension, Utils.getExtension(mimeTypeName));
assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, esElement.getQName()); assertEquals(ERROR_ELEMENT_NAME, eElement.getQName()); assertEquals(IEbmsError.Severity.failure.toString(), eElement.getAttributeValue(SEVERITY_ATTR_NAME)); assertEquals("some_error_code", eElement.getAttributeValue(ERROR_CODE_ATTR_NAME));
assertNotNull(pElement); assertEquals(Q_ELEMENT_NAME, pElement.getQName()); assertEquals(property.getName(), pElement.getAttributeValue(new QName("name"))); assertNull(pElement.getAttributeValue(new QName("type"))); assertEquals(property.getValue(), pElement.getText());
assertEquals("some_mpc", pullRequest.getMPC()); assertEquals("some_mpc", pullRequest.getMPC());
assertTrue(pmodeStorage.get(manager) instanceof InMemoryPModeSet);
assertTrue(result.executedAllValidators()); assertTrue(Utils.isNullOrEmpty(result.getValidationErrors()));
assertNotNull(readProperties); assertEquals(2, readProperties.size());
assertNotNull(piElement); assertEquals("cid:" + payloadURI, piElement.getAttribute(new QName("href")).getAttributeValue());
assertNotEquals(T_NEW_SHOULD_HAVE_FAULT, errorMsg.shouldHaveSOAPFault()); assertEquals(T_NEW_SHOULD_HAVE_FAULT, errorMsg.shouldHaveSOAPFault()); assertEquals(T_NEW_SHOULD_HAVE_FAULT, errorMsgJPA.shouldHaveSOAPFault());
assertNotNull(requestFlow);
assertFalse(Utils.isNullOrEmpty(result)); assertEquals(1 , result.size()); assertTrue(Utils.isNullOrEmpty(result)); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(3 , result.size()); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(1 , result.size()); assertFalse(Utils.isNullOrEmpty(result)); assertEquals(2 , result.size());
assertNotNull(msgInfoElement); assertEquals(MESSAGE_INFO_ELEMENT_NAME, msgInfoElement.getQName());
assertFalse(Utils.isNullOrEmpty(xml)); assertTrue(countElements(xml, "Validator") == 2);
assertNotNull(contentId); assertTrue(contentIdParts.length == 2); assertTrue(contentIdParts[0].contains(idParts[0])); assertEquals(idParts[0], contentIdParts[0].substring(0, contentIdParts[0].lastIndexOf("-"))); assertTrue(contentIdParts[0].length()>0); assertEquals(contentIdParts[1], hostname);
assertTrue(MessageIdUtils.isAllowed("`a#very$special%id!@some-where+{%&\'*/}?^~|")); assertFalse(MessageIdUtils.isAllowed("")); assertFalse(MessageIdUtils.isAllowed("just a test@holodeck-b2b.org")); assertFalse(MessageIdUtils.isAllowed("just[8]test@holodeck-b2b.org"));
assertFalse(Utils.isNullOrEmpty(umElements)); assertEquals(USER_MESSAGE_ELEMENT_NAME, umElements.next().getQName()); assertTrue(umElements.hasNext()); assertEquals(USER_MESSAGE_ELEMENT_NAME, umElements.next().getQName()); assertFalse(umElements.hasNext());
assertNotNull(id); assertTrue(parts.length == 2); assertTrue(parts[0].length()>0); assertEquals(parts[1], hostname);
assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, rElement.getQName());
assertNotNull(svc); assertNull(svc.getType()); assertEquals(svcName, svc.getName());
assertTrue(it.hasNext()); assertEquals(SIGNAL_MESSAGE_ELEMENT_NAME, it.next().getQName());
assertNotNull(prop); assertEquals(pName, prop.getName()); assertEquals(pType, prop.getType()); assertEquals(pValue, prop.getValue());
assertFalse(Utils.isNullOrEmpty(xml)); assertTrue(countElements(xml, "name") == 1); assertEquals(agreement.getName(), findElements(xml, "name").get(0).getTextContent()); assertTrue(countElements(xml, "type") == 0);
assertNotNull(dElement); assertEquals(Q_ELEMENT_NAME, dElement.getQName()); assertNull(description.getLanguage(), dElement.getAttributeValue(LANG_ATTR_NAME)); assertEquals(description.getText(), dElement.getText());
assertEquals(Handler.InvocationResponse.CONTINUE, new ProcessReceipts().invoke(mc)); assertEquals(ProcessingState.DELIVERED, HolodeckB2BCoreInterface.getQueryManager() .getMessageUnitsWithId(userMessage.getMessageId()) .iterator().next().getCurrentProcessingState().getState()); assertEquals(ProcessingState.READY_FOR_DELIVERY, receiptEntity.getCurrentProcessingState().getState());
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("def")); assertTrue(attrs.get("ghi").equals("jkl"));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("def"));
assertTrue(isInRange(getHeight("2016-01-26"), 918313, 925424)); assertTrue(isInRange(getHeight("2016-08-13"), 1107244, 1110793));
assertTrue(monero_mnemonic.equals(test_monero));
assertTrue(isInRange(getHeight("2017-09-01"), 1383957, 1387716)); assertTrue(isInRange(getHeight("2017-09-05"), 1386967, 1390583)); assertTrue(isInRange(getHeight("2017-09-21"), 1398492, 1402068));
assertTrue(getHeight("2014-05-07") > 0);
assertTrue(s.equals("1.234567891234"));
assertTrue(s.equals("1.00"));
assertNull(attrs);
assertTrue(s.equals("1.2346"));
assertTrue(getHeight("2014-04-27") == 0);
assertNotNull(attrs); assertTrue(attrs.get("abc").equals(" ")); assertTrue(attrs.get("def").equals("99"));
assertTrue(monero_mnemonic.equals(test_monero));
assertTrue(s.equals("1.234567891234"));
assertTrue(s.equals("0.00000000001"));
assertTrue(monero_mnemonic.equals(test_monero));
assertTrue(s.equals("1.00"));
assertTrue(attrs.get("ghi").equals("jkl"));
assertNotNull(attrs); assertTrue(BarcodeData.OA_XMR_ASSET.equals(attrs.get(OpenAliasHelper.OA1_ASSET)));
assertTrue(isInRange(getHeight("2017-01-26"), 1226806, 1230402)); assertTrue(isInRange(getHeight("2017-08-13"), 1370264, 1373854)); assertTrue(isInRange(getHeight("2017-08-31"), 1383254, 1386967)); assertTrue(isInRange(getHeight("2017-06-09"), 1323288, 1326884));
assertTrue(monero_mnemonic.equals(test_monero));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("d\\"ef\\"")); assertTrue(attrs.get("ghi").equals("jkl"));
assertTrue(isInRange(getHeight("2014-04-26"), 0, 8501)); assertTrue(isInRange(getHeight("2014-05-09"), 20289, 28311)); assertTrue(isInRange(getHeight("2014-05-17"), 32608, 40075)); assertTrue(isInRange(getHeight("2014-05-30"), 52139, 59548));
assertTrue(attrs.get("ghi").equals("jkl"));
assertTrue(s.equals("0.00"));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("def"));
assertTrue(isInRange(getHeight("2016-03-23"), 998955, 1006105)); assertTrue(isInRange(getHeight("2016-03-24"), 1000414, 1007486)); assertTrue(isInRange(getHeight("2016-03-25"), 1001800, 1008900)); assertTrue(isInRange(getHeight("2016-03-26"), 1003243, 1009985)); assertTrue(isInRange(getHeight("2016-03-27"), 1004694, 1010746));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals(";")); assertTrue(attrs.get("def").equals("99"));
assertTrue(monero_mnemonic.equals(test_monero));
assertTrue(monero_mnemonic.equals(test_monero));
assertNull(test_monero);
assertNull(attrs);
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("def")); assertTrue(attrs.get("ghi").equals("jkl"));
assertTrue(attrs.get("ghi").equals("jkl"));
assertTrue(isInRange(getHeight("2018-02-19"), 1507579, 1511127));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals("d;ef")); assertTrue(attrs.get("ghi").equals("jkl"));
assertTrue(isInRange(getHeight("2019-01-08"), b_20190108 - 720 * 5, b_20190108));
assertTrue(isInRange(getHeight("2015-01-26"), 397914, 405055)); assertTrue(isInRange(getHeight("2015-08-13"), 682595, 689748));
assertTrue(s.equals("-1.00"));
assertNotNull(attrs); assertTrue(attrs.get("abc").equals(" ")); assertTrue(attrs.get("def").equals("99"));
assertTrue(getHeight("2013-12-01") == 0); assertTrue(getHeight("1958-12-01") == 0);
assertEquals("hello", ((TestData)messageNew.getData()).getInner()); assertEquals("hi", messageNew.getHeader("key1"));
assertEquals(res.size(), 1); assertEquals(res.get(0).getRelation(), SugiliteRelation.CONTAINS_NUMBER); assertEquals(Double.compare(res.get(0).getNumericValue(), 12345.67), 0);
assertEquals(res.size(), 2); assertEquals(res.get(0).getNumericValue().intValue(), -550); assertEquals(res.get(1).getNumericValue().intValue(), 0);
assertEquals(res.size(), 1); assertEquals(res.get(0).getRelation(), SugiliteRelation.CONTAINS_NUMBER); assertEquals(Double.compare(res.get(0).getNumericValue(), 34.56), 0);
assertEquals(res.size(), 2); assertEquals(res.get(0).getRelation(), SugiliteRelation.CONTAINS_PERCENTAGE); assertEquals(res.get(1).getRelation(), SugiliteRelation.CONTAINS_PERCENTAGE); assertEquals(res.get(0).getNumericValue().intValue(), 25); assertEquals(res.get(1).getNumericValue().intValue(), 35);
assertEquals(res.size(), 3); assertEquals(Double.compare(res.get(0).getNumericValue(), 2), 0); assertEquals(Double.compare(res.get(1).getNumericValue(), 3.05), 0); assertEquals(Double.compare(res.get(2).getNumericValue(), 23333444.08), 0);
assertEquals(res.size(), 1); assertEquals(res.get(0).getRelation(), SugiliteRelation.CONTAINS_DURATION); assertEquals(res.get(0).getNumericValue().intValue(), 5*3600000);
assertTrue("Duration was too long, was " + durationMs, durationMs < 1_000);
assertTrue(strategy.getChannelIdentifiers().contains("val")); assertFalse(result); assertFalse(result2);
assertNotNull(mRecord);
assertTrue(channels.contains("flag")); assertTrue(channels.contains("test")); assertTrue(channels.contains("flag")); assertTrue(channels.contains("test"));
assertEquals(123L, (long)result.getValue("test1").getAsLong()); assertEquals("string", result.getValue("test2").getAsString()); assertEquals(123L, (long)result.getValue("test1").getAsLong()); assertEquals("string", result.getValue("test2").getAsString());
assertTrue(strategy.getChannelIdentifiers().contains("val")); assertTrue(result);
assertEquals(1, channelsAndTypes.size()); assertEquals(DataType.STRING, channelsAndTypes.get("DB14_Channel123"));
assertEquals(untypedValues.getTimestamp(), typedValues.getTimestamp()); assertEquals(untypedValues.getSource(), typedValues.getSource()); assertTrue(LongValue.class.isAssignableFrom(typedValues.getValues().get("key").getClass())); assertEquals(42L, untypedValues.getValues().get("key"));
assertEquals(10L, extractTimestamp);
assertEquals(0, extract.size());
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("val"));
assertFalse(strategy.isToBeTriggered(null)); assertFalse(strategy.isToBeTriggered(null)); assertFalse(strategy.isToBeTriggered(null)); assertFalse(strategy.isToBeTriggered(null)); assertTrue(strategy.isToBeTriggered(null)); assertTrue(strategy.isToBeTriggered(null)); assertFalse(clone.isToBeTriggered(null));
assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("val"));
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("val"));
assertTrue(window.inWindow(mock(MRecord.class))); assertTrue(clone.inWindow(mock(MRecord.class)));
assertTrue(strategy.getChannelIdentifiers().contains("test")); assertTrue(clone.getChannelIdentifiers().contains("test"));
assertTrue(source.hasRemaining());
assertEquals(3, TestRecordHandler.records.size());
assertNotNull(string); assertEquals( "UntypedValues(source=null, timestamp=0, prefix=null, values={key=null})", string );
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("test")); assertFalse(result); assertFalse(clone.isToBeTriggered(null));
assertEquals(arrayListMock, channelIdentifiers);
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("null"));
assertEquals(2, AggregationUtils.add(1, 1), delta); assertEquals(2, AggregationUtils.add(1L, 1L), delta); assertEquals(2, AggregationUtils.add(1F, 1F), delta); assertEquals(2, AggregationUtils.add(1D, 1D), delta); assertEquals(2, AggregationUtils.add(1D, 1L), delta);
assertTrue(window.getChannelIdentifiers().contains("test")); assertTrue(clone.getChannelIdentifiers().contains("test"));
assertTrue(evalCalled);
assertEquals(1, typedChannelMap.size()); assertEquals("100", typedChannelMap.get("DB13_LongChannel").getAsString());
assertNotNull(Extractors.allChannelMapExtractor(new HashSet<>()));
assertTrue(strategy.getChannelIdentifiers().contains("val")); assertTrue(result); assertTrue(result2); assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("test"));
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("val")); assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("test"));
assertEquals(123L,(long)event.getParameter("test").getAsLong()); assertEquals(123L,(long)event.getParameter("test").getAsLong());
assertEquals(new HashSet<>(), channelIdentifiers);
assertNotNull(typedValues); assertEquals(untypedValues.getSource(), typedValues.getSource()); assertEquals(untypedValues.getTimestamp(), typedValues.getTimestamp());
assertEquals(123L, (long)result.getValue("test1").getAsLong()); assertEquals("string", result.getValue("test2").getAsString()); assertEquals(123L, (long)result.getValue("test1").getAsLong()); assertEquals("string", result.getValue("test2").getAsString());
assertNotNull(Extractors.channelMapExtractor(channel("test1")));
assertEquals(new HashSet<>(), evaluationFunction.getChannelIdentifiers());
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("test")); assertFalse(result); assertFalse(clone.isToBeTriggered(null));
assertEquals(1, typedChannelMap.size()); assertEquals("a_string", typedChannelMap.get("DB13_StringChannel").getAsString());
assertEquals(5, channelIdentifiers.size()); assertTrue(channelIdentifiers.contains("1")); assertTrue(channelIdentifiers.contains("2")); assertTrue(channelIdentifiers.contains("3")); assertTrue(channelIdentifiers.contains("4")); assertTrue(channelIdentifiers.contains("5"));
assertEquals(MRecordSource.Kind.UNKNOWN, source.getKind());
assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("test")); assertFalse(clone.isToBeTriggered(null));
assertEquals(MRecordSource.Kind.FINITE, source.getKind());
assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("val"));
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().isEmpty());
assertEquals(1, AggregationUtils.divide(10, 10), delta); assertEquals(1, AggregationUtils.divide(10L, 10F), delta); assertEquals(1, AggregationUtils.divide(10F, 10D), delta); assertEquals(1, AggregationUtils.divide(10D, 10L), delta);
assertEquals(thisIsATestCall, result);
assertFalse(consumer.connection.isClosed()); assertNotNull(resultSet);
assertEquals(MRecordSource.Kind.INFINITE, source.getKind());
assertTrue(filter.filter(record0)); assertTrue(filter.filter(record1)); assertFalse(filter.filter(record2));
assertNotNull(untypedEvent.getParameter("string")); assertNotNull(untypedEvent.getParameter("double")); assertNotNull(untypedEvent.getParameter("long")); assertNotNull(untypedEvent.getParameter("date")); assertNotNull(untypedEvent.getParameter("boolean")); assertNotNull(event.getParameter("string")); assertNotNull(event.getParameter("double")); assertNotNull(event.getParameter("long")); assertNotNull(event.getParameter("date")); assertNotNull(event.getParameter("boolean"));
assertEquals(13L, event.getTimestamp());
assertEquals(current, record);
assertEquals(new HashSet<>(), strategy.getChannelIdentifiers()); assertEquals(new HashSet<>(), clone.getChannelIdentifiers());
assertFalse(filter.apply(new GenericEvent(), values1)); assertTrue(filter.apply(new GenericEvent(), values2)); assertFalse(filter.apply(new GenericEvent(), valuesNull)); assertTrue(filter.apply(null, values1)); assertFalse(filter.apply(null, values1)); assertFalse(filter.apply(null, valuesNull)); assertTrue(filter.getChannelIdentifiers().contains("val")); assertFalse(clone.apply(null, values1));
assertTrue(result); assertTrue(strategy.getChannelIdentifiers().contains("val")); assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("test"));
assertNotNull(Extractors.channelMapExtractor(map)); assertNotNull(ClonerUtil.clone(Extractors.channelMapExtractor(map)));
assertTrue(strategy.isToBeTriggered(null)); assertTrue(clone.isToBeTriggered(null));
assertNotNull(Extractors.channelMapExtractor(Arrays.asList(channel("test1"))));
assertEquals(100, AggregationUtils.multiply(10, 10), delta); assertEquals(100, AggregationUtils.multiply(10L, 10F), delta); assertEquals(100, AggregationUtils.multiply(10F, 10D), delta); assertEquals(100, AggregationUtils.multiply(10D, 10L), delta);
assertEquals(POJO, pojo);
assertEquals(1, AggregationUtils.subtract(2, 1), delta); assertEquals(1, AggregationUtils.subtract(2L, 1L), delta); assertEquals(1, AggregationUtils.subtract(2F, 1F), delta); assertEquals(1, AggregationUtils.subtract(2D, 1D), delta); assertEquals(1, AggregationUtils.subtract(2D, 1L), delta);
assertTrue(strategy.getChannelIdentifiers().contains("val")); assertTrue(result);
assertFalse(result); assertTrue(strategy.getChannelIdentifiers().contains("test")); assertFalse(clone.isToBeTriggered(null));
assertEquals(f.isChecked(), actualOutput);
assertTrue(fileResource.getFile().isFile());
assertEquals(3, pages.size()); assertEquals("page 1" + Util.LS, pages.get(0)); assertEquals("page 2" + Util.LS, pages.get(1)); assertEquals("page 3" + Util.LS, pages.get(2));
assertTrue(doc == f1.findTreeNode(new Path(targetPath))); assertNull(f1.findTreeNode(new Path(wrongPath))); assertNull(f1.findTreeNode(new Path(prefix + "does/not/exist")));
assertTrue(tempFilename.startsWith("test")); assertTrue(tempFilename.endsWith(".pdf"));
assertTrue(fileFactory.createFile(config, new Path(path)).getFile().isFile());
assertTrue(candidateNames.length == expectedOutputs.length); assertTrue(file.exists()); assertEquals(expectedOutputs[i], actualOutput);
assertTrue(file.exists()); assertTrue(file.getName().startsWith("1__"));
assertEquals(expected, actual);
assertNotNull("newItems shouldn\'t be null", event.getData("newItems")); assertNotNull("fakeItemSelected shouldn\'t be null", event.getData("fakeItemSelected")); assertSame("newProps and newItems should be the same", newProps, event.getData("newItems")); assertSame("formItem and fakeItemSelected should be the same", formItem, event.getData("itemSelected"));
assertTrue( true );
assertTrue( true );
assertTrue( true );
assertTrue( true );
assertTrue( true );
assertTrue( true );
assertThat(decoderEncoder.encode(qa[1]) > decoderEncoder.encode(qa[0]), equalTo(true));
assertThat(appEx, notNullValue()); assertThat(appEx.getExceptionClass(), is(BusinessException.class.getName())); assertThat(appEx.isRollback(), is(true)); assertThat(appEx, nullValue());
assertEquals(moduleId, info.moduleId);
assertNotNull("Couldn\'t find setter.", ret); assertEquals(setterMethod, ret);
assertTrue(classes.size() >= 3); assertTrue(sorted.size() >= 3); assertEquals(Emerald.class, sorted.get(0).get().getDeclaringClass()); assertEquals(Green.class, sorted.get(1).get().getDeclaringClass()); assertEquals(Color.class, sorted.get(2).get().getDeclaringClass());
assertTrue(configuredInvoked); assertTrue(statementInvoked);
assertEquals(bytes.length, correctAnswer.length); assertEquals(correctAnswer[i], bytes[i]);
assertTrue(fsm.accept("httpejbd")); assertTrue(fsm.accept("cxf"));
assertTrue(classes.size() >= 3); assertTrue(sorted.size() >= 3); assertEquals(Emerald.class, sorted.get(0).get()); assertEquals(Green.class, sorted.get(1).get()); assertEquals(Color.class, sorted.get(2).get());
assertNull("Setter found.", method);
assertTrue(fsm.accept("foo"));
assertSame(tempCL, clazz.getClassLoader()); assertNotSame(tempCL, clazz.getClassLoader()); assertNotSame(tempCL, clazz.getClassLoader()); assertSame(tempCL, clazz.getClassLoader());
assertEquals(id, info.moduleName);
assertNotNull("Couldn\'t find setter.", ret); assertEquals(setterMethod, ret);
assertNull("Abstract setter returned.", method);
assertFalse(configuredInvoked); assertFalse(statementInvoked);
assertTrue(fsm.accept("httpejbd"));
assertEquals("00080A7F32", hexString);
assertTrue(fsm.accept("httpejbd")); assertTrue(fsm.accept("cxf-rs"));
assertEquals(mThrowable, Util.getMostSpecificMethod(mObject, mThrowable)); assertEquals(mException, Util.getMostSpecificMethod(mException, mThrowable)); assertEquals(mException, Util.getMostSpecificMethod(mException, mObject));
assertEquals(2, classes.size()); assertTrue(classes.contains(RESTClass.class.getName())); assertTrue(classes.contains(RESTMethod.class.getName())); assertEquals(1, applications.size()); assertEquals(RESTApp.class.getName(), applications.iterator().next());
assertTrue(configuredInvoked); assertFalse(statementInvoked);
assertNotNull(dao.find(user.getId()));
assertThat(chooseBtn).isEnabled(); assertNotNull(((DirectoryChooserActivityMock) fragment.getActivity()).selectedDirectory);
assertNotNull(Hosts.getLocalHostName());
assertTrue("the config directory should exist " + configDirectory, configDirectory.exists()); assertTrue("the config directory should be a directory " + configDirectory, configDirectory.isDirectory()); assertEquals("The config directory name", ".hawtio", configDirectory.getName()); assertNotNull("Should have a parent directory", parentFile); assertEquals("config dir should be in the home directory", homeDir.getCanonicalPath(), parentFile.getCanonicalPath());
assertFalse(includeLoopback.isEmpty()); assertFalse(noLoopback.isEmpty());
assertThat(plugin.getScripts().length, is(1)); assertThat(plugin.getScripts(), arrayContaining("")); assertThat(plugin.getScripts().length, is(3)); assertThat(plugin.getScripts(), arrayContaining("a", "b", "c"));
assertTrue("localhost/9000", details1.isAllowed(allowlist)); assertTrue("localhost:8181", details2.isAllowed(allowlist)); assertTrue("www.myhost.com", details3.isAllowed(allowlist)); assertTrue("myhost1.com", details4.isAllowed(regexAllowlist)); assertTrue("myhost22.com", details5.isAllowed(regexAllowlist)); assertFalse("www.banned.com", details6.isAllowed(allowlist));
assertThat(k1, not(equalTo(k2))); assertThat(k1, equalTo(k3));
assertTrue("localhost", details1.isAllowed(allowlist)); assertTrue("www.myhost.com", details2.isAllowed(allowlist)); assertTrue("www.banned.com", details3.isAllowed(allowlist));
assertThat(json.get("string"), equalTo("text")); assertThat(json.get("number"), equalTo(2)); assertThat(json.get("boolean"), equalTo(true));
assertThat(RBACDecorator.iterateDownPids(Arrays.asList("a.b", "c", "d")).toArray(new String[4]), equalTo(new String[]{"jmx.acl.a.b.c.d", "jmx.acl.a.b.c", "jmx.acl.a.b", "jmx.acl"}));
assertEquals("forward:/actuator/hawtio/index.html", result);
assertFalse(Hosts.getAddresses().isEmpty());
assertThat(copy, not(sameInstance(original))); assertThat(copy, equalTo(original));
assertNotNull(Hosts.getLocalIp());
assertThat(RBACDecorator.nameSegments(new ObjectName("a.b:type=a,name=b")).toArray(new String[3]), equalTo(new String[]{"a.b", "a", "b"})); assertThat(RBACDecorator.nameSegments(new ObjectName("a.b:name=b,type=a")).toArray(new String[3]), equalTo(new String[]{"a.b", "a", "b"}));
assertThat(mockHolder.position).isEqualTo(2);
assertThat(returnedHolder).isNull();
assertThat(shuffle.draggableViews).hasSize(3);
assertThat(returnedHolder.position).isEqualTo(-1);
assertFalse(logEvent.isUnhandled()); assertTrue(anrEvent.isUnhandled()); assertFalse(handledEvent.isUnhandled()); assertTrue(rejectionEvent.isUnhandled()); assertTrue(strictEvent.isUnhandled()); assertTrue(unhandledEvent.isUnhandled()); assertFalse(userEvent.isUnhandled()); assertFalse(callbackEvent.isUnhandled());
assertFalse(CollectionUtils.containsNullElements(input)); assertTrue(CollectionUtils.containsNullElements(input));
assertEquals("bar", configuration.getMetadata("keyVal", "foo")); assertEquals("val1", configuration.getMetadata("mapVal", "key1")); assertEquals("val2", configuration.getMetadata("mapVal", "key2"));
assertEquals(testRuntimeException.getClass().getName(), errors.get(0).getErrorClass()); assertEquals(testRuntimeException.getMessage(), errors.get(0).getErrorMessage());
assertTrue(immutableConfig.shouldRecordBreadcrumbType(BreadcrumbType.MANUAL)); assertFalse(immutableConfig.shouldRecordBreadcrumbType(BreadcrumbType.MANUAL)); assertTrue(immutableConfig.shouldRecordBreadcrumbType(BreadcrumbType.MANUAL)); assertFalse(immutableConfig.shouldRecordBreadcrumbType(BreadcrumbType.MANUAL));
assertNotNull(sessionTracker); assertNull(sessionTracker.getCurrentSession()); assertNotNull(newSession); assertNotNull(newSession.getId()); assertEquals(date.getTime(), newSession.getStartedAt().getTime()); assertNotNull(newSession.getUser());
assertFalse(event.impl.isAnr(event)); assertTrue(event.impl.isAnr(event)); assertFalse(event.impl.isAnr(event));
assertNull(configuration.getDelivery()); assertFalse(configuration.getDelivery() instanceof DefaultDelivery); assertEquals(delivery, configuration.getDelivery());
assertTrue(CollectionUtils.containsNullElements(null));
assertEquals(123, metadata.getMetadata("custom", "id")); assertEquals("Bloggs", metadata.getMetadata("custom", "surname")); assertTrue((Boolean) metadata.getMetadata("data", "optIn"));
assertEquals("24601", configuration.getUser().getId()); assertEquals("m@rp.fr", configuration.getUser().getEmail()); assertEquals("MM", configuration.getUser().getName());
assertEquals("Busgang", err.getErrors().get(0).getErrorClass());
assertNull(err.getErrors().get(0).getErrorMessage());
assertNull(configuration.getMetadata("keyVal", "foo")); assertEquals("val1", configuration.getMetadata("mapVal", "key1")); assertNull(configuration.getMetadata("mapVal", "key2"));
assertEquals(testRuntimeException, outException);
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":\\"XXX\\",\\"baz\\":\\"XXX\\"}"));
assertThat(result, is("/a/b/c/d/XXX"));
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":null}"));
assertThat(request.getBody(), is("Hello".getBytes(UTF_8))); assertThat(request.getBodyAsString(), is("Hello"));
assertTrue((new ChunkingSpliterator("Hello", 5, 5).characteristics() & SIZED) != 0);
assertThat(unit.getHeaders(), is(anEmptyMap()));
assertThat(unit.getHeaders(), hasEntry(equalTo("Accept"), contains("text/plain")));
assertThat(result1, sameInstance(result2));
assertThat(unit.filter(contentType, "{\\"q\\":\\"boots\\"}"), is("{\\"q\\":\\"boots\\"}")); assertThat(unit.filter(contentType, "<q>boots</q>"), is("<q>boots</q>"));
assertThat(path, sameInstance(result));
assertThat(actual, is("{\\"foo\\":\\"secret\\",\\"bar\\":\\"public\\"}"));
assertThat(after, hasEntry("Set-Cookie", asList( "theme=light", "sessionToken=XXX; Path=/; Expires=Wed, 09 Jun 2021 10:18:14 GMT" )));
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":\\"public\\"}"));
assertThat(unit.getHeaders(), aMapWithSize(1)); assertThat(unit.getHeaders().get("Content-Type"), hasSize(2));
assertThat(unit.test(request), is(true));
assertThat(filtered, is(invalidBody));
assertThat(actual, is("{\\"foo\\":0,\\"bar\\":\\"public\\"}"));
assertTrue(unit.isActive());
assertThat(actual, is(original));
assertThat(filtered, not(containsString("@entur.org")));
assertThat(unit.test(request), is(false));
assertThat( unit.filter(HttpHeaders.of("Accept", "text/plain")), hasEntry("Accept", singletonList("text/plain")));
assertThat(filtered, not(hasKey("name"))); assertThat(filtered, hasEntry("age", singletonList("18")));
assertThat(filtered, is(minimisedXml));
assertThat(format, not(containsString("headers")));
assertThat(format, not(containsString("body")));
assertThat(filtered, is(invalidJson));
assertThat(filtered, is(pretty));
assertThat(unit.test(request), is(false));
assertThat(format, stringContainsInOrder( "origin=local", "type=response", "correlation=53de2640-677d-11e5-bc84-10ddb1ee7671", "duration=125", "protocol=HTTP/1.0", "status=200", "headers={", "Date=[Tue, 15 Nov 1994 08:12:31 GMT]", "}", "body=<success>true<success>" ));
assertThat(filtered, not(hasEntry("name", singletonList("Alice")))); assertThat(filtered, hasEntry("name", singletonList("Bob")));
assertThat(unit.getHeaders(), hasEntry(equalTo("Accept"), contains("text/plain")));
assertThat(result, is("/XXX/b/c/d/e"));
assertThat(format, not(containsString("headers")));
assertThat(delegate.getEntity().isChunked(), is(true));
assertThat(filtered, not(hasKey("name")));
assertThat(request.getContentType(), is("image/png")); assertThat(request.getContentType(), is("image/png")); assertThat(request.getBody(), is("<binary>".getBytes(UTF_8))); assertThat(request.getBodyAsString(), is("<binary>"));
assertThat(filtered, is(minimisedXml));
assertThat(response, instanceOf(FilteredHttpResponse.class));
assertThat(unit.isActive(), is(false));
assertThat(filtered, is(""));
assertThat(unit.test(request), is(true));
assertThat(http, is("Incoming Response: 2d51bc02-677e-11e5-8b9b-10ddb1ee7671\\n" + "Duration: 125 ms\\n" + "HTTP/1.0 201 Created\\n" + "Content-Type: application/json\\n" + "\\n" + "{\\"success\\":true}"));
assertThat(filtered, is(compacted));
assertThat(body, is(nullValue()));
assertFalse(unit.isActive());
assertThat(filtered, not(containsString("Ford")));
assertThat(unit.getPath(), is("/endpoint/XXX/action"));
assertEquals(expected, actual);
assertThat(unit.getRemote(), is("localhost"));
assertThat(result, is("/profiles/XXX/user.json"));
assertThat( unit.filter(HttpHeaders.of("Authorization", "Bearer c61a8f84-6834-11e5-a607-10ddb1ee7671", "Basic dXNlcjpwYXNzd29yZA==")), hasEntry("Authorization", Arrays.asList("XXX", "XXX")));
assertEquals(TRACE, event.getLevel()); assertEquals("bar", event.getMessage());
assertThat(actual, is("client_secret=secret"));
assertThat(filtered, not(containsString("Pena Hudson"))); assertThat(filtered.length(), is(lessThan(string.length())));
assertThat(unit.test(request), is(false));
assertThat(delegate.getEntity().getContentEncoding().getValue(), is("gzip"));
assertThat(filtered, containsString("Ford"));
assertThat(unit.test(request), is(true));
assertThat(precorrelation.getId(), is("id"));
assertThat(unit.getCharset(), is(ISO_8859_1));
assertThat(request.getContentType(), is("image/png")); assertThat(request.getContentType(), is("image/png")); assertThat(request.getBody(), is("<binary>".getBytes(UTF_8))); assertThat(request.getBodyAsString(), is("<binary>"));
assertThat(filtered, containsString("Ford"));
assertTrue((new ChunkingSpliterator("Hello", 4, 5).characteristics() & SIZED) == 0);
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":null}"));
assertThat(filtered, not(hasEntry("name", singletonList("Alice")))); assertThat(filtered, hasEntry("name", singletonList("Bob")));
assertThat(filtered, is(pretty));
assertThat(format, not(containsString("body")));
assertFalse(unit.isActive());
assertThat(unit.test(request), is(false));
assertThat(filtered, not(containsString("Ford")));
assertThat(response.getContentType(), is("image/png")); assertThat(response.getContentType(), is("image/png")); assertThat(response.getBody(), is("<binary>".getBytes(UTF_8))); assertThat(response.getBodyAsString(), is("<binary>"));
assertThat(reconstruct(request, QUERY), is("/?limit=1"));
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":\\"public\\"}"));
assertThat(actual, is(original));
assertThat(after, is(emptyMap()));
assertThat(unit.getHeaders(), hasEntry(equalTo("Authorization"), contains("XXX")));
assertThat(unit.getCharset(), is(StandardCharsets.ISO_8859_1));
assertThat(unit.test(request), is(false));
assertThat(new ChunkingSpliterator("Hello World", 5, 5).estimateSize(), is(3L));
assertThat(actual, containsString("\\"password\\": \\"XXX\\""));
assertThat(filtered, is(compacted));
assertThat(filtered, is(invalidJson));
assertThat(captor.getValue().getBodyAsString(), is(emptyString()));
assertThat(actual, hasEntry("name", Arrays.asList("<secret>", "<secret>")));
assertThat(filtered, is(invalidJson));
assertThat(unit.test(request), is(true));
assertThat(new String(unit.getBody(), unit.getCharset()), is("My secret is f4k3"));
assertThat(actual, is("{\\"password\\":\\"XXX\\",\\"bar\\":\\"public\\"}"));
assertSame(actual, headers); assertFalse(actual.isEmpty());
assertTrue(unit.isActive());
assertThat(filtered, not(containsString("Pena Hudson"))); assertThat(filtered.length(), is(lessThan(string.length())));
assertThat(filtered, is(pretty));
assertThat(actual, is("client_secret=XXX"));
assertSame(headers, actual);
assertThat(unit.filter("name=alice&access_token=bob"), is("name=alice&access_token=XXX"));
assertThat(filtered, is(compacted));
assertThat(unit.getCharset(), is(UTF_8));
assertEquals(actual, HttpHeaders.empty());
assertThat(filtered, is(pretty));
assertTrue(unit.isActive());
assertThat(request, instanceOf(FilteredHttpRequest.class));
assertThat(filtered, is(compacted));
assertThat(filtered, not(containsString("18375")));
assertThat(reconstruct(request, PATH, QUERY), is("/admin?limit=1"));
assertThat(unit.test(request), is(true));
assertThat(new ChunkingSpliterator("Hello", 5, 5).estimateSize(), is(1L));
assertThat(filtered, is(""));
assertThat(filtered, is(pretty));
assertThat(response.getContentType(), is("image/png")); assertThat(response.getContentType(), is("image/png")); assertThat(response.getBody(), is("<binary>".getBytes(UTF_8))); assertThat(response.getBodyAsString(), is("<binary>"));
assertFalse(unit.isFinished()); assertTrue(unit.isFinished());
assertThat(result, is("/profiles/XXX/my/XXX/user.json"));
assertThat(filtered, is(invalidBody));
assertThat(body, is("<content>"));
assertThat(unit.getBodyAsString(), is("My secret is f4k3"));
assertThat(filtered, is(compacted));
assertThat(actual, containsString("\\"gender\\": \\"XXX\\""));
assertThat(actual, is("{\\"foo\\":\\"secret\\"}"));
assertTrue(unit.isReady());
assertThat(unit.test(null), is(true));
assertThat(filtered, is(""));
assertThat(filtered, is("{invalid}"));
assertThat(unit.filter("application/xml", invalidBody), is(invalidBody));
assertThat(actual, is("{\\"id\\":\\"123\\",\\"meta\\":{\\"date\\":\\"XXX\\"}}"));
assertThat(new ChunkingSpliterator("", 1, 1).trySplit(), is(nullValue()));
assertThat(unit.getCharset(), is(UTF_8));
assertThat(filtered, is(prettifiedXml));
assertThat(unit.getHeaders(), is(anEmptyMap()));
assertThat(unit.getHeaders(), hasEntry(equalTo("Authorization"), contains("XXX")));
assertTrue(unit.isActive()); assertFalse(unit.isActive());
assertThat(unit.filter("application/json", ""), is(""));
assertThat(result, is("/profiles/XXX/XXX/user.json"));
assertThat(unit.getBodyAsString(), is("My secret is f4k3"));
assertThat(after, hasEntry("Set-Cookie", singletonList("")));
assertThat(unit.getHeaders(), aMapWithSize(1));
assertThat(actual, is("{\\"foo\\":\\"XXX\\",\\"bar\\":\\"public\\"}"));
assertThat(new String(unit.getBody(), unit.getCharset()), is("My secret is f4k3"));
assertTrue(unit.isActive());
assertEquals(TRACE, event.getLevel()); assertEquals("foo", event.getMessage());
assertThat(path, sameInstance(result));
assertThat( unit.filter(HttpHeaders.of("name", "Alice")), hasEntry("name", singletonList("<secret>"))); assertThat( unit.filter(HttpHeaders.of("name", "Bob")), hasEntry("name", singletonList("Bob")));
assertThat(unit.test(request.withContentType(null)), is(true));
assertThat(http, is("Outgoing Response: 3881ae92-6824-11e5-921b-10ddb1ee7671\\n" + "Duration: 100 ms\\n" + "HTTP/1.1 400 Bad Request\\n" + "Content-Type: application/json"));
assertThat(result, is("/profiles/XXX/email/XXX/user/extra"));
assertThat(unit.test(request), is(false));
assertThat(http, is("Incoming Response: 2d51bc02-677e-11e5-8b9b-10ddb1ee7671\\n" + "Duration: 125 ms\\n" + "HTTP/1.0 1000\\n" + "Content-Type: application/json\\n" + "\\n" + "{\\"success\\":true}"));
assertThat(captor.getValue().getBodyAsString(), is(emptyString()));
assertThat(response.getBody(), is("Hello".getBytes(UTF_8))); assertThat(response.getBodyAsString(), is("Hello"));
assertFalse(unit.isActive());
assertThat(result, sameInstance(path));
assertThat(result, is("XXX/b/c/d/e"));
assertThat(http, is("Incoming Response: 2d51bc02-677e-11e5-8b9b-10ddb1ee7671\\n" + "Duration: 125 ms\\n" + "HTTP/1.0 201 Created\\n" + "Content-Type: application/json\\n" + "X-Empty-Header: \\n" + "\\n" + "{\\"success\\":true}"));
assertEquals((Integer)count, i); assertEquals(16, count); assertEquals((Integer)count, i); assertEquals(16, count); assertEquals((Integer)2, done.receive());
assertThat(interpolatedValue).isWithin(0.000001).of(0.876125); assertThat(i1).isWithin(0.000001).of(2.2);
assertThat(i1).isWithin(0.000001).of(2.2); assertThat(i2).isWithin(0.000001).of(2.2);
assertEquals(expectedPlaintextString, plaintextString);
assertEquals(version, cryptor.getVersionNumber());
assertEquals(2, new AES256v2Cryptor().getVersionNumber());
assertEquals(classList.size(), cryptors.size()); assertTrue(classList.contains(cryptor.getClass().getCanonicalName()));
assertNotNull(schema);
assertNotNull(info); assertEquals("sbt-initial", info.getName()); assertEquals("jar", info.getPackaging()); assertEquals(SbtInfoReader.DEFAULT_VERSION, info.getVersion()); assertEquals(expectedOutputFile, info.getOutputFile().toAbsolutePath().toString());
assertNotNull(info); assertEquals("sbt-versioned", info.getName()); assertEquals("jar", info.getPackaging()); assertEquals("1.0.0", info.getVersion()); assertEquals(expectedOutputFile, info.getOutputFile().toAbsolutePath().toString());
assertNotNull(info); assertEquals("bazel-versioned", info.getName()); assertEquals("0.0.1", info.getVersion()); assertEquals("jar", info.getPackaging());
assertTrue(generator.canHandle(EditableServiceCatalogConfig.class));
assertEquals("KEY1", envVars.get(0).get("name")); assertEquals("VALUE1", envVars.get(0).get("value")); assertEquals("KEY2", envVars.get(1).get("name")); assertEquals("VALUE2", envVars.get(1).get("value")); assertEquals(10, readinesProbe.get("periodSeconds"));
assertNotNull(info); assertEquals("bazel-initial", info.getName()); assertEquals("jar", info.getPackaging()); assertNull(info.getVersion());
assertTrue(generator.canHandle(EditableComponentConfig.class));
assertNotNull(combined); assertEquals("Jim", combined.getName()); assertEquals("Some place", combined.getAddress());
assertEquals("6.14.5", result);
assertTrue(generator.canHandle(ComponentConfig.class));
assertFalse(generator.canHandle(BaseConfig.class));
assertNotNull(project); assertNotNull(info); assertEquals("gradle", info.getName()); assertEquals("jar", info.getPackaging()); assertEquals("latest", info.getVersion());
assertNull(Strings.kebabToCamelCase(null)); assertEquals("", Strings.kebabToCamelCase("")); assertEquals("my", Strings.kebabToCamelCase("my")); assertEquals("myString", Strings.kebabToCamelCase("my-string")); assertEquals("myOtherString", Strings.kebabToCamelCase("my-other-string"));
assertTrue(generator.canHandle(ServiceCatalogConfig.class));
assertEquals(tuple, decoded);
assertNotNull(new IdMaskSecurityException("test message", reason).getMessage());
assertEquals(reason, new IdMaskSecurityException("test", reason).getReason());
assertEquals(ref, decoded);
assertEquals(uuid, decoded);
assertEquals(id, decoded);
assertArrayEquals(id, decoded);
assertTrue("Number of message groups should not exceed cache size " + this.messageGroupCacheSize, actual <= this.messageGroupCacheSize);
assertTrue("Message group id should be between 0 and cache size " + this.messageGroupCacheSize, actual >= 0 && actual < this.messageGroupCacheSize);
assertTrue("Message group id should be the same for same device", actual == 1);
assertEquals(fe, e);
assertEquals(new Timestamp(scheduledRetryTime.getTime()), scheduledTask.getscheduledTime()); assertTrue(scheduledTask.getErrorLog().contains(exceptionMessage));
assertEquals(message.getValue().getOrganisationIdentification(), ORGANISATION_IDENTIFICATION); assertEquals(message.getValue().getDeviceIdentification(), DEVICE_IDENTIFICATION); assertEquals(actionList.size(), this.actionRequestMockList.size()); assertEquals(this.actionRequestMockList.get(i), actionList.get(i));
assertEquals(fe, e);
assertEquals(input, new String(result));
assertThat(e.getMessage(), CoreMatchers.containsString("Java Cryptography Extension"));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_EMPTY));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_NAME_EXIST));
assertThat(filePickerProxy.getFilePath(intentMock), is(FILE_PATH));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertTrue(filePickerProxy.isPickFileRequested(0, AssetType.PICTURE)); assertTrue(filePickerProxy.isPickFileRequested(1, AssetType.SOUND));
assertTrue(filePickerProxy.isFilePicked(FilePickerActivity.RESULT_OK));
assertThat(safeCopyName, matchesPattern(jpgFileSafeCopyNamePattern));
assertThat(safeCopyName, matchesPattern(jpgFileSafeCopyNamePattern));
assertThat(new File(pathToInternalStorage, safeCopyName).exists(), is(true));
assertThat(safeCopyName, is(not(equalTo(secondSafeCopyName))));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertTrue(pattern.matcher("test.mp3").matches());
assertThat(safeCopyName, matchesPattern(jpgFileSafeCopyNamePattern));
assertTrue(pattern.matcher("test.png").matches());
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertThat(safeCopyName, matchesPattern(pngFileSafeCopyNamePattern));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_NAME_EXIST));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_ONLY_LETTERS));
assertThat(new File(pathToInternalStorage, safeCopyName).exists(), is(true));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_EMPTY));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_NAME_EXIST));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_ONLY_LETTERS));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_ONLY_NUMBERS));
assertThat(new File(pathToInternalStorage, safeCopyName).exists(), is(true));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertFalse(filePickerProxy.isFilePicked(FilePickerActivity.RESULT_CANCELED));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_EMPTY));
assertTrue(pattern.matcher("test.PNG").matches());
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_NAME_EXIST));
assertFalse(pattern.matcher(".mp3").matches());
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_ONLY_LETTERS));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_ONLY_LETTERS));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.VALID));
assertThat(validationResult.getValidationStatus(), is(ValidationStatus.INVALID)); assertThat(validationResult.getValidationInfo(), is(ERROR_MESSAGE_EMPTY));
assertThat(query, is(notNullValue())); assertThat(result, is("{\\"$or\\": [{\\"owner\\": \\"alice\\", \\"name\\": \\"fluffy\\"}, {\\"veterinarian\\": \\"alice\\", \\"clinic\\": \\"SOMA\\", \\"name\\": \\"fluffy\\"}]}"));
assertThat(result, is(nullValue()));
assertThat(resultInString, is("{\\"owner\\": {\\"$lt\\": 3}}"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result.size(), is(2)); assertThat(result.get(0).getName(), is("asol"));
assertThat(target.getExecutableSqlStatements(), is("SELECT name, address FROM employees WHERE (employees.name = \'Joffer\' AND employees.address = \'Stockholm\');"));
assertThat(result, is(notNullValue())); assertThat(result, is("SELECT * FROM pets WHERE (pets.owner = \'alice\' AND pets.name = \'fluffy\') OR (pets.veterinarian = \'alice\' AND pets.clinic = \'SOMA\' AND pets.name = \'fluffy\');"));
assertThat(result, is("(pets.owner = \'alice\' AND pets.name = \'fluffy\')"));
assertThat(resultInString, is("{\\"owner\\": {\\"$gte\\": 4}}"));
assertThat(result.size(), is(1));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getSize(), is(1));
assertThat(resultInString, is("{\\"owner\\": {\\"$gt\\": {\\"$numberLong\\": \\"4\\"}}}"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getStatusCodeValue(), is(400));
assertThat(result, is(notNullValue())); assertThat(result.getStatusCodeValue(), is(400));
assertThat(result, is("SELECT * FROM pets WHERE (pets.owner = \'alice\' AND pets.name = \'fluffy\') OR (pets.veterinarian = \'alice\' AND pets.clinic = \'SOMA\' AND pets.name = \'fluffy\');"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is("(pets.owner = \'alice\' AND pets.name = \'fluffy\')"));
assertThat(resultInString, is("{\\"owner\\": \\"alice\\", \\"name\\": \\"fluffy\\"}"));
assertThat(target.getExecutableSqlStatements(), is("SELECT * FROM employees WHERE (employees.name = \'Joffer\' AND employees.address = \'Stockholm\');"));
assertThat(result, is(notNullValue()));
assertThat(result, is("name, address"));
assertThat(object instanceof OpaMongoRepositoryFactory, is(true));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result.size(), is(1));
assertThat(resultInString, is("{\\"owner\\": {\\"$lte\\": 5.14}}"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue())); assertThat(resultInString, is("{\\"$or\\": [{\\"owner\\": \\"alice\\", \\"name\\": \\"fluffy\\"}, {\\"veterinarian\\": \\"alice\\", \\"clinic\\": \\"SOMA\\", \\"name\\": \\"fluffy\\"}]}"));
assertThat(all, is(notNullValue())); assertThat(all.getSize(), is(10));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result.size(), is(2)); assertThat(result.get(0).getName(), is("browny"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getStatusCodeValue(), is(500));
assertThat(result, is(notNullValue()));
assertThat(SqlUtil.getTableName(opaUnknownPropertyValue), is("pets"));
assertThat(result, is(notNullValue()));
assertThat(resultInString, is("{\\"owner\\": \\"alice\\"}"));
assertThat(result, is("SELECT * FROM pets WHERE (pets.owner = \'alice\' AND pets.name = \'fluffy\') OR (pets.veterinarian = \'alice\' AND pets.clinic = \'SOMA\' AND pets.name = \'fluffy\');"));
assertThat(result, is(notNullValue())); assertThat(result.getStatusCodeValue(), is(500));
assertThat(target.getOperatorFromValue(EQ), is("=")); assertThat(target.getOperatorFromValue(LT), is("<")); assertThat(target.getOperatorFromValue(LTE), is("<=")); assertThat(target.getOperatorFromValue(GT), is(">")); assertThat(target.getOperatorFromValue(GTE), is(">="));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getStatusCodeValue(), is(500));
assertThat(result, is(notNullValue()));
assertEquals(expected, result);
assertEquals(expectedKB, actualKB);
assertEquals(LocalTime.of(7, 9, 7, 70_500_000), time); assertEquals(LocalTime.of(10, 0), time); assertEquals(LocalTime.of(10, 10), time); assertEquals(null, time); assertEquals(LocalTime.of(7, 9, 7, 70_500_000), time);
assertEquals("", name); assertEquals("", name); assertEquals("Delaney, William M., Dr, MD", name);
assertThat(s1.getType()).isEqualTo(SeriesGroup.Type.NONE); assertThat(s2.getType()).isEqualTo(SeriesGroup.Type.DATE); assertThat(s3.getType()).isEqualTo(SeriesGroup.Type.NAME);
assertEquals("RECTANGULAR\\\\CIRCULAR\\\\POLYGONAL", DicomMediaUtils.getStringFromDicomElement(attributes, Tag.ShutterShape)); assertEquals(null, DicomMediaUtils.getStringFromDicomElement(attributes, Tag.ShutterPresentationValue));
assertThat(global.getTagEntrySet()).hasSize(8);
assertThat(s1.toString()).isEqualTo("Other"); assertThat(s2.toString()).isEqualTo(LocalUtil.getDateTimeFormatter().format(today)); assertThat(s3.toString()).isEqualTo("test serie 3");
assertEquals(LocalDate.of(1993, 8, 22), date1); assertEquals(LocalDate.of(1993, 8, 22), date1);
assertThat(global).isNull(); assertThat(global).isNotNull();
assertThat(new TagW(ID_1, KEYWORD_1, TagType.STRING).hashCode()).isEqualTo(-707519243); assertThat(new TagW(ID_1, null, TagType.STRING).hashCode()).isEqualTo(4774);
assertThat(global.containTagKey(TagD.get(Tag.StudyInstanceUID))).isTrue(); assertThat(global.getTagValue(TagD.get(Tag.StudyInstanceUID))).isNotNull();
assertThat(t1.equals(t1)).isTrue(); assertThat(t1.equals(null)).isFalse(); assertThat(t1.equals(KEYWORD_1)).isFalse(); assertThat(t1.equals(t2)).isFalse(); assertThat(t1.equals(t2)).isFalse(); assertThat(t1.equals(t2)).isFalse(); assertThat(t1.equals(t2)).isTrue(); assertThat(t1.equals(t2)).isTrue();
assertArrayEquals(STRING_ARRAY, DicomMediaUtils.getStringArrayFromDicomElement(attributes, Tag.ShutterShape)); assertArrayEquals(null, DicomMediaUtils.getStringArrayFromDicomElement(attributes, Tag.ShutterPresentationValue));
assertEquals("", sex); assertEquals("", sex); assertEquals(Messages.getString("TagW.female"), sex); assertEquals(Messages.getString("TagW.Male"), sex); assertEquals(Messages.getString("TagW.Male"), sex); assertEquals(Messages.getString("TagW.other"), sex); assertEquals(Messages.getString("TagW.other"), sex);
assertThat(testee.node).isEqualTo("foo"); assertThat(testee.port).isEqualTo(42); assertThat(testee.resource).isEqualTo("bar");
assertThat(valid, is(false));
assertThat(valid, is(false));
assertThat(testee.node).isEqualTo("foo"); assertThat(testee.port).isEqualTo(-1); assertThat(testee.resource).isEqualTo("");
assertThat(loadedFeatureState.isPresent(), is(true)); assertThat(loadedFeatureState.get().getFeature(), is(TestFeatures.TEST_FEATURE_1)); assertThat(loadedFeatureState.get().getStrategyId(), is("someStrategy")); assertThat(loadedFeatureState.get().isEnabled(), is(true)); assertThat(loadedFeatureState.get().getParameter("someKey1"), is("someValue1")); assertThat(loadedFeatureState.get().getParameter("someKey2"), is("someValue2"));
assertThat(applicationStatus.status, is(OK));
assertThat(features, is(notNullValue())); assertThat(features.isEmpty(), is(true));
assertThat(json.cluster.getColor(), is("BLU")); assertThat(json.cluster.getColorState(), is("active"));
assertThat(features.get("TEST_FEATURE"), is(new FeatureToggleRepresentation("a test feature toggle", false, null)));
assertThat(statusDetail.getStatus(), is(OK));
assertThat(gracefulShutdownHealthIndicator.health(), is(up().build()));
assertThat(indicator, is(instanceOf(CompositeStatusDetailIndicator.class)));
assertThat(jobMutexGroups.getMutexGroups(), hasSize(2));
assertThat(bean.isRunning(), is(false));
assertThat(statusDetail.getStatus(), is(ERROR)); assertThat(statusDetail.getMessage(), containsString("Exception during database check"));
assertThat(credentials.isPresent(), is(false));
assertThat(repo.findAll(), hasSize(1)); assertThat(repo.findAll(), contains(bar));
assertThat(deserialized, is(expectedDateTime));
assertThat(statusDetail.getStatus(), is(ERROR)); assertThat(statusDetail.getMessage(), containsString("Mongo database unreachable or ping command failed."));
assertThat(statusDetail.getStatus(), is(Status.OK));
assertThat(jobMeta.getJobType(), is("someJobType")); assertThat(jobMeta.isDisabled(), is(false)); assertThat(jobMeta.getDisabledComment(), is("")); assertThat(jobMeta.isRunning(), is(false)); assertThat(jobMeta.getAll(), is(Collections.emptyMap()));
assertThat(valid, is(false));
assertThat(result, is(false));
assertThat(statusDetail.getStatus(), is(OK)); assertThat(statusDetail.getName(), is("Jobs")); assertThat(statusDetail.getMessage(), is("No job definitions configured in application."));
assertThat(testee.node).isEqualTo("foo"); assertThat(testee.port).isEqualTo(42); assertThat(testee.resource).isEqualTo("bar");
assertThat(json.application.status, is(WARNING)); assertThat(someDetail.get("status"), is("OK")); assertThat(someDetail.get("message"), is("perfect")); assertThat(someDetail.get("status"), is("OK")); assertThat(someOtherDetail.get("status"), is("WARNING")); assertThat(someOtherDetail.get("message"), is("detailed warning")); assertThat(someOtherDetail.get("count"), is("1000"));
assertThat(jobUri.isPresent(), is(false));
assertThat(errorHalRepresentation.getErrors().isEmpty(), is(true)); assertThat(errorHalRepresentation.getErrorMessage(), is(someErrorMessage)); assertThat(errorHalRepresentation.getLinks().getLinkBy("profile").isPresent(), is(true)); assertThat(errorHalRepresentation.getLinks().getLinkBy("profile").get().getHref(), is(someErrorProfile));
assertFalse(unknwonFeature.isPresent());
assertThat(allJobIds, hasSize(3)); assertThat(allJobIds, containsInAnyOrder("jobEins", "jobZwei", "jobVier"));
assertThat(credentials.isPresent(), is(false));
assertThat(valid, is(true));
assertThat(credentials.isPresent(), is(false));
assertThat(value.toEpochMilli(), is(42L));
assertThat(jobs, is(asList(representationOf(firstJob, null, false, "", ""))));
assertThat(foundObjects, hasSize(3)); assertThat(foundObjects.get(0).value, is("testObject03")); assertThat(foundObjects.get(1).value, is("testObject04")); assertThat(foundObjects.get(2).value, is("testObject05"));
assertThat(statusDetail.getName(), is("test"));
assertThat(jobInfos, hasSize(2)); assertThat(jobInfos.get(0), is(job1.copy().setMessages(emptyList()).build())); assertThat(jobInfos.get(1), is(job2.copy().setMessages(emptyList()).build()));
assertThat(request.getRoles()).contains("foo");
assertThat(valid, is(false));
assertThat(someRestfulService().hashCode()).isEqualTo(someRestfulService().hashCode());
assertThat(bean.isRunning(), is(false));
assertThat(foundObjects, hasSize(6)); assertThat(foundObjects.get(0).value, is("testObject01")); assertThat(foundObjects.get(1).value, is("testObject02")); assertThat(foundObjects.get(2).value, is("testObject03")); assertThat(foundObjects.get(3).value, is("testObject04")); assertThat(foundObjects.get(4).value, is("testObject05")); assertThat(foundObjects.get(5).value, is("testObject06"));
assertThat(result, is(true));
assertThat(group.getJobTypes(), contains("FullImport", "DeltaImport"));
assertThat(json.cluster, is(nullValue()));
assertThat(value, is(42));
assertThat(someMongoDb().hashCode()).isEqualTo(someMongoDb().hashCode());
assertThat(loadedFeatureState.getFeature(), is(TestFeatures.TEST_FEATURE_1)); assertThat(loadedFeatureState.getStrategyId(), is("someStrategy")); assertThat(loadedFeatureState.isEnabled(), is(true)); assertThat(loadedFeatureState.getParameter("someKey1"), is("someValue1")); assertThat(loadedFeatureState.getParameter("someKey2"), is("someValue2"));
assertThat(jobInfo.getMessages().size(), is(2));
assertThat(valid, is(true));
assertThat(jobInfos, contains(foo));
assertTrue(shouldInvokeFilterLogic);
assertThat(statusDetail.getStatus(), is(ERROR)); assertThat(statusDetail.getMessage(), containsString("Mongo database check ran into timeout"));
assertThat(jobMetaService.runningJobs(), containsInAnyOrder( new RunningJob("someId", "someType"), new RunningJob("someOtherId", "someOtherType") ));
assertThat(credentials.isPresent(), is(false));
assertThat(deserialized, is(errorHalRepresentation));
assertThat(statusDetail.getName(), is("foo")); assertThat(statusDetail.getStatus(), is(OK)); assertThat(statusDetail.getMessage(), is("message"));
assertThat(foundObjects, hasSize(3)); assertThat(foundObjects.get(0).value, is("testObject03")); assertThat(foundObjects.get(1).value, is("testObject04")); assertThat(foundObjects.get(2).value, is("testObject05"));
assertThat(valid, is(false));
assertThat(calculators, hasEntry("some-job-type", "foo"));
assertThat(applicationStatus.status, is(WARNING));
assertThat(userDn).isEqualTo("someRdnIdentifier=user,someBaseDn");
assertThat(repository.findOne("some-nonexisting-job-id"), isAbsent());
assertThat(foundObjects, hasSize(6)); assertThat(foundObjects.get(0).value, is("testObject01")); assertThat(foundObjects.get(1).value, is("testObject02")); assertThat(foundObjects.get(2).value, is("testObject03")); assertThat(foundObjects.get(3).value, is("testObject04")); assertThat(foundObjects.get(4).value, is("testObject05")); assertThat(foundObjects.get(5).value, is("testObject06"));
assertThat(testee.getJobType(), is("someJob"));
assertThat(valid, is(false));
assertThat(bean.isRunning(), is(false));
assertThat(json.application.name, is("app-name")); assertThat(json.application.title, is("Some Title")); assertThat(json.application.status, is(OK)); assertThat(json.application.statusDetails.size(), is(0));
assertThat(jobId.isPresent(), is(true)); assertThat(jobId.get(), not(isEmptyOrNullString()));
assertThat(authenticated).isEqualTo(false);
assertThat(credentials.isPresent(), is(false));
assertThat(valid, is(false));
assertThat(request.isUserInRole("foo")).isEqualTo(true); assertThat(request.isUserInRole("foobar")).isEqualTo(false);
assertFalse(shouldInvokeFilterLogic);
assertThat(result, is(true));
assertThat(authenticated).isEqualTo(true);
assertThat(credentials.isPresent(), is(false));
assertThat(bean.isRunning(), is(false));
assertThat(valid, is(true));
assertThat(testee.node).isEqualTo("foo"); assertThat(testee.port).isEqualTo(-1); assertThat(testee.resource).isEqualTo("bar");
assertThat(testee.get(0).node).isEqualTo("foo"); assertThat(testee.get(0).port).isEqualTo(42); assertThat(testee.get(0).resource).isEqualTo("bar"); assertThat(testee.get(1).node).isEqualTo("foobar"); assertThat(testee.get(1).port).isEqualTo(-1); assertThat(testee.get(1).resource).isEqualTo("");
assertThat(applicationStatus.status, is(ERROR));
assertThat(job, is(asList(representationOf(firstJob, null, false, "", ""), representationOf(secondJob, null, false, "", ""), representationOf(thirdJob, null, false, "", ""))));
assertThat(json.application.status, is(WARNING)); assertThat(someDetail.get("status"), is("WARNING")); assertThat(someDetail.get("message"), is("detailed warning")); assertThat(someDetail.get("link"), is(nullValue()));
assertThat(valid, is(false));
assertThat(testee.node).isEqualTo("foo"); assertThat(testee.port).isEqualTo(42); assertThat(testee.resource).isEqualTo("bar:foobar/0815");
assertThat(valid, is(true));
assertThat(job, is(asList(representationOf(firstJob, null, false, "", ""), representationOf(secondJob, null, false, "", ""))));
assertThat(updated, is(UpdateIfMatchResult.NOT_FOUND));
assertThat(job, is(asList(representationOf(secondJob, null, false, "", ""), representationOf(fourthJob, null, false, "", ""))));
assertThat(valid, is(true));
assertThat(FeatureManagerSupport.getFeatureFromName("TEST_FEATURE").get(), is(TestFeatures.TEST_FEATURE));
assertThat(value, is("42"));
assertThat(valid, is(false));
assertThat(value, is(42L));
assertThat(bean.isRunning(), is(false));
assertThat(valid, is(true));
assertThat(previousValue, is("someOldValue"));
assertEquals("Properties values should be the same!", props.getProperty(TEST_PROPERTY_PLUS_NOT_SET_PROPERTY), TEST_VALUE + _01_APR_2011);
assertEquals(true, ComparisonUtils.compare(nullDate, dateOne).isDifferent()); assertEquals(true, ComparisonUtils.compare(dateOne, nullDate).isDifferent()); assertEquals(false, ComparisonUtils.compare(nullDate, nullDate).isDifferent());
assertThat(isIndexOfLastArrayElement(array, lastElementIndex), is(true));
assertNull(props.getProperty("UnsetProperty"));
assertThat(csvLogger.toString(), is(expectedToString));
assertEquals(true, ComparisonUtils.compare(dateOne, dateTwo).isDifferent()); assertEquals(false, ComparisonUtils.compare(dateOne, dateOne).isDifferent());
assertThat(bufferedWriter, is(not(nullValue())));
assertEquals(true, ComparisonUtils.compare(nullString, "Sausage").isDifferent()); assertEquals(true, ComparisonUtils.compare("Sausage", nullString).isDifferent()); assertEquals(false, ComparisonUtils.compare(nullString, nullString).isDifferent());
assertEquals(true, ComparisonUtils.compare(dateOne, oneByte).isDifferent());
assertThat(isIndexOfLastArrayElement(array, notLastElementIndex), is(false));
assertThat(actualToString, is(expectedToString));
assertEquals(true, ComparisonUtils.compare("Sausage", "Bacon").isDifferent()); assertEquals(true, ComparisonUtils.compare("Sausage", "sausage").isDifferent()); assertEquals(false, ComparisonUtils.compare("Sausage", "sausage", true).isDifferent()); assertEquals(false, ComparisonUtils.compare("Sausage", "Sausage").isDifferent());
assertEquals("Properties values should be the same!", props.getProperty(TEST_PROPERTY_PLUS_DATE_PROPERTY), TEST_VALUE + _01_APR_2011);
assertEquals("Properties values should be the same!", props.getProperty(TEST_PROPERTY), TEST_VALUE);
assertEquals("Properties values should be the same!", props.getProperty(TEST_PROPERTY_PLUS_DATE_PROPERTY_AND_OTHER_PROPERTY), TEST_VALUE + _01_APR_2011 + TEST_VALUE + FILE_NAME);
assertTrue("output does not match", output.contains("funky") && output.contains("groovy"));
assertTrue("output does not match", output.size() == 1 && output.get(0).contains("groovy"));
assertEquals(0, list.size()); assertTrue(list.isEmpty());
assertEquals(3, list.size()); assertFalse(list.isEmpty());
assertEquals(a, ColorUtils.getAlpha(argb)); assertEquals(r, ColorUtils.getRed(argb)); assertEquals(g, ColorUtils.getGreen(argb)); assertEquals(b, ColorUtils.getBlue(argb));
assertEquals(0, list.size()); assertTrue(list.isEmpty()); assertEquals(1, list.size()); assertFalse(list.isEmpty()); assertEquals(2, list.size()); assertFalse(list.isEmpty()); assertEquals(3, list.size()); assertFalse(list.isEmpty());
assertEquals(1, list.size()); assertFalse(list.isEmpty());
assertEquals(2, list.size()); assertFalse(list.isEmpty()); assertEquals(1, list.size()); assertFalse(list.isEmpty()); assertEquals(1, list.size()); assertFalse(list.isEmpty()); assertEquals(0, list.size()); assertTrue(list.isEmpty());
assertEquals(0.0, v.getX(), 0.00001); assertEquals(0.0, v.getY(), 0.00001);
assertEquals(niveau.reqCorps().size(), 3); assertEquals(niveau.reqCorps().size(), 4); assertEquals(niveau.reqCorps().size(), 4);
assertEquals(0, c2.getTranslation().getX(), 0.00001); assertEquals(0, c2.getTranslation().getY(), 0.00001);
assertEquals(0, v1.getX(), 0.0001); assertEquals(0, v1.getY(), 0.0001); assertEquals(-5, v2.getX(), 0.0001); assertEquals(5, v2.getY(), 0.0001);
assertEquals(posRayon, obj.reqPosRayon());
assertEquals(0, v1.getNorme(), 0.0001); assertEquals(7.0711, v2.getNorme(), 0.0001);
assertEquals(0.0, v1.reqForceExt().getNorme(), 0.0001); assertEquals(0.0, v2.reqForceExt().getNorme(), 0.0001); assertEquals(0.0, v3.reqForceExt().getNorme(), 0.0001); assertEquals(0.0, v4.reqForceExt().getNorme(), 0.0001); assertEquals(0.0, v5.reqForceExt().getNorme(), 0.0001);
assertEquals(2, v1.getX(), 0.0001); assertEquals(-2, v2.getX(), 0.0001);
assertEquals(0, v1.getY(), 0.0001); assertEquals(5, v2.getY(), 0.0001);
assertFalse(v1.estStatique()); assertFalse(v2.estStatique()); assertFalse(v3.estStatique()); assertFalse(v4.estStatique()); assertFalse(v5.estStatique()); assertFalse(v6.estStatique()); assertTrue(v1.estStatique());
assertEquals(1.0, c1.getFacteur(), 0.0001); assertEquals(2.0, c2.getFacteur(), 0.0001);
assertEquals(0, p1.reqRayon(), d); assertEquals(Planete.RAYON_DEFAUT, p2.reqRayon(), d); assertEquals(100, p4.reqRayon(), d); assertEquals(30, p3.reqRayon(), d); assertEquals(0, p5.reqRayon(), d); assertEquals(100, p6.reqRayon(), d);
assertEquals(moteur1.getTailleEcranX() == 600, true);
assertEquals(100.0, v1.reqCarburantRestant(), 0.0001); assertEquals(0.0, v2.reqCarburantRestant(), 0.0001); assertEquals(100.0, v3.reqCarburantRestant(), 0.0001); assertEquals(0.0, v4.reqCarburantRestant(), 0.0001);
assertTrue(v1.reqPuissance() == v1.reqPuissance()); assertTrue(v2.reqPuissance() == v2.reqPuissance()); assertTrue(v3.reqPuissance() == v3.reqPuissance()); assertTrue(v4.reqPuissance() == v4.reqPuissance());
assertEquals(rayon == obj.reqRayon(), true);
assertEquals(50, c2.getDeplacement().getX(), 0.00001); assertEquals(50, c2.getDeplacement().getY(), 0.00001); assertEquals(0, c1.getDeplacement().getX(), 0.00001); assertEquals(0, c1.getDeplacement().getY(), 0.00001);
assertEquals(-5, resultat.getX(), 0.0001); assertEquals(-5, resultat.getY(), 0.0001);
assertTrue(oS1.estStatique());
assertEquals(niveau.reqTitreNiveau(), titreNiveau);
assertEquals(0, resultat.getX(), 0.0001); assertEquals(0, resultat.getY(), 0.0001); assertEquals(25, resultat.getX(), 0.0001); assertEquals(25, resultat.getY(), 0.0001);
assertEquals(moteur1.getTailleEcranX() == 600, true); assertEquals(moteur1.getTailleEcranX() == 150, true); assertEquals(moteur1.getTailleEcranX() == 150, true);
assertEquals(niveau.reqPointDepart(), pointDepart);
assertTrue(oS1.reqPositionY() == 0); assertTrue(oS2.reqPositionY() == 0); assertTrue(oS3.reqPositionY() == 40); assertTrue(oS4.reqPositionY() == 40); assertTrue(oS5.reqPositionY() == 0); assertTrue(oS6.reqPositionY() == 300);
assertEquals(vaisseau == obj.reqVaisseau(), true);
assertEquals(0, t1.reqRayon(), d); assertEquals(Tete.RAYON_DEFAUT, t2.reqRayon(), d); assertEquals(100, t4.reqRayon(), d); assertEquals(30, t3.reqRayon(), d);
assertEquals(niveau.reqVitesseDepart() == vitesseDepart, true);
assertEquals(0, v.getX(), 0.00001); assertEquals(0, v.getY(), 0.00001); assertEquals(0.0, v.getX(), 0.00001); assertEquals(0.0, v.getY(), 0.00001);
assertEquals(v1.reqVitesse().getNorme() == 10, true); assertEquals(v1.reqVitesse().getNorme() == 0, true);
assertTrue(oS1.reqPositionYProperty().get() == 0); assertTrue(oS2.reqPositionYProperty().get() == 0); assertTrue(oS3.reqPositionYProperty().get() == 40); assertTrue(oS4.reqPositionYProperty().get() == 40); assertTrue(oS5.reqPositionYProperty().get() == 0); assertTrue(oS6.reqPositionYProperty().get() == 300);
assertEquals(t1.getTexture().name(), Tete.Texture.XEHOS.name()); assertEquals(t2.getTexture().name(), Tete.TEXTURE_DEFAUT.name());
assertEquals(niveau.reqCorps(), corps);
assertEquals(2, v1.getY(), 0.0001); assertEquals(-2, v2.getY(), 0.0001);
assertEquals(100.0, v1.reqCarburantMax(), 0.0001); assertEquals(20.0, v2.reqCarburantMax(), 0.0001); assertEquals(100.0, v3.reqCarburantMax(), 0.0001); assertEquals(20.0, v4.reqCarburantMax(), 0.0001);
assertEquals(0, p1.reqForceExt().getNorme(), d);
assertEquals(1.0, v1.reqDirection().getNorme(), 0.0001); assertEquals(1.0, v2.reqDirection().getNorme(), 0.0001); assertEquals(1.0, v3.reqDirection().getNorme(), 0.0001); assertEquals(1.0, v4.reqDirection().getNorme(), 0.0001);
assertEquals(moteur1.getTailleEcranY() == 600, true); assertEquals(moteur1.getTailleEcranY() == 150, true); assertEquals(moteur1.getTailleEcranY() == 150, true);
assertEquals(0, p1.reqRayonAtmosphere(), d);
assertEquals(moteur1.getTailleEcranY() == 600, true);
assertEquals(2.0, c1.getFacteur(), 0.0001); assertEquals(2.0, c1.getFacteur(), 0.0001);
assertEquals(100.0, v1.reqCarburantDepart(), 0.0001); assertEquals(0.0, v2.reqCarburantDepart(), 0.0001); assertEquals(100.0, v3.reqCarburantDepart(), 0.0001); assertEquals(0.0, v4.reqCarburantDepart(), 0.0001);
assertTrue(oS1.reqPositionX() == 0); assertTrue(oS2.reqPositionX() == 0); assertTrue(oS3.reqPositionX() == 50); assertTrue(oS4.reqPositionX() == 50); assertTrue(oS5.reqPositionX() == 0); assertTrue(oS6.reqPositionX() == 300);
assertEquals(0, t1.reqForceExt().getNorme(), d);
assertTrue(oS1.reqPositionXProperty().get() == 0); assertTrue(oS2.reqPositionXProperty().get() == 0); assertTrue(oS3.reqPositionXProperty().get() == 50); assertTrue(oS4.reqPositionXProperty().get() == 50); assertTrue(oS5.reqPositionXProperty().get() == 0); assertTrue(oS6.reqPositionXProperty().get() == 300);
assertEquals(100.0, v1.reqCarburantRestant(), 0.0001); assertEquals(1.0, v1.reqSante(), 0.0001); assertEquals(0.0, v1.reqPosition().getX(), 0.0001); assertEquals(0.0, v1.reqPosition().getY(), 0.0001); assertTrue(v1.reqVitesse().getNorme() == Math.sqrt(2));
assertEquals(20.0, v1.reqRayon(), 0.0001); assertEquals(20.0, v2.reqRayon(), 0.0001); assertEquals(20.0, v3.reqRayon(), 0.0001); assertEquals(20.0, v4.reqRayon(), 0.0001); assertEquals(20.0, v5.reqRayon(), 0.0001);
assertEquals(niveau.reqDescriptionNiveau(), descriptionNiveau);
assertEquals(0, v1.getX(), 0.0001); assertEquals(5, v2.getX(), 0.0001);
assertEquals(1.0, v1.reqSante(), 0.0001); assertEquals(1.0, v2.reqSante(), 0.0001); assertEquals(1.0, v3.reqSante(), 0.0001); assertEquals(1.0, v4.reqSante(), 0.0001);
assertEquals(0, liste.size());
assertEquals(0, resultat.getX(), 0.0001); assertEquals(0, resultat.getY(), 0.0001); assertEquals(0.70711, resultat.getX(), 0.0001); assertEquals(0.70711, resultat.getY(), 0.0001);
assertEquals(cp1, cp2);
assertEquals(5, resultat.getX(), 0.0001); assertEquals(5, resultat.getY(), 0.0001);
assertTrue(c2.getFacteur() > 1.0);
assertEquals(1, liste.size()); assertEquals(1, liste.size());
assertEquals(niveau.reqCorps().size() == 3, true); assertEquals(niveau.reqCorps().size() == 2, true); assertEquals(niveau.reqCorps().size() == 2, true);
assertEquals(2, liste.size()); assertEquals(2, liste.size());
assertEquals(t3.getTexture().name(), Tete.Texture.LOTUS.name()); assertEquals(t4.getTexture().name(), Tete.TEXTURE_DEFAUT.name());
assertEquals(10, t1.reqRayon(), d); assertEquals(100, t2.reqRayon(), d); assertEquals(20, t3.reqRayon(), d); assertEquals(Planete.RAYON_DEFAUT, t4.reqRayon(), d);
assertEquals(niveau.reqObjectif(), objectif);
assertEquals(0.0, v1.multiplication(v2), 0.0001);
assertEquals(2, opts.size()); assertEquals("ajpPort", one.getName()); assertEquals("n", one.getSample()); assertEquals("Create an AJP listener on port n (default: don\'t listen on AJP)", one.getDescription()); assertEquals("AJP", one.getSection());
assertThat(directory.getCanonicalPath()).endsWith("target" + File.separator + "surefire-reports"); assertThat(directory.exists()).isFalse(); assertThat(directory.isDirectory()).isFalse();
assertThat(sensorContextTester.allIssues()).hasSize(1);
assertThat(sensor.toString()).isEqualTo("Groovy CoberturaSensor");
assertThat(context.measure(":src/test/org/sonar/JavaNCSSCollectorTest.groovy", CoreMetrics.TESTS).value()).isEqualTo(11);
assertThat(sensorContextTester.allIssues()).isEmpty();
assertThat(SurefireUtils.getReportsDirectory(settings, fs, pathResolver).exists()).isTrue(); assertThat(SurefireUtils.getReportsDirectory(settings, fs, pathResolver).isDirectory()).isTrue();
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(context.measure(":NoPackagesTest", CoreMetrics.TESTS).value()).isEqualTo(2);
assertThat(context.getExtensions()).hasSize(17);
assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(1); assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TESTS).value()).isEqualTo(7); assertThat(context.measures(":org.sonar.core.ExtensionsFinderTest")).hasSize(6);
assertThat(sensor.shouldExecuteOnProject()).isTrue();
assertThat(sensor.toString()).isEqualTo("GroovySensor");
assertThat(groovyFileSystem.sourceInputFileFromRelativePath(null)).isNull(); assertThat(groovyFileSystem.sourceInputFileFromRelativePath("fake1.file")).isNull(); assertThat(groovyFileSystem.sourceInputFileFromRelativePath("fake2.file")).isNotNull(); assertThat(groovyFileSystem.sourceInputFileFromRelativePath("foo/fake3.file")).isNotNull();
assertThat(context.measure(":org.apache.commons.collections.bidimap.AbstractTestBidiMap", CoreMetrics.TESTS).value()).isEqualTo(7); assertThat(context.measure(":org.apache.commons.collections.bidimap.AbstractTestBidiMap", CoreMetrics.TEST_ERRORS).value()).isEqualTo(1); assertThat(context.measures(":org.apache.commons.collections.bidimap.AbstractTestBidiMap$TestBidiMapEntrySet")).isEmpty();
assertThat(JaCoCoExtensions.getExtensions().size()).isEqualTo(7);
assertThat(sensorContextTester.allIssues()).hasSize(2);
assertThat(context.measures(":org.sonar.SecondTest")).hasSize(6); assertThat(context.measures(":org.sonar.JavaNCSSCollectorTest")).hasSize(6);
assertThat(new GroovyMetrics().getMetrics()).hasSize(4);
assertThat(sensorContextTester.allIssues()).isEmpty();
assertThat(sensorContextTester.allIssues()).isEmpty();
assertThat(context.measure(":org.apache.shindig.protocol.TestHandler", CoreMetrics.TESTS).value()).isEqualTo(0); assertThat(context.measure(":org.apache.shindig.protocol.TestHandler", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(1);
assertThat(jacocoSettings.getReportPath()).isEqualTo("jacoco.exec");
assertThat(directory.getCanonicalPath()).endsWith("target" + File.separator + "surefire-reports"); assertThat(directory.exists()).isFalse(); assertThat(directory.isDirectory()).isFalse();
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(context.lineHits(":example/Hello.groovy", CoverageType.IT, zeroHitline)).isEqualTo(0); assertThat(context.lineHits(":example/Hello.groovy", CoverageType.IT, oneHitline)).isEqualTo(1); assertThat(context.conditions(":example/Hello.groovy", CoverageType.IT, conditionLine)).isEqualTo(2); assertThat(context.coveredConditions(":example/Hello.groovy", CoverageType.IT, conditionLine)).isEqualTo(0);
assertThat(context.measure(":org.sonar.plugins.surefire.NestedInnerTest", CoreMetrics.TESTS).value()).isEqualTo(3);
assertThat(sensor.shouldExecuteOnProject()).isTrue(); assertThat(sensor.shouldExecuteOnProject()).isTrue(); assertThat(sensor.shouldExecuteOnProject()).isFalse(); assertThat(sensor.shouldExecuteOnProject()).isTrue();
assertThat(e.getMessage()).contains("Fail to export CodeNarc profile");
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(jacocoSettings.getItReportPath()).isEqualTo("target/it-jacoco-test.exec");
assertThat(groovyFileSystem.hasGroovyFiles()).isFalse(); assertThat(groovyFileSystem.hasGroovyFiles()).isFalse(); assertThat(groovyFileSystem.hasGroovyFiles()).isTrue();
assertThat(profile.getName()).isEqualTo("Sonar way"); assertThat(profile.getLanguage()).isEqualTo(Groovy.KEY); assertThat(profile.getActiveRules()).hasSize(59); assertThat(messages.hasErrors()).isFalse(); assertThat(rules.containsKey(activeRule.getConfigKey())).as("No such rule: " + activeRule.getConfigKey()).isTrue();
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(language.getKey()).isEqualTo("grvy"); assertThat(language.getName()).isEqualTo("Groovy"); assertThat(language.getFileSuffixes()).isEqualTo(new String[] {".groovy"}); assertThat(language.getFileSuffixes()).containsOnly(".groovy"); assertThat(language.getFileSuffixes()).containsOnly(".groovy", ".grvy");
assertThat(sensor.shouldExecuteOnProject()).isTrue(); assertThat(sensor.shouldExecuteOnProject()).isFalse(); assertThat(sensor.shouldExecuteOnProject()).isFalse(); assertThat(sensor.shouldExecuteOnProject()).isTrue();
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertThat(sensor.shouldExecuteOnProject()).isFalse();
assertThat(groovyFileSystem.sourceFiles()).isEmpty(); assertThat(groovyFileSystem.sourceFiles()).isEmpty(); assertThat(groovyFileSystem.sourceFiles()).hasSize(1);
assertThat(sensor.shouldExecuteOnProject()).isTrue(); assertThat(sensor.shouldExecuteOnProject()).isFalse(); assertThat(sensor.shouldExecuteOnProject()).isFalse(); assertThat(sensor.shouldExecuteOnProject()).isTrue();
assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY);
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(cnt--), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(10), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(count/9.0, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(count++), to.get(0));
assertTrue(ioe.getMessage().contains("Ntile args must contain")); assertTrue(caught);
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Float(0.0), to.get(0));
assertTrue(ioe.getMessage().contains("Rank expected column number")); assertTrue(caught);
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(4.5), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count), to.get(0)); assertNull(to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new BigDecimal(count++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(10), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(1.0), to.get(0));
assertNull(func.exec(null)); assertNull(func.exec(t));
assertTrue(ioe.getMessage().contains("Rank args must contain")); assertTrue(caught);
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(count++, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(4.5), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count), to.get(0)); assertNull(to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(cnt++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0)); assertEquals(new Integer(99), to.get(0));
assertEquals("{stitched: {x: chararray,y: int,{NULL}}}", out.toString());
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new BigDecimal(0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0)); assertNull(to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(4.5), to.get(0));
assertTrue(ioe.getMessage().contains("Ntile expected integer")); assertTrue(caught);
assertTrue(caught); assertTrue(caught);
assertEquals("Unknown aggregate fred", ee.getMessage()); assertTrue(caught);
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(count++, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(10.0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(4.5), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(count++), to.get(0));
assertEquals(1, out.size()); assertEquals(new Integer(1), out.iterator().next().get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals("0", to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(count, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Integer(count++), to.get(0)); assertNull(to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(0.0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Long(10), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals("9", to.get(0));
assertEquals(10, outbag.size()); assertEquals(count, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(0.0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(0.0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new BigDecimal(4.5), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(10.0), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new BigDecimal(10), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(count++), to.get(0));
assertEquals("{stitched: {x: chararray,y: int,{NULL}}}", out.toString());
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Float(count++), to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(count/10.0, to.get(0));
assertEquals(10, outbag.size()); assertEquals(1, to.size()); assertEquals(new Double(10.0), to.get(0));
assertEquals(decode, "\\u0013");
assertEquals(result, toBeDecode);
assertEquals("372247", encode);
assertEquals(result, "\\\\u0001");
assertEquals("128167", encoded);
assertEquals(result, "\\u0001");
assertNotNull(encode);
assertEquals(encode, "~");
assertEquals(decode, "! !");
assertEquals("000000011111010010100111", encoded);
assertEquals(res, "48 65 6C 6C 6F");
assertEquals(decode, toBeEncode);
assertEquals(codec.encode(TO_BE_ENCODE), TO_BE_DECODE);
assertEquals(decode, "Help we are being attacked");
assertEquals(expected, decode);
assertNotNull(encode);
assertEquals(result, TO_BE_ENCODE);
assertEquals(encoded, "00110010");
assertEquals(TO_BE_DECODE, encode);
assertEquals("1F4A7", encode);
assertEquals(TO_BE_ENCODE, decode);
assertEquals(new HexCodec().decode(res), input);
assertEquals(TO_BE_ENCODE, decode);
assertEquals(codec.decode(TO_BE_DECODE), TO_BE_ENCODE);
assertEquals("--.- .-- . .-. - -.-- ..- .. --- .--. .- ... -.. ..-. --. .... .--- -" + ".- .-.. --.. -..- -.-. ...- -... -. -- .---- ..--- ...-- ....- ..... -.... -" + "-... ---.. ----. -----", codec.encode("qwertyuiopasdfghjklzxcvbnm1234567890"));
assertEquals(TO_BE_ENCODE, decode);
assertEquals(encode, "Ifmq xf bsf cfjoh buubdlfe");
assertNotNull(encode);
assertEquals(result, TO_BE_DECODE);
assertEquals("-- --- .-. ... . -.-. --- -.. . -.-. - . ... - ----- .---- ..--- ...-- ....- ..... -.... --... ---.. ----.", codec.encode(TO_BE_ENCODE));
assertEquals(codec.encode("qwertyuiopasdfghjklzxcvbnm1234567890"), "--.- .-- . .-. - -.-- ..- .. --- .--. .- ... -.. ..-. --. .... .--- -.- .-.." + " --.. -..- -.-. ...- -... -. -- .---- ..--- ...-- ....- ..... -.... --... -" + "--.. ----. -----");
assertEquals(1, placeholders.size()); assertEquals(14, placeholder.getStart()); assertEquals(33, placeholder.getEnd()); assertEquals("$Email@test.com:joe.schmoe", placeholder.getData().getReplacement());
assertEquals(1, placeholders.size()); assertEquals(14, placeholder.getStart()); assertEquals(33, placeholder.getEnd()); assertEquals("Email", placeholder.getData().getReplacement());
assertEquals("Hello world", foo.hello("world"));
assertEquals(1, placeholders.size()); assertEquals(14, placeholder.getStart()); assertEquals(33, placeholder.getEnd()); assertEquals("$Email@test.comjoe.schmoe", placeholder.getData().getReplacement());
assertEquals(2, placeholders.size()); assertEquals("Two-digit number: ".length(), placeholder.getStart()); assertEquals("Two-digit number: 42".length(), placeholder.getEnd()); assertEquals("Number42", placeholder.getData().getReplacement()); assertEquals("Two-digit number: 42. One-digit number: ".length(), placeholder.getStart()); assertEquals("Two-digit number: 42. One-digit number: 7".length(), placeholder.getEnd()); assertEquals("Number7", placeholder.getData().getReplacement());
assertEquals(5, diagnostic.getLineNumber()); assertEquals("compiler.err.expected", diagnostic.getCode()); assertEquals("Foo.java", diagnostic.getSource().getName());
assertThat(ex.getFrom()) .isEqualTo(mailbox1.getPid()); assertThat(ex.getReason()) .isEqualTo(new ErlangAtom("popa")); assertThat(false).isTrue();
assertThat(pid).isNotNull();
assertThat(ex.getFrom()) .isEqualTo(mailbox2.getPid()); assertThat(ex.getReason()) .isEqualTo(new ErlangAtom("popa")); assertThat(false).isTrue();
assertThat(pid1).isEqualTo(pid2); assertThat(pid2).isNotEqualTo(pid3); assertThat(pid3).isNotEqualTo(pid4);
assertThat(new ErlangBinary(value).asBinary()) .isEqualTo(value);
assertThat(payload.asText()).isEqualTo("hello world");
assertThat(pid).isNotNull();
assertThat(node.newReference()) .isNotNull(); assertThat(nodeInfo).isNotNull();
assertThat(node.mailbox("one")).isNotNull(); assertThat(node.mailbox("two")).isNotNull(); assertThat(node.mailbox("three")).isNull();
assertThat(bitString.getBits()) .isEqualTo(input.read_bitstr(new int[1]));
assertThat(response).isEqualTo(request);
assertThat(mailbox1.receive().getBody().asText()) .isEqualTo(text1); assertThat(mailbox2.receive().getBody().asText()) .isEqualTo(text2);
assertThat(binary).isNotNull();
assertThat(list).isNotNull();
assertThat(port).isNotNull();
assertThat(tuple).isNotNull();
assertThat(reference).isNotNull();
assertThat(payload.asText()).isEqualTo("hello world");
assertThat(binary.asBinary()) .isEqualTo(input.read_binary());
assertThat(port).isNotNull();
assertThat(port.getDescriptor().getFullName()) .isEqualTo(otpPid.node()); assertThat(port.getId()) .isEqualTo(otpPid.id()); assertThat(port.getCreation()) .isEqualTo(otpPid.creation()); assertThat(port.getDescriptor().getFullName()) .isEqualTo(otpPid.node()); assertThat(port.getId()) .isEqualTo(otpPid.id()); assertThat(port.getCreation()) .isEqualTo(otpPid.creation());
assertThat(bitString).isNotNull();
assertThat(string.asText()) .isEqualTo(input.read_string());
assertThat(num1).isNotEqualTo(num2);
assertThat(testResult.getLinks()).hasSize(1); assertThat(link.getName()).isEqualTo("Open in Idea"); assertThat(link.getType()).isEqualTo("idea"); assertThat(link.getUrl()).contains(TEST_CLASS.replace(".", "/"));
assertThat(categories).as("test categories") .extracting(Category::getName) .containsExactly(category.getName()); assertThat(reportPath.resolve("data").resolve(JSON_FILE_NAME)) .exists();
assertThat(categories).as("test categories") .extracting(Category::getName) .containsExactly(category.getName()); assertThat(reportPath.resolve("data").resolve(JSON_FILE_NAME)) .exists(); assertThat(reportPath.resolve("data").resolve(CSV_FILE_NAME)) .exists();
assertThat(exitCode) .isEqualTo(ExitCode.NO_ERROR);
assertThat(tree.getChildren()) .hasSize(1) .extracting("name") .containsExactlyInAnyOrder("a"); assertThat(tree.getChildren()) .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("b.c", "d.e"); assertThat(tree.getChildren()) .flatExtracting("children") .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("first", "second");
assertThat(tree.getChildren()) .hasSize(1) .extracting("name") .containsExactlyInAnyOrder("a.b"); assertThat(tree.getChildren()) .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("first", "c"); assertThat(tree.getChildren()) .flatExtracting("children") .filteredOn("name", "c") .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("second");
assertThat(first.getExtraBlock(CATEGORIES, new ArrayList<Category>())) .hasSize(1) .extracting(Category::getName) .containsExactlyInAnyOrder(FAILED_TESTS.getName()); assertThat(second.getExtraBlock(CATEGORIES, new ArrayList<Category>())) .hasSize(1) .extracting(Category::getName) .containsExactlyInAnyOrder(BROKEN_TESTS.getName());
assertThat(context.getValue()) .isNotNull();
assertThat(exitCode) .isEmpty();
assertThat(results) .filteredOn(TestResult::isHidden) .extracting(TestResult::getName) .containsExactlyInAnyOrder(FIRST_RESULT); assertThat(results) .filteredOn(result -> !result.isHidden()) .extracting(TestResult::getName, TestResult::isFlaky) .containsExactlyInAnyOrder(tuple(SECOND_RESULT, false));
assertThat(config) .isNotNull(); assertThat(config.getPlugins()) .hasSize(3) .containsExactly("a", "b", "c");
assertThat(data) .hasSize(1 + 2 * history.size());
assertThat(context.getValue()) .isNotNull();
assertThat(context.getValue()) .isNotNull();
assertThat(parsed) .hasValue(1507199782000L);
assertThat(data).containsKeys(historyId1, historyId2); assertThat(data.get(historyId1).getItems()).hasSize(2); assertThat(data.get(historyId2).getItems()).hasSize(2);
assertThat(tree.getChildren()) .hasSize(1) .extracting("name") .containsExactlyInAnyOrder("a"); assertThat(tree.getChildren()) .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("b", "c"); assertThat(tree.getChildren()) .flatExtracting("children") .flatExtracting("children") .extracting("name") .containsExactlyInAnyOrder("firstMethod", "second");
assertThat(parse) .hasValue(ExitCode.ARGUMENT_PARSING_ERROR);
assertThat(exitCode) .isEqualTo(ExitCode.NO_ERROR);
assertThat(exitCode) .isPresent() .hasValue(ExitCode.ARGUMENT_PARSING_ERROR);
assertThat(first.getExtraBlock(CATEGORIES, new ArrayList<Category>())) .hasSize(1) .extracting(Category::getName) .containsExactlyInAnyOrder(FAILED_TESTS.getName()); assertThat(second.getExtraBlock(CATEGORIES, new ArrayList<Category>())) .hasSize(1) .extracting(Category::getName) .containsExactlyInAnyOrder(categoryName);
assertThat(exitCode) .isEqualTo(ExitCode.GENERIC_ERROR);
assertThat(tree.getChildren()) .extracting("name") .containsExactly("timeless", "first", "third", "second");
assertThat(data) .hasSize(1 + history.size()) .extracting(HistoryTrendItem::getStatistic) .extracting(Statistic::getTotal, Statistic::getFailed, Statistic::getPassed) .first() .isEqualTo(Tuple.tuple(3L, 2L, 1L)); assertThat(next) .containsExactlyElementsOf(history);
assertThat(results) .filteredOn(TestResult::isHidden) .extracting(TestResult::getName) .containsExactlyInAnyOrder(FIRST_RESULT, LAST_RESULT); assertThat(results) .filteredOn(result -> !result.isHidden()) .extracting(TestResult::getName, TestResult::isFlaky) .containsExactlyInAnyOrder(tuple(SECOND_RESULT, true));
assertThat(tree.getChildren()) .flatExtracting("children") .flatExtracting("children") .extracting("name") .containsExactly("timeless", "first", "second");
assertThat(tree.getChildren()) .hasSize(2) .extracting(TreeNode::getName) .containsExactlyInAnyOrder("s1", "s2");
assertThat(exitCode) .isEqualTo(ExitCode.NO_ERROR);
assertThat(tree.getChildren()) .extracting(TreeNode::getName) .containsExactly("timeless", "first", "second");
assertThat(context.getValue()) .isNotNull();
assertThat(results) .filteredOn(TestResult::isHidden) .extracting(TestResult::getName) .containsExactlyInAnyOrder(FIRST_RESULT, LAST_RESULT); assertThat(results) .filteredOn(result -> !result.isHidden()) .extracting(TestResult::getName, TestResult::isFlaky) .containsExactlyInAnyOrder(tuple(SECOND_RESULT, false));
assertThat(parsed) .hasValue(1507199782000L + TimeUnit.HOURS.toMillis(7));
assertThat(parsed1) .hasValue(1507199782000L); assertThat(parsed2) .hasValue(1527775525155L);
assertThat(results).as("test results") .filteredOn(TestResult::isHidden) .hasSize(0); assertThat(results).as("test results with retries block") .flatExtracting(result -> result.getExtraBlock(RETRY_BLOCK_NAME)) .hasSize(0);
assertThat(data) .hasSize(1 + history1.size() + history2.size()); assertThat(historyTrendItem) .hasFieldOrPropertyWithValue("buildOrder", 7L);
assertThat(parsed) .isEmpty();
assertThat(exitCode) .isPresent() .hasValue(ARGUMENT_PARSING_ERROR);
assertThat(first) .isNotBlank() .isNotEqualTo(second); assertThat(second) .isNotBlank();
assertNotNull(countries); assertEquals(4, countries.size()); assertEquals("Canada", countries.get("CA")); assertEquals("Germany", countries.get("DE"));
assertEquals("Canada", countryName);
assertTrue(ExtendedTBSL.OXFORD.getExampleQuestions().contains("houses in Summertown"));
assertEquals("The/DT quick/JJ brown/JJ fox/NN jumps/VBZ over/IN the/DT lazy/JJ dog/NN ./.",s);
assertEquals(pluralSingular[1],LemmatizedIndex.lemmatize(pluralSingular[0]));
assertTrue(WordNet.INSTANCE.getBestSynonyms(POS.VERB, "learn").contains("acquire"));
assertTrue(WordNetUnpacker.getUnpackedWordNetDir().toString().endsWith("wordnet/dict"));
assertFalse(a.getItems().isEmpty());
assertEquals("and(tagA, not tagB)", parser.parse(e1)); assertEquals("and(tagA, not tagB)", parser.parse(e2)); assertEquals("or(tagA, not tagB)", parser.parse(e3)); assertEquals("and(tagA = \'abc\', tagB = \'def\')", parser.parse(e4));
assertEquals(2 * 5 * 100, alerts.getEvents(tenantIds, null, null).size()); assertEquals(1 * 5 * 100, alerts.getEvents(tenantIds, null, null).size()); assertEquals(3, alerts.getEvents(tenantIds, criteria, null).size());
assertEquals("[test_tag, =, \'/t;hawkular/f;my-agent/r;Local%20DMR~~_Server Availability\']", getTokens(parser.parse(e1)).toString()); assertEquals("[test_tag, =, \'\\\\/t;hawkular\\\\/f;my-agent\\\\/r;Local%20DMR\\\\~\\\\~_Server Availability\']", getTokens(parser.parse(e2)).toString());
assertEquals(10, trigger0Alerts.size()); assertEquals(30, trigger012Alerts.size());
assertEquals(5, ctime2Events.size()); assertEquals(5 * 4, ctimeGTE2Events.size());
assertTrue(ActionsValidator.validate(ta, alert)); assertFalse(ActionsValidator.validate(ta, alert)); assertFalse(ActionsValidator.validate(ta, alert)); assertFalse(ActionsValidator.validate(ta, alert));
assertEquals(5, stimeGTE5Alerts.size());
assertEquals(5 * 2, lowAlerts.size()); assertEquals(5, criticalAlerts.size()); assertEquals(5 * 2, mediumAlerts.size()); assertEquals(5 * 3, mediumCriticalAlerts.size());
assertEquals(1, resolvedAlerts.size());
assertEquals("or(tagC, and(tagA, not tagB))", parser.parse(e1)); assertEquals("or(tagC, and(tagB, not tagA))", parser.parse(e2)); assertEquals("and(tagC, or(tagB, not tagA))", parser.parse(e3));
assertEquals("and(tagA, or(tagC, not tagB))", parser.parse(e1)); assertEquals("and(tagA, and(tagC, not tagB))", parser.parse(e2)); assertEquals("and(tagA, or(tagC, not tagB))", parser.parse(e3));
assertEquals(5, openAlerts.size()); assertEquals(5 * 2, acknowledgedAlerts.size()); assertEquals(5 * 2, resolvedAlerts.size()); assertEquals(5 * 4, ackResolvedAlerts.size());
assertTrue(ActionsValidator.validate(ta, event));
assertEquals("tagA.subA.subsubA", parser.parse(e1)); assertEquals("[tagA.subA.subsubA]", getTokens(parser.parse(e1)).toString()); assertEquals("tagA.subA.subsubA = \'abc.abc.abc\'", parser.parse(e3)); assertEquals("[tagA.subA.subsubA, =, \'abc.abc.abc\']", getTokens(parser.parse(e3)).toString());
assertEquals(2 * 5 * 100, alerts.getAlerts(tenantIds, null, null).size()); assertEquals(1 * 5 * 100, alerts.getAlerts(tenantIds, null, null).size()); assertEquals(3, alerts.getAlerts(tenantIds, criteria, null).size());
assertEquals(5, ctime2Alerts.size()); assertEquals(5 * 4, ctimeGTE2Alerts.size());
assertEquals("and(and(tagA, not tagB), or(tagD, not tagC))", parser.parse(e1));
assertEquals(5 * 2, stimeGTE2Alerts.size());
assertEquals("[tagA, =, \'a b\']", getTokens(parser.parse(e1)).toString()); assertEquals("[tagA, in, [\'a b\',\'c d\']]", getTokens(parser.parse(e2)).toString());
assertTrue(ActionsValidator.validate(ta, event)); assertFalse(ActionsValidator.validate(ta, alert)); assertFalse(ActionsValidator.validate(ta, alert)); assertTrue(ActionsValidator.validate(ta, alert)); assertTrue(ActionsValidator.validate(ta, alert)); assertTrue(ActionsValidator.validate(ta, alert)); assertFalse(ActionsValidator.validate(ta, alert));
assertEquals(1, openAlerts.size()); assertEquals(1, alert.getNotes().size()); assertEquals(3, alert.getNotes().size());
assertEquals(10, trigger0Events.size()); assertEquals(30, trigger012Events.size());
assertEquals(2 * 2 * 4, definitions.getAllActionDefinitions().size()); assertEquals(numTenants, actionIds.keySet().size()); assertEquals(numPlugins, actionIds.get("tenant0").keySet().size()); assertEquals(numActions, actionIds.get("tenant0").get("plugin0").size()); assertEquals(numPlugins, actionIdsByTenant.keySet().size()); assertEquals(numActions, actionIdsByTenantAndPlugin.size());
assertEquals(15, category0Events.size()); assertEquals(5 * 5, category01Events.size());
assertEquals(5 * 2, stimeGTE2Alerts.size());
assertNotNull(c1); assertNotNull(c2); assertEquals("ext", c1.getName()); assertEquals("ext", c2.getName()); assertEquals(0, c1.getChildCount()); assertEquals(0, c2.getChildCount()); assertEquals("1.1", c1.getValue()); assertEquals("true", c2.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("str", config.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("1", config.getValue());
assertTrue(res.getFailures().isEmpty()); assertEquals(2, artifacts.size()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("compile"::equals).count()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("deep-compile-compile"::equals).count());
assertNotNull(c); assertEquals("ext", c.getName()); assertEquals(0, c.getChildCount()); assertEquals("1", c.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("&<>", config.getValue()); assertEquals("<tag>&amp;&lt;&gt;</tag>", wrt.toString());
assertNotNull(xml); assertEquals("ext", xml.getName()); assertEquals(0, xml.getChildCount()); assertEquals("1.1", xml.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertNull(config.getValue()); assertEquals(3, config.getChildCount()); assertEquals("item", config.getChild(0).getName()); assertEquals("1", config.getChild(0).getValue()); assertEquals("item", config.getChild(1).getName()); assertEquals("2", config.getChild(1).getValue()); assertEquals("item", config.getChild(2).getName()); assertEquals("3", config.getChild(2).getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertNull(config.getValue()); assertEquals(1, config.getChildCount()); assertEquals("a", config.getChild(0).getName()); assertEquals("true", config.getChild(0).getValue());
assertEquals("<a>\\n <b>\\n <c>asdf</c>\\n <d/>\\n </b>\\n</a>", pretty);
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("true", config.getValue());
assertNotNull(config); assertNull(config.getValue()); assertEquals(2, config.getChildCount()); assertEquals("a", config.getChild(0).getName()); assertEquals("1", config.getChild(0).getValue()); assertEquals("b", config.getChild(1).getName()); assertEquals("true", config.getChild(1).getValue());
assertFalse(file.toFile().exists());
assertEquals(2, XmlUtil.estimateIndentationSize(new BufferedReader(new StringReader(text))));
assertTrue(res.getFailures().isEmpty()); assertEquals(2, artifacts.size()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("included"::equals).count()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("optional"::equals).count());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("false", config.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals(0, config.getChildCount()); assertEquals("1.2", config.getValue());
assertNotNull(config); assertEquals("tag", config.getName()); assertEquals("id", config.getAttribute("id")); assertEquals(0, config.getChildCount()); assertEquals("true", config.getValue());
assertEquals(2, xml.getChildCount()); assertNotNull(topXml); assertEquals("top", topXml.getName()); assertEquals(1, topXml.getChildCount()); assertEquals("a", topXml.getChild(0).getName()); assertEquals("kachny", topXml.getChild("a").getValue()); assertNotNull(nested); assertEquals(0, nested.getChildCount()); assertEquals("true", nested.getValue());
assertTrue(res.getFailures().isEmpty()); assertEquals(3, artifacts.size()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("dep"::equals).count()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("included"::equals).count()); assertEquals(1, artifacts.stream().map(Artifact::getArtifactId).filter("included-included"::equals).count());
assertNotNull(UnitParser.checkUnit("100 km")); assertNotNull(UnitParser.checkUnit("100 million"));
assertNull(result.getValue()); assertEquals(1.0d, result.getValue()); assertEquals(1.5d, result.getValue()); assertEquals(2.0d, result.getValue());
assertEquals("a", t.getSchema().get(0).getHeader()); assertEquals("c", t.getSchema().get(1).getHeader()); assertEquals("b", t.getSchema().get(2).getHeader()); assertEquals("a", t.getMapping().getMappedProperty(0).getFirst()); assertNull(t.getMapping().getMappedProperty(1)); assertEquals("b", t.getMapping().getMappedProperty(2).getFirst());
assertEquals(files, configuration.getMappings().get(0).getSourceFiles()); assertEquals(files, configuration.getMappings().get(1).getSourceFiles());
assertEquals(4l, loader.loadDf(getClass().getResourceAsStream("count.sql")).first().get(0)); assertEquals("Doctor B", dataset.first().get(0)); assertEquals("4", dataset.first().get(1)); assertEquals("Clinic", dataset.first().get(2)); assertEquals("Patient 3", dataset.first().get(3));
assertEquals("sql-bucket", configuration.getSqlBucket());
assertEquals(expected, configuration.toString());
assertEquals("bucket1-raw", configuration.getSourceBucket());
assertEquals("mimic", configuration.getDataSource());
assertEquals("sql/sql1.sql", configuration.getMappings().get(0).getSqlFile()); assertEquals("sql2.sql", configuration.getMappings().get(1).getSqlFile());
assertEquals("bucket1-stage", configuration.getDestinationBucket());
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserByte(parser), is((byte) 0)); assertThat(JsonParseUtil.parserByte(parser), nullValue()); assertThat(JsonParseUtil.parserByte(parser), is((byte) 2)); assertThat(JsonParseUtil.parserByte(parser), is((byte) 3)); assertThat(JsonParseUtil.parserByte(parser), is((byte) 4));
assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.VALUE_NULL)); assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.END_ARRAY));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserInteger(parser), is(0)); assertThat(JsonParseUtil.parserInteger(parser), nullValue()); assertThat(JsonParseUtil.parserInteger(parser), is(2)); assertThat(JsonParseUtil.parserInteger(parser), is(3)); assertThat(JsonParseUtil.parserInteger(parser), is(4));
assertThat(list.size(), is(5)); assertThat(list.get(0), is((short) 0)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is((short) 2)); assertThat(list.get(3), is((short) 3)); assertThat(list.get(4), is((short) 4));
assertThat(list.size(), is(5)); assertThat(list.get(0), is((byte) 0)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is((byte) 2)); assertThat(list.get(3), is((byte) 3)); assertThat(list.get(4), is((byte) 4));
assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.VALUE_STRING)); assertThat(type, is(State.VALUE_STRING)); assertThat(type, is(State.VALUE_LONG));
assertThat(jsonArray1.equals(jsonArray2), is(true)); assertThat(jsonArray1.equals(jsonArray2), is(false)); assertThat(jsonArray1.equals(jsonArray2), is(true));
assertThat(jsonArray.getType(0), is(Type.STRING)); assertThat(jsonArray.getType(0), not(Type.STRING)); assertThat(jsonArray.getType(0), is(Type.LONG));
assertThat(jsonHash.size(), is(0));
assertThat(JsonSliceUtil.isNextIsEndArray(slices, 0), is(true)); assertThat(JsonSliceUtil.isNextIsEndArray(slices, 0), is(false)); assertThat(JsonSliceUtil.isNextIsEndArray(slices, 0), is(false));
assertThat(list.size(), is(3));
assertThat(state, is(State.START_ARRAY));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserLong(parser), is(0L)); assertThat(JsonParseUtil.parserLong(parser), nullValue()); assertThat(JsonParseUtil.parserLong(parser), is(2L)); assertThat(JsonParseUtil.parserLong(parser), is(3L)); assertThat(JsonParseUtil.parserLong(parser), is(4L));
assertThat(list.size(), is(3)); assertThat(list.get(0), is("")); assertThat(list.get(1), is("s")); assertThat(list.get(2), is("str"));
assertThat(type, is(State.START_ARRAY)); assertThat(type, is(State.START_HASH)); assertThat(type, is(State.START_HASH)); assertThat(type, is(State.KEY)); assertThat(type, is(State.END_HASH)); assertThat(type, is(State.END_HASH)); assertThat(type, is(State.END_ARRAY));
assertThat(jsonArray.size(), is(0));
assertThat(jsonHash.getType("key"), is(Type.STRING)); assertThat(jsonHash.getType("key"), nullValue());
assertThat(JsonSliceUtil.isNextIsEndHash(slices, 0), is(true)); assertThat(JsonSliceUtil.isNextIsEndHash(slices, 0), is(false)); assertThat(JsonSliceUtil.isNextIsEndHash(slices, 0), is(false));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserDouble(parser), is(0.0)); assertThat(JsonParseUtil.parserDouble(parser), nullValue()); assertThat(JsonParseUtil.parserDouble(parser), is(2.2)); assertThat(JsonParseUtil.parserDouble(parser), is(3.3)); assertThat(JsonParseUtil.parserDouble(parser), is(4.4));
assertThat(list.size(), is(5)); assertThat(list.get(0), is(0L)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is(2L)); assertThat(list.get(3), is(3L)); assertThat(list.get(4), is(4L));
assertThat(list.size(), is(5)); assertThat(list.get(0), is(0.0)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is(2.2)); assertThat(list.get(3), is(3.3)); assertThat(list.get(4), is(4.4));
assertThat(jsonHash1.equals(jsonHash2), is(true)); assertThat(jsonHash1.equals(jsonHash2), is(false)); assertThat(jsonHash1.equals(jsonHash2), is(true));
assertThat(jsonArray.size(), is(0));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserShort(parser), is((short) 0)); assertThat(JsonParseUtil.parserShort(parser), nullValue()); assertThat(JsonParseUtil.parserShort(parser), is((short) 2)); assertThat(JsonParseUtil.parserShort(parser), is((short) 3)); assertThat(JsonParseUtil.parserShort(parser), is((short) 4));
assertThat(jsonHash.size(), is(0));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserBoolean(parser), is(true)); assertThat(JsonParseUtil.parserBoolean(parser), is(false)); assertThat(JsonParseUtil.parserBoolean(parser), nullValue()); assertThat(JsonParseUtil.parserBoolean(parser), is(true));
assertThat(list.size(), is(4)); assertThat(list.get(0), is(true)); assertThat(list.get(1), is(false)); assertThat(list.get(2), nullValue()); assertThat(list.get(3), is(true));
assertThat(JsonUtil.sanitize(null), is(nullValue())); assertThat(JsonUtil.sanitize("\\\\ \\" / \\b \\f \\n \\r \\t"), is("\\\\\\\\ \\\\\\" \\\\/ \\\\b \\\\f \\\\n \\\\r \\\\t"));
assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserFloat(parser), is(0.0F)); assertThat(JsonParseUtil.parserFloat(parser), nullValue()); assertThat(JsonParseUtil.parserFloat(parser), is(2.2F)); assertThat(JsonParseUtil.parserFloat(parser), is(3.3F)); assertThat(JsonParseUtil.parserFloat(parser), is(4.4F));
assertThat(list.size(), is(3)); assertThat(list.get(0), is(EnumForTest.TEST1)); assertThat(list.get(1), is(EnumForTest.TEST2)); assertThat(list.get(2), is(EnumForTest.TEST1));
assertThat(list.size(), is(5)); assertThat(list.get(0), is(0.0F)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is(2.2F)); assertThat(list.get(3), is(3.3F)); assertThat(list.get(4), is(4.4F));
assertThat(list.size(), is(5)); assertThat(list.get(0), is(0)); assertThat(list.get(1), nullValue()); assertThat(list.get(2), is(2)); assertThat(list.get(3), is(3)); assertThat(list.get(4), is(4));
assertThat(list.size(), is(3)); assertThat(list.get(0).getTime(), is(10000000L)); assertThat(list.get(1).getTime(), is(10010001L)); assertThat(list.get(2).getTime(), is(10020002L));
assertEquals(80, HostAndPort.fromString("host:80").getPortOrDefault(123)); assertEquals(123, HostAndPort.fromString("host").getPortOrDefault(123));
assertEquals(Collections.emptyList(), address);
assertEquals("gmail.com", hp.getHost()); assertTrue(hp.hasPort()); assertEquals(81, hp.getPort());
assertEquals("::1", HostAndPort.fromString("[::1]").requireBracketsForIPv6().getHost()); assertEquals("::1", HostAndPort.fromString("[::1]:80").requireBracketsForIPv6().getHost()); assertEquals("x", HostAndPort.fromString("x").requireBracketsForIPv6().getHost()); assertEquals("x", HostAndPort.fromString("x:80").requireBracketsForIPv6().getHost());
assertEquals("gmail.com", hp.getHost()); assertFalse(hp.hasPort()); assertEquals("::1", hp.getHost()); assertFalse(hp.hasPort());
assertFalse("Comparison with null should always return false", schemaSource.equals(null));
assertNull("Expectected value not to be bound", result);
assertFalse("Location is not considered by equals", x.equals(notX));
assertNotNull("Parent processor is null.", parent); assertSame("Unexpected parent processor.", mockProcessor, parent);
assertTrue("Equals is not symmetric", schemaSource.equals(schemaSource2) && schemaSource2.equals(schemaSource));
assertNotNull("Null script engine", engine);
assertNotNull("Returned element is null.", element); assertSame("Unexpected element.", mockElement, element);
assertNotNull(reader); assertTrue((reader instanceof StringReader));
assertNotNull("Charset is null.", charset); assertEquals("Unexpected charset.", CHARSET, charset);
assertEquals("Hash code is not repeatable", hashCode, schemaSource.hashCode());
assertEquals(nsResolver.getURIForPrefix("", true), "yyy");
assertFalse("Location is not considered by equals", x.equals(notX));
assertTrue("Equals is not transitive", x.equals(y) && y.equals(z) && x.equals(z));
assertNotNull(reader); assertTrue((reader instanceof FileReader));
assertFalse("Comparision with null should always return false", x.equals(null));
assertEquals(nsResolver.getURIForPrefix("a", false), "aaa"); assertEquals(nsResolver.getURIForPrefix("b", false), "bbb2"); assertEquals(nsResolver.getURIForPrefix("c", false), "ccc");
assertFalse("Expected different hash codes for not equal objects", x.hashCode() == notX.hashCode());
assertSame("Unexpected connection returned", mockConnection, connection);
assertTrue("Equals is not symmetric", x.equals(y) && y.equals(x));
assertNotNull("Returned source is null.", source); assertEquals("Unexpected system id of the source.", SYSTEM_ID, source.getSystemId());
assertNull(new FileListIterator(new MockFile("R", true), false).next()); assertNull(new FileListIterator(new MockFile("R", true), true).next());
assertSame(config.getConfigSource(), mockConfigSource);
assertFalse("Comparison with different type should always return false", x.equals(this));
assertTrue(context.containsVar("x")); assertFalse(context.containsVar("notExisting")); assertSame(context.getVar("null"), EmptyVariable.INSTANCE);
assertFalse("Expected different hash codes for not equal objects", x.hashCode() == notX.hashCode());
assertNotNull("String from the schema source is null.", toString); assertEquals("Unexpected value of schema source\'s string.", SYSTEM_ID, toString);
assertEquals("Hash code is not repeatable", hashCode, x.hashCode());
assertNotNull("Null set of results", results); assertTrue("Empty set expected", results.isEmpty());
assertNotNull("Result URI is null.", uri); assertEquals("Unexpected URI.", url.toURI(), uri);
assertNotNull("Returned schema source is null.", source); assertEquals("Unexpected schema source.", uri.toString(), source.toString());
assertFalse("Unexpected result.", result);
assertNotNull("Harvester is null.", harvester); assertSame("Unexpected harvester.", mockHarvester, harvester);
assertEquals("Unexpected status.", holder.getStatus(), ScraperState.RUNNING); assertEquals("Unexpected status.", holder.getStatus(), ScraperState.PAUSED);
assertFalse( "Comparison with different type should always return false", x.equals(this));
assertNotNull(harvester); assertSame(mockHarvester, harvester);
assertSame("Unexpected connection returned", mockConnection, connection);
assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertNotNull("Message is null.", result); assertSame("Unexpected message.", message, result);
assertFalse(context.iterator().hasNext());
assertEquals("Unexpected element.", 2, level);
assertEquals(getNamespaceResolverFromBrokenXml("<root xmlns:a=\'foo\'").getURIForPrefix("a", false), "foo"); assertEquals(getNamespaceResolverFromBrokenXml("<root xmlns:a=\'bar\' ").getURIForPrefix("a", false), "bar"); assertEquals(getNamespaceResolverFromBrokenXml("<root xmlns:a=\'baz\' b=\'").getURIForPrefix("a", false), "baz");
assertNotNull("Unexpected null result.", result); assertSame("Unexpected result.", c, result);
assertFalse("Schema source is not considered by equals", schemaSource.equals(schemaSource2));
assertEquals("Unexpected hash code value.", SYSTEM_ID.hashCode(), hashCode);
assertTrue("Equals is not symmetric", x.equals(y) && y.equals(x));
assertTrue("Unexpected result.", result);
assertNotNull("Result variable is null.", result); assertEquals("Unexpected variable.", result, var);
assertFalse("Comparision with null should always return false", x.equals(null));
assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertTrue("Equals is not transitive", schemaSource.equals(schemaSource2) && schemaSource2.equals(schemaSource3) && schemaSource.equals(schemaSource3));
assertNotNull(injectionListener);
assertEquals(nsResolver.getURIForPrefix("a", false), "aaa"); assertEquals(nsResolver.getURIForPrefix("b", false), "bbb"); assertNull(nsResolver.getURIForPrefix("c", false));
assertEquals("Unexpected status.", holder.getStatus(), ScraperState.RUNNING); assertEquals("Unexpected status.", holder.getStatus(), ScraperState.STOPPED);
assertNotNull("Null script engine", engine);
assertNotNull("Processor is null.", processor); assertSame("Unexpected processor.", mockProcessor, processor);
assertEquals("Unexpected status.", holder.getStatus(), ScraperState.PAUSED); assertEquals("Unexpected status.", holder.getStatus(), ScraperState.RUNNING);
assertNotNull(location); assertEquals(location.toString(), url.toString());
assertNotNull(injector); assertSame(mockInjector, injector);
assertFalse("Comparison with different type should always return false", schemaSource.equals(this));
assertNull("Lookup returns not cached object", cache.lookup("NOT_CACHED"));
assertNotNull(listener);
assertNotNull("Result variable is null.", result); assertEquals("Unexpected variable.", result, EmptyVariable.INSTANCE);
assertTrue(stack.isEmpty()); assertFalse(stack.isEmpty()); assertTrue(stack.isEmpty());
assertNotNull(context); assertSame(mockContext, context);
assertFalse("Expected different hash codes for not equal objects", schemaSource.hashCode() == schemaSource2.hashCode());
assertNotNull("Processor is null.", processor); assertSame("Unexpected processor.", mockProcessor, processor);
assertNotNull("Default scripting language is null.", lang); assertEquals("Unexpected default scripting language.", ScriptingLanguage.BEANSHELL, lang);
assertNotNull("Scripting language is null.", lang); assertEquals("Unexpected scripting language.", ScriptingLanguage.GROOVY, lang);
assertEquals(stack.peek(), "a"); assertEquals(stack.peek(), "b"); assertEquals(stack.peek(), "c"); assertEquals(stack.peek(), "c"); assertEquals(stack.peek(), "b"); assertEquals(stack.peek(), "a");
assertEquals("Unexpected status.", holder.getStatus(), ScraperState.RUNNING); assertEquals("Unexpected status.", holder.getStatus(), ScraperState.EXIT);
assertNotNull("Null set of results", results); assertEquals("One element expected", 1, results.size()); assertEquals("Unexpected element", AnnotatedClass.class, results .iterator().next());
assertSame(context.getVar("x"), dummyVar);
assertEquals(stack.size(), 0); assertEquals(stack.size(), 1); assertEquals(stack.size(), 2); assertEquals(stack.size(), 1); assertEquals(stack.size(), 0);
assertNotNull("Result variable is null.", result); assertSame("Unexpected variable.", result, var);
assertNotNull(reader); assertTrue((reader instanceof InputStreamReader));
assertNotNull(location); assertEquals(location.toString(), configFile.getAbsolutePath());
assertNotNull("Default charset is null.", charset); assertEquals("Unexpected default charset.", "UTF-8", charset);
assertNotNull("Properties is null.", properties); assertSame("Unexpected properties.", mockProperties, properties);
assertNotNull("Returned schema array is null.", schemas); assertEquals("Incorrect size of schema array", 1, schemas.length); assertEquals("Unexpected location of the schema.", SAMPLE_LOCATION, schemas[0].getLocation());
assertNotNull("Null script engine", engine);
assertFalse("Contains not cached object", cache.contains("NOT_CACHED"));
assertSame("Unexpected script result", adapteeResult, result);
assertNotNull("Result variable is null.", result); assertEquals("Unexpected variable.", result, EmptyVariable.INSTANCE);
assertEquals(nsResolver.getURIForPrefix("", true), "xxx");
assertTrue("Equals is not transitive", x.equals(y) && y.equals(z) && x.equals(z));
assertEquals("Hash code is not repeatable", hashCode, x.hashCode());
assertNotNull("Returned schema factory is null.", factory); assertSame("Unexpected schema factory.", SchemaFactoryImpl.INSTANCE, factory);
assertNotNull("Event is null.", event); assertNotNull("Exception from event is null.", ex); assertSame("Unexpected exception.", exception, ex);
assertNotNull(value); assertSame(VALID_NAME, value);
assertNotNull("Returned schema resolver is null.", resolver); assertSame("Unexpected schema resolver.", SchemaFactoryImpl.INSTANCE, resolver);
assertNull(getNamespaceResolverFromBrokenXml("<root>").getURIForPrefix("", true)); assertNull(getNamespaceResolverFromBrokenXml("<root xmlns=\'xxx\'>").getURIForPrefix("", false)); assertEquals(getNamespaceResolverFromBrokenXml("<root xmlns=\'xxx\'>").getURIForPrefix("", true), "xxx");
assertNotNull("Returned URI is null.", uri);
assertNotNull(source.getLocation()); assertEquals(source.getLocation(), ConfigSource.UNDEFINED_LOCATION);
assertNotNull(collections); assertEquals(2, collections.size()); assertEquals(collectionId1.encode(), collections.get(0).encode()); assertEquals(collectionId2.encode(), collections.get(1).encode());
assertEquals(ImmutableList.of(1, 2), RxTestCase.first( RxInputChannel.wrap(mockInputChannel).autoConnect().toList()));
assertNotNull(syncgroups); assertEquals(0, syncgroups.size());
assertFalse(db.collection(collectionId1).exists()); assertTrue(collection1.exists()); assertTrue(db.collection(collectionId1).exists()); assertFalse(db.collection(collectionId2).exists());
assertEquals("v.io/v23/verror.Exist", vError.id); assertNotNull(vError.message); assertNotNull(vError.stack); assertEquals(0, vError.actionCode); assertTrue(exceptionThrown);
assertEquals("blessing,name", Util.EncodeId(new Id("blessing", "name")));
assertNotNull("should error", e); assertTrue(errored.get(1, TimeUnit.SECONDS));
assertSame(mAttributes, mCampaign.getAttributes());
assertNotNull(cxA); assertTrue(idsMatch(getSyncgroupIds(db), Syncbase.getPersonalBlessingString(), ImmutableList.of("c"))); assertThat(getSyncgroupIds(db)).containsExactly( new Id(Syncbase.getPersonalBlessingString(), cxC.getSyncgroup().getId().getName()), new Id(Syncbase.getPersonalBlessingString(), "sg1"), new Id(Syncbase.getPersonalBlessingString(), "sg2"));
assertNotNull(s); assertFalse(s.isEmpty());
assertEquals("v.io/v23/verror.NoExist", vError.id); assertNotNull(vError.message); assertNotNull(vError.stack); assertEquals(0, vError.actionCode); assertTrue(exceptionThrown);
assertEquals("v.io/v23/verror.NoExist", vError.id); assertTrue(exceptionThrown);
assertNotNull(batchHandle); assertNotNull(collections); assertEquals(0, collections.size());
assertNotNull(marker); assertTrue(marker.length > 0);
assertEquals(1, mList.size()); assertEquals(THING0, mList.get(0));
assertEquals(id1, id1);
assertNotNull(s); assertFalse(s.isEmpty());
assertNotNull(collections); assertEquals(0, collections.size());
assertTrue(Service.listDatabases().isEmpty());
assertEquals(0, mList.size());
assertFalse(mManager.granted(REQUEST_CODE, REQUIRED_PERMS, denied));
assertNotNull(syncgroups); assertEquals(0, syncgroups.size());
assertFalse(mManager.granted(REQUEST_CODE, REQUIRED_PERMS, notEnough));
assertFalse(mManager.haveAllPermissions());
assertEquals("v.io/v23/verror.NotImplemented", vError.id); assertTrue(exceptionThrown);
assertEquals(1, mList.size()); assertEquals(0, mList.size());
assertNotEquals(id1, id2);
assertEquals( SCRATCH_DIR + "/camera_0033.jpg", mBitMapper.makeCameraPhotoFile(33).toString());
assertEquals("string", Util.Encode("string")); assertEquals("part1%2Fpart2", Util.Encode("part1/part2")); assertEquals("part1%25part2", Util.Encode("part1%part2"));
assertEquals(0, mList.size());
assertEquals("v.io/v23/verror.NoExist", vError.id); assertNotNull(vError.message); assertNotNull(vError.stack); assertEquals(0, vError.actionCode); assertTrue(exceptionThrown);
assertTrue(mManager.haveAllPermissions());
assertEquals("v.io/v23/verror.NoExist", vError.id); assertTrue(exceptionThrown);
assertNotNull(marker); assertTrue(marker.length > 0);
assertFalse(db.exists()); assertTrue(db.exists());
assertTrue(mManager.haveAllPermissions());
assertNotNull(server); assertEquals(AUTHOR, data.getAuthor()); assertEquals(CAPTION, data.getCaption()); assertEquals(CREATION_TIME.getMillis(), data.getCreationTime());
assertEquals("v.io/v23/verror.NotImplemented", vError.id); assertTrue(exceptionThrown);
assertEquals("a/b/c", Util.NamingJoin(Arrays.asList("a", "b", "c")));
assertEquals(0, mList.size());
assertEquals("world", mData.get("Hello")); assertEquals("Seattle", mData.get("Hello")); assertEquals("moon", mData.get("Goodnight")); assertFalse("Delete change", mData.containsKey("Hello"));
assertEquals(0, mList.size());
assertTrue(s.contains("Default Blessings"));
assertEquals("v.io/v23/verror.NoExist", vError.id); assertTrue(exceptionThrown);
assertEquals( MomentAdCampaign.INTERFACE_NAME, mCampaign.getInterfaceName());
assertEquals("v.io/v23/verror.Exist", vError.id); assertNotNull(vError.message); assertNotNull(vError.stack); assertEquals(0, vError.actionCode); assertTrue(exceptionThrown);
assertTrue(Service.ListDatabases().isEmpty());
assertEquals("v.io/v23/verror.NoExist", vError.id); assertTrue(exceptionThrown);
assertNotNull(collections); assertEquals(2, collections.size()); assertEquals(collectionId1.encode(), collections.get(0).encode()); assertEquals(collectionId2.encode(), collections.get(1).encode());
assertTrue(mManager.haveAllPermissions());
assertEquals("", mCampaign.getMountName());
assertTrue(mManager.granted(REQUEST_CODE, REQUIRED_PERMS, granted));
assertFalse(mManager.granted(REQUEST_CODE + 1, REQUIRED_PERMS, granted));
assertNotNull(versionedPermissions1); assertTrue(versionedPermissions1.version.length() > 0); assertTrue(json.contains("Admin")); assertEquals("1", versionedPermissions2.version); assertEquals(json, new String(versionedPermissions2.permissions.json));
assertEquals(2, mList.size()); assertEquals(0, mList.size());
assertEquals( map.get( "a" ), "b" );
assertFalse( envelopeSet.isEmpty() );
assertFalse( result.contains( "<" ) ); assertFalse( result.contains( "script" ) );
assertEquals( payload, response );
assertThat( host.toString(), containsString( PEER_ID ) );
assertEquals( PEER_ID, host.getPeerId() );
assertEquals( LOCAL_PEER_ID, localPeer.getId() );
assertEquals( customObject, message.getPayload( CustomObject.class ) );
assertEquals( TEMPLATE_NAME, containerHostEntity.getTemplateName() );
assertTrue( Thread.interrupted() );
assertTrue( localPeer.isConnected( containerHost.getContainerId() ) ); assertFalse( localPeer.isConnected( containerHost.getContainerId() ) ); assertFalse( localPeer.isConnected( containerHost.getContainerId() ) );
assertEquals( commandResult, result );
assertNotNull( keyManager.prepareKeyPairGeneration( KeyPairType.RSA, 1024 ) );
assertTrue( containerHostEntity.isLocal() );
assertEquals( EnvironmentManagerImpl.MODULE_NAME, environmentManager.getName() );
assertEquals( PEER_ID, environmentContainer.getPeerId() );
assertEquals( containerHostInfo, containerHostInfo2 ); assertFalse( containerHostInfo.equals( new Object() ) ); assertNotEquals( containerHostInfo, containerHostInfo3 ); assertEquals( containerHostInfo2, map.get( containerHostInfo ) );
assertEquals( containerHost, localPeer.getContainerHostByHostName( CONTAINER_HOST_NAME ) );
assertTrue( environmentManager.isPeerInUse( TestHelper.PEER_ID ) ); assertTrue( environmentManager.isPeerInUse( TestHelper.PEER_ID ) ); assertTrue( environmentManager.isPeerInUse( TestHelper.PEER_ID ) );
assertNotNull( task.call() );
assertNotNull( registrationManager.requestDataService );
assertFalse( workflows.isEmpty() );
assertNotNull( environment.getContainerHostById( CONTAINER_ID ) );
assertThat( armored, startsWith( "-----BEGIN PGP MESSAGE-----" ) );
assertTrue( environmentManager.listeners.contains( listener ) );
assertEquals( HealthService.State.LOADING, healthRestService.getState() ); assertEquals( HealthService.State.FAILED, healthRestService.getState() ); assertEquals( HealthService.State.READY, healthRestService.getState() );
assertEquals( 1.0, result, DELTA ); assertEquals( 4.0, result, DELTA );
assertNotNull( message.getId() );
assertEquals( INITIATOR_ID, environmentContainer.getInitiatorPeerId() );
assertEquals( PEER_ID, environment.getPeerId() );
assertFalse( environment.getContainerHosts().isEmpty() );
assertEquals( CONTAINER_ID, environmentContainer.getId() );
assertTrue( hosts.contains( JsonUtil.fromJson( INFO_JSON, ResourceHostInfoModel.class ) ) );
assertEquals( OWNER_ID, localPeer.getOwnerId() );
assertNotNull( registry.getContainerHostInfoByContainerName( CONTAINER_HOSTNAME ) );
assertEquals( 0, daoManager.mergeExt( null, object ) );
assertEquals( 4, allHandlers.size() ); assertEquals( highId, id ); assertEquals( normalId, id ); assertEquals( nullHandlerId, id ); assertEquals( lowId, id ); assertEquals( 4, allHandlers.size() ); assertEquals( highHandler, h ); assertEquals( normalHandler, h ); assertEquals( null, h ); assertEquals( lowHandler, h );
assertFalse( environment.getP2pIps().isEmpty() );
assertEquals( CONTAINER_HOST_STATE, containerHostEntity.getState() );
assertFalse( remotePeer.isLocal() );
assertFalse( info.isEmpty() ); assertEquals( CONTAINER_HOSTNAME, containerHostInfo.getHostname() ); assertEquals( CONTAINER_ID, containerHostInfo.getId() ); assertEquals( CONTAINER_STATUS, containerHostInfo.getState() );
assertEquals( EnvironmentStatus.EMPTY, environment.getStatus() );
assertTrue( ipUtil.isValidIPRange( "*", "*", "172.5.5.5.5" ) ); assertTrue( ipUtil.isValidIPRange( "10.10.10.1", "10.10.10.10", "10.10.10.5" ) );
assertNotNull( PGPKeyUtil.readPublicKey( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.PUBLIC_KEYRING ) ) );
assertTrue( result );
assertNotNull( requestBuilder.getTimeout() );
assertTrue( environment.getContainerHosts().contains( environmentContainer ) );
assertFalse( envelopeSet.isEmpty() );
assertEquals( Response.Status.OK.getStatusCode(), response.getStatus() ); assertTrue( !pov.isEmpty() );
assertEquals( 1, daoManager.mergeExt( entityManager, object ) );
assertTrue( subscribersIds.contains( SUBSCRIBER_ID ) );
assertTrue( localPeer.isLocal() );
assertTrue( environmentContainer.getTags().contains( TAG ) );
assertEquals( NEW_HOSTNAME, step.getNewHostname() ); assertNotSame( NEW_HOSTNAME, step.getOldHostname() );
assertTrue( getSysOut().contains( ID ) );
assertFalse( environmentManager.alertHandlers.containsValue( alertHandler ) );
assertTrue( environmentSet.contains( environment ) );
assertFalse( done ); assertTrue( done );
assertNotNull( cacheEntry.getValue() );
assertEquals( resourceHost, localPeer.getResourceHostById( RESOURCE_HOST_ID ) );
assertEquals( requestedHosts.iterator().next(), registrationManager.getRequest( REQUEST_ID ) );
assertEquals( environmentId, environmentAlertHandlers.getEnvironmentId() );
assertEquals( PeerActionResponse.Ok().getType(), response.getType() ); assertEquals( PeerActionResponse.Fail().getType(), response.getType() );
assertNotNull( step.buildContainerEntity( TestHelper.PEER_ID, cloneResponse ) );
assertFalse( ifaces.isEmpty() );
assertEquals( HostArchitecture.AMD64, environmentContainer.getArch() );
assertEquals( Response.Status.ACCEPTED.getStatusCode(), response.getStatus() );
assertEquals( "chmod 700 /root/.ssh/authorized_keys && sed -i \'s/\\\\bOLD\\\\b/NEW/g\' /root/.ssh/authorized_keys " + "&& chmod 644 /root/.ssh/authorized_keys", localPeerCommands.getChangeHostnameInAuthorizedKeysCommand( "OLD", "NEW" ).build( "ID" ).getCommand() );
assertEquals( SOURCE_PEER_ID, message.getSourcePeerId() );
assertNotNull( commands.getGetP2pVersionCommand() );
assertTrue( verifyTokenSignature(token) );
assertNotNull( commands.getResetP2PSecretKey( P2P_HASH, SECRET_KEY, Common.DEFAULT_P2P_SECRET_KEY_TTL_SEC ) );
assertEquals( 0, daoManager.mergeExt( entityManager, object ) );
assertTrue( getSysOut().contains( CONTAINER_NAME ) );
assertNotNull( privateKey );
assertFalse( monitorDao.findHandlersByEnvironment( ENVIRONMENT_ID ).contains( SUBSCRIBER_ID ) );
assertNotNull( existingHost );
assertTrue( getSysOut().contains( PEER_ID ) );
assertEquals( 3, allHandlers.size() ); assertEquals( highHandler, h ); assertEquals( normalHandler, h ); assertEquals( lowHandler, h );
assertNotNull( PGPEncryptionUtil.getPrivateKey( secretKey, SECRET_PWD ) ); assertNull( PGPEncryptionUtil.getPrivateKey( secretKey, "" ) );
assertNull( accessControlInterceptor.authenticateAccess( message, request ) );
assertTrue( StringUtil.isValidSshPublicKey( SSH_KEY ) );
assertEquals( host1, host ); assertFalse( host.equals( host1 ) );
assertNotNull( result );
assertEquals( true, printPublicKeySignatures( firstPublicKeyRing.getPublicKey(), secondPublicKeyRing.getPublicKey() ) );
assertEquals( ContainerSize.SMALL, environmentContainer.getContainerSize() );
assertTrue( peerSet.contains( localPeer ) );
assertEquals( HOSTNAME, environmentContainer.getHostname() );
assertNull( workflow.VALIDATE() ); assertEquals( ContainerDestructionWorkflow.ContainerDestructionPhase.DESTROY_CONTAINER, workflow.VALIDATE() );
assertEquals( template, environmentContainer.getTemplate() );
assertTrue( PGPKeyUtil.isValidKeyId( longKeyId ) ); assertFalse( PGPKeyUtil.isValidKeyId( "blablabla" ) );
assertEquals( template, containerHostEntity.getTemplate() );
assertEquals( CONTAINER_ID, environmentContainer.getId() );
assertEquals( ARCH, host.getArch() );
assertFalse( hostInterface instanceof NullHostInterface ); assertNotNull( hostInterface );
assertEquals( resourceHost, localPeer.getResourceHostByHostName( RESOURCE_HOST_NAME ) );
assertNotNull( environment.getP2PHash() );
assertThat( armored, startsWith( "-----BEGIN PGP MESSAGE-----" ) );
assertFalse( environmentManager.getEnvironmentAlertHandlers( TestHelper.ENVIRONMENT_ID ).getAllHandlers() .isEmpty() );
assertEquals( response, resp );
assertThat( getSysOut(), containsString( containerHostInfo.toString() ) ); assertThat( getSysOut(), containsString( containerHostInfo.toString() ) ); assertEquals( "Host is not connected", getSysOut() );
assertNotNull( PGPKeyUtil .readSecretKeyRing( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.SECRET_KEYRING ) ) );
assertEquals( peerDataPk2, peerDataPk ); assertThat( peerDataPk3, not( peerDataPk ) ); assertThat( peerDataPk4, not( peerDataPk ) ); assertFalse( peerDataPk.equals( new Object() ) );
assertEquals( LOCAL_PEER_NAME, localPeer.getName() );
assertNotNull( privateKey );
assertThat( getSysOut(), containsString( resourceHostInfo.toString() ) ); assertThat( getSysOut(), containsString( resourceHostInfo.toString() ) ); assertEquals( "Host is not connected", getSysOut() );
assertThat( toString, containsString( HOST_HOSTNAME ) ); assertThat( toString, containsString( HOST_ID ) ); assertThat( toString, containsString( CONTAINER_HOSTNAME ) ); assertThat( toString, containsString( CONTAINER_IP ) ); assertThat( toString, containsString( CONTAINER_ID ) ); assertThat( toString, containsString( CONTAINER_STATUS.name() ) ); assertThat( toString, containsString( ARCH.name() ) );
assertTrue( PGPKeyUtil.isValidPublicKeyring( PGPKeyUtil.exportAscii( pgpPublicKey ) ) ); assertFalse( PGPKeyUtil.isValidPublicKeyring( "blablabla" ) );
assertEquals( Common.LOCAL_HOST_IP, environmentContainer.getIp() );
assertTrue( PGPEncryptionUtil.verifyClearSign( message.getBytes(), pubKeyRing ) );
assertFalse( environmentManager.alertHandlers.containsValue( alertHandler ) ); assertTrue( environmentManager.alertHandlers.containsValue( alertHandler ) );
assertEquals( res.getStateLinks(), res2.getStateLinks() );
assertEquals( PGPKeyUtil.getShortKeyId( fingerprint ).length(), 8 );
assertNotNull( commands.getJoinP2PSwarmCommand( INTERFACE_NAME, LOCAL_IP, P2P_HASH, SECRET_KEY, Common.DEFAULT_P2P_SECRET_KEY_TTL_SEC, "0-65535" ) );
assertEquals( CommandStatus.SUCCEEDED, commandProcess.status ); assertEquals( CommandStatus.KILLED, commandProcess.status );
assertEquals( Response.Status.OK.getStatusCode(), response.getStatus() );
assertEquals( localPeer, peerManager.getPeer( PEER_ID ) );
assertEquals( HOSTNAME, host.getHostname() );
assertEquals( RECIPIENT, requestListener.getRecipient() );
assertEquals( STATE, environmentContainer.getState() );
assertEquals( host1.hashCode(), host.hashCode() );
assertEquals(session , validSession);
assertArrayEquals( registrationManager.getRequests().toArray(), requestedHosts.toArray() );
assertEquals( ContainerHostState.RUNNING, state ); assertEquals( ContainerHostState.UNKNOWN, state );
assertFalse( environmentManager.getRegisteredAlertHandlers().isEmpty() );
assertEquals( 0, daoManager.removeExt( null, object ) );
assertNotNull( environment.getId() );
assertTrue( localPeer.getResourceHosts().contains( resourceHost ) );
assertNotNull( disk ); assertEquals( 5, disk.keySet().size() ); assertEquals( 3.00056576E8, available, 0.0001 ); assertEquals( 1.02330368E9, total, 0.0001 ); assertEquals( 6.52783616E8, used, 0.0001 );
assertTrue( localPeer.isReady() );
assertNotNull( keyManager.generatePublicKeyPair( keyPair ) );
assertFalse( result.contains( "<" ) ); assertFalse( result.contains( ">" ) ); assertTrue( result.contains( "&lt;" ) );
assertTrue( peers.contains( localPeer ) );
assertTrue( PGPKeyUtil.isLongKeyId( longKeyId ) ); assertFalse( PGPKeyUtil.isLongKeyId( shortKeyId ) );
assertEquals( CommandStatus.TIMEOUT, commandProcess.status );
assertTrue( environment.getPeers().contains( peer ) );
assertTrue( StringUtil.containsHtml( htmlString ) ); assertFalse( StringUtil.containsHtml( nonHtmlString ) );
assertEquals( containerHost, containerHost1 );
assertEquals( PEER_ID, environmentPeer.getPeerId() );
assertEquals( Response.Status.OK.getStatusCode(), response.getStatus() ); assertNotNull( pov );
assertNotNull( PGPEncryptionUtil .findPublicKeyById( new ByteArrayInputStream( keyPair.getPubKeyring() ), keyPair.getSubKeyId() ) ); assertNotNull( PGPEncryptionUtil .findSecretKeyByFingerprint( new ByteArrayInputStream( keyPair.getSecKeyring() ), keyPair.getPrimaryKeyFingerprint() ) );
assertEquals( Common.LOCAL_HOST_IP, hostInterface.getIp() );
assertEquals( 2, containerInfos.size() );
assertNotNull( person ); assertEquals( "Subutai", person.get( "name" ).asText() );
assertEquals( alertListener, alertNotifierArgumentCaptor.getValue().listener ); assertEquals( alert, alertNotifierArgumentCaptor.getValue().alert );
assertNotNull( localPeer.createResourceHostDataService() );
assertNotNull( requestBuilder.withType( RequestType.EXECUTE_REQUEST ) );
assertEquals( VLAN, environmentPeer.getVlan() );
assertEquals( PGPKeyUtil.encodeNumericKeyId( 123 ).length(), 16 );
assertEquals( "sed -i \'s/\\\\bOLD\\\\b/NEW/g\' /etc/hosts && sed -i \'s/\\\\bOLD.intra.lan\\\\b/NEW.intra.lan/g\' /etc/hosts", localPeerCommands.getChangeHostnameInEtcHostsCommand( "OLD", "NEW" ).build( "ID" ).getCommand() );
assertNotNull( keyManager.generatePublicKeyPairBytes() );
assertThat( message.toString(), containsString( SOURCE_PEER_ID ) ); assertThat( message.toString(), containsString( SENDER ) );
assertEquals( MessageStatus.NOT_FOUND, status ); assertEquals( MessageStatus.EXPIRED, status ); assertEquals( MessageStatus.IN_PROCESS, status ); assertEquals( MessageStatus.SENT, status );
assertEquals( container, task.getContainerHost() );
assertEquals( environment, environmentContainer.getEnvironment() );
assertEquals( 1, daoManager.startTransaction( entityManager ) );
assertFalse( alertListeners.contains( alertListener ) );
assertEquals( resourceHostInfo, resourceHostInfo2 ); assertFalse( resourceHostInfo.equals( new Object() ) ); assertNotEquals( resourceHostInfo, resourceHostInfo3 ); assertEquals( resourceHostInfo2, map.get( resourceHostInfo ) );
assertEquals( 1, daoManager.persistExt( entityManager, object ) );
assertNotNull( registry.getHostInfoById( CONTAINER_ID ) ); assertNotNull( registry.getHostInfoById( HOST_ID ) );
assertNotNull( existingHost );
assertNotNull( template );
assertNotNull( blockingCommandCallback.getCompletionSemaphore() );
assertTrue( host.getLastHeartbeat() == 0 );
assertEquals( resourceHost, localPeer.getResourceHostByContainerHostName( CONTAINER_HOST_NAME ) );
assertNotNull( commands.getP2PConnectionsCommand() );
assertTrue( environments.contains( environment ) );
assertNotNull( environment.getEnvironmentId() );
assertEquals( resourceHost, localPeer.findHost( RESOURCE_HOST_ID ) ); assertEquals( containerHost, localPeer.findHost( CONTAINER_HOST_ID ) );
assertTrue( containers.contains( environmentContainer ) );
assertEquals( securityManager, channelManager.getSecurityManager() );
assertNotNull( requestBuilder.withEnvVars( myMap ) );
assertEquals( RECIPIENT_NAME, messageListener.getRecipient() );
assertEquals( peerId, payload.getSourcePeerId() );
assertEquals( "log", getSysOut() );
assertNotNull( requestBuilder.withRunAs( "test" ) );
assertNotNull( existingHost );
assertTrue( json.toString().contains( "arr" ) ); assertTrue( json.toString().contains( "one" ) ); assertTrue( json.toString().contains( "two" ) );
assertNotNull( existingHost );
assertFalse( subutaiAppender.requiresLayout() );
assertTrue( environment.isMember( peer ) );
assertEquals( new RequestBuilder( "subutai info system" ), commands.getRhMetricCommand() );
assertEquals( request, request2 );
assertEquals( Response.Status.NOT_FOUND.getStatusCode(), response.getStatus() );
assertTrue( localPeer.isOnline() );
assertTrue( environments.contains( environment ) );
assertNotNull( requestBuilder.withStdErrRedirection( OutputRedirection.RETURN ) );
assertEquals( 1, daoManager.commitTransaction( entityManager ) );
assertNotNull( publicKey );
assertNotNull( keyManager.generateKeyPair( keyPairGenerator ) );
assertEquals( 1, daoManager.closeEntityManager( entityManager ) );
assertEquals( Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus() );
assertTrue( environment.getCreationTimestamp() > 0 );
assertTrue( PGPKeyUtil.isFingerprint( fingerprint ) ); assertFalse( PGPKeyUtil.isFingerprint( "blablabla" ) );
assertTrue( alertListeners.contains( alertListener ) );
assertEquals( RESULT_RDS, rdServer );
assertNotNull( PGPKeyUtil.readPublicKey( PGPEncryptionUtil.armorByteArrayToString( IOUtils.toByteArray( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.PUBLIC_KEYRING ) ) ) ) );
assertEquals( response, responseWrapper.getResponse() );
assertTrue( isDekstop );
assertFalse( resultSpace.contains( "<" ) ); assertTrue( resultSpace.contains( "script" ) ); assertTrue( resultSpace.contains( " " ) ); assertFalse( resultNoSpace.contains( " " ) );
assertFalse( p2PConnections.getConnections().isEmpty() );
assertEquals( -1, containerHostInfo.compareTo( null ) ); assertEquals( 0, containerHostInfo.compareTo( containerHostInfo2 ) );
assertNotNull( environmentManager.loadEnvironment( TestHelper.ENV_ID ) );
assertTrue( containerHosts.contains( containerHost ) );
assertTrue( host.getLastHeartbeat() > lastHeartBeat );
assertEquals( -1, resourceHostInfo.compareTo( null ) ); assertEquals( 0, resourceHostInfo.compareTo( resourceHostInfo2 ) );
assertNotNull( requestBuilder.withStdOutRedirection( OutputRedirection.NO ) );
assertNotNull( requestBuilder.daemon() );
assertNotNull( resourceHostInfo ); assertFalse( resourceHostInfo.getContainers().isEmpty() );
assertEquals( CommandStatus.RUNNING, commandProcess.status );
assertNotNull( PGPKeyUtil.readSecretKeyRingInputStream( IOUtils.toByteArray( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.SECRET_KEYRING ) ) ) );
assertEquals( 0, daoManager.persistExt( null, object ) );
assertEquals( HostMetricsDto.HostType.CONTAINER_HOST, chMetrics.getHostType() ); assertEquals( HostMetricsDto.HostType.RESOURCE_HOST, rhMetrics.getHostType() );
assertTrue( registry.pingHost( HOST_IP ) ); assertFalse( registry.pingHost( HOST_IP ) ); assertFalse( registry.pingHost( HOST_IP ) );
assertNotNull( cpuDto ); assertEquals( 0.9345833333, cpuDto.getSystem(), 0.0001 ); assertEquals( 3.005, cpuDto.getUser(), 0.0001 ); assertEquals( 0.0, cpuDto.getNice(), 0.0001 ); assertEquals( 95.26708333333335, cpuDto.getIdle(), 0.0001 ); assertEquals( 0.04125000000000002, cpuDto.getIowait(), 0.0001 );
assertNotNull( environment.getContainerHostByHostname( CONTAINER_HOSTNAME ) );
assertTrue(mSeconds >= sessionManager.getSessionTimeout());
assertFalse( templates.isEmpty() );
assertNotNull( requestBuilder.withCmdArgs( "test" ) );
assertNotNull( existingHost );
assertEquals( resourceHost, localPeer.getResourceHostByContainerId( CONTAINER_HOST_ID ) );
assertEquals( HOST_ID, host.getId() );
assertNotNull( keyManager.generatePrivateKeyPair( keyPair ) );
assertNotNull( PGPKeyUtil .readPublicKeyRing( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.PUBLIC_KEYRING ) ) );
assertEquals( ( PGPKeyUtil.getKeyId( new String( fingerprint ) ).length() ), 16 );
assertNotNull( memoryDto ); assertEquals( 1440642129.26984, memoryDto.getActive(), 0.0001 ); assertEquals( 6414672749.71429, memoryDto.getMemFree(), 0.0001 ); assertEquals( 905762913.52381, memoryDto.getCached(), 0.0001 ); assertEquals( 17029022.4761905, memoryDto.getBuffers(), 0.0001 );
assertEquals( RESULT_DESK, deskEnv );
assertEquals( Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus() );
assertTrue( PGPSignatureUtil.isSignedBy( applePublicKey, alicePublicKey ) ); assertFalse( PGPSignatureUtil.isSignedBy( applePublicKey, bobbyPublicKey ) );
assertNotNull( keyManager.generatePrivateKeyPairBytes() );
assertNotNull( requestBuilder.build( UUID.randomUUID().toString() ) );
assertEquals( identityManager, channelManager.getIdentityManager() );
assertEquals( Common.DEFAULT_CONTAINER_INTERFACE, hostInterface.getName() );
assertEquals( 0.9345833333, SeriesHelper.getAvg( cpuSeries, new Tag( "type", "system" ) ), 0.0000001 ); assertEquals( 3.005, SeriesHelper.getAvg( cpuSeries, new Tag( "type", "user" ) ), 0.0000001 ); assertEquals( 853730.013333333, SeriesHelper.getAvg( netSeries, new Tag( "iface", "eth0" ), new Tag( "type", "in" ) ), 0.0000001 );
assertNotNull( message );
assertFalse( info.isEmpty() ); assertTrue( info.contains( containerHostInfo ) );
assertEquals( 1, daoManager.rollBackTransaction( entityManager ) );
assertEquals( 5, rhMetrics.getSeriesByType( SeriesBatch.SeriesType.CPU ).size() ); assertEquals( 2, chMetrics.getSeriesByType( SeriesBatch.SeriesType.CPU ).size() ); assertEquals( 4, rhMetrics.getSeriesByType( SeriesBatch.SeriesType.MEMORY ).size() ); assertEquals( 2, chMetrics.getSeriesByType( SeriesBatch.SeriesType.CPU ).size() ); assertEquals( 15, rhMetrics.getSeriesByType( SeriesBatch.SeriesType.DISK ).size() );
assertNotNull( sshTunnel );
assertNotNull( result );
assertNotNull( environment.getContainerHostsByPeerId( PEER_ID ) );
assertEquals( Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus() );
assertNotNull( template );
assertEquals( EnvironmentStatus.CANCELLED, environment.getStatus() );
assertNotNull( PGPKeyUtil.readPublicKeyRing( IOUtils.toByteArray( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.PUBLIC_KEYRING ) ) ) );
assertFalse( hostInterface instanceof NullHostInterface ); assertNotNull( hostInterface );
assertNotNull( requests );
assertEquals( containerHostInfo.getContainerName(), containerHostEntity.getContainerName() );
assertFalse( tunnels.isEmpty() );
assertNotNull( commands.getCreateTunnelCommand( TUNNEL_NAME, TUNNEL_IP, VLAN_ID, VNI ) );
assertTrue( environment.getContainerHosts().isEmpty() );
assertEquals( callback, commandProcess.getCallback() );
assertFalse( result.contains( ">" ) ); assertFalse( result.contains( "<" ) );
assertThat( toString, containsString( HOSTNAME ) ); assertThat( toString, containsString( IP ) ); assertThat( toString, containsString( ID ) ); assertThat( toString, containsString( CONTAINER_STATUS.name() ) ); assertThat( toString, containsString( ARCH.name() ) );
assertNotNull(session);
assertEquals( TEMPLATE_ID, environmentContainer.getTemplateId() );
assertEquals( localPeer, peerManager.getLocalPeer() );
assertEquals( registrationManager.getRequestDataService(), requestDataService );
assertTrue( monitorDao.findHandlersByEnvironment( ENVIRONMENT_ID ).contains( SUBSCRIBER_ID ) );
assertTrue( result.contains( "<" ) ); assertFalse( result.contains( "&lt;" ) );
assertNotNull( commands.getSetupContainerSshTunnelCommand( LOCAL_IP, Common.CONTAINER_SSH_TIMEOUT_SEC ) );
assertThat( PGPKeyUtil.exportAscii( pgpPublicKey ), startsWith( "-----BEGIN PGP MESSAGE-----" ) );
assertEquals( HOSTNAME, environmentContainer.getContainerName() );
assertThat( getSysOut(), containsString( commandResult.toString() ) );
assertNotNull( environmentManager.getId() );
assertTrue( PGPKeyUtil.isShortKeyId( shortKeyId ) ); assertFalse( PGPKeyUtil.isShortKeyId( longKeyId ) );
assertEquals( containerHost, localPeer.getContainerHostById( CONTAINER_HOST_ID ) );
assertNotNull( PGPKeyUtil.readSecretKey( secretKeyRing ) );
assertFalse( info.isEmpty() ); assertTrue( info.contains( resourceHostInfo ) );
assertTrue( session.getEndDate().getTime() <= currentDate.getTime() ); assertNull( sessionManager.getValidSession(sessionId));
assertFalse( ifaces.isEmpty() );
assertNotNull( person ); assertEquals( "Subutai", person.get( "name" ).asText() ); assertEquals( 50, person.get( "age" ).asInt() ); assertEquals( true, person.get( "legend" ).asBoolean() );
assertNotNull( requestBuilder.withCwd( "test" ) );
assertNotNull( commands.getGetTunnelsCommand() );
assertEquals( originalObject.getPayload(), restoredObject.getPayload() );
assertEquals( 1, daoManager.removeExt( entityManager, object ) );
assertFalse( environmentManager.listeners.contains( listener ) );
assertTrue( PGPEncryptionUtil.verifySignature( contentAndSignatures, secretKeys.getPublicKey() ) );
assertNotNull( rhId ); assertEquals( RH_ID, rhId.getId() );
assertTrue( environmentContainer.isConnected() );
assertNotSame( hosts, registry.hosts );
assertEquals( request, requestWrapper.getRequest() );
assertEquals( 512.0, quota.get( ContainerResourceType.RAM ).getAsRamResource().getResource().getValue( ByteUnit.MB ) .doubleValue() ); assertEquals( 25.0, quota.get( ContainerResourceType.CPU ).getAsCpuResource().getResource().getValue().doubleValue() ); assertEquals( 1.0, quota.get( ContainerResourceType.DISK ).getAsDiskResource().getResource().getValue( ByteUnit.MB ) .doubleValue() );
assertTrue( StringUtil.isValidEmail( "valid@email.com" ) ); assertFalse( StringUtil.isValidEmail( "invalidemail@com" ) ); assertFalse( StringUtil.isValidEmail( null ) ); assertFalse( StringUtil.isValidEmail( "" ) );
assertEquals( ENV_NAME, environment.getName() );
assertNotNull( PGPKeyUtil.readSecretKeyRing( IOUtils.toByteArray( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.SECRET_KEYRING ) ) ) );
assertNull(slf4jRepositoryNode.getChildNode("child1")); assertTrue(slf4jRepositoryNode.getLogger().isDebugEnabled());
assertEquals( src.d[15+row*7+col],dst.d[19+row*8+col], DeepBoofConstants.TEST_TOL_F32);
assertEquals(expected,found,DeepBoofConstants.TEST_TOL_F64);
assertEquals(2.0f,a.d[i], DeepBoofConstants.TEST_TOL_F32); assertEquals(2.0f,a.d[i], DeepBoofConstants.TEST_TOL_F32); assertEquals(3.0f,a.d[a.startIndex+i], DeepBoofConstants.TEST_TOL_F32);
assertTrue(float.class == T.getDataType());
assertEquals( original.getAtIndex(i) , T.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F64 ); assertEquals( original.getAtIndex(i)*s , O.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F64 );
assertTrue(first == alg.findInput().node);
assertEquals( src.d[15+row*7+col],dst.d[19+row*8+col], DeepBoofConstants.TEST_TOL_F64);
assertEquals(0, TensorOps.sumTensorLength(shapes)); assertEquals(3, TensorOps.sumTensorLength(shapes)); assertEquals(13, TensorOps.sumTensorLength(shapes));
assertFalse(alg.isClipped());
assertEquals(3,alg.getClippingOffsetRow(0)); assertEquals(2,alg.getClippingOffsetRow(1)); assertEquals(0,alg.getClippingOffsetRow(3)); assertEquals(0,alg.getClippingOffsetRow(9)); assertEquals(-1,alg.getClippingOffsetRow(10)); assertEquals(-2,alg.getClippingOffsetRow(11));
assertEquals(0, TensorOps.tensorLength()); assertEquals(0, TensorOps.tensorLength(5,0)); assertEquals(5, TensorOps.tensorLength(5,1)); assertEquals(5, TensorOps.tensorLength(5)); assertEquals(12, TensorOps.tensorLength(2,3,2));
assertTrue(ordered.get(i)==found.get(i));
assertFalse(F.subtensor); assertTrue(F.isShape(2,5));
assertEquals(1,alg.getClippingOffsetCol(0)); assertEquals(0,alg.getClippingOffsetCol(1)); assertEquals(0,alg.getClippingOffsetCol(3)); assertEquals(-1,alg.getClippingOffsetCol(4)); assertEquals(-2,alg.getClippingOffsetCol(5));
assertTrue(tensor.isShape(10,5,6,7)); assertFalse(tensor.isShape(shape)); assertTrue(tensor.isShape(foo.getShape()));
assertEquals(12,T.innerArrayLength());
assertEquals( original.getAtIndex(i)*s , T.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F64 );
assertEquals(2,alg.ROW0); assertEquals(1,alg.COL0); assertEquals(8,alg.ROW1); assertEquals(8,alg.COL1);
assertTrue(tensor.isShape(found.getShape())); assertTrue(7 == found.data[5]);
assertEquals(2.0,a.d[i], DeepBoofConstants.TEST_TOL_F64); assertEquals(2.0,a.d[i], DeepBoofConstants.TEST_TOL_F64); assertEquals(3.0,a.d[a.startIndex+i], DeepBoofConstants.TEST_TOL_F64);
assertFalse(F.subtensor); assertTrue(F.isShape(2,5));
assertFalse(alg.isClipped());
assertFalse(F.subtensor); assertTrue(F.isShape(2,5));
assertEquals( original.getAtIndex(i) , T.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F32 ); assertEquals( original.getAtIndex(i)*s , O.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F32 );
assertTrue(int.class == T.getDataType());
assertEquals(1,alg.getClippingOffsetCol(0)); assertEquals(0,alg.getClippingOffsetCol(1)); assertEquals(0,alg.getClippingOffsetCol(3)); assertEquals(-1,alg.getClippingOffsetCol(4)); assertEquals(-2,alg.getClippingOffsetCol(5));
assertTrue(long.class == T.getDataType());
assertEquals(3,alg.getClippingOffsetRow(0)); assertEquals(2,alg.getClippingOffsetRow(1)); assertEquals(0,alg.getClippingOffsetRow(3)); assertEquals(0,alg.getClippingOffsetRow(9)); assertEquals(-1,alg.getClippingOffsetRow(10)); assertEquals(-2,alg.getClippingOffsetRow(11));
assertTrue(byte.class == T.getDataType());
assertEquals(expected,found,DeepBoofConstants.TEST_TOL_F32);
assertEquals(2, TensorOps.outerLength(shape,3)); assertEquals(6, TensorOps.outerLength(shape,2)); assertEquals(12, TensorOps.outerLength(shape,1)); assertEquals(60, TensorOps.outerLength(shape,0));
assertEquals(true,sub.subtensor); assertEquals(5,sub.startIndex); assertEquals(2,sub.shape.length); assertEquals(2,sub.shape[0]); assertEquals(5,sub.shape[1]);
assertEquals(tensor.strides[i],tensor.stride(i)); assertEquals(tensor.strides[4-i-1],tensor.stride(-i-1));
assertEquals(12,T.innerArrayLength());
assertEquals(12,T.innerArrayLength());
assertFalse(F.subtensor); assertTrue(F.isShape(2,5));
assertEquals(12,T.innerArrayLength());
assertFalse(F.subtensor); assertTrue(F.isShape(2,5));
assertTrue(alg.isClipped());
assertTrue(double.class == T.getDataType());
assertTrue(alg.isClipped());
assertEquals(0,alg.sequence.get(0).depth); assertEquals(1,alg.sequence.get(1).depth); assertEquals(1,alg.sequence.get(2).depth); assertEquals(2,alg.sequence.get(3).depth); assertEquals(3,alg.sequence.get(4).depth); assertEquals(4,alg.sequence.get(5).depth);
assertEquals(12,T.innerArrayLength());
assertEquals(3,found.length); assertEquals(3,found[0]); assertEquals(4,found[1]); assertEquals(1,found[2]);
assertEquals(4, tensor.length(0)); assertEquals(3, tensor.length(1)); assertEquals(2, tensor.length(2)); assertEquals(sub, tensor.isSub()); assertTrue(v != 0); assertTrue(Math.abs(sum) < 4*3*2/2.0);
assertEquals(4, tensor.length(0)); assertEquals(3, tensor.length(1)); assertEquals(2, tensor.length(2)); assertEquals(sub, tensor.isSub()); assertTrue(v != 0); assertTrue(Math.abs(sum) < 4*3*2/2.0f);
assertEquals( original.getAtIndex(i)*s , T.getAtIndex(i) , DeepBoofConstants.TEST_TOL_F32 );
assertTrue(ordered.get(i)==found.get(i));
assertNotNull(instance); assertNull(instance.getBars()); assertNull(instance.getFoo()); assertEquals(toString(), instance.getFoo()); assertEquals(Collections.singletonList("bar"), instance.getBars()); assertNull(instance.getBars()); assertNull(instance.getFoo());
assertNotNull(enhanced); assertTrue(enhanced instanceof Persistent); assertTrue(enhanced instanceof Snapshot); assertSame(sampleClass, enhanced);
assertEquals(toString(), testObject2.getFoo()); assertEquals(bar, testObject2.getBar()); assertNotSame(testObject2, enhanced); assertNotNull(enhanced); assertEquals(toString(), enhanced.getFoo()); assertEquals(bar, enhanced.getBar()); assertNull(enhanced.getFoo()); assertEquals(0L, enhanced.getBar());
assertNotSame(SampleClass.class, enhancer.getEnhancedClass());
assertEquals("bar", enhanced.getFoo()); assertNull(enhanced.getFoo()); assertEquals(1234L, enhanced.getNumberObject().longValue());
assertEquals("bar", enhanced.getFoo()); assertNull(enhanced.getFoo());
assertNull(enhancer.enhance(null));
assertEquals("AlphaBeta!", beta.toString());
assertNotNull(enhanced); assertTrue(enhanced instanceof Persistent);
assertFalse(defineClass1.isAccessible()); assertFalse(defineClass2.isAccessible()); assertFalse(defineClass1.isAccessible()); assertFalse(defineClass2.isAccessible()); assertEquals("Bug in test", 0, exec.shutdownNow().size()); assertEquals(threads * iterations, newClasses.size()); assertFalse(defineClass1.isAccessible()); assertFalse(defineClass2.isAccessible());
assertEquals("bar", enhanced.getFoo()); assertNull(enhanced.getFoo());
assertThat(stringRepresentation).isEqualTo("123.45");
assertThat(bigDecimal.unscaledValue()).isEqualTo(BigInteger.valueOf(12345)); assertThat(bigDecimal.scale()).isEqualTo(2);
assertNotNull(entity); assertNotNull(p);
assertEquals(SeaCloudsApplicationData.extractAgreementId(toscaDamMap), AGREEMENT_ID);
assertEquals(toscaDamName, DESCRIPTION);
assertNull(deployerResource.getApplication("this-app-doesn\'t-exist").getEntity()); assertNotNull(deployerResource.getApplication(application.getSeaCloudsApplicationId()));
assertEquals(2, extractedRules.size()); assertEquals(6, extractedRules.get("java_ee_server").getMonitoringRules().size()); assertEquals(4, extractedRules.get("db").getMonitoringRules().size());
assertEquals(Double.valueOf(response), 0.7d);
assertNotNull(result);
assertTrue(equalJobs(expected, actual)); assertNull(actual);
assertTrue(list.isEmpty()); assertEquals(list.size(), 3);
assertNotNull(getProxy().removeAgreement(RANDOM_STRING));
assertNotNull(aam); assertNotNull(offerings); assertEquals(res.get("MessageDatabase").size(), 3);
assertEquals(fixture, response);
assertEquals(3, result.getViolations().size());
assertNotNull(getProxy().getGuaranteeTermViolations(agreement, term));
assertEquals(response.getAgreementId(), fixture.getAgreementId());
assertNotNull(aam); assertNotNull(offerings); assertEquals(res.get("db1").size(), 3);
assertTrue(result); assertTrue(job.getEnabled()); assertFalse(result);
assertNotNull(agreement);
assertEquals(sensors.size(), 2);
assertNotNull(application.getName()); assertNotNull(application.getToscaDam()); assertNotNull(application.getAgreementId()); assertNotNull(application.getDeployerApplicationId()); assertNotNull(application.getMonitoringRulesIds());
assertNotNull(entity);
assertNull(list); assertEquals(0, map.get(term).size());
assertNotNull(getProxy().addAgreement(ObjectMapperHelpers.JsonToObject(json, Agreement.class)));
assertNotNull(parser); assertNotNull(res); assertEquals(res.get("webservices").size(), 1); assertEquals(res.get("db1").size(), 4); assertEquals(res.get("www").size(), 3);
assertEquals(fixture, response);
assertTrue(result); assertFalse(job.getEnabled()); assertFalse(result);
assertEquals(fixture.getId(), response.getId());
assertNotNull(parser); assertNotNull(t); assertNotNull(offering); assertNotNull(reqModule); assertNotNull(matchmakeRes); assertEquals(1, matchmakeRes.size()); assertEquals(1, matchmakeRes.get("moduleReq").size()); assertNotNull(offProp); assertNotNull(reqProp);
assertEquals(oldSize + 1, jobs.size()); assertTrue(equalJobs(expected, actual));
assertEquals(dam, getProxy().getDam(adp));
assertEquals(newApp.getToscaDam(), applicationData.getToscaDam());
assertEquals(fixture, response);
assertEquals(1, map.get(term).size());
assertEquals(list.size(), 3); assertEquals(list.size(), 2);
assertTrue(stored.getId() != null); assertEquals(job.getEnabled(), stored.getEnabled()); assertEquals(job.getFirstExecuted(), stored.getFirstExecuted()); assertEquals(job.getLastExecuted(), stored.getLastExecuted());
assertNotNull(coreResource.getSeaCloudsInformation().getEntity());
assertNotNull(penalties);
assertEquals(sensors.size(), 5);
assertTrue(equalJobs(expected, actual)); assertNull(actual);
assertEquals(agreement.getGuaranteeTerms().get(0).getStatus(), a.getGuaranteeTerms().get(0).getStatus());
assertNotNull(resource.getAdps(getTopology()).getEntity());
assertEquals(dataStore.listSeaCloudsApplicationData().size(), INITIAL_DATASTORE_SIZE);
assertEquals(1, map.get(term).size()); assertEquals(1435136856709L, item.getDate().getTime()); assertEquals("AverageDatabaseCPUUtilizationViolated", item.getMetricKey()); assertEquals("0.022784559188465933e0", item.getMetricValue());
assertEquals(ObjectMapperHelpers.JsonToObject(json, ApplicationSummary.class), getProxy().getApplication(RANDOM_STRING));
assertEquals(adps, getProxy().getAdps(aam));
assertTrue(stored.getId() != null); assertFalse(stored.getEnabled()); assertNull(stored.getFirstExecuted()); assertNull(stored.getLastExecuted());
assertNotNull(toscaParser); assertTrue(toscaParser instanceof ToscaParser);
assertEquals(oldSize, newSize-1); assertEquals(seaCloudsApplicationData, seaCloudsApplicationDataById);
assertNotNull(response);
assertEquals(response.getAgreementId(), fixture.getAgreementId());
assertEquals(response.getAgreementId(), fixture.getAgreementId());
assertNotNull(result);
assertEquals("0.7", response);
assertNotNull(archiveRoot); assertNotNull(archiveRoot.getArchive()); assertEquals(TOSCA_VERSION, archiveRoot.getArchive().getToscaDefinitionsVersion()); assertEquals(1, archiveRoot.getNodeTypes().size()); assertNull(archiveRoot.getRelationshipTypes());
assertNotNull(entity);
assertNotNull(getProxy().notifyRulesReady(ObjectMapperHelpers.JsonToObject(json, Agreement.class)));
assertEquals(fixture.getId(), response.getId());
assertEquals(SeaCloudsApplicationData.extractMonitoringRulesIds(toscaDamMap), MONITORING_RULES_IDS);
assertSame(type1, petTypes.get(1)); assertSame(type2, petTypes.get(0)); assertSame(petTypes, petTypesAgain);
assertThat(result.isDone()).isTrue(); assertThat(result.get()).isEqualTo(4);
assertEquals("param1=value+1&param2=value+2+&", encodedParams);
assertThat(capturedCallOptions.getValue().getDeadline()).isAtLeast(minExpectedDeadline); assertThat(capturedCallOptions.getValue().getDeadline()).isAtMost(maxExpectedDeadline);
assertEquals("abcd", captor.getValue().get(headerKey)); assertEquals("defg", interceptor.getUserAgentHeader());
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(callIntList.getActualRequests()).containsExactly(3, 4, 5).inOrder(); assertThat(stream).containsExactly(0, 1, 2).inOrder();
assertThat(provider.acceptsPoolSize()).isTrue(); assertThat(provider.acceptsPoolSize()).isFalse();
assertEquals("param1=value+1&param2=value+2+%26", encodedParams);
assertThat(actualError).isNotNull();
assertTrue( GaxGrpcProperties.getDefaultApiClientHeaderPattern() .matcher("gl-java/1.8_00 gapic/1.2.3-alpha gax/1.5.0 grpc/1.7.0") .matches());
assertThat(call.getController().isCancelled()).isFalse(); assertThat(call.getController().isCancelled()).isTrue(); assertThat(actualError).isInstanceOf(WatchdogTimeoutException.class);
assertThat(executor.getIterationsCount()).isEqualTo(5);
assertThat(responseObserver.popNextResponse()).isEqualTo("response1"); assertThat(responseObserver.popNextResponse()).isEqualTo("response2");
assertThat(actualSpanName).isEqualTo(SpanName.of("UnqualifiedService", "ReadRows"));
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(capturedCallOptions.getValue().getDeadline()).isAtLeast(minExpectedDeadline); assertThat(capturedCallOptions.getValue().getDeadline()).isAtMost(maxExpectedDeadline);
assertThat(responseObserver.getValues()).containsExactly(0, 1, 2).inOrder(); assertThat(callIntList.getActualRequests()).containsExactly(3, 4, 5).inOrder();
assertEquals("", encodedParams); assertNotNull(exception);
assertThat(batchingCallSettings.toString()).contains("retryableCodes=" + retryCodes); assertThat(batchingCallSettings.toString()).contains("retrySettings=" + retrySettings); assertThat(batchingCallSettings.toString()).contains("batchingSettings=" + BATCHING_SETTINGS);
assertThat(future.getName()).isEqualTo("myName"); assertThat(future.get()).isEqualTo("theResponse"); assertThat(future.getMetadata().get()).isEqualTo(42);
assertTrue(Pattern.compile("^\\\\d+\\\\.\\\\d+\\\\.\\\\d+").matcher(grpcVersion).find());
assertNotNull(gaxGrpcVersion);
assertTrue( GaxHttpJsonProperties.getDefaultApiClientHeaderPattern() .matcher("gl-java/1.8_00 gapic/1.2.3-alpha gax/1.5.0 httpjson/1.7.0") .matches());
assertThat(opencensusStatus.getDescription()).isEqualTo("timeout"); assertThat(opencensusStatus.getCanonicalCode()).isEqualTo(CanonicalCode.DEADLINE_EXCEEDED);
assertThat(executor.getIterationsCount()).isEqualTo(1);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertEquals( ImmutableMap.of(CallOptionsUtil.REQUEST_PARAMS_HEADER_KEY, encodedRequestParams), headers);
assertThat(responseObserver.isDone()).isTrue();
assertThat(innerCallable.callContext.getExtraHeaders()).isEqualTo(extraHeaders);
assertThat(opencensusStatus.getDescription()).isEqualTo("fake message"); assertThat(opencensusStatus.getCanonicalCode().toString()).isEqualTo(code.toString());
assertThat(capturedCallOptions.getValue().getDeadline()).isEqualTo(priorDeadline);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(callContextCaptor.getValue().getTimeout()).isEqualTo(Duration.ofMillis(10));
assertThat(expected).isInstanceOf(NullPointerException.class);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(actualSpanName).isEqualTo(entry.getValue());
assertThat(result).isEqualTo(2);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(expected).hasCauseThat().isInstanceOf(IOException.class);
assertEquals("", encodedParams);
assertThat(callableCounter.get()).isEqualTo(0); assertThat(callableCounter.get()).isEqualTo(1);
assertThat(batcher.isEmpty()).isFalse(); assertThat(receiver.getBatches()).hasSize(0); assertThat(batcher.isEmpty()).isTrue(); assertThat(receiver.getBatches()).hasSize(1); assertThat(receiver.getBatches().get(0).getIntegers()).isEqualTo(Arrays.asList(14));
assertThat(executor.getIterationsCount()).isEqualTo(iterationsCount);
assertThat(responseObserver.isDone()).isTrue();
assertThat(result.isDone()).isTrue(); assertThat(result.get()).isEqualTo(25);
assertThat(actualError).isNotNull();
assertThat(actualSpanName).isEqualTo(SpanName.of("Bigtable", "ReadRows"));
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(isExecutorCancelled).isFalse(); assertThat(pushBatchRunnable.isCancelled()).isTrue();
assertThat(executor.getIterationsCount()).isEqualTo(1);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertEquals("this is me", HttpHeadersUtils.getUserAgentValue(headersMap)); assertNull(HttpHeadersUtils.getUserAgentValue(headersMap));
assertThat(call.getController().isCancelled()).isFalse(); assertThat(call.getController().isCancelled()).isTrue(); assertThat(actualError).isInstanceOf(WatchdogTimeoutException.class);
assertThat(actualEx).isInstanceOf(NullPointerException.class); assertThat(actualEx).isInstanceOf(IllegalStateException.class);
assertTrue(Pattern.compile("^\\\\d+\\\\.\\\\d+\\\\.\\\\d+").matcher(gaxVersion).find()); assertTrue(major >= 1); assertTrue(minor >= 56);
assertThat(future.get()).isNull();
assertThat(observer.getResponses()).containsExactly(0, 1, 2).inOrder(); assertThat(callIntList.getActualRequests()).containsExactly(3, 4, 5).inOrder();
assertThat(serverCallSettings.toString()).contains("idleTimeout=" + idleTime); assertThat(serverCallSettings.toString()).contains("retryableCodes=" + retryableCodes); assertThat(serverCallSettings.toString()).contains("retrySettings=" + retrySettings);
assertEquals("param1=", encodedParams);
assertThat(result.isDone()).isFalse(); assertThat(result.get()).isEqualTo(36);
assertThat(executor.getIterationsCount()).isEqualTo(iterationsCount - 1);
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(exception).isNotNull(); assertThat(future.isDone()).isTrue(); assertThat(future.isCancelled()).isTrue(); assertThat(future.getInitialFuture().isDone()).isTrue(); assertThat(future.getInitialFuture().isCancelled()).isTrue(); assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(mergedHeaders).containsExactlyEntriesIn(expectedHeaders);
assertEquals(headers, HttpHeadersUtils.setHeaders(headers, headersMap)); assertEquals("CustomHeader", headers.get("Custom-Header")); assertEquals("Accept", headers.getAccept()); assertEquals(Long.valueOf(123L), headers.getContentLength());
assertThat(responseObserver.getFinalError()).isEqualTo(expectedError);
assertThat(expected).isSameInstanceAs(throwable);
assertThat(builder.getRetrySettings().getMaxRetryDelay()).isEqualTo(Duration.ofMinutes(1)); assertThat(builder.build().getRetrySettings().getMaxRetryDelay()) .isEqualTo(Duration.ofMinutes(1));
assertEquals(5, builder.getPoolSize()); assertEquals(10, builder.getPoolSize()); assertEquals(100, builder.getPoolSize());
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(actualError).isInstanceOf(InvalidArgumentException.class); assertThat(((InvalidArgumentException) actualError).isRetryable()).isFalse(); assertThat(actualError2).isInstanceOf(InvalidArgumentException.class); assertThat(((InvalidArgumentException) actualError2).isRetryable()).isTrue();
assertThat(expected).isInstanceOf(IllegalArgumentException.class);
assertThat(future.getName()).isEqualTo("myName"); assertThat(future.getMetadata().get()).isEqualTo(42); assertThat(e.getCause()).isInstanceOf(ApiException.class);
assertThat(batcherStats.asException()).isNull();
assertThat(outerResponseObsever.completed).isTrue(); assertThat(innerCallable.requestObserver.messages).containsExactly("request1", "request2");
assertThat(Pages.<Integer>empty().iterateAll()).isEmpty();
assertEquals(0, attempt.getAttemptCount()); assertEquals(0, attempt.getOverallAttemptCount()); assertEquals(Duration.ZERO, attempt.getRetryDelay()); assertEquals(Duration.ZERO, attempt.getRandomizedRetryDelay()); assertEquals(Duration.ofMillis(1L), attempt.getRpcTimeout()); assertEquals(Duration.ZERO, attempt.getRetryDelay());
assertThat(mergedHeaders).containsExactlyEntriesIn(expectedHeaders);
assertThat(actualError).isNotNull(); assertThat(isMethodInStacktrace(currentMethod, actualError)).isFalse(); assertThat(actualError.getSuppressed()[0]).isInstanceOf(AsyncTaskException.class); assertThat(isMethodInStacktrace(currentMethod, actualError.getSuppressed()[0])).isTrue();
assertThat(executor.getIterationsCount()).isEqualTo(0);
assertThat(unaryCallSettings.toString()).contains("retryableCodes=" + retryableCodes); assertThat(unaryCallSettings.toString()).contains("retrySettings=" + retrySettings);
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "myns:age", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertNotNull( tms.getTileDataLevels() ); assertEquals( tms.getTileDataLevels().size(), 1 );
assertEquals( 0, transformedPoint[0], 0.1 ); assertEquals( 47, transformedPoint[1], 0.1 ); assertEquals( 42, transformedPoint[0], 0.1 ); assertEquals( 0, transformedPoint[1], 0.1 );
assertEquals( 1, metadataUrls.size() );
assertEquals( "foo|bar|baz", join( "|", list1 ) ); assertEquals( "foo | bar | baz", join( " | ", list2 ) );
assertThat( datasetMetadata.size(), is( 3 ) );
assertNull( delete.getHandle() );
assertNull( lockFeature.getHandle() ); assertNull( lockFeature.getExistingLockId() ); assertNull( lockFeature.getExpiryInSeconds() ); assertNull( lockFeature.getLockAll() ); assertEquals( 1, lockFeature.getQueries().size() );
assertEquals( "100", lb.getValue().toString() ); assertEquals( "200", ub.getValue().toString() ); assertEquals( "DEPTH", propName.getAsText() );
assertThat( datasetMetadata.size(), is( 2 ) );
assertThat( nextStartIndex, is( 96 ) );
assertTrue( capabilities.hasLayer( "cite:NamedPlaces" ) );
assertEquals( context.getBean( SingleBean.class ), builder.build() );
assertEquals( "INWATERA_1M.1013", query.getFeatureIds()[0] ); assertEquals( "INWATERA_1M.1014", query.getFeatureIds()[1] ); assertEquals( "INWATERA_1M.1015", query.getFeatureIds()[2] );
assertTrue( xmlStream.isStartElement() ); assertEquals( ISO_RECORD_NS, xmlStream.getNamespaceURI() ); assertEquals( "MD_Metadata", xmlStream.getLocalName() ); assertNotNull( isoRecord.getIdentifier() ); assertEquals( 10, i );
assertEquals( new BigInteger( "60" ), getFeatureWL.getExpiryInSeconds() );
assertThat( dimensions.size(), is( 1 ) ); assertThat( elevationValues.size(), is( 1 ) ); assertThat( elevationValues.get( 0 ).min, is( -5d ) ); assertThat( elevationValues.get( 0 ).max, is( 5d ) ); assertThat( elevationValues.get( 0 ).res, is( 0d ) );
assertTrue( isMatching );
assertTrue( namedLayers.contains( "citelayers" ) ); assertTrue( namedLayers.contains( "cite:Bridges" ) );
assertThat( record, instanceOf( ISORecord.class ) ); assertThat( record.getIdentifier(), is( "655e5998-a20e-66b5-c888-00005553499" ) );
assertEquals( 4, allRecords.getRemaining() );
assertThat( ftMappings.size(), is( 1 ) ); assertThat( mappings.size(), is( 5 ) ); assertThat( featureCDepth0Mapping.size(), is( 2 ) ); assertThat( featureCDepth1, is( nullValue() ) );
assertEquals( "INWATERA_1M.1013", featureQuery.getFeatureIds()[0] );
assertEquals( new QName( WFS_NS, "GetFeature" ), adapter.getRootElement().getQName() );
assertEquals( "SIN", func.getName() ); assertEquals( "DISPERSION_ANGLE", propName.getAsText() ); assertEquals( "1", lit.getValue().toString() );
assertTrue( exception );
assertNotNull( timePosition );
assertTrue( recordResultSet.next() ); assertNotNull( recordResultSet.getRecord() ); assertFalse( recordResultSet.next() );
assertThat( the( os.toString() ), hasXPath( "count(/xs:schema/xs:include)", nsContext(), returningANumber(), is( 2.0 ) ) );
assertEquals( 1, styles.size() ); assertTrue( styles.containsKey( "default" ) );
assertEquals( "urn:ogc:def:EOP:RE00:MSI_IMG_3A:5397721:eoap", actualTargetObject );
assertThat( datasetMetadata, is( notNullValue() ) );
assertEquals( 1, layers.size() );
assertEquals( "5E50884F-5549-2A7A-99E3-334234A887C81", record.getIdentifier() );
assertEquals( "InWaterA_1M/wkbGeom", ( (PropertyName) filterq.getProjectionClauses()[0] ).getPropertyName().getAsText() ); assertEquals( "InWaterA_1M/tileId", ( (PropertyName) filterq.getProjectionClauses()[1] ).getPropertyName().getAsText() ); assertTrue( filter.getOperator() instanceof Within ); assertEquals( "InWaterA_1M/wkbGeom", within.getPropName().getAsText() ); assertTrue( within.getGeometry() instanceof Envelope );
assertEquals( "Theme", merged.getName() ); assertEquals( 0, description.getTitles().size() ); assertEquals( 0, description.getAbstracts().size() ); assertEquals( 0, description.getKeywords().size() ); assertNull( merged.getSpatialMetadata() );
assertEquals( "RoadL_1M.1013", featureLock.getFeatureIds()[0] );
assertTrue( clippedGeometry == null );
assertTrue( lockFeature.getLockAll() ); assertEquals( new BigInteger( "300" ), lockFeature.getExpiryInSeconds() ); assertEquals( 2, queries.size() ); assertTrue( filter1.getOperator() instanceof Within ); assertEquals( "wkbGeom", within.getPropName().getAsText() );
assertThat( htmlException, containsString( EXCEPTION ) ); assertThat( htmlException, containsString( NO_APPLICABLE_CODE ) );
assertThat( storedQueryHandler.hasStoredQuery( GET_FEATURE_BY_ID ), is( true ) ); assertThat( storedQueryHandler.hasStoredQuery( GET_FEATURE_BY_TYPE ), is( true ) ); assertThat( storedQueryHandler.hasStoredQuery( "ByName" ), is( true ) );
assertEquals( 9, MathUtils.previousPowerOfTwo( 511 ) ); assertEquals( 9, MathUtils.previousPowerOfTwo( 512 ) ); assertEquals( 10, MathUtils.previousPowerOfTwo( 513 ) );
assertNull( delete.getHandle() ); assertEquals( new QName( "InWaterA_1M" ), delete.getTypeName() ); assertNotNull( delete.getFilter() );
assertEquals( "InWaterA_1M.1013", query.getFeatureIds()[0] ); assertEquals( "InWaterA_1M.1014", query.getFeatureIds()[1] ); assertEquals( "InWaterA_1M.1015", query.getFeatureIds()[2] );
assertThat( nextStartIndex, is( -1 ) );
assertEquals( 3, allRecords.getRemaining() );
assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );
assertEquals( dft.getHandle(), null ); assertEquals( dft.getOutputFormat(), null ); assertEquals( dft.getTypeNames().length, 2 ); assertEquals( dft.getTypeNames()[0], new QName( "TreesA_1M" ) ); assertEquals( dft.getTypeNames()[1], new QName( "BuiltUpA_1M" ) ); assertEquals( dft.getVersion(), WFSConstants.VERSION_110 );
assertNull( languages );
assertThat( capabilitiesEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( describeFeatureTypeEncodings, hasOnlyItems( "kvp", "xml" ) ); assertThat( getFeatureEncodings, hasOnlyItems( "kvp", "xml" ) ); assertThat( getPropertyValueEncodings.size(), is( 0 ) );
assertThat( nextStartIndex, is( -1 ) );
assertEquals( new QName( APP_NS, "Philosopher" ), value );
assertTrue( isMatching );
assertEquals( new QName( "INWATERA_1M" ), filterQuery.getTypeNames()[0].getFeatureTypeName() ); assertEquals( "INWATERA_1M/WKB_GEOM", ( (PropertyName) filterQuery.getProjectionClauses()[0] ).getPropertyName().getAsText() ); assertEquals( "INWATERA_1M/TILE_ID", ( (PropertyName) filterQuery.getProjectionClauses()[1] ).getPropertyName().getAsText() );
assertTrue( clippedGeometry != null ); assertTrue( !geometryDistinct.equals( clippedGeometry ) );
assertEquals( "EPSG:4326", crs.getAlias() );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( null, request.getHandle() ); assertEquals( null, request.getOutputFormat() ); assertEquals( 2, request.getTypeNames().length );
assertEquals( "SomeProperty", ( (ValueReference) prop.getParameter1() ).getAsText() ); assertEquals( "100", ( (Literal<?>) prop.getParameter2() ).getValue().toString() );
assertEquals( original.get0(), simplified.get0() ); assertEquals( original.get1(), simplified.get1() ); assertEquals( original.getCoordinateSystem(), simplified.getCoordinateSystem() );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "valueOf(myns:livesIn)/myns:frontsOn", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertNotNull( bean ); assertEquals( "contentBean", bean.getContent() );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( ResolveMode.LOCAL, request.getResolveParams().getMode() ); assertEquals( "*", request.getResolveParams().getDepth() ); assertEquals( "myns:location", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertEquals( ids.size(), 3 ); assertTrue( ids.contains( "InWaterA1M.1013" ) ); assertTrue( ids.contains( "InWaterA1M.1014" ) ); assertTrue( ids.contains( "InWaterA1M.1015" ) );
assertThat( dimensions.size(), is( 1 ) ); assertThat( elevationValues.size(), is( 5 ) ); assertThat( elevationValues, hasItems( -1.5, -0.5, 0d, 0.5, 1.5 ) );
assertThat( featureTypeNamesToExport.size(), is( 1 ) ); assertThat( featureTypeNameToExport.getLocalPart(), is( "one" ) ); assertThat( featureTypeNameToExport.getNamespaceURI(), is( "" ) ); assertThat( featureTypeNameToExport.getPrefix(), is( "" ) );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "myns:mailAddress/myns:Address/myns:city", request.getValueReference().getAsText() ); assertEquals( "urn:ogc:def:query:OGC-WFS::GetFeatureById", query.getId() ); assertEquals( "p4456", query.getParams().get( "ID" ).getText() );
assertThat( bos.toString(), containsString( "Identifier: i1 Name: feature name 1 Props: 1a, 1b" ) ); assertThat( bos.toString(), containsString( "Identifier: i2 Name: feature name 2 Props: 2a, 2b, 2c" ) );
assertThat( styleMap.size(), is( 3 ) ); assertThat( legendStyleMap.size(), is( 3 ) ); assertThat( defaultLegendStyle.getName(), is( "default" ) );
assertEquals( "Theme", merged.getName() ); assertEquals( 0, description.getTitles().size() ); assertEquals( 0, description.getAbstracts().size() ); assertEquals( 0, description.getKeywords().size() ); assertNull( merged.getSpatialMetadata() );
assertEquals( new QName( "http: query0.getTypeNames()[0].getFeatureTypeName() ); FilterQuery query1 = (FilterQuery) getFeature.getQueries().get( 1 ); assertEquals( new QName( "http: query1.getTypeNames()[0].getFeatureTypeName() );
assertEquals( "PROPA", propName.getAsText() ); assertEquals( "PROPB", propB.getAsText() ); assertEquals( "100", lit.getValue().toString() );
assertThat( capabilitiesEncodings, hasOnlyItems( "kvp" ) ); assertThat( capabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) ); assertThat( describeFeatureTypeEncodings, hasOnlyItems( "kvp" ) ); assertThat( capabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) ); assertThat( getFeatureEncodings.size(), is( 0 ) ); assertThat( getPropertyValueEncodings.size(), is( 0 ) );
assertEquals( "<TimePosition/>", xmlWriter.getOutput() );
assertEquals( "<property>0.00000009</property>\\n", memoryWriter.toString() );
assertEquals( propNames.length, 2 ); assertEquals( ( (PropertyName) propNames[0] ).getPropertyName().getAsText(), "gml:name" ); assertEquals( ( (PropertyName) propNames[1] ).getPropertyName().getAsText(), "gml:directedNode" ); assertEquals( ids.size(), 1 ); assertTrue( ids.contains( "t1" ) );
assertEquals( 256, tm.getMetadata().getTilePixelsX() );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "valueOf(myns:livesIn)/valueOf(myns:frontsOn)/abc:numLanes", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertTrue( capabilities.isOperationSupported( GetMap ) );
assertArrayEquals( expected, bos.toByteArray() );
assertEquals( "CodeLists", dict.getId() ); assertEquals( 2, dict.size() ); assertEquals( "XP_HorizontaleAusrichtung", dict.get( 0 ).getId() ); assertEquals( "XP_BedeutungenBereich", dict.get( 1 ).getId() );
assertArrayEquals( strings, new String[] { "ccc", "bb", "a" } );
assertNotNull( timePeriod ); assertEquals( "p22", timePeriod.getId() ); assertNull( timePeriod.getFrame() ); assertEquals( "#t11", begin.getURI() ); assertEquals( "2002-05-23", end.getValue() );
assertThat( featureTypeNamesToExport.size(), is( 0 ) );
assertThat( record, instanceOf( ISORecord.class ) ); assertThat( record.getIdentifier(), is( "655e5998-a20e-66b5-c888-00005553421" ) );
assertEquals( "INWATERA_1M", featureId.getFeatureIds()[0] ); assertEquals( "INWATERA_1M/WKB_GEOM", ( (PropertyName) featureId.getProjectionClauses()[0] ).getPropertyName().getAsText() ); assertEquals( "INWATERA_1M/TILE_ID", ( (PropertyName) featureId.getProjectionClauses()[1] ).getPropertyName().getAsText() );
assertEquals( typeNames.length, 1 );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( null, request.getHandle() ); assertEquals( "text/xml; subtype=gml/3.2", request.getOutputFormat() ); assertEquals( 1, request.getTypeNames().length );
assertEquals( "DEPTH", ( (ValueReference) prop.getParameter1() ).getAsText() ); assertEquals( "30", ( (Literal<?>) prop.getParameter2() ).getValue().toString() );
assertArrayEquals( expected, bos.toByteArray() );
assertThat( nextStartIndex, is( 0 ) );
assertNull( action.getHandle() ); assertNotNull( filter );
assertFalse( limitedSupportedEncodings.isEncodingSupported( DescribeFeatureType, "xml" ) ); assertTrue( limitedSupportedEncodings.isEncodingSupported( DescribeFeatureType, "kvp" ) ); assertTrue( limitedSupportedEncodings.isEncodingSupported( DescribeFeatureType, "soap" ) );
assertNull( getFeatureWL.getExpiryInSeconds() ); assertNull( getFeatureWL.getLockAll() );
assertNull( getMapFormats );
assertThat( styleMap.size(), is( 3 ) ); assertThat( legendStyleMap.size(), is( 3 ) ); assertThat( defaultLegendStyle.getName(), is( "simpleStyle" ) );
assertNotNull( ds ); assertTrue( ds instanceof DataSourceMock );
assertEquals( ExecutionState.SUCCEEDED, execution.getState() );
assertNull( action.getHandle() ); assertNull( action.getInputFormat() ); assertNull( action.getSRSName() ); assertNull( replacement.getUpdateAction() );
assertThat( styleMap.size(), is( 3 ) ); assertThat( legendStyleMap.size(), is( 2 ) ); assertThat( defaultLegendStyle.getName(), is( "legendStyle" ) ); assertThat( defaultLegendStyle.getLegendURL(), nullValue() );
assertEquals( "urn:x-ogc:specification:csw-ebrim:AssociationType:EO:AcquiredBy", actualAssociationType );
assertThat( capabilitiesEncodings, hasOnlyItems( "xml", "soap" ) ); assertThat( describeFeatureTypeEncodings, hasOnlyItems( "xml" ) ); assertThat( getFeatureEncodings, hasOnlyItems( "xml" ) ); assertThat( getPropertyValueEncodings.size(), is( 0 ) );
assertNull( delete.getHandle() ); assertEquals( expectedTypeName, delete.getTypeName() ); assertNotNull( delete.getFilter() );
assertEquals( "app:placeOfBirth/app:Place/app:country/app:Country/app:geom", ( (OMText) textNode ).getText() ); assertEquals( "app:Philosopher", ( (OMAttribute) attributeNode ).getAttributeValue() );
assertEquals( "!", propIsLike.getEscapeChar() ); assertEquals( "#", propIsLike.getSingleChar() ); assertEquals( "*", propIsLike.getWildCard() );
assertThat( capabilitiesEncodings, hasOnlyItems( "xml", "soap" ) ); assertThat( describeFeatureTypeEncodings, hasOnlyItems( "xml", "soap", "kvp" ) ); assertThat( getFeatureEncodings, hasOnlyItems( "xml" ) ); assertThat( getPropertyValueEncodings.size(), is( 0 ) );
assertFalse( limitedSupportedEncodings.isEncodingSupported( GetFeatureWithLock, "xml" ) ); assertFalse( limitedSupportedEncodings.isEncodingSupported( GetFeatureWithLock, "kvp" ) ); assertFalse( limitedSupportedEncodings.isEncodingSupported( GetFeatureWithLock, "soap" ) );
assertEquals( "DEPTH", propName.getAsText() ); assertEquals( "30", literal.getValue().toString() ); assertEquals( "Geometry", dPropName.getAsText() ); assertEquals( 13.0983, min.get0() ); assertEquals( 31.5899, min.get1() ); assertEquals( 35.5472, max.get0() ); assertEquals( 42.8143, max.get1() );
assertEquals( VERSION_200, dft.getVersion() ); assertEquals( null, dft.getHandle() ); assertEquals( null, dft.getOutputFormat() ); assertEquals( 1, dft.getTypeNames().length );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "myns:phone", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertEquals( VERSION_200, dft.getVersion() ); assertEquals( null, dft.getHandle() ); assertEquals( null, dft.getOutputFormat() ); assertEquals( 2, dft.getTypeNames().length );
assertEquals( "1, 2, 3, 4, 5", ArrayUtils.join( ", ", arr1 ) ); assertEquals( "1,2,3,4,5", ArrayUtils.join( ",", arr1 ) ); assertEquals( "12345", ArrayUtils.join( "", arr1 ) ); assertEquals( "", ArrayUtils.join( ",", new int[] {} ) );
assertEquals( "foo|bar|baz", join( "|", "foo", "bar", "baz" ) ); assertEquals( "foo|bar|baz", join( "|", new String[] { "foo", "bar", "baz" } ) ); assertEquals( "foo|bar|baz", join( "|", test ) );
assertNull( lockFeature.getHandle() ); assertEquals( "LOCK_1", lockFeature.getExistingLockId() ); assertEquals( new BigInteger( "38348348884895485485485623783487548745587548754" ), lockFeature.getExpiryInSeconds() ); assertFalse( lockFeature.getLockAll() ); assertEquals( 1, lockFeature.getQueries().size() );
assertThat( qNames.size(), is( 3 ) );
assertEquals( getGetGetMapUrl(), capabilities.getAddress( GetMap, true ) ); assertEquals( getPostGetMapUrl(), capabilities.getAddress( GetMap, false ) );
assertEquals( new QName( "InWaterA_1M" ), featureLock0.getTypeNames()[0].getFeatureTypeName() ); assertEquals( new QName( "BuiltUpA_1M" ), featureLock1.getTypeNames()[0].getFeatureTypeName() );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "kvp" ) ); assertThat( getCapabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) ); assertThat( describeLayerEncodings, hasOnlyItems( "kvp" ) ); assertThat( getCapabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) ); assertThat( getMapEncodings.size(), is( 0 ) ); assertThat( mapEncodings.size(), is( 0 ) ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) );
assertNotNull( ds ); assertTrue( ds instanceof DataSourceMock );
assertNotNull( timePeriod ); assertEquals( "p1", timePeriod.getId() ); assertNull( timePeriod.getFrame() ); assertEquals( "2001-05-23", begin.getPosition().getValue() ); assertEquals( "2001-06-23", end.getPosition().getValue() );
assertEquals( dft.getHandle(), null ); assertEquals( dft.getOutputFormat(), null ); assertEquals( dft.getTypeNames().length, 1 ); assertEquals( dft.getTypeNames()[0], new QName( "TreesA_1M" ) ); assertEquals( dft.getVersion(), WFSConstants.VERSION_110 );
assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );
assertThat( nextStartIndex, is( 10 ) );
assertEquals( "InWaterA_1M.1013", query.getFeatureIds()[0] ); assertEquals( "BUILTUP_1M.3456", query.getFeatureIds()[1] );
assertThat( metadataUrls.size(), is( 4 ) );
assertEquals( ( (FilterQuery) queries.get( 0 ) ).getTypeNames()[0].getFeatureTypeName(), new QName( "InWaterA_1M" ) );
assertEquals( 0, parameters.size() ); assertEquals( 0, handledParams.size() ); assertEquals( 1, inputs.size() ); assertEquals( "REPORT", inputs.get( 0 ).getValue().getIdentifier().getValue() );
assertEquals( "1", getFeature.getResolveParams().getDepth() ); assertEquals( BigInteger.valueOf( 60 ), getFeature.getResolveParams().getTimeout() );
assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );
assertNull( capabilities.getAddress( DescribeLayer, true ) );
assertThat( matcher.isMatching( "test" ), is( false ) );
assertThat( nextStartIndex, is( -1 ) );
assertEquals( 8, getMapFormats.size() ); assertTrue( getMapFormats.contains( "image/png" ) ); assertTrue( getMapFormats.contains( "image/bmp" ) );
assertThat( styleMap.size(), is( 3 ) ); assertThat( legendStyleMap.size(), is( 3 ) ); assertThat( defaultLegendStyle.getName(), is( "default" ) );
assertEquals( "2001-01-15T20:07:48.11", lb.getValue().toString() ); assertEquals( "2001-03-06T12:00:00.00", ub.getValue().toString() ); assertEquals( "SAMPLE_DATE", propName.getAsText() );
assertNotNull( ds ); assertTrue( ds instanceof DataSourceMock );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "myns:phone[2]", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertEquals( "Person/Age", pn1.getAsText() ); assertEquals( "50", lit1.getValue().toString() ); assertEquals( "Person/Address/City", pn2.getAsText() ); assertEquals( "Toronto", lit2.getValue().toString() );
assertTrue( isMatching );
assertThat( xml( stream.toString() ), hasXPath( "/wfs:StoredQueryDefinition/wfs:QueryExpressionText/wfs:Query/@typeNames", is( "cp:CadastralParcel" ), NS_CONTEXT ) ); assertThat( xml( stream.toString() ), hasXPath( "/wfs:StoredQueryDefinition/wfs:Parameter/@name", is( "label" ), NS_CONTEXT ) ); assertThat( xml( stream.toString() ), isSimilarTo( the( storedQueryResource ) ) );
assertEquals( 1, allRecords.getRemaining() );
assertThat( featureTypeNamesToExport.size(), is( featureTypes.size() ) ); assertThat( featureTypeNamesToExport, hasItems( featureType.getName() ) );
assertThat( ftMappings.size(), is( 1 ) ); assertThat( mappings.size(), is( 5 ) ); assertThat( featureCDepth0Mapping.size(), is( 3 ) ); assertThat( featureCDepth1Mapping.size(), is( 3 ) ); assertThat( featureCDepth2Mapping.size(), is( 2 ) ); assertThat( featureCDepth3, is( nullValue() ) );
assertTrue( consumer.hasNext() ); assertEquals( features[0], consumer.next() ); assertTrue( consumer.hasNext() ); assertFalse( consumer.hasNext() );
assertNotNull( timeInstant ); assertEquals( "t11", timeInstant.getId() ); assertNull( timeInstant.getFrame() ); assertEquals( "2001-05-23", timeInstant.getPosition().getValue() );
assertEquals( "app:placeOfBirth/app:Place/app:country/app:Country/app:geom", value );
assertTrue( recordResultSet.next() ); assertNotNull( recordResultSet.getRecord() ); assertTrue( recordResultSet.next() ); assertNotNull( recordResultSet.getRecord() ); assertFalse( recordResultSet.next() );
assertTrue( filter.getOperator() instanceof Within ); assertEquals( "InWaterA_1M/wkbGeom", within.getPropName().getAsText() ); assertTrue( filter.getOperator() instanceof Within ); assertEquals( "BuiltUpA_1M/wkbGeom", within.getPropName().getAsText() );
assertNull( rootLayer.getName() ); assertEquals( "deegree demo WMS", description.getAbstract( null ).getString() ); assertEquals( getNoOfChildrenOfRootLayer(), children.size() );
assertFalse( capabilities.isOperationSupported( DescribeLayer ) );
assertFalse( capabilities.hasLayer( "Unknown Layer" ) );
assertEquals( "INWATERA_1M/WKB_GEOM", within.getPropName().getAsText() );
assertNull( insert.getHandle() ); assertNull( insert.getInputFormat() ); assertNull( insert.getSrsName() ); assertNull( insert.getSrsName() ); assertEquals( xmlStream, insert.getFeatures() );
assertThat( ftMappings.size(), is( 1 ) );
assertThat( nextStartIndex, is( 90 ) );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( 1, request.getQueries().size() ); assertEquals( new BigInteger( "902544598624567873156901" ), request.getExpiryInSeconds() ); assertFalse( request.getLockAll() ); assertNull( request.getHandle() );
assertArrayEquals( expected, bos.toByteArray() );
assertThat( curveSegments.size(), is( 3 ) ); assertThat( firstCurveSegment.getSegmentType(), is( LINE_STRING_SEGMENT ) ); assertThat( secondCurveSegment.getSegmentType(), is( ARC ) ); assertThat( thirdCurveSegment.getSegmentType(), is( LINE_STRING_SEGMENT ) ); assertTrue( invertedCurve.isClosed() );
assertEquals( "uk:Town/gml:name", ( (PropertyName) propNames[0] ).getPropertyName().getAsText() ); assertEquals( "uk:Town/gml:directedNode", ( (PropertyName) propNames[1] ).getPropertyName().getAsText() ); assertEquals( "t1", featureId[0] );
assertNotNull( response );
assertThat( nextStartIndex, is( 20 ) );
assertEquals( 0, transformedPoint[0], 0.1 ); assertEquals( 47, transformedPoint[1], 0.1 ); assertEquals( 42, transformedPoint[0], 0.1 ); assertEquals( 0, transformedPoint[1], 0.1 );
assertEquals( new QName( APP_NS, "Philosopher" ), ftName );
assertNull( action.getHandle() ); assertNull( action.getInputFormat() ); assertNull( action.getSRSName() ); assertNull( replacement.getUpdateAction() ); assertEquals( new QName( "populationType" ), replacement.getPropertyName().getAsQName() ); assertEquals( "CITY", valueStream.getElementText() ); assertFalse( replacementProps.hasNext() ); assertNotNull( filter );
assertNotNull( testConfig ); assertNotNull( metadata ); assertNotNull( builder ); assertNull( beanFromComtext.getMetadata() ); assertNotNull( beanFromBuilder ); assertEquals( beanFromComtext, beanFromBuilder ); assertEquals( metadata, beanFromBuilder.getMetadata() );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "xml", "soap" ) ); assertThat( describeLayerEncodings, hasOnlyItems( "xml", "soap", "kvp" ) ); assertThat( getMapEncodings, hasOnlyItems( "xml" ) ); assertThat( mapEncodings, hasOnlyItems( "xml" ) ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) );
assertEquals( "INWATERA_1M.1013", query.getFeatureIds()[0] ); assertEquals( "BUILTUP_1M.3456", query.getFeatureIds()[1] );
assertEquals( new QName( "INWATERA_1M" ), filterQuery0.getTypeNames()[0].getFeatureTypeName() ); assertEquals( new QName( "BUILTUPA_1M" ), filterQuery1.getTypeNames()[0].getFeatureTypeName() );
assertTrue( resultSet.next() ); assertTrue( resultSet.next() ); assertTrue( resultSet.next() ); assertNotNull( resultSet.getRecord() ); assertTrue( resultSet.next() ); assertTrue( resultSet.next() );
assertThat( ftMappings.size(), is( 1 ) );
assertNotNull( SymbologyParser.INSTANCE.parse( in ) ); assertEquals( true, false ); assertNotNull( e );
assertNotNull( timeInstant ); assertEquals( "t11", timeInstant.getId() );
assertEquals( 1, tileMatrixSets.size() );
assertEquals( maxRecords, allRecords.getRemaining() );
assertNull( action.getHandle() ); assertEquals( "BigDbCorp", action.getVendorId() ); assertTrue( action.isSafeToIgnore() );
assertNotNull( timePeriod ); assertEquals( "p1", timePeriod.getId() ); assertNull( timePeriod.getFrame() ); assertEquals( "2001-05-23", begin.getValue() ); assertEquals( "2001-06-23", end.getValue() );
assertThat( storedQueryHandler.hasStoredQuery( id ), is( false ) ); assertThat( xml( outStream.toString() ), hasXPath( "/wfs:DropStoredQueryResponse[@status=\'OK\']", NS_CONTEXT ) );
assertEquals( new BigInteger( "300" ), getFeatureWL.getExpiryInSeconds() ); assertFalse( getFeatureWL.getLockAll() );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( describeLayerEncodings, hasOnlyItems( "kvp", "xml" ) ); assertThat( getMapEncodings, hasOnlyItems( "kvp", "xml" ) ); assertThat( mapEncodings, hasOnlyItems( "kvp", "xml" ) ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "kvp" ) ); assertThat( describeLayerEncodings, hasOnlyItems( "kvp" ) ); assertThat( getMapEncodings, hasOnlyItems( "kvp" ) ); assertThat( mapEncodings, hasOnlyItems( "kvp" ) ); assertThat( getFeatureInfoEncodings, hasOnlyItems( "kvp" ) );
assertThat( storedQueryHandler.hasStoredQuery( GET_FEATURE_BY_ID ), is( true ) ); assertThat( storedQueryHandler.hasStoredQuery( GET_FEATURE_BY_TYPE ), is( true ) );
assertTrue( limitedSupportedEncodings.isEncodingSupported( GetCapabilities, "xml" ) ); assertTrue( limitedSupportedEncodings.isEncodingSupported( GetCapabilities, "kvp" ) ); assertTrue( limitedSupportedEncodings.isEncodingSupported( GetCapabilities, "soap" ) );
assertThat( parameterMap.size(), is( 0 ) ); assertThat( getFeatureInfo.getX(), is( 50 ) ); assertThat( getFeatureInfo.getY(), is( 15 ) ); assertThat( getFeatureInfo.getFeatureCount(), is( 1 ) ); assertThat( getFeatureInfo.getInfoFormat(), is( "text/xml" ) ); assertThat( getFeatureInfo.getQueryLayers().size(), is( 1 ) ); assertThat( getFeatureInfo.getQueryLayers(), hasLayerRef( "counties" ) );
assertEquals( VERSION_200, request.getVersion() ); assertFalse( request.getLockAll() ); assertEquals( 1, request.getQueries().size() ); assertNull( request.getExistingLockId() ); assertNull( request.getExpiryInSeconds() ); assertNull( request.getHandle() );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( "valueOf(myns:livesIn)/valueof(myns:mailAddress)/myns:postalCode", request.getValueReference().getAsText() ); assertEquals( 1, query.getTypeNames().length ); assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() );
assertThat( xml( stream.toString() ), hasXPath( " nsBindings() ) ); assertThat( xml( stream.toString() ), not( hasXPath( " nsBindings() ) ) );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( getMapEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( mapEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( describeLayerEncodings.size(), is( 0 ) ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) );
assertEquals( 1, identifiers.size() ); assertEquals( "II.BuildingCenters", identifiers.get( 0 ).first ); assertEquals( "AUTH", identifiers.get( 0 ).second ); assertEquals( 1, authorities.size() ); assertEquals( "AUTH", authorities.get( 0 ).first );
assertThat( bos.toString(), containsString( "Identifier: i1 Name: feature name 1 Props: 1a, 1b" ) ); assertThat( bos.toString(), containsString( "Identifier: i2 Name: feature name 2 Props: 2a, 2b, 2c" ) );
assertEquals( "InWaterA_1M", filterq.getTypeNames()[0].getFeatureTypeName().getLocalPart() ); assertTrue( filter.getOperator() instanceof Within ); assertEquals( "InWaterA_1M/wkbGeom", within.getPropName().getAsText() ); assertTrue( within.getGeometry() instanceof Envelope );
assertEquals( new QName( "InWaterA_1M" ), filterLock.getTypeNames()[0].getFeatureTypeName() );
assertThat( getCapabilitiesEncodings, hasOnlyItems( "xml", "soap" ) ); assertThat( describeLayerEncodings, hasOnlyItems( "xml" ) ); assertThat( getMapEncodings, hasOnlyItems( "xml" ) ); assertThat( mapEncodings, hasOnlyItems( "xml" ) ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) );
assertFalse( recordResultSet.next() );
assertThat( capabilitiesEncodings, hasOnlyItems( "kvp" ) ); assertThat( describeFeatureTypeEncodings, hasOnlyItems( "kvp" ) ); assertThat( getFeatureEncodings, hasOnlyItems( "kvp" ) ); assertThat( getPropertyValueEncodings, hasOnlyItems( "kvp" ) );
assertEquals( "app:placeOfBirth/app:Place/app:country/app:Country/app:geom", textNode );
assertThat( ftMappings.size(), is( 1 ) ); assertThat( mappings.size(), is( 5 ) ); assertThat( featureCDepth0Mapping.size(), is( 3 ) ); assertThat( featureCDepth1Mapping.size(), is( 2 ) ); assertThat( featureCDepth2, is( nullValue() ) );
assertTrue( consumer.hasNext() ); assertEquals( features[0], consumer.next() ); assertTrue( consumer.hasNext() ); assertEquals( features[1], consumer.next() ); assertFalse( consumer.hasNext() );
assertEquals( new QName( "INWATERA_1M" ), ( (AdHocQuery) getFeature.getQueries().get( 0 ) ).getTypeNames()[0].getFeatureTypeName() );
assertNotNull( timePosition ); assertNull( timePosition.getFrame() ); assertNull( timePosition.getCalendarEraName() ); assertNull( timePosition.getIndeterminatePosition() ); assertEquals( "2001-05-23", timePosition.getValue() );
assertEquals( "Geometry", ( (ValueReference) params[0] ).getAsText() );
assertTrue( clippedGeometry != null ); assertTrue( geometryDistinct.equals( clippedGeometry ) );
assertEquals( 4, handledParameters.size() ); assertEquals( 1, inputs.size() );
assertEquals( 512, MathUtils.nextPowerOfTwoValue( 511 ) ); assertEquals( 512, MathUtils.nextPowerOfTwoValue( 512 ) ); assertEquals( 1024, MathUtils.nextPowerOfTwoValue( 513 ) );
assertArrayEquals( expected, bos.toByteArray() );
assertEquals( propNames.length, 2 ); assertEquals( ( (PropertyName) propNames[0] ).getPropertyName().getAsText(), "gml:name" ); assertEquals( ( (PropertyName) propNames[1] ).getPropertyName().getAsText(), "gml:directedNode" ); assertEquals( ids.size(), 1 ); assertTrue( ids.contains( "t1" ) );
assertNotNull( bean ); assertEquals( "contentBean0", bean.getContent() );
assertNotNull( ds ); assertTrue( ds instanceof DataSourceMock );
assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );
assertThat( nextStartIndex, is( 0 ) );
assertEquals( 13.0983, min.get0() ); assertEquals( 31.5899, min.get1() ); assertEquals( 35.5472, max.get0() ); assertEquals( 42.8143, max.get1() );
assertEquals( "InWaterA_1M.1013", featureId.getFeatureIds()[0] );
assertThat( ftMappings.size(), is( 1 ) ); assertThat( mappings.size(), is( 5 ) ); assertThat( featureCDepth0Mapping.size(), is( 2 ) ); assertThat( featureCDepth1, is( nullValue() ) );
assertEquals( VERSION_200, request.getVersion() ); assertEquals( 1, request.getQueries().size() ); assertNull( request.getExpiryInSeconds() ); assertNull( request.getLockAll() ); assertNull( request.getHandle() );
assertTrue( matchingIds.contains( "TREESA_1M.1234" ) );
assertEquals( "urn:ogc:def:EOP:RE00:MSI_IMG_3A:5397721:eo", actualSourceObject );
assertThat( ftMappings.size(), is( 1 ) );
assertThat( metadataUrls.size(), is( 3 ) );
assertThat( html, containsString( "WMS" ) ); assertThat( html, containsString( "deegree 3 Utah Demo WMS" ) );
assertThat( capabilitiesEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( getFeatureEncodings, hasOnlyItems( "kvp", "xml", "soap" ) ); assertThat( describeFeatureTypeEncodings.size(), is( 0 ) ); assertThat( getPropertyValueEncodings.size(), is( 0 ) );
assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_connectlobby, ((Map<String, Object>) conn.lastData).get("status"));
assertEquals(SessionStatus.COMPLETED, SessionRecord.status(s)); assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_toomanysessions, ((Map<String, Object>) conn.lastData).get("status"));
assertEquals(SessionStatus.ASSIGNED, SessionRecord.status(takenSession)); assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_simultaneoussessions, ((Map<String, Object>) conn.lastData).get("status"));
assertTrue(target >= i + min); assertTrue(target <= i + max); assertTrue(target == i + min || target == i + max || target == (int) Math.round(i * (1+overhead) ) );
assertEquals(SessionStatus.ASSIGNED, SessionRecord.status(takenSession));
assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_quizneeded, ((Map<String, Object>) conn.lastData).get("status"));
assertEquals(SessionStatus.COMPLETED, SessionRecord.status(s));
assertEquals(SessionStatus.EXPERIMENT, SessionRecord.status(s)); assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_sessionoverlap, ((Map<String, Object>) conn.lastData).get("status"));
assertEquals(SessionStatus.EXPERIMENT, SessionRecord.status(s));
assertEquals(SessionStatus.COMPLETED, SessionRecord.status(s));
assertEquals(conn.lastChannel, USER_CHANNEL); assertEquals(Codec.status_failsauce, ((Map<String, Object>) conn.lastData).get("status"));
assertEquals(3, listenPortEntities.size(),"More than 3 expected ports");
assertFalse(wsdlFolder.exists()); assertFalse(serviceSoapResourcesFolder.exists()); assertFalse(wsdlFile.exists());
assertTrue(entities.isEmpty());
assertEquals("var", extractVariableName("${var}")); assertEquals("var.subvar", extractVariableName("${var.subvar}"));
assertNotNull(getSoapResourcesRootDir(temporaryFolder.getRoot()));
assertTrue(bundle.getPrivateKeyFiles().isEmpty());
assertNull(jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertNull(jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword());
assertEquals(0, bundle.getEntities(ClusterProperty.class).size()); assertEquals(4, bundle.getEntities(GlobalEnvironmentProperty.class).size());
assertNotNull(encassMap.get("TestEncass"));
assertTrue(entities.isEmpty());
assertEquals(0, filteredEntities.size());
assertFalse(xmlPolicyConverter.canConvert("someOtherPolicyName", null));
assertEquals(2, filteredEntities.size()); assertTrue(filteredEntities.stream().anyMatch(c -> "encass2".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> "encass3".equals(c.getName())));
assertEquals(0, filteredEntities.size());
assertEquals(0, filteredEntities.size());
assertNotNull(loadersBindings); assertFalse(loadersBindings.isEmpty()); assertFalse(loaders.isEmpty()); assertEquals(loadersBindings.size(), loaders.size()); assertNotNull(registry); assertNotNull(registry.getEntityLoaders()); assertFalse(registry.getEntityLoaders().isEmpty()); assertTrue(registry.getEntityLoaders().containsAll(loaders.stream().filter(l -> !l.getClass().getSimpleName().contains("Test")).collect(Collectors.toList())));
assertFalse(bundle.getJdbcConnections().isEmpty()); assertEquals(1, bundle.getJdbcConnections().size()); assertNotNull(bundle.getJdbcConnections().get("Test")); assertNotNull(entity); assertEquals(1, entity.getMinimumPoolSize().intValue()); assertEquals(2, entity.getMaximumPoolSize().intValue());
assertEquals(4, childFolders.size()); assertTrue(childFolders.stream().anyMatch(f -> "folder".equals(f.getName()))); assertTrue(childFolders.stream().anyMatch(f -> "path".equals(f.getName()))); assertTrue(childFolders.stream().anyMatch(f -> "another-path".equals(f.getName()))); assertTrue(childFolders.stream().anyMatch(f -> "sub-folder".equals(f.getName())));
assertTrue(certFile.exists()); assertEquals(PEM_CERT_BEGIN_MARKER + LINE_SEPARATOR + "cert" + LINE_SEPARATOR + PEM_CERT_END_MARKER, FileUtils.readFileToString(certFile, Charset.defaultCharset()));
assertEquals(1, identityProviderEntities.size()); assertEquals("ID_PROVIDER_CONFIG", identityProviderEntity.getType()); assertEquals(NEW_OR_EXISTING, identityProviderEntity.getMappingAction()); assertTrue(Boolean.valueOf(String.valueOf(identityProviderEntity.getMappingProperties().get(FAIL_ON_NEW))));
assertTrue(entities.isEmpty());
assertTrue(bundle.getServiceEnvironmentProperties().isEmpty());
assertEquals(0, serviceEntities.size());
assertTrue(entities.isEmpty());
assertEquals("child", child.getName()); assertEquals("/", child.getPath()); assertEquals(root, child.getParentFolder());
assertEquals(textExtConverter, policyConverterRegistry.getFromPolicyElement("hello", null)); assertEquals(defaultConverter, policyConverterRegistry.getFromPolicyElement("another-name", null));
assertNotNull(idProvideOidElement);
assertEquals(0, filteredEntities.size());
assertNotNull(idProvideOidElement);
assertEquals("myEncassPolicy", bundle.getEntities(Encass.class).get("1").getPath());
assertEquals(4, parentFolders.size()); assertTrue(parentFolders.stream().anyMatch(f -> "Root Node".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "my".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "folder".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "path".equals(f.getName())));
assertNull(jdbcConnection.getPasswordRef()); assertNull(jdbcConnection.getPassword());
assertEquals(1, trustedCerts.size());
assertNotNull(certContent); assertTrue(certContent instanceof String);
assertNotNull(injector.getInstance(Reflections.class));
assertEquals(1, parentFolders.size()); assertTrue(parentFolders.stream().anyMatch(f -> "Root Node".equals(f.getName())));
assertEquals("myEncassPolicy", linkedEncass.getPath()); assertEquals(2, linkedEncass.getProperties().size()); assertTrue(Boolean.valueOf(linkedEncass.getProperties().get(L7_TEMPLATE).toString()));
assertEquals(ImmutableMap.of(JNDI_CLIENT_AUT_KEYSTORE_ALIAS, "key1"), jmsDestination.getAdditionalProperties());
assertEquals(1, filteredBundle.getEntities(Folder.class).size()); assertNotNull(filteredBundle.getFolderTree());
assertEquals(1, services.size());
assertNotNull(stream);
assertNotNull(cassandraConnectionName); assertEquals("::" + projectInfo.getGroupName() + "::" + connectionName + "::1.0", cassandraConnectionName.getAttributes().getNamedItem(STRING_VALUE).getTextContent());
assertEquals(0, clusterProperties.size());
assertTrue(entities.isEmpty());
assertEquals(1, trustedCerts.size());
assertEquals(3, folderMap.size());
assertNotNull(cassandraConnection.getStoredPasswordName()); assertEquals("name", cassandraConnection.getStoredPasswordName());
assertTrue(testDetemplatizedBundlesFolder.mkdirs()); assertTrue(environmentBundle.exists());
assertTrue(wsdlFolder.exists()); assertTrue(serviceSoapResourcesFolder.exists()); assertTrue(wsdlFile.exists()); assertTrue(xsdFile.exists());
assertEquals("my-var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); assertTrue(b64.isEmpty());
assertNotNull(port.getTargetServiceReference()); assertEquals("folder/Service", port.getTargetServiceReference());
assertTrue(exception.getMessage().contains("entity"));
assertNull(jdbcConnection.getPasswordRef()); assertNull(jdbcConnection.getPassword());
assertNull(jdbcConnection.getPasswordRef()); assertEquals(GATEWAY, jdbcConnection.getPassword()); assertNotNull(jdbcConnection.getPassword());
assertNotNull(jmsDestination.getInboundDetail()); assertNotNull(jmsDestination.getInboundDetail().getServiceResolutionSettings()); assertEquals("my-folder-name/my-service-name", jmsDestination.getInboundDetail().getServiceResolutionSettings().getServiceRef());
assertTrue(jsonTools.getObjectMapper().getFactory() instanceof YAMLFactory); assertFalse(jsonTools.getObjectMapper().getFactory() instanceof YAMLFactory); assertTrue(jsonTools.getObjectMapper().getFactory() instanceof YAMLFactory);
assertEquals(3, filteredEntities.size()); assertTrue(filteredEntities.stream().anyMatch(c -> "policy1".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> "policy4".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> "policy5".equals(c.getName())));
assertNotNull(entities); assertTrue(entities.isEmpty());
assertEquals(0, filteredEntities.size());
assertNotNull(port.getTlsSettings().getPrivateKey()); assertEquals("Key", port.getTlsSettings().getPrivateKey());
assertEquals(1, identityProviders.size()); assertEquals(2, certList.size()); assertEquals(certList.get(0), "cert1"); assertEquals(certList.get(1), "cert2");
assertNull(extractVariableName("${abc")); assertNull(extractVariableName("$abc")); assertNull(extractVariableName("abc")); assertNull(extractVariableName("${abc}${abc}"));
assertEquals(jsStringOriginal, jsString);
assertEquals(0, filteredEntities.size());
assertEquals(3, filteredEntities.size()); assertTrue(filteredEntities.stream().anyMatch(c -> "service1".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> "service4".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> "service5".equals(c.getName())));
assertEquals(JmsDestination.class, linker.getEntityClass());
assertEquals(2, listenPortEntities.size(), "Expecting only the 2 default ports");
assertEquals("test/", PathUtils.unixPathEndingWithSeparator("test")); assertEquals("test/path/", PathUtils.unixPathEndingWithSeparator("test", "path")); assertEquals("test/path/", PathUtils.unixPathEndingWithSeparator("test\\\\path")); assertEquals("test/path/subpath/", PathUtils.unixPathEndingWithSeparator("test", "path", "subpath")); assertEquals("test/path/subpath/", PathUtils.unixPathEndingWithSeparator("test\\\\path\\\\subpath"));
assertNotNull(jmsDestination.getInboundDetail()); assertNotNull(jmsDestination.getInboundDetail().getServiceResolutionSettings()); assertNull(jmsDestination.getInboundDetail().getServiceResolutionSettings().getServiceRef());
assertFalse(bundle.getStoredPasswords().isEmpty()); assertEquals(1, bundle.getStoredPasswords().size()); assertNotNull(bundle.getStoredPasswords().get("Test")); assertNotNull(entity); assertEquals("Test", entity.getName()); assertEquals("123qwe", entity.getId()); assertNull(entity.getPassword());
assertNotNull(pwd1.getId()); assertNotNull(pwd2.getId()); assertFalse(entities.isEmpty()); assertEquals(2, entities.size()); assertTrue(containsPwd1.booleanValue()); assertTrue(containsPwd2.booleanValue());
assertFalse(bundle.getTrustedCerts().isEmpty()); assertEquals(1, bundle.getTrustedCerts().size()); assertNotNull(cert); assertNotNull(cert.getCertificateData()); assertEquals("Encoded", certData.getEncodedData()); assertEquals("Issuer", certData.getIssuerName()); assertEquals("SN", certData.getSubjectName()); assertEquals(BigInteger.valueOf(123456L), certData.getSerialNumber()); assertTrue(value, "property " + k + " is not true");
assertTrue(listenPortEntities.isEmpty());
assertNotNull(policyMap.get("TestPolicy"));
assertNotNull(idProvideOidElement);
assertTrue(defaultHttp.getEnabledFeatures().containsAll(asList(Feature.MESSAGE_INPUT.getDescription(), Feature.POLICYDISCO.getDescription(), Feature.PING.getDescription(), Feature.STS.getDescription(), Feature.WSDLPROXY.getDescription(), Feature.SNMPQUERY.getDescription())));
assertTrue(testDetemplatizedBundlesFolder.mkdirs());
assertEquals(0, filteredEntities.size());
assertTrue(path.toFile().exists()); assertNotNull(readFileToString(path.toFile(), Charset.defaultCharset()));
assertNotNull(connectionNameEle); assertEquals("::" + projectInfo.getGroupName() + "::" + connectionName + "::1.0", connectionNameEle.getAttributes().getNamedItem(STRING_VALUE).getTextContent());
assertEquals(1, listenPortEntities.size(),"More than 1 expected ports");
assertEquals(1, entities.size());
assertTrue(entities.isEmpty());
assertNotNull(content); assertEquals("Test", content);
assertTrue(entities.isEmpty());
assertEquals(JsonTools.JSON, tryInferContentTypeFromValue("[ { \'test1\': 1, \'test2\': 2 }, { \'test3\': 3, \'test4\': 4 } ]"));
assertFalse(CharacterBlacklistUtil.containsInvalidCharacter("example with no invalid characters"));
assertEquals(2, orderedPolicies.size()); assertEquals(policy1, orderedPolicies.get(1)); assertEquals(policy2, orderedPolicies.get(0)); assertEquals(2, orderedPolicies.size()); assertEquals(policy1, orderedPolicies.get(1)); assertEquals(policy2, orderedPolicies.get(0));
assertNotNull(bundle.getFolders().get(encodedRoot)); assertEquals(encodedRoot, bundle.getFolders().get(encodedRoot).getName()); assertNotNull(bundle.getFolders().get(encodedTestFolder)); assertEquals(encodedTestFolder, bundle.getFolders().get(encodedTestFolder).getName());
assertNotNull(element);
assertTrue(bundle.getCertificateFiles().isEmpty());
assertNotNull(loadersBindings); assertFalse(loadersBindings.isEmpty()); assertFalse(loaders.isEmpty()); assertEquals(loadersBindings.size(), loaders.size()); assertNotNull(registry); assertNotNull(registry.getEntityLoaders()); assertFalse(registry.getEntityLoaders().isEmpty()); assertEquals(registry.getEntityLoaders().size(), loaders.size()); assertTrue(registry.getEntityLoaders().values().containsAll(loaders));
assertEquals(0, propertyNodes.getLength());
assertEquals("test", PathUtils.unixPath("test")); assertEquals("test/path", PathUtils.unixPath("test", "path")); assertEquals("test/path", PathUtils.unixPath("test\\\\path")); assertEquals("test/path/subpath", PathUtils.unixPath("test", "path", "subpath")); assertEquals("test/path/subpath", PathUtils.unixPath("test\\\\path\\\\subpath"));
assertEquals("my-var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); assertEquals(Base64.getEncoder().encodeToString("base64Text".getBytes(StandardCharsets.UTF_8)), b64);
assertEquals(1, filteredEntities.size()); assertEquals(0, filteredEntities.size()); assertEquals("Missing Generic Entity(s) with name: \'unknownClient\'", e.getMessage());
assertEquals("myEncassPolicy", linkedEncass.getPath()); assertEquals(2, linkedEncass.getProperties().size()); assertFalse(Boolean.valueOf(linkedEncass.getProperties().get(L7_TEMPLATE).toString()));
assertTrue(entities.isEmpty());
assertNull(identityProvider.getIdentityProviderDetail());
assertEquals(0, filteredEntities.size());
assertEquals(CassandraConnection.class, linker.getEntityClass());
assertTrue(testDetemplatizedBundlesFolder.mkdirs());
assertEquals(JsonTools.YAML, jsonTools.getTypeFromFile(new File("test.yml"))); assertEquals(JsonTools.JSON, jsonTools.getTypeFromFile(new File("test.json")));
assertNotNull(bundle); assertFalse(bundle.getCassandraConnections().isEmpty()); assertFalse(bundle.getJdbcConnections().isEmpty()); assertEquals(1, bundle.getCassandraConnections().size()); assertEquals(1, bundle.getJdbcConnections().size());
assertNull(jdbcConnection.getPasswordRef()); assertEquals("${" + GATEWAY + "}", jdbcConnection.getPassword()); assertNotNull(jdbcConnection.getPassword());
assertFalse(entities.isEmpty()); assertEquals(1, entities.size());
assertEquals(0, filteredEntities.size());
assertTrue(entities.isEmpty());
assertNotNull(defaultListenPorts.get(ListenPort.DEFAULT_HTTP_8080), "Missing default HTTP"); assertNotNull(defaultListenPorts.get(ListenPort.DEFAULT_HTTPS_8443), "Missing default HTTPS");
assertFalse(bundle.getClusterProperties().isEmpty()); assertEquals(1, bundle.getClusterProperties().size()); assertNotNull(clusterProperty); assertEquals("Prop", clusterProperty.getName()); assertEquals("Value", clusterProperty.getValue()); assertEquals("id", clusterProperty.getId());
assertEquals(0, identityProviderEntities.size());
assertTrue(path.toFile().exists()); assertNotNull(content); assertTrue(content.contains("xmlns:l7"));
assertEquals("test", PathUtils.unixPath(Paths.get("test"))); assertEquals("test/path", PathUtils.unixPath(Paths.get("test", "path"))); assertEquals("test/path/subpath", PathUtils.unixPath(Paths.get("test", "path", "subpath")));
assertEquals(1, entities.size());
assertEquals("my-var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); assertEquals(Base64.getEncoder().encodeToString("my \\n Text \\r\\n Content".getBytes(StandardCharsets.UTF_8)), b64);
assertEquals(".yml", jsonTools.getFileExtension()); assertEquals(".json", jsonTools.getFileExtension());
assertEquals(0, trustedCertEntities.size());
assertTrue(childFolders.isEmpty());
assertEquals(1, trustedCerts.size()); assertEquals(EXPECT_ISSUER, getSingleChildElementTextContent(certDataXml, ISSUER_NAME)); assertEquals(EXPECT_BIG_INT, new BigInteger(getSingleChildElementTextContent(certDataXml, SERIAL_NUMBER))); assertEquals(EXPECT_SUB_NAME, getSingleChildElementTextContent(certDataXml, SUBJECT_NAME)); assertEquals(EXPECT_DATA, getSingleChildElementTextContent(certDataXml, ENCODED));
assertEquals(PEM_CERT_BEGIN_MARKER + LINE_SEPARATOR + "ENCODED" + LINE_SEPARATOR + PEM_CERT_END_MARKER, new String(certificateData) );
assertEquals("test", PathUtils.extractName("test")); assertEquals("test", PathUtils.extractName("path/test")); assertEquals("test", PathUtils.extractName("/path/subpath/test"));
assertEquals(Base64.getEncoder().encodeToString("assertion body".getBytes(StandardCharsets.UTF_8)), b64);
assertEquals(1, trustedCerts.size());
assertTrue(entities.isEmpty());
assertEquals(1, services.size());
assertNotNull(certContent); assertTrue(certContent instanceof String); assertTrue(Base64.isBase64(certContent.toString()));
assertNotNull(entityBuilderBindings); assertFalse(entityBuilderBindings.isEmpty()); assertFalse(builders.isEmpty()); assertEquals(entityBuilderBindings.size(), builders.size()); assertNotNull(bundleEntityBuilder); assertNotNull(bundleEntityBuilder.getEntityBuilders()); assertFalse(bundleEntityBuilder.getEntityBuilders().isEmpty()); assertEquals(bundleEntityBuilder.getEntityBuilders().size(), builders.size()); assertTrue(bundleEntityBuilder.getEntityBuilders().containsAll(builders)); assertNotNull(injector.getInstance(BundleDocumentBuilder.class));
assertTrue(loadExistingProperties(new File(temporaryFolder.getRoot(), "static.properties")).isEmpty());
assertEquals(1, entities.size());
assertEquals(ImmutableMap.of(DESTINATION_CLIENT_AUTH_KEYSTORE_ALIAS, "key2"), jmsDestination.getAdditionalProperties());
assertTrue(CharacterBlacklistUtil.containsInvalidCharacter("example with invalid character " + c));
assertEquals(JNDI_STORED_PASSWORD_NAME, jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertEquals(DESTINATION_STORED_PASSWORD_NAME, jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword());
assertEquals(0, activeConnectors.size()); assertEquals(0, activeConnectors.size());
assertNull(cassandraConnection.getStoredPasswordName());
assertTrue(path.toFile().exists()); assertTrue(path.toFile().isDirectory()); assertTrue(path.getParent().toFile().exists()); assertTrue(path.getParent().toFile().isDirectory());
assertEquals("value1", valueString.item(0).getTextContent()); assertEquals(1, Integer.valueOf(valueInt.item(0).getTextContent()).intValue()); assertEquals(1L, Long.valueOf(valueLong.item(0).getTextContent()).longValue()); assertEquals(true, Boolean.valueOf(valueBoolean.item(0).getTextContent()));
assertFalse(bundle.getCertificateFiles().isEmpty()); assertEquals(3, bundle.getCertificateFiles().size()); assertNotNull(bundle.getCertificateFiles().get("cert1")); assertNotNull(bundle.getCertificateFiles().get("cert2")); assertNotNull(bundle.getCertificateFiles().get("cert3"));
assertNull(getSoapResourcesRootDir(temporaryFolder.getRoot()));
assertNotNull(keyStore); assertEquals("PKCS12", keyStore.getType());
assertEquals(4, parentFolders.size()); assertTrue(parentFolders.stream().anyMatch(f -> "Root Node".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "my".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "folder".equals(f.getName()))); assertTrue(parentFolders.stream().anyMatch(f -> "path".equals(f.getName())));
assertEquals(4, lines.size()); assertTrue(lines.get(0).startsWith("key1")); assertTrue(lines.get(1).startsWith("key3")); assertTrue(lines.get(2).startsWith("key4")); assertTrue(lines.get(3).startsWith("key2"));
assertEquals(JsonTools.YAML, jsonTools.getTypeFromExtension("yml")); assertEquals(JsonTools.YAML, jsonTools.getTypeFromExtension("yaml")); assertEquals(JsonTools.JSON, jsonTools.getTypeFromExtension("json")); assertNull(jsonTools.getTypeFromExtension("test.txt"));
assertTrue(path.toFile().exists()); assertTrue(path.toFile().isDirectory());
assertNull(getPolicyRootDir(temporaryFolder.getRoot()));
assertNull(jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertEquals(DESTINATION_STORED_PASSWORD_NAME, jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword());
assertTrue(new File(temporaryFolder.getRoot(), KEYSTORE_FILE_NAME).exists());
assertEquals("operation1Policy", bundle.getEntities(PolicyBackedService.class).get("1").getOperations().stream().collect(Collectors.toMap(PolicyBackedServiceOperation::getOperationName, PolicyBackedServiceOperation::getPolicy)).get("operation1")); assertEquals("operation2Policy", bundle.getEntities(PolicyBackedService.class).get("1").getOperations().stream().collect(Collectors.toMap(PolicyBackedServiceOperation::getOperationName, PolicyBackedServiceOperation::getPolicy)).get("operation2"));
assertEquals(1, childFolders.size()); assertEquals("Folder Test", childFolders.iterator().next().getName());
assertEquals("com.l7tech.external.assertions.http2.routing.model.Http2ClientConfigurationEntity", genericEntity.getEntityClassName()); assertNotNull(genericEntity.getValueXml()); assertThat(genericEntity.getValueXml(), containsString("<void property=\\"tlsVersion\\">")); assertThat(genericEntity.getValueXml(), containsString("<void property=\\"readTimeout\\">")); assertTrue(genericEntity.getAnnotations().contains(new Annotation(AnnotationType.BUNDLE_HINTS)));
assertNotNull(entity); assertEquals("id", entity.getId()); assertEquals("Test", entity.getName()); assertFalse(entity.getIsOneNode()); assertEquals("Recurring", entity.getJobType()); assertEquals("Some Expression", entity.getCronExpression()); assertNull(entity.getExecutionDate()); assertEquals("Scheduled", entity.getJobStatus()); assertFalse(entity.getShouldExecuteOnCreate()); assertEquals("testValue", entity.getProperties().get("testProp"));
assertEquals("a/b/c/policy.xml", path);
assertEquals("test/", PathUtils.unixPathEndingWithSeparator(Paths.get("test"))); assertEquals("test/path/", PathUtils.unixPathEndingWithSeparator(Paths.get("test", "path"))); assertEquals("test/path/subpath/", PathUtils.unixPathEndingWithSeparator(Paths.get("test", "path", "subpath")));
assertEquals(2, bundle.getEntities(ClusterProperty.class).size()); assertEquals(2, bundle.getEntities(GlobalEnvironmentProperty.class).size()); assertEquals("my.name", bundle.getEntities(ClusterProperty.class).get("1").getName()); assertEquals("another", bundle.getEntities(ClusterProperty.class).get("3").getName()); assertEquals("my-value", bundle.getEntities(ClusterProperty.class).get("1").getValue()); assertEquals("my-value", bundle.getEntities(ClusterProperty.class).get("3").getValue());
assertNull(identityProvider.getIdentityProviderDetail());
assertTrue(entities.isEmpty());
assertFalse(new File(temporaryFolder.getRoot(), KEYSTORE_FILE_NAME).exists());
assertNotNull(keyStore); assertEquals(0, keyStore.length);
assertEquals("my.var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); assertNull(expressionElement);
assertEquals(1, activeConnectors.size()); assertEquals("::testGroup::testName::1.0", ssgActiveConnector.getName()); assertEquals("testServiceId", DocumentUtils.getSingleChildElementTextContent(element, BundleElementNames.HARDWIRED)); assertEquals(1, activeConnectors.size());
assertNotNull(entities); assertFalse(entities.isEmpty()); assertEquals(1, entities.size()); assertEquals(EntityTypes.PRIVATE_KEY_TYPE, entity.getType()); assertEquals("test", entity.getName());
assertEquals(JsonTools.JSON, tryInferContentTypeFromValue("{ \'test1\': 1, \'test2\': 2 }"));
assertNull(port.getTargetServiceReference());
assertTrue(wsdlFolder.exists()); assertTrue(serviceSoapResourcesFolder.exists()); assertTrue(wsdlFile.exists());
assertNotNull(entity); assertEquals("id", entity.getId()); assertEquals("Test", entity.getName()); assertFalse(entity.getIsOneNode()); assertEquals("One time", entity.getJobType()); assertEquals("someDate", entity.getExecutionDate()); assertNull(entity.getCronExpression()); assertEquals("Scheduled", entity.getJobStatus()); assertFalse(entity.getShouldExecuteOnCreate()); assertEquals("testValue", entity.getProperties().get("testProp"));
assertTrue(putToBundle.get()); assertTrue(putToBundle.get());
assertEquals(JsonTools.YAML, tryInferContentTypeFromValue("test1:1\\ntest1:2"));
assertEquals(1, entities.size());
assertTrue(entities.isEmpty());
assertEquals("example-", CharacterBlacklistUtil.filterAndReplace("example-------"));
assertEquals("myScheduledPolicy", bundle.getEntities(ScheduledTask.class).get("1").getPolicy());
assertTrue(policyFolder.exists()); assertEquals(0, policyFolder.listFiles().length);
assertFalse(bundle.getPrivateKeys().isEmpty()); assertEquals(1, bundle.getPrivateKeys().size()); assertNotNull(privateKey); assertEquals("alias", privateKey.getName()); assertEquals("alias", privateKey.getAlias()); assertEquals(KeyStoreType.GENERIC, privateKey.getKeyStoreType()); assertEquals(KeyStoreType.GENERIC.getName(), privateKey.getKeystore()); assertEquals("EC", privateKey.getAlgorithm());
assertTrue(entities.isEmpty());
assertNotNull(clientConfigId); assertEquals("a2097d7f50280e9411c277aafedc180d", clientConfigId.getAttributes().getNamedItem(GOID_VALUE).getTextContent()); assertNotNull(clientConfigName); assertEquals("::" + projectInfo.getGroupName() + "::" + "http2client" + "::1.0", clientConfigName.getAttributes().getNamedItem(STRING_VALUE).getTextContent());
assertTrue(exception.getMessage().contains("test"));
assertEquals(EntityTypes.SERVICE_TYPE, loader.getEntityType());
assertFalse(bundle.getPolicyBackedServices().isEmpty()); assertEquals(1, bundle.getPolicyBackedServices().size()); assertNotNull(policyBackedService); assertEquals("service", policyBackedService.getName()); assertEquals("interface", policyBackedService.getInterfaceName()); assertEquals("id", policyBackedService.getId()); assertFalse(policyBackedService.getOperations().isEmpty()); assertEquals(1, policyBackedService.getOperations().size()); assertEquals("operation", operation.getOperationName()); assertEquals("policy", operation.getPolicy());
assertEquals("out", xmlString);
assertNotNull(stream);
assertTrue(assertionJSPolicyConverter.canConvert("myPolicy", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("someOtherPolicyName", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("myPolicy", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("myPolicy", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("myPolicy", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("myPolicy", policyElement)); assertFalse(assertionJSPolicyConverter.canConvert("myPolicy", policyElement));
assertTrue(putToBundle.get());
assertFalse(bundle.getCertificateFiles().isEmpty()); assertEquals(1, bundle.getCertificateFiles().size()); assertNotNull(bundle.getCertificateFiles().get("cert1"));
assertTrue(putToBundle.get()); assertTrue(putToBundle.get());
assertNotNull(registry.getEntityLoaders()); assertNotNull(registry.getLoader("ENTITY")); assertNull(registry.getLoader("LOADER"));
assertEquals(jndiPassword, jmsDestination.getJndiPassword()); assertNull(jmsDestination.getJndiPasswordRef()); assertEquals(destinationPassword, jmsDestination.getDestinationPassword()); assertNull(jmsDestination.getDestinationPasswordRef());
assertNotNull(jsonTools.getObjectWriter());
assertEquals(0, filteredEntities.size());
assertEquals(0, filteredEntities.size());
assertNull(extractVariableName(null)); assertNull(extractVariableName(""));
assertNull(jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertNull(jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword());
assertEquals(1, bundle.getUnsupportedEntities().size()); assertEquals("SSG_ACTIVE", entity.getType());
assertEquals("example-slashed.xml", CharacterBlacklistUtil.filterAndReplace("example-/-\\\\-slashed.xml"));
assertFalse(bundle.getServiceEnvironmentProperties().isEmpty()); assertEquals(1, bundle.getServiceEnvironmentProperties().size()); assertNotNull(property); assertEquals("value2", property.getValue()); assertEquals("service.prop", property.getKey());
assertTrue(properties.containsKey("my.name")); assertTrue(properties.containsKey("another"));
assertNotNull(connectionNameEle); assertEquals("::" + projectInfo.getGroupName() + "::" + connectionName + "::1.0", connectionNameEle.getAttributes().getNamedItem(STRING_VALUE).getTextContent());
assertEquals("cert" + PEM_CERT_FILE_EXTENSION, CertificateUtils.buildCertificateFileName("cert"));
assertEquals(JNDI_STORED_PASSWORD_NAME, jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertNull(jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword());
assertEquals(textExtConverter, policyConverterRegistry.getConverterFromFileName("hello.test.ext"));
assertNotNull(getPolicyRootDir(temporaryFolder.getRoot()));
assertEquals(0, filteredEntities.size());
assertTrue(bundle.getServices().isEmpty());
assertEquals("ENV.my-var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); assertEquals(PREFIX_ENV + prefix + ".my-var", expressionElement.getAttribute(SetVariableAssertionBuilder.ENV_PARAM_NAME)); assertFalse(expressionElement.hasAttribute(PolicyEntityBuilder.STRING_VALUE));
assertEquals("", PathUtils.extractPath("test")); assertEquals("path/", PathUtils.extractPath("path/test")); assertEquals("/path/subpath/", PathUtils.extractPath("/path/subpath/test"));
assertEquals(props, emptyMap());
assertTrue(exception.getMessage().contains(TEST_ENCASS));
assertFalse(entities.isEmpty()); assertEquals(1, entities.size());
assertNotNull(idProvideOidElement);
assertEquals("?q=host%3A%28hostName%29&rows=0&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=type%2Cpath", query.toQueryString());
assertTrue(stateEntities.isEmpty()); assertTrue(stateEntities.contains(stateEntity));
assertSame("false", resolveComponent(info, parentInfo).getModuleInfo().getDecommissionAllowed());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(2, new AndOperator(1).getBasePrecedence());
assertEquals("foo", component.getId());
assertEquals(Integer.valueOf(0), query.getRows()); assertEquals(-1, query.getFacetLimit());
assertEquals(HTTP_RM_URL1, services.getRMUrl());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertNull(yarnService.getComponentByName("HBASE_CLIENT")); assertNull(yarnService.getComponentByName("HBASE_CLIENT")); assertNotNull(yarnService.getComponentByName("HBASE_CLIENT"));
assertSame("false", resolveComponent(info, parentInfo).getModuleInfo().getReassignAllowed());
assertTrue(result);
assertEquals("Incorrect decoding: log time", dateString, jsonParams.remove("logtime")); assertEquals("Incorrect decoding: in memory timestamp", d.getTime(), jsonParams.remove(LogFeederConstants.IN_MEMORY_TIMESTAMP)); assertEquals("Incorrect decoding: some field", "abc", jsonParams.remove("some_field")); assertTrue("jsonParams are not empty!", jsonParams.isEmpty());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(andPred, p);
assertSame(Request.Type.QUERY_POST, r.getRequestType());
assertEquals(notPredicate, new NotOperator(1).toPredicate(null, p));
assertEquals("My Context", stage.getRequestContext()); assertEquals(CLUSTER_HOST_INFO, stage.getClusterHostInfo());
assertNotNull(repository); assertFalse(repository.get("centos5").isEmpty()); assertFalse(repository.get("centos6").isEmpty());
assertEquals(apiUri, uriCapture.getValue());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Wrong password.", e.getMessage());
assertNotSame(builder, copy); assertEquals(builder.generate(), copy.generate()); assertTrue(!copy.generate().equals(builder.generate()));
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertNotNull(alerts); assertEquals(50, alerts.size());
assertTrue(statements.contains(String.format(expectedWidgetUpdate, UpgradeCatalog222.WIDGET_CORRUPT_REPLICAS, UpgradeCatalog222.WIDGET_CORRUPT_REPLICAS_DESCRIPTION, UpgradeCatalog222.WIDGET_CORRUPT_REPLICAS, UpgradeCatalog222.WIDGET_VALUES_VALUE, UpgradeCatalog222.WIDGET_CORRUPT_BLOCKS)));
assertThat(ae, instanceOf(JobExecutionException.class));
assertEquals(PrereqCheckStatus.FAIL, check.getStatus());
assertNull(AppCookieManager.getHadoopAuthCookieValue(new Header[0]));
assertEquals(isRestartRequired, service.getModuleInfo().isRestartRequiredAfterChange()); assertEquals(isRestartRequired, service.getModuleInfo().isRestartRequiredAfterChange()); assertEquals(isRestartRequired, service.getModuleInfo().isRestartRequiredAfterChange());
assertNull(AppCookieManager.getHadoopAuthCookieValue(null));
assertEquals(2, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("ServiceInfo/cluster_name")); assertEquals(0, propertyTree.getChildren().size());
assertEquals("Quick links profile doesn\'t match expected", "{\\"filters\\":[{\\"visible\\":true}],\\"services\\":[]}", request.getQuickLinksProfileJson());
assertTrue("true".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_INSTALLABLE_PROPERTY.getKey()))); assertTrue("false".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_MANAGED_PROPERTY.getKey()))); assertTrue("true".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_MONITORED_PROPERTY.getKey())));
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Password can\'t be null or empty.", e.getMessage());
assertNull(factory.getBlueprint(BLUEPRINT_NAME));
assertTrue(result);
assertEquals("AndOperator", new AndOperator(1).getName());
assertEquals(resultSet.getString("description"), "blah");
assertNotNull(group); assertEquals(definitions.size(), group.getAlertDefinitions().size()); assertEquals(2, groups.size());
assertNotNull(provisioner); assertTrue(provisioner instanceof BlueprintConfigPopulationStrategyV1);
assertEquals(alertsFile, child.getModuleInfo().getAlertsFile()); assertEquals(alertsFile, child.getModuleInfo().getAlertsFile()); assertEquals(alertsFile, child.getModuleInfo().getAlertsFile()); assertEquals(alertsFile, child.getModuleInfo().getAlertsFile());
assertEquals(customCommands, service.getModuleInfo().getCustomCommands()); assertEquals(customCommands, service.getModuleInfo().getCustomCommands()); assertEquals(3, mergedCommands.size()); assertTrue(mergedCommands.contains(cmd2)); assertTrue(mergedCommands.contains(cmd3)); assertTrue(mergedCommands.contains(cmd4)); assertTrue(service.getModuleInfo().getCustomCommands().isEmpty());
assertEquals("GreaterEqualsOperator", new GreaterEqualsOperator().getName());
assertFalse(result);
assertEquals(result.size(), 2); assertEquals(submap.size(), 3); assertEquals(sublist.size(), 2); assertEquals(subsubmap.size(), 1); assertEquals(subsubmap.get("k"), "l"); assertNull(result); assertEquals(result.get("a"), 5);
assertEquals(2, clusterSize);
assertEquals(REMOTE_ADDRESS, remoteAddress);
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertNotNull(provisioner); assertTrue(provisioner instanceof BlueprintConfigPopulationStrategyV2);
assertFalse(repo.getMirrorsList().isEmpty()); assertNull(repo.getBaseUrl()); assertNull(repo.getMirrorsList()); assertFalse(repo.getBaseUrl().isEmpty()); assertEquals(3, centos5Cnt.size()); assertEquals(3, redhat6cnt.size()); assertEquals(3, redhat5cnt.size()); assertEquals(3, centos6Cnt.size());
assertFalse(blueprint.shouldSkipFailure());
assertTrue(propertyTree.getObject().isEmpty()); assertEquals(3, propertyTree.getChildren().size()); assertEquals(1, componentNode.getObject().size()); assertTrue(componentNode.getObject().contains("ServiceComponentInfo/component_name"));
assertTrue(target1.isGlobal()); assertTrue(target2.isGlobal()); assertNotNull(group); assertEquals(2, group.getAlertTargets().size()); assertTrue(groupTarget1.isGlobal()); assertTrue(groupTarget2.isGlobal());
assertEquals(1, new OrOperator(1).getBasePrecedence());
assertEquals("HDFS", hdfsService.getName()); assertNotNull(hdfsService.getMetricsFile());
assertNotNull(lastEvent); assertEquals(Resource.Type.Blueprint, lastEvent.getResourceType()); assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType()); assertNotNull(lastEvent.getPredicate());
assertEquals("Cannot add blueprint: error", result);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, apps.length()); assertEquals("incorrect number of elements", 5, array.length());
assertEquals(resultSet, columnMetadata);
assertEquals(fp, p);
assertEquals("allowedUser", result.getName());
assertEquals("?q=*%3A*&rows=0&facet=true&facet.mincount=1&facet.limit=-1&facet.field=myfield", queryResult.toQueryString());
assertTrue(instance.isCollectionResource());
assertEquals("Incorrect decoding: log time", dateString, jsonParams.remove("logtime")); assertEquals("Incorrect decoding: in memory timestamp", d.getTime(), jsonParams.remove(LogFeederConstants.IN_MEMORY_TIMESTAMP)); assertEquals("Incorrect decoding: line number", 100l, jsonParams.remove("line_number")); assertTrue("jsonParams are not empty!", jsonParams.isEmpty());
assertEquals(16, stacks.size()); assertEquals(2, stacks.size());
assertNull("User already exists in DB", userDAO.findLdapUserByName("allowedUser"));
assertEquals("cluster", new ClusterResourceDefinition().getSingularName());
assertEquals(new GreaterPredicate<String>("1", "2"), new GreaterOperator().toPredicate("1", "2"));
assertFalse(component.isDeleted()); assertTrue(component.isDeleted());
assertNull(host);
assertEquals(2, service.getModuleInfo().getExcludedConfigTypes().size());
assertNotNull(definitions); assertEquals(definition, retrieved);
assertSame(Operator.TYPE.OR, new OrOperator(1).getType());
assertTrue( "An instance of " + DefaultQuickLinkVisibilityController.class.getSimpleName() + " should have been returned", QuickLinkVisibilityControllerFactory.get(json) instanceof DefaultQuickLinkVisibilityController);
assertTrue(propertyInfo.getPropertyAmbariUpgradeBehavior().isAdd()); assertTrue(propertyInfo.getPropertyAmbariUpgradeBehavior().isUpdate()); assertTrue(propertyInfo.getPropertyAmbariUpgradeBehavior().isDelete());
assertSame(result, entity);
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(INCORRECT_USER_SEARCH_FILTER, "(&(uid={0})(objectClass=dummyObjectClass))", ldapServerProperties.getUserSearchFilter(false)); assertEquals(INCORRECT_USER_SEARCH_FILTER, "(&(anotherName={0})(objectClass=dummyObjectClass))", ldapServerProperties.getUserSearchFilter(false));
assertTrue("true".equals(stackServiceResponse.getServiceProperties().get(ServiceInfo.DEFAULT_SERVICE_INSTALLABLE_PROPERTY.getKey()))); assertTrue("true".equals(stackServiceResponse.getServiceProperties().get(ServiceInfo.DEFAULT_SERVICE_MANAGED_PROPERTY.getKey()))); assertTrue("true".equals(stackServiceResponse.getServiceProperties().get(ServiceInfo.DEFAULT_SERVICE_MONITORED_PROPERTY.getKey())));
assertEquals("SESSION_COOKIE", ambariSessionManager.getSessionCookie());
assertEquals("ambari-shell>", result);
assertEquals(setting2, setting.getSettingValue(Setting.SETTING_NAME_SERVICE_SETTINGS));
assertEquals(5, subResources.size()); assertTrue(configReturned); assertTrue(componentReturned); assertTrue(artifactReturned); assertTrue(themesReturned);
assertEquals(false, isValid);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("true".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_INSTALLABLE_PROPERTY.getKey()))); assertTrue("true".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_MANAGED_PROPERTY.getKey()))); assertTrue("true".equals(serviceProperties.get(ServiceInfo.DEFAULT_SERVICE_MONITORED_PROPERTY.getKey())));
assertEquals(2, validators.size()); assertEquals(pwdValidator, defaultPwdValidator);
assertEquals(equalsPred, p);
assertSame(entity2, dao.mergeData(entity));
assertEquals("stubtokenstring", jwtFromCookie);
assertEquals(new GreaterEqualsPredicate<String>("1", "2"), new GreaterEqualsOperator().toPredicate("1", "2"));
assertEquals(new File(stacksFolder, "HDP/2.0.8/kerberos.json").getAbsolutePath(), stack.getKerberosDescriptorFileLocation());
assertFalse(result);
assertTrue(supportedStack); assertFalse(notSupportedStack);
assertEquals(3, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("ServiceInfo/cluster_name")); assertTrue(propertyTree.getObject().contains("foo/bar")); assertEquals(0, propertyTree.getChildren().size());
assertFalse(result);
assertNull(entity); assertNotNull(entity); assertNotNull(entity.getAlertHistory()); assertNotNull(entity.getAlertHistory().getAlertDefinition());
assertEquals(BlueprintResourceProvider.CONFIGURATION_MAP_CHECK_ERROR_MESSAGE, e.getMessage());
assertEquals("test-name", group.getHostGroupName());
assertEquals(resultSet.getString("fname"), "howdy"); assertEquals(count, 1);
assertNull(yarnService.getComponentByName("YARN_CLIENT")); assertNull(yarnService.getComponentByName("YARN_CLIENT")); assertNotNull(yarnService.getComponentByName("YARN_CLIENT"));
assertEquals("bar", sessionManager.getAttribute("foo"));
assertArrayEquals("All characters between \\".matches(\\" and corresponding closing \\")\\" bracket should " + "come to VALUE_OPERAND.", listTokens.toArray(new Token[listTokens.size()]), tokens);
assertFalse("Was able to initialize!", mapperFieldValue.init(null, "someField", null, mapConfigs));
assertEquals(request, chain.getRequest()); assertEquals(response, chain.getResponse());
assertFalse(result);
assertSame(origPrincipal, principal);
assertNull(chain.getRequest()); assertNull(chain.getResponse());
assertSame(Request.Type.DELETE, r.getRequestType());
assertEquals(category, resolveComponent(info, parentInfo).getModuleInfo().getCategory()); assertEquals(category, resolveComponent(info, parentInfo).getModuleInfo().getCategory()); assertEquals(category2, resolveComponent(info, parentInfo).getModuleInfo().getCategory());
assertEquals(true, isValid); assertEquals(false, isValid);
assertNull(new QueryParser().parse(new Token[0]));
assertEquals(1, res.size()); assertEquals("HDFS", res.iterator().next());
assertEquals("foo=bar", body.getQueryString()); assertEquals(bodyQueryOnly, body.getBody());
assertEquals(external, host_component);
assertFalse("Was able to initialize!", mapperDate.init(null, "someField", null, mapConfigs));
assertEquals(entity, newEntity);
assertEquals("principal", authenticationResult.getName()); assertEquals("credentials", authenticationResult.getCredentials()); assertEquals(1, authenticationResult.getAuthorities().size()); assertEquals(new SimpleGrantedAuthority("ROLE_USER"), authenticationResult.getAuthorities().iterator().next());
assertEquals(dependencies, resolveComponent(info, parentInfo).getModuleInfo().getConfigDependencies()); assertEquals(dependencies, resolveComponent(info, parentInfo).getModuleInfo().getConfigDependencies()); assertEquals(2, resolvedDependencies.size()); assertTrue(resolvedDependencies.contains(dependency3)); assertTrue(resolvedDependencies.contains(dependency4));
assertNotNull(history); assertEquals(50, history.size()); assertNotNull(history); assertEquals(40, history.size()); assertNotNull(history); assertEquals(10, history.size()); assertNotNull(history); assertEquals(0, history.size());
assertEquals(andPredicate, new AndOperator(1).toPredicate(p1, p2));
assertTrue(stateEntities.isEmpty()); assertTrue(stateEntities.contains(stateEntity)); assertFalse(stateEntities.contains(stateEntity));
assertEquals(REMOTE_ADDRESS, remoteAddress);
assertSame(bulkCommandsDefinition, resolveComponent(info, parentInfo).getModuleInfo().getBulkCommandDefinition()); assertSame(bulkCommandsDefinition, resolveComponent(info, parentInfo).getModuleInfo().getBulkCommandDefinition()); assertSame(bulkCommandsDefinition, resolveComponent(info, parentInfo).getModuleInfo().getBulkCommandDefinition());
assertEquals(IOUtils.toString(new FileInputStream(new File("src/test/resources/2columns"))), TableRenderer.renderMultiValueMap(map, "SERVICE", "COMPONENT"));
assertSame(UnlimitedKeyJCERequirement.ALWAYS, resolveComponent(info, parentInfo).getModuleInfo().getUnlimitedKeyJCERequired());
assertFalse("Was able to initialize!", mapperFieldCopy.init(null, "someField", null, ""));
assertNotNull(stackHierarchy); assertNotNull(stackName); assertEquals("stack", stackName.asText()); assertNotNull(stackVersions); assertEquals(0, stackVersions.size());
assertNotNull(definitions); assertEquals(10, definitions.size()); assertNotNull(definitions); assertEquals(0, definitions.size());
assertEquals(kerberosDescriptorFile, child.getModuleInfo().getKerberosDescriptorFile()); assertEquals(kerberosDescriptorFile, child.getModuleInfo().getKerberosDescriptorFile()); assertEquals(kerberosDescriptorFile, child.getModuleInfo().getKerberosDescriptorFile()); assertEquals(kerberosDescriptorFile, child.getModuleInfo().getKerberosDescriptorFile());
assertTrue(result.contains("collection1")); assertTrue(result.contains("collection2")); assertEquals(2, result.size());
assertEquals(ConfigurationDependenciesRecommendationCommand.class, command.getClass());
assertEquals(hiveStatement, statement);
assertNotNull(stackHierarchy); assertNotNull(stackName); assertEquals("stack", stackName.asText()); assertNotNull(stackVersions); assertEquals(2, stackVersions.size()); assertEquals("0.9", stackVersionsElements.next().asText()); assertEquals("0.8", stackVersionsElements.next().asText());
assertNull("User alread exists in DB", userDAO.findLdapUserByName("allowedUser")); assertTrue(result.isAuthenticated()); assertEquals(ldapUser.getUserId(), result.getUserId()); assertTrue(result.isAuthenticated()); assertEquals(ldapUser.getUserId(), result.getUserId());
assertEquals(requiredServices, service.getModuleInfo().getRequiredServices()); assertEquals(requiredServices, service.getModuleInfo().getRequiredServices()); assertEquals(requiredServices, service.getModuleInfo().getRequiredServices()); assertTrue(service.getModuleInfo().getRequiredServices().isEmpty());
assertEquals("IsEmptyOperator", new IsEmptyOperator().getName());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertNotNull(config.getConfigData()); assertNotNull(config.getConfigAttributes()); assertNotNull(configData); assertNotNull(configAttrs); assertEquals(2, configData.size()); assertTrue(configData.containsKey("property1")); assertTrue(configData.containsKey("property2")); assertEquals("val1", configData.get("property1")); assertEquals("val2", configData.get("property2")); assertEquals(0, configAttrs.size());
assertSame(mapHeaders, request.getHttpHeaders());
assertEquals(HTTP_RM_URL2, services.getRMUrl());
assertEquals(history.getAlertText(), current.getLatestText()); assertEquals(history.getAlertText(), current.getLatestText());
assertEquals("user", name);
assertEquals(propertyValues.size(), 1); assertEquals(propertyValues.iterator().next().get(Setting.SETTING_NAME_RECOVERY_ENABLED), "true");
assertNotNull(serverProperties); assertEquals("b", serverProperties.iterator().next().getTextValue());
assertEquals(servicePropertyList, serviceModule.getModuleInfo().getServicePropertyList()); assertEquals(serviceProperties, serviceModule.getModuleInfo().getServiceProperties());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertSame(Operator.TYPE.EQUAL, new EqualsOperator().getType());
assertEquals(true, isValid); assertEquals(true, isValid);
assertEquals(new CategoryIsEmptyPredicate("category1"), p);
assertEquals("jdoe", result.getKeyValueMap().get(Resource.Type.User));
assertNull(userDAO.findSingleUserByName(SERVICEOP_USER_NAME));
assertEquals(orPredicate, new InOperator().toPredicate(prop, val));
assertEquals(1, setResults.size());
assertNull(service); assertNull(service); assertEquals(removedServices.size(), 2); assertTrue(expectedServices.remove(s)); assertTrue(expectedServices.isEmpty());
assertEquals(3, histories.size()); assertEquals(2, histories.size()); assertEquals(1, histories.size()); assertEquals(0, histories.size());
assertEquals("my_s3_path/" + LogFeederUtil.ipAddress + "/filename.log", resolvedPath);
assertEquals(displayName, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName()); assertEquals(displayName, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName()); assertEquals(displayName2, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName());
assertEquals(REMOTE_ADDRESS, remoteAddress);
assertEquals(6, subResources.size()); assertTrue(operatingSystemFound); assertTrue(serviceFound); assertTrue(configFound); assertTrue(repoFound); assertTrue(artifactReturned); assertTrue(compatibleFound);
assertTrue(upgrades.size() > 0); assertTrue(upgrades.containsKey("upgrade_test_nonrolling")); assertEquals(true, itr_up.hasNext()); assertEquals(itr_up.next(), g.name); assertEquals(true, itr_down.hasNext()); assertEquals(itr_down.next(), g.name);
assertEquals(Types.BIGINT, dbAccessor.getColumnType(tableName, "id")); assertEquals(Types.VARCHAR, dbAccessor.getColumnType(tableName, "name"));
assertEquals("user", principal);
assertEquals(2, dependencies.size()); assertEquals("HDFS/HDFS_CLIENT", dependency.getName()); assertEquals("HDFS_CLIENT", dependency.getComponentName()); assertEquals("HDFS", dependency.getServiceName()); assertEquals("host", dependency.getScope()); assertEquals("ZOOKEEPER/ZOOKEEPER_SERVER", dependency.getName()); assertEquals("ZOOKEEPER_SERVER", dependency.getComponentName()); assertEquals("ZOOKEEPER", dependency.getServiceName()); assertEquals("cluster", dependency.getScope());
assertEquals(-1, requestStages.getLastStageId()); assertEquals(22, requestStages.getLastStageId());
assertTrue(serviceInfo.isRestartRequiredAfterRackChange()); assertFalse(serviceInfo.isRestartRequiredAfterRackChange());
assertEquals( "user", result.getKeyValueMap().get(Resource.Type.User));
assertEquals("http", services.getYARNProtocol());
assertSame(expecteAuthDetails, authDetails);
assertEquals(2, roles.size()); assertTrue(roles.contains("CLUSTER.OPERATOR")); assertTrue(roles.contains("CLUSTER.USER"));
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(parentServicePropertyList, serviceModule.getModuleInfo().getServicePropertyList()); assertEquals(parentServiceProperties, serviceModule.getModuleInfo().getServiceProperties());
assertEquals(host_resolution_check.get("success_count"), 3); assertEquals(host_resolution_check.get("failed_count"), 1);
assertEquals("0+", resolveComponent(info, null).getModuleInfo().getCardinality()); assertEquals("foo", resolveComponent(info, parentInfo).getModuleInfo().getCardinality()); assertEquals(cardinality, resolveComponent(info, parentInfo).getModuleInfo().getCardinality()); assertEquals(cardinality2, resolveComponent(info, parentInfo).getModuleInfo().getCardinality());
assertEquals(ConfigurationValidationCommand.class, command.getClass());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, containers.length()); assertEquals("incorrect number of elements", 5, array.length());
assertEquals("Incorrect column name added", "provision_action", capturedHostGroupComponentProvisionColumn.getValue().getName()); assertNull("Incorrect default value added", capturedHostGroupComponentProvisionColumn.getValue().getDefaultValue()); assertEquals("Incorrect column type added", String.class, capturedHostGroupComponentProvisionColumn.getValue().getType()); assertEquals("Incorrect column length added", 255, capturedHostGroupComponentProvisionColumn.getValue().getLength().intValue()); assertTrue("Incorrect column nullable state added", capturedHostGroupComponentProvisionColumn.getValue().isNullable());
assertEquals(resultSet.getString("name"), "blah");
assertEquals(new LessEqualsPredicate<String>("1", "2"), new LessEqualsOperator().toPredicate("1", "2"));
assertEquals("EqualsOperator", new EqualsOperator().getName());
assertEquals("group0 is not a valid host group", result);
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertNotNull(userContext); assertEquals(2, userContext.size()); assertEquals("op1", userContext.get("operation")); assertEquals("op_det", userContext.get("operation_details"));
assertFalse("Was able to initialize!", mapperFieldName.init(null, "someField", null, mapConfigs));
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Password can\'t be null or empty.", e.getMessage());
assertEquals(new NotPredicate(new EqualsPredicate<String>("a", "b")), p);
assertEquals(attributes, clusters.getSessionAttributes("c1"));
assertTrue(resource.getRenderer(null) instanceof DefaultRenderer); assertTrue(resource.getRenderer("default") instanceof DefaultRenderer); assertTrue(resource.getRenderer("minimal") instanceof MinimalRenderer);
assertNotNull(history); assertEquals(50, history.size()); assertNotNull(history); assertEquals(1, history.size()); assertNotNull(history); assertEquals(6, history.size()); assertNotNull(history); assertEquals(0, history.size()); assertNotNull(history); assertEquals(0, history.size());
assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureOne.getValue()); assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureTwo.getValue());
assertSame("true", resolveComponent(info, parentInfo).getModuleInfo().getReassignAllowed());
assertTrue(result);
assertEquals("ZOOKEEPER/ZOOKEEPER_SERVER", dependency.getName()); assertEquals("ZOOKEEPER_SERVER", dependency.getComponentName()); assertEquals("ZOOKEEPER", dependency.getServiceName()); assertEquals("cluster", dependency.getScope());
assertEquals(orPredicate, p);
assertEquals(propertySet.hashCode(), propertySet2.hashCode());
assertEquals(2, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("foo/bar")); assertEquals(0, propertyTree.getChildren().size());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertSame(provider.authenticate(authentication), authentication);
assertEquals("Quick links profile doesn\'t match expected", "{\\"filters\\":[{\\"visible\\":true}],\\"services\\":[{\\"name\\":\\"HDFS\\",\\"components\\":[],\\"filters\\":[{\\"visible\\":true}]}]}", request.getQuickLinksProfileJson());
assertEquals("prop_name", name);
assertEquals(pk1.hashCode(), pk2.hashCode());
assertTrue(stateEntities.isEmpty()); assertTrue(stateEntities.contains(stateEntity)); assertFalse(stateEntities.contains(stateEntity));
assertTrue("All links should be visible.", link.isVisible());
assertEquals(12, allServices.size()); assertTrue(expectedServices.remove(service.getName())); assertTrue(expectedServices.isEmpty());
assertEquals(3, notices.size()); assertTrue(lastId < currentId); assertEquals(3, notices.size()); assertTrue(lastId > currentId);
assertTrue(stateEntities.isEmpty());
assertNotNull(components); assertTrue(components.size() > 0);
assertEquals(IOUtils.toString(new FileInputStream(new File("src/test/resources/3columns"))), TableRenderer.renderMapValueMap(map, "SERVICE", "COMPONENT", "STATE"));
assertEquals(checks.getPath(), child.getModuleInfo().getChecksFolder().getPath()); assertEquals(checks.getPath(), child.getModuleInfo().getChecksFolder().getPath()); assertEquals(checks.getPath(), child.getModuleInfo().getChecksFolder().getPath());
assertFalse(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern)); assertTrue(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern)); assertFalse(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern)); assertTrue(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern)); assertTrue(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern)); assertTrue(HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
assertEquals(2, attributes.size()); assertEquals("value1", attributes.get("foo")); assertEquals("value2", attributes.get("bar"));
assertEquals("2048m", normalizedValue); assertEquals("2048", normalizedValue); assertEquals("2048m", normalizedValue); assertEquals("2048M", normalizedValue); assertEquals("2g", normalizedValue); assertEquals("2G", normalizedValue);
assertSame(body, request.getBody());
assertNotNull(AppCookieManager.getHadoopAuthCookieValue(headers));
assertEquals(dependencies, resolveComponent(info, parentInfo).getModuleInfo().getDependencies()); assertEquals(dependencies, resolveComponent(info, parentInfo).getModuleInfo().getDependencies()); assertEquals(3, resolvedDependencies.size()); assertTrue(resolvedDependencies.contains(dependency1)); assertTrue(resolvedDependencies.contains(dependency3)); assertTrue(resolvedDependencies.contains(dependency4));
assertEquals(0, e.status);
assertEquals(1, results.size()); assertSame(entity, results.get(0));
assertEquals("my_s3_path/" + LogFeederUtil.hostName + "/filename.log", resolvedPath);
assertEquals("testLoginAlias@testdomain.com login alias in the request Uri should be resolved to testuser1 user name !", "/test/users/testuser1/test1", updatedRequest.getRequestURI());
assertTrue( "An instance of " + ShowAllLinksVisibilityController.class.getSimpleName() + " should have been returned", QuickLinkVisibilityControllerFactory.get(null) instanceof ShowAllLinksVisibilityController);
assertEquals(4, properties.size()); assertEquals(2, attributes.size()); assertTrue(attributes.containsKey("FOO")); assertTrue(attributes.containsKey("OTHER"));
assertSame(passord, credentials);
assertEquals(containerRequest, filter.filter(containerRequest));
assertFalse(result);
assertSame("true", resolveComponent(info, parentInfo).getModuleInfo().getReassignAllowed());
assertEquals("host1 is not a valid host name", result);
assertEquals(100, response.getRequestId()); assertEquals(1, tasks.size()); assertEquals(1, task.getTaskId()); assertEquals(roleCommand.toString(), task.getCommand()); assertEquals(status.toString(), task.getStatus()); assertEquals("test", response.getRequestContext());
assertNotNull(body.getNamedPropertySets()); assertEquals(0, body.getNamedPropertySets().size()); assertNull(body.getQueryString()); assertNull(body.getPartialResponseFields()); assertNull(body.getBody());
assertNull(host);
assertEquals(new EqualsPredicate<String>("a", "b"), p);
assertSame(expectedAuthorities, grantedAuthorities);
assertEquals(3, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("ServiceInfo/cluster_name")); assertTrue(propertyTree.getObject().contains("foo/bar")); assertEquals(0, propertyTree.getChildren().size());
assertFalse("ClusterBlueprintRenderer should not require property provider input", clusterBlueprintRenderer.requiresPropertyProviderInput());
assertEquals(FocusType.ROOT.prefix() + ":single-node>", result);
assertEquals(true, isValid); assertEquals(false, isValid);
assertEquals("Json should match", expected, s);
assertEquals(BlueprintResourceProvider.REQUEST_BODY_EMPTY_ERROR_MESSAGE, e.getMessage());
assertNull(blueprintTree.getStringProperty("isCollection")); assertEquals(1, blueprintTree.getChildren().size()); assertEquals(0, blueprintNode.getChildren().size()); assertEquals("HDP", properties.get("Blueprints").get("stack_name")); assertEquals("1.3.3", properties.get("Blueprints").get("stack_version")); assertEquals("KERBEROS", securityProperties.get("type")); assertNotNull(((Map<String, Object>) securityProperties.get("kerberos_descriptor")).get("properties"));
assertTrue(stateEntities.isEmpty()); assertTrue(stateEntities.contains(stateEntity));
assertFalse("Was able to initialize!", mapperFieldValue.init(null, "someField", null, ""));
assertEquals(ComponentLayoutValidationCommand.class, command.getClass());
assertEquals("user", principal);
assertThat(timestamps) .hasSize(6) .containsOnly(0, 5, 10, 15, 20, 25);
assertEquals(HTTP_RM_URL1, services.getTimelineServerUrl());
assertEquals(ImmutableSet.of(expected), resources);
assertEquals(0, results.size());
assertEquals(StageUtils.getActionId(1, 2), s.getActionId());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Bad credentials", e.getMessage());
assertEquals(String.format("%s\\n%s", renderSingleMap(hostNames, "HOSTNAME", "STATE"), renderMultiValueMap(map, "HOSTGROUP", "COMPONENT")), result);
assertEquals("cn=member,dc=apache,dc=org", result);
assertEquals(0, tokens.length);
assertEquals(clientConfigs, resolveComponent(info, parentInfo).getModuleInfo().getClientConfigFiles()); assertEquals(clientConfigs, resolveComponent(info, parentInfo).getModuleInfo().getClientConfigFiles()); assertEquals(clientConfigs2, resolveComponent(info, parentInfo).getModuleInfo().getClientConfigFiles());
assertEquals(500, requestStages.getId().longValue());
assertEquals("Incorrect initial state for hdfs-site config", 0, hdfsSiteProperties.size()); assertEquals("Incorrect state for hdfs-site config after HA call in non-HA environment, should be zero", 0, hdfsSiteProperties.size());
assertSame(resource, request.getResource());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Password can\'t be null or empty.", e.getMessage());
assertEquals(1, requestIdsResult.size()); assertTrue(requestIdsResult.contains(requestId)); assertEquals(1, requestIdsResult.size()); assertTrue(requestIdsResult.contains(requestId));
assertNotNull(provisioner); assertTrue(provisioner instanceof BlueprintConfigPopulationStrategyV2);
assertSame(listStages, manager.getActions(requestId));
assertSame(Operator.TYPE.LESS_EQUAL, new LessEqualsOperator().getType());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(2, validators.size()); assertEquals(pwdValidator, noDefaultPwdValidator);
assertTrue(result);
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertTrue(supportedPropertyIds.containsAll(propertyIds));
assertEquals("Default blueprints added", result);
assertTrue(isMatch); assertEquals("/aaa/users/", pre); assertEquals("user1@domain", userName); assertEquals("/privileges", post);
assertEquals("collection1", result);
assertNotNull(definitions); assertEquals(definition, retrieved);
assertEquals(1, request.getAPIVersion());
assertEquals("service", new ServiceResourceDefinition().getSingularName());
assertTrue(result);
assertEquals("hosts", new HostResourceDefinition().getPluralName());
assertEquals("principal", authenticationResult.getName()); assertEquals("credentials", authenticationResult.getCredentials()); assertEquals(1, authenticationResult.getAuthorities().size()); assertEquals(new SimpleGrantedAuthority("ROLE_USER"), authenticationResult.getAuthorities().iterator().next());
assertEquals(containerRequest, filter.filter(containerRequest));
assertNotNull(definitions); assertEquals(15, definitions.size()); assertNotNull(enabledDefinitions); assertEquals(definitions.size(), enabledDefinitions.size()); assertNotNull(enabledDefinitions); assertEquals(definitions.size() - 1, enabledDefinitions.size());
assertEquals(osSpecifics, service.getModuleInfo().getOsSpecifics()); assertEquals(osSpecifics, service.getModuleInfo().getOsSpecifics()); assertEquals(osSpecifics, service.getModuleInfo().getOsSpecifics());
assertFalse("Was able to initialize!", mapperDate.init(null, "someField", null, mapConfigs));
assertEquals(UserType.JWT, userDAO.findSingleUserByName(SERVICEOP_USER_NAME).getUserType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertFalse(result);
assertTrue(result);
assertEquals(commands, resolveComponent(info, parentInfo).getModuleInfo().getCustomCommands()); assertEquals(commands, resolveComponent(info, parentInfo).getModuleInfo().getCustomCommands()); assertEquals(3, resolvedCommands.size()); assertTrue(resolvedCommands.contains(command1)); assertTrue(resolvedCommands.contains(command3)); assertTrue(resolvedCommands.contains(command4));
assertSame(provider.authenticate(authentication), authentication);
assertEquals(true, isValid); assertEquals(false, isValid);
assertEquals("Quick links profile doesn\'t match expected", "{\\"filters\\":[],\\"services\\":[{\\"name\\":\\"HDFS\\",\\"components\\":[],\\"filters\\":[{\\"visible\\":true}]}]}", request.getQuickLinksProfileJson());
assertSame(Operator.TYPE.IS_EMPTY, new IsEmptyOperator().getType());
assertEquals(request, chain.getRequest()); assertEquals(response, chain.getResponse());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("User not found.", e.getMessage());
assertFalse(isMatch);
assertEquals("services", new ServiceResourceDefinition().getPluralName());
assertEquals(ComponentLayoutRecommendationCommand.class, command.getClass());
assertEquals("Blueprint: \'blueprintName\' has been added", result);
assertEquals(TargetConfigurationResult.Status.VALID, configValidationResult.getStatus());
assertSame(Operator.TYPE.GREATER, new GreaterOperator().getType());
assertNotNull(body.getNamedPropertySets()); assertEquals(0, body.getNamedPropertySets().size()); assertNull(body.getQueryString()); assertNull(body.getPartialResponseFields()); assertNull(body.getBody());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertSame("true", resolveComponent(info, parentInfo).getModuleInfo().getDecommissionAllowed());
assertNull("No quick links profile is expected", request.getQuickLinksProfileJson());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(HTTP_RM_URL1, services.getRMUrl()); assertEquals(HTTPS_RM_URL2, services.getRMUrl()); assertEquals(HTTP_RM_URL1, services.getRMUrl());
assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureOne.getValue());
assertFalse("Was able to initialize!", mapperDate.init(null, "someField", null, ""));
assertSame(Operator.TYPE.FILTER, new FilterOperator().getType());
assertSame(UnlimitedKeyJCERequirement.ALWAYS, resolveComponent(info, parentInfo).getModuleInfo().getUnlimitedKeyJCERequired());
assertEquals(0, tokens.length);
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Password can\'t be null or empty.", e.getMessage());
assertEquals("host3 is not a valid hostname", result);
assertTrue(serviceProperties.containsKey("PROP1")); assertEquals("VAL1", serviceProperties.get("PROP1")); assertTrue(serviceProperties.containsKey("PROP2")); assertEquals("VAL2", serviceProperties.get("PROP2"));
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(p.pattern(), "(?<!-Dhdp\\\\.version=)2\\\\.3\\\\.4\\\\.0-1234");
assertEquals(INCORRECT_URL_LIST, 1, urls.size());
assertEquals(1, res.size());
assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureOne.getValue());
assertNull(result);
assertEquals(UserType.LOCAL, userDAO.findSingleUserByName(SERVICEOP_USER_NAME).getUserType());
assertNotNull(si);
assertEquals(TargetConfigurationResult.Status.VALID, configValidationResult.getStatus());
assertEquals(UserType.LDAP, userDAO.findSingleUserByName(SERVICEOP_USER_NAME).getUserType());
assertEquals(pk, pk2); assertEquals(pk2, pk); assertFalse(pk.equals(pk2)); assertFalse(pk2.equals(pk)); assertEquals(pk, pk2); assertEquals(pk2, pk); assertFalse(pk.equals(pk2)); assertFalse(pk2.equals(pk));
assertEquals("Failed to add the default blueprints: Connection refused", result);
assertEquals("stage", resourceDefinition.getSingularName());
assertTrue(currentAlerts.size() >= 5); assertTrue(lastId < alert.getAlertId()); assertTrue(currentAlerts.size() >= 5); assertTrue(lastId > alert.getAlertId());
assertEquals(3, subResources.size()); assertTrue(includesType(subResources, Resource.Type.Component)); assertTrue(includesType(subResources, Resource.Type.Alert)); assertTrue(includesType(subResources, Resource.Type.Artifact));
assertEquals(new FilterPredicate("p1", ".*"), new FilterOperator().toPredicate("p1", ".*"));
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertSame(commandScript, resolveComponent(info, parentInfo).getModuleInfo().getCommandScript()); assertSame(commandScript, resolveComponent(info, parentInfo).getModuleInfo().getCommandScript()); assertSame(commandScript, resolveComponent(info, parentInfo).getModuleInfo().getCommandScript());
assertEquals(attributes, cluster.getSessionAttributes()); assertEquals(Collections.<String, Object>emptyMap(), cluster.getSessionAttributes());
assertEquals(String.format("%s:%s>", FocusType.HOST.prefix(), "target"), result);
assertNotNull(definitions); assertEquals(2, definitions.size());
assertSame(Operator.TYPE.IN, new InOperator().getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertSame(Operator.TYPE.NOT, new NotOperator(1).getType());
assertNull("User already exists in DB", userDAO.findLdapUserByName("allowedUser"));
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertSame(entity2, dao.merge(entity));
assertEquals("user1", name);
assertEquals("Not a valid blueprint id", result);
assertNotNull(resultedAuth); assertEquals(true, resultedAuth.isAuthenticated()); assertTrue(resultedAuth instanceof AmbariUserAuthentication); assertEquals(1, ((User) resultedAuth.getPrincipal()).getUserId());
assertEquals(UserType.PAM, userDAO.findSingleUserByName(SERVICEOP_USER_NAME).getUserType());
assertEquals("OrOperator", new OrOperator(1).getName());
assertFalse(result);
assertEquals(RootServiceResponseFactory.Services.values().length, rootServices.size()); assertEquals(RootServiceResponseFactory.Services.values().length, rootServices.size()); assertTrue(e instanceof ObjectNotFoundException); assertEquals(1, rootServices.size()); assertTrue(rootServices.contains(new RootServiceResponse( RootServiceResponseFactory.Services.AMBARI.name())));
assertEquals(hostGroups, result);
assertEquals("user", name);
assertEquals("GreaterOperator", new GreaterOperator().getName());
assertEquals(4, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("ServiceInfo/cluster_name")); assertTrue(propertyTree.getObject().contains("foo/bar")); assertTrue(propertyTree.getObject().contains("params/padding/NULLS")); assertEquals(0, propertyTree.getChildren().size());
assertNotNull(childTheme.getThemeConfiguration().getLayouts()); assertEquals(10, parentTheme.getThemeConfiguration().getPlacement().getConfigs().size()); assertEquals(12, childTheme.getThemeConfiguration().getPlacement().getConfigs().size()); assertEquals(10, parentTheme.getThemeConfiguration().getWidgets().size()); assertEquals(12, childTheme.getThemeConfiguration().getWidgets().size());
assertEquals(HTTP_RM_URL1, services.getRMUrl());
assertEquals(mapIds.get(Resource.Type.Host), "testhost1");
assertEquals(40.0, status.getPercent(), 0.1);
assertEquals(autoDeployInfo, resolveComponent(info, parentInfo).getModuleInfo().getAutoDeploy()); assertEquals(autoDeployInfo, resolveComponent(info, parentInfo).getModuleInfo().getAutoDeploy()); assertEquals(autoDeployInfo, resolveComponent(info, parentInfo).getModuleInfo().getAutoDeploy());
assertTrue("Generated metric should be in range", from < metric && metric < to);
assertTrue(stateEntities.isEmpty());
assertEquals("Successfully deleted the cluster", result);
assertTrue(propertyTree.getObject().isEmpty()); assertEquals(3, propertyTree.getChildren().size()); assertEquals(2, componentNode.getObject().size()); assertTrue(componentNode.getObject().contains("ServiceComponentInfo/component_name")); assertTrue(componentNode.getObject().contains("ServiceComponentInfo/service_name"));
assertEquals("Could not delete the cluster: msg", result);
assertSame("true", resolveComponent(info, parentInfo).getModuleInfo().getDecommissionAllowed());
assertEquals(3, new NotOperator(1).getBasePrecedence());
assertSame(Request.Type.GET, r.getRequestType());
assertTrue(resource.getRenderer(null) instanceof DefaultRenderer); assertTrue(resource.getRenderer("default") instanceof DefaultRenderer); assertTrue(resource.getRenderer("minimal") instanceof MinimalRenderer); assertTrue(resource.getRenderer("blueprint") instanceof ClusterBlueprintRenderer);
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals("(&(objectclass=posixaccount)(uid=myUid))", result.encode());
assertSame(Request.Type.PUT, r.getRequestType());
assertEquals(notice.getNotificationId(), actual.getNotificationId()); assertNull(m_dao.findNoticeByUuid("DEADBEEF"));
assertEquals(TargetConfigurationResult.Status.INVALID, configValidationResult.getStatus());
assertEquals("NotEqualsOperator", new NotEqualsOperator().getName());
assertEquals(DBAccessor.DbType.H2, dbAccessor.getDbType());
assertEquals(HTTP_RM_URL2, services.getRMUrl());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(PrereqCheckStatus.PASS, check.getStatus()); assertEquals(PrereqCheckStatus.FAIL, check.getStatus()); assertEquals(PrereqCheckStatus.PASS, check.getStatus()); assertEquals(PrereqCheckStatus.FAIL, check.getStatus()); assertEquals(PrereqCheckStatus.PASS, check.getStatus());
assertEquals(expected, json);
assertEquals("clusters", new ClusterResourceDefinition().getPluralName());
assertEquals("NotOperator", new NotOperator(1).getName());
assertEquals(commandScript, service.getModuleInfo().getCommandScript()); assertEquals(commandScript, service.getModuleInfo().getCommandScript()); assertEquals(commandScript, service.getModuleInfo().getCommandScript());
assertEquals("stages", resourceDefinition.getPluralName());
assertFalse(result.contains("Failed")); assertTrue(result.contains("Successfully"));
assertSame(Operator.TYPE.NOT_EQUAL, new NotEqualsOperator().getType());
assertEquals(AmbariPrompt.class.getSimpleName(), result);
assertEquals(2, stages.size());
assertSame(entity, result);
assertEquals(propertyValues.size(), 1); assertEquals(propertyValues.iterator().next().get(Setting.SETTING_NAME_RECOVERY_ENABLED), "true");
assertEquals(properties, setting.getProperties());
assertEquals(3, notices.size()); assertEquals(2, notices.size()); assertEquals(1, notices.size()); assertEquals(0, notices.size());
assertEquals(newAssignments, result);
assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureOne.getValue()); assertSame("Exception passed to Logger should have been the same instance passed into the Utils method", expectedException, exceptionCaptureTwo.getValue());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("LessEqualsOperator", new LessEqualsOperator().getName());
assertEquals(orPredicate, p);
assertEquals("aaa", hostAttributes.get("foo")); assertEquals("bbb", hostAttributes.get("bar")); assertEquals("aaa", hostAttributes.get("foo")); assertEquals("bbb", hostAttributes.get("bar"));
assertEquals("packageDir", child.getModuleInfo().getServicePackageFolder()); assertEquals(servicePackageFolder, child.getModuleInfo().getServicePackageFolder()); assertEquals(servicePackageFolder, child.getModuleInfo().getServicePackageFolder()); assertEquals(servicePackageFolder, child.getModuleInfo().getServicePackageFolder());
assertFalse(result);
assertNotNull(provisioner); assertTrue(provisioner instanceof BlueprintConfigPopulationStrategyV2);
assertNotNull(definition); assertNull(definition);
assertEquals(expectedPropertyTypes, propertyInfo.getPropertyTypes());
assertTrue(clusters.getClustersForHost(hostToDelete).isEmpty()); assertFalse(clusters.getHostsForCluster(clusterName).containsKey(hostToDelete)); assertFalse(cluster.getHosts().contains(hostToDelete));
assertNotNull(serviceInfo); assertTrue(!serviceInfo.getConfigDependencies().isEmpty());
assertFalse(response.isPagedResponse()); assertTrue(response.isPagedResponse());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals("principal", authenticationResult.getName()); assertEquals(CommonUtil.encryptPassword("principal", "credentials"), authenticationResult.getCredentials()); assertEquals(1, authenticationResult.getAuthorities().size()); assertEquals(new SimpleGrantedAuthority("ROLE_USER"), authenticationResult.getAuthorities().iterator().next());
assertEquals(1, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertEquals(0, propertyTree.getChildren().size());
assertEquals("SESSION_ID", sessionManager.getCurrentSessionId()); assertNull(sessionManager.getCurrentSessionId());
assertEquals(displayName, service.getModuleInfo().getDisplayName()); assertEquals(displayName, service.getModuleInfo().getDisplayName()); assertEquals(displayName, service.getModuleInfo().getDisplayName());
assertEquals("my_s3_path/cl1/filename.log", resolvedPath);
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertEquals(2, configuration.getProperties().size()); assertEquals(2, configProperties1.size()); assertEquals("prop1Value", configProperties1.get("prop1")); assertEquals("prop2Value", configProperties1.get("prop2")); assertEquals(1, configProperties2.size()); assertEquals("prop3Value", configProperties2.get("prop3")); assertTrue(configuration.getAttributes().isEmpty());
assertEquals(comment, service.getModuleInfo().getComment()); assertEquals(comment, service.getModuleInfo().getComment()); assertEquals(comment, service.getModuleInfo().getComment());
assertEquals(execute.get(), resultSet);
assertEquals(BlueprintResourceProvider.CONFIGURATION_MAP_SIZE_CHECK_ERROR_MESSAGE, e.getMessage());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertEquals("uid={0} dummyObjectClass={1}", filter);
assertEquals("user", name);
assertSame(Operator.TYPE.AND, new AndOperator(1).getType());
assertEquals(internal, hostComponent); assertEquals(internal, hostComponent);
assertTrue(propertyInfo.getPropertyAmbariUpgradeBehavior().isAdd()); assertFalse(propertyInfo.getPropertyAmbariUpgradeBehavior().isUpdate()); assertFalse(propertyInfo.getPropertyAmbariUpgradeBehavior().isDelete());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, appAttempts.length()); assertEquals("incorrect number of elements", 5, array.length());
assertEquals(expectedUserDetails, principal);
assertTrue(isMatch); assertEquals("/aaa/users/", pre); assertEquals("user1@domain", userName); assertEquals("", post);
assertTrue( "An instance of " + ShowAllLinksVisibilityController.class.getSimpleName() + " should have been returned", QuickLinkVisibilityControllerFactory.get(json) instanceof ShowAllLinksVisibilityController); assertTrue( "An instance of " + ShowAllLinksVisibilityController.class.getSimpleName() + " should have been returned", QuickLinkVisibilityControllerFactory.get(json) instanceof ShowAllLinksVisibilityController);
assertEquals("HDP-2.0", config.getStackId());
assertEquals("collection1", result);
assertEquals(orPRedicate, new OrOperator(1).toPredicate(p1, p2));
assertEquals("Request IDs not matches", expected, actual); assertEquals("Request IDs not matches", expected, actual); assertEquals("Request IDs not matches", expected, actual);
assertEquals(2, definitions.size());
assertEquals(TargetConfigurationResult.Status.INVALID, configValidationResult.getStatus());
assertEquals(version, service.getModuleInfo().getVersion()); assertEquals(version, service.getModuleInfo().getVersion()); assertEquals(version, service.getModuleInfo().getVersion());
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals("application/font-woff", expectedMimeTypes.getMimeByExtension("/file.woff").toString()); assertEquals("application/font-sfnt", expectedMimeTypes.getMimeByExtension("/file.ttf").toString());
assertTrue(valid); assertFalse(invalid);
assertEquals("Result string :" + resultStr + " is not equal to exptected string :" + expectedStr, resultStr, expectedStr);
assertEquals("HDFS", serviceName);
assertEquals(0, tokens.length);
assertTrue(m_rpc.isApplicable(request)); assertFalse(m_rpc.isApplicable(request)); assertTrue(m_rpc.isApplicable(request));
assertTrue(blueprint.shouldSkipFailure());
assertEquals(null, requestScheduleEntity.getAuthenticatedUserId());
assertEquals(3, components.size()); assertTrue(mergedComponents.containsKey("1")); assertTrue(mergedComponents.containsKey("2")); assertTrue(mergedComponents.containsKey("4")); assertEquals("ALL", mergedComponents.get("1").getCardinality()); assertEquals("category", mergedComponents.get("1").getCategory());
assertEquals("user1", user);
assertEquals(clientsToUpdate, resolveComponent(info, parentInfo).getModuleInfo().getClientsToUpdateConfigs()); assertEquals(clientsToUpdate, resolveComponent(info, parentInfo).getModuleInfo().getClientsToUpdateConfigs()); assertEquals(2, resolvedClientsToUpdate.size()); assertTrue(resolvedClientsToUpdate.contains(client3)); assertTrue(resolvedClientsToUpdate.contains(client4));
assertEquals(p, new IsEmptyOperator().toPredicate(prop, null));
assertEquals("FilterOperator", new FilterOperator().getName());
assertEquals(properties, info.getProperties());
assertEquals(newTime, 1234567L); assertEquals(count, 1);
assertEquals(pk1, pk2); assertFalse(pk1.equals(pk2)); assertEquals(pk1, pk2); assertFalse(pk1.equals(pk2)); assertEquals(pk1, pk2); assertFalse(pk1.equals(pk2));
assertTrue(services.containsKey("HDFS")); assertTrue(services.containsKey("MAPREDUCE")); assertNotNull(services); assertFalse(services.keySet().size() == 0);
assertNotNull(definitions); assertEquals(3, definitions.size());
assertEquals(3, histories.size()); assertTrue(lastServiceName.compareTo(currentServiceName) <= 0); assertEquals(3, histories.size()); assertTrue(lastServiceName.compareTo(currentServiceName) >= 0);
assertEquals("Json parsing failed for inputstr = "+inputStr, logfeederException.getLocalizedMessage());
assertEquals(resultSet.getString("name"), "hello"); assertEquals(count, 1);
assertNotNull(currentAlerts); assertEquals(5, currentAlerts.size());
assertArrayEquals(listTokens.toArray(new Token[listTokens.size()]), tokens);
assertNull("User already exists in DB", userDAO.findLdapUserByName("allowedUser@ambari.apache.org")); assertTrue(result.isAuthenticated());
assertEquals(REMOTE_ADDRESS, remoteAddress);
assertFalse(instance.isCollectionResource());
assertEquals("?q=*%3A*&fq=rowtype%3AmyRowType&fq=filtername%3A*myFilterName*&fq=cluster%3A%28cl1+OR+cl2%29&start=0&rows=10&sort=filtername+asc", queryResult.toQueryString());
assertTrue(!latestUrlFile.exists()); assertNotNull(redhat6Repo); assertEquals(ri.getBaseUrl(), ri.getDefaultBaseUrl());
assertEquals(HTTP_RM_URL1, services.getTimelineServerUrl()); assertEquals(HTTPS_RM_URL2, services.getTimelineServerUrl());
assertEquals(" redhat6 | HDP-2.2 | http: " suse11 | HDP-UTILS-1.1.0.20 | http: output);
assertEquals(isMonitoringService, service.getModuleInfo().isMonitoringService()); assertEquals(isMonitoringService, service.getModuleInfo().isMonitoringService()); assertEquals(isMonitoringService, service.getModuleInfo().isMonitoringService());
assertSame(Operator.TYPE.LESS, new LessOperator().getType());
assertEquals("First generated timestamp should match starttime", startTime, tStamp);
assertEquals(14, allServices.size()); assertTrue(serviceInfo.isMonitoringService()); assertNull(serviceInfo.isMonitoringService()); assertTrue(monitoringServiceFound);
assertNotNull(definition); assertEquals(1, currentAlerts.size()); assertEquals(5, currentAlerts.size()); assertEquals(0, currentAlerts.size());
assertEquals(1, items.size());
assertTrue(items.size() > 0); assertNotNull(entity); assertEquals(1, entity.getUpgradeGroups().size()); assertNotNull(group); assertEquals("group_name", group.getName()); assertEquals("group title", group.getTitle());
assertEquals(removedUsers.size(), 1); assertEquals(allUsers.size(), 3); assertTrue(allUsers.contains(ldapUserWithGroup)); assertTrue(allUsers.contains(localUserWithoutGroup)); assertTrue(allUsers.contains(localUserWithGroup)); assertEquals(removedUsers.get(0), ldapUserWithoutGroup);
assertEquals(userDetails, principal);
assertEquals(memberAttribute, result);
assertEquals(5, currentAlertExpectedCount); assertNotNull(history); assertNotNull(currentAlerts); assertEquals(currentAlertExpectedCount, currentAlerts.size()); assertNotNull(currentAlerts); assertEquals(0, currentAlerts.size());
assertEquals(new LessPredicate<String>("1", "2"), new LessOperator().toPredicate("1", "2"));
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals("Incorrect decoding: line number", 100l, jsonParams.remove("line_number")); assertEquals("Incorrect decoding: some field", "abc", jsonParams.remove("some_field")); assertTrue("jsonParams are not empty!", jsonParams.isEmpty());
assertEquals(5, entities.size()); assertEquals(2, entities.size());
assertEquals(TargetConfigurationResult.Status.INVALID, configValidationResult.getStatus());
assertTrue(result);
assertNotNull(definitions); assertEquals(15, definitions.size());
assertEquals(2, propertyTree.getObject().size()); assertTrue(propertyTree.getObject().contains("ServiceInfo/service_name")); assertTrue(propertyTree.getObject().contains("foo/bar")); assertEquals(0, propertyTree.getChildren().size());
assertEquals(metricsFile, child.getModuleInfo().getMetricsFile()); assertEquals(metricsFile, child.getModuleInfo().getMetricsFile()); assertEquals(metricsFile, child.getModuleInfo().getMetricsFile()); assertEquals(metricsFile, child.getModuleInfo().getMetricsFile());
assertEquals("Failed to add the default blueprints: error", result);
assertNotNull(provisioner); assertTrue(provisioner instanceof BlueprintConfigPopulationStrategyV2);
assertEquals(BlueprintResourceProvider.CONFIGURATION_LIST_CHECK_ERROR_MESSAGE, e.getMessage());
assertSame(result, renderer.finalizeResult(result));
assertEquals(5, entities.size()); assertTrue(lastInfo.compareTo(currentInfo) <= 0); assertEquals(5, entities.size()); assertTrue(lastInfo.compareTo(currentInfo) >= 0);
assertEquals("prompt", result);
assertNotNull("List of request IDs is null", requestIdsResult); assertEquals("Request IDs not matches", requestIds, requestIdsResult);
assertFalse(result);
assertFalse("Was able to initialize!", mapperFieldCopy.init(null, "someField", null, mapConfigs));
assertNotNull(stack.getService("HBASE")); assertNotNull("Package dir is " + hbase.getServicePackageFolder(), hbase.getServicePackageFolder()); assertNotNull(stack.getService("HBASE")); assertNotNull("Package dir is " + hbase.getServicePackageFolder(), hbase.getServicePackageFolder());
assertSame(UnlimitedKeyJCERequirement.NEVER, resolveComponent(info, parentInfo).getModuleInfo().getUnlimitedKeyJCERequired());
assertEquals(service.getServiceType(),"HCFS"); assertNull(service);
assertTrue("All links should be visible.", link.isVisible());
assertEquals("", expectedResponse, response);
assertEquals(configDependencies, service.getModuleInfo().getConfigDependencies()); assertEquals(configDependencies, service.getModuleInfo().getConfigDependencies()); assertEquals(3, mergedConfigDependencies.size()); assertTrue(mergedConfigDependencies.contains("foo")); assertTrue(mergedConfigDependencies.contains("bar")); assertTrue(mergedConfigDependencies.contains("other")); assertTrue(service.getModuleInfo().getConfigDependencies().isEmpty());
assertNotNull(upgradePack); assertNotNull(upgradePack.getTasks()); assertTrue(upgradePack.getTasks().size() > 0); assertTrue(upgradePack.getTasks() == upgradePack.getTasks());
assertEquals("LessOperator", new LessOperator().getName());
assertEquals(new EqualsPredicate<String>("prop", "val"), new EqualsOperator().toPredicate("prop", "val"));
assertEquals(HostRoleStatus.IN_PROGRESS, status.getStatus());
assertFalse("Was able to initialize!", mapperFieldName.init(null, "someField", null, ""));
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Username can\'t be null or empty.", e.getMessage());
assertEquals(memberAttribute, result);
assertTrue( "An instance of " + ShowAllLinksVisibilityController.class.getSimpleName() + " should have been returned", QuickLinkVisibilityControllerFactory.get("Hello world!") instanceof ShowAllLinksVisibilityController);
assertEquals(propertySet, propertySet2); assertFalse(propertySet.equals(propertySet3)); assertFalse(propertySet.equals(propertySet4));
assertEquals(event, listener.getLastEvent());
assertEquals("user", name);
assertEquals("?q=host%3A%28hostName%29+AND+type%3A%28componentName%29&rows=0&facet=true&facet.mincount=1&facet.limit=-1" + "&facet.pivot=type%2Cpath", query.toQueryString());
assertEquals(request, chain.getRequest()); assertEquals(response, chain.getResponse());
assertEquals("myuser", ((WidgetLayoutEntity) response.getEntity()).getUserName());
assertNotNull(config.getConfigAttributes()); assertNotNull(config.getConfigData());
assertNotNull(config.getConfigAttributes()); assertNotNull(config.getConfigData());
assertTrue(result);
assertEquals("my_s3_path/cl1/"+ LogFeederUtil.hostName + "/filename.log", resolvedPath);
assertEquals("prop_value", value);
assertEquals(20, stacks.size());
assertEquals(2, serviceNames.size()); assertTrue(serviceNames.contains("HIVE")); assertTrue(serviceNames.contains("HDFS"));
assertEquals("host3 has been added to group1", result);
assertTrue(result);
assertSame(provider.authenticate(authentication), authentication);
assertTrue("Only resourcemanager_ui should be visible.", entry.getValue().isVisible() == entry.getKey().equals("resourcemanager_ui"));
assertFalse(result);
assertSame(Operator.TYPE.GREATER_EQUAL, new GreaterEqualsOperator().getType());
assertEquals("user", AuthorizationHelper.resolveLoginAliasToUserName("user")); assertEquals("nosuchalias", user);
assertEquals("host", new HostResourceDefinition().getSingularName());
assertEquals("Focus set to: host1", result);
assertTrue("Should have thrown BadCredentialsException", false); assertEquals("Password can\'t be null or empty.", e.getMessage());
assertSame(resource, info.getResource());
assertEquals("No blueprint specified", response);
assertEquals(2, bodySet.size()); assertEquals(1, setProps.size()); assertEquals(4, mapProps.size()); assertEquals("global", mapProps.get("Hosts/desired_config/type"));
assertEquals("InOperator", new InOperator().getName());
assertEquals(new NotPredicate(new EqualsPredicate<String>("prop", "val")), new NotEqualsOperator().toPredicate("prop", "val"));
assertSame(provider.authenticate(authentication), authentication);
assertEquals(4, subResources.size()); assertTrue(includesType(subResources, Resource.Type.HostComponent)); assertTrue(includesType(subResources, Resource.Type.Alert)); assertTrue(includesType(subResources, Resource.Type.HostStackVersion)); assertTrue(includesType(subResources, Resource.Type.HostKerberosIdentity));
assertEquals(2, properties.size()); assertEquals(1, attributes.size()); assertTrue(attributes.containsKey("FOO")); assertEquals(1, parentAttributes.size()); assertTrue(parentAttributes.containsKey("BAR"));
assertEquals(true, isValid); assertEquals(false, isValid);
assertSame(Request.Type.POST, r.getRequestType());
assertEquals(null, SimpleExceptionUtils.getRootMessage(t));
assertThat(asciidoctorScriptModel).hasHeadlines(1).hasHeadline("Headline1").hasHeadlineWithId("anker1");
assertEquals(include, resolveTextFromStartToBracketsEnd(line, 0, 0).text);
assertTrue(found); assertEquals(text.length(),scanner.pos);
assertEquals("mysection", new AsciiDoctorInlineAnchor("[[mysection,here]]", -1, -1).getId()); assertEquals("mysection", new AsciiDoctorInlineAnchor("[[mysection ,here]]", -1, -1).getId()); assertEquals("mysection", new AsciiDoctorInlineAnchor("[[mysection, here]]", -1, -1).getId());
assertNull(resolveFilenameOfIncludeOrNull("gargamel"));
assertEquals(3, result.size()); assertEquals(1,iterator.next().getDeep()); assertEquals(2,iterator.next().getDeep()); assertEquals(1,iterator.next().getDeep());
assertEquals("[plantuml,filename,svg]\\n" + "----\\n" + "origin\\n" + "----\\n" + "", result);
assertEquals("diagrams/diagram_kubernetes_deployment_architecture.ditaa",resolveFilenameOfDiagramMacroOrNull("ditaa::diagrams/diagram_kubernetes_deployment_architecture.ditaa[format=png, alt=\\"Diagram about kubernetes deployment architecture\\"]"));
assertFalse(found); assertEquals(0,scanner.pos);
assertThat(asciidoctorScriptModel).hasNoHeadlines();
assertFalse(found); assertEquals(0,scanner.pos);
assertEquals("include::file1", result);
assertNotNull(error); assertEquals(-1, error.getStart()); assertEquals(-1, error.getEnd()); assertEquals(Type.ERROR, error.getType()); assertEquals("Unknown failure", error.getMessage());
assertNotNull(result); assertEquals(1, result.size()); assertEquals("include::subfolder1/otherfile4.adoc[]",it.next().getProposedCode());
assertTrue(found); assertEquals(text.length()-4,scanner.pos);
assertEquals("src/include1.java", resolveFilenameOfIncludeOrNull("include::src/include1.java[]"));
assertEquals("include::file1", result);
assertTrue(result.containsKey("abc")); assertEquals("value",result.get("abc"));
assertTrue(new AsciiDoctorInlineAnchor(null, -1, -1).getId().startsWith("illegal"));
assertNotNull(result); assertEquals(5, result.size()); assertEquals("include::otherfile1.adoc[]",it.next().getProposedCode()); assertEquals("include::otherfile2.txt[]",it.next().getProposedCode()); assertEquals("include::otherfile3.adoc[]",it.next().getProposedCode()); assertEquals("include::subfolder1/",it.next().getProposedCode()); assertEquals("include::subfolder2/",it.next().getProposedCode());
assertEquals("include::", result);
assertTrue(result.isEmpty());
assertEquals(0,errors.size());
assertEquals(loadFeatureFile("feature-255-02-expected-when-max-column-80.adoc"),formatterToTest.format(loadFeatureFile("feature-255-02-origin.adoc"),config));
assertEquals("mysection", new AsciiDoctorInlineAnchor("[[ mysection ]]", -1, -1).getId());
assertEquals("root message", SimpleExceptionUtils.getRootMessage(t));
assertFalse(found); assertEquals(0,scanner.pos);
assertFalse(found); assertEquals(0,scanner.pos);
assertEquals(2, include.getLineNumber());
assertTrue(include.isLocal());
assertNotNull(result); assertEquals(2,result.size()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString()); assertEquals(AsciidocBlockType.TEXT, n.blockType); assertEquals("I am just a text\\nwith multipe lines", n.source.toString());
assertEquals("include::subfolder1/", result);
assertFalse(found); assertEquals(0,scanner.pos);
assertNotNull(result); assertEquals(2, result.size()); assertEquals("include::subfolder1/",it.next().getProposedCode()); assertEquals("include::subfolder2/",it.next().getProposedCode());
assertEquals("_x_y",AsciiDoctorHeadline.calculateId("x y"));
assertNotNull(commands); assertTrue(commands.isEmpty());
assertEquals(include, resolveTextFromStartToBracketsEnd(line, 0, 5).text);
assertNull(resolveFilenameOfIncludeOrNull("include::src/include1.java"));
assertEquals("sub1/sub2/sub3/test.adoc",path);
assertTrue(errors.isEmpty());
assertEquals("alpha-rocksdahouse", new AsciiDoctorInlineAnchor("[[alpha-rocksdahouse]]", -1, -1).getId());
assertEquals(1, result.size()); assertEquals(1,headlineFound.getDeep()); assertEquals("headline1",headlineFound.getName());
assertEquals("alpha", new AsciiDoctorInlineAnchor("[[alpha]]", -1, -1).getId());
assertEquals(0,errors.size());
assertNotNull(result); assertEquals(3,result.size()); assertEquals(AsciidocBlockType.TEXT, n.blockType); assertEquals("I am just a text\\nwith multipe lines\\n", n.source.toString()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString()); assertEquals(AsciidocBlockType.TEXT, n.blockType); assertEquals("New textblock", n.source.toString());
assertTrue(found); assertEquals(text.length(),scanner.pos);
assertTrue(found); assertEquals(text.length()-1,scanner.pos);
assertEquals("include::subfolder2", result);
assertEquals("src/include1.java", resolveFilenameOfIncludeOrNull("include::src/include1.java[somethinginside]"));
assertNotNull(result); assertEquals(1,result.size()); assertEquals(AsciidocBlockType.TEXT, n.blockType); assertEquals("I am just a text\\nwith multipe lines", n.source.toString());
assertEquals("_x_y",AsciiDoctorHeadline.calculateId("X y"));
assertNotNull(commands); assertTrue(commands.isEmpty());
assertEquals("include::file", result);
assertTrue(found); assertEquals(text.length()-2,scanner.pos);
assertNotNull(result); assertEquals(1, result.size()); assertEquals("include::subfolder1/otherfile4.adoc[]",it.next().getProposedCode());
assertEquals("src/include1.adoc", resolveFilenameOfIncludeOrNull("include::src/include1.adoc[]"));
assertEquals("include::subfolder2/", result);
assertNotNull(result); assertEquals(3,result.size()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString()); assertEquals(AsciidocBlockType.TEXT,n.blockType); assertEquals(" something\\n", n.source.toString()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString());
assertFalse(found); assertEquals(0,scanner.pos);
assertNotNull(error); assertEquals(-1, error.getStart()); assertEquals(-1, error.getEnd()); assertEquals(Type.ERROR, error.getType()); assertEquals("Failed to load AsciiDoc document - invalid byte sequence in UTF-8", error.getMessage());
assertEquals(1,errors.size());
assertTrue(found); assertEquals(text.length()-2,scanner.pos);
assertEquals(1,errors.size());
assertTrue(result.isEmpty());
assertNotNull(error); assertEquals(-1, error.getStart()); assertEquals(-1, error.getEnd()); assertEquals(Type.ERROR, error.getType()); assertEquals(message, error.getMessage());
assertFalse(found); assertEquals(0,scanner.pos);
assertEquals("[plantuml,filename,png]\\n" + "----\\n" + "origin\\n" + "----\\n" + "", result);
assertNotNull(results);
assertEquals(1,includes.size()); assertEquals("C4_Context.puml", include.getLocation()); assertEquals(2, include.getLineNumber());
assertNotNull(commands); assertTrue(commands.isEmpty());
assertNotNull(result); assertEquals(0,result.size());
assertTrue(result.containsKey("abc")); assertEquals("",result.get("abc"));
assertEquals("subfolder/imagename.png", resolveFilenameOfImageOrNull("image::subfolder/imagename.png[something]"));
assertEquals("root message", SimpleExceptionUtils.getRootMessage(t));
assertEquals(expectedTargetFile1.toString(),it.next().toString()); assertEquals(expectedTargetFile2.toString(),it.next().toString()); assertEquals(expectedTargetFile3.toString(),it.next().toString());
assertTrue(result.isEmpty());
assertEquals("diagrams/diagram_target_architecture.plantuml",resolveFilenameOfDiagramMacroOrNull("plantuml::diagrams/diagram_target_architecture.plantuml[format=svg, alt=\\"Class diagram of target and install setup architecture\\", width=1024]"));
assertEquals(null, SimpleExceptionUtils.getRootMessage(null));
assertNotNull(result); assertEquals(1, result.size()); assertEquals("include::subfolder2/subfolder3/",it.next().getProposedCode());
assertFalse(found); assertEquals(0,scanner.pos);
assertEquals(loadFeatureFile("feature-255-01-expected-when-max-column-80.adoc"),formatterToTest.format(loadFeatureFile("feature-255-01-origin.adoc"),config));
assertTrue(result.containsKey("abc")); assertEquals("value1",result.get("abc")); assertTrue(result.containsKey("def")); assertEquals("value2",result.get("def")); assertEquals(2,result.size());
assertNotNull(result); assertEquals(1,result.size()); assertEquals(AsciidocBlockType.HEADLINE, n.blockType); assertEquals("== headline", n.source.toString());
assertNotNull(result); assertTrue(result.isEmpty());
assertEquals("include::subfolder2/subfolder3", result);
assertNotNull(result); assertEquals(3,result.size()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString()); assertEquals(AsciidocBlockType.TEXT,n.blockType); assertEquals("something\\n", n.source.toString()); assertEquals(AsciidocBlockType.EMPTY_LINE, n.blockType); assertEquals("\\n", n.source.toString());
assertFalse(modelToTest.hasErrors());
assertEquals(1,errors.size());
assertThat(asciidoctorScriptModel). hasHeadlines(3). hasHeadlineWithId("_headline1"). hasHeadlineWithId("_headline1_2"). hasHeadlineWithId("_headline1_3");
assertEquals("[plantuml,filename,txt]\\n" + "----\\n" + "origin\\n" + "----\\n" + "", result);
assertNull(resolveFilenameOfIncludeOrNull("include::"));
assertNull(minTimeUpdater.onShardMinTimeUpdate( shard2, new MinTimeUpdate(0, new GlobalTime(2, edgeId), new NodeTimes().updated(id, 1)) )); assertNotNull(minTimeUpdate); assertEquals(minTimeUpdate.minTime(), new GlobalTime(1, edgeId));
assertEquals(Integer.MIN_VALUE, HashUnit.scale(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE)); assertEquals(Integer.MAX_VALUE, HashUnit.scale(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE)); assertEquals(Integer.MIN_VALUE, HashUnit.scale(0, 0, 0)); assertEquals(Integer.MAX_VALUE, HashUnit.scale(1, 0, 0) - 1);
assertThat(validator.validate(badJwt).hasErrors()).isTrue();
assertEquals(expected, parsed);
assertEquals(expected, parsed);
assertEquals(expected, parsed);
assertEquals(expected, parsed);
assertEquals(valid, parsed);
assertEquals("F9A25DA7060735572E32FCF72C33EE73476E589F7F02256DAFFB4C618D8F9EA2", HashChecker.hashFile(test_file)); assertEquals("F9A25DA7060735572E32FCF72C33EE73476E589F7F02256DAFFB4C618D8F9EA2", HashChecker.hashFile(test_file.toString()));
assertNotNull(cinemas); assertEquals(1, cinemas.size());
assertNotNull(cinema);
assertTrue(mSerializer .serializationStrategyFactory() instanceof MoshiSerializationStrategyFactory); assertNotNull(jsonString); assertEquals( "{\\"location\\":{\\"latitude\\":0.0,\\"longitude\\":0.0},\\"locationName\\":" + "\\"Accra Mall\\",\\"name\\":\\"Silverbird\\"}", jsonString);
assertNotNull(cinemas); assertEquals(1, cinemas.size());
assertNotNull(cinema);
assertTrue(mSerializer .serializationStrategyFactory() instanceof GsonSerializationStrategyFactory); assertNotNull(jsonString); assertEquals( "{\\"name\\":\\"Silverbird\\",\\"locationName\\":\\"Accra Mall\\",\\"location\\":" + "{\\"latitude\\":0.0,\\"longitude\\":0.0}}", jsonString);
assertNotNull(cinemas); assertEquals(1, cinemas.size());
assertTrue(mSerializer .serializationStrategyFactory() instanceof GsonSerializationStrategyFactory); assertNotNull(jsonString); assertEquals( "[{\\"name\\":\\"Silverbird\\",\\"locationName\\":\\"Accra Mall\\",\\"location\\":" + "{\\"latitude\\":0.0,\\"longitude\\":0.0}}]", jsonString);
assertThat(e.getMessage()).contains("is no subclass of");
assertThat(GenericsUtil.fromGenericType(StringSubclass.class, GenericSuperclass.class, 0)).isEqualTo(String.class);
assertThat(GenericsUtil.fromGenericType(IntegerSubclass.class, GenericSuperclass.class, 0)).isEqualTo(Integer.class);
assertThat(GenericsUtil.fromGenericType(new TypeLiteral<GenericNumberSubclass<Integer>>() {}.getType(), GenericSuperclass.class, 0)).isEqualTo(Integer.class);
assertThat(GenericsUtil.fromGenericType(new TypeLiteral<ParameterizedInterface<Integer>>() {}.getType(), ParameterizedInterface.class, 0)).isEqualTo(Integer.class);
assertThat(GenericsUtil.fromGenericType(MultiparameterSwitchingSubclass.class, ParameterizedInterface.class, 0)) .isEqualTo(Integer.class);
assertThat(result).isEqualTo("<artist>");
assertThat(result).isEqualTo("<track> - (artist)");
assertThat(result).isEqualTo("stream");
assertThat(result).isEqualTo("track - artist");
assertThat(result).isEqualTo("{track} - [artist]");
assertThat(showMenu, is(false));
assertTrue(featureToggle.isEnabled(FEATURE.ENQUIRIES)); assertTrue(featureToggle.isEnabled(FEATURE.CHILDREN));
assertFalse(changes.has("addition"));
assertTrue(featureToggle.isEnabled(FEATURE.ENQUIRIES)); assertTrue(featureToggle.isEnabled(FEATURE.CHILDREN));
assertThat(actual, equalTo(expected));
assertEquals(1, childSearch.getRecordsForFirstPage().size()); assertEquals(5, childSearch.getRecordsForFirstPage().size()); assertEquals(2, childSearch.getRecordsForFirstPage().size()); assertEquals(1, childSearch.getRecordsForFirstPage().size());
assertEquals("/api/children/xyz", childSyncService.getSyncPath(child, currentUser));
assertEquals(creationHistory.get(History.USER_NAME), "field_worker"); assertEquals(creationHistory.get(History.USER_ORGANISATION), "UNICEF");
assertNull(activity.getMediaPlayer()); assertNull(activity.getMediaRecorder());
assertEquals(options.toString(), (child.get(field.getId())).toString()); assertEquals(options.toString(), child.get(field.getId()).toString()); assertEquals("two", ((JSONArray)child.get(field.getId())).get(0));
assertTrue(scroller.shouldQueryForMoreData());
assertNull(view.getDate());
assertEquals(1, enquiries.size()); assertEquals(enquiry.getUniqueId(), enquiries.get(0).getUniqueId());
assertThat(repository.exists("1234"), is(false));
assertEquals(expectQuery, actualQuery);
assertEquals(1, children.size());
assertThat(child.values(), equalJSONIgnoreOrder("{\\"test1\\":\\"value1\\"}"));
assertEquals(0, children.size()); assertEquals(1, children.size());
assertEquals(10, formSections.size()); assertEquals("Basic Identity", formSections.get(0).getName().get("en")); assertEquals(4, formFields.size()); assertEquals(NAME_FIELD_ID, formFields.get(0).getId()); assertEquals(RC_ID_NO_FIELD_ID, formFields.get(1).getId()); assertEquals(PROTECTION_STATUS_FIELD_ID, formFields.get(2).getId()); assertEquals(FTR_STATUS_FIELD_ID, formFields.get(3).getId());
assertThat(new FluentResponse(response).isSuccess(), equalTo(false));
assertFalse(changes.has("addition"));
assertEquals(noOfChildFormSectionsBeforeDownload, formService.getFormSections(Child.CHILD_FORM_NAME).size()); assertEquals(noOfEnquiryFormSectionsBeforeDownload, formService.getFormSections(Enquiry.ENQUIRY_FORM_NAME).size());
assertEquals("/api/children", childSyncService.getSyncPath(child, currentUser));
assertThat(child.values().names().length(), equalTo(1)); assertNull(child.values().names());
assertThat(result, equalTo(user.getUserName()));
assertThat(child.getJSONArray("test1").toString(), is(new JSONArray(Arrays.asList("value2", "value3")).toString()));
assertThat(file, startsWith(path));
assertTrue(time >= time1 && time <= time2);
assertThat(intent.getComponent(), equalTo(new ComponentName(activity.getContext(), ViewChildActivity.class))); assertThat(intent.getStringExtra("id"), equalTo("id1"));
assertFalse(child.isSynced());
assertThat(showMenu, is(true));
assertThat(jsonArray.length(), is(2));
assertThat(new FluentResponse(response).isSuccess(), equalTo(true));
assertEquals(VISIBLE, play.getVisibility());
assertEquals("user_name", history.getString(History.USER_NAME));
assertThat(ShadowToast.getTextOfLatestToast(), equalTo(signupActivity.getString(R.string.registered)+" username"));
assertNull(view.getDate());
assertTrue((new File(audioCaptureHelper.getDir(), "some_audio_file_name")).exists());
assertFalse(loginActivity.isValid());
assertThat(child.isNew(), is(false));
assertTrue(loginActivity.isValid());
assertThat(ShadowToast.getTextOfLatestToast(), equalTo(signupActivity.getString(R.string.username_taken)));
assertThat(child.isSynced(), is(true));
assertFalse(featureToggle.isEnabled(FEATURE.ENQUIRIES));
assertEquals(expectQuery, actualQuery);
assertThat(registerUserTask.doInBackground("url"), is(true));
assertThat(ShadowToast.getTextOfLatestToast(), equalTo(activity.getString(R.string.save_child_invalid)));
assertEquals(expectQuery, actualQuery);
assertEquals(child.get("name"), "test"); assertNull(child.opt("name"));
assertEquals(2, children.size());
assertEquals("RECEIVED", fileContent);
assertThat(downloadedEnquiry.getUniqueId(), is(expectedEnquiry.getUniqueId()));
assertFalse(changes.has("deletion"));
assertThat(enquiries.size(), is(1)); assertEquals(enquiry.getUniqueId(), enquiries.get(0).getUniqueId());
assertEquals(2, children.size()); assertTrue(children.contains(child1)); assertTrue(children.contains(child3));
assertThat(child.isNew(), is(true));
assertEquals(1, children.size());
assertEquals("/api/children/unverified", childSyncService.getSyncPath(child, currentUser));
assertThat(enquiries.size(), is(1)); assertEquals(enquiry.getUniqueId(), enquiries.get(0).getUniqueId());
assertThat(shadowIntent.getAction(), equalTo(ACTION_ADD_DEVICE_ADMIN)); assertThat(componentName.getClass().toString(), equalTo(ComponentName.class.toString())); assertThat(shadowIntent.getExtras().get(DevicePolicyManager.EXTRA_ADD_EXPLANATION).toString(), equalTo("Process will remove device data in case of robbery."));
assertThat(repository.exists("1234"), is(false));
assertThat(loginActivity.isFinishing(), is(true));
assertThat(user.getDbKey(), equalTo("6127d30bea89f2fb")); assertThat(user.getOrganisation(), equalTo("N/A"));
assertEquals("UNICEF", history.getString(History.USER_ORGANISATION));
assertEquals(2, children.size());
assertEquals("a0b2135fff78223s4h1edc", record.getChildId()); assertEquals("78223s4h1e468f5200edc", record.getEnquiryId()); assertEquals("couch_id", record.getUniqueId());
assertThat(child.getString("test1"), is("value1"));
assertThat(child.getCreatedBy(), is("test1"));
assertFalse(history.has(History.HISTORIES));
assertTrue(application.cleanSyncTask());
assertThat(adapter.getCount(), equalTo(formSections.size()));
assertEquals(1, children.size()); assertTrue(children.contains(child1));
assertEquals(1, children.size()); assertTrue(children.contains(child2));
assertEquals(false, activity.child.isSynced());
assertThat(ShadowToast.getTextOfLatestToast(), equalTo("Error occurred while syncing the record with the server, please try again."));
assertThat(child.getUniqueId(), is("test1"));
assertThat(jsonArray.length(), is(1));
assertThat(list, equalTo(Arrays.asList(new Object[] { "1", "2", "3" })));
assertEquals(shadowIntent.getFlags(), Intent.FLAG_ACTIVITY_CLEAR_TOP); assertThat(shadowIntent.getComponent().getClassName(), equalTo(LoginActivity_.class.getName()));
assertThat(child.isValid(), is(false)); assertThat(child.isValid(), is(true)); assertThat(child.isValid(), is(false));
assertEquals(activity.enquiry.getClass(), Enquiry.class);
assertThat(child.getCreatedAt(), is("2012-02-10 00:00:00"));
assertEquals(expectQuery, actualQuery);
assertEquals(expectedNoOfHighlightedFields, formFields.size());
assertEquals(options.toString(), (child.get(field.getId())).toString()); assertEquals(options.toString(), child.get(field.getId()).toString());
assertEquals(0, children.size());
assertEquals(expectQuery, actualQuery);
assertThat(signupActivity.isValid(), equalTo(false)); assertEquals(userName.getError(), signupActivity.getString(R.string.username_required)); assertEquals(password.getError(), signupActivity.getString(R.string.password_required)); assertEquals(organisation.getError(), signupActivity.getString(R.string.organisation_required)); assertEquals(confirmPassword.getError(), signupActivity.getString(R.string.confirm_password_required));
assertThat(repository.get("unique_id_1"), is(nullValue()));
assertEquals(size + 1, ids.length); assertTrue("New context should exist", found); assertEquals(size, ids.length); assertFalse("Deleted context should not exist", found);
assertTrue("CPU load should be greater than or equal to 0, was " + load, load >= 0.0d); assertTrue("CPU load should be less than 1 (i.e. less than 100%), was " + load, load <= 1d);
assertTrue("Should get a real value for used heap memory", usedHeap > 0);
assertTrue("Should get a real value for native memory", nativeMemory > 0);
assertNull("Expected no contexts but found one", md); assertNull("Context 1 should not exist", md);
assertTrue("Should get a real value for heap memory", heapMemory > 0);
assertTrue("CPU load should be greater than 0, was " + load, load >= 0.0d); assertTrue("CPU load should be less than 1 (i.e. less than 100%), was " + load, load <= 1d);
assertNull(model.getNamedService(HasName.class, NAME));
assertEquals(JobConsumer.JobResult.OK, model.process(job)); assertTrue(rebuilt.contains(resource.getPath())); assertFalse(rebuilt.contains(page.getPath())); assertTrue(rebuilt.contains(parent.getPath()));
assertFalse(missingContent.containsProperty(NAME)); assertTrue(missingContent.containsProperty(NAME)); assertFalse(properPage.containsProperty(NAME)); assertTrue(properPage.containsProperty(NAME));
assertNull(cache); assertTrue(buildCacheCalled.isEmpty());
assertEquals(0, paths.size()); assertEquals(0, paths.size());
assertTrue(XmlNamespaceUtils.parseMappingAddPrefix("x=y", target)); assertFalse(XmlNamespaceUtils.parseMappingAddPrefix("a", target)); assertEquals("y", target.get("xmlns:x")); assertNull(target.get("xmlns:a"));
assertEquals(this.resource, resource);
assertNull(model.getNamedService(HasName.class, NAME)); assertEquals(neededService, model.getNamedService(HasName.class, NAME));
assertNull(missingContent.getProperty(NAME)); assertEquals(VALUE, missingContent.getProperty(NAME));
assertNull(model.getProperty(NAME, Integer.class)); assertNull(model.putProperty(NAME, VALUE)); assertNull(model.getProperty(NAME, Integer.class)); assertEquals(VALUE, model.getProperty(NAME, String.class));
assertTrue(list.contains(changeFreq)); assertTrue(list.contains(lastMod)); assertTrue(list.contains(priority));
assertNull(model.visit("0", new HashMap<>(), cache));
assertNull(model.get(page, 0));
assertNotNull(pattern); assertFalse(pattern.matcher("/content/example/pages/").matches()); assertTrue(pattern.matcher("/content/example/pages/page").matches());
assertEquals(externalizer, model.getUrlExternalizer()); assertNotEquals(externalizer, model.getUrlExternalizer());
assertNull(properPage.getProperty(NAME, String.class)); assertEquals(VALUE, properPage.getProperty(NAME, String.class));
assertEquals(contentCache, cache); assertEquals(contentCache, buildCacheCalled.get(jcrContent));
assertTrue(props.containsKey(SiteMapResourceChangeJobConsumer.PN_PATHS)); assertTrue(pathsObj instanceof Set); assertTrue(paths.contains(resource.getPath())); assertTrue(paths.contains(jcrContent.getPath())); assertTrue(paths.contains(page.getPath()));
assertEquals(jcrContent, resource);
assertEquals(urlBuilder, model.getUrlBuilder());
assertEquals("Only expected one child of root", 1, countIterable(root.listChildren())); assertEquals("Only expected two grand children of child", 2, countIterable(child.listChildren())); assertEquals("Did not expected any children of grand child 1", 0, countIterable(child1.listChildren())); assertEquals("Did not expected any children of grand child 2", 0, countIterable(child2.listChildren()));
assertEquals(13, size);
assertNotNull("Page could not be adapted", page);
assertFalse(model.appliesTo(null)); assertTrue(model.appliesTo(page)); assertTrue(model.appliesTo(resource)); assertFalse(model.appliesTo(page)); assertTrue(model.appliesTo(resource));
assertEquals(SiteMapConstants.DEFAULT_PRIORITY, model.extractValue(candidate)); assertEquals(VALUE, model.extractValue(candidate));
assertEquals(SiteMapConstants.WEEKLY, model.extractValue(candidate)); assertEquals(MONTHLY, model.extractValue(candidate));
assertFalse(model.isPage(candidate)); assertFalse(model.isPage(new Page(parent))); assertFalse(model.isPage(candidate)); assertFalse(model.isPage(candidate)); assertTrue(model.isPage(candidate)); assertFalse(model.isPage(candidate));
assertEquals(1, all.size()); assertTrue(model.add(configuration)); assertTrue(all.contains(configuration)); assertTrue(model.remove(configuration)); assertEquals(1, all.size());
assertNotNull(pageRecognizer); assertTrue(pageRecognizer.isPage(page)); assertFalse(pageRecognizer.isPage(page));
assertEquals(this.resource, resource);
assertTrue(length + diff == baseSiteMapLength || length == baseSiteMapLength);
assertEquals(expected, model.buildSiteMapUrl(resource, i)); assertEquals(expected, model.buildSiteMapUrl(resource, i));
assertEquals(this.resource, resource);
assertNotNull(paths); assertFalse(paths.isEmpty()); assertTrue(paths.contains(X)); assertTrue(paths.contains(Y)); assertNotNull(paths); assertTrue(paths.isEmpty());
assertEquals("/content/parent/page.sitemap.xml", model.buildSiteMapUrl(page, 0)); assertEquals("/content/parent/page.sitemap.1.xml", model.buildSiteMapUrl(page, 1));
assertEquals("Component Name Extraction failed", "one-two-three--four-five", componentName);
assertFalse(missingContent.hasContent()); assertTrue(properPage.hasContent());
assertNull("No Page should not be adapted as it has no Page Type", page); assertNull("No Page Content should not be adapted as it has no Page parent", page);
assertNull(model.findFirstFor(parent)); assertNotNull(model.findFirstFor(page));
assertTrue(onCacheRefreshedMap.isEmpty());
assertNotNull("Page Content could not be adapted", page);
assertNull(model.getLastModified()); assertEquals(VALUE, model.getLastModified());
assertEquals(0, model.getMandatoryCachedPaths().size()); assertEquals(1, paths.size()); assertTrue(paths.contains(example.getPages().getPath())); assertEquals(1, paths.size()); assertTrue(paths.contains(example.getPages().getPath())); assertEquals(2, paths.size()); assertTrue(paths.contains(example.getPages().getPath())); assertTrue(paths.contains(other.getPages().getPath()));
assertNotNull(result); assertTrue(result.contains(page.getPath() + 1)); assertTrue(result.contains(page.getPath() + 2)); assertFalse(result.contains(page.getPath() + 3)); assertTrue(result.contains("2002-01-01"));
assertNotNull(model.get(page));
assertEquals(0, model.getSize(entry)); assertEquals(36, model.getSize(entry));
assertEquals(NAME, model.getName());
assertTrue(rebuildImplCalled.contains(resource.getPath())); assertTrue(rebuildImplCalled.contains(jcrContent.getPath())); assertTrue(rebuildImplCalled.contains(page.getPath())); assertTrue(rebuildImplCalled.contains(parent.getPath())); assertTrue(rebuildImplCalled.contains(contentRoot.getPath()));
assertEquals(resource.hashCode(), model.getIndex(request));
assertNull(model.get(page));
assertTrue(rebuildImplCalled.isEmpty());
assertTrue(rebuildImplCalled.contains(resource.getPath())); assertTrue(rebuildImplCalled.contains(jcrContent.getPath())); assertTrue(rebuildImplCalled.contains(page.getPath())); assertTrue(rebuildImplCalled.contains(parent.getPath())); assertTrue(rebuildImplCalled.contains(contentRoot.getPath()));
assertEquals(2, entries.size());
assertNull(model.get(page, 0)); assertNull(model.get(page, 0)); assertNull(model.get(page, 0));
assertEquals(parentCache, cache); assertTrue(buildCacheCalled.isEmpty());
assertNotNull(model.get(page));
assertEquals(7, size);
assertNull(missingContent.getContent()); assertEquals(jcrContent, properPage.getContent());
assertEquals("y", target.get("xmlns:x")); assertEquals("b", target.get("xmlns:a"));
assertNull(model.getUrlExternalizer()); assertEquals(externalizer, model.getUrlExternalizer());
assertNull("Page Child should not be adapted as it is a no-content child", page);
assertEquals(6, size);
assertEquals(0, model.getIndex(request)); assertEquals(0, model.getIndex(request)); assertEquals(0, model.getIndex(request)); assertEquals(1, model.getIndex(request)); assertEquals(-1, model.getIndex(request)); assertEquals(0, model.getIndex(request));
assertEquals((Object)7, model.walk(this, 0));
assertNotEquals(HttpServletResponse.SC_NOT_FOUND, status); assertEquals(RESULT, writer.toString());
assertEquals(2, entries.size()); assertTrue(StringUtils.startsWith(entry.getUrl(), DOMAIN));
assertEquals(resourceResolver, model.getServiceResourceResolver());
assertEquals(PATH, model.getPath());
assertEquals(JobConsumer.JobResult.CANCEL, model.process(job));
assertNotEquals(parentCache, cache); assertTrue(buildCacheCalled.containsKey(parent)); assertEquals(cache, buildCacheCalled.get(parent));
assertNull(model.get(page, 0)); assertEquals(VALUE, model.get(page, 0)); assertEquals(VALUE, model.get(page, 0)); assertEquals(VALUE, model.get(page, 0)); assertEquals(VALUE, model.get(page, 0));
assertFalse(model.isPage(candidate)); assertTrue(model.isPage(candidate));
assertNull(properPage.getLastModified()); assertNull(properPage.getLastModifiedDate()); assertEquals(created, properPage.getLastModified()); assertEquals(created.getTime(), properPage.getLastModifiedDate()); assertEquals(lastModified, properPage.getLastModified()); assertEquals(lastModified.getTime(), properPage.getLastModifiedDate());
assertNull(model.extractValue(candidate)); assertNotNull(model.extractValue(candidate));
assertEquals(HttpServletResponse.SC_NOT_FOUND, status); assertTrue(StringUtils.isBlank(writer.toString()));
assertEquals(repo.getRoot(), resource);
assertNotNull("Page Content could not be adapted", page);
assertEquals("Unexpected Component Path", expected, answer);
assertTrue(rebuildImplCalled.contains(jcrContent.getPath())); assertTrue(rebuildImplCalled.contains(page.getPath())); assertTrue(rebuildImplCalled.contains(parent.getPath())); assertTrue(rebuildImplCalled.contains(contentRoot.getPath()));
assertEquals(URL, model.getUrl());
assertNull("Child-22 must not return a page", child22.getNext());
assertNull(model.putProperty(null, VALUE)); assertNull(model.putProperty(NAME, VALUE)); assertEquals(VALUE, model.putProperty(NAME, null));
assertNull(model.get(page, 0));
assertEquals(1, entries.size()); assertEquals(resource.getPath(), entry.getProperty(PATH, String.class)); assertEquals(resource.getName(), entry.getProperty(NAME, String.class)); assertFalse(entry.getProperty(CONTENT, Boolean.class));
assertNotNull(xmlNamespaces); assertTrue(xmlNamespaces.containsKey("xmlns:x")); assertEquals("a", xmlNamespaces.get("xmlns:x")); assertFalse(xmlNamespaces.containsKey("xmlns:y"));
assertEquals(DEFAULT_VALUE, properPage.getProperty(NAME, DEFAULT_VALUE)); assertEquals(VALUE, properPage.getProperty(NAME, DEFAULT_VALUE)); assertNull(properPage.getProperty(NAME, DEFAULT_VALUE));
assertTrue(rebuildImplCalled.contains(resource.getPath())); assertTrue(rebuildImplCalled.contains(jcrContent.getPath())); assertTrue(rebuildImplCalled.contains(page.getPath())); assertTrue(rebuildImplCalled.contains(parent.getPath())); assertTrue(rebuildImplCalled.contains(contentRoot.getPath()));
assertEquals(HttpServletResponse.SC_NOT_FOUND, status); assertTrue(StringUtils.isBlank(writer.toString()));
assertNotNull("Returned Map was null", answer); assertFalse("Returned Map was empty", answer.isEmpty()); assertEquals("Map did not map", expected, answer);
assertEquals(PerConstants.NAME, model.getName());
assertNotNull(propertyProviders); assertTrue(propertyProviders.isEmpty()); assertNotNull(propertyProviders); assertFalse(propertyProviders.isEmpty()); assertEquals(2, propertyProviders.size());
assertEquals("Unexpected Component Name", expected, answer);
assertEquals(PROPERTY_NAME, model.getPropertyName());
assertFalse(model.isPage(candidate)); assertFalse(model.isPage(candidate)); assertTrue(model.isPage(candidate));
assertNotNull(handler);
assertTrue(result); assertFalse(result);
assertTrue(LoginActivity.isSupportedVersion(new int[] {1, 2, 0}));
assertFalse(LoginActivity.isSupportedVersion(new int[] {1, 0, 30}));
assertTrue(LoginActivity.isSupportedVersion(new int[] {1, 0, 39}));
assertEquals(24, password.length());
assertFalse(shift.isDone());
assertFalse(shift.isDone()); assertSame(ex1, ex);
assertSame(origin, Futurity.shift(origin));
assertFalse(shifted.isDone()); assertTrue(shifted.isCancelled());
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.DEBUG, testMarker)).isTrue();
assertThat(defaultLambdaLoggerFactory.buildLambdaLogger(locationAwareLogger) instanceof LambdaLoggerLocationAwareImpl, is(true));
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.ERROR, null)).isTrue();
assertThat(lambdaLogger.getUnderlyingLogger()).isSameAs(underlyingLogger);
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.INFO, null)).isFalse();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.TRACE, null)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.DEBUG, null)).isFalse();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.INFO, null)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.ERROR, null)).isFalse();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.WARN, null)).isTrue();
assertThat(defaultLambdaLoggerFactory.buildLambdaLogger(plainLogger) instanceof LambdaLoggerPlainImpl, is(true));
assertThat(lambdaLogger.getUnderlyingLogger()).isSameAs(underlyingLogger);
assertThat(helloLambdaLogger, not(sameInstance(worldLambdaLogger)));
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.WARN, testMarker)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.ERROR, testMarker)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.TRACE, null)).isFalse();
assertThat(helloLambdaLogger, sameInstance(helloLambdaLoggerAgain));
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.DEBUG, null)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, null, null)).isFalse();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.INFO, testMarker)).isTrue();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.WARN, null)).isFalse();
assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.TRACE, testMarker)).isTrue();
assertNull( map.get( KEY ) ); assertEquals( VALUE, map.get( KEY ) );
assertEquals( asList( new File( "/opt" ), new File( "/var" ) ), nonOptions.values( options ) );
assertEquals( "127.0.0.1", converter.convert( "localhost" ).getHostAddress() );
assertSame( Date.class, new DateConverter( monthDayYear ).valueType() );
assertEquals( VALUE, map.get( KEY ) ); assertEquals( VALUE, map.get( KEY2 ) );
assertEquals( Path.class, new PathConverter().valueType() );
assertEquals( "aKey", pair.key ); assertEquals( "", pair.value );
assertEquals( "aKey", pair.key ); assertEquals( "aValue", pair.value );
assertEquals( path, new PathConverter( null ).convert( pathName ) ); assertEquals( path, new PathConverter().convert( pathName ) );
assertEquals( asList( new File( "/opt" ), new File( "/var" ) ), nonOptions.values( options ) );
assertEquals( "abc", abc.valuePattern() );
assertEquals( singletonList( new SimpleDateFormat( "MM/dd/yyyy" ).parse( "01/24/2013" ) ), date.values( options ) );
assertEquals( new LocalDate( 2009, 1, 24 ).toDate(), converter.convert( "01/24/2009" ) );
assertSame( TestEnum.class, converter.valueType() );
assertTrue( Files.isReadable( new PathConverter( READABLE ).convert( pathName ) ) ); assertTrue( Files.exists( new PathConverter( READABLE ).convert( pathName ) ) ); assertTrue( Files.isWritable( new PathConverter( READABLE ).convert( pathName ) ) ); assertTrue( Files.isWritable( new PathConverter( FILE_OVERWRITABLE).convert( pathName ) ) );
assertEquals( "[A,B,C,D]", converter.valuePattern() );
assertTrue( Files.isDirectory( new PathConverter( DIRECTORY_EXISTING ).convert( pathName ) ) );
assertEquals( TestEnum.A, converter.convert( "a" ) );
assertEquals( TestEnum.A, converter.convert( "A" ) );
assertEquals( String.class, abc.valueType() );
assertEquals( "aKey", pair.key ); assertEquals( "1=2=3=4", pair.value );
assertEquals( VALUE, javaUtilMap.get( KEY ) ); assertEquals( 1, javaUtilMap.size() );
assertEquals( "", pair.key ); assertEquals( "aValue", pair.value );
assertEquals( "", new DateConverter( notASimpleDateFormat ).valuePattern() );
assertEquals( asList( "/opt", "/var" ), nonOptions.values( options ) );
assertEquals( "aString", pair.key ); assertEquals( "", pair.value );
assertEquals( "", pair.key ); assertEquals( "", pair.value );
assertFalse( Files.exists( new PathConverter( NOT_EXISTING ).convert( path.toString() ) ) );
assertFalse( map.contains( KEY ) );
assertEquals( "abc", abc.convert( "abc" ) );
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertTrue("content is not visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertTrue("Error textview is not visible", mErrorTextView.isShown()); assertEquals("Error textview hasn\'t got proper message", "Test message", mErrorTextView.getText().toString());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertTrue("Error textview is not visible", mErrorTextView.isShown()); assertEquals("Error textview hasn\'t got proper message", "Test message", mErrorTextView.getText().toString());
assertNotNull(Moviper.getInstance());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertTrue("content is not visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertTrue("Loading indicator is not visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertTrue("Loading indicator is not visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertTrue("Loading indicator is not visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertTrue("Error textview is not visible", mErrorTextView.isShown()); assertEquals("Error textview hasn\'t got proper message", "Test message", mErrorTextView.getText().toString());
assertTrue("Loading indicator is not visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertFalse("content is visible", mRecyclerView.isShown()); assertTrue("Error textview is not visible", mErrorTextView.isShown()); assertEquals("Error textview hasn\'t got proper message", "Test message", mErrorTextView.getText().toString());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertTrue("content is not visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertNotNull(Moviper.getInstance());
assertFalse("Loading indicator is visible", mProgressBar.isShown()); assertTrue("content is not visible", mRecyclerView.isShown()); assertFalse("Error textview is visible", mErrorTextView.isShown());
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()).isEqualTo("The statement \'to_be_removed\' can not be bound to values. " + "Are you sure you did prepare it with @prepare[to_be_removed] ?");
assertEquals(1, intp.getProperty().size()); assertEquals("v2", intp.getProperty().get("p1")); assertEquals("v2", intp.getProperty("p1"));
assertEquals(cp.getStatus(), Status.READY); assertEquals(cp.getId(), p.getId()); assertEquals(cp.text, p.text); assertEquals(cp.getResult().message(), p.getResult().message());
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertThat(resultForQuery("test").size()).isEqualTo(3); assertThat(resultForQuery("Notebook1")).isEmpty(); assertThat(resultForQuery("NotebookN")).isNotEmpty(); assertThat(resultForQuery("NotebookN").size()).isEqualTo(1);
assertEquals(2, set.filterByNameRegex(".*").size()); assertEquals(1, set.filterByNameRegex("resource1").size()); assertEquals(1, set.filterByNameRegex("resource2").size()); assertEquals(0, set.filterByNameRegex("res").size()); assertEquals(2, set.filterByNameRegex("res.*").size());
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()).contains("Cannot find table system.complex_table");
assertTrue(ok);
assertThat(notebooks).isNotEmpty(); assertThat(notebooks.size()).isEqualTo(3);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("key\\tval\\n" + "myKey\\tmyValue\\n");
assertNull(fileChanged); assertEquals(0, numChanged); assertNotNull(fileChanged); assertEquals(1, numChanged);
assertEquals(InterpreterResult.Type.TABLE, result.type()); assertEquals(InterpreterResult.Type.TABLE, result.type()); assertEquals(InterpreterResult.Type.TABLE, result.type());
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()).contains("All host(s) tried for query failed");
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("title\\tartist\\tyear\\n" + "The Impossible Dream EP\\tCarter the Unstoppable Sex Machine\\t1992\\n" + "The Way You Are\\tTears for Fears\\t1983\\n" + "Primitive\\tSoulfly\\t2003\\n");
assertEquals(InterpreterResult.Code.SUCCESS, flink.interpret("\\"123\\"\\n.toInt", context).code());
assertThat(notebook).isNotNull(); assertThat(notebook.id()).isEqualTo("2A94M5J1Z");
assertEquals(numNotes, notebookRepo.list(null).size());
assertFalse(ok);
assertEquals(1, intp.getProperty().size()); assertEquals("v1", intp.getProperty().get("p1")); assertEquals("v1", intp.getProperty("p1"));
assertEquals("md", Paragraph.getRequiredReplName(text)); assertEquals("md", Paragraph.getRequiredReplName(text)); assertEquals("md", Paragraph.getRequiredReplName(text)); assertEquals("md", Paragraph.getRequiredReplName(text)); assertEquals("md", Paragraph.getRequiredReplName(text)); assertEquals("md", Paragraph.getRequiredReplName(text));
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("\\"123\\"\\n.toInt", context).code());
assertEquals(2, intp.getProperty().size()); assertEquals("v1", intp.getProperty().get("p1")); assertEquals("v1", intp.getProperty("p1")); assertEquals("v2", intp.getProperty().get("p2")); assertEquals("v2", intp.getProperty("p2"));
assertEquals("1", result.message());
assertThat(resultForQuery("test").size()).isEqualTo(3); assertThat(resultForQuery("Notebook1").size()).isEqualTo(1); assertThat(results).isNotEmpty(); assertThat(results.size()).isEqualTo(2); assertThat(result.get("id").startsWith(note1.getId())).isFalse();
assertEquals(InterpreterResult.Code.ERROR, result.code()); assertEquals("(NameError) undefined local variable or method `joke\' for main:Object", result.message());
assertEquals(InterpreterResult.Code.SUCCESS, result.code()); assertEquals(result.type(), InterpreterResult.Type.TEXT); assertEquals("Hello World\\n", result.message());
assertEquals("repl1: hello world", p1.getResult().message()); assertEquals("repl2: hello world", p2.getResult().message());
assertEquals(notes.size(), 0); assertEquals(notes.size(), 1); assertEquals(notes.get(0).id(), copiedNote.id()); assertEquals(notes.get(0).getName(), copiedNote.getName()); assertEquals(notes.get(0).getParagraphs(), copiedNote.getParagraphs()); assertEquals(notes.size(), 1); assertEquals(notes.size(), 0);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("login\\tdeceased\\n" + "bind_bool\\tfalse\\n");
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("name\\tcountry\\tstyles\\n" + "Bogdan Raczynski\\tPoland\\t[Dance, Electro]\\n" + "Krishna Das\\tUSA\\t[Unknown]\\n" + "Sheryl Crow\\tUSA\\t[Classic, Rock, Country, Blues, Pop, Folk]\\n");
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("\\"123\\"\\n.toInt", context).code());
assertEquals(Code.ERROR, result.code());
assertEquals("hello\\n", new String(out.toByteArray())); assertEquals(1, numAppendEvent); assertEquals(1, numUpdateEvent); assertEquals("hello\\nworld", new String(out.toByteArray())); assertEquals(2, numAppendEvent); assertEquals(1, numUpdateEvent); assertEquals("", new String(out.toByteArray())); assertEquals(InterpreterResult.Type.TEXT, out.getType()); assertEquals("div", new String(out.toByteArray())); assertEquals(InterpreterResult.Type.HTML, out.getType());
assertThat(actual).isEqualTo("v1");
assertNull(registry.get("o1", note.id(), null)); assertNotNull(registry.get("o2", note.id(), null)); assertNotNull(registry.get("o3", null, null));
assertEquals("%table col1\\tcol2\\naaa\\t123\\n","col1\\tcol2\\naaa\\t123\\n", result.message()); assertEquals("%table\\ncol1\\tcol2\\naaa\\t123\\n","col1\\tcol2\\naaa\\t123\\n", result.message()); assertEquals("some text before magic word %table col1\\tcol2\\naaa\\t123\\n","col1\\tcol2\\naaa\\t123\\n", result.message());
assertFalse(RemoteInterpreter.isEnvString(null)); assertFalse(RemoteInterpreter.isEnvString("")); assertFalse(RemoteInterpreter.isEnvString("abcDEF")); assertFalse(RemoteInterpreter.isEnvString("ABC-DEF")); assertTrue(RemoteInterpreter.isEnvString("ABCDEF")); assertTrue(RemoteInterpreter.isEnvString("ABC_DEF")); assertTrue(RemoteInterpreter.isEnvString("ABC_DEF123"));
assertEquals(InterpreterResult.Code.SUCCESS, result.code()); assertTrue(result.message().contains(sizeVal + ": Int = " + ignite.cluster().nodes().size())); assertEquals(InterpreterResult.Code.SUCCESS, result.code());
assertEquals(text, Paragraph.getScriptBody(text));
assertEquals(Code.ERROR, result.code());
assertTrue(runStatus); assertFalse(runStatus);
assertEquals(1, set.filterByClassnameRegex(".*String").size()); assertEquals(1, set.filterByClassnameRegex(String.class.getName()).size()); assertEquals(1, set.filterByClassnameRegex(".*Integer").size()); assertEquals(1, set.filterByClassnameRegex(Integer.class.getName()).size());
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("val a = 1\\nval b = 2", context).code());
assertEquals("%html hello", new InterpreterResult(InterpreterResult.Code.SUCCESS, "%html hello").toString());
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()) .contains("Error parsing input:\\n" + "\\t\'SELECT * zeppelin.albums\'\\n" + "Did you forget to add ; (semi-colon) at the end of each CQL statement ?");
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("val a = 1\\nval b = 2", context).code());
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertEquals(Code.SUCCESS, result.code()); assertEquals(Type.TABLE, result.type()); assertEquals("NAME\\tAGE\\nsun\\t100\\nmoon\\t50\\n", result.message());
assertEquals(Job.Status.READY, p.getStatus()); assertEquals(Job.Status.ABORT, p.getStatus()); assertTrue(isAborted);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertEquals(InterpreterResult.Code.ERROR, result.code());
assertEquals(0, pool1.getAll().size()); assertEquals(1, pool1.getAll().size()); assertTrue(pool1.get("object1").isRemote()); assertEquals("value2", pool1.get("object1").get()); assertEquals(1, pool2.getAll().size()); assertEquals("value1", pool1.get("object1").get()); assertEquals("value1", pool1.getAll().get(0).get()); assertEquals("value2", pool1.getAll().get(1).get());
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("\\"123\\"\\n.toInt", context).code());
assertEquals("1", result.message());
assertThat(actual.code()).isEqualTo(Code.SUCCESS);
assertEquals(InterpreterResult.Code.SUCCESS, result.code()); assertEquals("%text print a", result.toString());
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).contains("last_update\\n" + "Thu Jul 30 12:00:01");
assertThat(actual.code()).isEqualTo(Code.SUCCESS);
assertEquals(new File(home + "/" + testCopyPath).list().length, 4); assertEquals(new File(home + "/" + testCopyPath).list().length, 3);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("firstname\\tlastname\\tage\\n" + "Helen\\tSUE\\t27\\n");
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()).contains("line 1:9 missing K_FROM at \'zeppelin\' (SELECT * [zeppelin]....)");
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()) .isEqualTo("The statement \'select_users\' can not be bound to values. " + "Are you sure you did prepare it with @prepare[select_users] ?");
assertNotSame(processA.hashCode(), processB.hashCode());
assertThat(result).isEmpty();
assertEquals(FormType.SIMPLE, new GeodeOqlInterpreter(new Properties()).getFormType());
assertEquals("No magic",InterpreterResult.Type.TEXT, result.type()); assertEquals("No magic",InterpreterResult.Type.TEXT, result.type()); assertEquals("No magic",InterpreterResult.Type.TEXT, result.type());
assertThat(Splitter.on("/").split(id)) .containsAllOf(note1.getId(), LuceneSearch.PARAGRAPH, note1.getLastParagraph().getId());
assertFalse("Interpreter is not open", lazyOpenInterpreter.isOpen()); assertTrue("Interpeter is open", lazyOpenInterpreter.isOpen());
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()) .contains("Not enough replicas available for query at consistency THREE (3 required but only 1 alive)");
assertNotNull(py4jPort); assertFalse(checkSocketAdress(py4jPort));
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertEquals(note.getName(), "SaveTest");
assertTrue(body.size() > 0); assertTrue(Iterators.all(body.keySet().iterator(), new Predicate<String>() { @Override public boolean apply(String key) { return !key.contains("password"); } } ));
assertEquals(Code.SUCCESS, result.code()); assertArrayEquals(expectedCounts, counts);
assertEquals("(1234567", Paragraph.getScriptBody(text)); assertEquals("1234567", Paragraph.getScriptBody(text));
assertEquals("spark", note.getLastReplName());
assertThat(actual.code()).isEqualTo(Code.SUCCESS);
assertEquals("repl1: hello world", p1.getResult().message()); assertNull(p1.getResult());
assertTrue(String.format("configuration starting from \'spark.\' should not be empty. [%s]", key), !sparkConf.contains(key) || !sparkConf.get(key).isEmpty());
assertThat(dotGit.exists()).isEqualTo(false); assertThat(git).isNotNull(); assertThat(dotGit.exists()).isEqualTo(true); assertThat(notebookRepo.list(null)).isNotEmpty(); assertThat(diff).isNotEmpty();
assertEquals(Code.ERROR, result.code());
assertEquals(ZeppelinhubMessage.EMPTY, ZeppelinhubMessage.deserialize("")); assertEquals(ZeppelinhubMessage.EMPTY, ZeppelinhubMessage.deserialize("dwfewewrewr"));
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(reformatHtml(actual.message())).isEqualTo(expected);
assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("\\"123\\"\\n.toInt", context).code());
assertEquals(2, all.size());
assertThat(notebookRepo.list(null)).isNotEmpty(); assertThat(testNotebookHistory).isEmpty();
assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo("firstname\\tlastname\\n" + "null\\tNULL\\n");
assertThat(actual.code()).isEqualTo(Code.ERROR); assertThat(actual.message()).contains("Cannot find type system.address");
assertEquals(InterpreterResult.Code.SUCCESS, flink.interpret("\\"123\\"\\n.toInt", context).code());
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(expected, result);
assertEquals(1, annotationListCaptor.getValue().size()); assertTrue(annotationListCaptor.getValue().contains(a));
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(expectedIndexName, actualIndexName); assertEquals(expectedDocumentId, actualDocumentId); assertEquals(expectedImageBlob, actualImageBlob);
assertFalse(dualAnnotationService.isQueryHavingEpochCutOff(annotationQuery));
assertEquals(DEFAULT_ENDPOINT, ei.getEndPoint()); assertEquals(GusTransport.NO_TOKEN, ei.getToken());
assertEquals(expected, result);
assertTrue(result.size() == 4);
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 3); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(TEST_INSTANCE_URL, ei.getEndPoint()); assertEquals(TEST_TOKEN, ei.getToken()); assertSame(ei, ei2);
assertEquals(TEST_INSTANCE_URL, ei.getEndPoint()); assertEquals(TEST_TOKEN, ei.getToken()); assertEquals(ei, ei2);
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 2); assertEquals(expected, result.get(0).getDatapoints());
assertFalse(result);
assertEquals(expected, result);
assertFalse(result);
assertEquals(result.get(0).getDatapoints().size(), 4); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), 4); assertEquals(expected, result.get(0).getDatapoints());
assertThat(r.reduce(Arrays.asList(null, 5.0, 1.0, 4.0)), equalTo(1.0));
assertEquals("someTarget", actual.getDisplayName());
assertTrue(values.containsKey("FLAG")); assertTrue(values.containsKey("OPTION")); assertTrue(values.containsKey("LIST")); assertTrue(values.size() == 3); assertTrue(Option.Type.valueOf("FLAG").equals(values.get("FLAG"))); assertTrue(Option.Type.valueOf("OPTION").equals(values.get("OPTION"))); assertTrue(Option.Type.valueOf("LIST").equals(values.get("LIST")));
assertTrue(result);
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 3); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(true, context.isCountPrivateAlerts()); assertEquals(false, context.isCountPrivateAlerts());
assertEquals(result.get(0).getDatapoints().size(), 5); assertEquals(expected, result.get(0).getDatapoints());
assertTrue("propname [" + name1 + "] not found in " + namesList, namesList.contains(name1)); assertTrue("propname [" + name1 + "] not found in " + namesList, namesList.contains(name1)); assertTrue("propname [" + name1 + "] not found in " + namesList, namesList.contains(name1));
assertEquals(context.getTransform(), Function.FILL); assertEquals(context.getConstants().size(), 5); assertEquals(context.getConstants().get(0), "-1d"); assertEquals(context.getConstants().get(1), "-0d"); assertEquals(context.getConstants().get(2), "4h"); assertEquals(context.getConstants().get(3), "0m"); assertEquals(context.getConstants().get(4), "100"); assertEquals(context.getChildContexts().size(),0); assertNull(context.getExpression());
assertEquals(expected, result);
assertThat(r.reduce(Arrays.asList(5.0, 1.0, 4.0)), equalTo(1.0));
assertEquals(result.get(0).getDatapoints().size(), 6); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 8); assertEquals(expected, result.get(0).getDatapoints());
assertTrue("expect the serialized record to have EXPIRATION_TS", serialized.contains(MetricSchemaRecord.EXPIRATION_TS)); assertTrue("expect the serialized record to have RETENTION_DISCOVERY", serialized.contains(MetricSchemaRecord.RETENTION_DISCOVERY));
assertEquals(expected, result);
assertEquals(imageURL, IMAGE_URL_PREFIX + IMAGE_ID);
assertEquals(true, context.isCountSharedAlerts()); assertEquals(false, context.isCountSharedAlerts());
assertFalse(result);
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertThat(r.reduce(Arrays.asList(1.0)), equalTo(1.0));
assertEquals("someDevice" + AliasByTagTransform.DELIMITER + "someTarget", actual.getDisplayName());
assertEquals(expectedSubject, subject); assertEquals(expectedSubject, subject);
assertEquals(expectedMetrics, actualMetrics); assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), 3); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(metricsCreatedCount, metrics.size()); assertEquals(scopesCreatedCount, scopeNames.size()); assertEquals(metricsCreatedCount, newMetrics.size()); assertEquals(scopesCreatedCount, scopeNames.size());
assertTrue(ex.getMessage().contains("one tag to be provided"));
assertEquals(result.get(0).getDatapoints().size(), 2); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(expected.keySet(), anomalyScores.keySet()); assertEquals(expected.get(time), anomalyScores.get(time), 0.01);
assertTrue(result);
assertEquals(metricsCreatedCount, metrics.size()); assertEquals(scopesCreatedCount, scopeNames.size()); assertEquals(metricsCreatedCount, 0); assertEquals(scopesCreatedCount, 0);
assertEquals(expected, result);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertFalse(result);
assertNotNull(RequestContextHolder.getRequestContext()); assertEquals(userService.findAdminUser().getUserName() + "-alert", RequestContextHolder.getRequestContext().getUserName());
assertEquals("expect the entity to be equal after extraction", message, responseMessage);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(true, context.isCountUserAlerts()); assertEquals(false, context.isCountUserAlerts());
assertEquals(imageURL, null);
assertEquals(result.get(0).getDatapoints().size(), 1); assertEquals(expected, result.get(0).getDatapoints());
assertFalse(dualAnnotationService.isQueryHavingEpochCutOff(annotationQuery));
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertTrue(result);
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertTrue("expect the serialized record to have scope", serialized.contains("scope1")); assertTrue("expect the serialized record to have metric", serialized.contains("metric1"));
assertTrue(result);
assertEquals(result.size(), 2); assertEquals("test-metric1", result.get(0).getMetric()); assertEquals("test-metric2", result.get(1).getMetric());
assertEquals(1, annotationListCaptor.getValue().size()); assertTrue(annotationListCaptor.getValue().contains(a));
assertEquals(searchText, context.getSearchText());
assertFalse(result);
assertEquals(imageURL, null);
assertEquals(1, alertsMapById.size()); assertTrue(actualAlert.equals(expectedAlert)); assertTrue(actualAlert.getTriggers().toArray()[0].equals(trigger)); assertTrue(actualAlert.getNotifications().toArray()[0].equals(notification));
assertEquals(AliasByTagTransform.DEFAULT_SCOPE_NAME, actual.getScope()); assertEquals("someDevice,someTarget", actual.getMetric());
assertFalse(result);
assertEquals(result.size(), 1); assertEquals(result.get(0).getDatapoints().size(), 10); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), 5); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(expected.keySet(), anomalyScores.keySet()); assertEquals(expected.get(time), anomalyScores.get(time), 0.01);
assertEquals(result.size(), 3); assertEquals(TEST_ALIAS_LITERAL, result.get(0).getMetric()); assertEquals(TEST_ALIAS_LITERAL, result.get(1).getMetric()); assertEquals(TEST_ALIAS_LITERAL, result.get(2).getMetric());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertTrue(result);
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 1); assertEquals(expected, result.get(0).getDatapoints());
assertArrayEquals(expectedBytes, actualBytes); assertEquals(imageIdQuery, queryJson); assertEquals(expectedURL, capturedRequest.getEndpoint());
assertEquals(expected, result);
assertEquals(2, collectionService.commitAnnotations(2, 60000));
assertEquals(result.get(0).getDatapoints().size(), 5); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics1.get(0).getDatapoints()); assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics2.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertTrue(result);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(AliasByTagTransform.DEFAULT_SCOPE_NAME, actual.getScope()); assertEquals("someDevice", actual.getMetric());
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), expectedSize); assertEquals(true, timestampSet[0] - expectedStartTimestamp <= 1000L); assertEquals(true, timestampSet[timestampSet.length - 1] - expectedEndTimestamp <= 1000L); assertEquals(new HashSet<Double>(Arrays.asList(100.0)), new HashSet<Double>(result.get(0).getDatapoints().values()));
assertTrue(alertDefinitionsCache.getAlertsMapByCronEntry() == alertMapByCronEntry);
assertEquals(result.size(), 1); assertEquals(result.get(0).getDatapoints().size(), 10); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertThat(r.reduce(Arrays.asList(null, 5.0, 1.0, 4.0)), equalTo(5.0));
assertEquals(result.size(), 0);
assertThat(result, equalTo(metrics)); assertThat(result.get(0).getDatapoints(), equalTo(expectedDps));
assertEquals(result.size(), 2); assertEquals(result.get(1).getDatapoints().size(), 4); assertEquals(expected_1, result.get(0).getDatapoints()); assertEquals(expected_2, result.get(1).getDatapoints());
assertTrue(result);
assertEquals(result.size(), 1); assertEquals(result.get(0).getDatapoints().size(), 10); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), expectedSize); assertEquals(true, timestampSet[0] - expectedStartTimestamp <= 1000L); assertEquals(true, timestampSet[timestampSet.length - 1] - expectedEndTimestamp <= 1000L); assertEquals(new HashSet<Double>(Arrays.asList(100.0)), new HashSet<Double>(result.get(0).getDatapoints().values()));
assertEquals(expected, result);
assertTrue(result.size() == 2); assertEquals(new Double(2.0), r.getDatapoints().get(1000L)); assertTrue(r.getScope().equals("DCA") || r.getScope().equals("DCB")); assertTrue(r.getMetric().equals("metric1")); assertTrue(r.getTag("dc") != null);
assertEquals(expected, result);
assertEquals(1, annotationListCaptor.getValue().size());
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(AnnotationRecordList.getHashedSearchIdentifier(annotation), ElasticSearchAnnotationService.getHashedSearchIdentifier(annotationQuery)); assertEquals(AnnotationRecordList.getHashedSearchIdentifier(annotation), ElasticSearchAnnotationService.getHashedSearchIdentifier(annotationQuery2));
assertEquals(expected, result);
assertEquals(expectedIndexName, actualIndexName); assertEquals(expectedSerializedMetric, lines[1]);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.size(), 3); assertEquals("m", result.get(0).getMetric()); assertEquals("m", result.get(1).getMetric()); assertEquals("m", result.get(2).getMetric()); assertEquals("s", result.get(0).getScope()); assertEquals("s", result.get(1).getScope()); assertEquals("s", result.get(2).getScope());
assertEquals("anAccessToken", authService.getClient().accessToken); assertEquals("aNewAccessToken", authService.getClient().accessToken);
assertFalse(result);
assertFalse(result);
assertThat(r.reduce(new ArrayList<Double>()), is(nullValue()));
assertFalse(result);
assertEquals(expectedSubject, subject);
assertEquals(result.size(), 3); assertEquals(TEST_METRIC_NAME_1, result.get(0).getMetric()); assertEquals(TEST_ALIAS_LITERAL, result.get(1).getMetric()); assertEquals(TEST_ALIAS_LITERAL, result.get(2).getMetric());
assertEquals("expect the entity to be equal after extraction", message, responseMessage);
assertEquals(BigInteger.ONE, id);
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertTrue(result);
assertThat(r.reduce(Arrays.asList(5.0, 1.0, 4.0)), equalTo(5.0));
assertTrue(result.size() == 4);
assertEquals(result.get(0).getDatapoints().size(), expectedSize); assertEquals(true, timestampSet[0] - expectedStartTimestamp <= 1000L); assertEquals(true, timestampSet[timestampSet.length - 1] - expectedEndTimestamp <= 1000L); assertEquals(new HashSet<Double>(Arrays.asList(100.0)), new HashSet<Double>(result.get(0).getDatapoints().values()));
assertEquals(expected, result);
assertTrue(result);
assertTrue(result.size() == 2); assertEquals(new Double(2.0), r.getDatapoints().get(1000L));
assertEquals(result.get(0).getDatapoints().size(), 6); assertEquals(expected, result.get(0).getDatapoints());
assertThat(result, equalTo(metrics)); assertThat(result.get(0).getDatapoints(), equalTo(expectedDps));
assertEquals("someDevice" + AliasByTagTransform.DELIMITER + "someTarget", actual.getDisplayName());
assertEquals(expected, result);
assertEquals(expected.get(0), actual.get(0)); assertEquals(expected.get(0).getDatapoints(), actual.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertTrue(metrics.size() == 5); assertTrue(metrics.contains("metric0")); assertTrue(metrics.contains("metric4"));
assertEquals(metrics, result);
assertEquals(emailNotifier.getName(), "com.salesforce.dva.argus.service.alert.notifier.EmailNotifier");
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected.get(0), actual.get(0)); assertEquals(expected.get(0).getDatapoints(), actual.get(0).getDatapoints());
assertTrue(scopes.size() == 2); assertTrue(scopes.contains("foo")); assertTrue(scopes.contains("bar"));
assertThat(results, equalTo(metrics)); assertThat(results.get(0).getDatapoints(), equalTo(expectedDps1)); assertThat(results.get(1).getDatapoints(), equalTo(expectedDps2));
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(2, collectionService.commitMetrics(2, 60000).size());
assertTrue(ns.size() == 0);
assertTrue(result.size() == 3); assertEquals(new Double(1.0), r.getDatapoints().get(1000L));
assertFalse(result);
assertEquals(result.size(), 1);
assertEquals(expectedMetrics, actualMetrics); assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertTrue(result);
assertEquals(expectedSubject, subject);
assertEquals(owner, context.getPrincipalUser()); assertNotEquals(null, context.getPrincipalUser()); assertEquals(null, context.getPrincipalUser());
assertEquals(expected, result);
assertEquals(result.get(0).getDatapoints().size(), 3); assertEquals(expected, result.get(0).getDatapoints());
assertTrue(result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expectedIndexName, actualIndexName); assertEquals(expectedSerializedAnnotation, lines[1]);
assertEquals(_constructSuccessfulResult(annotations, 0), result);
assertEquals(scopes.size(),1); assertEquals(scopes.get(0),"argus.core"); assertEquals(scopes.size(),0); assertEquals(scopes.size(),3); assertTrue(scopes.contains(new String("argus.core1"))); assertTrue(scopes.contains(new String("argus.core2"))); assertTrue(scopes.contains(new String("argus.core3"))); assertEquals(scopes.size(),3);
assertEquals(null, actual.getDisplayName());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expected, result);
assertEquals(3, metricList.size()); assertEquals(100, metricList.get(0).getDatapoints().size()); assertEquals(100, metricList.get(1).getDatapoints().size()); assertEquals(1, metricList.get(2).getDatapoints().size());
assertTrue(scopes.size() == 2); assertTrue(scopes.contains("scope1")); assertTrue(scopes.contains("scope2"));
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals("ArgusMetrics:type=Gauge,scope=test.scope,metric=test.name,host=localhost", gm.getObjectName());
assertEquals(expected, result);
assertTrue(dualAnnotationService.isQueryHavingEpochCutOff(annotationQuery));
assertEquals(result.get(0).getDatapoints().size(), 4); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertThat(r.reduce(Arrays.asList(1.0)), equalTo(1.0));
assertEquals(result.size(), 1); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(401, ex.getStatus());
assertEquals(metrics.size(), 0);
assertEquals(expected.keySet(), anomalyScores.keySet()); assertEquals(expected.get(time), anomalyScores.get(time), 0.01);
assertEquals(expected, result);
assertEquals(result.size(), 0);
assertEquals(null, actual.getDisplayName());
assertTrue(result.size() == 3); assertEquals(new Double(2.0), r.getDatapoints().get(1000L));
assertEquals(expectedValue, actualValue); assertEquals(null, actualValue);
assertEquals(2, collectionService.commitMetricSchema(2, 60000));
assertEquals(_constructSuccessfulResult(metrics, 0), result);
assertEquals(expectedMetrics.get(0).getDatapoints(), actualMetrics.get(0).getDatapoints());
assertEquals(TEST_INSTANCE_URL, ei.getEndPoint()); assertEquals(TEST_TOKEN, ei.getToken()); assertSame(ei, ei2);
assertTrue(failures.toString(), failures.isEmpty());
assertTrue(result.size() == 4); assertEquals(new Double(1.0), r.getDatapoints().get(1000L));
assertTrue(result);
assertEquals(expected, result);
assertFalse(cachedTSDBService.isQueryHavingHistogram(query)); assertTrue(cachedTSDBService.isQueryHavingHistogram(query)); assertTrue(cachedTSDBService.isQueryHavingHistogram(query));
assertEquals(expected, result);
assertEquals("someDevice", actual.getDisplayName());
assertTrue("hoursUntil should be between " + (expectedHours - 1) + " and " + expectedHours, expectedHours - 1 <= floorHoursUntil && floorHoursUntil <= expectedHours); assertTrue("hoursUntil should be between " + (expectedHours - 1) + " and " + expectedHours, expectedHours - 1 <= floorHoursUntil && floorHoursUntil <= expectedHours);
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(result.get(0).getDatapoints().size(), 7); assertEquals(expected, result.get(0).getDatapoints());
assertEquals(expectedSubject, subject);
assertEquals(expected, result);
assertTrue(ex.getMessage().contains("function name to be provided"));
assertTrue(result.size() == 2); assertEquals(new Double(2.0), r.getDatapoints().get(1000L));
assertEquals(metrics.size(), 1);
assertEquals(expected, result);
assertEquals("expect the entity to be equal after extraction", message, responseMessage);
assertEquals(2, collectionService.commitHistograms(2, 60000));
assertEquals(result.get(0).getDatapoints().size(), 3); assertEquals(expected, result.get(0).getDatapoints());
assertTrue(alertDefinitionsCache.getAlertsMapById() == alertMapById);
assertEquals(500, ex.getStatus());
assertTrue(failures.toString(), failures.isEmpty());
assertTrue(testNotification.isEnableClearNotification());
assertEquals(result.size(), 1); assertEquals(result.get(0).getDatapoints().size(), 10); assertEquals(expected_1, result.get(0).getDatapoints());
assertThat(r.reduce(new ArrayList<Double>()), is(nullValue()));
assertEquals(result.size(), 1); assertEquals(expected_1, result.get(0).getDatapoints());
assertEquals(expectedSubject, subject);
assertEquals(results[i], Strings.fixCase(cases[i]));
assertEquals(results[i], converter.convertInput(strings[i], classes[i]));
assertEquals(1, result.size()); assertEquals(cases[i], result.get(0).getString());
assertEquals(expected, converter.convertOutput(toBeConverted));
assertEquals(expecteds[i].commandName, results[i].commandName); assertArrayEquals(expecteds[i].possibleAbbreviations, results[i].possibleAbbreviations);
assertFalse(crypto.validateCertificate(cert));
assertNull(nullPolicy.getChaincodeEndorsementPolicyAsBytes());
assertFalse(crypto.verify(null, SIGNING_ALGORITHM, null, null));
assertTrue(crypto.validateCertificate(cert));
assertFalse(crypto.validateCertificate((byte[]) null));
assertTrue(crypto.verify(cert, SIGNING_ALGORITHM, signature, plainText));
assertEquals(be.getChannelId(), "TESTCHANNEL"); assertArrayEquals(be.getBlock().toByteArray(), block.toByteArray()); assertEquals(txList.size(), 3); assertFalse(te.isValid()); assertEquals(te.getValidationCode(), (byte) TxValidationCode.INVALID_OTHER_REASON_VALUE); assertTrue(te.isValid());
assertNotNull(myCrypto.getTrustStore());
assertSame(keyStore, myCrypto.getTrustStore());
assertFalse(crypto.verify(pemCert, SIGNING_ALGORITHM, sig, badPlainText));
assertFalse(crypto.validateCertificate(invalidPemCert));
assertTrue(crypto.verify(pemCert, SIGNING_ALGORITHM, sig, plainText));
assertNotNull(crypto.getTrustStore().getCertificateAlias(testCACert)); assertNull(crypto.getTrustStore().getCertificate("testtesttest"));
assertFalse(crypto.validateCertificate((Certificate) null));
assertFalse(crypto.validateCertificate(certBytes));
assertTrue(crypto.validateCertificate(pemCert));
assertEquals(0, ConsumptionProbe.rejected(-1, 10).getRemainingTokens()); assertEquals(0, ConsumptionProbe.rejected(0, 10).getRemainingTokens());
assertFalse(locked);
assertEquals(2, jobsAfterDelete.size());
assertThat(result.getRoles()).isNotEmpty(); assertEquals("", result.getErrorMessage());
assertThat(newAccount.getAccountId()).isPositive(); assertEquals(0.0, newAccount.getBalance(), 0);
assertThat(updatedJobtype.getTransactionAmount()).isGreaterThan(originalAmount);
assertEquals("Account [getAccountId()=1, getUsername()=jad, getFirstName()=Jane, getLastName()=Doe]", account.toString()); assertEquals("Account [getAccountId()=1, getUsername()=null, getFirstName()=null, getLastName()=null]", accountWithNullStrings.toString());
assertEquals(0, result.getRoles().length); assertEquals("Unknown error", result.getErrorMessage());
assertEquals(users.size(), updatedUsers.size());
assertEquals(10, payments.size());
assertThat(accounts.size()).isGreaterThan(1);
assertEquals("jad", result.getUsername()); assertThat(result.getBalance()).isGreaterThan(originalBalance);
assertThat(earningsSumOverYear).isNotEmpty(); assertEquals(2016, earningsSumOverYear.get(0).getYear());
assertEquals(0, logservice.getLogmessagecount());
assertThat(bean.toString()).startsWith("TransactionType [");
assertEquals(0, result.getRoles().length); assertEquals("Wrong password", result.getErrorMessage());
assertEquals(0, result.getRoles().length); assertEquals("", result.getErrorMessage());
assertThat(updatedJobtype.getTransactionAmount()).isGreaterThan(originalAmount);
assertTrue(CommonStringMethods.nullSafeEquals(null, null)); assertFalse(CommonStringMethods.nullSafeEquals(null, "")); assertFalse(CommonStringMethods.nullSafeEquals("", null)); assertTrue(CommonStringMethods.nullSafeEquals(sameStringObject, sameStringObject)); assertTrue(CommonStringMethods.nullSafeEquals("identical string", "identical string")); assertTrue(CommonStringMethods.nullSafeEquals("", "")); assertFalse(CommonStringMethods.nullSafeEquals("not identical", "to this"));
assertEquals("User [userId=1, username=jad, email=jane21@gmail.com, firstname=Jane, lastname=Doe]", user.toString()); assertEquals("User [userId=1, username=null, email=null, firstname=null, lastname=null]", userWithNullStrings.toString());
assertNull(result);
assertThat(updatedPaymenttype.getTransactionAmount()).isGreaterThan(originalAmount);
assertEquals(10, jobs.size());
assertEquals(sum, bean.getSum(), 0.0); assertEquals(year, bean.getYear()); assertEquals(month, bean.getMonth());
assertThat(updatedPaymenttype.getTransactionAmount()).isGreaterThan(originalAmount);
assertEquals("jad", result.getUsername()); assertThat(result.getBalance()).isGreaterThan(originalBalance);
assertTrue(CommonStringMethods.isNullEmptyOrBlank(null)); assertTrue(CommonStringMethods.isNullEmptyOrBlank("")); assertTrue(CommonStringMethods.isNullEmptyOrBlank(" \\t\\r\\n")); assertFalse(CommonStringMethods.isNullEmptyOrBlank("ab")); assertFalse(CommonStringMethods.isNullEmptyOrBlank(" ab "));
assertThat(result.getRoles()).isNotEmpty(); assertEquals("", result.getErrorMessage());
assertEquals(0, result.getRoles().length); assertEquals("", result.getErrorMessage());
assertThat(updatedAccount.getBalance()).isGreaterThan(oldBalance);
assertEquals(1, jobsAfterDelete.size());
assertThat(statistics.size()).isPositive(); assertEquals(125.0, firstYear.getSum(), 0.0); assertEquals(2016, firstYear.getYear()); assertEquals(7, firstYear.getMonth());
assertEquals(0, result.getRoles().length); assertEquals("", result.getErrorMessage());
assertEquals(4, jobtypes.size());
assertThat(statistics.size()).isPositive(); assertEquals(1250.0, firstYear.getSum(), 0.0); assertEquals(2016, firstYear.getYear());
assertEquals("jad", result.getUsername()); assertThat(result.getBalance()).isLessThan(originalBalance);
assertEquals("AdminUser [userName=jad, userId=1, administratorId=1, firstname=Jane, surname=Doe]", user.toString()); assertEquals("AdminUser [userName=null, userId=1, administratorId=1, firstname=null, surname=null]", userWithNullStrings.toString());
assertEquals("jad", result.getUsername()); assertThat(result.getBalance()).isLessThan(originalBalance);
assertTrue(UkelonnServiceProvider.hasUserWithNonEmptyUsername(passwords)); assertFalse(UkelonnServiceProvider.hasUserWithNonEmptyUsername(passwords)); assertFalse(UkelonnServiceProvider.hasUserWithNonEmptyUsername(passwords)); assertFalse(UkelonnServiceProvider.hasUserWithNonEmptyUsername(passwords));
assertEquals(0, jobsAfterDelete.size());
assertEquals(connection, proxy.getConnection());
assertEquals(2, paymenttypes.size());
assertEquals(10, jobs.size());
assertEquals("jad", result.getUsername()); assertEquals(673.0, result.getBalance(), 0.0);
assertEquals(2, result.size());
assertNotNull(liquibase);
assertEquals(2, paymenttypes.size());
assertEquals("jad", result.getUsername()); assertEquals(673.0, result.getBalance(), 0.0);
assertThat(result.getRoles()).isNotEmpty(); assertEquals("", result.getErrorMessage());
assertEquals(0, result.getRoles().length); assertEquals("Unknown account", result.getErrorMessage());
assertEquals(10, jobs.size());
assertEquals(editedJob.getTransactionTypeId(), editedJobFromDatabase.getTransactionType().getId().intValue()); assertThat(editedJobFromDatabase.getTransactionTime().getTime()).isGreaterThan(originalTransactionTime.getTime()); assertEquals(editedJob.getTransactionAmount(), editedJobFromDatabase.getTransactionAmount(), 0.0);
assertThat(updatedPaymenttypes.size()).isGreaterThan(originalPaymenttypes.size());
assertThat(updatedJobtypes.size()).isGreaterThan(originalJobtypes.size());
assertNull(CommonStringMethods.safeTrim(null)); assertEquals("", CommonStringMethods.safeTrim("")); assertEquals("abc", CommonStringMethods.safeTrim("abc")); assertEquals("abc", CommonStringMethods.safeTrim(" abc \\r\\t\\n "));
assertEquals("jad", account.getUsername()); assertEquals("Jane", account.getFirstName()); assertEquals("Doe", account.getLastName()); assertEquals(10, jobs.size()); assertEquals(10, payments.size());
assertEquals(0, result.getRoles().length); assertEquals("Locked account", result.getErrorMessage());
assertThat(earningsSumOverYear).isNotEmpty(); assertEquals(2016, earningsSumOverYear.get(0).getYear());
assertEquals(sum, bean.getSum(), 0.0); assertEquals(year, bean.getYear()); assertEquals(month, bean.getMonth());
assertEquals(modifiedUsername, firstUser.getUsername()); assertEquals(modifiedEmailaddress, firstUser.getEmail()); assertEquals(modifiedFirstname, firstUser.getFirstname()); assertEquals(modifiedLastname, firstUser.getLastname());
assertThat(updatedJobtypes.size()).isGreaterThan(originalJobtypes.size());
assertThat(users).isNotEmpty();
assertThat(updatedPaymenttypes.size()).isGreaterThan(originalPaymenttypes.size());
assertEquals(makeSeq("B", "C", "D", "E"), s); assertEquals(makeSeq("B", "C", "D"), s); assertEquals(makeSeq("B", "C", "D"), s); assertEquals(makeSeq("B", "D"), s); assertEquals(emptySeq(), s); assertEquals(emptySeq(), s);
assertEquals(1, eval.size()); assertEquals(toAtomList("hello"), eval);
assertEquals(makeSeq("E", "D", "C", "B", "A"), s);
assertEquals(2, eval.size()); assertEquals(toAtomList("hello", "world"), eval); assertEquals(toAtomList("hello", "world"), eval); assertEquals(7, eval.size()); assertEquals(toAtomList("a", "b", "c", "d", "e", "f", "ggggg"), eval);
assertNull(s.valueSinceBang()); assertEquals(1, s.valueSinceBang()); assertEquals(-2, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(3, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(1, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 1, -2, 3, 1);
assertFalse(eval.equals(toAtomList("1"))); assertEquals(toAtomList(1), eval); assertEquals(toAtomList(1, 0, -1), eval);
assertEquals(toAtomList(), toAtomList(p.parse("1*0"))); assertEquals(toAtomList(), toAtomList(p.parse("(1 2 3)*0"))); assertEquals(toAtomList(), toAtomList(p.parse("[1 2 3]*0")));
assertEquals(0, s.iter); assertEquals(1, s.iter); assertEquals(2, s.iter);
assertNull(s.valueSinceBang()); assertEquals(1, s.valueSinceBang()); assertEquals(s.getValueOutputs(), new int[] { 1 }); assertEquals(1, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 1, 0, 1); assertEquals(1, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 1, 0, 1, 0, 1);
assertEquals(toAtomList("1 2 3"), toAtomList(p.parse("[1 2 3]"))); assertEquals(toAtomList("1 2 3"), toAtomList(p.parse(" [ 1 2 3 ]")));
assertNull(s.valueSinceBang()); assertEquals(1, s.valueSinceBang()); assertEquals(2, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(3, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(1, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 1, 2, 3, 1);
assertEquals(eval.size(), 0); assertEquals(eval, toAtomList((Object[]) null));
assertNull(s.valueSinceBang()); assertEquals(0, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 0, 0, 0); assertEquals(0, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 0, 0, 0, 0, 0, 0);
assertEquals(val, s.getLastStringValue()); assertEquals(DEFAULT_VALS[0], s.getLastStringValue());
assertEquals(toAtomList("next", "prev", "next", "next"), toAtomList(p.parse("> < >>")));
assertEquals(makeSeq(), s);
assertEquals(toAtomList("hello", 1, "world", 1.3, "pthb"), toAtomList(p.parse("hello 1 world 1.3 pthb"))); assertEquals(toAtomList("hello", 1, "world", 1.3, "pthb"), toAtomList(p.parse("hello 1 world 1.3 pthb")));
assertEquals(toAtomList(60, 64, 67, 72), toAtomList(p.parse("C4 e4 G4 b#4"))); assertEquals(toAtomList(60, 67, 64, 72), toAtomList(p.parse("C4 G4 e4 b#4")));
assertEquals(toAtomList(1, 2, 3, 1, 2, 3), toAtomList(p.parse("(1 2 3)*2"))); assertEquals(toAtomList(1, 2, 1, 2, 1, 2), toAtomList(p.parse("(1 2)*3"))); assertEquals(toAtomList(1, 2, 1, 2, 1, 2), toAtomList(p.parse("(1 2) * 3")));
assertEquals(toAtomList("60 67 64 72"), toAtomList(p.parse("[C4 G4 e4 b#4]"))); assertEquals(toAtomList(60, "67 64", 72), toAtomList(p.parse("C4 [G4 e4] b#4")));
assertEquals(makeSeq("A", "D", "C", "B", "E"), s); assertEquals(makeSeq("A", "D", "C", "E", "B"), s);
assertEquals(toAtomList("1 2 3", "a b"), toAtomList(p.parse("[1 2 3] [a b]"))); assertEquals(toAtomList("1 1.1 a next"), toAtomList(p.parse("[1 1.1 a >]")));
assertEquals(toAtomList(1, 2, 3), toAtomList(p.parse("(1 2 3)")));
assertEquals(2, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(2, s.valueSinceBang()); assertNull(s.valueSinceBang()); assertEquals(2, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 2, 0, 2, 0, 2);
assertFalse(eval.equals(toAtomList("1.1"))); assertEquals(toAtomList(1.1), eval); assertEquals(toAtomList(1.1, 0.9, -1.333), eval);
assertEquals(toAtomList("true"), toAtomList(p.parse("true")));
assertEquals(makeSeq("A", "E"), s); assertEquals(makeSeq("A", "E"), s); assertEquals(makeSeq("A", "B", "C"), s); assertEquals(emptySeq(), s); assertEquals(emptySeq(), s); assertEquals(makeSeq(), s); assertEquals(makeSeq(), s); assertEquals(emptySeq(), s);
assertEquals(r2, r1.sinkRoadSegment(Lanes.LANE1)); assertEquals(Lanes.LANE1, r1.sinkLane(Lanes.LANE1)); assertEquals(r1, r2.sourceRoadSegment(Lanes.LANE1)); assertEquals(Lanes.LANE1, r2.sourceLane(Lanes.LANE1));
assertEquals(1000.0, r.roadLength(), delta); assertEquals(1234.5, r.roadLength(), delta);
assertEquals(true, iterator.hasNext()); assertEquals(laneSegment.lane(), next.lane()); assertEquals(true, iterator.hasNext()); assertEquals(laneSegment.lane(), next.lane()); assertEquals(true, iterator.hasNext()); assertEquals(laneSegment.lane(), next.lane());
assertEquals(24.0, inflowTimeSeries.getSpeed(0.0), delta); assertEquals(24.0, inflowTimeSeries.getSpeed(300.0), delta); assertEquals(24.0, inflowTimeSeries.getSpeed(600.0), delta); assertEquals(18.0, inflowTimeSeries.getSpeed(750.0), delta); assertEquals(12.0, inflowTimeSeries.getSpeed(900.0), delta);
assertNotNull(inflowTimeSeries);
assertEquals(Lanes.LANE1, obstacle.lane()); assertEquals(Lanes.LANE2, v0.lane()); assertEquals(1, r0.laneSegment(Lanes.LANE1).vehicleCount()); assertEquals(1, r0.laneSegment(Lanes.LANE2).vehicleCount());
assertEquals(null, vehicle); assertEquals(v0.getId(), vehicle.getId()); assertEquals(v1.getId(), vehicle.getId());
assertEquals(RoadSegment.INITIAL_ID, roadSegment.id()); assertEquals(RoadSegment.INITIAL_ID + 1, roadSegment.id()); assertEquals(RoadSegment.INITIAL_ID, roadSegment.id());
assertEquals(1009.0, v0.getRearPosition(), delta); assertEquals(0, r0.getVehicleCount()); assertEquals(1, r1.getVehicleCount()); assertEquals(9.0, v.getRearPosition(), delta);
assertEquals(1, r.laneCount()); assertEquals(2, r.laneCount()); assertEquals(3, r.laneCount()); assertEquals(4, r.laneCount());
assertEquals(null, vehicle); assertEquals(v0.getId(), vehicle.getId()); assertEquals(v0.getId(), vehicle.getId());
assertEquals(true, iterator.hasNext()); assertEquals(v0, iterator.next()); assertEquals(true, iterator.hasNext()); assertEquals(v1, iterator.next()); assertEquals(true, iterator.hasNext()); assertEquals(v2, iterator.next()); assertEquals(false, iterator.hasNext());
assertThat(httpRequest.getParameters(), is(not(nullValue()))); assertThat(httpRequest.getParameters().length, is(2)); assertThat(httpRequest.getParameters()[0].getKey(), is("key")); assertThat(httpRequest.getParameters()[0].getValue(), is("value")); assertThat(httpRequest.getParameters()[1].getKey(), is("key2")); assertThat(httpRequest.getParameters()[1].getValue(), is("value2"));
assertThat(httpResponse.getStatusCode(), is(200));
assertThat(httpResponse.getContent(), is(expected));
assertThat(actual, is(not(nullValue()))); assertThat(actual, is(sameInstance(expected)));
assertThat(actual, is(not(nullValue()))); assertThat(actual, is(sameInstance(errorStream)));
assertThat(httpRequest.getEncoding(), is("utf-8"));
assertThat(outputStream.toByteArray(), is(rawBytes));
assertThat(clientToken, is("something"));
assertThat(e.getStatusCode(), is(100));
assertThat(httpResponse.getStatusCode(), is(404));
assertThat(actual, is(not(nullValue()))); assertThat(actual, is(sameInstance(expected)));
assertArrayEquals(new byte[]{-128, 1}, Numbers.serializeLong(64L, 2)); assertArrayEquals(new byte[]{-128, -127, 0}, Numbers.serializeLong(64L, 3));
assertEquals(10, Numbers.getSerializedSize(Long.MAX_VALUE)); assertEquals(10, Numbers.getSerializedSize(Long.MIN_VALUE));
assertEquals(11, pointer.volumeNumber); assertEquals(22, pointer.blockOffset); assertEquals(33, pointer.recordOffset);
assertThat(InvestmentResult.failure(ex)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == INSUFFICIENT_BALANCE);
assertThat(validator.validate(client)).isFalse();
assertThat(FileUtil.findFolder("target") .isRight()).isTrue(); assertThat(FileUtil.findFolder("target") .get()).isPresent();
assertThat(exec.get()).isEmpty(); assertThat(events).isEmpty();
assertThat(po.getTimestamp()).isBeforeOrEqualTo(ZonedDateTime.now());
assertThat(FileUtil.filesToUrls(f)).contains(f.toURI() .toURL());
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(r).isNotEqualTo(r3);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(result.get()).isInstanceOf(String.class); assertThat(r.get() .get()).isEqualTo(value);
assertThat(hashed).isEqualTo("e4d909c290d0fb1ca068ffaddf22cbd0");
assertThat(exec.get()).isEmpty(); assertThat(e).hasSize(2);
assertThat(Util.isNetworkProblem(t)).isTrue(); assertThat(Util.isNetworkProblem(t2)).isTrue(); assertThat(Util.isNetworkProblem(t3)).isFalse(); assertThat(Util.isNetworkProblem(null)).isFalse();
assertThat(result.get()).isEqualTo(Response.noMoreRecentVersion());
assertThat(FileUtil.findFolder("target") .get()).isPresent();
assertThat(result.trim()).isEqualTo("0,10" + (char) 160 + "%");
assertThat(getEventsRequested()).hasSize(4);
assertThat(counter.count()).isEqualTo(1);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(transactional.getAvailability()).isSameAs(result);
assertThat(exec.get()).isEmpty();
assertThat(result).containsExactly(subpage.toArray(new Integer[PAGE_SIZE]));
assertThat(FileUtil.isJarFile(file)).isTrue();
assertThat(rzsn.readBanner("6.0.0-SNAPSHOT")).isEqualTo(expected);
assertThat(foundInterfaces).isEmpty();
assertThat(r1).isNotEqualTo(r1.toString());
assertThat(r).isPresent();
assertThat(result).isPresent(); assertThat(this.getEventsRequested()).last() .isInstanceOf(RoboZonkyInitializedEvent.class); assertThat(this.getEventsRequested()).last() .isInstanceOf(RoboZonkyEndingEvent.class);
assertThat(result).hasSize(1);
assertThat(s2.getContents()).isEqualTo(contents); assertThat(StringUtil.toString(s2)).isEqualTo(contents);
assertThat(result.scale()).isEqualTo(8);
assertThat(result).isEqualTo(BigDecimal.ONE.negate());
assertThat(f).exists();
assertThat(SessionEvents.getImplementingEvent(e.getClass())) .isEqualTo(LoanDelinquent90DaysOrMoreEvent.class);
assertThat(FileUtil.filesToUrls(new File[0])).isEmpty();
assertThat(transactional.getPortfolio()).isEqualTo(result);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(result).isEmpty();
assertThat(result).isEmpty();
assertThat(FileUtil.findFolder(folderName) .isRight()).isTrue(); assertThat(FileUtil.findFolder(folderName) .get()).isEmpty();
assertThat(a.hasUpdates()).isTrue(); assertThat(a.hasUpdates()).isTrue();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(result.get()).isInstanceOf(String.class); assertThat(r.get() .get()).isEqualTo(value);
assertThat(result).isEqualTo("0.00%");
assertThat(InvestmentResult.failure(new BadRequestException())) .isEqualTo(InvestmentResult.failure(new BadRequestException()));
assertThat(FileUtil.findFolder(folderName) .isLeft()).isTrue();
assertThat(inactiveDescription).contains("NOT " + activeDescription.get());
assertThat(PurchaseResult.failure(new BadRequestException())).isEqualTo( PurchaseResult.failure(new BadRequestException()));
assertThat(PurchaseResult.failure(ex)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == INSUFFICIENT_BALANCE);
assertThat(result).isEmpty();
assertThat(configuration.getProperties()) .containsExactly(Map.entry("com.sun.management.jmxremote", "false"));
assertThat(investments).hasSize(1); assertThat(newEvents) .hasSize(1) .first() .isInstanceOf(InvestmentMadeEvent.class);
assertThat(SecretProviderFactory.getSecretProvider(cli)).isEmpty();
assertThat(result).containsExactly(subpage.toArray(new Integer[PAGE_SIZE]));
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(e.getPortfolioOverview()).isNotNull();
assertThat(foundInterfaces) .containsExactly(List.class, Collection.class, Iterable.class, RandomAccess.class, Cloneable.class, Serializable.class);
assertThat(untilSundayAround6am).isBetween(Duration.ofMinutes(-45), Duration.ofMinutes(75));
assertThat(StrategyLoader.load("", Collections.singleton(iss), StrategyService::toInvest)) .contains(is);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(strategy.getApplicableLoans(Stream.empty(), FOLIO)).isEmpty(); assertThat(strategy.getApplicableLoans(Stream.of(ld), FOLIO)).contains(ld); assertThat(strategy2.getApplicableLoans(Stream.of(ld), FOLIO)).isEmpty();
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(result.get()).isInstanceOf(String.class); assertThat(r.get() .get()).isEqualTo(value);
assertThat(this.getEventsRequested()).isEmpty();
assertThat(PurchaseResult.failure(new ClientErrorException(410))) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(r).isNotEqualTo(r3);
assertThat(condition).accepts(w); assertThat(condition).rejects(w); assertThat(condition).rejects(w);
assertThat(result).containsExactly(subpage.toArray(new Integer[PAGE_SIZE]));
assertThat(getEventsRequested()).isEmpty();
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(token.getObtainedOn()).isBeforeOrEqualTo(OffsetDateTime.now());
assertThat(transactional.getPurchaseStrategy()).isEqualTo(result);
assertThat(s.isParallel()).isFalse();
assertThat(e).hasSize(0);
assertThat(Util.isAcceptable(s, p)).isFalse();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(result).isEqualTo("0.00%");
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(b.isValid(r)).isFalse();
assertThat(r).isPresent();
assertThat(e.getNewVersion()).isEqualTo("5.0.0-cr-1");
assertThat(getEventsRequested()).hasSize(1) .extracting(e -> (Object) e.getClass() .getInterfaces()[0]) .containsOnly(LoanNowDelinquentEvent.class); assertThat(getEventsRequested()).hasSize(1) .first() .isInstanceOf(LoanNoLongerDelinquentEvent.class);
assertThat(e.getCause()).isNotEmpty();
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(c).rejects(w); assertThat(c).accepts(w);
assertThat(this.getEventsRequested()) .first() .isInstanceOf(WeeklySummaryEvent.class); assertThat(summary).isNotNull();
assertThat(new ShutdownHook().register(h)).isFalse();
assertThat(getEventsRequested()) .extracting(e -> (Object) e.getClass() .getInterfaces()[0]) .containsExactly(LoanNowDelinquentEvent.class); assertThat(getEventsRequested()).isEmpty();
assertThat(getEventsRequested()).isEmpty();
assertThat(actualInvestment).isEqualTo(Money.from(400));
assertThat(FileUtil.findFolder("pom.xml") .get()).isEmpty();
assertThat(cfg).isPresent(); assertThat(cfg.get() .apply(null)).isInstanceOf(Daemon.class); assertThat(ListenerServiceLoader.getNotificationConfiguration(mockSessionInfo())).isNotEmpty();
assertThat(result.getLeft()).isInstanceOf(FileNotFoundException.class);
assertThat(p.getToken()).isEmpty(); assertThat(p.setToken(token)).isTrue(); assertThat(p.getToken()).contains(token);
assertThat(result).isSameAs(expected);
assertThat(e.getRecommendation()).isNotNull();
assertThat(e.getNewVersion()).isEqualTo("5.0.0");
assertThat(result.getTotalResultCount()).isEqualTo(total);
assertThat(exec.get()).isEmpty(); assertThat(events).isEmpty();
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(result).isEmpty();
assertThat(FailureTypeUtil.matches(expected, actual, null)).isFalse();
assertThat(i).isEmpty();
assertThat(PurchaseResult.failure(ex)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(result).contains("IllegalStateException");
assertThat(result.get()).isInstanceOf(String.class); assertThat(r.get() .get()).isEqualTo(value);
assertThat(validator.validate(client)).isFalse();
assertThat(exit).isEqualTo(CommandLine.ExitCode.SOFTWARE + 1);
assertThat(result).isEqualTo(BigDecimal.ONE.negate());
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(result).isSameAs(expected); assertThat(counter.count()).isEqualTo(1);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(nc.test(Wrapper.wrap(new LoanDescriptor(MockLoanBuilder.fresh()), FOLIO))).isFalse();
assertThat(actual).containsExactly(version, version2);
assertThat(transactional.getLoan(loanId)).isEqualTo(result);
assertThat(cs).isNotNull();
assertThat(actualInvestment).isEqualTo(Money.ZERO);
assertThat(FailureTypeUtil.matches(expected, actual, null)).isTrue();
assertThat(i).isEmpty();
assertThat(InvestmentResult.failure(new ClientErrorException(410))) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(result).isEqualTo(BigDecimal.ONE);
assertThat(getEventsRequested()).hasSize(1) .extracting(e -> (Object) e.getClass() .getInterfaces()[0]) .containsOnly(LoanDefaultedEvent.class); assertThat(getEventsRequested()).hasSize(1) .first() .isInstanceOf(LoanLostEvent.class);
assertThat(exec.get()).isEmpty();
assertThat(b).isEqualTo(b); assertThat(b).isNotEqualTo(null); assertThat(b).isNotEqualTo(""); assertThat(sameB).isEqualTo(b); assertThat(differentB).isNotEqualTo(b);
assertThat(pd).hasSize(1) .element(0) .extracting(ParticipationDescriptor::item) .isSameAs(p); assertThat(pd) .element(0) .extracting(ParticipationDescriptor::related) .isSameAs(l);
assertThat(transactional.getSellStrategy()).isEqualTo(result);
assertThat(state).isInstanceOf(TransactionalInstanceState.class);
assertThat(a.hasUpdates()).isTrue(); assertThat(a.hasUpdates()).isFalse();
assertThat(s.findListeners(SESSION, RoboZonkyTestingEvent.class)) .hasSize(1) .first() .returns(Optional.empty(), Supplier::get);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(r.apply(l, sessionInfo)).isEqualTo(Money.ZERO);
assertThat(result).isEqualTo(new BigDecimal("1.5"));
assertThat(a.hasUpdates()).isTrue(); assertThat(a.hasUpdates()).isFalse();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(actualInvestment).isEqualTo(Money.from(MAXIMUM_INVESTMENT));
assertThat(PurchaseResult.failure(null)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(e.getPortfolioOverview()).isNotNull();
assertThat(FileUtil.isJarFile(file)).isFalse();
assertThat(result).isEqualTo("0.05%");
assertThat(p.getToken()).isEmpty(); assertThat(p.setToken(token)).isTrue(); assertThat(p.getToken()).contains(token); assertThat(p.setToken(null)).isTrue(); assertThat(p.getToken()).isEmpty();
assertThat(nc.test(Wrapper.wrap(new LoanDescriptor(MockLoanBuilder.fresh()), FOLIO))).isTrue();
assertThat(e.getPortfolioOverview()).isNotNull();
assertThat(result).isEqualTo(new BigDecimal("1.5"));
assertThat(actual).containsExactly(version);
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(r).isEmpty();
assertThat(result).isEqualTo("0.06%");
assertThat(r).hasSize(2); assertThat(r) .first() .has(new Condition<>(result -> result.get() .isPresent() && Objects.equals(result.get() .get(), l), "Exists")); assertThat(r) .last() .has(new Condition<>(result -> result.get() .isEmpty(), "Does not exist"));
assertThat(result).isEqualTo("0.01%");
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition.getDescription()).isNotEmpty();
assertThat(s2.getContents()).endsWith("...more...");
assertThat(FailureTypeUtil.matches(expected, actual, UUID.randomUUID() .toString())).isFalse();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(transactional.getInvestmentStrategy()).isEqualTo(result);
assertThat(getEventsRequested()).hasSize(6);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(s.findListeners(SESSION, RoboZonkyTestingEvent.class)) .hasSize(1) .first() .returns(Optional.empty(), Supplier::get);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(result).isEqualTo("0.02%");
assertThat(e.getPortfolioOverview()).isNotNull();
assertThat(result).hasSize(1);
assertThat(exit).isEqualTo(CommandLine.ExitCode.USAGE);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(InvestmentResult.failure(ex)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(c).rejects(w); assertThat(c).accepts(w);
assertThat(untilNextSundayAround6am) .isBetween(Duration.ofDays(7) .minusMinutes(75), Duration.ofDays(7) .minusMinutes(45));
assertThat(this.getEventsRequested()).hasSize(1) .first() .isInstanceOf(RoboZonkyDaemonSuspendedEvent.class);
assertThat(p.execute(f, sel, filter)).isEqualTo(BigDecimal.ONE);
assertThat(id.item()).isSameAs(i); assertThat(r).isPresent();
assertThat(r1).isNotEqualTo(r1.toString());
assertThat(ld).hasSize(1) .element(0) .extracting(LoanDescriptor::item) .isSameAs(normal);
assertThat(result).isEqualTo(new BigDecimal("6"));
assertThat(result).isEmpty();
assertThat(Util.obfuscateEmailAddress("someone@somewhere.net")).isEqualTo("s...e@s...t"); assertThat(Util.obfuscateEmailAddress("ab@cd")).isEqualTo("a...b@c...d"); assertThat(Util.obfuscateEmailAddress("a@b")).isEqualTo("a@b");
assertThat(c).accepts(w); assertThat(c).rejects(w); assertThat(c).rejects(w);
assertThat(result.trim()).isEqualTo("0,01" + (char) 160 + "%");
assertThat(r).isEmpty();
assertThat(transactional.getSessionInfo()).isSameAs(result);
assertThat(result).isEqualTo("0.05%");
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(e.get()).isEmpty(); assertThat(evt).isEmpty();
assertThat(s.findListeners(SESSION, RoboZonkyTestingEvent.class)) .hasSize(1) .first() .extracting(Supplier::get) .extracting(Optional::isPresent) .isEqualTo(true);
assertThat(Util.isAcceptable(s, p)).isTrue();
assertThat(returnedToken).isEqualTo(resultToken);
assertThat(counter.count()).isEqualTo(1);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(condition.getDescription()).isNotEmpty();
assertThat(Util.isNetworkProblem(t)).isTrue(); assertThat(Util.isNetworkProblem(t2)).isTrue(); assertThat(Util.isNetworkProblem(t3)).isFalse(); assertThat(Util.isNetworkProblem(null)).isFalse();
assertThat(i).hasSize(1); assertThat(newEvents).hasSize(4);
assertThat(f).isDone();
assertThat(c).rejects(w); assertThat(c).accepts(w);
assertThat(exit).isEqualTo(CommandLine.ExitCode.OK);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(FailureTypeUtil.matches(expected, actual, reason)).isTrue();
assertThat(result.get()).isEqualTo(Response.noMoreRecentVersion());
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(state.contains(INITIAL_LOAN)).isTrue();
assertThat(token).isNotNull();
assertThat(instance2).isNotSameAs(instance);
assertThat(SessionEvents.getImplementingEvent(LoanDelinquent90DaysOrMoreEvent.class)) .isEqualTo(LoanDelinquent90DaysOrMoreEvent.class);
assertThat(result.trim()).isEqualTo("0,00" + (char) 160 + "%");
assertThat(tenant.getState(TransactionalPowerTenantImplTest.class) .getKeys()).isEmpty(); assertThat(getEventsRequested()).isEmpty();
assertThat(strategy.getPermittedShare(Rating.D)).isEqualTo(Ratio.ONE);
assertThat(InvestmentResult.failure(null)) .matches(r -> !r.isSuccess()) .matches(r -> r.getFailureType() .isPresent() && r.getFailureType() .get() == UNKNOWN);
assertThat(e).isNotNull();
assertThat(result).isEmpty();
assertThat(a.hasUpdates()).isTrue(); assertThat(a.hasUpdates()).isTrue();
assertThat(this.getEventsRequested()) .hasSize(1) .first() .isInstanceOf(SellingCompletedEvent.class);
assertThat(cs).isEqualTo(cs); assertThat(cs).isNotEqualTo(null); assertThat(cs).isNotEqualTo(""); assertThat(cs).isEqualTo(cs2); assertThat(cs2).isEqualTo(cs); assertThat(cs).isNotEqualTo(cs3); assertThat(cs3).isNotEqualTo(cs);
assertThat(result).isEmpty();
assertThat(s.complement(Collections.emptySet())).isEmpty(); assertThat(s.complement(Collections.singleton(id))).isEmpty();
assertThat(d.getSessionInfo()).isSameAs(a.getSessionInfo()); assertThat(f.get()).isEqualTo(ReturnCode.OK); assertThat(s.isClosed()).isTrue();
assertThat(result).isEmpty();
assertThat(result).isEmpty();
assertThat(reloadAfter(token)).isBetween(Duration.ofMinutes(59), Duration.ofMinutes(60)); assertThat(reloadAfter(token2)).isEqualTo(Duration.ofHours(1)); assertThat(reloadAfter(token3)).isBetween(Duration.ofMinutes(60), Duration.ofMinutes(61));
assertThat(result).extracting(d -> d.descriptor() .item()) .containsOnly(i2);
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(s.getValue(key)).contains(value);
assertThat(c).rejects(w); assertThat(c).accepts(w);
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(sut.getTargetPortfolioSize()).isEqualTo(Money.from(Long.MAX_VALUE)); assertThat(sut.getTargetPortfolioSize()).isEqualTo(Money.from(400));
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(Money.sum(Arrays.asList(a, b))).isEqualTo(Money.from(3));
assertThat(condition).accepts(w); assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(getEventsRequested()).isEmpty();
assertThat(condition.getDescription()).isNotEmpty();
assertThat(exec.get()).isEmpty(); assertThat(e).isEmpty();
assertThat(ratio.apply(money)).isEqualTo(Money.from("2.5"));
assertThat(r).isPresent();
assertThat(this.getEventsRequested()) .hasSize(1) .first() .isInstanceOf(RoboZonkyDaemonSuspendedEvent.class);
assertThat(validator.validate(client)).isFalse();
assertThat(w.getRevenueRate()).isEqualTo(Ratio.fromPercentage("14.99"));
assertThat(cfg).isEmpty();
assertThat(e.getCause()).isNotNull();
assertThat(result).isEqualTo(new BigDecimal("6"));
assertThat(r).isEmpty();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(f.apply(tested)).isEqualTo(tested);
assertThat(SecretProviderFactory.getSecretProvider(cli)).isEmpty(); assertThat(password).isEqualTo(" ".toCharArray());
assertThat(id).isNotEqualTo(id3);
assertThat(r).isEmpty();
assertThat(s.getKeys()).isSameAs(parent.getKeys());
assertThat(z.invest(l, 200)).isEqualTo(InvestmentResult.success());
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(c).accepts(w); assertThat(c).rejects(w); assertThat(c).rejects(w);
assertThat(tuple._1()).isEqualTo(1);
assertThat(counter.count()).isEqualTo(1);
assertThat(result).isEmpty();
assertThat(condition).rejects(w); assertThat(condition).accepts(w);
assertThat(first).isNotNull(); assertThat(second).isNotNull() .isNotSameAs(first); assertThat(r.refreshIfNotAlreadyRefreshing(third)).isSameAs(third);
assertThat(transactional.getReservationStrategy()).isEqualTo(result);
assertThat(r).isEmpty();
assertThat(r.apply(l, sessionInfo)).isEqualTo(Money.ZERO);
assertThat(instance2).isSameAs(instance);
assertThat(FileUtil.findFolder(UUID.randomUUID() .toString()) .get()).isEmpty();
assertThat(z.purchase(p)).isEqualTo(PurchaseResult.success());
assertThat(condition).accepts(w); assertThat(condition).rejects(w);
assertThat(result).isEqualTo(BigDecimal.ONE);
assertThat(z.purchase(p) .getFailureType()).contains(PurchaseFailureType.UNKNOWN);
assertThat(p.setUsername(null)).isFalse();
assertThat(exit).isEqualTo(CommandLine.ExitCode.OK);
assertFalse(docWrapper == retDocWrapper); assertEquals(docWrapper.getDocumentMetadata().getKey(), retDocWrapper.getDocumentMetadata().getKey());
assertTrue(docWrappers == retDocWrappers);
assertFalse(docWrapper == retDocWrapper); assertEquals(retDocWrapper.getDocumentMetadata().getKey(), docWrapper.getDocumentMetadata().getKey()); assertEquals(retDocWrapperTuple2._1(), docWrapper.getDocumentMetadata().getKey());
assertTrue(retCitations == citations);
assertEquals(2, docIdEntities.size()); assertTrue(docIdEntities.get(0)._2() == entity1); assertEquals(docIdEntities.get(0)._1(), "1"); assertTrue(docIdEntities.get(1)._2() == entity2); assertEquals(docIdEntities.get(1)._1(), "2");
assertTrue(docReferences == citReferences);
assertEquals(actualCitDocPairs.count(), 0);
assertNotNull(authorNode); assertNotNull(authorNode); assertNotNull(authorNode);
assertEquals(2, docIdReferences.size()); assertEquals(docMetadata.getKey(), docIdReferences.get(0)._1()); assertEquals(docMetadata.getKey(), docIdReferences.get(1)._1()); assertEquals(ref1, docIdReferences.get(0)._2()); assertEquals(ref4, docIdReferences.get(1)._2());
assertEquals(actualCitIdDocPairs.count(), 0);
assertTrue(docIdWithPicOut == retDocIdWithPicOut);
assertTrue(citations == convertedCitations);
assertTrue(retDocuments == documents);
assertEquals(srcDocIdPicOut._1(), "XYZ"); assertEquals(srcDocIdPicOut._2().getDocId(), "XYZ"); assertEquals(srcDocIdPicOut._2().getRefsCount(), refs.size()); assertTrue(srcDocIdPicOut._2().getRefs(0) == ref1); assertTrue(srcDocIdPicOut._2().getRefs(1) == ref2); assertTrue(srcDocIdPicOut._2().getRefs(2) == ref3);
assertEquals(2, hashIdPairs.size()); assertEquals(new Tuple2<>("XXX", "12"), hashIdPairs.get(0)); assertEquals(new Tuple2<>("ZZZ", "12"), hashIdPairs.get(1));
assertTrue(retEntities == matchableEntities);
assertEquals(docIdReference._1(), "QW1233"); assertEquals(docIdReference._2().getDocId(), "ABC"); assertEquals(docIdReference._2().getRawText(), "RAW_TEXT"); assertEquals(docIdReference._2().getRefNum(), 12);
assertEquals(13,cal.get(Calendar.HOUR_OF_DAY)); assertEquals(12,cal.get(Calendar.HOUR_OF_DAY)); assertEquals(12,cal.get(Calendar.HOUR_OF_DAY)); assertEquals(12,cal.get(Calendar.HOUR_OF_DAY)); assertEquals(14,cal.get(Calendar.HOUR_OF_DAY));
assertEquals(ace, ace); assertEquals(ace, ace2); assertEquals(ace2, ace); assertFalse(ace.equals(null)); assertFalse(ace.equals(ace3)); assertFalse(ace.equals(ace4)); assertFalse(ace.equals(ace5)); assertEquals(ace.hashCode(), ace2.hashCode());
assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Read", "CustomCompoundPerm", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Read", "CustomCompoundPerm", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Read", "CustomCompoundPerm", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions));
assertEquals(3, blobs.size()); assertTrue(blobs.contains(blob1)); assertTrue(blobs.contains(blob2)); assertTrue(blobs.contains(blob3));
assertEquals("bogdan", ace.getUsername());
assertNotNull(vp); assertNotNull(deleteVP); assertEquals("Remove", deleteVP.getDenyPermission()); assertEquals("ReadRemove", deleteVP.getPermission());
assertEquals(0, countFiles(binaryManager.getStorageDir())); assertFalse(file.exists()); assertTrue(source.getFile().exists());
assertNull(groups); assertNotNull(groups); assertEquals(Arrays.asList("ReadWrite", "Write"), Arrays.asList(groups));
assertEquals("bogdan:write:false", ace.toString());
assertEquals(13,cal.get(Calendar.HOUR_OF_DAY)); assertEquals(11,cal.get(Calendar.HOUR_OF_DAY));
assertEquals(4, principals.length); assertTrue(Arrays.asList(principals).contains("bob")); assertTrue(Arrays.asList(principals).contains("vps")); assertTrue(Arrays.asList(principals).contains("males")); assertTrue(Arrays.asList(principals).contains( SecurityConstants.EVERYONE));
assertEquals("write", ace.getPermission());
assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Write", "Read", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals( Arrays.asList("Write", "ReadRemove", "Everything", "Read"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Write", "Read", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions));
assertNull(binary); assertNotNull(binary); assertEquals(CONTENT_MD5, binary.getDigest()); assertNotNull(binary); assertEquals(bytes.length, binary.getLength()); assertEquals(CONTENT, IOUtils.toString(stream, UTF8));
assertNull(EmbeddedFunctions.parseWord("gr")); assertNull(EmbeddedFunctions.parseWord("are")); assertNull(EmbeddedFunctions.parseWord("THE")); assertEquals("foo", EmbeddedFunctions.parseWord("foo")); assertEquals("foo", EmbeddedFunctions.parseWord("fOoS"));
assertEquals(4, perms.size()); assertTrue(perms.contains(SecurityConstants.READ)); assertTrue(perms.contains(SecurityConstants.EVERYTHING));
assertEquals(0, countFiles(binaryManager.getStorageDir())); assertNull(binary); assertNotNull(binary); assertEquals(1, countFiles(binaryManager.getStorageDir())); assertNull(binary); assertNotNull(binary); assertEquals(bytes.length, binary.getLength()); assertEquals(CONTENT, IOUtils.toString(binary.getStream(), "UTF-8"));
assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Write", "Read", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Write", "Read", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals(Arrays.asList("Write", "Read", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions));
assertEquals(dl1, dl1); assertEquals(dl1.longValue(), dl2.longValue()); assertFalse(dl1.equals(dl2));
assertEquals(100, dl.getBase()); assertEquals(123, dl.getDelta()); assertEquals(223, dl.longValue()); assertEquals(223, dl.intValue()); assertEquals(223f, dl.floatValue(), 0.0f); assertEquals(223d, dl.doubleValue(), 0.0d); assertEquals(Long.valueOf(223), dl.getFullValue()); assertEquals(Long.valueOf(123), dl.getDeltaValue()); assertEquals("223", dl.toString());
assertNotNull(orderedVisiblePermissions); assertEquals( Arrays.asList("Read", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals( Arrays.asList("Read", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions)); assertNotNull(orderedVisiblePermissions); assertEquals( Arrays.asList("Read", "ReadWrite", "ReadRemove", "Everything"), permStrings(orderedVisiblePermissions));
assertNotNull(groups); assertEquals(Arrays.asList("ReadRemove", "ReadWrite"), Arrays.asList(groups)); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadRemove", "ReadWrite"), Arrays.asList(groups)); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadRemove", "ReadWrite"), Arrays.asList(groups)); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadProperties", "ReadRemove", "ReadWrite"), Arrays.asList(groups));
assertThat(iterator.next(), is(0L)); assertThat(iterator.next(), is(1L)); assertThat(iterator.next(), is(2L)); assertThat(iterator.next(), is(4L)); assertThat(iterator.next(), is(8L)); assertThat(iterator.next(), is(16L)); assertThat(iterator.next(), is(32L)); assertThat(iterator.next(), is(64L)); assertThat(iterator.next(), is(128L));
assertThat(console.isDiagnosticsEnabled(), is(true));
assertThat(modifier, is(sameInstance(cygwin)));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(console1.isDiagnosticsEnabled(), is(true)); assertThat(console2.isDiagnosticsEnabled(), is(true));
assertThat(stub.testMethod(1, (String) null), is(19));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string, is(nullValue()));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(line, is("Err: foo")); assertThat(reader.readLine(), is("Err: bar")); assertThat(reader.readLine(), is("(terminated)")); assertThat(reader.readLine(), is(nullValue()));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(optionsByType, is(not(nullValue()))); assertThat(optionsByType.asArray().length, is(1)); assertThat(profile, is(not(nullValue()))); assertThat(profile.getParameters(), is("hello"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(pathString, is("modified-path"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(classPath.size(), is(1));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(loader.getContainerScope(), sameInstance(Container.getContainerScope()));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string, is(nullValue()));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(modifier, is(sameInstance(none)));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(path.toString(separators), is("foo.jar" + separators.getPathSeparator() + "bar.jar"));
assertThat(string, is(nullValue()));
assertThat(string1, is("")); assertThat(string2, is("hello")); assertThat(string3, is("hello world"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string, is(""));
assertThat(reader.readLine(), is("Out: foo")); assertThat(reader.readLine(), is("Out: bar")); assertThat(reader.readLine(), is("(terminated)")); assertThat(reader.readLine(), is(nullValue()));
assertThat(copy, is(not(sameInstance(command))));
assertThat(console.isDiagnosticsEnabled(), is(false));
assertThat(Primes.closestPrimeTo(2), is(2)); assertThat(Primes.closestPrimeTo(3), is(3)); assertThat(Primes.closestPrimeTo(5), is(5)); assertThat(Primes.closestPrimeTo(7), is(7));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("")); assertThat(string2, is("")); assertThat(string3, is("hello")); assertThat(string4, is("hello world")); assertThat(string5, is("hello world"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("")); assertThat(string2, is("hello")); assertThat(string3, is("hello world"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(version, is(not(nullValue())));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(stub.testMethod(1, "a"), is(19));
assertThat(stub.testMethod(1, "a", "b"), is(19));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("")); assertThat(string2, is("")); assertThat(string3, is("hello")); assertThat(string4, is("hello world")); assertThat(string5, is("hello world"));
assertThat(console.isDiagnosticsEnabled(), is(false));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(sameInstance(command)));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(console.isDiagnosticsEnabled(), is(true));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(sameInstance(command)));
assertThat(classOfDeferred, equalTo(String.class));
assertThat(Primes.closestPrimeTo(1), is(1)); assertThat(Primes.closestPrimeTo(0), is(1)); assertThat(Primes.closestPrimeTo(-1), is(1));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(Primes.closestPrimeTo(4), is(5)); assertThat(Primes.closestPrimeTo(6), is(7)); assertThat(Primes.closestPrimeTo(8), is(7)); assertThat(Primes.closestPrimeTo(9), is(11)); assertThat(Primes.closestPrimeTo(10), is(11)); assertThat(Primes.closestPrimeTo(32), is(31));
assertThat(properties, is(expected));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("\\" \\"")); assertThat(string2, is("hello")); assertThat(string3, is("\\"hello world\\""));
assertThat(properties, is(expected));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("")); assertThat(string2, is("")); assertThat(string3, is("hello")); assertThat(string4, is("hello world")); assertThat(string5, is("hello world"));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("\\"\\"")); assertThat(string2, is("\\"hello\\"")); assertThat(string3, is("\\"hello world\\""));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(stub.testMethod(1), is(19));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(copy, is(not(sameInstance(command))));
assertThat(string1, is("")); assertThat(string2, is("")); assertThat(string3, is("hello")); assertThat(string4, is("hello world")); assertThat(string5, is("hello world"));
assertThat(stub.testMethod(1, (String[]) null), is(19));
assertThat(copy, is(not(sameInstance(command))));
assertThat(new String(out.toByteArray()), is("Hello World!"));
assertThat(telemetricsFile.exists(), is(true)); assertThat(telemetricsFile.length(), is(greaterThan(0L)));
assertThat(path.toString(separators), is("foo.jar" + separators.getPathSeparator() + "bar.jar"));
assertEquals("size", test.size(), val.size());
assertEquals(data.get(index), converter.convert(sData[index])); assertEquals(data.get(index), converter.convert(sData[index]));
assertEquals(expectedPath, PathDirectory.getClusterPostProcessorOutputDirectory(output));
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get(500000L));
assertTrue("a.getDistanceSquared(b) != a.minus(b).getLengthSquared", Math.abs(expected - test.getDistanceSquared(other)) < 10.0E-7);
assertEquals("size", 3, test.getNumNondefaultElements());
assertNotNull(beta); assertEquals(4, beta.numCols()); assertEquals(7, beta.numRows()); assertEquals(Math.log(betaExpectedA[i][j]), beta.get(j, i), EPSILON);
assertNotNull(originalRecommended); assertNotNull(rescoredRecommended); assertEquals(2, originalRecommended.size()); assertEquals(2, rescoredRecommended.size()); assertEquals(originalRecommended.get(0).getItemID(), rescoredRecommended.get(1).getItemID()); assertEquals(originalRecommended.get(1).getItemID(), rescoredRecommended.get(0).getItemID());
assertEquals(0.0, distance, EPSILON);
assertEquals(1.0, matrix.getQuick(n, n), EPSILON);
assertEquals(1, instance.getNumUsers());
assertNotNull(alpha); assertEquals(4, alpha.numCols()); assertEquals(7, alpha.numRows()); assertEquals(alphaExpectedA[i][j], alpha.get(j, i), EPSILON);
assertEquals(expected, dataset); assertEquals(expected, dataset);
assertEquals(ap, bp); assertEquals(ap, cp); assertEquals(dp, ep);
assertEquals(0, VectorHelper.topEntries(v, 6).size());
assertEquals(1.56, v, 0.01);
assertEquals(leaf, readNode());
assertTrue("Singular value differs from eigenvalue", Math.abs((s-e)/e) < ERROR_TOLERANCE); assertTrue(i + ": 1 - cosAngle = " + error, error < ERROR_TOLERANCE);
assertEquals(q, g.cdf(p), 0.01);
assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10); assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
assertEquals(Resources.toString(Resources.getResource("expected-arff-schema.json"), Charsets.UTF_8), writer.toString());
assertEquals(Double.NaN, similarity, EPSILON);
assertNull(instance.takeAvailableUser());
assertNotNull(computed); assertEquals(computed.length, getSequence().length); assertEquals(expected[i], computed[i]);
assertEquals(1, v.getNumNonZeroElements()); assertEquals(1, traceDictionary.size()); assertEquals("interactions=a:b", getFirst(traceDictionary.keySet(), null));
assertEquals(0.76, auc.auc(), 0.01);
assertEquals(singularValues.length, computedSV.length); assertEquals(singularValues[i], computedSV[i], 1.0e-10);
assertEquals(clusterIDSeq[clusterCount], cluster.getId());
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get(500000L));
assertEquals("dot", expected, res, EPSILON);
assertTrue(iterator.hasNext()); assertTrue(next.getSecond().toString().contains("599")); assertFalse(iterator.hasNext());
assertEquals("foo", enc.asString("123"));
assertNull(map.get("foo")); assertEquals("bang", map.get("baz"));
assertEquals(1, recommender.recommend(123, 3).size()); assertEquals(0, recommender.recommend(234, 3).size()); assertEquals(1, recommender.recommend(345, 3).size());
assertNotNull(computed); assertEquals(computed.length, getSequence().length); assertEquals(expected[i], computed[i]);
assertEquals(1, nominalMap.size()); assertEquals(77, windyValues.get(breezy).intValue());
assertNotNull(AnalyzerUtils.createAnalyzer(StandardAnalyzer.class.getName()));
assertEquals(gold--, re.getItemID2());
assertNotNull(AnalyzerUtils.createAnalyzer(CJKAnalyzer.class.getName()));
assertEquals(0, cmp.compare(a, b)); assertEquals(0, cmp.compare(a, c)); assertTrue(cmp.compare(a, d) < 0); assertTrue(cmp.compare(a, e) > 0); assertTrue(cmp.compare(d, e) > 0);
assertEquals(6, VectorHelper.topEntries(v, 6).size()); assertTrue(VectorHelper.topEntries(v, 9).size() < 9); assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));
assertNotNull(recommended); assertEquals(1, recommended.size()); assertEquals(2, firstRecommended.getItemID()); assertEquals(0.1f, firstRecommended.getValue(), EPSILON);
assertEquals(result, firstVector.get(1), 0); assertEquals(result, firstVector.get(2), 0); assertEquals(result, firstVector.get(3), 0); assertEquals(result, firstVector.get(4), 0); assertEquals(result, firstVector.get(5), 0); assertEquals(result, firstVector.get(6), 0);
assertNotNull(recommended); assertEquals(1, recommended.size()); assertEquals(2, firstRecommended.getItemID()); assertEquals(0.1f, firstRecommended.getValue(), EPSILON);
assertEquals(180.0, split.getIg(), EPSILON); assertEquals(38.0, split.getSplit(), EPSILON); assertEquals(76.5, split.getIg(), EPSILON); assertEquals(21.5, split.getSplit(), EPSILON); assertEquals(2205.0, split.getIg(), EPSILON); assertEquals(Double.NaN, split.getSplit(), EPSILON); assertEquals(250.0, split.getIg(), EPSILON); assertEquals(41.0, split.getSplit(), EPSILON);
assertEquals(1.0, firstVector.get(0), 0); assertEquals(65.0, firstVector.get(1), 0); assertEquals(1.0, firstVector.get(3), 0); assertEquals(1.0, firstVector.get(4), 0); assertTrue("Vector is not dense", vector instanceof DenseVector); assertEquals(5, count);
assertEquals(new Float(0.0f).hashCode(), RandomUtils.hashFloat(0.0f)); assertEquals(new Float(1.0f).hashCode(), RandomUtils.hashFloat(1.0f)); assertEquals(new Float(Float.POSITIVE_INFINITY).hashCode(), RandomUtils.hashFloat(Float.POSITIVE_INFINITY)); assertEquals(new Float(Float.NaN).hashCode(), RandomUtils.hashFloat(Float.NaN));
assertEquals(m, mtt, EPSILON);
assertTrue(exceptionThrown); assertFalse(exceptionThrown); assertTrue(exceptionThrown);
assertEquals(gold++, re.getUserID1());
assertEquals(Float.MAX_VALUE, instance.getPreferenceValue(anonymousUserID, sampleItemID), EPSILON);
assertEquals(v1, v2);
assertEquals(0.1f, recommender.estimatePreference(1, 2), EPSILON);
assertEquals(3.0, svd.cond(), 1.5e-15);
assertTrue(row < 5); assertTrue(col < 6); assertEquals(135, m.aggregate(Functions.PLUS, Functions.IDENTITY), 1e-10);
assertEquals(0.5, correlation, EPSILON);
assertEquals(classifierData.size(), bag.size()); assertTrue("some instances from data should not be in the bag", found); assertEquals(regressionData.size(), bag.size()); assertTrue("some instances from data should not be in the bag", found);
assertTrue(it.hasNext()); assertEquals(3, (long) it.next()); assertTrue(it.hasNext()); assertEquals(2, it.nextLong()); assertTrue(it.hasNext()); assertEquals(1, (long) it.next()); assertFalse(it.hasNext());
assertNotNull(attrs); assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length); assertFalse("an attribute has already been selected", selected[attr]); assertTrue(attr >= 0); assertTrue(attr < nbAttributes); assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
assertNotNull(it); assertTrue(it.hasNext()); assertEquals(123, it.nextLong()); assertTrue(it.hasNext()); assertEquals(234, it.nextLong()); assertTrue(it.hasNext()); assertEquals(456, it.nextLong()); assertTrue(it.hasNext()); assertEquals(654, it.nextLong()); assertTrue(it.hasNext()); assertEquals(789, it.nextLong()); assertTrue(it.hasNext()); assertEquals(999, it.nextLong()); assertFalse(it.hasNext());
assertEquals(cm.getLabels().size(), m.numCols()); assertTrue(rowLabels.keySet().contains(LABELS[0])); assertTrue(rowLabels.keySet().contains(LABELS[1])); assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL)); assertEquals(2, cm.getCorrect(LABELS[0])); assertEquals(20, cm.getCorrect(LABELS[1])); assertEquals(0, cm.getCorrect(DEFAULT_LABEL));
assertEquals("test[1][0]", 2.1, test.getQuick(1, 0), EPSILON); assertEquals("test[1][1]", 3.2, test.getQuick(1, 1), EPSILON);
assertEquals("part size", 2, part.getNumNondefaultElements());
assertEquals(10.65, v, 0.01);
assertEquals("Saved vector is identical to original", old.get(), value);
assertEquals(prefs.length(), ratingVector.getNumNondefaultElements()); assertEquals(prefs.get(0).getValue(), ratingVector.get(0), EPSILON); assertEquals(prefs.get(1).getValue(), ratingVector.get(1), EPSILON); assertEquals(prefs.get(2).getValue(), ratingVector.get(2), EPSILON);
assertEquals(numSplits, splits.size()); assertTrue(splits.get(index) instanceof InMemInputSplit); assertEquals(expectedId, split.getFirstId()); assertEquals(nbTreesPerSplit, split.getNbTrees()); assertEquals(nbTrees - totalTrees, split.getNbTrees());
assertEquals(4, model.getNumUsers());
assertTrue(comparator.compare(v1, v2) > 0); assertTrue(comparator.compare(v3, v1) < 0); assertTrue(comparator.compare(v3, v2) > 0); assertEquals(0, comparator.compare(v4, v1)); assertEquals(0, comparator.compare(v1, v1));
assertSame(sampleUserID, userIDs.next()); assertFalse(userIDs.hasNext());
assertNotNull(similar); assertEquals(2, similar.size()); assertEquals(2, first.getItemID()); assertEquals(0.85f, first.getValue(), EPSILON); assertEquals(3, second.getItemID()); assertEquals(-0.3f, second.getValue(), EPSILON);
assertFalse(model.toString().isEmpty());
assertEquals(hiddenSequenceExp[i], hiddenSequenceDec.get(i)); assertEquals(outputSequenceExp[i], outputSequenceDec.get(i));
assertEquals(node, readNode());
assertTrue(bitSet.get(NUM_BITS-1));
assertEquals(-16.52, z.sample(0), 1.0e-2); assertEquals(20.47, z.sample(1), 1.0e-2);
assertTrue(m1.getQuick(row, col) >= 0.0); assertTrue(m1.getQuick(row, col) < 1.0); assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertNotNull(beta); assertEquals(4, beta.numCols()); assertEquals(7, beta.numRows()); assertEquals(betaExpectedA[i][j], beta.get(j, i), EPSILON);
assertTrue(set.add(id)); assertEquals(4, clusterCount);
assertEquals(7, mappingOne.getNumMappings()); assertEquals(i, mappingOne.get(i), i); assertEquals(20, mappingOne.get(10), 0);
assertFalse(new SamplingLongPrimitiveIterator( countingIterator(0), 0.9999).hasNext()); assertFalse(new SamplingLongPrimitiveIterator( countingIterator(0), 1).hasNext());
assertEquals((float) k*0.5*0.9, v1.norm(1), 0); assertEquals(0.5*0.9, v1.maxValue(), 0);
assertEquals(0, u1.minus(u2).aggregate(Functions.PLUS, Functions.ABS), 1.0e-9);
assertEquals(gold--, re.getUserID2());
assertEquals((float) k*3, v1.norm(1), 0);
assertEquals(3, prefs.length()); assertEquals(1.0f, prefs.getValue(2), EPSILON);
assertEquals(1, estimate, EPSILON);
assertEquals("date-"+i, r1.nextInt(), r2.nextInt());
assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(set.contains(1));
assertEquals(1.0, miIi.getQuick(0, 0), EPSILON); assertEquals(2.0, miIi.getQuick(1, 0), EPSILON); assertEquals(3.0, miIi.getQuick(2, 0), EPSILON); assertEquals(4.0, miIi.getQuick(0, 1), EPSILON); assertEquals(5.0, miIi.getQuick(1, 1), EPSILON); assertEquals(6.0, miIi.getQuick(2, 1), EPSILON);
assertTrue(expected.containsAll(actual)); assertTrue(actual.containsAll(expected)); assertTrue(map.containsKey("baz")); assertFalse(map.containsKey("foo")); assertFalse(map.containsKey("alpha"));
assertNotNull(mostSimilar); assertEquals(0, mostSimilar.length);
assertFalse(data.identicalLabel());
assertNotNull(recommendedBecause); assertEquals(3, recommendedBecause.size()); assertEquals(2, first.getItemID()); assertEquals(0.99f, first.getValue(), EPSILON); assertEquals(3, second.getItemID()); assertEquals(0.4f, second.getValue(), EPSILON); assertEquals(0, third.getItemID()); assertEquals(0.2f, third.getValue(), EPSILON);
assertEquals(gold, topItem.getItemID()); assertEquals(gold--, topItem.getValue(), 0.01);
assertEquals(1, count(values, classifierData.get(index).get(attr))); assertEquals(1, count(values, regressionData.get(index).get(attr)));
assertEquals("size", 7, test.size());
assertNotNull(prefs); assertEquals(123, pref1.getUserID()); assertEquals(456, pref1.getItemID()); assertEquals(456, pref2.getUserID()); assertEquals(456, pref2.getItemID()); assertEquals(2, prefs.length());
assertEquals(model.getItemIDsFromUser(123).size(), 3); assertEquals(model.getItemIDsFromUser(456).size(), 4);
assertTrue(!similarity.toString().isEmpty());
assertEquals(gold++, re.getItemID1());
assertTrue(m1.getQuick(row, col) >= -1.0); assertTrue(m1.getQuick(row, col) < 1.0); assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertNotNull(attrs); assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length); assertFalse("an attribute has already been selected", selected[attr]); assertTrue(attr >= 0); assertTrue(attr < nbAttributes); assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
assertEquals("rows", test.columnSize(), transpose.rowSize()); assertEquals("cols", test.rowSize(), transpose.columnSize());
assertTrue(expected.isEmpty());
assertNotNull(alpha); assertEquals(4, alpha.numCols()); assertEquals(7, alpha.numRows()); assertEquals(Math.log(alphaExpectedA[i][j]), alpha.get(j, i), EPSILON);
assertTrue(list.isEmpty()); assertEquals(0, list.size());
assertEquals("wrong zSum", expected, test.zSum(), EPSILON);
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get("foo"));
assertEquals(expectedResult, result, 0.0); assertEquals(resultBase, result, 0.0);
assertEquals("attributes size", nbAttributes, attrs.length);
assertEquals("getRandom() must match getRandom() in unit tests", lTest0, lTest1); assertTrue("getRandom() must differ from getRandom(0)", lTest0 != l1); assertTrue("getRandom(0) must differ from getRandom(1)", l0 != l1);
assertEquals("test[0][1]", 2.1, test.getQuick(0, 1), EPSILON); assertEquals("test[1][1]", 3.2, test.getQuick(1, 1), EPSILON); assertEquals("test[2][1]", 4.3, test.getQuick(2, 1), EPSILON);
assertEquals(0.1, s.getMean(), 0.01);
assertEquals(prefs, instance.getPreferencesFromUser(sampleUserID));
assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString()); assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString());
assertEquals(1, riIiMaybeTransposed.numCols(), 1); assertEquals(3, riIiMaybeTransposed.numRows(), 3); assertEquals(1.0, riIiMaybeTransposed.getQuick(0, 0), EPSILON); assertEquals(3.0, riIiMaybeTransposed.getQuick(1, 0), EPSILON); assertEquals(5.0, riIiMaybeTransposed.getQuick(2, 0), EPSILON);
assertTrue(LogLikelihood.rootLogLikelihoodRatio(6, 7567, 1924, 2426487) >= 0.0);
assertTrue(clustersFilter.accept(path0)); assertTrue(clustersFilter.accept(path1));
assertEquals(2, clone.getNumMappings()); assertEquals(1.1, clone.get(0), EPSILON); assertEquals(0.0, clone.get(1), EPSILON); assertEquals(6.6, clone.get(5), EPSILON); assertEquals(0.0, clone.get(6), EPSILON);
assertEquals("row size", test.size(), result.rowSize()); assertEquals("col size", test.size(), result.columnSize());
assertEquals("beta at (" + alpha + ", " + beta + ") relative error = " + err, 0, err, 1.0e-10);
assertTrue("type", like instanceof DenseMatrix); assertEquals("rows", test.rowSize(), like.rowSize()); assertEquals("columns", test.columnSize(), like.columnSize());
assertEquals(x.getQuick(i), function.apply(i, i), 0.0);
assertEquals(expectedPath, PathDirectory.getClusterOutputClusteredPoints(output));
assertTrue(set.add(id)); assertEquals(4, clusterCount);
assertEquals(expResult, result);
assertEquals(1.386294, LogLikelihood.entropy(1, 1), 0.0001); assertEquals(0.0, LogLikelihood.entropy(1), 0.0);
assertEquals(1, cl.getLearner().auc(), 0.1); assertEquals(1, adaptiveLogisticRegression.auc(), 0.1);
assertEquals(3, actual.size()); assertEquals(0, expectedKeys.size()); assertEquals(0, expectedValues.size());
assertEquals("org.apache.mahout.math.jet.random.Normal(m=1.300000, sd=5.900000)", new Normal(1.3, 5.9, null).toString());
assertTrue(name.startsWith(splitPattern)); assertEquals(2, numEntries(status, conf)); assertEquals(numSplits, statuses.length);
assertNotNull(similar); assertEquals(2, similar.size()); assertEquals(1, first.getItemID()); assertEquals(1.0f, first.getValue(), EPSILON); assertEquals(2, second.getItemID()); assertEquals(0.5f, second.getValue(), EPSILON);
assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertFalse(iterator.hasNext());
assertEquals(1.0, forest.classify(testData.getDataset(), rng, testData.get(0)), EPSILON); assertEquals(0.0, forest.classify(testData.getDataset(), rng, testData.get(1)), EPSILON); assertEquals(1.0, forest.classify(testData.getDataset(), rng, testData.get(2)), EPSILON);
assertNotNull(similar); assertEquals(1, similar.size()); assertEquals(0, first.getItemID()); assertEquals(0.2f, first.getValue(), EPSILON);
assertTrue(initialized.booleanValue()); assertEquals(4, model.getNumUsers());
assertEquals("size", 3, test.getNumNondefaultElements());
assertTrue(t.hasNext()); assertEquals(i, t.next().intValue()); assertFalse(t.hasNext());
assertNotNull("Vector is null", result); assertEquals("Loaded vector is not identical to original", result, value);
assertEquals(String.format(Locale.ENGLISH, "alpha=%.2f, beta=%.2f, x=%.2f\\n", alpha, beta, x), p, g1.pdf(x), 1.0e-9);
assertEquals(0, s[j].getMean() / s[j].getSD(), 0.04); assertEquals(0, cross[j].getMean() / cross[j].getSD(), 0.04);
assertEquals(String.format("m = %.3f, sd = %.3f", s.getMean(), s.getSD()), 2, s.getMean(), 0.04 * s.getSD()); assertEquals(5, s.getSD(), 0.12);
assertEquals(new Double(0.0).hashCode(), RandomUtils.hashDouble(0.0)); assertEquals(new Double(1.0).hashCode(), RandomUtils.hashDouble(1.0)); assertEquals(new Double(Double.POSITIVE_INFINITY).hashCode(), RandomUtils.hashDouble(Double.POSITIVE_INFINITY)); assertEquals(new Double(Double.NaN).hashCode(), RandomUtils.hashDouble(Double.NaN));
assertEquals(forwardLikelihood, backwardLikelihood, EPSILON); assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
assertEquals(root, readNode());
assertTrue(expected.containsAll(actual)); assertTrue(actual.containsAll(expected)); assertTrue(map.containsValue("bang")); assertFalse(map.containsValue("bar")); assertFalse(map.containsValue("beta"));
assertEquals(-0.35, m.get(0, 0), 0.02); assertEquals(-2.36, m.get(0, 1), 0.02); assertEquals(-2.36, m.get(1, 0), 0.02); assertEquals(-0.35, m.get(1, 1), 0.02);
assertEquals(1 - Math.exp(-x * 5.0), dist.cdf(x), 1.0e-9);
assertEquals("Median", reference.inverseCumulativeProbability(0.5), data[5000], 0.04);
assertEquals(3, v, 0.02);
assertEquals(conf, lucene2SeqConf.getConfiguration()); assertEquals(asList(getIndexPath1()), lucene2SeqConf.getIndexPaths()); assertEquals(seqFilesOutputPath, lucene2SeqConf.getSequenceFilesOutputPath()); assertEquals(idField, lucene2SeqConf.getIdField()); assertEquals(fields, lucene2SeqConf.getFields());
assertEquals(tree < split.getNbTrees(), reader.nextKeyValue()); assertEquals(split.getFirstId() + tree, reader.getCurrentKey().get());
assertNotNull(similar); assertEquals(2, similar.size()); assertEquals(0, first.getItemID()); assertEquals(0.933333333f, first.getValue(), EPSILON); assertEquals(3, second.getItemID()); assertEquals(-0.2f, second.getValue(), EPSILON);
assertEquals(0.1f, recommender.estimatePreference(1, 2), EPSILON);
assertTrue(set.add(id)); assertEquals(3, clusterCount); assertEquals(0, v[0].dot(v[1]), 1E-10); assertEquals(0, v[1].dot(v[2]), 1E-10); assertEquals(0, v[0].dot(v[2]), 1E-10);
assertTrue(clustersFilter.accept(path0)); assertTrue(clustersFilter.accept(path1)); assertTrue(clustersFilter.accept(path2)); assertTrue(clustersFilter.accept(path3Final));
assertTrue("sampled distribution is far from the original", l1Dist(distribution, sampledDistribution) < 1.0e-2);
assertEquals("row size", 2, row.getNumNondefaultElements());
assertArrayEquals(new double[][]{{1.0, Double.NaN, Double.NaN}, {1.0, 0.0, Double.NaN}, {1.0, 1.0, Double.NaN}}, predictions);
assertEquals(hiddenSequenceExp[i], hiddenSequenceEnc[i]); assertEquals(outputSequenceExp[i], outputSequenceEnc[i]);
assertNotNull(similar); assertEquals(2, similar.length); assertEquals(2, similar[0]); assertEquals(3, similar[1]);
assertTrue("type", like instanceof DenseMatrix); assertEquals("rows", 4, like.rowSize()); assertEquals("columns", 4, like.columnSize());
assertEquals("foo:123", enc.asString("123"));
assertEquals(res, "import statement", res); assertEquals(GOLD[i], res); assertEquals(res, "import statement 1", res); assertEquals(res, "start=1", res);
assertEquals(gold--, topItem);
assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1.0e-8); assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1.0e-8);
assertEquals(0.3333333333333333, correlation, EPSILON);
assertEquals(2, model.getNumUsersWithPreferenceFor(456)); assertEquals(0, model.getNumUsersWithPreferenceFor(111)); assertEquals(0, model.getNumUsersWithPreferenceFor(111, 456)); assertEquals(2, model.getNumUsersWithPreferenceFor(123, 234));
assertTrue(bitSet.get(i)); assertFalse(bitSet.get(i));
assertEquals(expectedPath, PathDirectory.getTopLevelClusterPath(output));
assertEquals(23.1, firstVector.get(1), 0); assertEquals(3.23, firstVector.get(2), 0); assertEquals(1.2, firstVector.get(3), 0); assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector); assertEquals(9, count);
assertEquals(2.0, r.get(5000), 0.15);
assertEquals("part size", 2, part.getNumNondefaultElements());
assertEquals(expected, writer.toString());
assertTrue("not like", test.getClass().isAssignableFrom(other.getClass())); assertEquals("size", test.size(), other.size());
assertEquals("row size", 3, column.getNumNondefaultElements()); assertEquals(x, column.get(i++), 0);
assertEquals(node, readNode());
assertEquals(expectedResult, result, 0.0); assertEquals(resultBase, result, 0.0);
assertEquals(expected, dataset); assertEquals(expected, dataset);
assertNull(map.get(500000L)); assertEquals("bang", map.get(47L));
assertEquals(500, AdaptiveLogisticRegression.stepSize(15000, 2)); assertEquals(2000, AdaptiveLogisticRegression.stepSize(15000, 2.6)); assertEquals(5000, AdaptiveLogisticRegression.stepSize(24000, 2.6)); assertEquals(10000, AdaptiveLogisticRegression.stepSize(15000, 3));
assertEquals(0.0, Math.sqrt(a.times(x).getDistanceSquared(b)), EPSILON); assertEquals(0.0, solver.getResidualNorm(), ConjugateGradientSolver.DEFAULT_MAX_ERROR); assertEquals(10, solver.getIterations());
assertEquals(2.44, v, 0.01);
assertEquals(1.0f, prefs.getValue(2), EPSILON); assertEquals(3, prefs.length());
assertTrue("not like", test.like() instanceof VectorView);
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get("foo"));
assertTrue(set.contains(1)); assertTrue(set.contains(2)); assertTrue(set.contains(3)); assertFalse(set.contains(4));
assertFalse(set.contains(1));
assertFalse(list.isEmpty()); assertEquals(3, list.size());
assertEquals(1.0, itemCorrelation.itemSimilarity(1, 1), EPSILON); assertEquals(0.6, itemCorrelation.itemSimilarity(1, 2), EPSILON); assertEquals(0.6, itemCorrelation.itemSimilarity(2, 1), EPSILON); assertEquals(0.3, itemCorrelation.itemSimilarity(1, 3), EPSILON); assertTrue(Double.isNaN(itemCorrelation.itemSimilarity(3, 4)));
assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertEquals(expResult, result);
assertEquals(singularValues.length, computedSV.length); assertEquals(singularValues[i], computedSV[i], 1.0e-10);
assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(set.contains(1));
assertEquals(forwardLikelihood, backwardLikelihood, EPSILON); assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
assertNotNull(originalRecommended); assertNotNull(rescoredRecommended); assertEquals(4, originalRecommended.size()); assertEquals(4, rescoredRecommended.size()); assertEquals(originalRecommended.get(0).getItemID(), rescoredRecommended.get(3).getItemID()); assertEquals(originalRecommended.get(3).getItemID(), rescoredRecommended.get(0).getItemID());
assertFalse(instance.releaseUser(Long.MAX_VALUE));
assertThat(requestParameters.isSingleValue("version"), is(false));
assertThat(parameterArray.length, is(1)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is("test-name")); assertThat(xb.getHref(), is("test-category"));
assertThat(obsParams.getSingleValue(ISOSRequestBuilder.INSERT_OBSERVATION_RESULT_TIME),is(resultTime));
assertThat(new MimetypeAwareRequestParametersSeam().isValid(), is(false));
assertThat(insertSensorType.getProcedureDescriptionFormat(),is(format));
assertThat(multiValue.addValue(""), is(true));
assertThat(jodaBeforeSwitch, is(DateTime.parse(oxfBeforeSwitch.toISO8601Format()))); assertThat(jodaAtSwitch, is(DateTime.parse(oxfAtSwitch.toISO8601Format()))); assertThat(jodaAfterSwitch, is(DateTime.parse(oxfAfterSwitch.toISO8601Format())));
assertEquals("assignedSensorId", parMan_01); assertEquals(INSERT_OBSERVATION_TYPE_TEXT, parMan_02);
assertThat(requestParameters.addParameterStringValues("version", "1.0.0", "2.0.0"), is(true)); assertThat(requestParameters.addParameterStringValues("version", "1.0.0", "2.0.0"), is(false));
assertThat(seam.getOwsConstraints(), hasSize(2)); assertThat(seam.getOwsConstraints(), is(hasItem(c1))); assertThat(seam.getOwsConstraints(), is(hasItem(c2)));
assertThat(observation.getType().getHref(),is(XMLConstants.OGC_OM_2_0_OM_TRUTH_OBSERVATION)); assertThat(result.getBooleanValue(),is(truth)); assertThat(observation.getType().getHref(),is(XMLConstants.OGC_OM_2_0_OM_TRUTH_OBSERVATION)); assertThat(result.getBooleanValue(),is(false));
assertThat(insertSensorType.getObservablePropertyArray().length, is(2)); assertThat(insertSensorType.getObservablePropertyArray(),hasItemInArray(TEST_OBSERVABLE_PROPERTY_1)); assertThat(insertSensorType.getObservablePropertyArray(),hasItemInArray(TEST_OBSERVABLE_PROPERTY_2)); assertThat(insertSensorType.getObservablePropertyArray().length, is(1)); assertThat(insertSensorType.getObservablePropertyArray(),hasItemInArray(TEST_OBSERVABLE_PROPERTY_1));
assertThat(removedValues, isA(Collection.class)); assertThat(removedValues, is(empty()));
assertThat(parameterArray.length, is(1)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is("test-name")); assertThat(((XmlBoolean) parameterArray[0].getNamedValue().getValue()).getBooleanValue(), is(false));
assertThat(parameterArray.length, is(1)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is("test-name")); assertThat(xb.getUom(), is("test-uom")); assertThat(xb.getDoubleValue(), is(52.0));
assertThat(parameterArray.length, is(1)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is("test-name")); assertThat(xb.getBigIntegerValue().intValueExact(), is(42));
assertEquals(noFixString, NcNameResolver.fixNcName(noFixString)); assertEquals(fixedString, NcNameResolver.fixNcName(needsFixString));
assertThat(iterator.next(), is("service")); assertThat(iterator.next(), is("version"));
assertThat(iterator.next(), is("text/xml")); assertThat(iterator.next(), is("application/json"));
assertThat(obsParams.getSingleValue(ISOSRequestBuilder.INSERT_OBSERVATION_PHENOMENON_TIME),is(phenTime));
assertThat(multiValue.addValue(null), is(true));
assertThat(constraint.getAllowedValues(),hasSize(1)); assertThat(constraint.getAllowedValues(),hasItem(aV1)); assertThat(constraint.getAllowedValues(),hasSize(2)); assertThat(constraint.getAllowedValues(),hasItem(aV1)); assertThat(constraint.getAllowedValues(),hasItem(aV2));
assertThat(multiValue.getValues(), isA(Collection.class));
assertEquals(SENSOR_ID, procedure); assertEquals(OUTPUT_FORMAT_SENSORML, outputFormat); assertThat(parameterAssembly.isValid(),is(true)); assertEquals(SENSOR_ID, procedure); assertEquals(OUTPUT_FORMAT_SENSORML, outputFormat); assertThat(parameterAssembly.isValid(),is(true));
assertThat(identifierFromRequestBuilder,is(SENSOR_IDENTIFIER));
assertThat(observation.getType().getHref(),is(OGC_OM_2_0_OM_TEXT_OBSERVATION)); assertThat(result.getStringValue(),is(text));
assertThat(new RequestMethodSeam(null).addOwsConstraint(null),is(false));
assertThat(constraint.getName(), is(name));
assertThat("No change indicated!", multiValue.addValue("1.0.0"), is(true)); assertThat("Change indicated!", multiValue.addValue("1.0.0"), is(false));
assertThat(constraint.equals(constraint), is(true)); assertThat(constraint.equals(null), is(false)); assertThat(constraint.equals(new Object()), is(false)); assertThat(constraint.equals(sameConstraint), is(true)); assertThat(constraint.equals(anotherConstraint), is(false)); assertThat(constraint.equals(withOtherNameButSameValues), is(false));
assertThat(insertObservationType.getVersion(),is(sosVersion)); assertThat(insertObservationType.getService(),is(sosService));
assertThat(values.contains(CONTENTS.toString()), is(true)); assertThat(values.contains(OPERATION_METADATA.toString()), is(true));
assertTrue(parameters.contains(SERVICE_PARAMETER)); assertFalse(parameters.contains(SECTION_PARAMETER)); assertFalse(parameters.contains(ACCEPT_VERSIONS_PARAMETER)); assertTrue(parameters.contains(ACCEPT_FORMATS_PARAMETER)); assertTrue(parameters.hasMultipleValues(ACCEPT_FORMATS_PARAMETER));
assertThat(observation.getType().getHref(),is(OGC_OM_2_0_OM_CATEGORY_OBSERVATION)); assertThat(result.getHref(),is(category));
assertThat(parameters.isValid(),is(true));
assertThat(iterator.next(), is("bar"));
assertThat(requestParameters.isEmpty(), is(true));
assertThat(e,is(instanceOf(OXFException.class))); assertThat(e.getCause(),is(instanceOf(XmlException.class))); assertThat(e.getMessage(),is("Error while parsing MANDATORY parameter \'procedure description\'!"));
assertThat(phenomenonTime.getBeginPosition().getStringValue(), is(phenTimePeriodStart.toISO8601Format())); assertThat(phenomenonTime.getEndPosition().getStringValue(), is(phenTimePeriodEnd.toISO8601Format()));
assertThat(insertObservationType.getOfferingArray().length, is(2)); assertThat(insertObservationType.getOfferingArray(),hasItemInArray(offering1)); assertThat(insertObservationType.getOfferingArray(),hasItemInArray(offering2)); assertThat(insertObservationType.getOfferingArray().length, is(1)); assertThat(insertObservationType.getOfferingArray(), hasItemInArray(offering1));
assertThat(insertSensorType.getVersion(),is(sosVersion)); assertThat(insertSensorType.getService(),is(sosService));
assertThat(constraint.hashCode(),is(constraint.hashCode())); assertThat(constraint.hashCode(),is(sameConstraint.hashCode())); assertThat(constraint.hashCode(),is(not(anotherConstraint.hashCode()))); assertThat(sameConstraint.hashCode(),is(not(anotherConstraint.hashCode())));
assertThat(new RequestMethodSeam(null).setOwsConstraints(null),is(false));
assertThat(observation.getType().getHref(),is(OGC_OM_2_0_OM_COUNT_OBSERVATION)); assertThat(result.getBigIntegerValue().intValue(),is(count));
assertThat(parameterArray.length, is(2)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is(p1.getName())); assertThat(xb.getBigIntegerValue().intValueExact(), is(p1.getValue().intValue())); assertThat(parameterArray[1].getNamedValue().getName().getHref(), is(p2.getName())); assertThat(xb2.getUom(), is(p2.getUOM())); assertThat(xb2.getDoubleValue(), is(p2.getValue()));
assertThat(requestParameters.hasMultipleValues("version"), is(false));
assertThat(parameters.getSingleValue(SERVICE.name()), is("SPS"));
assertThat(requestParameters.addParameterValue("version", "1.0.0"), is(true));
assertThat(new LaxValidationCaseSeam().shouldPass(ve), is(false));
assertThat(builderParameters, hasKey(INSERT_OBSERVATION_FOI_ID_PARAMETER)); assertThat(builderParameters, hasEntry(INSERT_OBSERVATION_FOI_ID_PARAMETER,foiId)); assertThat(builderParameters, hasKey(INSERT_OBSERVATION_PROCEDURE_PARAMETER)); assertThat(builderParameters, hasEntry(INSERT_OBSERVATION_PROCEDURE_PARAMETER,sensorId));
assertThat(new LaxValidationCaseSeam().shouldPass(validationError), is(false));
assertThat(iterator.next(), is("42")); assertThat(iterator.next(), is("17"));
assertThat(isShellRemoved, is(FALSE));
assertThat(feature.getHref(), is(newFoiParentFeatureId));
assertThat(parameterArray.length, is(1)); assertThat(parameterArray[0].getNamedValue().getName().getHref(), is("test-name")); assertThat(xb.getStringValue(), is("test-text"));
assertTrue(opts.isDirectWrite());
assertEquals(Sets.newHashSet("fieldName"), solrDocument.keySet()); assertEquals(Lists.newArrayList("A", "B"), solrDocument.get("fieldName").getValues());
assertTrue(extractor instanceof PrefixMatchingQualifierExtractor); assertArrayEquals(Bytes.toBytes("quali"), ((PrefixMatchingQualifierExtractor)extractor).getPrefix());
assertEquals(Sets.newHashSet("fieldA", "fieldB"), merged.keySet()); assertEquals(Lists.newArrayList("valueA1", "valueA2"), merged.getField("fieldA").getValues()); assertEquals(Lists.newArrayList("valueB"), merged.getField("fieldB").getValues());
assertEquals(ImmutableList.of(value), extractor.extract(result));
assertTrue(resultToSolrMapper.containsRequiredData(result));
assertEquals(connectionParams, HBaseIndexerMapper.getIndexConnectionParams(conf));
assertArrayEquals(ROW, get.getRow()); assertEquals(1, get.getFamilyMap().size()); assertTrue(get.getFamilyMap().containsKey(Bytes.toBytes("cf"))); assertEquals(1, qualifiers.size()); assertTrue(qualifiers.contains(Bytes.toBytes("qualifier")));
assertTrue(extracted.isEmpty());
assertArrayEquals(ROW, get.getRow()); assertEquals(1, get.getFamilyMap().size()); assertTrue(get.getFamilyMap().containsKey(Bytes.toBytes("cf"))); assertEquals(1, qualifiers.size()); assertTrue(qualifiers.contains(Bytes.toBytes("qualifier")));
assertEquals(Lists.newArrayList("forty-two"), mapper.map(Bytes.toBytes("forty-two")));
assertArrayEquals(eventRow, put.getRow()); assertEquals(1, put.size()); assertArrayEquals(eventPayload, CellUtil.cloneValue(put.get(PAYLOAD_CF, PAYLOAD_CQ).get(0)));
assertNull(payload);
assertNull(payload);
assertEquals(Lists.newArrayList(new BigDecimal("1.234")), mapper.map(Bytes.toBytes(new BigDecimal("1.234"))));
assertEquals("qualifier", ByteArrayExtractors.getQualifier("colfam:qualifier"));
assertEquals(1, addedDocuments.size()); assertEquals("row1", addedDocuments.get("row1").getFieldValue("id"));
assertFalse(extractor.isApplicable(new KeyValue(ROW, COLFAM, Bytes.toBytes("no match"), Bytes.toBytes("value"))));
assertEquals(Lists.newArrayList(Math.PI), mapper.map(Bytes.toBytes(Math.PI)));
assertEquals( "row-column-qualifier", createFormatter().formatKeyValue( new KeyValue(Bytes.toBytes("row"), Bytes.toBytes("column"), Bytes.toBytes("qualifier"))));
assertFalse(new IndexerConf("literal:myTableName").tableNameIsRegex());
assertFalse(new IndexerConf("myTableName").tableNameIsRegex());
assertEquals(Collections.emptyList(), mapper.map(Bytes.toBytes(42)));
assertFalse(extractor.isApplicable(new KeyValue(ROW, COLUMN_FAMILY, Bytes.toBytes("wrong qualifier"), Bytes.toBytes("value"))));
assertTrue(ByteArrayExtractors.isWildcard("qualifi*"));
assertEquals( Long.valueOf(DateTimeFormat.forPattern("yyyy/MM/dd HH:mm:ss").parseMillis("2013/10/20 00:39:00")), HBaseIndexingOptions.evaluateTimestamp("2013/10/20 00:39:00", "yyyy/MM/dd HH:mm:ss"));
assertEquals("myTableName", new IndexerConf("myTableName").getTable());
assertEquals("subscription_name", SepModelImpl.toInternalSubscriptionName("subscription_name"));
assertArrayEquals(ROW, get.getRow()); assertEquals(1, get.getFamilyMap().size()); assertTrue(get.getFamilyMap().containsKey(Bytes.toBytes("cf"))); assertNull(qualifiers);
assertEquals(Lists.newArrayList(4.2f), mapper.map(Bytes.toBytes(4.2f)));
assertTrue(resultMapper.isRelevantKV(relevantKV)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongFamily)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongQualifier));
assertTrue(extractor instanceof PrefixMatchingCellExtractor); assertArrayEquals(Bytes.toBytes("quali"), ((PrefixMatchingCellExtractor)extractor).getPrefix());
assertTrue("shard should be between 0 (inclusive) and 3 (exclusive)", shard >= 0 && shard < 3);
assertEquals(Lists.newArrayList(true), mapper.map(Bytes.toBytes(true)));
assertTrue(resultMapper.isRelevantKV(relevantKV)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongFamily)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongQualifier));
assertTrue(extractor.isApplicable(new KeyValue(ROW, COLFAM, Bytes.toBytes("AB"), Bytes.toBytes("value"))));
assertTrue(new IndexerConf("regex:my.*Name").tableNameIsRegex());
assertTrue(resultMapper.containsRequiredData(result));
assertEquals("subscription" + SepModelImpl.INTERNAL_HYPHEN_REPLACEMENT + "name", SepModelImpl.toInternalSubscriptionName("subscription-name"));
assertArrayEquals(ROW, get.getRow()); assertEquals(1, get.getFamilyMap().size()); assertTrue(get.getFamilyMap().containsKey(Bytes.toBytes("cf"))); assertNull(qualifiers);
assertEquals( ImmutableMap.of(), HBaseIndexerMapper.getIndexConnectionParams(new Configuration()));
assertFalse(ByteArrayExtractors.isWildcard("qualifier"));
assertEquals("hbaseindexer", metricName.getGroup()); assertEquals("IndexerMetricsUtilTest", metricName.getType()); assertEquals(metric, metricName.getName()); assertEquals(indexerName, metricName.getScope());
assertFalse(resultToSolrMapper.containsRequiredData(result));
assertEquals(2, (int)opts.shards);
assertEquals(Lists.newArrayList("A", "B", "C"), mapper.map(Bytes.toBytes("dummy value")));
assertEquals(1, sharder.getShard(String.valueOf("alpha"))); assertEquals(2, sharder.getShard(String.valueOf("beta"))); assertEquals(1, sharder.getShard(String.valueOf("gamma"))); assertEquals(2, sharder.getShard(String.valueOf("delta")));
assertEquals( Long.valueOf(12345), HBaseIndexingOptions.evaluateTimestamp("12345", null));
assertTrue(extractor.containsTarget(result));
assertEquals(1, addedDocuments.size()); assertEquals("row1", addedDocuments.get("row1").getFieldValue("id"));
assertSame(solrInputDoc, docWritableCaptor.getValue().getSolrInputDocument());
assertEquals(expectedMap, toRecord(solrDocument).getFields());
assertNull(HBaseIndexingOptions.evaluateTimestamp(null, null));
assertTrue(extractor.isApplicable(new KeyValue(ROW, COLUMN_FAMILY, COLUMN_QUALIFIER, Bytes.toBytes("value"))));
assertArrayEquals(PAYLOAD_DATA, payload);
assertFalse(extractor.containsTarget(result));
assertEquals(Lists.newArrayList((short)42), mapper.map(Bytes.toBytes((short)42)));
assertEquals(params, configurable.params);
assertTrue(resultMapper.isRelevantKV(relevantKV)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongFamily)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongQualifier));
assertEquals(1, addedDocuments.size()); assertEquals("row1", addedDocuments.get("row1").getFieldValue("id"));
assertFalse(extractor.isApplicable(new KeyValue(ROW, Bytes.toBytes("wrong family"), COLUMN_QUALIFIER, Bytes.toBytes("value"))));
assertEquals(NUM_EVENTS, eventListener.receivedEvents.size());
assertEquals(Lists.newArrayList(42), mapper.map(Bytes.toBytes(42)));
assertEquals("myTableName", new IndexerConf("literal:myTableName").getTable());
assertTrue(resultMapper.isRelevantKV(relevantKV)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongFamily)); assertFalse(resultMapper.isRelevantKV(notRelevantKV_WrongQualifier));
assertFalse(resultMapper.containsRequiredData(result));
assertEquals(Sets.newHashSet("fieldA", "fieldB"), solrDocument.keySet()); assertEquals(Lists.newArrayList(42), fieldA.getValues()); assertEquals(Lists.newArrayList("A", "B", "C"), fieldB.getValues());
assertNull(payload);
assertEquals("colfam", ByteArrayExtractors.getFamily("colfam:qualifier"));
assertTrue(extractor.isApplicable(new KeyValue(ROW, COLFAM, Bytes.toBytes("ABC"), Bytes.toBytes("value"))));
assertFalse(opts.isDirectWrite()); assertFalse(opts.isDirectWrite()); assertFalse(opts.isDirectWrite());
assertArrayEquals(new byte[] { 1, 2, 3, (byte)255 }, formatter.decodeFromString("010203ff"));
assertEquals("010203ff", formatter.encodeAsString(new byte[] { 1, 2, 3, (byte)255 }));
assertEquals(Lists.newArrayList(Long.MAX_VALUE), mapper.map(Bytes.toBytes(Long.MAX_VALUE)));
assertEquals("my.*Name", new IndexerConf("regex:my.*Name").getTable());
assertFalse(extractor.isApplicable(new KeyValue(ROW, Bytes.toBytes("wrong family"), Bytes.toBytes("AB"), Bytes.toBytes("value"))));
assertEquals(Collections.emptyList(), extractor.extract(result));
assertTrue(extractor instanceof SingleCellExtractor);
assertTrue(35.0 == vec1.dot(3, 1, 2, -2)); assertTrue(-11.0 == vec1.dot(new Vector4(-1, 1, -1, 1)));
assertEquals(new Vector3(3.0, 4.0, 5.0), vec2); assertEquals(new Vector3(3.0, 4.0, 5.0), vec2B); assertEquals(vec2, vec1);
assertTrue(ring1.hashCode() == ring2.hashCode()); assertTrue(ring1.hashCode() != ring3.hashCode());
assertEquals(seg1, seg1); assertFalse(seg1.equals(null)); assertEquals(seg1, seg2); assertNotSame(seg1, seg2); assertFalse(seg1.equals(new LineSegment3(Vector3.ZERO, Vector3.UNIT_X, 2))); assertFalse(seg1.equals(new LineSegment3(Vector3.ZERO, Vector3.UNIT_Z, 2)));
assertEquals(Transform.IDENTITY, trans1.multiply(trans2, null)); assertEquals(Transform.IDENTITY, trans1);
assertTrue(vec1.hashCode() == vec2.hashCode()); assertTrue(vec1.hashCode() != vec3.hashCode());
assertTrue(Math.abs(direction.distance(quat.apply(Vector3.UNIT_Z, null))) <= Quaternion.ALLOWED_DEVIANCE); assertTrue(Math.abs(direction.distance(quat.apply(Vector3.UNIT_Z, null))) <= Quaternion.ALLOWED_DEVIANCE); assertTrue(Math.abs(direction.distance(quat.apply(Vector3.UNIT_Z, null))) <= Quaternion.ALLOWED_DEVIANCE);
assertEquals(ray1, ray2); assertNotSame(ray1, ray2);
assertEquals(new Vector4(1, 2, 3, 4), vec1); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.ONE, vec1); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.ONE, vec3); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.UNIT_W, vec4);
assertTrue(tri1.hashCode() == tri2.hashCode()); assertTrue(tri1.hashCode() != tri3.hashCode());
assertEquals(new ColorRGBA(0.73096776f, 0.831441f, 0.24053639f, 1.0f), clr1); assertEquals(new ColorRGBA(0.6063452f, 0.6374174f, 0.30905056f, 1.0f), clr2);
assertEquals(Vector3.UNIT_Z, vec1.cross(vec2, null)); assertEquals(Vector3.UNIT_Z, vec1.cross(vec2, new Vector3())); assertEquals(Vector3.UNIT_Z, vec1.cross(0, 1, 0, null)); assertEquals(Vector3.UNIT_Z, vec1.cross(0, 1, 0, new Vector3())); assertEquals(Vector3.UNIT_Z, vec1); assertEquals(Vector3.NEG_UNIT_Z, vec2);
assertEquals(new Vector3(0.7454530390475868, 0.0, -0.4186496466746111), store); assertEquals(new Vector3(0.0, 0.30386186434027496, -0.3849731927481824), store);
assertEquals(new Vector4(-1, -2, -3, -4), vec1); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.NEG_ONE, vec1); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.NEG_ONE, vec3); assertEquals(Vector4.ZERO, vec1); assertEquals(Vector4.NEG_UNIT_W, vec4);
assertEquals(trans1, trans2); assertNotSame(trans1, trans2);
assertEquals(Vector3.UNIT_Z, ray.getDirection()); assertEquals(Vector3.ZERO, ray.getOrigin()); assertEquals(Vector3.NEG_UNIT_X, ray.getDirection()); assertEquals(Vector3.ONE, ray.getOrigin()); assertEquals(Vector3.NEG_UNIT_X, ray2.getDirection()); assertEquals(Vector3.ONE, ray2.getOrigin()); assertEquals(Vector3.UNIT_Z, ray.getDirection()); assertEquals(Vector3.ZERO, ray.getOrigin());
assertEquals(quat2, quat.normalizeLocal()); assertTrue(Math.abs(1 - quat.magnitude()) <= MathUtils.EPSILON); assertTrue(Math.abs(1 - quat2.magnitude()) <= MathUtils.EPSILON);
assertTrue(vec1.hashCode() == vec2.hashCode()); assertTrue(vec1.hashCode() != vec3.hashCode());
assertEquals(new Matrix4( 1, 0, 0, 0, 0, Math.cos(angle), -Math.sin(angle), 0, 0, Math.sin(angle), Math.cos(angle), 0, 0, 0, 0, 1), mat4A);
assertEquals(vec1, vec2); assertNotSame(vec1, vec2);
assertEquals(new ColorRGBA(1, 2, 3, 4), clr1); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); assertEquals(ColorRGBA.WHITE, clr1); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); assertEquals(ColorRGBA.WHITE, clr3); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); assertEquals(ColorRGBA.BLACK, clr4);
assertNotNull(preBucket); assertSame(preBucket, preBucket2); assertSame(RenderBucketType.PreBucket, preBucket);
assertEquals(ring1, ring2); assertNotSame(ring1, ring2);
assertEquals(new Vector4(3.0, 4.0, 5.0, 6.0), vec2); assertEquals(new Vector4(3.0, 4.0, 5.0, 6.0), vec2B); assertEquals(vec2, vec1);
assertEquals(new Vector3(0.0, 0.0, 0.0), store); assertEquals(new Vector3(0.39365482330322266, 0.8468815684318542, 0.0), store);
assertTrue(values[i] == dbls1[i]); assertTrue(colmajor[i] == dbls1[i]);
assertEquals(new Vector2(3.0, 4.0), vec2); assertEquals(new Vector2(3.0, 4.0), vec2B); assertEquals(vec2, vec1);
assertNotNull(myBucket); assertSame(myBucket, myBucket2);
assertEquals(new Matrix4( 0.01 * -1, 0.1 * 2, 0.2 * 3, 0.3 * 4, 1.0 * -1, 1.1 * 2, 1.2 * 3, 1.3 * 4, 2.0 * -1, 2.1 * 2, 2.2 * 3, 2.3 * 4, 3.0 * -1, 3.1 * 2, 3.2 * 3, 3.3 * 4), result); assertEquals(mat4A, result);
assertEquals(rect1, rect1); assertFalse(rect1.equals(null)); assertFalse(rect1.equals(rect2)); assertFalse(rect1.equals(rect3)); assertFalse(rect1.equals(rect4)); assertTrue(rect1.equals(rect5));
assertTrue(rect1.hashCode() == rect2.hashCode()); assertTrue(rect1.hashCode() != rect3.hashCode());
assertEquals(line1, line2); assertNotSame(line1, line2);
assertTrue("still alive", testThread.isAlive()); assertTrue("still alive", testThread.isAlive());
assertEquals(mat1, mat2); assertNotSame(mat1, mat2);
assertTrue(MathUtils.HALF_PI == vec1.smallestAngleBetween(new Vector3(0, -1, 0)));
assertEquals(mat1, mat2); assertNotSame(mat1, mat2);
assertEquals(Vector3.ZERO, new Quaternion().apply(new Vector3(0, 0, 0), null));
assertEquals(new Vector3(0.0, 0.0, 0.23096778737665702), store); assertEquals(new Vector3(0.0, 0.0, -0.25946358432851413), store);
assertTrue(clr1.hashCode() == clr2.hashCode()); assertTrue(clr1.hashCode() != clr3.hashCode());
assertNotNull(array); assertTrue(array.length == 2); assertTrue(array[0] == Math.PI); assertTrue(array[1] == Double.MAX_VALUE); assertNotNull(array2); assertTrue(array2.length == 2); assertTrue(array2[0] == Math.PI); assertTrue(array2[1] == Double.MAX_VALUE);
assertEquals(new Vector3(1, 2, 3), vec1); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.ONE, vec1); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.ONE, vec3); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.UNIT_X, vec4);
assertEquals(trans1, trans2); assertNotSame(trans1, trans2);
assertEquals(new Matrix3( 0.01 * -1, 0.1 * 2, 0.2 * 3, 1.0 * -1, 1.1 * 2, 1.2 * 3, 2.0 * -1, 2.1 * 2, 2.2 * 3), result); assertEquals(mat3A, result);
assertNotNull(farray); assertNotNull(farray2); assertTrue(farray.length == 4); assertTrue(farray[0] == .2f); assertTrue(farray[1] == .2f); assertTrue(farray[2] == .2f); assertTrue(farray[3] == 1f);
assertTrue(quat1.hashCode() == quat2.hashCode()); assertTrue(quat1.hashCode() != quat3.hashCode());
assertTrue(determinant == mat3A.determinant()); assertTrue(determinant == mat3A.determinant());
assertTrue(mat1.hashCode() == mat2.hashCode()); assertTrue(mat1.hashCode() != mat3.hashCode());
assertEquals(vec1, vec2); assertNotSame(vec1, vec2);
assertTrue(23.0 == vec1.dot(3, 1)); assertTrue(-5.0 == vec1.dot(new Vector2(-1, 1)));
assertTrue(vec1.length() == Math.sqrt(15)); assertEquals(new Vector4(2 * invLength, 1 * invLength, 3 * invLength, -1 * invLength), vec2); assertEquals(new Vector4(2 * invLength, 1 * invLength, 3 * invLength, -1 * invLength), vec1); assertEquals(vec1, vec2);
assertEquals(new Vector3(1, 3, 5), trans.getTranslation()); assertEquals(Vector3.ZERO, trans.getTranslation()); assertEquals(new Vector3(1, 3, 5), trans.getTranslation()); assertEquals(Vector3.ZERO, trans.getTranslation());
assertTrue(vec1.length() == Math.sqrt(5)); assertEquals(new Vector2(2 * invLength, 1 * invLength), vec2); assertEquals(new Vector2(2 * invLength, 1 * invLength), vec1); assertEquals(vec1, vec2);
assertEquals(Matrix3.IDENTITY, mat3A.multiply(inverted, null)); assertEquals(mat3A, inverted.invertLocal());
assertEquals(rect1, rect2); assertNotSame(rect1, rect2);
assertEquals(new Matrix3( 1, 0, 0, 0, Math.cos(angle), -Math.sin(angle), 0, Math.sin(angle), Math.cos(angle)), mat3A);
assertEquals(line1, line1); assertFalse(line1.equals(null)); assertEquals(line1, line2); assertNotSame(line1, line2); assertFalse(line1.equals(new Line3(Vector3.ZERO, Vector3.UNIT_X)));
assertTrue(Line3.isValid(line1)); assertFalse(Line3.isValid(line2)); assertFalse(Line3.isValid(line3)); assertTrue(Line3.isValid(line2)); assertFalse(Line3.isValid(null));
assertEquals(plane1, plane1); assertFalse(plane1.equals(null)); assertEquals(plane1, plane2); assertNotSame(plane1, plane2); assertFalse(plane1.equals(new Plane(Vector3.UNIT_X, 0)));
assertEquals(direction, mat3.applyPost(Vector3.UNIT_Z, null)); assertEquals(direction, mat3.applyPost(Vector3.UNIT_Z, null)); assertEquals(direction, mat3.applyPost(Vector3.UNIT_Z, new Vector3()));
assertEquals(new Vector4(-3, -2, 1, -1), vec2); assertEquals(vec2, vec1);
assertTrue(35.0 == quat.dot(3, 1, 2, -2)); assertTrue(-11.0 == quat.dot(new Quaternion(-1, 1, -1, 1)));
assertTrue(25.0 == ray1.distanceSquared(new Vector3(0, 5, 3), null)); assertTrue(9.0 == ray1.distanceSquared(new Vector3(0, 3, 3), store)); assertEquals(new Vector3(0, 0, 3), store); assertTrue(18.0 == ray1.distanceSquared(new Vector3(0, 3, -3), store)); assertEquals(new Vector3(0, 0, 0), store);
assertEquals(quat1, quat2); assertNotSame(quat1, quat2);
assertTrue(plane1.hashCode() == plane2.hashCode()); assertTrue(plane1.hashCode() != plane3.hashCode());
assertTrue(vec1.length() == Math.sqrt(14)); assertEquals(new Vector3(2 * invLength, 1 * invLength, 3 * invLength), vec2); assertEquals(new Vector3(2 * invLength, 1 * invLength, 3 * invLength), vec1); assertEquals(vec1, vec2);
assertTrue(33.0 == vec1.dot(3, 1, 2)); assertTrue(-10.0 == vec1.dot(new Vector3(-1, 1, -1)));
assertEquals(rect1, rect2); assertNotSame(rect1, rect2);
assertEquals(tri1, tri2); assertNotSame(tri1, tri2);
assertTrue(seg1.hashCode() == seg2.hashCode()); assertTrue(seg1.hashCode() != seg3.hashCode());
assertEquals(new Vector2(-1, -2), vec1); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.NEG_ONE, vec1); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.NEG_ONE, vec3); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.NEG_UNIT_X, vec4);
assertEquals(new Matrix3( 0.01, 1.0, 2.0, 0.1, 1.1, 2.1, 0.2, 1.2, 2.2), result); assertEquals(new Matrix3( 0.01, 0.1, 0.2, 1.0, 1.1, 1.2, 2.0, 2.1, 2.2), result.transposeLocal()); assertEquals(mat3A, result2);
assertEquals(new Vector2(-2, -1), vec2); assertEquals(vec2, vec1);
assertTrue(4.0 == vec1.distance(4, 0, 0, 0)); assertTrue(3.0 == vec1.distance(0, 3, 0, 0)); assertTrue(2.0 == vec1.distance(0, 0, 2, 0)); assertTrue(1.0 == vec1.distance(0, 0, 0, 1)); assertTrue(Math.sqrt(4) == vec1.distance(vec2));
assertTrue(3.0 == vec1.distance(0, 3)); assertTrue(4.0 == vec1.distance(4, 0)); assertTrue(Math.sqrt(2) == vec1.distance(vec2));
assertEquals(seg1, seg2); assertNotSame(seg1, seg2);
assertEquals(vec1, vec2); assertNotSame(vec1, vec2);
assertTrue(vec1.hashCode() == vec2.hashCode()); assertTrue(vec1.hashCode() != vec3.hashCode());
assertTrue(4.0 == vec1.distance(4, 0, 0)); assertTrue(3.0 == vec1.distance(0, 3, 0)); assertTrue(2.0 == vec1.distance(0, 0, 2)); assertTrue(Math.sqrt(3) == vec1.distance(vec2));
assertEquals(new Vector3(-3, -2, 1), vec2); assertEquals(vec2, vec1);
assertTrue(5 == intersection.getX()); assertTrue(5 == intersection.getY()); assertTrue(5 == intersection.getWidth()); assertTrue(5 == intersection.getHeight()); assertNotNull(rect1.intersect(rect2, null)); assertTrue(5 == intersection.getX()); assertTrue(5 == intersection.getY()); assertTrue(5 == intersection.getWidth()); assertTrue(5 == intersection.getHeight()); assertNotNull(Rectangle2.intersect(rect1, rect2, null));
assertEquals(testValue, mat3A.adjugate(null)); assertEquals(testValue, mat3A.adjugateLocal());
assertEquals(new Vector3(-1, -2, -3), vec1); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.NEG_ONE, vec1); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.NEG_ONE, vec3); assertEquals(Vector3.ZERO, vec1); assertEquals(Vector3.NEG_UNIT_X, vec4);
assertEquals(plane1, plane2); assertNotSame(plane1, plane2);
assertTrue(values[i] == dbls1[i]); assertTrue(colmajor[i] == dbls1[i]);
assertTrue(rect1.hashCode() == rect2.hashCode()); assertTrue(rect1.hashCode() != rect3.hashCode());
assertEquals(new Vector2(1, 2), vec1); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.ONE, vec1); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.ONE, vec3); assertEquals(Vector2.ZERO, vec1); assertEquals(Vector2.UNIT_X, vec4);
assertEquals(clr1, clr2); assertNotSame(clr1, clr2);
assertEquals("Returns list of proper length", 3, steps.size()); assertTrue("Contains expected step", steps.contains(stepTwo)); assertEquals("Adding items to the returned list doesn\'t affect task\'s internal list", 3, steps.size()); assertFalse("Does not contain illegally added step", steps.contains(stepOneDupe));
assertEquals("Finds step if it is in the task", stepOne, foundStep); assertNull("Returns null if no step in the task has that identifier", foundStep);
assertEquals("Current is accurate for first step (0)", 0, progress.getCurrent()); assertEquals("Current is accurate for second step (1)", 1, progress.getCurrent()); assertEquals("Total is accurate for task", 3, progress.getTotal());
assertEquals("Correctly returns the count of the choices", 4, format.getChoices().length); assertEquals("Correctly returns the count of the choices", 3, format.getChoices().length);
assertEquals("Returns the previous sequential step in the task", stepTwo, previousStep); assertNull("Returns null if passed in step is the first", previousStep);
assertEquals("Gets title from context using step id", "title", title); assertEquals("Gets empty string when no title id on step", "", noTitle);
assertEquals("Maintains the correct order of the choices", c1, format.getChoices()[0]); assertEquals("Maintains the correct order of the choices", c3, format.getChoices()[2]);
assertEquals("Returns the next sequential step in the task", stepTwo, nextStep); assertNull("Returns null if passed in step is the last", nextStep);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("JumpWithNull.java")); assertEquals(6, result.getLine()); assertEquals(22, result.getColumn());
assertTrue(file.exists()); assertEquals(9, units.size());
assertTrue(file.exists()); assertEquals("analyze", unit1.getName());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("OUTPUT", declaration.scopeInfo); assertEquals("meghanada.server.emacs.EmacsServer$OUTPUT", declaration.signature);
assertEquals(2, lv.getCandidates().size());
assertTrue(file.exists()); assertEquals(13, units.size()); assertEquals("CompilationUnitTree", returnType);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("TreeAnalyzer.java")); assertEquals(1051, result.getLine()); assertEquals(23, result.getColumn());
assertTrue(file.exists());
assertTrue(file.exists());
assertEquals("ThreadLocal", name);
assertEquals("\\\\\\" test ", StringUtils.escapeJava("\\" test ")); assertEquals("\\\\\\\'test\\\\\\\'", StringUtils.escapeJava("\\\'test\\\'"));
assertEquals("java.util.ZipEntry", s);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("submit.submit", declaration.scopeInfo); assertEquals("public Future<?> submit(Runnable arg0)", declaration.signature);
assertTrue(f.exists()); assertNotNull(result); assertEquals(31, result.size());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("getOutputFormatter", declaration.scopeInfo); assertEquals("private OutputFormatter getOutputFormatter()", declaration.signature); assertEquals(2, declaration.argumentIndex);
assertEquals("Map.", name);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("ArrayOverload.java")); assertEquals(7, result.getLine()); assertEquals(22, result.getColumn());
assertEquals("java.lang.String", lv.getReturnFQCN()); assertEquals(4, lv.getCandidates().size());
assertEquals("Map.Entry", name);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertEquals(44, result.size());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("BufferedReader", declaration.scopeInfo);
assertTrue(f.exists()); assertNotNull(result); assertEquals(12, result.size());
assertEquals( "java" + File.separator + "util" + File.separator + "function" + File.separator + "Function", s);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("LocationSearcher.java")); assertEquals(883, result.getLine()); assertEquals(30, result.getColumn());
assertEquals("Map.Entry", name);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("Config.java")); assertEquals(358, result.getLine()); assertEquals(23, result.getColumn());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains(".java")); assertEquals(120, result.getLine()); assertEquals(31, result.getColumn());
assertTrue(file.exists()); assertEquals(59, units.size());
assertEquals("java.utils.Map", s);
assertTrue(f.exists()); assertNotNull(l1); assertEquals(8, l1.getLine()); assertEquals(15, l1.getColumn());
assertTrue(f.exists()); assertNotNull(result); assertEquals(31, result.size());
assertEquals("java.util.Map", s);
assertTrue(f.exists()); assertNotNull(result); assertEquals(122, result.getLine()); assertEquals(52, result.getColumn());
assertEquals("? extends ZipEntry", typeParams.get(0));
assertEquals("List<java.lang.String>", s);
assertEquals( "java.util.function.Function<? super java.lang.Integer, ? extends Stream<? extends R>>", s);
assertEquals(false, b);
assertTrue(file.exists()); assertEquals(1, units.size());
assertEquals("/f/b/Test.java", s);
assertEquals("T", typeParams.get(0));
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("InetAddress.getByName", declaration.scopeInfo);
assertTrue(file.exists()); assertTrue(map.isPresent());
assertTrue(f.exists()); assertNotNull(l1); assertEquals(7, l1.getLine()); assertEquals(8, l1.getColumn());
assertTrue(file.exists()); assertEquals(15, units.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(7, result.size()); assertEquals(45, reference.getLine());
assertEquals("java.util.Map$Entry", s);
assertTrue(file.exists()); assertEquals("equals", unit.getName());
assertTrue(file.exists());
assertEquals(true, b);
assertEquals("ZipEntry", s);
assertEquals( "java.util.function.Function<? super java.lang.Integer, ? extends Stream<? extends java.lang.String>>", s);
assertNotNull(version); assertTrue(version.startsWith(Main.VERSION));
assertTrue(file.exists());
assertEquals("capture of ?", s);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertEquals(39, result.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(51, result.getLine()); assertEquals(19, result.getColumn()); assertEquals(53, result.getLine()); assertEquals(19, result.getColumn());
assertTrue(file.exists()); assertTrue(res.isPresent()); assertEquals(3, methods.size());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains(".java")); assertEquals(21, result.getLine()); assertEquals(14, result.getColumn());
assertTrue(file.exists()); assertTrue(map.isPresent());
assertEquals("java.util.Map$Entry", innerClassName.get());
assertEquals("Map.Entry", name);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("0", declaration.scopeInfo); assertEquals("java.lang.Integer", declaration.signature); assertEquals(1, declaration.argumentIndex);
assertEquals(6, lv.getCandidates().size());
assertTrue(file.exists()); assertEquals(3, units.size());
assertTrue(file.exists()); assertEquals(18, units.size());
assertTrue(file.exists()); assertTrue(scope.isPresent()); assertEquals("meghanada.analyze.JavaAnalyzer$AnalyzedEvent", ts.getFQCN()); assertTrue(scope.isPresent()); assertEquals("meghanada.analyze.JavaAnalyzer$JavaSourceFromString", ts.getFQCN());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("ServerSocket", declaration.scopeInfo); assertEquals("java.net.ServerSocket", declaration.signature);
assertEquals(true, b);
assertTrue(file.exists()); assertNotNull(declaration);
assertEquals(4, lv.getCandidates().size());
assertTrue(file.exists());
assertEquals(false, b);
assertTrue(f.exists()); assertNotNull(result); assertEquals(67, result.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(4, result.size());
assertTrue(file.exists()); assertEquals(40, units.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(3, result.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(5, result.getLine()); assertEquals(18, result.getColumn());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("ClassAnalyzeVisitor.java")); assertEquals(21, result.getLine()); assertEquals(7, result.getColumn());
assertEquals(4, lv.getCandidates().size());
assertEquals("Map", name);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains(".java")); assertEquals(123, result.getLine()); assertEquals(20, result.getColumn()); assertEquals(111, result.getLine()); assertEquals(20, result.getColumn());
assertFalse(b); assertFalse(b); assertTrue(b); assertTrue(b);
assertTrue(b); assertFalse(b); assertTrue(b);
assertTrue(file.exists());
assertTrue(file.exists()); assertEquals(39, logMethod.size()); assertEquals(41, logMethod.size());
assertTrue(file.exists()); assertEquals(17, units.size()); assertEquals(18, units.size());
assertTrue(f.exists()); assertNotNull(result); assertEquals(1184, result.getLine()); assertEquals(44, result.getColumn()); assertEquals(1227, result.getLine()); assertEquals(44, result.getColumn());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains(".java")); assertEquals(160, result.getLine()); assertEquals(3, result.getColumn());
assertTrue(9055 <= cachedASMReflector.getGlobalClassIndex().size());
assertTrue(file.exists());
assertEquals("java.util.List<? extends String>", typeParams.get(0));
assertTrue(f.exists()); assertNotNull(result); assertEquals(111, result.getLine()); assertEquals(29, result.getColumn());
assertEquals("Map", name);
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains(".java")); assertEquals(238, result.getLine()); assertEquals(31, result.getColumn());
assertEquals("Function<List<List<File>>>", s);
assertTrue(f.exists()); assertNotNull(l1); assertEquals(9, l1.getLine()); assertEquals(5, l1.getColumn()); assertNotNull(l2); assertEquals(10, l2.getLine()); assertEquals(5, l2.getColumn());
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertEquals(82, result.getLine()); assertEquals(19, result.getColumn());
assertTrue(file.exists()); assertEquals(2329, units.size());
assertTrue(file.exists());
assertTrue(file.exists());
assertTrue(file.exists()); assertEquals(1, units.size());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("Source.java")); assertEquals(508, result.getLine()); assertEquals(36, result.getColumn());
assertEquals("? extends List<String>", typeParams.get(0)); assertEquals("? extends Long", typeParams.get(1));
assertEquals("java.util.Map", s);
assertEquals("ZipEntry", s);
assertEquals("T", typeParams.get(0)); assertEquals("java.util.stream.Stream<T>", typeParams.get(1));
assertTrue(file.exists()); assertEquals(1, staticLog.size()); assertEquals(1, pos.size());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("address", declaration.scopeInfo); assertEquals("java.net.InetAddress", declaration.signature); assertEquals(2, declaration.argumentIndex);
assertTrue(file.exists()); assertEquals(11, units.size());
assertTrue(file.exists()); assertFalse(res.isPresent());
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertEquals(1, result.size()); assertEquals(838, reference.getLine());
assertNotNull(asmReflector);
assertEquals("? extends String", typeParams.get(0)); assertEquals("? extends Long", typeParams.get(1));
assertTrue(file.exists()); assertEquals(14, units.size());
assertEquals("java.util.Map", s);
assertEquals("Function<List, Map>", s);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("Project.java")); assertEquals(629, result.getLine()); assertEquals(23, result.getColumn());
assertTrue(file.exists());
assertTrue(file.exists()); assertEquals("codePointAt", unit1.getName()); assertEquals("codePointBefore", unit2.getName()); assertEquals("codePointCount", unit3.getName()); assertEquals("compareTo", unit4.getName());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("handler", declaration.scopeInfo); assertEquals("meghanada.server.CommandHandler", declaration.signature); assertEquals(-1, declaration.argumentIndex);
assertEquals("java.util.stream.Stream<java.util.List<java.lang.String>>", typeParams.get(0));
assertEquals("java.util.Map$Entry", s);
assertTrue(file.exists());
assertEquals(true, b);
assertEquals(true, b);
assertTrue(f.exists()); assertEquals(6, typeInfo.getHierarchy().size());
assertEquals("java.util.Map$Entry", innerClassName.get());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.isPresent()); assertEquals("OUTPUT.SEXP", declaration.scopeInfo); assertEquals("meghanada.server.emacs.EmacsServer$OUTPUT", declaration.signature);
assertTrue(f.exists()); assertNotNull(result); assertEquals(4, result.size());
assertEquals(5, lv.getCandidates().size());
assertTrue(file.exists()); assertTrue(res.isPresent()); assertEquals(1, map.get("class").size());
assertTrue(file.exists());
assertEquals( "java.util.function.Function<? super String, ? extends java.util.stream.Stream<String>>", s);
assertFalse(b);
assertTrue(file.exists());
assertTrue(f.exists()); assertNotNull(result); assertTrue(result.getPath().contains("Source.java")); assertEquals(59, result.getLine()); assertEquals(14, result.getColumn());
assertEquals( "b5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df78", StringUtils.getChecksum("ABC"));
assertTrue(file.exists()); assertEquals("name", unit1.getName()); assertEquals("toString", unit2.getName());
assertTrue(file.exists()); assertEquals(371, logMethod.size());
assertTrue(f.exists()); assertEquals(4, typeInfo.getHierarchy().size()); assertEquals(6, typeInfo.getInterfaces().size());
assertEquals((byte) s.charAt(i), is.readByte());
assertEquals(s.charAt(i), is.readChar());
assertEquals(3, klasses.length); assertEquals(A.class, klasses[0]); assertEquals(B.class, klasses[1]); assertEquals(C.class, klasses[2]); assertEquals(1, klasses.length); assertEquals(B.class, klasses[0]);
assertFalse(gotPredicate); assertEquals(0, progressCalled.get()); assertFalse(gotPredicate); assertEquals(1, progressCalled.get());
assertEquals(3, res.size()); assertEquals(42, res.get(0)); assertEquals(42, res.get(1)); assertEquals(42, res.get(2));
assertEquals(3, res.size()); assertEquals(testObject, res.get(0)); assertEquals(testObject, res.get(1)); assertEquals(testObject, res.get(2));
assertEquals(3, res.size()); assertEquals(1, res.get(0)); assertEquals(2, res.get(1)); assertEquals(3, res.get(2));
assertEquals("org/apache/giraph/utils", ReflectionUtils.getPackagePath(TestReflectionUtils.class)); assertEquals("org/apache/giraph/utils", ReflectionUtils.getPackagePath(getClass())); assertEquals("org/apache/giraph/utils", ReflectionUtils.getPackagePath(this));
assertEquals(2, res.size()); assertEquals(1, res.get(0)); assertEquals(2, res.get(1)); assertTrue(res.get(0) == res.get(1)); assertTrue(res.get(2) == res.get(3));
assertEquals(0, edges.size());
assertEquals(0, edges.size());
assertEquals(s, writeAndReadUTF(s));
assertEquals(2, klasses.length); assertEquals(A.class, klasses[0]); assertEquals(B.class, klasses[1]); assertEquals(2, conf.getClasses("foo").length); assertEquals(2, klasses2.length); assertEquals(A.class, klasses2[0]); assertEquals(B.class, klasses2[1]);
assertEquals(pairCheck, vertex.getValue().toString());
assertEquals("Default value for base path should be empty", "", ZooKeeperManager.getBasePath(conf)); assertEquals("Base path should reflect value of " + GiraphConstants.BASE_ZNODE_KEY, "/howdy", ZooKeeperManager.getBasePath(conf)); assertTrue(iae.getMessage().contains(GiraphConstants.BASE_ZNODE_KEY));
assertTrue(gotPredicate); assertTrue(gotPredicate);
assertEquals(1, behaviors.size()); assertTrue(behaviors.get(0) instanceof BootstrapDatePickerBehaviour); assertEquals(list, ((BootstrapDatePickerBehaviour)behaviors.get(0)).getSpecialDates());
assertEquals(0, validatable.getErrors().size());
assertEquals(p.label, p.getMessage().getReporter()); assertEquals(msg, p.getMessage().getMessage()); assertTrue(p.getMessage().isRendered());
assertEquals(1, validatable.getErrors().size());
assertEquals(0, validatable.getErrors().size());
assertEquals(0, validatable.getErrors().size());
assertEquals(0, validatable.getErrors().size());
assertEquals(1, validatable.getErrors().size());
assertEquals(1, validatable.getErrors().size()); assertEquals("NotNull", getError(validatable).getKeys().get(0));
assertEquals(0, (int) pageBox.value);
assertEquals(0, validatable.getErrors().size());
assertEquals(1, (int) pageBox.value);
assertEquals(1, validatable.getErrors().size()); assertEquals("Size", getError(validatable).getKeys().get(0)); assertEquals(2, getError(validatable).getVariables().size()); assertEquals(2, getError(validatable).getVariables().get("min")); assertEquals(4, getError(validatable).getVariables().get("max"));
assertEquals(0, validatable.getErrors().size());
assertEquals(picker.getInnerField(), picker.getDateTextField());
assertEquals(1, (int) pageBox.value);
assertTrue(httpService.getHeaders().get(headerName).equals(headerValue));
assertNotNull(policyContract.getBlockedAccounts()); assertThat(policyContract.getBlockedAccounts().size(), is(0));
assertFalse(s.isMultiSigScript());
assertThat(Numeric.toHexStringWithPrefix(BigInteger.TEN), is("0xa"));
assertThat(new NeoToken(neow).getName(), is("NEO"));
assertThat(a.getEncryptedPrivateKey(), is(expectedNep2Encrypted));
assertTrue(Strings.isEmpty(null)); assertTrue(Strings.isEmpty("")); assertFalse(Strings.isEmpty("hello world"));
assertThat(this.readResultInt, is(BigInteger.valueOf(-2_147_483_648)));
assertThat(sh1.compareTo(sh1), is(0)); assertThat(sh1.compareTo(sh2), is(-1)); assertThat(sh1.compareTo(sh3), is(-1)); assertThat(sh2.compareTo(sh1), is(1)); assertThat(sh2.compareTo(sh3), is(1)); assertThat(sh3.compareTo(sh1), is(1)); assertThat(sh3.compareTo(sh2), is(-1));
assertArrayEquals(Numeric.hexStringToByteArray(expected), invScript.getScript());
assertTrue(WalletUtils.getDefaultKeyDirectory("Mac OS X") .endsWith(String.format("%sLibrary%sneow3j", File.separator, File.separator))); assertTrue(WalletUtils.getDefaultKeyDirectory("Windows") .endsWith(String.format("%sneow3j", File.separator))); assertTrue(WalletUtils.getDefaultKeyDirectory("Linux") .endsWith(String.format("%s.neow3j", File.separator)));
assertThat(b.getScript(), is(expectedScript));
assertThat(this.readResultInt, is(BigInteger.valueOf(-1)));
assertThat(gasToken.getTotalSupply(), is(new BigInteger("3000000000000000")));
assertThat(b.getScript(), is(expectedScript));
assertThat(reverseArray(new byte[]{0x01, 0x02, 0x03}), is(new byte[]{0x03, 0x02, 0x01})); assertThat(reverseArray(new byte[]{0x01, 0x02}), is(new byte[]{0x02, 0x01})); assertThat(reverseArray(new byte[]{0x01}), is(new byte[]{0x01})); assertThat(reverseArray(new byte[]{}), is(new byte[]{}));
assertThat(Numeric.cleanHexPrefix(""), is("")); assertThat(Numeric.cleanHexPrefix("0123456789abcdef"), is("0123456789abcdef")); assertThat(Numeric.cleanHexPrefix("0x"), is("")); assertThat(Numeric.cleanHexPrefix("0x0123456789abcdef"), is("0123456789abcdef"));
assertArrayEquals(expected, actual);
assertThat(SecureRandomUtils.generateRandomBytes(0), is(new byte[]{})); assertThat(SecureRandomUtils.generateRandomBytes(10).length, is(10));
assertThat(this.readResultInt, is(BigInteger.valueOf(-32_768)));
assertEquals(i, "000000003b9aca00"); assertEquals(i, "00000000000186a0"); assertEquals(i, "0000000000000001"); assertEquals(i, "0000000000000000");
assertTrue(sendMany.hasError());
assertThat(nef.getSize(), is(110));
assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getScript(), is(expectedScript)); assertThat(tx.getWitnesses().get(0).getVerificationScript().getScript(), is(account1.getVerificationScript().getScript()));
assertThat(policyContract.getMaxBlockSystemFee(), is(new BigInteger("900000000000")));
assertThat(contractParameter.equals("o"), is(false)); assertThat(contractParameter.equals(this.contractParameter), is(true));
assertArrayEquals(expected, actual);
assertThat(b.getScript(), is(expectedScript));
assertThat(results, equalTo(neoGetBlocks)); assertTrue(disposable.isDisposed()); assertThat(transactionLatch.getCount(), is(0L));
assertThat(contractParameter.getValue(), is("value"));
assertThat(readBytes, is(bytesToBeWritten));
assertThat(result, is(expected));
assertArrayEquals(expected, script.toArray());
assertThat(this.readResultInt, is(BigInteger.valueOf(4_294_967_295L)));
assertThat(a, notNullValue()); assertThat(a.getAddress(), notNullValue()); assertThat(a.getVerificationScript(), notNullValue()); assertThat(a.getECKeyPair(), notNullValue()); assertThat(a.getEncryptedPrivateKey(), is(nullValue())); assertThat(a.getLabel(), is("example")); assertThat(a.getECKeyPair(), notNullValue()); assertTrue(a.isLocked());
assertThat(new NeoToken(neow).getSymbol(), is("neo"));
assertThat(gasToken.getDecimals(), is(8));
assertThat(b.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(b.getSigners().get(0).getScopes(), contains(WitnessScope.GLOBAL)); assertThat(b.getScript(), is(expectedScript));
assertArrayEquals( Numeric.hexStringToByteArray(expected), witness.getInvocationScript().getScript()); assertArrayEquals( Numeric.hexStringToByteArray(expected), witness.getVerificationScript().getScript());
assertThat(Numeric.hexStringToByteArray(""), is(new byte[]{})); assertThat(Numeric.hexStringToByteArray("0"), is(new byte[]{0})); assertThat(Numeric.hexStringToByteArray("1"), is(new byte[]{0x1})); assertThat(Numeric.hexStringToByteArray(HEX_RANGE_STRING), is(HEX_RANGE_ARRAY)); assertThat(Numeric.hexStringToByteArray("0x123"), is(new byte[]{0x1, 0x23}));
assertThat( Async.run(() -> "anything").get(), is("anything") );
assertThat(Numeric.prependHexPrefix(""), is("0x")); assertThat(Numeric.prependHexPrefix("0x0123456789abcdef"), is("0x0123456789abcdef")); assertThat(Numeric.prependHexPrefix("0x"), is("0x")); assertThat(Numeric.prependHexPrefix("0123456789abcdef"), is("0x0123456789abcdef"));
assertThat(Numeric.toHexStringNoPrefix(result), is(expected));
assertArrayEquals( Numeric.hexStringToByteArray("35b20010db73bf86371075ddfba4e6596f1ff35d"), witness.getScriptHash().toArray() );
assertThat(simpleClassName, is(""));
assertThat(xorResult, is(new byte[]{0x03, 0x01}));
assertThat(neoToken.getSymbol(), is("neo"));
assertThat(result, is("Test"));
assertThat(pair.getPrivateKey().getBytes(), is(Numeric.hexStringToByteArray(expected)));
assertThat(outputFileName1, is("Test.nef")); assertThat(outputFileName2, is(Neow3jPluginUtils.DEFAULT_FILENAME)); assertThat(outputFileName3, is(Neow3jPluginUtils.DEFAULT_FILENAME)); assertThat(outputFileName4, is(Neow3jPluginUtils.DEFAULT_FILENAME));
assertThat(gasToken.getBalanceOf(Wallet.withAccounts(account1, account2)), is(new BigInteger("600000000")));
assertThat(new NeoToken(neow).getDecimals(), is(0));
assertThat(uri, is(URI.create(BEGIN_TX_ASSET_AMOUNT)));
assertThat(address, is(expectedAddress));
assertFalse(a.isDefault()); assertTrue(a.isDefault());
assertThat(Numeric.toHexStringNoPrefixZeroPadded(new BigInteger("1e", 16)), is("1e"));
assertNotEquals(0, result);
assertThat(fqn, is("io.neow3j.blah.Test"));
assertFalse(Numeric.containsHexPrefix(null)); assertFalse(Numeric.containsHexPrefix(""));
assertThat(pair.getPrivateKey().getBytes(), is(Numeric.hexStringToByteArray(expected)));
assertThat(contractParameter.getParamType(), Is.is(ContractParameterType.STRING));
assertThat(result, is(expected));
assertThat(this.readResultInt, is(BigInteger.valueOf(-9_223_372_036_854_775_808L)));
assertThat(neoToken.getName(), is("NEO"));
assertThat(sh.toString(), is("23ba2703c53263e8d6e522dc32203339dcd8eee9"));
assertThat(Numeric.toHexStringNoPrefix(privateKeyFromWIF), is(privateKey));
assertThat(s.getSize(), is(1 + 64));
assertThat(Strings.lowercaseFirstLetter(""), is("")); assertThat(Strings.lowercaseFirstLetter("A"), is("a")); assertThat(Strings.lowercaseFirstLetter("AA"), is("aA")); assertThat(Strings.lowercaseFirstLetter("a"), is("a")); assertThat(Strings.lowercaseFirstLetter("aB"), is("aB"));
assertThat(NEP2.encrypt(pw, keyPair), is(expectedNep2Encrypted));
assertFalse(SecureRandomUtils.isAndroidRuntime());
assertThat(simpleClassName, is("Test"));
assertThat(verificationScript.getScript(), is(Numeric.hexStringToByteArray(script)));
assertThat(arrayOfBytesPrimitive.length, is(0));
assertArrayEquals(expected, script);
assertThat(signatureData, is(expected));
assertTrue(Numeric.isValidHexString("0x9ef022")); assertTrue(Numeric.isValidHexString("9ef022")); assertTrue(Numeric.isValidHexString("0123456789abcdef")); assertTrue(Numeric.isValidHexString("")); assertFalse(Numeric.isValidHexString("9ef02")); assertFalse(Numeric.isValidHexString("1g")); assertFalse(Numeric.isValidHexString("0x1g")); assertFalse(Numeric.isValidHexString("0x123456789abcdeg"));
assertThat(NEP2.encrypt(pw, keyPair, nonDefaultScryptParams), is(expected));
assertThat(i.getResult().getScript(), is(scriptInResponse));
assertThat(this.readResultInt, is(val));
assertThat(sh.toAddress(), is(expectedAddress));
assertThat(new GasToken(neow).getSymbol(), is("gas"));
assertTrue(s.isSingleSigScript());
assertThat(Numeric.toHexString(new byte[]{}), is("0x")); assertThat(Numeric.toHexString(new byte[]{0x1}), is("0x01")); assertThat(Numeric.toHexString(HEX_RANGE_ARRAY), is(HEX_RANGE_STRING));
assertThat(this.readResultInt, is(BigInteger.valueOf(255)));
assertArrayEquals(expected, actual);
assertThat(result, contains(expKey));
assertThat(tx.toArrayWithoutWitnesses(), is(expectedUnsignedBytes));
assertTrue(wallet.holdsAccount(account.getScriptHash())); assertFalse(wallet.holdsAccount(account.getScriptHash()));
assertThat(this.readResultInt, is(BigInteger.valueOf(0)));
assertThat(AddressUtils.scriptHashToAddress(scriptHash), is(address));
assertThat(c1, equalTo(c2)); assertThat(c1, equalTo(c2));
assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getScript(), is(expectedScript)); assertThat(tx.getWitnesses().get(0).getVerificationScript().getScript(), is(account1.getVerificationScript().getScript()));
assertThat(result, contains(expKey));
assertFalse(s.isMultiSigScript());
assertThat(new NeoURI(neow3j) .asset("b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c") .getAsset(), is(new ScriptHash("b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c")));
assertThat(result, contains(expKey));
assertThat(pubKeys, hasSize(1)); assertThat(Numeric.toHexStringNoPrefix(pubKeys.get(0).getEncoded(true)), is("02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef"));
assertThat(this.readResultInt, is(BigInteger.valueOf(9_223_372_036_854_775_807L)));
assertThat(Numeric.toHexStringNoPrefixZeroPadded(new BigInteger("0e", 16)), is("0e"));
assertThat(b.getVersion(), is((byte) 1));
assertThat(Strings.join(Arrays.asList("a", "b"), "|"), is("a|b")); assertNull(Strings.join(null, "|")); assertThat(Strings.join(Collections.singletonList("a"), "|"), is("a"));
assertThat(tx.getScript(), is(expectedScript));
assertThat(supply, is(BigInteger.valueOf(3000000000000000L)));
assertThat(loadedWallet.getAccounts().get(0).getAddress(), is(expectedAdr)); assertThat(loadedWallet.getAccounts().get(0).getECKeyPair(), is(ECKeyPair.create(skCopy)));
assertEquals(2, new VerificationScript(script).getSigningThreshold()); assertEquals(127, new VerificationScript(script).getSigningThreshold());
assertThat(pair.getAddress(), is(expectedAddress));
assertThat(Numeric.toBytesPadded(BigInteger.TEN, 1), is(new byte[]{0xa})); assertThat(Numeric.toBytesPadded(BigInteger.TEN, 8), is(new byte[]{0, 0, 0, 0, 0, 0, 0, 0xa})); assertThat(Numeric.toBytesPadded(BigInteger.valueOf(Integer.MAX_VALUE), 4), is(new byte[]{0x7f, (byte) 0xff, (byte) 0xff, (byte) 0xff}));
assertThat(b.getScript(), is(expectedScript));
assertThat(arrayOfBytesPrimitive, nullValue());
assertThat(this.readResultInt, is(new BigInteger("18446744073709551615")));
assertThat(sc.getScriptHash(), is(NEO_SCRIPT_HASH));
assertThat(policyContract.getMaxBlockSize(), is(262144));
assertThat(tx.getTxId(), is("066c44b4540ee7b5a3a57fcfcc272353560af792acc3c95da3e18efc962556a2"));
assertThat(simpleClassName, is(""));
assertThat("getURI()", neoURI.getURI(), is(URI.create(BEGIN_TX))); assertThat("getURIAsString()", neoURI.getURIAsString(), is(BEGIN_TX));
assertThat(new NeoURI() .neow3j(neow3j) .asset(NeoToken.SCRIPT_HASH) .wallet(WALLET) .toAddress(ADDRESS) .amount(AMOUNT) .buildTransfer(), is(instanceOf(TransactionBuilder.class)));
assertFalse(s.isMultiSigScript());
assertThat(sh.toString(), is("23ba2703c53263e8d6e522dc32203339dcd8eee9")); assertThat(sh.toString(), is("23ba2703c53263e8d6e522dc32203339dcd8eee9"));
assertThat(Sign.publicKeyFromPrivate(PRIVATE_KEY), equalTo(PUBLIC_KEY));
assertThat(s.getSize(), is(1 + 64));
assertThat(policyContract.getFeePerByte(), is(1000));
assertThat(this.readResultInt, is(BigInteger.valueOf(1)));
assertThat(Strings.zeros(0), is("")); assertThat(Strings.zeros(3), is("000"));
assertThat(new GasToken(neow).getDecimals(), is(8));
assertArrayEquals(expected, script.getScript());
assertTrue(httpService.getHeaders().get(headerName1).equals(headerValue1)); assertTrue(httpService.getHeaders().get(headerName2).equals(headerValue2));
assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes().get(0), is(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getSender(), is(account1.getScriptHash()));
assertThat(new NeoToken(neow).getTotalSupply(), is(new BigInteger("100000000")));
assertThat(out, is(expected));
assertEquals("", Collection.join(list, ",")); assertEquals("test1", Collection.join(list, ",")); assertEquals("test1,test2", Collection.join(list, ",")); assertEquals("test1:sep:test2", Collection.join(list, ":sep:")); assertEquals("test1test2", Collection.join(list, ""));
assertThat(c.getSize(), is(expectedSize));
assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getScript(), is(expectedScript)); assertThat(tx.getWitnesses().get(0).getVerificationScript().getScript(), is(account1.getVerificationScript().getScript()));
assertArrayEquals(expected, actual);
assertThat(sh.getSize(), is(20));
assertThat(this.readResultInt, is(BigInteger.valueOf(65_535)));
assertThat(this.readResultInt, is(BigInteger.valueOf(32_767)));
assertNotEquals(sh1, sh2); assertNotEquals(sh2, sh1); assertEquals(sh1, sh1);
assertThat(fqn, is(""));
assertThat(new GasToken(neow).getName(), is("GAS"));
assertThat(AddressUtils.scriptHashToAddress(scriptHash), is(address));
assertThat(result, is(ContractUtils.MANIFEST_FILENAME_SUFFIX));
assertThat(policyContract.getMaxTransactionsPerBlock(), is(512));
assertThat(Strings.toCsv(Collections.<String>emptyList()), is("")); assertThat(Strings.toCsv(Collections.singletonList("a")), is("a")); assertThat(Strings.toCsv(Arrays.asList("a", "b", "c")), is("a, b, c"));
assertThat(b.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(b.getSigners().get(0).getScopes(), contains(WitnessScope.GLOBAL)); assertThat(b.getScript(), is(expectedScript));
assertThat(value, is(Long.MIN_VALUE)); assertThat(value, is(Long.MAX_VALUE)); assertThat(value, is(0L)); assertThat(value, is(749_675_361_041L));
assertThat(this.readResultInt, is(BigInteger.valueOf(16)));
assertThat(this.readResultInt, is(BigInteger.valueOf(2_147_483_647)));
assertThat(new NeoURI(neow3j) .asset("b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c") .getAssetAsString(), is("b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c"));
assertThat(this.readResultInt, is(BigInteger.valueOf(-128)));
assertEquals("", Collection.join(list, ",", parityFunction)); assertEquals("odd", Collection.join(list, ",", parityFunction)); assertEquals("odd,even", Collection.join(list, ",", parityFunction)); assertEquals("odd:sep:even", Collection.join(list, ":sep:", parityFunction)); assertEquals("oddeven", Collection.join(list, "", parityFunction));
assertThat(encoded, is(expected));
assertThat(key, equalTo(PUBLIC_KEY));
assertThat(address, is(expectedAddress));
assertThat(b.getScript(), is(expectedScript));
assertThat(c.getScriptHash(), is(acctScriptHash)); assertThat(c.getScopes(), containsInAnyOrder( WitnessScope.CUSTOM_CONTRACTS, WitnessScope.CALLED_BY_ENTRY, WitnessScope.CUSTOM_GROUPS)); assertThat(c.getAllowedContracts(), containsInAnyOrder(contract1, contract2)); assertThat(c.getAllowedGroups(), containsInAnyOrder(groupPubKey1, groupPubKey2));
assertThat(Numeric.toHexStringNoPrefix(decoded), is(expected));
assertThat(i.getResult().getStack().get(0).asByteString().getAsString(), Matchers.is("NEO")); assertThat(i.getResult().getScript(), Matchers.is(SCRIPT_NEO_INVOKEFUNCTION_NAME));
assertThat(tx.getVersion(), is((byte) 0)); assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0), is(Signer.calledByEntry(account1.getScriptHash()))); assertThat(tx.getWitnesses(), hasSize(0));
assertArrayEquals(expected, actual);
assertNotNull(blockedAccounts); assertThat(blockedAccounts.size(), is(2)); assertThat(blockedAccounts, contains( ScriptHash.fromAddress("Aa1rZbE1k8fXTwzaxxsPRtJYPwhDQjWRFZ"), ScriptHash.fromAddress("ATpVyfpFwE2SzNGSvXDNrtRyfVLajhn7yN")));
assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getScript(), is(expectedScript)); assertThat(tx.getWitnesses().get(0).getVerificationScript().getScript(), is(account1.getVerificationScript().getScript()));
assertThat(arrayOfBytesPrimitive[0], is(b1)); assertThat(arrayOfBytesPrimitive[1], is(b2)); assertThat(arrayOfBytesPrimitive[2], is(b3));
assertThat(result, is("blah" + "." + ContractUtils.MANIFEST_FILENAME_SUFFIX));
assertArrayEquals(expected, sh.toArray());
assertThat(Numeric.toHexStringNoPrefix(BigInteger.TEN), is("a"));
assertArrayEquals(expected, script);
assertThat(Strings.capitaliseFirstLetter(""), is("")); assertThat(Strings.capitaliseFirstLetter("a"), is("A")); assertThat(Strings.capitaliseFirstLetter("aa"), is("Aa")); assertThat(Strings.capitaliseFirstLetter("A"), is("A")); assertThat(Strings.capitaliseFirstLetter("Ab"), is("Ab"));
assertArrayEquals(new String[]{}, Collection.tail(new String[]{})); assertArrayEquals(new String[]{}, Collection.tail(new String[]{"1"})); assertArrayEquals(new String[]{"2"}, Collection.tail(new String[]{"1", "2"})); assertArrayEquals(new String[]{"2", "3"}, Collection.tail(new String[]{"1", "2", "3"}));
assertThat(tx.getHashData(), is(expectedData));
assertThat(name, is("NEO"));
assertThat(b.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(b.getSigners().get(0).getScopes(), contains(WitnessScope.GLOBAL)); assertThat(b.getScript(), is(expectedScript));
assertThat(new NeoURI(neow3j) .asset("b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c") .getAssetAsAddress(), is("ARhJPYxmizqheBQA2dSQAHWfQQsbTSba2S"));
assertThat(result, is(new BigInteger("60000000000")));
assertThat(tx.getSigners(), hasSize(1)); assertThat(tx.getSigners().get(0).getScriptHash(), is(account1.getScriptHash())); assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); assertThat(tx.getScript(), is(expectedScript)); assertThat(tx.getWitnesses().get(0).getVerificationScript().getScript(), is(account1.getVerificationScript().getScript()));
assertThat(value, is(4_294_967_295L)); assertThat(value, is(1L)); assertThat(value, is(0L)); assertThat(value, is(44_684L));
assertThat(gasToken.getBalanceOf(account1.getScriptHash()), is(new BigInteger("300000000")));
assertThat(results, equalTo(neoGetBlocks)); assertTrue(disposable.isDisposed()); assertThat(transactionLatch.getCount(), is(0L));
assertArrayEquals(scriptHash, expected);
assertArrayEquals(expected, script.getScript());
assertArrayEquals(expectedWitness, witness.toArray());
assertThat(tx.getSize(), is(expectedSize));
assertThat(fee, is(expectedFees)); assertThat(balance, is(expectedBalance)); assertTrue(tested.get());
assertThat(this.readResultInt, is(BigInteger.valueOf(127)));
assertTrue(expectedOutputFile.exists()); assertThat(expectedOutputFile.length(), greaterThan(0L)); assertThat(cmLoaded.getExtra(), not(nullValue())); assertThat(((HashMap) cmLoaded.getExtra()).get("name"), is("blah")); assertThat(((HashMap) cmLoaded.getExtra()).get("test-bool"), is(true)); assertThat(((HashMap) cmLoaded.getExtra()).get("test-int"), is(1));
assertThat(result, is(""));
assertThat(new NefFile.Version().getSize(), is(4 * 32));
assertTrue(AddressUtils.isValidAddress(loadedWallet.getAccounts().get(0).getAddress())); assertThat(loadedWallet.getAccounts().get(0).getECKeyPair(), notNullValue());
assertNotNull(header); assertNotNull(upgradeHeader); assertEquals(4, upgradeHeader.size()); assertEquals("HTTP/2.0", upgradeHeader.get(0)); assertEquals("SHTTP/1.3", upgradeHeader.get(1)); assertEquals("IRC/6.9", upgradeHeader.get(2)); assertEquals("RTA/x11", upgradeHeader.get(3));
assertEquals("{5 GT 5}", expression.toString()); assertEquals("{5 GE 5}", expression.toString()); assertEquals("{5 LT 5}", expression.toString()); assertEquals("{5 LE 5}", expression.toString()); assertEquals("{5 LE 5.1}", parseExpression("5 le 5.1").toString()); assertEquals("{1 GT null}", parseExpression("1 gt null").toString()); assertEquals("{null GE 2}", parseExpression("null ge 2").toString()); assertEquals("{null LE null}", parseExpression("null le null").toString());
assertEquals(ContentType.APPLICATION_OCTET_STREAM, ContentType.parse("application/octet-stream")); assertNull(ContentType.parse("a")); assertNull(ContentType.parse("a/b;c")); assertNull(ContentType.parse("a/b;c=")); assertNull(ContentType.parse("a/b;c= "));
assertNotNull(odata.createUriHelper());
assertEquals("-5", expression.toString()); assertEquals("{MINUS -1}", parseExpression("--1").toString()); assertEquals("{MINUS duration\'PT1M\'}", parseExpression("-duration\'PT1M\'").toString()); assertEquals("{NOT false}", expression.toString());
assertEquals("{5 MUL 5}", expression.toString()); assertEquals("{5 DIV 5}", expression.toString()); assertEquals("{5 MOD 5}", expression.toString());
assertEquals(6, splittedValues.size()); assertEquals("abc", splittedValues.get(0)); assertEquals("def", splittedValues.get(1)); assertEquals("123", splittedValues.get(2)); assertEquals("77", splittedValues.get(3)); assertEquals("99", splittedValues.get(4)); assertEquals("ysd", splittedValues.get(5));
assertNotNull(header); assertTrue(header.exists("Test0123456789")); assertTrue(header.exists("a_b")); assertTrue(header.exists("!#$%&\'*+-.^_`|~")); assertEquals("weird", header.getHeader("!#$%&\'*+-.^_`|~"));
assertEquals("String\'\'Value", instance.fromUriLiteral("\'String\'\'\'\'Value\'"));
assertEquals(key1.hashCode(), key1.hashCode()); assertEquals(key1.hashCode(), key2.hashCode()); assertEquals(key1.hashCode(), key2.hashCode()); assertEquals(key1.hashCode(), key2.hashCode()); assertNotSame(key1.hashCode(), key2.hashCode()); assertNotSame(key1.hashCode(), key2.hashCode());
assertNotNull(odata.createDeserializer(ContentType.JSON_NO_METADATA)); assertNotNull(odata.createDeserializer(ContentType.JSON)); assertNotNull(odata.createDeserializer(ContentType.JSON_FULL_METADATA)); assertNotNull(odata.createDeserializer(ContentType.APPLICATION_JSON)); assertNotNull(odata.createDeserializer(ContentType.APPLICATION_JSON, versions));
assertNotNull(header); assertNotNull(contentIdHeaders); assertEquals(1, contentIdHeaders.size()); assertEquals("1", contentIdHeaders.get(0));
assertEquals("\'StringValue\'", instance.toUriLiteral("StringValue")); assertEquals("\'String\'\'Value\'", instance.toUriLiteral("String\'Value")); assertEquals("\'String\'\'\'\'\'\'Value\'", instance.toUriLiteral("String\'\'\'Value"));
assertEquals("{5 EQ 5}", expression.toString()); assertEquals("{5 NE 5}", expression.toString()); assertEquals("{1 EQ null}", parseExpression("1 eq null").toString()); assertEquals("{null NE 2}", parseExpression("null ne 2").toString()); assertEquals("{null EQ null}", parseExpression("null eq null").toString());
assertEquals(dateTime.getTimeInMillis(), timeValue.getTime()); assertEquals(Long.valueOf(dateTime.getTimeInMillis()), instance.valueOfString("00:00:00.999", null, null, 3, null, null, Long.class)); assertEquals(dateTime.getTimeInMillis(), timestamp.getTime()); assertEquals(999888777, timestamp.getNanos());
assertEquals("{-1 ADD {2 DIV 3}}", parseExpression("-1 add 2 div 3").toString()); assertEquals("{true OR {{NOT false} AND true}}", parseExpression("true or not false and true").toString());
assertNotNull(header); assertFalse(header.iterator().hasNext());
assertNotNull(header); assertNotNull(acceptLanguageHeader); assertEquals(3, acceptLanguageHeader.size());
assertEquals(ContentNegotiatorException.MessageKeys.UNSUPPORTED_CONTENT_TYPE, e.getMessageKey()); assertEquals(ContentNegotiatorException.MessageKeys.UNSUPPORTED_CONTENT_TYPE, e.getMessageKey());
assertNotNull(batchResponse); assertArrayEquals(beforeExpected.getBytes(CS_ISO_8859_1), beforeContent); assertArrayEquals(content, binaryContent); assertArrayEquals(afterExpected.getBytes(CS_ISO_8859_1), afterContent); assertEquals(-1, batchResponse.read());
assertNotNull(odata.createEdmAssistedSerializer(ContentType.APPLICATION_JSON, versions)); assertNotNull(odata.createEdmAssistedSerializer(ContentType.APPLICATION_JSON, versions));
assertEquals("HTTP/1.1 202 Accepted" + CRLF + "Content-Type: application/json" + CRLF + "Content-Length: 0" + CRLF + CRLF + testData, result);
assertEquals("{-5 ADD 5}", expression.toString()); assertEquals("{MINUS {5 ADD 5}}", expression.toString()); assertEquals("{MINUS {5 ADD 5}}", expression.toString());
assertNotNull(odata.createDebugResponseHelper("json"));
assertNotNull(odata.createDeserializer(ContentType.JSON_NO_METADATA)); assertNotNull(odata.createDeserializer(ContentType.JSON)); assertNotNull(odata.createDeserializer(ContentType.JSON_FULL_METADATA)); assertNotNull(odata.createDeserializer(ContentType.APPLICATION_JSON));
assertEquals("a/b", ContentType.create("a/b").toContentTypeString()); assertEquals(ContentType.create("a/b;c=d;x=y"), ContentType.create("a/b;x=y;c=d")); assertEquals(ContentType.create("a/b;c=d;x=y"), ContentType.create("a/b; x=y; c=d")); assertEquals(ContentType.create("A/B"), ContentType.create("a/b"));
assertEquals("Test", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertNotNull(odata.createSerializer(ContentType.JSON_NO_METADATA)); assertNotNull(odata.createSerializer(ContentType.JSON)); assertNotNull(odata.createSerializer(ContentType.APPLICATION_JSON)); assertNotNull(odata.createSerializer(ContentType.JSON_FULL_METADATA));
assertNotNull(expression); assertEquals("{[a] EQ \\\'abc\\\'}", expression.toString()); assertNotNull(expression); assertEquals("{[a] IN [\\\'abc\\\', \\\'xyz\\\']}", expression.toString()); assertEquals("Incompatible types.", e.getMessage());
assertEquals("Test", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); assertTrue(tokenizer.next(TokenKind.STAR)); assertTrue(tokenizer.next(TokenKind.EOF)); assertTrue(tokenizer.next(TokenKind.STAR)); assertTrue(tokenizer.next(TokenKind.EOF));
assertEquals("", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertNotNull(header); assertNotNull(acceptHeader); assertEquals(4, acceptHeader.size());
assertNotNull(header); assertNotNull(acceptHeader); assertEquals(3, acceptHeader.size());
assertEquals("Test " + CRLF + "Test2 ", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertEquals("", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertEquals(odResponse, debugResponse);
assertNotNull(odata.createFixedFormatSerializer());
assertEquals("{5 NE 545678979}", expression.toString()); assertEquals("{5456 EQ 5456}", expression.toString()); assertEquals("{null NE 54561234567}", expression.toString()); assertEquals("{null NE 255}", expression.toString()); assertEquals("{123 LE 2551234567890000999999}", expression.toString());
assertNotNull(odata.createSerializer(ContentType.JSON_NO_METADATA)); assertNotNull(odata.createSerializer(ContentType.JSON)); assertNotNull(odata.createSerializer(ContentType.APPLICATION_JSON)); assertNotNull(odata.createSerializer(ContentType.JSON_FULL_METADATA)); assertNotNull(odata.createSerializer(ContentType.JSON_FULL_METADATA, versions));
assertEquals("Test" + CRLF, BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertEquals("{\\"kind\\":\\"all\\",\\"select\\":[\\"*\\",\\"property\\"]}", createJson(tab)); assertEquals("<h2>Kind</h2>\\n" + "<p>all</p>\\n" + "<h2>Selected Properties</h2>\\n" + "<ul>\\n" + "<li>*</li>\\n" + "<li>property</li>\\n" + "</ul>\\n", createHtml(tab));
assertNotNull(odata.createFixedFormatDeserializer());
assertNotNull(header); assertNotNull(acceptLanguageHeader); assertEquals(4, acceptLanguageHeader.size());
assertNotNull(header); assertNotNull(contentIdHeaders); assertEquals(2, contentIdHeaders.size()); assertEquals("1", contentIdHeaders.get(0)); assertEquals("2", contentIdHeaders.get(1));
assertEquals(key.hashCode(), someKey.hashCode()); assertEquals(key.hashCode(), someKey.hashCode()); assertNotSame(key.hashCode(), someKey.hashCode()); assertNotSame(key.hashCode(), someKey.hashCode());
assertFalse(debugger.isDebugMode());
assertEquals(dateTime.getTime(), instance.valueOfString("2012-02-29T01:02:03-01:30", null, null, null, null, null, Date.class));
assertEquals("application/json;a=b;c=d", ContentType.create(ContentType.create(ContentType.APPLICATION_JSON, "a", "b"), "c", "d") .toContentTypeString());
assertNotNull(acceptType); assertEquals(1, acceptType.size()); assertEquals(ContentType.APPLICATION_JSON.toContentTypeString(), acceptType.get(0).toString());
assertEquals("Test ", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertEquals(line, BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString());
assertNotNull(odata.createETagHelper());
assertEquals(2, UriDecoder.splitAndDecodeOptions("=&=").size()); assertEquals(13, UriDecoder.splitAndDecodeOptions("&&&&&&&&&&&&").size());
assertEquals("HTTP/1.1 200 OK" + CRLF + "Content-Type: application/json" + CRLF + "Content-Length: 200" + CRLF + CRLF + "Walter Winter" + CRLF, result);
assertEquals(Arrays.asList("a", "entitySet(\'/\')", "bcd"), UriDecoder.splitAndDecodePath("a/entitySet(\'%2F\')/b%63d"));
assertFalse(captor.getValue().keySet().contains("language")); assertTrue(captor.getValue().keySet().contains("since"));
assertNotNull(onNextEvents);
assertNotNull(event); assertTrue(event.size() == 1);
assertNotNull(repo);
assertNotNull(onNextEvents);
assertNotNull(readMe);
assertNotNull(onNextEvents);
assertNotNull(userList);
assertNotNull(branches); assertTrue(branches.size() > 0); assertNotNull(treeNodes);
assertNotNull(onNextEvents); assertTrue(list.get(i).getStars() < list.get(i - 1).getStars());
assertNotNull(onNextEvents); assertTrue(onNextEvents.size() == 1);
assertNotNull(list);
assertNotNull(onNextEvents);
assertNotNull(userList);
assertNotNull(onNextEvents);
assertNotNull(userList);
assertNotNull(onNextEvents);
assertNotNull(branches);
assertNotNull(onNextEvents.get(0));
assertTrue(servletWithParent.equals(servletWithParent));
assertEquals(TEST_HOST, httpContext.getHost()); assertEquals(TEST_PORT, httpContext.getPort());
assertTrue(s1.equals(s1)); assertTrue(s1.equals(s2)); assertTrue(s2.equals(s2)); assertFalse(s1.equals(s2)); assertFalse(s1.equals(s2)); assertFalse(s1.equals(s2)); assertTrue(s1.equals(s2)); assertFalse(s1.equals(s2));
assertArrayEquals(new String[]{"?x", "?y"}, consumer1a.getKeys()); assertArrayEquals(new String[]{"?y"}, consumer1b.getKeys());
assertArrayEquals(new String[]{"?x", "?p", "?y"}, consumer1a.getKeys()); assertArrayEquals(new String[]{"?x"}, consumer2a.getKeys());
assertArrayEquals(new String[]{"?x", "?y"}, consumer1a.getKeys()); assertArrayEquals(new String[]{"?y"}, consumer1b.getKeys()); assertArrayEquals(new String[]{"?y"}, consumer1c.getKeys());
assertEquals(2, pattern.getPatterns().length);
assertEquals(5, g.getSolutions().length()); assertEquals(5, g.getSolutions().length()); assertEquals(4, g.getSolutions().length()); assertEquals(3, g.getSolutions().length()); assertEquals(2, g.getSolutions().length());
assertArrayEquals(new String[]{"?x", "?y"}, consumer1.getKeys()); assertArrayEquals(new String[]{"?a", "?b"}, consumer2.getKeys());
assertEquals(0, count(index.composeSolutions("x", "red", ps1, now))); assertEquals(1, count(index.composeSolutions("x", "red", ps1, now))); assertEquals(2, count(index.composeSolutions("x", "red", ps1, now)));
assertArrayEquals(new String[]{"?x", "?g"}, consumer1.getKeys());
assertEquals(2, dxType.getBlockSpace().getBlockOrBlockListOrBlockSeq().size()); assertEquals(11, dxType.getMessageSpace().getMessage().size()); assertEquals(2, dxType.getBlockCodecSpace().getBlockCodec().size()); assertEquals(3, dxType.getFxSpace().getFx().size());
assertEquals(2, dxType.getBlockSpace().getBlockOrBlockListOrBlockSeq().size()); assertEquals(11, dxType.getMessageSpace().getMessage().size()); assertEquals(2, dxType.getBlockCodecSpace().getBlockCodec().size()); assertEquals(3, dxType.getFxSpace().getFx().size());
assertThat(config).isEqualTo(create("TEST", "TEST", "test1", 1)); assertThat(config).isEqualTo(create("TEST", "TEST1", "test1", 1)); assertThat(config).isEqualTo(create("TEST", "TEST", "test", 1)); assertThat(config).isNotEqualTo(create("TEST1", "TEST1", "test1", 1)); assertThat(config).isNotEqualTo(create("TEST1", "TEST", "test", 1));
assertThat(environment.getProperty("eureka.instance.metadata-map.evcache.port")).isEqualTo("11211");
assertThat(environment.getProperty("eureka.instance.asg-name")).isEqualTo("asg");
assertThat(environment.containsProperty("eureka.instance.metadata-map.udsproxy.memcached.port")).isFalse();
assertThat(environment.getProperty("eureka.instance.metadata-map.evcache.secure.port")).isEqualTo("11411");
assertThat(environment.getProperty("eureka.instance.asg-name")).isEqualTo("DEFAULT");
assertThat(environment.containsProperty("eureka.instance.metadata-map.evcache.port")).isFalse();
assertThat(environment.containsProperty("eureka.instance.metadata-map.udsproxy.memento.port")).isFalse();
assertThat(processor.postProcessAfterInitialization(eurekaInstanceConfigBean, "beanName")) .isEqualTo(eurekaInstanceConfigBean); assertThat(dataCenterInfo.getMetadata()).containsEntry("availability-zone", zones[0]);
assertThat(binder.hitCount()).isEqualTo(3);
assertThat(processor.postProcessAfterInitialization(eurekaClientConfigBean, "beanName")) .isEqualTo(eurekaClientConfigBean);
assertThat(binder.evictionCount()).isEqualTo(3);
assertThat(binder.missCount()).isEqualTo(3);
assertThat(cache.get(1, callable)).isEqualTo(1);
assertThat(processor.getOrder()).isEqualTo(Ordered.LOWEST_PRECEDENCE - 1);
assertThat(environment.containsProperty("eureka.instance.metadata-map.rend.port")).isFalse();
assertThat(environment.containsProperty("eureka.instance.metadata-map.rend.batch.port")).isFalse();
assertThat(cache.get(1, callable)).isEqualTo(1); assertThat(stopWatch.getTotalTimeMillis()).isGreaterThanOrEqualTo(100);
assertThat(environment.getProperty("eureka.instance.asg-name")).isEqualTo("group");
assertThat(environment.getProperty("eureka.instance.metadata-map.rend.port")).isEqualTo("11211");
assertThat(environment.containsProperty("eureka.instance.metadata-map.evcache.secure.port")).isFalse();
assertThat(processor.postProcessAfterInitialization(eurekaInstanceConfigBean, "beanName")) .isEqualTo(eurekaInstanceConfigBean); assertThat(dataCenterInfo.getMetadata()).containsEntry("availability-zone", "defaultZone") .containsEntry("ami-id", "n/a") .containsEntry("instance-id", "test1") .containsEntry("public-hostname", hostInfo.getHostname()) .containsEntry("public-ipv4", hostInfo.getIpAddress()) .containsEntry("local-ipv4", hostInfo.getIpAddress());
assertThat(processor.postProcessBeforeInitialization(eurekaInstanceConfigBean, "beanName")) .isEqualTo(eurekaInstanceConfigBean);
assertThat(cache.getName()).isEqualTo("name");
assertThat(binder.putCount()).isEqualTo(3);
assertThat(processor.postProcessAfterInitialization(eurekaInstanceConfigBean, "beanName")) .isEqualTo(eurekaInstanceConfigBean); assertThat(dataCenterInfo.getMetadata()).containsEntry("availability-zone", "test1") .containsEntry("ami-id", "test2") .containsEntry("instance-id", "test3") .containsEntry("public-hostname", "test4") .containsEntry("public-ipv4", "test5") .containsEntry("local-ipv4", "test6");
assertThat(environment.getProperty("eureka.instance.metadata-map.udsproxy.memento.port")).isEqualTo("11211");
assertThat(environment.getProperty("eureka.instance.metadata-map.udsproxy.memcached.port")).isEqualTo("11211");
assertThat(environment.getProperty("eureka.instance.metadata-map.rend.batch.port")).isEqualTo("11211");
assertThat(cache.getNativeCache()).isEqualTo(source);
assertThat(binder.size()).isNull();
assertThat(processor.postProcessAfterInitialization(eurekaInstanceConfigBean, "beanName")) .isEqualTo(eurekaInstanceConfigBean);
assertThat(cache.get(1, callable)).isEqualTo(2);
assertTrue(true);
assertEquals(lookup.getDepth(), 3); assertEquals(lookup.getDescription(), "test job"); assertEquals(lookup.getTTL(),300);
assertEquals(patchedVer.toString(),"{\\"foo\\":\\"bar\\",\\"hodor\\":\\"hodor!\\",\\"hold\\":\\"door\\"}");
assertEquals(toUuid.toString(), graphId); assertEquals(v,4);
assertThat(componentName.getPackageName(), is("com.abc")); assertThat(componentName.getClassName(), is("MyActivity"));
assertThat(resultForNull, is(ComponentNameUtils.DUMMY_COMPONENT)); assertThat(resultForEmpty, is(ComponentNameUtils.DUMMY_COMPONENT)); assertThat(resultForInvalidFormat, is(ComponentNameUtils.DUMMY_COMPONENT));
assertThat(packageName, is("com.abc"));
assertThat(nameAscStrategy, is(instanceOf(NameInAscOrder.class))); assertThat(nameDescStrategy, is(instanceOf(NameInDescOrder.class))); assertThat(readerAppFirstStrategy, is(instanceOf(ReaderApplicationFirst.class)));
assertThat(packageName, is("com.abc"));
assertThat(resultForNull, is("")); assertThat(resultForEmpty, is("")); assertThat(resultForInvalidFormat, is(""));
assertThat(resultForNull, is("")); assertThat(resultForEmpty, is("")); assertThat(resultForInvalidFormat, is(""));
assertThat(firstTime, is(notNullValue())); assertThat(cachedChildren.size(), is(1)); assertThat(secondTime, is(notNullValue())); assertThat(cachedChildren.size(), is(1));
assertEquals(23, width.getMin()); assertEquals(36, width.getMax());
assertEquals(asList("a", "b", "c", "1234", "word"), asList(commandParser.toArgs("a b c 1234 word")[0].getArgs())); assertEquals(asList("a", "b", "-c", "--1234", "word"), asList(commandParser.toArgs("a b -c --1234 word")[0].getArgs()));
assertEquals("Width{min=13, max=42}", a.toString());
assertEquals(3, args.length); assertEquals("git", args[0]); assertEquals("pull", args[1]); assertEquals("--verbose=true", args[2]);
assertEquals(5, table.getColumns().size());
assertEquals(1, args.length); assertEquals(singletonList("a"), asList(args[0].getArgs()));
assertEquals(2, args.length); assertEquals(singletonList("a"), asList(args[0].getArgs())); assertEquals(singletonList("b"), asList(args[1].getArgs())); assertEquals(2, args.length); assertEquals(asList("test", "--option=value", "-quoted=ckdwc\\\\cekwcbw"), asList(args[0].getArgs())); assertEquals(asList("grep", "==foo"), asList(args[1].getArgs()));
assertEquals(3, args.length); assertEquals("git", args[0]); assertEquals("pull", args[1]); assertEquals("--verbose=true", args[2]);
assertEquals(3, args.length); assertEquals("git", args[0]); assertEquals("pull", args[1]); assertEquals("--verbose=true", args[2]);
assertEquals(10, c.getMin()); assertEquals(21, c.getMax());
assertEquals("use " + "\\u001B[0m\\u001B[1m--body\\u001B[0m" + " to point to a json file", highlight.matches("use `--body` to point to a json file")); assertEquals("use \\u001B[0m\\u001B[1m--body=false\\u001B[0m when in doubt", highlight.matches("use `--body=false` when in doubt"));
assertEquals("send a " + "\\u001B[0m\\u001B[1mGET\\u001B[0m request to " + "\\u001B[0m\\u001B[1m/some/place\\u001B[0m", highlight.matches("send a `GET` request to `/some/place`"));
assertEquals(3, args.length); assertEquals("set", args[0]); assertEquals("user", args[1]); assertEquals("--name=Tomitribe Crest", args[2]);
assertEquals(new HashSet<String>() {{ add(ClassCommand.class.getName()); add(MethodCommand.class.getName()); }}, found);
assertEquals("--body-formatter\\n" + "--assignee\\n" + "--assign\\n" + "--file\\n" + "--body\\n" + "--a\\n" + "-g\\n" + "-f\\n" + "-b\\n" + "-a", Join.join("\\n", flags));
assertEquals("send a " + "\\u001B[0m\\u001B[1mGET\\u001B[0m request to " + "\\u001B[0m\\u001B[1m/some/place\\u001B[0m with " + "\\u001B[0m\\u001B[1m--body\\u001B[0m pointing to a json file", highlight.matches("send a `GET` request to `/some/place` with --body pointing to a json file"));
assertEquals("first_name\\n" + "Wendie\\n" + "Derry\\n" + "Heidi\\n" + "Elladine\\n" + "Erl", Join.join("\\n", column2));
assertEquals(7, c.getMin()); assertEquals(10, c.getMax());
assertEquals(expected, Wrap.wrap(input, 30, "\\n", false, "/")); assertEquals(expected, Wrap.wrap(input, 2, "\\n", false, "/")); assertEquals(expected, Wrap.wrap(input, 9, "\\n", true, "/")); assertEquals(expected, Wrap.wrap(input, 15, "\\n", true, "/")); assertEquals(expected, Wrap.wrap(input, 15, "\\n", true, "/"));
assertEquals("first_name\\n" + "Wendie\\n" + "Derry\\n" + "Heidi\\n" + "Elladine\\n" + "Erl", Join.join("\\n", column2));
assertEquals(13, a.getMin()); assertEquals(42, a.getMax()); assertEquals("Width{min=13, max=42}", a.toString()); assertEquals(6, b.getMin()); assertEquals(48, b.getMax()); assertEquals("Width{min=6, max=48}", b.toString());
assertNull(Wrap.wrap(null, 20)); assertNull(Wrap.wrap(null, -1)); assertEquals("", Wrap.wrap("", 20)); assertEquals("", Wrap.wrap("", -1)); assertEquals(expected, Wrap.wrap(input, 20)); assertEquals(expected, Wrap.wrap(input, 20)); assertEquals(expected, Wrap.wrap(input, 20)); assertEquals(expected, Wrap.wrap(input, 7));
assertTrue(thriftFile.createNewFile()); assertTrue(thriftFile.delete()); assertTrue(!thriftFile.exists()); assertFalse("gen-java directory should not exist", genJavaDir.exists()); assertEquals(1, result);
assertTrue("File not found: shared.thrift", sharedThrift.exists()); assertFalse("gen-java directory should not exist", genJavaDir.exists()); assertEquals(0, result); assertFalse("gen-java directory was not removed", genJavaDir.exists()); assertTrue("generated java code doesn\'t exist", new File(testRootDir, "shared/SharedService.java").exists()); assertTrue("generated java code doesn\'t exist", new File(testRootDir, "tutorial/InvalidOperation.java").exists());
assertEquals(SCHEMA_VERSION_2_0, schemaVersion.toString());
assertEquals(expectedMessage, contentException.getMessage());
assertNotNull(descriptor);
assertEquals(expectedExtensionDescriptorChain, extensionDescriptorChain);
assertEquals(Messages.ERROR_EMPTY_DEPLOYMENT_DESCRIPTOR, e.getMessage());
assertEquals(Messages.ERROR_EMPTY_EXTENSION_DESCRIPTOR, e.getMessage());
assertNotNull(descriptor);
assertEquals(4, entries.size()); assertTrue(entries.containsKey("web/web-server.zip")); assertTrue(entries.containsKey("applogic/pricing.zip")); assertTrue(entries.containsKey("db/pricing-db.zip")); assertTrue(entries.containsKey("META-INF/mtad.yaml"));
assertEquals(4, entries.size()); assertTrue(entries.containsKey("web/")); assertTrue(entries.containsKey("applogic/")); assertTrue(entries.containsKey("db/")); assertTrue(entries.containsKey("META-INF/mtad.yaml"));
assertEquals(expectedMessage, contentException.getMessage());
assertEquals(MessageFormat.format(Messages.INVALID_TYPE_FOR_KEY, "resources#0#requires#0", Map.class.getSimpleName(), String.class.getSimpleName()), e.getMessage());
assertEquals(expectedMessage, contentException.getMessage());
assertEquals("EDEF7E9885FED1A58597212AF0522614", DigestHelper.computeDirectoryCheckSum(Paths.get("src/test/resources/org/cloudfoundry/multiapps/common/util"), "MD5"));
assertEquals("App router code will be packaged in this archive", readmeContent);
assertEquals("439B99DFFD0583200D5D21F4CD1BF035", DigestHelper.computeFileChecksum(Paths.get("src/test/resources/org/cloudfoundry/multiapps/common/util/web.zip"), "MD5"));
assertEquals(Collections.emptyList(), extensionDescriptorChain);
assertTrue(descriptor.contains("com.sap.mta.sample"));
assertNotNull(descriptor);
assertEquals("App router code will be packaged in this archive", readmeContent);
assertEquals(expectedExtensionDescriptorChain, extensionDescriptorChain);
assertEquals(SCHEMA_VERSION_2_1, schemaVersion.toString());
assertNotNull(descriptor);
assertEquals(MessageFormat.format(Messages.MISSING_REQUIRED_KEY, SCHEMA_VERSION_KEY), e.getMessage());
assertTrue(descriptor.contains("com.sap.mta.sample"));
assertThat(savedOrder.getTotalPrice()).isEqualTo(2 * 11 + 3 * 12); assertThat(savedOrder.getOrderTime()).isGreaterThan(0);
assertFalse(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertTrue(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertTrue(shouldVote);
assertFalse(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertFalse(collector.isDone()); assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertTrue(Futures.getUnchecked(collector));
assertTrue(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertTrue(shouldVote);
assertFalse(Futures.getUnchecked(collector));
assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertTrue(Futures.getUnchecked(collector));
assertTrue(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertFalse(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertEquals(pathResolver.getClasspath(), actual.getClassPath());
assertEquals(true, serialNumber.greaterThan(0)); assertEquals(false, serialNumber.greaterThan(2));
assertNotNull(dataSegment); assertEquals(3, dataSegment.getSettings().entrySet().size()); assertFalse(dataSegment.getSettings().entrySet().isEmpty());
assertNotNull(testBuffer); assertNotNull(dataSegment); assertEquals(5, dataSegment.getLength()); assertNotNull(anotherDataSegment); assertEquals(5, anotherDataSegment.getLength()); assertTrue(dataSegment.equals(anotherDataSegment));
assertTrue(resultFunction instanceof ChooseResultFunction); assertEquals("None", resultFunction.result("CRC32,None", "MD5,CRC32CDigest,None"));
assertEquals(0xF0, Utils.getUnsignedInt((byte) 0xF0));
assertEquals("512", settingsMap.get(OperationalTextKey.MAX_CONNECTIONS));
assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength()); assertEquals(TEST_CASE_1_ARRAY.length, dataSegment.getLength()); assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength());
assertTrue(resultFunction instanceof ChooseResultFunction); assertEquals("CRC32CDigest", resultFunction.result("CRC32CDigest,None", "MD5,CRC32CDigest,None"));
assertEquals(true, serialNumber.lessThan(2)); assertEquals(false, serialNumber.lessThan(0)); assertEquals(true, serialNumber.equals(2));
assertEquals(0, result); assertEquals(0, result); assertEquals(0, result); assertEquals(0, result);
assertNotNull(dataSegment); assertEquals(3, dataSegment.getSettings().entrySet().size()); assertFalse(dataSegment.getSettings().entrySet().isEmpty()); assertNotNull(anotherDataSegment); assertNotNull(anotherDataSegment); assertEquals(3, anotherDataSegment.getSettings().entrySet().size()); assertFalse(anotherDataSegment.getSettings().entrySet().isEmpty());
assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength()); assertEquals(TEST_CASE_1_ARRAY.length, dataSegment.getLength()); assertTrue(expectedResult.equals(dataSegment.dataBuffer));
assertNotNull(dataSegment); assertTrue(dataSegment.getSettings().entrySet().isEmpty()); assertFalse(dataSegment.getSettings().entrySet().isEmpty()); assertNotNull(dataSegment); assertTrue(dataSegment.getSettings().entrySet().isEmpty());
assertTrue(settingsMap.equals(anotherSettingsMap));
assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength()); assertEquals(3, dataSegment.getSettings().entrySet().size()); assertFalse(dataSegment.getSettings().entrySet().isEmpty()); assertNotNull(anotherDataSegment); assertEquals(3, anotherDataSegment.getSettings().entrySet().size()); assertFalse(anotherDataSegment.getSettings().entrySet().isEmpty()); assertTrue(dataSegment.equals(anotherDataSegment));
assertEquals(1, result); assertEquals(0, result);
assertEquals(0xBD18L, Utils.getUnsignedLong((short) 0xBD18));
assertEquals(0, result); assertEquals(2, result);
assertTrue(module != null);
assertEquals(TEST_CASE, isid.serialize());
assertEquals(arrays[i].length, i + 1); assertEquals(arrays[i].length, i); assertEquals(4, arrays[0].length); assertEquals(1, arrays[1].length); assertEquals(2, arrays[2].length); assertEquals(5, arrays[3].length);
assertTrue(resultFunction instanceof ChooseResultFunction);
assertEquals(CAPACITY, PROVIDER.getAll().length);
assertNotNull(testBuffer); assertNotNull(dataSegment); assertEquals(TEST_CASE_1_ARRAY.length, dataSegment.getLength()); assertTrue(expectedResult.equals(dataSegment.dataBuffer));
assertEquals(1, serialNumber.getValue());
assertEquals("2", settingsMap.get(OperationalTextKey.DEFAULT_TIME_2_WAIT));
assertEquals(0xC254F92AL, Utils.getUnsignedLong(0xC254F92A));
assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength()); assertEquals(TEST_CASE_1_ARRAY.length, dataSegment.getLength()); assertTrue(expectedResult.equals(exportedDataSegment));
assertThat(version).isNotNull().isNotEmpty();
assertThat(timeStamp).isNotNull().isNotEmpty();
assertThat(converter.convertToDatabaseColumn(Money.of(1.23456, "EUR"))).isEqualTo("EUR 1.23456");
assertThat(converter.convertToEntityAttribute("EUR 123,456.78")).isEqualTo(Money.of(123456.78, "EUR"));
assertThat(converter.convertToDatabaseColumn(Money.of(123456, "EUR"))).isEqualTo("EUR 123456");
assertEquals("a..b", StringUtils.join("..", "a", "b"));
assertThat(result) .as("Auto created properties should not be used for serialization") .doesNotContain("jcr:created");
assertThat(result) .as("Node\'s name should be serialized") .contains(RESOURCE_NAME);
assertThat(result) .as("Node\'s properties should be serialized") .contains(PARENT_PROP) .contains(PARENT_VALUE);
assertThat(result) .as("Result of node\'s serialization should not be empty") .isNotEmpty();
assertThat(result) .as("Child node\'s properties should be serialized") .contains(CHILD_PROP) .contains(CHILD_VALUE);
assertThat(result) .as("Child node\'s name should be serialized") .contains(CHILD_RESOURCE_NAME);
assertThat(result) .as("Node\'s name should be serialized") .contains(RESOURCE_NAME);
assertThat(result) .as("Child node\'s name should be serialized") .contains(CHILD_RESOURCE_NAME);
assertThat(result) .as("Child node\'s properties should be serialized") .contains(CHILD_PROP) .contains(CHILD_VALUE);
assertThat(result) .as("Auto created properties should not be used for serialization") .doesNotContain("jcr:created");
assertThat(result) .as("Node\'s properties should be serialized") .contains(PARENT_PROP) .contains(PARENT_VALUE);
assertThat(result) .as("Result of node\'s serialization should not be empty") .isNotEmpty();
assertNotNull(info1.getFQDNHostname()); assertNotNull(info2.getFQDNHostname());
assertTrue(list.isEmpty()); assertTrue(iterator.hasNext()); assertEquals(exp, act); assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext());
assertEquals("1", replacedConfig.getProperty(KinesisConfigUtil.AGGREGATION_MAX_COUNT)); assertEquals("2", replacedConfig.getProperty(KinesisConfigUtil.COLLECTION_MAX_COUNT));
assertEquals(duration, failed.getEndToEndDuration());
assertEquals("[1.0]", controlString);
assertTrue(latch.isTriggered());
assertTrue(group.getAllVariables().isEmpty());
assertEquals(keySet, backingConf.keySet());
assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() { @Override public String getValue() { return "I am not a number"; } }).get(), equalTo(0.));
assertEquals(expected, type);
assertTrue(retryFuture.get()); assertTrue(retries == atomicInteger.get());
assertFalse(pending.canBeSubsumed()); assertTrue(pending.canBeSubsumed());
assertEquals(1, endStateCount);
assertNotNull(descr.getSerializer()); assertTrue(descr.getSerializer() instanceof ListSerializer); assertNotNull(descr.getElementSerializer()); assertTrue(descr.getElementSerializer() instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) descr.getElementSerializer()).getKryo().getRegistration(TaskInfo.class).getId() > 0);
assertEquals("/my/fancy", p.getParent().toUri().getPath()); assertEquals("/my/other/fancy", p.getParent().toUri().getPath()); assertNull(p.getParent()); assertEquals("/C:/my/windows", p.getParent().toUri().getPath());
assertFalse("Did not trigger savepoint", savepoint0.isDone()); assertFalse("Did not trigger savepoint", savepoint1.isDone());
assertEquals(testData.f2, actual);
assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched)); assertTrue(response instanceof TaskExecutorRegistrationSuccess); assertThat(resourceManager.workersInLaunch, hasEntry(extractResourceID(task1), worker1launched));
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);
assertArrayEquals(keyGroupPartitioner.selectChannels(sd1, 1), keyGroupPartitioner.selectChannels(sd2, 1)); assertArrayEquals(keyGroupPartitioner.selectChannels(sd1, 2), keyGroupPartitioner.selectChannels(sd2, 2)); assertArrayEquals(keyGroupPartitioner.selectChannels(sd1, 1024), keyGroupPartitioner.selectChannels(sd2, 1024));
assertNotNull(GlobalConfiguration.loadConfiguration(tempFolder.getRoot().getAbsolutePath()));
assertTrue(!future.isDone()); assertTrue(!future.isDone()); assertTrue(finalTime >= tries * delay);
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertThat( extractResult(testHarness), contains("ON_PROC_TIME:HELLO")); assertThat( extractResult(testHarness), contains("ON_PROC_TIME:CIAO"));
assertEquals(0, list.size()); assertTrue(list.isEmpty());
assertEquals(recNoTimestamp, recNoTimestampCopy); assertEquals(recWithTimestamp, recWithTimestampCopy);
assertEquals(1, keyGroupPartitioner.selectChannels(sd1, 1).length); assertEquals(1, keyGroupPartitioner.selectChannels(sd1, 2).length); assertEquals(1, keyGroupPartitioner.selectChannels(sd1, 1024).length);
assertTrue(checkIsEvent(evt, evt2.getClass())); assertFalse(checkIsEvent(evt, evt2.getClass()));
assertEquals(expected, actual); assertTrue(latch.isTriggered());
assertFalse(preferredLocationsFuture.isDone()); assertFalse(preferredLocationsFuture.isDone()); assertTrue(preferredLocationsFuture.isDone()); assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3));
assertArrayEquals(new String[]{"f0", "f1", "f2"}, typeInfo.getFieldNames()); assertEquals(BasicTypeInfo.STRING_TYPE_INFO, typeInfo.getTypeAt("f2")); assertEquals(BasicTypeInfo.SHORT_TYPE_INFO, typeInfo.getTypeAt("f1.f0")); assertEquals(BasicTypeInfo.BIG_DEC_TYPE_INFO, typeInfo.getTypeAt("f1.1"));
assertEquals(1L, list.size()); assertEquals(42L, element);
assertNotNull(stringValue);
assertEquals(fakeStreams.size(), streamsInState.size()); assertTrue(streamsInState.containsAll(fakeStreams)); assertEquals( KinesisShardIdGenerator.generateFromShardOrder(streamToShardCount.get(streamToLastSeenShard.getKey()) - 1), streamToLastSeenShard.getValue());
assertFalse(serializer.isImmutableType());
assertNull(spiller.rollOver()); assertNull(spiller.rollOver()); assertNull(spiller.rollOver());
assertEquals("019f314a", hex);
assertEquals(boe, tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked());
assertTrue(TestReporter6.addedMetric instanceof Counter); assertEquals("rootCounter", TestReporter6.addedMetricName); assertTrue(TestReporter7.addedMetric instanceof Counter); assertEquals("rootCounter", TestReporter7.addedMetricName); assertTrue(TestReporter6.removedMetric instanceof Counter); assertEquals("rootCounter", TestReporter6.removedMetricName); assertTrue(TestReporter7.removedMetric instanceof Counter); assertEquals("rootCounter", TestReporter7.removedMetricName);
assertSame(right, copy1); assertSame(copy0, copy2); assertSame(right.right(), copy1.right()); assertSame(copy0.left(), copy2.left());
assertThat(resourceManagerInstance.workersInNew, hasEntry(extractResourceID(task1), expected));
assertEquals("Reporters were not properly instantiated", 2, testRegistry.getReporters().size());
assertEquals(2, partition.getTotalNumberOfBuffers()); assertTrue(buffer.isRecycled());
assertEquals(10, kpc.getThreadPoolSize());
assertEquals(snapshottingSettings.getCheckpointCoordinatorConfiguration(), tracker.getJobCheckpointingConfiguration());
assertEquals(testData.f2, actual);
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertEquals( "{\\"metric\\":\\"testCounter\\",\\"type\\":\\"counter\\",\\"host\\":\\"localhost\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1]]}", DatadogHttpClient.serialize(c));
assertEquals(AkkaUtils.getAddress(actorSystem).host().get(), akkaRpcService.getAddress());
assertTrue(expected.contains(serializable)); assertEquals(expected.size(), counter);
assertEquals(new Watermark(10), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertFalse(KinesisProxy.isRecoverableException(ex));
assertFalse(fs.rename(srcFilePath, destFilePath));
assertFalse(leaderSessionIdFuture.isDone()); assertEquals(expectedLeaderSessionId, actualLeaderSessionId);
assertTrue(tmpDirectory.setWritable(false)); assertTrue(tmpDirectory.setWritable(true)); assertEquals(0, tmpDirectory.listFiles().length);
assertEquals(normalizedAddress, NetUtils.ipAddressToUrlString(address));
assertTrue(!future.isDone()); assertTrue(!future.isDone()); assertTrue(finalTime >= tries * delay);
assertEquals(OffsetCommitMode.ON_CHECKPOINTS, consumer.getOffsetCommitMode());
assertEquals(42L, value);
assertEquals("path", p.getName()); assertEquals("path", p.getName()); assertEquals("", p.getName()); assertEquals("path", p.getName()); assertEquals("path", p.getName());
assertEquals(expected, type);
assertFalse(props.isSavepoint()); assertFalse(props.isSavepoint()); assertFalse(props.isSavepoint()); assertTrue(props.isSavepoint()); assertTrue(deserializedCheckpointProperties.isSavepoint());
assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size());
assertEquals(2, stateHandleProvider.getStateHandles().size()); assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState()); assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState()); assertNotNull(stat); assertEquals(0, stat.getEphemeralOwner()); assertEquals(replaceState, actual);
assertTrue(KinesisProxy.isRecoverableException(ex));
assertTrue(writer.equals(other)); assertFalse(writer.equals(other)); assertFalse(writer.equals(new StringWriter<>()));
assertFalse(KinesisProxy.isRecoverableException(ex));
assertFalse(props.forceCheckpoint()); assertFalse(props.externalizeCheckpoint()); assertTrue(props.discardOnSubsumed()); assertTrue(props.discardOnJobFinished()); assertTrue(props.discardOnJobCancelled()); assertTrue(props.discardOnJobFailed()); assertTrue(props.discardOnJobSuspended());
assertTrue(directoryFile.createNewFile()); assertTrue(fs.exists(filePath)); assertTrue(fs.exists(directoryFilePath)); assertFalse(FileUtils.deletePathIfEmpty(fs, filePath)); assertTrue(fs.exists(filePath)); assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath)); assertTrue(fs.exists(directoryPath)); assertTrue(fs.delete(directoryFilePath, false)); assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath)); assertFalse(fs.exists(directoryPath));
assertTrue(registry.getNumberRegisteredMetrics() > 0); assertEquals(0, registry.getNumberRegisteredMetrics());
assertThat( extractResult(testHarness), contains("ON_ELEMENT:1:CIAO", "ON_ELEMENT:0:HELLO"));
assertTrue(KinesisProxy.isRecoverableException(ex));
assertEquals(1, store.getAllAndLock().size()); assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState()); assertNotNull(stat); assertEquals(0, stat.getEphemeralOwner()); assertEquals(1, children.size());
assertFalse(retryFuture.isDone()); assertTrue(retryFuture.isCancelled()); assertEquals(2, atomicInteger.get());
assertEquals(TARGET_CONF_DIR.getPath(), spec.getEnvironmentVariables().get("HADOOP_CONF_DIR")); assertEquals(TARGET_CONF_DIR.getPath(), spec.getDynamicConfiguration().getString(ConfigConstants.PATH_HADOOP_CONFIG, null));
assertEquals(value1, cfg.getString(designatedKey1, null)); assertEquals(value2_designated, cfg.getString(designatedKey2, null)); assertNull(cfg.getString(designatedKey3, null)); assertNull(cfg.getString(deprecatedKey3, null));
assertTrue(slot.isAlive()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertTrue(slot.isReleased()); assertTrue(slot.isAlive()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertFalse(slot.isReleased()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertTrue(slot.isReleased());
assertTrue(serializer instanceof AvroSerializer);
assertEquals(1, distributePartitioner.selectChannels(sd, 1).length); assertEquals(1, distributePartitioner.selectChannels(sd, 2).length); assertEquals(1, distributePartitioner.selectChannels(sd, 1024).length);
assertEquals(binFolder.getAbsolutePath(), builder.flinkBinPath.getAbsolutePath()); assertEquals(libFolder.getAbsolutePath(), builder.flinkLibPath.getAbsolutePath()); assertEquals(confFolder.getAbsolutePath(), builder.flinkConfPath.getAbsolutePath());
assertEquals(0, collected.size());
assertEquals("", info.scope); assertEquals(jid.toString(), info.jobID); assertEquals(vid.toString(), info.vertexID); assertEquals(4, info.subtaskIndex);
assertEquals(TARGET_PATH.getPath(), spec.getDynamicConfiguration().getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB));
assertEquals(42L, value);
assertTrue(orc != projected); assertEquals(orc.getTableSchema(), projected.getTableSchema()); assertEquals( Types.ROW_NAMED( new String[] {fieldNames[3], fieldNames[5], fieldNames[1], fieldNames[0]}, new TypeInformation[] {fieldTypes[3], fieldTypes[5], fieldTypes[1], fieldTypes[0]}), projected.getReturnType());
assertEquals("gauge", gd.name); assertEquals("hello", gd.value); assertEquals(info, gd.scopeInfo); assertEquals(METRIC_CATEGORY_GAUGE, gd.getCategory());
assertEquals("incorrect region", region, kpc.getRegion());
assertEquals("42", value);
assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty());
assertTrue(triggerResult.isFailure()); assertEquals(CheckpointDeclineReason.PERIODIC_SCHEDULER_SHUTDOWN, triggerResult.getFailureReason()); assertFalse(triggerResult.isFailure());
assertEquals( "{\\"metric\\":\\"testCounter\\",\\"type\\":\\"gauge\\",\\"host\\":\\"localhost\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1]]}", DatadogHttpClient.serialize(g));
assertEquals("None of RabbitMQ channels are available", ex.getMessage());
assertTrue(exceptionWasThrown.get());
assertEquals(testData.f2, actual);
assertTrue(channel.config().isAutoRead()); assertFalse(channel.config().isAutoRead()); assertTrue(channel.config().isAutoRead());
assertEquals(KinesisProducerConfiguration.ThreadingModel.POOLED, kpc.getThreadingModel());
assertEquals(origID.hashCode(), copyID.hashCode()); assertEquals(origID, copyID);
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertFalse((leaderGatewayRetriever.getNow().isPresent())); assertEquals(rpcGateway, leaderGatewayRetriever.getNow().get());
assertThat(resourceManager.workersInLaunch.entrySet(), empty()); assertThat(resourceManager.workersBeingReturned, hasEntry(extractResourceID(task1), worker1Released));
assertEquals(TEST_DATA[recordCount].id, resultSet.getObject("id")); assertEquals(TEST_DATA[recordCount].title, resultSet.getObject("title")); assertEquals(TEST_DATA[recordCount].author, resultSet.getObject("author")); assertEquals(TEST_DATA[recordCount].price, resultSet.getObject("price")); assertEquals(TEST_DATA[recordCount].qty, resultSet.getObject("qty")); assertEquals(TEST_DATA.length, recordCount);
assertEquals("hostTest", testObj.getFactory().getHost()); assertEquals(999, testObj.getFactory().getPort()); assertEquals("userTest", testObj.getFactory().getUsername()); assertEquals("passTest", testObj.getFactory().getPassword());
assertEquals(1234, MemorySize.parseBytes("1234")); assertEquals(1234, MemorySize.parseBytes("1234b")); assertEquals(1234, MemorySize.parseBytes("1234 b")); assertEquals(1234, MemorySize.parseBytes("1234bytes")); assertEquals(1234, MemorySize.parseBytes("1234 bytes"));
assertEquals("42", value);
assertEquals("testName", copy.getName()); assertNotNull(copy.getSerializer()); assertTrue(copy.getSerializer() instanceof ListSerializer); assertNotNull(copy.getElementSerializer()); assertEquals(StringSerializer.INSTANCE, copy.getElementSerializer());
assertTrue(dir.exists()); assertTrue(FileUtils.deletePathIfEmpty(localFs, dirPath)); assertTrue(FileUtils.deletePathIfEmpty(localFs, dirPath)); assertFalse(FileUtils.deletePathIfEmpty(localFs, nonEmptyDirPath));
assertTrue(original != copy); assertTrue(original.equals(copy));
assertTrue("Configuration method \'" + configurationMethod.getName() + "\' has not been wrapped correctly in DelegatingConfiguration wrapper", hasMethod);
assertEquals("A_B_C_D_E_name", tmGroup.getMetricIdentifier("name"));
assertEquals(1, distributePartitioner.selectChannels(sd, 1).length); assertEquals(1, distributePartitioner.selectChannels(sd, 2).length); assertEquals(1, distributePartitioner.selectChannels(sd, 1024).length);
assertEquals(testData.f2, actual);
assertNotNull(stringValue);
assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType()); assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType()); assertTrue(sourceConfig.isChainStart()); assertTrue(sourceConfig.isChainEnd()); assertTrue(mapConfig.isChainStart()); assertFalse(mapConfig.isChainEnd()); assertFalse(printConfig.isChainStart()); assertTrue(printConfig.isChainEnd());
assertEquals(reference.size(), list.size()); assertEquals(exp, act); assertEquals(reference.size(), list.size());
assertEquals(100, kpc.getRateLimit());
assertNotNull(value); assertFalse(value.iterator().hasNext());
assertEquals(new Watermark(25), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(new Watermark(42), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertEquals(0, m.getCount()); assertEquals(1, m.getCount()); assertEquals(3, m.getCount());
assertEquals(42L, value);
assertTrue(latch.isTriggered()); assertTrue("call was not properly delayed", ((stop - start) / 1000000) >= delay);
assertTrue(preferredLocationsFuture.isDone()); assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3));
assertEquals( "{\\"metric\\":\\"testCounter\\",\\"type\\":\\"gauge\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1]]}", DatadogHttpClient.serialize(g));
assertEquals(testData.f2, actual);
assertNotNull("Expecte and existing lock.", stat); assertEquals(0, stat.getNumChildren()); assertEquals(0, stat.getNumChildren());
assertEquals("testName", descr.getName()); assertNotNull(descr.getSerializer()); assertTrue(descr.getSerializer() instanceof ListSerializer); assertNotNull(descr.getElementSerializer()); assertEquals(serializer, descr.getElementSerializer()); assertEquals("testName", copy.getName()); assertNotNull(copy.getSerializer()); assertTrue(copy.getSerializer() instanceof ListSerializer); assertNotNull(copy.getElementSerializer()); assertEquals(serializer, copy.getElementSerializer());
assertNotNull(taskIO.getNumRecordsInCounter()); assertNotNull(taskIO.getNumRecordsOutCounter()); assertEquals(32L, taskIO.getNumRecordsInCounter().getCount()); assertEquals(64L, taskIO.getNumRecordsOutCounter().getCount()); assertEquals(32L, io.getNumRecordsIn()); assertEquals(64L, io.getNumRecordsOut()); assertEquals(100L, io.getNumBytesInLocal()); assertEquals(150L, io.getNumBytesInRemote()); assertEquals(250L, io.getNumBytesOut());
assertTrue(slotManager.registerSlotRequest(slotRequest1)); assertFalse(slotManager.registerSlotRequest(slotRequest2));
assertNotEquals(snapshot1, snapshot2); assertEquals(snapshot2, tracker.createSnapshot()); assertNotEquals(snapshot2, snapshot3); assertNotEquals(snapshot3, snapshot4); assertEquals(snapshot4, tracker.createSnapshot());
assertEquals("\\\\b \\\\t \\\\n \\\\f \\\\r default", controlString);
assertArrayEquals(expectedArray, hexArray);
assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled()); assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointCoordinatorConfiguration().getCheckpointInterval());
assertEquals(testData.f2, actual);
assertNotNull(ExceptionUtils.STRINGIFIED_NULL_EXCEPTION); assertEquals(ExceptionUtils.STRINGIFIED_NULL_EXCEPTION, ExceptionUtils.stringifyException(null));
assertFalse(rp1.isMatching(rp2)); assertTrue(rp2.isMatching(rp1)); assertFalse(rp1.isMatching(rp3)); assertTrue(rp3.isMatching(rp1)); assertFalse(rp2.isMatching(rp3)); assertFalse(rp3.isMatching(rp2)); assertTrue(rp4.isMatching(rp1)); assertTrue(rp4.isMatching(rp2)); assertTrue(rp4.isMatching(rp3)); assertTrue(rp4.isMatching(rp4));
assertThat(PrometheusReporter.gaugeFrom(new Gauge<Double>() { @Override public Double getValue() { return 3.14; } }).get(), equalTo(3.14));
assertEquals(new Watermark(0), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(new Watermark(25), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertNotNull(externalizedNode); assertEquals(externalizedSettings.externalizeCheckpoints(), externalizedNode.get("enabled").asBoolean()); assertEquals(externalizedSettings.deleteOnCancellation(), externalizedNode.get("delete_on_cancellation").asBoolean());
assertEquals(1, queue.size()); assertTrue(boe.isEvent()); assertEquals(barrier, boe.getEvent());
assertEquals( "{\\"metric\\":\\"testMeter\\",\\"type\\":\\"gauge\\",\\"host\\":\\"localhost\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1.0]]}", DatadogHttpClient.serialize(m));
assertNotNull(stat); assertEquals(0, children.size());
assertTrue(result); assertTrue("The completion time should be at least rertries times delay between retries.", completionTime >= retries * delay.toMilliseconds());
assertEquals(addressString, NetUtils.ipAddressToUrlString(address));
assertEquals(0, checksum.getCount()); assertEquals(0, checksum.getChecksum());
assertEquals(OffsetCommitMode.DISABLED, consumer.getOffsetCommitMode());
assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId()); assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED); assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId()); assertTrue(slot.getState() == TaskManagerSlot.State.FREE); assertNull(slot.getAllocationId());
assertTrue(InstantiationUtil .hasPublicNullaryConstructor(StringValue.class));
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertFalse(resultSet.next()); assertEquals(TEST_DATA[recordCount].id, resultSet.getObject("id")); assertEquals(TEST_DATA[recordCount].title, resultSet.getObject("title")); assertEquals(TEST_DATA[recordCount].author, resultSet.getObject("author")); assertEquals(TEST_DATA[recordCount].price, resultSet.getObject("price")); assertEquals(TEST_DATA[recordCount].qty, resultSet.getObject("qty")); assertEquals(3, recordCount);
assertEquals(1000, TaskManagerServices.calculateHeapSizeMB(1000, config)); assertEquals(890, TaskManagerServices.calculateHeapSizeMB(1000, config)); assertEquals(810, TaskManagerServices.calculateHeapSizeMB(1000, config));
assertEquals(expected, type);
assertEquals(2, attributeInfos.length); assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, "Rate")); assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, "Count"));
assertEquals(1, queues[0].size()); assertEquals(1, queues[1].size()); assertTrue(buffer.isRecycled());
assertEquals(0, count);
assertNotNull(schema); assertArrayEquals(getNestedFieldNames(), schema.getColumnNames()); assertArrayEquals(getNestedFieldTypes(), schema.getTypes());
assertEquals(5, m.getCount());
assertEquals(155L, MemorySize.parseBytes(" 155 ")); assertEquals(155L, MemorySize.parseBytes(" 155 bytes "));
assertEquals(150, kpc.getRateLimit());
assertThat(fixedPort1.getReporters(), hasSize(1)); assertThat(fixedPort2.getReporters(), hasSize(0));
assertEquals(recNoTimestamp, recNoTimestampCopy); assertEquals(recWithTimestamp, recWithTimestampCopy);
assertTrue(ResourceProfile.UNKNOWN.isMatching(ResourceProfile.UNKNOWN));
assertTrue(taskResults[i].get());
assertEquals(4, sorted.size());
assertNotNull(groupId); assertFalse(constraint1 == constraint2); assertFalse(constraint1 == constraint3); assertFalse(constraint2 == constraint3); assertEquals(groupId, constraint1.getGroupId()); assertEquals(groupId, constraint2.getGroupId()); assertEquals(groupId, constraint3.getGroupId());
assertTrue(exceptionWasThrown.get());
assertNotSame(serializerA, serializerB); assertNotSame(listSerializerA, listSerializerB);
assertEquals(TARGET_KEYSTORE_PATH.getPath(), spec.getDynamicConfiguration().getString(SecurityOptions.SSL_KEYSTORE)); assertEquals(TARGET_TRUSTSTORE_PATH.getPath(), spec.getDynamicConfiguration().getString(SecurityOptions.SSL_TRUSTSTORE));
assertEquals(12, kpc.getThreadPoolSize());
assertThat(PrometheusReporter.gaugeFrom(new Gauge<Boolean>() { @Override public Boolean getValue() { return true; } }).get(), equalTo(1.));
assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(1, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(2, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]);
assertEquals(2.0, m.getRate(), 0.1); assertEquals(2.0, m.getRate(), 0.1); assertEquals(3.0, m.getRate(), 0.1); assertEquals(4.0, m.getRate(), 0.1); assertEquals(2.0, m.getRate(), 0.1); assertEquals(0.0, m.getRate(), 0.1);
assertFalse(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config));
assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty());
assertNotNull("Expected an existing lock", stat); assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren()); assertNull("State node should have been removed.",stat);
assertEquals("meter", md.name); assertEquals(5.0, md.rate, 0.1); assertEquals(info, md.scopeInfo); assertEquals(METRIC_CATEGORY_METER, md.getCategory());
assertEquals("file", u.getScheme()); assertEquals(null, u.getAuthority()); assertEquals(FileSystem.getLocalFileSystem().getWorkingDirectory().toUri().getPath() + "/" + path, u.getPath()); assertEquals("file", u.getScheme()); assertEquals(null, u.getAuthority()); assertEquals(path, u.getPath());
assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config));
assertNotNull(value); assertFalse(value.iterator().hasNext());
assertEquals(ExecutionState.FAILED, task.getExecutionState());
assertFalse(InstantiationUtil.isProperClass(Value.class));
assertEquals(msg.getClass(), NettyMessage.ErrorResponse.class); assertTrue(err.cause instanceof CancelTaskException);
assertEquals(boe, tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked());
assertEquals(expected, type);
assertTrue(writer.equals(other)); assertFalse(writer.equals(other));
assertEquals( "{\\"metric\\":\\"testMeter\\",\\"type\\":\\"gauge\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1.0]]}", DatadogHttpClient.serialize(m));
assertEquals(KinesisProducerConfiguration.ThreadingModel.PER_REQUEST, kpc.getThreadingModel());
assertThat(reporter.filterCharacters(""), equalTo("")); assertThat(reporter.filterCharacters("abc"), equalTo("abc")); assertThat(reporter.filterCharacters("a:b$%^::"), equalTo("a:b$%^::"));
assertEquals(OffsetCommitMode.KAFKA_PERIODIC, consumer.getOffsetCommitMode());
assertEquals(true, file.exists()); assertEquals(false, file.exists());
assertEquals(keySet.size(), 1); assertEquals(keySet.iterator().next(), expectedKey); assertTrue(keySet.isEmpty());
assertFalse(cm.reportHeartBeat(new InstanceID()));
assertNotNull(subpartition.createReadView(new BufferAvailabilityListener() { @Override public void notifyBuffersAvailable(long numBuffers) { } }));
assertNotNull(returnType); assertTrue(returnType instanceof RowTypeInfo); assertEquals(expected, rowType);
assertEquals( "{\\"metric\\":\\"testCounter\\",\\"type\\":\\"counter\\",\\"tags\\":[\\"tag1\\",\\"tag2\\"],\\"points\\":[[123,1]]}", DatadogHttpClient.serialize(c));
assertEquals(ExecutionState.FINISHED, task.getExecutionState());
assertTrue(ExceptionUtils.stripExecutionException(e) instanceof RpcException);
assertFalse(reader.isReleased()); assertTrue(reader.isReleased());
assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(1, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(2, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]);
assertEquals(true, cause.getMessage().contains(CoreOptions.SAVEPOINT_DIRECTORY.key()));
assertEquals(original, serCopy); assertEquals(original, serCopy);
assertEquals(0L, new StreamRecord<>("test", 0).getTimestamp()); assertEquals(-1L, new StreamRecord<>("test", -1).getTimestamp()); assertEquals(1L, new StreamRecord<>("test", 1).getTimestamp()); assertEquals(Long.MIN_VALUE, new StreamRecord<>("test", Long.MIN_VALUE).getTimestamp()); assertEquals(Long.MAX_VALUE, new StreamRecord<>("test", Long.MAX_VALUE).getTimestamp());
assertTrue(serializer instanceof ListSerializer); assertTrue(elementSerializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(serializer instanceof KryoSerializer);
assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertEquals(val1, cfg.getString(desig1, null)); assertEquals(val2, cfg.getString(desig2, null)); assertEquals(val3_desig, cfg.getString(desig3, null)); assertFalse(key.startsWith(designatedPrefix3)); assertFalse(key.startsWith(deprecatedPrefix3));
assertThat(resourceManager.workersInNew, hasEntry(extractResourceID(task1), expected));
assertFalse(ExceptionUtils.isJvmFatalError(new Error())); assertFalse(ExceptionUtils.isJvmFatalError(new LinkageError())); assertTrue(ExceptionUtils.isJvmFatalError(new InternalError())); assertTrue(ExceptionUtils.isJvmFatalError(new UnknownError()));
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertEquals("/my/path_123", p.toUri().getPath()); assertEquals("/my/path/abc", p.toUri().getPath()); assertEquals("/C:/my/windows/path/abc", p.toUri().getPath());
assertEquals(17, timerService.currentProcessingTime()); assertEquals(42, timerService.currentProcessingTime());
assertThat(PrometheusReporter.gaugeFrom(new Gauge<Short>() { @Override public Short getValue() { return 13; } }).get(), equalTo(13.));
assertTrue(mapState.contains(1L)); assertEquals(5L, value); assertTrue(mapState.contains(2L)); assertEquals(5L, value);
assertEquals("counter", cd.name); assertEquals(4, cd.count); assertEquals(info, cd.scopeInfo); assertEquals(METRIC_CATEGORY_COUNTER, cd.getCategory());
assertFalse(fs.rename(srcFilePath, destFilePath));
assertEquals(FileSystemKind.FILE_SYSTEM, fs.getKind());
assertTrue(InstantiationUtil.isProperClass(StringValue.class));
assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertFalse(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1)); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1));
assertEquals(1, params.containerVolumes().size()); assertEquals("/container/path", params.containerVolumes().get(0).getContainerPath()); assertEquals("/host/path", params.containerVolumes().get(0).getHostPath()); assertEquals(Protos.Volume.Mode.RO, params.containerVolumes().get(0).getMode());
assertTrue(writer.equals(other)); assertFalse(writer.equals(other));
assertEquals(2, p.depth()); assertEquals(3, p.depth()); assertEquals(12, p.depth()); assertEquals(0, p.depth()); assertEquals(4, p.depth());
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertEquals(AkkaUtils.getAddress(actorSystem).port().get(), akkaRpcService.getPort());
assertEquals(testData.f2, actual);
assertTrue(valueSerializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);
assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(new Watermark(0), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput());
assertFalse(subscription.isDisposed());
assertFalse(subscription.isDisposed());
assertFalse(subscription.isDisposed());
assertNotEquals(rxPreferences.edit(), rxPreferences.edit());
assertFalse(subscription.isDisposed());
assertEquals(1, getAmountFromDbByTable(BLOCKS_TABLE)); assertEquals(0, getAmountFromDbByTable(BLOCKS_TABLE)); assertEquals(1, getAmountFromDbByTable(BLOCKS_TRASH_TABLE));
assertNotNull(editedObj); assertNotNull(voteObj); assertEquals(F_FINAL, voteObj.getFieldByExpr(F_STATE)); assertNull(editedObj.getFieldByExpr("lat")); assertEquals(12346L, editedObj.getFieldByExpr("lon"));
assertEquals(OpBlockChain.UNLOCKED, blc.getStatus());
assertTrue(opBlockChain1.changeToEqualParent(opBlockChain1.getParent()));
assertTrue(opBlockChain.changeToEqualParent(opBlockChain.getParent())); assertNotNull(opBlockChain1);
assertEquals(OpBlockChain.LOCKED_BY_USER, blc.getStatus());
assertTrue(blocksManager.addOperation(op)); assertNotNull(object); assertTrue(blocksManager.addOperation(generateRemoveOp(OBJ_ID))); assertFalse(blockChain.getQueueOperations().isEmpty()); assertNull(object);
assertTrue(blocksManager.addOperation(op)); assertNull(object);
assertEquals(0, amount[0]); assertEquals(40, amount[0]);
assertTrue(dbConsensusManager.validateExistingOperation(opOperation)); assertEquals(1, dbConsensusManager.removeOperations(new HashSet<>(Collections.singletonList(opOperation.getHash())))); assertFalse(dbConsensusManager.validateExistingOperation(opOperation));
assertFalse(opBlockChain.getQueueOperations().isEmpty()); assertEquals(-1, opBlockChain.getLastBlockId()); assertNotNull(opBlockChain.createBlock(serverName, serverKeyPair)); assertTrue(opBlockChain.getQueueOperations().isEmpty()); assertEquals(0, opBlockChain.getLastBlockId());
assertEquals(rootHash, rootHashDuplicate); assertNotEquals(rootHash, rootHash2);
assertNotNull(dbConsensusManager.getOperationByHash(opOperation.getHash())); assertEquals(1, dbConsensusManager.removeOperations(new HashSet<>(Collections.singletonList(opOperation.getHash())))); assertNull(dbConsensusManager.getOperationByHash(opOperation.getHash()));
assertNotNull(voteObj); assertEquals(2, votes.size());
assertNotNull(opBlockChain1.replicateBlock(opBlock)); assertTrue(blcDB.rebaseOperations(opBlockChain1)); assertEquals(blcDB.getParent(), opBlockChain1);
assertTrue(blc.validateOperation(opOperation));
assertNotNull(voteObj); assertEquals(F_OPEN, voteObj.getFieldByExpr(F_STATE));
assertThat(sourceFile.getInt(ApexMetric.CLASSES)).isEqualTo(2);
assertThat(apexLanguage.getFileSuffixes(), is(new String[]{"cls", "trigger"}));
assertThat(repository.name(), equalTo("SonarQube")); assertThat(repository.language(), equalTo("apex")); assertThat(repository.rules().size(), is(CheckList.getChecks().size()));
assertFalse(MethodChecksUtils.hasTestMethodKeyword(parentNode));
assertThat(sourceFile.getInt(ApexMetric.STATEMENTS)).isEqualTo(2);
assertThat(illegaArgumentException) .hasMessage(String.format("No Rule annotation was found on class %s", CheckWithNoAnnotation.class.getName())); assertThat(illegaArgumentException) .hasMessage(String.format("No key is defined in Rule annotation of class %s", EmptyRuleKey.class.getName())); assertThat(illegalStateException) .hasMessage(String.format("No rule was created for class %s in test", UnregisteredRule.class.getName()));
assertFalse(MethodChecksUtils.hasAssertion(nameNodes, SYSTEM_ASSERT_PATTERN));
assertThat(sourceFile.getInt(ApexMetric.LINES)).isEqualTo(12);
assertThat(apexLanguage.getKey(), is("apex")); assertThat(apexLanguage.getName(), is("Apex")); assertThat(apexLanguage.getFileSuffixes(), is(new String[]{"cls", "trigger"}));
assertTrue(MethodChecksUtils.hasTestMethodKeyword(astNode));
assertThat(extensions.size(), is(7));
assertThat(sourceFile.getInt(ApexMetric.METHODS)).isEqualTo(2);
assertThat(profile.getLanguage(), equalTo(Apex.KEY)); assertThat(profile.getName(), equalTo(CheckList.SONAR_WAY_PROFILE)); assertThat(validation.hasErrors(), is(FALSE));
assertFalse(MethodChecksUtils.hasAssertion(nameNodes, SYSTEM_ASSERT_PATTERN));
assertThat(project.getInt(ApexMetric.FILES)).isEqualTo(2);
assertThat(sourceFile.getInt(ApexMetric.LINES_OF_CODE)).isEqualTo(9);
assertFalse(MethodChecksUtils.hasTestMethodKeyword(astNode));
assertThat(sourceFile.getInt(ApexMetric.COMPLEXITY)).isEqualTo(3);
assertEquals("3 min",function.coefficient());
assertFalse(MethodChecksUtils.hasAssertion(new LinkedList<>(), SYSTEM_ASSERT_PATTERN));
assertThat(sourceFile.getInt(ApexMetric.CLASSES)).isEqualTo(1); assertThat(sourceFile.getInt(ApexMetric.COMMENT_LINES)).isEqualTo(9);
assertTrue(MethodChecksUtils.hasAssertion(nameNodes, SYSTEM_ASSERT_PATTERN));
assertEquals("2 min",function.coefficient());
assertFalse(MethodChecksUtils.hasTestMethodKeyword(parentNode));
assertEquals("2 min",function.coefficient());
assertEquals(3, result.size());
assertEquals(result, writer.pathToString(list));
assertEquals("sum", 6, result);
assertEquals("a", writer.pathToString(list));
assertTrue(lines.contains("a.jar")); assertEquals(1, lines.size());
assertTrue(edges.contains(edge));
assertTrue(lines.contains("hello")); assertEquals(1, lines.size());
assertTrue(edges.contains(edge)); assertTrue(edges.contains(edge));
assertEquals(before, after);
assertEquals("sum", 6, result);
assertTrue(edges.contains(edge)); assertTrue(edges.contains(edge));
assertTrue(lines.contains("A B")); assertEquals(1, lines.size());
assertEquals("", writer.pathToString(list));
assertEquals(before, after);
assertTrue(lines.contains(classPath)); assertEquals(1, lines.size());
assertTrue(edges.contains(edge));
assertEquals("first", graph[0]); assertTrue(graph[1].contains("first") && graph[1].contains("hi") && graph[1].contains("how"));
assertEquals(3, txns.size()); assertTrue(txns.contains(send1)); assertTrue(txns.contains(send1b)); assertTrue(txns.contains(send1c));
assertEquals(op1, msg1.getOutPoints().get(0)); assertEquals(op2, msg2.getOutPoints().get(0)); assertEquals(1, msg1.getOutPoints().size()); assertFalse(future1.isDone()); assertEquals(future1.get(), response1); assertEquals(future2.get(), response2);
assertEquals(toAddress, ScriptBuilder.createOutputScript(toKey).getToAddress(PARAMS, true)); assertEquals(toAddress, ScriptBuilder.createOutputScript(toAddress).getToAddress(PARAMS, true)); assertEquals(scriptAddress, p2shScript.getToAddress(PARAMS, true));
assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, Utils.reverseBytes(new byte[]{5, 4, 3, 2, 1}));
assertFalse(peer.removeDisconnectedEventListener(listener)); assertTrue(peer.removeDisconnectedEventListener(listener)); assertFalse(peer.removeDisconnectedEventListener(listener));
assertEquals(tx, result[0]);
assertEquals(base58, Address.fromBase58(null, base58).toBase58());
assertEquals("yjSeawEuRUJDpr9FMmGx1oFtPrEjQG3vkg", a.toString()); assertFalse(a.isP2SHAddress()); assertEquals("XhSqUwiG6PGjRCXD5sksyvRNE1ZV8jkaVC", b.toString()); assertFalse(b.isP2SHAddress());
assertEquals("Hello World", testObject.getMessage());
assertArrayEquals(new byte[] { 0x01, ((byte) 133) }, builder.build().getProgram());
assertEquals("000000000000000000000000000000000000000000000000000000000000000a", key.getPrivateKeyAsHex());
assertEquals("04a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7893aba425419bc27a3b6c7e693a24c696f794c2ed877a1593cbee53b037368d7", key.getPublicKeyAsHex());
assertArrayEquals(new byte[] { 0x02, 0x4a, 0x52 }, builder.build().getProgram()); assertEquals(4, builder.build().getProgram().length); assertArrayEquals(new byte[] { 0x03, 0x00, (byte) 0x80, 0x00 }, builder.build().getProgram());
assertEquals(0, Utils.maxOfMostFreq()); assertEquals(0, Utils.maxOfMostFreq(0, 0, 1)); assertEquals(2, Utils.maxOfMostFreq(1, 1, 2, 2)); assertEquals(1, Utils.maxOfMostFreq(1, 1, 2, 2, 1)); assertEquals(-1, Utils.maxOfMostFreq(-1, -1, 2, 2, -1));
assertTrue("script is locktime-verify", script.isSentToCLTVPaymentChannel());
assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(1416135273781L)); assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(new Date(1416135273781L)));
assertEquals(1, getdata.getItems().size()); assertEquals(tx.getHash(), getdata.getItems().get(0).hash); assertEquals(value, wallet.getBalance(Wallet.BalanceType.ESTIMATED));
assertTrue(ScriptBuilder.createOutputScript(p2shAddress).isPayToScriptHash());
assertEquals(e.verCode, MainNetParams.get().getAddressHeader()); assertTrue(Arrays.equals(e.acceptableVersions, TestNet3Params.get().getAcceptableAddressCodes()));
assertEquals(MainNetParams.get().getId(), params.getId()); assertEquals(TestNet3Params.get().getId(), params.getId());
assertTrue(e.getCause() instanceof ProtocolException); assertTrue((e.getCause() != null && e.getCause() instanceof CancelledKeyException) || (e instanceof SocketException && e.getMessage().equals("Socket is closed")));
assertNull(new BitcoinURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?label=").getLabel());
assertTrue(scriptPubKeys.containsKey(input.getOutpoint()));
assertNotEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertNotEquals(0, wallet.getTransactions(false).size()); assertNotEquals(0, wallet.getUnspents().size()); assertEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertEquals(0, wallet.getTransactions(false).size()); assertEquals(0, wallet.getUnspents().size());
assertEquals("21 Apr 2017 05:01:31 GMT", block.getTime().toGMTString());
assertNotNull(vtx[0]); assertNull(vtx[0]); assertEquals(t2, vtx[0]);
assertEquals(2, chain.getKeys(false).size());
assertEquals(12, wallet.getKeyChainSeed().getMnemonicCode().size());
assertArrayEquals("Payload Data does not match", payloadDataToConfirm, cbtx.getPayload()); assertEquals(txId, tx.getHash()); assertEquals(1530, cbtx.getHeight()); assertArrayEquals("Coinbase transaction does not match it\'s data", txdata, stream.toByteArray());
assertEquals(expectedAddress, gotAddress);
assertEquals("PUSHDATA(1)[11] 16 15 15 16 PUSHDATA(1)[11]", script.toString());
assertFalse(isConsistent);
assertEquals("aardvark=zebra", new BitcoinURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?label=aardvark=zebra").getLabel());
assertTrue(scriptPubKeys.containsKey(input.getOutpoint()));
assertEquals( "BitcoinURI[\'amount\'=\'654321000000000\',\'label\'=\'Hello World\',\'message\'=\'Be well\',\'address\'=\'"+CoinDefinition.UNITTEST_ADDRESS+"\']", testObject.toString());
assertFalse(wallet.isAddressWatched(watchedAddress)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertArrayEquals(new byte[] { 0x55 }, builder.build().getProgram());
assertTrue(e.getMessage().contains("address"));
assertTrue(result > 0);
assertTrue(testNetChain.add(getBlock1())); assertTrue(testNetChain.add(b2)); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Difficulty target is bad")); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Unexpected change in difficulty"));
assertEquals(1, flag.get());
assertTrue(a1.isP2SHAddress()); assertNotEquals(a1, a2); assertEquals(((group.getLookaheadSize() + group.getLookaheadThreshold()) * 2) + (2 - group.getLookaheadThreshold()) + group.getActiveKeyChain().getAccountPath().size() + 3 , group.numKeys()); assertEquals(a2, a3);
assertTrue(s.isSentToRawPubKey());
assertEquals(1, message.getItems().size()); assertEquals(tx.getHash(), message.getItems().get(0).hash); assertNotEquals(0, tx.getConfidence().numBroadcastPeers()); assertNull(outbound(writeTarget2));
assertTrue(a1.isP2SHAddress()); assertEquals(a1, a2); assertNotEquals(a2, a3);
assertFalse(peer.removeConnectedEventListener(listener)); assertTrue(peer.removeConnectedEventListener(listener)); assertFalse(peer.removeConnectedEventListener(listener));
assertTrue(result < 0);
assertArrayEquals(new byte[] { 0x00 }, builder.build().getProgram());
assertEquals("1.00 AXE", COIN.toFriendlyString()); assertEquals("1.23 AXE", valueOf(1, 23).toFriendlyString()); assertEquals("0.001 AXE", COIN.divide(1000).toFriendlyString()); assertEquals("-1.23 AXE", valueOf(1, 23).negate().toFriendlyString());
assertEquals("0", MonetaryFormat.UBTC.noCode().shift(0).format(Coin.ZERO).toString()); assertEquals("dAXE 0", MonetaryFormat.UBTC.noCode().code(1, "dAXE").shift(1).format(Coin.ZERO).toString());
assertEquals(DefaultRiskAnalysis.RuleViolation.NONE, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.SHORTEST_POSSIBLE_PUSHDATA, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.NONE, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.SHORTEST_POSSIBLE_PUSHDATA, DefaultRiskAnalysis.isStandard(tx));
assertFalse(resultFuture.isDone()); assertEquals(message.getItems().get(0).hash, b2.getHash()); assertFalse(resultFuture.isDone()); assertEquals(b, b2);
assertFalse(wallet.isWatching()); assertTrue(watchingWallet.isWatching()); assertFalse(wallet.isWatching());
assertEquals(nanos, tx1.getValueSentToMe(wallet)); assertTrue(tx1.getWalletOutputs(wallet).size() >= 1); assertEquals(nanos, send2.getValueSentFromMe(wallet)); assertEquals(ZERO.subtract(valueOf(0, 10)), send2.getValue(wallet));
assertTrue(group.isWatching());
assertEquals("Hello World", testObject.getLabel());
assertTrue( resultBytes < 0 ); assertTrue( resultsString < 0 );
assertTrue(e.getMessage().contains("amount")); assertTrue(e.getMessage().contains("amount"));
assertNull(new BitcoinURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?message=").getMessage());
assertFalse(future.isDone()); assertFalse(future.isDone()); assertFalse(future.isDone()); assertTrue(peerGroup.waitForPeersOfVersion(1, newVer).isDone()); assertTrue(future.isDone());
assertNull(outbound(writeTarget));
assertTrue(e.getMessage().contains("Bad address"));
assertTrue(wallet.isConsistent()); assertEquals("Wrong number of PENDING", 1, wallet.getPoolSize(WalletTransaction.Pool.PENDING)); assertEquals("Wrong number of UNSPENT", 0, wallet.getPoolSize(WalletTransaction.Pool.UNSPENT)); assertEquals("Wrong number of ALL", 2, wallet.getTransactions(true).size()); assertEquals(valueOf(0, 50), wallet.getBalance(Wallet.BalanceType.ESTIMATED));
assertEquals(BigInteger.valueOf(1048592), work);
assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax"));
assertEquals(tx.toString().contains("No inputs!"), true);
assertFalse(isConsistent);
assertFalse(resultFuture.isDone()); assertEquals(message.getItems().get(0).hash, b3.getHash()); assertFalse(resultFuture.isDone()); assertEquals(b, b3);
assertEquals(altNetwork.getId(), params.getId()); assertEquals(MainNetParams.get().getId(), params.getId());
assertEquals(1, wallet.getImportedKeys().size()); assertEquals(key, wallet.getImportedKeys().get(0)); assertEquals("5ca8cd6c01aa004d3c5396c628b78a4a89462f412f460a845b594ac42eceaa264b0e14dcd4fe73d4ed08ce06f4c28facfa85042d26d784ab2798a870bb7af556", seed);
assertTrue(Integer.toString(i), ch.isShortestPossiblePushData());
assertEquals("OP_0 push length", 0, stack.get(0).length);
assertFalse(wallet.isAddressWatched(addr)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertEquals(1, watchedAddresses.size()); assertEquals(watchedAddress, watchedAddresses.get(0));
assertEquals(message.getLocator(), expectedLocator); assertEquals(Sha256Hash.ZERO_HASH, message.getStopHash());
assertTrue(currentUserDto.isLoggedIn()); assertEquals(userDto, currentUserDto.getUser());
assertFalse(check);
assertNotNull(fetchUser);
assertTrue(check);
assertFalse(currentUserDto.isLoggedIn()); assertNull(currentUserDto.getUser());
assertEquals(RANDOM_PARTITIONER, partitioner);
assertEquals(200, response.getStatus()); assertEquals(expectedJsonString, response.getEntity()); assertNotNull(result); assertTrue(!result.isEmpty()); assertEquals(200, defaultResponse.getStatus()); assertEquals(expectedJsonString, defaultResponse.getEntity()); assertEquals(result, expected); assertEquals(404, badResponse.getStatus());
assertEquals(200, response.getStatus()); assertEquals("seed1,seed2,seed3", response.getEntity());
assertEquals(exception, e.getCause());
assertEquals(200, response.getStatus()); assertEquals(token, response.getEntity());
assertEquals(200, response.getStatus()); assertEquals( GsonJsonSerializer.getGson().toJson(getBackupVerificationResult()), response.getEntity().toString());
assertEquals(200, response.getStatus()); assertEquals("127.0.0.1", instanceIdentity.getReplacedIp()); assertTrue(instanceIdentity.isReplace()); assertEquals(400, response.getStatus());
assertEquals("instance1\\ninstance2\\ninstance3\\n", resource.getInstances());
assertEquals(500, response.getStatus());
assertEquals(A_PARTITIONER, partitioner);
assertEquals( "0 * * * * ? *", PriamConfigurationPersister.getTimer(fakeConfiguration).getCronExpression());
assertEquals(BOP_PARTITIONER, partitioner);
assertEquals(404, e.getResponse().getStatus()); assertEquals( "No priam instance with id " + NODE_ID + " found", e.getResponse().getEntity());
assertEquals(201, response.getStatus()); assertEquals("/" + NODE_ID, response.getMetadata().getFirst("location").toString());
assertEquals(500, response.getStatus());
assertEquals(200, response.getStatus()); assertEquals(response.getEntity().toString(), "No valid meta found!");
assertEquals(200, response.getStatus()); assertEquals("true", response.getEntity());
assertEquals(500, response.getStatus());
assertEquals(200, response.getStatus()); assertEquals( GsonJsonSerializer.getGson().toJson(new ArrayList<>()), response.getEntity().toString());
assertEquals(200, response.getStatus()); assertEquals( GsonJsonSerializer.getGson().toJson(backupMetadataList), response.getEntity().toString());
assertEquals(MURMUR_PARTITIONER, partitioner);
assertEquals(200, response.getStatus()); assertEquals(replacedIp, response.getEntity());
assertEquals(204, response.getStatus());
assertEquals(A_PARTITIONER, partitioner);
assertEquals(200, response.getStatus()); assertEquals("[\\"ok\\"]", response.getEntity()); assertEquals( MediaType.APPLICATION_JSON_TYPE, response.getMetadata().get("Content-Type").get(0));
assertEquals(200, response.getStatus()); assertNotNull(result); assertTrue(!result.isEmpty()); assertEquals(200, response.getStatus()); assertEquals(expectedJsonString, response.getEntity()); assertEquals(result, expected); assertEquals(404, badResponse.getStatus());
assertEquals(404, e.getResponse().getStatus()); assertEquals( "No priam instance with id " + NODE_ID + " found", e.getResponse().getEntity());
assertEquals(200, response.getStatus()); assertEquals("[\\"ok\\"]", response.getEntity()); assertEquals( MediaType.APPLICATION_JSON_TYPE, response.getMetadata().get("Content-Type").get(0));
assertEquals(500, response.getStatus());
assertEquals(204, response.getStatus()); assertEquals( response.getEntity().toString(), "No valid meta found for provided time range");
assertTrue(structuredJson.toFile().exists()); assertEquals(myMap.get("backupLocation"), fakeConfiguration.getBackupLocation());
assertEquals(expected, resource.getInstance(NODE_ID));
assertEquals(200, response.getStatus());
assertEquals(200, response.getStatus()); assertEquals( GsonJsonSerializer.getGson().toJson(getBackupVerificationResult()), response.getEntity().toString());
assertEquals(500, response.getStatus());
assertEquals(BOP_PARTITIONER, partitioner);
assertThat(resource, not(mockResource)); assertThat(resource, notNullValue());
assertThat(path, is("../foo-1.0-SNAPSHOT-someClassifier.woa/Contents/test"));
assertThat(path, is("../foo-bar-project.woa/Contents/test"));
assertThat(resource, is(mockResource));
assertEquals("C:/Documents and Settings/User/.m2/repository", result);
assertThat(folder.getAbsolutePath(), containsString("foo-1.0-SNAPSHOT.woa/Contents/Frameworks"));
assertThat(mojo.getArtifactFile().getName(), is("foo-1.0-SNAPSHOT-someClassifier.woapplication"));
assertThat(mojo.getArtifactFile().getName(), is("foo-1.0-SNAPSHOT.woapplication"));
assertThat(folder.getAbsolutePath(), containsString("foo-1.0-SNAPSHOT-someClassifier.woa/Contents/Frameworks"));
assertThat(resource.getDirectory(), is(resourceDirectoryNotAvailable));
assertThat(folder.getAbsolutePath(), containsString("foo-bar-name.woa/Contents/Frameworks"));
assertThat(path, is("../foo-1.0-SNAPSHOT.woa/Contents/test"));
assertThat(integer).isEqualTo((int) pointer);
assertThat(nativeCLongRead).isEqualTo(cLong.longValue());
assertThat(JNITestUtil.getByte(shortPointer.address)).isEqualTo((byte) 0x67); assertThat(JNITestUtil.getByte(shortPointer.address + 1)).isEqualTo((byte) 0x45); assertThat(JNITestUtil.getByte(shortPointer.address + 2)).isEqualTo((byte) 0x01); assertThat(JNITestUtil.getByte(shortPointer.address + 3)).isEqualTo((byte) 0x89);
assertThat(voidPointer.address).isEqualTo(pointer);
assertThat(readGlobalVarFuncPointer.get() .invoke()).isEqualTo(10); assertThat(globalVar.get()).isEqualTo(10);
assertThat(longPointer.get(i)).isEqualTo(0);
assertThat(address).isNotEqualTo(0L);
assertThat(JNITestUtil.getByte(bytePointer.address)).isEqualTo(b0); assertThat(JNITestUtil.getByte(bytePointer.address + 1)).isEqualTo(b1); assertThat(JNITestUtil.getByte(bytePointer.address + 2)).isEqualTo(b2);
assertThat((float) JNITestUtil.getDouble(doublePointer.address)).isEqualTo((float) d0); assertThat((float) JNITestUtil.getDouble(doublePointer.address + 8)).isEqualTo((float) d1);
assertThat(JNITestUtil.getFloat(floatPointer.address)).isEqualTo(f0); assertThat(JNITestUtil.getFloat(floatPointer.address + 4)).isEqualTo(f1);
assertThat(integerPointer.get()).isEqualTo(0x00F77F8F);
assertThat(bytePointerPointer.get() .get() .get(4)).isEqualTo(b4);
assertThat(JNITestUtil.getCLong(cLongPointer.address)).isEqualTo(cl0.longValue()); assertThat(JNITestUtil.getCLong(cLongPointer.address + sizeof((CLong) null))).isEqualTo(cl1.longValue());
assertEquals("GBP 1.476",price.toString());
assertThat(memoAccount.getBalance(), equalTo(10L));
assertThat(testObject.getBalance(), equalTo(0L));
assertThat(memoAccount.getBalance(), equalTo(0L));
assertThat(memoAccount.getBalance(), equalTo(9L));
assertThat(memoAccount.getBalance(), equalTo(0L));
assertThat(account1.getBalance(), equalTo(-10L)); assertThat(account2.getBalance(), equalTo(10L));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertFalse(new DeweyVersion("1.0").isCompatible(new DeweyVersion("2.0"))); assertTrue(new DeweyVersion("1.0.0").isCompatible(new DeweyVersion("1.0"))); assertTrue(new DeweyVersion("1.1").isCompatible(new DeweyVersion("1.0"))); assertFalse(new DeweyVersion("1.0").isCompatible(new DeweyVersion("1.1")));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(new DeweyVersion("1.0.1").toString(), "1.0.1");
assertEquals("1", new DeweyVersion(1).toString());
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(2, s.size()); assertEquals(expected1, s.get(0)); assertEquals(expected2, s.get(1));
assertEquals(2, s.size()); assertEquals(expected, s.get(0)); assertEquals(expected2, s.get(1));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(2, s.size()); assertEquals(expected1, s.get(0)); assertEquals(expected2, s.get(1));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(3, s.size()); assertEquals(expected, s.get(0)); assertEquals(expected2, s.get(1)); assertEquals(expected3, s.get(2));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(1, s.size()); assertEquals(expected, s.get(0));
assertEquals(validatorSet.map.size(), 1);
assertEquals(validatorSet.map.size(), 3);
assertEquals(validatorSet.map.size(), 2);
assertNotNull(instance);
assertNotNull(instance);
assertNotNull(instance);
assertEquals(true, testMedia.getActiveCamera() != null); assertEquals(true, testLobby.gameInProgress()); assertEquals(true, testMedia.isStreaming()); assertEquals(false, testMedia.isStreaming());
assertEquals(null, testMedia.getActiveCamera()); assertEquals(true, testMedia.getActiveCamera() != null);
assertEquals(GameType.getDefault(), testLobby.getCurrentGameType()); assertEquals(GameType.FREETEST, testLobby.getCurrentGameType()); assertEquals(GameType.LIGHTCYCLES, testLobby.getCurrentGameType());
assertEquals(1, testListener.getNumEvents()); assertEquals("Test Message", testListener.getLastChatEvent().getMessage()); assertEquals(0, testListener.getNumEvents());
assertEquals(GameType.TANK_SIMULATION, testLobby.getCurrentGameType()); assertEquals(GameType.LIGHTCYCLES, testLobby.getCurrentGameType()); assertEquals(GameType.LIGHTCYCLES, testLobby.getCurrentGameType());
assertEquals(testRobots.get(i), testListener.getLastRobotEvent().getRobot()); assertEquals(ServerLobbyEvent.EVENT_ROBOT_REGISTERED, testListener.getLastRobotEvent().getEventType()); assertEquals(false, testLobby.registerRobot(testRobots.get(TEST_MAX_ROBOTS))); assertEquals(false, testLobby.registerRobot(null)); assertEquals(0, testListener.getNumEvents());
assertEquals(GameType.FREETEST, testController.getGameModel().getGameType()); assertEquals(GameType.TANK_SIMULATION, testController.getGameModel().getGameType()); assertEquals(GameType.LIGHTCYCLES, testController.getGameModel().getGameType());
assertEquals(null, testLobby.getCurrentGame()); assertTrue(testLobby.getCurrentGame() != null); assertEquals(null, testLobby.getCurrentGame());
assertEquals(testUsers.get(i).getUser(), testListener.getLastUserEvent().getUser()); assertEquals(ServerLobbyEvent.EVENT_PLAYER_JOINED, testListener.getLastUserEvent().getEventType()); assertEquals(false, testLobby.addUserProxy(testUsers.get(TEST_MAX_PLAYERS))); assertEquals(false, testLobby.addUserProxy(null)); assertEquals(0, testListener.getNumEvents());
assertEquals(0, testListener.getNumEvents()); assertEquals(0, testListener.getNumEvents()); assertEquals(testUser.getUser(), testListener.getLastUserEvent().getUser());
assertEquals("Test Server", testLobby.getServerName());
assertEquals(null, testRemove.getLastChatEvent()); assertEquals(0, testRemove.getNumEvents());
assertEquals("Test Chat", testAdd.getLastChatEvent().getMessage()); assertEquals(1, testAdd.getNumEvents());
assertEquals(TEST_PORT, testMedia.getPort());
assertEquals(0, testListener.getNumEvents()); assertEquals(0, testListener.getNumEvents()); assertEquals(testRobot, testListener.getLastRobotEvent().getRobot()); assertEquals(ServerLobbyEvent.EVENT_ROBOT_UNREGISTERED, testListener.getLastRobotEvent().getEventType());
assertEquals(true, camList.contains(activeCam));
assertEquals(true, testLobby.isUsernameRegistered("RegisteredName")); assertEquals(false, testLobby.isUsernameRegistered("NotRegistered")); assertEquals(false, testLobby.isUsernameRegistered(null));
assertEquals("Test Server", testLobby.getServerName()); assertEquals(GameType.getDefault(), testLobby.getCurrentGameType()); assertEquals(null, testLobby.getCurrentGame());
assertEquals(null, testLobby.getRobotProxy("NotRegistered")); assertEquals(testRobot, testLobby.getRobotProxy("Registered")); assertEquals(null, testLobby.getRobotProxy(null));
assertEquals(false, testLobby.gameInProgress()); assertEquals(true, testLobby.gameInProgress()); assertEquals(false, testLobby.gameInProgress());
assertTrue(testLobby.getCurrentGame() != null); assertEquals(null, testLobby.getCurrentGame()); assertEquals(ServerLobbyEvent.EVENT_GAME_OVER, testListener.getLastGameEvent().getEventType());
assertEquals(Object.class, type.getRawClass());
assertThat(file.list.get(0).getMessage()).isEqualTo("hello world"); assertThat(console.list.get(0).getMessage()).isEqualTo("hello world");
assertThat(actual).isEqualTo(" [Four ! Three ! Two ! One]");
assertThat(actual).contains("");
assertThat(actual).isEqualTo(" [Four > Three > Two > One]");
assertThat(actual).isEqualTo(" [Hello world]");
assertThat(adviceConfig.classNames()) .contains("com.tersesystems.logback.bytebuddy.ClassCalledByAgent");
assertThat(s) .isEqualTo( "{\\"exception\\":[{\\"name\\":\\"java.lang.RuntimeException\\",\\"properties\\":{\\"message\\":\\"derp\\"}}]}");
assertThat(actual).isEqualTo("<Four|Three|Two|One>");
assertThat(listAppender.list.get(0).getMessage()).isEqualTo("hello world");
assertThat(actual).isEqualTo(" [Four > Three]");
assertThat(listAppender.list.size()).isEqualTo(0);
assertThat(actual).isEqualTo("two");
assertNotNull(bgpSpeakers); assertEquals(1, bgpSpeakers.size());
assertEquals(true, ConfigReader.initialize(configFileUrl));
assertNotNull(bgpPeers); assertEquals(2, bgpPeers.size());
assertThat(Colors.blend(firstColor, secondColor), is(Colors.blend(firstColor, secondColor, 0.5f)));
assertThat(Colors.blend(firstColor, secondColor, 0f), is(secondColor)); assertThat(Colors.blend(firstColor, secondColor, 1f), is(firstColor)); assertThat(Colors.blend(firstColor, secondColor, 0.5f), is(not(firstColor))); assertThat(Colors.blend(firstColor, secondColor, 0.5f), is(not(secondColor)));
assertThat(Color.alpha(colorWithAlpha), is((int) (ratio * 255))); assertThat(Color.red(colorWithAlpha), is(Color.red(color))); assertThat(Color.green(colorWithAlpha), is(Color.green(color))); assertThat(Color.blue(colorWithAlpha), is(Color.blue(color)));
assertThat(Colors.hexName(Color.RED), is("#ffff0000"));
assertThat(Colors.hexName(Color.RED, false), is("#ff0000"));
assertThat(Colors.darker(color, 0f), is(color)); assertThat(darkerColor, lessThan(color)); assertThat(Color.alpha(darkerColor), is(Color.alpha(color)));
assertThat(Colors.brighter(color, 0f), is(color)); assertThat(brighterColor, greaterThan(color)); assertThat(Color.alpha(brighterColor), is(Color.alpha(color)));
assertThat(offsetPositions, hasSize(1)); assertThat(offsetPositions.get(0).start, is(4)); assertThat(offsetPositions.get(0).end, is(4));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertEquals( Collections.singletonMap("grobid.abc", "value1"), GrobidProperties.getEnvironmentVariableOverrides( Collections.singletonMap("GROBID__ABC", "value1") ) );
assertThat(GenericTaggerUtils.getPlainLabel("I-<status>"), is("<status>"));
assertNotNull("The property has not the value expected", GrobidProperties .getPdfToXMLPath().getAbsolutePath());
assertThat(offsetPositions, hasSize(2)); assertThat(offsetPositions.get(0).start, is(4)); assertThat(offsetPositions.get(0).end, is(6)); assertThat(offsetPositions.get(1).start, is(6)); assertThat(offsetPositions.get(1).end, is(6));
assertEquals( "stringToBoolean value does not match expected result", false, Utilities.stringToBoolean(null));
assertNull(GenericTaggerUtils.getPlainLabel(null));
assertTrue(tokenList.size() > 0); assertTrue(document.getImages().size() == 0); assertTrue(images.size() == 0); assertTrue(document.getPages().size() == 4); assertTrue(document.getBlocks().size() == 26);
assertThat(positions, hasSize(0));
assertThat(target.label("bao"), is("<dummy>"));
assertTrue("GrobidProperties.getInstance() does not return an instance of GrobidProperties", GrobidProperties.getInstance() != null);
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 12), is(true));
assertThat(TextUtilities.dehyphenize("Anonymous. Runtime process infection. Phrack, 11(59):ar-\\n" + " ticle 8 of 18, December 2002."), is("Anonymous. Runtime process infection. Phrack, 11(59):article 8 of 18, December 2002."));
assertThat(GenericTaggerUtils.getPlainLabel("<status>"), is("<status>"));
assertNull(GrobidRestUtils.getAnnotationFor(-1)); assertNull(GrobidRestUtils.getAnnotationFor(4)); assertNull(GrobidRestUtils.getAnnotationFor(3));
assertEquals( Collections.emptyMap(), new EnvironmentVariableProperties( environmentVariables, "APP__.+" ).getProperties() );
assertThat(TextUtilities.dehyphenize("This is hype-\\nnized.We are here."), is("This is hypenized.We are here.")); assertThat(TextUtilities.dehyphenize("This is hype-\\nnized. We are here."), is("This is hypenized. We are here."));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 0), is(true));
assertFalse(GenericTaggerUtils.isBeginningOfEntity("<status>"));
assertEquals( "stringToBoolean value does not match expected result", true, Utilities.stringToBoolean(" TruE "));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(allCounters.size(), is(1)); assertThat(stringLongMap.size(), is(2)); assertThat(stringLongMap.get(TaggingLabels.OTHER.getName()), is(1l)); assertThat(stringLongMap.get(TaggingLabels.ITEM.getName()), is(1l));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertTrue(tokenList.size() > 0); assertThat(images.size(), is(16)); assertThat(document.getImages().size(), is(16)); assertTrue(document.getPages().size() == 4); assertTrue(document.getBlocks().size() == 26);
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 10), is(true));
assertThat(tagger instanceof DummyTagger, is(true));
assertThat(fieldStats.getTotalInstances(), is(4)); assertThat(fieldStats.getCorrectInstance(), is(1)); assertThat(fieldStats.getInstanceRecall(), is(1.0/4)); assertThat(fieldStats.getSupportSum(), is(6L));
assertThat(TextUtilities.dehyphenize("sd. Linux on-the-fly kernel patching without lkm. Phrack, 11(58):article 7 of 15, December 2001."), is("sd. Linux on-the-fly kernel patching without lkm. Phrack, 11(58):article 7 of 15, December 2001."));
assertThat(result, hasSize(43)); assertThat(result.get(0).getText(), is("is")); assertThat(Iterables.getLast(result).getText(), is("!"));
assertThat(positions, hasSize(0));
assertThat(target.tokenizeWithLayoutToken(""), hasSize(0));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(fastMatcher.processToken("\\t"), is(" "));
assertThat(TextUtilities.dehyphenizeHard("This is 1234-\\n44A. Patent."), is("This is 1234-44A. Patent.")); assertThat(TextUtilities.dehyphenizeHard("This is 1234 - \\n44A. Patent."), is("This is 1234 - 44A.Patent."));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(positions, hasSize(2)); assertThat(positions.get(0).start, is(15)); assertThat(positions.get(0).end, is(24)); assertThat(positions.get(1).start, is(19)); assertThat(positions.get(1).end, is(24));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(true));
assertEquals( Collections.emptyMap(), new EnvironmentVariableProperties( environmentVariables, "APP__.+" ).getProperties() );
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 0), is(true));
assertTrue(GenericTaggerUtils.isBeginningOfIOBEntity("B-<status>"));
assertEquals("The property has not the value expected", "org.grobid.core.lang.impl.CybozuLanguageDetectorFactory", GrobidProperties.getLanguageDetectorFactory());
assertThat(labelstat1.getObserved(), is(378)); assertThat(labelstat2.getObserved(), is(6)); assertThat(labelstat1.getExpected(), is(378)); assertThat(labelstat2.getExpected(), is(9)); assertThat(labelstat1.getFalseNegative(), is(0)); assertThat(labelstat2.getFalseNegative(), is(3)); assertThat(labelstat1.getFalsePositive(), is(3)); assertThat(labelstat2.getFalsePositive(), is(0));
assertNotNull("The property has not the value expected", GrobidProperties.getGrobidPropertiesPath().getAbsolutePath());
assertEquals("20050675311", patents.get(0).getNumberEpoDoc()); assertEquals("9202190", patents.get(1).getNumberEpoDoc());
assertNotNull(GrobidProperties .getNativeLibraryPath().getCanonicalFile());
assertThat(target.tokenizeWithLayoutToken(""), hasSize(0));
assertFalse(GenericTaggerUtils.isBeginningOfEntity("<B-status>"));
assertNotNull(output); assertThat(LayoutTokensUtil.toText(output), is("This is hypenized."));
assertThat(TextUtilities.dehyphenize("Nettop also relies on VMware Workstation for its VMM. Ultimately, since VMware is a closed-source product, it is impossible to verify this claim through open review."), is("Nettop also relies on VMware Workstation for its VMM. Ultimately, since VMware is a closed-source product, it is impossible to verify this claim through open review."));
assertThat(TextUtilities.getFirstToken("Secure isolation, and modify"), is("Secure")); assertThat(TextUtilities.getFirstToken(" secure isolation, (and modify"), is("secure")); assertThat(TextUtilities.getFirstToken("\\n secure isolation, and) modify"), is("\\n")); assertThat(TextUtilities.getFirstToken(" \\nsecure isolation, and (modify"), is("\\nsecure")); assertThat(TextUtilities.getFirstToken("\\nsecure isolation, and (modify"), is("\\nsecure"));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 10), is(false));
assertThat(TextUtilities.formatTwoDecimals(0.0002), is("0")); assertThat(TextUtilities.formatTwoDecimals(20000), is("20000")); assertThat(TextUtilities.formatTwoDecimals(2000.00234434), is("2000")); assertThat(TextUtilities.formatTwoDecimals(0.01234434), is("0.01"));
assertThat(result, hasSize(2)); assertThat(result.get(0).getText(), is("is")); assertThat(result.get(1).getText(), is(" "));
assertFalse(GenericTaggerUtils.isBeginningOfEntity("<I-status>"));
assertThat(positions, hasSize(2)); assertThat(positions.get(0).start, is(19)); assertThat(positions.get(0).end, is(28)); assertThat(positions.get(1).start, is(23)); assertThat(positions.get(1).end, is(28));
assertThat(GrobidRestUtils.getAnnotationFor(1), is(GrobidRestUtils.Annotation.BLOCK)); assertThat(GrobidRestUtils.getAnnotationFor(2), is(GrobidRestUtils.Annotation.FIGURE)); assertThat(GrobidRestUtils.getAnnotationFor(0), is(GrobidRestUtils.Annotation.CITATION));
assertThat(target.getCounterEnclosingName(FigureCounters.TOO_MANY_FIGURES_PER_PAGE), is("org.grobid.core.engines.counters.FigureCounters"));
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 8), is(false));
assertThat(labelstat1.getObserved(), is(0)); assertThat(labelstat1.getFalseNegative(), is(5)); assertThat(labelstat1.getSupport(), is(5L)); assertThat(labelstat2.getObserved(), is(0)); assertThat(labelstat2.getFalsePositive(), is(5)); assertThat(labelstat2.getSupport(), is(0L));
assertThat(fastMatcher.processToken("@newline"), is(""));
assertFalse(GrobidProperties.isDeLFTRedirectOutput());
assertThat(fastMatcher.processToken(" "), is(" "));
assertThat(TextUtilities.dehyphenize("This is 1234-44A. Patent."), is("This is 1234-44A. Patent.")); assertThat(TextUtilities.dehyphenize("This is 1234 - 44A. Patent."), is("This is 1234 - 44A. Patent."));
assertThat(fastMatcher.processToken("Hebrew"), is(" Hebrew"));
assertEquals( "stringToBoolean value does not match expected result", false, Utilities.stringToBoolean(" fAlSe "));
assertEquals( Collections.singletonMap("app.abc.xyz", "value1"), new EnvironmentVariableProperties( environmentVariables, "APP__.+" ).getProperties() );
assertThat(target.label(Arrays.asList("bao", "miao", "ciao")), is(equalTo("bao\\t<dummy>\\nmiao\\t<dummy>\\nciao\\t<dummy>")));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 11), is(false));
assertThat(TextUtilities.dehyphenize("Implementation bugs in the VMM can compromise its ability to provide secure isolation, and modify-\\n ing the VMM presents the risk of introducing bugs."), is("Implementation bugs in the VMM can compromise its ability to provide secure isolation, and modifying the VMM presents the risk of introducing bugs."));
assertEquals( "stringToBoolean value does not match expected result", false, Utilities.stringToBoolean(" non boolean value"));
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 7), is(false));
assertNotNull("The Map should be initiated.", timer.getAllSavedTimes()); assertTrue("The Map should be empty", timer.getAllSavedTimes() .isEmpty());
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 10), is(false));
assertEquals("The value of temp dir doesn\'t match the one expected", GrobidProperties .getPropertyValue(GrobidPropertyKeys.PROP_TMP_PATH), GrobidProperties.getTempPath().getAbsolutePath());
assertThat(TextUtilities.dehyphenizeHard("Anonymous. Runtime process infection. Phrack, 11(59):ar-\\n+ " + " ticle 8 of 18, December 2002."), is("Anonymous. Runtime process infection. Phrack, 11(59):article 8 of 18, December 2002."));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 13), is(true));
assertTrue(GenericTaggerUtils.isBeginningOfEntity("I-<status>"));
assertEquals( Collections.singletonMap("app.abc", "value1"), new EnvironmentVariableProperties( environmentVariables, "APP__.+" ).getProperties() );
assertThat(tagger instanceof WapitiTagger, is(true));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertEquals( Collections.singletonMap("app.abc_xyz", "value1"), new EnvironmentVariableProperties( environmentVariables, "APP__.+" ).getProperties() );
assertEquals(positions.size(), 2); assertEquals(positions.get(0).start, 0); assertEquals(positions.get(0).end, 6); assertEquals(positions.get(1).start, 7); assertEquals(positions.get(1).end, 10);
assertEquals( "stringToBoolean value does not match expected result", true, Utilities.stringToBoolean("true"));
assertEquals( "stringToBoolean value does not match expected result", false, Utilities.stringToBoolean(""));
assertThat(TextUtilities.formatFourDecimals(0.0002), is("0.0002")); assertThat(TextUtilities.formatFourDecimals(20000), is("20000")); assertThat(TextUtilities.formatFourDecimals(2000.00234434), is("2000.0023")); assertThat(TextUtilities.formatFourDecimals(0.00234434), is("0.0023"));
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 7), is(false)); assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 24), is(false));
assertEquals( "stringToBoolean value does not match expected result", false, Utilities.stringToBoolean("false"));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(true));
assertThat(TextUtilities.dehyphenize("This is hype- \\n nized. We are here."), is("This is hypenized. We are here.")); assertThat(TextUtilities.dehyphenize("This is hype- \\nnized. We are here."), is("This is hypenized. We are here.")); assertThat(TextUtilities.dehyphenize("This is hype - \\n nized. We are here."), is("This is hypenized. We are here."));
assertThat(offsetPositions, hasSize(2)); assertThat(offsetPositions.get(0).start, is(8)); assertThat(offsetPositions.get(0).end, is(10)); assertThat(offsetPositions.get(1).start, is(10)); assertThat(offsetPositions.get(1).end, is(10));
assertThat(GenericTaggerUtils.getPlainLabel("I-<status>"), is("<status>"));
assertThat(LayoutTokensUtil.doesRequireDehypenisation(layoutTokens, 11), is(true));
assertThat(TextUtilities.getLastToken("secure isolation, and modify"), is("modify")); assertThat(TextUtilities.getLastToken("secure isolation, (and modify"), is("modify")); assertThat(TextUtilities.getLastToken("secure isolation, and) modify"), is("modify")); assertThat(TextUtilities.getLastToken("secure isolation, and (modify"), is("(modify")); assertThat(TextUtilities.getLastToken("secure isolation, .and modify"), is("modify"));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(target.getInstanceRecall(), is(0.0));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(false));
assertThat(labelstat1.getObserved(), is(4)); assertThat(labelstat2.getObserved(), is(0)); assertThat(labelstat1.getExpected(), is(5)); assertThat(labelstat2.getExpected(), is(0)); assertThat(labelstat1.getFalseNegative(), is(1)); assertThat(labelstat2.getFalseNegative(), is(0)); assertThat(labelstat1.getFalsePositive(), is(0)); assertThat(labelstat2.getFalsePositive(), is(1));
assertThat(labelstat1.getObserved(), is(3)); assertThat(labelstat1.getExpected(), is(3)); assertThat(labelstat1.getFalseNegative(), is(0)); assertThat(labelstat1.getFalsePositive(), is(1)); assertThat(labelstat2.getObserved(), is(3)); assertThat(labelstat2.getExpected(), is(4)); assertThat(labelstat2.getFalseNegative(), is(1)); assertThat(labelstat2.getFalsePositive(), is(0));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 10), is(false));
assertThat(TextUtilities.dehyphenizeHard("This is hype- \\n nized. We are here."), is("This is hypenyzed. We are here.")); assertThat(TextUtilities.dehyphenizeHard("This is hype- \\nnized. We are here."), is("This is hypenyzed. We are here.")); assertThat(TextUtilities.dehyphenizeHard("This is hype - \\n nized. We are here."), is("This is hypenyzed. We are here."));
assertThat(TextUtilities.doesRequireDehypenisation(tokens, 9), is(true));
assertThat(TextUtilities.dehyphenizeHard("This is hype-\\nnized.We are here."), is("This is hypenized.We are here.")); assertThat(TextUtilities.dehyphenizeHard("This is hype-\\nnized. We are here."), is("This is hypenized. We are here."));
assertThat(target.getCounterEnclosingName(TaggingLabels.CITATION_MARKER), is("org.grobid.core.engines.label.TaggingLabelImpl"));
assertThat(tagger instanceof DeLFTTagger, is(true));
assertEquals(positions.size(), 3); assertEquals(positions.get(0).start, 0); assertEquals(positions.get(0).end, 2); assertEquals(positions.get(1).start, 3); assertEquals(positions.get(1).end, 5); assertEquals(positions.get(2).start, 8); assertEquals(positions.get(2).end, 10);
assertEquals(positions.size(), 2); assertEquals(positions.get(0).start, 0); assertEquals(positions.get(0).end, 2); assertEquals(positions.get(1).start, 3); assertEquals(positions.get(1).end, 5);
assertThat(labelstat1.getObserved(), is(4)); assertThat(labelstat2.getObserved(), is(1)); assertThat(labelstat1.getExpected(), is(4)); assertThat(labelstat2.getExpected(), is(1)); assertThat(labelstat1.getSupport(), is(4L)); assertThat(labelstat2.getSupport(), is(1L));
assertTrue(shouldVote);
assertFalse(shouldVote);
assertTrue(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertThat(actual).isEqualTo(Model.entriesResponse);
assertFalse(collector.isDone()); assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertFalse(Futures.getUnchecked(collector));
assertThat(ProtoUtils.convert(pojo)).isEqualTo(proto); assertThat(ProtoUtils.convert(proto)).isEqualTo(pojo);
assertThat(future.get(1, TimeUnit.SECONDS)).isEqualTo(Model.voteResponse);
assertThat(client().target("/init").request().post(Entity.json("")).readEntity(Raft.StateType.class)).isEqualTo( Raft.StateType.START);
assertTrue(Futures.getUnchecked(collector));
assertTrue(Futures.getUnchecked(collector));
assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertFalse(Futures.getUnchecked(collector));
assertThat(ProtoUtils.convert(pojo)).isEqualTo(proto); assertThat(ProtoUtils.convert(proto)).isEqualTo(pojo);
assertThat(ProtoUtils.convert(pojo)).isEqualTo(proto); assertThat(ProtoUtils.convert(proto)).isEqualTo(pojo);
assertThat(future.get(1, TimeUnit.SECONDS)).isEqualTo(Model.entriesResponse);
assertTrue(shouldVote);
assertTrue(Futures.getUnchecked(collector));
assertThat(actual).isEqualTo(Model.voteResponse);
assertFalse(Futures.getUnchecked(collector));
assertFalse(shouldVote);
assertFalse(Futures.getUnchecked(collector));
assertTrue(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertFalse(Futures.getUnchecked(collector));
assertFalse(collector.isDone()); assertTrue(collector.isDone()); assertTrue(Futures.getUnchecked(collector));
assertTrue(shouldVote);
assertFalse(Futures.getUnchecked(collector));
assertThat(ProtoUtils.convert(pojo)).isEqualTo(proto); assertThat(ProtoUtils.convert(proto)).isEqualTo(pojo);
assertThat(serializerConfigs) .extracting("typeClass") .contains(String.class);
assertEquals(Serializer.class.getName(), config.getSerializationConfig().getGlobalSerializerConfig().getClassName());
assertEquals(Serializer.class.getName(), config.getSerializationConfig().getGlobalSerializerConfig().getClassName());
assertThat(doubleCodec).isSameAs(mapper.cdouble);
assertThat(handler.getActions(null, FrameUtils.wrapRequest(new Startup()))).isEmpty();
assertThat(uuidCodec).isSameAs(mapper.uuid);
assertThat(selectQuery.matches(FrameUtils.wrapRequest(simpleQueryWithNamedParams))).isTrue();
assertThat(CompletableFutures.getUninterruptibly(logF, 5, TimeUnit.SECONDS).getQuery()) .isEqualTo(query.query); assertThat(CompletableFutures.getUninterruptibly(nodeF, 5, TimeUnit.SECONDS)) .isEqualTo(loggedNode);
assertThat(intCodec).isSameAs(mapper.cint);
assertThat(adapt(WriteType.SIMPLE)).isSameAs(SIMPLE); assertThat(adapt(WriteType.BATCH)).isSameAs(BATCH); assertThat(adapt(WriteType.UNLOGGED_BATCH)).isSameAs(UNLOGGED_BATCH); assertThat(adapt(WriteType.COUNTER)).isSameAs(COUNTER); assertThat(adapt(WriteType.BATCH_LOG)).isSameAs(BATCH_LOG); assertThat(adapt(WriteType.CAS)).isSameAs(CAS);
assertThat(floatCodec).isSameAs(mapper.cfloat);
assertThat(handler.matches(node0, queryFrame("SELECT foo FROM bar"))).isFalse(); assertThat(handler.matches(node0, FrameUtils.wrapRequest(new Startup()))).isFalse(); assertThat(handler.matches(node0, FrameUtils.wrapRequest(Options.INSTANCE))).isFalse();
assertThat(extract(SIMPLE)).isSameAs(WriteType.SIMPLE); assertThat(extract(BATCH)).isSameAs(WriteType.BATCH); assertThat(extract(UNLOGGED_BATCH)).isSameAs(WriteType.UNLOGGED_BATCH); assertThat(extract(COUNTER)).isSameAs(WriteType.COUNTER); assertThat(extract(BATCH_LOG)).isSameAs(WriteType.BATCH_LOG); assertThat(extract(CAS)).isSameAs(WriteType.CAS);
assertThat(address.getAddress()).isEqualTo(expectedAddress); assertThat(address.getPort()).isEqualTo(expectedPort++);
assertThat(CompletableFutures.getUninterruptibly(logF, 5, TimeUnit.SECONDS).getQuery()) .isEqualTo(query.query); assertThat(CompletableFutures.getUninterruptibly(nodeF, 5, TimeUnit.SECONDS)) .isEqualTo(loggedNode);
assertThat(timestampCodec).isSameAs(mapper.timestamp);
assertThat(node.getLogs().getQueryLogs()).hasSize(0);
assertThat(CompletableFutures.getUninterruptibly(logF, 5, TimeUnit.SECONDS).getQuery()) .isEqualTo(query.query); assertThat(CompletableFutures.getUninterruptibly(nodeF, 5, TimeUnit.SECONDS)) .isEqualTo(loggedNode);
assertThat(cluster.getId()).isEqualTo(id); assertThat(cluster.getCassandraVersion()).isEqualTo(version); assertThat(cluster.getName()).isEqualTo(name); assertThat(cluster.getPeerInfo()).isEqualTo(expectedPeerInfo);
assertThat(address.getAddress()).isEqualTo(startingAddress); assertThat(address.getPort()).isEqualTo(expectedPort++);
assertThat(CodecUtils.getTypeFromName("\'IAMCustom\'")).isEqualTo(new RawCustom("IAMCustom")); assertThat(CodecUtils.getTypeFromName("empty")).isEqualTo(new RawCustom("empty"));
assertThat(dc2.getId()).isEqualTo(dc.getId()); assertThat(dc2.getName()).isEqualTo(dc.getName()); assertThat(dc2.getCassandraVersion()).isEqualTo(dc.getCassandraVersion()); assertThat(dc2.getPeerInfo()).isEqualTo(dc.getPeerInfo()); assertThat(dc2.getNodes()).isEmpty();
assertThat(latch.await(100, TimeUnit.MILLISECONDS)).isFalse();
assertThat(cluster.getParent()).isEmpty();
assertThat(tinyintCodec).isSameAs(mapper.tinyint);
assertThat(CodecUtils.getTypeFromName(name)).isNull();
assertThat(timeCodec).isSameAs(mapper.time);
assertThat(decimalCodec).isSameAs(mapper.decimal);
assertThat(dateCodec).isSameAs(mapper.date);
assertThat(handler.matches(null, queryFrame("SELECT foo FROM bar"))).isFalse(); assertThat(handler.matches(null, FrameUtils.wrapRequest(new Startup()))).isFalse(); assertThat(handler.matches(null, FrameUtils.wrapRequest(Options.INSTANCE))).isFalse();
assertThat(timeuuidCodec).isSameAs(mapper.timeuuid);
assertThat(frame).isNull(); assertThat(frame.message).isSameAs(response); assertThat(frame.message).isSameAs(Options.INSTANCE);
assertThat(node.getId()).isEqualTo((long) i); assertThat(node.getDataCenter()).isEqualTo(dc); assertThat(node.getParent()).isEqualTo(Optional.of(dc)); assertThat(dc.getNodes()).contains(node); assertThat(dc.getNodes()).hasSize(5);
assertThat(frame.message).isSameAs(response);
assertThat(CodecUtils.getTypeFromName(name)).isNotNull().isSameAs(rawType);
assertThat(logs.size()).isEqualTo(2); assertThat(log1.getQuery()).isEqualTo("use myks"); assertThat(log1.getConsistency()).isEqualTo(ConsistencyLevel.ONE); assertThat(log2.getQuery()).isEqualTo("select * from table1"); assertThat(log2.getConsistency()).isEqualTo(ConsistencyLevel.QUORUM);
assertThat(inetCodec).isSameAs(mapper.inet); assertThat(e.getCause()).isInstanceOf(UnknownHostException.class);
assertThat(dcs).hasSize(11); assertThat(dc.getNodes()).hasSize(i); assertThat(dc.getId()).isEqualTo(i);
assertThat(asciiCodec).isEqualTo(mapper.ascii);
assertThat(new EmptyReturnMetadataHandler(s).matches(null, queryFrame(s))).isTrue();
assertThat(blobCodec).isSameAs(mapper.blob);
assertThat(CompletableFutures.getUninterruptibly(logF, 5, TimeUnit.SECONDS).getQuery()) .isEqualTo(query.query); assertThat(CompletableFutures.getUninterruptibly(nodeF, 5, TimeUnit.SECONDS)) .isEqualTo(loggedNode);
assertThat(booleanCodec).isSameAs(mapper.bool); assertThat(booleanCodec.decode(Bytes.fromHexString("0x"))).isEqualTo(false);
assertThat(setListDoubleCodec).isSameAs(setListDoubleCodec2);
assertThat(bigintCodec).isSameAs(mapper.bigint);
assertThat(eventLoop.isShutdown()).isTrue();
assertThat(CodecUtils.getTypeFromName(name)).isNull();
assertThat(varintCodec).isSameAs(mapper.varint);
assertThat(nodeActions).hasSize(1); assertThat(nodeAction).isInstanceOf(MessageResponseAction.class); assertThat(node0Message).isRows().hasRows(0);
assertThat(eventLoop.isShutdown()).isTrue();
assertThat(CompletableFutures.getUninterruptibly(logF, 5, TimeUnit.SECONDS).getQuery()) .isEqualTo(query.query); assertThat(CompletableFutures.getUninterruptibly(nodeF, 5, TimeUnit.SECONDS)) .isEqualTo(loggedNode);
assertThat(smallintCodec).isSameAs(mapper.smallint);
assertThat(dc.node(0).getId()).isEqualTo(0); assertThat(dc.node(1).getId()).isEqualTo(1); assertThat(dc.node(2).getId()).isEqualTo(2); assertThat(dc.node(3)).isNull();
assertThat(decrypto.decrypt(encryptedData), is("Android".getBytes(Cryptography.CHARSET_NAME)));
assertThat(decrypted, is(""));
assertThat(encrypted, is(Base64.encodeToString("android".getBytes(Cryptography.CHARSET_NAME), Base64.NO_WRAP)));
assertThat(encrypted, is(nullValue()));
assertThat(e.getCause(), instanceOf(IllegalBlockSizeException.class));
assertThat(decrypto.decrypt(encryptedData), is("Android".getBytes(Cryptography.CHARSET_NAME)));
assertThat(decrypted, is(nullValue()));
assertThat(encrypted, is(""));
assertThat(transformation, is("AES/CBC/PKCS5Padding"));
assertThat(decrypted, is("android"));
assertThat(CryptographyUtils.makeSHA1(null), is(nullValue())); assertThat(CryptographyUtils.makeSHA1(""), is("")); assertThat(CryptographyUtils.makeSHA1("android"), is("e4bbe5b7a4c1eb55652965aee885dd59bd2ee7f4")); assertThat(CryptographyUtils.makeSHA1("0123456789"), is("87acec17cd9dcd20a716cc2cf67417b71c8a7016"));
assertThat(formatted, nullValue());
assertThat(loginActivity.isFinishing(), is(true));
assertThat(loginActivity.isFinishing(), is(true));
assertTrue("Session should be connected.", session.isConnected()); assertTrue("Session should be open.", session.isOpen()); assertFalse("Session should not be dirty.", session.isDirty());
assertEquals("forceMaxObjectsPerDomain not capped to domain config", domainConfiguration.getMaxObjects(), job.getForceMaxObjectsPerDomain());
assertFalse("Configuration should have password removed", conf.usesPassword(PASSWORD_NAME));
assertTrue("Configuration uses password", conf.usesPassword(PASSWORD_NAME));
assertEquals(policy.getClassKey(curi1), policy.getClassKey(curi2));
assertEquals("First configuration should be accepted", 1, job.getCountDomains());
assertEquals(strs[0], itr.next()); assertEquals(strs[1], itr.next()); assertEquals(strs[1], itr.previous()); assertTrue(retItr == itr); assertFalse(itr.hasPrevious()); assertEquals(strs[0], itr.next()); assertTrue(retItr == itr); assertTrue(itr.hasPrevious()); assertEquals(0, itr.previousIndex()); assertEquals(1, itr.nextIndex()); assertEquals(strs[1], itr.next());
assertEquals(strs[0], itr.next()); assertEquals(strs[1], itr.next()); assertTrue(retItr == itr); assertEquals(strs[0], itr.next()); assertEquals(strs[1], itr.next()); assertEquals(strs[2], itr.next());
assertEquals(Types.deProxy(proxy), ArrayList.class);
assertTrue(sender instanceof KafkaSender);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertNotNull(span);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertTrue(sender instanceof KafkaSender);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertNotNull(interceptor.tracing);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertNotNull(interceptor.tracing); assertEquals(TracingInterceptorConfig.ZIPKIN_REMOTE_SERVICE_NAME_DEFAULT, interceptor.remoteServiceName);
assertEquals("Exact bundles comparison is wrong", 0, comparable.compare(b1, b1));
assertEquals("When not matching impl.bundles bundles should be sorted alphabetically",-1, comparable.compare(b1, b2));
assertEquals("Bundles have same symbolic name, should be equal",0, comparable.compare(b1, b2));
assertEquals("Bundle b is declared first in impl.bundles - should be less",-1, comparable.compare(b2, b1));
assertTrue(WebBundleUtils.calculateCorrectSymbolicName("").equals("")); assertTrue(WebBundleUtils.calculateCorrectSymbolicName(null).equals("")); assertTrue(WebBundleUtils.calculateCorrectSymbolicName("a._-1 %$#~") .equals("a._-1....."));
assertEquals("Bundle b is declared as impl - should be less", -1, comparable.compare(b2, b1));
assertThat(pieceInformation.getTempo()).isEqualTo(120); assertThat(pieceInformation.getNumberOfTrack()).isEqualTo(1); assertThat(pieceInformation.getNumberOfMeasure()).isEqualTo(3);
assertThat(measureHeaders).hasSize(3);
assertThat(headers.getVersion()).isEqualTo("FICHIER GUITAR PRO v4.06"); assertThat(headers.getTitle()).isEqualTo("title");
assertThat(tracks).hasSize(1); assertThat(firstTrack.getMeasures()).hasSize(3);
assertThat(trackHeaders).hasSize(1); assertThat(header.getNumberOfFrets()).isEqualTo(24); assertThat(header.getNumberOfString()).isEqualTo(6); assertThat(header.getName()).isEqualTo("Track 1");
assertThat(beat1.compareTo(beat2)).isLessThan(0); assertThat(beat1.compareTo(beat3)).isLessThan(0); assertThat(beat1.compareTo(beat3)).isLessThan(0); assertThat(beat1.compareTo(beat1)).isEqualTo(0);
assertThat(result).hasSize(1); assertThat(result.get(new MeasureId(1))).isNotNull();
assertThat(routerNavigator.peekRouter()).isNull(); assertThat(routerNavigator.peekRouter()).isEqualTo(routerOne); assertThat(routerNavigator.peekRouter()).isNull();
assertThat(testSubscriber.values().get(0).get()).isEqualTo(returnValue);
assertThat(testSubscriber.values().get(0).get().getValue()).isEqualTo(returnValue);
assertThat(testSubscriber.values().get(0).get().getValue()).isEqualTo(returnValue);
assertThat(routerNavigator.peekState()).isNull(); assertThat(routerNavigator.peekState()).isEqualTo(TestState.STATE_1); assertThat(routerNavigator.peekState()).isNull();
assertEquals("", false, propertiesFileSettings.isVirtualServerEnabled());
assertEquals(elements.size(), 1); assertEquals(elements.first() .ownText(), "My title");
assertEquals("", true, propertiesFileSettings.isVirtualServerEnabled());
assertEquals("", true, propertiesFileSettings.isVirtualServerEnabled());
assertEquals("", true, propertiesFileSettings.isVirtualServerEnabled());
assertEquals("", true, propertiesFileSettings.isVirtualServerEnabled());
assertEquals("", true, propertiesFileSettings.isVirtualServerEnabled());
assertNotNull(doc); assertEquals(doc.title(), "My title");
assertTrue(list == Utils.unmodifiableList(list));
assertEquals(Arrays.asList(1, 2, 3, 4), Utils.varargsToList(1, 2, 3, 4));
assertEquals(Collections.singletonList("a"), Utils.varargsToList("a"));
assertNotNull(Utils.unmodifiableList(null));
assertEquals(0, writer.getBuffer().length()); assertEquals("abc", writer.toString());
assertTrue(p.test(recb1)); assertTrue(p2.test(recb1)); assertFalse(p3.test(recb1));
assertNotNull(factory); assertFalse(instances.contains(factory)); assertEquals(instances.size(), AMOUNT);
assertEquals(1295.6837f, coordinateA.calculateHaversinDistanceMeters(coordinateB));
assertEquals(16059592.00f, coordinateA.calculateHaversinDistanceMeters(coordinateB));
assertTrue(expected.contains(serializable)); assertEquals(expected.size(), counter);
assertNull(queue.pollBatch()); assertEquals(asList("a", "b"), queue.pollBatch()); assertNull(queue.pollBatch()); assertEquals(singletonList("c"), queue.pollBatch()); assertNull(queue.pollBatch()); assertTrue(queue.close());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, RouteUtils.expand(template, 123456789));
assertEquals(template, RouteUtils.expand(template));
assertEquals(expected, actual);
assertEquals(expected, RouteUtils.expand(template, 123456789, 987654321));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertNull(data.getDataFlag());
assertEquals(writer.toString(),data);
assertTrue(map.containsKey("B")); assertEquals(map.get("B"),"B1=b1;A=&&A1=a1;A2=a2;A3=a3&&");
assertEquals(writer.toString(),data);
assertTrue(map.containsKey("C")); assertEquals(map.get("C"),"c"); assertTrue(map.containsKey("B")); assertTrue(b instanceof Map);
assertEquals(result,"##0136ST=32;CN=2011;PW=000000;MN=LD130133000015;CP=&&DataTime=20160824003817;011-Rtd=231.0,011-Flag=N;B01-Rtd=36.91;060-Rtd=1.803,060-Flag=N&&1dc0\\r\\n");
assertEquals(exitCode, 0); assertTrue( client.getTonyConf().get(TonyConfigurationKeys.getContainerResourcesKey()).contains(Constants.TONY_JAR_NAME));
assertEquals(actualRes, expectedRes); assertEquals(actualRes.size(), expectedRes.size());
assertEquals(actualUTCDirectoryStr, expectedUTCDirectoryStr); assertEquals(actualGMT6DirectoryStr, expectedGMT6DirectoryStr);
assertFalse(HdfsUtils.isJobFolder(filePath1, regex1)); assertFalse(HdfsUtils.isJobFolder(filePath2, regex2));
assertNotNull(Utils.constructContainerUrl(container)); assertNotNull(Utils.constructContainerUrl("foo", null));
assertTrue(Utils.isArchive(file1.getAbsolutePath())); assertTrue(Utils.isArchive(file2.getAbsolutePath())); assertTrue(Utils.isArchive(file3.getAbsolutePath()));
assertEquals(eventQueue.size(), 1); assertEquals(eventQueue.size(), 0);
assertFalse(HdfsUtils.pathExists(fs, invalidPath));
assertFalse(ParserUtils.isValidHistFileName(fileName1, jobRegex)); assertFalse(ParserUtils.isValidHistFileName(fileName2, jobRegex));
assertTrue(HdfsUtils.isJobFolder(filePath1, regex1)); assertTrue(HdfsUtils.isJobFolder(filePath2, regex2));
assertFalse(Utils.isArchive(file1.getAbsolutePath()));
assertEquals("job1", HdfsUtils.getLastComponent(filePath1.toString())); assertEquals("app2", HdfsUtils.getLastComponent(filePath2.toString()));
assertEquals(HdfsUtils.contentOfHdfsFile(fs, filePath), "");
assertNull(Utils.pollTillNonNull(() -> null, 1, 1)); assertTrue(Utils.pollTillNonNull(() -> true, 1, 1));
assertEquals(HistoryFileUtils.generateFileName(metadata), expectedName);
assertEquals(Utils.parseMemoryString("2g"), "2048"); assertEquals(Utils.parseMemoryString("2M"), "2"); assertEquals(Utils.parseMemoryString("3"), "3");
assertNull(Utils.getHostNameOrIpFromTokenConf(conf));
assertNull(result);
assertTrue(ParserUtils.isValidHistFileName(fileName, jobRegex));
assertTrue(Utils.isJobTypeTracked("tony.worker.gpus", conf));
assertFalse(actualIsDAG);
assertTrue(Files.exists(Paths.get(tempFile.getAbsolutePath() + "bak"))); assertTrue(result);
assertNull(Utils.getCurrentHostName());
assertTrue(Files.exists(unzippedFilePath));
assertTrue(Utils.poll(() -> true, 1, 1)); assertFalse(Utils.poll(() -> false, 1, 1));
assertNull(Utils.getTaskType("foo")); assertEquals(Utils.getTaskType("tony.evaluator.instances"), "evaluator");
assertTrue(actualIsDAG);
assertEquals(HdfsUtils.getLastComponent(filePath.toString()), "");
assertEquals(eventQueue.size(), 4); assertEquals(eventQueue.size(), 0);
assertEquals(Utils.getClientResourcesPath("foo", "bar"), "foo-bar");
assertNull(HdfsUtils.getJobDirPath(mockFs, histFolder, regex));
assertEquals(config.getTask().getType(), "worker"); assertEquals(config.getTask().getIndex(), 1); assertEquals(config.getCluster().get("worker").get(0), "host0:1234"); assertEquals(config.getCluster().get("worker").get(1), "host1:1234"); assertEquals(config.getCluster().get("ps").get(0), "host2:1234");
assertEquals(HdfsUtils.contentOfHdfsFile(fs, filePath), "");
assertEquals(Utils.getNumTotalTasks(conf), 4);
assertEquals(Utils.getUntrackedJobTypes(conf), new String[]{"ps"}, "Arrays do not match");
assertEquals(Utils.linksToBeDisplayedOnPage(null), new TreeMap<>()); assertEquals(linksToBeDisplayed.size(), 2); assertEquals(linksToBeDisplayed.get("Logs"), "/" + LOGS_SUFFIX + "/" + "fakeJobId"); assertEquals(linksToBeDisplayed.get("Events"), "/" + JOBS_SUFFIX + "/" + "fakeJobId");
assertEquals(HistoryFileUtils.generateFileName(metadata), expectedName);
assertEquals(HdfsUtils.contentOfHdfsFile(fs, filePath), "someContent");
assertTrue(HdfsUtils.pathExists(fs, exists));
assertEquals(fs.listStatus(jobDir).length, 0);
assertEquals(Utils.parseKeyValue(null), new HashMap<>()); assertEquals(Utils.parseKeyValue( new String[]{"foo=1", "bar", "baz=3"}), hashMap);
assertFalse(HdfsUtils.pathExists(mockFs, invalidPath));
assertEquals(actual.getId(), expected.getId()); assertEquals(actual.getJobLink(), expected.getJobLink()); assertEquals(actual.getConfigLink(), expected.getConfigLink()); assertEquals(actual.getRMLink(), expected.getRMLink()); assertEquals(actual.getStartedDate(), expected.getStartedDate()); assertEquals(actual.getCompletedDate(), expected.getCompletedDate()); assertEquals(actual.getStatus(), expected.getStatus()); assertEquals(actual.getUser(), expected.getUser());
assertTrue(HdfsUtils.getJobDirs(fs, histFolder, "job*").isEmpty());
assertEquals(Utils.getAllJobTypes(conf), new HashSet(Arrays.asList("worker", "evaluator")));
assertEquals(Utils.executeShell("foo", 0, null), 127);
assertEquals("2c", result);
assertEquals(test + 1, result);
assertEquals(exception, exceptionReference.get()); assertEquals(exception, catchedException);
assertEquals(exception, exceptionReference.get()); assertEquals(exception, catchedException);
assertEquals(2, result.size()); assertTrue(result.contains(2)); assertTrue(result.contains(3)); assertTrue(duration >= 40);
assertEquals(test + 1, result);
assertEquals(1, value); assertEquals(exception, exceptionReference.get());
assertEquals(1, result);
assertEquals(0, latch.getCount());
assertEquals(exception, exceptionReference.get()); assertEquals(exception, catchedException);
assertEquals(exception, exceptionReference.get()); assertEquals(exception, catchedException);
assertEquals(test + 1, result);
assertEquals(404, ex.getStatusCode());
assertEquals(test, result); assertTrue(test.get());
assertEquals(1, value); assertEquals(exception, exceptionReference.get());
assertEquals(exception, exceptionReference1.get()); assertNull(exceptionReference2.get()); assertEquals(exception, catchedException);
assertEquals(test, result);
assertEquals(test, result);
assertEquals(exception, dex1);
assertEquals(1, result);
assertEquals(test + 1, result);
assertEquals(1, result);
assertEquals(1, result);
assertEquals(404, ex.getStatusCode());
assertEquals(500, ex.getStatusCode());
assertEquals(2, result); assertTrue(duration < 40);
assertTrue(test.get());
assertThat(supplier.getFailures()) .containsExactly( new Failure.Builder() .file(new File(CLASS_FILE)) .line(LINE_1) .severity("ERROR") .message(ERROR_1) .details(DETAIL_1) .build(), new Failure.Builder() .file(new File(CLASS_FILE)) .line(12) .severity("ERROR") .message(ERROR_2) .details(DETAIL_2) .build());
assertThat(supplier.getFailures()).isEmpty();
assertThat(supplier.getFailures()).isEmpty();
assertNotNull(decoded); assertEquals(decoded.getAddress(), 0); assertEquals(decoded.getQuantity(), 64); assertEquals(decoded.getValues().readableBytes(), 128);
assertNotNull (older); assertNotNull (patches); assertNotNull (cache); assertNull (nosuch);
assertEquals (size, 20); assertEquals (data [0], (byte) 0xDE); assertEquals (data [1], (byte) 0xB2); assertEquals (data [2], (byte) 0x38); assertEquals (data [3], (byte) 0x07);
assertEquals (chunk.size (), 10); assertEquals (new String (chunk.data ()), "1234567890");
assertEquals(1, creationResult.size()); assertTrue(creationResult.get(0) instanceof Node); assertEquals("Node 0", ((Node) creationResult.get(0)).get("name")); assertNull(creationResult.exception()); assertNull(creationResult.output());
assertThat(found, notNullValue()); assertThat(found.getState(), is(ExternalCallStateEnum.FAILED));
assertEquals(expected, res);
assertThat(catalogEntries, hasSize(2)); assertThat(catalogEntries.get(0).getCode(), is("CRM")); assertThat(catalogEntries.get(0).getDescription(), is("CRM system")); assertThat(catalogEntries.get(1).getCode(), is("BILLING")); assertThat(catalogEntries.get(1).getDescription(), is("Billing system"));
assertThat(found, notNullValue()); assertThat(found.getState(), is(MsgStateEnum.PARTLY_FAILED));
assertThat(uriBuilder.getOutWsSoap12Uri("uri", "senderRef", null), is("spring-ws:uri?messageSender=#senderRef&messageFactory=#messageFactorySOAP12"));
assertThat(found, notNullValue()); assertThat(found.getState(), is(MsgStateEnum.PROCESSING)); assertThat(exchange.getIn().getBody(), nullValue()); assertThat(exchange.getProperty(Exchange.EXCEPTION_CAUGHT), notNullValue()); assertThat(exchange.getProperty(Exchange.EXCEPTION_CAUGHT), instanceOf(IntegrationException.class)); assertThat((Message)exchange.getIn().getHeader(AsynchConstants.MSG_HEADER), is(found));
assertThat(Integer.valueOf(dbParam.getCurrentValue()), is(222)); assertThat(Integer.valueOf(dbParam.getDefaultValue()), is(10)); assertThat(param.getDataType(), is(DataTypeEnum.INT)); assertThat(param.isMandatory(), is(true));
assertThat(attribute, notNullValue()); assertThat(attribute.toString(), is("true")); assertThat(attribute, notNullValue()); assertThat(attribute.toString(), is("11"));
assertThat(uriBuilder.getOutWsUri("uri", "senderRef", "action"), is("spring-ws:uri?messageSender=#senderRef&messageFactory=#messageFactorySOAP11&soapAction=action"));
assertThat(fm(""), is("")); assertThat(fm("empty"), is("empty")); assertThat(fm("{} > {}", 2, 1), is("2 > 1"));
assertThat(uriBuilder.getInWsUri(QName.valueOf("rootElm"), "mappingRef", null), is("spring-ws:rootqname:rootElm?endpointMapping=#mappingRef"));
assertThat(e, instanceOf(NoDataFoundException.class));
assertThat(env.getProperty("sth.source.1"), is("oneDB")); assertThat(env.getProperty("ohf.source.2"), nullValue());
assertThat(confirmation.getImplementation(getSourceSystem("CRM")), notNullValue());
assertThat(tested.getName(), is("updatedFirstNode")); assertThat(tested.getDescription(), is("updated")); assertThat(tested.getState(), is(NodeState.STOPPED));
assertThat(jmx.getAttribute("ID.enabled").toString(), is("false")); assertThat(jmx.getAttribute("ID.limit").toString(), is("8"));
assertThat(attribute, notNullValue()); assertThat(attribute.toString(), is("10/70"));
assertThat(found, notNullValue()); assertThat(found.getState(), is(MsgStateEnum.PARTLY_FAILED));
assertThat(req.getName(), is("Mr. Parker"));
assertThat(msg, notNullValue()); assertThat(msg.getState(), is(MsgStateEnum.IN_QUEUE)); assertThat(msg, notNullValue()); assertThat(msg.getState(), is(MsgStateEnum.IN_QUEUE)); assertThat(msg, notNullValue()); assertThat(msg.getState(), is(MsgStateEnum.IN_QUEUE));
assertThat(LogContext.getContextValue(CTX_REQUEST_URI), is(req.getRequestURI())); assertThat(LogContext.getContextValue(CTX_REQUEST_ID), notNullValue()); assertThat(LogContext.getContextValue(CTX_SESSION_ID), nullValue()); assertThat(req.getCharacterEncoding(), is("UTF-8"));
assertNull(Tools.toString(i)); assertEquals("2", Tools.toString(i));
assertThat(xml, CoreMatchers.containsString("<helloRequest>")); assertThat(xml, CoreMatchers.containsString("</helloRequest>")); assertThat(xml, CoreMatchers.containsString("<name>")); assertThat(xml, CoreMatchers.containsString("Peter")); assertThat(xml, CoreMatchers.containsString("<hello>")); assertThat(xml, CoreMatchers.containsString("</hello>")); assertThat(xml, CoreMatchers.containsString("<name>")); assertThat(xml, CoreMatchers.containsString("Peter"));
assertThat(LogContext.getContextValue(CTX_REQUEST_URI), is(req.getRequestURI())); assertThat(LogContext.getContextValue(CTX_REQUEST_ID), notNullValue()); assertThat(LogContext.getContextValue(CTX_SESSION_ID), notNullValue()); assertThat(req.getCharacterEncoding(), is("UTF-8"));
assertThat(found, notNullValue()); assertThat(found.getState(), is(ExternalCallStateEnum.FAILED));
assertThat(jmx.getAttribute("crm.op2").toString(), is("20/40"));
assertThat(result).isNull();
assertThat(fileDataRepository.findAll()).contains(fileData);
assertEquals(1, transactionRepository.count());
assertEquals(token.getNewAccountKycStatus(), TokenKycStatusEnum.NOT_APPLICABLE);
assertThat(balanceFileReader.isFirstLineFromFileVersion(null)).isFalse();
assertThat(parsed).isEqualTo("0.0.100");
assertThat(result).isEqualTo(instr);
assertThat(balanceFileReader.isFirstLineFromFileVersion(VERSION_1_TIMESTAMP_HEADER_PREFIX)).isFalse();
assertThat(blockingService.subscribeTopic(query)) .toIterable() .hasSize(3) .containsSequence(topicMessage1.toResponse(), topicMessage2.toResponse(), topicMessage3.toResponse());
assertThat(entityRepository.findAll()).contains(ENTITY_ID.toEntity());
assertThat(topicMessageRepository.findAll()).hasSize(4).containsExactlyInAnyOrderElementsOf(topicMessages);
assertThat(balanceFileReader.isFirstLineFromFileVersion(VERSION_2_HEADER_PREFIX)).isTrue();
assertThat(nonFeeTransferRepository.findAll()).contains(nonFeeTransfer);
assertEquals(3, tokenTransferRepository.count());
assertThat(transactionRepository.findAll()).hasSize(3).containsExactlyInAnyOrderElementsOf(transactions);
assertThat(sqlEntityListener.isEnabled()).isFalse(); assertThat(sqlEntityListener.isEnabled()).isTrue();
assertNull(result);
assertThat(tokenRepository.findAll()).contains(token);
assertEquals(0, result);
assertEquals(2, nonFeeTransferRepository.count());
assertEquals(1, entityRepository.count());
assertEquals(Instant.parse("1677-09-21T00:12:43.145224192Z"), result);
assertEquals(1, liveHashRepository.count());
assertThat(entityRepository.count()).isEqualTo(0L);
assertEquals(token.getNewAccountFreezeStatus(), TokenFreezeStatusEnum.NOT_APPLICABLE);
assertThat(pubSubMessage.getEntity()).isNull(); assertThat(pubSubMessage.getNonFeeTransfers()).isNull();
assertThat(tokenAccountRepository.findAll()).contains(tokenAccount);
assertNull(result);
assertEquals(1, topicMessageRepository.count());
assertThat(cryptoTransferRepository.findAll()).contains(cryptoTransfer);
assertThat(result).isNull();
assertThat(liveHashRepository.findAll()).contains(liveHash);
assertThat(contractResultRepository.findAll()).contains(contractResult);
assertThat(transactionRepository.findAll()).contains(transaction);
assertEquals(1, fileDataRepository.count());
assertEquals(2, tokenRepository.count());
assertEquals(2, cryptoTransferRepository.count());
assertEquals(Long.MAX_VALUE, result);
assertThat(balanceFileReader.isFirstLineFromFileVersion("junk")).isFalse();
assertEquals(1, contractResultRepository.count());
assertThat(repositoryEntityListener.isEnabled()).isFalse(); assertThat(repositoryEntityListener.isEnabled()).isTrue();
assertThat(transactionId) .isNotEqualTo(TransactionID.getDefaultInstance());
assertThat(tokenTransferRepository.findAll()).contains(tokenTransfer);
assertThat(EntityId.of("0.0.1", type)).isEqualTo(EntityId.of(0, 0, 1, type)); assertThat(EntityId.of("0.0.0", type)).isNull();
assertThat(isAddressBook).isFalse(); assertThat(isAddressBook).isTrue(); assertThat(isAddressBook).isTrue();
assertThat(topicMessageRepository.findAll()).contains(topicMessage);
assertThat(cryptoTransferRepository.count()).isEqualTo(0);
assertEquals(Instant.parse("2262-04-11T23:47:16.854775807Z"), result);
assertThat(recordItem.getTransactionType()).isEqualTo(unknownType);
assertThat(cryptoTransferRepository.findAll()).containsExactlyInAnyOrderElementsOf(cryptoTransfers); assertThat(tokenTransferRepository.findAll()).containsExactlyInAnyOrderElementsOf(tokenTransfers);
assertNull(result);
assertEquals(2, tokenAccountRepository.count());
assertThat(Utility.getResource("log4j2.xml")).exists().canRead(); assertThat(Utility.getResource("log4j2-test.xml")).exists().canRead();
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertEquals(1984, identity.getDateOfBirth().get(Calendar.YEAR));
assertNotNull(identity.getDuplicate());
assertEquals(0x7f, largeField.field1.length); assertArrayEquals(new byte[]{(byte) 0xca, (byte) 0xfe, (byte) 0xba, (byte) 0xbe}, largeField.field2);
assertNotNull(address); assertEquals("Meirplaats 1 bus 1", address.streetAndNumber); assertEquals("2000", address.zip); assertEquals("Antwerpen", address.municipality); assertNotNull(address.getData());
assertEquals("01A03956", new ChipNumberDataConvertor().convert(ID));
assertEquals(DocumentType.BELGIAN_CITIZEN, identity.getDocumentType());
assertEquals(SpecialStatus.EXTENDED_MINORITY, identity.specialStatus); assertFalse(identity.specialStatus.hasBadSight()); assertTrue(identity.specialStatus.hasExtendedMinority()); assertNull(identity.getSpecialOrganisation());
assertEquals(DocumentType.BELGIAN_CITIZEN, identity.getDocumentType()); assertNull(identity.getDuplicate()); assertFalse(identity.isMemberOfFamily());
assertEquals(SpecialStatus.WHITE_CANE, identity.specialStatus); assertTrue(identity.specialStatus.hasBadSight()); assertTrue(identity.specialStatus.hasWhiteCane()); assertFalse(identity.specialStatus.hasYellowCane());
assertNotNull(messages.getMessage(Messages.MESSAGE_ID.INSERT_CARD_QUESTION));
assertEquals(SpecialStatus.YELLOW_CANE, identity.specialStatus); assertTrue(identity.specialStatus.hasBadSight()); assertTrue(identity.specialStatus.hasYellowCane()); assertFalse(identity.specialStatus.hasWhiteCane());
assertEquals(DocumentType.EUROPEAN_BLUE_CARD_H, identity.getDocumentType()); assertEquals("01", identity.getDuplicate()); assertTrue(identity.isMemberOfFamily()); assertEquals(SpecialOrganisation.UNSPECIFIED, identity.getSpecialOrganisation());
assertEquals(DocumentType.FOREIGNER_A, identity.getDocumentType()); assertEquals("02", identity.getDuplicate()); assertTrue(identity.isMemberOfFamily()); assertEquals(SpecialOrganisation.RESEARCHER, identity.getSpecialOrganisation());
assertEquals("71715100070", identity.nationalNumber);
assertThat(loginPresenter.password).isEqualTo("World");
assertThat(loginPresenter.username).isEqualTo("Hello");
assertThat(repositoriesPresenter.didDownloadAll()).isFalse();
assertThat(repositoriesPresenter.didDownloadAll()).isTrue();
assertThat(loginPresenter.username).isEqualTo("Hello"); assertThat(loginPresenter.password).isEqualTo("World");
assertThat(loginKey).isInstanceOf(Parcelable.class); assertThat(loginKey).isInstanceOf(AutoValue_LoginKey.class);
assertThat(repositories).isEqualTo(presenterRepos);
assertThat(repositoriesPresenter.isDownloading).isFalse();
assertThat(repositoriesPresenter.isDownloading).isTrue();
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(courseEntitiesContent); assertNotNull(courseEntitiesContent.contentEntity); assertNotNull(courseEntitiesContent.contentEntity.getContent()); assertEquals(content.getContent(), courseEntitiesContent.contentEntity.getContent());
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities.data); assertNotNull(courseEntities.data.mCourse.getTitle()); assertEquals(courseResponses.get(0).getTitle(), courseEntities.data.mCourse.getTitle());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities); assertNotNull(courseEntities.getTitle()); assertEquals(courseResponses.get(0).getTitle(), courseEntities.getTitle());
assertNotNull(moduleEntities); assertEquals(moduleResponses.size(), moduleEntities.size());
assertNotNull(courseEntitiesContent); assertNotNull(courseEntitiesContent.contentEntity); assertNotNull(courseEntitiesContent.contentEntity.getContent()); assertEquals(content.getContent(), courseEntitiesContent.contentEntity.getContent());
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(resultModule); assertEquals(content.getContent(), resultModule.contentEntity.getContent());
assertNotNull(courseEntitiesContent); assertNotNull(courseEntitiesContent.data.contentEntity); assertNotNull(courseEntitiesContent.data.contentEntity.getContent()); assertEquals(content.getContent(), courseEntitiesContent.data.contentEntity.getContent());
assertNotNull(moduleEntity); assertNotNull(contentEntity); assertNotNull(content); assertEquals(content, dummyModules.get(0).contentEntity.getContent());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntity); assertEquals(dummyCourse.getCourseId(), courseEntity.getCourseId()); assertEquals(dummyCourse.getDeadline(), courseEntity.getDeadline()); assertEquals(dummyCourse.getDescription(), courseEntity.getDescription()); assertEquals(dummyCourse.getImagePath(), courseEntity.getImagePath()); assertEquals(dummyCourse.getTitle(), courseEntity.getTitle());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntity); assertEquals(dummyCourse.getCourseId(), courseEntity.getCourseId()); assertEquals(dummyCourse.getDeadline(), courseEntity.getDeadline()); assertEquals(dummyCourse.getDescription(), courseEntity.getDescription()); assertEquals(dummyCourse.getImagePath(), courseEntity.getImagePath()); assertEquals(dummyCourse.getTitle(), courseEntity.getTitle());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntity); assertEquals(dummyCourse.getCourseId(), courseEntity.getCourseId()); assertEquals(dummyCourse.getDeadline(), courseEntity.getDeadline()); assertEquals(dummyCourse.getDescription(), courseEntity.getDescription()); assertEquals(dummyCourse.getImagePath(), courseEntity.getImagePath()); assertEquals(dummyCourse.getTitle(), courseEntity.getTitle());
assertNotNull(courseEntity); assertEquals(dummyCourse.getCourseId(), courseEntity.getCourseId()); assertEquals(dummyCourse.getDeadline(), courseEntity.getDeadline()); assertEquals(dummyCourse.getDescription(), courseEntity.getDescription()); assertEquals(dummyCourse.getImagePath(), courseEntity.getImagePath()); assertEquals(dummyCourse.getTitle(), courseEntity.getTitle());
assertNotNull(courseEntities); assertEquals(moduleResponses.size(), courseEntities.size());
assertNotNull(moduleEntity); assertNotNull(contentEntity); assertNotNull(content); assertEquals(content, dummyModules.get(0).contentEntity.getContent());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(moduleResponses.size(), courseEntities.size());
assertNotNull(resultCourse); assertEquals(courseResponses.get(0).getTitle(), resultCourse.getTitle());
assertNotNull(courseEntities); assertNotNull(courseEntities.getTitle()); assertEquals(courseResponses.get(0).getTitle(), courseEntities.getTitle());
assertNotNull(moduleEntity); assertNotNull(contentEntity); assertNotNull(content); assertEquals(content, dummyModules.get(0).contentEntity.getContent());
assertNotNull(moduleEntities); assertEquals(7, moduleEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities); assertEquals(5, courseEntities.size());
assertNotNull(courseEntities.data); assertEquals(moduleResponses.size(), courseEntities.data.size());
assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size());
assertNotNull(courseEntities.data); assertEquals(courseResponses.size(), courseEntities.data.size());
assertEquals(6, mainViewModel.result);
assertEquals(Helper.createPointList(3, 1, 2, 2, 1, 2, 0, 3), points);
assertEquals("newEncoder|myProperties|version=10", subject.toDetailsString());
assertTrue("v " + v + " is already contained in set. iteration:" + counter, !set.contains(v)); assertTrue(counter > 0); assertEquals("{1, 2, 3, 4, 5, 6}", list.toString());
assertTrue(flags > 0); assertEquals(20, encoder.getSpeed(result), .1); assertEquals(20, encoder.getReverseSpeed(result), .1);
assertEquals(swappedFlags, instance1.swap(flags, instance2));
assertTrue(instance.hasTag("surface", "now", "something")); assertFalse(instance.hasTag("surface", "now", "not"));
assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str))); assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str))); assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)));
assertTrue(c.contains(new Circle(9.9, 10.2, 90000))); assertFalse(c.contains(new Circle(10, 10.4, 90000)));
assertEquals(1, server.run());
assertTrue(new URIVerifier(URIElement0).verify("AC")); assertTrue(new URIVerifier(URIElement0).verify("ACC")); assertTrue(new URIVerifier(URIElement0).verify("ACDDDD")); assertTrue(new URIVerifier(URIElement0).verify("BD")); assertFalse(new URIVerifier(URIElement0).verify("CA"));
assertEquals(2, Helper.countBitValue(4)); assertEquals(5, Helper.countBitValue(20));
assertEquals(Helper.createPointList(0.575, -0.87, -0.175, 0.43, -0.925, 1.73), points);
assertArrayEquals(buffer, bytes);
assertTrue(spelling.isPossible("a"));
assertEquals(Helper.createPointList(5, 2, 4, 2, 3, 1, 2, 1, 1, 0, 0, 0), points);
assertNotNull(parser); assertEquals(message, parse.getMessage()); assertEquals(senderName, parse.getSenderName()); assertEquals(receiverName, parse.getReceiverName());
assertEquals("afrm", spelling.swapCharsAt("farm", 0)); assertEquals("fram", spelling.swapCharsAt("farm", 1)); assertEquals("famr", spelling.swapCharsAt("farm", 2));
assertEquals("01100110101000111100000110010100", BitUtil.BIG.toLastBitString(val, 32));
assertEquals("client> ", outputStream.toString());
assertTrue(ptMap.tr("roundaboutExitOnto", "1", "somestreet").contains("somestreet"));
assertEquals(str + "0000000", bitUtil.toBitString(bitUtil.fromBitString(str))); assertEquals(str, bitUtil.toBitString(bitUtil.fromBitString(str))); assertEquals(str + "0", bitUtil.toBitString(bitUtil.fromBitString(str)));
assertArrayEquals(buffer, bytes);
assertEquals(123.45, subject.getDouble("foo", 0), 1e-4);
assertTrue(instance.accept("1.2.3.4")); assertFalse("black and white", true);
assertFalse(fastMatch.verify("a")); assertTrue(fastMatch.verify("bbn.stac.Class")); assertTrue(fastMatch.verify("Index")); assertTrue(fastMatch.verify("A")); assertTrue(fastMatch.verify("b.Aa"));
assertEquals(PACKETS.HANDSHAKE_OPEN.maxSize(), handler.getMaxPacketSize());
assertEquals(Helper.createPointList(-0.36, .06, 0.04, 0.06, 0.44, 0.06, 0.84, 0.06), points);
assertEquals(5, idx.findID(2, 3)); assertEquals(10, idx.findID(4, 1)); assertEquals(10, idx.findID(3.6, 1.4));
assertEquals("B8, B12", EncodingManager.fixWayName("B8;B12")); assertEquals("B8, B12", EncodingManager.fixWayName("B8; B12"));
assertEquals("client> help : display help.\\n" + "send <dest address> <port> : send a message to the server/client.\\n" + "exit : quit the client.\\n" + "client> ", outputStream.toString());
assertTrue(new URIVerifier(URIElement0).verify("A")); assertTrue(new URIVerifier(URIElement0).verify("B")); assertFalse(new URIVerifier(URIElement0).verify("C"));
assertEquals(11, g.getNodes()); assertEquals(3, removed); assertEquals(8, g.getNodes());
assertFalse(spelling.isPossible("aaaaaa"));
assertEquals(1, index.findClosest(-.6, -.6, EdgeFilter.ALL_EDGES).getClosestNode()); assertEquals(2, index.findClosest(-.6, -.6, new EdgeFilter() { @Override public boolean accept( EdgeIteratorState iter ) { return iter.getBaseNode() == 2 || iter.getAdjNode() == 2; } }).getClosestNode());
assertEquals(5, idx.findID(2, 3)); assertEquals(10, idx.findID(4, 1)); assertEquals(10, idx.findID(3.6, 1.4));
assertEquals("arm", spelling.removeCharAt("farm", 0)); assertEquals("frm", spelling.removeCharAt("farm", 1)); assertEquals("fam", spelling.removeCharAt("farm", 2)); assertEquals("far", spelling.removeCharAt("farm", 3));
assertEquals("[3->4]", node2Edge.get(towerNode).toString()); assertEquals("[1->4, 1 1-0]", node2Edge.get(towerNode).toString()); assertEquals(4, state.fetchWayGeometry(3).size()); assertEquals(2, state.fetchWayGeometry(3).size());
assertEquals(Helper.createPointList(38.5, -120.2), list); assertEquals(Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453), list);
assertEquals(0, instance.add(1, 10, 10)); assertEquals(0, instance.add(1, 10, 10));
assertEquals(100.94, Helper.round(100.94, 2), 1e-7); assertEquals(100.9, Helper.round(100.94, 1), 1e-7); assertEquals(101.0, Helper.round(100.95, 1), 1e-7);
assertEquals(Helper.createTList(0, 7, 8), p.calcNodes()); assertEquals(Helper.createTList(0, 1, 2, 3, 4, 10), p.calcNodes());
assertTrue("v " + v + " is already contained in set. iteration:" + counter, !set.contains(v)); assertTrue(counter > 0); assertEquals("{1, 2, 3, 4}", list.toString());
assertTrue(new URIVerifier(URIElement0).verify("AC")); assertTrue(new URIVerifier(URIElement0).verify("BD")); assertFalse(new URIVerifier(URIElement0).verify("CA"));
assertEquals("client> ", outputStream.toString());
assertEquals(Helper.createPointList3D(38.5, -120.2, 10), list); assertEquals(Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234), list);
assertEquals(expect, incomingEdge.getBoolean(EdgeIteratorState.K_UNFAVORED_EDGE, true, !expect)); assertEquals(expect, incomingEdgeReverse.getBoolean(EdgeIteratorState.K_UNFAVORED_EDGE, false, !expect)); assertEquals(expect, incomingEdge.getBoolean(EdgeIteratorState.K_UNFAVORED_EDGE, true, !expect)); assertEquals(expect, incomingEdgeReverse.getBoolean(EdgeIteratorState.K_UNFAVORED_EDGE, false, !expect));
assertEquals(PACKETS.HANDSHAKE_OPEN.minSize(), handler.getMinPacketSize());
assertEquals(~1, SparseLongLongArray.binarySearch(a, 0, 3, 50)); assertEquals(~2, SparseLongLongArray.binarySearch(a, 0, 3, 55)); assertEquals(~3, SparseLongLongArray.binarySearch(a, 0, 3, 155)); assertEquals(~0, SparseLongLongArray.binarySearch(a, 0, 1, 5)); assertEquals(~1, SparseLongLongArray.binarySearch(a, 0, 1, 50));
assertTrue(spelling.isPossible("aaa"));
assertEquals(2, index.findID(51.2, 9.4));
assertTrue(instance.isEmpty()); assertEquals(1, instance.getSize()); assertEquals(10, instance.peekValue()); assertEquals(0, instance.peekKey()); assertEquals(2, instance.peekValue()); assertEquals(1, instance.getSize()); assertEquals(2, instance.peekValue()); assertEquals(2, instance.getSize()); assertEquals(0, instance.peekValue()); assertEquals(3, instance.getSize());
assertTrue(encoder.isBlockFords()); assertFalse(encoder.acceptWay(way) > 0); assertTrue(encoder.handleNodeTags(node) > 0); assertTrue(encoder.acceptWay(way) > 0); assertFalse(encoder.handleNodeTags(node) > 0);
assertFalse(instance.isValid()); assertFalse(instance.isValid()); assertTrue(instance.isValid());
assertEquals(PACKETS.HANDSHAKE_OPEN.maxSize(), handler.getMaxPacketSize());
assertEquals(10.12, instance.getDoubleValue(instance.setDoubleValue(0, 10.12)), 1e-4);
assertNotNull(nonUser);
assertEquals(Arrays.asList(11L, 9L), keys); assertEquals(Arrays.asList(11L, 12L), keys); assertEquals(Arrays.asList(10L, 11L, 12L), keys);
assertEquals(points.toString(), 1, points.getSize());
assertTrue(manager.supports("CAR")); assertFalse(manager.supports("FOOT"));
assertEquals(10, coord.lat, 1e-6); assertEquals(1, coord.lon, 1e-6); assertEquals(11, coord.lat, 1e-6); assertEquals(2, coord.lon, 1e-6); assertEquals(12, coord.lat, 1e-6); assertEquals(3, coord.lon, 1e-6); assertNull(arr.get(3));
assertTrue(instance.isEmpty()); assertEquals(10, instance.peekValue()); assertEquals(2, instance.getSize()); assertEquals(11, instance.peekValue()); assertEquals(2, instance.getSize());
assertEquals(1, index.findID(0, 0)); assertEquals(1, index.findID(0, 0.1)); assertEquals(1, index.findID(0.1, 0.1)); assertEquals(1, index.findID(-0.5, -0.5));
assertEquals(50, instance.down(52.5)); assertEquals(0, instance.down(0.1)); assertEquals(0, instance.down(0.01)); assertEquals(-5, instance.down(-0.01)); assertEquals(-5, instance.down(-2)); assertEquals(-10, instance.down(-5.1)); assertEquals(50, instance.down(50)); assertEquals(45, instance.down(49));
assertEquals(oldCount, g.getAllEdges().getMaxId()); assertEquals(oldCount + 7, lg.getAllEdges().getMaxId());
assertFalse(spelling.possiblePrefixes("aaaaa"));
assertTrue(true); assertTrue(false); assertTrue(false); assertTrue(false); assertTrue(false); assertTrue(true);
assertEquals(point1, point2); assertNotEquals(point1, point2); assertNotEquals(point1, point2); assertEquals(point1, point2);
assertEquals("S", ac.azimuth2compassPoint(199));
assertEquals(g.getNodes(), newG.getNodes()); assertEquals(0, na.getLatitude(0), 1e-4); assertEquals(2.5, na.getLatitude(1), 1e-4); assertEquals(4.5, na.getLatitude(2), 1e-4); assertEquals(4.6, na.getLatitude(3), 1e-4);
assertEquals(375 * 60 * 1000, p.calcMillis(100000, flags, false)); assertEquals(600 * 60 * 1000, p.calcMillis(100000, flags, true));
assertEquals(PACKETS.HANDSHAKE_OPEN.minSize(), handler.getMinPacketSize());
assertEquals(Helper.createPointList3D(49.5001, 11.501, 426, 49.5002, 11.5015, 441, 49.5011, 11.502, 410.0), edge.fetchWayGeometry(3)); assertEquals(Helper.createPointList3D(49.501, 11.5001, 383.0, 49.5001, 11.501, 426.0), edge.fetchWayGeometry(3));
assertTrue(new BBox(12, 15, 12, 15).intersect(new BBox(13, 14, 11, 16))); assertTrue(new BBox(2, 6, 6, 11).intersect(new BBox(3, 5, 5, 12))); assertTrue(new BBox(6, 11, 6, 11).intersect(new BBox(7, 10, 5, 12)));
assertFalse(spelling.isPossible("aaaa"));
assertEquals(255, speedEncoder.getDoubleValue(flags), 0.01);
assertEquals(0, encoder.getSpeed(flags), .1); assertEquals(0, encoder.getReverseSpeed(flags), .1); assertFalse(encoder.isForward(flags)); assertFalse(encoder.isBackward(flags));
assertEquals(-1, instance.put(Long.MAX_VALUE / 2, 123)); assertEquals(123, instance.get(Long.MAX_VALUE / 2)); assertEquals(1, instance.getSize()); assertEquals(-1, instance.put(Integer.MAX_VALUE * i, 123)); assertEquals(segments, instance.getSize());
assertEquals(10, instance.getValue(instance.setValue(0, 10))); assertEquals(10, instance.getValue(instance.setValue(0, 10))); assertEquals(5, instance.getValue(instance.setDefaultValue(0)));
assertTrue(new Circle(10, 10, 120000).intersect(new BBox(9, 11, 8, 9))); assertTrue(new BBox(9, 11, 8, 9).intersect(new Circle(10, 10, 120000))); assertFalse(new Circle(10, 10, 110000).intersect(new BBox(9, 11, 8, 9))); assertFalse(new BBox(9, 11, 8, 9).intersect(new Circle(10, 10, 110000)));
assertFalse(rsp.hasErrors()); assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getPoints()); assertEquals(3, rsp.getPoints().getSize());
assertEquals(0, packetBuffer.getOffset());
assertEquals(8, graph.getNodes()); assertEquals(2, count(explorer.setBaseNode(0))); assertEquals(3, count(explorer.setBaseNode(6)));
assertEquals(1, instance.getLongitude(0), 1e-7); assertEquals(2, instance.getLongitude(0), 1e-7); assertEquals(1, instance.getLongitude(1), 1e-7); assertEquals(clonedList, instance.clone(true));
assertFalse(spelling.isPossible("aaaaaaa"));
assertEquals(Helper.createTList(1, 2), p.calcNodes()); assertEquals(10, p.getDistance(), 1e-4);
assertTrue(c.contains(new BBox(9, 11, 10, 10.1))); assertFalse(c.contains(new BBox(9, 11, 8, 9))); assertFalse(c.contains(new BBox(9, 12, 10, 10.1)));
assertTrue("v " + v + " is already contained in set. iteration:" + counter, !set.contains(v)); assertTrue(counter > 0); assertEquals(g.getNodes(), counter); assertEquals("{0, 5, 3, 2, 1, 10, 8, 7, 6, 9, 4}", list.toString());
assertTrue("v " + v + " is already contained in set. iteration:" + counter, !set.contains(v)); assertTrue(counter > 0); assertEquals("{1, 5, 2, 6, 3, 4}", list.toString());
assertTrue(new URIVerifier(new URIElement(true)).verify(""));
assertEquals("client> help : display help.\\n" + "send <dest address> <port> : send a message to the server/client.\\n" + "exit : quit the client.\\n" + "client> ", outputStream.toString());
assertFalse(instance.accept("1.2.3.4")); assertFalse(instance.accept("4.5.67.1")); assertTrue(instance.accept("1.2.3.5"));
assertEquals(Helper.createTList(0, 4), p.calcNodes()); assertEquals(Helper.createTList(0, 4, 5, 7), p.calcNodes()); assertEquals(Helper.createTList(0, 1, 2), p.calcNodes());
assertEquals(2, OSMIDMap.binarySearch(da, 0, 5, 100)); assertEquals(3, OSMIDMap.binarySearch(da, 0, 5, 300)); assertEquals(~3, OSMIDMap.binarySearch(da, 0, 5, 200)); assertEquals(0, OSMIDMap.binarySearch(da, 0, 5, 1)); assertEquals(1, OSMIDMap.binarySearch(da, 0, 5, 5));
assertEquals(1, instance.getHints().getInt("something", 2)); assertEquals(1, instance.getHints().getDouble("something", 2d), 1e1);
assertTrue(spelling.possiblePrefixes("aa"));
assertEquals(5, result.size()); assertEquals(0, result.get(0).getTime()); assertEquals(10391, result.get(1).getTime()); assertEquals(15000, result.get(2).getTime()); assertEquals(19000, result.get(3).getTime()); assertEquals(22000, result.get(4).getTime());
assertFalse(encoder.acceptWay(way) > 0);
assertEquals(Helper.createPointList(0, 0, 1, 1, 1, 2, 2, 3), points);
assertTrue(new Circle(0, 0, 80000).intersect(new Circle(1, 1, 80000))); assertFalse(new Circle(0, 0, 75000).intersect(new Circle(1, 1, 80000)));
assertEquals("_p~iF~ps|U", WebHelper.encodePolyline( Helper.createPointList(38.5, -120.2))); assertEquals("_p~iF~ps|U_ulLnnqC_mqNvxq`@", WebHelper.encodePolyline( Helper.createPointList(38.5, -120.2, 40.7, -120.95, 43.252, -126.453)));
assertEquals(10, encoder.getSpeed(encoder.setSpeed(0, 10)), 1e-1);
assertEquals(3, components.size()); assertEquals(Helper.createTList(0, 7, 3, 13, 5), components.get(0)); assertEquals(Helper.createTList(1, 8, 4, 2, 11, 12, 9, 15), components.get(1)); assertEquals(Helper.createTList(6, 14, 10), components.get(2));
assertEquals(0, packetBuffer.getOffset());
assertFalse(spelling.possiblePrefixes("aaaaaa"));
assertTrue(spelling.possiblePrefixes("a"));
assertEquals(1, instance.peekKey()); assertEquals(100, instance.peekValue()); assertEquals(2, instance.peekKey()); assertEquals(99, instance.peekValue()); assertEquals(2, instance.pollKey());
assertFalse(spelling.isPossible("aaaaa"));
assertEquals(Helper.createPointList(), PointList.EMPTY); assertEquals(list1, list2);
assertEquals(Locale.GERMAN, Helper.getLocale("de")); assertEquals(Locale.GERMANY, Helper.getLocale("de_DE")); assertEquals(Locale.GERMANY, Helper.getLocale("de-DE")); assertEquals(Locale.ENGLISH, Helper.getLocale("en")); assertEquals(Locale.US, Helper.getLocale("en_US")); assertEquals(Locale.US, Helper.getLocale("en_US.UTF-8"));
assertTrue(new URIVerifier(URIElement0).verify("")); assertTrue(new URIVerifier(URIElement0).verify("A"));
assertEquals(PACKETS.HANDSHAKE_CHALLENGE.ordinal(), bytes[0]); assertArrayEquals(handshakeChallengePacket.getChallenge(), challengeAfter);
assertTrue(subject.has("foo")); assertTrue(subject.has("bar")); assertFalse(subject.has("baz"));
assertEquals(20, index.findID(51.25, 9.43));
assertTrue(spelling.isPossible("aa"));
assertFalse(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 4)); assertFalse(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 5)); assertFalse(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 6)); assertTrue(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 4)); assertTrue(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 5)); assertTrue(instance.detectNodeRemovedForAllEncoders(edgeExplorer, 6));
assertTrue(instance.hasTag("test", "xy")); assertFalse(instance.hasTag("test", "xy"));
assertEquals(Helper.createPointList(2, 2, 2, 1, 3, 0), points);
assertEquals(DistanceCalcEarth.C, dc.calcCircumference(0), 1e-7);
assertFalse(spelling.possiblePrefixes("aaaa"));
assertEquals(Helper.createPointList(0, 0, 0, 1, 1, 1, 1, 2, 1, 3, 2, 3, 2, 4, 2, 5), points);
assertEquals(2, Helper.keepIn(2, 1, 4), 1e-2); assertEquals(3, Helper.keepIn(2, 3, 4), 1e-2); assertEquals(3, Helper.keepIn(-2, 3, 4), 1e-2);
assertEquals(12, instance.getSize()); assertEquals(3, instance.height()); assertEquals(12, instance.get(6));
assertEquals(Helper.createTList(1, 2, 3), p.calcNodes()); assertEquals(30, p.getDistance(), 1e-4);
assertTrue(spelling.possiblePrefixes("aaa"));
assertNull(nonUser);
assertEquals(2L, algo.encode(-1, 5)); assertEquals(11L, algo.encode(14, 7)); assertEquals(5L, algo.encode(8, 4)); assertEquals(1L, algo.encode(-4, 3)); assertEquals(3L, algo.encode(2, 22)); assertEquals(0L, algo.encode(-4, -4)); assertEquals(11L, algo.encode(22, 22));
assertTrue(index.loadExisting()); assertEquals("test", index.get(pointer)); assertEquals(newPointer + ">" + pointer, pointer + "test".getBytes().length + 1, newPointer);
assertEquals(Helper.createPointList(.26, -.56, .26, -0.16, .26, .24, .26, .64, .26, 1.04), points);
assertEquals(g.getAllEdges().getMaxId(), lg.getAllEdges().getMaxId());
assertEquals("valueA", subject.get("foo", "")); assertEquals("valueA", subject.get("FOO", "")); assertEquals("valueA", subject.get("Foo", ""));
assertFalse(spelling.possiblePrefixes("aaaaaaa"));
assertEquals(1234L, subject.getLong("foo", 0));
assertEquals(new GHPoint(0.5, 0), res1.getSnappedPoint()); assertEquals(new GHPoint(1.300019, 1.899962), res2.getSnappedPoint()); assertNotNull(GHUtility.getEdge(queryGraph, 0, 4)); assertNotNull(GHUtility.getEdge(queryGraph, 0, 3));
assertEquals("_p~iF~ps|Uo}@", WebHelper.encodePolyline(Helper.createPointList3D(38.5, -120.2, 10))); assertEquals("_p~iF~ps|Uo}@_ulLnnqC_anF_mqNvxq`@?", WebHelper.encodePolyline( Helper.createPointList3D(38.5, -120.2, 10, 40.7, -120.95, 1234, 43.252, -126.453, 1234)));
assertTrue(false);
assertNotNull(foundLocator);
assertNotNull(foundText); assertFalse(foundText.isDisplayed());
assertNotNull(foundLocator); assertEquals("Table cell 3", foundLocator.getText());
assertNotNull(foundLocator);
assertEquals(expected, formElement.getAttribute("value"));
assertTrue(seleniumSynchronisationService.checkForExpectedCondition(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector("div[id=\'text\']")))); assertTrue(seleniumSynchronisationService.checkForExpectedCondition(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div[id=\'text\']"))));
assertNotNull(foundText); assertEquals("I should show after a delay", foundText.getText());
assertTrue(seleniumSynchronisationService.waitForExpectedCondition(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector("div[id=\'text\']")), seleniumManager.getTimeout())); assertTrue(seleniumSynchronisationService.waitForExpectedCondition(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div[id=\'text\']")), seleniumManager.getTimeout()));
assertNotNull(stopNewScenario.getAttribute(MockScenarioCreationHook.STOPPED_ATTRIBUTE_KEY)); assertEquals(stopNewScenario.getAttribute(MockScenarioCreationHook.STOPPED_ATTRIBUTE_KEY), MockScenarioCreationHook.STOPPED_ATTRIBUTE_VALUE); assertNull(manager.getCurrentScenarioGlobals());
assertNotEquals(referenceService.namespaceString(nameSpace), referenceService);
assertNotNull(elementDescriptor); assertEquals("ID:navigation", elementDescriptor);
assertEquals(referenceService.namespaceString(nameSpace), referenceService.namespaceString(nameSpace));
assertNotEquals(referenceService.namespaceString(nameSpace), referenceService);
assertEquals(new URL(expectedHub), manager.getSeleniumHub());
assertEquals(expected, formElement.getAttribute("value"));
assertEquals("Submit button", foundTextArea.getText());
assertNull("No globals should be associated with the current thread when not yet started", manager.getCurrentScenarioGlobals()); assertNotNull(instantiatedScenario); assertNotNull(instantiatedScenario.getAttribute(MockScenarioCreationHook.STARTED_ATTRIBUTE_KEY)); assertEquals(MockScenarioCreationHook.STARTED_ATTRIBUTE_VALUE, instantiatedScenario.getAttribute(MockScenarioCreationHook.STARTED_ATTRIBUTE_KEY)); assertEquals(instantiatedScenario, manager.getCurrentScenarioGlobals()); assertNotSame(instantiatedScenario, manager.getCurrentScenarioGlobals());
assertNotNull(foundElement); assertEquals("tr", foundElement.getTagName());
assertFalse(seleniumNavigationService.isInitialPageRequested()); assertTrue(seleniumNavigationService.isInitialPageRequested());
assertEquals("UPPER", theMap.get("upper")); assertEquals("UPPER", theMap.get("UPPER")); assertEquals("lower", theMap.get("lower")); assertEquals("lower", theMap.get("LOWER"));
assertNotNull(globals.getExpectedGlobalConditions()); assertEquals("One condition should be founnd", 1, globals.getExpectedGlobalConditions().size()); assertEquals(ExpectedWebElementCondition.class, found.getClass()); assertEquals(locator, foundImpl.getLocator());
assertEquals(expected, found);
assertNotNull("ensure that the table row has indeed been matched up with the associated web element", examplePage.table_Row_1); assertEquals(examplePage, secondCall); assertNotSame(examplePage, forcedUpdate);
assertNotNull(stream);
assertEquals(JreVersion.Java_9, version);
assertEquals(35, stream.length());
assertEquals(input, bodyAsString);
assertSame(o, HttpUtils.attemptEncodeQueryParam(o));
assertEquals(testString, new String(baos.toByteArray()));
assertSame(Region.US_PHOENIX_1, region);
assertEquals(851042397000L, date.getTime());
assertEquals("1985-04-12T23:20:50.052Z", HttpDateUtils.format(date));
assertEquals(partSize, MultipartUtils.calculatePartSize(configuration, objectSize));
assertEquals(Realm.OC1, testRealm); assertSame(Realm.OC1, testRealm);
assertNotNull(result);
assertNotNull(uploadResponse); assertEquals(CONTENT, new String(buffer)); assertEquals(CONTENT_LENGTH, putRequestCaptor.getValue().getContentLength().longValue()); assertEquals( "U2yw5mJhFHg/U4cBMrrFyw==", putRequestCaptor.getValue().getContentMD5());
assertEquals(1000L, strategy.nextDelay(context)); assertEquals(2000L, strategy.nextDelay(context)); assertEquals(4000L, strategy.nextDelay(context)); assertEquals(8000L, strategy.nextDelay(context)); assertEquals(16000L, strategy.nextDelay(context)); assertEquals(30000L, strategy.nextDelay(context)); assertEquals(30000L, strategy.nextDelay(context));
assertEquals("1985-04-12T23:20:50Z", HttpDateUtils.format(date));
assertNotNull("Map should not be null", actual); assertEquals("Map should contain 2 entries", 2, actual.size()); assertTrue( "Actual map should contain matching key for lower case value", actual.containsKey(expectedKey.toLowerCase())); assertEquals( "Values should be equal for key: " + expectedKey, expectedValue, actualValue);
assertEquals(JreVersion.Java_8, version);
assertNull(regionSchema);
assertTrue(result == wrapped);
assertEquals(784111777000L, date.getTime());
assertTrue(userAgent.contains(clientUserAgent));
assertEquals("{\\"i\\":7,\\"s\\":\\"foo\\"}", bodyAsString);
assertNotNull(uploadResponse);
assertEquals(850953600000L, date.getTime());
assertNull(range.getStartByte()); assertEquals(10L, (long) range.getEndByte()); assertNull(range.getContentLength());
assertFalse( MultipartUtils.shouldCalculateMd5( UploadConfiguration.builder().enforceMd5(true).build(), PutObjectRequest.builder().contentMD5("md5").build()));
assertFalse(regionIds.contains(region.getRegionId()));
assertEquals(784111777000L, date.getTime());
assertTrue(STRATEGY.shouldTerminate(context));
assertNotNull("Map should not be null", actual); assertEquals("Map should contain 3 entries", 3, actual.size()); assertTrue( "Actual map should contain matching key for lower case value", actual.containsKey(expectedKey.toLowerCase())); assertEquals( "Values should be equal for key: " + expectedKey, expectedValue, actualValue);
assertThat(inputStream, instanceOf(ContentLengthVerifyingInputStream.class)); assertEquals(ImmutableList.of(contentType), headers.get(HttpHeaders.CONTENT_TYPE)); assertEquals(ImmutableList.of("100"), headers.get(HttpHeaders.CONTENT_LENGTH)); assertEquals(ImmutableList.of("100"), stringHeaders.get(HttpHeaders.CONTENT_LENGTH));
assertFalse(realmIds.contains(realm.getRealmId()));
assertTrue(STRATEGY.shouldTerminate(context));
assertNotNull(uploadResponse);
assertTrue("Initial calls are not expected to fail", i < MIN_NUM_CALLS); assertTrue("The rest of the call are expected to fail", i >= MIN_NUM_CALLS); assertTrue(e.getCause() instanceof CallNotAllowedException);
assertThat( "Exception thrown should be a ProcessingException", t, instanceOf(ProcessingException.class));
assertTrue( OCID.isValid( "ocidv1:tenancy:oc1:phx:1829406592360:aaaaaaaab4faaopv32ecohhklpvjq463pu"));
assertEquals(1, info.getHeadersSetInCallback().size()); assertEquals(testVal, info.getHeadersSetInCallback().getFirst(testKey)); assertNotNull(info.getRequestId()); assertFalse(testVal.equals(info.getRequestId()));
assertEquals( "%251%253D%253F%2540%255B%255D%2541%20aaaa", HttpUtils.attemptEncodeQueryParam("%1%3D%3F%40%5B%5D%41 aaaa"));
assertNotNull(result);
assertEquals(JreVersion.Java_9, version);
assertThat(inputStream, instanceOf(WrappedResponseInputStream.class)); assertEquals(ImmutableList.of(contentType), headers.get(HttpHeaders.CONTENT_TYPE));
assertEquals( ConfigFileDelegationTokenUtils.parseAndGetToken(configFile), "testdelegationToken123456789");
assertTrue( OCID.isValid( "ocid1.user.oc1..aaaaaaaaizi8k3lbfv747ul6qwazrutncoe8zciazibypbjtkxaiecoic1dq"));
assertEquals("PartSize should be equal to the configured minimum", expected, actual);
assertThat(regionExpected, is(regionBlob));
assertTrue(STRATEGY.shouldTerminate(context));
assertFalse(STRATEGY.shouldTerminate(context));
assertThat(regionSchemas.length, is(2));
assertTrue(MultipartUtils.shouldUseMultipart(configuration, TOO_LARGE_FOR_MULTIPART));
assertTrue("PartSize should be greater than configured max", expected < actual);
assertEquals(2, inProgressParts.size()); assertEquals(1, inProgressParts.get(0).intValue()); assertEquals(2, inProgressParts.get(1).intValue()); assertEquals(1, successfulParts.size()); assertEquals(1, successfulParts.get(0).getPartNum().intValue()); assertEquals(1, failedParts.size()); assertEquals(2, failedParts.get(0).intValue()); assertTrue(manifest.listInProgressParts().isEmpty());
assertEquals(uuid.toString(), HttpUtils.encodePathSegment(uuid));
assertEquals( "%251%253D%253F%2540%255B%255D%2541%20aaaa", HttpUtils.encodePathSegment("%1%3D%3F%40%5B%5D%41 aaaa"));
assertFalse(manifest.isUploadAborted()); assertNotNull(assembler.abort()); assertTrue(manifest.isUploadAborted()); assertEquals(NAMESPACE, request.getNamespaceName()); assertEquals(BUCKET, request.getBucketName()); assertEquals(uploadId, request.getUploadId()); assertEquals(mockInvocationCallback, request.getInvocationCallback());
assertEquals( "w/zT12GS5AB9+0lsymfhOw==", StreamHelper.base64EncodeMd5Digest(TEST_STR.getBytes()));
assertEquals(400, e.getStatusCode());
assertNotNull(uploadResponse);
assertEquals(5L, (long) range.getStartByte()); assertEquals(10L, (long) range.getEndByte()); assertNull(range.getContentLength());
assertFalse(OCID.isValid("ocid1.user.oc1.")); assertFalse(OCID.isValid("ocid1.user.oc1.adsfasfsafdf")); assertFalse(OCID.isValid("ocid1.user.oc1.1354aasdf.")); assertFalse(OCID.isValid("ocid1.user.oc1.1354aasdf.."));
assertFalse( MultipartUtils.shouldUseMultipart(configuration, LARGE_ENOUGH_FOR_MULTIPART - 1L));
assertEquals( "true", System.getProperty(DefaultConfigurator.SUN_NET_HTTP_ALLOW_RESTRICTED_HEADERS));
assertFalse(STRATEGY.shouldTerminate(context));
assertEquals("Expecting exactly one value for header opc-request-id", e.getMessage());
assertEquals("\\\\foo\\\\bar", FileUtils.correctPath(true, "/foo/bar"));
assertEquals("/foo/bar", FileUtils.expandUserHome("/foo/bar"));
assertEquals(JreVersion.Java_9, version);
assertTrue(STRATEGY.shouldTerminate(context));
assertEquals("/foo/bar", FileUtils.correctPath(false, "/foo/bar"));
assertEquals(homeDir + "\\\\foobar", expandedPath); assertEquals(homeDir + "/foobar", expandedPath);
assertEquals( "true", System.getProperty(DefaultConfigurator.SUN_NET_HTTP_ALLOW_RESTRICTED_HEADERS));
assertThat(inputStream, instanceOf(WrappedResponseInputStream.class));
assertTrue(MultipartUtils.shouldUseMultipart(configuration, TOO_LARGE_FOR_MULTIPART - 1L));
assertEquals(5L, (long) range.getStartByte()); assertNull(range.getEndByte()); assertEquals(25L, (long) range.getContentLength());
assertEquals(482196050000L, date.getTime());
assertEquals(482196050052L, date.getTime());
assertEquals(JreVersion.Unsupported, version);
assertEquals(1, inProgressParts.size()); assertEquals(1, inProgressParts.get(0).intValue());
assertEquals(500, e.getStatusCode());
assertTrue(MultipartUtils.shouldUseMultipart(configuration, LARGE_ENOUGH_FOR_MULTIPART));
assertTrue(fromFactory instanceof CompositeClientConfigurator); assertEquals( ImmutableList.of(RestClientFactoryBuilder.DEFAULT_CONFIGURATOR), compositeClientConfigurator.getConfigurators());
assertEquals( ConfigFileDelegationTokenUtils.parseAndGetToken(configFile), StringUtils.EMPTY);
assertEquals(5L, (long) range.getStartByte()); assertEquals(10L, (long) range.getEndByte()); assertEquals(25L, (long) range.getContentLength());
assertThat(regionSchema.getRegionIdentifier(), is("us-rrr-1")); assertThat(regionSchema.getRegionKey(), is("rrr")); assertThat(regionSchema.getRealmKey(), is("RTC")); assertThat(regionSchema.getRealmDomainComponent(), is("oraclecloud-foobar.com"));
assertSame(Region.CA_TORONTO_1, Region.valueOf("CA_TORONTO_1")); assertSame(Region.US_PHOENIX_1, Region.valueOf("US_PHOENIX_1"));
assertEquals("~foo/bar", FileUtils.expandUserHome("~foo/bar"));
assertEquals(partSize, MultipartUtils.calculatePartSize(configuration, objectSize));
assertEquals(JreVersion.Java_9, version);
assertNull(range.getStartByte()); assertEquals(10L, (long) range.getEndByte()); assertEquals(25L, (long) range.getContentLength());
assertNotNull(result);
assertEquals("true", HttpUtils.encodePathSegment(true));
assertEquals(10, read1); assertEquals(10, read2); assertEquals(buffer[i], stream1buffer[i]); assertEquals(buffer[i], stream2buffer[i]);
assertEquals("PartSize should be equal", expected, actual);
assertEquals("default_user", configFile.get("user")); assertEquals("default_tenancy", configFile.get("tenancy")); assertNull(configFile.get("region"));
assertEquals(3939871777000L, date.getTime());
assertEquals( "1B2M2Y8AsgTpgAmY7PhCfg==", StreamHelper.base64Encode(digestOutputStream.getMessageDigest())); assertEquals( "w/zT12GS5AB9+0lsymfhOw==", StreamHelper.base64Encode(digestOutputStream.getMessageDigest())); assertEquals( "1B2M2Y8AsgTpgAmY7PhCfg==", StreamHelper.base64Encode(digestOutputStream.getMessageDigest()));
assertFalse( MultipartUtils.shouldCalculateMd5( UploadConfiguration.builder().enforceMd5(false).build(), PutObjectRequest.builder().build()));
assertNotNull(uploadResponse);
assertTrue(strategy.nextDelay(context) > 0); assertTrue(strategy.nextDelay(context) <= 30000L);
assertEquals( "JacksonFeature", client.getConfiguration().getProperty(InternalProperties.JSON_FEATURE));
assertEquals(JreVersion.Java_7, version);
assertEquals(Region.US_PHOENIX_1, region1); assertEquals(unknownRegion, region2);
assertEquals("foobar", HttpUtils.encodePathSegment("foobar"));
assertEquals("50", HttpUtils.encodePathSegment(50)); assertEquals("112233445566", HttpUtils.encodePathSegment(112233445566L)); assertEquals("50.5", HttpUtils.encodePathSegment(50.5D)); assertEquals("100.5", HttpUtils.encodePathSegment(100.5F)); assertEquals("20", HttpUtils.encodePathSegment((short) 20));
assertEquals( "RealmId should be equal", expectedRealm.getValue(), actualRealm.getRealmId());
assertTrue( MultipartUtils.shouldCalculateMd5( UploadConfiguration.builder().enforceMd5(true).build(), PutObjectRequest.builder().build()));
assertEquals(0, info.getHeadersSetInCallback().size()); assertNotNull(info.getRequestId());
assertEquals(5L, (long) range.getStartByte()); assertNull(range.getEndByte()); assertNull(range.getContentLength());
assertEquals("new value", profile1.get("key")); assertEquals("value2", profile1.get("key2")); assertEquals("value=foobar", profile2.get("key")); assertEquals("nota#comment", profile2.get("key2"));
assertEquals("value", configFile.get("key")); assertEquals("value2", configFile.get("key2")); assertEquals("value3", configFile.get("key3")); assertEquals("value4", configFile.get("key4")); assertEquals("=val=ue=", configFile.get("key5")); assertEquals("value6", configFile.get("[key6"));
assertFalse(MultipartUtils.shouldUseMultipart(configuration, LARGE_ENOUGH_FOR_MULTIPART));
assertEquals(Visibility.group("jira-users"), parser.parse(getJsonObjectFromResource("/json/visibility/group.json"))); assertEquals(Visibility.role("Developers"), parser.parse(getJsonObjectFromResource("/json/visibility/role.json")));
assertThat(inputGenerator.generate(input1), JSONObjectMatcher.isEqual(ResourceUtil.getJsonObjectFromResource("/json/issueLinkInput/no-comment.json")));
assertEquals("TST", project.getKey()); assertEquals(new DateMidnight(2010, 8, 25).toInstant(), Iterables.getLast(project.getVersions()).getReleaseDate().toInstant()); assertEquals("Test Project", project.getName());
assertEquals(new LoginInfo(0, 1, null, null), loginInfo);
assertNull(comment.getAuthor()); assertNull(comment.getUpdateAuthor()); assertEquals("Comment from anonymous user", comment.getBody());
assertEquals(new SessionCookie("JSESSIONID", "E5BD072ABEE0082DE4D6C8C2B6D96B79"), parser.parse(ResourceUtil.getJsonObjectFromResource("/json/sessionCookie/valid.json")));
assertEquals(3, Iterables.size(project)); assertEquals(TST_PROJECT, Iterables.get(project, 0));
assertEquals(new TimeTracking(null, null, 840), timeTracking);
assertEquals("some comment", comment1.getBody()); assertEquals(TestConstants.USER_ADMIN, comment1.getAuthor()); assertEquals(TestConstants.USER_ADMIN, comment1.getUpdateAuthor()); assertEquals(TestUtil.toDateTime("2010-08-17T16:40:57.791+0200"), comment1.getCreationDate()); assertEquals(TestUtil.toDateTime("2010-08-17T16:40:57.791+0200"), comment1.getUpdateDate());
assertEquals(P1, P1); assertNotEquals(P1, null); assertNotEquals(P1, P3); assertNotEquals(P1, P4);
assertEquals(new LoginInfo(0, 379, null, TestUtil.toDateTime("2010-09-13T17:19:38.220+0200")), loginInfo);
assertEquals(8, Iterables.size(issueLinks)); assertEquals(new IssuelinksType(TestUtil.toUri("https: "10160", "Bonfire Testing", "discovered while testing", "testing discovered"), Iterables.get(issueLinks, 0)); assertEquals(new IssuelinksType(TestUtil.toUri("https: "10020", "Relates", "is related to", "relates to"), Iterables.getLast(issueLinks));
assertEquals(P1.hashCode(), P2.hashCode());
assertEquals(new TimeTracking(1500, 70, 190), timeTracking);
assertEquals(1.45, (Double) field.getValue(), 0.001); assertEquals(TestConstants.USER1, userField.getValue());
assertEquals("MYT", project.getKey()); assertNull(project.getUri()); assertNull(project.getDescription());
assertEquals(P1.hashCode(), P2.hashCode());
assertEquals(P1, P1); assertNotEquals(P1, null); assertNotEquals(P1, P3); assertNotEquals(P1, P4); assertNotEquals(P1, P5); assertNotEquals(P1, P6); assertNotEquals(P1, P7);
assertEquals(4, Iterables.size(transition.getFields())); assertEquals(new Transition.Field("assignee", false, "com.opensymphony.user.User"), Iterables.getLast(transition.getFields())); assertEquals(5, transition.getId());
assertThat(inputGenerator.generate(input1), JSONObjectMatcher.isEqual(ResourceUtil.getJsonObjectFromResource("/json/issueLinkInput/with-project-role.json")));
assertEquals(1, basicVotes.getVotes()); assertTrue(basicVotes.hasVoted());
assertThat(inputGenerator.generate(input1), JSONObjectMatcher.isEqual(ResourceUtil.getJsonObjectFromResource("/json/issueLinkInput/with-user-group.json")));
assertEquals(Visibility.group("jira-users"), worklog.getVisibility());
assertEquals(new IssueLinkType("Duplicate", "duplicates", IssueLinkType.Direction.OUTBOUND), issueLink.getIssueLinkType()); assertEquals("TST-2", issueLink.getTargetIssueKey());
assertEquals(new Authentication(new LoginInfo(54, 23, toDateTime("2010-09-13T17:19:20.752+0300"), toDateTime("2010-09-13T17:19:38.220+0900")), new SessionCookie("JSESSIONID", "E5BD072ABEE0082DE4D6C8C2B6D96B79")), authentication);
assertEquals(new TimeTracking(null, 170, 9), timeTracking);
assertEquals(TestConstants.USER_ADMIN.getSelf(), session.getUserUri()); assertEquals("admin", session.getUsername()); assertEquals(new LoginInfo(12, 413, TestUtil.toDateTime("2010-09-14T16:15:47.554+0200"), TestUtil.toDateTime("2010-09-14T16:48:33.002+0200")), session.getLoginInfo());
assertThat(inputGenerator.generate(input1), JSONObjectMatcher.isEqual(ResourceUtil.getJsonObjectFromResource("/json/issueLinkInput/simple.json")));
assertEquals(9, searchResult.getTotal()); assertEquals(8, searchResult.getMaxResults()); assertEquals(0, searchResult.getStartIndex()); assertEquals(8, Iterables.size(searchResult.getIssues()));
assertEquals(new LoginInfo(5, 379, TestUtil.toDateTime("2010-09-13T17:19:20.752+0200"), TestUtil.toDateTime("2010-09-13T17:19:38.220+0200")), loginInfo);
assertEquals(2, Iterables.size(votes.getUsers())); assertEquals(TestConstants.USER1, Iterables.get(votes.getUsers(), 0)); assertFalse(votes.hasVoted()); assertEquals(2, votes.getVotes());
assertThat(authService.isSpecified()).isTrue();
assertThat(authService.isSpecified()).isFalse();
assertThat(new OidcConfigurationResolver(true, wireMockRule.baseUrl()).resolve()).isNull();
assertThat(new OidcConfigurationResolver(true, null).resolve()).isNull();
assertThat(new OidcConfigurationResolver(true, wireMockRule.baseUrl()).resolve()).isNull();
assertThat(authService.synchronizeTeams(null, oidcUser, null)).isEqualTo(oidcUser);
assertThat(oidcUser.getTeams()).isNullOrEmpty();
assertThat(authService.synchronizeTeams(null, oidcUser, userInfo)).isEqualTo(oidcUser);
assertThat(authService.authenticate()).isNull();
assertThat(authenticatedUser).isNotNull(); assertThat(authenticatedUser).isInstanceOf(LdapUser.class);
assertThat(oidcUser.getTeams()).hasSize(1); assertThat(oidcUser.getTeams().get(0).getName()).isEqualTo("teamName");
assertThat(authService.authenticate()).isNull();
assertThat(authService.authenticate()).isNull();
assertThat(authService.isSpecified()).isFalse();
assertThat(authService.isSpecified()).isTrue();
assertThat(authService.isSpecified()).isFalse();
assertThat(authService.isSpecified()).isFalse();
assertThat(authService.synchronizeTeams(null, oidcUser, userInfo)).isEqualTo(oidcUser);
assertThat(authService.authenticate()).isNull();
assertThat(new OidcConfigurationResolver(false, wireMockRule.baseUrl()).resolve()).isNull();
assertTrue(publisher.findVersionStartIndex(null) < 0); assertTrue(publisher.findVersionStartIndex("foo") < 0); assertTrue(publisher.findVersionStartIndex("foo-bar.jar") < 0); assertTrue(publisher.findVersionStartIndex("foo-bar-2.3") == 8); assertTrue(publisher.findVersionStartIndex("foo-bar-2.3.1-SNAPSHOT") == 8); assertTrue(publisher.findVersionStartIndex("foo-bar-baz-2.3") == 12);
assertTrue(json.has("ApplicationName")); assertTrue(json.has("DynomiteClusterName")); assertTrue(json.has("MaxConnsPerHost"));
assertTrue(versions.size() == 1 || versions.size() == 0);
assertFalse(hosts.isEmpty()); assertEquals(hostname, hosts.get(0).getHostName()); assertEquals(zone, hosts.get(0).getRack());
assertTrue(Strings.notEmpty(f.get(a.prefs))); assertEquals("FOOBAR", f.get(a.prefs));
assertThat(roboguice.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("nullable")), is(true));
assertThat(a.getScopedObjectMap().size(), equalTo(0)); assertTrue("Couldn\'t find context in scope map", found);
assertThat(b.getScopedObjectMap().size(), equalTo(0)); assertTrue("Couldn\'t find context in scope map", found); assertTrue(b.getScopedObjectMap().containsKey(Key.get(C.class)));
assertThat(new LnImpl().formatArgs(s), equalTo(expected));
assertTrue(Strings.notEmpty(f.get(a.prefs))); assertEquals("default.xml", f.get(a.prefs));
assertThat(Strings.md5(s), equalTo(expected));
assertThat(roboguice.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("notNullable")), is(false));
assertThat(new LnImpl().formatArgs(s, null), equalTo(expected));
assertTrue(Strings.notEmpty(f.get(a.prefs))); assertThat(f.get(a.prefs), equalTo(f.get(PreferenceManager.getDefaultSharedPreferences(a))));
assertEquals("FOOBAR", f.get(a.prefs));
assertThat(RoboGuice.injectors.size(), equalTo(1)); assertThat(RoboGuice.injectors.size(), equalTo(0));
assertNotNull(ret); assertEquals(0, ret.size());
assertEquals("\\tA\\t B", entebbe);
assertEquals(i, MyStack.DEFAULT_INITIAL);
assertEquals("clear test", 0, map.size());
assertTrue(test, EmailValidator.valid(test));
assertEquals(MIDDLE_STRING, list.get(1)); assertEquals("Woo Woo", list.get(1));
assertEquals("entrySet test", NUM_ENTRIES, es.size());
assertEquals("abs move", new Point(223, 556), p.getLocation());
assertFalse(test, EmailValidator.valid(test));
assertFalse(test, PhoneNumberValidator.valid(test));
assertEquals(3, ret.size()); assertEquals(UNFORMATTED[0], ret.get(0)); assertEquals(UNFORMATTED[2], ret.get(2));
assertFalse(d1.equals(null));
assertEquals("list size", 3, list.size());
assertEquals("equals constructed both ways", a1, a2);
assertEquals(6, list.size()); assertEquals("Three", list.get(5));
assertEquals(" 42", new StringAlign(5, StringAlign.Justify.RIGHT).format(42));
assertEquals(expected, NumberToWordsConverter.convert(input));
assertTrue(s.hasRoom()); assertFalse(s.hasRoom());
assertEquals(0x42, CheckSum.process(new BufferedReader(new StringReader("\\u0042"))));
assertEquals(FORMATTED, ListFormat.format(UNFORMATTED));
assertEquals("get element", testData[1], list.get(1));
assertEquals(c.x, d.x); assertEquals(c.y, d.y);
assertEquals("initial", new Point(0,0), p.getLocation());
assertEquals("get test", "Sebastopol, CA", resultString);
assertEquals("howdy mundo", ss.peek());
assertEquals(" " + ONCE + " ", new StringAlign(15, StringAlign.Justify.CENTER).format(o));
assertEquals(2, actual.size()); assertEquals(new Point2D.Double(12.34, 56.78), actual.get(0)); assertEquals(new Point2D.Double(3.14, 3.14), actual.get(1));
assertTrue(list.contains(MIDDLE_STRING));
assertEquals("XXXXXXXXXXXX1234", CreditCardDisguise.disguise("9876543210981234"));
assertEquals("XXXXXXXXXXXXXXXX5678", CreditCardDisguise.disguise("11112222333344445678"));
assertEquals("formatEmptyList", "[]", ListFormat.format(new ArrayList<String>()));
assertTrue(d1.equals(d1));
assertEquals(expected, Soundex.soundex(name));
assertEquals("", t4.entabLine("")); assertEquals("", t8.entabLine("")); assertEquals(" ", t4.entabLine(" ")); assertEquals(" ", t4.entabLine(" ")); assertEquals("abcde", t4.entabLine("abcde"));
assertEquals("abs move", new Point(123, 456), p.getLocation());
assertTrue(test, PhoneNumberValidator.valid(test));
assertEquals(1, ((MyStack<String>) ss).getStackDepth()); assertSame("Yowza", ss.pop());
assertEquals("", StrUtil.reverseNew("")); assertEquals("olleh", StrUtil.reverseNew("hello")); assertEquals("nellaf", StrUtil.reverseNew("fallen"));
assertEquals(1, ret.size()); assertSame(PluginsViaAnnotationsTest.class, ret.get(0));
assertEquals(1, ((MyStack<String>) ss).getStackDepth()); assertTrue(((MyStack<String>) ss).hasNext());
assertEquals(3, one.length); assertEquals(30, one[0]); assertEquals(45, one[1]); assertEquals(60, one[2]);
assertEquals(10, page.size()); assertEquals(Integer.valueOf(3), page.get(3 - 1));
assertEquals(FIRST_STRING, iter.next()); assertEquals(MIDDLE_STRING, iter.next()); assertEquals(LAST_STRING, iter.next());
assertNull(ss.peek());
assertEquals("", StrUtil.reverseInPlace("")); assertEquals("olleh", StrUtil.reverseInPlace("hello")); assertEquals("nellaf", StrUtil.reverseInPlace("fallen"));
assertEquals(x, GetAndInvokeMethod.class); assertEquals(1, nClasses);
assertEquals("2 liner", expected, is.readLine());
assertEquals(0, CheckSum.process(new BufferedReader(new StringReader(""))));
assertEquals(1, string.length);
assertEquals(expected, Round.round(input), 0.0000000000000001);
assertTrue(a1.compareTo(a2) < 0); assertTrue(b1.compareTo(b2) > 0);
assertEquals("\\tA", t4.entabLine(" A"));
assertTrue(d1.equals(d2) && d2.equals(d1));
assertEquals(MY_IDENT, target.getIdent());
assertEquals("cksum test", expected, actual);
assertEquals(" ", new StringAlign(5, StringAlign.Justify.RIGHT).format(""));
assertEquals(1, ret.size()); assertSame(PluginsViaAnnotationsTest.class, ret.get(0));
assertEquals(terms[i], element.term); assertEquals(defns[i], element.definition);
assertEquals(4, t4.getTabSpacing()); assertEquals(8, t8.getTabSpacing());
assertEquals(0, a1.compareTo(a2)); assertTrue(a1.compareTo(a2) < 0); assertTrue(a1.compareTo(a2) < 0); assertTrue(a1.compareTo(a2) < 0);
assertEquals(10, page.size()); assertEquals(Integer.valueOf(13), page.get(3 - 1));
assertEquals("Convert Glob to Regex", expected.toString(), actual.toString());
assertSame(firstDelegate, secondDelegate);
assertSame(firstDelegate, secondDelegate);
assertTrue(fragment.getMvvmDelegate() instanceof NavigatingFragmentDelegate);
assertSame(testedFragment.getMvvmDelegate(), testedFragment.getMvvmDelegate());
assertNotNull(getTestedActivity().getMvvmDelegate());
assertTrue(mvvmDelegate instanceof NavigatingActivityDelegate);
assertSame(activityDelegate.getCachedViewModel(), viewModel);
assertSame(firstDelegate, secondDelegate);
assertNotNull(getTestedFragment().getMvvmDelegate());
assertNotEquals(firstKey, secondKey); assertNotEquals(firstKey, thirdKey); assertNotEquals(secondKey, thirdKey);
assertNull(ReflectionUtils.getParentField(delegate, "viewModel"));
assertNull(activityDelegate.onRetainCustomNonConfigurationInstance());
assertSame(viewModel, activityDelegate.onRetainCustomNonConfigurationInstance());
assertTrue(activityDelegate.isFinished()); assertFalse(activityDelegate.isFinished());
assertSame(testedFragment.getMvvmDelegate(), testedFragment.getMvvmDelegate());
assertNotNull(getTestedFragment().getMvvmDelegate());
assertTrue(fragment.getMvvmDelegate() instanceof NavigatingFragmentDelegate);
assertSame(testedActivity.getMvvmDelegate(), testedActivity.getMvvmDelegate());
assertEquals(generateList(2,3), PrimeFactors.generate(6));
assertSame(a,b);
assertEquals(generateList(3), PrimeFactors.generate(3));
assertEquals(generateList(2,5), PrimeFactors.generate(100));
assertEquals(generateList(5), PrimeFactors.generate(5));
assertEquals(expectedList, PrimeFactors.generate(2));
assertEquals(0, PrimeFactors.generate(-1).size()); assertEquals(0, PrimeFactors.generate(0).size());
assertEquals("Mr%20John%20Smith", solution.replaceBlank(str));
assertEquals(0, PrimeFactors.generate(1).size());
assertEquals(generateList(2), PrimeFactors.generate(4));
assertThat(grid.getActualGrid().getNumbers()).isEqualTo(rangeSet(1, i));
assertThat(grid.getActualGrid().getNumbers()).isEqualTo(rangeSet(1, i));
assertThat(grid.getActualGrid().isEmpty()).isTrue();
assertEquals(expected, actual);
assertEquals(expected, baos.toString());
assertEquals(expected, baos.toString());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, sw.toString());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, sw.toString());
assertEquals(expected, sw.toString());
assertEquals(expected, sw.toString());
assertEquals(expected, sw.toString());
assertEquals(expected, baos.toString());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, baos.toString());
assertEquals(0, _repo.count(hasRelatedId(metadata1.getId()))); assertEquals(1, _repo.count(hasRelatedId(metadata2.getId())));
assertTrue(Files.exists(output.resolve("file3.txt"))); assertTrue(Files.exists(output.resolve("zipfile/file2.txt"))); assertTrue(Files.exists(output.resolve("zipfile/file1.txt"))); assertTrue(Files.exists(output.resolve("zipfile/dir/file4.txt")));
assertEquals(item.toString(), context.getModelValue("item").toString()); assertEquals(item.get("inner").toString(), context.getModelValue("item.inner").toString()); assertEquals("KEY", context.getModelValue("item.inner.name"));
assertEquals(1, found.size()); assertEquals(md1.getId(), found.get(0).getId());
assertEquals(1, found.size()); assertEquals(history1.getId(), found.get(0).getId());
assertEquals(AllThesaurus.ALL_THESAURUS_KEY, this.allThesaurus.getKey());
assertTrue(user.getSecurity().getSecurityNotifications().isEmpty());
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "fre", FormatType.xml, "fmtId2", true, FormatterWidth._100)));
assertEquals(expected.length(), numRead); assertEquals(expected.charAt(i - 2), read[i]);
assertEquals(getFileUri(), path.toUri()); assertEquals("jar:" + rootUri + "x.zip!/part".replaceAll("/+", "/"), zipPath.toUri().toString().replaceAll("/+", "/"));
assertEquals("2013-10-10", isoDate.getDateAsString()); assertEquals("2019-01", isoDate.getDateAsString()); assertEquals("2019", isoDate.getDateAsString());
assertEquals(1, found.size()); assertEquals(md1.getId(), found.get(0).getId()); assertEquals(2, found.size()); assertEquals(md1.getId(), found.get(0).getId()); assertEquals(md3.getId(), found.get(1).getId());
assertEquals(URL + "/v2/TestRuns/123.html", reportUrl);
assertTrue(new ChangeDateValidator(date).isCacheVersionValid(info)); assertFalse(new ChangeDateValidator(date).isCacheVersionValid(info)); assertFalse(new ChangeDateValidator(date).isCacheVersionValid(info)); assertTrue(new ChangeDateValidator(date).isCacheVersionValid(info));
assertNotNull(this.allThesaurus.getDownloadUrl());
assertEquals(found.size(), 2); assertEquals(_allGroup.getId(), found.get(0).getId().getGroupId()); assertEquals(_viewOp.getId(), found.get(0).getId().getOperationId()); assertEquals(_viewOp.getId(), found.get(1).getId().getOperationId()); assertEquals(_md1.getId(), found.get(0).getId().getMetadataId()); assertEquals(_md1.getId(), found.get(1).getId().getMetadataId());
assertEquals(5, urlFromDb.size()); assertEquals(5, metadataLinkList.size());
assertEquals("abc", abc.id);
assertTrue(e.getMessage(), e.getMessage().contains(expr)); assertTrue(e.getMessage(), e.getMessage().contains("value of the property")); assertTrue(e.getMessage(), e.getMessage().contains("is null"));
assertEquals("testValue", value);
assertEquals(1, query.execute(thesaurus).size()); assertEquals(0, query.execute(thesaurus).size());
assertTrue("expected modified passed params", ret); assertTrue(params.getChild("from").getText().equals("1")); assertTrue(params.getChild("to").getText().equals(Integer.toString(boundaryTo)));
assertEquals(60, isoDate2.timeDifferenceInSeconds(isoDate1));
assertEquals(AllThesaurus.TYPE, this.allThesaurus.getType());
assertEquals(noOffset.getValue(2, 0), offset.getValue(0, 0));
assertEquals("13:20:00", isoDate.getTimeAsString());
assertEquals(jodaISODate, year + "-01-01T" + hour + ":" + minutes + ":00.000Z"); assertEquals(jodaISODate, year + "-01-01T00:00:00.000Z");
assertEquals("&amp;&lt;&gt;", new FilterEscapeXmlAttrs().process(null, "&<>"));
assertEquals("word", new FilterLowerCase().process(null, "WOrD"));
assertTrue(e.getMessage(), e.getMessage().contains(expr)); assertTrue(e.getMessage(), e.getMessage().contains("does not exist"));
assertNull(_userRepo.findOne(user1.getId())); assertNull(_userRepo.findOne(user2.getId())); assertNull(_userRepo.findOne(user3.getId())); assertNotNull(mergedUser); assertEquals(userTmp.getUsername(), mergedUser.getUsername()); assertEquals(userTmp.getProfile(), mergedUser.getProfile()); assertEquals(userTmp.getPassword(), mergedUser.getPassword());
assertEquals(0, builder.build().execute(writableThesaurus).size());
assertEquals(1, results.getColumnCount()); assertEquals(2, results.getRowCount());
assertTrue(e.getMessage(), e.getMessage().contains(expr)); assertTrue(e.getMessage(), e.getMessage().contains("empty section"));
assertEquals("POLYGON ((40 -85.06, 40 -20, 70 -20, 70 -85.06, 40 -85.06))", result);
assertEquals("category", categoryTag.getName()); assertEquals(0, categoryTag.getContent().size()); assertEquals(3, categoryTag.getAttributes().size()); assertEquals("oceans", categoryTag.getAttributeValue("value")); assertEquals("Oceans", categoryTag.getAttributeValue("label")); assertEquals("3", categoryTag.getAttributeValue("count"));
assertArrayEquals(codelist1.toString(), new String[]{"code1", "code2"}, sort(codelist1.toArray())); assertArrayEquals(codelist2.toString(), new String[]{"code1"}, sort(codelist2.toArray()));
assertTrue(result);
assertEquals("KEY", context.getModelValue("item.inner.name")); assertEquals("REL", context.getModelValue("item.inner.rel")); assertEquals(item.toString(), context.getModelValue("item").toString()); assertEquals(item.getInner().toString(), context.getModelValue("item.inner").toString());
assertTrue(where.getRowCount() < noWhere.getRowCount());
assertEquals(2, found.size()); assertTrue(foundIds.contains(user1.getId())); assertTrue(foundIds.contains(user2.getId())); assertFalse(foundIds.contains(user3.getId()));
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", false, FormatterWidth._100)));
assertTrue(foundNS);
assertTrue(directive.appliesTo("prefix--hi")); assertFalse(directive.appliesTo("nn--hi")); assertEquals(replacement + "--hi", directive.rewrite("prefix--hi"));
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.xml, "fmtId2", true, FormatterWidth._100)));
assertTrue(this.allThesaurus.hasKeyword(uri));
assertEquals(0, _repository.count((Specification<Metadata>)hasExtra("wrong extra")));
assertEquals(1, all.size()); assertEquals(md1.getId(), all.get(0).getId()); assertEquals(2, all.size()); assertTrue(all.isEmpty());
assertTrue("IP " + ipToTest +" must be in the intranet", accessManager.isIntranet(ipToTest)); assertFalse("IP 192.168.2.1 is not in the intranet", accessManager.isIntranet("192.168.2.1"));
assertTrue(distinct.getRowCount() < noDistinct.getRowCount());
assertEquals("true", _settingsRepository.findOne(Settings.SYSTEM_CSW_ENABLE).getValue()); assertEquals("-1", _settingsRepository.findOne(Settings.SYSTEM_CSW_CAPABILITY_RECORD_UUID).getValue()); assertEquals("ok", results.getText()); assertEquals("false", _settingsRepository.findOne(Settings.SYSTEM_CSW_ENABLE).getValue()); assertEquals("2", _settingsRepository.findOne(Settings.SYSTEM_CSW_CAPABILITY_RECORD_UUID).getValue());
assertEquals("POLYGON ((159.70909090909092 -85.06, 135 -76, 161 -76, 153 -81, 161.12 -85.06, 159.70909090909092 -85.06))", result);
assertTrue(XPathCriteriaEvaluator.INSTANCE.accepts(null, "geonetdebug/text() = \'true\'", metadataId, testMetadata, NAMESPACES)); assertTrue(XPathCriteriaEvaluator.INSTANCE.accepts(null, "*/debug/text() = \'true\'", metadataId, testMetadata, NAMESPACES));
assertEquals(AllThesaurus.DNAME, this.allThesaurus.getDname());
assertEquals("POLYGON ((165 -83, 135 -76, 161 -76, 153 -81, 165 -83))", result);
assertNull(this.thesaurusManager.getThesaurusByName(AllThesaurus.ALL_THESAURUS_KEY)); assertNotNull(this.thesaurusManager.getThesaurusByName(AllThesaurus.ALL_THESAURUS_KEY)); assertNull(this.thesaurusManager.getThesaurusByName(AllThesaurus.ALL_THESAURUS_KEY));
assertTrue(this.allThesaurus.hasKeywordWithLabel(existingKeywordBean.getPreferredLabel("eng"), "eng")); assertFalse(this.allThesaurus.hasKeywordWithLabel("xyz dfdf eesd", "eng"));
assertArrayEquals(new String[] {"ger", "fre", "ita"}, languages.toArray());
assertArrayEquals("newVal1".getBytes(Constants.CHARSET), formatterCache.get(key, new ChangeDateValidator(changeDate), new TestLoader("newVal1", changeDate, false), true)); assertArrayEquals("newVal2".getBytes(Constants.CHARSET), formatterCache.get(key2, new ChangeDateValidator(changeDate), new TestLoader("newVal2", changeDate, false), true));
assertEquals(Level.ERROR, org.apache.log4j.Logger.getRootLogger().getLevel());
assertEquals(found.size(), 2);
assertEquals( "Z", expected, instant ); assertEquals( "UTC-07:00", expected, instant ); assertEquals( "UTC-04:00", expected, instant );
assertTrue(jodaISODate.equals("2010-10-09T22:00:00.000Z")); assertTrue(jodaISODate.equals("2010-10-09T22:00:00.000Z")); assertTrue(jodaISODate.equals("2010-10-10T00:00:00.000Z")); assertTrue(jodaISODate.equals("2010-10-10T00:00:00.000Z"));
assertEquals(testDate.toString(), isoDate.toString());
assertSame(isoLangMapper, this.allThesaurus.getIsoLanguageMapper());
assertFalse(loaded instanceof StoreInfoAndData); assertEquals(data.getChangeDate(), loaded.getChangeDate()); assertEquals(data.isPublished(), loaded.isPublished());
assertEquals(a1Deps, actualIds); assertEquals(a1Deps, actualIds);
assertEquals(ug1.getId(), found.getId());
assertFalse(query.execute(thesaurus).isEmpty()); assertFalse(thesaurus.isFreeCode(keyword.getNameSpaceCode(), keyword.getRelativeCode())); assertTrue(writableThesaurus.isFreeCode(keyword.getNameSpaceCode(), keyword.getRelativeCode()));
assertEquals("keywords", dimensionTag.getName()); assertEquals(0, dimensionTag.getContent().size()); assertEquals(0, dimensionTag.getAttributes().size());
assertEquals("String One", localizations.schemaString("string1")); assertEquals("String Two Part Two", localizations.schemaString("string2", "part2"));
assertNotNull(details); assertEquals(0, user1.getPrivileges().size()); assertNotNull(user); assertEquals("gee", user.getSurname()); assertEquals(Profile.RegisteredUser, user.getProfile()); assertNotNull(ug); assertEquals(0, ug.size());
assertTrue(node.dependencyIds.contains("3a"));
assertEquals(value, data.getValueAsDate());
assertTrue(data.getValueAsBoolean()); assertFalse(data.getValueAsBoolean());
assertEquals(Xml.getString(expectedXml), Xml.getString(actualXml));
assertNotNull(this.allThesaurus.getDate());
assertEquals(1, found.size()); assertEquals(user1.getId(), found.get(0).getId());
assertEquals(harvestHistory.getHarvestDate(), new ISODate(xml.getChildText("harvestdate"))); assertTrue(info.getChildren().get(0) instanceof Element); assertTrue(params.getChildren().get(0) instanceof Element);
assertEquals(found.size(), 3);
assertEquals("1990-12-05T23:02:03", date.getDateAndTime()); assertEquals("1990-12-05", date.getDateAsString()); assertEquals("1990-12-05", date.getDateAndTime()); assertEquals("1990-12-05", date.getDateAsString());
assertEquals(beforeCount, _categoryRepository.count()); assertEquals(beforeCount - 1, _categoryRepository.count()); assertEquals(1, metadataUtils.count()); assertTrue(entity.getCategories().isEmpty());
assertEquals(1, ret.getOperations().size()); assertTrue(ret.getOperations().contains(Operation.added)); assertTrue(category != null);
assertEquals("abc", schematron.getRuleName()); assertEquals("abc", schematron.getRuleName()); assertEquals("abc", schematron.getRuleName());
assertNotNull(fileResult); assertNotNull(templateCache.canonicalFileNameToText.get(functionFile.toRealPath()));
assertEquals(item.toString(), context.getModelValue("item").toString()); assertEquals(item.get(0).toString(), context.getModelValue("item.0").toString()); assertEquals("KEY", context.getModelValue("item.0.0"));
assertEquals(ids.toString(), 2, found.size()); assertTrue(ids.contains(s1.getName())); assertTrue(ids.contains(s2.getName())); assertEquals(1, found.size()); assertTrue(ids.contains(s3.getName()));
assertTrue("expected modified passed params", ret); assertTrue(params.getChild("from").getText().equals("42")); assertTrue(params.getChild("to").getText().equals(Integer.toString(42 + xs.getMaxRecordValue() - 1)));
assertEquals(value.getHash(), loaded.getHash()); assertEquals(value.getRawContent(), loaded.getRawContent()); assertArrayEquals(value.getGzippedContent(), loaded.getGzippedContent());
assertEquals(0, testTermHierarchy.size());
assertEquals(expected + "\\n" + result, expected, result.toString());
assertArrayEquals(new String[] {"roh", "fre", "ita", "ger"}, languages.toArray());
assertEquals(2, found.size()); assertEquals(md1.getId(), found.get(0).getId()); assertEquals(md2.getId(), found.get(1).getId()); assertEquals(2, found.size()); assertEquals(md1.getId(), found.get(0).getId()); assertEquals(md3.getId(), found.get(1).getId()); assertEquals(1, found.size()); assertEquals(md2.getId(), found.get(0).getId()); assertEquals(0, found.size());
assertEquals(1, found.size()); assertEquals(user1.getId(), found.get(0).getId()); assertEquals(1, found.size()); assertEquals(user2.getId(), found.get(0).getId());
assertEquals("testValue", value);
assertTrue(ret); assertTrue(params.getChild("from").getText().equals("324")); assertTrue(params.getChild("to").getText().equals(Integer.toString(324 + xs.getMaxRecordValue() - 1)));
assertEquals((451) + "", linkStatus.getStatusValue()); assertEquals(true, linkStatus.isFailing().booleanValue()); assertEquals("dummy 451", linkStatus.getStatusInfo());
assertFalse(this.thesaurusManager.existsThesaurus(AllThesaurus.ALL_THESAURUS_KEY)); assertTrue(this.thesaurusManager.existsThesaurus(AllThesaurus.ALL_THESAURUS_KEY)); assertFalse(this.thesaurusManager.existsThesaurus(AllThesaurus.ALL_THESAURUS_KEY));
assertEquals(clonedDate.toString(), isoDate.toString());
assertEquals(27, date2.timeDifferenceInSeconds(date1)); assertEquals(-27, date1.timeDifferenceInSeconds(date2));
assertTrue(locator.accept(resource.getUri()));
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId2", true, FormatterWidth._100)));
assertEquals("\'\'", xml.getChildText("value"));
assertEquals("" + group.getId(), element.getChildText("group")); assertEquals("" + user.getId(), element.getChildText("user")); assertEquals(Profile.Editor.name(), element.getChildText("profile"));
assertEquals(1, _repo.count(hasMetadataId(metadata1.getId()))); assertEquals(0, _repo.count(hasMetadataId(metadata2.getId())));
assertEquals(1, query.execute(thesaurus).size()); assertEquals(0, query.execute(thesaurus).size());
assertFalse(resources.contains(baseResource)); assertTrue(resources.contains(otherResource));
assertEquals("dimension", dimensionTag.getName()); assertEquals(0, dimensionTag.getContent().size()); assertEquals(2, dimensionTag.getAttributes().size()); assertEquals("keyword", dimensionTag.getAttributeValue("name")); assertEquals("Keywords", dimensionTag.getAttributeValue("label"));
assertEquals(Settings.SYSTEM_CSW_CAPABILITY_RECORD_UUID, Xml.selectElement(result, Settings.SYSTEM_CSW_CAPABILITY_RECORD_UUID).getAttributeValue("name")); assertEquals("system/csw", Xml.selectElement(result, "system/csw").getAttributeValue("name"));
assertTrue(e.getMessage(), e.getMessage().contains(expr)); assertTrue(e.getMessage(), e.getMessage().contains("There is no object in the model"));
assertEquals(1, found.size()); assertEquals(user1.getId(), found.get(0).getId());
assertFalse(node.isMinimized); assertTrue(node.dependencyIds.isEmpty()); assertTrue(node.isMinimized); assertTrue(node.dependencyIds.isEmpty());
assertEquals(10, search.size());
assertEquals(test, result);
assertEquals(5, searcher.getSelectedKeywordsInList().size()); assertEquals(5, searcher.getSelectedKeywordsAsXml().getChildren("keyword").size()); assertEquals(0, searcher.getSelectedKeywordsInList().size()); assertEquals(0, searcher.getSelectedKeywordsAsXml().getChildren("keyword").size()); assertEquals(5, searcher.getSelectedKeywordsInList().size()); assertEquals(0, searcher.getSelectedKeywordsInList().size()); assertEquals(0, searcher.getSelectedKeywordsInList().size());
assertEquals(1, found.size()); assertEquals(user1.getId(), found.get(0).getId());
assertEquals(existingKeywordBean.getThesaurusKey(), decomposedAllUri.thesaurusKey); assertEquals(existingKeywordBean.getUriCode(), decomposedAllUri.keywordUri);
assertTrue("expected modified passed params", ret); assertTrue(params.getChild("from").getText().equals("1")); assertTrue(params.getChild("to").getText().equals(Integer.toString(xs.getMaxRecordValue())));
assertEquals(ReservedGroup.values().length, found.size()); assertTrue(group.isReserved()); assertEquals(1, found.size());
assertEquals(found.size(), 2);
assertEquals("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent[2]/gmd:EX_Extent/gmd:geographicElement[2]/gmd:EX_GeographicBoundingBox", functions.getXPathFrom(bbox)); assertEquals("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent[2]/gmd:EX_Extent/gmd:geographicElement[1]/gmd:EX_BoundingPolygon", functions.getXPathFrom(polygon));
assertEquals(expected.length(), numRead); assertEquals(expected.charAt(i), buffer.get(i));
assertEquals(time / 1000, new ISODate(time, false).getTimeInSeconds());
assertEquals(0, found.size()); assertEquals(1, found.size());
assertEquals(found.size(), 4);
assertEquals(1, found.size()); assertEquals(md1.getId(), found.get(0).getId());
assertEquals(loadExpectedResult("itemBuild.xml"), Xml.getString(summary));
assertTrue(node.dependencyIds.contains("3a"));
assertEquals(1, found.size()); assertEquals(md1.getId(), found.get(0).getId());
assertEquals(AllThesaurus.TITLE, this.allThesaurus.getTitle());
assertFalse(this.allThesaurus.isFreeCode(keywordBean.getNameSpaceCode(), keywordBean.getRelativeCode())); assertTrue(this.allThesaurus.isFreeCode("non existant", "non existant"));
assertEquals("WORD", new FilterUpperCase().process(null, "woRd"));
assertEquals(1, found.size()); assertEquals(_opAllowed1.getId(), found.get(0).getId());
assertEquals("It Is A Title", new FilterCapitalize().process(null, "it is a title"));
assertEquals(Xml.selectString(unchanged, "default/gui/xml[@name = \'countries\']/@file"), Xml.selectString(config, "default/gui/xml[@name = \'countries\']/@file"));
assertEquals(URL + "/v2/TestRuns/123.json", reportUrl);
assertEquals(6, urlFromDb.size()); assertEquals(6, metadataLinkList.size());
assertEquals(2, enabled.size()); assertEquals(1, notEnabled.size()); assertEquals(user3.getId(), notEnabled.get(0).getId());
assertEquals(jodaISODate, year + "-" + month + "-01T" + hour + ":" + minutes + ":00.000Z"); assertEquals(jodaISODate, tmp + "-01T00:00:00.000Z");
assertEquals(ug1.getProfile(), userGroup.getProfile());
assertTrue(e.getClass().toString(), e instanceof MissingParameterEx);
assertEquals("CREATE TABLE NewRelations", lines.get(0).trim()); assertEquals("(", lines.get(1).trim()); assertEquals("primary key(id,overridden)", lines.get(2).trim()); assertEquals(");", lines.get(3).trim()); assertEquals("INSERT INTO Settings VALUES (21,20,\'host\',\'localhost\');", lines.get(4).trim()); assertEquals("INSERT INTO Settings VALUES (22,20,\'port\',\'8080\');", lines.get(5).trim());
assertEquals(result.getUriCode(), TEST_KEYWORD);
assertEquals("Expected to get " + c + " at position " + i + " but got " + read, c, read); assertEquals(-1, mapReader.read());
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "fre", FormatType.html, "fmtId", true, FormatterWidth._100)));
assertEquals(data.getDataAsString(), loaded.getDataAsString()); assertEquals(data.getChangeDate(), loaded.getChangeDate()); assertEquals(data.isPublished(), loaded.isPublished()); assertTrue(0 < countFiles(geonetworkDataDirectory.getHtmlCacheDir()));
assertEquals(1, numDefaultTemplates); assertEquals(2, numNoDefaultTemplates);
assertEquals(1, found.size()); assertEquals(user1.getId(), found.get(0).getId());
assertEquals(expected.length(), numRead); assertEquals(expected.charAt(i), buffer[i]);
assertTrue("expected modified passed params", ret); assertTrue(params.getChild("from").getText().equals(Integer.toString(150 - xs.getMaxRecordValue()))); assertTrue(params.getChild("to").getText().equals("150"));
assertEquals("gmd:fileIdentifier/gco:CharacterString[normalize-space(text())=\'fileIdentifier\']", xpath.replaceAll("\\\\s+", "")); assertSame(charString, Xml.selectElement(TEST_METADATA, xpath, NAMESPACES));
assertTrue(locator.accept(resource.getUri())); assertEquals("goog.addDependency(\'" + PATH_TO_WEBAPP_BASE_FROM_CLOSURE_BASE_JS_FILE + "/abc.js\', [\'a\'], []);\\n", actual);
assertEquals(1, data.getValueAsInt()); assertEquals(1, data.getValueAsLong()); assertEquals(100, data.getValueAsInt()); assertEquals(100, data.getValueAsLong());
assertTrue(node.dependencyIds.contains("3a"));
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", false, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100)));
assertTrue(node.dependencyIds.contains("3a"));
assertFalse(this.allThesaurus.hasConceptScheme("any"));
assertEquals(6, metadataLinkList.size()); assertEquals(0, metadataLinkList.size()); assertEquals(6, urlFromDb.size());
assertFalse(found.contains(ug1.getId().getGroupId())); assertFalse(found.contains(ug2.getId().getGroupId())); assertTrue(found.contains(groupId)); assertFalse(found.contains(ug4.getId().getGroupId())); assertTrue(found.contains(ug1.getId().getGroupId())); assertTrue(found.contains(ug2.getId().getGroupId())); assertFalse(found.contains(groupId)); assertTrue(found.contains(ug4.getId().getGroupId()));
assertEquals("gmd:MD_Metadata", ((GPathResult) context.getModelValue("item")).name()); assertEquals("gmd:fileIdentifier", ((GPathResult) context.getModelValue("item.gmd:fileIdentifier")).name()); assertEquals("gmd:fileIdentifier", context.getModelValue("item.gmd:fileIdentifier.name()")); assertEquals("gco:CharacterString", ((GPathResult) context.getModelValue("item.gmd:fileIdentifier.gco:CharacterString")).name());
assertEquals(SchematronRequirement.REQUIRED, applicableSchematron.requirement);
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.xml, "fmtId", true, FormatterWidth._100)));
assertEquals(2, all.size()); assertTrue(all.contains(category.getName())); assertFalse(all.contains(category2.getName())); assertTrue(all.contains(category3.getName()));
assertNotNull(operationAllowed); assertEquals(_opAllowed1.getId().getGroupId(), operationAllowed.getId().getGroupId());
assertEquals(ug1.getId(), found.getId());
assertNotNull(this.allThesaurus.getKeywordUrl());
assertTrue(cacheConfig.allowCaching(new Key(1, "eng", FormatType.html, "fmtId", true, FormatterWidth._100))); assertFalse(cacheConfig.allowCaching(new Key(1, "eng", FormatType.xml, "fmtId", true, FormatterWidth._100)));
assertEquals(AllThesaurus.FNAME, this.allThesaurus.getFname());
assertTrue(not.canRender(context).isPresent()); assertFalse(not.canRender(context).isPresent()); assertTrue(normal.canRender(context).isPresent()); assertFalse(normal.canRender(context).isPresent());
assertTrue(allStrings, strings.contains("1a")); assertTrue(allStrings, strings.contains("1b")); assertTrue(allStrings, strings.contains("2a")); assertTrue(allStrings, strings.contains("2b")); assertTrue(allStrings, strings.contains("3a")); assertTrue(allStrings, strings.contains("3b")); assertTrue(allStrings, strings.contains("3c"));
assertEquals("keyword", categoryTag.getName()); assertEquals(0, categoryTag.getContent().size()); assertEquals(3, categoryTag.getAttributes().size()); assertEquals("oceans", categoryTag.getAttributeValue("name")); assertEquals("Oceans", categoryTag.getAttributeValue("label")); assertEquals("3", categoryTag.getAttributeValue("count"));
assertEquals("&gt;&amp;&lt;", new FilterEscapeXmlContent().process(null, ">&<"));
assertEquals(value.getHash(), loaded.getHash()); assertEquals(value.getRawContent(), loaded.getRawContent()); assertArrayEquals(value.getGzippedContent(), loaded.getGzippedContent()); assertEquals(value.getHash(), loaded.getHash()); assertEquals(value.getRawContent(), loaded.getRawContent()); assertArrayEquals(value.getGzippedContent(), loaded.getGzippedContent());
assertEquals(MetadataValidationStatus.NEVER_CALCULATED, metadataValidationStatus); assertEquals(MetadataValidationStatus.NEVER_CALCULATED, metadataValidationStatus); assertEquals(MetadataValidationStatus.DOES_NOT_APPLY, metadataValidationStatus); assertEquals(MetadataValidationStatus.VALID, metadataValidationStatus); assertEquals(MetadataValidationStatus.VALID, metadataValidationStatus); assertEquals(MetadataValidationStatus.INVALID, metadataValidationStatus);
assertEquals(6, metadataLinkList.size());
assertEquals(1, ret.getOperations().size()); assertTrue(ret.getOperations().contains(Operation.updated)); assertTrue(category.getName().equals(categoryName));
assertThat(subject.numSpecs(), equalTo(0L));
assertThat(subject.numSpecs(), equalTo(0L));
assertNull("If id is null event shoudl be null!", eventNode); assertNull("If id is invalid event shoudl be null!", eventNode); assertNull("Event shoudl exist!", eventNode);
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens()); assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertNotNull(theQueue); assertTrue(nodeService.exists(queueNode)); assertEquals(PublishingModel.TYPE_PUBLISHING_QUEUE, nodeService.getType(queueNode)); assertEquals(PublishingModel.ASSOC_PUBLISHING_QUEUE, parentAssoc.getTypeQName()); assertEquals(rootObject.getEnvironment().getNodeRef(), parentAssoc.getParentRef());
assertEquals(companyHome, result);
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens()); assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertEquals("/cm:homeFolder/cm:folder2/cm:content1", auditMap.get("move/from/path")); assertEquals(content1, auditMap.get("move/from/node")); assertEquals("cm:content", auditMap.get("move/from/type"));
assertTrue("Should always allow caching", quota.beforeWritingCacheFile(0)); assertTrue("Should always allow caching", quota.beforeWritingCacheFile(Long.MAX_VALUE));
assertEquals(4234L, cachingStore.getSpaceTotal());
assertTrue("Should match 1st regex", filter.accept(rootPath, auditMap));
assertTrue("The existing Temporary1 folder should still exist", exists("Temporary1")); assertTrue("The existing Temporary2 folder should still exist", exists("Temporary2")); assertTrue("The existing Temporary3 folder should still exist", exists("Temporary3")); assertTrue("The existing Temporary4 folder should still exist", exists("Temporary4"));
assertTrue("Should match any value starting with \'~\'.", filter.accept(rootPath, auditMap));
assertTrue("Temp file should have been written", cacheFile.exists()); assertFalse("File should have been deleted", cacheFile.exists());
assertTrue("Value should have been accepted.", actual);
assertEquals(3, files.size()); assertEquals(1, files.get(0).length() / FileUtils.ONE_MB); assertEquals(2, files.get(1).length() / FileUtils.ONE_MB); assertEquals(3, files.get(2).length() / FileUtils.ONE_MB);
assertNotNull(site); assertNotNull(webHome); assertEquals(site, actualSite);
assertEquals(1, auditMapList.size()); assertEquals("READ", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder1/cm:content1", auditMap.get("path")); assertEquals("cm:content", auditMap.get("type"));
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens()); assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertEquals("Incorrect data string.", expectedString, dateString);
assertTrue("The check should have worked on the value.toString().", actual);
assertEquals(1, auditMapList.size()); assertEquals("MOVE", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder1/cm:content3", auditMap.get("path")); assertEquals("/cm:homeFolder/cm:folder3/cm:content3", auditMap.get("move/from/path")); assertEquals("cm:content", auditMap.get("type"));
assertTrue(cachingStore.delete("url")); assertFalse(cachingStore.delete("url"));
assertEquals(1, ((Map<?,?>)auditMap.get("version-properties")).size()); assertEquals("Grouped description version-properties missing", "This is a test", ((Map<?,?>)auditMap.get("version-properties")).get(Version.PROP_DESCRIPTION)); assertEquals("Individual description version-properties missing", "This is a test", auditMap.get("version-properties/description"));
assertEquals(453L, cachingStore.getSpaceUsed());
assertTrue("Should match only zero length values", filter.accept(rootPath, auditMap));
assertEquals("/&\\u3001", ((Map<?,?>)auditMap.get("properties/delete")).get(qName)); assertEquals("/&\\u3001", auditMap.get("properties/delete/cm:valid---"));
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens()); assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertNotNull(channels); assertTrue(nodeService.exists(channels)); assertEquals(ContentModel.TYPE_FOLDER, nodeService.getType(channels)); assertEquals(PublishingRootObject.CHANNELS_QNAME, parentAssoc.getQName()); assertEquals(rootObject.getEnvironment().getNodeRef(), parentAssoc.getParentRef());
assertTrue("Should always allow cache file to remain", quota.afterWritingCacheFile(0)); assertTrue("Should always allow cache file to remain", quota.afterWritingCacheFile(Long.MAX_VALUE));
assertFalse("Pre-condition of test is that cacheRoot does not exist", cacheRoot.exists()); assertTrue("cacheRoot should have been created", cacheRoot.exists());
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens()); assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertEquals(124L, cachingStore.getSpaceFree());
assertEquals(1, auditMapList.size()); assertEquals("UPDATE CONTENT", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder1/cm:content1", auditMap.get("path")); assertEquals("cm:content", auditMap.get("type"));
assertNotNull(eventId); assertNotNull(eventId);
assertTrue(cachingStore.exists("url")); assertFalse(cachingStore.exists("url"));
assertFalse("Redirected properties should have rejected the value.", actual);
assertTrue("A null value should match null", actual);
assertEquals(testHomeFolderProviderName , providerName);
assertEquals(sitesHome, result);
assertTrue("Expected the empty parent \'a/b/c\' to still exist as original " + "root was unknown, because the original home folder provider was not set.", exists("a/b/c"));
assertSame(returnedReader, cachedContent);
assertTrue("Expected the empty parent \'a/bb/ccc\' to still exist as global " + "property was set.", exists("a/bb/ccc"));
assertSame(returnedReader, sourceContent);
assertEquals("Wrong tokens", expectedTokens, t.getAllTokens());
assertTrue("Value should have been accepted.", actual);
assertTrue("File should exist", cacheFile.exists());
assertTrue("Filter should only run if properties are set.", actual);
assertFalse(SITE_SERVICE.hasContainer(TEST_SITE_NAME, WikiServiceImpl.WIKI_COMPONENT)); assertTrue(SITE_SERVICE.hasContainer(TEST_SITE_NAME, WikiServiceImpl.WIKI_COMPONENT)); assertTrue(TAGGING_SERVICE.isTagScope(container));
assertFalse("Zero length files should not be cached", putResult);
assertEquals(1, auditMapList.size()); assertEquals("COPY", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder1/cm:content2", auditMap.get("path")); assertEquals("/cm:homeFolder/cm:folder2/cm:content2", auditMap.get("copy/from/path")); assertEquals("cm:content", auditMap.get("type"));
assertFalse("The \'default\' fallback action should have been used to " + "enable the filter and reject the value.", actual);
assertEquals(1, auditMapList.size()); assertEquals("DELETE", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder0/cm:content0", auditMap.get("path")); assertEquals("cm:content", auditMap.get("type"));
assertTrue("Should match any values just like having no property", actual);
assertEquals(234L, cachingStore.getTotalSize());
assertFalse("File should have been deleted: " + file, file.exists()); assertEquals("Incorrect number of deleted files", numFiles, cleaner.getNumFilesDeleted()); assertEquals("Incorrect total size of files deleted", totalSize, cleaner.getSizeFilesDeleted());
assertNotNull(theEnvironment); assertTrue(nodeService.exists(theEnvironment.getNodeRef())); assertEquals(PublishingModel.TYPE_ENVIRONMENT, nodeService.getType(theEnvironment.getNodeRef()));
assertFalse("Value should have been rejected.", actual);
assertFalse(SITE_SERVICE.hasContainer(TEST_SITE_NAME, DiscussionServiceImpl.DISCUSSION_COMPONENT)); assertTrue(SITE_SERVICE.hasContainer(TEST_SITE_NAME, DiscussionServiceImpl.DISCUSSION_COMPONENT)); assertTrue(TAGGING_SERVICE.isTagScope(container));
assertTrue(cachingStore.isWriteSupported()); assertFalse(cachingStore.isWriteSupported());
assertTrue(types.contains(mockChannelType));
assertTrue("Should match 1st regex", filter.accept(rootPath, auditMap)); assertFalse("Should match 2nd regex", filter.accept(rootPath, auditMap)); assertTrue("Should match 3rd regex", filter.accept(rootPath, auditMap));
assertFalse(SITE_SERVICE.hasContainer(TEST_SITE_NAME, LinksServiceImpl.LINKS_COMPONENT));
assertFalse("Should match nothing", filter.accept(rootPath, auditMap));
assertEquals("/random/root/dir", cachingStore.getRootLocation());
assertEquals("/cm:homeFolder/cm:folder2/cm:content2", auditMap.get("copy/from/path")); assertEquals(content2, auditMap.get("copy/from/node")); assertEquals("cm:content", auditMap.get("copy/from/type"));
assertFalse("File should have been deleted: " + file, file.exists()); assertTrue("File should not have been deleted: " + file, file.exists()); assertEquals("Incorrect number of deleted files", newFiles.length, cleaner.getNumFilesDeleted()); assertEquals("Incorrect total size of files deleted", newFilesTotalSize, cleaner.getSizeFilesDeleted());
assertSame(returnedReader, cachedContent);
assertEquals(1, auditMapList.size()); assertEquals("deleteNodeAspect", auditMap.get("action")); assertEquals("/cm:homeFolder/cm:folder1/cm:content1", auditMap.get("path")); assertEquals(1, ((Set<?>)auditMap.get("aspects/delete")).size()); assertTrue("Individual author aspect missing", auditMap.containsKey("aspects/delete/cm:author")); assertEquals("cm:content", auditMap.get("type"));
assertTrue(cachingStore.isContentUrlSupported("url")); assertFalse(cachingStore.isContentUrlSupported("url"));
assertTrue("A null value should match null", actual);
assertEquals(method.invoke(byHandModel), byHandModel.getA()); assertEquals(method, method2);
assertEquals(method.invoke(null), SomeModel.staticZero());
assertEquals(byHandModel, autoModel); assertEquals(constructor, constructor2);
assertNotNull(bindableLayout); assertTrue(mockLayout.fromBuild);
assertEquals(autoModel.getA(), byHandModel.getA());
assertEquals(byHandModel, autoModel); assertEquals(constructor, constructor2);
assertThat(EventConverter.toMethodInfo("test1", "test2"), is("confirm=test1,cancel=test2"));
assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(localTxId)); assertThat(event.parentTxId(), is(parentTxId)); assertThat(event.type(), is(EventType.TxAbortedEvent)); assertThat(event.compensationMethod(), is(compensationMethod));
assertThat(e, instanceOf(TransactionTimeoutException.class)); assertThat(e.getCause(), instanceOf(InterruptedException.class));
assertThat(e, instanceOf(OmegaException.class));
assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId())); assertThat(requestCaptor[0].getGlobalTxId(), is(globalTxId)); assertThat(requestCaptor[0].getLocalTxId(), is(localTxId)); assertThat(requestCaptor[0].getStatus(), is(TransactionStatus.Failed.toString())); assertThat(response.aborted(), is(false));
assertThat(this.events, contains(events));
assertThat(e.getMessage(), is("Failed to process subsequent requests because no alpha server is available"));
assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat(loadContext.getSenders().get(actualSender), greaterThan(0L)); assertThat(response.aborted(), is(false));
assertThat(loadContext.getSenders().get(actualSender), greaterThan(0L)); assertThat(response.aborted(), is(false));
assertThat(events.size(), is(1)); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(localTxId)); assertThat(event.parentTxId(), is(parentTxId)); assertThat(event.type(), is(EventType.TxCompensateAckFailedEvent)); assertThat(event.compensationMethod(), is(getClass().getCanonicalName())); assertThat(event.payloads().length, greaterThan(0));
assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(localTxId)); assertThat(event.parentTxId(), is(parentTxId)); assertThat(event.type(), is(EventType.TxEndedEvent)); assertThat(event.compensationMethod(), is(compensationMethod)); assertThat(event.payloads().length, is(0));
assertThat(e.getMessage(), is("No such omega callback found for service " + serviceName2)); assertThat(callbacks.get(serviceName1).values(), Matchers.containsInAnyOrder(callback1One, callback1Two)); assertThat(callbacks.get(serviceName2).isEmpty(), is(true));
assertThat(events.size(), is(2));
assertThat(EventConverter.getMethodName("confirm=text1,cancel=text2",true), is("text1")); assertThat(EventConverter.getMethodName("confirm=text1,cancel=text2",false), is("text2"));
assertThat(e.getMessage().endsWith("interruption"), Is.is(true));
assertThat(events.size(), is(1)); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(localTxId)); assertThat(event.parentTxId(), is(parentTxId)); assertThat(event.type(), is(EventType.TxCompensatedEvent)); assertThat(event.compensationMethod(), is(getClass().getCanonicalName())); assertThat(event.payloads().length, is(0));
assertThat(invocation.getAttachments().get(OmegaContext.GLOBAL_TX_ID_KEY), is(globalTxId)); assertThat(invocation.getAttachments().get(OmegaContext.LOCAL_TX_ID_KEY), is(localTxId));
assertThat(runnables.size(), is(2)); assertThat(runnables.poll(), is(NO_OP_RUNNABLE)); assertThat(runnables.size(), is(1));
assertThat(ex.getMessage(), is("Cannot find the globalTxId from OmegaContext. Please using @SagaStart to start a global transaction."));
assertThat(event.getGlobalTxId(), is(globalTxId)); assertThat(event.getLocalTxId(), is(globalTxId)); assertThat(event.getStatus(), is(TransactionStatus.Failed));
assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(globalTxId)); assertThat(event.parentTxId(), is(nullValue())); assertThat(event.compensationMethod().isEmpty(), is(true)); assertThat(event.type(), is(EventType.SagaEndedEvent)); assertThat(event.payloads().length, is(0));
assertEquals(SagaActorState.IDLE, currentState.state()); assertEquals(terminated.getActor(), saga); assertEquals(sagaData.getGlobalTxId(), globalTxId); assertEquals(sagaData.getTxEntities().size(), 1); assertEquals(sagaData.getTxEntities().get(localTxId_1).getState(), TxState.FAILED); assertEquals(sagaData.getCompensationRunningCounter().intValue(), 0); assertThat(eventList, is(sagaData.getEvents()));
assertThat(events.size(), is(1)); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(localTxId)); assertThat(event.parentTxId(), is(parentTxId)); assertThat(event.type(), is(EventType.TxCompensateAckSucceedEvent)); assertThat(event.compensationMethod(), is(getClass().getCanonicalName())); assertThat(event.payloads().length, is(0));
assertEquals(transactionGlobalTxId, omegaContext.globalTxId()); assertEquals(transactionLocalTxId, omegaContext.localTxId());
assertThat(e, instanceOf(TransactionTimeoutException.class)); assertThat(e.getCause(), instanceOf(ClosedByInterruptException.class));
assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat(coordinatedEvents.size(), is(1)); assertThat(event.getGlobalTxId(), is(globalTxId)); assertThat(event.getLocalTxId(), is(localTxId)); assertThat(event.getParentTxId(), is(parentTxId)); assertThat(event.getMethodName(), is(methodName)); assertThat(event.getStatus(), is(TransactionStatus.Succeed));
assertTrue(Iterables.elementsEqual(entities, reverseEntities));
assertThat(invocation.getContext().get(OmegaContext.GLOBAL_TX_ID_KEY), is(globalTxId)); assertThat(invocation.getContext().get(OmegaContext.LOCAL_TX_ID_KEY), is(localTxId));
assertThat(e, instanceOf(TransactionTimeoutException.class)); assertThat(e.getCause(), instanceOf(IllegalMonitorStateException.class));
assertThat(callbacks.get(serviceName1).values(), Matchers.containsInAnyOrder(callback1One, callback1Two)); assertThat(callbacks.get(serviceName2).values(), Matchers.containsInAnyOrder(callback2One, callback2Two));
assertThat(e, is(oops)); assertThat(messages.size(), is(1)); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(globalTxId)); assertThat(event.parentTxId(), is(nullValue())); assertThat(event.type(), is(EventType.SagaAbortedEvent));
assertThat(invocation.getAttachments().isEmpty(), is(true));
assertThat(e.getMessage(), is("No such omega callback found for service " + serviceName2)); assertThat(callbacks.get(serviceName1).values(), Matchers.containsInAnyOrder(callback1One, callback1Two)); assertThat(callbacks.containsKey(serviceName2), is(false));
assertThat(loadContext.getSenders().get(actualSender), greaterThan(0L)); assertThat(response.aborted(), is(false));
assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat(result.globalTxId(), is(transactionGlobalTxId)); assertThat(result.localTxId(), is(transactionLocalTxId)); assertNull(result); assertNull(result); assertThat(result, is(txContext)); assertThat(result, is(otherTx));
assertThat(messages.size(), is(1)); assertThat(endedEvent.globalTxId(), is(globalTxId)); assertThat(endedEvent.localTxId(), is(globalTxId)); assertThat(endedEvent.parentTxId(), is(nullValue())); assertThat(endedEvent.type(), is(EventType.SagaEndedEvent));
assertThat(messages, contains("hello", "world"));
assertThat(e.getMessage().endsWith("interruption"), is(true));
assertThat(runnables.isEmpty(), is(false)); assertThat(messages.isEmpty(), is(true));
assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId())); assertThat(requestCaptor[0].getGlobalTxId(), is(globalTxId)); assertThat(requestCaptor[0].getLocalTxId(), is(localTxId)); assertThat(requestCaptor[0].getParentTxId(), is(parentTxId)); assertThat(response.aborted(), is(false));
assertThat((connected.get(8080).size() == 1 && connected.get(8090).size() == 1), is(true)); assertThat(eventsMap.get(8080).size(), is(2)); assertThat(eventsMap.get(8090).size(), is(1)); assertThat(eventsMap.get(8090).size(), is(2)); assertThat(eventsMap.get(8080).size(), is(3));
assertThat(invocation.getContext().isEmpty(), is(true));
assertThat(request.getHeaders().get(OmegaContext.GLOBAL_TX_ID_KEY), contains(globalTxId)); assertThat(request.getHeaders().get(OmegaContext.LOCAL_TX_ID_KEY), contains(localTxId));
assertThat(omegaContext.globalTxId(), is(globalTxId)); assertThat(omegaContext.localTxId(), is(localTxId)); assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat((connected.get(8080).size() == 1 && connected.get(8090).size() == 1), is(true)); assertThat(ex.getMessage().endsWith("all alpha server is down."), is(true));
assertThat(callbacks.get(serviceName1).values(), containsInAnyOrder(callback1One)); assertThat(callbacks.get(serviceName2).values(), Matchers.containsInAnyOrder(callback2One, callback2Two));
assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId())); assertThat(requestCaptor[0].getGlobalTxId(), is(globalTxId)); assertThat(requestCaptor[0].getLocalTxId(), is(localTxId)); assertThat(response.aborted(), is(false));
assertThat(request.getHeaders().isEmpty(), is(true));
assertEquals(transactionGlobalTxId, omegaContext.globalTxId()); assertEquals(transactionLocalTxId, omegaContext.localTxId());
assertThat(e, instanceOf(TransactionTimeoutException.class)); assertThat(e.getCause(), instanceOf(InterruptedException.class));
assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId()));
assertThat(callbacks.get(serviceName1).values(), Matchers.containsInAnyOrder(callback1One, callback1Two)); assertThat(callbacks.get(serviceName2).values(), containsInAnyOrder(callback2Two));
assertThat(messages.size(), is(1)); assertThat(startedEvent.globalTxId(), is(globalTxId)); assertThat(startedEvent.localTxId(), is(globalTxId)); assertThat(startedEvent.parentTxId(), is(nullValue())); assertThat(startedEvent.type(), is(EventType.SagaStartedEvent)); assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat(events.size(), is(2));
assertThat(e.getMessage(), is("exception")); assertThat(e.getCause(), instanceOf(RuntimeException.class)); assertThat(e.getCause().getMessage(), is("runtime exception"));
assertThat(e, is(oops)); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(newLocalTxId)); assertThat(event.parentTxId(), is(localTxId)); assertThat(event.type(), is(EventType.TxAbortedEvent)); assertThat(omegaContext.globalTxId(), is(globalTxId)); assertThat(omegaContext.localTxId(), is(localTxId));
assertThat(omegaContext.globalTxId(), is(globalTxId)); assertThat(omegaContext.localTxId(), is(localTxId)); assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue()));
assertThat(event.getGlobalTxId(), is(globalTxId)); assertThat(event.getLocalTxId(), is(globalTxId)); assertThat(result, is(response));
assertThat(omegaContext.globalTxId(), is(globalTxId)); assertThat(omegaContext.localTxId(), is(localTxId));
assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId()));
assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(globalTxId)); assertThat(event.parentTxId(), is(nullValue())); assertThat(event.compensationMethod().isEmpty(), is(true)); assertThat(event.type(), is(EventType.SagaStartedEvent)); assertThat(event.payloads().length, is(0));
assertThat(event.getGlobalTxId(), is(globalTxId)); assertThat(event.getLocalTxId(), is(globalTxId)); assertThat(event.getStatus(), is(TransactionStatus.Succeed));
assertEquals(UINT.MAX_VALUE, uInt.longValue());
assertEquals(true, v2_00.isLT(v3_00)); assertEquals(false, v3_00.isLT(v2_00)); assertEquals(false, v2_00.isLT(v2_00));
assertArrayEquals(new long[0], array.get());
assertFalse(bType.booleanValue());
assertEquals(false, v3_03.isGE(v3_11)); assertEquals(true, v3_03.isGE(v3_03)); assertEquals(true, v3_11.isGE(v3_03));
assertArrayEquals(new long[0], array.get());
assertEquals(false, v2_00.isGE(v3_00)); assertEquals(true, v3_00.isGE(v2_00)); assertEquals(true, v3_00.isGE(v3_00));
assertEquals(0x00010A02, XFSUtils.getVersionsRequired("1", "2.10")); assertEquals(0x0B020003, XFSUtils.getVersionsRequired("2.11", "3.0")); assertEquals(0x0B010003, XFSUtils.getVersionsRequired("1.11", "3"));
assertEquals(expected, actual);
assertEquals(0x0001, XFSUtils.getVersion("1.0")); assertEquals(0x0001, XFSUtils.getVersion("1.")); assertEquals(0x0000, XFSUtils.getVersion("0.")); assertEquals(0x0B00, XFSUtils.getVersion(".11"));
assertEquals(expected, actual);
assertEquals(USHORT.MAX_VALUE, uShort.intValue());
assertEquals(0x0B01, XFSUtils.getVersion("1.11"));
assertArrayEquals(expecteds, p.get());
assertTrue(bType.booleanValue());
assertEquals("2.10", XFSUtils.getVersionAsString(0x0A02)); assertEquals("1.0", XFSUtils.getVersionAsString(0x0001)); assertEquals("3.11", XFSUtils.getVersionAsString(0x0B03)); assertEquals("4.2", XFSUtils.getVersionAsString(0x0204));
assertArrayEquals(new int[0], array.get());
assertTrue(jsPrecondition.isSatisfied());
assertFalse(getHtmlFromCurrentHostPredicate.test(httpRequest));
assertEquals("tenniskafe", applicationConfiguration.getApplicationName());
assertTrue(outputFile.exists()); assertTrue(outputFile.delete());
assertEquals(parameterName, actual.getParameterName()); assertNull(actual.getAlias()); assertEquals(value, actual.getValue()); assertFalse(actual.isExposed());
assertEquals(EXAMPLE_NAME, actual.getApplicationName()); assertEquals(EXAMPLE_VERSION, actual.getVersion()); assertEquals(exampleModel.getActions().size(), actionConfigurations.size()); assertEquals(actionConfigurations, mockConfigurations);
assertNotNull(jsArriveHandlerBuilder.attachListenerForEvent("click"));
assertEquals(expected, actual);
assertEquals(automationResult, AutomationResult.TIMEOUT);
assertTrue(generatedJavascript.contains(generatedCodeForFirstAction)); assertTrue(generatedJavascript.contains(generatedCodeForSecondAction)); assertEquals(expected, generatedJavascript);
assertEquals(1, lines.size()); assertEquals("searchTerm: dress ", lines.get(0));
assertEquals(expected, actual);
assertTrue(filteredActions.contains(configThatShouldBeIncluded)); assertFalse(filteredActions.contains(configThatShouldNotBeIncluded));
assertEquals(applicationConfiguration, actual);
assertNotNull(jsEventListenerBodyBuilder.startCollectingParameters("something"));
assertTrue(outputJS.startsWith("<script>")); assertTrue(outputJS.endsWith("</script>"));
assertNotNull(jsFunctionDeclarerBuilder.startBody());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("tenniskafe", applicationConfiguration.getApplicationName());
assertEquals(1, lines.size()); assertEquals("clickLoginButtonActionName: Click login button ", lines.get(0));
assertEquals(content, actual.getContent());
assertEquals(expected, actual);
assertFalse(getHtmlFromCurrentHostPredicate.test(httpRequest));
assertNotNull(jsFunctionBodyBuilder.whenCssSelectorArrives("#title"));
assertTrue(getHtmlFromCurrentHostPredicate.test(httpRequest));
assertEquals(firstStep.get(EVENT), "Load initial page");
assertFalse(getHtmlFromCurrentHostPredicate.test(httpRequest));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(2, lines.size()); assertEquals("loadPage: Load text-field.html page ", lines.get(0)); assertEquals("typeInNameInput: Type admin in name input ", lines.get(1));
assertEquals(expected, actual);
assertEquals(false, applicationActionConfiguration.expectsHttpRequest());
assertEquals(expected, actual);
assertEquals(TEXT_OF_ELEMENT_FOUND_BY_CSS_SELECTOR_TO_BE, actual.getWebDriverActionType()); assertEquals(parameterConfigurationMap, actual.getParametersConfiguration());
assertEquals(eventName, action.getName()); assertEquals(expectsHttp, action.expectsHttpRequest());
assertTrue(uriContainsStringPredicate.test(httpRequest));
assertEquals(parameterName, actual.getParameterName()); assertNull(actual.getValue()); assertEquals(aliasText, actual.getAlias()); assertTrue(actual.isExposed());
assertEquals(automationResult, AutomationResult.ASSERTION_ERROR);
assertTrue(noHttpRequestsInQueue.isSatisfied());
assertEquals(expected, actual);
assertEquals(EXAMPLE_NAME, configuration.getApplicationName()); assertEquals(EXAMPLE_VERSION, configuration.getVersion());
assertEquals(automationResult, AutomationResult.INTERRUPTED);
assertTrue(actual.isPresent()); assertEquals(expected, actual.get());
assertEquals(expected, actual);
assertEquals(automationResult, AutomationResult.TIMEOUT);
assertNotNull(jsFunctionBodyBuilder.whenCssSelectorLeaves("#title"));
assertEquals(expected, actual);
assertEquals(driver, driverOperations.getDriver());
assertTrue(actual.containsKey(TEXT)); assertEquals(adminConfigurationMock, actual.get(TEXT)); assertTrue(actual.containsKey(SELECTOR)); assertEquals(userSelectorConfigurationMock, actual.get(SELECTOR));
assertFalse(getHtmlFromCurrentHostPredicate.test(httpRequest));
assertEquals(NO_HTTP_REQUESTS_IN_QUEUE, noHttpRequestsInQueue.getName());
assertEquals(expected, actual);
assertEquals(automationResult, AutomationResult.INTERRUPTED);
assertEquals(automationResult, AutomationResult.UNRECOGNIZED_EXCEPTION);
assertEquals(applicationConfiguration, actual);
assertEquals(eventName, jsPrecondition.getName());
assertEquals(har, driverOperations.getHar());
assertEquals(expected, actual);
assertEquals(exposedParameter, actual.getExposedParameter());
assertEquals(expected, actual);
assertEquals(ELEMENT_BY_CSS_TO_BE_PRESENT, actual.getWebDriverActionType()); assertEquals(parameterConfigurationMap, actual.getParametersConfiguration());
assertEquals(true, result);
assertEquals(false, result);
assertTrue(expectedTitles.contains(actualTitle)); assertEquals("destination", modelParameterForExtremeSearchResult.getName()); assertThat(modelParameterForExtremeSearchResult.getDescription(),containsString("city or airport")); assertEquals("string", modelParameterForExtremeSearchResult.getType()); assertEquals("results", modelParameterForResults.getName()); assertEquals("array", modelParameterForResults.getType()); assertEquals("LowFareSearchResult", modelParameterForResults.getReferenceModel());
assertTrue(newTradeTweets.isEmpty()); assertEquals(1, newTradeTweets.size());
assertEquals(2, currencies.length); assertEquals("EUR", currencies[0]); assertEquals("GBP", currencies[1]); assertEquals(1, currencies.length); assertEquals("EUR_CHF", currencies[0]);
assertEquals(1, tweets.size());
assertTrue(service.isInSafeZone(TradingSignal.LONG, 1.3, eurusd)); assertTrue(service.isInSafeZone(TradingSignal.SHORT, 1.11, eurusd)); assertFalse(service.isInSafeZone(TradingSignal.LONG, 1.36, eurusd)); assertFalse(service.isInSafeZone(TradingSignal.SHORT, 1.05, eurusd));
assertEquals("AUD_USD", this.providerHelper.fromHashTagCurrency("#AUDUSD"));
assertEquals(1.11814, tpPrice, TradingTestConstants.precision); assertEquals(121.704, tpPrice, TradingTestConstants.precision); assertEquals(0.94992, tpPrice, TradingTestConstants.precision); assertEquals(134.665, tpPrice, TradingTestConstants.precision); assertEquals(0.0, tpPrice, TradingTestConstants.precision);
assertFalse(TradingUtils.isEmpty(nameColl)); assertTrue(TradingUtils.isEmpty(nameColl)); assertTrue(TradingUtils.isEmpty(nameColl)); assertFalse(TradingUtils.isEmpty(idNameMap)); assertTrue(TradingUtils.isEmpty(idNameMap)); assertTrue(TradingUtils.isEmpty(idNameMap));
assertEquals(7, allTrades.size());
assertEquals(2, currencies.length); assertEquals("EUR", currencies[0]); assertEquals("USD", currencies[1]);
assertEquals("USDJPY", this.providerHelper.toIsoFormat("USD_JPY"));
assertEquals(2, accountIds.size()); assertEquals(1, accountIds.size());
assertEquals("XAU_USD", currencyPair);
assertTrue(success);
assertEquals(1430469000000000L, TradingUtils.toUnixTime(dt));
assertEquals(0, jpyCt); assertEquals(1, nzdCt); assertEquals(-1, audCt);
assertEquals(1, eligibleAccounts.size()); assertEquals(1001L, eligibleAccount);
assertTrue(success);
assertEquals("GBP_NZD", this.providerHelper.fromPairSeparatorFormat("GBP/NZD"));
assertEquals(3, allTradesAcc1.size()); assertEquals(4, allTradesAcc2.size());
assertTrue(service.isTradeExistsForInstrument(new TradeableInstrument<String>("AUD_USD"))); assertFalse(service.isTradeExistsForInstrument(new TradeableInstrument<String>("AUD_CHF")));
assertFalse(trades.isEmpty()); assertTrue(trades.isEmpty());
assertEquals(1, tweets.size());
assertEquals(1430469789198L, TradingUtils.toMillisFromNanos(nanoinstant));
assertEquals("hello world foo!!", TradingUtils.responseToString(resp));
assertNotNull(ravenDBFactory.get("database"));
assertTrue(documentEntity.getDocuments().stream().map(Document::getName).anyMatch(s -> s.equals(ID)));
assertEquals(10, ValueUtil.convert(value));
assertNotNull(managerFactory);
assertTrue(factory.getList("jnosql", String.class) instanceof CouchbaseArrayList); assertTrue(factory.getList("jnosql", User.class) instanceof CouchbaseList); assertTrue(factory.getList("jnosql", "jnosql", User.class) instanceof CouchbaseList); assertTrue(factory.getList("jnosql", "jnosql", String.class) instanceof CouchbaseArrayList);
assertNotNull(set);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name LIMIT 1, 5 RETURN c", aql);
assertNotNull(managerFactory);
assertNotNull(database);
assertEquals("namespace:key", RedisUtils.createKeyWithNameSpace("key", "namespace"));
assertNotNull(columnEntityManager);
assertNotNull(factory.get("database"));
assertNotNull(map);
assertEquals("value", values.get(0)); assertEquals("SELECT FROM collection WHERE name = ?", sql);
assertNotNull(managerFactory);
assertNotNull(managerFactory);
assertTrue(valueReader.test(Binary.class)); assertFalse(valueReader.test(AtomicBoolean.class));
assertNotNull(map);
assertNotNull(managerFactory);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name SORT c.name ASC RETURN c", aql);
assertNotNull(managerFactory);
assertNotNull(configuration.get());
assertNotNull(managerFactory);
assertNotNull(entityManagerFactory);
assertEquals(3, values.size()); assertEquals("Assis", values.get(0)); assertEquals("Otavio", values.get(1)); assertEquals("Lucas", values.get(2)); assertEquals("SELECT FROM collection WHERE NOT (city = ?) AND name = ? OR NOT (name = ?)", sql);
assertNotNull(managerFactory);
assertNotNull(managerFactory);
assertTrue(users.contains(userOtavioJava));
assertNotNull(managerFactory);
assertThat(columns, Matchers.containsInAnyOrder(Column.of("firstname", "Ada"), Column.of("lastname", "Lovelace")));
assertNotNull(managerFactory);
assertTrue(count == 2);
assertNotNull(factory.get(CouchbaseUtil.BUCKET_NAME));
assertEquals(entity, documentEntity);
assertNotNull(list);
assertNotNull(set);
assertTrue(fruits.contains(banana)); assertFalse(fruits.contains(melon)); assertTrue(fruits.containsAll(Arrays.asList(banana, orange))); assertFalse(fruits.containsAll(Arrays.asList(banana, melon)));
assertEquals(Arrays.asList(10, 20), ValueUtil.convertToList(value));
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name AND c.age <= @age RETURN c", aql);
assertEquals(1D, counter.increment()); assertEquals(10D, counter.increment(9));
assertEquals(Arrays.asList(10, 20), ValueUtil.convert(value));
assertEquals("SELECT FROM collection SKIP 10", convert.getQuery());
assertNotNull(queue);
assertEquals("SELECT FROM collection LIMIT 100", convert.getQuery());
assertEquals(Arrays.asList(10, 20), ValueUtil.convertToList(value));
assertNotNull(managerFactory);
assertEquals("SELECT FROM collection ORDER BY name DESC", convert.getQuery());
assertEquals(Collections.singletonList(10), ValueUtil.convertToList(value));
assertTrue(factory.getQueue("jnosql", String.class) instanceof com.couchbase.client.java.datastructures.collections.CouchbaseQueue); assertTrue(factory.getQueue("jnosql", User.class) instanceof CouchbaseQueue); assertTrue(factory.getQueue("jnosql", "jnosql", User.class) instanceof CouchbaseQueue); assertTrue(factory.getQueue("jnosql", "jnosql", String.class) instanceof com.couchbase.client.java.datastructures.collections.CouchbaseQueue);
assertEquals("value", values.get(0)); assertEquals("SELECT FROM collection WHERE NOT (name = ?)", sql);
assertNotNull(managerFactory);
assertEquals(Arrays.asList(10, 20), ValueUtil.convert(value));
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER NOT c.name == @name RETURN c", aql);
assertEquals("SELECT FROM collection ORDER BY name ASC", convert.getQuery());
assertTrue(users.containsAll(Arrays.asList(userOtavioJava, felipe)));
assertEquals("value", values.get(0)); assertEquals(10, values.get(1)); assertEquals("SELECT FROM collection WHERE name = ? OR age <= ?", sql);
assertNotNull(managerFactory);
assertNotNull(database);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name RETURN c", aql);
assertTrue(documentEntity.find(CouchDBConstant.ID).isPresent());
assertTrue(entities.isEmpty());
assertNotNull(queue);
assertNotNull(managerFactory);
assertEquals("SELECT FROM collection ORDER BY name ASC, age DESC", convert.getQuery());
assertNotNull(list);
assertEquals("SELECT FROM collection SKIP 10 LIMIT 100", convert.getQuery());
assertNotNull(entityManagerFactory);
assertNotNull(managerFactory);
assertNotNull(managerFactory);
assertNotNull(managerFactory);
assertNotNull(configuration.get());
assertEquals("value", values.get(0)); assertEquals(10, values.get(1)); assertEquals("SELECT FROM collection WHERE name = ? AND age <= ?", sql);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name SORT c.name ASC , c.age DESC RETURN c", aql);
assertEquals(3, values.size()); assertEquals("Assis", values.get("city")); assertEquals("Otavio", values.get("name")); assertEquals("Lucas", values.get("name_1")); assertEquals("FOR c IN collection FILTER NOT c.city == @city AND c.name == @name OR NOT c.name == @name_1 RETURN c", aql);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name LIMIT 5 RETURN c", aql);
assertNotNull(mongoDBFactory.get("database"));
assertTrue(factory.getSet("jnosql", String.class) instanceof CouchbaseArraySet); assertTrue(factory.getSet("jnosql", User.class) instanceof CouchbaseSet); assertTrue(factory.getSet("jnosql", "jnosql", User.class) instanceof CouchbaseSet); assertTrue(factory.getSet("jnosql", "jnosql", String.class) instanceof CouchbaseArraySet);
assertNotNull(database);
assertEquals("value", values.get("name")); assertEquals("FOR c IN collection FILTER c.name == @name OR c.age <= @age RETURN c", aql);
assertEquals(new Binary(bytes), valueReader.read(Binary.class, bytes)); assertEquals(new Binary("hello".getBytes()), valueReader.read(Binary.class, "hello"));
assertTrue(documentEntity.getDocuments().stream().map(Document::getName).anyMatch(s -> s.equals("_id")));
assertNotNull(managerFactory);
assertTrue(documentEntity.getDocuments().stream().map(Document::getName).anyMatch(s -> s.equals("_id")));
assertTrue(a.startsWith("a")); assertTrue(cha.startsWith(a)); assertTrue(cha.startsWith("abcdefg")); assertTrue(cha.startsWith("")); assertTrue(new Charray().startsWith(""));
assertEquals(parsed, reparsed);
assertNull(parsed.getComment("without_comment")); assertNotNull(parsed.getComment("with_comments")); assertTrue(parsed.getComment("with_comments").contains("\\n")); assertEquals(TestEnum.A, parsed.getEnum("enum", TestEnum.class)); assertEquals(parsed, reparsed);
assertEquals('a', result);
assertTrue(result);
assertEquals(a, result); assertEquals("cd", sub.toString());
assertTrue(reader.ready());
assertEquals(1, result);
assertFalse(a.isEmpty()); assertTrue(new Charray("").isEmpty());
assertEquals('a', result);
assertSame(java, appended); assertEquals(9, appended.length()); assertEquals("javascala", appended.toString()); assertEquals("scala", scala.toString());
assertEquals("a", result); assertEquals(1, result.length()); assertEquals("abcdefg", new Charray("abcdefg").toString());
assertTrue(result);
assertEquals(a, result);
assertEquals("".hashCode(), new Charray().hashCode()); assertEquals("a".hashCode(), a.hashCode()); assertEquals("abcdefg".hashCode(), cha.hashCode());
assertEquals(123456789L, Utils.parseLong(new Charray("123456789"), 10)); assertEquals(0, Utils.parseLong(new Charray("0"), 10)); assertEquals(-123456789L, Utils.parseLong(new Charray("-123456789"), 10)); assertEquals(0xff, Utils.parseLong(new Charray("ff"), 16));
assertTrue(a.contentEquals("a"));
assertEquals(1, subConfig.size()); assertEquals(3, config.size());
assertEquals('z', a.get(0)); assertEquals('a', a.get(0));
assertTrue(result);
assertThat(new DependencyContainer(name, version).getVersion().isPresent(), equalTo(isVersionPresent));
assertThat(new VersionRange(range).isValid(), equalTo(isValid));
assertThat(matchingResources, hasSize(0));
assertThat(scanResult.getContents().getExtensionPoints(), hasSize(0));
assertTrue(e.getDependencyProblem().isPresent()); assertThat(conflictingDependencies, hasSize(1)); assertThat(conflictingDependencies, contains(DEPENDENCY_WITH_VERSION_RANGE));
assertThat(BuildToolClassLoaderFactory.getDependenciesPath(BASE_DIRECTORY, buildToolType), equalTo(correctDependenciesPath));
assertThat(pluginMetadata.getName(), equalTo(DIRECTORY_NAME)); assertThat(pluginMetadata.getVersion(), equalTo("dev")); assertThat(pluginMetadata.getPath(), equalTo(pluginDirectory));
assertThat(new VersionRange(range).isEndVersionIncluded(), equalTo(isEndVersionIncluded));
assertThat(list, hasSize(2)); assertThat(list, contains( new DependencyContainer("some-plugin"), new DependencyContainer("another-plugin", "[0.9,)") ));
assertFalse(getDateField(manifest, ManifestField.NAME).isPresent());
assertThat(matchingResources, hasSize(1)); assertThat(matchingResources, hasItem(matchingFile));
assertThat(mojo, notNullValue()); assertThat(generatedDataDir, exists()); assertThat(generatedDataDir, isDirectory()); assertThat(pluginFile, exists()); assertThat(pluginFile, isRegularFile()); assertThat(pluginDataDir, exists()); assertThat(pluginDataDir, isDirectory()); assertThat(libDir, exists()); assertThat(libDir, isDirectory()); assertThat(dependencyFile, exists()); assertThat(dependencyFile, isRegularFile());
assertThat(new VersionRange(range).contains(testVersion), equalTo(contains));
assertThat(new DefaultVersionComparator().compare(required, actual), equalTo(relation));
assertThat(testHandler.getChangesCount(), equalTo(1)); assertThat(testHandler.getChangesCount(), equalTo(1));
assertThat(getField(manifest, ManifestField.NAME), equalTo(NAME)); assertNull(getField(manifest, ManifestField.VERSION));
assertThat(scanResult.getContents().getExtensionPoints(), hasSize(0));
assertThat(testHandler.getChangesCount(), equalTo(1));
assertThat(new VersionRange(range).isStartVersionIncluded(), equalTo(isStartVersionIncluded));
assertThat(pluginPaths, hasSize(1)); assertThat(pluginPaths, hasItem(matchingDirectory));
assertThat(scanResult.getClassLoader(), notNullValue()); assertThat(contents.getExtensionPoints(), hasSize(2)); assertThat(pluginImplementations, hasSize(1)); assertThat(pluginImplementations, contains(AnnotatedImpl.class)); assertThat(testExtensionPointImplementations, hasSize(1)); assertThat(testExtensionPointImplementations, contains(TestExtensionPointImpl.class));
assertThat(getDependenciesList(new Manifest(), ManifestField.DEPENDS), empty());
assertThat(referenceDependency.equals(new DependencyContainer(name, version)), equalTo(equals));
assertThat(new VersionRange(range).getStartVersion(), equalTo(startVersion));
assertThat(new VersionRange(range).getEndVersion(), equalTo(endVersion));
assertThat(BuildToolClassLoaderFactory.getClassesPath(BASE_DIRECTORY, buildToolType), equalTo(correctClassesPath));
assertThat(hierarchy.nativeRootView.getChildCount()).isEqualTo(4); assertThat(hierarchy.nativeRootView.getChildAt(2)).isInstanceOf(ReactViewGroup.class); assertThat(view.getBackgroundColor()).isEqualTo(Color.RED);
assertThat(constants).containsKey("RedPandaPhotoOfTheDayView"); assertThat((Map) constants.get("RedPandaPhotoOfTheDayView")).containsKey("Constants"); assertThat((Map) valueAtPath(constants, "RedPandaPhotoOfTheDayView", "Constants")) .containsKey("PhotoSizeType");
assertThat((Map) constants.get(CUSTOM_BUBBLING_EVENT_TYPES)) .contains(MapEntry.entry("onTwirl", TWIRL_BUBBLING_EVENT_MAP)) .containsKey("topChange");
assertThat((Map) constants.get(CUSTOM_DIRECT_EVENT_TYPES)) .contains(MapEntry.entry("onTwirl", TWIRL_DIRECT_EVENT_MAP)) .containsKey("topLoadingStart");
assertThat((String) valueAtPath(constants, "SomeView", "NativeProps", "fooProp")) .isEqualTo("number");
assertThat(rootView.getChildCount()).isEqualTo(2); assertThat(((ViewGroup) rootView.getChildAt(0)).getChildCount()).isEqualTo(2); assertThat(rootView.getChildCount()).isEqualTo(2); assertThat(((ViewGroup) rootView.getChildAt(0)).getChildCount()).isEqualTo(0);
assertThat(constants) .containsKey(CUSTOM_BUBBLING_EVENT_TYPES) .containsKey(CUSTOM_DIRECT_EVENT_TYPES) .containsKey("Dimensions");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertThat(CtpSymbolNameConverter.convert(n)).isEqualTo(s);
assertThat(position.getPosition().getPosition()).isEqualTo(8); assertThat(position.getPosition().getTdPosition()).isEqualTo(8); assertThat(position.getPosition().getOpenPrice()).isEqualTo(3555.125);
assertThat(position.getPosition().getPosition()).isEqualTo(2); assertThat(position.getPosition().getTdPosition()).isEqualTo(2); assertThat(position.getPosition().getOpenPrice()).isEqualTo(3546.8);
assertArrayEquals("invalid tokens", expectedAcceptableTokens, check.getAcceptableTokens());
assertArrayEquals("invalid tokens", expected, check.getRequiredTokens());
assertArrayEquals("invalid tokens", expected, check.getAcceptableTokens());
assertEquals(true, codec.empty());
assertEquals(42, props.get(RemoteConstants.ENDPOINT_SERVICE_ID)); assertEquals("some_uuid1", props.get(RemoteConstants.ENDPOINT_FRAMEWORK_UUID)); assertEquals(Arrays.asList("java.lang.String"), Arrays.asList((Object[]) props.get(org.osgi.framework.Constants.OBJECTCLASS))); assertEquals("1.0.0", props.get("endpoint.package.version.java.lang"));
assertThat(filterConfigAdminProperties(map).size(), is(0)); assertThat(filterConfigAdminProperties(null), notNullValue()); assertThat(filterConfigAdminProperties(null).size(), is(0));
assertEquals(1, res.size());
assertEquals(1, ereg.size()); assertThat(exportedEndpoint.getConfigurationTypes(), contains(MYCONFIG));
assertEquals("localhost", config.zookeeper_host()); assertEquals("2181", config.zookeeper_port()); assertEquals(3000, config.zookeeper_timeout());
assertThat(toMap(dic).size(), is(1)); assertThat(toMap(dic).keySet().contains("key"), is(true)); assertThat(toMap(dic).get("key"), Is.is("value")); assertThat(toMap(null), notNullValue()); assertThat(toMap(null).size(), is(0));
assertEquals(false, codec.full());
assertEquals(3, ld.endpointDescriptions.size());
assertEquals(1, ld.listenerToFilters.size()); assertEquals(2, ld.filterToListeners.size()); assertEquals(1, ld.filterToListeners.values().iterator().next().size()); assertEquals(1, ld.listenerToFilters.size()); assertEquals(2, ld.filterToListeners.size()); assertEquals(1, ld.filterToListeners.values().iterator().next().size()); assertEquals(0, ld.listenerToFilters.size()); assertEquals(0, ld.filterToListeners.size());
assertTrue(filter + " filter must match as uuid is missing", f.match(m)); assertFalse(filter + " filter must NOT match as uuid is the local one", f.match(m));
assertEquals(BufferState.EMPTY, state); assertEquals(false, codec.full()); assertEquals(true, codec.empty()); assertEquals(bytesThatWillBeWritten, codec.getWriteCounter()); assertEquals(BufferState.WAS_EMPTY, codec.flush());
assertNull(StringPlus.normalize(new Object())); assertEquals(Collections.singletonList(s1), StringPlus.normalize(s1)); assertEquals(sa, StringPlus.normalize(sa)); assertEquals(sa, StringPlus.normalize(sl));
assertThat(validatePropertyTypes(null), notNullValue()); assertThat(validatePropertyTypes(null).size(), is(0));
assertEquals(0L, codec.getReadCounter());
assertEquals(0L, codec.getWriteCounter());
assertThat(isClassExcluded(ConfigurationAdmin.class.getName()), equalTo(true)); assertThat(isClassExcluded("org.osgi.service.clusterinfo.NodeStatus"), equalTo(false));
assertThat(config.containsKey(Constants.OBJECTCLASS), is(true)); assertThat(config.get(Constants.OBJECTCLASS), Is.is(new String[]{"test"})); assertThat(config.get(Constants.OBJECTCLASS), Is.is(new String[]{"test"})); assertThat(config.get(Constants.OBJECTCLASS), Is.is(new String[]{"test"}));
assertEquals(BufferState.NOT_EMPTY, state); assertEquals(false, codec.full()); assertEquals(false, codec.empty()); assertEquals(0L, codec.getWriteCounter());
assertEquals(0, ereg.size());
assertEquals(2, values.size()); assertEquals("1", values.get(0)); assertEquals("2", values.get(1));
assertEquals(filters.length, res.size()); assertThat(filter1.match(props) || filter2.match(props), is(true));
assertEquals(BufferState.WAS_EMPTY, state); assertEquals(false, codec.full()); assertEquals(false, codec.empty()); assertEquals(0L, codec.getWriteCounter());
assertEquals("myhost", config2.zookeeper_host()); assertEquals("myhost", config.zookeeper_host()); assertEquals("1", config.zookeeper_port()); assertEquals(1000, config.zookeeper_timeout());
assertEquals(i1, i1.getParent()); assertEquals(i1, i2.getParent()); assertEquals(i1, i3.getParent());
assertEquals(expectedResponseEntity.getStatusCode(), actualResponse.getStatusCode()); assertEquals(expectedResponseEntity.getBody(), actualResponse.getBody());
assertEquals(expected, actual);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, oidcAuthController.readEntityAliasById(httpServletRequest, token,id).getStatusCode());
assertEquals(expectedList, policiesRes);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(null, oidcGroup);
assertEquals(expected, actual);
assertTrue(valid);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(response.getResponse(), responseEntity.getBody());
assertEquals(HttpStatus.OK, oidcAuthController.getAuthenticationMounts(httpServletRequest, token).getStatusCode());
assertEquals("w_users_safe02,w_users_safe01", actualResponse);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected.getBody().getData().getValues()[0], responseEntity.getBody().getData().getValues()[0]);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(canAdd);
assertFalse(canAdd);
assertEquals(HttpStatus.OK, oidcAuthController.getUserName(httpServletRequest, token).getStatusCode());
assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, sslCertificateService.generateSSLCertificate(sSLCertificateRequest,userDetails,token).getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.UNAUTHORIZED, SslCertificateController.authenticate(certManagerLoginRequest).getStatusCode());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, oidcAuthController .updateIdentityGroupByName(httpServletRequest, token, name, oidcIdentityGroupRequest).getStatusCode());
assertNotEquals(errorJsonStr, json);
assertEquals(responsemock.getHttpstatus(), response.getHttpstatus());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(responsemock.getHttpstatus(), response.getHttpstatus());
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected.getBody().getData().getValues()[0], responseEntity.getBody().getData().getValues()[0]);
assertEquals(HttpStatus.OK, SslCertificateController.issueRevocationRequest(httpServletRequest, token, certficateType,certName, revocationRequest).getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(actualResponse.isEmpty());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(false, valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, sslCertificateService.getListOfCertificates("5PDrOhsy4ig8L3EpsJZSLAMg","internal").getStatusCode());
assertNotNull(certificateData);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, sslCertificateService.getAllCertificatesOnCertType(userDetails, "internal").getStatusCode());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expectedResponseEntity.getStatusCode(), actualResponse.getStatusCode()); assertEquals(expectedResponseEntity.getBody(), actualResponse.getBody());
assertFalse(valid);
assertEquals(actual, true);
assertEquals(HttpStatus.BAD_REQUEST, responseEntityActual.getStatusCode()); assertTrue(responseEntityActual.getBody().contains("Invalid input values"));
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertNotNull(httpClientActual);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(jsonStrLowerCase, json);
assertEquals(HttpStatus.OK, oidcAuthController.groupEntityLookUp(httpServletRequest, token,oidcLookupEntityRequest).getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertNotNull(certResponse);
assertEquals(expected, actual);
assertEquals(HttpStatus.OK, oidcAuthController.updateEntityByName(httpServletRequest, token,name,oidcEntityRequest).getStatusCode());
assertEquals("shared/safe01", safePath);
assertFalse(canAdd);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertEquals(expectedResposne, oidcEntityResponse);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, oidcAuthController.createGroupAlias(httpServletRequest, token,groupAliasRequest).getStatusCode());
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(jsonStrDefault, actualStr);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expectedList, policyList);
assertEquals(responsemock.getResponse(), canonicalId);
assertFalse(valid);
assertEquals("auth_oidc_8b51f292", mountAccessor);
assertEquals(expectedJsonStr, json);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertEquals("safes", safeName);
assertEquals(HttpStatus.BAD_REQUEST, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected.toString(),responseEntityActual.toString());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(false, valid);
assertTrue(valid);
assertEquals(true, valid);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals("users", safeType);
assertNotNull(certManagerLogin);
assertNotNull(certificateData1);
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, sslCertificateService.deleteCertificate(token,certficateType, certName, userDetails).getStatusCode());
assertEquals("users/safes", path);
assertEquals(HttpStatus.OK, SslCertificateController.renewCertificate(httpServletRequest, token, certficateType, certName).getStatusCode());
assertNotNull(certificateData);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.NOT_FOUND, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected.toString(),responseEntityActual.toString());
assertEquals(HttpStatus.OK, oidcAuthController.readEntityByName(httpServletRequest, token,name).getStatusCode());
assertNotNull(certResponse);
assertNotNull(certificateData);
assertTrue(true);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertNotNull(certResponse);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertNotNull(certResponse);
assertEquals(jsonStr, json);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(canonicalId, responseEntity.getBody());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertFalse(canAdd);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(false, valid);
assertEquals("users/safe01", safePath);
assertEquals(false, valid);
assertTrue(valid);
assertEquals(expected, actual);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getHttpstatus());
assertEquals(expected, actual);
assertEquals(null, appRoleActual);
assertTrue(actual);
assertEquals(HttpStatus.OK, oidcAuthController.deleteGroupAliasByID(httpServletRequest, token,id).getStatusCode());
assertTrue(true);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertTrue(UserLogin.class.equals(((UserLogin)ob).getClass()));
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(jsonStrlowercase, jsonLowerCase);
assertEquals(HttpStatus.OK, oidcAuthController.entityLookUp(httpServletRequest, token,oidcLookupEntityRequest).getStatusCode());
assertTrue(canAdd);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(2, responseEntity.getBody().getData().getValues().length);
assertTrue(canAdd);
assertEquals("{\\"path\\":\\"metadata/approle/role1\\"}", json);
assertNotNull(certResponse);
assertEquals(responsemock.getHttpstatus(), response.getHttpstatus());
assertTrue(true);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals("{\\"path\\":\\"metadata/approle_users/normalsuer/role1\\"}", json);
assertEquals(false, status);
assertTrue(valid);
assertEquals(true, valid);
assertNotEquals(errorJsonStr, json);
assertEquals(false, valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, SslCertificateController.generateSSLCertificate(httpServletRequest, token, sSLCertificateRequest).getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, sslCertificateService.getAllSelfServiceGroups(userDetails).getStatusCode());
assertTrue(valid);
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(jsonStrLowerCase, json);
assertEquals(HttpStatus.OK, oidcAuthController.readGroupAliasById(httpServletRequest, token,id).getStatusCode());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected.toString(),responseEntityActual.toString());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expected, actual);
assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertFalse(valid);
assertEquals(expectedJsonStr, json);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected.getBody().getData().getValues()[0], responseEntity.getBody().getData().getValues()[0]);
assertEquals(actual, true);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(response.getResponse(), responseEntity.getBody());
assertEquals(HttpStatus.OK, SslCertificateController.getRevocationReasons(httpServletRequest, token, certifcateId).getStatusCode());
assertEquals(HttpStatus.OK, oidcAuthController.deleteGroupByName(httpServletRequest, token,name).getStatusCode());
assertEquals("apps/safe01", safePath);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expected, actual);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, sslCertificateService.generateSSLCertificate(sSLCertificateRequest,userDetails,token).getStatusCode());
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.NO_CONTENT, response.getHttpstatus());
assertEquals(jsonStr, actualResponse);
assertEquals(true, status);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(originalUserName, responsemock.getResponse().toString());
assertEquals("{\\"path\\":\\"metadata/awsrole/role1\\"}", metaJson);
assertEquals("testuser", actualResponse.get("username")); assertEquals("testuser", actualResponse.get("password"));
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(true);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, SslCertificateController.authenticate(certManagerLoginRequest).getStatusCode());
assertFalse(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(expected, actual);
assertTrue(true);
assertEquals(true, valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(1, count);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expected, actual);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertTrue(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertFalse(valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(false, valid);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(response.getResponse(), responseEntity.getBody());
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(expectedAdminPolicies, adminPolicies);
assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity);
assertEquals(appRole, appRoleActual);
assertEquals(expectedPolicies, policies);
assertTrue(InputValidator.isValidClusterNamespace(someValidInput));
assertEquals(expected, dnsCache.toString());
assertEquals(IP1, ip);
assertEquals(IP2, ip);
assertNull(dnsCache);
assertEquals(expected, entry.toString());
assertEquals(IP3, InetAddress.getByName(domain).getHostAddress()); assertEquals(expected, getAllHostAddresses(domain));
assertEquals("1.1.1.1", ip); assertEquals(2, all.length); assertArrayEquals(new String[]{"1.1.1.1", "2.2.2.2"}, ips);
assertEquals("Fail to find not-existed.properties on classpath!", expected.getMessage());
assertEquals(IP_CUSTOMIZED, ip);
assertThat(storagePool.getType(), is(equalTo(ResourceCategory.RC_STORAGE_POOL))); assertThat(storagePool.getAllocatedCapacityDetails().getSnapshotAllocatedCapacity(), is(nullValue())); assertThat(storagePool.getAllocatedCapacityDetails().getVolumeAllocatedCapacity(), is(nullValue()));
assertThat(response, is(equalTo(ANY_RESPONSE_STRING)));
assertThat(capabilities, is(notNullValue())); assertThat(capabilities.getRaidLevels(), containsInAnyOrder(RaidLevel.values())); assertThat(capabilities.getControllerModes(), containsInAnyOrder(ControllerMode.values())); assertThat(capabilities.getDriveTechnologies(), containsInAnyOrder(DriveTechnology.values())); assertThat(capabilities.getMaximumDrives(), is(Integer.valueOf(4)));
assertNotNull(result); assertEquals("Return must be \\"{}\\"", "{}", result);
assertNotNull(result);
assertThat(portTelemetry, is(PortTelemetry.ENABLED));
assertThat(portTelemetry, is(PortTelemetry.ENABLED));
assertNotNull(result);
assertNotNull(result);
assertThat(serializedStoragePool.getAsJsonPrimitive("type").getAsString(), is(equalTo(ResourceCategory.RC_STORAGE_POOL_V200))); assertThat(serializedStoragePool.get(StoragePool.ALLOCATED_CAPACITY_FIELD).isJsonPrimitive(), is(equalTo(Boolean.FALSE)));
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertThat(capabilities, is(notNullValue())); assertThat(capabilities.getRaidLevels(), containsInAnyOrder(RaidLevel.values())); assertThat(capabilities.getControllerModes(), contains(ControllerMode.RAID)); assertThat(capabilities.getDriveTechnologies(), is(Matchers.<DriveTechnology>empty()));
assertThat(storagePool.getType(), is(equalTo(ResourceCategory.RC_STORAGE_POOL_V200))); assertThat(storagePool.getAllocatedCapacityDetails().getSnapshotAllocatedCapacity(), is(notNullValue())); assertThat(storagePool.getAllocatedCapacityDetails().getVolumeAllocatedCapacity(), is(notNullValue()));
assertThat(response, is(equalTo(ANY_RESPONSE_STRING)));
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertThat(serializedStoragePool.getAsJsonPrimitive("type").getAsString(), is(equalTo(ResourceCategory.RC_STORAGE_POOL))); assertThat(serializedStoragePool.get(StoragePool.ALLOCATED_CAPACITY_FIELD).isJsonPrimitive(), is(equalTo(Boolean.TRUE)));
assertNotNull(result);
assertNotNull(result);
assertEquals(SIMPLE, SecurityUtil.getAuthenticationMethod(conf)); assertEquals(SIMPLE, SecurityUtil.getAuthenticationMethod(conf)); assertEquals(KERBEROS, SecurityUtil.getAuthenticationMethod(conf)); assertEquals("java.lang.IllegalArgumentException: " + "Invalid attribute value for " + HADOOP_SECURITY_AUTHENTICATION + " of kaboom", error);
assertEquals("Should return hostname when FQDN is specified", "hadoop01", StringUtils.simpleHostname("hadoop01.domain.com")); assertEquals("Should return hostname when only hostname is specified", "hadoop01", StringUtils.simpleHostname("hadoop01")); assertEquals("Should not truncate when IP address is passed", "10.10.5.68", StringUtils.simpleHostname("10.10.5.68"));
assertEquals(STATE.INITED, historyServer.getServiceState()); assertEquals(6, historyServer.getServices().size()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState()); assertNotNull(historyService.getClientHandler().getConnectAddress());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue(lfs.util().exists(p));
assertFalse(fencer.fence(MOCK_TARGET));
assertEquals(1, tid.getJobId().getAppId().getClusterTimestamp()); assertEquals(2, tid.getJobId().getAppId().getId()); assertEquals(2, tid.getJobId().getId()); assertEquals(TaskType.REDUCE, tid.getTaskType()); assertEquals(3, tid.getId()); assertEquals(TaskType.MAP, tid.getTaskType());
assertEquals( "Access denied: User user does not have permission to view job job_01_01", appController.getData()); assertEquals( "Access denied: User user does not have permission to view job job_01_01", appController.getData()); assertEquals("Bad request: missing task-type.", appController.getProperty() .get("title")); assertEquals("Bad request: missing attempt-state.", appController .getProperty().get("title")); assertEquals(AttemptsPage.class, appController.getClazz());
assertFalse(qjm.hasSomeData()); assertTrue(qjm.hasSomeData());
assertTrue(streams.isEmpty());
assertEquals("Should not check the same volume more than once.", 1, nb.getVolumesLowOnSpace().size());
assertFalse(fencer.fence(MOCK_TARGET));
assertEquals(0, cacheSize()); assertEquals(toConstruct.length, cacheSize()); assertEquals(0, cacheSize());
assertTrue("Failed to catch the expected bind exception",caught);
assertEquals(new File(path), item.toFile()); assertEquals(new File(testDir + "\\\\foo\\\\bar"), item.toFile());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(userStagingPath.toString(), appMaster.stagingDirPath.toString());
assertEquals("group1.counter1:1", counters.makeCompactString());
assertTrue(Arrays.equals(writeBytes, readBytes)); assertEquals(byteWithHighBit & 0xff, in.read()); assertTrue(source.isOpen()); assertTrue(sink.isOpen()); assertFalse(sink.isOpen()); assertEquals(-1, in.read()); assertFalse(source.isOpen());
assertFalse("Expected to be multi switch", mapping.isSingleSwitch()); assertTrue("Expected to be single switch", mapping.isSingleSwitch());
assertEquals(0, runTool("-failover", "--forcefence", "nn1", "nn2"));
assertTrue(set.addAll(list)); assertEquals(bookmark.next(), list.get(0)); assertEquals(bookmark2.next(), list.get(numAdvance));
assertTrue(result.isEmpty());
assertEquals(0, taid.getTaskId().getJobId().getAppId().getClusterTimestamp()); assertEquals(1, taid.getTaskId().getJobId().getAppId().getId()); assertEquals(1, taid.getTaskId().getJobId().getId()); assertEquals(2, taid.getTaskId().getId()); assertEquals(3, taid.getId());
assertEquals("test", cache.getProgram());
assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(12345, addr.getPort()); assertEquals("127.0.0.1", addr.getAddress().getHostAddress()); assertEquals(1000, addr.getPort());
assertTrue(fencer.tryFence(TEST_TARGET, "echo hello>&2"));
assertTrue("Creating empty dst file", DST_FILE.createNewFile()); assertTrue("Empty file still exists", DST_FILE.exists()); assertEquals("", DFSTestUtil.readFile(DST_FILE)); assertEquals(TEST_STRING, readBackData);
assertEquals(100, QJMTestUtil.recoverAndReturnLastTxn(qjm)); assertEquals(150, QJMTestUtil.recoverAndReturnLastTxn(qjm));
assertFalse(fencer.fence(MOCK_TARGET));
assertTrue(msg, msg.contains("Trying to use aborted output stream"));
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertEquals("Check expected value", 1, IOUtils.wrappedReadForCompressedData(mockStream, buf, 0, 1));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("one", StringUtils.replaceTokens("$FOO", pattern, replacements)); assertEquals("two", StringUtils.replaceTokens("$BAZ", pattern, replacements)); assertEquals("", StringUtils.replaceTokens("$BAR", pattern, replacements)); assertEquals("", StringUtils.replaceTokens("", pattern, replacements)); assertEquals("one-two-three", StringUtils.replaceTokens("$NUMBERS123", pattern, replacements)); assertEquals("___", StringUtils.replaceTokens("$UNDER_SCORES", pattern, replacements));
assertEquals(existing, filterAclEntriesByAclSpec(existing, aclSpec));
assertFalse("unjar dir shouldn\'t exist at test start", new File(unjarDir, "foobar.txt").exists()); assertTrue("foobar unpacked", new File(unjarDir, "foobar.txt").exists()); assertTrue("foobaz unpacked", new File(unjarDir, "foobaz.txt").exists());
assertTrue("Create file", file.createNewFile()); assertTrue("Make dir", dir.mkdir()); assertTrue("Make jarsDir", jarsDir.mkdir()); assertTrue("Create non-jar file", nonJarFile.createNewFile()); assertTrue("Create jar file", jarFile.createNewFile()); assertEquals(3, urls.length); assertEquals(file.toURI().toURL(), urls[0]); assertEquals(dir.toURI().toURL(), urls[1]); assertEquals(jarFile.toURI().toURL(), urls[2]);
assertEquals(up.getValue(context).getName(), "bar"); assertEquals(MDC.get("user"), "bar");
assertEquals(names.size(), result1.size()); assertEquals("/rack1", result1.get(0)); assertEquals("/rack2", result1.get(1)); assertEquals(result1, result2);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertNull(ZKUtil.resolveConfIndirection(null)); assertEquals("x", ZKUtil.resolveConfIndirection("x")); assertEquals("hello world", ZKUtil.resolveConfIndirection( "@" + TEST_FILE.getAbsolutePath())); assertTrue(fnfe.getMessage().startsWith(BOGUS_FILE));
assertTrue(socket2.isBound()); assertTrue(socket2.getLocalPort() > min); assertTrue(socket2.getLocalPort() <= max);
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertFalse(fencer.fence(MOCK_TARGET));
assertEquals(addr.getHostName(), host); assertEquals(addr.getPort(), port);
assertEquals(NUM, set.size()); assertFalse(set.isEmpty()); assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(iter.hasNext());
assertTrue(set.add(i)); assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(set.contains(list.get(i))); assertFalse(iter.hasNext());
assertEquals(b.getBlock(), b1.getBlock()); assertEquals(dnInfo.length, dnInfo1.length);
assertEquals(0, rc);
assertEquals(-1, runTool("-failover", "nn1", "nn2", "notforcefence"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("map1 entries don\'t match map2 entries", map1, map2); assertTrue( "map2 doesn\'t have class information from map1", map2.classToIdMap.containsKey(Text.class) && map2.idToClassMap.containsValue(Text.class));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(6, expectedCheckpointTxId); assertEquals(0, rc);
assertEquals(bc.getAction(), bc2.getAction()); assertEquals(bc.getBlocks().length, bc2.getBlocks().length); assertEquals(blocks[i], blocks2[i]); assertEquals(dnInfos.length, dnInfos2.length); assertEquals(d1.length, d2.length);
assertEquals(1, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress)); assertEquals(2, services.length); assertTrue("Incorrect token service name", service.contains(defaultRMAddress));
assertEquals("test-fair-scheduler.xml", allocationFile.getName()); assertTrue(allocationFile.exists());
assertEquals(addr.getHostName(), host); assertEquals(addr.getPort(), port);
assertEquals(fileStatus1, fileStatus2);
assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("2 vcores, 1024 mb")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("1024 mb, 2 vcores")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("2vcores,1024mb")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("1024mb,2vcores"));
assertTrue(new File(tmp, "foo").exists()); assertEquals(12, new File(tmp, "foo").length()); assertTrue(regularFile.exists()); assertTrue("An IOException expected.", false);
assertEquals( "create #1\\n" + "create #2\\n", log.toString()); assertEquals( "stop #1\\n" + "refresh #2\\n", log.toString()); assertEquals( "create #3\\n" + "refresh #2\\n", log.toString());
assertEquals(0, runTool("-failover", "nn1", "nn2"));
assertEquals("foo", getContent(baseUrl +"test/foo").trim()); assertEquals("foo", getContent(baseUrl +"test/foo/index").trim()); assertEquals("bar", getContent(baseUrl +"test/foo/bar").trim()); assertEquals("default", getContent(baseUrl +"test").trim()); assertEquals("default", getContent(baseUrl +"test/").trim()); assertEquals("default", getContent(baseUrl).trim());
assertTrue("Create test subject", testfile.exists() || testfile.createNewFile()); assertTrue("Rename failed.", renamed);
assertEquals(username, "server-15388.novalocal");
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertFalse(ProxyServers.isProxyServer("1.1.1.1")); assertFalse(ProxyServers.isProxyServer("1.1.1.1")); assertTrue(ProxyServers.isProxyServer("2.2.2.2")); assertTrue(ProxyServers.isProxyServer("3.3.3.3"));
assertEquals("scheme:/", uri.toString()); assertEquals("scheme:/path", uri.toString());
assertEquals(appC, e.getAppId()); assertEquals(KILL_CONTAINER, e.getType());
assertEquals(info.getJobID().toString(), copyinfo.getJobID().toString()); assertEquals(info.getJobSubmitDir().getName(), copyinfo.getJobSubmitDir() .getName()); assertEquals(info.getUser().toString(), copyinfo.getUser().toString());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(SingleCounterPage.class, appController.getClazz()); assertNotNull(appController.getProperty().get(AppController.COUNTER_GROUP)); assertNotNull(appController.getProperty().get(AppController.COUNTER_NAME));
assertEquals("/a/b@3", KeyProvider.buildVersionName("/a/b", 3)); assertEquals("/aaa@12", KeyProvider.buildVersionName("/aaa", 12));
assertFalse("Expected to be multi switch", mapping.isSingleSwitch()); assertTrue("Expected to be single switch", mapping.isSingleSwitch());
assertEquals(-1, runTool("-failover", "nn1", "nn2", "--forcefence"));
assertNull(conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY));
assertEquals(blocks.length, blocks2.length);
assertEquals(new String(decodeBytes, 0, decodeBytes.length), "hello tokenauth");
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals(null, AlwaysSucceedFencer.callArgs.get(0));
assertTrue("rpc got exception " + error.get(), error.get() == null);
assertTrue( "Unexpected exception: " + StringUtils.stringifyException(ioe), ioe.getMessage().contains("Unable to download to any storage"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("", new Path("/").getName()); assertEquals("foo", new Path("foo").getName()); assertEquals("foo", new Path("/foo").getName()); assertEquals("foo", new Path("/foo/").getName()); assertEquals("bar", new Path("/foo/bar").getName());
assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1")); assertEquals("root.specifiedq", policy.assignAppToQueue("root.specifiedq", "user2")); assertEquals("root.default", policy.assignAppToQueue("root.default", "user3"));
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals(5, includesLen); assertEquals(5, excludesLen); assertTrue(hfp.getHosts().contains("somehost5")); assertFalse(hfp.getHosts().contains("host3")); assertTrue(hfp.getExcludedHosts().contains("somehost5")); assertFalse(hfp.getExcludedHosts().contains("host4"));
assertEquals(0, runTool("-ns", "ns1", "-failover", "nn1", "nn2"));
assertEquals(Master.getMasterUserName(conf), "bar"); assertEquals(Master.getMasterUserName(conf), "foo"); assertEquals(Master.getMasterUserName(conf), "bar");
assertEquals(minMemory, ask.getCapability().getMemory()); assertEquals(minMemory, ask.getCapability().getMemory()); assertEquals(2 * minMemory, ask.getCapability().getMemory()); assertEquals(2 * minMemory, ask.getCapability().getMemory()); assertEquals(maxMemory, ask.getCapability().getMemory()); assertEquals(maxMemory, ask.getCapability().getMemory()); assertEquals(maxResource.getMemory(), ask.getCapability().getMemory()); assertEquals(maxResource.getMemory(), ask.getCapability().getMemory());
assertEquals("DataChecksum(type=CRC32, chunkSize=512)", DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512).toString());
assertThat(ugiResult.getUserName(), is(userName)); assertThat(ugiResult.getRealUser(), is(currentUserUgi)); assertThat( ugiResult.getAuthenticationMethod(), is(UserGroupInformation.AuthenticationMethod.PROXY));
assertTrue(socket.isBound());
assertEquals(10, l.size()); assertEquals(list.get(i), l.get(i)); assertEquals(NUM - 10, l.size()); assertEquals(list.get(i), l.get(i - 10)); assertTrue(set.isEmpty()); assertEquals(0, set.size());
assertEquals("unexpected number of splits", 1, infos.length); assertEquals("unexpected number of split locations", 4, infos[0].getLocations().length);
assertEquals(2, providers.size()); assertEquals(UserProvider.class, providers.get(0).getClass()); assertEquals(JavaKeyStoreProvider.class, providers.get(1).getClass()); assertEquals(UserProvider.SCHEME_NAME + ": assertEquals(JavaKeyStoreProvider.SCHEME_NAME + ": providers.get(1).toString());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertTrue(set.add(i)); assertTrue(set.remove(list.get(i))); assertFalse(set.contains(list.get(i))); assertFalse(iter.hasNext()); assertTrue(set.isEmpty());
assertTrue("too many overflow buckets", badbuckets < PARTITIONS * MAX_BADBUCKETS);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue("testRenameWithFalse invalid IOExceptionMessage error !!!", ex .getMessage().startsWith(ERROR_MESSAGE));
assertEquals(i, fromList);
assertTrue(buf[i].compareTo(buf[j]) == -buf[j].compareTo(buf[i])); assertTrue((i == j) == (buf[i].compareTo(buf[j]) == 0)); assertTrue(buf[0].compareTo(buf[1]) < 0); assertTrue(buf[1].compareTo(buf[2]) > 0); assertTrue(buf[2].compareTo(buf[3]) > 0); assertTrue(buf[3].compareTo(buf[4]) < 0);
assertEquals("foo:12345", DFSUtil.substituteForWildcardAddress("0.0.0.0:12345", "foo")); assertEquals("127.0.0.1:12345", DFSUtil.substituteForWildcardAddress("127.0.0.1:12345", "foo"));
assertEquals(4, entityTypes.size()); assertEquals(entityType1, entityTypes.get(0)); assertEquals(entityType2, entityTypes.get(1)); assertEquals(entityType4, entityTypes.get(2)); assertEquals(entityType5, entityTypes.get(3));
assertNotNull(lm.getLeaseByPath("/a/b")); assertNotNull(lm.getLeaseByPath("/a/c")); assertNull(lm.getLeaseByPath("/a/b")); assertNull(lm.getLeaseByPath("/a/c")); assertNull(lm.getLeaseByPath("/a/b")); assertNull(lm.getLeaseByPath("/a/c"));
assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p))); assertFalse(lfs.util().exists(fp));
assertEquals( sortedString("d1/f1", "d1/f1.1", "d1/f2"), sortedString(items) );
assertTrue("should throw!", false); assertEquals("Bad configuration of " + KeyProviderFactory.KEY_PROVIDER_PATH + " at unkn@own:/x/y", e.getMessage());
assertEquals("myCipher", options.getCipher()); assertEquals(512, options.getBitLength()); assertEquals("yourCipher", options.getCipher()); assertEquals(128, options.getBitLength()); assertEquals("description", options.getDescription()); assertEquals(KeyProvider.DEFAULT_CIPHER, options.getCipher()); assertEquals(KeyProvider.DEFAULT_BITLENGTH, options.getBitLength());
assertEquals(new String(baos.toByteArray()), "abc");
assertTrue(handler.isTerse(IOException.class)); assertTrue(handler.isTerse(RpcServerException.class)); assertTrue(handler.isTerse(IpcException.class)); assertFalse(handler.isTerse(RpcClientException.class));
assertEquals("Should not check the same volume more than once.", 1, nb.getVolumesLowOnSpace().size());
assertEquals(61*1000, DFSUtil.parseRelativeTime("61s")); assertEquals(61*60*1000, DFSUtil.parseRelativeTime("61m")); assertEquals(0, DFSUtil.parseRelativeTime("0s")); assertEquals(25*60*60*1000, DFSUtil.parseRelativeTime("25h")); assertEquals(4*24*60*60*1000l, DFSUtil.parseRelativeTime("4d")); assertEquals(999*24*60*60*1000l, DFSUtil.parseRelativeTime("999d"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue(result.isEmpty());
assertEquals(b, b1); assertEquals(b, b1);
assertEquals("foo:/bar", new Path("foo:/","/bar").toString());
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertFalse(fencer.tryFence(TEST_TARGET, "read"));
assertEquals(1, copyOfCopy.getNewClasses());
assertEquals(key, conf.get(key));
assertEquals(TEST_MD5, computedDigest);
assertNull(service.getInterface()); assertEquals(service.getPrefix(), "myservice"); assertEquals(service.getServiceDependencies().length, 0); assertEquals(service.getPrefixedName("foo"), "server.myservice.foo"); assertEquals(service.getServiceConfig().size(), 1); assertEquals(service.getServiceConfig().get("foo"), "FOO"); assertTrue(MyService.INIT);
assertEquals(resultToken.getPrincipal().getName(), DEFAULT_PRINCIAL_NAME);
assertEquals("Incorrect return value", ret, isTerminated); assertTrue("Thread is not shutdown", isTerminated);
assertTrue(new File(tmp, "foo").exists()); assertEquals(12, new File(tmp, "foo").length()); assertTrue(regularFile.exists()); assertTrue("An IOException expected.", false);
assertEquals(minResource, ask.getCapability()); assertEquals(minResource, ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(1024, ask.getCapability().getMemory()); assertEquals(Resources.createResource(2048, 1), ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(2048, ask.getCapability().getMemory());
assertEquals(BootstrapStandby.ERR_CODE_ALREADY_FORMATTED, rc); assertEquals(0, rc);
assertEquals(3, queues.size()); assertEquals(false, scheduler.isStarvedForMinShare(p)); assertEquals(true, scheduler.isStarvedForMinShare(p)); assertEquals(false, scheduler.isStarvedForMinShare(p));
assertTrue(set.add(list.get(0))); assertTrue(set.add(list.get(1))); assertTrue(set.add(list.get(2))); assertEquals(it.next(), list.get(0)); assertEquals(it.next(), list.get(2));
assertNotNull(hostname);
assertEquals("valueFromSource", targetConf.get("testParameter1")); assertEquals("valueFromSource", targetConf.get("testParameter2")); assertEquals("valueFromTarget", targetConf.get("testParameter3"));
assertTrue(RetryInvocationHandler.isRpcInvocation(unreliable)); assertTrue(RetryInvocationHandler.isRpcInvocation(xlator)); assertEquals(xlator.toString(), "1"); assertFalse(RetryInvocationHandler.isRpcInvocation(new Object()));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertTrue(getLongCounter("ElapsedTime", builder) >= 0L); assertTrue(getLongCounter("LoadingFsImageElapsedTime", builder) >= 0L); assertTrue(getLongCounter("LoadingEditsElapsedTime", builder) >= 0L); assertTrue(getLongCounter("SavingCheckpointElapsedTime", builder) >= 0L); assertTrue(getLongCounter("SafeModeElapsedTime", builder) >= 0L);
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysFailFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysFailFencer.fencedSvc); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals("foo", AlwaysFailFencer.callArgs.get(0)); assertEquals("bar", AlwaysSucceedFencer.callArgs.get(0));
assertEquals(expected, result);
assertEquals(outBuffer.getLength(), tests.length); assertEquals(new String(outBuffer.getData(), 0, outBuffer.getLength()), new String(tests, 0, tests.length));
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.DELEGATION_TOKEN, Feature.RESERVED_REL20_203.getInfo().getLayoutVersion()));
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertTrue(result.delete()); assertTrue(result.getParentFile().delete()); assertFalse(new File(dir).exists());
assertEquals(0, duDoesNotExist); assertEquals(duNotADirectoryExpected, duNotADirectoryActual); assertNull(ie); assertFalse(FileUtil.canRead(notADirectory)); assertEquals(expected, du3); assertNull(ie); assertFalse(FileUtil.canRead(partitioned)); assertEquals(0, du4);
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals("Auxiliary service stopped, but AuxService unaffected.", STOPPED, aux.getServiceState()); assertTrue(aux.getServices().isEmpty());
assertEquals(info.getClusterID(), info2.getClusterID()); assertEquals(info.getCTime(), info2.getCTime()); assertEquals(info.getLayoutVersion(), info2.getLayoutVersion()); assertEquals(info.getNamespaceID(), info2.getNamespaceID());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(2, editsDirs.size());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(shouldNotReplace, SecurityUtil.getServerPrincipal(shouldNotReplace, notUsed));
assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue()); assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue()); assertEquals("Counter value is not set correctly", expectedValue, counter.getValue());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertTrue(stat1.isDirectory()); assertFalse(stat2.isDirectory());
assertTrue(io.getLocalizedMessage().contains(failString));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("joe", StaticUserWebFilter.getUsernameFromConf(conf));
assertEquals(clientAddr, getRemoteAddr(clientAddr, null, false));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue(NetUtils.isLocalAddress(InetAddress.getLocalHost())); assertTrue(NetUtils.isLocalAddress(addr)); assertFalse(NetUtils.isLocalAddress(InetAddress.getByName("8.8.8.8")));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(compactDirList)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(spacedDirList)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(pathologicalDirList1)); assertArrayEquals(expectedArray, StringUtils.getTrimmedStrings(pathologicalDirList2)); assertArrayEquals(emptyArray, StringUtils.getTrimmedStrings(emptyList1)); assertArrayEquals(emptyArray, estring);
assertEquals(addr.getHostName(), connectAddr.getHostName()); assertEquals(InetAddress.getLocalHost().getHostName(), connectAddr.getHostName());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertNotNull(hostname1); assertEquals(hostname3, hostname2); assertEquals(hostname2, hostname1); assertTrue( "Took too long to determine local host - caching is not working", interval < 20000);
assertArrayEquals(verif, Arrays.copyOf(check, NFILES * BLOCK)); assertArrayEquals(verif2, check);
assertTrue(set.add(i)); assertEquals(list.size(), set.size()); assertTrue(set.contains(i)); assertFalse(set.add(i)); assertTrue(set.contains(i)); assertEquals(list.get(num++), iter.next()); assertEquals(list.size(), num);
assertEquals("testRenameWithException invalid IOExceptionMessage !!!", ex.getMessage(), ERROR_MESSAGE);
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertNotNull("A valid class must be returned for default Writable SerDe", factory.getSerializer(Writable.class)); assertNull("A null should be returned if there are no serializers found.", factory.getSerializer(TestSerializationFactory.class));
assertTrue(localFs.mkdirs(new Path(dir0))); assertTrue(localFs.mkdirs(new Path(dir1))); assertEquals(FILENAME, p.getName()); assertEquals("file", p.getFileSystem(conf).getUri().getScheme()); assertEquals(2, count); assertFalse("NoSuchElementException must be thrown, but returned ["+p +"] instead.", true); assertFalse(true);
assertTrue(fencer.tryFence(TEST_TARGET, "echo hello"));
assertFalse("Added an integer as a service", addIfService(notAService)); assertTrue("Unable to add a service", addIfService(service)); assertEquals("Incorrect number of services", 1, testService.getServices().size());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("nn1", DFSUtil.getSecondaryNameServiceId(conf));
assertEquals(rmApp1.getQueue(), queue1.getName()); assertEquals("root.asterix", rmApp1.getQueue()); assertEquals(rmApp2.getQueue(), queue2.getName()); assertEquals("root.notdefault", rmApp2.getQueue());
assertEquals(NodeType.OFF_SWITCH, schedulerApp.getAllowedLocalityLevel( prio, 10, -1.0, -1.0));
assertTrue(result.isEmpty());
assertTrue(foundSetting);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertNull("RequestLog should be null", requestLog);
assertFalse(fence.tryFence(UNFENCEABLE_TARGET, ""));
assertEquals(TEST_STRING_2, DFSTestUtil.readFile(DST_FILE)); assertEquals("Temporary file should have been cleaned up", DST_FILE.getName(), Joiner.on(",").join(TEST_DIR.list()));
assertEquals("job_0_0000", MRApps.toString(jid));
assertEquals("valueFromSource", targetConf.get("testParameter1")); assertEquals("originalValueFromTarget", targetConf.get("testParameter2")); assertEquals("originalValueFromTarget", targetConf.get("testParameter3")); assertEquals("valueFromSource", srcConf.get("testParameter1")); assertEquals("valueFromSource", srcConf.get("testParameter2")); assertNull(srcConf.get("testParameter3"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(ActiveStandbyElector.State.ACTIVE, zkfc.getElectorForTests().getStateForTests()); assertTrue("RPC to cedeActive took " + (et - st) + " ms", et - st < 1000); assertEquals(ActiveStandbyElector.State.INIT, zkfc.getElectorForTests().getStateForTests()); assertTrue("Should take ~3 seconds to rejoin. Only took " + (et2 - et) + "ms before rejoining.", et2 - et > 2800);
assertEquals("host", SecurityUtil.getHostFromPrincipal("service/host@realm")); assertEquals(null, SecurityUtil.getHostFromPrincipal("service@realm"));
assertEquals(proxyAddr, getRemoteAddr(clientAddr, proxyAddr, false));
assertEquals(new URI("https", null, "0.0.0.0", DFS_NAMENODE_HTTPS_PORT_DEFAULT, null, null, null), httpsport); assertEquals(new URI("http", null, "0.0.0.0", DFS_NAMENODE_HTTP_PORT_DEFAULT, null, null, null), httpport);
assertEquals(ServerWebApp.getHomeDir("TestServerWebApp0"), "/tmp"); assertEquals(ServerWebApp.getDir("TestServerWebApp0", ".log.dir", "/tmp/log"), "/tmp/log"); assertEquals(ServerWebApp.getDir("TestServerWebApp0", ".log.dir", "/tmp/log"), "/tmplog");
assertEquals(uugi, uugi); assertFalse(uugi.equals(ugi2)); assertFalse(uugi.hashCode() == ugi2.hashCode()); assertEquals(uugi, ugi3); assertEquals(uugi.hashCode(), ugi3.hashCode());
assertSame(spyYarnHandler, yarnThread.getUncaughtExceptionHandler());
assertEquals(templateTime, time,30);
assertNull(map.remove(bpid, b)); assertNull(map.remove(bpid, b)); assertNotNull(map.remove(bpid, block)); assertNull(map.remove(bpid, 0)); assertNotNull(map.remove(bpid, block.getBlockId()));
assertEquals("nn1", DFSUtil.getBackupNameServiceId(conf));
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(manager.getRoot().getChildren().size(), 2);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertNotNull("close didn\'t fail", actualEx); assertEquals(expectedEx, actualEx);
assertNotNull(tree); assertThat(tree.getConf(), sameInstance(conf));
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertTrue("first command should be the run command for the platform", command[0].equals(Shell.WINUTILS) || command[0].equals("bash"));
assertFalse(DST_FILE.exists()); assertFalse(DST_FILE.exists()); assertTrue(DST_FILE.exists()); assertEquals(TEST_STRING, readBackData);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(up.getValue(context).getName(), "foo"); assertEquals(MDC.get("user"), "foo");
assertEquals(info.getBlockPoolID(), info2.getBlockPoolID()); assertEquals(info.getBuildVersion(), info2.getBuildVersion());
assertEquals(CONTEXT + " not configured", e.getMessage());
assertEquals(SingleCounterPage.class, appController.getClazz());
assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed()); assertTrue(acl.isAllAllowed());
assertEquals(0, invocationHandler.getCloseCalled()); assertEquals(1, invocationHandler.getCloseCalled());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("Test spnego key in config is null", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is empty", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is NOT null", DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY, DFSUtil.getSpnegoKeytabKey(conf, defaultKey));
assertNotNull(userParam.getValue()); assertNotNull(userParam.getValue());
assertTrue(Path.isWindowsAbsolutePath("C:\\\\test", false)); assertTrue(Path.isWindowsAbsolutePath("C:/test", false)); assertTrue(Path.isWindowsAbsolutePath("/C:/test", true)); assertFalse(Path.isWindowsAbsolutePath("/test", false)); assertFalse(Path.isWindowsAbsolutePath("/test", true)); assertFalse(Path.isWindowsAbsolutePath("C:test", false)); assertFalse(Path.isWindowsAbsolutePath("/C:test", true));
assertTrue(th instanceof RemoteException);
assertEquals(normalizedHosts.get(0), hosts.get(0)); assertFalse(normalizedHosts.get(1).equals(hosts.get(1))); assertEquals(normalizedHosts.get(1), hosts.get(0)); assertFalse(normalizedHosts.get(2).equals(hosts.get(2))); assertEquals(normalizedHosts.get(3), hosts.get(3));
assertTrue("Empty Config did not produce an empty list of resources", localResources.isEmpty());
assertEquals(list.get(0), set.pollFirst()); assertNull(set.pollFirst());
assertEquals(new Path("/foo"), new Path("/foo/bar").getParent()); assertEquals(new Path("foo"), new Path("foo/bar").getParent()); assertEquals(new Path("/"), new Path("/foo").getParent()); assertEquals(null, new Path("/").getParent()); assertEquals(new Path("c:/"), new Path("c:/foo").getParent());
assertEquals(3, sig.getCurSegmentTxId()); assertTrue(editsSegment.delete()); assertEquals(BootstrapStandby.ERR_CODE_LOGS_UNAVAILABLE, rc);
assertNull(ProxyUriUtils.getUriFromTrackingPlugins(id, list));
assertEquals(4, col.size()); assertTrue(col.containsAll(Arrays.asList(new String[]{"foo","bar","baz","blah"})));
assertEquals("", StringUtils.join(":", s.subList(0, 0))); assertEquals("a", StringUtils.join(":", s.subList(0, 1))); assertEquals("a:b", StringUtils.join(":", s.subList(0, 2))); assertEquals("a:b:c", StringUtils.join(":", s.subList(0, 3)));
assertEquals(0, runTool("-failover", "nn1", "nn2", "--forcefence"));
assertNotNull(e); assertTrue(e instanceof JobCommitCompletedEvent); assertTrue(startCommitFile.toString(), fs.exists(startCommitFile)); assertTrue(endCommitSuccessFile.toString(), fs.exists(endCommitSuccessFile)); assertFalse(endCommitFailureFile.toString(), fs.exists(endCommitFailureFile));
assertFalse(DFSUtil.isValidName("/foo/../bar")); assertFalse(DFSUtil.isValidName("/foo/./bar"));
assertEquals(2, getLinkCount(x1)); assertEquals(2, getLinkCount(x2)); assertEquals(2, getLinkCount(x3)); assertEquals(2, getLinkCount(x1_mult)); assertEquals(2, getLinkCount(x2_mult)); assertEquals(2, getLinkCount(x3_mult)); assertTrue(fetchFileContents(x1_mult).equals(str1 + str3)); assertTrue(fetchFileContents(x1).equals(str1 + str3));
assertEquals(ugi, UserGroupInformation.getLoginUser());
assertEquals("/a/b", KeyProvider.getBaseName("/a/b@3")); assertEquals("/aaa", KeyProvider.getBaseName("/aaa@112")); assertTrue("should have thrown", false); assertTrue(true);
assertTrue(fnfe.getMessage().contains("File does not exist")); assertTrue(e.getMessage().contains("Directory does not exist")); assertTrue(f == from); assertTrue(f == from); assertTrue(fnfe.getMessage().contains("Path is not a file")); assertTrue(d == from);
assertSame(strongInternLiteralABC, strongInternSubstringABC); assertSame(strongInternLiteralABC, strongInternHeapABC); assertSame(strongInternSubstringABC, strongInternHeapABC);
assertEquals(Check.gt0(120, "test"), 120);
assertEquals(names.size(), result.size()); assertEquals(NetworkTopology.DEFAULT_RACK, result.get(0)); assertEquals(NetworkTopology.DEFAULT_RACK, result.get(1));
assertEquals("wrong tokens in user", 2, fs.ugi.getTokens().size());
assertEquals("unexpected number of splits", 1, infos.length); assertEquals("unexpected number of split locations", 4, infos[0].getLocations().length);
assertEquals(ZKFailoverController.ERR_CODE_NO_PARENT_ZNODE, runFC(svc)); assertEquals(0, runFC(svc, "-formatZK")); assertEquals(ZKFailoverController.ERR_CODE_FORMAT_DENIED, runFC(svc, "-formatZK", "-nonInteractive")); assertEquals(0, runFC(svc, "-formatZK", "-force"));
assertEquals("Application ID:", item.key); assertEquals("application_0_0000", item.value); assertEquals("Application Name:", item.key); assertEquals("AppName", item.value); assertEquals("User:", item.key); assertEquals("User", item.value); assertEquals("Started on:", item.key); assertEquals("Elasped: ", item.key);
assertEquals("Incorrect return value", ret, isTerminated); assertTrue("ExecutorService is not shutdown", isTerminated);
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals("No such interface name-of-an-unknown-interface", e.getMessage());
assertEquals(0, runTool("-help")); assertEquals(0, runTool("-help", "transitionToActive"));
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(inputBuffer.getPosition(), position);
assertEquals("root.specifiedq", policy.assignAppToQueue("specifiedq", "someuser")); assertEquals("root.someuser", policy.assignAppToQueue("default", "someuser")); assertEquals("root.specifiedq", policy.assignAppToQueue("specifiedq", "otheruser")); assertEquals("root.default", policy.assignAppToQueue("default", "otheruser"));
assertEquals("Upload should timeout", "Read timed out", e.getMessage());
assertTrue(NameNodeLayoutVersion.supports(LAST_NON_RESERVED_COMMON_FEATURE, first.getInfo().getLayoutVersion())); assertEquals(LAST_COMMON_FEATURE.getInfo().getLayoutVersion() - 1, first.getInfo().getLayoutVersion());
assertEquals(input[i], output[i]); assertEquals(input[i], output[i]); assertEquals(input[i - HALFWAY], output[i]);
assertTrue(srcFile.exists()); assertTrue(!targetFile.exists()); assertTrue(!srcFile.exists()); assertTrue(targetFile.exists()); assertTrue(srcFile.exists()); assertTrue(!srcFile.exists()); assertTrue(targetFile.exists()); assertTrue(srcFile.exists()); assertTrue(obstacle.exists()); assertTrue(targetFile.exists() && targetFile.isDirectory()); assertTrue(false); assertTrue(srcFile.exists()); assertTrue(targetFile.exists() && targetFile.isDirectory()); assertTrue(obstacle.exists());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(conf.size(), 0); assertEquals(conf.size(), 1); assertEquals(conf.get("a"), "A");
assertEquals(TasksPage.class, appController.getClazz());
assertEquals(clientAddr, getRemoteAddr(clientAddr, proxyAddr, true)); assertEquals(clientAddr, getRemoteAddr(chainedClientAddr, proxyAddr, true));
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertArrayEquals(verif, Arrays.copyOf(check, verif.length)); assertArrayEquals(verif, Arrays.copyOf(check, verif.length));
assertFalse(mockTask.canCommit(commitAttempt));
assertEquals(new File(testDir.toString()), item.toFile()); assertEquals(new File(testDir + "/d1/f1"), item.toFile()); assertEquals(new File(testDir + "/d1/f1"), item.toFile());
assertEquals(STATE.INITED, webAppProxy.getServiceState()); assertEquals(((WebAppProxy) service).getBindAddress(), proxyAddress); assertEquals(STATE.STARTED, webAppProxy.getServiceState());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, nodes.getLength());
assertNull(up.getValue(context)); assertNull(MDC.get("user"));
assertNotNull("getJobFile results in null.", jobFile); assertEquals("jobFile with specified user is not as expected.", "/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml", jobFile);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(JobConfPage.class, appController.getClazz());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertFalse(it.hasNext()); assertTrue(it.hasNext()); assertEquals(it.next(), list.get(0)); assertEquals(it.next(), list.get(1)); assertFalse(it.hasNext());
assertTrue(in.wasClosedProperly());
assertTrue(localFs.mkdirs(new Path(dir3))); assertTrue(localFs.mkdirs(new Path(dir4)));
assertEquals("joe", StaticUserWebFilter.getUsernameFromConf(conf));
assertEquals( sortedString("../d2/f3"), sortedString(items) );
assertEquals(masterHostname, rmAddr.getHostName()); assertEquals(masterHostname, "bar.com"); assertEquals(masterHostname, "foo1.com");
assertEquals(NUM, set.size()); assertFalse(set.isEmpty()); assertTrue(bkmrkIt.hasNext()); assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(bkmrkIt.hasNext()); assertEquals(0, set.pollAll().size()); assertEquals(0, set.pollN(10).size()); assertNull(set.pollFirst()); assertFalse(iter.hasNext());
assertFalse( "isResourceAvailable must return false if " + "disk usage is higher than threshold", nb.hasAvailableDiskSpace());
assertEquals("Not throwing the expected exception.", "Exception in closing the stream", e.getMessage());
assertTrue(fencer.fence(MOCK_TARGET));
assertEquals(names.size(), result.size()); assertEquals(result.get(0), NetworkTopology.DEFAULT_RACK); assertEquals(result.get(1), NetworkTopology.DEFAULT_RACK);
assertNull(value); assertNotNull(value); assertTrue(value.contains(classpath)); assertTrue(value.contains(os)); assertFalse(value.contains(version));
assertTrue(set.addAll(list)); assertEquals(NUM, array.length); assertTrue(list.contains(array[i])); assertEquals(NUM, set.size()); assertEquals(NUM, array2.length); assertTrue(list.contains(array2[i]));
assertEquals(proxyAddr, getRemoteAddr(null, proxyAddr, true)); assertEquals(proxyAddr, getRemoteAddr("", proxyAddr, true));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertNotNull(e); assertTrue(e instanceof JobCommitFailedEvent); assertTrue(fs.exists(startCommitFile)); assertFalse(fs.exists(endCommitSuccessFile)); assertTrue(fs.exists(endCommitFailureFile));
assertTrue(Arrays.equals(uuid, header.getClientId().toByteArray()));
assertEquals(Perms.CREATE | Perms.DELETE | Perms.READ | Perms.WRITE | Perms.ADMIN, acl0.getPerms()); assertEquals("sasl", acl0.getId().getScheme()); assertEquals("hdfs/host1@MY.DOMAIN", acl0.getId().getId()); assertEquals(Perms.CREATE | Perms.ADMIN, acl1.getPerms()); assertEquals("sasl", acl1.getId().getScheme()); assertEquals("hdfs/host2@MY.DOMAIN", acl1.getId().getId());
assertEquals(0, compare(writableComparator, bTrue, bTrue)); assertEquals(0, compare(writableComparator, bFalse, bFalse)); assertEquals(1, compare(writableComparator, bTrue, bFalse)); assertEquals(-1, compare(writableComparator, bFalse, bTrue));
assertNotNull(map.get(bpid, block)); assertNull(map.get(bpid, b)); assertNull(map.get(bpid, b)); assertNotNull(map.get(bpid, block.getBlockId())); assertNull(map.get(bpid, 0));
assertEquals(MD5FileUtils.readStoredMd5ForFile(fsimage), MD5FileUtils.computeMd5ForFile(fsimage));
assertEquals(0, reply.getXid()); assertEquals(RpcMessage.Type.RPC_REPLY, reply.getMessageType()); assertEquals(ReplyState.MSG_ACCEPTED, reply.getState()); assertEquals(verifier, reply.getVerifier()); assertEquals(AcceptState.SUCCESS, reply.getAcceptState());
assertEquals(key, conf.get(key));
assertEquals("root.specifiedq", policy.assignAppToQueue("specifiedq", "someuser")); assertEquals("root.someuser", policy.assignAppToQueue("default", "someuser")); assertEquals("root.otheruser", policy.assignAppToQueue("default", "otheruser"));
assertTrue(tester.memAvailable == 6400417792L); assertTrue(tester.cpuUsage == -1); assertTrue(tester.memAvailable == 6400417792L); assertTrue(tester.cpuUsage == -1); assertTrue(tester.memAvailable == 5400417792L); assertTrue(tester.cpuUsage >= 0.1);
assertFalse(fileStatus1.equals(fileStatus2)); assertFalse(fileStatus2.equals(fileStatus1));
assertEquals("/proxy/application_100_0001", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(100l, 1))); assertEquals("/proxy/application_6384623_0005", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5)));
assertEquals(conf.getRaw("a"), "A"); assertEquals(conf.getRaw("b"), "${a}"); assertEquals(conf.getRaw("a"), "A"); assertEquals(conf.getRaw("b"), "A");
assertTrue("Demand is greater than max allowed ", Resources.equals(schedulable.getDemand(), maxResource));
assertEquals("Premature EOF from inputStream " + "after skipping 1 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 5 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 0 byte(s).",e.getMessage());
assertFalse(lfs.util().exists(p));
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertEquals(0,e.status);
assertEquals(bc.length, MAX_LIMIT); assertEquals(bc.length, REMAINING_BLOCKS);
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.DELEGATION_TOKEN, Feature.RESERVED_REL20_204.getInfo().getLayoutVersion()));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertFalse(new Path("/").equals(new Path("/foo")));
assertEquals(Check.notNull("value", "name"), "value");
assertTrue(localFs.exists(tmpPath)); assertEquals(1, straus.getLen());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertNotNull(ni.getHealthReport());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertNull("Resource should be null for current classloader", currentClassLoader.getResourceAsStream("resource.txt")); assertNotNull("Resource should not be null for app classloader", in); assertEquals("hello", IOUtils.toString(in));
assertEquals(1, fileSchemeCount);
assertEquals(reg.getSoftwareVersion(), reg2.getSoftwareVersion());
assertTrue("NN resource monitor should be running", isNameNodeMonitorRunning); assertFalse("NN should not presently be in safe mode", cluster.getNameNode().isInSafeMode()); assertTrue("NN should be in safe mode after resources crossed threshold", cluster.getNameNode().isInSafeMode());
assertNotNull("Executing a task on a non-existing volume should throw an " + "Exception.", e); assertEquals(total, count);
assertNotNull("RequestLog should not be null", requestLog); assertEquals("Class mismatch", NCSARequestLog.class, requestLog.getClass());
assertNotNull(NetUtils.getLocalInetAddress("127.0.0.1")); assertNull(NetUtils.getLocalInetAddress("invalid-address-for-test")); assertNull(NetUtils.getLocalInetAddress(null));
assertSame(objA, objSet.getElement(objA)); assertSame(objA, objSet.getElement(equalToObjA)); assertSame(objB, objSet.getElement(objB)); assertNull(objSet.getElement(new TestObject("not in set")));
assertEquals(0, shell.run(new String[]{ "-setrep", "-w", Integer.toString(1+REPLICATION_FACTOR), FILE_NAME}));
assertTrue(localFs.mkdirs(new Path(dir))); assertEquals(f1.getName(), p1.getName()); assertEquals("file", p1.getFileSystem(conf).getUri().getScheme());
assertEquals(1, l.size()); assertEquals(list.get(0), l.get(0));
assertEquals("simple", conf.get(HADOOP_SECURITY_AUTHENTICATION)); assertEquals("simple", conf.get(HADOOP_SECURITY_AUTHENTICATION)); assertEquals("kerberos", conf.get(HADOOP_SECURITY_AUTHENTICATION));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals("Service state should have been ", STATE.INITED, services[NUM_OF_SERVICES - 1].getServiceState()); assertEquals("Service state should have been ", STATE.STOPPED, services[i].getServiceState());
assertTrue(localFs.mkdirs(dstPath));
assertEquals(Check.validIdentifier("a", 1, ""), "a"); assertEquals(Check.validIdentifier("a1", 2, ""), "a1"); assertEquals(Check.validIdentifier("a_", 3, ""), "a_"); assertEquals(Check.validIdentifier("_", 1, ""), "_");
assertEquals(0, rc); assertTrue(outContent.toString().contains("key1")); assertEquals(0, rc); assertTrue(outContent.toString().contains("key1 has been successfully " + "rolled.")); assertEquals(0, rc); assertFalse(outContent.toString(), outContent.toString().contains("key1"));
assertTrue(LocalDirAllocator.isContextValid(contextCfgItemName)); assertFalse(LocalDirAllocator.isContextValid(contextCfgItemName));
assertTrue(socket.isBound());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertEquals("foo", AlwaysSucceedFencer.callArgs.get(0));
assertEquals(0, e.status);
assertEquals("True has to be returned in this case", preferredBlockSize, inf.getPreferredBlockSize());
assertEquals(expected, filterDefaultAclEntries(existing));
assertEquals(new Short((short)01777), param.parse("01777"));
assertEquals(100, QJMTestUtil.recoverAndReturnLastTxn(qjm)); assertEquals(150, QJMTestUtil.recoverAndReturnLastTxn(qjm));
assertEquals(1, streamJob.run(new String[0])); assertEquals(0, streamJob.run(new String[] {"-help"})); assertEquals(0, streamJob.run(new String[] {"-info"}));
assertTrue(fencer.tryFence(TEST_TARGET, "echo")); assertFalse(fencer.tryFence(TEST_TARGET, "exit 1")); assertFalse(fencer.tryFence(TEST_TARGET, "xxxxxxxxxxxx"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, appAttempts.length()); assertEquals("incorrect number of elements", 5, array.length());
assertEquals(TokenUtils.isExpired(identityToken), false);
assertTrue(emptyException);
assertNull("Expected an empty list for resolve", result); assertNull("Expected an empty list for getDependency", result);
assertEquals(System.getProperty("user.name"), stat.getOwner()); assertNotNull(stat.getGroup()); assertTrue(!stat.getGroup().isEmpty()); assertEquals("Stat mode field should indicate a regular file", NativeIO.POSIX.Stat.S_IFREG, stat.getMode() & NativeIO.POSIX.Stat.S_IFMT);
assertEquals("root.default", policy.assignAppToQueue("root.default", "user1")); assertEquals("root.user1subgroup1.user1", policy.assignAppToQueue("root.default", "user1"));
assertEquals(lbl.length, lbl2.length);
assertFalse(tmp1.getAbsolutePath().equals(baseFile.getAbsolutePath())); assertFalse(tmp2.getAbsolutePath().equals(baseFile.getAbsolutePath())); assertTrue(tmp1.exists() && tmp2.exists()); assertTrue(tmp1.canWrite() && tmp2.canWrite()); assertTrue(tmp1.canRead() && tmp2.canRead()); assertTrue(!tmp1.exists() && !tmp2.exists());
assertTrue(result.isEmpty());
assertEquals(AuthenticationMethod.SIMPLE, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod()); assertEquals(AuthenticationMethod.PROXY, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod());
assertNull(ConverterUtils.toString((ContainerId)null));
assertEquals(new String(loadSecretKey.getEncoded(), 0, loadSecretKey.getEncoded().length), new String(secretKey.getEncoded(), 0, secretKey.getEncoded().length)); assertEquals(new String(loadPrivateKey.getEncoded(), 0, loadPrivateKey.getEncoded().length), new String(privateKey.getEncoded(), 0, privateKey.getEncoded().length));
assertTrue(e.getMessage().contains("illegal network location"));
assertTrue("Deterministic seeding", getSeed("stream1", masterSeed1) == getSeed("stream1", masterSeed1)); assertTrue("Deterministic seeding", getSeed("stream2", masterSeed2) == getSeed("stream2", masterSeed2)); assertTrue("Different streams", getSeed("stream1", masterSeed1) != getSeed("stream2", masterSeed1)); assertTrue("Different master seeds", getSeed("stream1", masterSeed1) != getSeed("stream1", masterSeed2));
assertEquals( sortedString(testDir+"/d1/f1", testDir+"/d1/f1.1"), sortedString(items) ); assertEquals( sortedString(absolutePathNoDriveLetter), sortedString(items) ); assertEquals( sortedString("."), sortedString(items) );
assertTrue("expected 2 blocks but got " + bs.length, bs.length == 2); assertTrue("expected 1 corrupt files but got " + corruptCount, corruptCount == 1); assertEquals(0, bs.length);
assertEquals(readToken.getPrincipal().getName(), DEFAULT_PRINCIAL_NAME);
assertEquals(new Path("c:\\\\foo\\\\bar").toString(), "c:/foo/bar"); assertEquals(new Path("c:/foo/bar").toString(), "c:/foo/bar"); assertEquals(new Path("/c:/foo/bar").toString(), "c:/foo/bar");
assertTrue(DataNodeLayoutVersion.supports(LAST_NON_RESERVED_COMMON_FEATURE, first.getInfo().getLayoutVersion())); assertEquals(LAST_COMMON_FEATURE.getInfo().getLayoutVersion() - 1, first.getInfo().getLayoutVersion());
assertTrue(getLongCounter("ElapsedTime", builder) >= 0L); assertTrue(getLongCounter("LoadingFsImageElapsedTime", builder) >= 0L); assertTrue(getLongCounter("LoadingEditsElapsedTime", builder) >= 0L);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(logs.size(), logs1.size());
assertEquals(map.getDatanodeByHost("1.1.1.1"), dataNodes[0]); assertEquals(map.getDatanodeByHost("2.2.2.2"), dataNodes[1]); assertTrue(node == dataNodes[2] || node == dataNodes[3]); assertNull(map.getDatanodeByHost("4.4.4.4"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(estimator.getCount(), 0); assertEquals(estimator.getSampleCount(), 0); assertNull(estimator.snapshot());
assertEquals(0, rc); assertTrue(outContent.toString().contains("key1 has been successfully " + "deleted."));
assertEquals(Check.ge0(120, "test"), 120); assertEquals(Check.ge0(0, "test"), 0);
assertEquals("Attempts for task_01_01_m01_01" , appController.getProperty().get("title")); assertEquals(TaskPage.class, appController.getClazz());
assertNotNull(proxyUser);
assertTrue( "isResourceAvailable must return true if " + "disk usage is lower than threshold", nb.hasAvailableDiskSpace());
assertEquals(KeyValueTextInputFormat.class, job.getInputFormat().getClass()); assertEquals(SequenceFileInputFormat.class, job.getInputFormat().getClass()); assertEquals(StreamInputFormat.class, job.getInputFormat().getClass());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, containers.length()); assertEquals("incorrect number of elements", 5, array.length());
assertEquals(INITED, s.getServiceState()); assertEquals("Invalid mix of services", 6, latch); assertEquals(STARTED, s.getServiceState()); assertEquals(STOPPED, s.getServiceState());
assertEquals(iug.getTimeout(), IdUserGroup.TIMEOUT_DEFAULT); assertEquals(iug.getTimeout(), IdUserGroup.TIMEOUT_MIN); assertEquals(iug.getTimeout(), IdUserGroup.TIMEOUT_DEFAULT * 2);
assertNull(FileUtil.stat2Paths(null)); assertEquals(0, paths.length); assertEquals(2, paths.length); assertEquals(paths[0], path1); assertEquals(paths[1], path2);
assertSame(spyErrorHandler, errorThread.getUncaughtExceptionHandler());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertTrue(fence.tryFence( TEST_TARGET, null));
assertTrue("List mismatch", words1.equals(words2));
assertNotNull(ugi); assertEquals("guest@DEFAULT.REALM", ugi.getUserName());
assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.CONCAT, Feature.RESERVED_REL1_2_0.getInfo().getLayoutVersion()));
assertEquals("List size mismatch", 10, words.size()); assertEquals("List size mismatch due to duplicates", 10, wordsSet.size()); assertEquals("Word size mismatch", 5, word.length());
assertNotNull("unable to locate method " + ci.methodName, method); assertTrue("Method " + ci.methodName + " threw non-DBException: " + exc, exc instanceof DBException); assertFalse("Method " + ci.methodName + " double-wrapped DBException", exc.getCause() instanceof DBException);
assertSame(weakInternLiteralABC, weakInternSubstringABC); assertSame(weakInternLiteralABC, weakInternHeapABC); assertSame(weakInternSubstringABC, weakInternHeapABC);
assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertTrue(appAttIds.contains(appAttId1)); assertTrue(appAttIds.contains(appAttId2));
assertEquals(1, jid.getAppId().getClusterTimestamp()); assertEquals(1, jid.getAppId().getId()); assertEquals(1, jid.getId());
assertEquals("Should be same group ", g1.get(i), g2.get(i)); assertFalse( "Should be different group: " + g1.get(i) + " and " + g3.get(i), g1 .get(i).equals(g3.get(i)));
assertEquals("attempt_0_0000_m_000000_0", MRApps.toString(taid));
assertTrue(appsInDefault.contains(application_0.getApplicationAttemptId())); assertTrue(appsInDefault.contains(application_1.getApplicationAttemptId())); assertEquals(2, appsInDefault.size());
assertEquals(2, nameserviceIds.size()); assertEquals("nn1", it.next().toString()); assertEquals("nn2", it.next().toString());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertNotNull(userParam.getValue());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length()); assertEquals("incorrect number of elements", 1, apps.length()); assertEquals("incorrect number of elements", 5, array.length());
assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals("foo", AlwaysSucceedFencer.callArgs.get(0));
assertTrue(chk.delete(id));
assertTrue(storage.getRemovedStorageDirs().contains(sd));
assertEquals(0, runTool("-failover", "nn1", "nn2", "--forcefence")); assertEquals(-1, runTool("-failover", "nn1", "nn2", "--forcefence")); assertEquals(-1, runTool("-failover", "nn1", "nn2", "--forcefence")); assertEquals(0, runTool("-failover", "nn1", "nn2", "--forcefence"));
assertEquals(names.size(), result.size()); assertEquals("/rack1", result.get(0)); assertEquals("/rack2", result.get(1));
assertEquals(NS1_NN1_ADDR, map.get("ns1").get("nn1").toString()); assertEquals(NS1_NN2_ADDR, map.get("ns1").get("nn2").toString());
assertTrue(!validation.hasCorruptHeader()); assertEquals(HdfsConstants.INVALID_TXID, validation.getEndTxId());
assertEquals(b, b2);
assertEquals(oldStatus.getModificationTime(), snapshotStatus.getModificationTime()); assertEquals(oldStatus.getAccessTime(), snapshotStatus.getAccessTime());
assertEquals((long)content.length, infile.length()); assertEquals(ViewFileSystem.class, vfs.getClass()); assertEquals(content.length, stat.getLen()); assertEquals(content.length, deSer.getLen());
assertFalse("Added an integer as a service", addIfService(notAService)); assertEquals("Incorrect number of services", 2, testService.getServices().size());
assertNull(userParam.getValue());
assertTrue(set.add(i)); assertEquals(0, set.size()); assertTrue(set.isEmpty()); assertFalse(set.contains(list.get(i))); assertTrue(list.contains(i)); assertFalse(iter.hasNext());
assertEquals("root.specifiedq", policy.assignAppToQueue("specifiedq", "someuser")); assertEquals(null, policy.assignAppToQueue("default", "someuser"));
assertNotNull(userParam.getValue());
assertTrue("The valid local file should get saved properly", localPaths.get(1).length() > 0);
assertNotNull(tree); assertThat(tree, instanceOf(EmptyProcessTree.class));
assertTrue(futureThread.get().isAlive()); assertNotNull(e); assertEquals(InterruptedException.class, e.getClass()); assertEquals("sleep interrupted", e.getMessage());
assertEquals(Check.notEmpty("value", "name"), "value");
assertEquals(names.size(), result.size()); assertEquals(result.get(0), NetworkTopology.DEFAULT_RACK); assertEquals(result.get(1), NetworkTopology.DEFAULT_RACK);
assertEquals(2, result.size()); assertEquals("scheme", auth0.getScheme()); assertEquals("data", new String(auth0.getAuth())); assertEquals("scheme2", auth1.getScheme()); assertEquals("user:pass", new String(auth1.getAuth()));
assertEquals(1, getLinkCount(x1)); assertEquals(1, getLinkCount(x2)); assertEquals(1, getLinkCount(x3));
assertEquals(existing, filterDefaultAclEntries(existing));
assertTrue(t.isAlive()); assertNotNull(pid); assertFalse(t.isAlive());
assertEquals("0.0.0.0", ((NameNodeRpcServer)cluster.getNameNodeRpc()) .getClientRpcServer().getListenerAddress().getHostName());
assertEquals(2, taskAttempts.size()); assertEquals(3, taskAttempts.size());
assertTrue(INCLUDES_FILE.delete());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertTrue("Missing parent field", containsParentField); assertTrue("Missing child field", containsChildField); assertTrue("Missing parent method", containsParentMethod); assertTrue("Missing child method", containsChildMethod);
assertEquals( "Rackname", taskAttemt.getNodeRackName()); assertEquals( Phase.CLEANUP, taskAttemt.getPhase()); assertTrue( taskAttemt.isFinished()); assertEquals( 11L, taskAttemt.getShuffleFinishTime()); assertEquals( 12L, taskAttemt.getSortFinishTime()); assertEquals( 10, taskAttemt.getShufflePort());
assertEquals("root.default", policy.assignAppToQueue("root.default", "user1")); assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1")); assertEquals("root.default", policy.assignAppToQueue("root.default", "user2")); assertEquals("root.user2group.user2", policy.assignAppToQueue("root.default", "user2"));
assertEquals("task_0_0000_m_000000", MRApps.toString(tid)); assertEquals("task_0_0000_r_000000", MRApps.toString(tid));
assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_B, BLOCK_1_GS1).hashCode()); assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_A, BLOCK_2_GS1).hashCode()); assertEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode(), new ExtendedBlock(POOL_A, BLOCK_1_GS1).hashCode());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 1L); assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 5L);
assertEquals(0, runTool("-failover", "nn1", "nn2"));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertSame(spyOomHandler, oomThread.getUncaughtExceptionHandler());
assertTrue(defaultXml + " must be system resource", ApplicationClassLoader.isSystemClass(defaultXml, systemClasses)); assertTrue(klass + " must be system class", ApplicationClassLoader.isSystemClass(klass, systemClasses)); assertFalse("/fake/Klass must not be a system class", ApplicationClassLoader.isSystemClass("/fake/Klass", systemClasses));
assertEquals("path", uri.toString()); assertEquals("/path", uri.toString());
assertEquals("True has to be returned in this case", BLKSIZE_MAXVALUE, inf.getPreferredBlockSize());
assertTrue(fs.mkdirs(root)); assertTrue(fs.exists(root)); assertEquals("Return value != 0.", 0, ret); assertEquals(Long.class, key.getClass()); assertEquals(String.class, value.getClass()); assertTrue("Invalid output.", Integer.parseInt(value.toString()) % 10 == 0); assertEquals("Wrong number of outputs.", 100, counter);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals("incorrect number of elements", 1, json.length());
assertEquals(expectedOwner, owner); assertNotNull(stat.getGroup()); assertTrue(!stat.getGroup().isEmpty()); assertEquals("Stat mode field should indicate a regular file", NativeIO.POSIX.Stat.S_IFREG, stat.getMode() & NativeIO.POSIX.Stat.S_IFMT);
assertEquals(existing, filterAclEntriesByAclSpec(existing, aclSpec));
assertEquals(expected, filterAclEntriesByAclSpec(existing, aclSpec));
assertTrue(localFs.mkdirs(new Path(dir1))); assertTrue(localFs.getFileStatus(p1.getParent()).isDirectory()); assertEquals(e.getClass(), FileNotFoundException.class);
assertNotNull("A valid class must be returned for default Writable SerDe", factory.getDeserializer(Writable.class)); assertNull("A null should be returned if there are no deserializers found", factory.getDeserializer(TestSerializationFactory.class));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("Removal failed", 0, newPerms & Perms.CREATE);
assertEquals(0, runTool("-failover", "nn1", "nn2", "--forceactive"));
assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertEquals("ns1", DFSUtil.getOnlyNameServiceIdOrNull(conf));
assertEquals(1, set.size()); assertFalse(set.isEmpty()); assertTrue(iter.hasNext()); assertEquals(list.get(0), iter.next()); assertFalse(iter.hasNext());
assertEquals("", new Path(".").toString()); assertEquals("..", new Path("..").toString()); assertEquals("/", new Path("/").toString());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue(set.add(i)); assertTrue(set.remove(list.get(i))); assertFalse(set.contains(list.get(i))); assertFalse(iter.hasNext()); assertTrue(set.isEmpty());
assertTrue(map.contains(dataNodes[i])); assertFalse(map.contains(null)); assertFalse(map.contains(nodeNotInMap));
assertEquals(expected, filterAclEntriesByAclSpec(existing, aclSpec));
assertTrue(set.add(i)); assertTrue(set.remove(list.get(i))); assertFalse(set.contains(list.get(i))); assertTrue(set.contains(list.get(i))); assertEquals(list.get(num++), iter.next()); assertEquals(num, NUM);
assertEquals( sortedString("d1/f1", "d1/f1.1"), sortedString(items) );
assertEquals(true, ret);
assertEquals(0, rc);
assertEquals("True has to be returned in this case", replication, inf.getFileReplication());
assertTrue(report.getStartTime() == 10);
assertTrue((Boolean)method.invoke(ugi, now)); assertFalse((Boolean)method.invoke(ugi, now)); assertTrue((Boolean)method.invoke(ugi, now)); assertFalse((Boolean)method.invoke(ugi, now));
assertTrue(validation.hasCorruptHeader());
assertTrue(appComparator.compare(app1, app2) < 0); assertTrue(appComparator.compare(app1, app3) < 0); assertTrue(appComparator.compare(app2, app3) < 0);
assertEquals("root.parent1.user1", policy.assignAppToQueue("root.parent1", "user1")); assertEquals("root.parent2.user2", policy.assignAppToQueue("root.parent2", "user2"));
assertFalse("List size mismatch across lists", words1.equals(words2));
assertEquals( sortedString("d1", "d2"), sortedString(items) );
assertEquals(3, queues.size()); assertEquals(false, scheduler.isStarvedForFairShare(p)); assertEquals(true, scheduler.isStarvedForFairShare(p)); assertEquals(false, scheduler.isStarvedForFairShare(p));
assertEquals(STATE.INITED, historyServer.getServiceState()); assertEquals(3, historyServer.getServices().size()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState());
assertEquals(s.getBlockpoolID(), s1.getBlockpoolID()); assertEquals(s.getClusterID(), s1.getClusterID()); assertEquals(s.getCTime(), s1.getCTime()); assertEquals(s.getCurSegmentTxId(), s1.getCurSegmentTxId()); assertEquals(s.getLayoutVersion(), s1.getLayoutVersion()); assertEquals(s.getMostRecentCheckpointTxId(), s1.getMostRecentCheckpointTxId()); assertEquals(s.getNamespaceID(), s1.getNamespaceID());
assertEquals(createTime, session.getCreationTime()); assertEquals(sessionID, session.getId());
assertEquals("Read should timeout", "Read timed out", e.getMessage());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(0, runTool("-checkHealth", "nn1")); assertEquals(0, runTool("-getServiceState", "nn1"));
assertTrue(new Path("/").isAbsolute()); assertTrue(new Path("/foo").isAbsolute()); assertFalse(new Path("foo").isAbsolute()); assertFalse(new Path("foo/bar").isAbsolute()); assertFalse(new Path(".").isAbsolute()); assertTrue(new Path("c:/a/b").isAbsolute()); assertFalse(new Path("c:a/b").isAbsolute());
assertEquals("Expected sums to be equal", bufSum, sum);
assertEquals("u0zz", adjacentHash("u1pb", Direction.BOTTOM));
assertEquals(4, coverage.getHashes().size()); assertEquals(3, coverage.getHashLength());
assertEquals(4.190951585769653e-8, heightDegrees(13), PRECISION);
assertEquals("2", GeoHash.adjacentHash("r", Direction.RIGHT));
assertEquals(1, coverage.getHashes().size()); assertEquals(2, coverage.getHashLength());
assertEquals(point.getLat(), 38.89710201881826, PRECISION); assertEquals(point.getLon(), -77.03669792041183, PRECISION);
assertEquals(360.0, widthDegrees(0), PRECISION);
assertEquals(Sets.newHashSet("d"), coverage.getHashes()); assertEquals(1, coverage.getHashLength()); assertEquals(1694.6984366342194, coverage.getRatio(), PRECISION);
assertEquals("15pn7", encodeBase32(1234567, 5));
assertEquals("-3v", encodeBase32(-123, 2));
assertTrue(predicate.apply(createInfo(topLeftLat - 1, topLeftLong + 1))); assertFalse(predicate.apply(createInfo(topLeftLat + 1, topLeftLong + 1))); assertFalse(predicate.apply(createInfo(topLeftLat - 1, topLeftLong - 1))); assertFalse(predicate.apply(createInfo(topLeftLat - 1, bottomRightLong + 1))); assertFalse(predicate.apply(createInfo(bottomRightLat - 1, bottomRightLong - 1)));
assertEquals("6gkzwgjzn820", encodeHash(-25.382708, -49.265506));
assertEquals(GeoHash.MAX_HASH_LENGTH, coverage.getHashLength());
assertEquals("u0zz", bottom("u1pb"));
assertEquals(0, coverage.getHashLength());
assertEquals("LatLong [lat=10.0, lon=20.0]", new LatLong(10, 20).toString());
assertNull(coverage);
assertEquals("0", encodeBase32(0, 1));
assertEquals("dqcjqcp84c6e", encodeHash(38.89710201881826, -77.03669792041183));
assertEquals(1, coverage.getHashLength());
assertEquals(0x65c0000000000002L, GeoHash.encodeHashToLong(41.842967, -72.727175, 2));
assertEquals(0, point.getLat(), PRECISION); assertEquals(0, point.getLon(), PRECISION);
assertEquals(4.190951585769653e-8, widthDegrees(13), PRECISION);
assertEquals(0, hashLengthToCoverBoundingBox(2.935289, -82.751538, -5.623710, -74.753492));
assertEquals("r", GeoHash.adjacentHash("2", Direction.LEFT));
assertEquals("sew1c2vs2q5r", encodeHash(20, 31));
assertEquals(neighbours, Sets.newHashSet(neighbours(center)));
assertEquals("u1pc", top("u1pb"));
assertEquals(0, hashLengthToCoverBoundingBox(71.676351, 178.389963, 70.633291, -177.116629));
assertEquals(0, coverage.getHashLength());
assertEquals("u1p8", left("u1pb"));
assertEquals(0, GeoHash.hashLengthToCoverBoundingBox(80, -170, -80, 170));
assertEquals(Sets.newHashSet("dr7", "dre", "drk", "drs"), hashes);
assertEquals("00000000003v", encodeBase32(123));
assertEquals("dqcjqcp84c6e", encodeHash(new LatLong(38.89710201881826, -77.03669792041183)));
assertEquals(0, hashLengthToCoverBoundingBox(-80, 10, 80, 20));
assertEquals("u1pc", adjacentHash("u1pb", Direction.TOP));
assertEquals(0, decodeBase32("0000000"));
assertEquals(180.0, heightDegrees(0), PRECISION);
assertEquals("u300", right("u1pb"));
assertEquals("6gkzwgjzn820", encodeHash(-25.382708, -49.265506, 12));
assertEquals("u1p8", adjacentHash("u1pb", Direction.LEFT));
assertEquals(1234567, decodeBase32("15pn7"));
assertEquals(0, decodeBase32("0"));
assertEquals("6gkzwg", encodeHash(-25.382708, -49.265506, 6));
assertTrue(GeoHash.hashContains("dre7", centre.getLat(), centre.getLon())); assertFalse(GeoHash.hashContains("dre7", centre.getLat() + 20, centre.getLon())); assertFalse(GeoHash.hashContains("dre7", centre.getLat(), centre.getLon() + 20));
assertEquals("u300", adjacentHash("u1pb", Direction.RIGHT));
assertEquals(classUnderTest.getValue(), value); assertEquals(classUnderTest.getValue(), value);
assertEquals(classUnderTest.getAttributes(), testVocabConceptAttributes); assertEquals(classUnderTest.getAttributes(), testVocabConceptAttributes);
assertEquals(classUnderTest.getDescription(), description); assertEquals(classUnderTest.getDescription(), description);
assertEquals(expectedRecordIds[numRecords++], record.getId()); assertEquals(3, records.size()); assertNotNull(record); assertEquals(recordIds.get(i), record.getId()); assertEquals(metadata2.getSourceDescription().getTitle().getValue(), metadata.getSourceDescription().getTitle().getValue()); assertNull(metadata2); assertNull(recordIterator.next());
assertEquals(result.getZoomLevel(), zoomLevel); assertEquals(result.getZoomLevel(), zoomLevel);
assertEquals("<>", link.getHttpHeaderValue());
assertEquals("Vertical\\uFFFDTab", escaped);
assertEquals(full, nameForm.getFullText()); assertEquals(surname, nameForm.getParts().get(0).getValue()); assertEquals(given, nameForm.getParts().get(1).getValue());
assertEquals(classUnderTest.getId(), id); assertEquals(classUnderTest.getId(), id);
assertEquals(myDateFormatted, targetFormat.format(myDate)); assertEquals(myDateFormatted, targetFormat.format(myDate)); assertEquals(myDateFormatted, "2011-11-11T00:00:00.000Z"); assertEquals(myDateFormatted, "2011-11-11T11:11:11.111Z");
assertEquals(classUnderTest.getNote(), note); assertEquals(classUnderTest.getNote(), note);
assertEquals(classUnderTest.getName(), name); assertEquals(classUnderTest.getName(), name);
assertEquals(expecteds.get(i), varName);
assertEquals(VariableNameGenerator.LENGTH, count);
assertEquals("label-bitmap", st.shapes.get(0).toBitmap().label);
assertNull(prefix);
assertThat(result, is(Boolean.TRUE));
assertEquals( "Unexpected value in AWS_USE_IAM_ROLE environment variable; was blue, " + "but expected one of the following [true, false, yes, no, on, off]", e.getMessage());
assertThat(replaced, is("COUNT:1 Name:build-and-publish COUNT2:1"));
assertThat(store.bucketExists(), is(true));
assertThat(goEnvironment.triggeredUser(), is("Krishna"));
assertNull(prefix);
assertThat(goEnvironment.artifactsLocationTemplate(), is("s3-publish-test/build-and-publish/publish/20.1"));
assertThat(store.bucketExists(), is(false));
assertEquals("pipeline/stage/job/1.7", prefix);
assertThat(result, is(Boolean.FALSE));
assertThat(putRequest.getStorageClass(), is("STANDARD"));
assertThat(replaced, is("COUNT:1 ${DOESNT_EXIST}"));
assertTrue(true);
assertEquals(assertion, nextUris);
assertEquals("Should be dbr:New_York", assertion, nextUris);
assertTrue("2 fresh visualization (empty) graphs should be equal", graph1.equals(graph2));
assertEquals("Should be the same as uris array", assertion, nextUris);
assertEquals(8, graph.getEdges().length); assertEquals(2, graph.getEdges().length);
assertThat(graph.getEdges()[0].toString(), CoreMatchers.equalTo("Test 1 -> Test 2 (1.1.1.1)")); assertThat(graph.getEdges()[1].toString(), CoreMatchers.equalTo("Test 2 (1.1.1.1) -> Test 1"));
assertTrue("2 new SquirrelWebObjects should be equal...", o1.equals(o2)); assertFalse("One of them got pending URIs --> not equal any more", o1.equals(o2)); assertTrue("Now the other SquirrelWebObjects got the same list --> equal again!", o1.equals(o2)); assertTrue("SquirrelWebObjects with a similar graph should be the same", o1.equals(o2));
assertTrue(uris.contains(uri)); assertEquals(uris.size(), count);
assertEquals(1, numberOfPendingUris); assertEquals(2, nextUris.size());
assertFalse("uri_1 has been already crawled", frontier.uriFilter.isUriGood(uri_1));
assertEquals(1, retrievedUris.size()); assertTrue(uris.get(1).equals(retrievedUris.get(0))); assertNull(mongodbQueue.getNextUris()); assertEquals(1, mongodbQueue.length()); assertEquals(1, retrievedUris.size()); assertTrue(uris.get(2).equals(retrievedUris.get(0))); assertEquals(0, mongodbQueue.length());
assertEquals(1, mongodbQueue.length()); assertEquals(1, mongodbQueue.length());
assertTrue("Merging two null\'s should return an empty list", utils.mergeLists(null, null).isEmpty()); assertEquals("Merging nothing to something should return the same", foundURI1String, utils.mergeLists(foundURI1String, Collections.emptyList())); assertTrue("Simple merging of 2 lists", utils.mergeLists(foundURI1String, foundURI2).containsAll(combinedList)); assertTrue("Redundant merging of 2 lists", utils.mergeLists(foundURI1String, foundURI1).containsAll(foundURI1String));
assertNull(elasticSearchCacheManager.cacheContainerComponent.getIfPresent(containerId)); assertEquals(component, elasticSearchCacheManager.cacheContainerComponent.getIfPresent(containerId));
assertThat(heuristic.written.forApp("app_1", "att_1").getCount(), is(1)); assertThat(heuristic.written.forApp("app_1", "att_1").getCount(), is(2));
assertEquals(help, result.get(heuristic.getClass().getSimpleName()));
assertEquals(firstOffsets, writer.getStartingOffsets(bothPartitions)); assertEquals(firstOffsets, writer.getStartingOffsets(bothPartitions)); assertEquals(secondOffsets, writer.getStartingOffsets(bothPartitions));
assertThat(filter.accepts(random.nextInt(),EventHeaderProtos.Header.getDefaultInstance()), is(true)); assertThat(filter.accepts(random.nextInt(),EventHeaderProtos.Header.getDefaultInstance()), is(false)); assertThat(filter.accepts(random.nextInt(),EventHeaderProtos.Header.getDefaultInstance()), is(false)); assertThat(filter.accepts(random.nextInt(),EventHeaderProtos.Header.getDefaultInstance()), is(false));
assertTrue(parquetWriter instanceof HiveProtoParquetWriterWithOffset);
assertNull(elasticSearchCacheManager.cacheAppEvent.getIfPresent(applicationId)); assertEquals(appEvent, elasticSearchCacheManager.cacheAppEvent.getIfPresent(applicationId)); assertEquals(1, elasticSearchCacheManager.cacheAppEvent.size());
assertTrue(parquetWriter instanceof ProtoParquetWriterWithOffset);
assertThat(ByteBuddyAgent.install(), instanceOf(Instrumentation.class)); assertNotNull(header[0]); assertNotNull(event[0]);
assertEquals("elasticsearch", config.getElasticsearch().getHost()); assertEquals(500, config.getElasticsearch().getBulkActions()); assertEquals(10, config.getElasticsearch().getBulkSizeMB());
assertThat(buf.getInt(), is(Integer.MAX_VALUE)); assertThat(buf.getLong(), is(timestamp)); assertThat(buf.getInt(), is(144)); assertThat(pBytes, is(expectedPBytes));
assertThat(heuristic.renamed.forApp("app_1", "att_1").getCount(), is(1)); assertThat(heuristic.renamed.forApp("app_1", "att_1").getCount(), is(2));
assertNull(elasticSearchCacheManager.cacheContainerComponent.getIfPresent(containerId));
assertEquals(2, PrometheusMetrics.getRegisteredCollectors().size());
assertEquals(10, PrometheusMetrics.latestCommittedTimestampGauge("event", 0).get(), 0); assertEquals(10, PrometheusMetrics.latestCommittedTimestampGauge("event", 0).get(), 0); assertEquals(15, PrometheusMetrics.latestCommittedTimestampGauge("event", 0).get(), 0);
assertThat(filter.accepts(n), is(false)); assertThat(filter.accepts(type), is(true));
assertThat(filter.accepts(random.nextInt(), EventHeaderProtos.Header.getDefaultInstance()), is(true)); assertThat(filter.accepts(random.nextInt(), EventHeaderProtos.Header.getDefaultInstance()), is(true)); assertThat(filter.accepts(random.nextInt(), EventHeaderProtos.Header.getDefaultInstance()), is(true)); assertThat(filter.accepts(random.nextInt(), EventHeaderProtos.Header.getDefaultInstance()), is(false));
assertThat(heuristic.deleted.forApp("app_1", "att_1").getCount(), is(1)); assertThat(heuristic.deleted.forApp("app_1", "att_1").getCount(), is(2));
assertThat(heuristic.read.forApp("app_1", "att_1").getCount(), is(1)); assertThat(heuristic.read.forApp("app_1", "att_1").getCount(), is(2));
assertNotNull(CollectorRegistry.defaultRegistry.getSampleValue("garmadon_kafka_metrics", new String[]{"name", "hostname", "release", "consumer_id"}, new String[]{"IoStats", GarmadonReader.getHostname(), PrometheusHttpConsumerMetrics.RELEASE, "consumer-1"}));
assertEquals("..\\\\..\\\\Boot\\\\Fonts\\\\chs_boot.ttf", relPath);
assertEquals(false, valid);
assertEquals(2, snapshot.size());
assertEquals(EXPECTED_NODE_ID, selectedNodeId);
assertEquals(false, valid);
assertEquals(-18000000, testDatabasePlatform.getTimeZone("EST").getRawOffset()); assertEquals(-18000000, testDatabasePlatform.getTimeZone("-05:00").getRawOffset());
assertArrayEquals("Expected empty column array", new Column[0], trigger.filterExcludedColumns(null));
assertEquals("test", FormatUtils.replaceTokens("test", null, true)); assertEquals("test", FormatUtils.replaceTokens("test", new HashMap<String, String>(), true)); assertEquals("test1", FormatUtils.replaceTokens("test$(test)", params, true)); assertEquals("test0001", FormatUtils.replaceTokens("test$(test|%04d)", params, true));
assertEquals(4, snapshot.size());
assertEquals(true, valid);
assertEquals("update sym_data set data = \'\\"002\\",\\"hostname\\"\' where data_id =21 and create_time > {ts \'2016-04-20 17:12:57.000\'} and table_name = \'sym_node_host\' and time>={ts \'17:12:57.000\'} and blob_colum = \'000208\'", result);
assertEquals(36, count);
assertEquals(EXPECTED_NODE_ID, selectedNodeId);
assertTrue(dependencyMap.get(1).contains(t1)); assertTrue(dependencyMap.get(1).contains(t2)); assertTrue(dependencyMap.get(2).contains(t3));
assertEquals("test", tokens[0]); assertEquals("line\\nfeed", tokens[1]);
assertEquals(EXPECTED_NODE_ID, selectedNodeId);
assertEquals("..\\\\..\\\\Boot\\\\Fonts\\\\chs_boot.ttf", relPath);
assertEquals(expected, relPath);
assertEquals(false, valid);
assertEquals(2, database.getTableCount()); assertEquals(1, database.getTableCount()); assertNotNull(database.findTable("SYM_DATA"));
assertEquals(EXPECTED_NODE_ID, selectedNodeId);
assertTrue(dependencyMap.get(1).contains(t1)); assertTrue(dependencyMap.get(1).contains(t2)); assertTrue(dependencyMap.get(2).contains(t3));
assertEquals("update sym_data set table_name = \'\'\'?\\\\/\'", result);
assertTrue(dependencyMap.size() == 3);
assertTrue(dependencyMap.get(1).contains(t1)); assertTrue(dependencyMap.get(1).contains(t4)); assertTrue(dependencyMap.get(1).contains(t5)); assertTrue(dependencyMap.get(2).contains(t3)); assertTrue(dependencyMap.get(3).contains(t2));
assertEquals(1, snapshot.size()); assertEquals(snapshot.get(0).getFileName(), FileSyncUtils.getRelativePath(fileInDirectory1, directory));
assertEquals(true, valid);
assertArrayEquals("Included wrong set of columns", expected, trigger.filterIncludedColumns(param));
assertNull("Expected null. Instead received: " + expectedNull, expectedNull);
assertEquals(3, expressions.size()); assertEquals("two",expressions.get(0).tokens[1]); assertEquals("three",expressions.get(1).tokens[0]); assertEquals("five",expressions.get(2).tokens[0]); assertEquals(false,expressions.get(2).hasEquals);
assertTrue("Failed to generate an appropriate alter for the following platform: " + ddlBuilder.databaseName, alterSql.contains("255"));
assertEquals(false, valid);
assertNotNull(database); assertEquals(2, database.getTableCount()); assertEquals("test", database.getName()); assertEquals("test_simple_table", table.getName()); assertEquals(8, table.getColumnCount()); assertEquals(1, table.getPrimaryKeyColumnCount()); assertEquals("id", table.getPrimaryKeyColumnNames()[0]); assertEquals("testColumnWith&", tableWithAmp.getName()); assertEquals("&Amp", tableWithAmp.getColumn(0).getName());
assertEquals("..\\\\..\\\\Boot\\\\Fonts", relPath);
assertEquals("select * from sym_data where data_id = 234234", result);
assertEquals(3, expressions.size()); assertEquals("two",expressions.get(0).tokens[1]); assertEquals("three",expressions.get(2).tokens[0]); assertEquals(false,expressions.get(2).hasEquals);
assertEquals(afterSql, FormatUtils.replaceTokens(beforeSql, replacementTokens, false));
assertEquals(3, expressions.size()); assertEquals("door",expressions.get(0).tokens[1]); assertEquals("three",expressions.get(2).tokens[0]); assertEquals(false,expressions.get(2).hasEquals);
assertArrayEquals("Expected empty column array", new Column[0], trigger.filterIncludedColumns(null));
assertEquals(1, expressions.size()); assertEquals("ORDER_ID",expressions.get(0).tokens[0]); assertEquals(":EXTERNAL_ID",expressions.get(0).tokens[1]);
assertTrue(nearZero + " was the left over ms", Math.abs(nearZero) < 1000); assertTrue(nearZero + " was the left over ms", Math.abs(nearZero) < 1000);
assertArrayEquals("Excluded wrong set of columns", expected, trigger.filterExcludedColumns(param));
assertEquals("select * from sym_data where data_id between 12 and 21", result);
assertEquals(1, snapshot.size()); assertEquals(snapshot.get(0).getFileName(), FileSyncUtils.getRelativePath(fileInDirectory2, directory));
assertEquals("select * from sym_data where data_id = \'234234\'", result);
assertEquals("select * from sym_data where data_id = 234234", result);
assertEquals(SQL, result);
assertEquals("stuff/xyz.dat", FileSyncUtils.getRelativePath("/var/data/stuff/xyz.dat", "/var/data/", "/")); assertEquals("../../b/c", FileSyncUtils.getRelativePath("/a/b/c", "/a/x/y/", "/")); assertEquals("../../b/c", FileSyncUtils.getRelativePath("/m/n/o/a/b/c", "/m/n/o/a/x/y/", "/"));
assertEquals(EXPECTED_NODE_ID, selectedNodeId);
assertEquals(1, snapshot.size()); assertEquals(change.getFileName(), FileSyncUtils.getRelativePath(fileInDirectory1, directory)); assertEquals(change.getLastEventType(), LastEventType.DELETE);
assertTrue("Failed to generate an appropriate alter for the following platform: " + ddlBuilder.databaseName, alterSql.contains("255"));
assertEquals(new ServerSource("sample.jar",config), sources.get(1));
assertEquals("testtesttest", new String(Bytes.toArray(bytes)));
assertEquals(expect, httpRequest);
assertEquals(expect, result);
assertTrue(result); assertFalse(result1); assertTrue(result3); assertTrue(result4); assertFalse(result5); assertTrue(result6);
assertEquals(expect, result);
assertEquals(expect, actual);
assertEquals(expect,actual);
assertEquals(2,counter.get());
assertEquals("text/css", type);
assertEquals(92554, actual.length);
assertArrayEquals(except, actual);
assertEquals(expected, actual);
assertEquals(length, bytes.length);
assertThat(description.subtopologies()).hasSize(0);
assertThat(description.subtopologies()).hasSize(0);
assertTrue(isRegisteredAfter);
assertThat(branch.toString()).isEqualTo("* *");
assertThat(helloWorld.greet()).isEqualTo("Hello World");
assertThat(branch.toString()).isEqualTo("*");
assertFalse(isRegisteredAfter);
assertThat(branch.toString()).isEqualTo("* * *");
assertThat(isCreated).isFalse();
assertThat(line.length() % 2).isEqualTo(1);
assertThat(sampleServiceException.getMessage()).isEqualTo("Test");
assertTrue(isRegisteredAfter);
assertThat(tree.getBranches()).hasSize(3);
assertThat(isCreated).isTrue();
assertThat(result, is(true)); assertThat(result, is(false));
assertThat(value, is(notNullValue())); assertThat(value.length(), is(64));
assertSame(occurException, e);
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(result, is("other_value"));
assertThat(result, is(true));
assertThat(codeList.asMap(), is(expected));
assertThat(info.getPageUrl(0), is(expectedURL));
assertThat(resultMessages, is(flashMap.get( ResultMessages.DEFAULT_MESSAGES_ATTRIBUTE_NAME)));
assertThat(result, is(Arrays.toString((int[]) input)));
assertThat(cp1, is(sameInstance(cp2)));
assertThat(resultCommand, is(expectedCommand));
assertThat(pathQueryStr.toUriString(), is(expectedUri));
assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(Functions.cut(null, 1), is("")); assertThat(Functions.cut("", 1), is("")); assertThat(Functions.cut("abcdef", 3), is("abc")); assertThat(Functions.cut("abcdef", 7), is("abcdef")); assertThat(Functions.cut("abcdef", 0), is("")); assertThat(Functions.cut("abcdef", -1), is(""));
assertThat(Functions.u("/?:@-._~!$\'()*,;"), is("/?:@-._~!$\'()*,;"));
assertThat(e.getMessage(), is("seed must not be null"));
assertThat(ex.getMessage(), is("date must not be null"));
assertThat(msg, is("MESSAGE_TEXT"));
assertThat(tokenInfo.getTokenName(), containsString( "testTokenAttrByNameSpace"));
assertThat(output, is(false));
assertThat(result, is(true));
assertThat(response.getRedirectedUrl(), is(expectedRedirectURL));
assertThat(MDC.getCopyOfContextMap().size(), is(2)); assertThat(MDC.get("dummyKey"), is("dummyValue")); assertThat(MDC.get("key"), is("value"));
assertThat(startTime, nullValue()); assertThat(count, is(0L)); assertThat(logger.isDebugEnabled(), is(false));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(o, nullValue());
assertThat(mockFilterChain.actualMdcContextMap.size(), is(1)); assertThat(mockFilterChain.actualMdcContextMap.containsKey("key0"), is( true)); assertThat(MDC.getCopyOfContextMap(), is(nullValue()));
assertThat(tokenStore.getSession().getAttribute(tokenStore .createSessionAttributeName(inputToken)), is(notNullValue())); assertThat(tokenStore.getSession().getAttribute(tokenStore .createSessionAttributeName(inputToken)), is(nullValue()));
assertThat(Integer.valueOf(attributesMap.get("page").toString()), is( page)); assertThat(Integer.valueOf(attributesMap.get("size").toString()), is( size)); assertThat(attributesMap.get("sortOrderProperty"), is(nullValue())); assertThat(attributesMap.get("sortOrderDirection"), is(nullValue()));
assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE)); assertThat(getOutput(), is(expected));
assertThat(result, nullValue());
assertThat(previousURL, is(expectedURL));
assertSame(occurException, e);
assertThat(result, is(Arrays.toString((byte[]) input)));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(xTrack, is(notNullValue())); assertThat(xTrack, is("12345678901234567890123456789012")); assertThat(response.getHeader("X-Hoge"), is( "12345678901234567890123456789012")); assertThat((String) request.getAttribute("X-Hoge"), is( "12345678901234567890123456789012"));
assertThat(cp1.equals(cp2), is(true)); assertThat(cp1.equals(cp3), is(true));
assertThat(attributeNames.nextElement().equals( DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE), is(true)); assertThat(attributeNames.hasMoreElements(), is(false)); assertThat(mockResponse.getHeaderNames().isEmpty(), is(true)); assertThat(flashMap.isEmpty(), is(true));
assertThat(result, is("action"));
assertThat(result, is(true));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(Integer.valueOf(attributesMap.get("page").toString()), is( page)); assertThat(Integer.valueOf(attributesMap.get("size").toString()), is( size)); assertThat(attributesMap.get("sortOrderProperty"), is(nullValue())); assertThat(attributesMap.get("sortOrderDirection"), is(nullValue()));
assertThat(logMessage, is( "[START CONTROLLER] TraceLoggingInterceptorController.createForm()")); assertThat(startTime, notNullValue());
assertThat(result, is(true));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(testSetRowsByCodeList.codeListTable.size(), is(14));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(result, is(false));
assertThat(JspTagUtils.toBoolean(null, Boolean.TRUE, null), is(true)); assertThat(JspTagUtils.toBoolean("", Boolean.FALSE, null), is(false));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(output, is(true));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(action, is("action"));
assertThat(mockRequest.getAttribute("exceptionCode").toString(), is( "code001")); assertThat(mockResponse.getHeader("X-Exception-Code"), is("code001")); assertThat((String) flashMap.get("exceptionCode"), is("code001"));
assertThat(Functions.br("\\r\\n"), is("<br />")); assertThat(Functions.br("a\\r\\n"), is("a<br />")); assertThat(Functions.br("\\r\\na"), is("<br />a")); assertThat(Functions.br("\\r\\n\\r\\n"), is("<br /><br />")); assertThat(Functions.br("<br />\\r\\n\\r\\n<br />"), is( "<br /><br /><br /><br />"));
assertThat(result, is(instanceOf(String.class)));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(result.getYear(), is(1970)); assertThat(result.getMonthOfYear(), is(1)); assertThat(result.getDayOfMonth(), is(1)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(ex.getMessage(), is( "exception occurred while initializing"));
assertThat(ex.getCode(), is(code)); assertThat(ex.getMessage(), is(msg));
assertThat(valid, is(false));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(Functions.br("a\\rb\\nc\\r\\nd"), is("a<br />b<br />c<br />d")); assertThat(Functions.br("a\\nb\\r\\nc\\rd"), is("a<br />b<br />c<br />d")); assertThat(Functions.br("a\\r\\nb\\rc\\nd"), is("a<br />b<br />c<br />d"));
assertThat(result, is(true)); assertThat(request.getAttribute( TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME), is(notNullValue()));
assertThat(testTarget.cutValue(null), is(nullValue()));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(result, is("value"));
assertThat(Integer.valueOf(attributesMap.get("page").toString()), is( page)); assertThat(Integer.valueOf(attributesMap.get("size").toString()), is( size)); assertThat(attributesMap.get("sortOrderProperty").toString(), is("id")); assertThat(attributesMap.get("sortOrderDirection").toString(), is( "DESC"));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(ex.getCode(), is(code)); assertThat(ex.getCause(), is(cause));
assertThat(xTrack, is(notNullValue())); assertThat(xTrack.matches("^[a-f0-9]{32}$"), is(true)); assertThat(response.getHeader("X-Hoge"), is(xTrack)); assertThat((String) request.getAttribute("X-Hoge"), is(xTrack));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(tokenStore.getSession().getAttribute(tokenStore .createSessionAttributeName(inputToken)), is(notNullValue())); assertThat(result, is(true)); assertThat(token, is(notNullValue())); assertThat(token.getTokenName(), is("testTokenAttr")); assertThat(token.getTokenKey(), is("111")); assertThat(token.getTokenValue(), is("222"));
assertThat(valid, is(false));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(result, is(true));
assertThat(messages.getType(), is((ResultMessageType) DANGER)); assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(map, is(nullValue()));
assertThat(value, is(notNullValue())); assertThat(value.length(), is(32));
assertThat(result.getMillis(), is(currentTimeMillis));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(result, is(expected));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(cp1.equals(cp2), is(false));
assertSame(occurError, e);
assertThat(result, is(false));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(e.getMessage(), is( "token key generation failed within retry count 5"));
assertThat(cp1.hashCode(), is(cp2.hashCode()));
assertThat(result, is(Arrays.toString((double[]) input)));
assertThat(action, is("action"));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(Functions.u("0"), is("0"));
assertThat(valid, is(false));
assertThat(Functions.br("\\n"), is("<br />")); assertThat(Functions.br("a\\n"), is("a<br />")); assertThat(Functions.br("\\na"), is("<br />a")); assertThat(Functions.br("\\n\\n"), is("<br /><br />")); assertThat(Functions.br("<br />\\n\\n<br />"), is( "<br /><br /><br /><br />"));
assertThat(Functions.link(null), is("")); assertThat(Functions.link(""), is(""));
assertThat(b, is(true));
assertThat(result, is(CodePoints.NOT_FOUND));
assertThat(result, is(CodePoints.NOT_FOUND));
assertThat(result, is(Arrays.toString((char[]) input)));
assertThat(flashMap.isEmpty(), is(true));
assertThat(map, is(notNullValue()));
assertThat(result, is("other_action"));
assertThat(e, is(occurException));
assertThat(result, is("action"));
assertThat(result, is(Arrays.toString((float[]) input)));
assertThat(mdcValueStr, is(userName));
assertThat(impl.asMap().get("language"), is(Locale.ENGLISH .getLanguage())); assertThat(impl.asMap().get("language"), is(Locale.GERMAN .getLanguage())); assertThat(impl.asMap().get("language"), is(Locale.FRENCH .getLanguage())); assertThat(impl.asMap().get("language"), is(Locale.FRENCH .getLanguage()));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(Functions.mapToQuery(map, null), is( "name=Ichiro%20Suzuki&age=10&list=xxx,yyy")); assertThat(Functions.mapToQuery(map, new BeanWrapperImpl(new Person())), is("name=Ichiro%20Suzuki&age=10&list=xxx,yyy"));
assertThat(info.getPageUrl(0), is(expectedURL));
assertThat(firstURL, is(expectedURL));
assertThat(path, is(pathTmpl));
assertThat(actualQuery, is(expectedQuery.toString()));
assertThat(resultCommand, is(expectedCommand));
assertThat(mdcValueStr, is(nullValue()));
assertThat(output, is(true));
assertThat(tokenInfo, is(notNullValue()));
assertThat(result, is(expct));
assertThat(result, is(Arrays.toString((boolean[]) input)));
assertThat(actualModleAndView, is(nullValue()));
assertThat(mdcValueStr, is(userName));
assertThat(Functions.u("+"), is("%2B")); assertThat(Functions.u("="), is("%3D")); assertThat(Functions.u("&"), is("%26"));
assertThat(Functions.u("a"), is("a"));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(b, is(false));
assertThat(valid, is(false));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(session.getAttribute( HttpSessionTransactionTokenStore.TOKEN_HOLDER_SESSION_ATTRIBUTE_PREFIX + token.getTokenName() + token.getTokenKey()), is( nullValue()));
assertThat(actuals, is(nullValue()));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(output, is(false));
assertThat(Functions.hjs(null), is("")); assertThat(Functions.hjs(""), is("")); assertThat(Functions.hjs("a"), is("a")); assertThat(Functions.hjs("\'"), is("\\\\&#39;"));
assertFalse(RequestUtils.isAjaxRequest(request));
assertThat(tokenInfo, is(notNullValue()));
assertThat(ex.getMessage(), is("date must not be null"));
assertThat(messages.getType(), is((ResultMessageType) INFO)); assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(output, is(false));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(0)); assertThat(result.getMinuteOfHour(), is(0)); assertThat(result.getSecondOfMinute(), is(0)); assertThat(result.getMillisOfSecond(), is(0));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(result, is(Arrays.toString((short[]) input)));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(result, is(""));
assertThat(cp1.equals(cp2), is(false));
assertThat(result, is(false));
assertThat(output, is(false));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(valid, is(false));
assertThat(mockFilterChain.actualMdcPutValue, is( "12345678901234567890123456789012"));
assertThat(value, is("value"));
assertThat(output, is(false));
assertThat(tag.createTagWriter(), is(notNullValue()));
assertThat(result, is("value"));
assertThat(output, is(true));
assertThat(response.getRedirectedUrl(), is(expectedRedirectURL));
assertThat(xTrack, is(notNullValue())); assertThat(xTrack.matches("^[a-f0-9]{32}$"), is(true)); assertThat(response.getHeader("X-Track"), is(xTrack)); assertThat((String) request.getAttribute("X-Track"), is(xTrack));
assertThat(xTrackMDCPutFilter.getMDCKey(null, null), is("X-Hoge"));
assertThat(e, is(occurException));
assertThat(testSetColumns.codeListTable.size(), is(14));
assertThat(converter.convert(new LackingGetterForm8("aaa", "bbb")), is( Collections.singletonMap("value1", "aaa")));
assertThat(endNumBig.getBegin(), is(4)); assertThat(endNumBig.getEnd(), is(6));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(messages.getType(), is((ResultMessageType) ERROR));
assertThat(result, is(1));
assertThat(result, is("other_action"));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(messages.isNotEmpty(), is(false));
assertThat(Functions.mapToQuery(null, null), is(""));
assertThat(msg, is("MESSAGE_TEXT"));
assertThat(result, is(Arrays.asList(msg1, msg2)));
assertThat(xTrackMDCPutFilter.getMDCKey(null, null), is("X-Track"));
assertThat(mdcKeyStr, is("USER"));
assertThat(result, is("action"));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(b, is(true));
assertThat(getMaxCountNum, is(maxDisplayCount));
assertThat(result, is(true));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(actualExceptionCode1, is("testcode001")); assertThat(actualExceptionCode2, is("testcode002"));
assertThat(e.getMessage(), is("token must not be null"));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(JspTagUtils.toBoolean("true", false, null), is(true)); assertThat(JspTagUtils.toBoolean("TRUE", false, null), is(true)); assertThat(JspTagUtils.toBoolean("TrUe", false, null), is(true));
assertThat(token.getTokenName(), is("a"));
assertThat(messages.getType(), is((ResultMessageType) SUCCESS)); assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(valid, is(true));
assertThat(e.getMessage(), is( "The value of field1 must be either true or false.")); assertThat(e.getMessage(), is( "The value of field2 must be either true or false."));
assertThat(resultCommand, is(expectedCommand));
assertThat(nextURL, is(expectedURL));
assertThat(cp1.equals(cp2), is(false));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(output, is(true));
assertThat(result.getYear(), is(1970)); assertThat(result.getMonthOfYear(), is(1)); assertThat(result.getDayOfMonth(), is(1)); assertThat(result.getHourOfDay(), is(23)); assertThat(result.getMinuteOfHour(), is(7)); assertThat(result.getSecondOfMinute(), is(11)); assertThat(result.getMillisOfSecond(), is(100));
assertThat(e, is(occurException)); assertThat(MDC.getCopyOfContextMap(), is(nullValue()));
assertThat(actualLogMessage, is(expectedLogMessage));
assertThat(ex.getMessage(), is("public default constructor not found"));
assertThat(map.size(), is(3)); assertThat(map, hasEntry("criteria.name", "yamada")); assertThat(map, hasEntry("criteria.age", "20")); assertThat(map, hasEntry("rememberCriteria", "true")); assertThat(form.getCriteria(), is(notNullValue())); assertThat(form.getCriteria().getName(), is("yamada")); assertThat(form.getCriteria().getAge(), is(20)); assertThat(form.isRememberCriteria(), is(true));
assertThat(Functions.query(null), is("")); assertThat(Functions.query(""), is("")); assertThat(Functions.query("aaaa"), is("")); assertThat(Functions.query(1), is("")); assertThat(Functions.query(1.0), is("")); assertThat(Functions.query(1L), is("")); assertThat(Functions.query(new Date()), is("")); assertThat(Functions.query(Locale.getDefault()), is(""));
assertThat(e.getMessage(), is("codeListTable is not initialized!"));
assertThat(endNumBig.getBegin(), is(5)); assertThat(endNumBig.getEnd(), is(4));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(Functions.br("\\r"), is("<br />")); assertThat(Functions.br("a\\r"), is("a<br />")); assertThat(Functions.br("\\ra"), is("<br />a")); assertThat(Functions.br("\\r\\r"), is("<br /><br />")); assertThat(Functions.br("<br />\\r\\r<br />"), is( "<br /><br /><br /><br />"));
assertThat(converter.convert(null), is( (Map<String, String>) Collections.EMPTY_MAP));
assertThat(resultCommand, is(expectedCommand));
assertThat(valid, is(false));
assertThat(result.size(), is(0));
assertThat(msg, is("MESSAGE_TEXT")); assertThat(logger.isDebugEnabled(), is(false));
assertThat(mockRequest.getAttribute("exceptionCode").toString(), is( "defaultCode")); assertThat(mockResponse.getHeader("X-Exception-Code"), is( "defaultCode")); assertThat(resultMessages, is(flashMap.get( ResultMessages.DEFAULT_MESSAGES_ATTRIBUTE_NAME)));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(testTarget.getExceptionLogger(), is(mockExceptionLogger));
assertThat(map, is(notNullValue()));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(sw.getBuffer().toString(), is(expected)); assertThat(result, is(0));
assertThat(JspTagUtils.toBoolean("false", true, null), is(false)); assertThat(JspTagUtils.toBoolean("FALSE", true, null), is(false)); assertThat(JspTagUtils.toBoolean("FaLsE", true, null), is(false));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(output, is(false));
assertThat(e, is(occurException));
assertThat(resultCommand, is(expectedCommand));
assertThat(result, is(false));
assertThat(startTime, nullValue()); assertThat(count, is(0L));
assertThat(query, is(queryTmpl));
assertThat(output, is(false));
assertThat(map, is(notNullValue()));
assertSame(occurException, e);
assertThat(sw.getBuffer().toString(), is("")); assertThat(result, is(0));
assertThat(msg, is("MESSAGE_TEXT"));
assertThat(ex.getCode(), is(code)); assertThat(ex.getMessage(), is(msg)); assertThat(ex.getCause(), is(cause));
assertThat(e, is(occurException));
assertThat(flashMap, is(nullValue()));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(map.size(), is(2)); assertThat(map, hasEntry("pre.name", "yamada")); assertThat(map, hasEntry("pre.age", "20"));
assertThat(response.getHeader("Cache-Control"), is( "private,no-store,no-cache,must-revalidate")); assertThat(response.getHeader("Pragma"), is("no-cache")); assertThat(response.getHeader("Expires"), is( "Thu, 01 Jan 1970 00:00:00 GMT"));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(map.size(), is(2)); assertThat(map, hasEntry("name", "yamada")); assertThat(map, hasEntry("age", "20")); assertThat(form.getName(), is("yamada")); assertThat(form.getAge(), is(20));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(output, is(false));
assertThat(result, is(true));
assertThat(testSetRows.codeListTable.size(), is(14));
assertThat(lastURL, is(expectedURL));
assertThat(ex.getMessage(), is("date must not be null"));
assertThat(Functions.u(" "), is("%20"));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(endNumBig.getBegin(), is(0)); assertThat(endNumBig.getEnd(), is(6));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(e.getMessage(), is("token must not be null"));
assertThat(output, is(true));
assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue()));
assertThat(result, is(false));
assertThat(msg, is("MESSAGE_TEXT"));
assertThat(value, is(notNullValue())); assertThat(value.length(), is(32));
assertThat(output, is(true));
assertThat(result.getYear(), is(2012)); assertThat(result.getMonthOfYear(), is(9)); assertThat(result.getDayOfMonth(), is(3)); assertThat(result.getHourOfDay(), is(0)); assertThat(result.getMinuteOfHour(), is(0)); assertThat(result.getSecondOfMinute(), is(0)); assertThat(result.getMillisOfSecond(), is(0));
assertThat(e, is(occurException)); assertThat(e, is(occurException));
assertThat(output, is("TransactionTokenInfo [tokenName=" + tokenName + ", transitionType=" + TransactionTokenType.END + "]"));
assertTrue(RequestUtils.isAjaxRequest(request));
assertThat(getOutput(), is(expected));
assertThat(result, is(Arrays.toString((long[]) input)));
assertThat(result, is(Arrays.toString((Object[]) input)));
assertThat(map.size(), is(4)); assertThat(map, hasEntry("list", "")); assertThat(map, hasEntry("array", "")); assertThat(map, hasEntry("nestedForm.list", "")); assertThat(map, hasEntry("nestedForm.array", ""));
assertThat(output, is(false));
assertThat(resultCommand, is(expectedCommand));
assertThat(result.size(), is(0));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(map.size(), is(3)); assertThat(map, hasEntry("bool1", "true")); assertThat(map, hasEntry("bool2", "false")); assertThat(map, hasEntry("bool3", ""));
assertThat(o, notNullValue());
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(logger.isDebugEnabled(), is(false));
assertThat(o, nullValue());
assertThat(currentNum, is(5));
assertThat(result, is(true));
assertThat(mockRequest.getAttributeNames().hasMoreElements(), is( false));
assertThat(result, is(Arrays.toString((String[]) input)));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(getOutput(), is(expected)); assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE));
assertThat(messages.getType(), is((ResultMessageType) ERROR)); assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(e.getMessage(), is("token must not be null"));
assertThat(messages.getType(), is((ResultMessageType) WARN)); assertThat(messages.getList(), is(Arrays.asList(msg1, msg2)));
assertThat(Functions.mapToQuery(map, null), is(""));
assertThat(constructor.isAccessible(), is(false)); assertThat(constructor.newInstance(), notNullValue());
assertThat(xTrack, is(notNullValue())); assertThat(xTrack, is("12345678901234567890123456789012")); assertThat(response.getHeader("X-Track"), is( "12345678901234567890123456789012")); assertThat((String) request.getAttribute("X-Track"), is( "12345678901234567890123456789012"));
assertThat(result, is("action"));
assertThat(valid, is(false));
assertThat(Functions.br(null), is("")); assertThat(Functions.br(""), is("")); assertThat(Functions.br("abcde\\nabcdf"), is("abcde<br />abcdf"));
assertThat(xTrack, is(notNullValue())); assertThat(xTrack, is("hoge")); assertThat(response.getHeader("X-Track"), is("hoge")); assertThat((String) request.getAttribute("X-Track"), is("hoge"));
assertThat(actualExceptionLevel, is(expectedExceptionLevel));
assertThat(store.getTransactionTokenInfo(handlerMethod), is( notNullValue()));
assertThat(MessageBus.listens(Message1.class, listener1), is(true)); assertThat(MessageBus.listens(Message1.class, listener2), is(false));
assertEquals(ValidateUtil.isNull(null), true); assertEquals(ValidateUtil.isNull(""), true); assertEquals(ValidateUtil.isNull("somestr"), false);
assertEquals(TimeZone.getTimeZone(timeZoneStr2), TimeZoneUtil.parseTimeZoneId(timeZoneStr1));
assertEquals(default_locale, locale_empty);
assertEquals(jo.get("count"),1); assertEquals(response.getStatus(), STATUS200);
assertEquals(RestApiResponseHandler.getResponseOk().getStatus(), 200); assertEquals(RestApiResponseHandler.getResponseOk("String for Test").getStatus() , (Response.ok("String for test").cacheControl(cc).build().getStatus())); assertEquals(RestApiResponseHandler.getResponseOk(jo).getStatus() , Response.ok(jo.toString()).cacheControl(cc).build().getStatus());
assertEquals(RestApiResponseHandler.getResponseInputJsonFormatError(new InputJSONFormatErrorException(context, errorMessage, line, column), Locale.US).getEntity().toString(), "{\\"error\\" : \\""+"CWSCV6012E: Format error at line 3 column 5 in the input JSON strings for API: Create/Update Policy."+"\\"}");
assertEquals(RestApiResponseHandler.getResponseCreatedOk("Create OK").getStatus(), HttpServletResponse.SC_CREATED);
assertEquals(response.getStatus(), STATUS200);
assertEquals(cLocale, LocaleUtil.getLocale(request));
assertEquals(RestApiResponseHandler.getResponseOk().getStatus(), HttpServletResponse.SC_OK); assertEquals(RestApiResponseHandler.getResponseOk("OK messages").getStatus() , (Response.ok("OK messages").cacheControl(cc).build().getStatus())); assertEquals(RestApiResponseHandler.getResponseOk(json_obj).getStatus() , Response.ok(json_obj.toString()).cacheControl(cc).build().getStatus());
assertEquals("NA", ConfigManager.get("noExisting", "NA")); assertEquals("catalog.json", ConfigManager.get("catalogFile")); assertEquals(1, ConfigManager.getInt("noExisting", 1)); assertEquals(10000, ConfigManager.getInt("couchdbTimeout")); assertEquals(1L, ConfigManager.getLong("noExisting", 1)); assertEquals(10000L, ConfigManager.getLong("couchdbTimeout")); assertEquals(false, ConfigManager.getBoolean("noExisting", false));
assertEquals(RestApiResponseHandler.getResponseError(new Exception("Internal Server error")).getEntity().toString(), "{\\"error\\" : \\""+"Internal Server error"+"\\"}");
assertEquals(response.getStatus(), STATUS200);
assertEquals(MessageUtil.getMessageString("RestResponseErrorMsg_app_not_found_error"), "CWSCV3006E: The application is not found: {0}"); assertEquals(MessageUtil.getMessageString("RestResponseErrorMsg_app_not_found_error", Locale.GERMAN), "CWSCV3006E: Die Anwendung wurde nicht gefunden: {0}");
assertEquals(response.getStatus(), STATUS200);
assertNotNull(policyId); assertEquals(response.getStatus(), STATUS201); assertEquals(response.getStatus(), STATUS200); assertEquals(response.getStatus(), STATUS200);
assertThat(expected.getMessage(), is("The system command \'TEST_COMMAND\' is not supported on this context."));
assertThat(result, is(interceptorContext));
assertThat(systemCommander.getCommandStatus(commandId), is(systemCommandStatus));
assertThat(payload.getValueType(), is(OBJECT)); assertThat(payload.toString(), hasJsonPath("$.myString", equalTo("test")));
assertThat(expected.getMessage(), is( "Class \'uk.gov.justice.services.core.mapping.SchemaIdMappingObserverTest$DodgySchemaIdMapper\' " + "annotated with @SchemaIdMapper " + "should implement the \'uk.gov.justice.services.core.mapping.MediaTypeToSchemaIdMapper\' interface"));
assertThat(objectFactory.cdiInstanceResolver(), is(notNullValue()));
assertThat(errorMessage, is("Access Control failed for json envelope \'9132d439-c797-4483-a961-5eb640c55fe7\' of type \'sjp.query.cases-referred-to-court\'. Reason: reason"));
assertThat(metadata.streamId().isPresent(), is(true)); assertThat(metadata.streamId().get(), equalTo(UUID.fromString(UUID_STREAM_ID)));
assertThat(envelopeFrom(metadata, payloadAsJsonValue).payload(), equalTo(payloadAsJsonValue));
assertThat(exceptionArgumentCaptor.getValue(), is(envelopeValidationException));
assertThat(envelopeInspector.getMetadataFor(jsonEnvelope), is(metadata));
assertThat(expected.getMessage(), is("Failed to call method \'aPrivateMethod()\' on " + dummyHandler.getClass().getName() + ". Is the method public?")); assertThat(expected.getCause(), is(instanceOf(IllegalAccessException.class)));
assertThat(allowAllAccessController.checkAccessPolicyFor("command", jsonEnvelope).isPresent(), is(false));
assertThat(aggregate, notNullValue()); assertThat(aggregate.recordedEvents(), hasSize(2)); assertThat(aggregate.recordedEvents().get(0), equalTo(eventA)); assertThat(aggregate.recordedEvents().get(1), equalTo(eventB));
assertThat(json, is(EXPECTED_JSON));
assertThat(metadata.source().isPresent(), is(true)); assertThat(metadata.source().get(), equalTo(SOURCE_NAME));
assertThat(actualEnvelope, equalTo(envelope));
assertThat(exception.getMessage(), is("Failed to connect to queue: \'queue-name\', when requesting queue size."));
assertThat(errorMessage, is("Json validation failed with 1 violation(s): error message. Errors: [#: error message]. Violated schema id: \'schema id\'. Location: \'schemaLocation\'"));
assertThat(expected.getCause(), is(mBeanRegistrationException)); assertThat(expected.getMessage(), is("Failed to unregister MBean with object name \'AnObjectName\'"));
assertThat(mediaTypes.get().getRequestMediaType().get(), is(requestMediaType)); assertThat(mediaTypes.get().getResponseMediaType().get(), is(responseMediaType));
assertThat(successfulResults.size(), is(2)); assertThat(successfulResults, hasItem(suspensionResult_2)); assertThat(successfulResults, hasItem(suspensionResult_4));
assertThat(blacklistedCommands.size(), is(3)); assertThat(blacklistedCommands, hasItem(new SystemCommand_1())); assertThat(blacklistedCommands, hasItem(new SystemCommand_2())); assertThat(blacklistedCommands, hasItem(new SystemCommand_3()));
assertThat(resultA, is(sameInstance(resultB)));
assertThat(objectEnvelope.payload(), isA(JsonValue.class)); assertThat(objectEnvelope.payload().toString(), hasJsonPath("$.myString", equalTo("newTest")));
assertThat(envelope, is(sameInstance(jsonEnvelope)));
assertThat(mediaTypeProvider.getRequestMediaType(actionName), is(empty()));
assertThat(returnedPayload.getValueType(), is(OBJECT)); assertThat(returnedPayload.toString(), hasJsonPath("$.myString", equalTo("newTest")));
assertThat(dispatcher1, is(not(sameInstance(dispatcher2))));
assertThat(viewStoreJdbcDataSourceProvider.getDataSource(), is(dataSource));
assertThat(expected.getMessage(), is("Cannot run system command \'TEST_COMMAND\'. A previous call to that command is still in progress."));
assertThat(em, equalTo(entityManager));
assertThat(stateChangedEvent.getCommandId(), is(commandId)); assertThat(stateChangedEvent.getSystemCommand(), is(suspensionCommand)); assertThat(stateChangedEvent.getCommandState(), is(COMMAND_COMPLETE)); assertThat(stateChangedEvent.getStatusChangedAt(), is(stateChangedAt)); assertThat(stateChangedEvent.getMessage(), is("SUSPEND completed successfully for [Suspendable_1, Suspendable_2]"));
assertThat(asyncHandlerInstance().toString(), notNullValue());
assertThat(queueSize, is(5));
assertThat(systemCommander.call("TEST_COMMAND"), is(commandId));
assertThat(subscriptionsDescriptor.getSubscriptions().get(0), is(subscription1)); assertThat(subscriptionsDescriptor.getSubscriptions().get(1), is(subscription2)); assertThat(subscriptionsDescriptor.getSubscriptions().get(2), is(subscription3));
assertThat(defaultServerPortProvider.getDefaultPort(), is(defaultPort));
assertThat(jmxParameters.getCredentials().isPresent(), is(false)); assertThat(environment.isEmpty(), is(true));
assertThat(jmsEnvelopeSender_1, is(not(sameInstance(jmsEnvelopeSender_2))));
assertThat(body, hasJsonPath("$.validationErrors.message", equalTo("#: Test Json")));
assertThat(metadata.clientCorrelationId().isPresent(), is(true)); assertThat(metadata.clientCorrelationId().get(), equalTo(UUID_CLIENT_CORRELATION));
assertThat(System.getProperty(DEFAULT_PORT), is(nullValue())); assertThat(defaultServerPortProvider.getDefaultPort(), is("8080"));
assertThat(eventSourceDefinition.getName(), is("my-context-service-event-store")); assertThat(eventSourceDefinition.isDefault(), is(true)); assertThat(location.getDataSource().get(), is("java:/app/my-context-service/DS.eventstore")); assertThat(location.getJmsUri(), is("JMS URI not used")); assertThat(location.getRestUri(), is(empty()));
assertThat(expected.getMessage(), is("Failed to create JMX service url using host \'{}\\\\\' and port 9009")); assertThat(expected.getCause(), is(instanceOf(MalformedURLException.class)));
assertThat(envelopeFrom(metadata, payloadAsJsonObject).metadata(), equalTo(metadata));
assertThat(event.metadata().id(), notNullValue()); assertThat(event.metadata().name(), equalTo(TEST_NAME)); assertThat(event.metadata().causation().size(), equalTo(2)); assertThat(event.metadata().causation().get(0), equalTo(OLD_CAUSATION_ID)); assertThat(event.metadata().causation().get(1), equalTo(COMMAND_UUID));
assertThat(result, nullValue());
assertThat(systemJdbcDataSourceProvider.getDataSource(), is(dataSource));
assertThat(systemCommanderClient.getRemote(contextName), is(systemCommanderMBean));
assertThat(exception.getMessage(), is("The named destination must be a Queue: \'topic-name\', unable to get the size of a Topic."));
assertThat(envelopeFrom(metadata, payloadAsJsonArray).payloadAsJsonArray(), equalTo(payloadAsJsonArray));
assertThat(aggregate, notNullValue()); assertThat(aggregate.recordedEvents(), empty());
assertThat(envelopeInspector.getActionNameFor(jsonEnvelope), is(actionName));
assertThat(viewStoreDataSourceNameProvider.getDataSourceName(), is("java:/DS.framework"));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( CustomAdapterAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("CUSTOM_ADAPTER"));
assertThat(e.getMessage(), is(errorMessage)); assertThat(e.getCause(), is(validationException));
assertThat(systemCommandDetails.size(), is(3)); assertThat(systemCommandDetails, hasItem(systemCommandDetails_1)); assertThat(systemCommandDetails, hasItem(systemCommandDetails_2)); assertThat(systemCommandDetails, hasItem(systemCommandDetails_3));
assertThat(envelopeRecordingInterceptor.firstRecordedEnvelope(), is(dispatchedEnvelope)); assertThat(envelopeRecordingHandler.firstRecordedEnvelope(), is(dispatchedEnvelope));
assertThat(mediaTypeProvider.getRequestMediaType(actionName), is(empty()));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( CustomServiceFieldLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("CUSTOM_SERVICE_NAME"));
assertThat(differentTestObjectEnvelope.payload(), nullValue());
assertThat(expected.getCause(), is(namingException)); assertThat(expected.getMessage(), is("Failed to lookup ViewStore DataSource using JNDI name \'java:/DS.framework\'"));
assertThat(objectFactory.blacklistedCommandsScanner(), is(notNullValue()));
assertThat(streamSpy.streamClosed(), is(true));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( FrameworkComponentClassLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("CUSTOM_NAME_ABC"));
assertThat(students.size(), is(2)); assertThat(students.get(0).getName(), is("Fred")); assertThat(students.get(0).getAge(), is(63)); assertThat(students.get(1).getName(), is("Bert")); assertThat(students.get(1).getAge(), is(59));
assertThat(systemCommandLocator.forName("command_2"), is(of(systemCommand_2)));
assertThat(emptyBlackListedCommands.getBlackListedCommands().isEmpty(), is(true));
assertThat(eventSourceDefinitions.size(), is(3)); assertThat(eventSourceDefinition_1.getName(), is("default")); assertThat(eventSourceDefinition_1.isDefault(), is(true)); assertThat(eventSourceDefinition_1.getLocation(), is(notNullValue())); assertThat(eventSourceDefinition_1.getLocation().getJmsUri(), is("jms:topic:default"));
assertThat(handlerRegistry1, is(not(sameInstance(handlerRegistry2)))); assertThat(getLoggerFieldFrom(handlerRegistry1), is(notNullValue())); assertThat(getLoggerFieldFrom(handlerRegistry2), is(notNullValue()));
assertThat(stackTrace.startsWith(stackTracePrefix), is(true));
assertThat(urls.size(), is(1)); assertThat(urls.get(0).toString(), endsWith("/yaml/subscriptions-descriptor.yaml"));
assertThat(event.getEventName(), equalTo(EVENT_NAME));
assertThat(expected.getMessage(), is( "Class \'uk.gov.justice.services.core.mapping.ActionNameToMediaTypesMappingObserverTest$DodgyMediaTypesMapper\' " + "annotated with @MediaTypesMapper " + "should implement the \'uk.gov.justice.services.core.mapping.ActionNameToMediaTypesMapper\' interface"));
assertThat(contextNameProvider.getContextName(), is("somecontext"));
assertThat(envelopeSenderSelector.getEnvelopeSender(), is(jmsSender));
assertThat(actualTextMessage, equalTo(textMessage));
assertThat(expected.getCause(), is(namingException)); assertThat(expected.getMessage(), is("Failed to lookup System DataSource using JNDI name \'java:/app/framework/DS.system\'"));
assertThat(methods, notNullValue()); assertThat(methods, IsCollectionWithSize.hasSize(3));
assertThat(new HandlerMethod(handler, method(handler, "handles"), JsonEnvelope.class).isDirect(), is(true));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( DirectAdapterAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("QUERY_API"));
assertThat(MDC.get(REQUEST_DATA), nullValue()); assertThat(MDC.get(REQUEST_DATA), nullValue());
assertThat(dispatcher1, is(not(sameInstance(dispatcher2))));
assertThat(storedCommand.getEnvelopeId(), is(envelopeId)); assertThat(storedCommand.getCommandJsonEnvelope(), is(envelopeJson)); assertThat(storedCommand.getDestination(), is(destinationName)); assertThat(storedCommand.getDateReceived(), is(now));
assertThat(jsonEnvelope, isA(JsonEnvelope.class));
assertThat(mediaTypeProvider.getResponseMediaType(actionName), is(empty()));
assertThat(urls.size(), is(1)); assertThat(urls.get(0).toString(), endsWith("/yaml/event-sources.yaml"));
assertThat(commandApiSuspender.shouldUnsuspend(), is(true));
assertThat(subscriptionsDescriptorParser, is(instanceOf(SubscriptionsDescriptorParser.class)));
assertThat(result, sameInstance(envelope));
assertThat(expected.getMessage(), is("No JMX bean found with name \'people-system-command-handler-mbean\'. Is your context name of \'people\' correct?"));
assertThat(expected.getMessage(), is("Invalid handler method \'invalidMissingParameterHandlerMethod\' on class \'uk.gov.justice.services.jmx.command.TestCommandHandler\'. Method should have 2 parameters. First of type \'uk.gov.justice.services.jmx.api.command.SystemCommand\' and second of type \'java.util.UUID\'."));
assertThat(returnedEnvelope.metadata().id(), is(id)); assertThat(returnedEnvelope.metadata().name(), is(name)); assertThat(returnedEnvelope.metadata().userId(), contains(sysUserId.toString())); assertThat(returnedEnvelope.payloadAsJsonObject().getInt("numName"), is(123));
assertThat(dispatcherFactory.createNew(), instanceOf(Dispatcher.class));
assertThat(objectFactory.systemCommandHandlerProxyFactory(), is(notNullValue()));
assertThat(MDC.get(REQUEST_DATA), isJson(allOf( withJsonPath("$.serviceContext", equalTo("exampleService")) ))); assertThat(MDC.get(REQUEST_DATA), nullValue());
assertThat(producer.envelopeValidationExceptionHandler(), instanceOf(RethrowingValidationExceptionHandler.class));
assertThat(contextNameProvider.getContextName(), is(appName));
assertThat(envelopeFrom(metadata, payloadAsJsonString).payloadAsJsonString(), equalTo(payloadAsJsonString));
assertThat(testAllEventsHandler.firstRecordedEnvelope(), nullValue());
assertThat(accessControlService.checkAccessControl("command", jsonEnvelope), is(sameInstance(accessControlViolation)));
assertThat(jmsEnvelopeSender, is(instanceOf(ShutteringJmsEnvelopeSender.class)));
assertThat(dispatcher1, is(notNullValue())); assertThat(dispatcher1, is(sameInstance(dispatcher2)));
assertThat(suspensionResult.getCommandId(), is(commandId)); assertThat(suspensionResult.getCommandState(), is(COMMAND_COMPLETE)); assertThat(suspensionResult.getSystemCommand(), is(suspensionCommand)); assertThat(suspensionResult.getMessage(), is("Command API suspended with no errors")); assertThat(suspensionResult.getSuspendableName(), is("CommandApiSuspender")); assertThat(suspensionResult.getException(), is(empty()));
assertThat(result, is(instance));
assertThat(mediaTypeProvider.getRequestMediaType(actionName), is(of(requestMediaType)));
assertThat(cdiInstanceResolver.getInstanceOf(beanClass, beanManager), is(systemCommandScanner));
assertThat(expected.getMessage(), is("Invalid handler method \'invalidNoCommandIdMethod\' on class \'uk.gov.justice.services.jmx.command.TestCommandHandler\'. Method should have 2 parameters. First of type \'uk.gov.justice.services.jmx.api.command.SystemCommand\' and second of type \'java.util.UUID\'."));
assertThat(System.getProperty(ACCESS_CONTROL_DISABLED_PROPERTY), is(nullValue())); assertThat(accessControlService.checkAccessControl("command", jsonEnvelope), is(sameInstance(accessControlViolation)));
assertThat(e.getMessage(), is("Exception while sending envelope with name command.test"));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( AdapterAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("EVENT_LISTENER"));
assertThat(expected.getMessage(), is("Metadata not set in the envelope."));
assertThat(jmsEnvelopeSender, is(instanceOf(DefaultJmsEnvelopeSender.class)));
assertThat(response.getStatus(), is(FORBIDDEN.getStatusCode())); assertThat(response.getEntity(), notNullValue()); assertThat(response.getEntity().toString(), hasJsonPath("$.error", equalTo(TEST_ERROR_MESSAGE)));
assertThat(shutteringExecutorNames.size(), is(4)); assertThat(shutteringExecutorNames, hasItem("Executor name 1")); assertThat(shutteringExecutorNames, hasItem("Executor name 2")); assertThat(shutteringExecutorNames, hasItem("Executor name 3")); assertThat(shutteringExecutorNames, hasItem("Executor name 4"));
assertThat(result, nullValue());
assertThat(jmsEnvelopeSender, is(instanceOf(ShutteringJmsEnvelopeSender.class)));
assertThat(jmsMessageLoggerHelper.toJmsTraceString(message), containsString("Could not find: _metadata in message"));
assertThat(blacklistedCommandsFilter.isSystemCommandAllowed(systemCommand_1.getName(), blacklistedCommands), is(false)); assertThat(blacklistedCommandsFilter.isSystemCommandAllowed(systemCommand_2.getName(), blacklistedCommands), is(false)); assertThat(blacklistedCommandsFilter.isSystemCommandAllowed(systemCommand_3.getName(), blacklistedCommands), is(false)); assertThat(blacklistedCommandsFilter.isSystemCommandAllowed("SOME_OTHER_COMMAND", blacklistedCommands), is(true));
assertThat(mediaType.getType(), is("application")); assertThat(mediaType.getSubtype(), is("vnd.example.command.travel-through-wormhole+json"));
assertThat(commandMBeanNameProvider.create(contextName), is(objectName));
assertThat(expected.getMessage(), is("IOException thrown when calling method \'anExceptionThrowingMethod()\' on " + dummyHandler.getClass().getName())); assertThat(expected.getCause(), is(instanceOf(IOException.class)));
assertThat(objectFactory.systemCommandScanner(), is(notNullValue()));
assertThat(systemDataSourceNameProvider.getDataSourceName(), is("java:/app/framework/DS.system"));
assertThat(resultPojo.getPayloadId(), is(payloadId)); assertThat(resultPojo.getPayloadName(), is(payloadName)); assertThat(resultPojo.getPayloadVersion(), is(payloadVersion));
assertThat(anotherSystemCommanderClient, is(notNullValue()));
assertThat(objectFactory.systemCommandProxyResolver(), is(notNullValue()));
assertThat(objectEnvelope, nullValue());
assertThat(envelope, instanceOf(DefaultJsonEnvelope.class)); assertThat(envelope.metadata(), is(metadata)); assertThat(envelope.payload(), is(payload));
assertThat(differentTestObjectEnvelope.payload(), isA(DifferentTestObject.class));
assertThat(event.getClazz(), equalTo(CLASS));
assertThat(name, is("example.command.travel-through-wormhole"));
assertThat(suspendables.size(), is(3)); assertThat(suspendables, hasItem(shutteringExecutor_1)); assertThat(suspendables, hasItem(shutteringExecutor_2)); assertThat(suspendables, hasItem(shutteringExecutor_3));
assertThat(metadata.id(), equalTo(UUID.fromString(UUID_ID)));
assertThat(response.getStatus(), is(BAD_REQUEST.getStatusCode())); assertThat(response.getEntity(), notNullValue()); assertThat(response.getEntity().toString(), hasJsonPath("$.error", equalTo(TEST_ERROR_MESSAGE)));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( ServiceComponentClassLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("COMMAND_HANDLER"));
assertThat(expected.getCause(), is(nullPointerException));
assertThat(jmsEnvelopeSender_1, is(not(sameInstance(jmsEnvelopeSender_2))));
assertThat(schemaIdOptional.isPresent(), is(false));
assertThat(expected.getMessage(), is("Failed to find SystemCommandHandler for command \'This command does not exist\'"));
assertThat(interceptorContext, instanceOf(DefaultInterceptorContext.class));
assertThat(metadata.previousEventNumber().isPresent(), is(true)); assertThat(metadata.previousEventNumber().get(), equalTo(PREVIOUS_EVENT_NUMBER_VALUE));
assertThat(metadata.position().isPresent(), is(true)); assertThat(metadata.position().get(), equalTo(STREAM_VERSION));
assertThat(objectFactory.blacklistedCommandsFilter(), is(notNullValue()));
assertThat(systemCommandStatus.getCommandId(), is(commandId)); assertThat(systemCommandStatus.getSystemCommandName(), is(systemCommand.getName())); assertThat(systemCommandStatus.getCommandState(), is(commandState)); assertThat(systemCommandStatus.getStatusChangedAt(), is(statusChangedAt)); assertThat(systemCommandStatus.getMessage(), is(message));
assertThat(envelopeFrom(metadata, payload).metadata(), equalTo(metadata));
assertThat(envelopeFrom(metadata, payloadAsJsonNumber).payloadAsJsonNumber(), equalTo(payloadAsJsonNumber));
assertThat(mBeanServer, is(notNullValue()));
assertThat(resultA, is(not(sameInstance(resultB))));
assertThat(expected.getMessage(), is("Failed to run System Command \'TEST_COMMAND\'. Caused by uk.gov.justice.services.jmx.api.SystemCommandException: Ooops")); assertThat(expected.getServerStackTrace(), is(stackTrace)); assertThat(expected.getCause(), is(nullValue()));
assertThat(getValueOfField(systemCommanderClient, "jmxConnector", JMXConnector.class), is(jmxConnector)); assertThat(getValueOfField(systemCommanderClient, "mBeanConnector", MBeanConnector.class), is(mBeanConnector));
assertThat(jmxConnectorFactory.createJmxConnector(jmxParameters), is(jmxConnector));
assertThat(expected.getMessage(), is("No SystemCommand found with id 08fe90e9-c35b-4850-9af2-e5e743f6736e"));
assertThat(metadata.causation(), equalTo(ImmutableList.of(UUID.fromString(UUID_CAUSATION))));
assertThat(metadata.sessionId().isPresent(), is(true)); assertThat(metadata.sessionId().get(), equalTo(UUID_SESSION_ID));
assertThat(new HandlerMethod(new SynchronousCommandHandler(), method(handler, "handles"), JsonEnvelope.class).isDirect(), is(false));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( ServiceComponentClassLevelAnnotationMethod.class.getDeclaredMethods()[0])), equalTo("QUERY_API"));
assertThat(metadata.version().isPresent(), is(true)); assertThat(metadata.version().get(), equalTo(STREAM_VERSION));
assertThat(mBeanConnector.connect(contextName, mBeanInterface, jmxConnector), is(systemCommanderMBean));
assertThat(componentNameExtractor.hasComponentAnnotation(injectionPointWith(NoAnnotation.class.getDeclaredField(FIELD_NAME))), is(false));
assertThat(exception.getMessage(), is("No event-sources.yaml defined on the classpath"));
assertThat(expected.getCause(), is(mBeanRegistrationException)); assertThat(expected.getMessage(), is("Failed to register SystemCommander MBean using object name \'AnObjectName\'"));
assertThat(environment.size(), is(1)); assertThat(credentialsArray.length, is(2)); assertThat(credentialsArray[0], is(username)); assertThat(credentialsArray[1], is(password));
assertThat(envelopeFrom(metadata, payloadAsJsonObject).payloadAsJsonObject(), equalTo(payloadAsJsonObject));
assertThat(metadataBuilder, instanceOf(DefaultJsonMetadata.Builder.class));
assertThat(actualSchema, is(expectedSchema));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( CustomServiceClassLevelAnnotation.class.getDeclaredMethods()[0])), equalTo("CUSTOM_SERVICE_NAME"));
assertThat(metadata.name(), equalTo(MESSAGE_NAME));
assertThat(envelopeValidationException.getMessage(), is(exceptionMessage)); assertThat(envelopeValidationException.getCause(), is(validationException));
assertThat(result, is(Optional.empty()));
assertThat(systemCommandDetails.getName(), is(systemCommand.getName())); assertThat(systemCommandDetails.getDescription(), is(systemCommand.getDescription()));
assertThat(mediaTypeProvider.getResponseMediaType(actionName), is(of(responseMediaType)));
assertThat(metadata.userId().isPresent(), is(true)); assertThat(metadata.userId().get(), equalTo(UUID_USER_ID));
assertThat(mediaTypes.isPresent(), is(false));
assertThat(expected.getMessage(), is("Invalid handler method \'invalidNoSystemCommandHandlerMethod\' on class \'uk.gov.justice.services.jmx.command.TestCommandHandler\'. Method should have 2 parameters. First of type \'uk.gov.justice.services.jmx.api.command.SystemCommand\' and second of type \'java.util.UUID\'."));
assertThat(envelopeRecordingInterceptor.firstRecordedEnvelope(), is(dispatchedEnvelope)); assertThat(envelopeRecordingHandler.firstRecordedEnvelope(), is(dispatchedEnvelope));
assertFalse(subscriptionsDescriptor1.equals(subscriptionsDescriptor2));
assertThat(envelopeValidationException.getMessage(), is("Error serialising json.")); assertThat(envelopeValidationException.getCause(), is(jsonProcessingException));
assertThat(results.size(), is(3)); assertThat(results, hasItems( interceptorContext_1, interceptorContext_2, interceptorContext_3));
assertThat(interceptorContext.getComponentName(), is("UNKNOWN"));
assertThat(dispatcher1, is(sameInstance(dispatcher2)));
assertThat(objectFactory.handlerMethodValidator(), is(notNullValue()));
assertThat(objectName.getDomain(), is(domain)); assertThat(objectName.getCanonicalName(), is("domain:key=value"));
assertThat(expected.getMessage(), is("Invalid handler method \'invalidTooManyParametersHandlerMethod\' on class \'uk.gov.justice.services.jmx.command.TestCommandHandler\'. Method should have 2 parameters. First of type \'uk.gov.justice.services.jmx.api.command.SystemCommand\' and second of type \'java.util.UUID\'."));
assertThat(expected.getMessage(), is("Handler method \'invalidPrivateHandlerMethod\' on class \'uk.gov.justice.services.jmx.command.TestCommandHandler\' is not public."));
assertThat(expected.getMessage(), is("Unable to create ObjectName: domain=\'fred:fred\', key=\'type\', value=\'value\'")); assertThat(expected.getCause(), is(CoreMatchers.instanceOf(MalformedObjectNameException.class)));
assertThat(testObject, isA(TestObject.class)); assertThat(testObject.getMyString(), is("newTest"));
assertThat(viewStoreDataSourceNameProvider.getDataSourceName(), is("java:/DS.framework"));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( FrameworkComponentFieldLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("CUSTOM_NAME_BCD"));
assertThat(metadata.eventNumber().isPresent(), is(true)); assertThat(metadata.eventNumber().get(), equalTo(EVENT_NUMBER_VALUE));
assertThat(systemCommandLocator.forName("other_command"), is(empty()));
assertThat(componentNameExtractor.componentFrom(injectionPointWith( ServiceComponentFieldLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo("COMMAND_CONTROLLER"));
assertThat(ContextName.fromName("test-context.command.test-command"), equalTo("test-context"));
assertThat(envelopeRecordingInterceptor.firstRecordedEnvelope(), is(dispatchedEnvelope)); assertThat(envelopeRecordingHandler.firstRecordedEnvelope(), is(dispatchedEnvelope));
assertThat(eventSourcesParser, is(instanceOf(EventSourcesParser.class)));
assertThat(captor.getValue(), instanceOf(ServiceComponentFoundEvent.class)); assertThat(captor.getValue().getHandlerBean().getBeanClass(), equalTo(TestDirectQueryApiHandler.class)); assertThat(captor.getValue().getLocation(), equalTo(ServiceComponentLocation.REMOTE));
assertThat(failedResults.size(), is(2)); assertThat(failedResults, hasItem(suspensionResult_1)); assertThat(failedResults, hasItem(suspensionResult_3));
assertThat(expected.getCause(), is(namingException)); assertThat(expected.getMessage(), is("Exception while looking up JMS destination name \'destination name\'"));
assertThat(defaultJdbcDataSourceProvider.getDataSource(jndiName), is(dataSource));
assertThat(suspensionResult.getCommandId(), is(commandId)); assertThat(suspensionResult.getCommandState(), is(COMMAND_COMPLETE)); assertThat(suspensionResult.getSystemCommand(), is(suspensionCommand)); assertThat(suspensionResult.getMessage(), is("Command API unsuspended with no errors")); assertThat(suspensionResult.getSuspendableName(), is("CommandApiSuspender")); assertThat(suspensionResult.getException(), is(empty()));
assertThat(envelopeFrom(metadata, payload).payload(), equalTo(payload));
assertThat(systemDataSourceNameProvider.getDataSourceName(), is("java:/app/framework/DS.system"));
assertThat(jmsEnvelopeSender, is(instanceOf(DefaultJmsEnvelopeSender.class)));
assertThat(provider.getContextSystemUserId(), is(Optional.empty()));
assertThat(expected.getMessage(), is("Failed to extract Name from media type \'application/json\'"));
assertThat(mediaTypes.getRequestMediaType().get(), is(requestMediaType)); assertThat(mediaTypes.getResponseMediaType().get(), is(responseMediaType));
assertThat(commandApiSuspender.shouldSuspend(), is(true));
assertThat(expected.getCause(), is(ioException)); assertThat(expected.getMessage(), is("Failed to get remote connection to MBean \'SystemCommanderMBean\'"));
assertThat(aggregate, notNullValue()); assertThat(aggregate.recordedEvents(), hasSize(1)); assertThat(aggregate.recordedEvents().get(0), equalTo(eventA));
assertThat(systemCommandStateBean.getCommandStatus(commandId), is(systemCommandStatus));
assertThat(producer.envelopeValidationExceptionHandler(), instanceOf(LoggingValidationExceptionHandler.class));
assertThat(destinationProvider.getDestination(destinationName), is(destination));
assertThat(getValueOfField(preparedStatementWrapper, "preparedStatement", PreparedStatement.class), is(preparedStatement)); assertThat(closeables, hasItems(connection, preparedStatement));
assertThat(envelopeValidationException.getMessage(), is("Could not load json schema that matches message type exaple.action-name.")); assertThat(envelopeValidationException.getCause(), is(schemaLoadingException));
assertThat(subscriptionsDescriptor.getSubscriptions().get(0), is(subscription2)); assertThat(subscriptionsDescriptor.getSubscriptions().get(1), is(subscription1)); assertThat(subscriptionsDescriptor.getSubscriptions().get(2), is(subscription3));
assertThat(testObject, isA(TestObject.class)); assertThat(testObject.getMyString(), is("newTest"));
assertThat(event.payload(), equalTo(JsonValue.NULL)); assertThat(event.metadata().id(), notNullValue()); assertThat(event.metadata().name(), equalTo(TEST_NAME)); assertThat(event.metadata().causation().size(), equalTo(2)); assertThat(event.metadata().causation().get(0), equalTo(OLD_CAUSATION_ID)); assertThat(event.metadata().causation().get(1), equalTo(COMMAND_UUID));
assertThat(systemCommandStateBean.commandInProgress(commandReceivedCommand), is(true)); assertThat(systemCommandStateBean.commandInProgress(commandInProgressCommand), is(true)); assertThat(systemCommandStateBean.commandInProgress(commandCompleteCommand), is(false)); assertThat(systemCommandStateBean.commandInProgress(commandFailedCommand), is(false)); assertThat(systemCommandStateBean.commandInProgress(notFoundCommand), is(false));
assertThat(expected.getCause(), is(namingException)); assertThat(expected.getMessage(), is("Failed to lookup DataSource using jndi name \'jndiName\'"));
assertTrue(subscriptionsDescriptor1.equals(subscriptionsDescriptor2));
assertThat(accessControlViolation.isPresent(), is(false));
assertThat(result.isPresent(), is(true)); assertThat(result.get(), is(outputEnvelope));
assertThat(getObjectRequest.bucket(), is(BUCKET_NAME)); assertThat(getObjectRequest.key(), is(FILE_NAME)); assertThat(result, is(downloadResult));
assertThat(result, is(notNullValue()));
assertThat(result, is(gzipCompressionService));
assertThat(result, is(notNullValue()));
assertThat(documentContent.getValue(), is(CONTENT));
assertThat(result.getPath(), is("testpath" + File.separator + "testname.zip"));
assertThat(putObjectRequest.bucket(), is(BUCKET_NAME)); assertThat(putObjectRequest.key(), is(FILE_NAME)); assertThat(putObjectRequest.contentType(), is(CONTENT_TYPE)); assertThat(putObjectRequest.storageClass(), is(StorageClass.REDUCED_REDUNDANCY)); assertThat(requestBody.contentStreamProvider().newStream().readAllBytes(), is(CONTENT));
assertThat(result, is(lzmaCompressionService));
assertThat(result, is(notNullValue()));
assertThat(result.getPath().toString(), is(TEST_LOCATION + FileSystems.getDefault().getSeparator() + TEST_DOCUMENT_ID + ".pdf"));
assertThat(minTemperatureSpreadDay).isEmpty();
assertThat(x).contains(new SpecificValue(123));
assertThat(parsedInput).isEqualTo(8);
assertThat(extrema).contains(new TemperatureExtremum(17, 81, 57));
assertThat(teamWithMinimumGoalDifference).isPresent().hasValue("Aston_Villa");
assertThat(parsedInput).containsExactly(1, 1);
assertThat(d).contains(new SpecificValue(492));
assertThat(teamWithMinimumGoalDifference).isEmpty();
assertThat(d).contains(new SpecificValue(72));
assertThat(parsedInput).isEqualTo(4);
assertThat(Fibonacci.of(3)).isEqualTo(3);
assertThat(d).isEmpty();
assertThat(parsedInput).isEqualTo(1);
assertThat(signals).containsExactly( entry(new Wire("x"), new SpecificValue(123)), entry(new Wire("y"), new SpecificValue(456)));
assertThat(parsedInput).isEqualTo(7);
assertThat(y).contains(new SpecificValue(45));
assertThat(minTemperatureSpreadDay).hasValue(14);
assertThat(parsedInput).isEqualTo(2);
assertEquals("sso token is invalid", response.getText());
assertThat(parsedInput).isEqualTo(3);
assertThat(d).contains(new SpecificValue(123));
assertThat(d).contains(new SpecificValue(507));
assertThat(parsedInput).isEqualTo(5);
assertThat(teamWithMinimumGoalDifference).isEmpty();
assertThat(d).isEmpty();
assertThat(Fibonacci.of(1)).isEqualTo(1);
assertThat(Fibonacci.of(2)).isEqualTo(2);
assertThat(d).isEmpty();
assertThat(parsedInput.input()).containsExactly(1, 2, 3, 4, 5, 6, 7, 8, 9);
assertThat(d).contains(new SpecificValue(72));
assertThat(minTemperatureSpreadDay).isEmpty();
assertEquals("hello Foo!", response.getText());
assertThat(d).contains(new SpecificValue(114));
assertThat(d).isEmpty();
assertThat(minTemperaturesSpread).hasValue(2);
assertThat(Fibonacci.sequenceUpTo(3)).containsExactly(1, 1, 2, 3);
assertThat(parsedInput).containsExactly(1, 1, 1);
assertThat(teamWithMinimumGoalDifference).hasValue("Aston_Villa");
assertThat(d).isEmpty();
assertThat(teamResults).contains(new TeamResult("Derby", 33, 63));
assertThat(parsedInput).isEqualTo(9);
assertThat(minTemperatureSpreadDay).isPresent().hasValue(14);
assertThat(d).isEmpty();
assertThat(d).contains(new SpecificValue(72));
assertThat(Fibonacci.of(4)).isEqualTo(5);
assertThat(Fibonacci.of(0)).isEqualTo(1);
assertEquals("sso token is not defined", response.getText());
assertThat(teamWithMinimumGoalDifference).hasValue("Liverpool");
assertThat(parsedInput).isEqualTo(6);
assertThat(Varint.intToVarint(1)).isEqualTo("0000 0001"); assertThat(Varint.intToVarint(300)).isEqualTo("1010 1100 0000 0010");
assertThat(parsedInput).isEqualTo(0);
assertThat(account).containsExactly(1,2,3,4,5,6,7,8,9);
assertThat(d).contains(new SpecificValue(65412));
assertNotNull(result); assertEquals(2, result.size()); assertEquals(expectedResults, result);
assertNotNull(result); assertEquals(0, result.getSource().getIndex()); assertSame(fixture.getOutput(0), result);
assertEquals(1, fixture.getInputs().size()); assertEquals(expectedResults, fixture.getInputs());
assertSame(input1.getOutput(0), fixture.getInput(0)); assertSame(input2.getOutput(0), fixture.getInput(1));
assertSame(input1, fixture.getInputOperators().get(0)); assertSame(input2, fixture.getInputOperators().get(1));
assertNotNull(result); assertEquals(1, result.size()); assertEquals(expectedResults, result);
assertNotNull(result); assertEquals(fixture, result); assertNotSame(fixture, result);
assertEquals(null, new OperatorWithNoFunctions().getFunctionClass());
assertEquals(OperatorWithOneFunction.Implementation.class, new OperatorWithOneFunction().getFunctionClass());
assertSame(input1.getOutput(0), fixture.getInput(0)); assertSame(newInput2.getOutput(0), fixture.getInput(1)); assertNotSame(input2, newInput2);
assertNotNull(result); assertEquals(0, result.getSource().getIndex());
assertEquals(OperatorWithTwoFunctions.class, stubClass.getDeclaringClass()); assertTrue(Arrays.asList(OperatorWithTwoFunctions.Implementation1.class, OperatorWithTwoFunctions.Implementation2.class).contains(stubClass));
assertThat(execution.getParentId(), is(Optional.of(42L)));
assertThat(execution.getVariable("foo", "default"), is("default"));
assertThat(instance.getStateVariable("key", Long.class, 99L), is(99L));
assertThat(t.getQueueRemainingCapacity(), is(3));
assertThat(service.insertWorkflowInstance(i), is(42L)); assertThat(stored.getValue().externalId, is("123")); assertThat(stored.getValue().status, is(created));
assertThat(lifecycle.isAutoStartup(), is(true));
assertThat(ret.size(), is(1)); assertThat(stringList.getValue().size(), is(0));
assertThat(response, is("500 error"));
assertThat(stateStatistics.created.allInstances, is(1L)); assertThat(stateStatistics.created.queuedInstances, is(2L)); assertThat(stateStatistics.inProgress.allInstances, is(3L)); assertThat(stateStatistics.inProgress.queuedInstances, is(4L)); assertThat(stateStatistics.executing.allInstances, is(5L)); assertThat(stateStatistics.manual.allInstances, is(8L)); assertThat(stateStatistics.finished.allInstances, is(9L));
assertThat(s.getMaxSubsequentStateExecutions(TestWorkflow.State.begin), is(equalTo(executionsDefault)));
assertThat(resp.id, is(executor.id)); assertThat(resp.host, is(executor.host)); assertThat(resp.pid, is(executor.pid)); assertThat(resp.executorGroup, is(executor.executorGroup)); assertThat(resp.started, is(executor.started)); assertThat(resp.active, is(executor.active)); assertThat(resp.expires, is(executor.expires)); assertThat(resp.stopped, is(executor.stopped));
assertThat(s.getMaxSubsequentStateExecutions(TestWorkflow.State.begin), is(equalTo(100)));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", double.class, true, false)); assertThat(longParam, stateParam("paramBoxed", Double.class, true, false)); assertEquals(Double.valueOf(0), longParam.nullValue);
assertThat(r.getStatus(), is(CREATED.getStatusCode())); assertThat(r.getHeaderString("Location"), is("1"));
assertThat(thrown.getMessage(), containsString("OverloadedStateMethodWorkflow.end")); assertThat(thrown.getMessage(), containsString("Overloading state methods is not allowed."));
assertEquals(0, results.deletedArchivedWorkflows);
assertThat(execution.getNewChildWorkflows(), is(asList(processedChild1, processedChild2)));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", boolean.class, true, false)); assertThat(param, stateParam("paramBoxed", Boolean.class, true, false)); assertEquals(Boolean.FALSE, param.nullValue);
assertThat(updatedInstance().actions.size(), is(1));
assertThat(ret.size(), is(1));
assertThat(response.getStatus(), is(equalTo(NOT_FOUND.getStatusCode()))); assertThat(response.readEntity(ErrorResponse.class).error, is(equalTo("Workflow instance 42 not found")));
assertEquals(workflowIds.size(), maintenanceDao.archiveWorkflows(workflowIds)); assertEquals(actionIds.size(), getArchiveActionCount()); assertEquals(actionCountAfter, actionCountBefore - actionIds.size());
assertThat(workflow.getSupportedSignals(), is(emptyMap()));
assertThat(instance.getStateVariable("key", Long.class), is(42L));
assertEquals(workflowIds.size(), maintenanceDao.deleteWorkflows(MAIN, workflowIds)); assertEquals(0, getArchiveActionCount()); assertEquals(actionCountAfter, actionCountBefore - actionIds.size());
assertThat(delay, greaterThanOrEqualTo((long)minDelay)); assertThat(delay, lessThanOrEqualTo((long)maxDelay)); assertThat(delay, greaterThanOrEqualTo(prevDelay));
assertEquals(workflowIds.size(), maintenanceDao.deleteWorkflows(MAIN, workflowIds)); assertEquals(0, getArchivedWorkflowCount()); assertEquals(workflowCountAfter, workflowCountBefore - workflowIds.size());
assertThat(mapper.canSerialize(DateTime.class), is(true)); assertThat(mapper.getSerializationConfig().getDefaultPropertyInclusion().getValueInclusion(), is(JsonInclude.Include.NON_EMPTY));
assertThat(t.executor.isShutdown(), is(true));
assertEquals(archivableWorkflows.size(), maintenanceDao.archiveWorkflows(archivableWorkflows)); assertEquals(archivableWorkflows.size(), getArchivedWorkflowCount()); assertEquals(activeWorkflowCountAfter, activeWorkflowCountBefore - archivableWorkflows.size());
assertThat(response, is("404 Item 1 not found"));
assertFalse(response.setSignalSuccess);
assertThat(s.immediateTransitionDelay, is(0)); assertThat(s.shortTransitionDelay, is(30000)); assertThat(delta, greaterThanOrEqualTo(-1000L)); assertThat(delta, lessThanOrEqualTo(0L)); assertThat(s.historyDeletableAfter, is(nullValue())); assertThat(s.defaultPriority, is((short) 0));
assertThat(workflow.isAllowedNextAction(instance, nextAction), is(true));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end", "doesNotReturnNextState"))); assertThat(methods.keySet().size(), is(3));
assertThat(instance.getStateVariable("foo"), is("bar")); assertThat(instance.getStateVariable("textNode"), is("\\"text\\""));
assertEquals(archivableWorkflows.size(), maintenanceDao.archiveWorkflows(archivableWorkflows)); assertEquals(archivableWorkflows.size(), getArchivedWorkflowCount()); assertEquals(activeWorkflowCountAfter, activeWorkflowCountBefore - archivableWorkflows.size());
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", long.class, true, false)); assertThat(param, stateParam("paramBoxed", Long.class, true, false)); assertEquals(Long.valueOf(0), param.nullValue);
assertThat(restQueueStats.count, is(2)); assertThat(restQueueStats.maxAge, is(42l)); assertThat(restQueueStats.minAge, is(10l)); assertThat(restExecStats.count, is(5)); assertThat(restExecStats.maxAge, nullValue()); assertThat(restExecStats.minAge, nullValue());
assertThat(response.getStatusCode(), is(OK)); assertThat(response.getBody(), is("ok"));
assertThat(statistics.stateStatistics.size(), is(0));
assertThat(execution.getParentId(), is(Optional.empty()));
assertThat(workflow.isAllowedNextAction(instance, nextAction), is(true));
assertThat(execution.getAllChildWorkflows(), is(result)); assertThat(actualQuery.parentWorkflowId, is(99L)); assertThat(actualQuery.types, emptyCollectionOf(String.class)); assertThat(actualQuery.businessKey, is(nullValue())); assertThat(actualQuery.includeCurrentStateVariables, is(false));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertThat(methods.get("end").params[0], stateParam("paramKey", String.class, true, false));
assertNotNull(executor);
assertThat(service.getSignal(99), is(Optional.of(42)));
assertThat(executor.getQueueRemainingCapacity(), is(200));
assertThat(execution.getVariable("foo"), is(nullValue()));
assertThat(workflow.isAllowedNextAction(instance, nextAction), is(true));
assertEquals(configuration.nflowNonSpringWorkflowsListing(environment).getFilename(), "dummy");
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramKey", ParamObj.class, false, false)); assertThat(longParam, stateParam("paramKey2", long.class, true, false)); assertEquals(0L, longParam.nullValue);
assertEquals(instance, service.getWorkflowInstance(42, includes, 10L));
assertEquals(oldWorkdlowIds.size() * 3, results.deletedArchivedWorkflows);
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", byte.class, true, false)); assertThat(param, stateParam("paramBoxed", Byte.class, true, false)); assertEquals((byte)0, param.nullValue);
assertThat(MDC.get(LOG_CONTEXT), is(nullValue()));
assertNotNull(executor);
assertThat(response.getStatus(), is(INTERNAL_SERVER_ERROR.getStatusCode())); assertThat(error.error, is("error"));
assertThat(updatedInstance().actions.size(), is(1));
assertThat(MDC.get(LOG_CONTEXT), is(nullValue()));
assertThat(ids, is(asList(newerHighPrio))); assertThat(ids, is(asList(olderLowPrio))); assertThat(ids, is(asList(newerLowPrio)));
assertThat(execution.getVariable("foo", Data.class), is(nullValue()));
assertThat(response.getStatus(), is(OK.getStatusCode())); assertThat(response.readEntity(String.class), is("ok"));
assertThat(updatedInstance().actions.isEmpty(), is(true));
assertThat(potentiallyStuckProcessors, is(1));
assertThat(s.getMaxSubsequentStateExecutions(TestWorkflow.State.begin), is(equalTo(executionsForBegin)));
assertEquals(oldWorkdlowIds.size() * 3, results.archivedWorkflows);
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", short.class, true, false)); assertThat(param, stateParam("paramBoxed", Short.class, true, false)); assertEquals(Short.valueOf((short)0), param.nullValue);
assertThat(response.getStatusCode(), is(INTERNAL_SERVER_ERROR)); assertThat(((ErrorResponse) response.getBody()).error, is("error"));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", char.class, true, false)); assertThat(param, stateParam("paramBoxed", Character.class, true, false)); assertEquals((char)0, param.nullValue);
assertThat(execution.queryChildWorkflows(query), is(result)); assertThat(actualQuery.parentWorkflowId, is(99L)); assertThat(actualQuery.types, is(asList("a", "b"))); assertThat(actualQuery.businessKey, is("123")); assertThat(actualQuery.includeCurrentStateVariables, is(false));
assertThat(updatedInstance().actions.size(), is(1));
assertEquals(resp, result);
assertThat(MDC.get(LOG_CONTEXT), is(equalTo("type:type, instanceId:1, extId:extId, businessKey:businessKey")));
assertThat(ret, hasItems(storedResponseNew, dummyResponse)); assertThat(ret, not(hasItem(storedResponseDummy)));
assertThat(service.updateWorkflowInstance(i, a), is(true)); assertThat(stored.getValue().status, is(inProgress)); assertThat(storedAction.getValue().state, is("currentState"));
assertThat(service.updateWorkflowInstance(i, a), is(false));
assertThat(DaoUtil.toDateTime(null), is(nullValue()));
assertEquals(1, metricRegistry.getHistograms().get("foobarName.0.myWorkflow.my-state.retries").getCount()); assertNotNull(metricRegistry.getTimers().get("foobarName.0.myWorkflow.my-state.execution-time")); assertNull(metricRegistry.getHistograms().get("foobarName.0.startup-delay"));
assertEquals(workflowIds.size(), maintenanceDao.deleteWorkflows(MAIN, workflowIds)); assertEquals(0, getArchivedStateCount()); assertEquals(variablesCountAfter, variablesCountBefore - stateIds.size() - requestDataVariableCount);
assertEquals(0, results.archivedWorkflows);
assertThat(response.getStatus(), is(BAD_REQUEST.getStatusCode())); assertThat(error.error, is("error"));
assertEquals(result, service.listWorkflowInstances(query));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertThat(methods.get("end").params[0], stateParam("paramKey", String.class, true, false));
assertThat(resource.listWorkflowExecutors().readEntity(List.class).size(), is(1));
assertTrue(response.setSignalSuccess);
assertEquals(false, result.isHealthy()); assertEquals(exception, result.getError());
assertThat(execution.getVariable("foo", Data.class, defaultData), is(defaultData));
assertThat(pollers[0].returnSize + pollers[1].returnSize, is(batchSize));
assertThat(thrown.getMessage(), containsString("Source table base has more columns than destination table fewer_columns"));
assertThat(response, is("ok"));
assertEquals(1, metricRegistry.getHistograms().get("foobarName.0.myWorkflow.my-state.retries").getCount()); assertNotNull(metricRegistry.getTimers().get("foobarName.0.myWorkflow.my-state.execution-time")); assertNotNull(metricRegistry.getHistograms().get("foobarName.0.startup-delay"));
assertThat(i.nextActivation, equalTo(req.activationTime)); assertThat(i.businessKey, equalTo(req.businessKey)); assertThat(i.externalId, equalTo(req.externalId)); assertThat(i.type, equalTo(req.type)); assertThat(i.state, equalTo("startState")); assertThat(i.stateVariables.get("foo"), is("bar")); assertThat(i.stateVariables.get("textNode"), is("\\"text\\""));
assertThat(DaoUtil.toTimestamp(null), is(nullValue()));
assertThat(execution.getSignal(), is(Optional.of(42)));
assertThat(thrown.getMessage(), containsString("Destination table wrong_columns is missing columns [TEXT2] that are present in source table base"));
assertThat(thrown.getMessage(), containsString("Source column base.TEXT2 has size 30 and destination column smaller_size.TEXT2 smaller size 25"));
assertThat(response.getStatus(), is(INTERNAL_SERVER_ERROR.getStatusCode())); assertThat(error.error, is("error"));
assertThat(ret, hasItems(storedResponseNew));
assertThat(instance.getStateVariable("key", "defaultValue"), is("defaultValue"));
assertEquals(workflowIds.size(), maintenanceDao.archiveWorkflows(workflowIds)); assertEquals(workflowIds.size(), getArchivedWorkflowCount()); assertEquals(workflowCountAfter, workflowCountBefore - workflowIds.size());
assertThat(workflow.isAllowedNextAction(instance, nextAction), is(true));
assertThat(MDC.get(LOG_CONTEXT), is(equalTo("type:type, instanceId:1, extId:extId, businessKey:businessKey")));
assertThat(response, is("400 error"));
assertThat(i.nextActivation, nullValue(DateTime.class)); assertThat(i.businessKey, nullValue(String.class)); assertThat(i.externalId, nullValue(String.class)); assertThat(i.type, equalTo(req.type));
assertThat(builder, is(notNullValue()));
assertThat(resp.id, equalTo(i.id)); assertThat(resp.type, equalTo(i.type)); assertThat(resp.businessKey, equalTo(i.businessKey)); assertThat(resp.externalId, equalTo(i.externalId));
assertThat(thrown.getMessage(), is("Workflow instance action can not be null"));
assertThat(response.getStatus(), is(BAD_REQUEST.getStatusCode())); assertThat(error.error, is("violationPath: violationMessage"));
assertThat(i.nextActivation, notNullValue(DateTime.class)); assertThat(i.businessKey, nullValue(String.class)); assertThat(i.externalId, nullValue(String.class)); assertThat(i.type, equalTo(req.type));
assertThat(factory, instanceOf(CustomizableThreadFactory.class)); assertThat(((CustomizableThreadFactory) factory).getThreadNamePrefix(), is("nflow-executor-")); assertThat(((CustomizableThreadFactory) factory).getThreadGroup().getName(), is("nflow"));
assertThat(builder, is(notNullValue())); assertThat(i.nextActivation, is(notNullValue())); assertThat(i.stateVariables, hasEntry("foo", serializedData));
assertThat(ret.size(), is(0)); assertThat(stringList.getValue(), containsElements(asList("nonexistent")));
assertThat(thrown.getMessage(), containsString("Source column base.TIME1 has type TIME and destination column wrong_type.TIME1 has mismatching type INTEGER"));
assertEquals(resp, result);
assertEquals(true, check.check().isHealthy());
assertThat(instance.getStateVariable("key"), is("value"));
assertEquals(0, results.deletedWorkflows);
assertThat(workflow.isAllowedNextAction(instance, nextAction), is(false));
assertThat(response.getStatus(), is(INTERNAL_SERVER_ERROR.getStatusCode())); assertThat(response.readEntity(ErrorResponse.class).error, is("error"));
assertThat(lifecycle.getPhase(), is(Integer.MAX_VALUE));
assertThat(thrown.getMessage(), containsString("preprocessor reject"));
assertNotNull(metricRegistry.getHistograms().get("foobarName.0.myWorkflow.my-state.retries")); assertEquals(1, metricRegistry.getTimers().get("foobarName.0.myWorkflow.my-state.execution-time").getCount()); assertEquals(1, metricRegistry.getMeters().get("foobarName.0.myWorkflow.my-state.error-count").getCount());
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertThat(methods.get("end").params[0], stateParam("paramKey", String.class, false, true));
assertThat(execution.getNewWorkflows(), is(asList(processedInstance1, processedInstance2)));
assertThat(thrown.getMessage(), containsString("MissingStateVarWorkflow.end")); assertThat(thrown.getMessage(), containsString("missing @StateVar annotation"));
assertThat(service.updateWorkflowInstance(i, a), is(true)); assertThat(stored.getValue().status, is(nullValue())); assertThat(storedAction.getValue().state, is("currentState"));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", float.class, true, false)); assertThat(param, stateParam("paramBoxed", Float.class, true, false)); assertEquals(Float.valueOf(0), param.nullValue);
assertThat(m.getVal(), is(2));
assertThat(service.getWorkflowExecutors().size(), is(equalTo(1)));
assertArrayEquals(oldWorkflowIds.toArray(), expectedIds.toArray());
assertThat(updatedInstance().actions.size(), is(1));
assertThat(service.getWorkflowDefinition("notFound"), is(nullValue()));
assertThat(def.getStates(), containsInAnyOrder(TestDefinitionWithStateTypes.State.initial, TestDefinitionWithStateTypes.State.done, TestDefinitionWithStateTypes.State.state1, TestDefinitionWithStateTypes.State.state2, TestDefinitionWithStateTypes.State.error));
assertArrayEquals(oldWorkflowIds.toArray(), expectedIds.toArray()); assertArrayEquals(oldWorkflowIds.toArray(), expectedIds.toArray());
assertEquals(oldWorkdlowIds.size() * 3, results.deletedWorkflows);
assertThat(executor.getQueueRemainingCapacity(), is(10));
assertEquals(configuration.nflowNonSpringWorkflowsListing(environment).contentLength(), 0L);
assertFalse(thread.isAlive(), "Processing thread did not die after interruption"); assertThat(action.getValue().type, is(stateExecutionFailed)); assertThat(action.getValue().stateText, containsString("InterruptedException"));
assertThat(methods.keySet(), hasItemsOf(asList("start", "end"))); assertNotNull(methods.get("end").params[0].nullValue); assertThat(methods.get("end").params[0], stateParam("paramPrimitive", int.class, true, false)); assertThat(param, stateParam("paramBoxed", Integer.class, true, false)); assertEquals(Integer.valueOf(0), param.nullValue);
assertThat(exec.count, is(0)); assertThat(exec.maxAgeMillis, nullValue()); assertThat(exec.minAgeMillis, nullValue()); assertThat(queued.count, is(2)); assertThat(queued.maxAgeMillis, greaterThanOrEqualTo(queued.minAgeMillis)); assertThat(queued.maxAgeMillis, greaterThanOrEqualTo(0L)); assertThat(queued.minAgeMillis, greaterThanOrEqualTo(0L));
assertThat(m.val, is(3)); assertThat(m.getVal(), is(4));
assertFalse( filter.apply(doc) );
assertTrue(filter.apply(new FieldEquality(new Field("field"),new Literal("literal"))));
assertFalse(filter.apply(new OrOperator()));
assertFalse(filter.apply(new OrOperator()));
assertFalse( filter.apply(doc) );
assertTrue(filter.apply(new AndOperator()));
assertTrue( filter.apply(doc) );
assertEquals(oracle1, keys); assertEquals(oracle2, keys); assertEquals(oracle1, keys);
assertEquals(0, rbll.size()); assertEquals(1, rbll.size());
assertEquals(0, rbll.size()); assertEquals(1, rbll.size()); assertEquals(0, rbll.size());
assertArrayEquals(new String[]{"DOWN", "LEFT"}, result);
assertNull(rbll.getIntervalContaining(3)); assertNull(rbll.getIntervalContaining(3)); assertEquals(new RBLL.LibBasedNode(0, 2), rbll.getIntervalContaining(1));
assertEquals(rbll, rbll2); assertThat(rbll, not(equalTo(rbll3))); assertEquals(rbll, rbll2); assertThat(rbll, not(equalTo(rbll3))); assertEquals(rbll, rbll2); assertThat(rbll, not(equalTo(rbll3)));
assertFalse(rbll.containsInt(4)); assertFalse(rbll.containsInt(4)); assertTrue(rbll.containsInt(0)); assertTrue(rbll.containsInt(1)); assertTrue(rbll.containsInt(2));
assertNotNull(user);
assertNotNull(user);
assertEquals(createNoAuthProxy(ADDRESS_1), createNoAuthProxy(ADDRESS_1)); assertEquals(createNoAuthProxy(ADDRESS_1).hashCode(), createNoAuthProxy(ADDRESS_1).hashCode());
assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test"); assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test2");
assertThat(ids[0]).isEqualTo(ids[1]);
assertFalse(builder.build().isRoundRobinSelection()); assertTrue(builder.build().isRoundRobinSelection());
assertNull(builder.build().resolvedAddressTypes()); assertThat(builder.build().resolvedAddressTypes()).isEqualTo(ResolvedAddressTypes.IPV4_ONLY);
assertThat(socketAddress.isUnresolved()).isTrue(); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("example.com");
assertNotEquals(createConnectTimeoutProxy(CONNECT_TIMEOUT_1), createConnectTimeoutProxy(CONNECT_TIMEOUT_2)); assertNotEquals(createConnectTimeoutProxy(CONNECT_TIMEOUT_1).hashCode(), createConnectTimeoutProxy(CONNECT_TIMEOUT_2).hashCode());
assertThat(ids[0]).isEqualTo(ids[1]);
assertEquals(createProxy(ADDRESS_1, PASSWORD_1), createProxy(ADDRESS_1, PASSWORD_1)); assertEquals(createProxy(ADDRESS_1, PASSWORD_1).hashCode(), createProxy(ADDRESS_1, PASSWORD_1).hashCode());
assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test"); assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test2");
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("127.0.0.1"); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("127.0.0.1");
assertThat(builder.build().maxQueriesPerResolve()).isEqualTo(DEFAULT_MAX_QUERIES_PER_RESOLVE); assertThat(builder.build().maxQueriesPerResolve()).isEqualTo(4);
assertThat(builder.build().maxPayloadSize()).isEqualTo(DEFAULT_MAX_PAYLOAD_SIZE); assertThat(builder.build().maxPayloadSize()).isEqualTo(1024);
assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test"); assertThat(channel.<String>readOutbound()).isEqualToIgnoringCase("test2");
assertThat(processedAddress).isSameAs(socketAddress);
assertEquals(10000, provider.connectTimeoutMillis);
assertNotEquals(createProxy(ADDRESS_1, PASSWORD_1), createProxy(ADDRESS_1, PASSWORD_2)); assertNotEquals(createProxy(ADDRESS_1, PASSWORD_1).hashCode(), createProxy(ADDRESS_1, PASSWORD_2).hashCode());
assertEquals(createHeaderProxy(ADDRESS_1, HEADER_1), createHeaderProxy(ADDRESS_1, HEADER_1)); assertEquals(createHeaderProxy(ADDRESS_1, HEADER_1).hashCode(), createHeaderProxy(ADDRESS_1, HEADER_1).hashCode());
assertThat(builder.build().queryTimeout()).isEqualTo(DEFAULT_QUERY_TIMEOUT); assertThat(builder.build().queryTimeout()).isEqualTo(queryTimeout);
assertEquals(0, createConnectTimeoutProxy(0).newProxyHandler().connectTimeoutMillis()); assertEquals(0, createConnectTimeoutProxy(-1).newProxyHandler().connectTimeoutMillis());
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("127.0.0.1"); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("127.0.0.1");
assertNull(builder.build().searchDomains()); assertThat(builder.build().searchDomains()).isEqualTo(searchDomains);
assertThat(builder.build().cacheMaxTimeToLive()).isEqualTo(DEFAULT_CACHE_MAX_TIME_TO_LIVE); assertThat(builder.build().cacheMaxTimeToLive()).isEqualTo(cacheMaxTimeToLive);
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc"); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc");
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc"); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc");
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("127.0.0.1"); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("127.0.0.1");
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("127.0.0.1"); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("127.0.0.1");
assertThat(builder.build().cacheMinTimeToLive()).isEqualTo(DEFAULT_CACHE_MIN_TIME_TO_LIVE); assertThat(builder.build().cacheMinTimeToLive()).isEqualTo(cacheMinTimeToLive);
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc"); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc");
assertThat(socketAddress.isUnresolved()).isTrue(); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("example.com");
assertThat(distinctDiscarded.size() + messages.size()) .as("Expect all element are flushed or discarded but was discarded " + ": [" + distinctDiscarded.size() + "], flushed : [" + messages.size() + "]") .isEqualTo(messagesToSend);
assertThat(builder.build().ndots()).isEqualTo(DEFAULT_NDOTS); assertThat(builder.build().ndots()).isEqualTo(4);
assertThat(discarded.size() + messages.size()) .as("Expect all element are flushed or discarded but was discarded " + ": [" + discarded.size() + "], flushed : [" + messages.size() + "]") .isEqualTo(messagesToSend);
assertFalse(builder.build().isDisableOptionalRecord()); assertTrue(builder.build().isDisableOptionalRecord());
assertFalse(builder.build().isDisableRecursionDesired()); assertTrue(builder.build().isDisableRecursionDesired());
assertThat(channel.<String>readOutbound()).isEqualTo(i + "");
assertThat(socketAddress.isUnresolved()).isTrue(); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("example.com");
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc"); assertThat(socketAddress.getPort()).isEqualTo(80); assertThat(socketAddress.getHostString()).isEqualTo("1abc:2abc:3abc:0:0:0:5abc:6abc");
assertNotEquals(createProxy(ADDRESS_1, PASSWORD_1), createProxy(ADDRESS_2, PASSWORD_1)); assertNotEquals(createProxy(ADDRESS_1, PASSWORD_1).hashCode(), createProxy(ADDRESS_2, PASSWORD_1).hashCode());
assertThat(resources.provider.isDisposed()).isTrue(); assertThat(resources.loops.isDisposed()).isFalse(); assertThat(resources.loops.isDisposed()).isTrue(); assertThat(resources.isDisposed()).isTrue();
assertThat(builder.build().cacheNegativeTimeToLive()).isEqualTo(DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE); assertThat(builder.build().cacheNegativeTimeToLive()).isEqualTo(cacheNegativeTimeToLive);
assertNotEquals(createHeaderProxy(ADDRESS_1, HEADER_1), createHeaderProxy(ADDRESS_1, HEADER_2)); assertNotEquals(createHeaderProxy(ADDRESS_1, HEADER_1).hashCode(), createHeaderProxy(ADDRESS_1, HEADER_2).hashCode());
assertThat(socketAddress.isUnresolved()).isFalse(); assertThat(socketAddress.getAddress().getHostAddress()).isEqualTo("0:0:0:0:0:0:0:1"); assertThat(socketAddress.getPort()).isEqualTo(8080); assertThat(socketAddress.getHostString()).isEqualTo("0:0:0:0:0:0:0:1");
assertThat(processedAddress).isSameAs(socketAddress);
assertThat(Utils.readBytesAsUnsignedInt(bb, 4), is(equalTo(12))); assertThat(bb.position(), is(4));
assertThat(hdfFc.getSuperblock(), is(sameInstance(sb)));
assertThat(Utils.toHex(88), is(equalTo("0x58")));
assertThat(Utils.readBytesAsUnsignedLong(bb, 1), is(equalTo(12L))); assertThat(bb.position(), is(1));
assertThat(hdfFile.getChild("datasets_group"), is(notNullValue())); assertThat(hdfFile.getChild("non_existent_child"), is(nullValue()));
assertThat(Utils.readBytesAsUnsignedLong(bb, 3), is(equalTo(65536L))); assertThat(bb.position(), is(3));
assertThat(hdfFile.isGroup(), is(true));
assertThat(fillValueBuffer.getFloat(), is(equalTo(123.45f)));
assertThat(Utils.readBytesAsUnsignedLong(bb, 8), is(equalTo(Constants.UNDEFINED_ADDRESS)));
assertThat(iterator.hasNext(), is(true));
assertThat(Utils.readBytesAsUnsignedLong(bb, 6), is(equalTo(1099511627776L))); assertThat(bb.position(), is(6));
assertThat(node.getVersion(), is(equalTo((short) 1))); assertThat(node.getNumberOfEntries(), is(equalTo((short) 3))); assertThat(node.getSymbolTableEntries().length, is(equalTo(3))); assertThat(node.toString(), is(equalTo("GroupSymbolTableNode [address=1504, numberOfEntries=3]")));
assertThat(bb.capacity(), is(equalTo(88))); assertThat(Utils.readUntilNull(bb), is("datasets_group"));
assertThat(subBuffer.limit(), is(equalTo(3))); assertThat(bb.position(), is(equalTo(3)));
assertThat(Utils.validateName("hello/"), is(false));
assertThat(Utils.readBytesAsUnsignedInt(bb, 1), is(equalTo(12))); assertThat(bb.position(), is(1));
assertThat(hdfFc.size(), is(equalTo(12345L)));
assertThat(chunkOffset1, equalTo(chunkOffset1)); assertThat(chunkOffset1, equalTo(chunkOffset2)); assertThat(chunkOffset1, not(equalTo(chunkOffset3))); assertThat(chunkOffset1, not(equalTo(null)));
assertThat(Superblock.verifySignature(fc, 3), is(false));
assertThat(Utils.readBytesAsUnsignedLong(bb, 5), is(equalTo(4294967296L))); assertThat(bb.position(), is(5));
assertThat(byteBuffer.limit(), is(4)); assertThat(byteBuffer.limit(), is(0)); assertThat(US_ASCII.decode(byteBuffer).toString(), is(""));
assertThat(Utils.readBytesAsUnsignedLong(bb, 2), is(equalTo(12L))); assertThat(bb.position(), is(2));
assertThat(hdfFile.isLinkCreationOrderTracked(), is(false));
assertThat(Utils.readBytesAsUnsignedInt(bb, 8), is(equalTo(12))); assertThat(bb.position(), is(8));
assertThat(hdfFc.getSizeOfOffsets(), is(equalTo(1)));
assertThat(Utils.readBytesAsUnsignedInt(bb, 6), is(equalTo(65536))); assertThat(bb.position(), is(6));
assertThat(byteBuffer.limit(), is(20)); assertThat(byteBuffer.limit(), is(11)); assertThat(US_ASCII.decode(byteBuffer).toString(), is("hello" + NULL_AS_CHAR + "again"));
assertThat(Utils.readBytesAsUnsignedInt(bb, 3), is(equalTo(65536))); assertThat(bb.position(), is(3));
assertThat(byteBuffer.limit(), is(4)); assertThat(byteBuffer.limit(), is(0)); assertThat(US_ASCII.decode(byteBuffer).toString(), is(""));
assertThat(message.getComment(), is(equalTo(COMMENT)));
assertThat(fractalHeap.toString(), is(equalTo( "FractalHeap [address=1870, idLength=7, numberOfTinyObjectsInHeap=0, numberOfHugeObjectsInHeap=0, numberOfManagedObjectsInHeap=1000]")));
assertThat(hdfFc.getUserBlockSize(), is(equalTo(1L)));
assertThat(byteBuffer.limit(), is(20)); assertThat(byteBuffer.limit(), is(5)); assertThat(US_ASCII.decode(byteBuffer).toString(), is("hello"));
assertThat(hdfFile.getAttributes(), is(notNullValue()));
assertThat(hdfFile.getParent(), is(nullValue()));
assertThat(Utils.readBytesAsUnsignedLong(bb, 3), is(equalTo(65536L))); assertThat(bb.position(), is(3));
assertThat(chunkOffset.toString(), is("ChunkOffset{[1, 2, 3]}"));
assertThat(Utils.validateName("hello."), is(false));
assertThat(Utils.toHex(Constants.UNDEFINED_ADDRESS), is(equalTo("UNDEFINED")));
assertThat(node.getFile(), is(Matchers.sameInstance(file)));
assertThat(Superblock.verifySignature(fc, 0), is(true));
assertThat(byteBuffer.limit(), is(5)); assertThat(byteBuffer.limit(), is(5)); assertThat(US_ASCII.decode(byteBuffer).toString(), is("hello"));
assertThat(hdfFile.isLink(), is(false));
assertThat(hdfFile.toString(), is(equalTo("HdfFile [file=test_file.hdf5]")));
assertThat(Utils.readBytesAsUnsignedInt(bb, 2), is(equalTo(12))); assertThat(bb.position(), is(2));
assertThat(bb.capacity(), is(equalTo(4))); assertThat(US_ASCII.decode(bb).toString(), is(equalTo("TEST")));
assertThat(bb.position(), is(equalTo(0))); assertThat(bb.position(), is(equalTo(8)));
assertThat(globalHeap.toString(), is(equalTo("GlobalHeap [address=2048, objects=1]")));
assertThat(byteBuffer.limit(), is(20)); assertThat(byteBuffer.limit(), is(11)); assertThat(US_ASCII.decode(byteBuffer).toString(), is("hello again"));
assertThat(Utils.readBytesAsUnsignedLong(bb, 7), is(equalTo(281474976710656L))); assertThat(bb.position(), is(7));
assertThat(message.getUnixEpocSecond(), is(equalTo(currentTimeEpocSeconds))); assertThat(message.getModifiedTime(), is(equalTo(currentTime)));
assertThat(bb.position(), is(equalTo(8))); assertThat(bb.position(), is(equalTo(16)));
assertThat(hdfFc.map(20, 10), is(sameInstance(mockMappedByteBuffer)));
assertThat(globalHeap.getObjectReferenceCount(1), is(equalTo(0)));
assertThat(Utils.readBytesAsUnsignedLong(bb, 4), is(equalTo(12L))); assertThat(bb.position(), is(4));
assertThat(hdfFc.getSizeOfLengths(), is(equalTo(1)));
assertThat(Utils.validateName("hello"), is(true));
assertThat(Utils.readBytesAsUnsignedLong(bb, 8), is(equalTo(12L))); assertThat(bb.position(), is(8));
assertThat(count[0]).isEqualTo(1);
assertTrue(citiesCount.getValue() == null);
assertEquals("{\\"lat\\":1.0,\\"lon\\":1.0}", result);
assertEquals(Integer.valueOf(10), citiesCount.getValue());
assertFalse(progressing.getValue());
assertTrue(coordinates.getLatitude().blockingGet() == 1 && coordinates.getLongitude().blockingGet() == 1);
assertEquals(MockCitiesTable.CITIES_COUNT, result[0]);
assertThat(methodAccessAllowed).isTrue();
assertThat(pattern.toString()).isEqualTo(expectedPatternString); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(false);
assertThat(this.syntax.getPrintCloseDelimiter()).isEqualTo("}}");
assertThat(this.syntax.getExecuteCloseDelimiter()).isEqualTo("%}");
assertSame(internalWriter, limitedSizeWriter);
assertThat(this.syntax.getWhitespaceTrim()).isEqualTo("-");
assertThat(pattern.toString()).isEqualTo(expectedPatternString); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(true); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(true); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(true); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(true); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(false); assertThat(whitespaceTrimMatcher.lookingAt()).isEqualTo(false);
assertEquals("no", this.render(""), "Empty string should be interpreted as FALSE");
assertThat(this.syntax.getInterpolationCloseDelimiter()).isEqualTo("}");
assertEquals("yes", this.render(true), "Null should be interpreted as FALSE");
assertThat(pattern.toString()).isEqualTo(expectedPatternString); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(false); assertThat(matcher.lookingAt()).isEqualTo(false);
assertEquals("no", this.render(null), "Null should be interpreted as FALSE");
assertEquals("yes", this.render(1), "Not zero integer should be interpreted as TRUE");
assertEquals("yes", this.render("not empty string"), "Not empty string should be interpreted as TRUE");
assertThat(this.syntax.getExecuteOpenDelimiter()).isEqualTo("{%");
assertEquals("no", this.render(false), "Null should be interpreted as FALSE");
assertThat(pattern.toString()).isEqualTo(expectedPatternString); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(true); assertThat(matcher.lookingAt()).isEqualTo(false); assertThat(matcher.lookingAt()).isEqualTo(false); assertThat(matcher.lookingAt()).isEqualTo(false);
assertEquals("no", this.render(0), "Zero integer should be interpreted as FALSE");
assertThat(this.syntax.getInterpolationOpenDelimiter()).isEqualTo("#{");
assertThat(this.syntax.getCommentCloseDelimiter()).isEqualTo("#}");
assertEquals("no", this.render(0), "Zero float should be interpreted as FALSE");
assertThat(this.syntax.getCommentOpenDelimiter()).isEqualTo("{#");
assertEquals("yes", this.render(1.1), "Not zero float should be interpreted as TRUE");
assertThat(this.syntax.getPrintCloseDelimiter()).isEqualTo("}}");
assertThat(tokenStream.peek(0).getType()).isEqualTo(Type.TEXT); assertThat(tokenStream.peek(0).getValue()).isEqualTo(" template content "); assertThat(tokenStream.peek(1).getType()).isEqualTo(Type.EOF);
assertTrue(reply.contains("huawei-board")); assertTrue(reply.contains(V10)); assertTrue(reply.contains("H901MPLB_0_9")); assertTrue(reply.contains(V11));
assertEquals("2", value);
assertEquals(2, deviceList.size()); assertEquals(DEVICE_A, m_deviceDao.getDeviceByName(DEVICE_A).getDeviceName()); assertEquals(DEVICE_B, m_deviceDao.getDeviceByName(DEVICE_B).getDeviceName()); assertNull(m_deviceDao.getDeviceByName(DEVICE_C));
assertTrue(moduleIdentifiers.contains(m_moduleIdentifierTestA));
assertEquals("DSL1", value);
assertFalse(aggregatorRpcMessage.isNetworkManagerMessage());
assertEquals("Could not get session to Pma device1", e.getMessage());
assertTrue(response.contains("modules-state"));
assertEquals(m_alarmParameters.hashCode(), m_alarmParameters2.hashCode()); assertNotEquals(m_AlarmParametersDifferentSeverity.hashCode(), m_alarmParameters2.hashCode());
assertEquals(TEST_MOUNTED_REQUEST, m_aggregatorMessage.toString());
assertTrue(resp.isOk());
assertEquals(expected, actual);
assertEquals(REQUEST_DEVICE_GET, response);
assertEquals(NetworkManagerRpc.NAMESPACE, m_aggregatorMessage.getParentXmlns());
assertEquals(MAX_CONNECTION, m_clientConnectedCount.get());
assertEquals("response", response);
assertEquals(deviceA, device);
assertEquals(ADAPTER_NOR_DEPLOYED_ERROR, error.getErrorMessage()); assertEquals(INVALID_VALUE, error.getErrorTag()); assertEquals(Application, error.getErrorType()); assertEquals(Error, error.getErrorSeverity());
assertEquals(YET_ANOTHER_MODEL_NODE_ID, actualNodeId);
assertNotNull(deployAdapterRpc.getDeployAdapter().getDeploy()); assertEquals("adapterExample.zip", deployAdapterRpc.getDeployAdapter().getDeploy().getAdapterArchive());
assertEquals(request, netconfRpcMessage.getOriginalMessage());
assertEquals(OLD_DS, DocumentUtils.documentToPrettyString(m_updatedDsCaptor.getValue()).trim()); assertEquals(UPDATED_DS, DocumentUtils.documentToPrettyString(m_oldDsCaptor.getValue()).trim());
assertEquals(m_alarmInfo2.hashCode(), m_alarmInfo.hashCode()); assertNotEquals(m_alarmInfoWithDifferentRaisedTime.hashCode(), m_alarmInfo2.hashCode());
assertEquals("Could not find device family based on the deviceName: " + hostName, e.getMessage());
assertEquals("true", m_newDevice.getDeviceManagement().getPushPmaConfigurationToDevice());
assertTrue(pmaServer instanceof PmaServerSession);
assertTrue(requests.size() == 2);
assertEquals(5, alarms.size()); assertEquals(1, alarms.size());
assertEquals(6, splits.length);
assertEquals(1, checkedList.size()); assertArrayEquals(inputByte, ipfixMessagesWrapper.getData());
assertTrue(response.contains("yang-library"));
assertTrue(decodedDataSet.isEmpty());
assertTrue(message.contains("name"));
assertEquals(2, m_standardModelRegistrator.getStandardPlugRegistrators().size());
assertTrue(result.contains("rpc-reply")); assertTrue(result.contains(MESSAGE_ID)); assertEquals(rpcReplyV10.getMessageId(), rpcUnmarshal.getMessageId());
assertEquals(ALARM_STATE_CHANGE, m_alarmStateChangeNotification.getType());
assertFalse(response.isEmpty());
assertEquals("deploy-adapter", aggregatorRpcMessage.getOnlyOneTopPayload().getFirstChild().getLocalName());
assertEquals(RpcReplyV10.class, clazz); assertEquals(RpcReplyV11.class, clazz); assertEquals(RpcReplyV10.class, clazz); assertEquals(RpcReplyV11.class, clazz);
assertEquals(0, deviceList.size());
assertEquals("The IPFIX message is not correct formatted", e.getMessage());
assertEquals(0, alarms.size());
assertTrue(response.contains("alignment-state"));
assertTrue(callHomeInfo.isCallHome());
assertEquals(m_device, context.get(Device.class.getSimpleName())); assertEquals(m_deviceAdapterId, context.get(DeviceAdapterId.class.getSimpleName()));
assertTrue(e.getMessage().contains(DEVICE_NOT_CONNECTED_TEST_DEVICE));
assertEquals(REQUEST_DEVICE_GET_CONFIG, response);
assertEquals("Device deviceA does not exist", e.getMessage());
assertTrue(response.contains(RESPONSE_OK));
assertEquals("rpc-reply", document.getFirstChild().getLocalName()); assertEquals(rpcReplyV11.getMessageId(), rpcReplyUnmarshal.getMessageId());
assertTrue(resp.isOk());
assertEquals("AlarmParameters [alarmTypeId=testAlarmTypeId, resource=ModelNodeId[/container=device-manager/container=device-holder/name=TestBAA/container=device/name=R1.S1.LT1.P1.ONT1], lastStatusChange=" + m_alarmParameters.getLastStatusChange() + ", lastPerceivedSeverity=cleared, lastAlarmText=testLastAlarmText, resourceObjectString=null, resourceNamespaces=null]", m_alarmParameters.toString());
assertEquals(1, moduleIdentifiers.size());
assertFalse(responses.isEmpty()); assertTrue(responses.contains(TEST_DEVICE_NAME_B));
assertEquals(REQUEST, aggregatorRpcMessage.getNetconfRpcMessage().getOriginalMessage());
assertNull(m_informationElementCache.getInformationElement(183L, ieName)); assertEquals(ie, m_informationElementCache.getInformationElement(183L, ieName));
assertFalse(capabilitiesSet.isEmpty());
assertEquals(m_device, m_pmaServer.getDevice());
assertTrue(resp.isOk());
assertTrue(response.contains(MESSAGE_ID)); assertTrue(response.contains(V10)); assertTrue(response.contains(MESSAGE_ID)); assertTrue(response.contains(V11)); assertTrue(response.contains("ok"));
assertTrue(netconfRpcMessage.getRpc().getGet() != null);
assertEquals(INTF_MODEL_NODE_ID, actualNodeId);
assertEquals(TEST_NS, namespace);
assertEquals("111", value);
assertEquals(INTF_MODEL_NODE_ID, actualNodeId);
assertEquals(DEVICE_TYPE, deviceType);
assertEquals("DefaultAlarmStateChangeNotification [alarm=" + m_alarmNotification + "]", m_alarmStateChangeNotification.toString());
assertTrue(e.getMessage().contains(DEVICE_NOT_CONNECTED_TEST_DEVICE));
assertEquals("Entity Not Found", e.getMessage());
assertEquals("Device not connected : device1", e.getMessage());
assertTrue(m_aggregatorMessage.isNetworkManageMountMessage());
assertTrue(resp.isOk());
assertEquals("111", value);
assertTrue(response.contains("modules-state"));
assertEquals("111", value);
assertEquals(1, checkedList.size()); assertArrayEquals(inputByte, ipfixMessagesWrapper.getData()); assertEquals(2, checkedList.size()); assertArrayEquals(inputByte, ipfixMessagesWrapper2.getData());
assertNotNull(m_alarmStateChangeNotification.getNotificationElement());
assertTrue(e.getMessage().contains(DEVICE_NOT_CONNECTED_TEST_DEVICE));
assertTrue(m_informationElementService.removeInformationElementMapping(family));
assertEquals(device, m_dm.getDevice("Bangalore-south"));
assertTrue(response.contains(RESPONSE_OK));
assertFalse(xmlns.isEmpty());
assertEquals(MODEL_NODE_ID, actualNodeId); assertEquals(YET_ANOTHER_MODEL_NODE_ID, actualNodeId); assertNotEquals(YET_ANOTHER_MODEL_NODE_ID_INVALID, actualNodeId); assertEquals(INTF_MODEL_NODE_ID, actualNodeId);
assertEquals("Device not managed : device2", e.getMessage());
assertEquals("2", value);
assertFalse(processorCapabilities.isEmpty());
assertFalse(result.isEmpty()); assertEquals("urn:bbf:yang:obbaa:network-manager?module=network-manager&revision=2020-02-19", result);
assertTrue(sshAuth.authenticate(clientInfoOk).isAuthenticated()); assertFalse(sshAuth.authenticate(clientInfoError).isAuthenticated()); assertFalse(sshAuth.authenticate(new DSAPublicKey()).isAuthenticated());
assertEquals(1, m_internalAlarmService.getActiveAlarms());
assertEquals(2, deviceList.size()); assertEquals(DEVICE_A, deviceA.getDeviceName()); assertEquals(DEVICE_B, deviceB.getDeviceName()); assertNull(m_deviceDao.getDeviceByName(DEVICE_C)); assertEquals(1, deviceList.size()); assertNull(deviceA); assertEquals(DEVICE_B, deviceB.getDeviceName());
assertTrue(pmaDeviceConfigRpc.getPmaDeviceConfig().getPmaDeviceConfigAlign() != null);
assertEquals(1000, m_alarmInfo.getAlarmText().length());
assertTrue(response.contains("yang-library"));
assertEquals(1, m_trapListener.getNoOfCallbacks()); assertEquals(2, m_trapListener.getNoOfCallbacks()); assertEquals(1, m_trapListener.getNoOfCallbacks()); assertEquals(0, m_trapListener.getNoOfCallbacks());
assertEquals(1, alarms.size()); assertEquals(0, alarms.size()); assertNotNull(actualDsm); assertEquals(m_dsm, actualDsm); assertEquals(AlarmCondition.ALARM_OFF, alarmNotification.getAlarmCondition());
assertTrue(yangLibraryMessage.getYangLibrary() != null); assertTrue(yangLibraryMessage.getModulesState() == null);
assertTrue(payload.contains("<name>0.10</name>"));
assertEquals(inputByte.length + inputByte2.length, testByte.length); assertEquals(2, checkedList.size()); assertArrayEquals(inputByte, ipfixMessagesWrapper.getData()); assertArrayEquals(inputByte2, ipfixMessagesWrapper2.getData());
assertEquals(MOUNT_KEY1, m_alarmParameters.getMountKey());
assertEquals(info.getTime(), alarm.getRaisedTime()); assertEquals(info.getAlarmText(), alarm.getAlarmText()); assertEquals(info.getSeverity(), alarm.getSeverity()); assertEquals(DB_ID, alarm.getSourceObject());
assertNotNull(queryYangModuleInUseRpc.getUsedYangModules());
assertTrue(callbackInfo1.getNotificationApplicableCheck().isApplicable(context));
assertTrue(pmaDeviceConfigRpc.buildRpcReplyDataResponse().contains("10101"));
assertNotNull(undeployAdapterRpc.getUndeployAdapter().getUndeploy()); assertEquals("adapterExample.zip", undeployAdapterRpc.getUndeployAdapter().getUndeploy().getAdapterArchive());
assertEquals(DEVICE_TYPE, m_singleDeviceRequest.getDeviceType());
assertTrue(result.contains("202")); assertTrue(result.contains("ok"));
assertEquals(m_device, context.get(Device.class.getSimpleName())); assertEquals(m_deviceAdapterId, context.get(DeviceAdapterId.class.getSimpleName()));
assertEquals(edits, m_das.getEditQueue(m_device1.getDeviceName())); assertEquals(edits, m_das.getEditQueue(m_device2.getDeviceName()));
assertEquals(0, alarms.size()); assertEquals(1, alarms.size()); assertEquals(timestamp, alarms.get(0).getRaisedTime()); assertEquals(1, alarms.size()); assertEquals(timestamp, alarms.get(0).getRaisedTime()); assertEquals(0, alarms.size()); assertEquals(0, alarms.size()); assertEquals(1, alarms.size()); assertEquals(timestamp, alarms.get(0).getRaisedTime());
assertEquals("Device not connected : 1", e.getMessage());
assertEquals(DEVICE_NAME, m_singleDeviceRequest.getDeviceName());
assertEquals(deviceList, devices);
assertEquals("True", value);
assertEquals("urn:bbf:yang:obbaa:device-adapters", aggregatorRpcMessage.getOnlyOneTopXmlns());
assertTrue(response.contains(TEST_STRING)); assertTrue(response.contains(NetconfProtocol.VERSION_1_0));
assertEquals("Data set is invalid for decoding process.", e.getMessage());
assertFalse(response.isEmpty());
assertFalse(response.isEmpty());
assertEquals("True", value);
assertFalse(informationElementService.isIECacheAvailable());
assertFalse(m_informationElementCache.removeInformationElement("family")); assertTrue(m_informationElementCache.isAvailable()); assertTrue(m_informationElementCache.removeInformationElement("family"));
assertTrue(reply.contains(V10)); assertTrue(reply.contains("error")); assertTrue(reply.contains(V11)); assertTrue(reply.contains("error"));
assertEquals(m_document, m_singleDeviceRequest.getDocument());
assertEquals(1, m_internalAlarmService.getActiveAlarms()); assertEquals(2, m_internalAlarmService.getActiveAlarms());
assertEquals("111", value);
assertTrue(resp.isOk());
assertEquals(UPDATED_DS, DocumentUtils.documentToPrettyString(m_updatedDsCaptor.getValue()).trim()); assertEquals(OLD_DS, DocumentUtils.documentToPrettyString(m_oldDsCaptor.getValue()).trim()); assertEquals("Veto threw exception", e.getMessage());
assertTrue(m_aggregatorMessage.containMountedMessage());
assertTrue(e instanceof RuntimeException); assertEquals(m_tempFile.getAbsolutePath() + " is not a directory", e.getMessage());
assertTrue(yangLibraryMessage.getModulesState() != null);
assertTrue(resp.isOk());
assertEquals(callHomeDevice, m_adminStore.getCallHomeDeviceWithDuid("Bangalore-south"));
assertTrue(response.contains(NetworkManagerRpc.NAMESPACE)); assertTrue(response.contains("root"));
assertEquals("2018-01-27T14:32:13Z", value);
assertTrue(resp.isOk());
assertFalse(callHomeInfo.isCallHome());
assertThat(allContents).contains("embed_0"); assertThat(allContents).contains("embed_1a"); assertThat(allContents).contains("embed_1b"); assertThat(allContents).contains("embed_2a"); assertThat(allContents).contains("embed_2b"); assertThat(allContents).contains("embed_3"); assertThat(allContents).contains("dissolve the political bands"); assertThat(allContents).contains("embed_4");
assertThat(npe.getMessage()).contains("<unknownDigest> embedded document not found in root document"); assertThat(npe.getMessage()).contains("documents/recursive_embedded.docx");
assertThat(emfImage).isNotNull(); assertThat(emfImage.content).hasSize(4992);
assertEquals(Options.from(stringProperties), Options.from(stringProperties));
assertEquals(3L, (long)job.get());
assertThat(textContent).isNotNull(); assertThat(new String(textContent.content)).isEqualTo("embed_1a");
assertThat(list).isNotEmpty(); assertThat(list).contains("home"); assertThat(readAllLines(get(folder.getRoot().toPath().resolve(path.toString().substring(1)).toString() + ".json"), Charset.defaultCharset())). hasSize(8); assertThat(readAllLines(get(folder.getRoot().toPath().resolve(path.toString().substring(1)).toString() + ".txt"), Charset.defaultCharset())). contains("This is a test.");
assertThat(textContent).isNotNull(); assertThat(new String(textContent.content)).isEqualTo("embed_4");
assertEquals("{}", new Options().toString());
assertThat(extracted.getEmbeds()).hasSize(2); assertThat(contentExtractor.extract(extracted, extracted.getEmbeds().get(0).getId())).isNotNull(); assertThat(contentExtractor.extract(extracted, extracted.getEmbeds().get(1).getId())).isNotNull(); assertThat(contentExtractor.extract(extracted, extracted.getEmbeds().get(1).getEmbeds().get(0).getId())).isNotNull();
assertThat(textContent).isNotNull(); assertThat(new String(textContent.content)).isEqualTo("embed_2b");
assertThat(pngFile).isNotNull(); assertThat(new String(pngFile.content)).hasSize(634);
assertThat(new String(actual.content).replace("\\n", "")).isEqualTo("level2");
assertThat(list).isNotEmpty(); assertThat(list).contains("test.txt.json", "test.txt.txt"); assertThat( readAllLines(folder.getRoot().toPath().resolve("test.txt.json"), Charset.defaultCharset())).contains("{ }"); assertThat( readAllLines(folder.getRoot().toPath().resolve("test.txt.txt"), Charset.defaultCharset())).contains("this is a content");
assertEquals(10, (long)scanner.scan(root).get()); assertEquals(11, (long)scanner.scan(root).get());
assertThat(rawStmtsDocs).hasSize(2); assertThat(rawStmtsDoc.getName()).isEqualTo("doc1"); assertThat(blocks).hasSize(1); assertThat(rawStmtsBlock.getName()).isEqualTo("block0");
assertThat(cmds.get(0).getCmdType()).isEqualTo(EBCLIOptions.CmdType.waitmillis); assertThat(cmds.get(0).getCmdSpec()).isEqualTo("23234");
assertThat(a).isEqualTo("aval1"); assertThat(b).isEqualTo("value2");
assertThat(tf.getMap().size()).isEqualTo(1); assertThat(tf.getMap().containsKey("name")).isTrue(); assertThat(tf.getMap().get("name")).isNull();
assertThat(a).isEqualTo("\'Key\': \'Value\'.\'Stuff\'");
assertThat(c.getString("a")).contains("1");
assertThat(a).isEqualTo("bval1");
assertThat(metrics).containsKey("aprefixhere.counter1"); assertThat(metrics).hasSize(extant+1); assertThat(metrics).hasSize(extant+2); assertThat(metrics).containsKey("aprefixhere.counter2"); assertThat(metrics).hasSize(extant+1); assertThat(metrics).containsKey("aprefixhere.counter2"); assertThat(metrics).hasSize(extant);
assertThat(ints).containsExactly(0,0,1,1,1,1,1);
assertThat(opts.getCommands()).isNotNull(); assertThat(opts.getCommands().size()).isEqualTo(2); assertThat(opts.getCommands().get(0).getCmdSpec()).isEqualTo("foo=wan;"); assertThat(opts.getCommands().get(1).getCmdSpec()).isEqualTo("bar=lan;");
assertThat(opts.getCommands().size()).isEqualTo(1); assertThat(cmd.getCmdArgs().size()).isEqualTo(1); assertThat(cmd.getCmdArgs()).containsKey("param1"); assertThat(cmd.getCmdArgs().get("param1")).isEqualTo("value1");
assertThat(a).isEqualTo("aval1");
assertThat(a).isEqualTo("{\'parm1\':\'val1\',parm2:val2, parm3: \'val3\'}");
assertThat(cmds).hasSize(1); assertThat(cmds.get(0).getCmdType()).isEqualTo(EBCLIOptions.CmdType.stop); assertThat(cmds.get(0).getCmdSpec()).isEqualTo("woah");
assertThat(c).isEqualTo(1L); assertThat(c).isEqualTo(2L); assertThat(c).isEqualTo(3L); assertThat(c).isEqualTo(4L); assertThat(c).isEqualTo(5L); assertThat(i1.isExhausted()).isTrue();
assertThat(cmds).hasSize(1); assertThat(cmds.get(0).getCmdType()).isEqualTo(EBCLIOptions.CmdType.run);
assertThat(histos.size()).isEqualTo(2); assertThat(histos.get(0)).isInstanceOf(Histogram.class); assertThat(((Histogram)histos.get(0)).getNumberOfSignificantValueDigits()).isEqualTo(significantDigits);
assertThat(a).isEqualTo("UNSET:nokeymatchesthis");
assertThat(bt4.markResult(36L,3)).isEqualTo(3); assertThat(bt4.markResult(33L,0)).isEqualTo(2); assertThat(bt4.markResult(35L,2)).isEqualTo(1); assertThat(bt4.markResult(35L,2)).isEqualTo(0); assertThat(bt4.markResult(33L,9)).isEqualTo(-1);
assertThat(handler.getHandlers()).hasSize(2); assertThat(handler.getHandlers()).hasSize(0);
assertThat(mml.get("a")).isEqualTo("1");
assertThat(optionalStreamOrFile).isPresent();
assertThat(inputSegment).isNull();
assertThat(cmds).hasSize(1); assertThat(cmds.get(0).getCmdType()).isEqualTo(EBCLIOptions.CmdType.start);
assertThat(stmts).hasSize(6); assertThat(stmts).hasSize(2);
assertThat(cmds.get(0).getCmdType()).isEqualTo(EBCLIOptions.CmdType.await); assertThat(cmds.get(0).getCmdSpec()).isEqualTo("awaitme");
assertThat(a).isEqualTo("\'Key\': \'Value\'"); assertThat(b).isEqualTo("\'a\': \'b\'");
assertThat(rawBlockDocs.getStmtsDocs()).hasSize(1); assertThat(rawBlockDoc.getRawStmtDefs()).hasSize(1); assertThat(rawBlockDoc.getBindings()).hasSize(1); assertThat(rawBlockDoc.getName()).isEqualTo("name"); assertThat(rawBlockDoc.getTags()).hasSize(1); assertThat(rawBlockDoc.getParams()).hasSize(1);
assertThat(a).isEqualTo("butithasadefault");
assertThat(a).isEqualTo("\'Key\': \'Value\'");
assertThat(procDetails).isPresent();
assertThat(opts.wantsActivityTypes()).isTrue(); assertThat(opts.wantsActivityTypes()).isFalse();
assertThat(a).isEqualTo("A");
assertEquals(TestHelpers.unescapeJavaString(Helpers.toString(mMainJSResult)), TestHelpers.unescapeJavaString(Helpers.toString(ris)));
assertNull("Event should NOT be produced when moving in descendant direction", mLastKeyEvent);
assertNull("Event should NOT be produced when moving in descendant direction", mLastKeyEvent);
assertTrue("Event is not null", mLastKeyEvent != null); assertTrue("Event should be produced when moving in ascendant direction", mLastKeyEvent.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN);
assertTrue("Event is not null", mLastKeyEvent != null); assertTrue("Event should be produced when moving in ascendant direction", mLastKeyEvent.getKeyCode() == KeyEvent.KEYCODE_DPAD_UP);
assertThat(list).isNotEmpty().hasSize(8); assertThat(list.get(0).getRepeatCount()).isEqualTo("2");
assertTrue("Event is not null", mLastKeyEvent != null); assertTrue("Event should be produced when moving in ascendant direction", mLastKeyEvent.getKeyCode() == KeyEvent.KEYCODE_DPAD_LEFT);
assertTrue("Event is not null", mLastKeyEvent != null); assertTrue("Event should be produced when moving in ascendant direction", mLastKeyEvent.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT);
assertNull("Event should NOT be produced when moving in descendant direction", mLastKeyEvent);
assertNull("Event should NOT be produced when moving in descendant direction", mLastKeyEvent);
assertEquals("super.foo(p0, p1);", extractSignature);
assertNull(insertionBeforeMethod);
assertNull(insertionAfterMethod);
assertTrue(isInvoked);
assertEquals("super.foo();", extractSignature);
assertNotNull(method); assertEquals(classToInsertInto, method.getClassToInsertInto()); assertEquals(targetMethod, method.getTargetMethodName()); assertNull(method.getInsertionBeforeMethod()); assertEquals(insertionAfterMethod, method.getInsertionAfterMethod()); assertEquals(fullMethod, method.getFullMethod()); assertEquals(body, method.getBody());
assertEquals("public void foo()", extractSignature);
assertNotNull(constructor); assertEquals(classToInsertInto, constructor.getClassToInsertInto()); assertEquals(body, constructor.getConstructorBody(null)); assertTrue(constructor.acceptParameters(null));
assertNotNull(method); assertEquals(classToInsertInto, method.getClassToInsertInto()); assertEquals(targetMethod, method.getTargetMethodName()); assertEquals(insertionBeforeMethod, method.getInsertionBeforeMethod()); assertNull(method.getInsertionAfterMethod()); assertEquals(fullMethod, method.getFullMethod()); assertEquals(body, method.getBody());
assertEquals("public int foo()", extractSignature);
assertEquals("public void foo() throws java.lang.Exception, java.lang.Throwable", extractSignature);
assertEquals("public void foo(int p0, java.lang.String p1)", extractSignature);
assertFalse(isInvoked);
assertNotNull(constructor); assertEquals(ClassPool.getDefault().get(String.class.getName()), constructor.getClassToInsertInto()); assertEquals(body, constructor.getConstructorBody(null)); assertTrue(constructor.acceptParameters(null));
assertEquals(100, out.keys.size()); assertEquals(writable.i, i); assertEquals(writable.in, "document " + i);
assertEquals(100, out.keys.size());
assertTrue("missing test data? count: " + govDocs.getCount(), govDocs.getCount() == 11);
assertTrue("Expected elements in order, frmRes:" + frmRes + " <= counter:" + counter, frmRes > counter);
assertTrue("Expected some test data", sigStrHashes.size() > 0); assertTrue("Hash lists should be equal", sigUrlHashes.equals(sigStrHashes));
assertTrue("expecting tika mime types NOT:" + coreUrl, coreUrl .getPath().contains(TikaResourceHelper.TIKA_MIMETYPES));
assertTrue("missing test data? count: " + govDocs.getCount(), govDocs.getCount() > 0);
assertTrue("", customUrls.size() == 1); assertTrue("expecting custom mime types NOT:" + customUrls.get(0), customUrls.get(0) .getPath().contains(TikaResourceHelper.CUSTOM_MIMETYPES));
assertTrue("", vanillaUrls.size() == 2); assertTrue("expecting core mime types NOT:" + vanillaUrls.get(0), vanillaUrls.get(0) .getPath().contains(TikaResourceHelper.TIKA_MIMETYPES)); assertTrue("expecting custom mime types NOT:" + vanillaUrls.get(1), vanillaUrls.get(1) .getPath().contains(TikaResourceHelper.CUSTOM_MIMETYPES));
assertTrue("Expected some test data", sigStrHashes.size() > 0); assertTrue("Hash lists should be equal", sigFileHashes.equals(sigStrHashes));
assertTrue("GovDocsZipped.isZip() != true for zip test directory??", GovDocs.isZip(AllFidgetTests.getGovDocsZip())); assertFalse("GovDocsZipped.isZip() == true for dir based test directory??", GovDocs.isZip(AllFidgetTests.getGovDocsDir()));
assertTrue("No data found size: " + govDocs.getSize(), govDocs.getSize() > 0);
assertTrue("missing test data? count: " + govDocs.getCount(), govDocs.getCount() == 11);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(new Foo().get()).isEqualTo(90);
assertThat(textField.getFocusListeners().length, is(expectedFocusListenerLength));
assertEquals(other.getEditor().getPreferredSize(), picker.getEditor().getPreferredSize());
assertNotNull("sortController must be initialized", list.getRowSorter());
assertTrue("header height must be > 0", xTable.getTableHeader().getPreferredSize().height > 0);
assertEquals("customized", UIManager.get("Addon.title")); assertEquals("my subtitle", UIManager.get("Addon.subtitle")); assertTrue(UIManager.get("Addon.border") instanceof LineBorder); assertEquals("my title", UIManager.get("Addon.title"));
assertEquals(text, adapter.getString(0));
assertEquals(txt.getBackground(), PromptSupport.getBackground(txt));
assertThat(sb.toString(), is("1,2,3"));
assertNotNull("sanity: description font available", color); assertEquals(color, header.getDescriptionFont());
assertThat(adapter.column, is(0)); assertThat(adapter.row, is(0)); assertThat(adapter.column, is(0)); assertThat(adapter.row, is(0));
assertNotNull(ui.getErrorInternalFrame(null));
assertTrue("future selection must be cleared", model.isSelectionEmpty());
assertEquals("test", PromptSupport.getPrompt(txt)); assertEquals("test", txt.getClientProperty(PromptSupport.PROMPT)); assertEquals(Color.LIGHT_GRAY, PromptSupport.getForeground(txt)); assertEquals(Color.LIGHT_GRAY, txt.getClientProperty(PromptSupport.FOREGROUND)); assertEquals(Color.YELLOW, PromptSupport.getBackground(txt)); assertEquals(Color.YELLOW, txt.getClientProperty(PromptSupport.BACKGROUND));
assertFalse(morph.getPathIterator(AffineTransform.getRotateInstance(.5)) instanceof FlatteningPathIterator); assertTrue(morph.getPathIterator(AffineTransform.getRotateInstance(.5), .7) instanceof FlatteningPathIterator);
assertTrue(CalendarUtils.isStartOfWeek(midJune)); assertFalse(CalendarUtils.isStartOfWeek(midJune)); assertEquals("calendar must be unchanged", date, midJune.getTime());
assertEquals(custom.getGap(), ((VerticalLayout) container.getLayout()).getGap());
assertEquals("the date used for selection must be unchanged", copy, today);
assertTrue("ui keyboard action must have started model adjusting", view.getSelectionModel().isAdjusting()); assertEquals(2, report.getEventCount()); assertEquals(EventType.DATES_SET, report.getLastEvent().getEventType());
assertNotNull("array must be not null", list.getListeners(ChangeListener.class)); assertEquals("array must be empty", 0, list.getListeners(ChangeListener.class).length);
assertNotNull(ui.getErrorFrame(new JWindow()));
assertNull(rootPane.getCancelButton()); assertFalse(action.isEnabled());
assertEquals(startOfDay(today), model.getNormalizedDate(today)); assertNotSame(startOfDay(today), model.getNormalizedDate(today));
assertNotNull(border.getBorderInsets(comp)); assertNotNull(border.getBorderInsets(comp, null));
assertNotNull("rules must not be null", rules);
assertSame("border untouched in updateUI ", border, hyperlink.getBorder());
assertNotNull(ui.getErrorFrame(new JDialog()));
assertNull("", column);
assertEquals(rows, sorter.getViewRowCount());
assertEquals("first row", BasicMonthViewUI.LAST_WEEK_ROW, dayInGrid.y);
assertEquals(monthView.getMonthStringBackground(), ((BasicMonthViewUI) monthView.getUI()).getCalendarHeaderHandler().getHeaderComponent().getBackground()); assertEquals(monthView.getMonthStringBackground(), ((BasicMonthViewUI) monthView.getUI()).getCalendarHeaderHandler().getHeaderComponent().getBackground());
assertNotNull(star.getPathIterator(AffineTransform.getRotateInstance(.5))); assertNotNull(star.getPathIterator(AffineTransform.getRotateInstance(.5), .7));
assertEquals("formats diff: " + (date.getTime() - first.getTime()) , date, first);
assertNotNull(hyperlink.getAction()); assertTrue(hyperlink.getAction() instanceof HyperlinkAction);
assertTrue("same component must be interpreted as descending", SwingXUtilities.isDescendingFrom(comp, comp));
assertTrue(linkAction.isVisited()); assertEquals(linkAction.isVisited(), hyperlink.isClicked());
assertEquals(rows - 1, sorter.convertRowIndexToView(rows - 1));
assertEquals("calendarRow at absolute row " + row, calendarRow, dayGridPosition.y);
assertTrue(star.contains(new Point2D.Double(50,50))); assertTrue(star.contains(new Rectangle(45,45,10,10))); assertTrue(star.contains(45,45,10,10)); assertTrue(star.contains(55,55));
assertEquals(rows - 1, sorter.convertRowIndexToModel(rows - 1));
assertEquals("factory must have created one less than model columns", model.getColumnCount() - 1, table.getColumnCount());
assertFalse("lower bound is selectable", model.isSelectionEmpty()); assertTrue("loweer bound must be selected", model.isSelected(today)); assertFalse("past must not be selected", model.isSelected(yesterday)); assertEquals("no event fired", 0, report.getEventCount()); assertTrue("past must be selected after removing lower bound ", model.isSelected(yesterday));
assertNotNull(ui.getErrorDialog(null));
assertThat(PaintUtils.blend(Color.BLACK, null), is(Color.BLACK));
assertEquals(Locale.getDefault(), model.getLocale());
assertTrue("sanity: expect NumberEditorExt but was " + editor, editor instanceof NumberEditorExt); assertEquals("default formatter is strict", true, ((NumberEditorExt) editor).hasStrictFormatter());
assertNotNull(ui.getErrorInternalFrame(new JFrame()));
assertEquals(calendar.getTime(), picker.getMonthView().getFirstDisplayedDay());
assertNotNull(ui.getErrorFrame(null));
assertNotNull("daysOfTheWeek must not be null", monthView.getDaysOfTheWeek());
assertEquals(new Rectangle(0,0,50,50), morph.getBounds()); assertEquals(new Rectangle(25,25,50,50), morph.getBounds()); assertEquals(new Rectangle(50,50,50,50), morph.getBounds());
assertEquals(table.isEnabled(), table.getTableHeader().isEnabled()); assertEquals(table.isEnabled(), header.isEnabled()); assertEquals(true, header.isEnabled());
assertTrue(CalendarUtils.isStartOfMonth(todayGerman)); assertEquals(start, todayGerman.getTime()); assertFalse(CalendarUtils.isStartOfMonth(todayGerman));
assertTrue(CalendarUtils.areEqual(null, null)); assertFalse(CalendarUtils.areEqual(now, null)); assertFalse(CalendarUtils.areEqual(null, now)); assertTrue(CalendarUtils.areEqual(now, now)); assertFalse(CalendarUtils.areEqual(now, calendar.getTime()));
assertNull("hit in header must return null grid position", ui.getDayGridPositionAtLocation(location.x, location.y));
assertSame(txtWidth, blab.preferredLayoutSize(textField).width); assertSame(String.format("preferred layout size should be %d", txtWidth), txtWidth, blab.preferredLayoutSize(textField).width); assertSame(txtWidth, blab.preferredLayoutSize(textField).width);
assertNotNull(ui.getErrorInternalFrame(new JDialog()));
assertNull(manager.getTarget()); assertNotNull(targets); assertTrue(targets.length == 0);
assertSame(SortOrder.UNSORTED, list.getSortOrder()); assertSame(SortOrder.ASCENDING, list.getSortOrder()); assertSame(SortOrder.DESCENDING, list.getSortOrder()); assertSame(SortOrder.UNSORTED, list.getSortOrder());
assertSame("column must be sorted after setting sortOrder on ", SortOrder.ASCENDING, list.getSortOrder()); assertSame(SortOrder.ASCENDING, getSortController(list).getSortOrder(0));
assertNull(context.getFont());
assertThat(GraphicsUtilities.getPixels(img, 0, 0, 1, 1, null)[0], is(0));
assertEquals(ComponentAdapter.DEFAULT_COLUMN_IDENTIFIER, adapter.getColumnIdentifierAt(0));
assertNotNull(formatter.getFormats()); assertEquals(formats.length, formatter.getFormats().length);
assertEquals(other.getEditor().getPreferredSize(), picker.getEditor().getPreferredSize());
assertEquals(1, report.getEventCount()); assertEquals(1, report.getCanceledEventCount());
assertNotNull(ui.getErrorDialog(new JPanel()));
assertFalse("sanity: combo not focused", field.hasFocus()); assertEquals(field.hasFocus(), l.isFocused());
assertNotSame(monthView.getDaysOfTheWeek(), monthView.getDaysOfTheWeek());
assertEquals(table.getRowHeight(), TableUtilities.getPreferredRowHeight(table, -1));
assertTrue(CalendarUtils.isStartOfYear(midJune)); assertFalse(CalendarUtils.isStartOfYear(midJune)); assertEquals("calendar must be unchanged", changed, midJune.getTime());
assertTrue(Arrays.deepEquals(new Object[] {"One", "Two", "Three"}, list.getSelectedValues())); assertTrue(Arrays.deepEquals(new Object[] {"One", "Three"}, list.getSelectedValues())); assertTrue(Arrays.deepEquals(new Object[] {"One", "Three", "Five"}, list.getSelectedValues()));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getCanceledEventCount());
assertEquals(week, midJune.get(Calendar.WEEK_OF_YEAR)); assertEquals(week + 1 , midJune.get(Calendar.WEEK_OF_YEAR));
assertFalse("ui keyboard action must have stopped model adjusting", view.getSelectionModel().isAdjusting()); assertEquals(2, report.getEventCount());
assertEquals(0, adapter.getColumnIndex(ComponentAdapter.DEFAULT_COLUMN_IDENTIFIER));
assertEquals(pattern, format.toPattern());
assertEquals(0, gridPositionLToR.x); assertEquals(1, gridPositionRToL.x);
assertEquals(listenerCount +1, painter.getPropertyChangeListeners().length); assertEquals(listenerCount, painter.getPropertyChangeListeners().length);
assertTrue(filter.include(entry));
assertEquals("first row below header must be day column header", BasicMonthViewUI.DAY_HEADER_ROW, dayGridPosition.y);
assertNotSame(frm, rm); assertTrue(rm.getClass().isAnnotationPresent(TranslucentRepaintManager.class));
assertTrue("sanity: titledPanels default border must be ui-installable " + titledPanel.getBorder(), SwingXUtilities.isUIInstallable(titledPanel.getBorder())); assertEquals("sanity: border set", border, titledPanel.getBorder()); assertEquals("border untouched ", border, titledPanel.getBorder());
assertNotNull("monthView must have zoomOutAction", monthView.getActionMap().get("zoomOut")); assertNotNull("monthView must have zoomOutAction", monthView.getActionMap().get("zoomOut"));
assertNotNull(titledPanel.getContentContainer()); assertTrue(titledPanel.getContentContainer().getLayout() instanceof BorderLayout);
assertEquals(0, model.getColumnCount());
assertEquals(rows - 1, sorter.convertRowIndexToView(rows - 1));
assertEquals(dim, frame.getPreferredSize()); assertEquals(dim.height + bar.getPreferredSize().height, frame.getPreferredSize().height);
assertThat(painter, is(nullValue()));
assertEquals("initial locale in constructor must be passed to model", locale, monthView.getSelectionModel().getLocale());
assertNull(System.getProperty("os.name")); assertEquals(oldProperty, System.getProperty("os.name"));
assertEquals(first, ((BasicMonthViewUI) monthView.getUI()).getFirstDisplayedYear());
assertNull("hit in header must return null grid position", ui.getDayGridPositionAtLocation(location.x, location.y));
assertEquals(first, ((BasicMonthViewUI) monthView.getUI()).getFirstDisplayedMonth());
assertEquals(rows, sorter.getModelRowCount());
assertNotNull(ui.getErrorFrame(new Applet()));
assertThat(SwingUtilities.isEventDispatchThread(), is(false)); assertThat(SwingUtilities.isEventDispatchThread(), is(true)); assertThat(SwingXUtilities.invokeAndWait(callable), is(true)); assertThat((System.currentTimeMillis() - start) > 1000, is(true));
assertEquals(listModel.getSize(), list.getElementCount()); assertSame(listModel, list.getRowSorter().getModel());
assertNotNull(ui.getErrorFrame(new JFrame()));
assertEquals(1, table.getColumnCount());
assertTrue(expectedDate.equals(datePicker.getDate())); assertTrue(expectedDate.equals(datePicker.getEditor().getValue())); assertTrue(null == datePicker.getDate()); assertTrue(null == datePicker.getEditor().getValue());
assertEquals("first logical column in LToR", BasicMonthViewUI.LAST_DAY_COLUMN, dayGridPosition.x);
assertTrue(SwingUtilities.isDescendingFrom(toolBar, rootPane)); assertEquals(1, report.getEventCount()); assertTrue(report.hasEvents("toolBar"));
assertNotNull("sanity", label.getFont()); assertEquals(label.getFont(), context.getFont());
assertEquals(1, report.getEventCount()); assertEquals(1, report.getStoppedEventCount());
assertNotNull("sanity: description font available", color); assertEquals(color, header.getDescriptionForeground());
assertTrue(filter.include(entry));
assertSame(1, searchField.getActionListeners().length); assertSame(1, searchHistory.getChangeListeners().length); assertSame(0, searchField.getActionListeners().length); assertSame(0, searchHistory.getChangeListeners().length); assertNull(searchField.getFindPopupMenu());
assertTrue(CalendarUtils.isStartOfYear(todayGerman)); assertEquals(2000, todayGerman.get(Calendar.YEAR));
assertEquals(table.getRowHeight(), TableUtilities.getPreferredRowHeight(table, -1));
assertEquals(FocusBehavior.HIGHLIGHT_PROMPT, PromptSupport.getFocusBehavior(txt)); assertEquals(FocusBehavior.HIGHLIGHT_PROMPT, txt.getClientProperty(PromptSupport.FOCUS_BEHAVIOR));
assertFalse("upper bound is selectable", model.isSelectionEmpty()); assertTrue("upper bound must be selected", model.isSelected(today)); assertFalse("future must not be selected", model.isSelected(tomorrow)); assertEquals("no event fired", 0, report.getEventCount()); assertTrue("tomorrow must be selected after removing upper bound ", model.isSelected(tomorrow));
assertEquals(visitedIsTrue, linkAction.isVisited());
assertNull(header.getResizingColumn());
assertFalse("sanity: initial focus must not be in picker", SwingXUtilities.isDescendingFrom(focusOwner, picker)); assertEquals(0, report.getEventCount("focused"));
assertEquals(rows, sorter.getViewRowCount());
assertThat(PaintUtils.blend(Color.BLACK, Color.WHITE), is(Color.WHITE));
assertTrue(SwingUtilities.isDescendingFrom(toolBar, rootPane)); assertEquals("set statusBar must have fire exactly one property change", 1, report.getEventCount()); assertTrue(report.hasEvents("statusBar"));
assertTrue(addon.initialized); assertTrue(addon.uninitialized); assertTrue(addon.uninitialized); assertEquals(oldLFAddon, addon.uninitializedWith); assertTrue(addon.initialized); assertEquals(newLFAddon, addon.initializedWith);
assertFalse(filter.include(entry));
assertEquals("first logical column in LToR", BasicMonthViewUI.WEEK_HEADER_COLUMN, dayGridPosition.x);
assertThat(PaintUtils.blend(null, Color.WHITE), is(Color.WHITE));
assertEquals(day, midJune.get(Calendar.DATE)); assertEquals(day + 1, midJune.get(Calendar.DATE));
assertEquals("pref width must be same while editing", empty.width, picker.getPreferredSize().width);
assertNull(UIManager.getBorder("JXDatePicker.border")); assertEquals(field.getBorder(), picker.getEditor().getBorder()); assertEquals(pickerBorder, UIManager.getBorder("JXDatePicker.border"));
assertEquals(first, monthView.getUI().getLastDisplayedDay());
assertThat(bar, is(sameInstance(SearchFactory.getInstance().getSharedFindBar()))); assertThat(updated[0], is(true)); assertThat(panel, is(sameInstance(SearchFactory.getInstance().getSharedFindPanel()))); assertThat(updated[1], is(true));
assertNotNull(ui.getErrorDialog(new Applet()));
assertEquals("same bound, no event fired", 0, report.getEventCount());
assertFalse(filter.include(entry));
assertEquals(FocusBehavior.HIDE_PROMPT, PromptSupport.getFocusBehavior(txt));
assertEquals("pref width must be same while editing", withValue.width, picker.getPreferredSize().width);
assertEquals(1, report.getVisibleEventCount()); assertEquals(picker, report.getLastEvent().getSource());
assertThat(editor.getFocusListeners().length, is(expectedFocusListenerCount)); assertThat(editor.getKeyListeners().length, is(expectedKeyListenerCount)); assertThat(combo.getPropertyChangeListeners("editor").length, is(expectedPropListenerCount)); assertThat(combo.getActionListeners().length, is(expectedActionListenerCount));
assertFalse("both nulls are not descending", SwingXUtilities.isDescendingFrom(null, null)); assertFalse("null comp is not descending", SwingXUtilities.isDescendingFrom(null, new JScrollPane())); assertFalse("comp is not descending null parent", SwingXUtilities.isDescendingFrom(new JLabel(), null));
assertEquals(font, label.getFont());
assertEquals(0, model.getColumnCount(true));
assertTrue(manager.doCommand("foo", null)); assertFalse(manager.doCommand("bar", null)); assertTrue(manager.doCommand("bar", null)); assertFalse(manager.doCommand("foo", null)); assertTrue(manager.doCommand("bar", null)); assertTrue(manager.doCommand("foo", null));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getCanceledEventCount());
assertTrue("past selection must be cleared", model.isSelectionEmpty());
assertNotNull("linkFormat entry is available", pattern); assertEquals(DateFormat.getDateInstance(), format .getFormats()[0]);
assertThat(sb.toString(), is("1,2"));
assertThat(renderer, is(instanceOf(DefaultListRenderer.class)));
assertEquals(defaultUiClass, txt.getUI().getClass());
assertEquals(0, report.getEventCount());
assertEquals("weeks of year column in RTL", BasicMonthViewUI.WEEK_HEADER_COLUMN, dayGridPosition.x);
assertEquals(pattern, format.toPattern());
assertEquals(ComponentAdapter.DEFAULT_COLUMN_IDENTIFIER, adapter.getColumnIdentifierAt(0));
assertEquals(txtField.getHorizontalAlignment(), lbl.getHorizontalAlignment()); assertEquals(txtField.getColumns(), lbl.getColumns());
assertEquals(Dummy.values().length - 1 - i, ordinals[i]);
assertNotNull(date);
assertEquals(1, report.getEventCount()); assertEquals(JXMonthView.COMMIT_KEY, report.getLastActionCommand()); assertEquals(1, report.getEventCount()); assertEquals(JXMonthView.CANCEL_KEY, report.getLastActionCommand());
assertThat(bean, is(captor.getValue().getSource())); assertThat("property", is(captor.getValue().getPropertyName())); assertThat(0, is(clone.getPropertyChangeListeners().length));
assertSame("sanity", uiColor, colorHighlighter.getBackground()); assertSame("support must update ui color", changedUIColor, colorHighlighter.getBackground());
assertThat(sb.toString(), is("1"));
assertEquals(month, midJune.get(Calendar.MONTH)); assertEquals(month - 1, midJune.get(Calendar.MONTH));
assertTrue(CalendarUtils.isEndOfWeek(midJune)); assertFalse(CalendarUtils.isEndOfWeek(midJune)); assertEquals("calendar must be unchanged", date, midJune.getTime());
assertEquals("format pattern must be same as from localized resource", pattern, format.toPattern());
assertEquals("bound changed, event must be fired", 1, report.getEventCount(EventType.LOWER_BOUND_CHANGED));
assertNotNull(ui.getErrorInternalFrame(new JPanel()));
assertEquals(Desktop.Action.BROWSE, action.getDesktopAction());
assertEquals(0, adapter.column); assertEquals(0, adapter.row); assertEquals(0, adapter.column); assertEquals(0, adapter.row);
assertNotNull("sanity: title foreground available", color); assertEquals(color, header.getTitleForeground());
assertEquals(month, midJune.get(Calendar.MONTH)); assertEquals(month + 1, midJune.get(Calendar.MONTH));
assertEquals("null must be uiInstallable ", true, SwingXUtilities.isUIInstallable(null));
assertEquals(model.isAdjusting(), report.getLastEvent().isAdjusting());
assertEquals(Calendar.JANUARY, midJune.get(Calendar.MONTH)); assertTrue(CalendarUtils.isStartOfMonth(midJune)); assertEquals(year, midJune.get(Calendar.YEAR));
assertEquals("the input date must be unchanged", input, editor.getValueAsDate(input)); assertEquals("input as long must be same", input, editor.getValueAsDate(input.getTime())); assertNull("invalid string maps to null", editor.getValueAsDate(nonsenseString)); assertNull("empty String maps to null", editor.getValueAsDate("")); assertEquals("date must be user-object", input, editor.getValueAsDate(node)); assertEquals("date must be user-object", input, editor.getValueAsDate(tableNode));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getStructureEventCount()); assertEquals(path, structureEvent.getTreePath());
assertEquals(dim, frame.getPreferredSize()); assertEquals(dim.height + bar.getPreferredSize().height, frame.getPreferredSize().height);
assertNotSame(rm, rmx); assertTrue(rmx.getClass().isAnnotationPresent(TranslucentRepaintManager.class));
assertTrue(report.hasEvents()); assertEquals(1, report.getEventCount("somevalue"));
assertEquals("calendarColumn at absolute column " + column, calendarColumn, dayGridPosition.x);
assertEquals(rows, sorter.getModelRowCount());
assertEquals("last logical column in RToL", BasicMonthViewUI.FIRST_DAY_COLUMN, dayGridPosition.x);
assertNotNull(formatter.getFormats()); assertTrue("must have formats: " + formatter.getFormats().length, formatter.getFormats().length > 0); assertEquals(DateFormat.getDateInstance(DateFormat.SHORT), formatter .getFormats()[0]);
assertEquals(UIManager.get(rootPane.getUIClassID()), rootPane.getUI().getClass().getName());
assertNull("sanity", delegate.getBorderInsets(comp)); assertNull("sanity", delegate.getBorderInsets(comp, null)); assertNotNull(border.getBorderInsets(comp)); assertNotNull(border.getBorderInsets(comp, null));
assertEquals("Three", list.getSelectedValue()); assertEquals("Three", list.getSelectedValue());
assertNotNull(ui.getErrorDialog(new JDialog()));
assertTrue(visible); assertEquals(columnExt.isVisible(), action.isSelected()); assertEquals(!visible, columnExt.isVisible());
assertEquals(2, list.getSelectedIndex()); assertEquals(1, list.getSelectedIndex()); assertEquals(2, list.getSelectedIndex());
assertEquals("bound changed, event must be fired", 1, report.getEventCount(EventType.UPPER_BOUND_CHANGED));
assertEquals("monthView must not have in-focused keyBindings", 0, monthView.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).size()); assertTrue("monthView must have in-focused keyBindings after showing in popup", monthView.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).size() > 0); assertEquals("monthView must not have in-focused keyBindings", 0, monthView.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).size());
assertNotNull(ui.getErrorDialog(new JWindow()));
assertTrue("visibility action must be selected if not hideable", action.isSelected()); assertFalse("action must be disabled", action.isEnabled()); assertFalse("visibility action must be unselected if hideable", action.isSelected());
assertTrue(expectedDate.equals(datePicker.getDate()));
assertEquals(textArea.getRows(), lbl.getRows()); assertEquals(textArea.getColumns(), lbl.getColumns());
assertFalse("foreground painter must not be antialiasing", painter.isAntialiasing());
assertFalse(totd.showDialog(null, noshow));
assertEquals("test", PromptSupport.getPrompt(txt)); assertEquals("test", txt.getClientProperty(PromptSupport.PROMPT)); assertEquals("test", txt.getToolTipText()); assertEquals("test2", txt.getToolTipText()); assertEquals("ttt", txt.getToolTipText());
assertThat(UIManager.getColor("Addon.panelBackground"), is(panelBackground)); assertThat(UIManager.getColor("Addon.panelBackground"), is(panelBackground));
assertEquals(text, adapter.getString());
assertEquals(linkAction.getName(), hyperlink.getText()); assertFalse(hyperlink.isClicked());
assertThat(PaintUtils.toHexString(Color.BLACK), is("#000000")); assertThat(PaintUtils.toHexString(Color.WHITE), is("#ffffff"));
assertNotNull("sanity: default icon loaded", icon); assertSame(icon, header.getIcon());
assertFalse(BuddySupport.isBuddy(button, tf)); assertFalse(BuddySupport.isBuddy(button, tf)); assertTrue(BuddySupport.isBuddy(button, tf));
assertTrue(dim.width < separator.getPreferredSize().width);
assertEquals(text, adapter.getString(0));
assertEquals(1, report.getInvisibleEventCount()); assertEquals(picker, report.getLastEvent().getSource());
assertNotNull(ui.getErrorFrame(new JPanel()));
assertEquals(0, adapter.getColumnIndex(ComponentAdapter.DEFAULT_COLUMN_IDENTIFIER));
assertThat(button.getFont(), is(font));
assertEquals(txt.getDisabledTextColor(), PromptSupport.getForeground(txt));
assertTrue(report.hasEvents()); assertEquals(1, report.getEventCount("comparator"));
assertEquals(1, model.getColumnCount(true));
assertTrue("sanity: ", prefWidth > 10); assertEquals("pref width must be bounded by max", max, columnExt.getPreferredWidth());
assertNotNull(ui.getErrorInternalFrame(frame.getContentPane()));
assertFalse("action must be disabled initially", action.isEnabled());
assertTrue(star.intersects(new Rectangle(25,25,50,50))); assertFalse(star.intersects(5,5,10,10));
assertEquals(calendar.getTime(), picker.getMonthView().getFirstDisplayedDay());
assertTrue(filter.include(entry));
assertTrue(LookAndFeelAddons.isTrackingLookAndFeelChanges());
assertTrue("sanity: focus transfered into picker hierarchy", SwingXUtilities.isDescendingFrom(focusOwner, picker)); assertTrue("listener must take initial focused state ", l.isFocused());
assertEquals(first, monthView.getUI().getLastDisplayedDay());
assertEquals(Color.RED, PromptSupport.getForeground(txt)); assertEquals(Color.RED, txt.getClientProperty(PromptSupport.FOREGROUND));
assertEquals("cellRenderer", new CellContext().getCellRendererName()); assertEquals("Table.cellRenderer", new TableCellContext().getCellRendererName()); assertEquals("Tree.cellRenderer", new TreeCellContext().getCellRendererName()); assertEquals("List.cellRenderer", new ListCellContext().getCellRendererName());
assertEquals(1, report.getEventCount()); assertEquals(1, report.getVisibleEventCount());
assertSame(UIManager.get("SearchField.buttonMargin"), searchField .getOuterMargin()); assertNotSame(UIManager.get("SearchField.buttonMargin"), searchField .getOuterMargin());
assertEquals(insets.left, icon.getIconWidth() + 8);
assertEquals("last logical column in RToL", BasicMonthViewUI.LAST_DAY_COLUMN, dayGridPosition.x);
assertNotNull("formats must not be null", formats); assertEquals(defaultFormats.length, formats.length); assertEquals("format must be equals to default at " + i, defaultFormats[i], formats[i]);
assertEquals("model minimals must not be changed", first, model.getMinimalDaysInFirstWeek());
assertEquals("calendarColumn at absolute column " + column, calendarColumn, dayGridPosition.x);
assertEquals(table.getColumn(0).getIdentifier(), adapter.getColumnIdentifierAt(0));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getInvisibleEventCount());
assertEquals("first row", BasicMonthViewUI.FIRST_WEEK_ROW, dayInGrid.y);
assertNull(evt.getOldValue()); assertSame(evt.getNewValue(), popupMenu); assertTrue(eventReceived);
assertEquals(text, adapter.getString());
assertEquals(-1, adapter.getColumnIndex("unknown"));
assertTrue(CalendarUtils.isStartOfDecade(todayGerman)); assertFalse(CalendarUtils.isStartOfDecade(todayGerman));
assertSame(LayoutStyle.MAC, searchField.getLayoutStyle()); assertTrue(searchField.isMacLayoutStyle()); assertFalse(searchField.getCancelButton().isVisible()); assertTrue(searchField.getFindButton().isVisible()); assertTrue(searchField.getCancelButton().isVisible()); assertTrue(searchField.getFindButton().isVisible()); assertTrue(searchField.isVistaLayoutStyle()); assertTrue(searchField.getCancelButton().isVisible()); assertFalse(searchField.getFindButton().isVisible());
assertSame(btn, BuddySupport.getLeft(textField).get(0)); assertSame(left + btnWidth, blab.getBorderInsets(textField).left); assertSame(left, blab.getBorderInsets(textField).left);
assertEquals(copy, date);
assertEquals(date, normalized);
assertEquals("bound changed, event must be fired", 1, report.getEventCount(EventType.UPPER_BOUND_CHANGED));
assertEquals("last logical column in RToL", BasicMonthViewUI.FIRST_DAY_COLUMN, dayGridPosition.x);
assertEquals(first, ((BasicMonthViewUI) monthView.getUI()).getToday());
assertEquals(0, controller.getModelRowCount()); assertEquals(0, controller.getViewRowCount());
assertEquals(0, report.getEventCount());
assertSame(myFactory, table.getColumnFactory());
assertTrue(SwingUtilities.isDescendingFrom(toolBar, rootPane)); assertFalse(SwingUtilities.isDescendingFrom(toolBar, rootPane));
assertEquals("calendarColumn at absolute column " + column, calendarColumn, dayGridPosition.x);
assertTrue("header height must be > 0", xTable.getTableHeader().getPreferredSize().height > 0);
assertThat(SwingUtilities.isEventDispatchThread(), is(false)); assertThat(SwingUtilities.isEventDispatchThread(), is(true)); assertThat((System.currentTimeMillis() - start) < 100, is(true));
assertEquals("event count must be increased", ++count, changeReport.getEventCount() );
assertEquals(day, midJune.get(Calendar.DATE)); assertEquals(day - 1, midJune.get(Calendar.DATE));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getStructureEventCount()); assertNull(structureEvent.getChildren()); assertEquals(model.getRoot(), structureEvent.getTreePath().getLastPathComponent()); assertEquals(1, structureEvent.getPath().length);
assertEquals(BuddyTextFieldUI.class, wrapper.wrapUI(new JTextField()).getClass()); assertEquals(PromptTextAreaUI.class, wrapper.wrapUI(new JTextArea()).getClass()); assertEquals(SearchFieldUI.class, wrapper.wrapUI(new JXSearchField()).getClass());
assertEquals(0, model.getColumnCount());
assertNotNull(ordinals); assertEquals(0, ordinals.length);
assertSame("Border should NOT have been wrapped.", newBorder, textField.getBorder());
assertTrue(CalendarUtils.isEndOfMonth(todayGerman)); assertEquals(start, todayGerman.getTime()); assertFalse(CalendarUtils.isEndOfMonth(todayGerman));
assertThat(list.getListSelectionListeners().length, is(expectedListSelectionListenerCount));
assertEquals(1, adapter.getColumnIndex(id));
assertTrue(SwingUtilities.isDescendingFrom(toolBar, rootPane)); assertFalse(SwingUtilities.isDescendingFrom(toolBar, rootPane));
assertNotNull("sanity: default icon loaded", icon); assertSame(icon, getIconLabel(header).getIcon());
assertEquals("calendarColumn at absolute column " + column, calendarColumn, dayGridPosition.x);
assertSame(frm, rm);
assertEquals("pref width must be same null value", withValue.width, picker.getPreferredSize().width);
assertEquals(-1, adapter.getColumnIndex("unknown"));
assertEquals(linkAction.isVisited(), hyperlink.isClicked()); assertFalse(linkAction.isVisited()); assertEquals(linkAction.isVisited(), hyperlink.isClicked());
assertNotNull(formatter.getFormats()); assertEquals(uiFormats, formatter.getFormats().length);
assertEquals("bounds of left-most month must be equal", monthBoundsLToR, monthBoundsRToL); assertEquals("bounds of right-most month must be equal", monthBoundsTwoLToR, monthBoundsTwoRToL);
assertTrue("height must be adjusted to reduced number of rows, " + "but was (old/current): " + size.height + "/" + list.getSize().height, size.height - 50 > list.getSize().height);
assertNull(datePicker.getDate());
assertEquals(monthBounds.getLocation(), ui.calendarGrid.getLocation()); assertNull("no hit - bounds must be null", ui.getMonthBoundsAtLocation(19, 20));
assertEquals(1, report.getEventCount()); assertEquals(JXDatePicker.COMMIT_KEY, report.getLastActionCommand());
assertThat(serialized, is(equivalentTo(action)));
assertEquals(date, normalized);
assertEquals("same bound, no event fired", 0, report.getEventCount());
assertFalse("ui keyboard action must have stopped model adjusting", view.getSelectionModel().isAdjusting()); assertEquals(1, report.getEventCount()); assertEquals(EventType.ADJUSTING_STOPPED, report.getLastEvent().getEventType());
assertEquals(1, report.getEventCount()); assertEquals(JXDatePicker.CANCEL_KEY, report.getLastActionCommand());
assertNotNull(ui.getErrorFrame(frame.getContentPane()));
assertEquals(1, adapter.getColumnIndex(id));
assertEquals(1, report.getEventCount()); assertEquals(1, report.getStoppedEventCount());
assertEquals(0, hcl.getEventCount()); assertEquals(0, hcl.getEventCount()); assertEquals(1, hcl.getEventCount()); assertEquals("highlighters", hcl.getLastProperty()); assertEquals(2, columnExt.getHighlighters().length); assertSame(h1, columnExt.getHighlighters()[0]); assertSame(h3, columnExt.getHighlighters()[1]);
assertNotNull(ui.getErrorInternalFrame(new JWindow()));
assertTrue(null == datePicker.getDate());
assertEquals(ListDataEvent.CONTENTS_CHANGED, change.type); assertFalse(change.allRowsChanged); assertEquals(last-first +1, change.length); assertEquals(first, change.startModelIndex); assertEquals(last, change.endModelIndex);
assertSame(rmx, rm);
assertThat(fc.getFilter(), is(nullValue()));
assertEquals(header.getTitle(), getTitleLabel(header).getText());
assertEquals("the date used for selection must be unchanged", copy, today);
assertEquals(1, picker.getFocusListeners().length); assertEquals(0, picker.getFocusListeners().length);
assertEquals(pattern , format.toPattern());
assertEquals("sanity: opaqueness toggled: ", !opaque, titledPanel.isOpaque()); assertEquals("ui must not overwrite custom setting: ", !opaque, titledPanel.isOpaque());
assertEquals("bound changed, event must be fired", 1, report.getEventCount(EventType.LOWER_BOUND_CHANGED));
assertTrue("default renderer expected to be DefaultListRenderer " + "\\n but is " + renderer.getClass(), renderer instanceof DefaultListRenderer);
assertNotNull("popup menu not null", columnControl.popup); assertEquals("menu items must be equal to columns", totalColumnCount, columnMenuItems); assertEquals(priorityColumn.getHeaderValue(), menuItem.getText()); assertEquals("selection of menu must be equal to column visibility", priorityColumn.isVisible(), menuItem.isSelected());
assertNotNull(ui.getErrorInternalFrame(new Applet()));
assertNotNull("array must be not null", list.getListenerList()); assertEquals("array must be empty", 0, list.getListenerList().length);
assertEquals("format pattern must be same as from localized resource", pattern, format.toPattern());
assertTrue(expectedFirstDayOfWeek == monthView.getFirstDayOfWeek());
assertEquals(pattern , format.toPattern());
assertThat(panel.getBackgroundPainter(), is(sameInstance(plafPainter))); assertThat(panel.getBackgroundPainter(), is(sameInstance(plafPainter))); assertThat(panel.getBackgroundPainter(), is(sameInstance(userPainter)));
assertNotNull(ui.getErrorDialog(new JFrame()));
assertFalse(star.getBounds().x == 50); assertFalse(star.getBounds().y == 50); assertEquals(new Rectangle(35,35,30,30), star.getBounds());
assertNotNull(today); assertNotSame(today, other);
assertSame(custom, container.getLayout());
assertEquals(1, report.getEventCount()); assertEquals(1, report.getStructureEventCount()); assertNull(structureEvent.getChildren()); assertNull(structureEvent.getTreePath()); assertNull(structureEvent.getPath());
assertEquals(title, header.getTitle()); assertEquals("the label\'s text must be equal to the headers title", header.getTitle(), getTitleLabel(header).getText());
assertNotNull(ui.getErrorDialog(frame.getContentPane()));
assertEquals(-1, adapter.getColumnIndex("unknown"));
assertEquals(Color.RED, PromptSupport.getBackground(txt)); assertEquals(Color.RED, txt.getClientProperty(PromptSupport.BACKGROUND));
assertTrue(picker.isEnabled()); assertTrue(picker.getEditor().isEnabled()); assertFalse("Do not change the state of the sender during notification processing", button.isEnabled());
assertNotNull("sanity: title font available", font); assertEquals(font, header.getTitleFont());
assertEquals("first logical column in LToR", BasicMonthViewUI.FIRST_DAY_COLUMN, dayGridPosition.x);
assertEquals(Object.class, adapter.getColumnClass());
assertEquals(rows, sorter.convertRowIndexToView(rows));
assertEquals(GREETING + ", World!", unit.greet("World"));
assertEquals(GREETING, unit.greet());
assertFalse(NullEntity.INSTANCE.isStreaming());
assertEquals(Collections.emptySet(), NullEntity.INSTANCE.getTrailerNames());
assertFalse(NullEntity.INSTANCE.isChunked());
assertEquals(0, NullEntity.INSTANCE.getContentLength());
assertNull(NullEntity.INSTANCE.getContentEncoding());
assertEquals(-1, content.read()); assertEquals(-1, content.read());
assertNull(NullEntity.INSTANCE.getContentType());
assertEquals(0, baos.size());
assertEquals("Operation descriptions were not the same", additionMeta.getDescription(), step.getOperationDescription());
assertNotEquals("The initial text should not have been appended as it was too long", initialText + "\\n", logTextArea.getText());
assertTrue("Socket could not be updated", source.updateOutputSockets()); assertTrue("The socket\'s value was false, expected true.", (boolean) source.getOutputSockets().get(0).getValue().get());
assertEquals("hello", exporter.getTable().get(1, 0)); assertEquals("world", exporter.getTable().get(1, 1)); assertNull(exporter.getTable().get(1, 0)); assertNull(exporter.getTable().get(1, 1)); assertTrue(exporter.getTable().row(1).isEmpty()); assertEquals(1, exporter.getTable().rowKeySet().size());
assertEquals((Double) 1368.0, sum2.getValue().get());
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertEquals("The source was not added then removed from the pipeline", Collections.emptyList(), pipeline.getSources());
assertTrue("Map should be empty", publishMap.isEmpty()); assertTrue("doPublish should have been called", doPublishMapWasCalled[0]);
assertTrue("Handler should have run on " + path, didRun[0]);
assertEquals("No error was posted but clear fired a clear event", 0, testWitnessListener .clearRunCount);
assertEquals("The cleared run count was not 1 after multiple clearException calls without an " + "error call between them", 1, testWitnessListener.clearRunCount);
assertEquals(SIZE_OF_CONTROLLER_NOT_SAME_STRING, 2, mockPane.controllerMap.size());
assertEquals("Text was not added to logger", initialLength + "\\n", logTextArea.getText());
assertEquals(1, verifier.getExitCount());
assertTrue("No matrix should have been returned.", outputSocket.getValue().get().empty());
assertEquals("The source was not added to the pipeline", Collections.singletonList(source), pipeline.getSources());
assertTrue("The value should not be present if the source hasn\'t been initialized", imageSource.getValue().get().empty()); assertFalse("The value should now be present since the source has been initialized", imageSource.getValue().get().empty());
assertEquals("Object class should have worked", Object.class, clazz);
assertNull(new SimpleObservable<>().get()); assertEquals(val, new SimpleObservable<>(val).get());
assertFalse("Using CUDA but no available runtime should fail verification", verifier.verify());
assertEquals("A private inner class should be accessible", Inner.class, clazz);
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertThat(e.getCause()).hasMessageThat().contains(exceptionMessage);
assertTrue("Not using CUDA should always pass verification", verifier.verify());
assertTrue("The output socket\'s value was empty.", outputSocket.getValue().isPresent());
assertEquals("Unexpected stripped line", "What I want to keep ", stripped);
assertEquals(SIZE_OF_CONTROLLER_NOT_SAME_STRING, 1, mockPane.controllerMap.size());
assertEquals("The step was not added to the pipeline", Collections.singletonList(step), pipeline.getSteps());
assertEquals("The size of the controller was not 0 after removed with pane", 0, mockPane .controllerMap.size());
assertEquals(Optional.empty(), palette.getOperationByName("Test"));
assertTrue("The output socket was not made previewed when button was clicked", outputSocket .isPreviewed());
assertFalse("runAsSoonAsPossible ran when interrupted", hasRun[0]);
assertNotNull("Project setting was null", pipeline.getProjectSettings().getDeployJvmOptions());
assertEquals("Name was not the new name", name, newName); assertEquals("publishNameChanged was called an unexpected number of times", 1, publishNameChangedCallCount[0]); assertEquals("publishNameChanged should not have been called agian", 1, publishNameChangedCallCount[0]);
assertEquals((Double) 789.0, sum2.getValue().get());
assertTrue("The cleared witness observer was not present", testWitnessListener .clearedWitnessObserver.isPresent()); assertEquals("The cleared run count was not 1", 1, testWitnessListener.clearRunCount); assertEquals("Witness observer was not the same as the observer from the cleared event", witnessObserver, testWitnessListener.clearedWitnessObserver.get());
assertEquals("foo,bar\\n", exporter.export()); assertEquals("foo,bar\\nhello,world\\n", exporter.export()); assertEquals("foo,bar\\n", exporter.export());
assertEquals(Collections.singleton(operation), new HashSet<>(palette.getOperations()));
assertThat(e).hasMessageThat() .contains(ConstructorThrowingFrameGrabber.CONSTRUCTOR_EXCEPTION_MESSAGE);
assertTrue("Should have run in the JavaFX thread!", Platform.isFxApplicationThread()); assertTrue("When running in the JavaFX thread this should have run immediately in the same " + "thread", hasRun[0]);
assertFalse("The output socket was not made not previewed when button was clicked twice", outputSocket.isPreviewed());
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertEquals("Unexpected line result", expected, out);
assertEquals("First line wasn\'t added", firstLine + "\\n", logTextArea.getText());
assertEquals("The step order did not change as expected", Arrays.asList(step2, step1, step3), pipeline.getSteps());
assertEquals("Second line wasn\'t added", firstLine + "\\n" + secondLine + "\\n", logTextArea .getText());
assertFalse("Should not be able to connect incompatible types", pipeline.canConnect( (OutputSocket) b, (InputSocket) a));
assertEquals("a should be 1 behind b", -1, pipeline.compare(a, b)); assertEquals("b should be 1 ahead of a", 1, pipeline.compare(b, a));
assertEquals(Optional.of(operation), palette.getOperationByName("Find Target"));
assertEquals("Unexpected number of sockets", 4, sockets.size()); assertEquals("Wrong publish name", "Publish bar", sockets.get(2).getSocketHint() .getIdentifier()); assertEquals("Wrong publish name", "Publish foo", sockets.get(3).getSocketHint() .getIdentifier());
assertEquals(WRONG_TIME_MSG, 1_000_000, timer.getElapsedTime()); assertTrue("Did not run", ran.get());
assertEquals("Socket types were not the same", testPublishAnnotatedOperation.getSocketType(), SimpleReport.class);
assertNull("No class should exist with name \'" + name + "\'", clazz);
assertEquals("Elapsed time was not reset", 0, timer.getElapsedTime(), 0); assertEquals(WRONG_TIME_MSG, 1_000_000, timer.getElapsedTime()); assertEquals("Elapsed time was not reset", 0, timer.getElapsedTime(), 0);
assertEquals("The connection was not added to the pipeline", Collections.singleton(connection), pipeline.getConnections());
assertEquals("Index of step was not zero", 0, pipeline.indexOf(step)); assertEquals("Index was not -1", -1, pipeline.indexOf(step));
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertTrue("Socket could not be updated", source.updateOutputSockets()); assertEquals("Expected Strings to be equal -- they are not equal", TEST_STRING, source.getOutputSockets().get(0).getValue().get());
assertTrue("Socket could not be updated", source.updateOutputSockets()); assertEquals("Expected numbers to be equal -- they are not equal", TEST_NUMBER, (double) source.getOutputSockets().get(0).getValue().get(), 0.00001);
assertEquals("This text should not be appended as the log is full", currentText, logTextArea .getText());
assertTrue("doPublish should have been called", doPublishNothingWasCalled[0]);
assertTrue("The pipeline was not empty", pipeline.getConnections().isEmpty());
assertEquals("Context was wrong", context, gh.getContext());
assertEquals("Name was not what was expected", newName, publisherName); assertFalse("There was an old name when there shouldn\'t have been", oldName.isPresent()); assertTrue("The first key didn\'t get passed to the map", publishMap.containsKey(SimpleReport.KEY_1)); assertTrue("The second key didn\'t get passed to the map", publishMap.containsKey(SimpleReport.KEY_2)); assertTrue("publishNameChanged never ran", publishNameChangedRan[0]); assertTrue("doPublish never ran", doPublishRan[0]);
assertEquals("Next should have been called once", 1, previousNext.index);
assertTrue("Boolean should be compatible with linkedSocketHint", linkedSocketHint .isCompatibleWith(booleanSocketHint)); assertTrue("Number should be compatible with linkedSocketHint", linkedSocketHint .isCompatibleWith(numberSocketHint));
assertThat(e).hasMessageThat().contains(SHUTDOWN_EXCEPTION_MESSAGE);
assertTrue("The preview button did not initialize selected", initiallyPreviewedOutputSocketController.previewButton().isSelected());
assertEquals("Stripped comment should be empty", "", stripped);
assertEquals("Previous should have been called once", -1, previousNext.index);
assertEquals("Server should return an internal error (500)", 500, response.getStatusLine().getStatusCode()); assertTrue("Handler should have run", didRun[0]);
assertFalse("The socket was able to update with an invalid type", source.updateOutputSockets());
assertEquals("Should have published the expected value", expected, value, 0.001); assertTrue("doPublish with a single value should have been called", doPublishSingleValueWasCalled[0]);
assertEquals("Step did not perform correctly", (Double) (1234.0 + 5678.0), c.getValue().get());
assertFalse(new RegionImpl("x", 99, 201).coveredBy(a)); assertFalse(new RegionImpl("x", 99, 200).coveredBy(a)); assertFalse(new RegionImpl("x", 100, 201).coveredBy(a)); assertTrue(new RegionImpl("x", 100, 200).coveredBy(a)); assertTrue(new RegionImpl("x", 101, 199).coveredBy(a)); assertFalse(a.coveredBy(new RegionImpl("x", 101, 199)));
assertFalse(new PointRegion("x",122).overlap(123)); assertTrue(new PointRegion("x",123).overlap(123)); assertFalse(new PointRegion("x",124).overlap(123)); assertFalse(new PointRegion("x",123).overlap(122)); assertFalse(new PointRegion("x",123).overlap(124)); assertFalse(reg.overlap(121)); assertTrue(reg.overlap(122)); assertTrue(reg.overlap(123)); assertTrue(reg.overlap(124)); assertFalse(reg.overlap(125));
assertEquals(addedValues, addedPos.getReference().get(1)); assertTrue(addedPos.getAlternate().isEmpty()); assertEquals(addedValues, addedPos.getAltMap().get("a").get(3));
assertFalse(insertion.overlap(98)); assertTrue(insertion.overlap(99)); assertTrue(insertion.overlap(100)); assertFalse(insertion.overlap(101));
assertTrue(addedPos.getReference().isEmpty()); assertTrue(addedPos.getAltMap().isEmpty()); assertEquals(addedValues, addedPos.getAlternate().get(2));
assertTrue(VariantHbaseUtil.isInsertion(".","A", VariantType.INSERTION)); assertTrue(VariantHbaseUtil.isInsertion(".","A", VariantType.INDEL)); assertFalse(VariantHbaseUtil.isInsertion("A",".", VariantType.INDEL));
assertEquals("foo", injector.getInstance(String.class));
assertEquals("hi", hi);
assertEquals("yep", j.name());
assertEquals(this.userSettings.get(0), retrieved);
assertEquals(this.reverse(this.userUploadedTimestamps), this.timestampResource.getTimestamps(ui).getData(), "User-uploaded flag returned wrong value for timestamp resource.");
assertTrue(this.roleResource.getAllRoles().contains(Role.ADMIN), "Roles are missing \'admin\' role.");
assertEquals(expectedEvent.getEventType(), actualEvent.getEventType()); assertEquals(expectedEvent.getEventMessage(), actualEvent.getEventMessage());
assertEquals(this.reverse(this.serviceGeneratedTimestamps), this.timestampResource.getTimestamps(ui).getData(), "No params returned wrong value for timestamp resource.");
assertEquals(this.flagSettings.get(0), retrieved);
assertTrue(this.roleResource.getAllRoles().contains(Role.USER), "Roles are missing \'user\' role.");
assertEquals(this.currentLandscape, this.landscapeResouce.getLandscapeById(this.currentLandscapeId), "Wrong landscape was returned.");
assertTrue(Arrays.equals(outputBytes, TEST_BYTES));
assertThat(pathSupplier.get(), is(KeyPathParser.parse("$.a")));
assertThat(schema.getProp("logicalType"), is("pii-bytes"));
assertThat(new SchemaSerializer().handledType(), is(equalTo(Schema.class)));
assertThat(topicExists(topic), is(true));
assertThat(result.get("f1"), is(mapper.createObjectNode().put("f2", "bar")));
assertThat(path.elements().size(), is(2)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is(""));
assertThat(path.elements().size(), is(2)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("abc"));
assertThat(result, is(true));
assertThat(result, is(true));
assertThat(partition.getParameters().get("data-highway.version"), is(DataHighwayVersion.VERSION)); assertThat(partition.getParameters().get("data-highway.last-revision"), is("2018-05-16T09:17:05Z")); assertThat(partition.getSd().getLocation(), is("resolved/location")); assertThat(result, is(addedPartition));
assertThat(underTest.getRecordCounter().get(), is(1L)); assertThat(writers.size(), is(1));
assertThat(result, is(schema1));
assertThat(e.getCause(), instanceOf(RuntimeException.class)); assertThat(e.getCause().getMessage(), is("exception message"));
assertThat(result, is(true));
assertThat(operations.size(), is(0));
assertThat(underTest.validateAndNormaliseLandingInterval("PT30M"), is("PT30M"));
assertThat(config.size(), is(2)); assertThat(config.getProperty("leader.replication.throttled.rate"), is("1")); assertThat(config.getProperty("follower.replication.throttled.rate"), is("2"));
assertThat(result, is(true));
assertThat(schema.getProp("logicalType"), is("pii-string"));
assertTrue(road.isPresent()); assertThat(road.get(), is(road1));
assertThat(value, is("test-value"));
assertThat(result.isPresent(), is(true)); assertThat(result.get().getVersion(), is(1));
assertThat(path.elements().size(), is(2)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("abc"));
assertThat(result.isPresent(), is(false));
assertThat(sendSuccess.get().count(), is(1.0)); assertThat(messageSize.get().takeSnapshot().total(), is((double) size));
assertThat(name, is("truck-park-road-name-partitioncolumnvalue102t8929z-0")); assertThat(namePattern.matcher(name).matches(), is(true));
assertThat(result, is(hiveDestinationModel));
assertThat(notification.getSchemaVersion(), is(SCHEMA_VERSION)); assertThat(notification.getType(), is(RoadNotificationType.SCHEMA_VERSION_ADDED));
assertThat(response.isSuccess(), is(true)); assertThat(response.getTimestamp(), is(100L)); assertThat(response.getMessage(), is("accepted: 0"));
assertThat(future1.isCancelled(), is(false)); assertThat(future2.isCancelled(), is(false)); assertThat(future3.isCancelled(), is(true));
assertEquals(left, right);
assertEquals(refUtf8, out); assertNotEquals(refUtf16, out);
assertThat(operations.size(), is(1)); assertThat(operations.get(0).getOperation(), is(Operation.ADD)); assertThat(operations.get(0).getPath(), is("/status")); assertThat(operations.get(0).getValue(), is(new TrafficControlStatus(true, 12, 3, "")));
assertThat(result, is(schema));
assertThat(result.size(), is(1)); assertThat(leaderInSync.isLeader(), is(false)); assertThat(leaderInSync.isInSync(), is(true));
assertThat(partitioner.apply(i), is(i * 2)); assertThat(partition1.size() + partition2.size(), is(20)); assertThat(partition1.contains(i + 10), is(true)); assertThat(partition2.contains(i), is(false)); assertThat(partition2.contains(i + 10), is(false)); assertThat(partition2.contains(i + 10), is(true)); assertThat(partition1.contains(i), is(false)); assertThat(partition1.contains(i + 10), is(false));
assertThat(underTest.getRecordCounter().get(), is(0L)); assertThat(writers.size(), is(0));
assertThat(result.size(), is(1)); assertThat(disk.getFree() > 0L, is(true)); assertThat(disk.getTotal() > 0L, is(true));
assertThat(underTest.getPath(), is(PATH));
assertThat(pathSupplier.get(), is(nullValue()));
assertThat(mapping.getPath(), is("/partitionPath"));
assertThat(result.get("f1"), is(mapper.createObjectNode().put("f2", "bar")));
assertThat(out, is(notNullValue())); assertEquals(out, ref);
assertThat(result, is(false));
assertThat(result, is(JsonNodeFactory.instance.numberNode(1)));
assertThat(result.size(), is(1)); assertThat(retention, is(Duration.ofMillis(1)));
assertThat(result.get(0), is(mapper.createObjectNode().put("f2", "bar")));
assertThat(schemaVersion.getSchema(), is(SCHEMA)); assertThat(schemaVersion.getVersion(), is(1));
assertThat(fn.apply(message), is(message.get("a").hashCode()));
assertThat(result, is(jsonNode2)); assertThat(store.get(DOCUMENT_ID), is(jsonNode2));
assertThat(metric.count(), is((double) stateCounts.get(checkingState).get())); assertThat(registry.counter("highwaypatrol-messagesCounted").count(), is((double) count));
assertThat(result, is(data));
assertThat(store.get(NAME).getDestinations().get("hive"), is(hiveDestination));
assertNull(store.get(NAME).getDestinations().get("hive"));
assertThat(result, is(false));
assertThat(result, is(raw)); assertThat(captor.getValue().get(), is(raw));
assertThat(MavenUserAgent.token(Logger.class, "org.slf4j", "slf4j-api").toString(), is("slf4j-api/1.7.25"));
assertThat(headers.get("Authorization"), is(singletonList("Basic dXNlcm5hbWU6cGFzc3dvcmQ=")));
assertThat(underTest.getState(), is(LanderTaskRunner.State.IDLE));
assertThat(underTest.getResult(), is(nullValue()));
assertThat(e.getPath(), is("/a/b"));
assertThat(road, is(new KafkaRoad("test_topic6", "road.test_topic6", RoadType.COMPACT, null, null, true)));
assertThat(e.getMessage(), is("1"));
assertThat(nested.get("missing/f2"), is(nullValue()));
assertThat(underTest.getEvents().peek(), is(event));
assertThat(nested.get("missing"), is(nullValue()));
assertThat(e.getMessage(), is("1"));
assertThat(key, is("prefix/roads/road/schemas/1/road_v1.avsc"));
assertThat(result, is(JsonNodeFactory.instance.objectNode().put("c", 1)));
assertThat(sendFailures.get().count(), is(1.0));
assertThat(underTest.getResult(), is(nullValue()));
assertThat(fn.apply(NullNode.getInstance()), is(NullNode.getInstance().hashCode()));
assertThat(e.getMessage(), is("Element \'$.a\' not a traversable type (found \'ARRAY\'), in path: $.a.b.c"));
assertThat(result.isMissingNode(), is(false)); assertThat(result.get("description").textValue(), is("description2"));
assertThat(parts.size(), is(1)); assertThat(part1.getNumber(), is(1)); assertThat(part1.getSize(), is(2)); assertThat(part1.getMd5(), is(MD5_FOR_BYTES_ZERO_ONE)); assertThat(ByteStreams.toByteArray(part1.getInputStream()), is(new byte[] { 0, 1 }));
assertThat(result.isMissingNode(), is(false)); assertThat(result.get("description"), is(nullValue()));
assertThat(result, is(patches));
assertThat(underTest.getProperties().get("max.poll.records"), is("7"));
assertThat(store.get(NAME).getDestinations().get("hive"), is(updatedHiveDestination));
assertThat(result, is(valueBytes));
assertThat(MavenVersion.version(Logger.class, "org.slf4j", "slf4j-api").toString(), is("1.7.25"));
assertThat(store.get(null), is("value")); assertThat(store.containsKey(null), is(true));
assertThat(pathSupplier.get(), is(nullValue()));
assertThat(Iterables.size(result), is(1)); assertThat(Iterables.get(result, 0), is(record));
assertThat(result, is(partETag)); assertThat(request.getValue().getBucketName(), is(BUCKET)); assertThat(request.getValue().getKey(), is(KEY)); assertThat(request.getValue().getPartNumber(), is(1)); assertThat(request.getValue().getPartSize(), is(2L)); assertThat(request.getValue().getMd5Digest(), is("md5")); assertThat(request.getValue().getInputStream(), is(inputStream));
assertThat(key, is("roads/road/schemas/1/road_v1.avsc"));
assertThat(result.getSchema(), is(schema)); assertThat(result, is(record));
assertThat(encoder.encode(message), is(asBytes(message.get("c").hashCode())));
assertThat(result.size(), is(0));
assertThat(patchSet.getValue().getOperations(), is(OPERATIONS));
assertThat(run.isCompletedExceptionally(), is(true));
assertThat(registerSchema, is(schemaVersion2)); assertThat(schemas.size(), is(1)); assertThat(schemas.get(2), is(schemaVersion2));
assertThat(result, is(UPLOAD_ID)); assertThat(request.getValue().getBucketName(), is(BUCKET)); assertThat(request.getValue().getKey(), is(KEY));
assertThat(RoadNameValidator.validateRoadName("road"), is("road"));
assertThat( road, is( new KafkaRoad( "test_topic6", "road.test_topic6", RoadType.COMPACT, new TrafficControlStatus(true, 6, 3, ""), new MessageStatus(124947, 30), false)));
assertThat(KafkaFutures.join(completedFuture("foo")), is("foo"));
assertThat(operations.size(), is(0));
assertThat(result, is(1));
assertThat(path.elements().size(), is(3)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("a.b")); assertThat(path.elements().get(2).isRoot(), is(false)); assertThat(path.elements().get(2).id(), is("cd"));
assertThat(result.size(), is(1)); assertThat(result.get(topicPartition), is(replica));
assertTrue(underTest.isAuthorised(Arrays.asList("1.2.3.4/32"), "1.2.3.4")); assertTrue(underTest.isAuthorised(Arrays.asList("10.0.0.0/8"), "10.255.255.255")); assertTrue(underTest.isAuthorised(Arrays.asList("10.0.0.0/8"), "10.0.0.0"));
assertThat(operations.size(), is(1)); assertThat(operations.get(0).getOperation(), is(Operation.ADD)); assertThat(operations.get(0).getPath(), is("/type")); assertThat(operations.get(0).getValue(), is(RoadType.COMPACT));
assertThat(result.size(), is(1)); assertThat(leaderInSync.isLeader(), is(true)); assertThat(leaderInSync.isInSync(), is(true));
assertThat(result.matches("prefix/123_[a-zA-Z]{8}"), is(true));
assertThat(result, is(true));
assertThat(supplier.get(), is(nullValue()));
assertThat(underTest.test(HOST), is(true));
assertThat(underTest.validateAndNormaliseLandingInterval(null), is(HiveDestination.DEFAULT_LANDING_INTERVAL));
assertThat(encoder.encode(message), is(asBytes(RANDOM_VALUE)));
assertThat(result, is(key));
assertThat(store.get("key"), is(nullValue())); assertThat(store.containsKey("key"), is(true));
assertTrue(store.containsKey(road1.getName())); assertThat(store.get(road1.getName()), is(road1));
assertThat(result, is(schema));
assertThat(result, is(brokerNode));
assertFalse(underTest.isAuthorised(Arrays.asList(), "1.2.3.4"));
assertThat(config, is(future.get()));
assertThat(CharStreams.toString(reader), is("bar"));
assertThat(name.length(), is(63)); assertThat(namePattern.matcher(name).matches(), is(true));
assertThat(mapping.getPath(), is("/enabled"));
assertThat(handler.retryRequest(mock(IOException.class), 3), is(true)); assertThat(handler.retryRequest(mock(IOException.class), 4), is(false));
assertThat(result, is(SchemaSerializationModule.class.getSimpleName()));
assertThat(logsList.get(0).getMessage(), is("That thing was wrong")); assertEquals(Level.ERROR, logsList.get(0).getLevel());
assertThat(underTest.validate("normal2"), is("normal2"));
assertThat(notification.getType(), is(RoadNotificationType.ROAD_CREATED)); assertThat(notification.getRoadName(), is(ROAD_NAME)); assertThat(notification.getContactEmail(), is(EMAIL)); assertThat(notification.getDescription(), is(DESCRIPTION)); assertThat(notification.getTeamName(), is(TEAM_NAME));
assertThat(counter1.count(), is(1.0)); assertThat(counter2.count(), is(1.0)); assertThat(counter3.count(), is(0.0)); assertThat(counter4.count(), is(0.0));
assertThat(operations.size(), is(0));
assertThat(registerSchema, is(schemaVersion1)); assertThat(schemas.size(), is(1)); assertThat(schemas.values().contains(schemaVersion1), is(true));
assertThat(result.isMissingNode(), is(false)); assertThat(result.get("description").textValue(), is("description1"));
assertThat(request.getValue().getBucketName(), is(BUCKET)); assertThat(request.getValue().getKey(), is(KEY)); assertThat(request.getValue().getUploadId(), is(UPLOAD_ID)); assertThat(request.getValue().getPartETags(), is(partETags));
assertEquals(ImmutableList.of(broker1, broker2, broker3), underTest.getAllBrokers());
assertThat(result, is(road));
assertThat(offsets.size(), is(2)); assertThat(offsets.get(0), is(2L)); assertThat(offsets.get(1), is(4L));
assertThat(defaultOffsetHelp, containsString(DefaultOffset.LATEST.name())); assertThat(defaultOffsetHelp, containsString(DefaultOffset.EARLIEST.name())); assertThat(defaultOffsetHelp, containsString(String.format("(default: %s)", DefaultOffset.LATEST.name())));
assertFalse(onramp.isPresent());
assertThat(durationArgumentCaptor.getValue(), is(both(greaterThan(ofMillis(9L))).and(lessThan(ofMillis(31L)))));
assertThat(result, is(patches));
assertThat(e.getMessage(), is("Element \'$.a\' not a traversable type (found \'MAP\'), in path: $.a.b[\\"c\\"]"));
assertThat(schemas.size(), is(2));
assertThat(operation, is(PatchOperation.replace("/enabled", Boolean.FALSE)));
assertThat(result, is(hiveDestinationModel));
assertThat(result, is(false));
assertThat(result, is(true));
assertThat(result, is(1));
assertThat(timeunitCaptor.getValue().toMillis(longCaptor.getValue()), is(4L));
assertThat(schemas.size(), is(3)); assertThat(schemas.get(1), is(schemaVersion1)); assertThat(schemas.get(2), is(schemaVersion2)); assertThat(schemas.get(3), is(schemaVersion3));
assertThat(result, is(true));
assertThat(underTest.getResult(), is(nullValue()));
assertThat(result1.get(), is(1)); assertThat(result2.get(), is(2)); assertThat(result3.get(), is(3)); assertThat(result4.get(), is(4)); assertTrue(e.getCause() instanceof IllegalStateException);
assertThat(result, is(true));
assertThat(operation, is(PatchOperation.replace("/metadata", emptyMap())));
assertThat(operations.size(), is(1)); assertThat(operation.getOperation(), is(Operation.REPLACE)); assertThat(operation.getPath(), is("/destinations/hive/status/truckParkState")); assertThat(operation.getValue(), is("bar"));
assertThat(result.isPresent(), is(true)); assertThat(result.get().getVersion(), is(2));
assertThat(operation, is(PatchOperation.replace("/enabled", Boolean.TRUE)));
assertThat(createdRoad.getCompatibilityMode(), is(Road.DEFAULT_COMPATIBILITY_MODE)); assertThat(createdRoad, is(road));
assertThat(result, is(raw)); assertThat(captor.getValue().get(), is(raw));
assertThat(result, is(NullNode.getInstance()));
assertThat(serviceOut, is(serviceV2));
assertThat(tags, hasItems(Tag.of("road", "road"), Tag.of("authentication", "AUTHENTICATED"), Tag.of("authorisation", "AUTHORISED")));
assertThat(mapping.getPath(), is("/foo"));
assertThat(patch.getDocumentId(), is(road.getName())); assertThat(patch.getOperations().size(), is(1)); assertThat(patch.getOperations().get(0).getOperation(), is(Operation.REPLACE)); assertThat(patch.getOperations().get(0).getPath(), is("/partitionPath")); assertThat(patch.getOperations().get(0).getValue(), is(partitionPath));
assertThat(fn.apply(MissingNode.getInstance()), is(RANDOM_VALUE));
assertThat(standardResponse.isSuccess(), is(failure)); assertThat(standardResponse.getMessage(), is(message2));
assertThat(underTest.isConnected(), is(false));
assertThat(result, is(MissingNode.getInstance())); assertThat(store.get(DOCUMENT_ID), is(nullValue()));
assertThat(underTest.get(), is(configMap1));
assertThat(operations.size(), is(0));
assertThat(reader.readValue(bytes), is(patchSet));
assertThat(result, is(Version.unknownVersion()));
assertThat(result.isMissingNode(), is(false)); assertThat(result.path("name").textValue(), is("road1"));
assertThat(response.isSuccess(), is(false)); assertThat(response.getMessage(), is("error"));
assertThat(contentCaptor.getValue().available(), is(0)); assertThat(metadataCaptor.getValue().getContentLength(), is(0L));
assertThat(e.getMessage(), is("Element \'$[\\"a\\"].b\' not a traversable type (found \'STRING\'), in path: $[\\"a\\"].b[\\"c\\"]"));
assertThat(value, is("test-value")); assertThat(value, is("test-value"));
assertThat(name, is("truck-park-road-name-partitioncolumnvalue10t28929z-0")); assertThat(namePattern.matcher(name).matches(), is(true));
assertThat(underTest.getRequested(), is(10L));
assertThat(patch.getDocumentId(), is(road.getName())); assertThat(patch.getOperations().size(), is(1)); assertThat(patch.getOperations().get(0).getOperation(), is(Operation.ADD)); assertThat(patch.getOperations().get(0).getPath(), is("/deleted")); assertThat(patch.getOperations().get(0).getValue(), is(true));
assertThat(connectionManager, is(instanceOf(PoolingHttpClientConnectionManager.class))); assertThat(poolingConnectionManager.getDefaultMaxPerRoute(), is(9)); assertThat(poolingConnectionManager.getMaxTotal(), is(9)); assertThat(poolingConnectionManager.getValidateAfterInactivity(), is(1000));
assertThat(operation, is(PatchOperation.replace("/partitionPath", "$.foo")));
assertThat(supplier.get(), is(KeyPathParser.parse("$.a")));
assertThat(result.isPresent(), is(true)); assertThat(result.get().getVersion(), is(1));
assertThat(roadNames.size(), is(2)); assertTrue(roadNames.contains("road1")); assertTrue(roadNames.contains("road2"));
assertThat(underTest.getRequested(), is(0L)); assertThat(message2, is(message));
assertThat(result, is(jsonNode1)); assertThat(store.get(DOCUMENT_ID), is(jsonNode1));
assertThat(result, is(nullValue()));
assertFalse(underTest.isAuthorised(Arrays.asList("1.2.3.4/24", "1.2.4.4/24"), "1.2.5.4"));
assertThat(validationFailures.get().count(), is(1.0));
assertThat(result.get("name").asText(), is(TEST_ROAD));
assertThat(result, is(mapper.createObjectNode().put("f1", "bar")));
assertThat(result.isPresent(), is(false));
assertThat(underTest.getRequested(), is(0L));
assertThat(underTest.validate("normal_road"), is("normal_road"));
assertThat(result, is(keyBytes));
assertThat(result.isPresent(), is(false));
assertThat(result, is(true));
assertTrue(roads.isEmpty());
assertThat(result.isMissingNode(), is(true));
assertThat(captured.getRemoteAddr(), is("4.3.2.1"));
assertThat(result, is(jsonNode1)); assertThat(store.get(DOCUMENT_ID), is(jsonNode1));
assertThat(operation, is(PatchOperation.replace("/enabled", Boolean.TRUE)));
assertThat(encoder.encode(message), is(asBytes(RANDOM_VALUE)));
assertTrue(underTest.isAuthorised(Arrays.asList("1.2.3.4/24", "1.2.4.4/24"), "1.2.4.4"));
assertThat(path.elements().size(), is(3)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("a")); assertThat(path.elements().get(2).isRoot(), is(false)); assertThat(path.elements().get(2).id(), is("b"));
assertThat(underTest.getProperties().get("max.poll.records"), is("10"));
assertThat(result.size(), is(1)); assertThat(offsets.getBeginning(), is(1L)); assertThat(offsets.getEnd(), is(3L)); assertThat(offsets.getCount(), is(2L));
assertThat(underTest.getRoadName(), is(ROAD_NAME));
assertThat(underTest.getRequested(), is(0L));
assertThat(store.containsKey("doc1"), is(false));
assertThat(result, is(true));
assertThat(new SchemaDeserializer().handledType(), is(equalTo(Schema.class)));
assertThat(schema.isPresent(), is(false));
assertThat(captured.getRemoteAddr(), is("1.2.3.4"));
assertThat(result.size(), is(1)); assertThat(leaderInSync.isLeader(), is(true)); assertThat(leaderInSync.isInSync(), is(false));
assertThat(result, is(""));
assertThat(mapping.getPath(), is("/metadata"));
assertThat(result, is(MissingNode.getInstance())); assertThat(store.get(DOCUMENT_ID), is(nullValue()));
assertThat(jsonNode.isLong(), is(true)); assertThat(jsonNode.longValue(), is(0L));
assertThat(handler.retryRequest(mock(InterruptedIOException.class), 1, mock(HttpContext.class)), is(false)); assertThat(handler.retryRequest(mock(UnknownHostException.class), 1, mock(HttpContext.class)), is(false)); assertThat(handler.retryRequest(mock(ConnectException.class), 1, mock(HttpContext.class)), is(false)); assertThat(handler.retryRequest(mock(SSLException.class), 1, mock(HttpContext.class)), is(false));
assertThat(notification.getSchemaVersion(), is(SCHEMA_VERSION)); assertThat(notification.getType(), is(RoadNotificationType.SCHEMA_VERSION_DELETED));
assertEquals(broker, underTest.getCurrentBroker());
assertThat(headers.get("User-Agent").get(0), startsWith("road-offramp-v2-client/"));
assertThat(supplier.get(), is(nullValue()));
assertThat(schemaString, is(SCHEMA.toString())); assertThat((int) objectMetadata.getContentLength(), is(out.toByteArray().length));
assertThat(handler.retryRequest(mock(IOException.class), 29, mock(HttpContext.class)), is(true));
assertThat(result.getField("f").schema().getProp("logicalType"), is("pii-string"));
assertThat(jsonNode.isBinary(), is(true)); assertThat(jsonNode.binaryValue().length, is(0));
assertThat(path.elements().size(), is(1)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$"));
assertThat(result, is(value));
assertThat(pathSupplier.get(), is(nullValue()));
assertThat(schema.getProp("logicalType"), is("pii-bytes"));
assertThat(jsonNode.asText(), is("replaced"));
assertThat(store.get(NAME).getDestinations().get("hive"), is(hiveDestination));
assertThat(captor.getValue().getRebalanceListener(), is(rebalanceListener));
assertThat(recordsCaptor.getValue().get(), is(records)); assertThat(underTest.getBuffer().peek(), is(record));
assertTrue(operations.isEmpty());
assertThat(underTest.getProperties().get("max.poll.records"), is("5"));
assertEquals(refUtf8, out); assertNotEquals(refUtf16, out);
assertThat(sendSuccess.get().count(), is(1.0)); assertThat(messageSize.get().takeSnapshot().total(), is((double) size));
assertTrue(underTest.isAuthorised(Arrays.asList("1.2.3.4/24", "1.2.4.4/24"), "1.2.3.4"));
assertThat(result, is(brokerNode));
assertThat(result, is("keyPrefix/2017-05-04/20170504T134729Z.json.gz"));
assertThat(result.isPresent(), is(false));
assertThat(jsonNode.isNull(), is(true));
assertThat(underTest.read(emptyNode), is(road));
assertThat(underTest.test(HOST + "foo"), is(false));
assertThat(encoder.encode(message), is(asBytes(message.get("a").hashCode())));
assertThat(schema.getProp("logicalType"), is("pii-string"));
assertNull(store.get(road1.getName()));
assertNotEquals(o1, o2); assertNotEquals(o3, o4); assertNotEquals(o5, o6);
assertTrue(roads.isEmpty()); assertThat(roads.size(), is(1)); assertTrue(roads.contains("road1"));
assertThat(result, is("bar"));
assertThat(result, is(config));
assertThat(result, is(MissingNode.getInstance()));
assertThat(result.size(), is(1)); assertThat(leaderInSync.isLeader(), is(false)); assertThat(leaderInSync.isInSync(), is(true));
assertThat(fn.apply(message), is(RANDOM_VALUE));
assertThat(path.elements().size(), is(2)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("a"));
assertThat(path.elements().size(), is(2)); assertThat(path.elements().get(0).isRoot(), is(true)); assertThat(path.elements().get(0).id(), is("$")); assertThat(path.elements().get(1).isRoot(), is(false)); assertThat(path.elements().get(1).id(), is("a"));
assertThat(patchSet.getValue().getOperations(), is(OPERATIONS));
assertThat(result, is(cidrBlocks));
assertThat(schemaV1.get().getSchema(), is(schema1)); assertThat(schemaV2.get().getSchema(), is(schema2)); assertThat(schemaV3.get().getSchema(), is(schema3)); assertThat(schemaV4.isPresent(), is(false));
assertThat(metadata.getName(), is(TRUCK_PARK_NAME)); assertThat(metadata.getLabels(), is(ImmutableMap .<String, String> builder() .put(APP, TRUCK_PARK) .put(VERSION, IMAGE_VERSION) .put(ROAD, NAME) .build())); assertThat(metadata.getAnnotations(), is(Collections.emptyMap()));
assertThat(serializer, is(instanceOf(SchemaSerializer.class))); assertThat(deserializer, is(instanceOf(SchemaDeserializer.class)));
assertThat(underTest.getState(), is(State.IDLE)); assertThat(landerConfiguration, is(expectedLanderConfiguration)); assertThat(underTest.getState(), is(State.LANDING));
assertThat(e.getMessage(), is("Element \'$\' not a traversable type (found \'ARRAY\'), in path: $[\\"a\\"]"));
assertThat(responses.size(), is(3)); assertThat(responses.get(0).isSuccess(), is(false)); assertThat(responses.get(0).getMessage(), is("error")); assertThat(responses.get(1).isSuccess(), is(false)); assertThat(responses.get(1).getMessage(), is("error")); assertThat(responses.get(2).isSuccess(), is(false)); assertThat(responses.get(2).getMessage(), is("error"));
assertThat(gauge.getValue().getValue(), is(1L));
assertThat(result.isPresent(), is(true)); assertThat(result.get(), is(hiveDestination));
assertThat(operations.size(), is(0));
assertThat(e.getMessage(), is("Element \'$.a(UnionIndex:1)\' not a traversable type (found \'INT\'), in path: $.a.c"));
assertThat(standardResponse.isSuccess(), is(success)); assertThat(standardResponse.getMessage(), is(message1));
assertThat(result, is(jsonNode2)); assertThat(store.get(DOCUMENT_ID), is(jsonNode2));
assertThat(result.size(), is(1)); assertThat(size, is(1L));
assertTrue(onramp.isPresent());
assertThat(result, is(schema1));
assertThat(result, is(true));
assertFalse(road.isPresent());
assertThat(fn.apply(node), is(node.hashCode()));
assertThat(result, is(1));
assertTrue(schemas.isEmpty()); assertThat(schemas.size(), is(1)); assertTrue(schemas.values().contains(schemaVersion1));
assertThat(result, is(mapper.createObjectNode().put("f1", "bar")));
assertFalse(road.isPresent());
assertTrue(store.get(road1.getName()).isEnabled());
assertFalse(underTest.isAuthorised(Arrays.asList("1.2.3.4/24"), "1.2.4.4"));
assertThat(result, is(false));
assertThat(CharStreams.toString(reader), is("bar"));
assertThat(request.getValue().getBucketName(), is(BUCKET)); assertThat(request.getValue().getKey(), is(KEY)); assertThat(request.getValue().getUploadId(), is(UPLOAD_ID));
assertThat(createdRoad.getCompatibilityMode(), is(Road.DEFAULT_COMPATIBILITY_MODE)); assertThat(createdRoad, is(road));
assertTrue(new File("target/gen/com/github/davidmoten/bean/immutable/Example.java").exists());
assertEquals(2, list.size()); assertEquals("a", list.get(0).name()); assertEquals("0", list.get(0).value()); assertEquals("b", list.get(1).name()); assertEquals("1", list.get(1).value());
assertEquals(message.getAllRecipients()[0].toString(), user.getEmail()); assertEquals(message.getFrom()[0].toString(), "localhost@localhost"); assertEquals(message.getDataHandler().getContentType(), "text/html;charset=UTF-8"); assertTrue(!message.getContent().toString().isEmpty());
assertEquals(result.getLogin(), user.getLogin()); assertEquals(result.getLogin(), user.getLogin()); assertTrue(result.getAuthorities().contains(this.authorityRepository.findById(Constants.USER_AUTHORITY).get()));
assertEquals(message.getAllRecipients()[0].toString(), user.getEmail()); assertEquals(message.getFrom()[0].toString(), "localhost@localhost"); assertEquals(message.getDataHandler().getContentType(), "text/html;charset=UTF-8"); assertTrue(!message.getContent().toString().isEmpty());
assertFalse(users.isEmpty()); assertTrue(users.isEmpty());
assertEquals(message.getAllRecipients()[0].toString(), user.getEmail()); assertEquals(message.getFrom()[0].toString(), "localhost@localhost"); assertEquals(message.getDataHandler().getContentType(), "text/html;charset=UTF-8"); assertTrue(!message.getContent().toString().isEmpty());
assertTrue(result.isEmpty());
assertEquals(1, xTotalCountHeaders.size()); assertEquals(400L, Long.valueOf(xTotalCountHeaders.get(0)).longValue());
assertTrue(result.isPresent());
assertNotNull(result); assertEquals(expected.getEmail(), result.getEmail()); assertNotNull(result.getResetKey());
assertEquals(expected.getLogin(), result.getLogin());
assertFalse(result.isPresent());
assertTrue(this.userRepository.findByLogin("testtest").isPresent()); assertFalse(this.userRepository.findByLogin("testtest").isPresent());
assertEquals(this.artaeumUserDetailsService.loadUserByUsername("testlogin").getUsername(), userId); assertEquals(this.artaeumUserDetailsService.loadUserByUsername("test@email.com").getUsername(), userId);
assertNotNull(res); assertFalse(res.isEmpty()); assertTrue(res.contains("root1")); assertTrue(res.contains("root2"));
assertNotNull(res); assertEquals(DaemonResultCode.OK, res.getResultCode()); assertNotNull(res.getWatchList());
assertNotNull(actualLocalDir); assertEquals(testConfig.getLocalDir(), actualLocalDir.getCanonicalFile());
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(0));
assertEquals("Expected different serialization", "(UnitAAA4,UnitBBB5)", vc1.toString());
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(-1));
assertNotNull("Chunk checksum should not be null.", lastChunk.getChecksum()); assertArrayEquals("Checksums of input and output file do not match.", inputFileChecksum, outputFileChecksum); assertArrayEquals("Last chunk\'s getFileChecksum() should be the file checksum.", inputFileChecksum, lastChunk.getFileChecksum());
assertFalse(CipherUtil.isEncrypted(testFile));
assertNotNull(res); assertEquals(status, res);
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(0));
assertNotNull(res); assertEquals(DaemonResultCode.OK, res.getResultCode()); assertNotNull(res.getWatchList()); assertTrue(res.getWatchList().isEmpty());
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(1));
assertNotNull(res); assertEquals(DaemonAction.ADD, res);
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(0));
assertNotSame(cipherSpec1.hashCode(), cipherSpec2.hashCode()); assertNotSame(cipherSpec1, cipherSpec2); assertEquals(0x01, cipherSpec1.getId());
assertEquals(128/8, derivedKey1.getEncoded().length); assertEquals(128/8, derivedKey2.getEncoded().length); assertFalse(Arrays.equals(derivedKey1.getSalt(), derivedKey2.getSalt())); assertFalse(Arrays.equals(derivedKey1.getEncoded(), derivedKey2.getEncoded()));
assertNotNull(res); assertEquals(DaemonResultCode.OK, res);
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(-1));
assertNull("No chunk expected, but data received.", chunkEnumeration.nextElement()); assertFalse("hasElements() should return \'false\' if no chunk available.", chunkEnumeration.hasMoreElements());
assertNull(actualLocalDir);
assertNotNull(res); assertTrue(res.isEmpty());
assertEquals(10, randomArray1.length); assertEquals(10, randomArray2.length); assertFalse(Arrays.equals(randomArray1, randomArray2));
assertThat(databaseVersionHeaderComparator.compare(dbvh1, dbvh2), is(-1));
assertNotNull(loadedConfigTO); assertEquals(testConfig.getDisplayName(), loadedConfigTO.getDisplayName()); assertEquals(testConfig.getMachineName(), loadedConfigTO.getMachineName()); assertEquals(testConfig.getMasterKey(), loadedConfigTO.getMasterKey());
assertEquals(4, availableCipherSpecs.size()); assertEquals(availableCipherSpecs.get(CipherSpecs.AES_128_GCM).getAlgorithm(), "AES/GCM/NoPadding");
assertNotNull(actualLocalDir); assertEquals(testConfig.getLocalDir(), actualLocalDir.getCanonicalFile());
assertNotNull(res); assertEquals(DaemonResultCode.OK, res.getResultCode()); assertNotNull(res.getWatchList()); assertEquals(1, res.getWatchList().size()); assertEquals(tempWatchRootAppFolder.getParentFile().getAbsolutePath(), res.getWatchList().get(0).getPath());
assertNotNull(res); assertEquals(folder, res);
assertNotNull(res); assertFalse(res.isEmpty()); assertTrue(res.contains(folder));
assertNotNull(res); assertEquals(DaemonResultCode.NOK, res);
assertNotNull(res); assertTrue(res.isEmpty());
assertNotNull(options.getAction()); assertEquals(DaemonAction.LIST, options.getAction());
assertEquals("Expected clock value of cloned clock to be different.", 4L, (long) vc2.getClock("UnitA")); assertEquals("Expected clock value of cloned clock to be different.", 5L, (long) vc2.getClock("UnitB"));
assertEquals(twofish128CipherSpec.getId(), 2); assertEquals(twofish128CipherSpec.getAlgorithm(), "Twofish/GCM/NoPadding"); assertEquals(twofish128CipherSpec.getKeySize(), 128); assertEquals(twofish128CipherSpec.getIvSize(), 128); assertEquals(twofish128CipherSpec.needsUnlimitedStrength(), false); assertNotNull(twofish128CipherSpec.toString());
assertEquals("Other toString() result expected.", "TTTD-"+CHUNK_SIZE+"-"+TttdChunker.DEFAULT_DIGEST_ALG+"-"+TttdChunker.DEFAULT_FINGERPRINT_ALG, chunker.toString());
assertEquals("Expected clock value to be different.", 0L, (long) vc.getClock("NonExistingUnit"));
assertTrue(CipherUtil.isEncrypted(testFile));
assertTrue(unit == mCalendarManager.getUnits());
assertEquals(unit, manager.getUnits());
assertEquals(7, days.size()); assertEquals(first.plusDays(i), day.getDate()); assertTrue(day.isToday()); assertFalse(day.isToday()); assertTrue(day.isEnabled()); assertFalse(day.isEnabled());
assertFalse(week.hasNext());
assertEquals("April 2015", headerText);
assertTrue(mDay.equals(mDay));
assertNull(mWeek.getFirstDateOfCurrentMonth(LocalDate.parse("2015-08-01")));
assertTrue(week.hasPrev());
assertTrue(result);
assertTrue(week.hasPrev());
assertEquals("Sun", dayName);
assertFalse(mMonth.select(null)); assertFalse(mMonth.isSelected());
assertEquals(LocalDate.parse("2014-08-01"), mWeek.getFirstDateOfCurrentMonth(LocalDate.parse("2014-08-23")));
assertFalse(mDay.isEnabled());
assertEquals(min, mCalendarManager.getMinDate());
assertEquals(max, mCalendarManager.getMaxDate());
assertEquals(LocalDate.parse("2014-10-01"), mMonth.getFirstDateOfCurrentMonth(mToday));
assertFalse(mUnit.isIn(nextWeek.withDayOfWeek(DateTimeConstants.MONDAY)));
assertTrue(mUnit.equals(mUnit));
assertEquals(0, unit.getFirstWeek(null));
assertNull(mMonth.getFirstDateOfCurrentMonth(LocalDate.parse("2014-09-30")));
assertFalse(mWeek.isSelected());
assertFalse(mDay.isCurrent());
assertTrue(mMonth.hasPrev());
assertEquals(week, mCalendarManager.getUnits());
assertTrue(mWeek.hasPrev());
assertTrue(mUnit.isInView(today.withDayOfWeek(DateTimeConstants.MONDAY))); assertTrue(mUnit.isInView(today.withDayOfWeek(DateTimeConstants.WEDNESDAY))); assertTrue(mUnit.isInView(today.withDayOfWeek(DateTimeConstants.SUNDAY)));
assertTrue(mDay.equals(day)); assertTrue(day.equals(mDay)); assertEquals(day.hashCode(), mDay.hashCode());
assertTrue(result); assertEquals(to.withDayOfMonth(1), mCalendarManager.getActiveMonth());
assertFalse(week.hasNext());
assertFalse(mMonth.isSelected()); assertFalse(week.isSelected());
assertEquals(mRangeUnit.getFrom(), mRangeUnit.getFirstEnabled());
assertEquals(0, unit.getFirstWeek(date.plusDays(12)));
assertEquals(ViewGroup.LayoutParams.WRAP_CONTENT, params.height);
assertEquals(-1, mMonth.getSelectedIndex());
assertTrue(week.hasNext());
assertEquals(now, mCalendarManager.getSelectedDay()); assertEquals(min, mCalendarManager.getMinDate()); assertEquals(max, mCalendarManager.getMaxDate()); assertEquals(now.withDayOfMonth(1), mCalendarManager.getActiveMonth()); assertEquals(unit, mCalendarManager.getUnits());
assertFalse(mMonth.isSelected());
assertEquals(delay, mViewHolder.getDelay(), 0);
assertTrue(result); assertEquals(from.withDayOfMonth(1), mCalendarManager.getActiveMonth());
assertEquals("header", header);
assertTrue(mMonth.select(mToday)); assertTrue(mMonth.isSelected()); assertTrue(week.isSelected()); assertFalse(week.isSelected());
assertEquals("week 17", headerText);
assertNull(mMonth.getFirstDateOfCurrentMonth(null));
assertTrue(mWeek.next()); assertEquals(nextWeek, mWeek.getFrom()); assertEquals(nextWeekEnd, mWeek.getTo()); assertEquals(nextWeek, mWeek.getDays().get(0).getDate()); assertEquals(nextWeekEnd, mWeek.getDays().get(6).getDate());
assertEquals(week, mRangeUnit.getFirstWeek(today));
assertFalse(mMonth.isSelected());
assertTrue(mUnit.isIn(today.withDayOfWeek(DateTimeConstants.MONDAY))); assertTrue(mUnit.isIn(today.withDayOfWeek(DateTimeConstants.WEDNESDAY))); assertTrue(mUnit.isIn(today.withDayOfWeek(DateTimeConstants.SUNDAY)));
assertFalse(mUnit.isInView(nextWeek.withDayOfWeek(DateTimeConstants.MONDAY)));
assertFalse(mUnit.isIn(prevWeek.withDayOfWeek(DateTimeConstants.SUNDAY)));
assertEquals(5, weeks.size()); assertEquals(base.plusWeeks(i), weeks.get(i).getFrom()); assertEquals(base.plusWeeks(i).withDayOfWeek(DateTimeConstants.SUNDAY), weeks.get(i).getTo());
assertFalse(mDay.equals(null));
assertEquals(0, unit.getFirstWeek(date.plusMonths(1).plusWeeks(1)));
assertEquals(100, mViewHolder.getHeight()); assertEquals(0, mViewHolder.getMinHeight()); assertEquals(100, mViewHolder.getMaxHeight());
assertTrue(result); assertTrue(mCalendarManager.getUnits().isSelected());
assertNull(mMonth.getFirstDateOfCurrentMonth(LocalDate.parse("2015-10-13")));
assertTrue(mMonth.prev()); assertEquals(LocalDate.parse("2014-09-01"), mMonth.getFrom()); assertEquals(LocalDate.parse("2014-09-30"), mMonth.getTo()); assertEquals(LocalDate.parse("2014-09-01"), mMonth.getWeeks().get(0).getFrom());
assertTrue(mWeek.prev()); assertEquals(start, mWeek.getFrom()); assertEquals(end, mWeek.getTo()); assertEquals(start, mWeek.getDays().get(0).getDate()); assertEquals(end, mWeek.getDays().get(6).getDate());
assertEquals(today.plusDays(1), unit.getFirstEnabled());
assertFalse(mWeek.select(null));
assertFalse(month.next()); assertEquals(LocalDate.parse("2014-10-01"), month.getFrom()); assertEquals(LocalDate.parse("2014-10-31"), month.getTo());
assertTrue(mDay.isSelected());
assertFalse(week.hasPrev());
assertTrue(mMonth.next()); assertEquals(LocalDate.parse("2014-11-01"), mMonth.getFrom()); assertEquals(LocalDate.parse("2014-11-30"), mMonth.getTo()); assertEquals(LocalDate.parse("2014-10-27"), mMonth.getWeeks().get(0).getFrom());
assertTrue(mWeek.select(LocalDate.parse("2014-07-31"))); assertTrue(mWeek.isSelected()); assertTrue(day.isSelected()); assertFalse(day.isSelected());
assertEquals(ViewGroup.LayoutParams.WRAP_CONTENT, params.height);
assertTrue(mMonth.hasNext());
assertTrue(result);
assertTrue(view == mViewHolder.getView());
assertTrue(mWeek.hasNext());
assertFalse(mWeek.isSelected()); assertFalse(day.isSelected());
assertEquals(duration, mViewHolder.getDuration(), 0);
assertFalse(mUnit.isSelected()); assertTrue(mUnit.isSelected());
assertEquals(week, unit.getFirstWeek(date));
assertEquals(0, unit.getFirstWeek(date.plusDays(12)));
assertTrue(week.hasNext());
assertEquals("5", mDay.getText());
assertNull(mWeek.getFirstDateOfCurrentMonth(null));
assertTrue(week.hasPrev());
assertNull(mWeek.getFirstDateOfCurrentMonth(LocalDate.parse("2014-09-01")));
assertFalse(week.hasPrev());
assertEquals(1, mMonth.getSelectedIndex());
assertFalse(mUnit.equals(null));
assertEquals(today.withDayOfWeek(DateTimeConstants.MONDAY), unit.getFirstEnabled());
assertEquals(7, days.size()); assertEquals(first.plusDays(i), day.getDate()); assertTrue(day.isToday()); assertFalse(day.isToday()); assertTrue(day.isEnabled());
assertTrue(week.hasNext());
assertFalse(mUnit.isInView(prevWeek.withDayOfWeek(DateTimeConstants.SUNDAY)));
assertNotNull(graphQLQuery); assertTrue(graphQLQuery.contains("\\"arg\\": {\\n" + " \\"uid\\": \\"uidWellbore\\",\\n" + " \\"uidWell\\": \\"uidWell\\""));
assertNotNull(graphQLQuery); assertEquals( producedMap, expectedMap );
assertEquals(expected, actual);
assertEquals("DoT", this.valve.getName());
assertEquals(expected, actual);
assertNotNull(obj); assertNotEquals(obj, ""); assertThat(obj, containsString("1.4.1.1"));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(-447, resultCode);
assertEquals(expected, actual);
assertNotNull(graphQLQuery); assertTrue(graphQLQuery.contains("title"));
assertNotNull(obj); assertNotEquals(obj, ""); assertThat(obj, containsString("1.3.1.1"));
assertEquals( "Valve for interaction with Drillops Town", this.valve.getDescription() );
assertEquals("hogehogehoge", Intenso.invoke(target, "hoge"));
assertNotEquals("hogehogehogehoge", Build.BRAND); assertEquals("hogehogehogehoge", Build.BRAND);
assertEquals("fugafugafuga", Intenso.invoke(InvocationTarget.class, "fuga"));
assertEquals("env-test", KeyPair.normalizeName("env:test"));
assertEquals(2, result.size()); assertEquals("text1", result.get(0)); assertEquals("text2", result.get(1));
assertThat(document).contains("\\"Service\\":\\"ec2.amazonaws.com\\"");
assertEquals("as-scale-out", policy.id); assertEquals(80d, policy.cpuUtilizationPercentage, 0.0001); assertEquals(ComparisonOperator.GreaterThanOrEqualToThreshold, policy.comparisonOperator); assertEquals(3, policy.lastMinutes); assertEquals(15, policy.adjustmentPercentage);
assertEquals((Integer) 4, result.get());
assertThat(Randoms.alphaNumeric(3)).hasSize(3); assertThat(Randoms.alphaNumeric(5)).hasSize(5); assertThat(Randoms.alphaNumeric(10)).hasSize(10);
assertTrue(elb.httpsCertChanged());
assertThat(document).contains("\\"Service\\":\\"ec2.amazonaws.com.cn\\"");
assertTrue(deleteAdminTask.dependencies.contains(deleteWebRuleTask));
assertEquals(Protocol.TCP, protocol.ipProtocol); assertEquals(9300, protocol.fromPort); assertEquals(9300, protocol.toPort);
assertFalse(changed);
assertThat(builder.parseSize("30G")).isEqualTo(30);
assertNull(loader.bucketId(ENV, "test")); assertNull(loader.bucketId(ENV, "en")); assertNull(loader.bucketId(ENV, "env-"));
assertEquals(Protocol.TCP, protocol.ipProtocol); assertEquals(10000, protocol.fromPort); assertEquals(12345, protocol.toPort);
assertEquals(Protocol.TCP, protocol.ipProtocol); assertEquals(80, protocol.fromPort); assertEquals(80, protocol.toPort);
assertEquals("test", loader.bucketId(ENV, "env-test"));
assertTrue(changed);
assertEquals("us-east-1a", subnet.firstRemoteSubnet().getAvailabilityZone());
assertEquals(retrievedCoreElement, elementInfo);
assertArrayEquals( "apacheValue.digest() and testValue.digest() should be equal", apacheValue.getDigest(), testValue.getDigest()); assertThat( "apacheValue.digest() and testSha256Value.digest() shouldn\'t be equal", apacheValue.getDigest(), IsNot.not(IsEqual.equalTo(testSha256Value.getDigest()))); assertTrue("No data tested as flag no set", dataTested);
assertEquals("apacheHex and testHextVal should be equal", apacheHex, testHexVal); assertTrue("No data tested as flag no set", dataTested);
assertEquals("apacheValue.id() and testValue.id() should be equal", apacheValue.getAlgorithmId(), testValue.getAlgorithmId()); assertFalse( "apacheValue.id() and testSha256Value.id() shouldn\'t be equal", apacheValue.getAlgorithmId().equals( testSha256Value.getAlgorithmId())); assertTrue("No data tested as flag no set", dataTested);
assertEquals( "apacheValue.hexDigest() and testValue.hexDigest() should be equal", apacheValue.getHexDigest(), testValue.getHexDigest()); assertFalse( "apacheValue.hexDigest() and testSha1Value.hexDigest() shouldn\'t be equal", apacheValue.getHexDigest().equals( testSha1Value.getHexDigest())); assertTrue("No data tested as flag no set", dataTested);
assertTrue("Java standard name " + alg.getJavaName() + " should be in digest set", algNames.contains(alg.getJavaName()));
assertEquals( "apacheValue.hash() and testValue.hash() should be equal", apacheValue.hashCode(), testValue.hashCode()); assertTrue( "apacheValue.hash() and testSha256Value.has() shouldn\'t be equal", apacheValue.hashCode() != testSha256Value.hashCode()); assertTrue("No data tested as flag no set", dataTested);
assertArrayEquals("apacheBytes and testBytes should be equal", apacheBytes, testBytes); assertTrue("No data tested as flag no set", dataTested);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertThat(MediaCodecUtil.getCodecProfileAndLevel(format)).isNull();
assertThat(result).isEqualTo(C.RESULT_BUFFER_READ); assertThat(inputBuffer.data.array()) .isEqualTo(getEncodedMessage(eventMessage));
assertThat(mdtaMetadataEntryFromParcel).isEqualTo(mdtaMetadataEntryToParcel);
assertThat(bitArray.getPosition()).isEqualTo(10); assertThat(bitArray.readBit()).isTrue(); assertThat(bitArray.readBit()).isTrue(); assertThat(bitArray.readBit()).isFalse(); assertThat(bitArray.getPosition()).isEqualTo(14); assertThat(bitArray.readBit()).isFalse(); assertThat(bitArray.readBit()).isFalse();
assertThat(loadControl.shouldStartPlayback(MIN_BUFFER_US, SPEED, false)) .isTrue();
assertThat(metadata.length()).isEqualTo(2); assertThat(commentFrame.key).isEqualTo("Title"); assertThat(commentFrame.value).isEqualTo("Song"); assertThat(commentFrame.key).isEqualTo("Artist"); assertThat(commentFrame.value).isEqualTo("Singer");
assertThat(parseXsDuration("PT150.279S")).isEqualTo(150279L); assertThat(parseXsDuration("PT1.500S")).isEqualTo(1500L);
assertThat(result).isTrue();
assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US, 100f)) .isFalse();
assertThat(version).isEqualTo(VersionTable.VERSION_UNSET);
assertThat(loadControl.shouldContinueLoading( 0, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US - 1, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US, SPEED)).isFalse();
assertThat(resolved).isNotSameInstanceAs(globalStyles.get("s0")); assertThat(resolved).isNotSameInstanceAs(globalStyles.get("s1")); assertThat(resolved.getId()).isNull(); assertThat(resolved.getBackgroundColor()).isEqualTo(BLACK); assertThat(resolved.getFontColor()).isEqualTo(RED); assertThat(resolved.getStyle()).isEqualTo(STYLE_BOLD_ITALIC);
assertThat(bytesRead).isEqualTo(0);
assertThat(tsDurationReader.isDurationReadFinished()).isFalse();
assertThat(metadata1).isNotEqualTo(metadata2); assertThat(metadata1.hashCode()).isNotEqualTo(metadata2.hashCode());
assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);
assertThat(extractorInput.getPosition()).isEqualTo(2046);
assertThat(contentLengthAndBytesCached.first).isEqualTo(C.LENGTH_UNSET); assertThat(contentLengthAndBytesCached.second).isEqualTo(100);
assertThat(chapterFrameFromParcel).isEqualTo(chapterFrameToParcel);
assertThat(input.getPosition()).isEqualTo(0); assertThat(input.getPeekPosition()).isEqualTo(FlacConstants.STREAM_MARKER_SIZE);
assertThat(frameRotationQueue.pollRotationMatrix(rotationMatrix, 0)).isFalse();
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(bitArray.getPosition()).isEqualTo(0); assertThat(bitArray.getPosition()).isEqualTo(1); assertThat(bitArray.getPosition()).isEqualTo(7);
assertThat(ClearKeyUtil.adjustRequestData(KEY_REQUEST)).isEqualTo(expected);
assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000); assertThat(seekPoints.first.position).isEqualTo(2_200); assertThat(seekPoints.second).isEqualTo(seekPoints.first);
assertThat(loader1.numInvocations).isEqualTo(1); assertThat(loader2.numInvocations).isEqualTo(0);
assertThat(yaw).isWithin(EPSILON).of(-2 * SWIPE_PX / PX_PER_DEGREES); assertThat(pitch).isWithin(EPSILON).of(3 * SWIPE_PX / PX_PER_DEGREES);
assertThat(index.getAll()).isEmpty();
assertThat(value).isEqualTo((0xFF & TEST_DATA[0]) << 8 | (TEST_DATA[1] & 0xFF)); assertThat(parsableByteArray.getPosition()).isEqualTo(4);
assertThat(castPlayer.getRepeatMode()).isEqualTo(Player.REPEAT_MODE_OFF); assertThat(castPlayer.getRepeatMode()).isEqualTo(Player.REPEAT_MODE_ONE);
assertThat(skipCount).isEqualTo(0);
assertThat(mediaClock.getPlaybackParameters()).isEqualTo(PlaybackParameters.DEFAULT);
assertThat(TtmlRenderUtil.resolveStyle(null, styleIds, globalStyles)) .isSameInstanceAs(globalStyles.get("s0"));
assertThat(ClearKeyUtil.adjustRequestData(KEY_REQUEST)).isEqualTo(KEY_REQUEST);
assertThat( audioFocusManager.setAudioAttributes( media, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(getAudioFocusGainFromRequest(request)).isEqualTo(AudioManager.AUDIOFOCUS_GAIN); assertThat( audioFocusManager.setAudioAttributes( null, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(lastRequest).isNotNull();
assertThat(loadControl.shouldContinueLoading( 0, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading( 0, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US, SPEED)).isFalse();
assertThat(loadControl.shouldContinueLoading( 0, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US - 1, SPEED)).isTrue(); assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US, SPEED)).isFalse();
assertThat(Util.toLong(1, -4)).isEqualTo(0x1FFFFFFFCL);
assertThat(downloadManager.getCurrentDownloads()).isEmpty(); assertThat(downloadIndex.getDownloads().getCount()).isEqualTo(0);
assertThat(ContentMetadata.getContentLength(cache.getContentMetadata(defaultCacheKey))) .isEqualTo(C.LENGTH_UNSET); assertThat( cacheDataSource.open( buildDataSpec(TEST_DATA.length - 2, C.LENGTH_UNSET, defaultCacheKey))) .isEqualTo(2);
assertThat(result).isEqualTo(C.RESULT_FORMAT_READ); assertThat(formatHolder.format).isEqualTo(FORMAT);
assertThat(TEST_DATA).isEqualTo(target); assertThat(input.getPosition()).isEqualTo(0); assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length); assertThat(TEST_DATA).isEqualTo(target2); assertThat(input.getPosition()).isEqualTo(TEST_DATA.length); assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length);
assertThat(childSources[0].isPrepared()).isTrue(); assertThat(childSources[1].isPrepared()).isFalse();
assertThat(seekPoints.first.timeUs).isEqualTo(0); assertThat(seekPoints.first.position).isEqualTo(firstBytePosition); assertThat(seekPoints.second).isEqualTo(seekPoints.first);
assertThat(seekPoints.first.timeUs).isEqualTo(0); assertThat(seekPoints.first.position).isEqualTo(firstBytePosition); assertThat(seekPoints.second).isEqualTo(seekPoints.first);
assertThat(result).isEqualTo(496);
assertThat(changeHandled).isTrue(); assertThat(getQueueLength()).isEqualTo(3);
assertThat(metadata).isNull();
assertThat(initialEstimateFast).isGreaterThan(initialEstimateSlow);
assertThat(runnableInvoked.getCount()).isEqualTo(0);
assertThat(result).isTrue();
assertThat(changeHandled).isFalse(); assertThat(getQueueLength()).isEqualTo(3);
assertThat(actions).hasLength(2); assertThat(actions[0]).isEqualTo(expectedAction1); assertThat(actions[1]).isEqualTo(expectedAction2);
assertThat(runnableInvoked.getCount()).isEqualTo(0);
assertThat(changeHandled).isFalse(); assertThat(getQueueLength()).isEqualTo(1);
assertThat(state.adGroups[0].count).isEqualTo(C.LENGTH_UNSET); assertThat(state.adGroups[0].count).isEqualTo(1);
assertThat(bitArray.readBits(32)).isEqualTo(0x0FF00FF0); assertThat(bitArray.readBits(32)).isEqualTo(0xF00FF00F);
assertThat(subMesh.getVertexCount()).isGreaterThan(LATITUDES * LONGITUDES); assertEquals(RADIUS, Math.sqrt(x * x + y * y + z * z), EPSILON);
assertThat(sampleQueue.getFirstIndex()).isEqualTo(8); assertThat(sampleQueue.getReadIndex()).isEqualTo(8);
assertThat(initialEstimate4g).isGreaterThan(initialEstimate3g);
assertThat(contentMetadata.get("metadata name", "default value")).isEqualTo("default value");
assertThat(label).isEqualTo("test label");
assertThat(fromParcelIcyHeaders).isEqualTo(icyHeaders);
assertThat(dataSpecCopy.httpRequestHeaders).isEqualTo(httpRequestProperties);
assertThat(buffer.limit()).isEqualTo(4); assertThat(buffer.data[0]).isEqualTo(0x67); assertThat(buffer.data[1]).isEqualTo(0x45); assertThat(buffer.data[2]).isEqualTo(0x23); assertThat(buffer.data[3]).isEqualTo(0x01);
assertThat(streamKeyFromParcel).isEqualTo(streamKeyToParcel);
assertThat(timeline.getWindowCount()).isEqualTo(2);
assertNull(getNextMediaPeriodInfo());
assertThat(label).isEqualTo("");
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(2_200_000);
assertThat(trackGroupArrayFromParcel).isEqualTo(trackGroupArrayToParcel);
assertThat(bytesRead).isGreaterThan(0); assertThat(inputStream.bytesRead()).isEqualTo(totalBytesRead); assertThat(readBytes).isEqualTo(TEST_DATA); assertThat(inputStream.bytesRead()).isEqualTo(TEST_DATA.length); assertThat(totalBytesRead).isEqualTo(TEST_DATA.length); assertThat(inputStream.read()).isEqualTo(-1);
assertThat(drmInitData).isNull();
assertThat(MimeTypes.getMimeTypeFromMp4ObjectType(0)).isNull(); assertThat(MimeTypes.getMimeTypeFromMp4ObjectType(0x600)).isNull(); assertThat(MimeTypes.getMimeTypeFromMp4ObjectType(0x01)).isNull(); assertThat(MimeTypes.getMimeTypeFromMp4ObjectType(-1)).isNull();
assertThat(Util.toLong(0, 0)).isEqualTo(0);
assertThat(payloadReader.parsedTableIds).isEmpty(); assertThat(payloadReader.parsedTableIds).isEmpty(); assertThat(payloadReader.parsedTableIds).isEmpty(); assertThat(payloadReader.parsedTableIds).isEqualTo(singletonList(111));
assertThat(result).isFalse();
assertThat(verifyVorbisHeaderCapturePattern(0x01, header, false)).isTrue();
assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, 2f)).isTrue();
assertThat(compositeSequenceableLoader.continueLoading(3000)).isTrue();
assertThat(result).isEqualTo(RESULT_END_OF_INPUT);
assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue(); assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse(); assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1003);
assertThat( CacheUtil.DEFAULT_CACHE_KEY_FACTORY.buildCacheKey( new DataSpec(testUri, 0, LENGTH_UNSET, key))) .isEqualTo(key); assertThat( CacheUtil.DEFAULT_CACHE_KEY_FACTORY.buildCacheKey( new DataSpec(testUri, 0, LENGTH_UNSET, null))) .isEqualTo(testUri.toString());
assertThat(contentLengthAndBytesCached.first).isEqualTo(1000); assertThat(contentLengthAndBytesCached.second).isEqualTo(0);
assertThat(sampleNumberHolder.sampleNumber).isEqualTo(4096);
assertThat(sampleQueue.isReady( false)).isTrue();
assertThat(result).isEqualTo(0x4);
assertThat(metadata.length()).isEqualTo(1); assertThat(eventMessage.schemeIdUri).isEqualTo("urn:test"); assertThat(eventMessage.value).isEqualTo("123"); assertThat(eventMessage.durationMs).isEqualTo(3000); assertThat(eventMessage.id).isEqualTo(1000403); assertThat(eventMessage.messageData).isEqualTo(new byte[]{0, 1, 2, 3, 4});
assertThat(result).isEqualTo(192);
assertThat(manifest).isEqualTo(TEST_MANIFEST);
assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(C.TIME_END_OF_SOURCE);
assertThat(contentLengthAndBytesCached.first).isEqualTo(1000); assertThat(contentLengthAndBytesCached.second).isEqualTo(300);
assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(C.TIME_UNSET);
assertThat(metadata.length()).isEqualTo(1); assertThat(privFrame.owner).isEqualTo("test"); assertThat(privFrame.privateData).isEqualTo(new byte[]{1, 2, 3, 4}); assertThat(metadata.length()).isEqualTo(1); assertThat(privFrame.owner).isEmpty(); assertThat(privFrame.privateData).isEqualTo(new byte[0]);
assertThat(metadata).isNotNull(); assertThat(metadata.length()).isNotEqualTo(0);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test\\r\\ntitle"); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(result).isTrue();
assertThat(yaw).isWithin(EPSILON).of(-2 * SWIPE_PX / PX_PER_DEGREES); assertThat(pitch).isWithin(EPSILON).of(3 * SWIPE_PX / PX_PER_DEGREES);
assertThat(initialEstimateFastWithSlowOverwrite).isEqualTo(initialEstimateSlow);
assertThat(timeline.getWindowCount()).isEqualTo(1);
assertThat(parseTtmlColor("#FFFFFF")).isEqualTo(WHITE); assertThat(parseTtmlColor("#FFFFFFFF")).isEqualTo(WHITE); assertThat(parseTtmlColor("#123456")).isEqualTo(parseColor("#FF123456")); assertThat(parseTtmlColor("#FFFFFF00")).isEqualTo(parseColor("#00FFFFFF")); assertThat(parseTtmlColor("#12345678")).isEqualTo(parseColor("#78123456"));
assertThat(initialEstimate3g).isGreaterThan(initialEstimate2g);
assertThat(result).isEqualTo(-1);
assertThat(contentMetadata.get("metadata name", "default value")).isEqualTo("default value");
assertThat(new RendererConfiguration[] {DEFAULT, DEFAULT}) .isEqualTo(result.rendererConfigurations);
assertThat(array.canReadExpGolombCodedNum()).isFalse(); assertThat(array.canReadBits(16)).isTrue(); assertThat(array.canReadBits(17)).isFalse(); assertThat(array.canReadBits(24)).isTrue(); assertThat(array.canReadBits(25)).isFalse();
assertThat(input.getPosition()).isEqualTo(0); assertThat(input.getPeekPosition()).isEqualTo(peekPosition);
assertThat(downloadIndex.getDownload(request1.id).state).isEqualTo(Download.STATE_QUEUED); assertThat(downloadIndex.getDownload(request2.id).state).isEqualTo(Download.STATE_COMPLETED);
assertThat(MediaCodecUtil.getCodecProfileAndLevel(format)).isNull();
assertThat(downloads).hasSize(3); assertThat(downloadIds).isEqualTo(taskIds);
assertThat(download).isNotNull(); assertThat(download.request.type).isEqualTo(request2.type); assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey); assertThat(download.request.data).isEqualTo(request2.data); assertThat(download.request.uri).isEqualTo(request2.uri); assertThat(download.request.streamKeys).containsExactly(streamKey1, streamKey2); assertThat(download.state).isEqualTo(Download.STATE_QUEUED);
assertThat(metadata).isNull();
assertThat(bytes % 16).isEqualTo(0); assertThat(unchangedByteCount <= getMaxUnchangedBytesAllowedPostEncryption(data.length)) .isTrue(); assertThat(bytes % 16).isEqualTo(0); assertThat(differingByteCount).isEqualTo(0);
assertThat(subtitle.getEventTimeCount()).isEqualTo(6);
assertThat(result).isFalse();
assertThat(position).isNull(); assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0)); assertThat(position.second).isEqualTo(0);
assertThat(drmInitData).isNull();
assertThat(seeker.getTimeUs(XING_FRAME_POSITION + xingFrameSize)).isEqualTo(0); assertThat(seekerWithInputLength.getTimeUs(XING_FRAME_POSITION + xingFrameSize)).isEqualTo(0);
assertThat(runnableInvoked.getCount()).isEqualTo(0);
assertThat(subtitle.getEventTimeCount()).isEqualTo(6);
assertThat(bytesPeeked).isEqualTo(0);
assertThat(offlineLicenseKeySetId).isNotNull();
assertThat(metadata).isNotNull(); assertThat(metadata.length()).isNotEqualTo(0);
assertThat(mergedRequest.streamKeys).isEmpty(); assertThat(mergedRequest.streamKeys).isEmpty();
assertThat(metadata).isNull();
assertThat(sampleQueue.isReady( false)).isFalse(); assertThat(sampleQueue.isReady( false)).isTrue();
assertThat(VersionTable.tableExists(database, table)).isTrue();
assertThat(AtomParsers.parseCommonEncryptionSinfFromParent( new ParsableByteArray(cencSinf), 0, cencSinf.length)).isNull();
assertThat(trackGroupArrayPeriod0).isEqualTo(trackGroupArrays[0]); assertThat(trackGroupArrayPeriod1).isEqualTo(trackGroupArrays[1]);
assertThat(pictureFrameFromParcel).isEqualTo(pictureFrameToParcel);
assertThat(periodCount).isEqualTo(2);
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(extractorInput.getPosition()).isEqualTo(4000);
assertThat(seeker.getTimeUs(STREAM_LENGTH)) .isEqualTo(STREAM_DURATION_US); assertThat( seekerWithInputLength.getTimeUs(STREAM_LENGTH)) .isEqualTo(STREAM_DURATION_US);
assertThat(Util.normalizeLanguageCode(null)).isNull(); assertThat(Util.normalizeLanguageCode("")).isEmpty(); assertThat(Util.normalizeLanguageCode("und")).isEqualTo("und"); assertThat(Util.normalizeLanguageCode("DoesNotExist")).isEqualTo("doesnotexist");
assertThat(unchangedByteCount <= getMaxUnchangedBytesAllowedPostEncryption(data.length)) .isTrue(); assertThat(differingByteCount).isEqualTo(0);
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(metadata.length()).isEqualTo(1); assertThat(commentFrame.key).isEqualTo("Title"); assertThat(commentFrame.value).isEqualTo("So=ng");
assertThat(seekTable.pointSampleNumbers).hasLength(32);
assertThat(cacheDir.createNewFile()).isTrue(); assertThat(uid).isEqualTo(-1L);
assertThat(silenceSkippingAudioProcessor.isActive()).isFalse();
assertThat(testArray.readBits(8)).isEqualTo(0x5F);
assertThat(unchangedByteCount <= getMaxUnchangedBytesAllowedPostEncryption(data.length)) .isTrue(); assertThat(differingByteCount).isEqualTo(0);
assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(2000);
assertThat(compositeSequenceableLoader.getNextLoadPositionUs()).isEqualTo(2000);
assertThat(drmInitData).isEqualTo(newDrmInitData());
assertThat(selectedText1).isEmpty();
assertThat(result.getEventTimeCount()).isEqualTo(1); assertThat(result.getEventTime(0)).isEqualTo(0); assertThat(result.getCues(0)).isEmpty();
assertThat(initialEstimate).isGreaterThan(100_000L); assertThat(initialEstimate).isLessThan(50_000_000L);
assertThat(encodedByteArray).isEqualTo(ENCODED_MESSAGE);
assertThat(ClearKeyUtil.adjustResponseData(SINGLE_KEY_RESPONSE)).isEqualTo(SINGLE_KEY_RESPONSE);
assertThat(result).isEqualTo(4096);
assertThat(resolved).isSameInstanceAs(style); assertThat(resolved.getBackgroundColor()).isEqualTo(YELLOW); assertThat(resolved.getStyle()).isEqualTo(STYLE_BOLD);
assertThat(timeline.getWindowCount()).isEqualTo(1);
assertThat(constantBitrateSeekMap.isSeekable()).isTrue();
assertThat(res).isEqualTo(15); assertThat(res).isEqualTo(Long.MAX_VALUE); assertThat(res).isEqualTo(Long.MIN_VALUE); assertThat(res).isEqualTo(12345); assertThat(res).isEqualTo(12345);
assertThat(initialEstimateEthernet).isGreaterThan(initialEstimate3g);
assertThat(metadata1).isEqualTo(metadata2); assertThat(metadata1.hashCode()).isEqualTo(metadata2.hashCode());
assertThat(loader1.numInvocations).isEqualTo(1); assertThat(loader2.numInvocations).isEqualTo(1); assertThat(loader3.numInvocations).isEqualTo(1);
assertThat(dataSpecCopy.httpRequestHeaders).isEqualTo(httpRequestProperties);
assertThat(VersionTable.tableExists(database, "NonExistingTable")).isFalse();
assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(result).isEqualTo(RESULT_BUFFER_READ); assertArrayEquals(expectedInitializationVector, inputBuffer.cryptoInfo.iv);
assertThat(mergedRequest.uri).isEqualTo(uri2); assertThat(mergedRequest.customCacheKey).isEqualTo("key2"); assertThat(mergedRequest.data).isEqualTo(data2); assertThat(mergedRequest.uri).isEqualTo(uri1); assertThat(mergedRequest.customCacheKey).isEqualTo("key1"); assertThat(mergedRequest.data).isEqualTo(data1);
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(result).isEqualTo(RESULT_MAX_LENGTH_EXCEEDED);
assertThat(runnableInvoked.getCount()).isEqualTo(0);
assertThat(initialEstimateWifi).isGreaterThan(initialEstimate3g);
assertThat(timeUs).isEqualTo(1_134_000);
assertThat(downloadManager.getCurrentDownloads()).isEmpty();
assertThat(metadataFromParcel).isEqualTo(metadataToParcel);
assertThat(timeline.isEmpty()).isTrue();
assertThat(skipCount).isEqualTo(0);
assertThat(metadata).isNull();
assertThat(input.peekFully(target, 0, TEST_DATA.length, true)).isTrue(); assertThat(input.peekFully(target, 0, 1, true)).isFalse();
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isNull(); assertThat(streamInfo.url).isNull();
assertThat(metadata.length()).isEqualTo(1); assertThat(urlLinkFrame.id).isEqualTo("WCOM"); assertThat(urlLinkFrame.description).isNull();
assertThat(bitrateEstimatesAfterReset).isEqualTo(bitrateEstimatesWithNewInstance);
assertThat(bytesPeeked).isEqualTo(TEST_DATA.length); assertThat(input.getPeekPosition()).isEqualTo(TEST_DATA.length); assertThat(target).isEqualTo(TEST_DATA);
assertThat(elements) .containsExactly( new SegmentTimelineElement( 0, 96000), new SegmentTimelineElement( 96000, 96000), new SegmentTimelineElement( 192000, 96000), new SegmentTimelineElement( 288000, 96000), new SegmentTimelineElement( 384000, 96000)) .inOrder();
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test title"); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(seekTable.pointOffsets[0]).isEqualTo(0); assertThat(seekTable.pointSampleNumbers[0]).isEqualTo(0); assertThat(seekTable.pointOffsets[31]).isEqualTo(160602); assertThat(seekTable.pointSampleNumbers[31]).isEqualTo(126976);
assertThat(licenseDurationRemainingSec.first).isEqualTo(licenseDuration); assertThat(licenseDurationRemainingSec.second).isEqualTo(playbackDuration);
assertThat(seekPoint).isEqualTo(seekPoints.second); assertThat(seekPoint.timeUs).isEqualTo(STREAM_DURATION_US); assertThat(seekPoint.position).isEqualTo(STREAM_LENGTH - 1);
assertThat(unchangedByteCount <= getMaxUnchangedBytesAllowedPostEncryption(data.length)) .isTrue(); assertThat(differingByteCount).isEqualTo(0);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test title"); assertThat(streamInfo.url).isNull();
assertThat(runnableInvoked.getCount()).isEqualTo(0);
assertThat(input.peekFully(target, 0, TEST_DATA.length - 1, true)).isTrue();
assertThat(Util.toLong(0xFEDCBA, 0x87654321)).isEqualTo(0xFEDCBA_87654321L);
assertThat(contentLengthAndBytesCached.first).isEqualTo(C.LENGTH_UNSET); assertThat(contentLengthAndBytesCached.second).isEqualTo(0);
assertThat(sampleNumberHolder.sampleNumber).isEqualTo(4096);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEmpty(); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(encodedByteArray).isEqualTo(ENCODED_MESSAGE); assertThat(encodedByteArray1).isEqualTo(expectedEmsgBody1);
assertThat(result).isEqualTo(0xF0000000);
assertThat(bitArray.readBits(2)).isEqualTo(3); assertThat(bitArray.readBits(2)).isEqualTo(2); assertThat(bitArray.readBits(2)).isEqualTo(2); assertThat(bitArray.readBits(16)).isEqualTo(0x2203);
assertThat(result).isFalse();
assertThat(elements) .containsExactly( new SegmentTimelineElement( 0, 96000), new SegmentTimelineElement( 96000, 96000), new SegmentTimelineElement( 192000, 48000), new SegmentTimelineElement( 240000, 48000), new SegmentTimelineElement( 288000, 48000), new SegmentTimelineElement( 336000, 48000), new SegmentTimelineElement( 384000, 48000), new SegmentTimelineElement( 432000, 48000)) .inOrder();
assertThat(byteArrayUploadDataProvider.getLength()).isEqualTo(TEST_DATA.length);
assertThat(initialEstimateFast).isGreaterThan(initialEstimateSlow);
assertThat(constantBitrateSeekMap.isSeekable()).isFalse();
assertThat(skipCount).isEqualTo(4);
assertThat(metadata.length()).isEqualTo(1); assertThat(commentFrame.key).isEqualTo("Artist"); assertThat(commentFrame.value).isEqualTo("Singer");
assertThat(input.getPosition()).isEqualTo(0); assertThat(input.getPeekPosition()).isEqualTo(peekPosition);
assertThat(VersionTable.getVersion(readableDatabase, VersionTable.FEATURE_OFFLINE, EMPTY_NAME)) .isEqualTo(VersionTable.VERSION_UNSET); assertThat(VersionTable.getVersion(readableDatabase, VersionTable.FEATURE_OFFLINE, EMPTY_NAME)) .isEqualTo(DefaultDownloadIndex.TABLE_VERSION);
assertThat(fromParcelStreamInfo).isEqualTo(streamInfo);
assertThat(input.getPosition()).isEqualTo(firstFramePosition); assertThat(input.getPeekPosition()).isEqualTo(input.getPosition());
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(defaultAudioSink.supportsOutput(CHANNEL_COUNT_STEREO, C.ENCODING_PCM_FLOAT)) .isTrue();
assertThat(res).isEqualTo(-5); assertThat(res).isEqualTo(Long.MIN_VALUE); assertThat(res).isEqualTo(Long.MAX_VALUE); assertThat(res).isEqualTo(12345); assertThat(res).isEqualTo(12345);
assertThat( audioFocusManager.setAudioAttributes( media, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(request.durationHint).isEqualTo(AudioManager.AUDIOFOCUS_GAIN); assertThat( audioFocusManager.setAudioAttributes( null, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(lastRequest).isNotNull();
assertThat(trackGroupFromParcel).isEqualTo(trackGroupToParcel);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test title"); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(result).isEqualTo(0);
assertThat(timeUs).isEqualTo(0);
assertThat(bytesPeeked).isEqualTo(length); assertThat(input.getPeekPosition()).isEqualTo(length); assertThat(Arrays.copyOfRange(target, offset, offset + length)) .isEqualTo(Arrays.copyOf(TEST_DATA, length));
assertThat(mlltFrameFromParcel).isEqualTo(mlltFrameToParcel);
assertThat(Ac3Util.parseTrueHdSyncframeAudioSampleCount(TRUEHD_NON_SYNCFRAME_HEADER)) .isEqualTo(0);
assertThat(dataSpecCopy.httpRequestHeaders).isEqualTo(httpRequestProperties);
assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession); assertThat(formatHolder.drmSession).isNull(); assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isSameInstanceAs(mockPlaceholderDrmSession); assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession);
assertThat(scratch.getPosition()).isEqualTo(seekTableBlockSize);
assertThat(sampleRateAndChannelCount.first).isEqualTo(96000); assertThat(sampleRateAndChannelCount.second).isEqualTo(2);
assertThat(byteArray.readLittleEndianUnsignedInt24()).isEqualTo(0xFF0201); assertThat(byteArray.getPosition()).isEqualTo(3);
assertThat(readBits((byte) 0x00, 2, 2)).isEqualTo(0); assertThat(readBits((byte) 0x02, 1, 1)).isEqualTo(1); assertThat(readBits((byte) 0xF0, 4, 4)).isEqualTo(15); assertThat(readBits((byte) 0x80, 1, 7)).isEqualTo(1);
assertThat(tracker.getRegionEndTimeMs(100)).isEqualTo(CachedRegionTracker.NOT_CACHED); assertThat(tracker.getRegionEndTimeMs(150)).isEqualTo(CachedRegionTracker.NOT_CACHED);
assertThat(e.reason).isEqualTo(DataSourceException.POSITION_OUT_OF_RANGE);
assertThat(state.adGroups[0].count).isEqualTo(0); assertThat(state.adGroups[1].count).isEqualTo(0);
assertThat(resolved).isSameInstanceAs(style); assertThat(resolved.getBackgroundColor()).isEqualTo(YELLOW); assertThat(resolved.getStyle()).isEqualTo(STYLE_BOLD_ITALIC);
assertThat(initialEstimateFast).isGreaterThan(initialEstimateSlow);
assertThat(contentMetadata.contains("test metadata")).isFalse();
assertThat((oggPacket.getPageHeader().type & 0x04) == 0x04).isTrue(); assertThat((oggPacket.getPageHeader().type & 0x02) == 0x02).isFalse(); assertThat(oggPacket.getPageHeader().pageSequenceNumber).isEqualTo(1001);
assertThat(input.getPosition()).isEqualTo(FlacConstants.STREAM_MARKER_SIZE); assertThat(input.getPeekPosition()).isEqualTo(input.getPosition());
assertThat(input.getPosition()).isGreaterThan(new Long(640)); assertThat(input.getPeekPosition()).isEqualTo(input.getPosition());
assertThat(audioRenderer.supportsFormat(FORMAT)) .isEqualTo(ADAPTIVE_NOT_SEAMLESS | TUNNELING_NOT_SUPPORTED | FORMAT_HANDLED);
assertEquals(actualMatrix, expectedMatrix);
assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(0); assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(11); assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(0); assertThat(CachedContentIndex.getNewId(idToKey)).isEqualTo(1);
assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(C.TIME_END_OF_SOURCE);
assertThat(adsLoaderListener.adPlaybackState) .isEqualTo( new AdPlaybackState( 0) .withAdDurationsUs(PREROLL_ADS_DURATIONS_US) .withContentDurationUs(CONTENT_DURATION_US));
assertThat(result).isFalse();
assertThat(metadata.length()).isEqualTo(1); assertThat(apicFrame.mimeType).isEqualTo("image/jpeg"); assertThat(apicFrame.pictureType).isEqualTo(16); assertThat(apicFrame.description).isEqualTo("Hello World"); assertThat(apicFrame.pictureData).hasLength(10); assertThat(apicFrame.pictureData).isEqualTo(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
assertThat(result).isEqualTo(0x67CE9747);
assertThat(file.createNewFile()).isTrue(); assertThat(file.exists()).isFalse();
assertThat(chapterTocFrameFromParcel).isEqualTo(chapterTocFrameToParcel);
assertThat(seekPoints.first.timeUs).isEqualTo(1_200_000); assertThat(seekPoints.first.position).isEqualTo(1300); assertThat(seekPoints.second).isEqualTo(seekPoints.first);
assertThat(initialEstimateFast).isGreaterThan(initialEstimateSlow);
assertThat(drmInitData).isNull();
assertThat(loader1.numInvocations).isEqualTo(0); assertThat(loader2.numInvocations).isEqualTo(0);
assertThat(result).isTrue();
assertThat(byteArray.readLittleEndianInt()).isEqualTo(0xFF000001); assertThat(byteArray.getPosition()).isEqualTo(4);
assertThat(fromParcelEventMessage).isEqualTo(eventMessage);
assertThat(initialEstimateFast).isGreaterThan(initialEstimateSlow);
assertThat(byteArray.readLittleEndianShort()).isEqualTo((short) 0xFF01); assertThat(byteArray.getPosition()).isEqualTo(2); assertThat(byteArray.readLittleEndianShort()).isEqualTo((short) 0xFF02); assertThat(byteArray.getPosition()).isEqualTo(4);
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(initialEstimateWithBuilder).isGreaterThan(100_000L); assertThat(initialEstimateWithBuilder).isLessThan(50_000_000L); assertThat(initialEstimateWithoutBuilder).isGreaterThan(100_000L); assertThat(initialEstimateWithoutBuilder).isLessThan(50_000_000L);
assertThat(resolveStyle(null, null, null)).isNull();
assertThat(testInitData.schemeDataCount).isEqualTo(2); assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1); assertThat(testInitData.get(0)).isEqualTo(DATA_1); assertThat(testInitData.get(1)).isEqualTo(DATA_1B);
assertThat(result).isEqualTo(C.RESULT_BUFFER_READ); assertThat(inputBuffer.isEndOfStream()).isTrue();
assertThat(contentMetadata.contains("metadata name")).isTrue();
assertThat(result).isEqualTo(0xF000000000000000L);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyTitle); assertThat(streamInfo.title).isEqualTo("test title"); assertThat(streamInfo.url).isNull();
assertThat(elements) .containsExactly( new SegmentTimelineElement( 0, 96000), new SegmentTimelineElement( 96000, 96000), new SegmentTimelineElement( 192000, 96000), new SegmentTimelineElement( 288000, 48000)) .inOrder();
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(subtitle.getEventTimeCount()).isEqualTo(2);
assertThat(castPlayer.getPlayWhenReady()).isFalse(); assertThat(castPlayer.getPlayWhenReady()).isTrue();
assertThat(e.reason).isEqualTo(DataSourceException.POSITION_OUT_OF_RANGE);
assertThat(initialEstimateEthernet).isGreaterThan(initialEstimate2g);
assertThat(downloadManager.getCurrentDownloads()).isEmpty();
assertThat(compositeSequenceableLoader.continueLoading(100)).isTrue();
assertThat(contentMetadata.get("metadata name", "default value")).isEqualTo("value");
assertThat(downloadIndex.getDownloads().getCount()).isEqualTo(0);
assertThat(contentLengthAndBytesCached.first).isEqualTo(900); assertThat(contentLengthAndBytesCached.second).isEqualTo(200);
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MAX_BUFFER_US - 1, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US, SPEED)).isFalse(); assertThat(loadControl.shouldContinueLoading(MIN_BUFFER_US - 1, SPEED)).isTrue();
assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(1000);
assertThat(byteArray.readLittleEndianUnsignedShort()).isEqualTo(0xFF01); assertThat(byteArray.getPosition()).isEqualTo(2); assertThat(byteArray.readLittleEndianUnsignedShort()).isEqualTo(0xFF02); assertThat(byteArray.getPosition()).isEqualTo(4);
assertThat(verifyVorbisHeaderCapturePattern(0x99, header, true)).isFalse();
assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession); assertThat(formatHolder.drmSession).isNull(); assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isNull(); assertThat(result).isEqualTo(RESULT_FORMAT_READ); assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession);
assertThat(skipCount).isEqualTo(4);
assertThat(seekPoints.first.timeUs).isEqualTo(2_100_000); assertThat(seekPoints.first.position).isEqualTo(2_200); assertThat(seekPoints.second).isEqualTo(seekPoints.first);
assertThat(result.length).isEqualTo(1);
assertThat(result).isEqualTo(0x05D67F23L);
assertThat(actions).hasLength(1); assertThat(actions[0]).isEqualTo(expectedAction1);
assertThat(seekPoints.first.timeUs).isEqualTo(300_000); assertThat(seekPoints.first.position).isEqualTo(400); assertThat(seekPoints.second.timeUs).isEqualTo(400_000); assertThat(seekPoints.second.position).isEqualTo(500);
assertThat(result).isEqualTo(0xFFF8);
assertThat(Util.toLong(0x0FFFFFFF, 0xFFFFFFFF)).isEqualTo(0x0FFFFFFF_FFFFFFFFL);
assertThat(Util.unescapeFileName("%a")).isNull(); assertThat(Util.unescapeFileName("%xyz")).isNull();
assertThat(Util.toLong(0x7ABCDEF, 0x12345678)).isEqualTo(0x7ABCDEF_12345678L);
assertThat(byteArrayOutputStream1.toByteArray()).isEqualTo(TEST_DATA_1); assertThat(byteArrayOutputStream2.toByteArray()).isEqualTo(TEST_DATA_2);
assertThat(metadata.length()).isEqualTo(1); assertThat(metadata.get(0)).isEqualTo(DECODED_MESSAGE);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test; title"); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(seekPoint).isEqualTo(seekPoints.second); assertThat(seekPoint.timeUs).isEqualTo(0); assertThat(seekPoint.position).isEqualTo(XING_FRAME_POSITION + xingFrameSize);
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(bitArray.getPosition()).isEqualTo(0); assertThat(bitArray.getPosition()).isEqualTo(4); assertThat(bitArray.readBit()).isFalse();
assertThat(dataSpecCopy.httpRequestHeaders).isEqualTo(newRequestHeaders);
assertThat(initialEstimate).isEqualTo(123456789);
assertThat( audioFocusManager.setAudioAttributes( media, true, Player.STATE_ENDED)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(getAudioFocusGainFromRequest(request)).isEqualTo(AudioManager.AUDIOFOCUS_GAIN);
assertThat(parseTtmlColor("rgb(255,255,255)")).isEqualTo(WHITE); assertThat(parseTtmlColor(" rgb ( 255, 255, 255)")).isEqualTo(WHITE);
assertThat(result).isEqualTo(0xF5D67F23L);
assertThat(timeline.getWindowCount()).isEqualTo(2);
assertThat(TEST_DATA).isEqualTo(target); assertThat(input.getPosition()).isEqualTo(0); assertThat(TEST_DATA).isEqualTo(target2);
assertThat(result).isEqualTo(1152);
assertThat(bytesRead).isEqualTo(0);
assertThat(result).isFalse();
assertThat(session).isNotEmpty();
assertThat(input.getPosition()).isEqualTo(0); assertThat(input.getPeekPosition()).isNotEqualTo(0);
assertThat(subtitle.getEventTimeCount()).isEqualTo(0); assertThat(subtitle.getCues(0).isEmpty()).isTrue();
assertThat(metadata).isNull();
assertThat(result.length).isEqualTo(1);
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(yaw).isWithin(EPSILON).of(-2 * SWIPE_PX / PX_PER_DEGREES); assertThat(pitch).isWithin(EPSILON).of(3 * SWIPE_PX / PX_PER_DEGREES);
assertThat(input.getPosition()).isNotEqualTo(0); assertThat(input.getPeekPosition()).isEqualTo(input.getPosition());
assertThat( audioFocusManager.setAudioAttributes( null, false, Player.STATE_IDLE)) .isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY); assertThat( audioFocusManager.setAudioAttributes( null, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(request).isNull();
assertThat(actions).isNotNull(); assertThat(actions).hasLength(0);
assertThat(result).isEqualTo(2048);
assertThat(byteArray.readLittleEndianLong()).isEqualTo(0xFF00000000000001L); assertThat(byteArray.getPosition()).isEqualTo(8);
assertThat(byteBuffer.array()).isEqualTo(TEST_DATA); assertThat(byteBuffer.array()).isEqualTo(TEST_DATA);
assertThat(extractorInput.getPosition()).isEqualTo(1);
assertThat(result).isEqualTo(C.RESULT_NOTHING_READ);
assertThat(CacheUtil.generateKey(Uri.EMPTY)).isNotNull(); assertThat(key).isNotNull(); assertThat(CacheUtil.generateKey(testUri)).isEqualTo(key); assertThat(key.equals(CacheUtil.generateKey(Uri.parse("test2")))).isFalse();
assertThat(downloadIndex.getDownload("non existing id")).isNull();
assertThat(parser.readLine()).isNull();
assertThat(verifyVorbisHeaderCapturePattern(0x01, header, true)).isFalse();
assertThat(input.getPosition()).isEqualTo(123);
assertThat(byteArray.readLittleEndianUnsignedInt()).isEqualTo(0xFF000010L); assertThat(byteArray.getPosition()).isEqualTo(4);
assertThat(request1.equals(request1)).isTrue();
assertThat(initialEstimate).isEqualTo(123456789);
assertThat(seeker.getTimeUs(-1)).isEqualTo(0); assertThat(seekerWithInputLength.getTimeUs(-1)).isEqualTo(0);
assertThat(initialEstimate).isNotEqualTo(123456789);
assertThat(listener.getEvents(EVENT_SEEK_STARTED)).containsExactly(period0); assertThat(listener.getEvents(EVENT_SEEK_PROCESSED)).containsExactly(period0);
assertThat(metadataHolder.flacStreamMetadata).isNotNull(); assertThat(metadataHolder.flacStreamMetadata.sampleRate).isEqualTo(48000);
assertThat(drmInitDataFromParcel).isEqualTo(drmInitDataToParcel);
assertThat(Util.inflate(input, output, null)).isTrue(); assertThat(output.limit()).isEqualTo(testData.length); assertThat(Arrays.copyOf(output.data, output.limit())).isEqualTo(testData);
assertThat(sampleQueue.getLargestQueuedTimestampUs()).isEqualTo(LAST_SAMPLE_TIMESTAMP); assertThat(sampleQueue.getLargestQueuedTimestampUs()).isEqualTo(LAST_SAMPLE_TIMESTAMP);
assertThat( audioFocusManager.setAudioAttributes( media, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()).isNull(); assertThat(testPlayerControl.lastPlayerCommand).isEqualTo(PLAYER_COMMAND_DO_NOT_PLAY); assertThat(Shadows.shadowOf(audioManager).getLastAbandonedAudioFocusListener()) .isEqualTo(request.listener);
assertThat( audioFocusManager.setAudioAttributes( media, true, Player.STATE_READY)) .isEqualTo(PLAYER_COMMAND_PLAY_WHEN_READY); assertThat(getAudioFocusGainFromRequest(request)).isEqualTo(AudioManager.AUDIOFOCUS_GAIN);
assertThat(dataSpecCopy.httpRequestHeaders).isEqualTo(expectedHeaders);
assertThat(emptySubtitle.getEventTimeCount()).isEqualTo(0); assertThat(simpleSubtitle.getEventTimeCount()).isEqualTo(4); assertThat(overlappingSubtitle.getEventTimeCount()).isEqualTo(4); assertThat(nestedSubtitle.getEventTimeCount()).isEqualTo(4);
assertThat(initialEstimateWifi).isGreaterThan(initialEstimate2g);
assertThat(ClearKeyUtil.adjustResponseData(MULTI_KEY_RESPONSE)).isEqualTo(expected);
assertThat(metadata.length()).isEqualTo(1); assertThat(commentFrame.language).isEqualTo("eng"); assertThat(commentFrame.description).isEqualTo("description"); assertThat(commentFrame.text).isEqualTo("text"); assertThat(metadata.length()).isEqualTo(0); assertThat(metadata.length()).isEqualTo(1); assertThat(commentFrame.language).isEqualTo("eng"); assertThat(commentFrame.description).isEmpty(); assertThat(commentFrame.text).isEmpty();
assertThat(downloadManager.getCurrentDownloads()).isEmpty();
assertThat(sessionId1).isNotEqualTo(sessionId2);
assertThat(tsDurationReader.isDurationReadFinished()).isFalse();
assertThat(audioRenderer.supportsFormat(FORMAT)) .isEqualTo(ADAPTIVE_NOT_SEAMLESS | TUNNELING_SUPPORTED | FORMAT_HANDLED);
assertThat(result).isEqualTo(0);
assertThat(upstreamDataSpecs).hasLength(1); assertThat(upstreamDataSpecs[0].httpRequestHeaders).isEqualTo(this.httpRequestHeaders);
assertThat(vorbisCommentFrameFromParcel).isEqualTo(vorbisCommentFrameToParcel);
assertThat(TtmlRenderUtil.resolveStyle(inlineStyle, null, null)).isSameInstanceAs(inlineStyle);
assertThat(metadata.length()).isEqualTo(1); assertThat(streamInfo.rawMetadata).isEqualTo(icyContent); assertThat(streamInfo.title).isEqualTo("test\' title"); assertThat(streamInfo.url).isEqualTo("test_url");
assertThat(scratch.getPosition()).isEqualTo(FlacConstants.MIN_FRAME_HEADER_SIZE);
assertThat(Ac3Util.parseTrueHdSyncframeAudioSampleCount(TRUEHD_SYNCFRAME_HEADER)) .isEqualTo(TRUEHD_SYNCFRAME_SAMPLE_COUNT);
assertThat(metadata).isNull();
assertThat(downloadManager.getCurrentDownloads()).isEmpty();
assertThat(input.getPosition()).isEqualTo(initialReadPosition); assertThat(input.getPeekPosition()).isEqualTo(input.getPosition());
assertThat(timeline.getWindow( 0, window).tag).isEqualTo(tag);
assertThat(mergedRequest.streamKeys).containsExactly(streamKey1, streamKey2, streamKey3); assertThat(mergedRequest.streamKeys).containsExactly(streamKey2, streamKey3, streamKey1);
assertThat(ClearKeyUtil.adjustResponseData(SINGLE_KEY_RESPONSE)).isEqualTo(expected);
assertThat(initialEstimate4g).isGreaterThan(initialEstimate2g);
assertThat(compositeSequenceableLoader.getBufferedPositionUs()).isEqualTo(1000);
assertThat(defaultAudioSink.supportsOutput(CHANNEL_COUNT_STEREO, C.ENCODING_PCM_FLOAT)) .isFalse();
assertThat(position).isNull(); assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0)); assertThat(position.second).isEqualTo(windowDurationUs); assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0)); assertThat(position.second).isEqualTo(0);
assertEquals(0L, ReadLength.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertThat(error.getAsLong(), is(260L));
assertThat(SUT.createConsumer(mock(Processor.class)), notNullValue());
assertFalse(registry.canResolve(ALIAS));
assertThat(field.getIndexGroup(), is(1L)); assertThat(field.getIndexOffset(), is(10L)); assertThat(field.getAdsDataType(), is(AdsDataType.BYTE)); assertThat(field.getNumberOfElements(), is(2));
assertTrue(OpmUtils.isAlias("${hallo}")); assertTrue(OpmUtils.isAlias("${hal{}lo}")); assertTrue(OpmUtils.isAlias("${hallo:hallo}")); assertFalse(OpmUtils.isAlias("hallo")); assertFalse(OpmUtils.isAlias("${hallo")); assertFalse(OpmUtils.isAlias("${ha}llo"));
assertEquals(0L, SampleSize.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertEquals( DigestUtil.calculateCrc16(new byte[]{47}), DigestUtil.calculateCrc16(() -> Unpooled.wrappedBuffer(new byte[]{47})));
assertThat(out, hasSize(2));
assertThat(SUT.getProtocolName()).isEqualTo("Simulated PLC4X Datasource");
assertThat(a.equals(a), is(true)); assertThat(a.equals(b), is(true)); assertThat(a.equals(c), is(false)); assertThat(a.equals(1), is(false)); assertThat(a.equals((byte) 1), is(false)); assertThat(a.equals(array), is(false));
assertThat(SUT.createProducer(), notNullValue());
assertEquals(0L, Length.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertEquals("hallo", alias);
assertThat(out, hasSize(0)); assertThat(out, hasSize(1));
assertThat(error.getAsLong(), is(0xFF02L));
assertThat(authentication.toString(), Matchers.not(Matchers.containsString("top-secret")));
assertThat(SUT.getProtocolCode()).isEqualTo("simulated");
assertThat(out, hasSize(1));
assertTrue(value.isPresent());
assertThat(data.readableBytes(), is(4)); assertThat(data.readByte(), is((byte) 0x1)); assertThat(data.readByte(), is((byte) 0x2)); assertThat(data.readByte(), is((byte) 0x3)); assertThat(data.readByte(), is((byte) 0x4)); assertThat(copyOfRange(data.array(), 0, 4), is(correct));
assertThat(SUT.isSingleton(), is(true));
assertThat(ReadLength.of("1").toString(), containsString("longValue=1,"));
assertThat(byteValue.getBytes(), is(correct));
assertThat(term, not(nullValue())); assertThat(term, instanceOf(BinaryTerm.class)); assertThat(binaryTerm.getOperation(), is("+"));
assertThat(SampleSize.of("1").toString(), containsString("longValue=1,"));
assertThat(WriteLength.of("1").toString(), containsString("longValue=1,"));
assertThat(exception.getTimeout(), equalTo(1024L));
assertThat(SUT.commands, hasSize(0)); assertThat(SUT.errorConsumer, notNullValue());
assertEquals(1, out.size()); assertThat(out, hasSize(1));
assertThat(SUT.expectClazz, nullValue()); assertThat(SUT.onTimeoutConsumer, nullValue()); assertThat(unwrap, notNullValue()); assertThat(SUT.commands, hasSize(2)); assertThat(SUT.expectClazz, notNullValue()); assertThat(SUT.onTimeoutConsumer, notNullValue());
assertThat(SUT.commands, hasSize(0)); assertThat(SUT.onTimeoutConsumer, notNullValue());
assertThat(outerCast, hasSize(2)); assertThat(innerCast, hasSize(2)); assertThat(hurzes, hasSize(1));
assertThat(error.getAsLong(), is(0x2001L));
assertThat(connection.isConnected()).isEqualTo(true); assertThat(connection.getMetadata().canRead()).isEqualTo(false); assertThat(connection.getMetadata().canWrite()).isEqualTo(false); assertThat(connection.getMetadata().canSubscribe()).isEqualTo(false);
assertEquals(adsStampHeader1, adsStampHeader2);
assertEquals(1, out.size()); assertThat(out, hasSize(1));
assertThat(enumerator.moveNext()).isTrue(); assertThat(enumerator.current()).contains("value");
assertEquals(0L, Samples.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertThat(Samples.of("1").toString(), containsString("longValue=1,"));
assertEquals(0L, WriteLength.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertEquals( DigestUtil.calculateCrc16(new byte[]{47, 99}), DigestUtil.calculateCrc16(() -> Unpooled.wrappedBuffer(new byte[]{47}), () -> Unpooled.wrappedBuffer(new byte[]{99})));
assertThat(ex.getFieldToBeParsed(), equalTo("Pattern"));
assertThat(SUT.packetConsumer, nullValue()); assertThat(SUT.commands, hasSize(0)); assertThat(SUT.packetConsumer, notNullValue());
assertThat(SUT.getStatistics()).contains( entry("PoolKey{url=\'dummydummy:single/socket1/socket2?fancyOption=true\'}.numActive", 8) ); assertThat(SUT.getStatistics()).contains( entry("PoolKey{url=\'dummydummy:single/socket1/socket2?fancyOption=true\'}.numActive", 0) );
assertEquals(adsNotificationSample1, adsNotificationSample2);
assertThat(terms, hasSize(2)); assertThat(terms, hasSize(1));
assertThat(SUT.expectClazz, is(Object.class)); assertThat(SUT.commands, hasSize(1)); assertThat(SUT.commands.getLast().get(), notNullValue());
assertThat(a.equals(a), is(true)); assertThat(a.equals(b), is(true)); assertThat(a.equals(c), is(false)); assertThat(a.equals(1), is(false)); assertThat(a.equals((byte) 1), is(false)); assertThat(a.equals(array), is(false));
assertThat(error.getAsLong(), is(0xFFFFFFFFL));
assertThat(DataLength.of("1").toString(), containsString("longValue=1,"));
assertThat(SUT.commands, hasSize(1)); assertThat(SUT.commands.getLast().get(), notNullValue());
assertThat(Length.of("1").toString(), containsString("longValue=1,"));
assertEquals(0L, DataLength.of(NULL_BYTE, NULL_BYTE, NULL_BYTE, NULL_BYTE).getAsLong());
assertThat(error.getAsLong(), is(0xFFL));
assertEquals(1, out.size()); assertThat(out, hasSize(1));
assertThat(SUT.getConnection("simulated:foobar")).isInstanceOf(SimulatedConnection.class);
assertEquals(AmsPort.of("1").toString(), "1");
assertThat(a.equals(a), is(true)); assertThat(a.equals(b), is(true)); assertThat(a.equals(c), is(false)); assertThat(a.equals(1), is(false)); assertThat(a.equals((byte) 1), is(false)); assertThat(a.equals(array), is(false));
assertFalse(OpmUtils.isValidExpression("${hallo"));
assertEquals(patientDto, response);
assertEquals(id, response);
assertNull(response);
assertEquals(patientDto, response);
assertEquals(patientDto, response);
assertEquals(patientDto, response);
assertEquals(patientDto, response);
assertEquals(value, emailToken);
assertTrue(StringUtils.hasText(value1)); assertTrue(StringUtils.hasText(value2)); assertNotEquals(value1, value2);
assertEquals(scimUserResponse, response);
assertEquals(patientDto, response);
assertTrue(StringUtils.hasText(value1)); assertTrue(StringUtils.hasText(value2)); assertNotEquals(value1, value2); assertTrue(value1.length() <= maxLength); assertTrue(value2.length() <= maxLength);
assertEquals(id, response);
assertNotNull(executionException.getCause()); assertSame(ex, executionException.getCause());
assertEquals(i, cursor.next().getPrimaryKey().getLong(0)); assertEquals(100, i); assertEquals(i, cursor.next().getPrimaryKey().getLong(0)); assertEquals(0, i);
assertEquals(ImmutableSet.of("MySimpleRecord", "MyOtherRecord"), metaData.getRecordTypes().keySet()); assertEquals("Cannot rename record type to MySimpleRecord as an imported record type of that name already exists", e.getMessage());
assertFalse(result.hasNext()); assertEquals(RecordCursor.NoNextReason.SOURCE_EXHAUSTED, result.getNoNextReason()); assertTrue(result.getContinuation().isEnd());
assertThat(ex.getCause(), is(instanceOf(NoSuchElementException.class)));
assertEquals(1, timer.getCount(FDBStoreTimer.Events.BATCH_GET_READ_VERSION)); assertEquals(0, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION));
assertThat(e.getMessage(), containsString("No record type found"));
assertThat("digests match", primaryDigest.computeDigest().join(), is(replicaDigest.computeDigest().join()));
assertFalse(cursorResultFuture.isDone()); assertEquals(1, (int)cursorResult.get()); assertEquals(RecordCursor.NoNextReason.RETURN_LIMIT_REACHED, cursorResult.getNoNextReason()); assertThat(timer.getCount(FDBStoreTimer.Events.QUERY_INTERSECTION), lessThanOrEqualTo(5));
assertArrayEquals(subspace.pack(Tuple.from(3, j)), kv.getKey()); assertArrayEquals(Tuple.from(3, j).pack(), kv.getValue()); assertThat(cursor.getNext().hasNext(), is(false)); assertEquals(2, (int)cursor.getCount().join()); assertEquals(3, (int)cursor.getCount().join());
assertThat(context.getCommittedVersion(), greaterThan(readVersion));
assertArrayEquals(metadata, result.getMetadata()); assertEquals(expected.getValue(), resultFromDB.getValue()); assertArrayEquals(expected.getMetadata(), resultFromDB.getMetadata()); assertEquals(expected, globalScope.resolveWithMetadata("a-key", hooks).join()); assertArrayEquals(metadata, globalScope.resolveWithMetadata("a-key", newHooks).join().getMetadata(), "hook is only run on create, does not update metadata");
assertThat("we see the new metadata", updated, is(new ResolverResult(initial.getValue(), newMetadata))); assertThat("we see the committed metadata in a new transaction", newTransactionRead, is(updated));
assertThat("the FDB directory layer sees the mapping", directoryLayer.mustResolve(context, entry.getKey()).join(), is(entry.getValue())); assertThat("the ScopedDirectoryLayer sees the mapping", globalScope.mustResolve(context, entry.getKey()).join(), is(entry.getValue()));
assertEquals(1, (int)cursorResult.get()); assertNotNull(executionException.getCause()); assertSame(ex, executionException.getCause());
assertEquals(elems.stream().mapToInt(List::size).sum(), results.size()); assertEquals(childCursorList.size(), pos); assertThat(noNextResult.hasNext(), is(false)); assertThat(noNextResult.getNoNextReason().isSourceExhausted(), is(true));
assertEquals("No record type found with name OuterRecord.MiddleRecord", e.getMessage());
assertTrue(interningLayer.exists(context, "string-1").join(), "we see previously committed values"); assertTrue(interningLayer.exists(context, "string-2").join(), "we see values added in the current transaction"); assertFalse(interningLayer.exists(context, "string-3").join(), "we don\'t see values that haven\'t been added");
assertEquals(MatchType.NO_MATCH, match.getType());
assertEquals(MatchType.EQUALITY, match.getType()); assertEquals(Key.Evaluated.scalar(7), match.getEquality()); assertEquals(MatchType.EQUALITY, match.getType()); assertEquals(Key.Evaluated.scalar(7), match.getEquality());
assertThat(ex, hasMessageContaining("copy must be within same database"));
assertEquals(sortedTuples, sortedKeys); assertEquals(TEST_TUPLES, prefixedTuples);
assertTrue(end - start >= 30, "Delay was not long enough");
assertThat(presentValues, is(34L));
assertEquals(2, timer.getCount(DELETE_INDEX_ENTRY) + timer.getCount(SAVE_INDEX_ENTRY), "should update one index"); assertEquals(0, timer.getCount(DELETE_INDEX_ENTRY) + timer.getCount(SAVE_INDEX_ENTRY), "should not update any index");
assertEquals(1, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION)); assertEquals(readVersion1, readVersion2); assertEquals(1, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION)); assertEquals(grvNanos, timer.getTimeNanos(FDBStoreTimer.Events.GET_READ_VERSION));
assertThat("it is caused by a deadline exception", ex.getCause(), is(instanceOf(DeadlineExceededException.class))); assertThat(ex.getCause(), hasMessageContaining("deadline exceeded")); assertThat("we get the value before the deadline", cachedResult.orElseGet("a-key", onTimeSupplier).join(), is(3));
assertThat("all values are allocated", allocated.entrySet(), hasSize(50));
assertEquals(1, (int)cursorResult.get()); assertEquals(2, (int)cursorResult.get()); assertNotNull(executionException.getCause()); assertSame(ex, executionException.getCause());
assertFalse(MoreAsyncUtil.isCompletedNormally(future)); assertTrue(MoreAsyncUtil.isCompletedNormally(future)); assertFalse(MoreAsyncUtil.isCompletedNormally(future));
assertEquals((int)expectedIterator.next(), nextValue); assertThat(cursor.hasNext(), is(false)); assertThat(cursor.getNoNextReason().isSourceExhausted(), is(true));
assertFalse(iterator.hasNext()); assertFalse(iterator.hasNext());
assertEquals(BlockingInAsyncDetection.IGNORE_COMPLETE_EXCEPTION_BLOCKING, database.getBlockingInAsyncDetection());
assertEquals(1L, recordStore.scanIndexRecords("MyRecord1$str_value").getCount().get().longValue(), "should have one record in index"); assertNotNull(rec2); assertEquals("two", myrec.getStrValue(), "should load second record"); assertEquals(0L, recordStore.scanIndexRecords("MyRecord1$str_value").getCount().get().longValue(), "should have no records in index");
assertThat("we should always get the original value", fetched, is(value)); assertThat("subsequent lookups should hit the cache", stats.hitCount(), is(5L));
assertEquals(1, timer.getCount(FDBStoreTimer.Events.PERFORM_NO_OP)); assertThat(timer.getCount(FDBStoreTimer.Waits.WAIT_PERFORM_NO_OP), lessThanOrEqualTo(1));
assertThat("reverse lookup works in a new context", lookupString, is("something"));
assertEquals(MatchType.NO_MATCH, match.getType());
assertThat(e.getMessage(), containsString("failed getting value")); assertThat(e.getCause().getMessage(), containsString("this is only a test")); assertThat("we have to call the supplier each time", counter.get(), is(10));
assertEquals(1, timer.getCount(FDBStoreTimer.Waits.WAIT_GET_READ_VERSION)); assertEquals(1, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION)); assertEquals(1, timer.getCount(FDBStoreTimer.Events.INJECTED_GET_READ_VERSION_LATENCY)); assertThat(injectedNanos, lessThanOrEqualTo(grvNanos)); assertThat(waitNanos, greaterThan(0L));
assertThat("resolved value is larger than the set window", value, greaterThanOrEqualTo(10000L)); assertThat("we can still read the old mappings", value, is(entry.getValue()));
assertEquals(100L, context.getTimeoutMillis());
assertThat(ex.getCause(), is(instanceOf(NoSuchElementException.class))); assertThat(ex.getCause(), hasMessageContaining("updateMetadata must reference key that already exists"));
assertFalse(result.hasNext()); assertEquals(RecordCursor.NoNextReason.SOURCE_EXHAUSTED, result.getNoNextReason()); assertTrue(result.getContinuation().isEnd());
assertEquals(entries, deserializedEntries);
assertNotNull(context.getVersionStamp()); assertThat(committedVersion, greaterThan(0L)); assertEquals(committedVersion, ByteBuffer.wrap(context.getVersionStamp()).getLong());
assertEquals(1, counter.get()); assertNull(value); assertEquals(1, counter.get()); assertNull(value);
assertNotNull(myrec1); assertEquals("abc", myrec1.getStrValueIndexed()); assertEquals(123, myrec1.getNumValueUnique());
assertEquals((int)expectedIterator.next(), (int)cursor.next()); assertThat(childCursor.getNext().hasNext(), is(false)); assertThat(cursor.hasNext(), is(false)); assertThat(cursor.getNoNextReason().isSourceExhausted(), is(true));
assertArrayEquals(initialResult.getMetadata(), oldMetadata);
assertThat("every allocation operation has a distinct value", allocated.entrySet(), hasSize(50));
assertFalse(reverseDirectoryCache.get(createRandomDirectoryScope().wrap(1L)).join().isPresent(), "reverse lookup miss should return empty optional");
assertThat(cachedResult.orElseGet("k1", getSupplier(234, counter1, false)).join(), is(234)); assertThat("we do not call the supplier while the cache is valid", counter1.get(), is(1)); assertThat("we retry the supplier after a failure", counter2.get(), is(i));
assertTrue((myrec.getNumValueUnique() % 2) == 0); assertEquals(50, i);
assertTrue(end - start >= 100, "Delay was not long enough");
assertArrayEquals(ByteArrayUtil.join( new byte[]{0x03}, key.pack(), new byte[]{0x05}, new byte[]{0x00, 0x01, 0x7f, (byte)0x81, 0x00} ), serialized);
assertThat("we got the expected exception", ex.getCause(), is(instanceOf(RecordCoreException.class))); assertThat("it\'s the test exception", ex.getCause().getMessage(), containsString("this is only a test")); assertThat("before future is ready we return the in progress cached future", callCount.get(), is(1)); assertThat("after cached future completes exceptionally we attempt to get the value again", callCount.get(), is(2));
assertFalse(v2.isComplete()); assertEquals(4, v2.getLocalVersion());
assertEquals(firstReadVersion, readVersion); assertEquals(1, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION));
assertThat("there are no scans of the directory layer", timer.getCount(FDBStoreTimer.DetailEvents.RD_CACHE_DIRECTORY_SCAN), is(0));
assertEquals(FDBRecordVersion.complete(VERSION_BYTES_TWO, 100), FDBRecordVersion.fromVersionstamp(stamp1)); assertEquals(FDBRecordVersion.incomplete(42), FDBRecordVersion.fromVersionstamp(stamp2));
assertEquals(1415L, context.getTimeoutMillis(), "timeout millis did not match config timeout"); assertEquals(1066L, context.getTimeoutMillis(), "timeout millis did not match factory timeout");
assertEquals(1066L, context.getTimeoutMillis(), "timeout millis did not match factory timeout"); assertEquals(FDBDatabaseFactory.DEFAULT_TR_TIMEOUT_MILLIS, context.getTimeoutMillis(), "timeout millis did not match default");
assertTrue(storeTimer.getAggregates().contains(FDBStoreTimer.CountAggregates.BYTES_DELETED)); assertNotNull(storeTimer.getCounter(FDBStoreTimer.CountAggregates.BYTES_DELETED)); assertEquals(1622, storeTimer.getCount(FDBStoreTimer.CountAggregates.BYTES_DELETED), "Incorrect aggregate count for BYTES_DELETED");
assertNotEquals(metaData1.isStoreRecordVersions(), metaData2.isStoreRecordVersions()); assertNotEquals(metaData2.isStoreRecordVersions(), metaData3.isStoreRecordVersions());
assertEquals("[]", uncaught.toString());
assertSame(fieldA, nestedFieldBMask.getChild(fieldA).getFilter()); assertSame(nestedFieldB, andMask.getChild(nestedFieldB).getFilter());
assertEquals(2, (int) cursor.getCount().join()); assertThat("no next reason should be SCAN_LIMIT_REACHED", result.getNoNextReason(), equalTo(RecordCursor.NoNextReason.SCAN_LIMIT_REACHED));
assertEquals(MatchType.EQUALITY, match.getType()); assertEquals(Key.Evaluated.concatenate(7, 11), match.getEquality());
assertThat("a should be pathA", path.get(0), instanceOf(PathA.class)); assertThat("b should be pathB", path.get(1), instanceOf(PathB.class));
assertArrayEquals(subspace.pack(Tuple.from(i, j)), kv.getKey()); assertArrayEquals(Tuple.from(i, j).pack(), kv.getValue()); assertThat(cursor.getNext().hasNext(), is(false)); assertEquals(10, (int)cursor.getCount().join()); assertEquals(15, (int)cursor.getCount().join());
assertThat(e.getMessage(), containsString("meta-data version must increase"));
assertArrayEquals(allBytes, ByteArrayUtil2.unprint(ByteArrayUtil2.loggable(allBytes))); assertArrayEquals(allBytes, ByteArrayUtil2.unprint(ByteArrayUtil.printable(allBytes)));
assertThat("we got the expected exception", ex.getCause(), is(instanceOf(RecordCoreException.class))); assertThat("it\'s the test exception", ex.getCause().getMessage(), containsString("this is only a test")); assertThat("before future is ready we return the in progress cached future", callCount.get(), is(1)); assertThat("after cached future completes exceptionally we attempt to get the value again", callCount.get(), is(2));
assertEquals(Arrays.asList(2, 3), cursor.asList().join()); assertEquals(Arrays.asList(4, 5), cursor.asList().join()); assertEquals(Arrays.asList(6), cursor.asList().join());
assertThat(metaData1.getRecordTypes().keySet(), containsInAnyOrder("MySimpleRecord", "MyOtherRecord")); assertThat(metaData2.getRecordTypes().keySet(), containsInAnyOrder("MySimpleRecord", "MyOtherRecord", "MyOtherOtherRecord"));
assertThat("allocations are unique within a transaction", allocated, not(hasKey(thisAllocation))); assertThat("allocations are unique across transactions", allocated, not(hasKey(newAllocation)));
assertThat(ex.getMessage(), containsString("Could not deserialize union message")); assertThat(ex.getMessage(), containsString("there are extra known fields")); assertThat((Collection<?>)ex.getLogInfo().get("fields"), not(empty()));
assertNotNull(executionException.getCause()); assertSame(ex, executionException.getCause());
assertEquals(resolvedValue, resolvedAgainValue, "resolved value changed between transactions");
assertArrayEquals(Tuple.from("metadata-for-some-key").pack(), result.getMetadata(), "metadata was added"); assertEquals(resultFromScoped.getValue(), result.getValue()); assertThat(resultFromScoped.getMetadata(), is(nullValue())); assertArrayEquals(globalScope.mustResolveWithMetadata(context, "some-key").join().getMetadata(), Tuple.from("metadata-for-some-key").pack(), "we can still read the metadata with " + globalScope.getClass().getName());
assertTrue(value); assertTrue(value); assertThat("supplier is called once per incomplete access", counter.get(), is(parallelOperations.size()));
assertTrue(db.readAsync(tr -> tr.getRange(rsSubspace.range()).asList()).join().size() == 1, "Key does not appear to be added"); assertTrue(db.readAsync(tr -> tr.getRange(rsSubspace.range()).asList()).join().isEmpty(), "Clear did not remove key");
assertThat("same resolvers produce identical results", resolved, contains(same.toArray())); assertThat("different resolvers are independent", resolved, not(contains(different.toArray())));
assertThat("value is in mapping", allocations.get(toIntern), is(value));
assertArrayEquals(interned.getMetadata(), metadata, "we see the metadata with the interned value"); assertThat(ex.getCause(), is(instanceOf(RecordCoreException.class))); assertThat(ex.getCause().getMessage(), containsString("value already exists in interning layer")); assertThat("exception log info has the key", cause.getLogInfo(), hasEntry("value", toIntern));
assertThat("we get the correct cause", ex.getCause(), allOf( instanceOf(LocatableResolverLockedException.class), hasMessageContaining("resolver must be unlocked to get exclusive lock") ));
assertEquals(3, (int)cursor.next()); assertThat(cursor.hasNext(), is(true)); assertThat(cursor2.getNext().hasNext(), is(false)); assertEquals(0, (int)cursor.next()); assertEquals(1, (int)cursor.next()); assertThat(cursor.hasNext(), is(false)); assertEquals(RecordCursor.NoNextReason.RETURN_LIMIT_REACHED, cursor.getNoNextReason());
assertThat(ex.getMessage(), containsString("Could not deserialize union message")); assertThat(ex.getMessage(), containsString("there are no fields")); assertThat((Collection<?>)ex.getLogInfo().get("fields"), empty());
assertEquals("Error converting from protobuf", e.getMessage());
assertThat("skipped items should exhaust limit", result.hasNext(), is(false)); assertThat("no next reason should be SCAN_LIMIT_REACHED", result.getNoNextReason(), equalTo(RecordCursor.NoNextReason.SCAN_LIMIT_REACHED));
assertArrayEquals(expectedBytes, serializer.serializeEntries(entries));
assertEquals(Arrays.asList(2, 3), cursor.asList().join()); assertEquals(Arrays.asList(5, 6), cursor.asList().join());
assertEquals("Cannot rename record type to the default union name", e.getMessage());
assertEquals(3, (int) cursor.getCount().join()); assertThat("no next reason should be SOURCE_EXHAUSTED", result.getNoNextReason(), equalTo(RecordCursor.NoNextReason.SOURCE_EXHAUSTED));
assertEquals((Long) i, cursor.next()); assertEquals(25, i);
assertThat("only one exclusiveLock succeeds", lockGetCount.get(), is(1));
assertEquals(MatchType.EQUALITY, match.getType()); assertEquals(Key.Evaluated.scalar("hello!"), match.getEquality());
assertThat("new mapped values are all greater than max from original directory layer", mapped, is(greaterThan(maxMappedValue)));
assertEquals("No record type found with name MyNonExistentRecord", e.getMessage());
assertEquals(firstReadVersion, context.getReadVersion()); assertEquals(0, timer.getCount(FDBStoreTimer.Events.GET_READ_VERSION));
assertThat("we see the same interned value for subsequent calls in the transaction", currentCall, is(internedValue)); assertThat("we see the same interned value for subsequent transactions", currentCall, is(internedValue));
assertEquals(1960, calendar.get(Calendar.YEAR)); assertEquals(Calendar.JANUARY, calendar.get(Calendar.MONTH)); assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH)); assertEquals(23, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(3, calendar.get(Calendar.MINUTE)); assertEquals(20, calendar.get(Calendar.SECOND));
assertEquals(23, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(3, calendar.get(Calendar.MINUTE)); assertEquals(20, calendar.get(Calendar.SECOND));
assertEquals(2, buffer.capacity()); assertTrue(buffer.readBoolean()); assertFalse(buffer.readBoolean()); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertFalse(ch.config().getOptions().isEmpty());
assertTrue(logger.isDebugEnabled());
assertEquals(8, handler1.outboundBuffer.peek()); assertTrue(handler2.outboundBuffer.isEmpty()); assertEquals(8, handler2.outboundBuffer.peek());
assertEquals(expectedOutbound, outbound);
assertThat(e, is(instanceOf(TooLongFrameException.class))); assertThat(buf, is(buf2)); assertThat(ch.finish(), is(false));
assertEquals(new AsciiString("foo"), headers.authority());
assertEquals("first", buf.toString(CharsetUtil.US_ASCII)); assertEquals("second", buf2.toString(CharsetUtil.US_ASCII)); assertNull(ch.readInbound());
assertEquals("default", SystemPropertyUtil.get("key", "default"));
assertTrue(latch.await(5, SECONDS));
assertNotEquals(h1, h2); assertNotEquals(h2, h1); assertEquals(h1, h1); assertEquals(h2, h2);
assertTrue(healthCheckOnReleasePool.releaseHealthCheck()); assertFalse(noHealthCheckOnReleasePool.releaseHealthCheck());
assertEquals(8, buffer.capacity()); assertEquals(42, buffer.readLong()); assertFalse(buffer.isReadable());
assertTrue(write(100)); assertEquals(20, captureWrites(STREAM_A)); assertEquals(80, captureWrites(STREAM_B)); assertTrue(write(100)); assertEquals(40, captureWrites(STREAM_A)); assertEquals(160, captureWrites(STREAM_B)); assertTrue(write(1050)); assertEquals(250, captureWrites(STREAM_A)); assertEquals(1000, captureWrites(STREAM_B)); assertFalse(write(750)); assertEquals(1000, captureWrites(STREAM_A)); assertEquals(1000, captureWrites(STREAM_B));
assertEquals("length=" + i, hashCodeAsciiSafe(bytes, 0, bytes.length), hashCodeAscii(bytes, 0, bytes.length)); assertEquals("length=" + i, hashCodeAscii(bytes, 0, bytes.length), hashCodeAscii(string));
assertTrue(in.refCnt() != 0); assertTrue(channel.writeInbound(Unpooled.wrappedBuffer(bytes))); assertTrue(channel.finishAndReleaseAll());
assertThat(buffer.forEachByte(new ByteProcessor() { int i = CAPACITY / 4; @Override public boolean process(byte value) throws Exception { assertThat(value, is((byte) (i + 1))); lastIndex.set(i); i ++; return true; } }), is(-1)); assertThat(value, is((byte) (i + 1))); assertThat(lastIndex.get(), is(CAPACITY * 3 / 4 - 1));
assertTrue(promise.isSuccess());
assertFalse(map.isEmpty());
assertNull(cookie.path());
assertTrue(logger.isWarnEnabled());
assertEquals(13, buffer.maxCapacity()); assertEquals(3, buffer.capacity());
assertEquals(16, buffer.capacity());
assertEquals(testEntry.getValue(), toAddressString(InetAddress.getByAddress(testEntry.getKey())));
assertEquals(1, flushCount.get()); assertFalse(channel.finish());
assertEquals(new Date(784080000000L), parseHttpDate("Sunday, 6 Nov 1994 00:00:00 GMT"));
assertFalse(ch.writeInbound(copiedBuffer("12345678901234567", CharsetUtil.US_ASCII))); assertThat(e, is(instanceOf(TooLongFrameException.class))); assertThat(buf, is(buf2)); assertThat(ch.finish(), is(false));
assertNotEquals(headers1, headers2);
assertEquals("", ByteBufUtil.hexDump(EMPTY_BUFFER)); assertEquals("123456", ByteBufUtil.hexDump(buffer)); assertEquals("1234567890abcdef", ByteBufUtil.hexDump(buffer));
assertNotNull(stream); assertFalse(isStreamIdValid(stream.id())); assertTrue(future.isSuccess()); assertTrue(isStreamIdValid(stream.id())); assertTrue(f.isSuccess()); assertTrue(listenerExecuted.isSuccess());
assertNull(host, getByName(host, true)); assertNull(host, getByName(host, true));
assertEquals(0, buffer.readerIndex()); assertEquals(buffer.capacity(), buffer.writerIndex()); assertEquals(0, buffer.getByte(i));
assertFalse(headers.isEmpty()); assertEquals(3, headers.size());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertTrue(future.isDone()); assertFalse(future.isSuccess());
assertSame(healthChecker, pool.healthChecker());
assertEquals(123, SystemPropertyUtil.getLong("key", 1));
assertTrue(error); assertEquals(10, i);
assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, length));
assertTrue(logger.isInfoEnabled());
assertEquals(DEFAULT_WINDOW_SIZE, window(CONNECTION_STREAM_ID)); assertEquals(0, window(STREAM_A)); assertEquals(0, window(STREAM_B)); assertEquals(0, window(STREAM_C)); assertEquals(0, window(STREAM_D));
assertSame("", StringUtil.escapeCsv("", true)); assertSame("ab", StringUtil.escapeCsv("ab", true));
assertEquals(Http2Error.INTERNAL_ERROR, e.error());
assertNotNull(value); assertEquals(cacheControl, value); assertNotNull(value2); assertEquals(cacheControl, value2);
assertTrue(future.isDone()); assertFalse(future.isSuccess());
assertEquals(1, flushCount.get()); assertFalse(channel.finish());
assertEquals("Sun, 6 Nov 1994 08:49:37 GMT", format(DATE));
assertSame(a, queue.peek()); assertSame(a, queue.peek()); assertSame(c, queue.peek()); assertSame(c, queue.peek());
assertEquals("", inboundHandler.writabilityStates()); assertEquals("true", inboundHandler.writabilityStates()); assertEquals("true", inboundHandler.writabilityStates()); assertEquals("true,false", inboundHandler.writabilityStates()); assertEquals("true,false", inboundHandler.writabilityStates());
assertTrue(e.getCause() instanceof ClosedChannelException);
assertEquals(4, buffer.capacity()); assertEquals(42, buffer.readFloat(), 0.01); assertFalse(buffer.isReadable());
assertEquals(0, flushCount.get());
assertNotNull(f1.cause()); assertNotNull(f2.cause()); assertNotNull(f3.cause());
assertTrue(ctx.executor().inEventLoop()); assertFalse(channel.finish());
assertSame(TRAILERS, out.get(TE));
assertTrue(SystemPropertyUtil.getBoolean("key", true)); assertFalse(SystemPropertyUtil.getBoolean("key", false));
assertEquals(SWITCHING_PROTOCOLS, response.status()); assertNotNull(WebSocketServerProtocolHandler.getHandshaker(handshakerCtx.channel()));
assertTrue(logger.isDebugEnabled());
assertTrue(logger.isTraceEnabled());
assertTrue(logger.isInfoEnabled());
assertTrue(childChannel.isActive()); assertEquals(stream2, reset.stream()); assertEquals(Http2Error.CANCEL.code(), reset.errorCode());
assertTrue(future.isCancelled());
assertEquals(DEFAULT_WINDOW_SIZE + 100, window(CONNECTION_STREAM_ID)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_A)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_B)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_C)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_D));
assertFalse(unmodifiableBuffer(buffer(1)).isWritable());
assertEquals(DATE, parseHttpDate("Sun Nov 6 08:49:37 1994 -0000"));
assertTrue(logger.isErrorEnabled());
assertEquals(1610612736, Base64.decodedBufferSize(Integer.MAX_VALUE));
assertEquals("Troublesome object [FAILED toString()]", result);
assertTrue(out.isEmpty());
assertEquals(DATE, parseHttpDate("Sunday, 6-Nov-94 8:49:37 GMT"));
assertTrue(latch.await(2, TimeUnit.SECONDS));
assertEquals(6, buffer.capacity()); assertEquals(1, buffer.readMedium()); assertEquals(4, buffer.readMedium()); assertFalse(buffer.isReadable()); assertEquals(0, copyMedium(null).capacity()); assertEquals(0, buffer.capacity());
assertEquals(8, buffer.capacity()); assertEquals(1, buffer.readInt()); assertEquals(4, buffer.readInt()); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertEquals(8, handler1.inboundBuffer.peek()); assertTrue(handler2.inboundBuffer.isEmpty()); assertEquals(1, handler2.inboundBuffer.size()); assertEquals(8, handler2.inboundBuffer.peek());
assertEquals(8, payloadCaptor.getValue().size()); assertEquals(0, payloadCaptor.getValue().size()); assertEquals("abcdefgh", writtenData.get(0)); assertEquals(0, data.refCnt()); assertTrue(p.isSuccess());
assertSame(TRAILERS, out.get(TE));
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals(expectedOutbound, outbound);
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals("DefaultHttpHeaders[foo: bar, baz: qix]", newDefaultDefaultHttpHeaders() .add("foo", "bar") .add("baz", "qix") .toString());
assertThat(exceptions, hasSize(size));
assertEquals(1, frame.refCnt()); assertTrue(f.isDone()); assertFalse(f.isSuccess()); assertThat(f.cause(), instanceOf(UnsupportedMessageTypeException.class)); assertEquals(0, frame.refCnt());
assertThat(e, is(instanceOf(TooLongFrameException.class))); assertThat(ch.writeInbound(copiedBuffer("890", CharsetUtil.US_ASCII)), is(false)); assertThat(ch.writeInbound(copiedBuffer("123\\r\\nfirst\\r\\n", CharsetUtil.US_ASCII)), is(true)); assertThat(buf, is(buf2)); assertThat(ch.finish(), is(false));
assertEquals(readerIndex, in.readerIndex());
assertEquals(expected, buf.readShort()); assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShortLE()); assertEquals((short) expected, buf.readShortLE()); assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShort());
assertEquals(1, SystemPropertyUtil.getLong("key", 1));
assertFalse(headers.isEmpty());
assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(message)); assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(NORMAL_CONTENT_TYPE)); assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(message)); assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(UPPER_CASE_NORMAL_CONTENT_TYPE));
assertTrue(free.await(10, TimeUnit.SECONDS)); assertTrue(handler.called);
assertTrue(latch.await(5, SECONDS)); assertNull(String.format( "Expected null, got channel \'%s\' for local address \'%s\'", LocalChannelRegistry.get(TEST_ADDRESS), TEST_ADDRESS), LocalChannelRegistry.get(TEST_ADDRESS));
assertTrue(messageLatch.await(5, SECONDS));
assertNull(cookie);
assertTrue(latch.await(5, SECONDS));
assertTrue(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, length));
assertFalse(unmodifiableBuffer(buffer(1)).isWritable(1));
assertTrue(e.getCause() instanceof ClosedChannelException);
assertEquals(8, handler1.inboundBuffer.peek()); assertEquals(8, handler1.outboundBuffer.peek()); assertTrue(handler2.inboundBuffer.isEmpty()); assertTrue(handler2.outboundBuffer.isEmpty()); assertEquals(8, handler2.outboundBuffer.peek()); assertEquals(8, handler2.inboundBuffer.peek());
assertTrue(channelInactiveCalled.compareAndSet(false, true)); assertTrue(channel.writeInbound(new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"))); assertTrue(channel.writeInbound(content)); assertEquals(1, content.refCnt()); assertTrue(channelInactiveCalled.get()); assertEquals(0, content.refCnt());
assertSame(buffer.order(), duplicate.order()); assertEquals(buffer.readableBytes(), duplicate.readableBytes()); assertEquals(0, buffer.compareTo(duplicate)); assertEquals(buffer.getByte(readerIndex), duplicate.getByte(duplicate.readerIndex())); assertEquals(buffer.getByte(readerIndex), duplicate.getByte(duplicate.readerIndex()));
assertNull(pipeline.first());
assertFalse(future.isDone()); assertTrue(future.await(1, TimeUnit.SECONDS)); assertSame(channel, channel2); assertEquals(1, handler.channelCount()); assertEquals(1, handler.acquiredCount()); assertEquals(1, handler.releasedCount());
assertThat(one.id(), is(not(two.id())));
assertEquals(e.getKey() + ":9999", toSocketAddressString(new InetSocketAddress(InetAddress.getByAddress(unhex(e.getValue())), 9999)));
assertEquals("HTTPOnly", cookie.name()); assertEquals("", cookie.value());
assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); assertThat(expected, is(actual)); assertFalse(ch.finish());
assertEquals(HALF_CLOSED_REMOTE, stream.state()); assertTrue(promise.isSuccess());
assertTrue(logger.isTraceEnabled());
assertFalse(buf.copy() instanceof ReadOnlyByteBuf);
assertEquals(DEFAULT_WINDOW_SIZE, window(CONNECTION_STREAM_ID)); assertEquals(DEFAULT_WINDOW_SIZE + 100, window(STREAM_A)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_B)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_C)); assertEquals(DEFAULT_WINDOW_SIZE, window(STREAM_D));
assertEquals(expectedOutbound, outbound);
assertEquals("path", cookie.name()); assertEquals("", cookie.value()); assertEquals("/", cookie.path());
assertFalse(map.isEmpty());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals(MAX_VALUE, decodeULE128(in, 0));
assertTrue(promise.isSuccess());
assertEquals(16, buffer.capacity()); assertEquals(1, buffer.readLong()); assertEquals(4, buffer.readLong()); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertEquals("\\"utf8\\"", HttpUtil.getCharsetAsSequence(message)); assertEquals("\\"utf8\\"", HttpUtil.getCharsetAsSequence(QUOTES_CHARSET_CONTENT_TYPE)); assertNull(HttpUtil.getCharsetAsSequence(message)); assertNull(HttpUtil.getCharsetAsSequence(SIMPLE_CONTENT_TYPE));
assertTrue(SmtpCommand.valueOf("DATA").isContentExpected()); assertTrue(SmtpCommand.valueOf("data").isContentExpected()); assertFalse(SmtpCommand.HELO.isContentExpected()); assertFalse(SmtpCommand.HELP.isContentExpected()); assertFalse(SmtpCommand.valueOf("DATA2").isContentExpected());
assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, -1));
assertEquals("DefaultHttpHeaders[foo: bar]", newDefaultDefaultHttpHeaders() .add("foo", "bar") .toString());
assertTrue(msgRcvLatch1.await(1L, SECONDS)); assertTrue(msgRcvLatch1.await(1L, SECONDS)); assertTrue(msgRcvLatch3.await(1L, SECONDS)); assertTrue(flow.isQueueEmpty());
assertEquals(13, buffer.maxCapacity()); assertEquals(3, buffer.capacity()); assertEquals(4, buffer.capacity()); assertEquals(13, buffer.maxCapacity());
assertEquals(firstGroup, firstCaptured.get()); assertEquals(secondGroup, secondCaptured.get());
assertEquals("value", SystemPropertyUtil.get("key"));
assertFalse(SystemPropertyUtil.getBoolean("key", true)); assertFalse(SystemPropertyUtil.getBoolean("key", false)); assertFalse(SystemPropertyUtil.getBoolean("key", true));
assertNull(interrupted.get()); assertNull(interrupted.get()); assertEquals(2, counter.get());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(1, frame.headers().names().size()); assertTrue(frame.headers().contains(name)); assertEquals(1, frame.headers().getAll(name).size()); assertEquals(value, frame.headers().get(name));
assertEquals(1, buf.refCnt()); assertTrue(buf.duplicate().release()); assertEquals(0, buf.refCnt());
assertEquals(0, metric.usedHeapMemory()); assertEquals(expectedUsedMemory(allocator, capacity), metric.usedHeapMemory()); assertEquals(expectedUsedMemory(allocator, capacity), metric.usedHeapMemory()); assertEquals(expectedUsedMemoryAfterRelease(allocator, capacity), metric.usedHeapMemory());
assertThat(toHexStringPadded(new byte[]{0}), is("00")); assertThat(toHexStringPadded(new byte[]{1}), is("01")); assertThat(toHexStringPadded(new byte[]{0, 0}), is("0000")); assertThat(toHexStringPadded(new byte[]{1, 0}), is("0100")); assertThat(toHexStringPadded(EmptyArrays.EMPTY_BYTES), is(""));
assertEquals(expectedOutbound, outbound);
assertTrue(logger.isErrorEnabled());
assertTrue(PlatformDependent.isZero(bytes, 0, 0)); assertTrue(PlatformDependent.isZero(bytes, 0, -1)); assertTrue(PlatformDependent.isZero(bytes, 0, 100)); assertTrue(PlatformDependent.isZero(bytes, 10, 90)); assertTrue(PlatformDependent.isZero(bytes, 0, 10)); assertFalse(PlatformDependent.isZero(bytes, 0, 11)); assertFalse(PlatformDependent.isZero(bytes, 10, 1)); assertTrue(PlatformDependent.isZero(bytes, 11, 89));
assertNull(input.readChunk(ByteBufAllocator.DEFAULT));
assertTrue(error); assertEquals(10, i);
assertNull(HttpUtil.getMimeType(message)); assertNull(HttpUtil.getMimeType(message)); assertNull(HttpUtil.getMimeType("")); assertEquals("text/html", HttpUtil.getMimeType(message)); assertEquals("text/html", HttpUtil.getMimeType(SIMPLE_CONTENT_TYPE)); assertEquals("text/html", HttpUtil.getMimeType(message)); assertEquals("text/html", HttpUtil.getMimeType(NORMAL_CONTENT_TYPE));
assertSame(buf, unmodifiableBuffer(buf).unwrap());
assertEquals(DEFAULT_NDOTS, parseEtcResolverFirstNdots(f));
assertEquals(HALF_CLOSED_REMOTE, stream(PUSH_STREAM_ID).state());
assertArrayEquals(new byte[]{0, (byte) 0xaa, 0x11, (byte) 0xbb, 0x22, (byte) 0xcc}, parseMAC("00-AA-11-BB-22-CC")); assertArrayEquals(new byte[]{0, (byte) 0xaa, 0x11, (byte) 0xbb, 0x22, (byte) 0xcc}, parseMAC("00:AA:11:BB:22:CC"));
assertThat(set.size(), is(3)); assertThat(seq.stream(), is(not(sameInstance(seq.stream()))));
assertFalse(itr.hasNext());
assertTrue(out.isEmpty());
assertEquals(mediumValue, buf.readMedium()); assertEquals(ByteBufUtil.swapMedium(mediumValue), buf.readMediumLE()); assertEquals(mediumValue, buf.readMediumLE()); assertEquals(ByteBufUtil.swapMedium(mediumValue), buf.readMedium());
assertEquals("1234", buffer.toString(bytes.length, bytes.length, CharsetUtil.UTF_8));
assertSame(one, map.attr(key)); assertEquals(Integer.valueOf(3653), one.get()); assertNotSame(1, one.get()); assertNull(one.get());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(1, frame.headers().names().size()); assertTrue(frame.headers().contains(name)); assertEquals(1, frame.headers().getAll(name).size()); assertEquals(value, frame.headers().get(name));
assertEquals(expectedOutbound, outbound);
assertEquals("GET / HTTP/1.1\\r\\n", req);
assertSame(handler, pool.handler());
assertEquals("failed to resolve " + resolvedEntry.getKey(), overriddenIP, resolvedEntry.getValue().getHostAddress()); assertNotEquals("failed to resolve " + resolvedEntry.getKey(), overriddenIP, resolvedEntry.getValue().getHostAddress());
assertEquals(1, ((ReferenceCounted) sslContext).refCnt()); assertEquals(1, ((ReferenceCounted) sslEngine).refCnt()); assertTrue(ch.finishAndReleaseAll()); assertEquals(1, ((ReferenceCounted) sslContext).refCnt()); assertEquals(0, ((ReferenceCounted) sslEngine).refCnt());
assertTrue(inactive.get());
assertNull(result);
assertEquals(shortValue, buf.readShort()); assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShortLE()); assertEquals((short) shortValue, buf.readShortLE()); assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShort());
assertEquals(otherHeaders().length / 2, headers.size());
assertTrue(SystemPropertyUtil.getBoolean("key", true)); assertFalse(SystemPropertyUtil.getBoolean("key", false));
assertNull(stream);
assertEquals(16, buf.capacity());
assertEquals("Literal was not decoded correctly", expected, out);
assertNotNull(Http2MultiplexCodecBuilder.forServer(new SharableChannelHandler1())); assertNotNull(Http2MultiplexCodecBuilder.forServer(new SharableChannelHandler2()));
assertTrue(isStreamIdValid(stream1.id())); assertTrue(isStreamIdValid(stream2.id())); assertTrue(promise1.syncUninterruptibly().isSuccess()); assertFalse(promise2.isDone()); assertTrue(promise2.syncUninterruptibly().isSuccess());
assertTrue(AsciiString.contentEqualsIgnoreCase("value1", headers.get("Name1"))); assertTrue(AsciiString.contentEqualsIgnoreCase("/foo", headers.get(Http2Headers.PseudoHeaderName.PATH.value()))); assertNull(headers.get(Http2Headers.PseudoHeaderName.STATUS.value())); assertNull(headers.get("a missing header"));
assertTrue(ByteBufUtil.compare(expected, actual) > 0); assertTrue(ByteBufUtil.compare(expected, actual) > 0);
assertEquals(headersSizeBefore + 1, headers.size()); assertEquals("foo", headers.authority()); assertEquals("value2", headers.get("name2"));
assertFalse(out.contains(TE));
assertEquals(loggerName, logger.name());
assertEquals(4, buffer.capacity()); assertEquals(42, buffer.readInt()); assertFalse(buffer.isReadable());
assertEquals("netty.io.", record.name()); assertEquals(DnsRecord.CLASS_IN, record.dnsClass()); assertEquals(60, record.timeToLive()); assertEquals(DnsRecordType.PTR, record.type()); assertEquals(readerIndex, buffer.readerIndex()); assertEquals(writerIndex, buffer.writerIndex());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(1, frame.headers().names().size()); assertTrue(frame.headers().contains(name)); assertEquals(1, frame.headers().getAll(name).size()); assertEquals(value, frame.headers().get(name));
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals(123, SystemPropertyUtil.getInt("key", 1));
assertNotEquals(headers1, headers2);
assertSame(object, object2);
assertTrue(e.getCause() instanceof ClosedChannelException);
assertFalse(message.headers().isEmpty()); assertTrue(message.headers().isEmpty());
assertTrue(cc.inboundBuffer.isEmpty());
assertEquals(DATE, parseHttpDate("Sun, 06 Nov 1994 08:49:37 GMT"));
assertTrue(readable > 0); assertFalse(decodeLast); assertTrue(channel.writeInbound(Unpooled.wrappedBuffer(bytes))); assertNull(channel.readInbound()); assertTrue(channel.finish()); assertNull(channel.readInbound());
assertTrue(logger.isTraceEnabled());
assertFalse(iterator.hasNext());
assertEquals(readerIndex, in.readerIndex());
assertEquals(MAX_UNSIGNED_INT, (long) settings.get(Http2CodecUtil.SETTINGS_HEADER_TABLE_SIZE));
assertFalse(buffer.equals(null)); assertFalse(buffer.equals(new Object())); assertEquals(buffer, wrappedBuffer(value)); assertEquals(buffer, wrappedBuffer(value).order(LITTLE_ENDIAN)); assertFalse(buffer.equals(wrappedBuffer(value))); assertFalse(buffer.equals(wrappedBuffer(value).order(LITTLE_ENDIAN)));
assertEquals(8, buffer.capacity()); assertEquals(42, buffer.readDouble(), 0.01); assertFalse(buffer.isReadable());
assertEquals(16, mergedPayload.size()); assertFalse(promise1.isSuccess()); assertFalse(promise2.isSuccess()); assertEquals(0, mergedPayload.size()); assertEquals("abcdefghabcdefgh", writtenData.get(0)); assertEquals(0, data.refCnt()); assertFalse(promise1.isSuccess()); assertFalse(promise2.isSuccess());
assertEquals(Integer.MAX_VALUE, Base64.encodedBufferSize(Integer.MAX_VALUE, true)); assertEquals(Integer.MAX_VALUE, Base64.encodedBufferSize(Integer.MAX_VALUE, false));
assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); assertThat(actual, is(expected)); assertFalse(ch.finish());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals( e.getValue().intValue(), ByteBufUtil.hashCode(buffer));
assertThat(seq.stream(), is(not(sameInstance(seq.stream()))));
assertFalse(ChannelOption.exists(name)); assertSame(option, option2);
assertFalse(headers.isEmpty()); assertEquals(3, headers.size()); assertEquals(2, names.size()); assertTrue(APPLICATION_JSON.contentEqualsIgnoreCase(names.get(0))); assertTrue(APPLICATION_OCTET_STREAM.contentEqualsIgnoreCase(names.get(1)));
assertEquals(RESERVED_LOCAL, stream(PUSH_STREAM_ID).state());
assertEquals(123L, (long) settings.get(key));
assertEquals((byte) i, wrapped.readByte());
assertFalse(ChannelOption.exists(name)); assertTrue(ChannelOption.exists(name)); assertNotNull(option);
assertNull(server.stream(100));
assertFalse("Should not be writable anymore", ctx.channel().isWritable());
assertEquals(initialWindowSizeBefore + windowUpdate, localFlow.initialWindowSize());
assertNotNull(frameCodec.connection().local().createStream(maxServerStreamId, false)); assertNotNull(stream); assertThat(writePromise.cause(), instanceOf(Http2NoMoreStreamIdsException.class));
assertEquals(DATE, parseHttpDate("Sunday, 6-Nov-94 08:49:37 GMT"));
assertEquals(0, flushCount.get()); assertEquals(0, flushCount.get()); assertEquals(1, flushCount.get()); assertFalse(channel.finish());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertEquals(expected, message.headers().getAll(HttpHeaderNames.TRANSFER_ENCODING));
assertTrue(channel.writeOutbound( new DefaultAddressedEnvelope<String, InetSocketAddress>("netty", recipient, sender))); assertEquals("netty", packet.content().toString(CharsetUtil.UTF_8)); assertEquals(recipient, packet.recipient()); assertEquals(sender, packet.sender());
assertTrue(writePromise.cancel(false)); assertSame(headers, headers2);
assertEquals(16, mergedPayload.size()); assertFalse(promise1.isDone()); assertFalse(promise2.isDone()); assertEquals(0, mergedPayload.size()); assertEquals("abcdefghabcdefgh", writtenData.get(0)); assertEquals(0, data.refCnt()); assertTrue(promise1.isSuccess()); assertTrue(promise2.isSuccess());
assertSame(TRAILERS, out.get(TE));
assertTrue(logger.isInfoEnabled());
assertThat(AsciiString.contentEqualsIgnoreCase(null, null), is(true)); assertThat(AsciiString.contentEqualsIgnoreCase(null, "foo"), is(false)); assertThat(AsciiString.contentEqualsIgnoreCase("bar", null), is(false)); assertThat(AsciiString.contentEqualsIgnoreCase("FoO", "fOo"), is(true));
assertEquals(msg0, result); assertEquals(msg1, result); assertEquals(msg2, result); assertEquals(msg3, result);
assertEquals(1, SystemPropertyUtil.getInt("key", 1));
assertSame(channel, channel2); assertEquals(1, handler.channelCount()); assertFalse(channel.isActive()); assertEquals(1, handler.acquiredCount()); assertEquals(2, handler.releasedCount());
assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); assertThat(actual, is(expected)); assertFalse(ch.finish());
assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size());
assertThat(toHexString(new byte[] { 0 }), is("0")); assertThat(toHexString(new byte[] { 1 }), is("1")); assertThat(toHexString(new byte[] { 0, 0 }), is("0")); assertThat(toHexString(new byte[] { 1, 0 }), is("100")); assertThat(toHexString(EmptyArrays.EMPTY_BYTES), is(""));
assertNull(pipeline.firstContext());
assertTrue(logger instanceof Slf4JLogger); assertEquals("foo", logger.name());
assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); assertThat(expected, is(actual)); assertFalse(ch.finish());
assertTrue(ByteBufUtil.isText(buffer, pair[0], pair[1], CharsetUtil.US_ASCII));
assertTrue(headers.contains("Name1")); assertTrue(headers.contains(Http2Headers.PseudoHeaderName.PATH.value())); assertFalse(headers.contains(Http2Headers.PseudoHeaderName.STATUS.value())); assertFalse(headers.contains("a missing header"));
assertSame(cat, writeQueue.remove(3, aggregatePromise)); assertFalse(catPromise.isSuccess()); assertTrue(catPromise.isSuccess()); assertEquals(1, cat.refCnt()); assertSame(mouse, writeQueue.remove(5, aggregatePromise)); assertFalse(mouseDone); assertTrue(mouseSuccess); assertEquals(1, mouse.refCnt());
assertSame(selector, ((NioEventLoop) channel.eventLoop()).unwrappedSelector()); assertTrue(selector.isOpen()); assertTrue(newSelector.isOpen()); assertNotSame(selector, newSelector); assertFalse(selector.isOpen());
assertNull(pipeline.last());
assertEquals(State.IDLE, stream2.state()); assertTrue(future.isSuccess()); assertEquals(State.OPEN, stream2.state()); assertTrue(listenerExecuted.get());
assertNull(cookie.domain());
assertEquals(LogLevel.INFO, handler.level());
assertEquals(e.getKey(), toAddressString(InetAddress.getByAddress(unhex(e.getValue()))));
assertEquals(1, out.size()); assertSame("world", out.get("hello"));
assertEquals(new AsciiString("foo"), headers.authority()); assertEquals(new AsciiString("foo.bar"), headers.authority());
assertThat(buffer.forEachByteDesc(CAPACITY / 4, CAPACITY * 2 / 4, new ByteProcessor() { int i = CAPACITY * 3 / 4 - 1; @Override public boolean process(byte value) throws Exception { assertThat(value, is((byte) (i + 1))); lastIndex.set(i); i --; return true; } }), is(-1)); assertThat(value, is((byte) (i + 1))); assertThat(lastIndex.get(), is(CAPACITY / 4));
assertTrue(write(1000)); assertEquals(100, captureWrites(STREAM_A)); assertEquals(450, captureWrites(STREAM_B)); assertEquals(225, captureWrites(STREAM_C)); assertEquals(225, captureWrites(STREAM_D));
assertFalse("Should not be writable anymore", ctx.channel().isWritable());
assertSame(1, attr.getAndSet(null)); assertSame(2, attr2.get()); assertSame(attr, attr2);
assertEquals(3, headers.size()); assertEquals("GET", headers.method().toString()); assertEquals("avalue", headers.get(new AsciiString("akey")).toString());
assertEquals("Value 1 is smaller than 2.", result); assertEquals("Value 1 is smaller than 2", result); assertEquals("12", result); assertEquals("Val1=1, Val2={", result); assertEquals("Value 1 is smaller than {}", result); assertEquals("Value 1 is smaller than {} tail", result); assertEquals("Value 1 is smaller than \\\\{", result); assertEquals("Value 1 is smaller than {tail", result); assertEquals("Value {} is smaller than 1", result);
assertThat(a.name(), is("java.lang.Object#A"));
assertEquals(6, PlatformDependent0.majorVersionFromJavaSpecificationVersion());
assertTrue(channelInactiveCalled.compareAndSet(false, true)); assertTrue(channel.writeInbound(new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"))); assertTrue(channel.writeOutbound(new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK))); assertTrue(channel.writeOutbound(content)); assertEquals(1, content.refCnt()); assertTrue(channelInactiveCalled.get()); assertEquals(0, content.refCnt());
assertTrue(expected instanceof ClosedChannelException); assertTrue(expected instanceof ClosedChannelException);
assertTrue(engineLE.wrap(empty, cTOsLE).bytesProduced() > 0); assertTrue(engineBE.wrap(empty, cTOsBE).bytesProduced() > 0); assertEquals(getEncryptedPacketLength(bufferBE, 0), getEncryptedPacketLength(bufferLE, 0)); assertEquals(getEncryptedPacketLength(new ByteBuffer[] { bufferBE.nioBuffer() }, 0), getEncryptedPacketLength(new ByteBuffer[] { bufferLE.nioBuffer().order(ByteOrder.LITTLE_ENDIAN) }, 0));
assertTrue(channel.writeInbound(new DatagramPacket(content, recipient, sender))); assertEquals("netty", channel.readInbound());
assertEquals(16, copied.capacity());
assertEquals(0, flushCount.get());
assertEquals(readerIndex, in.readerIndex());
assertEquals(SmtpCommand.MAIL, SmtpCommand.valueOf("mail")); assertEquals(SmtpCommand.valueOf("test"), SmtpCommand.valueOf("TEST"));
assertThat(empty.nioBufferCount(), is(1)); assertThat(empty.nioBuffer().position(), is(0)); assertThat(empty.nioBuffer().limit(), is(0)); assertThat(empty.nioBuffer(), is(sameInstance(empty.nioBuffer()))); assertThat(empty.nioBuffer(), is(sameInstance(empty.internalNioBuffer(empty.readerIndex(), 0))));
assertEquals(0, flushCount.get()); assertNull(channel.readOutbound()); assertEquals(1, flushCount.get()); assertEquals(1L, channel.readOutbound()); assertNull(channel.readOutbound()); assertFalse(channel.finish());
assertTrue(channel.writeInbound(in)); assertEquals(1, in.refCnt()); assertTrue(channel.writeOutbound(out)); assertEquals(1, out.refCnt()); assertTrue(channel.releaseInbound()); assertEquals(0, in.refCnt()); assertEquals(1, out.refCnt()); assertTrue(channel.finish()); assertNull(channel.readInbound()); assertSame(out, buffer); assertNull(channel.readOutbound());
assertEquals(Long.MAX_VALUE, decodeULE128(in, 0L));
assertTrue(error); assertEquals(10, i);
assertTrue(promise.isSuccess()); assertEquals(data.toString(UTF_8), writtenData.get(0));
assertFalse(out.contains(TE));
assertTrue(latch.await(1L, SECONDS));
assertTrue(SystemPropertyUtil.getBoolean("key", false)); assertTrue(SystemPropertyUtil.getBoolean("key", false)); assertTrue(SystemPropertyUtil.getBoolean("key", true));
assertTrue(write(999)); assertEquals(333, captureWrites(STREAM_A)); assertEquals(333, captureWrites(STREAM_B)); assertEquals(333, captureWrites(STREAM_D));
assertTrue("Connection should finish, not time out", future.await(200));
assertEquals(3, buffer.capacity()); assertEquals(42, buffer.readMedium()); assertFalse(buffer.isReadable());
assertNotNull(value); assertEquals(connection, value); assertNotNull(value2); assertEquals(connection, value2);
assertThat(a, is(sameInstance(b)));
assertEquals(2, buffer.capacity()); assertEquals(42, buffer.readShort()); assertFalse(buffer.isReadable());
assertThat(e.getCause(), is(instanceOf(UnsupportedMessageTypeException.class))); assertEquals(0, referenceCounted.refCnt()); assertTrue(ch.finishAndReleaseAll());
assertEquals(HttpResponseStatus.REQUEST_HEADER_FIELDS_TOO_LARGE.codeAsText(), headers.status());
assertTrue(channel.writeInbound(in)); assertEquals(1, in.refCnt()); assertTrue(channel.writeOutbound(out)); assertEquals(1, out.refCnt()); assertTrue(channel.releaseOutbound()); assertEquals(1, in.refCnt()); assertEquals(0, out.refCnt()); assertTrue(channel.finish()); assertNull(channel.readOutbound()); assertSame(in, buffer); assertNull(channel.readInbound());
assertNull(pipeline.lastContext());
assertSame(one, map.attr(key)); assertSame("Whoohoo", one.get()); assertNotSame("What", one.get()); assertNull(one.get());
assertEquals(1, flushCount.get()); assertEquals(1, flushCount.get()); assertEquals(1, flushCount.get()); assertNull(channel.readOutbound()); assertEquals(2, flushCount.get()); assertEquals(3, flushCount.get()); assertEquals(1L, channel.readOutbound()); assertEquals(2L, channel.readOutbound()); assertNull(channel.readOutbound()); assertFalse(channel.finish());
assertNotSame(headers1, headers2); assertEquals(headers1, headers2); assertEquals(headers1.hashCode(), headers2.hashCode());
assertEquals("Copy was not decoded correctly", expected, out);
assertFalse(channel.isActive()); assertSame(exception, error.get());
assertTrue(future.isDone()); assertFalse(future.isSuccess());
assertFalse(childChannel.config().isAutoRead()); assertEquals(1000, childChannel.config().getWriteSpinCount()); assertEquals("bar", childChannel.attr(key).get());
assertEquals(4, buffer.capacity()); assertEquals(1, buffer.readShort()); assertEquals(4, buffer.readShort()); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertThat(connectFuture.await(10000), is(true)); assertThat(connectFuture.cause(), sameInstance((Throwable) exception)); assertThat(connectFuture.channel(), is(nullValue()));
assertThat(defaultAddressList().size(), is(greaterThan(0)));
assertEquals(0, copy.readerIndex()); assertEquals(buffer.readableBytes(), copy.writerIndex()); assertEquals(buffer.readableBytes(), copy.capacity()); assertSame(buffer.order(), copy.order()); assertEquals(buffer.getByte(i + readerIndex), copy.getByte(i)); assertTrue(buffer.getByte(readerIndex) != copy.getByte(0)); assertTrue(buffer.getByte(readerIndex + 1) != copy.getByte(1));
assertEquals(16, buffer.capacity()); assertEquals(1, buffer.readDouble(), 0.01); assertEquals(4, buffer.readDouble(), 0.01); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertTrue(host, isValidIpV4Address(host)); assertFalse(host, isValidIpV4Address(host));
assertEquals(8, handler2.outboundBuffer.peek()); assertTrue(handler1.outboundBuffer.isEmpty()); assertEquals(1, handler1.outboundBuffer.size()); assertEquals(8, handler1.outboundBuffer.peek());
assertEquals(DATE, parseHttpDate("Sun Nov 6 08:49:37 1994"));
assertEquals(maskChecksum(0xd6cb8b55), calculateChecksum(input));
assertEquals('a', in.readByte()); assertTrue(channel.writeInbound(buf.copy())); assertEquals(b, buf.skipBytes(1)); assertFalse(channel.finish());
assertTrue(promise.isSuccess());
assertEquals(8, buffer.capacity()); assertEquals(1, buffer.readFloat(), 0.01); assertEquals(4, buffer.readFloat(), 0.01); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertEquals(0, localFlow.unconsumedBytes(stream));
assertTrue(SystemPropertyUtil.getBoolean("key", true)); assertFalse(SystemPropertyUtil.getBoolean("key", false));
assertEquals(1, SystemPropertyUtil.getLong("key", 1));
assertTrue(buf.writerIndex() > 0);
assertEquals("TestDefaultHeaders[name1: value1, name1: value2, name2: value3]", headers.toString()); assertEquals("TestDefaultHeaders[name1: value1, name2: value2, name3: value3]", headers.toString()); assertEquals("TestDefaultHeaders[name1: value1]", headers.toString()); assertEquals("TestDefaultHeaders[]", headers.toString());
assertTrue(headers.isEmpty());
assertSame(SmtpCommand.DATA, SmtpCommand.valueOf("DATA")); assertSame(SmtpCommand.EHLO, SmtpCommand.valueOf("EHLO")); assertNotSame(SmtpCommand.EHLO, SmtpCommand.valueOf("ehlo"));
assertEquals(0, cat.refCnt()); assertEquals(0, mouse.refCnt()); assertSame(cause, catPromise.cause()); assertEquals("", dequeue(Integer.MAX_VALUE, aggregatePromise));
assertEquals(123L, (long) settings.get(key));
assertSame(e, queue.peek());
assertTrue(matcher.find()); assertTrue(Math.abs(diff - maxAge) <= 2);
assertThat(thread, is(not(nullValue()))); assertThat(thread.isAlive(), is(true)); assertThat(thread.isAlive(), is(false)); assertThat(task.ran.get(), is(true)); assertThat(e.thread, not(sameInstance(thread))); assertThat(thread.isAlive(), is(false)); assertThat(task.ran.get(), is(true));
assertEquals(MAX_UNSIGNED_INT, (long) settings.maxHeaderListSize());
assertThat(array.length, is(5)); assertThat(array[0], is(sameInstance(a))); assertThat(array[1], is(sameInstance(b))); assertThat(array[2], is(sameInstance(c))); assertThat(array[3], is(sameInstance(d))); assertThat(array[4], is(sameInstance(e)));
assertEquals(6, PlatformDependent0.majorVersion("1.6")); assertEquals(7, PlatformDependent0.majorVersion("1.7")); assertEquals(8, PlatformDependent0.majorVersion("1.8")); assertEquals(8, PlatformDependent0.majorVersion("8")); assertEquals(9, PlatformDependent0.majorVersion("1.9")); assertEquals(9, PlatformDependent0.majorVersion("9"));
assertEquals(PERMESSAGE_DEFLATE_EXTENSION, data.name()); assertTrue(data.parameters().containsKey(CLIENT_MAX_WINDOW)); assertTrue(data.parameters().containsKey(SERVER_MAX_WINDOW)); assertEquals("10", data.parameters().get(SERVER_MAX_WINDOW)); assertTrue(data.parameters().containsKey(CLIENT_MAX_WINDOW)); assertTrue(data.parameters().containsKey(SERVER_MAX_WINDOW));
assertSame(BIG_ENDIAN, unmodifiableBuffer(buf).order()); assertSame(LITTLE_ENDIAN, unmodifiableBuffer(buf).order());
assertNotNull(pool.bootstrap());
assertTrue(promise.isDone()); assertFalse(promise.isSuccess()); assertThat(promise.cause(), instanceOf(IllegalStateException.class));
assertTrue(headers.contains("Name1", "Value1")); assertTrue(headers.contains(Http2Headers.PseudoHeaderName.PATH.value(), "/foo")); assertFalse(headers.contains(Http2Headers.PseudoHeaderName.STATUS.value(), "200")); assertFalse(headers.contains("a missing header", "a missing value"));
assertTrue(logger.isDebugEnabled());
assertTrue(readOnly.isReadOnly()); assertSame(readOnly, readOnly.asReadOnly());
assertEquals(0, parseEtcResolverFirstNdots(f)); assertEquals(123, parseEtcResolverFirstNdots(f));
assertEquals(Http2Error.INTERNAL_ERROR, e.error());
assertEquals("[[...]]", MessageFormatter.arrayFormat("{}", cyclicA).getMessage()); assertEquals("1[2, [3, [1, [...]]]]", MessageFormatter.arrayFormat("{}{}", a).getMessage());
assertEquals("GET / HTTP/1.1\\r\\n", req);
assertNotNull(writeFailCause); assertThat(writeFailCauseCause, is(not(instanceOf(NullPointerException.class))));
assertEquals(4, encoder.numBufferedStreams()); assertEquals(5, connection.numActiveStreams()); assertEquals(9, failCount); assertEquals(0, encoder.numBufferedStreams());
assertTrue(childChannel.isActive()); assertFalse(childChannel.isOpen()); assertFalse(childChannel.isActive()); assertNull(parentChannel.readOutbound());
assertNull(headers.authority()); assertSame(AsciiString.EMPTY_STRING, headers.authority());
assertEquals(0, flushCount.get()); assertNull(channel.readOutbound()); assertEquals(1, flushCount.get()); assertEquals(1L, channel.readOutbound()); assertNull(channel.readOutbound()); assertFalse(channel.finish());
assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, Math.max(b1.length, b2.length) * 2));
assertTrue(channelId instanceof DefaultChannelId);
assertNotNull(stream); assertNotNull(inboundHeaders); assertTrue(f.isDone()); assertFalse(f.isSuccess()); assertThat(f.cause(), instanceOf(Http2Exception.class));
assertTrue(logger.isWarnEnabled());
assertTrue(latch.await(1L, SECONDS)); assertTrue(flow.isQueueEmpty());
assertEquals(4, buffer.capacity()); assertEquals(1, buffer.readShort()); assertEquals(4, buffer.readShort()); assertFalse(buffer.isReadable()); assertEquals(0, buffer.capacity()); assertEquals(0, buffer.capacity());
assertTrue(inboundHandler.isChannelActive()); assertFalse(inboundHandler.isChannelActive());
assertTrue(next > 0); assertEquals(-1, ch.runScheduledPendingTasks());
assertEquals(8, handler2.inboundBuffer.peek()); assertEquals(8, handler2.outboundBuffer.peek()); assertEquals(0, handler1.outboundBuffer.size()); assertEquals(0, handler3.inboundBuffer.size()); assertEquals(8, handler3.inboundBuffer.peek()); assertEquals(8, handler1.outboundBuffer.peek());
assertEquals(13, buffer.maxCapacity()); assertEquals(3, buffer.capacity());
assertTrue("Assert that thread is interrupted before invocation of getInitialSeedUniquifier()", Thread.currentThread().isInterrupted()); assertTrue("Assert that thread is interrupted after invocation of getInitialSeedUniquifier()", Thread.currentThread().isInterrupted());
assertThat(e, is(instanceOf(ClosedChannelException.class))); assertThat( e.getStackTrace()[0].getClassName(), is(AbstractChannel.class.getName() + "$AbstractUnsafe"));
assertSame(1, attr.getAndRemove()); assertSame(2, attr2.get()); assertNotSame(attr, attr2);
assertEquals(other.size(), headers.size()); assertEquals("foo", headers.authority()); assertEquals("value2", headers.get("name2"));
assertEquals(DATE, parseHttpDate("Sunday, 06-Nov-94 08:49:37 GMT"));
assertEquals(1, SystemPropertyUtil.getInt("key", 1));
assertFalse(promise.isVoid());
assertTrue(channel.writeInbound(in)); assertEquals(1, in.refCnt()); assertTrue(channel.writeOutbound(out)); assertEquals(1, out.refCnt()); assertTrue(channel.finishAndReleaseAll()); assertEquals(0, in.refCnt()); assertEquals(0, out.refCnt()); assertNull(channel.readInbound()); assertNull(channel.readOutbound());
assertEquals("Value is 3.", result); assertEquals("Value is {", result); assertEquals("3 is larger than 2.", result); assertEquals("No subst", result); assertEquals("Incorrect {subst", result); assertEquals("Value is {bla} 3", result); assertEquals("Escaped {} subst", result); assertEquals("{Escaped", result); assertEquals("{}Escaped", result); assertEquals("File name is {App folder.zip}.", result); assertEquals("File name is C:\\\\App folder.zip.", result);
assertEquals(13, buffer.maxCapacity()); assertEquals(3, buffer.capacity()); assertEquals(2, buffer.capacity()); assertEquals(13, buffer.maxCapacity());
assertTrue(logger.isWarnEnabled());
assertFalse(headers.isEmpty()); assertEquals(3, headers.size()); assertEquals(3, names.size()); assertTrue(names.contains(ACCEPT.toString())); assertTrue(names.contains(CONTENT_LENGTH.toString())); assertTrue(names.contains(CONNECTION.toString()));
assertTrue(logger.isErrorEnabled());
assertEquals("Hello, World!", buffer.toString(CharsetUtil.ISO_8859_1));
assertEquals(2, set.size()); assertTrue(set.contains(elemACopy)); assertTrue(set.contains(elemBCopy)); assertTrue(set.remove(buffer)); assertFalse(set.contains(elemA)); assertEquals(1, set.size()); assertTrue(set.remove(buffer)); assertFalse(set.contains(elemB)); assertEquals(0, set.size());
assertTrue(e.getCause() instanceof ClosedChannelException);
assertEquals(DATE, parseHttpDate("Sun, 6 Nov 1994 08:49:37 GMT"));
assertEquals(readerIndex, in.readerIndex());
assertThat(seq.stream(), is(sameInstance(seq.stream())));
assertEquals(uri, authenticationRequest.toUri());
assertEquals(uri, authenticationRequest.toUri());
assertEquals(AuthenticationResponse.Type.EMPTY, response.getType()); assertNull(response.getAccessToken());
assertEquals(uri, authenticationRequest.toUri());
assertEquals(uri, authenticationRequest.toUri());
assertEquals(uri, authenticationRequest.toUri());
assertThat(service).isNotNull();
assertEquals(2, filePaths.length); assertEquals("/home/a/b", filePaths[0]); assertEquals("/home/c/d", filePaths[1]);
assertEquals("asdf", Utils.getSubstring("name=asdf")); assertEquals("asdf=asdf", Utils.getSubstring("name=asdf=asdf")); assertEquals("", Utils.getSubstring("name=")); assertNull("", Utils.getSubstring("name"));
assertEquals(2, filePaths.length); assertEquals("/home/a/b", filePaths[0]); assertEquals("/home/d/b", filePaths[1]);
assertEquals(1, filePaths.length); assertEquals("/home/a/b", filePaths[0]);
assertNotNull(buckets); assertEquals(6, buckets.size());
assertNotNull(bundleVersions); assertEquals(1, bundleVersions.size()); assertEquals("eb1-v1", bundleVersion.getId());
assertNull(extension);
assertNotNull(retrievedUser1); assertEquals(userIdentifier, retrievedUser1.getIdentifier()); assertEquals(userIdentity, retrievedUser1.getIdentity());
assertNotNull(deletedBucket); assertEquals(bucketToDelete.getId(), deletedBucket.getIdentifier());
assertNull(entity);
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals("eb1-v1-dep1", dependency.getId()); assertEquals("eb1-v1", dependency.getExtensionBundleVersionId()); assertEquals("org.apache.nifi", dependency.getGroupId()); assertEquals("nifi-example-service-api-nar", dependency.getArtifactId()); assertEquals("2.0.0", dependency.getVersion());
assertEquals(0, getPolicyCount()); assertNotNull(createdPolicy);
assertNull(existingKey);
assertEquals(EventType.DELETE_BUCKET, event.getEventType()); assertEquals(2, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(entity); assertNotNull(revision); assertEquals(0, revision.getVersion().longValue());
assertNotNull(bundleVersions); assertEquals(0, bundleVersions.size());
assertNotNull(extensions); assertEquals(0, extensions.size());
assertEquals(EventType.CREATE_EXTENSION_BUNDLE, event.getEventType()); assertEquals(3, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(bundle.getIdentifier(), event.getField(EventFieldName.EXTENSION_BUNDLE_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(result); assertEquals(AuthorizationResult.Result.Approved, result.getResult());
assertNotNull(createdEntity); assertNotNull(deletedEntity);
assertFalse(service.isStateValid(TEST_REQUEST_IDENTIFIER, new State(TEST_STATE)));
assertNull(updatedUser1);
assertNotNull(result); assertEquals(AuthorizationResult.Result.Approved, result.getResult());
assertNotNull(extension); assertEquals("e2", extension.getId()); assertEquals("org.apache.nifi.ExampleProcessorRestricted", extension.getName()); assertEquals("{ \\"name\\" : \\"org.apache.nifi.ExampleProcessorRestricted\\", \\"type\\" : \\"PROCESSOR\\" }", extension.getContent());
assertEquals(EventType.CREATE_BUCKET, event.getEventType()); assertEquals(2, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(extensions); assertEquals(2, extensions.size());
assertNotNull(revision); assertEquals(entityId, revision.getEntityId()); assertEquals(0L, revision.getVersion().longValue()); assertNull(revision.getClientId());
assertEquals(3, users.size()); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(existingUserIdentity)).findFirst().orElse(null)); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(userIdentity1)).findFirst().orElse(null)); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(userIdentity2)).findFirst().orElse(null));
assertNotNull(bucket); assertFalse(bucket.isAllowExtensionBundleRedeploy()); assertFalse(bucket.isAllowPublicRead()); assertNotNull(updatedName); assertEquals(updatedName, updatedBucket.getName()); assertEquals(updatedDesc, updatedBucket.getDescription()); assertTrue(updatedBucket.isAllowExtensionBundleRedeploy()); assertTrue(updatedBucket.isAllowPublicRead());
assertEquals(scope.toArray().length, 4);
assertNotNull(headers); assertEquals(1, headers.size()); assertEquals(expectedProxiedEntitiesChain, proxiedEntitiesChainHeaderValue);
assertNotNull(allFlows); assertEquals(2, allFlows.size());
assertEquals(EventType.UPDATE_BUCKET, event.getEventType()); assertEquals(2, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(result); assertEquals(AuthorizationResult.Result.Approved, result.getResult());
assertNull(bucket);
assertNotNull(entity); assertEquals("1", entity.getFlowId()); assertEquals(1, entity.getVersion().intValue());
assertNotNull(createdFlowSnapshot); assertEquals(flowSnapshot.getFlowId(), createdFlowSnapshot.getFlowId()); assertEquals(flowSnapshot.getVersion(), createdFlowSnapshot.getVersion()); assertEquals(flowSnapshot.getComments(), createdFlowSnapshot.getComments()); assertEquals(flowSnapshot.getCreated().getTime(), createdFlowSnapshot.getCreated().getTime()); assertEquals(flowSnapshot.getCreatedBy(), createdFlowSnapshot.getCreatedBy());
assertNull(group1);
assertNotNull(result); assertEquals(AuthorizationResult.Result.Denied, result.getResult());
assertNotNull(bucket); assertEquals(existingBucket.getId(), bucket.getIdentifier()); assertEquals(existingBucket.getName(), bucket.getName()); assertEquals(existingBucket.getDescription(), bucket.getDescription()); assertEquals(existingBucket.getCreated().getTime(), bucket.getCreatedTimestamp());
assertNotNull(flows); assertEquals(1, flows.size()); assertEquals("Flow 1", flows.get(0).getName()); assertEquals("2", flows.get(0).getBucketId());
assertNotNull(bundleVersion); assertEquals("eb1-v1", bundleVersion.getId()); assertTrue(bundleVersion.getSha256Supplied());
assertNotNull(bundleVersions); assertEquals(1, bundleVersions.size()); assertEquals("eb1-v1", bundleVersion.getId());
assertNotNull(flowSnapshots); assertEquals(0, flowSnapshots.size());
assertNull(deletedEntity);
assertEquals(2, flows.size()); assertNotNull(flowEntity); assertEquals(3, flowEntity.getSnapshotCount());
assertNotNull(entity); assertEquals("org.apache.nifi.ExampleProcessor", entity.getName()); assertEquals("eb1-v1", entity.getBundleVersionId());
assertNotNull(items); assertEquals(3, items.size());
assertNotNull(createdEntity); assertEquals(requestEntity.getIdentifier(), createdEntity.getIdentifier()); assertNotNull(createdEntity.getRevision()); assertEquals(1, createdEntity.getRevision().getVersion().longValue()); assertNotNull(updatedEntity.getRevision()); assertEquals(2, updatedEntity.getRevision().getVersion().longValue()); assertEquals("user2", updatedEntity.getRevision().getLastModifier());
assertNotNull(headers); assertEquals(1, headers.size()); assertEquals(expectedHeaderValue, authorizationHeaderValue);
assertNotNull(createdEntity); assertEquals(requestEntity.getIdentifier(), createdEntity.getIdentifier()); assertNotNull(createdRevision); assertEquals(requestRevision.getVersion().longValue() + 1, createdRevision.getVersion().longValue()); assertEquals(clientId, createdRevision.getClientId()); assertEquals(userIdentity, createdRevision.getLastModifier());
assertNotNull(dependencies); assertEquals(0, dependencies.size());
assertNotNull(extensions); assertEquals(0, extensions.size());
assertNull(entity);
assertEquals(0, getPolicyCount()); assertNotNull(policies); assertEquals(18, policies.size()); assertNotNull(p.getUsers()); assertEquals(1, p.getUsers().size()); assertTrue(p.getUsers().contains(ADMIN_USER.getIdentifier()));
assertNotNull(items); assertEquals(3, items.size()); assertNotNull(item1); assertEquals(BucketItemEntityType.FLOW, item1.getType()); assertEquals(3, flowEntity.getSnapshotCount());
assertEquals(EventType.DELETE_FLOW, event.getEventType()); assertEquals(3, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(versionedFlow.getIdentifier(), event.getField(EventFieldName.FLOW_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNull(retrievedUser1);
assertEquals(EventType.DELETE_EXTENSION_BUNDLE_VERSION, event.getEventType()); assertEquals(4, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(bundle.getIdentifier(), event.getField(EventFieldName.EXTENSION_BUNDLE_ID).getValue()); assertEquals(bundleVersion.getVersionMetadata().getVersion(), event.getField(EventFieldName.VERSION).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertEquals(1, users.size()); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(existingUserIdentity)).findFirst().orElse(null));
assertNull(bundleVersion);
assertNotNull(extensionManifest); assertEquals("1.8.0", extensionManifest.getSystemApiVersion()); assertEquals(4, extensionDetails.size());
assertNull(retrievedPolicy);
assertNotNull(bundles); assertEquals(2, bundles.size()); assertNotNull(bundles2); assertEquals(0, bundles2.size());
assertNotNull(flow); assertNotNull(flow); assertEquals(flow.getName(), updatedFlow.getName()); assertEquals(flow.getDescription(), updatedFlow.getDescription()); assertEquals(flow.getModified().getTime(), updatedFlow.getModified().getTime()); assertTrue(updatedFlow.getModified().getTime() > originalModified.getTime());
assertNotNull(versionedFlow); assertEquals(flowEntity.getId(), versionedFlow.getIdentifier()); assertEquals(flowEntity.getName(), versionedFlow.getName()); assertEquals(flowEntity.getDescription(), versionedFlow.getDescription()); assertEquals(flowEntity.getBucketId(), versionedFlow.getBucketIdentifier()); assertEquals(existingBucket.getName(), versionedFlow.getBucketName()); assertEquals(flowEntity.getCreated().getTime(), versionedFlow.getCreatedTimestamp()); assertEquals(flowEntity.getModified().getTime(), versionedFlow.getModifiedTimestamp());
assertNotNull(retrievedUser1); assertEquals(userIdentifier, retrievedUser1.getIdentifier()); assertEquals(userIdentity, retrievedUser1.getIdentity());
assertNotNull(entity); assertNotNull(extension); assertNotNull(docsResult);
assertNotNull(latest); assertEquals("1", latest.getFlowId()); assertEquals(3, latest.getVersion().intValue());
assertNotNull(items); assertEquals(2, items.size()); assertNotNull(item1); assertEquals(BucketItemEntityType.FLOW, item1.getType()); assertEquals(3, flowEntity.getSnapshotCount());
assertNotNull(resultEntities); assertNotNull(e.getRevision()); assertEquals(0, e.getRevision().getVersion().longValue());
assertNotNull(service.getJwt(TEST_REQUEST_IDENTIFIER));
assertNull(updatedGroup1);
assertEquals("Bucket ID bucket-id-A was not found.", e.getMessage());
assertEquals(EventType.CREATE_EXTENSION_BUNDLE_VERSION, event.getEventType()); assertEquals(4, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(bundle.getIdentifier(), event.getField(EventFieldName.EXTENSION_BUNDLE_ID).getValue()); assertEquals(bundleVersion.getVersionMetadata().getVersion(), event.getField(EventFieldName.VERSION).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(bundleVersion); assertEquals("eb1-v1", bundleVersion.getId()); assertEquals("eb1", bundleVersion.getBundleId()); assertEquals("1.0.0", bundleVersion.getVersion()); assertNotNull(bundleVersion.getCreated()); assertEquals("user1", bundleVersion.getCreatedBy()); assertEquals("First version of eb1", bundleVersion.getDescription()); assertTrue(bundleVersion.getSha256Supplied()); assertEquals(1024, bundleVersion.getContentSize());
assertNotNull(buckets); assertEquals(1, buckets.size()); assertEquals("Bucket 1", buckets.get(0).getName());
assertEquals(0, getPolicyCount()); assertNotNull(policies); assertEquals(4, policies.size()); assertNotNull(p.getGroups()); assertEquals(1, p.getGroups().size()); assertTrue(p.getGroups().contains(NIFI_GROUP.getIdentifier()));
assertNotNull(flowSnapshots); assertEquals(3, flowSnapshots.size());
assertEquals(2, users.size()); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(userIdentity1)).findFirst().orElse(null)); assertNotNull(users.stream().filter(u -> u.getIdentity().equals(userIdentity2)).findFirst().orElse(null));
assertNull(latest);
assertNull(entity);
assertNotNull(existingKey); assertEquals("1", existingKey.getId()); assertEquals("unit_test_tenant_identity", existingKey.getIdentity()); assertEquals("0123456789abcdef", existingKey.getKey());
assertNull(flow);
assertNotNull(createdBucket); assertNotNull(createdBucket.getIdentifier()); assertNotNull(createdBucket.getCreatedTimestamp()); assertEquals(bucket.getIdentifier(), createdBucket.getIdentifier()); assertEquals(bucket.getName(), createdBucket.getName()); assertEquals(bucket.getDescription(), createdBucket.getDescription());
assertNotNull(bundleVersions); assertEquals(1, bundleVersions.size()); assertEquals("eb1", bundleVersion.getBundleId());
assertNotNull(tags); assertEquals(4, tags.size()); assertNotNull(t.getTag()); assertTrue(t.getCount() > 0);
assertNotNull(extensionManifest);
assertNull(entity);
assertNotNull(versionedFlow); assertEquals(flowEntity.getId(), versionedFlow.getIdentifier()); assertEquals(flowEntity.getName(), versionedFlow.getName()); assertEquals(flowEntity.getDescription(), versionedFlow.getDescription()); assertEquals(flowEntity.getBucketId(), versionedFlow.getBucketIdentifier()); assertEquals(existingBucket.getName(), versionedFlow.getBucketName()); assertEquals(flowEntity.getCreated().getTime(), versionedFlow.getCreatedTimestamp()); assertEquals(flowEntity.getModified().getTime(), versionedFlow.getModifiedTimestamp());
assertNull(retrievedPolicy);
assertEquals(0, getPolicyCount()); assertNotNull(policies); assertEquals(4, policies.size()); assertNotNull(p.getUsers()); assertEquals(3, p.getUsers().size()); assertFalse(p.getUsers().contains(ADMIN_USER.getIdentifier()));
assertEquals(0, getPolicyCount()); assertNotNull(policies); assertEquals(18, policies.size());
assertNotNull(entity); assertEquals(bucketId, entity.getBucketId()); assertEquals(group, entity.getGroupId()); assertEquals(artifact, entity.getArtifactId());
assertNotNull(flow); assertEquals("1", flow.getId()); assertEquals("1", flow.getBucketId());
assertNotNull(result); assertEquals(AuthorizationResult.Result.Denied, result.getResult());
assertNotNull(headers); assertEquals(1, headers.size()); assertEquals(expectedProxiedEntitiesChain, proxiedEntitiesChainHeaderValue);
assertNotNull(revisionUpdate);
assertEquals(0, users.size()); assertNotNull(createdUser1); assertEquals(1, usersAfterCreate.size()); assertEquals(user1.getIdentifier(), retrievedUser1.getIdentifier()); assertEquals(user1.getIdentity(), retrievedUser1.getIdentity());
assertEquals("Unable to read the data model version for the flow content.", e.getMessage());
assertNotNull(headers); assertEquals(1, headers.size()); assertEquals(expectedHeaderValue, authorizationHeaderValue);
assertNull(entity);
assertEquals(3, versionEntities.size());
assertNotNull(bundleVersions); assertEquals(0, bundleVersions.size());
assertNotNull(bundleDetails); assertNotNull(bundleDetails.getBundleIdentifier()); assertNotNull(bundleDetails.getDependencies()); assertEquals(0, bundleDetails.getDependencies().size()); assertEquals("org.apache.nifi", bundleIdentifier.getGroupId()); assertEquals("nifi-framework-nar", bundleIdentifier.getArtifactId()); assertEquals("1.8.0", bundleIdentifier.getVersion()); assertNotNull(bundleDetails.getExtensions()); assertEquals(0, bundleDetails.getExtensions().size()); assertEquals("1.8.0", bundleDetails.getSystemApiVersion());
assertEquals("", event.getField(EventFieldName.COMMENT).getValue());
assertNotNull(readBuckets); assertEquals(5, readBuckets.getUsers().size()); assertTrue(readBuckets.getUsers().contains(ADMIN_USER.getIdentifier())); assertTrue(readBuckets.getUsers().contains(ADMIN_USER2.getIdentifier())); assertTrue(readBuckets.getUsers().contains(NIFI1_USER.getIdentifier())); assertTrue(readBuckets.getUsers().contains(NIFI2_USER.getIdentifier())); assertTrue(readBuckets.getUsers().contains(NIFI3_USER.getIdentifier()));
assertNotNull(flows); assertEquals(2, flows.size()); assertEquals("Flow 1", flows.get(0).getName()); assertEquals("Flow 1", flows.get(1).getName());
assertEquals(scope.toArray().length, 4); assertTrue(scope.contains("openid")); assertTrue(scope.contains("email")); assertTrue(scope.contains(additionalScope_profile)); assertTrue(scope.contains(additionalScope_abc));
assertNull(bundleVersion);
assertEquals(0, versionEntities.size());
assertEquals(EventType.CREATE_FLOW, event.getEventType()); assertEquals(3, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(versionedFlow.getIdentifier(), event.getField(EventFieldName.FLOW_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertEquals(EventType.UPDATE_FLOW, event.getEventType()); assertEquals(3, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(versionedFlow.getIdentifier(), event.getField(EventFieldName.FLOW_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(result); assertEquals(AuthorizationResult.Result.Denied, result.getResult());
assertNull(retrievedUser1);
assertNotNull(bundles); assertEquals(3, bundles.size()); assertNotNull(bundles2); assertEquals(0, bundles2.size());
assertEquals("Unable to read the data model version for the flow content.", e.getMessage());
assertNull(updatedUser1);
assertNotNull(extension); assertEquals("e3", extension.getId()); assertEquals("org.apache.nifi.ExampleService", extension.getName()); assertEquals("{ \\"name\\" : \\"org.apache.nifi.ExampleService\\", \\"type\\" : \\"CONTROLLER_SERVICE\\" }", extension.getContent());
assertEquals(EventType.DELETE_EXTENSION_BUNDLE, event.getEventType()); assertEquals(3, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(bundle.getIdentifier(), event.getField(EventFieldName.EXTENSION_BUNDLE_ID).getValue()); assertEquals("unknown", event.getField(EventFieldName.USER).getValue());
assertNotNull(entity); assertEquals("e3", entity.getExtensionId()); assertTrue(entity.getAdditionalDetails().isPresent());
assertNotNull(entity); assertNull(deletedEntity);
assertNotNull(flowEntity); assertEquals(3, flowEntity.getSnapshotCount());
assertNull(entity);
assertNotNull(extensions); assertEquals(3, extensions.size());
assertNull(deletedPolicy);
assertNotNull(extensions); assertEquals(0, extensions.size());
assertNotNull(extension); assertEquals("e1", extension.getId()); assertEquals("org.apache.nifi.ExampleProcessor", extension.getName()); assertEquals("{ \\"name\\" : \\"org.apache.nifi.ExampleProcessor\\", \\"type\\" : \\"PROCESSOR\\" }", extension.getContent()); assertFalse(extension.getHasAdditionalDetails());
assertNull(updatedGroup1);
assertEquals(1, extensions.size()); assertEquals("e3", extensions.get(0).getId());
assertNotNull(entity); assertEquals("e1", entity.getExtensionId()); assertFalse(entity.getAdditionalDetails().isPresent());
assertNotNull(buckets); assertEquals(2, buckets.size()); assertEquals("1", buckets.get(0).getId()); assertEquals("2", buckets.get(1).getId());
assertNotNull(extension); assertNull(deletedExtension);
assertEquals(0, extensions.size());
assertEquals("This___is___a_test", sanitizedFilename);
assertNotNull(revisions); assertEquals(2, revisions.size()); assertNotNull(revision1); assertEquals("entity1", revision1.getEntityId()); assertNotNull(revision2); assertEquals("entity2", revision2.getEntityId());
assertNotNull(extensions); assertEquals(1, extensions.size()); assertEquals(ExtensionType.CONTROLLER_SERVICE.toString(), entity.getExtensionType().toString()); assertEquals(BundleType.NIFI_NAR, entity.getBundleType());
assertNotNull(flow); assertEquals(flow.getId(), createdFlow.getId()); assertEquals(flow.getBucketId(), createdFlow.getBucketId()); assertEquals(flow.getName(), createdFlow.getName()); assertEquals(flow.getDescription(), createdFlow.getDescription()); assertEquals(flow.getCreated().getTime(), createdFlow.getCreated().getTime()); assertEquals(flow.getModified(), createdFlow.getModified()); assertEquals(flow.getType(), createdFlow.getType());
assertNotNull(extension); assertEquals("e3", extension.getId()); assertTrue(extension.getHasAdditionalDetails());
assertNotNull(buckets); assertEquals(0, buckets.size());
assertEquals("n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=", hashCredential);
assertThat(loginSession, Matchers.is(loginSessionExtracted));
assertNull(hashCredential);
assertThat(endRequest).isNotNull(); assertThat(interceptor1.requests()).hasSize(1); assertThat(interceptor1.requests()).contains(request); assertThat(interceptor2.requests()).hasSize(1); assertThat(interceptor2.requests()).contains(request);
assertThat( plan.steps() ).hasSize( 3 ); assertThat( plan.steps().get(0)).isInstanceOf(ReadStep.class); assertThat( plan.steps().get(1)).isInstanceOf(ReadStep.class); assertThat( plan.steps().get(2)).isInstanceOf( ReadStep.class );
assertThat(result).isNotNull(); assertThat(result.members()).hasSize(1); assertThat(file.id()).isEqualTo("test-file1.txt");
assertThat( plan.steps() ).hasSize( 4 ); assertThat( plan.steps().get(0)).isInstanceOf(ReadStep.class); assertThat( plan.steps().get(1)).isInstanceOf(ReadStep.class); assertThat( plan.steps().get(2)).isInstanceOf( ReadStep.class ); assertThat( plan.steps().get(3)).isInstanceOf( DeleteStep.class );
assertThat(value).isEqualTo("8080"); assertThat(value).isEqualTo("9090"); assertThat(value).isEqualTo("9100"); assertThat(value).isEqualTo("8090"); assertThat(value).isEqualTo("8090"); assertThat(value).isEqualTo("8090"); assertThat(value).isEqualTo("8080"); assertThat(value).isEqualTo("hello"); assertThat(value).isEqualTo("world");
assertThat(endResponse).isNotNull(); assertThat(interceptor2.responses()).hasSize(1); assertThat(interceptor2.responses()).contains(response); assertThat(interceptor1.responses()).hasSize(1); assertThat(interceptor1.responses()).contains(response);
assertThat( plan.steps() ).isEmpty();
assertThat(value).isEqualTo("bar"); assertThat(value).isEqualTo("baz"); assertThat(value).isEqualTo("ABC");
assertEquals("\\n", new String(format.getDelimiter())); assertEquals("&-&", new String(format.getDelimiter()));
assertEquals(origID.hashCode(), copyID.hashCode()); assertEquals(origID, copyID);
assertTrue(record.getNumFields() == 2); assertTrue(recVal1.getValue().equals(this.origVal1.getValue())); assertTrue(recVal2.getValue() == this.origVal3.getValue()); assertTrue(record.getNumFields() == oldLen - 1); assertTrue(record.getNumFields() == oldLen - 1); assertTrue(record.getNumFields() == oldLen - 1);
assertEquals("\\\\b \\\\t \\\\n \\\\f \\\\r default", controlString);
assertEquals("019f314a", hex);
assertTrue(v instanceof StringValue);
assertEquals(null, result);
assertArrayEquals(expectedArray, hexArray);
assertEquals(new StringValue("test"), testString);
assertEquals(CoGroupOperatorBase.class, result);
assertEquals(CollectorMapOperatorBase.class, result);
assertEquals(id1.hashCode(), id2.hashCode()); assertEquals(id1, id2);
assertEquals(GenericDataSourceBase.class, result);
assertEquals(GroupReduceOperatorBase.class, result);
assertEquals(CrossOperatorBase.class, result);
assertEquals(0, format.splitStart); assertEquals(myString.length() - bufferSize, format.splitLength); assertEquals(bufferSize, format.getBufferSize());
assertEquals(JoinOperatorBase.class, result);
assertEquals("[1.0]", controlString);
assertEquals("\\\\b \\\\t \\\\/ <br> \\\\f \\\\r &lt;default&gt;", controlString);
assertEquals(GenericDataSinkBase.class, result);
assertThat(instantiate(TwoArgs.class, 123, "abc"), CoreMatchers.is(CoreMatchers.equalTo(new TwoArgs(123, "abc"))));
assertThat(invokeMethod(new MethodWithoutParam(), "foo"), CoreMatchers.is("bar"));
assertThat(invokeMethod(new MethodWithTwoParams(), "foo", "abc", 123), CoreMatchers.is("abc123"));
assertThat(instantiate(NotMuchHere.class), CoreMatchers.is(CoreMatchers.equalTo(new NotMuchHere())));
assertEquals(0, config.getMethods().size()); assertEquals(1, methodConfigs.size()); assertEquals(methodConfig, methodConfigs.get(method));
assertEquals("bleh", config.getDescription());
assertThat(handler.getRestPath()).isEqualTo("root");
assertEquals("foo", config.getName());
assertEquals("item", root.path("methods").path("myapi.add").path("path").asText()); assertEquals("item/{id}", root.path("methods").path("myapi.delete").path("path").asText());
assertTrue(root.path("descriptor").path("schemas").path("Outcome").isMissingNode());
assertEquals("bleh", config.getBackendRoot());
assertThat(ImmutableList.copyOf(expression.getAllScopes())).containsExactly("scope0");
assertThat(e.getMessage()).contains("issuer \'issuer\' cannot have null or blank audiences");
assertNull(properties.getProjectId());
assertEquals("2013-05-10", new SimpleDate(2013, 5, 10).toString());
assertThat(getSimpleName(Integer.class)).isEqualTo("Integer");
assertThat(StandardParameters.shouldPrettyPrint(getEndpointsContext(request, true))).isFalse();
assertThat(actual).isEqualTo(DIRECTORY);
assertNull(Strings.stripLeadingSlash(null)); assertEquals("string", Strings.stripLeadingSlash("string")); assertEquals( "stringWithLeadingSlash", Strings.stripLeadingSlash("/stringWithLeadingSlash")); assertEquals("", Strings.stripLeadingSlash(""));
assertThat(StandardParameters.shouldPrettyPrint(getEndpointsContext(request, true))).isTrue();
assertThat(repo.getOrAdd(methodConfig.getReturnType(), config)) .isEqualTo(SchemaRepository.ANY_SCHEMA);
assertEquals(expected, e.getMessage());
assertEquals(AuthLevel.NONE, methodConfig.getAuthLevel()); assertEquals(AuthLevel.REQUIRED, config.getAuthLevel()); assertEquals(AuthLevel.REQUIRED, config.getAuthLevel());
assertTrue(root.path("descriptor").path("schemas").path("Outcome").isMissingNode());
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_NO_CONTENT);
assertTrue(config.getIsAbstract());
assertEquals(getListFoo(ParameterizedList.class).getResolvedMethodSignature(), getListFoo(InnerClassList.class).getResolvedMethodSignature());
assertTrue(EnvUtil.isRunningOnAppEngineProd()); assertFalse(EnvUtil.isRunningOnAppEngineProd()); assertFalse(EnvUtil.isRunningOnAppEngineProd());
assertEquals(USER, authenticator.authenticate(request));
assertEquals(22, config.getUnregisteredQps());
assertFalse(MethodHierarchyReader.isServiceMethod(staticMethod));
assertThat(Types.isEnumType(TypeToken.of(Enum.class))).isTrue(); assertThat(Types.isEnumType(TypeToken.of(String.class))).isFalse();
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals("java", language); assertEquals("outputDir", outputDirPath); assertEquals(null, buildSystem); assertTrue(debugOutput); assertThat(hostname).isEqualTo("foo.com"); assertThat(basePath).isEqualTo("/api");
assertEquals("desc", parameterConfig.getDescription());
assertTrue(expected.getMessage().contains("Invalid custom authenticator")); assertTrue(expected.getMessage().endsWith( "InvalidAuthenticator. It must have a public nullary constructor."));
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_OK); assertThat(resp.getContentAsString()).contains("googleapis.server.init()");
assertEquals(Arrays.asList(audiences), config.getAudiences());
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_OK); assertThat(actual.size()).isEqualTo(1); assertThat(actual.get("x").asInt()).isEqualTo(2);
assertEquals(USER, authenticator.authenticate(request)); assertEquals(APP_ENGINE_USER, attr.get(Attribute.AUTHENTICATED_APPENGINE_USER));
assertEquals(config, loader.loadConfiguration(serviceContext, endpointClass));
assertEquals(3, jsonConfigs.size());
assertThat(ex.getLogLevel()).isEqualTo(Level.INFO); assertThat(ServiceException.withLogLevel(ex, Level.WARNING).getLogLevel()) .isEqualTo(Level.WARNING);
assertThat(provider.getDirectory(ROOT)).isEqualTo(DIRECTORY); assertThat(provider.getDirectory(ROOT)).isEqualTo(DIRECTORY);
assertEquals("123.apps.googleusercontent.com", info.clientId); assertEquals("https: + " https: info.scopes); assertEquals("1234567", info.userId); assertEquals("dummy@gmail.com", info.email);
assertEquals("api.foos.fn1", method1.getName()); assertEquals("api.foos.fn2", method2.getName());
assertEquals("Bean", beanConfig.path("id").asText()); assertEquals("object", beanConfig.path("type").asText()); assertEquals("string", beanConfig.path("properties").path("date").path("type").asText()); assertEquals("date-time", beanConfig.path("properties").path("date").path("format").asText());
assertEquals("https", c.getTransferProtocol());
assertTrue(typeLoader.isParameterType(TypeToken.of(Integer.class))); assertFalse(typeLoader.isParameterType(TypeToken.of(Short.class)));
assertEquals(4, config.getUnregisteredUserQps());
assertEquals(3, peerAuthenticators.size()); assertTrue(peerAuthenticators.get(0) instanceof PassPeerAuthenticator); assertTrue(peerAuthenticators.get(1) instanceof FailPeerAuthenticator); assertTrue(peerAuthenticators.get(2) instanceof PassPeerAuthenticator); assertSame(peerAuthenticators.get(0), peerAuthenticators.get(2));
assertSame(config2, loader.reloadConfiguration(serviceContext, endpointClass, config));
assertEquals(4, config.getUnregisteredDaily());
assertFalse(methodNode.isMissingNode());
assertFalse(noOverrides.isMissingNode()); assertEquals("resource1", objectMapper.convertValue(noOverrides.path("path"), String.class)); assertEquals(AuthLevel.REQUIRED, objectMapper.convertValue(noOverrides.path("authLevel"), AuthLevel.class)); assertFalse(overrides.isMissingNode()); assertEquals("overridden", objectMapper.convertValue(overrides.path("path"), String.class)); assertEquals(AuthLevel.OPTIONAL, objectMapper.convertValue(overrides.path("authLevel"), AuthLevel.class));
assertEquals("foo", config.getRoot());
assertFalse(authenticator.authenticate(request));
assertEquals(Collections.singletonList(TestSerializer1.class), config.getSerializers()); assertEquals(Collections.singletonList(TestSerializer3.class), config.getRepeatedItemSerializers());
assertThat(Types.isCollectionResponseType(TypeToken.of(CollectionResponse.class))).isTrue(); assertThat(Types.isCollectionResponseType(TypeToken.of(MyResponse.class))).isTrue(); assertThat(Types.isCollectionResponseType(TypeToken.of(Collection.class))).isFalse();
assertEquals(USER, authenticator.authenticate(request));
assertFalse(loader.isStaticConfig(config));
assertThat(ImmutableList.copyOf(expression.getAllScopes())) .containsExactly("scope0", "scope1", "scope2");
assertEquals(ApiParameterConfig.Classification.UNKNOWN, parameter.getClassification());
assertThat(IoUtil.readRequestBody(request)).isEqualTo("test");
assertEquals(BackendProperties.PROJECT_NUMBER_UNKNOWN, appEngineProperties.getProjectNumber());
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals("outputDir", outputDirPath); assertEquals(EndpointsToolAction.DEFAULT_WAR_PATH, warPath); assertTrue(outputToDisk);
assertThat(Types.getArrayItemType(STRING)).isNull();
assertThat(e.getMessage()).contains("cannot have multiple resource parameters");
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_NOT_FOUND);
assertThat(Types.isArrayType(TypeToken.of(Double[].class))).isTrue(); assertThat(Types.isArrayType(TypeToken.of(Double.class))).isFalse();
assertEquals(1, config.getApiClassConfig().getMethods().size());
assertTrue(expression.isAuthorized(scopes));
assertEquals(Collections.emptyList(), methodConfig.getAudiences()); assertEquals(Collections.emptyList(), config.getAudiences());
assertEquals("bleh", config.getVersion());
assertEquals("foo", config.getPath());
assertNull(methods.findValue("api2.foos.invisible0")); assertNull(methods.findValue("api2.foos.invisible1"));
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.ID_TOKEN));
assertNotSame(methods, methods2); assertEquals(methods, methods2);
assertTrue(usagePrinted);
assertTrue(action.isHelpDisplayNeeded()); assertEquals(expectedLines, action.getHelpLines());
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals("outputDir", outputFilePath); assertEquals(EndpointsToolAction.DEFAULT_BASE_PATH, basePath); assertTrue(outputToDisk);
assertEquals("t", testOption.getShortName()); assertEquals("test", testOption.getLongName()); assertTrue(!testOption.isFlag()); assertEquals(expectedLines, testOption.getHelpLines());
assertTrue(usagePrinted);
assertTrue(authenticator.authenticate(request));
assertEquals(1, methods.size());
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals(EndpointsToolAction.DEFAULT_LANGUAGE, language); assertEquals(EndpointsToolAction.DEFAULT_OUTPUT_PATH, outputDirPath);
assertFalse(methodNode.isMissingNode());
assertEquals(AuthLevel.NONE, config.getAuthLevel()); assertEquals(AuthLevel.REQUIRED, config.getAuthLevel()); assertEquals(AuthLevel.REQUIRED, config.getAuthLevel()); assertEquals(AuthLevel.REQUIRED, config.getAuthLevel());
assertThat(Types.isObject(TypeToken.of(Object.class))).isTrue(); assertThat(Types.isObject(STRING)).isFalse();
assertEquals(USER, authenticator.authenticate(request));
assertThat(e.getMessage()).contains("cannot specify audiences for unknown issuer \'nope\'");
assertEquals(BackendProperties.PROJECT_NUMBER_UNKNOWN, properties.getProjectNumber());
assertEquals(USER, authenticator.authenticate(request)); assertEquals(APP_ENGINE_USER, attr.get(Attribute.AUTHENTICATED_APPENGINE_USER));
assertEquals(1, config.getFrontendLimitsConfig().getRules().size()); assertEquals("test", rule.getMatch()); assertEquals(-1, rule.getQps()); assertEquals(1, rule.getUserQps());
assertThat(resp.getHeader("Access-Control-Max-Age")).isEqualTo("3600"); assertThat(resp.getHeader("Access-Control-Allow-Credentials")).isEqualTo("true"); assertThat(COMMA_SPLITTER.split(resp.getHeader("Access-Control-Allow-Methods"))) .containsExactly("HEAD", "DELETE", "GET", "PATCH", "POST", "PUT");
assertEquals("domain", config.getNamespaceConfig().getOwnerDomain()); assertEquals("name", config.getNamespaceConfig().getOwnerName()); assertEquals("domain", config.getNamespaceConfig().getOwnerDomain()); assertEquals("name", config.getNamespaceConfig().getOwnerName()); assertEquals("domain", config.getNamespaceConfig().getOwnerDomain()); assertEquals("name", config.getNamespaceConfig().getOwnerName()); assertEquals("package", config.getNamespaceConfig().getPackagePath());
assertTrue(expected.getMessage().contains("Invalid custom peer authenticator")); assertTrue(expected.getMessage().endsWith( "InvalidPeerAuthenticator. It must have a public nullary constructor."));
assertThat(mapper.writeValueAsString(bytes)).isEqualTo("\\"_-8\\""); assertThat(mapper.readValue("\\"_-8\\"", byte[].class)).isEqualTo(bytes);
assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_OK); assertThat(response.getHeader("Access-Control-Allow-Origin")).isNull(); assertThat(response.getHeader("Access-Control-Allow-Headers")).isNull(); assertThat(response.getHeader("Access-Control-Max-Age")).isNull(); assertThat(response.getHeader("Access-Control-Allow-Credentials")).isNull(); assertThat(response.getHeader("Access-Control-Allow-Methods")).isNull();
assertThat(configs1).isEqualTo(configs2); assertThat(configs1).isNotEqualTo(ApiIssuerConfigs.UNSPECIFIED);
assertThat(response.getHeader("Access-Control-Allow-Credentials")).isEqualTo("true");
assertThat(repo.getOrAdd(getMethodConfig("getMyMap").getReturnType(), config)) .isEqualTo(expectedSchema); assertThat(repo.getOrAdd(getMethodConfig("getMySubMap").getReturnType(), config)) .isEqualTo(expectedSchema);
assertThat(Types.isArrayType(TypeToken.of(byte[].class))).isFalse();
assertThat(config).doesNotContain(param);
assertNull(GoogleAuth.parseTokenInfo(request));
assertTrue(typeLoader.isSchemaType(TypeToken.of(Boolean.class))); assertFalse(typeLoader.isSchemaType(TypeToken.of(HashMap.class)));
assertNull(authenticator.authenticate(request)); assertNotNull(attr.get(Attribute.ID_TOKEN));
assertThat(actual).isEqualTo(REST_DOC);
assertFalse(peerAuth.authorizePeer());
assertEquals(new ApiKey("onetoday", "v1", "https: iterator.next()); assertEquals(new ApiKey("onetodayadmin", "v1", "https: iterator.next());
assertThat(actual).isEqualTo(REST_DOC);
assertEquals(PassAuthenticator.USER, auth.authenticate());
assertEquals("bleh", config.getRoot());
assertFalse(peerAuth.authorizePeer());
assertEquals(Arrays.asList(audiences), config.getAudiences()); assertEquals(Arrays.asList(audiences), methodConfig.getAudiences());
assertEquals("bleh", config.getDescription());
assertThat(json.path("items")).hasSize(2); assertThat(json.path("nextPageToken").asText()).isEqualTo("next");
assertEquals("bleh", config.getType());
assertEquals(6, methods.size()); assertNotNull(methodListPartial); assertEquals( methodListPartial.path("request").asText(), methodListFull.path("request").asText()); assertEquals( methodMiscPartial.path("request").asText(), methodMiscFull.path("request").asText());
assertEquals(6, config.getApiClassConfig().getMethods().size());
assertThat(repo.getOrAdd(type, config)) .isEqualTo(Schema.builder() .setName("SelfReferencingObject") .setType("object") .addField("foo", Field.builder() .setName("foo") .setType(FieldType.OBJECT) .setSchemaReference(SchemaReference.create(repo, config, type)) .build()) .build());
assertThat(result.directory()).isEqualTo(readExpectedAsDirectory("directory.json"));
assertThat(ApiIssuerAudienceConfig.UNSPECIFIED.isSpecified()).isFalse(); assertThat(ApiIssuerAudienceConfig.builder().build().isSpecified()).isTrue();
assertThat(provider.getRestDocument(ROOT, NAME, VERSION)).isEqualTo(REST_DOC); assertThat(provider.getRestDocument(ROOT, NAME, VERSION)).isEqualTo(REST_DOC);
assertThat(ApiIssuerAudienceConfig.builder().build().isEmpty()).isTrue(); assertThat(ApiIssuerAudienceConfig.UNSPECIFIED.isEmpty()).isFalse();
assertThat(e.getMessage()).contains("issuer name cannot be blank");
assertEquals(0, config.getMethods().size()); assertEquals(1, config.getMethods().size()); assertEquals(methodConfig1, methodConfig2); assertEquals(2, config.getMethods().size()); assertEquals(methodConfig1, methodConfig2);
assertThat(getSimpleName(String[].class)).isEqualTo("StringCollection");
assertThat(config1).isEqualTo(config2); assertThat(config1).isNotEqualTo(ApiIssuerAudienceConfig.UNSPECIFIED);
assertFalse(expression.isAuthorized(scopes));
assertTrue(peerAuth.authorizePeer());
assertEquals(3, parameterNames.size()); assertEquals("foo1", parameterNames.get(0)); assertEquals("foo2", parameterNames.get(1)); assertEquals("foo3", parameterNames.get(2));
assertEquals("bleh", config.getName());
assertThat(schema).isEqualTo(Schema.builder() .setName("Map_String_TestEnum") .setType("object") .setMapValueSchema(Field.builder() .setName(SchemaRepository.MAP_UNUSED_MSG) .setType(FieldType.ENUM) .setSchemaReference(SchemaReference.create(repo, config, TypeToken.of(TestEnum.class))) .build()) .build());
assertThat(stream).isInstanceOf(GZIPInputStream.class); assertThat(IoUtil.readStream(stream)).isEqualTo("test");
assertEquals(1, peerAuthenticators.size()); assertTrue(peerAuthenticators.get(0) instanceof EndpointsPeerAuthenticator);
assertEquals(toScopeExpression(), config.getScopeExpression()); assertEquals(toScopeExpression(), config.getScopeExpression());
assertEquals("some-value", GoogleAuth.getAuthToken(request)); assertNull(GoogleAuth.getAuthToken(request));
assertEquals(authLevel, config.getAuthLevel()); assertEquals(authLevel, methodConfig.getAuthLevel());
assertEquals("api4", config.getName());
assertEquals(Arrays.asList(PassPeerAuthenticator.testArray), config.getPeerAuthenticators());
assertFalse(expression.isAuthorized(scopes));
assertEquals(method.getName(), methodName);
assertEquals("api.foos.fn", method1.getName()); assertEquals("api.foos.base", method2.getName());
assertNull(authenticator.authenticate(request));
assertTrue(GoogleAuth.isOAuth2Token(prefix + "abc")); assertFalse(GoogleAuth.isOAuth2Token("x" + prefix + "abc"));
assertEquals(getListFoo(RawList.class).getResolvedMethodSignature(), getListFoo(ParameterizedList.class).getResolvedMethodSignature());
assertEquals("myapi", root.path("name").asText()); assertEquals("My API Title", root.path("title").asText());
assertEquals(0, config.getApiClassConfig().getMethods().size());
assertTrue(typeLoader.isInjectedType(TypeToken.of(HttpServletRequest.class))); assertFalse(typeLoader.isInjectedType(TypeToken.of(String.class)));
assertThat(resp.getHeader("Content-Length")).isNull();
assertThat(StandardParameters.shouldPrettyPrint(getEndpointsContext(request, false))).isTrue();
assertEquals(PassAuthenticator.USER, auth.authenticate());
assertEquals(22, config.getUnregisteredUserQps());
assertTrue(authenticator.authenticate(request));
assertEquals(ImmutableList.of("scope_1 scope_2 scope_3"), AuthScopeExpressions.encode( new ConjunctAuthScopeExpression(ImmutableList.<SingleAuthScopeExpression>of( new SingleAuthScopeExpression("scope_1"), new SingleAuthScopeExpression("scope_2"), new SingleAuthScopeExpression("scope_3")))));
assertEquals(false, config.getIsDiscoverable());
assertNull(authenticator.authenticate(request));
assertEquals(1, methods.size());
assertEquals("foo", config.getName());
assertEquals(ApiParameterConfig.Classification.API_PARAMETER, parameter.getClassification());
assertEquals(PROJECT_ID, properties.getProjectId());
assertThat(Types.getTypeParameter(STRING_COLLECTION, 0)).isEqualTo(STRING);
assertThat(Types.isTypeVariable( TypeToken.of( Foo.class.getDeclaredMethod("foo", Object.class).getGenericParameterTypes()[0]))) .isTrue();
assertEquals("bleh", config.getHttpMethod());
assertNull(properties.getApplicationId());
assertNull(authenticator.authenticate(request)); assertNotNull(attr.get(Attribute.ID_TOKEN));
assertEquals(3, authenticators.size()); assertTrue(authenticators.get(0) instanceof PassAuthenticator); assertTrue(authenticators.get(1) instanceof FailAuthenticator); assertTrue(authenticators.get(2) instanceof PassAuthenticator); assertSame(authenticators.get(0), authenticators.get(2));
assertThat(provider.getRpcDocument(ROOT, NAME, VERSION)).isEqualTo(RPC_DOC); assertThat(provider.getRpcDocument(ROOT, NAME, VERSION)).isEqualTo(RPC_DOC);
assertNull(GoogleAuth.parseTokenInfo(request));
assertEquals("foo", config.getHttpMethod());
assertEquals(PROJECT_NUMBER, properties.getProjectNumber());
assertThat(repo.get(type, config)).isNull();
assertThat(Types.getArrayItemType(TypeToken.of(type.getActualTypeArguments()[0]))) .isEqualTo(STRING);
assertEquals(method.getValue().getName(), method.getKey());
assertThat(config).doesNotContain("thisShouldBeIgnored");
assertThat(mapper.writeValueAsString(new TestObject())).contains("TEST");
assertEquals(Arrays.asList(PassAuthenticator.testArray), config.getAuthenticators());
assertEquals(1, config.getApiClassConfig().getMethods().size()); assertNotNull(config.getApiClassConfig().getMethods().get(methodToEndpointMethod( DeepGenericHierarchySuccessEndpoint.class.getMethod( "foo", String.class, Integer.class, Boolean.class))));
assertNull(authenticator.authenticate(request));
assertTrue(root.get("abstract").asBoolean());
assertTrue(usagePrinted);
assertEquals(toScopeExpression(Constant.API_EMAIL_SCOPE), methodConfig.getScopeExpression()); assertEquals(toScopeExpression(scopes), config.getScopeExpression()); assertEquals(toScopeExpression(scopes), config.getScopeExpression());
assertThat(ApiIssuerAudienceConfig.builder().build().asMap()).isEmpty(); assertThat(config.asMap()).containsExactly("issuer", ImmutableSet.of("aud1", "aud2"));
assertTrue(expected.getMessage().contains("Invalid custom authenticator")); assertTrue(expected.getMessage().endsWith( "InvalidAuthenticator. It must have a public nullary constructor."));
assertEquals(Collections.emptyList(), methodConfig.getClientIds()); assertEquals(Collections.emptyList(), config.getClientIds());
assertEquals(1, config.getFrontendLimitsConfig().getRules().size());
assertEquals("class java.lang.Object has no @Api annotation.", expected.getMessage());
assertEquals("schema name0=value0, name1=value1", response.getHeader("WWW-Authenticate"));
assertNull(authenticator.getOAuth2User(request, config));
assertFalse(MethodHierarchyReader.isServiceMethod(bridgeMethod));
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.TOKEN_INFO));
assertEquals(Collections.emptyList(), config.getAudiences()); assertEquals(Collections.emptyList(), config.getAudiences());
assertEquals(true, config.getIsAbstract());
assertEquals( new ConjunctAuthScopeExpression(ImmutableList.<SingleAuthScopeExpression>of( new SingleAuthScopeExpression("scope_1"), new SingleAuthScopeExpression("scope_2"), new SingleAuthScopeExpression("scope_3"))), AuthScopeExpressions.interpret("scope_1 scope_2 scope_3"));
assertTrue(MethodHierarchyReader.isServiceMethod(override));
assertThat(Types.isMapType(TypeToken.of(Map.class))).isTrue(); assertThat(Types.isMapType(TypeToken.of(Collection.class))).isFalse();
assertEquals("myapi", root.path("name").asText()); assertEquals("My API", root.path("canonicalName").asText());
assertFalse(authenticator.authenticate(request));
assertTrue(root.path("descriptor").path("schemas").path("Outcome").isMissingNode());
assertTrue(Strings.isEmptyOrNull(null)); assertTrue(Strings.isEmptyOrNull(ImmutableList.<String>of())); assertFalse(Strings.isEmptyOrNull(ImmutableList.of("abc")));
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.TOKEN_INFO));
assertThat(getSimpleName(type)).isEqualTo("Base2_Integer_Base_String");
assertEquals("foo", config.getVersion());
assertEquals(1, authenticators.size()); assertTrue(authenticators.get(0) instanceof EndpointsAuthenticator);
assertThat(Types.getArrayItemType(TypeToken.of(String[].class))).isEqualTo(STRING); assertThat(Types.getArrayItemType(TypeToken.of(int[].class))).isEqualTo(INT);
assertTrue(action instanceof GetClientLibAction); assertTrue(action instanceof GetDiscoveryDocAction);
assertEquals(BackendProperties.PROJECT_NUMBER_UNKNOWN, properties.getProjectNumber());
assertEquals(12, config.getMaxAge());
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals("java", language); assertEquals("outputDir", outputDirPath); assertEquals(null, buildSystem); assertFalse(debugOutput); assertThat(basePath).isEqualTo("/_ah/api");
assertThat(e.getMessage()).contains("issuer \'issuer\' cannot have a blank issuer value");
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals("java", language); assertEquals("outputDir", outputDirPath); assertEquals("maven", buildSystem); assertFalse(debugOutput);
assertFalse(methodListFoo.path("request").has("parameters")); assertTrue(methodGetFoo.path("request").has("parameters")); assertFalse(0 == methodGetFoo.path("request").path("parameters").size()); assertFalse(methodInsertFoo.path("request").has("parameters"));
assertEquals("DeepGenericHierarchyFailEndpoint.foo", method1.getName()); assertEquals("Endpoint3.foo", method2.getName());
assertEquals("foo", config.getType());
assertEquals("Servlet not bound.", 1, visitor.linkedServlets.size()); assertEquals("URL pattern does not match", URL_PATTERN, servletBinding.getPattern()); assertEquals("Wrong initialization parameter provided", "true", servletBinding.getInitParams().get("restricted")); assertNotNull("SystemService named provider not found.", visitor.systemServiceProvider); assertEquals("Incorrect number of services provided", 1, services.size()); assertEquals("Service not provided correctly.", SERVICES.toArray()[0], services.toArray()[0].getClass());
assertNull(authenticator.getOAuth2User(request, config));
assertThat(configString).contains("Qux_String");
assertFalse(usagePrinted); assertThat(Lists.newArrayList(classPath)) .containsExactly(new File("classPath").toURI().toURL(), new File(new File(EndpointsToolAction.DEFAULT_WAR_PATH).getAbsoluteFile(), "/WEB-INF/classes") .toURI() .toURL()); assertEquals(EndpointsToolAction.DEFAULT_OUTPUT_PATH, outputDirPath);
assertEquals("myapi", root.path("name").asText());
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_OK); assertThat(actual.size()).isEqualTo(1); assertThat(actual.get("x").asInt()).isEqualTo(1);
assertEquals(6, methods.size());
assertTrue(schemas.path("SerializerTestBean").path("properties").path("bar").isMissingNode());
assertEquals(new File(classesDir.getAbsolutePath() + File.separator), new File(urls[0].getFile())); assertEquals(new File(jarFileInLibDir.getAbsolutePath()), new File(urls[1].getFile())); assertEquals(new File(jarFileInClasspath.getAbsolutePath()), new File(urls[2].getFile()));
assertFalse(expression.isAuthorized(ImmutableSet.of("scope0")));
assertThat(Types.isTypeVariable(TypeToken.of(Foo.class.getGenericSuperclass()))).isFalse();
assertTrue(usageMsg.contains("usage: <endpoints-tool> <command> <options> [args]")); assertTrue(usageMsg.contains("get-client-lib")); assertTrue(usageMsg.contains("get-discovery-doc")); assertTrue(usageMsg.contains("help")); assertFalse(usageMsg.contains("gen-api-config")); assertFalse(usageMsg.contains("gen-discovery-doc")); assertFalse(usageMsg.contains("gen-client-lib"));
assertEquals(2, methods.size()); assertNull(methods.findValue("myapi.fn1")); assertNotNull(methods.findValue("myapi.api6.foos.fn1")); assertNotNull(methods.findValue("myapi.api6.foos.fn2"));
assertThat(ApiIssuerConfigs.builder().build().isSpecified()).isTrue(); assertThat(ApiIssuerConfigs.UNSPECIFIED.isSpecified()).isFalse();
assertEquals(5, lines.size()); assertEquals(" This is a sample", lines.get(0)); assertEquals(" option description", lines.get(1)); assertEquals(" to test static", lines.get(2)); assertEquals(" method wrap in", lines.get(3)); assertEquals(" EndpointsToolAction.java", lines.get(4));
assertEquals(USER, authenticator.authenticate(request));
assertTrue(MethodHierarchyReader.isServiceMethod(normal));
assertThat(actual).isEqualTo(RPC_DOC);
assertTrue(loader.isStaticConfig(config));
assertEquals("className.getResultNoParams", methodConfig.getName());
assertTrue(expected.getMessage().contains("Invalid custom peer authenticator")); assertTrue(expected.getMessage().endsWith( "InvalidPeerAuthenticator. It must have a public nullary constructor."));
assertThat(Types.isWildcardType(STRING)).isFalse(); assertThat(Types.isWildcardType( t.resolveType(((ParameterizedType) t.getType()).getActualTypeArguments()[0]))).isTrue(); assertThat(Types.isWildcardType( t.resolveType(((ParameterizedType) t.getType()).getActualTypeArguments()[0]))).isTrue();
assertEquals(APPLICATION_ID, appEngineProperties.getApplicationId());
assertEquals(false, config.getIsDiscoverable());
assertEquals(Arrays.asList(regions), config.getBlockedRegions());
assertNull(authenticator.getOAuth2User(request, config)); assertNull(authenticator.getOAuth2User(request, config)); assertNull(authenticator.getOAuth2User(request, config));
assertFalse(Strings.isWhitelisted(null, ImmutableList.<String>of(""))); assertFalse(Strings.isWhitelisted(" ", ImmutableList.<String>of(" "))); assertFalse(Strings.isWhitelisted("abc", null)); assertFalse(Strings.isWhitelisted("abc", ImmutableList.<String>of())); assertTrue(Strings.isWhitelisted("abc", ImmutableList.<String>of("abc", "def"))); assertFalse(Strings.isWhitelisted("abc", ImmutableList.<String>of("def")));
assertEquals(ImmutableList.of("scope_1"), AuthScopeExpressions.encode(new SingleAuthScopeExpression("scope_1")));
assertTrue(action instanceof GenApiConfigAction); assertTrue(action instanceof GenClientLibAction);
assertEquals("foo", config.getDescription());
assertEquals(new SimpleDate(2013, 5, 10), new SimpleDate(2013, 5, 10)); assertThat(new SimpleDate(2013, 5, 10)).isNotEqualTo(new SimpleDate(2014, 5, 10)); assertThat(new SimpleDate(2013, 5, 10)).isNotEqualTo(new SimpleDate(2013, 6, 10)); assertThat(new SimpleDate(2013, 5, 10)).isNotEqualTo(new SimpleDate(2013, 5, 11));
assertTrue(root.path("descriptor").path("schemas").path("Outcome").isMissingNode());
assertFalse(methodNode.isMissingNode());
assertEquals(4, config.getMaxAge());
assertEquals(2, authenticators.size()); assertTrue(authenticators.get(0) instanceof PassAuthenticator); assertTrue(authenticators.get(1) instanceof FailAuthenticator);
assertThat(expression.toLoggingForm()).isEqualTo("scopeValue");
assertEquals("onetoday-v1.api", iterator.next()); assertEquals("onetodayadmin-v1.api", iterator.next());
assertEquals(Arrays.asList(PassPeerAuthenticator.testArray), config.getPeerAuthenticators());
assertTrue(expression.isAuthorized(scopes));
assertThat(getSimpleName(Long.class)).isEqualTo("Number");
assertNotSame(methods, methods2); assertEquals(methods, methods2);
assertEquals(Arrays.asList(clientIds), config.getClientIds()); assertEquals(Arrays.asList(clientIds), methodConfig.getClientIds());
assertThat(Types.isTypeVariable(TypeToken.of(Integer.class))).isFalse(); assertThat(Types.isTypeVariable(TypeToken.of(String.class))).isFalse(); assertThat(Types.isTypeVariable(TypeToken.of(Object.class))).isFalse(); assertThat(Types.isTypeVariable(TypeToken.of(String[].class))).isFalse(); assertThat(Types.isTypeVariable(TypeToken.of(Collection.class))).isFalse();
assertEquals(config, loader.loadInternalConfiguration(serviceContext, endpointClass));
assertNull(authenticator.authenticate(request)); assertNotNull(attr.get(Attribute.TOKEN_INFO));
assertThat(StandardParameters.shouldPrettyPrint( getEndpointsContext(new MockHttpServletRequest(), false))).isFalse();
assertEquals(true, config.getIsDefaultVersion());
assertFalse(expression.isAuthorized(ImmutableSet.of("scope0")));
assertNotNull(jsonString); assertEquals("myapi", root.path("name").asText()); assertEquals("v1", root.path("version").asText());
assertThat(mapper.writeValueAsString(new TestObject())).contains("test");
assertFalse(usagePrinted); assertEquals("java", language); assertEquals("outputDir", outputDirPath); assertEquals("discoveryDocPath", discoveryDocPath); assertEquals("maven", buildSystem);
assertThat(repo.getOrAdd(getMethodConfig("getNestedMap").getReturnType(), config)) .isEqualTo(expectedSchema);
assertNull(Strings.stripLeadingSlash(null)); assertEquals("string", Strings.stripTrailingSlash("string")); assertEquals( "stringWithTrailingSlash", Strings.stripTrailingSlash("stringWithTrailingSlash/"));
assertThat(actual).isEqualTo(DIRECTORY);
assertTrue(usagePrinted);
assertThat(schema).isEqualTo(Schema.builder() .setName("Map_String_StringCollection") .setType("object") .setMapValueSchema(Field.builder() .setName(SchemaRepository.MAP_UNUSED_MSG) .setType(FieldType.ARRAY) .setArrayItemSchema(Field.builder() .setName(SchemaRepository.ARRAY_UNUSED_MSG) .setType(FieldType.STRING) .build()) .build()) .build());
assertThat(ImmutableList.copyOf(expression.getAllScopes())) .containsExactly("scope0", "scope1", "scope2");
assertEquals("interfaceBasedApi", config.getName()); assertEquals("v2", config.getVersion());
assertEquals("api.foos.fn", method1.getName()); assertEquals("api.foos.base", method2.getName());
assertEquals("foo/{required}", root.path("methods").path("myapi.testEndpoint.getItem").path("path").asText());
assertFalse(methodNode.isMissingNode()); assertEquals(1, methodNode.path("request").path("parameters").size());
assertThat(createStandardParameter(param).getClassification()) .isEqualTo(Classification.INJECTED);
assertEquals(Arrays.asList(audiences), config.getAudiences());
assertThat(repo.getOrAdd(TypeToken.of(TestEnum.class), config)) .isEqualTo(Schema.builder() .setName("TestEnum") .setType("string") .addEnumValue("VALUE1") .addEnumValue("VALUE2") .addEnumDescription("") .addEnumDescription("") .build());
assertThat(expression.toLoggingForm()).isEqualTo("(scope1 && scope2 && scope3)");
assertTrue(usagePrinted);
assertThat(response.getHeader("Access-Control-Allow-Origin")).isEqualTo(ORIGIN);
assertEquals("", response.getContentAsString()); assertEquals(HttpServletResponse.SC_NO_CONTENT, response.getStatus());
assertEquals(true, config.getAllowCookieAuth());
assertNull(authenticator.getOAuth2User(request, config));
assertThat(StandardParameters.shouldPrettyPrint( getEndpointsContext(new MockHttpServletRequest(), true))).isTrue();
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.ID_TOKEN));
assertFalse(methodNode.isMissingNode());
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.ID_TOKEN));
assertFalse(peerAuth.authorizePeer());
assertEquals(2, peerAuthenticators.size()); assertTrue(peerAuthenticators.get(0) instanceof PassPeerAuthenticator); assertTrue(peerAuthenticators.get(1) instanceof FailPeerAuthenticator);
assertTrue(authenticator.authenticate(request));
assertThat(StandardParameters.shouldPrettyPrint(getEndpointsContext(request, false))).isFalse();
assertEquals( "remove/{id}", root.path("methods").path("myapi.endpoint.remove").path("path").asText()); assertEquals( "delete/{id}", root.path("methods").path("myapi.endpoint.delete").path("path").asText());
assertFalse(methodNode.isMissingNode());
assertNull(authenticator.authenticate(request));
assertEquals(1, methods.size());
assertNull(appEngineProperties.getProjectId());
assertEquals(toScopeExpression(scopes), config.getScopeExpression());
assertFalse(usagePrinted); assertEquals("java", language); assertEquals("outputDir", outputDirPath); assertEquals("discoveryDocPath", discoveryDocPath); assertEquals(null, buildSystem);
assertThat(getSimpleName(String.class)).isEqualTo("String");
assertEquals(Collections.emptyList(), config.getClientIds()); assertEquals(Collections.emptyList(), config.getClientIds());
assertEquals(4, config.getUnregisteredQps());
assertEquals(Arrays.asList(PassAuthenticator.testArray), config.getAuthenticators());
assertEquals("test", root.path("methods").path("myapi.test").path("path").asText());
assertFalse(authenticator.authenticate(request));
assertNull(auth.authenticate());
assertEquals(true, config.getIsAbstract());
assertEquals(ImmutableList.class, serializer.transformTo(ImmutableList.of())); assertEquals(typeWithGeneric, serializer.transformTo(ImmutableList.of())); assertEquals(ImmutableList.of(typeWithGeneric), serializer.transformFrom(List.class));
assertEquals("api.foos.fn", method1.getName()); assertEquals("api.foos.base", method2.getName());
assertFalse(authenticator.authenticate(request));
assertEquals(toScopeExpression(scopes), config.getScopeExpression()); assertEquals(toScopeExpression(scopes), methodConfig.getScopeExpression());
assertEquals(APP_ENGINE_USER, authenticator.getOAuth2User(request, config));
assertEquals("bleh", config.getName());
assertEquals("api", config.getName());
assertThat(getSimpleName(Float.class)).isEqualTo("Float");
assertThat(result.discoveryDocs()).isEmpty(); assertThat(result.directory().getItems()).isEmpty();
assertEquals(authLevel, config.getAuthLevel());
assertTrue(peerAuth.authorizePeer());
assertThat(builder.getCommonPrefix()).isEqualTo("discovery/v1/");
assertEquals( new DisjunctAuthScopeExpression(ImmutableList.<AbstractAuthScopeExpression>of( new SingleAuthScopeExpression("scope_1"), new SingleAuthScopeExpression("scope_2"), new SingleAuthScopeExpression("scope_3"))), AuthScopeExpressions.interpret("scope_1", "scope_2", "scope_3"));
assertNull(authenticator.authenticate(request)); assertNull(attr.get(Attribute.TOKEN_INFO));
assertThat(Types.getSimpleName(null, apiConfig.getSerializationConfig())).isNull();
assertEquals("bleh", config.getPath());
assertEquals(USER, authenticator.authenticate(request)); assertEquals(APP_ENGINE_USER, attr.get(Attribute.AUTHENTICATED_APPENGINE_USER));
assertEquals(22, config.getUnregisteredDaily());
assertEquals(true, config.getAllowCookieAuth());
assertFalse(authenticator.authenticate(request));
assertEquals(3, peerAuthenticators.size()); assertTrue(peerAuthenticators.get(0) instanceof PassPeerAuthenticator); assertTrue(peerAuthenticators.get(1) instanceof FailPeerAuthenticator); assertTrue(peerAuthenticators.get(2) instanceof FailPeerAuthenticator); assertNotSame(peerAuthenticators.get(1), peerAuthenticators.get(2));
assertEquals(3, authenticators.size()); assertTrue(authenticators.get(0) instanceof PassAuthenticator); assertTrue(authenticators.get(1) instanceof FailAuthenticator); assertTrue(authenticators.get(2) instanceof FailAuthenticator); assertNotSame(authenticators.get(1), authenticators.get(2));
assertNull(method1.getDescription()); assertNull(method2.getDescription()); assertEquals("description", method3.getDescription());
assertThat(expression.toLoggingForm()).isEqualTo("(scope1 || scope2 || scope3)");
assertNull(authenticator.authenticate(request));
assertEquals(TreeSet.class, serializer.transformTo(ImmutableSet.of()));
assertThat(ApiIssuerConfigs.builder().build().asMap()).isEmpty(); assertThat(configs.asMap()).containsExactly( "issuerName", new IssuerConfig("issuerName", "issuer", "jwks"));
assertEquals(Arrays.asList(clientIds), config.getClientIds());
assertEquals("foo", config.getBackendRoot());
assertTrue(foundInt); assertTrue(foundString);
assertEquals(ImmutableList.of("scope_1", "scope_2", "scope_3"), AuthScopeExpressions.encode( new DisjunctAuthScopeExpression(ImmutableList.<AbstractAuthScopeExpression>of( new SingleAuthScopeExpression("scope_1"), new SingleAuthScopeExpression("scope_2"), new SingleAuthScopeExpression("scope_3")))));
assertFalse(expression.isAuthorized(ImmutableSet.of("scope0")));
assertThat(resp.getStatus()).isEqualTo(HttpServletResponse.SC_FOUND);
assertEquals(token, authenticator.verifyToken(TOKEN)); assertNull(authenticator.verifyToken(TOKEN));
assertEquals(toScopeExpression(), methodConfig.getScopeExpression()); assertEquals(toScopeExpression(), config.getScopeExpression());
assertEquals("resource.getResultNoParams", methodConfig.getName());
assertThat(Types.getArrayItemType(TypeToken.of(type.getActualTypeArguments()[0]))) .isEqualTo(STRING);
assertEquals(true, config.getIsDefaultVersion());
assertFalse(methodNode.isMissingNode());
assertEquals("api4", root.path("name").asText());
assertThat(actual).isEqualTo(RPC_DOC);
assertNull(authenticator.authenticate(request)); assertNotNull(attr.get(Attribute.TOKEN_INFO));
assertEquals(toScopeExpression(scopes), config.getScopeExpression());
assertEquals(Arrays.asList(clientIds), config.getClientIds());
assertNotSame(methods, methods2); assertEquals(methods, methods2);
assertEquals("api.foos.fn", method1.getName()); assertEquals("api.foos.base", method2.getName());
assertEquals(PassAuthenticator.USER, auth.authenticate());
assertTrue(expression.isAuthorized(ImmutableSet.of("scope0", scope)));
assertTrue(usagePrinted);
assertEquals("foo", config.getDescription());
assertThat(results.isEmpty());
assertThat(results.contains(SampleError.TEST_ERROR));
assertThat(ERR_RESULT.isOk()).isFalse(); assertThat(ERR_RESULT.isErr()).isTrue();
assertThat(OK_RESULT.isOk()).isTrue(); assertThat(OK_RESULT.isErr()).isFalse();
assertThat(results.isEmpty());
assertThat(results.contains(SAMPLE_STRING));
assertEquals( "Hello Fred!", helloClient.hello("Fred").blockingGet());
assertThat(cachedClients).hasSize(10);
assertThat(bestClients).hasSize(10);
assertThat(cachedClients).isEmpty();
assertThat(storageMock.getAllExecutions()).isEmpty(); assertThat(user.getPermissions()).containsOnly(QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, managedQuery.getId()));
assertThat(storageMock.getAllExecutions()).isEmpty(); assertThat(user.getPermissions()).containsOnly(QueryPermission.onInstance(Ability.READ, managedQuery1.getId()));
assertThat(parser.decideType().getType()).isInstanceOf(DateRangeTypeDateRange.class);
assertThat(ProgressReporterUtil.buildProgressReportString(false, 0.2d, TimeUnit.MINUTES.toMillis(2),0)).endsWith("est. 00h 08m 00s "); assertThat(ProgressReporterUtil.buildProgressReportString(false, 0.1d, TimeUnit.MINUTES.toMillis(2),0)).endsWith("est. 00h 18m 00s ");
assertThat(dateRange.getCoveredQuarters()).containsExactlyInAnyOrderElementsOf(expected);
assertThat(json) .startsWith("{\\"type\\":\\"MAP_DICTIONARY\\",\\"name\\":\\"dictionary\\",\\"id2Value\\":[") .endsWith("],\\"dataset\\":\\"dataset\\"}");
assertThat((IntPredicate) range::contains) .accepts(5, 4, Integer.MIN_VALUE) .rejects(6, Integer.MAX_VALUE); assertThat((Predicate<Range<Integer>>) range::contains) .accepts(Range.exactly(5), Range.atMost(4)) .rejects(Range.exactly(6), Range.atLeast(5), Range.atLeast(4));
assertThat(storageMock.getAllExecutions()).isEmpty(); assertThat(user.getPermissions()).isEmpty();
assertThat((IntPredicate) range::contains) .accepts(5, 6, Integer.MAX_VALUE) .rejects(4, Integer.MIN_VALUE) ; assertThat((Predicate<Range<Integer>>) range::contains) .rejects(Range.atLeast(4), Range.atMost(4), Range.exactly(4)) .accepts(Range.exactly(5), Range.exactly(6), Range.atLeast(5), Range.atLeast(6));
assertThat(parser.decideType().getType()).isInstanceOf(DateRangeTypeDateRange.class);
assertThat((IntPredicate) range::contains) .accepts(5, Integer.MAX_VALUE, Integer.MIN_VALUE); assertThat((Predicate<Range<Integer>>) range::contains) .accepts(Range.exactly(5), Range.of(5, 10)) .rejects(Range.atMost(5), Range.atLeast(6));
assertThat(dateRange.getCoveredYears()).containsExactlyInAnyOrderElementsOf(expected);
assertThat(dateRange.getCoveredQuarters()).containsExactlyInAnyOrder(CDateRange.of(LocalDate.of(2000, 1, 10), LocalDate.of(2000, 3, 31)));
assertThat(Range.exactly(5).span(Range.exactly(6))) .isEqualTo(Range.of(5, 6)) .isEqualTo(Range.exactly(6).span(Range.exactly(5))); assertThat(Range.of(5, 7).span(Range.exactly(6))) .isEqualTo(Range.of(5, 7));
assertThat(parser.decideType().getType()).isInstanceOf(DateRangeTypeQuarter.class);
assertThat(parser.decideType().getType()).isInstanceOf(DateRangeTypePacked.class);
assertThat(QuarterUtils.firstDayOfQuarterAdjuster().adjustInto(LocalDate.of(2018, 12, 25))) .isEqualTo(LocalDate.of(2018, 10, 1)); assertThat(QuarterUtils.firstDayOfQuarterAdjuster().adjustInto(LocalDateTime.of(2018, 2, 5, 5, 5))) .isEqualTo(LocalDateTime.of(2018, 1, 1, 5, 5));
assertThat(QuarterUtils.firstMonthInQuarterAdjuster().adjustInto(LocalDate.of(2018, 12, 25))) .isEqualTo(LocalDate.of(2018, 10, 25)); assertThat(QuarterUtils.firstMonthInQuarterAdjuster().adjustInto(LocalDateTime.of(2018, 2, 5, 5, 5))) .isEqualTo(LocalDateTime.of(2018, 1, 5, 5, 5));
assertThat(Preprocessor.getTaggedVersion(new File("file"), "tag", ".csv")).hasName("file"); assertThat(Preprocessor.getTaggedVersion(new File("file.csv"), "tag", ".csv")).hasName("file.tag.csv"); assertThat(Preprocessor.getTaggedVersion(new File("file.csv.csv"), "tag", ".csv")).hasName("file.csv.tag.csv");
assertThat((IntPredicate) exactly::contains) .accepts(5) .rejects(6, 7, 4); assertThat((Predicate<Range<Integer>>) exactly::contains) .accepts(Range.exactly(5), exactly) .rejects(Range.exactly(6), Range.exactly(7), Range.exactly(4));
assertThat(QuarterUtils.lastDayOfQuarterAdjuster().adjustInto(LocalDate.of(2018, 12, 25))) .isEqualTo(LocalDate.of(2018, 12, 31)); assertThat(QuarterUtils.lastDayOfQuarterAdjuster().adjustInto(LocalDateTime.of(2018, 2, 5, 5, 5))) .isEqualTo(LocalDateTime.of(2018, 3, 31, 5, 5));
assertEquals("name1" , icInfo.getContextProperty().get(0).getName()); assertEquals("name2" , icInfo.getContextProperty().get(1).getName()); assertEquals("value2", icInfo.getContextProperty().get(1).getValue());
assertNotNull(result);
assertEquals(expResult, result);
assertNotEquals(str, result);
assertNotNull(result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("name1", icInfo.getContextProperty().get(0).getName()); assertEquals("name2", icInfo.getContextProperty().get(1).getName()); assertEquals("value2", icInfo.getContextProperty().get(1).getValue());
assertNotNull(result);
assertThat(rootComponent.isPresent()).isTrue();
assertThat(rootComponent.isPresent()).isTrue();
assertThat(rootComponent.isPresent()).isFalse();
assertThat(rootComponent.isPresent()).isFalse();
assertTrue(r1.compareTo(r2) > 0);
assertTrue(r1.compareTo(r2) == 0);
assertNotNull(output); assertEquals(0, ret_code);
assertEquals(1, args.length); assertEquals("--bar", args[0]);
assertEquals(3, args.length); assertEquals("--foo", args[0]); assertEquals("Some", args[1]); assertEquals("--bar", args[2]);
assertEquals(0, ad_list.size());
assertEquals(1, ad_list.size());
assertEquals(2, args.length); assertEquals("--foo", args[0]); assertEquals("Some Thing", args[1]);
assertEquals(2, args.length); assertEquals("--foo", args[0]); assertEquals("--bar", args[1]);
assertEquals(2, args.length); assertEquals("--foo", args[0]); assertEquals("--bar", args[1]);
assertEquals(1, ad_list.size());
assertNotNull(output); assertEquals(0, ret_code);
assertEquals(0, ad_list.size());
assertEquals(1, ad_list.size());
assertEquals(3, args.length); assertEquals("--foo", args[0]); assertEquals("Some Thing", args[1]); assertEquals("--bar", args[2]);
assertTrue(r1.compareTo(r2) == 0);
assertTrue(p1.compareTo(p2) > 0);
assertTrue(ad_list.isEmpty());
assertEquals(0, ret_code);
assertNotNull(output); assertTrue(ret_code > 0);
assertTrue(p1.compareTo(p2) > 0);
assertTrue(r1.compareTo(r2) > 0);
assertEquals(0, ad_list.size());
assertNotNull(output); assertEquals(0, ret_code); assertFalse(output.trim().isEmpty());
assertEquals(1, ad_list.size()); assertEquals(4, ad.getRange().getStart().getLine());
assertTrue(p1.compareTo(p2) == 0);
assertFalse(r1.isWithin(new Position(0, 8)));
assertEquals(0, ad_list.size());
assertEquals(1, ad_list.size());
assertTrue(p1.compareTo(p2) < 0);
assertNotNull(output); assertFalse(output.trim().isEmpty());
assertEquals(1, ad_list.size());
assertTrue(p1.compareTo(p2) < 0);
assertNotNull(output); assertEquals(0, ret_code); assertTrue(output.trim().isEmpty());
assertTrue(r1.compareTo(r2) < 0);
assertNotNull(output); assertEquals(0, ret_code);
assertNotNull(output); assertTrue(ret_code > 0); assertFalse(output.trim().isEmpty());
assertTrue(r1.compareTo(r2) < 0);
assertTrue(r1.isWithin(new Position(0, 4)));
assertNotNull(output); assertEquals(0, ret_code);
assertNotNull(s); assertTrue(s.length() > 0);
assertNotNull(output); assertTrue(ret_code > 0);
assertTrue(canceled.get());
assertNotNull("Date cannot be null", date);
assertNotNull("Date cannot be null", date);
assertNotNull("Date cannot be null", date);
assertThat(new JavaScript("test","1.1").exec(scope)).isEqualTo(Double.valueOf(1.1d));
assertThat(new JavaScript("test","1.0").exec(scope)).isEqualTo(Integer.valueOf(1));
assertEquals(result.field(DocumentUtil.ORIENTDB_PRIMARY_KEY), "client-assigned-id", "unexpected ID"); assertEquals(result.field("firstname"), "John", "unexpected firstname"); assertEquals(result.getVersion(), 100, "Version not as expected");
assertThat(result).isInstanceOf(Map.class); assertThat(map.get("foo")).isEqualTo("bar");
assertThat(result).isInstanceOf(List.class); assertThat(list.size()).isEqualTo(2); assertThat(list.get(0)).isEqualTo("foo"); assertThat(list.get(1)).isEqualTo("bar");
assertThat(result).includes( entry(DocumentUtil.TAG_ID, "client-assigned-id"), entry(DocumentUtil.TAG_REV, "0")); assertEquals(resultInventory.intValue(), 20);
assertTrue(false, "Invalid Revision must trigger failure");
assertNotNull(pool); assertNotNull(db);
assertThat(new JavaScript("test","false").exec(scope)).isEqualTo(false);
assertEquals(result, "select * from managed/user where firstname = \'John\' and lastname like \'D%\'");
assertNull(DocumentUtil.toDocument(null, null, db, orientDocClass, false, true));
assertThat(new JavaScript("test","typeof doubleValue == \'number\'").exec(scope)).isEqualTo(true); assertThat(new JavaScript("test","doubleValue == 12345.6789").exec(scope)).isEqualTo(true);
assertThat(new JavaScript("test","\'foo\'").exec(scope)).isEqualTo("foo");
assertThat(new JavaScript("test","x = { a: \'b\' }; x.c").exec(scope)).isNull();
assertThat(map.get("baz")).isEqualTo("qux"); assertThat(map.get("boo")).isEqualTo("yah");
assertThat(new JavaScript("test","list").exec(scope)).isEqualTo(list); assertThat(new JavaScript("test","list.length == 4").exec(scope)).isEqualTo(true); assertThat(new JavaScript("test","list[2] == \'foo\'").exec(scope)).isEqualTo(true);
assertThat(scope.get("foo")).isEqualTo(Integer.valueOf(4));
assertThat(result).includes( entry(DocumentUtil.TAG_ID, "client-assigned-id"), entry(DocumentUtil.TAG_REV, "0")); assertEquals(resultInventory.intValue(), 20);
assertThat(result).includes( entry(DocumentUtil.TAG_ID, "client-assigned-id"), entry(DocumentUtil.TAG_REV, "0")); assertEquals(resultInventory.intValue(), 10);
assertThat(new JavaScript("test","map").exec(scope)).isEqualTo(map); assertThat(new JavaScript("test","map.foo == \'bar\'").exec(scope)).isEqualTo(true);
assertThat(new JavaScript("test","zzz = foo").exec(scope)).isEqualTo("bar"); assertThat(scope.containsKey("zzz")).isEqualTo(false);
assertNull(DocumentUtil.toMap(null));
assertThat(new JavaScript("test","null").exec(scope)).isNull();
assertThat(new JavaScript("test","true").exec(scope)).isEqualTo(true);
assertEquals(result, "select * from managed/user where firstname = \'John\' and lastname like \'D%\'");
assertThat(new JavaScript("test","typeof intValue == \'number\'").exec(scope)).isEqualTo(true); assertThat(new JavaScript("test","intValue == 1234").exec(scope)).isEqualTo(true);
assertThat(scope.get("foo")).isEqualTo("bar");
assertTrue(false, "Parsing of invalid revision must fail, but did not.");
assertEquals(result, "select :_fields from :_resource where firstname = :firstname and lastname like :lastname");
assertEquals(ver, 98765);
assertThat(list.size()).isEqualTo(2); assertThat(list.get(0)).isEqualTo("foo"); assertThat(list.get(1)).isEqualTo("bar");
assertSame(entity, resolver.resolveFactType(type.toString()));
assertSame(origin, handler.resolveOrigin(originID.toString()));
assertEquals(SetUtils.set(entity1, entity2), helper.convertFactObjectBindingDefinitions(ListUtils.list(request1, request2)));
assertEquals(0.1f, (Float) criteria.getMinNumber(), 0.0); assertEquals(0.2f, (Float) criteria.getMaxNumber(), 0.0); assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.trust), criteria.getNumberFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getNumberMatchStrategy());
assertEquals(1, container.getCount()); assertEquals(ListUtils.list(record), ListUtils.list(container));
assertEquals(set("object.type.exist"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertFalse(context.hasReadPermission(new FactRecord().setAccessMode(FactRecord.AccessMode.Public)));
assertNotNull(seb); assertEquals(entity.getId(), seb.getId()); assertEquals(entity.getName(), seb.getName());
assertTrue(getValidator().validate(new GetFactAclRequest().setFact(UUID.randomUUID())).isEmpty());
assertEquals(edge1.id(), edge2.id()); assertFalse(edge2 instanceof ReferenceEdge);
assertNull(getObjectManager().saveObjectFactBinding(null));
assertNotNull(converter.toEntity(new FactAclEntryRecord(), null));
assertEquals(VertexProperty.empty(), property);
assertEquals(edge1.id(), edge1.id()); assertEquals(edge2.id(), edge2.id()); assertNotEquals(edge1.id(), edge2.id());
assertEquals(200, response.getStatus()); assertTrue(payload.isArray()); assertEquals(3, payload.size());
assertNotNull(converter.apply(new FactCommentRecord()));
assertEquals(vertex1.id(), vertex2.id());
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_access"), createOrganizationIdentifier(1))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_access", createOrganizationIdentifier(1)));
assertEquals(SetUtils.set("value"), criteria.getFactValue());
assertEquals(vertex1.id(), vertex2.id()); assertFalse(vertex2 instanceof StarGraph.StarVertex);
assertNotNull(converter.apply(new ObjectRecord()));
assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.certainty), criteria.getNumberFieldStrategy()); assertEquals(25, criteria.getLimit()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertEquals(1, violations.size());
assertEquals(id, request.getId());
assertSame(subject, state.getSubject(subject.getInternalID())); assertSame(subject, state.getSubject(subject.getName()));
assertEquals(0, ListUtils.list(getObjectManager().fetchObjectFactBindings(null)).size()); assertEquals(0, ListUtils.list(getObjectManager().fetchObjectFactBindings(UUID.randomUUID())).size());
assertEquals(1, factDocument.getObjects().size());
assertEquals(SetUtils.set(id, idForName), criteria.getOrganizationID());
assertEquals(3, organizations.size());
assertNotNull(handler.resolveSubjects(null)); assertNotNull(handler.resolveSubjects(new ArrayList<>()));
assertEquals("keyword", criteria.getKeywords()); assertEquals(SetUtils.set( FactSearchCriteria.KeywordFieldStrategy.factValueText, FactSearchCriteria.KeywordFieldStrategy.factValueIp, FactSearchCriteria.KeywordFieldStrategy.factValueDomain ), criteria.getKeywordFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getKeywordMatchStrategy());
assertTrue(getValidator().validate(new GetFactCommentsRequest().setFact(UUID.randomUUID())).isEmpty());
assertEquals(25, result.getLimit()); assertEquals(3, result.getCount()); assertEquals(2, ListUtils.list(result.iterator()).size());
assertEquals("keyword", criteria.getKeywords()); assertEquals(SetUtils.set(FactSearchCriteria.KeywordFieldStrategy.all), criteria.getKeywordFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getKeywordMatchStrategy());
assertNotNull(model); assertEquals(id, model.getId()); assertEquals("N/A", model.getName());
assertEquals(123, criteria.getLimit());
assertNull(getFactManager().saveFactType(null));
assertEquals(SetUtils.set(id, idForName), criteria.getFactTypeID());
assertEquals(Property.empty(), property);
assertNotNull(model.getInReferenceTo()); assertEquals(record.getInReferenceToID(), model.getInReferenceTo().getId());
assertNotNull(seb); assertEquals(entity.getId(), seb.getId()); assertNotNull(seb.getType()); assertEquals(entity.getValue(), seb.getValue());
assertEquals(3, subjects.size());
assertSame(binding, getFactManager().saveMetaFactBinding(binding));
assertNull(converter.apply(null));
assertEquals(2, IteratorUtils.count(getActGraph().vertices(vertex1, vertex2)));
assertSame(model, converter.apply(id));
assertEquals(StringFactory.vertexString(vertex), vertex.toString());
assertSame(origin1, origin2);
assertEquals(SetUtils.set(Fact.Flag.Retracted), model.getFlags());
assertNull(getFactManager().saveFactComment(null));
assertEquals(id, request.getFact());
assertNotNull(seb); assertEquals(record.getId(), seb.getId()); assertNotNull(seb.getType()); assertEquals(record.getValue(), seb.getValue());
assertEquals(id, request.getId());
assertNull(resolver.getRequestHeader().getCredentials());
assertEquals(1, result.size()); assertTrue(result.get(0) instanceof Object); assertEquals(destination.getId(), ((Object) result.get(0)).getId());
assertEquals(2, violations.size());
assertNull(converter.fromEntity(null));
assertEquals(2, document.getObjects().size()); assertTrue(document.getObjects().stream().allMatch(o -> ObjectDocument.Direction.BiDirectional == o.getDirection()));
assertFalse(result.iterator().hasNext());
assertNull(dao.storeObject(null));
assertEquals(SetUtils.set(id), criteria.getObjectID());
assertEquals(id, i.<GetFactByIdRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertEquals(fact, i.<GetFactAclRequest>getArgument(1).getFact()); assertEquals(200, response.getStatus()); assertTrue(payload.isArray()); assertEquals(3, payload.size());
assertNull(resolver.apply(id));
assertSame(first, second);
assertEquals(SetUtils.set(entity1, entity2), helper.convertMetaFactBindingDefinitions(ListUtils.list(request1, request2)));
assertTrue(identity instanceof OrganizationIdentifier); assertEquals(id, OrganizationIdentifier.class.cast(identity).getGlobalID());
assertNull(converter.fromEntity(null));
assertEquals(set("invalid.fact.object.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNull(dao.storeFactComment(new FactRecord(), null)); assertNull(dao.storeFactComment(null, new FactCommentRecord()));
assertEquals(acl.size(), handler.resolveSubjects(acl).size());
assertTrue(context.hasReadPermission(new FactEntity().setAccessMode(AccessMode.Public)));
assertNull(resolver.toFactTypeStruct(null));
assertNull(converter.apply(null));
assertNotNull(model); assertEquals(id, model.getId()); assertEquals("N/A", model.getName());
assertEquals(2, result.getCount()); assertEquals(25, result.getLimit()); assertEquals(2, ListUtils.list(result.iterator()).size());
assertTrue(traverseParams.isIncludeRetracted()); assertEquals(after, traverseParams.getAfterTimestamp()); assertEquals(before, traverseParams.getBeforeTimestamp()); assertEquals(10, traverseParams.getLimit());
assertNull(record.getSourceObject()); assertNull(record.getDestinationObject());
assertNull(converter.fromEntity(null));
assertEquals(2, result.size()); assertEquals(set("vp[value->someValue]", "vp[name->test]"), result);
assertNull(deserializer.deserialize("test", null)); assertNull(deserializer.deserialize("test", WRITER.writeValueAsBytes(null)));
assertEquals("object.not.valid", ex.getValidationErrors().iterator().next().getMessageTemplate());
assertEquals(new HashSet<>(), resolver.factTypeNamesToIds(new HashSet<>())); assertEquals(new HashSet<>(), resolver.factTypeNamesToIds(null));
assertEquals(set("subject.not.exist"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(model); assertNotNull(model.getName()); assertEquals(GLOBAL_NAMESPACE, model.getId());
assertEquals(1, model.getStatistics().size()); assertNotNull(model.getStatistics().get(0).getType()); assertEquals(42, model.getStatistics().get(0).getCount()); assertEquals(123456789, (long) model.getStatistics().get(0).getLastAddedTimestamp()); assertEquals(987654321, (long) model.getStatistics().get(0).getLastSeenTimestamp());
assertNull(getFactManager().getFactType((String) null)); assertNull(getFactManager().getFactType("")); assertNull(getFactManager().getFactType("Unknown"));
assertNull(getObjectManager().getObject(entity.getName(), "nonExisting"));
assertEquals(1, delegate.handle(request).getCount());
assertEquals(1, violations.size());
assertNotNull(converter.toEntity(new FactCommentRecord(), null));
assertEquals(3, record.getComments().size());
assertTrue(elementFactory.createEdges(binding).isEmpty());
assertNull(withAcl(null, UUID.randomUUID(), list(UUID.randomUUID())));
assertEquals(1, organizations.size());
assertSame(edge.inVertex(), edge.outVertex());
assertEquals(set("invalid.meta.fact.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertEquals("g.out()", request.getQuery());
assertEquals(SetUtils.set("value"), criteria.getFactValue());
assertTrue(CollectionUtils.isEmpty(withComment(new FactRecord(), null).getComments())); assertTrue(CollectionUtils.isEmpty(withComment(new FactRecord(), "").getComments())); assertTrue(CollectionUtils.isEmpty(withComment(new FactRecord(), " ").getComments()));
assertNull(converter.apply(null));
assertNull(converter.apply(null));
assertEquals(SetUtils.set(id, idForName), criteria.getObjectTypeID());
assertEquals(SetUtils.set(id, idForName), criteria.getOriginID());
assertNotNull(actual); assertEquals(expected.getId(), actual.getId());
assertTrue(vertex.edges(BOTH).hasNext()); assertTrue(vertex.edges(IN).hasNext()); assertFalse(vertex.edges(OUT).hasNext());
assertTrue(getValidator().validate(new TraverseGraphRequest().setQuery("g.out()")).isEmpty());
assertNull(record.getSourceObject()); assertNull(record.getDestinationObject());
assertNotNull(converter.apply(new FactRecord()));
assertEquals(id, organization.getId()); assertEquals("organization", organization.getName());
assertEquals(0.44f, deserializer.deserialize(parser, context), 0.0f);
assertNull(converter.apply(null));
assertTrue(context.hasReadPermission(object));
assertEquals(0, result.getLimit()); assertEquals(10001, result.getCount()); assertEquals(10001, ListUtils.list(result.iterator()).size());
assertTrue(descriptor instanceof SubjectDescriptor); assertEquals(1, ((SubjectDescriptor) descriptor).getIdentifier().getInternalID());
assertEquals( SetUtils.set("validator.not.exist"), SetUtils.set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(delegate.handle(request)); assertEquals(Collections.singleton(object.getId()), criteria.getObjectID()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertNull(elementFactory.getVertex(UUID.randomUUID()));
assertNull(resolver.apply(id));
assertEquals(0.1f, (Float) criteria.getMinNumber(), 0.0); assertEquals(0.2f, (Float) criteria.getMaxNumber(), 0.0); assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.trust), criteria.getNumberFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getNumberMatchStrategy());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "group", createOrganizationIdentifier(1)));
assertNull(getFactManager().saveMetaFactBinding(null));
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group2"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "group2", createOrganizationIdentifier(1)));
assertEquals(SetUtils.set(id, idForName), criteria.getOrganizationID());
assertSame(seed, scope.scope(key, unscopedProvider).get());
assertSame(model, converter.apply(id));
assertEquals(SetUtils.set("value"), criteria.getObjectValue());
assertNull(record.getSourceObject()); assertNull(record.getDestinationObject());
assertEquals(SetUtils.set(id, idForName), criteria.getFactTypeID());
assertSame(userOrigin, resolver.apply(userOrigin.getId()));
assertSame(organization, handler.resolveOrganization("organization", null));
assertEquals(acl.size(), result.getCount()); assertEquals(0, result.getLimit()); assertEquals(acl.size(), ListUtils.list(result.iterator()).size());
assertSame(entity, getFactManager().saveFactComment(entity));
assertFalse(traverseParams.isIncludeRetracted()); assertNull(traverseParams.getAfterTimestamp()); assertNull(traverseParams.getBeforeTimestamp());
assertEquals(fact, i.<CreateFactCommentRequest>getArgument(1).getFact()); assertEquals(201, response.getStatus()); assertEquals(comment.toString(), getPayload(response).get("id").textValue());
assertEquals(edge1.id(), edge2.id());
assertEquals(id, request.getId());
assertSame(fact, resolver.resolveFact(fact.getId()));
assertEquals(edge1.id(), edge2.id());
assertNotNull(serializer.write(null));
assertTrue(ObjectVertex.matchesDirection(aToBFact, objectA, OUT)); assertFalse(ObjectVertex.matchesDirection(aToBFact, objectA, IN)); assertTrue(ObjectVertex.matchesDirection(aToBFact, objectA, BOTH)); assertFalse(ObjectVertex.matchesDirection(bToAFact, objectA, OUT)); assertTrue(ObjectVertex.matchesDirection(bToAFact, objectA, IN)); assertTrue(ObjectVertex.matchesDirection(bToAFact, objectA, BOTH));
assertEquals(2, organizations.size());
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000000"), organization.getId()); assertEquals("N/A", organization.getName());
assertTrue(getActGraph().toString().matches(".*\\\\[.*\\\\]"));
assertEquals(set("acl[0]", "acl[2]"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getProperty));
assertEquals(comments.size(), result.getCount()); assertEquals(0, result.getLimit()); assertEquals(comments.size(), ListUtils.list(result.iterator()).size());
assertEquals(0, ListUtils.list(getFactManager().getFacts(null)).size()); assertEquals(0, ListUtils.list(getFactManager().getFacts(ListUtils.list())).size()); assertEquals(0, ListUtils.list(getFactManager().getFacts(ListUtils.list(UUID.randomUUID()))).size());
assertNull(record.getSourceObject()); assertNotNull(record.getDestinationObject()); assertFalse(record.isBidirectionalBinding());
assertSame(record, dao.getFact(id));
assertEquals(0, ListUtils.list(getObjectManager().getObjects(null)).size()); assertEquals(0, ListUtils.list(getObjectManager().getObjects(ListUtils.list())).size()); assertEquals(0, ListUtils.list(getObjectManager().getObjects(ListUtils.list(UUID.randomUUID()))).size());
assertEquals(25, result.getLimit()); assertEquals(100, result.getCount()); assertEquals(25, ListUtils.list(result.iterator()).size());
assertNull(converter.apply(null));
assertEquals(0, getFactManager().fetchMetaFactBindings(null).size()); assertEquals(0, getFactManager().fetchMetaFactBindings(UUID.randomUUID()).size());
assertEquals(0, getFactManager().fetchFactComments(null).size()); assertEquals(0, getFactManager().fetchFactComments(UUID.randomUUID()).size());
assertFalse(handler.isRetracted(fact));
assertNull(resolver.apply(id));
assertNull(converter.toEntity(null));
assertTrue(vertex.vertices(BOTH, "type").hasNext()); assertFalse(vertex.vertices(BOTH, "something").hasNext());
assertEquals(1, props.size()); assertEquals("value", props.get(0).getName()); assertEquals("someValue", props.get(0).getValue()); assertEquals(set(objectRecord.getId()), c.getObjectID());
assertEquals(edge1.id(), edge2.id());
assertNull(converter.apply(null));
assertTrue(getValidator().validate(new DeleteOriginRequest().setId(UUID.randomUUID())).isEmpty());
assertNull(model.getRelevantObjectBindings()); assertNotNull(model.getRelevantFactBindings());
assertNotNull(converter.apply(new ObjectRecord()));
assertFalse(result.iterator().hasNext());
assertTrue(vertex.edges(BOTH).hasNext()); assertFalse(vertex.edges(IN).hasNext()); assertTrue(vertex.edges(OUT).hasNext());
assertNull(resolver.toObjectTypeStruct(null)); assertNull(resolver.toObjectTypeStruct(UUID.randomUUID()));
assertEquals(SetUtils.set("value"), criteria.getFactValue());
assertNull(converter.apply(null));
assertNull(model.getInReferenceTo());
assertSame(entity, getOriginManager().saveOrigin(entity));
assertNotNull(entity.getId()); assertNotNull(entity.getNamespaceID()); assertEquals(request.getName(), entity.getName()); assertEquals(request.getValidator(), entity.getValidator()); assertEquals(request.getValidatorParameter(), entity.getValidatorParameter());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(1)));
assertNotNull(model.getSourceObject()); assertEquals(source.getId(), model.getSourceObject().getId()); assertNull(model.getDestinationObject());
assertEquals(2, IteratorUtils.count(getActGraph().edges(edge1.id(), edge2.id())));
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(2))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(2)));
assertEquals(123, criteria.getLimit());
assertTrue(validator.validate("test")); assertTrue(validator.validate("")); assertTrue(validator.validate(null));
assertEquals(0, result.size());
assertEquals(1, fact.getAcl().size()); assertEquals(currentUser, fact.getAcl().get(0).getSubjectID());
assertNull(resolver.apply(id));
assertEquals(set("invalid.fact.object.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertEquals(SetUtils.set(id, idForName), criteria.getFactTypeID());
assertNull(converter.apply(null));
assertSame(type1, type2);
assertEquals(123456789L, (long) criteria.getStartTimestamp()); assertEquals(987654321L, (long) criteria.getEndTimestamp()); assertEquals(SetUtils.set(FactSearchCriteria.TimeFieldStrategy.timestamp), criteria.getTimeFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getTimeMatchStrategy());
assertNotNull(entity); assertEquals(factID, entity.getFactID()); assertEquals(record.getId(), entity.getId()); assertEquals(record.getReplyToID(), entity.getReplyToID()); assertEquals(record.getOriginID(), entity.getOriginID()); assertEquals(record.getComment(), entity.getComment()); assertEquals(record.getTimestamp(), entity.getTimestamp());
assertTrue(validator.validate("1-1"));
assertEquals(edge1.id(), edge2.id());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function"));
assertNull(dao.retractFact(null));
assertNull(getOriginManager().getOrigin((UUID) null)); assertNull(getOriginManager().getOrigin(UUID.randomUUID()));
assertEquals(0.56f, deserializer.deserialize(parser, context), 0.0f);
assertNull(converter.apply(null));
assertEquals(0, props.size()); assertEquals(set(fact.getId()), arg.getInReferenceTo());
assertTrue(getValidator().validate(new GetObjectTypeByIdRequest().setId(UUID.randomUUID())).isEmpty());
assertSame(entity, getObjectManager().saveObject(entity));
assertEquals(2, props.size()); assertEquals(set("factType1->factValue1", "factType2->factValue2"), asKeyValueStrings(props));
assertEquals(uuid, resolver.factTypeNameToId("test"));
assertNotNull(seb); assertEquals(entity.getId(), seb.getId()); assertEquals(entity.getName(), seb.getName());
assertEquals(id, i.<UpdateFactTypeRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertNull(accessController.resolveSubject("something"));
assertNull(getOriginManager().getOrigin((String) null)); assertNull(getOriginManager().getOrigin("")); assertNull(getOriginManager().getOrigin("Unknown"));
assertEquals(id, subject.getId()); assertEquals("subject", subject.getName()); assertNotNull(subject.getOrganization()); assertEquals(id, subject.getOrganization().getId()); assertEquals("organization", subject.getOrganization().getName());
assertNotNull(model.getRelevantObjectBindings().get(0).getSourceObjectType()); assertNull(model.getRelevantObjectBindings().get(0).getDestinationObjectType());
assertEquals(binding.getObjectID(), b.getObjectID()); assertEquals(binding.getDirection(), b.getDirection()); assertEquals(entity.getId(), b.getFactID());
assertFalse(handler.isRetracted(fact));
assertNotNull(converter.apply(FactSEB.builder().build()));
assertNull(converter.toCriteria(null));
assertEquals(Property.empty(), property);
assertSame(model, converter.apply(id));
assertEquals(id, subject.getId()); assertEquals("subject", subject.getName()); assertNotNull(subject.getOrganization()); assertEquals(id, subject.getOrganization().getId()); assertEquals("organization", subject.getOrganization().getName());
assertEquals(2, IteratorUtils.count(getActGraph().vertices(vertex1.id(), vertex2.id())));
assertNull(elementFactory.getEdge(null));
assertNotNull(service.createSecurityContext(credentials));
assertTrue(getValidator().validate(new SearchMetaFactsRequest().setFact(UUID.randomUUID())).isEmpty());
assertEquals(1, organizations.size());
assertEquals(SetUtils.set(subjectID), converter.toDocument(record).getAcl());
assertTrue(context.hasReadPermission(org));
assertNotNull(converter.apply(new FactRecord()));
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), organization.getId()); assertEquals("organization", organization.getName());
assertNull(converter.apply(null));
assertEquals("object.type.not.exist", ex.getValidationErrors().iterator().next().getMessageTemplate());
assertEquals(0, helper.getOneLeggedFactsAsProperties(new ObjectRecord(), TraverseParams.builder().build()).size());
assertSame(type1, type2);
assertEquals(vertex1.id(), vertex2.id()); assertFalse(vertex2 instanceof DetachedVertex);
assertNotNull(record.getSourceObject()); assertNull(record.getDestinationObject()); assertFalse(record.isBidirectionalBinding());
assertNotNull(seb); assertEquals(entity.getId(), seb.getId()); assertEquals(entity.getName(), seb.getName());
assertFalse(vertex.properties("something").hasNext());
assertEquals(vertex1.id(), vertex2.id());
assertEquals(SetUtils.set(id), criteria.getFactID());
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), IdMapper.toGlobalID(1));
assertTrue(vertex.vertices(BOTH).hasNext()); assertFalse(vertex.vertices(IN).hasNext()); assertTrue(vertex.vertices(OUT).hasNext());
assertNull(accessController.resolveOrganization("something"));
assertEquals(2, subjects.size());
assertTrue(traverseParams.isIncludeRetracted()); assertEquals(after, traverseParams.getAfterTimestamp()); assertEquals(before, traverseParams.getBeforeTimestamp()); assertEquals(10, traverseParams.getLimit());
assertEquals(0, helper.getOneLeggedFactsAsProperties(objectRecord, TraverseParams.builder().build()).size());
assertNotNull(converter.fromEntity(new FactCommentEntity()));
assertNull(getFactManager().getFact(null)); assertNull(getFactManager().getFact(UUID.randomUUID()));
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "group"));
assertFalse(edge.properties().hasNext());
assertSame(record, dao.getObject(id));
assertEquals(0, result.getCount()); assertEquals(0, ListUtils.list(result.iterator()).size());
assertNull(dao.storeFactAclEntry(new FactRecord(), null)); assertNull(dao.storeFactAclEntry(null, new FactAclEntryRecord()));
assertEquals(2, result.getCount()); assertEquals(0, result.getLimit()); assertEquals(2, ListUtils.list(result.iterator()).size());
assertSame(entity, getFactManager().saveFactAclEntry(entity));
assertSame(origin, handler.resolveOrigin(null));
assertNotNull(converter.fromEntity(new ObjectEntity()));
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group2"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "group2"));
assertEquals(SetUtils.set(id), criteria.getObjectID());
assertEquals(vertex1.id(), vertex1.id()); assertEquals(vertex2.id(), vertex2.id()); assertNotEquals(vertex1.id(), vertex2.id());
assertNull(resolver.apply(id));
assertEquals(id, i.<UpdateObjectTypeRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertNull(helper.convertFactObjectBindingDefinitions(null)); assertNull(helper.convertFactObjectBindingDefinitions(ListUtils.list()));
assertEquals(id, resolver.resolveSubjectUUID(identity));
assertSame(object, resolver.resolveObject(String.format("%s/%s", type, value)));
assertEquals(123, criteria.getLimit());
assertEquals(SetUtils.set(id), criteria.getFactID());
assertSame(entity, e); assertEquals(request.getName(), e.getName());
assertEquals(set("meta/metaFactType->metaFactValue"), asKeyValueStrings(props));
assertEquals(1, subjects.size());
assertSame(organization, handler.resolveOrganization(null, origin));
assertNotNull(converter.fromEntity(new FactEntity()));
assertNull(converter.apply(null));
assertSame(binding, getObjectManager().saveObjectFactBinding(binding));
assertEquals(id, resolver.resolveOrganizationUUID(identity));
assertSame(groupOrigin, resolver.apply(groupOrigin.getId()));
assertSame(container, dao.calculateObjectStatistics(criteria));
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), organization.getId()); assertEquals("organization", organization.getName());
assertTrue(ObjectVertex.matchesDirection(bidirectionalFact, objectA, OUT)); assertTrue(ObjectVertex.matchesDirection(bidirectionalFact, objectA, IN)); assertTrue(ObjectVertex.matchesDirection(bidirectionalFact, objectA, BOTH));
assertSame(entity, getObjectManager().saveObjectType(entity));
assertEquals(1, ListUtils.list(result.iterator()).size());
assertNotNull(converter.apply(new FactAclEntryRecord()));
assertEquals(3, record.getAcl().size());
assertEquals(edge1.id(), edge1.id()); assertEquals(edge2.id(), edge2.id()); assertNotEquals(edge1.id(), edge2.id());
assertEquals(SetUtils.set("value"), criteria.getObjectValue());
assertEquals(10000, result.getLimit()); assertEquals(1, result.getCount()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertEquals(0.1f, (Float) criteria.getMinNumber(), 0.0); assertEquals(0.2f, (Float) criteria.getMaxNumber(), 0.0); assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.trust), criteria.getNumberFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getNumberMatchStrategy());
assertEquals(25, result.getLimit()); assertEquals(0, result.getCount()); assertEquals(0, ListUtils.list(result.iterator()).size());
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), subject.getId()); assertEquals("subject", subject.getName()); assertNotNull(subject.getOrganization()); assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), subject.getOrganization().getId()); assertEquals("organization", subject.getOrganization().getName());
assertEquals(set("invalid.meta.fact.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(model); assertEquals(id, model.getId()); assertEquals("N/A", model.getName());
assertEquals(SetUtils.set(id, idForName), criteria.getOriginID());
assertFalse(vertex.properties("something").hasNext());
assertEquals(edge1.id(), edge2.id()); assertFalse(edge2 instanceof DetachedEdge);
assertNull(model.getSourceObject()); assertNotNull(model.getDestinationObject()); assertEquals(destination.getId(), model.getDestinationObject().getId());
assertEquals(objectVertex, result.next());
assertEquals(set(objectId), criteria.getObjectID()); assertEquals(FactSearchCriteria.FactBinding.oneLegged, criteria.getFactBinding()); assertEquals(start, criteria.getStartTimestamp()); assertEquals(end, criteria.getEndTimestamp());
assertEquals(1480520820000L, (long) deserializer.deserialize(parser, context));
assertSame(record, dao.storeFact(record));
assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.certainty), criteria.getNumberFieldStrategy()); assertEquals(25, criteria.getLimit()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertEquals(0, container.getCount()); assertFalse(container.hasNext());
assertTrue(getActGraph().toString().matches(".*\\\\[.*\\\\]"));
assertEquals(1, container.getCount()); assertEquals(ListUtils.list(record), ListUtils.list(container));
assertEquals(edge1.id(), edge2.id()); assertFalse(edge2 instanceof ReferenceEdge);
assertEquals(123456789L, (long) criteria.getStartTimestamp()); assertEquals(987654321L, (long) criteria.getEndTimestamp()); assertEquals(SetUtils.set(FactSearchCriteria.TimeFieldStrategy.timestamp), criteria.getTimeFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getTimeMatchStrategy());
assertNull(converter.apply(null));
assertSame(entity, resolver.fetchExistingObjectType(id));
assertEquals(1, fact.getAcl().size());
assertNull(resolver.apply(null));
assertEquals(objectID, result.next().id());
assertNotNull(seb); assertEquals(record.getId(), seb.getId()); assertNotNull(seb.getSubject()); assertNotNull(seb.getOrigin()); assertEquals(record.getTimestamp(), seb.getTimestamp());
assertEquals(SetUtils.set(id, idForName), criteria.getFactTypeID());
assertFalse(iterator.hasNext());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function"));
assertNotNull(model); assertEquals(id, model.getId()); assertEquals("N/A", model.getName());
assertEquals(25, result.getLimit()); assertEquals(0, result.getCount()); assertEquals(0, ListUtils.list(result.iterator()).size());
assertEquals(1, entity.getBindings().size()); assertEquals(record.getSourceObject().getId(), entity.getBindings().get(0).getObjectID()); assertEquals(Direction.FactIsDestination, entity.getBindings().get(0).getDirection());
assertNotNull(actual); assertEquals(expected.getId(), actual.getId());
assertEquals(2, IteratorUtils.count(getActGraph().vertices(vertex1.id(), vertex2.id())));
assertTrue(edge.properties("value").hasNext());
assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.certainty), criteria.getNumberFieldStrategy()); assertEquals(25, criteria.getLimit()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertNull(getObjectManager().getObjectType((String) null)); assertNull(getObjectManager().getObjectType("")); assertNull(getObjectManager().getObjectType("Unknown"));
assertTrue(getValidator().validate(new RetractFactRequest().setFact(UUID.randomUUID())).isEmpty());
assertSame(origin1, origin2);
assertNotNull(delegate.handle(new GetObjectByIdRequest().setId(object.getId()))); assertEquals(Collections.singleton(object.getId()), criteria.getObjectID()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertEquals(2, IteratorUtils.count(getActGraph().edges(edge1, edge2)));
assertFalse(handler.isRetracted(null));
assertEquals(3, result.getCount()); assertEquals(3, ListUtils.list(result.iterator()).size());
assertEquals(edge1.id(), edge2.id()); assertFalse(edge2 instanceof DetachedEdge);
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_grant"), createOrganizationIdentifier(1))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_grant", createOrganizationIdentifier(1)));
assertNull(READER.<FactSEB>readValue(serializer.serialize("test", null)));
assertEquals(set(inReferenceToID), criteria.getInReferenceTo()); assertEquals(FactSearchCriteria.FactBinding.meta, criteria.getFactBinding()); assertEquals(start, criteria.getStartTimestamp()); assertEquals(end, criteria.getEndTimestamp());
assertEquals(1, IdMapper.toInternalID(UUID.fromString("00000000-0000-0000-0000-000000000001")));
assertFalse(new ServiceNotNullValidator().isValid(null, null));
assertNull(getOriginManager().saveOrigin(null));
assertEquals(0, container.getCount()); assertFalse(container.hasNext());
assertEquals(0, props.size());
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(2))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(2)));
assertEquals(fact.getLastSeenTimestamp(), manager.getFact(fact.getId()).getLastSeenTimestamp()); assertEquals(fact.getId(), refreshedFact.getId()); assertEquals(timestamp, refreshedFact.getLastSeenTimestamp()); assertEquals(timestamp, manager.getFact(fact.getId()).getLastSeenTimestamp());
assertNull(elementFactory.getVertex(UUID.randomUUID()));
assertEquals(123456789L, (long) criteria.getStartTimestamp()); assertEquals(987654321L, (long) criteria.getEndTimestamp()); assertEquals(SetUtils.set(FactSearchCriteria.TimeFieldStrategy.timestamp), criteria.getTimeFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getTimeMatchStrategy());
assertEquals(SetUtils.set(), model.getFlags());
assertNull(elementFactory.getVertex(null));
assertEquals(SetUtils.set(id, idForName), criteria.getObjectTypeID());
assertSame(record, dao.storeObject(record));
assertNull(converter.apply(null));
assertEquals(1, actual.size());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function"));
assertNull(converter.toDocument(null));
assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, OUT)); assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, IN)); assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, BOTH));
assertEquals(Collections.emptySet(), getFactManager().getFact(fact.getId()).getFlags()); assertEquals(fact.getId(), retractedFact.getId()); assertEquals(Collections.singleton(FactEntity.Flag.RetractedHint), retractedFact.getFlags()); assertEquals(Collections.singleton(FactEntity.Flag.RetractedHint), getFactManager().getFact(fact.getId()).getFlags());
assertSame(model, converter.apply(id));
assertNull(converter.apply(null));
assertSame(entity, getFactManager().saveFact(entity));
assertEquals(1, violations.size());
assertNull(resolver.apply(id));
assertEquals(2, helper.getOneLeggedFactsAsProperties(objectRecord, TraverseParams.builder().setIncludeRetracted(true).build()).size()); assertEquals(1, helper.getOneLeggedFactsAsProperties(objectRecord, TraverseParams.builder().setIncludeRetracted(false).build()).size());
assertEquals("keyword", criteria.getKeywords()); assertEquals(SetUtils.set(FactSearchCriteria.KeywordFieldStrategy.all), criteria.getKeywordFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getKeywordMatchStrategy());
assertNotNull(converter.toDocument(new FactRecord()));
assertEquals(userSubject.getName(), entity.getName()); assertEquals(userSubject.getOrganization().getId(), entity.getOrganizationID());
assertTrue(vertex.edges(BOTH).hasNext()); assertTrue(vertex.edges(IN).hasNext()); assertTrue(vertex.edges(OUT).hasNext());
assertTrue(identity instanceof FunctionIdentifier); assertEquals(name, FunctionIdentifier.class.cast(identity).getName());
assertNull(dao.refreshFact(null));
assertNull(getFactManager().getFactType((UUID) null)); assertNull(getFactManager().getFactType(UUID.randomUUID()));
assertNull(resolver.apply(null));
assertEquals(vertex1.id(), vertex2.id());
assertSame(first, second);
assertEquals(existingFact, fact); assertEquals(set("some comment"), set(fact.getComments(), FactCommentRecord::getComment)); assertEquals(set(subjectIds), set(fact.getAcl(), FactAclEntryRecord::getSubjectID));
assertSame(organization, handler.resolveOrganization(organizationID.toString(), null));
assertEquals(referencedFact.getAccessMode(), handler.resolveAccessMode(referencedFact, null));
assertEquals(2, criteria.getObjects().size()); assertTrue(criteria.getObjects().stream().allMatch(o -> FactExistenceSearchCriteria.Direction.BiDirectional == o.getDirection()));
assertSame(record, dao.storeFact(record));
assertSame(entity, resolver.resolveFactType(type));
assertEquals(id, subject.getId()); assertEquals("subject", subject.getName()); assertNull(subject.getOrganization());
assertNotNull(record.getSourceObject()); assertNotNull(record.getDestinationObject()); assertTrue(record.isBidirectionalBinding());
assertSame(retraction, resolver.resolveRetractionFactType());
assertNull(serializer.read(null));
assertNull(accessController.resolveOrganization(UUID.fromString("00000000-0000-0000-0000-000000000002")));
assertEquals(SetUtils.set(fact), criteria.getInReferenceTo());
assertEquals(1, result.getCount()); assertEquals(1, result.getLimit()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertTrue(getValidator().validate(new CreateOriginRequest() .setName("name") ).isEmpty());
assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, OUT)); assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, IN)); assertFalse(ObjectVertex.matchesDirection(loopFact, objectA, BOTH));
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(1)));
assertEquals(FactTypeStruct.builder().setId(id).setName("someFactType").build(), resolver.toFactTypeStruct(id));
assertEquals(201, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertEquals(SetUtils.set(id), criteria.getObjectID());
assertEquals(SetUtils.set(id, idForName), criteria.getOriginID());
assertEquals(SetUtils.set(id, idForName), criteria.getOrganizationID());
assertSame(origin, handler.resolveOrigin("origin"));
assertNotNull(model.getRelevantObjectBindings()); assertNull(model.getRelevantFactBindings());
assertNull(getObjectManager().getObjectType((UUID) null)); assertNull(getObjectManager().getObjectType(UUID.randomUUID()));
assertEquals(entity.getInReferenceToID(), b.getFactID()); assertEquals(entity.getId(), b.getMetaFactID());
assertEquals(1, violations.size());
assertEquals(source.getId(), edge.inVertex().id()); assertEquals(destination.getId(), edge.outVertex().id());
assertEquals(currentUserID, context.getCurrentUserID());
assertEquals(vertex1.id(), vertex2.id()); assertFalse(vertex2 instanceof DetachedVertex);
assertNull(helper.convertMetaFactBindingDefinitions(null)); assertNull(helper.convertMetaFactBindingDefinitions(ListUtils.list()));
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group1"), createOrganizationIdentifier(1))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "group1", createOrganizationIdentifier(1)));
assertFalse(context.hasReadPermission(new OriginEntity()));
assertEquals(123456789L, (long) criteria.getStartTimestamp()); assertEquals(987654321L, (long) criteria.getEndTimestamp()); assertEquals(SetUtils.set(FactSearchCriteria.TimeFieldStrategy.timestamp), criteria.getTimeFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getTimeMatchStrategy());
assertNull(converter.toEntity(null));
assertEquals(objectID, result.next().id());
assertEquals(source.getId(), edge.inVertex().id()); assertEquals(destination.getId(), edge.outVertex().id());
assertFalse(model.isBidirectionalBinding()); assertNull(model.getSourceObject()); assertNull(model.getDestinationObject());
assertNull(resolver.apply(null));
assertNull(converter.apply(null));
assertEquals(1, actual.size());
assertEquals(2, props.size()); assertEquals(set("value->objectValue", "value->someFactValue"), asKeyValueStrings(props));
assertEquals(source.getId(), edge.outVertex().id()); assertEquals(destination.getId(), edge.inVertex().id());
assertEquals(set("invalid.source.object", "invalid.destination.object"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertEquals(1, organizations.size());
assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.certainty), criteria.getNumberFieldStrategy()); assertEquals(25, criteria.getLimit()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID());
assertEquals(1, fact.getComments().size()); assertNotNull(fact.getComments().get(0).getId()); assertEquals(fact.getOriginID(), fact.getComments().get(0).getOriginID()); assertEquals("Hello World!", fact.getComments().get(0).getComment()); assertTrue(fact.getComments().get(0).getTimestamp() > 0);
assertNull(converter.apply(null));
assertNotNull(seb); assertEquals(model.getId(), seb.getId()); assertEquals(model.getName(), seb.getName());
assertTrue(vertex.vertices(BOTH).hasNext()); assertTrue(vertex.vertices(IN).hasNext()); assertFalse(vertex.vertices(OUT).hasNext());
assertEquals(StringFactory.edgeString(edge), edge.toString());
assertSame(first, second);
assertSame(record, dao.getObject(type, value));
assertNull(converter.apply(null));
assertEquals(1480520820000L, (long) deserializer.deserialize(parser, context));
assertEquals(2, IteratorUtils.count(getActGraph().vertices(vertex1, vertex2)));
assertSame(comment, dao.storeFactComment(fact, comment));
assertNotNull(converter.toEntity(new FactRecord()));
assertEquals(SetUtils.set(id, idForName), criteria.getOriginID());
assertTrue(getValidator().validate(new GetFactTypeByIdRequest().setId(UUID.randomUUID())).isEmpty());
assertTrue(new ServiceNotNullValidator().isValid(new Object(), null));
assertEquals(1, result.size()); assertEquals("someValue", result.get(0));
assertEquals(set("invalid.source.object", "invalid.destination.object"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(record.getSourceObject()); assertNotNull(record.getDestinationObject()); assertTrue(record.isBidirectionalBinding());
assertEquals(1, container.getCount()); assertEquals(ListUtils.list(record), ListUtils.list(container));
assertTrue(getValidator().validate(new UpdateOriginRequest() .setId(UUID.randomUUID()) ).isEmpty());
assertSame(entry, dao.storeFactAclEntry(fact, entry));
assertEquals(id, request.getId());
assertEquals(0, getFactManager().fetchFactAcl(null).size()); assertEquals(0, getFactManager().fetchFactAcl(UUID.randomUUID()).size());
assertNotNull(record); assertEquals(entity.getId(), record.getId()); assertEquals(entity.getTypeID(), record.getTypeID()); assertEquals(entity.getValue(), record.getValue());
assertNull(getObjectManager().saveObject(null));
assertNull(getFactManager().saveFact(null));
assertEquals(25, result.getLimit()); assertEquals(1, result.getCount()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertEquals("keyword", criteria.getKeywords()); assertEquals(SetUtils.set( FactSearchCriteria.KeywordFieldStrategy.factValueText, FactSearchCriteria.KeywordFieldStrategy.factValueIp, FactSearchCriteria.KeywordFieldStrategy.factValueDomain ), criteria.getKeywordFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getKeywordMatchStrategy());
assertEquals(1, criteria.getObjects().size());
assertTrue(context.hasReadPermission(new FactRecord().setAccessMode(FactRecord.AccessMode.Public)));
assertEquals(SetUtils.set("value"), criteria.getFactValue());
assertEquals(id, i.<GetObjectTypeByIdRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertNull(accessController.resolveSubject(UUID.fromString("00000000-0000-0000-0000-000000000002")));
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), subject.getId()); assertEquals("subject", subject.getName()); assertNull(subject.getOrganization());
assertSame(model, converter.apply(id));
assertEquals(vertex1.id(), vertex2.id()); assertFalse(vertex2 instanceof ReferenceVertex);
assertEquals(type, request.getType()); assertEquals(value, request.getValue()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertSame(entry, dao.storeFactAclEntry(fact, entry));
assertSame(function, state.getFunction(function.getName()));
assertSame(first, second);
assertNull(record.getSourceObject()); assertNull(record.getDestinationObject());
assertNull(resolver.apply(null));
assertTrue(identity instanceof SubjectIdentifier); assertEquals(id, SubjectIdentifier.class.cast(identity).getGlobalID());
assertEquals(1, violations.size());
assertEquals(id, i.<GetOriginByIdRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertTrue(handler.isRetracted(fact));
assertSame(type1, type2);
assertNotNull(model); assertEquals(id, model.getId()); assertEquals("N/A", model.getName());
assertEquals(10000, result.getLimit()); assertEquals(1, result.getCount()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertTrue(getValidator().validate(new GetOriginByIdRequest().setId(UUID.randomUUID())).isEmpty());
assertSame(model, converter.apply(id));
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function1"))); assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function2"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function1")); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function2"));
assertEquals(factToSave, fact); assertEquals(set("some comment"), set(fact.getComments(), FactCommentRecord::getComment)); assertEquals(set(subjectIds), set(fact.getAcl(), FactAclEntryRecord::getSubjectID));
assertEquals(VertexProperty.empty(), property);
assertEquals(25, result.getLimit()); assertEquals(count, result.getCount()); assertEquals(count, ListUtils.list(result.iterator()).size());
assertEquals(StringFactory.vertexString(vertex), vertex.toString());
assertFalse(context.hasReadPermission(object));
assertSame(record, dao.storeObject(record));
assertTrue(request.getIncludeDeleted()); assertEquals(25, (int) request.getLimit()); assertEquals(200, response.getStatus()); assertTrue(payload.isArray()); assertEquals(3, payload.size());
assertEquals(123, criteria.getLimit());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(1)));
assertNull(handler.resolveAccessMode(null, AccessMode.Public)); assertNull(handler.resolveAccessMode(new FactRecord(), AccessMode.Public));
assertFalse(iterator.hasNext());
assertSame(model, converter.apply(id));
assertSame(model, converter.apply(id));
assertEquals(objectID, elementFactory.getVertex(objectID).id());
assertEquals(25, result.getLimit()); assertEquals(100, result.getCount()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertEquals(objectID, elementFactory.getVertex(objectID).id());
assertEquals(id, request.getId());
assertNull(converter.toEntity(null, UUID.randomUUID()));
assertEquals(count, result.getCount()); assertEquals(count, ListUtils.list(result.iterator()).size());
assertTrue(vertex.vertices(BOTH).hasNext()); assertTrue(vertex.vertices(IN).hasNext()); assertTrue(vertex.vertices(OUT).hasNext());
assertNull(getObjectManager().getObject(null)); assertNull(getObjectManager().getObject(UUID.randomUUID()));
assertNull(converter.apply(null));
assertSame(type1, type2);
assertTrue(getValidator().validate(new TraverseByObjectSearchRequest().setQuery("g.out()")).isEmpty());
assertNull(resolver.getRequestHeader().getCredentials());
assertEquals(3, organizations.size());
assertEquals(2, entity.getBindings().size()); assertEquals(record.getSourceObject().getId(), entity.getBindings().get(0).getObjectID()); assertEquals(Direction.BiDirectional, entity.getBindings().get(0).getDirection()); assertEquals(record.getDestinationObject().getId(), entity.getBindings().get(1).getObjectID()); assertEquals(Direction.BiDirectional, entity.getBindings().get(1).getDirection());
assertEquals(1, organizations.size());
assertEquals(set("fact.is.public"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(record.getSourceObject()); assertNotNull(record.getDestinationObject()); assertFalse(record.isBidirectionalBinding());
assertEquals(vertex1.id(), vertex2.id()); assertFalse(vertex2 instanceof ReferenceVertex);
assertEquals(1, acl.size());
assertNull(model.getInReferenceTo());
assertEquals(set(record.getComments(), FactCommentRecord::getComment), set(request.getComment())); assertTrue(list(record.getAcl(), FactAclEntryRecord::getSubjectID).contains(subject.getId()));
assertSame(entity, resolver.fetchExistingFactType(id));
assertNull(converter.apply(null));
assertEquals(SetUtils.set(organizationID), context.getAvailableOrganizationID());
assertTrue(vertex.properties("value").hasNext());
assertEquals(1, entity.getBindings().size()); assertEquals(record.getDestinationObject().getId(), entity.getBindings().get(0).getObjectID()); assertEquals(Direction.FactIsSource, entity.getBindings().get(0).getDirection());
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group1"))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "group1"));
assertNotNull(converter.toEntity(new ObjectRecord()));
assertEquals(2, fact.getAcl().size());
assertEquals(id, request.getId());
assertNotNull(entity); assertEquals(factID, entity.getFactID()); assertEquals(record.getId(), entity.getId()); assertEquals(record.getSubjectID(), entity.getSubjectID()); assertEquals(record.getOriginID(), entity.getOriginID()); assertEquals(record.getTimestamp(), entity.getTimestamp());
assertSame(comment, dao.storeFactComment(fact, comment));
assertNotNull(converter.fromEntity(new FactAclEntity()));
assertEquals(SetUtils.set(uuid1, uuid2), resolver.factTypeNamesToIds(SetUtils.set("test1", "test2")));
assertEquals(set("object.type.not.exist"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertTrue(vertex.edges(BOTH, "type").hasNext()); assertFalse(vertex.edges(BOTH, "something").hasNext());
assertNotNull(record); assertEquals(entity.getId(), record.getId()); assertEquals(entity.getReplyToID(), record.getReplyToID()); assertEquals(entity.getOriginID(), record.getOriginID()); assertEquals(entity.getComment(), record.getComment()); assertEquals(entity.getTimestamp(), record.getTimestamp());
assertTrue(getValidator().validate(new GetFactByIdRequest().setId(UUID.randomUUID())).isEmpty());
assertEquals(0.1f, (Float) criteria.getMinNumber(), 0.0); assertEquals(0.2f, (Float) criteria.getMaxNumber(), 0.0); assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.trust), criteria.getNumberFieldStrategy()); assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getNumberMatchStrategy());
assertFalse(handler.isRetracted(fact)); assertEquals(set(fact.getId()), criteria.getInReferenceTo()); assertFalse(criteria.getFactTypeID().isEmpty()); assertFalse(criteria.getAvailableOrganizationID().isEmpty()); assertNotNull(criteria.getCurrentUserID());
assertEquals(1, comments.size());
assertNull(elementFactory.getVertex(null));
assertTrue(handler.isRetracted(fact));
assertEquals(0, props.size());
assertTrue(handler.isRetracted(fact));
assertNull(resolver.factTypeNameToId("does not exist"));
assertNull(elementFactory.getEdge(null));
assertEquals(set("invalid.fact.object.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertEquals(1, factDocument.getObjects().size());
assertNotNull(dao.retractFact(record));
assertNull(elementFactory.getEdge(UUID.randomUUID()));
assertFalse(context.hasReadPermission(new FactEntity().setAccessMode(AccessMode.Public)));
assertNotNull(rh.getCredentials()); assertTrue(rh.getCredentials() instanceof SubjectCredentials); assertEquals(1, ((SubjectCredentials) rh.getCredentials()).getSubjectID());
assertTrue(edge.properties().hasNext());
assertEquals(0, container.getCount()); assertFalse(container.hasNext());
assertNull(getObjectManager().saveObjectType(null));
assertTrue(context.hasReadPermission(new OriginEntity()));
assertTrue(vertex.properties().hasNext());
assertSame(model, converter.apply(id));
assertEquals(record.getValue(), criteria.getFactValue()); assertEquals(record.getTypeID(), criteria.getFactTypeID()); assertEquals(record.getOriginID(), criteria.getOriginID()); assertEquals(record.getOrganizationID(), criteria.getOrganizationID()); assertEquals(record.getAccessMode().name(), criteria.getAccessMode().name()); assertEquals(record.getConfidence(), criteria.getConfidence(), 0.0f); assertEquals(record.getInReferenceToID(), criteria.getInReferenceTo());
assertEquals(1, result.size()); assertTrue(result.get(0) instanceof Fact); assertTrue(set(fact1ID, fact2ID).contains(((Fact) result.get(0)).getId()));
assertEquals(ObjectTypeStruct.builder().setId(id).setName("someObjectType").build(), resolver.toObjectTypeStruct(id));
assertEquals(0, ListUtils.list(result.iterator()).size());
assertFalse(edge.properties("something").hasNext());
assertSame(first, second);
assertEquals(vertex1.id(), vertex1.id()); assertEquals(vertex2.id(), vertex2.id()); assertNotEquals(vertex1.id(), vertex2.id());
assertEquals(2, IteratorUtils.count(getActGraph().edges(edge1, edge2)));
assertTrue(CollectionUtils.isEmpty(withAcl(new FactRecord(), UUID.randomUUID(), null).getAcl())); assertTrue(CollectionUtils.isEmpty(withAcl(new FactRecord(), UUID.randomUUID(), list()).getAcl()));
assertNull(converter.fromEntity(null));
assertSame(scope.scope(key, unscopedProvider).get(), scope.scope(key, unscopedProvider).get());
assertEquals(1, fact.getAcl().size()); assertNotNull(fact.getAcl().get(0).getId()); assertEquals(fact.getOriginID(), fact.getAcl().get(0).getOriginID()); assertEquals(subjectID, fact.getAcl().get(0).getSubjectID()); assertTrue(fact.getAcl().get(0).getTimestamp() > 0);
assertEquals(1, result.size()); assertTrue(result.get(0) instanceof Fact); assertEquals(factRecord.getId(), ((Fact) result.get(0)).getId());
assertNotNull(dao.refreshFact(record));
assertEquals(2, organizations.size());
assertNull(resolver.apply(null));
assertNotNull(entity.getId()); assertNotNull(entity.getNamespaceID()); assertNull(entity.getOrganizationID()); assertNull(entity.getDescription()); assertEquals(request.getName(), entity.getName()); assertEquals(0.8f, entity.getTrust(), 0.0); assertEquals(OriginEntity.Type.Group, entity.getType());
assertNull(resolver.apply(id));
assertNull(elementFactory.getEdge(UUID.randomUUID()));
assertEquals(1, actual.size());
assertEquals(1, violations.size());
assertTrue(getValidator().validate(new GetObjectByIdRequest().setId(UUID.randomUUID())).isEmpty());
assertNull(converter.toEntity(null, UUID.randomUUID()));
assertFalse(validator.validate("a-a")); assertFalse(validator.validate("")); assertFalse(validator.validate(null));
assertEquals(SetUtils.set("fact.not.valid"), SetUtils.set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertNotNull(converter.apply(new FactAclEntryRecord()));
assertEquals(2, IteratorUtils.count(getActGraph().edges(edge1.id(), edge2.id())));
assertNull(getObjectManager().getObject(null, "ignored")); assertNull(getObjectManager().getObject("", "ignored")); assertNull(getObjectManager().getObject("ignored", null)); assertNull(getObjectManager().getObject("ignored", ""));
assertEquals("object.type.not.exist", ex.getMessageTemplate());
assertEquals(25, result.getLimit()); assertEquals(100, result.getCount()); assertEquals(1, ListUtils.list(result.iterator()).size());
assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(1))); assertTrue(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(1)));
assertEquals(25, result.getLimit()); assertEquals(count, result.getCount()); assertEquals(count, ListUtils.list(result.iterator()).size()); assertNotNull(criteria.getCurrentUserID()); assertNotNull(criteria.getAvailableOrganizationID()); assertEquals(count, criteria.getObjectID().size());
assertEquals(vertex1.id(), vertex2.id());
assertEquals(201, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertEquals(id, i.<DeleteOriginRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertNotNull(delegate1); assertNotNull(delegate2); assertNotSame(delegate1, delegate2);
assertEquals(1, ListUtils.list(result.iterator()).size());
assertNull(resolver.apply(null));
assertNull(withComment(null, "Hello World!"));
assertNull(converter.apply(null));
assertNull(model.getRelevantObjectBindings().get(0).getSourceObjectType()); assertNotNull(model.getRelevantObjectBindings().get(0).getDestinationObjectType());
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_access"))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_access"));
assertNotNull(record); assertEquals(entity.getId(), record.getId()); assertEquals(entity.getSubjectID(), record.getSubjectID()); assertEquals(entity.getOriginID(), record.getOriginID()); assertEquals(entity.getTimestamp(), record.getTimestamp());
assertEquals(1, violations.size());
assertTrue(edge.properties("value").hasNext());
assertEquals(1, criteria.getObjects().size());
assertEquals(StringFactory.edgeString(edge), edge.toString());
assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), subject.getId()); assertEquals("subject", subject.getName()); assertNull(subject.getOrganization());
assertFalse(edge.properties("something").hasNext());
assertEquals(200, response.getStatus()); assertTrue(payload.isArray()); assertEquals(3, payload.size());
assertSame(object, resolver.resolveObject(id.toString()));
assertEquals(entities.size(), result.getCount()); assertEquals(0, result.getLimit()); assertEquals(entities.size(), ListUtils.list(result.iterator()).size());
assertEquals(1, actual.size());
assertNotNull(seb); assertEquals(model.getId(), seb.getId()); assertEquals(model.getName(), seb.getName());
assertEquals(id, i.<GetObjectByIdRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertSame(entity, getFactManager().saveFactType(entity));
assertNull(getFactManager().saveFactAclEntry(null));
assertNull(resolver.resolveObject(null)); assertNull(resolver.resolveObject("")); assertNull(resolver.resolveObject(" ")); assertNull(resolver.resolveObject("invalid"));
assertSame(organization, state.getOrganization(organization.getInternalID())); assertSame(organization, state.getOrganization(organization.getName()));
assertEquals(set("invalid.fact.object.binding"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));
assertTrue(factory.get("TrueValidator", null) instanceof TrueValidator);
assertEquals(entities.size(), result.getCount()); assertEquals(0, result.getLimit()); assertEquals(entities.size(), ListUtils.list(result.iterator()).size());
assertEquals(id, i.<UpdateOriginRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertEquals(10, props.size());
assertEquals(2, violations.size());
assertEquals(1, delegate.handle(request).getCount());
assertTrue(factory.get("RegexValidator", "pattern") instanceof RegexValidator);
assertSame(model, converter.apply(id));
assertNotNull(entity.getId()); assertNotNull(entity.getNamespaceID()); assertEquals(request.getOrganization(), entity.getOrganizationID()); assertEquals(request.getName(), entity.getName()); assertEquals(request.getDescription(), entity.getDescription()); assertEquals(request.getTrust(), entity.getTrust(), 0.0); assertEquals(OriginEntity.Type.Group, entity.getType());
assertEquals(objectVertex, result.next());
assertEquals(id, resolver.resolveSubjectUUID(descriptor));
assertTrue(handler.isRetracted(fact)); assertTrue(handler.isRetracted(fact));
assertEquals(SetUtils.set(id, idForName), criteria.getOrganizationID());
assertEquals(id, i.<GetFactTypeByIdRequest>getArgument(1).getId()); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get("id").textValue());
assertEquals(1, fact.getAcl().size()); assertEquals(currentUser, fact.getAcl().get(0).getSubjectID());
assertNull(dao.storeFact(null));
assertNotNull(record); assertEquals(record.getId(), entity.getId()); assertEquals(record.getTypeID(), entity.getTypeID()); assertEquals(record.getValue(), entity.getValue());
assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_grant"))); assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_grant"));
assertThat(e.getEvent().getCode(), is(CFG090)); assertFalse(admin.get(Grandfather.class, "g1").isPresent()); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObject")); assertNotNull(optional.get().getProp9()); assertNotNull(optional.get().getProp2());
assertArrayEquals(b, toBytes(bytes, 0, 3));
assertThat(e.getEvent().getCode(), is(CFG090)); assertTrue(optional.isPresent()); assertFalse(optional.isPresent());
assertThat(compareTo(b1, 0, b1.length, b2, 4, b1.length), is(0));
assertThat(e.getEvent().getCode(), is(CFG090)); assertFalse(admin.get(Grandfather.class, "g1").isPresent()); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObject")); assertThat(optional.get().getProp9(), is(0L)); assertNull(optional.get().getProp2());
assertThat(g.getProp1(), is("g10"));
assertThat(e.getEvent().getCode(), is(CFG090)); assertTrue(optional.isPresent()); assertThat(value, is("testMergeBean")); assertNotNull(optional.get().getSingleValue("prop9")); assertNotNull(optional.get().getSingleValue("prop2"));
assertThat(schemas.values().size(), is(5));
assertThat(e.getEvent().getCode(), is(CFG108));
assertArrayEquals(b, toBytes(bytes, 0, 3));
assertFalse(optional.isPresent()); assertTrue(optional.isPresent());
assertThat(e.getEvent().getCode(), is(CFG090)); assertTrue(optional.isPresent()); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObjects1")); assertThat(optional.get().getProp9(), is(0L)); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObjects2")); assertNull(optional.get().getProp2());
assertThat(grandfathers.size(), is(3));
assertThat(singleton.getProperty(), is("override"));
assertThat(e.getEvent().getCode(), is(CFG090)); assertThat(beans.size(), is(2));
assertFalse(optional.isPresent()); assertTrue(optional.isPresent());
assertThat(compareTo(b1, 0, b1.length, b2, 4, b1.length), is(0));
assertThat(i, CoreMatchers.is(number));
assertThat(e.getEvent().getCode(), is(CFG090)); assertTrue(optional.isPresent()); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObjects1")); assertNotNull(optional.get().getProp9()); assertTrue(optional.isPresent()); assertThat(optional.get().getProp1(), is("testSetObjects2")); assertNotNull(optional.get().getProp2());
assertThat(beans.size(), is(0)); assertThat(beans.size(), is(3)); assertThat(e.getEvent().getCode(), is(CFG101));
assertThat(objects.size(), is(0)); assertThat(objects.size(), is(3)); assertThat(e.getEvent().getCode(), is(CFG101));
assertThat(e.getEvent().getCode(), is(CFG090)); assertTrue(optional.isPresent()); assertThat(value, is("testSetBean")); assertThat(optional.get().getSingleValue("prop9"), is("0")); assertNull(optional.get().getSingleValue("prop2"));
assertFalse(optional.isPresent()); assertTrue(bean.isPresent());
assertThat(e.getEvent().getCode(), is(CFG108));
assertThat(e.getEvent().getCode(), is(CFG090)); assertThat(beans.size(), is(grandfathersBeans.size())); assertFalse(optional.isPresent()); assertFalse(optional.isPresent()); assertTrue(optional.isPresent());
assertThat(result.size(), is(2)); assertEquals(g.getProp1(), "g10"); assertEquals(g.getProp1(), "g11");
assertFalse(optional.isPresent()); assertTrue(bean.isPresent());
assertNotNull(singletonParent); assertThat(singletonParent.getProperty(), is(SINGLETON_PARENT_SCHEMA_NAME)); assertNotNull(singleton); assertThat(singleton.getProperty(), is(SINGLETON_SCHEMA_NAME)); assertThat(p10.getProp1(), is("p10")); assertNotNull(children); assertThat(children.size(), is(1)); assertThat(child.getBeanId().getInstanceId(), is("c10")); assertThat(child.getProp11(), is(1.1f));
assertThat(a.getName(), is("A")); assertThat(b.getName(), is("B"));
assertThat(bytes.length, CoreMatchers.is(length - (i * 4) - 4));
assertThat(e.getEvent().getCode(), is(CFG306)); assertThat(e.getEvent().getCode(), is(CFG306)); assertThat(e.getEvent().getCode(), is(CFG306));
assertEquals(expectedLocalDate, actualLocalDate);
assertEquals(expectedCalendarDay, actualCalendarDay);
assertEquals(expectedYearMonth, actuaYearMonth);
assertThat(builtTree, is(aForumTreeMatching(sourceTree)));
assertTrue(stacks.isSuccess()); assertTrue(stacks.getResultPayload().isPresent()); assertEquals(bandCount * eventCount, stacks.getResultPayload().get().stream().distinct().count());
assertTrue(uri.startsWith("_template"));
assertEquals(ItemSourceAppender.class, itemAppender.getClass()); assertEquals(logEvent, logEventCaptor.getValue()); assertEquals(formattedIndexName, indexNameCaptor.getValue()); assertEquals(expectedMessage, itemSourceCaptor.getValue().getSource());
assertTrue(actualMessage.contains(expectedMessage));
assertSame(factory.outputStreamDelegate.getDelegate(), os1); assertSame(factory.outputStreamDelegate.getDelegate(), os2);
assertTrue(result);
assertTrue(actualMessage.contains(expectedType)); assertTrue(actualMessage.contains(expectedReason));
assertEquals(1, callCount.get());
assertFalse(lifeCycle.isStarted()); assertTrue(lifeCycle.isStarted()); assertFalse(lifeCycle.isStarted()); assertTrue(lifeCycle.isStopped());
assertEquals(expectedSource, result.getSource()); assertEquals(expectedIndex, result.getInfo().getTargetName());
assertNotNull(itemSource);
assertTrue(result instanceof HttpPost); assertEquals(result.getURI(), new URI(expectedUrl));
assertEquals(expected, template.getSource());
assertFalse(result);
assertFalse(actualMessage.contains("" + DEFAULT_TEST_STATUS));
assertNull(result);
assertTrue(request.getRequestLine().getUri().contains(expectedUriPart));
assertNotNull(keySequenceSelector);
assertTrue(actualMessage.contains(expectedMessage));
assertEquals(arg1, captor.getAllValues().get(0)); assertEquals(arg2, captor.getAllValues().get(1));
assertTrue(end - start >= 100);
assertTrue(actualMessage.contains(expectedRootType)); assertTrue(actualMessage.contains(expectedRootReason)); assertTrue(actualMessage.contains(expectedType)); assertTrue(actualMessage.contains(expectedReason));
assertEquals(expected, result);
assertFalse(result);
assertTrue(result);
assertNull(itemSource);
assertEquals(1, allValues.size()); assertEquals(index, allValues.get(0).getIndex());
assertTrue(captor.getAllValues().contains(payload1)); assertTrue(captor.getAllValues().contains(payload2));
assertEquals(2, allValues.size()); assertEquals(index1, allValues.get(0).getIndex()); assertEquals(index2, allValues.get(1).getIndex()); assertEquals(mappingType, allValues.get(0).getType()); assertEquals(mappingType, allValues.get(1).getType());
assertEquals(source, template.getSource());
assertTrue(actualMessage.contains(expectedType)); assertTrue(actualMessage.contains(expectedReason));
assertNull(result);
assertEquals(IndexRequest.HTTP_METHOD_NAME, restMethodName);
assertFalse(result);
assertTrue(property.isDynamic());
assertEquals(bulk, captor.getValue());
assertEquals(ByteBuf.class, handledType);
assertEquals(client1, client2);
assertNotNull(generator1); assertSame(generator1, generator2);
assertFalse(result);
assertEquals(expectedMessage, actualMessage);
assertSame(factory.outputStreamDelegate.getDelegate(), os1); assertSame(factory.ioContext.getSourceReference(), os1);
assertEquals(expected, template.getSource());
assertEquals(expectedContentLength, contentLength);
assertTrue(item1.getSource().toString(Charset.defaultCharset()).equals(payload1)); assertTrue(item2.getSource().toString(Charset.defaultCharset()).equals(payload2));
assertEquals("#", factory.getRootValueSeparator()); assertEquals("#", factory.getRootValueSeparator());
assertTrue(httpRequest.getRequestLine().getUri().contains(expectedUriPart));
assertEquals(result, String.format("%s=%s", expectedName, expectedValue));
assertSame(itemSource, result);
assertEquals(expectedSchemeIOSessionStrategy, registry.lookup("http"));
assertEquals(payload1, new BulkRequestIntrospector().items(captor.getValue()).iterator().next());
assertNotNull(filter);
assertEquals(LayoutTestItemSource.class, itemSource.getClass());
assertFalse(result);
assertTrue(result);
assertTrue(actualMessage.contains(expectedRootType)); assertTrue(actualMessage.contains(expectedRootReason)); assertFalse(actualMessage.contains(expectedType)); assertFalse(actualMessage.contains(expectedReason));
assertEquals(arg1, captor.getAllValues().get(0)); assertEquals(arg2, captor.getAllValues().get(1));
assertEquals(payload1, new BulkRequestIntrospector().items(captor.getValue()).iterator().next());
assertEquals(client1, client2);
assertNotSame(configuredObjectMapper, result);
assertEquals(expectedIndex, result.getTargetName());
assertFalse(actualMessage.contains(expectedType)); assertFalse(actualMessage.contains(expectedReason)); assertEquals(DEFAULT_TEST_MESSAGE, actualMessage);
assertEquals(bulk, captor.getValue());
assertNotNull(failoverPolicy);
assertFalse(result);
assertEquals(arg1, captor.getAllValues().get(0)); assertEquals(arg2, captor.getAllValues().get(1));
assertEquals(expectedIndex, result.getTargetName());
assertSame(outputStream1, outputStream2);
assertFalse(result.isSucceeded()); assertEquals(testResult.took, result.getTook()); assertEquals(bulkResultItem, resultItem);
assertEquals(expectedSource, result.getSource()); assertEquals(expectedIndex, result.getInfo().getTargetName());
assertTrue(request.getURI().startsWith(expectedIndexName));
assertNotNull(factory);
assertEquals(StringItemSource.class, itemSource.getClass());
assertTrue(result);
assertEquals(expectedIndex, result.getTargetName());
assertNull(result);
assertFalse(result);
assertTrue(captor.getAllValues().get(0).getSource().equals(payload1)); assertTrue(captor.getAllValues().get(1).getSource().equals(payload2));
assertSame(itemSource, result);
assertFalse(result);
assertEquals("PUT", restMethodName);
assertFalse(result);
assertTrue(result);
assertTrue(result instanceof HttpHead); assertEquals(result.getURI(), new URI(expectedUrl));
assertEquals(request, captor.getValue());
assertFalse(resized);
assertTrue(captor.getAllValues().get(0).getSource().equals(source1.getSource())); assertTrue(captor.getAllValues().get(1).getSource().equals(source2.getSource()));
assertFalse(result);
assertFalse(appender.isStarted()); assertTrue(appender.isStopped());
assertEquals(HCBatchOperations.class, batchOperation.getClass());
assertFalse(request.getURI().contains(expectedId));
assertNull(readerKey1); assertNull(readerKey2);
assertNotNull(contentType);
assertEquals(bulk, captor.getValue());
assertTrue(actualMessage.contains("" + DEFAULT_TEST_STATUS));
assertEquals(expectedSource, result.getSource()); assertEquals(expectedIndex, result.getInfo().getTargetName());
assertFalse(result);
assertTrue(result.isSucceeded()); assertEquals(testResult.took, result.getTook());
assertFalse(result);
assertTrue(result);
assertSame(factory.dataOutputDelegate.getDelegate(), dataOutput1); assertSame(factory.dataOutputDelegate.getDelegate(), dataOutput2);
assertEquals(1, allValues.size()); assertEquals(index, allValues.get(0).getIndex());
assertEquals(expectedIoThreadCount, ioReactorConfig.getIoThreadCount());
assertFalse(actualMessage.contains("" + DEFAULT_TEST_STATUS));
assertTrue(result instanceof HttpPost); assertEquals(result.getURI(), new URI(expectedUrl));
assertEquals(bulk, captor.getValue());
assertTrue(uri.endsWith(expectedTemplateName));
assertEquals(expectedMessage, exceptionCaptor.getValue().getMessage());
assertTrue(thread.isInterrupted());
assertNull(result); assertEquals(IllegalArgumentException.class, caught.getClass());
assertEquals(expectedReadTImeout, ioReactorConfig.getSoTimeout());
assertTrue(request.getURI().contains(expectedId));
assertTrue(mockingDetails(abstractLayout).getInvocations().size() == 0); assertFalse(appender.isStarted()); assertTrue(appender.isStopped());
assertArrayEquals(writer.virtualProperties, result.virtualProperties); assertEquals(writer.valueResolver, result.valueResolver); assertEquals(writer.filters, result.filters);
assertNotNull(pool.executor);
assertNotNull(executor);
assertFalse(actualMessage.contains("" + DEFAULT_TEST_STATUS));
assertEquals(ItemSourceAppender.class, itemAppender.getClass()); assertEquals(message, messageCaptor.getValue()); assertEquals(formattedIndexName, indexNameCaptor.getValue()); assertEquals(expectedMessage, itemSourceCaptor.getValue().getSource());
assertTrue(itemAppender instanceof StringAppender); assertEquals(logEvent, logEventCaptor.getValue()); assertEquals(formattedIndexName, indexNameCaptor.getValue()); assertEquals(expectedMessage, stringLogCaptor.getValue());
assertTrue(result);
assertEquals(expectedFirstKey, key1); assertEquals(expectedSecondKey, key2);
assertEquals(BufferedBulkOperations.class, batchOperation.getClass());
assertNull(result);
assertEquals(expectedSource, actualSource); assertTrue(expectedSource == actualSource);
assertFalse(result.isSucceeded()); assertEquals(testResult.took, result.getTook()); assertEquals(testResult.error.getType(), result.getError().getType()); assertEquals(testResult.error.getReason(), result.getError().getReason()); assertEquals(testResult.status, result.getStatus());
assertTrue(captor.getAllValues().contains(payload1)); assertTrue(captor.getAllValues().contains(payload2));
assertEquals(payload1, captor.getValue().getSource());
assertEquals(AfterburnerModule.class, captor.getValue().getClass());
assertEquals(batchRequest, captor.getValue());
assertEquals(expectedTargetName, result);
assertNull(result);
assertEquals(1, failoverPolicy.retryListeners.length);
assertEquals(1, retryProcessor.orphanedKeyCount.get());
assertTrue(result instanceof HttpPut); assertEquals(result.getURI(), new URI(expectedUrl));
assertTrue(request.getURI().contains(expectedType));
assertEquals(expectedSchemeIOSessionStrategy, registry.lookup("https"));
assertFalse(result); assertEquals(1, failoverPolicy.storeFailureCount.get());
assertEquals(builder.get(TEST_NAME), TEST_VALUE);
assertEquals(buffer, itemSource.getSource());
assertEquals(serverList.get(i), result.get(i));
assertNotNull(generator1);
assertEquals(expectedBytes.length, result.getEntity().getContentLength()); assertEquals(0, inputStream.available());
assertFalse(result);
assertEquals(expectedMappingType, type);
assertEquals(arg1, captor.getAllValues().get(0)); assertEquals(arg2, captor.getAllValues().get(1));
assertEquals("index", type);
assertEquals(2, allValues.size()); assertEquals(index1, allValues.get(0).getIndex()); assertEquals(index2, allValues.get(1).getIndex());
assertTrue(actualMessage.contains(expectedCausedByType)); assertTrue(actualMessage.contains(expectedCausedByReason)); assertFalse(actualMessage.contains(expectedType)); assertFalse(actualMessage.contains(expectedReason));
assertEquals(payload1, new BulkRequestIntrospector().items(captor.getValue()).iterator().next());
assertEquals(0, failoverPolicy.retryListeners.length);
assertFalse(result.isSucceeded()); assertEquals(testResult.took, result.getTook());
assertTrue(itemAppender instanceof StringAppender); assertEquals(formattedIndexName, indexNameCaptor.getValue()); assertEquals(expectedMessage, stringLogCaptor.getValue());
assertTrue(result);
assertNotNull(policy);
assertTrue(result);
assertNull(next);
assertEquals(BufferedBulk.class, bulk.getClass());
assertFalse(appender.isStarted()); assertTrue(appender.isStopped());
assertEquals(true, isBuffered);
assertEquals(arg1, captor.getAllValues().get(0)); assertEquals(arg2, captor.getAllValues().get(1));
assertFalse(lifeCycle.isStarted()); assertFalse(lifeCycle.isStopped()); assertTrue(lifeCycle.isStarted());
assertTrue(result instanceof HttpGet); assertEquals(result.getURI(), new URI(expectedUrl));
assertNotNull(result);
assertTrue(result);
assertTrue(result);
assertEquals(expectedConnectTImeout, ioReactorConfig.getConnectTimeout());
assertEquals(expectedFirstKey, key1); assertEquals(expectedSecondKey, key2);
assertEquals(BatchRequest.class, request.getClass());
assertEquals(expectedFirstKey, readerKey1); assertEquals(expectedSecondKey, readerKey2);
assertEquals(result, item1);
assertTrue(result instanceof PoolingAsyncResponseConsumer);
assertNull(readerKey1);
assertFalse(result);
assertEquals(logEvent, captor.getValue());
assertEquals(-1, comparator.compare(new Hour(), new Day()));
assertEquals(FILE_SET_LOCK_PATH, pathCaptor.getValue()); assertEquals(new Integer(-1), versionCaptor.getValue());
assertEquals("/terrapin/data/123", TerrapinUtil.helixResourceToHdfsDir("$terrapin$data$123"));
assertEquals(expectedVersionIndex, versionIndex);
assertEquals(host, address.getHostName()); assertEquals(port, address.getPort());
assertEquals(expected, viewInfo.toPrettyPrintingJson());
assertEquals(new ImmutablePair("$terrapin$data$file_set$1343443323", 100), TerrapinUtil.getResourceAndPartitionNum("$terrapin$data$file_set$1343443323$100")); assertEquals(new ImmutablePair("$terrapin$data$file_set$1343443323", 100), TerrapinUtil.getResourceAndPartitionNum("$terrapin$data$file_set$1343443323_100"));
assertEquals(2, speculativeFuture.get().intValue()); assertTrue(isBackupFutureInvoked);
assertArrayEquals(expectedBytes, returnedBytes); assertEquals(0, bb.position());
assertEquals("resource$1", TerrapinUtil.getViewPartitionName("resource", 1)); assertEquals("$1", TerrapinUtil.getViewPartitionName("", 1)); assertEquals("null$1", TerrapinUtil.getViewPartitionName(null, 1));
assertEquals("$terrapin$data$123", TerrapinUtil.hdfsDirToHelixResource("/terrapin/data/123"));
assertNotNull(e); assertEquals(EXCEPTION_MSG, e.getMessage()); assertTrue(isBackupFutureInvoked);
assertTrue(allPaths.contains(FILE_SET_DIR)); assertTrue(allPaths.contains(VIEWS_DIR));
assertEquals(0, TerrapinUtil.getViewPartitionNumber("resource")); assertEquals(1, TerrapinUtil.getViewPartitionNumber("resource$1"));
assertEquals(FILE_SET_INFO, FileSetInfo.fromJson(FILE_SET_INFO_JSON.getBytes()));
assertFalse(TerrapinAdmin.confirmFileSetRollbackVersion(fileSetInfo.fileSetName, fileSetInfo, 1, inputStream));
assertEquals(Constants.FILE_PREFIX + "00000", TerrapinUtil.formatPartitionName(0)); assertEquals(Constants.FILE_PREFIX + "00010", TerrapinUtil.formatPartitionName(10)); assertEquals(Constants.FILE_PREFIX + "99999", TerrapinUtil.formatPartitionName(99999));
assertTrue(TerrapinAdmin.confirmFileSetDeletion("test_fileset", inputStream)); assertFalse(TerrapinAdmin.confirmFileSetDeletion("test_fileset", inputStream)); assertFalse(TerrapinAdmin.confirmFileSetDeletion("test_fileset", inputStream));
assertEquals(expectedDir, HFileOutputFormat.hfilePath(outputDir, partitionIndex));
assertEquals(2, speculativeFuture.get().intValue()); assertTrue(isBackupFutureInvoked);
assertEquals(1, speculativeFuture.get().intValue()); assertTrue(isBackupFutureInvoked);
assertEquals(1, speculativeFuture.get().intValue()); assertTrue(isBackupFutureInvoked);
assertNotNull(e); assertEquals(EXCEPTION_MSG, e.getMessage()); assertFalse(isBackupFutureInvoked);
assertArrayEquals(expectedBytes, returnedBytes); assertEquals(expectedBytes.length, bb.position());
assertEquals(expected, TerrapinUtil.getZKQuorumFromConf(conf));
assertTrue(allPaths.contains(FILE_SET_DIR)); assertTrue(allPaths.contains(VIEWS_DIR)); assertTrue(allPaths.contains(LOCKS_DIR));
assertEquals(0.25, value.get());
assertFalse(TerrapinAdmin.confirmFileSetRollbackVersion(fileSetInfo.fileSetName, fileSetInfo, 1, inputStream));
assertEquals(reader1, resourcePartitionMap.removeReader(resource, "part1")); assertTrue(gotUnsupportedOpException); assertEquals(reader2, resourcePartitionMap.getReader(resource, "part2")); assertEquals(reader2, resourcePartitionMap.removeReader(resource, "part2"));
assertTrue(TerrapinAdmin.confirmFileSetRollbackVersion(fileSetInfo.fileSetName, fileSetInfo, 1, inputStream));
assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath("/1234567890123")); assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath("1234567890123")); assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath("/a/b/1234567890123"));
assertEquals("hdfs-instance", TerrapinUtil.getHelixInstanceFromHDFSHost("hdfs-instance.my-domain.abc.com")); assertEquals("hdfs-instance", TerrapinUtil.getHelixInstanceFromHDFSHost("hdfs-instance"));
assertNotNull(zkManager.getViewInfo(resource1)); assertNull(zkManager.getViewInfo("non_existing"));
assertTrue(fileSetInfo.deleted);
assertEquals(1, speculativeFuture.get().intValue()); assertTrue(isBackupFutureInvoked);
assertTrue(isBackupFutureInvoked); assertEquals(2, value);
assertEquals(reader1, resourcePartitionMap.getReader(resource, "part1")); assertEquals(reader1, resourcePartitionMap.getReader(resource, "part1"));
assertEquals(5, responseMap.size()); assertEquals(5, responseMap.size());
assertEquals(Compression.Algorithm.SNAPPY, HFileOutputFormat.getAlgorithm(null)); assertEquals(Compression.Algorithm.SNAPPY, HFileOutputFormat.getAlgorithm("")); assertEquals(Compression.Algorithm.SNAPPY, HFileOutputFormat.getAlgorithm("WRONG_ALGO")); assertEquals(Compression.Algorithm.SNAPPY, HFileOutputFormat.getAlgorithm("SNAPPY")); assertEquals(Compression.Algorithm.NONE, HFileOutputFormat.getAlgorithm("NONE"));
assertEquals(1, speculativeFuture.get().intValue()); assertFalse(isBackupFutureInvoked);
assertEquals(FILE_SET_INFO_JSON, new String(FILE_SET_INFO.toJson()));
assertEquals(hdfsNameNode, returnedInfo.hdfsNameNode); assertEquals(replicaFactor, returnedInfo.hdfsReplicationFactor);
assertTrue(isBackupFutureInvoked);
assertNotNull(filterId); assertNotNull(propertyFilter); assertTrue(propertyFilter instanceof JacksonMatcherFilter); assertEquals(Matcher.of("foo/bar"), ((JacksonMatcherFilter) propertyFilter).getMatcher());
assertEquals("expected", subject.toString());
assertTrue("matchesParent(" + matchingParent + ") is false", matcher.matchesParent(matchingParent));
assertSame(matcher, new JacksonMatcherFilter(matcher).getMatcher());
assertTrue(Matcher.of("*").matchesAll()); assertTrue(Matcher.all().matchesAll()); assertFalse(Matcher.of("all").matchesAll()); assertFalse(Matcher.of("all/*").matchesAll());
assertEquals(pattern, new Parser().parse(pattern).toString());
assertSame(mapperResponse, context);
assertEquals("fooBarBaz", toCamelCase("foo_bar_baz").toString()); assertEquals("fooBarBaz", toCamelCase("fooBarBaz").toString()); assertEquals("fooBarBaz", toCamelCase("FooBarBaz").toString()); assertEquals("fooBarBaz", toCamelCase("foo_bar_baz").toString()); assertEquals("fooBarBaz", toCamelCase("____Foo____Bar___Baz____").toString());
assertEquals("FooBarBaz", toPascalCase("foo_bar_baz").toString()); assertEquals("FooBarBaz", toPascalCase("fooBarBaz").toString()); assertEquals("FooBarBaz", toPascalCase("FooBarBaz").toString()); assertEquals("FooBarBaz", toPascalCase("foo_bar_baz").toString()); assertEquals("FooBarBaz", toPascalCase("____Foo____Bar___Baz____").toString());
assertEquals("foo_bar_baz", toUnderscoreCase("foo_bar_baz").toString()); assertEquals("foo_bar_baz", toUnderscoreCase("fooBarBaz").toString()); assertEquals("foo_bar_baz", toUnderscoreCase("FooBarBaz").toString()); assertEquals("foo_bar_baz", toUnderscoreCase("foo_bar_baz").toString()); assertEquals("foo_bar_baz", toUnderscoreCase("____Foo____Bar___Baz____").toString());
assertEquals(TestMessage.SCHEMA, schema.getSchema());
assertEquals(2, buffers.size()); assertEquals(8, buffers.get(0).remaining()); assertEquals(4, buffers.get(1).remaining()); assertEquals(42, buffers.get(0).getInt()); assertEquals(43, buffers.get(0).getInt()); assertEquals(44, buffers.get(1).getInt());
assertThat(Obfuscate.secure("/", "/")).isEqualTo("/");
assertThat(Obfuscate.secure(TEST_STRING)).isEqualTo("/p****le");
assertThat(tested.location().asString()).isEqualTo(SOME_PATH);
assertThat(tested.buffer).hasSize(1); assertThat(tested.count).isEqualTo(1); assertThat(tested.buffer).containsExactly(written);
assertThat(tested.buffer).hasSize(2); assertThat(tested.count).isEqualTo(2); assertThat(tested.buffer).containsExactly(written);
assertThat(out).isNotEqualTo(TEST_STRING); assertThat(out.length()).isEqualTo(44);
assertThat(storageService.objectExists(FILE)).isTrue();
assertThat(storageService.objectExists(ls.findFirst().get())).isTrue();
assertThat(tested.encryptedPath().asString()).isEqualTo(SOME_PATH);
assertThat(tested.count).isEqualTo(0); assertThat(tested.buffer).hasSize(INITIAL_CAPACITY);
assertThat(tested.buffer).hasSize(4); assertThat(tested.count).isEqualTo(3); assertThat(tested.buffer).startsWith(10, 20, 30);
assertThat(profile.getId()).isEqualTo(user); assertThat(profile.getAppVersion()).isEqualTo(Version.current());
assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("****"); assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("****");
assertThat(read).hasContent(MESSAGE);
assertThat(bytesSentDirectly.getValue()).hasContent(new String(shortChunk));
assertThat(bytesSentDirectly.getValue()).hasContent("");
assertThat(tested.buffer).hasSize(4); assertThat(tested.count).isEqualTo(3); assertThat(tested.buffer).startsWith(written1, written2, written3);
assertThat(bytesSentDirectly.getAllValues()).isEmpty(); assertThat(uploadChunk.getAllValues()).hasSize(2); assertThat(uploadChunk.getAllValues().get(0).getInputStream()) .hasContent(new String(Arrays.copyOfRange(multipartChunkWithTail, 0, BUFFER_SIZE))); assertThat(new String(partialChunk)) .isEqualTo(new String(Arrays.copyOfRange( multipartChunkWithTail, BUFFER_SIZE, multipartChunkWithTail.length) ) );
assertThat(encryptedSegments[1]).isNotEqualTo(encryptedSegments[3]); assertThat(encryptedSegments[2]).isNotEqualTo(encryptedSegments[5]);
assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("hash:9eRM");
assertThat(storageService.objectExists(FILE)).isFalse();
assertThat(bytesSentDirectly.getAllValues()).isEmpty(); assertThat(uploadChunk.getAllValues()).hasSize(1); assertThat(uploadChunk.getAllValues().get(0).getInputStream()).hasContent(new String(exactOneMultipartChunk));
assertThat(tested.buffer).hasSize(2); assertThat(tested.buffer).containsExactly(written1, written2);
assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("****"); assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo(TEST_STRING);
assertThat(read).hasContent(MESSAGE);
assertThat(bucketAccessService.privateAccessFor( auth, BasePrivateResource.forPrivate(ABSOLUTE_BUCKET)).location().asURI() ).asString().isEqualTo(ABSOLUTE_BUCKET);
assertThat(read).hasContent(MESSAGE);
assertThat(lsStorageService).isEmpty();
assertThat(tested.buffer).hasSize(1); assertThat(tested.buffer).containsExactly(written);
assertThat(lsStorageService) .hasSize(1) .extracting(AbsoluteLocation::location) .asString().contains(FILE);
assertThat(tested.buffer).hasSize(3); assertThat(tested.count).isEqualTo(3); assertThat(tested.buffer).startsWith(written);
assertThat(bucketAccessService.publicAccessFor( auth.getUserID(), BasePublicResource.forAbsolutePublic(ABSOLUTE_BUCKET).getResource()).location().asURI() ).asString().isEqualTo(ABSOLUTE_BUCKET);
assertThat(password.getValue().getValue()).isEqualTo(newPassword.toCharArray());
assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("****");
assertThat(tested.size()).isEqualTo(3); assertThat(tested.buffer.length).isEqualTo(4);
assertThat(Obfuscate.secureSensitive(TEST_STRING)).isEqualTo("****");
assertThat(read).hasContent(MESSAGE);
assertThat(Obfuscate.secure(TEST_STRING)).isEqualTo(TEST_STRING);
assertThat(tested.decryptedPath().asString()).isEqualTo("");
assertThat(song1.hashCode()).isEqualTo(song1_copy.hashCode()); assertThat(song1.hashCode()).isNotEqualTo(song2.hashCode());
assertThat(getFileExtension(single)).isEqualTo("txt"); assertThat(getFileExtension(douple)).isEqualTo("tar.gz"); assertThat(getFileExtension(none)).isEqualTo(""); assertThat(getFileExtension(dots)).isEqualTo("mp3"); assertThat(getFileExtension(dotsdouble)).isEqualTo("tar.gz"); assertThat(getFileExtension(spaces)).isEqualTo("mp3");
assertThat(pluginInfo1).isEqualTo(fromP);
assertThat(folder1.hashCode()).isEqualTo(folder1_copy.hashCode()); assertThat(folder1.hashCode()).isNotEqualTo(folder2.hashCode());
assertThat(song2.getResources().get(0).getMimeType()).isNotEqualTo(Track.DEFAULT_MIME_TYPE);
assertThat(album1.hashCode()).isEqualTo(album1_copy.hashCode()); assertThat(album1.hashCode()).isNotEqualTo(album2.hashCode());
assertThat(song1.getResources().get(0).getMimeType()).isEqualTo(Track.DEFAULT_MIME_TYPE);
assertThat(artInfo1.hashCode()).isEqualTo(artInfo1_copy.hashCode()); assertThat(artInfo1.hashCode()).isNotEqualTo(artInfo2.hashCode());
assertThat(toRelativePath(base, file)).isEqualTo("Music/somefile.mp3"); assertThat(file).isEqualTo(new File(base, toRelativePath(base, file)));
assertThat(artInfo1.hashCode()).isEqualTo(artInfo1_copy.hashCode()); assertThat(artInfo1.hashCode()).isNotEqualTo(artInfo2.hashCode());
assertThat(libraryInfo1.hashCode()).isEqualTo(libraryInfo1_copy.hashCode()); assertThat(libraryInfo1.hashCode()).isNotEqualTo(libraryInfo2.hashCode());
assertThat(t).isEqualTo(f2);
assertThat(artInfo1).isEqualTo(fromP);
assertThat(artInfo1).isEqualTo(fromP);
assertThat((b2 instanceof TestBundleable)).isTrue(); assertThat((TestBundleable) b2).isEqualTo(t);
assertThat((Folder) b2).isEqualTo(f); assertThat(f).isEqualTo(f2);
assertThat(parseDuration(duration)).isEqualTo(25); assertThat(parseDuration(duration)).isEqualTo(353); assertThat(parseDuration(duration)).isEqualTo(353); assertThat(parseDuration(duration)).isEqualTo(353); assertThat(parseDuration(duration)).isEqualTo(353); assertThat(parseDuration(duration)).isEqualTo(7553);
assertThat(libraryInfo1).isEqualTo(fromParcel);
assertThat(artist1.hashCode()).isEqualTo(artist1_copy.hashCode()); assertThat(artist1.hashCode()).isNotEqualTo(artist2.hashCode());
assertThat(pluginInfo1.hashCode()).isEqualTo(pluginInfo1_copy.hashCode()); assertThat(pluginInfo1.hashCode()).isNotEqualTo(pluginInfo2.hashCode());
assertThat(mFetcher.originalUri).isNullOrEmpty();
assertEquals(client.getState(), ConnectionState.NEW);
assertEquals(cuerpo, MessageGenerator.getDatagrama(0, i, cuerpo));
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON));
assertEquals(1, event.get().getRecords().size()); assertEquals("aws:s3", event.get().getRecords().get(0).getEventSource()); assertEquals("us-east-1", event.get().getRecords().get(0).getAwsRegion()); assertEquals("dev-nsmg-logs-temp", event.get().getRecords().get(0).getS3().getBucket().getName()); assertEquals("transformed_sample_logs.json", event.get().getRecords().get(0).getS3().getObject().getKey());
assertEquals(2, result.getSuccessItems().size()); assertEquals(1, result.getFailureItems().size()); assertEquals(1, result.getSkippedItems().size());
assertEquals(503, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals("Test Error Occur exception", actual.error); assertEquals("Test descrption", actual.description); assertFalse(res.isBase64Encoded());
assertEquals(404, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals("{\\"error\\":\\"Client Error\\",\\"description\\":\\"Action not found\\"}", res.getBody()); assertFalse(res.isBase64Encoded());
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(res.getHeaders(), is(not((hasKey(ACCESS_CONTROL_ALLOW_ORIGIN))))); assertThat(res.getHeaders(), is(not((hasKey(ACCESS_CONTROL_ALLOW_CREDENTIALS))))); assertEquals("\\"TestActionWithoutCors\\"", res.getBody()); assertFalse(res.isBase64Encoded());
assertEquals(true, FunctionalUtils.isNotEmpty(Arrays.asList("a"))); assertEquals(true, FunctionalUtils.isNotEmpty("a"));
assertEquals(503, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals("Test Error test exception", actual.error); assertEquals("Test descrption", actual.description); assertFalse(res.isBase64Encoded());
assertEquals(500, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals("Internal Server Error", actual.error); assertEquals("Not found any ExceptionHandler for java.lang.RuntimeException", actual.description); assertFalse(res.isBase64Encoded());
assertEquals(400, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals( "{\\"error\\":\\"Client Error\\",\\"description\\":\\"Unexpected exception during reading a request\\"}", res.getBody()); assertFalse(res.isBase64Encoded());
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(JsonUtils.readValue(res.getBody(), Person.class), equalTo(expect)); assertFalse(res.isBase64Encoded());
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(actual.persons, contains(person, addedPerson)); assertFalse(res.isBase64Encoded());
assertEquals(1, result.getSuccessItems().size()); assertEquals(0, result.getFailureItems().size()); assertEquals(0, result.getSkippedItems().size());
assertEquals("string_value", config.TEST_STRING_VALUE); assertEquals(Integer.valueOf(1), config.TEST_INTEGER_VALUE); assertEquals(1, config.TEST_INT_VALUE); assertEquals(Boolean.FALSE, config.TEST_BOOLEAN_VALUE); assertEquals(false, config.TEST_BOOL_VALUE); assertEquals("not_exists", config.TEST_NOT_EXIST_VALUE);
assertTrue(classes.contains(TestAnnotatedClass.class));
assertEquals(true, FunctionalUtils.isEmpty((Collection<?>)null)); assertEquals(true, FunctionalUtils.isEmpty(Collections.emptyList())); assertEquals(true, FunctionalUtils.isEmpty((String)null)); assertEquals(true, FunctionalUtils.isEmpty(""));
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertEquals("\\"TestAction1\\"", res.getBody()); assertFalse(res.isBase64Encoded());
assertEquals(200, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(JsonUtils.readValue(res.getBody(), Person.class), equalTo(expect)); assertFalse(res.isBase64Encoded());
assertEquals(201, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(JsonUtils.readValue(res.getBody(), Person.class), equalTo(expect)); assertFalse(res.isBase64Encoded());
assertTrue(classes.contains(TestAnnotatedClass.class));
assertEquals(401, res.getStatusCode()); assertThat(res.getHeaders(), hasEntry(CONTENT_TYPE, APPLICATION_JSON)); assertThat(res.getHeaders(), hasEntry(ACCESS_CONTROL_ALLOW_ORIGIN, "*")); assertEquals( "{\\"error\\":\\"Unauthorized Error\\",\\"description\\":\\"Bad Credentials\\"}", res.getBody()); assertFalse(res.isBase64Encoded());
assertThat(objectAlreadyExist, is(true));
assertTrue(templatedString.contains(expectedpointcut)); assertTrue(templatedString.contains(expectedpointcut)); assertTrue(templatedString .contains("fqcn = \\"com.svashishtha.mocktail.metadata.aj.creator.TemplateProcesserTest\\";"));
assertThat(1, is(userDetails.size())); assertThat(2, is(userDetails.size()));
assertNotNull(userDetail); assertSame(1L, userDetail.getId()); assertEquals("Got " + userDetail.getName(), "user1", userDetail.getName());
assertTrue(templatedString.contains(expectedpointcut)); assertTrue(templatedString .contains("String fqcn = \\"com.svashishtha.mocktail.metadata.aj.creator.TemplateProcesserTest\\";"));
assertThat(file.exists(), is(false)); assertThat(file.exists(), is(true)); assertThat("Unable to delete file", true, is(file.delete()));
assertNotNull(users); assertEquals(3, users.size()); assertEquals("user1", users.get(0).getName());
assertEquals("Invalid amount of entries", 2, entries.size());
assertNotNull("No id set", feed.getId()); assertNotNull("No title set", feed.getTitle()); assertEquals("Invalid update set", new Date(2009, 0, 2), feed.getUpdated());
assertThat(recordedList.size(), is(4));
assertThat(templatedClassObjectString, containsString("public aspect RecorderAspectAspectedClass")); assertThat(templatedClassObjectString, containsString("String fqcn = \\"com.sandy.AspectedClass\\";")); assertThat(templatedClassObjectString, containsString("recordingDirectoryPath = \\"root_dir\\"")); assertThat( templatedClassObjectString, containsString("pointcut callPointcut() : call(* com.sandy.AspectedClass.*(..));"));
assertThat(recordedList.size(), is(4)); assertThat((String) recordedList.get(0), is("sandy")); assertThat((String) recordedList.get(1), is("ganesh")); assertThat((Integer) recordedList.get(2), is(12)); assertThat((Double) recordedList.get(3), is(23.0));
assertTrue(contains( this.extractor.extract(headers, payload("oss-todomvc-app-config")).getPaths(), "oss*" )); assertTrue(contains( this.extractor.extract(headers, payload("home1-oss-common-config")).getPaths(), "application" ));
assertTrue(contains( this.extractor.extract(headers, payload("home1-oss-common-config")).getPaths(), "application" ));
assertThat( delays.size(), equalTo( 4 ) ); assertThat( delays, contains( 100L, 200L, 400L, 800L ) );
assertThat( error.getMessage(), containsString( "no router or reader found in response." ) );
assertEquals( "Principal can\'t be null", e.getMessage() );
assertEquals( expected, actual ); assertEquals( expected, actual ); assertEquals( expected, actual );
assertTrue( future.isCancelled() ); assertTrue( future.isCompletedExceptionally() );
assertEquals( 0, composition.writers().size() );
assertEquals( error1, combined.getCause() );
assertEquals( addresses( E, F ), composition.routers() );
assertTrue( composition.hasRoutersAndReaders() );
assertEquals( 2, seenAddresses.size() ); assertTrue( seenAddresses.containsAll( asList( A, C ) ) );
assertEquals( "Hello!", reformatted );
assertThat( exception.getMessage(), startsWith( "Unable to connect to database management service," ) );
assertThat(value1.asDouble(), equalTo(9007199254740992D));
assertThat( path.length(), equalTo( 3 ) );
assertEquals( "4.1", version.toString() );
assertThat( error, instanceOf( DatabaseException.class ) ); assertEquals( code, error.code() ); assertEquals( message, error.getMessage() );
assertThat( await( healthy ), is( true ) );
assertEquals( InternalBookmark.parse( bookmarkString ), await( stage ) );
assertThat( error.getMessage(), startsWith( "Connection to the database terminated" ) ); assertThat( error.getMessage(), containsString( reason ) );
assertEquals( address1, strategy.selectReader( new BoltServerAddress[]{address1, address2} ) ); assertEquals( address2, strategy.selectReader( new BoltServerAddress[]{address1, address2} ) ); assertEquals( address1, strategy.selectReader( new BoltServerAddress[]{address1, address2} ) ); assertEquals( address2, strategy.selectReader( new BoltServerAddress[]{address1, address2} ) );
assertTrue( metadata.isEmpty() );
assertEquals( result, await( retryAsync( logic, retries, result ) ) );
assertEquals( "Password can\'t be null", e.getMessage() );
assertNotNull( tx );
assertTrue( isFatal( new IOException( "IO failed!" ) ) );
assertEquals(query, summary.query() );
assertTrue( routingTable.preferInitialRouter() );
assertEquals( "Username can\'t be null", e.getMessage() );
assertEquals( result, await( single ) );
assertThat( session.lastBookmark(), instanceOf( InternalBookmark.class ) ); assertTrue( bookmark.isEmpty() ); assertEquals( bookmarkAfterCommit, session.lastBookmark() );
assertEquals( error, response.error() );
assertThat( record.get( 0 ), equalTo( value( "v1-1" ) ) ); assertThat( record.get( 1 ), equalTo( value( "v2-1" ) ) ); assertThat( record.get( 2 ), equalTo( NullValue.NULL ) ); assertThat( record.get( -37 ), equalTo( NullValue.NULL ) );
assertFalse( channelPromise.isSuccess() ); assertTrue( channel.closeFuture().isDone() );
assertFalse( runCompletedFuture.isDone() ); assertTrue( runCompletedFuture.isDone() ); assertNotNull( runCompletedFuture.get() );
assertThat( sniServerNames, hasSize( 1 ) ); assertThat( sniServerNames.get( 0 ), instanceOf( SNIHostName.class ) ); assertThat( ((SNIHostName) sniServerNames.get( 0 )).getAsciiName(), equalTo( address.host() ) );
assertEquals( LocalDateTime.of( 1990, 3, 16, 0, 0, 57, 998 ), result );
assertEquals( InternalTypeSystem.TYPE_SYSTEM.TIME(), timeValue.type() );
assertTrue( future.isCompletedExceptionally() ); assertEquals( error, e.getCause() );
assertThat( logger, instanceOf( Slf4jLogger.class ) );
assertNull( Futures.combineErrors( null, null ) );
assertEquals( addresses( C, D ), composition.writers() );
assertEquals( error, Futures.completionExceptionCause( completionException ) );
assertNull( Futures.getNow( future ) );
assertNotNull( createResult( 1 ).single() );
assertThat( emptyNodeValue().type(), equalTo( InternalTypeSystem.TYPE_SYSTEM.NODE() ));
assertEquals( InternalTypeSystem.TYPE_SYSTEM.DATE_TIME(), dateTimeValue.type() );
assertFalse( resetFuture.isDone() ); assertTrue( resetFuture.isDone() ); assertFalse( resetFuture.isCompletedExceptionally() );
assertThat(value1.asInt(), equalTo(Integer.MIN_VALUE));
assertEquals( InternalTypeSystem.TYPE_SYSTEM.LOCAL_TIME(), timeValue.type() );
assertFalse( future.isDone() ); assertTrue( future.isDone() ); assertNull( future.get() );
assertFalse( slf4jLogger.isDebugEnabled() ); assertTrue( slf4jLogger.isDebugEnabled() );
assertThat( filledPathValue().type(), equalTo( InternalTypeSystem.TYPE_SYSTEM.PATH() ));
assertTrue( channelPromise.isSuccess() ); assertEquals( anyServerVersion(), serverVersion( channel ) );
assertEquals( "Fatal blocking", error.getMessage() );
assertThat( exception.getMessage(), startsWith( "boo" ) );
assertEquals( "[0x" + channel.id() + "][][bolt-12345] Hello!", reformatted );
assertEquals( 0, channel.outboundMessages().size() ); assertEquals( 2, channel.outboundMessages().size() ); assertEquals( PULL_ALL, channel.outboundMessages().poll() ); assertEquals( RESET, channel.outboundMessages().poll() );
assertEquals( address, strategy.selectReader( new BoltServerAddress[]{address} ) );
assertThat( reader, instanceOf( CommonMessageReader.class ) );
assertFalse( runCompletedFuture.isDone() ); assertTrue( runCompletedFuture.isDone() ); assertNull( runCompletedFuture.get() );
assertThat( error.getMessage(), startsWith( "Cannot coerce INTEGER to Java String" ) );
assertThat( firstList.size(), equalTo( 2 ) ); assertThat( secondList.size(), equalTo( 0 ) );
assertEquals( -1, summary.resultConsumedAfter( TimeUnit.SECONDS ) ); assertEquals( -1, summary.resultConsumedAfter( TimeUnit.MILLISECONDS ) );
assertNotNull( tx );
assertEquals( time, timeValue.asLocalTime() );
assertThat( record.index( "k1" ), equalTo( 0 ) ); assertThat( record.index( "k2" ), equalTo( 1 ) );
assertNull( channel.pipeline().get( SslHandler.class ) );
assertThat( value.hashCode(), notNullValue() );
assertThat( appendedKeys, equalTo( keys ) );
assertThat(value1.asInt(), equalTo(Integer.MAX_VALUE));
assertNull( await( stage ) );
assertEquals( 0, addressSet.size() );
assertEquals( threadCount, count( eventLoopGroup ) ); assertThat( eventLoopGroup, instanceOf( NioEventLoopGroup.class ) );
assertThat( error.getMessage(), containsString( "records received \'2\' is too few or too many." ) );
assertEquals( "Session no longer valid", error.getMessage() );
assertThat( actual.getCause(), equalTo( error ) );
assertThat( value.hashCode(), notNullValue() );
assertFalse( isFatal( new ClientException( "Neo.ClientError.Transaction.ConstraintsChanged", "" ) ) );
assertEquals( time, timeValue.asOffsetTime() );
assertThat( value.hashCode(), notNullValue() );
assertTrue( future.isCompletedExceptionally() ); assertEquals( error, e.getCause() );
assertEquals( "Zero value is not supported", e.getMessage() );
assertThat( channel.outboundMessages(), hasSize( 1 ) ); assertThat( channel.outboundMessages().poll(), instanceOf( HelloMessage.class ) ); assertEquals( 1, messageDispatcher.queuedHandlersCount() ); assertFalse( promise.isDone() ); assertTrue( promise.isDone() ); assertTrue( promise.isSuccess() );
assertEquals( 1, channel.outboundMessages().size() ); assertEquals( RESET, channel.readOutbound() );
assertEquals( InternalBookmark.empty(), bookmark );
assertThat( protocol.createMessageFormat(), instanceOf( expectedMessageFormatType() ) );
assertEquals( 0, composition.readers().size() );
assertThat( protocol.createMessageFormat(), instanceOf( expectedMessageFormatType() ) );
assertEquals( asList( RECORD_1, RECORD_2 ), response.records() );
assertThat( error, instanceOf( ClientException.class ) ); assertEquals( code, error.code() ); assertEquals( message, error.getMessage() );
assertThat( map.keySet(), contains( "k1", "k2" ) ); assertThat( map.get( "k1" ), equalTo( 1 ) ); assertThat( map.get( "k2" ), equalTo( 2 ) );
assertNull( strategy.selectReader( new BoltServerAddress[0] ) );
assertEquals( address, strategy.selectWriter( new BoltServerAddress[]{address} ) );
assertEquals( "Fatal async", error.getMessage() );
assertEquals( addresses( A, B ), composition.readers() );
assertEquals( "Hello", Futures.blockingGet( future ) );
assertThat( exception.getMessage(), startsWith( "error" ) );
assertEquals( (Integer.MAX_VALUE - 1) % arrayLength, roundRobinIndex.next( arrayLength ) ); assertEquals( Integer.MAX_VALUE % arrayLength, roundRobinIndex.next( arrayLength ) ); assertEquals( 0, roundRobinIndex.next( arrayLength ) ); assertEquals( 1, roundRobinIndex.next( arrayLength ) ); assertEquals( 2, roundRobinIndex.next( arrayLength ) );
assertEquals( address, strategy.selectWriter( new BoltServerAddress[]{address} ) );
assertEquals( 3, seenAddresses.size() ); assertTrue( seenAddresses.containsAll( asList( A, B, C ) ) );
assertTrue( cursorFuture.isDone() ); assertThat( Futures.getNow( cursorFuture ), equalTo( cursor ) );
assertEquals( 1, channel.outboundMessages().size() ); assertEquals( RESET, channel.readOutbound() );
assertFalse( result.hasNext() );
assertNull( await( stage ) );
assertEquals( InternalBookmark.empty(), bookmark );
assertThat( map.size(), equalTo( 3 ) ); assertThat( map.get( "scheme" ), equalTo( (Value) new StringValue( "basic" ) ) ); assertThat( map.get( "principal" ), equalTo( (Value) new StringValue( "foo" ) ) ); assertThat( map.get( "credentials" ), equalTo( (Value) new StringValue( "bar" ) ) );
assertFalse( summary.hasProfile() ); assertNull( summary.profile() );
assertThat( record.get( 0 ), equalTo( value( 0 ) ) ); assertThat( record.get( 1 ), equalTo( value( 1 ) ) ); assertThat( record.get( 2 ), equalTo( NullValue.NULL ) ); assertThat( record.get( -37 ), equalTo( NullValue.NULL ) );
assertThat(value1.asInt(), equalTo(Integer.MAX_VALUE));
assertEquals( 1, channel.outboundMessages().size() ); assertEquals( PULL_ALL, single( channel.outboundMessages() ) );
assertTrue( channel.writeOutbound( new Query( "RETURN 1", Values.value( params ) ) ) ); assertTrue( channel.finish() );
assertEquals( result, await( retryLogic.retryAsync( workMock ) ) ); assertEquals( 1, scheduleDelays.size() ); assertEquals( 42, scheduleDelays.get( 0 ).intValue() );
assertEquals( emptyList(), extracted.keys() ); assertEquals( emptyMap(), extracted.keyIndex() );
assertEquals( "Meeh", exception.getMessage() );
assertEquals( defaultThread.getClass(), driverThread.getClass().getSuperclass() ); assertEquals( defaultThread.getPriority(), driverThread.getPriority() );
assertEquals( error, e ); assertEquals( 0, eventExecutor.scheduleDelays().size() );
assertEquals( InternalBookmark.parse( bookmarkValue ), bookmark );
assertTrue( future.isDone() ); assertFalse( future.isCompletedExceptionally() ); assertEquals( "Hello", future.get() );
assertFalse( future.isDone() ); assertTrue( future.isCompletedExceptionally() ); assertEquals( error, e.getCause() );
assertEquals( 42, composition.expirationTimestamp() );
assertEquals( "Meeh", exception.getMessage() );
assertEquals( PROCEDURE, response.procedure() );
assertNotNull( Iterables.newHashMapWithSize( 42 ) );
assertNull( await( stage ) );
assertTrue( channelPromise.isSuccess() ); assertEquals( ServerVersion.v4_0_0, serverVersion( channel ) );
assertEquals( i, index ); assertEquals( i, index );
assertEquals( 0, summary.notifications().size() );
assertEquals( error1, combined.getCause() ); assertArrayEquals( new Throwable[]{error2Cause}, combined.getCause().getSuppressed() );
assertThat( exception.getMessage(), startsWith( "Unable to connect to database management service," ) );
assertEquals( "Done", result );
assertEquals( result, await( Flux.from( retryRx( logic, retries, result ) ).single() ) );
assertThat( readSession, instanceOf( NetworkSession.class ) ); assertThat( writeSession, instanceOf( NetworkSession.class ) );
assertFalse( resetFuture.isDone() ); assertTrue( resetFuture.isDone() ); assertFalse( resetFuture.isCompletedExceptionally() );
assertEquals( bookmark1, session.lastBookmark() ); assertEquals( bookmark2, session.lastBookmark() );
assertEquals( error4, e ); assertEquals( 3, suppressed.length ); assertEquals( error1, suppressed[0] ); assertEquals( error2, suppressed[1] ); assertEquals( error3, suppressed[2] ); assertEquals( 3, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() ); assertEquals( initialDelay * multiplier * multiplier, scheduleDelays.get( 2 ).intValue() );
assertEquals( 2, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() );
assertThat( error, instanceOf( AuthenticationException.class ) ); assertEquals( code, error.code() ); assertEquals( message, error.getMessage() );
assertEquals( error, e );
assertThat( e.getMessage(), startsWith( "Database name parameter for selecting database is not supported" ) );
assertTrue( promise.isSuccess() ); assertFalse( promise.getNow() );
assertNull( await( stage ) );
assertEquals( dateTimeWithOffset.toOffsetDateTime(), dateTimeValue1.asOffsetDateTime() ); assertEquals( dateTimeWithZoneId.toOffsetDateTime(), dateTimeValue2.asOffsetDateTime() );
assertFalse( this.session.isOpen() );
assertThat( map.size(), equalTo( 4 ) ); assertThat( map.get( "scheme" ), equalTo( (Value) new StringValue( "basic" ) ) ); assertThat( map.get( "principal" ), equalTo( (Value) new StringValue( "foo" ) ) ); assertThat( map.get( "credentials" ), equalTo( (Value) new StringValue( "bar" ) ) ); assertThat( map.get( "realm" ), equalTo( (Value) new StringValue( "baz" ) ) );
assertTrue( metrics instanceof InternalMetrics );
assertThat( reader, instanceOf( CommonMessageReader.class ) );
assertEquals( "Credentials can\'t be null", e.getMessage() );
assertSame( Iterables.emptyQueue(), Iterables.emptyQueue() );
assertFalse( RoutingContext.EMPTY.isDefined() );
assertEquals( InternalBookmark.empty(), bookmark );
assertThat( iterator.next().getValue(), instanceOf( ChunkDecoder.class ) ); assertThat( iterator.next().getValue(), instanceOf( MessageDecoder.class ) ); assertThat( iterator.next().getValue(), instanceOf( InboundMessageHandler.class ) ); assertThat( iterator.next().getValue(), instanceOf( OutboundMessageHandler.class ) ); assertThat( iterator.next().getValue(), instanceOf( ChannelErrorHandler.class ) ); assertFalse( iterator.hasNext() );
assertThat( exception.getMessage(), equalTo( "hi there" ) );
assertTrue( tx.isOpen() );
assertFalse( slf4jLogger.isTraceEnabled() ); assertTrue( slf4jLogger.isTraceEnabled() );
assertThat( acquired1, instanceOf( DirectConnection.class ) ); assertSame( connection, ((DirectConnection) acquired1).connection() );
assertThat( actual.getCause(), equalTo( error ) );
assertThat(value1.asInt(), equalTo(Integer.MIN_VALUE));
assertEquals( reason, terminationReason( channel ) );
assertEquals( error, e );
assertTrue( isFatal( new ClientException( "Neo.DatabaseError.Schema.ConstraintCreationFailed", "" ) ) );
assertEquals( "Error", error.getMessage() );
assertFalse( summary.hasPlan() ); assertNull( summary.plan() );
assertThat( firstValue, equalTo( secondValue ) );
assertThat( value.asDouble(), equalTo( 6.28 ) );
assertNotNull( channel.pipeline().get( SslHandler.class ) );
assertEquals( error, Futures.asCompletionException( error ) );
assertThat( error.getMessage(), startsWith( "Connection to the database terminated" ) );
assertEquals( error2, combined.getCause() );
assertEquals( 424242L, extractedResultAvailableAfter );
assertEquals( 1, messageCaptor.getAllValues().size() ); assertThat( loggedMessage, containsString( "Neo4j Session object leaked" ) ); assertThat( loggedMessage, containsString( "Session was create at" ) ); assertThat( loggedMessage, containsString( getClass().getSimpleName() + "." + testInfo.getTestMethod().get().getName() ) );
assertEquals( 0, queue.size() ); assertTrue( queue.isEmpty() ); assertNull( queue.peek() ); assertNull( queue.poll() );
assertEquals( error, e ); assertEquals( 0, eventExecutor.scheduleDelays().size() );
assertTrue( isFatal( new ClientException( "Neo.ClientError.Request.Invalid", "Illegal request" ) ) ); assertTrue( isFatal( new ClientException( "Neo.ClientError.Request.InvalidFormat", "Wrong format" ) ) ); assertTrue( isFatal( new ClientException( "Neo.ClientError.Request.TransactionRequired", "No tx!" ) ) );
assertNotNull( connection ); assertEquals( B, connection.serverAddress() ); assertArrayEquals( new BoltServerAddress[]{B}, routingTable.readers().toArray() );
assertThat( segments, equalTo( Arrays.asList( (Relationship) new InternalRelationship( -1, 1, 2, "KNOWS" ), new InternalRelationship( -2, 3, 2, "KNOWS" ), new InternalRelationship( -3, 3, 4, "KNOWS" ) ) ) );
assertThat( error.getMessage(), containsString( "unparsable record received." ) );
assertThat( servers, containsInAnyOrder( A, B, C, D, E, F ) );
assertEquals( dateTime, dateTimeValue.asZonedDateTime() );
assertEquals( error, e ); assertEquals( 2, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() );
assertThat( result.keys(), equalTo( asList( "k1", "k2" ) ) );
assertTrue( scanner.hasNextLine() ); assertTrue( scanner.nextLine().contains( "Meow" ) ); assertTrue( scanner.hasNextLine() ); assertTrue( scanner.nextLine().contains( "Wow" ) ); assertFalse( scanner.hasNextLine() );
assertThat( record.get( "k1" ), equalTo( value( 0 ) ) ); assertThat( record.get( "k2" ), equalTo( value( 1 ) ) ); assertThat( record.get( "k3" ), equalTo( NullValue.NULL ) );
assertThat( session.lastBookmark(), equalTo( InternalBookmark.parse( "X" ) ) );
assertThat( record.toString(), equalTo( "Record<{k1: 0, k2: 1}>" ) );
assertThat( await( healthy ), is( false ) );
assertThat( channel.outboundMessages(), hasSize( 1 ) ); assertThat( channel.outboundMessages().poll(), instanceOf( HelloMessage.class ) ); assertEquals( 1, messageDispatcher.queuedHandlersCount() ); assertFalse( promise.isDone() ); assertTrue( promise.isDone() ); assertFalse( promise.isSuccess() );
assertThat( map.size(), equalTo( 3 ) ); assertThat( map.get( "scheme" ), equalTo( (Value) new StringValue( "kerberos" ) ) ); assertThat( map.get( "principal" ), equalTo( (Value) new StringValue( "" ) ) ); assertThat( map.get( "credentials" ), equalTo( (Value) new StringValue( "base64" ) ) );
assertEquals( 4L, version.toInt() );
assertThat( value.hashCode(), notNullValue() );
assertTrue( channelPromise.isSuccess() ); assertEquals( anyServerVersion(), serverVersion( channel ) );
assertEquals( error, receivedError );
assertNotNull( Iterables.newLinkedHashMapWithSize( 42 ) );
assertThat( appendedKeys, equalTo( keys ) );
assertNull( error );
assertNotNull( sslHandler ); assertEquals( timeoutMillis, sslHandler.getHandshakeTimeoutMillis() );
assertFalse( composition.hasRoutersAndReaders() );
assertEquals( address, strategy.selectReader( new BoltServerAddress[]{address} ) );
assertTrue( cursorFuture.isDone() ); assertThat( actualError.getCause(), equalTo( error ) );
assertEquals( "[0x6060b017, 516, 260, 4, 3]", handshakeString() );
assertEquals( keys, extracted.keys() ); assertEquals( keyIndex, extracted.keyIndex() );
assertEquals( result, await( retryLogic.retryAsync( workMock ) ) ); assertEquals( 1, scheduleDelays.size() ); assertEquals( 23, scheduleDelays.get( 0 ).intValue() );
assertTrue( record.containsKey( "k1" ) ); assertTrue( record.containsKey( "k2" ) ); assertFalse( record.containsKey( "k3" ) );
assertFalse( channelPromise.isSuccess() ); assertTrue( channel.closeFuture().isDone() );
assertThat( firstValue, equalTo( secondValue ) );
assertEquals( InternalBookmark.parse( bookmarkString ), await( future ) );
assertTrue( response.isSuccess() );
assertEquals( LocalDateTime.of( 1990, 2, 3, 0, 0, 3, 4 ), result );
assertEquals( cause, error );
assertEquals( "Done", result );
assertThat( appendedValues, equalTo( Arrays.asList( values ) ) );
assertEquals( 0, tracker.inUseChannelCount( address ) );
assertThat( writer, instanceOf( MessageWriterV4.class ) );
assertThat( value.asString(), equalTo( "Spongebob" ) );
assertTrue( routingTable.isStaleFor( READ ) ); assertTrue( routingTable.isStaleFor( WRITE ) );
assertNull( await( stage ) );
assertFalse( channelPromise.isSuccess() ); assertTrue( channel.closeFuture().isDone() );
assertEquals( address, provider.getAddress() );
assertThat( actual.getCause(), equalTo( error ) );
assertThat( error, instanceOf( TransientException.class ) ); assertEquals( code, error.code() ); assertEquals( message, error.getMessage() );
assertEquals( 42, summary.resultConsumedAfter( TimeUnit.SECONDS ) ); assertEquals( value, summary.resultConsumedAfter( TimeUnit.MILLISECONDS ) );
assertEquals( error, e );
assertEquals( "[0x" + channel.id() + "][][] Hello!", reformatted );
assertEquals( error, e );
assertThat( map.keySet(), containsInAnyOrder( "k1", "k2" ) ); assertThat( map.get( "k1" ), equalTo( 0L ) ); assertThat( map.get( "k2" ), equalTo( 1L ) );
assertThat( asyncSession.lastBookmark(), equalTo( session.lastBookmark() ));
assertThat( map.keySet(), contains( "k2", "k1" ) ); assertThat( values.next(), equalTo( 1 ) ); assertThat( values.next(), equalTo( 2 ) );
assertEquals( "[0x" + channel.id() + "][somewhere:1234][] Hello!", reformatted );
assertEquals( "MyAwesomeDatabase", db.name() );
assertEquals( -1, extractedResultAvailableAfter );
assertThat( appendedValues, equalTo( Arrays.asList( values ) ) );
assertThat( provider, is( METRICS_DISABLED_PROVIDER ) );
assertThat( record.size(), equalTo( 2 ) );
assertThat( acquired1, instanceOf( DirectConnection.class ) ); assertSame( connection1, ((DirectConnection) acquired1).connection() ); assertThat( acquired2, instanceOf( DirectConnection.class ) ); assertSame( connection2, ((DirectConnection) acquired2).connection() );
assertTrue( channelPromise.isSuccess() ); assertEquals( ServerVersion.v4_1_0, serverVersion( channel ) );
assertEquals( LOCAL_DEFAULT, serverAddress( channel ) ); assertEquals( 42L, creationTimestamp( channel ) ); assertNotNull( messageDispatcher( channel ) );
assertEquals( error, e );
assertEquals( InternalTypeSystem.TYPE_SYSTEM.LOCAL_DATE_TIME(), dateTimeValue.type() );
assertThat( firstValue, equalTo( secondValue ) );
assertFalse( isFatal( new AuthenticationException( "Neo.ClientError.Security.Unauthorized", "" ) ) );
assertThat( segments, equalTo( Arrays.asList( (Node) new InternalNode( 1 ), new InternalNode( 2 ), new InternalNode( 3 ), new InternalNode( 4 ) ) ) );
assertTrue( channelCloseFuture.isSuccess() ); assertTrue( channelPromise.isDone() ); assertEquals( error, channelPromise.cause() );
assertThat( session.lastBookmark(), instanceOf( InternalBookmark.class ) ); assertTrue( bookmark.isEmpty() );
assertThat( provider.isMetricsEnabled(), is( true ) ); assertThat( provider instanceof InternalMetricsProvider, is( true ) );
assertEquals( 2, channel.outboundMessages().size() ); assertEquals( PULL_ALL, channel.outboundMessages().poll() ); assertEquals( RESET, channel.outboundMessages().poll() );
assertNull( await( future ) );
assertEquals( result, await( retryLogic.retryAsync( workMock ) ) ); assertEquals( 1, scheduleDelays.size() ); assertEquals( 4242, scheduleDelays.get( 0 ).intValue() );
assertEquals( "Fatal rx", error.getMessage() );
assertNull( Slf4jLogging.checkAvailability() );
assertThat( message.toString(), not( containsString( "SecretPassword" ) ) );
assertEquals( NioSocketChannel.class, EventLoopGroupFactory.channelClass() );
assertEquals( result, await( future ) );
assertEquals( 1, channel.outboundMessages().size() ); assertEquals( RESET, channel.outboundMessages().poll() ); assertEquals( releaseStage1, releaseStage2 ); assertEquals( releaseStage2, releaseStage3 );
assertEquals( 12345 + 100_000, cluster.expirationTimestamp() ); assertEquals( serverSet( "one:1337", "two:1337" ), cluster.readers() ); assertEquals( serverSet( "one:1337" ), cluster.writers() ); assertEquals( serverSet( "one:1337", "two:1337" ), cluster.routers() );
assertEquals( error, e ); assertEquals( 2, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() ); assertThat( executionCount.get(), equalTo( 3 ) );
assertTrue( channelCloseFuture.isSuccess() ); assertTrue( channelPromise.isDone() ); assertEquals( error, channelPromise.cause() );
assertEquals( error, e );
assertEquals( "Scheme can\'t be null", e.getMessage() );
assertThat( error.getMessage(), containsString( "no router or reader found in response." ) );
assertEquals( "Meeh", exception.getMessage() );
assertEquals( 42, summary.resultAvailableAfter( TimeUnit.SECONDS ) ); assertEquals( value, summary.resultAvailableAfter( TimeUnit.MILLISECONDS ) );
assertThat( error.getMessage(), containsString( "records received \'0\' is too few or too many." ) );
assertFalse( future.isDone() ); assertTrue( future.isDone() ); assertNull( future.get() );
assertEquals( "Ticket can\'t be null", e.getMessage() );
assertEquals( error, e );
assertThat( firstValue, equalTo( secondValue ) );
assertTrue( channelPromise.isSuccess() ); assertEquals( "bolt-42", connectionId( channel ) );
assertThat( e.getCause(), is( blockingOperationInEventLoopError() ) );
assertEquals( 0, channel.outboundMessages().size() ); assertEquals( 1, channel.outboundMessages().size() ); assertEquals( PULL_ALL, single( channel.outboundMessages() ) );
assertThat( value.type(), equalTo( InternalTypeSystem.TYPE_SYSTEM.BYTES() ) );
assertFalse( future.isDone() ); assertTrue( future.isDone() ); assertFalse( future.isCompletedExceptionally() ); assertEquals( "Hello", future.get() );
assertThat( readSession, instanceOf( LeakLoggingNetworkSession.class ) ); assertThat( writeSession, instanceOf( LeakLoggingNetworkSession.class ) );
assertFalse( response.isSuccess() );
assertThat( error, instanceOf( DatabaseException.class ) ); assertEquals( code, error.code() ); assertEquals( message, error.getMessage() );
assertEquals( "Done", result );
assertEquals( 3, map.size() ); assertEquals( "scheme", map.get( "scheme" ).asString() ); assertEquals( "principal", map.get( "principal" ).asString() ); assertEquals( "credentials", map.get( "credentials" ).asString() );
assertEquals( localDate, dateValue.asLocalDate() );
assertEquals( address3, strategy.selectReader( new BoltServerAddress[]{address1, address2, address3} ) );
assertEquals( error, e );
assertEquals( "Hello", Futures.blockingGet( future, interruptHandler ) ); assertTrue( Thread.currentThread().isInterrupted() );
assertThat( e.getMessage(), startsWith( "Database name parameter for selecting database is not supported" ) );
assertThat( map.size(), equalTo( 4 ) ); assertThat( map.get( "scheme" ), equalTo( (Value) new StringValue( "my_scheme" ) ) ); assertThat( map.get( "principal" ), equalTo( (Value) new StringValue( "foo" ) ) ); assertThat( map.get( "credentials" ), equalTo( (Value) new StringValue( "bar" ) ) ); assertThat( map.get( "realm" ), equalTo( (Value) new StringValue( "baz" ) ) );
assertTrue( channel.isActive() ); assertFalse( channel.isActive() );
assertTrue( TRUE.asBoolean()); assertFalse( BooleanValue.FALSE.asBoolean()); assertThat( TRUE.asObject(), equalTo( (Object) Boolean.TRUE )); assertThat( FALSE.asObject(), equalTo( (Object) Boolean.FALSE ));
assertFalse(map.isNull());
assertNotNull( channel.pipeline().get( HandshakeHandler.class ) ); assertTrue( channel.finish() ); assertEquals( handshakeBuf(), channel.readOutbound() );
assertEquals( error, e ); assertEquals( 0, e.getSuppressed().length ); assertEquals( 2, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() );
assertEquals( error, Futures.completionExceptionCause( error ) );
assertEquals( ServerVersion.v3_5_0, version );
assertThat( writer, instanceOf( MessageWriterV3.class ) );
assertEquals( error, completionException.getCause() );
assertTrue( NullValue.NULL.isNull() );
assertFalse( composition.hasRoutersAndReaders() );
assertFalse( routingTable.hasBeenStaleFor( Duration.ofSeconds( 30 ).toMillis() ) );
assertThat( channel.outboundMessages(), hasSize( 1 ) ); assertThat( channel.outboundMessages().poll(), instanceOf( GoodbyeMessage.class ) ); assertEquals( 1, messageDispatcher.queuedHandlersCount() );
assertEquals( 3, map.size() ); assertEquals( "basic", map.get( "scheme" ).asString() ); assertEquals( "username", map.get( "principal" ).asString() ); assertEquals( "password", map.get( "credentials" ).asString() );
assertEquals( error4, e ); assertEquals( 3, suppressed.length ); assertEquals( error1, suppressed[0] ); assertEquals( error2, suppressed[1] ); assertEquals( error3, suppressed[2] ); assertEquals( 3, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() ); assertEquals( initialDelay * multiplier * multiplier, scheduleDelays.get( 2 ).intValue() );
assertTrue( routingTable.hasBeenStaleFor( 0 ) );
assertEquals( duration1, duration2 ); assertEquals( duration1.hashCode(), duration2.hashCode() );
assertThat( path.length(), equalTo( 0 ) );
assertEquals( asList( MONTHS, DAYS, SECONDS, NANOS ), duration.getUnits() );
assertEquals( 0, addresses.length );
assertThat( e.getMessage(), containsString( "Connection breaks during cypher execution" ) );
assertEquals( duration, durationValue.asIsoDuration() );
assertNull( db.name() );
assertNull( strategy.selectWriter( new BoltServerAddress[0] ) );
assertEquals( "Session no longer valid", error.getMessage() );
assertFalse( channelPromise.isSuccess() ); assertTrue( channel.closeFuture().isDone() );
assertEquals( error, e );
assertEquals( cause, error.getCause() );
assertEquals( "server:42", summary.server().address() ); assertEquals( "Neo4j/4.0.0", summary.server().version() );
assertThat( channel.outboundMessages().size(), equalTo( 1 ) ); assertThat( channel.outboundMessages(), hasItem( GoodbyeMessage.GOODBYE ) ); assertThat( anotherChannel.outboundMessages().size(), equalTo( 1 ) ); assertThat( anotherChannel.outboundMessages(), hasItem( GoodbyeMessage.GOODBYE ) );
assertTrue( composition.hasWriters() );
assertEquals( result, await( single ) ); assertEquals( delaysWithoutJitter( initialDelay, multiplier, retries ), eventExecutor.scheduleDelays() );
assertEquals( InternalTypeSystem.TYPE_SYSTEM.DATE(), dateValue.type() );
assertThat( value.hashCode(), notNullValue() );
assertEquals( error, e ); assertEquals( 0, eventExecutor.scheduleDelays().size() );
assertFalse( future.isDone() ); assertTrue( future.isCancelled() ); assertTrue( future.isCompletedExceptionally() );
assertEquals( expected, actual );
assertTrue( future.isCompletedExceptionally() ); assertEquals( error, e.getCause() );
assertThat( records, equalTo( asList( "v1-1", "v1-2" ) ) );
assertThat( protocol.createMessageFormat(), instanceOf( expectedMessageFormatType() ) );
assertThat( error.getMessage(), startsWith( "Connection to the database terminated" ) );
assertEquals( 0, composition.routers().size() );
assertFalse( channelPromise.isSuccess() ); assertTrue( channel.closeFuture().isDone() );
assertEquals( "Hello", Futures.getNow( future ) );
assertThat( error1.getMessage(), startsWith( "Failed to obtain connection towards READ server" ) ); assertThat( error2.getMessage(), startsWith( "Failed to obtain connection towards WRITE server" ) );
assertEquals( delaysWithoutJitter( initialDelay, multiplier, retries ), sleepValues( clock, retries ) );
assertEquals( result, await( future ) ); assertEquals( delaysWithoutJitter( initialDelay, multiplier, retries ), eventExecutor.scheduleDelays() );
assertEquals( -1, index );
assertEquals( ServerVersion.v4_0_0, ServerVersion.fromBoltProtocolVersion( BoltProtocolV4.VERSION ) ); assertEquals( ServerVersion.v4_1_0, ServerVersion.fromBoltProtocolVersion( BoltProtocolV41.VERSION ) ); assertEquals( ServerVersion.v4_2_0, ServerVersion.fromBoltProtocolVersion( BoltProtocolV42.VERSION ) ); assertEquals( ServerVersion.vInDev, ServerVersion.fromBoltProtocolVersion( new BoltProtocolVersion( MAX_VALUE, MAX_VALUE ) ) );
assertEquals( address3, strategy.selectWriter( new BoltServerAddress[]{address1, address2, address3, address4} ) );
assertEquals( config1, config2 );
assertThat( value.asObject(), equalTo( TEST_BYTES ) );
assertThat( resolved.size(), equalTo( 1 ) ); assertThat( resolved.iterator().next(), is( address ) );
assertThat( ServerVersion.version( "Neo4j/dev" ), is( ServerVersion.vInDev ) ); assertThat( ServerVersion.version( "Neo4j/4.0.0" ), is( ServerVersion.v4_0_0 ) );
assertTrue( connection.isOpen() );
assertTrue( promise.isSuccess() ); assertTrue( promise.getNow() );
assertEquals( "Hello", Futures.blockingGet( future ) ); assertTrue( Thread.currentThread().isInterrupted() );
assertEquals( EMPTY_STATS, summary.counters() );
assertThat( value.type(), equalTo( InternalTypeSystem.TYPE_SYSTEM.STRING() ) );
assertEquals( InternalTypeSystem.TYPE_SYSTEM.DURATION(), durationValue.type() );
assertTrue( RoutingContext.EMPTY.toMap().isEmpty() );
assertFalse( composition.hasWriters() );
assertEquals( 260L, version.toInt() );
assertEquals( dateTime, dateTimeValue.asLocalDateTime() );
assertThat( record.index( "k1" ), equalTo( 0 ) ); assertThat( record.index( "k2" ), equalTo( 1 ) );
assertTrue(EntityUtil.areEqualByIdAndType(entityModelOne, entityModelTwo)); assertTrue(EntityUtil.areEqualByIdAndType(entityModelOne, entityModelTwo)); assertTrue(EntityUtil.areEqualByIdAndType(entityModelOne, entityModelTwo)); assertFalse(EntityUtil.areEqualByIdAndType(entityModelOne, entityModelTwo)); assertFalse(EntityUtil.areEqualByIdAndType(entityModelOne, entityModelTwo));
assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertTrue(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertTrue(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo)); assertFalse(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertTrue(EntityUtil.areEqualByContent(entityModelOne, entityModelTwo)); assertFalse(EntityUtil.areEqualByContent(entityModelOne, entityModelTwo)); assertTrue(EntityUtil.areEqualByContent(entityModelOne, entityModelTwo));
assertTrue(EntityUtil.areFieldModelsEqualByContent(fieldModelOne, fieldModelTwo));
assertThat(exist).isTrue();
assertThat(exist).isTrue();
assertThat(adBonds).hasSize(2); assertThat(adBond1.getCustomer().getCustomerNo()).isEqualTo(expectedNo); assertThat(adBond2.getCustomer().getCustomerNo()).isEqualTo(expectedNo); assertThat(adBond1.getCustomer().getShop().getShopNo()).isEqualTo(expectedNo); assertThat(adBond2.getCustomer().getShop().getShopNo()).isEqualTo(expectedNo);
assertThat(adBonds).hasSize(2); assertThat(adBonds.get(0).getCustomer().getCustomerNo()).isEqualTo(expectedNo); assertThat(adBonds.get(1).getCustomer().getCustomerNo()).isEqualTo(expectedNo);
assertTrue(num.contentEquals(x)); assertTrue("0811.3701".contentEquals(x));
assertEquals("/api/foo/1", this.ctx.get(REQUEST_URI_KEY)); assertTrue(this.ctx.sendZuulResponse());
assertEquals(app.getId(), saved.getId());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertEquals(new HashMap<String, String>(), requestMock.header().getAll());
assertThat(errors, contains(hasProperty("attribute", is("name"))));
assertEquals(saved, middleware); assertEquals(Status.ACTIVE, saved.getStatus()); assertEquals(1, middlewareMap.get(Status.INACTIVE).size()); assertNull(middlewareMap.get(Status.DEPRECATED));
assertNotNull(request.getBody()); assertNotNull(request.getUri()); assertNotNull(request.getHeaders()); assertNull(request.getHeaders().get("simpleHeader")); assertNull(request.getHeaders().get("host")); assertNull(request.getHeaders().get("someOtherHeader"));
assertEquals(1L, apiPageResp.getTotalElements());
assertEquals(logTraces.get(0).getTrace(), logTraceDTOPage.getContent().get(0).getTrace());
assertEquals(savedAt.getCode(), persist.getCode());
assertNotNull(plansResp);
assertEquals(app.getId(), saved.getId());
assertNotNull(response.getBody()); assertNotNull(response.getUri()); assertNotNull(response.getHeaders()); assertNull(response.getHeaders().get("simpleHeader")); assertNull(response.getHeaders().get("host"));
assertEquals(apis.size(), listApiResp.size());
assertEquals(saved.getId(), operation.getId());
assertEquals(scope.getName(), updated.getName());
assertEquals(developer, saved);
assertEquals(HttpStatus.UNAUTHORIZED.value(), this.ctx.getResponseStatusCode()); assertTrue((Boolean) this.ctx.get(INTERRUPT)); assertFalse(ctx.sendZuulResponse());
assertEquals(saved.getId(), resource.getId());
assertTrue(saved.equals(middleware));
assertEquals(m1, middleware);
assertEquals(developer, found);
assertEquals(1L, planPageResp.getTotalElements());
assertEquals(scope, scopeActual);
assertNotNull(parse); assertEquals("<Variable><id>20</id><key>Name</key><value>valueName</value><environment/></Variable>", parse);
assertEquals(1L, providerPageResp.getTotalElements());
assertNull(response.getBody()); assertNotNull(response.getUri()); assertNotNull(response.getHeaders());
assertEquals(accessTokenResp.getId(), provider.getId());
assertEquals(environments.size(), environmentResp.size());
assertEquals(1L, planPageResp.getTotalElements());
assertEquals(saved.getId(), operation.getId());
assertEquals(saved.getId(), environment.getId());
assertNotNull(request.getBody()); assertNotNull(request.getUri()); assertNotNull(request.getHeaders()); assertNull(request.getHeaders().get("simpleHeader")); assertNull(request.getHeaders().get("host"));
assertEquals(recoverAt.getId(), saved.getId());
assertNotNull(request.getBody()); assertNotNull(request.getUri()); assertNull(request.getHeaders());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertNull(response.getBody()); assertNull(response.getUri()); assertNull(response.getHeaders());
assertEquals(accessTokenResp.getId(), recoverAt.getId());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertEquals(apps.size(), listAppResp.size());
assertEquals(developers, developersResult);
assertEquals(true, belongsToBlackList);
assertThat(person, hasProperty("name", is("Getu"))); assertThat(person, hasProperty("age", is(20))); assertThat(person, hasProperty("socialMedia", is(3))); assertThat(person, hasProperty("birth", is(yesterday))); assertThat(person, hasProperty("email", is("heimdall@heimdall.com")));
assertEquals(opearationResp.getId(), operation.getId());
assertNotNull(request.getBody()); assertNull(request.getUri()); assertNotNull(request.getHeaders());
assertEquals(m1, middleware);
assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), this.ctx.getResponseStatusCode());
assertEquals(new HashMap<String, String>(), requestMock.query().getAll());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertNull(logged);
assertEquals(scope, scopeActual);
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertEquals(logTrace.getTrace(), actual.getTrace());
assertEquals(saved, middleware); assertEquals(Status.ACTIVE, saved.getStatus()); assertEquals(1, middlewareMap.get(Status.INACTIVE).size()); assertEquals(4, middlewareMap.get(Status.DEPRECATED).size()); assertNotNull(m2.getFile()); assertNotNull(m3.getFile()); assertNotNull(m4.getFile()); assertNotNull(m5.getFile());
assertEquals(saved.getId(), operation.getId());
assertEquals(res.getName(), resource.getName()); assertNotEquals(api.getId(), resource.getApi().getId());
assertEquals(1L, operationPageResp.getTotalElements());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertThat(errors, contains(hasProperty("attribute", is("email"))));
assertEquals(appResp.getId(), app.getId());
assertEquals(resourceResp.getId(), resource.getId());
assertNotNull(provider.getId());
assertEquals("testName", requestMock.getAppName());
assertEquals(saved, middleware); assertEquals(Status.ACTIVE, saved.getStatus()); assertEquals(1, middlewareMap.get(Status.INACTIVE).size()); assertNull(middlewareMap.get(Status.DEPRECATED));
assertEquals(developers, content);
assertEquals(false, belongsToBlackList);
assertEquals(HttpStatus.UNAUTHORIZED.value(), this.ctx.getResponseStatusCode()); assertTrue((Boolean) this.ctx.get(INTERRUPT)); assertFalse(ctx.sendZuulResponse());
assertEquals(resources.size(), environmentResp.size());
assertEquals(saved, middleware); assertEquals(Status.ACTIVE, saved.getStatus()); assertEquals(3, middlewareMap.get(Status.INACTIVE).size()); assertEquals(2, middlewareMap.get(Status.DEPRECATED).size());
assertEquals("www.google.com", requestMock.getUrl());
assertNotNull(response.getBody()); assertNull(response.getUri()); assertNotNull(response.getHeaders());
assertEquals(false, belongsToBlackList);
assertNotNull(pathSwagger); assertEquals(api.getBasePath(), basePath); assertEquals(api.getEnvironments().get(0).getInboundURL(), host); assertEquals(tagName, resource.getName()); assertTrue(get.getTags().contains(tagName));
assertEquals(middleware, updated);
assertTrue(saved.equals(middleware)); assertEquals(Status.ACTIVE, saved.getStatus()); assertEquals(3, middlewareMap.get(Status.INACTIVE).size()); assertEquals(2, middlewareMap.get(Status.DEPRECATED).size());
assertEquals(1L, resourcePageResp.getTotalElements());
assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), this.ctx.getResponseStatusCode());
assertNull(request.getBody()); assertNotNull(request.getUri()); assertNotNull(request.getHeaders());
assertEquals(apiResp.getId(), api.getId());
assertEquals(HttpStatus.UNAUTHORIZED.value(), this.ctx.getResponseStatusCode()); assertTrue((Boolean) this.ctx.get(INTERRUPT)); assertFalse(ctx.sendZuulResponse());
assertThat(errors, contains(hasProperty("message", is("You have to have at least 2 social medias"))));
assertEquals(app.getId(), saved.getId());
assertEquals(operations.size(), operationsResp.size());
assertEquals(HttpStatus.OK.value(), context.getResponseStatusCode()); assertEquals(Constants.SUCCESS, filterDetail.getStatus());
assertThat(errors, contains(hasProperty("attribute", is("birth"))));
assertNull(request.getBody()); assertNull(request.getUri()); assertNull(request.getHeaders());
assertEquals(HttpStatus.UNAUTHORIZED.value(), this.ctx.getResponseStatusCode()); assertTrue((Boolean) this.ctx.get(INTERRUPT)); assertFalse(ctx.sendZuulResponse());
assertEquals(tokens.size(), tokensResp.size());
assertEquals(app.getId(), saved.getId());
assertEquals(HttpStatus.UNAUTHORIZED.value(), this.ctx.getResponseStatusCode()); assertTrue((Boolean) this.ctx.get(INTERRUPT)); assertFalse(ctx.sendZuulResponse());
assertThat(errors, contains(hasProperty("message", is("You have to be older than 18 to drive in Brasil"))));
assertEquals(1L, apiPageResp.getTotalElements());
assertEquals(1L, environmentPageResp.getTotalElements());
assertFalse(this.ctx.sendZuulResponse()); assertEquals(HttpStatus.METHOD_NOT_ALLOWED.value(), this.ctx.getResponseStatusCode()); assertEquals(HttpStatus.METHOD_NOT_ALLOWED.getReasonPhrase(), this.ctx.getResponseBody());
assertEquals(plans.size(), planResp.size());
assertNotNull(response.getBody()); assertNotNull(response.getUri()); assertNotNull(response.getHeaders()); assertNull(response.getHeaders().get("simpleHeader")); assertNull(response.getHeaders().get("host")); assertNull(response.getHeaders().get("someOtherHeader"));
assertEquals(planResp.getId(), plan.getId());
assertEquals("testBody", requestMock.getBody());
assertNotNull(result);
assertEquals(middlewareList, middlewareListActual);
assertEquals(middlewareList, middlewarePage.getContent());
assertEquals(developer, logged);
assertEquals(environmentResp.getId(), environment.getId());
assertTrue(bcrypt.matches(userDTO.getPassword(), hashPassword)); assertFalse(bcrypt.matches("654321", hashPassword));
assertEquals(saved.getId(), resource.getId());
assertEquals(listProviders.size(), listProvidersResp.size());
assertNull(requestMock.pathParam("testPath"));
assertNotNull(response.getBody()); assertNotNull(response.getUri()); assertNull(response.getHeaders());
assertEquals(scope, scopeSaved);
assertEquals(scopesExpected, listScopes);
assertNotNull(variable); assertEquals(new Long(20), variable.getId());
assertEquals(NUM, value);
assertEquals(1, values.size());
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext());
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext()); assertEquals("two", it.next()); assertEquals(true, it.hasNext()); assertEquals("three", it.next()); assertEquals(false, it.hasNext());
assertEquals(MalformedInputException.class, e.getCause().getClass());
assertTrue(impl instanceof RxJavaObservableExecutionHookTestImpl);
assertEquals("one", observable.first());
assertTrue(impl instanceof RxJavaErrorHandlerTestImpl);
assertEquals("one", f.get());
assertNotNull(w.e); assertEquals(2, ((CompositeException) w.e).getExceptions().size());
assertTrue(it.hasNext()); assertEquals("one", it.next());
assertEquals(TestException.class, e.getCause().getClass());
assertEquals("\\uFFFD", out);
assertTrue(impl instanceof RxJavaObservableExecutionHookDefault);
assertEquals(count.incrementAndGet() * _multiple, t1.intValue()); assertTrue(Thread.currentThread().getName().startsWith("RxComputationThreadPool"));
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue("a and b should be different", a != b); assertTrue(it.hasNext()); assertTrue("c should not just be the next in sequence", c != (b + 1)); assertTrue("expected that c [" + c + "] is higher than or equal to " + COUNT, c >= COUNT); assertTrue(it.hasNext()); assertTrue(d > c); assertFalse(it.hasNext());
assertEquals(3, m.toList().toBlockingObservable().toFuture().get().size()); assertEquals(3, m.toList().toBlockingObservable().toFuture().get().size());
assertEquals(2, windows.size()); assertEquals(list("one", "two", "three"), windows.get(0)); assertEquals(list("four", "five"), windows.get(1));
assertEquals("one", f.get().get(0)); assertEquals("two", f.get().get(1)); assertEquals("three", f.get().get(2));
assertTrue(iter.hasNext());
assertEquals(count.incrementAndGet() * _multiple, t1.intValue()); assertTrue(Thread.currentThread().getName().startsWith("RxComputationThreadPool"));
assertTrue(iter.hasNext());
assertEquals("one", it.next()); assertEquals("two", it.next());
assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);
assertTrue(impl instanceof RxJavaErrorHandlerDefault);
assertTrue(SwingUtilities.isEventDispatchThread()); assertTrue(SwingUtilities.isEventDispatchThread()); assertTrue(SwingUtilities.isEventDispatchThread());
assertEquals(3, threads.keySet().size());
assertTrue(iter.hasNext());
assertEquals(IOException.class, e.getCause().getClass());
assertFalse(action.fail);
assertEquals(4, fourList.size()); assertEquals(3, threeList.size()); assertEquals(2, twoList.size());
assertNotNull(capturedException.get());
assertEquals(Arrays.asList(10, 11, 12, 13, 14), toList(Range.createWithCount(10, 5)));
assertEquals("one", f.get());
assertEquals(Arrays.asList(1, 2, 3, 4, 5), toList(Range.createWithCount(1, 5)));
assertEquals("one", observable.firstOrDefault("default"));
assertEquals(Arrays.asList(1, 2, 3, 4), toList(Range.create(1, 5)));
assertNotNull(capturedException.get());
assertFalse(Observer.onError); assertTrue(Observer.onCompleted); assertEquals(3, Observer.notifications.size()); assertEquals("one", Observer.notifications.get(0).getValue()); assertTrue(Observer.notifications.get(0).isOnNext()); assertEquals("two", Observer.notifications.get(1).getValue()); assertTrue(Observer.notifications.get(1).isOnNext()); assertEquals(NullPointerException.class, Observer.notifications.get(2).getThrowable().getClass()); assertTrue(Observer.notifications.get(2).isOnError());
assertEquals("\\uFFFDA", out);
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext()); assertEquals("two", it.next()); assertEquals(true, it.hasNext()); assertEquals("three", it.next()); assertEquals(false, it.hasNext());
assertEquals(1, lists.size()); assertEquals(lists.get(0), list("one", "two")); assertEquals(2, lists.size()); assertEquals(lists.get(1), list("three", "four")); assertEquals(3, lists.size()); assertEquals(lists.get(2), list("five"));
assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertEquals(2, windows.size()); assertEquals(list("one", "two", "three"), windows.get(0)); assertEquals(list("four", "five"), windows.get(1));
assertEquals(3, threads.keySet().size());
assertEquals("\\u00A1", out);
assertEquals(n / 3, values.size());
assertEquals(parentThreadName, threadName); assertTrue(correctThreadName);
assertTrue(tA.unsubscribed); assertTrue(tB.unsubscribed);
assertNotNull(receivedException.get());
assertEquals(Arrays.asList(1, 3, 5, 7, 9), toList(Range.createWithStep(1, 10, 2)));
assertEquals(n / 3, values.size());
assertTrue(it.hasNext()); assertEquals("default", it.next()); assertEquals("default", it.next()); assertTrue(it.hasNext());
assertEquals("three", obs.last());
assertEquals(null, value); assertEquals(6, sum.get());
assertTrue(it.hasNext()); assertEquals("default", it.next()); assertEquals("default", it.next()); assertTrue(it.hasNext()); assertEquals("one", it.next()); assertEquals("one", it.next()); assertTrue(it.hasNext()); assertEquals("two", it.next()); assertEquals("two", it.next()); assertFalse(it.hasNext());
assertEquals(1, values.size());
assertEquals(Arrays.asList(0, 1, 2, 3), toList(Range.createWithCount(0, 4)));
assertEquals(0, last);
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertEquals("one", it.next());
assertEquals(count.incrementAndGet() * _multiple, t1.intValue()); assertTrue(Thread.currentThread().getName().startsWith("RxNewThreadScheduler"));
assertEquals(null, value); assertEquals(6, sum.get());
assertFalse(s1.isUnsubscribed()); assertFalse(s2.isUnsubscribed()); assertTrue(s1.isUnsubscribed()); assertTrue(s1.isUnsubscribed()); assertFalse(s.isUnsubscribed()); assertTrue(s3.isUnsubscribed()); assertTrue(s.isUnsubscribed());
assertEquals(0, sum.get());
assertEquals(2, windows.size()); assertEquals(list("one", "two"), windows.get(0)); assertEquals(list("four", "five"), windows.get(1));
assertEquals(0, sum.get());
assertEquals("one", v); assertEquals("one", v); assertEquals(1, counter.get());
assertArrayEquals( new byte[] { (byte) 0xc2, (byte) 0xa1 }, StringObservable.encode(Observable.just("\\u00A1"), "UTF-8").toBlockingObservable().single());
assertEquals(Arrays.asList(2, 3, 4, 5), toList(Range.createWithCount(2, 4)));
assertTrue(it.hasNext()); assertEquals("one", it.next()); assertTrue(it.hasNext()); assertEquals("two", it.next()); assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertEquals(3, lists.size()); assertEquals(lists.get(0), list("one", "two")); assertEquals(lists.get(1), list("three", "four")); assertEquals(lists.get(2), list("five"));
assertNotNull(receivedException.get());
assertEquals("one", Async.start(func).toBlockingObservable().single());
assertEquals(1, lists.size()); assertEquals(lists.get(0), list("one", "two", "three")); assertEquals(2, lists.size()); assertEquals(lists.get(1), list("four", "five"));
assertTrue(matcher.test("rue")); assertTrue(matcher.test("blue")); assertFalse(matcher.test("bluer"));
assertTrue(matcher.test("java.lang.String")); assertTrue(matcher.test("java.lang.Integer")); assertTrue(matcher.test("java.lang.reflect.Method")); assertFalse(matcher.test("java.util.List"));
assertTrue(matcher.test("foo")); assertTrue(matcher.test("boo")); assertFalse(matcher.test("waterloo"));
assertFalse(this.bootstrapClassPredicate.test(this.getClass().getName())); assertFalse(this.bootstrapClassPredicate.test("com.linkedin.cytodynamics.nucleus.BootstrapClassPredicate"));
assertTrue(chooserMappingFactory.get(IsolationLevel.NONE) instanceof NoneIsolationChooser); assertTrue(chooserMappingFactory.get(IsolationLevel.TRANSITIONAL) instanceof TransitionalIsolationChooser); assertTrue(chooserMappingFactory.get(IsolationLevel.FULL) instanceof FullIsolationChooser);
assertTrue(dotMatcher.test(".")); assertFalse(dotMatcher.test("a")); assertTrue(dotStarMatcher.test(".abcd")); assertFalse(dotStarMatcher.test("abcd"));
assertTrue(chooserMappingFactory.get(IsolationLevel.NONE) instanceof NoneIsolationListChooser); assertTrue(chooserMappingFactory.get(IsolationLevel.TRANSITIONAL) instanceof TransitionalIsolationListChooser); assertTrue(chooserMappingFactory.get(IsolationLevel.FULL) instanceof FullIsolationChooser);
assertTrue(this.bootstrapClassPredicate.test("java.lang.String")); assertTrue(this.bootstrapClassPredicate.test("java.lang.Object")); assertTrue(this.bootstrapClassPredicate.test("java.lang.System"));
assertEquals(2,res.size()); assertEquals(KEY1,info.title); assertEquals(VALUE1,info.value); assertEquals(KEY2,info.title); assertEquals(VALUE2,info.value);
assertNull(key);
assertTrue(samplingRate*maxSecond<=buf.getBufferLength());
assertEquals(1,res.size()); assertEquals(KEY1,info.title); assertEquals(VALUE1,info.value);
assertTrue(res.isEmpty());
assertEquals(samplingRate,buf.getSamplingRate());
assertNull(key);
assertEquals(1,res.size()); assertEquals(KEY1,info.title); assertEquals(VALUE1,info.value);
assertArrayEquals(parameters.getStringArray("test"), Parameters.DEFAULT_STRING_ARRAY); assertArrayEquals(parameters.getStringArray("test", null), null);
assertEquals(map.size(), 0); assertEquals(map2.size(), 1); assertEquals(map2.getString("name"), "value");
assertEquals(map.get("test"), parametersMap.get("test")); assertEquals(map.put("test", "abc"), parametersMap.put("test", "abc")); assertEquals(map.containsKey("test"), parametersMap2.containsKey("test")); assertEquals(map.size(), parametersMap2.size()); assertFalse(parametersMap2.isEmpty()); assertEquals(0, parametersMap2.size()); assertTrue(parametersMap2.isEmpty());
assertNotNull(map); assertNotNull(map.getParameters("parameters")); assertNotNull(map.getParameters("parameters").getParameters("parameters")); assertNotNull(map.getParameters("parameters").getParameters("parameters").getParameters("parameters"));
assertArrayEquals(parameters.getArray("test"), null); assertArrayEquals(parameters.getArray("test", new String[] { "test" }), new String[] { "test" }); assertArrayEquals(map.getArray("test1", new String[] { "test" }), new Object[] {"abc", "bcd"}); assertArrayEquals(map.getArray("test2", new String[] { "test" }), new String[] { "abc" });
assertEquals(parameters.getString("test"), Parameters.DEFAULT_STRING); assertEquals(parameters.getString("test", "abc"), "abc");
assertEquals(parameters.getDouble("test"), 0, 0.1); assertEquals(parameters.getDouble("test", 1), 1, 0.1);
assertEquals(parameters.getLong("test"), 0); assertEquals(parameters.getLong("test", 1), 1);
assertEquals(registry.lookup(SimpleJob.class, 10).code(), 10); assertEquals(registry.lookup(SimpleJob.class, 20).code(), 20);
assertEquals(DataUtil.toBoolean("toBoolean"), false); assertEquals(DataUtil.toBoolean("t"), true);
assertArrayEquals(parameters.getIntArray("test"), Parameters.DEFAULT_INT_ARRAY); assertArrayEquals(parameters.getIntArray("test", null), null);
assertEquals(bean.int1, 123); assertEquals(bean.int2, 2); assertEquals(bean.long1, 123); assertEquals(bean.long2, 2); assertEquals(bean.boolean1, true); assertEquals(bean.boolean2, true); assertEquals(bean.str1, "abc"); assertEquals(bean.str2, "str2"); assertEquals(bean.sampleEnum, SampleEnum.THREE); assertNotNull(bean.sampleService);
assertEquals("platform.raptor.trace.uri", propertyInjector.replaceName(parameters)); assertEquals("platform.smoke.trace.uri", propertyInjector.replaceName(parameters)); assertEquals("smoke", propertyInjector.replaceName(parameters));
assertEquals(parameters.getBoolean("test"), false); assertEquals(parameters.getBoolean("test", true), true);
assertEquals(map.size(), 0);
assertEquals("type", input.getJobType()); assertEquals("category", input.getJobGroup()); assertEquals("owner", input.getJobOwner()); assertEquals(10000, input.getStepInterval()); assertTrue(input.toJson().contains("\\"test\\":\\"abc\\""));
assertEquals(parameters.getInt("test"), 0); assertEquals(parameters.getInt("test", 1), 1);
assertNull(parameters.getStringList("test")); assertArrayEquals(map.getStringList("test1").toArray(), new String[] {"abc", "bcd"}); assertArrayEquals(map.getStringList("test2").toArray(), new String[] { "abc" });
assertEquals("{\\"name\\":\\"value\\"}", JsonUtil.writeValueAsString(parameters));
assertEquals(parameters.get("test"), null); assertEquals(parameters.get("test", 1), 1);
assertThat(SessionManager.createSecurityContextForSession(httpServletRequest), is(nullValue()));
assertThat(impl.getCurrentSessionId(), is(nullValue()));
assertThat(impl.startAppSession(principal), is(REFERENCE_SESSION_ID)); assertThat(securityContext.getAuthenticationScheme(), is(SessionManager.AUTHENTICATION_SCHEME_APPTOKEN)); assertThat(principal, is(notNullValue())); assertThat(principal.getName(), is(REFERENCE_PERSON_ID));
assertThat(impl.getCurrentSessionId(), is(REFERENCE_SESSION_ID));
assertThat(securityContext, is(notNullValue())); assertThat(securityContext, is(instanceOf(SecurityContextImpl.class))); assertThat(authenticationScheme, is(notNullValue())); assertThat(securityContext.getAuthenticationScheme(), is(SessionManager.AUTHENTICATION_SCHEME_USERNAME)); assertThat(userPrincipal, is(notNullValue())); assertThat(userPrincipal.getName(), is(REFERENCE_PERSON_ID));
assertThat(uriBuilder, is(notNullValue())); assertThat(uri, is(notNullValue())); assertThat(uri, is(referenceExternalBaseUri));
assertThat(SessionManager.createSecurityContextForSession(httpServletRequest), is(nullValue()));
assertThat(invokeGetHeader(impl, HEADER_TEST_NAME_X_TEST), is(testHeaderValue));
assertThat(impl.startWebSession(principal), is(REFERENCE_SESSION_ID)); assertThat(securityContext.getAuthenticationScheme(), is(SessionManager.AUTHENTICATION_SCHEME_USERNAME)); assertThat(principal, is(notNullValue())); assertThat(principal.getName(), is(REFERENCE_PERSON_ID));
assertSame(toTest, toTest.appendMethodsPath("a"));
assertSame(e, CRestException.handle(e));
assertNull(toTest.nullIfUnset(""));
assertEquals(mockOAuthToken, actual);
assertEquals(DATE_STR, toTest.write(DATE));
assertSame(toTest, toTest.setParamsListSeparator("-"));
assertSame(e, CRestException.handle(e));
assertEquals(UTF8, toTest.getCharset());
assertEquals(DATE_TX, toTest.match(Date.class)); assertEquals(BOOLEAN_TX, toTest.match(boolean.class)); assertEquals(BOOLEAN_TX, toTest.match(Boolean.class));
assertFalse(deserialize(toTest, "dffsf"));
assertSame(mockErrorHandler, actual.getErrorHandler());
assertNull(deserialize(toTest, null));
assertEquals(Object.class, toTest.getExpectedType());
assertSame(toTest, toTest.setMethodsErrorHandler(ErrorHandler.class));
assertEquals(2, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v%2012", actual.get(1).getValue());
assertEquals(Character.valueOf('\\0'), deserialize(toTest, null));
assertEquals(toSortOriginal, toSort); assertEquals(expected, actual);
assertSame(expected, CRest.oauth("a","b","c","d"));
assertEquals("a", toTest.nullIfUnset("a"));
assertSame(expected, actual);
assertEquals("aa", actual);
assertSame(expected, actual);
assertSame(expected, actual);
assertSame(e2, e.getCause());
assertEquals("hi", actual);
assertEquals(Float.valueOf(0), deserialize(toTest, null));
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011--v%2012", actual.get(0).getValue());
assertEquals(1, toTest.getConcurrencyLevel());
assertEquals(1, toTest.getMaxAttempts());
assertTrue(actual instanceof TypeCachingJaxb);
assertNull(toTest.instantiate(null));
assertEquals("Response Status Code:123\\nResponse: hello", e.getMessage());
assertEquals(0, actual.getExtraParams().length);
assertNotNull(actual); assertEquals(SimpleEncodedPair.class, actual.getClass()); assertEquals("some%20name", actual.getName()); assertEquals("some%20value", actual.getValue());
assertEquals("", Placeholders.merge(null, ""));
assertEquals(0, actual.size());
assertSame(toTest, toTest.setParamsEncoded(true));
assertTrue(JaxRsAnnotations.isJaxRsAware());
assertSame(paramConfig, toTest.getParamConfig());
assertEquals(10, toTest.deserialize());
assertEquals(Values.DATE, deserialize(toTest, DATE_STR_DEFAULT_FORMAT));
assertEquals("a", actual);
assertEquals(0, actual.size());
assertEquals(100, toTest.getStatusCode());
assertSame(toTest, toTest.setMethodsRetryHandler(RetryHandler.class));
assertSame(expected, actual);
assertFalse(deserialize(toTest, "true"));
assertEquals("myFalse", toTest.write(false));
assertTrue(MultiParts.hasMultiPart(metaDatas));
assertEquals(str, toTest.deserialize(String.class, String.class, mock(InputStream.class), UTF8)); assertEquals(InputStreamReader.class, reader.getValue().getClass()); assertEquals("UTF8", InputStreamReader.class.cast(reader.getValue()).getEncoding());
assertSame(e, CRestException.handle(e));
assertSame(expected, CRestException.handle(e));
assertTrue(actual.hasNext()); assertEquals(expected1.get(0), actual.next()); assertTrue(actual.hasNext()); assertEquals(expected1.get(1), actual.next()); assertTrue(actual.hasNext()); assertEquals(expected3.get(0), actual.next()); assertFalse(actual.hasNext());
assertEquals(UTF8, toTest.getCharset());
assertSame(DefaultParamProcessor.INSTANCE, actual);
assertSame(e, CRestException.handle(e));
assertSame(expected, CRestException.handle(e));
assertEquals(DefaultInterfaceConfigBuilder.CompositeParamConfigBuilder.class, actual.getClass()); assertArrayEquals(expectedBuilders, Classes.<ParamConfigBuilder[]>getFieldValue(actual, "builders"));
assertSame(mockTestResponseHandler, actual.getResponseHandler());
assertSame(clazz, toTest.getInterface());
assertSame(expected, actual);
assertTrue(actual instanceof SimpleJaxb);
assertNull(MultiParts.getContentType(param));
assertEquals(Long.valueOf(-1), deserialize(toTest, "-1"));
assertSame(expected, toTest.asStream());
assertEquals(Float.valueOf(-1), deserialize(toTest, "-1"));
assertNull(deserialize(toTest, "-1"));
assertEquals("boundary", mp.getAllValues().get(0).getBoundary()); assertSame(paramConfig, mp.getAllValues().get(0).getParamConfig()); assertSame("a", mp.getAllValues().get(0).getValue()); assertEquals("boundary", mp.getAllValues().get(1).getBoundary()); assertSame(paramConfig, mp.getAllValues().get(1).getParamConfig()); assertSame("b", mp.getAllValues().get(1).getValue());
assertSame(toTest, toTest.setMethodsProduces("a"));
assertSame(mockNoOpRequestInterceptor, actual.getRequestInterceptor());
assertTrue(actual instanceof InputStreamReader); assertEquals("UTF8", ((InputStreamReader) actual).getEncoding());
assertSame(expected, actual);
assertSame(toTest, toTest.setMethodsRequestInterceptor(RequestInterceptor.class));
assertSame(expected, actual);
assertEquals(123, toTest.getStatusCode());
assertSame(e, CRestException.handle(e));
assertNull(MultiParts.getFileName(paramConfig));
assertFalse(toTest.read(null));
assertTrue(toTest.retry(exception, 1)); assertTrue(toTest.retry(exception, 2)); assertFalse(toTest.retry(exception, 3));
assertSame(method.getGenericReturnType(), toTest.getExpectedGenericType());
assertSame(expected, e1);
assertEquals(Object.class, toTest.getExpectedGenericType());
assertSame(MultiPartFileSerializer.INSTANCE, MultiPartBinarySerializer.getSerializer(File.class));
assertSame(expected, actual);
assertSame(expected, CRest.placeholder("n", "v"));
assertEquals(2, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v 11", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v 12", actual.get(1).getValue());
assertEquals("1", out.toString());
assertSame(mockM1MethodConfigBuilder, toTest.startMethodConfig(M1)); assertSame(mockM2MethodConfigBuilder, toTest.startMethodConfig(M2)); assertNull(toTest.startMethodConfig(Classes.byName(Object.class, "toString")));
assertEquals("expected", MultiParts.getContentType(paramConfig));
assertNotNull(actual); assertEquals("OAuth", actual.getName()); assertEquals("a=\\"a%20val\\",b=\\"b%20val\\"", actual.getValue());
assertEquals("value", actual.getName());
assertTrue(actual.hasNext()); assertEquals(expected1.get(0), actual.next()); assertTrue(actual.hasNext()); assertEquals(expected1.get(1), actual.next()); assertTrue(actual.hasNext()); assertEquals(expected3.get(0), actual.next()); assertFalse(actual.hasNext());
assertSame(toTest, toTest.setParamsSerializer(TestSerializer.class));
assertEquals(2, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v%2012", actual.get(1).getValue());
assertFalse(deserialize(toTest, "false"));
assertEquals("0", out.toString());
assertEquals("value",actual.getProduces());
assertEquals(1, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v 11--v 12", actual.get(0).getValue());
assertEquals("serialized", actual);
assertEquals(-1, toTest.getContentLength(null));
assertEquals("oauthToken", actual.getToken()); assertEquals("oauthTokenSecret", actual.getSecret()); assertEquals("extra1", actual.getAttribute("extra1").getName()); assertEquals("extra1Val", actual.getAttribute("extra1").getValue()); assertEquals("extra2", actual.getAttribute("extra2").getName()); assertEquals("extra2Val", actual.getAttribute("extra2").getValue());
assertSame(toTest, toTest.setMethodsCharset(Values.ISO_8859_1));
assertSame(mockTestRetryHandler, actual.getRetryHandler());
assertEquals(123, toTest.getStatusCode());
assertEquals("c", toTest.get("b", "c"));
assertSame(mock, SimpleXmlFactory.createSerializer(config, getClass()));
assertTrue(MultiPartBinarySerializer.isBinary(InputStream.class));
assertSame(expected, e1);
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v 11,p1=v 12", actual.get(0).getValue());
assertSame(toTest, toTest.setParamsSerializer(Serializer.class));
assertSame(e, CRestException.handle(e));
assertSame(mockParamConfigBuilder1, toTest.startParamConfig(0)); assertSame(mockParamConfigBuilder2, toTest.startParamConfig(1));
assertSame(expected, CRest.basicAuth("a","b"));
assertSame(expected, actual);
assertNotNull(actual); assertSame(mockCRestConfig, actual.crestConfig);
assertNotNull(actual);
assertFalse(deserialize(toTest, "false"));
assertNull(deserialize(toTest, null));
assertEquals(mockOAuthToken, actual);
assertEquals("value", toTest.getContentType());
assertArrayEquals(new String[]{"aa", "bb"}, actual);
assertSame(expected,actual); assertEquals("CRestInvocationHandler", objectMethodsAwareInvocationHandlerCaptor.getValue().getClass().getSimpleName()); assertEquals(config, Classes.getFieldValue(objectMethodsAwareInvocationHandlerCaptor.getValue(), "interfaceConfig"));
assertEquals(Values.UTF8, actual.getCharset());
assertEquals(10, toTest.deserialize());
assertSame(toTest, toTest.setMethodsSocketTimeout(10));
assertSame(expected, actual);
assertEquals("b", toTest.get(DefaultCRestConfigTest.class, "c"));
assertEquals("hello", actual);
assertEquals("contentType", metaDatas.get("multipart.content-type")); assertEquals("fileName", metaDatas.get("multipart.filename")); assertTrue((Boolean)metaDatas.get("multipart.flag"));
assertFalse(toTest.read("any"));
assertEquals("true", out.toString());
assertEquals("expected", MultiParts.getFileName(param));
assertEquals("UTF8", actualInputStream.getEncoding()); assertEquals("hello", IOs.toString(actualInputStream)); assertSame(expected, actual);
assertEquals(mockObjectMapper, actual);
assertEquals(Float.valueOf(-1), deserialize(toTest, "-1"));
assertTrue(currentSeconds == actual || (currentSeconds + 1) == actual);
assertEquals(mockResult, actual); assertEquals("UTF8", actualInputStream.getEncoding()); assertEquals("hello", IOs.toString(actualInputStream));
assertEquals("contentType", metaDatas.get("multipart.content-type")); assertEquals("fileName", metaDatas.get("multipart.filename")); assertTrue((Boolean)metaDatas.get("multipart.flag"));
assertSame(toTest, toTest.setMethodsConsumes("a", "b"));
assertSame(expected, CRest.placeholders(ph));
assertTrue(deserialize(toTest, "true"));
assertSame(expected, e);
assertSame(predefined,actual);
assertNotNull(actual); assertEquals("attr2", actual.getName()); assertEquals("val%202", actual.getValue());
assertSame(expected, actual);
assertNull(response.getContentType()); assertNull(response.getContentEncoding()); assertSame(EmptyInputStream.INSTANCE, response.getEntity()); assertSame(inputStream, response.getEntity()); assertEquals("contentType", response.getContentType()); assertEquals("contentEncoding", response.getContentEncoding()); assertEquals(123, response.getStatusCode()); assertEquals("reason", response.getStatusMessage());
assertEquals(DATE.toString(), toTest.read(DATE_STR).toString());
assertSame(MultiPartInputStreamSerializer.INSTANCE, MultiPartBinarySerializer.getSerializer(InputStream.class));
assertEquals(JdkProxyFactory.class, getFieldValue(actual, "proxyFactory").getClass());
assertEquals(1, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011--v%2012", actual.get(0).getValue());
assertSame(mockRetryHandler, actual.getRetryHandler());
assertNotNull(actual); assertEquals(SimpleEncodedPair.class, actual.getClass()); assertEquals("some name", actual.getName()); assertEquals("some value", actual.getValue());
assertSame(expected, actual);
assertEquals(Short.valueOf((short)-1), deserialize(toTest, "-1"));
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011,p1=v%2012", actual.get(0).getValue());
assertEquals(10, toTest.to(Object.class));
assertEquals(-1, toTest.getContentLength(null));
assertEquals(mockOAuthToken, actual);
assertNull(deserialize(toTest, null));
assertSame(DefaultParamProcessor.INSTANCE, actual);
assertSame(expected, toTest.getEntity());
assertEquals("value", toTest.getStatusMessage());
assertSame(method.getReturnType(), toTest.getExpectedType());
assertNull(actual.getProduces());
assertSame(toTest, toTest.setParamsEncoded(true));
assertTrue(actual instanceof PooledJaxb);
assertFalse(deserialize(toTest, "false"));
assertEquals("b", toTest.get("a"));
assertEquals(Short.valueOf((short)0), deserialize(toTest, null));
assertEquals(1, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011--v%2012", actual.get(0).getValue());
assertEquals("hello", toTest.serialize(this, null));
assertArrayEquals(inBytes, out.toByteArray()); assertTrue(in.hasBeenClosed());
assertEquals(Integer.valueOf(-1), deserialize(toTest, "-1"));
assertNull(deserialize(toTest, null));
assertSame(toTest, toTest.setMethodsEntityWriter(EntityWriter.class));
assertTrue(actual instanceof SimpleJaxb);
assertSame(exception, e.getCause());
assertEquals(CRestException.class, actual.getClass()); assertSame(e, actual.getCause()); assertSame("msg", actual.getMessage());
assertNotNull(actual); assertFalse(actual.getDeserializationConfig().isEnabled(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES));
assertSame(requestException2.getValue(), e); assertSame(badResponse, requestException2.getValue().getResponse()); assertEquals("", requestException2.getValue().getMessage());
assertEquals(0, actual.size());
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011,p1=v%2012", actual.get(0).getValue());
assertNull(toTest.getAttribute("attr3"));
assertTrue(deserialize(toTest, "ffff"));
assertSame(given, actual);
assertArrayEquals(s.getBytes(), deserialize(toTest, s));
assertTrue(deserialize(toTest, "true"));
assertEquals(10,actual.getSocketTimeout());
assertSame(mockRegexPathTemplate, actual.getPathTemplate());
assertEquals("<root bool=\\"myTrue\\" bool2=\\"myFalse\\" date=\\"13/03/1983 00:35:10\\"/>", sw.toString()); assertEquals(v1, read);
assertNull(deserialize(toTest, null));
assertEquals("b", toTest.get(DefaultCRestConfigTest.class));
assertEquals(SOME_STRING, actual);
assertNull(deserialize(toTest, null));
assertFalse(deserialize(toTest, "dffsf"));
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011--v%2012", actual.get(0).getValue());
assertNull(MultiParts.getContentType(paramConfig));
assertEquals("DefaultParam[name=name,value=[a, b]]", toTest.toString());
assertTrue(toTest.extract(null, UTF8, stream).isEmpty());
assertTrue(MultiParts.hasMultiPart(param));
assertSame(mockHttpResourceInputStream, toTest.asStream());
assertEquals("application/x-www-form-urlencoded; charset=UTF-8", toTest.getContentType(mockRequest()));
assertSame(expected, toTest.merge(map));
assertEquals(CRestException.class, actual.getClass()); assertSame(e, actual.getCause()); assertSame("msg", actual.getMessage());
assertSame(mockMethodConfig1, toTest.getMethodConfig(TestInterface.M1)); assertSame(mockMethodConfig2, toTest.getMethodConfig(TestInterface.M2)); assertNull(toTest.getMethodConfig(Classes.byName(Object.class, "toString")));
assertNull(e.getResponse()); assertSame(expected, e.getCause());
assertTrue(MultiPartBinarySerializer.isBinary(File.class));
assertNotNull(actual); assertEquals(SimpleEncodedPair.class, actual.getClass()); assertEquals("some%20name", actual.getName()); assertEquals("some%20value", actual.getValue());
assertTrue(actual instanceof SimpleJaxb);
assertSame(DefaultParamProcessor.INSTANCE, actual);
assertEquals(Byte.valueOf((byte)0), deserialize(toTest, null));
assertEquals(Double.valueOf(-1), deserialize(toTest, "-1"));
assertEquals(Short.valueOf((short)-1), deserialize(toTest, "-1"));
assertSame(expected, e1);
assertEquals(Double.valueOf(-1), deserialize(toTest, "-1"));
assertEquals("value", toTest.getContentEncoding());
assertEquals("hi", actual);
assertEquals(1, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011--v%2012", actual.get(0).getValue());
assertEquals("Parameter name is mandatory. This is probably due to a missing or empty named param annotation (one of the following: @CookieParam, @FormParam, @HeaderParam, @MatrixParam, @MultiPartParam, @PathParam, @QueryParam).\\n" + "Location information:\\n" + "Param[class=interface java.lang.Comparable,type=QUERY,method="+methodConfigBuilder+"]", e.getMessage());
assertNotNull(actual); assertEquals(1, actual.size()); assertEquals("someval", entry.getValue()); assertEquals("\\\\{\\\\Qte.st\\\\E\\\\}", entry.getKey().pattern());
assertEquals(3, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%201", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v%202", actual.get(1).getValue()); assertEquals("p3", actual.get(2).getName()); assertEquals("v3", actual.get(2).getValue());
assertEquals(20000, actual.getConnectionTimeout());
assertNull(deserialize(toTest, null));
assertNotNull(actual); assertEquals(SimpleEncodedPair.class, actual.getClass()); assertEquals("some name", actual.getName()); assertEquals("some value", actual.getValue());
assertEquals(10,actual.getConnectionTimeout());
assertSame(toTest, toTest.setMethodsDeserializer(Deserializer.class));
assertEquals("value", toTest.getContentType());
assertSame(expected, HttpClientFactory.create(crestConfig, getClass()));
assertEquals(10, toTest.to(Object.class, (Type)Object.class));
assertSame(DefaultParamProcessor.INSTANCE, actual);
assertEquals(SOME_STRING, new String(out.toByteArray(), UTF8)); assertTrue(in.hasBeenClosed());
assertEquals(Integer.valueOf(-1), deserialize(toTest, "-1"));
assertEquals(Long.valueOf(0), deserialize(toTest, null));
assertEquals("false", toTest.getBooleanFalse());
assertEquals("myFalse", toTest.write(null));
assertEquals(123, entity.getContentLength()); assertFalse(entity.isRepeatable()); assertTrue(entity.isStreaming());
assertSame(expected, actual);
assertEquals(mockOAuthToken, actual);
assertEquals("expected", MultiParts.getContentType(param));
assertNotNull(actual); assertTrue(actual.getDeserializationConfig().isEnabled(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES)); assertFalse(actual.getDeserializationConfig().isEnabled(DeserializationConfig.Feature.AUTO_DETECT_SETTERS)); assertFalse(actual.getSerializationConfig().isEnabled(SerializationConfig.Feature.AUTO_DETECT_IS_GETTERS)); assertFalse(actual.getSerializationConfig().isEnabled(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS));
assertSame(expected, actual);
assertEquals("c", toTest.get(DefaultCRestConfigTest.class, "c"));
assertEquals("yyyy-MM-dd\'T\'HH:mm:ssZ", toTest.getDateFormat());
assertEquals("SimpleEncodedPair[name=a,value=b]", toTest.toString());
assertEquals(0, actual.size());
assertEquals(20000, actual.getSocketTimeout());
assertSame(mockTestRequestInterceptor, actual.getRequestInterceptor());
assertSame(requestException2, e);
assertNull(deserialize(toTest, null));
assertSame(DefaultCookieParamProcessor.INSTANCE, actual);
assertEquals(Long.valueOf(-1), deserialize(toTest, "-1"));
assertTrue(toTest.read("myTrue"));
assertEquals("hello", actual);
assertEquals("myTrue", toTest.write(true));
assertEquals(Values.ISO_8859_1,actual.getCharset());
assertEquals("value", toTest.getContentEncoding());
assertEquals("b", toTest.get("a", "c"));
assertSame(mockRequest, toTest.getRequest());
assertEquals(Double.valueOf(0), deserialize(toTest, null));
assertEquals(mockBuilderResult, actual);
assertNotNull(actual); assertSame(mockCRestConfig, actual.crestConfig);
assertSame(mockRegexPathTemplate, actual.getPathTemplate());
assertEquals("expected", MultiParts.getFileName(paramConfig));
assertNull(MultiParts.getFileName(param));
assertTrue(actual instanceof PooledJaxb);
assertEquals(CRestException.class, actual.getClass()); assertSame(e, actual.getCause()); assertSame("msg", actual.getMessage());
assertSame(toTest, toTest.setMethodsResponseHandler(ResponseHandler.class));
assertEquals("false", out.toString());
assertSame(DefaultParamProcessor.INSTANCE, actual);
assertEquals(Integer.valueOf(0), deserialize(toTest, null));
assertFalse(toTest.read("myFalse"));
assertSame(cause, CRestException.handle(e));
assertEquals(Values.SOME_STRING, actual); assertTrue(in.hasBeenClosed());
assertFalse(deserialize(toTest, "true"));
assertSame(toTest, toTest.setMethodsConnectionTimeout(10));
assertEquals(mockOAuthToken, actual);
assertNull(toTest.match(String.class));
assertEquals(123, actual);
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011--v%2012", actual.get(0).getValue());
assertNotNull(actual); assertEquals(3, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%201", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v%202", actual.get(1).getValue()); assertEquals("p2", actual.get(2).getName()); assertEquals("v%203", actual.get(2).getValue());
assertNotNull(actual); assertEquals("OAuthToken[token=TOKEN,secret=SECRET,attributes={attr1=val%201, attr2=val%202}]", actual);
assertEquals("true", toTest.getBooleanTrue());
assertEquals("value", toTest.getStatusMessage());
assertSame(expected, actual);
assertTrue(actual instanceof SimpleJaxb);
assertSame(expected, CRest.oauth("a","b","c","d", "e", "f"));
assertSame(toTest, toTest.setMethodsEndPoint("a"));
assertSame(mockCRestConfig, toTest.getCRestConfig());
assertSame(toTest, toTest.setParamsListSeparator("a"));
assertEquals(2, actual.size()); assertEquals("p1", actual.get(0).getName()); assertEquals("v%2011", actual.get(0).getValue()); assertEquals("p1", actual.get(1).getName()); assertEquals("v%2012", actual.get(1).getValue());
assertFalse(deserialize(toTest, "dffsf"));
assertNull(deserialize(toTest, null));
assertFalse(deserialize(toTest, null));
assertFalse(deserialize(toTest, null));
assertTrue(deserialize(toTest, "ffff"));
assertFalse(deserialize(toTest, "false"));
assertSame(mockRequest, toTest.getRequest());
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v 11--v 12", actual.get(0).getValue());
assertSame(expected, actual);
assertTrue(currentSeconds == actual || (currentSeconds + 1) == actual);
assertTrue(actual.matches("multipart/form-data; boundary=[a-zA-Z0-9]{24}"));
assertEquals(1, actual.size()); assertEquals("Cookie", actual.get(0).getName()); assertEquals("p1=v%2011,p1=v%2012", actual.get(0).getValue());
assertSame(mockDefaultResponseHandler, actual.getResponseHandler());
assertEquals(123, actual);
assertEquals(Byte.valueOf("1"), deserialize(toTest, "1"));
assertEquals(Byte.valueOf("1"), deserialize(toTest, "1"));
assertSame(mockTestErrorHandler, actual.getErrorHandler());
assertFalse(deserialize(toTest, "sdfsdf"));
assertNotNull(actual);
assertSame(toTest, toTest.setMethodsType(MethodType.getDefault()));
assertEquals(value, toTest.getValue());
assertEquals(mockOAuthToken, actual);
assertSame(cause, CRestException.handle(e));
assertNull(source.getLastSavedState().get()); assertEquals( MysqlSource.EARLIEST_BINLOG_POS, source.getLastSavedState().get().getLastPosition());
assertEquals("DROP DATABASE `source/old_database`", schemaDatabase.addSourcePrefix(ddl)); assertEquals("DROP SCHEMA `source/old_database`", schemaDatabase.addSourcePrefix(ddl));
assertEquals( ImmutableSet.of(removedKey, addedKey), Mutation.getUpdatedColumns(previousColumns, currentColumns));
assertEquals(new Integer(1), mapper.map(new Float(1.2))); assertEquals(new Integer(3), mapper.map("3"));
assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(ddl, schemaDatabase.addSourcePrefix(ddl));
assertEquals(expected_sql, stripped_sql); assertEquals(expected_sql, stripped_sql);
assertEquals(state, updatedState.get()); assertEquals(nextState, updatedState.get()); assertEquals(nextState, updatedState.get());
assertEquals(Arrays.asList(secondMutation), unorderedMutations);
assertTrue(history.isEmpty()); assertFalse(history.isEmpty());
assertEquals(savedState, source.getLastSavedState().get()); assertEquals(savedState, source.getLastSavedState().get()); assertEquals( new MysqlSourceState(23L, newOffset, 0L, filePos), source.getLastSavedState().get()); assertEquals(stateHistory.removeLast(), source.getLastSavedState().get());
assertEquals(newState, source.getLastSavedState().get());
assertEquals( ImmutableSet.of(updatedKey), Mutation.getUpdatedColumns(previousColumns, currentColumns));
assertNull(stateRepository.read());
assertEquals(mutation, deserialized);
assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl));
assertFalse(destinationPool.isStarted()); assertTrue(destinationPool.isStarted());
assertTrue(mutations.isEmpty());
assertEquals( BinlogFilePos.fromString("mysql-bin-changelog.000218:14:6"), new BinlogFilePos("mysql-bin-changelog.000218", 14, 6)); assertEquals(new BinlogFilePos(80887L), new BinlogFilePos("mysql-bin-changelog.080887")); assertEquals(new BinlogFilePos(1080887L), new BinlogFilePos("mysql-bin-changelog.1080887"));
assertEquals(firstMutation, destination.getLastPublishedMutation()); assertNull(destination.getLastPublishedMutation());
assertEquals(TABLE1_COLUMNS, columns);
assertEquals(secondState, history.removeLast(2)); assertEquals(Collections.singletonList(firstState), repository.get());
assertTrue(mutations.isEmpty());
assertEquals(ddl, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl));
assertEquals("test:users:null", MysqlKeyProvider.INSTANCE.get(mutation));
assertEquals("test:users:1234", MysqlKeyProvider.INSTANCE.get(mutation));
assertTrue(mutations.isEmpty()); assertEquals(15L, lastTransaction.get().getTimestamp());
assertEquals(Arrays.asList(firstState, secondState), repository.get()); assertEquals(Arrays.asList(thirdState, fourthState), repository.get());
assertTrue(first.compareTo(second) < 0); assertEquals(0, first.compareTo(third)); assertTrue(first.compareTo(fourth) < 0); assertTrue(second.compareTo(third) > 0);
assertEquals(3, destination.getPublishedMutations()); assertEquals(thirdMutation, destination.getLastPublishedMutation());
assertTrue(unorderedMutations.isEmpty());
assertEquals(ImmutableMap.of("id", 2), MysqlUpdateMutation.asColumnValues(row));
assertEquals(expected_sql, stripped_sql); assertEquals(expected_sql, stripped_sql);
assertEquals( ImmutableSet.of(updatedKey), Mutation.getUpdatedColumns(previousColumns, currentColumns));
assertTrue(mutations.isEmpty()); assertEquals(15L, beginTransaction.get().getTimestamp()); assertTrue(mutations.isEmpty()); assertEquals(15L, beginTransaction.get().getTimestamp()); assertTrue(mutations.isEmpty()); assertEquals(30L, beginTransaction.get().getTimestamp());
assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl));
assertEquals(ddl, schemaDatabase.addSourcePrefix(ddl)); assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl));
assertTrue(unorderedMutations.isEmpty());
assertFalse(pipe.isStarted()); assertFalse(pipe.isStarted()); assertTrue(pipe.isStarted());
assertEquals(reg.getSoftwareVersion(), reg2.getSoftwareVersion());
assertEquals("Premature EOF from inputStream " + "after skipping 1 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 5 byte(s).",e.getMessage()); assertEquals("Premature EOF from inputStream " + "after skipping 0 byte(s).",e.getMessage());
assertEquals(NS1_NN1_ADDR, map.get("ns1").get("nn1").toString()); assertEquals(NS1_NN2_ADDR, map.get("ns1").get("nn2").toString());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM) );
assertEquals(0, rmAdminCLI.run(args)); assertTrue(dummyNodeLabelsManager.getClusterNodeLabels().isEmpty()); assertTrue(0 != rmAdminCLI.run(args)); assertTrue(0 != rmAdminCLI.run(args));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(b, b2);
assertEquals(info.getBlockPoolID(), info2.getBlockPoolID()); assertEquals(info.getBuildVersion(), info2.getBuildVersion());
assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler memory")); assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler vcores"));
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(AuthenticationMethod.SIMPLE, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod()); assertEquals(AuthenticationMethod.PROXY, ugi.getAuthenticationMethod()); assertEquals(AuthenticationMethod.SIMPLE, ugi.getRealAuthenticationMethod());
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); assertEquals("ns1", DFSUtil.getOnlyNameServiceIdOrNull(conf));
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals("0.0.0.0", ((NameNodeRpcServer)cluster.getNameNodeRpc()) .getClientRpcServer().getListenerAddress().getHostName());
assertArrayEquals("encFile1 not equal", getFileContentsUsingNfs(encFile1, len), getFileContentsUsingDfs(encFile1, len)); assertArrayEquals("encFile2 not equal", getFileContentsUsingNfs(encFile2, len), getFileContentsUsingDfs(encFile2, len));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("Test spnego key in config is null", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is empty", defaultKey, DFSUtil.getSpnegoKeytabKey(conf, defaultKey)); assertEquals("Test spnego key is NOT null", DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY, DFSUtil.getSpnegoKeytabKey(conf, defaultKey));
assertEquals(key, conf.get(key));
assertEquals(b, b1); assertEquals(b, b1);
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(1, jid.getAppId().getClusterTimestamp()); assertEquals(1, jid.getAppId().getId()); assertEquals(1, jid.getId());
assertEquals("job_0_0000", MRApps.toString(jid));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals(AuthenticationMethod.SIMPLE, ugi.getAuthenticationMethod()); assertTrue (ugi.toString().contains("(auth:SIMPLE)")); assertEquals(AuthenticationMethod.KERBEROS, ugi.getAuthenticationMethod()); assertTrue (ugi.toString().contains("(auth:KERBEROS)"));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertFalse("Replicas for block is not stored on enough racks", bm.isPlacementPolicySatisfied(blockInfo));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertTrue("File /tmp/zeroBlockFile doesn\'t exist ", fs.exists(testPath)); assertTrue("Name node didn\'t come up", cluster.isNameNodeUp(0));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue("Empty Config did not produce an empty list of resources", localResources.isEmpty());
assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("2 vcores, 1024 mb")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("1024 mb, 2 vcores")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("2vcores,1024mb")); assertEquals(BuilderUtils.newResource(1024, 2), parseResourceConfigValue("1024mb,2vcores"));
assertEquals(0, invocationHandler.getCloseCalled()); assertEquals(1, invocationHandler.getCloseCalled());
assertEquals(minResource, ask.getCapability()); assertEquals(minResource, ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(1024, ask.getCapability().getMemory()); assertEquals(Resources.createResource(2048, 1), ask.getCapability()); assertEquals(1, ask.getCapability().getVirtualCores()); assertEquals(2048, ask.getCapability().getMemory());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(0, rmAdminCLI.run(args)); assertTrue(dummyNodeLabelsManager.getClusterNodeLabels().containsAll( ImmutableSet.of("x"))); assertTrue(0 != rmAdminCLI.run(args)); assertTrue(0 != rmAdminCLI.run(args));
assertNotNull(s1); assertNull(s1); assertNotNull(s2);
assertEquals(1, tid.getJobId().getAppId().getClusterTimestamp()); assertEquals(2, tid.getJobId().getAppId().getId()); assertEquals(2, tid.getJobId().getId()); assertEquals(TaskType.REDUCE, tid.getTaskType()); assertEquals(3, tid.getId()); assertEquals(TaskType.MAP, tid.getTaskType());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect response:", null, response2);
assertEquals(STATE.INITED, historyServer.getServiceState()); assertEquals(5, historyServer.getServices().size()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState());
assertEquals(clientAddr, getRemoteAddr(clientAddr, proxyAddr, true)); assertEquals(clientAddr, getRemoteAddr(chainedClientAddr, proxyAddr, true));
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(0, taid.getTaskId().getJobId().getAppId().getClusterTimestamp()); assertEquals(1, taid.getTaskId().getJobId().getAppId().getId()); assertEquals(1, taid.getTaskId().getJobId().getId()); assertEquals(2, taid.getTaskId().getId()); assertEquals(3, taid.getId());
assertEquals(blocks.length, blocks2.length);
assertFalse(DFSUtil.isValidName("/foo/../bar")); assertFalse(DFSUtil.isValidName("/foo/./bar"));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue(appComparator.compare(app1, app2) < 0); assertTrue(appComparator.compare(app1, app3) < 0); assertTrue(appComparator.compare(app2, app3) < 0);
assertNotNull(defaultRule.defaultQueueName);
assertEquals("attempt_0_0000_m_000000_0", MRApps.toString(taid));
assertEquals(uugi, uugi); assertFalse(uugi.equals(ugi2)); assertFalse(uugi.hashCode() == ugi2.hashCode()); assertEquals(uugi, ugi3); assertEquals(uugi.hashCode(), ugi3.hashCode());
assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 1L); assertEquals("Number of blocks didn\'t match", origFile.numBlocks(), 5L);
assertEquals(logs.size(), logs1.size());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(rmApp1.getQueue(), queue1.getName()); assertEquals("root.asterix", rmApp1.getQueue()); assertEquals(rmApp2.getQueue(), queue2.getName()); assertEquals("root.notdefault", rmApp2.getQueue());
assertTrue("rpc got exception " + error.get(), error.get() == null);
assertEquals("True has to be returned in this case", BLKSIZE_MAXVALUE, inf.getPreferredBlockSize());
assertEquals(proxyAddr, getRemoteAddr(null, proxyAddr, true)); assertEquals(proxyAddr, getRemoteAddr("", proxyAddr, true));
assertEquals(new URI("https", null, "0.0.0.0", DFS_NAMENODE_HTTPS_PORT_DEFAULT, null, null, null), httpsport); assertEquals(new URI("http", null, "0.0.0.0", DFS_NAMENODE_HTTP_PORT_DEFAULT, null, null, null), httpport);
assertEquals(clientAddr, getRemoteAddr(clientAddr, null, false));
assertEquals("nn1", DFSUtil.getNamenodeNameServiceId(conf));
assertEquals(1, appsInA1.size()); assertTrue(appsInA.contains(appAttemptId)); assertEquals(1, appsInA.size()); assertTrue(appsInRoot.contains(appAttemptId)); assertEquals(1, appsInRoot.size()); assertEquals(1, appsInA1.size()); assertTrue(appsInA.contains(appAttemptId)); assertEquals(1, appsInA.size()); assertTrue(appsInRoot.contains(appAttemptId)); assertEquals(1, appsInRoot.size());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("task_0_0000_m_000000", MRApps.toString(tid)); assertEquals("task_0_0000_r_000000", MRApps.toString(tid));
assertEquals(61*1000, DFSUtil.parseRelativeTime("61s")); assertEquals(61*60*1000, DFSUtil.parseRelativeTime("61m")); assertEquals(0, DFSUtil.parseRelativeTime("0s")); assertEquals(25*60*60*1000, DFSUtil.parseRelativeTime("25h")); assertEquals(4*24*60*60*1000l, DFSUtil.parseRelativeTime("4d")); assertEquals(999*24*60*60*1000l, DFSUtil.parseRelativeTime("999d"));
assertEquals(iug.getTimeout(), IdMappingConstant.USERGROUPID_UPDATE_MILLIS_DEFAULT); assertEquals(iug.getTimeout(), IdMappingConstant.USERGROUPID_UPDATE_MILLIS_MIN); assertEquals(iug.getTimeout(), IdMappingConstant.USERGROUPID_UPDATE_MILLIS_DEFAULT * 2);
assertEquals(info.getClusterID(), info2.getClusterID()); assertEquals(info.getCTime(), info2.getCTime()); assertEquals(info.getLayoutVersion(), info2.getLayoutVersion()); assertEquals(info.getNamespaceID(), info2.getNamespaceID());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(0, a.getMetrics().getAppsPending()); assertEquals(0, a.getMetrics().getAppsFailed()); assertEquals(1, a.getMetrics().getAppsSubmitted()); assertEquals(1, a.getMetrics().getAppsPending()); assertEquals(1, a.getMetrics().getAppsSubmitted()); assertEquals(0, a.getMetrics().getAppsPending()); assertEquals(0, a.getMetrics().getAppsFailed()); assertEquals(1, a.getMetrics().getAppsCompleted()); assertEquals(1, userMetrics.getAppsSubmitted());
assertEquals(b.getBlock(), b1.getBlock()); assertEquals(dnInfo.length, dnInfo1.length);
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect COMMIT3Response:", null, response2);
assertEquals(2, nameserviceIds.size()); assertEquals("nn1", it.next().toString()); assertEquals("nn2", it.next().toString());
assertEquals(3, queues.size()); assertFalse(queueA.isStarvedForMinShare()); assertTrue(queueB.isStarvedForMinShare()); assertFalse(queueB.isStarvedForMinShare());
assertEquals(minMemory, ask.getCapability().getMemory()); assertEquals(minMemory, ask.getCapability().getMemory()); assertEquals(2 * minMemory, ask.getCapability().getMemory()); assertEquals(2 * minMemory, ask.getCapability().getMemory()); assertEquals(maxMemory, ask.getCapability().getMemory()); assertEquals(maxMemory, ask.getCapability().getMemory()); assertEquals(maxResource.getMemory(), ask.getCapability().getMemory()); assertEquals(maxResource.getMemory(), ask.getCapability().getMemory());
assertTrue("first command should be the run command for the platform", command[0].equals(Shell.WINUTILS) || command[0].equals("bash"));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("nn1", DFSUtil.getSecondaryNameServiceId(conf));
assertEquals(proxyAddr, getRemoteAddr(clientAddr, proxyAddr, false));
assertTrue("MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!", env_str.startsWith(expectedClasspath));
assertEquals("True has to be returned in this case", replication, inf.getFileReplication());
assertFalse("MAPREDUCE_JOB_CLASSLOADER true, but job.jar is in the" + " classpath!", cp.contains("jar" + ApplicationConstants.CLASS_PATH_SEPARATOR + "job")); assertFalse("MAPREDUCE_JOB_CLASSLOADER true, but PWD is in the classpath!", cp.contains("PWD")); assertEquals("MAPREDUCE_JOB_CLASSLOADER true, but job.jar is not in the app" + " classpath!", expectedAppClasspath, appCp);
assertEquals("\'foobar\'", Shell.bashQuote("foobar")); assertEquals("\'foo\'\\\\\'\'bar\'", Shell.bashQuote("foo\'bar")); assertEquals("\'\'\\\\\'\'foo\'\\\\\'\'bar\'\\\\\'\'\'", Shell.bashQuote("\'foo\'bar\'"));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(ugi, UserGroupInformation.getLoginUser());
assertEquals(0, e.status);
assertEquals(s.getBlockpoolID(), s1.getBlockpoolID()); assertEquals(s.getClusterID(), s1.getClusterID()); assertEquals(s.getCTime(), s1.getCTime()); assertEquals(s.getCurSegmentTxId(), s1.getCurSegmentTxId()); assertEquals(s.getLayoutVersion(), s1.getLayoutVersion()); assertEquals(s.getMostRecentCheckpointTxId(), s1.getMostRecentCheckpointTxId()); assertEquals(s.getNamespaceID(), s1.getNamespaceID());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertTrue(fs.exists(file1)); assertTrue(!fs.exists(file1));
assertEquals(i, f.getStoragePolicyID());
assertEquals(key, conf.get(key));
assertEquals("True has to be returned in this case", preferredBlockSize, inf.getPreferredBlockSize());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(bc.getAction(), bc2.getAction()); assertEquals(bc.getBlocks().length, bc2.getBlocks().length); assertEquals(blocks[i], blocks2[i]); assertEquals(dnInfos.length, dnInfos2.length); assertEquals(d1.length, d2.length);
assertNotNull("getJobFile results in null.", jobFile); assertEquals("jobFile with specified user is not as expected.", "/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml", jobFile);
assertNotNull(ugi); assertEquals("guest@DEFAULT.REALM", ugi.getUserName());
assertTrue("Demand is greater than max allowed ", Resources.equals(schedulable.getDemand(), maxResource));
assertEquals(lbl.length, lbl2.length);
assertEquals("nn1", DFSUtil.getBackupNameServiceId(conf));
assertEquals(MD5FileUtils.readStoredMd5ForFile(fsimage), MD5FileUtils.computeMd5ForFile(fsimage));
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code:", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue(fnfe.getMessage().contains("File does not exist")); assertTrue(e.getMessage().contains("Directory does not exist")); assertTrue(f == from); assertTrue(f == from); assertTrue(fnfe.getMessage().contains("Path is not a file")); assertTrue(d == from);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue(localFs.mkdirs(dstPath));
assertEquals(2, editsDirs.size());
assertEquals(bc.length, MAX_LIMIT); assertEquals(bc.length, REMAINING_BLOCKS);
assertTrue("MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, and job.jar is not in" + " the classpath!", env_str.contains(expectedClasspath)); assertFalse("MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, but taking effect!", env_str.startsWith(expectedClasspath));
assertTrue("expected 2 blocks but got " + bs.length, bs.length == 2); assertTrue("expected 1 corrupt files but got " + corruptCount, corruptCount == 1); assertEquals(0, bs.length);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertFalse("Hit error", hasError.get());
assertEquals("Incorrect return code", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); assertEquals("Incorrect return code", Nfs3Status.NFS3_OK, response2.getStatus());
assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertTrue(appAttIds.contains(appAttId1)); assertTrue(appAttIds.contains(appAttId2));
assertEquals("foo:12345", DFSUtil.substituteForWildcardAddress("0.0.0.0:12345", "foo")); assertEquals("127.0.0.1:12345", DFSUtil.substituteForWildcardAddress("127.0.0.1:12345", "foo"));
assertTrue(a.toString().equals( "mean:2.0 stdev:1.0 var:1.0 cNA:0 count:3 min:1.0 max:3.0")); assertTrue(d.toString().equals( "mean:4.5 stdev:3.08 var:9.5 cNA:3 count:6 min:1.0 max:9.0"));
assertEquals(16 * 1000 * 1000, tracker.getOfflineCacheSize());
assertEquals(new Tracker(mMatomo, mTrackerBuilder).getSiteId(), 11);
assertEquals(Build.VERSION.RELEASE, mBuildInfo.getRelease());
assertEquals(threadCount * queryCount, createdEvents.size()); assertEquals(0, dryRunData.size());
assertFalse(mDispatcher.getDispatchGzipped()); assertTrue(mDispatcher.getDispatchGzipped());
assertEquals(Dispatcher.DEFAULT_DISPATCH_INTERVAL, mDispatcher.getDispatchInterval());
assertEquals("testagent", mDeviceHelper.getUserAgent());
assertEquals(valid.toExternalForm(), mCaptor.getValue().get(QueryParams.LINK)); assertEquals(valid.toExternalForm(), mCaptor.getValue().get(QueryParams.URL_PATH));
assertTrue(md5 == null);
assertEquals("http: trackMe.set(QueryParams.URL_PATH, "https: tracker.track(trackMe);
assertEquals("480x800", mCaptor.getValue().get(QueryParams.SCREEN_RESOLUTION));
assertThat(trackerBuilder1, is(trackerBuilder2)); assertThat(trackerBuilder1, is(not(trackerBuilder3)));
assertEquals(matomoApplication.getTracker(), matomoApplication.getTracker());
assertEquals(55, testPacket.getEventCount());
assertThat(result, is(trackerBuilder.hashCode()));
assertEquals(DispatchMode.ALWAYS, mDispatcher.getDispatchMode()); assertEquals(DispatchMode.WIFI_ONLY, mDispatcher.getDispatchMode());
assertEquals(Connectivity.Type.MOBILE, connectivity.getType());
assertEquals(Dispatcher.DEFAULT_CONNECTION_TIMEOUT, mDispatcher.getConnectionTimeOut());
assertTrue(mDiskCache.isEmpty()); assertFalse(mDiskCache.isEmpty());
assertThat(tracker.getVisitorId(), is(notNullValue())); assertThat(tracker.getVisitorId(), is(visitorId));
assertTrue(downloadParams, m.matches()); assertEquals(3, m.groupCount()); assertEquals("package", m.group(1)); assertEquals(123, Integer.parseInt(m.group(2))); assertEquals(null, m.group(3));
assertTrue(hostFolder.exists()); assertEquals(1, hostFolder.listFiles().length);
assertEquals("String", trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1f), trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1L), trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1), trackMe.get(QueryParams.HOURS)); assertNull(trackMe.get(QueryParams.HOURS));
assertNull(Checksum.getHex(null));
assertEquals("[]", items.toJson());
assertEquals(Build.ID, mBuildInfo.getBuildId());
assertEquals(new Tracker(mMatomo, mTrackerBuilder).hashCode(), new Tracker(mMatomo, mTrackerBuilder).hashCode());
assertThat(tracker.getLastEventX().get(QueryParams.SESSION_START), notNullValue()); assertThat(tracker.getLastEventX().get(QueryParams.SESSION_START), nullValue()); assertThat(tracker.getLastEventX().get(QueryParams.SESSION_START), notNullValue()); assertEquals(tracker.getSessionTimeout(), 10000); assertThat(tracker.getLastEventX().get(QueryParams.SESSION_START), nullValue());
assertEquals(md5, "ACBD18DB4CC2F85CEDEF654FCCC4A4D8");
assertEquals(threadCount, mTrackerPreferences.getLong(Tracker.PREF_KEY_TRACKER_VISITCOUNT, 0));
assertNotNull(tracker); assertEquals(app.onCreateTrackerConfig().getApiUrl(), tracker.getAPIUrl()); assertEquals(app.onCreateTrackerConfig().getSiteId(), tracker.getSiteId());
assertEquals(100, mDispatcher.getConnectionTimeOut());
assertFalse(trackMe.isEmpty()); assertTrue(trackMe.isEmpty());
assertEquals("Dalvik/2.2.0 (Linux; U; Android 8.0.0; UnitTest Build/ABCDEF)", mDeviceHelper.getUserAgent()); assertEquals("Dalvik/0.0.0 (Linux; U; Android 8.0.0; UnitTest Build/ABCDEF)", mDeviceHelper.getUserAgent());
assertEquals(0, event.hashCode());
assertEquals("foo", trackMe.get("dimension1")); assertEquals("bar", trackMe.get("dimension2")); assertNull(trackMe.get("dimension0")); assertNull(trackMe.get("dimension3")); assertNull(trackMe.get("dimension4"));
assertFalse(tracker.isOptOut()); assertTrue(tracker.isOptOut());
assertEquals(24 * 60 * 60 * 1000, tracker.getOfflineCacheAge());
assertEquals(4 * 1024 * 1024, tracker.getOfflineCacheSize());
assertThat(matomo.getDispatcherFactory(), is(not(nullValue()))); assertThat(matomo.getDispatcherFactory(), is(factory));
assertEquals(Build.MODEL, mBuildInfo.getModel());
assertTrue(target.toString().contains("\\"1\\":[\\"name1\\",\\"value1\\"]")); assertTrue(target.toString().contains("\\"2\\":[\\"name2X\\",\\"value2X\\"]")); assertTrue(target.toString().contains("\\"3\\":[\\"name3\\",\\"value3\\"]"));
assertThat(badTrackMe.safelyWith(mTracker), is(false)); assertThat(badTrackMe.safelyWith(mMatomoApplication), is(false)); assertThat(goodTrackMe.safelyWith(mTracker), is(true)); assertThat(goodTrackMe.safelyWith(mMatomoApplication), is(true));
assertEquals(propertySource.getHttpAgent(), propertySource.getSystemProperty("http.agent"));
assertEquals("10.00", CurrencyFormatter.priceString(1000)); assertEquals("39.50", CurrencyFormatter.priceString(3950)); assertEquals("0.01", CurrencyFormatter.priceString(1)); assertEquals("250.34", CurrencyFormatter.priceString(25034)); assertEquals("1747.20", CurrencyFormatter.priceString(174720)); assertEquals("1234567.89", CurrencyFormatter.priceString(123456789));
assertThat(trackerBuilder.getSiteId(), is(1337));
assertTrue(timeStamp - testPacket.getTimeStamp() < 5);
assertEquals("A", trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1f), trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1L), trackMe.get(QueryParams.HOURS)); assertEquals(String.valueOf(1), trackMe.get(QueryParams.HOURS)); assertNotNull(trackMe.get(QueryParams.HOURS));
assertTrue(mEventCache.isEmpty());
assertThat(post, notNullValue()); assertThat(pre, is(post));
assertEquals(255, trackMe.get("dimension1").length());
assertEquals(mMatomo, tracker.getMatomo());
assertEquals("", event.getEncodedQuery());
assertEquals(80085, tracker.getOfflineCacheAge());
assertTrue(trackMe.isEmpty());
assertThat(tracker.getVisitorId(), is(notNullValue()));
assertFalse(trackMe.isEmpty()); assertTrue(trackMe.isEmpty());
assertEquals(propertySource.getJVMVersion(), propertySource.getSystemProperty("java.vm.version"));
assertEquals(Connectivity.Type.WIFI, connectivity.getType());
assertEquals(Connectivity.Type.NONE, connectivity.getType());
assertEquals(20, clubbed.getAttackPower());
assertEquals(8, fst1.getStateCount());
assertThat(CartesianProductIterable.of(limit(source, 2)), contains( Pair.of("A", "B") ));
assertEquals(0, size(ible));
assertEquals(0, size(ible));
assertEquals(0, size(ible));
assertThat(set, contains( Pair.of("A", "B"), Pair.of("A", "C"), Pair.of("B", "C") )); assertEquals(3, Iterables.size(set));
assertEquals(0, fst1.getState(i).getArcCount()); assertEquals(1, fst1.getState(i).getArcCount());
assertThat(CartesianProductIterable.of(limit(source, 4)), contains( Pair.of("A", "B"), Pair.of("A", "C"), Pair.of("A", "D"), Pair.of("B", "C"), Pair.of("B", "D"), Pair.of("C", "D") ));
assertEquals(Lists.newArrayList("ste", "phen"), syllabifier.splitIntoSyllables("stephen")); assertEquals(Lists.newArrayList("STE", "PHEN"), syllabifier.splitIntoSyllables("STEPHEN")); assertEquals(Lists.newArrayList("car", "ner", "ie"), syllabifier.splitIntoSyllables("carnerie")); assertEquals(2, count);
assertEquals("S T IY V AH N", stephen);
assertEquals(2, RuleSyllabifier.syllable("special"));
assertThat(op.toString(), is(equalTo("one of hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("five of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(new LoginAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(op.toString(), is(equalTo("nine of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(op.toString(), is(equalTo("count of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is > 1 as CRITICAL")));
assertThat(op.toString(), is(equalTo("one of traps in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("count of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is < 1 as CRITICAL")));
assertThat(op.toString(), is(equalTo("one of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(op.toString(), is(equalTo("majority of hosts in pool \'test\' as WARNING, CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("majority of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING, CRITICAL")));
assertThat(new SendNotificationAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("fcafd43f-1b35-43a3-96db-8094f48c664a"))));
assertThat(op.toString(), is(equalTo("eight of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(root, is(notNullValue())); assertThat(root.getCertificate(), is(notNullValue())); assertThat(root.getKey(), is(notNullValue())); assertThat(server, is(notNullValue())); assertThat(server.getCertificate(), is(notNullValue())); assertThat(server.getKey(), is(notNullValue()));
assertThat(op.toString(), is(equalTo("one of hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(new ProcessResultAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(op.toString(), is(equalTo("one or more of hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(command.size(), is(equalTo(1))); assertThat(command.get(0), is(equalTo("Testing 123")));
assertThat(op.toString(), is(equalTo("one of service \'test\' on hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("any of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\']")));
assertThat(command.size(), is(equalTo(3))); assertThat(command.get(0), is(equalTo("/usr/lib/nagios/plugins/check_dummy"))); assertThat(command.get(1), is(equalTo("0"))); assertThat(command.get(2), is(equalTo("Testing 123")));
assertThat(new SendNotificationAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(op.toString(), is(equalTo("one of trap \'test\' on hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(new SignAgentAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("fdbc3042-d4a4-45bb-a54f-0ae8da9c6d44"))));
assertThat(label, is(equalTo("load1")));
assertThat(label, is(equalTo("chris\' load1")));
assertThat(op.toString(), is(equalTo("three of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(new SendNotificationToContactAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("01fb5dd1-e69f-403c-8847-c3a3f572f8d8"))));
assertThat(op.toString(), is(equalTo("seven of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(op.toString(), is(equalTo("case when host \'vm1\' is OK then OK when host \'vm1\' is WARNING then OK else CRITICAL end")));
assertThat(refs, is(notNullValue())); assertThat(refs.size(), is(equalTo(1))); assertThat(refs.get(0), is(notNullValue())); assertThat(refs.get(0), is(instanceOf(AnonymousTrap.class))); assertThat(refs.get(0), is(hasProperty("name", equalTo("port_e1/1"))));
assertThat(op.toString(), is(equalTo("majority of hosts in pool \'test\' as WARNING, CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("majority of hosts in pool \'test\' as WARNING, CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(new SendNotificationToContactAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(command.size(), is(equalTo(1))); assertThat(command.get(0), is(equalTo("test")));
assertThat(command.size(), is(equalTo(1))); assertThat(command.get(0), is(equalTo("Testing 123")));
assertThat(op.toString(), is(equalTo("count OK of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is == 1 as CRITICAL")));
assertThat(new LoginAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("c3f43c54-e8a0-45ce-8213-fa71221ae5fc"))));
assertThat(op.toString(), is(equalTo("all of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\']")));
assertThat(op.toString(), is(equalTo("count of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is >= 1 as CRITICAL")));
assertThat(op.toString(), is(equalTo("one or less of hosts in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("four of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(new SignAgentAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(pair, is(notNullValue()));
assertThat(dn, is(notNullValue())); assertThat(dn, is(equalTo("C=GB, ST=SomeState, L=SomeLocality, O=MyOrg, OU=Basement, CN=testing.123")));
assertThat(new ExecuteCheckAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("ab52d8b1-b43f-4dd7-9b9b-9bde92da1fde"))));
assertThat(new ProcessResultAccountingEvent().getTypeId(), is(equalTo(UUID.fromString("30108f43-34d6-4338-b652-48f1a0c08565"))));
assertThat(op.toString(), is(equalTo("count of hosts in pool \'test\' is > 1 as CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(perfData.size(), is(equalTo(3)));
assertThat(new ExecuteCheckAccountingEvent().getTypeId(), is(notNullValue()));
assertThat(op.toString(), is(equalTo("majority of hosts in pool \'test\' as WARNING, CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(m, is(notNullValue())); assertThat(m.getContent(), is(notNullValue())); assertThat(m.getAllHeaders(), is(notNullValue())); assertThat(m.getHeader("Message-ID")[0], is(equalTo("<a9f82618-9801-4b91-8bed-9c8c01f883ad.update.bergamot>")));
assertThat(op.toString(), is(equalTo("majority of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING, CRITICAL")));
assertThat(op.toString(), is(equalTo("two of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(op.toString(), is(equalTo("six of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] as WARNING")));
assertThat(refs, is(notNullValue())); assertThat(refs.size(), is(equalTo(1))); assertThat(refs.get(0), is(notNullValue())); assertThat(refs.get(0), is(instanceOf(AnonymousService.class))); assertThat(refs.get(0), is(hasProperty("name", equalTo("check_sshd"))));
assertThat(sn1.hashCode(), is(equalTo(sn2.hashCode())));
assertThat(op.toString(), is(equalTo("count OK of service \'test\' on hosts in pool \'test\' is >= 1 as CRITICAL"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("one of services in pool \'test\' as WARNING"))); assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test")))));
assertThat(op.toString(), is(equalTo("count WARNING of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is != 1 as CRITICAL")));
assertThat(op.toString(), is(equalTo("count of [host \'vm1\', host \'vm2\', host \'vm3\', host \'vm4\'] is <= 1 as CRITICAL")));
assertEquals(1, statement.getStatements().size()); assertThat(statement.getStatements().get(0), instanceOf(WriteAttributeStatement.class));
assertEquals(2, properties.size());
assertEquals(2, properties.size());
assertEquals(2, validators.size()); assertEquals("my_validator", id.toString());
assertEquals(3, converters.size()); assertEquals(Integer.class.getName(), forClass.getName());
assertEquals(3, properties.size());
assertEquals(expResult, result, 0.0);
assertEquals(1, test.get().intValue()); assertEquals(0, test.getMin().intValue()); assertEquals(1, test.get().intValue()); assertEquals(2, test.getMin().intValue()); assertEquals(2, test.get().intValue()); assertNull(test.getMin()); assertEquals(2, test.get().intValue());
assertEquals(5, test.get().intValue()); assertEquals(10, test.getMax().intValue()); assertEquals(5, test.get().intValue()); assertEquals(4, test.getMax().intValue()); assertEquals(4, test.get().intValue()); assertNull(test.getMax()); assertEquals(4, test.get().intValue());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(dockableData.isModified()); assertTrue(dockableData.isModified()); assertFalse(dockableData.isModified()); assertFalse(dockableData.isModified()); assertFalse(dockableData.isModified()); assertFalse(dockableData.isModified());
assertEquals(1, test.get().intValue()); assertEquals(11, test.get().intValue()); assertEquals(-1, test.get().intValue()); assertNull(test.get());
assertEquals(expResult, result);
assertEquals(Orientation.HORIZONTAL, OrientationUtils.getOrientation( org.drombler.commons.client.geometry.Orientation.HORIZONTAL)); assertEquals(Orientation.VERTICAL, OrientationUtils.getOrientation( org.drombler.commons.client.geometry.Orientation.VERTICAL));
assertEquals(expResult, result);
assertThat(actual.getX(), is(0.0)); assertThat(actual.getY(), is(0.0)); assertThat(actual.getWidth(), is(87.0)); assertThat(actual.getHeight(), is(87.0));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().isEmpty(), is(true)); assertThat(arg.getHiddenElementSelectors().size(), is(1)); assertThat(arg.getHiddenElementSelectors().get(0), is(new DomSelector(SelectorType.ID, "id")));
assertThat(result, is("testMethod_scId_WINDOWS_firefox_38_TAG_NAME_body_[1].png"));
assertThat(arg.getTargets(), is(notNullValue())); assertThat(arg.getTargets().isEmpty(), is(true));
assertThat(actual.size(), is(1)); assertThat(actual.get(0).getRectangle(), is(expected));
assertThat(result1.areaEquals(result2), is(false));
assertThat(value, is(Double.NaN));
assertThat(selector.findElements(defaultContentElement), is(Collections.<WebElement> emptyList()));
assertThat(actual, is(expected)); assertThat(actual, is(expected));
assertArrayEquals(toRGB(expected), toRGB(actual));
assertThat(selector.findElements(driver), is(singletonList(parentElement2)));
assertThat(selector.findElement(driver), is(defaultContentElement));
assertThat(result, is("{\\"a\\":\\"b\\"}"));
assertTrue(actual instanceof SimilarityImageComparator);
assertThat(actual, is(expected));
assertThat(result.isSucceeded(), is(true)); assertThat(result.getComparedRectangles().size(), is(1)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.SIMILAR));
assertThat(result.split(System.lineSeparator()), is(new String[] { "{", " \\"a\\" : \\"b\\"", "}" }));
assertThat(selector.findElement(defaultContentElement), is(childElement));
assertThat(arg.getHiddenElementSelectors(), is(notNullValue())); assertThat(arg.getHiddenElementSelectors().isEmpty(), is(true));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(actual, is(expected));
assertThat(selector.findElements(defaultContentBody), is(asList(parentElement1, parentElement2)));
assertThat(selector.findElement(driver), is(parentElement));
assertThat(actual, is(expected));
assertThat(result.isSucceeded(), is(true));
assertThat(rectangle.getX(), is(0.0)); assertThat(rectangle.getY(), is(0.0)); assertThat(rectangle.getWidth(), is(80.0)); assertThat(rectangle.getHeight(), is(80.0));
assertArrayEquals(targets, result.toArray(new CompareTarget[result.size()]));
assertThat(actual, is(expected));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(selector.findElement(defaultContentElement), is(parentElement));
assertThat(actual, is(expected)); assertThat(actual, is(expected)); assertThat(actual, is(expected));
assertThat(result.isFailed(), is(true));
assertThat(value, is(1d));
assertThat(result, is("{\\"a\\":\\"b\\"}"));
assertThat(value, is(1d));
assertTrue(actual instanceof DefaultImageComparator);
assertThat(result.isSucceeded(), is(true));
assertThat(actual.getX(), is(expected.getX())); assertThat(actual.getY(), is(expected.getY()));
assertThat(selector.findElement(driver), is(parentElement1));
assertThat(actual, is(1)); assertThat(actual, is(2)); assertThat(actual, is(3)); assertThat(actual, is(4));
assertThat(result, is(new RectangleArea(105d, 205d, 305d, 405d)));
assertThat(selector.findElements(driver), is(singletonList(parentElement)));
assertThat(actual, is(false));
assertThat(result, is(new RectangleArea(11d, 20.5d, 30.5d, 40.5d)));
assertTrue(actual instanceof IgnoringClearPixelsImageComparator);
assertThat(capabilities.getDeviceName(), is("hoge"));
assertThat(capabilities.getPlatformVersion(), is("hoge"));
assertThat(expected, is(actual));
assertThat(result.x, is(11)); assertThat(result.y, is(21)); assertThat(result.width, is(31)); assertThat(result.height, is(41));
assertThat(actual, is(expected));
assertThat(result.isSucceeded(), is(false)); assertThat(result.getComparedRectangles().size(), is(2)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.MISSING)); assertThat(result.getComparedRectangles().get(1).getCategory(), is(DiffCategory.TEXT));
assertThat(file.exists(), is(true)); assertThat(savedIds, is(expectedIds));
assertThat(selector.findElement(driver), is(parentElement2));
assertArrayEquals(selectors, result.toArray(new DomSelector[result.size()]));
assertThat(result.isSucceeded(), is(true)); assertThat(result.getComparedRectangles().size(), is(1)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.SHIFT));
assertThat(actual, is(0.0));
assertThat(ImageUtils.imageEquals(expected, actual), is(true)); assertThat(image.isImageCached(), is(true));
assertArrayEquals(toRGB(expected), toRGB(actual));
assertThat(result1.areaEquals(result2), is(false));
assertThat(loadedIds, is(expectedIds));
assertThat(image.isImageCached(), is(false)); assertThat(ImageUtils.imageEquals(expected, actual), is(true)); assertThat(image.isImageCached(), is(true)); assertThat(i, is(sameInstance(actual)));
assertThat(value, is(-1.5d));
assertArrayEquals(toRGB(expected), toRGB(actual));
assertThat(result, is(new RectangleArea(10d, 20d, 30d, 40d)));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().isEmpty(), is(true)); assertThat(arg.getHiddenElementSelectors().isEmpty(), is(true));
assertThat(selector.findElements(defaultContentElement), is(singletonList(parentElement)));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(result.getFailureCount(), is(3)); assertThat( failure.getMessage(), is(anyOf(equalTo("Method afterClass() should be static"), equalTo("Method afterClass() should be public"), equalTo("Method afterClass() should be void"))));
assertThat(result, is("testMethod_scId_ANDROID_4.0.3_Selendroid_TAG_NAME_body_[1].png"));
assertThat(image.get(), is(sameInstance(i)));
assertThat(selector.findElements(driver), is(asList(parentElement1, parentElement2)));
assertThat(result.isSucceeded(), is(true)); assertThat(result.getComparedRectangles().size(), is(1)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.MISSING));
assertThat(result, is(expected));
assertThat(selector.findElements(defaultContentElement), is(Collections.<WebElement> emptyList()));
assertThat(newObj, is(not(sameInstance(arg)))); assertThat(newObj.getScreenshotId(), is("id")); assertArrayEquals(targets, newObj.getTargets().toArray()); assertArrayEquals(selectors, newObj.getHiddenElementSelectors().toArray());
assertThat(result.getFailureCount(), is(3)); assertThat( failure.getMessage(), is(anyOf(equalTo("Method beforeClass() should be static"), equalTo("Method beforeClass() should be public"), equalTo("Method beforeClass() should be void"))));
assertThat(result, is(expected));
assertThat(selector.findElements(driver), is(Collections.<WebElement> emptyList()));
assertThat(ImageUtils.isContained(entireImage, partImage), is(true));
assertThat(arg.getScreenshotId(), is("scid"));
assertArrayEquals(expected, actual);
assertThat(image1, is(not(sameInstance(image2)))); assertThat(ImageUtils.imageEquals(image1, image2), is(true));
assertThat(result.split(System.lineSeparator()), is(new String[] { "{", " \\"a\\" : \\"b\\"", "}" }));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().size(), is(1)); assertThat(arg.getHiddenElementSelectors().isEmpty(), is(true)); assertThat(arg.getTargets().get(0), is(new CompareTarget()));
assertThat(actual, is(0.97)); assertThat(actual, is(0.97));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(ImageUtils.imageEquals(image1, image2), is(false));
assertThat(ImageUtils.imageEquals(image1, image2), is(false));
assertThat(result.isSucceeded(), is(true)); assertThat(result.getComparedRectangles().size(), is(1)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.SCALING));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(result1.areaEquals(result2), is(true));
assertThat(actual, is(false));
assertThat(env.getExecMode(), is(ExecMode.TAKE_SCREENSHOT));
assertThat(result1.areaEquals(result2), is(true));
assertThat(selector.findElement(defaultContentBody), is(parentElement1));
assertThat(result.isSucceeded(), is(true)); assertThat(result.getComparedRectangles().size(), is(1)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.TEXT));
assertThat(results, is(expected));
assertThat(ImageUtils.isContained(entireImage, partImage), is(false));
assertThat(ImageUtils.imageEquals(expected, actual), is(true)); assertThat(image.isImageCached(), is(false));
assertThat(selector.findElements(defaultContentBody), is(singletonList(parentElement2)));
assertThat(actual, is(expected));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().isEmpty(), is(true)); assertThat(arg.getHiddenElementSelectors().size(), is(1)); assertThat(arg.getHiddenElementSelectors().get(0), is(new DomSelector(mapping.getValue(), "value")));
assertThat(result.isSucceeded(), is(false)); assertThat(result.getComparedRectangles().size(), is(2)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.TEXT)); assertThat(result.getComparedRectangles().get(1).getCategory(), is(DiffCategory.SCALING));
assertThat(si.isImageCached(), is(true));
assertThat(actual, is(expected));
assertThat(result, is(new RectangleArea(11d, 21d, 31d, 41d)));
assertThat(selector.findElements(driver), is(singletonList(defaultContentElement)));
assertThat(actual, is(true));
assertTrue(actual instanceof CategoryImageComparator);
assertThat(result, is(new RectangleArea(10d, 20d, 31d, 41d)));
assertThat(result.isSucceeded(), is(true));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().size(), is(1)); assertThat(arg.getHiddenElementSelectors().isEmpty(), is(true)); assertThat(arg.getTargets().get(0), is(new CompareTarget(ScreenArea.of(SelectorType.NAME, "name"), new ScreenArea[] { ScreenArea.of(SelectorType.ID, "ex") }, true)));
assertThat(actual, is(expected));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(result.isSucceeded(), is(false)); assertThat(result.getComparedRectangles().size(), is(2)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.TEXT)); assertThat(result.getComparedRectangles().get(1).getCategory(), is(DiffCategory.SIMILAR));
assertThat(actual, is(1.0));
assertThat(result, is("testMethod_scId_WINDOWS_firefox_38_rect_0_10_100_1000.png"));
assertThat(actual, is(1.0)); assertThat(actual, is(1.0));
assertThat(ImageUtils.imageEquals(expected, actual), is(true));
assertThat(si.get(), is(image));
assertTrue(actual instanceof IgnoringClearPixelsImageComparator);
assertThat(selector.findElements(defaultContentElement), is(singletonList(childElement)));
assertArrayEquals(toRGB(expected), toRGB(actual));
assertThat(result.isSucceeded(), is(false)); assertThat(result.getComparedRectangles().size(), is(2)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.TEXT)); assertThat(result.getComparedRectangles().get(1).getCategory(), is(DiffCategory.MISSING));
assertThat(result.isSucceeded(), is(true));
assertThat(result.isSucceeded(), is(false));
assertThat(result.isSucceeded(), is(false)); assertThat(result.getComparedRectangles().size(), is(2)); assertThat(result.getComparedRectangles().get(0).getCategory(), is(DiffCategory.TEXT)); assertThat(result.getComparedRectangles().get(1).getCategory(), is(DiffCategory.SHIFT));
assertThat(arg.getScreenshotId(), is("ssid")); assertThat(arg.getTargets().size(), is(1)); assertThat(arg.getHiddenElementSelectors().isEmpty(), is(true)); assertThat(arg.getTargets().get(0), is(new CompareTarget(ScreenArea.of(mapping.getValue(), "target"))));
assertThat(ImageUtils.imageEquals(actual, image), is(true));
assertThat(selector.findElement(defaultContentBody), is(parentElement2));
assertThat(rectangles.size(), is(3)); assertThat(rectangle.getX(), is(expected[i][0])); assertThat(rectangle.getY(), is(expected[i][1])); assertThat(rectangle.getWidth(), is(expected[i][2])); assertThat(rectangle.getHeight(), is(expected[i][3]));
assertEquals(b.length, channel.read(buffer)); assertEquals(zeros, channel.read(buffer)); assertArrayEquals(copyOf(b, buffer.capacity()), buffer.array()); assertEquals(-1, channel.read(buffer));
assertEquals(b.length, channel.read(buffer)); assertArrayEquals(copyOf(b, buffer.capacity()), buffer.array()); assertEquals(-1, channel.read(buffer));
assertEquals(p, ZsyncUtil.getPath(p.toUri()));
assertEquals("", ZsyncUtil.toHexString(ByteBuffer.allocate(0)));
assertEquals(4294967297l, ZsyncUtil.toLong(1, 1));
assertEquals(new ContentRange(1, 3), parseContentRange("bytes 1-3/3"));
assertEquals((short) 255, ZsyncUtil.unsigned((byte) -1));
assertEquals(new ContentRange(1, 3), parseContentRange("bytes 1-3/"));
assertFalse(new ContentRange(1, 3).equals(new ContentRange(2, 3)));
assertEquals(of(new Transferred(1), new Transferred(2)), listener.getEventLog());
assertEquals(buf.capacity(), this.writeableMessageDigest.write(buf)); assertArrayEquals(expected, actual);
assertEquals(new ContentRange(1, 3), parseContentRange("bytes 1-3/b"));
assertEquals(3, ZsyncMake.strongChecksumLength(1024, 2048, 2)); assertEquals(5, ZsyncMake.strongChecksumLength(100 * 1024 * 1024, 4096, 2)); assertEquals(8, ZsyncMake.strongChecksumLength(100 * 1024 * 1024, 4096, 1)); assertEquals(16, ZsyncMake.strongChecksumLength(Long.MAX_VALUE, 4096, 1)); assertEquals(5, ZsyncMake.strongChecksumLength(57323443l, 2048, 2));
assertEquals("01fe", ZsyncUtil.toHexString(ByteBuffer.wrap(new byte[] {1, (byte) -2})));
assertEquals(65537, ZsyncUtil.toInt((short) 1, (short) 1));
assertEquals(new ContentRange(1, 3), parseContentRange("bytes 1-3/4"));
assertTrue(r.equals(r));
assertEquals(2, new ContentRange(1, 2).length());
assertFalse(in.isOpen()); assertEquals(of(Closed.INSTANCE), listener.getEventLog());
assertEquals(1, new ContentRange(2, 2).length());
assertEquals(2, ZsyncMake.weakChecksumLength(1024, 2048, 2)); assertEquals(3, ZsyncMake.weakChecksumLength(389 * 1024 * 1024, 4096, 2)); assertEquals(4, ZsyncMake.weakChecksumLength(25l * 1024 * 1024 * 1024 * 1024, 4096, 2));
assertEquals(of(Closed.INSTANCE), listener.getEventLog());
assertEquals(com.squareup.okhttp.Credentials.basic("jdoe", "secret"), new Credentials("jdoe", "secret").basic());
assertEquals(1, b.length());
assertEquals("test", e.getMessage()); assertEquals(of(Closed.INSTANCE), listener.getEventLog());
assertEquals("test", e.getMessage()); assertEquals(of(Closed.INSTANCE), listener.getEventLog());
assertEquals( MediaType.create("multipart", "byteranges").withParameters( ImmutableMultimap.of("boundary", "gc0p4Jq0M2Yt08jU534c0p")), parseContentType(response));
assertEquals(b.length, channel.read(buffer)); assertEquals(zeros - 1, channel.read(buffer)); assertArrayEquals(copyOf(b, buffer.capacity()), buffer.array()); assertEquals(1, channel.read(buffer)); assertArrayEquals(copyOf(b, buffer.capacity()), buffer.array()); assertEquals(-1, channel.read(buffer));
assertFalse(new ContentRange(1, 2).equals(null));
assertEquals(new ContentRange(1, 3), parseContentRange("bytes 1-3/*"));
assertFalse(new ContentRange(1, 2).equals(new ContentRange(1, 3)));
assertEquals((short) 1, ZsyncUtil.unsigned((byte) 1));
assertTrue(listener.getEventLog().isEmpty());
assertNull(parseContentType(response));
assertEquals(1, in.read(dst)); assertEquals(2, in.read(dst)); assertEquals(-1, in.read(dst)); assertEquals(of(new Transferred(1), new Transferred(2)), listener.getEventLog());
assertEquals("67423ebfa8454f19ac6f4686d6c0dc731a3ddd6b", ZsyncUtil.computeSha1(c));
assertEquals(buffer.capacity(), channel.read(buffer)); assertArrayEquals(b, buffer.array());
assertTrue(new ContentRange(1, 2).equals(new ContentRange(1, 2)));
assertFalse(new ContentRange(1, 2).equals(1));
assertArrayEquals(expected.getBytes(ISO_8859_1), getBoundary(MediaType.create("multipart", "byteranges") .withParameters(ImmutableMultimap.of("boundary", expected))));
assertTrue(floatValue.equals(-0d)); assertTrue(doubleValue.equals(-0d)); assertTrue(floatValue.equals(0d)); assertTrue(doubleValue.equals(0d)); assertTrue(floatValue.equals(0d + Math.ulp(0d))); assertFalse(doubleValue.equals(0d + Math.ulp(0d))); assertTrue(floatValue.equals(-0f)); assertTrue(floatValue.equals(0f)); assertFalse(floatValue.equals(0f + Math.ulp(0f)));
assertEquals(null, evaluate(simpleSetPredicate, fruit, null)); assertEquals(Boolean.TRUE, evaluate(simpleSetPredicate, fruit, "apple")); assertEquals(Boolean.FALSE, evaluate(simpleSetPredicate, fruit, "pineapple")); assertEquals(Boolean.FALSE, evaluate(simpleSetPredicate, fruit, "apple")); assertEquals(Boolean.TRUE, evaluate(simpleSetPredicate, fruit, "pineapple"));
assertEquals(DataType.TIME, TypeUtil.getDataType(time));
assertNotSame((leftChild.getScoreDistributions()).get(i), (rightChild.getScoreDistributions()).get(i)); assertSame((leftChild.getScoreDistributions()).get(i), (rightChild.getScoreDistributions()).get(i));
assertEquals(new DoubleValue(5d), aggregator.weightedMedian()); assertEquals(new DoubleValue(7d), aggregator.weightedMedian());
assertEquals(new DoubleValue((4d + 5d) / 2d), aggregator.median()); assertEquals(new DoubleValue(5d), aggregator.median());
assertEquals(FieldValues.MISSING_VALUE, context.evaluate(name)); assertEquals(Arrays.asList(FieldValues.MISSING_VALUE), context.evaluateAll(Arrays.asList(name)));
assertEquals(Arrays.asList(0, 3, 0, 0, 42, 0, 0), SparseArrayUtil.asNumberList(sparseArray));
assertEquals(OpType.CONTINUOUS, targetField.getOpType()); assertEquals(OpType.CATEGORICAL, targetField.getOpType()); assertEquals(OpType.CONTINUOUS, targetField.getOpType());
assertEquals("", evaluate(emptyString)); assertEquals(null, evaluate(emptyString)); assertEquals("3", evaluate(stringThree)); assertEquals(null, evaluate(stringThree)); assertEquals(3, evaluate(integerThree)); assertEquals(null, evaluate(integerThree)); assertEquals(3f, evaluate(floatThree)); assertEquals(null, evaluate(floatThree)); assertEquals(3d, evaluate(doubleThree)); assertEquals(null, evaluate(doubleThree));
assertSame(firstTreeModel, PMMLUtil.findModel(pmml, TreeModel.class)); assertSame(secondTreeModel, PMMLUtil.findModel(pmml, TreeModel.class));
assertEquals(Boolean.FALSE, evaluate(False.INSTANCE));
assertEquals(new FloatValue(0.3f), values.get("yes")); assertEquals(new FloatValue(1f - 0.3f), values.get("no"));
assertEquals(equals, evaluate(stringThree, name, "3")); assertEquals(notEquals, evaluate(stringThree, name, "1")); assertEquals(5d, evaluate(stringThree, name, null)); assertEquals(equals, evaluate(integerThree, name, 3)); assertEquals(notEquals, evaluate(integerThree, name, 1)); assertEquals(equals, evaluate(floatThree, name, 3f)); assertEquals(notEquals, evaluate(floatThree, name, 1f));
assertEquals(3, evaluate(aggregate, name, values)); assertEquals(6, evaluate(aggregate, name, values)); assertEquals(2d, evaluate(aggregate, name, values));
assertEquals(Arrays.asList(0d, 0d, 0d, 0d, 0d, 0d, 0d), SparseArrayUtil.asNumberList(sparseArray));
assertEquals(new FloatValue(0.2f - 0f), values.get("loud")); assertEquals(new FloatValue(0.7f - 0.2f), values.get("louder")); assertEquals(new FloatValue(1f - 0.7f), values.get("insane"));
assertEquals(Boolean.TRUE, evaluate(True.INSTANCE));
assertEquals(null, ee.getContext()); assertTrue(cause instanceof PatternSyntaxException); assertEquals(textIndex, ee.getContext()); assertTrue(cause instanceof PatternSyntaxException);
assertEquals(Boolean.TRUE, evaluate(compoundPredicate, temperature, 70, humidity, null)); assertEquals(Boolean.FALSE, evaluate(compoundPredicate, temperature, 40, humidity, null)); assertEquals(Boolean.FALSE, evaluate(compoundPredicate, temperature, 100, humidity, null)); assertEquals(Boolean.TRUE, evaluate(compoundPredicate, temperature, null, humidity, 90)); assertEquals(Boolean.FALSE, evaluate(compoundPredicate, temperature, null, humidity, 70)); assertEquals(null, evaluate(compoundPredicate, temperature, null, humidity, null));
assertEquals(5d, evaluate(normContinuous, name, null));
assertEquals(fieldRef, ee.getContext()); assertEquals("Hello World!", evaluate(apply, name, "Hello World!"));
assertEquals(DataType.DATE_TIME, TypeUtil.getDataType(dateTime));
assertEquals(OpType.CONTINUOUS, dataField.getOpType()); assertEquals(DataType.FLOAT, dataField.getDataType()); assertEquals((float)Math.PI, results.get(dataField.getName())); assertEquals(OpType.CONTINUOUS, dataField.getOpType()); assertEquals(DataType.DOUBLE, dataField.getDataType()); assertEquals(Math.PI, results.get(dataField.getName()));
assertEquals(" ", SeparatorConverter.unescape(" ")); assertEquals(",", SeparatorConverter.unescape(",")); assertEquals(";", SeparatorConverter.unescape(";")); assertEquals("\\t", SeparatorConverter.unescape("\\t")); assertEquals("\\t", SeparatorConverter.unescape("\\\\t")); assertEquals("\\\\", SeparatorConverter.unescape("\\\\\\\\")); assertEquals("\\\\x", SeparatorConverter.unescape("\\\\\\\\x"));
assertEquals(null, evaluate(discretize, name, null)); assertEquals("Missing", evaluate(discretize, name, null)); assertEquals(null, evaluate(discretize, name, 3)); assertEquals("Default", evaluate(discretize, name, 3));
assertEquals(new FloatValue(0.3f), values.get("red")); assertEquals(new FloatValue(0.5f), values.get("yellow")); assertEquals(new FloatValue(1f - (0.3f + 0.5f)), values.get("green"));
assertEquals(Math.sqrt(32d / 8d), (Double)evaluate(values), 1e-8); assertEquals(Math.sqrt(32d / 7d), (Double)evaluate(values, true), 1e-8); assertEquals(Math.sqrt(32d / 8d), (Double)evaluate(values, false), 1e-8);
assertEquals("ABC", normalize(rows, text, null, true, 0)); assertEquals(text, normalize(rows, text, null, true, 0)); assertEquals("Abc", normalize(rows, text, null, false, 0)); assertEquals("AAA", normalize(rows, text, null, true, 0)); assertEquals(text, normalize(rows, text, null, true, 0)); assertEquals("AAA", normalize(rows, text, null, false, 0));
assertEquals("3", evaluate(fieldRef, name, "3")); assertEquals(null, evaluate(fieldRef, name, null)); assertEquals("Missing", evaluate(fieldRef, name, null));
assertEquals(1, evaluate(textIndex, name, "Testing the app for a few days convinced me the interfaces are excellent!"));
assertEquals("under 50", targetValue.getResult());
assertNotNull(FunctionRegistry.getFunction("if")); assertNull(FunctionRegistry.getFunction("x-sin")); assertNotNull(FunctionRegistry.getFunction("sin")); assertNotSame(firstEcho, secondEcho); assertTrue(cause instanceof ExceptionInInitializerError);
assertEquals(Double.NaN, evaluate(constant)); assertEquals(Float.NaN, evaluate(constant));
assertEquals(3d, evaluate(values));
assertTrue(InputFieldUtil.isDefault(dataField, miningField)); assertFalse(InputFieldUtil.isDefault(dataField, miningField));
assertEquals(null, EvaluatorUtil.decode((Object)null)); assertEquals("value", EvaluatorUtil.decode(value)); assertEquals(Arrays.asList("value"), EvaluatorUtil.decode(Arrays.asList(value))); assertEquals(Arrays.asList("value", "value"), EvaluatorUtil.decode(Arrays.asList(value, value)));
assertEquals(1, evaluate(apply, name, 1)); assertEquals(1, evaluate(apply, name, -1)); assertEquals(null, evaluate(apply, name, null)); assertEquals(-1d, evaluate(apply, name, null));
assertEquals(Boolean.FALSE, evaluate(compoundPredicate)); assertEquals(Boolean.TRUE, evaluate(compoundPredicate)); assertEquals(Boolean.TRUE, evaluate(compoundPredicate));
assertTrue(modelManager instanceof RegressorManager); assertTrue(modelManager instanceof ClassifierManager);
assertTrue(Double.NEGATIVE_INFINITY < -Double.MAX_VALUE); assertTrue(Double.POSITIVE_INFINITY > Double.MAX_VALUE); assertEquals((Float)2f, floatValue.getValue()); assertEquals((Double)2d, doubleValue.getValue()); assertEquals((Float)(-2f), floatValue.getValue()); assertEquals((Double)(-2d), doubleValue.getValue());
assertEquals(0.00759732d, DistributionUtil.probability(distribution, 1d), 1e-8); assertEquals(0.10934005d, DistributionUtil.probability(distribution, 3d), 1e-8); assertEquals(0.26596152d, DistributionUtil.probability(distribution, 5d), 1e-8);
assertEquals("zero", evaluate(mapValues, name, "0")); assertEquals("one", evaluate(mapValues, name, "1")); assertEquals(null, evaluate(mapValues, name, "3")); assertEquals(null, evaluate(mapValues, name, null)); assertEquals("Missing", evaluate(mapValues, name, null)); assertEquals("Default", evaluate(mapValues, name, "3"));
assertEquals(ImmutableSet.of("ham", "spam"), classification.getCategories()); assertEquals((Double)0.75d, classification.getProbability("ham")); assertEquals((Double)0.25d, classification.getProbability("spam"));
assertEquals(DataType.DATE, TypeUtil.getDataType(date));
assertEquals(2.5d, evaluate(values, 50));
assertThat(fragment.getContent(), is(context.getString(TestFragmentWithWebContentResource.CONTENT_RES)));
assertThat(request.transition(transition), is(request)); assertThat(request.transition(), is(transition));
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(ActionBarAnnotationHandlers.ActionBarFragmentHandler.class));
assertThat(FragmentUtils.inflateTransition(context, android.R.anim.fade_in), is(nullValue()));
assertThat(fragment.isViewCreated(), is(true));
assertThat(fragment, is(notNullValue())); assertThat(fragment.getArguments(), is(nullValue()));
assertThat(BaseFragment.newInstanceWithArguments(TestFragmentWithPrivateConstructor.class, new Bundle()), is(nullValue()));
assertThat(controller.clearBackStackImmediate(), is(true));
assertThat(request.addToBackStack(true).addToBackStack(), is(true)); assertThat(request.hasFlag(FragmentRequest.ADD_TO_BACK_STACK), is(true)); assertThat(request.addToBackStack(false).addToBackStack(), is(false)); assertThat(request.hasFlag(FragmentRequest.ADD_TO_BACK_STACK), is(false));
assertThat(fragment.isStopped(), is(true)); assertThat(fragment.isStarted(), is(false));
assertThat(controller.clearBackStackImmediate(), is(false));
assertThat(request.tag("TAG.TestFragment"), is(request)); assertThat(request.tag(), is("TAG.TestFragment"));
assertThat(view, is(nullValue()));
assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, ChildAnnotatedComponent.class, BaseComponent.class), is(notNullValue())); assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, Component.class, BaseComponent.class), is(nullValue()));
assertThat(factory.isFragmentProvided(TestFactory.FRAGMENT_NOT_PROVIDED), is(false)); assertThat(factory.isFragmentProvided(TestFactory.FRAGMENT_NOT_PROVIDED), is(false)); assertThat(factory.isFragmentProvided(providedFragmentId), is(true)); assertThat(factory.isFragmentProvided(providedFragmentId), is(true));
assertThat(fragment.invalidateOptionsMenu(), is(false));
assertThat(fragment.isDestroyed(), is(true)); assertThat(fragment.isCreated(), is(false));
assertThat(request.transitionStyle(android.R.style.Animation), is(request)); assertThat(request.transitionStyle(), is(android.R.style.Animation));
assertThat(fragment.isAttached(), is(true)); assertThat(fragment.hasLifecycleFlag(BaseFragment.LIFECYCLE_DETACHED), is(false));
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(WebAnnotationHandlers.WebFragmentHandler.class));
assertThat(AnnotationHandlers.obtainHandler(Handler.class, AnnotatedComponent.class), is(nullValue()));
assertThat(fragment, is(notNullValue())); assertThat(fragment.getArguments(), is(args));
assertThat(fragment.isPaused(), is(true)); assertThat(fragment.isResumed(), is(false));
assertThat(request.sharedElementReturnTransition(transition), is(request)); assertThat(request.sharedElementReturnTransition(), is(transition)); assertThat(request.hasTransition(FragmentRequest.TRANSITION_SHARED_ELEMENT_RETURN), is(true));
assertThat(annotationHandler, is(notNullValue())); assertThat(annotationHandler, is(fragment.onCreateAnnotationHandler()));
assertThat(toString.startsWith(FragmentRequest.class.getSimpleName()), is(true));
assertThat(controller.findFragmentByFactoryId(TestFactory.FRAGMENT_1), is(mockFragment));
assertThat(fragment.isActionBarAvailable(), is(true));
assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, AnnotatedComponent.class, null), is(notNullValue())); assertThat(FragmentAnnotations.obtainAnnotationFrom(ChildComponentAnnotation.class, ChildAnnotatedComponent.class, null), is(notNullValue())); assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, ChildAnnotatedComponent.class, null), is(nullValue()));
assertThat(logger, is(notNullValue())); assertThat(logger.getLogLevel(), is(Log.ASSERT));
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(BaseManagementAnnotationHandlers.FragmentFactoryHandler.class));
assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, Object.class, BaseComponent.class), is(nullValue()));
assertThat(controller.hasBackStackEntries(), is(false));
assertThat(item.newFragmentInstance(new Bundle()), is(nullValue()));
assertThat(FragmentUtils.isPowerSaveModeActive(context), is(false));
assertThat(fragment.runOnUiThread(new Runnable() { @Override public void run() { throw new AssertionError("Should not but run on Ui thread!"); } }), is(false));
assertThat(request.reenterTransition(transition), is(request)); assertThat(request.reenterTransition(), is(transition)); assertThat(request.hasTransition(FragmentRequest.TRANSITION_REENTER), is(true));
assertThat(controller.hasBackStackEntries(), is(true));
assertThat( new TestHandler(Component.class).findAnnotation(ComponentAnnotation.class), is(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, Component.class, null)) ); assertThat( new TestHandler(AnnotatedComponent.class).findAnnotation(ComponentAnnotation.class), is(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, AnnotatedComponent.class, null)) );
assertThat(request.arguments(args), is(request)); assertThat(request.arguments(), is(args));
assertThat(controller.onExecuteRequest(request), is(fragment));
assertThat(WebFragment.resolveContentType(null), is(WebFragment.CONTENT_EMPTY)); assertThat(WebFragment.resolveContentType(""), is(WebFragment.CONTENT_EMPTY));
assertThat(transition.describeContents(), is(0));
assertThat(fragment.getSupportActionBar(), is(mockActionBar));
assertThat(factory.isFragmentProvided(TestFactory.FRAGMENT_NOT_PROVIDED), is(false)); assertThat(factory.isFragmentProvided(providedFragmentId), is(true));
assertThat(request.fragmentId(100), is(request)); assertThat(request.fragmentId(), is(100));
assertThat(fragment.onBackPress(), is(false));
assertThat(request.immediate(true).immediate(), is(true)); assertThat(request.hasFlag(FragmentRequest.IMMEDIATE), is(true)); assertThat(request.immediate(false).immediate(), is(false)); assertThat(request.hasFlag(FragmentRequest.IMMEDIATE), is(false));
assertThat(fragment.isCreated(), is(true)); assertThat(fragment.isDestroyed(), is(false));
assertThat(fragment.getActionBar(), is(mockActionBar));
assertThat(fragment.isViewCreated(), is(false));
assertThat(ActionBarDelegate.create(mockActivity), is(nullValue()));
assertThat(fragment.getContextTheme(), is(activity.getTheme()));
assertThat(fragment.runOnUiThread(new Runnable() { @Override public void run() { fragmentManager.beginTransaction().remove(fragment).commit(); fragmentManager.executePendingTransactions(); } }), is(true));
assertThat(annotationHandler, is(notNullValue())); assertThat(annotationHandler, is(factory.getAnnotationHandler()));
assertThat(fragment.startActionMode(), is(true)); assertThat(fragment.isInActionMode(), is(true)); assertThat(fragment.getActionMode(), is(mockActionMode));
assertThat(FragmentUtils.inflateTransition(mockContext, android.R.anim.fade_in), is(nullValue()));
assertThat(fragment.hasLifecycleFlag(BaseFragment.LIFECYCLE_DETACHED), is(true)); assertThat(fragment.isAttached(), is(false));
assertThat(FragmentAnnotations.isEnabled(), is(true));
assertThat(fragment, is(notNullValue())); assertThat(fragment.getContent(), is(nullValue())); assertThat(fragment.getOptions(), is(notNullValue()));
assertThat(fragment.isStarted(), is(true)); assertThat(fragment.isStopped(), is(false));
assertThat(fragment.onBackPress(), is(false));
assertThat(fragment.dispatchViewClick(view), is(false)); assertThat(fragment.dispatchedClickedView, is(view));
assertThat( BaseFragmentFactory.createFragmentTag(TestFactory.class, "TestFragment"), is(TestFactory.class.getName() + ".TAG.TestFragment") );
assertThat(ActionBarDelegate.create(context, (ActionBar) null), is(notNullValue())); assertThat(ActionBarDelegate.create(context, (androidx.appcompat.app.ActionBar) null), is(notNullValue()));
assertThat(fragment.onBackPress(), is(false));
assertThat(fragment.onCreateWebViewClient(), is(notNullValue()));
assertThat(factory.providesFragment(0), is(false));
assertThat(controller.getTopBackStackEntry(), is(nullValue()));
assertThat(fragment.getAnnotationHandler(), is(notNullValue()));
assertThat(state.containsKey(WebFragment.BUNDLE_OPTIONS), is(true)); assertThat(state.containsKey(WebFragment.BUNDLE_CONTENT), is(true)); assertThat(state.containsKey(WebFragment.BUNDLE_PRIVATE_FLAGS), is(true));
assertThat(controller.clearBackStackImmediate(), is(false));
assertThat(view, is(notNullValue()));
assertThat(FragmentUtils.willBeCustomAnimationsPlayed(context), is(true));
assertSame(handler.getAnnotatedClass(), Fragment.class);
assertThat(annotationHandler, is(notNullValue())); assertThat(annotationHandler, is(fragment.onCreateAnnotationHandler()));
assertThat(fragment.invalidateOptionsMenu(), is(false));
assertThat(request.replaceSame(true).replaceSame(), is(true)); assertThat(request.hasFlag(FragmentRequest.REPLACE_SAME), is(true)); assertThat(request.replaceSame(false).replaceSame(), is(false)); assertThat(request.hasFlag(FragmentRequest.REPLACE_SAME), is(false));
assertThat(fragment.onCreateWebChromeClient(), is(notNullValue()));
assertThat(request.allowEnterTransitionOverlap(false), is(request)); assertThat(request.allowEnterTransitionOverlap(), is(false)); assertThat(request.allowEnterTransitionOverlap(true), is(request)); assertThat(request.allowEnterTransitionOverlap(), is(true));
assertThat(view, is(nullValue())); assertThat(container.getChildCount(), is(1));
assertThat(fragment.isActionBarAvailable(), is(false));
assertThat(transition, is(notNullValue())); assertThat(transition, instanceOf(Fade.class));
assertThat(request.sharedElementEnterTransition(transition), is(request)); assertThat(request.sharedElementEnterTransition(), is(transition)); assertThat(request.hasTransition(FragmentRequest.TRANSITION_SHARED_ELEMENT_ENTER), is(true));
assertThat(request.viewContainerId(android.R.id.list), is(request)); assertThat(request.viewContainerId(), is(android.R.id.list));
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(BaseAnnotationHandlers.FragmentHandler.class));
assertThat(item.newFragmentInstance(new Bundle()), is(nullValue()));
assertThat(delegate.getContext(), Matchers.<Context>is(activity));
assertThat(parcel.readInt(), is(inAnimation)); assertThat(parcel.readInt(), is(outAnimation)); assertThat(parcel.readInt(), is(inAnimationBack)); assertThat(parcel.readInt(), is(outAnimationBack)); assertThat(parcel.readString(), is("TEST_TRANSITION"));
assertThat(view, is(notNullValue())); assertThat(view, instanceOf(WebView.class)); assertThat(fragment.getWebView(), is(view));
assertThat(fragment, is(notNullValue())); assertThat(fragment.getArguments(), is(args));
assertThat(request.exitTransition(transition), is(request)); assertThat(request.exitTransition(), is(transition)); assertThat(request.hasTransition(FragmentRequest.TRANSITION_EXIT), is(true));
assertThat(request.transaction(FragmentRequest.REMOVE), is(request)); assertThat(request.transaction(), is(FragmentRequest.REMOVE));
assertThat(request.returnTransition(transition), is(request)); assertThat(request.returnTransition(), is(transition)); assertThat(request.hasTransition(FragmentRequest.TRANSITION_RETURN), is(true));
assertThat(request.outgoingFragmentId(2), is(request)); assertThat(request.outgoingFragmentId(), is(2));
assertThat( fragment.inflateTransition(android.R.transition.fade), is(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? notNullValue() : nullValue()) );
assertThat(fragment.getContent(), is(TestFragmentWithWebContent.CONTENT));
assertThat( factory.onCreateFragmentTag(TestFactory.FRAGMENT_NOT_PROVIDED), is(BaseFragmentFactory.createFragmentTag(TestFactory.class, Integer.toString(TestFactory.FRAGMENT_NOT_PROVIDED))) ); assertThat( factory.onCreateFragmentTag(providedFragmentId), is(factory.getAnnotationHandler().getFragmentItems().get(providedFragmentId).tag) );
assertThat(state.containsKey(WebFragment.BUNDLE_OPTIONS), is(true)); assertThat(state.containsKey(WebFragment.BUNDLE_CONTENT), is(true)); assertThat(state.containsKey(WebFragment.BUNDLE_PRIVATE_FLAGS), is(true));
assertThat(fragment.inflateTransition(1), is(nullValue()));
assertThat(handler, is(notNullValue())); assertSame(handler.getAnnotatedClass(), AnnotatedComponent.class);
assertThat(fragment.isPaused(), is(false)); assertThat(fragment.isResumed(), is(true));
assertThat(request.allowStateLoss(true).allowStateLoss(), is(true)); assertThat(request.hasFlag(FragmentRequest.ALLOW_STATE_LOSS), is(true)); assertThat(request.allowStateLoss(false).allowStateLoss(), is(false)); assertThat(request.hasFlag(FragmentRequest.ALLOW_STATE_LOSS), is(false));
assertThat(request.allowReturnTransitionOverlap(false), is(request)); assertThat(request.allowReturnTransitionOverlap(), is(false)); assertThat(request.allowReturnTransitionOverlap(true), is(request)); assertThat(request.allowReturnTransitionOverlap(), is(true));
assertThat(BaseFragment.newInstanceWithArguments(AbstractTestFragment.class, new Bundle()), is(nullValue()));
assertThat(fragment.onBackPress(), is(true));
assertThat(fragment.isActionBarAvailable(), is(true)); assertThat(fragment.getActionBarDelegate(), is(notNullValue()));
assertThat(BaseFragmentFactory.createFragmentTag(TestFactory.class, ""), is(nullValue()));
assertThat(FragmentUtils.areAnimationsEnabled(context), is(true));
assertThat( factory.createFragmentTag(TestFactory.FRAGMENT_NOT_PROVIDED), nullValue() ); assertThat( factory.createFragmentTag(providedFragmentId), is(factory.getAnnotationHandler().getFragmentItems().get(providedFragmentId).tag) );
assertThat(item.newFragmentInstance(new Bundle()), is(nullValue()));
assertThat(fragment.invalidateOptionsMenu(), is(true));
assertThat(fragment.getAnnotationHandler(), is(notNullValue()));
assertThat(delegate.getActivity(), is(activity));
assertThat(request.executed(), is(false));
assertThat(fragment.getAnnotationHandler(), is(notNullValue()));
assertThat(fragment.dispatchBackPress(), is(fragment.onBackPressResult)); assertThat(fragment.dispatchBackPress(), is(fragment.onBackPressResult));
assertThat(handler, is(AnnotationHandlers.obtainHandler(Handler.class, AnnotatedComponent.class)));
assertThat(request, is(notNullValue())); assertThat(request.fragmentId(), is(FragmentRequest.NO_ID)); assertThat(request.tag(), is(nullValue())); assertThat(request.viewContainerId(), is(controller.getViewContainerId()));
assertThat(controller.findCurrentFragment(), is(mockFragment));
assertThat(fragment.inflateTransition(1), is(nullValue()));
assertThat(factory.createFragment(TestFactory.FRAGMENT_NOT_PROVIDED), is(nullValue())); assertThat(factory.createFragment(TestFactory.FRAGMENT_1), instanceOf(TestFragment1.class)); assertThat(factory.createFragment(TestFactory.FRAGMENT_3), instanceOf(TestFragment3.class)); assertThat(factory.createFragment(TestFactory.FRAGMENT_4), instanceOf(TestFragment4.class));
assertThat(fragment.isInActionMode(), is(false)); assertThat(fragment.getActionMode(), is(nullValue()));
assertThat(request.fragment(), is(mockFragment));
assertThat(FragmentAnnotations.obtainAnnotationFrom(ComponentAnnotation.class, Component.class, null), is(nullValue()));
assertThat(fragment, is(notNullValue())); assertThat(fragment.getArguments(), is(nullValue()));
assertThat(request.singleSharedElement(), is(notNullValue())); assertThat(request.singleSharedElement().first, is(firstElement)); assertThat(request.singleSharedElement().second, is("first_element")); assertThat(request.singleSharedElement(), is(notNullValue())); assertThat(request.singleSharedElement().first, is(firstElement)); assertThat(request.singleSharedElement().second, is("first_element"));
assertThat(view, is(nullValue()));
assertThat(fragment.getContent(), is(nullValue()));
assertThat(ActionBarDelegate.create(mockActivity), is(nullValue()));
assertThat(factory.providesFragment(TestFactory.FRAGMENT_NOT_PROVIDED), is(false)); assertThat(factory.providesFragment(providedFragmentId), is(true));
assertThat(annotationHandler, is(notNullValue())); assertThat(annotationHandler, is(fragment.onCreateAnnotationHandler()));
assertNotNull("The AsyncResult should not be \'null\', even though the task was \'null\'.", asyncResult); assertTrue(asyncResult.isCompleted()); assertNotNull(optionalException); assertTrue(optionalException.isPresent()); assertNotNull(exception); assertEquals(NullPointerException.class, exception.getClass()); assertNotNull(e.getMessage()); assertNotNull(e.getCause()); assertEquals(NullPointerException.class, e.getCause().getClass());
assertNull(fileLoader.loadData());
assertNotNull(items); assertEquals(INVENTORY_SIZE, items.size()); assertEquals(INVENTORY_SIZE, appender.getLogSize()); assertTrue(appender.log.get(i).getFormattedMessage().contains("items.size()=" + (i + 1)));
assertEquals(TASK_COUNT, ids.size()); assertEquals(TASK_COUNT, uniqueIdCount);
assertTrue(appender.logContains("Reader 1 begin")); assertTrue(appender.logContains("Reader 2 begin")); assertTrue(appender.logContains("Reader 1 finish")); assertTrue(appender.logContains("Reader 2 finish"));
assertNotNull("The AsyncResult should not be \'null\', even though the task and callback were \'null\'.", asyncResult); assertTrue(asyncResult.isCompleted()); assertNotNull(e.getMessage()); assertNotNull(e.getCause()); assertEquals(NullPointerException.class, e.getCause().getClass());
assertEquals(expectedValue, numberExpression.interpret());
assertTrue(appender.logContains("Writer 1 begin")); assertTrue(appender.logContains("Writer 1 finish")); assertTrue(appender.logContains("Writer 2 begin")); assertTrue(appender.logContains("Writer 2 finish"));
assertNotNull(asyncResult); assertTrue(asyncResult.isCompleted()); assertNotNull(optionalException); assertFalse(optionalException.isPresent()); assertSame(result, asyncResult.getValue());
assertNotNull(asyncResult); assertFalse(asyncResult.isCompleted()); assertNotNull(e.getMessage()); assertNotNull(optionalException); assertFalse(optionalException.isPresent()); assertTrue(asyncResult.isCompleted()); assertSame(result, asyncResult.getValue());
assertNotNull(expression); assertEquals(expectedToString, expression.toString());
assertNotNull(asyncResult); assertFalse(asyncResult.isCompleted()); assertNotNull(e.getMessage()); assertSame(result, executor.endProcess(asyncResult)); assertTrue(asyncResult.isCompleted()); assertSame(result, executor.endProcess(asyncResult));
assertNotNull("The AsyncResult should not be \'null\', even though the task was \'null\'.", asyncResult); assertTrue(asyncResult.isCompleted()); assertNotNull(e.getMessage()); assertNotNull(e.getCause()); assertEquals(NullPointerException.class, e.getCause().getClass());
assertEquals(userDto.getEmail(), "johndoe@whatever.com");
assertNotNull(items); assertNotNull(item); assertNotNull(item.getType()); assertNotNull(item.toString());
assertEquals(WashingMachineState.WASHING, machineStateGlobal);
assertNotNull(asyncResult); assertFalse(asyncResult.isCompleted()); assertNotNull(e.getMessage()); assertTrue(asyncResult.isCompleted()); assertSame(result, asyncResult.getValue());
assertNotNull(dataSource);
assertNotNull(expression); assertEquals(this.result, expression.interpret());
assertEquals(msg.getMsg(), testMsg);
assertEquals(this.expectedToString, this.testedPrototype.toString()); assertNotNull(clone); assertNotSame(clone, this.testedPrototype); assertSame(this.testedPrototype.getClass(), clone.getClass());
assertNotNull(message.getHeaders()); assertTrue(message.getHeaders().isEmpty()); assertNotNull(message.getHeaders()); assertFalse(message.getHeaders().isEmpty()); assertEquals(senderName, message.getHeaders().get(Message.Headers.SENDER));
assertTrue( "Expected all requests from King to be handled, but [" + request + "] was not!", request.isHandled() );
assertEquals(1, repository.getNextId()); assertEquals(2, repository.getNextId()); assertEquals(3, repository.getNextId());
assertNotNull(asyncResult); assertTrue(asyncResult.isCompleted()); assertSame(result, asyncResult.getValue());
assertNotNull(iterator); assertNotNull(item); assertEquals(this.expectedItem.getType(), item.getType()); assertNotNull(name);
assertEquals(expected, ResourceNames.ad(1234L, 5678L));
assertNotNull("toString should return a non-null string", toString); assertFalse("toString should return a non-empty string", toString.isEmpty());
assertEquals(expected, ResourceNames.adGroup(1234L, 5678L));
assertEquals(expected, ResourceNames.billingSetup(1234L, 5678L));
assertEquals(expected, ResourceNames.adGroupBidModifier(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.operatingSystemVersionConstant(1234L));
assertNotEquals("different instances should not be equal", clientA, clientB);
assertEquals(1, result.size()); assertEquals(error, result.get(0));
assertEquals(expected, ResourceNames.adGroup(1234L, 5678L));
assertEquals(expected, ResourceNames.currencyConstant("ABC"));
assertEquals(expected, ResourceNames.sharedSet(1234L, 5678L));
assertEquals(2, result.size()); assertEquals(error0, result.get(0)); assertEquals(error1, result.get(1));
assertEquals(expected, ResourceNames.changeStatus(1234L, "5678asd"));
assertEquals(expected, ResourceNames.adGroupCriterion(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.adGroupCriterion(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.changeStatus(1234L, "5678asd"));
assertEquals(expected, ResourceNames.remarketingAction(1234L, 5678L));
assertEquals(expected, ResourceNames.mobileDeviceConstant(1234L));
assertEquals("same instance should be equal", client, client);
assertEquals(expected, ResourceNames.campaign(1234L, 5678L));
assertEquals( expected, ResourceNames.googleAdsField("ad_group_criterion.effective_cpm_bid_micros"));
assertEquals(expected, ResourceNames.customer(1234L));
assertEquals(1, result.size()); assertEquals(error0, result.get(0));
assertEquals(expected, ResourceNames.geoTargetConstant(1234L));
assertEquals(expected, ResourceNames.changeStatus(1234L, "5678asd"));
assertEquals(expected, ResourceNames.mobileAppCategoryConstant(1234L));
assertEquals(expected, ResourceNames.keywordView(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.adScheduleView(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.adScheduleView(1234L, 5678L, 1011L));
assertTrue( "GAX/GRPC/Java platform headers missing", localChannelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
assertEquals(expected, ResourceNames.video(1234L, "5678asd"));
assertEquals(expected, ResourceNames.adScheduleView(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.campaignBidModifier(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.keywordView(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.billingSetup(1234L, 5678L));
assertEquals(expected, ResourceNames.mobileAppCategoryConstant(1234L));
assertTrue(p.parseArguments(args));
assertTrue( "linked customer ID not found", localChannelProvider.isHeaderSent( "linked-customer-id", Pattern.compile(String.valueOf(LINKED_CUSTOMER_ID))));
assertEquals(expected, ResourceNames.geoTargetConstant(1234L));
assertEquals(0, result.size());
assertEquals(expected, ResourceNames.mobileDeviceConstant(1234L));
assertEquals(expected, ResourceNames.keywordView(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.campaign(1234L, 5678L));
assertEquals(expected, ResourceNames.sharedCriterion(1234L, 5678L, 91011L));
assertEquals(expected, ResourceNames.adGroupAd(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.sharedSet(1234L, 5678L));
assertNotEquals( "Clients with distinct params should have distinct hashCodes", clientA.hashCode(), clientB.hashCode());
assertEquals(expected, ResourceNames.ad(1234L, 5678L));
assertEquals(expected, ResourceNames.sharedSet(1234L, 5678L));
assertEquals(expected, ResourceNames.currencyConstant("ABC"));
assertEquals(expected, ResourceNames.adParameter(1234L, 5678L, 1011L, 3L));
assertEquals(expected, ResourceNames.campaignCriterion(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.adGroupCriterion(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.customer(1234L));
assertEquals(expected, ResourceNames.mobileDeviceConstant(1234L));
assertEquals(exception, result);
assertEquals(expected, ResourceNames.adGroupBidModifier(1234L, 5678L, 1011L));
assertTrue("Failed to enable primer", Primer.isEnabled());
assertEquals(expected, ResourceNames.campaignCriterion(1234L, 5678L, 1011L));
assertTrue(p.parseArguments(args));
assertEquals(expected, ResourceNames.biddingStrategy(1234L, 5678L));
assertEquals(expected, ResourceNames.operatingSystemVersionConstant(1234L));
assertEquals(expected, ResourceNames.remarketingAction(1234L, 5678L));
assertEquals(expected, ResourceNames.accountBudgetProposal(1234L, 5678L));
assertEquals(expected, ResourceNames.mobileAppCategoryConstant(1234L));
assertEquals(expected, ResourceNames.campaignCriterion(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.adGroupBidModifier(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.campaignBudget(1234L, 5678L));
assertEquals(expected, ResourceNames.video(1234L, "5678asd"));
assertEquals(exception, result);
assertEquals(exception, result);
assertEquals(expected, ResourceNames.conversionAction(1234L, 5678L));
assertEquals(expected, ResourceNames.campaignSharedSet(1234L, 5678L, 91011L));
assertEquals(expected, ResourceNames.geoTargetConstant(1234L));
assertEquals(expected, ResourceNames.adGroupAd(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.accountBudgetProposal(1234L, 5678L));
assertFalse( "login customer ID header should be excluded if not configured", localChannelProvider.isHeaderSent("login-customer-id", Pattern.compile(".*")));
assertEquals(expected, ResourceNames.sharedCriterion(1234L, 5678L, 91011L));
assertEquals(1, result.size()); assertEquals(error0, result.get(0));
assertEquals(expected, ResourceNames.customer(1234L));
assertFalse(p.parseArguments(new String[] {}));
assertEquals(expected, ResourceNames.conversionAction(1234L, 5678L));
assertEquals(exception, result);
assertEquals(expected, ResourceNames.remarketingAction(1234L, 5678L));
assertEquals(0, result.size());
assertEquals(expected, ResourceNames.billingSetup(1234L, 5678L));
assertFalse("Failed to enable primer", Primer.isEnabled());
assertThat(v1.compareTo(v0), is(lessThan(0)));
assertEquals(expected, ResourceNames.campaignBidModifier(1234L, 5678L, 1011L));
assertEquals(0, result.size());
assertEquals( expected, ResourceNames.googleAdsField("ad_group_criterion.effective_cpm_bid_micros"));
assertEquals(expectedFailure, actualFailure);
assertEquals(expected, ResourceNames.sharedCriterion(1234L, 5678L, 91011L));
assertFalse("Failed to enable primer", Primer.isEnabled());
assertEquals(expected, ResourceNames.campaign(1234L, 5678L));
assertEquals(expected, ResourceNames.video(1234L, "5678asd"));
assertEquals(expected, ResourceNames.accountBudgetProposal(1234L, 5678L));
assertEquals(expected, ResourceNames.campaignSharedSet(1234L, 5678L, 91011L));
assertEquals(expected, ResourceNames.adGroup(1234L, 5678L));
assertEquals(expected, ResourceNames.campaignBudget(1234L, 5678L));
assertEquals(expected, ResourceNames.adParameter(1234L, 5678L, 1011L, 3L));
assertThat(v0.compareTo(v1), is(greaterThan(0)));
assertEquals(0, v0.compareTo(v0));
assertEquals(expected, ResourceNames.adGroupAd(1234L, 5678L, 1011L));
assertEquals(expected, ResourceNames.campaignSharedSet(1234L, 5678L, 91011L));
assertEquals(expected, ResourceNames.operatingSystemVersionConstant(1234L));
assertEquals(expected, ResourceNames.conversionAction(1234L, 5678L));
assertEquals(expected, ResourceNames.biddingStrategy(1234L, 5678L));
assertEquals(expected, ResourceNames.campaignBidModifier(1234L, 5678L, 1011L));
assertEquals( expected, ResourceNames.googleAdsField("ad_group_criterion.effective_cpm_bid_micros"));
assertEquals( ImmutableList.of("manual_cpc.enhanced_cpc_enabled"), FieldMasks.allSetFieldsOf(campaign).getPathsList());
assertEquals(0, result.size());
assertEquals(expected, ResourceNames.campaignBudget(1234L, 5678L));
assertEquals(expected, ResourceNames.ad(1234L, 5678L));
assertTrue( "login customer ID not found", localChannelProvider.isHeaderSent( "login-customer-id", Pattern.compile(String.valueOf(LOGIN_CUSTOMER_ID))));
assertEquals(expected, ResourceNames.adParameter(1234L, 5678L, 1011L, 3L));
assertFalse("Failed to enable primer", Primer.isEnabled());
assertEquals(expected, ResourceNames.biddingStrategy(1234L, 5678L));
assertTrue("Only ID is lightweight", lightweight.isLightweight()); assertTrue("Only ID and empty users list is still lightweight", lightweight.isLightweight()); assertFalse("Any property in addition to ID are not lightweight", heavyweight.isLightweight()); assertFalse("Fully hydrated tenants are not lightweight", heavyweight.isLightweight());
assertNull(toTest.getPropertyValue(null));
assertTrue(x == deadReckoning.delta[0]); assertTrue(y == deadReckoning.delta[1]);
assertTrue(test == userLocator.calculateWaySnappedPoint(test));
assertEquals(50721722, geoPointOut1.getLatitudeE6()); assertEquals(7061680, geoPointOut1.getLongitudeE6());
assertTrue(deadReckoning.detectMovement());
assertNull(toTest.getPropertyValue(null));
assertEquals(expected, geoPointsOut);
assertEquals(expected, geoPointsOut);
assertEquals(50722199, geoPointOut1.getLatitudeE6()); assertEquals(7061635, geoPointOut1.getLongitudeE6());
assertEquals(Robolectric.application.getResources().getInteger(R.integer.compass_low_pass_filter_weight) / 100.f, ((CompassFilter) deadReckoning.compassBuffer.getFilter()).getWeight());
assertEquals(geoPointIn.getLatitudeE6(), geoPointOut.getLatitudeE6()); assertEquals(geoPointIn.getLongitudeE6(), geoPointOut.getLongitudeE6());
assertEquals(expected, geoPointsOut);
assertEquals(expected, geoPointsOut);
assertEquals(intent.getStringExtra("MapName"), testMapName);
assertTrue(0.f == deadReckoning.delta[0]); assertTrue(0.f == deadReckoning.delta[1]);
assertEquals(expected, geoPointsOut);
assertEquals(0, pl.size()); assertEquals(1, pl.size()); assertEquals(3, pl.size());
assertEquals(second, toTest.getPropertyValue(Property.MAP_PROVIDER_SCHEMA));
assertEquals(0.0, dstPoint.getX()); assertEquals(0.0, dstPoint.getY());
assertEquals(expected1, geoPointOut1); assertEquals(expected2, geoPointOut2); assertEquals(expected3, geoPointOut3);
assertEquals(0.54f, current.getX(), 0.25f); assertEquals(1.548f, current.getY(), 0.25f);
assertEquals(0, mapList.size());
assertNull(new ResourceValueProvider(null).getPropertyValue(p));
assertEquals(atp.getMaximumZoomLevel(), 7); assertEquals(atp.getMaximumZoomLevel(), 42);
assertEquals(expected, geoPointsOut);
assertEquals(4.f, pos.getX(), 0.2f); assertEquals(5.f, pos.getY(), 0.2f);
assertEquals(String.valueOf(p.getResourceId()), toTest.getPropertyValue(p));
assertEquals(expectedResult, nicGeoPoint.getY(), 0);
assertEquals(expected, geoPointsOut);
assertEquals(5.0, history.getMedianPoint().getX(), delta); assertEquals(5.0, history.getMedianPoint().getY(), delta);
assertEquals(1f, ((CompassFilter) deadReckoning.compassBuffer.getFilter()).getWeight());
assertEquals(point, item.getGeoPoint());
assertEquals(11f/6f, dstPoint.getX(), delta); assertEquals(15f/6f, dstPoint.getY(), delta);
assertTrue(intent1.getStringExtra("MapName").equals("test1")); assertTrue(intent2.getStringExtra("MapName").equals("test2"));
assertEquals(0.f, deadReckoning.delta[0], 0.02f); assertEquals(1.f, deadReckoning.delta[1], 0.02f);
assertEquals(expectedResult, nicGeoPointDecimal.getX(), delta); assertEquals(expectedResult, nicGeoPointE6.getX(), delta);
assertEquals(0.0, dstPoint.getX()); assertEquals(0.0, dstPoint.getY());
assertTrue(x == deadReckoning.delta[0]); assertTrue(y == deadReckoning.delta[1]);
assertFalse(activitySpy.isNetworkAvailable());
assertEquals(expectedResult, nicGeoPointDecimal.getX(), delta); assertEquals(expectedResult, nicGeoPointE6.getX(), delta);
assertEquals(expected, geoPointsOut);
assertTrue(toTest.providerChain.size() >= 2); assertTrue(toTest.providerChain.get(1) instanceof ResourceValueProvider);
assertEquals(boxIn.getLatNorthE6(), boxOut.getLatNorthE6()); assertEquals(boxIn.getLonEastE6(), boxOut.getLonEastE6()); assertEquals(boxIn.getLatSouthE6(), boxOut.getLatSouthE6()); assertEquals(boxIn.getLonWestE6(), boxOut.getLonWestE6());
assertTrue(activity.getMapView().getOverlays().contains(activity.wayOverlay)); assertFalse(activity.getMapView().getOverlays().contains(activity.wayOverlay));
assertEquals(expectedMapList.size(), mapList.size()); assertTrue(mapList.containsAll(expectedMapList));
assertEquals(expected, geoPointsOut);
assertEquals(50721722, geoPointOut.getLatitudeE6()); assertEquals(7061714, geoPointOut.getLongitudeE6());
assertEquals(p1.getX(), dstPoint.getX(), delta); assertEquals(p1.getY(), dstPoint.getY(), delta);
assertNull(toTest.getPropertyValueAsInt(null));
assertEquals(p, q); assertEquals(3, p.size()); assertEquals(2, q.size());
assertEquals(expected, geoPointsOut);
assertEquals(5.1, pl.calculateMedianReferencePointDistance(referencePoint), delta);
assertEquals(json, resultString);
assertEquals(expectedResult, nicGeoPointDecimal.getY(), delta); assertEquals(expectedResult, nicGeoPointE6.getY(), delta);
assertEquals(0.0, dstPoint.getX()); assertEquals(0.0, dstPoint.getY());
assertEquals(expectedResult, nicGeoPoint.getX(), 0);
assertEquals(expectedResult, nicGeoPointDecimal.getY(), delta); assertEquals(expectedResult, nicGeoPointE6.getY(), delta);
assertEquals(2.875f, dstPoint.getX(), delta); assertEquals(2.375f, dstPoint.getY(), delta);
assertEquals(expected, geoPointsOut);
assertEquals(10.f, result.getX(), 0.15f); assertEquals(12.f, result.getY(), 0.15f);
assertNull(toTest.getPropertyValue(null));
assertEquals(0.966f, pf.particleList.get(0).getWeight(), 0.01f); assertEquals(0.034f, pf.particleList.get(1).getWeight(), 0.01f);
assertEquals(expected, geoPointsOut);
assertEquals(expected, geoPointsOut);
assertEquals(expectedLatitude, nicGeoPoint.getLatitudeE6()); assertEquals(expectedLongitude, nicGeoPoint.getLongitudeE6());
assertEquals(expected, geoPointsOut);
assertNull(toTest.getPropertyValue(null));
assertEquals(expected, geoPointsOut);
assertEquals(p.getDefaultValue(), toTest.getPropertyValue(p));
assertEquals(expected, geoPointsOut);
assertEquals(expected, geoPointsOut);
assertFalse(deadReckoning.detectMovement());
assertEquals(3.6, history.getAveragePoint().getX(), delta); assertEquals(3.6, history.getAveragePoint().getY(), delta);
assertTrue(1 == toTest.getPropertyValueAsInt(Property.MAP_PROVIDER_SCHEMA));
assertEquals(expected, geoPointsOut);
assertEquals(expectedMapList.size(), mapList.size()); assertTrue(mapList.containsAll(expectedMapList));
assertEquals(3.1f, pf.particleList.get(0).getX(), 0.01f); assertEquals(2.6f, pf.particleList.get(0).getY(), 0.01f); assertEquals(6.1f, pf.particleList.get(1).getX(), 0.01f); assertEquals(5.6f, pf.particleList.get(1).getY(), 0.01f);
assertEquals(expected, geoPointsOut);
assertTrue(description.contains("123")); assertTrue(description.contains("432")); assertTrue(description.contains("38816025")); assertTrue(description.contains("14208363")); assertTrue(description.contains("3.14159"));
assertEquals(expected, geoPointsOut);
assertEquals(1, histogram.size()); assertTrue(histogram.keySet().contains("00:01:02:03:04:05")); assertEquals(2, levels.size()); assertEquals(1.0 / 3.0, levels.get(-40), 0.00001); assertEquals(2.0 / 3.0, levels.get(-50), 0.00001);
assertEquals(1.8657f, dstPoint.getX(), delta); assertEquals(2.4925f, dstPoint.getY(), delta);
assertTrue(pointResult.getX()!=0.0); assertTrue(pointResult.getY()!=0.0);
assertTrue(0 == deadReckoning.baseAngle); assertTrue(0 == deadReckoning.baseAngle); assertTrue(0 == deadReckoning.baseAngle); assertTrue(0 == deadReckoning.baseAngle);
assertEquals( tileName + "/" + tile.getZoomLevel() + "/" + tile.getX() + "/" + toTest.getYinTMSFormat(tile.getZoomLevel(), tile.getY()) + fileEnding, result);
assertEquals(9f/3f, dstPoint.getX(), delta); assertEquals(7f/3f, dstPoint.getY(), delta);
assertEquals(Math.PI/2, deadReckoning.baseAngle, 0.01f);
assertEquals(3, rlh.size()); assertEquals(-21.5f, rlh.get("00:01:02:03:04:05"), 0.00001); assertEquals(-42f, rlh.get("a0:b0:c0:d0:e0:f0"), 0.00001); assertEquals(-35f, rlh.get("01:23:45:67:89:ab"), 0.00001);
assertEquals(expected1, geoPointOut1); assertTrue(geoPointOut2.equals(expected2a) || geoPointOut2.equals(expected2b)); assertEquals(expected3, geoPointOut3);
assertFalse(activitySpy.isNetworkAvailable());
assertEquals(p1.getX(), dstPoint.getX(), delta); assertEquals(p1.getY(), dstPoint.getY(), delta);
assertEquals(expected, geoPointsOut);
assertEquals(2.6876f, dstPoint.getX(), delta); assertEquals(2.375f, dstPoint.getY(), delta);
assertEquals(3, rlh.size()); assertEquals(-22.7f, rlh.get("00:01:02:03:04:05"), 0.00001); assertEquals(-42f, rlh.get("a0:b0:c0:d0:e0:f0"), 0.00001); assertEquals(-38.3f, rlh.get("01:23:45:67:89:ab"), 0.00001);
assertEquals(0, toTest.getYinTMSFormat(0, 0)); assertEquals(63, toTest.getYinTMSFormat(6, 0));
assertEquals(expected, geoPointsOut);
assertEquals(1.1f, pf.particleList.get(0).getX(), 0.01f); assertEquals(5.1f, pf.particleList.get(1).getX(), 0.01f); assertEquals(5.1f, pf.particleList.get(2).getX(), 0.01f); assertEquals(5.1f, pf.particleList.get(3).getX(), 0.01f);
assertEquals(1.8567f, dstPoint.getX(), delta); assertEquals(2.4925f, dstPoint.getY(), delta);
assertEquals(50721722, geoPointOut1.getLatitudeE6()); assertEquals(7061710, geoPointOut1.getLongitudeE6()); assertEquals(50722081, geoPointOut2.getLatitudeE6()); assertEquals(7061511, geoPointOut2.getLongitudeE6());
assertEquals(p1.getX(), dstPoint.getX(), delta); assertEquals(p1.getY(), dstPoint.getY(), delta);
assertThat(square, equalTo(100));
assertThat(c, equalTo(result));
assertThat(P01.last(asList("a", "b", "c", "d")), is(equalTo("d")));
assertThat(permutation, hasSize(6)); assertThat(permutation, containsInAnyOrder("a", "b", "c", "d", "e", "f"));
assertThat(groups, hasSize(756));
assertThat(acronym, equalTo("LASER"));
assertThat(primeNumbers, hasSize(4)); assertThat(primeNumbers, hasItems(2, 3, 5, 7));
assertThat(result, hasSize(8)); assertThat(result, contains("a", "b", "d", "e", "g", "h", "j", "k"));
assertThat(numbers, hasSize(2)); assertThat(numbers, hasItems(5, 23));
assertThat(compositions, hasSize(6)); assertThat(compositions, hasItems( new SimpleEntry<>(10, Arrays.asList(3, 7)), new SimpleEntry<>(12, Arrays.asList(5, 7)), new SimpleEntry<>(14, Arrays.asList(3, 11)), new SimpleEntry<>(16, Arrays.asList(3, 13)), new SimpleEntry<>(18, Arrays.asList(5, 13)), new SimpleEntry<>(20, Arrays.asList(3, 17)) ));
assertThat(acronym, equalTo("JTW"));
assertThat(groups, hasSize(1260));
assertFalse(isPalindrome(Arrays.asList(1, 2, 3, 4, 5)));
assertFalse(balanced);
assertThat(result, hasSize(3));
assertThat(compressedList, hasSize(6)); assertThat(compressedList, contains("a", "b", "c", "a", "d", "e"));
assertThat(P03.kthStream(numbers, 2), is(equalTo(3)));
assertThat(P03.kthRecursive(numbers, 2), is(equalTo(3)));
assertThat(compositions, hasSize(4)); assertThat(compositions, hasItems( new SimpleEntry<>(992, Arrays.asList(73, 919)), new SimpleEntry<>(1382, Arrays.asList(61, 1321)), new SimpleEntry<>(1856, Arrays.asList(67, 1789)), new SimpleEntry<>(1928, Arrays.asList(61, 1867)) ));
assertFalse(balanced);
assertThat(P05.reverse(numbers), is(equalTo(Arrays.asList(5, 4, 3, 2, 1))));
assertThat(numbers, hasSize(2)); assertThat(numbers, hasItems(3, 5));
assertThat(combinations, hasSize(20));
assertThat(primeFactors, hasItems(new SimpleEntry<>(3, 2), new SimpleEntry<>(5, 1), new SimpleEntry<>(7, 1)));
assertThat(p, equalTo(new IntPair(13, 14)));
assertThat(p, equalTo(4));
assertThat(position, equalTo(4));
assertThat(primeNumbers, hasSize(4)); assertThat(primeNumbers, hasItems(2, 3, 5, 7));
assertThat(p, equalTo(new IntPair(3, 19)));
assertThat(result, hasSize(2)); assertThat(result, contains("a", "b"));
assertThat(packedList, hasSize(2)); assertThat(packedList.get(0), contains("a")); assertThat(packedList.get(1), contains("b"));
assertThat(P05.reverse_customStream(numbers), is(equalTo(Arrays.asList(5, 4, 3, 2, 1))));
assertThat(compressedList, hasSize(5)); assertThat(compressedList, contains("a", "b", "c", "d", "e"));
assertThat(sum, equalTo(55));
assertThat(pairs, contains(new SimpleEntry<>(1, 9), new SimpleEntry<>(3, 5)));
assertThat(primeFactors, hasItems(3, 3, 5, 7));
assertThat(randomList, hasSize(6));
assertThat(range, hasSize(6)); assertThat(range, contains(4, 5, 6, 7, 8, 9));
assertThat(result, hasSize(5)); assertThat(result, contains("alfa", "a", "b", "c", "d"));
assertThat(sortedArr, CoreMatchers.equalTo(new int[]{1, 2, 3, 4, 5}));
assertThat(l, equalTo("mmmmmmmmmmmmmmmm"));
assertThat(acronym, equalTo("USA"));
assertThat(groups, hasSize(1260));
assertThat(numbers, hasSize(2)); assertThat(numbers, hasItems(2, 2));
assertTrue(isPalindrome(Arrays.asList("x", "a", "m", "a", "x")));
assertThat(s, equalTo("ccddcc"));
assertTrue(balanced);
assertThat(length, is(equalTo(0)));
assertThat(P01.last(alphabets), is(equalTo("d")));
assertThat(result, hasSize(5)); assertThat(result, contains("a", "b", "c", "d", "alfa"));
assertThat(result[0], equalTo(Arrays.asList("a", "c", "d"))); assertThat(result[1], equalTo("b"));
assertThat(rotated, equalTo(Arrays.asList("g", "h", "a", "b", "c", "d", "e", "f")));
assertThat(primeNumbers, hasSize(8)); assertThat(primeNumbers, hasItems(7, 11, 13, 17, 19, 23, 29, 31));
assertThat(duplicates, hasSize(9)); assertThat(duplicates, contains("a", "a", "a", "b", "b", "b", "c", "c", "c"));
assertFalse(prime);
assertThat(graySequence, contains("00", "01", "11", "10"));
assertThat(P01.lastRecursive(asList("a", "b", "c", "d")), is(equalTo("d")));
assertThat(position, equalTo(0));
assertThat(slice, hasSize(5)); assertThat(slice, contains("c", "d", "e", "f", "g"));
assertThat(reversedNumbers, equalTo(Stream.of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1).collect(toCollection(LinkedList::new))));
assertThat(primeFactors, hasItems(3, 11));
assertTrue(flatten.isEmpty());
assertThat(result[0], equalTo(Arrays.asList("a", "c", "d"))); assertThat(result[1], equalTo("b"));
assertTrue(isPalindrome(Arrays.asList("x", "a", "m", "a", "x")));
assertThat(p, equalTo(new IntPair(3, 19)));
assertThat(flatten, hasSize(5)); assertThat(flatten, hasItems("a", "b", "c", "d", "e"));
assertThat(duplicates, hasSize(8)); assertThat(duplicates, contains("a", "a", "b", "b", "c", "c", "d", "d"));
assertThat(result, hasSize(3));
assertThat(result, hasSize(5)); assertThat(result, contains("a", "b", "c", "d", "alfa"));
assertThat(rotated, equalTo(Arrays.asList("d", "e", "f", "g", "h", "a", "b", "c")));
assertTrue(coprime);
assertThat(phi, equalTo(4L));
assertThat(result, hasSize(5)); assertThat(result, contains("alfa", "a", "b", "c", "d"));
assertThat(result, is(equalTo(Arrays.asList(Arrays.asList("o"), Arrays.asList("d", "e"), Arrays.asList("d", "e"), Arrays.asList("m", "n"), Arrays.asList("a", "b", "c"), Arrays.asList("f", "g", "h"), Arrays.asList("i", "j", "k")))));
assertFalse(patternExists);
assertThat(primeFactors, hasItems(new SimpleEntry<>(3, 1), new SimpleEntry<>(11, 1)));
assertThat(flatten, hasSize(8)); assertThat(flatten, hasItems("a", "b", "c", "d", "e", "f", "g", "h"));
assertTrue(balanced);
assertThat(s, equalTo("racecar"));
assertThat(result, hasSize(5)); assertThat(result, contains("a", "alfa", "b", "c", "d"));
assertTrue(patternExists);
assertThat(packedList, hasSize(3)); assertThat(packedList.get(0), contains("a", "a")); assertThat(packedList.get(1), contains("b")); assertThat(packedList.get(2), contains("a"));
assertThat(P04.length(Arrays.asList(1, 2, 3, 4, 5)), is(equalTo(5)));
assertThat(P02.secondLast(numbers), is(equalTo(10)));
assertThat(P03.kth(numbers, 2), is(equalTo(3)));
assertThat(result, hasSize(3));
assertThat(combinations, hasSize(15));
assertThat(flatten, hasSize(8)); assertThat(flatten, hasItems("a", "b", "c", "d", "e", "f", "g", "h"));
assertThat(gcd, equalTo(9));
assertThat(mode, CoreMatchers.equalTo(3));
assertThat(flatten, hasSize(5)); assertThat(flatten, hasItems("a", "b", "c", "d", "e"));
assertThat(rotated, equalTo(Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h")));
assertThat(result, is(equalTo(Arrays.asList(Arrays.asList("i", "j", "k", "l"), Arrays.asList("o"), Arrays.asList("a", "b", "c"), Arrays.asList("f", "g", "h"), Arrays.asList("d", "e"), Arrays.asList("d", "e"), Arrays.asList("m", "n")))));
assertThat(result.get(true), contains("a", "b", "c")); assertThat(result.get(false), contains("d", "e", "f", "g", "h", "i", "k"));
assertThat(encoded, hasSize(14));
assertThat(combinations, hasSize(3));
assertThat(teams.get(0), CoreMatchers.equalTo(Arrays.asList(new Player("d", 2), new Player("e", 4), new Player("b", 7)))); assertThat(teams.get(1), CoreMatchers.equalTo(Arrays.asList(new Player("a", 10), new Player("c", 11), new Player("f", 15))));
assertThat(acronym, equalTo("USA"));
assertThat(primeNumbers, hasSize(8)); assertThat(primeNumbers, hasItems(7, 11, 13, 17, 19, 23, 29, 31));
assertThat(P04.lengthRecursive(Arrays.asList(1, 2, 3, 4, 5)), is(equalTo(5)));
assertThat(P05.reverse_IntStream(numbers), is(equalTo(Arrays.asList(5, 4, 3, 2, 1))));
assertThat(groups, hasSize(3));
assertTrue(pair);
assertThat(length, is(equalTo(0)));
assertThat(result, hasSize(5)); assertThat(result, contains("a", "alfa", "b", "c", "d"));
assertThat(graySequence, contains("0", "1"));
assertThat(P02.secondLastRecursion(numbers), is(equalTo(10)));
assertThat(packedList, hasSize(6)); assertThat(packedList.get(0), contains("a", "a", "a", "a")); assertThat(packedList.get(1), contains("b")); assertThat(packedList.get(2), contains("c", "c")); assertThat(packedList.get(3), contains("a", "a")); assertThat(packedList.get(4), contains("d")); assertThat(packedList.get(5), contains("e", "e", "e", "e"));
assertThat(p, equalTo(new IntPair(6, 8)));
assertThat(flatten, hasSize(5)); assertThat(flatten, hasItems("a", "b", "c", "d", "e"));
assertFalse(isPalindrome(Arrays.asList(1, 2, 3, 4, 5)));
assertThat(s, equalTo("geeksskeeg"));
assertThat(result, hasSize(11)); assertThat(result, contains("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"));
assertThat(graySequence, contains("000", "001", "011", "010", "110", "111", "101", "100"));
assertThat(s, equalTo("saas"));
assertTrue(prime);
assertThat(sumOfNNumbers, equalTo(55));
assertThat(p, equalTo(60));
assertThat(position, equalTo(2));
assertNull(entityInspector.getLastEntityContainer());
assertFalse( "Node lying on edge of filter area not considered inside area.", polyAreaFilter.isNodeWithinArea(edgeNode));
assertTrue( "Node lying on South edge of filter area not considered inside area", simpleAreaFilter.isNodeWithinArea(edgeNodeSouth));
assertTrue(Double.compare(compareBound.getRight(), 20) == 0); assertTrue(Double.compare(compareBound.getLeft(), 10) == 0); assertTrue(Double.compare(compareBound.getTop(), 20) == 0); assertTrue(Double.compare(compareBound.getBottom(), 10) == 0); assertTrue(compareBound.getOrigin().equals("intersecting"));
assertTrue(Double.compare(compareBound.getRight(), 20) == 0); assertTrue(Double.compare(compareBound.getLeft(), -20) == 0); assertTrue(Double.compare(compareBound.getTop(), 20) == 0); assertTrue(Double.compare(compareBound.getBottom(), -20) == 0); assertTrue(compareBound.getOrigin().equals("crossing intersecting"));
assertTrue( "Node lying on East edge of filter area not considered inside area", simpleAreaFilter.isNodeWithinArea(edgeNodeEast));
assertTrue(Double.compare(compareBound.getRight(), 20) == 0); assertTrue(Double.compare(compareBound.getLeft(), 0) == 0); assertTrue(Double.compare(compareBound.getTop(), 20) == 0); assertTrue(Double.compare(compareBound.getBottom(), 0) == 0); assertTrue(compareBound.getOrigin().equals("intersecting"));
assertFalse( "Node lying outside filter area not considered outside area.", polyAreaFilter.isNodeWithinArea(outOfAreaNode));
assertTrue( "Node lying inside filter area not considered inside area", simpleAreaFilter.isNodeWithinArea(inAreaNode));
assertTrue( "Node lying inside filter area not considered inside area.", polyAreaFilter.isNodeWithinArea(inAreaNode));
assertFalse( "Node lying outside filter area not considered outside area", simpleAreaFilter.isNodeWithinArea(outOfAreaNode));
assertTrue(strArray[0].matches(relationOpeningMatch)); assertTrue(strArray[1].matches(nodeMemberMatch)); assertTrue(strArray[2].matches(wayMemberMatch)); assertTrue(strArray[3].matches(relationMemberMatch)); assertTrue(strArray[4].matches(relationClosingMatch));
assertTrue("Way opening element does not match.", strArray[0].matches(wayOpeningMatch)); assertTrue("Way node 1 does not match.", strArray[1].matches(wayNode1Match)); assertTrue("Way node 2 does not match.", strArray[2].matches(wayNode2Match)); assertTrue("Way closing element does not match.", strArray[3].matches(wayClosingMatch));
assertTrue( "Node lying on North edge of filter area not considered inside area", simpleAreaFilter.isNodeWithinArea(edgeNodeNorth));
assertTrue("Way opening element does not match.", strArray[0].matches(wayOpeningMatch)); assertTrue("Way node 1 does not match.", strArray[1].matches(wayNode1Match)); assertTrue("Way node 2 does not match.", strArray[2].matches(wayNode2Match)); assertTrue("Way tag does not match.", strArray[3].matches(wayTagMatch)); assertTrue("Way closing element does not match.", strArray[4].matches(wayClosingMatch));
assertTrue(testWriter.toString().equals(""));
assertTrue("Node opening element does not match.", strArray[0].matches(nodeOpeningMatch)); assertTrue("Node tag does not match.", strArray[1].matches(nodeTagMatch)); assertTrue("Node closing element does not match.", strArray[2].matches(nodeClosingMatch));
assertNull(entityInspector.getLastEntityContainer());
assertEquals("Object not equal after retrieval from store", user1, user2); assertEquals("Object not equal after retrieval from store", user3, user4); assertEquals("Object not equal after retrieval from store", user5, user6);
assertTrue( "Node lying on West edge of filter area not considered inside area", simpleAreaFilter.isNodeWithinArea(edgeNodeWest));
assertTrue(decoded.getScheduledDeliveryTime().longValue() > System.currentTimeMillis());
assertEquals(data[i], slice.get()); assertFalse(slice.hasRemaining());
assertTrue("bytes read should be < 0", bytes < 0);
assertEquals(result, stringResult);
assertEquals(testString, buffer.readString(StandardCharsets.UTF_8.newDecoder()));
assertEquals(RoutingType.ANYCAST, decoded.getRoutingType());
assertEquals(timestamp.getTime(), decoded.getTimestamp());
assertFalse(queueConsumers.hasNext()); assertTrue(queueConsumers.hasNext()); assertFalse(queueConsumers.hasNext()); assertEquals(0, queueConsumers.getPriorites().size());
assertEquals("aA", ByteUtil.toSimpleString(new byte[]{97, 0, 65, 0})); assertEquals(ByteUtil.NON_ASCII_STRING, ByteUtil.toSimpleString(new byte[]{0, 97, 0, 65}));
assertNull(decoded.getRoutingType()); assertEquals(type, decoded.getRoutingType());
assertEquals(data.length, buffer.limit()); assertEquals(1, buffer.limit()); assertEquals(1, buffer.get()); assertFalse(buffer.hasRemaining());
assertEquals(testFileSize, file2.size());
assertEquals(expirationTime.getTime(), decoded.getExpiration());
assertEquals(1, tag.length); assertEquals(2, tag.length);
assertTrue(iterator.hasNext()); assertEquals(Integer.valueOf(i), iterator.next()); assertTrue(iterator.hasNext()); assertNotNull(iterator.next()); assertFalse(iterator.hasNext());
assertEquals(0, buffer.getFloat(), 0.0); assertFalse(buffer.hasRemaining());
assertEquals(0, bytes);
assertNotSame(decoded, protonMessage.getDeliveryAnnotations());
assertNull(map.put("hello", "world")); assertNull(map.put("hello", "world2")); assertEquals(0, map.size());
assertEquals(map.putIfAbsent(1, "one"), null); assertEquals(map.get(1), "one"); assertEquals(map.putIfAbsent(1, "uno"), "one"); assertEquals(map.get(1), "one");
assertEquals(0, decoded.getExpiration()); assertEquals(expirationTime.getTime(), decoded.getExpiration());
assertEquals(RoutingType.MULTICAST, decoded.getRoutingType());
assertThat(testSet, hasSize(10_000)); assertThat(distinctElements, is(10_000));
assertEquals(testResourceDivertName, ResourceNames.getRetroactiveResourceDivertName(prefix, delimiter, testAddress).toString());
assertFalse(buffer.hasRemaining()); assertArrayEquals(data, target); assertTrue(buffer.hasRemaining()); assertEquals(data.length, buffer.remaining()); assertFalse(buffer.hasRemaining()); assertArrayEquals(data, target);
assertEquals(scheduledTime, decoded.getScheduledDeliveryTime().longValue());
assertNotNull(argument.getValue());
assertEquals(RoutingType.ANYCAST, decoded.getRoutingType());
assertEquals(10, messageGroups.size()); assertEquals(6, messageGroups.size()); assertEquals(5, messageGroups.size()); assertEquals(4, messageGroups.size()); assertEquals(0, messageGroups.size());
assertNotSame(tag1, tag2); assertNotSame(tag1, tag3); assertNotSame(tag3, tag2); assertFalse(Arrays.equals(tag1, tag2)); assertFalse(Arrays.equals(tag1, tag3)); assertFalse(Arrays.equals(tag3, tag2));
assertEquals(fileLength, file.size()); assertTrue("bytes read should be < 0", bytes < 0);
assertEquals(0, values.size());
assertSame(buffer, writable.getByteBuf());
assertNull(decoded.getReplyTo());
assertNull(decoded.getGroupID());
assertNull(decoded.getGroupID());
assertEquals(0, messageGroups.size()); assertEquals(1, messageGroups.size()); assertEquals(2, messageGroups.size()); assertEquals(2, messageGroups.size());
assertEquals(0, decoded.getExpiration());
assertEquals(data[i], buffer.get()); assertFalse(buffer.hasRemaining()); assertTrue(buffer.hasRemaining()); assertEquals(data[i], buffer.get());
assertEquals(RoutingType.ANYCAST, decoded.getRoutingType());
assertNotNull(argument.getValue());
assertNull(decoded.getRoutingType());
assertNull(decoded.getReplyTo());
assertTrue(map.isEmpty());
assertEquals(data.length, nioBuffer.remaining()); assertEquals(data[i], nioBuffer.get());
assertEquals(1, file.size()); assertEquals(bufferSize, file.size());
assertNotSame(decoded, protonMessage.getHeader());
assertEquals(1, buffer.getLong()); assertFalse(buffer.hasRemaining());
assertTrue(map.isEmpty()); assertNull(map.put(1, "one")); assertFalse(map.isEmpty()); assertFalse(map.remove(0, "zero")); assertFalse(map.remove(1, "uno")); assertFalse(map.isEmpty()); assertTrue(map.remove(1, "one")); assertTrue(map.isEmpty());
assertEquals(0, buffer.getDouble(), 0.0); assertFalse(buffer.hasRemaining());
assertEquals(0, decoded.getExpiration());
assertNotSame(decoded, protonMessage.getFooter());
assertNotNull(argument.getValue());
assertEquals(1, buffer.getShort()); assertFalse(buffer.hasRemaining());
assertEquals(0L, decoded.getTimestamp());
assertEquals(null, decoded.getConnectionID());
assertEquals(0, msg.refCnt()); assertEquals(0, msg.readableBytes()); assertTrue(frame instanceof BinaryWebSocketFrame); assertTrue(frame.isFinalFragment()); assertEquals(content, frame.content().toString(StandardCharsets.UTF_8));
assertEquals(testResourceMulticastQueueName, ResourceNames.getRetroactiveResourceQueueName(prefix, delimiter, testAddress, RoutingType.MULTICAST).toString()); assertEquals(testResourceAnycastQueueName, ResourceNames.getRetroactiveResourceQueueName(prefix, delimiter, testAddress, RoutingType.ANYCAST).toString());
assertEquals(RoutingType.MULTICAST, decoded.getRoutingType());
assertEquals("fd00::d7dc:b4cc:2e2a:ea1", IPV6Util.stripBracketsAndZoneID("[fd00::d7dc:b4cc:2e2a:ea1%enp0s3]")); assertEquals("127.0.0.1", IPV6Util.stripBracketsAndZoneID("127.0.0.1"));
assertEquals(0L, decoded.getTimestamp());
assertTrue(set.isEmpty()); assertTrue(set.add(new TestPriorityAware(1))); assertFalse(set.isEmpty()); assertFalse(set.remove(new TestPriorityAware(0))); assertFalse(set.isEmpty()); assertTrue(set.remove(new TestPriorityAware(1))); assertTrue(set.isEmpty());
assertEquals(buffer.maxCapacity(), writable.remaining()); assertEquals(buffer.maxCapacity() - 1, writable.remaining());
assertTrue(iterator.hasNext()); assertEquals(Integer.valueOf(i), iterator.next()); assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertEquals(Integer.valueOf(i), iterator.next()); assertFalse(iterator.hasNext());
assertThat(align(0, alignment), is(0)); assertThat(align(1, alignment), is(alignment)); assertThat(align(alignment, alignment), is(alignment)); assertThat(align(alignment + 1, alignment), is(alignment * 2)); assertThat(align(alignedMax, alignment), is(alignedMax)); assertThat(align(Integer.MAX_VALUE, alignment), is(Integer.MIN_VALUE));
assertEquals(0, decoded.getExpiration());
assertEquals(data[i], buffer.get()); assertFalse(buffer.hasRemaining()); assertTrue(buffer.hasRemaining()); assertEquals(data[i], buffer.get());
assertEquals(data[i], buffer.get()); assertFalse(buffer.hasRemaining()); assertTrue(buffer.hasRemaining()); assertEquals(data[i], buffer.get());
assertNotNull(argument.getValue());
assertEquals(data[i], buffer.get()); assertFalse(buffer.hasRemaining());
assertEquals(testAddress.toString(), ResourceNames.decomposeRetroactiveResourceAddressName(prefix, delimiter, testResourceAddressName));
assertEquals(bufferSize, file.size()); assertEquals(bufferSize, copy.size()); assertEquals(bufferSize, file.size());
assertEquals(buffer.capacity(), writable.limit());
assertEquals(AMQPStandardMessage.DEFAULT_MESSAGE_PRIORITY, decoded.getPriority());
assertTrue(set.isEmpty()); assertTrue(set.add(1)); assertFalse(set.isEmpty()); assertFalse(set.remove(0)); assertFalse(set.isEmpty()); assertTrue(set.remove(1)); assertTrue(set.isEmpty());
assertNotNull(buffer); assertTrue(buffer.hasArray()); assertTrue(Arrays.equals(encodedProtonMessage, buffer.array()));
assertEquals(null, decoded.getDuplicateProperty());
assertEquals(null, decoded.getConnectionID()); assertEquals(ID, decoded.getConnectionID());
assertTrue(factory.isStarted());
assertFalse(queueConsumers.hasNext()); assertTrue(queueConsumers.hasNext()); assertEquals(testPriority, queueConsumers.next());
assertNotNull(message.getAnnotation(new SimpleString(TEST_MESSAGE_ANNOTATION_KEY))); assertNull(message.getAnnotation(new SimpleString(TEST_MESSAGE_ANNOTATION_KEY))); assertTrue(message.getMessageAnnotations().getValue().isEmpty());
assertNotSame(decoded, protonMessage.getMessageAnnotations());
assertArrayEquals(assertContent, convertedContent);
assertArrayEquals(longArrayAssert, convertedArray);
assertNotNull(buffer);
assertEquals(testResourceAddressName, ResourceNames.getRetroactiveResourceAddressName(prefix, delimiter, testAddress).toString());
assertNull(decoded.getAMQPUserID());
assertEquals(data[i], duplicate.get()); assertFalse(duplicate.hasRemaining());
assertNotSame(decoded, protonMessage.getProperties());
assertEquals(1, tag.length); assertEquals((byte) i, dis.readByte()); assertEquals(2, tag.length); assertEquals(i, dis.readShort());
assertEquals(AMQPStandardMessage.DEFAULT_MESSAGE_PRIORITY, decoded.getPriority());
assertEquals(0, writable.position()); assertEquals(1, writable.position());
assertEquals(expirationTime.getTime(), decoded.getExpiration());
assertEquals(testString, buffer.readUTF8());
assertEquals(bufferSize, copy.size()); assertEquals(bufferSize, file.size());
assertNull(decoded.getRoutingType());
assertEquals(0, decoded.getExpiration());
assertTrue(writable.hasRemaining()); assertTrue(writable.hasRemaining()); assertFalse(writable.hasRemaining());
assertNotNull("can get anon with empty list", connectionCallback.getServerSASL(AnonymousServerSASL.NAME));
assertEquals(0, decoded.getScheduledDeliveryTime().longValue());
assertTrue(e instanceof IllegalArgumentException);
assertTrue(ResourceNames.isRetroactiveResource(prefix, SimpleString.toSimpleString(testResourceAddressName))); assertTrue(ResourceNames.isRetroactiveResource(prefix, SimpleString.toSimpleString(testResourceMulticastQueueName))); assertTrue(ResourceNames.isRetroactiveResource(prefix, SimpleString.toSimpleString(testResourceDivertName)));
assertTrue(iterator.hasNext()); assertEquals(Integer.valueOf(i), iterator.next()); assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertEquals(Integer.valueOf(i), iterator.next()); assertFalse(iterator.hasNext());
assertEquals(RoutingType.MULTICAST, decoded.getRoutingType());
assertEquals(fileLength, file.size()); assertEquals(0, bytes);
assertNotSame(decoded, protonMessage.getApplicationProperties());
assertNull(decoded.getAMQPUserID());
assertEquals(8, tag.length); assertEquals(Long.MAX_VALUE + 1, dis.readLong()); assertEquals(8, tag.length); assertEquals(Long.MAX_VALUE + 2, dis.readLong());
assertEquals(map.computeIfAbsent(0, provider).intValue(), 0); assertEquals(map.get(0).intValue(), 0); assertEquals(map.computeIfAbsent(1, provider).intValue(), 1); assertEquals(map.get(1).intValue(), 1); assertEquals(map.computeIfAbsent(1, provider).intValue(), 1); assertEquals(map.get(1).intValue(), 1); assertEquals(map.computeIfAbsent(2, provider).intValue(), 2); assertEquals(map.get(2).intValue(), 2);
assertNull(decoded.getLastValueProperty());
assertFalse(buffer.hasArray());
assertNotNull(argument.getValue());
assertTrue(decoded.getExpiration() > System.currentTimeMillis());
assertTrue(encodedProtonMessage.length < decoded.getMemoryEstimate()); assertEquals(estimate, decoded.getMemoryEstimate()); assertNotEquals(estimate, decoded.getMemoryEstimate());
assertNotNull(argument.getValue());
assertEquals(0, msg.readableBytes()); assertTrue(frame instanceof BinaryWebSocketFrame); assertTrue(frame.isFinalFragment()); assertEquals(content, frame.content().toString(StandardCharsets.UTF_8));
assertNull(map.get("hello"));
assertEquals(0, entrySet.size());
assertFalse(decoded.isDurable());
assertEquals(1, buffer.getInt()); assertFalse(buffer.hasRemaining());
assertEquals(1, messageGroups.toMap().size()); assertEquals(2, messageGroups.toMap().size()); assertTrue(values.contains("world")); assertTrue(values.contains("world2")); assertFalse(values.contains("world")); assertFalse(values.contains("world2")); assertTrue(values.contains("world3")); assertTrue(values.contains("world4"));
assertEquals(scheduledTime, decoded.getScheduledDeliveryTime().longValue());
assertTrue(body instanceof AmqpValue); assertNotNull(amqpValueBody.getValue()); assertNotSame(((AmqpValue)protonMessage.getBody()).getValue(), amqpValueBody.getValue()); assertEquals(((AmqpValue)protonMessage.getBody()).getValue(), amqpValueBody.getValue());
assertEquals(newValue, message.getAnnotation(newAnnotation)); assertEquals(newValue, message.getMessageAnnotations().getValue().get(Symbol.valueOf(newAnnotation.toString())));
assertNotNull(stub.getPresenter()); assertTrue(stub.isOpened());
assertEquals(methodInfo.getParameters()[0], "abc"); assertEquals(methodInfo.getParameters()[1], "def");
assertThat(message.getMessage(), is("hoooooray!"));
assertThat((Float) converter.convert(formattedValue, float.class, bundle), is(equalTo(theValue)));
assertThat(resource, is(equalTo(method)));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid date.")));
assertThat(converter.convert("", Calendar.class, bundle), is(nullValue()));
assertThat(format, is("html"));
assertFalse(container.canProvide(Long.class)); assertFalse(container.canProvide(long.class)); assertFalse(container.canProvide(long[].class)); assertFalse(container.canProvide(Long[].class));
assertThat((Long) evaluator.get(c, "client.id"), is(equalTo(1L)));
assertThat(converter.convert("", LocalDateTime.class, bundle), is(nullValue()));
assertThat(e.getMessage(), is(equalTo("--- is not a valid character.")));
assertNotNull("can provide request", vraptorRequest);
assertThat(result(), is(equalTo(expectedResult)));
assertThat((Byte) converter.convert("7", byte.class, bundle), is(equalTo((byte) 7)));
assertThat((Double) converter.convert("", double.class, bundle), is(equalTo(0D)));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation3", Field.class, Field.class))[0], is(equalTo("one"))); assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation3", Field.class, Field.class))[1], is(equalTo("size")));
assertEquals(methodInfo.getParameters()[0], null); assertEquals(methodInfo.getParameters()[1], null);
assertThat(deserialized.length, is(2)); assertThat(deserialized[1], is(instanceOf(Cat.class))); assertThat(cat.name, is("Tigre")); assertThat(cat.age, is(3));
assertThat(result(), containsString("<items>")); assertThat(result(), containsString("<name>name</name>")); assertThat(result(), containsString("<price>12.99</price>"));
assertThat(result(), containsString("<items>")); assertThat(result(), containsString("<name>any item</name>")); assertThat(result(), containsString("<price>12.99</price>")); assertThat(result(), containsString("</items>"));
assertEquals(NeedsCustomInstantiation.class, targetType);
assertThat(value, is(equalTo((Object) 22L)));
assertThat(converter.getClass(), is(typeCompatibleWith(ReflectionConverter.class)));
assertNotNull("can instantiate", component); assertNotNull("inject dependencies", component.getDependecy());
assertEquals(e2.getCause(), e);
assertThat(result, is(equalTo(false)));
assertThat(config.getProvider().getClass(), Matchers.is(Matchers .typeCompatibleWith(MyCustomProvider.class)));
assertEquals(String.class, c);
assertThat(new Locale("pt_BR"), is(equalTo(converter.getLocale())));
assertThat(result(), containsString("\\"notes\\":\\"complex package\\""));
assertThat(control.matches("/clients/15"), is(equalTo(true)));
assertThat(value, is(nullValue()));
assertThat(localization.getLocale(), equalTo(PT_BR));
assertEquals(methodInfo.getParameters()[0], "original1"); assertEquals(methodInfo.getParameters()[1], "deserialized");
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Cat.class))); assertThat(cat.name, is("Samantha")); assertThat(cat.age, is(2));
assertThat(converter.convert(null, Character.class, bundle), is(nullValue())); assertThat(converter.convert("", Character.class, bundle), is(nullValue()));
assertThat(converter.convert("", LocalDate.class, bundle), is(nullValue()));
assertThat(converter.getClass(), is(typeCompatibleWith(LinkConverter.class)));
assertFalse(instantiator.accepts(method));
assertThat((Double) converter.convert(null, double.class, bundle), is(equalTo(0D)));
assertThat(config.getBasePackages(), is(new String[] {"some.packages", "other.packages"}));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(format, is("xml"));
assertEquals(String.class, c);
assertThat(converter.convert("10.00", BigDecimal.class, bundle), is(equalTo(new BigDecimal("10.00")))); assertThat(converter.convert("10.01", BigDecimal.class, bundle), is(equalTo(new BigDecimal("10.01"))));
assertThat(result(), not(containsString("\\"comments\\"")));
assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.GET)));
assertThat(e.getMessage(), is(equalTo("25:dd:88 is not a valid time.")));
assertThat(resource, is(equalTo(method)));
assertThat((String) evaluator.get(c, "client.id"), is(equalTo("")));
assertThat(converter.convert("15:38", LocalTime.class, bundle), is(equalTo(new LocalTime(15, 38))));
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat(config.hasBasePackages(), is(false));
assertThat(format, is("xml"));
assertFalse(methodInfo.parametersWereSet());
assertThat(converter.convert("2", long.class, bundle), is(equalTo(2L)));
assertThat(result, is(equalTo(expectedResult)));
assertThat(converter.convert(null, Float.class, bundle), is(nullValue()));
assertThat(converter.convert("y", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("n", Boolean.class, bundle), is(equalTo(false)));
assertThat(validator.getErrors(), hasSize(0));
assertThat(deserialized.length, is(2)); assertThat(deserialized[1], is(instanceOf(Dog.class))); assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7));
assertThat(serializer, is(instanceOf(IgnoringSerializer.class)));
assertNotNull("can instantiate", component); assertTrue("is the right implementation", component instanceof DummyImplementation);
assertThat(uri, is(equalTo("/clients/")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(result, is(equalTo(true)));
assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertTrue(Mouse.class.isAssignableFrom(foundMethod.getReturnType())); assertThat(foundMethod.getName(), is(startsWith("getMouse")));
assertThat(localization.getLocale(), equalTo(PT_BR));
assertThat((String) evaluator.get(c, "client.favoriteNumbers[1]"), is(equalTo("red")));
assertThat(resource, is(equalTo(method)));
assertThat(queue, is(notNullValue())); assertThat(queue, is(instanceOf(LinkedList.class)));
assertThat((Float) converter.convert(null, float.class, bundle), is(equalTo(0f)));
assertThat(result, is(equalTo(true)));
assertTrue(route.canHandle(NiceClients.class, ClientsController.class.getDeclaredMethod("toInherit")));
assertThat(result(), not(containsString("<price>")));
assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")));
assertThat(e.getMessage(), is(equalTo("vr3.9 is not a valid number.")));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Cat.class))); assertThat(cat.name, is("Samantha")); assertThat(cat.age, is(2));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7));
assertThat(result(), containsString("\\"client\\"")); assertThat(result(), not(containsString("guilherme silveira")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(route, canHandle(GetAnnotatedController.class, "withoutPath"));
assertThat(provider.parameterNamesFor(Cat.class.getDeclaredMethod("fightWith", List.class))[0], is(equalTo("stringList")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(parseIso8601, is(date));
assertThat(handler.requestingStaticFile(request), is(false));
assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertTrue(Mouse.class.isAssignableFrom(foundMethod.getReturnType())); assertThat(foundMethod.getName(), is(startsWith("getMouse")));
assertThat(converter.convert("yes", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("no", Boolean.class, bundle), is(equalTo(false)));
assertEquals(methodInfo.getParameters()[0], "abc"); assertEquals(methodInfo.getParameters()[1], "def");
assertThat((Double) converter.convert("", double.class, bundle), is(equalTo(0d)));
assertThat(converter.convert("", DateTime.class, bundle), is(nullValue()));
assertThat(result, is("/WEB-INF/jsp/dog/bark.json.jsp"));
assertThat(converter.convert("", Double.class, bundle), is(nullValue()));
assertThat(filled, is("/clients/my/path/to/file"));
assertThat(route.allowedMethods(), not(contains(HttpMethod.POST)));
assertThat(converter.convert("", Integer.class, bundle), is(nullValue()));
assertThat(converter.convert("05/06/2010 3:38", DateTime.class, bundle), is(equalTo(new DateTime(2010, 6, 5, 3, 38, 0, 0))));
assertNotNull("can provide the container", itself);
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(translator.translate(info), is(equalTo(method))); assertThat(translator.translate(info), is(equalTo(method))); assertThat(translator.translate(info), is(equalTo(method)));
assertThat(resource, is(equalTo(method)));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7));
assertThat(scanner.scan(classPathResolver), hasSize(0));
assertThat(converter.convert("on", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("off", Boolean.class, bundle), is(equalTo(false)));
assertThat(e.getMessage(), is(equalTo("NOT A BOOLEAN! is not a valid boolean. Please use true/false, yes/no, y/n or on/off")));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(route, canHandle(EndSlashAnnotatedController.class, "withAbsolutePath"));
assertThat(e.getMessage(), is(equalTo("vr3.9 is not a valid number.")));
assertThat(converter.convert(null, LocalDateTime.class, bundle), is(nullValue()));
assertThat(route, canHandle(PathAnnotatedController.class, "withEmptyPath"));
assertThat(collection, is(notNullValue())); assertThat(collection, is(instanceOf(ArrayList.class)));
assertNotNull(instance1); assertNotNull(instance2);
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat(result(), is(equalTo(expectedResult)));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(handler.requestingStaticFile(request), is(true));
assertThat(converter.convert("", DateMidnight.class, bundle), is(nullValue()));
assertThat(value, is(nullValue()));
assertThat(vraptor.getParameter("name"), is(equalTo("guilherme")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(result(), containsString("<notes>complex package</notes>"));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(result(), containsString("<client/>")); assertThat(result(), not(containsString("<name>guilherme silveira</name>")));
assertThat(converter.convert(formattedHour, Time.class, bundle), is(equalTo(date)));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(DogWithAnnotations.class))); assertThat(dog.name, is("Lubi")); assertThat(dog.age, is(8));
assertThat(route, canHandle(EndSlashAnnotatedGetController.class, "withRelativePath"));
assertThat(converter.convert("2.3", Double.class, bundle), is(equalTo(2.3d)));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(converter.convert("10,00", float.class, bundle), is(equalTo(Float.parseFloat("10.00")))); assertThat(converter.convert("10,01", float.class, bundle), is(equalTo(Float.parseFloat("10.01"))));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(component.calls, is(0)); assertThat(component.calls, is(1));
assertThat(juice, is(notNullValue())); assertThat(juice.fruit, is(equalTo(fruit)));
assertThat(result(), is(equalTo(expectedResult)));
assertTrue(new InstantiateInterceptor(null).accepts(null));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThrough", Field.class))[0], is(equalTo("f")));
assertThat(uri, is("/path/expectedURL"));
assertThat((Float) converter.convert(null, float.class, bundle), is(equalTo(0F)));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("setLeg", int[].class))[0], is(equalTo("length")));
assertEquals(methodInfo.getParameters()[0], "abc"); assertEquals(methodInfo.getParameters()[1], "def");
assertThat(e.getMessage(), startsWith("You must configure"));
assertThat(converter.convert(formattedToday, Date.class, bundle), is(equalTo(date)));
assertThat((RuntimeException) e.getCause(), is(equalTo(exception)));
assertThat(uri, is(equalTo("/test/0123456789abcdef1234fedcba9876543210/")));
assertThat(result, containsString("\\"type\\": \\"basic\\""));
assertThat(converter.convert(null, Double.class, bundle), is(nullValue()));
assertThat(proxy.wasCalled(), is(true));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(converter.convert("", BigInteger.class, bundle), is(nullValue()));
assertThat((Integer) converter.convert("2", int.class, bundle), is(equalTo(2)));
assertThat((Long) converter.convert("", long.class, bundle), is(equalTo(0L)));
assertTrue(interceptor.accepts(null));
assertNull(route);
assertTrue(control.matches("/any/ICanPutAnythingInHere/what"));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(route, canHandle(ClientsController.class, "add"));
assertThat(result(), is("<withAliasedAttribute>\\n <aliased>\\n <def>Duh!</def>\\n </aliased>\\n</withAliasedAttribute>"));
assertThat(result(), not(containsString("\\"comments\\"")));
assertThat(route, canHandle(GetAnnotatedController.class, "withAbsolutePath"));
assertThat(result(), is("{\\"bazinga\\":{}}"));
assertThat(config.nameFor(base), is(equalTo("c")));
assertThat(converter.convert("", Time.class, bundle), is(nullValue()));
assertThat(route, canHandle(PathAnnotatedController.class, "withAbsolutePath"));
assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue()));
assertThat(result(), containsString("<name>guilherme silveira</name>")); assertThat(result(), not(containsString("R. Vergueiro")));
assertThat(converter.convert("", long.class, bundle), is(nullValue()));
assertThat(converter.convert("2.3", Float.class, bundle), is(equalTo(2.3f)));
assertThat(converter.convert("10/06/2008", Date.class, bundle), is(equalTo(new SimpleDateFormat("dd/MM/yyyy") .parse("10/06/2008"))));
assertNotNull("can instantiate", component);
assertThat((Float) converter.convert("", float.class, bundle), is(equalTo(0f)));
assertThat(converter.convert(null, BigInteger.class, bundle), is(nullValue()));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(converter.convert("2.3", BigDecimal.class, bundle), is(equalTo(new BigDecimal("2.3"))));
assertThat(converter.convert(formattedToday, Calendar.class, bundle), is(equalTo(cal)));
assertThat((Integer) converter.convert(null, int.class, bundle), is(equalTo(0)));
assertThat(parseIso8601, is(date));
assertThat(converter.convert("", Double.class, bundle), is(nullValue()));
assertThat(converter.convert("", Date.class, bundle), is(nullValue()));
assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertThat(foundMethod.toGenericString(), startsWith("public void ")); assertThat(foundMethod.getName(), is(startsWith("setMouse")));
assertThat((Integer) converter.convert("", int.class, bundle), is(equalTo(0)));
assertThat(control.matches("/clientsWhatever"), is(equalTo(true)));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid datetime.")));
assertThat(config.isClasspathScanningEnabled(), is(true)); assertThat(config.isClasspathScanningEnabled(), is(false));
assertThat(set, is(notNullValue())); assertThat(set, is(instanceOf(TreeSet.class)));
assertThat((Long) evaluator.get(client(1L), "client.id"), is(equalTo(1L)));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertTrue(methodInfo.parametersWereSet());
assertThat(myCat.tail.length, is(equalTo(15)));
assertThat((Double) converter.convert("2.3", double.class, bundle), is(equalTo(2.3d)));
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat((Boolean) converter.convert("", boolean.class, bundle), is(equalTo(false)));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid datetime.")));
assertThat(converter.convert(formattedValue, Double.class, bundle), is(equalTo(theValue)));
assertThat(converter.convert("05/06/2010", DateMidnight.class, bundle), is(equalTo(new DateMidnight(2010, 6, 5))));
assertThat(serializer, is(instanceOf(IgnoringSerializer.class)));
assertThat(serializer, is(instanceOf(IgnoringSerializer.class)));
assertEquals(Integer.class, types.get("extended.id"));
assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Cat.class))); assertThat(cat.name, is("Zulu")); assertThat(cat.age, is(1));
assertThat(result(), not(containsString("\\"items\\""))); assertThat(result(), not(containsString("name"))); assertThat(result(), not(containsString("\\"price\\""))); assertThat(result(), not(containsString("12.99"))); assertThat(result(), not(containsString("15.0")));
assertThat(localization.getLocale(), equalTo(PT_BR));
assertThat(resultOfFirstCall[0], is(equalTo("length"))); assertThat(resultOfSecondCall[0], is(equalTo("length")));
assertTrue(instantiator.accepts(otherMethod));
assertThat(result, containsString("<type>basic</type>"));
assertThat(converter.convert(null, Integer.class, bundle), is(nullValue()));
assertThat(converter.convert(null, DateTime.class, bundle), is(nullValue()));
assertThat(route, canHandle(PathAnnotatedController.class, "withoutPath"));
assertThat((Long) converter.convert(null, long.class, bundle), is(equalTo(0L)));
assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Dog.class))); assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7));
assertThat(result(), containsString("\\"items\\"")); assertThat(result(), containsString("\\"name\\": \\"any item\\"")); assertThat(result(), containsString("\\"price\\": 12.99"));
assertThat(converter.convert(null, long.class, bundle), is(nullValue()));
assertThat((String) evaluator.get(c, "client.emails[1]"), is(equalTo("red")));
assertThat((Boolean) converter.convert("yes", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("no", boolean.class, bundle), is(equalTo(false)));
assertThat(converter.convert("", Float.class, bundle), is(nullValue()));
assertThat(parseIso8601, is(date));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThrough", Field.class))[0], is(equalTo("field")));
assertThat(converter.convert(null, Float.class, bundle), is(nullValue()));
assertTrue(interceptor.accepts(consumeXml)); assertFalse(interceptor.accepts(doesntConsume));
assertThat(converter.getClass(), is(typeCompatibleWith(MegaConverter.class))); assertThat(converter.getClass(), is(typeCompatibleWith(MegaConverter.class)));
assertThat(handlerFactory.getInstance(), is(instanceOf(NullEncodingHandler.class)));
assertThat(route, canHandle(ClientsController.class, "list"));
assertThat(converter.convert(null, BigDecimal.class, bundle), is(nullValue()));
assertThat(resource, is(equalTo(method)));
assertThat(handlerFactory.getInstance(), is(instanceOf(WebXmlEncodingHandler.class)));
assertThat(result(), containsString("\\"street\\":\\"R. Vergueiro\\""));
assertThat(localization.getLocale(), equalTo(PT_BR));
assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid date.")));
assertThat(config.getProvider().getClass(), is(typeCompatibleWith(SpringProvider.class)));
assertThat(converter.convert("10.00", float.class, bundle), is(equalTo(Float.parseFloat("10.00")))); assertThat(converter.convert("10.01", float.class, bundle), is(equalTo(Float.parseFloat("10.01"))));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(route, canHandle(GetAnnotatedController.class, "withRelativePath"));
assertThat(converter.convert("true", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("false", Boolean.class, bundle), is(equalTo(false)));
assertThat(uri, is(equalTo("/clients/")));
assertThat(provider.parameterNamesFor(Cat.class.getDeclaredMethod("fightWith", List.class))[0], is(equalTo("cats")));
assertEquals(Integer.class, types.get("bean.bean2.id")); assertEquals(String.class, types.get("path"));
assertThat(interceptor.accepts(method), equalTo(true));
assertThat(converter.convert(null, MyCustomEnum.class, bundle), is(nullValue()));
assertThat(value, is(Matchers.equalTo((Object) "guilherme")));
assertThat(registry.all(), hasItem(DummyInterceptor.class));
assertThat(result(), is("<b>\\n <field2/>\\n</b>"));
assertThat(result(), containsString("\\"name\\": \\"guilherme silveira\\"")); assertThat(result(), not(containsString("R. Vergueiro")));
assertThat(view, is(expectedView));
assertThat(converter.convert(formattedValue, BigDecimal.class, bundle), is(equalTo(theValue)));
assertThat(converter.convert("10/06/2008", Calendar.class, bundle), is(equalTo((Calendar) new GregorianCalendar(2008, 5, 10))));
assertThat(match, is(VRaptorMatchers.resourceMethod(method("list"))));
assertThat(config.getBasePackages(), is(new String[] {"some.package"}));
assertTrue(interceptor.accepts(method));
assertThat((Boolean) converter.convert("y", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("n", boolean.class, bundle), is(equalTo(false)));
assertThat(result, is("/WEB-INF/jsp/dog/bark.jsp"));
assertThat(e.getMessage(), is(equalTo("THIRD is not a valid option.")));
assertThat(resource, is(equalTo(method)));
assertThat(converter, is(instanceOf(converterType)));
assertThat(e.getMessage(), is(equalTo("xx:yy:ff is not a valid time.")));
assertThat(converter.convert(null, Calendar.class, bundle), is(nullValue()));
assertThat(e.getMessage(), is(equalTo("--- is not a valid character.")));
assertThat((Long) converter.convert("2", long.class, bundle), is(equalTo(2L)));
assertThat(result, is(equalTo(expectedResult)));
assertThat(set, is(notNullValue())); assertThat(set, is(instanceOf(HashSet.class)));
assertThat(result(), not(containsString("\\"items\\""))); assertThat(result(), not(containsString("name"))); assertThat(result(), not(containsString("\\"price\\""))); assertThat(result(), not(containsString("12.99"))); assertThat(result(), not(containsString("15.0")));
assertThat(converter.convert(null, Boolean.class, bundle), is(nullValue()));
assertThat(converter.convert(null, LocalTime.class, bundle), is(nullValue()));
assertThat(list, is(notNullValue())); assertThat(list, is(instanceOf(ArrayList.class)));
assertThat(converter.convert(formattedValue, Float.class, bundle), is(equalTo(theValue)));
assertThat(uri, is(equalTo("/clients/")));
assertThat(converter.convert("FIRST", MyCustomEnum.class, bundle), is(equalTo(MyCustomEnum.FIRST)));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertEquals(resolver.getClassLoader(), Thread.currentThread().getContextClassLoader());
assertNull(route);
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat(converter.convert("", Short.class, bundle), is(nullValue()));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(e.getMessage(), is(equalTo("32a00 is not a valid option.")));
assertThat(converter.convert("10,00", Double.class, bundle), is(equalTo(new Double("10.00")))); assertThat(converter.convert("10,01", Double.class, bundle), is(equalTo(new Double("10.01"))));
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat(router.allRoutes(), hasItem);
assertThat(serializer, is(instanceOf(IgnoringSerializer.class)));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Person.class))); assertThat(person.name, is("Renan")); assertThat(person.dog.name, is("Brutus")); assertThat(person.dog.age, is(7));
assertThat(converter.convert("", Byte.class, bundle), is(nullValue()));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("rest", int.class))[0], is(equalTo("hours")));
assertNotNull("Should have a cause", e.getRootCause()); assertEquals(IOException.class, e.getRootCause().getClass());
assertEquals(handler.stereotype(), Deserializes.class);
assertThat(route, canHandle(ClientsController.class, "manyPaths")); assertThat(route2, canHandle(ClientsController.class, "manyPaths"));
assertThat(uri, is("/path/expectedUrl"));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid date.")));
assertTrue(lookup.accepts(null));
assertThat(result, is("/WEB-INF/jsp/dog/bark.jsp"));
assertTrue(interceptor.accepts(null));
assertThat(uri, is(equalTo("/clients/30")));
assertThat(serializer, is(instanceOf(IgnoringSerializer.class)));
assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.HEAD)));
assertThat(converter.convert("", short.class, bundle), is(equalTo((short) 0)));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("rest", int.class))[0], is(equalTo("int")));
assertThat(route, canHandle(NiceClients.class, "add"));
assertThat(converter.convert(null, Short.class, bundle), is(nullValue()));
assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertThat(foundMethod.toGenericString(), startsWith("public void ")); assertThat(foundMethod.getName(), is(startsWith("setMouse")));
assertThat(proxy.wasNumberConstructorCalled(), is(false)); assertThat(proxy.getNumber(), is(nullValue()));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(array, is(notNullValue()));
assertThat(result, is(equalTo(true)));
assertThat(factory.handlerFor(RegularInterceptor.class), is(instanceOf(ToInstantiateInterceptorHandler.class)));
assertThat(proxy.wasCalled(), is(true));
assertThat(instance.simpleNode[0], is(nullValue())); assertThat(instance.simpleNode[1], is(equalTo(22L)));
assertThat(route, canHandle(EndSlashAnnotatedGetController.class, "withAbsolutePath"));
assertThat(converter.convert("truE", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("FALSE", Boolean.class, bundle), is(equalTo(false))); assertThat(converter.convert("On", Boolean.class, bundle), is(equalTo(true))); assertThat(converter.convert("oFf", Boolean.class, bundle), is(equalTo(false)));
assertThat(serialized, containsString("<message>The message</message>")); assertThat(serialized, containsString("<category>category</category>")); assertThat(serialized, containsString("<message>Something else</message>")); assertThat(serialized, not(containsString("<validationMessage>"))); assertThat(serialized, not(containsString("<i18nMessage>")));
assertTrue(container.canProvide(DummyComponent.class)); assertFalse(container.canProvide(NotRegisterd.class));
assertThat(container.instanceFor(Fruit.class), is(notNullValue()));
assertThat(route.getPriority(), is(Path.DEFAULT));
assertThat((Character) converter.convert(null, char.class, bundle), is(equalTo('\\u0000')));
assertThat(result(), containsString("\\"street\\": \\"R. Vergueiro\\""));
assertThat(resource, is(sameInstance(method)));
assertThat((String) evaluator.get(c, "client.favoriteColors[1]"), is(equalTo("red")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(converter.convert("2", Integer.class, bundle), is(equalTo(2)));
assertThat(localization.getLocale(), equalTo(PT_BR));
assertThat(value, startsWith("???")); assertThat(value, endsWith("???"));
assertThat(route, canHandle(EndSlashAnnotatedController.class, "withEmptyPath"));
assertThat(uri, is("/path/expectedURL"));
assertThat(result(), containsString("<orders/>"));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(resource, is(equalTo(method)));
assertThat((Float) converter.convert("", float.class, bundle), is(equalTo(0F)));
assertThat(result, containsString("\\"type\\":\\"basic\\""));
assertEquals(expectedResult, jsonElement.getAsJsonObject().toString());
assertThat(result(), containsString("\\"items\\"")); assertThat(result(), containsString("\\"name\\": \\"any item\\"")); assertThat(result(), not(containsString("12.99")));
assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(CatWithAnnotations.class))); assertThat(cat.name, is("Zulu")); assertThat(cat.age, is(1));
assertThat(converter.convert(null, Byte.class, bundle), is(nullValue()));
assertFalse(control.matches("/any/ICantPutAnythingInHere/what")); assertFalse(control.matches("/any/aaa12bbb/what")); assertTrue(control.matches("/any/aaa123bbb/what"));
assertThat((Byte) converter.convert("", byte.class, bundle), is(equalTo((byte) 0)));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(route, canHandle(PathAnnotatedController.class, "withRelativePath"));
assertThat(result(), not(containsString("\\"client\\"")));
assertThat(control.matches("/clients/my/path/to/file/"), is(true));
assertNotNull("can provide ServletContext", context);
assertThat(filled, is("/clients/my/path/to/file"));
assertThat(route, canHandle(ClientsController.class, "add"));
assertThat((Boolean) converter.convert(null, boolean.class, bundle), is(equalTo(false)));
assertThat(factory.handlerFor(ALazyInterceptor.class), is(instanceOf(LazyInterceptorHandler.class)));
assertTrue(interceptor.accepts(null));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("setLeg", int[].class))[0], is(equalTo("intList")));
assertThat(result(), containsString("\\"items\\"")); assertThat(result(), containsString("\\"name\\":\\"any item\\"")); assertThat(result(), containsString("\\"price\\":12.99"));
assertThat(result(), containsString("\\"items\\"")); assertThat(result(), containsString("\\"name\\":\\"any item\\"")); assertThat(result(), not(containsString("12.99")));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation2", Field.class, Field.class))[0], is(equalTo("one"))); assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation2", Field.class, Field.class))[1], is(equalTo("two")));
assertThat(converter.convert(null, short.class, bundle), is(equalTo((short) 0)));
assertThat(resource, is(equalTo(method)));
assertThat(converter.convert("2", Short.class, bundle), is(equalTo((short) 2)));
assertThat((Double) converter.convert(null, double.class, bundle), is(equalTo(0d)));
assertThat(result(), containsString("\\"name\\":\\"guilherme silveira\\"")); assertThat(result(), not(containsString("R. Vergueiro")));
assertThat(route, canHandle(ClientsController.class, "move"));
assertThat(resource, is(equalTo(method)));
assertThat(converter.convert("", MyCustomEnum.class, bundle), is(nullValue()));
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(e.getMessage(), is(equalTo("vr3.9 is not a valid number.")));
assertThat(e.getMessage(), is(equalTo("vr3.9 is not a valid number.")));
assertThat(instance.get(0), is(Matchers.nullValue())); assertThat(instance.get(1), is(Matchers.equalTo("hello")));
assertThat(e.getMessage(), is(equalTo("2.3 is not a valid integer.")));
assertThat(converter, is(instanceOf(DummyConverter.class)));
assertNull(deserializers.deserializerFor("bogus content type", container));
assertThat(e.getMessage(), is(equalTo("vr3.9 is not a valid number.")));
assertThat((Boolean) converter.convert("truE", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("FALSE", boolean.class, bundle), is(equalTo(false))); assertThat((Boolean) converter.convert("On", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("oFf", boolean.class, bundle), is(equalTo(false)));
assertThat(converter.convert("2", Byte.class, bundle), is(equalTo((byte) 2)));
assertFalse(new NullMultipartInterceptor().accepts(null));
assertThat(converter.convert(null, Time.class, bundle), is(nullValue()));
assertThat(result(), containsString("<items>")); assertThat(result(), containsString("<name>name</name>")); assertThat(result(), containsString("<price>12.99</price>")); assertThat(result(), containsString("</items>"));
assertThat(converter.convert(null, DateMidnight.class, bundle), is(nullValue()));
assertThat(converter.convert("", LocalTime.class, bundle), is(nullValue()));
assertThat((Byte) converter.convert(null, byte.class, bundle), is(equalTo((byte) 0)));
assertThat(route, canHandle(ClientsController.class, "add"));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation", Field.class))[0], is(equalTo("one")));
assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")));
assertThat(converter.getClass(), is(typeCompatibleWith(ReflectionConverter.class)));
assertThat(factory.handlerFor(ALazyInterceptor.class), is(sameInstance(handler)));
assertThat((Boolean) evaluator.get(c, "client.ugly"), is(equalTo(true)));
assertThat((Float) converter.convert("2.2", float.class, bundle), is(equalTo(2.2f)));
assertThat(e.getMessage(), is(equalTo("NOT A BOOLEAN! is not a valid boolean. Please use true/false, yes/no, y/n or on/off")));
assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThroughWithAnnotation", Field.class))[0], is(not(equalTo("field"))));
assertThat(classes, hasItem(ResourceInTheClasspath.class.getName()));
assertThat(converter.convert("", Float.class, bundle), is(nullValue()));
assertThat(converter.convert(null, Date.class, bundle), is(nullValue()));
assertThat(converter.convert("10,00", double.class, bundle), is(equalTo(Double.parseDouble("10.00")))); assertThat(converter.convert("10,01", double.class, bundle), is(equalTo(Double.parseDouble("10.01"))));
assertThat(config.getBasePackages(), is(new String[] {"some.packages", "other.packages"}));
assertThat(out[0], is(not(result)));
assertArrayEquals(new Object[] {null}, params);
assertThat(config.getBasePackages(), is(new String[] {"some.packages"}));
assertThat(converter.convert(null, Double.class, bundle), is(nullValue()));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(calendar, is(notNullValue())); assertThat(calendar, is(instanceOf(GregorianCalendar.class)));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(uri, is("/path/expectedURL"));
assertThat(converter.convert("05/06/2010 3:38", LocalDateTime.class, bundle), is(equalTo(new LocalDateTime(2010, 6, 5, 3, 38))));
assertThat(route, canHandle(ClientsController.class, "noSlash"));
assertThat(e.getMessage(), is(equalTo("a,10/06/2008/a/b/c is not a valid datetime.")));
assertNull(format);
assertThat(e.getMessage(), is(equalTo("--- is not a valid integer.")));
assertThat(converter.convert("10,00", BigDecimal.class, bundle), is(equalTo(new BigDecimal("10.00")))); assertThat(converter.convert("10,01", BigDecimal.class, bundle), is(equalTo(new BigDecimal("10.01"))));
assertThat(converter.convert(null, BigDecimal.class, bundle), is(nullValue()));
assertThat(wrong.matches(uri), is(false)); assertThat(right.matches(uri), is(true));
assertThat(uri, is("/path/expectedURL"));
assertThat(result(), containsString("<items>")); assertThat(result(), containsString("<name>any item</name>")); assertThat(result(), not(containsString("12.99"))); assertThat(result(), containsString("</items>"));
assertThat(scanner.scan(classPathResolver), hasItem(ResourceInTheClasspath.class.getName()));
assertThat(vraptor.getParameter("minimum"), is(nullValue()));
assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")));
assertThat(parseIso8601, is(date));
assertThat(route, canHandle(EndSlashAnnotatedController.class, "withRelativePath"));
assertThat(format, is("xml"));
assertThat(proxy.getFirstDependency(), is(nullValue())); assertThat(proxy.getSecondDependency(), is(nullValue()));
assertThat(converter.getClass(), is(typeCompatibleWith(MegaConverter.class))); assertThat(converter.getClass(), is(typeCompatibleWith(MegaConverter.class)));
assertTrue(container.isEmpty());
assertThat(config.getWebinfClassesDirectory(), is("/x/WEB-INF/classes/"));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(result(), containsString("<street>R. Vergueiro</street>"));
assertThat(interceptor.accepts(method), equalTo(false));
assertThat(Locale.getDefault(), is(equalTo(converter.getLocale())));
assertThat(converter.convert("", Boolean.class, bundle), is(nullValue()));
assertThat(config.nameFor(base), is(equalTo("camel_case_value")));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(control.matches("/clients/3/subtask/5/"), is(true));
assertThat(localization.getFallbackLocale(), equalTo(PT_BR));
assertThat((Boolean) evaluator.get(c, "client.ugly"), is(equalTo(true)));
assertThat(serialized, containsString("\\"message\\": \\"The message\\"")); assertThat(serialized, containsString("\\"category\\": \\"category\\"")); assertThat(serialized, containsString("\\"message\\": \\"Something else\\"")); assertThat(serialized, not(containsString("\\"validationMessage\\""))); assertThat(serialized, not(containsString("\\"i18nMessage\\"")));
assertThat(config.hasBasePackages(), is(false)); assertThat(config.hasBasePackages(), is(true));
assertThat(resource, is(equalTo(method)));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(e.getMessage(), is(equalTo("3200 is not a valid option.")));
assertThat(result(), containsString("\\"client\\"")); assertThat(result(), not(containsString("guilherme silveira")));
assertThat(container.canProvide(Fruit.class), is(true)); assertThat(container.canProvide(Juice.class), is(false));
assertThat(converter.convert("3", BigInteger.class, bundle), is(equalTo(new BigInteger("3"))));
assertThat(converter.getClass(), is(typeCompatibleWith(LinkConverterJSON.class)));
assertThat(converter.convert("10.00", Double.class, bundle), is(equalTo(new Double("10.00")))); assertThat(converter.convert("10.01", Double.class, bundle), is(equalTo(new Double("10.01"))));
assertThat(converter.convert("5", short.class, bundle), is(equalTo((short) 5)));
assertThat(result(), is(equalTo(expectedResult)));
assertThat(converter.convert("1", MyCustomEnum.class, bundle), is(equalTo(MyCustomEnum.SECOND)));
assertThat(result(), containsString("\\"notes\\": \\"complex package\\""));
assertArrayEquals(bytes, outputStream.toByteArray());
assertThat(converter.convert("05/06/2010", LocalDate.class, bundle), is(equalTo(new LocalDate(2010, 6, 5))));
assertThat((Boolean) converter.convert("", boolean.class, bundle), is(equalTo(false))); assertThat((Boolean) converter.convert("false", boolean.class, bundle), is(equalTo(false))); assertThat((Boolean) converter.convert("true", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("True", boolean.class, bundle), is(equalTo(true)));
assertThat(myCat.length, is(equalTo(2)));
assertThat(result(), not(containsString("\\"client\\"")));
assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.OPTIONS)));
assertThat(parseIso8601, is(date));
assertThat(converter.convert("10.00", Float.class, bundle), is(equalTo(new Float("10.00")))); assertThat(converter.convert("10.01", Float.class, bundle), is(equalTo(new Float("10.01"))));
assertThat(converter.convert(null, LocalDate.class, bundle), is(nullValue()));
assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue()));
assertThat((Double) converter.convert(formattedValue, double.class, bundle), is(equalTo(theValue)));
assertThat(uri, is(equalTo("/clients/3")));
assertThat(converter.convert("10,00", Float.class, bundle), is(equalTo(new Float("10.00")))); assertThat(converter.convert("10,01", Float.class, bundle), is(equalTo(new Float("10.01"))));
assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.PATCH)));
assertFalse(interceptor.accepts(method));
assertThat(converter.convert("10.00", double.class, bundle), is(equalTo(Double.parseDouble("10.00")))); assertThat(converter.convert("10.01", double.class, bundle), is(equalTo(Double.parseDouble("10.01"))));
assertThat(result(), is("<withAlias>\\n <def>Duh!</def>\\n</withAlias>"));
assertThat((String) evaluator.get(c, "client.child.id"), is(equalTo("")));
assertThat(converter.convert("23:52", Time.class, bundle), is(equalTo(date))); assertThat(converter.convert("23:52:00", Time.class, bundle), is(equalTo(date)));
assertThat(result(), is(equalTo(expectedResult)));
assertNotNull("can provide request", httpRequest);
assertThat(uri, is("/path/expectedUrl"));
assertThat(result(), is("{\\"client\\": {\\"name\\": \\"my name\\",\\"aField\\": \\"abc\\"}}"));
assertThat(uri, is(equalTo("/clients/john")));
assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")));
assertThat((Boolean) converter.convert("on", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("off", boolean.class, bundle), is(equalTo(false)));
assertThat(((NeedsMyResource)params[0]).getMyResource(), is(sameInstance(providedInstance)));
assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.POST)));
assertThat(result(), containsString("<order>")); assertThat(result(), containsString("<price>")); assertThat(result(), containsString("15.0")); assertThat(result(), containsString("</price>")); assertThat(result(), containsString("</order>"));
assertThat(strategyFor(DeniedToAllObject.class)).isSameAs(denyAllStrategy);
assertThat(jpaSpecProvider.jpaSpecFor(UnknownStrategyObject.class)).isSameAs(defaultAclSpecification);
assertThat(strategyFor(AllowedToAllObject.class)).isSameAs(allowAllStrategy);
assertThat(granted).isFalse();
assertThat(granted).isTrue();
assertThat(strategyFor(UnknownStrategyObject.class)).isSameAs(defaultAclStrategy);
assertThat(strategyFor(NoStrategyObject.class)).isSameAs(defaultAclStrategy);
assertThat(strategyFor(NoAclObject.class)).isSameAs(defaultAclStrategy);
assertThat(aclSecurityActivator.isEnabled()).isTrue(); assertThat(aclSecurityActivator.isEnabled()).isFalse(); assertThat(aclSecurityActivator.isEnabled()).isFalse();
assertThat(jpaSpecProvider.jpaSpecFor(WithoutHandlerObject.class)).isSameAs(defaultAclSpecification);
assertThat(granted).isFalse();
assertThat(savedCustomer.getLastName()).isEqualTo("Smith");
assertThat(granted).isTrue();
assertThat(granted).isFalse();
assertThat(properties.getOverrideStrategy()).isNull(); assertThat(strategyFor(UnknownStrategyObject.class)).isSameAs(denyAllStrategy);
assertThat(jpaSpecProvider.jpaSpecFor(NoStrategyObject.class)).isSameAs(defaultAclSpecification);
assertThat(strategyFor(DeniedToAllObject.class)).isSameAs(allowAllStrategy);
assertThat(granted).isTrue();
assertThat(stringTester.apply("A")).isTrue(); assertThat(stringTester.apply("B")).isTrue(); assertThat(stringTester.apply("C")).isFalse(); assertThat(stringTester.apply("AB")).isTrue(); assertThat(stringTester.apply("ABC")).isTrue(); assertThat(stringTester.apply("AC")).isTrue(); assertThat(stringTester.apply("BC")).isTrue();
assertThat(granted).isTrue();
assertThat(granted).isFalse();
assertThat(stringTester.apply("A")).isFalse(); assertThat(stringTester.apply("B")).isFalse(); assertThat(stringTester.apply("C")).isFalse(); assertThat(stringTester.apply("AB")).isTrue(); assertThat(stringTester.apply("ABC")).isTrue(); assertThat(stringTester.apply("AC")).isFalse(); assertThat(stringTester.apply("BC")).isFalse();
assertEquals("Saved vector is identical to original", old.get(), value);
assertTrue(set.add(id)); assertEquals(4, clusterCount);
assertEquals("size", test.size(), val.size());
assertEquals(m, mtt, EPSILON);
assertEquals(1, cl.getLearner().auc(), 0.1); assertEquals(1, x.auc(), 0.1);
assertFalse(this.model.classify(dataPointFalse)); assertTrue(this.model.classify(dataPointTrue));
assertTrue("Singular value differs from eigenvalue", Math.abs((s-e)/e) < ERROR_TOLERANCE); assertTrue(i + ": 1 - cosAngle = " + error, error < ERROR_TOLERANCE);
assertArrayEquals(new double[][]{{1.0, Double.NaN, Double.NaN}, {1.0, 0.0, Double.NaN}, {1.0, 1.0, Double.NaN}}, predictions);
assertEquals("size", 3, test.getNumNondefaultElements());
assertEquals(1.0, forest.classify(testData.getDataset(), rng, testData.get(0)), EPSILON); assertEquals(0.0, forest.classify(testData.getDataset(), rng, testData.get(1)), EPSILON); assertEquals(1.0, forest.classify(testData.getDataset(), rng, testData.get(2)), EPSILON);
assertEquals(0.9f, recommender.estimatePreference(3, 3), EPSILON);
assertEquals(sb.toString(), sb1.toString()); assertEquals(sb.toString(), sb2.toString());
assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1.0e-8); assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1.0e-8);
assertNotNull("Vector is not null", result); assertEquals("Loaded vector is identical to original", result, value);
assertNotNull(AnalyzerUtils.createAnalyzer(CJKAnalyzer.class.getName()));
assertEquals(2, clone.getNumMappings()); assertEquals(1.1, clone.get(0), EPSILON); assertEquals(0.0, clone.get(1), EPSILON); assertEquals(6.6, clone.get(5), EPSILON); assertEquals(0.0, clone.get(6), EPSILON);
assertTrue("not like", test.getClass().isAssignableFrom(other.getClass())); assertEquals("size", test.size(), other.size());
assertNotNull(recommended); assertEquals(1, recommended.size()); assertEquals(2, firstRecommended.getItemID()); assertEquals(0.3, firstRecommended.getValue(), EPSILON);
assertEquals("wrong zSum", expected, test.zSum(), EPSILON);
assertEquals(1, riIiMaybeTransposed.columns, 1); assertEquals(3, riIiMaybeTransposed.rows, 3); assertEquals(1.0, riIiMaybeTransposed.get(0, 0), EPSILON); assertEquals(3.0, riIiMaybeTransposed.get(1, 0), EPSILON); assertEquals(5.0, riIiMaybeTransposed.get(2, 0), EPSILON);
assertEquals("part size", 2, part.getNumNondefaultElements());
assertEquals(0, cmp.compare(a, b)); assertEquals(0, cmp.compare(a, c)); assertTrue(cmp.compare(a, d) < 0); assertTrue(cmp.compare(a, e) > 0); assertTrue(cmp.compare(d, e) > 0);
assertEquals(expected, dataset); assertEquals(expected, dataset);
assertEquals("size", 7, test.size());
assertNotNull(AnalyzerUtils.createAnalyzer(StandardAnalyzer.class.getName()));
assertEquals(tree < split.getNbTrees(), reader.nextKeyValue()); assertEquals(split.getFirstId() + tree, reader.getCurrentKey().get());
assertEquals(1.0, firstVector.get(0), 0); assertEquals(65.0, firstVector.get(1), 0); assertEquals(1.0, firstVector.get(3), 0); assertEquals(1.0, firstVector.get(4), 0); assertTrue("Vector is not dense", vector instanceof DenseVector); assertEquals(5, count);
assertEquals(0.5, iteratorNodes.next().get(), EPSILON);
assertEquals(0.0, expected.getDistanceSquared(actual), EPSILON);
assertTrue("a.getDistanceSquared(b) != a.minus(b).getLengthSquared", Math.abs(expected - test.getDistanceSquared(other)) < 10.0E-7);
assertEquals(numSplits, splits.size()); assertTrue(splits.get(index) instanceof InMemInputSplit); assertEquals(expectedId, split.getFirstId()); assertEquals(nbTreesPerSplit, split.getNbTrees()); assertEquals(nbTrees - totalTrees, split.getNbTrees());
assertNotNull(originalRecommended); assertNotNull(rescoredRecommended); assertEquals(2, originalRecommended.size()); assertEquals(2, rescoredRecommended.size()); assertEquals(originalRecommended.get(0).getItemID(), rescoredRecommended.get(1).getItemID()); assertEquals(originalRecommended.get(1).getItemID(), rescoredRecommended.get(0).getItemID());
assertTrue(exceptionThrown); assertFalse(exceptionThrown); assertTrue(exceptionThrown);
assertEquals(23.1, firstVector.get(1), 0); assertEquals(3.23, firstVector.get(2), 0); assertEquals(1.2, firstVector.get(3), 0); assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector); assertEquals(9, count);
assertEquals(1.0, miIi.get(0, 0), EPSILON); assertEquals(2.0, miIi.get(1, 0), EPSILON); assertEquals(3.0, miIi.get(2, 0), EPSILON); assertEquals(4.0, miIi.get(0, 1), EPSILON); assertEquals(5.0, miIi.get(1, 1), EPSILON); assertEquals(6.0, miIi.get(2, 1), EPSILON);
assertEquals(0.0, expected.getDistanceSquared(actual), 1.0e-9);
assertEquals(cm.getLabels().size(), m.numCols()); assertTrue(rowLabels.keySet().contains(LABELS[0])); assertTrue(rowLabels.keySet().contains(LABELS[1])); assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL)); assertEquals(2, cm.getCorrect(LABELS[0])); assertEquals(20, cm.getCorrect(LABELS[1])); assertEquals(0, cm.getCorrect(DEFAULT_LABEL));
assertEquals(expected, dataset); assertEquals(expected, dataset);
assertTrue("ZipFile: "+duration+", IDirectory: "+duration2 , duration2 < 10*duration ); assertTrue("ZipFile: "+duration+", IDirectory: "+duration3 , duration3 < 10*duration );
assertEquals( "Empty headers are treated the same as those with an empty quoted string", "\\"\\"", header.getValue()); assertEquals("Empty headers should have one clause", 1, header.getClauses().size());
assertEquals(1, rc.insertHostedCapability(caps, hc)); assertSame(hc, caps.get(1));
assertTrue(ex instanceof IllegalArgumentException);
assertEquals(new Long(4), (Long) eventCompositeData.get(IDENTIFIER)); assertEquals("test", (String) eventCompositeData.get(SYMBOLIC_NAME)); assertEquals(new Integer(BundleEvent.INSTALLED), (Integer) eventCompositeData.get(EVENT)); assertEquals("location", (String) eventCompositeData.get(LOCATION));
assertEquals(2, result.length); assertArrayEquals(new String[]{ factoryPid + "-2160133952674-0", location }, result[0] ); assertArrayEquals(new String[]{ factoryPid + "-1260133982371-1", location }, result[1] );
assertNull(zip); assertNotNull(zip); assertNotNull(zip.getParent()); assertEquals("fileSystemTest", zip.getParent().getName()); assertEquals("fileSystemTest/app2.zip", zip.getName()); assertNotNull(appMf); assertEquals("fileSystemTest/app2.zip/META-INF/APPLICATION.MF", appMf.getName()); assertFalse(zip.isRoot()); assertEquals(dir, zip.getRoot()); assertEquals(dir, appMf.getRoot());
assertTrue(isBundlePendingRemoval(bundle, admin));
assertEquals(serviceId, metadata.getBlueprintContainerServiceId(bundleId));
assertEquals("a", compositeData.get(KEY)); assertEquals("b", compositeData.get(VALUE));
assertNotNull(handler.getMbean());
assertNull("We have apparently found a bundle that is not in the application in the ApplicationRepository", sug);
assertNull(result);
assertNull(metadata.getBlueprintContainerServiceIds());
assertEquals(new Long(44), data.get(IDENTIFIER)); assertEquals(new Long(1), data.get(BUNDLE_IDENTIFIER)); assertEquals("string", data.get(BUNDLE_LOCATION)); assertEquals("org.apache.aries.jmx.core", data.get(BUNDLE_SYMBOLIC_NAME)); assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, (String[]) data.get(OBJECT_CLASS)); assertEquals(ServiceEvent.REGISTERED, data.get(EVENT));
assertEquals(2, map.size()); assertEquals("1", map.get("one")); assertEquals("2", map.get("two"));
assertEquals ("comp1 class wrong in list", SimpleComponent.class.getName(), compClass); assertEquals ("comp2 class wrong in list", AnotherComponent.class.getName(), compClass); assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
assertEquals(factoryPid, mbean.getFactoryPid(factoryPid + "-1260133982371-0")); assertEquals(factoryPid, mbean.getFactoryPidForLocation(factoryPid + "-1260133982371-0", "location"));
assertEquals(TxType.MANDATORY, getEffectiveType(txData, "defaultType").getTxType()); assertEquals(TxType.SUPPORTS, getEffectiveType(txData, "supports").getTxType());
assertFalse(isBundleRequiredByOthers(bundle, admin)); assertTrue(isBundleRequiredByOthers(bundle, admin));
assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
assertArrayEquals(new long[] { 56, 5, 34}, getRegisteredServiceIds(bundle));
assertEquals(0, registrations.size()); assertEquals(0, registrations.size());
assertEquals ("graceperiod wrong", 300000, timeout); assertEquals ("graceperiod wrong", 300000, timeout);
assertFalse(rollbackOnBatchUpdateException.contains(SQLDataException.class)); assertTrue(rollbackOnBatchUpdateException.contains(BatchUpdateException.class)); assertTrue(rollbackOnSQLDataException.contains(SQLDataException.class)); assertFalse(rollbackOnSQLDataException.contains(BatchUpdateException.class));
assertEquals ("graceperiod wrong", -1, timeout); assertEquals ("graceperiod wrong", -1, timeout);
assertSame(mediated.getClass(), service.mediate(raw, CharSequence.class).getClass());
assertEquals(MyBean3.class, bean.clazz); assertEquals("myBean3", bean.id); assertEquals("There should be no persistence fields", 0, getPersistenceFields(bean).size()); assertEquals(5, bean.properties.size()); assertEquals("prototype", bean.attributes.get("scope")); assertEquals(expectedTxs, getTransactionalDefs(bean));
assertNotNull(innerFile); assertNotNull(inner);
assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
assertEquals ("graceperiod wrong", 10000, timeout);
assertArrayEquals(cidarray, metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.SERVICE_METADATA));
assertTrue("Deployment.mf should have been updated", app.getDeploymentMetadata() == depMf);
assertEquals(-1, metadata.getBlueprintContainerServiceId(bundleId));
assertEquals(TxType.MANDATORY, getEffectiveType(txData, "defaultType").getTxType()); assertEquals(TxType.REQUIRED, getEffectiveType(txData, "supports").getTxType());
assertNotNull(r1); assertTrue("expected proxied service class", r1 != service); assertNotNull(r2); assertTrue("expected non-proxied service class", r2 == service);
assertTrue(dir.toString(), dir.toString().endsWith("app2.zip"));
assertEquals("my1", definedName); assertEquals("Name should be defined using @Named", definedName, bean.id); assertEquals("There should be no persistence fields", 0, getPersistenceFields(bean).size()); assertTrue("There should be no transaction definition", getTransactionalDefs(bean).isEmpty()); assertEquals("There should be no properties", 0, bean.properties.size()); assertEquals("prototype", bean.attributes.get("scope"));
assertEquals(TxType.REQUIRED, getEffectiveType(txData, "defaultType").getTxType()); assertEquals(TxType.SUPPORTS, getEffectiveType(txData, "supports").getTxType());
assertFalse("Precondition", tempDir.exists()); assertTrue(tempDir.exists()); assertFalse(tempDir.exists());
assertNotNull(locator); assertTrue(locator.getClass().getName(), locator instanceof OpenEJBLocator);
assertTrue("Four imports expected", imports.size() == 4); assertTrue(imports.contains("javax.jms")); assertTrue(imports.contains("javax.mystuff")); assertTrue(imports.contains("javax.transaction")); assertTrue(imports.contains("a.b")); assertFalse(imports.contains("java.util"));
assertEquals("file:/newlocation", locationArgument.getValue());
assertEquals(0, registrations.size());
assertEquals(7, event.getBundleId()); assertEquals("t", event.getBundleSymbolicName()); assertEquals("l", event.getLocation()); assertEquals(BundleEvent.RESOLVED, event.getEventType());
assertTrue(vr.isExactVersion()); assertFalse(vr.isExactVersion()); assertTrue(vr.isExactVersion());
assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
assertEquals("The symbolic name is wrong.", nvp.getName(), "com.acme.foo"); assertEquals("The value is wrong.", "true", nvp.getAttributes().get("singleton:") ); assertEquals("The directive is wrong.", "always", nvp.getAttributes().get("fragment-attachment:") ); assertEquals("The symbolic name is wrong.", nvp2.getName(), "com.acme.foo");
assertEquals(MyBean1.class, bean.clazz); assertEquals("myBean1", bean.id); assertEquals(2, getPersistenceFields(bean).size()); assertEquals(Sets.newHashSet("em", "emf"), getPersistenceFields(bean)); assertEquals(1, bean.properties.size()); assertEquals("singleton", bean.attributes.get("scope")); assertEquals("bean2", prop.name); assertEquals("serviceA", prop.ref); assertEquals(expectedTxs, getTransactionalDefs(bean));
assertSame(mediated.getClass(), service.mediate(raw, DelayedEcho.class).getClass());
assertTrue("Should have thrown an exception", false); assertTrue("Should have thrown an exception", false);
assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
assertNotNull(mbean);
assertEquals(2, info.size() ); assertArrayEquals(new byte[] { 20, 30, 40 }, (byte[]) info.get(PROVISIONING_AGENT_CONFIG)); assertEquals("x.test", info.get(PROVISIONING_SPID));
assertNotNull(innerFile); assertNotNull(inner); assertFalse(((File)f.get(outer)).exists());
assertArrayEquals(serviceIds, metadata.getBlueprintContainerServiceIds());
assertEquals(0, getServiceIds(null).length); assertEquals(0, getServiceIds(new ServiceReference[0]).length); assertArrayEquals(new long[] { 15, 5, 25 }, getServiceIds(new ServiceReference[] {s1, s2, s3} ) );
assertNotNull (sc); assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", msg);
assertEquals("/location", mbean.getBundleLocation(pid));
assertEquals(0, registrations.size()); assertEquals(0, registrations.size());
assertArrayEquals(new long[] { 15, 16, 17 }, getServicesInUseByBundle(bundle));
assertTrue (cx.contains(A.class)); assertTrue (cx.contains(B.class)); assertTrue (cx.contains(C.class)); assertTrue (cx.contains(D.class)); assertTrue (cx.size() == 4);
assertNull(result);
assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
assertEquals(0, getBundleExportedPackages(bundle, admin).length); assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , getBundleExportedPackages(bundle, admin));
assertEquals(0, registrations.size()); assertEquals(0, registrations.size());
assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
assertEquals(0, getBundleIds((Bundle[])null).length); assertEquals(0, getBundleIds(new Bundle[0]).length); assertArrayEquals(new long[] { 47 , 23 }, getBundleIds(new Bundle[] { b1, b2 }));
assertNotNull(mbean);
assertNotNull(result);
assertNotNull(properties); assertEquals(PROPERTIES_TYPE, properties.getTabularType()); assertEquals(2, properties.values().size()); assertEquals("value", oneData.getValue()); assertEquals(2, twoData.getValue()); assertEquals("2", twoData.getEncodedValue());
assertEquals ("comp1 message wrong", "comp1_message", sc.getIdMessage()); assertEquals ("comp2 message wrong", "AnotherComponent with id comp2", ac.getIdMessage()); assertEquals ("Not all expected components were found", expectedCompIds.size(), 0);
assertNull(result);
assertEquals("bundleContext", bcProp.name); assertEquals("blueprintBundleContext", bcProp.ref); assertEquals("singleton", bean.attributes.get("scope")); assertEquals(expectedTxs, getTransactionalDefs(bean));
assertEquals(0, registrations.size()); assertEquals(1, registrations.size()); assertEquals(new ObjectName("foo:bar=123"), registrations.get(ms));
assertEquals(cidset, getAsSet(metadata.getComponentIds(serviceId)));
assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfiguration(fpid)); assertEquals(fpid + "-1260133982371-0", mbean.createFactoryConfigurationForLocation(fpid, "/bundlex"));
assertEquals(7, event.getServiceId()); assertEquals(67, event.getBundleId()); assertArrayEquals(new String[] {"org.apache.aries.jmx.Mock" }, event.getServiceInterfaces()); assertEquals("test", event.getBundleSymbolicName()); assertEquals("string", event.getBundleLocation()); assertEquals(ServiceEvent.MODIFIED, event.getEventType());
assertNotNull (sc); assertEquals ("comp1 message wrong", "comp1_message", msg);
assertThat(xml, hasXPath("count(/mountains/mountain)", equalTo("2"))); assertThat(xml, hasXPath("count(/mountains/mountain)", returningANumber(), greaterThanOrEqualTo(2d))); assertThat(xml, hasXPath("count(/mountains/mountain)", returningANumber(), not(lessThanOrEqualTo(1d))));
assertNotNull(the(source));
assertThat(the(xml), conformsTo(schema));
assertThat(xml, hasXPath("/mountains/@type"));
assertThat(xml, hasXPath("/mountains")); assertThat(xml, hasXPath("/mountains/mountain")); assertThat(xml, hasXPath("/mountains/mountain[2]/name")); assertThat(xml, hasXPath("/mountains/oceanRidge")); assertThat(xml, hasXPath("/mountains/mountain[@id=\'a\']/@altname"));
assertThat(xml, not(hasXPath("/mountains/volcanoe/@good", returningABoolean(), equalTo(false))));
assertThat( xml, hasXPath( "/mountains/mountain[@id=\'a\']/name", returningAnXmlNode(), equivalentTo(xml("<name><!-- some comment -->Everest</name>"))));
assertThat(the(xml), not(conformsTo(schema)));
assertNotNull(the(result));
assertNotNull(the(xml));
assertThat(the(xml), not(conformsTo(schema)));
assertThat( xml, hasXPath("/mountains/mountain[@id=\'a\']/name", containsString("Everest")));
assertNotNull(the(element));
assertThat(xml, hasXPath("/mountains/m:oceanRidge/@m:depth", usingNamespaces));
assertThat(xml, hasXPath("/mountains", usingNamespaces)); assertThat(xml, hasXPath("/mountains/mountain", usingNamespaces)); assertThat(xml, hasXPath("/mountains/mountain[2]/name", usingNamespaces)); assertThat(xml, hasXPath("/mountains/oceanRidge", usingNamespaces)); assertThat(xml, not(hasXPath("/mountains/range"))); assertThat(xml, hasXPath("/mountains/m:range", usingNamespaces));
assertThat(the(source.toString()), isEquivalentTo(the(xml)));
assertThat(xml, not(hasXPath("/mountains/range")));
assertThat(xml, hasXPath("/mountains/volcanoe/@good", returningABoolean(), equalTo(true))); assertThat(xml, hasXPath("not(/mountains/climber)", returningABoolean(), equalTo(true))); assertThat(xml, hasXPath("not(/mountains/volcanoe/@good)", returningABoolean(), equalTo(false)));
assertThat( xml, hasXPath("/mountains/mountain[@id=\'a\']/name", returningAnXmlNode(), equivalentTo(xml("<name>Everest</name>"))));
assertThat(the(xml), not(conformsTo(schema)));
assertThat(strategy.verify(concept, aggregationVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(constraint, aggregationVerification, COLUMN_NAMES, result), equalTo(FAILURE));
assertThat(test.getAbsoluteFile(), equalTo(new File(OUTPUT_DIRECTORY, "data/test").getAbsoluteFile()));
assertThat(plugins).anySatisfy(ruleParserPlugin -> { assertThat(ruleParserPlugin).isExactlyInstanceOf(YamlRuleParserPlugin.class); }); assertThat(ruleParserPlugin).isExactlyInstanceOf(YamlRuleParserPlugin.class);
assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE)); assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS));
assertThat(result).containsOnly("foo", "wildcard");
assertThat(parameters.get(PARAMETER_WITHOUT_DEFAULT), equalTo("value")); assertThat(parameters.get(PARAMETER_WITH_DEFAULT), equalTo("defaultValue")); assertThat(result.getStatus(), equalTo(Result.Status.FAILURE)); assertThat(result.getSeverity(), equalTo(Severity.BLOCKER));
assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE));
assertThat(bucket.size()).isEqualTo(0);
assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(SUCCESS)); assertThat(strategy.verify(concept, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE)); assertThat(strategy.verify(constraint, rowCountVerification, COLUMN_NAMES, result), equalTo(FAILURE));
assertThat(strategy.verify(concept, aggregationVerification, COLUMN_NAMES, result), equalTo(FAILURE)); assertThat(strategy.verify(constraint, aggregationVerification, COLUMN_NAMES, result), equalTo(SUCCESS));
assertThat(graph.getId()).isEqualTo(-1l); assertThat(graph.getParent()).isNull(); assertThat(graph.getSubGraphs()).isEmpty(); assertThat(nodes).hasSize(2); assertThat(node1.getId()).isEqualTo(1l); assertThat(node2.getId()).isEqualTo(2l); assertThat(relationships).hasSize(2); assertThat(relationship1.getId()).isEqualTo(1l); assertThat(relationship2.getId()).isEqualTo(2l);
assertThat(bucket.getIds(), empty());
assertThat(nodes).isNotEmpty(); assertThat(node).isNotNull(); assertThat(node.getId()).isEqualTo(1l); assertThat(node.getLabels()).containsExactly("Test");
assertThat(result).containsExactly("foo");
assertThat(visitConcept, equalTo(true)); assertThat(parameters.get(PARAMETER_WITHOUT_DEFAULT), equalTo("value")); assertThat(parameters.get(PARAMETER_WITH_DEFAULT), equalTo("defaultValue")); assertThat(result.getStatus(), equalTo(Result.Status.SUCCESS)); assertThat(result.getSeverity(), equalTo(Severity.MAJOR));
assertThat(descriptor, instanceOf(DependentTestItemDescriptor.class));
assertThat(message, containsString(RULESOURCE));
assertThat(result.getStatus(), equalTo(Result.Status.SKIPPED)); assertThat(result.getSeverity(), equalTo(Severity.MAJOR));
assertThat(result.getStatus(), equalTo(Result.Status.SKIPPED)); assertThat(result.getSeverity(), equalTo(Severity.BLOCKER));
assertThat(result, is(true));
assertThat(sources, hasSize(1)); assertThat(sources, Matchers.contains(matchesById("/path/rules.xml")));
assertThat(plugins).anySatisfy(ruleParserPlugin -> { assertThat(ruleParserPlugin).isExactlyInstanceOf(XmlRuleParserPlugin.class); }); assertThat(ruleParserPlugin).isExactlyInstanceOf(XmlRuleParserPlugin.class);
assertThat(sources, hasSize(1)); assertThat(sources, Matchers.contains(matchesById("/path/rules.adoc")));
assertThat(sources.size(), equalTo(1));
assertThat(plugins).anySatisfy(ruleParserPlugin -> { assertThat(ruleParserPlugin).isExactlyInstanceOf(AsciidocRuleParserPlugin.class); }); assertThat(ruleParserPlugin).isExactlyInstanceOf(AsciidocRuleParserPlugin.class);
assertThat(result, is(false));
assertThat(message, containsString(concept.getId())); assertThat(message, containsString(PARAMETER_WITHOUT_DEFAULT));
assertThat(bucket.match("concept1"), equalTo(singletonList(c1))); assertThat(bucket.match("c?ncept1"), equalTo(singletonList(c1))); assertThat(bucket.match("concept?"), equalTo(asList(c1, c2, c3))); assertThat(bucket.match("c*ncept1"), equalTo(singletonList(c1))); assertThat(bucket.match("concept*"), equalTo(asList(c1, c2, c3)));
assertThat(message, containsString("test")); assertThat(transaction, equalTo(false));
assertThat("The reported column names must match the given column names.", capturedResult.getColumnNames(), equalTo(columnNames)); assertThat("Expecting one row.", capturedRows.size(), equalTo(1)); assertThat("The reported column names must match the given column names.", new ArrayList<>(capturedRow.keySet()), equalTo(columnNames));
assertThat(nodes.size()).isEqualTo(1); assertThat(node).isNotNull(); assertThat(node.getId()).isEqualTo(-1l); assertThat(node.getLabel()).isEqualTo("Virtual Node"); assertThat(node.getLabels()).containsExactly("Test"); assertThat(node.getProperties()).isEqualTo(properties);
assertEquals("0x637df1eb4c09a98dc453cdea36c6242657b34c2792a700647d14e62033140a83", sha3Hash);
assertEquals(MSG_HASH, eip1077Hash);
assertEquals("0xff5fa2a47214bd12e073aa16f8c5f68cbcae28ed9131ae8b413805ba2e1aa7d3", sha3Hash);
assertEquals(expectedOutput, encodeMessage);
assertEquals(EncodedData, encodeDataType);
assertEquals(expectedOutput, encodeMessage);
assertEquals(EncodedMailType, encodeDataType);
assertEquals(MSG_HASH, sha3Hash);
assertEquals(expectedOutput, encodeMessage);
assertEquals(MailTypeHash, encodeDataType);
assertTrue(validator.validate(transformationCode));
assertFalse(validator.validate(transformationCode));
assertFalse(validator.validate(transformationCode));
assertTrue(validator.validate(transformationCode));
assertTrue(validator.validate(transformationCode));
assertFalse(validator.validate(transformationCode));
assertEquals(UInt256.FIVE, fee);
assertThat(upParticles).isEmpty();
assertThat(s).contains(PerBytesFeeEntry.class.getSimpleName());
assertThat(extractedState).isEqualTo(currentState);
assertThat(tokenBalance.getBalance().get(token).compareTo(tenSubunits)).isEqualTo(0);
assertThat(s).contains(PerAtomFeeEntry.class.getSimpleName());
assertEquals(UInt256.ZERO, f.feeFor(null, 0, outputs)); assertEquals(UInt256.ZERO, f.feeFor(null, 0, outputs)); assertEquals(FEE, f.feeFor(null, 0, outputs)); assertEquals(FEE.multiply(UInt256.TWO), f.feeFor(null, 0, outputs));
assertTrue(client == HttpClients.getSslAllTrustingClient());
assertEquals(FEE, f.feeFor(null, Integer.MAX_VALUE, null));
assertThat(state.getNodeStates()).isEmpty();
assertThat(spunParticles).hasSize(2);
assertThat(particleGroups).anyMatch(hasInstanceOf(FixedSupplyTokenDefinitionParticle.class)); assertThat(particleGroups).anyMatch(hasInstanceOf(TransferrableTokensParticle.class)); assertThat(particleGroups).anyMatch(hasInstanceOf(RRIParticle.class)); assertThat(particleGroups.stream().flatMap(ParticleGroup::spunParticles).count()).isEqualTo(3);
assertThat(tokenBalance.getBalance().get(token).compareTo(tenSubunits)).isEqualTo(0);
assertThat(s).contains(FeeTable.class.getSimpleName());
assertThat(s).contains(PerParticleFeeEntry.class.getSimpleName());
assertThat(extractedState1).isEqualTo(currentState1); assertThat(extractedState2).isEqualTo(currentState2);
assertThat(particleGroups).anyMatch(hasInstanceOf(MutableSupplyTokenDefinitionParticle.class)); assertThat(particleGroups).anyMatch(hasInstanceOf(TransferrableTokensParticle.class)); assertThat(particleGroups).anyMatch(hasInstanceOf(UnallocatedTokensParticle.class)); assertThat(particleGroups).anyMatch(hasInstanceOf(RRIParticle.class)); assertThat(particleGroups.stream().flatMap(ParticleGroup::spunParticles).count()).isEqualTo(6);
assertEquals(FEE, f.fee());
assertEquals("one", retryer.doRetry(OP, goodAuthCache, () -> "one", policy));
assertEquals("test", e.getMessage());
assertThat(t.getMessage(), containsString("BadClass has no constructor annotated with B2Json.constructor")); assertThat(t.getMessage(), containsString("BadClass has no constructor annotated with B2Json.constructor"));
assertEquals((Long) 0L, contentSource.getSrcLastModifiedMillisOrNull());
assertEquals(0, contentSource.getContentLength());
assertEquals(fileVersion, client.getFileInfoByName(request)); assertEquals(fileVersion, client.getFileInfoByName(bucketName(1), fileName(1)));
assertTrue(fileVersion == client.finishLargeFile(request));
assertTrue(B2ContentMemoryWriter .build() .getVerifySha1ByRereadingFromDestination()); assertTrue(!B2ContentMemoryWriter .builder() .setVerifySha1ByRereadingFromDestination(false) .build() .getVerifySha1ByRereadingFromDestination());
assertEquals(6, stream.available());
assertTrue(e.getMessage().startsWith("sha1 mismatch from destination."));
assertEquals("b2-sdk-java", B2Sdk.getName());
assertEquals(response, client.listBuckets()); assertEquals(response.getBuckets(), client.buckets()); assertEquals(response, new B2ListBucketsResponse(listOf(bucket(1))));
assertEquals(0, obj.x); assertEquals(1, obj.version);
assertEquals( original, B2ListUnfinishedLargeFilesRequest.builder(original).build() );
assertEquals(bucket(1), client.getBucketOrNullByName(BUCKET_NAME)); assertEquals(null, client.getBucketOrNullByName("noSuchBucket"));
assertArrayEquals(makeBytes(LEN), writer.getBytes()); assertTrue(sha1WasVerifiedFromDestination(writer));
assertEquals(int.class, resolverWithTypeArguments.resolveType(declaredFieldsWithTypeArguments[0]));
assertEquals("B2UploadProgress{partIndex=1, partCount=2, startByte=3, length=4, bytesSoFar=5, state=UPLOADING}", getProgressString());
assertArrayEquals(bytes, helper.getBytes());
assertEquals("bar", obj.sequence); assertEquals(String.class, obj.sequence.getClass());
assertEquals("test", e.getMessage());
assertEquals(bucket, response);
assertTrue(resolvedType instanceof Class); assertEquals(TestClassWithoutTypeArguments.class, resolvedType); assertTrue(resolvedType instanceof B2TypeResolver.ResolvedParameterizedType); assertEquals(TestClassWithTypeArguments.class, resolvedParameterizedType.getRawType()); assertArrayEquals( new Type[]{String.class, Integer.class}, resolvedParameterizedType.getActualTypeArguments());
assertTrue(fileVersion == client.startLargeFile(request));
assertTrue(stream instanceof B2InputStreamWithByteProgressListener); assertEquals('a', stream.read()); assertEquals('b', stream.read()); assertEquals(EOF, stream.read());
assertEquals(part, partStorer.storePart(largeFileStorer, uploadListener));
assertEquals(expected, b2Json.toJson(objectWithGenericArrays));
assertEquals("", toHexString(null)); assertEquals("", toHexString(new byte[0])); assertEquals("abf0", toHexString(new byte[] {(byte) 0xab, (byte) 0xf0}));
assertEquals(bucket, client.deleteBucket(request)); assertEquals(bucket, client.deleteBucket(bucketId(1))); assertEquals(request, B2DeleteBucketRequest.builder(bucketId(1)).build());
assertEquals(B2ByteRange.between(10, 12), request.getRange()); assertNull(request2.getRange());
assertNull(B2ByteRange.parse(null)); assertNull(B2ByteRange.parse("garbage")); assertNull(B2ByteRange.parse("bytes=-")); assertNull(B2ByteRange.parse("bytes=5-2"));
assertEquals(0, writer.getBytes().length); assertArrayEquals(makeBytes(LEN), writer.getBytes());
assertEquals("", percentDecode("")); assertEquals("a--/--b--+--:--|-- --", percentDecode("a--/--b--%2B--%3A--%7C--+--"));
assertEquals("test", e.getMessage());
assertNull(obj.v_string); assertNull(obj.v_empty);
assertEquals(int.class, resolverWithoutTypeArguments.resolveType(declaredFieldsWithoutTypeArguments[0]));
assertTrue(resolvedType instanceof ParameterizedType); assertEquals(TwoParameterizedTypes.class, resolvedParameterizedType.getRawType()); assertArrayEquals(new Type[]{String.class, Integer.class}, resolvedParameterizedType.getActualTypeArguments());
assertTrue(obj.v_boolean); assertEquals(5, obj.v_byte); assertEquals(6, obj.v_char); assertEquals(Color.BLUE, obj.v_color); assertEquals(7.0, obj.v_double, 0.0001); assertEquals(8.0, obj.v_float, 0.0001); assertEquals(9, obj.v_int); assertEquals(10, obj.v_long); assertEquals("abc", obj.v_string);
assertTrue(response == client.getUploadUrl(request));
assertEquals(SAMPLE_LAST_MODIFIED_LONG, makeNormal().getSrcLastModifiedMillis()); assertNull(makeEmpty().getSrcLastModifiedMillis()); assertNull(withBogusSrcLastModifiedMillis.getSrcLastModifiedMillis());
assertEquals("sha1", source.getSha1OrNull());
assertEquals((Long) 4321L, r.start); assertEquals((Long) 9876L, r.end); assertEquals("bytes=4321-9876", r.toString());
assertEquals(expectedUrl, webifier.getDownloadByIdUrl(ACCOUNT_AUTH, request));
assertTrue(e.getMessage().startsWith("sha1 mismatch from network."));
assertEquals(downloadAuth, client.getDownloadAuthorization(request)); assertEquals(request, B2GetDownloadAuthorizationRequest.builder(bucketId(1), FILE_PREFIX, 100).build());
assertEquals("{\\n" + " \\"omitNullInteger\\": 1,\\n" + " \\"omitNullString\\": \\"foo\\",\\n" + " \\"regularInteger\\": 1,\\n" + " \\"regularString\\": \\"bar\\"\\n" + "}", actual);
assertEquals(3L, stream.skip(6));
assertEquals( new B2ApplicationKey( "accountId", "appKeyId", "keyName", capabilities, "bucketId", "namePrefix", 12345678L, B2TestHelpers.makeBucketOrApplicationKeyOptions() ), new B2CreatedApplicationKey( "accountId", "appKeyId", "appKeySecret", "keyName", capabilities, "bucketId", "namePrefix", 12345678L, B2TestHelpers.makeBucketOrApplicationKeyOptions() ).toApplicationKey() );
assertEquals(part, partStorer.storePart(largeFileStorer, uploadListener));
assertEquals(json, b2Json.toJson(holder));
assertEquals("{\\n \\"name\\": \\"testABC\\",\\n \\"number\\": 1\\n}", testClassOneStr);
assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals("test", e.getMessage());
assertEquals("", join(",", new Object[0])); assertEquals("null", join(",", new Object[] {null})); assertEquals("null,null", join(",", new Object[] {null, null})); assertEquals("abc, 1, 2, 3", join(", ", new Object[] {"abc", 1, 2, 3}));
assertNull(actual.omitNullString); assertNull(actual.regularString); assertNull(actual.omitNullInteger); assertNull(actual.regularInteger);
assertEquals(response, client.listBuckets(expectedRequest)); assertEquals(response, new B2ListBucketsResponse(listOf(bucket(1))));
assertEquals(EOF, stream.read(V));
assertNotNull(factory);
assertEquals("", B2StringUtil.underscoresToCamelCase("", false)); assertEquals("listFiles", B2StringUtil.underscoresToCamelCase("LIST_FILES", false)); assertEquals("ListFiles", B2StringUtil.underscoresToCamelCase("_LIST_FILES", false)); assertEquals("ListFiles", B2StringUtil.underscoresToCamelCase("LIST_FILES", true));
assertEquals("hello", retryer.doRetry(OP, goodAuthCache, guts, policy)); assertEquals(7, guts.getCallCount());
assertEquals(bucket(1), client.updateBucket(request)); assertEquals( request, B2UpdateBucketRequest .builder(bucket(1)) .setBucketInfo(B2Collections.mapOf()) .setLifecycleRules(listOf()) .setBucketType(B2BucketTypes.ALL_PUBLIC) .build());
assertEquals("1234", headers.getValueOrNull(B2Headers.CONTENT_LENGTH)); assertNull(headers.getValueOrNull("noSuchHeader"));
assertEquals("test", e.getMessage());
assertEquals(expectedUrl, webifier.getDownloadByNameUrl(ACCOUNT_AUTH, request));
assertEquals( "{}", b2Json.toJson(new VersionedContainer(3, 5), options) ); assertEquals( "{\\n \\"x\\": 3\\n}", b2Json.toJson(new VersionedContainer(3, 5), options) ); assertEquals( "{\\n \\"x\\": 3\\n}", b2Json.toJson(new VersionedContainer(3, 5), options) ); assertEquals( "{}", b2Json.toJson(new VersionedContainer(3, 5), options) );
assertFalse(reader.nextNonWhitespaceIsEof());
assertEquals(6, orig.age); assertEquals(expectedJson, json);
assertEquals(0, largeFileStorer.getStartByteOrUnknown(1)); assertEquals(100, largeFileStorer.getStartByteOrUnknown(2)); assertEquals(100 + PART_SIZE_FOR_FIRST_TWO, largeFileStorer.getStartByteOrUnknown(3)); assertEquals(B2UploadProgress.UNKNOWN_PART_START_BYTE, largeFileStorer.getStartByteOrUnknown(4));
assertEquals("", percentEncode("")); assertEquals("a--/--b--%2B--%3A--%7C--+--", percentEncode("a--/--b--+--:--|-- --"));
assertEquals( "{\\n" + " \\"x\\": 3\\n" + "}", b2Json.toJson(new VersionedContainer(3, 5), options) );
assertTrue(empty.isEmpty()); assertEquals(3, three.size()); assertEquals("a", three.get(0)); assertEquals("b", three.get(1)); assertEquals("c", three.get(2));
assertEquals(part, partStorer.storePart(largeFileStorer, uploadListener));
assertTrue(firstRangedContentSource instanceof TestContentSource); assertTrue(secondRangedContentSource instanceof B2PartOfContentSource);
assertTrue(guts.getAsException(7) == e); assertEquals(8, guts.getCallCount()); assertTrue(caughtIt);
assertEquals(0, map.size());
assertEquals(-1, in.read());
assertEquals( original, B2ListUnfinishedLargeFilesRequest .builder("bucketId") .setNamePrefix("namePrefix") .setStartFileId("startFileId") .setMaxFileCount(123) .build() );
assertEquals('a', stream.read());
assertEquals(0, empty.size()); assertEquals(1, one.size()); assertEquals((Integer) 1, one.get("a")); assertEquals(2, two.size()); assertEquals((Integer) 1, two.get("a")); assertEquals((Integer) 2, two.get("b")); assertEquals(3, three.size()); assertEquals((Integer) 1, three.get("a")); assertEquals((Integer) 2, three.get("b")); assertEquals((Integer) 3, three.get("c"));
assertEquals(applicationKey, convertedApplicationKey);
assertEquals(part, partStorer.storePart(mock(B2LargeFileStorer.class), uploadListener));
assertEquals(bucket, response); assertEquals(bucket(1), bucket(1)); assertEquals("B2Bucket(bucket1,allPublic,bucket1,2 infos,0 corsRules,1 lifecycleRules,0 options,v1)", bucket.toString()); assertEquals("B2Bucket(bucket1,allPublic,bucket1,2 infos,0 corsRules,1 lifecycleRules,[myOption1, myOption2] options,v1)", bucketWithOptions.toString());
assertTrue(resolvedType instanceof ParameterizedType); assertEquals(OneParameterizedType.class, resolvedParameterizedType.getRawType()); assertArrayEquals(new Type[]{String.class}, resolvedParameterizedType.getActualTypeArguments());
assertEquals(response, client.listFileVersions(request)); assertEquals(response, new B2ListFileVersionsResponse(listOf(), null, null));
assertEquals(fileVersion, client.hideFile(request)); assertEquals(request, B2HideFileRequest.builder(bucketId(1), fileName(2)).build());
assertTrue(makeEmpty().getNames().isEmpty()); assertEquals(expectedNames, new ArrayList<>(headers.getNames()));
assertEquals(accountAuth.getAbsoluteMinimumPartSize(), partSizes.getMinimumPartSize()); assertEquals(accountAuth.getRecommendedPartSize(), partSizes.getRecommendedPartSize());
assertEquals(SAMPLE_SHA1, headers.getContentSha1EvenIfUnverifiedOrNull()); assertNull(makeEmpty().getContentSha1OrNull());
assertEquals(response, client.listParts(request)); assertEquals(response, new B2ListPartsResponse(listOf(), null));
assertTrue(resolvedType instanceof GenericArrayType); assertEquals(String.class, resolvedGenericArrayType.getGenericComponentType());
assertEquals(response, client.listUnfinishedLargeFiles(request)); assertEquals(response, new B2ListUnfinishedLargeFilesResponse(listOf(), null));
assertEquals(createdApplicationKey, convertedCreatedApplicationKey);
assertEquals(8, guts.getCallCount()); assertTrue(e == guts.getAsException(7)); assertTrue(caughtIt);
assertEquals(fileId(1), version.getFileId()); assertEquals(fileName(1), version.getFileName()); assertEquals(1L, version.getContentLength()); assertEquals(1L, version.getUploadTimestamp()); assertEquals(expectedFileInfo, version.getFileInfo()); assertEquals(1L, Long.parseLong(version.getFileInfo().get("src_last_modified_millis")));
assertEquals(response, new B2DeleteFileVersionResponse(fileId(1), fileName(1))); assertEquals("B2DeleteFileVersionResponse{fileId=\'" + fileId(1) + "\', fileName=\'" + fileName(1) + "\'}", response.toString());
assertEquals(7, obj.x); assertEquals(5, obj.version);
assertTrue(resolvedType instanceof GenericArrayType); assertEquals( new B2TypeResolver.ResolvedParameterizedType( OneParameterizedType.class, new Type[]{Integer.class} ), resolvedGenericArrayType.getGenericComponentType());
assertEquals(2, set.size()); assertTrue(set.contains("a")); assertTrue(set.contains("b"));
assertTrue(response == client.getUploadPartUrl(request));
assertTrue(Thread.interrupted());
assertNull(B2DateTimeUtil.parseDuration(null)); assertNull(B2DateTimeUtil.parseDuration("")); assertNull(B2DateTimeUtil.parseDuration("-")); assertNull(B2DateTimeUtil.parseDuration("1")); assertNull(B2DateTimeUtil.parseDuration("1a")); assertNull(B2DateTimeUtil.parseDuration("1s2d")); assertNull(B2DateTimeUtil.parseDuration("1ha"));
assertTrue(factory instanceof B2StorageClientFactoryPathBasedImpl); assertNotNull(factory.create("appKeyId", "appKey", "userAgent"));
assertArrayEquals(makeBytes(LEN), writer.getBytes()); assertTrue(sha1WasVerifiedFromDestination(writer));
assertEquals((Long) 6L, source.getSrcLastModifiedMillisOrNull());
assertTrue(B2ContentFileWriter .builder(FILE) .build() .getVerifySha1ByRereadingFromDestination()); assertTrue(!B2ContentFileWriter .builder(FILE) .setVerifySha1ByRereadingFromDestination(false) .build() .getVerifySha1ByRereadingFromDestination());
assertEquals("{\\n \\"insensitiveString\\": \\"bar\\",\\n \\"sensitiveString\\": \\"foo\\"\\n}", B2Json.toJsonOrThrowRuntime(secureContainer, options));
assertEquals(String.class, resolvedField0); assertEquals( new B2TypeResolver.ResolvedParameterizedType( RecursiveClass.class, new Type[]{String.class} ), resolvedField1);
assertTrue("Map with null key should not be allowed to be serialized", false); assertEquals("Map key is null", ex.getMessage());
assertEquals(fileVersion, client.copySmallFile(request));
assertEquals(response, new B2CancelLargeFileResponse(fileId(1), bucketId(1), fileName(1))); assertEquals("B2FileVersion{fileId=\'" + fileId(1) + "\', bucketId=\'" + bucketId(1) + "\', fileName=\'" + fileName(1) + "\'}", response.toString());
assertEquals("yippee", retryer.doRetry(OP, goodAuthCache, guts, policy)); assertEquals(7, guts.getCallCount());
assertEquals(0, excerpt(makeEmpty(), 0, 0).available()); assertEquals(0, excerpt(makeDigits(), 0, 0).available()); assertEquals(0, excerpt(makeEmpty(), 0, 6).available()); assertEquals(0, excerpt(makeDigits(), 10, 6).available()); assertEquals(0, excerpt(makeEmpty(), 1, 0).available()); assertEquals(0, excerpt(makeDigits(), 10, 0).available());
assertEquals(0, a1.compareTo(a2)); assertTrue(b.compareTo(a1) > 0); assertTrue(c.compareTo(a1) > 0); assertTrue(d.compareTo(a1) > 0);
assertTrue((afterMillis - beforeMillis) > 900);
assertEquals((Long) 1234L, r.start); assertNull(r.end); assertEquals("bytes=1234-", r.toString());
assertEquals("B2UploadProgress{partIndex=1, partCount=2, startByte=3, length=4, bytesSoFar=7, state=UPLOADING}", getProgressString());
assertEquals(expected, actual);
assertEquals("B2UploadProgress{partIndex=1, partCount=2, startByte=3, length=4, bytesSoFar=6, state=FAILED}", getProgressString());
assertEquals("{\\n \\"number\\": 1\\n}", testClassOneStr);
assertTrue(isEmpty(null)); assertTrue(isEmpty("")); assertTrue(!isEmpty("foo"));
assertEquals(fileVersion, client.getFileInfo(request)); assertEquals(fileVersion, client.getFileInfo(fileId(1)));
assertNull(contentSource.getSha1OrNull()); assertEquals(SAMPLE_SHA1, withSha1.getSha1OrNull());
assertEquals("test", e.getMessage());
assertEquals("{\\n \\"name\\": \\"testABC\\",\\n \\"number\\": 1\\n}", testClassOneStr);
assertTrue(allDecimal("", 0, 0)); assertTrue(allDecimal("a123b", 1, 4)); assertTrue(!allDecimal("a123b", 0, 4)); assertTrue(!allDecimal("a123b", 1, 5));
assertEquals(bucket, convertedBucket);
assertEquals(response, client.listFileNames(request)); assertEquals(response, new B2ListFileNamesResponse(listOf(), null));
assertEquals("{\\n" + " \\"regularInteger\\": null,\\n" + " \\"regularString\\": null\\n" + "}", actual);
assertEquals("{\\n \\"insensitiveString\\": \\"bar\\",\\n \\"sensitiveString\\": \\"***REDACTED***\\"\\n}", B2Json.toJsonOrThrowRuntime(secureContainer, options));
assertEquals(request, B2DownloadByNameRequest .builder(bucketName(1), fileName(1)) .setRange(B2ByteRange.startAt(17)) .build());
assertEquals(ACCOUNT_AUTHORIZATION, e.getRequestCategory()); assertEquals(1, guts.getCallCount()); assertTrue(caughtIt);
assertTrue(wrappedStream instanceof B2InputStreamExcerpt); assertEquals(26, excerpt.getExcerptStart()); assertEquals(100, excerpt.getExcerptLength());
assertEquals(3, excerpt(makeDigits(), 6, 3).available()); assertEquals(4, excerpt(makeDigits(), 6, 6).available());
assertEquals(6L, source.getContentLength());
assertEquals(0, decimalSubstringToInt("a123456b", 0, 0)); assertEquals(2, decimalSubstringToInt("a123456b", 2, 3)); assertEquals(123456, decimalSubstringToInt("a123456b", 1, 7));
assertArrayEquals(makeBytes(LEN), writer.getBytes()); assertTrue(!sha1WasVerifiedFromDestination(writer));
assertEquals("test", e.getMessage());
assertTrue(cache.getAccountId().equals(accountId)); assertTrue(cache.getAccountId().equals(accountId));
assertFalse(MASTER_URL.endsWith("/")); assertTrue(ifier.getMasterUrl().endsWith("/"));
assertEquals("testABC", testClassOne.name); assertEquals(1, testClassOne.number);
assertArrayEquals(bytes, helper.getBytes());
assertEquals(EOF, stream.read());
assertEquals("test", e.getMessage());
assertEquals(String.class, resolverWithTypeArguments.resolveType(declaredFieldsWithTypeArguments[1])); assertEquals(Integer.class, resolverWithTypeArguments.resolveType(declaredFieldsWithTypeArguments[2]));
assertTrue(source.toString().startsWith("B2ContentSourceWithByteProgressListener{Mock for B2ContentSource"));
assertEquals(6, stream.read(V));
assertEquals("testABC", testClassOne.name); assertEquals(1, testClassOne.number);
assertEquals(EOF, stream.skip(6));
assertTrue("version is \'" + version + "\'", isValidVersion(version));
assertThat(new PluginService().projectFilter(packageJson,asList("Toto","Tata"))).isNull();
assertThat(timeRule.now().getTime() - beforeBatch.getTime()).isEqualTo(1000);
assertThat(doc).isNull();
assertThat(deliverablePackageA.getInstalledVersion()).isEqualTo("1.0.0"); assertThat(deliverablePackageA.getInstalledVersion()).isNull();
assertThat(payload.code()).isEqualTo(401);
assertThat(new PluginService().projectFilter(packageJson,asList("Toto"))).isNull();
assertThat(new StatusMapper("metric_name", new BooleanStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{status=\\"OK\\",resource=\\"field1\\"} 1 1593531060000\\n" + "metric_name{resource=\\"field2\\"} 3 1593531060000\\n");
assertThat(deliverablePackageA.compareTo(deliverablePackageB)).isLessThan(0);
assertThat(new StatusMapper(null, null).toString()).isEmpty();
assertThat(new BatchSearchRunner(indexer, repository, new PropertiesProvider(), local()).call()).isLessThan(60000);
assertThat(annotations).hasSize(2); assertThat(nlpTag.getOffset()).isEqualTo(70); assertThat(nlpTag.getMention()).isEqualTo("email@domain.com");
assertThat(source).isNotNull(); assertThat(getBytes(source)).hasSize(70574);
assertThat(new PluginService().projectFilter(packageJson, asList("Toto", "Tata")).toString()).isEqualTo(packageJson.toString());
assertThat(new StatusMapper("metric_name", new IntStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{resource=\\"field\\"} 123 1593531060000\\n");
assertThat(payload.code()).isEqualTo(401);
assertThat(new StatusMapper("metric_name", new StringStatus(), "platform").toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{environment=\\"platform\\",resource=\\"field\\"} Nan 1593531060000\\n");
assertThat(new PluginService().getPluginUrl(pluginFolder.getRoot().toPath().resolve("target_dir").resolve("my_plugin"))). isEqualTo("/plugins/my_plugin/index.js");
assertThat(new StatusMapper("metric_name", new StringStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{resource=\\"field\\"} Nan 1593531060000\\n");
assertThat(cli.getVersion()).isEqualTo("7.0.2");
assertThat(deliverablePackageA.compareTo(deliverablePackageB)).isLessThan(0);
assertThat(deliverablePackageA.isInstalled()).isTrue();
assertThat(repository.setState("false_uuid", State.RUNNING)).isFalse();
assertThat(RepositoryFactoryImpl.guessSqlDialectFrom("jdbc:sqlite:file:memorydb.db?mode=memory&cache=shared")).isEqualTo(SQLDialect.SQLITE);
assertThat(payload).isSameAs(next); assertThat(user.getValue().login()).isEqualTo("user_id");
assertThat(nlpApp.getProgressRate()).isEqualTo(-1); assertThat(nlpApp.getProgressRate()).isEqualTo(0.5);
assertThat(annotations).hasSize(3);
assertThat(new PluginService().getPluginUrl(pluginFolder.getRoot().toPath().resolve("target_dir").resolve("my_plugin"))). isEqualTo("/plugins/my_plugin/dist/main.js");
assertThat(taskManager.getTask(dummyTask.toString()).isCancelled()).isTrue();
assertThat(new DeduplicateTask(docCollectionFactory, new PropertiesProvider(), local(), "test:queue").call()).isEqualTo(0);
assertThat(repository.getHealth()).isTrue();
assertThat(taskManager.getTask(t1.toString()).isCancelled()).isTrue(); assertThat(taskManager.getTask(t2.toString()).isCancelled()).isTrue();
assertThat(attachedPdf).isNotNull(); assertThat(attachedPdf.getContentType()).isEqualTo("application/pdf"); assertThat(source).isNotNull(); assertThat(getBytes(source)).hasSize(49779);
assertThat(new PluginService().projectFilter(packageJson,asList("Tata")).toString()).isEqualTo(packageJson.toString());
assertThat(annotations).isEmpty();
assertThat(new StatusMapper("metric_name", new BooleanStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{status=\\"KO\\",resource=\\"field\\"} 0 1593531060000\\n");
assertThat(indexer.getHealth()).isTrue();
assertThat(repository.getProject("unknown")).isNull();
assertThat(new StatusMapper("metric_name", new BooleanStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{status=\\"OK\\",resource=\\"field\\"} 1 1593531060000\\n");
assertThat(timeRule.now().getTime() - beforeBatch.getTime()).isEqualTo(1000);
assertThat(new StatusMapper("metric_name", new IntStatus()).toString()).contains("" + "# HELP datashare The datashare resources status\\n" + "# TYPE metric_name gauge\\n" + "metric_name{resource=\\"field\\"} 456 1593531060000\\n");
assertThat(new BatchSearchRunner(indexer, repository, new PropertiesProvider(), local()).call()).isEqualTo(0);
assertThat(new DelApiKeyTask(apiKeyRepository, User.local()).call()).isNotNull(); assertThat(user.getValue()).isEqualTo(User.local());
assertThat(pipelineHelper.getQueueNameFor(DatashareCli.Stage.SCAN)).isEqualTo("extract:queue"); assertThat(pipelineHelper.getQueueNameFor(DatashareCli.Stage.INDEX)).isEqualTo("extract:queue");
assertThat(pipelineHelper.getQueueNameFor(DatashareCli.Stage.SCAN)).isEqualTo("extract:queue"); assertThat(pipelineHelper.getQueueNameFor(DatashareCli.Stage.DEDUPLICATE)).isEqualTo("extract:queue"); assertThat(pipelineHelper.getQueueNameFor(DatashareCli.Stage.INDEX)).isEqualTo("extract:queue:deduplicate");
assertThat(new GetApiKeyTask(apiKeyRepository, User.local()).call()).isNotNull(); assertThat(user.getValue()).isEqualTo(User.local());
assertThat(new BatchSearchRunner(indexer, repository, new PropertiesProvider(), local()).call()).isEqualTo(2);
assertThat(annotations).hasSize(10);
assertThat(apiKeyFilter.matches("/foo", null)).isFalse(); assertThat(apiKeyFilter.matches("/api", null)).isTrue(); assertThat(apiKeyFilter.matches("/api_bar", null)).isTrue();
assertThat(ClassLoader.getSystemClassLoader(). getResource("StanfordCoreNLP-german.properties")).isNotNull();
assertThat(new ScanIndexTask(documentCollectionFactory, indexer, propertiesProvider, User.nullUser(), "test:report").call()).isEqualTo(2); assertThat(actualReportMap).includes( entry(Paths.get("file:/path/to/id1"), new Report(ExtractionStatus.SUCCESS)), entry(Paths.get("file:/path/to/id2"), new Report(ExtractionStatus.SUCCESS)) );
assertThat(new PluginService().projectFilter(packageJson,asList("Toto","Tata")).toString()).isEqualTo(packageJson.toString());
assertThat(lst).isEmpty();
assertThat(indexer.executeRaw("OPTIONS", TEST_INDEX, "").split(",")).containsOnly("PUT","HEAD","DELETE","GET"); assertThat(indexer.executeRaw("OPTIONS", TEST_INDEX, null).split(",")).containsOnly("PUT","HEAD","DELETE","GET");
assertThat(annotations).hasSize(1); assertThat(annotations.get(0).getOffset()).isEqualTo(23); assertThat(annotations.get(0).getCategory()).isEqualTo(NamedEntity.Category.EMAIL); assertThat(annotations.get(0).getMention()).isEqualTo("email@domain.com");
assertThat(payload).isSameAs(next);
assertThat(indexer.executeRaw("HEAD", TEST_INDEX, "")).isNull(); assertThat(indexer.executeRaw("HEAD", TEST_INDEX, null)).isNull();
assertThat(new ScanIndexTask(documentCollectionFactory, indexer, propertiesProvider, User.nullUser(), "test:report").call()).isEqualTo(0);
assertThat(actual.id).isEqualTo(expected.id); assertThat(actual.name).isEqualTo(expected.name); assertThat(actual.email).isEqualTo(expected.email); assertThat(actual.details).isEqualTo(expected.details); assertThat(actual.provider).isEqualTo(expected.provider);
assertThat(nlpApp.getProgressRate()).isEqualTo(-1); assertThat(nlpApp.getProgressRate()).isEqualTo(0.1);
assertThat(new DeduplicateTask(docCollectionFactory, propertyProvider, local(), "test:queue").call()).isEqualTo(1); assertThat(docCollectionFactory.createQueue(propertyProvider, "test:queue:deduplicate").size()).isEqualTo(2);
assertThat(dataBus.getHealth()).isTrue();
assertEquals("<h1>heyho</h1>", template.getState().templateSource); assertEquals("NgTemplateTest", template.getState().moduleName);
assertEquals(2, addedServices.size()); assertTrue(addedServices.contains("testService_test1")); assertTrue(addedServices.contains("testService_test2")); assertFalse(addedServices.contains("testService_test3")); assertFalse(addedServices.contains("testService_test4"));
assertEquals(Boolean.TRUE, target.getArg1()); assertEquals("hey", target.getArg2()); assertEquals(new Double(88.0), target.getArg3()); assertEquals(1, target.getArg4().length()); assertEquals("inner", ((JsonString) target.getArg4().get(0)).getString());
assertEquals("<h1>heyho</h1>", template.getState().templateSource); assertEquals("NgTemplateTest", template.getState().moduleName);
assertEquals(2, addedServices.size()); assertTrue(addedServices.contains("testService_test1")); assertTrue(addedServices.contains("testService_test2")); assertFalse(addedServices.contains("testService_test3")); assertFalse(addedServices.contains("testService_test4"));
assertNotNull(template.getState().userState); assertEquals("{\\"test\\":\\"bla\\"}", template.getState().userState.replaceAll("[ \\n\\r\\t]", ""));
assertEquals("<h1>moin</h1>", template.getState().templateSource); assertEquals("NgTemplateTest", template.getState().moduleName);
assertEquals("<h1>moin</h1>", template.getState().templateSource); assertEquals("NgTemplateTest", template.getState().moduleName);
assertNotNull(template.getState().userState); assertEquals("{\\"test\\":\\"bla\\"}", template.getState().userState.replaceAll("[ \\n\\r\\t]", ""));
assertEquals(0x78, hash.getByte());
assertEquals("MD5", hash.algorithm());
assertEquals(0x04b2008fd98c1dd4L, hash.getLong());
assertEquals(0xeeaede7c, NATIVE_CRC32C.calculate(buf));
assertEquals(0xeeaede7c, NATIVE_CRC32C.calculate(buf));
assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong());
assertEquals(0xbb3bb65e, hash.getInt());
assertEquals(0x04b2008fd98c1dd4L, hash.getLong());
assertEquals("MD5", hash.algorithm());
assertEquals(16, hash.length());
assertEquals(0xeeaede7c, NATIVE_CRC32C.calculate(buf));
assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong()); assertEquals(0x04b2008fd98c1dd4L, other.getLong()); assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong());
assertEquals(0x5678, hash.getShort());
assertEquals((short) 0xb65e, hash.getShort());
assertEquals(5, captures.get(0).length);
assertEquals((short) 0xb65e, hash.getShort());
assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong());
assertTrue(address != 0);
assertEquals(0xbb3bb65e, hash.getInt());
assertTrue(address != 0);
assertEquals(16, hash.length());
assertArrayEquals(new BigInteger("5eb63bbbe01eeed093cb22bb8f5acdc3", 16).toByteArray(), hash.getBytes());
assertArrayEquals(new BigInteger("5eb63bbbe01eeed093cb22bb8f5acdc3", 16).toByteArray(), hash.getBytes());
assertEquals(0xbfe92a83, NATIVE_CRC32C.calculate(bytes, 1, 8));
assertEquals(expected, impl.calculate(bytes));
assertArrayEquals(new byte[] { (byte) 0x90, 0x78, 0x56, 0x34, 0x12 }, output);
assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong()); assertEquals(0x04b2008fd98c1dd4L, other.getLong()); assertEquals(0xd0ee1ee0bb3bb65eL, hash.getLong());
assertEquals(0x5e, hash.getByte());
assertEquals(0x5e, hash.getByte());
assertEquals(true, itsGame2by2.getBoard().getField(1, 0).isOpen()); assertEquals(true, itsGame2by2.getBoard().getField(1, 0).isExploded()); assertEquals(false, itsGame2by2.getBoard().getField(0, 0).isOpen()); assertEquals(false, itsGame2by2.getBoard().getField(0, 1).isOpen()); assertEquals(false, itsGame2by2.getBoard().getField(1, 1).isOpen());
assertEquals(0, itsBoardState.getFieldState(0, 0));
assertEquals(8, game.getBoard().getOpenCount());
assertEquals(true, itsBoard.isOverflagged());
assertEquals(1, itsState.getBombsCount());
assertEquals(true, itsField.isFlagged());
assertEquals(false, field.isOpen()); assertEquals(false, field.isFlagged());
assertEquals(true, itsField.isBomb());
assertEquals(false, itsGame2by1.isStarted()); assertEquals(true, itsGame2by1.isStarted());
assertEquals(2, itsBoard.getOpenCount());
assertEquals(bombs, countBombs(board)); assertEquals(false, board.getField(1, 1).isBomb());
assertEquals(0, itsField.getState());
assertEquals(itsBoard.getDimension(), board.getDimension()); assertEquals(true, board.getField(1, 1).isBomb()); assertEquals(true, board.getField(0, 0).isOpen()); assertEquals(true, board.getField(1, 1).isFlagged()); assertEquals(false, board.getField(0, 1).isOpen());
assertEquals(false, left.isOpen()); assertEquals(true, left.isOpen());
assertEquals(true, startCall[0]); assertEquals(true, changeCall[0]);
assertEquals(3, itsField.getNeighborBombs());
assertEquals(bombs, countBombs(board)); assertEquals(false, board.getField(1, 1).isBomb());
assertEquals(0, itsStopWatch.getTime()); assertEquals(startTime, new StopWatch(startTime).getTime());
assertEquals(8, game.getBombCount()); assertEquals(new Point(4, 6), game.getBoard().getDimension());
assertTrue(field.isBomb()); assertTrue(field.isFlagged());
assertEquals(false, itsGame2by1.isStarted()); assertEquals(true, itsGame2by1.isStarted());
assertEquals(true, itsField.isExploded());
assertEquals(16, countBombs(board)); assertEquals(false, board.getField(1, 1).isBomb());
assertEquals(2, dimension.x); assertEquals(2, dimension.y);
assertTrue(field.isFlagged() || field.isBomb()); assertEquals(2, count);
assertEquals(false, itsState.isMined());
assertEquals(true, itsField.isOpen());
assertEquals(neighbors.length, itsField.getNeighborFlags());
assertEquals(1, itsBoard.getFlagCount());
assertEquals(true, field.isOpen());
assertEquals(0, flags);
assertEquals(false, field.isFlagged());
assertEquals(false, itsBoard.isOverflagged());
assertEquals(24, countBombs(board)); assertEquals(false, board.getField(1, 1).isBomb());
assertEquals(false, field.isFlagged());
assertEquals(i, position.x); assertEquals(j, position.y);
assertEquals(true, itsField.isTouched());
assertEquals(time + 1, itsStopWatch.getTime());
assertEquals(1, flags); assertEquals(2, mines); assertEquals(0, listener.getStart()); assertEquals(1, listener.getChange()); assertEquals(0, listener.getDisarmed()); assertEquals(0, listener.getBusted());
assertEquals(1, getChange()); assertEquals(1, listener.getChange()); assertEquals(1, listener.getDisarmed()); assertEquals(0, listener.getBusted()); assertEquals(0, listener.getStart());
assertEquals(1, getChange()); assertEquals(1, listener.getBusted()); assertEquals(1, listener.getChange()); assertEquals(0, listener.getStart()); assertEquals(0, listener.getDisarmed());
assertTrue(ps != null); assertTrue(BASE_PATH.equals(psd.getBasePath())); assertTrue(BASE_URL.equals(psd.getBaseUrl()));
assertEquals(asset.getName(), reparsed.getName()); assertTrue(reparsed.getTags().contains("Featured"));
assertTrue(cs != null); assertTrue(HOST.equals(csm.getHost())); assertTrue(PORT == csm.getPort()); assertTrue(DATABASE.equals(csm.getDatabase())); assertTrue(COLLECTION_CATEGORIES.equals(csm.getName()));
assertTrue(as != null); assertTrue(HOST.equals(asm.getHost())); assertTrue(PORT == asm.getPort()); assertTrue(DATABASE.equals(asm.getDatabase())); assertTrue(COLLECTION_ASSETS.equals(asm.getName()));
assertEquals("TJI Joists", asset.getName()); assertTrue(asset.getTags().contains("Flooring")); assertTrue(asset.getTags().contains("Featured"));
assertEquals("orange_julius", user.getUsername()); assertTrue(user.getAttributes().containsKey("email")); assertEquals("Orange Julius", user.getAttributes().get("name"));
assertEquals(user.getUsername(), reparsed.getUsername()); assertTrue(reparsed.getAttributes().containsKey("email")); assertEquals("12/29/1981", reparsed.getAttributes().get("dob"));
assertNull(skinFactory.createConnectionSkin(null)); assertTrue(skinFactory.createConnectionSkin(CONNECTION) instanceof DefaultConnectionSkin); assertTrue(skinFactory.createConnectionSkin(CONNECTION) instanceof DefaultConnectionSkin); assertTrue(skinFactory.createConnectionSkin(CONNECTION) instanceof CustomConnectionSkin);
assertNull(skinFactory.createTailSkin(null)); assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof DefaultTailSkin); assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof DefaultTailSkin); assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof CustomTailSkin);
assertEquals(GeometryUtils.getConnectorPosition(connector, skinLookup), target);
assertNull(skinFactory.createNodeSkin(null)); assertTrue(skinFactory.createNodeSkin(NODE) instanceof DefaultNodeSkin); assertTrue(skinFactory.createNodeSkin(NODE) instanceof DefaultNodeSkin); assertTrue(skinFactory.createNodeSkin(NODE) instanceof CustomNodeSkin);
assertNull(skinFactory.createConnectorSkin(null)); assertTrue(skinFactory.createConnectorSkin(CONNECTOR) instanceof DefaultConnectorSkin); assertTrue(skinFactory.createConnectorSkin(CONNECTOR) instanceof DefaultConnectorSkin); assertTrue(skinFactory.createConnectorSkin(CONNECTOR) instanceof CustomConnectorSkin);
assertNull(skinFactory.createJointSkin(null)); assertTrue(skinFactory.createJointSkin(JOINT) instanceof DefaultJointSkin); assertTrue(skinFactory.createJointSkin(JOINT) instanceof DefaultJointSkin); assertTrue(skinFactory.createJointSkin(JOINT) instanceof CustomJointSkin);
assertThat(color.getRed(), is(255)); assertThat(color.getGreen(), is(0)); assertThat(color.getBlue(), is(255)); assertThat(color.getAlpha(), is(255));
assertThat(color.getRed(), is(255)); assertThat(color.getGreen(), is(0)); assertThat(color.getBlue(), is(255)); assertThat(color.getAlpha(), is(255));
assertThat(count, CoreMatchers.is(1));
assertThat(count, CoreMatchers.is(1));
assertThat(color.getRed(), is(255)); assertThat(color.getGreen(), is(0)); assertThat(color.getBlue(), is(0)); assertThat(color.getAlpha(), is(255));
assertThat(validator.validate("{}", "signature")).isFalse();
assertThat(inventory.hasPurchase("sku1")).isFalse(); assertThat(inventory.hasPurchase("sku1")).isTrue();
assertThat(inv.getAllOwnedSkus().isEmpty());
assertThat(inventory.getAllPurchases()).hasSize(1); assertThat(inventory.getAllOwnedSkus()).hasSize(1); assertThat(inventory.getSkuDetails()).hasSize(1);
assertThat(helper.getResponseCodeFromBundle(b)).isEqualTo(OK.code);
assertThat(validator.validate("", "")).isFalse();
assertThat(p.toString()).startsWith("Purchase(type:inapp)");
assertThat(helper.getResponseCodeFromBundle(b)).isEqualTo(20);
assertThat(helper.handleActivityResult(TEST_REQUEST_CODE, 0, null)).isTrue();
assertThat(inventory.getAllPurchases()).hasSize(1); assertThat(inventory.getAllOwnedSkus()).hasSize(1); assertThat(inventory.getSkuDetails()).hasSize(1);
assertThat(inventory.getAllOwnedSkus()).containsOnly("sku1", "sku2");
assertThat(inventory.getAllOwnedSkus()).containsOnly("sku1", "sku2"); assertThat(inventory.getAllOwnedSkus()).containsOnly("sku2");
assertThat(inventory.getAllPurchases()).hasSize(1); assertThat(inventory.getAllOwnedSkus()).hasSize(1); assertThat(inventory.getSkuDetails()).isEmpty();
assertThat(helper.getResponseCodeFromBundle(b)).isEqualTo(60);
assertThat(helper.handleActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, data)).isTrue();
assertThat(inventory.getSkuDetails()).hasSize(1);
assertThat(new IabResult(0, "OK").isSuccess()).isTrue(); assertThat(new IabResult(0, "OK").isFailure()).isFalse(); assertThat(new IabResult(1, "FAIL").isSuccess()).isFalse(); assertThat(new IabResult(1, "FAIL").isFailure()).isTrue();
assertThat(helper.handleActivityResult(TEST_REQUEST_CODE, Activity.RESULT_CANCELED, data)).isTrue();
assertThat(validator.validate("{}", "")).isFalse();
assertThat(new IabResult(Response.BILLING_UNAVAILABLE, "FAIL").getLocalizedMessage( Robolectric.application.getResources())).isEqualTo("Billing Unavailable");
assertThat(inventory.getAllPurchases()).hasSize(1);
assertThat(e.getResult()).isEqualTo(new IabResult(IABHELPER_VERIFICATION_FAILED, "Error refreshing inventory (querying owned items)."));
assertThat(inv.getAllOwnedSkus().isEmpty());
assertThat(inventory.getPurchase("sku1")).isSameAs(p);
assertThat(inventory.hasDetails("sku1")).isFalse(); assertThat(inventory.getSkuDetails("sku1")).isSameAs(details);
assertThat(validator.validate(data, signature)).isTrue(); assertThat(validator.validate(data+"extraData", signature)).isFalse();
assertThat(helper.isDisposed()).isFalse();
assertThat(helper.handleActivityResult(TEST_REQUEST_CODE, 23, data)).isFalse();
assertThat(inventory.getAllPurchases()).hasSize(1); assertThat(inventory.getAllOwnedSkus()).hasSize(1); assertThat(inventory.getSkuDetails()).isEmpty();
assertThat(validator.validate(null, "")).isFalse();
assertThat(inventory.getAllPurchases()).hasSize(2); assertThat(inventory.getAllOwnedSkus()).hasSize(2); assertThat(inventory.getSkuDetails()).hasSize(2);
assertThat(sku.isTestSku()).isFalse(); assertThat(test.isTestSku()).isTrue();
assertThat(helper.handleActivityResult(TEST_REQUEST_CODE, 0, null)).isFalse();
assertThat(new Dimensions(2, 4).multiply(2)).isEqualTo(new Dimensions(4, 8));
assertThat(rezeneratorRunner.run(config.setInDir(new File("src/test/resources/runner-error"))).isSuccessful()).isFalse();
assertThat(new Dimensions(2, 4).divide(2)).isEqualTo(new Dimensions(1, 2));
assertThat(Dimensions.fromString("50X60")).isEqualTo(new Dimensions(50, 60));
assertThat(new Dimensions(2, 4).scaleToHeight(10)).isEqualTo(new Dimensions(10, 20));
assertThat(rezeneratorRunner.run(config).isSuccessful()).isTrue();
assertThat(Dimensions.fromString("50x60")).isEqualTo(new Dimensions(50, 60));
assertThat(new Dimensions(2, 4).scaleToWidth(10)).isEqualTo(new Dimensions(5, 10));
assertThat(find).hasSize(4).includes( entry("rezenerator.val.mdpi", "42"), entry("rezenerator.def.hdpi", "xxhdpi.divide(2)"), entry("rezenerator.def.xhdpi", "mdpi.multiply(2)"), entry("rezenerator.def.xxhdpi", "mdpi.multiply(3)"));
assertThat(Dimensions.fromString("50")).isEqualTo(new Dimensions(50));
assertThat(find).hasSize(4).includes( entry("rezenerator.val.mdpi", "48"), entry("rezenerator.def.hdpi", "xxhdpi.divide(2)"), entry("rezenerator.def.xhdpi", "mdpi.multiply(2)"), entry("rezenerator.def.xxhdpi", "mdpi.multiply(3)"));
assertTrue( "KnxEncoder.decode(new byte[] {(byte) 0xbc, 0x0d, 0, 0, 9, 1, 1, 0, (byte) 0x81}).knxCommand is " + KnxEncoder.decode(message).knxCommand + "; but should be AUTO(3)", KnxEncoder.decode(message).knxCommand == KnxCommand.VALUE_WRITE);
assertTrue( "KnxEncoder.decode(new byte[] {(byte) 0xbc, 0x0d, 0, 0, 9, 1, 1, 0, (byte) 0x80, (byte) 0x12, (byte) 0x13 }).getPriority() is " + KnxEncoder.decode(message).getPriority() + "; but should be AUTO(3)", KnxEncoder.decode(message).getPriority() == KnxPacketPriority.AUTO);
assertThat(idCard.isFemale()).isTrue();
assertThat(idCard.isMale()).isTrue();
assertThat(nominator).isEqualTo(expectedNominator);
assertThat(notification.from()).isEqualTo("admin@eas.com"); assertThat(notification.to()).isEqualTo(nominee.email()); assertThat(notification.subject()).isEqualTo("Ticket Nomination Notification");
assertThat(candidate.employeeId()).isEqualTo(candidateId); assertThat(candidate.name()).isEqualTo(candidateName); assertThat(candidate.email()).isEqualTo(candidateEmail); assertThat(candidate.trainingId()).isEqualTo(TrainingId.from(trainingId));
assertThat(idCard.number()).isEqualTo(validIdCardNumberOfMale);
assertThat(employee.id()).isEqualTo(expected); assertThat(employee.id().sequenceNo()).isEqualTo("0102");
assertThat(actualHistory).isEqualTo(expectedHistory);
assertThat(employee.isMale()).isTrue();
assertThat(phone.number()).isEqualTo(phoneNumber);
assertEquals(defaultValue, restored);
assertEquals(defaultValue, restored);
assertEquals(defaultValue, restored);
assertEquals(defaultValue, restored);
assertTrue(storeDirectory.exists()); assertTrue(storeDirectory.canRead()); assertTrue(storeDirectory.canWrite()); assertEquals(expectedPath, actualPath);
assertEquals(defaultValue, restored);
assertEquals(true, restored);
assertEquals(defaultValue, restored, .0);
assertTrue(backupDirectory.exists()); assertTrue(backupDirectory.canRead()); assertTrue(backupDirectory.canWrite()); assertEquals(expectedPath, actualPath);
assertEquals(clazz, getType);
assertEquals(defaultValue, restored, .0f);
assertArrayEquals(defaultValue, restored);
assertTrue(all.isEmpty());
assertTrue(lockDirectory.exists()); assertTrue(lockDirectory.canRead()); assertTrue(lockDirectory.canWrite()); assertEquals(expectedPath, actualPath);
assertEquals(str.getClass(), String.class); assertEquals(bool.getClass(), Boolean.class); assertEquals(str, stringValue); assertEquals(true, bool);
assertEquals(defaultValue, restored);
assertTrue(keys.isEmpty());
assertEquals(defaultValue, restored);
assertEquals(defaultValue, restored);
assertTrue(keys.isEmpty());
assertThat(status).isEqualTo(Dealer.DeckStatus.UPWARDS);
assertThat(length).isEqualTo(3);
assertThat(i.next()).isSameAs(paths.remove(0));
assertThat(builder.isEmpty()).isTrue(); assertThat(builder.isEmpty()).isFalse(); assertThat(builder.isEmpty()).isTrue();
assertNotNull(client.resource("/obs").sync().observe(obsListener));
assertThat(modelTLV.length, equalTo(65541) ); assertArrayEquals( new byte[] { (byte) 0b11_0_11_000, (byte) 1, (byte) 0x01, (byte) 0x00, (byte) 0x00, }, Arrays.copyOf(modelTLV, 5));
assertFalse(intRes.isValid("hey")); assertTrue(intRes.isValid(1)); assertTrue(intRes.isValid("3")); assertFalse(intRes.isValid(0)); assertFalse(intRes.isValid(4));
assertFalse(new SignalingOptions().equals(null));
assertArrayEquals(new byte[]{1}, HexArray.fromHex("01")); assertArrayEquals(new byte[]{((byte) 0xFF)}, HexArray.fromHex("ff")); assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, HexArray.fromHex("0102030405060708090a0b0c"));
assertTrue(intRes.isValid(1)); assertTrue(intRes.isValid(Integer.MAX_VALUE)); assertTrue(intRes.isValid(Integer.MIN_VALUE)); assertFalse(intRes.isValid(new byte[5])); assertFalse(intRes.isValid(new byte[0]));
assertThat(resources, hasSize(1)); assertThat(resources.get(0).getType(), nullValue()); assertThat(resources.get(0).getNestedInstances(), hasSize(3)); assertThat(resources.get(0).getNestedInstances().get(0).getType(), equalTo(LWM2MResourceType.FLOAT));
assertEquals(new TransportBinding(true, false, false).toString(), "U"); assertEquals(new TransportBinding(true, true, true).toString(), "UQS"); assertEquals(new TransportBinding(false, true, true).toString(), "SQ"); assertEquals(new TransportBinding(true, true, false).toString(), "US");
assertTrue(transMgr.addTransactionAndGetReadyToSend(new CoapTransaction(mock(RequestCallback.class), request, mock(CoapUdpMessaging.class), TransportContext.NULL, mock(Consumer.class))));
assertEquals(coap().payload(new byte[100]).block1Req(0, S_1024_BERT, true).size1(4196).payload(new byte[2048]).put().build(), bwc.request);
assertEquals (2, instance.getResources().size()); assertEquals("42", instance.getResource(LWM2MID.$1).getStringValue() );
assertEquals(hexArray, new HexArray(new byte[]{1, 2, 3, 4})); assertNotEquals(hexArray, new HexArray(new byte[]{1})); assertNotEquals(hexArray, ""); assertNotEquals(hexArray, null); assertEquals(hexArray.hashCode(), new HexArray(new byte[]{1, 2, 3, 4}).hashCode());
assertEquals("11", cli.resource("/test").get().get().getPayloadString()); assertEquals("22", cli.resource("/test2").get().get().getPayloadString()); assertEquals(61, cli.resource("/test2").get().get().headers().getMaxAgeValue()); assertEquals("33", cli.resource("/test3").get().get().getPayloadString()); assertEquals(MediaTypes.CT_TEXT_PLAIN, cli.resource("/test3").get().get().headers().getContentFormat().shortValue());
assertFalse(resp.isDone()); assertTrue(resp.isDone()); assertEquals(Code.C400_BAD_REQUEST, resp.get().getCode());
assertEquals(q, parseUriQueryMult("par1=12")); assertEquals(q2, parseUriQueryMult("par1=11&par1=22")); assertNull(parseUriQueryMult(null)); assertNull(parseUriQueryMult(""));
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"1\\",\\"sv\\":\\"Simple String\\"}]}"));
assertEquals(-1, instance.getId().intValue());
assertTrue(reg.isRegistered());
assertEquals(0, i.get());
assertTrue(stringRes.isValid("U")); assertTrue(stringRes.isValid("UQ")); assertTrue(stringRes.isValid("S")); assertTrue(stringRes.isValid("SQ")); assertFalse(stringRes.isValid("Q"));
assertEquals("1", resp.get().getPayloadString());
assertEquals(2, object.getInstances().size()); assertEquals(LWM2MID.$1, object.getInstanceFor(LWM2MID.$1).getId()); assertEquals(LWM2MID.$2, object.getInstanceFor(LWM2MID.$2).getId()); assertNull(object.getInstanceFor(LWM2MID.$0));
assertThat(modelTLV.length, equalTo(260) ); assertArrayEquals( new byte[] { (byte) 0b11_0_10_000, (byte) 1, (byte) 0x01, (byte) 0x00, }, Arrays.copyOf(modelTLV, 4));
assertThat(manufacturerTLV.length, equalTo(6) );
assertNotNull(resp.get());
assertEquals(STRING, type);
assertNull(registry.getOmaResourceType("/0/0/unknown"));
assertEquals(bo, bo2); assertEquals(bo, bo2); assertEquals(bo, bo2);
assertEquals("1", resp.get().getPayloadString());
assertNotNull(resp.get());
assertEquals(coap().block1Req(0, S_512, true).size1(1500).payload(new byte[512]).put().build(), bwc.request);
assertEquals("EXT-ABC", resp.get().getPayloadString());
assertNotNull(client.resource("/obs").sync().observe(obsListener)); assertNotNull(client.resource("/obs").sync().observe(obsListener));
assertTrue(bolRes.isValid(0)); assertTrue(bolRes.isValid(1)); assertTrue(bolRes.isValid("0")); assertTrue(bolRes.isValid("1")); assertFalse(bolRes.isValid(2));
assertNotNull(resp.get());
assertEquals("1", resp.get().getPayloadString());
assertTrue(reg.isRegistered());
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"1\\",\\"v\\":5.0}]}"));
assertThat(decoded, hasSize(1));
assertTrue(resp.isCompletedExceptionally());
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"1\\",\\"sv\\":\\"Simple Resource\\"}]}"));
assertEquals(1, bwt.updateWithFirstBlock(coap)); assertEquals(2000, coap.headers().getSize2Res().intValue()); assertEquals(new BlockOption(0, BlockSize.S_512, true), coap.headers().getBlock2Res()); assertNull(coap.headers().getSize1()); assertNull(coap.headers().getBlock1Req()); assertEquals(512, coap.getPayload().length);
assertEquals(8, powerTLV.length); assertArrayEquals( new byte[] { (byte) 0b10_0_00_110, (byte) 6, (byte) 0b01_0_00_001, (byte) 0, (byte) 0x01, (byte) 0b01_0_00_001, (byte) 1, (byte) 0x05, }, powerTLV);
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"0\\",\\"bv\\":true}]}") ); assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"0\\",\\"bv\\":false}]}") );
assertEquals(coap().get().build(), bwc.request);
assertFalse(resp.isDone());
assertFalse(exeRes.isValid(new byte[1])); assertFalse(exeRes.isValid(1)); assertFalse(exeRes.isValid("1"));
assertTrue(timeRes.isValid(0)); assertTrue(timeRes.isValid(10000)); assertFalse(timeRes.isValid(-1));
assertFalse(intRes.isValid("hi")); assertTrue(intRes.isValid(0)); assertTrue(intRes.isValid(-1)); assertTrue(intRes.isValid(Integer.MIN_VALUE)); assertFalse(intRes.isValid("1"));
assertEquals(Code.C703_PONG, resp.get().getCode());
assertEquals("1", resp.get().getPayloadString());
assertEquals (2, instance.getResources().size()); assertEquals("42", instance.getResource(LWM2MID.$1).getStringValue() );
assertThat(objects, hasSize(2)); assertThat(objects.get(0).getId().intValue(), equalTo(0)); assertThat(objects.get(0).getResources(), hasSize(3)); assertThat(objects.get(1).getId().intValue(), equalTo(1)); assertThat(objects.get(1).getResources(), hasSize(3));
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"0/0\\",\\"sv\\":\\"Instance One\\"},{\\"n\\":\\"0/1\\",\\"v\\":2}]}"));
assertFalse(f.isDone()); assertTrue(f.isDone()); assertEquals("test", ex.getCause().getMessage()); assertEquals("test", ex.getCause().getMessage());
assertEquals(1, bwt.updateWithFirstBlock(coap)); assertEquals(2000, coap.headers().getSize1().intValue()); assertEquals(new BlockOption(0, BlockSize.S_512, true), coap.headers().getBlock1Req()); assertNull(coap.headers().getSize2Res()); assertNull(coap.headers().getBlock2Res()); assertEquals(512, coap.getPayload().length);
assertNotNull(client.resource("/test").sync().invokeMethod(Method.GET)); assertNotNull(client.resource("/test").sync().invokeMethod(Method.PUT)); assertNotNull(client.resource("/test").sync().invokeMethod(Method.POST)); assertNotNull(client.resource("/test").sync().invokeMethod(Method.DELETE));
assertFalse(intRes.isValid("hi")); assertTrue(intRes.isValid(1)); assertTrue(intRes.isValid("7")); assertFalse(intRes.isValid(0)); assertFalse(intRes.isValid(8));
assertEquals("ABC", resp.get().getPayloadString());
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"0\\",\\"sv\\":\\"AQIDBA==\\"}]}"));
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"1\\",\\"v\\":1024}]}"));
assertThat(resources, hasSize(13)); assertThat(resources.get(0).getType(), equalTo(LWM2MResourceType.STRING)); assertArrayEquals("Open Mobile Alliance".getBytes(), resources.get(0).getValue()); assertThat(resources.get(3).getType(), equalTo(LWM2MResourceType.STRING)); assertThat(resources.get(4).getNestedInstances().get(0).getType(), equalTo(LWM2MResourceType.INTEGER));
assertThat(resources, hasSize(1)); assertThat(resources.get(0).getId().intValue(), equalTo(0)); assertThat(resources.get(0).getStringValue(), equalTo(""));
assertEquals(newCoapPacket(321).con(Code.C205_CONTENT).token(0x3131).build().createResponse(), newCoapPacket(321).ack(null).build()); assertEquals(newCoapPacket(321).get().token(0x3131).build().createResponse(), newCoapPacket(321).ack(Code.C205_CONTENT).token(0x3131).build());
assertEquals(40, acoTLV.length);
assertEquals("ABC", resp1.get().getPayloadString());
assertEquals(q, parseUriQuery("par1=12")); assertEquals(q, parseUriQuery("?par1=12")); assertEquals(q, parseUriQuery("par1=12&par2=14")); assertEquals(q, parseUriQuery("?par1=12&par2=14")); assertEquals(q, parseUriQuery("par1=12&par2=14&d=b")); assertNull(parseUriQuery(null)); assertNull(parseUriQuery(""));
assertNotNull(client.resource("/obs").sync().observe(obsListener)); assertNotNull(client.resource("/obs").sync().observe(obsListener));
assertEquals("42", instance.getResource(LWM2MID.$1).getStringValue() ); assertEquals("56", instance.getResource(LWM2MID.from("dev")).getStringValue() ); assertNull(instance.getResource(LWM2MID.$0));
assertFalse(csm.useBlockTransfer(null)); assertFalse(csm.useBlockTransfer(new byte[10])); assertFalse(csm.useBlockTransfer(null)); assertFalse(csm.useBlockTransfer(new byte[10])); assertTrue(csm.useBlockTransfer(new byte[513])); assertFalse(csm.useBlockTransfer(null)); assertFalse(csm.useBlockTransfer(new byte[10])); assertTrue(csm.useBlockTransfer(new byte[3000]));
assertEquals(new CoapTcpCSM(1152, false), BASE.withNewOptions(null, null)); assertEquals(new CoapTcpCSM(1000, false), BASE.withNewOptions(1000L, null)); assertEquals(new CoapTcpCSM(1000, true), BASE.withNewOptions(1000L, true));
assertThat(modelTLV.length, equalTo(16) );
assertEquals (21, tlv.length);
assertArrayEquals(new byte[]{0, 1, 2, 3, 4, 5, 6, 7}, pkt.getToken());
assertEquals(EXECUTABLE, type);
assertFalse(stringRes.isValid(1)); assertTrue(stringRes.isValid("hello")); assertFalse(stringRes.isValid("")); assertFalse(stringRes.isValid("hellobello"));
assertEquals(0, object.getId().intValue() ); assertEquals(2, object.getInstances().size()); assertEquals(LWM2MID.$1, object.getInstanceFor(LWM2MID.$1).getId()); assertEquals(LWM2MID.$2, object.getInstanceFor(LWM2MID.$2).getId());
assertTrue(reg.isRegistered());
assertFalse(f.isDone()); assertFalse(f.isCancelled()); assertEquals("test", f.get()); assertEquals("test", f.get(1, TimeUnit.SECONDS)); assertTrue(f.isDone()); assertFalse(f.cancel(true)); assertFalse(f.isCancelled());
assertEquals(2, bwt.updateWithFirstBlock(coap)); assertEquals(5000, coap.headers().getSize1().intValue()); assertEquals(new BlockOption(0, BlockSize.S_1024_BERT, true), coap.headers().getBlock1Req()); assertNull(coap.headers().getSize2Res()); assertNull(coap.headers().getBlock2Res()); assertEquals(2048, coap.getPayload().length);
assertThat(manufacturerTLV.length, equalTo(5) );
assertFalse(intRes.isValid("hi")); assertTrue(intRes.isValid(1)); assertTrue(intRes.isValid("7")); assertFalse(intRes.isValid(0)); assertTrue(intRes.isValid(new byte[]{0x01, (byte) 0xFF})); assertTrue(intRes.isValid("1024")); assertTrue(intRes.isValid(new byte[]{(byte) 0xFF, (byte) 0xFF})); assertFalse(intRes.isValid(65536));
assertNotNull(client.resource("/obs").sync().observe(obsListener));
assertTrue(stringRes.isValid("")); assertTrue(stringRes.isValid("hello"));
assertTrue(reg.isRegistered());
assertTrue(intRes.isValid(1)); assertFalse(intRes.isValid(2)); assertTrue(intRes.isValid(3));
assertTrue(resp.isCompletedExceptionally());
assertEquals (Objects.hashCode(-1), new LWM2MID(null).hashCode()); assertEquals (Objects.hashCode(42), new LWM2MID("42").hashCode()); assertEquals (Objects.hashCode(new LWM2MID("alma").intValue()), new LWM2MID("alma").hashCode());
assertTrue(resp.isCompletedExceptionally());
assertFalse(stringRes.isValid("hey")); assertTrue(stringRes.isValid("hello")); assertFalse(stringRes.isValid("helloka"));
assertEquals(coap().payload(new byte[100]).put().build(), bwc.request);
assertNotNull(links); assertEquals(3, links.size()); assertNotNull(links); assertEquals(3, links.size()); assertNotNull(links); assertEquals(2, links.size()); assertNotNull(links); assertEquals(1, links.size()); assertEquals("/test/2", links.get(0).getUri()); assertNotNull(links); assertEquals(1, links.size()); assertNotNull(links); assertEquals(1, links.size()); assertNotNull(links); assertEquals(4, links.size());
assertEquals("[2001::1:0:1234]:4321", addr.toString()); assertEquals("[2001::1:0:1234]:4321", new IpPortAddress(new InetSocketAddress("[2001:0000:0000:0000:0000:0001:0000:1234]", 4321)).toString()); assertEquals("127.0.0.1:61616", addr.toString());
assertEquals(0, object.getId().intValue() ); assertEquals(2, object.getInstances().size()); assertEquals(LWM2MID.$1, object.getInstanceFor(LWM2MID.$1).getId()); assertEquals(LWM2MID.$2, object.getInstanceFor(LWM2MID.$2).getId());
assertThat (json, equalTo("{\\"e\\":[{\\"n\\":\\"0/today\\",\\"sv\\":\\"Instance One\\"},{\\"n\\":\\"0/yesterday\\",\\"v\\":2}]}"));
assertTrue(transMgr.addTransactionAndGetReadyToSend(activeTrans)); assertFalse(transMgr.addTransactionAndGetReadyToSend(inactiveTrans));
assertEquals(new Integer(0xFFFFFF), packet.headers().getObserve());
assertArrayEquals(new byte[]{1, 2, 3}, in.readBytes(3));
assertThat("Expect that the price object has the given byte representation.", CryptoUtils.HEX.encode(price.toByteArray()), equalTo(EXPECTED_BYTE_REPRESENTATION));
assertThat(BrainkeyDictionaryManager.getInstance().getBrainKeyDictionary().length, equalTo(NUMBER_OF_WORDS));
assertThat(extractedUsernames, contains(equalTo("dez1337"), equalTo("steemj")));
assertThat(SteemJUtils.setIfNotNull(objectToSet, exampleMessage), equalTo(objectToSet)); assertThat(e.getMessage(), equalTo(exampleMessage)); assertThat(SteemJUtils.setIfNotNull(objectToSet, defaultValue), equalTo(objectToSet)); assertThat(SteemJUtils.setIfNotNull(nullObject, defaultValue), equalTo(defaultValue)); assertThat(e.getMessage(), equalTo("Both, the objectToSet and the default value are null."));
assertThat(price.equals(anotherPrice), equalTo(true)); assertThat(anotherPrice.equals(differentPrice), equalTo(false));
assertThat("Expect that the accountName object has the given byte representation.", CryptoUtils.HEX.encode(customPermlink.toByteArray()), equalTo(EXPECTED_BYTE_REPRESENTATION));
assertThat("Expect that the asset object has the given byte representation.", CryptoUtils.HEX.encode(chainProperties.toByteArray()), equalTo(EXPECTED_BYTE_REPRESENTATION));
assertThat(version.toString(), equalTo("0.19.2"));
assertTrue(exchangeRate.multiply(amountToSell).getAmount().equals(4L)); assertTrue(exchangeRate.multiply(amountToSell).getSymbol().equals(LegacyAssetSymbolType.STEEM));
assertThat(asset.equals(sameAsset), equalTo(true)); assertThat(sameAsset.equals(differentAsset), equalTo(false));
assertThat(CondenserUtils.generateSteemitMetadata(DUMMY_TEXT_LINKS + DUMMY_TEXT_USER, new String[] { "test", "dontvote" }, "steemj/0.4.1", "markdown", null), equalTo(EXPECTED_JSON));
assertEquals("test-title-1", CondenserUtils.createPermlinkString(" TEST TITLE 1 ")); assertEquals("test-title-2", CondenserUtils.createPermlinkString("TEST TITLE 2!")); assertEquals("test-title-3", CondenserUtils.createPermlinkString("TEST TITLE 3"));
assertThat(version.toString(), equalTo("0.19.1"));
assertEquals("hello", c.getString("host").get()); assertEquals(90, c.getInteger("port").get().intValue()); assertEquals(true, c.getBoolean("auto").get().booleanValue()); assertEquals("demo", c.getString("alias").get());
assertEquals("123", p.get()); assertEquals("123", pa.get()); assertEquals("123", pab.get()); assertEquals("321", p.get()); assertEquals("321", pa.get()); assertEquals("321", pab.get()); assertEquals(321, c.getInteger("a.b.c").get().intValue()); assertEquals(asList("a"), keys); assertEquals(asList("b"), Lists.newArrayList(c.atPath("a").getKeys())); assertFalse(none.isPresent());
assertEquals(2, e.getPort()); assertEquals("localhost", host); assertEquals(true, e.isAuto()); assertNull(e.getUser()); assertTrue(!e.alias().isPresent()); assertEquals("demo", e.alias().get());
assertEquals("abc", res); assertEquals("abc", res); assertEquals("abc", res);
assertEquals("/storage/sdcard0/images", res); assertEquals("/storage/sdcard0/images", res);
assertTrue(isOne(net.apply(0))); assertTrue(isZero(net.apply(1)));
assertTrue(w1.isIdentical(net2.getWeightMatrix(0), 0.00001)); assertTrue(w2.isIdentical(net2.getWeightMatrix(1), 0.00001));
assertTrue(isZero(net.apply(0, 0))); assertTrue(isOne(net.apply(0, 1))); assertTrue(isOne(net.apply(1, 0))); assertTrue(isOne(net.apply(1, 1)));
assertTrue(isOne(net.apply(0, 0))); assertTrue(isOne(net.apply(0, 1))); assertTrue(isOne(net.apply(1, 0))); assertTrue(isZero(net.apply(1, 1)));
assertTrue(isZero(net.apply(0, 0))); assertTrue(isZero(net.apply(0, 1))); assertTrue(isZero(net.apply(1, 0))); assertTrue(isOne(net.apply(1, 1)));
assertEquals(2, output.numRows()); assertEquals(1, output.numCols()); assertEquals(1.0, output.get(0), 0.00001); assertEquals(0.0, output.get(1), 0.00001);
assertTrue(-epsilon <= weight && weight <= epsilon); assertTrue(-epsilon <= weight && weight <= epsilon);
assertTrue(isOne(net.apply(0, 0))); assertTrue(isOne(net.apply(0, 1))); assertTrue(isOne(net.apply(1, 0))); assertTrue(isZero(net.apply(1, 1)));
assertTrue(read.implies(read)); assertTrue(write.implies(write)); assertTrue(read.implies(readCase)); assertTrue(readCase.implies(read)); assertFalse(read.implies(write)); assertFalse(readCase.implies(write)); assertFalse(write.implies(read)); assertFalse(write.implies(readCase));
assertFalse(topic1.implies(null)); assertFalse(topic1.implies(p)); assertFalse(topic1.equals(null)); assertFalse(topic1.equals(p));
assertTrue(ind1All.implies(ind1All)); assertTrue(ind1All.implies(ind1Write)); assertTrue(ind1All.implies(ind1Read)); assertFalse(ind1Write.implies(ind1All)); assertFalse(ind1Read.implies(ind1All)); assertTrue(ind1All.implies(ind1)); assertTrue(ind1.implies(ind1All));
assertTrue(hmsPaths.findAuthzObject(new String[]{"user", "hive", "warehouse"}).contains("default"));
assertTrue(coll1All.implies(coll1All)); assertTrue(coll1All.implies(coll1Update)); assertTrue(coll1All.implies(coll1Query)); assertFalse(coll1Update.implies(coll1All)); assertFalse(coll1Query.implies(coll1All)); assertTrue(coll1All.implies(coll1)); assertTrue(coll1.implies(coll1All));
assertEquals(Sets.newHashSet(allPrivilege), sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName))); assertEquals(Sets.newHashSet(allPrivilege), sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)));
assertEquals(files.length, 10);
assertEquals(createRoleCmdExcepted, createRoleCmdResult); assertEquals(dropRoleCmdResult, dropRoleCmdExcepted);
assertNull(IndexerModelAuthorizables.from("k=v"));
assertEquals("server1", server1.getName());
assertEquals("Exception message is not as expected.", "Kafka\'s cluster resource can only have name " + Cluster.NAME, cex.getMessage());
assertFalse(job1.implies(null)); assertFalse(job1.implies(p)); assertFalse(job1.equals(null)); assertFalse(job1.equals(p));
assertEquals("server1", server.getName());
assertEquals("host1", host1.getName());
assertFalse(ROLE_SERVER_ALL_DB_ALL.implies(REQUEST_SERVER1_OTHER)); assertFalse(REQUEST_SERVER1_OTHER.implies(ROLE_SERVER_ALL_DB_ALL));
assertTrue(PathUtils.impliesURI(new URI("/tmp"), new URI("/tmp/a"))); assertFalse(PathUtils.impliesURI(new URI("file:/tmp"), new URI("/tmp/a"))); assertFalse(PathUtils.impliesURI(new URI("/tmp"), new URI("file:/tmp/a"))); assertFalse(PathUtils.impliesURI(new URI("/tmp"), new URI("/tmpdata")));
assertTrue(collection1.implies(query)); assertTrue(collection1.implies(update)); assertTrue(collection1.implies(all)); assertFalse(query.implies(collection1)); assertFalse(update.implies(collection1)); assertTrue(all.implies(collection1));
assertTrue(query.implies(query)); assertTrue(update.implies(update)); assertTrue(query.implies(queryCase)); assertTrue(queryCase.implies(query)); assertFalse(query.implies(update)); assertFalse(queryCase.implies(update)); assertFalse(update.implies(query)); assertFalse(update.implies(queryCase));
assertEquals("v1", view.getName());
assertEquals("file: parseLocalURI("/tmp/hive-user")); assertEquals("file: parseLocalURI("file:/tmp/hive-user"));
assertNull(KafkaModelAuthorizables.from("k=v"));
assertNull(SqoopModelAuthorizables.from("k=v"));
assertEquals("t1", table.getName());
assertEquals("Host1", host1.getName()); assertEquals("kafka-cluster", cluster1.getName()); assertEquals("topiC1", topic1.getName()); assertEquals("CG1", consumergroup1.getName());
assertEquals("collection1", coll.getName());
assertEquals("db1", db.getName());
assertEquals(files.length, 2); assertTrue(files[0].getName().contains("auditLog.log.")); assertTrue(files[1].getName().contains("auditLog.log."));
assertNull(SearchModelAuthorizables.from("k=v"));
assertNull(DBModelAuthorizables.from("k=v"));
assertTrue(indexer1.implies(read)); assertTrue(indexer1.implies(write)); assertTrue(indexer1.implies(all)); assertFalse(read.implies(indexer1)); assertFalse(write.implies(indexer1)); assertTrue(all.implies(indexer1));
assertEquals("indexer1", indexer.getName());
assertTrue(indexer1.implies(indexer1)); assertTrue(indexer2.implies(indexer2)); assertTrue(indexer1.implies(indexer1Case)); assertTrue(indexer1Case.implies(indexer1)); assertFalse(indexer1.implies(indexer2)); assertFalse(indexer1Case.implies(indexer2)); assertFalse(indexer2.implies(indexer1)); assertFalse(indexer2.implies(indexer1Case));
assertTrue(collection1.implies(collection1)); assertTrue(collection2.implies(collection2)); assertTrue(collection1.implies(collection1Case)); assertTrue(collection1Case.implies(collection1)); assertFalse(collection1.implies(collection2)); assertFalse(collection1Case.implies(collection2)); assertFalse(collection2.implies(collection1)); assertFalse(collection2.implies(collection1Case));
assertEquals(Sets.newHashSet(queryPrivilege,updatePrivilege), sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName))); assertEquals(Sets.newHashSet(updatePrivilege), sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)));
assertEquals("Incorrect number of roles", 0, roles.size());
assertThat(returnedOrder).isEqualTo(order); assertThat(returnedOrder).isEqualTo(order);
assertThat(details.customer).isEqualTo(customer); assertThat(details.payment).isEqualTo(payment); assertThat(details.order).isEqualTo(order);
assertEquals(new DeweyVersion("1.0.1").toString(), "1.0.1");
assertEquals("1", new DeweyVersion(1).toString());
assertThat(response.getStatus()).isEqualTo(HttpURLConnection.HTTP_CREATED); assertThat(returnedBean).isEqualTo(bean); assertThat(returnedBean).isEqualTo(bean);
assertThat(e.getMessage()).isEqualTo("HTTP 504 Gateway Timeout");
assertThat(MicroserviceTestUtils .read(Topics.ORDER_VALIDATIONS, expected.size(), CLUSTER.bootstrapServers())) .isEqualTo(expected); assertThat(inventoryChangelog).isEqualTo(asList( new KeyValue<>(UNDERPANTS.toString(), 3L), new KeyValue<>(JUMPERS.toString(), 1L) ));
assertFalse(new DeweyVersion("1.0").isCompatible(new DeweyVersion("2.0"))); assertTrue(new DeweyVersion("1.0.0").isCompatible(new DeweyVersion("1.0"))); assertTrue(new DeweyVersion("1.1").isCompatible(new DeweyVersion("1.0"))); assertFalse(new DeweyVersion("1.0").isCompatible(new DeweyVersion("1.1")));
assertThat(finalOrders.size()).isEqualTo(4); assertThat(finalOrders.stream().map(kv -> kv.value).collect(Collectors.toList())).contains( new Order(id(0L), 0L, VALIDATED, UNDERPANTS, 3, 5.00d), new Order(id(1L), 0L, FAILED, JUMPERS, 1, 75.00d) );
assertThat(MicroserviceTestUtils.read(Topics.ORDER_VALIDATIONS, 2, CLUSTER.bootstrapServers())) .isEqualTo(expected);
assertThat(returnedBean.getState()).isEqualTo(OrderState.VALIDATED);
assertThat(read).isEqualTo(expected);
assertEquals(ExceptionEnum.valueForException(new ConnTimeout(new MonitorRunLogPrefix())), monitor.getLastQueryTimeNanos(true));
assertFalse(states1.get(i).equals(states2.get(i)));
assertEquals("db load not measured yet", s.getDesc(false)); assertEquals("db load not measured yet", s.getDesc(true));
assertEquals(true, result);
assertEquals(expResult, result);
assertTrue("Unexpected node", list.contains(n.getName()));
assertNotNull(labels); assertEquals(1, labels.size()); assertNotNull(l); assertEquals(1, l.size()); assertEquals(label, "foo"); assertEquals("foo", data2.getReadableString());
assertEquals(expResult, result);
assertEquals(expResult.length, 3); assertEquals(expResult[0], result[0]); assertEquals(expResult[1], result[1]); assertEquals(expResult[2], result[2]);
assertEquals(expResult, result);
assertNotNull(doc); assertTrue("Unexpected content within \'Document\' element", doc .getContent().contains("A car designed by Homer J. Simpson"));
assertEquals(2, result.length); assertEquals(expResult[0], result[0]); assertEquals(expResult[1], result[1]);
assertTrue("Unexpected bus", busList.contains(b.getName())); assertTrue("Unexpected message", msgList.contains(m.getName()));
assertEquals("Unexpected document author", author, doc.getAuthor()); assertEquals("Unexpected document company", company, doc.getCompany()); assertEquals("Unexpected document content", content, doc.getContent()); assertEquals("Unexpected document date", date, doc.getDate()); assertEquals("Unexpected document name", name, doc.getName()); assertEquals("Unexpected document version", version, doc.getVersion());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(creation <= after); assertTrue(creation >= before);
assertThat(name, is("keyName"));
assertEquals(hw2b, hw1b);
assertArrayEquals(TestMessages.PING_EXTRA_DATA_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.CONTINUATION_NO_HEADER_FRAGMENT_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(10, frame.getLength()); assertEquals(9, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(10, frame.getHeaderBlockFragment().length); assertArrayEquals(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A}, frame.getHeaderBlockFragment());
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(4, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(1, frame.getSettings().size()); assertEquals(1, setting.getID()); assertEquals(0xFFFFFFFFL, setting.getValue());
assertNotNull(frame); assertEquals(5, frame.getLength()); assertEquals(5, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(256, frame.getPromisedStreamID()); assertEquals(1, frame.getHeaderBlockFragment().length); assertEquals(0x0082, frame.getHeaderBlockFragment()[0] & 0x00FF);
assertArrayEquals(TestMessages.PING_NO_ENOUGH_DATA_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.PUSH_PROMISE_NO_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals(5, is.available());
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0x00FFFFFFFFL, frame.getErrorCode());
assertNotNull(frame); assertEquals(1, frame.getLength()); assertEquals(1, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(1, frame.getHeaderBlockFragment().length); assertEquals(0x0082, frame.getHeaderBlockFragment()[0] & 0x00FF);
assertFalse(decoder.consume(buffer));
assertArrayEquals(TestMessages.SETTINGS_DEFAULT_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(4, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getErrorCode());
assertArrayEquals(TestMessages.GOAWAY_NO_DATA_HIGHEST_ERROR_CODE_BUFFER, toByteArray(encoder.encode(frame, null)));
assertFalse(decoder.consume(buffer));
assertArrayEquals(TestMessages.DATA_NO_PAYLOAD_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals(seg[i], block[i]);
assertArrayEquals(TestMessages.SETTINGS_HIGHEST_ID_BUFFER, toByteArray(encoder.encode(frame, null)));
assertThat(key1.equals(key2), is(false)); assertThat(key2.equals(key1), is(false));
assertArrayEquals(TestMessages.PRIORITY_EXCLUSIVE_MODE_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}, frame.getData());
assertNotNull(frame); assertEquals(5, frame.getLength()); assertEquals(2, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getStreamDependencyID()); assertFalse(frame.getExclusiveMode()); assertEquals(2, frame.getWeight());
assertEquals(1, buffer.remaining()); assertEquals(-1, buffer.get());
assertNotNull(frame); assertEquals(4, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0x00FFFFFFFFL, frame.getErrorCode());
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getErrorCode());
assertNotNull(frame); assertEquals(5, frame.getLength()); assertEquals(2, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getStreamDependencyID()); assertTrue(frame.getExclusiveMode()); assertEquals(2, frame.getWeight());
assertArrayEquals(TestMessages.UNKNOWN_PAYLOAD_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(1, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00}, frame.getData());
assertNotNull(frame); assertEquals(9, frame.getLength()); assertEquals(7, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(256, frame.getLastStreamID()); assertEquals(0x00010203, frame.getErrorCode()); assertArrayEquals(new byte[] {0x01}, frame.getData());
assertEquals(6, slice.remaining()); assertEquals(0, slice.position()); assertEquals(6, slice.limit()); assertEquals(seg[i], slice.get(i));
assertNotNull(frame); assertEquals(0, frame.getLength()); assertEquals(0, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(0, frame.getData().length); assertEquals(0, frame.getPadding().length);
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}, frame.getData());
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0x00FFFFFFFFL, frame.getErrorCode());
assertEquals(0, buffer.remaining());
assertThat(result, is(123));
assertArrayEquals(TestMessages.HEADERS_NO_PADDING_NO_PRIORITY_BUFFER, toByteArray(encoder.encode(frame, null)));
assertFalse(future.isCancelled()); assertFalse(future.isDone()); assertTrue(future.cancel(false)); assertTrue(future.isCancelled()); assertTrue(future.isDone()); assertFalse(future.cancel(false)); assertTrue(future.isCancelled()); assertTrue(future.isDone());
assertEquals(1, buffer.remaining()); assertEquals(-1, buffer.get());
assertNotNull(frame); assertEquals(9, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, frame.getData());
assertArrayEquals(TestMessages.UNKNOWN_NO_PAYLOAD_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals(src.length, bbos.getByteBuffer().remaining()); assertEquals(ByteBuffer.wrap(src), bbos.getByteBuffer());
assertArrayEquals(TestMessages.PUSH_PROMISE_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(4, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getErrorCode());
assertEquals(2, map.size());
assertNotNull(frame); assertEquals(2, frame.getLength()); assertEquals(255, frame.getType() & 0x00FF); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(2, frame.getPayload().length); assertArrayEquals(new byte[] {0x0E, 0x18}, frame.getPayload());
assertEquals(0, bbos.getByteBuffer().remaining());
assertThat(type, is((Object) Number.class));
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(256, frame.getErrorCode());
assertNotNull(frame); assertEquals(1, frame.getLength()); assertEquals(1, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(1, frame.getHeaderBlockFragment().length); assertEquals(0x0082, frame.getHeaderBlockFragment()[0] & 0x00FF);
assertThat(key1.hashCode(), is(key2.hashCode()));
assertArrayEquals(TestMessages.GOAWAY_DATA_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.RST_STREAM_HIGHEST_VALUE_NO_EXTRA_PAYLOAD_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(0, frame.getLength()); assertEquals(255, frame.getType() & 0x00FF); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0, frame.getPayload().length);
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(7, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(0x7FFFFFFF, frame.getLastStreamID()); assertEquals(0x010203, frame.getErrorCode());
assertNotNull(frame); assertEquals(4, frame.getLength()); assertEquals(3, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0x00FFFFFFFFL, frame.getErrorCode());
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(7, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(0x7FFFFFFF, frame.getLastStreamID()); assertEquals(0x010203, frame.getErrorCode());
assertArrayEquals(TestMessages.GOAWAY_NO_DATA_HIGHEST_STREAMID_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.CONTINUATION_HEADER_FRAGMENT_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(2, frame.getLength()); assertEquals(255, frame.getType() & 0x00FF); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(2, frame.getPayload().length); assertArrayEquals(new byte[] {0x0E, 0x18}, frame.getPayload());
assertEquals(0, ioBuffer.position()); assertEquals(8, ioBuffer.limit());
assertNotNull(frame); assertEquals(0, frame.getLength()); assertEquals(9, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(0, frame.getHeaderBlockFragment().length);
assertThat(key1.equals(key2), is(true)); assertThat(key2.equals(key1), is(true));
assertNotNull(frame); assertEquals(1, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00}, frame.getData());
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(7, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(0x7FFFFFFF, frame.getLastStreamID()); assertEquals(0x00FFFFFFFFL, frame.getErrorCode());
assertNotSame((new DummySession(service)).getId(), (new DummySession(service)).getId());
assertNotNull(frame); assertEquals(0, frame.getLength()); assertEquals(9, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(0, frame.getHeaderBlockFragment().length);
assertArrayEquals(TestMessages.HEADERS_PADDING_NO_PRIORITY_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.SETTINGS_HIGHEST_VALUE_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.HEADERS_PADDING_PRIORITY_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals("value2", val); assertEquals(1, map.size()); assertTrue(map.containsKey("key1"));
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(4, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(1, frame.getSettings().size()); assertEquals(0x00FFFF, setting.getID()); assertEquals(0x01020304L, setting.getValue());
assertEquals(-1, is.read());
assertArrayEquals(TestMessages.PRIORITY_NO_EXCLUSIVE_MODE_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals(ioBuffer.capacity(), ioBuffer.limit()); assertEquals(6, ioBuffer.position()); assertEquals(seg[i], ioBuffer.get(i));
assertThat(key1.equals(key2), is(false)); assertThat(key2.equals(key1), is(false));
assertEquals(1, buffer.remaining()); assertEquals(-1, buffer.get());
assertArrayEquals(TestMessages.DATA_NO_PAYLOAD_NO_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertEquals("000102FE", ByteBufferDumper.toHex(bb));
assertNotNull(frame); assertEquals(6, frame.getLength()); assertEquals(4, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(1, frame.getSettings().size()); assertEquals(1, setting.getID()); assertEquals(0x01020304L, setting.getValue());
assertArrayEquals(TestMessages.DATA_PAYLOAD_NO_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.DATA_PAYLOAD_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(0, frame.getLength()); assertEquals(255, frame.getType() & 0x00FF); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertEquals(0, frame.getPayload().length);
assertArrayEquals(TestMessages.GOAWAY_NO_DATA_BUFFER, toByteArray(encoder.encode(frame, null)));
assertNotNull(frame); assertEquals(10, frame.getLength()); assertEquals(9, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(10, frame.getHeaderBlockFragment().length); assertArrayEquals(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A}, frame.getHeaderBlockFragment());
assertNotNull(frame); assertEquals(10, frame.getLength()); assertEquals(0, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(10, frame.getData().length); assertArrayEquals(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A}, frame.getData()); assertEquals(0, frame.getPadding().length);
assertNotNull(frame); assertEquals(8, frame.getLength()); assertEquals(7, frame.getType()); assertEquals(0, frame.getFlags()); assertEquals(1, frame.getStreamID()); assertEquals(256, frame.getLastStreamID()); assertEquals(0x010203, frame.getErrorCode());
assertEquals(expected[i], ioBuffer.get(i));
assertNotNull(frame); assertEquals(9, frame.getLength()); assertEquals(6, frame.getType()); assertEquals(0x00, frame.getFlags()); assertEquals(32, frame.getStreamID()); assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, frame.getData());
assertNotNull(frame); assertEquals(3, frame.getLength()); assertEquals(0, frame.getType()); assertEquals(0x08, frame.getFlags()); assertEquals(50, frame.getStreamID()); assertEquals(0,frame.getData().length); assertEquals(2, frame.getPadding().length); assertArrayEquals(new byte[] {0x0E, 0x28}, frame.getPadding());
assertArrayEquals(TestMessages.RST_STREAM_NO_EXTRA_PAYLOAD_BUFFER, toByteArray(encoder.encode(frame, null)));
assertArrayEquals(TestMessages.PING_STANDARD_BUFFER, toByteArray(encoder.encode(frame, null)));
assertThat(warnings).isEqualTo(Helper.dummyWarnings());
assertThat(warnings).isEqualTo(Helper.dummyWarnings());
assertEquals(localSunriseTime, calc.computeSunriseTime(Zenith.CIVIL, eventDate));
assertEquals(15, localTime.get(Calendar.HOUR_OF_DAY)); assertEquals(30, localTime.get(Calendar.MINUTE));
assertEquals(localSunsetTime, calc.computeSunsetTime(Zenith.CIVIL, eventDate));
assertEquals(0, localTime.get(Calendar.HOUR_OF_DAY)); assertEquals(0, localTime.get(Calendar.MINUTE));
assertEquals(14, localTime.get(Calendar.HOUR_OF_DAY)); assertEquals(0, localTime.get(Calendar.MINUTE));
assertTrue(search.containsAnyDoubleMatching(serviceMock, Service.class)); assertTrue(search.containsAnyDoubleMatching(serviceMock, OtherService.class)); assertTrue(search.containsAnyDoubleMatching(otherServiceMock, OtherService.class)); assertTrue(search.containsAnyDoubleMatching(otherServiceMock, Service.class));
assertTrue(isDoubleClassDefinitionMissing(null)); assertTrue(isDoubleClassDefinitionMissing(NoDoubleClassDefined.class));
assertTrue(definition.isPresent());
assertFalse(walker.hasOnlyOneBeanOfClass(Bean.class));
assertEquals( nameResolver.resolveDoubleName(detailsWithClass), "doubleDefinition");
assertEquals( config, resolveSpyConfiguration(doubleField()));
assertFalse(definition.isPresent());
assertEquals( MockClass.class, mockClassResolver.predictBeanType(ANY_CLASS, beanName));
assertNotNull(childDefinition); assertNotNull(middleDefinition); assertNotNull(parentDefinition);
assertFalse(definition.isPresent());
assertTrue(testContext .doubleDefinitionsRegistrationContext .isBeanDefinitionRegisteredForDouble(definition));
assertFalse(walker.hasOnlyOneBeanOfClass(Bean.class));
assertEquals( "Can not generate double name", ex.getMessage());
assertEquals( config, resolveMockConfiguration(doubleField()));
assertFalse(isDoubleClassDefinitionMissing(Object.class));
assertTrue(definition.isPresent());
assertEquals( new HashSet<>(asList(childName, middleName, parentName, BEAN_NAME)), new HashSet<>(beanNames));
assertTrue(walker.hasOnlyOneBeanOfClass(Bean1.class)); assertTrue(walker.hasOnlyOneBeanOfClass(Bean2.class));
assertTrue(definition.isPresent());
assertFalse(definition.isPresent());
assertTrue(definition.isPresent());
assertEquals( fieldType, classResolver.resolveDoubleClass(detailsWithoutClass, fieldType));
assertEquals(4, mockNames.size()); assertThat(mockNames, containsInAnyOrder(firstMockName, secondMockName, firstSpyName, secondSpyName));
assertFalse(aName.equals(otherName));
assertFalse(name.equals(otherName));
assertEquals( "Can not resolve double class", ex.getMessage());
assertEquals( null, mockClassResolver.predictBeanType(ANY_CLASS, beanName));
assertEquals( DoubleDefinition.class, classResolver.resolveDoubleClass(detailsWithClass, ANY_FIELD_TYPE));
assertEquals( mockName, nameResolver.resolveDoubleName(detailsWithName));
assertEquals( fieldName, nameResolver.resolveDoubleName(emptyDetails, fieldName));
assertNotNull(names); assertFalse(names.isEmpty()); assertTrue(names.contains("simple")); assertTrue(names.contains("spel")); assertTrue(names.contains("xpath"));
assertEquals("springboot", catalog.getRuntimeProvider().getProviderName());
assertNotNull(names); assertFalse(names.isEmpty()); assertTrue(names.contains("hystrix")); assertTrue(names.contains("zipkin")); assertFalse(names.contains("blueprint"));
assertNotNull(routesId);
assertNotNull(names); assertFalse(names.isEmpty()); assertTrue(names.contains("bindy-csv")); assertTrue(names.contains("zipdeflater")); assertTrue(names.contains("zipfile"));
assertNotNull(names); assertFalse(names.isEmpty()); assertTrue(names.contains("file")); assertTrue(names.contains("ftp")); assertTrue(names.contains("jms")); assertFalse(names.contains("paxlogging"));
assertEquals(3, pages.size()); assertEquals("page 1" + Util.LS, pages.get(0)); assertEquals("page 2" + Util.LS, pages.get(1)); assertEquals("page 3" + Util.LS, pages.get(2));
assertEquals(expected, actual);
assertEquals(2, pages.size()); assertEquals("page 1" + Util.LS, pages.get(0)); assertEquals("page 2" + Util.LS, pages.get(1));
assertTrue(file.exists()); assertTrue(file.getName().startsWith("1__"));
assertTrue(false); assertTrue(e.getMessage().equals(Msg.doc_pw_protected.get()));
assertThat(NumberUtils.requireUnsignedMedium((1 << 24) - 1)).isEqualTo(16_777_215);
assertThat(decodeMimeTypeFromMimeBuffer(fakeTypeBuffer)).hasToString("example");
assertThat(target.readableBytes()).as("readableBytes 1 + 14 + 3 + 2").isEqualTo(20);
assertThat(WebsocketClientTransport.create(8000)).isNotNull();
assertThat(NumberUtils.requireNonNegative(Integer.MAX_VALUE, "test-message")) .isEqualTo(Integer.MAX_VALUE);
assertThat(metadata.stream().isParallel()).as("isParallel").isFalse();
assertThat(WebsocketServerTransport.create("test-bind-address", 8000)).isNotNull();
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(InvalidSetupException.class) .hasMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", INVALID_SETUP, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(ConnectionCloseException.class) .hasMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(IllegalArgumentException.class) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", CONNECTION_CLOSE, "test-message");
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(UnsupportedSetupException.class) .hasMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", UNSUPPORTED_SETUP, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(WebsocketClientTransport.create("test-bind-address", 8000)) .isNotNull() .hasFieldOrPropertyWithValue("path", "/");
assertThat(TcpClientTransport.create(8000)).isNotNull();
assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(RejectedException.class) .withFailMessage("test-message"); assertThat(Exceptions.from(0, byteBuf)) .hasMessage("Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", REJECTED, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(decodeMimeIdFromMimeBuffer(fakeIdBuffer)) .isEqualTo((WellKnownMimeType.UNPARSEABLE_MIME_TYPE.getIdentifier()));
assertThat(WebsocketServerTransport.create(HttpServer.create())).isNotNull();
assertThat(NumberUtils.requireUnsignedShort((1 << 16) - 1)).isEqualTo(65_535);
assertThat(TcpClientTransport.create(TcpClient.create())).isNotNull();
assertEquals(expected, ByteBufUtil.hexDump(frame));
assertThat(LocalServerTransport.findServer("test-name")).isNull();
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(ConnectionErrorException.class) .hasMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(IllegalArgumentException.class) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", CONNECTION_ERROR, "test-message");
assertThat("sent frame count", sent.size(), is(1)); assertThat("initial frame", frameType(f), is(REQUEST_STREAM)); assertThat("initial request n", RequestStreamFrameCodec.initialRequestN(f), is(5L)); assertThat("should be released", f.release(), is(true));
assertThat(buffer.readUnsignedMedium()).as("reading as unsigned medium").isEqualTo(16777212); assertThat(buffer.readMedium()).as("reading as signed medium").isEqualTo(-4);
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(RejectedSetupException.class) .withFailMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", REJECTED_SETUP, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(RejectedResumeException.class) .hasMessage("test-message"); assertThat(Exceptions.from(1, byteBuf)) .hasMessage( "Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", REJECTED_RESUME, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat( WebsocketClientTransport.create( InetSocketAddress.createUnresolved("test-bind-address", 8000))) .isNotNull() .hasFieldOrPropertyWithValue("path", "/");
assertEquals("00000b000000012c000000020164", ByteBufUtil.hexDump(frame));
assertThat(TcpServerTransport.create("test-bind-address", 8000)).isNotNull();
assertThat( TcpServerTransport.create( InetSocketAddress.createUnresolved("test-bind-address", 8000))) .isNotNull();
assertEquals("00000a00000001200000000005", ByteBufUtil.hexDump(frame));
assertThat(findCounter("request.fnf", SignalType.ON_COMPLETE).count()).isEqualTo(1);
assertThat(findCounter("request.stream", SignalType.ON_COMPLETE).count()).isEqualTo(1);
assertThat(TcpClientTransport.create("test-bind-address", 8000)).isNotNull();
assertThat(Exceptions.from(0, byteBuf)) .hasMessage("Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", 0, "test-message") .isInstanceOf(IllegalArgumentException.class); assertThat(Exceptions.from(1, byteBuf)) .hasMessage("Invalid Error frame in Stream ID 1: 0x%08X \'%s\'", 0x00000000, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(TcpServerTransport.create("localhost", 8000)).isNotNull();
assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(ApplicationErrorException.class) .hasMessage("test-message"); assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(IllegalArgumentException.class) .hasMessage( "Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", APPLICATION_ERROR, "test-message");
assertThat( meterRegistry .get("rsocket.duplex.connection.dispose") .tag("connection.type", CLIENT.name()) .tag("test-key", "test-value") .counter() .count()) .isEqualTo(1);
assertThat( meterRegistry .get("rsocket.duplex.connection.close") .tag("connection.type", CLIENT.name()) .tag("test-key", "test-value") .counter() .count()) .isEqualTo(1);
assertThat( WebsocketServerTransport.create( InetSocketAddress.createUnresolved("test-bind-address", 8000))) .isNotNull();
assertEquals(2147483646, s.nextStreamId(map)); assertEquals(2, s.nextStreamId(map)); assertEquals(4, s.nextStreamId(map)); assertEquals(2147483647, s.nextStreamId(map)); assertEquals(1, s.nextStreamId(map)); assertEquals(3, s.nextStreamId(map));
assertThat(findCounter("metadata.push", SignalType.ON_COMPLETE).count()).isEqualTo(1);
assertThat(decodeMimeIdFromMimeBuffer(fakeIdBuffer)) .isEqualTo((WellKnownMimeType.UNPARSEABLE_MIME_TYPE.getIdentifier()));
assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(CanceledException.class) .hasMessage("test-message"); assertThat(Exceptions.from(0, byteBuf)) .isInstanceOf(IllegalArgumentException.class) .hasMessage("Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", CANCELED, "test-message");
assertThat(new LocalSocketAddress("test-name").getName()).isEqualTo("test-name");
assertThat(target.readableBytes()).as("readableBytes 1 + 3 + 2").isEqualTo(6);
assertThat(NumberUtils.requirePositive(Integer.MAX_VALUE, "test-message")) .isEqualTo(Integer.MAX_VALUE);
assertThat(findTimer("request.response", SignalType.ON_COMPLETE).count()).isEqualTo(1);
assertThat(TcpServerTransport.create(TcpServer.create())).isNotNull();
assertThat(LocalClientTransport.create("test-name")).isNotNull();
assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(CustomRSocketException.class) .hasMessage("test-message"); assertThat(Exceptions.from(0, byteBuf)) .hasMessage("Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", randomCode, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(Exceptions.from(1, byteBuf)) .isInstanceOf(InvalidException.class) .hasMessage("test-message"); assertThat(Exceptions.from(0, byteBuf)) .hasMessage("Invalid Error frame in Stream ID 0: 0x%08X \'%s\'", INVALID, "test-message") .isInstanceOf(IllegalArgumentException.class);
assertThat(WebsocketClientTransport.create(HttpClient.create(), "test")) .isNotNull() .hasFieldOrPropertyWithValue("path", "/test");
assertThat(WebsocketClientTransport.create(HttpClient.create(), "/")) .isNotNull() .hasFieldOrPropertyWithValue("path", "/");
assertThat(CompositeMetadataCodec.hasEntry(buffer, 0)).isTrue(); assertThat(CompositeMetadataCodec.hasEntry(buffer, 4)).isTrue(); assertThat(CompositeMetadataCodec.hasEntry(buffer, 8)).isFalse();
assertThat( TcpClientTransport.create( InetSocketAddress.createUnresolved("test-bind-address", 8000))) .isNotNull();
assertThat(findCounter("request.channel", SignalType.ON_COMPLETE).count()).isEqualTo(1);
assertEquals(expected, ByteBufUtil.hexDump(frame));
assertThat(NumberUtils.requireNonNegative(0, "test-message")).isEqualTo(0);
assertThat(buffer.readUnsignedMedium()).as("reading as unsigned medium").isEqualTo(129); assertThat(buffer.readMedium()).as("reading as signed medium").isEqualTo(129);
assertThat(LocalServerTransport.findServer(serverTransport.getName())).isNotNull();
assertThat(new MicrometerRSocketInterceptor(meterRegistry).apply(delegate)) .isInstanceOf(MicrometerRSocket.class);
assertThat(metadata.stream().spliterator()) .matches(s -> s.hasCharacteristics(Spliterator.ORDERED), "ORDERED") .matches(s -> s.hasCharacteristics(Spliterator.DISTINCT), "DISTINCT") .matches(s -> s.hasCharacteristics(Spliterator.NONNULL), "NONNULL") .matches(s -> !s.hasCharacteristics(Spliterator.SIZED), "not SIZED");
assertThat(CompositeMetadataCodec.isWellKnownMimeType(wellKnown)).isTrue(); assertThat(CompositeMetadataCodec.isWellKnownMimeType(explicit)).isFalse();
assertThat(NumberUtils.requirePositive(Long.MAX_VALUE, "test-message")) .isEqualTo(Long.MAX_VALUE);
assertThat(WebsocketServerTransport.create(8000)).isNotNull();
assertThat(NumberUtils.requireUnsignedByte((1 << 8) - 1)).isEqualTo(255);
assertThat(new MicrometerDuplexConnectionInterceptor(meterRegistry).apply(CLIENT, delegate)) .isInstanceOf(MicrometerDuplexConnection.class);
assertEquals(expected, ByteBufUtil.hexDump(frame));
assertThat( "Unexpected frame sent on the connection.", frameType(sent.get(0)), is(REQUEST_RESPONSE)); assertThat("Unexpected frame sent on the connection.", frameType(sent.get(1)), is(CANCEL));
assertTrue( file1.createNewFile() ); assertTrue( file.createNewFile() ); assertEquals( asList( dep1, dep2 ), firstEntry ); assertEquals( asList( dep3 ), secondEntry );
assertTrue(L4.squares().size()==4);
assertTrue( board.onseed(L4, 0, 1)); assertFalse( board.onseed(L4, 2, 4)); assertTrue( board.onseed(L4, 2, 4));
assertTrue( I3.touches(-1, -1)); assertTrue(I3.touches(s.i, s.j)); assertFalse(L4.touches(s.i, s.j));
assertTrue( board.overlaps(0, L4, 0, 0)); assertFalse( board.overlaps(0, L4, 0, 1));
assertFalse( I3.crosses(s.i, s.j)); assertFalse(L4.crosses(s.i, s.j)); assertTrue(L4.crosses(-1, -2)); assertFalse(L4.crosses(-2, -2));
assertFalse( board.fits(0, L4, 0, 0)); assertTrue( board.fits(0, L4, 0, 1)); assertTrue( board.fits(0, L4, 0, 18)); assertFalse( board.fits(0, L4, 0, 19)); assertTrue( board.fits(0, L4, 18, 1)); assertFalse( board.fits(0, L4, 19, 1));
assertTrue( I3==I3); assertFalse( I3==L4);
assertTrue(L4.squares(0).size()==13);
assertNotNull( ai.think(0,0));
assertTrue( board.fits(0, L4, 0, 1)); assertFalse( board.fits(0, L4, 1, 3)); assertFalse( board.fits(0, L4, 1, 4)); assertFalse( board.fits(0, L4, 2, 3)); assertTrue( board.fits(0, L4, 2, 4));
assertTrue( board.valid(L4, 0, 1)); assertFalse( board.valid(L4, 1, 3)); assertFalse( board.valid(L4, 1, 4)); assertFalse( board.valid(L4, 2, 3)); assertTrue( board.valid(L4, 2, 4));
assertTrue(L4.seeds().size()==5);
assertThat(result.get("log.logger")).isNull();
assertThat(result.get("tags")).hasSize(1); assertThat(result.get("tags").get(0).textValue()).isEqualTo("exampleTag");
assertThat(result.get("log.logger").textValue()).isEmpty();
assertThat(result.get("log.origin")).isNull();
assertThat(stringBuilder.toString()).isEqualTo("\\"message\\":\\"null\\", ");
assertThat(result.get("tags")).hasSize(2); assertThat(result.get("tags").get(0).textValue()).isEqualTo("exampleTag1"); assertThat(result.get("tags").get(1).textValue()).isEqualTo("exampleTag2");
assertEquals(scrambledPasswordHexStr, StringUtil.toHexString(Native41Authenticator.encode(PASSWORD, challenge)));
assertEquals(scrambledPasswordHexStr, StringUtil.toHexString(Native41Authenticator.encode(PASSWORD, challenge)));
assertTrue(holder2.isFailed());
assertFalse(holder2.isComplete()); assertFalse(holder2.isComplete()); assertTrue(holder1.isComplete()); assertTrue(holder2.isFailed());
assertEquals("{}", new PgException(null, null, null, null).getMessage());
assertEquals("{}", ResponseHelper.getEmptyPgException().getMessage());
assertEquals( "md54cd35160716308e3e571bbba12bb7591", MD5Authentication.encode("scott", "tiger", "salt\'n\'pepper".getBytes(StandardCharsets.UTF_8)));
assertThat(result, equalTo(err)); assertThat(result, not(equalTo(out)));
assertThat(testName, filter.findMatchingPattern(testName).isPresent(), is(true)); assertThat(testName, filter.findMatchingPattern(testName).isPresent(), is(true)); assertThat(testName, filter.findMatchingPattern(testName).isPresent(), is(false));
assertThat(result, equalTo(out)); assertThat(result, not(equalTo(err)));
assertNotNull(centerMonth); assertEquals(createDate(2010, 4, 1, 0, 0, 0).getTime(), centerMonth.getStartDate().getTime()); assertEquals(createDate(2010, 5, 1, 0, 0, 0).getTime(), centerMonth.getStopDate().getTime());
assertEquals("AT[12S]_AVG_3PAARC\\\\d{8}_[DTEM]_[nd][ND][23][bms][.]nc([.]gz)?", FILE_TYPE.getFilenameRegex());
assertEquals(EMPTY_LIST_STRING, outputStream.toString());
assertNotNull(file); assertEquals(existingFile.getAbsolutePath(), file.getAbsolutePath());
assertNull(reader.getBandUnit());
assertNotNull(stopTime);
assertNotNull(toolStorageSensor); assertEquals(sensorName, toolStorageSensor.getName());
assertEquals("11851", reader.getDatasetName());
assertNotNull(grid); assertEquals(0.27232966f, (float) grid.getSampleDouble(0, 4), 0.0f); assertEquals(0.10357625f, (float) grid.getSampleDouble(39, 3), 0.0f);
assertEquals(0, pixelCounter.count(null));
assertTrue(timeRange.intersectsWith(contained));
assertNotNull(storageMatchup); assertEquals(id, storageMatchup.getId()); assertEquals(pattern, storageMatchup.getPattern());
assertNotNull(cell5Factory); assertNotNull(cell5); assertEquals(52, cell5.getX()); assertEquals(78, cell5.getY());
assertNotNull(insituTime.historyShape); assertArrayEquals(new int[]{1, 53}, insituTime.historyShape);
assertEquals("the_condition", condition);
assertNull(reader.getInsituSource());
assertNotNull(sensor); assertEquals("Sarah", sensor.getName()); assertEquals(8877646L, sensor.getPattern()); assertEquals("InsituObservation", sensor.getObservationType());
assertNotNull(productStartTime); assertEquals(expectedStartTime.getMJD(), productStartTime.getMJD(), 0.0); assertNotNull(productEndTime); assertEquals(expectedEndTime.getMJD(), productEndTime.getMJD(), 0.0);
assertFalse(TemplateVariables.isFigureProperty("image")); assertFalse(TemplateVariables.isFigureProperty("figure.bla.scale")); assertTrue(TemplateVariables.isFigureProperty("figure.really"));
assertEquals(0.0, SelectionTool.variance(data), 0.0);
assertEquals(new Rectangle(0, 0, 100, 100), gridDef05.getGridRectangle(0, 0, gridDef5)); assertEquals(new Rectangle(100, 0, 100, 100), gridDef05.getGridRectangle(1, 0, gridDef5)); assertEquals(new Rectangle(0, 100, 100, 100), gridDef05.getGridRectangle(0, 1, gridDef5)); assertEquals(new Rectangle(100, 100, 100, 100), gridDef05.getGridRectangle(1, 1, gridDef5));
assertNotNull(coincidence); assertSame(matchup, coincidence.getMatchup()); assertSame(relatedObservation, coincidence.getObservation()); assertEquals(5000, coincidence.getTimeDifference(), 1e-8);
assertEquals(1, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertNotNull(parameter); assertEquals(5, parameter.getStartTime()); assertEquals(6, parameter.getStopTime()); assertEquals(7, parameter.getSearchTimePast()); assertEquals(8, parameter.getSearchTimeFuture()); assertEquals("thermometer", parameter.getSensorName());
assertEquals(1, formatNames.length); assertEquals("AVHRR-GAC-NC", formatNames[0]);
assertTrue(grid.getSampleBoolean(1, 0)); assertTrue(grid.getSampleBoolean(3, 1)); assertFalse(grid.getSampleBoolean(0, 0)); assertFalse(grid.getSampleBoolean(1, 1));
assertNotNull(dimensionNames); assertEquals(0, dimensionNames.size());
assertNull(result);
assertEquals(657, samples.size());
assertEquals(0, pattern);
assertNotNull(julySamples); assertEquals(49, julySamples.size()); assertEquals(151, samples.size());
assertTrue(TemplateVariables.isDefaultProperty("the.property.default")) ; assertFalse(TemplateVariables.isDefaultProperty("the.property.scale")) ; assertFalse(TemplateVariables.isDefaultProperty("the.property")) ;
assertEquals(1, formatNames.length); assertEquals("AMSRE_L2A", formatNames[0]);
assertNotNull(reader); assertTrue(reader instanceof GunzipDecorator);
assertEquals(0, sampleList.size()); assertNotNull(filteredList); assertEquals(0, filteredList.size());
assertEquals(SINGLE_POINT_LIST_STRING, outputStream.toString());
assertEquals(1, cleanedList.size());
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(2, paragraphVariables.size()); assertEquals("this is a complete paragraph", paragraphVariables.get("paragraph.full")); assertEquals("me too", paragraphVariables.get("comment.schnack"));
assertNotNull(grid); assertEquals(0.9132683f, (float) grid.getSampleDouble(0, 4), 0.0f); assertEquals(0.7707501f, (float) grid.getSampleDouble(39, 3), 0.0f);
assertEquals(1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals("the_name", mask.getName());
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertNotNull(matchup); assertEquals(45, matchup.getId()); assertSame(referenceObservation, matchup.getRefObs()); assertEquals(7765L, matchup.getPattern());
assertTrue(rule instanceof Renaming);
assertNotNull(timeRange);
assertEquals(ToolException.TOOL_ERROR, toolException.getExitCode()); assertNotNull(cause); assertEquals(message, cause.getMessage());
assertEquals(83, polarOrbitingPolygon.getId());
assertEquals("Invalid generator name: STRANGE_NAME", expected.getMessage());
assertEquals(0, pixelCounter.count(array));
assertEquals(1000000L | 10L, pattern); assertEquals(1, transactionStack.size()); assertSame(transaction, transactionStack.pop());
assertEquals("select something cool where m.pattern & ?4 = ?4 and r.time = easter_last_year", sqlApplied);
assertEquals("ZNUB", reader.getDatasetName());
assertEquals("AMSR_E_L2A_BrightnessTemperatures_V12_200502170446_A.hdf", productName);
assertEquals("20070905", formatted);
assertNotNull(filter); assertEquals("AVHRR-GAC-NC",filter.getFormatName());
assertNotNull(toolStorageObservation); assertEquals(name, toolStorageObservation.getName());
assertFalse(configuration.containsValue("nasenmann.org")); assertTrue(configuration.containsValue("nasenmann.org"));
assertNotNull(raster); assertEquals(100, raster.getWidth()); assertEquals(50, raster.getHeight()); assertEquals(0.0, raster.getEasting(), 1e-8); assertEquals(0.0, raster.getNorthing(), 1e-8); assertEquals(0.0, raster.getResolutionX(), 1e-8); assertEquals(0.0, raster.getResolutionY(), 1e-8);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertNotNull(file); assertEquals(toolHome + File.separator + "schneck", file.getAbsolutePath());
assertNotNull(reader); assertTrue(reader instanceof AmsreProductReader);
assertFalse(timeRange.intersectsWith(contained));
assertNotNull(asProperties); assertEquals("value", asProperties.getProperty("key"));
assertTrue(cache.contains(25)); assertTrue(cache.contains(26)); assertFalse(cache.contains(25)); assertFalse(cache.contains(26));
assertEquals(-480847887, hashCode); assertEquals(1939683365, hashCode); assertEquals(885044675, hashCode);
assertEquals("2010-01-01T13:00:00.000Z", TimeUtil.formatCcsdsUtcMillisFormat(calendar.getTime()));
assertTrue(remover.isPrimary());
assertEquals(0.3646409252417634, sup.r(12), 1e-8); assertEquals(0.35780795774357266, sup.r(12), 1e-8);
assertNotNull(propertiesStream); assertEquals(4, wordVariables.size());
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(HEIGHT, height);
assertNotNull(toolStorageDatafile); assertEquals(id, toolStorageDatafile.getId()); assertEquals("something", toolStorageDatafile.getPath());
assertNotNull(variableList); assertEquals(2, variableList.size()); assertEquals("Heike", variableList.get(0).getName()); assertEquals("Carmen", variableList.get(1).getName());
assertNotNull(filteredList); assertEquals(2, filteredList.size());
assertEquals(27, samplingPoints.size());
assertEquals(3, cleanedList.size()); assertEquals(1000000000L, cleanedPoint.getReferenceTime()); assertEquals(1000000998L, cleanedPoint.getReference2Time()); assertEquals(1000001000L, cleanedPoint.getReferenceTime()); assertEquals(1000001895L, cleanedPoint.getReference2Time()); assertEquals(1000002000L, cleanedPoint.getReferenceTime()); assertEquals(1000001000L, cleanedPoint.getReference2Time());
assertNotNull(orbitLists); assertEquals(0, orbitLists.size());
assertEquals(ID, storedId);
assertEquals("MMD_FRAC01.inp", GbcsTool.getConfigurationFilename("avhrr_f.m01")); assertEquals("MMD_FRAC02.inp", GbcsTool.getConfigurationFilename("avhrr_f.m02"));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertNotSame(Range.EMPTY, range); assertTrue(range.first() == range.last()); assertTrue(historyTimes.getDouble(range.first()) == referenceTime + HALF_DAY_MJD);
assertEquals(0, TimeUtil.toSecondsSince1978(calendar.getTime())); assertEquals(10, TimeUtil.toSecondsSince1978(calendar.getTime())); assertEquals(310, TimeUtil.toSecondsSince1978(calendar.getTime())); assertEquals(13219522, TimeUtil.toSecondsSince1978(calendar.getTime()));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertTrue(samples.isEmpty());
assertNotNull(thinnedOutList); assertEquals(1, thinnedOutList.size());
assertNotNull(reader); assertTrue(reader instanceof GunzipDecorator);
assertEquals(20, NwpTool.computePastTimeStepCount(33)); assertEquals(10, NwpTool.computePastTimeStepCount(17));
assertEquals(2012, calendar.get(Calendar.YEAR)); assertEquals(11 - 1, calendar.get(Calendar.MONTH)); assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH)); assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(0, calendar.get(Calendar.MINUTE)); assertEquals(0, calendar.get(Calendar.SECOND)); assertEquals(0, calendar.get(Calendar.MILLISECOND));
assertNotNull(toolStorageSensor); assertEquals(sensorName, toolStorageSensor.getName());
assertEquals(188.815598, separations.dxy(0), 0.000001); assertEquals(286.830454, separations.dxy(18), 0.000001); assertEquals(188.815598, separations.dxy(35), 0.000001); assertEquals(240.705816, separations.dxy(9), 0.000001); assertEquals(234.940236, separations.dxy(27), 0.000001);
assertSame(Range.EMPTY, range);
assertEquals(21, count);
assertNotNull(filteredList); assertEquals(2, filteredList.size());
assertTrue(historyTimes.getDouble(range.first()) == referenceTime); assertTrue(historyTimes.getDouble(range.last()) <= referenceTime + HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.last() + 1) > referenceTime + HALF_DAY_MJD);
assertEquals(0, cleanedList.size());
assertEquals(2, builder.dimensions("a b").build().getRank());
assertFalse(mask.getValue(0, 4)); assertFalse(mask.getValue(1, 4)); assertTrue(mask.getValue(2, 4)); assertTrue(mask.getValue(6, 4)); assertTrue(mask.getValue(6, 5)); assertFalse(mask.getValue(6, 6));
assertEquals(3, samplingPoints.size());
assertTrue(readerCh_3A.createFillValueLine(ch3b_flag)); assertFalse(readerCh_3A.createFillValueLine(ch3a_flag)); assertTrue(readerCh_3B.createFillValueLine(ch3a_flag)); assertFalse(readerCh_3B.createFillValueLine(ch3b_flag));
assertEquals(ToolException.TOOL_CONFIGURATION_ERROR, e.getExitCode());
assertNotNull(dimensionConfiguration); assertNotNull(left); assertEquals(73, left.intValue());
assertTrue(timeRange.intersectsWith(contained));
assertEquals(10.0, TimeUtil.getTimeDifferenceInSeconds(date_1, date_2), 1e-8); assertEquals(10.0, TimeUtil.getTimeDifferenceInSeconds(date_2, date_1), 1e-8); assertEquals(11.0, TimeUtil.getTimeDifferenceInSeconds(date_1, date_2), 1e-8); assertEquals(11.0, TimeUtil.getTimeDifferenceInSeconds(date_2, date_1), 1e-8);
assertNotNull(filteredList); assertEquals(1, filteredList.size());
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(-1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertTrue(PolarOrbitingPolygon.isBetween(13.0, 10.0, 20.0)); assertTrue(PolarOrbitingPolygon.isBetween(13.0, 20.0, 10.0)); assertFalse(PolarOrbitingPolygon.isBetween(13.0, 10.0, -14.0));
assertEquals("BT_HV_23_8", AmsreProductReader.removeDots("BT.HV_23.8")); assertEquals("blabla_DOT", AmsreProductReader.removeDots("blabla_DOT"));
assertTrue(workflow instanceof GenerateSobolPointsWorkflow); assertTrue(workflow instanceof GenerateInsituPointsWorkflow);
assertNotNull(logger); assertEquals("org.esa.cci.sst", logger.getName()); assertEquals(Level.INFO, logger.getLevel()); assertNotNull(handlers); assertEquals(1, handlers.length); assertEquals(Level.ALL, handlers[0].getLevel());
assertEquals("org/esa/cci/sst/tools/regavg [OPTIONS]", tool.getSyntax());
assertEquals(1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(6.0, gridDef.getResolution(), 1e-8);
assertNotNull(context); assertNull(context.getConfiguration()); assertNotNull(dimensionConfiguration); assertEquals(0, dimensionConfiguration.size()); assertNull(context.getMatchup()); assertNull(context.getObservation()); assertNull(context.getObservationReader()); assertNull(context.getReferenceObservationReader()); assertNull(context.getTargetVariable());
assertEquals("the default", configuration.getStringValue("missing.toms.key", "the default"));
assertEquals("No value for: unconfigured_key", expected.getMessage());
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(1, offset.getAcrossTrackOffset()); assertEquals(1, offset.getAlongTrackOffset());
assertEquals(0x18000L, pattern);
assertNotNull(removed); assertEquals(0.0, removed, 1e-8);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertTrue(PgUtil.isClockwise(geoBoundary));
assertEquals("\\nThe regavg tool is used to generate regional average time-series from ARC (L2P, L3U) and SST_cci (L3U, L3P, L4) product files given a time interval and a list of regions. An output NetCDF file will be written for each region.\\n" + "OPTIONS may be one or more of the following:\\n", tool.getHeader());
assertEquals("mmd", mmdReader.getDatasetName());
assertNotNull(timeRange); assertEquals(TimeUtil.parseCcsdsUtcFormat("1978-01-01T00:00:00Z").getTime(), startDate.getTime()); assertEquals(TimeUtil.parseCcsdsUtcFormat("1979-01-01T00:00:00Z").getTime(), stopDate.getTime());
assertEquals(sql, sqlApplied);
assertNotNull(file); assertEquals(absolutePath, file.getAbsolutePath());
assertNotNull(parameter); assertEquals(1, parameter.getStartTime()); assertEquals(2, parameter.getStopTime()); assertEquals(3, parameter.getSearchTimePast()); assertEquals(4, parameter.getSearchTimeFuture()); assertEquals("sensi", parameter.getSensorName());
assertNotNull(centerMonth); assertEquals(createDate(2010, 3, 1, 0, 0, 0).getTime(), centerMonth.getStartDate().getTime()); assertEquals(createDate(2010, 4, 1, 0, 0, 0).getTime(), centerMonth.getStopDate().getTime());
assertEquals("", TimeUtil.formatCcsdsUtcMillisFormat(null));
assertNotNull(file); assertEquals(existingFile.getAbsolutePath(), file.getAbsolutePath());
assertNotNull(netCDFWriter);
assertEquals("number of rings", 2, polygon.getRings().size()); assertEquals("number of points in first ring", 16, polygon.getRings().get(0).size()); assertEquals("number of points in second ring", 8, polygon.getRings().get(1).size()); assertEquals("lat of first point of first ring", 38.4, polygon.getRings().get(0).get(0).getLat(), 1.0e-8);
assertEquals(180, mask.getWidth()); assertEquals(90, mask.getHeight()); assertNotNull(gridDef); assertEquals(2.0, gridDef.getResolutionX(), 1e-8); assertEquals(2.0, gridDef.getResolutionY(), 1e-8);
assertEquals(2, samples.size()); assertEquals(64.5, samples.get(0).getLat(), 1e-8); assertEquals(78.6, samples.get(1).getLat(), 1e-8);
assertEquals(78.0f, targetArray.getFloat(0), 0.0); assertEquals(62.877f, targetArray.getFloat(1), 0.0);
assertTrue(watermask.isWater(0.0, 0.0)); assertFalse(watermask.isWater(20.0, 0.0));
assertNotNull(coincidence); assertSame(matchup, coincidence.getMatchup()); assertSame(relatedObservation, coincidence.getObservation()); assertEquals(0.0, coincidence.getTimeDifference(), 1e-8);
assertFalse(PgUtil.isClockwise(geoBoundary));
assertEquals(1, extensions.length); assertEquals(".hdf", extensions[0]);
assertNull(grid.getCell(6, 18)); assertSame(cell, grid.getCell(6, 18)); assertSame(cell, grid.getCellSafe(6, 18));
assertEquals(2, figureVariables.size()); assertEquals("a_valid_figure", figureVariables.get("figure.one")); assertEquals("another_figure", figureVariables.get("figure.second"));
assertEquals(33, samplingPoints.size());
assertEquals(104.04, provider.getDetectorTemperature(date), 0.001);
assertNotNull(thinnedOutList); assertEquals(0, thinnedOutList.size());
assertTrue(readerCh_3A.createFillValueLine(ch3b_flag)); assertFalse(readerCh_3A.createFillValueLine(ch3a_flag)); assertTrue(readerCh_3B.createFillValueLine(ch3a_flag)); assertFalse(readerCh_3B.createFillValueLine(ch3b_flag));
assertNotNull(toolStorageReferenceObservation); assertEquals(name, toolStorageReferenceObservation.getName());
assertNotNull(thinnedOutList); assertEquals(1, thinnedOutList.size());
assertFalse(mask.getValue(0, 5)); assertTrue(mask.getValue(1, 5)); assertTrue(mask.getValue(2, 5)); assertFalse(mask.getValue(6, 2)); assertFalse(mask.getValue(6, 3)); assertFalse(mask.getValue(6, 4));
assertEquals(0x10000L, pattern);
assertTrue(NcAvhrrGacProductReaderPlugIn.matches("19910101000100-ESACCI-L1C-AVHRR11_G-fv01.0.nc")); assertTrue(NcAvhrrGacProductReaderPlugIn.matches("20061031223900-ESACCI-L1C-AVHRRMTA_G-fv01.0.nc"));
assertEquals(82715, filtererList.size());
assertEquals(100, watermask.getWaterFraction(0, 0, geographic, 11, 11)); assertEquals(0, watermask.getWaterFraction(20, 0, geographic, 11, 11));
assertEquals(1, reader.getNumRecords());
assertEquals(1, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(9, TimeUtil.getMonth(date)); assertEquals(6, TimeUtil.getMonth(date));
assertEquals(1, defaultFileExtensions.length); assertEquals(".nc", defaultFileExtensions[0]);
assertArrayEquals(EXPECTED_LAT, latData, 1e-8f);
assertEquals(0.2, variables.getScale("figure.not_defined"), 1e-8);
assertEquals("[daily, monthly, seasonal, annual]", AveragingTool.validTemporalResolutions());
assertNotNull(insituMohcId.historyShape); assertArrayEquals(new int[]{1, 82}, insituMohcId.historyShape);
assertEquals(284202, samplingPoints.size());
assertEquals(0.0, separations.dt());
assertEquals(12, NwpTool.computeFutureTimeStepCount(33)); assertEquals(6, NwpTool.computeFutureTimeStepCount(17));
assertEquals(2, wordVariables.size()); assertEquals("juchee", wordVariables.get("word.schnick")); assertEquals("blablabla", wordVariables.get("word.schnack"));
assertNotNull(orbitLists); assertEquals(1, orbitLists.size()); assertNotNull(orbitPoints); assertEquals(2, orbitPoints.size());
assertEquals(0x01, bytes[0]); assertEquals(0x02, bytes[1]); assertEquals(0x03, bytes[2]); assertEquals(0x04, bytes[3]);
assertTrue(AveragingAggregator.mustAggregateTo90(globe)); assertTrue(AveragingAggregator.mustAggregateTo90(north)); assertTrue(AveragingAggregator.mustAggregateTo90(south)); assertFalse(AveragingAggregator.mustAggregateTo90(any));
assertEquals(new Rectangle2D.Double(-180.0, 89.95, 0.05, 0.05), gridDef05.getLonLatRectangle(0, 0)); assertEquals(new Rectangle2D.Double(0.0, 0.0, 0.05, 0.05), gridDef05.getLonLatRectangle(gridDef05.getWidth() / 2, gridDef05.getHeight() / 2 - 1));
assertEquals("bla bla bla where m.pattern & ?4 = ?4 and absolutely nonsense and r.time = yesterday", sqlApplied);
assertNotNull(point); assertNotNull(pointGeometry); assertEquals(1, pointGeometry.numPoints()); assertEquals(34.0, pointGeometryPoint.getX(), 1e-8); assertEquals(11.6, pointGeometryPoint.getY(), 1e-8);
assertEquals(2, inputTypes.length); assertEquals(File.class, inputTypes[0]); assertEquals(String.class, inputTypes[1]);
assertNotSame(Range.EMPTY, range); assertTrue(range.first() == range.last()); assertTrue(historyTimes.getDouble(range.first()) == referenceTime + HALF_DAY_SECS);
assertNotNull(startTime);
assertNotNull(emptyList); assertEquals(0, emptyList.size());
assertNotNull(reader); assertTrue(reader instanceof AaiProductReader);
assertEquals(-1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertNotNull(observation);
assertNotNull(toolStorageDatafile); assertEquals(path, toolStorageDatafile.getPath());
assertEquals(Level.WARNING, logger.getLevel());
assertNotNull(orbitLists); assertEquals(4, orbitLists.size()); assertNotNull(orbitPoints); assertEquals(3, orbitPoints.size()); assertNotNull(orbitPoints); assertEquals(3, orbitPoints.size()); assertNotNull(orbitPoints); assertEquals(3, orbitPoints.size()); assertNotNull(orbitPoints); assertEquals(3, orbitPoints.size());
assertEquals("MMD_ATSR1.inp", GbcsTool.getConfigurationFilename("atsr.1")); assertEquals("MMD_ATSR2.inp", GbcsTool.getConfigurationFilename("atsr.2")); assertEquals("MMD_AATSR.inp", GbcsTool.getConfigurationFilename("atsr.3"));
assertEquals(2, inputTypes.length); assertEquals(String.class, inputTypes[0]); assertEquals(File.class, inputTypes[1]);
assertEquals(1, transactionStack.size()); assertSame(transaction, transactionStack.pop());
assertEquals(1, matchupCount);
assertTrue(filename.matches(fileType.getFilenameRegex()));
assertEquals(-1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(1983, polarOrbitingPolygon.getTime());
assertNull(grid.getCell(0, 9)); assertNotNull(cell); assertSame(cell, grid.getCell(0, 9)); assertSame(cell, grid.getCellSafe(0, 9));
assertEquals("where_it_is", variables.getFiguresDirectory());
assertTrue(historyTimes.getDouble(range.first() - 1) < referenceTime - HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.first()) >= referenceTime - HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.last()) <= referenceTime + HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.last() + 1) > referenceTime + HALF_DAY_SECS);
assertTrue(nanLocator.getGeoLocation(0.0, 0.0, geoLocation)); assertEquals(179.0, geoLocation.getX(), 1e-8); assertEquals(20.0, geoLocation.getY(), 1e-8); assertTrue(nanLocator.getGeoLocation(1.0, 1.0, geoLocation)); assertEquals(-178.5, geoLocation.getX(), 1e-8); assertEquals(21.0, geoLocation.getY(), 1e-8);
assertTrue(historyTimes.getDouble(range.first() - 1) < referenceTime - HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.first()) >= referenceTime - HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.last()) == referenceTime);
assertTrue(targetArray.getElementType() == float.class); assertEquals(10.5f, targetArray.getFloat(0), 0.0f); assertEquals(14.5f, targetArray.getFloat(1), 0.0f);
assertEquals(19, count);
assertEquals(108, value.longValue());
assertNotNull(reader); assertTrue(reader instanceof MetopMdReader); assertNotNull(reader); assertTrue(reader instanceof AtsrMdReader); assertNotNull(reader); assertTrue(reader instanceof SeviriMdReader); assertNotNull(reader); assertTrue(reader instanceof AvhrrMdReader); assertNotNull(reader); assertTrue(reader instanceof InsituReader);
assertEquals("3.1", tool.getVersion());
assertSame(Range.EMPTY, range);
assertArrayEquals(EXPECTED_LON, lonData, 1e-8f);
assertFalse(cache.contains(i));
assertSame(Range.EMPTY, range);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertNotNull(fileFilter); assertEquals(".hdf", fileFilter.getDefaultExtension());
assertEquals((3 * 365 + 1) * TimeUtil.SECONDS_PER_DAY, seconds, 0.0);
assertEquals(109.7, value.doubleValue(), 1e-8);
assertNull(file); assertNull(file);
assertNotNull(cells); assertEquals(0, cells.size()); assertNotNull(cells); assertEquals(4, cells.size()); assertSame(grid.getCell(10, 2), cells.get(0)); assertSame(grid.getCell(7, 3), cells.get(1)); assertSame(grid.getCell(0, 9), cells.get(2)); assertSame(grid.getCell(12, 25), cells.get(3));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(1.0, reader.getScalingFactor(), 1e-8);
assertEquals(3, subset.getRank()); assertEquals(10, subset.getIndexPrivate().getShape(1)); assertEquals(2, subset.getIndexPrivate().getShape(2));
assertTrue(GridDef.createGlobal(0.05).equals(GridDef.createGlobal(0.05))); assertFalse(GridDef.createGlobal(0.04).equals(GridDef.createGlobal(0.05))); assertTrue(GridDef.createGlobal(3600, 1800).equals(GridDef.createGlobal(3600, 1800))); assertFalse(GridDef.createGlobal(3600, 1800).equals(GridDef.createGlobal(3600, 1801)));
assertEquals(ProductData.TYPE_INT32, reader.getDataType());
assertNotNull(namesFromStorage);
assertEquals("Calibration Quality Flags for ch3", reader.getBandDescription());
assertNull(fillValue);
assertEquals("2006-08-04", formatted);
assertEquals("his_avhrr.n13", MatchupGenerator.createSensorShortName("history", "avhrr.n13")); assertEquals("ins_atsr.2", MatchupGenerator.createSensorShortName("insitu", "atsr.2"));
assertNotNull(dimensionProperties); assertEquals("unlimited", dimensionProperties.getProperty("matchup")); assertEquals("80", dimensionProperties.getProperty("filename_length"));
assertEquals(-1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertNotNull(matchups); assertEquals(1, matchups.size()); assertEquals(12, matchups.get(0).getId());
assertEquals(1.0, NcTools.getScaleFactor(variable), 1e-8);
assertTrue(historyTimes.getDouble(range.first() - 1) < referenceTime - HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.first()) >= referenceTime - HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.last()) <= referenceTime + HALF_DAY_MJD); assertTrue(historyTimes.getDouble(range.last() + 1) > referenceTime + HALF_DAY_MJD);
assertNotNull(reader); assertTrue(reader instanceof InsituReader);
assertEquals(355, samplingPoints.size());
assertEquals("value.1", configuration.getStringValue("key.1")); assertEquals("value.2", configuration.getStringValue("key.2")); assertEquals(283996800000L, dateValue.getTime());
assertEquals("No value for: nasenmann.org", expected.getMessage());
assertNotNull(insituLatitude.historyShape); assertArrayEquals(new int[]{1, 65}, insituLatitude.historyShape);
assertNotNull(toolStorageColumn); assertEquals(columnName, toolStorageColumn.getName());
assertEquals("Expected condition \'must fail\' to be satisfied.", expected.getMessage());
assertFalse(sobolPoint.isInsitu()); assertTrue(insituPoint.isInsitu());
assertEquals(0.10276985607975611, sup.calculate(testCell, 2.6), 1e-8); assertEquals(0.12447655518902133, sup.calculate(testCell, 3.2), 1e-8);
assertNotNull(toolStorageDatafile); assertEquals(path, toolStorageDatafile.getPath());
assertEquals(0, samples.size());
assertEquals(357, TimeUtil.getDayOfYear(date)); assertEquals(129, TimeUtil.getDayOfYear(date));
assertNotNull(value); assertEquals(29.66, value.doubleValue(), 1e-8);
assertNotNull(allColumns); assertEquals(1, allColumns.size()); assertEquals("test_me", allColumns.get(0).getName());
assertEquals(-1, offset.getAcrossTrackOffset()); assertEquals(0, offset.getAlongTrackOffset());
assertEquals(LogLevel.INFO, SstLogging.getDefaultLevel());
assertNotNull(augustSamples); assertEquals(102, augustSamples.size()); assertEquals(98, samples.size());
assertEquals("SST-CCI AVHRR-GAC L1c data products", plugIn.getDescription(null));
assertEquals(14.881, NcTools.getScaleFactor(variable), 1e-8);
assertEquals(0, matchupCount);
assertEquals(0, nearestTimeStep);
assertNotNull(lines); assertTrue(lines.isEmpty());
assertEquals(9, pixelCounter.count(mask));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertNotNull(lut1.getMagnitudeGrid5()); assertNotNull(lut1.getExponentGrid5());
assertNotNull(insituLatitude.historyShape); assertArrayEquals(new int[]{1, 19}, insituLatitude.historyShape);
assertNotNull(calendar); assertEquals(1972, calendar.get(Calendar.YEAR)); assertEquals(2, calendar.get(Calendar.MONTH)); assertEquals(18, calendar.get(Calendar.DAY_OF_MONTH)); assertEquals(17, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(21, calendar.get(Calendar.MINUTE)); assertEquals(24, calendar.get(Calendar.SECOND));
assertEquals("yada yada where want_gift = TRUE and r.time = christmas", sqlApplied);
assertNotNull(netCDFWriter);
assertNotNull(centerMonth); assertEquals(createDate(2010, 5, 1, 0, 0, 0).getTime(), centerMonth.getStartDate().getTime()); assertEquals(createDate(2010, 6, 1, 0, 0, 0).getTime(), centerMonth.getStopDate().getTime());
assertEquals(0, cleanedList.size());
assertNotNull(lines); assertEquals(1, lines.size()); assertEquals("Job <1711> is submitted successfully", lines.get(0));
assertNotNull(path); assertEquals("/archive" + File.separatorChar + "mms2", path);
assertNotNull(insituSstUncertainty.historyShape); assertArrayEquals(new int[]{1, 83}, insituSstUncertainty.historyShape);
assertEquals("Length of dimension \'right\' is not configured.", expected.getMessage());
assertEquals(Level.OFF, logger.getLevel());
assertEquals("atsr", NwpTool.getSensorBasename("atsr.1")); assertEquals("atsr", NwpTool.getSensorBasename("atsr.2")); assertEquals("atsr", NwpTool.getSensorBasename("atsr.3")); assertEquals("avhrr", NwpTool.getSensorBasename("avhrr.n14")); assertEquals("avhrr", NwpTool.getSensorBasename("avhrr.m02"));
assertTrue(Amsr2ProductReaderPlugIn.isCorrectFilename(filename));
assertNotNull(result);
assertEquals(7.5, SelectionTool.variance(data), 0.0);
assertEquals(8756, ObservationFinder.getPointTime(samplingPoint, true)); assertEquals(6654, ObservationFinder.getPointTime(samplingPoint, false));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertNotNull(gridRectangle); assertEquals(0, gridRectangle.getX(), 1e-8); assertEquals(0, gridRectangle.getY(), 1e-8); assertEquals(20, gridRectangle.getWidth(), 1e-8); assertEquals(10, gridRectangle.getHeight(), 1e-8);
assertTrue(MetopReader.isChannel3a(1)); assertTrue(MetopReader.isChannel3a(17)); assertFalse(MetopReader.isChannel3a(2)); assertFalse(MetopReader.isChannel3a(128));
assertEquals(20, count);
assertEquals(3, samples.size()); assertEquals(64.5, samples.get(0).getLat(), 1e-8); assertEquals(-72.5, samples.get(1).getLat(), 1e-8); assertEquals(-62.5, samples.get(2).getLat(), 1e-8);
assertTrue(historyTimes.getDouble(range.first() - 1) < referenceTime - HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.first()) >= referenceTime - HALF_DAY_SECS); assertEquals(referenceTime, historyTimes.getDouble(range.last()), 1e-8);
assertEquals("No value for: mms.toms.key", expected.getMessage());
assertEquals(1, nearestTimeStep);
assertEquals("", ccsdsUtcFormat);
assertNotNull(globalAttributes); assertEquals(5, attributes.length); assertEquals("title", attributes[0].getName()); assertEquals("Global Aerosol - Absorbing Aerosol Index", attributes[0].getData().getElemString()); assertEquals("creation_date", attributes[3].getName()); assertEquals("Tue May 17 10:32:00 2011", attributes[3].getData().getElemString());
assertNotNull(reader); assertTrue(reader instanceof ProductReader);
assertNotNull(dateValue); assertEquals(349920000000L, dateValue.getTime());
assertNotNull(insituSST.historyShape); assertArrayEquals(new int[]{1, 84}, insituSST.historyShape);
assertEquals(1.0, reader.getScalingFactor(), 1e-8);
assertEquals(793257, samplingPoints.size());
assertEquals(2012, TimeUtil.getYear(date)); assertEquals(1998, TimeUtil.getYear(date));
assertEquals(0.185, clearSkyProbability.getSample(0.0, 0.0), 0.001); assertEquals(0.084, clearSkyProbability.getSample(20.0, 0.0), 0.001);
assertEquals(0.0, SelectionTool.variance(data), 0.0);
assertEquals(0.0, arrayGrid.getSampleDouble(19, 108), 1e-8); assertEquals(22.8, arrayGrid.getSampleDouble(19, 108), 1e-8);
assertTrue(locator.getPixelLocation(10, 20, pixelLocation)); assertEquals(0.0, pixelLocation.getX(), 1e-8); assertEquals(0.0, pixelLocation.getY(), 1e-8); assertTrue(locator.getPixelLocation(11, 21, pixelLocation)); assertEquals(1.0, pixelLocation.getX(), 1e-8); assertEquals(1.0, pixelLocation.getY(), 1e-8);
assertEquals(ProductData.TYPE_INT16, reader.getDataType());
assertTrue(locator.getPixelLocation(10, 20, pixelLocation)); assertEquals(0.0, pixelLocation.getX(), 1e-8); assertEquals(0.0, pixelLocation.getY(), 1e-8); assertTrue(locator.getPixelLocation(10, 20, pixelLocation)); assertEquals(0.0, pixelLocation.getX(), 1e-8); assertEquals(0.0, pixelLocation.getY(), 1e-8);
assertEquals(12, samplingPoint.getReference()); assertEquals(1041384411000L, samplingPoint.getReferenceTime());
assertNotNull(filteredList); assertEquals(2, filteredList.size());
assertFalse(TemplateVariables.isFiguresProperty("picture")); assertFalse(TemplateVariables.isFiguresProperty("figures.bla.scale")); assertTrue(TemplateVariables.isFiguresProperty("figures.really_a_lot"));
assertEquals(TimeUtil.parseShortUtcFormat("2010-07-01"), fileType.parseDate(file.getName())); assertEquals(TimeUtil.parseShortUtcFormat("2012-12-01"), fileType.parseDate(file1.getName())); assertEquals(TimeUtil.parseShortUtcFormat("1995-07-31"), fileType.parseDate(file2.getName())); assertEquals(TimeUtil.parseShortUtcFormat("1995-07-31"), fileType.parseDate(file3.getName()));
assertEquals(257.02, provider.getDetectorTemperature(firstDate), 0.001); assertEquals(256.95, provider.getDetectorTemperature(secondDate), 0.001); assertEquals(256.36, provider.getDetectorTemperature(thirdDate), 0.001); assertEquals(256.36, provider.getDetectorTemperature(betweenThirdAndFourthDateLow), 0.001); assertEquals(256.13, provider.getDetectorTemperature(betweenThirdAndFourthDateHigh), 0.001);
assertNotNull(variable);
assertEquals(0.0, SelectionTool.variance(data), 0.0);
assertEquals(WIDTH, width);
assertNotNull(fillValue); assertEquals(16.108, fillValue.doubleValue(), 1e-8);
assertNotNull(relevantNwpDirs); assertEquals(0, relevantNwpDirs.size());
assertEquals(257.02, provider.temperatures[0], 0.001); assertEquals(255.81, provider.temperatures[11], 0.001); assertEquals(256.18, provider.temperatures[23], 0.001); assertEquals(255.82, provider.temperatures[35], 0.001);
assertEquals("AMSRE Level 2a data products.", plugIn.getDescription(null));
assertFalse(timeRange.intersectsWith(contained));
assertEquals(0x10000L | 0x4000000000000000L, pattern);
assertEquals(0, nearestTimeStep);
assertEquals(37221, samplingPoints.size());
assertNull(reader.getBandUnit());
assertEquals(2, samples.size()); assertEquals(-78.6, samples.get(0).getLat(), 1e-8); assertEquals(-82.5, samples.get(1).getLat(), 1e-8);
assertTrue(historyTimes.getDouble(range.first()) == referenceTime); assertTrue(historyTimes.getDouble(range.last()) <= referenceTime + HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.last() + 1) > referenceTime + HALF_DAY_SECS);
assertEquals(418.8790283203125, calibrated, 1e-8);
assertEquals(2, figuresVariables.size()); assertEquals("some_valid_figure_files", figuresVariables.get("figures.cool")); assertEquals("another_set_of_figures", figuresVariables.get("figures.more"));
assertNotNull(point); assertEquals(323, point.getX()); assertEquals(171, point.getY()); assertNotNull(point); assertEquals(548, point.getX()); assertEquals(294, point.getY());
assertSame(L, rule.getRule(0)); assertSame(R, rule.getRule(1)); assertEquals("L", targetColumn.getName()); assertEquals("R", targetColumn.getLongName()); assertEquals("L", targetColumn.getRole());
assertArrayEquals(expected, actual, 1e-10);
assertEquals("71566", reader.getDatasetName());
assertTrue(timeRange.intersectsWith(containing));
assertNotNull(allColumns); assertEquals(1, allColumns.size()); assertEquals("test_me", allColumns.get(0).getName());
assertEquals(2003, utcCalendar.get(Calendar.YEAR)); assertEquals(0, utcCalendar.get(Calendar.MONTH)); assertEquals(25, utcCalendar.get(Calendar.DAY_OF_MONTH)); assertEquals(13, utcCalendar.get(Calendar.HOUR_OF_DAY)); assertEquals(49, utcCalendar.get(Calendar.MINUTE)); assertEquals(6, utcCalendar.get(Calendar.SECOND));
assertEquals(1, cleanedList.size());
assertEquals(1, listByFileId.size()); assertNotNull(fileList); assertEquals(3, fileList.size());
assertEquals(2.5, SelectionTool.variance(data), 0.0);
assertEquals("Quality indicator bit field", reader.getBandDescription());
assertEquals("ESACCI", fileType.getRdac());
assertEquals(2, subset.getRank()); assertEquals(10, subset.getIndexPrivate().getShape(1)); assertEquals(historyTimes.getDouble(s.get(0).first()), subset.getDouble(0), 0.0); assertEquals(historyTimes.getDouble(s.get(9).first()), subset.getDouble(9), 0.0);
assertNotSame(Range.EMPTY, range); assertTrue(range.first() == range.last()); assertTrue(historyTimes.getDouble(range.first()) == referenceTime - HALF_DAY_MJD);
assertEquals("the.property", TemplateVariables.getPropertyNameFromDefault("the.property.default")); assertEquals("the.property.scale", TemplateVariables.getPropertyNameFromDefault("the.property.scale")); assertEquals("the.property", TemplateVariables.getPropertyNameFromDefault("the.property"));
assertEquals(15.812, NcTools.getAddOffset(variable), 1e-8);
assertEquals("org/esa/cci/sst/tools/regavg", tool.getName());
assertNotNull(orbitLists); assertEquals(1, orbitLists.size()); assertNotNull(orbitPoints); assertEquals(1, orbitPoints.size());
assertEquals("the.value", configuration.getMandatoryStringValue("the.key", "the.default")); assertEquals("the.default", configuration.getMandatoryStringValue("no.key", "the.default"));
assertEquals(0.45, variables.getScale("figure.one"), 1e-8); assertEquals(0.56, variables.getScale("figure.second"), 1e-8);
assertEquals(14, samplingPoint.getReference2()); assertEquals(1041384411000L, samplingPoint.getReference2Time());
assertEquals(1230, targetArray.getShort(0)); assertEquals(1867, targetArray.getShort(1)); assertEquals(2989, targetArray.getShort(2)); assertEquals(5712, targetArray.getShort(3));
assertEquals(1, nearestTimeStep);
assertEquals(1, grid.getSampleInt(1, 0)); assertEquals(5, grid.getSampleInt(1, 1));
assertNotNull(ed); assertEquals(1, shape.length); assertEquals(1, shape[0]);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(0.20943951023931953, calibrator.getConversionFactor(), 1e-8);
assertNotNull(septemberSamples); assertEquals(49, septemberSamples.size()); assertEquals(151, samples.size());
assertNotNull(calendar); assertEquals(2005, calendar.get(Calendar.YEAR)); assertEquals(0, calendar.get(Calendar.MONTH)); assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH)); assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(0, calendar.get(Calendar.MINUTE)); assertEquals(0, calendar.get(Calendar.SECOND));
assertSame(L, rule.getRule(0)); assertSame(R, rule.getRule(1)); assertEquals("R", targetColumn.getName()); assertEquals("R", targetColumn.getLongName()); assertEquals("L", targetColumn.getRole());
assertEquals(-55.6, MetopReader.computeAda(123.5, 67.9), 1e-8); assertEquals(-10.1, MetopReader.computeAda(-172.5, 177.4), 1e-8); assertEquals(7.7, MetopReader.computeAda(175.2, -177.1), 1e-8);
assertEquals(0.0, separations.dt()); assertEquals(0.0, separations.dt());
assertEquals("MMD_METOP02.inp", GbcsTool.getConfigurationFilename("avhrr.m02"));
assertEquals(25920000, gridDef.getWidth() * gridDef.getHeight() * gridDef.getTime()); assertEquals(0.05, gridDef.getResolution());
assertEquals(0, cleanedList.size());
assertEquals("${yeah}", AssessmentTool.makeWordVariable("yeah")); assertEquals("${Oh.yeah}", AssessmentTool.makeWordVariable("Oh.yeah"));
assertNotNull(item); assertNotNull(item); assertNotNull(item);
assertTrue(timeRange.includes(date.getTime())); assertFalse(timeRange.includes(date.getTime())); assertTrue(timeRange.includes(date.getTime())); assertFalse(timeRange.includes(date.getTime())); assertTrue(timeRange.includes(date.getTime())); assertFalse(timeRange.includes(date.getTime()));
assertNull(condition);
assertEquals(".", tool.getToolHome());
assertNotNull(parameter); assertEquals("another_condition", parameter.getCondition()); assertEquals(264, parameter.getPattern());
assertNull(cache.add(19, 22.089)); assertNull(cache.add(-6, 107.543));
assertNotNull(namesFromStorage);
assertEquals(testTime.getTime(), date.getTime()); assertEquals(testTime.getTime(), date.getTime()); assertEquals(testTime.getTime(), date.getTime());
assertEquals("Cannot parse length of dimension \'down\'.", expected.getMessage());
assertNotNull(filteredList); assertEquals(1, filteredList.size());
assertEquals(2, listByFileId.size()); assertNotNull(fileList); assertEquals(2, fileList.size()); assertNotNull(fileList); assertEquals(3, fileList.size());
assertEquals(2 * 365 * 24 * 60 * 60 + 366 * 24 * 60 * 60 + 333849750, provider.startTime); assertEquals(300, provider.step); assertEquals(36, provider.temperatures.length);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(1142899200000L, date.getTime()); assertEquals(1142985600000L, date.getTime());
assertNotNull(timeRange);
assertNotSame(Range.EMPTY, range); assertTrue(range.first() == range.last()); assertTrue(historyTimes.getDouble(range.first()) == referenceTime - HALF_DAY_SECS);
assertNull(reader.getGeoCoding(34));
assertEquals(0.0, NcTools.getAddOffset(variable), 1e-8);
assertNotNull(reader); assertTrue(reader instanceof ProductReader);
assertEquals("Configuration error: stop is before start", expected.getMessage());
assertEquals("quality_indicator_flags", reader.getBandName());
assertNotNull(relevantNwpDirs); assertEquals(6, relevantNwpDirs.size()); assertEquals("1981/09/28", relevantNwpDirs.get(0)); assertEquals("1981/10/01", relevantNwpDirs.get(3)); assertEquals("1981/10/03", relevantNwpDirs.get(5));
assertTrue("lat=" + point.getY() + " lon=" + point.getX(), polygon.isPointInPolygon(point.getY(), point.getX())); assertFalse("lat=" + point.getY() + " lon=" + point.getX(), polygon.isPointInPolygon(point.getY(), point.getX()));
assertEquals(4, nameArray.length); assertEquals("Franz", nameArray[0]); assertEquals("Kevin", nameArray[1]); assertEquals("Walpurga", nameArray[2]); assertEquals("Zenzi", nameArray[3]);
assertTrue(Amsr2ProductReaderPlugIn.isCorrectFilename(filename));
assertFalse(TemplateVariables.isParagraphProperty("image.some")); assertFalse(TemplateVariables.isParagraphProperty("word.written")); assertTrue(TemplateVariables.isParagraphProperty("paragraph.really")); assertTrue(TemplateVariables.isParagraphProperty("comment.really"));
assertNull(observation);
assertEquals(Level.ALL, logger.getLevel());
assertEquals(0x01020304, ints[0]);
assertEquals("orbitMatches", expectedMatches, orbitMatches);
assertNotNull(dimensionNames); assertEquals(5, dimensionNames.size()); assertThat(dimensionNames, hasItem("left")); assertThat(dimensionNames, hasItem("b"));
assertEquals("2005-02-17T04:46:34", AmsreProductReader.assembleUTCString(dateString, timeString));
assertEquals(0, matchupCount);
assertNull(value);
assertEquals(2, samplingPoints.size());
assertEquals(10, samplingPoints.size());
assertEquals("holla.scale", TemplateVariables.createScaleName("holla")); assertEquals("figure.thing.scale", TemplateVariables.createScaleName("figure.thing"));
assertEquals("2012-11-23T20:46:13Z", ccsdsUtcFormat);
assertEquals(1, listByFileId.size()); assertNotNull(fileList); assertEquals(2, fileList.size());
assertNotNull(path); assertEquals("/archive", path);
assertEquals(1285, samplingPoints.size());
assertEquals(1038697419.029, TimeUtil.dateToSecondsSinceEpoch(calendar.getTime()), 1e-8);
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset());
assertEquals(57.518901151911436, sup.eta(14, 156), 1e-8); assertEquals(75.415430917505, sup.eta(16, 209), 1e-8);
assertEquals(1, NwpTool.calculateStride(108, 0)); assertEquals(1, NwpTool.calculateStride(108, 1)); assertEquals(107, NwpTool.calculateStride(108, 2)); assertEquals(53, NwpTool.calculateStride(108, 3)); assertEquals(200, NwpTool.calculateStride(201, 2)); assertEquals(149, NwpTool.calculateStride(300, 3));
assertNotNull(dimensionConfiguration); assertNotNull(upwards); assertEquals(72, upwards.intValue());
assertSame(Range.EMPTY, range);
assertEquals(22, count);
assertEquals(533, samples.size());
assertNotNull(filteredList); assertEquals(3, filteredList.size());
assertNotNull(byOrbit); assertEquals(2, byOrbit.size()); assertNotNull(orbitPoints); assertEquals(3, orbitPoints.size()); assertNotNull(orbitPoints); assertEquals(2, orbitPoints.size());
assertNotNull(storedObservations); assertEquals(1, storedObservations.size());
assertTrue(targetArray.getElementType() == float.class); assertEquals(10.5f, targetArray.getFloat(0), 0.0f); assertEquals(14.5f, targetArray.getFloat(1), 0.0f);
assertTrue(timeRange.intersectsWith(contained));
assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(1, offset.getAlongTrackOffset());
assertEquals(25, samplingPoints.size());
assertEquals("calibration_quality_ch3_flags", reader.getBandName());
assertNotNull(toolStorageObservation); assertEquals(name, toolStorageObservation.getName());
assertNotNull(reader); assertTrue(reader instanceof NcAvhrrGacProductReader);
assertNull(configuration.getOptionalStringValue("optional.key")); assertEquals("optional.value", configuration.getOptionalStringValue("optional.key"));
assertNotNull(matchups); assertEquals(1, matchups.size()); assertEquals(13, matchups.get(0).getId());
assertSame(response, DEFAULT_VALUE);
assertEquals(serviceSelector.selectAllServices(), ImmutableList.of());
assertThat(store.get("foo")).isNull(); assertThat(store.getAll()).isEmpty();
assertEquals(table.cellSet(), ImmutableTable.<String, Map<String, String>, Object>builder() .put("ReportCollector.ServerStart", EXPECTED_VERSION_TAGS, 1) .build() .cellSet());
assertEquals(stringCaptor.getValue(), "NoParameters.Add"); assertEquals(tagCaptor.getValue(), ImmutableMap.of()); assertNotNull(reportCaptor.getValue()); assertNotNull(noParameters.add());
assertEquals(e.getCause().getMessage(), "Announcement failed");
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertEquals(response.getName(), user.getName()); assertEquals(response.getAge(), user.getAge());
assertSame(response, DEFAULT_VALUE);
assertEquals(HeaderName.of("FOO").toString(), "FOO"); assertEquals(HeaderName.of("foo").toString(), "foo");
assertTrue(handler.isEmpty());
assertSame(response, DEFAULT_VALUE);
assertEquals(e.getMessage(), "Response does not contain a JSON value"); assertEquals(e.getCause(), response.getException()); assertEquals(response.getJsonBytes(), json.getBytes(StandardCharsets.UTF_8)); assertEquals(response.getJson(), json); assertEquals(response.getResponseBytes(), response.getJsonBytes()); assertEquals(response.getResponseBody(), response.getJson());
assertEquals(uri.toASCIIString(), "?k1=1&k1=2&k1=0&k2=3");
assertTrue(logFile1.exists()); assertTrue(logFile2.exists()); assertFalse(tempLogFile1.exists()); assertFalse(tempLogFile2.exists()); assertTrue(new File(tempDir, "temp1.log").exists()); assertTrue(new File(tempDir, "temp2.log").exists());
assertSame(unwrapCompletionException(original), original); assertSame(unwrapCompletionException(new CompletionException(original)), original); assertSame(unwrapCompletionException(completion), completion);
assertTrue(latch.await(10, SECONDS)); assertEquals(actualToken.get(), token);
assertEquals(sentJson, ImmutableList.of( ImmutableMap.of( "name", "Foo.String", "timestamp", TEST_TIME, "type", "string", "value", "test value", "tags", ImmutableMap.of( "application", "test-application", "host", "test.hostname", "environment", "test_environment", "pool", "test_pool" ) ) ));
assertTrue(Uninterruptibles.awaitUninterruptibly(initializeLatch, 1, TimeUnit.MINUTES)); assertTrue(Uninterruptibles.awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)); assertEquals(counter.get(), totalTasks);
assertEquals(new DataSize(value, unit).toString(), expectedString);
assertNotNull(new Announcement("environment", "node", "pool", "location", ImmutableSet.of( serviceAnnouncement("foo") .addProperty("http", "http: .addProperty("jmx", "jmx: .build()) ));
assertTrue(toFuture.isCancelled()); assertTrue(toFuture.checkWasInterrupted()); assertTrue(toFuture.isCancelled()); assertTrue(toFuture.checkWasInterrupted());
assertNull(shutdownMonitor.getShutdownState());
assertEquals(new ClientAddressExtractor().clientAddressFor(request), isPrivate ? "4.4.4.4" : address); assertEquals(new ClientAddressExtractor(new InternalNetworkConfig()).clientAddressFor(request), isPrivate ? "4.4.4.4" : address); assertEquals(extractor.clientAddressFor(request), "4.4.4.4");
assertEquals(e.getReason(), Reason.INSTANCE_NOT_FOUND); assertEquals(e.getMessage(), "com.proofpoint.reporting:name=TestingObject not found");
assertTrue(handler.isEmpty());
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertNull(getFutureValue(future)); assertEquals(tryGetFutureValue(new CompletableFuture<>()), Optional.empty());
assertEquals(in.read(buffer, 0, expectedPartial.length), expectedPartial.length); assertEquals(in.read(buffer, expectedPartial.length, buffer.length - expectedPartial.length), expectedAll.length - expectedPartial.length); assertEquals(-1, in.read(buffer, 0, expectedAll.length));
assertNull(attributeInfo, "AttributeInfo for " + attributeName);
assertEquals(digest.getCount(), (double) values.size());
assertNotNull(reportCaptor.getValue()); assertNotNull(noParameters.add());
assertTrue(handler.isEmpty());
assertEquals(ServiceTypes.serviceType("apple").annotationType(), ServiceType.class); assertEquals(ServiceTypes.serviceType("apple").annotationType(), appleServiceType.annotationType());
assertTrue(future.isDone()); assertFalse(future.isCompletedExceptionally()); assertFalse(future.isCancelled()); assertEquals(future.join(), ImmutableList.of());
assertTrue(a.equivalent(b));
assertTrue(logger.isDebugEnabled()); assertTrue(logger.isDebugEnabled()); assertTrue(logger.isDebugEnabled()); assertFalse(logger.isDebugEnabled()); assertFalse(logger.isDebugEnabled()); assertFalse(logger.isDebugEnabled());
assertEquals(e.getResponse().getStatus(), 401);
assertEquals(allTime.getCount(), 0.0); assertEquals(allTime.getTotal(), 0.0); assertEquals(allTime.getMin(), Double.NaN); assertEquals(allTime.getMax(), Double.NaN); assertEquals(allTime.getP50(), Double.NaN); assertEquals(allTime.getP75(), Double.NaN); assertEquals(allTime.getP90(), Double.NaN); assertEquals(allTime.getP99(), Double.NaN);
assertEquals(response.getName(), user.getName()); assertEquals(response.getAge(), user.getAge());
assertEquals(stringCaptor.getValue(), "KeyedDistribution.Add"); assertEquals(tagCaptor.getValue(), ImmutableMap.of("foo", "value", "bar", "false")); assertSame(reportCaptor.getValue(), someObject);
assertTrue(handler.isEmpty());
assertEquals(registry.getReportedBeans(), ImmutableList.of(registrationInfo(TESTING_REPORTED_BEAN, false, "TestingObject", TESTING_TAGS)));
assertNull(getCurrentRequestToken()); assertNull(getCurrentTraceToken()); assertEquals(currentThread().getName(), "testing thread name");
assertEquals(digest.getCount(), 15.0);
assertSame(balancingHttpClient.getStats(), requestStats);
assertEquals(e.getMessage(), "Error reading response from server"); assertSame(e.getCause(), expectedException);
assertEquals(e.getMessage(), "Response does not contain a SMILE value"); assertSame(e.getCause(), response.getException());
assertEquals(e.getReason(), Reason.INSTANCE_ALREADY_EXISTS); assertEquals(e.getMessage(), "com.proofpoint.reporting:name=TestingObject is already registered");
assertTrue(response.hasValue()); assertNull(response.getValue().getName()); assertEquals(response.getValue().getAge(), 0);
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertThat(store.get("foo")).isEqualTo(createPerson("foo@example.com", "Mr Foo")); assertThat(store.getAll()).hasSize(1);
assertFalse(a.equivalent(b));
assertNull(filter.filterRequest(publicResourceRequest).getHeader(AUTHORIZATION)); assertEquals(filter.filterRequest(privateResourceRequest).getHeader(AUTHORIZATION), "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
assertEquals(ServiceTypes.serviceType("type").value(), "type");
assertFalse(response.hasValue()); assertNull(response.getException()); assertTrue(response.getHeaders().isEmpty());
assertEquals(servlet.lastPath, "/v2/event"); assertEquals(new ObjectMapper().readValue(servlet.lastBody, Object.class), TestingUtils.getExpectedJson(), "JSON encoding " + servlet.lastBody);
assertEquals(e.getResponse().getStatus(), 401);
assertFalse(response.hasValue()); assertNull(response.getException()); assertNull(response.getJson()); assertNull(response.getJsonBytes()); assertEquals(response.getResponseBytes(), "hello".getBytes(StandardCharsets.UTF_8)); assertEquals(response.getResponseBody(), "hello");
assertEquals(digest.getCount(), (double) values.size());
assertFalse(future.isDone()); assertFalse(unmodifiableFuture.isDone()); assertFalse(future.isDone()); assertFalse(unmodifiableFuture.isDone()); assertFalse(future.isDone()); assertFalse(unmodifiableFuture.isDone()); assertFalse(future.isDone()); assertFalse(unmodifiableFuture.isDone());
assertEquals(e.getResponse().getStatus(), 403);
assertTrue(handler.isEmpty());
assertNotNull(attributeInfo, "AttributeInfo for " + attributeName); assertEquals(attributeInfo.getName(), attributeName, "Attribute Name for " + attributeName);
assertEquals(e.getMessage(), "Error reading JSON response from server"); assertSame(e.getCause(), expectedException);
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "10.14.15.16");
assertTrue(future1.isCancelled()); assertTrue(future3.isCancelled()); assertEquals( tryGetFutureValue(whenAnyComplete(ImmutableList.of(SettableFuture.create(), SettableFuture.create())), 10, MILLISECONDS), Optional.empty());
assertFalse(future.isDone()); assertFalse(future.isCancelled()); assertFalse(future.isDone()); assertFalse(future.isCompletedExceptionally()); assertFalse(future.isCancelled()); assertTrue(future.isDone()); assertFalse(future.isCompletedExceptionally()); assertFalse(future.isCancelled()); assertEquals(future.join(), ImmutableList.of("a", "b"));
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertSame(reportCaptor.getValue(), someObject);
assertSame(reportCaptor.getValue(), someObject);
assertEquals(new DataSize(value, unit).toString(), expectedString);
assertEquals(in.read(), expected[0] & 0x000000ff); assertEquals(in.read(), -1);
assertEquals(actual, "{\\"time\\":\\"" + ISO_INSTANT.format(dateTimeSupplier.get()) + "\\"," + "\\"type\\":\\"com.proofpoint.audit.TestFileAuditLogger.TestingRecord\\"," + "\\"traceToken\\":{\\"id\\":\\"" + TraceTokenManager.getCurrentTraceToken().get("id") + "\\",\\"property\\":\\"value\\"}," + "\\"foo\\":\\"foovalue\\"}\\n");
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "2.2.2.2");
assertEquals(new ObjectMapper().readValue(json, Object.class), expectedEventJson, "JSON encoding " + json);
assertEquals(response.getName(), "Joe"); assertEquals(response.getAge(), 25);
assertEquals(getDone(immediateFuture("Alice")), "Alice");
assertEquals(serviceSelector.selectAllServices(), ImmutableList.of());
assertEquals(sentJson.size(), 2); assertEquals(map.keySet(), ImmutableSet.of("name", "timestamp", "value", "tags")); assertEquals(tags.get("foo"), "ba:r"); assertEquals(tags.get("baz"), "quux"); assertEquals(tags.keySet(), ImmutableSet.of("application", "environment", "pool", "foo", "baz", "tag1")); assertEquals(tags.keySet(), ImmutableSet.of("application", "environment", "pool", "foo", "baz"));
assertFalse(response.hasValue()); assertNull(response.getException()); assertNull(response.getJson()); assertNull(response.getJsonBytes()); assertEquals(response.getResponseBytes(), "hello".getBytes(StandardCharsets.UTF_8)); assertEquals(response.getResponseBody(), "hello"); assertTrue(response.getHeaders().isEmpty());
assertThat(store.getAll()).isEmpty();
assertEquals(cache.get("abc"), "abc0"); assertEquals(cache.get("abc"), "abc0"); assertEquals(cache.get("def"), "def1"); assertEquals(cache.get("abc"), "abc0"); assertEquals(cache.get("ghi"), "ghi2"); assertEquals(cache.get("abc"), "abc3");
assertEquals(servlet.lastPath, "/v2/event");
assertTrue(a.equivalent(b));
assertEquals(toFuture.get(), "abc"); assertTrue(fromFuture.isCancelled()); assertFalse(fromFuture.checkWasInterrupted()); assertTrue(fromFuture.isCancelled()); assertTrue(fromFuture.checkWasInterrupted());
assertEquals(stringCaptor.getValue(), "KeyedDistribution.Add"); assertEquals(tagCaptor.getValue(), ImmutableMap.of("bar", "false")); assertSame(reportCaptor.getValue(), someObject);
assertTrue(future.isCompletedExceptionally()); assertTrue(e.getCause() instanceof SQLException); assertEquals(e.getCause().getMessage(), "foo");
assertEquals(e.getResponse().getStatus(), 401);
assertEquals(e.getReason(), Reason.INSTANCE_NOT_FOUND); assertEquals(e.getMessage(), "Testing Object not found");
assertEquals(e.getReason(), Reason.INSTANCE_ALREADY_EXISTS); assertEquals(e.getMessage(), "Testing Object is already registered");
assertEquals(duration, new Duration(75, TimeUnit.SECONDS));
assertTrue(future.complete("done")); assertEquals(future.getNow(null), "done"); assertTrue(unmodifiableFuture.isDone()); assertEquals(unmodifiableFuture.getNow(null), "done");
assertEquals(stringCaptor.getValue(), "OptionalKeyedDistribution.Add"); assertEquals(tagCaptor.getValue(), ImmutableMap.of("bar", "false")); assertSame(reportCaptor.getValue(), someObject);
assertEquals(e.getCause().getCause(), testingException); assertEquals(e.getCause().getMessage(), "Lookup of testService failed");
assertFalse(response.hasValue()); assertNull(response.getException());
assertFalse(response.hasValue()); assertEquals(response.getException().getMessage(), format("Unable to create %s from JSON response:\\n[%s]", User.class, json)); assertEquals(response.getException().getCause().getMessage(), "Invalid JSON bytes for [simple type, class com.proofpoint.http.client.TestFullJsonResponseHandler$User]"); assertEquals(response.getJson(), json); assertEquals(response.getResponseBytes(), response.getJsonBytes()); assertEquals(response.getResponseBody(), response.getJson());
assertEquals(new Duration(value, unit).toString(), expectedString);
assertThat(entries).hasSize(2); assertThat(entries) .filteredOn("id", "foo") .extracting("person") .containsExactly(createPerson("foo@example.com", "Mr Foo")); assertThat(entries) .filteredOn("id", "bar") .extracting("person") .containsExactly(createPerson("bar@example.com", "Mr Bar"));
assertEquals(bucketId.getId(), 0); assertEquals(bucketId.getId(), 0);
assertEquals(e.getReason(), Reason.INSTANCE_NOT_FOUND); assertEquals(e.getMessage(), "com.proofpoint.reporting:name=TestingObject not found");
assertThat(actual).isEqualTo(new DataSize(1, unit)); assertThat(actual.getValue(unit)).isCloseTo(1.0, offset(0.001)); assertThat(actual.getUnit()).isEqualTo(unit);
assertEquals(size.getUnit(), expectedUnit); assertEquals(size.getValue(), expectedValue);
assertEquals(e.getMessage(), "Error reading SMILE response from server"); assertSame(e.getCause(), expectedException);
assertFalse(future.isDone()); assertFalse(future.isCompletedExceptionally()); assertFalse(future.isCancelled()); assertTrue(future.isDone()); assertTrue(future.isCompletedExceptionally()); assertFalse(future.isCancelled());
assertEquals(e.getResponse().getStatus(), 401);
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "10.14.15.16");
assertEquals(e.getResponse().getStatus(), 401);
assertEquals(digest.getCount(), (double) 11);
assertEquals(stateLog, ImmutableList.of("InstanceThatUsesInstanceThatRequiresStart:OK"));
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "4.4.4.4");
assertEquals(new ObjectMapper().readValue(json, Object.class), expectedEventJson, "JSON encoding " + json);
assertEquals(e.getResponse().getStatus(), 403);
assertTrue(response.hasValue()); assertEquals(response.getJson(), json); assertEquals(response.getJsonBytes(), json.getBytes(StandardCharsets.UTF_8)); assertNull(response.getValue().getName()); assertEquals(response.getValue().getAge(), 0); assertEquals(response.getResponseBytes(), response.getJsonBytes()); assertEquals(response.getResponseBody(), response.getJson());
assertEquals(request.getMethod(), "PUT"); assertEquals(request.getUri(), URI.create("v1/announcement/" + nodeInfo.getNodeId())); assertEquals(request.getHeader("User-Agent"), nodeInfo.getNodeId()); assertEquals(request.getHeader("Content-Type"), "application/json"); assertEquals(duration, new Duration(10, TimeUnit.SECONDS)); assertEquals(httpClient.getRequestCount(), 1);
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertTrue(latch.await(10, SECONDS)); assertEquals(actualToken.get(), token); assertEquals(future.get(), expectedReturn);
assertEquals(e.getMessage(), "Error reading SMILE response from server"); assertSame(e.getCause(), expectedException);
assertEquals(e.getReason(), Reason.MALFORMED_OBJECT_NAME); assertEquals(e.getMessage(), "Key properties cannot be empty");
assertFalse(future.isDone()); assertFalse(future.isCancelled()); assertTrue(future.isDone()); assertTrue(future.isCompletedExceptionally()); assertFalse(future.isCancelled());
assertEquals(duration.getUnit(), expectedUnit); assertEquals(duration.getValue(), expectedValue);
assertEquals(actual, expected);
assertEquals(parsed, expected);
assertEquals(in.read(actual, 0, firstPartLength), firstPartLength); assertEquals(in.skip(skipped), skipped); assertEquals(in.read(actual, firstPartLength, restPartLength + 10), restPartLength); assertEquals(in.skip(10), 0); assertEquals(in.read(), -1);
assertThat(personRepresentation.toPerson()).isEqualTo(createPerson("foo@example.com", "Mr Foo"));
assertEquals(in.read(), -1);
assertTrue(future.isDone()); assertFalse(future.isCancelled()); assertFalse(future.checkWasInterrupted());
assertFalse(response.hasValue()); assertEquals(response.getException().getMessage(), "Unable to create " + User.class + " from SMILE response");
assertNotNull(reportCaptor.getValue()); assertNotNull(noParameters.add());
assertEquals(e.getMessage(), format("Unable to create %s from JSON response:\\n[%s]", User.class, json)); assertEquals(e.getCause().getMessage(), "Invalid JSON bytes for [simple type, class com.proofpoint.http.client.TestFullJsonResponseHandler$User]");
assertEquals(serviceSelector.selectAllServices(), ImmutableList.of());
assertEquals(ServiceTypes.serviceType("type").value(), "type");
assertFalse(future.isDone()); assertFalse(future.isCancelled()); assertTrue(future.isDone()); assertFalse(future.isCompletedExceptionally()); assertFalse(future.isCancelled()); assertEquals(future.join(), ImmutableList.of("a"));
assertEquals(response.getStatusCode(), Status.OK.getStatusCode(), "Status code"); assertNull(response.getHeader("Host"));
assertEquals(e.getMessage(), "Unable to create " + User.class + " from SMILE response");
assertSame(reportCaptor.getValue(), someObject);
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "9.9.9.9");
assertEquals(request.getMethod(), "DELETE"); assertEquals(request.getUri(), URI.create("v1/announcement/" + nodeInfo.getNodeId())); assertEquals(request.getHeader("User-Agent"), nodeInfo.getNodeId()); assertEquals(duration, new Duration(10, TimeUnit.SECONDS)); assertEquals(httpClient.getRequestCount(), 1);
assertSame(response, DEFAULT_VALUE);
assertEquals(JavaVersion.parse("9-ea+19"), new JavaVersion(9, 0)); assertEquals(JavaVersion.parse("9+100"), new JavaVersion(9, 0)); assertEquals(JavaVersion.parse("9.0.1+20"), new JavaVersion(9, 0)); assertEquals(JavaVersion.parse("9.1.1+20"), new JavaVersion(9, 1));
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "3.3.3.3");
assertTrue(handler.isEmpty());
assertNull(servlet.lastPath); assertNull(servlet.lastBody);
assertThat(frequencyOfUri(uriLowWeight)).isBetween(25.0, 40.0); assertThat(frequencyOfUri(uriLowWeight)).isBetween(45.0, 55.0); assertThat(frequencyOfUri(uriLowWeight)).isEqualTo(100.0); assertThat(frequencyOfUri(uriLowWeight)).isBetween(20.0, 30.0);
assertNotNull(new ServiceDescriptor(UUID.fromString("12345678-1234-1234-1234-123456789012"), "node", "type", "pool", "location", ServiceState.RUNNING, ImmutableMap.of("a", "apple", "b", "banana")));
assertEquals(e.getReason(), Reason.INSTANCE_ALREADY_EXISTS); assertEquals(e.getMessage(), "com.proofpoint.reporting:name=TestingObject is already registered");
assertTrue(toFuture.isCancelled()); assertFalse(toFuture.checkWasInterrupted()); assertTrue(toFuture.isCancelled()); assertFalse(toFuture.checkWasInterrupted());
assertNotNull(serviceAnnouncement("foo").build());
assertSame(response, DEFAULT_VALUE);
assertEquals(toFuture.get(), "abc"); assertTrue(fromFuture.isCancelled()); assertFalse(fromFuture.checkWasInterrupted()); assertTrue(fromFuture.isCancelled()); assertTrue(fromFuture.checkWasInterrupted());
assertSame(e.getCause().getCause(), testingException); assertEquals(e.getCause().getMessage(), "Lookup of testService failed");
assertTrue(handler.isEmpty());
assertNotNull(reportCaptor.getValue()); assertNotNull(noParameters.add());
assertTrue(handler.isEmpty());
assertEquals(registry.getReportedBeans(), ImmutableList.of());
assertTrue(future.isDone()); assertFalse(future.isCancelled()); assertFalse(future.checkWasInterrupted()); assertEquals(future.get(), "abc");
assertEquals( tryGetFutureValue(whenAnyComplete(ImmutableList.of(SettableFuture.create(), SettableFuture.create())), 10, MILLISECONDS), Optional.empty());
assertEquals(ServiceTypes.serviceType("apple").annotationType(), ServiceType.class); assertEquals(ServiceTypes.serviceType("apple").annotationType(), appleServiceType.annotationType());
assertEquals(request.getMethod(), "DELETE"); assertEquals(request.getUri(), URI.create("v1/announcement/" + nodeInfo.getNodeId())); assertEquals(request.getHeader("User-Agent"), nodeInfo.getNodeId()); assertEquals(httpClient.getRequestCount(), 1);
assertEquals(new Duration(value, unit).toString(), expectedString);
assertEquals(e.getResponse().getStatus(), 401);
assertEquals(e.getReason(), Reason.MALFORMED_OBJECT_NAME); assertEquals(e.getMessage(), "Key properties cannot be empty");
assertEquals(servlet.lastPath, "/v2/event"); assertEquals(new ObjectMapper().readValue(servlet.lastBody, Object.class), TestingUtils.getExpectedJson(), "JSON encoding " + servlet.lastBody);
assertEquals(new ClientAddressExtractor().clientAddressFor(request), "10.11.12.13");
assertTrue(response.hasValue()); assertEquals(response.getValue().getName(), "Joe"); assertEquals(response.getValue().getAge(), 25);
assertEquals(new Duration(12359.0d, MILLISECONDS), new Duration(12359.0d, MILLISECONDS)); assertFalse(new Duration(12359.0d, MILLISECONDS).equals(new Duration(4444.0d, MILLISECONDS)));
assertSame(response, DEFAULT_VALUE);
assertEquals(future.getNow(null), "done"); assertTrue(unmodifiableFuture.isDone()); assertEquals(unmodifiableFuture.getNow(null), "done");
assertNull(e.getCause().getCause()); assertEquals(e.getCause().getMessage(), "Lookup of testService failed with status code 304");
assertEquals(bucketId.getId(), 0, "initial state"); assertEquals(bucketId.getId(), 0, "before minute boundary"); assertEquals(bucketId.getId(), 1, "on minute boundary");
assertEquals(new Duration(12359.0d, MILLISECONDS).hashCode(), new Duration(12359.0d, MILLISECONDS).hashCode()); assertFalse(new Duration(12359.0d, MILLISECONDS).hashCode() == new Duration(4444.0d, MILLISECONDS).hashCode());
assertNull(e.getCause().getCause()); assertEquals(e.getCause().getMessage(), "Expected environment to be testingenvironment, but was wrongenvironment");
assertEquals(actual, "{\\"time\\":\\"" + ISO_INSTANT.format(dateTimeSupplier.get()) + "\\"," + "\\"type\\":\\"com.proofpoint.audit.TestFileAuditLogger.TestingRecord\\",\\"foo\\":\\"foovalue\\"}\\n");
assertEquals(t.leftValue(),"unexpected Type Script Identifier\'error\' at pos 11 of expression List <T -> error");
assertEquals(x.typeParameters(), Arrays.asList("K","V")); assertEquals(x.getJavaType(),"java.util.Map"); assertTrue(x.isReferenceType()); assertEquals(x.typeParameterTypes(), new HashMap<>());
assertEquals("unknown",testee.processModuleName(this.executableElement, this.annotationValue)); assertEquals("unknown",testee.processModuleName(this.executableElement, this.annotationValue));
assertEquals(snsm.mapNameSpace("a.b"),""); assertEquals(snsm.mapNameSpace("a.b.c"),"c"); assertEquals(snsm.mapNameSpace("a.d"),"a.d"); assertEquals(snsm.mapNameSpace(""),"");
assertEquals(x,x);
assertEquals( Collections.singletonList(NameSpaceMappingBuilder.of("a.b", "")), new TopLevelNameSpaceMapperCalculator().computeNameSpaceMapping(createDataSet("a.b.X", "a.b.Y")) );
assertEquals(NameSpaceMappingStrategy.MANUAL, testee.convertNameSpaceMappingStrategy(this.annotationValue));
assertNull(testee.mapMemberName(null));
assertEquals(declaredTypeToTypeElement(null), Optional.empty()); assertEquals(declaredTypeToTypeElement(mockedType), Optional.empty());
assertEquals("a,b",lastOf("a,b",(String[]) null)); assertEquals("a,b",lastOf("a,b","")); assertEquals("b",lastOf("a,b",",")); assertEquals("a,b",lastOf("a,b",(String) null)); assertEquals("", lastOf("a.")); assertEquals("a",lastOf(".a")); assertEquals("", lastOf(null));
assertEquals( new ArrayList<>(), new TopLevelNameSpaceMapperCalculator().computeNameSpaceMapping(createDataSet("a.b.X", "a.c.X")) );
assertFalse(isPackageFriendly(null));
assertNull(testee.mapMemberName(null));
assertEquals("",testee.asString(annotationValue)); assertEquals("",testee.asString(annotationValue));
assertEquals("abc-abc",camelCaseToDash("abcAbc"));
assertEquals(t.leftValue(),"backtick only allowed RHS for Type Variables\'`\' at pos 4 of expression List` -> error");
assertEquals("",withoutTypeArgs(null)); assertEquals("a",withoutTypeArgs("a<b>")); assertEquals("a",withoutTypeArgs("a<b<c>>"));
assertEquals(x.typeParameters(), Collections.singletonList("T")); assertEquals(x.getJavaType(),"java.util.List"); assertTrue(x.isReferenceType()); assertEquals(x.typeParameterTypes(), new HashMap<>());
assertEquals("", arrayFormat("", new Object[]{"a"})); assertEquals("", arrayFormat(null, new Object[]{"a"})); assertEquals("", arrayFormat("{}", new Object[]{""})); assertEquals("?", arrayFormat("{}", null)); assertEquals("null", arrayFormat("{}", new Object[]{null, null}));
assertEquals("",notEmptytrimmed(null));
assertEquals(t.leftValue(),"closing angle bracket without opening\'>\' at pos 5 of expression List >T -> error");
assertEquals(t.leftValue(),"Invalid token \'0List <T> -> error<U,V>\' at pos 0 of expression 0List <T> -> error<U,V>");
assertEquals("AbCd", dotToUpperCamelCase("ab.cd")); assertEquals("Ab", dotToUpperCamelCase("ab")); assertEquals("ABCD", dotToUpperCamelCase("a.b.c.d"));
assertNull(testee.visitType(this.typeElement,null));
assertEquals(Optional.empty(), teste.convertJavaType(this.elementMock));
assertEquals(OutputType.MODULE, testee.convertOutputType(this.annotationValue));
assertEquals(RegExHelper.compileToPattern(""), Optional.empty()); assertEquals(RegExHelper.compileToPattern(null), Optional.empty()); assertEquals(RegExHelper.compileToPattern("["), Optional.empty()); assertEquals(RegExHelper.compileToPattern("abc\\\\s+").map(Pattern::pattern), Optional.of(Pattern.compile("abc\\\\s+")).map(Pattern::pattern));
assertNull(testee.mapMemberName(null));
assertEquals(NameMappingStrategy.SIMPLE, testee.convertNameMappingStrategy(this.annotationValue));
assertEquals(testee, x2); assertEquals(testee, x1);
assertNull(testee.mapMemberName(null));
assertEquals("unknown",testee.processModuleName(this.executableElement, this.annotationValue));
assertEquals(Optional.empty(), testee.convertJavaType(null));
assertEquals(x.typeParameters(), Collections.singletonList("T")); assertEquals(x.getJavaType(),"java.util.Collection"); assertTrue(x.isReferenceType()); assertEquals(x.typeParameterTypes(), new HashMap<>());
assertEquals(Optional.empty(),StringUtils.splitIntoTwo(null)); assertEquals(Optional.empty(),StringUtils.splitIntoTwo("")); assertEquals(Optional.empty(),StringUtils.splitIntoTwo("->->")); assertEquals(Optional.of(new Tuple<>("a", "b")),StringUtils.splitIntoTwo("a->b"));
assertEquals("",dotToDash("")); assertEquals("a-b",dotToDash("a.b")); assertEquals("a-b-c",dotToDash("a.b.c"));
assertTrue(isPackageFriendly("a.b")); assertTrue(isPackageFriendly("a")); assertTrue(isPackageFriendly("a.b.c")); assertFalse(isPackageFriendly("a-b.c")); assertFalse(isPackageFriendly("0a.b.c"));
assertEquals("1,2,3", arrayFormat("{}", new Object[]{ Arrays.asList(1, 2, 3) } ));
assertNull(testee.convertOutputType(null)); assertNull(testee.convertOutputType(this.annotationValue)); assertNull(testee.convertOutputType(this.annotationValue));
assertEquals(countMatches("a.b.c"),2); assertEquals(countMatches("a"),0); assertEquals(countMatches(""),0); assertEquals(countMatches(null),0);
assertEquals(t.value().toString(),"TypeMappingExpression{typeVariables=[T], names=[List], tsExpressionElements=[TSMappedTerminal{value=List}, TSMappedTypeContainer{expressions=[TSMappedTerminal{value=<}, TSMappedTypeVar{value=T}, TSMappedTerminal{value=>}], value=<T>}], conversionCoverage=SUBTYPES}");
assertEquals(new Tuple<>("a", "b").hashCode(),new Tuple<>("a", "b").hashCode()); assertNotEquals(new Tuple<>("a", "b").hashCode(),new Tuple<>("a", "c").hashCode());
assertEquals(t.leftValue(),"TS type variable not defined on LHS (T)\'U\' at pos 18 of expression List <T> -> error<U,V>");
assertEquals(".",separator());
assertEquals("de", car("de.dz")); assertEquals("de", car("de")); assertEquals("", car("")); assertEquals("a", car("a.b.c.d"));
assertEquals( Lists.newArrayList( NameSpaceMappingBuilder.of("a.b",""), NameSpaceMappingBuilder.of("a.c","") ), new TopLevelNameSpaceMapperCalculator().computeNameSpaceMapping(createDataSet("a.b.X", "a.c.Y", "a.c.Z")) );
assertTrue(same.equals(same)); assertFalse(same.equals(Integer.valueOf(0))); assertEquals(new Tuple<>("a", "b"), new Tuple<>("a", "b")); assertNotEquals(new Tuple<>("B", "b"), new Tuple<>("a", "b")); assertNotEquals(new Tuple<>("a", "B"), new Tuple<>("a", "b"));
assertNull(testee.convertNameSpaceMappingStrategy(null)); assertNull(testee.convertNameSpaceMappingStrategy(this.annotationValue)); assertNull(testee.convertNameSpaceMappingStrategy(this.annotationValue));
assertThat(f.format(x), CoreMatchers.containsString("exception: java.lang.IllegalArgumentException"));
assertNotNull(new TypeMirrorHelper());
assertNull(testee.convertNameMappingStrategy(null)); assertNull(testee.convertNameMappingStrategy(this.annotationValue)); assertNull(testee.convertNameMappingStrategy(this.annotationValue));
assertEquals(snsm.mapNameSpace("a.b"),""); assertEquals(snsm.mapNameSpace("a.b.c"),"a.b.c"); assertEquals(snsm.mapNameSpace("a.d"),"a.d"); assertEquals(snsm.mapNameSpace(""),"");
assertTrue(t.isRight()); assertEquals( t.check("java names must conatain a",x-> x.names().contains("a") ). check("arrow must be SUBTYPE", x->x.conversionCoverage()== ConversionCoverage.SUBTYPES) .check("must not have type vars", x->x.typeVariables().isEmpty()) .checkOrLeft("must have an a", x->x.tsExpressionElements().get(0).value().equals("a")), null );
assertEquals(t.leftValue(),"closing angle bracket without opening\'>\' at pos 11 of expression List -> bla>");
assertEquals(t.leftValue(),"TS type variable not defined on LHS ()\'T\' at pos 13 of expression List -> List<T>");
assertEquals("a", arrayFormat("{}", new Object[]{"a"})); assertEquals("1", arrayFormat("{}", new Object[]{1})); assertEquals("1?", arrayFormat("{}{}", new Object[]{1})); assertEquals("12", arrayFormat("{}{}", new Object[]{1,2})); assertEquals("1 2", arrayFormat("{} {}", new Object[]{1,2,3})); assertEquals("abc", arrayFormat("abc", new Object[]{1,2,3}));
assertNotEquals(x1,x2);
assertEquals(testee.conversionCoverage(),SUBTYPES);
assertEquals(expected, names);
assertEquals(common, "Employee");
assertEquals("Can parse this extension: " + ext, extensionsToValues.get(ext), Integer.valueOf(FastaQueryService.parseExtension(ext))); assertEquals(tested, extensionsToValues.size());
assertEquals(common, "Manager");
assertEquals(common, "Thing");
assertEquals("Every null element should now be an empty string", Arrays.asList("", "", "", ""), output.getResults().get(0));
assertFalse(aliases.hasMoreElements());
assertEquals("HasAddress", common);
assertEquals("Protein", lui.getClassName());
assertEquals(fromStore, trustedKey);
assertEquals(common, "Thing");
assertEquals("Employable", common);
assertEquals("Protein", lui.getClassName());
assertTrue(comparison >1);
assertTrue("There is at least one alias", aliases.hasMoreElements()); assertEquals("test", aliases.nextElement()); assertNotNull("Could not find certificate", cert); assertEquals(key, cert.getPublicKey());
assertEquals(resp.getIssuer(), "testing issuer"); assertEquals(resp.getIdentity(), "Mr Somebody");
assertNull(fwd);
assertEquals("P31946", lui.getIdentifier());
assertEquals(orig.size(), rejiggered.size()); assertEquals(new HashSet<String>(orig), new HashSet<String>(rejiggered)); assertEquals(expected, rejiggered);
assertEquals("Protein", lui.getClassName());
assertEquals("Could not decode key for test", e.getMessage());
assertEquals("P31946", lui.getIdentifier());
assertEquals("Employable", common);
assertEquals(lengths, Arrays.asList(3, 5, 10));
assertEquals("qq", aDate, convertedDate); assertEquals("qq", DATE_STRING, converted);
assertEquals("wso2 issuer", resp.getIssuer()); assertEquals("somebody@somewhere.org", resp.getIdentity());
assertFalse(aliases.hasMoreElements());
assertEquals(common, "Employable");
assertEquals(decoded, key);
assertThat(subject.format(date), is("my\\\\\\\\heapdump"));
assertThat(subject.format(date), is("hda_efghi.hprof"));
assertThat(configuration.getCheckIntervalInMillis(), is(-1L));
assertThat(new String(out.toByteArray(), UTF_8), is("com.sap.jma.logging.LoggerImplTest#INFO: Hello World\\n"));
assertThat(EnumUtils.join(new TestEnum[]{}, ","), equalTo(""));
assertThat(deamons, sameInstance(ThreadFactories.deamons("Test"))); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Test-1-Daemon")); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Test-2-Daemon")); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Test-3-Daemon"));
assertThat(config.getDelta(), is(90d)); assertThat(config.getTimeFrame(), is(3d)); assertThat(config.getTimeUnit(), is(IntervalTimeUnit.HOURS));
assertThat(new String(out.toByteArray(), UTF_8), is("com.sap.jma.logging.LoggerImplTest#WARNING: Hello World Hello World\\n"));
assertThat(subject.format(date), is("hda_abcd.hprof"));
assertThat(new String(out.toByteArray(), UTF_8), is("com.sap.jma.logging.LoggerImplTest#DEBUG: Hello World\\n"));
assertThat(EnumUtils.join(TestEnum.values(), ","), equalTo("ONE,TWO,THREE"));
assertThat(subject.format(date), is("my%heapdump"));
assertThat(subject.format(date), is("a\\\\b"));
assertThat(subject.format(date), is("hda_my_host_1970%01%01_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertThat(subject.format(date), is("hda_my_host_0_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertThat(new String(err.toByteArray(), UTF_8), is("com.sap.jma.logging.LoggerImplTest#ERROR: test abcde\\n" + toBeThrownToString));
assertThat(subject.format(date), is("hda_my_host_0_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertThat(err, containsLines(LoggerImplTest.class.getName() + "#ERROR: Hello World"));
assertThat(subject.getCheckIntervalInMillis(), is(TimeUnit.HOURS.toMillis(4)));
assertThat(subject.format(date), is("hda_my_host_19700101_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertThat(System.getenv("my_prop"), nullValue()); assertThat(subject.format(date), is("hda_.hprof"));
assertThat(subject.format(date), is("hda_cd.hprof"));
assertThat(EnumUtils.join(TestNamedEnum.values(), ","), equalTo("one,two,three"));
assertThat(config.getDelta(), is(0.4)); assertThat(config.getTimeFrame(), is(1d)); assertThat(config.getTimeUnit(), is(IntervalTimeUnit.SECONDS));
assertThat(EnumUtils.join(new TestEnum[]{TestEnum.ONE, TestEnum.TWO}, "$"), equalTo("ONE$TWO"));
assertThat(new String(err.toByteArray(), UTF_8), is("com.sap.jma.logging.LoggerImplTest#ERROR: test\\n" + toBeThrownToString));
assertThat(configuration.getCheckIntervalInMillis(), is(42L)); assertThat(configuration.getCheckIntervalInMillis(), is(42000L)); assertThat(configuration.getCheckIntervalInMillis(), is(120000L)); assertThat(configuration.getCheckIntervalInMillis(), is(10800000L));
assertThat(subject.format(date), is("%token"));
assertThat(subject.format(date), is("token%"));
assertThat(deamons, sameInstance(ThreadFactories.deamons())); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Thread-1-Daemon")); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Thread-2-Daemon")); assertThat(deamons.newThread(mock(Runnable.class)).getName(), equalTo("Thread-3-Daemon"));
assertThat(configuration.getLogLevel(), is(severity));
assertThat(subject.format(date), is("hda_my_host_19700101000000+0000_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertThat(subject.format(date), is("hda_my_host_19700101000000_19866c22-ce15-41de-807b-4805d0387d76.hprof"));
assertTrue(r.allowRetry(i, ThreadLocalRandom.current().nextInt(60000), sleeper)); assertTrue(sleeper.sleepTimeMs <= 2000); assertTrue(r.allowRetry(1000, 59900, sleeper)); assertTrue(sleeper.sleepTimeMs <= 100); assertFalse(r.allowRetry(1, 60000, sleeper)); assertEquals(-1L, sleeper.sleepTimeMs);
assertEquals(floatingip, "130.206.112.238");
assertNotNull(client);
assertNotNull(response);
assertTrue(result);
assertEquals(envInst.getTierInstances().get(0).getNetworkInstances().size(), 0);
assertNotNull(name); assertEquals("bpName-tierName-1-000vdc", name);
assertEquals("The server has either erred or is incapable of performing the requested operation.", message);
assertEquals(network.equals(network2), false); assertEquals(network.equals(network3), true);
assertEquals(subNets.size(), 1); assertEquals(subNet.getName(), SUBNETWORK_NAME);
assertEquals(subnet.getIdNetwork(), "33cb6d12-3792-4ff7-8abe-8f948ce60a4d"); assertEquals(subnet.getIdSubNet(), "6959446a-204b-4e68-a5d2-f7a3ef5a442a"); assertEquals(subnet.getName(), "dd"); assertEquals(subnet.getCidr(), "12.1.0.0/24"); assertEquals(subnet.getRegion(), "region");
assertEquals(network.getSubNets().size(), 0);
assertNotNull(net); assertEquals(net, "public-ext-net-01");
assertEquals(result, true); assertEquals(envResult.getDescription(), "description"); assertEquals(envResult.getVdc(), VDC); assertEquals(envResult.getOrg(), "ORG");
assertEquals(port.getName(), "name"); assertEquals(port.getNetworkId(), "networkId"); assertEquals(port.equals(port2), false);
assertEquals(securityGroup.getDescription(), "default"); assertEquals(securityGroup.getIdSecurityGroup(), "6"); assertEquals(securityGroup.getName(), "namedefault"); assertEquals(securityGroup.getRules().size(), 2);
assertTrue(aRule.checkObject(aRule));
assertEquals(subNetwork.toJson(), SUBNETWORK_STRING); assertEquals(network.toAddInterfaceJson(), ADDINTERFACE);
assertEquals(productReleases.size(), 1);
assertEquals(result, false);
assertNotNull(products);
assertFalse(aRule.checkObject(i));
assertFalse(aRule.checkObject(null));
assertNotNull(response);
assertNotNull(response);
assertTrue(true);
assertFalse(result);
assertNotNull(productNameList); assertEquals(3, productNameList.size());
assertNotNull(claudiaData); assertEquals("org", claudiaData.getOrg()); assertEquals("vdc", claudiaData.getVdc()); assertEquals("service", claudiaData.getService()); assertEquals("token1", claudiaData.getUser().getToken()); assertEquals("tenantId1", claudiaData.getUser().getTenantId()); assertEquals("", claudiaData.getUser().getTenantName());
assertEquals(netDto.getNetworkName(), NETWORK_NAME); assertEquals(netDto.getSubNetworkDto().size(), 2);
assertNotNull(name); assertEquals("bpName-tierName-1-vdc", name);
assertFalse(result);
assertEquals(routerId, "35da5189-03f8-4167-868d-932637d83105");
assertEquals(nets.size(), 1);
assertNotNull(apps);
assertEquals(router.toJson(), ROUTER_STRING); assertEquals(network.toAddInterfaceJson(), ADDINTERFACE);
assertTrue(result);
assertEquals(tier.getInitialNumberInstances(), initial); assertEquals(tier.getMaximumNumberInstances(), maximum); assertEquals(tier.getMinimumNumberInstances(), minimum); assertEquals(tier3.equals(tier), true);
assertNotNull(response);
assertEquals(net.getIdNetwork(), "5af6238b-0e9c-4c20-8981-6e4db6de2e17"); assertEquals(net.getNetworkName(), "test-rt1"); assertEquals(net.getTenantId(), "08bed031f6c54c9d9b35b42aa06b51c0");
assertEquals(applicationInstance.getName(), APP_NAME + "-" + "blueprintName"); assertEquals(applicationInstance.getApplicationRelease().getVersion(), APP_VERSION);
assertNotNull(dependenciesList); assertEquals(1, dependenciesList.size());
assertEquals(rule.getCidr(), "cidr"); assertEquals(rule.getFromPort(), "fromport"); assertEquals(rule.getIdParent(), "idparent"); assertEquals(rule.getIdRule(), "idrule"); assertEquals(rule.getSourceGroup(), "sourcegroup"); assertNotNull(rule.toJSON());
assertNotNull(net); assertEquals(net, "83c3d979-4a43-4ce3-ac39-ef7bfb0b89e5");
assertNotNull(response);
assertNotNull(response); assertEquals("ok", response);
assertNotNull(task); assertEquals(task.getStatus(), TaskStates.RUNNING);
assertEquals(network.equals(network2), false); assertEquals(network.toDto().equals(network2.toDto()), false);
assertEquals(result, true);
assertNotNull(response);
assertNotNull(response);
assertFalse(aRule.equals((Object) otherRule));
assertThat(numberParse.getNumber(0), is(10.0f)); assertThat(numberParse.getNumber(1), is(-10.0f)); assertThat(numberParse.getNumber(2), is(-1.0f)); assertThat(numberParse.getNextCmd(), is(numbers.length()));
assertThat(ParserHelper.buildFloat(0, 0), is(0.0f)); assertThat(ParserHelper.buildFloat(1, 129), is(Float.POSITIVE_INFINITY)); assertThat(ParserHelper.buildFloat(-1, 128), is(Float.NEGATIVE_INFINITY)); assertThat(ParserHelper.buildFloat(1, 0), is(1f)); assertThat(ParserHelper.buildFloat(1, 2), is(100f)); assertThat(ParserHelper.buildFloat(100000000, 1), is(1.0E9F));
assertThat(SVGParser.getSVGFromInputStream(resourceAsStream, 0, 0), is(not(nullValue())));
assertThat(res, is(16711680));
assertThat(res, is(nullValue()));
assertThat(res, is(nullValue()));
assertNotNull(mFluxxan.getDispatcher());
assertFalse(mFluxxan.getState());
assertTrue(customPrincipal != null);
assertTrue(scopes.size() == 0);
assertTrue(result);
assertEquals(jwt, oauthBearerTokenCallback.token());
assertTrue(customPrincipal.toString().equals("CustomPrincipal{oauthBearerTokenJwt=OauthBearerTokenJwt {value=\'token\', lifetimeMs=1001, " + "principalName=\'User\', startTimeMs=1, scope=null, expirationTime=1001, jti=\'null\'}} User:TEST"));
assertEquals(jwt, oauthBearerTokenCallback.token());
assertNotNull(callbackHandler.getOauthService());
assertTrue(scopes.size() == 2); assertTrue(scopes.get(0).getOperation().equals("write")); assertTrue(scopes.get(0).getResourceName().equals("test")); assertTrue(scopes.get(0).getResourceType().equals("topic"));
assertTrue(result);
assertNotNull(Utils.createBasicAuthorizationHeader("clientId", "clientSecret"));
assertTrue(Utils.isNullOrEmpty(null)); assertTrue(Utils.isNullOrEmpty("")); assertFalse(Utils.isNullOrEmpty("test"));
assertEquals(Utils.createBearerHeader("token"), "Bearer token");
assertTrue(Utils.isURIValid("www.google.com")); assertFalse(Utils.isURIValid(null));
assertEquals(res.size(), 1); assertEquals(res.get(0).getString("user"), "user1"); assertEquals(res.get(0).getString("value"), "value1");
assertEquals(res.size(), 2); assertEquals(res.get(0).getString("user"), "user2"); assertEquals(res.get(0).getString("value"), "value2"); assertEquals(res.get(1).getString("user"), "user1");
assertEquals(reader.readUTF(), configuration.getString(Hdfs3Config.HDFS3_TEST_STRING_KEY));
assertThat(response).isEqualTo("42"); assertThat(containerIpAddress).isEqualTo("localhost"); assertThat(firstMappedPort).isEqualTo(21300);
assertNotNull(collection1); assertThat(collection1.getFieldValue("name")).isEqualTo("The Legend of the Hobbit part 1");
assertNotNull(collection1); assertThat(collection1.getFieldValue("name")).isEqualTo("The Legend of the Hobbit part 1");
assertEquals(reader.readUTF(), configuration.getString(HdfsConfig.HDFS_TEST_STRING_KEY));
assertTrue(line.contains("{ NAME=> \'hbase_test_table\', IS_META => \'false\', COLUMNS => [ { NAME => \'cf1\', BLOOMFILTER => \'ROW\'"));
assertEquals("row_" + i, new String(result.value()));
assertEquals("should be the same age", expected.intValue(), result.intValue());
assertEquals("Object should remain unchanged.", original, result);
assertEquals("Null should be compatibilized to 0", 0, val);
assertEquals("Null should be compatibilized to false", false, val);
assertEquals(originalCollection.get(0).getaString(), result.get(0)); assertEquals(originalCollection.get(0).getaString(), result.get(0));
assertEquals("Should be the same result", expected, result, 0.0001);
assertEquals("should be 0", 0, expected.intValue());
assertTrue("The class SimpleAssociationDTO has a default constructor", shouldBeTrue); assertFalse("The class SimpleImmutableDTO does not have a default constructor", shouldBeFalse);
assertEquals("Null should be compatibilized to 0", 0, val, 0.0001);
assertEquals("Null should be compatibilized to 0", 0, val);
assertEquals("Null should be compatibilized to 0", 0, val, 0.0001);
assertEquals("Should be the reverse of the string", StringUtils.reverse(object), result);
assertEquals("should be the same age in weeks", expected.intValue(), result.intValue());
assertEquals("Null should be compatibilized to 0", 0, val);
assertEquals("should be the same age in weeks", expected.intValue(), result.intValue());
assertEquals(new DecimalFormat(testFormat).format(value), result);
assertEquals("Null should be compatibilized to 0", 0, val);
assertNotNull("Inherited field should be found anyway.", field);
assertTrue(discoveredProperties.contains("aString")); assertTrue(discoveredProperties.contains("anInt")); assertTrue(discoveredProperties.contains("aDouble")); assertTrue(discoveredProperties.contains("aBoolean"));
assertEquals("Null should be compatibilized to 0", 0, val);
assertEquals("should be the same age", expected.intValue(), result.intValue());
assertEquals("Should be equals: ", myInt.toString(), result);
assertEquals("result should be the size of the collection.", expected, result);
assertEquals("Should say \'isNull\' ", "isNull", result);
assertThat(res).isEqualTo(encodedData);
assertThat(value).isEqualTo("deserialized value"); assertThat(headers.lastHeader(KafkaCryptoConstants.KEY_REF_HEADER).value()).isNull();
assertThat(res).isEqualTo(clearData);
assertThat(value).isEqualTo("deserialized value"); assertThat(headers.lastHeader(KafkaCryptoConstants.KEY_REF_HEADER).value()).isNull();
assertThat(result).isEqualTo("clear serialized value".getBytes(StandardCharsets.UTF_8));
assertThat(result).isEqualTo("clear serialized value".getBytes(StandardCharsets.UTF_8));
assertEquals("DEFAULT_MULTIPLE.DEFAULT_COMPUTED.DEFAULT_UNMODIFIED-DEFAULT_HASVALUE", properties.get("multiple").getValue()); assertEquals("MODIFIED", properties.get("modified").getValue()); assertEquals("", properties.get("stackoverflow").getValue());
assertTrue(xmlString + " has no alias set", xmlString.contains("<w:alias w:val=\\"testLabel\\"/>"));
assertEquals(1, ids.size()); assertEquals("value", ids.get(0));
assertTrue(content.contains("test123"));
assertEquals(4, templates.size());
assertEquals(4, result.size());
assertEquals(0, templates.size());
assertFalse(isVersionIncontext(template));
assertTrue(isVersionIncontext(toLock));
assertTrue(plainTextContent.hasExpression());
assertEquals("a", formatter.arg1); assertEquals("b", formatter.arg2);
assertEquals(23, formatter.value);
assertFalse(plainTextContent.hasExpression());
assertNotNull(entry);
assertTrue(content.contains(TestDataModel.STRING_TEXT));
assertEquals(9, elements.size());
assertEquals(1, doc.getPlainTextContent().size()); assertEquals(1, content.size()); assertTrue(content.get(0) instanceof SdtBlock); assertEquals(1, doc.getPlainTextContent().size());
assertTrue(isVersionIncontext(template));
assertEquals(lockingUser, locked.getLockingUser()); assertTrue(isVersionIncontext(locked));
assertNull(template);
assertNotNull(template);
assertTrue(xmlString.contains("<w:tag w:val=\\"expression\\"/>"));
assertEquals(user, template.getLockingUser());
assertTrue(file.createNewFile()); assertFalse(file.exists());
assertNull(unlocked.getLockingUser()); assertTrue(isVersionIncontext(unlocked));
assertTrue(text.contains(expectedContent));
assertEquals(expectedFileNames, fileNamesInDirectory); assertTrue(Files.size(dummyFile) > 0);
assertTrue("File has not been writen", templateFile.length() > length);
assertTrue("Content is not equals", Arrays.equals(content, out.toByteArray()));
assertEquals(expectedFileNames, fileNamesInDirectory); assertEquals(0, Files.size(dummyFile));
assertTrue(content.startsWith("<?xml"));
assertEquals(5, doc.getPlainTextContent().size());
assertTrue(generatedDocument.isFile()); assertTrue(generatedDocument.length() > 0); assertTrue(lines.size() > 0); assertTrue(lines.get(0).contains("PDF"));
assertEquals(Simple.VALUE_1, formatter.value);
assertTrue(list.size() == 2);
assertEquals(expectedFileNames, fileNamesInDirectory);
assertEquals(expressionString, plainTextContent.getExpression());
assertEquals(ExpressionError.ILLEGAL_CONTENT_KEY, e.getErrors().get("value"));
assertTrue(list.size() > 0);
assertTrue(StringUtils.isEmpty(plainTextContent.getExpression()));
assertEquals(guestbookName, greeting.getKey().getParent().getName()); assertEquals(testContent, greeting.getProperty("content")); assertEquals(currentUser, greeting.getProperty("user")); assertTrue("The date in the entity [" + date + "] is prior to the request being performed", priorToRequest.before(date) || priorToRequest.equals(date)); assertTrue("The date in the entity [" + date + "] is after to the request completed", afterRequest.after(date) || afterRequest.equals(date));
assertEquals("Hello, " + currentUser.getNickname() + "\\n", stringWriter.toString());
assertThat(stack.getChildControllers()).containsOnly(child3);
assertThat(root.getView().getParent()).isNotNull();
assertThat(options.getValue()).isEqualTo(Orientation.Default.orientationCode);
assertThat(parent.getView().getChildAt(0)).isEqualTo(uut.getView());
assertThat(myController.getView()).isEqualTo(otherView);
assertThat(uut.getView()).isNotNull().isInstanceOf(View.class);
assertThat(stack2.getChildControllers()).containsOnly(child2);
assertThat(uut.getId()).isEqualTo("uut");
assertThat(uut.isEmpty()).isTrue(); assertThat(uut.getTopBar().getTitleBar().getNavigationIcon()).isNotNull(); assertThat(uut.getTopBar().getTitleBar().getNavigationIcon()).isNull();
assertThat(uut.size()).isEqualTo(0); assertThat(uut.size()).isEqualTo(1);
assertThat(content.getChildCount()).isEqualTo(4); assertThat(content.getChildCount()).isEqualTo(3);
assertThat(options.fabOptions.hasValue()).isTrue(); assertThat(captor.getValue().animations.push.hasValue()).isFalse(); assertThat(captor.getValue().topBar.testId.hasValue()).isFalse(); assertThat(captor.getValue().fabOptions.hasValue()).isFalse();
assertThat(options.width.hasValue()).isFalse(); assertThat(options.height.hasValue()).isFalse(); assertThat(params.width).isEqualTo(MATCH_PARENT); assertThat(params.height).isEqualTo(MATCH_PARENT);
assertThat(options.orientations).hasSize(1);
assertThat(uut.isTop("123")).isFalse(); assertThat(uut.isTop("123")).isTrue(); assertThat(uut.isTop("123")).isFalse();
assertThat(child.getParentController().equals(uut));
assertThat(uut.values()).isNotNull().isEmpty(); assertThat(uut.values()).isNotNull().containsExactlyInAnyOrder(123, 456);
assertThat(child1.getParentController()).isNull(); assertThat(child1.getParentController()).isEqualTo(uut); assertThat(child2.getParentController()).isEqualTo(anotherNavController);
assertThat(options.orientations.get(0)).isEqualTo(Orientation.Landscape);
assertThat(uut.isSameId("")).isFalse(); assertThat(uut.isSameId(null)).isFalse(); assertThat(uut.isSameId("uut")).isTrue();
assertThat(options.width.hasValue()).isFalse(); assertThat(options.height.hasValue()).isFalse(); assertThat(params.width).isEqualTo(MATCH_PARENT); assertThat(params.height).isEqualTo(MATCH_PARENT);
assertThat(uut.peek()).isNull(); assertThat(uut.peek()).isEqualTo(456);
assertThat(uut.isViewShown()).isFalse(); assertThat(uut.isViewShown()).isFalse(); assertThat(uut.isViewShown()).isTrue();
assertThat(childRegistry.size()).isZero();
assertThat(uut.findController("456")).isNull(); assertThat(uut.findController("uut")).isEqualTo(uut);
assertThat((View) uut.getView().findViewById(child1.getView().getId())).isNull(); assertThat((View) uut.getView().findViewById(child2.getView().getId())).isNotNull();
assertThat(uut.isEmpty()).isTrue();
assertThat(uut.options.sideMenuRootOptions).isNotEqualTo(initialOptions.sideMenuRootOptions);
assertThat(params.width).isEqualTo(widthInDp); assertThat(params.height).isEqualTo(heightInDp);
assertThat(uut.isEmpty()).isTrue();
assertThat(options.orientations.get(0)).isEqualTo(Orientation.Default); assertThat(options.orientations.get(1)).isEqualTo(Orientation.Landscape); assertThat(options.orientations.get(2)).isEqualTo(Orientation.Portrait);
assertThat(uut.findController("123")).isNull(); assertThat(uut.findController(uut.getId())).isEqualTo(uut); assertThat(uut.findController(child1.getId())).isEqualTo(child1);
assertThat(topBarController.getView().getTitleBar().getNavigationIcon()).isNotNull();
assertThat(params.width).isEqualTo(widthInDp); assertThat(params.height).isEqualTo(heightInDp);
assertThat(uut.findController(child2.getId())).isEqualTo(child2);
assertThat(uut.peekId()).isNull(); assertThat(uut.peekId()).isEqualTo("123");
assertThat(uut.isEmpty()).isTrue(); assertThat(uut.isEmpty()).isFalse();
assertThat(modal1.getView().getParent()).isNull(); assertThat(modal1.getView().getParent()).isEqualTo(modal2.getView().getParent());
assertThat(captor.getValue().topBar.testId.hasValue()).isFalse(); assertThat(captor.getValue().bottomTabsOptions.testId.get()).isEqualTo(optionsToMerge.bottomTabsOptions.testId.get());
assertThat(uut.handleBack(new CommandListenerAdapter())).isFalse();
assertThat(uut.containsId("123")).isFalse(); assertThat(uut.containsId("123")).isTrue();
assertThat(options.orientations).hasSize(1); assertThat(options.orientations.get(0)).isEqualTo(Orientation.Default);
assertThat(findModal(modal1.getId())).isNull();
assertThat(modal1.getView().getParent()).isEqualTo(modalsLayout);
assertThat(uut.remove("123")).isNull(); assertThat(uut.remove("123")).isEqualTo(123);
assertThat(uut.getActivity()).isNotNull().isEqualTo(activity);
assertThat(animator.isRunning()).isFalse();
assertThat(uut.pop()).isNull(); assertThat(uut.pop()).isEqualTo(456);
assertThat(root.getView().getParent()).isEqualTo(rootContainer);
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(expected, actual);
assertNotNull(actual); assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(expected); assertTrue(expected); assertTrue(expected); assertTrue(expected);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]); assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]); assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected.get(i), actual.get(i));
assertNotNull(actual); assertEquals(expected, actual);
assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual); assertEquals(expected, actual);
assertTrue(expected);
assertEquals(expected, actual);
assertEquals(expected.get(i), actual.get(i)); assertEquals(expected.get(i), actual.get(i));
assertEquals(new Money("7"), new Money("6").add(new Money("1")));
assertTrue(new Money("7").isGreaterOrEqualThan(new Money("6"))); assertTrue(new Money("6").isGreaterOrEqualThan(new Money("6"))); assertFalse(new Money("5").isGreaterOrEqualThan(new Money("6")));
assertEquals(initialBalance, aggregate.getBalance());
assertEquals(new Money("5"), new Money("6").subtract(new Money("1")));
assertTrue(result.getShape(newContainerId).isPresent()); assertEquals(newContainer.getMember().getId(), newMemberId); assertFalse(result.getShape(containerId).isPresent());
assertThat(converter.getAuthRequestHeaders(null, trait), containsInAnyOrder("x-api-key"));
assertThat(events, empty());
assertThat(thrown.getMessage(), containsString("2 and 50"));
assertEquals(shape.getType(), ShapeType.LIST);
assertEquals(Integer.valueOf(number), node.getValue());
assertThat(relationships, containsInAnyOrder( Relationship.create(service, RelationshipType.RESOURCE, resourceShape), Relationship.create(service, RelationshipType.OPERATION, operationShape), Relationship.create(resourceShape, RelationshipType.BOUND, service), Relationship.create(operationShape, RelationshipType.BOUND, service)));
assertTrue(Node.from(true).asBooleanNode().isPresent());
assertEquals(shape.getMember(), MemberShape.builder() .id(shape.getId().withMember("member")) .target("ns.foo#bam") .addTrait(new SensitiveTrait()) .build());
assertThat(thrown.getMessage(), containsString("Label `Foo` is defined more than once"));
assertThat(result.shapes().count(), Matchers.is(1L)); assertThat(result.getShape(aId).get().getTrait(SensitiveTrait.class), Matchers.is(Optional.empty())); assertThat(result.getShape(aId).get().getTrait(DocumentationTrait.class), Matchers.is(Optional.empty())); assertThat(result.getShape(aId).get().getTrait(DeprecatedTrait.class), Matchers.not(Optional.empty()));
assertEquals(shape.getType(), ShapeType.BLOB);
assertThat(result.toString(), equalTo( "Baz{foo=\'hi\', baz=10, inner=Baz{foo=\'null\', baz=0, inner=Baz{foo=\'null\', baz=0, inner=null}}}"));
assertThat(a, equalTo(b)); assertThat(a, equalTo(a)); assertThat(b, equalTo(a)); assertThat(c, not(equalTo(a)));
assertThat(NodeDiff.diff(Node.nullNode(), Node.nullNode()), empty());
assertThat(unref.compute(model).stream().map(Shape::getId).collect(Collectors.toSet()), containsInAnyOrder( ShapeId.from("ns.foo#Exclude1"), ShapeId.from("ns.foo#Exclude2")));
assertTrue(result.getShape(ShapeId.from("com.example#string")).isPresent()); assertTrue(result.getShape(ShapeId.from("com.example#String")).isPresent());
assertThat(sourceLocation, equalTo(hasSourceLocation.sourceLocation));
assertThat(MapUtils.copyOf(Collections.emptyMap()), anEmptyMap());
assertThat(StringUtils.wrap("hello, there, bud", 6), equalTo(String.format("hello,%nthere,%nbud")));
assertThat(event.getSeverity(), is(Severity.WARNING)); assertThat(event.getShapeId().get(), equalTo(service.getId())); assertThat(event.getMessage(), containsString("Expected \'foo.amazonaws.com\', but found \'notfoo.amazonaws.com\'"));
assertThat(thrown.getMessage(), containsString("case-insensitively end with"));
assertThat(modelString, containsString("MyString"));
assertThat(pointer, equalTo("#/components/schemas/Foo"));
assertThat(models, contains( new URL(prefix + "foo.smithy"), new URL(prefix + "baz/bar/example.json"), new URL(prefix + "test"), new URL(prefix + "test2")));
assertThat(e.getMessage(), equalTo( "Error serializing `throws` field of software.amazon.smithy.model.node.NodeMapperTest$ThrowingClass " + "using getThrows(): Nope!"));
assertEquals(NodeType.NULL, type); assertEquals("null", type.toString());
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create software.amazon.smithy.model.node.NodeMapperTest.FailingFromNode " + "from {}: Unable to deserialize Node using fromNode method: nope"));
assertEquals(ShapeType.MEMBER, shape.getType());
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D")); assertThat(map, hasEntry("5", "E")); assertThat(map, hasEntry("6", "F")); assertThat(map, hasEntry("7", "G")); assertThat(map, hasEntry("8", "H")); assertThat(map, hasEntry("9", "I"));
assertThat(e.getMessage(), equalTo( "Deserialization error at (/foo): unable to create java.lang.String from 10"));
assertNotEquals(a, "test");
assertThat(symbol.expectProperty("baz", String.class), equalTo("bar")); assertThat(symbol.expectProperty("bam", Integer.class), equalTo(100));
assertThat(result.shapes().count(), Matchers.is(6L));
assertThat(t.getItems(), equalTo(Optional.empty()));
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create " + "software.amazon.smithy.model.node.NodeMapperTest.ThrowingCollectionOnAdd from [\\"a\\",\\"b\\"]: " + "Cannot add a"));
assertThat(strategy.toPointer(a.getId()), equalTo("#/definitions/Page")); assertThat(strategy.toPointer(b.getId()), equalTo("#/definitions/PageComFoo"));
assertEquals(Float.valueOf(number), node.getValue());
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create software.amazon.smithy.model.node.NodeMapperTest.BadMapCtor " + "from {}: Unable to deserialize object into Map: nope"));
assertThat(mapper.deserialize(value, Object.class), equalTo("hi")); assertThat(mapper.deserialize(value, String.class), equalTo("hi"));
assertEquals(strNode, node.getMember("name").get()); assertFalse(node.getMember("age").isPresent());
assertTrue(Prelude.isPreludeShape(ShapeId.from("smithy.api#String"))); assertTrue(Prelude.isPreludeShape(ShapeId.from("smithy.api#PrimitiveLong"))); assertTrue(Prelude.isPreludeShape(ShapeId.from("smithy.api#Foo"))); assertFalse(Prelude.isPreludeShape(ShapeId.from("foo.baz#Bar")));
assertThat(unreferencedTraitDefinitions.compute(model), contains(model.expectShape(ShapeId.from("ns.foo#quux"))));
assertThat(relationships, containsInAnyOrder( Relationship.create(target, RelationshipType.MEMBER_CONTAINER, list), Relationship.create(target, RelationshipType.MEMBER_TARGET, string)));
assertTrue(node.containsMember("foo")); assertTrue(node.containsMember("baz")); assertTrue(node.containsMember("bam"));
assertThat(thrown.getMessage(), containsString("Unclosed label found in pattern"));
assertThat(shape.getAllTraits(), hasKey(ShapeId.from("foo.baz#foo"))); assertThat(shape.getAllTraits(), not(hasKey(ShapeId.from("foo.baz#other"))));
assertThat(trait.isPresent(), is(true)); assertThat(trait.get(), instanceOf(PaginatedTrait.class)); assertThat(paginatedTrait.getOutputToken(), equalTo(Optional.of("result.outputToken")));
assertThat(ListUtils.of(), empty());
assertTrue(Node.from(10).asNumberNode().isPresent());
assertThat(result, instanceOf(LinkedHashSet.class)); assertThat(result, contains("a", "b"));
assertThat(result.shapes().count(), Matchers.equalTo(2L)); assertThat(result.getShape(container.getId()), Matchers.not(Optional.empty())); assertThat(result.getShape(c.getId()), Matchers.not(Optional.empty())); assertThat(result.expectShape(container.getId()).asResourceShape().get().getOperations(), Matchers.contains(c.getId()));
assertThat(relationships, containsInAnyOrder( Relationship.create(method, RelationshipType.INPUT, input), Relationship.create(method, RelationshipType.OUTPUT, output), Relationship.create(method, RelationshipType.ERROR, error)));
assertThat(result1, equalTo(result2)); assertThat(result1, equalTo(Node.fromStrings("a", "b", "c")));
assertEquals(0, s.length);
assertEquals(shape.getType(), ShapeType.TIMESTAMP);
assertEquals(shape, shape);
assertNotEquals(shape, "");
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C"));
assertThat(shapes, containsInAnyOrder(readOperation, resource));
assertThat(result, instanceOf(ArrayList.class)); assertThat((ArrayList<Object>) result, contains("a", "b"));
assertThat(schema.getType().get(), equalTo("string")); assertThat(schema.getFormat().get(), equalTo("date-time"));
assertThat(pointer, equalTo("#/definitions/Foo"));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D")); assertThat(map, hasEntry("5", "E")); assertThat(map, hasEntry("6", "F")); assertThat(map, hasEntry("7", "G")); assertThat(map, hasEntry("8", "H"));
assertSame(node, node.expectNumberNode("does not raise"));
assertThat(events, not(empty()));
assertEquals(shape.getType(), ShapeType.STRING);
assertThat(u.getMemberNames(), Matchers.contains("zoo", "abc")); assertThat(s.getMemberNames(), Matchers.contains("zoo", "abc")); assertThat(sortedModel.expectShape(u.getId(), UnionShape.class).getMemberNames(), Matchers.contains("abc", "zoo")); assertThat(sortedModel.expectShape(s.getId(), StructureShape.class).getMemberNames(), Matchers.contains("abc", "zoo"));
assertEquals(modelA, modelB);
assertThat(NodeDiff.diff(actual, expected), contains( "[/foo[1]/baz[1]/crackle]: Expected `\\"pop\\"` but found `\\"quux\\"`"));
assertThat(thrown.getMessage(), containsString("version"));
assertThat(StringUtils.capitalize("foo"), equalTo("Foo")); assertThat(StringUtils.capitalize(" foo"), equalTo(" foo")); assertThat(StringUtils.capitalize("10-foo"), equalTo("10-foo")); assertThat(StringUtils.capitalize("_foo"), equalTo("_foo"));
assertThat(names, contains("a.smithy", "b/b.smithy", "b/c/c.json"));
assertThat(SetUtils.copyOf(Collections.singletonList("Jason")), contains("Jason"));
assertEquals(SourceLocation.none(), node.getSourceLocation());
assertEquals(a, b); assertEquals(a.hashCode(), b.hashCode());
assertThat(new NodeMapper().deserializeCollection(value, List.class, Boolean.class), contains(true, false, true));
assertEquals(false, node.isObjectNode()); assertEquals(false, node.isArrayNode()); assertEquals(false, node.isStringNode()); assertEquals(false, node.isNumberNode()); assertEquals(false, node.isBooleanNode()); assertEquals(true, node.isNullNode());
assertThat((ArrayList<Object>) result, contains("a", "b"));
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create software.amazon.smithy.model.node.NodeMapperTest.FailingCtor " + "from {}: Unable to deserialize a Node when invoking target constructor: nope"));
assertEquals(Integer.valueOf(0), zero.getValue()); assertEquals(SourceLocation.none(), zero.getSourceLocation());
assertEquals(NodeType.valueOf("OBJECT"), node.getType()); assertEquals(NodeType.OBJECT, node.getType()); assertEquals("object", node.getType().toString());
assertThat(result.expectShape(shapeId).getTrait(DeprecatedTrait.class), Matchers.not(Optional.empty())); assertThat(result.expectShape(shapeId).getTrait(DeprecatedTrait.class).get().getMessage().get(), Matchers.equalTo("baz")); assertThat(result.expectShape(shapeId).getTrait(DocumentationTrait.class).get().getValue(), Matchers.equalTo("changed"));
assertEquals("abc", node.expectOneOf("abc"));
assertEquals(NodeType.NUMBER, type); assertEquals("number", type.toString());
assertThat(trait.getSourceLocation(), equalTo(sourceLocation));
assertEquals(true, node.getValue());
assertThat(thrown.getMessage(), containsString("Empty label declaration"));
assertThat(events, hasSize(1)); assertThat(events.get(0).getShapeId(), equalTo(Optional.of(ShapeId.from("foo.bar#A"))));
assertThat(pointer, equalTo("#/definitions/FooBar"));
assertEquals(NodeType.BOOLEAN, type); assertEquals("boolean", type.toString());
assertFalse(level.isLabel()); assertThat(level.toString(), equalTo("foo"));
assertThat(thrown.getMessage(), containsString("Literal query parameters must not be repeated"));
assertEquals(member, shape.getMember());
assertThat(OptionalUtils.or(Optional.empty(), () -> Optional.of("foo")).get(), equalTo("foo"));
assertThat(e.getMessage(), startsWith( "Deserialization error at (/foo): unable to create java.lang.String from true"));
assertThat(node.getMembersByPrefix("a.").keySet(), containsInAnyOrder("a.1", "a.2")); assertThat(node.getMembersByPrefix("b").keySet(), containsInAnyOrder("bee")); assertThat(node.getMembersByPrefix("bee").keySet(), containsInAnyOrder("bee"));
assertEquals("", s);
assertThat(thrown.getMessage(), containsString("Expected one of `abc`, `mno`, `xyz`; got `hjk`."));
assertEquals(shape.getMember("foo").get(), MemberShape.builder() .id(shape.getId().withMember("foo")) .target("ns.foo#bam") .addTrait(new SensitiveTrait()) .build());
assertEquals(a, a);
assertEquals("", s);
assertThat(dependencies, contains(a, a2, a3, b, b2, c));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D")); assertThat(map, hasEntry("5", "E")); assertThat(map, hasEntry("6", "F"));
assertThat(map, hasEntry("1", "A"));
assertThat(trait.isPresent(), is(true)); assertThat(trait.get(), instanceOf(PaginatedTrait.class)); assertThat(paginatedTrait.getItems(), equalTo(Optional.of("result.items")));
assertThat(NodeDiff.diff(actual, expected), contains( "[]: Expected element (position 2) not encountered in list: \\"pop\\"", "[[0]]: Expected `\\"snap\\"` but found `\\"fizz\\"`", "[[1]]: Expected `\\"crackle\\"` but found `\\"buzz\\"`"));
assertThat(thrown.getMessage(), containsString("must be relative to the base directory"));
assertThat(schema.getType().get(), equalTo("string")); assertFalse(schema.getFormat().isPresent());
assertThat(e.getMessage(), startsWith( "Deserialization error at (/): unable to create " + "software.amazon.smithy.model.node.NodeMapperTest.ClassThrowingBuilderMethod from " + "{\\"foo\\":\\"foo\\"}: Unable to deserialize Node using a builder: nope"));
assertThat(trueNode.expectBooleanNode(), instanceOf(BooleanNode.class)); assertThat(falseNode.expectBooleanNode(), instanceOf(BooleanNode.class));
assertSame(node, node.expectBooleanNode("does not raise"));
assertEquals("xyz", node.expectOneOf("abc", "mno", "xyz"));
assertTrue(result.getShape(newContainerId).isPresent()); assertEquals(newMember.getId(), newMemberId); assertFalse(result.getShape(containerId).isPresent());
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create software.amazon.smithy.model.node.NodeMapperTest.FooEnum " + "from \\"invalid\\": Expected one of the following enum strings: [foo, Baz, BAR]"));
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create " + "software.amazon.smithy.model.node.NodeMapperTest.PojoWithCollection from [\\"a\\",\\"b\\"]"));
assertThat(result, instanceOf(ArrayList.class)); assertThat(result, contains("a", "b"));
assertThat(result.expectShape(shapeId).getTrait(SensitiveTrait.class), Matchers.is(Optional.empty())); assertThat(result.expectShape(shapeId).getTrait(DocumentationTrait.class), Matchers.is(Optional.empty()));
assertThat(schema.getType().get(), equalTo("string")); assertFalse(schema.getFormat().isPresent());
assertThat(e.getMessage(), equalTo( "Deserialization error at (/): unable to create " + "software.amazon.smithy.model.node.NodeMapperTest.ThrowingCollectionOnCreate from [\\"a\\",\\"b\\"]: " + "Unable to deserialize array into Collection: nope"));
assertThat(mapper.deserialize(Node.nullNode(), String.class), nullValue());
assertThat(ListUtils.of("Jason", "Michael", "Kevin"), containsInAnyOrder("Jason", "Michael", "Kevin"));
assertThat(ListUtils.copyOf(Collections.singletonList("Jason")), contains("Jason"));
assertSame(node, node.expectStringNode("does not raise"));
assertThat(ModelDiscovery.createSmithyJarManifestUrl("file:/foo.jar"), equalTo(new URL("jar:file:/foo.jar!/META-INF/smithy/manifest")));
assertThat(trait.getMin().get().intValue(), equalTo(10)); assertThat(trait.getMax().get().intValue(), equalTo(100));
assertThat(NodeDiff.diff(actual, expected), contains( "[[0]]: Expected `\\"snap\\"` but found `\\"fizz\\"`", "[[1]]: Expected `\\"crackle\\"` but found `\\"buzz\\"`"));
assertThat(unreferencedPrivateShapes, emptyCollectionOf(ShapeId.class));
assertThat(CaseUtils.snakeToPascalCase("foo_bar"), equalTo("FooBar")); assertThat(CaseUtils.snakeToPascalCase("Foo_bar"), equalTo("FooBar")); assertThat(CaseUtils.snakeToPascalCase("__foo_bar"), equalTo("FooBar"));
assertThat(result, instanceOf(HashSet.class)); assertThat(result, contains("a", "b"));
assertThat(topic1, equalTo(topic1)); assertThat(topic1, not(equalTo(topic2))); assertThat(topic1, not(equalTo(null)));
assertEquals(Double.valueOf(number), node.getValue());
assertEquals("1", entry.getKey()); assertEquals("A", entry.getValue());
assertThat(thrown.getMessage(), containsString("URI pattern must start with \'/\'"));
assertThat(MapUtils.copyOf(Collections.singletonMap("1", "A")), hasEntry("1", "A"));
assertThat(events, empty());
assertThat(thrown.getMessage(), containsString("At most one greedy label segment may exist in a pattern"));
assertThat(thrown.getMessage(), containsString("URI labels must not appear in the query string"));
assertThat(e.getMessage(), containsString("Expected: \'/\'"));
assertThat(result.getValues(), contains("a", "b"));
assertNotEquals(shape1, shape2);
assertEquals(false, node.isObjectNode()); assertEquals(true, node.isArrayNode()); assertEquals(false, node.isStringNode()); assertEquals(false, node.isNumberNode()); assertEquals(false, node.isBooleanNode()); assertEquals(false, node.isNullNode());
assertEquals("foo", node.getValue());
assertThat(e.getMessage(), containsString("Expected a line break, but found \'H\'"));
assertThat(NodeDiff.diff(actual, expected), contains("[]: Extra element encountered in list at position 2: \\"pop\\""));
assertThat(e.getMessage(), containsString("Expected: \'=\'"));
assertThat(SetUtils.of(), empty());
assertThat(schema.getType().get(), equalTo("string")); assertThat(schema.getFormat().get(), equalTo("date-time"));
assertThat(ref.toPointer(struct.getId()), equalTo("#/definitions/Scripts")); assertThat(ref.toPointer(member.getId()), equalTo("#/definitions/Scripts/properties/pages"));
assertThat(schema.getType().get(), equalTo("number")); assertFalse(schema.getFormat().isPresent());
assertEquals("This is a test.\\n", IoUtils.readUtf8File(Paths.get(getClass().getResource("test.txt").toURI())));
assertEquals(shape.getType(), ShapeType.SERVICE);
assertThat(keys, contains("bar", "baz"));
assertThat(thrown.getMessage(), containsString("Invalid label name"));
assertThat(e.getMessage(), containsString("Cannot create non-static inner class"));
assertThat(result.shapes().count(), Matchers.equalTo(3L)); assertThat(result.getShape(memberId).get().getTrait(SensitiveTrait.class), Matchers.not(Optional.empty())); assertThat(result.getShape(containerId).get(), Matchers.is(newList)); assertThat(result.getShape(containerId).get().asListShape().get().getMember(), Matchers.is(newMember));
assertThat(relationships, containsInAnyOrder( Relationship.create(struct, RelationshipType.STRUCTURE_MEMBER, member1Target), Relationship.create(struct, RelationshipType.STRUCTURE_MEMBER, member2Target)));
assertThat(result, instanceOf(ArrayList.class)); assertThat(result, contains("a", "b"));
assertThat(relationships, containsInAnyOrder( Relationship.create(union, RelationshipType.UNION_MEMBER, v1Target), Relationship.create(union, RelationshipType.UNION_MEMBER, v2Target)));
assertTrue(trait.isPresent()); assertThat(trait.get(), instanceOf(CorsTrait.class)); assertFalse(serialized.getMember("origin").isPresent()); assertFalse(serialized.getMember("maxAge").isPresent()); assertFalse(serialized.getMember("additionalAllowedHeaders").isPresent()); assertFalse(serialized.getMember("additionalExposedHeaders").isPresent());
assertEquals(shape.getType(), ShapeType.STRUCTURE);
assertEquals(400, a.getDefaultHttpStatusCode()); assertEquals(500, b.getDefaultHttpStatusCode());
assertTrue(result.getShape(newContainerId).isPresent()); assertEquals(newContainer.getKey().getId(), newKeyId); assertEquals(newContainer.getValue().getId(), newValueId); assertFalse(result.getShape(containerId).isPresent());
assertThat(shape1, equalTo(shape2)); assertThat(shape1, equalTo(shape3));
assertThat(NodeDiff.diff(actual, expected), contains("[]: Expected key `fizz` not present."));
assertThat(thrown.getMessage(), containsString("Host labels must not be adjacent"));
assertThat(OptionalUtils.or(Optional.of("Kevin"), () -> Optional.of("foo")).get(), equalTo("Kevin"));
assertThat(MediaType.isJson("application/json"), is(true)); assertThat(MediaType.isJson("application/foo+json"), is(true)); assertThat(MediaType.isJson("foo/json"), is(false)); assertThat(MediaType.isJson("application/jsonn"), is(false)); assertThat(MediaType.isJson("application/foo+jsonn"), is(false));
assertThat(new UnreferencedShapes().compute(model), empty());
assertThat(OptionalUtils.stream(Optional.empty()).count(), equalTo(0L));
assertTrue(trait.isRequired());
assertThat(arnIndex.getServiceArnNamespace(ShapeId.from("ns.foo#EmptyAwsService")), equalTo("emptyawsservice"));
assertThat(result, instanceOf(HashMap.class)); assertThat(result.get("foo"), equalTo("foo"));
assertThat(CaseUtils.snakeToCamelCase("foo_bar"), equalTo("fooBar")); assertThat(CaseUtils.snakeToCamelCase("Foo_bar"), equalTo("fooBar")); assertThat(CaseUtils.snakeToCamelCase("__foo_bar"), equalTo("fooBar"));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B"));
assertThat(trait.toBuilder().build(), equalTo(trait)); assertThat(new MockIntegrationTrait.Provider().createTrait(ShapeId.from("ns.foo#Operation"), trait.toNode()), equalTo(trait));
assertThat(NodeDiff.diff(actual, expected), contains("[/foo]: Expected `\\"baz\\"` but found `\\"bar\\"`"));
assertTrue(result.getShape(barUnreferenced).isPresent()); assertFalse(result.getShape(fooUnreferenced).isPresent());
assertThat(new NodeMapper().deserialize(baz, SimpleString.class).value, equalTo("hello!"));
assertThat(manifestString, containsString("hello")); assertThat(manifestString, containsString("10")); assertThat(manifestString, containsString("true"));
assertThat(result.getShape(memberId).get().getTrait(SensitiveTrait.class), Matchers.not(Optional.empty())); assertThat(result.getShape(containerId).get().asListShape().get().getMember(), Matchers.is(newMember));
assertThat(result, instanceOf(HashMap.class)); assertThat(result.get("foo"), equalTo("foo"));
assertEquals(shape.getType(), ShapeType.MAP);
assertThat(result, instanceOf(Map.class)); assertThat(((Map<String, Object>) result).get("min"), equalTo(10L)); assertThat(((Map<String, Object>) result).get("max"), equalTo("100")); assertThat(((Map<String, Object>) result).get("foo"), equalTo(true));
assertTrue((Node.from(Short.valueOf((short) 1))).isNaturalNumber()); assertTrue((Node.from(Integer.valueOf(1))).isNaturalNumber()); assertTrue((Node.from(Long.valueOf(1))).isNaturalNumber()); assertFalse((Node.from(Float.valueOf((float) 1.0))).isNaturalNumber()); assertFalse((Node.from(Double.valueOf(1.0))).isNaturalNumber());
assertThat(OptionalUtils.stream(Optional.of("Kevin")).count(), equalTo(1L));
assertThat(schema.getType().get(), equalTo("string")); assertThat(schema.getFormat().get(), equalTo("date-time"));
assertThat(relationships, contains(Relationship.create(list, RelationshipType.LIST_MEMBER, memberTarget)));
assertFalse(trait.getTraits().contains(removedId));
assertThat(pointer, equalTo("#/components/schemas/Foo"));
assertThat(trait.getFormat(), equalTo(TimestampFormatTrait.Format.DATE_TIME));
assertThat(result, instanceOf(Map.class)); assertThat(((Map<String, Object>) result), hasKey("min")); assertThat(((Map<String, Object>) result), hasKey("max"));
assertEquals("foo", shape.getSourceLocation().getFilename()); assertEquals(1, shape.getSourceLocation().getLine()); assertEquals(2, shape.getSourceLocation().getColumn());
assertEquals("This is a test.\\n", IoUtils.readUtf8Resource(getClass(), "test.txt"));
assertEquals(true, node.isObjectNode()); assertEquals(false, node.isArrayNode()); assertEquals(false, node.isStringNode()); assertEquals(false, node.isNumberNode()); assertEquals(false, node.isBooleanNode()); assertEquals(false, node.isNullNode());
assertEquals("This is a test.\\n", IoUtils.readUtf8File(Paths.get(getClass().getResource("test.txt").toURI()).toString()));
assertThat(node.expectNumberNode(), instanceOf(NumberNode.class));
assertThat(result.getShape(memberBId).get().getTrait(SensitiveTrait.class), Matchers.not(Optional.empty())); assertTrue(result.getShape(containerId).get().asStructureShape().get().getMember("b").get().isOptional()); assertThat(result.getShape(containerId).get().asStructureShape().get().getMember("b").get(), Matchers.is(newMemberB));
assertEquals(shape.getType(), ShapeType.UNION);
assertThat(result.getShape(member1.getId()), Matchers.equalTo(Optional.of(member1))); assertThat(result.getShape(member2.getId()), Matchers.is(Optional.empty())); assertThat(result.getShape(member3.getId()), Matchers.equalTo(Optional.of(newMember3))); assertThat(result.getShape(shape.getId()), Matchers.not(Optional.empty()));
assertEquals(shape.getMember("foo").get(), MemberShape.builder().id(shape.getId().withMember("foo")).target("ns.foo#bam").build());
assertThat(ModelDiscovery.createSmithyJarManifestUrl("/foo.jar"), equalTo(new URL("jar:file:/foo.jar!/META-INF/smithy/manifest")));
assertEquals("This is a test.\\n", IoUtils.readUtf8Resource( getClass().getClassLoader(), "software/amazon/smithy/utils/test.txt"));
assertTrue(FunctionalUtils.not(test -> false).test(""));
assertThat(ListUtils.copyOf(Collections.emptyList()), empty());
assertEquals("(string: `ns.foo#baz`)", shape.toString());
assertThat(ref.toPointer(key.getId()), equalTo("#/definitions/Scripts/propertyNames")); assertThat(ref.toPointer(value.getId()), equalTo("#/definitions/Scripts/additionalProperties"));
assertThat(code, not(0)); assertThat(sb.toString(), not(emptyString()));
assertThat(NodeDiff.diff(actual, expected), containsInAnyOrder( "[/foo]: Expected `\\"baz\\"` but found `\\"bar\\"`", "[]: Expected key `fizz` not present.", "[]: Extra key `snap` encountered with content: \\"crackle\\""));
assertThat(result, instanceOf(ArrayList.class)); assertThat((ArrayList<Object>) result, contains("a", "b"));
assertThat(pointer, equalTo("#/definitions/Scripts/items"));
assertEquals(shape.getType(), ShapeType.RESOURCE);
assertThat(ListUtils.of("Jason"), contains("Jason"));
assertThat(models, contains( new URL(prefix + "foo.smithy"), new URL(prefix + "baz/bar/example.json"), new URL(prefix + "test"), new URL(prefix + "test2")));
assertThat(help, containsString("Unknown command or argument"));
assertThat(node.getElements(), hasSize(2));
assertThat(events, hasSize(1)); assertThat(events.get(0).getMessage(), equalTo("A@@B"));
assertThat(NodeDiff.diff(Node.from("pop"), Node.from("pop")), empty()); assertThat(NodeDiff.diff(Node.from("foo"), Node.from("bar")), contains("[]: Expected `\\"bar\\"` but found `\\"foo\\"`"));
assertThat(shape.getMember().getId(), equalTo(ShapeId.from("ns.bar#bar$member"))); assertThat(shape.getMember().getTarget(), equalTo(ShapeId.from("ns.foo#bam")));
assertThat(schema.getType().get(), equalTo("number")); assertFalse(schema.getFormat().isPresent());
assertThat(help, containsString("mytest"));
assertThat(MapUtils.of(), anEmptyMap());
assertThat(result.getSetMeHere(), equalTo("hi1")); assertThat(result.getSetMeHereToo(), equalTo("hi2")); assertThat(result.getIgnoreMe(), nullValue());
assertThat(result.getShape(memberId).get().getTrait(SensitiveTrait.class), Matchers.not(Optional.empty())); assertThat(result.getShape(containerId).get().asListShape().get().getTrait(LengthTrait.class), Matchers.not(Optional.empty())); assertThat(result.getShape(containerId).get().asListShape().get().getMember(), Matchers.is(newMember));
assertThat(result.expectShape(shapeId).getId(), Matchers.equalTo(shapeId)); assertThat(result.expectShape(shapeId).getTrait(SensitiveTrait.class), Matchers.is(Optional.empty()));
assertEquals(Short.valueOf(number), node.getValue());
assertTrue(result.getShape(newContainerId).isPresent()); assertEquals(newContainer.getMember().getId(), newMemberId); assertFalse(result.getShape(containerId).isPresent());
assertThat(strategy.toPointer(ShapeId.from("com.foo#Nope")), equalTo("#/definitions/Nope"));
assertThat(e.getMessage(), equalTo( "Unable to find a zero-arg constructor for Collection " + "software.amazon.smithy.model.node.NodeMapperTest$NonZeroArgConstructorCollection"));
assertTrue(trait.isPresent()); assertThat(trait.get(), instanceOf(ServiceTrait.class)); assertThat(serviceTrait.getCloudTrailEventSource(), equalTo("foo.amazonaws.com"));
assertThat(events, hasSize(1)); assertThat(events.get(0).getShapeId(), equalTo(Optional.of(ShapeId.from("foo.bar#A"))));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D"));
assertThat(a, not(equalTo(b)));
assertThat(shape.members(), hasSize(2)); assertThat(shape.members(), contains(shape.getMember("foo").get(), shape.getMember("baz").get())); assertThat(shape.getAllMembers().keySet(), contains("foo", "baz"));
assertThat(connected, containsInAnyOrder(list, listMember, map, key, value, string));
assertThat(shape.getMember().getId(), equalTo(ShapeId.from("ns.bar#bar$member"))); assertThat(shape.getMember().getTarget(), equalTo(ShapeId.from("ns.foo#bam")));
assertThat(thrown.getMessage(), containsString("Pattern must not contain a greedy label"));
assertThat(thrown.getMessage(), containsString("Literal segments must not contain `}`"));
assertEquals(NodeType.ARRAY, type); assertEquals("array", type.toString());
assertThat(mapper.deserialize(value, ShapeId.class), equalTo(ShapeId.from("com.foo#Bar")));
assertThat(FooEnum.FOO, equalTo(mapper.deserialize(Node.from("foo"), FooEnum.class))); assertThat(FooEnum.BAZ, equalTo(mapper.deserialize(Node.from("Baz"), FooEnum.class))); assertThat(FooEnum.BAR, equalTo(mapper.deserialize(Node.from("BAR"), FooEnum.class)));
assertTrue(result.getShape(toId).isPresent()); assertFalse(result.getShape(fromId).isPresent()); assertEquals(trait.toNode(), node);
assertEquals(result.shapes().count(), 1); assertEquals(result.getShape(stringId).get(), fooTarget);
assertThat(shape.members(), hasSize(1));
assertThat(NodeDiff.diff(actual, expected), contains("[]: Expected element (position 2) not encountered in list: \\"pop\\""));
assertEquals(shape.getMember(), MemberShape.builder().id(shape.getId().withMember("member")).target("ns.foo#bam").build());
assertThat(result.getMetadata().get("foo"), Matchers.equalTo(Node.from("string"))); assertThat(result.getMetadata().get("baz"), Matchers.nullValue()); assertThat(result.getMetadata().get("lorem"), Matchers.nullValue());
assertThat(mapper.deserialize(Node.from("hi"), StringNode.class), equalTo(Node.from("hi"))); assertThat(mapper.deserialize(Node.from(true), BooleanNode.class), equalTo(Node.from(true)));
assertThat(event.getSeverity(), is(Severity.WARNING)); assertThat(event.getShapeId().get(), equalTo(service.getId())); assertThat(event.getMessage(), containsString("must not use placeholders"));
assertThat(thrown.getMessage(), containsString("2 and 50"));
assertThat(dependency.expectProperty("foo", String.class), equalTo("baz!"));
assertTrue(node.get(0).isPresent()); assertEquals(strNode, node.get(0).get()); assertFalse(node.get(1).isPresent());
assertThat(SetUtils.of("Jason", "Michael", "Kevin"), containsInAnyOrder("Jason", "Michael", "Kevin"));
assertThat(NodeDiff.diff(Node.from(true), Node.from(true)), empty()); assertThat(NodeDiff.diff(Node.from(true), Node.from(false)), contains("[]: Expected `false` but found `true`"));
assertThat(result.shapes().count(), Matchers.is(1L));
assertThat(result.shapes().count(), Matchers.is(1L)); assertThat(result.getShape(bId), Matchers.not(Optional.empty()));
assertEquals(elements, node.getElements());
assertThat(e.getMessage(), containsString("failed with exit code"));
assertThat(SetUtils.of("Jason"), contains("Jason"));
assertThat(thrown.getMessage(), containsString("URI patterns must not end with \'?\'"));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D")); assertThat(map, hasEntry("5", "E")); assertThat(map, hasEntry("6", "F")); assertThat(map, hasEntry("7", "G"));
assertThat(ref.toPointer(baz.getMember("bam").get().getId()), equalTo("#/definitions/Bam"));
assertThat(events, not(empty()));
assertThat(result.expectObjectNode().getStringMap(), hasKey("foo")); assertThat(result.expectObjectNode().getStringMap(), not(hasKey("sourceLocation")));
assertThat(result.getShape(memberBId).get().getTrait(SensitiveTrait.class), Matchers.not(Optional.empty())); assertThat(result.getShape(containerId).get().asUnionShape().get().getMember("b").get(), Matchers.is(newMemberB));
assertEquals(members, node.getMembers());
assertFalse(trait.getTraits().contains(removedId));
assertThat(result, instanceOf(HashMap.class)); assertThat(((Map<String, Object>) result).get("foo"), equalTo("foo"));
assertThat(format, equalTo( "ERROR: - (foo)" + "\\n = This is the message" + "\\n"));
assertThat(models, empty());
assertEquals("name.space", id.getNamespace()); assertEquals("Name", id.getName()); assertEquals("member", id.getMember().get());
assertThat(trait.toNode(), equalTo(objectNode));
assertTrue(ids.contains(id));
assertThat(thrown.getMessage(), containsString("Error parsing"));
assertTrue(Node.from("foo").asStringNode().isPresent());
assertThat(events.get(0).getMessage(), equalTo("before `\\"hello\\"` after. ID: foo.bar#Baz. Var: [foo.bar#Baz]."));
assertThat(e.getMessage(), equalTo( "Unable to find a zero-arg constructor for Map " + "software.amazon.smithy.model.node.NodeMapperTest$NoZeroArgCtorMap"));
assertEquals(expected, given);
assertThat(modelA, equalTo(modelA)); assertThat(modelA, not(equalTo(modelB))); assertThat(modelA, not(equalTo(null)));
assertSame(node1, node2);
assertThat(trait.hasNames(), is(true));
assertTrue(manifest.hasFile("RestService.openapi.json"));
assertThat(ModelDiscovery.createSmithyJarManifestUrl("jar:file:/foo.jar"), equalTo(new URL("jar:file:/foo.jar!/META-INF/smithy/manifest")));
assertThat(thrown.getMessage(), containsString("company names"));
assertThat(events, not(empty())); assertThat(event.getMessage(), equalTo("Test Hello!"));
assertThat(node.expectStringNode(), instanceOf(StringNode.class));
assertTrue(result.getShape(newContainerId).isPresent()); assertEquals(newMember.getId(), newMemberId); assertFalse(result.getShape(containerId).isPresent());
assertFalse((Node.from(Short.valueOf((short) 1))).isFloatingPointNumber()); assertFalse((Node.from(Integer.valueOf(1))).isFloatingPointNumber()); assertFalse((Node.from(Long.valueOf(1))).isFloatingPointNumber()); assertTrue((Node.from(Float.valueOf((float) 1.0))).isFloatingPointNumber()); assertTrue((Node.from(Double.valueOf(1.0))).isFloatingPointNumber());
assertEquals(0, s.length);
assertTrue(trait.isPresent()); assertThat(trait.get(), instanceOf(ExamplesTrait.class)); assertThat(examples.toNode(), equalTo(node)); assertThat(examples.toBuilder().build(), equalTo(examples));
assertEquals(result.shapes().count(), 1); assertEquals(result.getShape(stringId).get(), target);
assertThat(manifestString, containsString("model.json")); assertThat(manifestString, not(containsString("jar-import"))); assertThat(manifest.getFileString("model.json").get(), containsString("\\"foo.baz#A\\"")); assertThat(manifest.getFileString("model.json").get(), containsString("\\"foo.baz#B\\"")); assertThat(manifest.getFileString("model.json").get(), containsString("\\"foo.baz#C\\""));
assertThat(thrown.getMessage(), containsString("URI pattern must not contain a fragment"));
assertThat(arnIndex.getServiceArnNamespace(ShapeId.from("ns.foo#NonAwsService")), equalTo("nonawsservice"));
assertThat(thrown.getMessage(), containsString("Literal segments must not contain"));
assertThat(map, hasEntry("1", "A")); assertThat(map, hasEntry("2", "B")); assertThat(map, hasEntry("3", "C")); assertThat(map, hasEntry("4", "D")); assertThat(map, hasEntry("5", "E"));
assertThat(thrown.getMessage(), containsString("Unclosed label found in pattern"));
assertThat(result, instanceOf(HashSet.class)); assertThat(result, contains("a", "b"));
assertThat(SetUtils.copyOf(Collections.emptyList()), empty());
assertThat(relationships, containsInAnyOrder( Relationship.create(map, RelationshipType.MAP_KEY, keyTarget), Relationship.create(map, RelationshipType.MAP_VALUE, valueTarget)));
assertThat(mapper.deserialize(Node.from(true), Boolean.class), equalTo(true)); assertThat(mapper.deserialize(Node.from(true), boolean.class), equalTo(true)); assertThat(mapper.deserialize(Node.from(true), Object.class), equalTo(true));
assertTrue(result.getShape(toStringId).isPresent()); assertFalse(result.getShape(fromStringId).isPresent());
assertEquals("xyz", node.expectOneOf(Arrays.asList("abc", "mno", "xyz")));
assertThat(ModelDiscovery.getSmithyModelPathFromJarUrl(new URL("jar:file:/a.jar!/META-INF/smithy/a/b.json")), equalTo("a/b.json")); assertThat(ModelDiscovery.getSmithyModelPathFromJarUrl(new URL("jar:file:/a.jar!/META-INF/smithy/b.json")), equalTo("b.json"));
assertThat(format, startsWith("ERROR: example.smithy#Foo (foo)")); assertThat(format, containsString("\\n @ ")); assertThat(format, endsWith( "\\n |" + "\\n 3 | structure Foo {" + "\\n | ^" + "\\n = This is the message" + "\\n"));
assertThat(thrown.getMessage(), containsString("A greedy label must be the last label in its pattern"));
assertThat(validator.validate(model), empty());
assertThat(ref1, equalTo(ref1)); assertThat(ref1, not(equalTo(ref2))); assertThat(ref1, not(equalTo(ref3))); assertThat(ref2, not(equalTo(ref3)));
assertTrue(level.isLabel()); assertThat(level.toString(), equalTo("{foo}"));
assertThat(connected, containsInAnyOrder(list, listMember, map, key, value, string));
assertThat(NodeDiff.diff(actual, expected), contains("[]: Extra key `fizz` encountered with content: \\"buzz\\""));
assertThat(NodeDiff.diff(Node.nullNode(), Node.from(true)), contains(String.format( "[]: Expected node of type `boolean` but found node of type `null`.%n%nExpected: true%n%n Found: null")));
assertEquals(shape.getType(), ShapeType.BOOLEAN);
assertThat(NodeDiff.diff(Node.from(10), Node.from(10)), empty()); assertThat(NodeDiff.diff(Node.from(2), Node.from(1)), contains("[]: Expected `1` but found `2`"));
assertThat(trait.toNode(), equalTo(values)); assertThat(trait.toBuilder().build(), equalTo(trait));
assertEquals(Long.valueOf(number), node.getValue());
assertThat(node.size(), is(2)); assertSame(strNode1, node.get(0).get()); assertSame(strNode2, node.get(1).get());
assertTrue(InstrumentationLoadTimeWeaver.isInstrumentationAvailable());
assertEquals(1, IntRangeUtil.requirePositive(1, RuntimeException::new));
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(m1, instance.get1());
assertTrue(instance().getFields().isEmpty());
assertEquals(m2, instance.get2());
assertEquals(expected, actual);
assertEquals(m20, instance.get20());
assertEquals(m6, instance.get6());
assertEquals(Generic.BoundType.EXTENDS, instance().getBoundType());
assertFalse(instance().getParent().isPresent());
assertEquals(0.0, IntRangeUtil.requireNonNegative(0, RuntimeException::new));
assertEquals(18, (int) instance.get18().orElseThrow(NoSuchElementException::new));
assertEquals(m9, instance.get9());
assertEquals(0.0, IntRangeUtil.requireInRangeClosed(0, -1,0, RuntimeException::new));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), instance.apply(0));
assertEquals(expected, actual);
assertEquals(1, (int) instance.get1());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.orThrow());
assertEquals(m3, instance.get3());
assertEquals(m2, instance.get2());
assertEquals(m3, instance.get3());
assertEquals(expected, actual);
assertNotNull(DATABASE_NAMING_CONVENTION.quoteField("field"));
assertEquals("Speedment, Inc.", instance.getVendor());
assertEquals(m3, instance.get3());
assertEquals(fullName("User"), instance.fullyQualifiedTypeName());
assertEquals("the_oval_room", Formatting.toUnderscoreSeparated("theOvalRoom"));
assertEquals(fullNameGen("GeneratedUser"), instance.generatedEntityType().getTypeName());
assertEquals(m14, instance.get14());
assertEquals(expected, actual);
assertEquals(INSTANCE, INSTANCE); assertFalse(INSTANCE.equals(null)); assertFalse(INSTANCE.equals(1)); assertNotEquals(INSTANCE, other); assertNotEquals(other, INSTANCE);
assertEquals(expResult, result); assertTrue(result.isReversed());
assertEquals(Boolean.class, typeMapper().getJavaType(column()));
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertTrue(OptionalUtil.ofNullable(1L).isPresent()); assertTrue(OptionalUtil.ofNullable(1).isPresent()); assertTrue(OptionalUtil.ofNullable(1d).isPresent()); assertTrue(OptionalUtil.ofNullable(true).isPresent()); assertFalse(OptionalUtil.ofNullable((Long) null).isPresent()); assertFalse(OptionalUtil.ofNullable((Integer) null).isPresent()); assertFalse(OptionalUtil.ofNullable((Double) null).isPresent()); assertFalse(OptionalUtil.ofNullable((Boolean) null).isPresent());
assertEquals(19, (int) instance.get19());
assertEquals(1, instance.applyAsInt((short) 1));
assertNull(Formatting.withFirst(null, c -> "X"));
assertEquals(BYTES.length, standardBlob.length());
assertArrayEquals(array,actual);
assertEquals(m1, instance.get1());
assertNotNull(composeToBoolean.firstStep()); assertNotNull(composeToBoolean.secondStep()); assertFalse(composeToBoolean.applyAsBoolean(null)); assertTrue(composeToBoolean.applyAsBoolean("test")); assertFalse(composeToBoolean.applyAsBoolean("a"));
assertEquals(10, (int) instance.get10());
assertEquals(9, (int) instance.get9());
assertEquals(1, longHolder.get());
assertNotNull(b);
assertEquals(19, (int) instance.get19());
assertEquals(16, (int) instance.get16());
assertEquals(1, (int) instance.get1());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8), instance.apply(0));
assertNotNull(instance.orThrow());
assertFalse(instance.tryAdvance((IntConsumer) i -> cnt.incrementAndGet())); assertEquals(0, cnt.get());
assertEquals(m2, instance.get2());
assertEquals(m5, instance.get5());
assertNotNull(map); assertEquals(0.6789, map.get("average"));
assertEquals(LOGGER_FORMATTER.apply(Level.TRACE, LOGGER_NAME, MESSAGE), output);
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertEquals(1, (int) instance.get1());
assertEquals(3, (int) instance.get3());
assertArrayEquals(expected, actual);
assertEquals(fullName("UserImpl"), instance.entityImplType().getTypeName());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(MapperType.LONG_TO_LONG, toLongMapper.mapperType());
assertEquals(0.0, LongRangeUtil.requireNonNegative(0, RuntimeException::new));
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertEquals(2, instance.expressions().size());
assertEquals(3, (int) instance.get3());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), instance.apply(0));
assertEquals(FOO_SIMPLE_NAME, Formatting.shortName(FOO_NAME));
assertEquals(m6, instance.get6());
assertEquals(m2, instance.get2());
assertEquals(-1.0, IntRangeUtil.requireNonPositive(-1, RuntimeException::new));
assertTrue(instance.getLabel().toLowerCase().contains("enum"));
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(Boolean.class, typeMapper().getJavaType(column()));
assertEquals(m7, instance.get7());
assertEquals(m2, instance.get2());
assertEquals(m0, instance.get0());
assertEquals(inter, instance().getParent().orElseThrow(NoSuchElementException::new));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(m7, instance.get7());
assertNotNull(toInt); assertEquals("three".length(), toInt.applyAsInt("three")); assertEquals(0, toInt.applyAsInt(null));
assertTrue(populatedOptional.isPresent()); assertEquals("value", populatedOptional.get()); assertFalse(emptyOptional.isPresent());
assertEquals(m5, instance.get5());
assertNotNull(INSTANCE.transform(transform, 1, factory));
assertEquals(expected, actual);
assertNotNull(map); assertEquals(expected, map.get("items"));
assertTrue(instance().getAnnotations().isEmpty());
assertEquals(m0, instance.get0());
assertEquals(0, instance.dropWhile(i -> ELEMENT == i).count()); assertEquals(1, instance.dropWhile(i -> OTHER_ELEMENT == i).count());
assertEquals(SUFFIX, instance.suffix());
assertEquals(m4, instance.get4());
assertEquals(13, (int) instance.get13());
assertEquals(7, (int) instance.get7());
assertFalse(instance().getParent().isPresent());
assertEquals(5, (int) instance.get5());
assertEquals(m3, instance.get3());
assertEquals(m0, instance.get0());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.expression());
assertEquals(1, (int) instance.get1());
assertEquals(m1, instance.get1());
assertEquals(m0, instance.get0());
assertEquals(m1, instance.get1());
assertEquals(INDENT + A + Formatting.nl() + INDENT + B, result);
assertEquals(m5, instance.get5());
assertEquals(m1, instance.get1());
assertEquals(Level.FATAL, logger.getLevel());
assertEquals(expected, actual);
assertEquals(m0, instance.get0());
assertEquals(14, (int) instance.get14());
assertEquals(m2, instance.get2());
assertEquals("interface ", INSTANCE.renderDeclarationType());
assertEquals(m4, instance.get4());
assertEquals("", INSTANCE.renderSupertype(GENERATOR, Interface.of("Foo")));
assertEquals(RS_NCLOB.getValue(), ResultSetUtil.getNClob(RESULT_SET, RS_NCLOB.getLabel())); assertEquals(RS_NCLOB.getValue(), ResultSetUtil.getNClob(RESULT_SET, RS_NCLOB.getIndex())); assertNull(ResultSetUtil.getNClob(NULL_RESULT_SET, RS_NCLOB.getLabel())); assertNull(ResultSetUtil.getNClob(NULL_RESULT_SET, RS_NCLOB.getIndex()));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(m13, instance.get13());
assertEquals(INDENT + A + Formatting.nl() + INDENT + B, result);
assertEquals(m9, instance.get9());
assertEquals(0, (int) instance.get0());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(m14, instance.get14());
assertEquals(1L, actual);
assertEquals(int.class, instance().getType());
assertEquals(javadoc, instance().getJavadoc().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getImports().isEmpty());
assertEquals(remains--, instance.estimateSize());
assertEquals(expected, actual);
assertTrue(instance().getImports().isEmpty());
assertEquals(expected, actual); assertTrue(actual instanceof NavigableMap);
assertEquals(MapperType.BYTE_TO_BYTE, toByteMapper.mapperType());
assertEquals("1", foo.val);
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(m8, instance.get8());
assertEquals(3, (int) instance.get3());
assertEquals(m2, instance.get2());
assertTrue(instance().getImports().isEmpty());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(m10, instance.get10());
assertEquals(m15, instance.get15());
assertEquals(LEVEL, instance.getLevel());
assertEquals(1, IntRangeUtil.requireNonZero(1, RuntimeException::new));
assertNotNull(Expressions.floatToDouble(b -> (float) b));
assertEquals(m0, instance.get0());
assertNotEquals(0, instance.hashCode());
assertTrue(instance.negate() instanceof IsNull);
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(singletonList(OTHER_ELEMENT), s);
assertTrue(result);
assertEquals(m5, instance.get5());
assertEquals(15, (int) instance.get15());
assertEquals(m14, instance.get14());
assertEquals("User", instance.typeName());
assertTrue(instance.getName().contains(Integer.class.getSimpleName()));
assertEquals(Collections.singletonList(1), result); assertTrue(fClosed.get());
assertEquals(expected, actual);
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertTrue(OptionalUtil.parseLong("1").isPresent()); assertFalse(OptionalUtil.parseLong(null).isPresent());
assertEquals(m0, instance.get0());
assertEquals(0.0, DoubleRangeUtil.requireInRangeClosed(0.0, -1.0,0.0));
assertEquals("TheOvalRoom", Formatting.nameFromExternal("the oval_room "));
assertNotNull(loggerEvent);
assertEquals(m3, instance.get3());
assertEquals(1, instance.takeWhile(i -> ELEMENT == i).count()); assertEquals(0, instance.takeWhile(i -> OTHER_ELEMENT == i).count());
assertEquals(m4, instance.get4());
assertEquals(m0, instance.get0());
assertNotNull(Elements.head());
assertEquals(Foo.class, instance.getType());
assertEquals(expected, actual);
assertEquals(BigDecimal.valueOf(1), toBigDecimalOrThrow.apply(BigDecimal.valueOf(1)));
assertEquals(int.class, instance().getType());
assertEquals(m6, instance.get6());
assertNull(instance.toDatabaseType(null));
assertEquals(-1.0, DoubleRangeUtil.requireNotEquals(-1.0, 0.0));
assertEquals(m11, instance.get11());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(m20, instance.get20());
assertFalse(instance().getJavadoc().isPresent());
assertEquals("A", instance().getJavadoc().orElseThrow(NoSuchElementException::new).getText());
assertEquals(m5, instance.get5());
assertEquals(6, (int) instance.get6());
assertTrue(instance().getAnnotations().isEmpty());
assertEquals(inter, instance().getParent().orElseThrow(NoSuchElementException::new));
assertEquals(COLUMN, INSTANCE.getColumnId());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertNotNull(getMutatorInstance().addNewDbms());
assertEquals("_1" + FOO_SIMPLE_NAME + "_", Formatting.replaceIfIllegalJavaIdentifierCharacter("1" + FOO_SIMPLE_NAME + "~"));
assertNotNull(toShort); assertEquals("three".length(), toShort.applyAsShort("three")); assertEquals(0, toShort.applyAsShort(null));
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.DEBUG.toText()));
assertEquals(m19, instance.get19());
assertEquals(3, actual);
assertEquals(20, (int) instance.get20());
assertEquals(m5, instance.get5());
assertNotEquals(0, instance.characteristics() & Spliterator.NONNULL); assertNotEquals(0, instance.characteristics() & Spliterator.SIZED); assertNotEquals(0, instance.characteristics() & Spliterator.SUBSIZED); assertNotEquals(0, instance.characteristics() & Spliterator.IMMUTABLE); assertNotEquals(0, instance.characteristics() & Spliterator.DISTINCT); assertNotEquals(0, instance.characteristics() & Spliterator.ORDERED);
assertEquals(9, (int) instance.get9());
assertEquals(m8, instance.get8());
assertEquals(m6, instance.get6());
assertTrue(instance.anyMatch(ELEMENT::equals)); assertFalse(SingletonStream.of(OTHER_ELEMENT).anyMatch(ELEMENT::equals));
assertEquals(m4, instance.get4());
assertTrue(result.contains("{")); assertTrue(result.contains(" x++;")); assertTrue(result.contains(" return x;")); assertTrue(result.contains("}"));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(1.0, DoubleRangeUtil.requireNotEquals(1.0, 0.0, RuntimeException::new));
assertEquals(1, toCharOrThrow.applyAsChar((char) 1));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(m5, instance.get5());
assertEquals(m1, instance.get1());
assertEquals(m0, instance.get0());
assertEquals(1, instance.applyAsInt((short) 0));
assertEquals(Optional.of(ELEMENT), instance.findFirst());
assertNotNull(instance.unordered());
assertEquals(m4, instance.get4());
assertEquals(Optional.empty(), instance().getStaticMember());
assertNull(event.get());
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertTrue(actual.isEmpty());
assertEquals(1.0, DoubleRangeUtil.requireNotEquals(1.0, -1.0));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertNotNull(b);
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(m7, instance.get7());
assertEquals(8, (int) instance.get8());
assertEquals(m4, instance.get4());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertEquals(applicationMetadata.makeProject().getName(), instance.getProject().getName());
assertEquals(7, (int) instance.get7());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(NAME, loggerEvent.getName());
assertEquals(1, instance.count());
assertEquals("GeneratedUserManagerImpl", instance.generatedManagerImplName());
assertNotNull(result);
assertEquals(10, (int) instance.get10());
assertEquals(13, (int) instance.get13());
assertArrayEquals(reference.toArray(), instance.toArray());
assertEquals(1, toDoubleOrThrow.applyAsDouble(1d));
assertEquals(0.0, IntRangeUtil.requireNotEquals(0, -1, RuntimeException::new));
assertEquals(19, (int) instance.get19());
assertEquals(LOGGER_FORMATTER, instance.getFormatter());
assertEquals(0, (int) instance.get0());
assertEquals(TuplesOfNullables.ofNullables(0), instance.apply(0));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2), instance.apply(0));
assertEquals(19, (int) instance.get19().orElseThrow(NoSuchElementException::new));
assertEquals(m5, instance.get5());
assertEquals(m14, instance.get14());
assertEquals(m5, instance.get5());
assertEquals(0.0, DoubleRangeUtil.requireInRangeClosed(0.0, -1.0,0.0, RuntimeException::new));
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertNotNull(toLong); assertEquals("three".length(), toLong.applyAsLong("three")); assertEquals(0, toLong.applyAsLong(null));
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(2, (int) instance.get2());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(m7, instance.get7());
assertEquals("UserManager", instance.managerName());
assertNotNull(composeToShort.firstStep()); assertNotNull(composeToShort.secondStep()); assertNull(composeToShort.apply(null)); assertNotNull(composeToShort.apply("test"));
assertEquals(0.0, LongRangeUtil.requireNotEquals(0, 1, RuntimeException::new));
assertTrue(instance().getParent().isPresent());
assertEquals(m3, instance.get3());
assertNotNull(toByteNullable); assertEquals(0, toByteNullable.applyAsByte("1")); assertNull(toByteNullable.apply(null));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertEquals(SUFFIX, instance.suffix());
assertEquals(0, (int) instance.get0());
assertEquals(m2, instance.get2());
assertEquals(Arrays.asList(1, 2, 3), Permutation.permutation(0, LIST));
assertEquals(expected, actual);
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertNotNull(Elements.input());
assertEquals(-1.0, DoubleRangeUtil.requireNotEquals(-1.0, 1.0, RuntimeException::new));
assertEquals(m11, instance.get11());
assertEquals(m0, instance.get0());
assertEquals(2, (int) instance.get2());
assertEquals(m1, instance.get1());
assertTrue(gotException); assertTrue(fClosed.get()); assertTrue(gClosed.get());
assertEquals(11, (int) instance.get11());
assertEquals(expected, actual);
assertEquals(m2, instance.get2());
assertEquals(6, (int) instance.get6());
assertEquals(stringToInt, ms.toMap());
assertEquals(1, (int) instance.get1());
assertEquals(1, intHolder.get());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertSame(SUPPLIER, COLLECTOR.supplier());
assertEquals(foo, expected); assertNull(InjectorUtil.findIn(Integer.class, injector, instances, false));
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertEquals(m15, instance.get15());
assertEquals(9, (int) instance.get9());
assertEquals(m3, instance.get3());
assertNull(instance.toJavaType(column, User.class, null));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertEquals(0, (int) instance.get0());
assertEquals(m7, instance.get7());
assertEquals(m13, instance.get13());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(m6, instance.get6());
assertEquals(1, (int) instance.get1());
assertEquals(m1, instance.get1());
assertEquals(16, (int) instance.get16());
assertEquals(m14, instance.get14());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(m10, instance.get10());
assertEquals(8, (int) instance.get8());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertSame(userManager, instance.getManager());
assertEquals(4, (int) instance.get4());
assertEquals(18, (int) instance.get18());
assertEquals(refStream().collect(Collectors.toSet()), entries);
assertEquals(MapperType.BYTE_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(expected, actual);
assertEquals(1, (int) instance.get1());
assertEquals(1, IntRangeUtil.requireNonNegative(1, RuntimeException::new));
assertTrue(instance().getInitializers().isEmpty());
assertEquals(m1, instance.get1());
assertTrue(instance.hasNext());
assertNotNull(Expressions.shortToDoubleNullable(b -> (short) b));
assertEquals(1, (int) instance.get1());
assertNotNull(INSTANCE.wrapMethod(Method.of("x", int.class)));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(m9, instance.get9());
assertEquals(3, (int) instance.get3());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), instance.apply(0));
assertEquals(2, (int) instance.get2());
assertEquals("GeneratedUser", instance.generatedEntityName());
assertEquals(m6, instance.get6());
assertFalse(instance().getJavadoc().isPresent());
assertEquals(13, (int) instance.get13());
assertEquals(Tuples.of(0, 1, 2), instance.apply(0));
assertEquals(1, INSTANCE.fields().count());
assertEquals(m7, instance.get7());
assertEquals(m10, instance.get10());
assertEquals(m21, instance.get21());
assertEquals(m1, instance.get1());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(m12, instance.get12());
assertEquals(Optional.empty(), Formatting.packageName(A));
assertSame(method, instance.getMethod());
assertEquals(10, (int) instance.get10());
assertFalse(instance().getJavadoc().isPresent());
assertEquals(m4, instance.get4());
assertTrue(code.contains("enum Name")); assertTrue(code.contains("fromDatabase(String"));
assertEquals(m0, instance.get0());
assertEquals(m15, instance.get15());
assertTrue(instance().getFields().isEmpty());
assertEquals(m14, instance.get14());
assertNotNull(generator.on(""));
assertEquals(m1, instance.get1());
assertEquals(m1, instance.get1());
assertEquals(3, (int) instance.get3());
assertEquals(Optional.of(ELEMENT), instance.findAny());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), instance.apply(0));
assertTrue(injector.get(Foo.class).isPresent()); assertFalse(injector.get(Integer.class).isPresent());
assertEquals(0.0, DoubleRangeUtil.requireNonNegative(0.0, RuntimeException::new));
assertTrue(output.contains(Level.TRACE.toText()));
assertEquals(2, (int) instance.get2());
assertTrue(result);
assertTrue(instance().getExceptions().isEmpty());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), instance.apply(0));
assertEquals(byte[].class,mapper.getJavaType(null));
assertEquals(m6, instance.get6());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(0.0, DoubleRangeUtil.requireInRangeClosed(0.0, -1.0,1.0));
assertEquals(m15, instance.get15());
assertEquals(rows[0].length(), rows[1].length());
assertEquals(18, (int) instance.get18().orElseThrow(NoSuchElementException::new));
assertEquals(m8, instance.get8());
assertEquals(11, (int) instance.get11());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(m8, instance.get8());
assertEquals(m5, instance.get5());
assertEquals(Optional.of("1"), binLen); assertEquals(Optional.of("Olle"), r);
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertTrue(output.contains(Level.INFO.toText()));
assertEquals(1, cnt.get());
assertEquals(expected, actual);
assertEquals(1, instance.takeWhile(i -> ELEMENT == i).count()); assertEquals(0, instance.takeWhile(i -> OTHER_ELEMENT == i).count());
assertEquals(0, IntRangeUtil.requireEquals(0, 0, RuntimeException::new));
assertEquals(m9, instance.get9());
assertEquals(expResult, result);
assertEquals(12, (int) instance.get12());
assertEquals(13, (int) instance.get13());
assertEquals(7, (int) instance.get7());
assertEquals(m12, instance.get12());
assertEquals(6, (int) instance.get6());
assertEquals(m2, instance.get2());
assertEquals(expected, actual);
assertEquals(m12, instance.get12());
assertEquals(expected, actual);
assertEquals(m5, instance.get5());
assertEquals(m2, instance.get2());
assertEquals(expected, actual);
assertEquals(m6, instance.get6());
assertEquals(Optional.empty(), instance().getJavadoc());
assertEquals("1", result.orElseThrow(NoSuchElementException::new));
assertEquals(RS_DOUBLE.getValue(), ResultSetUtil.getDouble(RESULT_SET, RS_DOUBLE.getLabel())); assertEquals(RS_DOUBLE.getValue(), ResultSetUtil.getDouble(RESULT_SET, RS_DOUBLE.getIndex())); assertNull(ResultSetUtil.getDouble(NULL_RESULT_SET, RS_DOUBLE.getLabel())); assertNull(ResultSetUtil.getDouble(NULL_RESULT_SET, RS_DOUBLE.getIndex()));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(m7, instance.get7());
assertEquals(5, (int) instance.get5());
assertEquals(expected, actual);
assertEquals(-1, LongRangeUtil.requireNegative(-1, RuntimeException::new));
assertEquals(13, (int) instance.get13());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertNull(toDoubleNullable.apply(null));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m14, instance.get14());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertSame(COMBINER, COLLECTOR.combiner());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertNotNull(result);
assertEquals(0.0, IntRangeUtil.requireNonPositive(0, RuntimeException::new));
assertArrayEquals(ARRAY_WITHOUT_NULL, NullUtil.requireNonNullElements(ARRAY_WITHOUT_NULL));
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.INFO.toText()), output);
assertEquals(Optional.empty(), instance().getParent());
assertNotNull(result);
assertSame(FINISHER, COLLECTOR.finisher());
assertEquals(1, intHolder.get());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(17, (int) instance.get17());
assertEquals(expected, actual); assertTrue(actual instanceof ConcurrentMap);
assertNotNull(toInt); assertEquals("three".length(), toInt.applyAsInt("three")); assertEquals(0, toInt.applyAsInt(null));
assertEquals("", INSTANCE.renderConstructors(GENERATOR, Interface.of("A")));
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertEquals(injectable1, injectable1); assertEquals(injectable2, injectable2); assertEquals(injectable1, injectable2); assertEquals(injectable2, injectable1); assertNotEquals(injectable1, injectable3); assertNotEquals(injectable3, injectable4); assertNotEquals(injectable1, injectable4); assertFalse(injectable1.equals(1)); assertFalse(injectable1.equals(null));
assertEquals(m7, instance.get7());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(expected, actual);
assertEquals(m0, instance.get0());
assertNotNull(builder.remove(manager));
assertEquals(6, (int) instance.get6());
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertEquals(0.0, DoubleRangeUtil.requireNotEquals(0.0, 1.0, RuntimeException::new));
assertEquals(m9, instance.get9());
assertTrue(baz.stopped);
assertEquals(expected, actual);
assertEquals(RS_TIMESTAMP.getValue(), ResultSetUtil.getTimestamp(RESULT_SET, RS_TIMESTAMP.getLabel())); assertEquals(RS_TIMESTAMP.getValue(), ResultSetUtil.getTimestamp(RESULT_SET, RS_TIMESTAMP.getIndex())); assertNull(ResultSetUtil.getTimestamp(NULL_RESULT_SET, RS_TIMESTAMP.getLabel())); assertNull(ResultSetUtil.getTimestamp(NULL_RESULT_SET, RS_TIMESTAMP.getIndex()));
assertEquals(ELEMENT, actual, EPSILON);
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertNotNull(result);
assertNotNull(composeToString.firstStep()); assertNotNull(composeToString.secondStep()); assertNull(composeToString.apply(null)); assertNotNull(composeToString.apply("test"));
assertEquals(m0, instance.get0());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getImports().isEmpty());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(1L, instance.filter(ELEMENT::equals).count()); assertEquals(1L, instance.filter(ELEMENT::equals).filter(Objects::nonNull).count());
assertEquals(m3, instance.get3());
assertEquals(TestEnum.class, instance.enumClass());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8), instance.apply(0));
assertEquals(m5, instance.get5());
assertEquals(m12, instance.get12());
assertEquals(MapperType.STRING_TO_STRING, toStringMapper.mapperType());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertNotNull(Expressions.longToDouble(b -> (long) b));
assertNotEquals(0, instance.hashCode());
assertEquals(m6, instance.get6());
assertEquals(m9, instance.get9());
assertEquals(m10, instance.get10());
assertEquals(9, (int) instance.get9());
assertEquals(m2, instance.get2());
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(1, instance.compare("test", "a")); assertEquals(-1, instance.compare("a", "test"));
assertEquals(m18, instance.get18());
assertEquals(-1.0, LongRangeUtil.requireNotEquals(-1, 0, RuntimeException::new));
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertNotNull(JvmVersion.getSpecificationVersion());
assertEquals(-1.0, DoubleRangeUtil.requireNonPositive(-1.0));
assertEquals(short.class, typeMapper().getJavaType(column()));
assertEquals(m7, instance.get7());
assertEquals(m3, instance.get3());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertEquals(1, (int) instance.get1());
assertEquals(RS_CLOB.getValue(), ResultSetUtil.getClob(RESULT_SET, RS_CLOB.getLabel())); assertEquals(RS_CLOB.getValue(), ResultSetUtil.getClob(RESULT_SET, RS_CLOB.getIndex())); assertNull(ResultSetUtil.getClob(NULL_RESULT_SET, RS_CLOB.getLabel())); assertNull(ResultSetUtil.getClob(NULL_RESULT_SET, RS_CLOB.getIndex()));
assertTrue(s.contains("model")); assertTrue(s.contains("result")); assertTrue(s.contains("1"));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(m4, instance.get4());
assertEquals(2, (int) instance.get2());
assertEquals("UserManager", instance.managerTypeName());
assertEquals(m0, instance.get0());
assertEquals(14, (int) instance.get14());
assertEquals(CHARS, PrintUtil.limit(CHARS, CHARS.length()));
assertEquals(1.0, LongRangeUtil.requireNotEquals(1, 0, RuntimeException::new));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(m12, instance.get12());
assertNotNull(composeToByte.firstStep()); assertNotNull(composeToByte.secondStep()); assertNull(composeToByte.apply(null)); assertNotNull(composeToByte.apply("test"));
assertTrue(instance.tryAdvance((LongConsumer) i -> cnt.incrementAndGet())); assertEquals(1, cnt.get());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(m9, instance.get9());
assertNotNull(Expressions.longToDoubleNullable(b -> (long) b));
assertEquals(RS_FLOAT.getValue(), ResultSetUtil.getFloat(RESULT_SET, RS_FLOAT.getLabel())); assertEquals(RS_FLOAT.getValue(), ResultSetUtil.getFloat(RESULT_SET, RS_FLOAT.getIndex())); assertNull(ResultSetUtil.getFloat(NULL_RESULT_SET, RS_FLOAT.getLabel())); assertNull(ResultSetUtil.getFloat(NULL_RESULT_SET, RS_FLOAT.getIndex()));
assertEquals(m8, instance.get8());
assertEquals(m16, instance.get16());
assertEquals(1, (int) instance.get1());
assertEquals(1, instance.mapToLong(String::length).sum());
assertTrue(instance.negate() instanceof IsNotNull);
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(m8, instance.get8());
assertTrue(msg.contains("AnyReason"));
assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserStart()); assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserStart(true)); assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserStart(false));
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(0.0, DoubleRangeUtil.requireNonPositive(0.0, RuntimeException::new));
assertEquals(m18, instance.get18());
assertEquals(m4, instance.get4());
assertNotNull(instance.fullNameOf("schema", "table")); assertNotNull(instance.fullNameOf("schema", "table", "table"));
assertEquals(8, (int) instance.get8());
assertEquals(0.0, DoubleRangeUtil.requireNotEquals(0.0, -1.0));
assertNotNull(instance.getResultSetTableSchema());
assertEquals(licenseTerm, instance().getLicenseTerm().orElseThrow(NoSuchElementException::new));
assertEquals(value, instance().getValue());
assertEquals(0.0, DoubleRangeUtil.requireInRange(0.0, -1.0,1.0));
assertEquals(0, (int) instance.get0());
assertEquals(m9, instance.get9());
assertEquals(m8, instance.get8());
assertEquals(singletonList(Foo.class), injector.injectables().collect(toList()));
assertFalse(instance.getIfPresent(Foo.class).isPresent()); assertEquals(Foo.class, optionalNode.orElseThrow(NoSuchElementException::new).getRepresentedType());
assertEquals(m5, instance.get5());
assertNotNull(DATABASE_NAMING_CONVENTION.encloseField("field"));
assertTrue(gotException); assertTrue(fClosed.get());
assertEquals(Arrays.asList(2, 3, 1), Permutation.permutation(3, LIST));
assertEquals(m10, instance.get10());
assertEquals(m11, instance.get11());
assertEquals(refStream().collect(Collectors.toList()), entries);
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(m15, instance.get15());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(10, (int) instance.get10());
assertEquals(9, (int) instance.get9());
assertNull(instance().getValue());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.isNullPredicate());
assertEquals(Stream.of(ITEMS).collect(toList()), INSTANCE.stream().collect(toList()));
assertNotNull(instance.getText());
assertEquals(2, (int) instance.get2());
assertTrue(actual.contains(DB)); assertTrue(actual.contains(SCHEMA)); assertTrue(actual.contains(TABLE)); assertTrue(actual.contains(COLUMN));
assertEquals(1, longHolder.get());
assertEquals(m8, instance.get8());
assertEquals(m9, instance.get9());
assertEquals(LOGGER_NAME, instance.getName());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertNotNull(map); assertEquals(-0.6789, map.get("average"));
assertEquals(m14, instance.get14());
assertEquals(m2, instance.get2());
assertEquals(m3, instance.get3());
assertNotNull(instance.getInitialQuery());
assertEquals(3, (int) instance.get3());
assertEquals(m6, instance.get6());
assertNotNull(event.get());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(actual, expected, format( "Compare %s using %s", comp.getField().identifier().getColumnId(), comp ));
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(2, (int) instance.get2());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertNotNull(INSTANCE.getDependencyMgr());
assertEquals(Arrays.asList(1, 3, 2), Permutation.permutation(1, LIST));
assertEquals(TestEnum.A, toEnumOrThrow.apply("A"));
assertNotNull(Expressions.shortToDouble(b -> (short) b));
assertTrue(tagElementView.transform(generator, tagElement).isPresent());
assertEquals(1, instance.mapToInt(String::length).sum());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5), instance.apply(0));
assertEquals(m15, instance.get15());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertEquals(expected, eventConsumer.events());
assertEquals(5, (int) instance.get5());
assertEquals(RS_BYTES.getValue(), ResultSetUtil.getBytes(RESULT_SET, RS_BYTES.getIndex())); assertNull(ResultSetUtil.getBytes(NULL_RESULT_SET, RS_BYTES.getIndex()));
assertEquals(BinaryObjExpression.Operator.DIVIDE, divide.operator()); assertNotNull(divide.first()); assertNotEquals(0, divide.hashCode()); assertTrue(divide.equals(copy)); assertFalse(divide.equals(null)); assertFalse(divide.equals(1)); assertTrue(divide.equals(another1)); assertFalse(divide.equals(another2));
assertEquals(String.class,mapper.getJavaType(null));
assertNotNull(composeToChar.firstStep()); assertNotNull(composeToChar.secondStep());
assertEquals(m2, instance.get2());
assertTrue(instance.tryAdvance((Consumer<Long>) i -> cnt.incrementAndGet())); assertEquals(1, cnt.get());
assertEquals(m13, instance.get13());
assertSame(instance, instance.unordered());
assertEquals(eRes, result);
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(9, (int) instance.get9());
assertNotNull(map); assertTrue(map.containsKey("random")); assertNull(map.get("random"));
assertEquals(4, (int) instance.get4());
assertEquals(m9, instance.get9());
assertEquals(17, (int) instance.get17());
assertEquals(m9, instance.get9());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.isNullPredicate());
assertNotNull(Elements.img());
assertSame(ACCUMULATOR, COLLECTOR.accumulator());
assertEquals(1L, instance.estimateSize());
assertNotNull(Elements.br());
assertEquals(m8, instance.get8());
assertNotNull(builder.update(manager));
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertEquals(expected, actual);
assertTrue(type.getTypeName().toLowerCase().contains(COLUMN_NAME.toLowerCase()));
assertEquals(expected, actual);
assertFalse(instance.tryAdvance(DO_NOTHING));
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertNotNull(composeToDouble.firstStep()); assertNotNull(composeToDouble.secondStep()); assertNull(composeToDouble.apply(null)); assertNotNull(composeToDouble.apply("test"));
assertTrue(result >= 0);
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertNotNull(toDoubleNullable); assertEquals(0, toDoubleNullable.applyAsDouble("1")); assertNull(toDoubleNullable.apply(null));
assertTrue(instance().getMethods().isEmpty());
assertEquals(m12, instance.get12());
assertEquals(m2, instance.get2());
assertEquals(12, (int) instance.get12());
assertEquals(m8, instance.get8());
assertEquals(14, (int) instance.get14());
assertTrue(instance().getCode().isEmpty());
assertNotNull(pretty); assertNotNull(compressed);
assertEquals(15, (int) instance.get15());
assertEquals(0, (int) instance.get0());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertNotNull(toDouble); assertEquals(1, toDouble.applyAsDouble("")); assertEquals(0, toDouble.applyAsDouble(null));
assertTrue(instance().getImports().isEmpty());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), instance.apply(0));
assertEquals("extends ", INSTANCE.extendsOrImplementsInterfaces());
assertEquals(17, (int) instance.get17());
assertEquals(8, (int) instance.get8());
assertFalse(instance.isParallel()); assertTrue(newStream.isParallel());
assertEquals(0.0, IntRangeUtil.requireInRange(0, -1,1, RuntimeException::new));
assertEquals(1, instance.distinct().count());
assertEquals(2, instance.flatMapToDouble(s -> DoubleStream.of(0, s.length())).count());
assertNotNull(instance.toString());
assertEquals(refStream().collect(Collectors.toList()), entries);
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3), instance.apply(0));
assertEquals(m2, instance.get2());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(table, instance.table().get());
assertEquals(m7, instance.get7());
assertEquals(expected, actual);
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertNotNull(Elements.span());
assertEquals(6, (int) instance.get6());
assertEquals(m5, instance.get5());
assertEquals(10, (int) instance.get10());
assertEquals(m9, instance.get9());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getGenerics().isEmpty());
assertEquals(12, (int) instance.get12());
assertTrue(docTypeView.transform(generator, docType).isPresent());
assertNotNull(composeToBigDecimal.firstStep()); assertNotNull(composeToBigDecimal.secondStep()); assertNull(composeToBigDecimal.apply(null)); assertNotNull(composeToBigDecimal.apply("test"));
assertNotNull(e1);
assertEquals(expected, actual);
assertEquals(m8, instance.get8());
assertEquals(3, (int) instance.get3());
assertTrue(instance().getConstructors().isEmpty());
assertEquals(m9, instance.get9());
assertEquals(10, (int) instance.get10());
assertEquals(1, instance.applyAsInt((short) 1));
assertFalse(result);
assertNotNull(Expressions.negate(ToBoolean.of(b -> true)));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(map, result);
assertEquals(2, (int) instance.get2());
assertNotNull(INSTANCE.getRenderStack());
assertEquals(MapperType.SHORT_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(expected, eventConsumer.events());
assertEquals(6, (int) instance.get6());
assertNotNull(INSTANCE.transform(transform, 1, factory));
assertEquals(Optional.of(ELEMENT), instance.max(Comparator.naturalOrder()));
assertNotNull(toDouble); assertEquals("three".length(), toDouble.applyAsDouble("three")); assertEquals(0, toDouble.applyAsDouble(null));
assertEquals(MissingArgumentStrategy.THROW_EXCEPTION, strategy);
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(1, instance.compare("test", "a")); assertEquals(-1, instance.compare("a", "test"));
assertEquals(2, (int) instance.get2());
assertEquals(m1, instance.get1());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(1.0, DoubleRangeUtil.requireEquals(1.0, 1.0));
assertTrue(instance().getGenerics().isEmpty());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1());
assertEquals(map, result);
assertEquals(m8, instance.get8());
assertEquals(0, (int) instance.get0());
assertEquals(-1, LongRangeUtil.requireNonZero(-1, RuntimeException::new));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(1, instance.takeWhile(ELEMENT::equals).count()); assertEquals(0, instance.takeWhile(OTHER_ELEMENT::equals).count());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertTrue(DocumentDbUtil.isSame(expected, actual));
assertNotNull(instance.getSortByNullOrderInsertion());
assertNotNull(INSTANCE.metaOn(Integer.class, String.class));
assertEquals(m0, instance.get0());
assertEquals(2, (int) instance.get2());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), instance.apply(0));
assertTrue(instance().getImports().isEmpty());
assertNotNull(Elements.th());
assertEquals(2, (int) instance.get2());
assertTrue(instance().getParent().isPresent());
assertEquals(11, (int) instance.get11());
assertNotNull(injector.newBuilder());
assertEquals(m3, instance.get3());
assertEquals(m10, instance.get10());
assertEquals(10, (int) instance.get10());
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertEquals(NAME, instance().getText());
assertTrue(instance.tryAdvance(DO_NOTHING)); assertFalse(instance.tryAdvance(DO_NOTHING));
assertTrue(instance().getInitializers().isEmpty());
assertEquals(expResult, result);
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.getDefaultDbmsName());
assertEquals(m7, instance.get7());
assertEquals(11, (int) instance.get11());
assertEquals(m6, instance.get6());
assertEquals(expected, actual);
assertSame(TableIdentifier.of(DB, SCHEMA, TABLE), INSTANCE.getTableIdentifier());
assertEquals(expected, actual);
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(1, LongRangeUtil.requireNonNegative(1, RuntimeException::new));
assertEquals(1.0, DoubleRangeUtil.requireNonZero(1.0, RuntimeException::new));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(expected, actual);
assertEquals(Boolean.class, typeMapper().getJavaType(column()));
assertEquals(m1, instance.get1());
assertEquals(m12, instance.get12());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.getDataTypes());
assertTrue(instance().getClasses().isEmpty());
assertEquals(m10, instance.get10());
assertEquals(21, (int) instance.get21());
assertEquals(m15, instance.get15());
assertEquals(m10, instance.get10());
assertEquals(m0, instance.get0());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertNotNull(Elements.tbody());
assertEquals(m4, instance.get4());
assertEquals(m1, instance.get1());
assertNotNull(Elements.body());
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals("test".length() - "a".length(), instance.compare("test", "a")); assertEquals("a".length() - "test".length(), instance.compare("a", "test"));
assertTrue(instance().getJavadoc().isPresent());
assertNotNull(Expressions.plus(ToShort.of(s -> (short) 1), 1)); assertNotNull(Expressions.plus(ToShort.of(s -> (short) 1), ToShort.of(s -> (short) 1))); assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), 1f)); assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f)));
assertEquals(byte.class, typeMapper().getJavaType(column()));
assertEquals(0, instance.applyAsFloat((float) 1)); assertEquals(0, instance.applyAsFloat((float) 1));
assertNotNull(INSTANCE.wrapField(Field.of("x", int.class)));
assertEquals(m19, instance.get19());
assertEquals(1L, instance.estimateSize());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(18, (int) instance.get18());
assertTrue(instance().getModifiers().isEmpty());
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertEquals(3, (int) instance.get3());
assertNull(instance.trySplit());
assertNotNull(InjectorUtil.findIn(Foo.class, injector, instances, true));
assertEquals(m7, instance.get7());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertNotEquals(NAME, instance().getName());
assertEquals(m3, instance.get3());
assertNotNull(e1);
assertEquals(m9, instance.get9());
assertFalse(result);
assertEquals(4, (int) instance.get4());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertFalse(instance.isParallel()); assertTrue(instance.parallel().isParallel());
assertEquals(1, instance.toArray(String[]::new).length);
assertNull(instance().getValue());
assertEquals(m7, instance.get7());
assertEquals(3, (int) instance.get3());
assertEquals(m12, instance.get12());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(MapperType.DOUBLE_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(m6, instance.get6());
assertEquals(short.class, typeMapper().getJavaType(column()));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(21, (int) instance.get21());
assertEquals(m6, instance.get6());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(String.class, transformEntry.getKey()); assertSame(transform, transformEntry.getValue());
assertTrue(toString.contains("Foo")); assertTrue(toString.contains("inc()"));
assertNotNull(getMutatorInstance().addNewPrimaryKeyColumn());
assertEquals(javadoc, instance().getJavadoc().orElseThrow(NoSuchElementException::new));
assertEquals("_" + FOO_SIMPLE_NAME, Formatting.replaceIfIllegalJavaIdentifierCharacter("~" + FOO_SIMPLE_NAME));
assertNotNull(instance.isNullPredicate());
assertEquals(11, (int) instance.get11());
assertNotNull(map); assertEquals(1L, list.get(0).get("one")); assertEquals(2L, list.get(1).get("two")); assertEquals(3L, list.get(2).get("three"));
assertNotNull(instance.orThrow());
assertTrue(set.contains(DelegateJsonComponent.class));
assertEquals(MyLogger.class, logger.getClass()); assertTrue(output.contains(AbstractLoggerFactoryTest.class.getSimpleName()));
assertEquals(expected, actual);
assertEquals(7, (int) instance.get7());
assertEquals(m3, instance.get3());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertNotNull(result);
assertEquals(19, (int) instance.get19().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(ELEMENT, instance.nextInt());
assertEquals(0.0, DoubleRangeUtil.requireInRange(0.0, -1.0,1.0, RuntimeException::new));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(m6, instance.get6());
assertEquals(0, (int) instance.get0());
assertTrue(instance().getFields().isEmpty());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(6, (int) instance.get6());
assertEquals(m1, instance.get1());
assertNotNull(instance.build());
assertFalse(instance().getJavadoc().isPresent());
assertEquals(m13, instance.get13());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertEquals(m15, instance.get15());
assertEquals(21, (int) instance.get21().orElseThrow(NoSuchElementException::new));
assertNotNull(composeToBooleanNullable.firstStep()); assertNotNull(composeToBooleanNullable.secondStep()); assertTrue(composeToBooleanNullable.applyAsBoolean("test")); assertNull(composeToBooleanNullable.apply(null)); assertNotNull(composeToBooleanNullable.apply("test"));
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.TRACE.toText()));
assertEquals("c.s.c.l.i.AbstractLoggerFactoryTest", instance.makeNameFrom(AbstractLoggerFactoryTest.class));
assertEquals(m0, instance.get0());
assertEquals(m9, instance.get9());
assertEquals(18, (int) instance.get18().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(m6, instance.get6());
assertEquals(20, (int) instance.get20().orElseThrow(NoSuchElementException::new));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(22, (int) instance.get22());
assertNotNull(Elements.h3());
assertTrue(classes.contains(StandardTypeMapperComponent.class)); assertTrue(classes.contains(StandardCodeGenerationComponent.class)); assertTrue(classes.contains(DelegatePropertyEditorComponent.class));
assertEquals(m0, instance.get0());
assertNotNull(toShortNullable); assertEquals(0, toShortNullable.applyAsShort("1")); assertNull(toShortNullable.apply(null));
assertEquals(m10, instance.get10());
assertEquals(c, instance().getParent().orElseThrow(NoSuchElementException::new));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(expected, list); assertEquals(expected, list);
assertNotNull(persistOperation.manager()); assertNotNull(updateOperation.manager()); assertNotNull(removeOperation.manager());
assertEquals(m4, instance.get4());
assertTrue(isContainingOnlyFieldPredicate(ID_GT_0_AND_AGE_EQ_2));
assertNotNull(toBooleanNullable); assertTrue(toBooleanNullable.applyAsBoolean("1")); assertFalse(toBooleanNullable.applyAsBoolean("three")); assertNull(toBooleanNullable.apply(null));
assertEquals(0.0, LongRangeUtil.requireInRangeClosed(0, -1,0, RuntimeException::new));
assertEquals(LEVEL, loggerEvent.getLevel());
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertEquals(PREFIX, instance.prefix());
assertEquals(expected, actual);
assertEquals(5, (int) instance.get5());
assertTrue(html.contains("Welcome"));
assertEquals(1, (int) instance.get1());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(12, (int) instance.get12());
assertEquals(1, cnt.get());
assertEquals(m4, instance.get4());
assertEquals("UserManager", instance.managerTypeName(table));
assertEquals(m3, instance.get3());
assertEquals( singletonList( singletonList("a") ), actual );
assertEquals(RS_SHORT.getValue(), ResultSetUtil.getShort(RESULT_SET, RS_SHORT.getLabel())); assertEquals(RS_SHORT.getValue(), ResultSetUtil.getShort(RESULT_SET, RS_SHORT.getIndex())); assertNull(ResultSetUtil.getShort(NULL_RESULT_SET, RS_SHORT.getLabel())); assertNull(ResultSetUtil.getShort(NULL_RESULT_SET, RS_SHORT.getIndex()));
assertNotNull(result);
assertNotNull(DATABASE_NAMING_CONVENTION.fullNameOf("schema", "table")); assertNotNull(DATABASE_NAMING_CONVENTION.fullNameOf("schema", "table", "column"));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertEquals(4, (int) instance.get4());
assertEquals(1.0, DoubleRangeUtil.requireNonZero(1.0));
assertEquals(16, (int) instance.get16());
assertEquals(20, (int) instance.get20().orElseThrow(NoSuchElementException::new));
assertEquals(m1, instance.get1());
assertEquals(13, (int) instance.get13());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m6, instance.get6());
assertEquals(m13, instance.get13());
assertEquals(1, instance.flatMap(s -> s.chars().boxed()).count());
assertEquals("value", CollectionsUtil.getAnyFrom(populatedList));
assertEquals(8, (int) instance.get8());
assertEquals(m5, instance.get5());
assertSame(instance, instance.sequential());
assertEquals(0, (int) instance.get0());
assertTrue(isContainingOnlyFieldPredicate(COMPLEX));
assertEquals(2, methods.size(), methods.toString());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(-1.0, DoubleRangeUtil.requireNotEquals(-1.0, 1.0));
assertEquals(m16, instance.get16());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(m5, instance.get5());
assertNotNull(JvmVersion.getImplementationVersion());
assertNotNull(instance.inner());
assertEquals(expectedSet, set);
assertEquals(m2, instance.get2());
assertEquals(stringToInt, ms.toMap());
assertEquals(m11, instance.get11());
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertFalse(toBoolean.applyAsBoolean(true)); assertTrue(toBoolean.applyAsBoolean(false));
assertEquals(RS_LONG.getValue(), ResultSetUtil.getLong(RESULT_SET, RS_LONG.getLabel())); assertEquals(RS_LONG.getValue(), ResultSetUtil.getLong(RESULT_SET, RS_LONG.getIndex())); assertNull(ResultSetUtil.getLong(NULL_RESULT_SET, RS_LONG.getLabel())); assertNull(ResultSetUtil.getLong(NULL_RESULT_SET, RS_LONG.getIndex()));
assertEquals(asList(Foo.class, Bar.class), injector.injectables().collect(toList()));
assertEquals(SEPARATOR, instance.separator());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(1, instance.getModel());
assertEquals(m3, instance.get3());
assertEquals(1, doubleHolder.get());
assertEquals(testString, instance.parse(testString)); assertEquals(Long.toString(testLong), instance.parse(testLong));
assertEquals(4, (int) instance.get4());
assertEquals(-1.0, DoubleRangeUtil.requireNegative(-1.0));
assertEquals(1.0, LongRangeUtil.requireEquals(1, 1, RuntimeException::new));
assertEquals("_", Formatting.replaceIfIllegalJavaIdentifierCharacter(""));
assertEquals(5, (int) instance.get5());
assertEquals(2, (int) instance.get2());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertTrue(result >= 8);
assertEquals(13, (int) instance.get13());
assertEquals(Arrays.asList(3, 2, 1), Permutation.permutation(5, LIST));
assertEquals(m4, instance.get4());
assertNotNull(toByte); assertEquals("tree".getBytes()[0], toByte.applyAsByte("three")); assertEquals((byte) 0, toByte.applyAsByte(null));
assertTrue(instance().getFields().isEmpty());
assertEquals(fullName("UserManager"), instance.managerType().getTypeName());
assertNotNull(toFloat); assertEquals("three".length(), toFloat.applyAsFloat("three")); assertEquals(0, toFloat.applyAsFloat(null));
assertTrue(OptionalUtil.parseDouble("1").isPresent()); assertFalse(OptionalUtil.parseDouble(null).isPresent());
assertEquals(0, instance.dropWhile(i -> ELEMENT == i).count()); assertEquals(1, instance.dropWhile(i -> OTHER_ELEMENT == i).count());
assertEquals(1, (int) instance.get1());
assertEquals(m20, instance.get20());
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(NAME, instance().getName());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(Optional.empty(), instance().getSupertype());
assertTrue(classes.contains(EnumGeneratorComponent.class));
assertEquals(m4, instance.get4());
assertNotNull(instance.getSchemaTableDelimiter());
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(1, instance.compare("test", "a")); assertEquals(-1, instance.compare("a", "test"));
assertEquals(project, instance.projectOrThrow());
assertEquals(15, (int) instance.get15());
assertEquals(m16, instance.get16());
assertEquals(memeber, instance().getStaticMember().orElseThrow(NoSuchElementException::new));
assertNotNull(INSTANCE.getDependencyMgr());
assertEquals(LOGGER_FORMATTER.apply(Level.INFO, LOGGER_NAME, MESSAGE), output);
assertEquals(m5, instance.get5());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7), instance.apply(0));
assertEquals(m3, instance.get3());
assertSame(injector, InjectorUtil.findIn(Injector.class, injector, instances, true));
assertNotNull(toLong); assertNotEquals(0, toLong.applyAsLong("test"));
assertEquals(1, (int) instance.get1());
assertEquals(m2, instance.get2());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(1, cnt.get());
assertEquals(m8, instance.get8());
assertEquals(expected, actual);
assertNotEquals(0, instance.getStatus());
assertEquals(actual, expected, format("Compare %s then %s using %s", comp1.getField().identifier().getColumnId(), Entity.INT.identifier().getColumnId(), comp ) );
assertEquals(m16, instance.get16());
assertTrue(methodName.contains(Foo.class.getName())); assertTrue(methodName.contains(name));
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertEquals(1, cnt.get());
assertTrue(called.get());
assertEquals(expected, actual);
assertEquals(4, (int) instance.get4());
assertFalse(instance.isParallel()); assertTrue(MapStream.of(stringToInt, true).isParallel());
assertEquals(expected, actual);
assertEquals(1, (int) instance.get1());
assertEquals(m2, instance.get2());
assertTrue(instance.getDependencies().isEmpty());
assertEquals(0.0, DoubleRangeUtil.requireNotEquals(0.0, -1.0, RuntimeException::new));
assertEquals(actual, expected, format("Compare %s then %s (reversed) using %s", comp1.getField().identifier().getColumnId(), comp2.getField().identifier().getColumnId(), comp ) );
assertEquals(m17, instance.get17());
assertEquals(m6, instance.get6());
assertEquals(m0, instance.get0());
assertTrue(ex.getMessage().contains(msg));
assertEquals(m2, instance.get2());
assertTrue(instance.tryAdvance((Consumer<Integer>) i -> cnt.incrementAndGet())); assertEquals(1, cnt.get());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(2, (int) instance.get2());
assertEquals(m5, instance.get5());
assertNotNull(instance.inner());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(-1, IntRangeUtil.requireNegative(-1, RuntimeException::new));
assertEquals(expected, actual);
assertEquals("", instance().getText());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(m3, instance.get3());
assertTrue(newStream.isParallel());
assertEquals(18, (int) instance.get18());
assertNotNull(toShort); assertEquals("three".length(), toShort.applyAsShort("three")); assertEquals(0, toShort.applyAsShort(null));
assertSame(Injector.class.getClassLoader(),injector.classLoader());
assertEquals(m1, instance.get1());
assertEquals(m2, instance.get2());
assertEquals(Stream.of(int.class, long.class).collect(toList()), generic.getUpperBounds());
assertNotNull(composeToInt.firstStep()); assertNotNull(composeToInt.secondStep()); assertNull(composeToInt.apply(null)); assertNotNull(composeToInt.apply("test"));
assertEquals(2, (int) instance.get2());
assertEquals(-1.0, IntRangeUtil.requireEquals(-1, -1, RuntimeException::new));
assertEquals(6, (int) instance.get6());
assertEquals(1, cnt.get());
assertEquals(4, (int) instance.get4());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(m7, instance.get7());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1());
assertEquals(PATH.replace('.', '/'), instance.baseDirectoryName());
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertTrue(toBooleanOrThrow.applyAsBoolean(true));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(expResult, result);
assertEquals(2, (int) instance.get2());
assertEquals(1, foo.value);
assertEquals(0, (int) instance.get0());
assertNotNull(instance.getFieldQuoteEnd());
assertEquals(m15, instance.get15());
assertEquals(m7, instance.get7());
assertEquals("[{},{},{},{},{},{},{},{}]", json);
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(MissingArgumentStrategy.SKIP_INVOCATION, strategy);
assertEquals(m10, instance.get10());
assertEquals(19, (int) instance.get19());
assertEquals(m0, instance.get0());
assertEquals(startIndex, sliceStartIndex - 1);
assertEquals(1, cnt.get());
assertFalse(instance.isParallel()); assertTrue(newStream.isParallel());
assertNotNull(b);
assertEquals(m2, instance.get2());
assertEquals(10, (int) instance.get10());
assertEquals(expected, actual);
assertNotNull(instance.inner());
assertEquals(-1, signShort.applyAsByte((short) -1)); assertEquals(0, signShort.applyAsByte((short) 0)); assertEquals(1, signShort.applyAsByte((short) 1));
assertEquals(5, (int) instance.get5());
assertEquals(m10, instance.get10());
assertTrue(output.contains(Level.DEBUG.toText()));
assertNotNull(map); assertEquals("Hello, World!", map.get("message"));
assertEquals(expected, actual);
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(singleton(dependency), instance.getDependencies());
assertEquals(m13, instance.get13());
assertEquals(m8, instance.get8());
assertNotNull(Elements.title());
assertEquals(1.0, DoubleRangeUtil.requireNonNegative(1.0));
assertEquals(singletonList(OTHER_ELEMENT), s);
assertEquals(m6, instance.get6());
assertEquals("static_", Formatting.replaceIfJavaUsedWord("static"));
assertEquals("{}", actual);
assertEquals(m21, instance.get21());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(1, INSTANCE.primaryKeyFields().count());
assertEquals(m3, instance.get3());
assertEquals(1, doubleHolder.get());
assertTrue(result.contains("{")); assertTrue(result.contains(" x++;")); assertTrue(result.contains(" return x;")); assertTrue(result.contains("}"));
assertTrue(instance().getParent().isPresent());
assertEquals(3, (int) instance.get3());
assertEquals(stringToInt, ms.toMap());
assertEquals(5, (int) instance.get5());
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(Byte.compare("test".getBytes()[0], "a".getBytes()[0]), instance.compare("test", "a")); assertEquals(Byte.compare("a".getBytes()[0], "test".getBytes()[0]), instance.compare("a", "test"));
assertEquals(0, instance.dropWhile(ELEMENT::equals).count()); assertEquals(1, instance.dropWhile(OTHER_ELEMENT::equals).count());
assertEquals(m4, instance.get4());
assertEquals(m6, instance.get6());
assertEquals(m3, instance.get3());
assertEquals(2, dependencyNode.getExecutions().size());
assertEquals(0, empty.values().count());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(int.class, instance().getType());
assertNotNull(instance.orThrow());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m9, instance.get9());
assertEquals(injectable1, injectable1); assertEquals(injectable2, injectable2); assertEquals(injectable1, injectable2); assertEquals(injectable2, injectable1);
assertEquals(1, toShortOrThrow.applyAsShort((short) 1));
assertEquals(m2, instance.get2());
assertEquals(5, (int) instance.get5());
assertEquals(m22, instance.get22());
assertEquals(value, instance().getType());
assertNotNull(actual); assertEquals(byte[].class, actual.getClass(), "Result correct type: "); assertArrayEquals(expected, (byte[]) actual, "Result correct values: ");
assertNotNull(DatabaseUtil.findDbmsType(dbmsHandlerComponent, dbms));
assertTrue(instance().getImports().isEmpty());
assertEquals(-1.0, LongRangeUtil.requireNonPositive(-1, RuntimeException::new));
assertEquals(-1.0, DoubleRangeUtil.requireEquals(-1.0, -1.0, RuntimeException::new));
assertEquals(m13, instance.get13());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertFalse(instance.tryAdvance((LongConsumer) i -> cnt.incrementAndGet())); assertEquals(0, cnt.get());
assertTrue(instance().getFields().isEmpty());
assertEquals(m1, instance.get1());
assertFalse(instance.get("nonExistentDbms").isPresent()); assertTrue(instance.get("dbms").isPresent()); assertFalse(instance.get("dbms").isPresent());
assertEquals(m7, instance.get7());
assertEquals(m10, instance.get10());
assertEquals(m20, instance.get20());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertFalse(instance().getLowerBound().isPresent());
assertEquals(ENUM_CONSTANTS, instance.getEnumConstants());
assertEquals(LOGGER_FORMATTER.apply(Level.FATAL, LOGGER_NAME, MESSAGE), output);
assertEquals(Optional.of(ELEMENT), instance.reduce((a, b) -> a + b));
assertEquals(m9, instance.get9());
assertEquals(OTHER_NAME, instance().getName());
assertEquals(12, (int) instance.get12());
assertEquals("User", instance.entityName());
assertEquals(m2, instance.get2());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(0.0, LongRangeUtil.requireInRangeClosed(0, -1,1, RuntimeException::new));
assertEquals(5, (int) instance.get5());
assertEquals(m0, instance.get0());
assertEquals(fullName("UserManagerImpl"), instance.managerImplType().getTypeName());
assertEquals(MapStream.of(intToString).toMap(), ms.toMap());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertTrue(lc.toString().contains("Olle")); assertTrue(lc.toString().contains("42"));
assertTrue(instance.invoke(foo, classMapper)); assertEquals(1, foo.value);
assertEquals(sql, instance.applySkipLimit(sql, params, 0, Long.MAX_VALUE));
assertEquals("GeneratedUserImpl", instance.generatedEntityImplName());
assertEquals(1.0, LongRangeUtil.requireNotEquals(1, -1, RuntimeException::new));
assertEquals(RS_URL.getValue(), ResultSetUtil.getURL(RESULT_SET, RS_URL.getLabel())); assertEquals(RS_URL.getValue(), ResultSetUtil.getURL(RESULT_SET, RS_URL.getIndex())); assertNull(ResultSetUtil.getURL(NULL_RESULT_SET, RS_URL.getLabel())); assertNull(ResultSetUtil.getURL(NULL_RESULT_SET, RS_URL.getIndex()));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(5, (int) instance.get5());
assertEquals(text, instance().getText());
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertEquals(0, toDoubleNullable.applyAsDouble("1")); assertNull(toDoubleNullable.apply(null));
assertArrayEquals(reference.toArray(), instance.toArray());
assertNotNull(new JsonSyntaxException().getMessage());
assertEquals(1, (int) instance.get1());
assertEquals(table, instance.tableOrThrow());
assertTrue(instance.getName().contains("Foo.inc()"));
assertEquals(m3, instance.get3());
assertNotNull(instance.expression());
assertEquals(expected, actual);
assertEquals(m20, instance.get20());
assertEquals(fullNameGen("GeneratedUserImpl"), instance.generatedEntityImplType().getTypeName());
assertEquals(Generic.BoundType.SUPER, instance().getBoundType());
assertEquals(m8, instance.get8());
assertEquals(boolean.class, typeMapper().getJavaType(column()));
assertTrue(result >= 0);
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(1, injector.getOrThrow(Bar.class).val);
assertEquals(m10, instance.get10());
assertEquals(expected, actual);
assertEquals(m0, instance.get0());
assertNotNull(map); assertEquals(false, map.get("condition"));
assertEquals(13, (int) instance.get13());
assertEquals(m2, instance.get2());
assertEquals(table, instance.tableOrThrow());
assertEquals(expResult, result);
assertEquals(STATE, instance.getState());
assertTrue(OptionalUtil.parseBoolean("true").isPresent()); assertFalse(OptionalUtil.parseBoolean(null).isPresent());
assertFalse(isContainingOnlyFieldPredicate(p -> true));
assertEquals(m9, instance.get9());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals("user", instance.variableName());
assertNotNull(JvmVersion.getImplementationVendor());
assertEquals(expected, actual);
assertEquals(NAME, instance().getName());
assertNotNull(instance.orThrow());
assertEquals(m3, instance.get3());
assertEquals(8, (int) instance.get8());
assertEquals(m12, instance.get12());
assertEquals(18, (int) instance.get18());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(16, (int) instance.get16());
assertTrue(instance.is(State.CREATED)); assertTrue(instance.is(State.INITIALIZED)); assertTrue(instance.is(State.RESOLVED)); assertTrue(instance.is(State.STARTED)); assertFalse(instance.is(State.STOPPED)); assertTrue(instance.is(State.STARTED)); assertTrue(instance.is(State.STOPPED));
assertEquals(m4, instance.get4());
assertEquals(m1, instance.get1());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), instance.apply(0));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m13, instance.get13());
assertEquals(m12, instance.get12());
assertEquals(expected, actual);
assertTrue(json.contains(NAME)); assertTrue(json.contains(Integer.toString(ID)));
assertNull(instance.toJavaType(column, User.class, null));
assertEquals(dbms, instance.dbms().get());
assertEquals(TypeMapper.Category.ENUM, instance.getJavaTypeCategory(column));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6), instance.apply(0));
assertEquals(COLUMN_NAME, jsonFieldName);
assertEquals(m12, instance.get12());
assertSame(CHARACTERISTICS, COLLECTOR.characteristics());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(0, (int) instance.get0());
assertEquals(1, Cast.castOrFail(1L, Number.class).intValue());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(m4, instance.get4());
assertEquals(-1.0, IntRangeUtil.requireNotEquals(-1, 0, RuntimeException::new));
assertEquals(m2, instance.get2());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7), instance.apply(0));
assertEquals(1, instance.supportedDbmsTypes().count()); assertTrue(instance.findByName(dbmsType.getName()).isPresent());
assertEquals(m1, instance.get1());
assertEquals(3, ms.distinctKeys(Integer::sum).values().mapToInt(i -> i).sum());
assertEquals(MapperType.INT_TO_INT, toIntMapper.mapperType());
assertEquals(m6, instance.get6());
assertEquals(Integer.class, injectable.get());
assertEquals(0, (int) instance.get0());
assertEquals(m2, instance.get2());
assertNull(instance.trySplit());
assertEquals(14, (int) instance.get14());
assertEquals(expected, actual);
assertEquals(project, instance.project().get());
assertEquals(m17, instance.get17());
assertEquals(Optional.empty(), instance().getParent());
assertEquals(3, (int) instance.get3());
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), instance.apply(0));
assertEquals(m4, instance.get4());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(m7, instance.get7());
assertEquals(m13, instance.get13());
assertEquals(3, (int) instance.get3());
assertEquals(NAME, instance().getName());
assertEquals(expected, actual);
assertNotNull(Elements.h4());
assertEquals(6, (int) instance.get6());
assertEquals(1, (int) instance.get1());
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertEquals(m5, instance.get5());
assertEquals(m1, instance.get1());
assertEquals(3, (int) instance.get3());
assertNotNull(Elements.tfoot());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(m1, instance.get1());
assertEquals(m7, instance.get7());
assertNotNull(result);
assertEquals(1.0, DoubleRangeUtil.requirePositive(1.0));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m10, instance.get10());
assertEquals(fullNameGen("GeneratedUserManager"), instance.generatedManagerType().getTypeName());
assertNotNull(generator.transform(new DocumentView(), Document.of(), transformFactory));
assertEquals(refStream().skip(1).count(), instance.skip(1).count());
assertEquals(m7, instance.get7());
assertNotNull(instance.getResultSetMethodName(null));
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertEquals(m4, instance.get4());
assertEquals(m9, instance.get9());
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertEquals(m1, instance.get1());
assertFalse(actual.contains("id")); assertFalse(actual.contains(Integer.toString(ID))); assertTrue(actual.contains("name")); assertTrue(actual.contains(NAME));
assertEquals(expected, actual);
assertEquals(2, instance.applyAsShort((short) 1));
assertEquals(5, (int) instance.get5());
assertEquals(m16, instance.get16());
assertEquals(m12, instance.get12());
assertEquals(m12, instance.get12());
assertEquals(m0, instance.get0());
assertEquals(m3, instance.get3());
assertEquals(URL_STRING, url.toString());
assertTrue(instance().getParent().isPresent());
assertTrue(instance().getCode().isEmpty());
assertEquals(5, (int) instance.get5());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertNotNull(Elements.div());
assertEquals(0, cnt.get());
assertTrue(contentElementView.transform(generator, contentElement).isPresent()); assertTrue(contentElementView.transform(generator, contentElement).isPresent());
assertEquals(m9, instance.get9());
assertEquals(expected, actual);
assertEquals(versionFromPom(), instance.getImplementationVersion());
assertEquals(Optional.empty(), instance().getValue());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m15, instance.get15());
assertEquals(5, (int) instance.get5());
assertEquals(-1, IntRangeUtil.requireNonZero(-1, RuntimeException::new));
assertNotNull(getMutatorInstance().addNewIndexColumn());
assertEquals(m1, instance.get1());
assertEquals(m7, instance.get7());
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(1, instance.compare("test", "a")); assertEquals(-1, instance.compare("a", "test"));
assertEquals(expected, actual);
assertEquals(m4, instance.get4());
assertNotNull(toFloat); assertEquals("three".length(), toFloat.applyAsFloat("three")); assertEquals(0, toFloat.applyAsFloat(null));
assertEquals(m7, instance.get7());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(MapperType.FLOAT_TO_FLOAT, toFloatMapper.mapperType());
assertEquals(0, (int) instance.get0());
assertEquals("foo", Formatting.lcfirst("Foo"));
assertTrue(actual.contains(DB)); assertTrue(actual.contains(SCHEMA)); assertTrue(actual.contains(TABLE));
assertEquals(expected, actual);
assertEquals(map, result);
assertNotNull(Elements.form());
assertEquals("MyProject", instance.typeName(project));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(m5, instance.get5());
assertEquals(m6, instance.get6());
assertEquals(text, instance().getText());
assertNotNull(instance.isNullPredicate());
assertEquals(m11, instance.get11());
assertEquals(expected, actual);
assertEquals(0.0, DoubleRangeUtil.requireInRangeClosed(0.0, -1.0,1.0, RuntimeException::new));
assertEquals(m18, instance.get18());
assertEquals(5, (int) instance.get5());
assertEquals(MapperType.BOOLEAN_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(type, instance().getType());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(0.0, IntRangeUtil.requireInRangeClosed(0, -1,1, RuntimeException::new));
assertEquals(refStream().collect(Collectors.toSet()), entries);
assertEquals(8, (int) instance.get8());
assertNotNull(toBoolean); assertTrue(toBoolean.applyAsBoolean("three")); assertTrue(toBoolean.applyAsBoolean(null));
assertEquals(ELEMENT, instance.collect(Collectors.joining()));
assertEquals(expected, actual);
assertTrue(documentView.transform(generator, document).isPresent());
assertNotNull(DATABASE_NAMING_CONVENTION.getFieldQuoteStart());
assertEquals(m4, instance.get4());
assertNotNull(result);
assertEquals(15, (int) instance.get15());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals("THE_OVAL_ROOM", Formatting.staticField("the_oval_room"));
assertEquals(schema, instance.schema().get());
assertNotNull(properties); assertTrue(properties.isEmpty());
assertEquals(text, tag.getText().orElseThrow(NoSuchElementException::new));
assertEquals(1, instance.estimateSize()); assertEquals(0, instance.estimateSize()); assertEquals(0, instance.estimateSize());
assertEquals("T", generic.getLowerBound().orElseThrow(NoSuchElementException::new));
assertEquals(m14, instance.get14());
assertEquals(m17, instance.get17());
assertEquals(expected, actual);
assertEquals(m5, instance.get5());
assertEquals(int.class, instance().getType());
assertEquals(m8, instance.get8());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), instance.apply(0));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(MapperType.INT_TO_DOUBLE, toDoubleMapper.mapperType());
assertTrue(instance().getValues().isEmpty());
assertEquals(1, cnt.get());
assertEquals(fullNameGen("GeneratedUserManagerImpl"), instance.generatedManagerImplType().getTypeName());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), instance.apply(0));
assertTrue(instance.tryAdvance(set::add)); assertEquals(expectedSet, set);
assertEquals(1, instance.nodes().count()); assertEquals(2, instance.nodes().count());
assertEquals(ELEMENT, instance.next());
assertEquals(m3, instance.get3());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(Tuples.of(0, 1, 2, 3, 4), instance.apply(0));
assertEquals(expected, actual, EPSILON);
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), instance.apply(0));
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertEquals(m13, instance.get13());
assertEquals(TuplesOfNullables.ofNullables(0, 1), instance.apply(0));
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertNull(toDoubleNullable.apply(null));
assertEquals(m3, instance.get3());
assertTrue(instance.findAny().isPresent());
assertEquals(MyLogger.class, logger.getClass()); assertTrue(output.contains(text));
assertEquals(10, (int) instance.get10());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m16, instance.get16());
assertNull(instance().getValue());
assertEquals("UserManagerImpl", instance.managerImplName());
assertEquals(expected, actual);
assertNotNull(JvmVersion.getImplementationTitle());
assertEquals(m1, instance.get1());
assertEquals(m19, instance.get19());
assertNotNull(Expressions.negateOrNull(ToBooleanNullable.of(b -> true)));
assertEquals(m11, instance.get11());
assertNotNull(Expressions.byteToDoubleNullable(b -> (byte) b));
assertEquals(m12, instance.get12());
assertEquals(expResult, result);
assertEquals(expected, actual);
assertNotEquals(other.hashCode(), instance.hashCode());
assertEquals(4, (int) instance.get4());
assertEquals(20, (int) instance.get20().orElseThrow(NoSuchElementException::new));
assertEquals(INDENT, Formatting.tab());
assertEquals(m5, instance.get5());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertFalse(instance().getJavadoc().isPresent());
assertEquals(m2, instance.get2());
assertEquals(m0, instance.get0());
assertEquals(2, (int) instance.get2());
assertEquals(8, (int) instance.get8());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(0, (int) instance.get0());
assertEquals(m0, instance.get0());
assertEquals(m5, instance.get5());
assertNotNull(Expressions.intToDouble(b -> (int) b));
assertEquals(3, (int) instance.get3());
assertNotNull(Expressions.intToDoubleNullable(b -> (int) b));
assertEquals(expected, actual);
assertEquals(0.0, DoubleRangeUtil.requireZero(0.0));
assertEquals(m0, instance.get0());
assertEquals(m11, instance.get11());
assertNotNull(instance.getSubtitle());
assertEquals(m17, instance.get17());
assertEquals(Level.FATAL, logger.getLevel());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(Optional.empty(), instance().getParent());
assertEquals("null", instance.apply(null));
assertEquals(m10, instance.get10());
assertEquals(1, instance.stream().count());
assertEquals(expected, actual);
assertEquals(MapperType.LONG_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(7, (int) instance.get7());
assertEquals(1, (int) instance.get1());
assertEquals(MESSAGE, loggerEvent.getMessage());
assertEquals(m21, instance.get21());
assertEquals(11, (int) instance.get11());
assertNotNull(CaseInsensitiveMaps.newCaseInsensitiveMap());
assertNotNull(code); assertTrue(code.contains(s));
assertEquals(m5, instance.get5());
assertArrayEquals(expected, actual);
assertEquals(m16, instance.get16());
assertEquals(m7, instance.get7());
assertEquals(expected, actual);
assertTrue(instance().getClasses().isEmpty());
assertEquals(m18, instance.get18());
assertEquals(m5, instance.get5());
assertEquals(m1, instance.get1());
assertEquals(15, (int) instance.get15());
assertEquals(expected, actual);
assertEquals(m11, instance.get11());
assertEquals(m0, instance.get0());
assertEquals(m8, instance.get8());
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.WARN.toText()));
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(singletonList(ELEMENT), instance.collect(ArrayList::new, List::add, ArrayList::addAll));
assertEquals(m5, instance.get5());
assertEquals(m8, instance.get8());
assertNotNull(generator.getRenderStack());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertEquals(RS_BLOB.getValue(), ResultSetUtil.getBlob(RESULT_SET, RS_BLOB.getLabel())); assertEquals(RS_BLOB.getValue(), ResultSetUtil.getBlob(RESULT_SET, RS_BLOB.getIndex())); assertNull(ResultSetUtil.getBlob(NULL_RESULT_SET, RS_BLOB.getLabel())); assertNull(ResultSetUtil.getBlob(NULL_RESULT_SET, RS_BLOB.getIndex()));
assertEquals(RS_BIG_DECIMAL.getValueAs(BigDecimal.class).toBigInteger(), ResultSetUtil.getBigInteger(RESULT_SET, RS_BIG_DECIMAL.getIndex())); assertNull(ResultSetUtil.getBigInteger(NULL_RESULT_SET, RS_BIG_DECIMAL.getIndex()));
assertEquals("abc...wxyz", PrintUtil.limit(CHARS, 10)); assertEquals("abcd...wxyz", PrintUtil.limit(CHARS, 11)); assertEquals("abcd...vwxyz", PrintUtil.limit(CHARS, 12));
assertEquals(1, cnt.get());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(9, (int) instance.get9());
assertEquals(m5, instance.get5());
assertEquals(m1, instance.get1());
assertTrue(JvmVersion.isJava9OrHigher());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5), instance.apply(0));
assertEquals(10, (int) instance.get10());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(1, cnt.get());
assertEquals(m6, instance.get6());
assertEquals(m0, instance.get0());
assertEquals(m1, instance.get1());
assertEquals(m4, instance.get4());
assertEquals(m10, instance.get10());
assertEquals("Xoo", Formatting.withFirst("foo", c -> "X"));
assertEquals(1, ms.distinctKeys().count()); assertEquals(1, ms2.distinctKeys().count());
assertEquals(Permutation.factorial(i), fac(i));
assertEquals("string", toStringOrThrow.apply("string"));
assertEquals(m4, instance.get4());
assertEquals(javadoc, instance().getJavadoc().orElseThrow(NoSuchElementException::new));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), instance.apply(0));
assertNotNull(INSTANCE.metaOn(Field.of("A", int.class), String.class));
assertEquals(expected, actual); assertTrue(actual instanceof NavigableMap);
assertEquals(String.class, INSTANCE.getEntityClass());
assertEquals(9, (int) instance.get9());
assertEquals(OTHER_ELEMENT + ELEMENT, instance.reduce(OTHER_ELEMENT, (a, b) -> a + b, (a, b) -> a + b));
assertTrue(instance().getUpperBounds().isEmpty());
assertEquals(m10, instance.get10());
assertEquals(refStream().collect(Collectors.toList()), entries);
assertEquals(17, (int) instance.get17());
assertEquals(m17, instance.get17());
assertEquals(3, (int) instance.get3());
assertEquals("connection.url", DatabaseUtil.findConnectionUrl(dbmsHandlerComponent, dbms)); assertEquals("another.connection.url", DatabaseUtil.findConnectionUrl(dbmsHandlerComponent, dbms2));
assertEquals(8, (int) instance.get8());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(NAME, instance().getName());
assertEquals(CONSTANT, instance.value());
assertEquals(MapperType.BOOLEAN_TO_BOOLEAN, toBooleanMapper.mapperType());
assertEquals(expected, actual);
assertEquals(0, (int) instance.get0());
assertEquals(m12, instance.get12());
assertEquals(m11, instance.get11());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(m1, instance.get1());
assertEquals(RS_BOOLEAN.getValue(), ResultSetUtil.getBoolean(RESULT_SET, RS_BOOLEAN.getLabel())); assertEquals(RS_BOOLEAN.getValue(), ResultSetUtil.getBoolean(RESULT_SET, RS_BOOLEAN.getIndex())); assertNull(ResultSetUtil.getBoolean(NULL_RESULT_SET, RS_BOOLEAN.getLabel())); assertNull(ResultSetUtil.getBoolean(NULL_RESULT_SET, RS_BOOLEAN.getIndex()));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), instance.apply(0));
assertNotNull(e1);
assertEquals(0, (int) instance.get0());
assertTrue(instance().getValues().isEmpty());
assertEquals(RS_REF.getValue(), ResultSetUtil.getRef(RESULT_SET, RS_REF.getLabel())); assertEquals(RS_REF.getValue(), ResultSetUtil.getRef(RESULT_SET, RS_REF.getIndex())); assertNull(ResultSetUtil.getRef(NULL_RESULT_SET, RS_REF.getLabel())); assertNull(ResultSetUtil.getRef(NULL_RESULT_SET, RS_REF.getIndex()));
assertEquals(m14, instance.get14());
assertEquals(5, (int) instance.get5());
assertNotEquals(0, StandardJavaTypeMapping.stream().count());
assertEquals(stringToInt, ms.toMap());
assertNotNull(JvmVersion.getSpecificationTitle());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(Foo.class, instance().getType());
assertEquals(14, (int) instance.get14());
assertEquals(A, Formatting.unQuote("\\"" + A + "\\""));
assertEquals(Optional.empty(), Formatting.fileToClassName(FOO_SIMPLE_NAME + ".c++"));
assertEquals(m4, instance.get4());
assertEquals(m1, instance.get1());
assertEquals(6, (int) instance.get6());
assertEquals(expected, actual);
assertTrue(output.contains(Level.FATAL.toText()));
assertEquals(0, (int) instance.get0());
assertEquals(1, (int) instance.get1());
assertEquals(expected, actual, "Compare as HEX: ");
assertEquals(TEXT, licenseTerm.getText());
assertEquals(m1, instance.get1());
assertEquals(name, instance().getName());
assertEquals(0.0, DoubleRangeUtil.requireZero(0.0, RuntimeException::new));
assertNull(instance.trySplit());
assertEquals(1, cnt.get());
assertEquals(14, (int) instance.get14());
assertTrue(instance().getGenerics().isEmpty());
assertEquals(m5, instance.get5());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), instance.apply(0));
assertNotNull(instance.sequential());
assertEquals(m1, instance.get1());
assertEquals(16, (int) instance.get16());
assertEquals(9, (int) instance.get9());
assertEquals(TYPE_NAME, instance.getTypeName());
assertEquals(expected, actual);
assertEquals(12, (int) instance.get12());
assertEquals(m1, instance.get1());
assertNotNull(instance.orThrow());
assertEquals(0.0, IntRangeUtil.requireNotEquals(0, 1, RuntimeException::new));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(INJECTOR.getOrThrow(JavaLanguageNamer.class), instance.namer());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(RS_TIME.getValue(), ResultSetUtil.getTime(RESULT_SET, RS_TIME.getLabel())); assertEquals(RS_TIME.getValue(), ResultSetUtil.getTime(RESULT_SET, RS_TIME.getIndex())); assertNull(ResultSetUtil.getTime(NULL_RESULT_SET, RS_TIME.getLabel())); assertNull(ResultSetUtil.getTime(NULL_RESULT_SET, RS_TIME.getIndex()));
assertEquals(m8, instance.get8());
assertEquals(19, (int) instance.get19().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(3, table1.columns().count()); assertEquals(4, table1.columns().count()); assertEquals("TestTable1Column1,TestTable1Column2,TestTable1Column3,TestTable1Column4", table1.columns().map(Column::getName).collect(Collectors.joining(",")));
assertEquals(2, (int) instance.get2());
assertEquals(m4, instance.get4());
assertSame(newFormatter, instance.getFormatter());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(1, instance.flatMapToLong(s -> LongStream.range(0, s.length())).count());
assertEquals(stringToInt, ms.toMap());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(22, (int) instance.get22().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual); assertFalse(injector.getAfter(Foo.class, bar).isPresent());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), instance.apply(0));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertNotNull(generator.getDependencyMgr());
assertNotNull(getMutatorInstance().addNewColumn());
assertEquals(2, (int) instance.get2());
assertEquals(1, cnt.get());
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals(m6, instance.get6());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), instance.apply(0));
assertEquals(0.0, DoubleRangeUtil.requireEquals(0.0, 0.0));
assertEquals(m5, instance.get5());
assertEquals(expected, actual);
assertNotNull(map); assertEquals(5678L, map.get("id"));
assertEquals(NAME, instance().getName());
assertEquals(expected, actual);
assertEquals(0.0, DoubleRangeUtil.requireNonPositive(0.0));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(7, (int) instance.get7());
assertEquals(m4, instance.get4());
assertNotNull(result); assertFalse(result.isClosed());
assertEquals(ELEMENT, actual, EPSILON);
assertEquals(6, (int) instance.get6());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2));
assertNotNull(properties); assertEquals("1", properties.getProperty("a"));
assertEquals(m19, instance.get19());
assertEquals(m1, instance.get1());
assertEquals(singletonList(OTHER_ELEMENT), s);
assertEquals(instance, result);
assertNotNull(toLong); assertEquals("three".length(), toLong.applyAsLong("three")); assertEquals(0, toLong.applyAsLong(null));
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(RS_DATE.getValue(), ResultSetUtil.getDate(RESULT_SET, RS_DATE.getLabel())); assertEquals(RS_DATE.getValue(), ResultSetUtil.getDate(RESULT_SET, RS_DATE.getIndex())); assertNull(ResultSetUtil.getDate(NULL_RESULT_SET, RS_DATE.getLabel())); assertNull(ResultSetUtil.getDate(NULL_RESULT_SET, RS_DATE.getIndex()));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(m1, instance.get1());
assertNotNull(generator.metaOn(Document.of(), String.class)); assertNotNull(generator.metaOn(Document.of(), String.class, DocumentView.class)); assertNotNull(generator.metaOn(Document.of())); assertNotNull(generator.metaOn(new ArrayList<>())); assertNotNull(generator.metaOn(new ArrayList<>(), String.class)); assertNotNull(generator.metaOn(new ArrayList<>(), String.class, DocumentView.class));
assertEquals(expected, actual);
assertNotNull(DatabaseUtil.dbmsTypeOf(dbmsHandlerComponent, dbms));
assertTrue(instance().getFields().isEmpty());
assertEquals("value", stringHolder.get());
assertEquals(7, (int) instance.get7());
assertEquals(expected, actual);
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(Injector.class, instance.getRepresentedType());
assertTrue(output.contains(Level.ERROR.toText()));
assertEquals(m8, instance.get8());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(4, (int) instance.get4());
assertNotNull(getMutatorInstance().addNewSchema());
assertEquals(1, cnt.get());
assertNotNull(getMutatorInstance().addNewIndex());
assertNotNull(instance.getFieldQuoteStart());
assertTrue(spliterator.tryAdvance(e -> cnt.incrementAndGet())); assertFalse(spliterator.tryAdvance(e -> cnt.incrementAndGet()));
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), instance.apply(0));
assertEquals(m7, instance.get7());
assertNotEquals(0, instance.hashCode());
assertEquals(MapperType.FLOAT_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getParent().isPresent());
assertEquals(Stream.of(words).collect(toSet()), set);
assertEquals(m16, instance.get16());
assertEquals(m3, instance.get3());
assertEquals(7, (int) instance.get7());
assertEquals(1, toLongOrThrow.applyAsLong(1L));
assertEquals(18, (int) instance.get18());
assertEquals(1, instance.toArray().length);
assertEquals(1, cnt.get());
assertEquals(m2, instance.get2());
assertEquals(0, LongRangeUtil.requireEquals(0, 0, RuntimeException::new));
assertEquals(m19, instance.get19());
assertEquals(PATH, instance.basePackageName());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(m7, instance.get7());
assertEquals(m4, instance.get4());
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(1.0, IntRangeUtil.requireNotEquals(1, 0, RuntimeException::new));
assertEquals(17, (int) instance.get17());
assertEquals(0, (int) instance.get0());
assertEquals(m18, instance.get18());
assertEquals(RS_OBJECT.getValue(), ResultSetUtil.getObject(RESULT_SET, RS_OBJECT.getLabel())); assertEquals(RS_OBJECT.getValue(), ResultSetUtil.getObject(RESULT_SET, RS_OBJECT.getIndex())); assertNull(ResultSetUtil.getObject(NULL_RESULT_SET, RS_OBJECT.getLabel())); assertNull(ResultSetUtil.getObject(NULL_RESULT_SET, RS_OBJECT.getIndex()));
assertEquals(VALUE, instance().getValue());
assertEquals(TypeMapper.Category.ENUM, instance.getJavaTypeCategory(column));
assertEquals(0, instance.compare(null, null)); assertEquals(1, instance.compare(null, "test")); assertEquals(-1, instance.compare("test", null)); assertEquals(0, instance.compare("test", "test")); assertEquals(1, instance.compare("test", "a")); assertEquals(-1, instance.compare("a", "test"));
assertEquals(m13, instance.get13());
assertNotEquals(NAME, instance().getName());
assertEquals(1, cnt.get());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertNotNull(Elements.html());
assertEquals(m16, instance.get16());
assertEquals(0.0, LongRangeUtil.requireInRange(0, -1,1, RuntimeException::new));
assertEquals(TestEnum.class, composeToEnum.enumClass()); assertNotNull(composeToEnum.firstStep()); assertNotNull(composeToEnum.secondStep()); assertNull(composeToEnum.apply(null)); assertNotNull(composeToEnum.apply("VALUE"));
assertNotNull(e); assertTrue(e.invoke(1, classMapper));
assertEquals(expected, actual);
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m19, instance.get19());
assertEquals(m0, instance.get0());
assertEquals(m8, instance.get8());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getFields().isEmpty());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertNotNull(array.decodeJsonArray());
assertNull(instance.spliterator().trySplit());
assertEquals(Optional.of(ELEMENT), instance.min(Comparator.naturalOrder()));
assertEquals(4, (int) instance.get4());
assertEquals(expected, actual);
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals("TheOvalRoom", Formatting.javaNameFromExternal("the_oval_room"));
assertEquals(new HashSet<>(asList(Bar.class, Baz.class)), injectables);
assertEquals(STRATEGY, instance.getMissingArgumentStrategy());
assertNotNull(toInt); assertEquals(1, toInt.applyAsInt("")); assertEquals(0, toInt.applyAsInt(null));
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), instance.apply(0));
assertNotNull(instance.orThrow());
assertEquals(TEXT, output);
assertEquals(m18, instance.get18());
assertEquals(m6, instance.get6());
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(3, (int) instance.get3());
assertEquals(m17, instance.get17());
assertEquals(asList(Baz.class, Bar.class), injector.stream(Foo.class).map(Object::getClass).collect(toList())); assertEquals(singletonList(Bar.class), injector.stream(Bar.class).map(Object::getClass).collect(toList())); assertEquals(0, injector.stream(Integer.class).count());
assertEquals(m15, instance.get15());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(m10, instance.get10());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(expected, actual);
assertEquals(0, instance.compare(pair1.getFirst(), pair1.getSecond())); assertEquals(-1, instance.compare(pair2.getFirst(), pair2.getSecond())); assertEquals(1, instance.compare(pair3.getFirst(), pair3.getSecond())); assertEquals(0, instance.compare(pair4.getFirst(), pair4.getSecond()));
assertEquals(0, instance.toDatabaseType(User.Name.ZERO));
assertEquals(8, (int) instance.get8());
assertEquals(expected, actual);
assertEquals("MySchema", instance.typeName(schema));
assertEquals(4, (int) instance.get4());
assertEquals(m9, instance.get9());
assertEquals(4, (int) instance.get4());
assertEquals(m6, instance.get6());
assertEquals(Type.PERSIST, persistOperation.type()); assertEquals(Type.UPDATE, updateOperation.type()); assertEquals(Type.REMOVE, removeOperation.type());
assertEquals(MapperType.CHAR_TO_CHAR, toCharMapper.mapperType());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), instance.apply(0));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals("UserImpl", instance.entityImplName());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), instance.apply(0));
assertEquals(1, cnt.get());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertFalse(isContainingOnlyFieldPredicate(COMPLEX.and(person -> true)));
assertEquals(-1, signLong.applyAsByte(-1L)); assertEquals(0, signLong.applyAsByte(0L)); assertEquals(1, signLong.applyAsByte(1L));
assertEquals("Foo", Formatting.ucfirst("foo"));
assertEquals(FOO_SIMPLE_NAME + ".java", Formatting.classToJavaFileName(FOO_SIMPLE_NAME));
assertEquals(19, (int) instance.get19().orElseThrow(NoSuchElementException::new));
assertNotEquals(0, instance.hashCode());
assertEquals(1.0, IntRangeUtil.requireNotEquals(1, -1, RuntimeException::new));
assertEquals(m1, instance.get1());
assertEquals(12, (int) instance.get12());
assertEquals(4, (int) instance.get4());
assertEquals(2, instance.expressions().size());
assertEquals(LOGGER_FORMATTER.apply(Level.WARN, LOGGER_NAME, MESSAGE), output);
assertNotNull(StreamComposition.concat(a, b, c));
assertNotNull(instance.getHeaders());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(1, toByteOrThrow.applyAsByte((byte) 1));
assertNotEquals(0, instance.hashCode());
assertTrue(instance().getImports().isEmpty());
assertEquals(1, LongRangeUtil.requireNonZero(1, RuntimeException::new));
assertEquals("1", instance.getResult());
assertEquals(m20, instance.get20());
assertNotNull(Expressions.byteToDouble(b -> (byte) b));
assertEquals(1.0, DoubleRangeUtil.requireNotEquals(1.0, -1.0, RuntimeException::new));
assertTrue(instance().getFields().isEmpty());
assertTrue(result.contains("{")); assertTrue(result.contains(" return 1;")); assertTrue(result.contains("}"));
assertEquals(m12, instance.get12());
assertEquals(m10, instance.get10());
assertTrue(instance().getConstructors().isEmpty());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(m9, instance.get9());
assertEquals(expected, actual);
assertTrue(html.contains("Speedment"));
assertEquals(7, (int) instance.get7());
assertEquals(LIST_WITHOUT_NULL, NullUtil.requireNonNullElements(LIST_WITHOUT_NULL));
assertNotNull(instance.getJavaClass());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(m3, instance.get3());
assertEquals(SCHEMA, INSTANCE.getSchemaId());
assertEquals(-1.0, DoubleRangeUtil.requireEquals(-1.0, -1.0));
assertEquals(m5, instance.get5());
assertEquals(expected, actual);
assertEquals(15, (int) instance.get15());
assertEquals(actual, expected, format("Compare %s then %s using %s", comp1.getField().identifier().getColumnId(), Entity.LONG.identifier().getColumnId(), comp ) );
assertEquals(9, (int) instance.get9());
assertEquals(expected, actual);
assertNotNull(Expressions.minus(ToShort.of(s -> (short) 1), 1)); assertNotNull(Expressions.minus(ToShort.of(s -> (short) 1), ToShort.of(s -> (short) 1))); assertNotNull(Expressions.minus(ToFloat.of(f -> 1f), 1f)); assertNotNull(Expressions.minus(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f)));
assertEquals(expResult, result);
assertEquals(m16, instance.get16());
assertNotEquals(oldProject.getName(), instance.getProject().getName());
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertEquals(1, toDoubleMapper.applyAsDouble(BigDecimal.valueOf(1))); assertEquals(MapperType.BIG_DECIMAL_TO_DOUBLE, toDoubleMapper.mapperType());
assertEquals(m3, instance.get3());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertEquals(17, (int) instance.get17().orElseThrow(NoSuchElementException::new));
assertEquals(A + B + A + B, Formatting.repeat(A + B, 2));
assertEquals(FORMATTER, instance.getFormatter()); assertTrue(output.contains(FORMATTER_TEXT));
assertTrue(instance().getFields().isEmpty());
assertEquals(m0, instance.get0());
assertTrue(instance().getJavadoc().isPresent());
assertEquals(MAX_RETAIN_SIZE, instance.getMaxRetainSize());
assertNull(newBaz.bar); assertNotNull(newBaz.bar);
assertEquals(0.0, LongRangeUtil.requireNotEquals(0, -1, RuntimeException::new));
assertFalse(instance().getJavadoc().isPresent());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertEquals(1L, actual1); assertEquals(2L, actual2); assertEquals(3L, actual3);
assertEquals(Level.INFO, instance.getLevel());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertEquals(m4, instance.get4());
assertFalse(instance().getParent().isPresent());
assertNotNull(instance.getColumnHandler());
assertEquals(m11, instance.get11());
assertEquals(actual, expected, format("Compare %s then %s using %s", comp1.getField().identifier().getColumnId(), Entity.DOUBLE.identifier().getColumnId(), comp ) );
assertEquals(m13, instance.get13());
assertEquals(m18, instance.get18());
assertEquals(m22, instance.get22());
assertEquals(OTHER_NAME, instance().getName());
assertEquals(4, (int) instance.get4());
assertEquals(m0, instance.get0());
assertTrue(instance().getClasses().isEmpty());
assertEquals(m0, instance.get0());
assertEquals(13, (int) instance.get13().orElseThrow(NoSuchElementException::new));
assertEquals("A and B", StringUtil.commaAnd("A", "B"));
assertNotNull(composeToFloat.firstStep()); assertNotNull(composeToFloat.secondStep()); assertNull(composeToFloat.apply(null)); assertNotNull(composeToFloat.apply("test"));
assertEquals(0, instance.listeners().count()); assertEquals(loggerEventListener, instance.listeners().findFirst().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0());
assertEquals(m9, instance.get9());
assertNotEquals(0, instance.hashCode());
assertEquals(m4, instance.get4());
assertNotNull(getMutatorInstance().addNewTable());
assertEquals(State.STARTED, instance.getCurrentState()); assertEquals(State.STOPPED, instance.getCurrentState());
assertEquals(expected, actual); assertTrue(actual instanceof ConcurrentMap);
assertEquals(0.0, DoubleRangeUtil.requireNonNegative(0.0));
assertNotNull(toBoolean); assertTrue(toBoolean.applyAsBoolean("three")); assertTrue(toBoolean.applyAsBoolean(null));
assertTrue(instance().getAnnotations().isEmpty());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertArrayEquals(expected, actual);
assertEquals(1, cnt.get());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(6, (int) instance.get6());
assertTrue(instance.getDependencies().isEmpty());
assertEquals(m15, instance.get15());
assertEquals(1, strings.size());
assertFalse(instance.noneMatch(ELEMENT::equals)); assertTrue(SingletonStream.of(OTHER_ELEMENT).noneMatch(ELEMENT::equals));
assertFalse(instance.isParallel()); assertTrue(newStream.isParallel());
assertEquals(m11, instance.get11());
assertEquals(1, cnt.get());
assertFalse(instance().getParent().isPresent());
assertEquals(9, (int) instance.get9());
assertEquals(-1.0, DoubleRangeUtil.requireNonZero(-1.0));
assertEquals(5, (int) instance.get5());
assertEquals("GeneratedUserManager", instance.generatedManagerName());
assertEquals(expected, actual);
assertEquals(MissingArgumentStrategy.SKIP_INVOCATION, strategy);
assertEquals(-1.0, LongRangeUtil.requireEquals(-1, -1, RuntimeException::new));
assertEquals(-1.0, DoubleRangeUtil.requireNotEquals(-1.0, 0.0, RuntimeException::new));
assertEquals(m14, instance.get14());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertNotNull(instance.inner());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getImports().isEmpty());
assertEquals(1, cnt.get());
assertNotNull(toByte); assertEquals("tree".getBytes()[0], toByte.applyAsByte("three")); assertEquals((byte) 0, toByte.applyAsByte(null));
assertEquals(m2, instance.get2());
assertEquals(-1, signByte.applyAsByte((byte) -1)); assertEquals(0, signByte.applyAsByte((byte) 0)); assertEquals(1, signByte.applyAsByte((byte) 1));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertNotNull(Expressions.floatToDoubleNullable(b -> (float) b));
assertTrue(instance.allMatch(ELEMENT::equals)); assertFalse(SingletonStream.of(OTHER_ELEMENT).allMatch(ELEMENT::equals));
assertTrue(instance.getLabel().toLowerCase().contains("enum"));
assertEquals(m2, instance.get2());
assertTrue(toString.toLowerCase().contains(STATE_REQUIRED.name().toLowerCase())); assertTrue(toString.contains(Integer.class.getSimpleName()));
assertNotNull(toFloatNullable); assertEquals(0, toFloatNullable.applyAsFloat("1")); assertNull(toFloatNullable.apply(null));
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.ERROR.toText()));
assertNotNull(instance.getSubSelectAlias());
assertEquals(expected, actual);
assertEquals(m13, instance.get13());
assertEquals(m17, instance.get17());
assertTrue(type.getTypeName().contains("T"));
assertEquals(m6, instance.get6());
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertEquals(transform, instance.getTransform());
assertEquals(Tuples.of(0, 1, 2, 3), instance.apply(0));
assertEquals(m13, instance.get13());
assertTrue(instance().getImports().isEmpty());
assertEquals(m2, instance.get2());
assertEquals(14, (int) instance.get14());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals("", StringUtil.commaAnd());
assertEquals(m9, instance.get9());
assertEquals(4, (int) instance.get4());
assertNotNull(toIntNullable); assertEquals(0, toIntNullable.applyAsInt("1")); assertNull(toIntNullable.apply(null));
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertEquals(instance, instance); assertFalse(instance.equals(null)); assertFalse(instance.equals(1)); assertFalse(instance.equals(Integer.class)); assertNotEquals(instance, other); assertNotEquals(other, instance);
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(RS_INT.getValue(), ResultSetUtil.getInt(RESULT_SET, RS_INT.getLabel())); assertEquals(RS_INT.getValue(), ResultSetUtil.getInt(RESULT_SET, RS_INT.getIndex())); assertNull(ResultSetUtil.getInt(NULL_RESULT_SET, RS_INT.getLabel())); assertNull(ResultSetUtil.getInt(NULL_RESULT_SET, RS_INT.getIndex()));
assertEquals(expected, actual);
assertEquals(18, (int) instance.get18().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertNotEquals(INSTANCE.hashCode(), other.hashCode());
assertEquals(2, (int) instance.get2());
assertEquals(short.class, typeMapper().getJavaType(column()));
assertEquals(int.class, typeMapper().getJavaType(column()));
assertEquals(11, (int) instance.get11());
assertEquals(FOO_PACKAGE_NAME, Formatting.packageName(FOO_NAME).orElseThrow(NoSuchElementException::new));
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(User.Name.ZERO, actual); assertEquals(User.Name.ZERO, instance.toJavaType(column, User.class, 0));
assertEquals(m10, instance.get10());
assertEquals(expected, actual);
assertEquals(m9, instance.get9());
assertNotNull(Elements.table());
assertEquals(0, (int) instance.get0());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(m18, instance.get18());
assertEquals(m5, instance.get5());
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertEquals(m6, instance.get6());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getJavadoc().isPresent());
assertEquals(m4, instance.get4());
assertEquals(m10, instance.get10());
assertEquals(RS_BIG_DECIMAL.getValue(), ResultSetUtil.getBigDecimal(RESULT_SET, RS_BIG_DECIMAL.getLabel())); assertEquals(RS_BIG_DECIMAL.getValue(), ResultSetUtil.getBigDecimal(RESULT_SET, RS_BIG_DECIMAL.getIndex())); assertNull(ResultSetUtil.getBigDecimal(NULL_RESULT_SET, RS_BIG_DECIMAL.getLabel())); assertNull(ResultSetUtil.getBigDecimal(NULL_RESULT_SET, RS_BIG_DECIMAL.getIndex()));
assertEquals(10, (int) instance.get10());
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertNull(instance.apply(null)); assertTrue(instance.apply("test")); assertFalse(instance.apply("ab"));
assertEquals(Tuples.of(), instance.apply(0));
assertTrue(p.stream().allMatch(set::contains));
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertNotNull(composeToLong.firstStep()); assertNotNull(composeToLong.secondStep()); assertNull(composeToLong.apply(null)); assertNotNull(composeToLong.apply("test"));
assertEquals(m8, instance.get8());
assertEquals(m15, instance.get15());
assertEquals(m0, instance.get0());
assertEquals(10, (int) instance.get10().orElseThrow(NoSuchElementException::new));
assertEquals(m14, instance.get14());
assertEquals(6, (int) instance.get6());
assertEquals(-1, signInt.applyAsByte(-1)); assertEquals(0, signInt.applyAsByte(0)); assertEquals(1, signInt.applyAsByte(1));
assertEquals(m4, instance.get4());
assertEquals(7, (int) instance.get7());
assertEquals(m6, instance.get6());
assertEquals(13, (int) instance.get13());
assertEquals(NAME, instance().getName());
assertEquals(m17, instance.get17());
assertEquals(Foo2.class, instance().getType());
assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserEnd()); assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserEnd(true)); assertNotNull(DATABASE_NAMING_CONVENTION.getFieldEncloserEnd(false));
assertEquals(1, ms.distinct().count());
assertEquals(expected, actual);
assertEquals(2, (int) instance.get2().orElseThrow(NoSuchElementException::new));
assertFalse(instance().getJavadoc().isPresent());
assertEquals(List.class.getName(), genericType.getRawType().getTypeName()); assertArrayEquals(new Type[]{String.class}, genericType.getActualTypeArguments());
assertEquals(m17, instance.get17());
assertNotNull(Elements.meta());
assertEquals(m10, instance.get10());
assertFalse(instance().getParent().isPresent());
assertNotNull(getMutatorInstance().addNewForeignKey());
assertEquals(m0, instance.get0());
assertNotEquals(Optional.empty(), instance.decodeJson()); assertEquals(Optional.empty(), fail.decodeJson());
assertEquals(m14, instance.get14());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(m14, instance.get14());
assertEquals(factory, instance.getFactory());
assertEquals(m7, instance.get7());
assertEquals(singletonList(Foo.class), injector.injectables().collect(toList()));
assertEquals(m16, instance.get16());
assertNotNull(e); assertTrue(e.invoke(1, classMapper));
assertEquals(1, ms.distinctValues().count());
assertEquals(3, (int) instance.get3());
assertEquals(1, cnt.get());
assertEquals(type, instance().getValue());
assertEquals(expected, actual);
assertEquals(1, standardBlob.position(standardBlob, 1));
assertEquals(A, Formatting.nl()); assertEquals(A + A, Formatting.dnl());
assertEquals(7, (int) instance.get7());
assertEquals(m8, instance.get8());
assertEquals(low, instance().getLowerBound().orElseThrow(NoSuchElementException::new));
assertEquals(-1.0, LongRangeUtil.requireNotEquals(-1, 1, RuntimeException::new));
assertEquals(schema, instance.schemaOrThrow());
assertEquals(1L, instance.limit(1).count());
assertEquals("a", PrintUtil.limit(CHARS, 1));
assertTrue(instance().getConstants().isEmpty());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), instance.apply(0));
assertEquals(12, (int) instance.get12());
assertEquals(expected, actual);
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6), instance.apply(0));
assertNotNull(builder.persist(manager));
assertEquals(m13, instance.get13());
assertEquals(5, (int) instance.get5());
assertEquals(expected, actual);
assertEquals(m0, instance.get0());
assertEquals(17, (int) instance.get17());
assertEquals(m4, instance.get4());
assertEquals(m8, instance.get8());
assertEquals(1, (int) instance.get1());
assertEquals(12, (int) instance.get12());
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertNotNull(b);
assertNotNull(Expressions.multiply(ToShort.of(s -> (short) 1), 1)); assertNotNull(Expressions.multiply(ToShort.of(s -> (short) 1), ToShort.of(s -> (short) 1))); assertNotNull(Expressions.multiply(ToFloat.of(f -> 1f), 1f)); assertNotNull(Expressions.multiply(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f)));
assertEquals(1.0, DoubleRangeUtil.requireNonNegative(1.0, RuntimeException::new));
assertEquals(m10, instance.get10());
assertTrue(instance().getValues().isEmpty());
assertEquals(m6, instance.get6());
assertEquals(m13, instance.get13());
assertEquals(RS_ROW_ID.getValue(), ResultSetUtil.getRowId(RESULT_SET, RS_ROW_ID.getLabel())); assertEquals(RS_ROW_ID.getValue(), ResultSetUtil.getRowId(RESULT_SET, RS_ROW_ID.getIndex())); assertNull(ResultSetUtil.getRowId(NULL_RESULT_SET, RS_ROW_ID.getLabel())); assertNull(ResultSetUtil.getRowId(NULL_RESULT_SET, RS_ROW_ID.getIndex()));
assertTrue(OptionalUtil.parseInt("1").isPresent()); assertFalse(OptionalUtil.parseInt(null).isPresent());
assertEquals(m3, instance.get3());
assertEquals(-1.0, DoubleRangeUtil.requireNegative(-1.0, RuntimeException::new));
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertEquals(m11, instance.get11());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertEquals(TestEnum.class, instance.enumClass());
assertEquals(Operator.DIVIDE, divide.operator()); assertNotNull(divide.first()); assertNotNull(divide.second()); assertNotEquals(0, divide.hashCode()); assertTrue(divide.equals(copy)); assertFalse(divide.equals(null)); assertTrue(divide.equals(another1)); assertFalse(divide.equals(another2));
assertEquals(!reversed, comp.reversed().isReversed());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertEquals(FOO_SIMPLE_NAME, Formatting.stripGenerics(FOO_SIMPLE_NAME+"<String>")); assertEquals(FOO_SIMPLE_NAME, Formatting.stripGenerics(FOO_SIMPLE_NAME+"[]"));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(4, (int) instance.get4());
assertEquals(MapperType.SHORT_TO_SHORT, toShortMapper.mapperType());
assertEquals(m4, instance.get4());
assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new));
assertTrue(instance.isToolApplicable());
assertEquals(m11, instance.get11());
assertTrue(type.getTypeName().toLowerCase().contains(COLUMN_NAME.toLowerCase()));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(2, instance.applyAsFloat((float) 1)); assertEquals(1, instance.applyAsFloat((float) 0));
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertEquals(RS_SQLXML.getValue(), ResultSetUtil.getSQLXML(RESULT_SET, RS_SQLXML.getLabel())); assertEquals(RS_SQLXML.getValue(), ResultSetUtil.getSQLXML(RESULT_SET, RS_SQLXML.getIndex())); assertNull(ResultSetUtil.getSQLXML(NULL_RESULT_SET, RS_SQLXML.getLabel())); assertNull(ResultSetUtil.getSQLXML(NULL_RESULT_SET, RS_SQLXML.getIndex()));
assertEquals(m5, instance.get5());
assertNotNull(XmlGenerator.forJava());
assertEquals(m2, instance.get2());
assertEquals(OTHER_NAME, instance().getName());
assertEquals(m10, instance.get10());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(m9, instance.get9());
assertEquals(m8, instance.get8());
assertEquals(8, (int) instance.get8());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(m17, instance.get17());
assertEquals(1.0, DoubleRangeUtil.requireEquals(1.0, 1.0, RuntimeException::new));
assertEquals(expected, actual);
assertEquals(1, (int) instance.get1());
assertFalse(injectable.hasSupplier());
assertEquals(m4, instance.get4());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3 + "|" + MESSAGE4));
assertEquals(long.class, instance().getType());
assertEquals(Long.class, instance().getType());
assertEquals(expected, actual);
assertNotNull(instance.isNullPredicate());
assertEquals(m14, instance.get14());
assertEquals(20, (int) instance.get20());
assertEquals(0, instance.skip(1).count());
assertEquals(Optional.of("A"), result); assertEquals(Collections.singletonList("A"), producedItems);
assertEquals(Boolean.class, typeMapper().getJavaType(column()));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(m5, instance.get5());
assertEquals(m2, instance.get2());
assertEquals(4, (int) instance.get4());
assertEquals(PREFIX, instance.prefix());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(3, (int) instance.get3());
assertEquals("A, B and C", StringUtil.commaAnd("A", "B", "C"));
assertEquals(rows.get(0).length(), rows.get(1).length());
assertNotNull(toLongNullable); assertEquals(0, toLongNullable.applyAsLong("1")); assertNull(toLongNullable.apply(null));
assertTrue(instance.getExecutions().isEmpty());
assertNotEquals(0, instance.hashCode());
assertEquals(m8, instance.get8());
assertEquals(6, (int) instance.get6());
assertEquals(m3, instance.get3());
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertTrue(instance().getAnnotations().isEmpty());
assertEquals(Arrays.asList(2, 1, 3), Permutation.permutation(2, LIST));
assertEquals(m9, instance.get9());
assertFalse(result);
assertSame(expected, INSTANCE.identifier());
assertEquals(0, (int) instance.get0());
assertEquals(m6, instance.get6());
assertEquals(m1, instance.get1());
assertEquals(expected, actual); assertTrue(actual instanceof NavigableMap);
assertTrue(injectable.hasSupplier());
assertEquals(1, strings.size());
assertEquals(expResult, result);
assertEquals(21, (int) instance.get21().orElseThrow(NoSuchElementException::new));
assertEquals(User.Name.ONE, actual); assertEquals(User.Name.ONE, instance.toJavaType(column, User.class, "ONE"));
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE));
assertEquals(m9, instance.get9());
assertEquals(Optional.of(Boolean.TRUE), instance.isVersionOk());
assertEquals(0, instance.compare(pair1.getFirst(), pair1.getSecond())); assertEquals(-1, instance.compare(pair2.getFirst(), pair2.getSecond())); assertEquals(1, instance.compare(pair3.getFirst(), pair3.getSecond())); assertEquals(0, instance.compare(pair4.getFirst(), pair4.getSecond()));
assertNotNull(Elements.h1());
assertEquals(RS_ARRAY.getValue(), ResultSetUtil.getArray(RESULT_SET, RS_ARRAY.getLabel())); assertEquals(RS_ARRAY.getValue(), ResultSetUtil.getArray(RESULT_SET, RS_ARRAY.getIndex())); assertNull(ResultSetUtil.getArray(NULL_RESULT_SET, RS_ARRAY.getLabel())); assertNull(ResultSetUtil.getArray(NULL_RESULT_SET, RS_ARRAY.getIndex()));
assertEquals(renderStack, instance.getRenderStack());
assertFalse(result);
assertEquals(15, (int) instance.get15());
assertEquals(NAME, instance().getName());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), instance.apply(0));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals("mySchema", instance.variableName(schema));
assertEquals(2, fields.size(), fields.toString());
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame));
assertNotNull(JvmVersion.getSpecificationVendor());
assertEquals(m8, instance.get8());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(7, (int) instance.get7());
assertEquals(m21, instance.get21());
assertTrue(instance().getImports().isEmpty());
assertFalse(JvmVersion.isJava8());
assertEquals(m13, instance.get13());
assertEquals(m19, instance.get19());
assertEquals(m18, instance.get18());
assertEquals(m17, instance.get17());
assertEquals(13, (int) instance.get13());
assertEquals(DB, INSTANCE.getDbmsId());
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertTrue(output.contains(Level.WARN.toText()));
assertEquals(CombinedPredicate.Type.OR, or.getType()); assertEquals(CombinedPredicate.Type.AND, and.getType()); assertEquals(CombinedPredicate.Type.OR, orComposed.getType()); assertEquals(CombinedPredicate.Type.AND, andComposed.getType());
assertEquals(OTHER_ELEMENT + ELEMENT, instance.reduce(OTHER_ELEMENT, (a, b) -> a + b));
assertEquals(0, (int) instance.get0().orElseThrow(NoSuchElementException::new));
assertEquals(String.class, instance().getType());
assertEquals(RS_STRING.getValue(), ResultSetUtil.getString(RESULT_SET, RS_STRING.getLabel())); assertEquals(RS_STRING.getValue(), ResultSetUtil.getString(RESULT_SET, RS_STRING.getIndex())); assertNull(ResultSetUtil.getString(NULL_RESULT_SET, RS_STRING.getLabel())); assertNull(ResultSetUtil.getString(NULL_RESULT_SET, RS_STRING.getIndex()));
assertEquals(m1, instance.get1());
assertEquals(0, instance.applyAsShort((short) 1));
assertFalse(nullOptional.isPresent()); assertFalse(illegalCastOptional.isPresent()); assertTrue(successfulOptional.isPresent()); assertEquals(1, successfulOptional.get().intValue());
assertEquals(FOO_SIMPLE_NAME, Formatting.fileToClassName(FOO_SIMPLE_NAME + ".java").orElseThrow(NoSuchElementException::new));
assertEquals(0, instance.applyAsInt((short) 1));
assertEquals(11, (int) instance.get11());
assertEquals(m12, instance.get12());
assertEquals(0, IntRangeUtil.requireZero(0, RuntimeException::new));
assertNotNull(instance.getSchemaExcludeSet());
assertEquals(expected, actual);
assertArrayEquals(ARRAY_WITHOUT_NULL, result);
assertEquals(1.0, DoubleRangeUtil.requirePositive(1.0, RuntimeException::new));
assertEquals(m3, instance.get3());
assertEquals(7, (int) instance.get7());
assertEquals(Tuples.of(0), instance.apply(0));
assertEquals(m7, instance.get7());
assertTrue(actual.contains("DEBUG")); assertTrue(actual.contains("LOGGER_NAME")); assertTrue(actual.contains("Some message")); assertTrue(actual.contains("-")); assertTrue(actual.contains(":")); assertTrue(actual.contains("T")); assertTrue(actual.contains("Z"));
assertEquals(LOGGER_FORMATTER.apply(Level.DEBUG, LOGGER_NAME, MESSAGE), output);
assertEquals(renderTree, instance.getRenderTree());
assertEquals(12, (int) instance.get12().orElseThrow(NoSuchElementException::new));
assertEquals(eRes, result);
assertEquals(TABLE, INSTANCE.getTableId());
assertNotNull(toDouble); assertEquals("three".length(), toDouble.applyAsDouble("three")); assertEquals(0, toDouble.applyAsDouble(null));
assertEquals(A + "," + B, actual);
assertNotNull(Elements.td());
assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertEquals("value", stringHolder.get());
assertEquals(expected, actual, EPSILON);
assertEquals(m14, instance.get14());
assertEquals(m13, instance.get13());
assertEquals(1.0, DoubleRangeUtil.requireNotEquals(1.0, 0.0));
assertNotNull(toDouble); assertNotEquals(0, toDouble.applyAsDouble("test"));
assertEquals(2, (int) instance.get2());
assertTrue(instance().getCode().isEmpty()); assertEquals(singletonList(code), instance().getCode());
assertEquals(7, (int) instance.get7());
assertEquals(0.0, LongRangeUtil.requireNonPositive(0, RuntimeException::new));
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), instance.apply(0));
assertEquals(m5, instance.get5());
assertEquals(3, (int) instance.get3());
assertEquals(fullName("User"), instance.entityType().getTypeName());
assertEquals(10, (int) instance.get10());
assertEquals(7, (int) instance.get7());
assertFalse(actual.isPresent());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(6, (int) instance.get6());
assertEquals(Optional.empty(), instance.column());
assertEquals(8, (int) instance.get8());
assertEquals(10, (int) instance.get10());
assertEquals(expected, actual);
assertNotNull(map); assertEquals("Hello, \\"World\\"!\\n", map.get("message"));
assertEquals(name, instance().getName());
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertFalse(instance.tryAdvance((Consumer<Long>) i -> cnt.incrementAndGet())); assertEquals(0, cnt.get());
assertEquals(16, (int) instance.get16());
assertEquals(m4, instance.get4());
assertEquals(m16, instance.get16());
assertEquals(11, (int) instance.get11());
assertEquals(12, (int) instance.get12());
assertEquals(m3, instance.get3());
assertEquals(m3, instance.get3());
assertEquals(m8, instance.get8());
assertEquals(m3, instance.get3());
assertEquals(expected, actual);
assertTrue(output.contains(RuntimeException.class.getName())); assertTrue(output.contains(Level.FATAL.toText()));
assertEquals(0.0, DoubleRangeUtil.requireEquals(0.0, 0.0, RuntimeException::new));
assertEquals(2, (int) instance.get2());
assertEquals(11, (int) instance.get11());
assertEquals(1, (int) instance.get1().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(m13, instance.get13());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertFalse(instance().getParent().isPresent());
assertEquals(m5, instance.get5());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(m19, instance.get19());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(m2, instance.get2());
assertTrue(JvmVersion.minor() >= 0);
assertNotNull(instance.getSkipLimitSupport());
assertEquals(m7, instance.get7());
assertEquals(dbms, instance.dbmsOrThrow());
assertEquals("A", StringUtil.commaAnd("A"));
assertEquals(m5, instance.get5());
assertEquals(m16, instance.get16());
assertEquals(m8, instance.get8());
assertEquals(m14, instance.get14());
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertNull(toDoubleNullable.apply(null));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertEquals(0, instance.loggers().count()); assertEquals(1, instance.loggers().count());
assertEquals(m8, instance.get8());
assertNotNull(map); assertEquals("Hello, World!", map.get("message")); assertEquals("Greetings!", map.get("title"));
assertEquals(file, instance().getParent().orElseThrow(NoSuchElementException::new));
assertEquals(1, cnt.get());
assertEquals(m12, instance.get12());
assertEquals(9, (int) instance.get9().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(m7, instance.get7());
assertNotNull(code);
assertEquals(m18, instance.get18());
assertEquals(m12, instance.get12());
assertEquals(value, instance().getValue().orElseThrow(NoSuchElementException::new));
assertNotNull(Elements.rows("string"));
assertEquals(fullName("olle.User"), instance.fullyQualifiedTypeName("olle"));
assertEquals(SEPARATOR, instance.separator());
assertEquals(byte.class, typeMapper().getJavaType(column()));
assertEquals(1, cnt.get());
assertTrue(xmlDeclarationView.transform(generator, xmlDeclaration).isPresent());
assertEquals(expected, actual);
assertEquals(m6, instance.get6());
assertEquals(expResult, result);
assertTrue(instance.hasNext());
assertNotNull(instance.isNullPredicate());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertEquals(15, (int) instance.get15());
assertEquals(m0, instance.get0());
assertNull(loggerEvent);
assertEquals(RS_OBJECT.getValue(), ResultSetUtil.getUUID(RESULT_SET, RS_OBJECT.getLabel())); assertEquals(RS_OBJECT.getValue(), ResultSetUtil.getUUID(RESULT_SET, RS_OBJECT.getIndex())); assertNull(ResultSetUtil.getUUID(NULL_RESULT_SET, RS_OBJECT.getLabel())); assertNull(ResultSetUtil.getUUID(NULL_RESULT_SET, RS_OBJECT.getIndex()));
assertEquals(8, (int) instance.get8());
assertEquals(List.class, instance().getSupertype().orElseThrow(NoSuchElementException::new));
assertEquals(-1.0, IntRangeUtil.requireNotEquals(-1, 1, RuntimeException::new));
assertEquals(javadoc, instance().getJavadoc().orElseThrow(NoSuchElementException::new));
assertEquals(m0, instance.get0());
assertEquals(11, (int) instance.get11());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4), instance.apply(0));
assertEquals(m3, instance.get3());
assertEquals(0, LongRangeUtil.requireZero(0, RuntimeException::new));
assertEquals(ELEMENT, instance.next());
assertNotNull(map); assertEquals(-5678L, map.get("id"));
assertEquals(16, (int) instance.get16());
assertEquals(expected, actual);
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertEquals(1, cnt.get());
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(expResult, result);
assertEquals(expected, actual);
assertFalse(instance().getJavadoc().isPresent());
assertEquals(m12, instance.get12());
assertEquals(LOGGER_FORMATTER.apply(Level.ERROR, LOGGER_NAME, MESSAGE), output);
assertEquals(11, (int) instance.get11());
assertEquals(9, (int) instance.get9());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), instance.apply(0));
assertEquals(3, (int) instance.get3());
assertTrue(instance().getImports().isEmpty());
assertFalse(JvmVersion.major() == 0);
assertTrue(instance().getMethods().isEmpty());
assertNotNull(instance.inner());
assertEquals(1, instance.limit(1).count());
assertEquals(1, instance.flatMapToInt(s -> IntStream.range(0, s.length())).count());
assertEquals(m1, instance.get1());
assertTrue(instance.isNull(null)); assertFalse(instance.isNull("test"));
assertEquals(18, (int) instance.get18().orElseThrow(NoSuchElementException::new));
assertEquals(refStream().collect(Collectors.toList()), entries);
assertTrue(instance.isNotNull("test")); assertFalse(instance.isNotNull(null));
assertEquals(m0, instance.get0());
assertEquals(Arrays.asList("A", "B", "C"), result);
assertEquals(0, (int) instance.get0());
assertEquals(m0, instance.get0());
assertEquals(1, cnt.get());
assertEquals(TuplesOfNullables.ofNullables(), instance.apply(0));
assertEquals(Tuples.of(0, 1), instance.apply(0));
assertEquals(m3, instance.get3());
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(8, (int) instance.get8());
assertEquals(SystemOutLogger.class, new SystemOutLoggerFactory().loggerClass());
assertNotNull(e); assertTrue(e.invoke(1, classMapper));
assertNotNull(Elements.tr());
assertEquals(m17, instance.get17());
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(1, instance.sorted().count());
assertEquals(expected, actual);
assertEquals(m4, instance.get4());
assertEquals(MapperType.BIG_DECIMAL_TO_BIG_DECIMAL, toBigDecimalMapper.mapperType());
assertEquals(m1, instance.get1());
assertEquals(-1.0, DoubleRangeUtil.requireNonPositive(-1.0, RuntimeException::new));
assertTrue(instance().getModifiers().isEmpty());
assertEquals(m6, instance.get6());
assertEquals(1, instance.applyAsFloat((float) 1)); assertEquals(1, instance.applyAsFloat((float) 1));
assertEquals(List.class.getName(), genericType.getRawType().getTypeName()); assertArrayEquals(new String[]{String.class.getName()}, Stream.of(genericType.getActualTypeArguments()).map(Type::getTypeName).toArray());
assertEquals(m16, instance.get16());
assertEquals(m6, instance.get6());
assertEquals( OptimizedCountTerminator.create().getClass().getName(), instance.getCountTerminator().getClass().getName() );
assertEquals(14, (int) instance.get14().orElseThrow(NoSuchElementException::new));
assertEquals(m10, instance.get10());
assertEquals(m6, instance.get6());
assertEquals(m2, instance.get2());
assertEquals(m4, instance.get4());
assertEquals(Arrays.asList(3, 1, 2), Permutation.permutation(4, LIST));
assertTrue(instance().getAnnotations().isEmpty());
assertEquals(15, (int) instance.get15().orElseThrow(NoSuchElementException::new));
assertEquals(0, (int) instance.get0());
assertNotNull(instance.inner());
assertEquals(14, (int) instance.get14());
assertTrue(attributeView.transform(generator, attribute).isPresent()); assertTrue(attributeView.transform(generator, attribute).isPresent());
assertEquals(m15, instance.get15());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), instance.apply(0));
assertEquals(Foo.class, dependencyNode.getRepresentedType());
assertEquals(Optional.empty(), instance().getJavadoc());
assertEquals(m13, instance.get13());
assertEquals(m12, instance.get12());
assertEquals(expResult, result);
assertEquals(m10, instance.get10());
assertEquals(6, (int) instance.get6());
assertNotEquals(0, instance.characteristics() & Spliterator.NONNULL); assertNotEquals(0, instance.characteristics() & Spliterator.SIZED); assertNotEquals(0, instance.characteristics() & Spliterator.SUBSIZED); assertNotEquals(0, instance.characteristics() & Spliterator.IMMUTABLE); assertNotEquals(0, instance.characteristics() & Spliterator.DISTINCT); assertNotEquals(0, instance.characteristics() & Spliterator.ORDERED);
assertEquals(1.0, IntRangeUtil.requireEquals(1, 1, RuntimeException::new));
assertEquals(7, (int) instance.get7());
assertEquals(expected, actual);
assertFalse(instance().getParent().isPresent());
assertNotNull(Elements.h5());
assertEquals(expected, actual);
assertEquals(7, (int) instance.get7().orElseThrow(NoSuchElementException::new));
assertEquals(m11, instance.get11());
assertEquals(expected, actual);
assertEquals(0.0, DoubleRangeUtil.requireNotEquals(0.0, 1.0));
assertTrue(actual.contains(Baz.class.getName())); assertTrue(actual.contains(Foo.class.getSimpleName())); assertTrue(actual.contains("Missing"));
assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new));
assertFalse(instance.tryAdvance((Consumer<Integer>) i -> cnt.incrementAndGet())); assertEquals(0, cnt.get());
assertEquals(6, (int) instance.get6().orElseThrow(NoSuchElementException::new));
assertTrue(JvmVersion.security() >= 0);
assertEquals(-1.0, DoubleRangeUtil.requireNonZero(-1.0, RuntimeException::new));
assertEquals(9, (int) instance.get9());
assertNotNull(map); assertEquals(-1L, list.get(0).get("one")); assertEquals(-2L, list.get(1).get("two")); assertEquals(-3L, list.get(2).get("three"));
assertEquals(m7, instance.get7());
assertEquals("sP", support.variableName());
assertEquals(14, (int) instance.get14());
assertNotNull(DATABASE_NAMING_CONVENTION.getFieldQuoteEnd());
assertEquals(expected, actual, "Compare as UUID: ");
assertEquals(1, LongRangeUtil.requirePositive(1, RuntimeException::new));
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertNull(toDoubleNullable.apply(null));
assertEquals(expected, actual);
assertTrue(instance.applyAsBoolean("test")); assertFalse(instance.applyAsBoolean("ab"));
assertEquals(1, instance.mapToDouble(String::length).sum(), EPSILON);
assertTrue(actual.contains("id")); assertTrue(actual.contains(Integer.toString(ID))); assertTrue(actual.contains("name")); assertTrue(actual.contains(NAME));
assertEquals(FOO_GENERICS_SIMPLE_NAME, Formatting.shortName(FOO_GENERICS_NAME));
assertEquals(m7, instance.get7());
assertNull(instance.toDatabaseType(null));
assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new));
assertEquals(expected, actual);
assertNotNull(toDoubleNullable); assertEquals(1, toDoubleNullable.applyAsDouble("three")); assertNull(toDoubleNullable.apply(null));
assertEquals(6, (int) instance.get6());
assertTrue(isContainingOnlyFieldPredicate(ID_GT_0));
assertEquals(Arrays.asList("A", "B", "C"), result);
assertNotNull(instance.inner());
assertTrue(new RuntimeBundle().injectables().count() > 0);
assertNotNull(toLong); assertEquals(1, toLong.applyAsLong("")); assertEquals(0, toLong.applyAsLong(null));
assertEquals(1, toFloatOrThrow.applyAsFloat(1f));
assertEquals(m12, instance.get12());
assertEquals(m7, instance.get7());
assertEquals(m1, instance.get1());
assertNotNull(map); assertEquals(true, map.get("condition"));
assertEquals(20, (int) instance.get20());
assertEquals(m15, instance.get15());
assertEquals(RS_BYTE.getValue(), ResultSetUtil.getByte(RESULT_SET, RS_BYTE.getLabel())); assertEquals(RS_BYTE.getValue(), ResultSetUtil.getByte(RESULT_SET, RS_BYTE.getIndex())); assertNull(ResultSetUtil.getByte(NULL_RESULT_SET, RS_BYTE.getLabel())); assertNull(ResultSetUtil.getByte(NULL_RESULT_SET, RS_BYTE.getIndex()));
assertNotNull(Elements.a());
assertEquals(5, (int) instance.get5());
assertTrue(typeMapperComponentClasses.contains(StringToEnumTypeMapper.class)); assertTrue(typeMapperComponentClasses.contains(IntegerToEnumTypeMapper.class));
assertEquals(m15, instance.get15());
assertEquals(m4, instance.get4());
assertEquals(TestEnum.class, toEnumMapper.enumClass()); assertEquals(MapperType.ENUM_TO_ENUM, toEnumMapper.mapperType());
assertEquals(Foo.class, dependencyNode.getRepresentedType());
assertNotNull(Elements.p());
assertEquals(expected, actual);
assertNotNull(toInt); assertNotEquals(0, toInt.applyAsInt("test"));
assertTrue(instance.tryAdvance((IntConsumer) i -> cnt.incrementAndGet())); assertEquals(1, cnt.get());
assertEquals(8, (int) instance.get8());
assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), instance.apply(0));
assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new));
assertTrue(instance().getCode().isEmpty());
assertEquals(4, (int) instance.get4());
assertEquals(singleton(INSTANCE), managerComponent.stream().collect(toSet()));
assertNotNull(INSTANCE.getRenderStack());
assertTrue(instance().getModifiers().isEmpty());
assertEquals(A, Formatting.ifelse(Optional.of(A), s -> s, B)); assertEquals(B, Formatting.ifelse(Optional.empty(), s -> s, B));
assertEquals(m1, instance.get1());
assertEquals(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), instance.apply(0));
assertNotNull(e);
assertNotNull(instance.isNullPredicate());
assertEquals(value, instance().getValue());
assertEquals(1, cnt.get());
assertEquals(m14, instance.get14());
assertTrue(instance().getImports().isEmpty());
assertFalse(instance().getValue().isPresent());
assertEquals(4, (int) instance.get4());
assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + "|" + MESSAGE + "|" + MESSAGE2 + "|" + MESSAGE3));
assertNotNull(Elements.h2());
assertEquals(-1, signFloat.applyAsByte(-1f)); assertEquals(0, signFloat.applyAsByte(0f)); assertEquals(1, signFloat.applyAsByte(1f));
assertEquals("One", instance.toDatabaseType(User.Name.ONE));
assertEquals(ELEMENT, instance.nextLong());
assertEquals(Formatting.nl() + Formatting.nl(), Formatting.dnl());
assertEquals(expected, actual);
assertNotNull(instance.getTitle());
assertEquals(A, Formatting.tab());
assertEquals(9, (int) instance.get9());
assertEquals(m2, instance.get2());
assertEquals(NAME, instance.getName());
assertEquals(i, instance().getParent().orElseThrow(NoSuchElementException::new));
assertNotNull(instance.getFormatter()); assertEquals(FORMATTER, instance.getFormatter());
assertEquals(type, instance().getType());
assertEquals(expected, actual);
assertTrue(instance().getTypeParameters().isEmpty());
assertTrue(instance().getModifiers().isEmpty());
assertNotNull(generator.onEach(new ArrayList<>()));
assertEquals(m1, instance.get1());
assertTrue(result >= 0); assertEquals(MAX_AGE, instance.getMaxAge());
assertEquals(1, spliterator.estimateSize()); assertEquals(0, spliterator.estimateSize()); assertEquals(1, cnt.get());
assertEquals("\\n", Formatting.nl());
assertEquals(m7, instance.get7());
assertNotNull(getMutatorInstance().addNewForeignKeyColumn());
assertTrue(isContainingOnlyFieldPredicate(ID_GT_0_AND_AGE_EQ_2));
assertEquals(m11, instance.get11());
assertEquals(12, (int) instance.get12());
assertEquals(13, result.size()); assertEquals(6, Collections.frequency(result, boxeToTest));
assertEquals("(6,2,5,0)", pattern.toString());
assertEquals(Result.Status.OK, result.getStatus());
assertTrue(action.valueMatches("oldVal")); assertTrue(action.valueMatches("1oldVal")); assertTrue(action.valueMatches("oldVal1")); assertTrue(action.valueMatches("1oldVal1")); assertFalse(action.valueMatches("1newVal1"));
assertEquals("Create", validator.getLabel());
assertTrue(returnString.startsWith("Moved"));
assertTrue(returnString.startsWith("WARN"));
assertFalse(validator.validate(true).isSuccessful());
assertTrue(validator.validate(true).isSuccessful());
assertEquals(0, count);
assertNotNull(binding.contentUpgradeBuilder());
assertEquals("Updated jcr:primaryType to " + newPrimaryType, result);
assertEquals("Replicate Page", validator.getLabel());
assertFalse(validator.validate(true).isSuccessful());
assertTrue(StringUtils.isNotBlank(icon));
assertTrue(validator.validate(true).isSuccessful());
assertTrue(StringUtils.isNotBlank(icon));
assertEquals(result, "Deleted resource " + COMPONENT);
assertFalse(service.isValidScriptName("test.fallback.groovy"));
assertTrue(service.matchesRunmodes("name.author")); assertTrue(service.matchesRunmodes("name.test"));
assertFalse(util.isPageResource(resource));
assertEquals(resolver, serviceResolver);
assertEquals(STATE.RUNNING, entry.getState());
assertTrue(result.contains("\\"sling:resourceType\\": \\"weretail/components/content/heroimage\\"")); assertTrue(result.contains("\\"number\\": 123")); assertTrue(result.contains("\\"multivalue\\": [")); assertTrue(result.contains("\\"v1\\",")); assertTrue(result.contains("\\"v2\\",")); assertTrue(result.contains("\\"v3\\""));
assertTrue(result.contains("Unable to find a page"));
assertNotNull(duration);
assertEquals(configResource, handler.getModuleConfig(resolver));
assertTrue(service.matchesRunmodes("name.author.test")); assertTrue(service.matchesRunmodes("name.author.test;testNO")); assertTrue(service.matchesRunmodes("name.authorNO.test;test2.author"));
assertEquals(HistorySearchHandler.ID, handler.getID());
assertTrue(StringUtils.isNotBlank(icon));
assertTrue(result.contains("Deleted page"));
assertFalse(util.isPageResource(resource));
assertEquals("...textsometextsometext<span class=\\"aecu-highlight\\">_endofpath</span>", snippet);
assertEquals("Modify", validator.getLabel());
assertEquals(Arrays.asList(), service.getFiles(DIR));
assertTrue(result.contains("Replicated page"));
assertTrue(result.contains("Deleted page"));
assertTrue(validator.validate(true).isSuccessful());
assertEquals(PATH, path);
assertEquals("Create Page", validator.getLabel());
assertTrue(comp.compare(validator1, validator2) < 0); assertTrue(comp.compare(validator2, validator1) > 0);
assertEquals(resolver, context.getResolver());
assertEquals(PATH + "\\n\\n", history);
assertTrue(StringUtils.isNotBlank(icon));
assertTrue(validator.validate(true).isSuccessful());
assertTrue(StringUtils.isBlank(duration));
assertTrue(validator.validate(true).isSuccessful());
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertTrue(result.contains("Replicated page tree")); assertTrue(result.contains("1 pages"));
assertEquals(pageManager, context.getPageManager());
assertFalse(service.matchesRunmodes("name.publish"));
assertTrue(result.contains("Unable to find a page"));
assertEquals(Result.Status.OK, result.getStatus());
assertTrue(service.isValidScriptName("test.groovy"));
assertTrue(validator.validate(true).isSuccessful());
assertEquals(1, entries.size());
assertFalse(util.isPageResource(resource));
assertFalse(validator.validate(true).isSuccessful());
assertTrue(service.matchesRunmodes("name"));
assertEquals("Delete", validator.getLabel());
assertEquals("Write ACL", validator.getLabel());
assertFalse(servlet.validateParameter(null)); assertFalse(servlet.validateParameter("")); assertTrue(servlet.validateParameter("123"));
assertTrue(comp.compare(validator1, validator2) == 0);
assertTrue(comp.compare(validator1, validator2) < 0); assertTrue(comp.compare(validator2, validator1) > 0);
assertEquals(1, entries.size());
assertFalse(validator.validate(true).isSuccessful());
assertNull(service.getFallbackScript(resolver, "/path/to/fallback.groovy"));
assertEquals("<span class=\\"aecu-highlight\\">fallback_</span>&lt;b&gt;text_sometextsome...", snippet);
assertEquals("...ext_sometextsometext<span class=\\"aecu-highlight\\">111</span>sometextsometextsome...", snippet);
assertNull(service.getFallbackScript(resolver, "/path/to/script.fallback.groovy"));
assertTrue(handler.getPredicateSuggestions(resolver, null, null).isEmpty());
assertNotNull(result); assertEquals(2, result.size()); assertEquals("contentUpgradeBuilder", result.get(0).getName()); assertEquals("validateAccessRights", result.get(1).getName());
assertNotNull(actualJsonContent); assertNotNull(actualJson); assertTrue(actualJson.size() > 5); assertTrue(actualJson.contains(new JsonPrimitive("aecu"))); assertTrue(actualJson.contains(new JsonPrimitive("contentUpgradeBuilder()"))); assertTrue(actualJson.contains(new JsonPrimitive("run()")));
assertFalse(validator.validate(true).isSuccessful());
assertEquals(1, variables.size()); assertNotNull(variable); assertNotNull(binding);
assertEquals("newVal", action.getNewValue("oldVal")); assertEquals("1newVal", action.getNewValue("1oldVal")); assertEquals("newVal1", action.getNewValue("oldVal1")); assertEquals("1newVal1", action.getNewValue("1oldVal1")); assertEquals("1newVal11newVal1", action.getNewValue("1oldVal11oldVal1"));
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertTrue(result.contains("Replicated resource"));
assertEquals("<span class=\\"aecu-highlight\\">fallback_</span>&lt;b&gt;text_sometextsome...", snippet);
assertEquals("Updated values from " + OLD_VAL + " to " + NEW_VAL + " in " + PATH, result);
assertTrue(comp.compare(validator1, validator2) < 0); assertTrue(comp.compare(validator2, validator1) > 0);
assertNotNull(end);
assertFalse(validator.validate(true).isSuccessful());
assertEquals(resolver, request.getResourceResolver());
assertEquals(jcrQuery, handler.getSpellCheckQuery(resolver, ""));
assertTrue(result.contains("Unable to find a page"));
assertEquals(resolver, serviceResolver);
assertTrue(returnString.startsWith("INFO"));
assertEquals("<span class=\\"aecu-highlight\\">path_</span>text_sometextsometex...", snippet);
assertEquals(result, expectedResult);
assertEquals(1, count);
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertEquals(entry, history);
assertTrue(result.contains(NOT_DEFINED_PROPERTY + " not defined"));
assertTrue(StringUtils.isNotBlank(date));
assertTrue(result.contains("Replicated page"));
assertFalse(model.isAbleToReadHistory());
assertEquals(resolver, serviceResolver);
assertNull(service.getFallbackScript(resolver, "/path/to/script.always.groovy")); assertNull(service.getFallbackScript(resolver, "/path/to/script.groovy"));
assertFalse(traversData.isResourceValid(resource));
assertFalse(validator.validate(true).isSuccessful());
assertEquals("<span class=\\"aecu-highlight\\">output_</span>text_sometextsometex...", snippet);
assertEquals("Updated values from " + OLD_VAL + " to " + NEW_VAL + " in " + PATH, result);
assertEquals(Result.Status.OK, result.getStatus());
assertEquals("1", version);
assertTrue(validator.validate(true).isSuccessful());
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertEquals("50", data.getOkLength()); assertEquals("75", data.getFailedLength()); assertEquals("25", data.getFailedRemainder()); assertEquals("50", data.getOkRemainder()); assertEquals("50", data.getPercentageOk());
assertTrue(result.contains(EXISTING_MULTI_VALUE_PROPERTY + " = [" + ANY_VALUE + ", " + ANY_VALUE + "]"));
assertTrue(validator.validate(true).isSuccessful());
assertFalse(validator.validate(true).isSuccessful());
assertTrue(validator.validate(true).isSuccessful());
assertEquals("Modify Page", validator.getLabel());
assertTrue(validator.validate(true).isSuccessful());
assertTrue(traversData.isResourceValid(resource));
assertTrue(result.contains("Replicated page tree")); assertTrue(result.contains("2 pages"));
assertEquals(1, files.size()); assertEquals(FILE1, files.get(0));
assertNotNull(start);
assertEquals("Replicate", validator.getLabel());
assertFalse(validator.validate(true).isSuccessful());
assertTrue(result.contains("Replicated resource"));
assertEquals("/path/to/script.fallback.groovy", service.getFallbackScript(resolver, "/path/to/script.always.groovy")); assertEquals("/path/to/script.fallback.groovy", service.getFallbackScript(resolver, "/path/to/script.groovy"));
assertTrue(StringUtils.isNotBlank(date));
assertFalse(validator.validate(true).isSuccessful());
assertTrue(result.contains(path));
assertTrue(StringUtils.isNotBlank(icon));
assertTrue(StringUtils.isNotBlank(icon));
assertEquals("", result);
assertEquals(Result.Status.WARN, result.getStatus());
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertEquals("Delete Page", validator.getLabel());
assertTrue(StringUtils.isNotBlank(duration));
assertEquals(Arrays.asList(DIR + "/" + FILE1), service.getFiles(DIR));
assertEquals("newVal-oldVal", action.getNewValue("oldVal")); assertEquals("newVal-oldVal#newVal-oldVal", action.getNewValue("oldVal#oldVal"));
assertFalse(service.matchesRunmodes("name.author.testNO")); assertFalse(service.matchesRunmodes("name.author.testNO;testNO")); assertFalse(service.matchesRunmodes("name.author.testNO;test2NO.author"));
assertFalse(service.isValidScriptName("test.txt"));
assertEquals("Read Page", validator.getLabel());
assertTrue(validator.validate(true).isSuccessful());
assertFalse(validator.validate(true).isSuccessful());
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertEquals("<span class=\\"aecu-highlight\\">result_</span>text_sometextsometex...", snippet);
assertTrue(util.isPageResource(resource));
assertTrue(result.contains("Replicated page"));
assertEquals(Arrays.asList(FILE1), service.getFiles(FILE1));
assertTrue(model.isAbleToExecute());
assertEquals("Read", validator.getLabel());
assertEquals(Result.Status.CRITICAL, result.getStatus());
assertTrue(result.contains("Replicated resource"));
assertNotNull(binding.validateAccessRights());
assertFalse(context.isDryRun());
assertTrue(result.contains("Correct"));
assertEquals(tagManager, context.getTagManager());
assertTrue(validator.validate(true).isSuccessful());
assertTrue(result.contains(EXISTING_SINGLE_VALUE_PROPERTY + " = " + ANY_VALUE));
assertTrue(context.isDryRun());
assertEquals(jcrQuery, handler.getSuggestionQuery(resolver, ""));
assertEquals("Read ACL", validator.getLabel());
assertFalse(validator.validate(true).isSuccessful());
assertThat(a).isNotSameAs(b); assertThat(a).isSameAs(secondReferenceToA);
assertThat(mostInterestingLevel).isEqualTo("com.beta.bla");
assertThat(version) .isNotNull() .startsWith("2.");
assertThat(level.name).isEqualTo(levelName); assertThat(level.components).containsExactly(domestic, rodent); assertThat(level.dependencies).containsExactly( new ComponentDep(domestic, rodent) ); assertThat(level.dependency(domestic, rodent).strength).isEqualTo(2); assertThat(level.component("domestic").size).isGreaterThan(level.component("rodent").size);
assertThat(level.name).isEqualTo(levelName); assertThat(level.components).containsExactly(root, mouse); assertThat(level.dependencies).isEmpty();
assertEquals("Annie", userList.get(0).getNick()); assertEquals("John", userList.get(1).getNick()); assertEquals("Lenny", userList.get(2).getNick()); assertEquals("Niles", userList.get(3).getNick());
assertNull(resourceLoader.getResource("/sounds/unknown.wav"));
assertFalse(folder.exists()); assertTrue(folder.exists()); assertTrue(subFolder.exists());
assertEquals("this.is.a.song_2.ogg", file.getName());
assertFalse(me.isNewMsg());
assertFalse(networkUtils.sameNetworkInterface(null, null)); assertTrue(networkUtils.sameNetworkInterface(interface1, interface1)); assertTrue(networkUtils.sameNetworkInterface(interface2, interface2)); assertFalse(networkUtils.sameNetworkInterface(interface1, interface2)); assertFalse(networkUtils.sameNetworkInterface(interface1, null)); assertFalse(networkUtils.sameNetworkInterface(null, interface2));
assertEquals("Say hello to Nelly from Niles!", messages.getMessage("test.hello", "Nelly", "Niles")); assertEquals("Say hello to 3 from false!", messages.getMessage("test.hello", 3L, false));
assertNull(Tools.shorten(null, 5)); assertEquals("Monkey", Tools.shorten("Monkey", 12)); assertEquals("Monkey", Tools.shorten("Monkey", 6)); assertEquals("Monke", Tools.shorten("Monkey", 5)); assertEquals("M", Tools.shorten("Monkey", 1)); assertEquals("", Tools.shorten("Monkey", 0)); assertEquals("", Tools.shorten("Monkey", -5));
assertEquals(String.valueOf(me.getCode()), me.getNick());
assertNotNull(resourceLoader.getResource("/test-messages.properties"));
assertEquals("bananas_2.jpg", file.getName());
assertEquals("Superman", me.getNick());
assertEquals("", Tools.emptyIfNull(null));
assertEquals(0, userList.indexOf(user));
assertEquals("C:\\\\some folder\\\\logs\\\\", Tools.appendSlash("C:\\\\some folder\\\\logs")); assertEquals("C:\\\\some folder\\\\logs\\\\", Tools.appendSlash("C:\\\\some folder\\\\logs\\\\"));
assertFalse(messages.hasMessage("test.string10")); assertFalse(messages.hasMessage("test.hi")); assertFalse(messages.hasMessage("nothing"));
assertNull(Tools.getFileExtension(null)); assertEquals("", Tools.getFileExtension("file")); assertEquals(".txt", Tools.getFileExtension("file.txt")); assertEquals(".", Tools.getFileExtension("file.")); assertEquals(".txt", Tools.getFileExtension(".txt")); assertEquals(".", Tools.getFileExtension(".")); assertEquals(".jpg", Tools.getFileExtension("image.txt.jpg")); assertEquals(".extension", Tools.getFileExtension("some thing with spaces.extension"));
assertEquals(3, properties.size()); assertEquals("This is the first string", properties.getProperty("test.string1")); assertEquals("This is the second string", properties.getProperty("test.string2")); assertEquals("Say hello to {0} from {1}!", properties.getProperty("test.hello"));
assertEquals("STUFF_2", file.getName());
assertEquals("hello", Tools.emptyIfNull("hello"));
assertNotEquals(one, two); assertNotEquals(two, one); assertNotEquals(one.hashCode(), two.hashCode());
assertNull(Tools.getFileBaseName(null)); assertEquals("file", Tools.getFileBaseName("file")); assertEquals("file", Tools.getFileBaseName("file.txt")); assertEquals("file", Tools.getFileBaseName("file.")); assertEquals("", Tools.getFileBaseName(".txt")); assertEquals("", Tools.getFileBaseName(".")); assertEquals("image.txt", Tools.getFileBaseName("image.txt.jpg")); assertEquals("some thing with spaces", Tools.getFileBaseName("some thing with spaces.extension"));
assertTrue(user.getLogonTime() <= logonTime && user.getLogonTime() > logonTime - 10); assertEquals("swing", user.getClient()); assertEquals("linux", user.getOperatingSystem()); assertEquals(4000, user.getPrivateChatPort()); assertEquals(5000, user.getTcpChatPort());
assertEquals("This is the first string", messages.getMessage("test.string1")); assertEquals("This is the second string", messages.getMessage("test.string2"));
assertNotSame(userList.getListeners(), userList.getListeners());
assertTrue(Tools.isValidNick(defaultNickName)); assertEquals(defaultNickName, settings.getMe().getNick());
assertEquals(0, userList.indexOf(annie)); assertEquals(1, userList.indexOf(john)); assertEquals(2, userList.indexOf(lenny)); assertEquals(3, userList.indexOf(niles));
assertEquals(0, someOne.getPrivateChatPort());
assertEquals(one, one); assertEquals(one.hashCode(), one.hashCode());
assertEquals("0 days, 00:05:12", howLongFromNow);
assertEquals(one, two); assertEquals(two, one); assertEquals(one.hashCode(), two.hashCode());
assertFalse(nonExistingFile.exists()); assertEquals("monkeys.jpg", file.getName()); assertSame(nonExistingFile, file);
assertEquals("2 days, 14:44:06", howLongFromNow);
assertEquals(0, user.getLogonTime()); assertEquals("<unknown>", user.getClient()); assertEquals("<unknown>", user.getOperatingSystem()); assertEquals(0, user.getPrivateChatPort()); assertEquals(0, user.getTcpChatPort());
assertFalse(networkService.isNetworkUp()); assertFalse(chatState.isLogonCompleted()); assertFalse(chatState.isLogonCompleted());
assertSame(networkInterface, networkInterfaceInfo.getNetworkInterface());
assertEquals("monkeys_1.jpg", file.getName()); assertNull(file.getParent());
assertTrue(me.isMe());
assertEquals("donkeys_2.jpg", file.getName()); assertEquals(home, file.getParent());
assertEquals("Hello", Tools.postPadString("Hello", 0)); assertEquals("Hello", Tools.postPadString("Hello", 5)); assertEquals("Hello ", Tools.postPadString("Hello", 6)); assertEquals("Hello ", Tools.postPadString("Hello", 7)); assertEquals("Hello ", Tools.postPadString("Hello", 12));
assertEquals("0 days, 05:22:51", howLongFromNow);
assertEquals("Ultrasuper", me.getNick());
assertFalse(topic.hasTopic());
assertTrue(Tools.isValidNick(defaultNickName)); assertEquals(defaultNickName, settings.getMe().getNick());
assertEquals(0.08, Tools.percent(1, 1250), 10); assertEquals(25, Tools.percent(50, 200), 10); assertEquals(50, Tools.percent(5, 10), 10); assertEquals(100, Tools.percent(10, 10), 10); assertEquals(200, Tools.percent(60, 30), 10);
assertEquals(1, Tools.percentOf(0.08, 1250), 10); assertEquals(50, Tools.percentOf(25, 200), 10); assertEquals(5, Tools.percentOf(50, 10), 10); assertEquals(10, Tools.percentOf(100, 10), 10); assertEquals(60, Tools.percentOf(200, 30), 10);
assertEquals(-1, userList.indexOf(annie));
assertEquals(String.valueOf(me.getCode()), me.getNick());
assertFalse(chatState.isLogonCompleted()); assertTrue(chatState.isLogonCompleted());
assertFalse(messageSent);
assertEquals(0, userList.indexOf(user));
assertEquals("Wintendo", me.getOperatingSystem());
assertEquals("eth0", networkInterfaceInfo.getName());
assertTrue(messages.hasMessage("test.string1")); assertTrue(messages.hasMessage("test.string2")); assertTrue(messages.hasMessage("test.hello"));
assertEquals("0 days, 00:00:03", howLongFromNow);
assertFalse(me.isNewMsg());
assertTrue(timeSinceLastIdle >= 0); assertTrue(timeSinceLastIdle < 1000);
assertTrue(me.isMe());
assertEquals("apples_5.jpg", file.getName());
assertEquals("Nice day today (Kenny)", topic.toString());
assertEquals(String.valueOf(new DateTime().getYear()), dateAsString);
assertEquals("", Tools.emptyIfNull(""));
assertTrue(coreMessages.hasMessage("core.settings.errorPopup.saveFailed")); assertFalse(coreMessages.hasMessage("console.quit.message")); assertFalse(coreMessages.hasMessage("swing.button.ok"));
assertEquals("0 days, 00:00:00", howLongFromNow);
assertEquals("13.05.2014 23:52:28", dateAsString);
assertFalse(filePath.exists()); assertTrue(filePath.exists());
assertFalse(me.isWriting()); assertFalse(me.isWriting()); assertTrue(me.isWriting()); assertTrue(me.isWriting()); assertFalse(me.isWriting()); assertFalse(me.isWriting());
assertEquals(0, userList.indexOf(user));
assertNull(userList.get(0)); assertNull(userList.get(1));
assertEquals(1, userList.indexOf(user)); assertTrue(user.isOnline()); assertEquals(-1, userList.indexOf(user)); assertFalse(user.isOnline());
assertEquals("/var/log/", Tools.appendSlash("/var/log")); assertEquals("/var/log/", Tools.appendSlash("/var/log/"));
assertEquals("Super", me.getNick());
assertFalse(topic.hasTopic());
assertFalse(settings.isSound()); assertFalse(settings.isLogging()); assertFalse(settings.isSmileys()); assertFalse(settings.isBalloons()); assertFalse(settings.isSystemTray());
assertFalse(test1.equals(null)); assertFalse(test1.equals("No user"));
assertEquals("Intel Pro Wireless", networkInterfaceInfo.getDisplayName());
assertTrue(me.isNewMsg());
assertNull(osInterface); assertNull(osInterface); assertNotNull(osInterface); assertTrue(networkUtils.isUsable(osInterface));
assertEquals("this is a movie_2.mov", file.getName());
assertFalse(Tools.isEmpty("a")); assertFalse(Tools.isEmpty(" a ")); assertFalse(Tools.isEmpty("hello you")); assertTrue(Tools.isEmpty(null)); assertTrue(Tools.isEmpty("")); assertTrue(Tools.isEmpty(" "));
assertTrue(topic.hasTopic());
assertNotNull("Name of localhost should not be null", localHostName); assertEquals("The addresses should be equal", localHostAddress, addressByName);
assertNotNull(jmxBeans); assertEquals(3, jmxBeans.size()); assertTrue(containsBeanOfType(jmxBeans, NetworkInformation.class)); assertTrue(containsBeanOfType(jmxBeans, ControllerInformation.class)); assertTrue(containsBeanOfType(jmxBeans, GeneralInformation.class));
assertEquals(0, userList.indexOf(user));
assertTrue(timeSinceLogon >= 0); assertTrue(timeSinceLogon < 1000);
assertEquals("TheAmazing", me.getNick());
assertFalse(chatLogger.isOpen()); assertTrue(chatLogger.isOpen()); assertFalse(chatLogger.isOpen());
assertFalse(userList.remove(annie));
assertFalse(uniqueCodes.contains(code)); assertTrue(code >= 10000000); assertTrue(code <= 20000000); assertEquals(100, uniqueCodes.size());
assertEquals("Settings could not be saved:\\n20", message);
assertEquals(BigInteger.valueOf(1), exactDivide(BigInteger.valueOf(1), BigInteger.valueOf(1))); assertEquals(BigInteger.valueOf(3), exactDivide(BigInteger.valueOf(9), BigInteger.valueOf(3))); assertEquals(BigInteger.valueOf(4), exactDivide(BigInteger.valueOf(12), BigInteger.valueOf(3))); assertEquals(a.gcd(b), gcd(a, b));
assertEquals(String.format("val %d, mod %d", val, mod) + mod, expected, actual);
assertEquals(String.format("a %d, b %d", a, b) + b, expected, actual);
assertEquals(BigInteger.valueOf(2), modInverse(BigInteger.valueOf(3), BigInteger.valueOf(5))); assertEquals(x.modInverse(m), modInverse(x, m));
assertEquals(BigInteger.valueOf(11), gcd(BigInteger.valueOf(99), BigInteger.valueOf(88))); assertEquals(BigInteger.valueOf(4), gcd(BigInteger.valueOf(100), BigInteger.valueOf(88))); assertEquals(BigInteger.valueOf(1), gcd(BigInteger.valueOf(101), BigInteger.valueOf(88))); assertEquals(a.gcd(b), gcd(a, b));
assertEquals(String.format("a %d, b %d, p %d", a, b, p), bVal, exactDivide(pVal, aVal));
assertThat(calculator.price()).isEqualTo(0);
assertThat(generator.generate(10)).isEqualTo("Essayer le TDD c\'est l\'adopter");
assertThat(response.body().size()).isEqualTo(1); assertThat(firstComment).isNotNull(); assertThat(firstComment.content()).isEqualTo("Hi Dagmar, I take one. Thank you!"); assertThat(firstComment.userLiked()).isFalse(); assertThat(firstComment.author()).isEqualTo(commentAuthor);
assertThat(response.body().get(0).id()).isEqualTo("61723_4cae01"); assertThat(response.body().get(0).contact().jobCompany().name()).isEqualTo("Rails Heroes");
assertThat(e).isInstanceOf(AssertionError.class) .hasMessage("Unsupported date format! Expecting ISO 8601, but found: 2010-MAY-13");
assertThat(response.body().size()).isEqualTo(10); assertThat(firstPost.title()).isEqualTo("UL Test Tool User Group Meeting Munich"); assertThat(firstPost.permissions().size()).isEqualTo(5); assertThat(firstPost.permissions().get(0)).isEqualTo(PostPermission.READ);
assertThat(response.body().getContent()).isEqualTo("New message");
assertThat(user.primaryOccupationName()).isEqualTo(primaryOccupationName); assertThat(user.primaryOccupationName()).isEqualTo("Master of the Universe");
assertThat(adapter.fromJson("{\\"name\\":\\"hey\\",\\"utc_offset\\":null}")).isNull(); assertThat(adapter.fromJson("{\\"name\\":null,\\"utc_offset\\":null}")).isNull(); assertThat(adapter.fromJson("{\\"latitude\\":null,\\"longitude\\":24.45}")).isNull(); assertThat(adapter.fromJson("{}")).isNull();
assertThat(response.body().size()).isEqualTo(5);
assertThat(response.body().size()).isEqualTo(10); assertThat(firstGroup.closed()).isEqualTo(false); assertThat(firstGroup.name()).isEqualTo("Android Community");
assertThat(response.isSuccessful()).isTrue(); assertThat(industries.size()).isEqualTo(23); assertThat(industries.get(5).id()).isEqualTo(190000); assertThat(industries.get(5).segments().size()).isEqualTo(6);
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(user.isPremium()).isEqualTo(true); assertThat(basicUser.isPremium()).isEqualTo(false); assertThat(nullUser.isPremium()).isEqualTo(false);
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(user.primaryInstitutionName()).isEqualTo(primaryInstutionName); assertThat(user.primaryInstitutionName()).isEqualTo("Universe School");
assertThat(response.body().get(0).id()).isEqualTo("61723_4cae01"); assertThat(response.body().get(0).contact().jobCompany().name()).isEqualTo("Rails Heroes");
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(response).isNotNull(); assertThat(response.isSuccessful()).isFalse(); assertThat(response.token()).isNullOrEmpty(); assertThat(response.tokenSecret()).isNullOrEmpty();
assertThat(adapter.fromJson("\\"SPOCK\\"")).isNull();
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(response.body().id()).isEqualTo("61723_4cae01"); assertThat(response.body().contact().jobCompany().name()).isEqualTo("Mr. Recruiter"); assertThat(response.body().contact().user().id()).isEqualTo("3456gt_35345"); assertThat(response.body().location().zipCode()).isEqualTo("20354");
assertThat(calendar.get(Calendar.MONTH)).isEqualTo(Calendar.FEBRUARY); assertThat(calendar.get(Calendar.DAY_OF_MONTH)).isEqualTo(22); assertThat(calendar.get(Calendar.HOUR)).isEqualTo(0); assertThat(calendar.get(Calendar.YEAR)).isEqualTo(1970);
assertThat(conversation.getId()).isEqualTo("51626_4be761"); assertThat(conversation.getSubject()).isEqualTo("Business opportunities"); assertThat(conversation.getTotalMsgCount()).isEqualTo(2); assertThat(conversation.getUnreadMessageCount()).isEqualTo(1); assertThat(conversation.isReadOnly()).isFalse(); assertThat(conversation.getParticipants()).hasSize(2); assertThat(conversation.getLatestMessages()).hasSize(2);
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(response.body().size()).isEqualTo(7); assertThat(firstForum).isNotNull(); assertThat(firstForum.name()).isEqualTo("Vorstellungsrunde"); assertThat(firstForum.permissions()).isEqualTo(controlPermissions);
assertThat(request).isNotNull(); assertThat(request.getPath()).isEqualTo("/v1/users/me/web_profiles/stumble%20upon?" + "url=http%3A%2F%2Fwww.stumbleupon.com%2Flists%2F667513592373069968%2F" + "%2C" + "http%3A%2F%2Fwww.stumbleupon.com%2Finterest%2Fcats");
assertThat(response).isNotNull(); assertThat(response.isSuccessful()).isTrue(); assertThat(response.token()).isEqualTo("test"); assertThat(response.tokenSecret()).isEqualTo("test_test");
assertThat(new XingUser(null).isBlacklisted()).isTrue(); assertThat(new XingUser("").isBlacklisted()).isTrue(); assertThat(new XingUser("some_id").isBlacklisted()).isFalse();
assertThat(response.body().getContent()).isEqualTo("Wait a minute");
assertThat(post).isNotNull(); assertThat(post.title()).isEqualTo("UL Test Tool User Group Meeting Munich"); assertThat(post.author()).isEqualTo(author);
assertThat(range1).isEqualTo(range2); assertThat(range1.hashCode()).isEqualTo(range2.hashCode()); assertThat(range1).isNotEqualTo(range3); assertThat(range1.hashCode()).isNotEqualTo(range3.hashCode());
assertThat(response).isNotNull(); assertThat(response.body()).isEqualTo(Membership.MEMBER);
assertThat(api.callbackExecutor()).isNull();
assertThat(api.callbackExecutor()).isSameAs(executor);
assertThat(range1.toString()).isEqualTo("Xing-Content-Range: items 1-3/10"); assertThat(range2.toString()).isEqualTo("Xing-Content-Range: items 1-40");
assertThat(response.body()).isNotNull(); assertThat(response.body().id()).isEqualTo("23_abcdef");
assertThat(body.readUtf8()).isEqualTo("{\\"photo\\":{" + "\\"content\\":[]," + "\\"file_name\\":\\"picture.jpeg\\"," + "\\"mime_type\\":\\"image/jpeg\\"" + "}}");
assertThat(response.body().size()).isEqualTo(5);
assertThat(response.code()).isEqualTo(HttpURLConnection.HTTP_OK);
assertThat(response.body().getSubject()).isEqualTo("The subject!");
assertThat(response).isNull();
assertThat(ContentRange.parse(null)).isNull(); assertThat(ContentRange.parse("awefss")).isNull(); assertThat(ContentRange.parse("items 1/")).isNull(); assertThat(ContentRange.parse("items 1/2")).isNull(); assertThat(ContentRange.parse("items1-3/2")).isNull(); assertThat(ContentRange.parse("items232dsf")).isNull();
assertThat(response.body().size()).isEqualTo(7); assertThat(firstLiker).isNotNull(); assertThat(firstLiker.id()).isEqualTo("20177409_08f66a");
assertThat(notEmtyDate.isEmpty()).isFalse(); assertThat(emptyCalendar.isEmpty()).isTrue(); assertThat(startOfEpoch.isEmpty()).isFalse();
assertThat(response.body()).isNotNull(); assertThat(response.body().id()).isEqualTo("23_abcdef");
assertThat(response.body().size()).isEqualTo(6); assertThat(firstLiker).isNotNull(); assertThat(firstLiker.id()).isEqualTo("20455280_f9b463");
assertThat(calendarAdapter().fromJson("\\"\\"")).isNull();
assertThat(response.body().size()).isEqualTo(2); assertThat(response.body().get(0).getContent()).isEqualTo("Yes of course!");
assertThat(response.body().size()).isEqualTo(2);
assertThat(response.body().size()).isEqualTo(1); assertThat(response.body().get(0).getId()).isEqualTo("4321_xyza");
assertThat(response.body()).isNotNull(); assertThat(response.body().title()).isEqualTo("My funny Post"); assertThat(response.body().author().displayName()).isEqualTo("Vladimir");
assertThat(response.isSuccessful()).isTrue(); assertThat(response.body()).isNull();
assertThat(response.body().size()).isEqualTo(1);
assertThat(response.body().get(0).id()).isEqualTo("61723_4cae01");
assertTrue(messageList.isEmpty());
assertEquals(0, messages.size());
assertTrue(resultsFile.exists());
assertThat(atomicSequence.next()).isEqualTo(0); assertThat(atomicSequence.next()).isEqualTo(1); assertThat(atomicSequence.next()).isEqualTo(2); assertThat(atomicSequence.next()).isEqualTo(0);
assertThat(PeriodUtil.getPrecision(new Period(0L, 100L).duration(), 100)).isEqualTo(0); assertThat(PeriodUtil.getPrecision(new Period(0L, 100L).duration(), 10)).isEqualTo(1);
assertThat(exception.get()).isFalse();
assertThat(rollUpBitMask.asShort()).isEqualTo(mask);
assertThat(copy.getString()) .isEqualTo(original.getString()); assertThat(System.identityHashCode(original)) .isNotEqualTo(System.identityHashCode(copy));
assertThat(copy.getString()) .isEqualTo(original.getString()); assertThat(System.identityHashCode(original)) .isNotEqualTo(System.identityHashCode(copy));
assertThat(sections.size()).isEqualTo(1); assertThat(textDesc.getText()).isEqualTo("some \'other\' heading");
assertThat(Files.isRegularFile(out.getFile())).isFalse(); assertThat(Files.isRegularFile(zipFile)).isTrue(); assertThat(feedDir.getFileName().toString()).isEqualTo(FEED_NAME); assertThat(dateDirStr).isEqualTo(nowStr);
assertThat(rollUpBitMask2).isEqualTo(rollUpBitMask);
assertThat(mask.getTagPositionsAsList()).isEqualTo(tagPositionsInput);
assertThat(vars.length).isEqualTo(4); assertThat(vars[0]).isEqualTo("feed"); assertThat(vars[1]).isEqualTo("pipe"); assertThat(vars[2]).isEqualTo("uuid"); assertThat(vars[3]).isEqualTo("searchId");
assertThat(result).isEqualTo("someText_mytype1_someText_myFeed_someText_mytype2_someText");
assertThat(copy.getString()) .isEqualTo(original.getString()); assertThat(System.identityHashCode(original)) .isNotEqualTo(System.identityHashCode(copy));
assertThat(perms.size()).isEqualTo(4); assertThat(perms.contains(Collections.<Integer>emptyList())).isTrue(); assertThat(perms.contains(Arrays.asList(1))).isTrue(); assertThat(perms.contains(Arrays.asList(0))).isTrue(); assertThat(perms.contains(Arrays.asList(0, 1))).isTrue();
assertThat(pooledByteBuffer.getByteBuffer().capacity()) .isEqualTo(initialCapacity);
assertThat(batches).hasSize(4); assertThat(batches.get(0)).containsExactly(1, 2, 3); assertThat(batches.get(1)).containsExactly(4, 5, 6); assertThat(batches.get(2)).containsExactly(7, 8, 9); assertThat(batches.get(3)).containsExactly(10);
assertThat(FileNameUtil.getBaseName("001.001.dat")).isEqualTo("001.001"); assertThat(FileNameUtil.getBaseName("001")).isEqualTo("001");
assertThat(testEvents.size()).as("Expecting 1 event").isEqualTo(1); assertThat(testEvents.get(0).getCount()).isEqualTo(1L);
assertThat(Arrays.equals(expectedMaskVal, maskVal)).isTrue();
assertThat(rolledUpStatisticEvent.iterator().hasNext()).isTrue(); assertThat(timeAgnosticStatisticEvent).isEqualTo(event.getTimeAgnosticStatisticEvent()); assertThat(counter).isEqualTo(1);
assertThat(output).isEqualTo(input + 1);
assertThat(testEvents.size()).as("Expecting 0 event").isEqualTo(0);
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString() + buildTagsPart(tags));
assertThat(Range.of(10L, 20L).isBounded()).isTrue(); assertThat(Range.from(10L).isBounded()).isFalse(); assertThat(Range.to(20L).isBounded()).isFalse(); assertThat(new Range<Long>().isBounded()).isFalse();
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2"); assertThat(recordReader.readRecord()).isEqualTo("line3\\n"); assertThat(recordReader.readRecord()).isNull();
assertThat(isValid).isTrue();
assertThat(Bitmap.getBits(input)) .containsExactly(0,12);
assertThat(Files.exists(testPack1)) .isFalse(); assertThat(Files.exists(testPack1)).isFalse(); assertThat(Files.exists(contentPackDir.resolve(ContentPackImport.IMPORTED_DIR).resolve(testPack1.getFileName()))) .isTrue();
assertThat(atomicSequence.next()).isEqualTo(0); assertThat(atomicSequence.next()).isEqualTo(0); assertThat(atomicSequence.next()).isEqualTo(0); assertThat(atomicSequence.next()).isEqualTo(0); assertThat(atomicSequence.next()).isEqualTo(0);
assertThat(created).isNotNull(); assertThat(Stream.of(created, retrieved)).allSatisfy(i -> { assertThat(i.getNodeName()).isEqualTo(nodeName); assertThat(i.getPath()).isEqualTo(path); }); assertThat(i.getNodeName()).isEqualTo(nodeName); assertThat(i.getPath()).isEqualTo(path); assertThat(retrievedAfterDelete).isNull();
assertThat(argValues.get(0).size() > 0).isTrue(); assertThat(argValues.get(0).size() == argValues.get(1).size()).isTrue(); assertThat(statisticEvents.stream() .map(STAT_TO_CLASS_NAME_MAPPER) .allMatch(className -> className.startsWith("stroom"))).isTrue(); assertThat(statisticEvents.stream() .map(STAT_TO_CLASS_NAME_MAPPER) .anyMatch(thisClassPattern.asPredicate())).isTrue();
assertThat(warnings.size()).isEqualTo(0);
assertThat(selectionSummary.getItemCount()).isEqualTo(10); assertThat(selectionSummary.getItemCount()).isEqualTo(10); assertThat(selectionSummary.getItemCount()).isEqualTo(20); assertThat(selectionSummary.getItemCount()).isEqualTo(0); assertThat(selectionSummary.getItemCount()).isEqualTo(0);
assertThat(XMLUtil.toXMLName(XMLUtil.class.getSimpleName())).isEqualTo("xmlUtil"); assertThat(XMLUtil.toXMLName(String.class.getSimpleName())).isEqualTo("string"); assertThat(XMLUtil.toXMLName(StringBuilder.class.getSimpleName())).isEqualTo("stringBuilder"); assertThat(XMLUtil.toXMLName(TestXMLUtil.class.getSimpleName())).isEqualTo("testXMLUtil");
assertThat(topN.getTopN().get(0).getTotalExecutionCount()).isEqualTo(10); assertThat(topN.getTopN().get(1).getTotalExecutionCount()).isEqualTo(5); assertThat(topN.getTopN().size()).isEqualTo(2);
assertThat(getString(rrList)).isEqualTo("123"); assertThat(getString(rrList)).isEqualTo("234"); assertThat(getString(rrList)).isEqualTo("341"); assertThat(getString(rrList)).isEqualTo("412"); assertThat(getString(rrList)).isEqualTo("123");
assertThat(key1).isEqualTo(key2); assertThat(key1.hashCode()).isEqualTo(key2.hashCode());
assertThat(now).isEqualTo(period.getFrom()); assertThat(future).isEqualTo(period.getTo()); assertThat(period.getPeriod()).isEqualTo(Period.ofDays(2));
assertThat(extractedId).isEqualTo(id);
assertThat(identifier.isMapNested()).isTrue();
assertThat(perms.size()).isEqualTo(2); assertThat(perms.contains(Collections.<Integer>emptyList())).isTrue(); assertThat(perms.contains(Arrays.asList(0))).isTrue();
assertThat(repoDirPath).exists(); assertThat(repoDirPath).exists(); assertThat(repoDirPath).doesNotExist();
assertThat(timeAgnosticStatisticEvent2).isEqualTo(timeAgnosticStatisticEvent);
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2\\n"); assertThat(recordReader.readRecord()).isEqualTo("line3\\n"); assertThat(recordReader.readRecord()).isNull();
assertThat(Range.of(10L, 20L).isConstrained()).isTrue(); assertThat(Range.from(10L).isConstrained()).isTrue(); assertThat(Range.to(20L).isConstrained()).isTrue(); assertThat(new Range<Long>().isConstrained()).isFalse();
assertThat(updatedGroup).isNotNull(); assertThat(updatedGroup.getName()).isEqualTo(newGroupName);
assertThat(mask.getBooleanMask(5)).isEqualTo(Arrays.asList(true, true, true, true, true)); assertThat(mask.getBooleanMask(5)).isEqualTo(Arrays.asList(true, false, true, false, true)); assertThat(mask.getBooleanMask(5)).isEqualTo(Arrays.asList(false, false, false, false, false));
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2"); assertThat(recordReader.readRecord()).isEqualTo("line3"); assertThat(recordReader.readRecord()).isNull();
assertThat(criteria.isMatch("XY")).isFalse(); assertThat(criteria.isMatch("XYZ")).isTrue(); assertThat(criteria.isMatch("XYZ123")).isTrue(); assertThat(criteria.isMatch("XYZ")).isTrue(); assertThat(criteria.isMatch("123XYZ123")).isFalse(); assertThat(criteria.isMatch("XYZ123")).isTrue(); assertThat(criteria.isMatch("123XYZ123")).isTrue();
assertThat(result).isTrue();
assertThat(resultPage.size()).isEqualTo(10); assertThat(resultPage.size()).isEqualTo(10); assertThat(resultPage.size()).isEqualTo(20); assertThat(resultPage.size()).isEqualTo(0); assertThat(resultPage.size()).isEqualTo(0);
assertThat(batches).hasSize(2); assertThat(batches.get(0)).containsExactly(1, 2, 3, 4, 5); assertThat(batches.get(1)).containsExactly(6, 7, 8, 9, 10);
assertThat(copy.getString()) .isEqualTo("copy"); assertThat(System.identityHashCode(original)) .isNotEqualTo(System.identityHashCode(copy));
assertThat(rowKeyBitMap.toString()).isEqualTo("000000000000000");
assertThat(output).isEqualTo(input - 1);
assertThat(result).isFalse();
assertThat(Range.of(10L, 20L).before(9)).isFalse(); assertThat(Range.of(10L, 20L).before(10)).isFalse(); assertThat(Range.of(10L, 20L).before(15)).isFalse(); assertThat(Range.of(10L, 20L).before(19)).isFalse(); assertThat(Range.of(10L, 20L).before(20L)).isTrue();
assertThat(callStack.contains("testException")).as(callStack).isTrue();
assertThat(key1).isNotEqualTo(key2); assertThat(key1.hashCode()).isNotEqualTo(key2.hashCode());
assertThat(filterTermsTree != null).isTrue();
assertThat(condition) .isEqualTo(DSL.falseCondition()); assertThat(condition) .isEqualTo(DSL.trueCondition());
assertThat(perms.size()).isEqualTo(1); assertThat(perm.size()).isEqualTo(1); assertThat(perm.get(0)).isEqualTo(false);
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString() + buildTagsPart(tags));
assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(0); assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(1); assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(1);
assertThat(identifier.isMapNested()).isFalse();
assertThat(Files.exists(testPack1)).isFalse(); assertThat(Files.exists(contentPackDir.resolve(ContentPackImport.FAILED_DIR).resolve(testPack1.getFileName()))) .isTrue();
assertThat(deletedGroup).isNull();
assertThat(sequence.size()).isEqualTo(3); assertThat(sequence.get(0).intValue()).isEqualTo(1); assertThat(sequence.get(1).intValue()).isEqualTo(2); assertThat(sequence.get(2).intValue()).isEqualTo(3);
assertThat(perms.size()).isEqualTo(2); assertThat(perms.iterator().next().size()).isEqualTo(1); assertThat(perms.iterator().next().size()).isEqualTo(1);
assertThat(cleanString).isEqualTo("a b c d e");
assertThat(warnings.size()).isEqualTo(1);
assertThat(jobNodeCaptor.getValue().getTaskLimit()) .isEqualTo(newTaskLimit); assertThat(beforeCaptor.getValue()) .isEqualTo(afterCaptor.getValue()); assertThat(beforeCaptor.getValue().getVersion()) .isNotEqualTo(afterCaptor.getValue().getVersion()); assertThat(afterCaptor.getValue().getTaskLimit()) .isEqualTo(newTaskLimit.intValue()); assertThat(afterCaptor.getValue().getTaskLimit()) .isNotEqualTo(JOB_NODE_1.getTaskLimit());
assertThat(isValid).isFalse();
assertThat(maskVal).isEqualTo(expectedMaskVal);
assertThat(mapUidForwardDb.getEntryCount()).isEqualTo(3); assertThat(mapUidReverseDb.getEntryCount()).isEqualTo(3); assertThat(mapUidForwardDb.getEntryCount()).isEqualTo(2); assertThat(mapUidReverseDb.getEntryCount()).isEqualTo(2);
assertThat(SQLStatisticsEventValidator.isKeyTooLong(stringBuilder.toString())).isFalse();
assertThat(jobNodeCaptor.getValue().isEnabled()) .isEqualTo(newIsEnabled); assertThat(beforeCaptor.getValue()) .isEqualTo(afterCaptor.getValue()); assertThat(beforeCaptor.getValue().getVersion()) .isNotEqualTo(afterCaptor.getValue().getVersion()); assertThat(afterCaptor.getValue().isEnabled()) .isEqualTo(newIsEnabled); assertThat(afterCaptor.getValue().isEnabled()) .isNotEqualTo(JOB_NODE_1.isEnabled());
assertThat(term2Node).isNull();
assertThat(recordReader.readRecord()).isEqualTo("\\nline1\\nline2"); assertThat(recordReader.readRecord()).isEqualTo("line3"); assertThat(recordReader.readRecord()).isNull();
assertThat(optTracker).isEmpty();
assertThat(areValuesEqual).isFalse();
assertThat(warnings.size()).isEqualTo(4);
assertThat(NextNameGenerator.getNextName(names, "New group")).isEqualTo("New group (100)");
assertThat(Bitmap.getBits(input)) .containsExactly(0, 1, 2, 3);
assertThat(repoDirPath).exists(); assertThat(repoDirPath).exists(); assertThat(repoDirPath).exists();
assertThat(NextNameGenerator.getNextName(names, "New group")).isEqualTo("New group (1)");
assertThat(atomicSequence.next(2)).isEqualTo(0); assertThat(atomicSequence.next(2)).isEqualTo(1); assertThat(atomicSequence.next(2)).isEqualTo(0); assertThat(atomicSequence.next(2)).isEqualTo(1); assertThat(atomicSequence.next(2)).isEqualTo(0);
assertThat(foundIndexVolumesForGroup.size()).isEqualTo(expectedCount);
assertThat(rowKeyBitMap.toString()).isEqualTo("000000000001010");
assertThat(rowKeyBitMap2).isEqualTo(rowKeyBitMap1);
assertThat(resultPage.size()).isEqualTo(20); assertThat(resultPage.size()).isEqualTo(20); assertThat(resultPage.size()).isEqualTo(40); assertThat(resultPage.size()).isEqualTo(0); assertThat(resultPage.size()).isEqualTo(10);
assertThat(didDeleteSucceed).isFalse();
assertThat(isLoaded).isFalse();
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString() + buildTagsPart(tags));
assertThat(jobNodeCaptor.getValue().getSchedule()) .isEqualTo(newSchedule); assertThat(beforeCaptor.getValue()) .isEqualTo(afterCaptor.getValue()); assertThat(beforeCaptor.getValue().getVersion()) .isNotEqualTo(afterCaptor.getValue().getVersion()); assertThat(afterCaptor.getValue().getSchedule()) .isEqualTo(newSchedule); assertThat(afterCaptor.getValue().getSchedule()) .isNotEqualTo(JOB_NODE_1.getSchedule());
assertThat(input.startsWith(data)).isTrue(); assertThat(input.startsWith(data)).isTrue(); assertThat(input.startsWith(data)).isTrue(); assertThat(output).isEqualTo(input);
assertThat(propMap) .hasSize(4); assertThat(propMap.values().stream() .map(PropertyUtil.Prop::getParentObject) .map(System::identityHashCode) .distinct() .collect(Collectors.toList())) .containsExactly(System.identityHashCode(myClass));
assertThat(cleanString).isEqualTo("abc#def");
assertThat(rowKeyBitMap2).isEqualTo(rowKeyBitMap1);
assertThat(docRef.getUuid()).isEqualTo("test-uuid"); assertThat(docRef.getName()).isNull(); assertThat(parsed).isEqualTo(docRef);
assertThat(out).isEqualTo("3232235777"); assertThat(out).isEqualTo("3232235778"); assertThat(out).isEqualTo("4294967295"); assertThat(out).isEqualTo("0"); assertThat(out).isEqualTo("16843009");
assertThat(Range.of(10L, 20L).contains(9)).isFalse(); assertThat(Range.of(10L, 20L).contains(10)).isTrue(); assertThat(Range.of(10L, 20L).contains(15)).isTrue(); assertThat(Range.of(10L, 20L).contains(19)).isTrue(); assertThat(Range.of(10L, 20L).contains(20)).isFalse();
assertThat(criteriaList.get(i).toString()).isEqualTo(strings.get(i).toString());
assertThat(result).isFalse();
assertThat(attributeMap.size()).isEqualTo(0);
assertThat(DateUtil.createNormalDateTimeString(date)).isEqualTo("2001-08-01T07:00:00.000Z"); assertThat(DateUtil.createNormalDateTimeString(date)).isEqualTo("2001-08-01T09:00:00.000Z"); assertThat(DateUtil.createNormalDateTimeString(date)).isEqualTo("2001-08-01T00:00:00.000Z");
assertThat(Files.isRegularFile(out.getFile())).isFalse(); assertThat(Files.isRegularFile(zipFile)).isTrue(); assertThat(zipFile.getFileName().toString()).isEqualTo(expectedFilename);
assertThat(perms.size()).isEqualTo(1); assertThat(perms.contains(Collections.<Integer>emptyList())).isTrue();
assertThat(NextNameGenerator.getNextName(names, "New group")).isEqualTo("New group (3)");
assertThat(SQLStatisticsEventValidator.isKeyTooLong(stringBuilder.toString())).isTrue();
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2"); assertThat(recordReader.readRecord()).isEqualTo("line3"); assertThat(recordReader.readRecord()).isNull();
assertThat(NextNameGenerator.getNextName(names, "New group")).isEqualTo("New group (1)");
assertThat(hash1).isEqualTo(hash2);
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2\\n"); assertThat(recordReader.readRecord()).isEqualTo("line3\\n"); assertThat(recordReader.readRecord()).isNull();
assertThat(valueStoreDb.getEntryCount()).isEqualTo(0); assertThat(valueStoreDb.getEntryCount()).isEqualTo(3); assertThat(val).isInstanceOf(StringValue.class); assertThat(((StringValue) val).getValue()).isEqualTo(valueStr); assertThat(optRefDataValue).isEmpty();
assertThat(executor.execute()).isFalse(); assertThat(executor.execute()).isFalse(); assertThat(executor.execute()).isFalse(); assertThat(executor.execute()).isFalse(); assertThat(executor.execute()).isFalse(); assertThat(executor.execute()).isTrue(); assertThat(executor.execute()).isFalse();
assertThat(buffer.subSequence(5, 3).toString()).isEqualTo("567"); assertThat(buffer.subSequence(8, 2).toString()).isEqualTo("89"); assertThat(buffer.toString()).isEqualTo("5678901234"); assertThat(buffer.subSequence(5, 3).toString()).isEqualTo("012"); assertThat(buffer.subSequence(8, 2).toString()).isEqualTo("34"); assertThat(buffer.subSequence(8, 5).toString()).isEqualTo("34567");
assertThat(users.stream() .anyMatch(u -> userName.equals(u.getName()))).isTrue(); assertThat(usersInGroup.stream() .anyMatch(u -> userName.equals(u.getName()))).isTrue();
assertThat(testEvents.size()).as("Expecting 1 event").isEqualTo(1); assertThat(testEvents.get(0).getCount()).isEqualTo(1L);
assertThat(nestedIdentifier.isMapNested()).isTrue(); assertThat(nestedIdentifier.getPrimaryMapName()).isEqualTo("map2"); assertThat(nestedIdentifier.getMap()).isEqualTo("map2" + LookupIdentifier.NEST_SEPARATOR + "map3"); assertThat(nestedIdentifier.getKey()).isEqualTo("key2"); assertThat(secondNestedIdentifier.isMapNested()).isFalse(); assertThat(secondNestedIdentifier.getMap()).isEqualTo("map3");
assertThat(Range.of(10L, 20L).after(9)).isTrue(); assertThat(Range.of(10L, 20L).after(10)).isFalse(); assertThat(Range.of(10L, 20L).after(15)).isFalse(); assertThat(Range.of(10L, 20L).after(19)).isFalse(); assertThat(Range.of(10L, 20L).after(20)).isFalse();
assertThat(didDeleteSucceed).isTrue(); assertThat(optionalJob.isPresent()).isFalse();
assertThat(Bitmap.getBits(input)) .isEmpty();
assertThat(Arrays.asList(VersionSortComparator.parts("app-3.1.1-abc"))).isEqualTo(Arrays.asList("app", "3", "1", "1", "abc"));
assertThat(FileSystemUtil.mkdirs(rootDir, rootDir.resolve(FileSystemTestUtil.getUniqueTestString()))) .withFailMessage("Should be OK to create a dir off the root") .isTrue(); assertThat(FileSystemUtil .mkdirs(nonExistingRoot, nonExistingRoot.resolve(FileSystemTestUtil.getUniqueTestString() + "/a/b"))) .withFailMessage("Should be NOT be OK to create a dir off a non existant root") .isFalse();
assertThat(perms.size()).isEqualTo(4); assertThat(perms.contains(Arrays.asList(false, false))).isTrue(); assertThat(perms.contains(Arrays.asList(false, true))).isTrue(); assertThat(perms.contains(Arrays.asList(true, false))).isTrue(); assertThat(perms.contains(Arrays.asList(true, true))).isTrue();
assertThat(sqlStatKey.getName()).isEqualTo(newStatName.replaceAll(SQLStatisticConstants.NAME_SEPARATOR, SQLStatisticConstants.DIRTY_CHARACTER_REPLACEMENT) + rollUpBitMask.asHexString());
assertThat(warnings.size()).isEqualTo(1);
assertThat(FileSystemUtil.mkdirs(null, Paths.get(NO_WRITE_DIR1))).isFalse(); assertThat(FileSystemUtil.mkdirs(null, Paths.get(NO_WRITE_DIR2))).isFalse();
assertThat(DateUtil.createNormalDateTimeString(time)).isEqualTo(testDate);
assertThat(recordReader.readRecord()).isEqualTo("line1\\nline2"); assertThat(recordReader.readRecord()).isEqualTo("line3"); assertThat(recordReader.readRecord()).isNull();
assertThat(now).isEqualTo(period.getFrom()); assertThat(future).isEqualTo(period.getTo()); assertThat(period.getDuration()).isEqualTo(Duration.ofDays(2));
assertThat(sections.size()).isEqualTo(1); assertThat(textDesc.getText()).isEqualTo("some heading");
assertThat(selectionSummary.getItemCount()).isEqualTo(20); assertThat(selectionSummary.getItemCount()).isEqualTo(20); assertThat(selectionSummary.getItemCount()).isEqualTo(40); assertThat(selectionSummary.getItemCount()).isEqualTo(0); assertThat(selectionSummary.getItemCount()).isEqualTo(10);
assertThat(new Period(0L, 1000L).getPrecision(1)).isEqualTo(3); assertThat(PeriodUtil.createYearPeriod(2013).getPrecision(1000)).isEqualTo(7);
assertThat(stroomDuration.getValueAsStr()).isEqualTo(input);
assertThat(optValueStoreKey).isNotEmpty(); assertThat(optValueStoreKey.get()).isEqualTo(val(11));
assertThat(root).isNotNull(); assertThat(root).endsWith("store");
assertThat(foundProcessingState).isEqualTo(processingState);
assertThat(hash1).isEqualTo(hash2);
assertThat(Bitmap.getBits(input)) .containsExactly(1, 2, 5, 6);
assertThat(job.getId()).isNotNull(); assertThat(job.getVersion()).isNotNull(); assertThat(job.getName()).isEqualTo("Some name"); assertThat(job.isEnabled()).isTrue(); assertThat(loadedJob.getId()).isEqualTo(job.getId()); assertThat(loadedJob.getVersion()).isNotNull(); assertThat(loadedJob.getName()).isEqualTo("Some name"); assertThat(loadedJob.isEnabled()).isTrue();
assertThat(StroomFileNameUtil.getIdPath(1)).isEqualTo("001"); assertThat(StroomFileNameUtil.getIdPath(999)).isEqualTo("999"); assertThat(StroomFileNameUtil.getIdPath(1000)).isEqualTo("001/001000"); assertThat(StroomFileNameUtil.getIdPath(1999)).isEqualTo("001/001999"); assertThat(StroomFileNameUtil.getIdPath(9111999)).isEqualTo("009/111/009111999");
assertThat(rollUpBitMask.isTagPositionRolledUp(i)).isTrue(); assertThat(rollUpBitMask.isTagPositionRolledUp(i)).isFalse();
assertThat(job.isPresent()).isFalse();
assertThat(isLoaded).isFalse();
assertThat(term2Node.getTag()).isEqualTo("term1field"); assertThat(term2Node.getValue()).isEqualTo("123456789");
assertThat(cleaned).isEqualTo(expected);
assertThat(batches).isNotNull(); assertThat(batches).isEmpty();
assertThat(newValueStoreKey.getValueHashCode()).isEqualTo(originalValueStoreKey.getValueHashCode()); assertThat(newValueStoreKey.getUniqueId()).isEqualTo((short) 456);
assertThat(updatedIndexVolume.getNodeName()).isEqualTo(newNodeName); assertThat(updatedIndexVolume.getPath()).isEqualTo(newPath);
assertThat(recordReader.readRecord()).isEqualTo("line1"); assertThat(recordReader.readRecord()).isEqualTo("line2"); assertThat(recordReader.readRecord()).isEqualTo("line3"); assertThat(recordReader.readRecord()).isNull();
assertThat(rowKeyBitMap.toString()).isEqualTo("000000000000000");
assertThat(Files.exists(testPack1)).isTrue();
assertThat(stroomDuration.getDuration()) .isEqualTo(Duration.ofDays(30));
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString());
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString() + buildTagsPart(tags));
assertThat(deletedVolumeOptional.isPresent()).isFalse();
assertThat(failureCount.longValue()).isEqualTo(0);
assertThat(sqlStatKey.getName()).isEqualTo(statName + rollUpBitMask.asHexString() + buildTagsPart(tags));
assertThat(rowKeyBitMap.toString()).isEqualTo("100000000010010");
assertThat(StreamUtil.eagerRead(testStream, buffer)).isEqualTo(10); assertThat(StreamUtil.eagerRead(testStream, buffer)).isEqualTo(5); assertThat(StreamUtil.eagerRead(testStream, buffer)).isEqualTo(-1); assertThat(StreamUtil.eagerRead(testStream, buffer)).isEqualTo(-1);
assertThat(rollUpBitMask.asHexString()).isEqualTo("0002");
assertThat(argValues.get(0).size() > 0).isTrue(); assertThat(argValues.get(0).size() == argValues.get(1).size()).isTrue(); assertThat(statisticEvents.stream() .map(STAT_TO_CLASS_NAME_MAPPER) .map(className -> className.substring(0, 1)) .distinct() .count() > 1).isTrue();
assertThat(newValueStoreKey.getValueHashCode()).isEqualTo(originalValueStoreKey.getValueHashCode()); assertThat(newValueStoreKey.getUniqueId()).isEqualTo((short) (originalValueStoreKey.getUniqueId() + 1));
assertThat(result).isTrue();
assertThat(Files.exists(packFile)).isFalse(); assertThat(Files.exists(packFile)).isFalse(); assertThat(Files.exists(tempDir.resolve(ContentPackImport.IMPORTED_DIR).resolve(packFile.getFileName()))) .isTrue();
assertThat(buffer.toString()).isEqualTo("4567890123");
assertThat(vars.length).isEqualTo(4); assertThat(vars[0]).isEqualTo("feed"); assertThat(vars[1]).isEqualTo("pipe"); assertThat(vars[2]).isEqualTo("uuid"); assertThat(vars[3]).isEqualTo("searchId");
assertThat( PathUtil.files( (List<String>) null, f1 ), nullValue() ); assertThat( PathUtil.files( Collections.singletonList( f5.getAbsolutePath() ), f1 ), hasItem( f5 ) ); assertThat( PathUtil.files( Collections.singletonList( f5.getName() ), f5.getParentFile() ), hasItem( f5 ) );
assertThat( artifact, classifier( value ) );
assertThat( PathUtil.paths( (File[]) null ), nullValue() ); assertThat( PathUtil.paths().length, equalTo( 0 ) );
assertThat( PathUtil.pathsList( (List<File>) null ), nullValue() ); assertThat( PathUtil.pathsList( Arrays.asList( f1, f2 ) ), hasItems( _PATH, ABSOLUTE_PATH ) );
assertThat( PathUtil.pathsList( (File[]) null ), nullValue() ); assertThat( PathUtil.pathsList( new File[] { f1, f2 } ), hasItems( _PATH, ABSOLUTE_PATH ) );
assertThat( artifact, groupId( value ) );
assertThat( PathUtil.files( (String[]) null ), nullValue() ); assertThat( PathUtil.files( new String[] { f5.getAbsolutePath() } ), equalTo( new File[] { f5 } ) );
assertThat( PathUtil.paths( (Collection<File>) null ), nullValue() ); assertThat( PathUtil.paths( Arrays.asList( f1, f2 ) ), equalTo( new String[] { _PATH, ABSOLUTE_PATH } ) );
assertThat( PathUtil.file( null, Collections.singletonList( f5 ) ), nullValue() ); assertThat( PathUtil.file( f5.getName(), Collections.singletonList( f5.getParentFile() ) ), equalTo( f5 ) ); assertThat( PathUtil.file( f5.getAbsolutePath(), Collections.singletonList( f1 ) ), equalTo( f5 ) ); assertThat( PathUtil.file( f5.getName(), new ArrayList<File>() ), nullValue() );
assertThat( artifact, artifactId( value ) );
assertThat( PathUtil.existAll(), equalTo( false ) ); assertThat( PathUtil.existAll( (File[]) null ), equalTo( false ) ); assertThat( PathUtil.existAll( f1 ), equalTo( true ) ); assertThat( PathUtil.existAll( f2 ), equalTo( false ) ); assertThat( PathUtil.existAll( f1, f3 ), equalTo( true ) ); assertThat( PathUtil.existAll( f1, f2, f4 ), equalTo( false ) );
assertThat( PathUtil.existingFilesList( (List<String>) null ), nullValue() ); assertThat( PathUtil.existingFilesList( Collections.singletonList( f5.getAbsolutePath() ) ), hasItem( f5 ) );
assertThat( artifact, scope( value ) );
assertThat( PathUtil.existAny(), equalTo( false ) ); assertThat( PathUtil.existAny( (File[]) null ), equalTo( false ) ); assertThat( PathUtil.existAny( f1 ), equalTo( true ) ); assertThat( PathUtil.existAny( f2 ), equalTo( false ) ); assertThat( PathUtil.existAny( f2, f4, f1 ), equalTo( true ) );
assertThat( artifact, type( value ) );
assertEquals( "Cba", StringUtil.removePrefix( a ) ); assertEquals( "Cba", StringUtil.removePrefix( a ) );
assertThat( PathUtil.files( (Collection<String>) null ), nullValue() ); assertThat( PathUtil.files( Arrays.asList( f5.getAbsolutePath() ) ), equalTo( new File[] { f5 } ) );
assertThat( PathUtil.filesList( (Collection<String>) null ), nullValue() ); assertThat( PathUtil.filesList( Arrays.asList( f5.getAbsolutePath() ) ), hasItem( f5 ) );
assertThat( PathUtil.path( null ), nullValue() ); assertThat( PathUtil.path( f1 ), equalTo( _PATH ) ); assertThat( PathUtil.path( f2 ), equalTo( ABSOLUTE_PATH ) );
assertThat( artifact, version( "europe" ) );
assertThat( PathUtil.file( null, f1 ), nullValue() ); assertThat( PathUtil.file( f5.getAbsolutePath(), f1 ), equalTo( f5 ) ); assertThat( PathUtil.file( f5.getName(), f5.getParentFile() ), equalTo( f5 ) );
assertThat( PathUtil.file( (File) null ), nullValue() ); assertThat( PathUtil.file( f3 ), equalTo( f1 ) ); assertThat( PathUtil.file( f4 ), equalTo( f2 ) );
assertThat( PathUtil.existAll( (List<String>) null ), equalTo( false ) ); assertThat( PathUtil.existAll( Arrays.asList( f5.getAbsolutePath() ) ), equalTo( true ) );
assertThat( PathUtil.pathString( null ), nullValue() ); assertThat( PathUtil.pathString( new File[] { f1 } ), equalTo( _PATH ) ); assertThat( PathUtil.pathString( new File[] { f1, f2 } ), equalTo( _PATH + File.pathSeparatorChar + ABSOLUTE_PATH ) );
assertThat( PathUtil.existingFiles( (List<String>) null ), nullValue() ); assertThat( PathUtil.existingFiles( Collections.singletonList( f5.getAbsolutePath() ) ), equalTo( new File[] { f5 } ) );
assertThat( artifact, version( value ) );
assertEquals( Arrays.toString( new String[] { "abc", "cba" } ), Arrays.toString( StringUtil.splitCamelCase( a ) ) );
assertThat( PathUtil.existingFiles( (File[]) null ), nullValue() ); assertThat( PathUtil.existingFiles( f5 ), equalTo( new File[] { f5 } ) );
assertThat( PathUtil.files( (String[]) null, f1 ), nullValue() ); assertThat( PathUtil.files( new String[] { f5.getAbsolutePath() }, f1 ), hasItem( f5 ) ); assertThat( PathUtil.files( new String[] { f5.getName() }, f5.getParentFile() ), hasItem( f5 ) );
assertThat( PathUtil.file( null, f5, f1 ), nullValue() ); assertThat( PathUtil.file( f5.getName(), f5.getParentFile(), f1 ), equalTo( f5 ) ); assertThat( PathUtil.file( f5.getAbsolutePath(), f1, f1 ), equalTo( f5 ) );
assertThat( PathUtil.existingFilesList( (List<File>) null ), nullValue() ); assertThat( PathUtil.existingFilesList( Collections.singletonList( f5 ) ), hasItem( f5 ) ); assertThat( PathUtil.existingFilesList( Arrays.asList( f2, f4, f5 ) ), hasItem( f5 ) );
assertThat( PathUtil.file( (String) null ), nullValue() ); assertThat( PathUtil.file( _PATH ), equalTo( new File( _PATH ).getCanonicalFile() ) );
assertThat(cbSpy.unwrapAsyncExceptions(null)).isNull();
assertThat(defaultScheduler).isInstanceOf(ScheduledThreadPoolExecutor.class); assertThat(((ScheduledThreadPoolExecutor) defaultScheduler).getRemoveOnCancelPolicy()).isTrue();
assertThat(explosionHappenedContainer).contains(true); assertThat(cbExplosion).isNull();
assertThat(cbSpy.unwrapAsyncExceptions(wrapperEx)).isSameAs(underlyingError);
assertThat(cbSpy.onOpenListeners).contains(listener); assertThat(fluentReturn).isSameAs(cbSpy);
assertThat(cbSpy.unwrapAsyncExceptions(wrapperEx)).isSameAs(underlyingError);
assertThat(manualTask).isInstanceOf(CircuitBreakerDelegate.DelegateManualModeTask.class); assertThat(dmmt.delegate).isSameAs(delegateManualModeTaskMock); assertThat(dmmt.eventConverter).isSameAs(wrapper.eventConverter); assertThat(dmmt.originatingCircuitBreaker).isSameAs(wrapper); assertThat(dmmt.originatingCircuitBreaker()).isSameAs(wrapper);
assertThat(cbSpy.unwrapAsyncExceptions(noCause)).isSameAs(noCause);
assertThat(result).isSameAs(wrapper);
assertThat(cbSpy.onCloseListeners).contains(listener); assertThat(fluentReturn).isSameAs(cbSpy);
assertThat(dm.isEventACircuitBreakerFailure(new Object())).isFalse(); assertThat(dm.isEventACircuitBreakerFailure("foo")).isFalse(); assertThat(dm.isEventACircuitBreakerFailure(null)).isFalse();
assertThat(cbExplosion).isNull();
assertThat(cbSpy.consecutiveFailureCount).isEqualTo(0); assertThat(cbSpy.currentState).isEqualTo(State.CLOSED);
assertThat(cbSpy.isEventACircuitBreakerFailure("foo")).isFalse(); assertThat(cbSpy.isEventACircuitBreakerFailure("foo")).isTrue();
assertThat(id).isEqualTo(generatedId);
assertThat(cbExplosion) .isNotNull() .isInstanceOf(CircuitBreakerOpenException.class);
assertThat(cbExplosion) .isNotNull() .isInstanceOf(CircuitBreakerOpenException.class);
assertThat(result).isSameAs(future); assertThat(result.join()).isEqualTo(uuid);
assertThat(result.isCompletedExceptionally()).isTrue(); assertThat(exThrownByFuture) .isNotNull() .isInstanceOf(CompletionException.class) .hasCauseInstanceOf(CircuitBreakerTimeoutException.class); assertThat((endTimeMillis - startTimeMillis)).isLessThan(callExecutionTimeMillis);
assertThat(wrapperCallResult.join()).isEqualTo(event); assertThat(delegateFutureSupplier.get().join()).isEqualTo(eventConverter.apply(event));
assertThat(cbExplosion) .isNotNull() .isInstanceOf(CircuitBreakerTimeoutException.class); assertThat((endTimeMillis - startTimeMillis)).isGreaterThanOrEqualTo(callExecutionTimeMillis);
assertThat(cbSpy.onHalfOpenListeners).contains(listener); assertThat(fluentReturn).isSameAs(cbSpy);
assertThat(cbSpy.isExceptionACircuitBreakerFailure(someThrowable)).isFalse(); assertThat(cbSpy.isExceptionACircuitBreakerFailure(someThrowable)).isTrue();
assertThat(cbExplosion).isNotNull(); assertThat(cbExplosion).isInstanceOf(CircuitBreakerOpenException.class);
assertThat(cbSpy.unwrapAsyncExceptions(doubleWrapperEx)).isSameAs(underlyingError);
assertThat(emptyKeyDefaultMethodResult).isSameAs(nullKeyDefaultMethodResult); assertThat(nullKeyCustomMethodResult).isSameAs(nullKeyDefaultMethodResult); assertThat(emptyKeyCustomMethodResult).isSameAs(nullKeyDefaultMethodResult);
assertThat(cbSpy.unwrapAsyncExceptions(wrapperEx)).isSameAs(wrapperEx);
assertThat(cbExplosion).isNull();
assertThat(cbExplosion) .isNotNull() .isInstanceOf(CircuitBreakerTimeoutException.class); assertThat((endTimeMillis - startTimeMillis)).isGreaterThanOrEqualTo(callExecutionTimeMillis);
assertThat(result).isSameAs(wrapper);
assertThat(dm.isExceptionACircuitBreakerFailure(new Throwable())).isTrue(); assertThat(dm.isExceptionACircuitBreakerFailure(new Exception())).isTrue(); assertThat(dm.isExceptionACircuitBreakerFailure(new RuntimeException())).isTrue(); assertThat(dm.isExceptionACircuitBreakerFailure(null)).isTrue();
assertThat(wrapperCallResult).isEqualTo(event); assertThat(delegateCallable.call()).isEqualTo(eventConverter.apply(event));
assertThat(cbSpy.halfOpenScheduledFuture.get()).isNull(); assertThat(cbSpy.halfOpenScheduledFuture.get()).isSameAs(futureMock);
assertThat(result).isSameAs(wrapper);
assertThat(cbExplosion).isNull(); assertThat((endTimeMillis - startTimeMillis)).isGreaterThanOrEqualTo(callExecutionTimeMillis);
assertThat(result.isCompletedExceptionally()).isFalse(); assertThat(exThrownByFuture).isNull(); assertThat((endTimeMillis - startTimeMillis)).isGreaterThanOrEqualTo(callExecutionTimeMillis);
assertNotNull(record);
assertFalse(create(singleton).isEmpty());
assertTrue(read(expectedFile).isEmpty());
assertEquals("source\\ttarget\\t99.0\\t100\\t1\\t2\\t1\\t100\\t2\\t101\\t0.1\\t1.0", stringWriter.toString().trim());
assertEquals(union.extent(), bits(0, 1)); assertEquals(union.intent(), S.intent());
assertNotNull(alignmentPair);
assertNotNull(genotype); assertEquals("HLA-A*01:01:01:01+HLA-A*01:01:01:02N", genotype.getGlstring());
assertTrue(left.getDescription().equals(unpaired.getDescription()) || mismatchPrefix.getDescription().equals(unpaired.getDescription()));
assertEquals(4, count); assertTrue("NA12878".equals(sample.getId())); assertEquals("A", record.getRef()); assertEquals(1, record.getAlt().length); assertEquals("<NON_REF>", record.getAlt()[0]); assertEquals("T", record.getRef()); assertEquals(2, record.getAlt().length); assertEquals("A", record.getAlt()[0]); assertEquals("<NON_REF>", record.getAlt()[1]);
assertEquals(4, lengths.size()); assertEquals(Long.valueOf(0L), lengths.get(0)); assertEquals(Long.valueOf(1L), lengths.get(1)); assertEquals(Long.valueOf(43L), lengths.get(2)); assertEquals(Long.valueOf(42L), lengths.get(3));
assertNotNull(alignmentPair);
assertNotNull(alignmentPair);
assertEquals(0, create(singleton).count(0));
assertEquals(1, mismatches.size()); assertEquals(Range.closedOpen(0L, 20L), mismatches.get(0));
assertEquals(0, create(empty).count(empty));
assertEquals(antichain.getObjects(), ABC); assertEquals(antichain.getAttributes(), ABC); assertTrue(antichain.getRelation() instanceof Equal); assertEquals(lattice.size(), 5); assertEquals(lattice.top(), new Concept(bits(), bits(0, 1, 2))); assertEquals(lattice.bottom(), new Concept(bits(0, 1, 2), bits()));
assertEquals(complement.getNumberOfRows(), 3); assertEquals(complement.getNumberOfColumns(), 3); assertEquals(complement.getRow(0).intent, bits(0)); assertEquals(CrossTable.complement(complement).getRow(0).intent, bits(1, 2));
assertEquals(a.intersect(c), a); assertEquals(c.intersect(a), a); assertEquals(a.intersect(a), a);
assertEquals(PairedEndFastqReaderTest.this.left.getDescription(), left.getDescription()); assertEquals(PairedEndFastqReaderTest.this.right.getDescription(), right.getDescription());
assertEquals(0, create(singleton).count(openClosed));
assertEquals(Collections.emptyList(), ends(Collections.<Range<Long>>emptySet()));
assertEquals(0, create(sparse).count(miss));
assertFalse(isGapSymbol(DNATools.a())); assertFalse(isGapSymbol(DNATools.c())); assertFalse(isGapSymbol(DNATools.t())); assertFalse(isGapSymbol(DNATools.g())); assertFalse(isGapSymbol(DNATools.n())); assertTrue(isGapSymbol(AlphabetManager.getGapSymbol())); assertTrue(isGapSymbol(DNATools.getDNA().getGapSymbol()));
assertEquals(temp.getContig(), "chr6"); assertEquals(temp.getStart(), 1); assertEquals(temp.getEnd(), 2); assertEquals(temp.sequence.seqString(), "a"); assertEquals(temp.lesion, Allele.Lesion.SUBSTITUTION); assertEquals(temp.sequence.seqString(), "-");
assertEquals(1, Iterables.size(create(singleton).intersect(closed)));
assertEquals(Long.valueOf(10L), center(Range.closed(0L, 20L)));
assertEquals(Collections.<Range<Long>>emptyList(), gaps(subject));
assertTrue(isMatchSymbol(alignmentPair.symbolAt(1))); assertFalse(isMatchSymbol(alignmentPair.symbolAt(5))); assertFalse(isMatchSymbol(alignmentPair.symbolAt(13)));
assertNotNull(record);
assertEquals("VCFv4.2", header.getFileFormat());
assertNotNull(record); assertNotNull(record.getId()); assertEquals(0, record.getId().length);
assertEquals(0, create(empty).count(closed));
assertTrue(miringRules().contains(HMLID_ELEMENT_REQUIRED));
assertEquals(4, count(ranges));
assertEquals("prefix", prefix(left)); assertEquals("prefix", prefix(right));
assertTrue(locus1.compareTo(locus2) < 0); assertTrue(locus2.compareTo(locus3) > 0); assertTrue(locus2.compareTo(locus2) == 0); assertTrue(locus3.compareTo(locus4) < 0);
assertEquals(2, create(dense).count(singleton));
assertEquals(1, Iterables.size(create(singleton).query(1)));
assertEquals(43L, length(Range.closedOpen(0L, 43L)));
assertEquals(0, create(singleton).count(open));
assertEquals(product.size(), 9); assertEquals(product.get(0), new Poset(new ArrayList<>(Arrays.asList("a", "1")))); assertEquals(product.get(8), new Poset(new ArrayList<>(Arrays.asList("c", "3"))));
assertEquals(0, create(dense).count(empty));
assertEquals(0, create(empty).count(0));
assertTrue(isLeft(fastq)); assertFalse(isLeft(fastq)); assertFalse(isLeft(fastq));
assertNotNull(alignmentPair);
assertEquals(1092, ImmutableList.copyOf(samples).size());
assertEquals(1, create(singleton).count(singleton));
assertEquals(0, create(singleton).count(miss));
assertNotNull(alignmentPair);
assertEquals(1, starts.size()); assertEquals(Long.valueOf(0L), starts.get(0));
assertEquals(strings.size(), 3); assertEquals(strings.get(0), A);
assertEquals(0, create(dense).count(miss));
assertEquals(2, Iterables.size(create(dense).intersect(singleton)));
assertEquals(0, count(Collections.<Range<Long>>emptySet()));
assertEquals("##fileformat=VCFv4.1" + System.lineSeparator() + "#CHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\tFILTER\\tINFO\\tFORMAT\\tNA19131" + System.lineSeparator() + "22\\t16140370\\trs2096606\\tA\\tG\\t100\\tPASS\\t.\\tGT\\t1|1" + System.lineSeparator(), outputStream.toString());
assertEquals(Geometries.rectangle(24.0d, 0.0d, 42.0d, 1.0d), closed(24L, 42L));
assertEquals(Integer.valueOf(10), center(Range.closed(0, 20)));
assertNotNull(hsp);
assertEquals(43L, maximumLength(rangeSet.asRanges()));
assertEquals(2, create(sparse).count(openClosed));
assertEquals(a.behind(), new Interval<>(1, Range.lessThan(2))); assertEquals(a.intersect(b).behind(), new Interval<>(1, Range.all())); assertEquals(Interval.MAGIC.behind(), Interval.NULL); assertEquals(Interval.NULL.behind(), Interval.MAGIC);
assertTrue(sameLocus(alleleList0, alleleList1)); assertFalse(sameLocus(alleleList0, alleleList2));
assertTrue(dest instanceof BiojavaPairwiseAlignment); assertNotNull(((BiojavaPairwiseAlignment) dest).getSubstitutionMatrix());
assertEquals(100, create(dense).count(closedOpen));
assertNotNull(builder());
assertEquals(1, create(sparse).count(4));
assertNotNull(expected); assertEquals(2, expected.get("sample0").size()); assertEquals("HLA-A*03:01:01+HLA-A*03:01:01", expected.get("sample0").get(0).glstring()); assertEquals(1, expected.get("sample2").size()); assertEquals("HLA-A*03:01:01+HLA-A*03:01:02", expected.get("sample2").get(0).glstring());
assertEquals(A.intersect(B), Poset.NULL); assertEquals(A.intersect(A), A); assertEquals(ABC.intersect(AD), A); assertEquals(Poset.MAGIC.intersect(Poset.NULL), Poset.NULL);
assertTrue(S.isGreaterThan(X));
assertEquals(101, create(dense).count(openClosed));
assertTrue(a.before(b)); assertFalse(b.before(a)); assertFalse(Interval.MAGIC.before(a)); assertFalse(a.before(Interval.MAGIC));
assertEquals(2, Iterables.size(create(sparse).intersect(closed)));
assertNotNull(observed); assertEquals(6, observed.get("sample0").size()); assertEquals("HLA-A*03:01:01/HLA-A*03:01:01", observed.get("sample0").get(0).glstring()); assertEquals(1, observed.get("sample2").size()); assertEquals("HLA-A*03:01:02/HLA-A*03:01:03", observed.get("sample2").get(0).glstring());
assertEquals(1.0, S.measure(), 0.0);
assertEquals(1, create(singleton).count(1));
assertEquals("actg", dna.getValue());
assertEquals(43L, maximumLength(Collections.singleton(Range.closedOpen(0L, 43L))));
assertTrue(a.overlaps(Interval.MAGIC)); assertTrue(Interval.MAGIC.overlaps(a)); assertTrue(a.overlaps(a));
assertEquals(3, matches.size()); assertEquals(Range.closedOpen(0L, 4L), matches.get(0)); assertEquals(Range.closedOpen(8L, 12L), matches.get(1)); assertEquals(Range.closedOpen(16L, 20L), matches.get(2));
assertEquals(Long.valueOf(42L), center(Range.upTo(42L, BoundType.CLOSED)));
assertTrue(X.equals(X)); assertFalse(W.equals(X));
assertEquals("chr1\\t11873\\t14409\\tuc001aaa.3\\t0\\t+\\t11873\\t11873\\t0\\t3\\t354,109,1189\\t0,739,1347", stringWriter.toString().trim());
assertEquals(0L, maximumLength(Collections.singleton(Range.closedOpen(0L, 0L))));
assertFalse(isMismatchSymbol(null));
assertEquals(table.getRow(1).index, 1); assertEquals(table.getRow(1).intent, bits(1, 2));
assertEquals(context.decodeIntent(new Concept(all, bits())), list()); assertEquals(context.decodeIntent(new Concept(all, bits(0))), list("a")); assertEquals(context.decodeIntent(new Concept(all, bits(1, 2))), list("b", "c"));
assertEquals(4, countFastq(pairedFile)); assertEquals(2, countFastq(unpairedFile));
assertNotNull(blast); assertFalse(inGl);
assertEquals(0, create(empty).count(openClosed));
assertNotNull(records); assertTrue(ImmutableList.copyOf(records).isEmpty());
assertTrue(locus1.intersection(locus2).isEmpty()); assertTrue(locus1.intersection(locus3).isEmpty());
assertEquals(1, create(sparse).count(open));
assertTrue(output.startsWith("FAIL"));
assertEquals(1L, length(Collections.singleton(Range.closedOpen(0L, 1L))));
assertEquals(table.getNumberOfRows(), 4); assertEquals(table.getNumberOfColumns(), 6); assertEquals(table.getRow(3).intent, bits(4, 5));
assertNotNull(record); assertNotNull(record.getAlt()); assertEquals(0, record.getAlt().length);
assertEquals(2, Iterables.size(create(sparse).intersect(openClosed)));
assertTrue(X.isLessOrEqualTo(X)); assertTrue(X.isLessOrEqualTo(S)); assertFalse(S.isLessOrEqualTo(X)); assertFalse(W.isLessOrEqualTo(X));
assertTrue(a.then(a)); assertTrue(a.then(Interval.MAGIC)); assertFalse(Interval.MAGIC.then(a));
assertNotNull(hsp); assertEquals(1, count);
assertEquals(PairedEndFastqReaderTest.this.left.getDescription(), left.getDescription());
assertEquals(context.getObjects(), attributes); assertEquals(context.getAttributes(), attributes); assertTrue(context.getRelation() instanceof LessThan);
assertEquals(downset.getObjects().size(), 8); assertEquals(downset.getAttributes().size(), 8); assertTrue(downset.getRelation() instanceof NotGreaterOrEqual); assertEquals(lattice.size(), 20); assertEquals(lattice.top(), new Concept(bits(), bits(0, 1, 2, 3, 4, 5, 6, 7))); assertEquals(lattice.bottom(), new Concept(bits(0, 1, 2, 3, 4, 5, 6, 7), bits()));
assertFalse(a.ends(a)); assertTrue(b.ends(c)); assertFalse(c.ends(b)); assertFalse(b.ends(Interval.MAGIC));
assertEquals("22\\t16140370\\trs2096606\\tA\\tG\\t100\\tPASS\\t.\\tGT\\t1|1" + System.lineSeparator(), outputStream.toString());
assertEquals(5, create(dense).count(4));
assertEquals(sum.getNumberOfRows(), 6); assertEquals(sum.getNumberOfColumns(), 6); assertEquals(sum.getRow(0).intent, bits(1, 2, 3, 4, 5)); assertEquals(sum.getRow(3).intent, bits(0, 1, 2, 4, 5)); assertEquals(sum.getRow(5).intent, bits(0, 1, 2)); assertEquals(table.getNumberOfRows(), 3); assertEquals(table.getRow(0).intent, bits(1, 2));
assertNotNull(alignmentPair);
assertEquals("actg", toDnaSymbolList(sequence).seqString());
assertTrue(output.startsWith("PASS"));
assertEquals(1, gaps.size()); assertEquals(Range.closedOpen(12L, 16L), gaps.get(0));
assertEquals(sum.getNumberOfRows(), 6); assertEquals(sum.getNumberOfColumns(), 6); assertEquals(sum.getRow(0).intent, bits(1, 2)); assertEquals(sum.getRow(3).intent, bits(4, 5)); assertEquals(sum.getRow(5).intent, bits());
assertEquals(43L, maximumLength(ranges));
assertEquals("actg", toDnaSymbolList(sequence).seqString());
assertNotNull(miring());
assertEquals(4, ends.size()); assertEquals(Long.valueOf(0L), ends.get(0)); assertEquals(Long.valueOf(1L), ends.get(1)); assertEquals(Long.valueOf(43L), ends.get(2)); assertEquals(Long.valueOf(43L), ends.get(3));
assertEquals(Collections.emptyList(), starts(Collections.<Range<Long>>emptySet()));
assertEquals(43L, length(ranges));
assertTrue(read(observedFile).isEmpty());
assertTrue(output.startsWith("PASS"));
assertEquals(table.getNumberOfRows(), 3); assertEquals(table.getNumberOfColumns(), 3);
assertEquals(1, create(singleton).count(closedOpen));
assertEquals(1, mismatches.size()); assertEquals(Range.closedOpen(4L, 8L), mismatches.get(0));
assertEquals(difference.getRanges(), builder.build()); assertEquals(difference.getDimension(), 1); assertEquals(difference.getRanges(), builder.build()); assertEquals(difference.getDimension(), 0); assertEquals(difference.getRanges(), builder.build()); assertEquals(difference.getDimension(), 0);
assertEquals(0, create(empty).count(closedOpen));
assertEquals(-1L, maximumLength(Collections.<Range<Long>>emptySet()));
assertEquals(top.intent(), bits(0, 1, 2, 3, 4, 5, 6)); assertEquals(top.extent(), bits()); assertEquals(bottom.intent(), bits()); assertEquals(bottom.extent(), bits(0, 1, 2, 3, 4, 5)); assertEquals(lattice.size(), 12);
assertFalse(isRight(fastq)); assertTrue(isRight(fastq)); assertFalse(isRight(fastq));
assertEquals(sum.getNumberOfRows(), 6); assertEquals(sum.getNumberOfColumns(), 6); assertEquals(sum.getRow(0).intent, bits(1, 2, 3, 4, 5)); assertEquals(sum.getRow(3).intent, bits(4, 5)); assertEquals(sum.getRow(5).intent, bits()); assertEquals(table.getNumberOfRows(), 3); assertEquals(table.getRow(0).intent, bits(1, 2));
assertEquals(1, count(Collections.singleton(Range.closedOpen(0L, 1L))));
assertEquals(100, Iterables.size(create(dense).intersect(closedOpen)));
assertEquals(intersect.extent(), bits()); assertEquals(intersect.intent(), bits(0, 1, 3)); assertEquals(intersect.intent(), bits(0, 1, 3)); assertEquals(intersect.intent(), W.intent()); assertEquals(intersect.intent(), bits()); assertEquals(intersect.intent(), X.intent());
assertEquals(1, Iterables.size(create(sparse).query(4)));
assertNotNull(alignmentPair);
assertEquals(8, countFastq(pairedFile)); assertEquals(0, countFastq(unpairedFile));
assertEquals(PairedEndFastqReaderTest.this.left.getDescription(), left.getDescription()); assertEquals(PairedEndFastqReaderTest.this.right.getDescription(), right.getDescription());
assertEquals("description", new AbstractHmlValidationRule("description") { @Override public boolean validate(final Hml hml) throws HmlValidationException { return true; } }.toString());
assertEquals("VCFv4.2", header.getFileFormat()); assertEquals(meta, header.getMeta());
assertNull(getHmlid(read("missing-hmlid.xml")));
assertEquals(1, create(sparse).count(singleton));
assertEquals(4, starts.size()); assertEquals(Long.valueOf(0L), starts.get(0)); assertEquals(Long.valueOf(0L), starts.get(1)); assertEquals(Long.valueOf(0L), starts.get(2)); assertEquals(Long.valueOf(1L), starts.get(3));
assertEquals(101, create(dense).count(closed));
assertEquals(Collections.<Range<Long>>emptyList(), mismatches(allMatches));
assertEquals(0L, length(Collections.<Range<Long>>emptySet()));
assertEquals((short) 0, gapPenalties.match()); assertEquals((short) 1, gapPenalties.replace()); assertEquals((short) 2, gapPenalties.insert()); assertEquals((short) 3, gapPenalties.delete()); assertEquals((short) 4, gapPenalties.extend());
assertEquals(0, Iterables.size(create(singleton).intersect(openClosed)));
assertEquals(1L, length(Range.closedOpen(0L, 1L)));
assertEquals(context.decodeExtent(new Concept(bits(), all)), list()); assertEquals(context.decodeExtent(new Concept(bits(0), all)), list("a")); assertEquals(context.decodeExtent(new Concept(bits(1, 2), all)), list("b", "c"));
assertEquals(a.ahead(), new Interval<>(1, Range.greaterThan(4))); assertEquals(a.intersect(b).ahead(), new Interval<>(1, Range.all())); assertEquals(Interval.MAGIC.ahead(), Interval.NULL); assertEquals(Interval.NULL.ahead(), Interval.MAGIC);
assertFalse(exons.isEmpty()); assertTrue(exons.containsKey(2)); assertTrue(exons.containsKey(3));
assertEquals(1, create(singleton).count(closed));
assertEquals(16, countFastq(pairedFile)); assertEquals(0, countFastq(unpairedFile));
assertNotNull(sample); assertEquals("id", sample.getId()); assertNotNull(sample.getGenomes()); assertEquals(1, sample.getGenomes().length); assertEquals("genomeId", genome.getId()); assertEquals(1.0d, genome.getMixture(), 0.1d); assertEquals("Description", genome.getDescription());
assertNotNull(blast); assertNotNull(blast.get("0|Ref151|32552989|1||1|0"));
assertTrue(x.between(a, b)); assertFalse(x.between(a, c));
assertTrue(exons.isEmpty());
assertEquals(BigInteger.valueOf(10L), center(Range.closed(BigInteger.valueOf(0L), BigInteger.valueOf(20L))));
assertTrue(create(dense).contains(4));
assertEquals(left.intent(), bits(1, 3)); assertEquals(right.intent(), bits(0, 5)); assertEquals(((Concept) lattice.join(left, left)).intent(), bits(1, 3)); assertEquals(((Concept) lattice.join(left, right)).intent(), bits(0, 1, 3, 5));
assertFalse(isGapSymbol(null));
assertEquals(42L, length(Collections.singleton(Range.closedOpen(1L, 43L))));
assertFalse(a.starts(a)); assertTrue(a.starts(c)); assertFalse(c.starts(a)); assertFalse(a.starts(Interval.MAGIC));
assertEquals(2, create(sparse).count(closed));
assertEquals(1, create(sparse).count(closedOpen));
assertFalse(validateInterpretation.shouldValidate(interpretation, alleleList0));
assertFalse(create(sparse).isEmpty());
assertNotNull(samples); assertTrue(ImmutableList.copyOf(samples).isEmpty());
assertNotNull(hsp);
assertNotNull(inputFastqFile); assertNotNull(fasta); assertNotNull(fasta.get("0|Ref151|32552989|1||1|0"));
assertEquals(1, Iterables.size(create(sparse).intersect(closedOpen)));
assertEquals(100, Iterables.size(create(dense).intersect(open)));
assertEquals(powerset.getObjects(), ABC); assertEquals(powerset.getAttributes(), ABC); assertTrue(powerset.getRelation() instanceof NotEqual); assertEquals(lattice.size(), 8); assertEquals(lattice.top(), new Concept(bits(), bits(0, 1, 2))); assertEquals(lattice.bottom(), new Concept(bits(0, 1, 2), bits()));
assertEquals(43L, length(Collections.singleton(Range.closedOpen(0L, 43L))));
assertNotNull(alignmentPair);
assertEquals(Geometries.point(42.0d, 0.5d), singleton(42L));
assertTrue(create(singleton).contains(1));
assertEquals(101, Iterables.size(create(dense).intersect(openClosed)));
assertNotNull(alignmentPair);
assertTrue(validateInterpretation.shouldValidate(interpretation, alleleList0));
assertNotNull(alignmentPair);
assertTrue("actg".equals(sequence.getValue()) || "gtca".equals(sequence.getValue())); assertEquals(2, count);
assertEquals("22\\t16140370\\trs2096606\\tA\\tG\\t100\\tPASS\\t.\\tGT\\t1|1" + System.lineSeparator(), outputStream.toString());
assertEquals(101, Iterables.size(create(dense).intersect(closed)));
assertNotNull(alignmentPair);
assertEquals(1, matches.size()); assertEquals(Range.closedOpen(0L, 20L), matches.get(0));
assertNotNull(alleleList); assertEquals("HLA-A*01:01:01:01/HLA-A*01:01:01:02N", alleleList.getGlstring());
assertEquals(1, count(rangeSet.asRanges()));
assertNotNull(builder());
assertFalse(isMismatchSymbol(alignmentPair.symbolAt(1))); assertTrue(isMismatchSymbol(alignmentPair.symbolAt(5))); assertFalse(isMismatchSymbol(alignmentPair.symbolAt(13)));
assertEquals(PairedEndFastqReaderTest.this.left.getDescription(), left.getDescription());
assertEquals(Geometries.rectangle(24.0d, 0.0d, 41.0d, 1.0d), closedOpen(24L, 42L));
assertTrue(X.isLessThan(S));
assertEquals(43L, length(rangeSet.asRanges()));
assertEquals("chr1\\t11873\\t14409\\tuc001aaa.3\\t0\\t+\\t11873\\t11873\\t0\\t3\\t354,109,1189\\t0,739,1347", stringWriter.toString().trim());
assertEquals("##fileformat=VCFv4.1" + System.lineSeparator(), outputStream.toString());
assertEquals(a.gap(b), y); assertEquals(b.gap(a), y); assertEquals(a.gap(a), Interval.NULL); assertEquals(a.gap(Interval.MAGIC), Interval.NULL);
assertEquals(Long.valueOf(42L), center(Range.downTo(42L, BoundType.CLOSED)));
assertEquals(0L, length(Collections.singleton(Range.closedOpen(0L, 0L))));
assertEquals(0, create(singleton).count(empty));
assertEquals("#CHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\tFILTER\\tINFO\\tFORMAT\\tNA19131" + System.lineSeparator(), outputStream.toString());
assertNotNull(blast); assertEquals(10,blastString.size());
assertFalse(create(empty).contains(0));
assertTrue(create(Collections.<Range<Integer>>emptyList()).isEmpty());
assertEquals(Collections.<Range<Long>>emptyList(), matches(allMismatches));
assertFalse(validateInterpretation.shouldValidate(interpretation, alleleList2));
assertEquals(1L, maximumLength(Collections.singleton(Range.closedOpen(0L, 1L))));
assertEquals(0L, length(Range.closedOpen(0L, 0L)));
assertTrue(X.isGreaterOrEqualTo(X)); assertFalse(X.isGreaterOrEqualTo(S)); assertTrue(S.isGreaterOrEqualTo(X)); assertFalse(W.isGreaterOrEqualTo(X));
assertTrue(record1.equals(record1)); assertTrue(record2.equals(record2)); assertFalse(record1.equals(record2)); assertFalse(record2.equals(record1)); assertFalse(record1.equals(new Object()));
assertNull(record.getGenotypes().get("NA12878-3").getGt()); assertEquals("0/1", record.getGenotypes().get("NA12891-3").getGt()); assertEquals("0/0", record.getGenotypes().get("NA12892-3").getGt());
assertTrue(isLeft(left)); assertFalse(isLeft(right));
assertEquals(1, Iterables.size(create(singleton).intersect(singleton)));
assertEquals(1, lengths.size()); assertEquals(Long.valueOf(43L), lengths.get(0));
assertFalse(create(dense).isEmpty());
assertEquals(1, gaps.size()); assertEquals(Range.closedOpen(0L, 20L), gaps.get(0));
assertEquals(42L, maximumLength(Collections.singleton(Range.closedOpen(1L, 43L))));
assertEquals("source\\ttarget\\t99.0\\t100\\t1\\t2\\t1\\t100\\t2\\t101\\t0.1\\t1.0", stringWriter.toString().trim());
assertEquals(1, ends.size()); assertEquals(Long.valueOf(43L), ends.get(0));
assertEquals(1, Iterables.size(create(sparse).intersect(open)));
assertNotNull(record); assertTrue(Double.isNaN(record.getQual()));
assertEquals(0, create(sparse).count(empty));
assertFalse(create(empty).isEmpty());
assertNotNull(alignmentPair);
assertNotNull(record); assertNotNull(record.getFilter()); assertEquals(0, record.getFilter().length);
assertFalse(isMatchSymbol(DNATools.getDNA().getGapSymbol()));
assertNotNull(builder());
assertTrue(a.equals(a)); assertTrue(a.equals(new Interval<>(1, Range.closed(2, 4)))); assertFalse(a.equals(b)); assertFalse(a.equals(Interval.NULL)); assertFalse(a.equals(Interval.MAGIC));
assertEquals(5, Iterables.size(create(dense).query(4)));
assertEquals("prefix", prefix(Fastq.builder().withDescription("prefix\\\\1").withSequence("aaaaatttttcccccggggg").withQuality("44444222224444422222").build())); assertEquals("prefix", prefix(Fastq.builder().withDescription("prefix\\\\2").withSequence("aaaaatttttcccccggggg").withQuality("44444222224444422222").build()));
assertTrue(b.after(a)); assertFalse(a.after(b)); assertFalse(Interval.MAGIC.before(a)); assertFalse(a.before(Interval.MAGIC));
assertNotNull(builder());
assertEquals(1, Iterables.size(create(singleton).intersect(closedOpen)));
assertTrue(table.equals(that)); assertFalse(table.equals(other));
assertEquals(100, create(dense).count(open));
assertTrue(edits.isEmpty());
assertFalse(isRight(left)); assertTrue(isRight(right));
assertEquals(0, create(empty).count(singleton));
assertFalse(create(singleton).contains(0));
assertEquals(4, create(closed, closed, closed, closed).count(closed));
assertEquals(42L, length(Range.closedOpen(1L, 43L)));
assertEquals(0, Iterables.size(create(singleton).intersect(open)));
assertFalse(isMismatchSymbol(DNATools.getDNA().getGapSymbol()));
assertFalse(isMatchSymbol(null));
assertTrue(create(sparse).contains(4));
assertEquals(Geometries.rectangle(25.0d, 0.0d, 42.0d, 1.0d), openClosed(24L, 42L));
assertEquals(Geometries.rectangle(25.0d, 0.0d, 41.0d, 1.0d), open(24L, 42L));
assertEquals(0, create(empty).count(open));
assertEquals(1, Iterables.size(create(sparse).intersect(singleton)));
assertEquals("1234", hmlid.getRoot()); assertEquals("abcd", hmlid.getExtension());
assertEquals(PairedEndFastqReaderTest.this.left.getDescription(), left.getDescription()); assertEquals(PairedEndFastqReaderTest.this.right.getDescription(), right.getDescription());
assertArrayEquals(pixels1, pixels5);
assertArrayEquals(BitmapUtils.rotate(pixels, 4, 3, null), expected);
assertEquals(transferToLongPeriod.length, 2); assertEquals(transferToLongPeriod[1] - transferToLongPeriod[0], 60*60*1000);
assertEquals(transferToLongPeriod.length, 2); assertEquals(transferToLongPeriod[1] - transferToLongPeriod[0], 360*60*1000);
assertEquals(transferToLongPeriod.length, 2); assertEquals(transferToLongPeriod[1] - transferToLongPeriod[0], 120*60*1000);
assertEquals(transferToLongPeriod.length, 2); assertEquals(transferToLongPeriod[1] - transferToLongPeriod[0], 30*60*1000);
assertEquals(e.getMessage(), "Time period expression could not be matched: "+periodExpression);
assertEquals(deleteStatus, true);
assertEquals("UniqueId1", argument.getValue().getId()); assertEquals("PROJabscde", argument.getValue().getProjectId()); assertEquals("SaveTitle", argument.getValue().getTitle()); assertEquals("Save Description", argument.getValue().getDescription());
assertNull(abtText);
assertTrue(authorized);
assertEquals(expectedViewName,actualModel.getViewName());
assertNotNull(reply); assertEquals(0, reply.getConceptEntry().size());
assertEquals(loginController.loginerror(model),"login");
assertEquals(loginController.validUserHandle(model, principal, authentication),"redirect:home");
assertFalse(authorized);
assertEquals(accessForbiddenController.getInactiveUserPage(model, principal), "nouser"); assertEquals(accessForbiddenController.getInactiveUserPage(model, principal), "inactiveuser"); assertEquals(accessForbiddenController.getInactiveUserPage(model, principal), "forbidden");
assertEquals("testId1234", argument.getValue().getId()); assertEquals("PROJxyzwqr", argument.getValue().getProjectId()); assertEquals("UpdateTitle", argument.getValue().getTitle()); assertEquals("Update Description", argument.getValue().getDescription());
assertEquals(expectedSearchResultList.size(), searchResultList.size());
assertTrue(authorized);
assertTrue(conceptStatsList.containsAll(mockedConceptStatsList) && mockedConceptStatsList.containsAll(conceptStatsList));
assertTrue(authorized);
assertEquals("auth/home", homeController.home(new Locale("us"), model, principal)); assertEquals(principal.getName(), ((ModelMap)model).get("username"));
assertFalse(authorized);
assertFalse(authorized);
assertNotNull(reply); assertEquals(1, reply.getConceptEntry().size()); assertEquals("dog", reply.getConceptEntry().get(0).getLemma()); assertEquals("noun", reply.getConceptEntry().get(0).getPos());
assertTrue(authorized);
assertEquals("auth/notImplemented", view.getViewName()); assertEquals(ex.getClass().getName(), view.getModelMap().get("ex_name")); assertEquals(ex.getMessage(), view.getModelMap().get("ex_message"));
assertNotNull(reply); assertEquals(0, reply.getConceptEntry().size());
assertFalse(authorized);
assertNotNull(result); assertEquals("test1", result.getProjectId()); assertEquals("TestTitle", result.getTitle()); assertEquals("Newestdescription", result.getDescription()); assertEquals("Test1", result.getId());
assertEquals(serviceRegistry.getServiceIdNameMap(), services);
assertFalse(authorized);
assertEquals(result, "requests/error"); assertEquals(result, "requests/accountRequested"); assertEquals(model.get("requestStatus"), 1); assertEquals(model.get("username"), "jdoe"); assertEquals(result, "requests/accountRequested"); assertEquals(model.get("requestStatus"), 0); assertEquals(model.get("username"), "jdoe");
assertNotNull(reply); assertEquals(1, reply.getConceptEntry().size()); assertEquals("dog", reply.getConceptEntry().get(0).getLemma()); assertEquals("noun", reply.getConceptEntry().get(0).getPos());
assertEquals(mockedConceptStatsList, projectStatsUnderTest.getConceptCount(mockedNetworkList));
assertTrue(authorized);
assertEquals(viafService, serviceRegistry.getServiceObject(viafService.getServiceId())); assertEquals(conceptpowerService, serviceRegistry.getServiceObject(conceptpowerService.getServiceId()));
assertEquals(deleteStatus, false);
assertTrue(authorized);
assertFalse(authorized);
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertEquals(0, collection.count());
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertEquals(0, collection.count());
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertTrue(checkForNonUpdated(collection)); assertEquals(0, collection.count());
assertEquals(this.connector, this.manager.getConnector());
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertEquals(0, collection.count());
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertTrue(checkForNonUpdated(collection)); assertEquals(0, collection.count());
assertEquals(converter, mapped.getConverter());
assertEquals(connector, ex.getConnector());
assertEquals(connector, helper.getConnector());
assertEquals(Object.class, query.getQueryType());
assertEquals(newHelper, this.manager.getCollectionHelper()); assertEquals(this.helper, this.manager.getCollectionHelper());
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertEquals(0, collection.count());
assertNotNull(helper); assertEquals(this.testHelper, helper); assertNull(this.manager.getHelper("no-test")); assertNotNull(test); assertEquals(this.testHelper, test); assertNull(this.manager.getHelper("no-test", TestHelper.class));
assertEquals(field, mapped.getField());
assertTrue(Conditions.notNull("string")); assertTrue(Conditions.notNull("string", "mystring"));
assertFalse(entity.isLifecycle()); assertTrue(entity.isLifecycle());
assertEquals(field.getName(), mapped.getName());
assertTrue(test.beforeCreate); assertTrue(test.afterCreate); assertNull(test.createdAt); assertEquals(time, test.createdAt); assertNull(test.accessedAt); assertEquals(time, test.accessedAt); assertNull(test.updatedAt); assertEquals(time, test.updatedAt); assertNull(invalidTest.createdAt);
assertEquals(0, collection.count()); assertEquals(0, collection.count()); assertEquals("test", index.topic.name);
assertFalse(helper.isSnakeCase()); assertFalse(helper.isLowerCase()); assertEquals("CollectionHelper", helper.generate(cls)); assertTrue(helper.isLowerCase()); assertEquals("collectionhelper", helper.generate(cls)); assertTrue(helper.isSnakeCase()); assertEquals("collection_helper", helper.generate(cls)); assertFalse(helper.isLowerCase()); assertEquals("Collection_Helper", helper.generate(cls));
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertTrue(checkForNonUpdated(collection)); assertEquals(0, collection.count());
assertNotNull(this.connector.getEntityManager().getConnector()); assertEquals(this.connector, this.connector.getEntityManager().getConnector());
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertEquals(0, collection.count());
assertTrue(this.manager.hasHelper("test")); assertFalse(this.manager.hasHelper("no-test"));
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertEquals(0, collection.count());
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertTrue(checkForNonUpdated(collection)); assertEquals(0, collection.count());
assertEquals("custom_name", helper.getCollection(MyClass.class)); assertEquals("automated_class", helper.getCollection(AutomatedClass.class)); assertEquals("basic_class", helper.getCollection(BasicClass.class));
assertTrue(Conditions.notEmptyOrNullFilled(filledList)); assertTrue(Conditions.notEmptyOrNullFilled(filledList, "mystring"));
assertEquals(transformer, entity.getTransformer());
assertEquals(1, query.sort().getElements().size()); assertEquals(0, query.sort().getElements().size()); assertEquals(0, collection.count());
assertEquals(field, document.keySet().iterator().next()); assertEquals(value, (int) document.getInteger(field));
assertEquals(0, collection.count()); assertEquals(1, collection.count()); assertEquals(0, collection.count());
assertNull(query.sort); assertEquals(0, collection.count());
assertNotNull(anno); assertEquals(0, anno.value()); assertNotNull(anno); assertEquals(1, anno.value()); assertNotNull(anno); assertEquals(1, anno.value()); assertNull(anno); assertNull(anno);
assertEquals(connector, morphix.getConnector());
assertEquals(this.connector, query.getConnector());
assertEquals(0, collection.count()); assertEquals(100, collection.count()); assertEquals(0, collection.count());
assertEquals(0, fields.size()); assertEquals(1, fields.size()); assertEquals(2, fields.size());
assertEquals(0, fields.size()); assertEquals(1, fields.size()); assertEquals(2, fields.size());
assertEquals(this.helper, this.manager.getCollectionHelper());
assertEquals(type, mapped.getType());
assertFalse(systemTaskWorkerCoordinator.isAsyncSystemTask(null));
assertTrue("should return 1 or more search results", result.getResults().size() > 0); assertEquals("taskId should match the indexed task", "some-task-id", result.getResults().get(0));
assertEquals(statement, statements.getDeleteTaskDefLimitStatement());
assertEquals(statement, statements.getInsertEventHandlerStatement());
assertTrue(isLocked); assertFalse(lock.isLocked());
assertNotNull(result); assertEquals(payload, result);
assertNotNull(nameVal); assertEquals(test, nameVal);
assertTrue(map.get("externalId") instanceof String); assertTrue(map.get("externalId") instanceof LinkedHashMap);
assertEquals(Workflow.WorkflowStatus.RUNNING, subWorkflowInstance.getStatus());
assertNotNull(nameVal); assertEquals(test, nameVal);
assertEquals(statement, statements.getDeleteWorkflowStatement());
assertNotNull(cv.getValue()); assertTrue(cv.getValue() instanceof String); assertEquals(test, cv.getValue());
assertNotNull(jsonObject);
assertEquals("DynoTask", dynamicTaskName);
assertEquals(results.size(), 0);
assertTrue(systemTaskWorkerCoordinator.isFromCoordinatorExecutionNameSpace(TEST_QUEUE + EXECUTION_NAMESPACE_CONSTANT));
assertEquals(listOfLogs, taskResource.getTaskLogs("123"));
assertEquals(listOfWorklfows, workflowResource.getRunningWorkflow("w123", 1, 12L, 13L));
assertEquals(path, externalPayloadStorageUtils.uploadHelper(new byte[]{}, 10L, ExternalPayloadStorage.PayloadType.TASK_OUTPUT)); assertEquals(1, uploadCount.get());
assertNotNull(replaced); assertEquals(generatedId.get(), replaced.get("k1")); assertEquals("conductor", replaced.get("k2")); assertNull(replaced.get("k3"));
assertEquals(statement, statements.getDeleteTaskLookupStatement());
assertEquals(Workflow.WorkflowStatus.TERMINATED, workflow.getStatus()); assertEquals(1, updateWorkflowCalledCounter.get());
assertEquals("0", decisionTaskMapper.getEvaluatedCaseValue(decisionTask, input));
assertEquals(new Integer(0), mapper.fromProto(taskWithDefaultRetryCount).getRetryCount()); assertEquals(1, mapper.fromProto(taskWith1RetryCount).getRetryCount().intValue()); assertNull(mapper.fromProto(taskWithNoRetryCount).getRetryCount());
assertEquals(statement, statements.getUpdateTotalPartitionsStatement());
assertEquals(results.size(), 0);
assertNotNull(bycorrelationId); assertEquals(10, bycorrelationId.size());
assertEquals(task, taskResource.getTask("123"));
assertEquals(1, workflowDefinition.getTasks().size()); assertEquals(workflowDefinitionName, params.getName()); assertEquals(version, params.getVersion());
assertEquals(listOfWorkflowDef, metadataResource.getAll());
assertNotNull(tasksToBeScheduled); assertEquals(1, tasksToBeScheduled.size()); assertEquals("s1", tasksToBeScheduled.get(0).getReferenceTaskName()); assertNotNull(tasksToBeScheduled); assertEquals(1, tasksToBeScheduled.size()); assertEquals("s2", tasksToBeScheduled.get(0).getReferenceTaskName());
assertEquals(statement, statements.getSelectTaskFromLookupTableStatement());
assertNotNull(replaced); assertEquals("{\\"taskRefName\\":\\"t001\\",\\"workflowId\\":\\"w002\\"}", replaced.get("k1")); assertEquals("conductor", replaced.get("k4")); assertEquals(2, replaced.get("k5"));
assertTrue(redisLock.acquireLock(lockId, 1000, 1000, TimeUnit.MILLISECONDS));
assertEquals("123", taskResource.updateTask(taskResult));
assertNotNull(tasks); assertEquals(1, tasks.size()); assertNotNull(tasks); assertEquals(workflowId, tasks.get(0).getWorkflowInstanceId()); assertEquals(taskId, tasks.get(0).getTaskId());
assertEquals(statement, statements.getDeleteTaskStatement());
assertEquals(statement, statements.getSelectAllTaskDefsStatement());
assertEquals(HealthCheckResponse.ServingStatus.SERVING, reply.getStatus());
assertEquals(listOfTask, adminResource.view("testTask", 0, 100));
assertEquals(taskDef, metadataResource.getTaskDef("test"));
assertEquals(listOfEventHandler, eventResource.getEventHandlersForEvent("testEvent", true));
assertNotNull(scheduledTasks); assertEquals(2, scheduledTasks.size()); assertEquals(Status.IN_PROGRESS, scheduledTasks.get(0).getStatus()); assertEquals(Status.SCHEDULED, scheduledTasks.get(1).getStatus());
assertTrue(optionalWorkflowDef.isPresent());
assertEquals(listOfTaskDefs, metadataResource.getTaskDefs());
assertEquals(map, taskResource.size(list));
assertEquals(listOfPollData, taskResource.getAllPollData());
assertFalse(isLocked); assertTrue(worker1.isLocked);
assertEquals(listOfEventHandler, eventResource.getEventHandlers());
assertEquals(results.size(), 0);
assertEquals(statement, statements.getSelectWorkflowDefStatement());
assertNotNull(event); assertEquals("queue_queue_name_001", event); assertNotNull(event); assertEquals(eventt, event);
assertEquals(queuesList, eventResource.getEventQueueProviders());
assertEquals("", baseDynoDAO.nsKey()); assertEquals("key1.key2", baseDynoDAO.nsKey(keys)); assertEquals("test", baseDynoDAO.nsKey()); assertEquals("test.key1.key2", baseDynoDAO.nsKey(keys)); assertEquals("test.stack.key1.key2", baseDynoDAO.nsKey(keys));
assertEquals(listOfTasks, taskResource.batchPoll("SIMPLE", "123", "test", 1, 100));
assertEquals("w112", workflowResource.startWorkflow("test1", 1, "c123", 0, input));
assertEquals(listOfTasks, taskResource.getTasks("SIMPLE", "123", 123));
assertNotNull(replaced); assertEquals("t001", replaced.get("k2")); assertNull(replaced.get("k3")); assertEquals("conductor", replaced.get("k4")); assertEquals(2, replaced.get("k5"));
assertNotNull(externalStorageLocation); assertEquals(path, externalStorageLocation.getPath()); assertNotNull(externalStorageLocation.getUri());
assertNotNull(nameVal); assertEquals(test, nameVal);
assertNotNull(task); assertNull(task.getInputData());
assertTrue("should return 1 or more search results", searchResponse.getHits().getTotalHits() > 0); assertEquals("indexed message id should match", messageId, source.get("messageId")); assertEquals("indexed payload should match", "some-payload", source.get("payload")); assertEquals(1, messages.size()); assertEquals(message.getId(), messages.get(0).getId()); assertEquals(message.getPayload(), messages.get(0).getPayload());
assertEquals(results.size(), 0);
assertEquals("1", taskResource.requeue());
assertNotNull(nameVal); assertEquals(test.trim(), nameVal);
assertTrue(isLocked); assertTrue(isLocked);
assertEquals(1, workflowDefinition.getTasks().size()); assertNotNull(populatedWorkflowTask.getTaskDefinition());
assertEquals(statement, statements.getUpdateTaskDefLimitStatement());
assertNotNull(tasks);
assertFalse(outcome.isComplete); assertEquals(5, outcome.tasksToBeScheduled.size()); assertEquals(1, outcome.tasksToBeUpdated.size());
assertEquals(listOfPollData, taskResource.getPollData("w123"));
assertNotNull(workflows); assertEquals(1, workflows.size()); assertNotNull(workflows); assertEquals(1, workflows.size());
assertEquals(Status.COMPLETED, argumentCaptor.getAllValues().get(0).getStatus()); assertEquals(workflowId, argumentCaptor.getAllValues().get(0).getSubWorkflowId());
assertEquals(statement, statements.getUpdateWorkflowDefStatement());
assertEquals(statement, statements.getInsertEventExecutionStatement());
assertEquals(workflowId, adminResource.requeueSweep(workflowId));
assertNotNull(workflow); assertNotNull(workflow);
assertEquals(workflow, workflowResource.getExecutionStatus("w123", true));
assertEquals(statement, statements.getSelectAllWorkflowDefVersionsByNameStatement());
assertEquals(configs, adminResource.getAllConfig());
assertEquals(statement, statements.getSelectAllWorkflowDefsStatement());
assertNotNull(deciderOutcome); assertFalse(workflow.getTaskByRefName("s1").isRetried()); assertEquals(1, deciderOutcome.tasksToBeUpdated.size()); assertEquals("s1", deciderOutcome.tasksToBeUpdated.get(0).getReferenceTaskName()); assertEquals(1, deciderOutcome.tasksToBeScheduled.size()); assertEquals("s2__1", deciderOutcome.tasksToBeScheduled.get(0).getReferenceTaskName()); assertFalse(deciderOutcome.isComplete);
assertEquals(statement, statements.getSelectAllEventExecutionsForMessageFromEventExecutionsStatement());
assertEquals(queueSizeMap, taskResource.allVerbose());
assertNotNull(sqsObservableQueue); assertEquals(10, sqsObservableQueue.getBatchSize()); assertEquals(50, sqsObservableQueue.getPollTimeInMS()); assertEquals(30, sqsObservableQueue.getVisibilityTimeoutInSeconds());
assertEquals(statement, statements.getDeleteEventHandlerStatement());
assertEquals(workflowDef, metadataResource.get("test", 1));
assertFalse(workflowRepairService.verifyAndRepairTask(task));
assertTrue(isLocked); assertFalse(lock.isLocked());
assertNotNull(bycorrelationId); assertEquals(10, bycorrelationId.size());
assertEquals(1, workflowDefinition.getTasks().size()); assertEquals(workflowDefinitionName, params.getName()); assertEquals(version, params.getVersion());
assertEquals(1, searchIds.size()); assertEquals(workflowId, searchIds.get(0));
assertEquals(dynamicTaskDefinition, taskDef);
assertEquals(systemTaskExecutor.getExecutionConfig("test-iso").getSemaphoreUtil().availableSlots(), 7);
assertEquals(statement, statements.getInsertTaskStatement());
assertEquals(statement, statements.getSelectTasksFromTaskDefLimitStatement());
assertNotNull(replaced); assertEquals(replaced.get("k2"), "t001"); assertNull(replaced.get("k3")); assertEquals(replaced.get("k4"), "conductor"); assertEquals(replaced.get("k5"), 2);
assertEquals(statement, statements.getSelectWorkflowWithTasksStatement());
assertEquals("true", taskResource.ack("123", "456"));
assertNotNull(mappedTasks); assertEquals(SystemTaskType.JOIN.name(), mappedTasks.get(0).getTaskType());
assertEquals(searchResult, taskResource.search(0,100,"asc", "*", "*"));
assertEquals(statement, statements.getInsertWorkflowStatement());
assertNotNull(workflow.getOutput()); assertTrue(workflow.getOutput().isEmpty()); assertNotNull(workflow.getOutput()); assertEquals("taskValue", workflow.getOutput().get("taskKey"));
assertEquals(Status.COMPLETED, argumentCaptor.getValue().getStatus()); assertEquals("testMessage", argumentCaptor.getValue().getOutputData().get("conductor.event.messageId")); assertEquals("testEvent", argumentCaptor.getValue().getOutputData().get("conductor.event.name")); assertEquals("workflow_1", argumentCaptor.getValue().getOutputData().get("workflowId")); assertEquals("task_1", argumentCaptor.getValue().getOutputData().get("taskId"));
assertEquals(++counterCount, counter.count()); assertEquals(Status.TIMED_OUT, task.getStatus()); assertNotNull(task.getReasonForIncompletion()); assertEquals(counterCount, counter.count()); assertEquals(Status.SCHEDULED, task.getStatus()); assertNull(task.getReasonForIncompletion());
assertEquals(statement, statements.getSelectWorkflowStatement());
assertEquals(workflowMap, workflowResource.getWorkflows("test", true, true, correlationIdList));
assertTrue("should return 1 or more search results", result.getResults().size() > 0); assertEquals("taskId should match the indexed task", "some-task-id", result.getResults().get(0));
assertEquals(2, taskList.size()); assertEquals(tasks, taskList); assertEquals(workflow.getTasks(), taskList); assertEquals(0, taskList.size()); assertEquals(workflow.getTasks(), tasks); assertEquals(1, taskList.size()); assertEquals(newTask, taskList.get(0)); assertEquals(3, workflow.getTasks().size());
assertEquals(statement, statements.getDeleteWorkflowDefStatement());
assertNull(activeDomain);
assertTrue(subWorkflow.isAsync());
assertEquals(statement, statements.getSelectTotalStatement());
assertNotNull(task); assertNull(task.getOutputData());
assertEquals(results.size(), 0);
assertFalse(metadataMapperService.shouldPopulateTaskDefinition(workflowTask));
assertEquals("1", taskResource.requeuePendingTask("SIMPLE"));
assertEquals(statement, statements.getDeleteWorkflowDefIndexStatement());
assertFalse(added); assertTrue(added);
assertTrue(optionalWorkflowDef.isPresent()); assertTrue(messages.contains("WorkflowIds list cannot be null."));
assertEquals(task, taskResource.poll("SIMPLE", "123", "test"));
assertEquals(statement, statements.getUpdateTaskLookupStatement());
assertEquals("search results should be length 1", searchResponse.getHits().getTotalHits(), 1); assertEquals("indexed message id should match", messageId, response.getSource().get("messageId")); assertEquals("indexed payload should match", "some-payload", response.getSource().get("payload")); assertEquals(1, messages.size()); assertEquals(message.getId(), messages.get(0).getId()); assertEquals(message.getPayload(), messages.get(0).getPayload());
assertEquals(statement, statements.getUpdateWorkflowStatement());
assertEquals(systemTaskExecutor.getExecutionConfig("").getSemaphoreUtil().availableSlots(), 5);
assertEquals(1, searchIds.size()); assertEquals(workflowId, searchIds.get(0));
assertEquals(task, taskResource.getPendingTaskForWorkflow("SIMPLE", "123"));
assertEquals(listOfWorkflows, workflowResource.getWorkflows("test1", "123", true, true));
assertNotNull(sqsObservableQueue); assertEquals(1, sqsObservableQueue.getBatchSize()); assertEquals(100, sqsObservableQueue.getPollTimeInMS()); assertEquals(60, sqsObservableQueue.getVisibilityTimeoutInSeconds());
assertEquals(results.size(), 1);
assertEquals("search results should be length 1", searchResponse.getHits().getTotalHits(), 1); assertEquals("indexed message id should match", messageId, response.getSource().get("messageId")); assertEquals("indexed id should match", "some-id", response.getSource().get("id")); assertEquals("indexed status should match", EventExecution.Status.COMPLETED.name(), response.getSource().get("status")); assertEquals(1, events.size()); assertEquals(eventExecution, events.get(0));
assertEquals(statement, statements.getUpdateTotalTasksStatement());
assertEquals(Workflow.WorkflowStatus.TERMINATED, subWorkflowInstance.getStatus());
assertEquals(statement, statements.getDeleteTaskDefStatement());
assertEquals(statement, statements.getUpdateEventExecutionStatement());
assertFalse(subWorkflow.execute(workflowInstance, task, workflowExecutor));
assertTrue(map.get("externalId") instanceof String); assertEquals(before, list.size()); assertTrue(map.get("externalId") instanceof ArrayList);
assertEquals("w112", workflowResource.startWorkflow(startWorkflowRequest));
assertEquals(2, workflowDefinition.getTasks().size()); assertNotNull(workflowTasks.get(0).getTaskDefinition()); assertNotNull(workflowTasks.get(1).getTaskDefinition());
assertTrue(indexExists("conductor")); assertEquals(1, searchIds.size()); assertEquals(workflowId, searchIds.get(0));
assertNotNull(deliveredTags);
assertEquals(results.size(), 1);
assertEquals(1, workflowDefinition.getTasks().size()); assertNotNull(populatedWorkflowTask.getTaskDefinition());
assertEquals("domain2", activeDomain);
assertEquals(results.size(), 0);
assertEquals(map, taskResource.all());
assertTrue(metadataMapperService.shouldPopulateTaskDefinition(workflowTask));
assertEquals(1, searchIds.size()); assertEquals(workflowId, searchIds.get(0));
assertEquals(statement, statements.getSelectAllEventHandlersStatement());
assertEquals(HealthCheckResponse.ServingStatus.NOT_SERVING, reply.getStatus());
assertTrue(systemTaskWorkerCoordinator.isAsyncSystemTask(TEST_QUEUE + ISOLATION_CONSTANT));
assertEquals(statement, statements.getDeleteEventExecutionsStatement());
assertEquals(-1, mapper.toProto(taskWithDefaultRetryCount).getRetryCount()); assertEquals(1, mapper.toProto(taskWith1RetryCount).getRetryCount()); assertEquals(0, mapper.toProto(taskWithNoRetryCount).getRetryCount());
assertEquals(statement, statements.getSelectTaskStatement());
assertEquals(statement, statements.getInsertWorkflowDefVersionIndexStatement());
assertTrue(isLocked); assertTrue(isLocked); assertTrue(isLocked);
assertEquals(1, mappedTasks.size()); assertEquals(Wait.NAME, mappedTasks.get(0).getTaskType());
assertEquals(2, tasks.size()); assertTrue(task.getReferenceTaskName().endsWith(TaskUtils.getLoopOverTaskRefNameSuffix(1))); assertEquals(1, task.getIteration());
assertEquals(subWorkflowParams, subWorkflowTaskMapper.getSubWorkflowParams(workflowTask));
assertEquals(results.size(), 0);
assertNotNull(nameVal); assertEquals(test, nameVal);
assertEquals(statement, statements.getSelectTaskDefStatement());
assertEquals(statement, statements.getInsertTaskDefStatement());
assertEquals(statement, statements.getInsertWorkflowDefStatement());
assertEquals("mydomain", tasks.get(0).getDomain()); assertNull(tasks.get(1).getDomain());
assertTrue(workflowRepairService.verifyAndRepairTask(task));
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertNull(result);
assertSame(columnFormatterMap, result);
assertTrue(result);
assertNotNull(result); assertEquals("1000000", result);
assertSame(stringClass, result);
assertEquals(3, ReflectionTestUtils.getField(fileLineIterator, "currentLineCount"));
assertFalse(result);
assertEquals(VariableFileLineWriter.class, fileLineWriter.getClass()); assertEquals(fileName, ReflectionTestUtils.getField(fileLineWriter, "fileName")); assertEquals(clazz, ReflectionTestUtils.getField(fileLineWriter, "clazz")); assertEquals(columnFormatterMap, ReflectionTestUtils.getField( fileLineWriter, "columnFormatterMap"));
assertNull(result);
assertTrue(blogic instanceof BLogic);
assertFalse(result);
assertEquals("aaa", testResult);
assertNotNull(result); assertEquals("Message not found. CODE:[null]", result.getMessage());
assertFalse(result);
assertEquals(0, asyncJobOperator.start(new String[] {}));
assertEquals(BufferedReader.class, reader.getClass()); assertEquals(LineFeed2LineReader.class, reader02.getClass()); assertEquals("\\r\\n", ReflectionTestUtils.getField(reader02, "lineFeedChar")); assertSame(reader, ReflectionTestUtils.getField(reader02, "reader")); assertEquals("AbstractFileLineIterator_buildLineReader01", ((BufferedReader) reader).readLine());
assertEquals("@property.test100.id.0", str);
assertTrue(result.isEmpty());
assertThat(resolver, is(instanceOf(ApplicationContextResolverImpl.class)));
assertEquals("TERASOLUNA ", result);
assertEquals("abc", se1.getErrorCode());
assertFalse(result);
assertSame(dbmr, ds.dbMessageResourceDAO);
assertEquals(26, result.size());
assertEquals("", resutl);
assertEquals(IllegalArgumentException.class, e.getClass());
assertNull(result);
assertEquals(1, result.length); assertEquals("array", result[0]);
assertEquals(target.readLine(), "1111"); assertEquals(target.readLine(), "2222"); assertEquals(target.readLine(), "3333"); assertEquals(target.readLine(), "4444"); assertEquals(target.readLine(), "5555"); assertEquals(target.readLine(), "6"); assertEquals(target.readLine(), "");
assertSame(fields, result);
assertNull(resultString);
assertEquals(locale, ds.defaultLocale);
assertTrue(ds.cachedMergedProperties.isEmpty()); assertTrue(ds.cachedMessageFormats.isEmpty()); assertTrue(dbmr.isRead); assertEquals(0, ds.list.size());
assertSame(textGetterMap, result);
assertNotNull(result); assertTrue(result instanceof Object[]); assertEquals(1, arrayResult.length); assertEquals("foo", arrayResult[0]);
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("", options[0]); assertEquals("", options[1]); assertEquals("", options[2]); assertEquals("", options[3]);
assertEquals("MS932", result);
assertEquals("TERASOLUNA ", result);
assertTrue(result.contains("/tmp/test"));
assertEquals( "[EAL025058] Invalid format in batch.properties. key:beanDefinition.business.classpath", e.getMessage());
assertEquals("CODE", query.rsCodeColumn); assertEquals("LANGUAGE", query.rsLanguageColumn); assertEquals("COUNTRY", query.rsCountryColumn); assertEquals("VARIANT", query.rsVariantColumn); assertEquals("MESSAGE", query.rsMessageColumn); assertTrue(dbmr.isRead);
assertEquals(List.class, actual);
assertEquals(2, locales.size()); assertEquals(locale1, locales.get(0)); assertEquals(locale2, locales.get(1));
assertEquals(NoSuchMethodException.class.getName(), e.getCause() .getClass().getName());
assertEquals(3, result.length); assertEquals(hope[i], result[i]);
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025024] This job has already been started by another. jobSequenceId:00000001"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertEquals(NoSuchMethodException.class.getName(), e.getCause() .getClass().getName());
assertFalse(result.hasMoreElements());
assertFalse(Thread.currentThread().isInterrupted()); assertThat(logger.getLoggingEvents().size(), is(1)); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025020] Waiting to shutdown all tasks in ThreadPoolTaskExecutor."))));
assertNotNull(result); assertEquals(fileName, result);
assertEquals(10, semaphore.availablePermits()); assertThat(logger.getLoggingEvents(), is(asList(error(runtimeException, "[EAL025053] An exception occurred. please see below the stacktrace."))));
assertSame(InvocationTargetException.class, e.getCause() .getClass());
assertNotNull(result); assertEquals("\\\\1,000,000.00", result); assertSame(dfMap, ReflectionTestUtils.getField(decimalColumnFormatter, "dfMap")); assertEquals(1, dfMap.size()); assertTrue(dfMap.containsKey(columnFormat)); assertNotNull(dfMapValue); assertEquals(columnFormat, ReflectionTestUtils.getField(dfMapValue, "pattern"));
assertNull(resultHashValue);
assertFalse(st.contains("xxxxx.properties"));
assertNotNull(blogic); assertNotNull(msg);
assertEquals("{1,2,3,4,5}", result);
assertSame(errors, result);
assertEquals("testException", throwWord); assertNull(errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]); assertEquals("c", options[2]); assertEquals("d", options[3]);
assertEquals("abc", se1.getMessage());
assertEquals("123", result);
assertSame(column, result);
assertTrue(b);
assertEquals("java.lang.Integer", obj.getClass().getName()); assertEquals("12", resultObj.toString());
assertTrue(result);
assertTrue(result);
assertEquals( "[Assertion failed] - this argument is required; it must not be null", e.getMessage());
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.DEBUG, handler.logLevel);
assertNull(str);
assertEquals(100, result.getBlogicStatus()); assertEquals(re, result.getBlogicThrowable()); assertEquals(0, tga.size()); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025044] The BLogic detail is as follow. BLogic-class:" + blogic.getClass().getName() + ", " + blogicParam .toString()))));
assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName()); assertTrue(e.getCause() instanceof IllegalAccessException);
assertEquals(5, locales.size()); assertEquals(locale1, locales.get(0)); assertEquals(locale2, locales.get(1)); assertEquals(defaultLocale, locales.get(2)); assertEquals(defaultLocale2, locales.get(3)); assertEquals(defaultLocale3, locales.get(4));
assertEquals("CODE", query.rsCodeColumn); assertNull(query.rsLanguageColumn); assertNull(query.rsCountryColumn); assertNull(query.rsVariantColumn); assertEquals("MESSAGE", query.rsMessageColumn); assertTrue(dbmr.isRead);
assertFalse(result);
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertSame(defaultHandler, result);
assertEquals(hope, result);
assertFalse(result); assertEquals(1, list.size()); assertEquals(GenericsUtil_ArrayListStub01.class.getGenericSuperclass(), list.get(0));
assertFalse(result);
assertTrue(result);
assertNotNull(result); assertEquals(queryResultHandleDao, result);
assertNull(resultErorrs.getErrors()); assertNull(validator.getParameterValue("java.lang.Object")); assertNull(validator.getFormName());
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("1", listResult.get(0)); assertEquals("2", listResult.get(1)); assertEquals("3", listResult.get(2));
assertTrue(result.contains(null)); assertFalse(result.contains("test"));
assertEquals(23, e.state);
assertEquals(NoSuchMethodException.class.getName(), e.getCause() .getClass().getName());
assertNotNull(result); assertEquals("\\\\1,000,000.00", result); assertSame(dfMap, ReflectionTestUtils.getField(decimalColumnFormatter, "dfMap")); assertEquals(1, dfMap.size()); assertTrue(dfMap.containsKey(columnFormat)); assertSame(dfMapValue, formatLocal);
assertEquals(1, result);
assertSame(props, returnProp);
assertEquals("test", str);
assertEquals(1, result.length); assertEquals(hope[i], result[i]);
assertEquals(10, semaphore.availablePermits()); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025021] Skipped this job execution because this job has already been started by another. jobSequenceId:0000000001"))));
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertNotNull(result); assertEquals(BigDecimal.valueOf(123456), result);
assertEquals("@test007", str);
assertEquals("java.lang.String", obj.getClass().getName()); assertEquals("", resultObj);
assertEquals(2, asyncJobLauncher.taskPoolLimit.availablePermits()); assertTrue(asyncJobLauncher.taskPoolLimit.isFair());
assertTrue(collector.isCloseCalled());
assertNull(manager.getStringOrNull(null, null));
assertThat(ise, is(e));
assertNull(ctx.getParent());
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("MD5").digest("".getBytes()), resultHashValue));
assertTrue(e instanceof NullPointerException); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertEquals("TERASOLUNA", result);
assertEquals(Object.class, actual);
assertEquals(NestedNullException.class.getName(), e.getCause() .getClass().getName());
assertEquals("testException", throwWord); assertEquals("test01", errorCode);
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:1"), error("[EAL025025] Job status update error. jobSequenceId:00000001 blogicStatus:null"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.TRACE, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertTrue(set.contains(result.nextElement())); assertFalse(result.hasMoreElements());
assertEquals("101010,101010,101010\\rn", result);
assertSame(column, result);
assertFalse(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025024] This job has already been started by another. jobSequenceId:00000001"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertNotNull(result); assertEquals(1, result.size()); assertEquals(GenericsUtil_CallableStub01.class .getGenericInterfaces()[0], result.get(0));
assertNotNull(result); assertTrue(result instanceof SimpleDateFormat); assertEquals(pattern, SimpleDateFormat.class.cast(result).toPattern()); assertFalse(result.isLenient());
assertNull(BeanUtil.getBeanPropertyType(bean, "param3"));
assertNull(str);
assertNull(batchJobData.getJobSequenceId());
assertEquals("abc", returnMessage);
assertSame(columnName, result);
assertEquals(1, ds.cachedMergedProperties.size()); assertSame(returnProps, result);
assertEquals(1, result);
assertFalse(StringUtil.isWhitespace(input));
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("1", listResult.get(0)); assertEquals("2", listResult.get(1)); assertEquals("3", listResult.get(2));
assertEquals(1, result.size()); assertEquals("foo", result.get(0));
assertTrue(ds.cachedMergedProperties.isEmpty()); assertTrue(ds.cachedMessageFormats.isEmpty()); assertTrue(dbmr.isRead); assertEquals(0, ds.list.size());
assertNull(result);
assertEquals(3, columns.length); assertEquals("2006/12/10", columns[0]); assertEquals("aaaaa", columns[1]); assertEquals("123456789", columns[2]);
assertEquals("\\"aaa\\",\\"aaa\\",\\"aaa\\"aaa", resutl);
assertThat(target.isCacheEnabled(), is(false));
assertFalse(result.hasMoreElements());
assertNotNull(result); assertEquals(exceptionToStatusMap, result);
assertSame(fileName, result);
assertTrue(e.getMessage().contains( "IOException parsing XML document from class path resource [beansDef/not-defined.xml]"));
assertNotNull(result); assertEquals(2, result.size()); assertEquals(getParameterizedClassList(FutureTask.class, GenericsUtil_FutureTaskStub03.class), result);
assertEquals("&lt;", result);
assertThat(logger.getLoggingEvents(), is(asList(error( "[EAL025025] Job status update error. jobSequenceId:000001 blogicStatus:1"))));
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertSame(re, e); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertFalse(result);
assertEquals(Exception.class.getName(), e.getCause().getClass() .getName());
assertTrue((Boolean) ReflectionTestUtils.getField(fileLineIterator, "calledInit"));
assertNotNull(result); assertEquals(3, result.length); assertEquals(String[].class, result[0]); assertEquals(Integer.class, result[1]); assertEquals(Boolean.class, result[2]);
assertEquals("def", se1.getMessage());
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("1", listResult.get(0)); assertEquals("2", listResult.get(1)); assertEquals("3", listResult.get(2));
assertTrue((Boolean) ReflectionTestUtils.getField(fileLineIterator, "calledInit"));
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertTrue(st.contains("system.properties"));
assertEquals(NumberFormatException.class, e.getClass());
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.INFO, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertEquals(input, obj.getClass().getName());
assertEquals("TERASOLUNA", result);
assertEquals(BufferedReader.class, reader.getClass()); assertEquals(EncloseCharLineFeed2LineReader.class, reader02.getClass());
assertTrue(result.contains("testB")); assertFalse(result.contains("testA"));
assertEquals(1, pointer.getLength());
assertNotNull(ex.getErrors()); assertEquals(BindException.class, ex.getErrors().getClass());
assertNull(result);
assertNotNull(result); assertSame(fileName, result);
assertEquals(1, result.length); assertEquals("array", result[0]);
assertEquals("abc", returnCountry);
assertEquals(hope, result);
assertEquals("Missing dataSource in spring configuration file.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "Missing dataSource in spring configuration file."))));
assertEquals(null, result);
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("a", options[0]);
assertNotNull(result);
assertEquals(checkFileExist, argSetCheckFileExist.getValue());
assertTrue(jobStatusChanger.changeToStartStatus("00000001")); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:1"))));
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "tableName"));
assertEquals("StringUtil", result);
assertEquals("testException", throwWord); assertEquals("", errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]);
assertEquals(" TERASOLUNA", result);
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertNull(options[0]); assertEquals("a", options[1]);
assertNotNull(result); assertEquals(3, result.length); assertEquals(Boolean.class, result[0]); assertEquals(String[].class, result[1]); assertEquals(Integer.class, result[2]);
assertSame(BeanPointerEx.class, result.getClass()); assertSame(locale, result.getLocale()); assertSame(qName, result.getName()); assertSame(bean, ReflectionTestUtils.getField(result, "bean"));
assertEquals(e.getMessage(), "[EAL025056] [Assertion failed] - EndFileStopper requires to set executor.endMonitoringFile. please confirm the settings."); assertThat(logger.getLoggingEvents(), IsNot.not(asList(info( "[IAL025025] It will be checked to stop AsyncBatchExecutor at a certain interval. the end monitoring file path:/tmp/batch_terminate_file"))));
assertTrue(context.containsBean("syncJobOperator")); assertTrue(context.containsBean("systemDao")); assertNull(context.getParent());
assertEquals(3, i);
assertEquals("property.test004.id.0", enume.nextElement()); assertFalse(enume.hasMoreElements());
assertEquals("", blogicResolverImpl.getBLogicBeanName(null));
assertTrue(true);
assertFalse(result);
assertTrue(result.contains("{0}message"));
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("SHA1").digest("".getBytes()), resultHashValue));
assertEquals("\\r", result);
assertFalse(result2);
assertNotNull(result); assertEquals(3, result.length); assertEquals(String[].class, result[0]); assertEquals(Integer.class, result[1]); assertEquals(Boolean.class, result[2]);
assertEquals(1, columns.length); assertEquals("12345", columns[0]);
assertTrue(b);
assertEquals(Integer.class, result);
assertNotNull(result);
assertSame(String.class, BeanUtil.getBeanPropertyType(bean, "param2"));
assertSame(list, result);
assertEquals(InvocationTargetException.class, e.getClass());
assertEquals("", result);
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertSame(re, e); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:1"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"), error(reAtRollback, "[EAL025064] Failed to rollback transaction. jobSequenceId:00000001"))));
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertNull(options[0]); assertNull(options[1]); assertNull(options[2]);
assertEquals(IllegalArgumentException.class, e.getClass());
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "messageColumn"));
assertFalse(result);
assertEquals(Map.class, result);
assertFalse(FileUtil.removeSessionDirectory(input));
assertNotNull(result); assertEquals(1, result.size()); assertEquals(GenericsUtil_FutureTaskStub02.class.getGenericSuperclass(), result.get(0));
assertFalse(StringUtil.isZenHankakuSpace(input));
assertNotNull(result); assertEquals(" ", result);
assertSame(String.class, BeanUtil.getBeanPropertyType(bean, "param2"));
assertTrue(logger.getLoggingEvents().get(0).getMessage().equals( "*** Can not find property-file" + " [test_me.properties] ***") && logger.getLoggingEvents().get(0).getLevel().equals( Level.WARN)); assertNull(result);
assertSame(map, result);
assertEquals("test", str);
assertEquals(ArrayBlockingQueue.class, trailerQueue_object.getClass()); assertEquals(1, trailerQueue.size()); assertEquals("Line data 3", trailerQueue.poll());
assertEquals(Exception.class.getName(), e.getCause().getClass() .getName());
assertEquals("default", str);
assertEquals(".xml", target.getBeanFileName(batchJobData));
assertTrue(result1);
assertTrue(writer.isCloseFileCalled());
assertFalse(result);
assertSame(recoverableDataAccessException, e); assertEquals(Level.ERROR, logger.getLoggingEvents().get(0).getLevel()); assertEquals( "[EAL025063] Connection retry count exceeded limit. maxRetryCount:0", logger.getLoggingEvents().get(0).getMessage());
assertEquals(10, semaphore.availablePermits()); assertTrue(logger.getLoggingEvents() .get(0) .getThrowable() .get() instanceof TaskRejectedException); assertEquals( "[EAL025047] This job cannot be accepted for execution. jobSequenceId:0000000001", logger.getLoggingEvents().get(0).getMessage());
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "variantColumn"));
assertEquals(String.class, result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertTrue((Boolean) listResult.get(0)); assertFalse((Boolean) listResult.get(1)); assertTrue((Boolean) listResult.get(2));
assertTrue(result);
assertFalse(result); assertTrue(list.isEmpty());
assertNotNull(drh);
assertNull(result);
assertTrue(ret);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertEquals(1, ReflectionTestUtils.getField(fileLineIterator, "currentLineCount"));
assertNotNull(result); assertEquals(BigDecimal.valueOf(12345600, 2), result);
assertTrue(result);
assertEquals(3, locales.size()); assertEquals(locale1, locales.get(0)); assertEquals(defaultLocale, locales.get(1)); assertEquals(defaultLocale2, locales.get(2));
assertTrue(result.containsKey("SystemExceptionHandlerTest.key")); assertTrue(result.containsValue("{0}message"));
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertEquals("", result);
assertFalse(ret);
assertTrue(collector.isCloseCalled());
assertSame(exHandler, result);
assertFalse(actual);
assertEquals(srcFile, argGetAbsolutePath); assertEquals(basePath + srcFile, argDeleteFile);
assertEquals(Boolean.class, result);
assertEquals("testException", throwWord); assertEquals("", errorCode); assertNull(options);
assertEquals(".txt", result);
assertEquals("abc", ReflectionTestUtils.getField(se1, "message"));
assertSame(BeanPropertyPointerEx.class, result.getClass()); assertSame(beanPointer, result.getParent()); assertSame(beanInfo, ReflectionTestUtils.getField(result, "beanInfo"));
assertFalse(result);
assertTrue(result);
assertEquals("0000000001", batchJobData.getJobSequenceId());
assertSame(exHandler, result);
assertEquals("illegalArgument: tableName is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: tableName is null or empty."))));
assertNull(adminConnectionRetryInterceptor.invoke( mockMethodInvocation));
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertNull(trailerQueue_object);
assertTrue(e.getMessage().contains( "EL1008E: Property or field \'noDefProperty\' cannot be found on object of type \'jp.terasoluna.fw.batch.executor.ApplicationContextResolverImplTest"));
assertFalse(result); assertTrue(list.isEmpty());
assertFalse(result);
assertNotNull(result);
assertEquals(expected, result); assertEquals(2, map.size()); assertNotNull(map.get("yyyyMMdd")); assertSame(cache, map.get("yyyy-MM-dd"));
assertSame(ProxyUtil_JavaBeanStub01.class, result);
assertEquals(1, result.size()); assertEquals("foo", result.get(0));
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]); assertEquals("c", options[2]);
assertTrue(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:2"))));
assertTrue(e instanceof NoSuchBeanDefinitionException); assertThat(logger.getLoggingEvents(), is(asList(error( "[EAL025009] BLogic bean not found. beanName:DEFINE_NOT_EXISTBLogic"))));
assertSame(NullPointer.class, result.getClass()); assertSame(nodePointer, result.getParent()); assertSame(qName, result.getName());
assertTrue(b); assertEquals("", template.getJndiNameToUse()); assertEquals("abc", template.getObj());
assertNotNull(actual); assertEquals(3, actual.size()); assertEquals("value00", actual.get(0).get("a")); assertEquals("value01", actual.get(1).get("a")); assertEquals("value02", actual.get(2).get("a"));
assertEquals("abc", returnVariant);
assertFalse(result);
assertTrue(set.contains(result.nextElement())); assertTrue(set.contains(result.nextElement())); assertFalse(result.hasMoreElements());
assertEquals(3, result.length); assertEquals("array", result[0]); assertEquals(1, result[1]); assertEquals(map, result[2]); assertEquals("something", mapResult.get("foo"));
assertFalse(jobStatusChanger.changeToStartStatus(null)); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025024] This job has already been started by another. jobSequenceId:null"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:null"))));
assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ", resultString);
assertEquals(false, asyncJobLauncher.fair);
assertFalse(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025055] This job status at the job control table is already updated by another worker. It will be skip. jobSequenceId:00000001 expectedCurAppStatus:1 actualCurAppStatus:2 changeTo:2"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertEquals("0000000001", batchJobListResult.getJobSequenceId());
assertTrue(ds.cachedMergedProperties.isEmpty()); assertTrue(ds.cachedMessageFormats.isEmpty()); assertTrue(dbmr.isRead); assertEquals(0, ds.list.size());
assertEquals(expectedStr, actualStr);
assertTrue(st.contains("system.properties"));
assertEquals(target.readLine(), ".,/@"); assertEquals(target.readLine(), "<>"); assertEquals(target.readLine(), "");
assertNull(factory.createNodePointer(qName, bean, locale));
assertEquals(0, result.size());
assertEquals("1970/01/01", testResult);
assertEquals(0, columns.length);
assertEquals("BatchJobManagementUpdateParam[jobSequenceId=a,BLogicAppStatus=b,curAppStatus=c,updDateTime=2011-01-01 00:00:00.0]", p.toString());
assertFalse(result);
assertEquals(Map.class, result);
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertEquals("1970/01/01", testResult); assertEquals(2, getMap.size());
assertEquals(0, asyncJobOperator.start(new String[] {}));
assertEquals("abc", returnLanguage);
assertThat(logger.getLoggingEvents().size(), is(1)); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025020] Waiting to shutdown all tasks in ThreadPoolTaskExecutor."))));
assertEquals(1, result.size()); assertEquals(" ", result.get(0));
assertThat(logger.getLoggingEvents(), is(asList(error( "[EAL025025] Job status update error. jobSequenceId:000001 blogicStatus:null"))));
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("a", options[0]); assertEquals("", options[1]); assertNull(options[2]);
assertSame(ex, e);
assertSame(columnParserMap, result);
assertNotNull(result); assertEquals("", result);
assertEquals(String.class, actual);
assertEquals(BufferedReader.class, reader.getClass()); assertEquals(LineFeed1LineReader.class, reader02.getClass()); assertEquals("\\r", ReflectionTestUtils.getField(reader02, "lineFeedChar")); assertSame(reader, ReflectionTestUtils.getField(reader02, "reader")); assertEquals("AbstractFileLineIterator_buildLineReader01", ((BufferedReader) reader).readLine());
assertTrue(iterator.isCloseFileCalled());
assertEquals("test", str);
assertNotNull(result); assertSame(writer, result);
assertNull(result);
assertEquals("a", se1.getOptions()[0]); assertEquals("b", se1.getOptions()[1]); assertEquals(2, se1.getOptions().length);
assertSame(DynamicPointerEx.class, result.getClass()); assertSame(locale, result.getLocale()); assertSame(qName, result.getName()); assertSame(bean, ReflectionTestUtils.getField(result, "bean"));
assertEquals(expected, result); assertEquals(1, map.size()); assertNotNull(map.get("yyyyMMdd"));
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertFalse(result);
assertEquals("testException", throwWord); assertEquals("", errorCode); assertNull(options[0]); assertNull(options[1]);
assertEquals("", result);
assertNotNull(dvo); assertEquals(collectorStatus, dvo.getCollectorStatus());
assertEquals("subDir" + System.getProperty("file.separator") + "hoge.txt", retObj);
assertEquals(str, result);
assertEquals(basePath + srcFile, argDeleteFile);
assertEquals("B000003" + "BLogic", blogicResolverImpl.getBLogicBeanName( "B000003"));
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("MD5").digest("abc".getBytes()), resultHashValue));
assertEquals("19700101", testResult); assertEquals(2, getMap.size());
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertEquals("1", listResult.get(0));
assertTrue(set.contains(result.nextElement())); assertTrue(set.contains(result.nextElement())); assertTrue(set.contains(result.nextElement())); assertFalse(result.hasMoreElements());
assertEquals("@", str);
assertTrue(result);
assertTrue(asyncBatchStopper.canStop()); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025011] Detected the end file. This AsyncBatchExecutor processing will complete. path:/tmp/batch_terminate_file"))));
assertNotNull(result);
assertEquals("a &amp; b", result);
assertEquals(byteParm, result);
assertFalse(result);
assertNull(result);
assertEquals(1, result.length); assertEquals("", result[0]);
assertEquals("testException", throwWord); assertNull(errorCode);
assertEquals(0, result.length);
assertTrue(result);
assertEquals("", result);
assertTrue(result.containsKey("SystemExceptionHandlerTest.key")); assertTrue(result.containsValue("{0}message"));
assertEquals(String.class, actual);
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "languageColumn"));
assertSame(DynamicPropertyPointerEx.class, result.getClass()); assertSame(pointer, ((DynamicPropertyPointerEx) result).getParent()); assertSame(handler, resultHandler);
assertThat(asyncJobLauncher.terminated(mockThreadPoolExecutor), is(false));
assertEquals(1L, drh.dataCount.get()); assertTrue(obj1.getValue() instanceof HogeBean); assertEquals("hoge1", ((HogeBean) obj1.getValue()).getHoge()); assertEquals(1L, obj1.getDataCount());
assertFalse(result); assertThat(logger.getLoggingEvents().get(3).getMessage(), is(startsWith( "[EAL025045] Failed to rollback transaction.")));
assertEquals(basePath, ReflectionTestUtils.getField(fileControl, "basePath"));
assertNotNull(result); assertEquals(bindParams, result);
assertEquals("illegalArgument: messageColumn is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: messageColumn is null or empty."))));
assertSame(map, result);
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse()); assertEquals("return", result);
assertNotNull(result); assertEquals(1, result.length); assertEquals(String.class, result[0]);
assertEquals(String.class, BeanUtil.getBeanPropertyType(bean, "testString"));
assertEquals( "SELECT CODE,LANGUAGE,COUNTRY,VARIANT,MESSAGE FROM MESSAGES", sql);
assertEquals("illegalArgument: codeColumn is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: codeColumn is null or empty."))));
assertTrue(ds.isRead);
assertEquals(lineNo, result);
assertThat(asyncJobLauncher.terminated(mockThreadPoolExecutor), is(false));
assertEquals("", trace);
assertThat(status, is(234));
assertEquals(" TERASOLUNA", result);
assertTrue(result);
assertEquals("\\"1\\",\'22\',\\"333\\",|4444|", reader.readLine()); assertEquals("\\"5\\",\'66\',\\"777\\",|8888|", reader.readLine()); assertEquals("\\"9\\",\'AA\',\\"BBB\\",|CCCC|", reader.readLine());
assertFalse(result);
assertEquals(checkFileExist, argSetCheckFileExist.getValue());
assertEquals(1, result.length); assertEquals(" ", result[0]);
assertEquals(0, result.length);
assertTrue(AopUtils.isCglibProxy(proxy)); assertSame(ProxyUtil_JavaBeanStub01.class, result);
assertTrue(result);
assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal arguments error : name=abc, obj=null"))));
assertEquals(0, result);
assertEquals("Argument \'index\'(-1) is out of bounds of " + "generics parameters", e.getMessage()); assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName());
assertEquals(".bak", result);
assertEquals(String.class, result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertEquals("12.3", listResult.get(0));
assertEquals(1, locales.size()); assertEquals(defaultLocale, locales.get(0));
assertSame(parent, ctx.getParent());
assertEquals("", str);
assertSame(errors, resultErorrs.getErrors()); assertSame(bean, validator.getParameterValue("java.lang.Object")); assertEquals(beanName, validator.getFormName());
assertNotNull(result); assertEquals(BigDecimal.valueOf(12345600, 2), result); assertSame(dfMap, ReflectionTestUtils.getField(decimalColumnParser, "dfMap")); assertEquals(1, dfMap.size()); assertTrue(dfMap.containsKey(columnFormat)); assertNotNull(dfMapValue); assertEquals(columnFormat, ReflectionTestUtils.getField(dfMapValue, "pattern"));
assertEquals(CSVFileLineIterator.class, fileLineIterator.getClass()); assertEquals(fileName, ReflectionTestUtils.getField(fileLineIterator, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(fileLineIterator, "clazz")); assertSame(columnParser, ReflectionTestUtils.getField(fileLineIterator, "columnParserMap"));
assertNotNull(dvo); assertEquals(validateStatus, dvo.getValidateStatus());
assertSame(mf, result);
assertEquals(IllegalStateException.class, e.getCause().getClass()); assertEquals(fileName, e.getFileName()); assertEquals(message, e.getMessage());
assertEquals("[ERROR][TLoggerTest] a is b", logReader.readLine()); assertEquals("java.lang.Exception: hoge", logReader.readLine());
assertNotNull(actual); assertEquals(1, actual.size()); assertEquals("value00", actual.get(0).get("a"));
assertEquals(Character.MIN_VALUE, result);
assertTrue(result);
assertEquals("testB", str);
assertNotNull(result); assertTrue(result instanceof Object[]); assertEquals(3, arrayResult.length); assertEquals("foo", arrayResult[0]); assertEquals("bar", arrayResult[1]); assertEquals("baz", arrayResult[2]);
assertSame(Date.class, registry.clazz); assertSame(CustomDateEditor.class, registry.editor.getClass()); assertSame("yyyy/MM/dd", ReflectionTestUtils.getField(resultDateFormat, "pattern"));
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("SHA1").digest("abc".getBytes()), resultHashValue));
assertEquals("[ERROR][TLoggerTest] hoge", logReader.readLine()); assertEquals("java.lang.Exception: hoge", logReader.readLine());
assertEquals(5, result);
assertThat(logger.getLoggingEvents(), is(asList(error(ex, "[EAL025025] Job status update error. jobSequenceId:000001 blogicStatus:1"))));
assertTrue(parent.containsBean("msgAcc"));
assertNotNull(result);
assertTrue(result);
assertNotNull(result);
assertFalse(result);
assertEquals(0, asyncJobOperator.start(new String[] {}));
assertTrue(result.contains(null));
assertEquals("testException", throwWord); assertNull(errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]); assertEquals("", options[2]); assertNull(options[3]);
assertEquals("Proxy object is null.", e.getMessage());
assertEquals(Character.MIN_VALUE, result);
assertEquals("", testResult);
assertFalse(jobStatusChanger.changeToEndStatus(null, blogicResult)); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025024] This job has already been started by another. jobSequenceId:null"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:null"))));
assertNull(result);
assertEquals("illegalArgument: tableName is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: tableName is null or empty."))));
assertTrue(ret); assertSame(obj1, comparator.obj1); assertSame(obj2, comparator.obj2);
assertEquals("subDir" + System.getProperty("file.separator") + "null", retObj);
assertTrue(result);
assertEquals("test1test2", result);
assertThat(e.getMessage(), is( "BeanFactory not initialized or already closed - call \'refresh\' before accessing beans via the ApplicationContext")); assertThat(e.getMessage(), is( "BeanFactory not initialized or already closed - call \'refresh\' before accessing beans via the ApplicationContext"));
assertEquals("TERASOLUNA ", result);
assertSame(errors, resultErorrs.getErrors()); assertSame(bean, validator.getParameterValue("java.lang.Object")); assertEquals(beanName, validator.getFormName());
assertThat(target.cacheManager, is(cacheManager));
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertEquals("abcdef", result);
assertEquals(String.class, actual);
assertSame(list, result);
assertEquals("testB", str);
assertEquals("property.test002.id.0", enume.nextElement()); assertEquals("property.test002.id.1", enume.nextElement()); assertEquals("property.test002.id.2", enume.nextElement()); assertFalse(enume.hasMoreElements());
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "findMessageSql"));
assertEquals(code, ds.code); assertSame(locale, ds.locale); assertTrue(ds.isRead); assertNull(returnMsg);
assertEquals("jobAppCd.xml", target.getBeanFileName(batchJobData));
assertEquals(1, pointer.getLength());
assertNull(ReflectionTestUtils.getField(bean, "param2"));
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("MD5").digest("".getBytes()), resultHashValue));
assertNull(ConvertUtil.convert(null, Object.class));
assertEquals(1, result.length); assertEquals("", result[0]);
assertEquals("aaa,aaa,aaa", result);
assertEquals(FixedFileLineIterator.class, fileLineiterator.getClass()); assertEquals(fileName, ReflectionTestUtils.getField(fileLineiterator, "fileName")); assertEquals(clazz, ReflectionTestUtils.getField(fileLineiterator, "clazz")); assertSame(columnParser, ReflectionTestUtils.getField(fileLineiterator, "columnParserMap"));
assertEquals("illegalArgument: languageColumn is empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: languageColumn is empty."))));
assertEquals(String[].class, result);
assertNotNull(result); assertEquals("Message not found. CODE:[null]", result);
assertEquals(basePath, getBasePath);
assertEquals("\\"1\\",22,333,|4444|", result1); assertEquals("\\"5\\",66,777,|8888|", result2); assertEquals("\\"9\\",AA,BBB,|CCCC|", result3);
assertNotNull(e); assertEquals(ValidationErrorException.class, e.getClass());
assertTrue(Thread.currentThread().isInterrupted()); assertEquals(1, daoCollector.getQueue().size());
assertNull(ConvertUtil.convert(null, Object.class, true));
assertEquals("testException", throwWord); assertEquals("", errorCode); assertEquals("", options[0]);
assertNull(result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertEquals("1", listResult.get(0));
assertEquals("aaa,aaa,aaa", resutl);
assertNotNull(result); assertEquals(BigDecimal.valueOf(123456), result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.DEBUG, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertEquals(Object.class, actual);
assertEquals(0, result.size());
assertNull(ConvertUtil.convertPrimitiveArrayToList(null));
assertSame(dateFormat, ReflectionTestUtils.getField(registrar, "dateFormat"));
assertNotNull(result);
assertNull(result);
assertTrue(st.contains("system.properties")); assertTrue(st.size() == 1);
assertTrue(writer.isCloseFileCalled());
assertEquals(0, result.getBlogicStatus()); assertNull(result.getBlogicThrowable()); assertEquals(0, tga.size()); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025044] The BLogic detail is as follow. BLogic-class:" + blogic.getClass().getName() + ", " + blogicParam .toString()))));
assertEquals(VariableFileLineIterator.class, fileLineIterator .getClass()); assertEquals(fileName, ReflectionTestUtils.getField(fileLineIterator, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(fileLineIterator, "clazz")); assertSame(columnParserMap, ReflectionTestUtils.getField( fileLineIterator, "columnParserMap"));
assertEquals("File control operation was failed.", e.getMessage());
assertNull(result);
assertTrue(result.isEmpty());
assertEquals(CSVFileLineWriter.class, fileLineWriter.getClass()); assertSame(fileName, ReflectionTestUtils.getField(fileLineWriter, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(fileLineWriter, "clazz")); assertSame(columnFormatterMap, ReflectionTestUtils.getField( fileLineWriter, "columnFormatterMap"));
assertTrue(result.indexOf("java.lang.NullPointerException") != -1);
assertNull(result);
assertEquals("testException", throwWord); assertEquals("", errorCode); assertEquals("", options[0]); assertEquals("", options[1]); assertEquals("", options[2]);
assertEquals("1970/01/01", testResult); assertEquals(1, getMap.size());
assertThat(resolver, is(instanceOf(ApplicationContextResolverImpl.class)));
assertNotNull(result); assertSame(list, result);
assertFalse(result);
assertEquals("3", testResult);
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "codeColumn"));
assertEquals(".", result);
assertEquals("jp.terasoluna.fw.util.ClassUtil", obj.getClass() .getName());
assertEquals("testException", throwWord); assertEquals("", errorCode);
assertNull(resultHashValue);
assertTrue(result);
assertSame(NullPointer.class, result.getClass()); assertSame(qName, result.getName()); assertSame(nodePointer, result.getParent());
assertThat(result, is(""));
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.FATAL, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertEquals("classpath/B0000001/B0000001.xml", target.getBeanFileName(batchJobData));
assertNotNull(result); assertEquals(clazz, result);
assertNull(str);
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]);
assertTrue(AopUtils.isJdkDynamicProxy(proxy)); assertSame(ProxyUtil_JavaBeanStub01.class, result);
assertEquals("abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ", resultString);
assertEquals(Integer.class, result);
assertEquals("Argument \'index\'(1) is out of bounds of " + "generics parameters", e.getMessage()); assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName());
assertFalse(result);
assertEquals(hope, result);
assertEquals(850, factory.getOrder());
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertEquals(NumberFormatException.class, e.getClass());
assertEquals(10, asyncJobLauncher.taskPoolLimit.availablePermits());
assertEquals("testException", throwWord); assertEquals("", errorCode);
assertEquals(expected, actual);
assertEquals(23, e.state);
assertNotNull(result); assertEquals(1, result.size()); assertEquals(GenericsUtil_CallableStub02.class .getGenericInterfaces()[0], result.get(0));
assertEquals(Map.class, actual);
assertTrue(ds.isRead);
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertEquals(Character.MIN_VALUE, result);
assertEquals(1, result.size()); assertEquals("list", result.get(0));
assertNotNull(actual); assertEquals(3, actual.size()); assertEquals("value00", actual.get(0).get("a")); assertEquals("value01", actual.get(1).get("a")); assertEquals("value02", actual.get(2).get("a"));
assertEquals("test1", result[0]); assertEquals("test2", result[1]); assertEquals("test3", result[2]);
assertNotNull(dvo); assertEquals(exception, dvo.getThrowable());
assertNull(resultHashValue);
assertEquals("TERASOLUNA ", result);
assertEquals(InvocationTargetException.class, e.getClass());
assertEquals(PlainFileLineWriter.class, fileLineWriter.getClass()); assertSame(fileName, ReflectionTestUtils.getField(fileLineWriter, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(fileLineWriter, "clazz")); assertSame(columnFormatterMap, ReflectionTestUtils.getField( fileLineWriter, "columnFormatterMap"));
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertEquals(0, pointer.getLength());
assertNotNull(result);
assertEquals(" TERASOLUNA", result);
assertEquals("testException", throwWord); assertNull(errorCode); assertEquals("a", options[0]); assertEquals("b", options[1]); assertEquals("c", options[2]);
assertThat(logger.getLoggingEvents(), is(asList( warn("[WAL025008] MessageAccessor setting is not specified. it will be skipped. tg:[main] t:[main]")))); assertTrue(true);
assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName()); assertTrue(e.getCause() instanceof InvocationTargetException);
assertEquals(null, result);
assertThat(status, is(234)); assertThat(logger.getLoggingEvents(), is(asList(warn( "[WAL025010] The BLogic execution continues without an ExceptionHandler."))));
assertEquals(0, columns.length);
assertTrue(be.getCause() instanceof InterruptedException); assertTrue(logger.getLoggingEvents() .get(0) .getThrowable() .get() instanceof InterruptedException); assertEquals( "[EAL025054] When the job is waiting for a available worker thread, it has been interrupted. jobSequenceId:0000000001", logger.getLoggingEvents().get(0).getMessage());
assertNotNull(result); assertEquals(methodName, result);
assertTrue(b); assertEquals("", template.getJndiNameToUse()); assertEquals("return", result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertEquals("", str);
assertNotNull(result);
assertFalse(result);
assertEquals(0, queue.size()); assertEquals(obj1.getValue(), objPeek.getValue());
assertEquals(sql, sqlReturn);
assertNull(result);
assertEquals("testException", throwWord); assertNull(errorCode); assertNull(options[0]); assertNull(options[1]); assertNull(options[2]);
assertEquals("classpath/TO_UPPER/to_upper.xml", target.getBeanFileName(batchJobData));
assertEquals("\\"aa,a\\",\\"aa\\"\\"a\\",\\"aaa\\"", result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse()); assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal JNDI context name.")))); assertEquals(NamingException.class.getName(), e.getCause() .getClass().getName());
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("123.456", listResult.get(0)); assertEquals("12.34", listResult.get(1)); assertEquals("1.2", listResult.get(2));
assertEquals("abc", result);
assertNull(result);
assertEquals(0, queue.size()); assertNull(objResult);
assertThat(ctx.getBean("B000001BLogic"), is(notNullValue()));
assertEquals("", result);
assertEquals("", resultString);
assertNotNull(result); assertSame(fields, result);
assertTrue(set.contains(result.nextElement())); assertTrue(set.contains(result.nextElement())); assertFalse(result.hasMoreElements());
assertEquals("TERASOLUNA ", result);
assertEquals(10, semaphore.availablePermits());
assertEquals("0000000001", batchJobData.getJobAppCd());
assertSame(BeanPointerEx.class, result.getClass()); assertSame(nodePointer, result.getParent()); assertSame(qName, result.getName()); assertSame(bean, ReflectionTestUtils.getField(result, "bean"));
assertNotNull(result); assertEquals("Message not found. CODE:[]", result.getMessage());
assertEquals(FixedFileLineWriter.class.getName(), fileLineWriter .getClass().getName()); assertSame(fileName, ReflectionTestUtils.getField(fileLineWriter, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(fileLineWriter, "clazz")); assertSame(columnFormatterMap, ReflectionTestUtils.getField( fileLineWriter, "columnFormatterMap"));
assertFalse(StringUtil.isZenHankakuSpace(input));
assertTrue(result);
assertEquals("illegalArgument: variantColumn is empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: variantColumn is empty."))));
assertNotNull(result); assertEquals(3, result.length); assertEquals(String[].class, result[0]); assertEquals(Integer.class, result[1]); assertEquals(Boolean.class, result[2]);
assertNotNull(result); assertEquals(BigDecimal.valueOf(12345600, 2), result); assertSame(dfMap, ReflectionTestUtils.getField(decimalColumnParser, "dfMap")); assertEquals(1, dfMap.size()); assertTrue(dfMap.containsKey(columnFormat)); assertSame(dfMapValue, formatLocal);
assertEquals(srcFile, argGetAbsolutePath); assertEquals(srcFile, argDeleteFile);
assertTrue(ds.cachedMergedProperties.isEmpty()); assertTrue(ds.cachedMessageFormats.isEmpty()); assertTrue(dbmr.isRead); assertEquals(1, ds.list.size()); assertSame(db1, ds.list.get(0));
assertNull(manager.getMessagePattern("hoge", null)); assertNull(manager.getMessagePattern(null, null));
assertEquals("illegalArgument: messageColumn is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: messageColumn is null or empty."))));
assertEquals(expected, result); assertEquals(2, map.size()); assertSame(cache, map.get("yyyy/MM/dd")); assertNotNull(map.get("yyyy-MM-dd"));
assertNotNull(result); assertEquals("", result);
assertTrue(StringUtil.isZenHankakuSpace(input));
assertEquals("\\"aaa\\",\\"aaa\\",\\"aaa\\"", resutl);
assertEquals(target.readLine(), ".,/@"); assertEquals(target.readLine(), "<>"); assertEquals(target.readLine(), "");
assertTrue(FileUtil.removeSessionDirectory(input));
assertEquals("aaa", testResult);
assertTrue(result); assertEquals("stat4", ((TransactionStatusStub) statList.get(0)) .getName()); assertEquals("stat3", ((TransactionStatusStub) statList.get(1)) .getName()); assertEquals("stat2", ((TransactionStatusStub) statList.get(2)) .getName()); assertEquals("stat1", ((TransactionStatusStub) statList.get(3)) .getName());
assertEquals(expected, result); assertEquals(1, map.size()); assertSame(cache, map.get("yyyyMMdd"));
assertEquals("abcdef", result);
assertFalse(result);
assertNotNull(resultMap); assertSame(columnFormatterMap, resultMap);
assertEquals(0, locales.size());
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertEquals(0, logger.getLoggingEvents().size());
assertTrue(e.getMessage().endsWith("test02.txt is not exist."));
assertFalse(result);
assertNull(result);
assertTrue(result);
assertTrue(b); assertEquals("", template.getJndiNameToUse());
assertSame(thread, result);
assertEquals("", str);
assertEquals("", throwWord); assertEquals("", errorCode);
assertEquals("test1test2", result);
assertEquals("aaabbb", result);
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.WARN, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertEquals(1, result);
assertEquals("19700101", testResult);
assertEquals(3, pointer.getLength());
assertThat(e.getMessage(), is(endsWith( "[EAL025003] Bean definition default file name is not set. please confirm batch.properties.")));
assertFalse(result);
assertEquals(1, result.length); assertEquals("collection", result[0]);
assertEquals(hope.length, result.length); assertEquals(hope[0], result[0]);
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse()); assertEquals("abc", template.getObj());
assertEquals("0000000001", batchJobListResult.getJobSequenceId());
assertEquals("abc", returnCode);
assertNull(result);
assertTrue(e.getCause() instanceof InterruptedException);
assertEquals("Abc", result);
assertTrue(result);
assertSame(columnParserMap, result);
assertEquals(3, result.length); assertEquals(hope[i], result[i]);
assertSame(errors, resultErorrs.getErrors()); assertSame(bean, validator.getParameterValue("java.lang.Object")); assertEquals(beanName, validator.getFormName());
assertNotNull(result); assertEquals(1, result.length); assertEquals(Map.class, result[0]);
assertEquals("classpath/jobAppCd.xml", target.getBeanFileName(batchJobData));
assertEquals(hope.length, result.length); assertEquals(hope[0], result[0]);
assertEquals(" TERASOLUNA", result);
assertNull(result);
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("MD5").digest("".getBytes()), resultHashValue));
assertTrue(result.contains("testB")); assertFalse(result.contains("testA"));
assertNotNull(result);
assertEquals(endFileStopper.endMonitoringFileName, "/tmp/batch_terminate_file"); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025025] It will be checked to stop AsyncBatchExecutor at a certain interval. the end monitoring file path:/tmp/batch_terminate_file"))));
assertSame(Thread.currentThread().getContextClassLoader(), MessageManager.getClassLoader());
assertNull(batchJobListResult);
assertFalse(result);
assertEquals(3, result.size()); assertEquals("foo", result.get(0)); assertEquals("bar", result.get(1)); assertEquals("baz", result.get(2));
assertEquals("testException", throwWord); assertNull(errorCode); assertNull(options[0]);
assertSame(mf, result); assertTrue(ds.isRead_A1);
assertEquals("0000000001", batchJobListResult.getJobSequenceId());
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertSame(MessageManager.class.getClassLoader(), MessageManager .getClassLoader());
assertEquals(0, result);
assertEquals(srcFile, argListGetAbsolutePath); assertEquals(srcFile, argDeleteFile);
assertNotNull(result);
assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal arguments error : name=null"))));
assertFalse(result);
assertNull(resultString);
assertNotNull(result); assertEquals(3, result.length); assertEquals(String[].class, result[0]); assertEquals(Integer.class, result[1]); assertEquals(Boolean.class, result[2]);
assertSame(validatorException, resultValidatorException);
assertEquals("[ERROR][TLoggerTest] hoge", logReader.readLine());
assertNotNull(result); assertSame(methods, result);
assertTrue(e instanceof FileException); assertEquals("Reader control operation was failed.", e.getMessage()); assertTrue(e.getCause() instanceof IOException);
assertEquals(hope, result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("1", listResult.get(0)); assertEquals("2", listResult.get(1)); assertEquals("3", listResult.get(2));
assertNotNull(handler); assertEquals(null, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertTrue(AopUtils.isJdkDynamicProxy(proxy)); assertSame(ProxyUtil_JavaBeanStub01.class, result);
assertEquals(ArrayBlockingQueue.class, trailerQueue_object.getClass()); assertEquals(3, trailerQueue.size()); assertEquals("Line data 3", trailerQueue.poll()); assertEquals("Line data 4", trailerQueue.poll()); assertEquals("Line data 5", trailerQueue.poll());
assertEquals(String[].class, BeanUtil.getBeanPropertyType(bean, "testArray"));
assertEquals("000A64", result);
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertNotNull(result); assertEquals("noarray", result);
assertEquals(2, result.length); assertEquals(hope[i], result[i]);
assertFalse(result);
assertFalse(ret); assertSame(obj1, comparator.obj1); assertSame(obj2, comparator.obj2);
assertThat(result, is("B000001"));
assertEquals("Abc", result);
assertEquals(1, resultHResults.size()); assertSame(validatorResult, resultHResults.get("test"));
assertEquals(IllegalArgumentException.class.getName(), e.getCause() .getClass().getName());
assertNotNull(e);
assertNotNull(result); assertEquals("1000000", result);
assertEquals(1, result);
assertNotNull(result); assertEquals("Message not found. CODE:[test]", result);
assertEquals("00/0A/64", result);
assertEquals("19700101", testResult);
assertNotNull(config.getDaoCollectorPrePostProcess()); assertEquals(daoCollectorPrePostProcess2, config .getDaoCollectorPrePostProcess());
assertEquals("testtest", str);
assertNull(resultHashValue);
assertTrue(commonsValidator.isValidate); assertSame(obj, validator.obj); assertSame(errors, validator.errors);
assertEquals(BufferedReader.class, reader.getClass()); assertEquals(EncloseCharLineFeed1LineReader.class, reader02.getClass());
assertEquals("", result);
assertSame(DynamicPointerEx.class, result.getClass()); assertSame(nodePointer, result.getParent()); assertSame(qName, result.getName()); assertSame(bean, ReflectionTestUtils.getField(result, "bean"));
assertEquals(obj1, objPoll); assertEquals(1, sizeBefore - sizeAfter);
assertEquals("stat4", ((TransactionStatusStub) statusList.get(0)) .getName()); assertEquals("stat3", ((TransactionStatusStub) statusList.get(1)) .getName()); assertEquals("stat2", ((TransactionStatusStub) statusList.get(2)) .getName()); assertEquals("stat1", ((TransactionStatusStub) statusList.get(3)) .getName());
assertEquals("java.lang.String", obj.getClass().getName());
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025055] This job status at the job control table is already updated by another worker. It will be skip. jobSequenceId:00000001 expectedCurAppStatus:0 actualCurAppStatus:3 changeTo:1"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertNull(result);
assertNotNull(resultBoolean); assertTrue(resultBoolean);
assertEquals("classpath/to_lower/TO_LOWER.xml", target.getBeanFileName(batchJobData));
assertEquals("00", result);
assertFalse(StringUtil.isWhitespace(input));
assertEquals(target.readLine(), "1111"); assertEquals(target.readLine(), "2222"); assertEquals(target.readLine(), "3333"); assertEquals(target.readLine(), "4444"); assertEquals(target.readLine(), "5555"); assertEquals(target.readLine(), "");
assertEquals(Map.class, result);
assertNotNull(result); assertTrue(result instanceof Object[]); assertEquals(0, arrayResult.length);
assertEquals(3, i);
assertNull(resultString);
assertEquals(String[][].class, result);
assertEquals("illegalArgument: countryColumn is empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: countryColumn is empty."))));
assertEquals(1, pointer.getLength());
assertTrue(result);
assertFalse(st.contains(".properties"));
assertEquals("000A64", result);
assertEquals("", resultString);
assertFalse(result);
assertEquals(1, result);
assertTrue(result);
assertTrue(StringUtil.isWhitespace(input));
assertEquals(String[].class, actual);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertEquals("1", listResult.get(0));
assertTrue(e instanceof FileException); assertEquals("Reader control operation was failed.", e.getMessage()); assertTrue(e.getCause() instanceof IOException);
assertEquals("", result);
assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal arguments error : name=null"))));
assertEquals("", result);
assertThat(status, is(234)); assertThat(logger.getLoggingEvents(), is(asList(warn( "[WAL025010] The BLogic execution continues without an ExceptionHandler."))));
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse()); assertEquals("abc", template.getObj()); assertEquals(NamingException.class.getName(), e.getCause() .getClass().getName()); assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal JNDI context name."))));
assertEquals(hope, result);
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse());
assertFalse(result);
assertEquals("BatchJobManagementParam[jobSequenceId=a,forUpdate=true]", p.toString());
assertSame(validatorException, e.getCause());
assertFalse(queue.isEmpty());
assertEquals("java.util.Locale", obj.getClass().getName()); assertEquals("MEXICO", resultObj.getCountry()); assertEquals("es", resultObj.getLanguage());
assertEquals("jobAppCd.xml", target.getBeanFileName(batchJobData));
assertTrue(pointer.isCollection());
assertThat(e.getMessage(), is( "[EAL025061] Cannot create CacheableApplicationContextResolverImpl, because either cacheManager is not injected or Cache instance is not found by key:businessContext"));
assertEquals(Character.MIN_VALUE, result);
assertEquals("BatchJobListResult[jobSequenceId=a]", r.toString());
assertEquals(1, result.size()); assertEquals("", result.get(0));
assertSame(list, listReturn);
assertEquals( "[Assertion failed] - this argument is required; it must not be null", e.getMessage());
assertFalse(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertSame(re, e); assertThat(logger.getLoggingEvents(), is(asList(info( "[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertEquals(Thread.NORM_PRIORITY, target.getPriority());
assertNotNull(actual); assertEquals(3, actual.size()); assertEquals("value00", actual.get(0).get("a")); assertEquals("value01", actual.get(1).get("a")); assertEquals("value02", actual.get(2).get("a"));
assertNotNull(drh);
assertEquals(-1, ch2);
assertNull(result);
assertFalse(result);
assertEquals(0, asyncJobOperator.start(new String[] {}));
assertTrue( MessageDigest.isEqual( MessageDigest.getInstance("MD5").digest("abc".getBytes()), resultHashValue));
assertTrue(iterator.isCloseFileCalled());
assertFalse(jobStatusChanger.changeToStartStatus("00000001")); assertSame(re, e); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:1"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertEquals(1, trailer.size()); assertEquals("trailer data", trailer.get(0)); assertTrue((Boolean) ReflectionTestUtils.getField(plainFileLineIterator, "readTrailer"));
assertTrue(commonsValidator.isValidate); assertSame(null, validator.obj); assertSame(null, validator.errors);
assertNotNull(handler); assertEquals(ValidationErrorLoglevel.ERROR, handler.logLevel); assertEquals(ValidateErrorStatus.SKIP, status);
assertEquals("testException", throwWord); assertEquals("", errorCode); assertNull(options[0]); assertNull(options[1]); assertNull(options[2]); assertNull(options[3]);
assertTrue(result.contains("test0")); assertTrue(result.contains("test")); assertTrue(result.contains(""));
assertSame(ex, dae);
assertNotNull(result);
assertNotNull(result);
assertTrue(b); assertEquals("java:comp/env/abc", template.getJndiNameToUse()); assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal JNDI context name.")))); assertEquals(NamingException.class.getName(), e.getCause() .getClass().getName());
assertEquals(750, factory.getOrder());
assertEquals("", result);
assertEquals(0, i);
assertTrue(actual);
assertEquals(0, i);
assertEquals("", dbmReturn.getCode()); assertEquals("", dbmReturn.getLanguage()); assertEquals("", dbmReturn.getCountry()); assertEquals("", dbmReturn.getVariant()); assertEquals("", dbmReturn.getMessage());
assertNull(result);
assertEquals(String.class, actual);
assertNull(batchJobListResult);
assertSame(errors, ReflectionTestUtils.getField(validation, "errors"));
assertEquals(Object.class, actual); assertThat(logger.getLoggingEvents(), is(asList(trace( "Concrete type of Type(E) was " + "not found in ancestorList([java.util.AbstractList<E>, " + "java.util.List<E>])"))));
assertNotNull(actual); assertTrue(actual.isEmpty());
assertEquals(null, BeanUtil.getBeanPropertyType(bean, "testNull"));
assertEquals("aaa,aaa,aaa", resutl);
assertFalse(asyncBatchStopper.canStop()); assertThat(logger.getLoggingEvents(), IsNot.not(asList(info( "[IAL025011] Detected the end file. This AsyncBatchExecutor processing will complete. path:/tmp/batch_terminate_file"))));
assertEquals(hope, result);
assertFalse(queue.isEmpty());
assertEquals("", result);
assertTrue(result);
assertEquals(0, result.length);
assertTrue(result);
assertEquals("Line data 1", result); assertEquals(1, ReflectionTestUtils.getField(plainFileLineIterator, "currentLineCount"));
assertNotNull(result); assertEquals(1, result.size()); assertEquals(GenericsUtil_CallableStub03.class .getGenericInterfaces()[0], result.get(0));
assertEquals(4, result.length); assertEquals(hope[i], result[i]);
assertNull(target.parent);
assertEquals("TERASOLUNA ", result);
assertNotNull(result); assertEquals("\\\\1,000,000.00", result);
assertNotNull(actual); assertEquals(3, actual.size()); assertEquals("value00", actual.get(0).get("a")); assertEquals("value01", actual.get(1).get("a")); assertEquals("value02", actual.get(2).get("a"));
assertTrue(result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size());
assertSame(message, ds.dbm); assertSame(locale, ds.locale2); assertSame(props, ds.messages);
assertNull(BeanUtil.getBeanProperty(bean, "param2"));
assertEquals(expected, result); assertEquals(1, map.size()); assertNotNull(map.get("yyyy-MM-dd"));
assertEquals(" TERASOLUNA", result);
assertEquals("test01", ReflectionTestUtils.getField(daoImpl, "countryColumn"));
assertNotNull(result); assertEquals(fileQueryDAO, result);
assertEquals(NoSuchMethodException.class.getName(), e.getCause() .getClass().getName());
assertFalse(result);
assertEquals(String[].class, result);
assertTrue(result.contains("test0")); assertTrue(result.contains("test1")); assertTrue(result.contains("test"));
assertEquals( "[EAL025056] [Assertion failed] - AsyncJobLauncherImpl requires to set executor.jobTerminateWaitInterval. please confirm the settings.", e.getMessage());
assertEquals("", result);
assertFalse(result);
assertThat(logger.getLoggingEvents(), is(asList(error( "Illegal arguments error : name=null, obj=abc"))));
assertThat(asyncJobLauncher.terminated(mockThreadPoolExecutor), is(true));
assertEquals("abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz", resultString);
assertEquals("", testResult);
assertNull(result);
assertFalse(result);
assertTrue(ds.cachedMergedProperties.isEmpty()); assertTrue(ds.cachedMessageFormats.isEmpty()); assertTrue(dbmr.isRead); assertEquals(0, ds.list.size());
assertEquals(columnIndex, result);
assertNotNull(result); assertEquals(0, result.getErrorCount());
assertEquals(0, ReflectionTestUtils.getField(fileLineIterator, "currentLineCount"));
assertFalse(pointer.isCollection());
assertEquals("test", str);
assertEquals("BatchJobListParam[jobAppCd=cd,curAppStatusList=[a, b]]", p .toString());
assertEquals("testException", throwWord); assertEquals(null, errorCode); assertEquals("", options[0]); assertEquals("", options[1]); assertEquals("", options[2]);
assertEquals(target.readLine(), ".,/@"); assertEquals(target.readLine(), "<>"); assertEquals(target.readLine(), "");
assertEquals(ArrayList.class, header_object.getClass()); assertEquals(0, header.size());
assertFalse(target.isDaemon());
assertNotNull(result); assertSame(lineFeedChar, result);
assertEquals(PlainFileLineIterator.class, result.getClass()); assertSame(fileName, ReflectionTestUtils.getField(result, "fileName")); assertSame(clazz, ReflectionTestUtils.getField(result, "clazz")); assertSame(columnParserMap, ReflectionTestUtils.getField(result, "columnParserMap"));
assertSame(ex, e);
assertEquals("default", str);
assertFalse(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertSame(runtimeException, e); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:2"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertNull(str);
assertSame(transactionSystemException, e); assertEquals(Level.ERROR, logger.getLoggingEvents().get(0).getLevel()); assertEquals( "[EAL025063] Connection retry count exceeded limit. maxRetryCount:0", logger.getLoggingEvents().get(0).getMessage());
assertEquals(0, result.length);
assertEquals("", resultString);
assertEquals(0, result.size());
assertFalse(result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(3, listResult.size()); assertEquals("12.3", listResult.get(0)); assertEquals("1.2", listResult.get(1)); assertEquals("1.0", listResult.get(2));
assertNull(result);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertTrue((Boolean) listResult.get(0));
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("", options[0]); assertEquals("", options[1]);
assertFalse(result);
assertEquals(" TERASOLUNA", result);
assertNull(result);
assertEquals("PARAM2", ReflectionTestUtils.getField(bean, "param2"));
assertTrue(result);
assertEquals(0L, drh.dataCount.get());
assertNotNull(result); assertTrue(result instanceof DecimalFormat); assertEquals(pattern, DecimalFormat.class.cast(result).toPattern());
assertEquals("test", str);
assertFalse(jobStatusChanger.changeToEndStatus("00000001", blogicResult)); assertThat(logger.getLoggingEvents(), is(asList(debug( "[DAL025023] Try to update status jobSequenceId:00000001 changeStatus:2"), error("[EAL025025] Job status update error. jobSequenceId:00000001 blogicStatus:255"), info("[IAL025023] Skipped processing of updating the job status. This transaction will be attempt to roll-back. jobSequenceId:00000001"))));
assertTrue(set.contains(result.nextElement())); assertFalse(result.hasMoreElements());
assertEquals(0, result.length);
assertEquals(String[].class, actual);
assertTrue(result.isEmpty());
assertNull(result);
assertEquals("property.test001.id.0", enume.nextElement()); assertFalse(enume.hasMoreElements());
assertNull(result);
assertNotNull(dvo); assertEquals(hoge, dvo.getValue());
assertNull(factory.createNodePointer(nodePointer, qName, bean));
assertEquals("testException", throwWord); assertNull(errorCode); assertEquals("", options[0]); assertEquals("a", options[1]);
assertEquals(-1, ch2);
assertFalse(result);
assertNull(result); assertTrue(ds.isRead_A1);
assertEquals("", result);
assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName()); assertTrue(e.getCause() instanceof NoSuchMethodException);
assertNotNull(result); assertTrue(result instanceof List); assertEquals(1, listResult.size()); assertEquals("123.456", listResult.get(0));
assertNotNull(ex.getDataValueObject()); assertEquals(DataValueObject.class, ex.getDataValueObject().getClass());
assertNotNull(info); assertTrue(info.startsWith("Java memory info : "));
assertTrue(blogic instanceof BLogic);
assertEquals("testException", throwWord); assertEquals("test01", errorCode); assertEquals("a", options[0]); assertEquals("", options[1]); assertNull(options[2]);
assertEquals("PARAM2", BeanUtil.getBeanProperty(bean, "param2"));
assertNotNull(result); assertTrue(result instanceof List); assertEquals(0, listResult.size());
assertEquals(Integer.class, result);
assertEquals("illegalArgument: codeColumn is null or empty.", e .getMessage()); assertThat(logger.getLoggingEvents(), is(asList(error( "illegalArgument: codeColumn is null or empty."))));
assertNotNull(e);
assertEquals(3, result.size()); assertEquals("foo", result.get(0)); assertEquals("bar", result.get(1)); assertEquals("baz", result.get(2));
assertFalse(enume.hasMoreElements());
assertEquals("aaa,aaa,aaa", resutl);
assertEquals("0000000001", batchJobListResult.getJobSequenceId());
assertEquals(3, result.length); assertEquals("collection", result[0]); assertEquals(1, result[1]); assertEquals("something", mapResult.get("foo"));
assertEquals(expected, result); assertEquals(1, map.size()); assertSame(cache, map.get("yyyy-MM-dd"));
assertFalse(a.isNormal(next));
assertTrue(s.toString(), cf.ignore(s));
assertEquals(type, f.getClass()); assertEquals(RuntimeException.class, expect.getCause().getClass());
assertTrue(LogManagerProperties.isReflectionClass(Constructor.class.getName())); assertTrue(LogManagerProperties.isReflectionClass(Method.class.getName()));
assertTrue(r1.getSequenceNumber() < r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() < r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() < r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() < r2.getSequenceNumber());
assertTrue(f.getTail((Handler) null).length() != 0); assertTrue(f.getTail((Handler) null).length() != 0);
assertEquals(InterruptedException.class, reduced.getClass());
assertFalse(a.isNormal((Throwable) null));
assertTrue(fmt, fmt.contains(Integer.toString(width))); assertTrue(String.valueOf(width), width < Integer.MAX_VALUE / 4); assertTrue(result, result.length() <= width + padding); assertTrue(result, result.endsWith(LINE_SEP)); assertTrue(result.length() + ", " + (width + padding), result.length() == width + padding); assertTrue(result, result.endsWith(LINE_SEP));
assertTrue(n, n.contains("$")); assertFalse(s.toString(), cf.ignore(s));
assertEquals(k, f.getClass());
assertNull(cf.toAlternate((String) null));
assertEquals(result, f.toString()); assertEquals(result, f.getTail((Handler) null)); assertFalse(result.equals(f.toString()));
assertTrue(s.toString(), cf.ignore(s));
assertEquals(type, c.getClass()); assertEquals(RuntimeException.class, expect.getCause().getClass());
assertSame(t, e);
assertEquals(r1.getLevel(), r2.getLevel()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertEquals("section number", "1.1", b.getSection()); assertEquals("getByteArray.getNewBytes", content, result); assertEquals("getByteArrayInputStream", content, result);
assertTrue(s.toString(), cf.ignore(s));
assertEquals(type, l.getClass());
assertEquals("atom", r.readAtom()); assertEquals("atom", r.readAtom());
assertEquals(Level.SEVERE.getLocalizedName(), result);
assertEquals("text/x-test", mbp.getContentType()); assertEquals("quoted-printable", mbp.getEncoding()); assertEquals("test part", getString(mbp.getInputStream()));
assertEquals(Object.class.getSimpleName(), result);
assertEquals(Object.class.getSimpleName(), result);
assertFalse(s.toString(), cf.ignore(s));
assertFalse(f.getClass().getName().equals(format)); assertEquals(f.getClass().getName(), f.finish(format));
assertEquals(Error.class, reduced.getClass());
assertEquals("atom", r.readAtomString()); assertEquals("atom", r.readAtomString());
assertEquals("section number", "1.1", b.getSection()); assertEquals("getByteArray.getNewBytes", content, result); assertEquals("getByteArrayInputStream", content, result);
assertNotNull(e.getMessage(), e.getMessage()); assertTrue(result, result.startsWith("CompactFormatterTest")); assertTrue(result, result.contains("testFormatBackTrace")); assertTrue(result, Character.isDigit(result.charAt(result.length() - 2)));
assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertEquals(type, f.getClass()); assertEquals(RuntimeException.class, expect.getCause().getClass());
assertTrue(s.toString(), cf.ignore(s));
assertEquals(a, SeverityComparator.getInstance()); assertEquals(a.getClass(), SeverityComparator.getInstance().getClass()); assertEquals(a.hashCode(), SeverityComparator.getInstance().hashCode());
assertEquals("en-US", LogManagerProperties.toLanguageTag(Locale.US)); assertEquals("en", LogManagerProperties.toLanguageTag(Locale.ENGLISH)); assertEquals("", LogManagerProperties.toLanguageTag(new Locale("", "", ""))); assertEquals("en-US-slang", LogManagerProperties.toLanguageTag(l)); assertEquals("en--slang", LogManagerProperties.toLanguageTag(l));
assertFalse(contains(mp, key, null)); assertEquals("value", mp.put(key, "newValue")); assertFalse(contains(mp, key, "value")); assertTrue(contains(mp, key, "newValue")); assertEquals("newValue", mp.remove(key)); assertEquals("defValue", mp.remove(key)); assertEquals("empty", mp.put("", ""));
assertFalse(empty.match("text/plain")); assertTrue(plain.match("text/plain")); assertFalse(empty.match(plain)); assertFalse(plain.match(empty)); assertTrue(plain.match("text/*")); assertTrue(text.match(plain)); assertTrue(plain.match(text));
assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertTrue(result, result.startsWith(record.getMessage())); assertTrue(result, result.endsWith(LINE_SEP));
assertNull(a.apply(null));
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertTrue(s.toString(), cf.ignore(s));
assertEquals(InterruptedException.class, reduced.getClass());
assertFalse(contains(mp, key, null)); assertTrue(mp.containsKey(key)); assertTrue(contains(mp, key, "value")); assertEquals("newValue", mp.get(key)); assertTrue(mp.containsKey(""));
assertTrue(a.compareThrowable(tc1, tc2) > 0); assertTrue(a.compareThrowable(tc2, tc1) < 0); assertTrue(a.compareThrowable(tc1, tc2) > 0); assertTrue(a.compareThrowable(tc2, tc1) < 0);
assertFalse(folder.isOpen());
assertFalse(a.isNormal(createEvilThrowable(Exception.class, 7)));
assertFalse(contains(mp, key, null)); assertEquals("value", mp.setProperty(key, "newValue")); assertFalse(contains(mp, key, "value")); assertTrue(contains(mp, key, "newValue")); assertEquals("newValue", mp.remove(key)); assertEquals("defValue", mp.remove(key)); assertEquals("empty", mp.setProperty("", ""));
assertEquals(InterruptedException.class, reduced.getClass());
assertTrue(result, result.startsWith("a\\ud801\\udc00")); assertTrue(result, result.endsWith("|Thr" + LINE_SEP));
assertEquals(root, reduced);
assertFalse(contains(mp, key, null)); assertEquals("value", mp.remove(key)); assertFalse(contains(mp, key, "value")); assertEquals("newValue", mp.remove(key)); assertEquals("empty", mp.remove(""));
assertEquals(record.getLevel().getLocalizedName(), result);
assertTrue(c.getClass() != r.getClass()); assertFalse(r instanceof ErrorComparator); assertFalse(r instanceof AscComparator); assertFalse(r instanceof DescComparator); assertTrue(r instanceof DescComparator); assertTrue(r instanceof DescComparator);
assertNotSame(a, b); assertNotNull(a); assertFalse(a.equals(null)); assertNotNull(b); assertFalse(b.equals(null)); assertTrue(a.equals(a)); assertTrue(b.equals(b)); assertTrue(a.equals(b)); assertTrue(b.equals(a));
assertTrue(s.toString(), cf.ignore(s));
assertEquals(type, f.getClass()); assertEquals(RuntimeException.class, expect.getCause().getClass());
assertNotNull(a.toString()); assertEquals(a.toString(), a.toString());
assertEquals(r1.getLevel(), r2.getLevel()); assertEquals(r1.getSequenceNumber(), r2.getSequenceNumber()); assertEquals(r1.getMillis(), r2.getMillis()); assertNull(r1.getThrown()); assertNull(r1.getThrown()); assertNull(r1.getThrown());
assertNotNull(cf.apply(createEvilThrowable()));
assertTrue(result, result.startsWith(record.getMessage())); assertTrue(result, result.contains("|")); assertTrue(result, result.contains(Throwable.class.getSimpleName())); assertTrue(result, result.contains(CompactFormatterTest.class.getSimpleName())); assertTrue(result, result.contains("testFormatWithMessageAndThrown")); assertTrue(result, result.contains(String.valueOf( record.getThrown().getStackTrace()[0].getLineNumber()))); assertTrue(result, result.endsWith(LINE_SEP));
assertFalse(s.toString(), cf.ignore(s));
assertEquals("text/x-test", msg.getContentType()); assertEquals("quoted-printable", msg.getEncoding()); assertEquals("test message", getString(msg.getInputStream()));
assertNotNull(e.getMessage(), e.getMessage()); assertTrue(result, result.startsWith(e.getCause().getClass().getSimpleName())); assertTrue(result, result.contains(cf.formatMessage(record.getThrown()))); assertTrue(result, result.endsWith(cf.formatBackTrace(record)));
assertNotNull(manager);
assertEquals(Object.class.getSimpleName(), result);
assertTrue(s.toString(), cf.ignore(s));
assertEquals("", cf.toAlternate(LINE_SEP));
assertFalse(result, record.getSourceClassName().equals(record.getSourceMethodName())); assertTrue(result, result.startsWith(Object.class.getSimpleName())); assertTrue(result, result.endsWith(record.getSourceMethodName()));
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertNotNull(e.getMessage(), e.getMessage()); assertEquals(result, Exception.class.getSimpleName());
assertSame(first, f.apply(first, second));
assertNotSame(a, b); assertTrue(a.equals(b)); assertTrue(b.equals(a)); assertEquals(a.hashCode(), b.hashCode());
assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertEquals(k, c.getClass());
assertFalse(contains(mp, key, null)); assertEquals("value", mp.getProperty(key)); assertTrue(contains(mp, key, "value")); assertFalse(clone instanceof LogManagerProperties); assertEquals(Properties.class, clone.getClass()); assertNotSame(clone, parent); assertNotSame(clone, mp); assertEquals(mp.size(), clone.size()); assertTrue(clone.equals(mp));
assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber());
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertEquals("atom]", r.readAtomString());
assertEquals(result, LINE_SEP);
assertNull(new CompactFormatter().apply(null));
assertSame(second, f.apply(first, second));
assertTrue(s.toString(), cf.ignore(s));
assertEquals(0, a.compareThrowable((Throwable) null, (Throwable) null)); assertTrue(a.compareThrowable(new Throwable(), (Throwable) null) > 0); assertTrue(a.compareThrowable((Throwable) null, new Throwable()) < 0);
assertFalse(s.toString(), cf.ignore(s));
assertEquals(r1.getLevel(), r2.getLevel()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown()); assertNull(r2.getThrown());
assertTrue(n, n.contains("$")); assertFalse(s.toString(), cf.ignore(s));
assertTrue(r1.getSequenceNumber() < r2.getSequenceNumber()); assertNull(r1.getThrown()); assertNull(r2.getThrown());
assertNotNull(e.getMessage(), e.getMessage()); assertTrue(result, result.startsWith("CompactFormatterTest")); assertTrue(result, result.contains("testFormatBackTrace"));
assertEquals("mes|Throwable", result);
assertEquals(type, a.getClass()); assertEquals(RuntimeException.class, expect.getCause().getClass());
assertEquals(0, a.applyThenCompare((Throwable) null, (Throwable) null));
assertFalse(contains(mp, key, null)); assertEquals("value", mp.get(key)); assertTrue(contains(mp, key, "value")); assertEquals("newValue", mp.get(key)); assertEquals("empty", mp.get(""));
assertEquals(k, f.getClass());
assertEquals(k, a.getClass());
assertTrue(s.toString(), cf.ignore(s));
assertEquals(k, f.getClass());
assertEquals("mes\\u0020\\u0020\\u0020|Thr\\u0020\\u0020\\u0020", result);
assertTrue(s.toString(), cf.ignore(s));
assertThat(p.getFormatOptions()).isSameInstanceAs(options);
assertThat(b.toString()) .isEqualTo( " original message: Foo=\'%s\'\\n" + " original arguments:\\n" + " bar\\n" + " metadata:\\n" + " count: 23\\n" + " id: test ID\\n" + " level: INFO\\n" + " timestamp (nanos): 123456789000\\n" + " class: com.google.FakeClass\\n" + " method: fakeMethod\\n" + " line number: 123");
assertThat(record.getMessage()).doesNotContain("UNUSED");
assertThat(unescapePrintf("Hello % World")).isEqualTo("Hello % World"); assertThat(unescapePrintf("Hello %")).isEqualTo("Hello %");
assertThat(record.getMessage()).isEqualTo("foo=FOO, bar=[ERROR: MISSING LOG ARGUMENT]");
assertThat(logEvent.asLoggingEvent().getLoggerName()).isEqualTo(data.getLoggerName());
assertThat(record.getLevel()).isEqualTo(Level.WARNING); assertThat(record.getMessage()).isEqualTo("literal message"); assertThat(record.getParameters()).isNull(); assertThat(record.getLoggerName()).isEqualTo(data.getLoggerName()); assertThat(record.getSourceClassName()).isEqualTo(data.getLogSite().getClassName()); assertThat(record.getSourceMethodName()).isEqualTo(data.getLogSite().getMethodName());
assertThat(platform.shouldForceLoggingImpl("logger.name", Level.INFO, false)).isTrue(); assertThat(platform.shouldForceLoggingImpl("logger.other.name", Level.INFO, false)).isFalse();
assertThat(options.validate(ALL_FLAGS, true)).isTrue(); assertThat(options.validate(givenFlags, true)).isTrue(); assertThat(options.validate(givenFlags, false)).isFalse(); assertThat(options.validate(FLAG_LEFT_ALIGN | FLAG_SHOW_ALT_FORM, true)).isFalse();
assertThat(levelMap.getLevel("com.google")).isEqualTo(Level.INFO); assertThat(levelMap.getLevel("java.lang")).isEqualTo(Level.WARNING); assertThat(levelMap.getLevel("java.lang.String")).isEqualTo(Level.FINE);
assertThat(message).contains("message: Hello World"); assertThat(message).contains("level: INFO"); assertThat(message).contains("Original Cause");
assertThat(unescapeBraceFormat("Hello \'")).isEqualTo("Hello "); assertThat(unescapeBraceFormat("Hello \\\\\'")).isEqualTo("Hello ");
assertThat(platform.getInjectedTagsImpl()).isEqualTo(TEST_TAGS);
assertThat(record.getThrown()).isSameInstanceAs(cause);
assertThat(options).hasWidth(-1); assertThat(options).hasPrecision(1234); assertThat(options).hasNoFlags();
assertThat(options).hasWidth(999999); assertThat(options).hasPrecision(-1); assertThat(options).hasNoFlags();
assertThat(nl).isAnyOf("\\n", "\\r", "\\r\\n");
assertThat(logger.atFine().isEnabled()).isFalse(); assertThat(logger.atInfo().isEnabled()).isTrue(); assertThat(logger.at(Level.WARNING).isEnabled()).isTrue();
assertThat(backend.getLoggedCount()).isEqualTo(1); assertThat(cause).hasMessageThat().isEqualTo("FULL"); assertThat(cause.getCause()).isNull(); assertThat(actualStack) .comparingElementsUsing(transforming(Object::toString, Object::toString, "toString")) .containsExactlyElementsIn(expectedStack) .inOrder();
assertThat(expected.getMessage()).contains("[%0s]");
assertThat(out.toString()).isEmpty(); assertThat(out.toString()).isEqualTo("Hello World");
assertThat(Tags.builder().build()).isSameInstanceAs(Tags.empty());
assertThat(library.caller.getClassName()).isEqualTo(UserCode.class.getName()); assertThat(library.caller.getMethodName()).isEqualTo("loggingMethod");
assertThat(logEvent.asLoggingEvent().getMessage()).isEqualTo("Hello World"); assertThat(logEvent.asLoggingEvent().getMessage()).isEqualTo("Hello Foo Bar");
assertThat(expected.getMessage()).contains("[%Q]");
assertThat(platform.getCurrentTimeNanosImpl()).isEqualTo(123456789000L);
assertThat(FastStackGetter.createIfSupported()).isNotNull();
assertThat(record.getMessage()).isEqualTo("b a a b [ERROR: UNUSED LOG ARGUMENTS]");
assertThat(record.getLevel()).isEqualTo(Level.WARNING); assertThat(record.getMessage()).isEqualTo("null"); assertThat(record.getParameters()).isNull();
assertThat(p0.getIndex()).isEqualTo(0); assertThat(p1.getIndex()).isEqualTo(1);
assertThat(logEvent.asLoggingEvent().getTimeStamp()).isEqualTo(123456L);
assertThat(FormatOptions.getDefault()).hasWidth(-1); assertThat(FormatOptions.getDefault()).hasPrecision(-1); assertThat(FormatOptions.getDefault()).hasNoFlags();
assertThat(record.getLevel()).isEqualTo(Level.FINE); assertThat(record.getMessage()).isEqualTo("Answer=42"); assertThat(record.getParameters()).isNull();
assertThat(SimpleParameter.buildFormatString(parseOptions("-20", false), STRING)) .isEqualTo("%-20s"); assertThat(SimpleParameter.buildFormatString(parseOptions("0#16", true), HEX)) .isEqualTo("%#016X"); assertThat(SimpleParameter.buildFormatString(parseOptions("+-20", false), DECIMAL)) .isEqualTo("%+-20d"); assertThat(SimpleParameter.buildFormatString(parseOptions(",020.10", false), FLOAT)) .isEqualTo("%,020.10f");
assertThat(options).hasWidth(1234); assertThat(options).hasPrecision(-1); assertThat(options).hasNoFlags();
assertThat(platform.getConfigInfoImpl()).contains(DefaultPlatform.class.getName()); assertThat(platform.getConfigInfoImpl()).contains("Clock: Mock Clock"); assertThat(platform.getConfigInfoImpl()).contains("BackendFactory: Mock Backend Factory"); assertThat(platform.getConfigInfoImpl()).contains("LoggingContext: Mock Logging Context"); assertThat(platform.getConfigInfoImpl()).contains("LogCallerFinder: Mock Caller Finder");
assertThat(e).hasCauseThat().isInstanceOf(IllegalArgumentException.class); assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("BAD CONTEXT");
assertThat(e).hasMessageThat().isEqualTo("User error");
assertThat(record.getMessage()).isEqualTo("value=null");
assertThat(SimpleMessageFormatter.toString("Hello World")).isSameInstanceAs("Hello World"); assertThat(SimpleMessageFormatter.toString(10)).isEqualTo("10"); assertThat(SimpleMessageFormatter.toString(false)).isEqualTo("false"); assertThat(SimpleMessageFormatter.toString(new String[] {"Foo", "Bar"})) .isEqualTo("[Foo, Bar]"); assertThat(SimpleMessageFormatter.toString(new int[] {1, 2, 3})).isEqualTo("[1, 2, 3]");
assertThat(expected.getMessage()).contains("[:x]");
assertThat(logger.getName()).isEqualTo(FluentLoggerTest.class.getName()); assertThat(logger.getBackend().getLoggerName()).isEqualTo(FluentLoggerTest.class.getName());
assertThat(logEvent.asLoggingEvent().getThrowableInformation().getThrowable()) .isSameInstanceAs(cause);
assertThat(expected.getMessage()).contains("[\']"); assertThat(expected.getMessage()).contains("[\'World]");
assertThat(unescapePrintf("")).isEqualTo(""); assertThat(unescapePrintf("Hello World")).isEqualTo("Hello World"); assertThat(unescapePrintf("Hello %% World")).isEqualTo("Hello % World"); assertThat(unescapePrintf("Hello %%%% World")).isEqualTo("Hello %% World"); assertThat(unescapePrintf("%% \'Hello {%%}{%%} World\' %%")) .isEqualTo("% \'Hello {%}{%} World\' %");
assertThat(out.toString()).isEqualTo(" #(+,-0123.456");
assertThat(record.getMessage()).contains("[ERROR: UNUSED LOG ARGUMENTS]");
assertThat(logEvent.asLoggingEvent().getMessage()) .isEqualTo("Foo=\'bar\' [CONTEXT count=23 id=\\"test ID\\" ]");
assertThat(record.getLevel()).isEqualTo(Level.WARNING); assertThat(record.getThrown()).isEqualTo(error); assertThat(record.getMessage()).contains("message: Hello World"); assertThat(record.getMessage()).contains("level: INFO"); assertThat(record.getMessage()).contains("Original Cause");
assertThat(options).hasWidth(-1); assertThat(options).hasPrecision(999999); assertThat(options).hasNoFlags();
assertThat(backend.isLoggable(Level.INFO)).isTrue(); assertThat(backend.isLoggable(Level.FINE)).isFalse();
assertThat(platform.getBackendImpl("logger.name")).isEqualTo(mockBackend);
assertThat(param.getValue().getIndex()).isEqualTo(1);
assertThat(backend.getLoggedCount()).isEqualTo(3);
assertThat(expected.getMessage()).contains("[%]");
assertThat(platform.getCallerFinderImpl()).isEqualTo(mockCallerFinder);
assertThat(expected.getMessage()).contains("unreferenced arguments [first missing index=31]");
assertThat(record.getLevel()).isEqualTo(Level.INFO); assertThat(record.getMessage()).isEqualTo("Hex=0x00c0de, Int=49374"); assertThat(record.getParameters()).isNull();
assertThat(logger.getBackend().getLoggerName()).isEqualTo("java.util.Map.Entry");
assertThat(logger.getBackend().getLoggerName()).isEqualTo("foo.bar.Baz");
assertThat(options).areNotValidFor(fc); assertThat(options).areNotValidFor(fc);
assertThat(toString).contains(" message: Answer=42"); assertThat(toString).contains(" arguments: <none>"); assertThat(toString).contains(" original message: Answer=%d"); assertThat(toString).contains(" message: Literal String"); assertThat(toString).contains(" arguments: <none>"); assertThat(toString).contains(" original message: Literal String");
assertNotNull(ksc);
assertSame(actual, actual1);
assertNotSame(actual, actual1); assertNull(actual1);
assertSame(listener, ctGeofenceAPI.getCtLocationUpdatesListener());
assertNotSame(actual, actual1);
assertNotNull(actual);
assertTrue("hasBackgroundLocationPermission must return true when sdk int is less than Q", actualWhenSdkIsP); assertFalse("hasBackgroundLocationPermission must return false when permission " + "is denied and sdk int is greater than P", actualWhenPermissionDenied);
assertThat(actualList, CoreMatchers.is(expectedList)); assertThat(actualListWhenJsonArrayIsEmpty, CoreMatchers.is(expectedListWhenJsonArrayIsEmpty)); assertThat(actualListWhenJsonIsEmpty, CoreMatchers.is(expectedListWhenJsonIsEmpty));
assertNull(actual);
assertTrue(shadowPendingIntent.isBroadcastIntent()); assertEquals(1001001, shadowPendingIntent.getRequestCode()); assertEquals(PendingIntent.FLAG_UPDATE_CURRENT, shadowPendingIntent.getFlags()); assertEquals(CTGeofenceConstants.ACTION_GEOFENCE_RECEIVER, shadowPendingIntent.getSavedIntent().getAction()); assertEquals(actualComponentName, shadowPendingIntent.getSavedIntent().getComponent());
assertSame(actual, actual1);
assertEquals(GeofencingRequest.INITIAL_TRIGGER_ENTER, geofencingRequest.getInitialTrigger());
assertTrue(shadowPendingIntent.isBroadcastIntent()); assertEquals(10100111, shadowPendingIntent.getRequestCode()); assertEquals(PendingIntent.FLAG_UPDATE_CURRENT, shadowPendingIntent.getFlags()); assertEquals(CTGeofenceConstants.ACTION_LOCATION_RECEIVER, shadowPendingIntent.getSavedIntent().getAction()); assertEquals(actualComponentName, shadowPendingIntent.getSavedIntent().getComponent());
assertNull(actual);
assertFalse("hasPermission must return false when permission is null", actual); assertTrue("hasPermission must return true when permission is granted", actualWhenPermissionGranted); assertFalse("hasPermission must return false when permission is denied", actualWhenPermissionDenied);
assertNotNull(CTGeofenceAPI.getLogger());
assertSame(listener, ctGeofenceAPI.getCtGeofenceEventsListener());
assertThat(actual, samePropertyValuesAs(new CTGeofenceSettings.Builder().build()));
assertEquals("", actualWhenStringIsNull); assertEquals("1", actualWhenStringIsNonNull);
assertFalse(ctGeofenceAPI.isActivated());
assertThat(indexes).hasSize(2); assertThat(indexes).usingFieldByFieldElementComparator().contains(Index.Range(DataType.String, -1)); assertThat(indexes).usingFieldByFieldElementComparator().contains(Index.Range(DataType.Number, -1));
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertEquals(instance.getStatusCode(), expectedStatusCode);
assertThat(res.toString()).isEqualTo(physicalAddress.toString() + "dbs");
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertThat(routingMap).isNull(); assertThat(routingMap).isNotNull();
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertThat(lsn.v).isEqualTo(3); assertThat(globalCommittedLsn.v).isEqualTo(2);
assertThat(path).isEqualTo(Paths.DATABASE_ACCOUNT_PATH_SEGMENT + "/"); assertThat(path).isEqualTo(Paths.DATABASES_PATH_SEGMENT + "/");
assertThat(urlsBeforeResolve.size()).isEqualTo(5); assertThat(urlsBeforeResolve.contains(urlforRead3)).isFalse(); assertThat(urlsBeforeResolve.contains(urlforRead2)).isTrue();
assertThat(consistencyWriter.isGlobalStrongRequest(req, storeResponse)).isEqualTo(isGlobalStrongExpected);
assertThat(subscriber.getOnErrorEvents()).hasSize(1);
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).contains(respHeaders.entrySet().iterator().next());
assertThat(res.toString()).isEqualTo(physicalAddress.toString() + HttpUtils.urlEncode("dbs/db/colls/col/docs"));
assertThat(res.toString()).isEqualTo(physicalAddress.toString() + HttpUtils.urlEncode("dbs/db/colls/col/attachments"));
assertThat(dce.getResponseHeaders()).isNotNull(); assertThat(dce.getResponseHeaders()).isEmpty();
assertThat(sessionToken.getLSN()).isEqualTo(1); assertThat(sessionToken.getLSN()).isEqualTo(2);
assertThat(res.toString()).isEqualTo(physicalAddress.toString() + HttpUtils.urlEncode("dbs/db/colls/col/conflicts"));
assertThat(Integer.signum(spkc1.CompareTo(spkc2))).isEqualTo(Integer.signum(expectedCompare));
assertThat(requestTimeoutInMillis).isEqualTo(60*1000); assertThat(requestTimeoutInMillis).isEqualTo(61*1000);
assertThat(capturedFailure).isNull(); assertThat(capturedFailure).isEqualTo(dce);
assertThat(this.cache.getWriteEndpoints().get(0)).isEqualTo(LocationCacheTest.Location1Endpoint); assertThat(this.cache.getWriteEndpoints().get(1)).isEqualTo(LocationCacheTest.Location2Endpoint); assertThat(this.cache.getWriteEndpoints().get(2)).isEqualTo(LocationCacheTest.Location3Endpoint);
assertThat(res.toString()).isEqualTo(physicalAddress.toString() + HttpUtils.urlEncode("dbs/db/colls"));
assertThat(StringUtils.EMPTY).isEqualTo(sessionContainer.resolveGlobalSessionToken(request));
assertThat(userDetailsService.loadUserDetails(assertion).getAuthorities()) .extracting("authority", String.class) .containsExactlyInAnyOrder("ROLE_USER", "ROLE_MEMBER", "ROLE_ADMIN");
assertThat(builder.build()) .extracting("key", "authenticationUserDetailsService", "authoritiesMapper", "statelessTicketCache", "ticketValidator") .usingElementComparator((Comparator<Object>) (o1, o2) -> (o1 == o2) ? 0 : -1) .containsOnly(key, userDetailsService, grantedAuthoritiesMapper, statelessTicketCache, ticketValidator); assertThat(builder.build()).hasFieldOrPropertyWithValue("messages.messageSource", messageSource);
assertThat(builder.build()).isExactlyInstanceOf(CasAuthenticationProvider.class);
assertThat(builder.build()).isInstanceOf(Cas30ProxyTicketValidator.class);
assertThat(serviceAuthenticationDetails).isInstanceOf(ProxyCallbackAndServiceAuthenticationDetails.class);
assertThat(builder.build()).isInstanceOf(Cas30ServiceTicketValidator.class); assertThat(builder.build()).isInstanceOf(Cas20ServiceTicketValidator.class);
assertThat(userDetailsService.loadUserDetails(assertion).getAuthorities()) .extracting("authority", String.class) .containsExactly("ROLE_USER");
assertThat(serviceAuthenticationDetails) .isInstanceOf(DefaultProxyCallbackAndServiceAuthenticationDetails.class);
assertThat(userDetailsService.loadUserDetails(assertion).getAuthorities()) .extracting("authority", String.class) .containsExactly("ROLE_USER");
assertThat(builder.build()).isInstanceOf(Cas30ProxyTicketValidator.class);
assertThat(builder.build()).isInstanceOf(Cas20ProxyTicketValidator.class);
assertThat(provider.getAssertion()).isNotNull(); assertThat(provider.getAssertion().getPrincipal().getName()).isEqualTo(user);
assertThat(ReflectionTestUtils.getField(filter, "HANDLER")) .hasFieldOrPropertyWithValue("artifactParameterName", "dummyArtifactParameterName") .hasFieldOrPropertyWithValue("logoutParameterName", "dummyLogoutParameterName") .hasFieldOrPropertyWithValue("relayStateParameterName", "dummyRelayStateParameterName") .hasFieldOrPropertyWithValue("sessionMappingStorage", sessionMappingStorage);
assertThat(builder.build()).isInstanceOf(Cas10TicketValidator.class); assertThat(builder.build()).isInstanceOf(Cas10TicketValidator.class);
assertThat(builder.build()).isExactlyInstanceOf(DynamicProxyCallbackUrlCasAuthenticationProvider.class);
assertThat(builder.build()).isInstanceOf(Cas10TicketValidator.class);
assertThat(serviceProperties.getService()).isNull();
assertThat(repositories).isNotEmpty();
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("org.carlspring.strongbox:maven-snippet:zip:1.0");
assertThat("\\"@carlspring/angular\\" : \\"1.6.7\\"\\n") .as("Failed to generate dependency!") .isEqualTo(snippet);
assertThat(nupkgFile.getNuspec()).isNotNull();
assertThat(groups).isNotEmpty();
assertThat(response.getStatus()).isEqualTo(HttpStatus.PARTIAL_CONTENT.value()); assertThat(response.getContentType()).isEqualTo("multipart/byteranges; boundary=" + MULTIPART_BOUNDARY);
assertThat(foundArtifact.getFilename()).isEqualTo(expectedFilename);
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(response.getStatus()).isEqualTo(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value()); assertThat(response.getHeader(HttpHeaders.CONTENT_RANGE)).startsWith("bytes */");
assertThat("hello-strongbox-pip").isEqualTo(testDao.getName()); assertThat("1.0").isEqualTo(testDao.getMetadataVersion().getVersionString()); assertThat("1.0.0").isEqualTo(testDao.getVersion()); assertThat("Hello, Strongbox [pip]!").isEqualTo(testDao.getSummary());
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat("<dependency id=\\"" + coordinates.getId() + "\\" version=\\"" + coordinates.getVersion() + "\\" />\\n") .as("Failed to generate dependency!") .isEqualTo(snippet);
assertThat(dependency.toString()).as("toString - identifier and version concatenation").isEqualTo("PACKAGE_ID:1.2.3");
assertThat(groupRepositories).isNotEmpty();
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("[org.carlspring.strongbox/maven-snippet \\"1.0\\" :classifier \\"jdk12\\"]\\n");
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("[org.carlspring.strongbox/maven-snippet \\"1.0\\"]\\n");
assertThat(response.getStatus()).isEqualTo(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value()); assertThat(response.getHeader(HttpHeaders.CONTENT_RANGE)).startsWith("bytes */");
assertThat(response.getHeader(HttpHeaders.CONTENT_LENGTH)).isNotEmpty(); assertThat(response.getHeader(HttpHeaders.LAST_MODIFIED)).isNotEmpty(); assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_OCTET_STREAM_VALUE); assertThat(response.getHeader(HttpHeaders.ACCEPT_RANGES)).isEqualTo("bytes");
assertThat(response.getStatus()).isEqualTo(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value()); assertThat(response.getHeader(HttpHeaders.CONTENT_RANGE)).isEqualTo("bytes */" + expectedLength);
assertThat(nuspecFile).isNotNull();
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("compile \\"org.carlspring.strongbox:maven-snippet:1.0\\"\\n");
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("[org.carlspring.strongbox/maven-snippet \\"1.0\\" :extension \\"zip\\"]\\n");
assertThat(configurationManagementService.getConfiguration() .getGroupRepositoriesContaining(storageId, releases1Id)) .as("Failed to add repository to group!") .hasSize(2); assertThat(configurationManagementService.getConfiguration() .getGroupRepositoriesContaining(storageId, releases1Id)) .as("Failed to remove repository from all associated groups!") .isEmpty();
assertThat(formattedWheels.get(i)).isEqualTo(wheelArtifactcoordinates.get(i));
assertThat(validator.supports(repository)).isTrue();
assertThat(packageName1).isNotBlank().isEqualTo("hello_world_pypi"); assertThat(packageName2).isNotBlank().isEqualTo("hello_world_pypi"); assertThat(packageName3).isNotBlank().isEqualTo("hello world pypi"); assertThat(packageName4).isNotBlank().isEqualTo("hello_world_pypi"); assertThat(packageName5).isNotBlank().isEqualTo("hello_1_world_2_pypi");
assertThat(properties).isNotNull(); assertThat(properties.containsKey(key)).as(key + " not found").isTrue(); assertThat(value).isEqualTo(properties.get(key));
assertThat(pool).isNotNull(); assertThat(pool.getAllocatedConnections()).isEqualTo(10);
assertThat(result.toArray(new Dependency[0])).containsOnly(Dependency.parseString("A:1.2.3.4"), Dependency.parseString("B:1.2.3.4"));
assertThat(repositories).isEmpty();
assertThat(true).isTrue(); assertThat(true).isTrue();
assertThat(userDetails).isNotNull(); assertThat(userDetails).isInstanceOf(SpringSecurityUser.class); assertThat(((SpringSecurityUser)userDetails).getSourceId()).isEqualTo("someExternalUserSourceId"); assertThat(userDetails).isNotNull(); assertThat(userDetails.getUsername()).isEqualTo(TEST_DUPLICATE_USER); assertThat(userDetails).isInstanceOf(SpringSecurityUser.class); assertThat(((SpringSecurityUser)userDetails).getSourceId()).isEqualTo("yamlUserDetailService");
assertThat(result).isNotNull();
assertThat(nuspecFile).isNotNull();
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("compile \\"org.carlspring.strongbox:maven-snippet:1.0:jdk12\\"\\n");
assertThat(path).isEqualTo(REPOSITORY_BASEDIR.resolve("relative"));
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(P2ArtifactReader.getArtifact(".", "some/invalid@path")).isNull(); assertThat(P2ArtifactReader.getArtifact(".", "somePath")).isNull(); assertThat(P2ArtifactReader.getArtifact(".", "")).isNull(); assertThat(P2ArtifactReader.getArtifact(".", "osgi.bundle/missingName/1.0.1")).isNull();
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat("maven_jar(\\n name = \\"maven-snippet\\"," + "\\n artifact = \\"org.carlspring.strongbox:maven-snippet:1.0\\",\\n)\\n") .as("Failed to generate dependency!") .isEqualTo(snippet);
assertThat(response.getStatus()).isEqualTo(HttpStatus.PARTIAL_CONTENT.value());
assertThat(nuspecFile).isNotNull();
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("libraryDependencies += \\"" + coordinates.getGroupId() + "\\" % \\"" + coordinates.getArtifactId() + "\\" % \\"" + coordinates.getVersion() + "\\"\\n");
assertThat(iterator.next()).isEqualTo("carlspring"); assertThat(iterator.next()).isEqualTo("maven-central"); assertThat(iterator.next()).isEqualTo("apache-snapshots"); assertThat(iterator.next()).isEqualTo("jboss-public-releases");
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(htmlResponse).isNotBlank().isEqualTo(expectedHtmlResponse);
assertThat(repositories).isNotEmpty(); assertThat(repository.getLayout()).isEqualTo(RawArtifactCoordinates.LAYOUT_NAME); assertThat(repository.getStorage().getId()).isEqualTo(STORAGE0);
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("[org.carlspring.strongbox/maven-snippet \\"1.0\\" :extension \\"zip\\" :classifier \\"jdk12\\"]\\n");
assertTrue(supportsParameterTrueCase1); assertTrue(supportsParameterTrueCase2); assertTrue(supportsParameterTrueCase3); assertFalse(supportsParameterFalseCase1); assertFalse(supportsParameterFalseCase2);
assertThat(response.getStatusCode()) .as("Failed to get list of cron tasks: " + response.getStatusLine()) .isEqualTo(OK); assertThat(cronTasks.getCronTaskConfigurations()).as("List of cron tasks is empty!").isNotEmpty();
assertThat(response.getStatus()).isEqualTo(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value()); assertThat(response.getHeader(HttpHeaders.CONTENT_RANGE)).isEqualTo("bytes */" + expectedLength);
assertThat(Files.exists(artifactRepositoryPath)) .as("Failed to locate artifact file \'" + artifactRepositoryPath + "\'!") .isTrue(); assertThat(Files.notExists(artifactRepositoryPath)) .as("Failed to delete artifact file \'" + artifactRepositoryPath + "\'!") .isTrue();
assertThat(foundArtifact.getClassifier()).isEqualTo(CLASSIFIER); assertThat(foundArtifact.getId()).isEqualTo(ID); assertThat(foundArtifact.getVersion()).isEqualTo(VERSION);
assertThat(Files.exists(artifactDirectoryPath)) .as("Failed to locate artifact directory \'" + artifactDirectoryPath + "\'!") .isTrue(); assertThat(Files.notExists(artifactDirectoryPath)) .as("Failed to delete artifact file \'" + artifactDirectoryPath + "\'!") .isTrue();
assertThat("\\"angular\\" : \\"1.6.7\\"\\n") .as("Failed to generate dependency!") .isEqualTo(snippet);
assertThat(file.toFile().length()).isGreaterThan(0); assertThat(body.asByteArray().length).isEqualTo(file.toFile().length());
assertThat(validator.supports(repository)).isTrue();
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("compile \\"org.carlspring.strongbox:maven-snippet:1.0:jdk12@zip\\"\\n");
assertThat(properties.getDependencies()).isEqualTo("package1:1.2.3,package2:3.2.1");
assertThat(response.isCommitted()).isTrue(); assertThat(response.getStatus()).isEqualTo(HttpServletResponse.SC_FORBIDDEN); assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_JSON_VALUE); assertThat(responseEntityBody.getError()).isEqualTo("forbidden");
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(expectedCoord.get(0)).isEqualTo(actualCoord.getId()); assertThat(expectedCoord.get(1)).isEqualTo(actualCoord.getVersion()); assertThat(expectedCoord.get(2)).isEqualTo(actualCoord.getRelease()); assertThat(expectedCoord.get(3)).isEqualTo(actualCoord.getArchitecture()); assertThat(expectedCoord.get(4)).isEqualTo(actualCoord.getPackageType());
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat("maven_jar(\\n name = \\"maven-snippet\\",\\n)\\n") .as("Failed to generate dependency!").isEqualTo(snippet);
assertThat(path).isEqualTo(REPOSITORY_BASEDIR.resolve("relative"));
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("<dependency>\\n" + " <groupId>org.carlspring.strongbox</groupId>\\n" + " <artifactId>maven-snippet</artifactId>\\n" + " <version>1.0</version>\\n" + " <type>jar</type>\\n" + " <scope>compile</scope>\\n" + "</dependency>\\n");
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("org.carlspring.strongbox:maven-snippet:jar:jdk12:1.0");
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("<dependency org=\\"" + coordinates.getGroupId() + "\\"" + " name=\\"" + coordinates.getArtifactId() + "\\"" + " rev=\\"" + coordinates.getVersion() + "\\" />\\n");
assertThat(formatter).as("Failed to look up dependency synonym formatter!").isNotNull(); assertThat(snippet) .as("Failed to generate dependency!") .isEqualTo("org.carlspring.strongbox:maven-snippet:jar:1.0");
assertThat(result).isNotNull();
assertTrue(server1.isPresent(), "server1 not found"); assertEquals("server1", server1.get().id); assertEquals("abc", server1.get().username); assertEquals("def", server1.get().password); assertTrue(central.isPresent(), "central not found"); assertEquals("central", central.get().id); assertEquals("123", central.get().username); assertEquals("456", central.get().password); assertEquals(2, credentials.size(), "two credentials should be in list");
assertNotNull(proxyServerConfiguration); assertNotNull(proxyServerConfiguration.mavenRepositories); assertEquals(1, proxyServerConfiguration.mavenRepositories.size()); assertNotNull(server1);
assertNotNull(stream); assertThat(series.size(), is(1)); assertThat(metric.getName(), is("sys.cpu.nice")); assertThat(metric.getTimestamps().size(), is(1)); assertThat(metric.getValues().get(0), is(18.0)); assertThat(metric.getTimestamps().get(0), is(1346846400000L));
assertTrue(Arrays.equals(Helper.constructCodePointArrayFomMinMaxValues(min, max), array));
assertTrue(isPointInsideRectangleAndNextXGreaterThanReferenceX(testRectangle, referencePoint, temp));
assertNotNull(rsf.getString(100)); assertNotNull(rsf.getString(1));
assertTrue(s.charAt(i) >= 1 && s.charAt(i) <= 100);
assertArrayEquals(a, Helper.convertIntegerListToIntArray(l));
assertTrue(isPointInsideRectangleAndNextYGreaterThanReferenceY(testRectangle, referencePoint, temp));
assertFalse(pcf.isPrintableChar(i)); assertTrue(pcf.isPrintableChar(i));
assertEquals(1, Helper.convertStringToIntOrDefault("1", 1)); assertNotEquals(1, Helper.convertStringToIntOrDefault("1.1", 2)); assertEquals(2, Helper.convertStringToIntOrDefault("1.1", 2));
assertNotNull(rpf.getRandomPointWithDistance(testRectangle, lp, MAX * 2));
assertTrue(p.getX() <= MAX); assertTrue(p.getY() <= MAX);
assertTrue(rff.getRandomFont().getSize() >= RandomFontFactory.MIN_SUPPORTED_FONT_SIZE); assertTrue(rff.getRandomFont().getSize() <= RandomFontFactory.MAX_SUPPORTED_FONT_SIZE / 2);
assertNotNull(bi); assertEquals(200, bi.getWidth()); assertEquals(100, bi.getHeight());
assertEquals(e.getMessage(), "Code point must be between " + GlobalConstants.MIN_ALLOWED_CODE_POINT + " and " + GlobalConstants.MAX_ALLOWED_CODE_POINT);
assertNotNull(Helper.constructCodePointArrayFomMinMaxValues(10, -1));
assertNotNull(rff.getRandomFont());
assertArrayEquals(expected, Helper.convertCodePointsToSortedIntArrayNoDuplicates(null, "1-3")); assertArrayEquals(expected, Helper.convertCodePointsToSortedIntArrayNoDuplicates("1-3", "4-9")); assertArrayEquals(expected, Helper.convertCodePointsToSortedIntArrayNoDuplicates("1-3, 3-5", "4-9")); assertArrayEquals(expected, Helper.convertCodePointsToSortedIntArrayNoDuplicates(", 1-3, 3-5, 3", "4-9"));
assertNotNull(rsf.getOneCharString());
assertEquals(a, b);
assertEquals(new NodeId(0, 0), OpcUaConverter.toNodeId(eni));
assertEquals("de", conf.get("hadoopoffice.read.locale.bcp47", "us"), "HadoopOffice Hadoop configuration option set"); assertTrue(conf.getBoolean("hadoopoffice.read.linkedworkbooks", false), "HaodoopOffice Hadoop configuration option set boolean");
assertEquals(104,mostTrustedCAList.size(),"Most trusted CA list has length 104");
assertEquals(1, args.size()); assertEquals("", args.get(""));
assertTrue(sw.getDuration() < 200); assertEquals(0, queue.remove()); assertEquals(1, queue.remove()); assertEquals(2, queue.remove()); assertEquals(3, queue.remove()); assertEquals(4, queue.remove());
assertTrue(sw.getDuration() < (num_instances * delay) * 0.2); assertEquals(i, o);
assertEquals(1, args.size()); assertEquals("def", args.get("abc"));
assertEquals(2, args.size()); assertEquals("def", args.get("abc")); assertEquals("", args.get("foo"));
assertEquals(1, args.size()); assertEquals("", args.get("abc"));
assertTrue(sw.getDuration() < 200); assertEquals(0, queue.remove()); assertEquals(1, queue.remove()); assertEquals(2, queue.remove()); assertEquals(3, queue.remove()); assertEquals(4, queue.remove());
assertTrue(sw.getDuration() < (num_instances * delay) * 0.2); assertEquals(i, o0); assertEquals(2 * i, o1);
assertEquals("/tmp/" + pt.getId(), FileHibernate.getFilename(pt, "/tmp/"));
assertTrue(sw.getDuration() < 200); assertEquals(0, queue.remove()); assertEquals(1, queue.remove()); assertEquals(2, queue.remove()); assertEquals(3, queue.remove()); assertEquals(4, queue.remove());
assertEquals(2, args.size()); assertEquals("def", args.get("abc")); assertEquals("", args.get("foo"));
assertThat(decodeClassName(null), nullValue()); assertThat(decodeClassName("-01"), equalTo("01")); assertThat(decodeClassName("my+spaced+url"), equalTo("my spaced url")); assertThat(decodeClassName("UnChAnGeD"), equalTo("UnChAnGeD"));
assertThat(encodeClassName(null), nullValue()); assertThat(encodeClassName("01"), equalTo("-01")); assertThat(encodeClassName("my spaced url"), equalTo("my+spaced+url")); assertThat(encodeClassName("UnChAnGeD"), equalTo("UnChAnGeD"));
assertThat(properties.resolveMapperLocations()).isEmpty();
assertThat(city.getId()).isEqualTo(1); assertThat(city.getName()).isEqualTo("San Francisco"); assertThat(city.getState()).isEqualTo("CA"); assertThat(city.getCountry()).isEqualTo("US");
assertTrue(alleleCounts.getAltAlleles().contains(altAllele)); assertFalse(alleleCounts.getAltAlleles().contains(Allele.create("A", true)));
assertTrue(closeEnough(tpc.cachedPowerCalculation(100,0.2), 1.0, epsilon)); assertTrue(closeEnough(tpc.cachedPowerCalculation(30,0.1), 0.8864, epsilon)); assertTrue(closeEnough(tpc.cachedPowerCalculation(0,0.02), 0.0, epsilon)); assertTrue(closeEnough(tpc.cachedPowerCalculation(5, 0.01), 0.0520, epsilon));
assertEquals((int)alleleCounts.getRef(), 40); assertEquals((int)alleleCounts.getAlt(altT), 10);
assertEquals((int)alleleCounts.get(refA), 40); assertEquals((int)alleleCounts.get(altT), 10);
assertEquals(testEid.getEidString(), localEid.getEidString());
assertEquals("123", ContextUtils.getWithoutSubContext("123")); assertEquals("123", ContextUtils.getWithoutSubContext("123###1"));
assertEquals("harry-potter", new FriendlyUrl().sanitizeWithDashes("Harry Potter")); assertEquals("harry", new FriendlyUrl().sanitizeWithDashes("Harry "));
assertThat(underTest.hasVirus(item), is(true));
assertThat(underTest.hasVirus(item), is(false));
assertThat(underTest.hasVirus(item), is(true));
assertThat(request.header("X-Request-Id"), isValidUuid());
assertThat(GcpUtil.isPermissionDenied(new GoogleJsonError()), is(false)); assertThat(GcpUtil.isPermissionDenied(new GoogleJsonError().set("status", "foo failed")), is(false));
assertThat(shouldDelete, is(true));
assertThat(instantsInRange(firstTimeHours, lastTimeHours, Schedule.parse("0 * * * *")), contains(parse("2016-01-19T00:00:00.00Z"), parse("2016-01-19T01:00:00.00Z"), parse("2016-01-19T02:00:00.00Z")));
assertThat(workflowExecution.getId().getProject(), equalTo(PROJECT)); assertThat(workflowExecution.getId().getDomain(), equalTo(DOMAIN)); assertThat(workflowExecution.getId().getName(), equalTo(EXISTING_NAME));
assertEquals(expectedExecution, actualExecution);
assertThat(runState, equalTo(returnedRunState));
assertThat(exception.getMessage(), is("fubared!"));
assertThat(workflowExecution.getId().getProject(), equalTo(PROJECT)); assertThat(workflowExecution.getId().getDomain(), equalTo(DOMAIN)); assertThat(workflowExecution.getId().getName(), equalTo(NON_EXISTING_NAME));
assertThat(OBJECT_MAPPER.readValue(outContent.toString(), WorkflowWithState.class), is(WorkflowWithState.create(workflow, state)));
assertNull(inputs.getLiteralsMap() .get(PARAMETER_NAME)); assertThat(inputValue, equalTo(inputs.getLiteralsMap() .get(inputName) .getScalar() .getPrimitive() .getStringValue()));
assertThat(stateInfo( RunState.create(WORKFLOW_INSTANCE, QUEUED, stateData)), is(format("tries:0 delayMs:%s", stateData.retryDelayMillis())));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(url.uri().toString())); assertThat(request.method(), is("GET")); assertThat(r.join(), is(workflows));
assertThat(restoredRunStateData, is(Optional.empty()));
assertThat(KubernetesDockerRunner.isMainContainer(MAIN_CONTAINER_NAME), is(true)); assertThat(KubernetesDockerRunner.isMainContainer(KEEPALIVE_CONTAINER_NAME), is(false)); assertThat(KubernetesDockerRunner.isMainContainer("foobar"), is(false));
assertThat(sut.add(entity1), is(entity1));
assertThat(workflowInstanceExecutionData, is(expected));
assertThat(e.getResponse().status(), is( Status.BAD_REQUEST.withReasonPhrase("Authorization token must be of type Bearer")));
assertEquals(EXPECTED_HEADER + " backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 " + "component workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z N/A FOO=bar\\n", outContent.toString());
assertEquals(128, storage.shardsForCounter(RESOURCE_ID).size());
assertThat(shouldDelete, is(true));
assertThat(e.getResponse().status(), is( Status.BAD_REQUEST.withReasonPhrase("Failed to parse Authorization token")));
assertThat(l, hasSize(0));
assertThat(pod.getMetadata().getAnnotations(), is(nullValue())); assertThat(Try.run(() -> kdr.tryCleanupPods()).isSuccess(), is(true));
assertThat(LP_RESOURCE_TYPE, equalTo(launchPlan.getId().getResourceType())); assertThat(PROJECT, equalTo(launchPlan.getId().getProject())); assertThat(DOMAIN, equalTo(launchPlan.getId().getDomain())); assertThat(LP_NAME, equalTo(launchPlan.getId().getName())); assertThat(LP_VERSION, equalTo(launchPlan.getId().getVersion()));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(execName, Matchers.hasLength(20));
assertThat(shouldDelete, is(false));
assertThat(e.status(), is(ExitStatus.InputError));
assertThat(exception.getMessage(), equalTo(EXCEPTION_MESSAGE));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-01-22T08:07:11.22Z")));
assertThat(client, notNullValue());
assertThat(diff, lessThan(expected * 0.05));
assertThat(exception.getMessage(), equalTo(EXCEPTION_MESSAGE));
assertThat(validator.authenticate("token"), is(idToken));
assertThat(shouldDelete, is(false));
assertEquals(EXPECTED_HEADER + " backfill-2 false false " + " 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description FOO=bar\\n", outContent.toString());
assertThat(Try.run(() -> sut.authorizeWorkflowAction(ac, WORKFLOW.id())).isSuccess(), is(true));
assertThat(runnerId.apply(runState), is(id));
assertThat(e.getCause(), is(exception));
assertThat( EventUtil.info(Event.triggerExecution(TestData.WORKFLOW_INSTANCE, Trigger.adhoc("foobar"), TRIGGER_PARAMETERS)), is("Trigger id: foobar, Parameters: {\\"env\\":{\\"BAR\\":\\"bar\\",\\"FOO\\":\\"foo\\"}}"));
assertThat(e, is(cause));
assertThat(a, is(INITIAL_VALUE)); assertThat(b, is(INITIAL_VALUE));
assertThat(GcpUtil.isResourceExhausted(new GoogleJsonResponseException( new HttpResponseException.Builder(404, "Not Found", new HttpHeaders()), new GoogleJsonError())), is(false)); assertThat(GcpUtil.isResourceExhausted(new GoogleJsonResponseException( new HttpResponseException.Builder(404, "Not Found", new HttpHeaders()), null)), is(false));
assertThat(executionNames, hasSize(PAGE_SIZE)); assertThat(executionNames, hasItems(EXEC_NAME_PREFIX + 1, EXEC_NAME_PREFIX + 2));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(response, hasStatus(withCode(Status.UNAUTHORIZED)));
assertThat(response, hasStatus(belongsToFamily(StatusType.Family.SERVER_ERROR)));
assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, SUBMITTING)), is(""));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/backfills?allowFuture=false")); assertThat(Json.deserialize(bytesOfRequestBody(request), BackfillInput.class), equalTo(backfillInput)); assertThat(request.method(), is("POST"));
assertThat(patchedState, equalTo(FULLY_POPULATED_STATE));
assertThat(validator.authenticate("token"), is(nullValue()));
assertEquals("write error", e.getCause().getMessage());
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/scheduler/trigger?allowFuture=true")); assertThat(request.method(), is("POST")); assertThat(Json.deserialize(bytesOfRequestBody(request), TriggerRequest.class), equalTo(triggerRequest));
assertEquals(events, expectedEvents);
assertThat( "Parsing " + example.toParse() + " " + example.schedule(), parsed, is(example.expected()));
assertEquals(EXPECTED_HEADER_WITH_TRUNCATED_DESCRIPTION + " backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is... FOO=bar\\n", outContent.toString());
assertTrue(parameter.hasScalar()); assertTrue(parameter.getScalar().hasPrimitive()); assertTrue(parameter.getScalar().getPrimitive().getValueCase() == Literals.Primitive.ValueCase.DATETIME); assertThat(INSTANT.getEpochSecond(), equalTo(parameter.getScalar().getPrimitive().getDatetime().getSeconds()));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/backfills/" + BACKFILL.id())); assertThat(Json.deserialize(bytesOfRequestBody(request), EditableBackfillInput.class), equalTo(backfillInput)); assertThat(request.method(), is("PUT"));
assertThat(entitiesOfKind(DatastoreStorage.KIND_ACTIVE_WORKFLOW_INSTANCE), hasSize(2));
assertThat(Throwables.getRootCause(e), is(exception));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-02-05T08:07:11.22Z")));
assertEquals(EXPECTED_OUTPUT, outContent.toString());
assertThat(result, is("foo"));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-01-22T09:14:16.22Z")));
assertThat(WORKFLOW_INSTANCE.workflowId(), is(WORKFLOW_ID)); assertThat(WORKFLOW_INSTANCE.parameter(), is(PARAMETER));
assertThat(result, is(false));
assertThat(response, hasStatus(withCode(FORBIDDEN)));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/scheduler/trigger?allowFuture=false")); assertThat(request.method(), is("POST")); assertThat(Json.deserialize(bytesOfRequestBody(request), TriggerRequest.class), equalTo(triggerRequest));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-02-25T08:07:11.22Z")));
assertThat(outContent.toString(), is(String.format( "COMPONENT WORKFLOW%n" + "foo1 bar1%n" + "foo2 bar2%n")));
assertEquals(EXPECTED_OUTPUT + "\\n", outContent.toString());
assertThat(authContext.user(), is(Optional.empty()));
assertThat(flyteRunner.isEnabled(), is(true));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/backfills?allowFuture=true")); assertThat(Json.deserialize(bytesOfRequestBody(request), BackfillInput.class), equalTo(backfillInput)); assertThat(r.isCompletedExceptionally(), is(false)); assertThat(request.method(), is("POST"));
assertThat(CheckedDatastoreReaderWriter.call(supplier), is("foobar"));
assertThat(sut.newKeyFactory(), is(keyFactory));
assertThat(workflowInstanceExecutionData, is(expected));
assertThat(offsetInstant(parse("2018-01-19T09:00:00.00Z"), EVERY_5_MINUTES, 2), is(parse("2018-01-19T09:10:00.00Z")));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(routes, is(originalRoutes));
assertThat(execution, is(expected));
assertThat(shouldDelete, is(true));
assertThat(exception.getCause(), equalTo(cause));
assertThat(e.status(), is(ExitStatus.UnknownError));
assertThat(runnerId.apply(runState), is(id));
assertThat(sut.put(entity1), is(entity1));
assertThat(response, hasStatus(withCode(Status.OK)));
assertEquals(result, expected);
assertTrue( instantsInRange(firstTimeHours, lastTimeHours, Schedule.parse("0 * * * *")).isEmpty());
assertThat(WORKFLOW_INSTANCE.toKey(), is(WORKFLOW_ID.toKey() + "#" + PARAMETER));
assertThat(a, is(INITIAL_VALUE));
assertThat(errors, contains("secret foo-secret is not whitelisted"));
assertThat(MDC.get("foo"), is("bar")); assertThat(MDC.get("foo"), is(nullValue()));
assertThat(ServiceAccounts.serviceAccountEmail(credentials), is(SERVICE_ACCOUNT));
assertEquals(EXPECTED_HEADER_WITH_FULL_DESCRIPTION + " backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is long enough to truncate FOO=bar\\n", outContent.toString());
assertThat(errors, contains(limit("running timeout is too big", runningTimeout, MAX_RUNNING_TIMEOUT)));
assertThat(executionNames, hasItems(EXEC_NAME_PREFIX + 1, EXEC_NAME_PREFIX + 3));
assertEquals(Long.MAX_VALUE, storage.getLimitForCounter("GLOBAL_STYX_CLUSTER"));
assertTrue( instantsInRange(firstTimeHours, lastTimeHours, Schedule.parse("0 * * * *")).isEmpty());
assertFalse(handler.reached);
assertThat(response, hasStatus(withCode(FORBIDDEN)));
assertThat(shouldDelete, is(true));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-02-25T09:14:16.22Z")));
assertThat(eventCaptor.getAllValues().stream() .anyMatch(e -> EventUtil.name(e).equals("dequeue")), is(false)); assertThat(eventCaptor.getAllValues().stream() .anyMatch(e -> EventUtil.name(e).equals("dequeue")), is(false));
assertThat(exception.getMessage(), containsString("Missing trigger or unknown in StateData"));
assertThat(e.getStatusCode(), is(statusCode));
assertThat(response.payload().isPresent(), is(false)); assertThat(response.status().family(), is(Status.Family.SERVER_ERROR));
assertThat(a, is(INITIAL_VALUE));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(executionNames, hasSize(PAGE_SIZE)); assertThat(executionNames, not(hasItems(EXEC_NAME_PREFIX + 1, EXEC_NAME_PREFIX + 2)));
assertFalse(handler.reached);
assertThat(offsetInstant(parse(origin), Schedule.parse(schedule), 0), is(parse(expected)));
assertThat(output, is(expectedOutput));
assertThat(completionStage.toCompletableFuture().get().payload().orElseThrow().utf8(), is( "{\\"foo\\":\\"blah\\"," + "\\"inner_object\\":{" + "\\"field_name_convention\\":\\"bloh\\"," + "\\"enum_field\\":\\"enum_value\\"}}" ));
assertThat(request.url(), is(URI)); assertThat(request.method(), is("DELETE"));
assertThat(offsetInstant(parse("2018-01-19T09:00:00.00Z"), EVERY_5_MINUTES, -2), is(parse("2018-01-19T08:50:00.00Z")));
assertThat(e.getCause(), instanceOf(InterruptedException.class)); assertThat(Thread.currentThread().isInterrupted(), is(true));
assertEquals(EXPECTED_OUTPUT, outContent.toString());
assertThat(e.status(), is(ExitStatus.UnknownError));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-03-28T10:21:21.22Z")));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(value1.getNow(""), is("bar")); assertThat(value2.getNow(""), is("bar")); assertThat(mdc, is(anyOf(nullValue(), is(emptyMap()))));
assertTrue(handler.reached);
assertThat(patchedState.enabled(), equalTo(patch.enabled())); assertThat(patchedState.nextNaturalTrigger().toString(), equalTo(FULLY_POPULATED_STATE.nextNaturalTrigger().toString())); assertThat(patchedState.nextNaturalOffsetTrigger().toString(), equalTo(FULLY_POPULATED_STATE.nextNaturalOffsetTrigger().toString()));
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(2L, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(1L, datastore.get(getKey(COUNTER_ID1, 0)) .getLong(PROPERTY_SHARD_VALUE)); assertEquals(0L, datastore.get(getKey(COUNTER_ID1, 1)) .getLong(PROPERTY_SHARD_VALUE)); assertEquals(1L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(client, is(theInstance(kubernetesClient)));
assertThat(e, is(cause));
assertThat(GcpUtil.isPermissionDenied(PERMISSION_DENIED_ERROR), is(true));
assertThat(e, is(commitException));
assertThat(value, is("bar"));
assertEquals("read error", e.getCause().getMessage());
assertTrue(isAligned(parse("2017-02-06T10:15:00.00Z"), custom)); assertTrue(isAligned(parse("2017-02-06T10:42:00.00Z"), custom)); assertFalse(isAligned(parse("2017-02-06T10:00:00.00Z"), custom)); assertFalse(isAligned(parse("2017-02-06T11:15:00.00Z"), custom));
assertEquals(128, storage.shardsForCounter(RESOURCE_ID).size());
assertThat(offsetTime, is(ZonedDateTime.parse("2017-01-22T08:07:11.22Z")));
assertThat(Try.run(() -> CliMain.run(cliContext, argLine.split(" "))).isSuccess(), is(true));
assertThat(sut.query(query), contains(entity1, entity2));
assertThat(instrumentedDatastore, instanceOf(InstrumentedDatastore.class)); assertThat(((InstrumentedDatastore) instrumentedDatastore).delegate(), is(datastore));
assertThat(e.getCause(), instanceOf(ApiErrorException.class)); assertThat(apiErrorException.isAuthenticated(), is(true));
assertThat(OBJECT_MAPPER.readValue(outContent.toString(), new TypeReference<List<Workflow>>() { }), is(workflows));
assertThat(e.getCause(), instanceOf(TimeoutException.class)); assertThat(elapsed.getSeconds(), is(lessThan(1L)));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(invocation.isFailure(), is(true)); assertThat(invocation.getCause(), is(cause));
assertThat(span.ended, is(true)); assertThat(span.status, is(nullValue())); assertThat(span.annotations, is(empty()));
assertThat(storage.shardsForCounter("res1").size(), is(2));
assertThat(event.workflowInstance(), is(INSTANCE_1)); assertThat(EventUtil.name(event).equals("retryAfter"), is(true));
assertThat(GcpUtil.isPermissionDenied(new GoogleJsonResponseException( new HttpResponseException.Builder(404, "Not Found", new HttpHeaders()), new GoogleJsonError())), is(false)); assertThat(GcpUtil.isPermissionDenied(new GoogleJsonResponseException( new HttpResponseException.Builder(404, "Not Found", new HttpHeaders()), null)), is(false));
assertThat(sakm.keyExists("foo"), is(false));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(workflows.values().size(), is(1)); assertThat(workflows, hasEntry(workflow, spec));
assertThat(validator.authenticate("token"), is(nullValue()));
assertTrue(StateUtil.isConsumingResources(RunState.State.PREPARE)); assertTrue(StateUtil.isConsumingResources(RunState.State.SUBMITTING)); assertTrue(StateUtil.isConsumingResources(RunState.State.SUBMITTED)); assertTrue(StateUtil.isConsumingResources(RunState.State.RUNNING));
assertThat(e.status(), is(ExitStatus.ArgumentError));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(e.getCause(), instanceOf(ApiErrorException.class)); assertThat(apiErrorException.isAuthenticated(), is(false));
assertThat(shouldDelete, is(false));
assertEquals(EXPECTED_HEADER_WITH_TRUNCATED_DESCRIPTION + " backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 Description which is... FOO=bar\\n", outContent.toString());
assertThat(exception.getMessage(), equalTo(EXCEPTION_MESSAGE));
assertThat(e, is(commitException));
assertThat(shouldDelete, is(false));
assertThat(instantsInReversedRange(firstTimeHours, lastTimeHours, Schedule.parse("0 * * * *")), contains(parse("2016-01-19T03:00:00.00Z"), parse("2016-01-19T02:00:00.00Z"), parse("2016-01-19T01:00:00.00Z")));
assertThat(execName, matchesRegex("^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"));
assertThat(id.get(), is(WORKFLOW_INSTANCE.toString())); assertThat(stateCounter.get(), is(String.valueOf(COUNTER))); assertThat(stateName.get(), is(state.toString()));
assertThat(e.getCause(), instanceOf(ApiErrorException.class)); assertThat(apiError.getRequestId(), is(request.header("X-Request-Id")));
assertThat(workflowInstanceExecutionData, is(expected));
assertThat(activeInstances, hasSize(1)); assertThat(instance.getLong(DatastoreStorage.PROPERTY_COUNTER), is(RUN_STATE1.counter())); assertThat(instance.getString(DatastoreStorage.PROPERTY_COMPONENT), is(WORKFLOW_INSTANCE.workflowId().componentId())); assertThat(instance.getString(DatastoreStorage.PROPERTY_WORKFLOW), is(WORKFLOW_INSTANCE.workflowId().id())); assertThat(instance.getString(DatastoreStorage.PROPERTY_PARAMETER), is(WORKFLOW_INSTANCE.parameter()));
assertThat(result, is(false));
assertEquals("update error", e.getCause().getMessage());
assertThat(ConfigUtil.get(config, config::getString, "foo.bar"), is(Optional.empty()));
assertEquals(expectedOutput, outContent.toString());
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(1L, results.next().getLong(PROPERTY_SHARD_VALUE)); assertFalse(results.hasNext()); assertEquals(1L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(sakm.keyExists("foo"), is(false));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-01-22T08:07:11.22Z")));
assertThat(shouldDelete, is(false));
assertThat(GcpUtil.isPermissionDenied(permissionDenied), is(true));
assertThat(validator.authenticate("token"), is(nullValue()));
assertFalse(handler.reached);
assertThat(patchedState, equalTo(WorkflowState.patchEnabled(false)));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/backfills?allowFuture=false")); assertThat(Json.deserialize(bytesOfRequestBody(request), BackfillInput.class), equalTo(backfillInput)); assertThat(r.isCompletedExceptionally(), is(false)); assertThat(request.method(), is("POST"));
assertThat(ConfigUtil.get(config, config::getString, "foo.bar"), is(Optional.of("baz")));
assertThat(offsetInstant(parse(origin), Schedule.parse(schedule), 2), is(parse(expected)));
assertThat(exception.getMessage(), is(message));
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(1L, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(0L, datastore.get(getKey(COUNTER_ID1, 3)).getLong(PROPERTY_SHARD_VALUE)); assertEquals(0L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(completionStage.toCompletableFuture().get().payload().orElseThrow().utf8(), is( "{\\"foo\\":\\"blah\\"," + "\\"inner_object\\":{" + "\\"field_name_convention\\":\\"bloh\\"," + "\\"enum_field\\":\\"enum_value\\"}}" ));
assertThat(transactionException(1, "", "NOT_FOUND").isNotFound(), is(true)); assertThat(transactionException(1, "no entity to update", "").isNotFound(), is(true)); assertThat(transactionException(1, "", "").isNotFound(), is(false));
assertThat(response, hasStatus(withCode(Status.OK))); assertThat(response, hasHeader("X-Request-Id", is(requestId.get()))); assertThat(requestId.get(), isValidUuid());
assertThat(e.getId().getProject(), equalTo(PROJECT)); assertThat(e.getId().getDomain(), equalTo(DOMAIN)); assertThat(2, equalTo(listExecutions.getExecutionsCount()));
assertThat(response.payload(), is(Optional.of(true)));
assertThat(transactionException(1, "", "ALREADY_EXISTS").isAlreadyExists(), is(true)); assertThat(transactionException(1, "entity already exists", "").isAlreadyExists(), is(true)); assertThat(transactionException(1, "", "").isAlreadyExists(), is(false));
assertThat(response, hasStatus(withCode(Status.IM_A_TEAPOT)));
assertThat(WorkflowInstance.parseKey(WORKFLOW_INSTANCE.toKey()), is(WORKFLOW_INSTANCE));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(createdSecret.getMetadata().getAnnotations(), hasEntry("styx-wf-sa", SERVICE_ACCOUNT)); assertThat(createdSecret.getData(), hasEntry("styx-wf-sa.json", jsonKey.getPrivateKeyData())); assertThat(createdSecret.getData(), hasEntry("styx-wf-sa.p12", p12Key.getPrivateKeyData()));
assertEquals(EXPECTED_HEADER_WITH_TRUNCATED_DESCRIPTION + " backfill-2 false false " + " 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is... FOO=bar\\n", outContent.toString());
assertThat(hour, is(lastTimeHours)); assertThat(day, is(lastTimeDays)); assertThat(weeks, is(lastTimeWeeks)); assertThat(months, is(lastTimeMonths));
assertThat(Throwables.getRootCause(e), is(rootCause));
assertThat(response, hasStatus(withCode(Status.OK))); assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(offsetInstant(parse(origin), Schedule.parse(schedule), -2), is(parse(expected)));
assertThat(request.url().toString(), is(API_URL + "/status/testServiceAccountUsageAuthorization")); assertThat(request.method(), is("POST")); assertThat(requestPayload.serviceAccount(), is(serviceAccount)); assertThat(requestPayload.principal(), is(principal)); assertThat(response, is(expectedResponse));
assertThat(HandlerUtil.argsReplace(List.of("foo", "bar", "{}"), "foobar"), is(List.of("foo", "bar", "foobar")));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(transactionException(10, "", "").isConflict(), is(true)); assertThat(transactionException(1, "", "ABORTED").isConflict(), is(true)); assertThat(transactionException(1, "", "").isConflict(), is(false));
assertThat(completionStage.toCompletableFuture().get().payload().isPresent(), is(false));
assertThat(patchedState, equalTo(FULLY_POPULATED_STATE));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(listProjectsResponse.getProjectsList(), hasSize(1)); assertThat(listProjectsResponse.getProjectsList().get(0).getId(), equalTo(PROJECT)); assertThat(listProjectsResponse.getProjectsList().get(0).getDomains(0).getId(), equalTo(DOMAIN));
assertNull(getLimitFromStorage(COUNTER_ID3)); assertEquals(500L, getLimitFromStorage(COUNTER_ID3).getLong(PROPERTY_LIMIT));
assertThat(a, is(INITIAL_VALUE)); assertThat(b, is(INITIAL_VALUE));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(exception.getMessage(), is("Not valid styx run id: [" + invalidStyxRunId + "]"));
assertThat(span.ended, is(true)); assertThat(span.status, is(UNKNOWN)); assertThat(span.annotations, contains(Annotation.fromDescription("Exception thrown")));
assertNotNull( ExceptionUtil.findCause(new RuntimeException(new RuntimeException(new IOException())), IOException.class));
assertEquals("[" + EXPECTED_OUTPUT_WITH_STATUS + "]\\n", outContent.toString());
assertThat(e.getCause(), instanceOf(ApiErrorException.class)); assertThat(apiError.getRequestId(), is(responseRequestId));
assertThat(id, startsWith(prefix + "-" + time + "-"));
assertThat(Json.deserialize(response.payload().orElseThrow(), String.class), is("hello " + email));
assertThat(offsetTime, is(ZonedDateTime.parse("2017-01-22T08:07:11.22Z")));
assertThat(exception.getMessage(), is("fubared! (Request ID: " + REQUEST_ID + ")"));
assertThat(request.url(), is(URI)); assertThat(request.method(), is("POST")); assertThat(bytesOfRequestBody(request), is(ByteString.encodeUtf8("[1,2,3]")));
assertThat(offsetInstant(parse("2018-01-19T09:00:00.00Z"), EVERY_5_MINUTES, 0), is(parse("2018-01-19T09:00:00.00Z")));
assertThat(exception.getMessage(), equalTo(PARAMETER_NAME + " should be of type DATETIME"));
assertNotEquals(id1, id2);
assertThat(e, is(expectedException));
assertTrue(Character.isAlphabetic(startChar)); assertTrue(Character.isLowerCase(startChar));
assertThat(storage.readActiveStates().entrySet(), hasSize(3)); assertThat(response, hasStatus(withCode(Status.OK))); assertThat(parsed.activeStates(), hasSize(1)); assertThat(parsed.activeStates().get(0).workflowInstance().workflowId().componentId(), is(C_ID_1)); assertThat(parsed.activeStates().get(0).workflowInstance().workflowId().id(), is(WF_ID_1));
assertThat(HandlerUtil.argsReplace(List.of("foo", "bar", "foobar"), "barfoo"), is(List.of("foo", "bar", "foobar")));
assertThat(authContext.user(), is(Optional.of(idToken)));
assertEquals(" backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description FOO=bar\\n", outContent.toString());
assertThat(e.getResponse().status(), is( Status.UNAUTHORIZED .withReasonPhrase("Authorization token is invalid")));
assertThat(e.getCause().getCause(), is(exception));
assertThat(e.status(), is(ExitStatus.UnknownError));
assertThat(sut.isActive(), is(active));
assertThat(sut.getOptions(), is(options));
assertThat(sut.allocateId(incompleteKey), is(key));
assertEquals( "Conflicting configuration: Both docker image and flyte conf specified for exec id: 123", exception.getMessage() );
assertThat(sut.get(List.of(key1, key2)), is(List.of(entity1, entity2)));
assertThat(e.getMessage(), startsWith("Unexpected current counter is less than last observed one for"));
assertThat(triggerType(Trigger.natural()), is("natural")); assertThat(triggerType(Trigger.adhoc("foo")), is("adhoc")); assertThat(triggerType(Trigger.backfill("bar")), is("backfill")); assertThat(triggerType(Trigger.unknown("baz")), is("unknown"));
assertThat(result, is(false));
assertThat(sut.newTransaction().tx, is(transaction));
assertThat(sut.validateWorkflow(Workflow.create("test", FULL_WORKFLOW_CONFIGURATION)), is(errors));
assertThat(hour, is(lastTimeHours)); assertThat(day, is(lastTimeDays)); assertThat(weeks, is(lastTimeWeeks)); assertThat(months, is(lastTimeMonths));
assertThat(r.isDone(), is(true)); assertThat(request.header("Authorization"), is("Bearer foobar"));
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(10L, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(9L, datastore.get(getKey(COUNTER_ID1, 0)) .getLong(PROPERTY_SHARD_VALUE)); assertEquals(0L, datastore.get(getKey(COUNTER_ID1, 1)) .getLong(PROPERTY_SHARD_VALUE)); assertEquals(9L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(instant, is(parse("2016-01-19T00:00:00.000Z")));
assertThat(sut.commit(), is(response));
assertThat(GcpUtil.isResourceExhausted(resourceExhausted), is(true));
assertThat(validator.authenticate("token"), is(idToken));
assertNull( ExceptionUtil.findCause(new RuntimeException(new IOException()), UnsupportedOperationException.class));
assertThat(client, notNullValue());
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(shouldDelete, is(false));
assertThat(GcpUtil.isResourceExhausted(RESOURCE_EXHAUSTED_ERROR), is(true));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/workflows/f%5B%20%5Do-cmp/bar-w%5Bf%5D/state")); assertThat(Json.deserialize(bytesOfRequestBody(request), WorkflowState.class), is(workflowState)); assertThat(request.method(), is("PATCH"));
assertThat(a, is(INITIAL_VALUE)); assertThat(b, is(INITIAL_VALUE));
assertThat(foobar, is("foobar"));
assertThat(result, is("foobar"));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(uri.toString())); assertThat(Json.deserialize(bytesOfRequestBody(request), WorkflowConfiguration.class), is(WORKFLOW_CONFIGURATION_1)); assertThat(request.method(), is("POST"));
assertThat(execution, is(expected));
assertThat(storage.config(), is(expectedConfig));
assertThat(f1.join(), is(1)); assertThat(f2.join(), is(1));
assertEquals(EXPECTED_HEADER_WITH_FULL_DESCRIPTION + " backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is long enough to truncate FOO=bar\\n", outContent.toString());
assertEquals(EXPECTED_OUTPUT, outContent.toString());
assertThat(sut.get(key1), is(entity1));
assertEquals(EXPECTED_OUTPUT_WITH_STATUS + "\\n", outContent.toString());
assertThat(sut.validateWorkflow(Workflow.create("test", FULL_WORKFLOW_CONFIGURATION)), is(empty()));
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(1L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(retrieved, is(Optional.empty()));
assertThat(value.get(), is("bar"));
assertThat(instant, is(parse("2016-01-19T08:00:00.000Z")));
assertThat(e, is(expectedException));
assertTrue(execName1.equals(execName2));
assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, TERMINATED, stateData)), is(format("tries:0 execId:%s exitCode:-", stateData.executionId()))); assertThat(stateInfo( RunState.create(WORKFLOW_INSTANCE, TERMINATED, stateData.builder().lastExit(10).build())), is(format("tries:0 execId:%s exitCode:10", stateData.executionId())));
assertThat(Try.run(() -> sut.authorizeWorkflowAction(ac, WORKFLOW_WITHOUT_SA)).isSuccess(), is(true));
assertThat(shouldDelete, is(false));
assertEquals(0, shardedCounter.getCounter(COUNTER_ID1)); assertEquals(2L, shardedCounter.getCounter(COUNTER_ID1)); assertThat(1L, either(is(datastore.get(getKey(COUNTER_ID1, 0)).getLong(PROPERTY_SHARD_VALUE))) .or(is(datastore.get(getKey(COUNTER_ID1, 1)).getLong(PROPERTY_SHARD_VALUE)))); assertEquals(1L, shardedCounter.getCounter(COUNTER_ID1));
assertThat(response, hasStatus(withCode(Status.INTERNAL_SERVER_ERROR)));
assertThat(FutureUtil.gatherIO(futures, NO_TIMEOUT), contains("foo", "bar"));
assertThat(instant, is(parse("2016-01-01T00:00:00.000Z")));
assertFalse(StateUtil.isConsumingResources(RunState.State.NEW)); assertFalse(StateUtil.isConsumingResources(RunState.State.QUEUED)); assertFalse(StateUtil.isConsumingResources(RunState.State.TERMINATED)); assertFalse(StateUtil.isConsumingResources(RunState.State.FAILED)); assertFalse(StateUtil.isConsumingResources(RunState.State.ERROR)); assertFalse(StateUtil.isConsumingResources(RunState.State.DONE));
assertThat(retrieved.isEmpty(), is(true));
assertThat(hour, is(nextTimeHours)); assertThat(day, is(nextTimeDays)); assertThat(weeks, is(nextTimeWeeks)); assertThat(months, is(nextTimeMonths));
assertThat(transitioner.get(WORKFLOW_INSTANCE).state(), equalTo(QUEUED)); assertThat(transitioner.get(WORKFLOW_INSTANCE).counter(), is(0L));
assertThat(runnerId.apply(runState), is(TEST_RUNNER_ID));
assertThat(sut.getDatastore(), is(datastore));
assertThat(StyxScheduler.newBuilder().build(), notNullValue());
assertThat(e.status(), is(ExitStatus.Success)); assertThat(e.status(), is(ExitStatus.Success));
assertThat(result, is(false));
assertThat(prefixedUris, is(List.of("/api/v3/foo", "/api/v3/bar")));
assertThat(e.status(), is(ExitStatus.ArgumentError));
assertThat(exception, is(cause));
assertThat(r.isDone(), is(true)); assertThat(request.url().toString(), is(API_URL + "/scheduler/trigger?allowFuture=false")); assertThat(request.method(), is("POST")); assertThat(Json.deserialize(bytesOfRequestBody(request), TriggerRequest.class), equalTo(triggerRequest));
assertThat(Try.run(() -> sut.authorizeWorkflowAction(ac, WORKFLOW)).isSuccess(), is(true));
assertThat(workflowInstanceExecutionData, is(expected));
assertThat(offsetTime, is(time));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(response, hasStatus(withCode(Status.NOT_FOUND)));
assertThat(result, is(false));
assertEquals(" backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is long enough to " + "truncate BAR=foo FOO=bar FOOBAR=foobar\\n", outContent.toString());
assertFalse(nonApplicableHandler.reached);
assertThat(value1.getNow(""), is("bar")); assertThat(value2.getNow(""), is("bar")); assertThat(mdc, is(anyOf(nullValue(), is(emptyMap()))));
assertThat(r.isDone(), is(true)); assertThat(r.isCompletedExceptionally(), is(false)); assertThat(request.url().toString(), is(uri.toString())); assertThat(request.method(), is("DELETE"));
assertThat(e.status(), is(ExitStatus.InputError));
assertThat(trigger("natural", "natural-trigger"), is(Trigger.natural())); assertThat(trigger("adhoc", "foo"), is(Trigger.adhoc("foo"))); assertThat(trigger("backfill", "bar"), is(Trigger.backfill("bar"))); assertThat(trigger("unknown", "baz"), is(Trigger.unknown("baz")));
assertFalse(runner.isEnabled());
assertThat(expected, is(not(Matchers.empty()))); assertThat(e.status(), is(ExitStatus.ArgumentError));
assertThat(outContent.toString(), is(String.format("foo1 bar1%nfoo2 bar2%n")));
assertThat(exception, is(cause));
assertThat(r.isDone(), is(true)); assertThat(request.header("Authorization"), is("Bearer foobar"));
assertEquals(" backfill-2 false false 2 " + "2017-01-01 2017-01-02 false 2017-01-01 component " + "workflow2 2019-01-01T00:00:00Z 2019-06-01T00:00:00Z Description which is... BAR=foo FOO=bar " + "FOOB...\\n", outContent.toString());
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(Throwables.getRootCause(e), is(rootCause));
assertThat(options.getProjectId(), is(TEST_PROJECT)); assertThat(options.getNamespace(), is(TEST_NAMESPACE));
assertThat(shouldDelete, is(true));
assertThat(instant, is(parse("2016-01-01T00:00:00.000Z")));
assertThat(validator.authenticate("token"), is(nullValue()));
assertThat(stateInfo(RunState.fresh(WORKFLOW_INSTANCE)), is("tries:0")); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, PREPARE)), is("tries:0")); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, ERROR)), is("tries:0")); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, DONE)), is("tries:0"));
assertThat(stats.getAverage(), is(closeTo(expectedMeanRotationsPerHour, expectedMeanRotationsPerHour / 2))); assertThat((double) stats.getMax(), is(lessThan(expectedMeanRotationsPerHour * 2)));
assertThat(GcpUtil.isResourceExhausted(new GoogleJsonError()), is(false)); assertThat(GcpUtil.isResourceExhausted(new GoogleJsonError().set("status", "foo failed")), is(false));
assertFalse(enabled);
assertThat(ServiceAccounts.serviceAccountEmail(credentials), is(SERVICE_ACCOUNT));
assertThat(returnedRunStates.get(INSTANCE), is(runState)); assertThat(returnedRunStates.size(), is(1));
assertThat(response, hasStatus(withCode(Status.OK)));
assertThat(exception.getMessage(), is("No limit found in Datastore for bar-resource"));
assertThat(terminationResponse, notNullValue());
assertThat(initialValue, is(INITIAL_VALUE)); assertThat(triggerValue, is(INITIAL_VALUE));
assertThat(response, hasStatus(belongsToFamily(Status.Family.CLIENT_ERROR)));
assertThat(resultingEvents, is(expectedValues));
assertEquals("hello", new SecondClass().foo());
assertEquals("hello", new FirstClass().hello());
assertEquals("1.0", Float.toString(review.getRating()));
assertEquals("test", plan.getClimate());
assertEquals(user, userService.findOne(user.getId()));
assertEquals(true, planController.deletePlan(1,plan));
assertEquals(null, planController.AddPlans(plan2));
assertEquals(plans, planController.GetPlans(plan));
assertEquals(null, userService.createUser(user2));
assertEquals("1", user.getId().toString());
assertEquals(true, planService.deletePlan(1));
assertEquals(plans, planService.getPlansById(plan.getUserId()));
assertEquals(null, userController.login(user2, response));
assertEquals(user, userController.register(user));
assertEquals("Good", review.getReview());
assertEquals(reviews, service.getReviewsByPlace(review.getPlace()));
assertEquals(review, service.addReview(review));
assertEquals(null, service.addReview(review2));
assertEquals("1", plan.getPlaceId().toString());
assertEquals("Success", controller.register(plan));
assertEquals(null, controller.createReview(review2));
assertEquals(review, controller.createReview(review));
assertEquals("test", user.getUserName());
assertEquals(null, userController.register(user2));
assertEquals("test", plan.getAddress());
assertEquals("2010-01-31", plan.getDateAdded().toString());
assertEquals("test", plan.getHotel());
assertEquals(plan, planController.AddPlans(plan));
assertEquals("1", review.getUserId().toString());
assertEquals("test",plan.getPlace());
assertEquals(reviews, controller.GetReviews(review));
assertEquals(null, planService.addPlan(plan2));
assertEquals("test@gmail.com", user.getEmail());
assertEquals("testID", user.getSessionId());
assertEquals("2010-01-31", review.getDateAdded().toString());
assertEquals(user, userController.login(user, response));
assertEquals(controller.GetReviews(review2), controller.GetReviews(review));
assertEquals(planService.getPlansById(plan.getUserId()), planService.getPlansById(plan.getUserId()));
assertEquals(null, userService.loginUser(user2));
assertEquals(user, userService.createUser(user));
assertEquals(null, userService.findOne(user2.getId()));
assertEquals(plan, planService.addPlan(plan));
assertEquals(user, userService.loginUser(user));
assertEquals(planController.GetPlans(plan2), planController.GetPlans(plan));
assertEquals("Mumbai", review.getPlace());
assertEquals("2010-01-31", plan.getDateTravel().toString());
assertEquals("test12", user.getPassword());
assertEquals(service.getReviewsByPlace(review2.getPlace()), service.getReviewsByPlace(review.getPlace()));
assertNotNull(errorMessage);
assertNotNull(errorMessage);
assertTrue(mIsEmail.isValid("user@example.org"));
assertTrue(mAlphaNumeric.isValid("test"));
assertNotNull(errorMessage); assertTrue(errorMessage.contains(Integer.toString(2))); assertTrue(errorMessage.contains(Integer.toString(4)));
assertFalse(mIsPositiveInteger.isValid("-1"));
assertNotNull(errorMessage);
assertFalse(validation.isValid("a")); assertTrue(validation.isValid("ab"));
assertTrue(mIsEmail.isValid("user.name@example.org"));
assertFalse(mNotEmpty.isValid(""));
assertNotNull(minValidationErrorMessage); assertTrue(minValidationErrorMessage.contains("2")); assertNotNull(maxValidationErrorMessage); assertTrue(maxValidationErrorMessage.contains("5")); assertNotNull(rangeValidationErrorMessage); assertTrue(rangeValidationErrorMessage.contains("2")); assertTrue(rangeValidationErrorMessage.contains("5"));
assertTrue(mNotEmpty.isValid("anytext"));
assertFalse(validation.isValid("a")); assertTrue(validation.isValid("ab")); assertTrue(validation.isValid("abc")); assertTrue(validation.isValid("abcd")); assertFalse(validation.isValid("abcde"));
assertTrue(mAlphaNumeric.isValid("test123"));
assertFalse(mIsPositiveInteger.isValid("text"));
assertTrue(mIsPositiveInteger.isValid("1"));
assertTrue(validation.isValid("abc")); assertFalse(validation.isValid("abcd"));
assertSame(editText, field.getEditText());
assertNotNull(errorMessage);
assertTrue(mIsNumber.isValid("1")); assertTrue(mIsNumber.isValid("12")); assertTrue(mIsNumber.isValid("123"));
assertTrue(mAlphaNumeric.isValid("123"));
assertTrue(mIsEmail.isValid("user+alias@example.org"));
assertFalse(mIsNumber.isValid("text"));
assertNotNull(errorMessage);
assertTrue("The orderBy command should have a root $sort", orderByCommand.keySet().contains("$sort")); assertEquals("The value is not the expected", fakeOrderBy, orderByCommand.get("$sort")); assertFalse("The orderBy command should not have a root $sort", orderByCommand.keySet().contains("$sort")); assertEquals("The value is not the expected", fakeOrderBy, orderByCommand);
assertTrue("There must be 2 seeds", config.getSeeds().size() == 2); assertEquals("The port is not the expected", 2700, config.getSeeds().get(0).getPort()); assertEquals("The port is not the expected", 2701, config.getSeeds().get(1).getPort());
assertEquals("The value of the descending index " + COLUMN_NAME + " should be \'-1\'", -1, object.get(COLUMN_NAME)); assertEquals("The value of the ascending index " + COLUMN_NAME2 + " should be \'1\'", 1, object.get(COLUMN_NAME2));
assertTrue("The groupBy command should have a root $group", groupByCommand.keySet().contains("$group")); assertEquals("The value is not the expected", fakeGroupBy, groupByCommand.get("$group"));
assertEquals("The value must be one",1,value.length); assertEquals("The value must be the default value",ConfigurationOptions.PORT.getDefaultValue()[0],value[0]);
assertEquals("The value must be one",1,value.length); assertEquals("The value must be the default value",ConfigurationOptions.HOST.getDefaultValue()[0],value[0]);
assertEquals("The index name is not the expected", object.get("name"), INDEX_NAME); assertEquals("The \'sparse\' property should be true", object.get("sparse"), true); assertEquals("The \'unique\' property should be false", object.get("unique"), false);
assertEquals("The value of the hashed index column should be \'hashed\'", "hashed", object.get(COLUMN_NAME));
assertEquals("The value must be one",1,value.length); assertEquals("The value must be the set value",HOST_VALUE,value[0]);
assertTrue("The aggregation should not be required without groupBy statements", lwExecutor instanceof BasicLogicalWorkflowExecutor); assertTrue("The aggregation should be required with groupBy statements", lwExecutor instanceof AggregationLogicalWorkflowExecutor);
assertEquals("The query result is wrong", queryResult, returnQueryResult);
assertNotNull("The filter query is null", filterQuery); assertEquals("There should be a query only over 1 field", 1, filterQuery.keySet().size()); assertTrue("The query should contain \'$match\'", filterQuery.containsField("$match")); assertTrue("The query does not contain \'$gte\'", condition.containsField("$gte")); assertEquals("The value of \'$gte\' key should be 5", 5, condition.get("$gte"));
assertEquals("The value of the descending index column should be \'-1\'", -1, object.get(COLUMN_NAME));
assertTrue("The primary key must contain " + ROW_NAME, pk.containsField(ROW_NAME)); assertTrue("The primary key must contain " + OTHER_ROW_NAME, pk.containsField(OTHER_ROW_NAME)); assertEquals("The string value is not the expected", CELL_VALUE, pk.get(ROW_NAME)); assertEquals("The integer value is not the expected", INTEGER_CELL_VALUE, pk.get(OTHER_ROW_NAME));
assertNotNull("The filter query is null", filterQuery); assertEquals("There should be a query only over 1 field", 1, filterQuery.keySet().size()); assertTrue("The query should contain a clause about" + COLUMN_1, filterQuery.containsField(COLUMN_1)); assertTrue("The query does not contain \'$gte\'", condition.containsField("$gte")); assertEquals("The value of \'$gte\' key should be 5", 5, condition.get("$gte"));
assertEquals("The value of the default index column should be 1", 1, object.get(COLUMN_NAME)); assertEquals("The value of the default index column should be 1", 1, object.get(COLUMN_NAME2));
assertEquals("The value is not the expected", CELL_VALUE, (String) pk);
assertEquals("The index name is not the expected", object.get("name"), INDEX_NAME);
assertEquals("The value of the full-text index column should be \'text\'", "text", object.get(COLUMN_NAME));
assertThat(registry.getSupport(support.code())).isEqualTo(support);
assertThat(n).isEqualTo(-1);
assertThat(client.getApiVersion()).isEqualTo(DockerAPIVersion.parse("8.0"));
assertThat(params.getImageName()).isEmpty(); assertThat(params.imageName("test_image_name").getImageName().get()).isEqualTo("test_image_name");
assertThat(taskId).isEqualTo(container.getId()); assertThat(container.isRunning()).isTrue(); assertThat(interceptor.getInvocations()).hasSize(1).first() .matches(invocation -> invocation.matches("restartContainer", container.getId()));
assertThat(facade.listAgentHolders("foo", "bar")).isEmpty(); assertThat(containerIds).isEmpty();
assertThat(config.getConfigurationParameters()).containsAllEntriesOf(customParams);
assertThat(ctrl.doGet(null, null)).isNull();
assertThat(agentInfo.getName()).isEqualTo(dockerClient.getContainers().get(0).getName());
assertThat(params.getPullStatusListener()).isEqualTo(PullStatusListener.NOOP); assertThat(params.pullStatusListener(listener).getPullStatusListener()).isEqualTo(listener);
assertThat(info.getName()).isEqualTo("A");
assertThat(result).isEqualTo(TEST_NODE.editNode().put("cpt", 0)); assertThat(result).isEqualTo(TEST_NODE.editNode().put("cpt", 0));
assertThat(daemonOS).isEqualTo(Optional.of(DockerDaemonOS.WINDOWS)); assertThat(daemonOS).isEmpty();
assertThat(DockerCloudUtils.hasImageTag("")).isFalse(); assertThat(DockerCloudUtils.hasImageTag("my-image:")).isFalse();
assertThat(resolver.isInClassLoader(DockerCloudUtils.class.getName(), cl)).isTrue();
assertThat(DockerCloudUtils.getClientId(description)).isEqualTo(TestUtils.TEST_UUID);
assertThat(DockerCloudUtils.getStackTrace(null)).isEmpty();
assertThat(dockerClient.getServices()).isEmpty(); assertThat(agentHolderStillExists).isFalse();
assertThat(new NewAgentHolderInfo(TestUtils.createRandomSha256(), "", "", Collections.emptyList()) .getWarnings()). isEmpty(); assertThat(new NewAgentHolderInfo(TestUtils.createRandomSha256(), "", "", warnings).getWarnings()). containsExactlyElementsOf(warnings). isNotSameAs(warnings);
assertThat(containers).isEmpty();
assertThat(info.getId()).isEqualTo("42");
assertThat(client.getApiVersion()).isEqualTo(DockerAPIVersion.parse("9.99"));
assertThat(resolver.resolve()).isEqualTo(OfficialAgentImageResolver.REPO + ":" + version); assertThat(clientFty.getClient().isClosed()).isTrue();
assertThat(containers).hasSize(1); assertThat(containers.get(0).getLabels()).containsEntry("key1", "value1").containsEntry("key2", "value2");
assertThat(resources.string("A")).isEqualTo("1"); assertThat(resources.string("B")).isEqualTo("2");
assertThat(WebUtils.retrieveUserFromWSSession(session).get()).isSameAs(user);
assertThat(input.available()).isZero(); assertThat(input.available()).isEqualTo(data.length); assertThat(input.available()).isZero();
assertThat(stream.getType()).isNull();
assertThat(outputStream.isShutdown()).isFalse(); assertThat(outputStream.isShutdown()).isTrue();
assertThat(WebUtils.retrieveUserFromWSSession(session).get()).isSameAs(user2);
assertThat(values).containsExactly(entry("A", "1"), entry("B", "2"), entry("C", "3")); assertThat(emptyNode().getObjectValues()).isEmpty();
assertThat(resources.text("test.key")).isEqualTo("foo");
assertThat(agentInfo.getId()).isEqualTo(dockerClient.getContainers().get(0).getId());
assertThat(client.getApiVersion()).isEqualTo(targetVersion);
assertThat(DockerCloudUtils.getClientId(description)).isNull();
assertThat(clientTask1.executions).hasSize(1).first().matches(Execution::isRunning); assertThat(clientTask2.executions).isEmpty(); assertThat(clientTask2.isSuccessful()).isTrue();
assertThat(info.getLabels()).isEqualTo(mapOf(pair("A", "1"), pair("B", "2"))); assertThat(info.getLabels()).isEqualTo(mapOf(pair("A", "1"), pair("B", "2")));
assertThat(stream.isClosed()).isFalse();
assertThat(resources.text("A")).isEqualTo("1"); assertThat(resources.text("B")).isEqualTo("2");
assertThat(buffer.length).isLessThan(msgBytes.length); assertThat(msgBytes.length % buffer.length).isNotZero(); assertThat(baos.toByteArray()).isEqualTo(msgBytes);
assertThat(client.getApiVersion()).isEqualTo(DockerCloudUtils.DOCKER_API_TARGET_VERSION);
assertThat(WebUtils.retrieveUserFromWSSession(session).isPresent()).isFalse();
assertThat(node.getAsBoolean("child")).isTrue(); assertThat(node.getAsBoolean("unknownChild", Boolean.FALSE)).isFalse();
assertThat(resolver.resolve()).isEqualTo(OfficialAgentImageResolver.LATEST);
assertThat(params.getRegistryCredentials()).isEqualTo(DockerRegistryCredentials.ANONYMOUS); assertThat(params.registryCredentials(credentials).getRegistryCredentials()).isEqualTo(credentials);
assertThat(cl.getQueriedClass()).isEqualTo("some.non.existing.class");
assertThat(resources.text("test.key", 1000, 1000, 1000, null)).isEqualTo("1000 1,000 null {4} {5}");
assertThat(node.getObject("child").getAsString("A")).isEqualTo("1"); assertThat(node.getObject("unknownChild", null)).isNull(); assertThat(node.getObject("unknownChild", def)).isSameAs(def);
assertThat(agentInfo.getResolvedImage()).isEqualTo("resolved-image:latest@resolved");
assertThat(sw.getDuration().toMillis()).isCloseTo(1000L, offset(150L));
assertThat(agentInfo.getWarnings()).isEqualTo(listOf("foo"));
assertThat(resolver.isInClassLoader("some.non.existing.class", cl)).isFalse();
assertThat(resources.string("test.key")).isEqualTo("\'foo\'");
assertThat(instance.getAgentHolderId()).isEmpty(); assertThat(instance.getAgentHolderId().get()).isEqualTo(id);
assertThat(testCloudSupport.getClientFacade().getAgentHolders().isEmpty());
assertThat(facade.listAgentHolders("foo", "bar")).isEmpty(); assertThat(containerIds).containsExactlyInAnyOrder(validContainer1.getId(), validContainer2.getId());
assertThat(WebUtils.retrieveHttpSessionFromWSSession(session).get()).isSameAs(httpSession);
assertThat(DockerCloudUtils.getImageId(description)).isNull();
assertThat(fty.canBeAgentOfType(new TestSBuildAgent())).isFalse(); assertThat(fty.canBeAgentOfType(new TestSBuildAgent().environmentVariable(DockerCloudUtils.ENV_CLIENT_ID, TestUtils.TEST_UUID.toString())));
assertThat(instance.getResolvedImageName()).isEmpty(); assertThat(instance.getResolvedImageName()).isEqualTo(Optional.of("resolved_image"));
assertThat(logs.toString()).isEqualTo("txt on stdout, txt on stdin, txt unknown std type");
assertThat(socket.getRemoteSocketAddress().equals(address)); assertThat(socket.getSoTimeout()).isEqualTo(42);
assertThat(DockerCloudUtils.getClientId(description)).isNull();
assertThat(pair.getKey()).isEqualTo("A"); assertThat(pair.getValue()).isEqualTo("1");
assertThat(WebUtils.isAuthorizedToRunContainerTests(session)).isTrue();
assertThat(DockerCloudUtils.tryParseAsUUID("Not an UUID")).isNull();
assertThat(msgBytes.length).isGreaterThan(writeBufferSize);
assertThat(testChannel.getWriteBufferContent()).containsExactly((byte) 1, (byte) 2); assertThat(testChannel.getWriteBufferContent()).containsExactly((byte) 3); assertThat(testChannel.getWriteBufferContent()).containsExactly((byte) 2);
assertThat(node.getAsLong("child")).isEqualTo(42); assertThat(node.getAsLong("child")).isEqualTo(Long.MAX_VALUE); assertThat(node.getAsLong("child")).isEqualTo(Long.MIN_VALUE);
assertThat(DockerCloudUtils.tryParseAsUUID(null)).isNull();
assertThat(task1.isRunning()).isTrue(); assertThat(task2.isRunning()).isTrue(); assertThat(task2b.executions).isEmpty(); assertThat(task2.isSuccessful()).isTrue(); assertThat(task2.isSuccessful()).isTrue(); assertThat(task2b.isSuccessful()).isTrue();
assertThat(instance.getAgentHolderName()).isEmpty(); assertThat(instance.getAgentHolderName()).isEqualTo(Optional.of("agent_holder_name"));
assertThat(params.getEnv()).isEmpty(); assertThat(params.getEnv()).isEqualTo(mapOf(pair("key1", "value1"), pair("key2", "value2")));
assertThat(agentInfo.getName()).isEqualTo(dockerClient.getServices().get(0).getName());
assertThat(services).hasSize(1); assertThat(services.get(0).getLabels()). containsEntry("key1", "value1"). containsEntry("key2", "value2");
assertThat(socket.isBound()).isFalse(); assertThat(socket.isBound()).isFalse();
assertThat(socket.isConnected()).isFalse(); assertThat(impl.isConnected()).isFalse(); assertThat(socket.isConnected()).isTrue(); assertThat(impl.isConnected()).isTrue();
assertThat(DockerCloudUtils.getInstanceId(description)).isEqualTo(TestUtils.TEST_UUID);
assertThat(agentInfo.getResolvedImage()).isEqualTo("resolved-image:latest");
assertThat(agentInfo.getWarnings()).isEqualTo(listOf("foo", "bar"));
assertThat(sw.getDuration().toMillis()).isCloseTo(500, offset(100L));
assertThat(channel.isOpen()).isTrue().as("channel is initially open"); assertThat(channel.isOpen()).isFalse();
assertThat(node.getAsLong("child")).isEqualTo(1L); assertThat(node.getAsLong("child")).isEqualTo(10L);
assertThat(DockerCloudUtils.getEnvParameter(description, "ABC")).isEqualTo("123"); assertThat(DockerCloudUtils.getEnvParameter(description, "CDF")).isEqualTo("456"); assertThat(DockerCloudUtils.getEnvParameter(description, "EFG")).isNull();
assertThat(new String(buffer, 0, n, StandardCharsets.UTF_8)).isEqualTo(msg);
assertThat(replicas).hasSize(1).first().matches(replica -> replica.getId().equals(taskId));
assertThat(agentInfo.getId()).isEqualTo(dockerClient.getServices().get(0).getId());
assertThat(stream.getType()).isSameAs(type);
assertThat(new NPipeSocket().getLocalSocketAddress()).isNull();
assertThat(config.getConfigurator().getEndpointInstance(DummyEndpoint.class)).isSameAs(endpoint);
assertThat(params.getLabels()).isEmpty(); assertThat(params.getLabels()).isEqualTo(mapOf(pair("key1", "value1"), pair("key2", "value2")));
assertThat(dockerClient.isClosed()).isFalse(); assertThat(dockerClient.isClosed()).isTrue();
assertThat(WebUtils.isAuthorizedToRunContainerTests(user)).isTrue();
assertThat(node.getAsInt("child")).isEqualTo(1); assertThat(node.getAsInt("child")).isEqualTo(10);
assertThat(DockerCloudUtils.getInstanceId(description)).isNull();
assertThat(DockerCloudUtils.getImageId(description)).isNull();
assertThat(instance.getTaskId()).isEmpty(); assertThat(instance.getTaskId().get()).isEqualTo(id);
assertThat(taskId).isEqualTo(container.getId()); assertThat(container.isRunning()).isTrue(); assertThat(interceptor.getInvocations()).hasSize(1).first() .matches(invocation -> invocation.matches("startContainer", container.getId()));
assertThat(DockerCloudUtils.getInstanceId(description)).isNull();
assertThat(client.findImageById(dockerImage.getId())).isSameAs(dockerImage);
assertThat(inputStream.isOpen()).isTrue(); assertThat(outputStream.isOpen()).isTrue(); assertThat(inputStream.isOpen()).isFalse(); assertThat(outputStream.isOpen()).isFalse();
assertThat(lock.isLocked()).isFalse(); assertThat(lock.isHeldByCurrentThread()).isTrue(); assertThat(lock.isLocked()).isTrue(); assertThat(lock.isHeldByCurrentThread()).isFalse(); assertThat(lock.isHeldByCurrentThread()).isTrue(); assertThat(ctrl2.executionStarted).isFalse(); assertThat(Stopwatch.measure(ctrl2::awaitExecution)).isBetween(Duration.ZERO, Duration.ofMillis(100));
assertThat(DockerCloudUtils.getImageId(description)).isEqualTo(TestUtils.TEST_UUID);
assertThat(dockerClient.getLocalImages()).hasSize(1).containsExactly(img);
assertThat(taskWithoutInitialDelay.isSuccessful()).isTrue(); assertThat(Stopwatch.measure(() -> waitUntil(taskWithInitialDelay::isSuccessful)).toMillis()). isCloseTo(2000, offset(150L));
assertThat(msgBytes.length).isGreaterThan(writeBufferSize);
assertThat(node.getAsInt("child")).isEqualTo(42); assertThat(node.getAsInt("child")).isEqualTo(Integer.MAX_VALUE); assertThat(node.getAsInt("child")).isEqualTo(Integer.MIN_VALUE); assertThat(node.getAsInt("unknownChild", 0)).isEqualTo(0);
assertThat(DockerCloudUtils.readUTF8String(stream, 5)). isEqualTo(bigText.substring(0, 5));
assertThat(unregisteredAgents).containsOnly(agentWithCloudAndInstanceIdsNotRemovable, otherAgent); assertThat(client.getErrorInfo()).isNull();
assertThat(container.getEnv()).containsEntry(DockerCloudUtils.ENV_PREFIX + "FOO1", "") .containsEntry("FOO2", "bar2");
assertThat(lock.isHeldByCurrentThread()).isFalse(); assertThat(lock.isHeldByCurrentThread()).isFalse();
assertThat(config.getConfigurationParameters()).isEmpty();
assertThat(DockerCloudUtils.tryParseAsUUID(TestUtils.TEST_UUID.toString())).isEqualTo(TestUtils.TEST_UUID);
assertThat(node.getAsString("child")).isEqualTo("A"); assertThat(node.getAsString("unknownChild", "B")).isEqualTo("B");
assertThat(facade.listAgentHolders("foo", "bar")).isEmpty(); assertThat(containerIds).isEmpty();
assertThat(container.getLabels()).containsEntry(DockerCloudUtils.NS_PREFIX + "foo1", "") .containsEntry("foo2", "bar2");
assertThat(containerInfo.getResolvedImage()).isEqualTo(containerInfo.getResolvedImage());
assertThat(node.getAsBigInt("child")).isEqualTo(BigInteger.ONE); assertThat(node.getAsBigInt("child")).isEqualTo(BigInteger.ONE); assertThat(node.getAsBigInt("child")).isEqualTo(BigInteger.TEN);
assertThat(client.getApiVersion()).isEqualTo(DockerAPIVersion.parse("9.99"));
assertThat(result).isEqualTo(TEST_NODE.editNode().put("foo", "baz"));
assertThat(logs.toString()).isEqualTo("txt on stdout, txt on stdin, txt unknown std type");
assertThat(msgBytes.length).isGreaterThan(writeBufferSize); assertThat(Stopwatch.measure(() -> { try { output.write(msgBytes); fail("Write operation must not complete."); } catch (WriteTimeoutIOException e) { } catch (IOException e) { fail("Unexpected exception.", e); } }).toMillis()).isCloseTo(1000, Offset.offset(150L));
assertThat(runtimeId1).isNotEqualTo(runtimeId2);
assertThat(node.getObjectValues().get("child").isNull()).isFalse(); assertThat(node.getObjectValues().get("child").isNull()).isTrue();
assertThat(task1.isRunning()).isTrue(); assertThat(task2.isRunning()).isTrue(); assertThat(task3.isRunning()).isTrue();
assertThat(buildServer.getAgentNameGenerator()).isNotNull(); assertThat(buildServer.getAgentNameGenerator().generateName(agent)).isEqualTo("test_container_name/172.17.0.1"); assertThat(buildServer.getAgentNameGenerator().generateName(agent)).isEqualTo("test_container_name"); assertThat(buildServer.getAgentNameGenerator().generateName(agent)).isEqualTo("test_container_name");
assertThat(result).isEqualTo(TEST_NODE);
assertThat(DockerCloudUtils.getStackTrace(new RuntimeException("test"))). isNotEmpty();
assertThat(services).hasSize(1); assertThat(services.get(0).getEnv()).isEqualTo(env);
assertThat(containerInfo.getName()).isEqualTo("test_image_name");
assertThat(baos.toByteArray()).isEqualTo(msgBytes);
assertThat(containers).hasSize(1).first().matches(container -> container.getId().equals(containerId)); assertThat(container.getLabels()).isEqualTo(mapOf(pair(DockerCloudUtils.SOURCE_IMAGE_ID_LABEL, img.getId())));
assertThat(clientFacade.getAgentHolders()).isEmpty();
assertThat(orchestrator.getDeploymentStatus()).isEqualTo(NOT_PERFORMED);
assertThat(testChannel.readWriteBufferContent()).isEqualTo(msg);
assertThat(resolver.resolve()).isEqualTo(resolved);
assertThat(WebUtils.isAuthorizedToRunContainerTests(session)).isFalse();
assertThat(containerInfo.getId()).isEqualTo(id);
assertThat(values).containsExactly("A", "B", "C"); assertThat(node.getArray("unknownChild", null)).isNull(); assertThat(node.getArray("unknownChild", def)).isSameAs(def);
assertThat(countingStream.getSkipCount()).isEqualTo(50); assertThat(countingStream.getReadCount()).isEqualTo(0); assertThat(cappedStream.available()).isEqualTo(0);
assertThat(Stopwatch.measure(runnable).toMillis()).isCloseTo(1000L, offset(150L));
assertThat(client.getApiVersion()).isEqualTo(targetVersion);
assertThat(WebUtils.isAuthorizedToRunContainerTests(session)).isFalse();
assertThat(params.getPullStrategy()).isSameAs(PullStrategy.NO_PULL); assertThat(params.pullStrategy(PullStrategy.PULL).getPullStrategy()).isEqualTo(PullStrategy.PULL);
assertThat(DockerCloudUtils.toShortId("beef")).isEqualTo("beef"); assertThat(DockerCloudUtils.toShortId("")).isEqualTo("");
assertThat(socket.isClosed()).isFalse(); assertThat(impl.isClosed()).isFalse(); assertThat(socket.isClosed()).isTrue(); assertThat(impl.isClosed()).isTrue();
assertThat(resources.text("A", new Object[0])).isEqualTo("1"); assertThat(resources.text("B", new Object[0])).isEqualTo("2");
assertThat(info.isRunning()).isTrue(); assertThat(info.isRunning()).isFalse(); assertThat(info.isRunning()).isFalse();
assertThat(failingRepeatableTask.executions).hasSize(3);
assertThat(service.getReplicas()).isEmpty(); assertThat(replicas).hasSize(1).first().matches(replica -> replica.getId().equals(taskId));
assertThat(node.getAsBigInt("child")).isEqualTo(BigInteger.valueOf(42)); assertThat(node.getAsBigInt("unknownChild", BigInteger.ZERO)).isEqualTo(BigInteger.ZERO);
assertThat(inputStream.isShutdown()).isFalse(); assertThat(inputStream.isShutdown()).isTrue();
assertThat(CreateAgentParameters.from(spec).getAgentHolderSpec()).isSameAs(spec);
assertThat(WebUtils.isAuthorizedToRunContainerTests((SUser) null)).isFalse(); assertThat(WebUtils.isAuthorizedToRunContainerTests(user)).isFalse(); assertThat(WebUtils.isAuthorizedToRunContainerTests(user)).isFalse();
assertThat(DockerCloudUtils.readUTF8String(stream, 1000)).isEqualTo("ABC"); assertThat(DockerCloudUtils.readUTF8String(TestInputStream.empty(), 1000)).isEqualTo("");
assertThat(instance.getErrorInfo()).isNull(); assertThat(instance.getStatus()).isIn(InstanceStatus.UNKNOWN, InstanceStatus.RESTARTING, InstanceStatus.RUNNING);
assertThat(logs.toString()).isEqualTo("txt on stdout, txt on stdin, txt unknown std type");
assertThat(Stopwatch.measure(() -> { try { input.read(); fail("Read operation must not complete."); } catch (SocketTimeoutException e) { } catch (IOException e) { fail("Read failed.", e); } }).toMillis()).isCloseTo(1000, Offset.offset(150L));
assertThat(WebUtils.retrieveHttpSessionFromWSSession(session).isPresent()).isFalse();
assertThat(testChannel.readWriteBufferContent()).isEqualTo(msg);
assertThat(DockerCloudUtils.getLogger(Object.class)).isNotNull();
assertThat(info.getCreationTimestamp()).isEqualTo(Instant.MIN);
assertThat(logs.toString()).isEqualTo("txt on stdout, txt on stdin, txt unknown std type");
assertThat(values).containsExactly("A", "B", "C");
assertThat(containers).hasSize(1); assertThat(containers.get(0).getEnv()).isEqualTo(env);
assertThat(inspection.getName()).isEqualTo("container_name");
assertThat(DockerCloudUtils.readUTF8String(stream)).isEqualTo(bigText); assertThat(DockerCloudUtils.readUTF8String(stream, -1)).isEqualTo(bigText);
assertThat(instance.getStartedTime()).isInSameMinuteAs(new Date());
assertThat(DockerCloudUtils.toShortId("1abe11edbeef0000000000000000000000")).isEqualTo("1abe11edbeef");
assertThat(resolver.resolve()).isEqualTo(OfficialAgentImageResolver.REPO + ":" + version);
assertNotNull(s1.getApiGatewayBaseUrl()); assertEquals(EuropeanaStaticUrl.API_GATEWAY_URL, s1.getApiGatewayBaseUrl()); assertEquals(apiGatewayBaseUrl, s2.getApiGatewayBaseUrl());
assertNotNull(resultMap); assertEquals(1, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.limit")); assertEquals(new Integer(30), resultMap.get("f.proxy_dc_contributor.facet.limit"));
assertEquals(expected, formatter.parse(input, Locale.getDefault()));
assertNotNull(resultMap); assertEquals(1, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); assertEquals(new Integer(0), resultMap.get("f.proxy_dc_contributor.facet.offset"));
assertNotNull(parameter); assertEquals(new Integer(0), parameter.getValue());
assertNull(s1.getApikeyValidateUrl());
assertEquals(EuropeanaStaticUrl.EUROPEANA_PORTAL_URL, s1.getPortalBaseUrl()); assertEquals(baseUrl, s2.getPortalBaseUrl());
assertNotNull(resultMap); assertEquals(1, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); assertEquals(new Integer(0), resultMap.get("f.proxy_dc_contributor.facet.offset"));
assertEquals("https: baseUrl = "https: Api2UrlService s2 = new Api2UrlService(null, baseUrl, null, null); assertEquals("https: baseUrl = "http: Api2UrlService s3 = new Api2UrlService(null, baseUrl, null, null);
assertEquals(Api2UrlService.API_BASEURL, s1.getApi2BaseUrl()); assertEquals(baseUrl, s2.getApi2BaseUrl());
assertNotNull(resultMap); assertEquals(2, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); assertEquals(new Integer(0), resultMap.get("f.proxy_dc_contributor.facet.offset")); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); assertEquals(new Integer(0), resultMap.get("f.PROVIDER.facet.offset"));
assertNotNull(resultMap); assertEquals(1, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); assertEquals(new Integer(0), resultMap.get("f.proxy_dc_contributor.facet.offset"));
assertNotNull(resultMap); assertEquals(SolrFacetType.values().length + 1, resultMap.size()); assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.limit")); assertTrue(resultMap.containsKey("f.DATA_PROVIDER.facet.limit")); assertEquals(new Integer(30), resultMap.get("f.proxy_dc_contributor.facet.limit")); assertEquals(new Integer(50), resultMap.get("f.DATA_PROVIDER.facet.limit"));
assertEquals("https: s1.getThumbnailUrl("https: apiGatewayBaseUrl = "api.europeana.eu";
assertNotNull(parameter); assertEquals(new Integer(-3), parameter.getValue());
assertNotNull(parameter); assertEquals(new Integer(0), parameter.getValue());
assertNotNull(mWXText.getView().getLayoutParams()); assertEquals(100, mWXText.getView().getLayoutParams().height); assertEquals(100, mWXText.getView().getLayoutParams().width); assertEquals(0, mWXText.getView().getPaddingLeft()); assertEquals(0, mWXText.getView().getPaddingTop()); assertEquals(0, mWXText.getView().getPaddingRight()); assertEquals(0, mWXText.getView().getPaddingBottom());
assertTrue(mWXText.getView().isEnabled());
assertNotNull(mWXText.getView());
assertNotNull(mWXText.getView().getLayoutParams()); assertEquals(100, mWXText.getView().getLayoutParams().height); assertEquals(100, mWXText.getView().getLayoutParams().width);
assertEquals(0, mWXText.getView().getPaddingLeft()); assertEquals(0, mWXText.getView().getPaddingTop()); assertEquals(0, mWXText.getView().getPaddingRight()); assertEquals(0, mWXText.getView().getPaddingBottom());
assertTrue(mWXText.getView().isEnabled()); assertTrue(mWXText.getView().getAlpha()>=0.799 && mWXText.getView().getAlpha()<=0.811); assertFalse(mWXText.getView().isEnabled());
assertEquals(1, mWXDiv.childCount()); assertEquals(2, mWXDiv.childCount()); assertEquals(child2, mWXDiv.getChild(1)); assertEquals(3, mWXDiv.childCount()); assertEquals(child3, mWXDiv.getChild(1));
assertTrue(tutil.equals(INT_COMP,rint,util.convert(lint)));
assertTrue(tutil.equals(INT_COMP,lint,util.convert(rint)));
assertFalse(pa.getClasses().containsKey("M.C"));
assertArrayEquals(new byte[]{1,2,3}, util.convert(bytes)); assertTrue(tutil.equals(BYTE_COMP,bytes,util.convert(new byte[]{1,2,3})));
assertThat(batchSize).isEqualTo(42);
assertThat(result).hasSize(4); assertThat(result).containsEntry("l1[0]", "A"); assertThat(result).containsEntry("l1[1]", "B"); assertThat(result).containsEntry("l1[2]", "C"); assertThat(result).containsEntry("l2[0]", 42);
assertThat(result).hasSize(2); assertThat(result).containsEntry("nested.key", "nestedValue"); assertThat(result).containsEntry("nested.complex.key", 42);
assertThat(TagUtils.createTagValue("this-value-is-over-255-characters-long ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")) .isEqualTo(TagValue.create("<invalid>"));
assertThat(TagUtils.createTagValue("my-tag-value")).isEqualTo(TagValue.create("my-tag-value"));
assertThat(TagUtils.createTagValue("non-printable-character-\\u007f")) .isEqualTo(TagValue.create("<invalid>"));
assertThat(result).hasSize(2); assertThat(result).containsEntry("[0].name", "Hans"); assertThat(result).containsEntry("[1].name", "Fritz");
assertEquals("adaptiveForm", aemFormModel.getFormType()); assertEquals("adaptiveDocument", aemFormModel.getFormType());
assertEquals("/path/to/theme", aemFormModel.getThemeRef()); assertEquals("/path/to/theme", aemFormModel.getThemeRef());
assertEquals(GUIDE_RESOURCE, aemFormModel.getFormPath()); assertEquals(IC_RESOURCE, aemFormModel.getFormPath());
assertNull(aemFormModel.getIcChannel()); assertEquals("webChannel", aemFormModel.getIcChannel());
assertEquals("/content/forms/af/form1/jcr:content/guideContainer.html", aemFormModel.getGuidePath()); assertEquals("/content/forms/af/form2/channels/web/jcr:content/guideContainer.html", aemFormModel.getGuidePath());
assertTrue(aemFormModel.getIsValidForm()); assertTrue(aemFormModel.getIsValidForm());
assertEquals("fd/sample/af/components/aemform/v1/aemform",aemFormModel.getExportedType()); assertEquals("fd/sample/af/components/aemform/v1/aemform",aemFormModel.getExportedType());
assertEquals(todoItemText, itemCaptor.getValue().getText());
assertNotNull(result); assertNotNull(pentahoUser); assertEquals("pentaho0", pentahoUser); assertNotNull(pentahoUser); assertEquals("pentaho4", pentahoUser);
assertEquals(PENTAHO_USER, username);
assertEquals(0, manager.getSize()); assertEquals(0, manager.getSize());
assertNotNull(pentahoUser); assertEquals("tiffany", pentahoUser);
assertNotNull(manager); assertNotNull(ticket); assertFalse(ticket.isExpired()); assertEquals(ticket.getId(), removed.getId()); assertEquals(ticket.getIdAsString(), removed.getIdAsString()); assertEquals(ticket.getCreationTime(), removed.getCreationTime()); assertEquals(ticket.getRequistingApplication(), removed.getRequistingApplication()); assertEquals(ticket.getRequestingApplicationUsername(), removed.getRequestingApplicationUsername()); assertEquals(ticket.getValidityDuration(), removed.getValidityDuration()); assertEquals(0, manager.getSize());
assertTrue(initialSize >= 0); assertEquals(i + 1 + initialSize, manager.getSize()); assertTrue(manager.getSize() == initialSize);
assertNotNull(stream); assertNotNull(pentahoUser); assertEquals("tiffany", pentahoUser);
assertNotNull(ticket); assertEquals(validity, ticket.getValidityDuration().getStandardSeconds()); assertEquals("test", ticket.getRequistingApplication()); assertEquals("testUser", ticket.getRequestingApplicationUsername()); assertTrue(ticket.getCreationTime().compareTo(start) >= 0); assertTrue(ticket.getCreationTime().compareTo(end) <= 0);
assertEquals(0, TransitioningCompositeClock.interpolate(0, 10, 0), tol); assertEquals(1, TransitioningCompositeClock.interpolate(1, 10, 0), tol); assertEquals(10, TransitioningCompositeClock.interpolate(0, 10, 1), tol); assertEquals(5, TransitioningCompositeClock.interpolate(0, 10, 0.5), tol); assertEquals(0.0, dydx0, tol); assertEquals(0.0, dydx1, tol);
assertEquals(45f, position.getLatitude());
assertTrue("Got point from " + transformed, transformed != null); assertEquals(6672130.96106858, transformed.getCoordinate().y, 1e-9); assertEquals(385615.37435276626, transformed.getCoordinate().x, 1e-9);
assertEquals(4, feature.getAttributeCount());
assertTrue("Should contain key \'lol\'", keys.contains(key));
assertFalse("Channel should not permitted if there\'s no textual capabilities", handler.shouldBeIncluded(channel, getGuestUser()));
assertEquals("1.0", response.getVersion()); assertEquals("ERROR", response.getStatus()); assertEquals("No such API key", response.getStatusMessage()); assertNull(response.getResult());
assertNotNull("Must contain actual UUID", actualResponse.getString("uuid")); assertNotNull("Must contain some URL", actualResponse.getString("url"));
assertEquals(PARAM_LAT, 6822546.781459001, getResponseJSON().getDouble(PARAM_LAT), 0.0); assertEquals(PARAM_LON, 327578.78108392254, getResponseJSON().getDouble(PARAM_LON), 1e-9);
assertNull(new HtmlDoc(null).getFiltered());
assertNotNull(wmsLayers); assertTrue("Finds atleast one WMS Layer", wmsLayers.size() > 0); assertNotNull(wfsLayers); assertTrue("Finds atleast one WFS Layer", wfsLayers.size() > 0);
assertEquals("Map should have one key", 1, values1.size()); assertEquals("Map should have two keys", 2, values2.size());
assertNull("Null metadata returns null id", LayerJSONFormatter.getFixedDataUrl(null)); assertNull("Empty metadata returns null id", LayerJSONFormatter.getFixedDataUrl("")); assertEquals("Non http-starting metadata returns as is", "testing", LayerJSONFormatter.getFixedDataUrl("testing"));
assertEquals("Required field missing \'options.apiKey\'", e.getMessage()); assertEquals("Required field missing \'options.apiKey\'", e.getMessage());
assertTrue("Result should be empty object", result.length() == 0);
assertTrue(it.hasNext()); assertFalse(it.hasNext()); assertNotNull(f1); assertEquals("ABC_112", f1.getID()); assertEquals("bar", f1.getAttribute("foo")); assertEquals("sure", qux.get("deep")); assertEquals(expectedGeometry, f1.getDefaultGeometry());
assertTrue("JSONObject was not created", obj == null);
assertNull("URL should be unchanged", validated);
assertFalse("Should return false if given null", success);
assertEquals("ids should be set", 123L, myPlaces.get(0).getId()); assertEquals("ids larger than Integer.MAX work", 9876543210123456L, myPlaces.get(1).getId());
assertEquals("lon 3067-45326-3067", lon, p4.getLon(), 0.01); assertEquals("lat 3067-4326-3067", lat, p4.getLat(), 0.01);
assertTrue("Should get true", result); assertTrue("Should get true", result); assertTrue("Should get false", !result); assertTrue("Null should yield default value \'true\'", result); assertTrue("Null should yield default value \'false\'", !result);
assertEquals(1, map.size()); assertEquals("foo", map.keySet().iterator().next()); assertEquals("bar", map.values().iterator().next());
assertEquals("Parameter is set correctly", ViewTypes.USER, params.getHttpParam(ViewTypes.VIEW_TYPE));
assertEquals("Values in both arrays should match", values1[i], values2[i]); assertEquals("Non-existing list should be zero length", values3.length, 0);
assertEquals(expected, actual);
assertTrue("Should get expected simple request" + xmlDiff, xmlDiff.similar());
assertTrue("\'M\' is uppercase only", ConversionHelper.isOnlyUpperCase("M")); assertTrue("\'MOO\' is uppercase only", ConversionHelper.isOnlyUpperCase("MOO")); assertFalse("\'Moo\' is NOT uppercase only", ConversionHelper.isOnlyUpperCase("Moo")); assertFalse("<null> is NOT uppercase only", ConversionHelper.isOnlyUpperCase(null));
assertEquals("1.0", response.getVersion()); assertEquals("OK", response.getStatus()); assertNotNull(response.getResult()); assertEquals(81, response.getResult().size());
assertEquals(3, map.size()); assertEquals("a", keys.next()); assertEquals("c", keys.next()); assertEquals("e", keys.next()); assertEquals("b", values.next()); assertEquals("d", values.next()); assertEquals("f", values.next());
assertEquals(2, intersection.size()); assertTrue(intersection.contains("bar")); assertTrue(intersection.contains("baz"));
assertNotNull("Values shouldn\'t be null", values); assertEquals("Should have one value", 1, values.size()); assertEquals("Should have one value", "0.3", test.optString("testKey"));
assertEquals(2, f.getProperties().size()); assertEquals(5, cs.size()); assertEquals(125.6, c.x, 1e6); assertEquals(10.1, c.y, 1e6); assertEquals(10.1, c.x, 1e6); assertEquals(125.6, c.y, 1e6); assertEquals(1, geom.getNumInteriorRing()); assertEquals("Dinagat Islands", name);
assertEquals("Bounds is transformed correctly", "EPSG:4326", CRS.toSRS(crs)); assertEquals(59.80841, bounds.getMinX(), 1e-5); assertEquals(19.47275, bounds.getMinY(), 1e-5); assertEquals(70.09210, bounds.getMaxX(), 1e-5); assertEquals(31.58671, bounds.getMaxY(), 1e-5);
assertTrue("Result should be empty object", result.length() == 0);
assertEquals(PARAM_LAT, 61.4980214, getResponseJSON().getDouble(PARAM_LAT), 0.00001); assertEquals(PARAM_LON, 23.7603118, getResponseJSON().getDouble(PARAM_LON), 0.00001);
assertEquals("lon", lon, p3.getLon(), 0.0); assertEquals("lat", lat, p3.getLat(), 0.0);
assertEquals("Default view", view.getName()); assertEquals("DEFAULT", view.getType()); assertEquals(true, view.isDefault()); assertEquals(true, view.isPublic()); assertEquals(false, view.isOnlyForUuId()); assertEquals("servlet", view.getApplication()); assertEquals("index", view.getPage()); assertNotNull(bundles); assertEquals(1, bundles.size()); assertEquals(foobar.getName(), bundles.get(0).getName());
assertEquals(1234L, MyPlacesFeaturesWFSTRequestBuilder.removePrefixFromId("my_places.1234"));
assertEquals("Size limit reached: 400 B", e.getMessage());
assertNotNull(m); assertNotNull(m.getDimensions()); assertEquals(EXPECTED_DIMENSIONS_COUNT, m.getDimensions().size()); assertEquals(EXPECTED_DIMENSION_ID, d.getId()); assertNotNull(dimensionsAllowedValues); assertEquals(EXPECTED_DIMENSION_ALLOWED_VALUES.size(), dimensionsAllowedValues.size());
assertEquals(expected, actual);
assertTrue("Should get 20", result == 20); assertTrue("Should get 0", result == 0);
assertNull(schema); assertFalse(it.hasNext());
assertEquals("Should get 10", workerCount, "10"); assertTrue("Should get \'localhost\'", redisHostname.equals("localhost")); assertEquals("Should get 6379", redisPort, "6379");
assertNotNull("Could not parse page info", lastPage); assertTrue("The response wasn\'t the last page.", lastPage); assertNotNull("Could not parse page info", lastPage); assertFalse("The response was the last page.", lastPage);
assertEquals(expected, actual);
assertEquals("Title", item.getTitle(), "carting.pint.invent"); assertEquals("Lat", item.getLat(), 6675293.715526561, 0.1); assertEquals("Lon", item.getLon(), 385547.65760422836, 0.1);
assertEquals("100,0 MiB", ignoreNumberFormatting(IOHelper.humanReadableByteCount(hundredMegsInBytes)));
assertTrue(geom instanceof MultiPolygon); assertEquals(14, mp.getNumGeometries()); assertEquals(194831.89, first.x, 1e6); assertEquals(6947066.665, first.y, 1e6); assertTrue(Double.isNaN(first.z));
assertEquals("Hello world", new HtmlDoc("Hello world").getFiltered());
assertTrue("Should get \'lollol\'", Arrays.equals(testBytes, value.getBytes()));
assertNotEquals("Targets response is empty.", "", json); assertTrue("Goal has no targets.", goal.has("targets")); assertTrue("Target has no indicators", target.has("indicators"));
assertTrue("Should get expected and-filter request" + xmlDiff, xmlDiff.similar());
assertEquals(2, f.getProperties().size()); assertEquals(2, cs.size()); assertEquals(125.6, c.x, 1e6); assertEquals(10.1, c.y, 1e6); assertEquals(10.1, c.x, 1e6); assertEquals(125.6, c.y, 1e6); assertEquals("Dinagat Islands", name);
assertEquals("layers", readFileAsJSON("/json/layers/layer.json").optString("name")); assertEquals("root", readFileAsJSON("/test.json").optString("name")); assertEquals("layers", layer.optString("name"));
assertFalse(it.hasNext()); assertNotNull(f); assertEquals("feature.0", f.getID()); assertEquals(wkt.read("LINESTRING (1.1 1.2, 1.3 1.4)"), f.getAttribute("otherGeometry")); assertEquals(wkt.read("POINT (0.1 0.1)"), f.getDefaultGeometry());
assertEquals(original[i], rest[0]); assertEquals("Rest should be empty", rest.length, 0);
assertTrue(options.has("format")); assertFalse("\'format\' value should have been removed since the layer doesn\'t support RESTful WMTS", options.has("format"));
assertTrue("Should get \'lollol\'", test.equals(value));
assertNotNull(all); assertEquals(0, all.size()); assertEquals(-1L, view.getId()); assertNull(view.getUuid()); assertEquals(0L, view.getId()); assertNotNull(view.getUuid()); assertEquals(36, view.getUuid().length()); assertNotNull(all); assertEquals(1, all.size()); assertTrue(view == obj);
assertEquals(2, geom.getNumGeometries()); assertEquals(2, ls1.getNumPoints()); assertEquals(2, ls2.getNumPoints()); assertEquals(103.0, c2.x, 1e6); assertEquals(3.0, c2.y, 1e6);
assertFalse("Should return false if given wrong plugin", success);
assertFalse("Did not parse any data from response.", valuesByRegion.isEmpty());
assertEquals("mvt", opts.getRenderMode()); assertEquals(3, style.getJSONObject("fill").getJSONObject("area").getInt("pattern"));
assertEquals("root", AppSetupHelper.readViewFile("/test.json").optString("name")); assertEquals("apps", AppSetupHelper.readViewFile("/json/apps/custom/appsetup.json").optString("name")); assertEquals("apps", apps.optString("name")); assertEquals("views", views.optString("name")); assertEquals("root", AppSetupHelper.readViewFile("test.json").optString("name"));
assertNotSame("Expect \'gtk_wfs\' to return some content", "", SLDStore.getSLD("gtk_wfs")); assertEquals("Expect <null> to return default SLD", defaultSLD, SLDStore.getSLD(null)); assertEquals("Expect \'test dummy random stuff\' to return default SLD", defaultSLD, SLDStore.getSLD("test dummy random stuff"));
assertFalse("Channel should not permitted for guest", handler.shouldBeIncluded(channel, getGuestUser())); assertTrue("Channel should be permitted for user", handler.shouldBeIncluded(channel, getLoggedInUser()));
assertEquals("Parameter is set correctly", ViewTypes.USER, params.getHttpParam(ViewTypes.VIEW_TYPE));
assertTrue("Got crs for proj " + WKTHelper.PROJ_EPSG_4326, crs != null); assertTrue("Got crs for proj " + WKTHelper.PROJ_EPSG_3067, crs != null); assertTrue("Null crs for invalid proj " + PROJ_INVALID, crs == null);
assertNotNull(result); assertEquals(EXPECTED_TIMEPERIOD_FILTERED_AND_SORTED_VALUES, result);
assertEquals("Parameter is set correctly", ViewTypes.USER, params.getHttpParam(ViewTypes.VIEW_TYPE));
assertTrue("JSONObject was not created", obj == null); assertTrue("JSONObject was not created", obj == null);
assertEquals("Should have two entries", 2, map.size()); assertEquals("Should parse finnish", "test suomi", map.get("fi")); assertEquals("Should parse english", "test english", map.get("en"));
assertNotNull("dimension has no id", dimension.optString("id", null)); assertNotNull("dimension has no codes", dimension.optJSONArray("codes"));
assertEquals(2, geom.getNumGeometries()); assertEquals(100.0, c.x, 1e6); assertEquals(0.0, c.y, 1e6); assertEquals(2, cs.size()); assertEquals(101.0, c.x, 1e6); assertEquals(0.0, c.y, 1e6); assertEquals(102.0, c.x, 1e6); assertEquals(1.0, c.y, 1e6);
assertEquals(2, geom.getNumGeometries()); assertEquals(0, p1.getNumInteriorRing()); assertEquals(5, cs1.size()); assertEquals(102.0, c1.x, 1e6); assertEquals(2.0, c1.y, 1e6); assertEquals(1, p2.getNumInteriorRing()); assertEquals(5, cs2.size()); assertEquals(100.8, c2.x, 1e6); assertEquals(0.8, c2.y, 1e6);
assertEquals("Parameter is set correctly", ViewTypes.USER, params.getHttpParam(ViewTypes.VIEW_TYPE));
assertEquals("lon", 389790.212234411, p2.getLon(), 1e-9); assertEquals("lat", 6665752.471279182, p2.getLat(), 0.0); assertEquals("lon", 389790.212234411, p3.getLon(), 1e-9); assertEquals("lat", 6665752.471279182, p3.getLat(), 0.0);
assertTrue("Should get 20.0", result == 20.0); assertTrue("Should get 0.0", result == 0.0);
assertEquals(2, map.size()); assertEquals("foo", keys.next()); assertEquals("baz", keys.next()); assertEquals("bar", values.next()); assertEquals("qux", values.next());
assertNotNull(schema); assertNotNull(f1.getID()); assertEquals(10000001, f1.getAttribute("placeId")); assertNotNull(f2.getID()); assertEquals(10000002, f2.getAttribute("placeId")); assertEquals("123", f3.getID()); assertEquals(10000003, f3.getAttribute("placeId")); assertEquals("ABC_321", f4.getID()); assertEquals(10000004, f4.getAttribute("placeId"));
assertEquals("10163", capabilities.getUpdateSequence());
assertTrue("Should get \'test\'", result.equals(test)); assertTrue("Should get \'fail\'", result.equals("fail"));
assertEquals(60.19837505386789, p.getLat(), 0.1); assertEquals(24.93546499999964, p.getLon(), 0.1);
assertTrue("Channel should be permitted if there\'s textual capabilities, no blacklist and user is permitted", handler.shouldBeIncluded(channel, getGuestUser()));
assertArrayEquals(expecteds, actuals, 0); assertArrayEquals(expecteds2, actuals2, 0); assertArrayEquals(expecteds3, actuals3, 0);
assertNotNull("Indicator doesn\'t have source.", sources.get("en"));
assertTrue("Got point from " + WKT_POINT, point != null); assertTrue("Point x correct", point.getCoordinate().x == 30); assertTrue("Point y correct", point.getCoordinate().y == 10); assertTrue("Got polygon from " + WKT_POLYGON, polygon != null);
assertEquals(2, geom.getNumGeometries()); assertEquals(100.0, c1.x, 1e6); assertEquals(0.0, c1.y, 1e6); assertEquals(101.0, c2.x, 1e6); assertEquals(1.0, c2.y, 1e6);
assertEquals("1.0", response.getVersion()); assertEquals("OK", response.getStatus()); assertNull(response.getStatusMessage()); assertNotNull(response.getResult()); assertEquals(0, response.getResult().size());
assertTrue(Arrays.equals(input, out.toByteArray()));
assertEquals(2, f.getProperties().size()); assertEquals(125.6, c.x, 1e6); assertEquals(10.1, c.y, 1e6); assertEquals("Dinagat Islands", name);
assertEquals("Should have same WKT", WKT_POINT, str);
assertTrue("Inserting inner object should be successful", JSONHelper.putValue(obj, "inner", innerObj)); assertEquals("JSONObject \'inner\' should return innerObj", JSONHelper.getJSONObject(obj, "inner"), innerObj);
assertTrue("Should get expected query for myplaces GFI " + xmlDiff, xmlDiff.similar());
assertEquals("Map should be empty", 0, values.size());
assertFalse("Channel should not permitted for guest", handler.shouldBeIncluded(channel, getGuestUser())); assertFalse("Channel should be permitted for user", handler.shouldBeIncluded(channel, getLoggedInUser())); assertTrue("Channel should not permitted for guest", handler.shouldBeIncluded(channel, getGuestUser())); assertTrue("Channel should be permitted for user", handler.shouldBeIncluded(channel, getLoggedInUser()));
assertTrue("Should get 20L", result == 20L); assertTrue("Should get 0L", result == 0L);
assertEquals("Should get \'localhost\'", PropertyUtil.getOptional("redisHostname"), "localhost"); assertEquals("Should get \'10\'", PropertyUtil.getOptional("workerCount"), "10"); assertEquals("Should get <null>", PropertyUtil.getOptional("non-existing-property"), null);
assertFalse("Invalid search term: " + sc.getSearchString(), channel.isValidSearchTerm(sc)); assertTrue("Valid search term: " + sc.getSearchString(), channel.isValidSearchTerm(sc));
assertTrue(it.hasNext()); assertFalse(it.hasNext()); assertNotNull(f1); assertEquals("ABC_123", f1.getID()); assertEquals("bar", f1.getAttribute("foo")); assertThat(expectedSimpleArray, Is.is(f1.getAttribute("mySimpleIntArray"))); assertEquals(expectedGeometry, f1.getDefaultGeometry());
assertEquals(6, feature.getAttributeCount());
assertEquals("Should have 6 params", 6, model.getDimensions().size());
assertEquals(10L, list1.getXScale(3).longValue()); assertEquals(6L, list1.getXScale(5).longValue());
assertEquals(32, v.getInteger().intValue()); assertEquals(-1, v.getInteger().intValue());
assertNull(oiis.getLogDir()); assertEquals("/tmp", oiis.getLogDir());
assertEquals(Double.NaN, list1.getAverage()); assertEquals(-29.67, list1.getAverage());
assertEquals(Long.MIN_VALUE, dl.getMaxValueFromList("Battery")); assertEquals(Long.MIN_VALUE, dl.getMaxValueFromList("Cpu")); assertEquals(Long.MIN_VALUE, dl.getMaxValueFromList("Memory")); assertEquals(Long.MIN_VALUE, dl.getMaxValueFromList("Storage"));
assertTrue(stack.isTopString()); assertFalse(stack.isTopString());
assertEquals(10L, list1.getY(0).longValue()); assertEquals(3L, list1.getY(1).longValue()); assertEquals(-100L, list1.getY(2).longValue());
assertTrue(list1.isEmpty()); assertFalse(list1.isEmpty()); assertFalse(list1.isEmpty()); assertFalse(list1.isEmpty());
assertFalse(m.isAlive());
assertEquals(0, list1.getXScale(3).longValue()); assertEquals(0, list1.getXScale(5).longValue());
assertEquals(1, list1.getSize()); assertEquals(2, list1.getSize()); assertEquals(102, list1.getSize());
assertNull(oiis.getCurrentScript()); assertEquals("test.tst", oiis.getCurrentScript());
assertFalse(oiis.isStartMainLogCalled()); assertTrue(oiis.isStartMainLogCalled()); assertFalse(oiis.isStartMainLogCalled());
assertTrue(stack.isTopBoolean()); assertFalse(stack.isTopBoolean());
assertNotNull(dl.getPNGpath("BATTERY")); assertTrue(isValidFileName(dl.getPNGpath("STORAGE")));
assertEquals(Double.NaN, list1.getDelta()); assertEquals(29.03, list1.getDelta());
assertEquals(30000L, list1.getMax().longValue());
assertEquals(true, c.getAroSettings().isEnabled());
assertNotNull(dl.getPNGpath("BATTERY")); assertTrue(isValidFileName(dl.getPNGpath("MEMORY")));
assertNotNull("dl.getMsgsLogged() is null", dl.getMsgsLogged()); assertEquals(0, dl.getMsgsLogged().size());
assertEquals(-1L, list1.getX(0).longValue()); assertEquals(30L, list1.getX(1).longValue()); assertEquals(31L, list1.getX(2).longValue());
assertEquals(Long.MAX_VALUE, dl.getMinValueFromList("Battery")); assertEquals(Long.MAX_VALUE, dl.getMinValueFromList("Cpu")); assertEquals(Long.MAX_VALUE, dl.getMinValueFromList("Memory")); assertEquals(Long.MAX_VALUE, dl.getMinValueFromList("Storage"));
assertEquals(Long.MIN_VALUE, list1.getMax().longValue());
assertEquals(Long.MAX_VALUE, list1.getMin().longValue());
assertEquals(Message.INFO_MSG, msg.getType()); assertEquals("aInfoMessage", msg.getMessage()); assertEquals(date, msg.getTimestamp()); assertEquals(20, msg.getLine()); assertEquals("here/aScript1.txt", msg.getScriptName());
assertEquals(-30L, list1.getMin().longValue());
assertEquals(Message.ERROR_MSG, msg.getType()); assertEquals("aErrorMsg", msg.getMessage()); assertEquals(date, msg.getTimestamp()); assertEquals(2, msg.getLine()); assertEquals("here/aScript.txt", msg.getScriptName());
assertFalse(v1.isInteger()); assertTrue(v2.isInteger());
assertTrue(v1.isString()); assertFalse(v2.isString());
assertNotNull(actionLogger.getActions()); assertEquals(0, actionLogger.getActions().size());
assertTrue(stack.isTopInteger()); assertFalse(stack.isTopInteger());
assertNotNull(dl.getPNGpath("BATTERY")); assertTrue(isValidFileName(dl.getPNGpath("CPU")));
assertNotNull(dl.getPNGpath("BATTERY")); assertTrue(isValidFileName(dl.getPNGpath("BATTERY")));
assertEquals(Message.WARN_MSG, msg.getType()); assertEquals("aWarningMessage", msg.getMessage()); assertEquals(date, msg.getTimestamp()); assertEquals(-1, msg.getLine()); assertEquals("here/aScript2.txt", msg.getScriptName());
assertEquals(Double.NaN, dl.getAveValueFromList("Battery"), 0.1); assertEquals(Double.NaN, dl.getAveValueFromList("Cpu"), 0.1); assertEquals(Double.NaN, dl.getAveValueFromList("Memory"), 0.1); assertEquals(Double.NaN, dl.getAveValueFromList("Storage"), 0.1);
assertTrue(stack.isTopFloat()); assertFalse(stack.isTopFloat());
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing());
assertEquals(String.format("count(abs(%s))", DSL.ref("integer_value", INTEGER)), countAggregator.toString());
assertEquals(1, ordering.compare(longValue(5L), longValue(4L))); assertEquals(0, ordering.compare(longValue(5L), longValue(5L))); assertEquals(-1, ordering.compare(longValue(4L), longValue(5L)));
assertNotEquals(null, tree);
assertNotNull(ipValue.hashCode());
assertEquals(ExprCoreType.UNKNOWN, LITERAL_NULL.type());
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing());
assertEquals(ES_TEXT_KEYWORD, new ElasticsearchExprTextKeywordValue("A").type());
assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isNull()); assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isNull()); assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isNull());
assertEquals(DOUBLE, sqrt.type()); assertTrue(sqrt.valueOf(valueEnv()).isMissing());
assertThat( buildTypeMapping(Arrays.asList( named("avg(age)", new AvgAggregator(Arrays.asList(ref("age", INTEGER)), INTEGER))), Arrays.asList(named("name", ref("name", STRING)))), containsInAnyOrder( map("avg(age)", INTEGER), map("name", STRING) ));
assertEquals(nullValue(), eval(dsl.time(nullRef))); assertEquals(missingValue(), eval(dsl.time(missingRef))); assertEquals(TIME, expr.type()); assertEquals(new ExprTimeValue("01:01:01"), eval(expr)); assertEquals("time(\\"01:01:01\\")", expr.toString()); assertEquals(TIME, expr.type()); assertEquals(new ExprTimeValue("01:01:01"), eval(expr)); assertEquals("time(TIME \'01:01:01\')", expr.toString());
assertNotNull(parser.parse("SELECT * FROM logs_2020_01")); assertNotNull(parser.parse("SELECT * FROM logs-2020-01"));
assertNotNull(e);
assertNotNull(table);
assertEquals( ImmutableSet.of( alias("AVG(age)", aggregate("AVG", qualifiedName("age")))), querySpec.getAggregators());
assertNotNull(e);
assertNotNull(parser.parse("SELECT * FROM .kibana"));
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Duration.ofSeconds(1)), expr.valueOf(env));
assertEquals( "The qualifier [a] of qualified name [a.integer_value] must be an index name or its alias", error.getMessage());
assertEquals( line( "John,Seattle", "John,\'=Seattle", "John,\'+Seattle", "\'-John,Seattle", "\'@John,Seattle", "John,Seattle=" ), csv.getLines() );
assertThat(parse(response), containsInAnyOrder(ImmutableMap.of("type", "cost", "region", "us", "avg", 20d), ImmutableMap.of("type", "sale", "region", "uk", "avg", 130d)));
assertEquals( "The qualifier [nested_field] of qualified name [nested_field.integer_value] " + "must be an index name or its alias", exception.getMessage() );
assertNotNull(parser.parse("SELECT name AS \\"n\\", age AS `a` FROM accounts"));
assertEquals(plan, protectedPlan);
assertEquals( headers("\\"na,me\\"", "\\",,age\\""), csv.getHeaders() );
assertFalse(request.isScrollStarted()); assertTrue(request.isScrollStarted());
assertEquals(exactlyMatchBuilder, resolver.resolve(functionSignature));
assertEquals("Fail to pop context due to no environment present", exception.getMessage());
assertThat(pi.valueOf(valueEnv()), allOf(hasType(DOUBLE), hasValue(Math.PI)));
assertTrue(msg instanceof ElasticsearchErrorMessage);
assertFalse(explainRequest.isSupported());
assertEquals( headers("name", "\'=age"), csv.getHeaders() );
assertNotEquals(null, tree);
assertThat( fieldTypes, allOf(aMapWithSize(2), hasEntry("name", "our_type"), hasEntry("age", "our_type")));
assertNotEquals(null, tree);
assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_MISSING, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_NULL, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_MISSING, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_MISSING, and.valueOf(valueEnv()));
assertEquals("{\\n" + " \\"error\\": {\\n" + " \\"reason\\": \\"There was internal problem at backend\\",\\n" + " \\"details\\": \\"\\",\\n" + " \\"type\\": \\"IllegalStateException\\"\\n" + " },\\n" + " \\"status\\": 503\\n" + "}", errorMessage.toString());
assertThat( new FieldMapping("employee.first"), isPropertyField(true) );
assertSame(NOT_SUPPORTED_YET, queryAction.prepareRequest(request, nodeClient));
assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_TRUE, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_TRUE, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_NULL, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_NULL, or.valueOf(valueEnv()));
assertEquals(DOUBLE, sqrt.type()); assertTrue(sqrt.valueOf(valueEnv()).isNull());
assertNotNull(parser.parse("SELECT name, AVG(age) FROM test GROUP BY name")); assertNotNull(parser.parse("SELECT name AS n, AVG(age) FROM test GROUP BY n")); assertNotNull(parser.parse("SELECT ABS(balance) FROM test GROUP BY ABS(balance)")); assertNotNull(parser.parse("SELECT ABS(balance) FROM test GROUP BY 1"));
assertEquals(ES_TEXT, new ElasticsearchExprTextValue("A").type());
assertEquals(LITERAL_FALSE, exprValue);
assertEquals( ImmutableSet.of( alias("AVG(age)", aggregate("AVG", qualifiedName("age"))), alias("SUM(balance)", aggregate("SUM", qualifiedName("balance")))), querySpec.getAggregators());
assertEquals(stringValue("text"), tupleValue("{\\"stringV\\":\\"text\\"}").get("stringV")); assertEquals(stringValue("text"), constructFromObject("stringV", "text"));
assertTrue(request.isSupported());
assertEquals( new ExprTupleValue( new LinkedHashMap<String, ExprValue>() { { put("id", integerValue(1)); put("state", stringValue("WA")); } }), tupleValue("{\\"structV\\":{\\"id\\":1,\\"state\\":\\"WA\\"}}").get("structV"));
assertEquals(exprTupleValue1, hit); assertEquals(exprTupleValue2, hit);
assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_MISSING, expression.valueOf(valueEnv()));
assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_MISSING, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_NULL, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_NULL, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_NULL, xor.valueOf(valueEnv()));
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Period.ofMonths(1)), expr.valueOf(env));
assertEquals( new SearchRequest() .indices("test") .source(new SearchSourceBuilder() .timeout(ElasticsearchQueryRequest.DEFAULT_QUERY_TIMEOUT) .from(0) .size(200) .query(QueryBuilders.termQuery("name", "John"))), request.searchRequest());
assertEquals("{\\n" + " \\"error\\": {\\n" + " \\"reason\\": \\"There was internal problem at backend\\",\\n" + " \\"details\\": \\"illegal state\\",\\n" + " \\"type\\": \\"IllegalStateException\\"\\n" + " },\\n" + " \\"status\\": 503\\n" + "}", errorMessage.toString());
assertTrue(symbolTable.isEmpty(Namespace.FIELD_NAME));
assertEquals(ExpressionScriptEngine.EXPRESSION_LANG_NAME, scriptEngine.getType());
assertEquals(DOUBLE, tan.type()); assertTrue(tan.valueOf(valueEnv()).isMissing());
assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_MISSING, lte.valueOf(valueEnv())); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_MISSING, lte.valueOf(valueEnv()));
assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_MISSING, greater.valueOf(valueEnv())); assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_MISSING, greater.valueOf(valueEnv()));
assertNotEquals(null, tree);
assertEquals( ImmutableList.of( qualifiedName("name"), function("ABS", qualifiedName("age"))), querySpec.getGroupByItems());
assertNotNull(context.peek());
assertEquals("integer_value", qualifierAnalyzer.unqualified("integer_value"));
assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isMissing());
assertThat( new FieldMapping("employee.first.keyword"), isPropertyField(true) );
assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_NULL, less.valueOf(valueEnv())); assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_NULL, less.valueOf(valueEnv())); assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_NULL, less.valueOf(valueEnv()));
assertNotNull(parser.parse("SELECT name AS n, age AS a FROM accounts"));
assertEquals(bestMatchBuilder, resolver.resolve(functionSignature));
assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_MISSING, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_MISSING, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_FALSE, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_FALSE, and.valueOf(valueEnv()));
assertEquals("add function expected {[INTEGER,INTEGER]}, but get [BOOLEAN,BOOLEAN]", exception.getMessage());
assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_MISSING, less.valueOf(valueEnv())); assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_MISSING, less.valueOf(valueEnv()));
assertNotNull(geoPointValue.hashCode());
assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isMissing()); assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isMissing()); assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isMissing());
assertEquals(1, ordering.compare(integerValue(2), doubleValue(1d)));
assertFalse(request.isScrollStarted());
assertEquals("ten", namedExpression.getName());
assertEquals("NULL", LITERAL_NULL.toString());
assertEquals(DOUBLE, exp.type()); assertTrue(exp.valueOf(valueEnv()).isNull());
assertEquals( new SearchScrollRequest() .scroll(ElasticsearchScrollRequest.DEFAULT_SCROLL_TIMEOUT) .scrollId("scroll123"), request.scrollRequest());
assertNotEquals(null, tree);
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing());
assertEquals(ExprValueUtils.stringValue("209.160.24.63"), bindingTuple.resolve(DSL.ref("ip", STRING)));
assertNotNull(parser.parse("SELECT name FROM test WHERE age = 10"));
assertEquals( line("\\"John,Smith\\",\\"30,,,\\""), csv.getLines() );
assertEquals(DOUBLE, cos.type()); assertTrue(cos.valueOf(valueEnv()).isNull());
assertThat( new FieldMapping("employee.keyword"), isPropertyField(false) );
assertNotEquals(newValue.getBytes(), oldValue.getBytes());
assertEquals("can\'t resolve Symbol(namespace=FIELD_NAME, name=1) in type env", exception.getMessage());
assertEquals(1, indexMappings.size()); assertEquals(0, indexMapping.size());
assertThat( buildTypeMapping(Arrays.asList( named("avg(balance)", new AvgAggregator( Arrays.asList(dsl.abs(ref("balance", INTEGER))), INTEGER))), Arrays.asList(named("age", dsl.asin(ref("age", INTEGER))))), containsInAnyOrder( map("avg(balance)", INTEGER), map("age", DOUBLE) ));
assertEquals(INTEGER, floor.type()); assertTrue(floor.valueOf(valueEnv()).isMissing());
assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing());
assertEquals("The qualifier [a] of qualified name [a.integer_value] " + "must be an index name or its alias", error.getMessage());
assertEquals( 0, execute(sort(inputPlan, 1, Pair.of(SortOption.PPL_ASC, ref("response", INTEGER)))).size());
assertTrue(request.isSupported());
assertNotNull(parser.parse("SELECT (1 + 2) * 3 AS expr"));
assertNotEquals(null, tree);
assertTrue(equal.valueOf(valueEnv()).booleanValue());
assertEquals("detail error\\n" + "For more details, please send request for " + "Json format to see the raw response from elasticsearch engine.", errorMessage.fetchDetails());
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Duration.ofHours(1)), expr.valueOf(env));
assertEquals(interval.type(), INTERVAL);
assertTrue(isVisited);
assertEquals("text", indexMapping.getFieldType("name")); assertNull(indexMapping.getFieldType("not_exist"));
assertEquals(2, unresolvedFunSig.match(funcSignature));
assertEquals(integerValue(1), tupleValue("{\\"intV\\":1}").get("intV")); assertEquals(integerValue(1), constructFromObject("intV", 1));
assertNotSame(NOT_SUPPORTED_YET, queryAction.prepareRequest(request, nodeClient));
assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isMissing()); assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isMissing());
assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isMissing());
assertEquals(1, ordering.compare(stringValue("abd"), stringValue("abc"))); assertEquals(0, ordering.compare(stringValue("abc"), stringValue("abc"))); assertEquals(-1, ordering.compare(stringValue("abc"), stringValue("abd")));
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Duration.ofMinutes(1)), expr.valueOf(env));
assertEquals("interval(1, \\"day\\")", expr.toString());
assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isNull());
assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_MISSING, gte.valueOf(valueEnv())); assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_MISSING, gte.valueOf(valueEnv()));
assertEquals(longValue(1L), tupleValue("{\\"longV\\":1}").get("longV")); assertEquals(longValue(1L), constructFromObject("longV", 1L));
assertTrue(plan instanceof Project); assertThat(((Project) plan).getProjectList(), Matchers.contains(AllFields.of()));
assertFalse(csvRequest.isSupported());
assertEquals(DOUBLE, cot.type()); assertTrue(cot.valueOf(valueEnv()).isNull());
assertFalse(settings.isEmpty());
assertEquals( ImmutableMap.of("name", "string", "age", "integer"), response.columnNameTypes() );
assertNotEquals(null, tree);
assertEquals(DOUBLE, asin.type()); assertTrue(asin.valueOf(valueEnv()).isNull());
assertTrue(isRun.get());
assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isNull());
assertEquals(DOUBLE, cot.type()); assertTrue(cot.valueOf(valueEnv()).isMissing());
assertNotEquals(tupleValue1, tupleValue2); assertNotEquals(tupleValue2, tupleValue1);
assertEquals( "the target expected to be field, but is avg(Field(field=integer_value, fieldArgs=[]))", exception.getMessage());
assertEquals(DOUBLE, radians.type()); assertTrue(radians.valueOf(valueEnv()).isNull());
assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_MISSING, gte.valueOf(valueEnv())); assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_MISSING, gte.valueOf(valueEnv())); assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_MISSING, gte.valueOf(valueEnv()));
assertThat( buildTypeMapping(Arrays.asList( named("avg(balance)", new AvgAggregator( Arrays.asList(ref("balance", INTEGER)), INTEGER))), Collections.emptyList()), containsInAnyOrder( map("avg(balance)", INTEGER) ));
assertEquals(DOUBLE, radians.type()); assertTrue(radians.valueOf(valueEnv()).isMissing());
assertEquals( 1, ordering.compare( collectionValue(ImmutableList.of(1, 2)), collectionValue(ImmutableList.of(3)))); assertEquals( 0, ordering.compare( collectionValue(ImmutableList.of(1, 2)), collectionValue(ImmutableList.of(3, 4)))); assertEquals( -1, ordering.compare( collectionValue(ImmutableList.of(3)), collectionValue(ImmutableList.of(1, 2))));
assertThat( values.getChild(), is(empty()) );
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing());
assertEquals(3, response.size());
assertTrue(equal.valueOf(valueEnv()).booleanValue());
assertEquals("invalid to call compare operation on missing value", exception.getMessage());
assertEquals("ten", namedExpression.getName());
assertEquals(0, relation.getChild().size());
assertThat(parse(response), contains(entry("max", 40d)));
assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_NULL, gte.valueOf(valueEnv())); assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_NULL, gte.valueOf(valueEnv())); assertEquals(BOOLEAN, gte.type()); assertEquals(LITERAL_NULL, gte.valueOf(valueEnv()));
assertEquals("can resolve expression: 1", exception.getMessage());
assertNull(ElasticsearchAggregationResponseParser.handleNanValue(Double.NaN));
assertEquals("count(integer_value)", countAggregator.toString());
assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_MISSING, greater.valueOf(valueEnv())); assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_MISSING, greater.valueOf(valueEnv())); assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_MISSING, greater.valueOf(valueEnv()));
assertTrue(plan.hasOpen); assertEquals(expected, actual); assertTrue(plan.hasClosed);
assertThat(project.schema().getColumns(), contains( new ExecutionEngine.Schema.Column("response", null, INTEGER), new ExecutionEngine.Schema.Column("action", null, STRING) ));
assertFalse(leafFactory.needs_score()); assertEquals( new ExpressionAggregationScript(expression, searchLookup, leafReaderContext, params), actualScript );
assertFalse(response1.isEmpty()); assertTrue(hits.hasNext()); assertEquals(exprTupleValue, hits.next()); assertFalse(hits.hasNext()); assertTrue(response2.isEmpty());
assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isMissing()); assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isMissing());
assertFalse(response1.isEmpty()); assertTrue(hits.hasNext()); assertEquals(exprTupleValue, hits.next()); assertFalse(hits.hasNext()); assertTrue(response2.isEmpty());
assertEquals(INTEGER, expression.type()); assertEquals("dayofmonth(DATE \'2020-07-07\')", expression.toString()); assertEquals(integerValue(7), eval(expression)); assertEquals(nullValue(), eval(dsl.dayofmonth(nullRef))); assertEquals(missingValue(), eval(dsl.dayofmonth(missingRef)));
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Duration.ofNanos(1000)), expr.valueOf(env));
assertEquals(0, ipValue.compareTo(new ElasticsearchExprIpValue("192.168.0.1")));
assertEquals(booleanValue(true), tupleValue("{\\"boolV\\":true}").get("boolV")); assertEquals(booleanValue(true), constructFromObject("boolV", true));
assertEquals(DOUBLE, ln.type()); assertTrue(ln.valueOf(valueEnv()).isMissing());
assertEquals(functionExpressionBuilder, repo.resolve(functionSignature));
assertNull(LITERAL_NULL.value());
assertTrue(factory.isResultDeterministic());
assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isNull()); assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isNull()); assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isNull());
assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_TRUE, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_TRUE, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_MISSING, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_MISSING, or.valueOf(valueEnv()));
assertThat(e.valueOf(valueEnv()), allOf(hasType(DOUBLE), hasValue(Math.E)));
assertEquals( new ElasticsearchIndexScan(client, settings, indexName, exprValueFactory), index.implement(plan));
assertTrue(resourceMonitor.isHealthy());
assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_TRUE, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_TRUE, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_NULL, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_NULL, xor.valueOf(valueEnv()));
assertNotNull(parser.parse("SELECT 123, \'hello\'"));
assertEquals("Unsupported type: TEST_TYPE for field: type, value: 1.", exception.getMessage()); assertEquals( "Unsupported type TEST_TYPE to construct expression value " + "from object for field: type, value: 1.", exception.getMessage());
assertEquals("MISSING", LITERAL_MISSING.toString());
assertTrue(dsl.abs(DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER)).valueOf(valueEnv()).isNull());
assertNotNull(sizeValue);
assertNotNull(service);
assertTrue(factory.isResultDeterministic());
assertNull(LITERAL_MISSING.value());
assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_MISSING, lte.valueOf(valueEnv())); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_MISSING, lte.valueOf(valueEnv())); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_MISSING, lte.valueOf(valueEnv()));
assertEquals(DOUBLE, exp.type()); assertTrue(exp.valueOf(valueEnv()).isMissing());
assertEquals(value.value(), Period.ofWeeks(1));
assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_TRUE, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_TRUE, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_MISSING, xor.valueOf(valueEnv())); assertEquals(BOOLEAN, xor.type()); assertEquals(LITERAL_MISSING, xor.valueOf(valueEnv()));
assertTrue(LITERAL_MISSING.equals(LITERAL_MISSING)); assertFalse(LITERAL_FALSE.equals(LITERAL_MISSING)); assertFalse(LITERAL_MISSING.equals(LITERAL_FALSE));
assertEquals("avg(integer_value)", avgAggregator.toString());
assertEquals("Error occurred in Elasticsearch engine: error", errorMessage.fetchReason());
assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_FALSE, expression.valueOf(valueEnv())); assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_TRUE, expression.valueOf(valueEnv()));
assertEquals("can\'t resolve Symbol(namespace=FIELD_NAME, name=undefined_field) in type env", exception.getMessage());
assertEquals(expected, actual.get());
assertTrue(plan instanceof ProjectOperator); assertTrue(((ProjectOperator) plan).getInput() instanceof ElasticsearchIndexScan);
assertEquals("integer_value", analyze.getName());
assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_NULL, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_NULL, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_FALSE, and.valueOf(valueEnv())); assertEquals(BOOLEAN, and.type()); assertEquals(LITERAL_FALSE, and.valueOf(valueEnv()));
assertFalse(searchResponse.isEmpty()); assertTrue(searchResponse.isEmpty());
assertEquals(floatValue(1f), tupleValue("{\\"floatV\\":1.0}").get("floatV")); assertEquals(floatValue(1f), constructFromObject("floatV", 1f));
assertTrue(plan instanceof Project); assertThat(((Project) plan).getProjectList(), Matchers.contains(expression));
assertFalse(value1.equals(value2)); assertFalse(value2.equals(value1));
assertFalse(response.isAggregationResponse());
assertEquals( ImmutableMap.of("name", "string", "age", "integer"), response.columnNameTypes() );
assertTrue(msg instanceof ElasticsearchErrorMessage);
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull());
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Period.ofWeeks(1)), expr.valueOf(env));
assertThat(parse(response), containsInAnyOrder(entry("max", 40d), entry("min", 20d)));
assertEquals(DOUBLE, degrees.type()); assertTrue(degrees.valueOf(valueEnv()).isNull());
assertEquals(INTEGER, floor.type()); assertTrue(floor.valueOf(valueEnv()).isNull());
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull());
assertFalse(value.equals(intValue));
assertEquals(ES_IP, ipValue.type());
assertTrue(monitor.isMemoryHealthy(11L));
assertEquals(new ElasticsearchExprGeoPointValue.GeoPoint(1.0, 1.0), geoPointValue.value());
assertEquals(1, ordering.compare(LITERAL_TRUE, LITERAL_FALSE)); assertEquals(0, ordering.compare(LITERAL_TRUE, LITERAL_TRUE)); assertEquals(-1, ordering.compare(LITERAL_FALSE, LITERAL_TRUE));
assertEquals(String.format("avg(*(%s, %d))", DSL.ref("integer_value", INTEGER), 10), avgAggregator.toString());
assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_NULL, expression.valueOf(valueEnv()));
assertTrue(LITERAL_NULL.isNull());
assertThat( new FieldMapping("employee.first", emptyMap(), fieldsSpecifiedInQuery("manager.*")), isWildcardSpecified(false) );
assertEquals(interval.intervalValue(), Duration.ofNanos(1000));
assertEquals("Shard[1]: java.lang.IllegalStateException: illegal state\\n" + "\\n" + "For more details, please send request for Json format to see the " + "raw response from elasticsearch engine.", errorMessage.fetchDetails());
assertEquals("{\\n" + " \\"error\\": {\\n" + " \\"reason\\": \\"Invalid Query\\",\\n" + " \\"details\\": \\"\\",\\n" + " \\"type\\": \\"IllegalStateException\\"\\n" + " },\\n" + " \\"status\\": 400\\n" + "}", errorMessage.toString());
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isMissing());
assertFalse(fetchSizeRequest.isSupported()); assertFalse(cursorRequest.isSupported());
assertSame(NOT_SUPPORTED_YET, queryAction.prepareRequest(request, nodeClient));
assertNotNull(parser.parse("SELECT name, age FROM accounts"));
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Period.ofYears(1)), expr.valueOf(env));
assertEquals(DOUBLE, degrees.type()); assertTrue(degrees.valueOf(valueEnv()).isMissing());
assertEquals(NOT_MATCH, unresolvedFunSig.match(funcSignature));
assertTrue(plan instanceof Project);
assertEquals(String.format("sum(*(%s, %d))", DSL.ref("integer_value", INTEGER), 10), sumAggregator.toString());
assertEquals(DOUBLE, sin.type()); assertTrue(sin.valueOf(valueEnv()).isNull());
assertEquals(FLOAT, rand.type()); assertTrue( getFloatValue(rand.valueOf(valueEnv())) >= 0 && getFloatValue(rand.valueOf(valueEnv())) < 1); assertEquals("rand()", rand.toString());
assertEquals("invalid to call compare operation on null value", exception.getMessage());
assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan.type()); assertTrue(atan.valueOf(valueEnv()).isMissing());
assertFalse(value.equals(1));
assertEquals(v1.compare(v2), -1);
assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isMissing()); assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isMissing()); assertEquals(STRING, conv.type()); assertTrue(conv.valueOf(valueEnv()).isMissing());
assertEquals(DOUBLE, acos.type()); assertTrue(acos.valueOf(valueEnv()).isNull());
assertEquals("unsupported aggregation type date_histogram", exception.getMessage());
assertEquals(NOT_MATCH, unresolvedFunSig.match(funcSignature));
assertEquals("Unsupported aggregation function ESTDC_ERROR", exception.getMessage());
assertEquals( "Identifier [array_value] of type [ARRAY] is not supported yet", exception.getMessage() );
assertTrue(ipValue.equal(new ElasticsearchExprIpValue("192.168.0.1")));
assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_MISSING, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_NULL, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_NULL, or.valueOf(valueEnv())); assertEquals(BOOLEAN, or.type()); assertEquals(LITERAL_NULL, or.valueOf(valueEnv()));
assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isMissing()); assertEquals(DOUBLE, atan2.type()); assertTrue(atan2.valueOf(valueEnv()).isMissing());
assertEquals(ExprValueUtils.LITERAL_MISSING, BindingTuple.EMPTY.resolve(DSL.ref("ip_missing", STRING)));
assertNotNull(parser.parse("SELECT 123;"));
assertEquals(INTEGER, sign.type()); assertTrue(sign.valueOf(valueEnv()).isNull());
assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv())); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv())); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv()));
assertTrue(resourceMonitor.isHealthy());
assertTrue(LITERAL_MISSING.isMissing());
assertFalse(tupleValue1.equals(tupleValue2)); assertFalse(tupleValue2.equals(tupleValue1));
assertEquals(BOOLEAN, notLike.type()); assertTrue(notLike.valueOf(valueEnv()).booleanValue()); assertEquals(String.format("not like(\\"%s\\", \\"%s\\")", "bob", "tom"), notLike.toString()); assertFalse(notLike.valueOf(valueEnv()).booleanValue()); assertEquals(String.format("not like(\\"%s\\", \\"%s\\")", "bob", "bo%"), notLike.toString());
assertNotEquals(null, tree);
assertTrue( dsl.abs(DSL.ref(INT_TYPE_MISSING_VALUE_FIELD, INTEGER)).valueOf(valueEnv()).isMissing());
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Period.ofMonths(3)), expr.valueOf(env));
assertFalse(response1.isEmpty()); assertTrue(response2.isEmpty()); assertTrue(response3.isEmpty());
assertEquals( ImmutableList.of( qualifiedName("name"), function("ABS", qualifiedName("age"))), querySpec.getSelectItems());
assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isNull()); assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isNull()); assertEquals(LONG, truncate.type()); assertTrue(truncate.valueOf(valueEnv()).isNull());
assertFalse(resourceMonitor.isHealthy());
assertEquals( "Identifier [struct_value] of type [STRUCT] is not supported yet", exception.getMessage() );
assertEquals("192.168.0.1", ipValue.value());
assertTrue(response.isAggregationResponse());
assertEquals("t", relation.getTableNameOrAlias());
assertNotNull(parser.parse("SELECT * FROM `hello+world`")); assertNotNull(parser.parse("SELECT * FROM \\"hello$world\\""));
assertEquals("sum(integer_value)", sumAggregator.toString());
assertTrue(tableScan.getChild().isEmpty());
assertNotEquals(null, tree);
assertNotNull(parser.parse( "SELECT age = 10 AND name = \'John\' OR NOT (balance > 1000) FROM test"));
assertFalse(tupleValue.equals(intValue));
assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_NULL, greater.valueOf(valueEnv())); assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_NULL, greater.valueOf(valueEnv())); assertEquals(BOOLEAN, greater.type()); assertEquals(LITERAL_NULL, greater.valueOf(valueEnv()));
assertEquals(DOUBLE, ln.type()); assertTrue(ln.valueOf(valueEnv()).isNull());
assertEquals(FLOAT, rand.type()); assertTrue(rand.valueOf(valueEnv()).isNull());
assertTrue(geoPointValue.equal(new ElasticsearchExprGeoPointValue(1.0, 1.0)));
assertEquals(1, ordering.compare(floatValue(5f), floatValue(4f))); assertEquals(0, ordering.compare(floatValue(5f), floatValue(5f))); assertEquals(-1, ordering.compare(floatValue(4f), floatValue(5f)));
assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_TRUE, expression.valueOf(valueEnv())); assertEquals(BOOLEAN, expression.type()); assertEquals(LITERAL_FALSE, expression.valueOf(valueEnv()));
assertEquals(ExprValueUtils.LITERAL_MISSING, bindingTuple.resolve(DSL.ref("ip_missing", STRING)));
assertEquals(DOUBLE, acos.type()); assertTrue(acos.valueOf(valueEnv()).isMissing());
assertEquals(ES_GEO_POINT, geoPointValue.type());
assertEquals(INTEGER, sign.type()); assertTrue(sign.valueOf(valueEnv()).isMissing());
assertNotNull(config.sqlService());
assertEquals("[INTEGER,FLOAT]", unresolvedFunSig.formatTypes());
assertEquals(LONG, crc.type()); assertTrue(crc.valueOf(valueEnv()).isNull());
assertEquals( "compare expected value have same type, but with [INTEGER, STRING]", exception.getMessage());
assertEquals( ImmutableSet.of( alias("AVG(age)", aggregate("AVG", qualifiedName("age"))), alias("AVG(balance)", aggregate("AVG", qualifiedName("balance")))), querySpec.getAggregators());
assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_NULL, like.valueOf(valueEnv())); assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_NULL, like.valueOf(valueEnv())); assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_NULL, like.valueOf(valueEnv()));
assertEquals(ESDataType.INTEGER, age.get());
assertEquals( new ExprCollectionValue(ImmutableList.of(new ExprTupleValue( new LinkedHashMap<String, ExprValue>() { { put("info", stringValue("zz")); put("author", stringValue("au")); } }))), tupleValue("{\\"arrayV\\":[{\\"info\\":\\"zz\\",\\"author\\":\\"au\\"}]}").get("arrayV"));
assertThat( new FieldMapping("employee"), isPropertyField(false) );
assertNotNull(parser.parse("SELECT name FROM test " + "WHERE age = 10 AND name = \'John\' OR NOT (balance > 1000)"));
assertFalse(request.isScrollStarted());
assertEquals(ExprCoreType.UNKNOWN, LITERAL_MISSING.type());
assertEquals(DOUBLE, sin.type()); assertTrue(sin.valueOf(valueEnv()).isMissing());
assertEquals( ImmutableMap.of("n", qualifiedName("name")), querySpec.getSelectItemsByAlias());
assertTrue(value.equals(value));
assertEquals(doubleValue(1d), tupleValue("{\\"doubleV\\":1.0}").get("doubleV")); assertEquals(doubleValue(1d), constructFromObject("doubleV", 1d));
assertEquals(DOUBLE, cos.type()); assertTrue(cos.valueOf(valueEnv()).isMissing());
assertEquals(DOUBLE, tan.type()); assertTrue(tan.valueOf(valueEnv()).isNull());
assertTrue(isRun.get());
assertEquals(INTERVAL, expr.type()); assertEquals(intervalValue(Duration.ofDays(1)), expr.valueOf(env));
assertTrue(msg instanceof ElasticsearchErrorMessage);
assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_MISSING, like.valueOf(valueEnv())); assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_MISSING, like.valueOf(valueEnv()));
assertThat(parse(response), containsInAnyOrder(ImmutableMap.of("type", "cost", "avg", 20d), ImmutableMap.of("type", "sale", "avg", 105d)));
assertEquals( ImmutableMap.of("name", "string", "age", "integer"), response.columnNameTypes() );
assertTrue(new AlwaysHealthyMonitor().isHealthy());
assertFalse(msg instanceof ElasticsearchErrorMessage);
assertEquals(DOUBLE, asin.type()); assertTrue(asin.valueOf(valueEnv()).isMissing());
assertThat( new FieldMapping("employee.first", emptyMap(), fieldsSpecifiedInQuery("employee.*")), isWildcardSpecified(true) );
assertEquals(0, geoPointValue.compareTo(new ElasticsearchExprGeoPointValue(1.0, 1.0)));
assertEquals(1, ordering.compare(integerValue(5), integerValue(4))); assertEquals(0, ordering.compare(integerValue(5), integerValue(5))); assertEquals(-1, ordering.compare(integerValue(4), integerValue(5)));
assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_MISSING, less.valueOf(valueEnv())); assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_MISSING, less.valueOf(valueEnv())); assertEquals(BOOLEAN, less.type()); assertEquals(LITERAL_MISSING, less.valueOf(valueEnv()));
assertEquals( new ExpressionFilterScript(expression, searchLookup, leafReaderContext, params), actualFilterScript );
assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isMissing()); assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isMissing()); assertEquals(INTEGER, mod.type()); assertTrue(mod.valueOf(valueEnv()).isMissing());
assertNotNull(response);
assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_MISSING, like.valueOf(valueEnv())); assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_MISSING, like.valueOf(valueEnv())); assertEquals(BOOLEAN, like.type()); assertEquals(LITERAL_MISSING, like.valueOf(valueEnv()));
assertEquals(EXACTLY_MATCH, unresolvedFunSig.match(funcSignature));
assertTrue(request.isSupported());
assertFalse(resourceMonitor.isHealthy());
assertEquals(LONG, crc.type()); assertTrue(crc.valueOf(valueEnv()).isMissing());
assertTrue(tupleValue.equals(tupleValue));
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull());
assertEquals( new SearchRequest() .indices("test") .scroll(ElasticsearchScrollRequest.DEFAULT_SCROLL_TIMEOUT) .source(new SearchSourceBuilder().query(QueryBuilders.termQuery("name", "John"))), request.searchRequest());
assertTrue(LITERAL_NULL.equals(LITERAL_NULL)); assertFalse(LITERAL_FALSE.equals(LITERAL_NULL)); assertFalse(LITERAL_NULL.equals(LITERAL_FALSE));
assertNotNull(response);
assertEquals(1, ordering.compare(doubleValue(5d), doubleValue(4d))); assertEquals(0, ordering.compare(doubleValue(5d), doubleValue(5d))); assertEquals(-1, ordering.compare(doubleValue(4d), doubleValue(5d)));
assertTrue(v1.equals(v2));
assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull()); assertEquals(DOUBLE, log.type()); assertTrue(log.valueOf(valueEnv()).isNull());
assertEquals(NOT_MATCH, unresolvedFunSig.match(funcSignature));
assertThat( buildTypeMapping(Arrays.asList( named("avg(age)", new AvgAggregator(Arrays.asList(ref("age", INTEGER)), INTEGER))), Arrays.asList(named("name", ref("name", ES_TEXT_KEYWORD)))), containsInAnyOrder( map("avg(age)", INTEGER), map("name", ES_TEXT_KEYWORD) ));
assertThat(expirable.isExpired()).isFalse();
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEqualTo("com.mypackage.SystemPropertyPrecedence");
assertThat(openMon.getTimer(staticPart.toString())).isNotNull();
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEqualTo("org.mypackage.MyOpenMon");
assertThat(expirable.isExpired()).describedAs("Exactly at expiration interval").isTrue();
assertThat(factory.toString()).contains("jamon, javasimon, metrics, micrometer, newrelicimp, nullimp, statsd, sysout");
assertThat(labels).containsOnly("java.lang.RuntimeException", OpenMon.EXCEPTION_LABEL);
assertThat(str).isInstanceOf(String.class); assertThat(str).isInstanceOf(String.class); assertThat(str).isNull();
assertThat(properties.getProperty("I_DO_NOT_EXIST")).isNull();
assertThat(Utils.formatExceptionForToolsWithLimitedCharacterSet(null)).describedAs("Null values should return unchanged").isNull(); assertThat(Utils.formatExceptionForToolsWithLimitedCharacterSet(before)).describedAs("StatsD string is not as expected (remove ,=)").isEqualTo(after); assertThat(Utils.formatExceptionForToolsWithLimitedCharacterSet(plainException)).describedAs("Nonsql exceptions should have no change").isEqualTo(plainException);
assertThat(Utils.getArgNameValuePairs(jp)).isEmpty();
assertThat(automonAspectBase.isEnabled()).isFalse(); assertThat(automonAspectBase.getOpenMon()).isEqualTo(nullMon); assertThat(automonAspectBase.isEnabled()).isTrue(); assertThat(automonAspectBase.getOpenMon()).isEqualTo(openMon);
assertThat(reference.get()).isEqualTo("steve");
assertThat(Utils.getArgNameValuePairs(jp)).containsExactly("0: Steve");
assertThat(mon.getCount()).describedAs("The timer should have completed/been stopped").isEqualTo(1);
assertThat(Utils.getExceptionTrace(null)).isEqualTo(Utils.UNKNOWN); assertThat(Utils.getExceptionTrace(e)).contains("java.lang.RuntimeException: my exception"); assertThat(Utils.getExceptionTrace(e)).contains(getClass().getName());
assertThat(openMon.getTimer(staticPart.toString()).count()).describedAs("A timer that wasn\'t started should not have a count").isEqualTo(0);
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEqualTo("org.mypackage.MyOpenMon");
assertThat(mon.getStopwatch().getActive()).describedAs("The monitor should have been started").isEqualTo(0); assertThat(mon.getStopwatch().getCounter()).describedAs("The monitor should not have finished").isEqualTo(1);
assertThat(Utils.argNameValuePairsToString(null)).isEqualTo(Utils.UNKNOWN); assertThat(Utils.argNameValuePairsToString(args)).contains("Parameter"); assertThat(Utils.argNameValuePairsToString(args)).contains("Parameter", "fname: Steve", "lname: Souza");
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEmpty();
assertThat(Utils.getLabel(runtimeException)).isEqualTo("java.lang.RuntimeException");
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEmpty();
assertThat(openMon.getCounter(SharedConstants.EXCEPTION_LABEL)).isNotNull();
assertThat(expirable.isExpired()).isTrue(); assertThat(expirable.isExpired()).isFalse();
assertThat(mon.getLabel()).describedAs("The label should match passed in label").isEqualTo(SharedConstants.LABEL); assertThat(mon.getUnits()).describedAs("The units should be for time").isEqualTo("ms."); assertThat(mon.getActive()).describedAs("The monitor should have been started").isEqualTo(1);
assertThat(openMon.getExceptionsMap()).containsOnlyKeys(runtimeException); assertThat(openMon.getExceptionsMap()).containsOnlyKeys(runtimeException); assertThat(openMon.getExceptionsMap().get(runtimeException)). describedAs("The value object should only have been created once"). isEqualTo(expirable); assertThat(map.get(runtimeException).getThrowable()).describedAs("Throwable should have been set").isEqualTo(runtimeException);
assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEqualTo("org.mypackage.MyOpenMon");
assertThat(openMon.getTimer(staticPart.toString()).count()) .describedAs("The timer should have completed/been stopped").isEqualTo(1); assertThat(openMon.getTimer(staticPart.toString()).totalTime(TimeUnit.MILLISECONDS)) .describedAs("The timer should have expected time").isGreaterThanOrEqualTo(250);
assertThat(mon.getCount()).describedAs("The timer shouldn\'t have completed").isEqualTo(0);
assertThat(Utils.hasPackageName(null)).isFalse(); assertThat(Utils.hasPackageName("NoPackage")).isFalse(); assertThat(Utils.hasPackageName("com.package.MyClass")).isTrue();
assertThat(array).containsExactly("com", "jamonapi", "MonitorFactory"); assertThat(array).containsExactly("jamon", "javasimon");
assertThat(Metrics.getMetricRegistry()).isEqualTo(newMetricRegistry);
assertThat(mon.getCounter()).describedAs("The exception monitor should not have been created yet").isEqualTo(0); assertThat(monGeneral.getCounter()).describedAs("The general exception monitor should not have been created yet").isEqualTo(0); assertThat(mon.getCounter()).describedAs("The exception monitor should have been created yet").isEqualTo(1); assertThat(monGeneral.getCounter()).describedAs("The general exception monitor should have been created yet").isEqualTo(1);
assertThat(factory.getFirstInstance()).isNotNull(); assertThat(factory.getFirstInstance()).isNotEqualTo(defaultValue);
assertThat(mon.getStopwatch().getActive()).describedAs("The monitor should have been started").isEqualTo(1); assertThat(mon.getStopwatch().getCounter()).describedAs("The monitor should not have finished").isEqualTo(0);
assertThat(properties.getProperty("org.automon.statsd.noexist")).isEqualTo("mynoexist_value");
assertThat(expirable.getThrowable()).isEqualTo(t); assertThat(expirable.toString()).contains("java.lang.RuntimeException: my exception", getClass().getName());
assertThat(mon.getLabel()).describedAs("The label should match passed in label").isEqualTo(SharedConstants.LABEL); assertThat(mon.getActive()).describedAs("The monitor should not be running").isEqualTo(0); assertThat(mon.getHits()).describedAs("The monitor should have finished and recorded hits").isEqualTo(1);
assertThat(expirable.getJamonDetails()).isNotNull();
assertThat(Utils.toStringWithLimit(null)).isEqualTo(Utils.NULL_STR); assertThat(Utils.toStringWithLimit("hi")).describedAs("Normal length string").isEqualTo("hi"); assertThat(Utils.toStringWithLimit(sb.toString()).length()).describedAs("Long strings should be truncated").isLessThan(SIZE); assertThat(Utils.toStringWithLimit(sb.toString())).describedAs("String too long should be truncated").endsWith(Utils.DEFAULT_MAX_STRING_ENDING);
assertThat(list).containsExactly("MyClass1", "MyClass2");
assertThat(OpenMonFactory.getJustClassName("com.mypackage.Jamon")).isEqualTo("Jamon"); assertThat(OpenMonFactory.getJustClassName("Jamon")).isEqualTo("Jamon");
assertThat(Utils.stripFileScheme("myfile.dat")).isEqualTo("myfile.dat"); assertThat(Utils.stripFileScheme("file:myfile.dat")).isEqualTo("myfile.dat");
assertThat(expirable.getArgNamesAndValues()).isEqualTo(args); assertThat(expirable.toString()).contains("fname: Steve");
assertThat(openMon.getCounter(SharedConstants.EXCEPTION_LABEL).count()) .describedAs("No exception should exist yet").isEqualTo(0); assertThat(openMon.getCounter(SharedConstants.EXCEPTION_LABEL).count()) .describedAs("One exception should exist").isEqualTo(1);
assertThat(Utils.getLabel(sqlException)).isEqualTo("java.sql.SQLException,ErrorCode=400,SQLState=Login failure");
assertThat(TimeExpirable.convertToMs(0)).describedAs("Should convert from minutes to ms.").isEqualTo(0); assertThat(TimeExpirable.convertToMs(1)).describedAs("Should convert from minutes to ms.").isEqualTo(MIN_IN_MS);
assertThat(Utils.getArgNameValuePairs(jp)).containsExactly("0: Steve", "1: 20");
assertThat(cache.get("a")).isNull();
assertThat(notification.icon, is(R.drawable.ic_av_play_circle_fill));
assertThat(description, is(""));
assertNotNull(view);
assertThat(episode.getDescription(), is(""));
assertThat(invisibleDownloadButtonLayout.getVisibility(), is(INVISIBLE)); assertThat(visibleDownloadButtonLayout.getVisibility(), is(VISIBLE));
assertThat(notification.extras.getString(Notification.EXTRA_TEXT), is("Lorem ipsum dolor sit amet"));
assertThat(audioPlayer.isPlaying(), is(true));
assertThat(feed.getId(), is(expectedFeed.getId()));
assertThat(episode.getPublishedDate(), is(expectedEpisode.getPublishedDate()));
assertThat(audioPlayer.canSeekBackward(), is(true));
assertNull(new Episode().getPublishedDate());
assertThat(activity.isFinishing(), is(true));
assertThat(audioPlayer.canPause(), is(true));
assertThat(audioPlayer.isPlaying(), is(false));
assertThat(episodeCheckpoint.getLastCheckpointPosition(anEpisode(), 42), is(42));
assertThat(feed.getTitle(), is(expectedFeed.getTitle()));
assertThat(notification.extras.getString(Notification.EXTRA_TITLE), is("Foo Bar"));
assertThat(episode.getDescription(), is(expectedEpisode.getDescription()));
assertThat(notification.visibility, is(Notification.VISIBILITY_PUBLIC));
assertThat(episode.getAudioUrl(), is(""));
assertThat(customBroadcastReceiver.isMessageReceived(), is(false)); assertThat(customBroadcastReceiver.isMessageReceived(), is(true));
assertThat(feedsAdapter.getCount(), is(feeds.size()));
assertThat(activity.isFinishing(), is(true));
assertThat(audioPlayer.canSeekForward(), is(true));
assertThat(feed.getId(), is(expectedId));
assertThat(episode.getTitle(), is(expectedEpisode.getTitle()));
assertThat(activity.isFinishing(), is(false));
assertThat(episode.getDuration(), is(expectedEpisode.getDuration()));
assertNotNull(view); assertThat(valueOf(episodeTitle.getText()), is(episode.getTitle()));
assertThat(description, is("Awesome Episode"));
assertThat(episodeListAdapter.getCount(), is(episodes.size()));
assertTrue(!result.equals(WorkingDirectory.OS.UNKNOWN));
assertEquals(expResult, result.getName());
assertTrue(result.isDirectory());
assertTrue(WorkingDirectory.delete());
assertEquals(filter.getSortFields().size(), 1); assertEquals(filter.getSortFields().get(0).getName(), "column1"); assertEquals(filter.getSortFields().get(0).isAsc(), false);
assertTrue(PropertyUtil.isCollectionProperty(HashMap.class, true)); assertFalse(PropertyUtil.isCollectionProperty(String.class, true));
assertEquals(ModelInterceptor.one(DummyModel.class.getMethod("one", Object[].class), new Object[] {"column1", dummyModel1.getColumn1()}), dummyModel1);
assertNotNull(context); assertFalse(context.isReadOnly());
assertEquals(parent.models.size(), 1);
assertEquals(clonedFilter.getConditions().size(), 1); assertEquals(clonedFilter.getPageNo(), 20); assertEquals(clonedFilter.getPerPage(), 2);
assertTrue(context.isTxnOpen());
assertTrue(PropertyUtil.isCollectionProperty(ArrayList.class, false)); assertTrue(PropertyUtil.isCollectionProperty(HashSet.class, false)); assertFalse(PropertyUtil.isCollectionProperty(String.class, false)); assertFalse(PropertyUtil.isCollectionProperty(HashMap.class, false));
assertEquals(DummyModel.all(), Arrays.asList(model, model1));
assertEquals(models.get(0), model1); assertEquals(models.get(1), model);
assertEquals(children.size(), 3);
assertNull(parent.collection("column1"));
assertEquals(PropertyUtil.getCollectionElementType(DummyClass.class.getField("stringList").getGenericType()), String.class); assertEquals(PropertyUtil.getCollectionElementType(DummyClass.class.getField("objectList").getGenericType()), DummyClass.class); assertEquals(PropertyUtil.getCollectionElementType(DummyClass.class.getField("anyList").getGenericType()), Object.class);
assertEquals(PropertyUtil.getCollectionElementType(DummyClass.class.getField("stringMap").getGenericType()), String.class); assertEquals(PropertyUtil.getCollectionElementType(DummyClass.class.getField("genericType").getGenericType()), Object.class);
assertFalse(txn.isActive()); assertTrue(txn.isActive());
assertNull(PropertyUtil.getProperty(clazz, "nonExistingField"));
assertNotNull(context); assertFalse(context.isReadOnly());
assertEquals(parent.getColumn1(), "test1"); assertEquals(parent.getColumn2(), "test2");
assertEquals(context, config.getContext());
assertTrue(PropertyUtil.isSimpleProperty(String.class)); assertFalse(PropertyUtil.isSimpleProperty(clazz.objectArray.getClass())); assertTrue(PropertyUtil.isSimpleProperty(clazz.stringArray.getClass())); assertFalse(PropertyUtil.isSimpleProperty(clazz.objectList.getClass())); assertFalse(PropertyUtil.isSimpleProperty(clazz.stringList.getClass()));
assertTrue(PropertyUtil.isMapProperty(HashMap.class)); assertFalse(PropertyUtil.isMapProperty(List.class));
assertEquals(parent.models.size(), 1);
assertEquals(DummyModel.one(new Object[]{"column1", "test123", "column2", "test125"}), model);
assertEquals(filter.getPageNo(), 2); assertEquals(filter.getPerPage(), 20);
assertTrue(PropertyUtil.isPrimitiveOrWrapper(DummyClass.class.getField("primitiveInt").getType()));
assertNull(model.collection("children").first("children.column1", "unknown"));
assertEquals(clonedFilter.getConditions().size(), 1);
assertEquals(clonedFilter.getConditions().size(), 1); assertEquals(clonedFilter.getPageNo(), 1); assertEquals(clonedFilter.getPerPage(), Integer.MAX_VALUE);
assertTrue(ModelInterceptor.exists(DummyModel.class.getMethod("exists", Serializable.class), model2.getId()));
assertEquals(DummyModel.count(), 1);
assertEquals(models.size(), 1); assertEquals(models.get(0), model1);
assertEquals(models.size(), 1); assertEquals(models.get(0), dummyModel1);
assertEquals(ModelInterceptor.count(DummyModel.class.getMethod("count", Filter.class), new Filter(new Condition("column1", dummyModel1.getColumn1()))), 1L);
assertEquals(model.collection("children").one("children.column1", "testChildColumn0", "children.column2", "testChildColumn2"), child1);
assertEquals(model.collection("children").where("children.column1", "testChildColumn0", "children.column2", "testChildColumn2"), Arrays.asList(child1));
assertEquals(models.size(), 1); assertEquals(models.get(0), dummyModel1);
assertEquals(filter.getConditions().size(), 1); assertEquals(filter.getConditions().get(0).getName(), "testKey"); assertEquals(filter.getConditions().get(0).getOperator(), Operator.eq); assertEquals(filter.getConditions().get(0).getValue(), "testValue");
assertEquals(filter.getSortFields().size(), 1); assertEquals(filter.getSortFields().get(0).getName(), "column1"); assertEquals(filter.getSortFields().get(0).isAsc(), false);
assertTrue(map.containsKey("test123")); assertNotNull(map.get("test123").getModel()); assertEquals(map.get("test123").getModel().getIntegerValue(), new Integer(1234)); assertEquals(map.get("test123").getModel().getStringValue(), "string");
assertTrue(model2.getMap().containsKey("stringValue"));
assertEquals(sortField.getOrder(builder, root), order2);
assertEquals(model.collection("children").findById(child2.getId()), child2);
assertEquals(filter.getConditions().size(), 1); assertEquals(filter.getConditions().get(0).getName(), "testKey"); assertEquals(filter.getConditions().get(0).getValue(), "testValue");
assertEquals(DummyModel.count(new Filter(new Condition("column2", "test124"))), 2);
assertEquals(sortField.getOrder(builder, root), order1);
assertEquals(model.collection("children").first("children.column1", "testChildColumn1"), child2);
assertEquals(model.collection("children").where("children.column1", "testChildColumn0"), Arrays.asList(child1));
assertTrue(clonedFilter.getConditions().isEmpty()); assertEquals(clonedFilter.getPageNo(), 1); assertEquals(clonedFilter.getPerPage(), Integer.MAX_VALUE);
assertTrue(filter.isCacheable()); assertFalse(filter.isCacheable());
assertEquals(model.collection("children").count(new Filter()), 3);
assertEquals(models.get(0), model); assertEquals(models.get(1), model1);
assertNotNull(PropertyUtil.getReadMethod(clazz, "fieldWithGetter"));
assertEquals(models.size(), 1); assertEquals(models.get(0), dummyModel);
assertEquals(DummyModel.where(new Object[]{"column1", "test123"}), Arrays.asList(model));
assertNotNull(ActiveJpaAgentLoader.instance());
assertEquals(filter.getPageNo(), 1); assertEquals(filter.getPerPage(), Integer.MAX_VALUE);
assertTrue(PropertyUtil.isMapProperty(DummyClass.class.getField("stringMap").getGenericType())); assertFalse(PropertyUtil.isMapProperty(DummyClass.class.getField("genericObjectArray").getGenericType()));
assertEquals(ModelInterceptor.filter(DummyModel.class.getMethod("filter")).getEntityClass(), DummyModel.class);
assertEquals(ModelInterceptor.count(DummyModel.class.getMethod("count")), 2L);
assertEquals(DummyModel.where(new Object[]{"column1", "test123", "column2", "test125"}), Arrays.asList(model));
assertFalse(context.isTxnOpen());
assertEquals(parent.models.size(), 1);
assertEquals(clazz.getWrapperInt(), Integer.valueOf(100));
assertEquals(models.get(1), model); assertEquals(models.get(0), model1);
assertEquals(context.getEntityManager(), entityManager);
assertNull(DummyModel.first(new Object[]{"column1", "unknown"}));
assertNotNull(context); assertTrue(context.isReadOnly());
assertEquals(model.collection("children").where(new Filter(new Condition("children.column1", "testChildColumn0"), new Condition("children.column2", "testChildColumn2"))), Arrays.asList(child1));
assertEquals(models.size(), 2); assertEquals(models.get(0), model); assertEquals(models.get(1), model1);
assertFalse(PropertyUtil.isPrimitiveOrWrapper(DummyClass.class.getField("object").getType()));
assertEquals(PropertyUtil.getProperty(clazz, "wrapperInt"), 100);
assertEquals(DummyModel.where(new Filter(new Condition("column1", "test123"), new Condition("column2", "test125"))), Arrays.asList(model));
assertEquals(ModelInterceptor.findById(DummyModel.class.getMethod("findById", Serializable.class), model2.getId()), model2);
assertEquals(ModelInterceptor.first(DummyModel.class.getMethod("first", Object[].class), new Object[] {"column1", dummyModel1.getColumn1()}), dummyModel1);
assertEquals(DummyModel.first(new Object[]{"column1", "test123", "column2", "test125"}), model);
assertEquals(new Version(1), Version.parse("1")); assertEquals(new Version(1, 2, 3), Version.parse("1.2.3")); assertEquals(new Version(1, "SNAPSHOT"), Version.parse("1-SNAPSHOT")); assertEquals(new Version(1, 2, 3, "SNAPSHOT"), Version.parse("1.2.3-SNAPSHOT"));
assertEquals(ones, c.bitCount()); assertTrue(c.ones().allMatch(c::booleanValue));
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), length); assertEquals(gene.min().doubleValue(), domain.min()); assertEquals(gene.max().doubleValue(), domain.max()); assertEquals(value.length, length); assertEquals(gt.get(0).get(i).doubleValue(), value[i]);
assertEquals(gt.length(), domain.length); assertEquals(ch.length(), 1); assertEquals(gene.min().longValue(), domain[i].min()); assertEquals(gene.max().longValue(), domain[i].max()); assertEquals(value.length, domain.length); assertEquals(gt.get(i).get(0).longValue(), value[i]);
assertEquals(MinMax.min(comparator.value, a, b), min);
assertTrue(CharacterGene.of(c).isValidCharacter(c));
assertEquals(chromosome.toBigInteger(), value);
assertFalse(g.bit()); assertTrue(g.bit());
assertEquals(a.min().longValue(), min); assertEquals(a.max().longValue(), max); assertEquals(b.min().longValue(), min); assertEquals(b.max().longValue(), max); assertEquals(c.min().longValue(), min); assertEquals(c.max().longValue(), max); assertEquals(c.allele().longValue(), ((i - 50) + ((i - 100)*3))/2);
assertEquals(a.min().longValue(), min); assertEquals(a.max().longValue(), max); assertEquals(b.min().longValue(), min); assertEquals(b.max().longValue(), max); assertEquals(c.min().longValue(), min); assertEquals(c.max().longValue(), max); assertEquals(c.allele().longValue(), ((i - 50) + ((i - 100)*3))/2);
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), length); assertEquals(gene.min().intValue(), domain.min()); assertEquals(gene.max().intValue(), domain.max()); assertEquals(value.length, length); assertEquals(gt.get(0).get(i).intValue(), value[i]);
assertEquals(matrix.length, rows); assertEquals(matrix[0].length, cols); assertEquals(matrix[row][col], gt.get(row).get(col).doubleValue());
assertTrue(g1.compareTo(g2) < 0); assertTrue(g2.compareTo(g3) < 0); assertTrue(g3.compareTo(g2) > 0); assertEquals(0, g2.compareTo(g2));
assertTrue(gene.isValidCharacter(gene.allele()));
assertEquals(gt.length(), domain.length); assertEquals(ch.length(), 1); assertEquals(gene.min().intValue(), domain[i].min()); assertEquals(gene.max().intValue(), domain[i].max()); assertEquals(value.length, domain.length); assertEquals(gt.get(i).get(0).intValue(), value[i]);
assertEquals(gene.isValid(), gene.allele() < 100); assertTrue(gene.allele() < 1000); assertTrue(gene.allele() >= 0);
assertEquals(a.min().doubleValue(), min); assertEquals(a.max().doubleValue(), max); assertEquals(b.min().doubleValue(), min); assertEquals(b.max().doubleValue(), max); assertEquals(c.min().doubleValue(), min); assertEquals(c.max().doubleValue(), max); assertEquals(c.allele().doubleValue(), ((i - 50) + ((i - 100)*3))/2.0);
assertEquals(gt.length(), domain.length); assertEquals(ch.length(), 1); assertEquals(gene.min().doubleValue(), domain[i].min()); assertEquals(gene.max().doubleValue(), domain[i].max()); assertEquals(value.length, domain.length); assertEquals(gt.get(i).get(0).doubleValue(), value[i]);
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), 1); assertEquals(gt.gene().min().longValue(), domain.min()); assertEquals(gt.gene().max().longValue(), domain.max()); assertEquals(f.apply(gt).longValue(), gt.gene().longValue());
assertEquals(genotypes1, genotypes2);
assertEquals(c1.get(i).bit(), c2.get(i).bit());
assertSame(RandomRegistry.random(), random);
assertEquals(matrix.length, rows); assertEquals(matrix[0].length, cols); assertEquals(matrix[row][col], gt.get(row).get(col).intValue());
assertEquals(matrix.length, rows); assertEquals(matrix[0].length, cols); assertEquals(matrix[row][col], gt.get(row).get(col).longValue());
assertEquals(ch.length(), 3); assertTrue(ch.isValid()); assertEquals(permutation.length(), 3);
assertEquals(t1, t2, 15);
assertEquals(zeros, c.length() - c.bitCount()); assertTrue(c.zeros().noneMatch(c::booleanValue));
assertEquals(MinMax.max(comparator.value, a, b), max);
assertEquals(gt.length(), 1); assertEquals(value.length(), gt.chromosome().length()); assertEquals(value.get(i), gt.get(0).get(i).toString());
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), 1); assertEquals(gt.gene().min().intValue(), domain.min()); assertEquals(gt.gene().max().intValue(), domain.max()); assertEquals(f.apply(gt).intValue(), gt.gene().intValue());
assertTrue(gene.isValid()); assertTrue(gene.allele() < 1000); assertTrue(gene.allele() >= 0);
assertEquals(ch.length(), length); assertEquals(gene.isValid(), gene.allele() < 100); assertTrue(gene.allele() < 1000); assertTrue(gene.allele() >= 0);
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), length); assertEquals(gene.min().longValue(), domain.min()); assertEquals(gene.max().longValue(), domain.max()); assertEquals(value.length, length); assertEquals(gt.get(0).get(i).longValue(), value[i]);
assertEquals(gt.length(), 1); assertEquals(gt.chromosome().length(), 1); assertEquals(gt.gene().min().doubleValue(), domain.min()); assertEquals(gt.gene().max().doubleValue(), domain.max()); assertEquals(f.apply(gt).doubleValue(), gt.gene().doubleValue());
assertTrue(MergeBytesInputStream.BEGIN_FRAME == n); assertEquals(4, n); assertArrayEquals(expected, Arrays.copyOfRange(out, 0, 4)); assertEquals(1, n); assertArrayEquals(new byte[] { 0x77 }, Arrays.copyOfRange(out, 0, 1));
assertEquals(0x44, is.read()); assertEquals(MergeBytesInputStream.BEGIN_FRAME, is.read()); assertEquals(0x55, is.read()); assertEquals(0x85, is.read()); assertEquals(0x00, is.read()); assertEquals(0x80, is.read());
assertEquals(itg[i], RTMedibus.parseInt(str[i].getBytes("ASCII")));
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertTrue( file.exists());
assertThat(instance.getMatchPhenotypeId(), equalTo(matchPhenotype.getId()));
assertThat(variant, isAssignedTo(gene2));
assertThat(ChromosomeParser.parseChr("4_GL000008v2_random"), equalTo((byte) 0));
assertThat(vcf, equalTo(expected));
assertThat(result, equalTo(expResult));
assertThat(outputPath.toFile().exists(), is(true)); assertThat(outputPath.toFile().delete(), is(true));
assertThat(instance.getFilterType(), equalTo(expResult));
assertThat(instance.getFrequencyScore(), equalTo(1f));
assertThat(ChromosomeParser.parseChr("M"), equalTo((byte) 25)); assertThat(ChromosomeParser.parseChr("MT"), equalTo((byte) 25)); assertThat(ChromosomeParser.parseChr("m"), equalTo((byte) 25)); assertThat(ChromosomeParser.parseChr("chrM"), equalTo((byte) 25));
assertThat(nonPathogenic.equals(pathogenic), is(false));
assertThat(analysis.getProbandSampleName(), equalTo("Bod"));
assertThat(instance, equalTo(instance));
assertThat(instance.compareTo(sameScore), equalTo(0));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.runFilter(variantEvaluation), equalTo(PASS_FREQUENCY_FILTER_RESULT));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.isPredictedPathogenic(), is(true));
assertThat(withId.getId(), equalTo("WIBBLE"));
assertThat(outputPath.toFile().exists(), is(true)); assertThat(outputPath.toFile().delete(), is(true));
assertThat(outputPath.toFile().exists(), is(true)); assertThat(outputPath.toFile().delete(), is(true));
assertThat(instance.getScore(), equalTo(score));
assertThat(instance.getKnownGenes(), equalTo(allGenes));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertTrue(testOutFile.toFile().exists()); assertTrue(testOutFile.toFile().delete());
assertThat(instance.runFilter(variantEvaluation), equalTo(FAIL_FREQUENCY_FILTER_RESULT));
assertThat(instance.equals(other), is(false));
assertThat(instance.getFrequencyData(variant(1, 12345, "AT", "G")), equalTo(localFrequencyData(0.02f)));
assertThat(instance.toString().isEmpty(), is(false));
assertThat(output, equalTo(expected));
assertThat(GeneScore.builder().build(), equalTo(GeneScore.builder().build()));
assertThat(input, equalTo(validated));
assertThat(Contig.parseId("24"), equalTo(24)); assertThat(Contig.parseId("chr24"), equalTo(24)); assertThat(Contig.parseId("Y"), equalTo(24)); assertThat(Contig.parseId("chrY"), equalTo(24));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertTrue(gene1.compareTo(gene2) == 0); assertTrue(gene2.compareTo(gene1) == 0);
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.EXAC_EXOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(firstOption.compareTo(secondOption), lessThan(0));
assertThat(result, equalTo(report));
assertThat(upstreamVariant.getVariantEffect(), equalTo(VariantEffect.UPSTREAM_GENE_VARIANT)); assertThat(intergenicVariant.getVariantEffect(), equalTo(VariantEffect.INTERGENIC_VARIANT)); assertThat(wasUpstream.getVariantEffect(), equalTo(VariantEffect.REGULATORY_REGION_VARIANT)); assertThat(wasIntergenic.getVariantEffect(), equalTo(VariantEffect.REGULATORY_REGION_VARIANT));
assertThat(analysisResults.getGenes().size(), equalTo(2));
assertThat(instance.getBestPhenotypeMatches(), equalTo(bestMatches));
assertThat(result, equalTo(expectedPathData));
assertThat(instance.resolveAbsoluteResourcePath(relativeFilePath), equalTo(Paths.get("src/test/resources/data/genome.h2.db") .toAbsolutePath()));
assertThat(variantAnnotations.getChr(), equalTo(23)); assertThat(variantAnnotations.getPos(), equalTo(118608471 + 1)); assertThat(variantAnnotations.getRef(), equalTo("")); assertThat(variantAnnotations.getAlt(), equalTo("T"));
assertThat(DEFAULT_ANALYSIS.getPathogenicitySources().isEmpty(), is(true));
assertThat(SampleGenotype.of(AlleleCall.REF, AlleleCall.ALT).isPhased(), is(false)); assertThat(SampleGenotype.phased(AlleleCall.REF, AlleleCall.ALT).isPhased(), is(true));
assertThat(VariantEffectUtility.isNonCodingVariant(VariantEffect.NON_CODING_TRANSCRIPT_EXON_VARIANT), is(true)); assertThat(VariantEffectUtility.isNonCodingVariant(VariantEffect.FIVE_PRIME_UTR_EXON_VARIANT), is(true));
assertThat(instance.getSampleVariantTypeCounts(), equalTo(counts));
assertThat(Contig.parseId("23"), equalTo(23)); assertThat(Contig.parseId("chr23"), equalTo(23)); assertThat(Contig.parseId("X"), equalTo(23)); assertThat(Contig.parseId("chrX"), equalTo(23));
assertThat(result.isEmpty(), is(true));
assertThat(annotations.getChromosome(), equalTo(23)); assertThat(annotations.getPosition(), equalTo(allelePosition.getPos())); assertThat(annotations.getRef(), equalTo(allelePosition.getRef())); assertThat(annotations.getAlt(), equalTo(allelePosition.getAlt())); assertThat(annotations.hasTranscriptAnnotations(), is(false));
assertThat(variantEvaluation.getTranscriptAnnotations(), equalTo(Collections.emptyList()));
assertThat(emptyCache.isEmpty(), is(true));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(instance.getOrDefault(defaultAssembly, HG19_SERVICE), equalTo(HG19_SERVICE));
assertThat(buildAndGetSteps(), equalTo(singletonList(new VariantEffectFilter(variantEffects))));
assertThat(instance.getCurrentHpoIds(ImmutableList.of("HP:0009902", "HP:0000000")), equalTo(ImmutableList.of("HP:0009902", "HP:0000000"))); assertThat(instance.getCurrentHpoIds(ImmutableList.of("HP:0009902", "HP:0009905", "HP:0000000")), equalTo(ImmutableList.of("HP:0009902", "HP:0009905", "HP:0000000")));
assertThat(result, equalTo(expResult));
assertThat(result, equalTo(expected));
assertThat(analysisBuilder.build().getHpoIds(), equalTo(Collections.<String>emptyList()));
assertThat(instance.runFilter(variantEvaluation), equalTo(PASS_FREQUENCY_FILTER_RESULT));
assertThat(instance.getRowIndexForGene(3333), equalTo(3));
assertThat(FREQUENCY_DATA.getRsId(), equalTo(RSID));
assertThat(variants.size(), equalTo(1));
assertThat(instance.equals(otherFilter), is(true));
assertThat(instance.calculateBestForwardAndReciprocalMatches(Collections.emptyList()), equalTo(Collections.emptyList()));
assertThat(variantAnnotations, not(nullValue())); assertThat(variantAnnotations.getChr(), equalTo(0)); assertThat(variantAnnotations.getPos(), equalTo(0)); assertThat(variantAnnotations.getRef(), equalTo("A")); assertThat(variantAnnotations.getAlt(), equalTo("T"));
assertThat(instance, equalTo(other));
assertThat(instance.getPathogenicityScore(), equalTo(expected));
assertThat(instance.getFishScore(), equalTo(modelScore));
assertThat(frequencyData, equalTo(FrequencyData.empty()));
assertThat(instance.equals(obj), is(true));
assertThat(instance, equalTo(other));
assertThat(noMatchesInstance.getBestAvgScore(), equalTo(0d));
assertThat(result, equalTo(regulatoryFeatures));
assertThat(RsId.of("123456"), equalTo(RsId.of(123456)));
assertThat(instance.calculateBestPhenotypeMatchesByTerm(Collections.emptyList()), equalTo(Collections.emptyList()));
assertThat(results, equalTo(expected));
assertThat(alleleGzipFile.toFile().exists(), is(true)); assertThat(tempDir.resolve("test_empty.vcf.gz.tbi").toFile().exists(), is(true));
assertTrue(testOutFile.toFile().exists()); assertTrue(testOutFile.toFile().delete());
assertThat(instance.keepNonPathogenicVariants(), equalTo(keepNonPathogenic));
assertThat(result, instanceOf(HtmlResultsWriter.class));
assertThat(analysisSteps(), equalTo(singletonList(filter)));
assertThat(instance.getScore(), equalTo(1f)); assertThat(instance.getRawScore(), equalTo(5f));
assertThat(result, instanceOf(JsonResultsWriter.class));
assertThat(instance.getValue(AlleleProperty.KG), equalTo(0.12f)); assertThat(instance.getValues().size(), equalTo(1));
assertThat(instance.getId(), equalTo(modelId));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(variants.size(), equalTo(2)); assertThat(variants.get(0).getSampleGenotypes(), equalTo(ImmutableMap.of("Sample", SampleGenotype.of(AlleleCall.OTHER_ALT, AlleleCall.ALT)))); assertThat(variants.get(1).getSampleGenotypes(), equalTo(ImmutableMap.of("Sample", SampleGenotype.of(AlleleCall.OTHER_ALT, AlleleCall.ALT))));
assertThat(instance.isPredictedPathogenic(), is(true));
assertThat(isDeletion("A", "T"), is(false)); assertThat(isDeletion("AA", "GT"), is(false)); assertThat(isDeletion("ATT", "A"), is(true)); assertThat(isDeletion("T", "TTA"), is(false));
assertThat(buildAndGetSteps(), equalTo(Collections.emptyList()));
assertThat(instance.getGeneSymbol(), equalTo(GENE2_GENE_SYMBOL));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getFrequencyData(variant(1, 12345, "A", "AT")), equalTo(localFrequencyData(0.03f)));
assertThat(instance, equalTo(createdFromYaml));
assertThat(variants.size(), equalTo(11));
assertThat(instance.getMpoTerms(), equalTo(mpoTerms));
assertThat(result, equalTo(report));
assertThat(outString, equalTo(expected));
assertThat(result, equalTo(expResult));
assertThat(results, equalTo(expected));
assertThat(instance.getGeneId(), equalTo(String.valueOf(GENE1_ENTREZ_GENE_ID)));
assertThat(instance.getClosestPhenoMatchInNetwork(123), equalTo(GeneMatch.NO_HIT));
assertThat(instance.runFilter(variantEvaluation), equalTo(PASS_FREQUENCY_FILTER_RESULT));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getFailed(), equalTo(FAILED));
assertThat(RsIdParser.parseRsId("rs12345"), equalTo("rs12345"));
assertThat(instance.getPathogenicityScore(), equalTo(expected));
assertThat(EMPTY_DATA.getMaxFreq(), equalTo(maxFreq));
assertThat(sift.compareTo(poly), equalTo(EQUALS));
assertThat(instance.getPathogenicityData(variant(1, 1, "ATTT", "A")), equalTo(PathogenicityData.of(RemmScore.of(1f))));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.generate(new Object(), Object.class.getMethod("toString"), object1, object2), equalTo(new SimpleKey(object1, object2)));
assertThat(variantEvaluation.getSampleGenotypes(), equalTo(VariantEvaluation.Builder.SINGLE_SAMPLE_HET_GENOTYPE));
assertThat(instance, equalTo(other));
assertThat(instance.getPriorityType(), equalTo(priorityType));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance, not(equalTo(other)));
assertThat(instance.overQualityThreshold(OVER_THRESHOLD), is(true));
assertThat(hg38Analysis.getGenomeAssembly(), equalTo(GenomeAssembly.HG38)); assertThat(hg19Analysis.getGenomeAssembly(), equalTo(GenomeAssembly.HG19));
assertThat(instance.equals(other), is(false));
assertThat(EMPTY_DATA.hasEspData(), is(false));
assertThat(instance.getStart(), equalTo(10));
assertThat(instance.toString(), equalTo(String.format("{text=%s, value=%s}", text, value)));
assertThat(closestPhenoMatchInNetwork.getQueryGeneId(), equalTo(queryGeneId)); assertThat(closestPhenoMatchInNetwork.getMatchGeneId(), equalTo(bestModel.getEntrezGeneId())); assertThat(closestPhenoMatchInNetwork.getScore(), closeTo(0.57d, 0.001)); assertThat(closestPhenoMatchInNetwork.getBestMatchModels(), equalTo(ImmutableList.of(bestModel)));
assertTrue(instance.addResource(resource));
assertThat(filterResult, equalTo(FAIL_RESULT));
assertThat(instance.getLabel(), equalTo(label));
assertThat(result, equalTo(expResult));
assertThat(buildAndGetSteps(), equalTo(singletonList(new GeneSymbolFilter(entrezIds))));
assertThat(instance, equalTo(other));
assertThat(instance.equals(null), is(false));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.equals(obj), is(false));
assertThat(EMPTY_DATA.hasDbSnpRsID(), is(false));
assertThat(nonPathogenicPolyphen.compareTo(instance), equalTo(1));
assertThat(instance.getQueryPhenotypeTerms(), equalTo(queryPhenotypeTerms));
assertThat(ChromosomeParser.parseChr("chr1"), equalTo((byte) 1)); assertThat(ChromosomeParser.parseChr("chr22"), equalTo((byte) 22));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertFalse(hpId2termMap.isEmpty()); assertTrue(tempDir.resolve("hp_alt_ids.pg").toFile().exists()); assertTrue(tempDir.resolve("hpo.pg").toFile().exists());
assertThat(instance.getFrequencyData(variant(1, 12345, "A", "T")), equalTo(FrequencyData.empty()));
assertThat(instance.getLcs(), equalTo(lcs));
assertThat(DEFAULT_ANALYSIS.getFrequencySources().isEmpty(), is(true));
assertThat(instance.equals(obj), is(false));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(instance.equals(other), is(true));
assertThat(results.size(), equalTo(2)); assertThat(regulatoryFeatures, hasItem(result)); assertThat(result.getFeatureType(), not(RegulatoryFeature.FeatureType.UNKNOWN));
assertThat(instance.getFrequencyData(variant(25, 12345, "A", "T")), equalTo(localFrequencyData(23.0f)));
assertThat(instance.getCombinedScore(), equalTo(1f));
assertThat(instance.getMatches(), equalTo(phenotypeMatches));
assertThat(instance.getPathogenicityScore(), equalTo(pathData.getScore()));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.getFilterType(), equalTo(FilterType.QUALITY_FILTER));
assertThat(output, equalTo(expected));
assertThat(instance.keepNonPathogenic(), equalTo(PASS_ONLY_PATHOGENIC_AND_MISSENSE_VARIANTS));
assertThat(variant, isAssignedTo(gene1));
assertThat(instance.toString(), equalTo(expResult));
assertThat(instance.getPathogenicityScore(), equalTo(expected));
assertThat(instance.equals(other), is(false));
assertThat(result, equalTo(expResult));
assertThat(instance.getAnalysisSteps(), hasItem(prioritiser));
assertThat(instance.getScore(), equalTo(0.5f)); assertThat(instance.getRawScore(), equalTo(2.5f));
assertThat(instance.toString(), equalTo("PriorityScoreFilter{priorityType=PHIVE_PRIORITY, minPriorityScore=0.8}"));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(genotype.getType(), equalTo(GenotypeType.HOM_VAR)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(instance.isPredictedPathogenic(), is(false));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.toString().isEmpty(), is(false));
assertThat(ChromosomeParser.parseChr("."), equalTo((byte) 0));
assertThat(instance.hasServiceFor(GenomeAssembly.HG19), is(true)); assertThat(instance.hasServiceFor(GenomeAssembly.HG38), is(false));
assertThat(instance.getChromosomeName(), equalTo(CHROMOSOME_NAME));
assertThat(analysisRunner, instanceOf(SimpleAnalysisRunner.class));
assertThat(variantAnnotations.getChr(), equalTo(1)); assertThat(variantAnnotations.getPos(), equalTo(0)); assertThat(variantAnnotations.getRef(), equalTo("A")); assertThat(variantAnnotations.getAlt(), equalTo("T"));
assertThat(outputPath.toFile().exists(), is(false));
assertThat(instance.getAnalysisMode(), equalTo(AnalysisMode.FULL));
assertThat(instance.equals(other), is(false));
assertThat(instance.hasMessages(), is(false));
assertThat(instance.getSampleGenotype("Zaphod"), equalTo(sampleGenotype)); assertThat(instance.getSampleGenotype("Nemo"), equalTo(SampleGenotype.empty()));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(instance.getCurrentTerm("HP:3000079"), equalTo(BAZ));
assertThat(instance.equals(RsId.of(ID)), is(true));
assertThat(outputSettings, equalTo(expected));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(EMPTY_DATA.hasPredictedScore(), is(false));
assertThat(output, equalTo(expected));
assertThat(sampleId, equalTo(SampleIdentifier.defaultSample()));
assertThat(instance.getAllTerms(), equalTo(allHpoTerms));
assertThat(instance.toString().isEmpty(), is(false));
assertThat(instance.getOffTargetVariantTypes(), equalTo(offTargetVariantEffects));
assertThat(RS_ID_ONLY_DATA.isRepresentedInDatabase(), is(true));
assertThat(FREQUENCY_DATA.getFrequencyForSource(ESP_ALL), equalTo(ESP_ALL_PASS));
assertThat(instance.containsPosition(variant), is(true));
assertThat(instance.getChromosomeName(), equalTo("MT"));
assertThat(instance.getClosestPhenoMatchInNetwork(1), equalTo(GeneMatch.NO_HIT));
assertThat(instance.getFilterStatusForMode(ModeOfInheritance.ANY), equalTo(FilterStatus.UNFILTERED)); assertThat(instance.getFilterStatusForMode(ModeOfInheritance.AUTOSOMAL_DOMINANT), equalTo(FilterStatus.UNFILTERED)); assertThat(instance.getFilterStatusForMode(ModeOfInheritance.AUTOSOMAL_RECESSIVE), equalTo(FilterStatus.UNFILTERED));
assertThat(instance.getHpoIdsForDiseaseId("OMIM:101600"), equalTo(omim101600HpoIds));
assertThat(instance.getSource(), equalTo(PathogenicitySource.MPC)); assertThat(instance.getScore(), equalTo(0.2f)); assertThat(instance.getRawScore(), equalTo(1f));
assertThat(instance.hashCode(), equalTo(anotherTargetFilter.hashCode()));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.getEnd(), equalTo(100));
assertThat(instance.getPpiEvidence(), equalTo(ppiEvidence));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.getMessages(), equalTo(expectedMessages));
assertThat(instance.getId(), equalTo(id));
assertThat(dataMatrix.numRows(), equalTo(10)); assertThat(dataMatrix.numColumns(), equalTo(10));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(result, equalTo(expResult));
assertThat(instance.get(GenomeAssembly.HG38), equalTo(HG38_SERVICE));
assertThat(analysisBuilder.build().getAnalysisMode(), equalTo(AnalysisMode.PASS_ONLY));
assertThat(instance.getFrequencyData(variant(1, 12345, "A", "TG")), equalTo(localFrequencyData(0.01f)));
assertThat(instance.resolveAbsoluteResourcePath("genome.h2.db"), equalTo(Paths.get("src/test/resources/user-defined/genome.h2.db") .toAbsolutePath()));
assertThat(result, equalTo(PathogenicityData.of(PATH_CLINVAR_DATA, PolyPhenScore.of(1f), CaddScore.of(15f))));
assertThat(instance.equals(other), is(false));
assertThat(ChromosomeParser.parseChr("X"), equalTo((byte) 23)); assertThat(ChromosomeParser.parseChr("x"), equalTo((byte) 23)); assertThat(ChromosomeParser.parseChr("chrX"), equalTo((byte) 23));
assertThat(proband.getType(), equalTo(GenotypeType.HET)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false)); assertThat(variant.getCompatibleInheritanceModes(), hasItem(ModeOfInheritance.AUTOSOMAL_DOMINANT));
assertThat(instance.getPhenotypeScore(), equalTo(1f));
assertThat(instance.getFrequencyData(variant(1, 12345, "A", "TG")), equalTo(localFrequencyData(0.01f)));
assertThat(analysis.getAnalysisMode(), equalTo(AnalysisMode.PASS_ONLY));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(AlleleConverter.toAlleleProperties(ALLELE), equalTo(ALLELE_PROPERTIES));
assertThat(jannovarData, instanceOf(JannovarData.class) );
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertTrue(gene1.compareTo(gene2) < 0); assertTrue(gene2.compareTo(gene1) > 0);
assertThat(instance.equals(other), is(true));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getAnalysisSteps(), equalTo(steps));
assertThat(instance.getGeneId(), equalTo(GENE1_GENE_ID));
assertThat(instance.getVcfPath(), equalTo(vcfPath));
assertThat(variantAnnotations.getChrName(), equalTo("10")); assertThat(variantAnnotations.getChr(), equalTo(10)); assertThat(variantAnnotations.getPos(), equalTo(-1)); assertThat(variantAnnotations.getRef(), equalTo("")); assertThat(variantAnnotations.getAlt(), equalTo("")); assertThat(variantAnnotations.hasAnnotation(), is(false)); assertThat(variantAnnotations.getHighestImpactEffect(), equalTo(VariantEffect.SEQUENCE_VARIANT));
assertThat(instance.runFilter(variantEvaluation), equalTo(PASS_FREQUENCY_FILTER_RESULT));
assertThat(RsIdParser.parseRsId("~rs12345"), equalTo("rs12345"));
assertThat(alleleResource.getAlleleParser(), instanceOf(TopMedAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.getEnd(), equalTo(1));
assertThat(lines[0] + "\\n", equalTo(HEADER));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.hashCode(), equalTo(otherFilter.hashCode()));
assertThat(geneIdentifiers, equalTo(Arrays.asList(first, second, third)));
assertThat(instance.passedFilters(), is(true));
assertThat(map.isEmpty(), is(true)); assertThat(mvStore.hasMap("alleles"), is(true));
assertThat(CaddScore.of(1.0f).getSource(), equalTo(PathogenicitySource.CADD));
assertThat(alleleResource.getAlleleParser(), instanceOf(DbNsfpAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(variants.size(), equalTo(2)); assertThat(variant.hasTranscriptAnnotations(), is(false));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.equals(other), is(true));
assertThat(instance.getFishScore(), equalTo(0d));
assertThat(instance.getText(), equalTo(text));
assertThat(instance.equals(other), is(false));
assertThat(FREQUENCY_DATA.hasDbSnpData(), is(true));
assertThat(instance.getPathogenicityData(variant(1, 1, "A", "T")), equalTo(PathogenicityData.of(RemmScore.of(1f))));
assertThat(results.isEmpty(), is(true));
assertThat(result, equalTo(expResult));
assertThat(instance.hasPredictedScore(), is(true));
assertThat(result, equalTo(expResult));
assertThat(instance.getMaximumFrequency(), equalTo(maxFreq));
assertThat(buildAndGetSteps(), equalTo(singletonList(new PathogenicityFilter(keepNonPathogenic))));
assertThat(buildAndGetSteps(), equalTo(singletonList(new IntervalFilter(geneticInterval))));
assertThat(instance.makeHiPhivePrioritiser(HiPhiveOptions.defaults()), instanceOf(HiPhivePriority.class));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(vcfAD, equalTo(failedFgfr2VariantWithFilterField("var-effect"))); assertThat(vcfAR, equalTo(failedFgfr2VariantWithFilterField("inheritance;var-effect")));
assertThat(result, equalTo(report));
assertThat(phivePriority, equalTo(other));
assertThat(instance.getMouseScore(), equalTo(0d));
assertThat(instance.getPathogenicityData(variant(1, 1, "A", "ATTT")), equalTo(PathogenicityData.of(RemmScore.of(1f))));
assertThat(result, equalTo(expResult));
assertThat(instance.equals(other), is(false));
assertThat(instance.toString(), equalTo("MISSENSE_VARIANT=[1, 2, 3]"));
assertThat(instance, equalTo(Pedigree.of(manuel)));
assertThat(genotype.getType(), equalTo(GenotypeType.HOM_REF)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(lineCount, equalTo(67L));
assertThat(EMPTY_GENE_IDENTIFIER.getGeneSymbol(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getGeneSymbol(), equalTo("ABC1"));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(RsIdParser.parseRsId("."), equalTo(""));
assertThat(AlleleProtoAdaptor.toAlleleKey(variant), equalTo(expected));
assertThat(instance.getCurrentHpoIds(ImmutableList.of("HP:0009902", obsoleteThinEarHelixId)), equalTo(expected)); assertThat(instance.getCurrentHpoIds(ImmutableList.of("HP:0009902", currentThinEarHelixId, obsoleteThinEarHelixId)), equalTo(expected));
assertThat(AlleleConverter.mergeProperties(ALLELE_PROPERTIES, toMerge), equalTo(expected));
assertThat(instance.getPriorityType(), equalTo(PriorityType.OMIM_PRIORITY));
assertThat(instance.getPassedVariantEvaluations(), equalTo(passedVariantEvaluations));
assertThat(output, equalTo(expected));
assertThat(instance.hashCode(), equalTo(expResult));
assertThat(instance.getPriorityType(), equalTo(PriorityType.PHIVE_PRIORITY));
assertThat(DEFAULT_ANALYSIS.getAnalysisSteps(), equalTo(steps));
assertThat(ChromosomeParser.parseChr("Y"), equalTo((byte) 24)); assertThat(ChromosomeParser.parseChr("y"), equalTo((byte) 24)); assertThat(ChromosomeParser.parseChr("chrY"), equalTo((byte) 24));
assertThat(result, equalTo(ImmutableList.of(new VariantEffectCount(VariantEffect.MISSENSE_VARIANT, ImmutableList .of(0)))));
assertThat(RsId.of("rs123456"), equalTo(RsId.of(123456)));
assertThat(analysis.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.of(options)));
assertThat(result, equalTo(VALID_PEDIGREE));
assertThat(variants.size(), equalTo(1)); assertThat(variantEvaluation.getId(), equalTo("esv3587212"));
assertThat(EMPTY_GENE_IDENTIFIER.getGeneId(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getGeneId(), equalTo("12345"));
assertThat(variantAnnotation.getChromosome(), equalTo(23)); assertThat(variantAnnotation.getPosition(), equalTo(trimmed.getPos())); assertThat(variantAnnotation.getRef(), equalTo(trimmed.getRef())); assertThat(variantAnnotation.getAlt(), equalTo(trimmed.getAlt())); assertThat(variantAnnotation.hasTranscriptAnnotations(), is(false)); assertThat(variantAnnotation.getVariantEffect(), equalTo(VariantEffect.STRUCTURAL_VARIANT));
assertThat(variantEvaluation.getChromosomeName(), equalTo("Can be anything"));
assertThat(instance.getFilterType(), equalTo(FilterType.PRIORITY_SCORE_FILTER));
assertThat(instance.getRef(), equalTo(REF));
assertThat(variant, isAssignedTo(gene1));
assertThat(instance.getCompatibleModes(), equalTo(desiredInheritanceMode));
assertThat(instance.removeKnownVariants(), equalTo(removeKnownVariants));
assertThat(instance.getPathogenicityData(variant(1, 1, "A", "T")), equalTo(PathogenicityData.empty()));
assertThat(output, notNullValue()); assertThat(queryTerms, notNullValue()); assertThat(queryTerms.getId(), equalTo(phenoGridId)); assertThat(queryTerms.getPhenotypeIds().isEmpty(), is(true)); assertThat(output.getPhenoGridMatchGroups().isEmpty(), is(true));
assertThat(instance.getMatches(), equalTo(matches));
assertThat(geneScores, equalTo(Arrays.asList(one, two, three, four, five, six)));
assertThat(variants.size(), equalTo(1)); assertThat(variantEvaluation.getId(), equalTo(""));
assertThat(instance.getDiseaseDataAssociatedWithGeneId(4444), equalTo(expected));
assertThat(variant, isAssignedTo(gene1)); assertThat(variant.getTranscriptAnnotations(), equalTo(originalAnnotations));
assertThat(result, instanceOf(PhenogridWriter.class));
assertThat(geneScores, equalTo(expected));
assertThat(result, equalTo(FrequencyData.of(RsId.of(234567), Frequency.of(FrequencySource.ESP_AFRICAN_AMERICAN, 1f))));
assertThat(variant, isAssignedTo(gene2));
assertThat(instance.equals(object), is(false));
assertThat(instance, equalTo(other));
assertThat(result.failed(), is(true));
assertThat(result, equalTo(VariantEffectPathogenicityScore.NON_PATHOGENIC_SCORE));
assertThat(instance.runFilter(variantEvaluation), equalTo(FAIL_FREQUENCY_FILTER_RESULT));
assertThat(instance.toString(), equalTo("NoneTypePrioritiser{}"));
assertThat(result, equalTo(report));
assertThat(result, equalTo(expResult));
assertThat(instance.toString(), not(startsWith("de.charite.compbio")));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(zero.getSex(), equalTo(Sex.UNKNOWN)); assertThat(minusNine.getSex(), equalTo(Sex.UNKNOWN));
assertThat(instance.hasTranscriptAnnotations(), is(false));
assertThat(instance.equals(obj), is(false));
assertThat(analysis.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.defaultForModes(ModeOfInheritance.AUTOSOMAL_DOMINANT)));
assertThat(dominantFilter.equals(otherDominantFilter), is(true));
assertThat(variantAnnotations.getChr(), equalTo(23)); assertThat(variantAnnotations.getPos(), equalTo(118608470 + 2)); assertThat(variantAnnotations.getRef(), equalTo("")); assertThat(variantAnnotations.getAlt(), equalTo("T"));
assertThat(score, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats)));
assertThat(result, equalTo(VariantEffectPathogenicityScore.DEFAULT_MISSENSE_SCORE));
assertThat(alleleGzipFile.toFile().exists(), is(true)); assertThat(tempDir.resolve("test_first_ten_dbsnp.vcf.gz.tbi").toFile().exists(), is(false));
assertThat(instance.getAnalysisSteps(), hasItem(geneFilter));
assertThat(instance.getDiseaseDataAssociatedWithGeneId(2263), equalTo(expected));
assertThat(analysis.getAnalysisMode(), equalTo(AnalysisMode.FULL));
assertThat(instance.getValue(), equalTo(value));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.getQueryTermPhenotypeMatches(), equalTo(queryPhenotypeMatches));
assertThat(result, equalTo(expected));
assertThat(copy, equalTo(DEFAULT_ANALYSIS));
assertThat(instance.isWhiteListed(), is(false));
assertThat(EMPTY_DATA.hasClinVarData(), is(false));
assertThat(RsId.empty().isEmpty(), is(true));
assertThat(ResultsWriterUtils.getMaxPassedGenes(getGenes(), 0), equalTo(allPassedGenes));
assertThat(instance.equals(string), is(false)); assertThat(string.equals(instance), is(false));
assertThat(mim2geneMap, equalTo(expected)); assertThat(testResource.getParseStatus(), equalTo(ResourceOperationStatus.SUCCESS));
assertThat(geneScores, equalTo(expected));
assertThat(result.toString(), startsWith("PhivePriorityResult{geneId=2263, geneSymbol=\'FGFR2\', score=0.827862024307251"));
assertThat(score, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(instance.getGenes(), equalTo(genes));
assertThat(variant, isAssignedTo(noKnownGene));
assertThat(results, equalTo(expected));
assertThat(instance.getDiseaseDataAssociatedWithGeneId(2222), equalTo(expected));
assertThat(instance.equals(other), is(false));
assertThat(instance.getChromosome(), equalTo(23));
assertThat(analysisSteps(), equalTo(singletonList(prioritiser)));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(emptyHumanOne, equalTo(emptyHumanTwo)); assertThat(emptyHumanOne, not(equalTo(emptyMouseOne)));
assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(topologicalDomains, equalTo(tads));
assertThat(buildAndGetSteps(), equalTo(singletonList(new FailedVariantFilter())));
assertThat(results.isEmpty(), equalTo(true));
assertThat(result, equalTo(expected));
assertThat(Contig.parseId("25"), equalTo(25)); assertThat(Contig.parseId("chr25"), equalTo(25)); assertThat(Contig.parseId("M"), equalTo(25)); assertThat(Contig.parseId("MT"), equalTo(25)); assertThat(Contig.parseId("chrM"), equalTo(25));
assertThat(result, equalTo(expResult));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(result, equalTo(expResult));
assertThat(instance.getGeneScoresForMode(ModeOfInheritance.AUTOSOMAL_DOMINANT), equalTo(ImmutableList.of(firstAD, secondAD))); assertThat(instance.getGeneScoresForMode(ModeOfInheritance.AUTOSOMAL_RECESSIVE), equalTo(ImmutableList.of(thirdAR)));
assertThat(AlleleConverter.toProtoClinVar(CLINVAR_DATA), equalTo(PROTO_CLINVAR));
assertThat(instance.resolveAbsoluteResourcePath(absoluteFilePath), equalTo(Paths.get("src/test/resources/user-defined/genome.h2.db") .toAbsolutePath()));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(RsIdParser.parseRsId("rs12345;rs54321"), equalTo("rs12345"));
assertThat(instance.getMatchPhenotype(), equalTo(matchPhenotype));
assertThat(actual, equalTo(expected));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(genotype.getType(), equalTo(GenotypeType.HOM_REF)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(instance.getZpoMatchesForHpoTerm(cleftHelix), equalTo(Collections.emptySet()));
assertThat(instance.compareTo(nonPathogenicPolyphen), equalTo(-1));
assertThat(geneIdentifiers.size(), equalTo(41054)); assertThat(fgfr2Identifier, equalTo(expectedFgfr2Identifier));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(SIFT, 0.2f))));
assertThat(EMPTY_GENE_IDENTIFIER.getHgncSymbol(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getHgncSymbol(), equalTo("name"));
assertThat(result, equalTo(expected));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(result, equalTo(expResult));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.getMatrix(), equalTo(floatMatrix));
assertThat(instance.getScore(), equalTo(1d));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(variant, isAssignedTo(gene1));
assertThat(variants.size(), equalTo(2));
assertThat(instance.equals(other), is(false));
assertThat(instance.getCandidateGeneSymbol(), equalTo(candidateGeneSymbol));
assertThat(pathogenicityData, equalTo(PathogenicityData.empty())); assertThat(pathogenicityData.hasPredictedScore(), is(false));
assertThat(CaddScore.of(10f).getScore(), equalTo(0.90f)); assertThat((double) CaddScore.of(13f).getScore(), closeTo(0.95f, 0.1f)); assertThat(CaddScore.of(20f).getScore(), equalTo(0.99f));
assertThat(instance.getIndividuals(), equalTo(ImmutableSet.of(expectedProband)));
assertThat(results, equalTo(expected));
assertThat(instance.getDiseaseId(), equalTo(diseaseId));
assertThat(passesAllFilters.passedFilters(), is(true)); assertThat(failsAllFilters.passedFilters(), is(false)); assertThat(passesQualityFrequencyFilter.passedFilters(), is(false)); assertThat(passesTargetQualityFilter.passedFilters(), is(false));
assertThat(builtContext.getContig(), equalTo(CHROMOSOME_NAME)); assertThat(builtContext.getStart(), equalTo(POSITION)); assertThat(builtContext.getEnd(), equalTo(POSITION)); assertThat(builtContext.getNAlleles(), equalTo(2)); assertThat(builtContext.getReference().getBaseString(), equalTo(instance.getRef())); assertThat(builtContext.getAlternateAllele(instance.getAltAlleleId()).getBaseString(), equalTo(instance.getAlt()));
assertThat(EMPTY_DATA.hasPredictedScore(PathogenicitySource.POLYPHEN), is(false));
assertThat(actual, equalTo(expected));
assertThat(result, equalTo(PathogenicityData.of(PATH_CLINVAR_DATA)));
assertThat(result, equalTo(variantEvaluations)); assertThat(secondResults, equalTo(variantEvaluations));
assertThat(instance.isPredictedPathogenic(), is(false));
assertThat(allele1Result, equalTo(expected1)); assertThat(allele2Result, equalTo(expected2));
assertThat(result, equalTo(expResult));
assertThat(result, equalTo(PathogenicityData.of(PATH_CLINVAR_DATA, PolyPhenScore.of(1f))));
assertThat(instance.getGenesToKeep(), equalTo(genesToKeep));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(MVP, 0.7f))));
assertThat(instance.getLabel(), equalTo(label));
assertThat(instance.getMimimumQualityThreshold(), equalTo(MIN_QUAL_THRESHOLD));
assertThat(variantAnnotations.getChrName(), equalTo("10")); assertThat(variantAnnotations.getChr(), equalTo(10)); assertThat(variantAnnotations.getPos(), equalTo(123256214)); assertThat(variantAnnotations.getRef(), equalTo("T")); assertThat(variantAnnotations.getAlt(), equalTo("G")); assertThat(variantAnnotations.hasAnnotation(), is(true)); assertThat(variantAnnotations.getHighestImpactEffect(), equalTo(VariantEffect.MISSENSE_VARIANT));
assertThat(instance.getCompatibleInheritanceModes(), notNullValue()); assertThat(instance.getCompatibleInheritanceModes().isEmpty(), is(true));
assertThat(FREQUENCY_DATA.getFrequencyForSource(THOUSAND_GENOMES), equalTo(DBSNP_PASS));
assertThat(result, equalTo(report));
assertThat(result, instanceOf(TsvGeneResultsWriter.class));
assertThat(filterResult, equalTo(PASS_RESULT));
assertThat(instance.getMinimumQuality(), equalTo(minQual));
assertThat(instance.getMinPriorityScore(), equalTo(minPriorityScore));
assertThat(reports.size(), equalTo(analysis.getAnalysisSteps().size())); assertThat(reports.get(0).getFilterType(), equalTo(FilterType.KNOWN_VARIANT_FILTER)); assertThat(reports.get(1).getFilterType(), equalTo(FilterType.FREQUENCY_FILTER)); assertThat(reports.get(2).getFilterType(), equalTo(FilterType.PATHOGENICITY_FILTER));
assertThat(Pedigree.empty().size(), equalTo(0)); assertThat(Pedigree.justProband("Nemo").size(), equalTo(1)); assertThat(Pedigree.of(PROBAND, MOTHER, FATHER).size(), equalTo(3));
assertThat(matches.isEmpty(), is(true));
assertThat(analysisSteps(), equalTo(singletonList(prioritiser)));
assertThat(AlleleConverter.mergeProperties(ALLELE_PROPERTIES, toMerge), equalTo(expected));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_GENOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.getHumanGeneSymbol(), equalTo(humanGeneSymbol));
assertThat(instance.getHumanScore(), equalTo(modelScore));
assertThat(variant, isAssignedTo(gene1));
assertThat(instance.getMpoMatchesForHpoTerm(cleftHelix), equalTo(Collections.emptySet()));
assertThat(instance.getChromosome(), equalTo(CHROMOSOME));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(result, equalTo(expected));
assertThat(instance.toString(), equalTo("InheritanceFilter{compatibleModes=[AUTOSOMAL_RECESSIVE]}"));
assertThat(result, equalTo(expected));
assertThat(instance.getGeneSymbol(), equalTo(geneSymbol));
assertThat(EMPTY_DATA.hasKnownFrequency(), is(false));
assertThat(instance.equals(other), is(true));
assertThat(analysisBuilder.build().getFrequencySources(), equalTo(Collections.<FrequencySource>emptySet()));
assertThat(instance.getChromosome(), equalTo(1));
assertThat(instance.getPassed(), equalTo(PASSED));
assertThat(instance.equals(obj), is(false));
assertThat(instance.equals(other), is(false));
assertThat(EMPTY_GENE_IDENTIFIER.getEnsemblId(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getEnsemblId(), equalTo("ensemble"));
assertThat(instance.isEmpty(), is(false));
assertThat(instance.getFrequencyData(variant(1, 12345, "AT", "A")), equalTo(localFrequencyData(0.03f)));
assertThat(analysis.getAnalysisSteps().isEmpty(), is(true));
assertThat(PhenotypeTerm.notOf("id", "label"), equalTo(PhenotypeTerm.notOf("id", "label"))); assertThat(PhenotypeTerm.notOf("id", "label"), not(equalTo(PhenotypeTerm.of("id", "label")))); assertThat(PhenotypeTerm.notOf("id", "label").isPresent(), is(false)); assertThat(PhenotypeTerm.notOf("id", "label").notPresent(), is(true));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(MPC, 0.7f))));
assertThat(variant.passedFilter(FilterType.PRIORITY_SCORE_FILTER), is(false)); assertThat(variant.getFailedFilterTypes(), hasItem(FilterType.PRIORITY_SCORE_FILTER));
assertThat(instance.getPhenotypeTermForHpoId(fingerJointHyperExtensibility.getId()), equalTo(fingerJointHyperExtensibility));
assertThat(instance.getProvidedAssemblies(), equalTo(Sets.immutableEnumSet(GenomeAssembly.HG19, GenomeAssembly.HG38)));
assertThat(variantAnnotations.getChr(), equalTo(23)); assertThat(variantAnnotations.getPos(), equalTo(118608471 + 1)); assertThat(variantAnnotations.getRef(), equalTo("T")); assertThat(variantAnnotations.getAlt(), equalTo(""));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(result, equalTo(VALID_PEDIGREE));
assertThat(instance.getGeneSymbol(), equalTo("."));
assertThat(instance.equals(obj), is(false));
assertThat(sampleId, equalTo(SampleIdentifier.of("David", 0)));
assertThat(result, equalTo(FrequencyData.of(RsId.of(1234567), Frequency.of(FrequencySource.LOCAL, 2f))));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.generate(new Object(), Object.class.getMethod("toString")), equalTo(SimpleKey.EMPTY));
assertThat(instance.getMouseScore(), equalTo(modelScore));
assertThat(instance.getSampleGenotypes(), equalTo(sampleGenotypes));
assertThat(AlleleConverter.mergeProperties(original, toMerge), equalTo(expected));
assertThat(sampleId, equalTo(SampleIdentifier.of("David", 0)));
assertThat(output, equalTo(expected));
assertThat(filterResult, equalTo(FAIL_RESULT));
assertThat(instance.equals(obj), is(false));
assertThat(instance.makeExomeWalkerPrioritiser(Collections.emptyList()), instanceOf(ExomeWalkerPriority.class));
assertThat(instance.getStart(), equalTo(1));
assertThat(instance.getChromosome(), equalTo(1));
assertThat(instance.getAssociatedDiseases(), equalTo(diseases));
assertThat(pathogenic.compareTo(nonPathogenic), equalTo(MORE_PATHOGENIC));
assertThat(instance.getEnd(), equalTo(END));
assertThat(instance.hasFrequencyOverPercentageValue(maxFreq - 0.01f), is(true)); assertThat(instance.hasFrequencyOverPercentageValue(maxFreq + 0.01f), is(false));
assertThat(instance.equals(other), is(false));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(M_CAP, 0.7f))));
assertThat(result, equalTo(ImmutableList.of(new VariantEffectCount(VariantEffect.MISSENSE_VARIANT, ImmutableList .of(1)))));
assertThat(InheritanceModeOptions.empty().getMaxFreq(), equalTo(Float.MAX_VALUE)); assertThat(InheritanceModeOptions.defaults().getMaxFreq(), equalTo(2.0f)); assertThat(userDefined.getMaxFreq(), equalTo(1f));
assertThat(instance.contributesToGeneScore(), is(false));
assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats)));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(jannovarData, instanceOf(JannovarData.class) );
assertThat(first.equals(other), is(true));
assertThat(instance.equals(obj), is(false));
assertThat(noMatchesInstance.getMaxMatchScore(), equalTo(0d));
assertThat(instance.equals(other), is(false));
assertThat(instance.equals(other), is(false));
assertThat(VariantEffectUtility.isRegulatoryNonCodingVariant(VariantEffect.NON_CODING_TRANSCRIPT_EXON_VARIANT), is(false)); assertThat(VariantEffectUtility.isRegulatoryNonCodingVariant(VariantEffect.FIVE_PRIME_UTR_EXON_VARIANT), is(true));
assertThat(variantAnnotations.getChr(), equalTo(10)); assertThat(variantAnnotations.getPos(), equalTo(pos - 1)); assertThat(variantAnnotations.getRef(), equalTo(ref)); assertThat(variantAnnotations.getAlt(), equalTo(alt));
assertThat(ChromosomeParser.parseChr("4_GL000008v2_alt"), equalTo((byte) 0));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(header.getGenotypeSamples(), equalTo(ImmutableList.of("sample")));
assertThat(instance.toString().isEmpty(), is(false));
assertThat(result, equalTo(expected));
assertThat(instance.getId(), equalTo(ID));
assertThat(instance.getFilterType(), equalTo(FilterType.FREQUENCY_FILTER));
assertThat(EMPTY_DATA.getPredictedScore(PathogenicitySource.POLYPHEN), is(nullValue()));
assertThat(AlleleProtoAdaptor.toFrequencyData(alleleProperties), equalTo(FrequencyData.of( Frequency.of(FrequencySource.THOUSAND_GENOMES, 0.7f), Frequency.of(FrequencySource.TOPMED, 0.05f)) ) );
assertThat(knownGeneIds, equalTo(expected));
assertThat(report.getPassed(), equalTo(1)); assertThat(report.getFailed(), equalTo(1));
assertThat(instance.equals(string), is(false)); assertThat(string.equals(instance), is(false));
assertThat(results.size(), equalTo(genes.size()));
assertThat(instance.getFilterType(), equalTo(FilterType.INTERVAL_FILTER));
assertThat(result, equalTo(expected));
assertThat(instance.getSource(), equalTo(PathogenicitySource.SIFT));
assertThat(instance.passed(), equalTo(true));
assertThat(result, equalTo(FrequencyData.empty()));
assertThat(instance.getGeneticInterval(), nullValue());
assertThat(vcf, equalTo(expected));
assertThat(InheritanceModeOptions.empty().isEmpty(), equalTo(true)); assertThat(InheritanceModeOptions.defaults().isEmpty(), equalTo(false));
assertThat(VariantAnnotation.empty() .toString(), equalTo("VariantAnnotation{genomeAssembly=hg19, chromosome=0, chromosomeName=\'\', position=0, ref=\'\', alt=\'\', geneSymbol=\'\', geneId=\'\', variantEffect=SEQUENCE_VARIANT, annotations=[]}"));
assertThat(result.passed(), is(true));
assertThat(instance.equals(obj), is(false));
assertThat(variants.size(), equalTo(3));
assertThat(buildAndGetSteps(), equalTo(singletonList(new KnownVariantFilter())));
assertThat(instance.isCandidateGeneMatch(), is(matchesCandidateGene));
assertThat(AlleleConverter.toAlleleKey(ALLELE), equalTo(ALLELE_KEY));
assertThat(instance.getFrequencyData(variant(23, 12345, "A", "T")), equalTo(localFrequencyData(23.0f)));
assertThat(result, equalTo(expResult));
assertThat(instance.getPhenotypeIds(), equalTo(modelPhenotypeIds));
assertThat(ChromosomeParser.parseChr("Unk_GL000008v2"), equalTo((byte) 0));
assertThat(instance.getOrDefault(GenomeAssembly.HG38, HG19_SERVICE), equalTo(HG19_SERVICE));
assertThat(FREQUENCY_DATA.getFrequencyForSource(ESP_AFRICAN_AMERICAN), equalTo(ESP_AA_PASS));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.getGenomeAssemblyDataPath(), equalTo(Paths.get("src/test/resources/user-defined").toAbsolutePath()));
assertThat(instance.hashCode(), equalTo(instance.hashCode()));
assertThat(result, equalTo(expResult));
assertThat(instance.getFeatureType(), equalTo(RegulatoryFeature.FeatureType.ENHANCER));
assertThat(results, equalTo(expected));
assertThat(variant, isAssignedTo(gene1));
assertThat(results.size(), equalTo(genes.size()));
assertThat(analysis.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.of(options)));
assertThat(output, equalTo(expected));
assertThat(jannovarDataFactory, instanceOf(JannovarDataFactory.class));
assertThat(instance.equals(otherInstance), is(true));
assertThat(buildAndGetSteps(), equalTo(singletonList(new FrequencyFilter(cutOff))));
assertThat(score, equalTo(0d));
assertThat(instance.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.defaults()));
assertThat(result, equalTo(FREQ_DATA));
assertThat(genotype.getType(), equalTo(GenotypeType.HET)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(instance.getHpoTerms(), equalTo(hpoTerms));
assertThat(result, equalTo(expected));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(TranscriptAnnotation.empty(), equalTo(TranscriptAnnotation.builder().build()));
assertThat(buildAndGetSteps(), equalTo(singletonList(new RegulatoryFeatureFilter())));
assertThat(FREQUENCY_DATA.getFrequencyForSource(ESP_EUROPEAN_AMERICAN), equalTo(ESP_EA_PASS));
assertThat(instance.getBestAvgScore(), equalTo(expected));
assertThat(instance.getScore(), equalTo(score));
assertThat(instance, equalTo(GeneMatch.NO_HIT));
assertThat(DEFAULT_ANALYSIS.getAnalysisMode(), equalTo(AnalysisMode.PASS_ONLY));
assertThat(instance.getId(), equalTo(id));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(result, equalTo(VALID_PEDIGREE));
assertThat(result, equalTo(expResult));
assertThat(variant, isAssignedTo(gene2));
assertThat(adScore, equalTo(PHENOTYPE_SCORE)); assertThat(arScore, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(instance.getFilters(), equalTo(filters));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(Contig.parseId(String.valueOf(i)), equalTo(i)); assertThat(Contig.parseId("chr" + i), equalTo(i)); assertThat(Contig.parseId("1"), equalTo(1)); assertThat(Contig.parseId("chr1"), equalTo(1)); assertThat(Contig.parseId("22"), equalTo(22)); assertThat(Contig.parseId("chr22"), equalTo(22));
assertThat(result, equalTo(expected));
assertThat(instance.keepOffTargetVariants(), equalTo(keepOffTargetVariants));
assertThat(result, equalTo(VariantEffectPathogenicityScore.STARTLOSS_SCORE));
assertThat(instance.getPhenotypeTermForHpoId("invalidId"), equalTo(null));
assertThat(instance.getPathogenicityData(missenseVariant), equalTo(PathogenicityData.empty()));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getFilterType(), equalTo(FilterType.KNOWN_VARIANT_FILTER));
assertThat(variants.size(), equalTo(3));
assertThat(ResultsWriterUtils.makeOutputFilename(vcfPath, settings.getOutputPrefix(), outFormat, ModeOfInheritance.AUTOSOMAL_DOMINANT), equalTo("user/subdir/geno/vcf/F0000009/F0000009_AD.genes.tsv"));
assertThat(instance.getPriorityType(), equalTo(PriorityType.NONE));
assertThat(FREQUENCY_DATA.hasKnownFrequency(), is(true));
assertThat(alleleResource.getAlleleParser(), instanceOf(EspHg38AlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getFilterStatus(), equalTo(FilterStatus.UNFILTERED));
assertThat(instance.getRowIndexForGene(9999), nullValue());
assertThat(result, equalTo(ImmutableList.of(new VariantEffectCount(VariantEffect.MISSENSE_VARIANT, ImmutableList .of(0,0)))));
assertThat(instance.containsGene(0000), is(true));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.equals(null), is(false));
assertThat(variants.size(), equalTo(11));
assertThat(knownGenes, equalTo(expected));
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.EXAC_EXOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(Pedigree.empty().isEmpty(), is(true)); assertThat(Pedigree.justProband("Nemo").isEmpty(), is(false));
assertThat(variants.size(), equalTo(1)); assertThat(variantEvaluation.getVariantEffect(), equalTo(VariantEffect.STRUCTURAL_VARIANT));
assertThat(outputSettings.outputContributingVariantsOnly(), is(true));
assertThat(instance.toString(), equalTo(expected));
assertThat(reports, equalTo(emptyFilterReportList));
assertThat(variant.getPathogenicityData(), equalTo(EMPTY_PATH_DATA)); assertThat(variant.getPathogenicityData(), equalTo(EXPECTED_PATH_DATA));
assertThat(analysis.getGenomeAssembly(), equalTo(GenomeAssembly.defaultBuild()));
assertThat(lineCount, equalTo(0L));
assertThat(alleleMapBuilder.getKeyType(), equalTo(AlleleKeyDataType.INSTANCE)); assertThat(alleleMapBuilder.getValueType(), equalTo(AllelePropertiesDataType.INSTANCE));
assertThat(EMPTY_DATA.getScore(), equalTo(1f));
assertThat(result, notNullValue());
assertThat(regions.collect(toList()), contains(expectedIntervals.toArray()));
assertThat(results, equalTo(expected));
assertThat(instance.getFrequencySources(), equalTo(sources));
assertThat(instance.equals(other), is(false));
assertThat(isSnv("A", "T"), is(true)); assertThat(isSnv("AA", "GT"), is(false)); assertThat(isSnv("ATT", "A"), is(false)); assertThat(isSnv("T", "TTA"), is(false));
assertThat(instance.equals(other), is(true));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(outputPath.toFile().exists(), is(true)); assertThat(outputPath.toFile().delete(), is(true));
assertThat(GeneScore.empty(), equalTo(GeneScore.builder().build()));
assertThat(recessiveFilter.equals(dominantFilter), is(false));
assertThat(instance.generate(new Object(), Object.class.getMethod("toString"), variant), equalTo(expected));
assertThat(instance.getIndividuals().isEmpty(), is(true));
assertThat(analysis, equalTo(expected));
assertThat(instance.toString(), equalTo("GeneSymbolFilter{genesToKeep=[ABC1]}"));
assertThat(outputSettings.getNumberOfGenesToShow(), equalTo(1));
assertThat(instance.toString(), equalTo("chr2:123-456"));
assertThat(instance.getVariantEffect(), equalTo(VariantEffect.MISSENSE_VARIANT));
assertThat(ChromosomeParser.parseChr("1"), equalTo((byte) 1)); assertThat(ChromosomeParser.parseChr("22"), equalTo((byte) 22));
assertThat(instance.getGenomeAssemblyDataPath(), equalTo(Paths.get("src/test/resources/data/1710_hg19").toAbsolutePath()));
assertThat(instance.getFilterType(), equalTo(FilterType.REGULATORY_FEATURE_FILTER));
assertThat(results, equalTo(expected));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(instance.equals(other), is(false));
assertThat(sift.compareTo(equalScoreSift), equalTo(EQUALS));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.hashCode(), equalTo(otherFilter.hashCode()));
assertThat(instance.equals(other), is(false));
assertThat(instance.getKnownFrequencies(), equalTo(expResult));
assertThat(instance.hasServiceFor(GenomeAssembly.HG19), is(true)); assertThat(instance.hasServiceFor(GenomeAssembly.HG38), is(true));
assertThat(instance.equals(otherFilter), is(false));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(variant, isAssignedTo(gene1));
assertThat(instance.getStart(), equalTo(START));
assertThat(output, equalTo(expected));
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_EXOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.equals(other), is(false));
assertThat(result, equalTo(PathogenicityData.of(PATH_CLINVAR_DATA)));
assertThat(instance.getFilterType(), equalTo(FilterType.INHERITANCE_FILTER));
assertThat(output, equalTo(EXPECTED_HEADER));
assertThat(alleleResource.getAlleleParser(), instanceOf(TopMedAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(zero.getStatus(), equalTo(Status.UNKNOWN)); assertThat(minusNine.getStatus(), equalTo(Status.UNKNOWN));
assertThat(analysis.getGenomeAssembly(), equalTo(GenomeAssembly.HG19));
assertThat(instance.getModeOfInheritance(), equalTo(modeOfInheritance));
assertThat(instance.getVariantScore(), equalTo(0f));
assertThat(passAllFrameShift.contributesToGeneScore(), is(false)); assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.equals(other), is(false));
assertThat(instance.containsGene(9999), is(false));
assertThat(proband.getType(), equalTo(GenotypeType.HET)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false)); assertThat(variant.getCompatibleInheritanceModes(), hasItem(ModeOfInheritance.AUTOSOMAL_DOMINANT));
assertThat(instance.getGeneScores(), equalTo(expected));
assertThat(analysisBuilder.build().getInheritanceModeOptions(), equalTo(InheritanceModeOptions.empty()));
assertThat(ChromosomeParser.parseChr(""), equalTo((byte) 0));
assertThat(instance.getId(), equalTo(""));
assertThat(instance.getEntrezGeneId(), equalTo(entrezGeneId));
assertThat(instance, equalTo(otherFilter));
assertThat(instance.getSimJ(), equalTo(simJ));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getAnalysisSteps(), hasItem(variantFilter));
assertThat(buildAndGetSteps(), equalTo(singletonList(new FrequencyFilter(cutOff))));
assertThat(analysisBuilder.build().getProbandSampleName(), equalTo(sampleName));
assertThat(instance.overQualityThreshold(UNDER_THRESHOLD), is(false));
assertThat(filterResult.wasRun(), is(false));
assertThat(outputSettings.getOutputPrefix(), equalTo("results/Pfeiffer-hiphive"));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getClosestPhenoMatchInNetwork(1), equalTo(GeneMatch.NO_HIT));
assertThat(sift.compareTo(poly), equalTo(MORE_PATHOGENIC));
assertThat(score, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(REMM, 0.7f))));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance, equalTo(instance));
assertThat(result, instanceOf(VcfResultsWriter.class));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(mvStore, instanceOf(MVStore.class));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(PRIMATE_AI, 0.7f))));
assertThat(analysisResults.getGenes().size(), equalTo(2));
assertThat(tabixDataSource.getSource(), equalTo(remmTabixFilePath.toAbsolutePath().toString()));
assertThat(result, equalTo(expResult));
assertThat(ResultsWriterUtils.getMaxPassedGenes(getGenes(), 100), equalTo(allPassedGenes));
assertThat(result, equalTo(expected));
assertThat(instance.getFilterType(), equalTo(FilterType.VARIANT_EFFECT_FILTER));
assertThat(instance.removeFailedVariants(), equalTo(expected));
assertThat(converted.getNMembers(), equalTo(original.size()));
assertTrue(output.contains("Exomiser Analysis Results for")); assertTrue(output.contains("FGFR2")); assertTrue(output.contains("SHH"));
assertThat(anotherPathogenic.equals(sift), is(true));
assertThat(result, equalTo(ImmutableList.of(new VariantEffectCount(VariantEffect.MISSENSE_VARIANT, ImmutableList .of(2, 1, 1)))));
assertThat(result, equalTo(FrequencyData.of(RsId.of(234567), Frequency.of(FrequencySource.ESP_AFRICAN_AMERICAN, 1f), Frequency .of(FrequencySource.LOCAL, 2f))));
assertThat(instance.getGeneSymbols(), equalTo(genesToKeep));
assertThat(RS_ID_ONLY_DATA.hasDbSnpRsID(), is(true));
assertThat(instance.getScore(), equalTo(score));
assertThat(result, equalTo(expectedNcdsData));
assertThat(variants.size(), equalTo(1)); assertThat(variant.getSampleGenotypes(), equalTo(ImmutableMap.of("Sample", SampleGenotype.of(AlleleCall.ALT, AlleleCall.ALT))));
assertThat(result, equalTo(report));
assertThat(result, equalTo(expected));
assertThat(instance.getVariantEffect(), equalTo(VariantEffect.REGULATORY_REGION_VARIANT));
assertThat(variants.size(), equalTo(11));
assertThat(instance, not(equalTo(other)));
assertThat(analysisRunner, instanceOf(PassOnlyAnalysisRunner.class));
assertThat(instance.getMaxFreq(), equalTo(FREQ_THRESHOLD));
assertThat(output, equalTo(expected));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(instance.getQueryTerms(), equalTo(Arrays.asList(bigNose, bigToe)));
assertThat(instance.getPedigree(), equalTo(pedigree));
assertThat(EMPTY_DATA.isRepresentedInDatabase(), is(false));
assertThat(score, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(ResultsWriterUtils.getMaxPassedGenes(getGenes(), 1), equalTo(onePassed));
assertThat(outString, equalTo(expected));
assertThat(instance.getVariantEffect(), equalTo(VariantEffect.SEQUENCE_VARIANT));
assertThat(reports.size(), equalTo(analysis.getAnalysisSteps().size()));
assertThat(alleleResource.getAlleleParser(), instanceOf(DbSnpAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.toString(), equalTo(String.format(Locale.UK, "Frequency{UNKNOWN=%s}", frequency)));
assertThat(results, equalTo(expected));
assertThat(instance.passed(), is(true));
assertThat(result, equalTo(expResult));
assertThat(instance.variantIsWhiteListed(variant), is(false));
assertThat(buildAndGetSteps(), equalTo(singletonList(new PriorityScoreFilter(priorityType, minPriorityScore))));
assertThat(result, equalTo(report));
assertThat(result, equalTo(expected));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(POLYPHEN, 0.7f))));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(result, equalTo(expResult));
assertThat(result, equalTo(report));
assertThat(instance.equals(other), is(true));
assertThat(instance.makePhivePrioritiser(), instanceOf(PhivePriority.class));
assertThat(EMPTY_DATA.getKnownFrequencies(), equalTo(Collections.emptyList()));
assertThat(outputPath.toFile().exists(), is(true)); assertThat(outputPath.toFile().delete(), is(true));
assertThat(result, equalTo(expResult));
assertThat(VariantAnnotation.empty(), equalTo(instance));
assertThat(proband.getType(), equalTo(GenotypeType.HOM_VAR)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(true)); assertThat(variant.getCompatibleInheritanceModes(), hasItem(ModeOfInheritance.AUTOSOMAL_RECESSIVE));
assertThat(instance.writeString(ModeOfInheritance.ANY, analysis, analysisResults, settings), equalTo(EXPECTED_HEADER));
assertThat(variant, isAssignedTo(gene1)); assertThat(variant.getTranscriptAnnotations(), equalTo(Collections.singletonList(gene1Annotation)));
assertTrue(instance.addResource(resource));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getColumnMatrixForGene(3333), equalTo(geneColumn));
assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats)));
assertThat(instance.hashCode(), equalTo(qualityFilter.hashCode()));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(variants.isEmpty(), is(true));
assertThat(instance.getKnownGeneIdentifiers(), equalTo(geneIdentifiers));
assertThat(outString, equalTo(expected));
assertThat(score, equalTo(0.0));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.empty()));
assertThat(instance.getId(), equalTo(id));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(REVEL, 0.2f))));
assertThat(expected, lessThan(VariantEffectPathogenicityScore.DEFAULT_MISSENSE_SCORE)); assertThat(instance.getPathogenicityScore(), equalTo(expected));
assertThat(sampleId, equalTo(SampleIdentifier.of("David", 1)));
assertThat(instance.getSource(), equalTo("No source"));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getAltAlleleId(), equalTo(altAlleleId));
assertThat(mvStore.getMapNames(), equalTo(Sets.newHashSet("alleles"))); assertThat(instance.count(), equalTo(0L));
assertThat(instance.hashCode(), equalTo(expected));
assertThat(instance.equals(other), is(false));
assertThat(instance.getAltAlleleId(), equalTo(0));
assertThat(output, equalTo(expected));
assertThat(numVariants, equalTo(3L));
assertThat(instance.getIc(), equalTo(ic));
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_GENOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.getIdentifiers(), equalTo(ImmutableSet.of(PROBAND.getId(), MOTHER.getId(), FATHER.getId())));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(MUTATION_TASTER, 0.7f))));
assertThat(instance, equalTo(identicalMatrix));
assertThat(analysisBuilder.build().getPathogenicitySources(), equalTo(Collections.<PathogenicitySource>emptySet()));
assertThat(result, equalTo(FrequencyData.of(RsId.of(1234567))));
assertThat(instance.getGeneIdentifier(), equalTo(GENE1_GENE_IDENTIFIER));
assertThat(passAllFrameshift.contributesToGeneScore(), is(true)); assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(adScore, equalTo(0.5 * PHENOTYPE_SCORE)); assertThat(arScore, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getModelGeneSymbol(), equalTo(modelGeneSymbol));
assertThat(PhenotypeTerm.of("id", "label"), equalTo(PhenotypeTerm.of("id", "label"))); assertThat(PhenotypeTerm.of("id", "label").isPresent(), is(true)); assertThat(PhenotypeTerm.of("id", "label").notPresent(), is(false)); assertThat(PhenotypeTerm.of("otherId", "otherLabel"), not(equalTo(PhenotypeTerm.of("id", "label"))));
assertThat(result, equalTo(expected));
assertFalse(output.isEmpty());
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(score, equalTo(0.5 * PHENOTYPE_SCORE));
assertThat(alleleResource.getAlleleParser(), instanceOf(DbSnpAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(results, equalTo(expected));
assertThat(result, equalTo(localFrequencyData));
assertThat(instance.passed(), is(false));
assertThat(instance.getModeOfInheritance(), equalTo(ModeOfInheritance.AUTOSOMAL_DOMINANT));
assertThat(buildAndGetSteps(), equalTo(singletonList(new QualityFilter(cutoff))));
assertThat(DEFAULT_ANALYSIS.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.empty()));
assertThat(instance.getFailedFilterTypes(), equalTo(expectedFilters));
assertThat(result, equalTo(variantEvaluations));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getFilterType(), equalTo(FilterType.PATHOGENICITY_FILTER));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(instance.getPathogenicityScore(), equalTo(SIFT_PASS.getScore()));
assertThat(instance.getPpiScore(), equalTo(ppiScore));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(result.passed(), is(true));
assertThat(arOutputPath.toFile().exists(), is(true)); assertThat(arOutputPath.toFile().delete(), is(true)); assertThat(adOutputPath.toFile().exists(), is(true)); assertThat(adOutputPath.toFile().delete(), is(true));
assertThat(instance.getFrequencyData(), equalTo(frequencyData));
assertThat(variantEvaluation.getFailedFilterTypes(), equalTo(expectedFilters));
assertThat(instance.getHpoMatchesForHpoTerm(cleftHelix), equalTo(Collections.emptySet()));
assertThat(results.size(), equalTo(genes.size()));
assertThat(isInsertion("A", "T"), is(false)); assertThat(isInsertion("AA", "GT"), is(false)); assertThat(isInsertion("ATT", "A"), is(false)); assertThat(isInsertion("T", "TTA"), is(true));
assertThat(result, equalTo(expResult));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(result, equalTo(expResult));
assertThat(instance.getEntrezIdToRowIndex(), equalTo(entrezIdToRowIndex));
assertThat(alleleResource.getAlleleParser(), instanceOf(DbNsfpAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.getIndividuals(), equalTo(ImmutableSet.of(PROBAND, MOTHER, FATHER)));
assertThat(instance.hasMessages(), is(true));
assertThat(instance.equals(other), is(false));
assertThat(Contig.parseId("."), equalTo(0)); assertThat(Contig.parseId("wibble"), equalTo(0));
assertThat(instance.isYChromosomal(), is(false));
assertThat(instance.equals(other), is(false));
assertThat(instance.getFrequencyData(variant(1, 12345, "A", "T")), equalTo(localFrequencyData(23.0f)));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(analysisBuilder, instanceOf(AnalysisBuilder.class));
assertThat(variantAnnotation.getChromosome(), equalTo(23)); assertThat(variantAnnotation.getPosition(), equalTo(trimmed.getPos())); assertThat(variantAnnotation.getRef(), equalTo(trimmed.getRef())); assertThat(variantAnnotation.getAlt(), equalTo(trimmed.getAlt())); assertThat(variantAnnotation.hasTranscriptAnnotations(), is(false));
assertThat(instance.getQueryPhenotypeId(), equalTo(queryPhenotype.getId()));
assertThat(sampleId, equalTo(SampleIdentifier.of("David", 0)));
assertThat(instance.hashCode(), equalTo(other.hashCode()));
assertThat(instance.getQueryPhenotype(), equalTo(queryPhenotype));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getQueryTermIds(), equalTo(queryTermIds));
assertThat(instance.getPathogenicitySources(), equalTo(sources));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.getOrganism(), equalTo(Organism.HUMAN));
assertThat(result, equalTo(ImmutableList.of(new VariantEffectCount(VariantEffect.MISSENSE_VARIANT, ImmutableList .of(1, 0, 1)))));
assertThat(filterResult.wasRun(), is(false));
assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(false));
assertThat(passAllFrameshift.contributesToGeneScore(), is(true)); assertThat(passAllFrameshift.contributesToGeneScoreUnderMode(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(true)); assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.containsPosition(variant), is(false));
assertThat(instance.getFilterType(), equalTo(FilterType.ENTREZ_GENE_ID_FILTER));
assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_EXOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.getGeneId(), equalTo("ENSG:12233455"));
assertThat(instance.getChromosome(), equalTo(CHR));
assertThat(instance.hashCode(), equalTo(instance.hashCode()));
assertThat(instance.getGeneSymbol(), equalTo("GENE1"));
assertEquals(expResult, result);
assertThat(instance.getPriorityType(), equalTo(PriorityType.HIPHIVE_PRIORITY));
assertThat(score, equalTo(PHENOTYPE_SCORE));
assertThat(instance.getGeneScores().isEmpty(), is(true)); assertThat(instance.getGeneScoreForMode(modeOfInheritanceAD), equalTo(geneScoreAD)); assertThat(instance.getGeneScores(), equalTo(ImmutableList.of(geneScoreAD))); assertThat(instance.getGeneScores(), equalTo(ImmutableList.of(geneScoreAD, geneScoreAR)));
assertThat(instance.getScore(), equalTo(0f)); assertThat(instance.getRawScore(), equalTo(0f));
assertThat(matches.isEmpty(), is(false)); assertThat(matches, equalTo(phenotypeMatches));
assertThat(instance.getVariantType(), equalTo(effect));
assertThat(instance.getAnalysisBuilder(), notNullValue());
assertThat(instance.getPathogenicityScore(), equalTo(SIFT_PASS.getScore()));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.getZpoTerms(), equalTo(zpoTerms));
assertEquals(expResult, result);
assertThat(results, equalTo(Collections.emptyMap()));
assertThat(instance.equals(otherFilter), is(false));
assertThat(instance.getPathogenicityData(), equalTo(pathData));
assertThat(EMPTY_GENE_IDENTIFIER.getUcscId(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getUcscId(), equalTo("ucscId"));
assertThat(instance.equals(obj), is(true));
assertThat(readPedigree, equalTo(TestPedigrees.trioChildAffected()));
assertThat(instance.getContributingVariants(), equalTo(contributingVariants));
assertThat(instance.containsId("Nemo"), is(true)); assertThat(instance.containsId("Someone"), is(false));
assertThat(closestPhenoMatchInNetwork.getQueryGeneId(), equalTo(queryGeneId)); assertThat(closestPhenoMatchInNetwork.getMatchGeneId(), equalTo(model3.getEntrezGeneId())); assertThat(closestPhenoMatchInNetwork.getScore(), closeTo(0.563d, 0.001)); assertThat(closestPhenoMatchInNetwork.getBestMatchModels(), equalTo(ImmutableList.of(model3)));
assertThat(offHeapMapMatrix.getEntrezIdToRowIndex(), equalTo(fromFile.getEntrezIdToRowIndex()));
assertThat(instance.getAnalysisSteps(), equalTo(steps));
assertThat(analysis.getPedigree(), equalTo(Pedigree.empty()));
assertThat(sift.equals(poly), is(false));
assertThat(EMPTY_GENE_IDENTIFIER.getHgncId(), equalTo(GeneIdentifier.EMPTY_FIELD)); assertThat(instance.getHgncId(), equalTo("hgnc"));
assertThat(alleleResource.getAlleleParser(), instanceOf(Uk10kAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(actual, equalTo(expected));
assertThat(instance.toString(), equalTo("rs234567364"));
assertThat(poly.compareTo(sift), equalTo(EQUALS));
assertThat(instance.equals(null), is(false));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(outString, equalTo(expected));
assertThat(readPaths("src/test/resources/testBatchFiles.txt").size(), equalTo(3));
assertThat(instance.getDiseaseDataAssociatedWithGeneId(3333), equalTo(expected));
assertThat(instance.get(defaultAssembly), equalTo(HG19_SERVICE));
assertThat(analysis.getAnalysisMode(), equalTo(AnalysisMode.PASS_ONLY));
assertThat(result, equalTo(expected));
assertThat(instance.makeOmimPrioritiser(), instanceOf(OmimPriority.class));
assertThat(instance.hashCode(), equalTo(otherFilter.hashCode()));
assertThat(instance.makeHiPhivePrioritiser(hiPhiveOptions), instanceOf(HiPhivePriority.class));
assertThat(instance.getPosition(), equalTo(POSITION));
assertThat(instance.getIndividualById(MOTHER.getId()), equalTo(MOTHER));
assertThat(instance.getLabel(), equalTo(label));
assertThat(result, instanceOf(TsvVariantResultsWriter.class));
assertThat(instance.getGenomeAssembly(), equalTo(GENOME_ASSEMBLY));
assertThat(anyOutputPath.toFile().exists(), is(true)); assertThat(anyOutputPath.toFile().delete(), is(true)); assertThat(arOutputPath.toFile().exists(), is(true)); assertThat(arOutputPath.toFile().delete(), is(true)); assertThat(adOutputPath.toFile().exists(), is(true)); assertThat(adOutputPath.toFile().delete(), is(true));
assertFalse(lines.isEmpty()); assertTrue(testOutFile.toFile().exists()); assertTrue(testOutFile.toFile().delete());
assertThat(sift.compareTo(poly), equalTo(LESS_PATHOGENIC));
assertThat(numVariants, equalTo(3L));
assertThat(alleleResource.getAlleleParser(), instanceOf(EspHg19AlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(EMPTY_DATA.isEmpty(), is(true));
assertThat(output, equalTo(expected));
assertThat(instance.getAlt(), equalTo(ALT));
assertThat(instance.contains(whiteListedVariant), is(true)); assertThat(emptyInstance.contains(whiteListedVariant), is(false));
assertThat(instance.getFrequencyData(variant(24, 12345, "A", "T")), equalTo(localFrequencyData(23.0f)));
assertThat(instance.getType(), equalTo(type));
assertThat(instance.getStatus(), equalTo("Status for: test Download: UNTRIED, Extract: UNTRIED, Parse: UNTRIED"));
assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(CADD, 0.7f))));
assertThat(passAllFrameshift.contributesToGeneScore(), is(true)); assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.equals(other), is(false));
assertThat(proband.getType(), equalTo(GenotypeType.HOM_VAR)); assertThat(gene.isCompatibleWith(ModeOfInheritance.ANY), is(true)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_DOMINANT), is(false)); assertThat(gene.isCompatibleWith(ModeOfInheritance.AUTOSOMAL_RECESSIVE), is(true)); assertThat(variant.getCompatibleInheritanceModes(), hasItem(ModeOfInheritance.AUTOSOMAL_RECESSIVE));
assertThat(instance.getInheritanceModeOptions(), equalTo(InheritanceModeOptions.of(inheritanceMap)));
assertThat(instance.getVersionAssemblyPrefix(), equalTo("1710_hg19"));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(instance.equals(obj), is(false));
assertThat(result, equalTo(PATH_DATA));
assertThat(instance.equals("1335464574"), is(false));
assertThat(instance.getInheritanceModeOptions(), equalTo(inheritanceModeOptions));
assertThat(analysis.getPedigree(), equalTo(TestPedigrees.trioChildAffected()));
assertThat(instance, not(equalTo(other)));
assertThat(instance.getPhenotypeEvidence(), equalTo(phenotypeEvidence));
assertThat(instance.getQueryPhenotypeTermIds(), equalTo(expectedqueryTermIds));
assertThat(variants, equalTo(expected));
assertThat(instance.getMaxMatchScore(), equalTo(4d));
assertThat(results.isEmpty(), is(false));
assertThat(outString, equalTo(HEADER + FGFR2_GENE_STRING + RBM8A_GENE_STRING));
assertThat(alleleResource.getAlleleParser(), instanceOf(Uk10kAlleleParser.class)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive));
assertThat(instance.check(analysisSteps), equalTo(expectedSteps));
assertThat(instance.equals(other), is(true));
assertThat(nonPathogenic.compareTo(pathogenic), equalTo(LESS_PATHOGENIC));
assertThat(instance, equalTo(other));
assertThat(instance.getGeneSymbol(), equalTo(GENE1_GENE_SYMBOL));
assertThat(instance.isXChromosomal(), is(false));
assertThat(result, equalTo(PathogenicityData.of(PATH_CLINVAR_DATA, CADD_DATA.getPredictedScore(PathogenicitySource.CADD))));
assertThat(instance.getVariantScore(), equalTo(1f));
assertFalse(mpId2termMap.isEmpty()); assertTrue(mpPath.toFile().exists()); assertFalse(lines.isEmpty());
assertThat(result, equalTo(expectedNcdsData));
assertThat(geneScores, equalTo(ImmutableList.of(expected)));
assertThat(instance.equals(null), is(false));
assertThat(instance.getGeneIdentifier(), equalTo(testIdentifier));
assertThat(instance.equals(instance), is(true));
assertThat(instance.getHumanScore(), equalTo(0d));
assertThat(analysis.getAnalysisSteps(), equalTo(analysisSteps));
assertThat(instance.getTaxon(), equalTo(taxon));
assertThat(result, equalTo(PathogenicityData.empty()));
assertThat(mutationTasterScore.equals(siftScore), is(false));
assertThat(RsIdParser.parseRsId(""), equalTo(""));
assertFalse(iso.isIsogram("accentor"));
assertEquals("Plang", raindropConverter.convert(25));
assertEquals("Pling", raindropConverter.convert(9));
assertFalse(iso.isIsogram("zzyzx"));
assertEquals("Hello, World!", new Greeter().getGreeting());
assertEquals("PlingPlong", raindropConverter.convert(21));
assertEquals("52", raindropConverter.convert(52));
assertEquals("1", raindropConverter.convert(1));
assertFalse(iso.isIsogram("angola"));
assertTrue(iso.isIsogram(""));
assertEquals("PlingPlang", raindropConverter.convert(15));
assertEquals("Plang", raindropConverter.convert(3125));
assertTrue(iso.isIsogram("subdermatoglyphic"));
assertFalse(iso.isIsogram("Alphabet"));
assertEquals("Plong", raindropConverter.convert(14));
assertFalse(iso.isIsogram("eleven"));
assertTrue(iso.isIsogram("thumbscrew-japingly"));
assertEquals("Plang", raindropConverter.convert(10));
assertTrue(iso.isIsogram("isogram"));
assertEquals("PlangPlong", raindropConverter.convert(35));
assertEquals("Pling", raindropConverter.convert(27));
assertEquals(expected, twofer.twofer(input));
assertTrue(iso.isIsogram("Emily Jung Schwartzkopf"));
assertTrue(iso.isIsogram("six-year-old"));
assertEquals("Pling", raindropConverter.convert(6));
assertFalse(iso.isIsogram("alphAbet"));
assertEquals(expected, twofer.twofer(input));
assertEquals("Plong", raindropConverter.convert(49));
assertEquals("Plang", raindropConverter.convert(5));
assertEquals("8", raindropConverter.convert(8));
assertEquals("Plong", raindropConverter.convert(7));
assertEquals("Pling", raindropConverter.convert(3));
assertEquals(expected, twofer.twofer(input));
assertEquals("PlingPlangPlong", raindropConverter.convert(105));
assertEquals("reflect getVal invoke", 343, result.longValue());
assertEquals(0L,tempFile.length()); assertEquals(("" + currentTime).length(), tempFile.length()); assertTrue(responseStatus.get(errorCommands.get(0))); assertFalse(responseStatus.get(errorCommands.get(1)));
assertSame(string, innerObj.stringVal); assertEquals(string, innerObj.stringVal); assertSame(string, innerObj.protectedStringVal); assertSame(string, innerObj.getPrivateStringVal());
assertEquals(byteVal, innerObj.byteVal); assertEquals(byteVal, innerObj.byteVal); assertEquals(byteVal, innerObj.protectedByteVal); assertEquals(byteVal, innerObj.getPrivateByteVal());
assertEquals(1,partitioner.getNumberOfPartitions(partitioningContext)); assertEquals(7,partitioner.getNumberOfPartitions(partitioningContext));
assertEquals("ShardPos Size", 2, node.getShardManager().loadInitialShardPositions().size()); assertNotEquals("Record Seq No in Shard Id 1", "", e.getValue()); assertNotEquals("Record Seq No in Shard Id 2", "", e.getValue()); assertEquals("Tuple count", totalCount, collectedTuples.size());
assertEquals(intVal, innerObj.intVal); assertEquals(intVal, innerObj.intVal); assertEquals(intVal, innerObj.protectedIntVal); assertEquals(intVal, innerObj.getPrivateIntVal());
assertTrue((Boolean)expression.execute(testObj)); assertEquals("11llo5", expression.execute(testObj)); assertEquals(46162L, expression.execute(testObj)); assertEquals(true, expression.execute(testObj));
assertNotNull(resultOne); assertNull(resultTWo);
assertEquals(doubleVal, innerObj.doubleVal, 0); assertEquals(doubleVal, innerObj.doubleVal, 0); assertEquals(doubleVal, innerObj.protectedDoubleVal, 0); assertEquals(doubleVal, innerObj.getPrivateDoubleVal(), 0);
assertEquals(floatVal, innerObj.floatVal, 0); assertEquals(floatVal, innerObj.floatVal, 0); assertEquals(floatVal, innerObj.protectedFloatVal, 0); assertEquals(floatVal, innerObj.getPrivateFloatVal(), 0);
assertEquals(boolVal, innerObj.boolVal); assertEquals(!boolVal, innerObj.boolVal); assertEquals(boolVal, innerObj.protectedBoolVal); assertEquals(boolVal, innerObj.isPrivateBoolVal());
assertEquals(shortVal, innerObj.shortVal); assertEquals(shortVal, innerObj.shortVal); assertEquals(shortVal, innerObj.protectedShortVal); assertEquals(shortVal, innerObj.getPrivateShortVal());
assertSame(fqcn, innerObj.objVal); assertSame(innerObjClass, innerObj.objVal); assertSame(innerObjClass, innerObj.protectedObjVal); assertSame(innerObjClass, innerObj.getPrivateObjVal());
assertEquals(testPojo.getIntVal() + testPojo.intField, getterInt.get(testPojo));
assertEquals("hello hello", expression.execute(testObj));
assertEquals(KuduClientTestCommons.TOTAL_KUDU_TABLETS_FOR_UNITTEST_TABLE,allScanTokens.size());
assertFalse(from == to); assertEquals(from, to); assertFalse(from.transientProp.equals(to.transientProp));
assertFalse(te == from); assertEquals(from, te); assertFalse(from.transientProp.equals(te.transientProp));
assertEquals(charVal, innerObj.charVal); assertEquals(charVal, innerObj.charVal); assertEquals(charVal, innerObj.protectedCharVal); assertEquals(charVal, innerObj.getPrivateCharVal());
assertNotNull("Discovered Sinks", discovery.discover());
assertTrue((Boolean)expression.execute(testObj)); assertTrue((Boolean)expression.execute(testObj)); assertTrue((Boolean)expression.execute(testObj)); assertFalse((Boolean)expression.execute(testObj)); assertFalse((Boolean)expression.execute(testObj));
assertTrue((Boolean)expression.execute(testObj));
assertEquals(testObj.getIntVal(), createExpression(testObjClass, "intField", int.class).execute(testObj)); assertEquals(testObj.getIntVal(), createExpression(testObjClass, "intVal", int.class).execute(testObj));
assertThat(assignedPartitions.size(), is(12)); assertThat(eachOperatorassignment.size(), is(1));
assertEquals(longVal, innerObj.longVal); assertEquals(longVal, innerObj.longVal); assertEquals(longVal, innerObj.protectedLongVal); assertEquals(longVal, innerObj.getPrivateLongVal());
assertFalse(from == to); assertEquals(from, to); assertFalse(from.transientProp.equals(to.transientProp));
assertEquals(testStr, new String(recovered));
assertEquals("Serialization", prepareDAG, clonedDAG);
assertThat(methodSpec.toString(), is(expected));
assertThat(TypeEncoder.encodeNumeric(zero), is("0000000000000000000000000000000000000000000000000000000000000000")); assertThat(TypeEncoder.encodeNumeric(maxLong), is("0000000000000000000000000000000000000000000000007fffffffffffffff")); assertThat(TypeEncoder.encodeNumeric(maxValue), is("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")); assertThat(TypeEncoder.encodeNumeric(largeValue), is("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"));
assertThat(TypeEncoder.encodeArrayValues(array), is("0000000000000000000000000000000220000000000000000000000000000000" + "0000000000000000000000000000000880000000000000000000000000000000"));
assertThat(utf8Strings.get(0).getValue(), is(""));
assertThat(FunctionEncoder.encodeConstructor( Collections.singletonList(new Utf8String("Greetings!"))), is("0000000000000000000000000000000000000000000000000000000000000020" + "000000000000000000000000000000000000000000000000000000000000000a" + "4772656574696e67732100000000000000000000000000000000000000000000"));
assertThat(TypeDecoder.decodeAddress( "000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338"), is(new Address("0xbe5422d15f39373eb0a97ff8c10fbd0e40e29338")));
assertThat(FunctionEncoder.encode(function), is("0xcdcd77c0" + "0000000000000000000000000000000000000000000000000000000000000045" + "0000000000000000000000000000000000000000000000000000000000000001" ));
assertThat(getEventNativeType(TypeName.get(Utf8String.class)), equalTo(TypeName.get(byte[].class)));
assertThat(FunctionReturnDecoder.decodeIndexedValue( encoded, new TypeReference<Uint256>() {}), equalTo(value));
assertThat(utf8Strings.get(0).getValue(), is("one more time"));
assertThat(FunctionEncoder.encodeConstructor(Collections.emptyList()), is(""));
assertThat(TypeEncoder.encodeString(string), is("000000000000000000000000000000000000000000000000000000000000000d" + "48656c6c6f2c20776f726c642100000000000000000000000000000000000000"));
assertThat(TypeEncoder.encodeBool(new Bool(false)), is("0000000000000000000000000000000000000000000000000000000000000000")); assertThat(TypeEncoder.encodeBool(new Bool(true)), is("0000000000000000000000000000000000000000000000000000000000000001"));
assertThat(decoded, equalTo(expected));
assertThat(TypeDecoder.decode( "0000000000000000000000000000000000000000000000007fffffffffffffff" + "0000000000000000000000000000000000000000000000000000000000000000" + "0000000000000000000000000000000000000000000000007fffffffffffffff", 64, Bool.class), is(new Bool(false))); assertThat(TypeDecoder.decode( "0000000000000000000000000000000000000000000000007fffffffffffffff" + "0000000000000000000000000000000000000000000000000000000000000001" + "0000000000000000000000000000000000000000000000007fffffffffffffff", 64, Bool.class), is(new Bool(true)));
assertThat(FunctionReturnDecoder.decodeIndexedValue( rawInput, new TypeReference<Bytes32>(){}), equalTo(new Bytes32(rawInputBytes)));
assertThat(FunctionReturnDecoder.decode("0x", function.getOutputParameters()), is(Collections.emptyList()));
assertThat(methodSpec.toString(), is(expected));
assertThat(getNativeType( ParameterizedTypeName.get( ClassName.get(DynamicArray.class), TypeName.get(Address.class))), equalTo(ParameterizedTypeName.get( ClassName.get(List.class), TypeName.get(String.class))));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<DynamicBytes>() {}), equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertThat(TypeDecoder.decodeBytes( "0001020304050000000000000000000000000000000000000000000000000000", Bytes6.class), is(staticBytes)); assertThat(TypeDecoder.decodeBytes( "0000000000000000000000000000000000000000000000000000000000000000", Bytes1.class), is(empty)); assertThat(TypeDecoder.decodeBytes( "6461766500000000000000000000000000000000000000000000000000000000", Bytes4.class), is(dave));
assertThat(typeMap(new ArrayList<BigInteger>(), Uint256.class), equalTo(new ArrayList<Uint256>()));
assertThat(builder.build().toString(), is(expected));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<Utf8String>() {}), equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertThat(TypeDecoder.decodeBool( "0000000000000000000000000000000000000000000000000000000000000000", 0), is(new Bool(false))); assertThat(TypeDecoder.decodeBool( "0000000000000000000000000000000000000000000000000000000000000001", 0), is(new Bool(true)));
assertThat(AbiTypesGenerator.getPackageName(String.class), is("java.lang"));
assertThat(createValidParamName("param", 1), is("param")); assertThat(createValidParamName("", 1), is("param1"));
assertThat(getEventNativeType( ParameterizedTypeName.get( ClassName.get(DynamicArray.class), TypeName.get(Address.class))), equalTo(TypeName.get(byte[].class)));
assertThat(TypeEncoder.encodeBytes(staticBytes), is("0001020304050000000000000000000000000000000000000000000000000000")); assertThat(TypeEncoder.encodeBytes(empty), is("0000000000000000000000000000000000000000000000000000000000000000")); assertThat(TypeEncoder.encodeBytes(dave), is("6461766500000000000000000000000000000000000000000000000000000000"));
assertThat(AbiTypesGenerator.createPackageName(String.class), is("java.lang.generated"));
assertThat( FunctionEncoder.buildMethodSignature( "baz", Arrays.asList( new Uint32(BigInteger.valueOf(69)), new Bool(true)) ), is("baz(uint32,bool)"));
assertThat(methodSpec.toString(), is(expected));
assertThat(TypeDecoder.decodeUtf8String( "000000000000000000000000000000000000000000000000000000000000000d" + "48656c6c6f2c20776f726c642100000000000000000000000000000000000000", 0), is(new Utf8String("Hello, world!")));
assertThat(FunctionReturnDecoder.decode( "0x0000000000000000000000000000000000000000000000000000000000000037", function.getOutputParameters()), equalTo(Collections.singletonList(new Uint(BigInteger.valueOf(55)))));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<DynamicArray>() {}), equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertThat( TypeEncoder.encodeDynamicArray(array), is("0000000000000000000000000000000000000000000000000000000000000003" + "0000000000000000000000000000000000000000000000000000000000000001" + "0000000000000000000000000000000000000000000000000000000000000002" + "0000000000000000000000000000000000000000000000000000000000000003" ));
assertThat(FunctionEncoder.encodeConstructor( Arrays.asList(new Uint(BigInteger.ONE), new Uint(BigInteger.valueOf(0x20)))), is("0000000000000000000000000000000000000000000000000000000000000001" + "0000000000000000000000000000000000000000000000000000000000000020"));
assertThat(address.getTypeAsString(), is("address")); assertThat(TypeEncoder.encodeAddress(address), is("000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338"));
assertThat(FunctionEncoder.buildMethodId("baz(uint32,bool)"), is("0xcdcd77c0"));
assertThat(TypeEncoder.encodeNumeric(zero), is("0000000000000000000000000000000000000000000000000000000000000000")); assertThat(TypeEncoder.encodeNumeric(maxLong), is("0000000000000000000000000000000000000000000000007fffffffffffffff")); assertThat(TypeEncoder.encodeNumeric(minLong), is("ffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000")); assertThat(TypeEncoder.encodeNumeric(minusOne), is("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
assertThat(typeMap(input, Uint256.class), equalTo(Arrays.asList( new Uint256(BigInteger.ZERO), new Uint256(BigInteger.ONE), new Uint256(BigInteger.TEN))));
assertThat(TypeDecoder.decodeStaticArray( "0000000000000000000000000000000000000000000000000000000000000000", 0, new TypeReference.StaticArrayTypeReference<StaticArray<Uint256>>(0) {}, 0), is("invalid"));
assertThat(FunctionReturnDecoder.decode("0x", function.getOutputParameters()), is(Collections.emptyList()));
assertThat(typeMap(input, StaticArray2.class, Uint256.class), equalTo(expectedList));
assertThat(FunctionReturnDecoder.decode( "0x0000000000000000000000000000000000000000000000000000000000000037" + "0000000000000000000000000000000000000000000000000000000000000007", function.getOutputParameters()), equalTo(Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7)))));
assertThat(new Utf8String("").toString(), is("")); assertThat(new Utf8String("string").toString(), is("string"));
assertThat( FunctionEncoder.buildMethodSignature("empty", Collections.emptyList()), is("empty()"));
assertThat( TypeEncoder.encodeDynamicArray(array), is("0000000000000000000000000000000000000000000000000000000000000000") );
assertThat(FunctionReturnDecoder.decodeIndexedValue( rawInput, new TypeReference<Bytes16>(){}), equalTo(new Bytes16(rawInputBytes)));
assertThat(this.leaderInitiator.isAutoStartup()).isTrue();
assertThat(event.getValue()).isInstanceOf(List.class); assertThat(event.getValue()).isEqualTo(expectedPodsList);
assertThat(this.leaderController.getInfo()).isEqualTo(message);
assertThat(result_endpoints).hasSize(1);
assertThat(this.leader.getRole()).isEqualTo(ROLE);
assertThat(details).containsEntry("isLeader", false); assertThat(details).containsEntry("leaderId", "id"); assertThat(details).containsEntry("role", "testRole");
assertThat(this.leader.getId()).isEqualTo(ID);
assertThat(event.getValue()).isInstanceOf(List.class); assertThat(event.getValue()).isEqualTo(expectedPodsList);
assertThat(this.leadershipController.getLocalLeader().isPresent()).isFalse();
assertThat(result).isTrue();
assertThat(result).isFalse();
assertThat(services).containsOnly("s1", "s2");
assertThat(details).containsEntry("leaderId", "Unknown");
assertThat(responseEntity.getBody()).isEqualTo(message); assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
assertThat(services).containsOnly("s1", "s2", "s3");
assertThat(result).isFalse();
assertThat(this.leader.isCandidate(null)).isEqualTo(false);
assertThat(details).containsEntry("isLeader", true); assertThat(details).containsEntry("leaderId", "id"); assertThat(details).containsEntry("role", "testRole");
assertThat(actual).doesNotContain(SECRET_VALUE);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(bytes).containsExactly(0x01, 0x23);
assertThat(Base64Utils.encodeToString(headerSignature)) .isEqualTo("3q8QXTAGaey18yL8FWTqdVlbMr6hcuNvM4tefa0o9nA=");
assertThat(target.serialize(LocalDate.of(2017, 9, 8))) .isEqualTo("2017-09-08");
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(bytes).isNotNull().isEmpty();
assertThat(messageRead) .isEqualTo(TEXT_MESSAGE_EXPECTED);
assertThat(response.getType()).isEqualTo(QuotaType.limited); assertThat(response.getValue()).isEqualTo(100);
assertThat(result).isEqualTo("FIXED_TOKEN");
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(callbackRequest).isNotNull(); assertThat(text.getText()).isEqualTo("Hello, world"); assertThat(followedUserId).isEqualTo("u206d25c2ea6bd87c17655609a1c37cb8"); assertThat(messageEvent.getTimestamp()).isEqualTo(Instant.parse("2016-05-07T13:57:59.859Z"));
assertThat(result).isNull();
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(result).isTrue();
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(response).isSameAs(membersIdsResponse);
assertThat(richMenuIdResponse).isEqualTo(RICH_MENU_ID_RESPONSE);
assertThat(richMenuResponse).isSameAs(richMenuReference);
assertThat(target.serialize(LocalDateTime.of(2017, 9, 8, 15, 52))) .isEqualToIgnoringCase("2017-09-08T15:52");
assertThat(actual).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(got).isEqualTo(dummyResponse);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(target.apply("image.PNG")).isEqualTo("image/png"); assertThat(target.apply("image.png")).isEqualTo("image/png"); assertThat(target.apply("image.jpg")).isEqualTo("image/jpeg"); assertThat(target.apply("image.jpeg")).isEqualTo("image/jpeg");
assertThat(got).isEqualTo(dummyResponse);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(response.getStatus()).isEqualTo(NumberOfMessagesResponse.Status.READY); assertThat(response.getSuccess()).isEqualTo(1024);
assertThat(response.getType()).isEqualTo(QuotaType.none);
assertThat(actual).isEqualTo(response);
assertThat(target.serialize(LocalTime.of(15, 52))) .isEqualTo("15:52");
assertThat(response.getTotalUsage()).isEqualTo(1024);
assertThat(systemOut) .contains("EXCEPTION HAPPEN!");
assertThat(target.eventConsumerList).hasSize(3); assertThat(target.eventConsumerList.get(0).getHandler().getName()) .isEqualTo("textMessageEventHandler"); assertThat(target.eventConsumerList.get(1).getHandler().getName()) .isEqualTo("generalMessageHandler"); assertThat(target.eventConsumerList.get(2).getHandler().getName()) .isEqualTo("defaultEventHandler");
assertThat(actual).isEqualTo(response);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(first).isNotEqualTo(second); assertThat(first.getPropertyNamingStrategy()) .isEqualTo(second.getPropertyNamingStrategy()) .isNull(); assertThat(first.getPropertyNamingStrategy()) .isNotEqualTo(second.getPropertyNamingStrategy());
assertThat(got).isEqualTo(dummyResponse);
assertThat(result) .isInstanceOf(UnauthorizedException.class);
assertThat(response.getStatus()).isEqualTo(NumberOfMessagesResponse.Status.READY); assertThat(response.getSuccess()).isEqualTo(1024);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(messageContentResponse.getLength()).isZero();
assertThat(response.getStatus()).isEqualTo(NumberOfMessagesResponse.Status.READY); assertThat(response.getSuccess()).isEqualTo(1024);
assertThat(actual).isEqualTo(response);
assertThat(systemOut) .contains("failed") .contains("EXCEPTION HAPPEN!");
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(result).isTrue();
assertThat(richMenuListResponse.getRichMenus()).isEmpty();
assertThat(response).isEqualTo(NarrowcastProgressResponse.builder() .phase(Phase.SUCCEEDED) .successCount(35L) .targetCount(35L) .build());
assertThat(target.eventConsumerList).hasSize(1); assertThat(handlerMethod.getSupportType()) .isInstanceOf(Predicate.class); assertThat(handlerMethod.getHandler()) .isInstanceOf(Method.class);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(new BotApiResponse(null, "", Arrays.asList()));
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(response);
assertThat(richMenuIdResponse).isEqualTo(RICH_MENU_ID_RESPONSE);
assertThat(richMenuIdResponse).isEqualTo(RICH_MENU_ID_RESPONSE);
assertThat(target.getDeviceMessage()) .hasSize(1) .containsExactly(0x01); assertThat(target.getDeviceMessage()[0]) .isEqualTo((byte) 0x01) .isNotEqualTo((byte) 0xcd);
assertThat(response).isSameAs(membersIdsResponse);
assertThat(callbackRequest).isNotNull(); assertThat(text.getText()).isEqualTo("Hello, world"); assertThat(followedUserId).isEqualTo("u206d25c2ea6bd87c17655609a1c37cb8"); assertThat(messageEvent.getTimestamp()).isEqualTo( Instant.parse("2016-05-07T13:57:59.859Z"));
assertThat(messageRead) .isEqualTo(TEXT_MESSAGE_EXPECTED);
assertThat(actual).isEqualTo(response);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(lineSignatureValidator .validateSignature(httpRequestBody.getBytes(StandardCharsets.UTF_8), "3q8QXTAGaey18yL8FWTqdVlbMr6hcuNvM4tefa0o9nA=")) .isTrue(); assertThat(lineSignatureValidator .validateSignature(httpRequestBody.getBytes(StandardCharsets.UTF_8), "596359635963")) .isFalse();
assertThat(systemOut) .contains("No command resolved.");
assertThat(contentResponse.getLength()).isEqualTo(0); assertThat(contentResponse.getMimeType()).isEqualTo("image/jpeg");
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(response);
assertThat(actual).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(result) .isInstanceOf(GeneralLineMessagingException.class);
assertThat(result).isEqualTo("01ab");
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(result) .isInstanceOf(GeneralLineMessagingException.class);
assertThat(actual).isEqualTo(response);
assertThat(result).isNotNull().isEmpty();
assertThat(response).isEqualTo(new IssueLinkTokenResponse("ID"));
assertThat(bytes).isNull();
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(response);
assertThat(response.getStatus()).isEqualTo(NumberOfMessagesResponse.Status.READY); assertThat(response.getSuccess()).isEqualTo(1024);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE);
assertThat(actual).isEqualTo(response);
assertThat(messageRead) .isEqualTo(TEXT_MESSAGE_EXPECTED);
assertTrue(compare > 0); assertEquals(0, compare + reverseCompare);
assertTrue(compare > 0); assertEquals(0, compare + reverseCompare);
assertTrue(compare < 0); assertEquals(0, compare + reverseCompare);
assertNull(therapySuspendReason);
assertEquals(new Double(100.0), new Double(rateWithNormalPrecision));
assertNotNull(paracetamolRuleResult); assertTrue(paracetamolRuleResult.getRule().startsWith("60mg/")); assertEquals(167, paracetamolRuleResult.getUnderageRulePercentage().intValue()); assertTrue(!paracetamolRuleResult.isQuantityOk());
assertNotNull(paracetamolRuleResult); assertTrue(paracetamolRuleResult.isQuantityOk());
assertEquals(new Double(2.0), formula);
assertTrue( medicationsBo.doesInstructionHaveLinkToCompareInstruction( instruction2, Pair.of(composition1, instruction1), EhrLinkType.UPDATE));
assertNotNull(paracetamolRuleResult); assertEquals(101, paracetamolRuleResult.getAdultRulePercentage().intValue()); assertTrue(!paracetamolRuleResult.isQuantityOk());
assertEquals("tbl", unitsMap.get("tableta")); assertEquals("vial", unitsMap.get("viala"));
assertTrue(medicationIdsWithIngredientId.isEmpty());
assertEquals(Long.valueOf(1L), medicationId);
assertEquals(new Double(21.0), new Double(rateWithNormalPrecision));
assertNotNull(paracetamolRuleResult); assertTrue(paracetamolRuleResult.getRule().startsWith("60mg/")); assertEquals(334, paracetamolRuleResult.getUnderageRulePercentage().intValue()); assertTrue(!paracetamolRuleResult.isQuantityOk());
assertEquals("111", fdbExternalId); assertEquals("222", winpisExternalId);
assertTrue(medicationIdsWithIngredientRule.contains(1L));
assertNull(therapySuspendReason);
assertEquals(new Double(10.0), new Double(event.getWeight().getMagnitude())); assertEquals(testTimestamp, DataValueUtils.getDateTime(event.getTime()));
assertTrue(compare > 0); assertEquals(0, compare + reverseCompare);
assertNotNull(therapySuspendReason); assertNotNull(therapySuspendReason.getChangeReason()); assertEquals( TherapyChangeReasonEnum.TEMPORARY_LEAVE.toFullString(), therapySuspendReason.getChangeReason().getCode()); assertEquals( TherapyChangeReasonEnum.TEMPORARY_LEAVE.toFullString(), therapySuspendReason.getChangeReason().getName());
assertEquals(new Double(12.0), new Double(formulaWithNormalPrecision));
assertTrue(customWarningsForMedication.isEmpty());
assertNotNull(paracetamolRuleResult); assertTrue(paracetamolRuleResult.isQuantityOk());
assertEquals(0, compare);
assertTrue( medicationsBo.areInstructionsLinkedByUpdate( Pair.of(composition2, instruction2), Pair.of(composition1, instruction1)) ); assertTrue( medicationsBo.areInstructionsLinkedByUpdate( Pair.of(composition1, instruction1), Pair.of(composition2, instruction2)) );
assertNull(medicationId);
assertEquals(1L, doseForm.getId()); assertEquals("1", doseForm.getCode()); assertEquals("Tablet", doseForm.getName()); assertEquals(DoseFormType.TBL, doseForm.getDoseFormType()); assertEquals(MedicationOrderFormType.SIMPLE, doseForm.getMedicationOrderFormType());
assertNotNull(paracetamolRuleResult); assertEquals(100, paracetamolRuleResult.getAdultRulePercentage().intValue()); assertTrue(paracetamolRuleResult.isQuantityOk());
assertEquals("ExternalRoute1", routesMap.get("R001")); assertEquals("ExternalRoute2", routesMap.get("R002"));
assertEquals(2L, (long)units.size()); assertEquals("kg", units.get(0)); assertEquals("mL", units.get(1));
assertTrue(customWarningsForMedication.isEmpty());
assertEquals(2L, doseForm.getId()); assertEquals("2", doseForm.getCode()); assertEquals("Fluid", doseForm.getName()); assertNull(doseForm.getDoseFormType()); assertEquals(MedicationOrderFormType.COMPLEX, doseForm.getMedicationOrderFormType());
assertEquals(new Double(17.5), new Double(formulaWithNormalPrecision));
assertEquals("uid1|Medication instruction", originalTherapyId);
assertTrue(medicationIdsWithIngredientId.contains(2L));
assertEquals(new Double(10.0), rate);
assertTrue(unitsMap.isEmpty());
assertEquals(2L, (long)groups.size()); assertEquals("Acet. kislina KOOKIT EIT", groups.get(0)); assertEquals("Paracetamol KOOKIT EIT", groups.get(1));
assertEquals(altNetwork.getId(), params.getId()); assertEquals(MainNetParams.get().getId(), params.getId());
assertEquals(MainNetParams.get().getId(), params.getId()); assertEquals(TestNet3Params.get().getId(), params.getId());
assertEquals(2, chainHead.getHeader().getVersion()); assertEquals(PARAMS.getMajorityWindow(), instance.getCountAtOrAbove(2).intValue());
assertEquals("PUSHDATA(1)[11] 16 15 15 16 PUSHDATA(1)[11]", script.toString());
assertTrue(result < 0);
assertEquals(a, b); assertNotSame(a, b);
assertEquals(op1, msg1.getOutPoints().get(0)); assertEquals(op2, msg2.getOutPoints().get(0)); assertEquals(1, msg1.getOutPoints().size()); assertFalse(future1.isDone()); assertEquals(future1.get(), response1); assertEquals(future2.get(), response2);
assertEquals(e.verCode, MainNetParams.get().getAddressHeader()); assertTrue(Arrays.equals(e.acceptableVersions, TestNet3Params.get().getAcceptableAddressCodes()));
assertNotEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertNotEquals(0, wallet.getTransactions(false).size()); assertNotEquals(0, wallet.getUnspents().size()); assertEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertEquals(0, wallet.getTransactions(false).size()); assertEquals(0, wallet.getUnspents().size());
assertEquals(RuleViolation.NONE, DefaultRiskAnalysis.isInputStandard(new TransactionInput(PARAMS, null, scriptOk.getProgram()))); assertEquals(RuleViolation.SIGNATURE_CANONICAL_ENCODING, DefaultRiskAnalysis.isInputStandard(new TransactionInput(PARAMS, null, scriptUncanonicalEncoding .getProgram())));
assertTrue(selection.gathered.size() == 4);
assertArrayEquals(new byte[] { 0x02, 0x4a, 0x52 }, builder.build().getProgram()); assertEquals(4, builder.build().getProgram().length); assertArrayEquals(new byte[] { 0x03, 0x00, (byte) 0x80, 0x00 }, builder.build().getProgram());
assertEquals("1.00 BCH", COIN.toFriendlyString()); assertEquals("1.23 BCH", valueOf(1, 23).toFriendlyString()); assertEquals("0.001 BCH", COIN.divide(1000).toFriendlyString()); assertEquals("-1.23 BCH", valueOf(1, 23).negate().toFriendlyString());
assertEquals(RiskAnalysis.Result.NON_FINAL, analysis.analyze()); assertEquals(RiskAnalysis.Result.OK, analysis.analyze());
assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(1416135273781L)); assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(new Date(1416135273781L)));
assertArrayEquals(new byte[] { 0x00 }, builder.build().getProgram());
assertNotNull(vtx[0]); assertNull(vtx[0]); assertEquals(t2, vtx[0]);
assertTrue(testNetChain.add(getBlock1())); assertTrue(testNetChain.add(b2)); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Difficulty target is bad")); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Unexpected change in difficulty"));
assertFalse(isConsistent);
assertThat("Failed on index: "+i, seedPeers.getPeer(), notNullValue()); assertThat(seedPeers.getPeer(), equalTo(null));
assertThat(multiSigTransactionOutput.toString(), CoreMatchers.containsString("CHECKMULTISIG"));
assertFalse(wallet.isAddressWatched(watchedAddress)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertEquals(t2.getOutput(0), candidates.get(0)); assertEquals(t1.getOutput(0), candidates.get(1)); assertEquals(t3.getOutput(0), candidates.get(2));
assertTrue(result > 0);
assertEquals(message.getLocator(), expectedLocator); assertEquals(Sha256Hash.ZERO_HASH, message.getStopHash());
assertTrue( resultBytes < 0 ); assertTrue( resultsString < 0 );
assertEquals(12, wallet.getKeyChainSeed().getMnemonicCode().size());
assertEquals(base58, Address.fromBase58(null, base58).toBase58());
assertEquals(toAddress, ScriptBuilder.createOutputScript(toKey).getToAddress(PARAMS, true)); assertEquals(toAddress, ScriptBuilder.createOutputScript(toAddress).getToAddress(PARAMS, true)); assertEquals(scriptAddress, p2shScript.getToAddress(PARAMS, true));
assertEquals(RiskAnalysis.Result.OK, DefaultRiskAnalysis.FACTORY.create(wallet, tx, NO_DEPS).analyze());
assertFalse(wallet.isWatching()); assertTrue(watchingWallet.isWatching()); assertFalse(wallet.isWatching());
assertEquals(nanos, tx1.getValueSentToMe(wallet)); assertTrue(tx1.getWalletOutputs(wallet).size() >= 1); assertEquals(nanos, send2.getValueSentFromMe(wallet)); assertEquals(ZERO.subtract(valueOf(0, 10)), send2.getValue(wallet));
assertEquals("OP_0 push length", 0, stack.get(0).length);
assertArrayEquals(new byte[] { 0x01, ((byte) 133) }, builder.build().getProgram());
assertTrue(s.isSentToRawPubKey());
assertArrayEquals(new byte[] { 0x55 }, builder.build().getProgram());
assertEquals(Transaction.MIN_NONDUST_OUTPUT, payToAddressOutput.getMinNonDustValue());
assertEquals(DefaultRiskAnalysis.RuleViolation.NONE, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.SHORTEST_POSSIBLE_PUSHDATA, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.NONE, DefaultRiskAnalysis.isStandard(tx)); assertEquals(DefaultRiskAnalysis.RuleViolation.SHORTEST_POSSIBLE_PUSHDATA, DefaultRiskAnalysis.isStandard(tx));
assertEquals(1, watchedAddresses.size()); assertEquals(watchedAddress, watchedAddresses.get(0));
assertThat(seedPeers.getPeer(), notNullValue());
assertFalse(wallet.isAddressWatched(addr)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertEquals(queue.poll(), backoff); assertEquals(queue.peek(), backoff1); assertEquals(queue.poll(), backoff);
assertEquals("0", MonetaryFormat.UBTC.noCode().shift(0).format(Coin.ZERO).toString()); assertEquals("dBCH 0", MonetaryFormat.UBTC.noCode().code(1, "dBCH").shift(1).format(Coin.ZERO).toString());
assertEquals(tx.toString().contains("No inputs!"), true);
assertThat(addresses.length, equalTo(MainNetParams.get().getAddrSeeds().length));
assertEquals(2, chain.getKeys(false).size());
assertEquals(1, message.getItems().size()); assertEquals(tx.getHash(), message.getItems().get(0).hash); assertNotEquals(0, tx.getConfidence().numBroadcastPeers()); assertNull(outbound(writeTarget2));
assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, Utils.reverseBytes(new byte[]{5, 4, 3, 2, 1}));
assertFalse(isConsistent);
assertEquals(CENT, parseCoin("0.01")); assertEquals(CENT, parseCoin("1E-2")); assertEquals(COIN.add(CENT), parseCoin("1.01")); assertEquals(COIN.negate(), parseCoin("-1"));
assertTrue("script is locktime-verify", script.isSentToCLTVPaymentChannel());
assertEquals(1, wallet.getImportedKeys().size()); assertEquals(key, wallet.getImportedKeys().get(0)); assertEquals("5ca8cd6c01aa004d3c5396c628b78a4a89462f412f460a845b594ac42eceaa264b0e14dcd4fe73d4ed08ce06f4c28facfa85042d26d784ab2798a870bb7af556", seed);
assertEquals(1, flag.get());
assertTrue(ScriptBuilder.createOutputScript(p2shAddress).isPayToScriptHash());
assertEquals(RiskAnalysis.Result.OK, DefaultRiskAnalysis.FACTORY.create(wallet, standardTx, NO_DEPS).analyze()); assertEquals(RiskAnalysis.Result.NON_STANDARD, DefaultRiskAnalysis.FACTORY.create(wallet, dustTx, NO_DEPS).analyze()); assertEquals(RiskAnalysis.Result.OK, DefaultRiskAnalysis.FACTORY.create(wallet, edgeCaseTx, NO_DEPS).analyze());
assertEquals(3, txns.size()); assertTrue(txns.contains(send1)); assertTrue(txns.contains(send1b)); assertTrue(txns.contains(send1c));
assertEquals(CENT, valueOf(0, 1)); assertEquals(SATOSHI, valueOf(1)); assertEquals(NEGATIVE_SATOSHI, valueOf(-1)); assertEquals(MAX_MONEY, valueOf(MAX_MONEY.value)); assertEquals(MAX_MONEY.negate(), valueOf(MAX_MONEY.value * -1));
assertFalse(future.isDone()); assertFalse(future.isDone()); assertFalse(future.isDone()); assertTrue(peerGroup.waitForPeersOfVersion(1, newVer).isDone()); assertTrue(future.isDone());
assertTrue(scriptPubKeys.containsKey(input.getOutpoint()));
assertEquals("n4eA2nbYqErp7H6jebchxAN59DmNpksexv", a.toString()); assertFalse(a.isP2SHAddress()); assertEquals("17kzeh4N8g49GFvdDzSf8PjaPfyoD1MndL", b.toString()); assertFalse(b.isP2SHAddress());
assertTrue(scriptPubKeys.containsKey(input.getOutpoint()));
assertEquals(0, Utils.maxOfMostFreq()); assertEquals(0, Utils.maxOfMostFreq(0, 0, 1)); assertEquals(2, Utils.maxOfMostFreq(1, 1, 2, 2)); assertEquals(1, Utils.maxOfMostFreq(1, 1, 2, 2, 1)); assertEquals(-1, Utils.maxOfMostFreq(-1, -1, 2, 2, -1));
assertTrue(wallet.isConsistent()); assertEquals("Wrong number of PENDING", 1, wallet.getPoolSize(WalletTransaction.Pool.PENDING)); assertEquals("Wrong number of UNSPENT", 0, wallet.getPoolSize(WalletTransaction.Pool.UNSPENT)); assertEquals("Wrong number of ALL", 2, wallet.getTransactions(true).size()); assertEquals(valueOf(0, 50), wallet.getBalance(Wallet.BalanceType.ESTIMATED));
assertEquals(new Event(0, true), event);
assertEquals(new Event(0, false), event);
assertThat(os.toString(charset.name())).isEqualTo("{\\"hello\\":\\"world\\"}");
assertThat(os.toString(charset.name())).isEqualTo("[\\"hello\\",\\"again\\"]");
assertThat(systemOutRule.getLog()).contains("Random from MVEL = 2");
assertEquals(proxy1.compareTo(proxy2),-1); assertEquals(proxy2.compareTo(proxy1),1); assertEquals(proxy2.compareTo(proxy3),0);
assertThat(rules).hasSize(1).containsExactly(r1);
assertThat(dummyRule.isExecuted()).isTrue(); assertThat(anotherDummyRule.isExecuted()).isFalse();
assertThat(foo.isAdult()).isTrue();
assertThat(value).isEqualTo(1);
assertThat(adultRule.getName()).isEqualTo("adult rule"); assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult"); assertThat(adultRule.getPriority()).isEqualTo(1);
assertThat(evaluationResult).isTrue();
assertThat(rules).isEmpty();
assertThat(rules).startsWith(r1).endsWith(r2);
assertThat(evaluationResult).isFalse();
assertThat(foo.isAdult()).isTrue();
assertThat(evaluationResult).isTrue();
assertThat(evaluationResult).isFalse();
assertThat(dummyRule.isExecuted()).isTrue(); assertThat(anotherDummyRule.isExecuted()).isTrue(); assertThat(dummyRule.getTimestamp()).isLessThanOrEqualTo(anotherDummyRule.getTimestamp());
assertEquals(proxy1.hashCode(), proxy1.hashCode()); assertEquals(proxy1, proxy2); assertEquals(proxy1.hashCode(), proxy2.hashCode()); assertNotEquals(rule, proxy1); assertNotEquals(rule.hashCode(), proxy1.hashCode());
assertThat(facts).isEmpty();
assertThat(rule.getName()).isEqualTo(Rule.DEFAULT_NAME); assertThat(rule.getDescription()).isEqualTo(Rule.DEFAULT_DESCRIPTION); assertThat(rule.getPriority()).isEqualTo(Rule.DEFAULT_PRIORITY); assertThat(rule).isInstanceOf(DefaultRule.class);
assertEquals(Rule.DEFAULT_PRIORITY, proxy.getPriority());
assertThat(facts).contains(fact1); assertThat(facts).contains(fact2);
assertThat(basicRule.evaluate(facts)).isFalse();
assertNotNull(proxy.getDescription()); assertNotNull(proxy.getName());
assertThat(map).containsKeys("foo", "bar"); assertThat(map).containsValues(1, 2);
assertThat(rules).hasSize(1);
assertEquals(proxy1.toString(), proxy1.toString()); assertEquals(proxy1.toString(), proxy2.toString()); assertEquals(rule.toString(), proxy1.toString());
assertThat(rules.isEmpty()).isTrue();
assertEquals(2, proxy.getPriority());
assertThat(rules).isEmpty();
assertThat(facts).isEmpty();
assertTrue(Utils.isAnnotationPresent(Foo.class, AnnotationIsPresent.class));
assertThat(adultRule.getName()).isEqualTo("adult rule"); assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult"); assertThat(adultRule.getPriority()).isEqualTo(1);
assertNotNull(proxy.getDescription()); assertNotNull(proxy.getName());
assertFalse(Utils.isAnnotationPresent(Foo.class, Object.class));
assertThat(foo.isAdult()).isTrue();
assertNull(foo);
assertThat(evaluationResult).isTrue();
assertThat(rules.size()).isEqualTo(0); assertThat(rules.size()).isEqualTo(1); assertThat(rules.size()).isEqualTo(0);
assertThat(evaluationResult).isTrue();
assertThat(evaluationResult).isTrue();
assertEquals(proxy1.getDescription(), proxy2.getDescription()); assertEquals(proxy1.getName(), proxy2.getName());
assertThat(result).hasSize(2); assertThat(result.get(r)).isTrue();
assertThat(facts).contains(new Fact<>("foo", 1)); assertThat(facts).contains(new Fact<>("bar", 2));
assertThat(rule1.compareTo(rule2)).isEqualTo(0); assertThat(rule2.compareTo(rule1)).isEqualTo(0);
assertThat(foo.isAdult()).isTrue();
assertThat(adultRule.getName()).isEqualTo("adult rule"); assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult"); assertThat(adultRule.getPriority()).isEqualTo(1);
assertEquals(1, proxy.getPriority());
assertThat(systemOutRule.getLog()).contains("Hello from MVEL!");
assertThat(retrievedFact).isEqualTo(fact);
assertTrue(Utils.isAnnotationPresent(Foo.class, AnnotationIsPresentViaMetaAnnotation.class));
assertThat(adultRule.getName()).isEqualTo("adult rule"); assertThat(adultRule.getDescription()).isEqualTo("when age is greater than 18, then mark as adult"); assertThat(adultRule.getPriority()).isEqualTo(1);
assertThat(evaluationResult).isTrue();
assertEquals(2, proxy.getPriority());
assertEquals("012", annotatedRule.getActionSequence());
assertThat(systemOutRule.getLog()).contains("hello");
assertThat(systemOutRule.getLog()).contains("hello");
assertThat(annotatedRule.isExecuted()).isTrue();
assertThat(rules).hasSize(1).containsExactly(r1);
assertThat((Object) data.getPathWithinModule()).isEqualTo(Paths.get("BundleConfig.pb"));
assertThat(suggestionTree.getSelectionCount()).isEqualTo(0); assertThat(suggestionTree.getSelectionCount()).isEqualTo(1); assertThat(component.toString()).contains(webPCategoryData.toString()); assertThat(component.toString()).contains("Estimated savings: 29.30 KB"); assertThat(suggestionPanelComponents).hasLength(1); assertThat(((LinkLabel<?>) linkLabel).getText()).isEqualTo(SuggestionDataFactory.issueTypeNodeNames.get(IssueType.WEBP));
assertThat(stream).isNotNull();
assertThat(categoryData.toString()).isNotEmpty();
assertThat(systemFileData.getSize()).isEqualTo(1408431L);
assertThat(context.getPluginType()).isEqualTo(GradleContext.PluginType.APPLICATION);
assertThat( new QuestionableFilesSuggester() .processBundleZipEntry(BundleContext.create(1, false), fileData)) .isEmpty();
assertThat( new LargeFilesSuggester() .processBundleZipEntry(BundleContext.create(1, false), fileData)) .isEmpty();
assertThat(webPIssueNode.getChildCount()).isEqualTo(2);
assertThat(context.getBundleConfig().getAbiSplitEnabled()).isTrue(); assertThat(context.getBundleConfig().getDensitySplitEnabled()).isTrue(); assertThat(context.getBundleConfig().getLanguageSplitEnabled()).isFalse();
assertThat(context.getMinSdkVersion()).isEqualTo(15);
assertThat( new LargeFilesSuggester() .processBundleZipEntry(BundleContext.create(1, false), fileData)) .isEmpty();
assertThat(suggestions).hasSize(1); assertThat(suggestions) .containsExactly( Suggestion.create( Suggestion.IssueType.LARGE_FILES_DYNAMIC_FEATURE, Suggestion.Category.LARGE_FILES, Payload.getDefaultInstance(), "Place large file " + PROJECT_BIN_FILE + " inside an on demand dynamic-feature to avoid bundling in apk", LARGE_FILE_SIZE, null));
assertThat(context.getBundleConfig().getAbiSplitEnabled()).isFalse(); assertThat(context.getBundleConfig().getDensitySplitEnabled()).isFalse(); assertThat(context.getBundleConfig().getLanguageSplitEnabled()).isFalse();
assertThat(suggestions).isEmpty();
assertThat(sizeAnalysisLog.getErrorType()).isEqualTo(ErrorType.RUNTIME_ERROR);
assertThat(suggestionData.getBytesSaved()).isEqualTo("1.00 KB");
assertThat(suggestions).isEmpty();
assertThat((Object) systemFileData.getPathWithinModule()).isEqualTo(pathWithinModule);
assertThat(zeroSuggestionData.getBytesSaved()).isNull();
assertThat(renderedNode.toString()).contains("2 recommendations"); assertThat(renderedNode.toString()).contains("29.30 KB");
assertThat(sizeAnalysisLog.getErrorType()).isEqualTo(ErrorType.RUNTIME_ERROR);
assertThat(suggestions).containsExactly(stubSuggestion, stubArtifactSuggestion);
assertThat((Object) systemFileData.getPathWithinRoot()).isEqualTo(pathWithinRoot);
assertThat(context.getMinSdkVersion()).isEqualTo(14);
assertThat(data.getSize()).isEqualTo(2099L);
assertThat(context.getBundleConfig().getBundleConfigLocation().getAbiSplitLineNumber()) .isNull(); assertThat(context.getBundleConfig().getBundleConfigLocation().getDensitySplitLineNumber()) .isNull(); assertThat(context.getBundleConfig().getBundleConfigLocation().getLanguageSplitLineNumber()) .isNull();
assertThat(context.getBundleConfig().getAbiSplitEnabled()).isTrue(); assertThat(context.getBundleConfig().getDensitySplitEnabled()).isTrue(); assertThat(context.getBundleConfig().getLanguageSplitEnabled()).isTrue();
assertThat(context.getEmbedsWearApk()).isTrue();
assertThat(context.getBundleConfig().getBundleConfigLocation().getAbiSplitLineNumber()) .isEqualTo(21); assertThat(context.getBundleConfig().getBundleConfigLocation().getDensitySplitLineNumber()) .isEqualTo(18); assertThat(context.getBundleConfig().getBundleConfigLocation().getLanguageSplitLineNumber()) .isEqualTo(15);
assertThat(context.getAndroidPluginVersion()).isNotNull(); assertThat(context.getAndroidPluginVersion().getMajorVersion()).isEqualTo(3); assertThat(context.getAndroidPluginVersion().getMinorVersion()).isEqualTo(4);
assertThat( new LargeFilesSuggester() .processBundleZipEntry(BundleContext.create(1, true), fileData)) .isEmpty();
assertThat( new LargeFilesSuggester() .processBundleZipEntry(BundleContext.create(1, false), fileData)) .isEmpty();
assertThat(suggestions) .containsExactly( Suggestion.create( Suggestion.IssueType.WEBP, Suggestion.Category.WEBP, Payload.newBuilder() .setWebpData( WebpData.newBuilder() .setFile(FileEntryData.newBuilder().setFilePath("drawing.png"))) .build(), "Convert drawing.png to webp with lossless encoding", 200L, new WebpAutoFix(systemFileData.getSystemPath())));
assertThat( new WebpSuggester() .processBundleZipEntry( BundleContext.create(MIN_SDK_VERSION_SUPPORTING_LOSSLESS_WEBP), file)) .isEmpty();
assertThat(context.getMinSdkVersion()).isEqualTo(19); assertThat(context.getPluginType()).isEqualTo(GradleContext.PluginType.APPLICATION); assertThat(context.getProguardConfigs()).isEqualTo(expectedMap);
assertThat(context.getProguardConfigs()).isEqualTo(expectedMap);
assertThat(pngFile.exists()).isFalse(); assertThat(webpFile.exists()).isTrue(); assertThat(Files.asByteSource(webpFile).read()).isEqualTo(bytes);
assertThat(context.getMinSdkVersion()).isEqualTo(defaultMinSdkVersion);
assertThat(suggestions).isEmpty();
assertThat(suggestions).hasSize(1); assertThat(suggestions) .containsExactly( Suggestion.create( Suggestion.IssueType.LARGE_FILES_DYNAMIC_FEATURE, Suggestion.Category.LARGE_FILES, Payload.getDefaultInstance(), "Place large file " + BIN_FILE + " inside an on demand dynamic-feature to avoid bundling in apk", LARGE_FILE_SIZE, null));
assertThat(context.getPluginType()).isEqualTo(GradleContext.PluginType.UNKNOWN);
assertThat(data.getCompressedSize()).isEqualTo(794L);
assertThat(stream).isNotNull();
assertThat(outputBytes).isEqualTo(expectedOutputBytes);
assertThat(categoryData.totalSizeSaved()).isNull();
assertThat((Object) data.getPathWithinModule()) .isEqualTo(Paths.get("manifest/AndroidManifest.xml"));
assertThat((Object) data.getPathWithinRoot()) .isEqualTo(Paths.get("base/manifest/AndroidManifest.xml"));
assertThat(context.getPluginType()).isEqualTo(GradleContext.PluginType.DYNAMIC_FEATURE);
assertThat(suggestions).isEmpty(); assertThat(suggester.getAnalyzedEntries()).containsExactly("build.gradle");
assertThat(context.getBundleConfig().getBundleConfigLocation().getAbiSplitLineNumber()) .isNull(); assertThat(context.getBundleConfig().getBundleConfigLocation().getDensitySplitLineNumber()) .isEqualTo(18); assertThat(context.getBundleConfig().getBundleConfigLocation().getLanguageSplitLineNumber()) .isEqualTo(15);
assertThat(context).isNotNull();
assertThat(component.isVisible()).isFalse();
assertThat(categoryData.totalSizeSaved()).isEqualTo("1.00 KB");
assertEquals("git: assertNotNull(gist.getCreatedAt()); assertNotNull(gist.getUpdatedAt()); GitHubFile file = gist.getFiles().get("jmustache-spring-mvc.java"); assertNotNull(file); assertEquals("jmustache-spring-mvc.java", file.getFilename()); assertEquals("text/plain", file.getType()); assertEquals("https: assertEquals("Java", file.getLanguage()); assertEquals(3749L, file.getSize()); assertNull(file.getContent());
assertEquals("Michael Craig Walls", profile.getName()); assertEquals("Michael", profile.getFirstName()); assertEquals("Walls", profile.getLastName()); assertEquals("cwalls@vmware.com", profile.getEmail()); assertEquals("habuma", profile.getUsername());
assertEquals("Craig Walls", profile.getName()); assertEquals("Craig", profile.getFirstName()); assertEquals("Walls", profile.getLastName()); assertEquals("cwalls@vmware.com", profile.getEmail()); assertEquals("habuma", profile.getUsername());
assertTrue(hook.isActive()); assertEquals(new Date(1315329987000L), hook.getCreatedAt()); assertEquals(new Date(1315341563000L), hook.getUpdatedAt());
assertEquals("Craig", profile.getName()); assertEquals("Craig", profile.getFirstName()); assertNull(profile.getLastName()); assertEquals("cwalls@vmware.com", profile.getEmail()); assertEquals("habuma", profile.getUsername());
assertEquals("Michael Craig Walls", profile.getName()); assertEquals("Michael", profile.getFirstName()); assertEquals("Walls", profile.getLastName()); assertEquals("cwalls@vmware.com", profile.getEmail()); assertEquals("habuma", profile.getUsername());
assertTrue( resources.hasMoreElements() ); assertTrue( resources.hasMoreElements() );
assertEquals( resourceDir, loader.getHome() );
assertTrue( cond.getValue( context1 ) ); assertFalse( cond.getValue( context2 ) );
assertNull( am );
assertNotNull( am ); assertEquals( "/foo/bar", am.getPath() );
assertNotNull( resourceStream );
assertTrue( trueExpression.getValue( context ) ); assertFalse( falseExpression.getValue( context ) ); assertFalse( andExpression.getValue( context ) ); assertTrue( orExpression.getValue( context ) ); assertTrue( xorExpression.getValue( context ) );
assertTrue( artifact.equals( artifact ) ); assertFalse( artifact.equals( null ) ); assertFalse( artifact.equals( 42 ) ); assertTrue( artifact.equals( artifact0 ) ); assertFalse( artifact.equals( artifact1 ) ); assertFalse( artifact.equals( artifact2 ) ); assertFalse( artifact.equals( artifact3 ) ); assertFalse( artifact.equals( artifact4 ) ); assertFalse( artifact.equals( artifact5 ) );
assertNotNull( am ); assertEquals( "/foo/bar", am.getPath() );
assertNotNull( list ); assertTrue( list.isEmpty() );
assertTrue( cond.getValue( context1 ) ); assertTrue( cond.getValue( context2 ) );
assertEquals( resourceDir, loader.getHome() );
assertEquals( "bar", fooProperty.getValue( context ) ); assertEquals( "", bazProperty.getValue( context ) ); assertEquals( null, xyzzyProperty.getValue( context ) ); assertTrue( fooDefined.getValue( context ) ); assertTrue( bazDefined.getValue( context ) ); assertFalse( xyzzyDefined.getValue( context ) );
assertEquals( 1, files.size() ); assertEquals( Paths.get( "usr/share/maven-metadata/test-package-subpackage.xml" ), metadataFile.getTargetPath() );
assertEquals( 1, files.size() ); assertEquals( Paths.get( "usr/share/maven-metadata/test-package.xml" ), metadataFile.getTargetPath() ); assertNotNull( pkg.getMetadata() );
assertEquals( "my-id", pkg.getId() );
assertEquals( "gid:aid:jar:SYSTEM", artifact2.toString() ); assertEquals( "gid:aid:jar:ver", artifact3.toString() ); assertEquals( "gid:aid:ext:ver", artifact4.toString() ); assertEquals( "gid:aid:ext:cla:ver", artifact5.toString() );
assertTrue( cond.getValue( context1 ) ); assertTrue( cond.getValue( context2 ) );
assertNotNull( list ); assertTrue( list.isEmpty() );
assertNull( am );
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.NO_CONTENT));
assertThat(connectionsUsed, hasSize(2)); assertThat(connectionsUsed, contains(mockConnection, mockReplacedConnection));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_MINIMAL_FIELDS_SNAPSHOTS_DISABLED_EXPLICITLY_CONFIGURATION));
assertThat(jdbcLog.getLast(), nullValue());
assertThat(thrownException, instanceOf(KeyNotFoundException.class)); assertThat(((KeyNotFoundException) thrownException).getKey(), equalTo("FAKE_KEY"));
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.INTERNAL_SERVER_ERROR)); assertThat(response.getLocation(), nullValue());
assertThat(jdbcLog.getFirst(), nullValue());
assertThat(snapshot.getTerm(), equalTo(finalSnapshotTerm)); assertThat(snapshot.getIndex(), equalTo(finalSnapshotIndex)); assertThat(read, equalTo(bytesAvailable)); assertThat(Arrays.equals(buffer, finalSnapshotData), is(true));
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.INTERNAL_SERVER_ERROR)); assertThat(response.getLocation(), nullValue());
assertThat(snapshots, hasSize(numSnapshots)); assertThat(prevTimestamp, greaterThan(metadata.getTimestamp()));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_REQUIRED_FIELDS_ONLY_CONFIGURATION));
assertThat(check.check().isHealthy(), equalTo(false)); assertThat(check.check().getError(), Matchers.<Throwable>sameInstance(failureCause));
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.SERVICE_UNAVAILABLE)); assertThat(response.getLocation(), nullValue());
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.NO_CONTENT));
assertThat(check.check().isHealthy(), equalTo(false)); assertThat(check.check().getError(), Matchers.<Throwable>sameInstance(failureCause));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_MINIMAL_FIELDS_SNAPSHOTS_ENABLED_WITH_SNAPSHOT_DIRECTORY_ONLY_CONFIGURATION));
assertThat(check.check().isHealthy(), equalTo(false)); assertThat(check.check().getError(), nullValue());
assertThat(clientAll, containsInAnyOrder(serverAll.toArray()));
assertThat(exceptionEvent.getCause(), Matchers.<Throwable>is(resolveFailureCause));
assertThat(committed, nullValue());
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_REQUIRED_FIELDS_ONLY_NO_PASSWORD_CONFIGURATION));
assertThat(callException, notNullValue());
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_ALL_FIELDS_CONFIGURATION));
assertThat(e.getCause(), Matchers.<Throwable>sameInstance(failure)); assertThat(exceptionThrown, is(true));
assertThat(jdbcStore.getVotedFor(term), nullValue());
assertThat(exceptionEvent.getCause(), Matchers.<Throwable>is(resolveFailureCause));
assertThat(check.check().isHealthy(), equalTo(true));
assertThat(lastAppliedIndex, equalTo(0L));
assertThat(e.getCause(), Matchers.<Throwable>sameInstance(failure)); assertThat(exceptionThrown, is(true));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_REQUIRED_FIELDS_ONLY_EMPTY_PASSWORD_CONFIGURATION));
assertThat(setFuture.isDone(), equalTo(false)); assertThat(setCommand.getKey(), equalTo(key)); assertThat(setCommand.getNewValue(), equalTo(value));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_MINIMAL_FIELDS_SNAPSHOTS_ENABLED_WITH_SNAPSHOT_CHECK_INTERVAL_ONLY_CONFIGURATION));
assertThat(snapshots, empty());
assertThat(statementsUsed, hasSize(2)); assertThat(statementsUsed, contains(mockPreparedStatement, mockReplacedPreparedStatement));
assertThat(committed, nullValue());
assertThat(algorithm.getNextCommitted(0), nullValue());
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.INTERNAL_SERVER_ERROR)); assertThat(response.getLocation(), nullValue());
assertThat(response.getClientResponseStatus(), equalTo(ClientResponse.Status.MOVED_PERMANENTLY)); assertThat(response.getLocation().toString(), equalTo(leaderUrl + REQUEST_URI));
assertThat(check.check().isHealthy(), equalTo(false));
assertThat(snapshot, nullValue());
assertThat(keyResource.getKey(), equalTo("key"));
assertThat(forwardedEvent.getChannel(), equalTo(channel)); assertThat(forwardedEvent.getState(), equalTo(ChannelState.CONNECTED)); assertThat(forwardedEvent.getFuture(), Matchers.<ChannelFuture>equalTo(originalEventFuture)); assertThat(forwardedAddress.isUnresolved(), equalTo(false));
assertThat(WRITER.writeValueAsString(configuration), configuration, equalTo(RaftConfigurationFixture.RAFT_MINIMAL_FIELDS_SNAPSHOTS_DISABLED_EXPLICITLY_WITH_ADDITIONAL_SNAPSHOT_FIELDS_CONFIGURATION));
assertThat(check.check().isHealthy(), equalTo(true));
assertThat(services).containsOnly(FirstService.class, SecondService.class, InnerClasses.InnerService.class);
assertThat(result).containsOnly(InnerClasses.InnerComponent.class);
assertEquals("First component", ClassIndex.getClassSummary(FirstComponent.class));
assertThat(result).containsOnly(FirstComponent.class, SecondComponent.class, InnerClasses.InnerComponent.InnerInnerComponent.class, InnerClasses.InnerModule.class, Service.class);
assertThat(result).containsOnly(FirstComponent.class, InnerClasses.InnerComponent.class);
assertThat(annotated).containsOnly(Service.class, FirstService.class, SecondService.class, InnerClasses.InnerService.class);
assertThat(annotated).isEmpty();
assertThat(result).containsOnly(InnerClasses.InnerComponent.class, InnerClasses.InnerModule.class);
assertThat(result).hasSize(6);
assertThat(annotated).contains(StandardRepeated.class, Java8Repeated.class);
assertThat(result).containsOnly(InnerClasses.InnerComponent.class, InnerClasses.InnerModule.class, InnerClasses.InnerComponent.InnerInnerComponent.class);
assertThat(result).containsOnly(Service.class);
assertThat(annotated).isEmpty();
assertThat(services).containsOnly(FirstService.class.getCanonicalName(), SecondService.class.getCanonicalName(), InnerClasses.class.getCanonicalName() + "$" + InnerClasses.InnerService.class.getSimpleName());
assertThat(result).containsOnly(FirstComponent.class, SecondComponent.class, InnerClasses.InnerComponent.class, InnerClasses.InnerComponent.InnerInnerComponent.class, InnerClasses.InnerModule.class);
assertThat(packageSubclasses).contains(ExtraPlugin.class);
assertThat(packageSubclasses).contains(FirstComponent.class, Component.class); assertThat(packageSubclasses).doesNotContain(Important.class);
assertThat(result).containsOnly(FirstComponent.class, SecondComponent.class, InnerClasses.InnerComponent.class, Service.class);
assertThat(annotated).containsOnly( FirstComponent.class.getCanonicalName(), SecondComponent.class.getCanonicalName(), InnerClasses.class.getCanonicalName() + "$" + InnerClasses.InnerComponent.class.getSimpleName(), InnerClasses.class.getCanonicalName() + "$" + InnerClasses.InnerComponent.class.getSimpleName() + "$" + InnerClasses.InnerComponent.InnerInnerComponent.class.getSimpleName(), "org.atteo.classindex.DeletedComponent");
assertEquals("First module", ClassIndex.getClassSummary(FirstModule.class));
assertThat(result).containsOnly(FirstComponent.class, SecondComponent.class, Service.class);
assertThat(annotated).containsOnly(FirstComponent.class, FirstService.class);
assertThat(plugins).containsOnly(FirstComponent.class, ExtraPlugin.class);
assertThat(ClassIndex.getClassSummary(FirstService.class)).isNull();
assertThat(result).containsOnly(FirstComponent.class, SecondComponent.class, InnerClasses.InnerComponent.class, InnerClasses.InnerComponent.InnerInnerComponent.class);
assertThat(annotated).containsOnly(FirstComponent.class, SecondComponent.class, InnerClasses.InnerComponent.class, InnerClasses.InnerComponent.InnerInnerComponent.class);
assertThat(packageSubclasses).contains(FirstComponent.class.getCanonicalName(), Component.class.getCanonicalName());
assertThat(classes).containsOnly(ExtraPlugin.class);
assertEquals(0, id);
assertEquals(6, ImmutableSet.of(id1, id2, id3, id4, id5, id6).size());
assertEquals(expectedMetadata, actualMetadata);
assertFalse(success);
assertEquals(SERVLET_URL, view.getServletUrl());
assertTrue(downloadReportButtonMock.disabled); assertNull(presenterSpy.downloadReportCommand);
assertNotNull(newDrl); assertTrue(newDrl.contains("MyNewFile"));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericFloatDropDownEditCell);
assertEquals(String.class.getCanonicalName(), retrieved);
assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)) .as("Click point y more then header max y") .isFalse();
assertEquals(path, presenter.editorPath); assertEquals(placeRequest, presenter.editorPlaceRequest); assertNotNull(dtSelectedEvent); assertTrue(dtSelectedEvent.getPresenter().isPresent()); assertEquals(dtPresenter, dtSelectedEvent.getPresenter().get());
assertTrue("Expected: name == \\"John\\"", source.contains("$p : Person( name == \\"John\\" )")); assertTrue("Expected: name == \\"Peter\\"", source.contains("$p : Person( name == \\"Peter\\" )")); assertTrue("Expected: name not in ( \\"John\\", \\"Peter\\" )", source.contains("$p : Person( name not in ( \\"John\\", \\"Peter\\" )"));
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertNotNull(retrieved);
assertFalse(ColumnUtilities.canAcceptOtherwiseValues(column));
assertEquals(result, actualResult);
assertNull(scenarioGridColumnRenderer.internalRenderCell(null, null, null, null)); assertNull(scenarioGridColumnRenderer.internalRenderCell(scenarioGridCell, null, null, null)); assertNull(scenarioGridColumnRenderer.internalRenderCell(scenarioGridCell, null, null, null));
assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertTrue(ruleModeller.lockRHS());
assertNotNull(retrieved); assertEquals(ScenarioSimulationModel.Type.DMN, retrieved.getType()); assertEquals(dmnFilePath, retrieved.getDmnFilePath());
assertEquals(variable.getVarName(), clone.getVarName()); assertEquals(variable.getFieldType(), clone.getFieldType()); assertEquals(variable.getFactType(), clone.getFactType()); assertEquals(variable.getFactField(), clone.getFactField()); assertEquals(variable.getHeader(), clone.getHeader()); assertEquals(variable.isHideColumn(), clone.isHideColumn()); assertEquals(variable.getWidth(), clone.getWidth()); assertNotSame(variable, clone);
assertEquals(COLUMN_GROUP, subGroup);
assertNotNull(editingBoxMock);
assertTrue(isGuidedDecisionTableEditable);
assertEquals("Person fact0 = new Person();<br/>" + "fact0.setName( \\"Michael\\" );<br/>" + "insert( fact0 );", definition); assertTrue(calledBack.get());
assertEquals(expectedTableFormat, actualTableFormat);
assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder);
assertEquals(errorMessage, title);
assertEquals(this.serviceCaller, serviceCaller);
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertNotNull(result); assertEquals(-10.0, result.getTranslateX(), 0.0); assertEquals(-10.0, result.getTranslateY(), 0.0);
assertNotNull(callbackValue); assertTrue(callbackValue.isEmpty());
assertNotNull(dtLoadedPaths); assertEquals(2, dtLoadedPaths.size());
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(GuidedDecisionTableConstants.INSTANCE.BrlActions(), DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertTrue(abstractScesimGridModelSpy.getAbstractScesimModel().isPresent());
assertTrue(facts.isEmpty());
assertEquals(collectionEditorSingletonDOMElementFactoryTest, scenarioSimulationContextLocal.getCollectionEditorSingletonDOMElementFactory(GridWidget.SIMULATION));
assertTrue(service.getDependencies(null).contains(gtableDependency));
assertFalse(ruleModeller.lockRHS());
assertEquals(0, operators.size());
assertFalse(page.canSetupDefaultValue());
assertEquals(1, menus.getItems().size()); assertEquals(droolsWorkbenchEntryPoint.constants.Perspectives(), menus.getItems().get(0).getCaption());
assertTrue(synchronizer.handlesMoveColumnsTo(Collections.singletonList(md0)));
assertNotNull(plugin.getRuleModel());
assertEquals(ActionInsertFactCol52.class, builder.getSupportedColumnType());
assertEquals(Optional.of(backgroundGridPanelMock), scenarioSimulationContextLocal.getSelectedScenarioGridPanel());
assertTrue(((SettingsScenarioSimulationDropdown) assetsDropdown).isValuePresentInKieAssets(DEFAULT_VALUE));
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals(true, ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertEquals(expectedFactType, actualFactType);
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertFalse(page.canOperatorBeSet());
assertNull(scenarioGridPanelProducer.scenarioSimulationContext); assertNotNull(retrieved);
assertFalse(nestedPropertiesNamesListLocal.contains(TEST_KEY)); assertTrue(nestedPropertiesNamesListLocal.contains(TEST_PROPERTYNAME));
assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)) .as("Context menu according to column title") .isTrue();
assertFalse(handler.canCreate());
assertEquals("message", scenarioNotificationEventArgumentCaptor.getValue().getMessage()); assertEquals(NotificationEvent.NotificationType.ERROR, scenarioNotificationEventArgumentCaptor.getValue().getNotificationType()); assertFalse(scenarioNotificationEventArgumentCaptor.getValue().isAutoHide());
assertNotNull(afterRemovalCommand);
assertEquals(expectedFactField, actualFactField);
assertNotNull(JSInteropApiConverter.getImports(jsiImportsTypeMock));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertEquals( "className", classNameResult );
assertEquals(2, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(4) instanceof BooleanUiColumn); assertEquals(true, ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(4)).isEditable());
assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertTrue(handler.isExecutable(scenarioGridMock));
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertFalse(synchronizer.handlesMoveColumnsTo(new ArrayList<BaseSynchronizer.MoveColumnToMetaData>() {{ add(md0); add(md1); }}));
assertEquals(BRLActionVariableColumn.class, builder.getSupportedColumnType());
assertFalse(builder.miZoom125pct.getMenuItem().isEnabled()); assertFalse(builder.miZoom100pct.getMenuItem().isEnabled()); assertFalse(builder.miZoom75pct.getMenuItem().isEnabled()); assertFalse(builder.miZoom50pct.getMenuItem().isEnabled());
assertEquals(content, contentSupplier.get());
assertNotNull(liElement);
assertEquals(0, DecisionTableColumnViewUtils.getCurrentIndexFromList("", listBox));
assertFalse(presenter.mayClose());
assertEquals(expected, actual);
assertEquals( "false", new GuidedDecisionTableApplicationPreferencesLoader().load().get( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_DISABLED ) );
assertTrue(widgetCaptor.getValue() instanceof CheckBox);
assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridWidget());
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof IntegerUiColumn); assertEquals(true, ((BaseSingletonDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertFalse(page.isConstraintValuePredicate());
assertFalse(handler.isExecutable(scenarioGridMock));
assertFalse(validator.isConditionValid(conditionCol2));
assertNotNull( result ); assertEquals( 0.0, result.getTranslateX(), 0.0 ); assertEquals( 0.0, result.getTranslateY(), 0.0 );
assertTrue(wrapper instanceof ActionWorkItemSetWrapper);
assertEquals(expectedOperator, operator);
assertFalse(handler.isExecutable(scenarioGridMock));
assertTrue(scenarioSimulationMainGridPanelClickHandler.manageCoordinates((int) CLICK_POINT_X, (int) CLICK_POINT_Y));
assertFalse(dtPresenter.hasColumnDefinitions());
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertSame(scenarioCellTextAreaSingletonDOMElementFactorySpy, factory); assertSame(scenarioCellTextAreaSingletonDOMElementFactorySpy, factory);
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertTrue(wrapper.getActionCol52() instanceof ActionInsertFactCol52);
assertEquals( "gdst-set", type.getSuffix() );
assertEquals("dtablexls/file?clientId=123", handler.getServletUrl());
assertFalse(validator.isConditionHeaderUnique(conditionCol2));
assertFalse(page.canOperatorBeSet());
assertTrue(handler.canCreate());
assertEquals(2, patterns.size()); assertTrue(patterns.contains(new PatternWrapper("factType", "boundName", true))); assertTrue(patterns.contains(new PatternWrapper("factType", "boundName")));
assertFalse(scenarioGridWidget.selected);
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(200, column.getWidth());
assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled()); assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled()); assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled()); assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled());
assertEquals("Applicant", pattern52.getFactType()); assertEquals("app", pattern52.getBoundName()); assertEquals(false, pattern52.isNegated());
assertTrue(widget instanceof ListBox);
assertEquals(backgroundGridPanelMock, retrieved);
assertEquals( "scorecardxls/file?clientId=123", view.getServletUrl() );
assertFalse(isColumnCreationEnabled);
assertTrue("Expected: name not in ( \\"John\\", \\"\\" )", source.contains("$p : Person( name not in ( \\"John\\", \\"\\" )"));
assertThat(model.attributes).containsExactly(new RuleAttribute(Attribute.TIMER.getAttributeName(), "")); assertThat(model.metadataList).isEmpty();
assertEquals(2, diffs.size()); assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals("updated", uiModel.getColumns().get(3).getHeaderMetaData().get(1).getTitle()); assertEquals(false, uiModel.getColumns().get(3).isVisible());
assertTrue(editor.getConstraintWidget() instanceof LiteralTextBox);
assertEquals(1, result.length); assertEquals(field2, result[0]);
assertEquals(LimitedEntryActionInsertFactCol52.class, builder.getSupportedColumnType());
assertEquals(FieldAccessorsAndMutators.ACCESSOR, plugin.getAccessor());
assertEquals(scenarioSimulationEditorPresenterMock, scenarioSimulationEditorBusinessClientWrapper.getScenarioSimulationEditorPresenter());
assertNotNull(callbackValue); assertFalse(callbackValue.isEmpty()); assertTrue(callbackValue.containsKey("one")); assertTrue(callbackValue.containsKey("two"));
assertNotNull(retrieved);
assertEquals(2, diffs.size()); assertEquals(2, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(4) instanceof BooleanUiColumn); assertEquals("updated", uiModel.getColumns().get(4).getHeaderMetaData().get(1).getTitle()); assertEquals(false, uiModel.getColumns().get(4).isVisible());
assertEquals(eventBusMock, settingsPresenterSpy.eventBus);
assertTrue(ruleModeller.lockLHS());
assertEquals(INNER_TEXT, propertyEditorPresenter.getPropertyValue(TEST_PROPERTYNAME));
assertFalse(page.canSetupDefaultValue());
assertEquals(errorMessage, title);
assertFalse(synchronizer.handlesMoveColumnsTo(Collections.emptyList()));
assertEquals( "source", content.getContent() );
assertTrue(facts.size() == 1); assertEquals("Test", facts.get(0));
assertNull(ModelFieldUtil.getAvailableFieldCompletions(null, null));
assertEquals( "$p : Person( name == \\"x\\" )", definition ); assertTrue( calledBack.get() );
assertEquals( 312, content.getX() ); assertEquals( 111, content.getY() ); assertEquals( "#", content.getContent() );
assertTrue(wrapper instanceof ActionWorkItemInsertWrapper);
assertEquals(1, handlers.size()); assertTrue(handlers.get(0) instanceof DefaultGridWidgetCellSelectorMouseEventHandler);
assertNotNull(removeDocumentCommand);
assertEquals(5, model.getExpandedColumns().size()); assertEquals(1, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertEquals(3, model.getExpandedColumns().size()); assertEquals(0, model.getActionCols().size()); assertEquals(3, uiModel.getColumns().size());
assertEquals(WIDGET_VALUE, collectionEditorDOMElementSpy.getValue());
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BoundFactUiColumn); assertEquals(true, ((BaseSingletonDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertFalse(listGroupItemViewSpy.isCheckShown()); assertTrue(listGroupItemViewSpy.isCheckShown());
assertEquals(expectedWidth, actualWidth);
assertTrue(plugin.isBindable());
assertEquals("", currentField);
assertThat(widget.getFilterText()).isEqualTo(FILTER);
assertTrue(success); assertEquals(attributeName, colCaptor.getValue().getAttribute());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(3, clones.size());
assertFalse(plugin.generateColumn());
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals("updated", uiModel.getColumns().get(3).getHeaderMetaData().get(0).getTitle()); assertEquals(false, uiModel.getColumns().get(3).isVisible());
assertEquals("factType", pattern52.getFactType()); assertEquals("boundName", pattern52.getBoundName()); assertEquals(false, pattern52.isNegated()); assertEquals("entryPoint", pattern52.getEntryPointName());
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertTrue(wrapper instanceof ActionSetFactWrapper);
assertThat(event.getFilterTerm()).isEqualTo(COLUMN_ONE_TITLE); assertThat(event.isNotEqualsSearch()).isFalse();
assertEquals(scenarioSimulationBusinessCentralDocksHandlerMock, scenarioSimulationEditorBusinessClientWrapper.getScenarioSimulationDocksHandler());
assertFalse( enums.isEmpty() ); assertEquals( "Fact.field\' :", enums.get( 0 ).getRaw() );
assertEquals( "@{param1} != null, @{param2} != null", result );
assertTrue(handler.isExecutable(scenarioGridMock));
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(new ArrayList<>()), result.asString());
assertEquals(Optional.of(scenarioGridLayerMock), scenarioSimulationContextLocal.getSelectedScenarioGridLayer());
assertFalse( enums.isEmpty() ); assertEquals( "Fact.\' : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals("[" + APPLICANT_BOUND_NAME + "]", DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertNull(ExpressionUtils.ensureExpressionSyntax(null));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericIntegerDropDownEditCell);
assertTrue(presenter.mayClose());
assertFalse(((SettingsScenarioSimulationDropdown) assetsDropdown).isValuePresentInKieAssets("ANOTHER_VALUE"));
assertNotNull(retrieved);
assertEquals("Person $a = new Person();<br/>" + "$a.setName( \\"x\\" );<br/>" + "$a.setAge( \\"1\\" );<br/>" + "insert( $a );", definition); assertTrue(calledBack.get());
assertEquals(GridCellEditAction.DOUBLE_CLICK, scenarioHeaderMetaData.getSupportedEditAction());
assertEquals(factModelTupleLocal, factModelTreeHolderlocal.getFactModelTuple());
assertEquals(expectedWorkItems, actualWorkItems);
assertEquals(FULL_CLASS_NAME, retrieved);
assertEquals(content, contentSupplier.get());
assertTrue(wrapper instanceof ActionInsertFactWrapper);
assertEquals( s1, s2 );
assertEquals(1, model.getAttributeCols().size()); assertEquals(4, uiModel.getColumns().size()); assertEquals(0, model.getAttributeCols().size()); assertEquals(3, uiModel.getColumns().size());
assertEquals(expectedTitles, actualTitles);
assertFalse(page.canSetupDefaultValue());
assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test", ExpressionUtils.ensureExpressionSyntax(ConstantsHolder.MVEL_ESCAPE_SYMBOL + "Test"));
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(errorMessage, title);
assertFalse( enums.isEmpty() ); assertEquals( 1, enums.size() ); assertEquals( "Fact", enums.get( 0 ).getFactName() ); assertEquals( "field", enums.get( 0 ).getFieldName() ); assertEquals( "[\'a\', \'b\']", enums.get( 0 ).getContext() );
assertTrue(validator.isConditionHeaderNotBlank(col52));
assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)) .as("Click to expect/given body cell") .isTrue();
assertTrue("Expected: name not in ( \\"John\\" )", source.contains("$p : Person( name not in ( \\"John\\" )"));
assertSame(collectionEditorSingletonDOMElementFactoryTest, factory); assertSame(collectionEditorSingletonDOMElementFactoryTest, factory); assertSame(collectionEditorSingletonDOMElementFactoryTest, factory); assertSame(scenarioCellTextAreaSingletonDOMElementFactorySpy, factory); assertSame(scenarioExpressionCellTextAreaSingletonDOMElementFactorySpy, factory);
assertFalse(ruleModeller.lockLHS());
assertFalse(validator.isConditionValid(fakeConditionCol52("")));
assertEquals(2, plugin.getAlreadyUsedColumnHeaders().size()); assertTrue(plugin.getAlreadyUsedColumnHeaders().contains("a")); assertTrue(plugin.getAlreadyUsedColumnHeaders().contains("b"));
assertNotNull(retrieved); assertEquals(GridWidget.SIMULATION, retrieved);
assertEquals(expectedTableFormat, actualTableFormat);
assertEquals(errorMessage, title);
assertEquals(expectedConstraintValue, actualConstraintValue);
assertNotNull(retrieved); assertEquals(retrieved, scenarioSimulationViewMock);
assertEquals("modify( $p ) {<br/>" + "setName( \\"Michael\\" )<br/>" + "}", definition); assertTrue(calledBack.get());
assertFalse( callbackArgument.getValue() );
assertEquals(2, columnGroups.size()); assertEquals(actualTitle1List, expectedTitle1List); assertEquals(actualTitle2List, expectedTitle2List);
assertEquals(scoreCardEditorService, serviceCaller);
assertEquals( BOUNDS_MIN_X, b.getX(), 0.0 ); assertEquals( BOUNDS_MIN_Y, b.getY(), 0.0 ); assertEquals( BOUNDS_MAX_X - BOUNDS_MIN_X, b.getWidth(), 0.0 ); assertEquals( expectedMaxY - BOUNDS_MIN_Y, b.getHeight(), 0.0 );
assertNotNull(itemsProperties);
assertNotNull(simulationRetrieved); assertEquals(ruleSimulationMock, simulationRetrieved); assertNotNull(simulationRetrieved); assertEquals(dmnSimulationMock, simulationRetrieved);
assertNotNull(retrieved); assertTrue(retrieved.isEmpty()); assertNotNull(retrieved); assertEquals(2, retrieved.size());
assertNotNull(retrieved);
assertNotNull(result); assertNotNull(globalsModelArgumentCaptor.getValue()); assertEquals(1, globalsModel.getGlobals().size()); assertEquals("list", globalsModel.getGlobals().get(0).getAlias()); assertEquals("java.util.List", globalsModel.getGlobals().get(0).getClassName());
assertEquals(Optional.of(scenarioGridModelMock), scenarioSimulationContextLocal.getSelectedScenarioGridModel());
assertNotNull(JSInteropApiConverter.getExpressionIdentifier(jsiExpressionIdentifierTypeMock));
assertEquals(GuidedDecisionTable52.RULE_NAME_COLUMN_INDEX, ruleNameBuilder.getColumn());
assertEquals(clickHandlerMock, scenarioGridPanelSpy.clickHandler); assertEquals(scenarioSimulationGridPanelMouseMoveHandlerMock, scenarioGridPanelSpy.mouseMoveHandler);
assertNotNull(result); assertEquals(1, result.getMessages().size()); assertTrue(result.getMessages().get(0).getMessage().startsWith("Created Guided Decision Table \'Weather"));
assertFalse(handler.isExecutable(scenarioGridMock));
assertThat(model.attributes).isEmpty(); assertThat(model.metadataList).containsExactly(new RuleMetadata(metadata, ""));
assertEquals(errorMessage, title);
assertFalse(page.canSetupLimitedValue());
assertFalse(fieldListDescription.hidden); assertTrue(predicateFieldDescription.hidden);
assertNotNull(limitedValueWidget);
assertNotNull(newDrl); assertTrue(newDrl.contains("MyNewFile"));
assertEquals(modellerView, presenter.getModellerView());
assertFalse( enums.isEmpty() ); assertEquals( 1, enums.size() ); assertEquals( "Fact", enums.get( 0 ).getFactName() ); assertEquals( "field", enums.get( 0 ).getFieldName() ); assertEquals( "[\'a\', \'b\']", enums.get( 0 ).getContext() );
assertEquals(settingsPresenterMock, settingsViewSpy.presenter);
assertEquals(path, scenarioSimulationEditorKogitoWrapperSpy.getCurrentPath());
assertNotNull(enums); assertEquals(1, enums.size()); assertNotNull(enumRow); assertEquals("Fact", enumRow.getFactName()); assertEquals("field", enumRow.getFieldName()); assertEquals("[\'a\', \'b\']", enumRow.getContext());
assertEquals( "$p : Person( name == \\"Michael\\" )", definition ); assertTrue( calledBack.get() );
assertEquals(ScenarioSimulationEditorConstants.INSTANCE.backgroundTabTitle(), pageCaptor.getValue().getLabel());
assertFalse(success);
assertTrue(instancePropertiesMapLocal.containsKey(TEST_KEY)); assertEquals(instancePropertiesMapLocal.get(TEST_KEY), propertyMapLocal);
assertTrue(success);
assertEquals("modify( $p ) {<br/>" + "setName( \\"x\\" )<br/>" + "}", definition); assertTrue(calledBack.get());
assertNotNull(retrieved); assertEquals(1, retrieved.size());
assertEquals(1, model.getMetadataCols().size()); assertEquals("smurf", model.getMetadataCols().get(0).getMetadata()); assertEquals(4, uiModel.getColumns().size()); assertEquals("smurf", uiModel.getColumns().get(3).getHeaderMetaData().get(0).getTitle());
assertTrue(handler.canCreate());
assertTrue(validator.isConditionHeaderUnique(conditionCol2));
assertEquals(TITLE, abstractScenarioSimulationEditorKogitoScreenSpy.getTitleText() );
assertEquals(okPreserveCommandMock, ((PreserveDeletePopupView)popupView).okPreserveCommand);
assertFalse(page.hasFactField());
assertEquals(expectedDefinitionElements, actualDefinitionElements);
assertSame(settingsViewMock, optional.get());
assertEquals(1, patterns.size()); assertTrue(patterns.contains(new PatternWrapper("FactType", "$fact", false)));
assertEquals( "false", new GuidedDecisionTableApplicationPreferencesLoader().load().get( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_DISABLED ) );
assertEquals( expectedMinX, b.getX(), 0.0 ); assertEquals( BOUNDS_MIN_Y, b.getY(), 0.0 ); assertEquals( BOUNDS_MAX_X - expectedMinX, b.getWidth(), 0.0 ); assertEquals( BOUNDS_MAX_Y - BOUNDS_MIN_Y, b.getHeight(), 0.0 );
assertEquals( "field1 == \\"@{param1}\\", field2 == \\"@{param2}\\"", result );
assertEquals(expectedCheckBox, actualCheckBox);
assertEquals(value.getCurrentElement(), currentResult);
assertEquals(expectedFactField, actualFactField);
assertEquals(Optional.of(scenarioGridWidgetSpy), scenarioSimulationContextLocal.getSelectedScenarioGridWidget());
assertNotNull(JSInteropApiConverter.getFactIdentifier(jsiFactIdentifierTypeMock));
assertNotNull(retrieved);
assertEquals(scenarioGridPanelMock, retrieved);
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals( LimitedEntryConditionCol52.class, builder.getSupportedColumnType() );
assertTrue(validator.isConditionValid(conditionCol2));
assertFalse(plugin.generateColumn());
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertEquals(1, DecisionTableColumnViewUtils.getCurrentIndexFromList(FIRST_OPTION, listBox));
assertEquals(factType, factPattern.getFactType()); assertEquals(boundName, factPattern.getBoundName());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertTrue(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(FACT_TYPE_APPLICANT + " [" + APPLICANT_BOUND_NAME + "]", DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertFalse(presenterSpy.isDirty());
assertFalse( enums.isEmpty() ); assertEquals( ".field\' : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertFalse(page.isNegatedPatternEnabled());
assertFalse( type.accept( path ) );
assertEquals(2, sourceTypeSelector.radioButtonList.size());
assertTrue(handler.isExecutable(scenarioGridMock));
assertNotNull(propertyEditorPresenter.getSimpleProperties(ITEM_ID));
assertEquals("Person( name == \\"x\\" )<br/>" + "Smurf( colour == \\"x\\" )", definition); assertTrue(calledBack.get());
assertSame(cheatSheetViewMock, optional.get());
assertEquals(5, model.getExpandedColumns().size()); assertEquals(1, model.getConditions().size()); assertEquals(5, uiModel.getColumns().size()); assertEquals(3, model.getExpandedColumns().size()); assertEquals(0, model.getConditions().size()); assertEquals(3, uiModel.getColumns().size());
assertEquals(dmnFiles, dropDownListCaptor.getValue().stream().map(KieAssetsDropdownItem::getValue).collect(Collectors.toList()));
assertEquals(content, contentSupplier.get());
assertEquals(expectedHeight, actualHeight);
assertTrue(handler.isExecutable(scenarioGridMock));
assertEquals(2, DecisionTableColumnViewUtils.getCurrentIndexFromListWithoutDefaultSelect(SECOND_OPTION, listBox));
assertEquals( ConditionCol52.class, builder.getSupportedColumnType() );
assertTrue(widget instanceof TextBox);
assertFalse(validator.isConditionHeaderNotBlank(col52));
assertFalse( enums.isEmpty() ); assertEquals( "field\' : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertEquals( "retract( x );", definition ); assertTrue( calledBack.get() );
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(1, plugin.getPages().size());
assertEquals(errorMessage, title);
assertEquals(scenarioCellTextAreaSingletonDOMElementFactorySpy, scenarioSimulationContextLocal.getScenarioCellTextAreaSingletonDOMElementFactory(GridWidget.SIMULATION));
assertTrue(synchronizer.handlesMoveColumnsTo(Collections.singletonList(md0)));
assertNotNull( commentedOption ); assertEquals( "user", commentedOption.getName() ); assertEquals( "123", commentedOption.getSessionId() );
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericDoubleDropDownEditCell);
assertEquals(expectedTableFormat, actualTableFormat);
assertNotNull(retireved); assertTrue(propertyViewMapLocal.containsKey(ITEM_ID)); assertTrue(propertyViewMapLocal.get(ITEM_ID).contains(propertyViewMock));
assertEquals(3, patterns.size());
assertEquals(type, item.getType()); assertEquals(widget, item.getContent());
assertFalse(propertySpanElementMapLocal.containsKey(TEST_PROPERTYNAME)); assertFalse(propertyViewMapLocal.containsKey(ITEM_ID));
assertEquals(expected, result);
assertFalse(plugin.generateColumn());
assertEquals(expectedCommand, actualCommand);
assertFalse(fieldBindingWarning.hidden);
assertEquals(0, DecisionTableColumnViewUtils.getCurrentIndexFromList(null, listBox));
assertEquals(expectedFactTypes, factTypes);
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericShortDropDownEditCell);
assertTrue(scenarioGridSpy.isInstanceAssigned(FactIdentifier.DESCRIPTION)); assertFalse(scenarioGridSpy.isInstanceAssigned(FactIdentifier.INDEX)); assertFalse(scenarioGridSpy.isInstanceAssigned(FactIdentifier.EMPTY)); assertTrue(scenarioGridSpy.isInstanceAssigned(factIdentifierGiven));
assertTrue(businessCentralDmoDataManagementStrategySpy.skipPopulateTestTools());
assertEquals(errorMessage, title);
assertFalse(plugin.generateColumn());
assertTrue(hasEditableColumns);
assertEquals(expectedResult, resultMap);
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertThat(model.attributes).containsExactly(new RuleAttribute(Attribute.CALENDARS.getAttributeName(), "")); assertThat(model.metadataList).isEmpty();
assertFalse(handler.isExecutable(scenarioGridMock));
assertEquals(Optional.of(backgroundGridWidgetSpy), scenarioSimulationContextLocal.getSelectedScenarioGridWidget());
assertFalse(handler.perform(scenarioGridMock, false, false));
assertNull(scenarioSimulationEditorBusinessClientWrapper.lastRunResult); assertEquals(simulationRunResultMock, scenarioSimulationEditorBusinessClientWrapper.lastRunResult);
assertEquals(2, model.getData().size()); assertEquals(2, uiModel.getRowCount()); assertEquals(GuidedDecisionTableView.ROW_HEIGHT, uiModel.getRow(0).getHeight(), 0.0); assertEquals(GuidedDecisionTableView.ROW_HEIGHT, uiModel.getRow(1).getHeight(), 0.0);
assertEquals(expectedElements, actualElements);
assertNotNull( commentedOption ); assertEquals( "user", commentedOption.getName() ); assertEquals( "123", commentedOption.getSessionId() );
assertEquals( 350, content.getX() ); assertEquals( 111, content.getY() ); assertEquals( "description", content.getContent() );
assertEquals(subGroup, COLUMN_GROUP + "-0"); assertEquals(subGroup2, COLUMN_GROUP + "-1");
assertNotNull(listBox);
assertTrue(instancePropertiesMapLocal.containsKey(TEST_KEY + "#key")); assertEquals(instancePropertiesMapLocal.get(TEST_KEY + "#key"), keyPropertyMapLocal); assertTrue(instancePropertiesMapLocal.containsKey(TEST_KEY + "#value")); assertEquals(instancePropertiesMapLocal.get(TEST_KEY + "#value"), propertyMapLocal);
assertFalse(ScenarioSimulationUtils.isSimpleJavaType("com.TestBean"));
assertTrue(source.contains("$p : Person( $age : age == ( 1 + 1 ) )"));
assertEquals(patternWrapper, plugin.patternWrapper());
assertEquals(verticalPanel, presenter.getAttributeWidget()); assertEquals(verticalPanel, presenter.getMetaDataWidget()); assertEquals(verticalPanel, presenter.getConditionsWidget()); assertEquals(verticalPanel, presenter.getActionsWidget());
assertNotNull(item); assertEquals(fullPath, item.getValue()); assertEquals(fullPath, item.getSubText()); assertEquals(fileName, item.getText());
assertNotNull(dtSelectedEvent); assertTrue(dtSelectedEvent.getPresenter().isPresent()); assertEquals(dtPresenter, dtSelectedEvent.getPresenter().get());
assertEquals(scenarioGridModelMock, scenarioSimulationContextLocal.getAbstractScesimGridModelByGridWidget(GridWidget.SIMULATION)); assertEquals(backgroundGridModelMock, scenarioSimulationContextLocal.getAbstractScesimGridModelByGridWidget(GridWidget.BACKGROUND));
assertThat(result).as("Nor Instance nor Property assigned").isFalse();
assertEquals( "@{param1} != null", result );
assertTrue(synchronizer.handlesMoveColumnsTo(Collections.singletonList(md0)));
assertEquals(uiModel1, uiModelCaptor.getValue()); assertEquals(uiModel2, uiModelCaptor.getValue());
assertNotNull(newDrl); assertTrue(newDrl.contains("MyNewFile"));
assertEquals(ScenarioSimulationEditorConstants.INSTANCE.insertExpression(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.insertValue(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.dateFormatPlaceholder(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.dmnDateFormatPlaceholder(), placeholder);
assertTrue(scenarioGridWidget.selected);
assertEquals(expectedAccessor, actualAccessor);
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertFalse(elementViewListLocal.contains(elementView1Mock));
assertEquals("factField", currentField);
assertTrue(new ModelMetaDataEnhancer(model).getHeaderMetaData() .isEmpty());
assertEquals( "retract( $a );", definition ); assertTrue( calledBack.get() );
assertEquals(-1, DecisionTableColumnViewUtils.getCurrentIndexFromListWithoutDefaultSelect("", listBox));
assertEquals( "scorecardxls/file?clientId=123&attachmentPath=", view.getDownloadUrl( path() ) );
assertNull(presenterSpy.downloadReportCommand); assertTrue(downloadReportButtonMock.disabled);
assertEquals(3, row.size()); assertEquals(rowNumber, row.get(GuidedDecisionTable52.RULE_NUMBER_INDEX)); assertEquals(description, row.get(GuidedDecisionTable52.RULE_DESCRIPTION_INDEX));
assertFalse(plugin.isBindable());
assertNull(toBeRemoved.getRawValue());
assertFalse(page.canSetupDefaultValue());
assertEquals(eventBusMock, scenarioSimulationEventHandler.eventBus);
assertEquals(3, pages.size());
assertNotNull(testResultMessages); assertEquals(1, testResultMessages.size());
assertNotNull(result); assertEquals(1, result.size()); assertEquals("file1", result.get(0).getFileName()); assertEquals("file1Url", result.get(0).toURI());
assertEquals(workItemKey, plugin.getWorkItem());
assertTrue(pages.stream().anyMatch(a -> a instanceof CalculationTypePage)); assertEquals(6, pages.size());
assertFalse(pages.stream().anyMatch(a -> a instanceof CalculationTypePage)); assertEquals(5, pages.size());
assertEquals(0, ModelFieldUtil.getAvailableFieldCompletions(new ModelField[]{}, null).length);
assertFalse(page.canSetupLimitedValue());
assertTrue(service.removeFromPomIfNecessary(dependencies, toRemove)); assertFalse(service.removeFromPomIfNecessary(dependencies, toRemove)); assertTrue(service.removeFromPomIfNecessary(dependencies, toRemove)); assertFalse(service.removeFromPomIfNecessary(dependencies, toRemove));
assertTrue(isColumnCreationEnabled);
assertEquals(uiRow2, uiModel.getRow(0)); assertEquals(uiRow0, uiModel.getRow(1)); assertEquals(uiRow1, uiModel.getRow(2)); assertEquals(row2, model.getData().get(0)); assertEquals(row0, model.getData().get(1)); assertEquals(row1, model.getData().get(2));
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertNotNull( result ); assertEquals( 1000.0, result.getTranslateX(), 0.0 ); assertEquals( 0.0, result.getTranslateY(), 0.0 );
assertEquals("scorecardxls/file?clientId=123", handler.getServletUrl());
assertEquals(1, plugin.getPages().size());
assertEquals(2, DecisionTableColumnViewUtils.getCurrentIndexFromList(SECOND_OPTION, listBox));
assertEquals(scenarioContextMenuRegistryMock, scenarioGridPanelProducer.getScenarioContextMenuRegistry());
assertFalse( helper.supports( source ) );
assertNotNull(person); assertTrue(person.getExpandableProperties().containsKey("parent")); assertEquals("tPerson", person.getExpandableProperties().get("parent")); assertTrue(hiddenFacts.containsKey("tPerson")); assertNotNull(personCollection); assertTrue(personCollection.getGenericTypesMap().containsKey(VALUE)); assertEquals("tPerson", personCollection.getGenericTypeInfo(VALUE).get(0)); assertTrue(hiddenFacts.containsKey("tPerson")); assertTrue(hiddenFacts.containsKey("tPersonList"));
assertTrue(widget instanceof ListBox);
assertEquals(2, diffs.size()); assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BoundFactUiColumn); assertEquals("updated", uiModel.getColumns().get(3).getHeaderMetaData().get(0).getTitle()); assertEquals(false, uiModel.getColumns().get(3).isVisible());
assertNotNull(backgroundRetrieved); assertEquals(ruleBackgroundMock, backgroundRetrieved); assertNotNull(backgroundRetrieved); assertEquals(dmnBackgroundMock, backgroundRetrieved);
assertEquals(errorMessage, title);
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericLongDropDownEditCell);
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertEquals("$p.setName( \\"x\\" );", definition); assertTrue(calledBack.get());
assertEquals(expectedLHSBoundFacts, lhsBoundFacts);
assertNotNull(retrieved); assertEquals(0, retrieved.getMinRowIndex()); assertEquals(3, retrieved.getMaxRowIndex());
assertFalse(handler.isExecutable(scenarioGridMock));
assertNotNull(retrieved);
assertTrue(handler.canCreate());
assertEquals(expectedWidget, actualWidget);
assertTrue( helper.supports( path ) );
assertTrue(plugin.isFieldBindingValid());
assertFalse(result.wasSuccessful()); assertEquals(1, failures.size()); assertEquals(2, failureDetails.size()); assertEquals("Test", failures.get(0).getMessage()); assertEquals(path, failures.get(0).getPath());
assertEquals(1, result.length); assertEquals(field1, result[0]);
assertTrue(handler.isExecutable(scenarioGridMock));
assertEquals( "", type.getPrefix() );
assertEquals(FACT_TYPE_APPLICANT + " [" + APPLICANT_BOUND_NAME + "]", DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertEquals(metaData, plugin.getMetaData());
assertTrue(synchronizer.handlesMoveColumnsTo(Collections.singletonList(md0)));
assertEquals(1, model.getConditions().size()); assertEquals(1, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(4) instanceof IntegerUiColumn); assertEquals(true, ((BaseSingletonDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertEquals(-1, DecisionTableColumnViewUtils.getCurrentIndexFromListWithoutDefaultSelect(null, listBox));
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertEquals(0, model.getActionCols().size()); assertEquals(3, uiModel.getColumns().size());
assertTrue(page.hasFactField());
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertFalse(synchronizer.handlesMoveColumnsTo(new ArrayList<BaseSynchronizer.MoveColumnToMetaData>() {{ add(md0); add(md1); }}));
assertNotNull(plugin.editingCol());
assertEquals(1, headerMetaData.size()); assertEquals(pattern52, headerMetaData.getPatternsByColumnNumber(0).getPattern()); assertEquals(PatternType.LHS, headerMetaData.getPatternsByColumnNumber(0).getPatternType());
assertTrue(page.isParametersEnabled());
assertEquals(1, model.getConditions().size()); assertEquals(4, uiModel.getColumns().size()); assertEquals(0, model.getConditions().size()); assertEquals(3, uiModel.getColumns().size());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals( LimitedEntryActionRetractFactCol52.class, builder.getSupportedColumnType() );
assertEquals(1, DecisionTableColumnViewUtils.getCurrentIndexFromListWithoutDefaultSelect(FIRST_OPTION, listBox));
assertFalse( enums.isEmpty() ); assertEquals( "Fact\' : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertEquals(0, DecisionTableColumnViewUtils.getCurrentIndexFromList(PLEASE_CHOOSE, listBox));
assertNotNull(retrieved);
assertEquals(errorMessage, title);
assertFalse(model.getRuleNameColumn().isHideColumn()); assertTrue(model.getRuleNameColumn().isHideColumn());
assertEquals(((SettingsScenarioSimulationDropdown) assetsDropdown).currentValue, LOWER_CASE_VALUE);
assertTrue(dmnTypesMap.size() == 15); assertNotNull(dmnTypesMap.get(TYPE_NAME)); assertNull(dmnTypesMap.get(TYPE_NAME).getFeelType()); assertEquals(TYPE_NAME, dmnTypesMap.get(TYPE_NAME).getName()); assertEquals(NAMESPACE, dmnTypesMap.get(TYPE_NAME).getNamespace()); assertFalse(dmnTypesMap.get(TYPE_NAME).isCollection());
assertEquals("", contentSupplier.get());
assertEquals(2, diffs.size()); assertEquals(2, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(4) instanceof BooleanUiColumn); assertEquals("updated", uiModel.getColumns().get(4).getHeaderMetaData().get(1).getTitle()); assertEquals(false, uiModel.getColumns().get(4).isVisible());
assertEquals(modeller, presenter.getModeller());
assertTrue(operators.contains("in")); assertTrue(operators.contains("not in")); assertEquals(2, operators.size());
assertEquals(FACT_TYPE_APPLICANT + " [" + APPLICANT_BOUND_NAME + "]", DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertNotNull(modelCaptor.getValue()); assertEquals(dtPresenter.getModel(), modelCaptor.getValue());
assertTrue(gridColumn instanceof StringUiColumn);
assertEquals(FILE_CONTENTS, fileUploadPopupPresenter.getFileContents());
assertEquals("binding : factField", currentField);
assertSame(kogitoEditorDockSpy.activeHandler, handler); assertTrue(kogitoEditorDockSpy.activeDocks.length == 2);
assertTrue( metaDataColumnConverter.handles( new MetadataCol52() ) ); assertFalse( metaDataColumnConverter.handles( new MetaDataColumnConverterCantTouchThisBreakItDownStopHammerTime() ) );
assertTrue(fieldBindingWarning.hidden);
assertEquals(GuidedDecisionTableConstants.INSTANCE.negatedPattern() + " " + FACT_TYPE_APPLICANT, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertEquals(ActionType.Code.NAME, ruleNameBuilder.getActionTypeCode());
assertEquals(2, patterns.size()); assertTrue(patterns.contains(new PatternWrapper("factType", "boundName", true))); assertTrue(patterns.contains(new PatternWrapper("factType", "boundName")));
assertFalse(plugin.isBindable());
assertFalse(synchronizer.handlesMoveColumnsTo(Arrays.asList(md0, md1)));
assertEquals(1, patternsCaptor.getValue().size()); assertEquals(pattern, patternsCaptor.getValue().get(0));
assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test", ExpressionUtils.ensureExpressionSyntax(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test"));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertNotNull(modelCaptor.getValue()); assertEquals(dtPresenter.getModel(), modelCaptor.getValue()); assertNotNull(metadataCaptor.getValue()); assertEquals(dtPresenter.getOverview().getMetadata(), metadataCaptor.getValue());
assertEquals(0, errorHolder.getMultipleNestedObject().size()); assertEquals(1, errorHolder.getMultipleNestedCollection().size()); assertTrue(errorHolder.getMultipleNestedCollection().contains("fieldName.phoneNumbers.numbers"));
assertEquals(1, messages.size()); assertTrue("Expected error about missing import", messages.get(0).getText().contains("Error: could not resolve class: MyCustomDataType"));
assertFalse(page.canSetupDefaultValue());
assertTrue( callbackArgument.getValue() );
assertTrue(predicateBindingInfo.hidden);
assertFalse(bindingContainer.hidden);
assertEquals(expectedMetadata, actualMetadata);
assertEquals( "setField( @{param1} )", result );
assertEquals(1, model.getData().size()); assertEquals(1, uiModel.getRowCount()); assertEquals(GuidedDecisionTableView.ROW_HEIGHT, uiModel.getRow(0).getHeight(), 0.0);
assertEquals(1, content.size()); assertEquals(model, firstContent.getModel()); assertEquals(overview, firstContent.getOverview()); assertEquals(currentPath, firstContent.getCurrentPath()); assertEquals(latestPath, firstContent.getLatestPath());
assertEquals(presenter, page.presenter());
assertNotNull(handler);
assertEquals(2, model.getActionCols().size()); assertEquals(5, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(4) instanceof BooleanUiColumn); assertEquals(true, ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(4)).isEditable());
assertNull(model.getSimulation()); assertNull(model.getBackground()); assertNull(model.getSettings()); assertNotNull(returnPath); assertNotNull(model.getSimulation()); assertNotNull(model.getBackground()); assertNotNull(model.getSettings());
assertNotNull(keyValueContainer); assertTrue(elementViewListLocal.contains(elementView1Mock));
assertTrue(plugin.isFieldBindingValid());
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertTrue(ColumnUtilities.canAcceptOtherwiseValues(column));
assertNotNull(result); assertEquals(-5.0, result.getTranslateX(), 0.0); assertEquals(-5.0, result.getTranslateY(), 0.0);
assertEquals(collectionEditorPresenterSpy.collectionView, collectionViewMock);
assertThat(event.getFilterTerm()).isEqualTo(COLUMN_ONE_TITLE + ";" + COLUMN_TWO_TITLE + ";" + MULTIPART_VALUE); assertThat(event.isNotEqualsSearch()).isTrue();
assertTrue(IntStream.range(0, abstractScesimGridModelSpy.getRowCount()) .allMatch(i -> abstractScesimGridModelSpy.getCell(i, COLUMN_INDEX).getValue().equals(abstractScesimGridModelSpy.getCell(i, COLUMN_INDEX).getValue())));
assertEquals(GuidedDecisionTableConstants.INSTANCE.ExecuteWorkItemActions(), DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertFalse(handler.perform(scenarioGridMock, false, false));
assertFalse(builder.miCut.getMenuItem().isEnabled()); assertFalse(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertTrue(editor.getConstraintWidget() instanceof LiteralTextBox);
assertSame(presenterSpy.downloadReportCommand, downloadReportCommandMock); assertFalse(downloadReportButtonMock.disabled);
assertEquals(2, capturedValue.size()); assertEquals(1, capturedValue.stream().filter(elem -> elem.getIndex() == (requestedIndex + 1)).count());
assertFalse( enums.isEmpty() ); assertEquals( 1, enums.size() ); assertEquals( "Fact", enums.get( 0 ).getFactName() ); assertEquals( "field", enums.get( 0 ).getFieldName() ); assertEquals( "[\'a\', \'b\']", enums.get( 0 ).getContext() );
assertFalse(synchronizer.handlesMoveColumnsTo(Collections.emptyList()));
assertEquals(0, DecisionTableColumnViewUtils.getCurrentIndexFromListWithoutDefaultSelect(PLEASE_CHOOSE, listBox));
assertNotNull(JSInteropApiConverter.getSettings(jsiSettingsTypeMock));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertEquals(expectedAction, actualAction);
assertEquals( 400, content.getX() ); assertEquals( 148, content.getY() ); assertEquals( "description", content.getContent() );
assertEquals(expectedEntryPoint, actualEntryPoint);
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test", ExpressionUtils.ensureExpressionSyntax("Test"));
assertNotNull(modelCaptor.getValue()); assertEquals(dtPresenter.getModel(), modelCaptor.getValue());
assertNotNull(propertyEditorPresenter.updateProperties(ITEM_ID));
assertEquals( BOUNDS_MIN_X, b.getX(), 0.0 ); assertEquals( BOUNDS_MIN_Y, b.getY(), 0.0 ); assertEquals( expectedMaxX - BOUNDS_MIN_X, b.getWidth(), 0.0 ); assertEquals( BOUNDS_MAX_Y - BOUNDS_MIN_Y, b.getHeight(), 0.0 );
assertNotNull(afterRemovalCommand);
assertEquals(errorMessage, title);
assertEquals(LimitedEntryActionSetFieldCol52.class, builder.getSupportedColumnType());
assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertFalse(plugin.generateColumn());
assertEquals("path/file.dmn", scenarioSimulationCreationPopupViewSpy.selectedPath);
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertNotNull(retrieved); assertEquals(FACT_NAME, retrieved.getFactName()); assertEquals(FULL_PACKAGE, retrieved.getFullPackage()); assertFalse(retrieved.getSimpleProperties().isEmpty()); assertFalse(entry.getValue().getBaseTypeName().isPresent()); assertEquals(entry.getValue().getTypeName(), entry.getValue().getPropertyTypeNameToVisualize());
assertEquals(workItem1, workItem);
assertEquals(errorMessage, title);
assertNotNull(command);
assertFalse(workItemSet);
assertTrue(widgetCaptor.getValue() instanceof CheckBox);
assertTrue(result);
assertTrue(resultMap.isEmpty());
assertEquals(errorMessage, title);
assertNotNull(ruleModeller); assertEquals(brlActionPlugin.getRuleModel(), ruleModeller.getModel()); assertEquals(Collections.singletonList(ruleModellerActionPlugin), ruleModeller.getActionPlugins()); assertEquals(presenter.getDataModelOracle(), ruleModeller.getDataModelOracle()); assertTrue(ruleModeller.getWidgetFactory() instanceof TemplateModellerWidgetFactory); assertFalse(ruleModeller.isReadOnly());
assertTrue(handler.isExecutable(scenarioGridMock));
assertTrue(superTypesMap.containsKey(factType)); assertEquals(Object.class.getCanonicalName(), superTypesMap.get(factType)); assertTrue(superTypesMap.containsKey(factType2)); assertEquals(Class.class.getCanonicalName(), superTypesMap.get(factType2));
assertTrue("Click to readonly header cell.", scenarioSimulationMainGridPanelClickHandler.manageCoordinates((int) CLICK_POINT_X, (int) CLICK_POINT_Y));
assertNotNull(settingsRetrieved); assertEquals(ruleSettingsMock, settingsRetrieved); assertNotNull(settingsRetrieved); assertEquals(dmnSettingsMock, settingsRetrieved);
assertEquals(1, model.getMetadataCols().size()); assertEquals(4, uiModel.getColumns().size()); assertEquals(0, model.getMetadataCols().size()); assertEquals(3, uiModel.getColumns().size());
assertEquals(ScenarioSimulationModel.Type.RULE, scenarioSimulationCreationPopupViewSpy.getSelectedType());
assertTrue( helper.supports( source ) );
assertTrue(widgetCaptor.getValue() instanceof CheckBox);
assertEquals(expectedItem, item);
assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridPanel());
assertEquals(errorMessage, title);
assertNotNull( result ); assertEquals( 0.0, result.getTranslateX(), 0.0 ); assertEquals( 1000.0, result.getTranslateY(), 0.0 );
assertThat(model.attributes).isEmpty(); assertThat(model.metadataList).containsExactly(new RuleMetadata(RuleAttributeWidget.LOCK_LHS, "true"));
assertNotNull(report); assertFalse(report.isEmpty()); assertTrue(report.contains("DECISION")); assertFalse(report.contains("RULE")); assertEquals(7 + auditLog.getAuditLogLines().size(), reportLine.length); assertNotNull(reportLine[i]);
assertEquals(errorMessage, title);
assertEquals(1, errorHolder.getMultipleNestedObject().size()); assertEquals(0, errorHolder.getMultipleNestedCollection().size()); assertTrue(errorHolder.getMultipleNestedObject().contains("fieldName.phoneNumbers.complexNumbers"));
assertNotNull(placeRequest); assertEquals("identifier", placeRequest.getIdentifier()); assertNotNull(placeRequest.getParameter(SCESIMEDITOR_ID, ""));
assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.defineValidType(), placeholder);
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(200, column.getWidth());
assertFalse(synchronizer.handlesMoveColumnsTo(Collections.emptyList()));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertEquals(expectedHeader, actualHeader);
assertEquals(BaseSingleFieldConstraint.TYPE_UNDEFINED, plugin.constraintValue());
assertEquals(enumServiceCaller, serviceCaller);
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertNotNull(retrieved); assertEquals(FactMapping.getInstancePlaceHolder(3), retrieved.getKey()); assertEquals(FactMapping.getPropertyPlaceHolder(3), retrieved.getValue());
assertEquals(3, result.length); assertEquals("GIVEN,GIVEN", result[0]); assertEquals(instanceName + 1 + "," + instanceName + 2, result[1]); assertEquals(propertyName + 1 + "," + propertyName + 2, result[2]);
assertEquals(TAB_INDEX, collectionEditorDOMElementSpy.getTabIndex());
assertFalse(handler.perform(scenarioGridMock, false, false));
assertEquals(scenarioSimulationContextLocal.getTestToolsPresenter(), testToolsPresenterMock);
assertEquals(4, plugin.getPages().size());
assertFalse(synchronizer.handlesMoveColumnsTo(new ArrayList<BaseSynchronizer.MoveColumnToMetaData>() {{ add(md0); add(md1); }}));
assertFalse(page.hasFactField());
assertEquals(BRLConditionVariableColumn.class, builder.getSupportedColumnType());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertFalse(validator.isConditionHeaderNotBlank(col52));
assertEquals( BOUNDS_MIN_X, b.getX(), 0.0 ); assertEquals( BOUNDS_MIN_Y, b.getY(), 0.0 ); assertEquals( BOUNDS_MAX_X - BOUNDS_MIN_X, b.getWidth(), 0.0 ); assertEquals( BOUNDS_MAX_Y - BOUNDS_MIN_Y, b.getHeight(), 0.0 );
assertNotNull(item); assertEquals(fullPath, item.getValue()); assertEquals(fullPath, item.getSubText()); assertEquals(fileName, item.getText());
assertEquals(content, contentSupplier.get());
assertFalse( enums.isEmpty() ); assertEquals( "\'Fact.field : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertThat(result).as("Instance Assigned and selected").isTrue();
assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX, ExpressionUtils.ensureExpressionSyntax(""));
assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled()); assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled()); assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled()); assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled());
assertEquals("file.scesim", pathArgumentCaptor.getValue().getFileName()); assertEquals("path/", pathArgumentCaptor.getValue().toURI());
assertEquals( BOUNDS_MIN_X, b.getX(), 0.0 ); assertEquals( expectedMinY, b.getY(), 0.0 ); assertEquals( BOUNDS_MAX_X - BOUNDS_MIN_X, b.getWidth(), 0.0 ); assertEquals( BOUNDS_MAX_Y - expectedMinY, b.getHeight(), 0.0 );
assertEquals(scenarioSimulationEditorPresenterMock, scenarioSimulationEditorKogitoWrapperSpy.getScenarioSimulationEditorPresenter());
assertTrue(baseMenu.isDisabled(elementMock)); assertFalse(baseMenu.isDisabled(elementMock));
assertEquals(1, model.getActionCols().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals(true, ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertTrue("Expected: name not in ( \\"\\" )", source.contains("$p : Person( name not in ( \\"\\" )"));
assertEquals(Optional.of(scenarioGridPanelMock), scenarioSimulationContextLocal.getSelectedScenarioGridPanel());
assertEquals("Person fact0 = new Person();<br/>" + "fact0.setName( \\"x\\" );<br/>" + "insert( fact0 );", definition); assertTrue(calledBack.get());
assertFalse(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(50.0, column.getWidth(), 0.0);
assertNotNull(scenario.getFactMappingValue(test1.getFactIdentifier(), test1.getExpressionIdentifier()).get().getRawValue()); assertNull(scenario.getFactMappingValue(test2.getFactIdentifier(), test2.getExpressionIdentifier()).get().getRawValue());
assertEquals(patternWrapper.getFactType(), "FactType"); assertEquals(patternWrapper.getBoundName(), "BoundName"); assertEquals(patternWrapper.getEntryPointName(), "EntryPointName"); assertEquals(patternWrapper.isNegated(), true);
assertFalse(predicateBindingInfo.hidden);
assertEquals(0, operators.size());
assertEquals(GuidedDecisionTableConstants.INSTANCE.BrlConditions(), DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertNotNull(callbackValue); assertFalse(callbackValue.isEmpty()); assertTrue(callbackValue.containsKey("1")); assertTrue(callbackValue.containsKey("2")); assertEquals("one", callbackValue.get("1")); assertEquals("two", callbackValue.get("2"));
assertEquals(0, errorHolder.getMultipleNestedObject().size()); assertEquals(0, errorHolder.getMultipleNestedCollection().size());
assertEquals(Optional.of(backgroundGridModelMock), scenarioSimulationContextLocal.getSelectedScenarioGridModel());
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertFalse(page.canSetupCepOperators());
assertThat(model.attributes).isEmpty(); assertThat(model.metadataList).containsExactly(new RuleMetadata(RuleAttributeWidget.LOCK_RHS, "true"));
assertEquals(expectedFactType, factType);
assertEquals(errorMessage, title);
assertTrue(editor.getConstraintWidget() instanceof LiteralTextBox);
assertEquals(expectedHashcode, actualHashcode);
assertNotNull(retrieved); assertFalse(retrieved.getScesimModelDescriptor().getUnmodifiableFactMappings().stream() .anyMatch(elem -> OTHER.equals(elem.getExpressionIdentifier().getType()))); assertTrue(retrieved.getScesimModelDescriptor().getUnmodifiableFactMappings().stream() .allMatch(elem -> GIVEN.equals(elem.getExpressionIdentifier().getType())));
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericByteDropDownEditCell);
assertEquals(expectedFactField, factField);
assertFalse(isGuidedDecisionTableEditable);
assertEquals(Optional.of(backgroundGridLayerMock), scenarioSimulationContextLocal.getSelectedScenarioGridLayer());
assertTrue(dmnTypesMap.size() == 14); assertNotNull(entry.getValue().getFeelType()); assertTrue(Arrays.stream(entry.getValue().getFeelType().getNames()).anyMatch(entry.getKey()::equals));
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertTrue(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(errorMessage, title);
assertSame(scenarioSimulationEditorWrapperMock, presenterSpy.scenarioSimulationEditorWrapper);
assertFalse(handler.canCreate());
assertEquals("message", scenarioNotificationEventArgumentCaptor.getValue().getMessage()); assertEquals(NotificationEvent.NotificationType.ERROR, scenarioNotificationEventArgumentCaptor.getValue().getNotificationType()); assertTrue(scenarioNotificationEventArgumentCaptor.getValue().isAutoHide());
assertNotNull(defaultWidget);
assertTrue(fieldListDescription.hidden); assertFalse(predicateFieldDescription.hidden);
assertNotNull(titledAttachmentFileWidget.selectedPath); assertNull(titledAttachmentFileWidget.selectedPath);
assertEquals(uiRow1, uiModel.getRow(0)); assertEquals(uiRow2, uiModel.getRow(1)); assertEquals(uiRow0, uiModel.getRow(2)); assertEquals(row1, model.getData().get(0)); assertEquals(row2, model.getData().get(1)); assertEquals(row0, model.getData().get(2));
assertTrue(ColumnUtilities.canAcceptOtherwiseValues(column));
assertEquals(NAMESPACE, settings.getDmnNamespace()); assertEquals(MODEL_NAME, settings.getDmnName());
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertNotNull( result ); assertEquals( 0.0, result.getTranslateX(), 0.0 ); assertEquals( 0.0, result.getTranslateY(), 0.0 );
assertEquals(1, errorHolder.getMultipleNestedCollection().size()); assertEquals(2, errorHolder.getMultipleNestedObject().size()); assertEquals(2, errorHolder.getMultipleNestedCollection().size()); assertEquals(2, errorHolder.getMultipleNestedObject().size());
assertTrue(retrieved.isPresent()); assertEquals(CommandResult.Type.INFO, retrieved.get().getType());
assertFalse( enums.isEmpty() ); assertEquals( "Fact.field\' : [\'a\', \'b\']", enums.get( 0 ).getRaw() );
assertEquals(expectedDataType, provided.getDataType()); assertEquals(expectedValue, extractValue(provided));
assertEquals("[" + APPLICANT_BOUND_NAME + "]", DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertTrue(presenter.mayClose());
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericBigDecimalDropDownEditCell);
assertTrue(new HeaderMetaData(new HashMap<>()).isEmpty());
assertEquals(expectedWorkItems, actualWorkItems);
assertEquals(1, model.getConditions().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals(true, ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertNotNull(clientDMNType); assertTrue(BuiltInType.NUMBER.equals(clientDMNType.getFeelType()));
assertTrue(handler.canCreate());
assertEquals(BuiltInType.UNKNOWN, DMNUtils.getRootType(simpleTypeAny)); assertEquals(BuiltInType.UNKNOWN, DMNUtils.getRootType(aliasType)); assertEquals(notBuiltInType, DMNUtils.getRootType(notBuiltIn));
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertTrue(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(errorMessage, title);
assertFalse(page.hasEditingPattern());
assertTrue( column instanceof PriorityListUiColumn );
assertTrue(widgetCaptor.getValue() instanceof Anchor);
assertEquals(1, handlers.size()); assertTrue(handlers.get(0) instanceof ScenarioSimulationGridWidgetMouseEventHandler);
assertEquals( "field1 == \\"@{param1}\\"", result );
assertEquals(2, pages.size());
assertFalse(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock)); assertFalse(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock)); assertTrue(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock));
assertEquals(1, result.length); assertEquals(field1, result[0]);
assertEquals(1, conditions.size()); assertEquals(2, conditions.size()); assertEquals(a, conditions.get(0)); assertEquals(b, conditions.get(1));
assertEquals(simulationMock, scenarioSimulationContextLocal.getStatus().getSimulation()); assertEquals(simulationMock, scenarioSimulationContextLocal.getStatus().getSimulation());
assertTrue("Expected: name not in ( \\"John\\", \\"Peter\\" )", source.contains("$p : Person( name not in ( \\"John\\", \\"Peter\\" )")); assertTrue("Expected: name not in ( \\"John\\", \\"Peter\\" )", source.contains("$p : Person( name not in ( \\"John\\", \\"Peter\\" )"));
assertTrue(baseMenu.isShown()); assertFalse(baseMenu.isShown());
assertFalse(builder.miCut.getMenuItem().isEnabled()); assertFalse(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericBigIntegerDropDownEditCell);
assertNotEquals(status, commandSpy.restorableStatus);
assertNotNull(handler);
assertEquals(ActionSetFieldCol52.class, builder.getSupportedColumnType());
assertFalse(plugin.filterEnumFields());
assertEquals(1, model.getConditions().size()); assertEquals(4, uiModel.getColumns().size()); assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn); assertEquals("updated", uiModel.getColumns().get(3).getHeaderMetaData().get(0).getTitle()); assertEquals(false, uiModel.getColumns().get(3).isVisible());
assertEquals(okDeleteCommandMock, popupView.okCommand);
assertEquals(3, index.size()); assertTrue(index.containsKey(name1)); assertTrue(index.containsKey(name2)); assertTrue(index.containsKey(name3)); assertEquals(definition1, index.get(name1)); assertEquals(definition2, index.get(name2)); assertEquals(definition3, index.get(name3));
assertNotNull(event); assertTrue(event.getPresenter().isPresent()); assertEquals(activeDtable, event.getPresenter().get());
assertTrue(service.getActivatorPath(packageMock).endsWith(ScenarioJunitActivator.ACTIVATOR_CLASS_NAME + ".java"));
assertEquals(getAttributeHeaderRepre(newColumn.getAttribute()) + getDiffRepre(diffs), result.asString());
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertFalse(retrieved.isPresent());
assertEquals(scenarioExpressionCellTextAreaSingletonDOMElementFactorySpy, scenarioSimulationContextLocal.getScenarioExpressionCellTextAreaSingletonDOMElementFactory(GridWidget.SIMULATION));
assertEquals("$p.setName( \\"Michael\\" );", definition); assertTrue(calledBack.get());
assertTrue(page.newDefaultValueWidget() instanceof ListBox);
assertFalse(errorCallback.error("message", new Throwable("ex")));
assertEquals(ScenarioSimulationModel.Type.DMN, scenarioSimulationCreationPopupViewSpy.getSelectedType());
assertEquals(4, pages.size());
assertEquals(workItemsService, serviceCaller);
assertFalse(ColumnUtilities.canAcceptOtherwiseValues(column));
assertEquals(scenarioHeaderTextBoxSingletonDOMElementFactorySpy, scenarioSimulationContextLocal.getScenarioHeaderTextBoxSingletonDOMElementFactory(GridWidget.SIMULATION));
assertTrue(consumedModelClasses.contains("org.test.Person"));
assertFalse(isGuidedDecisionTableEditable);
assertTrue(widget instanceof CEPOperatorsDropdown);
assertEquals( "alias", aliasResult );
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(content, contentSupplier.get());
assertEquals(scenarioSimulationContextLocal.status.simulation, scenarioSimulationContextLocal.getAbstractScesimModelByGridWidget(GridWidget.SIMULATION)); assertEquals(scenarioSimulationContextLocal.status.background, scenarioSimulationContextLocal.getAbstractScesimModelByGridWidget(GridWidget.BACKGROUND));
assertEquals(expectedConstraintValueType, constraint.getConstraintValueType()); assertEquals(expectedExpressionFormLine, constraint.getExpressionLeftSide()); assertEquals(expectedFactType, constraint.getFactType());
assertEquals(businessCentralDmoDataManagementStrategySpy.oracle, oracleMock);
assertFalse(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertTrue(builder.miToggleMergeState.getMenuItem().isEnabled()); assertTrue(builder.miViewAuditLog.getMenuItem().isEnabled());
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertFalse( enums.isEmpty() ); assertEquals( 1, enums.size() ); assertEquals( "Fact", enums.get( 0 ).getFactName() ); assertEquals( "field", enums.get( 0 ).getFieldName() ); assertEquals( "[\'a\', \'b\']", enums.get( 0 ).getContext() );
assertEquals(scenarioGridPanelMock, scenarioSimulationContextLocal.getScenarioGridPanelByGridWidget(GridWidget.SIMULATION)); assertEquals(backgroundGridPanelMock, scenarioSimulationContextLocal.getScenarioGridPanelByGridWidget(GridWidget.BACKGROUND));
assertTrue(consumedModelClasses.contains("org.test.Person"));
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());
assertNotNull(retrieved); assertEquals(key, retrieved.getFactName()); assertEquals(packageName, retrieved.getFullPackage()); assertNotNull(simpleProperties); assertEquals(1, simpleProperties.size()); assertTrue(simpleProperties.containsKey(TestProperties.LOWER_CASE_VALUE)); assertNotNull(simplePropertyValue); assertEquals(fullName, simplePropertyValue.getTypeName()); assertEquals(fullName, simplePropertyValue.getPropertyTypeNameToVisualize()); assertFalse(simplePropertyValue.getBaseTypeName().isPresent());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(3, pages.size());
assertNotNull(valueList); assertEquals(2, valueList.size()); assertTrue(valueList.containsKey("true")); assertTrue(valueList.containsKey("false"));
assertNotNull(test.getTestResultMessage()); assertNotNull(test.getScenarioWithIndex()); assertNotNull(test.getSimulationRunMetadata());
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(150.0, column.getWidth(), 0.0); assertEquals(200, column.getWidth());
assertThat(result).as("Instance Assigned but Property selected").isFalse();
assertEquals(2, descriptions.size()); assertEquals("d1", descriptions.get(0)); assertEquals("d2", descriptions.get(1)); assertEquals(2, values.size()); assertEquals("1", values.get(0)); assertEquals("2", values.get(1));
assertEquals(modelMock, abstractDataManagementStrategySpy.model);
assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test", ExpressionUtils.ensureExpressionSyntax(" Test"));
assertFalse(handler.canCreate());
assertEquals(SCENARIO_SIMULATION_KOGITO_RUNTIME_SCREEN_DEFAULT_REQUEST, scenarioSimulationEditorKogitoRuntimeScreenSpy.getPlaceRequest());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(expectedPatterns, patterns);
assertEquals(Collections.singletonList(propertyName), retrieved); assertEquals(Collections.singletonList(propertyName), retrieved); assertEquals(Arrays.asList(className, propertyName), retrieved); assertEquals(Arrays.asList(className, propertyName), retrieved);
assertEquals(1, size(expressionFormLine)); assertEquals(expectedFactType, first(expressionFormLine).getFactType());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertNull(plugin.cloneDTCellValue(null));
assertEquals(content, contentSupplier.get());
assertEquals("testPath", retrieved.getFactName()); assertEquals(1, retrieved.getSimpleProperties().size()); assertTrue(retrieved.getSimpleProperties().containsKey(VALUE)); assertEquals(simpleString.getName(), retrieved.getSimpleProperties().get(VALUE).getTypeName()); assertFalse(retrieved.getSimpleProperties().get(VALUE).getBaseTypeName().isPresent()); assertEquals(simpleString.getName(), retrieved.getSimpleProperties().get(VALUE).getPropertyTypeNameToVisualize()); assertTrue(retrieved.getGenericTypesMap().isEmpty());
assertEquals(eventBusMock, abstractScesimGridModelSpy.eventBus);
assertEquals(uiRow1, uiModel.getRow(0)); assertEquals(uiRow0, uiModel.getRow(1)); assertEquals(uiRow2, uiModel.getRow(2)); assertEquals(row1, model.getData().get(0)); assertEquals(row0, model.getData().get(1)); assertEquals(row2, model.getData().get(2));
assertEquals(0, service.validate(path, loadFile("validWorkItemDefinition.wid")).size());
assertTrue(gridColumn instanceof IntegerUiColumn);
assertThat(result).as("Instance and Property Assigned but not selected").isFalse();
assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridLayer());
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertFalse(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertFalse(builder.miInsertColumn.getMenuItem().isEnabled());
assertEquals(0, result.getMessages().size()); assertNotNull(globals); assertEquals(1, globals.size()); assertEquals("list", global.getIdentifier()); assertEquals("List", global.getClassName());
assertNotNull(liElement);
assertNotNull(JSInteropApiConverter.getImport(jsiImportTypeMock));
assertEquals(errorMessage, title);
assertEquals(1, patterns.size()); assertTrue(patterns.contains(new PatternWrapper("FactType", "$fact", false)));
assertEquals(GuidedDecisionTableConstants.INSTANCE.RetractActions(), DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridModel());
assertNotNull(result); assertNotNull(projectImportsPathArgumentCaptor.getValue()); assertEquals(expectedProjectImportsPath.toURI(), actualProjectImportsPath.toURI()); assertNotNull(projectImportsArgumentCaptor.getValue()); assertEquals(1, projectImports.getImports().getImports().size()); assertEquals("java.util.List", projectImports.getImports().getImports().get(0).getType());
assertTrue(builder.miAppendRow.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowAbove.getMenuItem().isEnabled()); assertTrue(builder.miInsertRowBelow.getMenuItem().isEnabled()); assertTrue(builder.miInsertColumn.getMenuItem().isEnabled());
assertTrue(widgetCaptor.getValue() instanceof ColumnLabelWidget);
assertFalse(isColumnCreationEnabled);
assertSame(testRunnerReportingPanelWidgetMock, panel);
assertSame(observablePathMock, presenterSpy.path);
assertEquals(GridWidget.BACKGROUND, backgroundGridModelSpy.getGridWidget());
assertEquals(uiRow1, uiModel.getRow(0)); assertEquals(uiRow2, uiModel.getRow(1)); assertEquals(uiRow0, uiModel.getRow(2)); assertEquals(row1, model.getData().get(0)); assertEquals(row2, model.getData().get(1)); assertEquals(row0, model.getData().get(2));
assertEquals(1, count);
assertEquals(uiRow0, uiModel.getRow(0)); assertEquals(uiRow2, uiModel.getRow(1)); assertEquals(uiRow1, uiModel.getRow(2)); assertEquals(row0, model.getData().get(0)); assertEquals(row2, model.getData().get(1)); assertEquals(row1, model.getData().get(2));
assertNotNull(propertyEditorPresenter.getEditingPropertyFields(ITEM_ID, TEST_PROPERTYNAME, TEST_PROPERTYVALUE));
assertEquals(expectedPanel, actualPanel);
assertNull(model.getSimulation()); assertNull(model.getBackground()); assertNull(model.getSettings()); assertNotNull(returnPath); assertNotNull(model.getSimulation()); assertNotNull(model.getBackground()); assertNotNull(model.getSettings());
assertEquals(row, element.getRow()); assertEquals(column, element.getColumn()); assertEquals(value, element.getValue()); assertEquals(modeller, element.getModeller()); assertEquals(highlightHelper, element.getHighlightHelper()); assertEquals(model, element.getModel());
assertFalse(synchronizer.handlesMoveColumnsTo(Collections.emptyList()));
assertFalse(page.canSetupLimitedValue());
assertFalse(hasWorkItems);
assertEquals(gridPanel, helper.getGridPanel(modeller));
assertTrue(hasPatternToDeletePage); assertEquals(2, pages.size());
assertFalse(elementViewListLocal.contains(elementView1Mock));
assertEquals(dslTextEditorService, serviceCaller);
assertFalse(handler.isExecutable(scenarioGridMock));
assertTrue(scenarioSimulationMainGridPanelClickHandler.manageCoordinates((int) CLICK_POINT_X, (int) CLICK_POINT_Y));
assertTrue(page.isConstraintValuePredicate());
assertEquals(errorMessage, title);
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(200, column.getWidth());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(errorMessage, title);
assertNotNull(retrieved); assertEquals(retrieved, eventBusMock);
assertSame(scenarioCellTextAreaSingletonDOMElementFactorySpy, factory); assertSame(scenarioExpressionCellTextAreaSingletonDOMElementFactorySpy, factory);
assertEquals(this.serviceCaller, serviceCaller);
assertNotNull(plugin.getRuleModel());
assertFalse(handler.canCreate());
assertTrue(page.hasEditingPattern());
assertEquals(expected, result);
assertTrue(retrieved.isPresent()); assertEquals(CommandResult.Type.INFO, retrieved.get().getType());
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertEquals(dcv, clone); assertNotSame(dcv, clone);
assertNotNull(callbackValue); assertFalse(callbackValue.isEmpty()); assertTrue(callbackValue.containsKey("three")); assertTrue(callbackValue.containsKey("four"));
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertNotNull(nodeMouseDoubleClickHandler);
assertEquals(backgroundGridWidgetSpy, retrieved);
assertEquals(view, page.getView());
assertTrue(hasWorkItems);
assertNotNull(returnPath);
assertTrue(dataManagementStrategyCaptor.getValue() instanceof KogitoDMODataManagementStrategy);
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertNotNull(item); assertEquals(fullPath, item.getValue()); assertEquals(fullPath, item.getSubText()); assertEquals(fileName, item.getText());
assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));
assertEquals("hello there", new DecisionTableVerifierWebWorkerProvider().loadResource("test.txt"));
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(200, column.getWidth());
assertFalse(page.canSetupDefaultValue());
assertEquals(okCommandMock, popupView.okCommand);
assertEquals(scenarioSimulationContextLocal.getStatus().getSimulation(), content.getModel().getSimulation()); assertEquals(scenarioSimulationContextLocal.getStatus().getBackground(), content.getModel().getBackground());
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(expectedWorkItem, actualWorkItem);
assertNotNull(retrieved);
assertTrue(wrapper.getActionCol52() instanceof LimitedEntryActionInsertFactCol52);
assertTrue( column instanceof StringUiColumn );
assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericBigDecimalDropDownEditCell);
assertTrue(commands.contains(populateTestToolsCommand)); assertFalse(commands.contains(populateTestToolsCommand));
assertEquals(TestProperties.CLASS_NAME, retrieved);
assertEquals( "true", new GuidedDecisionTableApplicationPreferencesLoader().load().get( GuidedDecisionTableEditorService.DTABLE_VERIFICATION_DISABLED ) );
assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertFalse(page.canSetupLimitedValue());
assertTrue(page.canOperatorBeSet());
assertEquals("", patternValue);
assertEquals(fileName, fileUploadPopupPresenter.getFileName());
assertEquals( "setField1( @{param1} ); setField2( @{param2} )", result );
assertTrue(bindingContainer.hidden);
assertFalse( helper.supports( path ) );
assertTrue(service.editPomIfNecessary(dependencies, gav)); assertFalse(service.editPomIfNecessary(dependencies, gav));
assertEquals(scenarioSimulationViewMock, retrieved);
assertFalse(hasPatternToDeletePage); assertEquals(1, pages.size());
assertThat(handler.isExecutable(gridWidget)) .as("Cell have to be selected") .isFalse();
assertNotNull(item); assertEquals(fullPath, item.getValue()); assertEquals(fullPath, item.getSubText()); assertEquals(fileName, item.getText());
assertTrue(dataManagementStrategyCaptor.getValue() instanceof KogitoDMNDataManagementStrategy);
assertTrue(elementView.isShown()); assertFalse(elementView.isShown());
assertEquals(uiRow2, uiModel.getRow(0)); assertEquals(uiRow0, uiModel.getRow(1)); assertEquals(uiRow1, uiModel.getRow(2)); assertEquals(row2, model.getData().get(0)); assertEquals(row0, model.getData().get(1)); assertEquals(row1, model.getData().get(2));
assertEquals(convertedDate, actualDate);
assertNotNull(item); assertEquals(fullPath, item.getValue()); assertEquals(fullPath, item.getSubText()); assertEquals(fullPath, item.getText());
assertEquals(scenarioSimulationKogitoDocksHandlerMock, scenarioSimulationEditorKogitoWrapperSpy.getScenarioSimulationDocksHandler());
assertNotNull(retrieved);
assertEquals(Type.DMN, model.getSettings().getType());
assertFalse(builder.miCut.getMenuItem().isEnabled()); assertFalse(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());
assertEquals(false, uiColumn.isVisible());
assertEquals( enums, "\'Fact.field\' : [\'a\', \'b\']\\n" + "A raw value\\n" );
assertEquals(drlTextEditorService, serviceCaller);
assertSame(scenarioSimulationMainGridPanelClickHandler.eventBus, eventBusMock);
assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(new ArrayList<>()), result.asString());
assertEquals("dtableVerifier", new DecisionTableVerifierWebWorkerProvider().getId());
assertFalse( enums.isEmpty() ); assertEquals( "This isn\'t even close to a correct definition", enums.get( 0 ).getRaw() );
assertTrue(uiColumn instanceof BaseUiColumn); assertEquals((int) uiColumn.getWidth(), column.getWidth()); assertEquals(200, column.getWidth());
assertEquals(dtContent.getModel().hashCode(), (int) dtPresenter.getOriginalHashCode());
assertTrue(widget instanceof ListBox);
assertEquals(SERVLET_URL + "&attachmentPath=", view.getDownloadUrl(path()));
assertNotNull(report); assertFalse(report.isEmpty()); assertTrue(report.contains("RULE")); assertFalse(report.contains("DECISION")); assertEquals(7 + auditLog.getAuditLogLines().size(), reportLine.length); assertNotNull(reportLine[i]);
assertEquals(numberOfRow + HEADER_SIZE, exportData.size()); assertEquals("1,My scenario 1,value_1_0", exportData.get(4));
assertEquals( BOUNDS_MIN_X, b.getX(), 0.0 ); assertEquals( BOUNDS_MIN_Y, b.getY(), 0.0 ); assertEquals( BOUNDS_MAX_X - BOUNDS_MIN_X, b.getWidth(), 0.0 ); assertEquals( BOUNDS_MAX_Y - BOUNDS_MIN_Y, b.getHeight(), 0.0 );
assertTrue("Expected custom rule name to be present", source.contains("rule \\"John is important\\"\\n"));
assertEquals(title, itemTitle);
assertEquals( ActionRetractFactCol52.class, builder.getSupportedColumnType() );
assertNotNull(retrieved);
assertEquals(1, dmnSimulationCreationStrategy.findNewIndexOfGroup(simulationDescriptorGiven, GIVEN)); assertEquals(1, dmnSimulationCreationStrategy.findNewIndexOfGroup(simulationDescriptorGiven, EXPECT)); assertEquals(0, dmnSimulationCreationStrategy.findNewIndexOfGroup(simulationDescriptorExpect, GIVEN)); assertEquals(1, dmnSimulationCreationStrategy.findNewIndexOfGroup(simulationDescriptorExpect, EXPECT));
assertFalse(undoneCommandsRegistrySpy.isEmpty()); assertTrue(undoneCommandsRegistrySpy.isEmpty());
assertTrue(widget instanceof ListBox);
assertFalse(page.canSetupLimitedValue());
assertEquals(2, patterns.size());
assertNotNull(newDrl); assertTrue(newDrl.contains("MyNewFile"));
assertEquals(attribute, plugin.getAttribute());
assertThat(result).as("Instance and Property Assigned and Property selected").isTrue();
assertEquals( 350, content.getX() ); assertEquals( 148, content.getY() ); assertEquals( "#", content.getContent() );
assertEquals(expectedVariables, actualVariables);
assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);
assertThat(DateFormatter.print(date), is("2012-11-04 07:08:09.010"));
assertThat(TemplateValues.date(), instanceOf(DateTemplateValue.class));
assertThat(TemplateValues.character(), instanceOf(CharTemplateValue.class));
assertThat(DateFormatter.print(localDate), is("2012-11-04"));
assertThat(Arrays.asList(columns), contains( new Column("ID", org.dbunit.dataset.datatype.DataType.INTEGER), new Column("NAME", org.dbunit.dataset.datatype.DataType.VARCHAR)) );
assertThat(DataTypeMapping.toDaleq(org.dbunit.dataset.datatype.DataType.NUMERIC), is(DataType.NUMERIC));
assertThat(resolver.canResolve(ClassBasedTableTypeReference.of(Table.class)), is(true));
assertThat(tableMetaData.getColumnIndex("NAME"), is(1));
assertThat(tableMetaData.getPrimaryKeys().length, is(0));
assertThat((String) templateValue.transform(58), is("A"));
assertThat( scanner.scan(WithExplicitTemplate.class), contains( (FieldType) new FieldTypeImpl( "NAME", DataType.VARCHAR, Optional.<TemplateValue>of(new StringTemplateValue("some template")), WithExplicitTemplate.NAME) ) );
assertThat((String) templateValue.transform(2384768273462873264L), is("IRhmHBNgTLA="));
assertThat(result, is(nullValue()));
assertThat(TemplateValues.base64(), instanceOf(Base64TemplateValue.class));
assertThat(bean.getObject(), notNullValue());
assertThat( new RowBuilder((long) 23).build(context, tableType), is(sb.row( sb.field(ExampleTable.PROP_A, "23"), sb.field(ExampleTable.PROP_B, "23") )) );
assertThat(fd, Matchers.is(nullValue()));
assertThat(result, Matchers.nullValue());
assertThat((String) templateValue.transform(0), is("A"));
assertThat(tableAdapter.getRowCount(), is(10));
assertThat(tableAdapter.getTableMetaData(), is(notNullValue()));
assertThat(TemplateValues.time(), instanceOf(TimeTemplateValue.class));
assertThat(conversion.convert(value), is(DateFormatter.print(value)));
assertThat((String) templateValue.transform(141), is("Z"));
assertThat((String) tableAdapter.getValue(0, ID), is(value));
assertThat(resolver.canResolve(anotherReference), is(false));
assertThat(ctx.getService(TypeConversion.class), is(notNullValue()));
assertThat(clazz.equals(expected), is(true));
assertThat(reference.resolve(tableType), nullValue());
assertThat(ctx.getService(TemplateValueFactory.class), is(notNullValue()));
assertThat(conversion.convert(new Object() { @Override public String toString() { return "hallo"; } }), is("hallo"));
assertThat(DateFormatter.print(localTime), is("07:08:09"));
assertThat(DataTypeMapping.toDbUnit(DataType.NUMERIC), is(org.dbunit.dataset.datatype.DataType.NUMERIC));
assertThat( formatter.format(table), is(lines( "| ID | NAME | STUFF |", "|---:|-----:|------:|") ) );
assertThat(ctx.getService(TableTypeRepository.class), is(notNullValue()));
assertThat(someFd().getTemplate().isPresent(), is(false));
assertThat(fd, Matchers.is(nullValue()));
assertThat((MyEnum) templateValue.transform(0), is(MyEnum.A)); assertThat((MyEnum) templateValue.transform(1), is(MyEnum.B)); assertThat((MyEnum) templateValue.transform(2), is(MyEnum.C)); assertThat((MyEnum) templateValue.transform(3), is(MyEnum.A));
assertThat(conversion.convert(value), is(DateFormatter.print(value)));
assertThat(fieldType.getName(), is(NAMED_FIELD_STR));
assertThat(Lists.newArrayList(table.getValuesOfField("ID")), Matchers.is(expected));
assertThat(TemplateValues.enumeration("1", "2"), instanceOf(EnumeratingTemplateValue.class));
assertThat(row.containsField(fieldName), is(true));
assertThat( ClassBasedTableTypeReference.of(Table.class), is(ClassBasedTableTypeReference.of(Table.class)) );
assertThat(row.getFieldBy(fieldName), is(existingField));
assertThat((String) templateValue.transform(0L), is("AAAAAAAAAAA="));
assertThat(table.getName(), is("MY_TABLE"));
assertThat(TemplateValues.string("foo"), instanceOf(StringTemplateValue.class));
assertThat(table.findFieldBy(origin), is(fieldType));
assertThat(TemplateValues.modulo(12), instanceOf(ModuloTemplateValue.class));
assertThat(fieldType.getOrigin(), is((FieldTypeReference) ResolveTable.ID));
assertThat((String) templateValue.transform(1), is("B"));
assertThat(TemplateValues.timestamp(), instanceOf(TimestampTemplateValue.class));
assertThat(product.getId(), is(expectedId));
assertThat(first, is(sameInstance(second)));
assertThat(tableType, is(expected));
assertThat(tableMetaData.getTableName(), is("SOME_TABLE"));
assertThat(table.findFieldBy(origin), is(nullValue()));
assertThat(DateFormatter.print(dateTime), is("2012-11-04 07:08:09.010"));
assertThat(table.getName(), is("MY_TABLE"));
assertThat(conversion.convert(value), is(DateFormatter.print(value)));
assertThat( formatter.format(table), is(lines( "| COLUMN |", "|-----------:|", "| A |", "| ABCDEFGHIJ |", "| ABCDEF |", "| ABCDEFGHI |", "| |" ) ) );
assertThat(tableMetaData.getColumnIndex("ID"), is(0));
assertThat(scanner.scan(WithPropertyDefs.class), is(expected));
assertThat((String) templateValue.transform(57), is("z"));
assertThat(dataSet.getTableNames(), arrayContaining("FOO")); assertThat(table.getValue(0, "ID"), Matchers.is((Object) "0")); assertThat(table.getValue(0, "VALUE"), Matchers.is((Object) "val0")); assertThat(table.getValue(1, "ID"), Matchers.is((Object) "1")); assertThat(table.getValue(1, "VALUE"), Matchers.is((Object) "val1"));
assertThat(fd, Matchers.is(nullValue()));
assertThat(row.containsField("B"), is(false));
assertThat(scanner.scan(WithExplicitName.class), is(expected));
assertThat(bean.isSingleton(), is(true));
assertThat(bestPackageFinder.findBestPackage(mockActivity)).isEqualTo(DEFAULT_PACKAGE);
assertThat(stillConnected).isTrue();
assertThat(SimpleChromeCustomTabs.getInstance()).isInstanceOf(SimpleChromeCustomTabs.class);
assertThat(bestPackageFinder.findBestPackage(mockActivity)).isEmpty();
assertThat(urls.size()).isEqualTo(0);
assertThat(urls.size()).isEqualTo(0);
assertThat(resultIntent).isNotNull();
assertThat(bestPackageFinder.findBestPackage(mockActivity)).isEqualTo(OTHER_PACKAGE);
assertThat(result, is(index));
assertThat(result, is(adapterPosition));
assertThat(result, is(index));
assertThat(result, is(index));
assertThat(result, is(position));
assertThat(result, is(index));
assertThat(result, is(position));
assertThat(result, is(adapterPosition));
assertEquals(1, experiment.getTreatments().size()); assertEquals(1, experiment.getAllocations().size()); assertEquals(1, experiment.getTreatments().size()); assertEquals(0, experiment.getAllocations().size());
assertEquals(treatment, experiment.getTreatments().get(0)); assertEquals(override, experiment.getOverrides().get(0));
assertEquals(expected, actual);
assertEquals(0, client.getTreatments("exp").size());
assertNull(experiment("new_experiment")); assertNotNull(experiment("new_experiment"));
assertEquals(Response.Status.CREATED.getStatusCode(), created.getStatus());
assertEquals(0, client.getTreatments("exp").size());
assertNotNull(experiment(EXPERIMENT_1).getOverride(EXP_1_OVERRIDE)); assertNull(experiment(EXPERIMENT_1).getOverride(EXP_1_OVERRIDE));
assertEquals(1, client.getAllocations("exp").size());
assertEquals(expected, actual);
assertEquals(identity.computeHash(seed, fooBar, map), identity.computeHash(seed, fooBar, map)); assertEquals(identity.computeHash(seed, barFoo, map), identity.computeHash(seed, barFoo, map)); assertNotEquals(identity.computeHash(seed, fooBar, map), identity.computeHash(seed, barFoo, map)); assertNotEquals(identity.computeHash(seed, barFoo, map), identity.computeHash(seed, fooBar, map));
assertNotNull(userType); assertEquals(1, map.size()); assertEquals(UserDto.class, userType);
assertEquals(1, experiment.getTreatments().size()); assertEquals(1, experiment.getAllocations().size()); assertEquals(1, experiment.getOverrides().size()); assertEquals(0, experiment.getTreatments().size()); assertEquals(0, experiment.getAllocations().size()); assertEquals(0, experiment.getOverrides().size());
assertEquals("control", treatment.getName()); assertEquals("the control", treatment.getDescription()); assertEquals("control", treatment2.getName()); assertNull(treatment2.getDescription());
assertEquals(map.entrySet(), map.filter(map.keySet()).entrySet()); assertTrue(map.filter(Sets.<String>newHashSet()).isEmpty());
assertEquals(expected, actual);
assertNotNull(client.getExperiment("exp")); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), e.getResponse().getStatus());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(FilterExpression.isValid("a")); assertTrue(FilterExpression.isValid("a|b")); assertTrue(FilterExpression.isValid("!a")); assertTrue(FilterExpression.isValid("(((a)))")); assertFalse(FilterExpression.isValid("|")); assertFalse(FilterExpression.isValid("a|")); assertFalse(FilterExpression.isValid("|b")); assertFalse(FilterExpression.isValid("!|")); assertFalse(FilterExpression.isValid("!|b")); assertFalse(FilterExpression.isValid("((a)"));
assertEquals(1, experiments1.size()); assertEquals("another_exp", experiments1.get(0).getName()); assertEquals(1, experiments2.size()); assertEquals("exp", experiments2.get(0).getName()); assertEquals(1, experiments3.size()); assertEquals("another_exp", experiments3.get(0).getName()); assertEquals(1, experiments4.size()); assertEquals("another_exp", experiments4.get(0).getName());
assertEquals("exp", experiment.getName()); assertEquals("this is an experiment", experiment.getDescription()); assertTrue(experiment.isActive());
assertEquals(Sets.newHashSet("foo", "bar", "baz"), attributes.keySet()); assertTrue(attributes.getBoolean("foo")); assertFalse(attributes.getBoolean("bar")); assertEquals(Long.valueOf(1), attributes.getNumber("baz")); assertNull(attributes.getNumber("quux"));
assertEquals(0, client.getAllocations("exp").size());
assertArrayEquals(new Integer[]{0, 1, 2, 3}, Iterators.toArray(evens, Integer.class));
assertEquals(expected, actual);
assertEquals(0, client.getOverrides("exp").size());
assertEquals(Long.MIN_VALUE + 1, new RevisionManager(ds).nextRevision());
assertEquals(2, allocations.getAllocations().size()); assertEquals(10, allocations.getSize()); assertEquals(0, allocations.getAllocations().size()); assertEquals(0, allocations.getSize());
assertEquals(0, AttributesMap.empty().size());
assertEquals("control", treatment.getName());
assertEquals(expected, actual);
assertTrue("expected same object reference value", value == BaseResource.ensureExists(value));
assertEquals( "allocations should be smaller and within the same offset range", Lists.newArrayList( new Allocation(control, 5, 5), new Allocation(withLogin, 20, 10), new Allocation(withoutLogin, 45, 15) ), allocations.getAllocations() );
assertEquals(Boolean.class, map.getType("true")); assertEquals(Long.class, map.getType("one")); assertEquals(String.class, map.getType("string")); assertNull(map.getType("bad"));
assertEquals("control", treatment.getName()); assertEquals("new description", treatment.getDescription());
assertEquals(Long.MIN_VALUE + 1, revisionManager.nextRevision()); assertEquals(Long.MIN_VALUE + 2, revisionManager.nextRevision()); assertEquals(Long.MIN_VALUE + 3, revisionManager.nextRevision());
assertEquals(1, overrides.size()); assertEquals("override", override.getName()); assertEquals("control", override.getTreatment());
assertNotNull(attributes); assertEquals(Identity.getSupportedAttributes(User.class), attributes);
assertEquals(expected, actual);
assertNotNull(experiment(EXPERIMENT_1).getTreatment(EXP_1_TREATMENT_1)); assertNull(experiment(EXPERIMENT_1).getTreatment(EXP_1_TREATMENT_1));
assertEquals("override", override.getName()); assertEquals("control", override.getTreatment());
assertNotNull(map); assertTrue( map .asObjectSchema() .getProperties() .get("name") .isStringSchema() );
assertEquals(allocations, countAllocations(currentAllocations)); assertEquals(expectedAllocations, countAllocations(newAllocations));
assertEquals(1, treatments.size()); assertEquals("control", treatment.getName()); assertEquals("the control", treatment.getDescription());
assertTrue(experiment(EXPERIMENT_1).getAllocations().isEmpty());
assertNotNull(EXPERIMENTS.get(EXPERIMENT_1)); assertNull(EXPERIMENTS.get(EXPERIMENT_1));
assertNotNull(experiment(EXPERIMENT_1).getOverride(EXP_1_OVERRIDE)); assertNull(experiment(EXPERIMENT_1).getOverride(EXP_1_OVERRIDE));
assertEquals(1, experiment.getTreatments().size()); assertEquals(1, experiment.getOverrides().size()); assertEquals(1, experiment.getTreatments().size()); assertEquals(0, experiment.getOverrides().size());
assertEquals(treatment, experiment.getTreatments().iterator().next());
assertEquals(experiment.getName(), name);
assertEquals(Long.MIN_VALUE + 1, new RevisionManager(ds).nextRevision());
assertEquals(1, treatments.size()); assertTrue(treatments.containsKey("exp")); assertEquals("control", treatments.get("exp").getName());
assertEquals(override.getName(), name);
assertEquals(treatment, experiment.getTreatments().get(0)); assertEquals(override, experiment.getOverride(override.getName()));
assertEquals(0, client.getOverrides("exp").size());
assertEquals(true, map.getBoolean("true")); assertEquals(Long.valueOf(1), map.getNumber("one")); assertEquals("string", map.getString("string")); assertNull(map.getNumber("true")); assertNull(map.getBoolean("bad"));
assertEquals(1, allocations.size()); assertEquals("control", allocation.getTreatment()); assertEquals(50, allocation.getSize());
assertEquals(request.getDescription().orElse(null), treatment.getDescription()); assertNotNull( Iterables.find(allocations, new Predicate<AllocationDto>() { @Override public boolean apply(@Nullable AllocationDto input) { return input != null && input.getTreatment().equals(EXP_1_TREATMENT_1); } }) );
assertEquals("exp", experiment.getName()); assertEquals("this is an experiment", experiment.getDescription()); assertTrue(experiment.isActive());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("control", treatment.getName()); assertEquals("the control", treatment.getDescription());
assertEquals(1, experiments.size()); assertEquals("exp", experiment.getName()); assertEquals("this is an experiment", experiment.getDescription()); assertTrue(experiment.isActive());
assertEquals( "should be three contiguous allocations of various sizes", Lists.newArrayList( new Allocation(control, 0, 10), new Allocation(withLogin, 10, 20), new Allocation(withoutLogin, 30, 30) ), allocations.getAllocations() );
assertEquals( "reallocation should have partly replaced second allocation and merged with first allocation", Lists.newArrayList( new Allocation(control, 0, 8), new Allocation(withLogin, 8, 2) ), allocations.getAllocations() );
assertEquals(expected1, actual1); assertEquals(expected2, actual2);
assertEquals(expected, actual);
assertEquals(treatment.getName(), name);
assertFalse(found);
assertTrue("Store is not empty", results.hasNext());
assertEquals( QueryBuilder.newBuilder().addTypeName("adapterId").indexName("indexId").build(), pm.getPropertyAsQuery(ExtractParameters.Extract.QUERY));
assertThat(geometryStore.getGeometry(1, 1), notNullValue());
assertArrayEquals(testArray, classUnderTest.getArray(testKey));
assertTrue(it.hasNext()); assertEquals(indices.get(3).getName(), it.next().getName()); assertFalse(it.hasNext());
assertTrue("Store is not empty", results.hasNext());
assertTrue((endTime - currentTime) >= 3800);
assertThat(bin1, is(not(bin2))); assertThat(bin1, is(bin2));
assertEquals(testString, classUnderTest.getString(testKey));
assertTrue(it.hasNext()); assertEquals(indices.get(3).getName(), it.next().getName()); assertFalse(it.hasNext());
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertTrue(memoryLockManager.exists("auth2")); assertFalse(memoryLockManager.exists("auth2"));
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertThat(bin1, is(not(bin2))); assertThat(bin2, is(bin3)); assertThat(bin1, is(bin2));
assertEquals(2, results.size()); assertTrue(Arrays.equals(new double[] {10, 30}, results.get(0).getMinValuesPerDimension())); assertTrue(Arrays.equals(new double[] {20, 40}, results.get(0).getMaxValuesPerDimension())); assertTrue(Arrays.equals(new double[] {-9, -2}, results.get(1).getMinValuesPerDimension())); assertTrue(Arrays.equals(new double[] {-8, -1}, results.get(1).getMaxValuesPerDimension()));
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertEquals( version, VersionUtils.getVersion(new JCommander().getConsole()));
assertEquals(d1, d2, 0.0000001); assertEquals(111319.49079322655, d1, 0.00001); assertTrue(d3close < 0.04); assertTrue(dateLineclose < 0.03);
assertThat(merged.get("0"), is(5L)); assertThat(merged.get("1"), is(5L));
assertEquals(21.23, nd.get(0).getDataPerDimension()[0].getMin(), 0.0001); assertEquals(26.23, nd.get(0).getDataPerDimension()[0].getMax(), 0.0001); assertEquals(41.75, nd.get(0).getDataPerDimension()[1].getMin(), 0.0001); assertEquals(43.1, nd.get(0).getDataPerDimension()[1].getMax(), 0.0001);
assertNotNull(VisibilityManagementHelper.loadVisibilityManagement());
assertEquals("explain", optreg.getOperation(ExplainCommand.class).getOperationNames()[0]); assertEquals(true, optreg.getAllOperations().contains(optentry));
assertEquals("prefix-null", nullPartitionKeyName); assertEquals("prefix-empty", emptyPartitionKeyName);
assertEquals(22.25, env.getMinX(), 0.0001); assertEquals(26.23, env.getMaxX(), 0.0001); assertEquals(41.75, env.getMinY(), 0.0001); assertEquals(42.25, env.getMaxY(), 0.0001);
assertNotNull(checkSerialization(store).getAdapter(id));
assertEquals(expectedCount, result);
assertEquals(3, e.getValue().size()); assertEquals(2, newCentroid.getIterationID()); assertFalse(b); assertEquals(3, e.getValue().size()); assertEquals(1, oldCentroid.getIterationID());
assertEquals(false, params.isValidate()); assertEquals(true, params.isAllowUnknown());
assertEquals(testString, classUnderTest.getString(testKey));
assertEquals(testList, classUnderTest.getList(testKey));
assertNull(bin); assertNull(bin);
assertTrue(visitor.getMax().equals(mtime));
assertTrue(it.hasNext()); assertEquals(indices.get(3).getName(), it.next().getName()); assertFalse(it.hasNext());
assertEquals(2, l1.size()); assertEquals(l1, l2); assertEquals( new ByteArrayRange(new ByteArray("282").getBytes(), new ByteArray("300").getBytes()), ((ArrayList<ByteArrayRange>) l1).get(0)); assertEquals( new ByteArrayRange(new ByteArray("392").getBytes(), new ByteArray("410").getBytes()), ((ArrayList<ByteArrayRange>) l1).get(1));
assertEquals(false, params.isValidate()); assertEquals(true, params.isAllowUnknown());
assertTrue(sd < (mean * 0.18));
assertThat(hash.substring(0, i), is(GeohashBinningStrategy.encodeToGeohash(point, i)));
assertNotNull(expectedResultSet); assertTrue("" + value + " with " + result, expectedResultSet.remove(result)); assertTrue(expectedResultSet.isEmpty());
assertArrayEquals(testArray, classUnderTest.getArray(testKey));
assertEquals(DataUtilities.encodeFeature(feature), DataUtilities.encodeFeature(feat)); assertTrue(dataMap.isEmpty());
assertThat(new GeohashSimpleFeatureBinningStrategy(i).getPrecision(), is(i)); assertThat(new GeohashCommonIndexedBinningStrategy(i).getPrecision(), is(i));
assertEquals(value, p.getProperty(name));
assertEquals(testList, classUnderTest.getList(testKey));
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertEquals(1, ids.length); assertEquals(4, i.intValue());
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertTrue((System.currentTimeMillis() - currentTime) < 4000);
assertTrue(GeometryHullTool.edgesIntersect(e1, e2)); assertTrue(!GeometryHullTool.edgesIntersect(e1, e3));
assertTrue(ob instanceof Integer); assertTrue(pm.getProperty(MyLocalNSEnum.ARG1, converter) instanceof NonSerializableExample);
assertTrue(visitor.getMin().equals(stime));
assertThat(result.size(), is(1)); assertThat(result.size(), is(2)); assertThat(result.size(), is(1));
assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext());
assertEquals(distance1, distance2, 0.0001); assertTrue(distance3 > 0); assertEquals(0.0, distance4, 0.001); assertTrue(distance5 < 0); assertTrue(distance7 < distance6);
assertEquals(2, l1.size()); assertEquals(l1, l2); assertEquals( new ByteArrayRange(new ByteArray("232").getBytes(), new ByteArray("340").getBytes()), ((ArrayList<ByteArrayRange>) l1).get(0)); assertEquals( new ByteArrayRange(new ByteArray("392").getBytes(), new ByteArray("410").getBytes()), ((ArrayList<ByteArrayRange>) l1).get(1));
assertEquals( expected, result );
assertEquals( "filename", pfc.valuePattern() );
assertNull( pfc.valueType() );
assertThat(result, is("maven:group:artifact:version"));
assertFalse(Arrays.equals(digest1, digest2));
assertTrue(Arrays.equals(digest1, digest2));
assertFalse(Arrays.equals(digest1, digest2));
assertThat(result, is("maven:group:artifact:version"));
assertTrue(Arrays.equals(digest1, digest2));
assertTrue(Arrays.equals(digest1, digest2));
assertThat(result, is("maven:group:artifact:version::main_service"));
assertThat(PlatOnTypeEncoder.encode(zero), is("0000000000000000")); assertThat(PlatOnTypeEncoder.encode(maxLong), is("7fffffffffffffff")); assertThat(PlatOnTypeEncoder.encode(minLong), is("8000000000000000")); assertThat(PlatOnTypeEncoder.encode(minusOne), is("ffffffffffffffff"));
assertArrayEquals(seed, actualSeed);
assertThat(ensResolver.reverseResolve("0x19e03255f667bdfd50a32722df860b1eeaf4d635"), is("web3j.eth"));
assertThat(credentials, equalTo(CREDENTIALS));
assertFalse(ensResolver.isSynced());
assertThat(rlpStrings.size(), is(6)); assertThat(rlpStrings.get(3), CoreMatchers.<RlpType>is(RlpString.create("")));
assertThat(ethSyncing.getResult(), CoreMatchers.<PlatonSyncing.Result>equalTo( new PlatonSyncing.Syncing("0x384", "0x386", "0x454", null, null)));
assertThat(credentials, equalTo( Credentials.create( "6ca4203d715e693279d6cd9742ad2fb7a3f6f4abe27a64da92e0a70ae5d859c9")));
assertTrue(WalletUtils.getDefaultKeyDirectory("Mac OS X") .endsWith(String.format("%sLibrary%sEthereum", File.separator, File.separator))); assertTrue(WalletUtils.getDefaultKeyDirectory("Windows") .endsWith(String.format("%sEthereum", File.separator))); assertTrue(WalletUtils.getDefaultKeyDirectory("Linux") .endsWith(String.format("%s.ethereum", File.separator)));
assertThat(hexMessage, is("0xf85580010a840add5355887fffffffffffffff80" + "1c" + "a046360b50498ddf5566551ce1ce69c46c565f1f478bb0ee680caf31fbc08ab727" + "a01b2f1432de16d110407d544f519fc91b84c8e16d3b6ec899592d486a94974cd0"));
assertThat(results, equalTo(ethBlocks)); assertTrue(subscription.isUnsubscribed());
assertThat(PlatOnTypeEncoder.encode(string), is("48656c6c6f2c20776f726c6421"));
assertEquals(mnemonic, actualMnemonic);
assertFalse(contract.isValid());
assertTrue(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING)); assertTrue(isValidPrivateKey(Numeric.prependHexPrefix(SampleKeys.PRIVATE_KEY_STRING))); assertFalse(isValidPrivateKey("")); assertFalse(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING + "a")); assertFalse(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING.substring(1)));
assertTrue(contract.isValid());
assertFalse(contract.isValid());
assertThat(results, equalTo(ethBlocks)); assertTrue(subscription.isUnsubscribed());
assertThat(ensResolver.resolve("web3j.eth"), is("0x19e03255f667bdfd50a32722df860b1eeaf4d635"));
assertTrue(ensResolver.isSynced());
assertThat(credentials, equalTo(CREDENTIALS));
assertThat(TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1), is(Numeric.hexStringToByteArray( "0xec098504a817c800825208943535353535353535353535353535353535353535880de0" + "b6b3a764000080018080")));
assertTrue(isValidAddress(SampleKeys.ADDRESS)); assertTrue(isValidAddress(SampleKeys.ADDRESS_NO_PREFIX)); assertFalse(isValidAddress(""));
assertThat(rlpStrings.size(), is(9)); assertThat(rlpStrings.get(3), IsEqual.<RlpType>equalTo(RlpString.create(new BigInteger("add5355", 16))));
assertFalse(ensResolver.isSynced());
assertThat(PlatOnTypeEncoder.encode(zero), is("0000000000000000")); assertThat(PlatOnTypeEncoder.encode(maxLong), is("7fffffffffffffff"));
assertEquals("A", map.putIfAbsent(one, "Z"));
assertEquals(map1, map2); assertEquals(map2, map1); assertFalse(map1.equals(map2)); assertFalse(map2.equals(map1));
assertEquals(0, empty.size()); assertEquals(5, map.size());
assertEquals(5, ar.length); assertTrue(s.contains("A")); assertTrue(s.contains("B")); assertTrue(s.contains("C")); assertTrue(s.contains("D")); assertTrue(s.contains("E"));
assertEquals(last, five); assertTrue(last.compareTo(k) > 0); assertEquals(5, count);
assertEquals(last, one); assertTrue(last.compareTo(k) < 0); assertEquals(5, count);
assertEquals(three, e1); assertEquals(one, e2); assertEquals(five, e3); assertNull(e4);
assertNull(map.replace(six, "Z")); assertFalse(map.containsKey(six));
assertEquals(two, e1); assertEquals(five, e2); assertNull(e3); assertNull(e4);
assertTrue(s.contains(String.valueOf(i)));
assertEquals(four, e1); assertEquals(one, e2); assertNull(e3); assertNull(e4);
assertEquals(five, e.getKey()); assertEquals("E", e.getValue()); assertEquals(four, e.getKey()); assertEquals(five, e.getKey()); assertEquals("E", e.getValue()); assertEquals(three, e.getKey()); assertEquals(one, e.getKey()); assertNull(e);
assertEquals(two, e1.getKey()); assertEquals(five, e2.getKey()); assertNull(e3); assertNull(e4);
assertEquals(one, map.firstKey());
assertEquals(one, e.getKey()); assertEquals("A", e.getValue()); assertEquals(two, e.getKey()); assertEquals(one, e.getKey()); assertEquals("A", e.getValue()); assertEquals(three, e.getKey()); assertEquals(five, e.getKey()); assertNull(e);
assertTrue(empty.isEmpty()); assertFalse(map.isEmpty());
assertEquals(three, e1.getKey()); assertEquals(one, e2.getKey()); assertEquals(five, e3.getKey()); assertNull(e4);
assertEquals("A", (String) map.get(one)); assertNull(empty.get(one));
assertEquals(0, map.size());
assertTrue(map.containsValue("A")); assertFalse(map.containsValue("Z"));
assertEquals(three, e1); assertEquals(five, e2); assertEquals(one, e3); assertNull(e4);
assertEquals(4, map.size()); assertFalse(map.containsKey(five));
assertEquals(5, s.size()); assertTrue(s.contains("A")); assertTrue(s.contains("B")); assertTrue(s.contains("C")); assertTrue(s.contains("D")); assertTrue(s.contains("E"));
assertEquals(last, one); assertTrue(last.compareTo(k) < 0); assertEquals(5, count);
assertEquals(5, s.size()); assertTrue(s.contains(one)); assertTrue(s.contains(two)); assertTrue(s.contains(three)); assertTrue(s.contains(four)); assertTrue(s.contains(five));
assertEquals(four, e1.getKey()); assertEquals(one, e2.getKey()); assertNull(e3); assertNull(e4);
assertTrue(map.containsKey(one)); assertFalse(map.containsKey(zero));
assertEquals(three, e1.getKey()); assertEquals(five, e2.getKey()); assertEquals(one, e3.getKey()); assertNull(e4);
assertTrue(map.containsKey(six));
assertEquals(5, empty.size()); assertTrue(empty.containsKey(one)); assertTrue(empty.containsKey(two)); assertTrue(empty.containsKey(three)); assertTrue(empty.containsKey(four)); assertTrue(empty.containsKey(five));
assertEquals(last, five); assertTrue(last.compareTo(k) > 0); assertEquals(5, count);
assertEquals(5, s.size()); assertTrue((e.getKey().equals(one) && e.getValue().equals("A")) || (e.getKey().equals(two) && e.getValue().equals("B")) || (e.getKey().equals(three) && e.getValue().equals("C")) || (e.getKey().equals(four) && e.getValue().equals("D")) || (e.getKey().equals(five) && e.getValue().equals("E")));
assertEquals(five, map.lastKey());
assertEquals(1, put);
assertTrue(deltaNowEvent1 <= 5);
assertNotNull(cache1.get(testValue2.pkey)); assertNotNull(cache2.get(testValue2.pkey));
assertNull(missing);
assertEquals(0, fired);
assertEquals(testValue, cache2.get(testValue.pkey));
assertEquals(1, read); assertEquals("FIXTURE:loaded_TEST", test);
assertNotNull(mache.get("TEST")); assertNotNull(mache.get("TEST")); assertNotNull(mache.get("TEST")); assertEquals("Expected loader to have only been called once (the first time)", 1, read);
assertEquals(1, fired);
assertThat(bytesToHexDump(new byte[]{0, 0, 0, 0})).isEqualTo("00 00 00 00");
assertThat(bytesToHexDump(new byte[]{(byte) 0xed, (byte) 0xfe, 7})).isEqualTo("ed fe 07");
assertThat(bytesToHexDump("hello".getBytes())).isEqualTo("68 65 6c 6c 6f");
assertNull(contextMap.get(ATTRIBUTE_NAME)); assertNull(contextMap.get(ATTRIBUTE_NAME)); assertEquals((byte) 1, contextMap.get(ATTRIBUTE_NAME)); assertEquals((byte) 50, contextMap.get(ATTRIBUTE_NAME)); assertEquals((byte) 100, contextMap.get(ATTRIBUTE_NAME));
assertTrue(Arrays.equals(etalon, array));
assertNull(result);
assertFalse(result);
assertEquals("1", td.getAttribute("colspan")); assertEquals("footerFacet", td.getElementById("dataGrid:footerFacet").getTextContent());
assertTrue(result);
assertTrue(s1.getCount() == 1); assertTrue(s2.getCount() == 2); assertTrue(s3.getCount() == 3); assertTrue(s4.getCount() == 4);
assertFalse(FocusRendererUtils.isFocusEnforced(facesContext));
assertNull(column1Attributes.get("filterValue")); assertEquals("filterValue2", column2Attributes.get("filterValue")); assertEquals("filterValue1", column1Attributes.get("filterValue")); assertEquals("filterValue2", column2Attributes.get("filterValue")); assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId));
assertEquals(AbstractExtendedDataTable.class, renderer.getComponentClass());
assertEquals("1", th.getAttribute("colspan")); assertEquals("headerFacet", th.getElementById("dataGrid:headerFacet").getTextContent());
assertSame(strings, array);
assertEquals(form, result);
assertEquals(form, result);
assertNull(componentAttributes.get("columnsOrder")); assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId)); assertTrue(Arrays.equals(new String[] { "column2", "column1" }, (String[]) componentAttributes.get("columnsOrder")));
assertEquals(AbstractDataGrid.class, renderer.getComponentClass());
assertEquals(clientId, attributes.get(FocusManager.FOCUS_CONTEXT_ATTRIBUTE)); assertTrue(attributes.containsKey(FocusManager.FOCUS_CONTEXT_ATTRIBUTE)); assertTrue(FocusRendererUtils.isFocusEnforced(facesContext));
assertTrue(RichFunction.isUserInRole("admin, user, root")); assertTrue(RichFunction.isUserInRole(set)); assertFalse(RichFunction.isUserInRole("auditor")); assertFalse(RichFunction.isUserInRole(null));
assertEquals("rf-dg", dataGrid.getAttribute("class")); assertEquals("noDataFacet", ((HtmlElement) dataGrid .getFirstByXPath("tbody/tr[@class=\'rf-dg-nd\']/td[@class=\'rf-dg-nd-c\']/*[@id=\'dataGrid2:noDataFacet\']")) .getTextContent());
assertNull(result);
assertNull(column1Attributes.get("sortOrder")); assertEquals(SortOrder.ascending, column2Attributes.get("sortOrder")); assertEquals(SortOrder.descending, column1Attributes.get("sortOrder")); assertEquals(SortOrder.unsorted, column2Attributes.get("sortOrder")); assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId));
assertTrue(Arrays.equals(etalon, array));
assertEquals(Integer.valueOf(200), s1.getRowCount()); assertEquals(Integer.valueOf(150), s2.getRowCount());
assertNull(RenderKitUtils.asArray(null));
assertNull(result);
assertEquals("rf-edt", table.getAttribute("class")); assertEquals("headerFacet", table.getElementById("table:headerFacet").getTextContent());
assertNull(componentAttributes.get(AbstractExtendedDataTable.SUBMITTED_CLIENT_FIRST)); assertEquals(28, componentAttributes.get(AbstractExtendedDataTable.SUBMITTED_CLIENT_FIRST)); assertTrue(facesContext.getPartialViewContext().getRenderIds() .contains(clientId + "@" + AbstractExtendedDataTable.SCROLL));
assertEquals("", escape("")); assertEquals("__a__b__", escape("_a_b_")); assertEquals("_x3a0_x3a1", escape(":0:1")); assertEquals("testTEST05", escape("testTEST05")); assertEquals("a_xa9c", escape("a\\u00a9c")); assertEquals("a_u037ec", escape("a\\u037ec")); assertEquals("a_ue1acd", escape("a\\ue1acd"));
assertEquals("value", ((HtmlElement) dataGrid .getFirstByXPath("tbody/tr[@class=\'rf-dg-r\']/td[@class=\'rf-dg-c\']/*[@id=\'dataGrid:0:outputText\']")) .getTextContent());
assertEquals(form, result);
assertNull(column1Attributes.get("sortOrder")); assertEquals(SortOrder.ascending, column2Attributes.get("sortOrder")); assertEquals(SortOrder.ascending, column1Attributes.get("sortOrder")); assertEquals(SortOrder.ascending, column2Attributes.get("sortOrder")); assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId));
assertEquals("rf-dg-body", ((HtmlElement) dataGrid.getFirstByXPath("tbody[@id=\'dataGrid2:dgb\']")).getAttribute("class"));
assertTrue(30 == s1.getIndex()); assertTrue(100 == s2.getIndex());
assertFalse(result);
assertNull(column1Attributes.get("filterValue")); assertEquals("filterValue2", column2Attributes.get("filterValue")); assertEquals("filterValue1", column1Attributes.get("filterValue")); assertNull(column2Attributes.get("filterValue")); assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId));
assertTrue(Arrays.equals(etalon, array));
assertNull(contextMap.get(ATTRIBUTE_NAME)); assertNotNull(contextMap.get(ATTRIBUTE_NAME)); assertNull(contextMap.get(ATTRIBUTE_NAME));
assertTrue(Arrays.equals(etalon, strings));
assertNull(column1Attributes.get("width")); assertEquals("200px", column1Attributes.get("width"));
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my-key-message", fieldMap.get(LOG_KEY_MESSAGE)); assertEquals("bar", fieldMap.get("foo")); assertNotNull(logRecord.getTimestamp());
assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(1, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey("a-key").setStringValue("v").build(), grpcSpan.getTags(0)); assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(2, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey("b-key").setStringValue("v").build(), grpcSpan.getTags(1));
assertEquals("1", undertest.context().toTraceId()); assertEquals("2", undertest.context().toSpanId());
assertNull(result);
assertSame(result, undertest); assertTrue("When key is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertEquals(0L, grpcSpan.getDurationMicros()); assertNotEquals(0L, grpcSpan.getDurationMicros());
assertEquals(headers.get("X-B3-Sampled"), "1");
assertNull(span);
assertEquals(finishTimeMicros, grpcSpan.getDurationMicros());
assertNull(undertest.getBaggageItem("a-key")); assertEquals("v", undertest.getBaggageItem("a-key")); assertNull(undertest.getBaggageItem("bogus"));
assertSame(result, undertest); assertTrue("When key is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertNotNull(span); assertEquals(span.toSpanId(), "12345"); assertEquals(span.toTraceId(), "67890");
assertSame(result, undertest); assertTrue("When value is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my-key-event", fieldMap.get(LOG_KEY_EVENT)); assertEquals("bar", fieldMap.get("foo")); assertNull(fieldMap.get("payload")); assertNotNull(logRecord.getTimestamp());
assertNull(result);
assertNotNull(result); assertFalse(iterator.hasNext());
assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(1, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey(Tags.COMPONENT.getKey()).setStringValue("mytest").build(), grpcSpan.getTags(0));
assertNotNull(HttpCollectorClientProvider.provider());
assertEquals(String.valueOf(TRACE_ID), undertest.context().toTraceId()); assertEquals(String.valueOf(SPAN_ID), undertest.context().toSpanId());
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my-key-event", fieldMap.get(LOG_KEY_EVENT)); assertEquals("bar", fieldMap.get("foo")); assertEquals(100L, Util.protoTimeToEpochMicros(logRecord.getTimestamp()));
assertEquals(EXPECTED_VALUE, undertest.get());
assertNotNull(span); assertEquals(span.getSpanId(), 1); assertEquals(span.getTraceId(), 2);
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my message", fieldMap.get("message")); assertNull(fieldMap.get("payload")); assertNotNull(logRecord.getTimestamp());
assertSame(result, undertest); assertTrue("When value is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertSame(result, undertest); assertTrue("When key is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertTrue(propagatorStack.propagators.isEmpty()); assertEquals(propagatorStack.format(), format);
assertNull(spanContext);
assertEquals(i, clockState.activeSampleCount());
assertSame(spanContext, undertest.context());
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my message", fieldMap.get("message")); assertNull(fieldMap.get("payload")); assertEquals(100L, Util.protoTimeToEpochMicros(logRecord.getTimestamp()));
assertEquals(0L, grpcSpan.getDurationMicros()); assertNotEquals(0L, grpcSpan.getDurationMicros());
assertSame(result, undertest); assertEquals("my-operation", grpcSpan.getOperationName());
assertNotNull(provider); assertEquals(HttpCollectorClientProvider.provider().getClass(), provider.getClass());
assertNull(undertest.getWithTimeout(100L));
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertNull(fieldMap.get(LOG_KEY_MESSAGE)); assertEquals("bar", fieldMap.get("foo")); assertEquals(100L, Util.protoTimeToEpochMicros(logRecord.getTimestamp()));
assertNotNull(provider); assertEquals(GrpcCollectorClientProvider.provider().getClass(), provider.getClass()); assertEquals(Collections.singletonList( "expected HTTP collector client was not present in classpath. Using GRPC instead."), log);
assertTrue(propagatorStack.propagators.isEmpty()); assertEquals(propagatorStack.format(), Builtin.TEXT_MAP);
assertSame(result, undertest); assertTrue("When the tag is null, should not be added to attributes", grpcSpan.getTagsList().isEmpty());
assertEquals(EXPECTED_VALUE, undertest.getWithTimeout(1L));
assertNotEquals(0L, options.getGuid());
assertEquals(propagatorStack.pushPropagator(Propagator.HTTP_HEADERS), propagatorStack); assertEquals(propagatorStack.pushPropagator(b3Propagator), propagatorStack); assertEquals(propagatorStack.propagators.size(), 2); assertEquals(propagatorStack.propagators.get(0), Propagator.HTTP_HEADERS); assertEquals(propagatorStack.propagators.get(1), b3Propagator);
assertNotSame(oldOptions, newOptions); assertEquals(111, newOptions.maxReportingIntervalMillis);
assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(1, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey(LightStepConstants.Tags.COMPONENT_NAME_KEY).setStringValue("custom").build(), grpcSpan.getTags(0));
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertEquals("my-key-message", fieldMap.get(LOG_KEY_MESSAGE)); assertEquals("bar", fieldMap.get("foo")); assertEquals(100L, Util.protoTimeToEpochMicros(logRecord.getTimestamp()));
assertSame(NoopSpan.INSTANCE, result);
assertNull(span);
assertSame(oldOptions, newOptions); assertEquals(MAX_REPORTING_INTERVAL_MILLIS, newOptions.maxReportingIntervalMillis);
assertSame(result, undertest); assertEquals("v", undertest.getBaggageItem("a-key")); assertNotSame(spanContext, undertest.context());
assertNotNull(otSpan); assertTrue(otSpan instanceof Span); assertTrue(lsSpan.getStartTimestampRelativeNanos() + " was not greater than zero", lsSpan.getStartTimestampRelativeNanos() > 0); assertTrue(lsSpan.getGrpcSpan().getStartTimestamp() + " was not greater than zero", Util.protoTimeToEpochMicros(lsSpan.getGrpcSpan().getStartTimestamp()) > 0);
assertNull(spanContext);
assertEquals(null, fieldMap.get(null));
assertEquals("", fieldMap.get("mykey1"));
assertSame(result, undertest);
assertNotNull(GrpcCollectorClientProvider.provider());
assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(1, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey("a-key").setIntValue(3).build(), grpcSpan.getTags(0));
assertSame(result, undertest); assertEquals(1, grpcSpan.getLogsCount()); assertNull(fieldMap.get(LOG_KEY_MESSAGE)); assertEquals("bar", fieldMap.get("foo")); assertNotNull(logRecord.getTimestamp());
assertNotNull(provider); assertEquals(GrpcCollectorClientProvider.provider().getClass(), provider.getClass());
assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(1, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey("a-key").setBoolValue(true).build(), grpcSpan.getTags(0)); assertSame(result, undertest); assertNotNull(grpcSpan.getTagsList()); assertEquals(2, grpcSpan.getTagsCount()); assertEquals(KeyValue.newBuilder().setKey("b-key").setBoolValue(true).build(), grpcSpan.getTags(1));
assertNotNull(span); assertEquals(span.getSpanId(), 1); assertEquals(span.getTraceId(), 2);
assertEquals("U023BECGF", u.getUserId()); assertEquals("bobby@slack.com", u.getEmail()); assertEquals("bobby", u.getMentionName()); assertEquals("Bobby Tables", u.getName());
assertEquals(expectedDate, underTest.getLastMessagePullTime()); assertEquals(expectedDate, underTest.getLastMessagePullTime());
assertTrue(result.isEmpty());
assertEquals(4, ldm.getLabels().size()); assertEquals(4, ldm.getMatrix().length);
assertEquals(4, result.size()); assertEquals(3, result.size()); assertEquals(2, result.size());
assertEquals(2, result);
assertNotNull(users); assertFalse(users.isEmpty());
assertEquals(1, result.size());
assertEquals(2, result.getLabels().size()); assertEquals(2, result.getMatrix().length);
assertEquals(sums.size(), result); assertEquals(1, result); assertEquals(3, result); assertEquals(2, result);
assertEquals(3, result); assertEquals(1, result); assertEquals(2, result); assertEquals(2, result); assertEquals(3, result); assertEquals(2, result);
assertFalse(scores.isEmpty());
assertEquals(2, underTest.numSessions()); assertEquals(1, underTest.numSessions());
assertEquals(2, result.size()); assertEquals(0.75, result.get("giannis"), 0); assertEquals(0.25, result.get("jane"), 0); assertEquals(2, result.size()); assertEquals(0.15, result.get("giannis"), 0); assertEquals(0.05, result.get("jane"), 0);
assertNotNull(emojis); assertFalse(emojis.isEmpty());
assertEquals(emojis.size(), result.size()); assertTrue(resultEmojiSet.contains(expectedEmoji));
assertEquals(4, result.size()); assertEquals(3, result.size()); assertEquals(2, result.size());
assertNotNull(cli);
assertFalse(scores.isEmpty());
assertTrue(result.isEmpty());
assertEquals(1, rooms.size()); assertNotNull(room);
assertFalse(scores.isEmpty());
assertEquals(expectedDateTime, dateTime);
assertArrayEquals(Matrices.getArray(R_e), Matrices.getArray(R));
assertEquals(expectedResult, result);
assertFalse(scores.isEmpty());
assertEquals(length, result.length()); assertEquals(length, result.length());
assertEquals(2, result.size()); assertEquals(3L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue()); assertEquals(2, result.size()); assertEquals(2L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue()); assertEquals(2, result.size()); assertEquals(1L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue());
assertFalse(scores.isEmpty());
assertEquals("OK", result);
assertEquals(2, rooms.size()); assertNotNull(room);
assertFalse(scores.isEmpty());
assertEquals(exception, e.getCause());
assertEquals(ImmutableList.of(), ResourceUtils.getListFromNullable(null)); assertEquals(test, ResourceUtils.getListFromNullable(test));
assertTrue(emojis.isEmpty());
assertEquals(users.get("id1"), result);
assertEquals(expectedResult, result);
assertEquals(Optional.absent(), result); assertEquals(Optional.absent(), result); assertEquals(value, result.get().booleanValue());
assertEquals(1, underTest.numSessions()); assertEquals(0, underTest.numSessions());
assertNotNull(result); assertTrue(result.isEmpty());
assertFalse(scores.isEmpty());
assertEquals(2, result.getLabels().size()); assertEquals(2, result.getMatrix().length);
assertEquals(2, result.getLabels().size()); assertEquals(2, result.getMatrix().length);
assertNotNull(message);
assertEquals(emojis, result.getCustomEmojis()); assertNotNull(result.getUnicodeEmojis()); assertEquals(expectedUnicodeEmojis, result.getUnicodeEmojis());
assertFalse(scores.isEmpty());
assertEquals(entities.size(), result.size()); assertTrue(resultEntitySet.contains(expectedEntity));
assertEquals(2, result.size()); assertEquals(0.5, result.get("room1"), 0); assertEquals(0.5, result.get("room2"), 0); assertEquals(2, result.size()); assertEquals(1.0, result.get("room1"), 0); assertEquals(1.0, result.get("room2"), 0);
assertEquals(configValue, configResult);
assertEquals(Optional.absent(), result); assertEquals(Optional.absent(), result); assertEquals(param, result.get());
assertNotNull(options); assertEquals(1, options.getOptions().size());
assertFalse(server.isRunning());
assertFalse(underTest.willDecode(null)); assertFalse(underTest.willDecode("")); assertTrue(underTest.willDecode("PUBLISHER"));
assertFalse(scores.isEmpty());
assertEquals(4, ldm.getLabels().size()); assertEquals(4, ldm.getMatrix().length);
assertEquals(3, result.size()); assertTrue(result.containsKey("bowtie")); assertEquals("https: assertTrue(result.containsKey("squirrel")); assertEquals("https: assertTrue(result.containsKey("shipit"));
assertFalse(underTest.getAsBooleanOrFalse(null)); assertTrue(underTest.getAsBooleanOrFalse(mockNode));
assertEquals(2, result.size()); assertEquals(3L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue()); assertEquals(2, result.size()); assertEquals(2L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue()); assertEquals(2, result.size()); assertEquals(1L, result.get("e1").longValue()); assertEquals(1L, result.get("e2").longValue());
assertEquals(0, underTest.getTotalMentionsForEmoji("unknownemoji", timeInterval, ImmutableList.of(), ImmutableList.of(), true)); assertEquals(3, result); assertEquals(2, result); assertEquals(1, result);
assertEquals(4, result);
assertNull(underTest.getValue(emoji)); assertNotNull(underTest.getValue(emoji));
assertFalse(underTest.willDecode(null)); assertFalse(underTest.willDecode("")); assertTrue(underTest.willDecode("{}"));
assertEquals(1, entities.size()); assertNull(entities.get(0).getRoomName());
assertEquals(2, result.size()); assertEquals(0.75, result.get("room1"), 0); assertEquals(0.25, result.get("room2"), 0); assertEquals(2, result.size()); assertEquals(0.15, result.get("room1"), 0); assertEquals(0.05, result.get("room2"), 0);
assertEquals(2, users.size()); assertNotNull(user);
assertEquals(4, ldm.getLabels().size()); assertEquals(4, ldm.getMatrix().length);
assertNotNull(rooms); assertFalse(rooms.isEmpty());
assertEquals(2, result.size());
assertNull(underTest.getAsTextOrNull(null)); assertEquals(returnValue, underTest.getAsTextOrNull(mockNode));
assertTrue(ChatAPIFactory.getChatApiDao(config) instanceof JsonSlackDAO); assertTrue(ChatAPIFactory.getChatApiDao(config) instanceof JsonSlackDAO); assertTrue(ChatAPIFactory.getChatApiDao(config) instanceof JsonHipChatDAO); assertTrue(ChatAPIFactory.getChatApiDao(config) instanceof LocalChatDao);
assertTrue(result.isEmpty());
assertEquals(expectedResult, result);
assertFalse(scores.isEmpty());
assertNotNull(result); assertFalse(result.isEmpty()); assertEquals(expected, result);
assertNotNull(server);
assertEquals(2, result.size()); assertEquals(0.75, result.get("giannis"), 0); assertEquals(0.25, result.get("jane"), 0); assertEquals(2, result.size()); assertEquals(0.15, result.get("giannis"), 0); assertEquals(0.05, result.get("jane"), 0);
assertEquals(3, result.size()); assertEquals(2, result.size()); assertEquals(1, result.size());
assertEquals(length, result.length()); assertEquals(strBuilder.toString(), result);
assertTrue(server.isRunning()); assertFalse(server.isRunning());
assertEquals(2, result.getLabels().size()); assertEquals(2, result.getMatrix().length);
assertEquals(1, entities.size()); assertEquals(2, entities.get(0).getOccurrences());
assertEquals(2, result.size()); assertEquals(0.75, result.get("room1"), 0); assertEquals(0.25, result.get("room2"), 0); assertEquals(2, result.size()); assertEquals(0.15, result.get("room1"), 0); assertEquals(0.05, result.get("room2"), 0);
assertEquals(DateTimeUtils.getDateTimeFromParameter(startTime, dtz), interval.getStart()); assertEquals(DateTimeUtils.getDateTimeFromParameter(endTime, dtz), interval.getEnd());
assertTrue(result.isEmpty());
assertFalse(scores.isEmpty());
assertEquals(0, underTest.getTotalMentionsForEntity("unknownentity", timeInterval, ImmutableList.of(), ImmutableList.of(), true)); assertEquals(3, result); assertEquals(2, result); assertEquals(1, result);
assertEquals(event, decodedEvent);
assertEquals(event, decodedEvent);
assertEquals(Optional.absent(), result); assertEquals(Optional.absent(), result); assertEquals(value, result.get().intValue());
assertTrue(underTest.willDecode(messageJsonStr)); assertFalse(underTest.willDecode("{\\"type\\": \\"hello\\"}")); assertFalse(underTest.willDecode("bad message string"));
assertEquals(expectedResult, result);
assertEquals(3, result.size()); assertEquals(2, result.size()); assertEquals(1, result.size());
assertEquals(sums.size(), result.size()); assertTrue(resultMessageSummarySet.contains(expectedMessageSummary)); assertEquals(1, result.size()); assertEquals(BOT_MESSAGE, result.get(0).getValue());
assertEquals(4, ldm.getLabels().size()); assertEquals(4, ldm.getMatrix().length);
assertEquals(rooms.get("r1"), result);
assertNotNull(result); assertEquals(msgSummary.getMentionTime(), result.getMentionTime()); assertEquals(1, result.getOccurrences()); assertEquals(msgSummary.getRoomName(), result.getRoomName()); assertEquals(msgSummary.getUsername(), result.getUsername()); assertEquals(msgSummary.getValue(), result.getValue());
assertFalse(scores.isEmpty());
assertTrue(project.isFolder()); assertTrue(computedPath.isEmpty());
assertThat(readContent(inputFile), equalTo(CONTENT));
assertThat(links, containsInAnyOrder(expectedLinkA, expectedLinkB));
assertThat(AFTER_SETTER, this.arguments.getNewline(), equalTo(value));
assertThat(this.context.getImportSettings(), sameInstance(this.settingsMock));
assertThat(view, instanceOf(HtmlTraceSummary.class));
assertThat(view, instanceOf(HtmlSection.class));
assertThat(view, instanceOf(HtmlTableOfContents.class));
assertThat(writer.getNamespaceContext(), sameInstance(contextMock));
assertThat(factory, notNullValue());
assertThat(readContent(inputFile), equalTo(CONTENT));
assertThat(writer.getBuffer().toString(), equalTo( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<specdocument>\\n <specobjects doctype=\\"art\\">\\n <specobject>\\n <id>name</id>\\n <status>approved</status>\\n <version>42</version>\\n </specobject>\\n </specobjects>\\n</specdocument>"));
assertThat(formatAsSpan(Location.create("", 1)), equalTo(""));
assertThat(this.builder.build().getOutputFormat(), equalTo(ExporterConstants.DEFAULT_OUTPUT_FORMAT));
assertThat(BEFORE_SETTER, this.arguments.getWantedArtifactTypes(), emptyIterable());
assertThat(this.builder.verbosity(ReportVerbosity.ALL).build().getReportVerbosity(), equalTo(ReportVerbosity.ALL));
assertThat(readContent(inputFile), equalTo(CONTENT));
assertThat(builder.build().toString(), equalTo("dsn~dummy~" + SpecificationItemId.REVISION_WILDCARD));
assertThat("builder with path set to null is complete", builder.isCompleteEnough(), equalTo(true));
assertThat(this.linkedItem.getArtifactType(), equalTo(expectedArtifactType));
assertThat(view, instanceOf(HtmlSpecificationItem.class));
assertThat(this.builder.newline(Newline.OLDMAC).build().getNewline(), equalTo(Newline.OLDMAC));
assertThat(id, equalTo(new Builder().artifactType(ARTIFACT_TYPE_FEATURE).name(NAME) .revision(Integer.MIN_VALUE).build()));
assertThat(this.builder.build().getOutputFormat(), equalTo("plain"));
assertThat(BEFORE_SETTER, this.arguments.getReportVerbosity(), equalTo(ReportConstants.DEFAULT_REPORT_VERBOSITY)); assertThat(AFTER_SETTER, this.arguments.getReportVerbosity(), equalTo(value));
assertThat(location.getPath(), equalTo(expectedPath)); assertThat(location.getLine(), equalTo(expectedLine)); assertThat(location.getColumn(), equalTo(expectedColumn));
assertThat(this.linkedItem.getName(), equalTo(expectedName));
assertThat(exception.getMessage(), equalTo("Found no matching reporter for output format \'plain\'"));
assertThat(this.arguments.getShowOrigin(), is(true));
assertThat(oftRunner.importItems(), sameInstance(importedItems));
assertThat(this.builder.build().getNewline(), equalTo(Newline.UNIX));
assertThat(this.builder.build().showOrigin(), equalTo(false));
assertThat(writer.getProperty(PROPERTY_NAME), equalTo(PROPERTY_VALUE));
assertThat(this.arguments.getShowOrigin(), is(false));
assertThat(this.linkedItem.getTitle(), equalTo("title"));
assertThat(BEFORE_SETTER, this.arguments.getOutputPath(), equalTo(null)); assertThat(AFTER_SETTER, this.arguments.getOutputPath().toString(), equalTo(expectedPath));
assertThat(this.linkedItem.countDuplicateLinks(), equalTo(2));
assertThat(this.linkedItem.hasLinks(), equalTo(false));
assertThat(ChecksumCalculator.calculateCrc32("abcd"), equalTo(3984772369L));
assertThat("builder with empty path is complete", builderA.isCompleteEnough(), equalTo(false)); assertThat("builder with path set to null is complete", builderB.isCompleteEnough(), equalTo(false));
assertThat(this.arguments.getShowOrigin(), is(true));
assertThat(AFTER_SETTER, this.arguments.getWantedTags(), containsInAnyOrder("client", "server"));
assertThat(this.builder.outputFormat("foo").build().getOutputFormat(), equalTo("foo"));
assertThat(new ReporterContext(settings).getSettings(), sameInstance(settings));
assertThat(view, instanceOf(HtmlReportSummary.class));
assertThat(id.toRevisionWildcard().getRevision(), equalTo(SpecificationItemId.REVISION_WILDCARD));
assertThat(ChecksumCalculator.calculateCrc32(""), equalTo(0L));
assertThat(AFTER_SETTER, this.arguments.getWantedArtifactTypes(), containsInAnyOrder("impl", "utest"));
assertThat(readContent(inputFile), equalTo(CONTENT));
assertThat(this.context.getImporterService(), sameInstance(this.importerServiceMock));
assertThat(oftRunner.link(importedItems), sameInstance(linkedItems));
assertThat(id, equalTo(new Builder().artifactType(ARTIFACT_TYPE_FEATURE).name(NAME) .revision(REVISION).build()));
assertThat(this.linkedItem.getRevision(), equalTo(expectedRevision));
assertThat(AFTER_SETTER, this.arguments.getNewline(), equalTo(value));
assertThat(this.builder.newline(Newline.OLDMAC).build().getNewline(), equalTo(Newline.OLDMAC));
assertThat(writer.getPrefix(NAMESPACE_URI), equalTo(PREFIX));
assertThat(builder.build().toString(), equalTo("dsn~dummy~3"));
assertThat(this.builder.build().getNewline(), equalTo(Newline.UNIX));
assertThat(exception.getMessage(), equalTo("Found no matching exporter for output format \'specobject\'"));
assertThat(oftRunner.trace(linkedItems), sameInstance(traceMock));
assertThat(view, instanceOf(HtmlReportDetails.class));
assertThat(this.linkedItem.getLinksByStatus(LinkStatus.AMBIGUOUS), empty());
assertThat(this.linkedItem.getItem(), equalTo(this.itemMock));
assertThat(BEFORE_SETTER, this.arguments.getWantedTags(), emptyIterable());
assertThat(this.linkedItem.hasLinks(), equalTo(true));
assertThat(this.builder.showOrigin(true).build().showOrigin(), equalTo(true));
assertThat(BEFORE_SETTER, this.arguments.getOutputPath(), equalTo(null)); assertThat(AFTER_SETTER, this.arguments.getOutputPath().toString(), equalTo(expectedPath));
assertThat(formatAsSpan(null), equalTo(""));
assertThat(this.builder.build().getReportVerbosity(), equalTo(ReportVerbosity.FAILURE_DETAILS));
assertThat(readContent(inputFile), equalTo(CONTENT));
assertThat(oftRunner.importItems(importSettings), sameInstance(importedItems));
assertThat(this.builder.outputFormat("html").build().getOutputFormat(), equalTo("html"));
assertNotNull(beacon);
assertNotNull(beacon);
assertNotNull(beacon);
assertEquals(2, repoUnderTest.getRatesList(MY_PATH).size());
assertEquals(3, repoUnderTest.getTransactionsPerSku(MY_PATH, SKU).size());
assertEquals(0, mGraphDomain.getSize());
assertNotNull(retVxGroupList); assertEquals(groupList.getClass(),retVxGroupList.getClass()); assertEquals(groupList.getResultSize(),retVxGroupList.getResultSize());
assertEquals(getMessage(row), result, matcher.isMatch(resource, evalContext));
assertNotNull(outputvXGroupList); assertEquals(outputvXGroupList.getClass(),testVXGroupUserList.getClass()); assertEquals(outputvXGroupList.getResultSize(),testVXGroupUserList.getResultSize());
assertNull(retVxGroup);
assertNull(retVxGroup);
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getClass(),compareTestVXGroup.getClass()); assertEquals(compareTestVXGroup.getId(),compareTestVXGroup.getId());
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertFalse("Graph was valid!", _helper.isResourceGraphValid());
assertEquals(returnedZonesList.getResultSize(), rangerZoneList.getList().size());
assertNotNull(retVxGroupUser); assertEquals(testVXGroupUser.getClass(),retVxGroupUser.getClass()); assertEquals(testVXGroupUser.getId(),retVxGroupUser.getId());
assertNotNull(testvxLong);
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertTrue(_validator.isValidServiceDefId(null, Action.CREATE, _failures)); assertTrue(_failures.isEmpty()); assertTrue(_validator.isValidServiceDefId(id, Action.UPDATE, _failures)); assertTrue(_failures.isEmpty());
assertEquals("PassworD123", password);
assertNotNull(gotVXUserGroupInfo); assertEquals(vXUserGroupInfo.getId(), gotVXUserGroupInfo.getId()); assertEquals(vXUserGroupInfo.getOwner(), gotVXUserGroupInfo.getOwner());
assertEquals("test user", userNameRegEx.transform("test user")); assertEquals("ldap grp", groupNameRegEx.transform("ldap grp"));
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getClass(),retVxGroup.getClass()); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId());
assertTrue(branches.isEmpty()); assertThat(branches.size(), is(1)); assertThat(branches.get(0), is("MASTER"));
assertEquals(testvXAuditMap.getId(),retVXAuditMap.getId()); assertEquals(testvXAuditMap.getClass(),retVXAuditMap.getClass()); assertNotNull(retVXAuditMap);
assertEquals(testvXAuditMap.getId(),retvXAuditMap.getId()); assertEquals(testvXAuditMap.getClass(),retvXAuditMap.getClass()); assertNotNull(retvXAuditMap);
assertNotNull(retVXGroupPermission); assertEquals(retVXGroupPermission.getId(), testVXGroupPermission.getId()); assertEquals(retVXGroupPermission.getClass(), testVXGroupPermission.getClass());
assertNull(retVXAuditMap);
assertTrue(url.equals(providers.get(0).toString()));
assertEquals(securityZoneName, rangerSecurityZone.getName());
assertEquals(accessControlManager.filterCatalogs(context(alice), allCatalogs), allCatalogs); assertEquals(accessControlManager.filterCatalogs(context(bob), allCatalogs), bobCatalogs);
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId()); assertEquals(compareTestVXGroup.getName(),retVxGroup.getName());
assertNotNull(retVxModuleDef); assertEquals(testVXModuleDef.getId(),retVxModuleDef.getId()); assertEquals(testVXModuleDef.getOwner(),retVxModuleDef.getOwner());
assertTrue(SecurityUtils.isKerberosEnabled(conf)); assertFalse(SecurityUtils.isKerberosEnabled(conf)); assertFalse(SecurityUtils.isKerberosEnabled(conf)); assertFalse(SecurityUtils.isKerberosEnabled(conf)); assertFalse(SecurityUtils.isKerberosEnabled(conf)); assertFalse(SecurityUtils.isKerberosEnabled(conf));
assertEquals(testvXAuditMap.getId(),retvXAuditMap.getId()); assertEquals(testvXAuditMap.getClass(),retvXAuditMap.getClass()); assertNotNull(retvXAuditMap);
assertNotNull(retVXGroupPermission); assertEquals(retVXGroupPermission.getId(), testVXGroupPermission.getId()); assertEquals(retVXGroupPermission.getClass(), testVXGroupPermission.getClass());
assertEquals(getMessage(row), result, matcher.isMatch(resource, evalContext));
assertEquals(testvXAuditMap.getId(),retVXAuditMap.getId()); assertEquals(testvXAuditMap.getClass(),retVXAuditMap.getClass()); assertNotNull(retVXAuditMap);
assertNotNull(retVXStringList); assertEquals(testVXStringList.getTotalCount(), retVXStringList.getTotalCount()); assertEquals(testVXStringList.getClass(), retVXStringList.getClass());
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertNull(string0);
assertNotNull(retVXUserPermission); assertEquals(retVXUserPermission.getId(), testvXUserPermission.getId()); assertEquals(retVXUserPermission.getUserName(), testvXUserPermission.getUserName());
assertNull(SecurityUtils.getJaasConfigForClientPrincipal(conf)); assertNull(SecurityUtils.getJaasConfigForClientPrincipal(conf)); assertEquals(actual, expected);
assertNotNull(outputvXGroupGroupList); assertEquals(outputvXGroupGroupList.getClass(),testvXGroupGroupList.getClass()); assertEquals(outputvXGroupGroupList.getResultSize(),testvXGroupGroupList.getResultSize());
assertEquals(1, res.size()); assertThat(res, is(expected)); assertEquals(0, res.size());
assertNotNull(encryptedPassword); assertEquals("ljoJ3gf4T018Xr+BujPAqBDW8Onp1PqprsLKmxus8pGGBETtAVU6OQ==", encryptedPassword);
assertNotNull(gotVXUser); assertEquals(vxUser.getId(), gotVXUser.getId()); assertEquals(vxUser.getName(), gotVXUser.getName());
assertNotNull(retVxGroupList); assertEquals(testVXUserList.getTotalCount(),retVxGroupList.getTotalCount()); assertEquals(testVXUserList.getStartIndex(),retVxGroupList.getStartIndex());
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertNotNull(outputVXAuditMapList); assertEquals(outputVXAuditMapList.getClass(),testVXAuditMapList.getClass()); assertEquals(outputVXAuditMapList.getResultSize(),testVXAuditMapList.getResultSize());
assertNotNull(retVXStringList); assertEquals(testVXStringList.getTotalCount(), retVXStringList.getTotalCount()); assertEquals(testVXStringList.getClass(), retVXStringList.getClass());
assertNotNull(retVxModuleDef); assertEquals(testVXModuleDef.getId(),retVxModuleDef.getId()); assertEquals(testVXModuleDef.getOwner(),retVxModuleDef.getOwner());
assertThat(schemas.size(), is(2)); assertTrue(schemas.contains("Schema1")); assertTrue(schemas.contains("Schema2"));
assertNull(retvXAuditMap);
assertNull(retvXAuditMap);
assertNotNull(testvxLong); assertEquals(testvxLong.getClass(),vXLong.getClass()); assertEquals(testvxLong.getValue(),vXLong.getValue());
assertTrue(_validator.isValidEnumElements(input, _failures, "anEnum")); assertTrue(_failures.isEmpty());
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId()); assertEquals(compareTestVXGroup.getName(),retVxGroup.getName());
assertTrue(matcher.isAllValuesRequested(resource)); assertFalse(matcher.isAllValuesRequested(resource));
assertNotNull(retVXUserPermission); assertEquals(retVXUserPermission.getId(), testVXUserPermission.getId()); assertEquals(retVXUserPermission.getUserName(), testVXUserPermission.getUserName());
assertNotNull(retVXUserPermission); assertEquals(retVXUserPermission.getId(), testvXUserPermission.getId()); assertEquals(retVXUserPermission.getUserName(), testvXUserPermission.getUserName());
assertNull(retVxGroup);
assertNotNull(retVXUser); assertEquals(compareTestVxUser.getClass(),retVXUser.getClass()); assertEquals(compareTestVxUser.getId(),retVXUser.getId());
assertEquals(testvXAuditMap.getId(),retvXAuditMap.getId()); assertEquals(testvXAuditMap.getClass(),retvXAuditMap.getClass()); assertNotNull(retvXAuditMap);
assertFalse(_validator.isValid((RangerServiceDef)null, action, _failures));
assertEquals(testVXAuthSession.getId(), retVXAuthSession.getId()); assertEquals(testVXAuthSession.getClass(), retVXAuthSession.getClass()); assertNotNull(retVXAuthSession);
assertNotNull(retVxGroupUser); assertEquals(testVXGroupUser.getClass(),retVxGroupUser.getClass()); assertEquals(testVXGroupUser.getId(),retVxGroupUser.getId());
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId()); assertEquals(compareTestVXGroup.getName(),retVxGroup.getName());
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertEquals(testvxLong.getClass(),vXLong.getClass()); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertNotNull(testvxLong);
assertFalse(_helper.isResourceGraphValid());
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getClass(),retVxGroup.getClass()); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId());
assertNotNull(retVxGroupUser); assertEquals(testVXGroupUser.getClass(),retVxGroupUser.getClass()); assertEquals(testVXGroupUser.getId(),retVxGroupUser.getId());
assertNotNull(retVXStringList); assertEquals(testVXStringList.getTotalCount(), retVXStringList.getTotalCount()); assertEquals(testVXStringList.getClass(), retVXStringList.getClass());
assertThat(groups.size(), is(3)); assertTrue(groups.contains("Group1")); assertTrue(groups.contains("Group2")); assertTrue(groups.contains("Group3"));
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertNotNull(retVXStringList); assertEquals(testVXStringList.getTotalCount(), retVXStringList.getTotalCount()); assertEquals(testVXStringList.getClass(), retVXStringList.getClass());
assertNotNull(retVxGroup); assertEquals(compareTestVXGroup.getClass(),retVxGroup.getClass()); assertEquals(compareTestVXGroup.getId(),retVxGroup.getId());
assertFalse(_validator.isValidServiceDefId(null, Action.UPDATE, _failures)); assertFalse(_validator.isValidServiceDefId(id, Action.UPDATE, _failures)); assertFalse(_validator.isValidServiceDefId(id, Action.UPDATE, _failures));
assertNotNull(result); assertTrue(result.isEmpty());
assertEquals(getMessage(row), result, matcher.isMatch(resource, evalContext));
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertNull(retvXAuditMap);
assertEquals(securityZoneId, rangerSecurityZone.getId());
assertNotNull(retVXGroupPermission); assertEquals(retVXGroupPermission.getId(), testVXGroupPermission.getId()); assertEquals(retVXGroupPermission.getClass(), testVXGroupPermission.getClass());
assertTrue(authUtils.isReadAccess("read")); assertTrue(authUtils.isWriteAccess("write")); assertTrue(authUtils.isExecuteAccess("execute"));
assertEquals("test_user", userNameRegEx.transform("test user")); assertEquals("ldap_grp", groupNameRegEx.transform("ldap grp"));
assertNotNull(decryptedPassword); assertEquals("secretPasswordNoOneWillEverKnow", decryptedPassword);
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertNotNull(outputvXGroupList); assertEquals(outputvXGroupList.getClass(),testvXGroupList.getClass()); assertEquals(outputvXGroupList.getTotalCount(),testvXGroupList.getTotalCount());
assertNotNull(gotVXUser); assertEquals(vxUser.getId(), gotVXUser.getId()); assertEquals(vxUser.getName(), gotVXUser.getName());
assertFalse(result); assertFalse(_validator.isValid((Long)null, Action.DELETE, _failures)); assertTrue(_validator.isValid(id, Action.DELETE, _failures)); assertTrue(_failures.isEmpty()); assertTrue(_validator.isValid(id, Action.DELETE, _failures)); assertTrue(_failures.isEmpty());
assertNotNull(gotVXUser); assertEquals(vxUser.getId(), gotVXUser.getId()); assertEquals(vxUser.getName(), gotVXUser.getName());
assertNotNull(testvxLong); assertEquals(testvxLong.getValue(),vXLong.getValue()); assertEquals(testvxLong.getClass(),vXLong.getClass());
assertEquals(permMap.getId(),retVxGroup.getId()); assertEquals(permMap.getClass(),retVxGroup.getClass()); assertNotNull(retVxGroup);
assertEquals(0, res.size()); assertEquals(1, res.size()); assertThat(res, is(expected)); assertEquals(1, res.size()); assertThat(res, is(expected)); assertEquals(2, res.size()); assertThat(res, is(expected));
assertNotNull(retVxModuleDef); assertEquals(testVXModuleDef.getId(),retVxModuleDef.getId()); assertEquals(testVXModuleDef.getOwner(),retVxModuleDef.getOwner());
assertEquals(1, res.size()); assertThat(res, is(expected)); assertEquals(0, res.size());
assertNotNull(retVxGroupList); assertEquals(groupList.getClass(),retVxGroupList.getClass()); assertEquals(groupList.getResultSize(),retVxGroupList.getResultSize());
assertTrue(detectorRegistry.addDetector(TestDetector.class)); assertEquals(WARNINGS + 2, getWarnings());
assertTrue(productionCode.bugsAlive().isEmpty());
assertFalse(detectorRegistry.addDetector(DetectorRegistryTest.class)); assertEquals(WARNINGS, getWarnings());
assertArrayEquals(pair.bytes, pair.tlv.encodeToByteArray());
assertEquals(pair.tlv.getTag(), result.getTag());
assertFalse(outputDir1.exists()); assertFalse(outputDir2.exists()); assertFalse(outputDir3.exists()); assertTrue(outputDir1.exists()); assertTrue(outputDir2.exists()); assertFalse(outputDir3.exists());
assertThat(product.getProductReferences().size(), is(1)); assertThat(product.getProductReferences().get(0).getDataStoreReference(), is("file:/base/path/2013/03/23/test.dat"));
assertThat(nodes, is(not(nullValue()))); assertThat(nodes, hasSize(1));
assertThat(nodes, is(not(nullValue()))); assertThat(nodes, hasSize(1));
assertNotNull(wfinstances);
assertThat(product.getProductReferences().size(), is(1)); assertThat(product.getProductReferences().get(0).getDataStoreReference(), is("file:/base/path/2013/03/23/test.dat"));
assertThat(workflowlist, is(not(nullValue()))); assertThat(workflowlist.size(), is(not(0))); assertThat(instance, is(not(nullValue()))); assertThat(upd, equalTo(true));
assertNotNull(node); assertThat(node, equalTo("0/8"));
assertThat(size, equalTo(0));
assertThat(workflows, is(not(empty()))); assertNotNull(workflows.get(0).getName());
assertThat(instances, is(empty()));
assertThat(nodes, is(not(nullValue()))); assertThat(nodes, hasSize(1));
assertNotNull(testWrkInstId); assertNotNull(WInst); assertNotNull(met); assertNotNull(met.getMap()); assertEquals(2, met.getMap().keySet().size()); assertNotNull(met.getAllMetadata("key1")); assertEquals(3, met.getAllMetadata("key1").size()); assertNotNull(met.getAllMetadata("key2")); assertEquals(2, met.getAllMetadata("key2").size()); assertTrue(checkVal4 && checkVal5);
assertThat(workflowlist, is(not(nullValue()))); assertThat(workflowlist.size(), is(not(0))); assertThat(instance, is(not(nullValue()))); assertThat(clock, is(not(nullValue())));
assertThat(url, is(not(nullValue())));
assertThat(size, equalTo(0));
assertEquals(workflowInstId, pgeTask.getWorkflowInstanceId());
assertThat(paginate, is(not(nullValue())));
assertThat(request.getBucketName(), is(S3_BUCKET_NAME)); assertThat(request.getKey(), is(EXPECTED_DATA_STORE_REF));
assertNotNull(propAdder); assertTrue(propAdder instanceof MockConfigFilePropertyAdder);
assertEquals("value", pgeTask.pgeMetadata.getMetadata("key")); assertEquals("value", pgeTask.pgeMetadata.getMetadata("key")); assertEquals("2", pgeTask.pgeMetadata .getMetadata(MockConfigFilePropertyAdder.RUN_COUNTER)); assertEquals("value", pgeTask.pgeMetadata.getMetadata("key")); assertEquals("1", pgeTask.pgeMetadata .getMetadata(MockConfigFilePropertyAdder.RUN_COUNTER));
assertThat(extractedMetadata.getMetadata("StartYear"), is("2013")); assertThat(extractedMetadata.getMetadata("StartMonth"), is("05")); assertThat(extractedMetadata.getMetadata("StartDay"), is("23")); assertThat(extractedMetadata.getMetadata("StartHour"), is("03")); assertThat(extractedMetadata.getMetadata("StartMinute"), is("02")); assertThat(extractedMetadata.getMetadata("StartSecond"), is("01"));
assertThat(jobs, is(not(nullValue())));
assertThat(report, is(not(nullValue())));
assertThat(capacity, equalTo(1000));
assertNotNull(cond); assertThat(cond.getConditionName(), equalTo("True Condition"));
assertThat(instance, is(nullValue()));
assertThat(inst, equalTo(0));
assertThat(nodes, is(not(nullValue()))); assertThat(nodes, hasSize(1));
assertThat(transferer, is(not(nullValue())));
assertThat(node, is(not(nullValue()))); assertThat(node.getNodeId(), equalTo("localhost"));
assertThat(execreport, is(not(nullValue())));
assertNotNull(this.repo); assertTrue(foundGranuleMaps);
assertThat(queues, hasSize(3)); assertThat(queues, containsInAnyOrder("high", "quick", "long"));
assertNotNull(w); assertNotNull(w.getConditions()); assertTrue(w.getConditions().size() > 0); assertEquals(w.getConditions().size(), 3);
assertNotNull(wflows); assertThat(wflows, hasSize(2)); assertThat(wflows.get(0).getName(), equalTo("Long Workflow"));
assertThat(task, is(not(nullValue()))); assertThat(task.getTaskName(), equalTo("Hello World"));
assertFalse(tmpDir.exists()); assertFalse(dynamicConfigFile.exists()); assertTrue(dynamicConfigFile.exists());
assertThat(node, is(not(nullValue()))); assertThat(node.getNodeId(), equalTo("localhost"));
assertNotNull(outputMetadata); assertTrue(outputMetadata.getAllKeys().size() > 0); assertTrue(outputMetadata.containsKey("X-Parsed-By")); assertFalse(outputMetadata.getMetadata("X-Parsed-By").equals("org.apache.tika.parser.EmptyParser"));
assertFalse(exeDir.exists()); assertTrue(exeDir.exists());
assertNotNull(node); assertThat(node, equalTo("0/8"));
assertThat(workflowlist, is(not(nullValue()))); assertThat(workflowlist.size(), is(not(0))); assertThat(instance, is(not(nullValue())));
assertNotNull(workflowInsts); assertEquals(2, workflowInsts.size());
assertThat(events, is(not(nullValue()))); assertThat(events, hasSize(12)); assertThat(events, hasItem("stuck"));
assertThat(execreport, is(not(nullValue())));
assertThat(queues, hasSize(3)); assertThat(queues, containsInAnyOrder("high", "quick", "long"));
assertThat(report, is(not(nullValue())));
assertThat(jobs, is(not(nullValue())));
assertThat(product.getProductReferences().size(), is(1)); assertThat(product.getProductReferences().get(0).getDataStoreReference(), is("file:/base/path/2013/03/test.dat"));
assertThat(num, is(not(0)));
assertNotNull(cond); assertEquals(true, cond.isOptional());
assertNotNull(wflows);
assertThat(request.getBucketName(), is(S3_BUCKET_NAME)); assertThat(request.getKey(), is(EXPECTED_DATA_STORE_REF));
assertThat(paginate, is(not(nullValue())));
assertThat(workflowlist, is(not(nullValue()))); assertThat(workflowlist.size(), is(not(0))); assertThat(work, is(not(nullValue())));
assertThat(request.getBucketName(), is(S3_BUCKET_NAME)); assertThat(request.getKey(), is(EXPECTED_DATA_STORE_REF)); assertThat(request.getFile().getAbsolutePath(), is(EXPECTED_ORGINAL_REF));
assertNotNull(pgeConfig); assertEquals(VALUE, pgeTask.pgeMetadata.getMetadata(KEY)); assertEquals(MockPgeConfigBuilder.MOCK_EXE_DIR, pgeConfig.getExeDir());
assertThat(refresh, equalTo(true));
assertThat(capacity, equalTo(1000));
assertThat(extractedMetadata.getMetadata("StartYear"), is("2013")); assertThat(extractedMetadata.getMetadata("StartMonth"), is("05")); assertThat(extractedMetadata.getMetadata("StartDay"), is("23")); assertThat(extractedMetadata.containsKey("StartHour"), is(false)); assertThat(extractedMetadata.containsKey("StartMinute"), is(false)); assertThat(extractedMetadata.containsKey("StartSecond"), is(false));
assertNotNull(cond); assertEquals(30L, cond.getTimeoutSeconds());
assertNull(request.getParameter("name3", null));
assertNull(copy.getParameter("name2", null));
assertEquals(0, presenterWidget.onRevealMethodCalled); assertEquals(0, presenterWidget.onHideMethodCalled); assertFalse(presenterWidget.isVisible());
assertEquals(request, copyOfRequest);
assertNotNull(result); assertEquals("PlaceRequest(nameToken=nameToken, params={name1=value1, name2=value2})", result);
assertEquals("/not/existing", placeRequest13.getNameToken()); assertEquals(0, placeRequest13.getParameterNames().size()); assertEquals("/not/existing", placeRequest14.getNameToken()); assertEquals(2, placeRequest14.getParameterNames().size()); assertEquals("valueA", placeRequest14.getParameter("a", null)); assertEquals("valueB", placeRequest14.getParameter("b", null)); assertEquals("/not/existing", placeRequest15.getNameToken()); assertEquals(0, placeRequest15.getParameterNames().size());
assertThat(bookId, equalTo(this.testBookBorrowing.getBorrowedBook().getId())); assertThat(borrowerContactUri, equalTo(this.testBookBorrowing.getBorrower().getContactInformationUri())); assertThat(borrowingDate, equalTo(this.testBookBorrowing.getLendingDate()));
assertThat(borrowedBooks.size(), is(0));
assertThat(bookBorrowings, is(empty()));
assertThat(borrowedBooks.size(), is(1)); assertThat(bookBorrowing, equalTo(this.testBookBorrowing));
assertThat(bookBorrowings.size(), is(1)); assertThat(transformedBookBorrowing, equalTo(this.testBookBorrowing));
assertThat(bookBorrowings, is(empty()));
assertNotNull(logMsg); assertFalse((logMsg.trim()).equals(""));
assertNotNull(logMsg); assertFalse((logMsg.trim()).equals(""));
assertThat(actual).isTrue();
assertThat(download).isNull();
assertThat(object.toString()).isEqualTo(expected);
assertThat(object).isEqualTo(object2);
assertThat(actual).isFalse();
assertThat(client.ping()).isTrue();
assertThat(iterator.hasNext()).isTrue();
assertThat(actual).isEqualTo(expected.getMessages());
assertThat(actual).isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(client.version()).isEqualTo("1.0.0");
assertThat(object.hashCode()).isEqualTo(-1614203949);
assertThat(broadcaster.isEmpty()).isTrue(); assertThat(broadcaster.isEmpty()).isFalse();
assertEquals(1, buffer.consumeCommand().getId()); assertNull(buffer.consumeCommand()); assertEquals(2, buffer.consumeCommand().getId()); assertEquals(3, buffer.consumeCommand().getId()); assertNull(buffer.consumeCommand());
assertEquals("I", result.Identifier().getText());
assertTrue(privilegeProvider.isAllowed(new PrivilegeGroup("test"), new Privilege("read"))); assertTrue(privilegeProvider.isAllowed(new PrivilegeGroup("test"), new Privilege("write"))); assertFalse(privilegeProvider.isAllowed(new PrivilegeGroup("test"), new Privilege("read2"))); assertFalse(privilegeProvider.isAllowed(new PrivilegeGroup("other"), new Privilege("write")));
assertEquals(4, buffer.getBufferedCommandsCount()); assertEquals(4, buffer.getBufferedCommandsCount()); assertEquals(3, buffer.consumeCommand().getId()); assertEquals(4, buffer.consumeCommand().getId()); assertNull(buffer.consumeCommand());
assertThat(map.get(i)).isEqualTo("v" + i);
assertEquals("qValue", value);
assertEquals("someName", new ClassPathResource("/my/package/someName").getName()); assertEquals("someName.dfi.sdfj", new ClassPathResource("/my/package/someName.dfi.sdfj").getName()); assertEquals("someName", new ClassPathResource("someName").getName()); assertEquals("someName.dfi.sdfj", new ClassPathResource("someName.dfi.sdfj").getName());
assertNull(value);
assertEquals("/my/package", ClassPathResourceProvider.normalizeClassPathResourcePath("my.package")); assertEquals("/my/package", ClassPathResourceProvider.normalizeClassPathResourcePath("/my/package/")); assertEquals("/my/package", ClassPathResourceProvider.normalizeClassPathResourcePath("my/package")); assertEquals("/my/package", ClassPathResourceProvider.normalizeClassPathResourcePath("/my/package"));
assertEquals(true, value);
assertEquals(LITER.getName(), LITER_DM3.getName());
assertThat(checkNotNull("bar", "foo")).isTrue();
assertThat(expected).isEqualTo(result);
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertThat(segment.getTraceId()).isEqualTo(traceID);
assertThat(enabled).isTrue();
assertThat(enabled).isFalse();
assertEquals(EXPECTED_ORIGIN, plugin.getOrigin());
assertThat(checkNotNull(null, "foo")).isFalse();
assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertFalse(reservoir.take());
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertThat(traceID.getStartTimeAsHex()).isEqualTo("57ff426a"); assertThat(traceID.getNumberAsHex()).isEqualTo("80c11c39b0c928905eb0828d");
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertThat(emitter.getUDPAddress()).isEqualTo(address);
assertThat(metadata).isEmpty();
assertThat(ec2Plugin.isEnabled()).isFalse();
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertThat(expected).isEqualTo(result);
assertEquals(EXPECTERD_SERVICE_NAME, plugin.getServiceName());
assertThat(segment).isNotNull(); assertThat(segment.getNamespace()).isEmpty(); assertThat(segment.getNamespace()).isEmpty();
assertThat(success).isFalse();
assertNotEquals(NullPointerException.class, e.getClass()); assertEquals(expectedException.getMessage(), e.getMessage());
assertThat(logReferences).isEmpty();
assertThat(logReferences).hasOnlyOneElementSatisfying( reference -> assertThat(reference.getLogGroup()).isEqualTo("test_group"));
assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertFalse(reservoir.take()); assertTrue(reservoir.take());
assertEquals(TEST_LOG_GROUP, reference.getLogGroup());
assertThat(sub.getName()).isEqualTo(CATALOG + "@" + HOST); assertThat(sub.getNamespace()).isEqualTo(Namespace.REMOTE.toString()); assertThat(sub.getSql()).containsAllEntriesOf(expectedSqlParams);
assertTrue(reservoir.take()); assertFalse(reservoir.take()); assertTrue(reservoir.take()); assertFalse(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertFalse(reservoir.take()); assertTrue(reservoir.take());
assertTrue(SearchPattern.wildcardMatch("6543210", "6543210"));
assertTrue(reservoir.take()); assertTrue("failed after " + (i + 1), reservoir.take()); assertFalse(reservoir.take());
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertThat(segment.getAws().get("xray")).isInstanceOfSatisfying( Map.class, xray -> assertThat(xray.get("rule_name")).isEqualTo("rule"));
assertThat(metadata).containsOnly( entry(EC2MetadataFetcher.EC2Metadata.INSTANCE_ID, "i-1234567890abcdef0"), entry(EC2MetadataFetcher.EC2Metadata.AVAILABILITY_ZONE, "us-west-2b"), entry(EC2MetadataFetcher.EC2Metadata.INSTANCE_TYPE, "t2.micro"), entry(EC2MetadataFetcher.EC2Metadata.AMI_ID, "ami-5fb8c835"));
assertThat(logReferences).hasSize(2);
assertThat(subsegment).isNotNull(); assertThat(subsegment.getNamespace()).isEmpty(); assertThat(subsegment.getNamespace()).isEmpty();
assertThat(sub.getName()).isEqualTo(CATALOG + "@" + HOST); assertThat(sub.getNamespace()).isEqualTo(Namespace.REMOTE.toString()); assertThat(sub.getSql()).containsAllEntriesOf(expectedSqlParams);
assertThat(enabled).isFalse();
assertThat(AWSXRay.getCurrentSubsegment()).isEqualTo(sub); assertThat(sub.getName()).isEqualTo(SqlSubsegments.DEFAULT_DATABASE_NAME); assertThat(sub.isInProgress()).isTrue(); assertThat(sub.getParentSegment().getSubsegments()).contains(sub);
assertTrue(reservoir.take()); assertTrue(reservoir.take()); assertFalse(reservoir.take());
assertThat(metadata).containsOnly( entry(EC2MetadataFetcher.EC2Metadata.INSTANCE_ID, "i-1234567890abcdef0"), entry(EC2MetadataFetcher.EC2Metadata.AVAILABILITY_ZONE, "us-west-2b"), entry(EC2MetadataFetcher.EC2Metadata.INSTANCE_TYPE, "t2.micro"), entry(EC2MetadataFetcher.EC2Metadata.AMI_ID, "ami-5fb8c835"));
assertTrue(SearchPattern.wildcardMatch(pat, str));
assertEquals(123L, i1.getData()); assertEquals("{\\"data\\":123}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals( 123L, Primitive.toUInt64(i1.toJsonObject() .getJsonNumber(UInt64.FIELD_DATA).bigIntegerValue())); assertEquals(UInt64.TYPE, i1.getMessageType());
assertEquals(c1.toString(), data.toString()); assertEquals(c1.toJsonObject(), data.toJsonObject()); assertEquals(c1.getMessageType(), data.getMessageType()); assertEquals(c1.getData(), data.getData()); assertNotSame(c1, data); assertNotSame(c1.toString(), data.toString()); assertNotSame(c1.toJsonObject(), data.toJsonObject());
assertEquals(h1.toString(), p.toString()); assertEquals(h1.toJsonObject(), p.toJsonObject()); assertEquals(h1.getMessageType(), p.getMessageType()); assertEquals(h1.getSeq(), p.getSeq()); assertEquals(h1.getStamp(), p.getStamp()); assertEquals(h1.getFrameID(), p.getFrameID()); assertNotSame(h1, p); assertNotSame(h1.toString(), p.toString()); assertNotSame(h1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(0f, empty.getData(), 0); assertEquals("{\\"data\\":0.0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0.0, empty.toJsonObject() .getJsonNumber(Float32.FIELD_DATA).doubleValue(), 0); assertEquals(Float32.TYPE, empty.getMessageType());
assertFalse(d3.sleep()); assertFalse(greaterThanEquals(System.nanoTime(), t + d3.toNSec()));
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getForce(), p.getForce()); assertEquals(w1.getTorque(), p.getTorque()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getTheta(), p.getTheta(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPolygon(), p.getPolygon()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(0, values[0]); assertEquals(5, values[1]); assertEquals(10, values[2]); assertEquals(15, values[3]); assertEquals(65535, values[4]);
assertEquals(0, Primitive.fromUInt16((short) 0)); assertEquals(5, Primitive.fromUInt16((short) 5)); assertEquals(10, Primitive.fromUInt16((short) 10)); assertEquals(15, Primitive.fromUInt16((short) 15)); assertEquals(65535, Primitive.fromUInt16((short) -1));
assertEquals((short) -1, c.getData()); assertEquals("{\\"data\\":65535}", c.toString()); assertEquals(1, c.toJsonObject().size()); assertEquals( (short) -1, Primitive.toUInt16((short) c.toJsonObject().getInt( UInt16.FIELD_DATA))); assertEquals(UInt16.TYPE, c.getMessageType());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(w1.toString(), clone.toString()); assertEquals(w1.toJsonObject(), clone.toJsonObject()); assertEquals(w1.getMessageType(), clone.getMessageType()); assertEquals(w1.getHeader(), clone.getHeader()); assertEquals(w1.getWrench(), clone.getWrench()); assertNotSame(w1, clone); assertNotSame(w1.toString(), clone.toString()); assertNotSame(w1.toJsonObject(), clone.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals((long) i, r1.nextId()); assertEquals((long) i, r2.nextId()); assertEquals((long) i, r3.nextId()); assertEquals((long) i, r4.nextId());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getHeader(), clone.getHeader()); assertEquals(t1.getTwist(), clone.getTwist()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject());
assertEquals(0l, values[0]); assertEquals(5l, values[1]); assertEquals(10l, values[2]); assertEquals(15l, values[3]); assertEquals(-1l, values[4]);
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.size(), p.size()); assertTrue(Arrays.deepEquals(p1.getPoints(), p.getPoints())); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getHeader(), clone.getHeader()); assertEquals(p1.getPolygon(), clone.getPolygon()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(empty.toString(), data.toString()); assertEquals(empty.toJsonObject(), data.toJsonObject()); assertEquals(empty.getMessageType(), data.getMessageType()); assertNotSame(empty, data); assertNotSame(empty.toString(), data.toString()); assertNotSame(empty.toJsonObject(), data.toJsonObject());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals((byte) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0, empty.toJsonObject().getInt(Byte.FIELD_DATA)); assertEquals(Byte.TYPE, empty.getMessageType());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getGoalID(), p.getGoalID()); assertEquals(g1.getStatus(), p.getStatus()); assertEquals(g1.getText(), p.getText()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertTrue(Arrays.deepEquals(p1.getPoses(), p.getPoses())); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.size(), p.size());
assertEquals(m3.toString(), clone.toString()); assertEquals(m3.toJsonObject(), clone.toJsonObject()); assertEquals(m3.getMessageType(), clone.getMessageType()); assertNotSame(m3, clone); assertNotSame(m3.toString(), clone.toString());
assertEquals((byte) 0, Primitive.toUInt8((short) 0)); assertEquals((byte) 5, Primitive.toUInt8((short) 5)); assertEquals((byte) 10, Primitive.toUInt8((short) 10)); assertEquals((byte) 15, Primitive.toUInt8((short) 15)); assertEquals((byte) -1, Primitive.toUInt8(Short.MAX_VALUE));
assertEquals(empty.toString(), data.toString()); assertEquals(empty.toJsonObject(), data.toJsonObject()); assertEquals(empty.getMessageType(), data.getMessageType()); assertNotSame(empty, data); assertNotSame(empty.toString(), data.toString()); assertNotSame(empty.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(0l, emptyDate.getTime()); assertEquals(10200l, date1.getTime()); assertEquals(0l, date2.getTime()); assertEquals(10000l, date3.getTime());
assertEquals("test", p1.getPrimitiveType());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals((float) 10 / 255.0f, c.getR(), 0); assertEquals((float) 20 / 255.0f, c.getG(), 0); assertEquals((float) 30 / 255.0f, c.getB(), 0); assertEquals((float) 40 / 255.0f, c.getA(), 0);
assertEquals((short) 0, values[0]); assertEquals((short) 5, values[1]); assertEquals((short) 10, values[2]); assertEquals((short) 15, values[3]); assertEquals((short) 255, values[4]);
assertEquals((byte) 0, values[0]); assertEquals((byte) 5, values[1]); assertEquals((byte) 10, values[2]); assertEquals((byte) 15, values[3]); assertEquals((byte) -1, values[4]);
assertEquals(c2.toString(), p.toString()); assertEquals(c2.toJsonObject(), p.toJsonObject()); assertEquals(c2.getMessageType(), p.getMessageType()); assertEquals(c2.getR(), p.getR(), 0); assertEquals(c2.getG(), p.getG(), 0); assertEquals(c2.getB(), p.getB(), 0); assertNotSame(c2, p); assertNotSame(c2.toString(), p.toString()); assertNotSame(c2.toJsonObject(), p.toJsonObject());
assertFalse(empty.equals(m1)); assertFalse(m1.equals(empty)); assertFalse(empty.equals(m2)); assertFalse(m2.equals(empty)); assertTrue(m1.equals(m2)); assertTrue(m2.equals(m1)); assertTrue(empty.equals(empty)); assertTrue(m1.equals(m1)); assertTrue(m2.equals(m2));
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(c1.toString(), clone.toString()); assertEquals(c1.toJsonObject(), clone.toJsonObject()); assertEquals(c1.getMessageType(), clone.getMessageType()); assertEquals(c1.getData(), clone.getData()); assertNotSame(c1, clone); assertNotSame(c1.toString(), clone.toString()); assertNotSame(c1.toJsonObject(), clone.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"service_response\\",\\"id\\":\\"myServiceId\\"," + "\\"service\\":\\"myService\\",\\"values\\":{\\"test1\\":\\"test2\\"},\\"result\\":true}", DummyHandler.latest.toString());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals((byte) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals( (byte) 0, Primitive.toUInt8((short) empty.toJsonObject().getInt( UInt8.FIELD_DATA))); assertEquals(UInt8.TYPE, empty.getMessageType());
assertEquals(s1.toString(), data.toString()); assertEquals(s1.toJsonObject(), data.toJsonObject()); assertEquals(s1.getMessageType(), data.getMessageType()); assertEquals(s1.getData(), data.getData()); assertNotSame(s1, data); assertNotSame(s1.toString(), data.toString()); assertNotSame(s1.toJsonObject(), data.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getPosition(), p.getPosition()); assertEquals(p1.getOrientation(), p.getOrientation()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getX(), p.getX(), 0); assertEquals(v1.getY(), p.getY(), 0); assertEquals(v1.getZ(), p.getZ(), 0); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertTrue(Arrays.deepEquals(p1.getPoints(), p.getPoints())); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.size(), p.size());
assertEquals(0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals( 0, Primitive.toUInt32(empty.toJsonObject().getInt( UInt32.FIELD_DATA))); assertEquals(UInt32.TYPE, empty.getMessageType());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getX(), clone.getX(), 0); assertEquals(p1.getY(), clone.getY(), 0); assertEquals(p1.getZ(), clone.getZ(), 0); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getHeader(), p.getHeader()); assertEquals(v1.getVector3(), p.getVector3()); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(empty.toString(), data.toString()); assertEquals(empty.toJsonObject(), data.toJsonObject()); assertEquals(empty.getMessageType(), data.getMessageType()); assertNotSame(empty, data); assertNotSame(empty.toString(), data.toString()); assertNotSame(empty.toJsonObject(), data.toJsonObject());
assertEquals("test", empty.getId());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPoint(), p.getPoint()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"advertise\\",\\"id\\":\\"advertise:myTopic1:0\\",\\"type\\":\\"myType1\\"," + "\\"topic\\":\\"myTopic1\\"}", DummyHandler.latest.toString()); assertTrue(t1.isAdvertised()); assertFalse(t1.isSubscribed());
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getTranslation(), clone.getTranslation()); assertEquals(t1.getRotation(), clone.getRotation()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject());
assertTrue(r1.connect()); assertTrue(r1.disconnect()); assertFalse(r1.isConnected());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getTheta(), p.getTheta(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(f1.toString(), clone.toString()); assertEquals(f1.toJsonObject(), clone.toJsonObject()); assertEquals(f1.getMessageType(), clone.getMessageType()); assertEquals(f1.getData(), clone.getData(), 0); assertNotSame(f1, clone); assertNotSame(f1.toString(), clone.toString()); assertNotSame(f1.toJsonObject(), clone.toJsonObject());
assertEquals((byte) -1, c.getData()); assertEquals("{\\"data\\":255}", c.toString()); assertEquals(1, c.toJsonObject().size()); assertEquals( (byte) -1, Primitive.toUInt8((short) c.toJsonObject().getInt( Char.FIELD_DATA))); assertEquals(Char.TYPE, c.getMessageType());
assertEquals(123, i1.getData()); assertEquals("{\\"data\\":123}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals(123, Primitive.toUInt32(i1.toJsonObject().getInt(UInt32.FIELD_DATA))); assertEquals(UInt32.TYPE, i1.getMessageType());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getGoalID(), p.getGoalID()); assertEquals(g1.getStatus(), p.getStatus()); assertEquals(g1.getText(), p.getText()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals((byte) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0, empty.toJsonObject().getInt(Int8.FIELD_DATA)); assertEquals(Int8.TYPE, empty.getMessageType());
assertNotNull(resp); assertEquals("{\\"test3\\":\\"test4\\"}", resp.toString());
assertEquals(Message.EMPTY_MESSAGE, empty.toString()); assertEquals(0, empty.toJsonObject().size()); assertEquals("", empty.getMessageType());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getHeader(), clone.getHeader()); assertEquals(t1.getTwist(), clone.getTwist()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(127L, i1.getData()); assertEquals("{\\"data\\":127}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals(127L, i1.toJsonObject().getJsonNumber(Int64.FIELD_DATA) .longValue()); assertEquals(Int64.TYPE, i1.getMessageType());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getPosition(), p.getPosition()); assertEquals(p1.getOrientation(), p.getOrientation()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(0l, values[0]); assertEquals(5l, values[1]); assertEquals(10l, values[2]); assertEquals(15l, values[3]); assertEquals(4294967295l, values[4]);
assertEquals((short) 123, i1.getData()); assertEquals("{\\"data\\":123}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals( (short) 123, Primitive.toUInt16((short) i1.toJsonObject().getInt( UInt16.FIELD_DATA))); assertEquals(UInt16.TYPE, i1.getMessageType());
assertEquals(f1.toString(), clone.toString()); assertEquals(f1.toJsonObject(), clone.toJsonObject()); assertEquals(f1.getMessageType(), clone.getMessageType()); assertEquals(f1.getData(), clone.getData(), 0); assertNotSame(f1, clone); assertNotSame(f1.toString(), clone.toString()); assertNotSame(f1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getX(), p.getX(), 0); assertEquals(v1.getY(), p.getY(), 0); assertEquals(v1.getZ(), p.getZ(), 0); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getHeader(), p.getHeader()); assertEquals(v1.getVector3(), p.getVector3()); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getStamp(), p.getStamp()); assertEquals(g1.getID(), p.getID()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(v1.toString(), clone.toString()); assertEquals(v1.toJsonObject(), clone.toJsonObject()); assertEquals(v1.getMessageType(), clone.getMessageType()); assertEquals(v1.getHeader(), clone.getHeader()); assertEquals(v1.getVector3(), clone.getVector3()); assertNotSame(v1, clone); assertNotSame(v1.toString(), clone.toString()); assertNotSame(v1.toJsonObject(), clone.toJsonObject());
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getForce(), p.getForce()); assertEquals(w1.getTorque(), p.getTorque()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertEquals(s3.toString(), clone.toString()); assertEquals(s3.toJsonObject(), clone.toJsonObject()); assertEquals(s3.getServiceRequestType(), clone.getServiceRequestType()); assertNotSame(s3, clone); assertNotSame(s3.toString(), clone.toString());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertTrue(Arrays.deepEquals(p1.getPoints(), p.getPoints())); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.size(), p.size());
assertEquals(m1.toString(), p.toString()); assertEquals(m1.toJsonObject(), p.toJsonObject()); assertEquals(m1.getMessageType(), p.getMessageType()); assertEquals(m1.size(), p.size()); assertTrue(Arrays.deepEquals(m1.getDim(), p.getDim())); assertEquals(m1.getDataOffset(), p.getDataOffset()); assertNotSame(m1, p); assertNotSame(m1.toString(), p.toString()); assertNotSame(m1.toJsonObject(), p.toJsonObject());
assertEquals((byte) 123, c1.getData()); assertEquals("{\\"data\\":123}", c1.toString()); assertEquals(1, c1.toJsonObject().size()); assertEquals( (byte) 123, Primitive.toUInt8((short) c1.toJsonObject().getInt( Char.FIELD_DATA))); assertEquals(Char.TYPE, c1.getMessageType());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getHeader(), clone.getHeader()); assertEquals(p1.getPose(), clone.getPose()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getLinear(), p.getLinear()); assertEquals(t1.getAngular(), p.getAngular()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(0.0, empty.getData(), 0); assertEquals("{\\"data\\":0.0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0.0, empty.toJsonObject() .getJsonNumber(Float64.FIELD_DATA).doubleValue(), 0); assertEquals(Float64.TYPE, empty.getMessageType());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getLinear(), p.getLinear()); assertEquals(t1.getAngular(), p.getAngular()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"publish\\",\\"id\\":\\"publish:myTopic1:1\\",\\"topic\\":\\"myTopic1\\"" + ",\\"msg\\":{\\"test1\\":\\"test2\\"}}", DummyHandler.latest.toString()); assertTrue(t1.isAdvertised()); assertFalse(t1.isSubscribed());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getHeader(), clone.getHeader()); assertEquals(p1.getPoint(), clone.getPoint()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals((byte) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals( (byte) 0, Primitive.toUInt8((short) empty.toJsonObject().getInt( Char.FIELD_DATA))); assertEquals(Char.TYPE, empty.getMessageType());
assertEquals(0, Primitive.toUInt32(0l)); assertEquals(5, Primitive.toUInt32(5l)); assertEquals(10, Primitive.toUInt32(10l)); assertEquals(15, Primitive.toUInt32(15l)); assertEquals(-1, Primitive.toUInt32(Long.MAX_VALUE));
assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"unadvertise_service\\",\\"service\\":\\"myService\\"}", DummyHandler.latest.toString()); assertFalse(s1.isAdvertised());
assertEquals(0, t1.compareTo(t1)); assertEquals(0, t2.compareTo(t2)); assertEquals(0, t3.compareTo(t3)); assertEquals(0, t4.compareTo(t4)); assertFalse(greaterThan(t1.compareTo(t2), 0)); assertTrue(greaterThan(t4.compareTo(t1), 0));
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getPosition(), p.getPosition()); assertEquals(p1.getOrientation(), p.getOrientation()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(new Time(9999998996l), t3.subtract(t2)); assertEquals(t1, t1.subtract(empty)); assertEquals(t2, t2.subtract(empty)); assertEquals(t3, t3.subtract(empty));
assertTrue(b1.getData()); assertEquals("{\\"data\\":true}", b1.toString()); assertEquals(1, b1.toJsonObject().size()); assertTrue(b1.toJsonObject().getBoolean(Bool.FIELD_DATA)); assertEquals(Bool.TYPE, b1.getMessageType());
assertEquals(b1.toString(), clone.toString()); assertEquals(b1.toJsonObject(), clone.toJsonObject()); assertEquals(b1.getMessageType(), clone.getMessageType()); assertEquals(b1.getData(), clone.getData()); assertNotSame(b1, clone); assertNotSame(b1.toString(), clone.toString()); assertNotSame(b1.toJsonObject(), clone.toJsonObject());
assertEquals(127, i1.getData()); assertEquals("{\\"data\\":127}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals(127, i1.toJsonObject().getInt(Int32.FIELD_DATA)); assertEquals(Int32.TYPE, i1.getMessageType());
assertEquals(1.5, f1.getData(), 0); assertEquals("{\\"data\\":1.5}", f1.toString()); assertEquals(1, f1.toJsonObject().size()); assertEquals(1.5, f1.toJsonObject().getJsonNumber(Float64.FIELD_DATA) .doubleValue(), 0); assertEquals(Float64.TYPE, f1.getMessageType());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getGoalID(), p.getGoalID()); assertEquals(g1.getStatus(), p.getStatus()); assertEquals(g1.getText(), p.getText()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getTheta(), p.getTheta(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getX(), clone.getX(), 0); assertEquals(p1.getY(), clone.getY(), 0); assertEquals(p1.getTheta(), clone.getTheta(), 0); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(empty.toString().hashCode(), empty.hashCode()); assertEquals(m1.toString().hashCode(), m1.hashCode()); assertEquals(m2.toString().hashCode(), m2.hashCode());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getData(), clone.getData()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject()); assertNotSame(t1.getData(), clone.getData());
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getHeader(), p.getHeader()); assertEquals(w1.getWrench(), p.getWrench()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", m2.toString()); assertEquals(2, m2.toJsonObject().size()); assertEquals(123, m2.toJsonObject().getInt("test")); assertEquals("abc", m2.toJsonObject().getString("test2")); assertEquals("", m2.getMessageType());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(s1.toString(), data.toString()); assertEquals(s1.toJsonObject(), data.toJsonObject()); assertEquals(s1.getMessageType(), data.getMessageType()); assertEquals(s1.getData(), data.getData()); assertNotSame(s1, data); assertNotSame(s1.toString(), data.toString()); assertNotSame(s1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getTranslation(), p.getTranslation()); assertEquals(t1.getRotation(), p.getRotation()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals((short) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals( (short) 0, Primitive.toUInt16((short) empty.toJsonObject().getInt( UInt16.FIELD_DATA))); assertEquals(UInt16.TYPE, empty.getMessageType());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getTranslation(), p.getTranslation()); assertEquals(t1.getRotation(), p.getRotation()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals((short) 127, i1.getData()); assertEquals("{\\"data\\":127}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals(127, i1.toJsonObject().getInt(Int16.FIELD_DATA)); assertEquals(Int16.TYPE, i1.getMessageType());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getHeader(), clone.getHeader()); assertEquals(p1.getPose(), clone.getPose()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPoint(), p.getPoint()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(new Time(10000001044l), t2.add(t3)); assertEquals(t1, empty.add(t1)); assertEquals(t2, empty.add(t2)); assertEquals(t3, empty.add(t3));
assertEquals(s1.toString(), data.toString()); assertEquals(s1.toJsonObject(), data.toJsonObject()); assertEquals(s1.getMessageType(), data.getMessageType()); assertEquals(s1.getData(), data.getData()); assertNotSame(s1, data); assertNotSame(s1.toString(), data.toString()); assertNotSame(s1.toJsonObject(), data.toJsonObject());
assertTrue(r1.connect()); assertTrue(r1.send(Json.createObjectBuilder().add("test", "value") .build())); assertNotNull(DummyHandler.latest); assertEquals(1, DummyHandler.latest.size()); assertTrue(DummyHandler.latest.containsKey("test")); assertEquals("value", DummyHandler.latest.getString("test"));
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals((byte) 127, b1.getData()); assertEquals("{\\"data\\":127}", b1.toString()); assertEquals(1, b1.toJsonObject().size()); assertEquals(127, b1.toJsonObject().getInt(Byte.FIELD_DATA)); assertEquals(Byte.TYPE, b1.getMessageType());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(g1.toString(), clone.toString()); assertEquals(g1.toJsonObject(), clone.toJsonObject()); assertEquals(g1.getMessageType(), clone.getMessageType()); assertEquals(g1.getGoalID(), clone.getGoalID()); assertEquals(g1.getStatus(), clone.getStatus()); assertEquals(g1.getText(), clone.getText()); assertNotSame(g1, clone); assertNotSame(g1.toString(), clone.toString()); assertNotSame(g1.toJsonObject(), clone.toJsonObject());
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", m3.toString()); assertEquals(2, m3.toJsonObject().size()); assertEquals(123, m3.toJsonObject().getInt("test")); assertEquals("abc", m3.toJsonObject().getString("test2")); assertEquals("type", m3.getMessageType());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getStamp(), p.getStamp()); assertEquals(g1.getID(), p.getID()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getQuaternion(), p.getQuaternion()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0, empty.toJsonObject().getInt(Int32.FIELD_DATA)); assertEquals(Int32.TYPE, empty.getMessageType());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getChildFrameID(), p.getChildFrameID()); assertEquals(t1.getTransform(), p.getTransform()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getX(), p.getX(), 0); assertEquals(v1.getY(), p.getY(), 0); assertEquals(v1.getZ(), p.getZ(), 0); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getX(), clone.getX(), 0); assertEquals(p1.getY(), clone.getY(), 0); assertEquals(p1.getZ(), clone.getZ(), 0); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", m4.toString()); assertEquals(2, m4.toJsonObject().size()); assertEquals(123, m4.toJsonObject().getInt("test")); assertEquals("abc", m4.toJsonObject().getString("test2")); assertEquals("type", m4.getMessageType());
assertEquals((short) 0, Primitive.toUInt16(0)); assertEquals((short) 5, Primitive.toUInt16(5)); assertEquals((short) 10, Primitive.toUInt16(10)); assertEquals((short) 15, Primitive.toUInt16(15)); assertEquals((short) -1, Primitive.toUInt16(Integer.MAX_VALUE));
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(m1.toString(), p.toString()); assertEquals(m1.toJsonObject(), p.toJsonObject()); assertEquals(m1.getMessageType(), p.getMessageType()); assertTrue(Arrays.deepEquals(m1.getDim(), p.getDim())); assertEquals(m1.getDataOffset(), p.getDataOffset()); assertNotSame(m1, p); assertNotSame(m1.toString(), p.toString()); assertNotSame(m1.toJsonObject(), p.toJsonObject()); assertEquals(m1.size(), p.size());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getData(), clone.getData()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject()); assertNotSame(t1.getData(), clone.getData());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertTrue(Arrays.deepEquals(p1.getPoints(), clone.getPoints())); assertEquals(p1.size(), clone.size()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject()); assertNotSame(p1.getPoints(), clone.getPoints());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(new Duration(9999998996l), d3.subtract(d2)); assertEquals(d1, d1.subtract(empty)); assertEquals(d2, d2.subtract(empty)); assertEquals(d3, d3.subtract(empty));
assertTrue(r1.connect()); assertNull(cb1.latest); assertNull(cb2.latest); assertNull(DummyHandler.latest); assertNull(cb1.latest); assertNotNull(cb2.latest); assertEquals("{\\"test1\\":\\"test2\\"}", cb2.latest.toString());
assertEquals((short) 0, Primitive.fromUInt8((byte) 0)); assertEquals((short) 5, Primitive.fromUInt8((byte) 5)); assertEquals((short) 10, Primitive.fromUInt8((byte) 10)); assertEquals((short) 15, Primitive.fromUInt8((byte) 15)); assertEquals((short) 255, Primitive.fromUInt8((byte) -1));
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getHeader(), p.getHeader()); assertEquals(w1.getWrench(), p.getWrench()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertTrue(d2.sleep()); assertTrue(greaterThanEquals(System.nanoTime(), t + d2.toNSec()));
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getPosition(), clone.getPosition()); assertEquals(p1.getOrientation(), clone.getOrientation()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertFalse(empty.equals(new String(JsonWrapper.EMPTY_JSON)));
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(f1.toString(), data.toString()); assertEquals(f1.toJsonObject(), data.toJsonObject()); assertEquals(f1.getMessageType(), data.getMessageType()); assertEquals(f1.getData(), data.getData(), 0); assertNotSame(f1, data); assertNotSame(f1.toString(), data.toString()); assertNotSame(f1.toJsonObject(), data.toJsonObject());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertEquals(m1.toString(), p.toString()); assertEquals(m1.toJsonObject(), p.toJsonObject()); assertEquals(m1.getMessageType(), p.getMessageType()); assertTrue(Arrays.deepEquals(m1.getDim(), p.getDim())); assertEquals(m1.getDataOffset(), p.getDataOffset()); assertNotSame(m1, p); assertNotSame(m1.toString(), p.toString()); assertNotSame(m1.toJsonObject(), p.toJsonObject()); assertEquals(m1.size(), p.size());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getChildFrameID(), p.getChildFrameID()); assertEquals(t1.getTransform(), p.getTransform()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getForce(), p.getForce()); assertEquals(w1.getTorque(), p.getTorque()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertEquals(-1L, c.getData()); assertEquals("{\\"data\\":18446744073709551615}", c.toString()); assertEquals(1, c.toJsonObject().size()); assertEquals( -1L, Primitive.toUInt64(c.toJsonObject() .getJsonNumber(UInt64.FIELD_DATA).bigIntegerValue())); assertEquals(UInt64.TYPE, c.getMessageType());
assertEquals((byte) 123, i1.getData()); assertEquals("{\\"data\\":123}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals( (byte) 123, Primitive.toUInt8((short) i1.toJsonObject().getInt( UInt8.FIELD_DATA))); assertEquals(UInt8.TYPE, i1.getMessageType());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getHeader(), p.getHeader()); assertTrue(Arrays.deepEquals(g1.getStatusList(), p.getStatusList())); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.size(), p.size());
assertEquals("test", s1.getData()); assertEquals("{\\"data\\":\\"test\\"}", s1.toString()); assertEquals(1, s1.toJsonObject().size()); assertEquals("test", s1.toJsonObject().getString(String.FIELD_DATA)); assertEquals(String.TYPE, s1.getMessageType());
assertEquals(q1.toString(), p.toString()); assertEquals(q1.toJsonObject(), p.toJsonObject()); assertEquals(q1.getMessageType(), p.getMessageType()); assertEquals(q1.getX(), p.getX(), 0); assertEquals(q1.getY(), p.getY(), 0); assertEquals(q1.getZ(), p.getZ(), 0); assertNotSame(q1, p); assertNotSame(q1.toString(), p.toString()); assertNotSame(q1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(BigInteger.valueOf(0l), Primitive.fromUInt64(0l)); assertEquals(BigInteger.valueOf(5l), Primitive.fromUInt64(5l)); assertEquals(BigInteger.valueOf(10l), Primitive.fromUInt64(10l)); assertEquals(BigInteger.valueOf(15l), Primitive.fromUInt64(15l)); assertEquals(new BigInteger("18446744073709551615"), Primitive.fromUInt64(-1l));
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPolygon(), p.getPolygon()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(i1.toString(), clone.toString()); assertEquals(i1.toJsonObject(), clone.toJsonObject()); assertEquals(i1.getMessageType(), clone.getMessageType()); assertEquals(i1.getData(), clone.getData()); assertNotSame(i1, clone); assertNotSame(i1.toString(), clone.toString()); assertNotSame(i1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getHeader(), clone.getHeader()); assertEquals(t1.getChildFrameID(), clone.getChildFrameID()); assertEquals(t1.getTransform(), clone.getTransform()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject());
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", p2.toString()); assertEquals(2, p2.toJsonObject().size()); assertEquals(123, p2.toJsonObject().getInt("test")); assertEquals("abc", p2.toJsonObject().getString("test2")); assertEquals("type", p2.getPrimitiveType()); assertNull(p2.clone());
assertEquals(h1.toString(), p.toString()); assertEquals(h1.toJsonObject(), p.toJsonObject()); assertEquals(h1.getMessageType(), p.getMessageType()); assertEquals(h1.getSeq(), p.getSeq()); assertEquals(h1.getStamp(), p.getStamp()); assertEquals(h1.getFrameID(), p.getFrameID()); assertNotSame(h1, p); assertNotSame(h1.toString(), p.toString()); assertNotSame(h1.toJsonObject(), p.toJsonObject());
assertTrue(Time.sleepUntil(t)); assertTrue(greaterThanEquals(System.currentTimeMillis(), t.toDate() .getTime()));
assertEquals(v1.toString(), p.toString()); assertEquals(v1.toJsonObject(), p.toJsonObject()); assertEquals(v1.getMessageType(), p.getMessageType()); assertEquals(v1.getHeader(), p.getHeader()); assertEquals(v1.getVector3(), p.getVector3()); assertNotSame(v1, p); assertNotSame(v1.toString(), p.toString()); assertNotSame(v1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(0l, Primitive.toUInt64(BigInteger.valueOf(0l))); assertEquals(5l, Primitive.toUInt64(BigInteger.valueOf(5l))); assertEquals(10l, Primitive.toUInt64(BigInteger.valueOf(10l))); assertEquals(15l, Primitive.toUInt64(BigInteger.valueOf(15l))); assertEquals(-1l, Primitive.toUInt64(new BigInteger("18446744073709551615")));
assertEquals((byte) 127, i1.getData()); assertEquals("{\\"data\\":127}", i1.toString()); assertEquals(1, i1.toJsonObject().size()); assertEquals(127, i1.toJsonObject().getInt(Int8.FIELD_DATA)); assertEquals(Int8.TYPE, i1.getMessageType());
assertEquals((byte) -1, c.getData()); assertEquals("{\\"data\\":255}", c.toString()); assertEquals(1, c.toJsonObject().size()); assertEquals( (byte) -1, Primitive.toUInt8((short) c.toJsonObject().getInt( UInt8.FIELD_DATA))); assertEquals(UInt8.TYPE, c.getMessageType());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getChildFrameID(), p.getChildFrameID()); assertEquals(t1.getTransform(), p.getTransform()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertTrue(d.sleep()); assertTrue(greaterThanEquals(System.nanoTime(), t + d.toNSec()));
assertEquals(s1.toString(), clone.toString()); assertEquals(s1.toJsonObject(), clone.toJsonObject()); assertEquals(s1.getMessageType(), clone.getMessageType()); assertEquals(s1.getData(), clone.getData()); assertNotSame(s1, clone); assertNotSame(s1.toString(), clone.toString()); assertNotSame(s1.toJsonObject(), clone.toJsonObject());
assertEquals(0l, Primitive.fromUInt32(0)); assertEquals(5l, Primitive.fromUInt32(5)); assertEquals(10l, Primitive.fromUInt32(10)); assertEquals(15l, Primitive.fromUInt32(15)); assertEquals(4294967295l, Primitive.fromUInt32(-1));
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.size(), p.size()); assertEquals(p1.getHeader(), p.getHeader()); assertTrue(Arrays.deepEquals(p1.getPoses(), p.getPoses())); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPoint(), p.getPoint()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals("", empty.getData()); assertEquals("{\\"data\\":\\"\\"}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals("", empty.toJsonObject().getString(String.FIELD_DATA)); assertEquals(String.TYPE, empty.getMessageType());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getQuaternion(), p.getQuaternion()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertNull(cb.latest); assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"advertise_service\\",\\"type\\":\\"myType\\"," + "\\"service\\":\\"myService\\"}", DummyHandler.latest.toString()); assertTrue(s1.isAdvertised()); assertNotNull(cb.latest); assertEquals("{\\"test1\\":\\"test2\\"}", cb.latest.toString()); assertEquals("myServiceId", cb.latest.getId());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals("test", empty.getServiceRequestType());
assertEquals(g1.toString(), clone.toString()); assertEquals(g1.toJsonObject(), clone.toJsonObject()); assertEquals(g1.getMessageType(), clone.getMessageType()); assertEquals(g1.getStamp(), clone.getStamp()); assertEquals(g1.getID(), clone.getID()); assertNotSame(g1, clone); assertNotSame(g1.toString(), clone.toString()); assertNotSame(g1.toJsonObject(), clone.toJsonObject());
assertEquals(0, values[0]); assertEquals(5, values[1]); assertEquals(10, values[2]); assertEquals(15, values[3]); assertEquals(-1, values[4]);
assertNotNull(DummyHandler.latest); assertEquals( "{\\"op\\":\\"unadvertise\\",\\"id\\":\\"unadvertise:myTopic1:0\\",\\"topic\\":\\"myTopic1\\"}", DummyHandler.latest.toString()); assertFalse(t1.isAdvertised()); assertFalse(t1.isSubscribed());
assertFalse(h.connection); assertFalse(h.disconnection); assertFalse(h.error); assertTrue(r1.connect()); assertTrue(r1.isConnected()); assertTrue(h.connection); assertFalse(h.disconnection); assertFalse(h.error); assertTrue(r1.disconnect()); assertFalse(r1.isConnected()); assertTrue(h.connection); assertTrue(h.disconnection); assertFalse(h.error); assertTrue(h.connection); assertTrue(h.disconnection); assertTrue(h.error);
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", m1.toString()); assertEquals(2, m1.toJsonObject().size()); assertEquals(123, m1.toJsonObject().getInt("test")); assertEquals("abc", m1.toJsonObject().getString("test2")); assertEquals("", m1.getMessageType());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getQuaternion(), p.getQuaternion()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPose(), p.getPose()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getLinear(), clone.getLinear()); assertEquals(t1.getAngular(), clone.getAngular()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject());
assertEquals(c1.toString(), data.toString()); assertEquals(c1.toJsonObject(), data.toJsonObject()); assertEquals(c1.getMessageType(), data.getMessageType()); assertEquals(c1.getData(), data.getData()); assertNotSame(c1, data); assertNotSame(c1.toString(), data.toString()); assertNotSame(c1.toJsonObject(), data.toJsonObject());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.getStamp(), p.getStamp()); assertEquals(g1.getID(), p.getID()); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertEquals(new Duration(10000001044l), d2.add(d3)); assertEquals(d1, empty.add(d1)); assertEquals(d2, empty.add(d2)); assertEquals(d3, empty.add(d3));
assertEquals(c1.toString(), data.toString()); assertEquals(c1.toJsonObject(), data.toJsonObject()); assertEquals(c1.getMessageType(), data.getMessageType()); assertEquals(c1.getData(), data.getData()); assertNotSame(c1, data); assertNotSame(c1.toString(), data.toString()); assertNotSame(c1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(w1.toString(), p.toString()); assertEquals(w1.toJsonObject(), p.toJsonObject()); assertEquals(w1.getMessageType(), p.getMessageType()); assertEquals(w1.getHeader(), p.getHeader()); assertEquals(w1.getWrench(), p.getWrench()); assertNotSame(w1, p); assertNotSame(w1.toString(), p.toString()); assertNotSame(w1.toJsonObject(), p.toJsonObject());
assertEquals(h1.toString(), p.toString()); assertEquals(h1.toJsonObject(), p.toJsonObject()); assertEquals(h1.getMessageType(), p.getMessageType()); assertEquals(h1.getSeq(), p.getSeq()); assertEquals(h1.getStamp(), p.getStamp()); assertEquals(h1.getFrameID(), p.getFrameID()); assertNotSame(h1, p); assertNotSame(h1.toString(), p.toString()); assertNotSame(h1.toJsonObject(), p.toJsonObject());
assertEquals(1.5f, f1.getData(), 0); assertEquals("{\\"data\\":1.5}", f1.toString()); assertEquals(1, f1.toJsonObject().size()); assertEquals(1.5, f1.toJsonObject().getJsonNumber(Float32.FIELD_DATA) .doubleValue(), 0); assertEquals(Float32.TYPE, f1.getMessageType());
assertEquals(g1.toString(), p.toString()); assertEquals(g1.toJsonObject(), p.toJsonObject()); assertEquals(g1.getMessageType(), p.getMessageType()); assertEquals(g1.size(), p.size()); assertEquals(g1.getHeader(), p.getHeader()); assertTrue(Arrays.deepEquals(g1.getStatusList(), p.getStatusList())); assertNotSame(g1, p); assertNotSame(g1.toString(), p.toString()); assertNotSame(g1.toJsonObject(), p.toJsonObject());
assertTrue(r1.connect()); assertTrue(r1.isConnected());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.size(), p.size());
assertEquals("test", empty.getMessageType());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals("{\\"test\\":123,\\"test2\\":\\"abc\\"}", p1.toString()); assertEquals(2, p1.toJsonObject().size()); assertEquals(123, p1.toJsonObject().getInt("test")); assertEquals("abc", p1.toJsonObject().getString("test2")); assertEquals("type", p1.getPrimitiveType()); assertNull(p1.clone());
assertEquals(t1.toString(), data.toString()); assertEquals(t1.toJsonObject(), data.toJsonObject()); assertEquals(t1.getMessageType(), data.getMessageType()); assertEquals(t1.getData(), data.getData()); assertNotSame(t1, data); assertNotSame(t1.toString(), data.toString()); assertNotSame(t1.toJsonObject(), data.toJsonObject());
assertEquals("test", empty.getServiceResponseType());
assertEquals(0L, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0L, empty.toJsonObject().getJsonNumber(Int64.FIELD_DATA) .longValue()); assertEquals(Int64.TYPE, empty.getMessageType());
assertEquals(v1.toString(), clone.toString()); assertEquals(v1.toJsonObject(), clone.toJsonObject()); assertEquals(v1.getMessageType(), clone.getMessageType()); assertEquals(v1.getX(), clone.getX(), 0); assertEquals(v1.getY(), clone.getY(), 0); assertEquals(v1.getZ(), clone.getZ(), 0); assertNotSame(v1, clone); assertNotSame(v1.toString(), clone.toString()); assertNotSame(v1.toJsonObject(), clone.toJsonObject());
assertEquals(-1, c.getData()); assertEquals("{\\"data\\":4294967295}", c.toString()); assertEquals(1, c.toJsonObject().size()); assertEquals(-1, Primitive.toUInt32(c.toJsonObject().getInt(UInt32.FIELD_DATA))); assertEquals(UInt32.TYPE, c.getMessageType());
assertFalse(r1.send(Json.createObjectBuilder().build())); assertFalse(r2.send(Json.createObjectBuilder().build())); assertFalse(r3.send(Json.createObjectBuilder().build())); assertFalse(r4.send(Json.createObjectBuilder().build())); assertNull(DummyHandler.latest);
assertEquals(s3.toString(), clone.toString()); assertEquals(s3.toJsonObject(), clone.toJsonObject()); assertEquals(s3.getServiceResponseType(), clone.getServiceResponseType()); assertEquals(s3.getResult(), clone.getResult()); assertNotSame(s3, clone); assertNotSame(s3.toString(), clone.toString());
assertEquals(p1.toString(), clone.toString()); assertEquals(p1.toJsonObject(), clone.toJsonObject()); assertEquals(p1.getMessageType(), clone.getMessageType()); assertEquals(p1.getHeader(), clone.getHeader()); assertEquals(p1.getQuaternion(), clone.getQuaternion()); assertNotSame(p1, clone); assertNotSame(p1.toString(), clone.toString()); assertNotSame(p1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getTranslation(), p.getTranslation()); assertEquals(t1.getRotation(), p.getRotation()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getHeader(), p.getHeader()); assertEquals(p1.getPolygon(), p.getPolygon()); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals(i1.toString(), data.toString()); assertEquals(i1.toJsonObject(), data.toJsonObject()); assertEquals(i1.getMessageType(), data.getMessageType()); assertEquals(i1.getData(), data.getData()); assertNotSame(i1, data); assertNotSame(i1.toString(), data.toString()); assertNotSame(i1.toJsonObject(), data.toJsonObject());
assertEquals(0L, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals( 0L, Primitive.toUInt64(empty.toJsonObject() .getJsonNumber(UInt64.FIELD_DATA).bigIntegerValue())); assertEquals(UInt64.TYPE, empty.getMessageType());
assertFalse(empty.getData()); assertEquals("{\\"data\\":false}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertFalse(empty.toJsonObject().getBoolean(Bool.FIELD_DATA)); assertEquals(Bool.TYPE, empty.getMessageType());
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(p1.toString(), p.toString()); assertEquals(p1.toJsonObject(), p.toJsonObject()); assertEquals(p1.getMessageType(), p.getMessageType()); assertEquals(p1.getX(), p.getX(), 0); assertEquals(p1.getY(), p.getY(), 0); assertEquals(p1.getZ(), p.getZ(), 0); assertNotSame(p1, p); assertNotSame(p1.toString(), p.toString()); assertNotSame(p1.toJsonObject(), p.toJsonObject());
assertEquals((short) 0, empty.getData()); assertEquals("{\\"data\\":0}", empty.toString()); assertEquals(1, empty.toJsonObject().size()); assertEquals(0, empty.toJsonObject().getInt(Int16.FIELD_DATA)); assertEquals(Int16.TYPE, empty.getMessageType());
assertEquals((short) 0, values[0]); assertEquals((short) 5, values[1]); assertEquals((short) 10, values[2]); assertEquals((short) 15, values[3]); assertEquals((short) -1, values[4]);
assertEquals(a1.toString(), p.toString()); assertEquals(a1.toJsonObject(), p.toJsonObject()); assertEquals(a1.getMessageType(), p.getMessageType()); assertEquals(a1.size(), p.size()); assertTrue(Arrays.equals(a1.getData(), p.getData())); assertEquals(a1.getLayout(), p.getLayout()); assertNotSame(a1, p); assertNotSame(a1.toString(), p.toString()); assertNotSame(a1.toJsonObject(), p.toJsonObject());
assertEquals(empty.toString(), clone.toString()); assertEquals(empty.toJsonObject(), clone.toJsonObject()); assertEquals(empty.getMessageType(), clone.getMessageType()); assertNotSame(empty, clone); assertNotSame(empty.toString(), clone.toString()); assertNotSame(empty.toJsonObject(), clone.toJsonObject());
assertEquals(b1.toString(), data.toString()); assertEquals(b1.toJsonObject(), data.toJsonObject()); assertEquals(b1.getMessageType(), data.getMessageType()); assertEquals(b1.getData(), data.getData()); assertNotSame(b1, data); assertNotSame(b1.toString(), data.toString()); assertNotSame(b1.toJsonObject(), data.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getTwist(), p.getTwist()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertEquals(BigInteger.valueOf(0l), values[0]); assertEquals(BigInteger.valueOf(5l), values[1]); assertEquals(BigInteger.valueOf(10l), values[2]); assertEquals(BigInteger.valueOf(15l), values[3]); assertEquals(new BigInteger("18446744073709551615"), values[4]);
assertEquals(b1.toString(), clone.toString()); assertEquals(b1.toJsonObject(), clone.toJsonObject()); assertEquals(b1.getMessageType(), clone.getMessageType()); assertEquals(b1.getData(), clone.getData()); assertNotSame(b1, clone); assertNotSame(b1.toString(), clone.toString()); assertNotSame(b1.toJsonObject(), clone.toJsonObject());
assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getLinear(), p.getLinear()); assertEquals(t1.getAngular(), p.getAngular()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject());
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_polygon_holes.json"), writer.toString());
assertNull(feature);
assertNotNull(feature); assertEquals("id1", feature.getId()); assertEquals("Feature", feature.getType()); assertNotNull(feature.getGeometry()); assertEquals(createPoint(gf, 47.2256258d, -1.5545135d), feature.getGeometry());
assertNotNull(featureCollection); assertEquals(3, featureCollection.getFeatures() .size()); assertNotNull(featureCollection.getFeature("69")); assertNotNull(featureCollection.getFeature("19")); assertNotNull(featureCollection.getFeature("146"));
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_multipoint.json"), writer.toString());
assertNotNull(input); assertEquals(2, input.getInputId()); assertEquals(InputType.FAUNA, input.getType()); assertEquals(calendar.getTime(), input.getDate()); assertNull(input.getQualification()); assertEquals(0, input.getObservers() .size()); assertEquals(0, input.getTaxa() .size()); assertEquals(-1, input.getCurrentSelectedTaxonId());
assertNull(json);
assertNull(featureCollection);
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_point.json"), writer.toString());
assertTrue(distance > 90d); assertTrue(distance < 91d);
assertNotNull(featureCollection); assertEquals(3, featureCollection.getFeatures() .size()); assertNotNull(featureCollection.getFeature("69")); assertNotNull(featureCollection.getFeature("19")); assertNotNull(featureCollection.getFeature("146"));
assertNotNull(appSettings); assertNotNull(qualificationSettings); assertEquals(2, qualificationSettings.getOrganism()); assertEquals(140, qualificationSettings.getProtocol()); assertEquals(4, qualificationSettings.getLot());
assertNotNull(appSettings); assertNotNull(appSettings.getDbSettings()); assertNotNull(appSettings.getSyncSettings()); assertEquals("local.db", appSettings.getDbSettings() .getName()); assertEquals(8, appSettings.getDbSettings() .getVersion());
assertEquals(74d, length, 1d);
assertNotNull(writer.toString());
assertNotNull(syncSettings);
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_linestring.json"), writer.toString());
assertNotNull(json); assertEquals(TestHelper.getFixture("feature_point.json"), json);
assertNotNull(storageInB); assertEquals("128 B", storageInBFormatted); assertNotNull(storageInKb); assertEquals("1.0 kB", storageInKbFormatted); assertNotNull(storageInMb); assertEquals("1.0 MB", storageInMbFormatted); assertNotNull(storageInGb); assertEquals("1.0 GB", storageInGbFormatted);
assertNotNull(filteredFeatures); assertEquals(1, filteredFeatures.size()); assertEquals(features.get(1), filteredFeatures.get(0));
assertNotNull(appSettings); assertNotNull(appSettings.getDbSettings()); assertNotNull(appSettings.getSyncSettings()); assertEquals("data.db", appSettings.getDbSettings() .getName()); assertEquals(1, appSettings.getDbSettings() .getVersion());
assertNull(appSettings);
assertEquals(pager, pagerHelper.load(pager.getId()));
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_polygon_simple.json"), writer.toString());
assertEquals(378d, area, 1d);
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("featurecollection_empty.json"), writer.toString());
assertEquals(createPoint(gf, 47.2256258d, -1.5545135d), point);
assertNotNull(featureCollection); assertEquals("FeatureCollection", featureCollection.getType()); assertTrue(featureCollection.isEmpty());
assertNotNull(writer.toString());
assertNotNull(featureCollection); assertEquals("FeatureCollection", featureCollection.getType()); assertFalse(featureCollection.isEmpty()); assertTrue(featureCollection.hasFeature("id1")); assertTrue(featureCollection.hasFeature("id2")); assertTrue(featureCollection.hasFeature("id3")); assertTrue(featureCollection.hasFeature("id4")); assertTrue(featureCollection.hasFeature("id5"));
assertNull(mapSettings);
assertEquals(148d, length, 1d);
assertNotNull(appSettings); assertNull(appSettings.getQualificationSettings());
assertNotNull(featureCollection); assertEquals(3, featureCollection.getFeatures() .size()); assertNotNull(featureCollection.getFeature("69")); assertNotNull(featureCollection.getFeature("19")); assertNotNull(featureCollection.getFeature("146"));
assertNotNull(feature); assertEquals("id1", feature.getId()); assertEquals("Feature", feature.getType()); assertNotNull(feature.getGeometry()); assertEquals(createPoint(gf, 47.2256258d, -1.5545135d), feature.getGeometry());
assertNotNull(point); assertEquals(createPoint(gf, 47.2256258d, -1.5545135d), point);
assertNotNull(feature); assertEquals("id1", feature.getId()); assertEquals("Feature", feature.getType()); assertNotNull(feature.getGeometry()); assertEquals(createMultiPoint(gf, createPoint(gf, 47.2256258d, -1.5545135d), createPoint(gf, 47.225136d, -1.553913d)), feature.getGeometry());
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_geometrycollection.json"), writer.toString());
assertNotNull(mountPoint); assertEquals(INTERNAL, mountPoint.getStorageType());
assertNotNull(feature); assertEquals("id1", feature.getId()); assertEquals("Feature", feature.getType()); assertNotNull(feature.getGeometry()); assertEquals(createLineString(gf, createCoordinate(gf, 47.2256258d, -1.5545135d), createCoordinate(gf, 47.225136d, -1.553913d)), feature.getGeometry());
assertNotNull(feature); assertEquals("id1", feature.getId()); assertEquals("Feature", feature.getType()); assertNotNull(feature.getGeometry()); assertEquals(createMultiLineString(gf, createLineString(gf, createCoordinate(gf, 47.2256258d, -1.5545135d), createCoordinate(gf, 47.225136d, -1.553913d))), feature.getGeometry());
assertNull(syncSettings);
assertNotNull(pager); assertEquals(pagerId, pager.getId());
assertNull(geometry);
assertNotNull(featureCollection); assertTrue(featureCollection.isEmpty());
assertEquals(186d, area1, 1d); assertEquals(area1, area2, 0d);
assertNotNull(filteredFeatures); assertEquals(1, filteredFeatures.size()); assertEquals(featureCollection.getFeature("id2"), filteredFeatures.get(0));
assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture("feature_multilinestring.json"), writer.toString());
assertEquals(2, pages.size()); assertEquals("page 1" + Util.LS, pages.get(0)); assertEquals("page 2" + Util.LS, pages.get(1));
assertTrue(false); assertTrue(e.getMessage().equals(Msg.doc_pw_protected.get()));
assertTrue(file.exists()); assertTrue(file.getName().startsWith("1__"));
assertEquals(3, pages.size()); assertEquals("page 1" + Util.LS, pages.get(0)); assertEquals("page 2" + Util.LS, pages.get(1)); assertEquals("page 3" + Util.LS, pages.get(2));
assertEquals(expected, actual);
assertTrue(tempFilename.startsWith("test")); assertTrue(tempFilename.endsWith(".pdf"));
assertFalse(creator.accept(serviceData));
assertFalse(creator.accept(emptyProps)); assertFalse(creator.accept(intProps)); assertTrue(creator.accept(stringProps));
assertEquals(nullServiceInfo, creator.createServiceInfo(empty)); assertEquals(nullServiceInfo, creator.createServiceInfo(badTypes)); assertEquals(serviceInfo, creator.createServiceInfo(rawInfo));
assertTrue(this.creator.create(info, null) instanceof TwilioRestClient);
assertNull(creator.create(badUrlServiceInfo, new ServiceConnectorConfig() { }));
assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isTrue();
assertThat(container.getMimeMappings().get("abs")).isEqualTo("audio/x-mpeg"); assertThat(container.getMimeMappings().get("html")).isEqualTo("text/html;charset=utf-8"); assertThat(container.getMimeMappings().get("json")).isEqualTo("text/html;charset=utf-8"); assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isNull();
assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isTrue();
assertEquals(classifierData.size(), bag.size()); assertTrue("some instances from data should not be in the bag", found); assertEquals(regressionData.size(), bag.size()); assertTrue("some instances from data should not be in the bag", found);
assertTrue("not like", test.like() instanceof VectorView);
assertEquals(hiddenSequenceExp[i], hiddenSequenceDec.get(i)); assertEquals(outputSequenceExp[i], outputSequenceDec.get(i));
assertEquals(gold--, re.getItemID2());
assertEquals(1, cl.getLearner().auc(), 0.1); assertEquals(1, adaptiveLogisticRegression.auc(), 0.1);
assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
assertNotNull(AnalyzerUtils.createAnalyzer(StandardAnalyzer.class.getName()));
assertEquals(gold--, re.getUserID2());
assertEquals(res, "import statement", res); assertEquals(GOLD[i], res); assertEquals(res, "import statement 1", res); assertEquals(res, "start=1", res);
assertEquals("row size", test.size(), result.rowSize()); assertEquals("col size", test.size(), result.columnSize());
assertEquals(i, cache.get(i));
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get(500000L));
assertEquals(1, count(values, classifierData.get(index).get(attr))); assertEquals(1, count(values, regressionData.get(index).get(attr)));
assertEquals(confusionMatrix.getLabels().size(), m.numCols()); assertTrue(rowLabels.keySet().contains(LABELS[0])); assertTrue(rowLabels.keySet().contains(LABELS[1])); assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL)); assertEquals(2, confusionMatrix.getCorrect(LABELS[0])); assertEquals(20, confusionMatrix.getCorrect(LABELS[1])); assertEquals(0, confusionMatrix.getCorrect(DEFAULT_LABEL));
assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
assertTrue(list.isEmpty()); assertEquals(0, list.size());
assertEquals("Saved vector is identical to original", old.get(), value);
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get("foo"));
assertEquals(prefs, instance.getPreferencesFromUser(sampleUserID));
assertEquals("part size", 2, part.getNumNondefaultElements());
assertEquals(noValue, forest.classify(testData.getDataset(), rng, testData.get(0)), EPSILON); assertEquals(noValue, forest.classify(testData.getDataset(), rng, testData.get(2)), EPSILON);
assertEquals("test[0][1]", 2.1, test.getQuick(0, 1), EPSILON); assertEquals("test[1][1]", 3.2, test.getQuick(1, 1), EPSILON); assertEquals("test[2][1]", 4.3, test.getQuick(2, 1), EPSILON);
assertEquals("rows", test.columnSize(), transpose.rowSize()); assertEquals("cols", test.rowSize(), transpose.columnSize());
assertSame("wrong class", copy.getClass(), matrix.getClass()); assertEquals("Wrong row indices.", originalSlice.index(), copySlice.index()); assertEquals("Slices are not equal.", originalSlice, copySlice); assertSame("Number of rows of original and copy are not equal.", originalSlices.hasNext(), copySlices.hasNext());
assertTrue("type", like instanceof DenseMatrix); assertEquals("rows", test.rowSize(), like.rowSize()); assertEquals("columns", test.columnSize(), like.columnSize());
assertEquals(1, instance.getNumUsers());
assertFalse(list.isEmpty()); assertEquals(3, list.size());
assertNotNull(AnalyzerUtils.createAnalyzer(CJKAnalyzer.class.getName()));
assertEquals("attributes size", nbAttributes, attrs.length);
assertTrue(mt.viewColumn(0).isDense() == m.viewRow(0).isDense()); assertTrue(mt.viewRow(0).isDense() == m.viewColumn(0).isDense()); assertTrue(mt.viewColumn(0).isDense()); assertTrue(mt.viewRow(0).isDense());
assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertEquals(gold++, re.getItemID1());
assertEquals(6, VectorHelper.topEntries(v, 6).size()); assertTrue(VectorHelper.topEntries(v, 9).size() < 9); assertTrue(VectorHelper.topEntries(v, 5).size() < v.getNumNonZeroElements());
assertEquals(numOutputSimilarities, 10);
assertTrue(m1.getQuick(row, col) >= -1.0); assertTrue(m1.getQuick(row, col) < 1.0); assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertEquals(gold--, topItem);
assertSame(sampleUserID, userIDs.next()); assertFalse(userIDs.hasNext());
assertEquals(0, VectorHelper.topEntries(v, 6).size());
assertEquals(500, AdaptiveLogisticRegression.stepSize(15000, 2)); assertEquals(2000, AdaptiveLogisticRegression.stepSize(15000, 2.6)); assertEquals(5000, AdaptiveLogisticRegression.stepSize(24000, 2.6)); assertEquals(10000, AdaptiveLogisticRegression.stepSize(15000, 3));
assertEquals(gold++, re.getUserID1());
assertEquals("test[1][0]", 2.1, test.getQuick(1, 0), EPSILON); assertEquals("test[1][1]", 3.2, test.getQuick(1, 1), EPSILON);
assertArrayEquals(new double[][]{{noValue, Double.NaN, Double.NaN}, {noValue, yesValue, Double.NaN}, {noValue, noValue, Double.NaN}}, predictions);
assertTrue("type", like instanceof DenseMatrix); assertEquals("rows", 4, like.rowSize()); assertEquals("columns", 4, like.columnSize());
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get(500000L));
assertTrue(set.add(id)); assertEquals(3, clusterCount); assertEquals(0, v[0].dot(v[1]), 1E-10); assertEquals(0, v[1].dot(v[2]), 1E-10); assertEquals(0, v[0].dot(v[2]), 1E-10);
assertEquals("row size", 2, row.getNumNondefaultElements());
assertEquals(0, map.size()); assertTrue(map.isEmpty()); assertNull(map.get("foo"));
assertEquals("size", 3, test.getNumNondefaultElements());
assertTrue(m1.getQuick(row, col) >= 0.0); assertTrue(m1.getQuick(row, col) < 1.0); assertEquals(0, diff.aggregate(Functions.PLUS, Functions.ABS), 1e-10);
assertEquals(m, mtt, EPSILON);
assertEquals("row size", 3, column.getNumNondefaultElements()); assertEquals(x, column.get(i++), 0);
assertTrue(row < 5); assertTrue(col < 6); assertEquals(135, m.aggregate(Functions.PLUS, Functions.IDENTITY), 1e-10);
assertThat(captor.getValue()) .isEqualToComparingFieldByField(new Note(null, TestData.NEW_TITLE, TestData.NEW_TEXT)); assertThat(model.getNoteId()).isEqualTo(TestData.NEW_ID);
assertThat(model.getTitleError().get()).isEqualTo(R.string.mandatory_field); assertThat(model.getTextError().get()).isEqualTo(R.string.mandatory_field);
assertThat(model.getError().get()).isTrue(); assertThat(model.getError().get()).isFalse(); assertThat(model.getItems()).hasSize(2);
assertThat(model.output.get()).isEqualTo("246.00");
assertThat(model.output.get()).isEqualTo("246.00");
assertThat(model.output.get()).isEqualTo("246.00");
assertThat(captor.getValue()) .isEqualToComparingFieldByField(new Note(null, TestData.NEW_TITLE, TestData.NEW_TEXT));
assertThat(captor.getValue()).isEqualTo(TestData.ID_1);
assertThat(model.getError().get()).isTrue(); assertThat(model.getError().get()).isFalse(); assertThat(model.getTitle().get()).isEqualTo(TestData.TITLE_A);
assertThat(model.output.get()).isEqualTo("246.00");
assertEquals(1, sofaTraceContext.getThreadLocalSpanSize()); assertEquals(Thread.currentThread().getId(), runnableTread.getThreadId()); assertEquals(Thread.currentThread().getName(), runnableTread.getThreadName()); assertEquals(1, sofaTraceContext.getThreadLocalSpanSize()); assertEquals(2, runnableTread.atomicLong.get()); assertNotEquals(Thread.currentThread().getId(), runnableTread.getThreadId()); assertNotEquals(Thread.currentThread().getName(), runnableTread.getThreadName());
assertTrue(logs.toString(), logs.get(0).contains("[INFO]")); assertTrue(logs.toString(), logs.get(0).contains("test info with tracerId"));
assertEquals(true, this.clientReporter.getIsDigestFileInited().get());
assertEquals(expectedClientSpanEncoder, this.clientReporter.getContextEncoder()); assertTrue(StringUtils.isBlank(logNameKey));
assertThat(poller.poll(handler), is(EventPoller.PollState.IDLE)); assertThat(poller.poll(handler), is(EventPoller.PollState.GATING)); assertThat(poller.poll(handler), is(EventPoller.PollState.PROCESSING));
assertSame(ExtendFormat.Builtin.B3_HTTP_HEADERS, registryExtractorInjector.getFormatType());
assertTrue(timeWaiting >= theTimeout);
assertTrue(file.exists()); assertTrue(profileContents.toString(), profileContents.size() == 1);
assertNull(mockSofaTracer.getServerReporter()); assertNull(mockSofaTracer.getClientReporter()); assertTrue(mockSofaTracer != null);
assertTrue(timeWaiting >= theTimeout);
assertTrue(span.isClient()); assertFalse(span.isServer()); assertTrue(clientLogType.equals(logType)); assertTrue(serverLogType.equals(serverSpan.getLogType()));
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]"));
assertEquals("traceId", deserialized.getTraceId()); assertEquals("spanId", deserialized.getSpanId()); assertEquals("parentId", deserialized.getParentId()); assertFalse(deserialized.isSampled());
assertEquals(statMapKey.hashCode(), statMapKey1.hashCode()); assertEquals(statMapKey, statMapKey1); assertEquals(statMapKey.getKeyMap(), statMapKey1.getKeyMap()); assertFalse(statMapKey2.equals(statMapKey1)); assertFalse(statMapKey.equals(statMapKey1)); assertFalse(statMapKey.equals(statMapKey1)); assertTrue(statMapKey.equals(statMapKey1));
assertTrue(!logs.isEmpty());
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]"));
assertSame(expectedRunnableList, tracedExecutorService.shutdownNow());
assertEquals(Format.Builtin.BINARY, registryExtractorInjector.getFormatType());
assertEquals(ExtendFormat.Builtin.B3_TEXT_MAP, registryExtractorInjector.getFormatType());
assertEquals("\\n" + sofaTracerSpanContext, SofaTracer.ROOT_SPAN_ID, thisAsParentSpan .getSofaTracerSpanContext().getSpanId()); assertNotEquals(traceId, thisAsParentSpan.getSofaTracerSpanContext().getTraceId()); assertEquals(baggage, sofaTracerSpanContext.getBizBaggage());
assertSame(Format.Builtin.HTTP_HEADERS, registryExtractorInjector.getFormatType());
assertTrue(span.getTagsWithNumber().containsKey("key") && span.getTagsWithNumber().containsValue(100)); assertTrue(span.getTagsWithNumber().containsKey("key1") && span.getTagsWithNumber().containsValue(2.22));
assertTrue("Extract baggage : " + extractContext.getBizBaggage(), baggage.equals(extractContext.getBizBaggage()));
assertEquals("value", TracerUtils.getEmptyStringIfNull(map, "key")); assertTrue(StringUtils.isBlank(TracerUtils.getEmptyStringIfNull(map, "key1")));
assertTrue(extractContext.toString(), extractContext.getSpanId().equals(SofaTracer.ROOT_SPAN_ID)); assertEquals(extractContextAllo.toString(), SofaTracer.ROOT_SPAN_ID, extractContextAllo.getSpanId());
assertEquals(Reporter.COMPOSITE_REPORTER, sofaTracerCompositeDigestReporter.getReporterType());
assertTrue(hexString.length() >= 8);
assertEquals(2, SpanReportListenerHolder.getSpanReportListenersHolder().size()); assertEquals(0, SpanReportListenerHolder.getSpanReportListenersHolder().size()); assertEquals(2, SpanReportListenerHolder.getSpanReportListenersHolder().size());
assertEquals(traceIdOrig, traceIdResult); assertEquals(traceIdOrig, traceIdResult);
assertTrue("Endtime : " + endTime + ", Duration :" + span.getDurationMicroseconds(), 111 < span.getDurationMicroseconds() && span.getDurationMicroseconds() < endTime);
assertEquals("GET", valueArray[2]); assertEquals(3, valueArray.length);
assertTrue(logs.toString(), logs.get(0).contains("[WARN]")); assertTrue(logs.toString(), logs.get(0).contains("test warn"));
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]"));
assertTrue(!logs.isEmpty());
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]")); assertTrue(logs.toString(), logs.get(0).contains("[tracerId:1234567890]"));
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]")); assertTrue(logs.toString(), logs.get(0).contains("test for SynchronizingSelfLog error situation"));
assertTrue(checkResult(params, contents.get(0)));
assertTrue(!logs.isEmpty());
assertTrue(tracedExecutorService.isShutdown());
assertTrue(file.exists()); assertTrue(errorContents.toString(), errorContents.size() == 1);
assertEquals(expectRollingPolicy, rollingPolicy);
assertTrue(tracedExecutorService.awaitTermination(3, TIME_UNIT));
assertTrue(registry == registry1);
assertEquals(Format.Builtin.TEXT_MAP, registryExtractorInjector.getFormatType());
assertTrue(!logs.isEmpty());
assertEquals(spanContext.toString(), SofaTracer.ROOT_SPAN_ID, spanContext.getSpanId());
assertTrue("Endtime : " + endTime + ", Duration :" + span.getDurationMicroseconds(), 111 < span.getDurationMicroseconds() && span.getDurationMicroseconds() < endTime);
assertEquals(expectLogReserveConfig, logReserveConfig);
assertSame(childSpan.getParentSofaTracerSpan(), parentSpan);
assertTrue("client".equals(span.getLogType()));
assertEquals(SofaTracer.ROOT_SPAN_ID, sofaTracerSpanContext.getSpanId()); assertTrue(StringUtils.isBlank(sofaTracerSpanContext.getParentId())); assertTrue(!sofaTracerSpanContext.isSampled());
assertTrue(str, StringUtils.isNotBlank(str));
assertEquals("parentId", sofaTracerSpanContext1.getParentId()); assertTrue(baggage.size() == 2); assertTrue(baggage.containsKey("baggage1") && baggage.containsValue("value1")); assertTrue(baggage.containsKey("baggage2") && baggage.containsValue("value2"));
assertTrue(span.getTagsWithBool().containsKey("key") && span.getTagsWithBool().containsValue(true));
assertTrue(TracerUtils.checkBaggageLength(sofaTracerSpan, "key", "value"));
assertTrue(StringUtils.isBlank(this.clientReporter.getStatReporterType()));
assertTrue(logs.toString(), logs.get(0).contains("[INFO]")); assertTrue(logs.toString(), logs.get(0).contains("test info"));
assertFalse(tracedExecutorService.isTerminated());
assertEquals(traceIdOrig, traceIdResult);
assertTrue(StringUtils.isNotBlank(pid));
assertEquals("SofaTracerSpanTest", sofaTracerSpan.getOperationName()); assertEquals(expected, sofaTracerSpan.getOperationName());
assertEquals(Long.MAX_VALUE, sequenceGroup.get());
assertTrue(clientSpan.isClient()); assertTrue(serverSpan.isServer());
assertTrue(str, StringUtils.isNotBlank(str));
assertEquals(clientLogType, this.clientReporter.getDigestLogType());
assertEquals(this.clientLogType, this.clientReporter.getDigestLogType());
assertEquals("\\n" + stringBaggage, sysBaggage, sofaTracerSpanContext1.getSysBaggage());
assertTrue(span.getTagsWithStr().containsKey("key") && span.getTagsWithStr().containsValue("value"));
assertTrue(logs.toString(), logs.get(0).contains("[ERROR]"));
assertEquals(4, map.size()); assertEquals(expected, map);
assertThat(result, is(nullValue()));
assertThat(result, is(output));
assertThat(resultOutput.getCustomer(), is(customer)); assertThat(resultOutput.getPriceCalculateOutput(), is( priceCalculateOutput)); assertThat(resultOutput.getTourInfo(), is(tourInfo));
assertThat(result, is(true));
assertThat(page.getTotalPages(), is(0)); assertThat(page.getNumber(), is(0));
assertThat(result, is(notNullValue())); assertThat(result.size(), is(2)); assertThat(result.get(0), is(reserve1)); assertThat(result.get(1), is(reserve2));
assertThat(resultOutput.getCustomer(), is(nullValue())); assertThat(resultOutput.getPriceCalculateOutput(), is( priceCalculateOutput)); assertThat(resultOutput.getTourInfo(), is(tourInfo));
assertThat(messages.isNotEmpty(), is(true)); assertThat(messages.getType(), is((ResultMessageType) ERROR)); assertThat(messages.getList().size(), is(1)); assertThat(messages.getList().get(0).getCode(), is( MessageId.E_TR_0001));
assertThat(output, is(output));
assertThat(messages.isNotEmpty(), is(true)); assertThat(messages.getType(), is((ResultMessageType) ERROR)); assertThat(messages.getList().size(), is(1)); assertThat(messages.getList().get(0).getCode(), is( MessageId.E_TR_0003));
assertEquals(form.toString(), backForm.toString());
assertThat(result.hasErrors(), is(false));
assertThat(result.hasErrors(), is(false)); assertThat(result.getErrorCount(), is(0));
assertThat(result, is(false));
assertThat(result, is(notNullValue())); assertThat(result.size(), is(2)); assertThat(o1.getLimitExceeding(), is(false)); assertThat(o1.getReserve(), is(reserve1)); assertThat(o1.getTourDays(), is("2")); assertThat(o2.getLimitExceeding(), is(true)); assertThat(o2.getReserve(), is(reserve2)); assertThat(o2.getTourDays(), is("4"));
assertThat(result, is(nullValue()));
assertThat(result, is(false));
assertThat(result.hasErrors(), is(true)); assertThat(error.getCode(), is("NotEquals.customerPass")); assertThat(error.getDefaultMessage(), is( "Password and password confirm is not same."));
assertThat(result, is(info));
assertThat(result.hasErrors(), is(false));
assertThat(argOfDelete.getValue(), is("001"));
assertThat(result.hasErrors(), is(true)); assertThat(error.getCode(), is("IncorrectDate.customerBirth")); assertThat(error.getDefaultMessage(), is( "Incorrect date was entered."));
assertThat(result, is(false));
assertThat(result.hasErrors(), is(true)); assertThat(error.getCode(), is("IncorrectDate.inputdate")); assertThat(error.getDefaultMessage(), is( "Incorrect date was entered."));
assertThat(result.hasErrors(), is(false)); assertThat(result.getErrorCount(), is(0));
assertThat(messages.isNotEmpty(), is(true)); assertThat(messages.getType(), is((ResultMessageType) ERROR)); assertThat(messages.getList().size(), is(1)); assertThat(messages.getList().get(0).getCode(), is( MessageId.E_TR_0002));
assertThat(result, is(c));
assertThat(result, is(page));
assertThat(result.hasErrors(), is(false));
assertThat(result, is(notNullValue())); assertThat(result.size(), is(0));
assertThat(result.hasErrors(), is(false)); assertThat(result.getErrorCount(), is(0));
assertThat(url, is("classpath:reports/reservationReport.pdf"));
assertThat(response.getHeader("Pragma"), is("private")); assertThat(response.getHeader("Cache-Control"), is( "private, must-revalidate")); assertThat(response.getCharacterEncoding(), is(StandardCharsets.UTF_8 .name()));
assertThat(result, is(reserve));
assertThat(customerArg.getValue(), is(c)); assertThat(customerArg.getValue().getCustomerCode(), is("12345678"));
assertTrue(out.readableBytes() > 0); assertTrue(!result.getBatch().getMsgSeqs().isEmpty());
assertNotNull(config); assertEquals(config.getProperty("hermes"), "mq"); assertEquals(config.getProperty("inherited"), "got"); assertNotNull(config); assertEquals(config.getProperty("hermes"), "default"); assertEquals(config.getProperty("inherited"), "got");
assertEquals(17, nrOfPlayers);
assertEquals(8, nrOfPlayers);
assertEquals(0, gate.getTaskQueueSize()); assertEquals(2, dest.size()); assertEquals(1, gate.getTaskQueueSize()); assertEquals(2, dest.size()); assertEquals(0, gate.getTaskQueueSize()); assertEquals(3, dest.size()); assertEquals(2, gate.getTaskQueueSize()); assertEquals(1, dest.size()); assertTrue(dest.contains("delta"));
assertEquals(600_000, objects.wallet.getBalance().longValue()); assertNull(pledge.dependency); assertNotNull(pledge.pledge); assertEquals(500_000, objects.wallet.getBalance().longValue()); assertTrue(flags[0]); assertTrue(flags[1]); assertEquals(contract.getInput(0).duplicateDetached(), pledge.pledge.getInput(0).duplicateDetached());
assertEquals(100_000_000, userInputToSatoshis("1.0")); assertEquals(0, userInputToSatoshis("0.0")); assertEquals(0, userInputToSatoshis("0")); assertEquals(1, userInputToSatoshis("0.00000001")); assertEquals(21_000_000L * 100_000_000L, userInputToSatoshis("21000000"));
assertEquals("Hello Bob", outputs.get(0)); assertTrue(change.wasReplaced()); assertEquals("Hello Mike", change.getRemoved().get(0)); assertEquals("Hello Bob", change.getAddedSubList().get(0));
assertEquals(2, contract.getInputs().size());
assertEquals(2, contract.getInputs().size());
assertThat(componentConfig).containsKey(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS); assertThat(emitFrequencyInSeconds).isGreaterThan(0);
assertThat(strRepresentation).contains(obj.toString()).contains("" + count);
assertThat(obj).isEqualTo(ANY_OBJECT);
assertFalse(r.equals(notARankable), r + " is equal to " + notARankable + " but it should not be");
assertThat(rankings.maxSize()).isGreaterThan(0);
assertThat(counts).isEmpty();
assertThat(rankings.maxSize()).isEqualTo(topN);
assertThat(seconds).isEqualTo(secondsToAdvance);
assertThat(r.hashCode()).isNotEqualTo(falseDuplicate.hashCode());
assertThat(first.compareTo(second)).isEqualTo(expCompareToValue);
assertFalse(r.equals(falseDuplicate), r + " is equal to " + falseDuplicate + " but it should not be");
assertTrue(r.equals(trueDuplicate), r + " is not equal to " + trueDuplicate + " but it should be");
assertThat(r.hashCode()).isEqualTo(trueDuplicate.hashCode());
assertThat(counts).isEmpty();
assertThat(count).isEqualTo(ANY_COUNT);
assertThat(actualFields).isEqualTo(Lists.newArrayList(fields));
assertThat(directory, is("build/dockerLogs/SomeTestClass"));
assertThat(directory, is("/tmp/circle-artifacts.g4DjuuD/dockerLogs/SomeTestClass"));
assertThat(directory, is("/tmp/circle-artifacts.123456/dockerLogs/some-path"));
assertThat(patternCollection.anyMatch("foobar")).isTrue();
assertThat(patternCollection.anyMatch("afoolol")).isTrue();
assertThat(GitUtils.parsePathFromGitRemoteUrl(input)).isEqualTo(expected);
assertThat(DockerComposeRuleConfig.findAutomaticallyFrom(temporaryFolder.getRoot())).isEmpty();
assertThat(patternCollection.anyMatch("bbbbb")).isFalse();
assertThat(directory, is("build/dockerLogs/SomeTestClass"));
assertNotNull( oneGOOGShare ); assertTrue( oneGOOGShare.compareTo( zero ) >= 0 ); assertEquals( expectedTenGOOGShares, actualTenGOOGShares );
assertEquals( 0, calculateNAV.computeStockWorth( "GOOG", 1000 ) .compareTo( expected ), 0.001 );
assertEquals(IN_PROGRESS, state.process(SAVING, participant, survey)); assertEquals(COMPLETED, state.process(SUBMITTING, participant, survey));
assertEquals(2, completed.nextPossibleActions(admin, survey).size()); assertTrue(completed.nextPossibleActions(admin, survey).contains(APPROVING)); assertTrue(completed.nextPossibleActions(admin, survey).contains(REJECTING)); assertEquals(0, completed.nextPossibleActions(participant, survey).size());
assertEquals(2, completed.nextPossibleStatus(admin, survey).size()); assertTrue(completed.nextPossibleStatus(admin, survey).contains(APPROVED)); assertTrue(completed.nextPossibleStatus(admin, survey).contains(REJECTED)); assertEquals(0, completed.nextPossibleStatus(participant, survey).size());
assertEquals("a", result);
assertTrue(range10_20.contains(20));
assertTrue(range10_20.contains(15));
assertTrue(noLowBound.contains(-10)); assertTrue(noLowBound.contains(10)); assertFalse(noLowBound.contains(11));
assertEquals(IN_PROGRESS, state.process(REOPENING, participant, survey));
assertEquals("test/entity/APPLICATION/external-id/foo", path);
assertFalse(range10_20.contains(9));
assertTrue(noHighBound.contains(100000)); assertTrue(noHighBound.contains(0)); assertFalse(noHighBound.contains(-1));
assertTrue(range10_20.contains(10));
assertEquals("0 - *", new RangeBand<>(0, null).toString()); assertEquals("* - 10", new RangeBand<>(null, 10).toString()); assertEquals("0 - 10", new RangeBand<>(0, 10).toString());
assertFalse(range10_20.contains(21));
assertEquals("test/entity/APPLICATION/id/23", path);
assertEquals(Status.OK, parser.readStatus(reader)); assertEquals(Status.ZERO_RESULTS, parser.readStatus(reader)); assertEquals(Status.OVER_QUERY_LIMIT, parser.readStatus(reader)); assertEquals(Status.REQUEST_DENIED, parser.readStatus(reader)); assertEquals(Status.INVALID_REQUEST, parser.readStatus(reader)); assertNull(parser.readStatus(reader));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(PlaceScope.APP, parser.readScope(reader)); assertEquals(PlaceScope.GOOGLE, parser.readScope(reader)); assertNull(parser.readScope(reader));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("it works!", clojure.eval("(require \'basic.core)(basic.core/test-fn)"));
assertEquals("it works!", ruby.eval("puts $:.inspect;require \'ham\';Ham.new.biscuit").toString());
assertEquals("C:\\\\foobar", array[0]); assertEquals("D:\\\\baz", array[1]);
assertTrue(testLanguage.registered);
assertEquals(1, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees);
assertEquals(1, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees); assertEquals(4, numEmployees);
assertEquals("(208)555-1818", sarahPhone); assertEquals("(208)888-1900", joePhone); assertNull(nullPhone); assertNull(notCustomer);
assertEquals(bob, bobFromMap); assertEquals(jose, joseFromMap); assertEquals(sven, svenFromMap); assertEquals(ingabrit, ingabritFromMap); assertNull(notEmployee);
assertEquals(expected, phoneBook);
assertEquals(tx.toString().contains("No inputs!"), true);
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(Intent.ACTION_DIAL)); assertThat(intent.getData(), is(Uri.parse("tel:02644569874")));
assertThat(intent.enterTransition(), is(enterAnimationResource)); assertThat(intent.exitTransition(), is(exitAnimationResource));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(MediaStore.ACTION_VIDEO_CAPTURE)); assertThat(intent.getParcelableExtra(MediaStore.EXTRA_OUTPUT), is(nullValue()));
assertThat(intent.dataType(), is(notNullValue())); assertThat(intent.uri(), is(nullValue())); assertThat(intent.dataType(), is(nullValue()));
assertThat(starter, is(notNullValue())); assertThat(starter.getContext(), instanceOf(TestActivity.class));
assertThat(intent.phoneNumber(), is(""));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(MediaStore.ACTION_IMAGE_CAPTURE)); assertThat(intent.getParcelableExtra(MediaStore.EXTRA_OUTPUT), is(nullValue()));
assertThat(uris, is(notNullValue())); assertThat(uris.size(), is(2)); assertThat(uris.get(0), is(uriFirst)); assertThat(uris.get(1), is(uriSecond));
assertThat(intent.label(), is("Venice"));
assertThat(handlers, is(not(nullValue()))); assertThat(handlers.size(), is(2)); assertThat(handlers.get(0), is(handlerFirst)); assertThat(handlers.get(1), is(handlerSecond));
assertThat(intent.dialogTitle(), is((CharSequence) ""));
assertThat( intent.getData(), is(Uri.parse("geo:" + Double.toString(40.7141667) + "," + Double.toString(-74.0063889))) );
assertThat(intent.activityNotFoundMessage(), is((CharSequence) "No activity found to support launched request"));
assertThat(uri, is(notNullValue())); assertThat(uri.getScheme(), is(EmailIntent.URI_SCHEME)); assertThat( uri, is(Uri.fromParts( "mailto", "test@android.com", null )) );
assertThat(uri, is(notNullValue())); assertThat(uri.getScheme(), is("mailto")); assertThat( uri, is(Uri.fromParts( "mailto", "test1@android.com,test2@android.com", null )) );
assertThat(intent.availability(), is(CalendarIntent.AVAILABILITY_FREE));
assertThat(starter, is(notNullValue())); assertThat(starter.getContext(), is((Context) activity));
assertThat(intent.body().toString(), is("Sms body."));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(MediaStore.ACTION_VIDEO_CAPTURE)); assertThat(intent.getParcelableExtra(MediaStore.EXTRA_OUTPUT), is(nullValue()));
assertThat(intent.description().toString(), is("Event\'s description text."));
assertEquals("lion.png", ContentIntent.appendDefaultFileSuffixIfNotPresented("lion.png", ".jpg")); assertEquals("elephant.jpg", ContentIntent.appendDefaultFileSuffixIfNotPresented("elephant", ".jpg")); assertEquals("cat.1", ContentIntent.appendDefaultFileSuffixIfNotPresented("cat.1", ".jpg"));
assertThat(intent.lat(), is(24.16546d)); assertThat(intent.lng(), is(135.154d));
assertThat(intent, is(notNullValue())); assertThat(componentName, is(notNullValue())); assertThat(componentName.getClassName(), is(TestActivity.class.getName())); assertThat(componentName.getPackageName(), is(context.getPackageName()));
assertThat(intent.time(), is(3232L));
assertThat(intent.dataType(), is(MimeType.VIDEO));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(MediaStore.ACTION_IMAGE_CAPTURE)); assertThat(intent.getParcelableExtra(MediaStore.EXTRA_OUTPUT), is(nullValue()));
assertThat(simpleIntent.onStartWith(mockStarter, intent), is(true));
assertThat(intent.exitTransition(), is(animationResource));
assertThat(intent.title(), is((CharSequence) "Title"));
assertThat(EmailIntent.createUri(new ArrayList<String>(0)), is(nullValue()));
assertThat(intent.flags(), is(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK));
assertThat(intent.endTime(), is(13L));
assertThat(intent.zoomLevel(), is(12));
assertThat(intent.beginTime(), is(20L));
assertThat(intent.mimeType(), is(MimeType.AUDIO));
assertThat(intent.dataType(), is(MimeType.AUDIO_MP3));
assertThat(intent.phoneNumber(), is("00124456"));
assertThat(intent.requestCode(), is(1234)); assertThat(intent.requestCode(), is(-1));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(Intent.ACTION_VIEW)); assertThat(intent.getData(), is(Uri.parse("sms:02644569874")));
assertThat(intent.eventId(), is(123523L));
assertThat( ContentIntent.createContentFileTimeStamp(), is(new SimpleDateFormat(ContentIntent.CONTENT_FILE_TIME_STAMP_FORMAT, Locale.getDefault()).format(new Date())) );
assertThat(intent.message().toString(), is("Email message."));
assertThat(intent.locationQuery(), is("Iceland"));
assertThat(intent.zoomLevel(), is(MapIntent.ZOOM_LEVEL_MIN)); assertThat(intent.zoomLevel(), is(MapIntent.ZOOM_LEVEL_MAX));
assertEquals(TestActivity.class, intent.activityClass());
assertThat(handlers, is(not(nullValue()))); assertThat(handlers.size(), is(2)); assertThat(handlers.get(0), is(handlerFirst)); assertThat(handlers.get(1), is(handlerSecond));
assertThat(intent.applicationId(), is(""));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(Intent.ACTION_GET_CONTENT)); assertThat(intent.getType(), is(MimeType.IMAGE));
assertThat(intent.dataType(), is(notNullValue())); assertThat(intent.uri(), is(nullValue())); assertThat(intent.dataType(), is(nullValue()));
assertThat(intent, is(not(CoreMatchers.nullValue()))); assertThat(intent.getAction(), is(Intent.ACTION_VIEW));
assertThat(intent.type(), is(CalendarIntent.TYPE_EDIT_EVENT));
assertThat(intent.enterTransition(), is(animationResource));
assertThat(starter, is(notNullValue())); assertThat(starter.getContext(), is((Context) activity));
assertThat(intent.applicationId(), is("com.google.android.inbox"));
assertThat(intent.getAction(), is(Intent.ACTION_SEND_MULTIPLE)); assertThat(intent.getCharSequenceExtra(Intent.EXTRA_TITLE), is(nullValue())); assertThat(intent.getCharSequenceExtra(Intent.EXTRA_TEXT), is(nullValue())); assertThat(uris, is(notNullValue())); assertThat(uris.size(), is(2)); assertThat(uris.get(0), is(uriFirst)); assertThat(uris.get(1), is(uriSecond));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(Intent.ACTION_VIEW)); assertThat(intent.getData(), is(Uri.parse(PlayIntent.VIEW_URL_BASE + "com.android.inbox")));
assertThat(intent.dataType(), is(MimeType.IMAGE));
assertThat(intent.location().toString(), is("Rome"));
assertThat(intent.activityNotFoundMessage(), is((CharSequence) ""));
assertThat(intent.title().toString(), is("New event"));
assertThat(intent.flags(), is(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION));
assertThat(intent, is(notNullValue())); assertThat(intent.getAction(), is(Intent.ACTION_GET_CONTENT)); assertThat(intent.getType(), is(MimeType.VIDEO));
assertThat(intent.url(), is(""));
assertThat(intent.content(), is((CharSequence) "Sharing content."));
assertThat( intent.getData(), is(Uri.parse("geo:0,0?q=" + Uri.encode("Rome, Italy"))) );
assertThat(handlers, is(notNullValue())); assertThat(handlers.size(), is(2)); assertThat(galleryHandler.name().toString(), is("Gallery")); assertThat(galleryHandler.requestCode(), is(ImageIntent.REQUEST_CODE_GALLERY)); assertThat(cameraHandler.name().toString(), is("Camera")); assertThat(cameraHandler.requestCode(), is(ImageIntent.REQUEST_CODE_CAMERA));
assertThat(intent.dialogTitle(), is((CharSequence) "Choose provider"));
assertThat(intent.url(), is(notNullValue())); assertThat(intent.url().length(), is(0));
assertThat(intent.phoneNumber(), is("00124456"));
assertThat(intent.subject().toString(), is("Email subject"));
assertThat(intent.getAction(), is(Intent.ACTION_SEND)); assertThat(intent.getData(), is(nullValue())); assertThat(intent.getStringExtra(Intent.EXTRA_TEXT), is("Text to share."));
assertThat(intent.body().toString(), is(""));
assertThat(handlers, is(notNullValue())); assertThat(handlers.size(), is(2)); assertThat(galleryHandler.name().toString(), is("Gallery")); assertThat(galleryHandler.requestCode(), is(VideoIntent.REQUEST_CODE_GALLERY)); assertThat(cameraHandler.name().toString(), is("Camera")); assertThat(cameraHandler.requestCode(), is(VideoIntent.REQUEST_CODE_CAMERA));
assertThat(intent.action(), is(Intent.ACTION_DIAL));
assertThat(state("user-firefox-33").size(), equalTo(1));
assertThat(actual, is(equalTo(allRegions.get(1)))); assertThat(actual, is(equalTo(allRegions.get(1)))); assertThat(actual, is(equalTo(allRegions.get(0))));
assertThat(strategy.selectHost(singletonList(HOST_1)), is(equalTo(HOST_1)));
assertThat(asList(rendered), hasItem("org.apache.commons.lang3.NotImplementedException: java.lang.IllegalArgumentException: Illegal!")); assertThat(asList(rendered), hasItem("\\tat ru.qatools.selenograph.util.FullStacktraceThrowableRendererTest." + "callIllegalArgumentMethod(FullStacktraceThrowableRendererTest.java:40)"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(JsonNull.instance, RDFTerm2Json.fromNode(null)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(BitsLong.test(v, 0x10, 0, 8)) ;
assertTrue(e instanceof E_NotOneOf);
assertTrue(e instanceof ExprVar); assertEquals("?_", v.asVar().getName());
assertTrue(e instanceof E_LogicalOr);
assertEquals("<n1>", stringForRDFNode(new LiteralImpl(aNode(), null))) ;
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(FrenchAnalyzer.class, analyzer.getClass());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(Long.BYTES, b.length); assertEquals(0xF5, b[0]&0xFF); assertEquals(0x06, b[1]); assertEquals(0x07, b[2]); assertEquals(0x08, b[3]); assertEquals(0x01, b[4]); assertEquals(0x02, b[5]); assertEquals(0x03, b[6]); assertEquals(0x04, b[7]);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(-1, Iter.firstIndex(data, filter));
assertEquals(expResult, result);
assertEquals(before, after);
assertTrue(BitsLong.test(v, v, 0, 64)) ;
assertEquals(expResult.trim(), result.trim());
assertEquals(1, Iter.firstIndex(data, filter));
assertEquals(expResult, result);
assertTrue(e instanceof E_DateTimeMonth);
assertEquals(expResult, result);
assertTrue(e instanceof E_DateTimeTimezone);
assertEquals(expResult, result);
assertEquals( 2, lst.size() ); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(0)), lst.get(0)); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(1)), lst.get(1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertSame(lock1, lock2);
assertTrue(graph instanceof GraphView); assertTrue(graph.getTransactionHandler().transactionsSupported());
assertEquals(expResult, result);
assertNotNull(authService); assertEquals(1, sCxt.visibleGraphs().size()); assertEquals(SecurityContext.allNamedGraphs, x); assertEquals(1, sCxt.visibleGraphs().size()); assertEquals(SecurityContext.allGraphs, x); assertEquals(1, sCxt.visibleGraphs().size()); assertEquals(SecurityContext.allGraphs, x); assertEquals(1, sCxt.visibleGraphs().size());
assertTrue(e instanceof E_StrSubstring);
assertEquals(expResult, result);
assertEquals(2, idx); assertEquals(3, idx); assertEquals(1, idx); assertEquals(0, idx); assertEquals(-2, idx); assertEquals(-1, idx); assertEquals(-5, idx);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrLang);
assertEquals(graphNodes, index.listGraphNodes().collect(toSet()));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 2, lst.size() ); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(0)), lst.get(0)); assertEquals( new Quad( g, tLst.get(1)), lst.get(1));
assertEquals(expResult, result, 0.0);
assertNotNull(e);
assertEquals(expResult, result);
assertFalse(r.isPresent());
assertFalse(query.isDistinct()); assertFalse(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertFalse(query.isReduced());
assertTrue(e instanceof E_NumRound);
assertEquals(expResult, result, 0.00001);
assertTrue(policy.isThresholdExceeded());
assertEquals(expResult, result, 0.00001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(1, expr.size()); assertTrue(expr.contains(v));
assertTrue(e instanceof E_OneOf);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof ExprVar);
assertTrue( visitor.matching ); assertTrue(n.isBlank());
assertEquals("In W, value()", 0, counter.value()) ; assertEquals("In W, get()",1, counter.get()) ; assertEquals("Outside W",1, x) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(Node.ANY, n); assertEquals(RDF.type.asNode(), n); assertEquals(n2, n); assertEquals(NodeFactory.createURI("one"), n); assertEquals(NodeFactory.createLiteral(ll), n); assertTrue( n.isVariable()); assertEquals( "foo", n.getName()); assertTrue( n instanceof Var ); assertEquals( "text", n.getLiteralLexicalForm()); assertEquals( "en", n.getLiteralLanguage());
assertTrue(query.toString().contains("FROM NAMED <foo>"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_LogicalAnd);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(BitsInt.test(v, 0x00543200, 8, 24)) ;
assertNotEquals(hash(x1), hash(x2)); assertNotEquals(hash(x2), hash(x3)); assertNotEquals(hash(x3), hash(x1));
assertEquals("Test cache failed to maintain fixed size!", maxSize, testCache.size());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 2, lst.size() ); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(0)), lst.get(0)); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(1)), lst.get(1));
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertNotEquals(hash(x1), hash(x2)); assertNotEquals(hash(x2), hash(x3)); assertNotEquals(hash(x3), hash(x1));
assertEquals(expResult, result);
assertTrue(s.contains("FROM NAMED <foo>")); assertTrue(s.contains("FROM NAMED <bar>"));
assertEquals(expResult, result);
assertFalse(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertFalse(query.isDistinct()); assertFalse(query.isReduced());
assertEquals(before+1, after); assertNotNull(pList); assertEquals(pList.size(), 3);
assertEquals(expResult.trim(), result.trim());
assertTrue(BitsInt.test(v, true, 31)) ;
assertEquals(expResult.trim(), result.trim());
assertTrue(e instanceof E_SHA256);
assertEquals(expResult, result);
assertEquals("Casa", nv.asString()); assertEquals("Casa", nv.getString());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertTrue(e instanceof E_Bound); assertEquals("?hello", ((E_Bound) e).getArg().toString());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertNull(nv.getCollation()); assertEquals("fi", nv.getCollation());
assertEquals(control.size(), distinct.size()); assertTrue(ResultSetCompare.equalsByTest(control, distinct, NodeUtils.sameNode));
assertEquals("<<null>>", FmtUtils.stringForObject(null)) ; assertEquals("<n1>", FmtUtils.stringForObject(new LiteralImpl(aNode(), null))) ; assertEquals("<nzz1>", FmtUtils.stringForObject(new ResourceImpl(NodeFactory.createURI("nzz1"), null))) ; assertEquals("abc", FmtUtils.stringForObject("abc")) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.00001);
assertEquals(expResult, result, 0.3);
assertTrue(dg2.contains(quad1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNull(factory.asVar("*"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(StopAnalyzer.class, analyzer.getClass());
assertEquals(expResult, result);
assertTrue(e instanceof E_SameTerm);
assertEquals(2, dsg.size()); assertTrue(g1.isIsomorphicWith(dsg.getGraph(graphName1))); assertTrue(g2.isIsomorphicWith(dsg.getGraph(graphName2)));
assertTrue(x.isPresent()); assertEquals("2", x.get());
assertTrue(e instanceof E_DateTimeSeconds);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.00001);
assertTrue(e instanceof E_IsLiteral);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_NotEquals);
assertEquals(expResult, result);
assertTrue(e instanceof E_UnaryMinus);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrEndsWith);
assertEquals(expResult.trim(), result.trim());
assertEquals(expResult, result);
assertTrue(dataset.getContext().get(TextQuery.textIndex) instanceof TextIndexLucene);
assertEquals(expResult, result);
assertTrue(b);
assertEquals(expResult, result);
assertTrue(e instanceof E_Conditional);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(x.isPresent()); assertEquals("3", x.get());
assertTrue(e instanceof E_MD5);
assertEquals(expResult, result, 0.3);
assertEquals(1, dsg.size()); assertTrue(g1.isIsomorphicWith(dsg.getGraph(graphName1))); assertTrue(g1.isIsomorphicWith(dsg.getDefaultGraph())); assertTrue(dsg.getGraph(graphName2).isEmpty());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Lang);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(3, Iter.lastIndex(data, filter));
assertEquals(expResult, result);
assertTrue( q2.contains("ORDER BY")); assertFalse( q1.contains("ORDER BY"));
assertEquals(expResult, result);
assertArrayEquals(y, x);
assertEquals(expResult, result, 0.3);
assertTrue(nv.isSortKey());
assertEquals(expResult, result);
assertEquals(0, x.size()) ;
assertEquals(before+1, after); assertNotNull(pList); assertEquals(pList.size(), 0);
assertEquals("In W, value()", 0, counter.value()) ; assertEquals("In W, get()",1, counter.get()) ; assertEquals("Outside W",1, x) ;
assertEquals(Integer.BYTES, b.length); assertEquals(0xF1, b[0]&0xFF); assertEquals(0x02, b[1]); assertEquals(0x03, b[2]); assertEquals(0x04, b[3]);
assertTrue(BitsLong.test(v, false, 63)) ;
assertTrue(e instanceof NodeValueString); assertEquals("foo", n.asString());
assertEquals(0, engine.activeInterpreters.size()); assertEquals(0, engine.tabledGoals.size()); assertEquals(1, engine.tabledGoals.size()); assertEquals(0, engine.activeInterpreters.size()); assertEquals(1, engine.tabledGoals.size()); assertEquals(0, engine.activeInterpreters.size()); assertEquals(0, generator.consumingCPs.size());
assertEquals(expResult, result);
assertEquals(0, engine.activeInterpreters.size()); assertEquals(0, engine.tabledGoals.size()); assertEquals(1, engine.tabledGoals.size()); assertEquals(0, engine.activeInterpreters.size()); assertEquals(1, engine.tabledGoals.size()); assertEquals(0, engine.activeInterpreters.size());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("1984-03-22T14:32:01+00:00", DateTimeUtils.calendarToXSDDateTimeString(cal)); assertEquals("1984-03-22T07:32:01-07:00", DateTimeUtils.calendarToXSDDateTimeString(cal));
assertEquals("zz:abs", stringForRDFNode(rdfNod, getContext())) ;
assertEquals("a", oneElt(x));
assertEquals("zz:s zz:p zz:o .\\nzz:s zz:p 123 .", b.toString()) ;
assertEquals(expResult, result);
assertTrue(e instanceof E_StrUUID);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertTrue("Not EBV true: " + v, XSDFuncOp.booleanEffectiveValue(v));
assertEquals(query, query2);
assertEquals(expResult, result, 0.3);
assertTrue(e instanceof E_Version);
assertEquals(expResult, result);
assertEquals("ANY", FmtUtils.stringForNode(Node.ANY)) ;
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 1, lst.size() ); assertEquals( quad, lst.get(0));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(0x01, b[0]); assertEquals(0x02, b[1]); assertEquals(0x03, b[2]); assertEquals(0x04, b[3]);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.000001);
assertTrue(b);
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertTrue(e instanceof E_IsNumeric);
assertEquals(expResult, result);
assertTrue(b); assertEquals(ReadWrite.WRITE, counter.transactionMode());
assertEquals(expResult, result);
assertFalse( n instanceof Var ); assertTrue( n instanceof Var );
assertEquals("<q1> zz:abs <n2> \\"l3\\"", stringForQuad(quad, getPrefixMapping())) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof ExprVar); assertEquals("foo", v.asVar().getName());
assertEquals("page/deeper.txt", relativeIri.getRawPath());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("\\\\\\\\\\\\r\\\\n", FmtUtils.stringEsc("\\\\\\r\\n")) ;
assertTrue(BitsInt.test(v, false, 0)) ;
assertTrue(e instanceof E_StrLength);
assertEquals(expResult, result);
assertTrue(e instanceof E_Now);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(null, iter.peek(0)) ;
assertFalse(journal.entries().hasNext()) ;
assertEquals(expResult, result, 1);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(-1, idx) ; assertEquals(-2, idx) ; assertEquals(-3, idx) ; assertEquals(-4, idx) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Function);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(b); assertEquals(ReadWrite.WRITE, tx.transactionMode());
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0001);
assertTrue(e instanceof E_LangMatches);
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_LessThan);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("\\"a\\\\rbt\\"", FmtUtils.stringForString("a\\rbt")) ;
assertEquals(expResult, result);
assertTrue( handler.isEmpty());
assertEquals(expResult, result, 0.0001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.001);
assertEquals(expResult, result);
assertEquals(0, v1) ; assertEquals(0, counter.get()) ;
assertEquals(expResult, result);
assertEquals(Arrays.asList("A", "B", "C"), x);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("Not NodeValue.equals()", nv1, nv2);
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.00001);
assertEquals(expResult, result);
assertEquals("1984-03-22T14:32:01.050+00:00", DateTimeUtils.calendarToXSDDateTimeString(cal)); assertEquals("1984-03-22T07:32:01.050-07:00", DateTimeUtils.calendarToXSDDateTimeString(cal));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("In txn, value()", 91, counter.value()) ; assertEquals("In txn, read()", 91, counter.read()) ; assertEquals("In txn, value()", 91, counter.value()) ; assertEquals("In txn, get()", 92, counter.read()) ; assertEquals("In txn, value()", 91, counter.value()) ; assertEquals("In txn, read()", 93, counter.read()) ; assertEquals(94,counter.value()) ;
assertFalse(b);
assertTrue(e instanceof E_GreaterThan);
assertEquals(expResult, result);
assertEquals(2, idx) ; assertEquals(3, idx) ; assertEquals(1, idx) ; assertEquals(0, idx) ; assertEquals(-2, idx) ; assertEquals(-1, idx) ; assertEquals(-5, idx) ;
assertEquals(expResult, result, 0.001);
assertEquals(expResult, result);
assertTrue(query.toString().contains("FROM <foo>")); assertTrue(query.toString().contains("FROM <bar>"));
assertEquals(expResult, result);
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result, 0.3);
assertTrue( visitor.matching );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(3,x0); assertEquals(2,x1);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.3);
assertTrue(e instanceof E_DateTimeTZ);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(b); assertEquals(ReadWrite.READ, counter.transactionMode());
assertEquals(expResult, result);
assertTrue(e instanceof E_StrAfter);
assertTrue(e instanceof E_Equals);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(query.toString().contains("FROM <foo>"));
assertEquals(name, expected, TxnOp.isTxnTypeCompatible(innerTxnType, outerTxnType));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNotEquals(hash(x1), hash(x2)) ; assertNotEquals(hash(x2), hash(x3)) ; assertNotEquals(hash(x3), hash(x1)) ;
assertEquals(expResult, result);
assertEquals(Optional.of("A23"), r);
assertTrue(BitsInt.test(v, 0x10, 0, 8)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(dsgText.getMonitor() instanceof CustomTextDocProducer) ;
assertEquals(2, idx) ; assertEquals(-3, idx) ; assertEquals(-2, idx) ; assertEquals(-5, idx) ;
assertEquals(expResult, result);
assertEquals(expResult, result, 0.001);
assertEquals(expResult, result);
assertFalse(sameElts(x1, x2)) ;
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0001);
assertTrue(BitsLong.isSet(v, 4)) ; assertFalse(BitsLong.isSet(v, 3)) ; assertFalse(BitsLong.isSet(v, 5)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue( visitor.matching );
assertTrue( q2.contains("ORDER BY")); assertFalse( q1.contains("ORDER BY"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("2.1e2", FmtUtils.stringForLiteral(nl, getContext())) ;
assertEquals(expResult, result);
assertEquals(expResult, result, 0.00001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNotNull(template); assertEquals(1, lst.size()); assertEquals(t, lst.get(0));
assertEquals(geo, expResult);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("A", Iter.first(data, filter));
assertEquals(expResult, result);
assertTrue(r.isPresent()); assertEquals("A", r.get());
assertEquals(expResult, result);
assertTrue(e instanceof E_Str);
assertTrue(b);
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result, 0.0001);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(e instanceof E_SHA224);
assertEquals("xyz", x.getRight());
assertTrue(e instanceof ExprVar); assertEquals("hello", v.asVar().getName());
assertEquals(expResult, result);
assertEquals("In W, value()", 8, counter.value()); assertEquals("In W, get()", 9, counter.get()); assertEquals("After W/abort, get()", 8, counter.get());
assertEquals(expResult, result);
assertFalse(iter.hasNext()) ;
assertEquals(null, Iter.first(data, filter));
assertEquals(expResult, result);
assertNotEquals(hash(x1), hash(x2)) ; assertNotEquals(hash(x2), hash(x3)) ; assertNotEquals(hash(x3), hash(x1)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult.toWKT(), result.toWKT());
assertEquals(FrenchAnalyzer.class, analyzer.getClass());
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(0, idx) ; assertEquals(1, idx) ; assertEquals(2, idx) ;
assertSame(n1, n2);
assertEquals(expResult, result);
assertTrue(dsgText.getMonitor() instanceof CustomDyadicTextDocProducer) ;
assertEquals( 2, lst.size() ); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(0)), lst.get(0)); assertEquals( new Quad( Quad.defaultGraphNodeGenerated, tLst.get(1)), lst.get(1));
assertTrue(e instanceof E_SHA384);
assertEquals( 2, lst.size() ); assertTrue( "missing "+q, lst.contains( q )); assertTrue( "missing "+q, lst.contains( q ));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(-1, idx) ; assertEquals(0, idx) ; assertEquals(-2, idx) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(r.isPresent()); assertEquals("A", r.get());
assertFalse(x.isPresent());
assertEquals(expResult, result, 0.1);
assertEquals(expResult, result);
assertEquals("Wrong number of conditions", 1, sc.size()); assertEquals("Wrong value", sc.get(0).expression.asVar(), Var.alloc("orderBy")); assertEquals("Wrong number of conditions", 2, sc.size()); assertEquals("Wrong value", sc.get(0).expression.asVar(), Var.alloc("orderBy")); assertEquals("Wrong value", sc.get(1).expression.asVar(), Var.alloc("orderBy2"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_DateTimeYear);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(0, engine.activeInterpreters.size()); assertEquals(0, engine.tabledGoals.size()); assertFalse(it.hasNext()); assertTrue(engine.tabledGoals.size() <= MAX); assertEquals(0, engine.activeInterpreters.size());
assertFalse("Expect false before any creation attempted", b) ;
assertEquals("hello", b.asString()) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertNull(x2);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrUpperCase);
assertTrue(e instanceof E_SHA512);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expected, SetUtils.symmetricDifference(x1, x2)) ;
assertEquals(expResult, result);
assertEquals("<n1> <n2> \\"l3\\" .\\n" + "<nb1> <nb2> \\"lb3\\" .", new String(os.toByteArray())) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 2, lst.size() ); assertEquals( new Quad( g, tLst.get(0)), lst.get(0)); assertEquals( new Quad( g, tLst.get(1)), lst.get(1));
assertEquals(expected, SetUtils.symmetricDifference(x1, x2)) ; assertEquals(expected, SetUtils.symmetricDifference(x2, x1)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0001);
assertTrue(e instanceof ExprVar); assertEquals("hello", v.asVar().getName());
assertFalse(sameElts(x1, z1)) ;
assertEquals(expResult, result);
assertFalse(r.isPresent());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expected, SetUtils.symmetricDifference(x1, x2)) ;
assertTrue(e instanceof NodeValueInteger); assertEquals( 3, i.asNode().getLiteralValue());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(0, GraphUtil.compareSizeTo(graph0, 0)); assertEquals(-1, GraphUtil.compareSizeTo(graph0, 1));
assertTrue(e instanceof E_IsBlank);
assertEquals("zz:local:name", result);
assertEquals(null, iter.peek(0)) ;
assertTrue(s.contains("FROM <foo>")); assertTrue(s.contains("FROM NAMED <bar>"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult.trim(), result.trim());
assertEquals( "5", n.getLiteralLexicalForm() ); assertEquals( Integer.valueOf(5), n.getLiteralValue()); assertEquals( "\\"5\\"^^http: n = Converters.makeLiteral( "Hello" ); assertEquals( "Hello", n.getLiteralLexicalForm() ); assertEquals( "Hello", n.getLiteralValue()); assertEquals( "\\"Hello\\"", n.toString( null, true )); URL url = new URL( "http: n = Converters.makeLiteral( url);
assertTrue( visitor.matching );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(null, Iter.last(data, filter));
assertTrue(BitsLong.test(v, 0x0, 0, 4)) ;
assertTrue(e instanceof E_StrBefore);
assertTrue(e instanceof E_NotExists);
assertEquals(geo, expResult);
assertTrue(e instanceof E_IsIRI);
assertEquals(1, graph.size()); assertNotEquals(0, f.counter);
assertEquals(expResult, result, 0.0);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(e instanceof E_SHA1);
assertTrue(e instanceof E_NumAbs);
assertEquals(-1, Iter.lastIndex(data, filter));
assertTrue( map.isEmpty());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(1, GraphUtil.compareSizeTo(graph1, 0)); assertEquals(0, GraphUtil.compareSizeTo(graph1, 1)); assertEquals(-1, GraphUtil.compareSizeTo(graph1, 2));
assertEquals(expResult, result, 0.0001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 1);
assertEquals(expResult, result);
assertTrue(BitsLong.test(v, 0x0000BA9876540000L, 16, 48)) ;
assertFalse(x.isPresent());
assertEquals( "\'one\'", Converters.quoted( "one" ));
assertTrue(e instanceof E_BNode);
assertFalse(sameElts(x1, x2)) ;
assertEquals(0x01, b[0]); assertEquals(0x02, b[1]); assertEquals(0x03, b[2]); assertEquals(0x04, b[3]); assertEquals(0x05, b[4]); assertEquals(0x06, b[5]); assertEquals(0x07, b[6]); assertEquals(0x08, b[7]);
assertEquals(expResult, result);
assertEquals(expResult, result, 0);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(b);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(BitsInt.test(v, v, 0, 32)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(0x01, b[0]); assertEquals(0x02, b[1]); assertEquals(0x03, b[2]); assertEquals(0x04, b[3]); assertEquals(0x05, b[4]); assertEquals(0x06, b[5]); assertEquals(0x07, b[6]); assertEquals(0x08, b[7]);
assertEquals("1984-03-22+00:00", DateTimeUtils.calendarToXSDDateString(cal)); assertEquals("1984-03-22-07:00", DateTimeUtils.calendarToXSDDateString(cal));
assertEquals(expResult, result);
assertTrue( visitor.matching );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Coalesce);
assertEquals(expResult, result, 1);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_LessThanOrEqual);
assertEquals(expResult, result);
assertEquals(-1, in.read()) ;
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertEquals("In R, value()", 0, counter.value()) ; assertEquals("In R, get()", 0, counter.get()) ; assertEquals("Outside R", 0, x) ;
assertTrue(q2.contains("ORDER BY")); assertFalse(q1.contains("ORDER BY"));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(query.isDistinct()); assertFalse(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertFalse(query.isReduced());
assertEquals(expResult, result);
assertTrue(x.isPresent()); assertEquals("3", x.get());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Divide);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrReplace);
assertEquals(49, count); assertEquals(0, count);
assertTrue(BitsInt.test(v, true, 0)) ;
assertTrue( e instanceof NodeValueString); assertEquals("*", n.asString());
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertFalse("Not EBV false: " + v, XSDFuncOp.booleanEffectiveValue(v));
assertEquals( 2, lst.size() ); assertTrue( lst.contains( v )); assertTrue( lst.contains( x ));
assertEquals("In W, value()", 0, counter.value()) ; assertEquals("In W, get()",1, counter.get()) ; assertEquals("Outside W", 0, counter.value()) ;
assertTrue( visitor.matching );
assertNull( query.getValuesVariables()); assertNull( query.getValuesData() );
assertTrue(dataset.getContext().get(SpatialQuery.spatialIndex) instanceof SpatialIndexLucene);
assertTrue(dg2.contains(quad1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(geo, expResult);
assertEquals("zz:s zz:p zz:o .", b.toString()) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(sameElts(x1, z1)) ;
assertTrue(e instanceof ExprVar); assertEquals("foo", v.asVar().getName());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNotNull( factory.asExpr("hello") );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(dg2.contains(quad1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse(b); assertEquals(ReadWrite.READ, tx.transactionMode());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof ExprNone);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("14:32:01.500+01:00", DateTimeUtils.calendarToXSDTimeString(cal)); assertEquals("06:32:01.500-07:00", DateTimeUtils.calendarToXSDTimeString(cal));
assertEquals(49, count); assertEquals(0, count);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertSame(dg1, dg2); assertTrue(dg2.contains(quad1));
assertEquals(expResult, result);
assertEquals(expResult.trim(), result.trim());
assertEquals( 2, lst.size() ); assertEquals( new Quad( g, tLst.get(0)), lst.get(0)); assertEquals( new Quad( g, tLst.get(1)), lst.get(1));
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertTrue(b);
assertTrue(e instanceof E_StrDatatype);
assertEquals(expResult, result);
assertEquals(expResult.trim(), result.trim());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("In W, value()", 0, counter.value()) ; assertEquals("In W, get()",1, counter.get()) ; assertEquals("Outside W",1, x) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertArrayEquals(expected, params.getTripleIndexes()) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( "one", n.getLiteralLexicalForm() ); assertEquals( "\\"one\\"^^some:stuff", n.toString(null, true));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrContains);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNotNull(template); assertEquals(1, lst.size()); assertEquals(t, lst.get(0)); assertNotNull(template); assertEquals(1, lst.size()); assertEquals(t, lst.get(0));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(BitsLong.test(v, true, 63)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("false", FmtUtils.stringForLiteral(nl, getContext())) ;
assertEquals(1, idx) ; assertEquals(3, idx) ;
assertEquals(expResult, result, 0.000001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.3);
assertNotNull(authService); assertEquals(4, sReg.keys().size()); assertEquals(3, sReg.get("user1").visibleGraphs().size());
assertTrue( visitor.matching );
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("In W, value()", 1, counter.value()) ; assertEquals("In W, get()",2, counter.get()) ;
assertTrue(e instanceof E_DateTimeHours);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("C", Iter.last(data, filter));
assertEquals(expResult, result);
assertEquals("In W, value()", 0, counter.value()) ; assertEquals("In W, get()",1, counter.get()) ; assertEquals("Outside W",1, counter.value()) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.001);
assertEquals(geo, expResult);
assertEquals(expResult, result);
assertFalse("Expect false before any creation attempted", b) ;
assertEquals(expResult, result);
assertEquals(expResult, result, 0.3);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertArrayEquals(expected, x) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(e instanceof E_UnaryPlus);
assertFalse(graph.contains(triple));
assertEquals(expResult, result);
assertTrue(BitsInt.isSet(v, 4)) ; assertFalse(BitsInt.isSet(v, 3)) ; assertFalse(BitsInt.isSet(v, 5)) ;
assertNotEquals(hash(x1), hash(x2));
assertTrue(e instanceof E_NumCeiling);
assertTrue(x.isPresent()); assertEquals("1", x.get());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Exists);
assertEquals(expResult, result);
assertFalse(dg2.contains(quad1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_NumFloor);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertNotEquals(hash(x1), hash(x2)) ;
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(e instanceof E_StrConcat);
assertNotNull(template); assertEquals(1, lst.size()); assertEquals(t, lst.get(0));
assertSame(basedsg, dsg);
assertTrue(e instanceof E_Datatype);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult.trim(), result.trim());
assertEquals(expResult, result);
assertEquals(expResult, result, 0.001);
assertEquals(expResult, result, 0.000001);
assertTrue(e instanceof E_IRI);
assertFalse(BitsInt.test(v, 0, 0, 32)) ;
assertEquals(expResult, result);
assertEquals("?tt", FmtUtils.stringForNode(NodeFactory.createVariable("tt"))) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(1, nv.compareTo(new NodeValueSortKey("Bonita", languageTag))); assertEquals(-1, nv.compareTo(new NodeValueSortKey("Bonitos", languageTag))); assertEquals(1, nv.compareTo(new NodeValueSortKey("Bonita", "es"))); assertEquals(0, nv.compareTo(new NodeValueSortKey("Bonito", "es")));
assertEquals(ShingleAnalyzerWrapper.class, analyzer.getClass());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(BitsLong.test(v, true, 0)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.00001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(-4, idx) ; assertEquals(-4, idx) ; assertEquals(-4, idx) ;
assertEquals(expResult, result);
assertEquals(SimpleAnalyzer.class, analyzer.getClass());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(dsg.contains(quad1)); assertEquals(2, dsg.getDefaultGraph().size()); assertTrue(dsg2.getDefaultGraph().isIsomorphicWith(dsg.getDefaultGraph())); assertNotEquals(file1, file2);
assertEquals(expResult, result);
assertTrue(e instanceof ExprNone);
assertEquals(expResult, result);
assertTrue(e instanceof E_LogicalNot);
assertTrue(BitsInt.test(v, false, 31)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertTrue(x.isPresent()); assertEquals("1", x.get());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_UUID);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.001);
assertEquals(expResult, result);
assertTrue(BitsLong.test(v, false, 0)) ;
assertEquals("uri", indexLucene.getDocDef().getEntityField()); assertEquals("geo", indexLucene.getDocDef().getGeoField());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNull(oneElt(x));
assertEquals(expResult, result, 0.0001);
assertEquals("2.4", FmtUtils.stringForLiteral(nl, getContext())) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_DateTimeDay);
assertEquals(expResult, result);
assertEquals(Integer.valueOf(1), x.fetchSlot(0, array)) ; assertEquals(Integer.valueOf(2), x.fetchSlot(1, array)) ; assertEquals(Integer.valueOf(0), x.fetchSlot(2, array)) ;
assertEquals(10.0, result, 0);
assertEquals("14:32:01+01:00", DateTimeUtils.calendarToXSDTimeString(cal)); assertEquals("06:32:01-07:00", DateTimeUtils.calendarToXSDTimeString(cal));
assertTrue( result.contains(NodeFactory.createLiteral(ll)));
assertTrue(e instanceof E_GreaterThanOrEqual);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(x.isPresent()); assertEquals("2", x.get());
assertEquals(ShingleAnalyzerWrapper.class, analyzer.getClass());
assertEquals(expResult, result);
assertFalse(policy.isThresholdExceeded());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(sameElts(x1, x2)) ;
assertEquals(expResult, result);
assertEquals("\'Tutte\'", nv.toString());
assertEquals(expResult, result, 1);
assertFalse(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertTrue(query.isDistinct()); assertFalse(query.isReduced()); assertFalse(query.isDistinct()); assertTrue(query.isReduced()); assertFalse(query.isDistinct()); assertFalse(query.isReduced());
assertEquals(geo, expResult);
assertTrue(n.isLiteral()); assertEquals("Casa", n.getLiteral().toString());
assertArrayEquals(y, x);
assertTrue(obj.entrySet().isEmpty());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 1);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Random);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(-1, idx) ;
assertEquals(expResult, result);
assertTrue(e instanceof E_Multiply);
assertEquals(geo, expResult);
assertEquals(expResult.trim(), result.trim());
assertEquals(expResult, result);
assertEquals(Optional.of("A"), r);
assertTrue(output.contains("\\"_:first\\"")); assertTrue(output.contains("\\"_:second\\"")); assertTrue(output.contains("\\"_:third\\"")); assertTrue(output.contains("\\"_:fourth\\"")); assertFalse(output.contains("\\"true\\"")); assertTrue(output.contains("true")); assertTrue(output.contains("123")); assertFalse(output.contains("\\"123\\"")); assertTrue(output.contains("\\"abc\\""));
assertEquals(1, GraphUtil.compareSizeTo(graph2, 0)); assertEquals(1, GraphUtil.compareSizeTo(graph2, 1)); assertEquals(0, GraphUtil.compareSizeTo(graph2, 2)); assertEquals(-1, GraphUtil.compareSizeTo(graph2, 3)); assertEquals(-1, GraphUtil.compareSizeTo(graph2, 4));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertArrayEquals(expected, params.getTripleIndexes()) ;
assertEquals(control.size(), distinct.size()); assertTrue(ResultSetCompare.equalsByTest(control, distinct, NodeUtils.sameNode));
assertEquals(expResult, result);
assertEquals(Integer.valueOf(2), x.mapSlot(0, array) ) ; assertEquals(Integer.valueOf(0), x.mapSlot(1, array) ) ; assertEquals(Integer.valueOf(1), x.mapSlot(2, array) ) ;
assertFalse(b);
assertEquals("\\"abc\\"@no", FmtUtils.stringForLiteral(nl, getContext())) ;
assertEquals(Var.ANON, v); assertEquals(Var.alloc("a"), v); assertEquals(Var.alloc("a"), v); assertEquals(Var.alloc("foo"), v); assertEquals(Var.alloc("foo"), v); assertNull(v); assertEquals(Var.alloc("bar"), v); assertEquals(Var.alloc("foo"), v); assertEquals(Var.ANON, v);
assertEquals(expResult, result);
assertEquals(Node.ANY, n); assertEquals(RDF.type.asNode(), n); assertEquals(n2, n); assertEquals(NodeFactory.createURI("one"), n); assertTrue( n.isLiteral() ); assertEquals( NodeFactory.createLiteral(ll), n ); assertTrue( n.isVariable()); assertEquals( "foo", n.getName()); assertTrue( n instanceof Var ); assertTrue( n.isLiteral() ); assertEquals( "text", n.getLiteralLexicalForm()); assertEquals( "en", n.getLiteralLanguage());
assertTrue(sameElts(x1, x2)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("<q1> <n1> <n2> \\"l3\\"", stringForQuad(quad)) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(1, graph.size()); assertTrue(s.contains("_:Bb"));
assertEquals("In txn, value()", 91, counter.value()) ; assertEquals("In txn, read()", 91, counter.read()) ; assertEquals("In txn, value()", 91, counter.value()) ; assertEquals("In txn, get()", 92, counter.read()) ; assertEquals(92,counter.value()) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertArrayEquals(expected, x) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("zz:abs <n2> \\"l3\\"", stringForTriple(getPrefixedTriple(), getPrefixMapping())) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals("<n1> <n2> \\"l3\\"", stringForTriple(getTriple())) ;
assertEquals(expResult, result);
assertTrue(b);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(BitsInt.test(v, 0x0, 0, 4)) ;
assertEquals(expResult, result, 0.3);
assertTrue(e instanceof E_Call);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertTrue(e instanceof E_Add);
assertEquals(10.0, result, 0);
assertTrue(b);
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(b); assertEquals(ReadWrite.WRITE, counter.transactionMode());
assertArrayEquals(bytes, x);
assertFalse(BitsLong.test(v, 0, 0, 64)) ;
assertEquals( 2, lst.size() ); assertEquals( new Quad( g, tLst.get(0)), lst.get(0)); assertEquals( new Quad( g, tLst.get(1)), lst.get(1));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 1, lst.size() ); assertEquals( quad, lst.get(0));
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result, 0.000001);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals( 2, lst.size() ); assertTrue( "missing "+q, lst.contains( q )); assertTrue( "missing "+q, lst.contains( q ));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_StrLowerCase);
assertEquals(expected, mapped) ;
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue(e instanceof E_Subtract);
assertEquals(expResult, result);
assertFalse("Multiple writers were allowed!", secondWriterHasLock.get());
assertEquals( nv, result ); assertEquals( nv.getClass(), result.getClass() );
assertEquals("app-name", fluoConfiguration.getApplicationName()); assertEquals(999, fluoConfiguration.getZookeeperTimeout());
assertEquals(newAppName, fluoConfiguration.getApplicationName()); assertEquals(newZookeeperTimeout, fluoConfiguration.getZookeeperTimeout());
assertFalse(mockFluoCommand.isExecuted());
assertTrue(mockFluoCommand.isExecuted());
assertEquals(arg1, fce.getArg(0)); assertEquals(arg2, fce.getArg(1)); assertEquals(arg3, fce.getArg(2)); assertEquals(arg4, fce.getArg(3));
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(new CheckPredicateVisitor() { @Override public void visitVariablesDeclaration(VariablesDeclaration variablesDeclaration) { super.visitVariablesDeclaration(variablesDeclaration); if (variablesDeclaration.getBaseType().hasQualifier(TypeQualifier.SHARED)) { predicateHolds(); } } }.test(tu));
assertTrue(newInit == forStmt.getInit()); assertTrue(newCondition == forStmt.getCondition()); assertTrue(newIncrement == forStmt.getIncrement()); assertTrue(newBody == forStmt.getBody());
assertEquals(1, pe.getNumChildren());
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expectedProg)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(UnOp.BNEG, expr.getOp());
assertEquals(6, ops.size()); assertFalse(ops.get(5).preconditionHolds());
assertEquals(2, ops.size());
assertEquals(1, ops.size());
assertEquals(arg1, fce.getArgs().get(0)); assertEquals(arg2, fce.getArgs().get(1)); assertEquals(arg3, fce.getArgs().get(2)); assertEquals(arg4, fce.getArgs().get(3));
assertFalse(arrayConstructor == theClone); assertEquals(theClone.getText(), arrayConstructor.getText());
assertEquals("A", expr.getChild(0).getText()); assertEquals("0", expr.getChild(1).getText());
assertEquals(5, ops.size());
assertEquals(7, injectionPointList.size());
assertEquals(0, t.getFieldIndex("x")); assertEquals(1, t.getFieldIndex("y"));
assertEquals(3, ops.size());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(vie, be.getLhs());
assertEquals(BinOp.ADD_ASSIGN, new BinaryExpr(new VariableIdentifierExpr("x"), new UIntConstantExpr("3u"), BinOp.ADD_ASSIGN).getOp());
assertEquals(1, ops.size()); assertTrue(ops.get(0) instanceof StmtReductionOpportunity); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(reducedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(0, ops.size());
assertEquals("foo", memberLookupExpr.getMember()); assertTrue(memberLookupExpr.getStructure() instanceof VariableIdentifierExpr); assertEquals("v", ((VariableIdentifierExpr) memberLookupExpr.getStructure()).getName());
assertTrue( new CheckPredicateVisitor() { @Override public void visitInitializer(Initializer initializer) { super.visitInitializer(initializer); if (initializer.getExpr() instanceof UIntConstantExpr && ((UIntConstantExpr) initializer.getExpr()).getValue().equals("0xA03Bu")) { predicateHolds(); } } }.test(tu));
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(ops.isEmpty());
assertEquals(2, shaderJob.getPipelineInfo().getNumUniforms()); assertEquals(0, ops.size());
assertEquals(3, tu.getTopLevelDeclarations().size());
assertTrue(t.hasCanonicalConstant(new Scope())); assertEquals("astruct(mat4(1.0), vec4(1.0))", t.getCanonicalConstant(new Scope()).getText());
assertFalse(SideEffectChecker.isSideEffectFree(new ExprStmt( new BinaryExpr( new VariableIdentifierExpr("v"), new IntConstantExpr("12"), BinOp.ASSIGN )), ShadingLanguageVersion.ESSL_310, ShaderKind.FRAGMENT));
assertTrue(expr instanceof TypeConstructorExpr); assertEquals("B", outer.getTypename()); assertTrue(outer.getArg(0) instanceof TypeConstructorExpr); assertTrue(outer.getArg(1) instanceof TypeConstructorExpr); assertEquals("A", inner0.getTypename()); assertEquals("A", inner1.getTypename());
assertEquals(";\\n", new NullStmt().getText()); assertNotSame(nullStmt, nullStmt.clone());
assertEquals(3, ops.size());
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(tu), PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)));
assertEquals(4, args.size()); assertEquals(4, e.getArgs().size()); assertEquals(4, args.size()); assertEquals(3, e.getArgs().size()); assertEquals(args.get(0), e.getArg(0)); assertEquals(args.get(2), e.getArg(1)); assertEquals(args.get(3), e.getArg(2));
assertEquals(expr, tce.getArg(0));
assertEquals("~ x", expr.getText());
assertEquals(1, ops.size());
assertEquals(1, shaderJob.getPipelineInfo().getNumUniforms()); assertEquals(0, ops.size());
assertEquals(2, ops.size());
assertFalse(be == be2); assertFalse(be.getLhs() == be2.getLhs()); assertEquals(((VariableIdentifierExpr) be.getLhs()).getName(), ((VariableIdentifierExpr) be2.getLhs()).getName()); assertEquals(((VariableIdentifierExpr) be.getRhs()).getName(), ((VariableIdentifierExpr) be2.getRhs()).getName());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(1, ops.size());
assertTrue( new CheckPredicateVisitor() { @Override public void visitInitializer(Initializer initializer) { super.visitInitializer(initializer); if (initializer.getExpr() instanceof UIntConstantExpr && ((UIntConstantExpr) initializer.getExpr()).getValue().equals("031u")) { predicateHolds(); } } }.test(tu));
assertEquals(2, ops.size()); assertFalse(ops.get(1).preconditionHolds()); assertTrue(ops.isEmpty());
assertEquals(1, opportunities.size()); assertEquals(0, opportunities.size());
assertEquals(0, ops.size());
assertEquals(3, ops.size());
assertEquals(v, mle.getChild(0)); assertEquals(mle.getStructure(), mle.getChild(0));
assertEquals(3, arrayConstructor.getArgs().size()); assertEquals("vec4(0.0)", arg.getText());
assertEquals(1, ops.size());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(expr.getChild(0) instanceof VariableIdentifierExpr); assertEquals("x", expr.getChild(0).getText());
assertEquals(1, ops.size()); assertTrue(ops.get(0) instanceof StmtReductionOpportunity); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(reducedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(pipelineInfo.getArgs("GLF_uniform_int_values").contains(one.toString())); assertTrue(pipelineInfo.clone().getArgs("GLF_uniform_int_values").contains(one.toString()));
assertEquals(1, opportunities.size());
assertEquals(2, ops.size());
assertTrue(exception.getMessage().contains("Initializer lists are not currently supported"));
assertEquals(y, pe.getChild(0));
assertEquals(ShaderKind.VERTEX, vertTu.getShaderKind()); assertEquals(ShaderKind.VERTEX, vertTu.clone().getShaderKind());
assertTrue(pipelineInfo.hasUniform("a")); assertEquals(args, Collections.singletonList("1.0")); assertEquals(pipelineInfo.toString(), pipelineBefore); assertEquals(index, 1); assertEquals(args2, Arrays.asList("1.0", "2.0")); assertEquals(pipelineInfo.toString(), pipelineAfter);
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals( PrettyPrinterVisitor.prettyPrintAsString(tuAfter), PrettyPrinterVisitor.prettyPrintAsString(tuBefore) );
assertEquals(1, ops.size());
assertTrue(fileOps.getUnderlyingShaderFile(outputShaderJob, ShaderKind.COMPUTE) .isFile()); assertTrue(fileOps.areShadersValid(outputShaderJob, false));
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(fileOps.areShadersValid(output, false, true)); assertTrue(pipelineInfo.hasUniform("f")); assertEquals(1, pipelineInfo.getBinding("f"));
assertEquals(3, tu.getTopLevelDeclarations().size());
assertTrue(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertEquals(0, ops.size());
assertEquals(1, ops.size()); assertTrue(InlineInitializerReductionOpportunities .findOpportunities(MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())).isEmpty());
assertFalse(expr == theClone); assertEquals(theClone.getText(), expr.getText());
assertEquals(0, opportunities.size());
assertEquals(0, ops.size()); assertEquals(3, ops.size());
assertTrue(ops.isEmpty());
assertEquals(5, new StandardVisitor() { private int numParens; @Override public void visitParenExpr(ParenExpr parenExpr) { super.visitParenExpr(parenExpr); numParens++; } int getNumParens(ParenExpr expr) { numParens = 0; visit(expr); return numParens; } }.getNumParens(nested) );
assertTrue(expr.getCallee().equals("frexp")); assertFalse(SideEffectChecker.isSideEffectFree(expr, ShadingLanguageVersion.ESSL_310, ShaderKind.FRAGMENT));
assertTrue(expr.getCallee().equals("modf")); assertFalse(SideEffectChecker.isSideEffectFree(expr, ShadingLanguageVersion.ESSL_310, ShaderKind.FRAGMENT));
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(expr.getCallee().equals("uaddCarry")); assertFalse(SideEffectChecker.isSideEffectFree(expr, ShadingLanguageVersion.ESSL_310, ShaderKind.FRAGMENT));
assertTrue(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertEquals(1, opportunities.size());
assertEquals(w, mle.getStructure());
assertTrue(exception.getMessage().contains("We do not yet support the case where the " + "condition of a \'for\' or \'while\' introduces a new variable"));
assertEquals("~ x", expr.getText()); assertEquals("~ y", expr.getText());
assertEquals(1, b.getNumStmts()); assertEquals(2, b.getNumStmts()); assertTrue(b.getStmt(0) instanceof NullStmt); assertEquals(stmt, b.getStmt(1));
assertTrue( new CheckPredicateVisitor() { @Override public void visitInitializer(Initializer initializer) { super.visitInitializer(initializer); if (initializer.getExpr() instanceof IntConstantExpr && ((IntConstantExpr) initializer.getExpr()).getValue().equals("0xa03b")) { predicateHolds(); } } }.test(tu));
assertEquals("0", expr.getIndex().getText());
assertTrue(exception.getMessage().contains("Array information specified at the base type"));
assertTrue(BasicType.allNumericTypes().contains(BasicType.IVEC2)); assertFalse(BasicType.allNumericTypes().contains(BasicType.BOOL)); assertFalse(BasicType.allNumericTypes().contains(BasicType.BVEC2)); assertFalse(BasicType.allNumericTypes().contains(BasicType.BVEC3)); assertFalse(BasicType.allNumericTypes().contains(BasicType.BVEC4));
assertEquals(3, new TypeConstructorExpr("foo", exprsList()).getNumArgs());
assertEquals(2, RemoveStructFieldReductionOpportunities .findOpportunities(MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())).size());
assertEquals(2, expr.getNumChildren());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(1, ops.size());
assertEquals(vie, pe.getExpr());
assertEquals(2, ops.size());
assertEquals(1, countForLoops(tu)); assertEquals(1, countForLoops(tu));
assertEquals(shaderPrettyPrinted, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(shaderWithBindings), uniformValues));
assertEquals(1, ops.size()); assertTrue(fileOps.areShadersValid(shaderJobFile, false));
assertEquals("foo", e.getTypename());
assertEquals(4, prototypes.size());
assertEquals(0, ops.size());
assertEquals(1, ops.size());
assertEquals(1, countForLoops(tu)); assertEquals(2, countForLoops(tu));
assertEquals(1, ops.size()); assertTrue(ops.get(0) instanceof StmtReductionOpportunity); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(reducedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, ops.size()); assertEquals(0, moreOps.size());
assertEquals(6, injectionPointList.size());
assertTrue(opportunities.isEmpty());
assertTrue(ops.isEmpty());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(exception.getMessage().contains("Method calls are not currently supported"));
assertEquals(ec1.getValue(), ec2.getValue());
assertEquals(0, ops.size());
assertEquals(0, ops.size());
assertEquals(4, ops.size());
assertNotNull( new InjectionPoint(null, false, false, scope) { @Override public void inject(Stmt stmt) { throw new RuntimeException(); } @Override public Stmt getNextStmt() { throw new RuntimeException(); } @Override public boolean hasNextStmt() { throw new RuntimeException(); } @Override public void replaceNext(Stmt stmt) { throw new RuntimeException(); } }.scopeAtInjectionPoint());
assertTrue(fileOps.areShadersValid(output, false));
assertTrue(stmt.getInit() instanceof NullStmt);
assertTrue(exception.getMessage().contains("Not yet supporting multi-dimensional arrays"));
assertEquals(fce.getText(), fce2.getText()); assertFalse(fce == fce2);
assertEquals(1, ops.size());
assertSame(lookupType(initializer.getExpr()), BasicType.INT);
assertEquals(fce.getValue(), fce2.getValue()); assertFalse(fce == fce2);
assertFalse(VoidType.VOID.hasCanonicalConstant(new Scope()));
assertEquals(elseVar, te.getTest()); assertEquals(conditionVar, te.getThenExpr()); assertEquals(thenVar, te.getElseExpr());
assertEquals(1, ops.size());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(4, injectionPointList.size());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(1, ops.size());
assertEquals(0, ops.size());
assertEquals(2, be.getNumChildren());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(3, makeTernary().getNumChildren());
assertEquals(0, ops.size());
assertEquals(0, RemoveStructFieldReductionOpportunities .findOpportunities(MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())).size());
assertEquals("4u", new UIntConstantExpr("4u").getText());
assertEquals("break;\\n", new BreakStmt().getText()); assertNotSame(breakStmt, breakStmt.clone());
assertEquals(fce.getChild(0), fce.getArg(0)); assertEquals(fce.getChild(1), fce.getArg(1)); assertEquals(fce.getChild(2), fce.getArg(2)); assertEquals(fce.getChild(3), fce.getArg(3));
assertTrue(ops.size() > 0);
assertEquals("foo(2.0 * 3.6, true, s.f)", tce.getText());
assertTrue( new CheckPredicateVisitor() { @Override public void visitReturnStmt(ReturnStmt returnStmt) { super.visitReturnStmt(returnStmt); if (returnStmt.getExpr() instanceof UIntConstantExpr && ((UIntConstantExpr) returnStmt.getExpr()).getValue().equals("0u")) { predicateHolds(); } } }.test(ParseHelper.parse(program)));
assertFalse(stmtOps.isEmpty()); assertFalse(unwrapOps.isEmpty()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu)); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, opportunities.size());
assertEquals("other", fce.getCallee());
assertEquals(1, ops.size());
assertFalse(new CheckPredicateVisitor() { @Override public void visitDiscardStmt(DiscardStmt discardStmt) { predicateHolds(); } }.test(donated));
assertTrue(baseType.hasQualifier(TypeQualifier.MEDIUMP)); assertEquals("1.00f", ((FloatConstantExpr) variablesDeclaration.getDeclInfo(0) .getInitializer().getExpr()).getValue());
assertEquals(fce, be.getRhs());
assertEquals("discard;\\n", new DiscardStmt().getText()); assertNotSame(discardStmt, discardStmt.clone());
assertEquals(1, ops.size());
assertEquals(0, ops.size());
assertEquals(7, injectionPointList.size());
assertNotEquals(tu, transformed); assertEquals(PrettyPrinterVisitor.prettyPrintAsString( ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(transformed));
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals("3u", uice.getValue());
assertEquals(1, ops.size()); assertTrue(ops.get(0) instanceof StmtReductionOpportunity); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(reducedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, ops.size());
assertTrue(ops.isEmpty());
assertEquals(3, arrayConstructor.getNumChildren());
assertEquals("foo(2.0 * 3.6, 12.34, true, s.f)", tce.getText());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(2, opportunities.size()); assertEquals(1, opportunities.size());
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertTrue(new CheckPredicateVisitor() { @Override public void visitInitializer(Initializer initializer) { super.visitInitializer(initializer); if (initializer.getExpr() instanceof IntConstantExpr && ((IntConstantExpr) initializer.getExpr()).getValue().equals("031")) { predicateHolds(); } } }.test(tu));
assertEquals(2, b.getNumStmts()); assertEquals(3, b.getNumStmts()); assertEquals(4, b.getNumStmts()); assertEquals(stmt1, b.getStmt(0)); assertTrue(b.getStmt(1) instanceof NullStmt); assertEquals(stmt2, b.getStmt(2)); assertTrue(b.getStmt(3) instanceof NullStmt);
assertTrue(ops.isEmpty());
assertEquals(v, mle.getStructure());
assertEquals(1, ops.size());
assertEquals(0, ops.size());
assertEquals(3, new TypeConstructorExpr("foo", exprsList()).getNumChildren());
assertEquals(vie, pe.getChild(0));
assertEquals(t.getNumFields(), 3); assertEquals("c", t.getFieldNames().get(2));
assertEquals(1, ops.size());
assertEquals("foo", mle.getMember()); assertEquals("bar", mle.getMember());
assertEquals(2, ops.size());
assertEquals(0, ops.size());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(1, ops.size());
assertNotSame(arrayInfo1, arrayInfo2); assertSame(sizeExpr, arrayInfo1.getSizeExpr()); assertNotSame(sizeExpr, arrayInfo2.getSizeExpr()); assertEquals(sizeExpr.getText(), arrayInfo2.getSizeExpr().getText());
assertSame(lookupType(initializer.getExpr()), BasicType.INT);
assertFalse(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertEquals(0, ops.size());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertNotSame(pe, pe2); assertNotSame(pe.getExpr(), pe2.getExpr()); assertEquals(((VariableIdentifierExpr) pe.getExpr()).getName(), ((VariableIdentifierExpr) pe2.getExpr()).getName());
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, opportunities.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expectedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(elseVar, te.getElseExpr()); assertEquals(elseVar, te.getChild(2));
assertEquals("No shader jobs found.", exception.getMessage());
assertEquals(4, ops.size()); assertTrue(ops.get(i) instanceof StmtReductionOpportunity); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(reducedProgram)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertSame(ShadingLanguageVersion.ESSL_320, tu.getShadingLanguageVersion());
assertEquals(0, ops.size());
assertTrue(ops.isEmpty());
assertEquals(0, ops.size());
assertTrue(donors.delete()); assertEquals("Donors directory does not exist.", exception.getMessage());
assertTrue(ops.isEmpty());
assertTrue(ops.isEmpty());
assertEquals(1, ops.size());
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(0, ops.size());
assertEquals(0, ops.size());
assertEquals(1, ops.size());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertFalse(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertEquals(w, mle.getStructure());
assertEquals(1, ops.size());
assertEquals(t.getFieldTypes().get(0), BasicType.MAT2X2); assertEquals(t.getFieldTypes().get(1), BasicType.MAT3X3);
assertTrue(exception.getMessage().contains("Named interface blocks are not currently " + "supported"));
assertEquals(arg4, fce.getArg(0)); assertEquals(arg3, fce.getArg(1)); assertEquals(arg2, fce.getArg(2)); assertEquals(arg1, fce.getArg(3));
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(prog)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(2, ops.size()); assertTrue(ops.get(0).preconditionHolds()); assertTrue(ops.get(1).preconditionHolds()); assertFalse(ops.get(1).preconditionHolds());
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, expr.getNumChildren());
assertEquals("continue;\\n", new ContinueStmt().getText()); assertNotSame(continueStmt, continueStmt.clone());
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertTrue(ops.isEmpty());
assertTrue(args.get(i) == e.getArgs().get(i));
assertSame(lookupType(initializer.getExpr()), BasicType.UINT);
assertEquals("x", x.getName()); assertEquals("y", x.getName());
assertEquals(p1, proto.getParameter(0)); assertEquals(p3, proto.getParameter(1)); assertEquals(2, proto.getNumParameters());
assertFalse(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertNull(injectionPoint.scopeAtInjectionPoint().lookupType("w"));
assertFalse(getTemplateFromSingleDeclarationProgram(program).isLValue());
assertFalse(expr == theClone); assertEquals(theClone.getText(), expr.getText());
assertEquals("-1", ec.getValue());
assertEquals(1, shaderJob.getPipelineInfo().getNumUniforms()); assertEquals(1, ops.size()); assertEquals(0, shaderJob.getPipelineInfo().getNumUniforms());
assertEquals("foo", mle.getMember());
assertEquals(0, ops.size());
assertEquals(BasicType.VEC4, arrayConstructor.getArrayType().getBaseType());
assertEquals(ShaderKind.FRAGMENT, fragTu.getShaderKind()); assertEquals(ShaderKind.VERTEX, vertTu.getShaderKind()); assertEquals(ShaderKind.COMPUTE, compTu.getShaderKind());
assertEquals("A", expr.getArray().getText());
assertEquals(1, FunctionReductionOpportunities.findOpportunities( MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())).size());
assertEquals(0, ops.size());
assertEquals(2, ops.size()); assertTrue(ops.isEmpty());
assertEquals(thenVar, te.getThenExpr()); assertEquals(thenVar, te.getChild(1));
assertTrue(exception.getMessage().contains("Method calls are not currently supported"));
assertEquals(1, b.getNumStmts()); assertEquals(2, b.getNumStmts()); assertTrue(((BoolConstantExpr) ((ExprStmt)b.getStmt(0)).getExpr()).getIsTrue()); assertTrue(b.getStmt(1) instanceof NullStmt);
assertEquals("A", expr.getChild(0).getText()); assertEquals("0", expr.getChild(1).getText()); assertEquals("B", expr.getChild(0).getText()); assertEquals("0", expr.getChild(1).getText()); assertEquals("B", expr.getChild(0).getText()); assertEquals("3", expr.getChild(1).getText());
assertEquals(0, ops.size());
assertTrue(ops.isEmpty());
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(variablesDeclaration.getDeclInfos().get(0).getName(), "a"); assertEquals(variablesDeclaration.getDeclInfos().get(1).getName(), "b"); assertEquals(variablesDeclaration2.getDeclInfos().get(0).getName(), "a"); assertEquals(variablesDeclaration2.getDeclInfos().get(1).getName(), "b");
assertEquals(0, x.getNumChildren());
assertEquals(0, ops.size());
assertTrue(exception.getMessage().contains("Method calls are not currently supported"));
assertEquals(0, ops.size());
assertEquals(0, ops.size());
assertEquals(1, ops.size()); assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(4, fce.getNumArgs()); assertEquals(fce.getArgs().size(), fce.getNumArgs());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertTrue(PrettyPrinterVisitor.prettyPrintAsString(tu).contains(expectedStmt)); assertEquals(1, ops.size()); assertTrue(PrettyPrinterVisitor.prettyPrintAsString(tu).contains(expectedStmt));
assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertTrue(references.delete()); assertEquals("References directory does not exist.", exception.getMessage());
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(shader)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertFalse(uice == uice2); assertEquals(uice.getValue(), uice2.getValue());
assertEquals(expected, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program )));
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(expected)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals(1, opportunities.size());
assertEquals(v, pe.getChild(0)); assertEquals(w, pe.getChild(0));
assertEquals(2, ops.size());
assertEquals("default:\\n", new DefaultCaseLabel().getText()); assertNotSame(defaultCaseLabel, defaultCaseLabel.clone());
assertNotEquals(tu, transformed); assertEquals(PrettyPrinterVisitor.prettyPrintAsString( ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(transformed));
assertEquals(4, fce.getNumChildren()); assertEquals(fce.getArgs().size(), fce.getNumChildren()); assertEquals(fce.getNumArgs(), fce.getNumChildren());
assertTrue(ops.isEmpty());
assertEquals(1, shaderJob.getPipelineInfo().getNumUniforms()); assertEquals(1, ops.size()); assertEquals(0, shaderJob.getPipelineInfo().getNumUniforms());
assertFalse(SideEffectChecker.isSideEffectFree(new ForStmt( new ExprStmt(new BinaryExpr( new VariableIdentifierExpr("i"), new IntConstantExpr("0"), BinOp.ASSIGN )), new BinaryExpr( new VariableIdentifierExpr("i"), new IntConstantExpr("10"), BinOp.LT), new UnaryExpr( new VariableIdentifierExpr("i"), UnOp.POST_INC ), new BlockStmt(Collections.emptyList(), false)), ShadingLanguageVersion.ESSL_310, ShaderKind.FRAGMENT));
assertEquals(1, ops.size());
assertEquals(4, ops.size()); assertFalse(ops.get(1).preconditionHolds()); assertTrue(ops.isEmpty());
assertEquals(4, ops.size());
assertNotSame(trueExpr, trueExpr.clone()); assertNotSame(falseExpr, falseExpr.clone()); assertEquals(trueExpr.getIsTrue(), trueExpr.clone().getIsTrue()); assertEquals(falseExpr.getIsTrue(), falseExpr.clone().getIsTrue()); assertTrue(trueExpr.getIsTrue()); assertFalse(falseExpr.getIsTrue());
assertSame(lookupType(initializer.getExpr()), BasicType.UINT);
assertEquals(7, numBinariesInExpr);
assertFalse(mle == mle2); assertEquals(mle.getMember(), mle2.getMember()); assertEquals(((VariableIdentifierExpr) mle.getStructure()).getName(), ((VariableIdentifierExpr) mle2.getStructure()).getName()); assertFalse(mle.getStructure() == mle2.getStructure());
assertTrue(ops.isEmpty());
assertEquals(3, fce.getNumArgs()); assertEquals(arg1, fce.getArg(0)); assertEquals(arg3, fce.getArg(1)); assertEquals(arg4, fce.getArg(2));
assertEquals(t1, t2); assertEquals(t1.hashCode(), t2.hashCode()); assertEquals(t4, t5); assertEquals(t4.hashCode(), t5.hashCode()); assertNotEquals(t1, t3); assertNotEquals(t1, t4); assertNotEquals(t5, t6);
assertEquals(1, ops.size());
assertEquals(1, ops.size());
assertEquals("someFunction(1 + 1, true, vec2(0.0), voidArgsFunction())", fce.getText());
assertEquals(4, ops.size());
assertEquals(1, mle.getNumChildren());
assertEquals(1, ops.size());
assertEquals("someFunction", fce.getCallee());
assertEquals(0, ops.size());
assertEquals(PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(prog)), PrettyPrinterVisitor.prettyPrintAsString(tu));
assertEquals("42", intConstantExpr.getValue());
assertEquals(4, new StandardVisitor() { private int numTernaries; @Override public void visitTernaryExpr(TernaryExpr ternaryExpr) { super.visitTernaryExpr(ternaryExpr); numTernaries++; } public int getNumTernaries(TernaryExpr node) { numTernaries = 0; visit(node); return numTernaries; } }.getNumTernaries(te) );
assertTrue(translationUnit.hasUniformDeclaration("a")); assertTrue(translationUnit.hasUniformDeclaration("b")); assertFalse(translationUnit.hasUniformDeclaration("c"));
assertThat(ChainedProxySelector.proxyNames(), containsInAnyOrder("aws", "bluecoat", "local"));
assertThat(b.process(suiteStart).toEvent(), is(equalTo(suiteStart)));
assertThat(b.process(action).toEvent(), is(equalTo(action)));
assertThat(proxy.applies(new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "anything/do")), is(false));
assertThat(ConfigLoader.config().getString("t1"), is(equalTo("1"))); assertThat(ConfigLoader.config().getString("t1"), is(equalTo("2")));
assertThat(proxy.getNtlmHandler(), is(notNullValue()));
assertThat(b.process(suiteFinish), is(equalTo(Message.NULL)));
assertThat("int", val == 0);
assertThat(lists, equalTo(expected));
assertThat(IdUtils.id(IdUtils.id(EventType.ACTION), EventType.ACTION), is(not(nullValue())));
assertThat(JarUtils.findResources("test_props/.*properties$"), is(not(emptyIterableOf(ResourceInfo.class))));
assertThat(ConfigLoader.config(), is(notNullValue()));
assertThat(result, is(equalTo(Message.NULL))); assertThat("Incorrect sequence of events", executionFinished && !commit && !executionStart); assertThat(result, is(equalTo(Message.NULL))); assertThat("Incorrect sequence of events", executionFinished && commit && !executionStart); assertThat(result, is(equalTo(Message.NULL))); assertThat("Incorrect sequence of events", executionFinished && commit && executionStart);
assertThat(JarUtils.fileNameFromClasspath("lib/test_props/some.jar"), is(equalTo("some.jar")));
assertThat(IdUtils.id(EventType.ACTION), is(not(nullValue())));
assertThat(CsvToTable.transform(data), equalTo(expected));
assertThat(Bucket.isEmpty(emptyRequest), is(true));
assertThat(proxy.getChainedProxyAddress(), is(new InetSocketAddress("5.5.5.5", 80)));
assertThat(proxy.applies(new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "bluecoat/do")), is(true));
assertThat("Has unexpected commit", !st.hasEvents(EventType.COMMIT)); assertThat("Doesnt have test case finish", st.hasEvents(EventType.TEST_CASE_FINISH));
assertThat(b.process(log).toEvent(), is(equalTo(log)));
assertThat(st.getChildren(es2, EventType.TEST_SUITE_START), contains((Object) tss2));
assertThat("expected string is not presented", "Some test".contains("assert")); assertThat("Some test", containsString("assert")); assertThat("expected string is not presented", "Some test", containsString("assert"));
assertThat(st.getAllChildren(es2, EventType.TEST_STEP_FINISH), contains((Object) tstf2));
assertThat(st.getParent(ef1), is(equalTo((Event) es1))); assertThat(st.getParent(ef2), is(equalTo((Event) es2))); assertThat(st.getParent(tcs2), is(equalTo((Event) tss2)));
assertThat(actual, sameJsonAs(new JSONObject("{\\"allOf\\":[" + BooleanSchema.INSTANCE.toString() + ", " + NullSchema.INSTANCE + "], \\"description\\":\\"descr\\"}")));
assertTrue(JSONWriter.implementsJSONString(new Descendant()));
assertEquals(new SchemaLocation(asList("hello")), actual.pointerToCurrentObj);
assertEquals("false", FalseSchema.builder().build().toString());
assertEquals("{\\"2\\":" + NullSchema.INSTANCE.toString() + "}", buffer.toString());
assertEquals(expected, actual);
assertEquals(expected.unwrap(), actual.unwrap());
assertNotNull(actual);
assertEquals(1, actual.getPropertyDependencies().get("isIndividual").size());
assertTrue(createSubject().maybe("not").isPresent());
assertEquals("#", e.getSchemaLocation());
assertFalse(createSubject().containsKey("minimum"));
assertSame(OBJ, actual);
assertEquals(orig.toString(), actual.toString());
assertEquals("myId", actual.getId()); assertEquals("my title", actual.getTitle()); assertEquals("my description", actual.getDescription());
assertFalse(createSubject().maybeMapping("minimum", val -> true).isPresent());
assertEquals("#: expected type is one of String or Map, found: Integer", actual);
assertTrue(SchemaLoader.load(get("multipleTypes")) instanceof CombinedSchema);
assertEquals(1, actual.getSchemaDependencies().size());
assertFalse(subject.passesTypeCheck(JSONObject.class, false, null));
assertEquals("#/key", actual.toString()); assertEquals("#", underTest.toString());
assertEquals(singleton(schemaBuilder), actual.extractedSchemaBuilders()); assertEquals(singleton("minimum"), actual.projectedSchemaJson().keySet());
assertNotNull(actual);
assertEquals(new SchemaLocation(asList("0")), actual.pointerToCurrentObj);
assertThat(new JSONObject(actual), sameJsonAs(get("boolAndNot")));
assertEquals(EmptySchema.builder().build(), EmptySchema.builder().build());
assertThat(actual, sameJsonAs(expected));
assertEquals(expected.unwrap(), actual.unwrap());
assertNull(actual);
assertEquals(original.childFor("not"), actual);
assertTrue(JSONWriter.implementsJSONString(new Ancestor()));
assertEquals("#/required/2: expected type: String, found: null", actual);
assertEquals(CombinedSchema.ALL_CRITERION, actual.getCriterion());
assertEquals("true", TrueSchema.builder().build().toString());
assertTrue(createSubject().maybeMapping("not", val -> true).isPresent());
assertThat(actual, sameJsonAs(expected));
assertNotNull(actual);
assertEquals(expected, e);
assertEquals(expected, e);
assertFalse(subject().requireMapping("a", fn));
assertEquals("#: 3 schema violations found", subject.getMessage());
assertEquals(1, e.getCausingExceptions().size());
assertEquals("#/billing_address", billingAddressFailure.getPointerToViolation()); assertEquals(billingAddressSchema, billingAddressFailure.getViolatedSchema()); assertEquals("#/billing_name", billingNameFailure.getPointerToViolation()); assertEquals(billingNameSchema, billingNameFailure.getViolatedSchema()); assertEquals("#", ageFailure.getPointerToViolation()); assertEquals("#: required key [age] not found", ageFailure.getMessage());
assertNull(result.getContainedItemSchema());
assertEquals(new HashSet<>(asList(1, 2, "a", expectedObject, null)), new HashSet<>(actual.getPossibleValues()));
assertEquals(expectedOutput, actual);
assertEquals("", new JSONPointer("").toString());
assertEquals("#: 3 schema violations found", e.getMessage()); assertEquals(3, e.getCausingExceptions().size());
assertEquals("#: expected type is one of Boolean or JsonObject, found: Integer", e.getMessage());
assertTrue(prop.requiresObject()); assertEquals(1, prop.getMinProperties().intValue());
assertEquals("overloaded use of exclusiveMinimum or exclusiveMaximum keyword", e.getMessage());
assertEquals(4, INT.requireInteger(i -> i.intValue() + 1).intValue());
assertEquals("{\\"const\\":{\\"a\\":2}}", actual);
assertEquals("#/c%25d", new JSONPointer("/c%d").toURIFragment()); assertEquals("#/e%5Ef", new JSONPointer("/e^f").toURIFragment()); assertEquals("#/g%7Ch", new JSONPointer("/g|h").toURIFragment()); assertEquals("#/m%7En", new JSONPointer("/m~n").toURIFragment());
assertFalse(actual instanceof ConstSchema);
assertFalse(ObjectComparator.deepEquals(arg1, arg2)); assertFalse(ObjectComparator.deepEquals(arg2, arg1));
assertTrue(SchemaLoader.load(get("anyOfNeverMatches")) instanceof CombinedSchema);
assertNotNull(actual); assertEquals(2, actual.getPatternProperties().size());
assertEquals(expectedSchemaPointer, actualSchemaPointer);
assertThat(new JSONObject(actual), sameJsonAs(rawSchemaJson));
assertEquals(Optional.empty(), subject().maybeMapping("aaaa", ls -> 42));
assertFalse(JSONWriter.implementsJSONString(null));
assertTrue(subject().containsKey("a"));
assertTrue(SchemaLoader.load(get("emptySchema")) instanceof EmptySchema);
assertNotNull(boolSchema);
assertEquals("{\\"not\\":{\\"type\\":\\"boolean\\"}}", actual);
assertFalse(createSubject().maybe("minimum").isPresent());
assertEquals(2, subject.getViolationCount());
assertEquals(expected, e);
assertEquals("#: expected type: String, found: Integer", actual);
assertEquals(3, stringSchema.getMinLength().intValue()); assertEquals(5, numSchema.getMinimum().intValue());
assertTrue(FLS.requireBoolean(bool -> !bool));
assertFalse(actual instanceof ConditionalSchema);
assertNotNull(rectangleSchema); assertTrue(aRef.getReferredSchema() instanceof NumberSchema);
assertTrue(TRU.requireBoolean());
assertEquals("hello", actual);
assertThat(JsonValue.of(raw), is(instanceOf(expectedRetType)));
assertNotNull(schema.getSchemaLocation());
assertThat(actual, sameJsonAs(expected));
assertEquals(JSONObject.NULL, actual.get("pointerToViolation"));
assertEquals(schema.get("id"), actual.toString());
assertEquals(subject, copy);
assertEquals("#/a/b~1b/c~0c", underTest.toString());
assertNull(nullableSchema.isNullable()); assertNull(nonNullableSchema.isNullable()); assertNull(implicitNonNullable.isNullable());
assertEquals("{\\"const\\":null}", actual);
assertThat(ResourceLoader.DEFAULT.readObj("tostring/null-schema.json"), sameJsonAs(new JSONObject(subject.toString())));
assertTrue(registries.isEmpty()); assertNotNull(first); assertSame(first, second);
assertTrue(new URIV4FormatValidator().validate("\\\\\\\\\\\\\\\\WINDOWS\\\\\\\\fileshare").isPresent());
assertFalse(actual.requiresObject());
assertFalse(new URIV4FormatValidator().validate("abc").isPresent());
assertFalse(actual instanceof ArraySchema);
assertNotNull(actual); assertEquals(2, propertySchemas.size()); assertEquals(BooleanSchema.INSTANCE, propertySchemas.get("boolProp")); assertEquals(2, actual.getRequiredProperties().size()); assertEquals(2, actual.getMinProperties().intValue()); assertEquals(3, actual.getMaxProperties().intValue());
assertThat(new JSONObject(actual), sameJsonAs(o));
assertThat(new JSONObject(notSchema.toString()), sameJsonAs(rawSchema));
assertEquals(2, actual.getMinLength().intValue()); assertEquals(3, actual.getMaxLength().intValue());
assertEquals(10, actual.getMinimum().intValue()); assertEquals(20, actual.getMaximum().intValue()); assertEquals(5, actual.getMultipleOf().intValue()); assertTrue(actual.isExclusiveMinimum()); assertTrue(actual.isExclusiveMaximum()); assertTrue(actual.requiresInteger());
assertEquals(4, subject.getViolationCount());
assertFalse(subject.passesTypeCheck(JSONObject.class, true, Boolean.TRUE));
assertEquals("#: message", actual.getMessage()); assertEquals(JSONPointer.builder().build().toURIFragment(), actual.getSchemaLocation());
assertEquals(2, actual.intValue());
assertEquals("{\\"const\\":true}", actual);
assertNotNull(actual);
assertEquals(expected, actual);
assertFalse(JSONWriter.implementsJSONString(new Object()));
assertEquals(expected, actual);
assertFalse(createSubject().isEmpty()); assertTrue(subject.isEmpty());
assertTrue(createSubject().containsKey("not"));
assertTrue(subject.passesTypeCheck(String.class, true, Boolean.TRUE));
assertEquals("val", pointer.queryFrom(document));
assertNotNull(actual); assertTrue(actual.schemaClient instanceof DefaultSchemaClient);
assertEquals(1, subject.getViolationCount());
assertTrue(SchemaLoader.load(get("jsonPointerInArray")) instanceof ArraySchema);
assertEquals(new SchemaLocation(asList("hello", "world")), actual.pointerToCurrentObj);
assertNotNull(actual); assertEquals(2, actual.getMinItems().intValue()); assertEquals(3, actual.getMaxItems().intValue()); assertTrue(actual.needsUniqueItems()); assertEquals(NullSchema.INSTANCE, actual.getAllItemSchema());
assertSame(input, e);
assertEquals(BooleanSchema.INSTANCE, actual.getSchemaOfAdditionalProperties());
assertFalse(subject.passesTypeCheck(JSONObject.class, true, Boolean.TRUE));
assertThat(actual, sameJsonAs(expected));
assertNull(actual.getPropertyNameSchema());
assertEquals(2, ve.getViolationCount()); assertEquals("minimum", ve.getCausingExceptions().get(0).getKeyword()); assertEquals("multipleOf", ve.getCausingExceptions().get(1).getKeyword());
assertEquals(singleton("not"), createSubject().keySet());
assertNotNull(actual); assertEquals(0, actual.getPatternProperties().size());
assertEquals("#", exc.getPointerToViolation());
assertEquals(3, INT.requireInteger().intValue());
assertEquals(propSchema.getRequiredProperties(), asList("a", "b"));
assertTrue(SchemaLoader.load(get("additionalItemSchema")) instanceof ArraySchema);
assertFalse(actual.permitsAdditionalItems()); assertNull(actual.getAllItemSchema()); assertEquals(2, actual.getItemSchemas().size()); assertEquals(BooleanSchema.INSTANCE, actual.getItemSchemas().get(0)); assertEquals(NullSchema.INSTANCE, actual.getItemSchemas().get(1));
assertEquals("string", STR.requireString());
assertThat(new JSONObject(subject.toString()), sameJsonAs(schemaJson));
assertNotNull(actual);
assertEquals("#: required key [boolProp] not found", e.getMessage()); assertTrue("no causing exceptions", e.getCausingExceptions().isEmpty());
assertTrue(actual);
assertEquals("relative-json-pointer", SUBJECT.formatName());
assertEquals("#: 2 schema violations found", e.getMessage()); assertEquals(2, e.getCausingExceptions().size());
assertThat(new JSONObject(actual), sameJsonAs(rawSchemaJson));
assertThat(1,is(user.getId()));
assertNotNull(storage);
assertThat(modificationDate).isEqualToIgnoringHours(ZonedDateTime.of(2008, 4, 10, 0, 0, 0, 0, ZoneId.of("GMT")));
assertThat(Files.readAllLines(userPrefFile)).containsAll(expLines);
assertEquals(originalCapabilities.getCapability(PLATFORM_NAME), newCapabilities.getCapability(PLATFORM_NAME)); assertEquals(originalCapabilities.getCapability(BROWSER_NAME), newCapabilities.getCapability(BROWSER_NAME)); assertTrue(new Gson().toJson(chromeOptions).contains(CHROME_OPTIONS_VALUE));
assertThat(enhanced, instanceOf(DroneAugmented.class)); assertThat(enhanced, instanceOf(TakesScreenshot.class)); assertEquals(driver, ((DroneAugmented) enhanced).getWrapped());
assertNull(store.pull(key1));
assertEquals(1437, length);
assertEquals(descStr, copyStr);
assertTrue(set.isEmpty()); assertEquals(0, set.size()); assertNotNull(resultString); assertEquals("", resultString);
assertNull(jobInstance);
assertEquals(expectedCnt, memoryStore.getRowCount());
assertEquals(7, stringArray.length); assertEquals("[ORG.APACHE.KYLIN.COMMON.UTIL.STRINGUTIL, null, null, null, null, null, null]", Arrays.asList(stringArray).toString() );
assertEquals(32, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.STOPPED, jobStatusEnum);
assertEquals(expected, pathCaptor.getAllValues());
assertEquals(2, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.RUNNING, jobStatusEnum);
assertFalse(stringArrayTwo.equals(stringArray)); assertEquals(1, stringArrayTwo.length); assertEquals("J", stringArrayTwo[0]);
assertEquals(Lists.newArrayList(toBeDel), captor.getAllValues());
assertEquals(",", string);
assertTrue(cubePath.size() > 1); assertEquals(cubePath.size(), cubes.size());
assertEquals(2, override.size()); assertEquals("test1", override.get("test1")); assertEquals("test2", override.get("test2"));
assertEquals("%W=U~)O|0\'#?,zA", StringUtil.noBlank(null, "%W=U~)O|0\'#?,zA"));
assertNotNull(resultString); assertEquals(")\'<Mw@ZR0IYF_l%*>", resultString);
assertEquals(50000, memoryStore.getRowCount());
assertTrue(jobStepStatusEnum.isComplete()); assertEquals(4, jobStepStatusEnum.getCode()); assertFalse(jobStepStatusEnum.isRunable()); assertEquals(JobStepStatusEnum.FINISHED, jobStepStatusEnum);
assertTrue(config.properties == configExt.properties); assertEquals("1234", configExt.getOptional("1234"));
assertNotNull(resultString); assertEquals("", resultString);
assertEquals("aaa,bbb,ccc", joinedNormal); assertEquals(",aa,,bb,", joinedEmpty);
assertEquals(pair[1], CliCommandExecutor.checkParameter(pair[0]));
assertTrue(jobStepStatusEnum.isComplete()); assertFalse(jobStepStatusEnum.isRunable()); assertEquals(16, jobStepStatusEnum.getCode()); assertEquals(JobStepStatusEnum.DISCARDED, jobStepStatusEnum);
assertEquals(2, jobStepStatusEnum.getCode()); assertFalse(jobStepStatusEnum.isComplete()); assertFalse(jobStepStatusEnum.isRunable()); assertEquals(JobStepStatusEnum.RUNNING, jobStepStatusEnum);
assertEquals(" 8VKQ&I*pSVr", string);
assertEquals(101, ddl.length());
assertFalse(jobStepStatusEnum.isComplete()); assertFalse(jobStepStatusEnum.isRunable()); assertEquals(128, jobStepStatusEnum.getCode()); assertEquals(JobStepStatusEnum.STOPPED, jobStepStatusEnum);
assertEquals(1L, searchRequest.getHitCuboid()); assertEquals(10, returnRecordCnt); assertEquals(2, returnColNum);
assertEquals("", StringUtil.dropSuffix("Oo}T^z88/U", "Oo}T^z88/U"));
assertEquals(1, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.PENDING, jobStatusEnum);
assertTrue(jobStepStatusEnum.isRunable()); assertEquals(1, jobStepStatusEnum.getCode()); assertEquals(JobStepStatusEnum.PENDING, jobStepStatusEnum);
assertEquals(0, properties.size()); assertTrue(properties.isEmpty()); assertEquals(0, properties.size()); assertTrue(properties.isEmpty());
assertEquals(eventCnt, returnRecordCnt); assertEquals(3, returnColNum);
assertNull(jobInstance);
assertEquals("true", extras.getProperty("caseSensitive")); assertEquals("TO_UPPER", extras.getProperty("unquotedCasing")); assertEquals("DOUBLE_QUOTE", extras.getProperty("quoting")); assertEquals("LENIENT", extras.getProperty("conformance")); assertEquals("false", extras.getProperty("caseSensitive")); assertEquals("UNCHANGED", extras.getProperty("unquotedCasing")); assertEquals("BRACKET", extras.getProperty("quoting")); assertEquals("DEFAULT", extras.getProperty("conformance"));
assertNull(string);
assertTrue(jobStepStatusEnum.isRunable()); assertTrue(jobStepStatusEnum.isComplete()); assertEquals(8, jobStepStatusEnum.getCode()); assertEquals(JobStepStatusEnum.ERROR, jobStepStatusEnum);
assertTrue(currentVer.equals(udfVer));
assertEquals(2, override.size()); assertEquals("test2", s);
assertEquals("N(sg", StringUtil.noBlank("N(sg", "H=!Cp(Ed5gral\x7f0qzo"));
assertTrue(hdfsWorkingDirectory.startsWith("file:/"));
assertEquals(4, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.FINISHED, jobStatusEnum);
assertEquals("testMetaPrefix", config.getMetadataUrlPrefix()); assertEquals("testMetaPrefix", config.getMetadataUrlPrefix()); assertEquals("/kylin/temp", config.getMetadataUrlPrefix());
assertNull(config.getOptional(oldk)); assertNotNull(config.getOptional(newk)); assertEquals(ext.getOptional(oldk), null); assertEquals(ext.getOptional(newk), "1"); assertNotEquals(config.getOptional(newk), "1"); assertEquals(config.getOptional(newk), "2");
assertEquals("", string);
assertEquals(8, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.ERROR, jobStatusEnum);
assertEquals(descStr, copyStr);
assertEquals(step.getStatus(), JobStepStatusEnum.PENDING); assertEquals(step.getStatus(), JobStepStatusEnum.FINISHED);
assertEquals(16, jobStatusEnum.getCode()); assertEquals(JobStatusEnum.DISCARDED, jobStatusEnum);
assertThat(H.crc8(TEST_BYTE_ARRAY, 0, TEST_BYTE_ARRAY.length), equalTo(RESULT));
assertThat(H.trunc(LOREMIPSUM, 26), equalTo(RESULT));
assertThat(H.calculationByDistance(ELTEN, KLEVE), is(RESULT));
assertEquals("??{mykey}??", message.getString("mykey"));
assertTrue(repo instanceof LocalRepository);
assertNotNull(injectionManager);
assertEquals("message-exception-001-pt", message.getString("exception-001")); assertEquals("message-exception-001-en", message.getString("exception-001"));
assertTrue(lista.size() > 0);
assertNotNull(injectionManager);
assertEquals("r2", result.getId()); assertEquals("Ok2", result.getDetail()); assertNull(result.getFile());
assertEquals("message pt: [demoiselle behave]", message.getString("message-param", "demoiselle", "behave")); assertEquals("message en: [demoiselle behave]", message.getString("message-param", "demoiselle", "behave"));
assertEquals("r2", result.getId()); assertEquals("Ok2", result.getDetail()); assertNull(result.getFile());
assertThat(fileConfig.getConfigProperties(), is(empty()));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(TAB_WIDTH, 8)));
assertThat(configType.getDisplayLabel(), is(label));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(INSERT_FINAL_NEWLINE, false)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(TAB_WIDTH, 8), configProperty(CHARSET, "utf8")));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(TRIM_TRAILING_WHITESPACE, false)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(TAB_WIDTH, 8)));
assertThat(new ConfigProperty(type, value).getDisplayValue(), is(displayValue));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(END_OF_LINE, CRLF)));
assertThat(fileConfig.getConfigProperties(), contains(configProperty(TAB_WIDTH, 8)));
assertThat(fileConfig.getConfigProperties(), contains( configPropertyWithType(INDENT_STYLE), configPropertyWithType(INDENT_SIZE), configPropertyWithType(TAB_WIDTH), configPropertyWithType(END_OF_LINE), configPropertyWithType(CHARSET), configPropertyWithType(TRIM_TRAILING_WHITESPACE), configPropertyWithType(INSERT_FINAL_NEWLINE) ));
assertSame(indentStyle, config.getConfigProperty("INDENT_STYLE")); assertSame(indentSize, config.getConfigProperty("INDENT_SIZE")); assertNull(config.getConfigProperty("TAB_WIDTH"));
assertThat(fileConfig.getPath(), is("path"));
assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering());
assertTrue(repo.copy(from, to)); assertTrue(srcFile.exists()); assertTrue(copyFile.exists());
assertEquals( "Land and Vegetation: Key players on the Climate Scene", DublinCoreXmlFormat .read(IoSupport.classPathResourceAsFile("/dublincore.xml").get()) .getFirst(DublinCore.PROPERTY_TITLE));
assertEquals("1 1", mapped.get(0)); assertEquals("4 4", mapped.get(1)); assertEquals("9 9", mapped.get(2));
assertThat(actual.toJSONString(), SameJSONAs.sameJSONAs(expected.toJSONString()));
assertEquals(a2, eNames.get(0)); assertEquals(b2, eNames.get(1)); assertEquals(a1, eNames.get(2)); assertEquals(b1, eNames.get(3));
assertFalse(DublinCoreUtil.equals(a, b)); assertTrue(DublinCoreUtil.equals(a, b)); assertFalse(DublinCoreUtil.equals(a, b)); assertTrue(DublinCoreUtil.equals(a, b)); assertTrue(DublinCoreUtil.equals(a, b));
assertFalse(streamingService.streamingUrls.containsKey(defaultTenant)); assertEquals(0, streamingService.streamingUrls.size());
assertEquals("ROLE_ADMIN", json.get("adminRole")); assertEquals("ROLE_ANONYMOUS", json.get("anonymousRole")); assertEquals("opencast", json.get("id")); assertEquals("Opencast", json.get("name"));
assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));
assertEquals(3L, job.getId());
assertEquals(3, servicesListProvider.getList("", servicesQuery).size()); assertEquals(3, servicesListProvider.getList(ServicesListProvider.LIST_NAME, servicesQuery).size()); assertEquals(3, servicesListProvider.getList(ServicesListProvider.LIST_STATUS, servicesQuery).size());
assertFalse(WorkflowConditionInterpreter.interpret("NOT true"));
assertTrue(WorkflowConditionInterpreter.interpret("5.0 == 5"));
assertEquals(0, service.getKnownAgents().size());
assertNotNull(segments); assertNotNull(segment);
assertEquals(expected, IndexUtils.clean(test));
assertTrue(mlist(asList(1, 2, 3, 4, 5)).take(0).value().isEmpty()); assertEquals(3, mlist(asList(1, 2, 3, 4, 5)).take(3).value().size()); assertEquals(5, mlist(asList(1, 2, 3, 4, 5)).take(5).value().size()); assertEquals(5, mlist(asList(1, 2, 3, 4, 5)).take(10).value().size());
assertNotNull(FileSupport.link(fileToLink, linkLocation, false)); assertTrue(linkLocation.exists());
assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));
assertNotNull(event); assertEquals("Current user is expected to be creator as no other creator has been set explicitly", "Creator", event.getCreator()); assertNotNull(event); assertEquals("Creator has been updated", "Hans", event.getCreator());
assertEquals(serializedDate, IndexUtils.serializeDate(date));
assertTrue(service.isCompliant(query));
assertFalse(WorkflowConditionInterpreter.interpret("1*4 < 3"));
assertEquals(4, ((Map) jp.get()).size()); assertEquals(new Integer(1), jp.get("id")); assertEquals("default_org", jp.get("organizationId")); assertEquals("Public", jp.get("name")); assertEquals(1, ((List) jp.get("acl.ace")).size());
assertEquals(day, SolrUtils.serializeDateRange(some(startDate), some(endDate))); assertEquals("[* TO " + serializedEndDate + "]", SolrUtils.serializeDateRange(Option.<Date>none(), some(endDate))); assertEquals("[" + serializedStartDate + " TO *]", SolrUtils.serializeDateRange(some(startDate), Option.<Date>none()));
assertEquals(5, a.size()); assertEquals(4, (Object) a.get(3)); assertEquals(2, b.size()); assertEquals(1, b.get(0)); assertEquals("x", b.get(1));
assertEquals(2, ((Map) jp.get()).size()); assertEquals(new Integer(1), jp.get("id")); assertEquals("Public", jp.get("name"));
assertEquals(NONE, job.getFailureReason());
assertEquals(foundId.toString(), theme.get("id").toString()); assertEquals("test.mp4", theme.get("bumperFileName").toString());
assertFalse(option.isSome());
assertEquals(1, jobList.getJobs().size());
assertEquals(Status.DISPATCHING, job.getStatus()); assertEquals(Status.RUNNING, job.getStatus());
assertEquals("There should only be one field called first in the collection.", 1, numberOfFirsts); assertTrue("The value has been set so it should be in the collection.", valueFound.isSome()); assertEquals("There should only be one field called first in the collection.", value, valueFound.get());
assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering());
assertFalse(staticFileRestService.useWebserver); assertFalse(staticFileRestService.useWebserver); assertFalse(staticFileRestService.useWebserver); assertFalse(staticFileRestService.useWebserver); assertTrue(staticFileRestService.useWebserver);
assertEquals("name:ASC", orderByNameAsc.toString()); assertEquals("date:DESC", orderByDateDesc.toString());
assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering());
assertEquals(smil, response.getSmil());
assertEquals(0, a.length);
assertEquals(newJob.toString(), jobString);
assertEquals("v1.5.0", json.get("default"));
assertEquals(job, equalJob);
assertTrue(WorkflowConditionInterpreter.interpret("485.0 > 50"));
assertEquals("TEST.VALUE.1", listProvidersService.getDefault(listName));
assertEquals(0, pub.getCatalogs().length);
assertThat(eventString, SameJSONAs.sameJSONAs(result));
assertNotNull(mediaSegments); assertNotNull(xml); assertFalse(xml.isEmpty());
assertEquals(day, IndexUtils.serializeDateRange(startDate, endDate));
assertEquals(format("Catched unexpected exception. The message was: %s", t.getMessage()), IllegalArgumentException.class, t.getClass());
assertTrue("User does not have role \'ROLE_USER_92623987_OPENCAST_ORG\'", json.contains("ROLE_USER_92623987_OPENCAST_ORG")); assertTrue("User does not have role \'ROLE_STUDENT\'", json.contains("ROLE_STUDENT")); assertEquals(2, json.size());
assertSame(mapped.getClass(), list.getClass()); assertEquals(2, list.size()); assertEquals(4, mapped.size()); assertTrue(mapped.contains(">")); assertTrue(mapped.contains("one")); assertTrue(mapped.contains("two"));
assertTrue(jobProducer.isReadyToAcceptJobs("any operation"));
assertEquals(SERIES_PROPERTY_VALUE, presetProviderImpl.getProperty(SERIES_ID, NOT_FOUND_NAME));
assertNull(YouTubeUtils.get(new XProperties(), YouTubeKey.clientSecretsV3, false));
assertEquals(newTrack.getChecksum(), cs); assertEquals(newTrack.getMimeType(), mt); assertNull(newTrack.getDuration()); assertEquals(newTrack.getChecksum(), cs); assertNotSame(newTrack.getMimeType(), mt); assertNull(newTrack.getDuration());
assertTrue(roles.contains(role1)); assertTrue(roles.contains(role2)); assertTrue(roles.contains(role3)); assertNotNull(mergedUser.getPassword()); assertEquals(org.getId(), mergedUser.getOrganization().getId()); assertEquals(userName, mergedUser.getUsername()); assertEquals("matterhorn,test", mergedUser.getProvider()); assertTrue(mergedUser.isManageable()); assertTrue(((JaxbUser) mergedUser).isManageable());
assertFalse(AccessControlUtil.equals(a, b));
assertEquals(6, mapped.size()); assertEquals(new Integer(1), mapped.get(0)); assertEquals(new Integer(2), mapped.get(2)); assertEquals(new Integer(3), mapped.get(4));
assertTrue(am.getAsset( snapshot.getVersion(), snapshot.getMediaPackage().getIdentifier().toString(), snapshot.getMediaPackage().getElements()[0].getIdentifier()).isSome());
assertEquals(1, counter[0]);
assertEquals("Land and Vegetation: Key players on the Climate Scene", md.getTitles().stream().filter(v -> v.getLanguage().equals(MetadataValues.LANGUAGE_UNDEFINED)) .findFirst().map(MetadataValue::getValue).orElse("")); assertEquals(createDate(2007, 12, 5, 0, 0, 0), md.getCreated().get());
assertThat(actual.toJSONString(), SameJSONAs.sameJSONAs(expected.toJSONString()));
assertEquals("incidents transferred", incidents, tree.getIncidents()); assertEquals("childIncidents transferred", subTrees, tree.getDescendants());
assertEquals(2, jobProducer.countJobs(Status.DISPATCHING)); assertEquals(3, jobProducer.countJobs(Status.RUNNING));
assertTrue(i.hasNext()); assertFalse(i.hasNext());
assertTrue(streamingService.publishToStreaming()); assertTrue(streamingService.publishToStreaming()); assertFalse(streamingService.publishToStreaming());
assertTrue("The file can not be parsed.", e.getCause() instanceof UnmarshalException);
assertEquals(some("<?xml version=\\"1.0\\"?>"), r1); assertEquals(none(String.class), r2);
assertEquals(0, JSONUtils.fromMap(null).length());
assertEquals(1L, aclJson.getLong("id")); assertEquals(MANAGED_ACL_1_NAME, aclJson.getString("name"));
assertEquals("", QueryPreprocessor.sanitize("")); assertEquals("", QueryPreprocessor.sanitize(" "));
assertEquals(expected, solrQuery);
assertTrue(sampleElemDir.exists());
assertFalse(intRangeE(0, 0).hasNext()); assertTrue(intRangeE(0, 1).hasNext()); assertEquals(10, toList(intRangeE(0, 10)).size());
assertEquals(3, filterMap(testMap, query).size()); assertEquals(0, filterMap(testMap, query).size()); assertEquals(3, filterMap(testMap, query).size());
assertFalse(i.hasNext());
assertThat(expected, SameJSONAs.sameJSONAs(result).allowingAnyArrayOrdering());
assertNotNull(dc); assertEquals("10.0000/5820", DublinCores.mkOpencastEpisode(dc).getDcIdentifier().get());
assertEquals("a", a.fold(new Either.Match<String, Integer, String>() { @Override public String left(String s) { return s; } @Override public String right(Integer integer) { return integer.toString(); } })); assertEquals("1", b.fold(new Either.Match<String, Integer, String>() { @Override public String left(String s) { return s; } @Override public String right(Integer integer) { return integer.toString(); } }));
assertEquals( "Land and Vegetation: Key players on the Climate Scene", DublinCoreXmlFormat.read(xml).getFirst(DublinCore.PROPERTY_TITLE));
assertFalse(AccessControlUtil.equals(a, b));
assertEquals("a,b,c", fold);
assertArrayEquals(new Integer[]{0, 1, 2, 3}, Arrays.cons(Integer.class, 0, array(1, 2, 3))); assertArrayEquals(new String[]{"0", "1", "2", "3"}, x); assertArrayEquals(new Object[]{"0", "1", "2", "3"}, x);
assertFalse(service.isCompliant(query));
assertEquals((Long) 1L, job.getRootJobId());
assertEquals("2 minutes", Log.getHumanReadableTimeString(120));
assertTrue(WorkflowConditionInterpreter.interpret("\'a\' != \'b\'"));
assertEquals("112233", fold);
assertEquals("*", QueryPreprocessor.sanitize("*")); assertEquals("*", QueryPreprocessor.sanitize(" * ")); assertEquals("*?*", QueryPreprocessor.sanitize("?")); assertEquals("*?*", QueryPreprocessor.sanitize(" ? ")); assertEquals("*H*llo* *Worl*d*", QueryPreprocessor.sanitize("H*llo Worl*d")); assertEquals("*H?llo* *Worl?d*", QueryPreprocessor.sanitize("H?llo Worl?d"));
assertNotNull(mediaSegments); assertNotNull(mediaSegments); assertNotNull(mediaSegments.getMediaSegments()); assertTrue(mediaSegments.getMediaSegments().size() == 3);
assertEquals( "Land and Vegetation: Key players on the Climate Scene", DublinCoreXmlFormat.read(xml).getFirst(DublinCore.PROPERTY_TITLE));
assertThat(eventString, SameJSONAs.sameJSONAs(result));
assertFalse(AccessControlUtil.equals(a, b));
assertEquals(false, abstractScanner.isEnabled());
assertEquals(2, f.size()); assertEquals("1", f.get("key1")); assertEquals("2", f.get("key2"));
assertEquals("theme-1-name", theme.get(foundId)); assertEquals("{}", result);
assertEquals(value, YouTubeUtils.get(p, YouTubeKey.clientSecretsV3, true)); assertEquals(value, YouTubeUtils.get(p, YouTubeKey.clientSecretsV3)); assertEquals(value, YouTubeUtils.get(p, YouTubeKey.clientSecretsV3, false));
assertTrue(MimeTypes.parseMimeType("video/mpeg").getSuffixes().length > 1);
assertEquals(expected, solrQuery);
assertTrue(WorkflowConditionInterpreter.interpret("3+\'4\' == \'34\'"));
assertEquals(0, pub.getAttachments().length);
assertEquals(started, job.getDateStarted());
assertEquals(2, OsgiUtil.getCfgAsInt(h, "b"));
assertEquals("test_org", job.getOrganization());
assertFalse(service.isCompliant(query));
assertEquals((Long) 200L, job.getRunTime());
assertThat(eventSchedulingString, SameJSONAs.sameJSONAs(result));
assertSame(filtered.getClass(), list.getClass()); assertEquals(2, list.size()); assertEquals(1, filtered.size()); assertTrue(filtered.contains("one"));
assertTrue("Media package must pass check", sanityCheck(loadFromClassPath("/manifest.xml")).isNone()); assertTrue("There must be errors", sanityCheck(loadFromClassPath("/manifest-insane.xml")).isSome());
assertEquals(new Long(UrlSigningServiceOsgiUtil.DEFAULT_URL_SIGNING_EXPIRE_DURATION), serializer.getExpirationSeconds()); assertEquals(new Long(UrlSigningServiceOsgiUtil.DEFAULT_URL_SIGNING_EXPIRE_DURATION), serializer.getExpirationSeconds()); assertEquals(testValue, serializer.getExpirationSeconds());
assertTrue(AccessControlUtil.equals(a, b));
assertTrue(WorkflowConditionInterpreter.interpret("1+1 < 3"));
assertEquals("*\\\\(* *\\\\)* *\\\\[* *\\\\]* *\\\\{* *\\\\}* *\\\\~* *\\\\^* *\\\\:* *\\\\\\\\*", QueryPreprocessor.sanitize(" ( ) [ ] { } ~ ^ : \\\\"));
assertEquals("host", p.getString("host")); assertEquals("bundle", p.getString("bundleSymbolicName")); assertEquals(1L, p.getLong("bundleId")); assertEquals("bundle", p.getString("bundleSymbolicName")); assertEquals("sha", p.getString("buildNumber")); assertEquals("sha", p.getString("buildNumber"));
assertEquals("value", json.getString("key")); assertEquals("value", json.getString("key with spaces"));
assertFalse(WorkflowConditionInterpreter.interpret("\'a\' == \'b\'"));
assertTrue(eqListSorted(list(1, 2, 3), sequenceOpt(list(some(1), none(-1), some(2), some(3), none(-1))).get())); assertTrue(eqListSorted(list(), sequenceOpt(list(none(-1), none(-1))).get()));
assertEquals(0, pub.getTracks().length);
assertEquals("1970-01-01T00:00:00.001Z", encodeDate(a, Precision.Fraction).getValue()); assertEquals("1970-01-01T00:00:00.125Z", encodeDate(b, Precision.Fraction).getValue()); assertEquals("1970-01-01T00:00:00.100Z", encodeDate(c, Precision.Fraction).getValue());
assertThat(actual.toJSONString(), SameJSONAs.sameJSONAs(expected.toJSONString()));
assertSame(1, entities.length); assertSame(smil.getBody(), entities[0]); assertSame(2, entities.length); assertSame(smil.getHead(), entities[0]); assertSame(smil.getBody(), entities[1]);
assertThat(expected, SameJSONAs.sameJSONAs(result));
assertEquals(Fraction.getFraction(4, 3), a.get(0)); assertEquals(Fraction.getFraction(16, 9), a.get(1)); assertTrue(operationHandler.getAspectRatio("").isEmpty());
assertEquals("true", map.get("boolean")); assertEquals("String", map.get("string")); assertEquals("1.3", map.get("double"));
assertEquals("name", orderByNameAsc.getFieldName()); assertEquals("date", orderByDateAsc.getFieldName());
assertNotNull(mediaSegments); assertEquals("foo", mediaSegments.getFilePath());
assertEquals("2 hours", Log.getHumanReadableTimeString(7200));
assertTrue(repo.delete(versionSelector)); assertFalse(sampleElemDir.exists()); assertFalse(file.exists()); assertFalse(file.exists()); assertTrue(file.exists());
assertFalse("Provider was not removed", listProvidersService.hasProvider(listName));
assertTrue(AccessControlUtil.equals(a, b));
assertEquals("result", job.getPayload());
assertThat(assetString, SameJSONAs.sameJSONAs(result));
assertEquals("localhost", job.getCreatedHost());
assertEquals("remotehost", job.getProcessingHost());
assertEquals(5, filteredList.size());
assertFalse("Provider was not removed", listProvidersService.hasProvider(listName, "org1"));
assertTrue(WorkflowConditionInterpreter.interpret("3.5 > 2"));
assertFalse(listProvidersScanner.canHandle(wrongFilenameWrongDirectory)); assertFalse(listProvidersScanner.canHandle(wrongFilenameRightDirectory)); assertFalse(listProvidersScanner.canHandle(rightFilenameWrongDirectory)); assertTrue(listProvidersScanner.canHandle(rightFilenameRightDirectory));
assertEquals("test", job.getCreator());
assertEquals(3, r.size()); assertEquals(tuple("b", 2), r.get(1)); assertEquals(0, r.size()); assertEquals(2, r.size()); assertEquals(tuple("b", 2), r.get(1)); assertEquals(2, r.size()); assertEquals(tuple("b", 2), r.get(1)); assertEquals(0, r.size());
assertEquals(1, r1.size()); assertEquals("x", r1.get(0)); assertEquals(0, r2.size());
assertNotNull(new ClientCredentials().toString());
assertEquals(HttpStatus.SC_CREATED, response.getStatus()); assertEquals(HttpStatus.SC_CONFLICT, response.getStatus());
assertEquals(resource, result.getBaseUrl()); assertEquals(before, result.getValidUntil());
assertTrue(repo.delete(noneVersionSelector)); assertFalse(sampleElemDir.exists()); assertFalse(file.exists());
assertEquals(0L, job.getVersion());
assertTrue(file + " should be a directory", file.isDirectory()); assertTrue(file.listFiles().length == 1); assertArrayEquals(bytesFromClasspath, bytesFromRepo);
assertEquals("simple", job.getJobType());
assertTrue(FileSupport.supportsLinking(fileToLink, linkLocation));
assertEquals( "{\\"Statement\\":{\\"Condition\\":{\\"DateGreaterThan\\":1425084379000,\\"DateLessThan\\":1425170777000,\\"IpAddress\\":\\"10.0.0.1\\"},\\"Resource\\":\\"http:\\\\/\\\\/mh-allinone\\\\/\\"}}", PolicyUtils.toJson(policy).toJSONString());
assertEquals("video/mp4", mimeType("video", "mp4").toString()); assertEquals("video/mp4", MimeTypes.parseMimeType("video/mp4").toString());
assertTrue(WorkflowConditionInterpreter.interpret("1.5 < 2"));
assertEquals(1, schedSvc.getKnownRecordings().size()); assertEquals(2, schedSvc.getKnownRecordings().size()); assertEquals(2, schedSvc.getKnownRecordings().size()); assertNotNull(e); assertEquals(1, schedSvc.getKnownRecordings().size());
assertFalse("Provider should not be added without a name", listProvidersService.hasProvider(listName));
assertEquals("before 1 after", WorkflowConditionInterpreter.replaceDefaults("before ${foo:1} after"));
assertEquals(none(Integer.class), f.apply("")); assertNull(r[0]); assertEquals(some(3), f.apply("bla")); assertEquals(new Integer(3), r[0]);
assertEquals(frac43, aspect); assertEquals(frac169, aspect);
assertEquals(4, mapped.size()); assertEquals(2, mapped2.size());
assertEquals(expected, solrQuery);
assertEquals(expected, SolrUtils.clean(test));
assertTrue(dst.isFile()); assertEquals(src.length(), dst.length());
assertTrue(left("a").isLeft()); assertTrue(right("a").isRight()); assertEquals("error", a.left().value()); assertEquals(new Integer(1), b.right().value());
assertEquals("\\"Hello\\"", QueryPreprocessor.sanitize("\\"Hello\\"")); assertEquals("*Hello* \\"World\\"", QueryPreprocessor.sanitize("Hello \\"World\\"")); assertEquals("*Hello* \\"World\\"", QueryPreprocessor.sanitize("Hello \\"World")); assertEquals("*Hello* \\"World Again\\"", QueryPreprocessor.sanitize("Hello \\"World Again")); assertEquals("*He\\\\\\"llo* *Wor\\\\\\"ld*", QueryPreprocessor.sanitize("He\\"llo Wor\\"ld"));
assertFalse("Provider should not be added without a name", listProvidersService.hasProvider(listName));
assertEquals(DISPATCHING, job.getStatus());
assertEquals("2 seconds", Log.getHumanReadableTimeString(2));
assertTrue(scheduled.isEmpty());
assertEquals(uri, job.getUri());
assertEquals(ORG_PROPERTY_VALUE, presetProviderImpl.getProperty(SERIES_ID, ORG_PROPERTY_NAME));
assertEquals(0, JSONUtils.toMap(null).size());
assertEquals(expect, OaiPmhRepository.granulate(Granularity.DAY, d));
assertEquals("org.opencastproject.analytics", json.getObj("service").get(String.class, "type")); assertEquals(true, json.obj("service").get(Boolean.class, "active")); assertEquals(true, json.obj("service").val("active").as(asBoolean));
assertTrue(service.isCompliant(query));
assertEquals(4, segments.size()); assertTrue(segments.contains(Tuple.tuple(0L, 2449L))); assertTrue(segments.contains(Tuple.tuple(4922L, 11284L))); assertTrue(segments.contains(Tuple.tuple(14721L, 15963L))); assertTrue(segments.contains(Tuple.tuple(15963L, 20132L)));
assertEquals(imageFile.getName(), staticFileServiceImpl.getFileName(imageUUID));
assertArrayEquals(array(1, 2, 3, 9, 2, 1), toArray(Integer.class, c));
assertEquals(expResult, result);
assertTrue(orderByNameAsc.equals(new SortCriterionImpl("name", Order.Ascending)));
assertNotNull(e);
assertEquals(Order.Ascending, orderByNameAsc.getOrder()); assertEquals(Order.Descending, orderByNameDesc.getOrder());
assertEquals(ServicesListProvider.SERVICE_STATUS_FILTER_PREFIX + state.toString(), list.get(state.toString()));
assertNotNull(mediaSegments); assertEquals("track-1", mediaSegments.getTrackId());
assertTrue(toList(repeat(1, 0)).isEmpty()); assertEquals(3, toList(repeat(1, 3)).size());
assertEquals(change1, c.change().getB()); assertNotSame(change1, c.change().getB());
assertTrue(AccessControlUtil.equals(a, b));
assertThat(expected, SameJSONAs.sameJSONAs(result).allowingAnyArrayOrdering());
assertNotNull(segments); assertNotNull(segment);
assertEquals(completed, job.getDateCompleted());
assertEquals(serializedDate, SolrUtils.serializeDate(date));
assertEquals(ORG_PROPERTY_VALUE, presetProviderImpl.getProperty("", ORG_PROPERTY_NAME));
assertTrue(RestUtils.parseSortQueryParameter("name:DESC").equals(sortOrders)); assertTrue(RestUtils.parseSortQueryParameter("name:DESC,date:ASC").equals(sortOrders));
assertEquals(ORG_PROPERTY_VALUE, presetProviderImpl.getProperty(null, ORG_PROPERTY_NAME));
assertTrue("Provider has not been registered", listProvidersService.hasProvider(listName)); assertEquals(1, listProvidersService.getAvailableProviders().size()); assertEquals(3, listProvidersService .getList(listName, null, false).size() ); assertEquals(listName, listProvidersService.getAvailableProviders().get(0)); assertEquals("TEST.VALUE.1", listProvidersService .getList(listName, null, false) .get("TEST.KEY.1") );
assertEquals(SERIES_PROPERTY_VALUE, presetProviderImpl.getProperty(SERIES_ID, SERIES_PROPERTY_NAME));
assertEquals("There should be 3 required extensions", 3, result.size());
assertEquals("first/second", UrlSupport.concat("first", "second")); assertEquals("first/second", UrlSupport.concat("first", "/second"));
assertFalse(repo.copy(from, to));
assertEquals(4, jobsListProvider.getList(JobsListProvider.LIST_STATUS, query).size()); assertTrue(StringUtils.startsWith(entry.getValue(), JobsListProvider.JOB_STATUS_FILTER_PREFIX));
assertEquals(2, service.getWorkflowInstances(new WorkflowQuery()).size()); assertEquals(0, serviceRegistry.getChildJobs(op.getId()).size()); assertEquals(1, service.getWorkflowInstances(new WorkflowQuery()).size()); assertEquals(1, service.getWorkflowInstances(new WorkflowQuery()).size()); assertEquals(0, service.getWorkflowInstances(new WorkflowQuery()).size());
assertEquals("start=2007-02-10; end=2009-12-24; name=long time; scheme=W3C-DTF;", a.getValue()); assertEquals(Opt.some(DublinCore.ENC_SCHEME_PERIOD), a.getEncodingScheme()); assertEquals("start=2007-02-10; scheme=W3C-DTF;", b.getValue());
assertNotNull(e);
assertFalse(WorkflowConditionInterpreter.interpret("false AND true"));
assertEquals(jpaJob.toString(), jobString);
assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering());
assertEquals((Float) 1.5F, job.getJobLoad());
assertEquals(2076214452, job.getSignature());
assertNotNull(FileSupport.link(fileToLink, linkLocation, true)); assertTrue(linkLocation.exists());
assertEquals("error", e.left().value()); assertTrue(flatten(e).isLeft()); assertEquals("error", flatten(e).left().value()); assertTrue(flatten(e).isRight()); assertEquals(new Integer(1), flatten(e).right().value());
assertTrue(WorkflowConditionInterpreter.interpret("false OR true"));
assertEquals(expected, solrQuery);
assertEquals(arguments, job.getArguments());
assertNotNull(mediaSegments); assertNotNull(mediaSegments.getMediaSegments()); assertTrue(mediaSegments.getMediaSegments().size() == 3);
assertTrue(currentRecording.isSome()); assertEquals(id + 2, currentRecording.get().getIdentifier().toString()); assertEquals(nowMillis + 2 * oneHourMillis, technicalMetadata.getStartDate().getTime()); assertEquals(nowMillis + 4 * oneHourMillis, technicalMetadata.getEndDate().getTime());
assertNotNull(smilResponse); assertNotNull(smil);
assertFalse(AccessControlUtil.equals(a, b));
assertEquals(1, periods.size()); assertEquals(from, periods.get(0).getA()); assertEquals(to, periods.get(0).getB());
assertTrue(streamingService.streamingUrls.containsKey(defaultTenant)); assertEquals(1, streamingService.streamingUrls.size()); assertEquals(streamingURL, streamingService.streamingUrls.get(defaultTenant).toString());
assertEquals("1 hour 1 minute 1 second", Log.getHumanReadableTimeString(3661));
assertEquals(2, as.length);
assertTrue("Provider has not been registered", listProvidersService.hasProvider(listName, "org1"));
assertEquals("No provider found for organisation <*> with the name " + listName, e.getMessage());
assertEquals(0, schedSvc.getKnownRecordings().size());
assertEquals(SERVICE_TYPE_1, list.get(SERVICE_TYPE_1)); assertEquals(SERVICE_TYPE_2, list.get(SERVICE_TYPE_2)); assertEquals(SERVICE_TYPE_3, list.get(SERVICE_TYPE_3));
assertEquals("do", job.getOperation());
assertEquals(0, result.size());
assertEquals(instance.getName(),name);
assertEquals(created, job.getDateCreated());
assertEquals(expectedJob, job);
assertNotNull(event); assertEquals("Current user is expected to be creator as no other creator has been set explicitly", "Creator", event.getCreator()); assertNotNull(event); assertEquals("Creator has been updated", "Hans", event.getCreator());
assertTrue(i1.isEmpty()); assertEquals(3, i2.size()); assertEquals(3, i3.size());
assertTrue(Incidents.findFailure(r));
assertEquals(instance.getTaxonomyUri(), taxonomyUri);
assertEquals(some("hallo"), some("hello").map(ifThen("hello", "hallo"))); assertEquals(some(-1), some("none").map(ifThen("none", "-1")).bind(Strings.toInt).orError(new RuntimeException())); assertEquals(some(300), some("300").map(ifThen("none", "-1")).bind(Strings.toInt).orError(new RuntimeException()));
assertEquals(2, streamingService.streamingUrls.size()); assertTrue(streamingService.streamingUrls.containsKey(tenant1)); assertTrue(streamingService.streamingUrls.containsKey(tenant2)); assertFalse(streamingService.streamingUrls.containsKey(tenant3)); assertEquals(tenant1Url, streamingService.streamingUrls.get(tenant1).toString()); assertEquals(tenant2Url, streamingService.streamingUrls.get(tenant2).toString());
assertEquals(1, collection.getFields().size()); assertEquals(third, collection.getFields().get(0));
assertEquals(testMap.size(), sortedMap.size()); assertEquals(value, entry.getValue()); assertEquals(testMap.size(), sortedMap.size()); assertEquals(value, entry.getValue());
assertEquals(endpoint.getStatus().getStatus(), SC_NO_CONTENT); assertEquals(endpoint.getStatus().getStatus(), SC_SERVICE_UNAVAILABLE);
assertEquals(orderByNameAsc.hashCode(), new SortCriterionImpl("name", Order.Ascending).hashCode());
assertEquals("before false after", WorkflowConditionInterpreter.replaceDefaults("before ${foo} after"));
assertTrue(currentRecording.isSome()); assertEquals(id + 1, currentRecording.get().getIdentifier().toString()); assertEquals(nowMillis - oneHourMillis, technicalMetadata.getStartDate().getTime()); assertEquals(nowMillis + oneHourMillis, technicalMetadata.getEndDate().getTime());
assertEquals("nowhere@opencast.org", json.get("email")); assertEquals("Opencast Student", json.get("name")); assertEquals("opencast", json.get("provider")); assertEquals("ROLE_USER_92623987_OPENCAST_ORG", json.get("userrole")); assertEquals("92623987@opencast.org", json.get("username"));
assertTrue(option.isSome()); assertEquals(bytesFromClasspath.length, bytesFromRepo.length);
assertEquals(5, mergedSegments.size());
assertTrue("The file can not be parsed.", e.getCause() instanceof UnmarshalException);
assertTrue(isParent(b, a)); assertTrue(isParent(c, a)); assertFalse(isParent(d, a)); assertFalse(isParent(d, c)); assertFalse(isParent(a, b)); assertFalse(isParent(a, a));
assertEquals("read", s);
assertEquals((Long) 3L, job.getParentJobId());
assertNotNull(messageReceiverImpl.receiveSerializable("", DestinationType.Queue)); assertNull(messageReceiverImpl.getSession()); assertNull(messageReceiverImpl.getMessageProducer());
assertTrue(penv.tx(TestDto.findAll).isEmpty()); assertEquals("value", penv.tx(Queries.find(TestDto.class, dto.getId())).get().getValue()); assertEquals("new-value", penv.tx(Queries.find(TestDto.class, dto.getId())).get().getValue());
assertSame(mapped.getClass(), list.getClass()); assertTrue(list.contains("one")); assertTrue(list.contains("two")); assertTrue(mapped.contains("oneone")); assertTrue(mapped.contains("twotwo")); assertEquals(2, list.size()); assertEquals(2, mapped.size());
assertFalse(service.isCompliant(query));
assertEquals("v1.5.0", json.get("default")); assertTrue(version.contains("v1.0.0")); assertTrue(version.contains("v1.1.0")); assertTrue(version.contains("v1.2.0")); assertTrue(version.contains("v1.3.0")); assertTrue(version.contains("v1.4.0")); assertTrue(version.contains("v1.5.0")); assertEquals(6, version.size());
assertEquals("bf344862e1d317b246cb4336525146a4312081925c9641efaa5ebf272b944d78", SHA256Util.digest(testString, "abc123")); assertEquals("5169ea7246cf084413228c5ca3590b9045e3a53a625074530ad222857c6d3b7c", SHA256Util.digest(testString, "123abc"));
assertEquals("1", as[0]);
assertFalse(Incidents.findFailure(r));
assertTrue(Incidents.findFailure(r));
assertThat(expected.toJSONString(), SameJSONAs.sameJSONAs(userSetting.toJson().toJson()));
assertEquals("1-2-3", Collections.mkString(l, "-"));
assertEquals(1, service.getKnownAgents().size()); assertEquals(1, service.getKnownAgents().size()); assertNotNull(e); assertEquals(1, service.getKnownAgents().size());
assertTrue(head(list).fold(match)); assertFalse(head(empty).fold(match));
assertTrue(DublinCoreUtil.equals(a, b));
assertEquals(workflowDefinitions.size(), jobsListProvider.getList(JobsListProvider.LIST_WORKFLOW, query).size()); assertTrue(match);
assertEquals(2, service.getWorkflowInstances(new WorkflowQuery()).size()); assertEquals(0, service.getWorkflowInstances(new WorkflowQuery()).size()); assertEquals(0, serviceRegistry.getChildJobs(op.getId()).size());
assertEquals(expResult, result);
assertEquals(dimension(100, 100), scaleToFit(dimension(100, 100), dimension(10, 10))); assertEquals(dimension(50, 100), scaleToFit(dimension(100, 100), dimension(10, 20))); assertEquals(dimension(100, 50), scaleToFit(dimension(100, 100), dimension(20, 10))); assertEquals(dimension(100, 1), scaleToFit(dimension(100, 500), dimension(1000, 10)));
assertTrue(streamingService.streamingUrls.containsKey(defaultTenant)); assertEquals(1, streamingService.streamingUrls.size()); assertEquals(completeStreamingUrl, streamingService.streamingUrls.get(defaultTenant).toString());
assertEquals(expected, actual);
assertEquals("TEST.VALUE.1", dictionary.get("TEST.KEY.1")); assertEquals("TEST.VALUE.2", dictionary.get("TEST.KEY.2")); assertEquals("TEST.VALUE.3", dictionary.get("TEST.KEY.3"));
assertEquals(1, periods.size()); assertEquals(from, periods.get(0).getA()); assertEquals(to, periods.get(0).getB());
assertTrue(operationHandler.getResolutions("").isEmpty()); assertEquals(Fraction.getFraction(320, 240), res.get(0)); assertEquals(Fraction.getFraction(1280, 720), res.get(1)); assertEquals(Fraction.getFraction(1920, 1080), res.get(2));
assertSame(0, response.getEntitiesCount()); assertSame(1, response.getEntitiesCount()); assertSame(2, response.getEntitiesCount());
assertTrue(job.isDispatchable());
assertTrue("Translatable property not read correctly", listProvidersService.isTranslatable(listName));
assertThat(actual.toJSONString(), SameJSONAs.sameJSONAs(expected.toJSONString()));
assertTrue(privilegesByRole.getJSONObject(ROLE_ADMIN).getBoolean(ACTION_READ)); assertTrue(privilegesByRole.getJSONObject(ROLE_ADMIN).getBoolean(ACTION_WRITE)); assertTrue(privilegesByRole.getJSONObject(ROLE_STUDENT).getBoolean(ACTION_READ)); assertFalse(privilegesByRole.getJSONObject(ROLE_STUDENT).getBoolean(ACTION_WRITE));
assertEquals("test", jobProducer.getJobType());
assertTrue(WorkflowConditionInterpreter.interpret("true"));
assertThat(expected, SameJSONAs.sameJSONAs(result));
assertTrue(mlist(array(1, 2, 3, 4, 5)).take(0).value().isEmpty()); assertEquals(3, mlist(array(1, 2, 3, 4, 5)).take(3).value().size()); assertEquals(5, mlist(array(1, 2, 3, 4, 5)).take(5).value().size()); assertEquals(5, mlist(array(1, 2, 3, 4, 5)).take(10).value().size());
assertEquals(orderByNameAsc, SortCriterionImpl.parse("name:ASC")); assertEquals(orderByDateDesc, SortCriterionImpl.parse("date:DESC"));
assertEquals((Long) 100L, job.getQueueTime());
assertEquals(keyId, nameValuePair.getValue()); assertEquals(policyValue, nameValuePair.getValue()); assertEquals(signatureValue, nameValuePair.getValue()); assertTrue("Didn\'t find the organization value.", foundOrg); assertTrue("Didn\'t find the policy value.", foundPolicy); assertTrue("Didn\'t find the signature value.", foundSignature);
assertTrue(mlist(array(1, 2, 3, 4, 5)).drop(10).value().isEmpty()); assertEquals(3, mlist(array(1, 2, 3, 4, 5)).drop(2).value().size()); assertEquals(1, mlist(array(1, 2, 3, 4, 5)).drop(4).value().size()); assertEquals(5, mlist(array(1, 2, 3, 4, 5)).drop(0).value().size());
assertEquals(1, counter[0]);
assertSame(smil.getBody(), response.getEntity()); assertSame(1, response.getEntities().length); assertSame(smil.getBody(), response.getEntities()[0]);
assertEquals(DOUBLE_VALUE_2, mKeyValue.getValue(), 0);
assertEquals(DOUBLE_VALUE_1, mKeyValue.getValue(), 0);
assertTrue(authenticator.failed()); assertTrue(authenticator.failed()); assertTrue(authenticator.succeeded());
assertEquals((byte) 0x4A, Assembler.processDirectInstructionWithConstantOperand(new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get("ldc"), 10L, null, null, null, 1)));
assertEquals(new Byte((byte) 0xF5), result.get(0)); assertEquals(1, result.size());
assertEquals(new Byte((byte) 0x21), result.get(0)); assertEquals(new Byte((byte) 0xFB), result.get(1)); assertEquals(2, result.size());
assertThat(captor.getValue().getBrand()).isEqualTo(brand);
assertThat(currentShoppingCartItem.getQuantity()).isEqualTo(2);
assertThat(actualBrand).isEqualTo(BRAND);
assertNull(presenter.getChild(OrderPresenter.SLOT_CART_ITEMS));
assertNull(presenter.getChild(OrderPresenter.SLOT_CART_ITEMS));
assertThat(captor.getValue().getExistingItem()).isEqualTo(secondItem); assertThat(captor.getValue().getNewQuantity()).isEqualTo(6);
assertThat(addedItem.getProductDto()).isEqualTo(productToAdd); assertThat(addedItem.getQuantity()).isEqualTo(itemQuantity);
assertNotNull(presenter.getChild(OrderPresenter.SLOT_CART_ITEMS));
assertThat(actualBrand).isEqualTo(BRAND);
assertEquals(0, calendar.get(Calendar.MONTH)); assertEquals(2016, calendar.get(Calendar.YEAR)); assertEquals(calendar.get(Calendar.MONTH), expectedMonth); assertEquals(dayBeforeChange, calendar.get(Calendar.DAY_OF_MONTH)); assertEquals(hourBeforeChange, calendar.get(Calendar.HOUR_OF_DAY)); assertEquals(minuteBeforeChange, calendar.get(Calendar.MINUTE)); assertEquals(yearBeforeChange, calendar.get(Calendar.YEAR));
assertEquals(FilterFile.toString(filter), expectedXML);
assertEquals(filter.includePath(path), true);
assertEquals(filter.ignorePath(path), false);
assertEquals(filter.includeFilename(fileName), true);
assertEquals(filter.includeProperty(property), true);
assertNotNull(reposConfig, "We had expected to get a configuration for a single repository."); assertEquals(repository.validConnection(), true, "We have expected to get an connection");
assertEquals(filter.ignoreProperty(property), false);
assertNotNull(rconfig, "We had expected to get an instance of RepositoryConfiguration");
assertEquals(repositories.getRepository().size(), 1); assertEquals(repository.getId(), "default"); assertEquals(repository.getFilenames().getIncludes().size(), 1); assertEquals(repository.getFilenames().getExcludes().size(), 0); assertEquals(repository.getPaths().getIncludes().size(), 1); assertEquals(repository.getPaths().getExcludes().size(), 0); assertEquals(repository.getProperties().getIncludes().size(), 1); assertEquals(repository.getProperties().getExcludes().size(), 0);
assertEquals(filter.ignoreFilename(fileName), false);
assertEquals(user, ((SimpleCredentials) JahiaLoginModule.getCredentials(user, (String) null)).getUserID()); assertEquals(user, ((SimpleCredentials) JahiaLoginModule.getCredentials(user, null, null)).getUserID());
assertEquals("Expected URL value for input \'" + input + "\' should be \'" + expectedResult + "\'", expectedResult, new VanityUrl(input, null, null).getUrl());
assertEquals("org.jahia.modules", info.getGroupId()); assertEquals("article", info.getSymbolicName()); assertEquals("2.0.2", info.getVersion()); assertEquals("org.jahia.modules/article/2.0.2", info.getKey()); assertEquals("Jahia Article", info.getDisplayName()); assertEquals("f1bffece4ed8f547d99685b65f9c9570", info.getChecksum());
assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertNull(info);
assertEquals(null, info.getGroupId()); assertEquals("org.apache.commons.codec", info.getSymbolicName()); assertEquals("1.8.0", info.getVersion()); assertEquals("org.apache.commons.codec/1.8.0", info.getKey()); assertEquals("Commons Codec", info.getDisplayName());
assertEquals("org.jahia.modules", info.getGroupId()); assertEquals("external-provider-modules", info.getSymbolicName()); assertEquals("3.1.0.SNAPSHOT", info.getVersion()); assertEquals("org.jahia.modules/external-provider-modules/3.1.0.SNAPSHOT", info.getKey()); assertEquals("Jahia External Provider Modules", info.getDisplayName());
assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), null)); assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), new Hashtable<String, String>()));
assertEquals(JahiaLoginModule.SYSTEM, ((SimpleCredentials) JahiaLoginModule.getSystemCredentials()).getUserID()); assertEquals(JahiaLoginModule.SYSTEM, ((SimpleCredentials) JahiaLoginModule.getSystemCredentials(null, (String) null)).getUserID()); assertEquals(JahiaLoginModule.SYSTEM, ((SimpleCredentials) JahiaLoginModule.getSystemCredentials(null, null, null)).getUserID());
assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertNull(httpClient.getState().getProxyCredentials(AuthScope.ANY)); assertNull(httpClient.getHostConfiguration().getProxyHost());
assertEquals("Valve count is wrong", count + 1, pipeline.getValves().length); assertEquals("Valve is not appended to the end", pipeline.getValves().length - 1, getPosition(myValve.getId())); assertEquals("Valve count is wrong", count, pipeline.getValves().length); assertEquals("Valve is not at the end", count - 1, getPosition(myValve.getId()));
assertEquals("org.jahia.modules", info.getGroupId()); assertEquals("article", info.getSymbolicName()); assertEquals("2.0.0", info.getVersion()); assertNull(info.getGroupId()); assertEquals("article", info.getSymbolicName()); assertEquals("2.0.0", info.getVersion());
assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertNull(info);
assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers));
assertEquals("3600", exprEval.asString().substring(0,4));
assertEquals("2011-01-01T00:00:00.000+09:00", exprEval.asString());
assertEquals(3, diffUtilCallback.getOldListSize());
assertEquals(4, diffUtilCallback.getNewListSize());
assertTrue(UTILS.hasOntologyFormatExtension("fileName.rdf"));
assertTrue(zObjectPropertyList.contains(zObj));
assertTrue(supers.contains(zClass1));
assertEquals(e.getMessage(), "class Invalid class name, it doesn\'t follow the convention.");
assertTrue(zdataproperty.equals(zdataproperty2));
assertFalse(UTILS.isVersionPatternValid("0.0.0.0.0"));
assertEquals(keyId, restored.getId()); assertEquals(2, restored.getSession().getAttribute("count")); assertEquals("value", ((Map<String, String>)session.getSession().getAttribute("map")).get("key"));
assertEquals(session.getMaxInactiveInterval(), 0); assertEquals(session.getCreationTime(), 1); assertEquals(session.getLastAccessedTime(), 2); assertEquals(session.isNew(), true); assertEquals(session.isValid(), true); assertEquals(session.getThisAccessedTime(), 3);
assertEquals(1, keys.length); assertEquals(keyId, keys[0]);
assertEquals(loadedSession.getId(), keyId);
assertNull(session);
assertEquals(session, loaded);
assertNull(loaded);
assertEquals(labelsArgument.getValue().getLabels().size(), 2); assertTrue(labelsArgument.getValue().getLabels().contains(indexLabel)); assertTrue(labelsArgument.getValue().getLabels().contains(statusCodeLabel));
assertEquals(1, size);
assertEquals(2, entities.size()); assertTrue(entities.stream() .map(e -> e.getKey().getName()) .collect(Collectors.toList()) .containsAll(Arrays.asList("count", keyId)));
assertEquals("The setOnClickListener doesn\'t have the correct onClickListener object", ((TestAdapter) mMultiChoiceAdapter) .getOnClickListener(), clickListenerCapture.getValue());
assertEquals("The setOnClickListener doesn\'t have the correct onClickListener object", ((TestAdapter) mMultiChoiceAdapter) .getOnClickListener(), clickListenerCapture.getValue());
assertArrayEquals(expectedArgs, outArgs); assertTrue(outArgs[0] instanceof TextView);
assertTrue(mappingManager.mappingWaitings.containsKey("user")); assertNotNull(addedWaiting); assertEquals("user", addedWaiting.objectName); assertEquals("user", addedWaiting.call); assertEquals(carpaccioAction, addedWaiting.carpaccioAction); assertEquals(view, addedWaiting.view);
assertEquals("hello florent", pseudo);
assertTrue(mappingManager.mappedObjects.containsKey(name)); assertEquals(user, mappingManager.mappedObjects.get(name)); assertEquals("nameToString", carpaccioAction.getValues()[0]);
assertEquals(Float.valueOf(2.1f), CarpaccioHelper.stringToFloat("2.1"));
assertTrue(mappingManager.mappedObjects.containsKey(name)); assertEquals(user, mappingManager.mappedObjects.get(name)); assertEquals("florent", carpaccioAction.getValues()[0]);
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertFalse(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.get(0) instanceof java.util.ArrayList); assertTrue(carpaccioManager.registerControllers.get(1) instanceof java.util.HashMap);
assertTrue(MappingManager.isCallMapping(call));
assertEquals("www.MyImage",value);
assertNull(CarpaccioHelper.stringToDouble("aa"));
assertNull(CarpaccioHelper.callMethod(testObject, method, "getName", view, new Object[]{arg1}));
assertEquals(Double.valueOf(2), CarpaccioHelper.stringToDouble("2"));
assertTrue(carpaccioManager.isCarpaccioControlledView(view));
assertTrue(carpaccioManager.carpaccioViews.contains(view));
assertEquals(linearLayout, CarpaccioHelper.findParentOfClass(view, LinearLayout.class));
assertNull(pseudo);
assertTrue(carpaccioManager.carpaccioViews.contains(view)); assertFalse(carpaccioManager.carpaccioViews.contains(viewGroup));
assertEquals(callback,mappingManager.mappingManagerCallback);
assertEquals("florent",value);
assertEquals(adapter, carpaccioManager.registerAdapters.get("users"));
assertTrue(carpaccioManager.carpaccioSubViews.get(viewGroup).contains(view));
assertEquals("3",value);
assertFalse(carpaccioManager.isCarpaccioControlledView(view));
assertTrue(mappingManager.mappingWaitings.containsKey("user")); assertNotNull(addedWaiting); assertEquals("user", addedWaiting.objectName); assertEquals("user.getName()", addedWaiting.call); assertEquals(carpaccioAction, addedWaiting.carpaccioAction); assertEquals(view, addedWaiting.view);
assertNotNull(CarpaccioHelper.callMethod(testObject, method, "getName", view, new Object[]{arg1}));
assertEquals("ThisIsMyToString",value);
assertTrue(carpaccioManager.isCarpaccioControlledView(view));
assertFalse(carpaccioManager.isCarpaccioControlledView(view));
assertNull(pseudo);
assertTrue(carpaccioManager.registerControllers.contains(controller));
assertArrayEquals(expectedClasses, outClasses);
assertFalse(MappingManager.isCallMapping(call));
assertArrayEquals(expectedArgs, outArgs); assertTrue(outArgs[0] instanceof TextView);
assertNotNull(method);
assertEquals(carpaccio, CarpaccioHelper.findParentCarpaccio(view));
assertFalse(MappingManager.isCallMapping(call));
assertNull(CarpaccioHelper.stringToInt("aa"));
assertNull(pseudo);
assertEquals("myFunction", CarpaccioHelper.getFunctionName(tag));
assertArrayEquals(expectedStrings, CarpaccioHelper.getAttributes(tag));
assertTrue(CarpaccioHelper.isNumber(Integer.class)); assertTrue(CarpaccioHelper.isNumber(Float.class)); assertTrue(CarpaccioHelper.isNumber(Double.class)); assertTrue(CarpaccioHelper.isNumber(Long.class));
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertFalse(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.get(0) instanceof java.util.ArrayList); assertTrue(carpaccioManager.registerControllers.get(1) instanceof java.util.HashMap);
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertFalse(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.get(0) instanceof java.util.ArrayList); assertTrue(carpaccioManager.registerControllers.get(1) instanceof java.util.HashMap);
assertArrayEquals(expectedArgs, outArgs); assertTrue(outArgs[0] instanceof TextView);
assertTrue(carpaccioManager.carpaccioViews.contains(view));
assertTrue(carpaccioManager.isCarpaccioControlledView(view));
assertEquals("getName", MappingManager.getFunctionName("getName()"));
assertArrayEquals(expectedClasses, outClasses);
assertEquals("setFont(font);setText($user.name)", tmpTag);
assertNull(CarpaccioHelper.removeTag(view, "setText"));
assertNull(object);
assertArrayEquals(expectedStrings, CarpaccioHelper.trim(inString));
assertNotNull(object); assertTrue(object instanceof ArrayList);
assertArrayEquals(expectedStrings, CarpaccioHelper.getAttributes(tag));
assertEquals("IamAnImage",value);
assertEquals(callback,mappingManager.getMappingManagerCallback());
assertNotNull(tmpTag);
assertEquals(Long.valueOf(3), CarpaccioHelper.stringToLong("3"));
assertEquals(Integer.valueOf(1), CarpaccioHelper.stringToInt("1"));
assertEquals(expected,textView.getTag());
assertTrue(mappingManager.mappedObjects.containsKey(name)); assertEquals(user, mappingManager.mappedObjects.get(name)); assertEquals("florent", carpaccioAction.getValues()[0]);
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.isEmpty());
assertNull(objectAndMethod);
assertTrue(carpaccioManager.carpaccioViews.contains(view));
assertEquals(expected, CarpaccioHelper.removeTag(view, "setText(florent)"));
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertFalse(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.get(0) instanceof java.util.HashMap);
assertEquals("florent",value);
assertFalse(MappingManager.isCallMapping(call));
assertNotNull(objectAndMethod); assertEquals(testObject, objectAndMethod.getObject()); assertEquals("setText", objectAndMethod.getMethod().getName()); assertEquals(2, objectAndMethod.getMethod().getParameterTypes().length);
assertTrue(carpaccioManager.isCarpaccioControlledView(view));
assertEquals("florent", pseudo);
assertTrue(mappingManager.mappedObjects.containsKey(name)); assertEquals(user, mappingManager.mappedObjects.get(name));
assertNull(CarpaccioHelper.findParentOfClass(view, RelativeLayout.class));
assertTrue(carpaccioManager.registerControllers.isEmpty()); assertFalse(carpaccioManager.registerControllers.isEmpty()); assertTrue(carpaccioManager.registerControllers.get(0) instanceof java.util.ArrayList);
assertNull(CarpaccioHelper.stringToFloat("aa"));
assertEquals("getName", MappingManager.getFunctionName("name"));
assertThat(new Path("").getParent(), nullValue()); assertThat(new Path("bar").getParent().isEmptyPath(), is(true)); assertThat(new Path("foo/bar").getParent().toString(), is("foo"));
assertThat(new Path("").append(new Path("")).toString(), is("")); assertThat(new Path("foo").append(new Path("bar")).toString(), is("foo/bar")); assertThat(new Path("foo/bar").append(new Path("")).toString(), is("foo/bar"));
assertThat(new Path("/").getDepth(), is(0)); assertThat(new Path("/foo").getDepth(), is(1)); assertThat(new Path("/foo/bar").getDepth(), is(2));
assertThat(new Path("foo").getName(), is("foo")); assertThat(new Path("foo/bar").getName(), is("bar"));
assertEquals( exception.getMessage(), "Attempting to access primitive type int from the React context. Access using the boxed type instead" );
assertEquals( exception.getMessage(), "Attempting to retrieve React context with type interface java.lang.Runnable and qualifier \'\' but no such context exists with that type and name" );
assertEquals( exception.getMessage(), "Attempting to retrieve React context with type interface java.lang.Runnable and qualifier \'someQual\' but no such context exists with that type and name" );
assertThat(originalDigest, not(equalTo(stream.getDigestString())));
assertEquals( "killmap.runners.communication.WorkOrderTest$DummyTestCase#testThatPasses,3,100", (new WorkOrder(passingTest, 3, (long)100)).toString());
assertEquals("", Outcome.normalizeStackTrace("")); assertEquals("failure message", Outcome.normalizeStackTrace(" \\nfailure message\\t\\r\\n ")); assertEquals("one two three", Outcome.normalizeStackTrace("one \\n \\ttwo\\r\\n\\t three\\n"));
assertEquals(stream1.getDigestString(), stream2.getDigestString()); assertEquals(stream1.getDigestString(), stream2.getDigestString());
assertEquals( csvLine("PASS",Long.toString(result.getRunTime()),"0123456789abcdef","",""), o.toString()); assertEquals( csvLine("PASS",Long.toString(result.getRunTime()),"0123456789abcdef","10 11",""), o.toString());
assertEquals("(IDLorg.blah.New;[Lorg.blah.New$Inner;)Lorg.blah.New$Other;", mOuter.renameMethodDesc("(IDLcom.pack.Old;[Lcom.pack.Old$Inner;)Lcom.pack.Old$Other;"));
assertEquals("", mLog.getOut()); assertEquals("", mLog.getErr()); assertEquals("", mLog.getOut()); assertEquals("Test 44\\n", mLog.getErr());
assertEquals("", mLog.getOut()); assertEquals("", mLog.getErr()); assertEquals("", mLog.getOut()); assertEquals("Test 42\\n", mLog.getOut()); assertEquals("", mLog.getErr());
assertEquals("", mLog.getOut()); assertEquals("", mLog.getErr()); assertEquals("", mLog.getOut()); assertTrue(mLog.getErr().startsWith("Test 44\\njava.lang.Exception: My Exception"));
assertArrayEquals(new String[] { "mock_android.view.View", "mock_android.view.ViewGroup", "mock_android.widget.LinearLayout", "mock_android.widget.TableLayout", }, found.keySet().toArray()); assertNotNull("No value for " + key, value); assertEquals(key, AsmAnalyzer.classReaderToClassName(value));
assertEquals("", mLog.getOut()); assertEquals("", mLog.getErr()); assertEquals("Test 43\\n", mLog.getOut()); assertEquals("", mLog.getErr());
assertNotNull(cr); assertEquals("mock_android/view/ViewGroup$LayoutParams", cr.getClassName()); assertArrayEquals(new String[] { "mock_android.view.ViewGroup$LayoutParams" }, found.keySet().toArray()); assertArrayEquals(new ClassReader[] { cr }, found.values().toArray());
assertArrayEquals(new String[0], cv.getMethodsFound()); assertFalse(cv.hasNativeMethods());
assertArrayEquals(new String[] { "native_method" }, cv.getMethodsFound()); assertTrue(cv.hasNativeMethods());
assertEquals(23432, new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 23432).getAsInt()); assertEquals(-23432, new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) -23432).getAsInt());
assertArrayEquals(new short[] {(short) -27834, 23423, 0, -2, 3}, test.getArray());
assertEquals(0x12345678AABBCCDDL, asInputStream(0x12, 0x34, 0x56, 0x78, 0xAA, 0xBB, 0xCC, 0xDD).readLong(JBBPByteOrder.BIG_ENDIAN));
assertArrayEquals(new byte[] {3, 2, 1,}, in.readByteArray(3, JBBPByteOrder.LITTLE_ENDIAN));
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_NAMED, 0}, compiled);
assertEquals(176552.47f, asInputStreamMSB0(0x12, 0x34, 0x56, 0x78).readFloat(JBBPByteOrder.BIG_ENDIAN), TestUtils.FLOAT_DELTA);
assertArrayEquals(new long[] {-278349872364L, 12223423987439324L, 0L, -2782346872343L, 37238468273412L}, test.getArray());
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_LONG, compiled[0]);
assertFalse(dsl.hasOpenedStructs()); assertTrue(dsl.hasOpenedStructs()); assertFalse(dsl.hasOpenedStructs());
assertTrue(ex.getToken().toString().contains("somewrong"));
assertEquals(1.7378244E34f, asInputStream(0x12, 0x34, 0x56, 0x78).readFloat(JBBPByteOrder.LITTLE_ENDIAN), TestUtils.FLOAT_DELTA);
assertEquals(src, JBBPCompiler.compile(src).getSource());
assertArrayEquals(new byte[] {(byte) 0x01, (byte) 0xFF}, BeginBin().Bit(1).Align().Byte(0xFF).End().toByteArray());
assertEquals(etalon[i], test.getAsInt(i));
assertSame(field2, map.findLastFieldForType(JBBPFieldInt.class)); assertNull(map.findLastFieldForType(JBBPFieldLong.class));
assertEquals(5, test.size());
assertEquals("val:(a+b) hello;", Begin().Val("hello", "a+b").End());
assertEquals((int) 23432498237439L, new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), 23432498237439L).getAsInt()); assertEquals((int) -2343249987234L, new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), -2343249987234L).getAsInt());
assertEquals(0L, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), false).getAsInvertedBitOrder()); assertEquals(1L, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), true).getAsInvertedBitOrder());
assertNull(JBBPFieldString.reverseBits(null));
assertArrayEquals(new byte[] { JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED, JBBPCompiler.CODE_STRUCT_START | JBBPCompiler.FLAG_NAMED | JBBPCompiler.FLAG_ARRAY, 2, JBBPCompiler.CODE_BYTE | JBBPCompiler.FLAG_NAMED, JBBPCompiler.CODE_BYTE | JBBPCompiler.FLAG_NAMED, JBBPCompiler.CODE_STRUCT_END, 1 }, compiled.getCompiledData());
assertFalse(new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 0).getAsBool());
assertEquals(5, compiled.length); assertEquals(JBBPCompiler.CODE_BYTE, compiled[0] & 0xFF); assertEquals(JBBPCompiler.CODE_STRUCT_START | JBBPCompiler.FLAG_NAMED, compiled[1]); assertEquals(JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED, compiled[2] & 0xFF); assertEquals(JBBPCompiler.CODE_STRUCT_END, compiled[3]); assertEquals(1, compiled[4]); assertEquals(2, block.findFieldOffsetForPath("some.hello"));
assertFalse(new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 0).getAsBool());
assertEquals(etalon[i], test.getAsInt(i));
assertSame(field3, struct.findLastFieldForType(JBBPFieldByte.class)); assertSame(field2, struct.findLastFieldForType(JBBPFieldInt.class)); assertNull(struct.findLastFieldForType(JBBPFieldArrayByte.class));
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_INT, compiled[0]);
assertEquals("ABC", asInputStream(0x03, 65, 66, 67).readString(JBBPByteOrder.BIG_ENDIAN));
assertEquals(etalon[i], test.getAsLong(i));
assertSame(field1, struct.findFieldForName("field1")); assertSame(field2, struct.findFieldForName("field2")); assertSame(field3, struct.findFieldForName("field3")); assertNull(struct.findFieldForName("field4"));
assertEquals(2, compiled.getCompiledData().length); assertNotNull(field); assertEquals(0, field.getFieldOffsetInCompiledBlock()); assertEquals(JBBPCompiler.CODE_BYTE | JBBPCompiler.FLAG_NAMED | JBBPCompiler.FLAG_WIDE, compiled.getCompiledData()[0] & 0xFF); assertEquals(JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM, compiled.getCompiledData()[1] & 0xFF);
assertEquals(5, counter.intValue());
assertEquals(etalon[i], test.getAsInt(i));
assertTrue(new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), true).getAsBool());
assertArrayEquals(new String[] {null, "", "ABC", "", ""}, asInputStream(0xFF, 0x00, 3, 65, 66, 67, 0, 0).readStringArray(-1, JBBPByteOrder.BIG_ENDIAN));
assertSame(message, ex.getMessage()); assertNotNull(message, ex.getMessage());
assertTrue(new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), 123, JBBPBitNumber.BITS_1).getAsBool());
assertEquals(" \\n .0x01\\n ;Hello", writer.Close().toString());
assertEquals(4, compiled.length); assertEquals(JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED | JBBPCompiler.FLAG_LITTLE_ENDIAN | JBBPCompiler.FLAG_ARRAY, compiled[0] & 0xFF); assertEquals(0, block.findFieldOffsetForPath("hello")); assertEquals(768, JBBPUtils.unpackInt(compiled, new JBBPIntCounter(1)));
assertEquals(5, counter.getAndDecrement()); assertEquals(4, counter.getAndDecrement());
assertEquals(0, buffer.size()); assertEquals(1, buffer.size());
assertEquals(4, counter.get());
assertEquals(6, ex.getPosition());
assertArrayEquals(new byte[] {0x01, 0x02, 0x03, 0x04}, BeginBin().Int(0x01020304).End().toByteArray());
assertEquals(2, compiled.length); assertEquals(JBBPCompiler.CODE_BIT, compiled[0]); assertEquals(1, compiled[1]);
assertFalse(new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 0).getAsBool());
assertEquals("test.field", test.getFieldPath()); assertEquals("field", test.getFieldName()); assertNotNull(test.getNameInfo()); assertEquals(999, test.getNameInfo().getFieldOffsetInCompiledBlock()); assertEquals(JBBPBitNumber.BITS_1, test.getBitWidth());
assertTrue(map.pathExists("tESt.teSt")); assertFalse(map.pathExists("test.test1")); assertFalse(map.pathExists("test"));
assertSame(field, map.findFieldForNameAndType("tESt", JBBPFieldInt.class)); assertNull(map.findFieldForNameAndType("test", JBBPFieldByte.class)); assertNull(map.findFieldForNameAndType("test1", JBBPFieldInt.class));
assertEquals(0x10E060A020C04080L, new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), 0x0102030405060708L).getAsInvertedBitOrder());
assertSame(field2, struct.findFieldForNameAndType("field2", JBBPFieldInt.class)); assertNull(struct.findFieldForNameAndType("field2", JBBPFieldByte.class)); assertNull(struct.findFieldForNameAndType("field1", JBBPFieldInt.class));
assertArrayEquals(new String[] {"012",null,"ABC"}, test.getArray());
assertEquals(5, test.size());
assertEquals(0, out.getCounter()); assertEquals(1, out.getCounter()); assertEquals(1, out.getCounter()); assertArrayEquals(new byte[] {0x12}, outBiuffer.toByteArray());
assertNotNull(clazzField); assertTrue(ex.toString().contains(clazzField.toString()));
assertEquals(etalon[i], test.getAsInt(i));
assertEquals(0, JBBPUtils.makeMask(0)); assertEquals(1, JBBPUtils.makeMask(1)); assertEquals(3, JBBPUtils.makeMask(2)); assertEquals(0x7F, JBBPUtils.makeMask(100)); assertEquals(0xFFFF, JBBPUtils.makeMask(65535));
assertNotNull(JBBPCompiler.compile("bit:((1+2-3)*4/(5<<6>>7)>>>3%1&89|22^34-~45) a;"));
assertArrayEquals(new byte[] {JBBPCompiler.CODE_SKIP, 0}, JBBPCompiler.compile("skip:0;").getCompiledData());
assertTrue(JBBPUtils.arrayEndsWith(new byte[0], new byte[0])); assertTrue(JBBPUtils.arrayEndsWith(new byte[111], new byte[0]));
assertTrue(new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), 32423).getAsBool());
assertSame(field2, struct.findFieldForPathAndType("struct.field2", JBBPFieldInt.class)); assertNull(struct.findFieldForPathAndType("field2", JBBPFieldByte.class)); assertNull(struct.findFieldForPathAndType("field1", JBBPFieldInt.class));
assertEquals(234324, new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), 234324).getAsInt()); assertEquals(-234324, new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), -234324).getAsInt());
assertNotNull(numericFieldMap); assertNotNull(compiledBlock);
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsBool());
assertEquals(etalon[i], test.getAsLong(i));
assertEquals(1, mapped.a); assertEquals(2, mapped.b); assertEquals(3, mapped.c);
assertEquals(12L, new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), 12, JBBPBitNumber.BITS_6).getAsLong()); assertEquals(-12L & 0xFFL, new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), -12, JBBPBitNumber.BITS_5).getAsLong());
assertSame(field, map.findFieldForName("tESt")); assertNull(map.findFieldForName("test1"));
assertEquals(etalon[i], test.getAsInt(i));
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED, compiled[0]); assertEquals(0, block.findFieldOffsetForPath("hello"));
assertEquals(2, test.size());
assertNull(JBBPUtils.array2hex(null)); assertEquals("[0o001, 0o002, 0o003, 0o377]", JBBPUtils.array2oct(new byte[] {1, 2, 3, (byte) 0xFF}));
assertEquals("hello", new JBBPTextWriter(makeWriter(), JBBPByteOrder.BIG_ENDIAN, "hello", 11, "", "", "", "", "").getLineSeparator());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_NAMED, (byte) 0x81, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, compiled);
assertEquals(etalon[index++], f.getAsInt());
assertTrue(etalon[index++] == f.getAsBool());
assertArrayEquals(new byte[] {(byte) 0xFF}, writeString(JBBPByteOrder.LITTLE_ENDIAN, null));
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR, 0}, compiled);
assertEquals(3, expr.eval(inStream, 0, compiledBlock, null));
assertEquals(5, counter.get());
assertEquals(0x2C48, asInputStreamMSB0(0x12, 0x34).readUnsignedShort(JBBPByteOrder.LITTLE_ENDIAN));
assertArrayEquals(new byte[] {0}, writeString(JBBPByteOrder.LITTLE_ENDIAN, ""));
assertNull(JBBPUtils.array2hex(null)); assertEquals("[0x01, 0x02, 0x03, 0xFF]", JBBPUtils.array2hex(new byte[] {1, 2, 3, (byte) 0xFF}));
assertEquals(1.2397014E-20f, asInputStreamMSB0(0x12, 0x34, 0x56, 0x78).readFloat(JBBPByteOrder.LITTLE_ENDIAN), TestUtils.FLOAT_DELTA);
assertEquals(".0x01,Hello,World,<NULL>,0x02", makeWriter().Byte(1).Str("Hello", "World", null).Byte(2).Close().toString());
assertEquals("test.field", namedField.getFieldPath()); assertEquals("field", namedField.getFieldName()); assertEquals(123, namedField.getFieldOffsetInCompiledBlock()); assertEquals(JBBPBitNumber.BITS_4, field.getBitWidth());
assertNull(JBBPUtils.array2bin(null)); assertEquals("[0b00000001, 0b00000010, 0b00000011, 0b11111111]", JBBPUtils.array2bin(new byte[] {1, 2, 3, (byte) 0xFF}));
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertArrayEquals(new short[] {(short) -27834, 23423, 0, -2, 3}, test.getArray());
assertEquals(0x12345678, asInputStream(0x12, 0x34, 0x56, 0x78).readInt(JBBPByteOrder.BIG_ENDIAN));
assertEquals(array.length, noninverted.length); assertTrue(array[i] == noninverted[i]); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldBoolean.reverseBits(array[i]) != 0L, inverted[i]);
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsString());
assertEquals(5, test.size());
assertEquals(0x482C6A1E, asInputStreamMSB0(0x12, 0x34, 0x56, 0x78).readInt(JBBPByteOrder.BIG_ENDIAN));
assertSame(field, map.findFieldForPathAndType("TesT.tESt", JBBPFieldInt.class)); assertNull(map.findFieldForPathAndType("test.test", JBBPFieldByte.class)); assertNull(map.findFieldForPathAndType("test.test1", JBBPFieldInt.class));
assertTrue(new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 32423).getAsBool());
assertFalse(new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), 0, JBBPBitNumber.BITS_1).getAsBool());
assertEquals(0xDDCCBBAA78563412L, asInputStream(0x12, 0x34, 0x56, 0x78, 0xAA, 0xBB, 0xCC, 0xDD).readLong(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(12L, new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 12).getAsLong()); assertEquals(-12L & 0xFFL, new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) -12).getAsLong());
assertNull(struct1.findFieldForPath("struct1.struct2.field0")); assertNull(struct1.findFieldForPath("struct")); assertSame(field, struct1.findFieldForPath("struct1.struct2.field3"));
assertTrue(JBBPUtils.arrayStartsWith(new byte[] {1, 2}, new byte[] {1, 2}));
assertFalse(new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 0).getAsBool());
assertArrayEquals(array, (String[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldString.reverseBits(array[i]), inverted[i]);
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertEquals(JBBPTokenType.STRUCT_END, ex.getToken().getType());
assertEquals(0, dsl.size()); assertEquals(1, dsl.size());
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_USHORT, compiled[0]);
assertEquals(0x1E6A2C48, asInputStreamMSB0(0x12, 0x34, 0x56, 0x78).readInt(JBBPByteOrder.LITTLE_ENDIAN));
assertFalse(JBBPUtils.arrayEndsWith(new byte[] {1, 2, 3, 4}, new byte[] {2, 4}));
assertArrayEquals(array, (byte[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldBit.reverseBits(array[i], JBBPBitNumber.BITS_4), inverted[i]);
assertEquals(5, counter.get()); assertEquals(345, counter.get());
assertEquals(JBBPBitOrder.MSB0, new JBBPBitInputStream(null, JBBPBitOrder.MSB0).getBitOrder()); assertEquals(JBBPBitOrder.LSB0, new JBBPBitInputStream(null, JBBPBitOrder.LSB0).getBitOrder()); assertEquals(JBBPBitOrder.LSB0, new JBBPBitInputStream(null).getBitOrder());
assertTrue(ex.getToken().toString().contains("somewrong"));
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED, compiled[0]); assertEquals(0, block.findFieldOffsetForPath("hello"));
assertEquals(etalon[i], test.getAsBool(i));
assertNotNull(struct.getNameInfo()); assertEquals("test.struct", struct.getNameInfo().getFieldPath()); assertEquals("struct", struct.getNameInfo().getFieldName()); assertEquals(999, struct.getNameInfo().getFieldOffsetInCompiledBlock()); assertEquals(2, struct.getArray().length);
assertEquals(2, ex.getNumberOfFoundInstances()); assertSame(field2, struct.findFieldForType(JBBPFieldInt.class)); assertNull(struct.findFieldForType(JBBPFieldArrayByte.class));
assertEquals(etalon[i], test.getAsLong(i));
assertArrayEquals(array, (byte[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldByte.reverseBits(array[i]), inverted[i]);
assertEquals(234324L, new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), 234324).getAsLong()); assertEquals(-234324L, new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), -234324).getAsLong());
assertArrayEquals(array, (byte[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldByte.reverseBits(array[i]), inverted[i]);
assertEquals(3, test.size());
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_UBYTE, compiled[0]);
assertEquals(etalon[index++], f.getAsInt());
assertEquals("", asInputStream(0x00).readString(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(123, JBBPParser.prepare("byte;", 123).getFlags());
assertTrue(Double.compare(5.0d, counter.doubleValue()) == 0);
assertEquals(3, out.getBufferedBitsNumber()); assertEquals(0, out.getCounter());
assertEquals(0x1234, asInputStream(0x12, 0x34).readUnsignedShort(JBBPByteOrder.BIG_ENDIAN));
assertEquals(2, test.getArray().length); assertNotNull(test.getArray()[0]); assertNotNull(test.getArray()[1]);
assertEquals(etalon[i], test.getAsInt(i));
assertSame(field1, struct.findFirstFieldForType(JBBPFieldByte.class)); assertSame(field2, struct.findFirstFieldForType(JBBPFieldInt.class)); assertNull(struct.findFirstFieldForType(JBBPFieldArrayByte.class));
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_NAMED | JBBPCompiler.FLAG_ARRAY, 98, 0}, compiled);
assertEquals(2, compiled.length); assertEquals(JBBPCompiler.CODE_ALIGN, compiled[0]); assertEquals(1, compiled[1]);
assertEquals((byte) 1, JBBPUtils.reverseBitsInByte(JBBPBitNumber.BITS_1, (byte) 0xFF)); assertEquals((byte) 0, JBBPUtils.reverseBitsInByte(JBBPBitNumber.BITS_1, (byte) 0x00)); assertEquals((byte) 6, JBBPUtils.reverseBitsInByte(JBBPBitNumber.BITS_3, (byte) 0x63)); assertEquals((byte) 0x31, JBBPUtils.reverseBitsInByte(JBBPBitNumber.BITS_6, (byte) 0x63));
assertArrayEquals(new String[] {null, "", "ABC"}, asInputStream(0xFF, 0x00, 3, 65, 66, 67, 0, 0).readStringArray(3, JBBPByteOrder.BIG_ENDIAN));
assertArrayEquals(new byte[] {1}, BeginBin().Bit(1).End().toByteArray());
assertFalse(JBBPUtils.arrayStartsWith(new byte[] {1, 2, 3, 4}, new byte[] {1, 2, 4}));
assertEquals(etalon[index++], f.getAsLong());
assertFalse(new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), false).getAsBool());
assertArrayEquals(array, (long[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldLong.reverseBits(array[i]), inverted[i]);
assertTrue(map.isEmpty()); assertFalse(map.isEmpty());
assertEquals(5, test.size());
assertEquals(7, out.getBitBuffer()); assertEquals(0, out.getCounter());
assertEquals(6, types.size()); assertTrue(types.contains("type1")); assertTrue(types.contains("type2")); assertTrue(types.contains("type3")); assertTrue(types.contains("type4")); assertTrue(types.contains("type5")); assertTrue(types.contains("type6"));
assertNull(struct.getNameInfo()); assertEquals(2, struct.getArray().length);
assertTrue(JBBPUtils.arrayEndsWith(new byte[] {1, 2}, new byte[] {1, 2}));
assertEquals(0, out.getByteCounter()); assertEquals(0, out.getByteCounter()); assertEquals(1, out.getByteCounter()); assertEquals(1235, out.getByteCounter()); assertEquals(0, out.getByteCounter()); assertEquals(0, out.getByteCounter()); assertEquals(1, out.getByteCounter());
assertSame(field1, map.findFirstFieldForType(JBBPFieldInt.class)); assertNull(map.findFirstFieldForType(JBBPFieldLong.class));
assertFalse(struct.nameExists("struct.field1")); assertTrue(struct.nameExists("field1")); assertFalse(struct.nameExists("struct.field4")); assertTrue(struct.nameExists("field3"));
assertEquals(-7.00761088740633E143d, asInputStream(0x12, 0x34, 0x56, 0x78, 0xAA, 0xBB, 0xCC, 0xDD).readDouble(JBBPByteOrder.LITTLE_ENDIAN), TestUtils.FLOAT_DELTA);
assertEquals(4, counter.decrementAndGet()); assertEquals(3, counter.decrementAndGet());
assertArrayEquals(new byte[] {0x03, 65, 66, 67}, writeString(JBBPByteOrder.LITTLE_ENDIAN, "ABC"));
assertEquals(etalon[i], test.getAsLong(i));
assertEquals(etalon[i], test.getAsLong(i));
assertArrayEquals(new byte[] {(byte) 0x7F, (byte) 0xAA, (byte) 0x8C, (byte) 0x0, (byte) 0x01}, array);
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_BYTE, compiled[0]);
assertEquals(3, JBBPMapper.map(JBBPParser.prepare("byte a;").parse(new byte[] {3}), new Mapped()).a);
assertTrue(Float.compare(5.0f, counter.floatValue()) == 0);
assertEquals(6, counter.get());
assertSame(mapped, JBBPParser.prepare("byte a; byte b; byte c;").parse(new byte[] {1, 2, 3}).mapTo(mapped)); assertEquals(1, mapped.a); assertEquals(2, mapped.b); assertEquals(3, mapped.c);
assertEquals(0, writer.getLinePosition()); assertEquals(3, writer.getLinePosition()); assertEquals(0, writer.getLinePosition());
assertArrayEquals(new String[] {null, "", "ABC", "", ""}, asInputStream(0xFF, 0x00, 3, 65, 66, 67, 0, 0).readStringArray(-1, JBBPByteOrder.LITTLE_ENDIAN));
assertNotNull(numericFieldMap); assertNotNull(compiledBlock);
assertEquals(23432L, new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 23432).getAsLong()); assertEquals(-23432L & 0xFFFFL, new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) -23432).getAsLong());
assertSame(field1, map.findForFieldOffset(1)); assertSame(field2, map.findForFieldOffset(2222)); assertSame(field3, map.findForFieldOffset(3000)); assertNull(map.findForFieldOffset(123));
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsLong());
assertArrayEquals(new byte[] {1, 2, 0, 0, (byte) 0xFF}, BeginBin().Byte(1).ResetCounter().Byte(2).Align(3).Byte(0xFF).End().toByteArray());
assertEquals(etalon[index++], f.getAsInt());
assertTrue(new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 123).getAsBool());
assertEquals(23432L, new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 23432).getAsLong()); assertEquals(-23432L, new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) -23432).getAsLong());
assertTrue(new JBBPFieldShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 32423).getAsBool());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_RESET_COUNTER}, JBBPCompiler.compile("reset$$;").getCompiledData());
assertEquals(2, compiled.length); assertEquals(JBBPCompiler.CODE_BIT, compiled[0]); assertEquals(5, compiled[1]);
assertEquals(etalon[index++], f.getAsInt());
assertEquals(0, new JBBPIntCounter().get()); assertEquals(999, new JBBPIntCounter(999).get());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_NAMED, 12}, compiled);
assertEquals(6, ex.getPosition()); assertTrue(ex.getMessage().contains("[9]"));
assertArrayEquals(new byte[] {(byte) -1, 0, 1, 2, 3}, test.getArray());
assertEquals(5L, counter.longValue());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR, (byte) 0x81, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, compiled);
assertArrayEquals(new byte[] {0x01, 0x02}, BeginBin().Short(0x0102).End().toByteArray());
assertNotNull(JBBPCompiler.compile("byte [(1+2-3)*4/(5<<6>>7)>>>3%1&89|22^34-~45] a;"));
assertArrayEquals(array, (short[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldShort.reverseBits(array[i]), inverted[i]);
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_INT | JBBPCompiler.FLAG_NAMED | JBBPCompiler.FLAG_LITTLE_ENDIAN, compiled[0] & 0xFF); assertEquals(0, block.findFieldOffsetForPath("hello"));
assertEquals(23432498237439L, new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), 23432498237439L).getAsLong()); assertEquals(-2343249987234L, new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), -2343249987234L).getAsLong());
assertEquals("[123]{}", Begin().StructArray(123).CloseStruct().End()); assertEquals("[_]{}", Begin().StructArray("_").CloseStruct().End()); assertEquals("alloha[123]{}", Begin().StructArray("alloha", 123).CloseStruct().End()); assertEquals("alloha[_]{}", Begin().StructArray("alloha", "_").CloseStruct().End());
assertArrayEquals(new byte[] {1, 2, 3,}, in.readByteArray(3, JBBPByteOrder.BIG_ENDIAN));
assertNotNull(struct.getNameInfo()); assertEquals("test.struct", struct.getNameInfo().getFieldPath()); assertEquals("struct", struct.getNameInfo().getFieldName()); assertEquals(999, struct.getNameInfo().getFieldOffsetInCompiledBlock()); assertEquals(2, struct.getArray().length);
assertEquals((byte) etalon, JBBPUtils.reverseBitsInByte((byte) i), "Value is " + i);
assertEquals(etalon[i], test.getAsInt(i));
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_SHORT, compiled[0]);
assertEquals(4, ex.getPosition());
assertEquals(etalon[i], test.getAsBool(i));
assertEquals(2, ex.getPosition());
assertArrayEquals(new byte[] {(byte) 0xFF}, writeString(JBBPByteOrder.BIG_ENDIAN, null));
assertEquals(0x3412, asInputStream(0x12, 0x34).readUnsignedShort(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(etalon[i], test.getAsLong(i));
assertEquals(2, writer.getRadix()); assertEquals(12, writer.getRadix()); assertEquals(".00012345,00000000000000010010001101000101,0000074565", writer.Close().toString());
assertEquals(0x482C, asInputStreamMSB0(0x12, 0x34).readUnsignedShort(JBBPByteOrder.BIG_ENDIAN));
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_ARRAY | JBBPCompiler.FLAG_NAMED, 98, (byte) 0x81, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, compiled);
assertEquals("Huzzaa", field.getAsString());
assertArrayEquals(new String[] {null, "", "ABC"}, asInputStream(0xFF, 0x00, 3, 65, 66, 67, 0, 0).readStringArray(3, JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(JBBPBitOrder.MSB0, new JBBPBitOutputStream(null, JBBPBitOrder.MSB0).getBitOrder()); assertEquals(JBBPBitOrder.LSB0, new JBBPBitOutputStream(null, JBBPBitOrder.LSB0).getBitOrder()); assertEquals(JBBPBitOrder.LSB0, new JBBPBitOutputStream(null).getBitOrder());
assertArrayEquals(new String[0], asInputStream().readStringArray(-1, JBBPByteOrder.LITTLE_ENDIAN)); assertArrayEquals(new String[0], asInputStream().readStringArray(-1, JBBPByteOrder.BIG_ENDIAN));
assertEquals(12, new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 12).getAsInt()); assertEquals(-12, new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) -12).getAsInt());
assertArrayEquals(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, BeginBin().Long(0x0102030405060708L).End().toByteArray());
assertArrayEquals(array, (short[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldShort.reverseBits(array[i]), inverted[i]);
assertArrayEquals(array, (int[]) test.getValueArrayAsObject(false)); assertEquals(array.length, inverted.length); assertEquals(JBBPFieldInt.reverseBits(array[i]), inverted[i]);
assertArrayEquals(new byte[] {1, 2, 2}, in.readBitsArray(3, JBBPBitNumber.BITS_2));
assertEquals(value, expr.eval(null, 0, compiledBlock, map));
assertEquals(5, test.size());
assertEquals(12L, new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 12).getAsLong()); assertEquals(-12L, new JBBPFieldByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) -12).getAsLong());
assertTrue(map.nameExists("tESt")); assertFalse(map.nameExists("test1")); assertFalse(map.nameExists("test.test"));
assertFalse(new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), 0L).getAsBool());
assertTrue(struct.pathExists("struct.field1")); assertFalse(struct.pathExists("field1")); assertFalse(struct.pathExists("struct.field4"));
assertEquals(1, counter.incrementAndGet()); assertEquals(2, counter.incrementAndGet());
assertEquals(0, in.getBitBuffer()); assertEquals(0xA, in.readBits(JBBPBitNumber.BITS_4)); assertEquals(0xA, in.getBitBuffer());
assertSame(field3, map.findFieldForType(JBBPFieldByte.class)); assertNull(map.findFieldForType(JBBPFieldLong.class)); assertEquals(2, ex.getNumberOfFoundInstances());
assertEquals(etalon[i], test.getAsBool(i));
assertEquals(5, test.size());
assertFalse(new JBBPFieldInt(new JBBPNamedFieldInfo("test.field", "field", 123), 0).getAsBool());
assertEquals(12, new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 12).getAsInt()); assertEquals(-12 & 0xFF, new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) -12).getAsInt());
assertEquals(0, counter.getAndIncrement()); assertEquals(1, counter.getAndIncrement());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_ARRAY | JBBPCompiler.FLAG_NAMED, 98, 12}, compiled);
assertTrue(map.isEmpty()); assertFalse(map.isEmpty()); assertTrue(map.isEmpty());
assertTrue(JBBPUtils.arrayStartsWith(new byte[] {1, 2, 3, 4}, new byte[] {1, 2}));
assertEquals(23432, new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) 23432).getAsInt()); assertEquals(-23432 & 0xFFFF, new JBBPFieldUShort(new JBBPNamedFieldInfo("test.field", "field", 123), (short) -23432).getAsInt());
assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR, 12}, compiled);
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertTrue(new JBBPFieldUByte(new JBBPNamedFieldInfo("test.field", "field", 123), (byte) 123).getAsBool());
assertSame(provider, map.getExternalValueProvider());
assertEquals(null, asInputStream(0xFF).readString(JBBPByteOrder.BIG_ENDIAN));
assertEquals(null, asInputStream(0xFF).readString(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(0x78563412, asInputStream(0x12, 0x34, 0x56, 0x78).readInt(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(JBBPByteOrder.LITTLE_ENDIAN, writer.getByteOrder()); assertEquals(JBBPByteOrder.BIG_ENDIAN, writer.getByteOrder());
assertEquals("reset$$;", Begin().ResetCounter().End());
assertEquals(etalon[i], test.getAsBool(i));
assertEquals(etalon.length, array.length); assertTrue(etalon[i] == array[i]);
assertFalse(JBBPUtils.arrayStartsWith(new byte[] {1, 2}, new byte[] {1, 2, 3}));
assertEquals("", asInputStream(0x00).readString(JBBPByteOrder.BIG_ENDIAN));
assertEquals(3, map.size()); assertEquals(2, map.size()); assertSame(field1, map.findFieldForName("test")); assertSame(field3, map.findFieldForName("test3")); assertNull(map.findFieldForName("test2"));
assertEquals(etalon[i], test.getAsInt(i));
assertEquals(12, new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), 12, JBBPBitNumber.BITS_3).getAsInt()); assertEquals(-12 & 0xFF, new JBBPFieldBit(new JBBPNamedFieldInfo("test.field", "field", 123), -12, JBBPBitNumber.BITS_4).getAsInt());
assertEquals(1, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), true).getAsInt()); assertEquals(0, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), false).getAsInt());
assertArrayEquals(new int[] {-278349, 12223423, 0, -2, 3}, test.getArray());
assertEquals(String.format(".0x0000000C,0x22%n;Huzzaaa"),generated);
assertEquals(5, counter.getAndAdd(3)); assertEquals(8, counter.getAndAdd(0));
assertTrue(new JBBPFieldLong(new JBBPNamedFieldInfo("test.field", "field", 123), 32423L).getAsBool());
assertEquals(0xEA, in.read()); assertEquals(0xEA, in.read()); assertEquals(0xEA, in.read()); assertEquals(0x18, in.read()); assertEquals(0xAA, in.read()); assertEquals(0xC6, in.read()); assertEquals(0x80, in.read()); assertEquals(-1, in.read());
assertFalse(JBBPUtils.arrayEndsWith(new byte[] {1, 2}, new byte[] {1, 2, 3}));
assertNotSame(test.getArray(), resultForFalse); assertNotSame(test.getArray(), resultForTrue); assertNotSame(resultForTrue, resultForFalse); assertArrayEquals((Object[]) resultForTrue, test.getArray()); assertArrayEquals((Object[]) resultForTrue, (Object[]) resultForFalse);
assertEquals(1, compiled.length); assertEquals(JBBPCompiler.CODE_BOOL, compiled[0]);
assertSame(field, map.findFieldForPath("test.test")); assertNull(map.findFieldForPath("test.test1")); assertNull(map.findFieldForPath("test"));
assertEquals("", CommonUtils.extractPackageName("")); assertEquals("", CommonUtils.extractPackageName("hello")); assertEquals("a", CommonUtils.extractPackageName("a.hello")); assertEquals("a.b.c", CommonUtils.extractPackageName("a.b.c.hello")); assertEquals("a.b.c", CommonUtils.extractPackageName("a.b.c.")); assertEquals("", CommonUtils.extractPackageName(".hello"));
assertEquals(5, test.size());
assertEquals(etalon[i], test.getAsLong(i));
assertArrayEquals(new byte[] {1, 2, 3,}, in.readByteArray(3));
assertEquals(5.626349538661693E-221d, asInputStream(0x12, 0x34, 0x56, 0x78, 0xAA, 0xBB, 0xCC, 0xDD).readDouble(JBBPByteOrder.BIG_ENDIAN), TestUtils.FLOAT_DELTA);
assertEquals(2, compiled.length); assertEquals(JBBPCompiler.CODE_ALIGN, compiled[0]); assertEquals(9, compiled[1]);
assertEquals(256, out.getCounter()); assertEquals(256, written.length); assertEquals(i, written[i] & 0xFF, "Pos " + i);
assertEquals(5, test.size());
assertArrayEquals(new byte[] {0x03, 65, 66, 67}, writeString(JBBPByteOrder.BIG_ENDIAN, "ABC"));
assertTrue(JBBPUtils.arrayStartsWith(new byte[0], new byte[0])); assertTrue(JBBPUtils.arrayStartsWith(new byte[111], new byte[0]));
assertEquals("ABC", asInputStream(0x03, 65, 66, 67).readString(JBBPByteOrder.LITTLE_ENDIAN));
assertEquals(etalon[i], test.getAsBool(i));
assertEquals(5, data.length);
assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, JBBPUtils.concat(new byte[] {1, 2, 3, 4}, new byte[] {5}, new byte[] {6, 7, 8, 9}, new byte[0], new byte[] {10}));
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertArrayEquals(new byte[] {-34}, BeginBin().Byte(-34).End().toByteArray());
assertEquals(etalon[i], test.getAsBool(i));
assertArrayEquals(new byte[] {(byte) -1, 0, 1, 2, 3}, test.getArray());
assertEquals(etalon[index++], f.getAsInt());
assertTrue(block.hasEvaluatedSizeArrays()); assertNotNull(block.findFieldForPath("str.size")); assertNotNull(block.findFieldForPath("some"));
assertTrue(JBBPUtils.arrayEndsWith(new byte[] {1, 2, 3, 4}, new byte[] {2, 3, 4}));
assertNull(ex.getToken());
assertArrayEquals(new byte[] {(byte) -1, 0, 1, 2, 3}, test.getArray());
assertNull(field.getAsString());
assertSame(payload, f.getPayload()); assertEquals(etalon[i], f.getAsInt());
assertEquals(0, map.size()); assertEquals(1, map.size());
assertEquals(1L, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), true).getAsLong()); assertEquals(0L, new JBBPFieldBoolean(new JBBPNamedFieldInfo("test.field", "field", 123), false).getAsLong());
assertEquals("", CommonUtils.extractClassName("")); assertEquals("", CommonUtils.extractClassName("a.b.c.")); assertEquals("hello", CommonUtils.extractClassName("hello")); assertEquals("hello", CommonUtils.extractClassName("a.b.c.hello")); assertEquals("hello", CommonUtils.extractClassName(".hello"));
assertArrayEquals(new byte[] {0}, writeString(JBBPByteOrder.BIG_ENDIAN, ""));
assertEquals(etalon[index++], f.getAsInt());
assertFalse(EmailAddress.isValid("invalid_address"));
assertThat(response.getStatusCode(), is(200)); assertThat(response.asString(), is(VersionService.VENDOR));
assertThat(u.toString(), containsString(name));
assertThat(response.getStatusCode(), is(200)); assertThat(response.asString(), is(VersionService.VERSION));
assertTrue(EmailAddress.isValid(a));
assertThat(u.toString(), containsString(nick));
assertNotNull(service.weekOfYear()); assertThat(Calendar.getInstance().get(Calendar.WEEK_OF_YEAR), is(equalTo(service.weekOfYear())));
assertEquals(Level.WARNING, logger.getLevel());
assertNotNull(target); assertTrue("target.class=" + target.getClass(), target instanceof Slf4jLogTarget);
assertEquals(Level.WARNING, first);
assertNotNull(logService); assertNotNull(logTarget);
assertFalse(JulZlgBridge.isInstalled()); assertTrue(JulZlgBridge.isInstalled()); assertFalse(JulZlgBridge.isInstalled());
assertEquals(9, JulMappings.getDefaultMappings().length);
assertEquals("level=" + level, level.getLevel() >= enabledLevel.getLevel(), target.isEnabled(level.getLevel()));
assertFalse(logger.isLoggable(Level.INFO)); assertTrue(logger.isLoggable(Level.WARNING)); assertTrue(logger.isLoggable(Level.SEVERE));
assertEquals("ea04b5f95c701e1764e8dca2f0ceefb3a7051c2cae5cdc24ff3dae3703137c8d", sha2);
assertEquals("ea04b5f95c701e1764e8dca2f0ceefb3a7051c2cae5cdc24ff3dae3703137c8d", sha2);
assertEquals("UliWasHere!", echo);
assertEquals("UliWasHere!", echo);
assertTrue(checkEqualElements(elements, runtimeEdgeToOutputData.get(taskOutEdge.getId())));
assertEquals(Finishmark.getInstance(), fetcher.fetchDataElement());
assertTrue(failingFuture.isCompletedExceptionally());
assertEquals(expectedExecutors, candidateExecutors);
assertNotEquals(partitioning.get(v0), partitioning.get(v1)); assertNotEquals(partitioning.get(v1), partitioning.get(v2)); assertNotEquals(partitioning.get(v2), partitioning.get(v0));
assertEquals(Arrays.asList(new Watermark(watermark)), emittedWatermarks); assertEquals(elements, runtimeEdgeToOutputData.get(taskOutEdge.getId()));
assertTrue(optimizedDAG.checkIntegrity().isPassed());
assertEquals(Finishmark.getInstance(), fetcher.fetchDataElement());
assertNotEquals(partitioning.get(v0), partitioning.get(v1));
assertTrue(optimizedDAG.checkIntegrity().isPassed());
assertEquals(0, (int) partitioning.get(v0)); assertEquals(0, (int) partitioning.get(v1));
assertNotEquals(partitioning.get(v0), partitioning.get(v1));
assertEquals(2, executionPlan.getStageDAG().getVertices().size()); assertEquals(2, executionPlan.getStageDAG().getTopologicalSort().get(0).getIRDAG().getVertices().size()); assertEquals(3, executionPlan.getStageDAG().getTopologicalSort().get(1).getIRDAG().getVertices().size());
assertTrue(checkEqualElements(elements, runtimeEdgeToOutputData.get(taskOutEdge.getId())));
assertTrue(optimizedDAG.checkIntegrity().isPassed());
assertEquals(expectedExecutors, candidateExecutors);
assertTrue(optimizedDAG.checkIntegrity().isPassed());
assertTrue(schedulingConstraint.testSchedulability(e, task));
assertFalse(planStateManager.isPlanDone()); assertEquals(PlanState.State.EXECUTING, executingState); assertEquals(PlanState.State.COMPLETE, completedState);
assertTrue(true);
assertEquals(expectedExecutors1, candidateExecutors1); assertEquals(expectedExecutors2, candidateExecutors2);
assertNotEquals(partitioning.get(v0), partitioning.get(v1));
assertTrue(checkEqualElements(elements, values)); assertTrue(pairs.stream().map(Pair::left).allMatch(broadcastVar -> checkEqualElements(broadcastVar, values)));
assertEquals(Collections.emptySet(), Arrays.asList(e0, e1).stream() .filter(e -> schedulingConstraint.testSchedulability(e, task)) .collect(Collectors.toSet()));
assertEquals(0, (int) partitioning.get(v0)); assertEquals(0, (int) partitioning.get(v1));
assertEquals(value, new String(outputStream.toByteArray()));
assertTrue(optional.isPresent()); assertEquals(taskList2, optional.get());
assertTrue(optional.isPresent()); assertEquals(taskList, optional.get());
assertEquals(true, Util.checkEqualityOfIntPredicates(firstPredicate, secondPredicate, 4)); assertEquals(false, Util.checkEqualityOfIntPredicates(firstPredicate, secondPredicate, 5)); assertEquals(false, Util.checkEqualityOfIntPredicates(firstPredicate, secondPredicate, 7));
assertTrue(optimizedDAG.checkIntegrity().isPassed());
assertEquals(leftObject, objectPair.left()); assertEquals(rightObject, objectPair.right()); assertEquals(leftSource, irVertexPair.left()); assertEquals(rightSource, irVertexPair.right()); assertEquals(leftObject, mixedPair.left()); assertEquals(rightSource, mixedPair.right()); assertEquals(objectPair, identicalObjectPair);
assertEquals(a0, schedulingPolicy.selectExecutor(executorRepresenterList, task));
assertEquals(false, schedulingConstraint.testSchedulability(e0, task1)); assertEquals(true, schedulingConstraint.testSchedulability(e0, task2));
assertFalse(pendingTaskCollectionPointer.getAndSetNull().isPresent());
assertTrue(checkEqualElements(elements, runtimeEdgeToOutputData.get(taskOutEdge.getId())));
assertEquals(new String(expected), new String(output));
assertNotEquals(partitioning.get(v0), partitioning.get(v1));
assertEquals(singleData, fetcher.fetchDataElement());
assertEquals(null, fetcher.fetchDataElement());
assertEquals(3,n.columns()); assertEquals(2,n.rows());
assertNotNull(this.invoker.getUserHandler());
assertTrue("pre-create", !tmpFile.exists() || tmpFile.delete()); assertTrue("post-create", tmpFile.exists()); assertFalse("pre-close", tmpFile.delete()); assertFalse("post-close", tmpFile.delete()); assertTrue("post-free", tmpFile.delete());
assertThat(assetReturned.getName()).isEqualTo("asset2"); assertThat(assets[0].getOrder()).isEqualTo(2); assertThat(assets[1].getOrder()).isEqualTo(1); assertThat(assets[2].getOrder()).isEqualTo(3);
assertThat(report.getDependencies().getAdded().get("widget")).isEqualTo(addedWidgets); assertThat(report.getDependencies().getOverwritten().get("widget")).isEqualTo(overridenWidgets); assertThat(report.getElement()).isEqualTo(page);
assertThat(component.getPropertyValues().get("bar").getType()).isEqualTo("constant");
assertThat(report.getElement()).isEqualTo(existingWidgetInRepo); assertThat(report.isOverwritten()).isTrue();
assertThat(report.getOverwrittenElement()).isEqualTo(existingPageInRepo); assertThat(report.isOverwritten()).isTrue(); assertThat(report.getStatus()).isEqualTo(ImportReport.Status.IMPORTED); assertThat(page.getId()).isEqualTo("id");
assertThat(expectFileDeleted).doesNotExist(); assertThat(expectFileAlreadyExist).exists();
assertThat(assets).extracting("name").containsOnly("myfile.js", "myfile.css", "bootstrap.min.js"); assertThat(assets.iterator().next().getComponentId()).isNotEmpty();
assertThat(page.getRows()).hasSize(0);
assertThat(foo.getType()).isEqualTo("interpolation"); assertThat(foo.getValue()).isEqualTo("{{bar}}");
assertThat(assets).isEmpty();
assertThat(restClientProperties.isURLSet()).isFalse();
assertThat(entries).contains("destinationInZip/aFile.txt");
assertThat(new String(readAllBytes(repoDirectory.getParent().resolve(".metadata/baz.json")))) .isEqualTo("{\\"favorite\\":false,\\"metadata\\":\\"foobar\\"}");
assertThat(template.build(singletonMap("variable", "foobar"))).isEqualTo("<div>foobar</div>");
assertThat(container).isInstanceOf(Container.class); assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("$item.names");
assertThat(valueParameter.getType()).isEqualTo("variable"); assertThat(valueParameter.getValue()).isEqualTo("formInput.firstName");
assertThat(unzipInTempDir.resolve("notAzipFile.txt").toFile()).exists();
assertThat(workspacePathResolver.getWorkspacePath()).isEqualTo(expectedWorkspacePath);
assertThat(page.getAssets().iterator().next().getId()).isEqualTo("123");
assertThat(HttpFile.getOriginalFilename("/tmp/test/myfile.js")).isEqualTo("myfile.js");
assertThat(lockStatus).isEqualTo(LockStatus.UNLOCKED);
assertThat(component).isInstanceOf(CheckboxWidget.class); assertThat(((CheckboxWidget)component).getLabel()).isEqualTo("Is Validated");
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule", "containerModule");
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule");
assertThat(predicate.apply(variable)).isFalse();
assertThat(loader.indexOf("mon exemple complet".getBytes(), "exem".getBytes())).isEqualTo(4);
assertThat(listener.getChanged()).containsExactly(monitoredFolder.resolve("aFile"));
assertThat(expectedReport).isEqualTo(report);
assertThat(assetReturned.getName()).isEqualTo("asset2"); assertThat(assets[0].getOrder()).isEqualTo(1); assertThat(assets[1].getOrder()).isEqualTo(3); assertThat(assets[2].getOrder()).isEqualTo(2);
assertThat(element.getPropertyValues().get("type").getValue()).isEqualTo("text");
assertThat(modules).isEmpty();
assertThat(widget).isEqualTo(input);
assertThat(assetReturned.getName()).isEqualTo("asset3"); assertThat(assets[0].getOrder()).isEqualTo(1); assertThat(assets[1].getOrder()).isEqualTo(2); assertThat(assets[2].getOrder()).isEqualTo(3);
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule", "containerModule");
assertThat(dest.resolve(destinationInZip).toFile().list()).containsExactly("aFile.txt");
assertThat(template.build(singletonMap("variable", bar))).isEqualTo("<div>{\\"variable\\":\\"qux\\"}</div>");
assertThat(new String(readAllBytes(path.resolve(filename)),"UTF-8")).isEqualTo(expected); assertThat(filename).isEqualTo("widgets-0f2d4ba1fa1992794df3dca7a9b8e4ec735b4746.min.js");
assertThat(page.getVariables()).doesNotContain(entry("context", anURLVariable().value("/bonita/API/bpm/userTask/{{taskId}}/context").build()));
assertThat(report.getDependencies().getAdded().get("widget")).isEqualTo(addedWidgets); assertThat(report.getDependencies().getOverwritten().get("widget")).isEqualTo(overriddenWidgets); assertThat(report.getElement()).isEqualTo(page); assertThat(report.getUUID()).isEqualTo(anImport.getUUID()); assertThat(report.getStatus()).isEqualTo(ImportReport.Status.IMPORTED);
assertThat(temporaryFolder.toPath().resolve("pages")).exists(); assertThat(temporaryFolder.toPath().resolve("widgets")).exists();
assertThat(report.getElement()).isEqualTo(page); assertThat(report.getOverwrittenElement()).isEqualTo(existingPageInRepo); assertThat(report.isOverwritten()).isTrue();
assertThat(page.getInactiveAssets()).isNotEmpty().contains("assetUIID");
assertThat(page.getVariables()).contains(entry("formInput", aJSONVariable().value(objectMapper.prettyPrint("{\\"names\\":[]}")).build())); assertThat(page.getVariables()).contains(entry("formOutput", anExpressionVariable().value("return {\\n\\tnames: $data.formInput.names\\n}").build()));
assertThat(report.getOverwrittenElement()).isEqualTo(existingPageInRepo); assertThat(report.isOverwritten()).isTrue(); assertThat(report.getStatus()).isEqualTo(ImportReport.Status.IMPORTED); assertThat(page.getId()).isEqualTo("myPage1");
assertThat(content).isEqualTo("myContentOfAsset");
assertThat(element.getPropertyValues().get("type").getValue()).isEqualTo("number");
assertThat(widget).isInstanceOf(InputWidget.class); assertThat(((InputWidget) widget).isReadOnly()).isEqualTo(true); assertThat(((InputWidget) widget).getLabel()).isEqualTo("Last Name");
assertThat(readDirective("pbInput")).isEqualTo(generateDirective(pbInput));
assertThat(widget.getProperties()).contains(updatedParam); assertThat(widget.getProperties()).doesNotContain(initialParam);
assertThat(loader.findByObjectId(get("/does/not/exist"), "objectId")).isEmpty();
assertThat(assets).isEmpty();
assertThat(workspacePathResolver.getPagesRepositoryPath()).isEqualTo(Paths.get("path/to/pages"));
assertThat(widgetLoader.findByObjectId(widgetDirectory, "label")).isEmpty();
assertThat(new String(min,"UTF-8")).isEqualTo(expected);
assertThat(assets).isEmpty();
assertThat(map.get("name")).isEqualTo("walter"); assertThat(map.get("lastname")).isEqualTo("bates");
assertThat(assetRepository.findAssetPath("page-id", "myasset.js", AssetType.JAVASCRIPT).toFile()).exists();
assertThat(index).contains("\\"baz-uuid\\":\\"page1\\"").contains("\\"foo-uuid\\":\\"page2\\"");
assertThat(component).isInstanceOf(FileUploadWidget.class); assertThat(((FileUploadWidget)component).getLabel()).isEqualTo("Document"); assertThat(((FileUploadWidget) component).getUrl()).isEqualTo("../API/formFileUpload");
assertThat(element.getId()).isEqualTo("pbInput");
assertThat(isSupported).isTrue();
assertThat(dest.resolve(destinationInZip).toFile().list()).doesNotContain("pbLabel.json");
assertThat(element.getId()).isEqualTo("pbText"); assertThat(element.getPropertyValues().get("allowHtml").getValue()).isEqualTo(true);
assertThat(page.getVariables()).contains(entry("task", anURLVariable().value("../API/bpm/userTask/{{taskId}}").build()));
assertThat(fragmentJS).exists(); assertThat(descriptorFile).exists(); assertThat(oldConcatDirectiveFile).doesNotExist();
assertThat(title.getId()).isEqualTo("pbTitle"); assertThat(titleCollectionPropertyValue.getType()).isEqualTo("interpolation"); assertThat(titleCollectionPropertyValue.getValue()).isEqualTo("Addresses"); assertThat(detailsRows.size()).isEqualTo(2); assertThat(variables.get("customer_addresses").getType()).isEqualTo(DataType.URL); assertThat(variables.get("customer_addresses").getValue().get(0)).isEqualTo("{{customer_selected|lazyRef:\'addresses\'}}");
assertThat(localizationFactory.generate(page)) .isEqualTo(createFactory("{}"));
assertThat(objects).isEmpty();
assertThat(a.getId()).isEqualTo("pbInput");
assertThat(contractDeserializer.handledType()).isEqualTo(Contract.class);
assertThat(component).isInstanceOf(InputWidget.class);
assertThat(objects).isEmpty();
assertThat(page.getRows()).hasSize(2); assertThat(page.getRows().get(1).get(0)).isInstanceOf(FormContainer.class);
assertThat(migratedPage.getAssets()).contains(expectedAsset("style2.css"));
assertThat(path.toFile()).exists(); assertThat(path.getFileName().toString()).isEqualTo("widgets-f8a4574.js");
assertThat(component).isInstanceOf(DatePickerWidget.class);
assertThat(isSupported).isTrue();
assertThat(readAllBytes(unzipped.resolve("resources/file1.json"))).isEqualTo("This is some content".getBytes()); assertThat(readAllBytes(unzipped.resolve("resources/deep/file2.json"))).isEqualTo("This is another content".getBytes());
assertThat(temporaryFolder.toPath().resolve("pages").resolve("myPage")).exists(); assertThat(temporaryFolder.toPath().resolve("pages").resolve("myPage").resolve("js")).doesNotExist();
assertThat(component).isInstanceOf(DateTimePickerWidget.class);
assertThat(template.build(bar)).isEqualTo("<div>baz</div>");
assertThat(index).contains("\\"baz-uuid\\":\\"baz-id\\"").contains("\\"foo-uuid\\":\\"foo-id\\"");
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND); assertThat(response.getBody()).isEqualTo("Page <unexisting-page> not found");
assertThat(loader.indexOf("mon exemple complet".getBytes(), "mon ex".getBytes())).isEqualTo(0);
assertThat(isBuildable).isFalse();
assertThat(temporaryFolder.toPath().resolve("pages").resolve("myPageToRemove")).doesNotExist(); assertThat(temporaryFolder.toPath().resolve("pages").resolve(".gitignore")).exists();
assertThat(variable.getValue()).isEmpty(); assertThat(variable.isExposed()).isTrue(); assertThat(pageWithData.getData()).isNull();
assertThat(properties).contains("contentType=page"); assertThat(properties).contains("name=custompage_aPageName"); assertThat(properties).contains("displayName=aPageName" ); assertThat(properties).contains("description=Page generated with Bonita UI designer"); assertThat(properties).contains("resources=[]");
assertThat(assets).extracting("name").containsOnlyOnce("myfile.js");
assertThat(assetReturned.getName()).isEqualTo("asset1"); assertThat(assets[0].getOrder()).isEqualTo(1); assertThat(assets[1].getOrder()).isEqualTo(2); assertThat(assets[2].getOrder()).isEqualTo(3);
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule");
assertThat(isSupported).isTrue();
assertThat(isSupported).isTrue();
assertThat(pageWithoutUUID.getUUID()).isNotNull();
assertThat(fileExpected.toFile()).exists(); assertThat(assetRepository.readAllBytes(asset)).isNotNull().isEmpty();
assertThat(new String(languagePackFactory.create(poFile).toJson())) .isEqualTo("{\\"francais\\":{\\"A page\\":\\"Une page\\"}}");
assertThat(component.isWithTimeZone()).isEqualTo(true);
assertThat(page.getAssets().iterator().next()).isEqualTo(updatedAsset);
assertThat(report.getStatus()).isEqualTo(ImportReport.Status.IMPORTED);
assertThat(jsonFile(customLabel)).doesNotExist(); assertThat(jsFile(customLabel)).doesNotExist();
assertThat(importer).isEqualTo(widgetArtifactImporter);
assertThat(e.getMessage()).isEqualTo("Could not load component, artifact model file not found"); assertThat(e.getType()).isEqualTo(MODEL_NOT_FOUND); assertThat((Collection<String>) e.getInfos().get("modelfiles")).containsOnly("page.json", "widget.json");
assertThat(response.getHeader("Content-Disposition")).isEqualTo("inline; filename=layout-thelayout.zip;");
assertThat(assets).extracting("name").containsExactly("container.min.js", "myfile.js", "myfile.js"); assertThat(assets).extracting("componentId").contains("id2", "id1");
assertThat(savedObject.getDesignerVersion()).isEqualTo("alreadySetVersion");
assertThat(readAllBytes(unzipped.resolve("resources/page.json"))).isEqualTo("foobar".getBytes());
assertThat(temporaryFolder.toPath().resolve("pages")).exists(); assertThat(temporaryFolder.toPath().resolve("widgets")).exists();
assertThat(workspacePathResolver.getWidgetsRepositoryPath()).isEqualTo(Paths.get("/path/to/widgets"));
assertThat(expectedWidget).isEqualTo(createdWidget); assertThat(jsonFile(createdWidget)).exists();
assertThat(expectToBeDeletedFile).doesNotExist(); assertThat(expectExistFile).exists(); assertThat(fragment).exists();
assertThat(assets).extracting("name").containsExactly("myfile.js", "myfile.js");
assertThat(page.getVariables()).contains(entry("taskId", aUrlParameterVariable().value("id").build()));
assertThat(component.getPropertyValues().get("bar").getType()).isEqualTo("constant");
assertThat(element.getPropertyValues().get("action").getValue()).isEqualTo("Submit task");
assertThat(readAllBytes(destination.toPath().resolve("pbButton.json"))).isEqualTo("contents".getBytes());
assertThat(page.getInactiveAssets()).isEmpty();
assertThat(importer).isEqualTo(pageArtifactImporter);
assertThat(pageWithData.getVariables().get("myData").getValue()).isEqualTo(Arrays.asList("default value")); assertThat(pageWithData.getData()).isNull();
assertThat(spinalCase).isEqualTo("c-ustom-display-u-t-c-date");
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process", "GET|bpm/userTask");
assertThat(grabTaskInformation(page).getRows().get(0).get(0).getPropertyValues().containsKey("class")).isFalse(); assertThat(grabTaskInformation(page).getRows().get(0).get(0)).isEqualToIgnoringGivenFields(title.toComponent(new DimensionFactory()), "reference");
assertThat(dimensions).containsOnlyKeys("xs"); assertThat(dimensions).containsValue(12);
assertThat(report.getElement()).isEqualTo(page); assertThat(report.isOverwritten()).isFalse(); assertThat(report.getOverwrittenElement()).isNull();
assertThat(new String(objectMapper.toPrettyJson(object, JsonViewPersistence.class))).isEqualTo("{" + System.lineSeparator() + " \\"name\\" : \\"Vincent\\"," + System.lineSeparator() + " \\"number\\" : 1" + System.lineSeparator() + "}");
assertThat(readAllBytes(destination.toPath().resolve("pbButton.json"))).isEqualTo("contents from destination".getBytes());
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process", "GET|bpm/userTask");
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR); assertThat(response.getBody()).isEqualTo("Error during page generation");
assertThat(errorMessage.getType()).isEqualTo("IllegalArgumentException");
assertThat(localizationFactory.generate(page)) .isEqualTo(createFactory(localizationFileContent));
assertThat(fileExpected.toFile()).exists(); assertThat(fileExpected.toFile()).doesNotExist();
assertThat(widget.getProperties()).doesNotContain(aProperty); assertThat(properties).containsOnlyElementsOf(widget.getProperties());
assertThat(labelValue.getValue()).isEqualTo("<span class=\\"glyphicon glyphicon-plus\\"></span> Add Skill"); assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("$item.skills");
assertThat(response.getContentType()).isEqualTo("application/zip");
assertThat(new String(languagePackFactory.create(poFile).toJson())) .isEqualTo("{\\"francais\\":{\\"A page\\":[\\"Une page\\",\\"Des pages\\"]}}");
assertThat(page.getVariables()).doesNotContain(entry("taskId", aUrlParameterVariable().value("id").build()));
assertThat(loader.contains(repoDirectory, "objet1")).isTrue();
assertThat(filename).isEqualTo("widgets-f66d6f4cc38b2259ec29fa16e9f171251cd3d346.min.js");
assertThat(expectFileDeleted).doesNotExist();
assertThat(objectMapper.prettyPrint(object)).isEqualTo("{" + System.lineSeparator() + " \\"id\\" : \\"id\\"," + System.lineSeparator() + " \\"name\\" : \\"Vincent\\"," + System.lineSeparator() + " \\"number\\" : 1," + System.lineSeparator() + " \\"another\\" : null" + System.lineSeparator() + "}");
assertThat(foo.getType()).isEqualTo("constant"); assertThat(foo.getValue()).isEqualTo("baz");
assertThat(isSupported).isTrue();
assertThat(localizationFactory.generate(page)) .isEqualTo(createFactory("{}"));
assertThat(workspacePathResolver.getWorkspacePath()) .isEqualTo(Paths.get(System.getProperty("user.home") + "/.bonita"));
assertThat(labelComponent.getPropertyValues().get("text").getType()).isEqualTo(INTERPOLATION.toJson());
assertThat(assets).extracting("name").containsExactly("myfile.js", "myfile.js"); assertThat(assets).extracting("componentId").contains("id2", "id1");
assertThat(page.getVariables().keySet()).doesNotContain("formInput");
assertThat(properties).contains("resources=[GET|bpm/archivedUserTask, GET|identity/user, GET|bpm/userTask, GET|identity/group]");
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule");
assertThat(page.getVariables()).isEmpty();
assertThat(fetchedPage.isFavorite()).isFalse(); assertThat(pagesPath.resolve(".metadata").resolve(".index.json").toFile()).exists();
assertThat(object.getName()).isEqualTo("colin"); assertThat(object.getNumber()).isEqualTo(31);
assertThat(foo.getType()).isEqualTo("expression"); assertThat(foo.getValue()).isEqualTo("bar");
assertThat(modules).containsOnly("aModule", "anotherModule");
assertThat(PropertyValue.getType()).isEqualTo("expression"); assertThat(PropertyValue.getValue()).isEqualTo("formOutput");
assertThat(loader.indexOf(null, "search".getBytes())).isEqualTo(-1);
assertThat(widget.getType()).isEqualTo("widget");
assertThat(objects).containsOnly(object2);
assertThat(predicate.apply(aComponent() .withPropertyValue("foo", "constant", "bar") .build())).isTrue();
assertThat(url).isEqualTo("");
assertThat(repoDirectory.resolve("object1.json").toFile()).doesNotExist();
assertThat(pathResolver.getWidgetsRepositoryPath().resolve("pbLabel/pbLabel.json")).exists(); assertThat(pathResolver.getWidgetsRepositoryPath().resolve("pbText/pbText.json")).exists(); assertThat(pathResolver.getWidgetsRepositoryPath().resolve("pbText/help.html")).exists(); assertThat(pathResolver.getWidgetsRepositoryPath().resolve("pbMissingHelp/pbMissingHelp.json")).exists();
assertThat(migratedPage.getAssets()).contains(expectedAsset("style.css"));
assertThat(widget).isEqualTo(expectedWidget);
assertThat(predicate.apply(variable)).isFalse();
assertThat(widgesFiles).containsOnly(temporaryFolder.toPath().resolve("pbLabel").resolve("pbLabel.js"), temporaryFolder.toPath().resolve("paragraph") .resolve("paragraph.js")); assertThat(widgesFiles).doesNotContain(temporaryFolder.toPath().resolve("pbContainer").resolve("pbContainer.js"));
assertThat(page.getVariables()).contains(entry("context", anURLVariable().value("../API/bpm/userTask/{{taskId}}/context").build()));
assertThat(read(jsonFile)).isEqualTo("{\\"francais\\":{\\"A page\\":\\"Une page\\"}}");
assertThat(savedObject.getDesignerVersion()).isEqualTo(DESIGNER_VERSION);
assertThat(page.getAssets().iterator().next().getId()).isNotNull();
assertThat(assets).hasSize(2); assertThat(assets).extracting("name").contains("file1.css", "file2.css");
assertThat(predicate.apply(variable)).isFalse();
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule");
assertThat(pageWithoutUUID.getUUID()).isEqualTo(pageWithoutUUID.getId());
assertThat(assetReturned.getName()).isEqualTo("asset1"); assertThat(assets[0].getOrder()).isEqualTo(2); assertThat(assets[1].getOrder()).isEqualTo(1); assertThat(assets[2].getOrder()).isEqualTo(3);
assertThat(modules).isEmpty();
assertThat(errorMessage.getMessage()).isEqualTo("an error message");
assertThat(assets).isNotEmpty();
assertThat(version.isGreaterThan("1.1.0")).isTrue(); assertThat(version.isGreaterThan("1.2.2-SNAPSHOT")).isTrue(); assertThat(version.isGreaterThan("1.2.1")).isTrue(); assertThat(version.isGreaterThan("1.2.3")).isFalse(); assertThat(version.isGreaterThan("1.2.3-SNAPSHOT")).isFalse(); assertThat(version.isGreaterThan("2.0.0")).isFalse();
assertThat(submitButon.getId()).isEqualTo("pbButton"); assertThat(submitButon.getPropertyValues()).contains( entry(ParameterConstants.DATA_TO_SEND_PARAMETER, anExpressionPropertyValue("formOutput")), entry(ParameterConstants.ACTION_PARAMETER, aConstantPropertyValue(ButtonAction.SUBMIT_TASK.getValue())), entry(ParameterConstants.TARGET_URL_ON_SUCCESS_PARAMETER, aInterpolationPropertyValue("/bonita")));
assertThat(pageWithUUID.getUUID()).isEqualTo(uuid);
assertThat(objects).isEmpty();
assertThat(widget).isInstanceOf(TextWidget.class); assertThat(widget.getHidden()).isEqualTo("!reference"); assertThat(((TextWidget) widget).isLabelHidden()).isFalse(); assertThat(((TextWidget) widget).getLabel()).isEqualTo("Reference"); assertThat(((TextWidget) widget).getText()).isEqualTo("{{reference}}");
assertThat(component.getDimension()).isEqualTo(12);
assertThat(page.getVariables().keySet()).contains("submit_errors_list"); assertThat(submitButton.getId()).isEqualTo("pbButton"); assertThat(dataFromErrorProperty).isNotNull(); assertThat(dataFromErrorProperty.getValue()).isEqualTo("formOutput._submitError"); assertThat(errorText.getId()).isEqualTo("pbText"); assertThat(hiddenProperty).isNotNull(); assertThat(hiddenProperty.getValue()).isEqualTo("!formOutput._submitError.message");
assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("formInput.employee");
assertThat(element.getPropertyValues().get("placeholder").getValue()).isEqualTo(new PbInput().getPlaceholder());
assertThat(page.getVariables()).contains(entry("employee_query",anURLVariable().value("../API/bdm/businessData/org.test.Employee?q=find&p=0&c=99").build()));
assertThat(url).isEqualTo("GET|group1/group2");
assertThat(elements.size()).isEqualTo(2); assertThat(((Component) elements.get(0)).getId()).isEqualTo("pbTitle"); assertThat(multipleContainer.getPropertyValues().get("repeatedCollection").getValue()).isEqualTo("customer_selected.labels");
assertThat(container.getRows().get(0)).isEqualTo(new ArrayList<>());
assertThat(predicate.apply(aComponent() .withPropertyValue("foo", "whatever", "bar") .build())).isFalse();
assertThat(contract.getInput()).extracting("name", "type", "description", "mandatory", "multiple", "input") .contains(tuple("", String.class.getName(), null, false, false, newArrayList()));
assertThat(isSupported).isTrue();
assertThat(component.getPropertyValues().get("bar").getType()).isEqualTo("constant");
assertThat(objectMapper.prettyPrint("{\\"foo\\":\\"bar\\"}")).isEqualTo("{" + System.lineSeparator() + " \\"foo\\" : \\"bar\\"" + System.lineSeparator() + "}");
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process", "GET|bpm/userTask");
assertThat(new String(languagePackFactory.create(poFile).toJson())) .isEqualTo("{\\"francais\\":{\\"A page\\":[\\"Une page\\",\\"Des pages\\"]}}");
assertThat(foo.getType()).isEqualTo("expression"); assertThat(foo.getValue()).isEqualTo("bar");
assertThat(predicate.apply(aComponent() .withPropertyValue("foo", "constant", "bar") .build())).isFalse();
assertThat(page.getType()).isEqualTo("form");
assertThat(exists(destination.toPath().resolve("widgets"))).isTrue();
assertThat(widget).isInstanceOf(TextWidget.class); assertThat(widget.getHidden()).isEqualTo("!aggregatedReference"); assertThat(((TextWidget) widget).isLabelHidden()).isFalse(); assertThat(((TextWidget) widget).getLabel()).isEqualTo("Aggregated Reference"); assertThat(((TextWidget) widget).getText()).isEqualTo("{{aggregatedReference}}");
assertThat(grabTaskInformation(page).getRows().get(1).get(0)).isEqualToIgnoringGivenFields(description.toComponent(new DimensionFactory()), "reference");
assertThat(widgets).containsOnly(custom1, custom2);
assertThat(component.isWithTimeZone()).isEqualTo(false);
assertThat(managerSelect.getId()).isEqualTo("pbSelect"); assertThat(pValue.getType()).isEqualTo("expression"); assertThat(pValue.getValue()).isEqualTo("employee_query"); assertThat(pValue.getType()).isEqualTo("variable"); assertThat(pValue.getValue()).isEqualTo("employee.manager");
assertThat(content).isEqualTo("file1file2".getBytes());
assertThat(properties).contains("contentType=layout");
assertThat(component.getPropertyValues().get("bar").getType()).isEqualTo("constant");
assertThat(HttpFile.getOriginalFilename("myfile.js")).isEqualTo("myfile.js");
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process", "GET|bpm/userTask");
assertThat(PropertyValue.getType()).isEqualTo("interpolation"); assertThat(PropertyValue.getValue()).isEqualTo("/bonita");
assertThat(widget).isInstanceOf(TextWidget.class); assertThat(widget.getHidden()).isEqualTo("!reference"); assertThat(((TextWidget) widget).isLabelHidden()).isFalse(); assertThat(((TextWidget) widget).getLabel()).isEqualTo("Reference"); assertThat(((TextWidget) widget).getText()).isEqualTo("{{reference|uiDate}}");
assertThat(widget.getTemplate()).isEqualTo(htmlContent); assertThat(widget.getController()).isEqualTo(jsContent);
assertThat(dest.resolve("foo.txt").toFile()).exists(); assertThat(dest.resolve("foo.txt").toFile()).usingCharset(StandardCharsets.UTF_8).hasContent("foobar");
assertThat(expectedReport).isEqualTo(report);
assertThat(getTaskFormContainerContent(page).getRows()).hasSize(6);
assertThat(assetReturned.getName()).isEqualTo("asset3"); assertThat(assets[0].getOrder()).isEqualTo(1); assertThat(assets[1].getOrder()).isEqualTo(3); assertThat(assets[2].getOrder()).isEqualTo(2);
assertThat(report.getStatus()).isEqualTo(ImportReport.Status.CONFLICT);
assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("$collection");
assertThat(widget.getTemplate()).isEqualTo(htmlContent); assertThat(widget.getController()).isEqualTo(jsContent);
assertThat(predicate.apply(variable)).isFalse();
assertThat(savedObject).isEqualTo(expectedObject);
assertThat(component).isInstanceOf(InputWidget.class);
assertThat(exists(destination.toPath().resolve("widgets"))).isTrue();
assertThat(htmlSanitizer.escapeSingleQuotesAndNewLines("Here\\n\'goes\'\\nthe\\r\\nmessage")) .isEqualTo("Here\\\\n\\\\\'goes\\\\\'\\\\nthe\\\\nmessage");
assertThat(lockStatus).isEqualTo(LockStatus.LOCKED_BY_ME);
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process", "GET|bpm/userTask");
assertThat(importer).isEqualTo(widgetArtifactImporter);
assertThat(properties).contains("resources=[GET|living/application-menu]");
assertThat(foo.getType()).isEqualTo("variable"); assertThat(foo.getValue()).isEqualTo("bar");
assertThat(page.getAssets()).hasSize(3); assertThat(page.getAssets()).extracting("name").contains("file1.css", "file2.css", "existing-asset.js");
assertThat(listener.getChanged()).containsExactly(aFile);
assertThat(element.getPropertyValues().get("label").getValue()).isEqualTo("A Complicated Camel Case Input Name");
assertThat(assets).extracting("name").contains("myfile.js", "myfile.css"); assertThat(assets).extracting("active").contains(true, false);
assertThat(loader.indexOf("mon exemple complet".getBytes(), null)).isEqualTo(-1);
assertThat(assets).extracting("name").containsOnly("myfile.js", "myfile.css");
assertThat(pageAfterJsonProcessing.getName()).isNotNull(); assertThat(pageAfterJsonProcessing.getId()).isNotNull(); assertThat(pageAfterJsonProcessing.getVariables()).isNotEmpty(); assertThat(pageAfterJsonProcessing.getRows()).isNotNull(); assertThat(((Component) ((Container) pageAfterJsonProcessing.getRows().get(0).get(1)).getRows().get(1).get(1)).getDescription()).isNotNull().isNotEmpty();
assertThat(widget).isInstanceOf(FileUploadWidget.class); assertThat(((FileUploadWidget) widget).getRequiredExpression()).isPresent(); assertThat(((FileUploadWidget) widget).getRequiredExpression().get()) .isEqualTo(String.format("!%s.id", ParametrizedWidgetFactory.ITEM_ITERATOR)); assertThat(widget).isInstanceOf(FileUploadWidget.class); assertThat(((FileUploadWidget) widget).getRequiredExpression()).isNotPresent();
assertThat(widget.getProperties()).contains(expectedProperty);
assertThat(workspacePathResolver.getPagesRepositoryPath()) .isEqualTo(Paths.get(System.getProperty("user.home") + "/.bonita/pages"));
assertThat(properties).contains("resources=[]");
assertThat(page.getRows()).hasSize(1); assertThat(page.getRows().get(0)).hasSize(1); assertThat(page.getRows().get(0).get(0)).isInstanceOf(Component.class);
assertThat(importer).isEqualTo(pageArtifactImporter);
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule");
assertThat(component.getDimension()).isEqualTo(12);
assertThat(loader.indexOf("mon exemple complet".getBytes(), "rex".getBytes())).isEqualTo(-1);
assertThat(restClientProperties.getUrl()).isNull();
assertThat(widgetRepository.getByIds(Sets.newHashSet("input", "label"))).hasSize(2) .extracting("id").containsOnly("input", "label");
assertThat(component.getDescription()).isNotNull().isNotEmpty();
assertThat(component.getPropertyValues().get("foo").getType()).isEqualTo("constant");
assertThat(data).hasSize(1); assertThat(data.iterator().next().name()).isEqualTo("employee_query");
assertThat(workspacePathResolver.getWidgetsRepositoryPath()) .isEqualTo(Paths.get(System.getProperty("user.home") + "/.bonita/widgets"));
assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).isEqualTo("foobar");
assertThat(predicate.apply(variable)).isTrue();
assertThat(component).isInstanceOf(DatePickerWidget.class);
assertThat(select.getId()).isEqualTo("pbSelect");
assertThat(version.toString()).isEqualTo("1.2.2-SNAPHOT");
assertThat(modules).containsOnly("GET|living/application-menu", "POST|bpm/process");
assertThat(widget).isInstanceOf(TextWidget.class); assertThat(widget.getHidden()).isEqualTo("!reference"); assertThat(((TextWidget) widget).isLabelHidden()).isFalse(); assertThat(((TextWidget) widget).getLabel()).isEqualTo("Reference"); assertThat(((TextWidget) widget).getText()).isEqualTo("{{reference}}");
assertThat(isSupported).isTrue();
assertThat(HttpFile.getOriginalFilename("C:\\\\Users\\\\frontend\\\\myfile.js")).isEqualTo("myfile.js");
assertThat(loader.contains(repoDirectory, "object2")).isFalse();
assertThat(element.getId()).isEqualTo("pbInput");
assertThat(container).isInstanceOf(Container.class); assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("person_selected.names"); assertThat(inputPropertyValue.getValue()).isEqualTo("$item");
assertThat(container.getDimension()).isEqualTo(12);
assertThat(page.getInactiveAssets()).isNotEmpty().contains("assetUIID");
assertThat(modules).containsOnly("component1Module", "component1OtherModule", "component2Module", "component2OtherModule", "tabContainerModule");
assertEquals("Contract", checkCoinNameExist("Contract", coins));
assertEquals("Contract(1)", checkCoinNameExist("Contract", coins));
assertEquals("Contract(4)", checkCoinNameExist("Contract", coins));
assertEquals("F456FD839AE84091678D3C3A79C7C4B3", actual);
assertEquals(0, adapter.getApplicationFilterMaps(context).size());
assertTrue(adapter.canBoundTo("Apache Tomcat/9.0"));
assertTrue(adapter.canBoundTo("Pivotal tc..../7.0"));
assertFalse(accessor.reset(new Object()));
assertNull(adapter.getNamingToken(context));
assertEquals(0, adapter.getApplicationFilterMaps(context).size());
assertTrue(valve.canBoundTo("Pivotal tc..../8.5"));
assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/9.0"));
assertFalse(adapter.canBoundTo(null));
assertFalse(adapter.canBoundTo("Other"));
assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/9.0"));
assertTrue(adapter.canBoundTo("Apache Tomcat/8.5"));
assertEquals(0, adapter.getApplicationInitParams(context).size());
assertNull(adapter.getNamingToken(context));
assertFalse(adapter.canBoundTo("Other"));
assertThat(certs).doesNotContainNull(); assertThat(certs.size()).isEqualTo(2); assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com"); assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
assertEquals(1, adapter.getApplicationFilters(context).size());
assertTrue(adapter.resourceExists("name", context));
assertEquals(2, adapter.getFilterMappings(map, "dispatcherMap", "filterClass").size());
assertFalse(adapter.canBoundTo(null));
assertEquals("tomcat-dbcp2", accessor.getInfo(source).getType());
assertEquals("org.apache.jsp.name", context.getFQCN());
assertFalse(adapter.canBoundTo(null));
assertFalse(accessor.reset(new Object()));
assertTrue(adapter.canBoundTo("NonStop(tm) Servlets For JavaServer Pages(tm) v8.5"));
assertEquals("Tomcat90AgentValve[Container is null]", valve.toString());
assertFalse(adapter.canBoundTo("Other"));
assertNull(accessor.getInfo(new Object()));
assertEquals("Tomcat10AgentValve[Container is null]", valve.toString());
assertEquals(1, adapter.getApplicationFilters(context).size());
assertEquals(0, adapter.getApplicationFilterMaps(context).size());
assertEquals(0, adapter.getApplicationInitParams(context).size());
assertEquals(0, adapter.getApplicationInitParams(context).size());
assertThat(certs).doesNotContainNull(); assertThat(certs.size()).isEqualTo(2); assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com"); assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
assertEquals(context, adapter.getNamingToken(context));
assertEquals("tomcat-dbcp", accessor.getInfo(new BasicDataSource()).getType());
assertFalse(adapter.canBoundTo(null));
assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/7.0"));
assertEquals("tomcat-dbcp2", accessor.getInfo(source).getType());
assertEquals(1, adapter.getApplicationFilters(context).size());
assertTrue(adapter.canBoundTo("Apache Tomcat/7.0"));
assertEquals("org.apache.jsp.name", context.getFQCN());
assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/8.5"));
assertFalse(accessor.reset(new Object()));
assertEquals(0, adapter.getApplicationFilterMaps(context).size());
assertNull(accessor.getInfo(new Object()));
assertEquals("psiprobe.Tomcat70AgentValve[Container is null]", valve.toString());
assertEquals(2, adapter.getFilterMappings(map, "dispatcherMap", "filterClass").size());
assertTrue(adapter.resourceExists("name", context));
assertEquals(1, adapter.getApplicationFilters(context).size());
assertThat(certs).doesNotContainNull(); assertThat(certs.size()).isEqualTo(2); assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com"); assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
assertEquals("psiprobe.Tomcat85AgentValve[Container is null]", valve.toString());
assertTrue(adapter.resourceExists("name", context));
assertNull(accessor.getInfo(new Object()));
assertTrue(adapter.canBoundTo("Apache Tomcat/9.0"));
assertEquals("org.apache.jsp.name", context.getFQCN());
assertEquals(2, adapter.getFilterMappings(map, "dispatcherMap", "filterClass").size());
assertTrue(adapter.canBoundTo("Pivotal tc..../9.0"));
assertFalse(accessor.reset(new Object()));
assertEquals("tomcat-dbcp2", accessor.getInfo(source).getType());
assertEquals(2, adapter.getFilterMappings(map, "dispatcherMap", "filterClass").size());
assertEquals("org.apache.jsp.name", context.getFQCN());
assertNull(accessor.getInfo(new Object()));
assertTrue(adapter.canBoundTo("Pivotal tc..../9.0"));
assertThat(certs).doesNotContainNull(); assertThat(certs.size()).isEqualTo(2); assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com"); assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
assertTrue(adapter.canBoundTo("NonStop(tm) Servlets For JavaServer Pages(tm) v7.0"));
assertEquals(0, adapter.getApplicationInitParams(context).size());
assertFalse(adapter.canBoundTo("Other"));
assertFalse(adapter.resourceExists("name", context));
assertNull(adapter.getNamingToken(context));
assertEquals(!hitsfile.isLeft() ? hits.get(i).rightStrand : hits.get(i).leftStrand, Hits.getStrandOne(las.get(i))); assertEquals(hitsfile.isLeft() ? hits.get(i).rightStrand : hits.get(i).leftStrand, Hits.getStrandTwo(las.get(i)));
assertEquals(!hitsfile.isLeft() ? hits.get(i).rightLength : hits.get(i).leftLength, Hits.getLengthOne(las.get(i))); assertEquals(hitsfile.isLeft() ? hits.get(i).rightLength : hits.get(i).leftLength, Hits.getLengthTwo(las.get(i)));
assertTrue("Incorrect response", clientManager.configClient(ssid, "admin-state", "enable")); assertFalse("Incorrect response", clientManager.configClient(ssid, "end-session", ""));
assertEquals(peer1, peersConfig.getPeerForIp(IP1));
assertNotEquals(key1, key2); assertNotEquals(key3, key4);
assertEquals(INTF_NAME1, peersConfig.getInterfaceNameForPeer(IP1));
assertEquals(sdxl2, old); assertNotEquals(sdxl2, old);
assertEquals("Incorrect response", 0, clientManager.getClients(null).size()); assertEquals("Incorrect response", 0, clientManager.getClients(ssid).size());
assertEquals(intentList.size(), manager.intentService.getIntentCount()); assertTrue(format("Comparing %s and %s", emulatedIntent, realIntent), IntentUtils.intentsAreEqual(emulatedIntent, realIntent)); assertTrue(found);
assertEquals(peer1, peersConfig.getPeerForName(Optional.of(NAME1)));
assertEquals(peers, peersConfig.bgpPeers());
assertEquals(initialSize + 1, peersConfig.bgpPeers().size()); assertEquals(peers, peersConfig.bgpPeers());
assertEquals(expectedVCs, vcs); assertEquals(Collections.emptySet(), vcs); assertEquals(expectedVCs, vcs);
assertEquals("Incorrect response", 0, sessionList.size());
assertEquals(initialSize - 1, peersConfig.bgpPeers().size()); assertEquals(peers, peersConfig.bgpPeers());
assertEquals(vc, manager.getVC(one, two)); assertNull(manager.getVC(cpLeft, cpRight));
assertEquals("test name", requestCaptor.getValue().getName());
assertEquals("Hello test name", reply.getMessage());
assertTrue(expectSolarDate1.equals(solarDateResult1)); assertTrue(expectSolarDate2.equals(solarDateResult2));
assertThat(context.fromFieldValue("test", ImmutableMap.of("@id", "test"))).isEqualTo("test"); assertThat(context.fromFieldValue("test", ImmutableMap.of("@id", "test", "foo", "bar"))).isEqualTo(ImmutableMap.of("@id", "test", "foo", "bar"));
assertThat(partition.isPresent()).isTrue(); assertThat(partition.value()).isEqualTo("abc");
assertThat((Map<?, ?>) reader.nextEntry()).containsEntry("test", "bar"); assertThat(reader.nextEntry()).isNull();
assertThat(roots).hasSize(1); assertThat(roots.get(0).label()).isEqualTo(Bdio.Class.Project.name());
assertThat(map).containsEntry(Bdio.ObjectProperty.parent.toString(), ImmutableMap.of("@id", currentVersionId));
assertThat(map).containsEntry(Bdio.DataProperty.creationDateTime.toString(), ImmutableMap.of("@type", Bdio.Datatype.DateTime.toString(), "@value", now.toString()));
assertThat(bdioObject).containsKey("test1"); assertThat(bdioObject).doesNotContainKey("test1");
assertThat(entries).hasSize(1);
assertThat(metadata.asNamedGraph(Lists.newArrayList("foobar"), "test1")).containsExactly( "test1", "foo", "@graph", Lists.newArrayList("foobar"));
assertThat(entries).hasSize(2);
assertThat(context.fromFieldValue("test", ImmutableList.of("foobar"))).isEqualTo("foobar"); assertThat(context.fromFieldValue("test2", ImmutableList.of("foobar"))).isEqualTo(ImmutableList.of("foobar")); assertThat(context.fromFieldValue("test2", "foobar")).isEqualTo(ImmutableList.of("foobar"));
assertThat(roots).hasSize(1); assertThat(roots.get(0).<String> value(Bdio.DataProperty.name.name())).isEqualTo("project");
assertThat(entry).isInstanceOf(List.class); assertThat((List<?>) entry).containsExactly("test"); assertThat(reader.nextEntry()).isNull();
assertThat(entry).isInstanceOf(Map.class); assertThat((Map<?, ?>) entry).containsEntry("test", "foo"); assertThat(reader.nextEntry()).isNull();
assertThat(entry).isInstanceOf(List.class); assertThat((List<?>) entry).containsExactly("test"); assertThat(reader.nextEntry()).isNull();
assertThat(entries).hasSize(1);
assertThat(VertexProperties.streamValue(vp)).containsExactly("foo", "bar");
assertThat(context.putFieldValue(map, Bdio.ObjectProperty.parent, null)).isNull(); assertThat(map).doesNotContainKey(Bdio.ObjectProperty.parent.toString());
assertThat(namedGraph.property(TT.id).orElse(null)).isEqualTo(metadata.id());
assertThat(namedGraphs.hasNext()).isTrue();
assertThat(context.fromFieldValue("test", ImmutableMap.of("@value", "test"))).isEqualTo("test"); assertThat(context.fromFieldValue("test", ImmutableMap.of("@value", Boolean.TRUE))).isEqualTo(Boolean.TRUE); assertThat(context.fromFieldValue("test", ImmutableMap.of("@value", Integer.valueOf(1)))).isEqualTo(Integer.valueOf(1));
assertThat(directDependencyNames).containsExactly("test1", "test2");
assertThat(entry1).isInstanceOf(Map.class); assertThat((Map<?, ?>) entry1).containsEntry("test", "foo"); assertThat(entry2).isInstanceOf(Map.class); assertThat((Map<?, ?>) entry2).containsEntry("test", "bar"); assertThat(reader.nextEntry()).isNull();
assertThat(entries).hasSize(2);
assertThat(reader.nextEntry()).isNull();
assertThat((String[]) context.fromFieldValue("test2", ImmutableList.of("foobar"))).isEqualTo(new String[] { "foobar" }); assertThat((String[]) context.fromFieldValue("test2", Arrays.asList((String) null))).isNull();
assertThat(bdioObject).containsEntry("test1", "foo"); assertThat(bdioObject).containsEntry("test1", "bar"); assertThat(bdioObject).containsEntry("X:Y:Z", 1L);
assertThat(context.putFieldValue(map, Bdio.DataProperty.name, "bar")).isEqualTo("bar"); assertThat(map).containsEntry(Bdio.DataProperty.name.toString(), "bar");
assertThat(namedGraphs.hasNext()).isTrue();
assertThat((Map<?, ?>) reader.nextEntry()).containsEntry("test", "bar"); assertThat(reader.nextEntry()).isNull();
assertThat(metadata.asNamedGraph()).containsExactly( "test1", "foo", "test2", "bar", "@graph", Lists.newArrayList());
assertThat(context.putFieldValue(map, Bdio.DataProperty.name, null)).isNull(); assertThat(map).doesNotContainKey(Bdio.DataProperty.name.toString());
assertThat(metadata.asNamedGraph(Lists.newArrayList("foobar"))).containsExactly( "test1", "foo", "test2", "bar", "@graph", Lists.newArrayList("foobar"));
assertThat(entry).isInstanceOf(Map.class); assertThat((Map<?, ?>) entry).containsEntry("test", "foo"); assertThat(reader.nextEntry()).isNull();
assertThat(context.fromFieldValue("test", Arrays.asList(null, null))).isNull();
assertThat(LegacyUtilities.guessScheme(testCase[1])).named(testCase[0]).isEqualTo(testCase[2]);
assertThat(map).containsEntry(Bdio.DataProperty.name.toString(), "foobar");
assertThat(map).containsEntry(Bdio.DataProperty.byteCount.toString(), ImmutableMap.of("@type", Bdio.Datatype.Long.toString(), "@value", 1L));
assertEquals(Utils.kv2Map("k1", "v1", "k2", "v2"), ExtensionLoader.parseExtAttribute("k1=v1,k2=v2")); assertEquals(Utils.kv2Map("k1", "v1", "k2", "v2", "k3", ""), ExtensionLoader.parseExtAttribute(" k1 =v1, k2= v2 , k3 ")); assertEquals(Utils.kv2Map("k1", ""), ExtensionLoader.parseExtAttribute("k1"));
assertThat(expected.getMessage(), allOf(containsString(NoExtensionExt.class.getName()), containsString("is not a extension"), containsString("WITHOUT @Extension Annotation")));
assertThat(expected.getMessage(), containsString("default name(invalidName]) of extension com.alibaba.cooma.ext8.InvalidNameExt2 is invalid"));
assertThat(expected.getMessage(), containsString("Extension type == null"));
assertThat(expected.getMessage(), containsString("type(com.alibaba.cooma.ExtensionLoaderTest) is not interface"));
assertThat(expected.getMessage(), containsString("default name(invalid-name&) of extension com.alibaba.cooma.ext8.InvalidNameExt is invalid"));
assertThat(qavNameMatcher.matches("com.my.module$submodule.*", "com.my.module$submodule.Clazz"), is(true)); assertThat(qavNameMatcher.matches("com.my.module.*", "com.my.module.Clazz$Subclazz"), is(true));
assertThat(e.getMessage(), startsWith("File not found: "));
assertThat(entries.size(), is(14));
assertThat(result.getViolationMessage(), is("There are unmapped classes in architecture Test-Architecture: [com.my.other.nodes.A]"));
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(1)); assertThat(nodes, hasSize(5));
assertThat(e.getMessage()).startsWith("Parsing of query failed: invalid:");
assertThat(entries.size(), is(1)); assertThat(entries.get("WEB-INF/classes/my-resource.txt"), is(24));
assertThat(result, is(0));
assertThat(graphMapper.getNodes()).hasSize(1); assertThat(node.getProperties()).hasSize(7); assertThat(node.getProperty("b")).isInstanceOf(Long.class);
assertThat(files, hasSize(0));
assertThat(nodes).hasSize(1); assertThat(nodes).contains(v1); assertThat(nodes).hasSize(3); assertThat(nodes).contains(v3, v4, v5);
assertThat(dependencyGraph.hasNode(className), is(true)); assertThat(dependencyGraph.hasNode(DependencyGraphFactory.class.getName()), is(true)); assertThat(dependencyGraph.getIncomingEdges(to).size(), is(1)); assertThat(dependencyGraph.hasNode("java.lang.Object"), is(false)); assertThat(dependency, notNullValue()); assertThat(dependency.getDependencyType(), is(DependencyType.READ_WRITE));
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(1)); assertThat(resultPage.getNumber(), is(1)); assertThat(nodes, hasSize(0));
assertThat(qavMavenMojo, notNullValue()); assertThat(qavMavenMojo.toString(), is("QavMavenMojo[project=<null>,useDefaultInputDirs=true,failOnError=false,analysisFilename=<null>,outputDir=<null>]"));
assertThat(filter.isAccepted(n1)).isTrue(); assertThat(filter.isAccepted(n2)).isFalse(); assertThat(filter.isAccepted(n3)).isFalse();
assertThat(DependencyUtil.isIgnorable("L[java.lang.Object"), is(false));
assertThat(DotExportStyles.getRankSep(16), greaterThan(1.1)); assertThat(DotExportStyles.getRankSep(16), lessThan(1.3)); assertThat(DotExportStyles.getRankSep(250), greaterThan(4.7)); assertThat(DotExportStyles.getRankSep(250), lessThan(4.8));
assertThat(e.getMessage(), startsWith("Can not find analysis file ")); assertThat(e.getMessage().replaceAll("\\\\\\\\", "/"), endsWith("/not/existing/file"));
assertThat(e.getMessage(), is("Class could not be read"));
assertThat(filter.isAccepted(n1), is(false)); assertThat(filter.isAccepted(n2), is(false)); assertThat(filter.isAccepted(n3), is(true));
assertThat(FileSystemUtil.checkFileOrResourceExists(filename)).isTrue();
assertThat(dependencyGraph.getAllNodes().size(), is(0));
assertThat(filter.isAccepted(new Node("a.Clazz")), is(true)); assertThat(filter.isAccepted(new Node("b.Clazz")), is(true)); assertThat(filter.isAccepted(new Node("c.Clazz")), is(true)); assertThat(filter.isAccepted(new Node("a.my.Clazz")), is(true)); assertThat(filter.isAccepted(new Node("other.Clazz")), is(false));
assertThat(architecture, notNullValue()); assertThat(checker.isOk(), is(true)); assertThat(checker.getViolationMessages(), hasSize(0)); assertThat(checker.getViolationMessage(), nullValue());
assertThat(pluginDocTree.getPlugin("MyPlugin"), nullValue()); assertThat(pluginDocTree.getPlugin("MyPlugin"), is(pluginDoc1));
assertThat(e).hasMessageStartingWith("com.fasterxml.jackson.core.JsonParseException: Unexpected character \'T\'");
assertThat(GraphExportStyles.getLabel(abbreviations, "com.my.any.Clazz"), is("C.any.Clazz")); assertThat(GraphExportStyles.getLabel(abbreviations, "org.apache.Helper"), is("A.Helper")); assertThat(GraphExportStyles.getLabel(abbreviations, "org.apache"), is("A")); assertThat(GraphExportStyles.getLabel(abbreviations, "org"), is("org"));
assertThat(graphML, notNullValue()); assertThat(graphML, containsString("root.c1.n1")); assertThat(graphML, containsString("_root_c1 -> _root_c2 [ color = \\"#67001f\\", fontcolor = \\"#67001f\\", penwidth = 3.0, style = dashed , label=\\"2\\", headlabel=\\"1\\", taillabel=\\"2\\"];"));
assertThat(graph.getAllNodes()).hasSize(5); assertThat(graph.getAllNodes()).hasSize(10);
assertThat(written, is(expected));
assertThat(graphController.getInfo().getInfo(), startsWith("Graph with: 5 nodes and 3 edges. Filename: ")); assertThat(graphController.getInfo().getInfo(), endsWith("testGraph1.json"));
assertThat(filter.isAccepted(new Node("x1")), is(true)); assertThat(filter.isAccepted(new Node("x219")), is(true)); assertThat(filter.isAccepted(new Node("foo")), is(false));
assertThat(commandDoc, notNullValue()); assertThat(commandDoc, is(expected));
assertThat(AsmUtil.toClassName("java.util.List", true), is("java.util.List")); assertThat(AsmUtil.toClassName("java.util.List$Entry", true), is("java.util.List")); assertThat(AsmUtil.toClassName("java.util.List$Entry", false), is("java.util.List$Entry"));
assertThat(DotExportStyles.getNodeStyle(node), is("color = black")); assertThat(DotExportStyles.getNodeStyle(node), is("color = red, penwidth = 3.0"));
assertThat(abbreviation.abbreviate("de.qaware"), is("Q")); assertThat(abbreviation.abbreviate("com.qaware"), is("Q")); assertThat(abbreviation.abbreviate("de.qaware.qav"), is("Q.qav")); assertThat(abbreviation.abbreviate("com.qaware.qav"), is("Q.qav"));
assertThat(result, notNullValue()); assertThat(result.getFailedSteps(), hasSize(0)); assertThat(result.isFailedWithException(), is(false)); assertThat(result.getExceptionMessage(), nullValue());
assertThat(dependencyGraph.getAllNodes(), hasSize(0));
assertThat(component, notNullValue()); assertThat(checker.isOk(), is(true)); assertThat(checker.getViolationMessage(), nullValue());
assertThat(qavNameMatcher.matches("**.commons**", "org.apache.commons.lang3"), is(false)); assertThat(qavNameMatcher.matches("**.commons.**", "org.apache.commons.lang3"), is(true));
assertThat(factory.getComponentName("com.example.api.A", 0), is("com.example.api")); assertThat(factory.getComponentName("com.example.api", 0), is("com.example")); assertThat(factory.getComponentName("com.example", 0), is("com")); assertThat(factory.getComponentName("com", 0), nullValue()); assertThat(factory.getComponentName("", 0), nullValue()); assertThat(e.getMessage(), is("name"));
assertThat(e).hasMessageStartingWith("java.io.FileNotFoundException:");
assertThat(checker.isOk(), is(false)); assertThat(checker.getViolationMessage(), is("1 unused rules: [com.my.a: com.my.other]"));
assertThat(qavMavenMojo, notNullValue()); assertThat(qavMavenMojo.toString(), is("QavMavenMojo[project=<null>,useDefaultInputDirs=true,failOnError=false,analysisFilename=qa/my.qav,outputDir=<null>]"));
assertThat(dependency.getDependencyType(), is(DependencyType.CREATE)); assertThat(dependency.toString(), is("n1 --[CREATE]--> n2"));
assertThat(n1 == n2, is(false)); assertThat(n1.equals(n2), is(true)); assertThat(n1.equals(null), is(false)); assertThat(n1.equals("some-other-data-type"), is(false));
assertThat(files.contains(new File(thisTestFile.getPath())), CoreMatchers.is(true)); assertThat(files.contains(new File(aTestFile.getPath())), CoreMatchers.is(true));
assertThat(architecture.getName(), is("Package")); assertThat(architecture.getAllComponents(), hasSize(1)); assertThat(getComponentNameList(architecture), is(Lists.newArrayList("ClassInDefaultPackage"))); assertThat(architecture.getParentComponent("ClassInDefaultPackage"), is(architecture)); assertThat(architecture.getParentComponent("anythingElse"), nullValue());
assertFalse(dir.exists()); assertFalse(dir.exists());
assertThat(checker.isOk(), is(true)); assertThat(checker.getViolationMessages(), hasSize(0)); assertThat(checker.getViolationMessage(), nullValue());
assertThat(graphML, notNullValue()); assertThat(graphML, containsString("root.c1.n1")); assertThat(graphML, containsString("<y:EdgeLabel"));
assertThat(node, notNullValue()); assertThat(node.getProperties().get("KEY"), is(5));
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(2)); assertThat(resultPage.getNumber(), is(0)); assertThat(nodes, hasSize(3)); assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(2)); assertThat(resultPage.getNumber(), is(1)); assertThat(nodes, hasSize(2));
assertThat(nodes).hasSize(1); assertThat(nodes).contains(v2);
assertThat(result, notNullValue()); assertThat(result.getFailedSteps(), hasSize(0)); assertThat(result.isFailedWithException(), is(true)); assertThat(result.getExceptionMessage(), startsWith("Can not find analysis file")); assertThat(result.getExceptionMessage().replaceAll("\\\\\\\\", "/"), endsWith("not/existing/file"));
assertThat(result, notNullValue()); assertThat(result, is(expected));
assertThat(e.getCause()).isInstanceOf(IOException.class); assertThat(e.getMessage()).startsWith("com.fasterxml.jackson.core.JsonParseException: Unexpected close tag </invalid-end-tag>; expected </start-tag>");
assertThat(dependencyGraph.getAllNodes(), hasSize(0));
assertThat(result, containsString("group TEST"));
assertThat(checker.isOk(), is(false)); assertThat(checker.getViolationMessages(), hasSize(1)); assertThat(checker.getViolationMessages().get(0), is("com.my.a.b --[READ_ONLY]--> org.other")); assertThat(checker.getViolationMessage(), is("1 uncovered dependencies: [com.my.a.b --[READ_ONLY]--> org.other]"));
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(1)); assertThat(nodes, hasSize(5));
assertThat(architecture.getName(), is("Package")); assertThat(architecture.getAllComponents(), hasSize(0));
assertThat(new NodeNameInFilter("x*").isAccepted(null), is(false));
assertThat(DependencyUtil.isIgnorable("java.lang.Object"), is(true)); assertThat(DependencyUtil.isIgnorable("java.lang.String"), is(true)); assertThat(DependencyUtil.isIgnorable("B"), is(true)); assertThat(DependencyUtil.isIgnorable("int[][]"), is(true)); assertThat(DependencyUtil.isIgnorable("java.util.List"), is(false)); assertThat(DependencyUtil.isIgnorable(""), is(false));
assertThat(edgeStyle, notNullValue()); assertThat(edgeStyle.getColor(), is("#b2182b")); assertThat(edgeStyle.getWidth(), is("3.0")); assertThat(edgeStyle.getLineStyle(), is("line"));
assertThat(nodes).hasSize(2); assertThat(nodes).contains(v5, v6);
assertThat(check.isOk(), is(false)); assertThat(check.getViolationMessages(), hasSize(1)); assertThat(check.getViolationMessages().get(0), is("Another")); assertThat(check.getViolationMessage(), is("1 components without corresponding classes: [Another]"));
assertThat(dependency.getBaseDependencies().isEmpty(), is(true)); assertThat(dependency.getBaseDependencies(), hasSize(1)); assertThat(dependency.getBaseDependencies(), hasSize(2)); assertThat(dependency.getBaseDependencies(), hasSize(2)); assertThat(dependency.getBaseDependencies(), hasSize(3));
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(0L)); assertThat(resultPage.getTotalPages(), is(0)); assertThat(nodes, hasSize(0));
assertThat(f1.isAccepted(new Node("x")), is(true)); assertThat(f2.isAccepted(new Node("x")), is(true)); assertThat(f3.isAccepted(new Node("x")), is(false));
assertThat(outputDir.exists(), is(false)); assertThat(outputDir.exists(), is(true)); assertThat(file.exists(), is(true)); assertThat(lines.size(), is(2)); assertThat(lines.get(0), is("mydoc")); assertThat(lines.get(1), is("and so on"));
assertThat(qavNameMatcher.matches("xy.**", "xy"), is(true)); assertThat(qavNameMatcher.matches("xy.*", "xy"), is(false)); assertThat(qavNameMatcher.matches("xy", "xy"), is(true)); assertThat(qavNameMatcher.matches("v*", "v1"), is(true)); assertThat(qavNameMatcher.matches("v*", "x1"), is(false));
assertThat(files.contains(new File(aTestFile.getPath())), CoreMatchers.is(true)); assertThat(files.contains(new File(bTestFile.getPath())), CoreMatchers.is(false));
assertThat(pluginDocTree.getPluginNames(), containsInAnyOrder("pluginDoc1", "pluginDoc2"));
assertThat(dependencyGraph.getEdge(a, e), nullValue()); assertThat(x, notNullValue()); assertThat(y, notNullValue()); assertThat(dependencyGraph.getEdge(a, e), notNullValue()); assertThat(dependencyGraph.getEdge(a, e).getDependencyType(), is(DependencyType.INHERIT)); assertThat(dependencyGraph.getEdge(x, y), nullValue());
assertThat(dependencyGraph.getAllNodes()).hasSize(5); assertThat(dependencyGraph.getAllEdges()).hasSize(4);
assertThat(FileSystemUtil.checkFileOrResourceExists("build.gradle"), is(true)); assertThat(FileSystemUtil.checkFileOrResourceExists("/stg/Test.stg"), is(true)); assertThat(FileSystemUtil.checkFileOrResourceExists("classpath:/stg/Test.stg"), is(true)); assertThat(FileSystemUtil.checkFileOrResourceExists("/not/existing/file"), is(false)); assertThat(FileSystemUtil.checkFileOrResourceExists("classpath:/not/existing/resource"), is(false));
assertThat(graphML, notNullValue()); assertThat(graphML, not(containsString("<y:EdgeLabel")));
assertThat(e.getMessage()).startsWith("File not found: ");
assertThat(pluginNameCaptor.getValue(), is("plugin1")); assertThat(docCaptor.getValue().length(), greaterThan(180)); assertThat(docCaptor.getValue().length(), lessThan(300)); assertThat(docCaptor.getValue().contains("\\n==== cmd1"), is(true)); assertThat(docCaptor.getValue().contains("\\n[cols=\\"1a,5a\\"]"), is(true)); assertThat(docCaptor.getValue().contains("This is Result 3"), is(true));
assertThat(f1.isAccepted(new Node("x")), is(true)); assertThat(f2.isAccepted(new Node("x")), is(false));
assertThat(images).hasSize(3); assertThat(images.get(0).getImageName()).isEqualTo("packageGraph"); assertThat(images.get(1).getImageName()).isEqualTo("packageCycleGraph"); assertThat(images.get(2).getImageName()).isEqualTo("legend");
assertThat(r1.toString()).isEqualTo("(c1)-[READ_WRITE]->(c2)"); assertThat(r2.toString()).isEqualTo("(<NONE>)-[null]->(<NONE>)");
assertThat(result, is(1));
assertThat(DotExportStyles.getEdgeStyle(dependency), is("color = \\"#b2182b\\", fontcolor = \\"#b2182b\\", penwidth = 3.0, style = solid"));
assertThat(DependencyUtil.isIgnorable(null), is(true));
assertThat(result, containsString("group TEST"));
assertFalse(dir.exists()); assertTrue(dir.exists()); assertFalse(dir.exists());
assertThat(graph.getAllNodes()).hasSize(5); assertThat(graph.getAllNodes()).hasSize(5);
assertThat(DotExportStyles.getNodeUrl("com_my"), is("/#/node/com_my"));
assertThat(qavMavenMojo, notNullValue()); assertThat(qavMavenMojo.toString(), is("QavMavenMojo[project=<null>,useDefaultInputDirs=false,failOnError=true,analysisFilename=qa/my-own.qav,outputDir=target/qav-report]"));
assertThat(nodeDTO.getName(), is("p1")); assertThat(nodeDTO.getContainedDeps(), hasSize(1)); assertThat(nodeDTO.getContainedDeps().get(0).getSourceName(), is("p1")); assertThat(nodeDTO.getContainedDeps().get(0).getTargetName(), is("v1")); assertThat(nodeDTO.getContainedDeps().get(0).getTypeName(), is("CONTAINS")); assertThat(nodeDTO.getParents(), hasSize(0));
assertThat(e.getCause()).isInstanceOf(IOException.class); assertThat(e.getMessage()).startsWith("com.fasterxml.jackson.core.JsonParseException: Unrecognized token \'This\': was expecting (\'true\', \'false\' or \'null\')");
assertThat(result, containsString("group TEST"));
assertThat(x.getProperty("my-tag"), notNullValue()); assertThat(x.getProperty("my-tag"), is(true)); assertThat(y.getProperty("my-tag"), nullValue());
assertThat(result, containsString("group TEST"));
assertThat(nodes).hasSize(2); assertThat(nodes).contains(v3, v4);
assertThat(graph.hasNode("x"), is(false)); assertEquals(node, x); assertNotSame(node, x); assertThat(graph.hasNode("x"), is(true)); assertSame(x, y);
assertThat(filename, is("src/qa/analysis.groovy"));
assertThat(dependencyGraph.getAllNodes().size()).isEqualTo(1588); assertThat(dependencyGraph.getAllEdges().size()).isGreaterThan(1588); assertThat(n1).isNotNull(); assertThat(n1.getProperty("typescript-parent")).isEqualTo("src/dataModel/AliasNode.ts"); assertThat(n2).isNotNull(); assertThat(n2.getProperty("typescript-parent")).isNull();
assertThat(result.getViolationMessage(), nullValue());
assertThat(e.getMessage().startsWith("Error reading file "), is(true));
assertNotNull(result); assertThat(result, is(bytes));
assertThat(result.endsWith("/x/y/z"), CoreMatchers.is(true)); assertThat(result.endsWith("build/results/xyz"), CoreMatchers.is(true));
assertThat(configuration).isNotNull();
assertThat(resultPage, notNullValue()); assertThat(resultPage.getTotalElements(), is(5L)); assertThat(resultPage.getTotalPages(), is(1)); assertThat(nodes, hasSize(5));
assertThat(GraphExportStyles.getLabel(new ArrayList<>(), null), nullValue());
assertThat(s).contains("\\"dateTime\\" : \\"2019-02-04T15:13:24.000000933\\"");
assertThat(graphML, notNullValue()); assertThat(graphML, not(containsString("_root_c1 -> _root_c2 [ color = \\"#000000\\", fontcolor = \\"#000000\\", penwidth = 3.0, style = dashed , label=\\"2\\", headlabel=\\"1\\", taillabel=\\"2\\"];")));
assertThat(abbreviation.abbreviate("com.something"), is("com.something")); assertThat(abbreviation.abbreviate("de.something"), is("de.something")); assertThat(abbreviation.abbreviate("de.qaware"), is("Q")); assertThat(abbreviation.abbreviate("de.qaware.qav"), is("Q.qav")); assertThat(abbreviation.abbreviate(""), is("")); assertThat(abbreviation.abbreviate(null), nullValue());
assertThat(graph.toString(), is("DependencyGraphSimpleImpl[Nodes:3; Edges:2]"));
assertThat(result, is(-1));
assertThat(e.getMessage()).startsWith("File not found: ");
assertThat(commands.size(), is(1)); assertThat(commands.get(0), is(qavCommand1));
assertThat(edge, notNullValue()); assertThat(edge.getSourceName(), is("v4")); assertThat(edge.getTargetName(), is("v5")); assertThat(edge.getTypeName(), is("READ_WRITE"));
assertThat(filter1.isAccepted(dep1), is(false)); assertThat(filter1.isAccepted(dep2), is(true)); assertThat(filter2.isAccepted(dep1), is(false)); assertThat(filter2.isAccepted(dep2), is(false)); assertThat(filter2.isAccepted(dep3), is(true)); assertThat(filter3.isAccepted(dep3), is(false));
assertThat(files, hasSize(0));
assertThat(commandDoc, notNullValue()); assertThat(commandDoc, is(expected));
assertThat(filter.isAccepted(new Node("foo.bar")), is(true)); assertThat(filter.isAccepted(new Node("other.foo.bar")), is(false));
assertThat(edgeStyle, notNullValue()); assertThat(edgeStyle.getColor(), is("#67001f")); assertThat(edgeStyle.getWidth(), is("1.0")); assertThat(edgeStyle.getLineStyle(), is("line"));
assertThat(files.contains(new File(thisTestFile.getPath())), CoreMatchers.is(false)); assertThat(files.contains(new File(aTestFile.getPath())), CoreMatchers.is(true));
assertThat(GraphExportStyles.getLabel(new ArrayList<>(), "com.my.any.Clazz"), is("com.my.any.Clazz"));
assertThat(result, containsString("group TEST"));
assertThat(check.isOk(), is(true)); assertThat(check.getViolationMessages(), hasSize(0)); assertThat(check.getViolationMessage(), nullValue());
assertThat(dependencyGraph.getAllNodes()).hasSize(10); assertThat(dependencyGraph.getNode("joda-time")).isNull(); assertThat(dependencyGraph.getAllEdges()).hasSize(13);
assertThat((boolean) velocityContext.get("hideUploadProject")).isTrue();
assertThat(TestUtils.readResource("errorEmail2.html", this)) .isEqualToIgnoringWhitespace(this.message.getBody());
assertThat(fetchedFlow.getStatus()).isEqualTo(Status.FAILED_FINISHING);
assertThat(countDown.moreTimeRemaining()).isTrue(); assertThat(countDown.moreTimeRemaining()).isFalse();
assertTrue(externalURL.equals(EXTERNAL_LOGVIEWER_EXPECTED_URL));
assertEquals(this.unSupportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestAvro.avro")));
assertThat(velocityContext.get("hideUploadProject")).isNull();
assertNotNull(executorLoader); assertNotNull(injector.getInstance(ExecutionFlowDao.class)); assertNotNull(injector.getInstance(DatabaseOperator.class));
assertEquals("Info message added through addErrorLevelInfoMsg should have level set to ERROR", ValidationReport.getInfoMsgLevel(info), ValidationStatus.ERROR); assertEquals("Retrieved info message does not match the original one.", ValidationReport.getInfoMsg(info), msg);
assertThat(UserUtils.hasPermissionforAction(userManager, user, UPLOADPROJECTS)).isFalse();
assertEquals(this.supportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestOrcFile.emptyFile.orc")));
assertThat(sessionCache.addSession(session1)).isTrue(); assertThat(sessionCache.addSession(session2)).isTrue(); assertThat(sessionCache.addSession(session3)).isFalse();
assertEquals(ContentType.HTML, this.viewer.getContentType());
assertThat(flowList1.size()).isEqualTo(1); assertThat(flowList2.size()).isEqualTo(1);
assertEquals(ThinArchiveTestUtils.getDepSetAB(), parsedDependencies);
assertEquals(14, this.testUtil.getGaugeValue("dbConnectionTime"));
assertEquals(pair, new Pair<>(1, 20)); assertEquals(correctString.length(), foreignText.length() - 6);
assertEquals(ip, "192.168.1.1");
assertThat(azkabanEventReporter).isNull();
assertThat(proj.getDirSizeInByte()).isEqualTo(actualDirSize); assertThat(FileIOUtils.readNumberFromFile( Paths.get(tmp.getPath(), FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME))) .isEqualTo(actualDirSize);
assertEquals(this.unSupportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestTextFile.txt")));
assertThat(executors.size()).isEqualTo(fetchedExecutors.size()); assertThat(executors.toArray()).isEqualTo(fetchedExecutors.toArray());
assertThat(thrown).isInstanceOf(RejectedExecutionException.class);
assertThat(hasParent).isTrue();
assertEquals(expectedResultingReports, manager.validate(project, projectDir, props));
assertThat(executors.size()).isEqualTo(0);
assertFalse(storageCleaner.isCleanupPermitted());
assertTrue(this.mailCreator .createFailedUpdateMessage(Arrays.asList(this.executableFlow, this.executableFlow), this.executor, exception, this.message, this.azkabanName, this.scheme, this.clientHostname, this.clientPortNumber)); assertEquals("Flow status could not be updated from executor1-host on unit-tests", this.message.getSubject()); assertThat(TestUtils.readResource("failedUpdateMessage.html", this)) .isEqualToIgnoringWhitespace(this.message.getBody());
assertThat(this.flow1.getStatus()).isEqualTo(Status.FAILED); assertThat(node.getStatus()).isEqualTo(Status.KILLING);
assertEquals(ip, "127.0.0.1");
assertTrue(this.layout.format(event).equals("This message contains a tab \\\\t"));
assertEquals("SUCCESS_MOCK_LOGIN_SERVLET", writer.toString());
assertFalse(isGranted);
assertNotNull(executorManagerAdapter); assertEquals(executorManagerAdapter.getDispatchMethod(), DispatchMethod.PUSH); assertNotNull(pollExecutorManagerAdapter); assertEquals(pollExecutorManagerAdapter.getDispatchMethod(), DispatchMethod.POLL); assertNotNull(containerizedInjectorInstance); assertEquals(containerizedInjectorInstance.getDispatchMethod(), DispatchMethod.PUSH_CONTAINERIZED); assertNotNull(defaultInjectorInstance); assertEquals(defaultInjectorInstance.getDispatchMethod(), DispatchMethod.PUSH);
assertEquals(0, size);
assertEquals(0, size);
assertThat(result).isEqualToIgnoringWhitespace(expected);
assertTrue(output.isEmpty());
assertEquals(depA, newDep);
assertThat(urlResponse.indicatesSuccess()).isTrue(); assertThat(urlResponse.indicatesError()).isFalse(); assertThat(urlResponse.indicatesError()).isTrue(); assertThat(urlResponse.indicatesSuccess()).isFalse();
assertEquals(expectedResult, this.jdbcDependencyManager.getValidationStatuses(new HashSet(), VALIDATION_KEY));
assertEquals(ip, "192.168.1.1");
assertEquals(ThinArchiveTestUtils.getDepAPath(), ThinArchiveUtils.convertIvyCoordinateToPath(ThinArchiveTestUtils.getDepA()));
assertThat(cpuStats.getSysUptime()).isEqualTo(255); assertThat(cpuStats.getTimeCpuIdle()).isEqualTo(24);
assertThat(UserUtils.hasPermissionforAction(userManager, testUpload, UPLOADPROJECTS)).isTrue();
assertThat(areDirsEqual(this.sourceDir, this.destDir, true)).isTrue(); assertThat(hardLinkCount).isEqualTo(5); assertThat(areDirsEqual(this.baseDir, this.sourceDir, true)).isTrue();
assertEquals(this.supportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestOrcFile.testUnionAndTimestamp.orc")));
assertEquals(500, size);
assertTrue(ts.size() == 1); assertTrue(t3.getSource().equals("source1")); assertTrue(ts.size() == 2);
assertThat(fetchedQueuedFlows.size()).isEqualTo(2);
assertEquals(this.supportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestOrcFile.testStringAndBinaryStatistics.orc")));
assertThat(hasParent).isFalse();
assertEquals(output, "<p>file content</p>\\n");
assertThat(executors.size()).isEqualTo(fetchedExecutors.size() + 2); assertThat(executors.get(0)).isEqualTo(fetchedExecutors.get(0));
assertThat(TestUtils.readResource("failedUpdateMessage2.html", this)) .isEqualToIgnoringWhitespace(this.message.getBody());
assertEquals(0, size);
assertThat(stringRepresentation).isEqualTo("DagBuilder (dag builder)");
assertEquals( "struct<time:timestamp,union:uniontype<int,string>,decimal:decimal>", this.viewer.getSchema(this.fs, getResourcePath("TestOrcFile.testUnionAndTimestamp.orc")));
assertEquals("commonprop1", props.getString("commonprop1")); assertEquals("commonprop2", props.getString("commonprop2")); assertEquals("commonprop3", props.getString("commonprop3")); assertEquals("commonprivate1", priv.getString("commonprivate1")); assertEquals("commonprivate2", priv.getString("commonprivate2")); assertEquals("commonprivate3", priv.getString("commonprivate3"));
assertEquals(10, size);
assertThat(loader instanceof DirectoryYamlFlowLoader).isTrue();
assertThat(ti.getStatus()).isEqualTo(Status.CANCELLED); assertThat(ti.getStatus()).isEqualTo(Status.CANCELLED);
assertThat(UserUtils.hasPermissionforAction(userManager, testAdmin, UPLOADPROJECTS)).isTrue();
assertNotNull(resourceUrl);
assertTrue(ExternalLinkUtils.encodeToUTF8(" ").equals("%20")); assertTrue(ExternalLinkUtils.encodeToUTF8("+").equals("%2B")); assertTrue(ExternalLinkUtils.encodeToUTF8("/").equals("%2F")); assertTrue(ExternalLinkUtils.encodeToUTF8(":").equals("%3A")); assertTrue(ExternalLinkUtils.encodeToUTF8("?").equals("%3F")); assertTrue(ExternalLinkUtils.encodeToUTF8("=").equals("%3D"));
assertThat(loader instanceof DirectoryFlowLoader).isTrue();
assertEquals(expectedDependencyFile, dependencyFile);
assertThat(scheduler.scheduleJobIfAbsent("0 5 * * * ?", createJobDescription())).isFalse();
assertEquals(this.unSupportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestParquetFile.parquet")));
assertEquals("struct<int1:int,string1:string>", this.viewer.getSchema(this.fs, getResourcePath("TestOrcFile.testPredicatePushdown.orc")));
assertThat(flowList).hasSize(4); assertThat(flowList.get(0).getExecutionId()).isEqualTo(flow1.getExecutionId()); assertThat(flowList.get(0).getStatus()).isEqualTo(Status.FAILED_FINISHING); assertThat(flowList.get(3).getExecutionId()).isEqualTo(flow4.getExecutionId()); assertThat(flowList.get(3).getStatus()).isEqualTo(Status.QUEUED);
assertEquals("Missing required parameter \'project\'.", e.getMessage());
assertThat(loader instanceof DirectoryYamlFlowLoader).isTrue();
assertEquals("user8", user8.getUserId()); assertEquals(0, managerLoaded.getCount()); assertEquals("user8", user.getUserId());
assertThat(this.map.get(LOWER_KEY)).isEqualTo(VALUE_2); assertThat(this.map.get(UPPER_KEY)).isEqualTo(VALUE_2); assertThat(this.map.get(WRONG_KEY)).isNull();
assertThat(flowList).hasSize(3);
assertEquals("Info message added through addWarnLevelInfoMsg should have level set to WARN", ValidationReport.getInfoMsgLevel(info), ValidationStatus.WARN); assertEquals("Retrieved info message does not match the original one.", ValidationReport.getInfoMsg(info), msg);
assertEquals(ip, "fe80::aede:48ff");
assertEquals(200, this.res.getStatus()); assertEquals("Cannot find execution \'123\'", this.res.getResponseJson().path("error").asText());
assertEquals("struct<bytes1:binary,string1:string>", this.viewer.getSchema( this.fs, getResourcePath("TestOrcFile.testStringAndBinaryStatistics.orc")));
assertThat(velocityContext.containsKey("hideUploadProject")).isFalse();
assertEquals(DEP_ROOT_URI, this.hdfsStorage.getDependencyRootPath());
assertTrue("Memory check failed. Should fail open", isGranted);
assertThat((String)webObject.get(SlaOption.WEB_DURATION)).isEqualTo(expectedDuration); assertThat((String)webObject.get(SlaOption.WEB_STATUS)).isEqualTo(expectedStatus); assertThat((String)webObject.get(SlaOption.WEB_ID)).isEqualTo(expectedId); assertThat((List<String>)webObject.get(SlaOption.WEB_ACTIONS)).isEqualTo(expectedAction);
assertThat(this.controller.getRunningFlowIds()) .isEqualTo(new ArrayList<>(this.unfinishedFlows.keySet()));
assertThat(this.map.containsKey(LOWER_KEY)).isFalse(); assertThat(this.map.containsKey(UPPER_KEY)).isFalse(); assertThat(this.map.remove(WRONG_KEY)).isNull();
assertEquals(someFolder.getAbsolutePath() + "/app-meta/startup-dependencies.json", startupDependenciesFile.getAbsolutePath());
assertTrue(externalURL.equals(EXTERNAL_ANALYZER_EXPECTED_URL));
assertThat(this.cacheDir.list()).hasSize(1); assertThat(this.cacheDir.list()).contains("3.1");
assertThat(thrown).isInstanceOf(IllegalArgumentException.class); assertThat(thrown).hasMessage("job.max.Xmx must not have an empty value. " + "Remove the property to use default or specify a valid value.");
assertThat(this.testUtil.getTimerCount(ExecMetrics.FLOW_SETUP_TIMER_NAME)).isEqualTo(0); assertThat(this.testUtil.getTimerCount(ExecMetrics.FLOW_SETUP_TIMER_NAME)).isEqualTo(1); assertThat(snapshot.getMax()).isGreaterThanOrEqualTo(10);
assertTrue(executionExternalLinkURL.equals(""));
assertTrue(triggerChecker.isCheckerMet() == true); assertTrue(expireChecker.eval() == false); assertTrue(triggerChecker.isCheckerMet() == true); assertTrue(expireChecker.eval() == false);
assertTrue(executionExternalLinkURL.equals(""));
assertEquals("struct<int1:int,string1:string>", this.viewer.getSchema(this.fs, getResourcePath("TestOrcFile.testSnappy.orc")));
assertTrue(this.hdfsStorage.dependencyFetchingEnabled());
assertTrue(expireChecker.eval() == false); assertTrue(t1.getStatus() == TriggerStatus.READY); assertTrue(expireChecker.eval() == true); assertTrue(t1.getStatus() == TriggerStatus.PAUSED); assertTrue(expireChecker.eval() == true); assertTrue(t1.getStatus() == TriggerStatus.PAUSED);
assertTrue(isGranted);
assertThat(this.message).isEqualTo(em);
assertThat(ti.getStartTime()).isEqualTo(expectedStartTime.getTime()); assertThat(ti.getStartTime()).isEqualTo(0); assertThat(ti.getStartTime()).isEqualTo(expectedStartTime.getTime());
assertThat(this.controller.getQueuedFlowSize()).isEqualTo(this.queuedFlows.size());
assertThat(this.map.containsKey(LOWER_KEY)).isTrue(); assertThat(this.map.containsKey(UPPER_KEY)).isTrue(); assertThat(this.map.containsKey(WRONG_KEY)).isFalse();
assertTrue(this.layout.format(event).equals("This message contains a backslash \\\\\\\\"));
assertEquals(ThinArchiveTestUtils.getDepAContent(), FileUtils.readFileToString(depA.getFile())); assertEquals(ThinArchiveTestUtils.getDepBContent(), FileUtils.readFileToString(depB.getFile()));
assertThat(executors.size()).isEqualTo(0);
assertTrue(ts.get(0).isResetOnExpire() == true); assertTrue(ts.get(0).isResetOnExpire() == false);
assertThat(azkabanEventReporter).isNotNull(); assertThat(azkabanEventReporter).isInstanceOf(AzkabanEventReporterTest1.class);
assertThat(new NodeBeanLoader().getFlowName(ExecutionsTestUtil.getFlowFile( BASIC_FLOW_YML_TEST_DIR, BASIC_FLOW_YML_FILE))).isEqualTo(BASIC_FLOW_NAME);
assertThat(ExecutorUtils.getMaxConcurrentRunsOneFlow(props)).isEqualTo( Constants.DEFAULT_MAX_ONCURRENT_RUNS_ONEFLOW); assertThat(ExecutorUtils.getMaxConcurrentRunsOneFlow(props)).isEqualTo( 5);
assertThat(FileIOUtils.readNumberFromFile(fileToDump.toPath())).isEqualTo(num);
assertEquals(sampleInputStream, this.localStorage.getDependency(depA));
assertEquals(this.supportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestOrcFile.testPredicatePushdown.orc")));
assertTrue(this.layout.format(event).equals("This message contains \\\\n new lines"));
assertEquals(schema, this.viewer.getSchema(this.fs, getResourcePath("TestOrcFile.emptyFile.orc")));
assertEquals(depA, depFile.copy()); assertEquals(depFile.getFile(), file);
assertThat(this.cacheDir.list()).hasSize(3);
assertEquals(Collections.emptySet(), parsedDependencies);
assertEquals(200, this.res.getStatus()); assertEquals("Error parsing flow options: Error parsing SLA setting \'broken-syntax-for-sla\': " + "java.lang.ArrayIndexOutOfBoundsException: 1", this.res.getResponseJson().path("error").asText());
assertThat(executor).isEqualTo(fetchedExecutor);
assertThat(this.controller.getQueuedFlowIds()) .isEqualTo(ImmutableList.of(this.flow1.getExecutionId()));
assertThat(executor).isEqualTo(fetchedExecutor);
assertEquals(this.supportedCapabilities, this.viewer.getCapabilities(this.fs, getResourcePath("TestOrcFile.testSnappy.orc")));
assertThat(activeExecutorServerHosts.size()).isEqualTo(3);
assertThat(executor).isEqualTo(null);
assertThat(count).isEqualTo(3); assertThat(flow2Count).isEqualTo(2);
assertTrue(capabilities.contains(Capability.READ)); assertEquals(capabilities.size(), 1); assertTrue(capabilities.contains(Capability.READ)); assertEquals(capabilities.size(), 1);
assertEquals(0, this.sendEmailLatch.getCount()); assertThat(TestUtils.readResource("/emailTemplate/flowtriggerfailureemail.html", this)) .isEqualToIgnoringWhitespace(this.message.getBody());
assertThat(executor).isEqualTo(null);
assertEquals(expectedResultingCacheKey, manager.getCacheKey(project, projectDir, props));
assertTrue(this.mailCreator.createSuccessEmail( this.executableFlow, this.message, this.azkabanName, this.scheme, this.clientHostname, this.clientPortNumber)); assertEquals("Flow \'mail-creator-test\' has succeeded on unit-tests", this.message.getSubject()); assertThat(TestUtils.readResource("successEmail.html", this)) .isEqualToIgnoringWhitespace(this.message.getBody());
assertEquals(200, this.res.getStatus()); assertEquals("testProject", json.path("project").asText()); assertEquals("testFlow", json.path("flow").asText()); assertEquals("Submitted (mocked)", json.path("message").asText()); assertEquals(99, json.path("execid").asInt());
assertThat(flows.size()).isEqualTo(1);
assertThat(ti.getStatus()).isEqualTo(Status.SUCCEEDED); assertThat(ti.getStatus()).isEqualTo(Status.SUCCEEDED);
assertThat(job.getJobProps().get(HadoopConfigurationInjector.INJECT_PREFIX + HadoopJobUtils.MAPREDUCE_JOB_TAGS)) .isEqualTo("azkaban.flow.execid:123,azkaban.flow.flowid:flow-id" + ",azkaban.flow.projectname:project-name,workflowid:project-name$flow-id");
assertThat(service.isShutdown()).isTrue();
assertTrue(this.layout.format(event) .startsWith("There was an exception\\\\njava.lang.Exception: This is an exception"));
assertTrue(cond.isMet()); assertFalse(cond.isMet());
assertEquals(ip, "192.168.1.1");
assertTrue(size == 0);
assertEquals( "XmlValidatorManager should contain 0 validator when no xml configuration " + "file is present.", manager.getValidatorsInfo().size(), 0);
assertTrue( ExternalLinkUtils.getURLForTopic("someTopic", this.azkProps).equals("This is a link"));
assertThat(this.executionFlowDao.selectAndUpdateExecution(executor.getId(), true)) .isEqualTo(flow.getExecutionId()); assertThat(this.executorDao.fetchExecutorByExecutionId(flow.getExecutionId())).isEqualTo (executor);
assertThat(message.getMailPort()).isEqualTo(MAIL_PORT); assertThat(message.getBody()).isEmpty(); assertThat(message.getSubject()).isNull();
assertThat(ExecutorUtils.getMaxConcurentRunsPerFlowMap(props).size()).isEqualTo(0); assertThat(map.size()).isEqualTo(2); assertThat(map.get(new Pair("project1", "flow1"))).isEqualTo(300); assertThat(map.get(new Pair("project2", "flow2"))).isEqualTo(5);
assertThat(areDirsEqual(this.destDir, bigDir, true)).isTrue();
assertThat(ti.getStatus()).isEqualTo(Status.RUNNING); assertThat(ti.getStatus()).isEqualTo(Status.RUNNING);
assertNotNull(resourceUrl);
assertFalse(ntv.isNoteTitleValid("inv")); assertTrue(ntv.isNoteTitleValid("valid"));
assertTrue(pv.isPasswordValid("thispasswordisnotvalid")); assertTrue(pv.isPasswordValid("123456")); assertFalse(pv.isPasswordValid("this password is not valid as well")); assertFalse(pv.isPasswordValid("12345"));
assertFalse(nbv.isNoteBodyValid("")); assertTrue(nbv.isNoteBodyValid("note"));
assertTrue(uv.isUsernameValid("Username")); assertFalse(uv.isUsernameValid("us")); assertFalse(uv.isUsernameValid("us ername"));
assertEquals(original, testCs.getColoredString());
assertEquals(testPages[i], event.getNewBookMeta().getPage(i)); assertEquals("This test should PASS", newBookMeta.getPage(pageCount - 1));
assertEquals(plain.length(), testCs.length());
assertTrue(chatEvent.isCancelled());
assertEquals(array[4], "&0"); assertEquals(array[19], "&8"); assertEquals(array.length - 1, plain.length());
assertNull(api.getAuthorById(UUID.randomUUID()));
assertEquals(testPages[i], event.getNewBookMeta().getPage(i));
assertEquals(new ColoredString("this&0 is the string &8to test"), testCs.patternToLower(Pattern.compile("This")));
assertEquals(plain.charAt(5), testCs.charAt(5));
assertFalse(myPlayer.hasPermission("test.permission")); assertFalse(myPlayer.hasPermission("test.permission"));
assertTrue(bukkitPlayer.hasPermission("TestTrue")); assertTrue(bukkitPlayer.hasPermission("TestTrue")); assertFalse(bukkitPlayer.hasPermission("TestTrue"));
assertEquals(chatEvent.getMessage(), "Test PASS Message");
assertEquals(testPlayer.getUniqueId(), api.getAuthorById(testPlayer.getUniqueId()).getId());
assertEquals(plain, testCs.toString());
assertFalse(bukkitPlayer.hasPermission("TestTrue"));
assertEquals(chatEvent.getMessage(), input);
assertEquals(cs.getColoredString(), test);
assertEquals(asyncPlayer.get(), myPlayer);
assertEquals(plain.subSequence(5, 9), testCs.subSequence(5, 9));
assertEquals(new ColoredString("THIS&0 is the string &8to test"), testCs.patternToUpper(Pattern.compile("This")));
assertFalse(server.isPrimaryThread()); assertEquals(player.getId(), testPlayer.getUniqueId());
assertEquals(testCs.getRaw(), original);
assertThat(signA) .isNotEmpty() .isNotEqualTo(signB); assertThat(signB).isNotEmpty();
assertThat(UrlHelper.registrationUrl(context, new RegistrationSettings("12345678", null))).contains("prefill_phone_number=12345678");
assertThat(UrlHelper.registrationUrl(context, null)).contains("public_key=my_publicKey");
assertThat(HelperMethods.isBlank(null)).isTrue();
assertThat(signA) .isNotEmpty() .isNotEqualTo(signB); assertThat(signB).isNotEmpty();
assertThat(HelperMethods.isBlank("")).isTrue();
assertThat(UrlHelper.registrationUrl(context, null)).contains("public_key=my%2BpublicKey");
assertThat(HelperMethods.isBlank("a")).isFalse();
assertThat(publicKeyA) .isNotEmpty() .isEqualTo(publicKeyB);
assertThat(UrlHelper.registrationUrl(context, new RegistrationSettings(null, "abcd"))).contains("confirmed_user_data_id=abcd");
assertThat(signA) .isNotEmpty() .isEqualTo(signB);
assertThat(UrlHelper.registrationUrl(context, null)).contains("locale=my_locale");
assertThat(UrlHelper.preferencesUrl(context, TOKEN)).contains("locale=my_locale");
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(30, result.getBytesProcessed());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(6, result.getBytesProcessed());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(6, result.getBytesProcessed());
assertEquals(30, result.getBytesProcessed());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertEquals(1, mapSchemas.size());
assertFalse(c.isRedundant()); assertFalse(c.isRedundant());
assertTrue(c.isRedundant()); assertTrue(c.isRedundant());
assertTrue(c.isRedundant());
assertFalse(c.isRedundant());
assertFalse(c.isRedundant());
assertFalse(c.isRedundant());
assertEquals("a value", this.userProperties.get("custom")); assertEquals("123", this.userProperties.get(Constants.USER_PROPERTY_ID));
assertEquals("event: name : An event\\naction : an action\\n", myString);
assertTrue(eventValue.containsValue("testCategory")); assertTrue(eventValue.containsValue("testLabel")); assertTrue(eventValue.containsValue("testAction"));
assertThat((real.getTypeCode())).isEqualTo(globalStatusRequest.getTypeCode()); assertThat((real.getXid())).isEqualTo(globalStatusRequest.getXid()); assertThat((real.getExtraData())).isEqualTo(globalStatusRequest.getExtraData());
assertThat((real.getTypeCode())).isEqualTo(registerRMRequest.getTypeCode()); assertThat((real.getVersion())).isEqualTo(registerRMRequest.getVersion()); assertThat((real.getTransactionServiceGroup())).isEqualTo(registerRMRequest.getTransactionServiceGroup()); assertThat((real.getExtraData())).isEqualTo(registerRMRequest.getExtraData()); assertThat((real.getApplicationId())).isEqualTo(registerRMRequest.getApplicationId());
assertThat(englishHello.say()).isEqualTo("hello!");
assertThat((real.getTypeCode())).isEqualTo(globalRollbackResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(globalRollbackResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(globalRollbackResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo( globalRollbackResponse.getTransactionExceptionCode());
assertThat(NetUtil.toStringAddress(ipv4)).isEqualTo( ipv4.getAddress().getHostAddress() + ":" + ipv4.getPort()); assertThat(NetUtil.toStringAddress(ipv6)).isEqualTo( ipv6.getAddress().getHostAddress() + ":" + ipv6.getPort());
assertThat(englishHello.say()).isEqualTo("hello!");
assertThat(load.say()).isEqualTo("Bonjour");
assertThat(e).isInstanceOf(FrameworkException.class).hasMessage( FrameworkErrorCode.UnknownAppError.getErrMessage()); assertThat(e.getErrcode()).isEqualTo(FrameworkErrorCode.UnknownAppError);
assertThat(RootContext.getXID()).isNull();
assertThat(e).isInstanceOf(FrameworkException.class).hasMessage("");
assertThat((real.getTypeCode())).isEqualTo(globalBeginResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(globalBeginResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(globalBeginResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo(globalBeginResponse.getTransactionExceptionCode());
assertThat(atomicInteger.get()).isEqualTo(0); assertThat(atomicInteger.get()).isEqualTo(2); assertThat(atomicInteger.get()).isEqualTo(6);
assertThat(real.getTypeCode()).isEqualTo(globalBeginRequest.getTypeCode()); assertThat(real.getTimeout()).isEqualTo(globalBeginRequest.getTimeout()); assertThat(real.getTransactionName()).isEqualTo(globalBeginRequest.getTransactionName());
assertThat(realRequest.getTypeCode()).isEqualTo(undoLogDeleteRequest.getTypeCode()); assertThat(realRequest.getBranchType()).isEqualTo(undoLogDeleteRequest.getBranchType()); assertThat(realRequest.getResourceId()).isEqualTo(undoLogDeleteRequest.getResourceId()); assertThat(realRequest.getSaveDays()).isEqualTo(undoLogDeleteRequest.getSaveDays());
assertThat((real.getTypeCode())).isEqualTo(globalCommitResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(globalCommitResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(globalCommitResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo(globalCommitResponse.getTransactionExceptionCode());
assertThat((real.getTypeCode())).isEqualTo(globalCommitRequest.getTypeCode()); assertThat((real.getXid())).isEqualTo(globalCommitRequest.getXid()); assertThat((real.getExtraData())).isEqualTo(globalCommitRequest.getExtraData());
assertThat((real.getTypeCode())).isEqualTo(globalStatusResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(globalStatusResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(globalStatusResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo( globalStatusResponse.getTransactionExceptionCode());
assertThat(real.getTransactionExceptionCode()).isEqualTo(branchRegisterResponse.getTransactionExceptionCode()); assertThat(real.getResultCode()).isEqualTo(branchRegisterResponse.getResultCode()); assertThat(real.getMsg()).isEqualTo(branchRegisterResponse.getMsg()); assertThat(real.getBranchId()).isEqualTo(branchRegisterResponse.getBranchId());
assertThat(NetUtil.toLong("127.0.0.1")).isEqualTo(r);
assertThat(executor.buildLockKey(tableRecords)).isEqualTo(buildLockKeyExpect);
assertThat((real.getTypeCode())).isEqualTo(branchReportResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(branchReportResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(branchReportResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo(branchReportResponse.getTransactionExceptionCode());
assertThat(RootContext.inGlobalTransaction()).isFalse(); assertThat(RootContext.inGlobalTransaction()).isTrue(); assertThat(RootContext.inGlobalTransaction()).isFalse(); assertThat(RootContext.getXID()).isNull();
assertThat(NetUtil.toStringAddress((SocketAddress)ipv4)) .isEqualTo(ipv4.getAddress().getHostAddress() + ":" + ipv4.getPort()); assertThat(NetUtil.toStringAddress((SocketAddress)ipv6)).isEqualTo( ipv6.getAddress().getHostAddress() + ":" + ipv6.getPort());
assertThat((real.getTypeCode())).isEqualTo(globalLockQueryResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(globalLockQueryResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(globalLockQueryResponse.getResultCode()); assertThat((real.getTransactionExceptionCode())).isEqualTo( globalLockQueryResponse.getTransactionExceptionCode());
assertThat(e).isInstanceOf(NullPointerException.class);
assertThat(TransactionHookManager.getHooks()).isEmpty(); assertThat(TransactionHookManager.getHooks()).isNotEmpty();
assertThat(allExtensionClass).isNotEmpty();
assertThat((realObj.getTypeCode())).isEqualTo(globalCommitResponse.getTypeCode()); assertThat((realObj.getMsg())).isEqualTo(globalCommitResponse.getMsg()); assertThat((realObj.getResultCode())).isEqualTo(globalCommitResponse.getResultCode()); assertThat((realObj.getTransactionExceptionCode())).isEqualTo( globalCommitResponse.getTransactionExceptionCode());
assertThat(allExtensionClass.get(2).getSimpleName()).isEqualTo((FrenchHello.class.getSimpleName())); assertThat(allExtensionClass.get(1).getSimpleName()).isEqualTo((EnglishHello.class.getSimpleName())); assertThat(allExtensionClass.get(0).getSimpleName()).isEqualTo((ChineseHello.class.getSimpleName()));
assertThat((real.getTypeCode())).isEqualTo(registerRMResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(registerRMResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(registerRMResponse.getResultCode()); assertThat((real.isIdentified())).isEqualTo(registerRMResponse.isIdentified()); assertThat((real.getVersion())).isEqualTo(registerRMResponse.getVersion()); assertThat((real.getExtraData())).isEqualTo(registerRMResponse.getExtraData());
assertThat(hooks).isNotEmpty(); assertThat(hooks.get(0)).isEqualTo(transactionHookAdapter);
assertThat(StringUtils.isNullOrEmpty(null)).isTrue(); assertThat(StringUtils.isNullOrEmpty("abc")).isFalse(); assertThat(StringUtils.isNullOrEmpty("")).isTrue(); assertThat(StringUtils.isNullOrEmpty(" ")).isFalse();
assertThat(TransactionHookManager.getHooks()).isEmpty(); assertThat(TransactionHookManager.getHooks()).isNotEmpty(); assertThat(TransactionHookManager.getHooks()).isEmpty();
assertThat((real.getTypeCode())).isEqualTo(globalRollbackRequest.getTypeCode()); assertThat((real.getXid())).isEqualTo(globalRollbackRequest.getXid()); assertThat((real.getExtraData())).isEqualTo(globalRollbackRequest.getExtraData());
assertThat(RootContext.getXID()).isEqualTo(DEFAULT_XID); assertThat(RootContext.unbind()).isEqualTo(DEFAULT_XID); assertThat(RootContext.getXID()).isNull();
assertThat((real.getTypeCode())).isEqualTo(registerRMResponse.getTypeCode()); assertThat((real.getMsg())).isEqualTo(registerRMResponse.getMsg()); assertThat((real.getResultCode())).isEqualTo(registerRMResponse.getResultCode()); assertThat((real.isIdentified())).isEqualTo(registerRMResponse.isIdentified()); assertThat((real.getVersion())).isEqualTo(registerRMResponse.getVersion()); assertThat((real.getExtraData())).isEqualTo(registerRMResponse.getExtraData());
assertTrue(Arrays.equals(entry.getValue().data, CANNED_DATA));
assertEquals(request.getMethod(), Method.HEAD); assertTrue(httpRequest instanceof HttpHead);
assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
assertEquals(request.getMethod(), Method.DELETE); assertTrue(httpRequest instanceof HttpDelete);
assertEquals(request.getMethod(), Method.POST); assertTrue(httpRequest instanceof HttpPost);
assertEquals(0, nullUrl.getTrafficStatsTag()); assertEquals(0, emptyUrl.getTrafficStatsTag());
assertSame(REQUEST, request); assertSame(ADDITIONAL_HEADERS, additionalHeaders); assertEquals(12345, resp.getStatusLine().getStatusCode()); assertEquals(0, resp.getAllHeaders().length); assertEquals(555L, resp.getEntity().getContentLength()); assertSame(mContent, resp.getEntity().getContent());
assertEquals(request.getMethod(), Method.POST);
assertEquals(request.getMethod(), Method.PATCH);
assertEquals(request.getMethod(), Method.GET); assertTrue(httpRequest instanceof HttpGet);
assertEquals(0, mMockImageLoader.lastMaxHeight);
assertThat(cache.get("key"), is(nullValue()));
assertEquals(request.getMethod(), Method.PATCH); assertTrue(httpRequest instanceof HttpPatch);
assertEquals(request.getMethod(), Method.PATCH); assertTrue(httpRequest instanceof HttpPatch);
assertSame(entry, mRequest.getCacheEntry());
assertEquals(12345, response.getStatusCode()); assertEquals(Collections.emptyList(), response.getHeaders()); assertNull(response.getContent());
assertEquals(request.getMethod(), Method.GET);
assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST); assertTrue(httpRequest instanceof HttpPost);
assertNull(mRequest.getCacheEntry());
assertThat(cache.get("key1"), is(nullValue()));
assertEquals(request.getMethod(), Method.POST);
assertEquals(request.getMethod(), Method.PUT); assertTrue(httpRequest instanceof HttpPut);
assertEquals(expected, result);
assertEquals(request.getMethod(), Method.OPTIONS);
assertSame(REQUEST, request); assertSame(ADDITIONAL_HEADERS, additionalHeaders); assertEquals(12345, resp.getStatusLine().getStatusCode()); assertEquals(0, resp.getAllHeaders().length); assertNull(resp.getEntity());
assertEquals(request.getMethod(), Method.PUT);
assertEquals( "http: new UrlParseRequest(Method.GET, "http: assertEquals( "http: new UrlParseRequest(Method.DEPRECATED_GET_OR_POST, "http: .getCacheKey());
assertEquals(request.getMethod(), Method.PATCH);
assertTrue(response.getValue().isSuccess()); assertEquals(response.getValue().result, new String(CANNED_DATA, StandardCharsets.UTF_8));
assertEquals(request.getMethod(), Method.OPTIONS); assertTrue(httpRequest instanceof HttpOptions);
assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
assertEquals(12345, response.getStatusCode()); assertNull(response.getContent()); assertEquals(expectedHeaders, response.getHeaders());
assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST); assertTrue(httpRequest instanceof HttpGet);
assertEquals(request.getMethod(), Method.HEAD);
assertEquals(1, ImageRequest.findBestSampleSize(100, 150, 100, 150)); assertEquals(2, ImageRequest.findBestSampleSize(280, 160, 140, 80)); assertEquals(1, ImageRequest.findBestSampleSize(1000, 800, 501, 401)); assertEquals(4, ImageRequest.findBestSampleSize(100, 200, 24, 50));
assertEquals(request.getMethod(), Method.POST); assertTrue(httpRequest instanceof HttpPost);
assertEquals(request.getMethod(), Method.TRACE); assertTrue(httpRequest instanceof HttpTrace);
assertEquals(12345, response.getStatusCode()); assertEquals(Collections.emptyList(), response.getHeaders()); assertEquals(Integer.MAX_VALUE, response.getContentLength()); assertSame(mContent, response.getContent());
assertEquals(request.getMethod(), Method.PUT);
assertEquals(request.getMethod(), Method.PUT); assertTrue(httpRequest instanceof HttpPut);
assertEquals(request.getMethod(), Method.DELETE);
assertEquals(request.getMethod(), Method.TRACE);
assertTrue(low.compareTo(high) > 0); assertTrue(high.compareTo(low) < 0); assertTrue(low.compareTo(low2) < 0); assertTrue(low.compareTo(immediate) > 0); assertTrue(immediate.compareTo(high) < 0);
assertEquals( "0/02", p );
assertEquals( "H", p );
assertTrue(s.isSentToRawPubKey());
assertEquals("", ""); assertEquals("000000000000000030e597a72386c512d830b08ecc70b254f46033fd06f2bf93", str); assertEquals(Utils.bytesToHexString(testBlock.getBlockHash()), Utils.bytesToHexString(block.getBlockHash()));
assertEquals(ecKey.toAddress(), "1F3sAm6ZtwLAUnj7d38pGFxtP3RVEvtsbV");
assertEquals("mkFQohBpy2HDXrCwyMrYL5RtfrmeiuuPY2", address);
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.IN_PROGRESS); assertThat(response.getCallbackContext()).isEqualTo(outputContext); assertThat(response.getCallbackDelaySeconds()).isEqualTo(10); assertThat(returnModel.getArn()).isEqualTo(model.getArn()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.IN_PROGRESS); assertThat(response.getCallbackContext()).isEqualTo(outputContext); assertThat(response.getCallbackDelaySeconds()).isEqualTo(10); assertThat(returnModel.getArn()).isEqualTo(model.getArn()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.FAILED); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isEqualTo(HandlerErrorCode.NotUpdatable);
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isNull(); assertThat(response.getResourceModels()).isNotNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull();
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.FAILED); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isEqualTo("Error occurred during operation \'Image Creation Failed.\'."); assertThat(response.getErrorCode()).isEqualTo(HandlerErrorCode.GeneralServiceException);
assertTrue(LaneManager.writeImage("/tmp/robocar_warped.jpg", warped));
assertEquals(histogram.length, LaneManager.HISTOGRAM_BINS);
assertTrue(LaneManager.writeImage("/tmp/robocar_yuvChannel.jpg", yuvChannel));
assertNotNull(src.data()); assertEquals(src.size().width(), TEST_IMAGE_WIDTH); assertEquals(src.size().height(), TEST_IMAGE_HEIGHT);
assertTrue(LaneManager.writeImage("/tmp/robocar_saturationChannel.jpg", saturationChannel));
assertTrue(LaneManager.writeImage("/tmp/robocar_line.jpg", src));
assertTrue(LaneManager.writeImage("/tmp/robocar_threshold.jpg", thresholdBinary));
assertTrue(LaneManager.writeImage("/tmp/robocar_histogram.jpg", histogram)); assertEquals(histogram.size().height(), 32); assertEquals(histogram.size().width(), 1); assertEquals(histogram.rows(), 32); assertEquals(histogram.cols(), 1);
assertTrue(LaneManager.writeImage("/tmp/robocar_threshold_color.jpg", thresholdBinary));
assertTrue(LaneManager.writeImage("/tmp/robocar_masked.jpg", masked));
assertTrue(LaneManager.writeImage("/tmp" + testImage, src));
assertEquals(position.getBinIndex(), 21); assertEquals(position.getBinValue(), 36377.0, DELTA); assertEquals(position.getBinIndex(), maxIndex); assertEquals(position.getBinValue(), max, DELTA);
assertEquals(exp, actual);
assertThat(distance, lessThanOrEqualTo(DEFAULT_THRESHOLD));
assertThat(distance, greaterThan(DEFAULT_THRESHOLD));
assertThat(result).isNotNull(); assertThat(result).isInstanceOf(Date.class);
assertThat(unserialized).isEqualTo(originalDate);
assertThat(unserialized).isEqualTo(originalDate);
assertThat(result).isNotNull(); assertThat(result).isInstanceOf(Date.class);
assertFalse(cookie.equals(nullObj)); assertFalse(cookie.equals(newCookie)); assertFalse(cookie.equals(cookie2)); assertTrue(cookie.equals(cookie1)); assertTrue(cookie.equals(newCookie.toCookie())); assertTrue(newCookie.equals(newCookie1)); assertFalse(newCookie.equals(newCookie2));
assertEquals(String[].class, new GenericType<String[]>(){}.getRawType());
assertEquals(List[].class, new GenericType<List<String>[]>() { }.getRawType());
assertNull(variant.getLanguageString());
assertEquals("Unexpected produced media type content.", "UTF-8", MediaType.APPLICATION_XML_TYPE.withCharset("UTF-8") .getParameters().get(MediaType.CHARSET_PARAMETER)); assertEquals("Unexpected produced media type content.", "ISO-8859-13", MediaType.APPLICATION_XML_TYPE.withCharset("UTF-8").withCharset("ISO-8859-13") .getParameters().get(MediaType.CHARSET_PARAMETER));
assertEquals(HashMap.class, provider.getNodeMemoryInfo().getClass());
assertEquals(ArrayList.class, provider.getNodeCpuInfos().getClass());
assertEquals(null, result);
assertEquals(false, result);
assertEquals(false, result);
assertEquals(".zip", result);
assertEquals(1, result.getExitVal()); assertNotNull(result);
assertEquals("/", result);
assertEquals(true, result);
assertEquals(ArrayList.class, provider.getNodeDiskInfos().getClass());
assertEquals(null, result);
assertNotNull(result); assertEquals(0, result.size());
assertNotNull(result); assertEquals("", result.getValue()); assertEquals(false, result.isNil()); assertEquals(true, result.isGlobalScope()); assertEquals(false, result.isTypeSubstituted());
assertNotNull(result); assertEquals(new HashMap(), result);
assertNotNull(result); assertEquals("line2", result);
assertNotNull(result); assertEquals("ZIP", result.name()); assertEquals("ZIP", result.toString()); assertEquals(1, result.ordinal());
assertEquals(false, result);
assertNotNull(result); assertEquals(202, result.value()); assertEquals("202", result.toString()); assertEquals("Accepted", result.getReasonPhrase()); assertEquals("ACCEPTED", result.name()); assertEquals(6, result.ordinal());
assertNotNull(result); assertEquals("status", result);
assertNotNull(result); assertEquals("Property [name=null, value=null, description=null, getName()=null, getValue()=null, getDescription()=null]", result.toString()); assertEquals(null, result.getName()); assertEquals(null, result.getValue()); assertEquals(null, result.getDescription());
assertNotNull(result); assertEquals(0, result.size());
assertNotNull(fixture); assertNotNull(result); assertEquals(0, result.size());
assertNotNull(result); assertEquals(1, result.size()); assertNotNull(result.get(JPS));
assertNotNull(result);
assertEquals(0, result.getExitVal()); assertNotNull(result);
assertEquals(0, result.getExitVal()); assertNotNull(result);
assertEquals("true", result);
assertEquals(0, result.getExitVal()); assertNotNull(result);
assertEquals(10L, result);
assertEquals(true, result);
assertNotNull(result); assertEquals(0, result.size());
assertEquals("message", result);
assertEquals(HashMap.class, provider.getNodeOSInfo().getClass());
assertEquals(1, result);
assertEquals(true, result);
assertNotSame(0, result);
assertEquals(HashMap.class, provider.getNodeSwapInfo().getClass());
assertEquals(null, result);
assertEquals(false, result);
assertEquals("abc.txt", result);
assertNotNull(result); assertEquals("line1", result);
assertEquals(1L, result);
assertEquals(10, result);
assertEquals(null, result);
assertEquals(false, result);
assertEquals(HashMap.class, provider.getNodeUpTimeInfo().getClass());
assertNotNull(result); assertEquals(0, result.size());
assertEquals(true, result);
assertEquals(true, result);
assertEquals(0, result.getExitVal()); assertNotNull(result); assertEquals(0, result.getExitVal()); assertNotNull(result);
assertEquals(1, result.getExitVal()); assertNotNull(result);
assertNotNull(fixture); assertNotNull(result); assertEquals(1, result.size()); assertTrue(result.get(result.keySet().iterator().next()));
assertEquals(5, result);
assertNotNull(result); assertEquals("line3", result);
assertEquals(0, result); assertFalse(out.toString().isEmpty()); assertTrue(err.toString().isEmpty());
assertEquals(true, result);
assertNotNull(result); assertEquals("", result.getValue()); assertEquals(false, result.isNil()); assertEquals(true, result.isGlobalScope()); assertEquals(false, result.isTypeSubstituted());
assertEquals(0, result);
assertEquals(null, result);
assertNotNull(result); assertEquals("", result.getValue()); assertEquals(false, result.isNil()); assertEquals(true, result.isGlobalScope()); assertEquals(false, result.isTypeSubstituted());
assertEquals(true, result);
assertEquals("test.log.zip", result);
assertNotNull(result); assertEquals("url", result);
assertEquals(ArrayList.class, provider.getNodeNetworkInfos().getClass());
assertNotNull(result);
assertEquals(false, result);
assertNotNull(result);
assertEquals("1", result);
assertNotNull(result); assertEquals(1, result.size()); assertNotNull(result.get(SSHD));
assertNotNull(result); assertEquals(1, result.size()); assertNotNull(result.get(PS));
assertThat(parser.packageName).isEqualTo("com.company"); assertThat(ReferencedClassesParser.getPackageOfJavaFile(source)).isEqualTo("com.company");
assertThat(type.toString()).isEqualTo("Map<Foo>.Entry"); assertThat(ReferencedClassesParser.extractTypeNameWithoutGenerics(type)).isEqualTo("Map.Entry");
assertThat(parser.getFilesToRuleKind()) .containsExactly( "/src/x/Binary.java", "java_binary", "/src/x/SomeTest.java", "java_test", "/src/x/AbstractTest.java", "java_library");
assertThat( ReferencedClassesParser.extractClassNameFromQualifiedName( "ExternalClassA.ExternalAInnerClass")) .isEqualTo("ExternalClassA"); assertThat( ReferencedClassesParser.extractClassNameFromQualifiedName( "com.google.common.ExternalClassA.ExternalAInnerClass")) .isEqualTo("com.google.common.ExternalClassA"); assertThat(ReferencedClassesParser.extractClassNameFromQualifiedName("innerTemplate")) .isEqualTo("");
assertEquals(this.systemTmpDir.getCanonicalFile(), this.environment.getTemporaryDirectory().getCanonicalFile());
assertThat(keyPair, notNullValue()); assertThat(keyPair.getPrivateKey(), equalTo(privateKey)); assertThat(keyPair.getCertificate(), equalTo((CertifiedPublicKey) certificate));
assertThat(FileUtils.readFileToString(new File(DIRECTORY, SERIAL + ", " + ISSUER + ".key")), equalTo(KEY_FILE_CONTENT)); assertThat(FileUtils.readFileToString(new File(DIRECTORY, SERIAL + ", " + ISSUER + ".cert")), equalTo(CERTIFICATE_FILE_CONTENT));
assertThat(key.length, equalTo(8)); assertThat(key, not(equalTo(generator.generate())));
assertEquals(Collections.singleton("a"), query.keySet(), "should have one parameter"); assertEquals(Collections.singletonList("b&c"), query.get("a"), "should have one parameter value");
assertEquals(queryString, escapeTool.url(tool.parseQuery(queryString)));
assertEquals(Color.WHITE, this.converterManager.convert(Color.class, "#ffffff"));
assertTrue(certificate.isSignedBy(certificate.getPublicKeyParameters()), "CA should verify itself."); assertThat(certificate, instanceOf(X509CertifiedPublicKey.class)); assertThat(cert.getVersionNumber(), equalTo(1)); assertThat(cert.isRootCA(), equalTo(true));
assertTrue(this.licenseManager.getLicenses().size() > 0);
assertThat(chain, contains(v3CaCert, v3InterCaCert, v3Cert));
assertEquals("type+data/version", type.serialize());
assertThat(readAll(input, buf), equalTo(text.length)); assertThat(buf, equalTo(text)); assertTrue(verifier.verify(signature));
assertEquals("Property [prop2] mandatory", exception.getMessage());
assertEquals(1, div.size()); assertTrue(div.isEmpty()); assertEquals(2, paragraphs.size());
assertNull(extension.getType());
assertSame(extension, this.mocker.getComponentUnderTest().resolveExtension(extensionId));
assertThat(key.length, equalTo(8)); assertThat(key, not(equalTo(generator.generate(params)))); assertThat(generator.generate(new GenericKeyGenerationParameters(8)).length, equalTo(8));
assertEquals( "Cannot retrieve method forName from object of class java.lang.Class due to security restrictions.", logCapture.getMessage(0));
assertEquals("info", this.tail.getLogEvent(0).getMessage()); assertNull(this.tail.getLogEvent(0));
assertEquals("The Servlet Environment has not been properly initialized (The Servlet Context is not set)", exception.getMessage());
assertEquals(1, patches.size()); assertEquals(1, patch.size()); assertEquals(Delta.Type.DELETE, delta.getType()); assertEquals(Collections.singletonList(text), delta.getPrevious().getElements()); assertEquals(Collections.emptyList(), delta.getNext().getElements());
assertNotNull(this.velocityFactory.getVelocityEngine("somekey")); assertTrue(this.velocityFactory.hasVelocityEngine("somekey")); assertNull(this.velocityFactory.getVelocityEngine("somekey")); assertFalse(this.velocityFactory.hasVelocityEngine("somekey"));
assertEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("1.1").hashCode()); assertEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("1.1.0").hashCode()); assertNotEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("2.0").hashCode());
assertEquals(simpleType, this.converterManager.convert(Type.class, "org.xwiki.component.descriptor.ComponentRole")); assertEquals(genericsType, this.converterManager.convert(Type.class, "org.xwiki.component.descriptor.ComponentRole<java.lang.String>"));
assertFalse(this.tail.iterator().hasNext());
assertEquals("Failed to apply filter before diff.", this.logCapture.getMessage(0)); assertEquals("Failed to apply filter before diff.", this.logCapture.getMessage(1)); assertEquals("Failed to apply filter after diff.", this.logCapture.getMessage(2));
assertEquals(2, descriptors.size()); assertEquals("hint1", descriptors.get(0).getRoleHint()); assertEquals("hint2", descriptors.get(1).getRoleHint());
assertNotNull(result, "Returned null instead of a set"); assertTrue(result.isEmpty(), "Returned set wasn\'t initially empty"); assertTrue(e >= d, "Set doesn\'t preserve the natural order of the elements");
assertNull(extension.getType());
assertEquals("", serialize); assertEquals("<HTML><HEAD/><BODY class=\\"toto\\"/></HTML>", serialize);
assertEquals(1, types.size()); assertEquals(new DefaultParameterizedType(ComponentAnnotationLoaderTest.class, GenericRole.class, String.class), types.iterator().next());
assertEquals(NumberTool.class.getName(), this.configuration.getTools().get("numbertool"));
assertTrue(certificate.isSignedBy(caCert.getPublicKeyParameters()), "End certificate should be verified by CA."); assertThat(certificate, instanceOf(X509CertifiedPublicKey.class)); assertThat(cert.getVersionNumber(), equalTo(1));
assertEquals(1, types.size()); assertEquals(GenericRole.class, types.iterator().next());
assertEquals( "role = [interface org.xwiki.component.descriptor.DefaultComponentDescriptorTest$Role], hint = [hint]], implementation = [org.xwiki.component.descriptor.DefaultComponentDescriptorTest$ImplRole], instantiation = [SINGLETON]", cd.toString());
assertEquals(Arrays.asList("hello {} world"), ExtendedMessageFormatter.parseMessage("hello {} world", new Object[]{}));
assertThat(baos.toString(), equalTo("123456789"));
assertEquals(Arrays.asList("hello ", " world"), ExtendedMessageFormatter.parseMessage("hello {} world", new Object[]{ "0" }));
assertThat(getEncoder().decode(ENCODED_BYTES), equalTo(BYTES)); assertThat(getEncoder().decode(WRAPPED_ENCODED_BYTES), equalTo(BYTES));
assertNull(XMLUtils.escapeElementContent(null), "null should be null");
assertEquals(Locale.US.toString(), this.localeConverter.convert(String.class, Locale.US));
assertEquals(Arrays.asList("", "", ""), ExtendedMessageFormatter.parseMessage("{}{}", new Object[]{ "0", "1" }));
assertNull(this.tool.fromString(""));
assertThat(chain, contains(v3InterCaCert, v3Cert));
assertNotEquals("&apos;", XMLUtils.escapeAttributeValue("\'"), "\' wrongly escaped to non-HTML &apos;");
assertTrue(ecm.hasComponent(Role.class)); assertTrue(ecm.hasComponent(Role.class, "default"));
assertEquals("&\'\\"<>", XMLUtils.unescape("&amp;&apos;&quot;&lt;&gt;
assertEquals("Color value should be in the form of \'#xxxxxx\' or \'r,g,b\'", exception.getMessage());
assertNull(this.converter.convert(String.class, null));
assertFalse(escapedText.contains("<"), "Failed to escape <"); assertFalse(escapedText.contains(">"), "Failed to escape >"); assertFalse(escapedText.contains("\'"), "Failed to escape \'"); assertFalse(escapedText.contains("\\""), "Failed to escape \\""); assertFalse(escapedText.contains("&&"), "Failed to escape &"); assertFalse(escapedText.contains("{"), "Failed to escape {");
assertEquals(" ", textContent); assertEquals("&#8;", textContent); assertEquals("&#8;", textContent);
assertEquals(this.servletTmpDir.getCanonicalFile(), this.environment.getPermanentDirectory().getCanonicalFile());
assertEquals("java.lang.Void", type.toString()); assertEquals("java.util.Collections.java.util.List", type.toString()); assertEquals("java.util.Collections.java.util.List<java.lang.String>", type.toString()); assertEquals("java.util.Map<java.lang.Integer, java.lang.String>", type.toString()); assertEquals("java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>", type.toString());
assertEquals(EnumTest.VALUE, this.enumConverter.convert(EnumTest.class, "value"));
assertFalse(propertyDescriptor.isDeprecated()); assertFalse(propertyDescriptor.isAdvanced()); assertNull(propertyDescriptor.getGroupDescriptor().getGroup()); assertNull(propertyDescriptor.getGroupDescriptor().getFeature());
assertEquals("\\u0123", this.tool.xml("\\u0123"), "Non-ASCII characters shouldn\'t be escaped");
assertEquals(Locale.US, this.localeConverter.convert(Locale.class, Locale.US.toString()));
assertEquals(expected, actual);
assertTrue(new DefaultVersionConstraint("1.0").isCompatible((Version) new DefaultVersion("1.0"))); assertTrue(new DefaultVersionConstraint("1.0").isCompatible((Version) new DefaultVersion("2.0"))); assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new TestVersion("1.0"))); assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new TestVersion("2.0")));
assertEquals(0, type.compareTo(new FilterStreamType(new SystemType("type"), "data", "2.0"))); assertTrue(type.compareTo(new FilterStreamType(new SystemType("type"), "data", "1.0")) > 0); assertTrue(type.compareTo(new FilterStreamType(new SystemType("type"), "data", "3.0")) < 0);
assertEquals("&deg;", XMLUtils.unescape("&deg;"), "Extra named entities were unescaped"); assertEquals("&#65;", XMLUtils.unescape("&#65;"), "Extra decimal entities were unescaped"); assertEquals("&#x5;", XMLUtils.unescape("&#x5;"), "Extra hexadecimal entities were unescaped");
assertEquals("groupid:artifactid:classifier", extension.getId().getId()); assertEquals("jar", extension.getType());
assertEquals("=?UTF-8?B?YT1iPwo=?=", this.tool.b("a=b?\\n"));
assertEquals(expectedPermanentDirectory.getCanonicalFile(), this.environment.getPermanentDirectory().getCanonicalFile());
assertEquals("translation.key", this.marker.getTranslationKey());
assertEquals(Color.WHITE, this.colorConverter.convert(Color.class, "#ffffff")); assertEquals(Color.WHITE, this.colorConverter.convert(Color.class, "#FFFFFF"));
assertEquals("hello=world&B%26%20B=yes&empty=", this.tool.url(map));
assertFalse(escapedText.contains("<"), "Failed to escape <"); assertFalse(escapedText.contains(">"), "Failed to escape >"); assertTrue(escapedText.contains("\'"), "Wrongfully escaped \'"); assertTrue(escapedText.contains("\\""), "Wrongfully escaped \\""); assertFalse(escapedText.contains("&&"), "Failed to escape &");
assertThat(params.getKey(), equalTo(params2.getKey())); assertThat(params2.getIV(), equalTo(params2.getIV()));
assertNotNull(execution.getContext().getProperty("inherited")); assertNotNull(execution.getContext().getProperty("inherited")); assertNull(execution.getContext().getProperty("inherited"));
assertNull(this.configuration.getExtensionRepositoryDescriptors()); assertEquals(0, this.logCapture.size());
assertTrue(result.getPatch().isEmpty()); assertEquals(1, result.getPatch().size()); assertEquals(Type.CHANGE, result.getPatch().get(0).getType());
assertEquals("-\\\\- ", XMLUtils.escapeXMLComment("-- ")); assertEquals("\\\\\\\\", XMLUtils.escapeXMLComment("\\\\")); assertEquals("-\\\\", XMLUtils.escapeXMLComment("-")); assertEquals("-\\\\-\\\\-\\\\", XMLUtils.escapeXMLComment("---")); assertEquals("- ", XMLUtils.escapeXMLComment("- "));
assertNotSame(unsafe, safe); assertTrue(safe instanceof Map); assertEquals(unsafe, safe); assertEquals(unsafe.toString(), safe.toString());
assertNotNull(StAXUtils.getXMLStreamReader(new StAXSource(mockXMLStreamReader()))); assertNotNull(StAXUtils.getXMLStreamReader(new StreamSource(new StringReader("<element/>"))));
assertNull(this.environment.getResource("doesntexist"));
assertThat(FileUtils.readFileToString(FILE), equalTo(ENCRYPTED_FILE_CONTENT));
assertEquals("wiki:wikiid", this.converterManager.convert(String.class, new Namespace("wiki", "wikiid")));
assertNull(this.tool.b(null));
assertNotSame(unsafe, safe); assertTrue(safe instanceof List); assertEquals(unsafe, safe); assertNotSame(unsafe, safe); assertTrue(safe instanceof Set); assertEquals(unsafe, safe); assertEquals(unsafe.toString(), safe.toString());
assertEquals("Failed to create Velocity Engine", exception.getMessage()); assertEquals("ComponentLookupException: Can\'t find descriptor for the component with type " + "[interface org.xwiki.velocity.VelocityEngine] and hint [null]", ExceptionUtils.getRootCauseMessage(exception));
assertEquals(Integer.valueOf(42), this.converterManager.convert(Integer.class, "42"));
assertNotNull(jobStatus); assertEquals(Arrays.asList("id1", "id2"), jobStatus.getRequest().getId()); assertEquals(JobStatus.State.FINISHED, jobStatus.getState()); assertSame(jobStatus, this.store.getJobStatus(Arrays.asList("id1", "id2")));
assertEquals("=C4=A3", this.tool.quotedPrintable("\\u0123"));
assertEquals("false", this.tool.serialize(false)); assertEquals("true", this.tool.serialize(true));
assertEquals(3, map.size()); assertEquals(1, map.get("a")); assertEquals(Arrays.asList(1), map.get("b")); assertEquals(true, map.get("c"));
assertTrue(variants.contains(this.tool.serialize(object)));
assertEquals("", XMLUtils.escapeElementContent(""), "\\"\\" should be \\"\\"");
assertTrue(new DefaultVersionConstraint("1.0").containsVersion((Version) new DefaultVersion("1.0"))); assertFalse(new DefaultVersionConstraint("1.0").containsVersion((Version) new DefaultVersion("2.0"))); assertTrue(new DefaultVersionConstraint("1.0").containsVersion(new TestVersion("1.0"))); assertFalse(new DefaultVersionConstraint("1.0").containsVersion(new TestVersion("2.0")));
assertFalse(event.matches((Event) e -> false));
assertEquals(Arrays.asList(1, 2, 3), this.tool.fromString("[1,2,3]"));
assertNotNull(resource);
assertThat(chain, contains(v3Cert));
assertNotNull(field); assertEquals("superField", field.getName());
assertTrue(json.contains("\\"age\\":28")); assertTrue(json.contains("\\"enabled\\":true")); assertTrue(json.contains("\\"grade\\":9.48")); assertTrue(json.contains("\\"items\\":[\\"one\\"]")); assertTrue(json.contains("\\"name\\":\\"XWiki\\"")); assertTrue(json.contains("\\"parameters\\":{\\"foo\\":\\"bar\\"}")); assertFalse(json.contains("\\"transientProperty\\":\\"transient\\""));
assertEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name", "url")); assertNotEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name2", "url")); assertNotEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name", "url2"));
assertTrue( !(this.loggerManager.createLoggerTail(logFile.toPath(), true) instanceof XStreamFileLoggerTail)); assertTrue(this.loggerManager.createLoggerTail(logFile.toPath(), false) instanceof XStreamFileLoggerTail); assertTrue(this.loggerManager.createLoggerTail(logFile.toPath(), true) instanceof XStreamFileLoggerTail);
assertNull(ExtendedMessageFormatter.parseMessage(null, new Object[]{}));
assertNull(p);
assertEquals(1, divs.size()); assertEquals(2, htmlFilter.filterChildren(divs.get(0), "p").size()); assertEquals(1, spans.size()); assertTrue(htmlFilter.filterChildren(spans.get(0), "p").isEmpty()); assertEquals(2, htmlFilter.filterChildren(spans.get(0), "p").size()); assertTrue(htmlFilter.filterChildren(divs.get(0), "p").isEmpty());
assertEquals(equalsTMarker.hashCode(), this.marker.hashCode()); assertFalse(this.marker.hashCode() == otherTMarker.hashCode()); assertFalse(this.marker.hashCode() == otherMarker.hashCode());
assertThat(key.length, equalTo(128)); assertThat(key, not(equalTo(generator.generate(params)))); assertThat(generator.generate(new GenericKeyGenerationParameters(16)).length, equalTo(16));
assertEquals("", XMLUtils.escape(""), "\\"\\" should be \\"\\"");
assertEquals(Matcher.quoteReplacement("$1 \\\\$2"), tool.quoteReplacement("$1 \\\\$2"));
assertNull(execution.getContext().getProperty("key")); assertNotNull(execution.getContext().getProperty("inherited")); assertEquals("value", ((List<String>) execution.getContext().getProperty("key")).get(0)); assertNull(execution.getContext().getProperty("inherited"));
assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLEventReader()))); assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLStreamReader()))); assertNotNull(StAXUtils.getXMLEventReader(new StreamSource(new StringReader("<element/>"))));
assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<element attribute=\\"value\\">" + "characters" + "<![CDATA[cdata]]>" + "</element>", output.getBuffer().toString());
assertEquals(new DefaultVersionRange("[1.0,2.0]"), new DefaultVersionRange("[1.0,2.0]")); assertEquals(new DefaultVersionRange("[1.0]"), new DefaultVersionRange("[1.0,1.0]")); assertNotEquals(new DefaultVersionRange("[1.0,2.0)"), new DefaultVersionRange("[1.0.2.0]"));
assertThat(FileUtils.readFileToString(FILE), equalTo(FILE_CONTENT));
assertEquals("&#123;&#123;velocity}}machin&#123;&#123;/velocity}}", textareaContent);
assertNull(this.tool.fromString(null));
assertEquals(0, result.size());
assertNotEquals("&apos;", this.tool.xml("\'"), "\' wrongly escaped to non-HTML &apos;");
assertEquals("[1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion( "2.0"), true).toString());
assertTrue(this.objectTool.isNotNull(object));
assertThat(getEncoder().encode(BYTES), equalTo(ENCODED_BYTES)); assertThat(getEncoder().encode(BYTES, 64), equalTo(WRAPPED_ENCODED_BYTES)); assertThat(getEncoder().encode(BYTES, 0, BYTES.length), equalTo(ENCODED_BYTES)); assertThat(getEncoder().encode(BYTES, 0, BYTES.length, 64), equalTo(WRAPPED_ENCODED_BYTES));
assertEquals("255, 255, 255", this.converterManager.convert(String.class, Color.WHITE));
assertEquals(Arrays.asList("hello ", ""), ExtendedMessageFormatter.parseMessage("hello {}", new Object[]{ "0" }));
assertThat(kdf.getEncoded(), equalTo(encoded)); assertThat(params.getKey(), equalTo(params2.getKey())); assertThat(params2.getIV(), equalTo(params2.getIV()));
assertSame(RoleImpl.class, ecm.getInstance(Role.class).getClass());
assertNotNull(result, "Returned null instead of a list"); assertTrue(result.isEmpty(), "Returned list wasn\'t initially empty");
assertEquals(genericsType, ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole<java.lang.String>", Thread.currentThread().getContextClassLoader()));
assertEquals("\\u0123", XMLUtils.escape("\\u0123"), "Non-ASCII characters were escaped");
assertSame(extension, this.mocker.getComponentUnderTest().resolveExtension(extensionDependency, namespace));
assertSame(ecm.getInstance(ComponentManager.class), ecm);
assertEquals(cr1, cr1); assertEquals(cr1, cr2); assertFalse(cr1.equals(cr3)); assertFalse(cr1.equals(cr4));
assertEquals(Integer.valueOf(42), this.converter.convert(Integer.class, "42"));
assertTrue(event.matches(event)); assertFalse(event.matches(AllEvent.ALLEVENT));
assertEquals(FilterStreamType.XWIKI_XAR_CURRENT.serialize(), typeId);
assertEquals("", XMLUtils.unescape(""), "\\"\\" should be \\"\\"");
assertSame(TestFieldClass.class, ReflectionUtils.getTypeClass(TestFieldClass.class)); assertSame(TestFieldClass.class, ReflectionUtils .getTypeClass(new DefaultParameterizedType(ReflectionUtilsTest.class, TestFieldClass.class)));
assertNull(this.tool.parse("This is not the JSON you are looking for...")); assertEquals("Tried to parse invalid JSON [This is not the JSON you are ...]. " + "Root error: [JSONException: Invalid JSON String]", this.logCapture.getMessage(0));
assertNull(this.tool.xml(null), "null should be null");
assertEquals("[1,2]", this.tool.serialize(Arrays.asList(1, 2))); assertEquals("[1.3,2.4]", this.tool.serialize(new double[] { 1.3, 2.4 }));
assertEquals(this.directory.getAbsoluteFile(), this.configuration.getStorage().getAbsoluteFile());
assertNotNull(jobStatus); assertEquals(3, jobStatus.getLog().size());
assertFalse(new File(this.storeDirectory, "test/status.xml").exists());
assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", null));
assertThat(FileUtils.readFileToString(KEY_FILE), equalTo(ENCRYTEDKEY_FILE_CONTENT)); assertThat(FileUtils.readFileToString(CERT_FILE), equalTo(CERTIFICATE_FILE_CONTENT));
assertNull(this.velocityFactory.getVelocityEngine("somekey")); assertFalse(this.velocityFactory.hasVelocityEngine("somekey")); assertSame(mockEngine, this.velocityFactory.getVelocityEngine("somekey")); assertTrue(this.velocityFactory.hasVelocityEngine("somekey"));
assertNotNull(result, "Returned null instead of a queue"); assertTrue(result.isEmpty(), "Returned queue wasn\'t initially empty");
assertThat(baos.toString(), equalTo("1234567890" + NEWLINE));
assertNull(this.tool.json(null), "Unexpected non-null output for null input");
assertNull(this.tool.fromString("This is not the JSON you are looking for..."));
assertEquals(2, logTree.size(false)); assertEquals(2, logTree.size(true));
assertEquals("=?UTF-8?Q?Hello_World?=", this.tool.q("Hello World"));
assertNotNull(upperPropertyDescriptor); assertEquals("upperProp", upperPropertyDescriptor.getId()); assertEquals("upperProp", upperPropertyDescriptor.getName()); assertEquals("upperProp", upperPropertyDescriptor.getDescription()); assertSame(String.class, upperPropertyDescriptor.getPropertyClass()); assertFalse(upperPropertyDescriptor.isMandatory()); assertNotNull(upperPropertyDescriptor.getWriteMethod()); assertNotNull(upperPropertyDescriptor.getReadMethod()); assertNull(upperPropertyDescriptor.getField());
assertNotNull(result, "Returned null instead of a list"); assertTrue(result.isEmpty(), "Returned list wasn\'t initially empty");
assertEquals("def", this.component.get(contextStore, "key", "def")); assertNull(this.component.get(contextStore, "key", "def"));
assertEquals("This Velocity Engine has not yet been initialized. " + "You must call its initialize() method before you can use it.", exception.getMessage());
assertEquals(new HashMap(), this.tool.fromString("{}"));
assertEquals("error0", this.tail.getLogEvent(0).getMessage()); assertEquals("error1", this.tail.getLogEvent(1).getMessage());
assertEquals(2, logTree.size(false)); assertEquals(14, logTree.size(true)); assertEquals(3, node1.size(false)); assertEquals(6, node1.size(true)); assertEquals(3, node11.size(false)); assertEquals(3, node11.size(true));
assertEquals("\\u0123", XMLUtils.escapeElementContent("\\u0123"), "Non-ASCII characters were escaped");
assertSame(this.defaultGroupedJobInitializer, this.groupedJobInitializerManager.getGroupedJobInitializer( new JobGroupPath(Collections.singletonList("something")))); assertSame(this.defaultGroupedJobInitializer, this.groupedJobInitializerManager.getGroupedJobInitializer(null)); assertSame(this.defaultGroupedJobInitializer, this.groupedJobInitializerManager.getGroupedJobInitializer( new JobGroupPath(Arrays.asList("a", "b"))));
assertTrue( verifier.verify(sign, signature.length - 5, signature.length, source, text.length - 10, text.length));
assertEquals("27", this.tool.serialize(27)); assertEquals("2.7", this.tool.serialize(2.7));
assertTrue(questionAskedEvent.isAnswered());
assertNull(this.checker.isSerializable((Object) null)); assertNull(this.checker.isSerializable(this)); assertNull(this.checker.isSerializable(this.getClass())); assertTrue(this.checker.isSerializable(JobSerializableObject.class)); assertFalse(this.checker.isSerializable(JobUnserializableObject.class));
assertEquals("=?UTF-8?B?xKM=?=", this.tool.b("\\u0123"));
assertEquals(1, patches.size()); assertEquals(1, patch.size()); assertEquals(Delta.Type.INSERT, delta.getType()); assertEquals(Collections.emptyList(), delta.getPrevious().getElements()); assertEquals(Collections.singletonList(text), delta.getNext().getElements());
assertThat(baos.toString(), equalTo("1234567890" + NEWLINE + "12345"));
assertEquals(Arrays.asList("{root}"), new ArrayList<>(extension.getAllowedNamespaces()));
assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLEventWriter.class)))); assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLStreamWriter.class)))); assertNotNull(StAXUtils.getXMLStreamWriter(new StreamResult(new StringWriter())));
assertNotNull(propertyDescriptor); assertEquals("impossible.method.name", propertyDescriptor.getId()); assertEquals("impossible.method.name", propertyDescriptor.getName()); assertEquals("propertyWithDifferentId", propertyDescriptor.getDescription()); assertSame(String.class, propertyDescriptor.getPropertyType()); assertFalse(propertyDescriptor.isMandatory()); assertNotNull(propertyDescriptor.getWriteMethod()); assertNotNull(propertyDescriptor.getReadMethod()); assertNull(propertyDescriptor.getField());
assertEquals("No field named [doesntexist] in class [" + TestFieldClass.class.getName() + "] or superclasses", exception.getMessage());
assertThat(params.getKey(), equalTo(params2.getKey())); assertThat(params2.getIV(), equalTo(params2.getIV()));
assertNull(queue.getLogEvent(0)); assertNull(queue.getLogEvent(1)); assertEquals("message", queue.getLogEvent(0).getMessage()); assertNull(queue.getLogEvent(1));
assertEquals(mapType2, ReflectionUtils.unserializeType( "java.util.Map<java.lang.String, java.util.Map<java.lang.String, " + "org.xwiki.component.descriptor.ComponentRole<java.lang.String>>>", Thread.currentThread().getContextClassLoader()));
assertEquals(2, fields.size());
assertFalse(context.hasProperty("key")); assertTrue(context.hasProperty("key"));
assertTrue(json.isArray()); assertEquals(3, json.size());
assertSame(Boolean.FALSE, XMLUtils.emptyValue(boolean.class)); assertSame(TestClass.class, XMLUtils.emptyValue(TestClass.class).getClass()); assertNull(XMLUtils.emptyValue(TestClassWithNoDefaultConstructor.class));
assertNotNull(result, "Returned null instead of a queue"); assertTrue(result.isEmpty(), "Returned queue wasn\'t initially empty"); assertNull(result.poll());
assertEquals(1, types.size()); assertEquals(GenericRole.class, types.iterator().next());
assertEquals("=?UTF-8?Q?=C4=A3?=", this.tool.q("\\u0123"));
assertThat(john, equalTo(john)); assertThat(john, equalTo(johnAlias)); assertThat(john, equalTo(johnOtherImpl)); assertThat(john, not(equalTo(jane))); assertThat(jane, not(equalTo(john))); assertThat(john, not(equalTo(janeOtherImpl))); assertThat(john, not(equalTo(new Object())));
assertNull(this.tool.q(null));
assertEquals(Color.WHITE, this.colorConverter.convert(Color.class, "255 , 255 , 255"));
assertEquals("Failed to find a Converter to convert from [java.lang.String] to " + "[org.xwiki.properties.internal.DefaultConverterManagerTest]", exception.getMessage());
assertNotNull(prop3Descriptor); assertEquals("prop3", prop3Descriptor.getId()); assertEquals("prop3 description", prop3Descriptor.getDescription()); assertSame(boolean.class, prop3Descriptor.getPropertyClass()); assertTrue(prop3Descriptor.isMandatory()); assertNotNull(prop3Descriptor.getWriteMethod()); assertNotNull(prop3Descriptor.getReadMethod()); assertNull(prop3Descriptor.getField());
assertTrue(this.manager.getSupportedEntries().isEmpty()); assertTrue(this.manager.getSupportedEntries().isEmpty()); assertEquals(toSet("entry11", "entry12"), toSet(this.manager.getSupportedEntries())); assertEquals(toSet("entry11", "entry12", "entry2"), toSet(this.manager.getSupportedEntries()));
assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", new Object[]{ "0" }));
assertThat(keyPair, nullValue());
assertEquals(TestEnum.ENUMVALUE, this.converterManager.convert(TestEnum.class, "ENUMVALUE"));
assertEquals(logEvent.getMessage(), "message");
assertFalse(escapedText.contains("<"), "Failed to escape <"); assertFalse(escapedText.contains(">"), "Failed to escape >"); assertFalse(escapedText.contains("\'"), "Failed to escape \'"); assertFalse(escapedText.contains("\\""), "Failed to escape \\""); assertFalse(escapedText.contains("&&"), "Failed to escape &");
assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><p>test1</p><p>test2</p></html>\\n", HTMLUtils.toString(document));
assertEquals("A%26A=1.5&B%26B=1.2", this.tool.url(map));
assertNull(this.tail.logStore); assertTrue(this.tail.open()); assertNotNull(this.tail.logStore); assertNull(this.tail.logStore); assertEquals("error0", this.tail.getLogEvent(0).getMessage()); assertEquals("error1", this.tail.getLogEvent(1).getMessage()); assertEquals(2, this.tail.getLogEvents(0, -1).stream().count()); assertNull(this.tail.logStore); assertNull(this.tail.getLogEvent(2));
assertNotNull(license); assertEquals("Apache License 2.0", license.getName()); assertEquals(content, license.getContent()); assertNotNull(license); assertEquals("Apache License 2.0", license.getName()); assertEquals(content, license.getContent());
assertTrue(this.parser.isValidVelocityIdentifierChar('a')); assertTrue(this.parser.isValidVelocityIdentifierChar('_')); assertTrue(this.parser.isValidVelocityIdentifierChar('-')); assertFalse(this.parser.isValidVelocityIdentifierChar('.'));
assertEquals(2, query.size(), "should have two parameter"); assertEquals(Collections.singletonList("a & b"), query.get("ab"), "should have one parameter value for ab"); assertEquals(Arrays.asList(new String[] {"b c", "b=c"}), query.get("a"), "should have two parameter values for a");
assertEquals(simpleType, ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole", Thread.currentThread().getContextClassLoader()));
assertNull(this.objectTool.getNull());
assertSame(safe, this.scriptSafeProvider.get(safe));
assertNull(XMLUtils.escapeAttributeValue(null), "null should be null");
assertNull(this.tool.quotedPrintable(null));
assertEquals("info0", this.tail.getLogEvent(0).getMessage()); assertNull(this.tail.getLogEvent(1));
assertEquals(1, descriptors.size()); assertEquals("special", descriptors.get(0).getRoleHint());
assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", new Object[]{}));
assertNotNull(result, "Returned null instead of a map"); assertTrue(result.isEmpty(), "Returned map wasn\'t initially empty"); assertTrue(e.getKey() >= d, "Map doesn\'t preserve the natural order of the elements");
assertEquals(5, result.getOffset()); assertEquals(7, result.getTotalHits()); assertEquals(Arrays.asList(new DefaultVersion("1.3"), new DefaultVersion("2.4.1")), versions);
assertThat(kp, not(nullValue())); assertThat(kp.getPrivate(), instanceOf(BcAsymmetricKeyParameters.class)); assertThat(kp.getPublic(), instanceOf(BcAsymmetricKeyParameters.class)); assertThat(((BcAsymmetricKeyParameters) kp.getPrivate()).getParameters(), instanceOf(RSAPrivateCrtKeyParameters.class)); assertThat(((BcAsymmetricKeyParameters) kp.getPublic()).getParameters(), instanceOf(RSAKeyParameters.class));
assertNull(XMLUtils.unescape(content));
assertEquals("", XMLUtils.unescapeXMLComment("\\\\")); assertEquals("\\\\", XMLUtils.unescapeXMLComment("\\\\\\\\")); assertEquals("--", XMLUtils.unescapeXMLComment("\\\\-\\\\-")); assertEquals("--", XMLUtils.unescapeXMLComment("\\\\-\\\\-\\\\"));
assertFalse(escapedText.contains("<"), "Failed to escape <"); assertFalse(escapedText.contains(">"), "Failed to escape >"); assertFalse(escapedText.contains("\'"), "Failed to escape \'"); assertFalse(escapedText.contains("\\""), "Failed to escape \\""); assertFalse(escapedText.contains("&&"), "Failed to escape &");
assertNull(jobManager.getJobStatus(jobId));
assertNotNull(prop1Descriptor); assertEquals("prop1", prop1Descriptor.getId()); assertEquals("prop1 description", prop1Descriptor.getDescription()); assertSame(String.class, prop1Descriptor.getPropertyClass()); assertFalse(prop1Descriptor.isMandatory()); assertNotNull(prop1Descriptor.getWriteMethod()); assertNotNull(prop1Descriptor.getReadMethod()); assertNull(prop1Descriptor.getField());
assertEquals(new ArrayList<>(), this.tool.fromString("[]"));
assertTrue(event.matches(event)); assertFalse(event.matches(AllEvent.ALLEVENT));
assertEquals(2, paragraphs.size()); assertFalse(htmlFilter.hasAttribute(paragraphs, "class", false)); assertEquals(2, paragraphs.size()); assertTrue(htmlFilter.hasAttribute(paragraphs, "class", false)); assertFalse(htmlFilter.hasAttribute(paragraphs, "class", true)); assertEquals(2, paragraphs.size()); assertTrue(htmlFilter.hasAttribute(paragraphs, "class", true));
assertTrue(this.tool.parse(null) instanceof JSONNull);
assertTrue(AllEvent.ALLEVENT.matches(AllEvent.ALLEVENT)); assertTrue(AllEvent.ALLEVENT.matches(null));
assertEquals("info", this.tail.getLogEvent(0).getMessage()); assertNull(this.tail.getLogEvent(0));
assertNotNull(this.loggerManager.getLoggers());
assertEquals(equalsTMarker, this.marker); assertFalse(this.marker.equals(otherTMarker)); assertFalse(this.marker.equals(otherMarker));
assertTrue(this.objectTool.isNull(object));
assertEquals(1, body.size()); assertEquals(2, paragraphs.size()); assertEquals("test1", paragraphs.get(0).getTextContent()); assertEquals("test2", paragraphs.get(1).getTextContent());
assertEquals(this.servletTmpDir.listFiles()[0].getCanonicalFile(), tmpDir.getCanonicalFile());
assertNull(XMLUtils.escapeElementContent(content));
assertSame(this.repository, this.extension.get("repository")); assertEquals(this.id.getId(), this.extension.get("id")); assertEquals(this.id.getVersion(), this.extension.get("version")); assertEquals(this.type, this.extension.get("type"));
assertNotNull(ecm.getInstance(Role.class)); assertNotSame(roleImpl, ecm.getInstance(Role.class));
assertThat(key.length, equalTo(24)); assertThat(key, not(equalTo(generator.generate())));
assertFalse(event.matches((Event) e -> false));
assertThat(chain, contains(v1Cert));
assertNull(installRequest.isStatusLogIsolated()); assertNull(uninstallRequest.isStatusLogIsolated()); assertEquals(1, this.replayJob.getStatus().getCurrentRecordNumber()); assertFalse(installRequest.isStatusLogIsolated()); assertFalse(uninstallRequest.isStatusLogIsolated());
assertEquals(context.getAttribute("engine1"), context2.getAttribute("engine1")); assertEquals(context.getAttribute("engine1"), context2.getAttribute("engine1")); assertEquals(context.getAttribute("global1"), context2.getAttribute("global1")); assertNull(context.getAttribute("engine2")); assertNull(context.getAttribute("global2"));
assertEquals("[\\"a\\",42,true]", this.tool.serialize(array));
assertEquals(1, properties.size()); assertEquals("value", properties.get("key"));
assertNotNull(jobStatus); assertEquals(Arrays.asList("id1", "id2", "id3"), jobStatus.getRequest().getId()); assertEquals(JobStatus.State.FINISHED, jobStatus.getState());
assertNotNull(result, "Returned null instead of a set"); assertTrue(result.isEmpty(), "Returned set wasn\'t initially empty"); assertEquals(valueIterator.next(), e, "Set doesn\'t preserve the insertion order");
assertEquals(values, bean);
assertEquals(0, customizers.size());
assertThat(keyPair, nullValue());
assertEquals("a &#60; a\' &#38;&#38; a\' &#60; a\\" => a &#60;
assertSame(this.initializerList.get(0), this.groupedJobInitializerManager.getGroupedJobInitializer( new JobGroupPath(Collections.singletonList("foo")))); assertSame(this.initializerList.get(3), this.groupedJobInitializerManager.getGroupedJobInitializer( new JobGroupPath(Arrays.asList("foo", "bar", "buz"))));
assertTrue(this.tail.stream().collect(Collectors.toList()).isEmpty());
assertEquals("#if($a==1)".length(), index); assertEquals("#if($a==1)", buffer.toString()); assertTrue(context.isInVelocityBlock());
assertEquals(1, customizers.size()); assertTrue(customizers.get(0) instanceof CompilationCustomizer);
assertEquals(2, paragraphs.size()); assertEquals("test1", paragraphs.get(0).getTextContent()); assertEquals("test2", paragraphs.get(1).getTextContent());
assertEquals("#directive(param1 param2, param2)".length(), index); assertEquals("#directive(param1 param2, param2)", buffer.toString()); assertFalse(context.isInVelocityBlock()); assertEquals(VelocityType.MACRO, context.getType());
assertNotNull(jobStatus); assertNull(jobStatus.getRequest().getId()); assertEquals(JobStatus.State.FINISHED, jobStatus.getState()); assertSame(jobStatus, this.store.getJobStatus(null));
assertSame(Color.WHITE, this.converterManager.convert(Color.class, Color.WHITE));
assertNull(execution.getContext());
assertThat(kdf.getEncoded(), equalTo(encoded)); assertThat(params.getKey(), equalTo(params2.getKey())); assertThat(params2.getIV(), equalTo(params2.getIV()));
assertEquals(0, result.size());
assertNull(this.tool.unmodifiable((List<Object>) null)); assertNull(this.tool.unmodifiable((Set<Object>) null)); assertNull(this.tool.unmodifiable((Map<Object, Object>) null)); assertNull(this.tool.unmodifiable((Collection<Object>) null));
assertEquals(EnumTest.VALUE, this.enumConverter.convert(EnumTest.class, "VALUE"));
assertEquals(new ExtensionId("groupId:artifactId", "version"), AetherUtils.createExtensionId(new DefaultArtifact("groupId", "artifactId", "extension", "version")));
assertEquals(job.getType(), record.getJobType()); assertSame(job.getRequest(), record.getRequest()); assertEquals(Collections.singletonMap(String.class.getName(), questionRecorder), record.getAnswers()); assertEquals(job.getStatus().getStartDate(), record.getStartDate());
assertEquals(1, types.size()); assertEquals(new DefaultParameterizedType(null, Provider.class, new DefaultParameterizedType( ComponentAnnotationLoaderTest.class, NotGenericRole.class, String.class)), types.iterator().next());
assertArrayEquals(new int[] {1, 2, 3}, this.converter.<int[]>convert(int[].class, "1, 2, 3")); assertArrayEquals(new Integer[] {1, 2, 3}, this.converter.<Integer[]>convert(Integer[].class, "1, 2, 3")); assertArrayEquals(new Integer[] {1, 2, 3}, this.converter .<Integer[]>convert(ConvertUtilsConverterTest.class.getField("field").getGenericType(), "1, 2, 3"));
assertThat(keyPair, notNullValue()); assertThat(keyPair.getPrivateKey(), equalTo(privateKey)); assertThat(keyPair.getCertificate(), equalTo((CertifiedPublicKey) certificate));
assertNull(this.enumConverter.convert(EnumTest.class, null));
assertEquals(type, new FilterStreamType(new SystemType("type"), "data", "version")); assertNotEquals(type, new FilterStreamType(new SystemType("type2"), "data", "version")); assertNotEquals(type, new FilterStreamType(new SystemType("type"), "data2", "version")); assertNotEquals(type, new FilterStreamType(new SystemType("type"), "data", "version2"));
assertEquals(Arrays.asList(""), ExtendedMessageFormatter.parseMessage("", new Object[]{}));
assertThat(keyPair, notNullValue()); assertThat(keyPair.getPrivateKey(), equalTo(privateKey)); assertThat(keyPair.getCertificate(), equalTo((CertifiedPublicKey) certificate));
assertEquals(extension, cloneExtension); assertEquals(extension, cloneExtension); assertNotEquals(extension, extensionWithDifferentId); assertNotEquals(extension, extensionWithDifferentVersion);
assertFalse(contextStore.containsKey("key")); assertTrue(contextStore.containsKey("key")); assertNull(contextStore.get("key"));
assertEquals(Collections.singleton("a"), query.keySet(), "should have one parameter"); assertEquals(Collections.singletonList("b \' onclick=\'foo"), query.get("a"), "should have one parameter");
assertEquals(Version.Type.SNAPSHOT, new DefaultVersion("1.1-SNAPSHOT").getType()); assertEquals(Version.Type.BETA, new DefaultVersion("1.1-milestone-1").getType()); assertEquals(Version.Type.STABLE, new DefaultVersion("1.1").getType());
assertEquals("bob=&bob=t%26t&bob=R%26D&alice=test", this.tool.url(map));
assertNull(XMLUtils.unescape(null), "null should be null");
assertEquals(new File(this.permDir, "jobs/status/").getAbsoluteFile(), this.configuration.getStorage().getAbsoluteFile());
assertFalse(testComponent.isDisposed()); assertTrue(testComponent.isDisposed());
assertEquals(mapType, ReflectionUtils.unserializeType( "java.util.Map<java.lang.String, org.xwiki.component.descriptor.ComponentRole<java.lang.String>>", Thread.currentThread().getContextClassLoader()));
assertEquals("groupid:artifactid:classifier", extension.getId().getId()); assertEquals("type", extension.getType());
assertNotNull(query, "null query results in empty map"); assertTrue(query.isEmpty(), "null query results in empty map");
assertFalse(new File(this.storeDirectory, "test/status.xml").exists());
assertFalse(json.isArray()); assertFalse(json.isEmpty()); assertEquals(3, json.size()); assertTrue(json.getBoolean("c"));
assertEquals("Hello World", this.tool.quotedPrintable("Hello World"));
assertEquals("/templates/xwikivars.vm", this.handler.includeEvent(null, "xwikivars.vm", "xwiki:Main.WebHome", "parse"), "Wrong template returned");
assertEquals("## some comment\\n".length(), index); assertEquals("## some comment\\n", buffer.toString()); assertFalse(context.isInVelocityBlock()); assertEquals(VelocityType.COMMENT, context.getType());
assertEquals(2, result.size()); assertEquals("<h1><span>header</span></h1>", result.get(0).getGroup()); assertEquals(0, result.get(0).getStart()); assertEquals(28, result.get(0).getEnd()); assertEquals("header", result.get(1).getGroup()); assertEquals(10, result.get(1).getStart()); assertEquals(16, result.get(1).getEnd());
assertNotEquals("&apos;", XMLUtils.escape("\'"), "\' wrongly escaped to non-HTML &apos;");
assertEquals(listType, ReflectionUtils.unserializeType("java.util.List<org.xwiki.component.descriptor.ComponentRole>", Thread.currentThread().getContextClassLoader()));
assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint"))); assertFalse(event.matches(new ComponentDescriptorRemovedEvent((Type) ComponentDescriptorRemovedEvent.class, "rolehint")));
assertEquals(2, cds.size()); assertTrue(cds.contains(d1)); assertTrue(cds.contains(d2));
assertNull(jobStatus); assertNull(jobStatus);
assertEquals("lowerpropvalue", beanTest.getLowerprop()); assertEquals("upperPropvalue", beanTest.getUpperProp()); assertEquals(42, beanTest.getProp2()); assertTrue(beanTest.getProp3()); assertNull(beanTest.getHiddenProperty()); assertEquals("publicFieldvalue", beanTest.publicField); assertEquals(Arrays.asList(1, 2), beanTest.getGenericProp());
assertTrue(json.isArray()); assertTrue(json.isEmpty()); assertEquals(0, json.size());
assertEquals( new DefaultParameterizedType(ReflectionUtilsTest.class, TestInterface.class, new DefaultParameterizedType(null, List.class, String.class), Integer.class), ReflectionUtils.resolveType(TestInterface.class, TestClass3.class)); assertEquals(TestInterfaceSimple.class, ReflectionUtils.resolveType(TestInterfaceSimple.class, TestClass4.class)); assertEquals(TestInterfaceSimple.class, ReflectionUtils.resolveType(TestInterfaceSimple.class, new DefaultParameterizedType(ReflectionUtilsTest.class, TestClass4.class, String.class)));
assertThat(FileUtils.readFileToString(KEY_FILE), equalTo(KEY_FILE_CONTENT)); assertThat(FileUtils.readFileToString(CERT_FILE), equalTo(CERTIFICATE_FILE_CONTENT));
assertEquals(expected, actual);
assertEquals("namespace", ecm.getNamespace());
assertThat(keyPair, notNullValue()); assertThat(keyPair.getPrivateKey(), equalTo(privateKey)); assertThat(keyPair.getCertificate(), equalTo((CertifiedPublicKey) certificate));
assertTrue(event.matches(new TestableProgressEvent())); assertFalse(event.matches(new String("whatever")));
assertEquals( 1, ReflectionMethodUtils.getMethodParameterAnnotations( TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class<?>[]{ Object.class }), 0, TestInheritedAnnotation.class, true).size()); assertEquals( 0, ReflectionMethodUtils.getMethodParameterAnnotations( TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class<?>[]{ Object.class }), 0, TestInheritedAnnotation.class, false).size());
assertEquals("value1", context.getProperty("key1")); assertEquals("value2", context.getProperty("key2"));
assertEquals("a=3Db=0A", this.tool.quotedPrintable("a=b\\n"));
assertEquals(1, patches.size()); assertEquals(1, patch.size()); assertEquals(Delta.Type.CHANGE, delta.getType()); assertEquals(Collections.singletonList(child), delta.getPrevious().getElements()); assertEquals(Collections.singletonList(text), delta.getNext().getElements());
assertThat(baos.toString(), equalTo("1234567890" + NEWLINE + "1234567890" + NEWLINE + "12"));
assertNotNull(result, "Returned null instead of a map"); assertTrue(result.isEmpty(), "Returned map wasn\'t initially empty"); assertEquals(i++, e.getValue().intValue(), "Map doesn\'t preserve the insertion order");
assertFalse(json.isArray()); assertTrue(json.isEmpty()); assertEquals(0, json.size());
assertNull(this.mocker.getComponentUnderTest().resolveExtension(extensionDependency, "wiki:math"));
assertThat(blameManager.blame(null, null, null), nullValue()); assertThat(blameManager.blame(null, null, Collections.<String>emptyList()), nullValue()); assertThat(blameManager.blame(null, new Object(), null), nullValue());
assertEquals("groupid:artifactid", extension.getId().getId()); assertEquals("type", extension.getType());
assertEquals("null", this.tool.serialize(null));
assertNotNull(installedExtension); assertNotNull(this.installedExtensionRepository.getInstalledExtension(TestResources.REMOTE_NOTYPE_ID.getId(), "namespace")); assertNull(installedExtension.getType()); assertNull(installedExtension.getFile());
assertEquals("{\\"before\\":[\\"nothing\\"],\\"json\\":[\\"a\\",42,true],\\"after\\":42}", this.tool.serialize(map));
assertNotNull(componentManager); assertEquals(temporaryDirectory, environment.getTemporaryDirectory()); assertEquals(permanentDirectory, environment.getPermanentDirectory());
assertEquals("couple=M%26M&couple=&couple=Astronomy%26Astrophysics", this.tool.url(map));
assertNotNull(componentManager); assertEquals(TMPDIR, environment.getTemporaryDirectory()); assertEquals(new File(java.lang.System.getProperty("java.io.tmpdir")), environment.getPermanentDirectory());
assertEquals(1, this.logCapture.size()); assertEquals("Ignoring invalid repository configuration [invalid]. Root cause " + "[ExtensionManagerConfigurationException: Invalid repository configuration format for [invalid]. Should " + "have been matching [([^:]+):([^:]+):(.+)].]", this.logCapture.getMessage(0));
assertNotNull(XMLUtils.createDOMDocument());
assertNotNull(this.store.createLoggerTail(null, true));
assertEquals(Pattern.quote("^(\\\\)[]"), tool.quote("^(\\\\)[]"));
assertEquals("#*\\n some comment\\n*#".length(), index); assertEquals("#*\\n some comment\\n*#", buffer.toString()); assertFalse(context.isInVelocityBlock()); assertEquals(VelocityType.COMMENT, context.getType());
assertTrue(verifier.verify(signature));
assertNotNull(prop2Descriptor); assertEquals("prop2", prop2Descriptor.getId()); assertEquals("prop2 description", prop2Descriptor.getDescription()); assertSame(int.class, prop2Descriptor.getPropertyClass()); assertTrue(prop2Descriptor.isMandatory()); assertNotNull(prop2Descriptor.getWriteMethod()); assertNotNull(prop2Descriptor.getReadMethod()); assertNull(prop2Descriptor.getField());
assertNull(XMLUtils.escape(null), "null should be null");
assertEquals("true", this.tool.json(true)); assertEquals("42", this.tool.json(42)); assertEquals(this.tool.toString(), this.tool.json(this.tool));
assertEquals("Allowed namespace list [[namespace]] does not matches namespace [wrong]", exception.getMessage());
assertEquals("Unable to convert value [notexistingvalue]. Allowed values are (case insensitive) \\"VALUE\\".", exception.getMessage());
assertNull(execution.getContext()); assertSame(context1, execution.getContext()); assertSame(context2, execution.getContext()); assertSame(context3, execution.getContext()); assertSame(context1, execution.getContext()); assertNull(execution.getContext());
assertNotNull(propertyDescriptor); assertEquals("impossible.field.name", propertyDescriptor.getId()); assertEquals("impossible.field.name", propertyDescriptor.getName()); assertEquals("impossible.field.name", propertyDescriptor.getDescription()); assertSame(String.class, propertyDescriptor.getPropertyType()); assertFalse(propertyDescriptor.isMandatory()); assertNull(propertyDescriptor.getWriteMethod()); assertNull(propertyDescriptor.getReadMethod()); assertNotNull(propertyDescriptor.getField());
assertEquals(mapType, ReflectionUtils.unserializeType( "java.util.Map<java.lang.String, " + "org.xwiki.component.descriptor.ComponentRole>", Thread.currentThread().getContextClassLoader()));
assertTrue(variants.contains(this.tool.serialize(map)));
assertThat(chain, contains(v1CaCert, v1Cert));
assertEquals("\\u0123", XMLUtils.escapeAttributeValue("\\u0123"), "Non-ASCII characters were escaped");
assertThat(keyPair, notNullValue()); assertThat(keyPair.getPrivateKey(), equalTo(privateKey)); assertThat(keyPair.getCertificate(), equalTo((CertifiedPublicKey) certificate));
assertEquals("", XMLUtils.escapeAttributeValue(""), "\\"\\" should be \\"\\"");
assertEquals("a\\\\#b\\\\.c\\\\ d\\\\[e\\\\=f\\\\]g\\\\{h\\\\:i\\\\;j\\\\}k", this.tool.css("a#b.c d[e=f]g{h:i;j}k")); assertNull(this.tool.css("a\\u0000b")); assertEquals("Failed to escape CSS identifier. Root cause: [Invalid character: the input contains U+0000.]", this.logCapture.getMessage(0));
assertEquals("Knowing the key strength is required to generate a key.", exception.getMessage());
assertEquals(1, descriptors.size()); assertEquals(ComponentInstantiationStrategy.SINGLETON, descriptors.get(0).getInstantiationStrategy());
assertEquals(Arrays.asList("hello ", " world"), ExtendedMessageFormatter.parseMessage("hello {} world", new Object[]{ "0", "1" }));
assertNull(this.handler.includeEvent(null, "../WEB-INF/xwiki.cfg", "xwiki:Main.WebHome", "parse"), "Template shouldn\'t have been returned"); assertEquals(1, this.logCapture.size()); assertEquals("Direct access to template file [/WEB-INF/xwiki.cfg] refused. Possible break-in attempt!", this.logCapture.getMessage(0));
assertEquals(new DefaultVersionRange("[1.0,2.0]").hashCode(), new DefaultVersionRange("[1.0,2.0]").hashCode()); assertEquals(new DefaultVersionRange("[1.0]").hashCode(), new DefaultVersionRange("[1.0,1.0]").hashCode()); assertNotEquals(new DefaultVersionRange("[1.0,2.0)").hashCode(), new DefaultVersionRange("[1.0.2.0]").hashCode());
assertEquals("=?UTF-8?Q?a=3Db=3F=5F=0A?=", this.tool.q("a=b?_\\n"));
assertEquals(new ExtensionLicense("name", Arrays.asList("content")), new ExtensionLicense("name", Arrays.asList("content"))); assertEquals(new ExtensionLicense("name", Arrays.asList("content")), new ExtensionLicense("name", Arrays.asList("content2"))); assertNotEquals(new ExtensionLicense("name", Arrays.asList("content")), new ExtensionLicense("name2", Arrays.asList("content")));
assertNull(this.beanDescriptor.getProperty("STATICFIELD"));
assertEquals("value", context.getProperty("key")); assertNull(context.getProperty("key"));
assertEquals(1, types.size()); assertEquals(new DefaultParameterizedType(ComponentAnnotationLoaderTest.class, GenericRole.class, String.class), types.iterator().next());
assertThat(key.length, equalTo(24)); assertThat(key, not(equalTo(generator.generate(params)))); assertThat(generator.generate(new GenericKeyGenerationParameters(16)).length, equalTo(16));
assertNotNull(result, "Returned null instead of a queue"); assertTrue(result.isEmpty(), "Returned queue wasn\'t initially empty"); assertTrue(e >= d, "Queue doesn\'t preserve the natural order of the elements");
assertNotNull(publicFieldPropertyDescriptor); assertEquals("publicField", publicFieldPropertyDescriptor.getId()); assertEquals("Public Field", publicFieldPropertyDescriptor.getName()); assertEquals("a public field", publicFieldPropertyDescriptor.getDescription()); assertSame(String.class, publicFieldPropertyDescriptor.getPropertyClass()); assertFalse(publicFieldPropertyDescriptor.isMandatory()); assertNull(publicFieldPropertyDescriptor.getWriteMethod()); assertNull(publicFieldPropertyDescriptor.getReadMethod()); assertNotNull(publicFieldPropertyDescriptor.getField());
assertSame(context, execution.getContext()); assertEquals("value", ((List<String>) clonedContext.getProperty("key")).get(0)); assertNotSame(context.getProperty("key"), clonedContext.getProperty("key")); assertSame(xwikicontext, clonedContext.getProperty("property1")); assertNotSame(xwikicontext, clonedContext.getProperty("property2"));
assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", this.tool.b("Hello World"));
assertNull(this.tool.parse("")); assertEquals("Tried to parse invalid JSON []. Root error: [JSONException: Invalid JSON String]", this.logCapture.getMessage(0));
assertNull(XMLUtils.escapeElementText(null));
assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint")));
assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint")));
assertNotNull(field); assertEquals("field", field.getName());
assertThat(keyPair, nullValue());
assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><head></head><body foo=\\"\\"></body></html>\\n", HTMLUtils.toString(document));
assertNull(XMLUtils.escapeAttributeValue(sb));
assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint"))); assertFalse(event.matches(new ComponentDescriptorAddedEvent((Type) ComponentDescriptorAddedEvent.class, "rolehint")));
assertEquals("foo", FOO.parse("", mode)); assertEquals(new Integer(123), INTEGER.parse(new StringReader("123"))); assertEquals(1, e.getLine()); assertEquals(1, e.getColumn()); assertTrue(e.getMessage(), e.getMessage().contains("test module")); assertTrue(e.getMessage(), e.getMessage().contains("integer expected, x encountered."));
assertEquals("value", new Token(1, 2, "value").toString()); assertEquals("null", new Token(1, 2, null).toString());
assertEquals("min < 0", e.getMessage()); assertEquals("max < 0", e.getMessage());
assertEquals(0, Patterns.NEVER.not().match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.ALWAYS.not().match("abc", 0, 3));
assertEquals("n < 0", e.getMessage());
assertEquals(Tokens.reserved(keyword), lexicon.word(keyword)); assertEquals(Tokens.reserved(keyword), lexicon.word(keyword.toUpperCase())); assertEquals(Tokens.reserved(keyword), lexicon.tokenizer.parse(keyword)); assertEquals(Tokens.reserved(keyword), lexicon.tokenizer.parse(keyword.toUpperCase())); assertEquals(Tokens.identifier("baz"), lexicon.tokenizer.parse("baz"));
assertEquals("n < 0", e.getMessage());
assertEquals(0, Objects.hashCode(null)); assertEquals("".hashCode(), Objects.hashCode(""));
assertNull(scanner.parse("<!-- not nested -->")); assertNull(scanner.parse("<!-- this is <!--nested--> -->"));
assertEquals(new Token(0, 0, Indentation.Punctuation.OUTDENT), parser.from(Parsers.constant(tokenList(Indentation.Punctuation.OUTDENT))).parse("", mode));
assertEquals("foo", FOO.token().toString()); assertEquals(new Token(0, 0, "foo"), FOO.token().parse("", mode)); assertEquals(new Token(0, 3, 123), INTEGER.token().parse("123", mode));
assertEquals(null, Parsers.runnable(runnable).parse("", mode)); assertEquals(runnable.toString(), Parsers.runnable(runnable).toString());
assertEquals(2, array.length); assertSame(p1, array[0]); assertSame(p2, array[1]);
assertSame(tokenizer, lexicon.tokenizer);
assertNull(scanner.parse("<<abc>>")); assertNull(scanner.parse("<<>>")); assertNull(scanner.parse("<<<>>"));
assertEquals("source", FOO.source().toString()); assertEquals("", FOO.source().parse("", mode)); assertEquals("123", Parsers.tokenType(Integer.class, "int") .from(INTEGER, Scanners.WHITESPACES).source() .parse("123", mode));
assertEquals("foo", Parsers.fail("foo").toString());
assertEquals(0, Patterns.NEVER.optional().match("", 0, 0)); assertEquals(0, Patterns.ALWAYS.optional().match("", 0, 0)); assertEquals(1, Patterns.hasAtLeast(1).optional().match("abc", 0, 3));
assertEquals(2, array.length); assertSame(p1, array[0]); assertSame(p2, array[1]);
assertEquals(3, Patterns.string("abc").match("abcd", 0, 4)); assertEquals(0, Patterns.string("").match("abcd", 0, 4)); assertEquals(MISMATCH, Patterns.string("abc").match("ABC", 0, 3)); assertEquals(MISMATCH, Patterns.string("abc").match("abc", 0, 0));
assertEquals("sequence", parser.toString()); assertEquals(null, parser.parse("", mode));
assertEquals(4, location.getLine()); assertEquals(3, location.getColumn()); assertEquals(4, location.getLine()); assertEquals(3, location.getColumn());
assertEquals("sequence", COMMA.next(INTEGER).toString()); assertEquals((Object) 123, COMMA.next(INTEGER).parse(",123", mode));
assertEquals(1, new Token(0, 1, null).length());
assertEquals("sequence", map.toString()); assertEquals("two", map.apply(1, "two"));
assertEquals("min < 0", e.getMessage());
assertEquals(0, Patterns.ALWAYS.times(2).match("abc", 0, 3)); assertEquals(2, Patterns.hasAtLeast(1).times(2).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.hasAtLeast(1).times(2).match("abc", 0, 1)); assertEquals(MISMATCH, Patterns.NEVER.times(2).match("abc", 0, 3)); assertEquals(0, Patterns.hasAtLeast(1).times(0).match("abc", 0, 3));
assertNull(scanner.parse("a"));
assertEquals("line 3, column 5", ErrorReporter.toString(null, new Location(3, 5)));
assertEquals("(12, 1, 2)", tuple.toString()); assertEquals("12", tuple.a); assertEquals(1, tuple.b.intValue()); assertEquals(2, tuple.c.intValue());
assertEquals(MISMATCH, Patterns.NEVER.many1().match("abc", 0, 3)); assertEquals(0, Patterns.ALWAYS.many1().match("abc", 0, 3)); assertEquals(3, Patterns.hasAtLeast(1).many1().match("abc", 0, 3)); assertEquals(4, Patterns.hasAtLeast(2).many1().match("abcde", 0, 5));
assertEquals("(123, 1, 2, 3)", tuple.toString()); assertEquals("123", tuple.a); assertEquals(1, tuple.b.intValue()); assertEquals(2, tuple.c.intValue()); assertEquals(3, tuple.d.intValue());
assertEquals("foo", FOO.label("the foo").parse("", mode));
assertEquals("sequence", map.toString()); assertEquals("five", map.map(1, "two", "three", "four", "five"));
assertEquals(3, location.getLine()); assertEquals(2, location.getColumn()); assertEquals(3, location.getLine()); assertEquals(2, location.getColumn());
assertEquals("sequence", map.toString()); assertEquals("three", map.map(1, "two", "three"));
assertEquals(1, new Token(1, 2, null).index());
assertEquals(Tuples.tuple("1234", 1, 2, 3, 4), Maps.toTuple5().map("1234", 1, 2, 3, 4));
assertEquals(new Token(0, 1, Tokens.reserved("+")), parser.parse("+"));
assertEquals("10", fromToken.toString()); assertNull(fromToken.map(new Token(1, 1, "foo"))); assertNull(fromToken.map(new Token(1, 1, 2))); assertNull(fromToken.map(new Token(1, 1, null))); assertSame(token, fromToken.map(token));
assertEquals(null, INTEGER.not().parse("", mode)); assertEquals(null, INTEGER.not("num").parse("", mode));
assertEquals("1.0E2", number.toString()); assertEquals("1.0", number.significand); assertEquals("2", number.exponent);
assertEquals("foo", Parsers.expect("foo").toString());
assertNull(scanner.parse("a")); assertNull(scanner.parse("b"));
assertEquals(Tokens.reserved(op), lexicon.word(op)); assertEquals(Tokens.reserved(op), lexicon.tokenizer.parse(op));
assertEquals(Optional.of(12), INTEGER.asOptional().parse("12", mode)); assertEquals(Optional.empty(), INTEGER.asOptional().parse("", mode));
assertEquals(content, to.toString());
assertEquals("sequence", map.toString()); assertEquals("four", map.map(1, "two", "three", "four"));
assertEquals(2, Patterns.hasAtLeast(1).next(Patterns.hasAtLeast(1)).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.ALWAYS.next(Patterns.NEVER).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.NEVER.next(Patterns.ALWAYS).match("abc", 0, 3));
assertEquals("foo", tokenizer.parse("\'foo\'")); assertEquals("foo", tokenizer.parse("\\"foo\\"")); assertEquals("foo", tokenizer.parse("foo").toString());
assertTrue(Objects.equals(null, null)); assertFalse(Objects.equals(null, "")); assertFalse(Objects.equals("", null)); assertTrue(Objects.equals("", ""));
assertEquals("line 3, column 5:\\nunexpected foo." , ErrorReporter.toString(error, new Location(3, 5)));
assertEquals("n < 0", e.getMessage());
assertEquals(3, Patterns.many1(CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.many1(CharPredicates.ALWAYS).match("abc", 0, 0)); assertEquals(MISMATCH, Patterns.many1(CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.many1(CharPredicates.ALWAYS).match("", 0, 0));
assertEquals("or", INTEGER.or(INTEGER).toString()); assertEquals((Object) 123, INTEGER.or(constant(456)).parse("123", mode));
assertEquals("line 3, column 5:\\nfoo or bar expected, baz encountered." , ErrorReporter.toString(error, new Location(3, 5)));
assertEquals(null, always().parse("", mode));
assertEquals(1, Patterns.hasExact(1).match("a", 0, 1)); assertEquals(1, Patterns.hasExact(1).match("abc", 0, 1)); assertEquals(1, Patterns.hasExact(1).match("abc", 1, 2)); assertEquals(2, Patterns.hasExact(2).match("abc", 0, 2)); assertEquals(MISMATCH, Patterns.hasExact(2).match("abc", 0, 3));
assertNull(scanner.parse("#hello world")); assertNull(scanner.parse("#"));
assertEquals(3, Patterns.atLeast(3, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.atLeast(4, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.atLeast(1, CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.atLeast(1, CharPredicates.ALWAYS).match("", 0, 0));
assertNull(scanner.parse("ab"));
assertNull(scanner.parse("<<>>"));
assertEquals(Tuples.tuple("123", 1, 2, 3), Maps.toTuple4().map("123", 1, 2, 3));
assertEquals("EOF", Parsers.EOF.toString());
assertEquals("foo", fragment.toString());
assertEquals("", Strings.join(new StringBuilder(), ", ", new Object[0]).toString()); assertEquals("1", Strings.join(new StringBuilder(), ", ", new Object[]{1}).toString()); assertEquals("1, 2", Strings.join(new StringBuilder(), ", ", new Object[]{1, 2}).toString());
assertEquals("nestable block comment", scanner.toString()); assertNull(scanner.parse("")); assertNull(scanner.parse(" */"));
assertEquals(3, Patterns.sequence(Patterns.hasAtLeast(1), Patterns.hasAtLeast(2)).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.sequence(Patterns.hasAtLeast(1), Patterns.hasAtLeast(3)).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.sequence(Patterns.NEVER, Patterns.hasAtLeast(2)).match("abc", 0, 3));
assertEquals("(1234, 1, 2, 3, 4)", tuple.toString()); assertEquals("1234", tuple.a); assertEquals(1, tuple.b.intValue()); assertEquals(2, tuple.c.intValue()); assertEquals(3, tuple.d.intValue()); assertEquals(4, tuple.e.intValue());
assertEquals(0, intList.size());
assertNull(scanner.parse("0"));
assertNull(scanner.parse(""));
assertTrue(Objects.in("b", "a", "b", "c")); assertFalse(Objects.in("x", "a", "b", "c"));
assertEquals(1, pattern.match("a", 0, 1)); assertEquals(1, pattern.match("10", 0, 1)); assertEquals(1, pattern.match("a", 0, 1)); assertEquals(MISMATCH, pattern.match("", 0, 0)); assertEquals(MISMATCH, pattern.match("0", 0, 1)); assertEquals(MISMATCH, pattern.match("1b", 1, 2));
assertEquals("integer", INTEGER.atomic().toString());
assertEquals("value", new Token(1, 2, "value").value());
assertNull(scanner.parse("<<>>"));
assertEquals((Object) 1, COMMA.retn(1).parse(",", mode));
assertEquals("foo", Maps.TO_LOWER_CASE.apply("Foo")); assertEquals("toLowerCase", Maps.TO_LOWER_CASE.toString());
assertEquals("chars", parser.toString()); assertEquals("chars", parser.parse("", mode));
assertEquals(MISMATCH, Patterns.notString("abc").match("abcd", 0, 4)); assertEquals(MISMATCH, Patterns.notString("").match("abc", 0, 0)); assertEquals(1, Patterns.notString("abc").match("ABC", 0, 3)); assertEquals(MISMATCH, Patterns.notString("abc").match("abc", 0, 0));
assertEquals("min > max", e.getMessage());
assertEquals((Object) 123, INTEGER.followedBy(COMMA).parse("123,", mode));
assertEquals("min < 0", e.getMessage());
assertNull(scanner.parse("ab")); assertNull(scanner.parse("AB")); assertNull(scanner.parse("aB"));
assertEquals("min < 0", e.getMessage());
assertEquals(Tokens.fragment("1", Tag.INTEGER), Terminals.IntegerLiteral.TOKENIZER.parse("1")); assertEquals(Tokens.fragment("12", Tag.INTEGER), Terminals.IntegerLiteral.TOKENIZER.parse("12")); assertEquals(Tokens.fragment("0", Tag.INTEGER), Terminals.IntegerLiteral.TOKENIZER.parse("0")); assertEquals(Tokens.fragment("01", Tag.INTEGER), Terminals.IntegerLiteral.TOKENIZER.parse("01"));
assertEquals((Object) 412, parser.parse("4->1->2", mode));
assertSame(intList, intList.add(1)); assertSame(intList, intList.add(2));
assertEquals("ifelse", parser.toString()); assertEquals((Object) 12, parser.parse("ab12", mode)); assertEquals((Object) 0, parser.parse("", mode));
assertEquals("line 1 column 2", new Location(1, 2).toString());
assertEquals("FOO", Maps.TO_UPPER_CASE.apply("Foo")); assertEquals("toUpperCase", Maps.TO_UPPER_CASE.toString());
assertEquals(0, intList.size()); assertEquals(1, intList.get(0)); assertEquals(1, intList.size());
assertEquals("followedBy", map.toString()); assertEquals("one", map.apply("one", 2));
assertSame(tokenizer, lexicon.tokenizer); assertEquals("foo", lexicon.word("whatever"));
assertNull(scanner.parse("<< this is a comment >>")); assertNull(scanner.parse("<<< another comment >>")); assertNull(scanner.parse("<<< \\"comment\\" again >>"));
assertEquals(MISMATCH, Patterns.notStringCaseInsensitive("").match("a", 0, 0)); assertEquals(MISMATCH, Patterns.notStringCaseInsensitive("abc").match("abcd", 0, 4)); assertEquals(MISMATCH, Patterns.notStringCaseInsensitive("abc").match("ABC", 0, 3)); assertEquals(1, Patterns.notStringCaseInsensitive("abc").match("ABx", 0, 3)); assertEquals(MISMATCH, Patterns.notStringCaseInsensitive("abc").match("abc", 0, 0));
assertNull(scanner.parse(""));
assertEquals(Tuples.tuple("12", 1, 2), Maps.toTuple3().map("12", 1, 2));
assertEquals("", ErrorReporter.toString(null, null));
assertEquals("", reportList()); assertEquals("foo", reportList("foo")); assertEquals("foo or bar", reportList("foo", "bar")); assertEquals("foo, bar or baz", reportList("foo", "bar", "baz")); assertEquals("foo, bar or baz", reportList("foo", "bar", "baz", "baz")); assertEquals("foo or bar", reportList("foo", "foo", "bar"));
assertNull(scanner.parse("0"));
assertEquals(1, error.getIndex()); assertEquals("foo", error.getEncountered()); assertNull(error.getUnexpected()); assertNull(error.getFailureMessage()); assertEquals(0, error.getExpected().size());
assertEquals(1, Patterns.hasAtLeast(1).or(Patterns.hasAtLeast(2)).match("abc", 0, 2)); assertEquals(1, Patterns.hasAtLeast(1).or(Patterns.hasAtLeast(2)).match("abc", 0, 1)); assertEquals(0, Patterns.NEVER.or(Patterns.ALWAYS).match("abc", 0, 0)); assertEquals(MISMATCH, Patterns.NEVER.or(Patterns.NEVER).match("", 0, 0));
assertEquals("max < 0", e.getMessage());
assertEquals(0, intList.size());
assertEquals(Tokens.reserved(keyword), lexicon.word(keyword)); assertEquals(Tokens.reserved(keyword), lexicon.tokenizer.parse(keyword)); assertEquals(Tokens.identifier("FOO"), lexicon.tokenizer.parse("FOO")); assertEquals(Tokens.identifier("baz"), lexicon.tokenizer.parse("baz"));
assertNull(scanner.parse("0"));
assertEquals(MyEnum.FOO, Maps.toEnum(MyEnum.class).apply("FOO")); assertEquals("-> " + MyEnum.class.getName(), Maps.toEnum(MyEnum.class).toString());
assertEquals("foo", FOO.withSource().toString()); assertEquals(new WithSource<String>("foo", ""), FOO.withSource().parse("", mode)); assertEquals(new WithSource<Integer>(123, "123"), INTEGER.withSource().parse("123", mode));
assertEquals("line 3, column 5:\\nfailure", ErrorReporter.toString(error, new Location(3, 5)));
assertEquals(0, Patterns.NEVER.many().match("abc", 0, 3)); assertEquals(0, Patterns.ALWAYS.many().match("abc", 0, 3)); assertEquals(3, Patterns.hasAtLeast(1).many().match("abc", 0, 3)); assertEquals(4, Patterns.hasAtLeast(2).many().match("abcde", 0, 5));
assertEquals((Object) 123, INTEGER.otherwise(constant(456)).parse("123", mode));
assertEquals((Object) 123, INTEGER.notFollowedBy(COMMA).parse("123", mode)); assertEquals((Object) 123, INTEGER.notFollowedBy(COMMA.times(2)).followedBy(COMMA).parse("123,", mode));
assertEquals("never", Parsers.never().toString());
assertEquals(2, Patterns.atMost(2, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(0, Patterns.atMost(0, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(0, Patterns.atMost(1, CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(0, Patterns.atMost(2, CharPredicates.ALWAYS).match("", 0, 0));
assertEquals(new Token(0, 1, Tokens.reserved("+")), parser.parse("+")); assertEquals(new Token(0, 1, Tokens.reserved("-")), parser.parse("-"));
assertEquals( tokenList("foo", 7, "bar", 4, Indentation.Punctuation.INDENT, "baz", 4, Indentation.Punctuation.INDENT, "bah", 1, "bah", Indentation.Punctuation.OUTDENT, Indentation.Punctuation.OUTDENT), parser.parse("foo \\\\ \\n\\\\\\n bar \\n baz\\n bah bah ", mode));
assertEquals(4, IntList.calcSize(4, 1)); assertEquals(3, IntList.calcSize(1, 3)); assertEquals(3, IntList.calcSize(2, 3)); assertEquals(3, IntList.calcSize(3, 3)); assertEquals(6, IntList.calcSize(4, 3));
assertEquals("foo", INTEGER.map(map).parse("12", mode)); assertEquals(map.toString(), INTEGER.map(map).toString());
assertEquals(3, Patterns.times(1, 4, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.times(4, 5, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.times(1, 1, CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.times(1, 1, CharPredicates.ALWAYS).match("", 0, 0));
assertThat(parser.parse("joe")).isEqualTo(new Identifier("joe")); assertThat(parser.parse("joe67_")).isEqualTo(new Identifier("joe67_"));
assertEquals(new Token(0, 0, Indentation.Punctuation.INDENT), parser.from(Parsers.constant(tokenList(Indentation.Punctuation.INDENT))).parse("", mode));
assertEquals(new ScientificNumberLiteral("1e2", NumberType.DOUBLE), parser.parse("1e2")); assertEquals(new ScientificNumberLiteral("1e2", NumberType.FLOAT), parser.parse("1e2f")); assertEquals("foo", parser.parse("\\"foo\\""));
assertEquals(Arrays.<Token>asList(), parser.parse("", mode)); assertEquals(Arrays.<Token>asList(), parser.parse(" ", mode)); assertEquals(Arrays.<Token>asList(new Token(1, 2, 12L)), parser.parse(" 12 ", mode)); assertEquals(Arrays.<Token>asList(new Token(0, 2, 12L), new Token(3, 1, 3L)), parser.parse("12 3 ", mode));
assertEquals("foo", Parsers.constant("foo").followedBy(Scanners.string("bar")).parse("bar", mode)); assertEquals("foo", Parsers.constant("foo").toString());
assertEquals(3, Patterns.repeat(3, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(2, Patterns.repeat(2, CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.repeat(3, CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.repeat(3, CharPredicates.ALWAYS).match("abc", 0, 2));
assertEquals(3, Patterns.many(CharPredicates.ALWAYS).match("abc", 0, 3)); assertEquals(0, Patterns.many(CharPredicates.NEVER).match("abc", 0, 3)); assertEquals(0, Patterns.many(CharPredicates.ALWAYS).match("", 0, 0));
assertEquals("foo", Parsers.unexpected("foo").toString());
assertEquals("Dog {age=1, sex=male, name=tom}", new Dog("male", 1, "tom").toString()); assertEquals("Person {name=ben}", new Person("ben").toString());
assertEquals(0, Patterns.hasAtLeast(1).peek().match("abc", 0, 3)); assertEquals(0, Patterns.ALWAYS.peek().match("abc", 0, 3)); assertEquals(MISMATCH, Patterns.NEVER.peek().match("abc", 0, 3));
assertEquals((Object) 12, INTEGER.optional().parse("12", mode)); assertEquals(null, INTEGER.optional().parse("", mode));
assertEquals(2, intList.get(0));
assertEquals(Arrays.asList("a", "b", "1", "2"), list);
assertEquals("(one, 1)", pair.toString()); assertEquals("one", pair.a); assertEquals(1, pair.b.intValue());
assertEquals(1, intList.size());
assertNull(scanner.parse("123"));
assertEquals(Tuples.pair("one", 1), Maps.toPair().map("one", 1));
assertEquals("", Strings.join(", ", new Object[0])); assertEquals("1", Strings.join(", ", new Object[]{1})); assertEquals("1, 2", Strings.join(", ", new Object[]{1, 2}));
assertEquals("any token", Parsers.ANY_TOKEN.toString());
assertNull(scanner.parse(""));
assertEquals("init length", 0, getLength()); assertEquals("length after addition", 1, getLength()); assertEquals("length after deletion", 0, getLength());
assertThat(customizers).hasSize(3); assertThat(context.getName()).isEqualTo("camel-c2-c3-c1");
assertThat(context.getName()).isNotEqualTo("from-registry"); assertThat(context.getName()).isNotEqualTo("default"); assertThat(context.isLoadTypeConverters()).isFalse(); assertThat(customizers).hasSize(0); assertThat(context.getName()).isEqualTo("default"); assertThat(customizers).hasSize(1); assertThat(context.getName()).isEqualTo("default"); assertThat(context.isLoadTypeConverters()).isTrue(); assertThat(customizers).hasSize(2);
assertThat(context.getName()).isNotEqualTo("from-registry"); assertThat(context.getName()).isNotEqualTo("default"); assertThat(customizers).hasSize(0); assertThat(context.getName()).isEqualTo("from-registry"); assertThat(customizers).hasSize(1);
assertThat(context.getName()).isNotEqualTo("from-registry"); assertThat(context.getName()).isNotEqualTo("default"); assertThat(context.isLoadTypeConverters()).isFalse(); assertThat(customizers).hasSize(0); assertThat(context.getName()).isEqualTo("default"); assertThat(customizers).hasSize(1); assertThat(context.getName()).isEqualTo("default"); assertThat(context.isLoadTypeConverters()).isTrue(); assertThat(customizers).hasSize(2);
assertThat(configuration.getSources()) .hasSize(3) .filteredOn(Objects::nonNull) .hasSize(2) .anyMatch(byNameAndLocation("MyRoutesWithBeans", "classpath:MyRoutesWithBeans.java")) .anyMatch(byNameAndLocation("MyRoutesConfig", "classpath:MyRoutesConfig.java"));
assertThat(context.getName()).isNotEqualTo("from-registry"); assertThat(context.getName()).isNotEqualTo("default"); assertThat(customizers).hasSize(0); assertThat(context.getName()).isEqualTo("from-registry"); assertThat(customizers).hasSize(1);
assertThat(configuration.getSources()) .hasSize(2) .anyMatch(byNameAndLocation("MyRoutesWithBeans", "classpath:MyRoutesWithBeans.java") .and(d -> d.getPropertyNames() == null)) .anyMatch(byNameAndLocation("MyRoutesConfig", "classpath:MyRoutesConfig.java") .and(d -> d.getPropertyNames() != null && d.getPropertyNames().containsAll(List.of("foo", "bar"))));
assertArrayEquals(result, out);
assertEquals( "bob", jsonDecoder.decode( Unpooled.copiedBuffer("{\\"name\\":\\"bob\\"}", Charset.forName("UTF-16")), "application/json; charset=utf-16", Person.class) .name);
assertEquals(0L, requestMeter.getCount());
assertEquals(0L, requestMeter.getCount());
assertSame(fooBarDecoder, decoders.decoder("foo/bar ; charset=utf-8"));
assertEquals(dino, Dino.parseFrom(bufBytes(buf)));
assertSame(jsonDecoder, decoders.decoder(null));
assertEquals( Unpooled.copiedBuffer("{\\"name\\":\\"foo\\"}", Charset.forName("UTF-16")), jsonEncoder.encode(Unpooled.directBuffer(), "utf-16, foo-bar", new Person("foo")));
assertEquals("/foo/v1", XUrl.path(url1));
assertEquals( Unpooled.copiedBuffer("{\\"name\\":\\"foo\\"}", Charset.forName("UTF-8")), jsonEncoder.encode(Unpooled.directBuffer(), "baz-bar, foo-bar", new Person("foo")));
assertEquals("api.nordstrom.com", result.getHostString()); assertEquals(8080, result.getPort());
assertSame(fooBarEncoder, encoders.acceptedEncoder("foo/bar; q=6, text/plain; q=5"));
assertSame(fooBarDecoder, decoders.decoder("foo/bar"));
assertThat(tlsConfig.getPrivateKey(), is(parsePrivateKeyFromPem(privateKey))); assertThat(tlsConfig.getCertificateAndChain().length, is(1)); assertThat(tlsConfig.getCertificateAndChain()[0], is(parseX509CertificateFromPem(certificate)));
assertSame(jsonEncoder, encoders.acceptedEncoder(""));
assertEquals("api.nordstrom.com", XUrl.host(url1));
assertEquals("api.nordstrom.com", result.getHostString()); assertEquals(443, result.getPort());
assertEquals("?foo=bar", XUrl.rawQueryParameters(url1));
assertEquals("api.nordstrom.com", XUrl.host(url2));
assertEquals("api.nordstrom.com", result.getHostString()); assertEquals(80, result.getPort());
assertSame(jsonDecoder, decoders.decoder(""));
assertEquals(dino, result);
assertEquals(443, XUrl.port(url1)); assertEquals(8080, XUrl.port(url2));
assertEquals("/foo/extracted", path);
assertEquals(Unpooled.wrappedBuffer(new byte[] {1, 2, 3}), fakeRequest.body());
assertSame(jsonEncoder, encoders.acceptedEncoder(null));
assertEquals(expected1, testVal1); assertEquals(expected2, testVal2); assertEquals(expected3, testVal3);
assertSame(fooBarEncoder, encoders.acceptedEncoder("text/plain, foo/bar"));
assertEquals("/foo/extracted", path);
assertNotNull(RxJavaCreate.async());
assertNotNull(TransformingObservables.parallel());
assertNotNull(TransformingObservables.sequential());
assertNotNull(TransformingObservables.zipPersons());
assertNotNull(RxJavaCreate.from());
assertEquals(payloadQName, msgCtx.getEnvelope().getBody().getFirstElement().getQName()); assertFalse(msgCtx.getEnvelope().getBody().isComplete());
assertEquals(payloadQName, msgCtx.getEnvelope().getBody().getFirstElement().getQName()); assertFalse(msgCtx.getEnvelope().getBody().isComplete());
assertEquals(-1d, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(90d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(90d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(150d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(-1d, policyMock.nexChargeTime(vmMock), 0.01);
assertEquals(DISTANCE_SYDNEY_LONDON_KM, distanceSydneyToLondonKM, DISTANCE_COMPARISON_DELTA_KM); assertEquals(DISTANCE_SYDNEY_LONDON_KM, distanceLondonToSydneyKM, DISTANCE_COMPARISON_DELTA_KM);
assertEquals(DISTANCE_SYDNEY_NEW_YORK_KM, distanceSydneyToNewYorkKM, DISTANCE_COMPARISON_DELTA_KM); assertEquals(DISTANCE_SYDNEY_NEW_YORK_KM, distanceNewYorkToSydneyKM, DISTANCE_COMPARISON_DELTA_KM);
assertEquals(clean("LstInts;LstStr; X;Y;Class"), clean(line)); assertEquals(clean("Prop|LstInts|LstStr| X|Y|Class"), clean(line)); assertEquals(clean("Prop|Y"), clean(line)); assertEquals(clean("X|Prop"), clean(line)); assertEquals(clean("X|LstStr"), clean(line));
assertEquals(DEFAULT_DELAY, bootDelay.getDelay(vmex), delta); assertEquals(90.0, stat.getMean(), delta); assertEquals(2.0, stat.getStandardDeviation(), delta); assertEquals(55.0, stat.getMean(), delta); assertEquals(3.0, stat.getStandardDeviation(), delta); assertEquals(810.2, stat.getMean(), delta); assertEquals(10.0, stat.getStandardDeviation(), delta);
assertEquals(DISTANCE_LONDON_NEW_YORK_KM, distanceLondonToNewYorkKM, DISTANCE_COMPARISON_DELTA_KM); assertEquals(DISTANCE_LONDON_NEW_YORK_KM, distanceNewYorkToLondonKM, DISTANCE_COMPARISON_DELTA_KM);
assertEquals(5, cloudletIds.size()); assertEquals(6, ids.size());
assertEquals(DISTANCE_SYDNEY_MELBOURNE_KM, distanceSydneyToMelbourneKM, DISTANCE_COMPARISON_DELTA_KM); assertEquals(DISTANCE_SYDNEY_MELBOURNE_KM, distanceMelbourneToSydneyKM, DISTANCE_COMPARISON_DELTA_KM);
assertNull(singleDataItemStatSession.pollCloudlets(currTime));
assertEquals(-1d, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(40d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(61d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(92d * MINUTE, policyMock.nexChargeTime(vmMock), 0.01); assertEquals(-1d, policyMock.nexChargeTime(vmMock), 0.01);
assertThat(postprocessor.specificFilesystemLayoutExists()).isFalse();
assertThat(bean.isTestingConfigured()).isFalse();
assertThat(bean.isTestingConfigured()).isTrue();
assertThat(bean.isTestingConfigured()).isTrue();
assertThat(bean.isTestingConfigured()).isTrue();
assertEquals(60, tenantDao.find().size()); assertEquals(20, tenants1.size()); assertEquals(10, tenants2.size()); assertEquals(0, tenants3.size());
assertEquals(15, components1.size()); assertEquals(5, components2.size());
assertNotNull(userCredentials); assertEquals("3ed10af0-27d5-11e7-93ae-92361f002671", userCredentials.getId().toString());
assertTrue("Optional is expected to be non-empty", optEvent1.isPresent()); assertEquals(event, optEvent1.get()); assertFalse("Optional is expected to be empty", optEvent2.isPresent());
assertEquals(180, widgetsBundleDao.find().size()); assertEquals(30, widgetsBundles1.size()); assertEquals(40, widgetsBundles2.size()); assertEquals(10, widgetsBundles3.size());
assertEquals(15, components1.size()); assertEquals(5, components2.size());
assertEquals(15, customers1.size()); assertEquals(5, customers2.size());
assertEquals(customerId, originatorCaptor.getValue());
assertTrue(actual.isDone());
assertNotNull(assets); assertEquals(10, assets.size());
assertEquals(expected, actual);
assertEquals(30, widgetsBundleDao.find().size()); assertEquals(10, widgetsBundles1.size()); assertEquals(10, widgetsBundles2.size());
assertEquals(expected, actual);
assertTrue(customerOpt.isPresent()); assertEquals("CUSTOMER_5", customerOpt.get().getTitle());
assertNotNull(assets); assertEquals(5, assets.size());
assertEquals(40, customerUsers1.size()); assertEquals(20, customerUsers2.size()); assertEquals(0, customerUsers3.size());
assertEquals(20, tenantAdmins1.size()); assertEquals(10, tenantAdmins2.size()); assertEquals(0, tenantAdmins3.size());
assertTrue("Optional expected to be non-empty", assetOpt1.isPresent()); assertEquals(assetId2, assetOpt1.get().getId().getId()); assertFalse("Optional expected to be empty", assetOpt2.isPresent());
assertEquals("SEND_EMAIL", typeCaptor.getValue()); assertEquals(originator, originatorCaptor.getValue()); assertEquals("oreo", metadataCaptor.getValue().getValue("username")); assertNotSame(metaData, metadataCaptor.getValue()); assertEquals(expected, actual);
assertNotNull(deviceCredentials); assertEquals("958e3314-3215-11e7-93ae-92361f002671", deviceCredentials.getId().getId().toString()); assertEquals("ID_1", deviceCredentials.getCredentialsId());
assertTrue(actual1.isDone()); assertFalse(actual2.isDone());
assertEquals(15, devices1.size()); assertEquals(5, devices2.size());
assertNotNull("Event expected to be not null", event); assertEquals("be41c7a2-31f5-11e7-9cfd-2786e6aa2046", event.getId().getId().toString());
assertEquals(20, devices.size());
assertEquals(5, devices.size());
assertEquals(3, widgetTypes.size());
assertEquals(0, widgetsBundles4.size());
assertNotNull(deviceCredentials); assertEquals("958e3c74-3215-11e7-93ae-92361f002671", deviceCredentials.getId().getId().toString());
assertEquals(6, userDao.find().size()); assertNotNull(savedUser); assertEquals(additionalInfo, savedUser.getAdditionalInfo().toString());
assertNotNull(userCredentials); assertEquals("4b9e010c-27d5-11e7-93ae-92361f002671", userCredentials.getId().toString());
assertTrue("Unexpected released count " + actualReleased.get(), actualReleased.get() > 10 && actualReleased.get() < 20); assertTrue("Unexpected rejected count " + actualRejected.get(), actualRejected.get() > 80 && actualRejected.get() < 90);
assertEquals("44e6af4e-2825-11e7-93ae-92361f002671", widgetsBundle.getId().toString());
assertTrue(e instanceof ExecutionException);
assertEquals(10, events1.size()); assertEquals(10, events2.size()); assertEquals(10, events3.size()); assertEquals(5, events4.size()); assertEquals(5, events5.size());
assertTrue(actual1.isDone()); assertFalse(actual2.isDone()); assertTrue(actual3.isDone()); assertTrue(e instanceof ExecutionException); assertTrue(actualCause instanceof BufferLimitException); assertEquals("Rate Limit Buffer is full", actualCause.getMessage());
assertEquals(20, assets1.size()); assertEquals(10, assets2.size()); assertEquals(0, assets3.size());
assertEquals(5, events1.size()); assertEquals(5, events2.size()); assertEquals(5, events3.size()); assertEquals(4, events4.size()); assertEquals(2, events5.size());
assertTrue(resultSetFuture.isDone()); assertTrue(e instanceof IllegalStateException); assertTrue(actualCause instanceof ExecutionException);
assertNotNull(userCredentials); assertEquals("4b9e010c-27d5-11e7-93ae-92361f002671", userCredentials.getId().toString()); assertEquals(true, userCredentials.isEnabled()); assertEquals("password", userCredentials.getPassword()); assertEquals("ACTIVATE_TOKEN_2", userCredentials.getActivateToken()); assertEquals("RESET_TOKEN_2", userCredentials.getResetToken());
assertEquals(60, assetDao.find().size()); assertEquals(20, assets1.size()); assertEquals(10, assets2.size()); assertEquals(0, assets3.size());
assertEquals(customerId, originatorCaptor.getValue());
assertEquals(id, widgetType.getId().getId());
assertThat(res).isEqualTo(testCases.get(key));
assertThat(activity.isFinishing(), is(false)); assertThat(fragment.hasBeenStartActivityCalled(TestFragment.START_ACTIVITY_WITH_OPTIONS), is(true)); assertThat(fragment.hasBeenStartActivityCalled( TestFragment.START_ACTIVITY | TestFragment.START_ACTIVITY_FOR_RESULT | TestFragment.START_ACTIVITY_FOR_RESULT_WITH_OPTIONS ), is(false));
assertThat(Translate.createAnimator( translate, view, values, 0, 0, 0f, 0f, 0f, 0f ), is(nullValue()));
assertThat(centerPosition, is(notNullValue())); assertThat(centerPosition.length, is(2)); assertThat(centerPosition[0], is(view.getX() + center[0])); assertThat(centerPosition[1], is(view.getY() + center[1]));
assertThat(wrapper.getDuration(), is(100L));
assertThat(Translate.createAnimator( new Translate(), createViewNotAttachedToWindow(), new TransitionValues(), 0, 0, 0f, 0f, 0f, 0f ), is(nullValue()));
assertThat(translate.onAppear(new FrameLayout(context), new View(context), null, null), is(nullValue()));
assertThat(transitionValues.values.isEmpty(), is(false)); assertThat(transitionValues.values.get(Scale.PROPERTY_TRANSITION_SCALE_X), CoreMatchers.<Object>is(0.75f)); assertThat(transitionValues.values.get(Scale.PROPERTY_TRANSITION_SCALE_Y), CoreMatchers.<Object>is(0.25f));
assertThat(translate.onDisappear(new FrameLayout(context), view, null, null), is(nullValue()));
assertThat(activity.isFinishing(), is(false)); assertThat(activity.getWindow().getExitTransition(), is(transition)); assertThat(fragment.hasBeenStartActivityCalled(TestFragment.START_ACTIVITY_WITH_OPTIONS), is(true)); assertThat(fragment.hasBeenStartActivityCalled( TestFragment.START_ACTIVITY | TestFragment.START_ACTIVITY_FOR_RESULT | TestFragment.START_ACTIVITY_FOR_RESULT_WITH_OPTIONS ), is(false));
assertThat(transition.intentExtras().getString("extra_text"), is("Extra text.")); assertThat(transition.intentExtras().getInt("extra_int"), is(1000));
assertThat(translate.onAppear(new FrameLayout(context), view, null, null), is(nullValue()));
assertSame(transition.getActivityClass(), TestActivity.class);
assertThat(Reveal.createAnimator(view, 0, 100), is(notNullValue()));
assertThat(new TestTransition().sharedElementsUseOverlay(false).sharedElementsUseOverlay(), is(false)); assertThat(new TestTransition().sharedElementsUseOverlay(true).sharedElementsUseOverlay(), is(true));
assertThat(new Translate().onDisappear(new FrameLayout(context), view, values, null), is(nullValue()));
assertThat(wrapper.isRunning(), is(true));
assertThat(new Reveal(Reveal.REVEAL).getMode(), is(Reveal.REVEAL)); assertThat(new Reveal(Reveal.CONCEAL).getMode(), is(Reveal.CONCEAL));
assertThat(parcel.readInt(), is(startEnterAnimation)); assertThat(parcel.readInt(), is(startExitAnimation)); assertThat(parcel.readInt(), is(finishEnterAnimation)); assertThat(parcel.readInt(), is(finishExitAnimation)); assertThat(parcel.readString(), is("TEST_TRANSITION"));
assertThat(new TestTransition().reenterTransition(transition).reenterTransition(), is(transition));
assertThat(intent, is(notNullValue())); assertThat(component, is(notNullValue())); assertThat(component.getClassName(), is(TestActivity.class.getName())); assertThat(component.getPackageName(), is(context.getPackageName())); assertThat(intent.getExtras(), is(nullValue()));
assertThat(wrapper.getListeners().isEmpty(), is(true));
assertThat(Reveal.createAnimator(view, view.getWidth() / 2, view.getHeight() / 2, 0, 100), is(notNullValue()));
assertThat(scale.onDisappear(new FrameLayout(context), view, null, null), is(nullValue()));
assertThat(new TestTransition().exitTransition(transition).exitTransition(), is(transition));
assertThat(new TestTransition().sharedElementReenterTransition(transition).sharedElementReenterTransition(), is(transition));
assertThat(reveal.onAppear(new FrameLayout(context), view, null, null), is(notNullValue()));
assertThat(scale.onAppear(new FrameLayout(context), view, null, null), is(nullValue()));
assertThat(new TestTransition().sharedElementReturnTransition(transition).sharedElementReturnTransition(), is(transition));
assertThat(center, is(notNullValue())); assertThat(center.length, is(2)); assertThat(center[0], is(view.getWidth() * 0.50f)); assertThat(center[1], is(view.getHeight() * 0.50f));
assertThat(center, is(notNullValue())); assertThat(center.length, is(2)); assertThat(center[0], is(view.getWidth() * 0.25f)); assertThat(center[1], is(view.getHeight() * 0.80f));
assertThat(new TestTransition().allowEnterTransitionOverlap(false).allowEnterTransitionOverlap(), is(false)); assertThat(new TestTransition().allowEnterTransitionOverlap(true).allowEnterTransitionOverlap(), is(true));
assertThat(new TestTransition().enterTransition(transition).enterTransition(), is(transition));
assertThat(reveal.onDisappear(new FrameLayout(context), view, null, null), is(nullValue()));
assertThat(new TestTransition().requestCode(50).requestCode(), is(50));
assertThat(scales, is(notNullValue())); assertThat(scales.length, is(2)); assertThat(scales[0], is(0.5f)); assertThat(scales[1], is(0.25f));
assertThat(translate.onDisappear(new FrameLayout(context), view, values, null), is(nullValue()));
assertThat(Scale.createAnimator(view, 0.0f, 1.0f), is(nullValue()));
assertThat(transition.singleSharedElement(), is(notNullValue())); assertThat(transition.singleSharedElement().first, is(firstElement)); assertThat(transition.singleSharedElement().second, is("first_element")); assertThat(transition.singleSharedElement(), is(notNullValue())); assertThat(transition.singleSharedElement().first, is(firstElement)); assertThat(transition.singleSharedElement().second, is("first_element"));
assertThat(activity.getWindow().getExitTransition(), is(transition)); assertThat(activity.isFinishing(), is(false)); assertThat(fragment.hasBeenStartActivityCalled(TestFragment.START_ACTIVITY_WITH_OPTIONS), is(true)); assertThat(fragment.hasBeenStartActivityCalled( TestFragment.START_ACTIVITY | TestFragment.START_ACTIVITY_FOR_RESULT | TestFragment.START_ACTIVITY_FOR_RESULT_WITH_OPTIONS ), is(false));
assertThat(translate.onDisappear(new FrameLayout(context), new View(context), null, null), is(nullValue()));
assertThat(Reveal.calculateRadius(view), is((float) Math.sqrt(Math.pow(view.getWidth(), 2) + Math.pow(view.getHeight(), 2))));
assertThat(scales, is(notNullValue())); assertThat(scales.length, is(2)); assertThat(scales[0], is(0.15f)); assertThat(scales[1], is(0.95f));
assertThat(wrapper.isStarted(), is(true));
assertThat(translate.onAppear(new FrameLayout(context), view, null, values), is(nullValue()));
assertThat(new TestTransition().sharedElementEnterTransition(transition).sharedElementEnterTransition(), is(transition));
assertThat(reveal.onAppear(new FrameLayout(context), view, null, null), is(nullValue()));
assertThat(Reveal.createAnimator(view, 100f, 100f), is(nullValue()));
assertThat(Scale.createAnimator(view, 1.0f, 1.0f), is(nullValue())); assertThat(Scale.createAnimator(view, -0.25f, -0.25f), is(nullValue()));
assertThat(locationOnScreen, is(notNullValue())); assertThat(locationOnScreen.length, is(2)); assertThat(locationOnScreen[0], is(mockLocationOnScreen[0])); assertThat(locationOnScreen[1], is(mockLocationOnScreen[1]));
assertThat(transition.makeSceneTransitionAnimation(mockActivity), is(nullValue()));
assertThat(Reveal.calculateRadius(100, 200), is((float) Math.sqrt(Math.pow(100, 2) + Math.pow(200, 2))));
assertThat(translate.onAppear(new FrameLayout(context), view, null, values), is(nullValue()));
assertThat(reveal.onDisappear(new FrameLayout(context), view, null, null), is(notNullValue()));
assertThat(new TestTransition().allowReturnTransitionOverlap(false).allowReturnTransitionOverlap(), is(false)); assertThat(new TestTransition().allowReturnTransitionOverlap(true).allowReturnTransitionOverlap(), is(true));
assertThat(wrapper.isPaused(), is(true));
assertThat(TransitionUtils.isViewAttachedToWindow(createMockViewAttachedToWindow(true)), is(true)); assertThat(TransitionUtils.isViewAttachedToWindow(createMockViewAttachedToWindow(false)), is(false));
assertThat(scales, is(notNullValue())); assertThat(scales.length, is(2)); assertThat(scales[0], is(0.5f)); assertThat(scales[1], is(0.25f));
assertThat(locationOnScreen, is(notNullValue())); assertThat(locationOnScreen.length, is(2)); assertThat(locationOnScreen[0], is(mockLocationOnScreen[0])); assertThat(locationOnScreen[1], is(mockLocationOnScreen[1]));
assertThat(Scale.createAnimator(view, 0.25f, 0.25f, 0.25f, 0.25f), is(nullValue())); assertThat(Scale.createAnimator(view, -0.35f, -0.35f, -0.35f, -0.35f), is(nullValue()));
assertThat(options, is(notNullValue())); assertThat(options.toBundle(), is(nullValue()));
assertThat(wrapper.getStartDelay(), is(250L));
assertThat(reveal.getMode(), is(Reveal.REVEAL));
assertThat(wrapper.getInterpolator(), is(mockInterpolator));
assertThat(transition.describeContents(), is(0));
assertThat(activity.isFinishing(), is(false)); assertThat(fragment.hasBeenStartActivityCalled(TestFragment.START_ACTIVITY_WITH_OPTIONS), is(true)); assertThat(fragment.hasBeenStartActivityCalled( TestFragment.START_ACTIVITY | TestFragment.START_ACTIVITY_FOR_RESULT | TestFragment.START_ACTIVITY_FOR_RESULT_WITH_OPTIONS ), is(false));
assertThat(new TestTransition().sharedElementExitTransition(transition).sharedElementExitTransition(), is(transition));
assertThat(new TestTransition().returnTransition(transition).returnTransition(), is(transition));
assertEquals(21.0d, (double) json.getDouble("average"));
assertEquals(2, d.getCols()); assertEquals(2, d.getRows()); assertEquals(2.9983328701, d.get(0, 0), 1e-10); assertEquals(-1.1, d.get(0, 1), 1e-10); assertEquals(0.0, d.get(1, 0), 1e-10); assertEquals(1.0, d.get(1, 1), 1e-10);
assertEquals(2, d.length); assertEquals(-5.2008771255, d[0], 1e-10); assertEquals(6.2008771255, d[1], 1e-10);
assertEquals(2, d.length); assertEquals(1.4991664351, d[0], 1e-10); assertEquals(-1.4991664351, d[1], 1e-10);
assertEquals(2, d.getCols()); assertEquals(2, d.getRows()); assertEquals(-5.2008771255, d.get(0, 0), 1e-10); assertEquals(0.0, d.get(0, 1), 1e-10); assertEquals(0.0, d.get(1, 0), 1e-10); assertEquals(6.2008771255, d.get(1, 1), 1e-10);
assertEquals(2, d.length); assertEquals(1.45, d[0], 1e-10); assertEquals(1.45, d[1], 1e-10);
assertEquals(2, d.length); assertEquals(0.0, d[0], 1e-10); assertEquals(0.0, d[1], 1e-10);
assertEquals(2, d.getCols()); assertEquals(2, d.getRows()); assertEquals(1.45, d.get(0, 0), 1e-10); assertEquals(1.4991664351, d.get(0, 1), 1e-10); assertEquals(-1.4991664351, d.get(1, 0), 1e-10); assertEquals(1.45, d.get(1, 1), 1e-10);
assertEquals(expectedUrl, actualUrl);
assertTrue(policy.isAnonymousAccount(subject));
assertEquals(101, set.rangeSize()); assertEquals(1, set.size()); assertFalse(set.remove(101)); assertTrue(set.remove(50)); assertEquals(2, set.size()); assertEquals(100, set.rangeSize()); assertFalse(set.remove(101)); assertEquals(2, set.size()); assertEquals(99, set.rangeSize()); assertEquals(2, set.size()); assertEquals(98, set.rangeSize()); assertEquals(3, set.size()); assertEquals(97, set.rangeSize());
assertTrue(policy.isAuthenticationRequired(sc));
assertEquals(list.size(), 5); assertEquals(list.size(), 5); assertEquals(list.get(0), "0"); assertEquals(list.get(1), "1"); assertEquals(list.get(2), "2"); assertEquals(list.get(3), "3"); assertEquals(list.get(4), "4");
assertFalse("test:part1" + " must be detected as non-composite URI", URISupport.isCompositeURI(new URI("test:part1")));
assertEquals("", string);
assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType()); assertTrue(destination.isComposite()); assertEquals(4, composites.length); assertTrue(foundQueue); assertTrue(foundTopic); assertTrue(foundTempTopic); assertTrue(foundTempQueue);
assertTrue(set.contains(0)); assertTrue(set.contains(42)); assertTrue(set.contains(49)); assertTrue(set.contains(153)); assertFalse(set.contains(43)); assertFalse(set.contains(99)); assertFalse(set.contains(-1)); assertFalse(set.contains(11));
assertEquals(destinationView.getQueueSize(),messageCount);
assertTrue(perm instanceof WildcardPermission); assertEquals("foo:bar:action1,action2", perm.toString());
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", binaryId, idObject);
assertNotNull(ref);
assertNotNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
assertTrue(set.isEmpty()); assertFalse(set.isEmpty());
assertFalse(AmqpMessageSupport.isContentType("test", message));
assertNull(result); assertNull(result); assertNull(result); assertNotNull(result); assertEquals(3, result.size()); assertNotNull(result); assertEquals(3, result.size());
assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType()); assertTrue(destination.isComposite()); assertEquals(2, composites.length); assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType()); assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType()); assertEquals(destinationA, composites[0].getPhysicalName()); assertEquals(destinationB, composites[1].getPhysicalName());
assertTrue(!frames.isEmpty()); assertEquals(2, frames.size()); assertFalse(connect.cleanSession()); assertEquals("user", connect.userName().toString()); assertEquals("pass", connect.password().toString()); assertEquals("test", connect.clientId().toString());
assertFalse(AmqpMessageSupport.isContentType("test", message));
assertEquals(0, getTransportConnector("broker1").getConnections().size()); assertEquals(1, getTransportConnector("broker2").getConnections().size()); assertEquals(1, getTransportConnector("broker1").getConnections().size()); assertEquals(0, getTransportConnector("broker2").getConnections().size());
assertEquals(props, props2);
assertNotSame(taken, taken2); assertTrue(taken2 > taken);
assertTrue(!frames.isEmpty()); assertEquals(1, frames.size()); assertTrue(connect.cleanSession()); assertTrue(!frames.isEmpty()); assertEquals(1, frames.size());
assertEquals("limit is half jvm limit", Math.round(Runtime.getRuntime().maxMemory() / 2.0), underTest.getLimit());
assertTrue(policy.isAssumeIdentity(null));
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertEquals("usage is correct", 10, underTest.getPercentUsage()); assertEquals("no new thread created without listener or callback",activeThreadCount, Thread.activeCount());
assertFalse(policy.isAuthenticationRequired(sc));
assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
assertTrue("contains bob", underTest.getPublishableConnectString(dummyTransportConnector).contains("bob"));
assertFalse(destination.isComposite()); assertEquals("test", destination.getPhysicalName()); assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertFalse(perm.implies(dummy));
assertEquals(1, next); assertEquals(10, next); assertEquals(2, next);
assertFalse(perm1.implies(perm2));
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", stringMessageId, baseMessageIdString);
assertSame(resolver, filter.getActionPermissionResolver());
assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
assertSame(factory, filter.getAuthenticationTokenFactory());
assertEquals(1, set.rangeSize()); assertEquals(3, set.rangeSize()); assertEquals(0, set.rangeSize());
assertTrue(!frames.isEmpty()); assertEquals(1, frames.size()); assertTrue(connect.cleanSession());
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", stringId, idObject);
assertEquals("path", data.getPath()); assertNull(data.getPath());
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", suffix, idObject);
assertFalse(AmqpMessageSupport.isContentType(null, message));
assertEquals(1, next); assertEquals(7, next); assertEquals(6, next); assertEquals(2, next);
assertNull("null object should have been returned", messageIdHelper.toIdObject(null));
assertSame(policy, factory.getAuthenticationPolicy());
assertNull("null string should have been returned", messageIdHelper.toBaseMessageIdString(nullString));
assertSame(factory, filter.getSecurityContextFactory());
assertEquals(1, destinations.length);
assertEquals(100, connection.getPrefetchPolicy().getQueuePrefetch()); assertNotNull("Connection object returned by ActiveMQConnectionFactory.createConnection() is null", con);
assertEquals("one in the pool", 1, underTest.size()); assertEquals("0 in the pool", 0, underTest.size());
assertEquals("Incorrect default value", ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION, activationSpec.getSubscriptionDurability());
assertFalse(policy.isAnonymousAccount(new SubjectAdapter()));
assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", encodedUuidString, idObject);
assertEquals(1, destinations.length);
assertNull(result);
assertEquals(0, connection.getNumActiveSessions()); assertEquals(1, connection.getNumActiveSessions()); assertEquals(0, connection.getNumActiveSessions()); assertEquals(1, connection.getNumtIdleSessions()); assertEquals(1, connection.getNumSessions());
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertTrue(!frames.isEmpty()); assertEquals(1, frames.size()); assertFalse(connect.cleanSession()); assertEquals("user", connect.userName().toString()); assertEquals("pass", connect.password().toString()); assertEquals("test", connect.clientId().toString());
assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType()); assertTrue(destination.isComposite()); assertEquals(2, composites.length); assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[0].getDestinationType()); assertEquals(ActiveMQDestination.QUEUE_TYPE, composites[1].getDestinationType()); assertEquals(destinationA, composites[0].getPhysicalName()); assertEquals(destinationB, composites[1].getPhysicalName());
assertFalse(destination.isComposite()); assertEquals("test", destination.getPhysicalName()); assertEquals(ActiveMQDestination.QUEUE_TYPE, destination.getDestinationType());
assertEquals(1, data.getComponents().length);
assertTrue(!frames.isEmpty()); assertEquals(1, frames.size()); assertFalse(connect.cleanSession()); assertEquals("user", connect.userName().toString()); assertEquals("pass", connect.password().toString()); assertEquals("test", connect.clientId().toString());
assertTrue(AmqpMessageSupport.isContentType(null, message));
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", longId, idObject);
assertFalse(URISupport.checkParenthesis(str)); assertTrue(URISupport.checkParenthesis(str));
assertNotNull(resolver); assertTrue(resolver instanceof DestinationActionPermissionResolver);
assertEquals("somehost.lan", IdGenerator.sanitizeHostName("somehost.lan")); assertEquals("otherhost.lan", IdGenerator.sanitizeHostName("other\\u0E08host.lan"));
assertNull(mgr.getSession(null)); assertNull(mgr.getSession(new DefaultSessionKey("foo")));
assertEquals(0, getTransportConnector("broker1").getConnections().size()); assertEquals(1, getTransportConnector("broker2").getConnections().size()); assertEquals(0, getTransportConnector("broker1").getConnections().size()); assertEquals(1, getTransportConnector("broker2").getConnections().size());
assertEquals(key(counter), iterator.next().getKey()); assertEquals(key(counter), iterator.next().getKey()); assertEquals(key(count), entry.getKey()); assertEquals(count, (long) entry.getValue());
assertFalse(destination.isComposite()); assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", uuid, idObject);
assertEquals(expected[index++], iterator.next().longValue());
assertTrue(invoked[0]);
assertTrue(dummyClass.isTrace());
assertThat(XASupport.toString(flags), is(expectedResult));
assertTrue(superset.implies(subset)); assertFalse(subset.implies(superset));
assertTrue(set.isEmpty()); assertFalse(set.isEmpty()); assertTrue(set.isEmpty());
assertEquals(taken, watch.taken()); assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);
assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType()); assertTrue(destination.isComposite()); assertEquals(2, composites.length); assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[0].getDestinationType()); assertEquals(ActiveMQDestination.TOPIC_TYPE, composites[1].getDestinationType()); assertEquals(destinationA, composites[0].getPhysicalName()); assertEquals(destinationB, composites[1].getPhysicalName());
assertNotNull(AmqpMessageSupport.getSymbol("x-opt-something-or-other"));
assertNotNull("null object should not have been returned", idObject); assertEquals("expected id object was not returned", binaryId, idObject);
assertFalse(destination.isComposite()); assertEquals("test", destination.getPhysicalName()); assertEquals(ActiveMQDestination.TEMP_TOPIC_TYPE, destination.getDestinationType());
assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
assertFalse(policy.isAuthenticationRequired(sc));
assertFalse(destination.isComposite()); assertEquals("test", destination.getPhysicalName()); assertEquals(ActiveMQDestination.TOPIC_TYPE, destination.getDestinationType());
assertEquals(2, destinations.length);
assertTrue(true);
assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", null));
assertTrue(AmqpMessageSupport.isContentType("test", message));
assertEquals(2, next); assertEquals(4, next); assertEquals(2, next);
assertEquals("correct size", count, listIndex.size()); assertEquals("correct size", --count, listIndex.size()); assertEquals("correct size", count, listIndex.size()); assertEquals("correct size", 0, listIndex.size());
assertTrue("listener was called", called.await(30, TimeUnit.SECONDS)); assertTrue("listener called from another thread", !Thread.currentThread().toString().equals(listnerThreadNameHolder[0])); assertEquals("usage is correct", 10, underTest.getPercentUsage()); assertEquals("new thread created with listener", activeThreadCount + 1, Thread.activeCount());
assertNull(StringArrayConverter.convertToStringArray(null)); assertNull(StringArrayConverter.convertToStringArray("")); assertEquals(1, array.length); assertEquals("foo", array[0]); assertEquals(2, array.length); assertEquals("foo", array[0]); assertEquals("bar", array[1]); assertEquals(3, array.length); assertEquals("foo", array[0]); assertEquals("bar", array[1]); assertEquals("baz", array[2]);
assertTrue(true);
assertTrue(pcf instanceof QueueConnectionFactory); assertTrue(pcf instanceof TopicConnectionFactory);
assertEquals(0, data.getComponents().length);
assertFalse(policy.isSystemAccount(new SubjectAdapter()));
assertEquals(le.getCause().getMessage(), "Empty password is not allowed");
assertFalse(destination.isComposite()); assertEquals(ActiveMQDestination.TEMP_QUEUE_TYPE, destination.getDestinationType());
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertNotNull("null string should not have been returned", baseMessageIdString); assertEquals("expected base id string was not returned", expected, baseMessageIdString);
assertTrue(client.getClientId().startsWith("foo"));
assertTrue(schema.compareSuffixes("beta", "Beta") == 0);
assertEquals(schema.getCanonicalSuffix("beta"), schema.getCanonicalSuffix("Beta")); assertEquals(schema.getCanonicalSuffix("b"), schema.getCanonicalSuffix("Beta"));
assertEquals("P1DT2H50M", Utils.durationTranslator(input));
assertEquals("P3D", Utils.durationTranslator(input));
assertEquals("PT3H", Utils.durationTranslator(input));
assertEquals("PT2H50M", Utils.durationTranslator(input));
assertEquals("PT50M", Utils.durationTranslator(input));
assertEquals(Collections.singletonList(MediaType.APPLICATION_JSON), headers.getAccept()); assertEquals("Basic " + token64, headers.get("Authorization").get(0));
assertEquals( "3.1416", Utils.format(Math.PI)); assertEquals( "314.1593", Utils.format(Math.PI* 100));
assertEquals(100, mappings.size());
assertEquals( n + 1, m.size() ); assertEquals(5, m.size());
assertThat(sonarLint).isNotNull(); assertThat(sonarLint).isInstanceOf(StandaloneSonarLint.class);
assertThat(files).hasSize(1); assertThat(files).extracting("test").containsOnly(true);
assertThat(integer1).isEqualTo(integer2); assertThat(integer1).isEqualTo(integer1); assertThat(integer1).isNotEqualTo(integer3);
assertThat(files).hasSize(2); assertThat(files).extracting("test").containsOnly(false);
assertThat(files).hasSize(2); assertThat(files).extracting("charset").containsOnly(StandardCharsets.US_ASCII);
assertThat(integer.get()).isEqualTo(10);
assertThat(main.run()).isEqualTo(Main.ERROR); assertThat(getLogs(err)).contains("invalid operation");
assertThat(main.run()).isEqualTo(Main.SUCCESS);
assertThat(getLogs(err)).contains("Error loading plugins");
assertThat(SystemInfo.os()).isEqualTo("linux 2.5 x64");
assertThat(files).extracting("path").containsOnly(src1.toString());
assertThat(files).extracting("path").containsOnly(test1.toString(), test2.toString(), src1.toString());
assertThat(SystemInfo.java()).isEqualTo("Java 1.9 oracle (64-bit)"); assertThat(SystemInfo.java()).isEqualTo("Java 1.9 oracle (32-bit)"); assertThat(SystemInfo.java()).isEqualTo("Java 1.9 oracle");
assertThat(main.run()).isEqualTo(Main.ERROR); assertThat(getLogs(err)).contains("invalid operation"); assertThat(getLogs(err)).contains("analysis failed");
assertThat(Util.escapeFileName("myfile.html")).isEqualTo("myfile.html"); assertThat(Util.escapeFileName("myfile.h.html")).isEqualTo("myfile.h.html"); assertThat(Util.escapeFileName("invalid:name.html")).isEqualTo("invalid_name.html"); assertThat(Util.escapeFileName("name-ok.html")).isEqualTo("name-ok.html");
assertThat(main.run()).isEqualTo(Main.ERROR); assertThat(getLogs(err)).contains("invalid operation");
assertThat(plugins).hasSize(1); assertThat(Paths.get(plugins[0].toURI())).isEqualTo(plugin);
assertThat(output).isNotEmpty(); assertThat(output).contains("{\\"issues\\":[{" + "\\"file\\":\\"comp1\\"" + ",\\"key\\":\\"S1000\\"" + ",\\"severity\\":\\"BLOCKER\\"" + ",\\"title\\":\\"some rule description\\"" + ",\\"message\\":\\"some message\\"" + ",\\"pos\\":{\\"line\\":10,\\"column\\":2}" + ",\\"end_pos\\":{\\"line\\":0,\\"column\\":0}" + "}]");
assertThat(files).extracting("path").doesNotContain(hiddenSrc); assertThat(files).extracting("path").contains(src1.toString());
assertThat(output).contains("{\\"issues\\":[]");
assertThat(main.run()).isEqualTo(Main.ERROR); assertThat(getLogs(err)).contains("invalid operation");
assertThat(integer.get()).isEqualTo(0); assertThat(integer.get()).isEqualTo(1); assertThat(integer.get()).isEqualTo(2);
assertThat(files).isEmpty();
assertTrue(res);
assertNull(presenterImpl.oldProject);
assertThat("There should be the default code generator and the test edit one", codeGenerators.size(), is(2));
assertTrue(pres.getContractApplication().isLazinessProtection()); assertFalse(pres.getContractApplication().isRetirementProtection()); assertTrue(pres.getContractApplication().isLazinessProtection()); assertTrue(pres.getContractApplication().isRetirementProtection());
assertThat(propertyDescriptionUnderTest.getPropertyClassNameBoxedWithoutTypeParameter(), is("List")); assertThat(propertyDescriptionUnderTest.getPropertyClassNameBoxedWithoutTypeParameter(), is("Integer"));
assertEquals(1.5f, entry.getEffectiveDurationHours(), Float.MIN_NORMAL);
assertThat(propertyDescriptionUnderTest.getPropertyClassTypeParameter(), is("String"));
assertNotNull(exc); assertTrue(exc.toString().contains("Try to work with outdated revision"));
assertTrue(project.equals(new Project("bla")));
assertNotNull(res); assertEquals("Hans Hummel", res.getName()); assertEquals(1, res.getHistory().size()); assertEquals("mors, mors", res.getHistory().get(0).getText());
assertEquals("bla".hashCode() + 31, project.hashCode());
assertTrue(pres.getContractApplication().isLazinessProtection()); assertFalse(pres.getContractApplication().isRetirementProtection()); assertFalse(pres.getContractApplication().isLazinessProtection()); assertTrue(pres.getContractApplication().isRetirementProtection());
assertEquals(111, contactDtoNew.getId()); assertEquals(1, contactDtoNew.getRevision()); assertEquals("Marge Simpson", contactDtoNew.getName()); assertEquals(0, contactDtoNew.getHistory().size());
assertThat(propertyDescriptionUnderTest.getPropertyClassWithoutTypeParameter(), is("List"));
assertEquals(alt, dayEntry.getProject()); assertEquals("01:00", dayEntry.getHours());
assertFalse(res);
assertNotNull(exc); assertTrue(exc.toString().contains("Try to work with outdated revision"));
assertEquals("2:22", dayEntry.getHours());
assertEquals("import com.vaadin.data.util.converter.StringToBigDecimalConverter;", daoUnderTest.createConverterImportString("StringToBigDecimalConverter")); assertEquals("import net.vergien.vaadin.CustomConverter;", daoUnderTest.createConverterImportString("net.vergien.vaadin.CustomConverter"));
assertEquals(1, res.size()); assertEquals("Hans Hummel", res.get(0).getName()); assertEquals(0, res.get(0).getHistory().size());
assertEquals(alt, dayEntry.getProject()); assertEquals("2:22", dayEntry.getHours());
assertEquals(project, presenterImpl.oldProject);
assertEquals(3, dto.getId()); assertEquals("Hans Hummel", dto.getName()); assertEquals(2, dto.getRevision()); assertEquals(1, dto.getHistory().size()); assertEquals(33, dto.getHistory().get(0).getId()); assertEquals("mors, mors", dto.getHistory().get(0).getText()); assertEquals(dateRef, dto.getHistory().get(0).getTimestamp());
assertEquals(4, timesheetDay.getEntries().size());
assertEquals(alt, dayEntry.getProject()); assertEquals("01:00", dayEntry.getHours());
assertEquals(11, contactDtoNew.getId()); assertEquals(3, contactDtoNew.getRevision()); assertEquals("Marge Simpson", contactDtoNew.getName()); assertEquals(0, contactDtoNew.getHistory().size());
assertEquals("2:22", dayEntry.getHours());
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedSelf).isSameAs(streamBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(streamBuilder);
assertThat(intent).isSameAs(dummyIntent);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(textBuilder);
assertThat(returnedSelf).isSameAs(textAndStreamBuilder);
assertThat(intent).isSameAs(dummyIntent);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedSelf).isSameAs(shareIntentNoBuilder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(intent).isSameAs(dummyIntent);
assertThat(returnedBuilder).isSameAs(textBuilder);
assertThat(returnedBuilder).isSameAs(textAndStreamBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(streamBuilder);
assertThat(returnedBuilder.builder).isSameAs(builder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(returnedSelf).isSameAs(textAndStreamNoBuilder);
assertThat(returnedSelf).isSameAs(textBuilder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertThat(returnedBuilder).isSameAs(textAndStreamBuilder);
assertThat(returnedBuilder).isSameAs(optionalExtraBuilder);
assertEquals("success", bean.execute()); assertFalse(bean.hasErrors()); assertTrue(wiser.getMessages().size() == 1); assertNotNull(bean.getSession().getAttribute("messages"));
assertEquals("home", bean.save()); assertNotNull(bean.getUser()); assertFalse(bean.hasErrors());
assertTrue(bean.getUsers().size() >= 1); assertFalse(bean.hasErrors());
assertEquals(converter.convert(String.class, "anystring"), "anystring");
assertTrue(roles.size() > 0);
assertEquals(DateUtil.convertDateToString(cal.getTime()), date);
assertEquals("input", action.execute());
assertEquals("", date);
assertTrue(now != null);
assertNotNull(e);
assertTrue(returned.getPhoneNumber().equals("303-555-1212")); assertTrue(returned.getRoles().size() == 1);
assertEquals("", date);
assertNull(action.getUser()); assertEquals("success", action.edit()); assertNotNull(action.getUser()); assertFalse(action.hasActionErrors());
assertEquals("success", action.execute()); assertFalse(action.hasActionErrors()); assertTrue(wiser.getMessages().size() == 1); assertNotNull(action.getSession().getAttribute("messages"));
assertTrue(wiser.getMessages().size() == 1); assertNotNull(session.getAttribute(BaseFormController.MESSAGES_KEY));
assertNotNull(DateUtil.getToday());
assertEquals("input", action.save()); assertNotNull(action.getUser()); assertFalse(action.hasActionErrors());
assertTrue(user != null); assertTrue(user.getRoles().size() == 1);
assertEquals("dd-MMM-yyyy", DateUtil.getDatePattern()); assertEquals("dd/MM/yyyy", DateUtil.getDatePattern()); assertEquals("dd.MM.yyyy", DateUtil.getDatePattern()); assertEquals(defaultPattern, fiPattern);
assertEquals(todayCalendar.get(Calendar.YEAR), cal.get(Calendar.YEAR)); assertEquals(todayCalendar.get(Calendar.MONTH), cal.get(Calendar.MONTH)); assertEquals(todayCalendar.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.DAY_OF_MONTH));
assertNull(date);
assertEquals("editProfile", bean.edit()); assertNotNull(bean.getUser().getUsername()); assertFalse(bean.hasErrors());
assertTrue(date != null);
assertEquals(DateUtil.getDateTime(DateUtil.getDateTimePattern(), timestamp), time);
assertTrue(wiser.getMessages().size() == 1); assertEquals(emailSubject, wm.getMimeMessage().getSubject()); assertEquals(emailBody, wm.getMimeMessage().getContent());
assertNull(date); assertEquals(todayCalendar.get(Calendar.YEAR), cal.get(Calendar.YEAR)); assertEquals(todayCalendar.get(Calendar.MONTH), cal.get(Calendar.MONTH)); assertEquals(todayCalendar.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.DAY_OF_MONTH));
assertEquals(action.cancel(), "home"); assertFalse(action.hasActionErrors()); assertEquals("cancel", action.cancel());
assertEquals("success", bean.search()); assertTrue(bean.getUsers().size() == 1);
assertNull(action.getUser().getId()); assertEquals("success", action.save()); assertFalse(action.hasActionErrors()); assertNotNull(action.getUser().getId()); assertTrue(wiser.getMessages().size() == 1); assertNotNull(action.getSession().getAttribute(Constants.REGISTERED)); assertEquals(Action.INPUT, action.save()); assertTrue(action.hasActionErrors());
assertEquals(Action.SUCCESS, action.execute());
assertEquals("1", s);
assertNotNull(repo); assertNotNull(resolved); assertEquals(gitRepo.getDirectory(), resolved.getDirectory());
assertEquals("test task: 1 " + StreamProgressMonitor.DONE + SEPARATOR, stream.toString());
assertNotNull(state); assertTrue(state instanceof BuildRepositoryState); assertEquals(commit, ((BuildRepositoryState) state).get(repo));
assertEquals(PollingResult.BUILD_NOW, op.invoke(dir, null));
assertNotNull(clone.invoke(dir, null)); assertEquals(PollingResult.BUILD_NOW, op.invoke(dir, null));
assertEquals(commit1, op.call()); assertEquals(commit2, op.call());
assertNotNull(clone.invoke(dir, null)); assertEquals(PollingResult.SIGNIFICANT, op.invoke(dir, null));
assertNull(op.call());
assertNotNull(cloned); assertEquals(commit2, fetched); assertTrue(out.toString().length() > 0);
assertNotNull(manager.getRepositories()); assertTrue(manager.getRepositories().isEmpty());
assertEquals("task1: 1 " + StreamProgressMonitor.DONE + SEPARATOR + "task2 ", stream.toString());
assertEquals(PollingResult.NO_CHANGES, op.invoke(null, null));
assertEquals("test task: 8 ", stream.toString());
assertEquals(SCMRevisionState.NONE, op.invoke(git.tempDirectory(), null));
assertNotNull(repo); assertEquals(git.repo().getDirectory(), repo.getDirectory());
assertNotNull(cloned); assertFalse(existing.getDirectory().equals(cloned.getDirectory())); assertFalse(new File(dir, Constants.DOT_GIT).exists()); assertTrue(new File(dir, repo.getDirectory()).exists()); assertTrue(new File(dir, repo.getDirectory() + File.separatorChar + Constants.DOT_GIT).exists()); assertNotNull(CommitUtils.getCommit(cloned, commit));
assertNotNull(clone.invoke(dir, null)); assertEquals(PollingResult.NO_CHANGES, op.invoke(dir, null));
assertEquals("test task ", stream.toString());
assertNotNull(cloned); assertFalse(existing.getDirectory().equals(cloned.getDirectory())); assertTrue(new File(dir, Constants.DOT_GIT).exists()); assertNotNull(CommitUtils.getCommit(cloned, commit));
assertEquals(SCMRevisionState.NONE, op.invoke(null, null));
assertThat(outFile.length(), greaterThan(JSON_SCHEMA_LENGTH));
assertThat(json, equalTo(expected));
assertThat(json, equalTo(expected));
assertThat(json, equalTo(expected));
assertThat(json, equalTo("3"));
assertThat(outFile.length(), greaterThan(fileLength)); assertThat(outFile.length(), greaterThan(JSON_SCHEMA_LENGTH));
assertThat(json, equalTo(expected));
assertThat(json, equalTo("3"));
assertThat(json, equalTo(expected));
assertThat( universe.routers(), hasKey(new IngressIdentifier<>(Message.class, "com.mycomp.igal", "names")));
assertThat(url, notNullValue());
assertThat( universe.ingress(), hasKey(new IngressIdentifier<>(Message.class, "com.mycomp.igal", "names")));
assertThat(apply, is(TestProtos.Letter.B.getValueDescriptor()));
assertThat( universe.functions(), allOf( hasKey(new FunctionType("com.example", "hello")), hasKey(new FunctionType("com.foo", "world"))));
assertThat(url, is(url(modulePath)));
assertThat(evaluator.evaluate(message), is("foo.bar/bob"));
assertThat(value, is(1));
assertThat(fragments, contains(fragment("foo"), fragment("bar"), fragment("baz")));
assertThat(value, contains(new IntNode(1), new IntNode(2), new IntNode(3)));
assertThat( fragments, contains(TextFragment.dynamicFragment("hello"), TextFragment.dynamicFragment("world")));
assertThat(state.boundNames, hasItems("name", "last"));
assertThat(TemplateParser.parseTemplateString("{{"), contains(staticFragment("{{")));
assertThat(getter.apply(message), is("bob"));
assertThat(getter.apply(message), is("lee"));
assertThat(state.boundNames, hasItems("parent", "child"));
assertThat(fragments, contains(TextFragment.dynamicFragment("this text should be dynamic")));
assertThat(getter.apply(message), is(Any.getDefaultInstance()));
assertThat(fragments, contains(staticFragment("hello world")));
assertThat(url, is(url("file:/tmp/a.txt")));
assertTrue(state.boundNames.isEmpty());
assertThat( foundUrls, contains( url(firstModuleDir.resolve("module.yaml")), url(secondModuleDir.resolve("module.yaml"))));
assertThat( fragments, contains( TextFragment.dynamicFragment("hello"), staticFragment("/"), TextFragment.dynamicFragment("world")));
assertThat(segment, notNullValue()); assertThat(segment.size(), is(MemorySegmentPool.PAGE_SIZE)); assertThat(pool.nextSegment(), nullValue());
assertThat( fragments, contains( staticFragment("io.example/greet-python/"), TextFragment.dynamicFragment("$.who[0].what[5].name")));
assertThat( fragments, contains(staticFragment("hello-"), TextFragment.dynamicFragment("world")));
assertThat(value, contains("hello", "world"));
assertThat(pool.nextSegment(), nullValue());
assertThat(fragments, contains(fragment("foo", 1), fragment("bar", 7)));
assertThat(snapshot.getGeneratedJavaName(), is(SimpleMessage.class.getName())); assertThat(snapshot.getMessageName(), is(SimpleMessage.getDescriptor().getFullName())); assertThat(snapshot.getDescriptorSet(), notNullValue());
assertThat(getter.apply(message), is("lee"));
assertThat(pool.nextSegment(), CoreMatchers.nullValue());
assertThat( fragments, contains(TextFragment.dynamicFragment("hello"), staticFragment("-world")));
assertThat(getter.apply(message), is(1234L));
assertThat(value, allOf(hasEntry("k1", "v1"), hasEntry("k2", "v2")));
assertThat(value, is("bar"));
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(result);
assertNotNull(bsc.data); assertEquals(bss.tupleCount.get(), 103);
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertTrue(instance.offer(i)); assertEquals(i, result);
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertNotNull(bsc.data); assertEquals(bss.tupleCount.get(), 205);
assertEquals(bss.tupleCount.get(), 1); assertFalse(bss.resetPayloads.isEmpty());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals("operator1.classname", SchemaTestOperator.class, operator1.getOperator().getClass()); assertNotNull(input1);
assertEquals(service, appender.mdcProperties.get("apex.service")); assertEquals(node == null ? "unknown" : node, appender.mdcProperties.get("apex.node")); assertEquals(application, appender.mdcProperties.get("apex.application")); assertTrue(LoggerUtil.removeAppender(log4jLogger, appenderName));
assertEquals("Serialized Deserialized Objects", pre, post);
assertNotNull(bsc.data); assertEquals(bss.tupleCount.get(), 1);
assertNull("System jar is null", jarHelper.getJar(Class.class)); assertNotNull("JarHelper jar is not null", jar); assertSame(jar, jarHelper.getJar(JarHelper.class)); assertNotNull("JarHelperTest jar is not null", jar); assertSame(jar, jarHelper.getJar(JarHelperTest.class));
assertEquals(tuple.getBaseSeconds(), 0x7afebabe, "base seconds"); assertEquals(tuple.getWindowWidth(), 500, "window width");
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals(DummyStreamingContainerManager.lastRequests.size(), 2); assertTrue(request instanceof CreateOperatorRequest); assertEquals(request1.getOperatorName(), "operatorName"); assertEquals(request1.getOperatorFQCN(), "className"); assertTrue(request instanceof SetOperatorPropertyRequest); assertEquals(request2.getOperatorName(), "operatorName"); assertEquals(request2.getPropertyName(), "propertyName"); assertEquals(request2.getPropertyValue(), "propertyValue");
assertEquals(i, result);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertTrue("Too few elements", json.length() > 1);
assertEquals(request.identifier, pubId, "Identifier"); assertEquals((long)request.baseSeconds << 32 | request.windowId, windowId, "Window");
assertEquals(1, JavaCCErrors.getWarningCount()); assertEquals(0, JavaCCErrors.getWarningCount()); assertEquals(1, JavaCCErrors.getWarningCount());
assertEquals(false, Options.getDebugLookahead()); assertEquals(false, Options.getDebugParser()); assertEquals(true, Options.getDebugLookahead()); assertEquals(true, Options.getDebugParser()); assertEquals(0, JavaCCErrors.getWarningCount()); assertEquals(0, JavaCCErrors.getErrorCount()); assertEquals(0, JavaCCErrors.getParseErrorCount()); assertEquals(0, JavaCCErrors.getSemanticErrorCount());
assertEquals( "schemaName", teraDataBulkLoaderRoutines.getTargetSchema( true ) );
assertEquals( expectedDdlOptionsPreview, teraDataBulkLoaderRoutines.getDdlOptions( true, password ).toString() );
assertEquals( expectedDataConnector, teraDataBulkLoaderRoutines.getDataConnector( true ).toString() );
assertTrue( commandLine.contains( expected ) );
assertTrue( script.contains( expectedFile ) );
assertTrue( commandLine.contains( expected ) );
assertTrue( script.contains( expectedFile ) );
assertEquals( "dbName", teraDataBulkLoaderRoutines.getTargetSchema( true ) );
assertEquals( "dbName", teraDataBulkLoaderRoutines.getTargetSchema( true ) );
assertEquals( expectedDdlOptionsPreview, teraDataBulkLoaderRoutines.getDdlOptions( false, password ).toString() );
assertEquals("Removing the default port failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals(1, domainRepo.count()); assertEquals("www.test.com", domainURL.getAddress()); assertEquals("test.com", domainURL.getName()); assertEquals(1000, domainURL.getCoolDownPeriod());
assertEquals(2, found.size()); assertTrue(urls.contains(iterator.next().getUrl())); assertTrue(urls.contains(iterator.next().getUrl()));
assertEquals(2, domainRepo.count()); assertEquals(4, urlRepo.count()); assertEquals(0, domainRepo.count()); assertEquals(0, urlRepo.count());
assertEquals(3, urlRepo.count()); assertEquals("site.com", crtActual.getDomain()); assertTrue(urlsFound.containsAll(urls));
assertEquals("Removing dot-segments failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals(4, urlRepo.count("{errorCount: 0}")); assertEquals(1, urlRepo.count("{errorCount: 2}")); assertEquals(1, urlRepo.count("{status: \'ERROR\'}"));
assertEquals(1000, urlRepo.count()); assertEquals(1, domainRepo.count());
assertEquals(4, urlRepo.count());
assertEquals(3, urlRepo.count("{status: \'new\'}")); assertEquals(2, urlRepo.count("{status: \'old\'}"));
assertEquals("Lower case conversion failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals("Adding \\"www\\" failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals("Limiting protocols failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals(4, urlRepo.count()); assertEquals(2, domainRepo.count());
assertEquals("Decode percent-encoded octets of unreserved characters failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals(2, found.size()); assertTrue(urls.contains(iterator.next().getUrl())); assertTrue(urls.contains(iterator.next().getUrl()));
assertEquals("Removing duplicate slashes failed", outLink, WebContentTools.normalizeURLLink(inLink));
assertEquals(2, domainRepo.count()); assertEquals(4, urlRepo.count()); assertEquals(1, domainRepo.count()); assertEquals(2, urlRepo.count());
assertEquals(2, domains.size()); assertTrue(urlsFound.containsAll(Arrays.asList("url1", "url2")));
assertEquals(MinSubArrayLen.minSubArrayLen(sum, array), expected);
assertEquals(LongestCommonSubsequence.longestCommonSequence(string1, string2), expectedLongestCommonSubsequenceLength );
assertEquals(ValidAnagram.isAnagram(s1, s2), expected);
assertEquals(new InsertInterval().insert(intervals, newInterval), expected);
assertEquals(new HugeNumber().hugeNumber(nums), expected);
assertEquals(LargestRectangleInHistogram.largestRectangleArea(histogram), expected);
assertEquals(new Matches().match(s, p), expected);
assertEquals(actual, expected);
assertEquals(actual, expected);
assertEquals(new ScrambleString().isScramble(str1, str2), isScarmbled, String.format("str1 = %s, str2 = %s", str1, str2));
assertEquals(new RotateSearch().search2(nums, target), expectedIndex);
assertEquals(new LongestPalindrome().lenOfLongest(string.toCharArray()), expectedLen);
assertEquals(new NumberOfIslands().numIslands(islands), expectedNumber);
assertEquals(new GenerateParenthesis().generateParenthesis(n), expected);
assertEquals(new PredictWinner().PredictTheWinner(nums), expectedResult);
assertEquals(new MineSweeper().minesweeper1(matrix), expected);
assertEquals(PrintPattern.getPattern(line), expected);
assertEquals(new SlidingWindow().minWindowOrdered(S, T), expected);
assertEquals(range.length, expected.length); assertEquals(range[i], expected[i], String.format("actual[%d] = %d, expected[%d] = %d", i, range[i], i, expected[i]));
assertEquals(new MinimumWindowSubstring().minWindow(s, t), expected);
assertEquals(SubsetSum.existSubset(sum, array), expected);
assertEquals(len, expectedLen);
assertEquals(new MergeIntervals().merge(intervals), expectedMerged);
assertEquals(array, expected);
assertEquals(Knapsack.mostValue(map, total), expected);
assertEquals(bi.extract().intValue(), 3); assertEquals(bi.extract().intValue(), 7); assertEquals(bi.extract().intValue(), 8);
assertEquals(new UglyNumber().nthSuperUglyNumber(n, primes), expected);
assertEquals(new MaxPointsOnLine().maxPoints(points), expectedMax);
assertEquals(SingleNumber.findInK(numbers, k), expected);
assertEquals(expected, s.retrieveMostFrequentlyUsedWords(literatureText, wordsToExclude));
assertEquals(traversal.postOrderTraverse(head), expectedResult);
assertEquals(maxProfit, new StockBuyAndSell().maxProfitI(stocks));
assertEquals(new NumSubarrayProductLessThanK().numSubarrayProductLessThanK(array, k), expectedNum);
assertEquals(step, new MarblesThreeBaskets().minStep(marbles));
assertEquals(new PathSum().pathSum(root, sum), expectedNum);
assertEquals(ReverseWords.reverseWords(s), r);
assertEquals(maxProfit, new StockBuyAndSell().maxProfitIII(stocks));
assertEquals(SlidingWindow.maxSlidingWindow(nums, k), maxWindows);
assertEquals(new WiggleSubsequence().wiggleMaxLength(wiggles), len);
assertEquals(AddOne.addOne(input), expected);
assertEquals(new ReverseInteger().reverse(number), expected);
assertEquals(new OneBit().isOneBitCharacter(array), oneBit);
assertEquals(new SpiralMatrix().spiralOrder(matrix), expectedSpiral);
assertEquals(actual, medWindows, String.format("actual = %s, expected = %s", DoubleStream.of(actual).mapToObj(String::valueOf).collect(joining(",", "[", "]")), DoubleStream.of(medWindows).mapToObj(String::valueOf).collect(joining(",", "[", "]")) ));
assertEquals(ClosestG.minSteps(matrix), expected);
assertTrue(wiggleSorted(nums));
assertEquals(new Isomorphic().isIsomorphic(string1, string2), isIsomorphic);
assertEquals(traversal.inOrderTraverse(head), expectedResult);
assertEquals(new NextGreaterElement().nextGreaterElementIII(value), next);
assertEquals(new RotateSearch().search1(nums, target), expectedIndex);
assertEquals(maxProfit, new StockBuyAndSell().maxProfitII(stocks));
assertEquals(actual, expected);
assertEquals(traversal.preOrderTraverse(head), expectedResult);
assertEquals(removed, new RemoveLetters().removeDuplicateLetters(original));
assertEquals(actual, expected, String.format("%s + %s", s1, s2));
assertEquals(actual, expected, String.format("%s - %s", s1, s2));
assertEquals(expected, minCut);
assertEquals(SortByOne.sort(array), afterSorted);
assertEquals(expected, s.reorderLines(logLines.size(), logLines));
assertTrue(String.format("%s is not wiggle sorted", IntStream.of(nums).mapToObj(String::valueOf). collect(joining(",", "[", "]"))), wiggleSortedN(nums));
assertEquals(MaximalSquare.maxSquare(matrix), expectedMaxSquare);
assertEquals(new ZSort().SortByZ(strings, z), zSorted);
assertEquals(matrix[i][j], afterRotated[i][j]);
assertEquals(new SpiralMatrix().generateMatrix(n), matrix);
assertEquals(LongestIncreasingSubsequence.longest(testArray), longestSubsequenceLength);
assertEquals(new PartitionToEqual().canPartitionKSubsets(array, k), canPartition);
assertEquals(new RemoveKDigits().removeKdigits(kDigits, k), removed);
assertEquals(Roman.intToRoman(decimal), roman); assertEquals(Roman.romanToInt(roman), decimal);
assertEquals(new BigIntMedian().median(testData), expectedMedian);
assertEquals(CoinChange.coinChange2(coins, amount), expectedWay);
assertEquals(new Zigzag().convert(original, row), expected);
assertEquals(actual.length, expected.length); assertEquals(actual[0].length, expected[0].length); assertEquals(String .format("actual[%d][%d] = %b, expected[%d][%d] = %b", i, j, actual[i][j], i, j, expected[i][j]), actual[i][j], expected[i][j]);
assertEquals(Fibonacci.fibonacci(pos), fibonacciValue);
assertEquals(WildcardMatching.isMatch(string, pattern), expected, String.format("s: %s, p: %s", string, pattern));
assertEquals(Consecutive.consecutive(num), expected);
assertEquals(expected, minCut);
assertEquals(new FindDuplicateSubtrees().findDuplicateSubtrees(root).size(), duplicates.size());
assertEquals(new MaxLenRepeatedSubarray().findLength(A, B), maxLenOfRepeatedArray);
assertEquals(simpleMessage, packet.getPayload());
assertNotNull(bytes);
assertThat(path).isEqualTo("core.framework.internal.reflect.MethodsTest.testMethod(String, Integer, Long)");
assertThat(response.header("Access-Control-Allow-Origin")).get().isEqualTo("localhost"); assertThat(response.header("Access-Control-Allow-Credentials")).get().isEqualTo("true");
assertThat(config.cacheName(TestCache.class)) .isEqualTo("testcache");
assertThat(builder.builder.sourceCode()).isEqualTo(ClasspathResources.text("db-test/insert-query-param-builder-assigned-id.java")); assertThat(query.sql).isEqualTo("INSERT INTO assigned_id_entity (id, string_field, int_field, big_decimal_field, date_field) VALUES (?, ?, ?, ?, ?)"); assertThat(query.generatedColumn).isNull();
assertThat(parsedBean).isNotPresent();
assertEquals("ERROR", marker.getName());
assertThat(token).isInstanceOf(FieldToken.class); assertEquals("field", fieldToken.name); assertNull(fieldToken.next);
assertThat(log.flushTraceLog()).isTrue();
assertThat(new IPv4RangePropertyValueParser("").parse()).isEmpty();
assertThat(limiter.ratePerNano(100, TimeUnit.MICROSECONDS)).isEqualTo(0.1); assertThat(limiter.ratePerNano(1, TimeUnit.SECONDS)).isEqualTo(0.000000001); assertThat(limiter.ratePerNano(100, TimeUnit.NANOSECONDS)).isEqualTo(100);
assertThat(Strings.format("{}, {}, {}", 1, 2, 3, 4)).isEqualTo("1, 2, 3"); assertThat(Strings.format("{}")).isEqualTo("{}"); assertThat(Strings.format("{}", (Object[]) null)).isEqualTo("{}");
assertThat(request.headers).containsEntry("kbn-xsrf", "true"); assertThat(new String(request.body, StandardCharsets.UTF_8)).doesNotContain("${NOTIFICATION_BANNER}");
assertThat(connection.broken).isTrue();
assertThat(propertyManager.property("sys.cache.host")).hasValue("overrideHost"); assertThat(propertyManager.property("sys.cache.host")).hasValue("host");
assertThat(config.managementPathPattern("/topic/:topic")).isEqualTo("/_sys/kafka/topic/:topic"); assertThat(config.managementPathPattern("/topic/:topic")).isEqualTo("/_sys/kafka/name/topic/:topic");
assertThat(log.stats.get("stat").intValue()).isEqualTo(1); assertThat(log.stats.get("stat").intValue()).isEqualTo(2);
assertThat(html).contains("ERROR").contains("error message").contains(actionId); assertThat(html).contains("NOT_FOUND").contains("not found").contains(actionId);
assertThat(parser.hostName("proxy", "original")).isEqualTo("original"); assertThat(parser.hostName("original", null)).isEqualTo("original");
assertThat(new IPv4RangePropertyValueParser("cidr1, cidr2").parse()).containsExactly("cidr1", "cidr2"); assertThat(new IPv4RangePropertyValueParser(" cidr1 ").parse()).containsExactly("cidr1"); assertThat(new IPv4RangePropertyValueParser("cidr1,cidr2 ").parse()).containsExactly("cidr1", "cidr2");
assertThat(cacheStore.<TestCache>get("key", null)).isNull();
assertEquals("$root.field", expression);
assertThat(builder.toString()).isEqualTo("message");
assertThat(job.keys(Map.of())).isEqualTo(0);
assertThat(MimeTypes.get("file")).isNull(); assertThat(contentType).isNotNull(); assertThat(contentType.mediaType).isEqualTo("image/x-icon");
assertThat(properties.containsKey("key")).isTrue();
assertThat(value).isEqualTo("value");
assertThat(event.context).isEqualTo(message.context); assertThat(event.info).containsEntry("param", "value");
assertThat(expression.eval(new TemplateContext(root, null))) .isEqualTo(root.stringField); assertThat(expression.eval(new TemplateContext(root, null))) .isEqualTo(root.mapListField.get("key"));
assertThat(response.contentType()).get().isEqualTo(ContentType.TEXT_PLAIN);
assertEquals(ClasspathResources.text("template-test/template-result.html").replaceAll("\\r\\n", "\\n"), result);
assertThat(new IPv4RangePropertyValueParser("name1: cidr1, cidr2; name2: cidr3,cidr4").parse()).containsExactly("cidr1", "cidr2", "cidr3", "cidr4"); assertThat(new IPv4RangePropertyValueParser("name1: cidr1; name2: cidr3; ").parse()).containsExactly("cidr1", "cidr3");
assertThat(context.room("room1")).isEmpty(); assertThat(context.room("room2")).isEmpty();
assertThat(PathParamHelper.toLong("100")).isEqualTo(100);
assertThat(usage).isEqualTo(0); assertThat(usage).isGreaterThan(0);
assertThat(builder.toString()).isEqualTo("client1"); assertThat(builder.toString()).isEqualTo("[client1, client2]");
assertEquals(3, map.size()); assertEquals(3, map.size()); assertFalse(map.containsKey("1")); assertTrue(map.containsKey("2")); assertTrue(map.containsKey("4")); assertEquals(3, map.size()); assertFalse(map.containsKey("2")); assertTrue(map.containsKey("4")); assertTrue(map.containsKey("5"));
assertThat(metrics.statName("size")).isEqualTo("pool_test_size");
assertEquals("/", path.value); assertEquals("path1", path.next.value); assertEquals("path2", path.next.next.value); assertNull(path.next.next.next);
assertThat(sourceCode).isEqualTo(ClasspathResources.text("webservice-test/test-webservice-controller-get.java")); assertThat(response.status()).isEqualTo(HTTPStatus.OK); assertThat(bean.orElseThrow().intField).isEqualTo(2);
assertThat(builder.toString()).isEqualTo("12345...(truncated)");
assertThat(item.resource.closed).isTrue();
assertThat(bytes).isNotEmpty();
assertThat(RedisEncodings.encode("value")).isEqualTo(Strings.bytes("value"));
assertThat(origins).containsExactly("origin1", "origin2", "origin3");
assertThat(systemModule.context.httpServer.httpPort).isEqualTo(8081);
assertThat(systemModule.site().security().interceptor.contentSecurityPolicy).isEqualTo("default-src \'self\';");
assertThat(localSessionStore.values).isEmpty();
assertThat(exception.severity()).isEqualTo(Severity.ERROR); assertThat(exception.errorCode()).isEqualTo("REMOTE_SERVICE_ERROR"); assertThat(exception.getMessage()).isEqualTo("failed to call remote service, statusCode=503"); assertThat(exception.status).isEqualTo(HTTPStatus.SERVICE_UNAVAILABLE);
assertThat(builder.toString()).isEqualTo("[]");
assertThat(parser.parse("10.0.0.1", ",108.0.0.1,10.0.0.1")).isEqualTo("108.0.0.1"); assertThat(parser.parse("10.0.0.1", "text , 108.0.0.1, 10.0.0.1")).isEqualTo("108.0.0.1");
assertThat(new BsonLogParam(Filters.eq("field", TestUnregisteredEnum.V1), MongoClientSettings.getDefaultCodecRegistry()).logValue()) .contains("V1"); assertThat(new BsonLogParam(null, MongoClientSettings.getDefaultCodecRegistry()).logValue()) .isEqualTo("null");
assertThat(WebServiceClient.parseHTTPStatus(200)).isEqualTo(HTTPStatus.OK);
assertFalse(entityCodec.documentHasId(new TestEntity())); assertTrue(entityCodec.documentHasId(entity));
assertThat(sql).isEqualTo("SELECT id, string_field, int_field, big_decimal_field, date_field FROM assigned_id_entity WHERE string_field = ? ORDER BY int_field ASC LIMIT ?,?");
assertThat(cookie.getName()).isEqualTo("test"); assertThat(cookie.getValue()).isEqualTo("1%3D2"); assertThat(cookie.getSameSiteMode()).isEqualTo("Lax");
assertThat(cacheStore.caches).isEmpty();
assertThat(decode(stream.toByteArray())).isEqualTo("*3\\r\\n");
assertEquals("12345\\r\\n", decode(output.toByteArray()));
assertThat(cacheStore.get("key", context)).isNull();
assertThat(producer).isNotNull();
assertThat(provider.getLoggerFactory()).isNotNull(); assertThat(provider.getMarkerFactory()).isNotNull(); assertThat(provider.getMDCAdapter()).isNotNull(); assertThat(provider.getRequesteApiVersion()).isEqualTo("1.8");
assertThat(exception.errorType).isEqualTo(UncheckedSQLException.ErrorType.CONNECTION_ERROR); assertThat(exception.errorType).isEqualTo(UncheckedSQLException.ErrorType.INTEGRITY_CONSTRAINT_VIOLATION);
assertThat(value).get().isSameAs(item); assertThat(cache.get("notExistedKey")).isEmpty();
assertThat(selectQuery.getSQL).isEqualTo("SELECT id, string_field, int_field, big_decimal_field, date_field FROM assigned_id_entity WHERE id = ?");
assertThat(request.requestURI()).isEqualTo("http: request = new HTTPRequest(HTTPMethod.POST, "http: request.params.put("q2", "v2");
assertThat(stats.stats) .containsEntry("pool_test_active_count", 1.0d) .containsEntry("pool_test_total_count", 2.0d);
assertThat(stat.usage(200L, 100L, 200L, 100L, 1)) .isEqualTo(1); assertThat(stat.usage(300L, 100L, 200L, 100L, 2)) .isEqualTo(0.25);
assertThat(log.errorMessage.length()).isEqualTo(ActionLog.MAX_CONTEXT_VALUE_LENGTH);
assertThat(decode(stream.toByteArray())).isEqualTo("$5\\r\\nvalue\\r\\n");
assertThat(IPv4Ranges.withinRanges(ranges, 0)).isFalse(); assertThat(IPv4Ranges.withinRanges(ranges, 2)).isTrue(); assertThat(IPv4Ranges.withinRanges(ranges, 3)).isTrue(); assertThat(IPv4Ranges.withinRanges(ranges, 4)).isFalse(); assertThat(IPv4Ranges.withinRanges(ranges, 9)).isFalse(); assertThat(IPv4Ranges.withinRanges(ranges, 22)).isTrue(); assertThat(IPv4Ranges.withinRanges(ranges, 31)).isFalse();
assertThat(values) .containsEntry("redis_version", "5.0.7") .containsEntry("config_file", "") .containsEntry("connected_clients", "1");
assertThat(session.changedFields).containsOnly("key"); assertThat(session.get("key")).get().isEqualTo("value"); assertThat(session.changedFields).containsOnly("key"); assertThat(session.get("key")).isNotPresent();
assertThat(request.method).isEqualTo(HTTPMethod.POST); assertThat(request.body()).hasValue(body); assertThat(actionLog.stats).containsKeys("http_content_length");
assertThat(stringValue).isInstanceOf(ValueToken.class); assertEquals("\\"text\\"", ((ValueToken) stringValue).value); assertThat(numberValue).isInstanceOf(ValueToken.class); assertEquals("12.00", ((ValueToken) numberValue).value);
assertThat(result).get().isEqualTo("string1");
assertThat(session.get("key")).isEmpty();
assertThat(service.alertKey(alert)).isEqualTo("website/action/WARN/NOT_FOUND");
assertNotNull(bytes);
assertEquals("public, max-age=600", controller.cacheHeader);
assertThat(parsedBean).usingRecursiveComparison().isEqualTo(bean);
assertThat(builder.toString()).isEqualTo("null");
assertThat(config.client()).isNotNull();
assertThat(Literal.variable(String.class)).isEqualTo("java.lang.String.class"); assertThat(Literal.variable(Types.list(String.class))).isEqualTo("core.framework.util.Types.list(java.lang.String.class)"); assertThat(Literal.variable(Types.optional(String.class))).isEqualTo("core.framework.util.Types.optional(java.lang.String.class)");
assertThat(listener.closeCode(new Error())) .isEqualTo(WebSocketCloseCodes.INTERNAL_ERROR); assertThat(listener.closeCode(new TooManyRequestsException("rate exceeds"))) .isEqualTo(WebSocketCloseCodes.TRY_AGAIN_LATER); assertThat(listener.closeCode(new BadRequestException("bad request"))) .isEqualTo(WebSocketCloseCodes.POLICY_VIOLATION);
assertThat(result).isNotPresent();
assertThat(job.check(pod, ZonedDateTime.now())) .contains(status.state.waiting.reason) .contains(status.state.waiting.message);
assertThat(handler.toServerMessage(message)).isEqualTo("{\\"message\\":\\"value\\"}");
assertThat(Strings.isBlank("")).isTrue(); assertThat(Strings.isBlank(" ")).isTrue(); assertThat(Strings.isBlank("1")).isFalse(); assertThat(Strings.isBlank(" 1")).isFalse();
assertThat(actionLog.action).isEqualTo("app:start"); assertThat(actionLog.stats).containsKeys("cpu", "max_memory");
assertThat(parser.httpMethod("POST")).isEqualTo(HTTPMethod.POST);
assertThat(actionLog.action).isEqualTo("task:action"); assertThat(actionLog.context).doesNotContainKey("root_action"); assertThat(scheduled).isTrue();
assertThat(app.collectCookies(null)).isNull(); assertThat(cookies).containsExactly("visitor_id");
assertThat(all).containsOnly(channel); assertThat(context.all()).isEmpty();
assertThat(Encodings.decodeBase64URLSafe(encodedMessage)).containsExactly(bytes);
assertThat(stats.stats).containsKeys("cpu_usage", "thread_count", "jvm_heap_used", "jvm_heap_max", "jvm_non_heap_used");
assertThat(results).hasSize(1); assertThat(results.get("key").stringField).isEqualTo("value");
assertThat(GCStat.collector("G1 Young Generation")).isEqualTo("young"); assertThat(GCStat.collector("G1 Old Generation")).isEqualTo("old"); assertThat(GCStat.collector("PS Scavenge")).isEqualTo("young"); assertThat(GCStat.collector("PS MarkSweep")).isEqualTo("old"); assertThat(GCStat.collector("Copy")).isNull();
assertThat(cookies).hasSize(0); assertThat(cookies).hasSize(1); assertThat(cookie.name).isEqualTo("visitor_id"); assertThat(cookie.value).isEqualTo("value");
assertThat(builder.toString()).isEqualTo("1"); assertThat(builder.toString()).isEqualTo("1-text");
assertThat(sourceCode).isEqualTo(ClasspathResources.text("webservice-test/test-webservice-controller-patch.java")); assertThat(response.status()).isEqualTo(HTTPStatus.NO_CONTENT);
assertThat(new ExecutorTask<Void>("actionId", "action", Instant.now(), null, null, () -> null).action()) .isEqualTo("task:action"); assertThat(new ExecutorTask<Void>("actionId", "action", Instant.now(), parentActionLog, null, () -> null).action()) .isEqualTo("parentAction:action"); assertThat(new ExecutorTask<Void>("actionId", "action", Instant.now(), parentActionLog, null, () -> null).action()) .isEqualTo("rootAction:action");
assertThat(stat.stats).isEqualTo(message.stats); assertThat(stat.info).isEqualTo(message.info);
assertThat(interceptor.shouldRetry(1, HTTPStatus.TOO_MANY_REQUESTS.code)).isTrue(); assertThat(interceptor.shouldRetry(3, HTTPStatus.TOO_MANY_REQUESTS.code)).isFalse();
assertThat(file.getFileName().toString()).endsWith(".tmp"); assertThat(Files.size(file)).isEqualTo(4); assertThat(Files.lastModified(file)).isNotNull(); assertThat(Files.text(file)).isEqualTo("test");
assertThat(bean.selfDependency).isSameAs(bean.selfDependency.dependency); assertThat(bean.dependency1).isSameAs(bean.dependency1.dependency.dependency); assertThat(bean.testEnum).isNotNull();
assertThat(parser.scheme("http", "https")).isEqualTo("https"); assertThat(parser.scheme("http", null)).isEqualTo("http");
assertEquals("/path1/path2/", path.subPath()); assertEquals("path1/path2/", path.next.subPath()); assertEquals("path2/", path.next.next.subPath()); assertEquals("/", path.next.next.next.subPath());
assertThat(response.contentType.toString()).isEqualTo(ContentType.TEXT_PLAIN.toString()); assertThat(response.text()).isEqualTo("value");
assertThat(systemModule.context.httpServer.httpPort).isNull(); assertThat(systemModule.context.httpServer.httpsPort).isNull();
assertThat(exception.severity()).isEqualTo(Severity.WARN);
assertThat(set).containsOnly(TestEnum.A);
assertThat(cacheStore.get("key", context)).isNull();
assertThat(propertyManager.property("sys.cache.host")).hasValue("overrideHost");
assertThat(result).isSameAs(value);
assertThat(cookies).containsEntry("name", "value");
assertThat(view.enumField).isEqualTo(TestEnum.V1); assertThat(view.stringField).isEqualTo("string1");
assertThat(values).isEmpty(); assertThat(values).hasSize(1).containsEntry("key1", value);
assertThat(propertyManager.maskValue("sys.jdbc.password", "password")).doesNotContain("password"); assertThat(propertyManager.maskValue("app.key.secret", "secret")).doesNotContain("secret"); assertThat(propertyManager.maskValue("sys.jdbc.user", "user")).isEqualTo("user"); assertThat(propertyManager.maskValue("SYS_JDBC_PASSWORD", "password")).doesNotContain("password");
assertThat(values).isNotNull();
assertThat(builder.toString()).isEqualTo("******");
assertThat(text).isEqualTo("value");
assertThat(stats.stats).containsEntry("kafka_producer_request_size_avg", 10.0);
assertThat(builder.toString()) .contains("k1=v1") .contains("k2=v2");
assertThat(channel.context().get("k1")).isEqualTo("v1"); assertThat(channel.context().get("k1")).isNull();
assertThat(PathParamHelper.toEnum("V1", TestEnum.class)).isEqualTo(TestEnum.VALUE);
assertThat(log.errorCode()).isNull(); assertThat(log.errorCode()).isEqualTo("UNASSIGNED");
assertThat(ElasticSearchHost.parse("es-0")) .containsExactly(new HttpHost("es-0", 9200)); assertThat(ElasticSearchHost.parse("es-0, es-1")) .containsExactly(new HttpHost("es-0", 9200), new HttpHost("es-1", 9200));
assertThat(job.check(pod, deleteTime.plusMinutes(1))).isNull(); assertThat(job.check(pod, deleteTime.plusMinutes(5))).startsWith("pod is still in deletion, elapsed=");
assertThat(bean.dateField).isEqualTo("2018-05-10"); assertThat(bean.dateTimeField).isEqualTo("2018-05-10T05:42:09.776"); assertThat(bean.zonedDateTimeField).isEqualTo("2018-05-10T05:42:09.776Z");
assertThat(Strings.truncate(null, 10)).isNull(); assertThat(Strings.truncate("value", 10)).isEqualTo("value"); assertThat(Strings.truncate("123456789012345", 10)).isEqualTo("1234567890");
assertThat(Classes.className(TestBean.class)).isEqualTo("ClassesTest$TestBean");
assertThat(new BeanValidatorBuilder(Bean.class).build()).isNull();
assertThat(response).isInstanceOf(AJAXErrorResponse.class) .usingRecursiveComparison().ignoringFields("stackTrace") .isEqualTo(expected);
assertEquals("/", path.value); assertEquals("path1", path.next.value); assertEquals("/", path.next.next.value); assertNull(path.next.next.next);
assertThat(predicate.resolve(headers)).isTrue();
assertThat(trigger.toString()).isEqualTo("weekly@WEDNESDAY/02:00");
assertNotNull(bytes);
assertThat(request.cookie(spec)).isNotPresent(); assertThat(request.cookie(spec)).get().isEqualTo("value");
assertThat(retrievedValue).isSameAs(value); assertThat(item.hits).isEqualTo(1); assertThat(item.hits).isEqualTo(2);
assertThat(localSessionStore.values).isEmpty();
assertThat(event.message()).isEqualTo("error"); assertThat(event.message()).isEqualTo("error-1");
assertThat(request.formParams).containsKeys("k1", "k2"); assertThat(request.files).containsKeys("file");
assertThat(builder.toString()).isEqualTo("key1=&key2=value2&key3=");
assertThat(Strings.equals(null, null)).isTrue(); assertThat(Strings.equals(null, "")).isFalse(); assertThat(Strings.equals("", null)).isFalse(); assertThat(Strings.equals("", "")).isTrue();
assertThat(exception.errorCode()).isEqualTo("CUSTOM_FORBIDDEN_ERROR_CODE"); assertThat(exception.severity()).isEqualTo(Severity.WARN); assertThat(new ForbiddenException("test", "FORBIDDEN").errorCode()).isEqualTo("FORBIDDEN");
assertThat(stats.errorCode).isNull(); assertThat(stats.errorCode).isEqualTo("HIGH_DISK_USAGE"); assertThat(stats.errorMessage).isEqualTo("disk usage is too high, usage=80%");
assertThat(exception.severity()).isEqualTo(Severity.ERROR); assertThat(exception.errorCode()).isEqualTo("REMOTE_SERVICE_ERROR"); assertThat(exception.getMessage()).startsWith("failed to deserialize remote service error response, statusCode=503"); assertThat(exception.status).isEqualTo(HTTPStatus.SERVICE_UNAVAILABLE);
assertThat(builder.toString()) .isEqualTo("[1, 2...(truncated)");
assertThat(response.headers).containsEntry(Headers.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());
assertThat(session).isNotNull(); assertThat(session.get("key")).isNotNull().hasValue("value"); assertThat(actionLog.context.get("session_hash")).isNotEmpty();
assertThat(predicate.resolve(headers)).isFalse();
assertThat(stats.stats) .containsEntry("es_docs", 49029079d) .containsKeys("es_disk_used", "es_disk_max", "es_heap_used", "es_heap_max", "es_gc_young_count", "es_gc_old_elapsed");
assertThat(interceptor.shouldRetry(1, "POST", new UnknownHostException("unknown.host: System error"))).isTrue();
assertThat(builder.builder.sourceCode()).isEqualTo(ClasspathResources.text("webservice-test/test-webservice-controller-create.java")); assertThat(response.status()).isEqualTo(HTTPStatus.CREATED);
assertThat(cidrs).hasSize(12).contains("104.44.236.208/30");
assertThat(propertyManager.envVarName("sys.kafka.uri")).isEqualTo("SYS_KAFKA_URI");
assertThat(accessControl.allow(IPv4Ranges.address("100.100.99.1"))).isTrue(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.101"))).isTrue(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.1"))).isFalse();
assertThat(IPv4Ranges.mergeRanges(ranges1)).containsExactly(1, 2, 3, 9, 10, 20); assertThat(IPv4Ranges.mergeRanges(ranges2)).containsExactly(1, 2, 3, 5, 10, 20, 30, 40);
assertThat(response.contentType()).get().isEqualTo(ContentType.TEXT_PLAIN);
assertThat(shutdownHook.shutdownTimeoutInMs(Map.of())).isEqualTo(Duration.ofSeconds(25).toMillis()); assertThat(shutdownHook.shutdownTimeoutInMs(Map.of("SHUTDOWN_TIMEOUT_IN_SEC", "60"))) .isEqualTo(Duration.ofSeconds(60).toMillis());
assertThat(ASCII.toUpperCase('-')).isEqualTo('-'); assertThat(ASCII.toUpperCase('a')).isEqualTo('A'); assertThat(ASCII.toUpperCase('z')).isEqualTo('Z'); assertThat(ASCII.toUpperCase('0')).isEqualTo('0'); assertThat(ASCII.toUpperCase('9')).isEqualTo('9'); assertThat(ASCII.toUpperCase('A')).isEqualTo('A'); assertThat(ASCII.toUpperCase('Z')).isEqualTo('Z');
assertThat(response).containsExactly(encode("1"), encode("2"), encode("3"));
assertThat(result).isNull();
assertThat(id1).hasSize(20).startsWith("0000000001"); assertThat(id2).hasSize(20).startsWith("0000000001"); assertThat(id1.substring(5, 8)).as("machine identifier should be same").isEqualTo(id2.substring(5, 8));
assertThat(bean.dependency1).isSameAs(dependency1); assertThat(bean.dependency2).isSameAs(dependency2);
assertThat(trace).hasSize(200 + suffix.length()) .contains("ActionLog - begin") .endsWith(suffix); assertThat(trace).endsWith("warning\\n"); assertThat(trace).contains("warning") .endsWith(suffix); assertThat(trace).endsWith("...(hard trace limit reached)");
assertThat(localSessionStore.values).hasSize(1);
assertThat(indexService.indexName("action", LocalDate.of(2016, Month.JANUARY, 15))).isEqualTo("action-2016.01.15"); assertThat(indexService.indexName("trace", LocalDate.of(2018, Month.AUGUST, 1))).isEqualTo("trace-2018.08.01");
assertThat(cacheStore.delete("key1", "key2")).isTrue(); assertThat(cacheStore.delete("key3")).isFalse();
assertThat(appender.filterLineSeparator("line1\\nline2")).isEqualTo("line1 line2"); assertThat(appender.filterLineSeparator("line1\\r\\nline2")).isEqualTo("line1 line2");
assertThat(builder.toString()) .isEqualTo("[[param1, 1, DB_V1], [param2, 2, DB_V2], [param3, 3, null]]");
assertThat(token).isInstanceOf(MethodToken.class); assertEquals("method", methodToken.name); assertTrue(methodToken.params.isEmpty()); assertNull(methodToken.next);
assertThat(store.getAndRefresh("sessionId", "localhost", Duration.ofMinutes(30))).isNull();
assertThat(views).hasSize(2); assertThat(views.get(0).enumField).isEqualTo(TestEnum.V1); assertThat(views.get(1).enumField).isEqualTo(TestEnum.V2);
assertThat(Strings.strip(null)).isNull(); assertThat(Strings.strip(" text ")).isEqualTo("text");
assertThat(builder.toString()) .isEqualTo("[String, 1, DB_V2, 2018-06-01]");
assertEquals("text", TextContentFragment.escapeHTML("text")); assertEquals("before&lt;p&gt;text&lt;&#47;p&gt;after", TextContentFragment.escapeHTML("before<p>text</p>after")); assertEquals("&lt;html&gt;&lt;&#47;html&gt;", TextContentFragment.escapeHTML("<html></html>"));
assertThat(builder.toString()).isEqualTo("00:34.145000000"); assertThat(builder.toString()).isEqualTo("05:00.034512300"); assertThat(builder.toString()).isEqualTo("30:01.000000123");
assertThat(sleepTime).isGreaterThanOrEqualTo(8).isLessThanOrEqualTo(12); assertThat(sleepTime).isGreaterThanOrEqualTo(80).isLessThanOrEqualTo(120); assertThat(sleepTime).isGreaterThanOrEqualTo(8000).isLessThanOrEqualTo(12000);
assertThat(builder.toString()).isEqualTo("message-1-{}"); assertThat(builder.toString()).isEqualTo("message-{}-{}");
assertThat(context.room("room1")).hasSize(1); assertThat(context.room("room1")).isEmpty();
assertThat(thread.header(headers, "header")).isEqualTo("value"); assertThat(thread.header(headers, "nonExisted")).isNull();
assertThat(localSessionStore.values).containsOnlyKeys("session3");
assertThat(exception.errorCode()).isEqualTo("UNAUTHORIZED");
assertThat(builder.toString()).isNotEqualTo("value"); assertThat(builder.toString()).isEqualTo("value");
assertThat(builder.toString()) .hasSize(10 + "...(truncated)".length()) .isEqualTo("[[param1, ...(truncated)");
assertThat(stats.result()).isEqualTo("OK"); assertThat(stats.result()).isEqualTo("WARN");
assertThat(builder.toString()).contains("SessionId=******").contains("key1=value1");
assertThat(builder.builder.sourceCode()).isEqualTo(ClasspathResources.text("db-test/insert-query-param-builder-auto-increment-id.java")); assertThat(query.sql).isEqualTo("INSERT INTO auto_increment_id_entity (string_field, double_field, enum_field, date_time_field, zoned_date_time_field) VALUES (?, ?, ?, ?, ?)"); assertThat(query.generatedColumn).isEqualTo("id");
assertThat(ASCII.toLowerCase(null)).isNull(); assertThat(ASCII.toLowerCase("text")).isEqualTo("text"); assertThat(ASCII.toLowerCase("tExt")).isEqualTo("text"); assertThat(ASCII.toLowerCase("TEXT")).isEqualTo("text"); assertThat(ASCII.toLowerCase("01239_-")).isEqualTo("01239_-");
assertThat(response.contentType()).get().isEqualTo(ContentType.TEXT_PLAIN);
assertThat(param.filter(value, Set.of()).toString()).isEqualTo(value);
assertThat(thread.longProcessThreshold(Duration.ofNanos(500).toNanos(), 1, 100)).isEqualTo(5); assertThat(thread.longProcessThreshold(Duration.ofNanos(500).toNanos(), 1, 1)).isEqualTo(500);
assertThat(controller.options(request).header("Access-Control-Allow-Methods")) .hasValueSatisfying(methods -> assertThat(methods).contains("POST"));
assertThat(shutdownHook.shutdownDelayInSec(Map.of())).isEqualTo(-1); assertThat(shutdownHook.shutdownDelayInSec(Map.of("SHUTDOWN_DELAY_IN_SEC", "10"))) .isEqualTo(10);
assertThat(cacheStore.caches).hasSize(1);
assertThat(builder.toString()) .isEqualTo("[V1]");
assertThat(parsedSendEventRequest).usingRecursiveComparison().isEqualTo(sendEventRequest);
assertThat(cacheStore.getAll(new String[]{"key"}, context)).isEmpty();
assertThat(builder.toString()) .isEqualTo("[1, 2, 3]");
assertThat(mapper.getEnum(null)).isNull(); assertThat(mapper.getEnum("DB_V1")).isEqualTo(TestEnum.V1); assertThat(mapper.getEnum("DB_V2")).isEqualTo(TestEnum.V2);
assertThat(exception.severity()).isEqualTo(Severity.ERROR); assertThat(exception.errorCode()).isEqualTo("REMOTE_SERVICE_ERROR"); assertThat(exception.getMessage()).isEqualTo("failed to call remote service, statusCode=410"); assertThat(exception.status).isEqualTo(HTTPStatus.GONE);
assertThat(actionLog.trace).isTrue(); assertThat(actionLog.context).containsKeys("trigger", "job", "job_class", "scheduled_time");
assertThat(request.attachments).hasSize(1) .has(new Condition<>(attachment -> "message".equals(attachment.text), "attachment.text should be message"), atIndex(0));
assertThat(controller.sendEventRequest(request)).isNull();
assertNotNull(mapper); assertEquals(ClasspathResources.text("db-test/row-mapper-auto-increment-id.java"), sourceCode);
assertThat(predicate.resolve(headers)).isFalse();
assertThat(request.queryParams()).containsOnly(entry("key", "value1 value2"), entry("emptyKey", ""));
assertThat(parsedBean).get().usingRecursiveComparison().isEqualTo(bean);
assertThat(exception.severity()).isEqualTo(Severity.WARN); assertThat(exception.errorCode()).isEqualTo(response.errorCode); assertThat(exception.getMessage()).isEqualTo(response.message); assertThat(exception.status).isEqualTo(HTTPStatus.NOT_FOUND);
assertThat(scheduler.next(previous -> previous.plusHours(1), ZonedDateTime.now())).isNotNull();
assertThat(stat.stats).isEqualTo(messages.get(0).stats);
assertThat(ASCII.toUpperCase(null)).isNull(); assertThat(ASCII.toUpperCase("text")).isEqualTo("TEXT"); assertThat(ASCII.toUpperCase("tExt")).isEqualTo("TEXT"); assertThat(ASCII.toUpperCase("TEXT")).isEqualTo("TEXT"); assertThat(ASCII.toUpperCase("01239_-")).isEqualTo("01239_-");
assertThat(record.headers().lastHeader(MessageHeaders.HEADER_TRACE).value()).isEqualTo(Strings.bytes("true"));
assertThat(builder.toString()).isEqualTo("key1=value1&key2=value2");
assertThat(bean.bigDecimalField).isEqualTo("1");
assertThat(interceptor.shouldRetry(1, HTTPStatus.OK.code)).isFalse(); assertThat(interceptor.shouldRetry(1, HTTPStatus.SERVICE_UNAVAILABLE.code)).isTrue(); assertThat(interceptor.shouldRetry(3, HTTPStatus.SERVICE_UNAVAILABLE.code)).isFalse();
assertThat(message.language("messages_en_US.properties")).isEqualTo("en_US"); assertThat(message.language("messages_en.properties")).isEqualTo("en"); assertThat(message.language("messages.properties")).isEqualTo(MessageImpl.DEFAULT_LANGUAGE);
assertThat(message.id).isNotNull(); assertThat(message.stats).containsOnly(entry("sys_load_avg", 1d));
assertThat(builder.toString()).contains("WARN logger - [ERROR_CODE] message-1"); assertThat(builder.toString()).contains("logger - message");
assertThat(log.context).containsEntry("key", List.of("value1", "value2"));
assertThat(moduleContext.propertyValidator.usedProperties).contains("app.key");
assertThat(response).isEqualTo(10);
assertThat(cacheStore.get("key", context)).isNull();
assertThat(parser.parse("127.0.0.1", null)).isEqualTo("127.0.0.1"); assertThat(parser.parse("127.0.0.1", "")).isEqualTo("127.0.0.1");
assertThat(task.trigger()).isEqualTo("daily@12:00[America/New_York]");
assertThat(tempDir).exists().isDirectory();
assertEquals("text", text.content);
assertThat(new String(Encodings.decodeBase64("bGVhc3VyZS4="), StandardCharsets.UTF_8)).isEqualTo("leasure.");
assertThat(response).usingRecursiveComparison().isEqualTo(expectedResponse);
assertThat(parser.port(80, null)).isEqualTo(80); assertThat(parser.port(80, "443")).isEqualTo(443); assertThat(parser.port(80, "443, 80")).isEqualTo(443);
assertEquals("$root.method()", expression);
assertThat(trigger.toString()).isEqualTo("hourly@2:30");
assertThat(builder.toString()) .isEqualTo("{k1=v...(truncated)");
assertThat(stats.stats) .containsEntry("cache_size", 0.0d);
assertThat(stringValue).isInstanceOf(ValueToken.class); assertEquals("\\"text\\"", ((ValueToken) stringValue).value);
assertEquals(1, document.nodes.size()); assertEquals("script", script.name); assertTrue(script.nodes.isEmpty());
assertEquals(new BsonObjectId(entity.id), entityCodec.getDocumentId(entity));
assertThat(response).isInstanceOf(ErrorResponse.class) .usingRecursiveComparison().ignoringFields("stackTrace") .isEqualTo(expected);
assertThat(connection.broken).isTrue();
assertThat(cacheStore.get("key", context).stringField).isEqualTo("value");
assertThat(values).isNull();
assertThat(builder.callTimeout()).isEqualTo(Duration.ofMillis(1000 + 2000 + 2000)); assertThat(builder.callTimeout()).isEqualTo(Duration.ofMillis(1000 + 2000 + 2000)); assertThat(builder.callTimeout()).isEqualTo(Duration.ofMillis(1000 + 2000 * 2 + 600 + 2000)); assertThat(builder.callTimeout()).isEqualTo(Duration.ofMillis(1000 + 2000 * 3 + 600 + 1200 + 2000));
assertThat(response.status()).isEqualTo(HTTPStatus.NO_CONTENT); assertThat(controller.executed).isTrue(); assertThat(((TestInterceptor) interceptor).executed).isFalse();
assertThat(listener.getMaxTextBufferSize()).isGreaterThan(0);
assertThat(params).containsExactly("value", 0, 100);
assertThat(message).contains("WARN logger - [ERROR_CODE] message-1");
assertEquals("kafka_consumer_log_lag_max", metrics.statName("lag_max")); assertEquals("kafka_consumer_lag_max", metrics.statName("lag_max"));
assertThat(bytes).isNotEmpty();
assertThat(config.context.serviceRegistry.serviceInterfaces).contains(TestWebService.class);
assertThat(actionLog.stats).containsEntry("consumer_delay", (double) Duration.ofSeconds(5).toNanos()); assertThat(actionLog.errorCode()).isEqualTo("LONG_CONSUMER_DELAY"); assertThat(actionLog.stats).containsEntry("consumer_delay", (double) Duration.ofSeconds(1).toNanos()); assertThat(actionLog.errorCode()).isNull();
assertThat(response).isInstanceOf(ErrorResponse.class) .usingRecursiveComparison().ignoringFields("stackTrace") .isEqualTo(expected);
assertThat(cookies).isEmpty();
assertThat(sourceCode).isEqualTo(ClasspathResources.text("webservice-test/test-webservice-controller-deprecated.java")); assertThat(response.status()).isEqualTo(HTTPStatus.OK); assertThat(bean).isEmpty();
assertThat(metrics.sum(List.of(metric1, metric1, metric2))).isEqualTo(2);
assertThat(cacheStore.delete("key")).isFalse();
assertThat(Strings.compare(null, "")).isEqualTo(-1); assertThat(Strings.compare("b", "a")).isEqualTo(1); assertThat(Strings.compare(null, null)).isZero();
assertThat(parser.requestPort("127.0.0.1", "https", null)).isEqualTo(443); assertThat(parser.requestPort("127.0.0.1:8080", "http", null)).isEqualTo(8080); assertThat(parser.requestPort("[::1]:8080", "http", null)).isEqualTo(8080);
assertThat(task.trigger()).isEqualTo("fixedRate@PT30S");
assertThat(cacheStore.caches).hasSize(2);
assertThat(QueryParamHelper.toString(LocalDate.of(2020, Month.JULY, 31))).isEqualTo("2020-07-31"); assertThat(QueryParamHelper.toString(ZonedDateTime.of(LocalDateTime.of(2020, Month.JULY, 31, 12, 0, 0), ZoneId.of("UTC")))).isEqualTo("2020-07-31T12:00:00Z");
assertThat(job.check(pod, startTime.plusMinutes(1))).isNull(); assertThat(job.check(pod, startTime.plusMinutes(5))).isEqualTo("pod is not in ready state, uptime=PT5M"); assertThat(job.check(pod, startTime.plusMinutes(1))).isNull(); assertThat(job.check(pod, startTime.plusMinutes(5))).isEqualTo("pod is not in ready state, uptime=PT5M");
assertThat(response).isNull();
assertThat(builder.toString()).isEqualTo("message12...(truncated)"); assertThat(builder.toString()).isEqualTo("message1234567890");
assertEquals("/", path.value); assertEquals("path1", path.next.value); assertEquals("path2", path.next.next.value); assertEquals("/", path.next.next.next.value); assertNull(path.next.next.next.next);
assertThat(trigger.next(date("2017-03-12T01:00:00"))).isEqualTo(date("2017-03-12T02:30:00")); assertThat(trigger.next(date("2017-03-12T02:30:00"))).isEqualTo(date("2017-03-13T02:30:00")); assertThat(trigger.next(date("2017-03-13T02:30:00"))).isEqualTo(date("2017-03-14T02:30:00"));
assertThat(actionLog.action).isEqualTo("parentAction:action"); assertThat(actionLog.trace).isTrue(); assertThat(actionLog.correlationIds).containsExactly("correlationId"); assertThat(future.get()).isEqualTo(true);
assertThat(predicate.resolve(headers)).isTrue();
assertThat(predicate.resolve(headers)).isFalse();
assertThat(QueryParamHelper.toString("")).as("empty string will be treated as null").isNull(); assertThat(QueryParamHelper.toString(" ")).isEqualTo(" "); assertThat(QueryParamHelper.toString("value")).isEqualTo("value");
assertThat(trigger.toString()).isEqualTo("monthly@5/01:00");
assertThat(constructedType).isEqualTo(builtInType) .hasSameHashCodeAs(builtInType); assertThat(builtInType).isEqualTo(constructedType) .hasSameHashCodeAs(constructedType);
assertThat(Duration.between(start, next)).isEqualTo(Duration.ofSeconds(30));
assertThat(builder.toString()).isEqualTo("{\\"field\\": \\"value\\"}");
assertThat(Hash.md5Hex("")).isEqualTo("d41d8cd98f00b204e9800998ecf8427e"); assertEquals("26b17225b626fb9238849fd60eabdf60", Hash.md5Hex("+")); assertEquals("202cb962ac59075b964b07152d234b70", Hash.md5Hex("123"));
assertThat(job.check(pod, ZonedDateTime.now())) .contains(status.state.waiting.reason) .contains(status.state.waiting.message);
assertThat(cacheStore.delete("key1", "key2")).isTrue(); assertThat(cacheStore.caches).isEmpty(); assertThat(cacheStore.delete("key1", "key2")).isFalse();
assertThat(ContentType.APPLICATION_JSON.toString()).isEqualTo("application/json; charset=utf-8"); assertThat(ContentType.APPLICATION_OCTET_STREAM.toString()).isEqualTo("application/octet-stream");
assertThat(thread.key(new ConsumerRecord<>("topic", 0, 0, null, null))) .isNull(); assertThat(thread.key(new ConsumerRecord<>("topic", 0, 0, Strings.bytes("key"), null))) .isEqualTo("key");
assertThat(new KafkaURI("localhost").resolveURI()).isTrue();
assertThat(logManager.errorCode(new TestException())).isEqualTo("TEST_ERROR"); assertThat(logManager.errorCode(new Exception())).isEqualTo("java.lang.Exception");
assertNotNull(entity.id);
assertThat(number).isGreaterThanOrEqualTo(8000).isLessThan(12000); assertThat(number).isGreaterThanOrEqualTo(0.8).isLessThan(1.2);
assertEquals("", decode(output.toByteArray()));
assertThat(ASCII.isLetter('0')).isFalse(); assertThat(ASCII.isLetter('9')).isFalse(); assertThat(ASCII.isLetter('@')).isFalse(); assertThat(ASCII.isLetter('a')).isTrue(); assertThat(ASCII.isLetter('z')).isTrue(); assertThat(ASCII.isLetter('A')).isTrue(); assertThat(ASCII.isLetter('Z')).isTrue();
assertThat(token).isInstanceOf(MethodToken.class); assertThat(methodToken.name).isEqualTo("method1"); assertThat(methodToken.params).isEmpty(); assertThat(methodToken.next).isInstanceOf(MethodToken.class); assertThat(methodToken2.name).isEqualTo("method2"); assertThat(methodToken2.params).isEmpty();
assertThat(session).isNotNull(); assertThat(session.get("key")).isNotNull().hasValue("value");
assertThat(Randoms.alphaNumeric(3).length()).isEqualTo(3); assertThat(Randoms.alphaNumeric(5).length()).isEqualTo(5); assertThat(Randoms.alphaNumeric(10).length()).isEqualTo(10);
assertThat(httpRequest.headers().get(HTTPHeaders.USER_AGENT)).isEqualTo("TestUserAgent"); assertThat(httpRequest.tag(HTTPRequest.class)).isSameAs(request);
assertEquals("line1\\rline2", message);
assertThat(beans).hasSize(2); assertThat(beans.get(0).stringField).isEqualTo("n1"); assertThat(beans.get(1).stringField).isEqualTo("n2");
assertThat(httpClient.mediaType(null)).isNull(); assertThat(httpClient.mediaType(ContentType.APPLICATION_JSON)) .isSameAs(httpClient.mediaType(ContentType.APPLICATION_JSON)); assertThat(httpClient.mediaType(ContentType.APPLICATION_FORM_URLENCODED).toString()) .isEqualTo(ContentType.APPLICATION_FORM_URLENCODED.mediaType);
assertThat(handler.handle(exchange)).isFalse(); assertThat(handler.activeRequests).hasValue(0);
assertThat(stats.result()).isEqualTo("WARN"); assertThat(stats.errorCode).isEqualTo("HIGH_MEM_USAGE"); assertThat(stats.stats) .containsEntry("redis_keys", 5d) .containsEntry("redis_mem_used", 800000d);
assertThat(actionLog.errorCode()).isNull(); assertThat(actionLog.errorCode()).isEqualTo("SLOW_SQL");
assertThat(redis.timeoutInMs).isEqualTo(timeout.toMillis());
assertThat(bean.defaultValueField).isEqualTo("defaultValue");
assertThat(stat.elapsed()).isEqualTo(Duration.ZERO.toNanos()); assertThat(stat.elapsed()).isEqualTo(Duration.ofMillis(500).toNanos()); assertThat(stat.elapsed()).isEqualTo(Duration.ofMillis(2000).toNanos());
assertThat(cacheStore.<TestCache>get("key", null)).isSameAs(value);
assertThat(trigger.next(date("2017-11-05T00:00:00"))).isEqualTo(date("2017-11-05T02:00:00")); assertThat(trigger.next(date("2017-11-05T02:00:00"))).isEqualTo(date("2017-11-06T02:00:00")); assertThat(trigger.next(date("2017-11-05T02:30:00"))).isEqualTo(date("2017-11-06T02:00:00"));
assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", Hash.sha1Hex("")); assertEquals("a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c", Hash.sha1Hex("+")); assertEquals("40bd001563085fc35165329ea1ff5c5ecbdbbeef", Hash.sha1Hex("123"));
assertThat(propertyManager.property("sys.cache.host")).isEmpty();
assertThat(BodyLogParam.of(Strings.bytes("{}"), ContentType.APPLICATION_JSON)) .isInstanceOf(BytesLogParam.class); assertThat(BodyLogParam.of(Strings.bytes("<xml/>"), ContentType.TEXT_XML)) .isInstanceOf(BytesLogParam.class); assertThat(BodyLogParam.of(Strings.bytes("value"), null)) .isEqualTo("byte[5]"); assertThat(BodyLogParam.of(new byte[10], ContentType.IMAGE_PNG)) .isEqualTo("byte[10]");
assertThat(log.flushTraceLog()).isFalse();
assertThat(alert.severity).isEqualTo(Severity.WARN); assertThat(alert.severity).isEqualTo(Severity.ERROR);
assertThat(record.key()).isNull(); assertThat(new String(record.headers().lastHeader(MessageHeaders.HEADER_CORRELATION_ID).value(), UTF_8)).isEqualTo("correlationId"); assertThat(new String(record.headers().lastHeader(MessageHeaders.HEADER_REF_ID).value(), UTF_8)).isEqualTo(actionLog.id);
assertThat(bean.intField).isEqualTo(1);
assertThat(bean.dateField).isEqualTo("2018-05-10"); assertThat(bean.dateTimeField).isEqualTo("2018-05-10T05:42:09.776"); assertThat(bean.zonedDateTimeField).isEqualTo("2018-05-10T05:42:09.776Z");
assertThat(response).isEqualTo("OK");
assertThat(connection.broken).isTrue();
assertThat(room).containsOnly(channel); assertThat(context.room("room1")).isEmpty();
assertThat(action.result).isEqualTo("TRACE");
assertThat(redis.slowOperationThresholdInNanos).isEqualTo(threshold.toNanos());
assertThat(session).isInstanceOf(ReadOnlySession.class); assertThat(session).isNull();
assertEquals("$root.field.method(1)", expression);
assertThat(stat.count()).isEqualTo(0); assertThat(stat.count()).isEqualTo(1); assertThat(stat.count()).isEqualTo(1);
assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(1); assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(0); assertThat(result).isFalse(); assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(0);
assertThat(handler.checkWebSocket(HTTPMethod.GET, headers)).isTrue(); assertThat(handler.checkWebSocket(HTTPMethod.PUT, headers)).isFalse();
assertThat(context).containsKeys("client_ip", "user_agent", "cookie");
assertThat(Literal.variable(HTTPMethod.POST)).isEqualTo("core.framework.http.HTTPMethod.POST");
assertThat(builder.toString()).isEqualTo("null");
assertThat(exception.severity()).isEqualTo(Severity.WARN);
assertThat(bean.longField).isEqualTo(1);
assertThat(systemModule.context.httpServer.httpPort).isNull(); assertThat(systemModule.context.httpServer.httpsPort).isEqualTo(8082);
assertThat(stats.stats).doesNotContainKeys("kafka_producer_request_size_avg");
assertThat(RedisEncodings.decode(Strings.bytes("value"))).isEqualTo("value");
assertThat(trace).contains("java.lang.Error: test-error");
assertThat(builder.toString()) .isEqualTo("{k1=v1,...(truncated)");
assertEquals("/", path.value); assertEquals("path1", path.next.value); assertNull(path.next.next);
assertThat(builder.toString()).isEqualTo("message-1-2");
assertThat(results).containsExactly(1, 1);
assertThat(listener.listenerThreadName(null, 0)).isEqualTo("kafka-listener-0"); assertThat(listener.listenerThreadName("name", 2)).isEqualTo("kafka-listener-name-2");
assertThat(fragment.isValidURL(httpsURL)).isTrue();
assertThat(ASCII.toLowerCase('-')).isEqualTo('-'); assertThat(ASCII.toLowerCase('a')).isEqualTo('a'); assertThat(ASCII.toLowerCase('z')).isEqualTo('z'); assertThat(ASCII.toLowerCase('0')).isEqualTo('0'); assertThat(ASCII.toLowerCase('9')).isEqualTo('9'); assertThat(ASCII.toLowerCase('A')).isEqualTo('a'); assertThat(ASCII.toLowerCase('Z')).isEqualTo('z');
assertThat(writer.contains(AJAXErrorResponse.class)).isTrue(); assertThat(writer.contains(ErrorResponse.class)).isTrue();
assertThat(accessControl.allow(IPv4Ranges.address("100.100.99.1"))).isFalse(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.101"))).isTrue(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.1"))).isFalse();
assertThat(accessControl.allow(IPv4Ranges.address("2001:0db8:85a3:0000:0000:8a2e:0370:0000"))).isTrue();
assertThat(new String(request.body, UTF_8)).isEqualTo(JSON.toJSON(requestBean)); assertThat(request.contentType).isEqualTo(ContentType.APPLICATION_JSON);
assertThat(Response.redirect("/path").status()).isEqualTo(HTTPStatus.SEE_OTHER);
assertThat(parser.parse("127.0.0.1", "108.0.0.1")).isEqualTo("108.0.0.1"); assertThat(parser.parse("127.0.0.1", " 108.0.0.1 ")).isEqualTo("108.0.0.1"); assertThat(parser.parse("127.0.0.1", "108.0.0.1, 10.10.10.10")).isEqualTo("108.0.0.1");
assertThat(job.check(pod, ZonedDateTime.now())).isEqualTo("pod restarted too many times, restart=5"); assertThat(job.check(pod, ZonedDateTime.now())).isNull();
assertThat(reader.fromJSON(void.class, null)).isNull();
assertThat(sourceCode).isEqualTo(ClasspathResources.text("webservice-test/test-webservice-controller-getEnum.java")); assertThat(response.status()).isEqualTo(HTTPStatus.OK); assertThat(bean).isNotNull();
assertThat(responseHandler.cookieKey(new CookieSpec("test"))) .isNotEqualTo(responseHandler.cookieKey(new CookieSpec("test").domain("example.com"))) .isNotEqualTo(responseHandler.cookieKey(new CookieSpec("test").path("/")));
assertThat(response.status()).isEqualTo(HTTPStatus.NO_CONTENT); assertThat(controller.executed).isTrue(); assertThat(((TestInterceptor) interceptor).executed).isTrue();
assertThat(producer).isNotNull();
assertThat(request.params).contains(entry("int_field", "23"));
assertThat(request.body()).hasValue(body);
assertThat(Literal.variable("\\n")).isEqualTo("\\"\\\\n\\""); assertThat(Literal.variable("\\r")).isEqualTo("\\"\\\\r\\""); assertThat(Literal.variable("\\\\")).isEqualTo("\\"\\\\\\\\\\""); assertThat(Literal.variable("\\"")).isEqualTo("\\"\\\\\\"\\"");
assertThat(indexService.template("index/action-index-template.json")) .contains("\\"number_of_shards\\": \\"3\\"") .contains("\\"refresh_interval\\": \\"3s\\"");
assertThat(session.changedFields).isEmpty(); assertThat(session.changedFields).isEmpty();
assertEquals("item", expression);
assertThat(new KafkaURI("kafka-0.kafka").bootstrapURIs) .containsExactly("kafka-0.kafka:9092"); assertThat(new KafkaURI("kafka-0.kafka:9092").bootstrapURIs) .containsExactly("kafka-0.kafka:9092"); assertThat(new KafkaURI("kafka-0.kafka, kafka-1.kafka:9092").bootstrapURIs) .containsExactly("kafka-0.kafka:9092", "kafka-1.kafka:9092");
assertThat(response.contentType()).get().isEqualTo(ContentType.TEXT_PLAIN);
assertThat(service.color(Severity.WARN, date)).isEqualTo("#ff5c33"); assertThat(service.color(Severity.WARN, date.plusWeeks(1))).isEqualTo("#ff9933"); assertThat(service.color(Severity.ERROR, date)).isEqualTo("#a30101"); assertThat(service.color(Severity.ERROR, date.plusWeeks(1))).isEqualTo("#e62a00");
assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.100"))).isFalse();
assertThat(values).isNull();
assertThat(Encodings.hex(new byte[]{0, 1, 0xf})).isEqualTo("00010F"); assertThat(Encodings.hex(new byte[]{-128, -1, 127})).isEqualTo("80FF7F"); assertThat(Encodings.hex(new byte[0])).isEqualTo("");
assertThat(actionLog.action).isEqualTo("app:stop"); assertThat(actionLog.context).containsKey("start_time"); assertThat(actionLog.stats).containsKey("uptime");
assertThat(decode(response)).isEmpty();
assertThat(parser.extractIP("2001:db8:cafe::17")).isEqualTo("2001:db8:cafe::17"); assertThat(parser.extractIP("192.0.2.43:47011")).isEqualTo("192.0.2.43"); assertThat(parser.extractIP("192.0.2.43")).isEqualTo("192.0.2.43");
assertThat(new String(bytes, StandardCharsets.UTF_8)).isEqualTo("null");
assertThat(ASCII.isDigit('0')).isTrue(); assertThat(ASCII.isDigit('9')).isTrue(); assertThat(ASCII.isDigit('!')).isFalse(); assertThat(ASCII.isDigit('a')).isFalse(); assertThat(ASCII.isDigit('z')).isFalse(); assertThat(ASCII.isDigit('A')).isFalse(); assertThat(ASCII.isDigit('Z')).isFalse();
assertThat(actionLog.action).isEqualTo("task:action"); assertThat(actionLog.context).doesNotContainKey("root_action"); assertThat(actionLog.trace).isFalse(); assertThat(future.get()).isNull();
assertThat(executor).isNotNull();
assertThat(stats.stats).containsKeys("kafka_consumer_records_max_lag", "kafka_consumer_records_consumed_rate", "kafka_consumer_bytes_consumed_rate", "kafka_consumer_fetch_rate");
assertThat(listener.createConsumer()).isNotNull();
assertThat(builder.toString()) .isEqualTo("null");
assertThat(Encodings.base64("")).isEqualTo(""); assertThat(Encodings.base64("leasure.")).isEqualTo("bGVhc3VyZS4=");
assertThat(number).isGreaterThanOrEqualTo(0).isLessThan(10); assertThat(number).isGreaterThanOrEqualTo(5).isLessThan(1000);
assertThat(jmxClient.check(connector)).isTrue();
assertThat(actionLog.trace).isTrue(); assertThat(actionLog.clients).containsExactly("client");
assertThat(path.value).isEqualTo("/"); assertThat(path.next).isNull();
assertThat(LogManager.appName(Map.of("CORE_APP_NAME", "test"))).isEqualTo("test"); assertThat(LogManager.appName(Map.of())).isEqualTo("local"); assertThat(LogManager.appName(Map.of())).isEqualTo("test");
assertThat(views).isEmpty();
assertThat(log.result()).isEqualTo("OK"); assertThat(log.result()).isEqualTo("WARN");
assertThat(trigger.toString()).isEqualTo("daily@02:30");
assertThat(executor.scheduler).isNotNull();
assertThat(store.sessionKey("someSessionId", "domain")) .doesNotContain("someSessionId") .doesNotContain("domain") .startsWith("session:");
assertThat(accessControl.allow(IPv4Ranges.address("100.100.99.1"))).isTrue(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.101"))).isFalse(); assertThat(accessControl.allow(IPv4Ranges.address("100.100.100.1"))).isTrue();
assertThat(handler.httpStatus(new RemoteServiceException("error", Severity.WARN, "error_code", HTTPStatus.BAD_REQUEST))) .isEqualTo(HTTPStatus.BAD_REQUEST); assertThat(handler.httpStatus(new NotFoundException("error"))).isEqualTo(HTTPStatus.NOT_FOUND); assertThat(handler.httpStatus(new Error())).isEqualTo(HTTPStatus.INTERNAL_SERVER_ERROR);
assertThat(controller.properties()) .contains("sys.jdbc.password=******") .contains("sys.jdbc.user=user");
assertThat(bean.defaultValueField).isEqualTo("defaultValue");
assertEquals("\\"text\\"", expression);
assertThat(new RedisHost("redis-1").toString()).isEqualTo("redis-1"); assertThat(new RedisHost("redis-2:6379").toString()).isEqualTo("redis-2"); assertThat(new RedisHost("redis-3:1999").toString()).isEqualTo("redis-3:1999");
assertThat(PathParamHelper.toInt("100")).isEqualTo(100);
assertThat(event.context).isEqualTo(messages.get(0).context);
assertThat(builder.build()).isEqualTo("item1, item2");
assertThat(pool.size.get()).isEqualTo(2); assertThat(pool.idleItems.size()).isEqualTo(2);
assertThat(config.context.serviceRegistry.beanClasses).contains(TestBean.class); assertThat(config.context.serviceRegistry.beanClasses).contains(TestQueryParamBean.class); assertThat(config.context.serviceRegistry.beanClasses).contains(TestEnum.class);
assertThat(call.isCanceled()).isFalse(); assertThat(call.isCanceled()).isTrue(); assertThat(latch.await(10, SECONDS)).isTrue();
assertThat(t).isInstanceOf(IOException.class); assertThat(call.isCanceled()).isTrue(); assertThat(failureLatch.await(10, SECONDS)).isTrue();
assertThat(callLatch.await(10, SECONDS)).isTrue(); assertThat(clone).isNotSameAs(call); assertThat(clone.isExecuted()).isFalse(); assertThat(cloneLatch.await(10, SECONDS)).isTrue();
assertThat(responseLatch.await(10, SECONDS)).isTrue(); assertThat(callbackExecutorRuns.get()).isEqualTo(1);
assertThat(call.request()).isNotNull();
assertThat(latch.await(10, SECONDS)).isTrue(); assertThat(response.isSuccessful()).isTrue(); assertThat(response.body()).isEqualTo("Hi");
assertThat(t).isInstanceOf(IOException.class); assertThat(call.isCanceled()).isTrue(); assertThat(failureLatch.await(10, SECONDS)).isTrue();
assertThat(t).isInstanceOf(IOException.class); assertThat(call.isCanceled()).isTrue(); assertThat(failureLatch.await(10, SECONDS)).isTrue();
assertThat(call.isCanceled()).isFalse(); assertThat(call.isCanceled()).isTrue(); assertThat(latch.await(10, SECONDS)).isTrue();
assertThat(responseLatch.await(10, SECONDS)).isTrue(); assertThat(responseCallRef.get()).isSameAs(call);
assertThat(serviceMethodException.getCause()).hasMessageThat().isEqualTo( "RetryableCall return type must be parameterized " + "as RetryableCall<Foo> or RetryableCall<? extends Foo>");
assertThat(runtimeException).hasMessageThat().isEqualTo("Broken!"); assertThat(call.isCanceled()).isTrue(); assertThat(failureLatch.await(10, SECONDS)).isTrue();
assertThat(call.isExecuted()).isFalse(); assertThat(call.isExecuted()).isTrue(); assertThat(latch.await(10, SECONDS)).isTrue();
assertThat(failureCanRetryLatch.await(10, SECONDS)).isTrue(); assertThat(failureCanRetryCount.get()).isEqualTo(1); assertThat(responseCount.get()).isEqualTo(0); assertThat(responseTwiceLatch.await(10, SECONDS)).isFalse(); assertThat(failureCanRetryCount.get()).isEqualTo(1); assertThat(responseCount.get()).isEqualTo(0);
assertTrue(actualResponse.get().getDone());
assertEquals("Split start: \'abc d\', end: \'def g\', size: 10.", sourceWithKeys.toString()); assertEquals( "Split start: \'\\\\x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\', end: \'hello\', size: 10.", sourceWithKeys.toString());
assertNull(scanner.next());
assertEquals(Arrays.asList(FlatRowConverter.convertToModelRow(flatRow)), actualResult);
assertArrayEquals(listWithMultipleElmt.toArray(TEST_ARRAY), actualArr);
assertFalse(instance.isFilterSupported(context, whileMatchFilter).isSupported());
assertArrayEquals( FLAT_ROW_ADAPTER.adaptResponse(SAMPLE_FLAT_ROW).rawCells(), result.rawCells()); assertEquals(readException, throwable);
assertEquals( Table.fromProto(createTableData()), adminClientWrapper.getTableAsync(TABLE_ID).get());
assertArrayEquals(FLAT_ROW.getRowKey().toByteArray(), result.getRow()); assertArrayEquals(FLAT_ROW_ADAPTER.adaptResponse(FLAT_ROW).rawCells(), result.rawCells());
assertEquals(response, actualResponse.get());
assertEquals(expected, Sets.newHashSet(Iterables.filter(allCells, predicate)));
assertEquals(Arrays.asList(TEST_TABLE_ID_1, TEST_TABLE_ID_2, TEST_TABLE_ID_3), tableIds.get());
assertTrue(dataClientWrapper.createBulkRead(TABLE_ID) instanceof BulkReadClassicApi);
assertTrue(actual.get());
assertTrue(actualResponse.get().getDone());
assertEquals(flatRows, actualFlatRows.get());
assertEquals(1, connection.getAllRegionInfos(TABLE_NAME).size()); assertEquals(regionInfo, connection.getAllRegionInfos(TABLE_NAME).get(0)); assertEquals(expectedRegionLocations, regionLocator.getAllRegionLocations());
assertNull(scanner.next());
assertFalse(resultFuture1_1.isDone()); assertTrue(resultFuture1_1.isDone()); assertTrue(resultFuture1_2.isDone()); assertTrue(secBatchResult1.isDone()); assertTrue(secBatchResult2.isDone()); assertEquals(2, fakeDataService.getReadRowsBatchCount());
assertEquals(Table.fromProto(createTableData()), response);
assertEquals( Table.fromProto(createTableData()), adminClientWrapper.createTableAsync(request).get());
assertTrue("incorrect version format", versionMatcher.matches()); assertTrue("Expected BigtableHBaseVersion.getVersion() to be at least 1.14.1", result <= 0);
assertEquals(FilterSupportStatus.SUPPORTED, instance.isFilterSupported(context, filter));
assertEquals("test-key", rowKeyWrapper.getKey().toStringUtf8());
assertEquals(TEST_VALUE, closedScanner.next());
assertEquals(TEST_PROJECT_ID, adminSettings.getProjectId()); assertEquals(TEST_INSTANCE_ID, adminSettings.getInstanceId()); assertEquals(adminHost + ":" + TEST_PORT, adminSettings.getStubSettings().getEndpoint()); assertTrue(headers.get(GrpcUtil.USER_AGENT_KEY.name()).contains(userAgent)); assertEquals( credentials, adminSettings.getStubSettings().getCredentialsProvider().getCredentials());
assertEquals(tableId, NameUtil.extractTableIdFromTableName(rangeRequest.getName()));
assertEquals(Table.fromProto(createTableData()), response.get());
assertEquals(TABLE_ID_1, response.get().getId());
assertEquals("row key cannot be null", expected.getMessage());
assertTrue("future should be complete", asyncFuture.isDone()); assertTrue("Should complete with exception", asyncFuture.isCompletedExceptionally());
assertEquals(Table.fromProto(createTableData()), response);
assertEquals(tableIdList, adminClientWrapper.listTablesAsync().get());
assertEquals(tableIdList, actualResponse.get());
assertNull(actualResult.getRow()); assertEquals(0, actualResult.rawCells().length);
assertThat(abstractTableToStr, containsString("project=" + PROJECT_ID)); assertThat(abstractTableToStr, containsString("instance=" + INSTANCE_ID)); assertThat(abstractTableToStr, containsString("dataHost=" + HOST_NAME)); assertThat(abstractTableToStr, containsString("tableAdminHost=" + HOST_NAME));
assertTrue(dataGCJClient.checkAndMutateRowAsync(checkAndMutate).get());
assertEquals(cells.get(0), Iterables.getOnlyElement(Iterables.filter(cells, predicate))); assertTrue(Iterables.isEmpty(Iterables.filter(cells, predicate)));
assertTrue( dataSettings.getStubSettings().bulkMutateRowsSettings().getRetryableCodes().isEmpty()); assertTrue(dataSettings.getStubSettings().readRowSettings().getRetryableCodes().isEmpty()); assertTrue(dataSettings.getStubSettings().readRowsSettings().getRetryableCodes().isEmpty()); assertTrue( dataSettings.getStubSettings().sampleRowKeysSettings().getRetryableCodes().isEmpty());
assertFalse(instance.isFilterSupported(context, filter).isSupported());
assertEquals(Arrays.asList(TEST_TABLE_ID_1, TEST_TABLE_ID_2, TEST_TABLE_ID_3), tableIds);
assertEquals(TABLE_ID_1, response.get().getId());
assertEquals(response, actualResponse.get());
assertEquals(TABLE_ID, response.getId());
assertEquals(PROJECT, config.get(BigtableOptionsFactory.PROJECT_ID_KEY)); assertEquals(INSTANCE, config.get(BigtableOptionsFactory.INSTANCE_ID_KEY)); assertEquals(TABLE, underTest.getTableId());
assertEquals(FlatRowConverter.convertToModelRow(row), actualResult.next());
assertEquals(expected, out);
assertNull(instance.adaptResponse(null).rawCells());
assertEquals(FULL_TABLE_NAME, request.getTableName()); assertEquals("", Bytes.toString(regionInfoList.get(0).getStartKey())); assertEquals("rowKey", Bytes.toString(regionInfoList.get(0).getEndKey()));
assertTrue(CellComparator.equals(inputKeyValue, outputCell));
assertEquals("testSnapshotName", receivedReq.getName());
assertArrayEquals( FLAT_ROW_ADAPTER.adaptResponse(SAMPLE_FLAT_ROW).rawCells(), actualResult.next().rawCells()); assertEquals(2, actualResult.next(5).length);
assertEquals(expectedFilter.toProto(), actualFilter.toProto());
assertEquals(TABLE_ID, response.get().getId());
assertEquals(expectedRow, actualRow);
assertEquals("first-family", columnFamilies.get(0).getId()); assertEquals("another-family", columnFamilies.get(1).getId());
assertTrue(underTest.hasInflightOperations()); assertFalse(underTest.hasInflightOperations());
assertEquals(TEST_VALUE, scanner.next()); assertNull(scanner.next());
assertEquals(TABLE_ID_1, NameUtil.extractTableIdFromTableName(rangeRequest.getName())); assertEquals(rowKey, rangeRequest.getRowKeyPrefix());
assertEquals(expectedResult.size(), actualResult.size());
assertEquals(expectedKeyOff, keyOffSets);
assertEquals(1, scanner.available()); assertEquals(0, scanner.available());
assertEquals(keyOffsetList.get(0).getKey(), ROW_KEY_1); assertEquals(keyOffsetList.get(1).getKey(), ROW_KEY_2); assertEquals(keyOffsetList.get(2).getKey(), ROW_KEY_3);
assertTrue(bigtableApi.getAdminClient() instanceof AdminClientVeneerApi); assertEquals(TABLE_ID, extractTableIdFromTableName(deleteTableRequest.getName()));
assertEquals(expected, Sets.newHashSet(Iterables.filter(allCells, predicate)));
assertEquals(modelRow, actualRow);
assertEquals(TABLE_ID, NameUtil.extractTableIdFromTableName(rangeRequest.getName())); assertEquals(rowKey, rangeRequest.getRowKeyPrefix().toStringUtf8());
assertEquals(keyOffsetList.get(0).getKey(), ROW_KEY_1); assertEquals(keyOffsetList.get(1).getKey(), ROW_KEY_2); assertEquals(keyOffsetList.get(2).getKey(), ROW_KEY_3);
assertTrue(matchesRow(response).matches(results[0]));
assertFalse("Should be in progress", completableFuture.isDone()); assertNotNull("TimeoutException is expected", t); assertEquals(result, completableFuture.get());
assertEquals(2, actual.size());
assertEquals("first-family", columnFamilies.get(0).getId());
assertEquals(flatRows.get(0), results.next()); assertEquals(flatRows.get(1), results.next());
assertEquals(rows.get(0), results.next()); assertEquals(rows.get(1), results.next());
assertEquals( defaultDataSettings.getStubSettings().readRowsSettings().getRetryableCodes(), dataSettings.getStubSettings().readRowsSettings().getRetryableCodes());
assertEquals(expectedKeyOff, keyOffSets);
assertTrue( dataSettings.getStubSettings().getCredentialsProvider() instanceof NoCredentialsProvider);
assertEquals(modelRow, output.get());
assertFalse(actual);
assertTrue(matchesRow(Result.EMPTY_RESULT).matches(results[0])); assertTrue( "Expected " + Bytes.toString(gets.get(i).getRow()) + " but was " + Bytes.toString(results[i].getRow()), Bytes.equals(results[i].getRow(), gets.get(i).getRow()));
assertNull(scanner.next());
assertEquals(keyOffsets, dataClientWrapper.sampleRowKeysAsync(TABLE_ID).get());
assertTrue(settings.getStubSettings().readRowsSettings().getRetryableCodes().isEmpty());
assertEquals("firstSnapshotName", actualResponse.get().getSnapshots(0).getName()); assertEquals("secondSnapshotName", actualResponse.get().getSnapshots(1).getName());
assertEquals(Table.fromProto(createTableData()), response.get());
assertNull(instance.adaptResponse(null).rawCells());
assertEquals(emulatorHost, adminSettings.getStubSettings().getEndpoint()); assertTrue(credProvider instanceof NoCredentialsProvider);
assertEquals(1, response.getColumnFamilies().size());
assertEquals(0, result.rawCells().length); assertNull(transformToFlatRow(result));
assertTrue(actual);
assertEquals("testSnapshotName", actualResponse.get().getName());
assertEquals(expectedRow, actualRow);
assertTrue(bigtableApi.getDataClient() instanceof DataClientClassicApi); assertEquals(ROW_KEY, request.getRows().getRowKeys(0).toStringUtf8());
assertArrayEquals(expectedResult.rawCells(), scanner.next().rawCells());
assertEquals(Table.fromProto(createTableData()), response.get());
assertEquals(RetryOptions.DEFAULT_ENABLE_GRPC_RETRIES, retryOptions.enableRetries()); assertEquals( RetryOptions.DEFAULT_MAX_ELAPSED_BACKOFF_MILLIS, retryOptions.getMaxElapsedBackoffMillis()); assertEquals( RetryOptions.DEFAULT_READ_PARTIAL_ROW_TIMEOUT_MS, retryOptions.getReadPartialRowTimeoutMillis()); assertEquals( RetryOptions.DEFAULT_MAX_SCAN_TIMEOUT_RETRIES, retryOptions.getMaxScanTimeoutRetries());
assertEquals( "deleteAsyncTableID", NameUtil.extractTableIdFromTableName(deleteTableReq.getName()));
assertFalse(actual.get());
assertFalse(result.isDone()); assertTrue(result.isDone());
assertTrue("first result is a result", results[0] instanceof Result); assertTrue(matchesRow(expected).matches(results[0]));
assertEquals(TABLE_ID_1, response.get().getId());
assertEquals("b", Bytes.toString(regionLocationFuture.getRegion().getStartKey())); assertEquals("y", Bytes.toString(regionLocationFuture.getRegion().getEndKey())); assertEquals(TABLE_NAME, regionLocator.getName());
assertEquals(PROJECT, config.get(BigtableOptionsFactory.PROJECT_ID_KEY)); assertEquals(INSTANCE, config.get(BigtableOptionsFactory.INSTANCE_ID_KEY));
assertEquals( "deleteAsyncTableID", NameUtil.extractTableIdFromTableName(deleteTableReq.getName()));
assertEquals("deleteTableID", NameUtil.extractTableIdFromTableName(deleteTableReq.getName()));
assertEquals(0, scanner.next().size());
assertTrue( adminSettings.getStubSettings().getCredentialsProvider() instanceof NoCredentialsProvider);
assertTrue(bigtableApi.getAdminClient() instanceof AdminClientClassicApi); assertEquals(TABLE_ID, extractTableIdFromTableName(deleteTableRequest.getName()));
assertEquals(5, fakeDataService.getReadRowsBatchCount());
assertTrue(instance.isFilterSupported(context, whileMatchFilter).isSupported());
assertTrue(actual.get());
assertEquals(rowKey, request.getRowKey().toStringUtf8()); assertEquals(value, request.getMutations(0).getSetCell().getValue().toStringUtf8());
assertFalse(actual.get());
assertNull(noRowsResultScanner.next());
assertEquals("can\'t mutate when the bulk mutation is closed.", actualEx.getMessage());
assertEquals(tableId, NameUtil.extractTableIdFromTableName(rangeRequest.getName()));
assertFalse(retryOptions.enableRetries()); assertFalse(retryOptions.retryOnDeadlineExceeded()); assertEquals(111, retryOptions.getMaxElapsedBackoffMillis()); assertEquals(123, retryOptions.getReadPartialRowTimeoutMillis());
assertEquals(Arrays.asList(TABLE_ID_1, TABLE_ID_2), tableIds.get());
assertTrue(result1.isDone()); assertTrue(result2.isDone());
assertEquals(flatRows, actualFlatRows);
assertTrue(bigtableApi.getDataClient() instanceof DataClientVeneerApi); assertEquals(ROW_KEY, request.getRows().getRowKeys(0).toStringUtf8());
assertEquals(response, actualResponse.get());
assertArrayEquals(FLAT_ROW.getRowKey().toByteArray(), result.getRow()); assertArrayEquals(FLAT_ROW_ADAPTER.adaptResponse(FLAT_ROW).rawCells(), result.rawCells());
assertFalse(result.isDone()); assertTrue(result.isDone());
assertEquals(expectedRows, actualRows.get());
assertEquals( Sets.newHashSet(cells.get(0), cells.get(1)), Sets.newHashSet(Iterables.filter(cells, predicate))); assertTrue(Iterables.isEmpty(Iterables.filter(cells, predicate)));
assertEquals(Table.fromProto(createTableData()), response);
assertTrue(underTest.hasInflightOperations()); assertFalse(underTest.hasInflightOperations());
assertTrue(result1.isDone()); assertTrue(result2.isDone());
assertEquals(0, result.rawCells().length);
assertEquals(emulatorHost, dataSettings.getStubSettings().getEndpoint()); assertTrue(credProvider instanceof NoCredentialsProvider);
assertFalse( dataSettings .getStubSettings() .bulkMutateRowsSettings() .getBatchingSettings() .getIsEnabled());
assertEquals(listFlatRows.size(), actualResult.size()); assertArrayEquals( FLAT_ROW_ADAPTER.adaptResponse(SAMPLE_FLAT_ROW).rawCells(), actualResult.get(0).rawCells()); assertArrayEquals( FLAT_ROW_ADAPTER.adaptResponse(anotherFlatRow).rawCells(), actualResult.get(1).rawCells());
assertEquals(readException, throwable);
assertArrayEquals( valuePart1.concat(valuePart2).concat(valuePart3).toByteArray(), actualResult.getValue(COL_FAMILY.getBytes(), QUAL_ONE.toByteArray()));
assertEquals(tableId, NameUtil.extractTableIdFromTableName(rangeRequest.getName()));
assertEquals(response, actualResponse.get());
assertTrue(dataClientWrapper.checkAndMutateRowAsync(conditionalRowM).get());
assertTrue(dataGCJClient.checkAndMutateRow(checkAndMutate));
assertEquals(exception, actualException.getCause());
assertFalse(instance.isFilterSupported(context, whileMatchFilter).isSupported());
assertFalse(instance.isFilterSupported(context, whileMatchFilter).isSupported());
assertEquals(TABLE_ID, NameUtil.extractTableIdFromTableName(rangeRequest.getName())); assertEquals(rowKey, rangeRequest.getRowKeyPrefix().toStringUtf8());
assertEquals(TEST_PROJECT_ID, instanceAdminSettings.getProjectId()); assertTrue(headers.get(GrpcUtil.USER_AGENT_KEY.name()).contains(userAgent)); assertEquals( credentials, instanceAdminSettings.getStubSettings().getCredentialsProvider().getCredentials());
assertTrue(dataClientWrapper.createBulkMutation(TABLE_ID) instanceof BulkMutationClassicApi);
assertTrue(result.isDone());
assertEquals(Result.EMPTY_RESULT, result); assertArrayEquals( FLAT_ROW_ADAPTER.adaptResponse(SAMPLE_FLAT_ROW).rawCells(), actualResult.rawCells());
assertEquals(ImmutableList.of("aa", "b", "bb", "cc", "zz"), colFamilyInActualOrder);
assertEquals(3, actual.size());
assertEquals(2, response.get().getColumnFamilies().size());
assertEquals(tableIdList, actualResponse);
assertEquals(Table.fromProto(createTableData()), response.get());
assertEquals( maxRowKeyCount, dataSettings .getStubSettings() .bulkReadRowsSettings() .getBatchingSettings() .getElementCountThreshold() .intValue());
assertFalse("Clone should not be empty", qt.isEmpty()); assertTrue("Should contain (47, 96)", qt.contains(new Vector3(47, 96)));
assertTrue(vector3.isColoseTo(vector32, 2)); assertTrue(vector3.isColoseTo(vector32, 2.5f)); assertFalse(vector3.isColoseTo(vector32, 1.99f));
assertEquals("Sorted values should be [Bar, Baz, Bing, Bong, Foo]", "[Bar, Baz, Bing, Bong, Foo]", valueString);
assertEquals("Count should be 5", 6, qt.getCount()); assertEquals("Count should be 4", 5, qt.getCount());
assertFalse(file.exists());
assertTrue(new File(tempDir.getRoot(), "example.txt").exists());
assertArrayEquals(IOUtils.toByteArray(expectedStream), IOUtils.toByteArray(configuration));
assertEquals(Collections.emptyList(), storage.names);
assertTrue(configFile.exists()); assertArrayEquals("hello".getBytes(), FileUtils.readFileToByteArray(configFile));
assertArrayEquals("test".getBytes(), IOUtils.toByteArray(storage.load()));
assertTrue(defaultFile.delete()); assertFalse(defaultFile.exists());
assertEquals(Collections.singletonList("example.txt"), storage.names);
assertEquals(Collections.singletonList("example.txt"), storage.names);
assertNotNull(subject.downloadStoredConfiguration());
assertSame(expectedInputStream, configuration);
assertFalse(directory.exists());
assertTrue(new File(tempDir.getRoot(), expectedFileName).exists());
assertTrue(existingFile.exists());
assertArrayEquals("test".getBytes(), IOUtils.toByteArray(storage.load()));
assertNull(storage.load());
assertTrue(StorageFactory.createStorage() instanceof FileStorage);
assertTrue(configFile.exists()); assertArrayEquals("hello".getBytes(), FileUtils.readFileToByteArray(configFile));
assertNull(storage.load());
assertTrue(defaultFile.exists());
assertThat(properties.getInstanceCount()).isEqualTo(1); assertThat(properties.getInstanceIndex()).isEqualTo(0); assertThat(properties.getDefaultBinder()).isEqualTo("default");
assertThat(properties.getInstanceCount()).isEqualTo(2); assertThat(properties.getInstanceIndex()).isEqualTo(1);
assertNotNull(expression);
assertFalse(attrs.getAttributes().isEmpty()); assertEquals(getAttributeAsSingleValue(attrs, "name"), "userid"); assertEquals(getAttributeAsList(attrs, "likes").size(), 2);
assertNull(results);
assertEquals("script did not add one attribute to passed-in attribute list", items.size() + 1, results.iterator().next().getAttributes().size());
assertNull(attrs);
assertEquals(ScriptEnginePersonAttributeDao.SCRIPT_TYPE.RESOURCE, new ScriptEnginePersonAttributeDao("SampleScriptedJavascriptPersonAttributeDao.js").getScriptType()); assertEquals(ScriptEnginePersonAttributeDao.SCRIPT_TYPE.FILE, new ScriptEnginePersonAttributeDao("src/test/resources/SampleScriptedJavascriptPersonAttributeDao.js").getScriptType()); assertEquals(ScriptEnginePersonAttributeDao.SCRIPT_TYPE.CONTENTS, new ScriptEnginePersonAttributeDao("doesnotexist/src/test/resources/SampleScriptedJavascriptPersonAttributeDao.js").getScriptType());
assertTrue(service.getValidation());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psResourceDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("safePolicyWarningDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsDependencyDictionaryDatas"));
assertEquals(1, controllerA.stringBetweenDots(str)); assertEquals(0, controllerB.stringBetweenDots(str));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceHeaderDefaultDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vsclActionDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("attributeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("varbindDictionaryDatas"));
assertNotNull(container.getItemIds(0, 0));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vnfTypeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("rainyDayDictionaryDatas"));
assertEquals(pass, PeCryptoUtils.encrypt(pass)); assertNotNull(PeCryptoUtils.encrypt(pass));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopSiteDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psTypeDictionaryDatas"));
assertNull(container.prevItemId(groupNotInList)); assertNull(container.prevItemId(group)); assertNotNull(retObj); assertTrue(retObj instanceof OnapPDPGroup);
assertTrue(container.removeItem(group)); assertFalse(groupContainer.removeItem(group));
assertTrue(service.getValidation());
assertNotNull(handler);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsControllerDictionaryDatas"));
assertNull(admin.saveAdminTabLockdownValue(request, response));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceModelsDictionaryDatas"));
assertNull(BrmsGateway.getPolicyEngine());
assertEquals(testCategory, attrIds.category); assertEquals(testID, attrIds.id); assertEquals(testType, attrIds.getType()); assertEquals(newTestType, attrIds.getType());
assertEquals("CONTINUE", postResult.name());
assertEquals(LogType.WARN, retrunObject.getLogType());
assertEquals("ClosedLoop_PM", adapter.getConfigPolicyType()); assertEquals("ClosedLoop_PM", adapter.getConfigPolicyType()); assertEquals("MyOnapName", adapter.getOnapName());
assertTrue(data.size() == 1); assertTrue(data.size() == 1);
assertEquals("52", returnValue); assertEquals("17", returnValue); assertEquals("22", returnValue);
assertTrue(pdpEngine.newEngine(properties) != null);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psTypeDictionaryDatas"));
assertNull(systemAlertData);
assertEquals(null, returnValue);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsControllerDictionaryDatas"));
assertEquals(null, retrunObject);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("groupPolicyScopeListDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("onapNameDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("rolesDatas"));
assertNull(message);
assertEquals(LogType.INFO, retrunObject.getLogType());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("pepOptionsDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceModelsDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vnfTypeDictionaryData"));
assertNotNull(factory);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("attributeDictionaryDatas"));
assertNull(message);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("groupPolicyScopeListDatas"));
assertEquals("CONTINUE", preResult.name());
assertNotNull(service);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vsclActionDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("onapNameDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psResourceDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("riskTypeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("varbindDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("rainyDayDictionaryDatas"));
assertEquals("success", result);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("varbindDictionaryDatas"));
assertEquals("Tue Feb 23 08:07:30", line);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("actionPolicyDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("actionPolicyDictionaryDatas"));
assertNull(PolicyRestController.getCommonClassDao()); assertNotNull(PolicyRestController.getCommonClassDao()); assertNotNull(CreateFirewallController.getCommonClassDao());
assertEquals(LogType.INFO, retrunObject.getLogType());
assertTrue(service.getValidation());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("scopeDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("pepOptionsDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsDependencyDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psTypeDictionaryDatas"));
assertNotNull(firewallPolicyService);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsDependencyDictionaryDatas"));
assertEquals("CONTINUE", postResult.name());
assertTrue(PolicyList.getpolicyList().size() == 1);
assertEquals("ERROR_VALUE", retrunObject.getDescription());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("actionPolicyDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("riskTypeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("dcaeUUIDDictionaryDatas"));
assertNotNull(retObj); assertTrue(retObj instanceof List); assertTrue(retList.isEmpty());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopServiceDictionaryDatas"));
assertTrue(service.getValidation());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("descriptiveScopeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("descriptiveScopeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("1707.4.1.2-Junit"));
assertNull(policy.getCorrectPolicyDataObject());
assertTrue(hb.isHeartBeatRunning()); assertFalse(hb.isHeartBeatRunning());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceLocationDictionaryDatas"));
assertEquals("ClosedLoop_Fault", adapter.getConfigPolicyType()); assertEquals("ClosedLoop_Fault", adapter.getConfigPolicyType()); assertEquals("MyOnapName", adapter.getOnapName());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("systemAlertsTableDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceConfigNameDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopSiteDictionaryDatas"));
assertNotNull(service);
assertNull(strReturn);
assertEquals(service.authenticate(basicCred), true);
assertFalse(container.removeItem(nullGroup));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopServiceDictionaryDatas"));
assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
assertEquals(0, response.getStatus());
assertNotNull(callbackResult); assertNotNull(callbackResult);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("onapNameDictionaryDatas"));
assertEquals(3, retrunObject.length); assertEquals(1, retrunObject.length); assertTrue(retrunObject == null);
assertEquals("CONTINUE", preResult.name());
assertEquals(LogType.WARN, retrunObject.getLogType());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceConfigNameDictionaryDatas"));
assertTrue( response.getContentAsString() != null && response.getContentAsString().contains("pdpTableDatas"));
assertNull(Whitebox.invokeMethod(controller, "doConnect", mockConnection));
assertNull(message);
assertEquals(LogType.SEVERE, retrunObject.getLogType());
assertTrue(true);
assertTrue(notificationMail.javaMailSenderImpl() != null);
assertEquals(successMap.get("success"), "success");
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("descriptiveScopeDictionaryDatas"));
assertEquals("CONTINUE", preResult.name());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsParamDictionaryDatas"));
assertNotNull(processor.getAttributeIdentifiersMap());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsControllerDictionaryDatas"));
assertTrue(PolicyList.getpolicyList().size() == 1);
assertTrue(response.getStatus() == 200);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psServiceDictionaryDatas"));
assertNull(loggingData);
assertTrue(firewallPolicyService.getValidation());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psClosedLoopDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("settingsDictionaryDatas"));
assertNull(message);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("safePolicyWarningDatas"));
assertFalse(container.containsId(group));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psClosedLoopDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopSiteDictionaryDatas"));
assertNull(message);
assertNull(message);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psServiceDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceAttributeDictionaryDatas"));
assertEquals(NullPointerException.class, e.getClass());
assertEquals("success", result);
assertNull(wrapper.populateRequestParameters((parameters))); assertEquals("Micro Service", adapter.getConfigPolicyType()); assertEquals("MyService", adapter.getServiceType()); assertEquals("\\"{}\\"", adapter.getPolicyJSON().toString()); assertNull(wrapper.populateRequestParameters((parameters)));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceDictionaryData"));
assertEquals("Optimization", adapter.getConfigPolicyType()); assertEquals("Optimization", adapter.getConfigPolicyType()); assertEquals("MyService", adapter.getServiceType());
assertTrue( response.getContentAsString() != null && response.getContentAsString().contains("priorityDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("dcaeUUIDDictionaryDatas"));
assertNotNull(filter); assertEquals(response.getStatusCode(), HttpServletResponse.SC_OK);
assertTrue(PolicyList.getpolicyList().size() == 0);
assertEquals(successMap.get("success"), "success");
assertEquals(LogType.INFO, retrunObject.getLogType());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vsclActionDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceAttributeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("vnfTypeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("attributeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("policyActivityTableDatas"));
assertEquals("CONTINUE", postResult.name());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsParamDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceLocationDictionaryDatas"));
assertNull(model); assertEquals(response.getStatusCode(), HttpServletResponse.SC_OK);
assertNotNull(handler);
assertEquals("CONTINUE", preResult.name());
assertNotNull(engine); assertEquals(1, response.getResults().size());
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("safePolicyWarningDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("optimizationModelsDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("groupPolicyScopeListDatas"));
assertTrue((boolean) method.invoke(new ElkConnectorImpl(), "abc123")); assertFalse((boolean) method.invoke(new ElkConnectorImpl(), "abc123*")); assertFalse((boolean) method.invoke(new ElkConnectorImpl(), "abc123{}")); assertFalse((boolean) method.invoke(new ElkConnectorImpl(), "abc123\\n")); assertFalse((boolean) method.invoke(new ElkConnectorImpl(), "abc123<")); assertFalse((boolean) method.invoke(new ElkConnectorImpl(), "abc123:"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("riskTypeDictionaryDatas"));
assertEquals("Firewall Config", adapter.getConfigPolicyType()); assertEquals(null, adapter.getSecurityZone()); assertEquals("ConfigName", adapter.getConfigName()); assertEquals("SecurityZone", adapter.getSecurityZone()); assertEquals("AnotherConfigName", adapter.getConfigName());
assertEquals("CONTINUE", postResult.name());
assertTrue(!cotroller.isValidDictionaryName("wrong-name")); assertTrue(cotroller.isValidDictionaryName("ActionList"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("No model name given"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceHeaderDefaultDatas"));
assertTrue(service.getValidation());
assertEquals(LogType.ERROR, retrunObject.getLogType());
assertNull(impl.getUserId(request));
assertNull(controller.searchDictionaryController(request, response));
assertNull(policy.getCorrectPolicyDataObject());
assertTrue(result != null && result.size() == 3);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("descriptiveScopeDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("closedLoopServiceDictionaryData"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceModelsDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psServiceDictionaryDatas"));
assertNull(HumanPolicyComponent.DescribePolicy(temp));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("brmsParamDictionaryDatas"));
assertFalse(utils.dbLockdownIgnoreErrors());
assertTrue(pdpEngine.newEngine() != null);
assertEquals(12, returnValue);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("microServiceModelsDictionaryClassDatas"));
assertEquals(pass, PeCryptoUtils.decrypt(pass)); assertEquals(pass, PeCryptoUtils.decrypt(encryptedPass)); assertEquals(pass, PeCryptoUtils.decrypt(pass));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psClosedLoopDictionaryDatas"));
assertTrue( response.getContentAsString() != null && response.getContentAsString().contains("papTableDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("availableLoggingDatas"));
assertNull(message);
assertTrue(result != null && !result.isEmpty());
assertTrue(result != null && result.getJsonBody() != null && !result.getJsonBody().isEmpty());
assertEquals(null, ParseLog.pullLastLineRead(file, "pap-rest"));
assertNull(container.nextItemId(groupNotInList)); assertNull(container.nextItemId(newGroup)); assertNotNull(retObj); assertTrue(retObj instanceof OnapPDPGroup);
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("settingsDictionaryDatas"));
assertEquals(null, ParseLog.pullLastLineRead(file, "pap-rest"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("psResourceDictionaryDatas"));
assertTrue(response.getContentAsString() != null && response.getContentAsString().contains("pepOptionsDictionaryDatas"));
