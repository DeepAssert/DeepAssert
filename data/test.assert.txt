assertNotNull(date); assertEquals(1, calendar.get(DAY_OF_YEAR));
assertNotNull(date); assertEquals(11, calendar.get(MONTH)); assertEquals(31, calendar.get(DAY_OF_MONTH));
assertThat(result).isEqualTo(1);
assertThat(UnsignedNumberUtil.getUnsignedLong(ByteBuffer.wrap(bytes))).isEqualTo(UnsignedNumberUtil.UNSIGNED_LONG_MAX);
assertThat(converter.convert("unknown")).isEqualTo(AuthenticatorTransport.create("unknown"));
assertThat(result).isEqualTo(expected);
assertThat(converter.convert("usb")).isEqualTo(AuthenticatorTransport.USB);
assertThat(extensions.getUnknownKeys()).contains("invalid");
assertThat(jws).isNotNull();
assertThat(instance.getUserHandle()).isEqualTo(new byte[3]);
assertThat(trustAnchors.keySet()).containsExactly(AAGUID.NULL); assertThat(trustAnchors).isNotEmpty();
assertThat(target.provide()).containsOnlyKeys(new AAGUID("df495bdc-223a-429d-9f0e-ebfa29155812"), new AAGUID("d075c221-6a37-4c61-80c7-11254460d5bb"));
assertThat(jws).isNotNull();
assertThat(result).isEqualTo(1);
assertThat(SignatureUtil.getRS256().getAlgorithm()).isEqualTo("SHA256withRSA");
assertThat(target.convert(null)).isNull();
assertThat(keyPair).isNotNull();
assertThat(converter.convertSet(null)).isNull();
assertThat(t).hasMessage("message");
assertThat(converter.convertSetToStringSet(null)).isNull();
assertThat(converter.convertSetToStringSet(Collections.singleton(AuthenticatorTransport.USB))).containsExactly("usb");
assertThat(new X500Name().size()).isZero();
assertThat(converter.convertToString(AuthenticatorTransport.USB)).isEqualTo("usb");
assertThat(result).isEqualTo(expected);
assertThat(keyPairA.getPrivate().getEncoded()).isEqualTo(keyPairB.getPrivate().getEncoded());
assertThat(t).hasMessage("trustAnchors is required; it must not be empty");
assertThat(target.getIdentifier()).isEqualTo(CredentialProtectionExtensionAuthenticatorOutput.ID);
assertThat(t).hasMessage("message");
assertThat(WebAuthnManager.createNonStrictWebAuthnManager()).isNotNull();
assertThat(target.getCustomRegistrationValidators()).contains(customRegistrationValidator);
assertThat(result.getRpIdHash()).isNotNull(); assertThat(result.getRpIdHash()).hasSize(32); assertThat(result.getFlags()).isEqualTo(BIT_UP); assertThat(result.getSignCount()).isEqualTo(325); assertThat(result.getAttestedCredentialData()).isNull(); assertThat(result.getExtensions().getKeys()).isEmpty();
assertThat(result.getRpIdHash()).isNotNull(); assertThat(result.getRpIdHash()).hasSize(32); assertThat(result.getFlags()).isEqualTo(BIT_ED); assertThat(result.getSignCount()).isZero(); assertThat(result.getAttestedCredentialData()).isNull(); assertThat(result.getExtensions().getKeys()).contains(UserVerificationMethodExtensionAuthenticatorOutput.ID);
assertThat(value.getBytes()).isEqualTo(inputBytes);
assertThat(result.get(aaguid).stream().map(TrustAnchor::getTrustedCert)).contains(TestAttestationUtil.load3tierTestAuthenticatorAttestationCertificate());
assertThat(bytes).isEqualTo(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF});
assertThat(instance.getCredProtect()).isEqualTo(CredentialProtectionPolicy.USER_VERIFICATION_OPTIONAL);
assertThat(target.getIdentifier()).isEqualTo(CredentialProtectionExtensionAuthenticatorInput.ID);
assertThat(t).hasMessage("algorithm is required; it must not be null");
assertThat(str).isEqualTo("{\\"value\\":\\"dummy\\"}");
assertThat(t).hasMessage("message");
assertThat(bytes).isEqualTo(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF});
assertThat(new AAID("ABCD#1234").toString()).isEqualTo("ABCD#1234");
assertThat(certPathValidator).isNotNull();
assertThat(pkixParameters).isNotNull();
assertThat(MessageDigestAlgorithm.create("SHA-256")).isEqualTo(MessageDigestAlgorithm.SHA256);
assertThat(itemMap).isSameAs(itemMapInFirstCall);
assertThat(converter.convertSet(Collections.singleton("usb"))).containsExactly(AuthenticatorTransport.USB);
assertThat(result).isEqualTo(0x00000000FFFFFFFFL);
assertThat(result).isEqualTo((short) 255);
assertThat(result).isEqualTo(0x00000000FFFFFFFFL);
assertThat(dto.getValue()).isEqualTo("dummy");
assertThat(result).isEqualTo(expected);
assertThat(t).hasMessage("message");
assertThat(value).isNull();
assertThat(Base64UrlUtil.encodeToString(bytes)).isEqualTo("eyJ2YWx1ZSI6ImR1bW15In0");
assertThat(AuthenticatorTransport.USB.getValue()).isEqualTo("usb");
assertThat(trustAnchorsA).isEqualTo(trustAnchorsB);
assertThat(dto.getValue()).isEqualTo("dummy");
assertThat(result).isEqualTo(expected);
assertThat(uuid.toString()).isEqualTo("015bdc7e-ee2c-4344-831d-b419abc928cd");
assertThat(uncompressed).hasSize(65); assertThat(uncompressed).isEqualTo(Base64UrlUtil.decode("BM13LrnFulQ14TNByrUKAXrIakbDx5QPf5R2W_nKOOtoLboP5lWJSpgo-sE6dY0XGTkXvOkeVmVGjDNBQITd_yI"));
assertThat(result).isEqualTo(1);
assertThat(instance.getCredentialProtectionPolicy()).isEqualTo(CredentialProtectionPolicy.USER_VERIFICATION_OPTIONAL_WITH_CREDENTIAL_ID_LIST);
assertThat(challengeA).hasSameHashCodeAs(challengeB);
assertThat(target.getIdentifier()).isEqualTo(CredentialProtectionExtensionClientInput.ID);
assertThat(target.convertToString(null)).isNull();
assertThat(target.getRk()).isTrue();
assertThat(t).hasMessageContaining("dummyAlg Signature not available");
assertThat(SignatureUtil.getES256().getAlgorithm()).isEqualTo("SHA256withECDSA");
assertThat(authenticationExtensionsClientInputsConverter.convertToString(extensions)).isEqualTo("{\\"appid\\":\\"test\\"}");
assertThat(result).isEqualTo(expected);
assertThat(WebAuthnRegistrationManager.createNonStrictWebAuthnRegistrationManager()).isNotNull();
assertThat(result).isEqualTo(0x0000FFFF);
assertThat(signCount).isEqualTo(70);
assertThat(authenticationExtensionsClientInputsConverter.convertToString(null)).isNull();
assertThat(t).hasMessage("message");
assertThat(target.provide()).containsOnlyKeys(new AAGUID("df495bdc-223a-429d-9f0e-ebfa29155812"));
assertThat(target.getCustomAuthenticationValidators()).contains(customAuthenticationValidator);
assertThat(clientInputs.getExtension(FIDOAppIDExtensionClientInput.class)).isEqualTo(new FIDOAppIDExtensionClientInput("dummy"));
assertNotNull(outlinks); assertFalse(outlinks.isEmpty()); assertEquals(1, outlinks.size()); assertNotNull(outlink); assertEquals("Torsten Zesch", outlink.getTitle().getPlainTitle());
assertFalse(page.isRedirect());
assertFalse(page.isDisambiguation());
assertTrue(numberOfCategories > 0); assertEquals(17, numberOfCategories);
assertFalse(page.isDiscussion());
assertNotNull(p); assertEquals(A_FAMOUS_PAGE_ID, p.getPageId());
assertNotNull(language); assertEquals(WikiConstants.Language._test, language);
assertFalse(wiki.existsPage(Integer.MAX_VALUE));
assertNotNull(cat); assertEquals("testing the title","People of UKP", cat.getTitle().toString());
assertEquals(-1, objectID);
assertNotNull(c); assertEquals(1, c.getPageId());
assertNotNull(title); assertEquals(A_FAMOUS_PAGE, title.getRawTitleText()); assertEquals(A_FAMOUS_PAGE_CLEAN, title.getPlainTitle());
assertNotNull(t); assertEquals("testing the title", A_FAMOUS_PAGE, t.getPlainTitle()); assertEquals("testing the pageId", A_FAMOUS_PAGE_ID, page.getPageId());
assertNotNull(outlinkIDs); assertFalse(outlinkIDs.isEmpty()); assertEquals(1, outlinkIDs.size());
assertTrue(categories > 0); assertEquals(2, categories);
assertNotNull(cat); assertEquals(4, expectedNumberOfChildren);
assertTrue(outlinks > 0); assertEquals(1, outlinks);
assertNotNull(pageInfo); assertTrue(pageInfo.length() > 0);
assertFalse(wiki.existsPage(A_FAMOUS_PAGE+"_")); assertFalse(wiki.existsPage(A_FAMOUS_PAGE+" (X)")); assertFalse(wiki.existsPage(" (X)"));
assertNotNull(p); assertEquals(A_FAMOUS_PAGE_ID, p.getPageId());
assertNotNull(iterable);
assertNotNull(pages); assertEquals(1, pages.size()); assertEquals(A_FAMOUS_PAGE_ID, pages.iterator().next().getPageId());
assertFalse(wiki.existsPage(null)); assertFalse(wiki.existsPage(""));
assertNotNull(inlinks); assertFalse(inlinks.isEmpty()); assertEquals(3, inlinks.size());
assertTrue(objectID > 0); assertEquals(objectID, wiki.__getPageHibernateId(A_FAMOUS_PAGE_ID));
assertNull(wiki.getCategory(Integer.MAX_VALUE));
assertEquals(4, depth, 0.00001);
assertNotNull(categories); assertFalse(categories.isEmpty()); assertEquals(2, categories.size()); assertNotNull(ct); assertTrue(foundSIR); assertTrue(foundDisambiguation);
assertNull(wiki.getCategory(-42));
assertEquals(0, outlinks);
assertEquals(-1, objectID);
assertNotNull(pageIDs); assertEquals(1, pageIDs.size()); assertTrue(pageIDs.contains(A_FAMOUS_PAGE_ID));
assertFalse(wiki.existsPage(-42));
assertNotNull(cat); assertEquals(2, numberOfParents);
assertNotNull(cat); assertTrue(numberOfPages > 0); assertEquals(2, numberOfPages);
assertNotNull(version); assertFalse(version.isEmpty()); assertEquals("1.0", version);
assertNotNull(p); assertTrue(p.isRedirect());
assertEquals(0, inlinks);
assertNotNull(wiki.getLanguage());
assertTrue(numberOfRedirectPages > 0); assertEquals(6, numberOfRedirectPages);
assertNotNull(redirects); assertTrue(redirects.isEmpty());
assertTrue(wiki.existsPage(A_FAMOUS_PAGE_ID));
assertTrue(wiki.existsPage(A_FAMOUS_PAGE));
assertNotNull(pageIDs); assertEquals(1, pageIDs.size()); assertTrue(pageIDs.contains(A_FAMOUS_PAGE_ID));
assertTrue(numberOfDisambiguationPages > 0); assertEquals(2, numberOfDisambiguationPages);
assertNotNull(inlinkIDs); assertFalse(inlinkIDs.isEmpty()); assertEquals(3, inlinkIDs.size());
assertNotNull(cat); assertEquals("testing the pageId",8,cat.getPageId());
assertTrue(inlinks > 0); assertEquals(3, inlinks);
assertNotNull(iterable); assertEquals(A_FAMOUS_PAGE_ID, page.getPageId()); assertNotNull(iterable); assertEquals(A_FAMOUS_PAGE_ID, page.getPageId()); assertNotNull(iterable); assertFalse(iterable.iterator().hasNext()); assertNotNull(iterable); assertFalse(iterable.iterator().hasNext());
assertNotNull(c); assertEquals(200, c.getPageId());
assertTrue(numberOfPages > 0); assertEquals(36, numberOfPages);
assertNotNull(p); assertNotNull(categoryInfo); assertTrue(categoryInfo.length() > 0);
assertThat(result, is(expected));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatch(new ArrayList<String>(), 1).size(), is(0));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(null, 1).size(), is(0)); assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(new ArrayList<XLogMethod>(), 1) .size(), is(0));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(XLOG_METHODS, -1).size(), is(XLOG_METHODS.size())); assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(XLOG_METHODS, 0).size(), is(XLOG_METHODS.size()));
assertThat( XLogUtils.getRemainingClassNames(classes, new HashSet<String>(CLASS_NAMES)), is(expected));
assertThat(result.endsWith(expectedTail), is(true)); assertThat(result.length(), lessThan(Strings.LOG_CONTENT_MAX_LENGTH + 20));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(XLOG_METHODS, 2), is(expected)); assertThat(XLogUtils.getPkgPrefixesForCoarseMatchXLogMethods(XLOG_METHODS, 3), is(expected));
assertThat(result.endsWith(expectedTail), is(true)); assertThat(result.length(), lessThan(Strings.LOG_CONTENT_MAX_LENGTH + 20));
assertThat(result.endsWith(expectedTail), is(true)); assertThat(result.length(), lessThan(Strings.LOG_CONTENT_MAX_LENGTH + 20));
assertThat(XLogUtils.getClassNameSectionSize(""), is(0)); assertThat(XLogUtils.getClassNameSectionSize(null), is(0)); assertThat(XLogUtils.getClassNameSectionSize("com"), is(1)); assertThat(XLogUtils.getClassNameSectionSize("com.promegu"), is(2)); assertThat(XLogUtils.getClassNameSectionSize("com.promegu.xlog.base"), is(4));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatch(CLASS_NAMES, -1).size(), is(CLASS_NAMES.size())); assertThat(XLogUtils.getPkgPrefixesForCoarseMatch(CLASS_NAMES, 0).size(), is(CLASS_NAMES.size()));
assertThat(matchCount, is(1)); assertThat(methodToLogs.size(), is(methods.size()));
assertThat(XLogUtils.getPkgPrefixesForCoarseMatch(CLASS_NAMES, 2), is(expected)); assertThat(XLogUtils.getPkgPrefixesForCoarseMatch(CLASS_NAMES, 3), is(expected));
assertNotNull(mvcResult.getResponse().getContentAsString());
assertFalse(plant.exists());
assertEquals(Helper.distanceInMetersBetween(0.0,0.0,1.0,1.0), 157955.13999241014, 0); assertEquals(Helper.distanceInMetersBetween(45.58885,12.34521,12.47785,1.12345), 3874247.1015959415, 0);
assertTrue(a > b); assertFalse(a < b);
assertEquals(stringResult1, dString1); assertEquals(stringResult2, dString2);
assertEquals(Helper.metersToDegrees(123.25),0.0011034613797355577, 0);
assertEquals(Helper.compare(0,1), -1); assertEquals(Helper.compare(1,0), 1); assertEquals(Helper.compare(0,0), 0);
assertTrue(temp.exists()); assertFalse(temp.exists());
assertEquals(Helper.doubleTo15DigitString(25.25), "25.250000000000000"); assertEquals(Helper.doubleTo15DigitString(-154782.24445), "-154782.244450000000000");
assertEquals(result, degrees, delta);
assertTrue(plant.exists());
assertEquals(Helper.folderSize(dir), 0); assertEquals(size, 100);
assertEquals(20.45, BoundingBox.getLongitude(longitude1), delta); assertEquals(110.00, BoundingBox.getLongitude(longitude2), delta);
assertEquals(expected, distanceInMetersBetween, delta);
assertEquals(-90.00, BoundingBox.getLatitude(latitude1), delta); assertEquals(90.00, BoundingBox.getLatitude(latitude2), delta); assertEquals(50.00, BoundingBox.getLatitude(latitude3), delta); assertEquals(-50.00, BoundingBox.getLatitude(latitude4), delta);
assertArrayEquals("SLong(2) : -1 => -1", new byte[]{-1, -1}, SLongByteUtils.fromLong(-1, 2));
assertArrayEquals("SLong(2) : 32767 => 32767", new byte[]{-1, 127}, SLongByteUtils.fromLong(32767, 2));
assertArrayEquals("SLong(2) : 1 => 1", new byte[]{1, 0}, SLongByteUtils.fromLong(1, 2));
assertArrayEquals("Long(2) : 1 => 1", new byte[]{1, 0}, ULongByteUtils.fromLong(1, 2));
assertArrayEquals("Long(2) : 65535 => 65535", new byte[]{-1, -1}, ULongByteUtils.fromLong(65535, 2));
assertArrayEquals("SLong(2) : -32768 => -32768", new byte[]{0, -128}, SLongByteUtils.fromLong(-32768, 2));
assertArrayEquals("Long(2) : 0 => 0", new byte[]{0, 0}, ULongByteUtils.fromLong(0, 2));
assertArrayEquals("SLong(2) : 0 => 0", new byte[]{0, 0}, SLongByteUtils.fromLong(0, 2));
assertArrayEquals("Long(2) : 30 => 30", new byte[]{30, 0}, ULongByteUtils.fromLong(30, 2));
assertArrayEquals( Files.toByteArray(outputFile), FileUtils.resourceToByteArray(TEST_BASE_TARGET_RESOURCE));
assertFalse("Core should not be closed", core.isClosed()); assertFalse("Core should not be closed", core.isClosed());
assertTrue("Failure should be caused by invalid image type. Error actually was: " + e.getMessage() , e.getMessage().startsWith(YoloProcessor.class.getCanonicalName() + ".invalidImage")); assertTrue("Failure should be caused by invalid image type. Error actually was: " + e.getMessage() , e.getMessage().startsWith(YoloProcessor.class.getCanonicalName() + ".invalidImage"));
assertEquals("Public keys must be equal", pk1, pk2); assertNotEquals("Public keys must not be equal", pk1, pk3);
assertEquals(1010, mFooterView.getLayoutParams().height);
assertThat(todoList).hasSize(12); assertTrue(todoList.get(i).getId().equals((long) (12 - i)));
assertSame(todo, mTodoRepository.createOrUpdate(todo).toBlocking().single());
assertFalse(mTodo.isCompleted());
assertThat(mItemViewModelList).hasSize(3); assertEquals(Long.valueOf(i), mItemViewModelList.get(i).getTodo().getId());
assertEquals(Priority.HIGH, mTodo.getPriority());
assertEquals(1.0f, mCheckBoxFill.getScaleX()); assertEquals(1.0f, mCheckBoxFill.getScaleY());
assertEquals("10/10/2000", DateUtils.formatDate(date));
assertNull(mDueDateView.getDate());
assertTrue(DateUtils.isTomorrow(date));
assertTrue(mTodoRepository.delete(1L).toBlocking().single());
assertEquals(0.0f, mCheckBoxFill.getScaleX()); assertEquals(0.0f, mCheckBoxFill.getScaleY());
assertEquals(View.GONE, mBackground.getVisibility()); assertEquals(View.VISIBLE, mBackgroundDisable.getVisibility());
assertEquals("title", mTodo.getTitle());
assertEquals("14/02/2016", DateUtils.formatDate(date));
assertEquals(mTodo, mViewModel.getTodo());
assertTrue(DateUtils.isToday(date));
assertEquals(View.GONE, mViewModel.getAlertVisibility().get());
assertNotEquals(Long.valueOf(100), mItemViewModelList.get(i).getTodo().getId()); assertNotEquals("title", mItemViewModelList.get(i).getTodo().getTitle());
assertTrue(mViewModel.isCompleted());
assertEquals(Priority.LOW, mTodo.getPriority());
assertEquals("No due date", mViewModel.getDueDate());
assertEquals(View.GONE, mViewModel.getAlertVisibility().get());
assertEquals("Can not delete todo", throwable.getMessage());
assertEquals("Can not find todo", throwable.getMessage());
assertEquals(View.GONE, mViewModel.getAlertVisibility().get());
assertEquals("09/02/2016", mViewModel.getDueDate());
assertTrue(mItemViewModelList.get(0).isCompleted());
assertTrue(mPopCheckBox.isChecked());
assertEquals(1.0f, mCheckBox.getScaleX()); assertEquals(1.0f, mCheckBox.getScaleY());
assertEquals(2, evenData.size()); assertTrue(evenData.contains(2)); assertTrue(evenData.contains(4));
assertEquals(10000, mTodo.getDueDate().getTime());
assertEquals(1.0f, mViewModel.getOpacity());
assertEquals(1010, mFooterView.getLayoutParams().height);
assertEquals(3, newData.size()); assertTrue(newData.contains(1)); assertTrue(newData.contains(2)); assertTrue(newData.contains(3));
assertEquals(Priority.HIGH, mViewModel.getPriority());
assertEquals("Can not save todo", throwable.getMessage());
assertEquals("new title", mTodo.getTitle());
assertTrue(mTodo.equals(todo));
assertEquals("error", throwable.getMessage()); assertFalse(mItemViewModelList.get(0).isCompleted());
assertEquals("title", mItemViewModelList.get(0).getTitle());
assertEquals(milliseconds, mTodo.getDueDate().getTime());
assertTrue(mTodo.isCompleted());
assertEquals("title", mViewModel.getTitle());
assertEquals(View.VISIBLE, mBackground.getVisibility()); assertEquals(View.GONE, mBackgroundDisable.getVisibility());
assertEquals(0.0f, mCheckBox.getScaleX()); assertEquals(0.0f, mCheckBox.getScaleY());
assertFalse(mTodo.isCompleted());
assertFalse(mTodo.equals(new Todo()));
assertFalse(mTodo.isCompleted());
assertNotNull(mCheckBox); assertNotNull(mCheckBoxFill);
assertFalse(mTodo.equals(new Object()));
assertEquals("title", mViewModel.getTitle());
assertThat(withoutTax).isEqualTo(new Money(Currency.EUR, 100.00));
assertThat(m1.add(m2)).isEqualTo(new Money(Currency.SEK, 375.00));
assertThat(new VAT(24).toString()).isEqualTo("24 %");
assertThat(Money.valueOf(null, 123)).isNull();
assertThat(new Money(Currency.SEK, 0).toString()).isEqualTo("SEK 0.00");
assertThat(withTax).isEqualTo(new Money(Currency.EUR, 1.24));
assertThat(withTax).isEqualTo(new Money(Currency.EUR, 124.00));
assertThat(m1.subtract(m2)).isEqualTo(new Money(Currency.SEK, 100.00));
assertThat(new VAT(24).toDouble()).isEqualTo(0.24);
assertThat(Money.valueOf(Currency.SEK, null)).isNull();
assertThat(VAT.valueOf(null)).isNull();
assertThat(withoutTax).isEqualTo(new Money(Currency.EUR, 1.00));
assertThat(new VAT(24).toInteger()).isEqualTo(24);
assertThat(new Money(Currency.EUR, 212550).toString()).isEqualTo("EUR 2125.50");
assertThat(VAT.valueOf(24)).isNotNull();
assertThat(Money.valueOf(Currency.SEK, 12300)).isEqualTo(new Money(Currency.SEK, 123.00));
assertEquals(context, ContextUtils.headerToSpanContext(header));
assertEquals(-1, e1.compareTo(e2)); assertEquals(0, e1.compareTo(e1)); assertEquals(1, e2.compareTo(e1));
assertEquals(X_RAY_TRACE_HEADER, ContextUtils.spanContextToHeader(context).toString());
assertEquals(context, ContextUtils.entityToSpanContext(segment));
assertThat(repository.name()).isEqualTo("MyCompany Custom Repository"); assertThat(repository.language()).isEqualTo("java"); assertThat(repository.rules()).hasSize(RulesList.getChecks().size());
assertEquals(2, repository.rules().size());
assertNull(lookup.find(Object.class, "zoo")); assertThat((Foo) lookup.find(Object.class, "foo"), is(sameInstance(this.foo))); assertThat((Bar) lookup.find(Object.class, "bar"), is(sameInstance(this.bar))); assertNull(lookup.find(String.class, "foo"));
assertTrue(o instanceof Map); assertEquals(FirstAmbiguous.CommonName.class.getName(), m.get("$class")); assertTrue(o2 instanceof Map); assertEquals(UnambiguousClassName.class.getSimpleName(), m2.get("$class"));
assertEquals(Collections.singleton("whatever"), SymbolLookup.getSymbolValue(SomeConfiguration.class)); assertEquals(Collections.singleton("whatever"), SymbolLookup.getSymbolValue(rule.jenkins.getDescriptorByType(SomeConfiguration.class)));
assertTrue(new DescribableModel(ToBeRemoved.class).isDeprecated()); assertFalse(new DescribableModel(Impl1.class).isDeprecated());
assertEquals(Collections.singleton("booleanParam"), SymbolLookup.getSymbolValue(BooleanParameterValue.class)); assertEquals(Collections.singleton("booleanParam"), SymbolLookup.getSymbolValue(new BooleanParameterValue("flag", true)));
assertEquals(Collections.emptySet(), SymbolLookup.getSymbolValue("some-string")); assertEquals(netSet, SymbolLookup.getSymbolValue(fishingNet)); assertEquals(netSet, SymbolLookup.getSymbolValue(fishingNetDescriptor)); assertEquals(fooSet, SymbolLookup.getSymbolValue(foo));
assertTrue(o instanceof Map); assertEquals(SharedName.class.getName(), m.get("$class")); assertTrue(o2 instanceof Map); assertEquals(UnambiguousClassName.class.getSimpleName(), m2.get("$class"));
assertEquals(new HashSet<Class<?>>(Arrays.asList(Impl1.class, Impl2.class, Impl3.class, Impl4.class)), DescribableModel.findSubtypes(Base.class)); assertEquals(Collections.singleton(Impl1.class), DescribableModel.findSubtypes(Marker.class));
assertTrue(message, message.contains(I.class.getName())); assertTrue(message, message.contains("value")); assertTrue(message, message.contains("java.lang.String")); assertTrue(message, message.contains("java.lang.Integer"));
assertThat(e, Matchers.instanceOf(IllegalArgumentException.class)); assertThat(e.getMessage(), is("WARNING: Unknown parameter(s) found for class type \'" + C.class.getName() + "\': garbage,junk"));
assertEquals(make(),make()); assertEquals(make().hashCode(),make().hashCode());
assertEquals(Collections.emptySet(), SymbolLookup.getSymbolValue(String.class)); assertEquals(netSet, SymbolLookup.getSymbolValue(FishingNet.class)); assertEquals(netSet, SymbolLookup.getSymbolValue(FishingNet.DescriptorImpl.class)); assertEquals(fooSet, SymbolLookup.getSymbolValue(Foo.class));
assertEquals("@symbol$class(x=4,y=hello)", make().toString());
assertEquals("{flag=true, text=stuff}", DescribableModel.uninstantiate_(new C("stuff", true)).toString()); assertEquals("{flag=true, text=more, value=stuff}", DescribableModel.uninstantiate_(i).toString()); assertEquals("net",ud.getSymbol()); assertTrue(ud.getArguments().isEmpty()); assertTrue(ud.instantiate(Tech.class) instanceof Internet);
assertThat(lookup.findDescriptor(Fishing.class, "net"), is(sameInstance((Descriptor)fishingNetDescriptor))); assertThat(lookup.findDescriptor(Tech.class, "net"), is(sameInstance((Descriptor)internetDescriptor)));
assertEquals("C:hello/true", instantiate(C.class, args).toString()); assertEquals("I:main/hello/true", instantiate(I.class, args).toString()); assertEquals("C:goodbye/false", instantiate(C.class, map("text", "goodbye")).toString());
assertThat(staticCountFromSlotNotice.size()).isNotEqualTo(0);
assertThat(allSlotNotice).isNotNull(); assertThat(allSlotNotice.size()).isNotEqualTo(0);
assertThat(logQuey).isNotNull();
assertNotNull(result); assertEquals(ENCODED_PASSWORD, result);
assertEquals(parts.get(0), "abc"); assertEquals(parts.get(1), "def"); assertEquals(parts.get(2), "g");
assertEquals(5, calculator.sum(2, 3));
assertEquals(5, calculator.sum(2, 3));
assertEquals(5, calculator.sum(2, 3));
assertThat(t, instanceOf(RpcException.class));
assertEquals( 400 , response.getStatusCode() );
assertEquals(200, response.getStatusCode().value()); assertNotNull("El Agente tiene que venir en el body",response.getBody()); assertEquals(403, response.getStatusCode().value()); assertNull(response.getBody()); assertEquals(403, response.getStatusCode().value()); assertNull(response.getBody());
assertEquals("Deberia haber 5 violaciones", 5 , vComplete.size() ); assertEquals("Deberia haber 4 violaciones", 4 , vPost.size() ); assertEquals("quitamos viloacion NotEmpty", 4 , vComplete.size() ); assertEquals("quitamos viloacion Size(min=8, max =10)", 3 , vComplete.size() );
assertNull(cNoExiste); assertNotNull(cExiste); assertEquals("3548MKZ", cExiste.getMatricula()); assertEquals("500", String.valueOf(cExiste.getKm()));
assertEquals(shouldForkResult.and(shouldForkResult2).isForkable(), result); assertEquals(shouldForkResult.and(shouldForkResult2).getReason(), reason);
assertEquals(pullRequestInfo.getBody(), String.format(BODY_TEMPLATE, IMAGE, IMAGE, TAG, imageAndTag));
assertEquals(dockerfileGitHubUtil.getMyself(), myself);
assertEquals(dockerfileGitHubUtil.getGHContents("org", "image"), Optional.of(contentsWithImage));
assertEquals(gitHubUtil.getMyself(), myself);
assertTrue(shouldForkResult.isForkable());
assertEquals(new FromInstruction(input).getComments(), expectedResult);
assertNotEquals(shouldNotForkResult("another"), shouldNotForkResult("test"));
assertEquals(pullRequestInfo.getBody(), OLD_CONSTANT_BODY);
assertEquals(dockerfileGitHubUtil.getRepo("test"), repo);
assertEquals(validator.contentHasChangesInDefaultBranch(repo, content, gitForkBranch), shouldNotForkResult(String.format(COULD_NOT_FIND_IMAGE_TO_UPDATE_TEMPLATE, imageName, searchContentPath)));
assertNull(gitHubPullRequestSender.getForkFromExistingRecordToProcess(processMultimap, reponame));
assertEquals(dockerfileGitHubUtil.getPullRequestForImageBranch(parent, gitForkBranch), Optional.empty());
assertEquals(dockerfileGitHubUtil.changeIfDockerfileBaseImageLine(img, tag, new StringBuilder(), line), expected);
assertEquals(new FromInstruction(fromInstructions).hasComments(), expectedResult);
assertEquals(validator.hasNoChanges(content, gitForkBranch), expectedResult);
assertEquals(new FromInstruction(fromInstruction).getTag(), expectedResult);
assertEquals(validator.shouldFork(mock(GHRepository.class), mock(GHContent.class), mock(GitForkBranch.class)), expectedResult);
assertTrue(dockerfileGitHubUtil.thisUserIsOwner(repo));
assertEquals(repoByName.size(), 0);
assertTrue(validator.hasNoChanges(content, gitForkBranch));
assertEquals(FromInstruction.isFromInstruction(input), expectedResult);
assertEquals(FromInstruction.isFromInstructionWithThisImageAndOlderTag(line, imageName, imageTag), expectedResult);
assertNull(gitHubUtil.createFork(repo));
assertEquals(validator.contentHasChangesInDefaultBranch(repo, content, gitForkBranch), shouldForkResult());
assertEquals(stringBuilder.toString(), "hello\\nFROM image:7357\\nworld\\nthis is a test\\n");
assertTrue(GitHub.shouldNotProcessDockerfilesInRepo(multimap, gitHubRepository));
assertFalse(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), reason);
assertEquals(pullRequestInfo.getTitle(), DEFAULT_TITLE);
assertEquals(new FromInstruction(input).getAdditionalParts(), expectedResult);
assertEquals(gitHubUtil.getGithub(), github);
assertNotNull(imageSet);
assertEquals(stringBuilder.toString(), "hello\\nFROM image:7357\\nworld\\nthis is a test\\n");
assertFalse(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), REPO_IS_OWNED_BY_THIS_USER);
assertEquals(pullRequestInfo.getTitle(), DEFAULT_TITLE);
assertEquals(pullRequestInfo.getTitle(), TITLE);
assertEquals(new FromInstruction(fromInstructions).hasTag(), expectedResult);
assertTrue(GitHub.shouldNotProcessDockerfilesInRepo(multimap, gitHubRepository));
assertEquals(dockerfileGitHubUtil.getGitHubUtil(), gitHubUtil);
assertEquals(new FromInstruction(fromInstruction).hasADifferentTag(tagToCheck), expectedResult);
assertEquals(new GitForkBranch(imageName, imageTag, specifiedBranch).getBranchName(), expectedResult);
assertEquals(dockerfileGitHubUtil.getPullRequestForImageBranch(parent, gitForkBranch), Optional.of(ghPullRequest));
assertFalse(modified, "Expected the dockerfile to not have changed.");
assertEquals(gitHubPullRequestSender.getForkFromExistingRecordToProcess(processMultimap, reponame), fork);
assertFalse(gitHubUtil.repoHasBranch(repo, branchName));
assertTrue(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), NO_REASON);
assertTrue(shouldForkResult.isForkable());
assertEquals(repoByName.size(), 4); assertTrue(repoByName.containsKey("test1") && repoByName.get("test1") == repo1); assertTrue(repoByName.containsKey("test2") && repoByName.get("test2") == repo2); assertTrue(repoByName.containsKey("test3") && repoByName.get("test3") == repo3); assertTrue(repoByName.containsKey("test4") && repoByName.get("test4") == repo4);
assertFalse(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), COULD_NOT_CHECK_THIS_USER);
assertEquals(validator.contentHasChangesInDefaultBranch(repo, content, gitForkBranch), shouldForkResult());
assertEquals(new GitForkBranch(imageName, imageTag, "").getBranchName(), expectedResult);
assertFalse(gitHubUtil.repoHasBranch(repo, branchName));
assertEquals(first, second);
assertEquals(dockerfileGitHubUtil.findFilesWithImage("test", "test"), list);
assertTrue(GitHub.shouldNotProcessDockerfilesInRepo(null, null));
assertEquals(new FromInstruction(input).getBaseImageName(), expectedResult);
assertTrue(gitHubUtil.repoHasBranch(repo, branchName));
assertEquals(output, expectedOutput);
assertEquals(new FromInstruction(fromInstruction).toString(), expectedResult);
assertFalse(GitHub.shouldNotProcessDockerfilesInRepo(multimap, gitHubRepository));
assertFalse(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), REPO_IS_FORK);
assertEquals(dockerfileGitHubUtil.tryRetrievingContent(new GHRepository(), "path", "branch"), content);
assertEquals(gitHubUtil.createPullReq(origRepo, "branch", forkRepo, "title", "body"), 0);
assertEquals(strB.toString(), "hello\\nFROM image:newtag\\nthis is a test\\n\\n\\n\\nworld\\n");
assertEquals(new FromInstruction(fromInstruction).hasBaseImage(imageToFind), expectedResult);
assertEquals(validator.contentHasChangesInDefaultBranch(repo, content, gitForkBranch), shouldNotForkResult(String.format(CONTENT_PATH_NOT_IN_DEFAULT_BRANCH_TEMPLATE, searchContentPath)));
assertFalse(shouldForkResult.isForkable()); assertEquals(shouldForkResult.getReason(), REPO_IS_ARCHIVED);
assertTrue(shouldForkResult.isForkable());
assertEquals(new GitForkBranch(imageName, imageTag, specifiedBranch).isSameBranchOrHasImageNamePrefix(inputBranch), expectedResult);
assertTrue(modified, "Expect the dockerfile to have been modified"); assertEquals(strB.toString(), String.format("hello\\n%s\\nthis is a test\\n", expectedReplacedData));
assertEquals(expectedResult, JsonUtil.serialize(insert));
assertEquals("\\"" + string + "\\"", JsonUtil.serialize(atomString)); assertEquals(integer.toString(), JsonUtil.serialize(atomInteger)); assertEquals(real.toString(), JsonUtil.serialize(atomReal)); assertEquals(bool.toString(), JsonUtil.serialize(atomBoolean)); assertEquals("[\\"uuid\\",\\"" + uuid.getUuid() + "\\"]", JsonUtil.serialize(atomUuid)); assertEquals( "[\\"named-uuid\\",\\"" + namedUuid.getUuidName() + "\\"]", JsonUtil.serialize(atomNamedUuid) );
assertEquals( jsonString, JsonUtil.serialize(request) ); assertNull(JsonUtil.serializeNoException(new WrongClass()));
assertTrue(lockResult.isLocked()); assertFalse(lockResult.isLocked());
assertNull(Set.of(nullSet));
assertEquals(Set.of("string1"), JsonUtil.deserialize("\\"string1\\"", Set.class)); assertEquals(Set.of(42L), JsonUtil.deserialize("42", Set.class)); assertEquals(Set.of(true), JsonUtil.deserialize("true", Set.class)); assertEquals(Set.of(new Uuid(uuid)), JsonUtil.deserialize("[\\"uuid\\", \\"" + uuid + "\\"]", Set.class)); assertEquals(Set.of(4.2), JsonUtil.deserialize("4.2", Set.class));
assertEquals( request, JsonUtil.deserialize(jsonString, JsonRpcV1Request.class) ); assertEquals( request, JsonUtil.deserialize(file.toUri().toURL(), JsonRpcV1Request.class) ); assertNull(JsonUtil.deserializeNoException("{}", JsonRpcV1Request.class));
assertTrue(ss1.validate()); assertTrue(is.validate()); assertTrue(sensorConfig.validate());
assertNotNull(wrapper);
assertTrue(ValidityTools.isLocalhost("127.0.0.1")); assertFalse(ValidityTools.isLocalhost("127.0.1.1")); assertTrue(ValidityTools.isLocalhost("localhost")); assertFalse(ValidityTools.isLocalhost("129.0.0.1"));
assertNotNull(new CashRegister(1, "", "", 1));
assertEquals(2, discountData.getDiscounts().size());
assertEquals(control, getGenericPrice(price, discount, taxe, Type.DISCOUNT | Type.TAXE));
assertEquals(control, getGenericPrice(price, discount, taxe, Type.DISCOUNT_COST));
assertEquals(control_discount, discount);
assertEquals(control, CalculPrice.applyDiscount(a_price, discount));
assertEquals(control, getGenericPrice(price, discount, taxe, Type.DISCOUNT));
assertEquals(0.223d, CalculPrice.round(a, 3));
assertEquals(control, CalculPrice.removeTaxe(price, taxe));
assertNotNull(new Cash(1));
assertEquals(control, getGenericPrice(price, discount, taxe, Type.TAXE_COST));
assertArrayEquals(expectedVars, actualVars);
assertTrue(meta.pofClassAttribute == null);
assertEquals("SELECT *\\nWHERE {\\n ?s ?p ?o .\\n}\\n", processed);
assertFalse(meta.pofNode.getMetadata().containsKey(SyntaxTreeBuilder.BeginLine));
assertEquals( "SELECT *\\nWHERE {\\n ?s ?p [?p ?type1 ,?type2 ;<name> \\"titi\\" ].\\n}\\n", processed);
assertTrue(Hash.getLong("test1") != Hash.getLong("test2")); assertTrue(Hash.getLong("test1", "test2") != Hash.getLong("test2")); assertTrue(Hash.getLong("test1", "test2") != Hash.getLong("test2", "test1")); assertTrue(Hash.getLong("test1", "test3") == Hash.getLong("test1", "test3"));
assertEquals(expected, ast.dump(""));
assertArrayEquals(expectedVars, actualVars);
assertEquals(RecommendationType.PREDICATE, type);
assertEquals( "SELECT *\\nWHERE {\\n ?s ?p ?o ,?o2 ,<toto> ;?b ?c ;<name> ?e .\\n}\\n", processed);
assertEquals(expected, ast.dump(""));
assertEquals(expected, ast.dump(""));
assertEquals(3, vars.length);
assertEquals(expected, ast.dump(""));
assertTrue(Hash.get("test1") != Hash.get("test2")); assertTrue(Hash.get("test1", "test2") != Hash.get("test2")); assertTrue(Hash.get("test1", "test2") != Hash.get("test2", "test1")); assertTrue(Hash.get("test1test3") == Hash.get("test1", "test3"));
assertEquals(RecommendationType.GRAPH, type);
assertEquals(RecommendationType.CLASS, type);
assertEquals(expected, ast.dump(""));
assertEquals("dbpedia.org", URIUtil.getSndDomainFromUrl(s1)); assertEquals("dbpedia.org", URIUtil.getSndDomainFromUrl(s2));
assertTrue(resources.resolve("resolved/service1/files/config.properties").toFile().exists()); assertTrue(resources.resolve("resolved/service1/files/config2.properties").toFile().exists()); assertTrue(resources.resolve("resolved/service1/files/config3.properties").toFile().exists());
assertEquals("image", ref.getImageName());
assertTrue(resources.resolve("resolved/service2/s2").toFile().exists()); assertTrue(resources.resolve("resolved/service2/resourcedir/from_service_2").toFile().exists()); assertTrue(resources.resolve("resolved/service2/resourcedir/from_service_1").toFile().exists()); assertTrue(resources.resolve("resolved/service2/resourcedir2/from_service_1").toFile().exists());
assertEquals("djoaquim/image", ref.getImageName());
assertEquals("djoaquim/image", ref.getImageName());
assertTrue(resources.resolve("resolved/service2/files/config.properties").toFile().exists()); assertTrue(resources.resolve("resolved/service2/files/config2.properties").toFile().exists()); assertTrue(resources.resolve("resolved/service1/files/config3.properties").toFile().exists()); assertTrue(resources.resolve("resolved/service2/files/config4.properties").toFile().exists());
assertEquals("image", ref.getImageName());
assertThat(out ).isEqualTo("< 355");
assertThat(out ).isEqualTo("< 175"); assertThat(out ).isEqualTo("< 230"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680"); assertThat(out ).isEqualTo("< 680");
assertThat(out ).isEqualTo("< 230");
assertThat(out ).isEqualTo("< 100"); assertThat(out ).isEqualTo("< 200"); assertThat(out ).isEqualTo("< 300"); assertThat(out ).isEqualTo("< 400"); assertThat(out ).isEqualTo("< 400"); assertThat(out ).isEqualTo("< 450"); assertThat(out ).isEqualTo("< 525"); assertThat(out ).isEqualTo("< 580");
assertThat(out ).isEqualTo("< 380");
assertThat(out).isEqualTo("< 75");
assertThat(out ).isEqualTo("< 280");
assertThat(out ).isEqualTo("< 380");
assertThat(out ).isEqualTo("< 410");
assertThat(new BasicLoop().doSomethingWithInput("foobar")).isEqualTo("< foobar");
assertThat(out ).isEqualTo("< 100");
assertThat(out ).isEqualTo("< 150");
assertThat(out ).isEqualTo("< 180");
assertThat(out ).isEqualTo("< 175");
assertThat(out ).isEqualTo("< 200"); assertThat(out ).isEqualTo("< 150"); assertThat(out ).isEqualTo("< 150");
assertThat(out ).isEqualTo("< 325");
assertThat(MarsRover.moveRobot(5, 5, "1 2 N", "LMLMLMLMM")).isEqualTo("1 3 N");
assertFalse(EightQueens.isSolution(board));
assertThat(MarsRover.moveRobot(5, 5, "1 1 E", "L")).isEqualTo("1 1 N");
assertThat(MarsRover.moveRobot(5, 5, "1 1 E", "R")).isEqualTo("1 1 S");
assertThat(Bowling.play("3/|25|--|--|--|--|--|--|--|--||")).isEqualTo(19);
assertThat(CodeLine.lineCount(codeLines().add("public class Sample1 {}").build())).isEqualTo(1);
assertThat(parse( " \\n" + "|_|\\n" + " |\\n" + " ")) .isEqualTo(4);
assertFalse(EightQueens.isSolution(board));
assertThat(Bowling.play("--|--|--|--|--|--|--|--|--|--||")).isEqualTo(0);
assertThat(CodeLine.lineCount(codeLines().add("") .add("public class sample5() {}").build())).isEqualTo(1);
assertTrue(EightQueens.isSolution(board));
assertThat(CodeLine.lineCount(codeLines().add("") .add("public class Sample4 {}") .build())).isEqualTo(1);
assertTrue(EightQueens.isSolution(board));
assertEquals(Arrays.asList(" "), result);
assertFalse(EightQueens.isSolution(board));
assertThat(translate(3)).isEqualTo("100");
assertThat(parse( " _ \\n" + "|_| _|\\n" + " ||_ \\n" + " ")) .isEqualTo(42);
assertTrue(EightQueens.isSolution(board));
assertThat(translate(1)).isEqualTo("1");
assertThat(parse( " _ \\n" + " _|\\n" + "|_ \\n" + " ")) .isEqualTo(2);
assertThat(MarsRover.moveRobot(5, 5, "1 1 N", "M")).isEqualTo("1 2 N");
assertThat(MarsRover.moveRobot(5, 5, "1 1 S", "R")).isEqualTo("1 1 W");
assertThat(new Board( l(B, B, B, B), l(B, B, B, B), l(B, _, B, B), l(B, B, B, B)).legalMovesFor(W)) .isEmpty();
assertEquals("Drink maker makes 1 tea with no sugar - and therefore no stick", result);
assertThat(parse( " _ \\n" + " _|\\n" + " _|\\n" + " ")) .isEqualTo(3);
assertNotNull(DrinkFactory.getInstance());
assertThat(translate(2)).isEqualTo("10");
assertThat(MarsRover.moveRobot(5, 5, "1 1 W", "M")).isEqualTo("0 1 W");
assertEquals(OutCome.LEFT, OutCome.from(lefty)); assertEquals(OutCome.RIGHT, OutCome.from(righty));
assertThat(MarsRover.moveRobot(5, 5, "1 1 W", "R")).isEqualTo("1 1 N");
assertThat(MarsRover.moveRobot(5, 5, "1 1 N", "L")).isEqualTo("1 1 W");
assertThat(Bowling.play("X|--|--|--|--|--|--|--|--|--||")).isEqualTo(10);
assertThat(translate(6)).isEqualTo("1001");
assertThat(tree.generateCombinations()).isEqualTo(Lists.newArrayList("0,1")) ;
assertThat(new Board( l(B, W, W, B), l(W, B, W, W), l(W, W, B, W), l(_, W, W, B)).legalMovesFor(B)) .containsExactly(position(3, 0));
assertThat(MarsRover.moveRobot(5, 5, "1 1 W", "MR")).isEqualTo("0 1 N");
assertEquals(Arrays.asList("a", "b", "c"), result);
assertTrue(EightQueens.isSolution(board));
assertThat(Bowling.play("3/|2-|--|--|--|--|--|--|--|--||")).isEqualTo(14);
assertEquals(Arrays.asList("0123456789ABCDE."), result);
assertThat(Bowling.play("X|2-|--|--|--|--|--|--|--|--||")).isEqualTo(14);
assertThat(Bowling.play("X|X|--|--|--|--|--|--|--|--||")).isEqualTo(30);
assertThat(MarsRover.moveRobot(5, 5, "1 1 S", "M")).isEqualTo("1 0 S");
assertThat(CodeLine.lineCount(codeLines() .add("public static void main() {}") .build())).isEqualTo(1);
assertFalse(EightQueens.isSolution(board));
assertArrayEquals(new boolean[][] { { _, _, _, _, _ }, { _, _, _, _, _ }, { _, X, X, X, _ }, { _, _, _, _, _ }, { _, _, _, _, _ } }, GameOfLife.live(state));
assertThat(Bowling.play("3-|5-|--|--|--|--|--|--|--|--||")).isEqualTo(8);
assertEquals(Arrays.asList("justification. "), result);
assertThat(MarsRover.moveRobot(5, 5, "3 3 E", "MMRMMRMRRM")).isEqualTo("5 1 E");
assertThat(Bowling.play("3-|--|--|--|--|--|--|--|--|--||")).isEqualTo(3);
assertThat(tree.generateCombinations()).isEqualTo(Lists.newArrayList("0,1,2,3","0,1,3,2"));
assertThat(translate(4)).isEqualTo("101");
assertThat(parse( " \\n" + " |\\n" + " |\\n" + " ")) .isEqualTo(1);
assertThat(tree.generateCombinations()).isEqualTo(Lists.newArrayList("0,1,2","0,2,1"));
assertThat(new Board( l(B, W, W, B), l(W, B, W, W), l(_, W, B, W), l(_, W, W, B)).legalMovesFor(B)) .containsExactly(position(2, 0), position(3, 0));
assertEquals(Arrays.asList("What must be", "shall be. "), result);
assertEquals(Arrays.asList("hello", ", ", "world"), result);
assertThat(MarsRover.moveRobot(5, 5, "1 1 S", "L")).isEqualTo("1 1 E");
assertEquals("Not enough money: 0.2 euros still missing", result);
assertThat(MarsRover.moveRobot(5, 5, "1 1 W", "RM")).isEqualTo("1 2 N");
assertThat(Bowling.play("X|25|--|--|--|--|--|--|--|--||")).isEqualTo(24);
assertThat(new Board( l(B, W, W, B), l(W, B, W, W), l(_, W, B, W), l(W, W, W, B)).legalMovesFor(B)) .containsExactly(position(2, 0));
assertThat(Bowling.play("X|3/|--|--|--|--|--|--|--|--||")).isEqualTo(30);
assertThat(translate(5)).isEqualTo("1000");
assertThat(Bowling.play("3/|--|--|--|--|--|--|--|--|--||")).isEqualTo(10);
assertThat(Bowling.play("X|25|--|--|--|--|--|--|--|-1||")).isEqualTo(25);
assertThat(CodeLine.lineCount(codeLines().add("").add("public class sample6() {}") .build())).isEqualTo(1);
assertThat(new Board( l(B, B, B, B), l(B, B, B, B), l(B, _, B, B), l(B, B, B, B)).legalMovesFor(B)) .isEmpty();
assertThat(MarsRover.moveRobot(5, 5, "1 1 W", "L")).isEqualTo("1 1 S");
assertThat(MarsRover.moveRobot(5, 5, "1 1 E", "M")).isEqualTo("2 1 E");
assertEquals(Arrays.asList("This is an", "example of text", "justification. "), result);
assertThat(MarsRover.moveRobot(5, 5, "1 1 E", "")).isEqualTo("1 1 E");
assertThat(MarsRover.moveRobot(5, 5, "1 1 N", "R")).isEqualTo("1 1 E");
assertFalse(EightQueens.isSolution(board));
assertTrue(kinClient.hasAccount());
assertNull(kinClient.getAccount(-1));
assertThat(eventsCount[0], equalTo(0));
assertTrue(response.isSuccess()); assertEquals(response.getLedger(), new Long(826150L)); assertEquals(response.getHash(), "2634d2cf5adcbd3487d1df042166eef53830115844fdde1588828667bf93ff42"); assertNull(response.getExtras());
assertTrue(exception.getMessage().contains("text must be <= 28 bytes."));
assertThat(eventsCount[0], equalTo(1));
assertTrue(exception.getMessage().contains("At least one operation required")); assertEquals(new Long(2908908335136768L), account.getSequenceNumber());
assertThat(fakeStore.getString(KeyStoreImpl.VERSION_KEY), equalTo(KeyStoreImpl.ENCRYPTION_VERSION_NAME)); assertThat(fakeStore.getString(KeyStoreImpl.STORE_KEY_ACCOUNTS), nullValue());
assertTrue(latch.await(1, TimeUnit.SECONDS)); assertThat(eventsCount[0], equalTo(2));
assertTrue(keyStore.loadAccounts().isEmpty());
assertFalse(kinClient.hasAccount());
assertThat(mockWebServer.takeRequest().getRequestUrl().toString(), containsString(ACCOUNT_ID));
assertTrue(exception.getMessage().contains("Transaction must be signed by at least one signer."));
assertNotNull(expectedAccount1); assertNotNull(expectedAccount2); assertThat(account1.getAccountId(), equalTo(expectedAccount1.getPublicAddress())); assertThat(account2.getAccountId(), equalTo(expectedAccount2.getPublicAddress()));
assertEquals(response.getStellarAddress(), "bob*stellar.org"); assertEquals(response.getAccountId(), "GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY"); assertNull(response.getMemoType()); assertNull(response.getMemo());
assertTrue(response.isSuccess()); assertEquals(response.getLedger(), new Long(826150L)); assertEquals(response.getHash(), "2634d2cf5adcbd3487d1df042166eef53830115844fdde1588828667bf93ff42"); assertNull(response.getExtras());
assertTrue(exception.getMessage().contains("MEMO_HASH can contain 32 bytes at max."));
assertEquals(1, accounts.size()); assertEquals(String.valueOf(account1.getSecretSeed()), String.valueOf(accounts.get(0).getSecretSeed()));
assertEquals(String.valueOf(account1.getSecretSeed()), String.valueOf(actualAccount1.getSecretSeed())); assertEquals(String.valueOf(account2.getSecretSeed()), String.valueOf(actualAccount2.getSecretSeed()));
assertTrue(kinClient.hasAccount()); assertFalse(kinClient.hasAccount());
assertNull(kinAccount);
assertNotNull(account); assertNotNull(account.getPublicKey()); assertNotNull(account.getSecretSeed());
assertThat(kinClient.getAccountCount(), equalTo(0));
assertEquals(response.getStellarAddress(), "bob*stellar.org"); assertEquals(response.getAccountId(), "GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY"); assertEquals(response.getMemoType(), "text"); assertEquals(response.getMemo(), "test");
assertTrue(latch.await(1, TimeUnit.SECONDS)); assertThat(eventFired[0], equalTo(true));
assertThat(status, equalTo(AccountStatus.CREATED));
assertNull(Network.current());
assertThat(kinClient.getAccountCount(), equalTo(3)); assertThat(kinClient.getAccountCount(), equalTo(1)); assertThat(kinClient.getAccountCount(), equalTo(2)); assertThat(kinClient.getAccountCount(), equalTo(0));
assertEquals(expectedBalance, balance);
assertEquals(expectedRandomAccount.getAccountId(), kinAccount.getPublicAddress());
assertNotNull(kinAccount); assertThat(kinAccount.getPublicAddress(), not(isEmptyOrNullString()));
assertEquals(expectedMinFee, minFee);
assertEquals(AccountStatus.CREATED, status);
assertEquals(account.getAccountId(), kinAccount.getPublicAddress());
assertEquals(expectedTransactionId, transactionId);
assertNotNull(kinAccount); assertThat(kinAccount.getPublicAddress(), not(isEmptyOrNullString()));
assertThat(status, equalTo(AccountStatus.NOT_CREATED));
assertNotNull(kinAccount); assertNotNull(kinAccount2); assertThat(kinAccount.getPublicAddress(), not(isEmptyOrNullString())); assertThat(kinAccount2.getPublicAddress(), not(isEmptyOrNullString())); assertThat(kinAccount, not(equalTo(kinAccount2)));
assertTrue(latch.await(1, TimeUnit.SECONDS)); assertThat(actualResults.size(), equalTo(2)); assertThat(balance1, notNullValue()); assertThat(balance2, notNullValue()); assertThat(balance1.value(), equalTo(new BigDecimal("11549.998"))); assertThat(balance2.value(), equalTo(new BigDecimal("11299.997")));
assertEquals(account.getSequenceNumber(), new Long(101L));
assertTrue(keypair.canSign()); assertFalse(keypair.canSign());
assertNotNull(actualEnvironment); assertFalse(actualEnvironment.isMainNet()); assertEquals(url, actualEnvironment.getNetworkUrl()); assertEquals(Environment.TEST.getNetworkPassphrase(), actualEnvironment.getNetworkPassphrase());
assertTrue(kinClient.hasAccount());
assertEquals(new Long(100L), account.getSequenceNumber()); assertEquals(new Long(101L), incremented); assertEquals(new Long(100L), account.getSequenceNumber()); assertEquals(new Long(101L), incremented);
assertEquals(response.getStellarAddress(), "bob*stellar.org"); assertEquals(response.getAccountId(), "GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY"); assertNull(response.getMemoType()); assertNull(response.getMemo());
assertThat(eventsCount[0], equalTo(0));
assertNull(exception);
assertEquals(3, artifacts.size());
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency2, dependencies.get(0));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertEquals(license, licenseHandler.resolve(license.getName())); assertEquals(null, licenseHandler.resolve("Test2"));
assertNull(exception);
assertNotNull(params); assertEquals(1, params.size()); assertEquals(DbModule.ORGANIZATION_DB_FIELD, params.keySet().iterator().next()); assertEquals("organization1", params.values().iterator().next());
assertNotNull(exception);
assertNotNull(exception); assertEquals(javax.ws.rs.core.Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertFalse(filter.filter(null));
assertTrue(filter.filter(approvedLicense)); assertFalse(filter.filter(rejectLicense)); assertFalse(filter.filter(toBeValidatedLicense)); assertFalse(filter.filter(approvedLicense)); assertTrue(filter.filter(rejectLicense)); assertFalse(filter.filter(toBeValidatedLicense));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(test); assertFalse(test);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNull(exception); assertNotNull(gotBuildInfo);
assertEquals(null, versionsHandler.getLastRelease(versions));
assertNotNull(graph); assertEquals(5, graph.getElements().size()); assertEquals(4, graph.getDependencies().size()); assertNotNull(compDependency); assertEquals(TC02_ModuleWithOneArtifactAndDependencyOfEachType.MODULE_NAME, compDependency.getSource()); assertEquals(TC02_ModuleWithOneArtifactAndDependencyOfEachType.COMPILE_DEPENDENCY_MODULE, compDependency.getTarget()); assertNotNull(proDependency); assertNotNull(runDependency); assertNotNull(testDependency);
assertNotNull(exception);
assertNotNull(exception); assertEquals(Status.NOT_ACCEPTABLE.getStatusCode(), exception.getHttpStatus());
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertEquals(organization.getName(), dbOrganization.getName()); assertEquals(1, dbOrganization.getCorporateGroupIdPrefixes().size()); assertEquals(organization.getCorporateGroupIdPrefixes().get(0), dbOrganization.getCorporateGroupIdPrefixes().get(0));
assertEquals("1.2.0", versionsHandler.getLastVersion(versions));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertFalse(byId.isPresent());
assertNotNull(response); assertEquals(HttpStatus.CREATED_201, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertEquals(1, licenseHandler.getMatchingLicenses("LGPL-3.0").size());
assertNull(exception); assertNotNull(productNameList); assertEquals(2, productNameList.size());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertFalse(filter.filter(null)); assertFalse(filter.filter(null)); assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertEquals("1.2.0", versionsHandler.getLastVersion(versions));
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency2, dependencies.get(0));
assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus());
assertTrue(filter.filter(doNotUseArtifact)); assertFalse(filter.filter(artifactThatCanBeUsed)); assertFalse(filter.filter(doNotUseArtifact)); assertTrue(filter.filter(artifactThatCanBeUsed));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals("{\\"modules\\":[\\"testSearch_id_1\\",\\"testSearch_id_2\\"],\\"artifacts\\":null}", results);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(gotOrganization); assertEquals(dbOrganization.getName(), gotOrganization.getName());
assertNotNull(gotOrganization); assertEquals(organization, gotOrganization);
assertNotNull(graph); assertEquals(3, graph.getElements().size()); assertEquals(2, graph.getDependencies().size()); assertNotNull(graph); assertEquals(2, graph.getElements().size()); assertEquals(1, graph.getDependencies().size());
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(module); assertNull(exception);
assertTrue(license.equals(license2)); assertFalse(license.equals(license3)); assertFalse(license.equals(license4)); assertFalse(license.equals(license5)); assertFalse(license.equals(license6)); assertFalse(license.equals(license7)); assertFalse(license.equals("test"));
assertNotNull(comment); assertEquals("com.axway.test:1.0.0::jar", comment.getEntityId()); assertEquals("DbArtifact", comment.getEntityType()); assertEquals("test comment", comment.getCommentText()); assertEquals("testUser", comment.getCommentedBy()); assertEquals("Flag as DO_NOT_USE", comment.getAction());
assertNotNull(exception);
assertEquals(3, deliveryDependencies.size());
assertNull(exception);
assertNotNull(exception);
assertNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NO_CONTENT_204, response.getStatus());
assertTrue(filter.filter(dependency));
assertNotNull(response); assertEquals(HttpStatus.BAD_REQUEST_400, response.getStatus()); assertTrue(entity.contains("provide at least one module filtering criteria"));
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertNotNull(exception);
assertEquals("groupId:artifactId:version:classifier:extension", artifact.getGavc());
assertNull(exception); assertNotNull(modules); assertEquals(1, modules.size()); assertEquals(module1, modules.get(0));
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNull(organization);
assertNull(exception); assertNotNull(gotNames); assertEquals(names.size(), gotNames.size());
assertNotNull(tree); assertEquals(1, tree.getChildren().size()); assertEquals(TC03_ModuleWithOneSubmoduleAndDependencyOfEachType.SUBMODULE_NAME, subModule.getName()); assertEquals(0, subModule.getChildren().size());
assertNull(exception);
assertEquals(3, gavcs.size());
assertTrue(filter.filter(module));
assertFalse(client.isServerAvailable());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(1, results.size()); assertEquals("module1", results.get(0));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus());
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertTrue(filter.filter(artifactWithLicense)); assertFalse(filter.filter(artifactWithoutLicense));
assertEquals(repo.getComments(entityId, entityType), commentList);
assertEquals(dbLicense.getName(), license.getName()); assertEquals(dbLicense.getLongName(), license.getLongName()); assertEquals(dbLicense.getComments(), license.getComments()); assertEquals(dbLicense.getRegexp(), license.getRegexp()); assertEquals(dbLicense.getUrl(), license.getUrl());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(graph);
assertNotNull(exception);
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(corporateGroupIds); assertEquals(1, corporateGroupIds.size()); assertEquals("org.test", corporateGroupIds.get(0));
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(productNames); assertEquals(3, productNames.size());
assertNull(module); assertNull(exception);
assertFalse(filter.filter(artifact));
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertEquals(expectedString,generatedLink);
assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus()); assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus()); assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus());
assertNotNull(tree); assertEquals(TC01_ModuleWithOneArtifactWithoutDependency.MODULE_NAME, tree.getName()); assertEquals(0, tree.getChildren().size());
assertNotNull(response); assertEquals(HttpStatus.UNPROCESSABLE_ENTITY_422, response.getStatus()); assertEquals("Validation is not supported for this type of file", returnMessage);
assertNotNull(results); assertEquals(0, results.size());
assertEquals(expectedString,generatedLink);
assertNotNull(exception); assertEquals(javax.ws.rs.core.Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNotNull(testFile); assertEquals("Can you read this?", FileUtils.read(new File(testFile.getPath())));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.BAD_REQUEST_400, response.getStatus());
assertEquals("groupId", DataUtils.getGroupId(gavc1)); assertEquals("test", DataUtils.getGroupId(gavc2));
assertEquals(true, license.isPending());
assertNotNull(exception); assertEquals(javax.ws.rs.core.Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertEquals(true, license.isUnknown());
assertFalse(config.isInMaintenance()); assertTrue(config.isInMaintenance()); assertFalse(config.isInMaintenance());
assertEquals(dbOrganization.getName(), organization.getName()); assertEquals(1, organization.getCorporateGroupIdPrefixes().size()); assertEquals(dbOrganization.getCorporateGroupIdPrefixes().get(0), organization.getCorporateGroupIdPrefixes().get(0));
assertTrue(filter.filter(artifact));
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertEquals(3, dependencies.size());
assertNotNull(exception);
assertNull(exception);
assertNotNull(exception);
assertNotNull(inputMessage); assertNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertNotNull(result); assertFalse(result.isHealthy());
assertTrue(filter.filter(module)); assertFalse(filter.filter(module));
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertEquals("{}", JongoUtils.generateQuery(new HashMap<String, Object>())); assertEquals("{key1: \'value1\'}", JongoUtils.generateQuery("key1", "value1")); assertEquals("{key1: 1}", JongoUtils.generateQuery("key1", 1)); assertEquals("{key1: true}", JongoUtils.generateQuery("key1", true)); assertEquals("{key1: \'value1\', key2: \'value2\'}",JongoUtils.generateQuery(sortParams));
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(getBuildInfo); assertEquals(1, getBuildInfo.size()); assertEquals("what a test!", getBuildInfo.get("test"));
assertEquals(2 + 3 - 1, results.size()); assertTrue(results.contains(makeGAVC("one_a"))); assertTrue(results.contains(makeGAVC("two_a"))); assertTrue(results.contains(makeGAVC("two_b"))); assertTrue(results.contains(makeGAVC("common_dep")));
assertEquals(3, deliveryDependencies.size()); assertTrue(deliveryDependencies.contains("a1:a2")); assertTrue(deliveryDependencies.contains("b1:b2")); assertTrue(deliveryDependencies.contains("c1:c2"));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(organization); assertEquals(1, organization.size()); assertEquals("organization1", organization.get(0));
assertTrue(dep1.equals(dep2)); assertFalse(dep1.equals(dep3)); assertFalse(dep1.equals("test"));
assertNotNull(exception);
assertNotNull(exception);
assertTrue(filter.filter(promotedModule)); assertFalse(filter.filter(notPromotedModule)); assertFalse(filter.filter(promotedModule)); assertTrue(filter.filter(notPromotedModule));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals("{\\"modules\\":null,\\"artifacts\\":[\\"testSearch_artifact_id_1\\",\\"testSearch_artifact_id_2\\"]}", results);
assertNotNull(exception);
assertEquals("123", DataUtils.getModuleVersion(":123")); assertEquals("", DataUtils.getModuleVersion("modulename:")); assertEquals("123", DataUtils.getModuleVersion("modulename:123")); assertEquals("123", DataUtils.getModuleVersion("module:name:123")); assertEquals("modulename123", DataUtils.getModuleVersion("modulename123"));
assertTrue(client.isServerAvailable());
assertTrue(filter.filter(module));
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency, dependencies.get(0));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(1, results.size());
assertNotNull(module); assertEquals("module", module.getName()); assertEquals("1.0.0-SNAPSHOT", module.getVersion()); assertFalse(module.isPromoted()); assertTrue(module.getArtifacts().isEmpty());
assertNotNull(artifact); assertNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertNull(exception);
assertEquals(0, sut.getLicenses().size());
assertNotNull(exception);
assertFalse(credential.isHealthy()); assertFalse(credential.isHealthy()); assertTrue(credential.isHealthy());
assertNotNull(response); assertEquals(HttpStatus.UNPROCESSABLE_ENTITY_422, response.getStatus()); assertEquals("Validation is not supported for this type of file", returnMessage);
assertFalse(filter.filter(module));
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.CREATED_201, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals("{\\"modules\\":[\\"testSearch_id_1\\",\\"testSearch_id_2\\"],\\"artifacts\\":[\\"testSearch_artifact_id_1\\",\\"testSearch_artifact_id_2\\"]}", results);
assertNotNull(exception);
assertFalse(filter.filter(module));
assertNull(exception); assertNotNull(encryptedPassword1); assertFalse(password.equals(encryptedPassword1)); assertNotNull(encryptedPassword2); assertEquals(encryptedPassword1, encryptedPassword2);
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus()); assertEquals(Messages.get(MessageKey.ARTIFACT_VALIDATION_NOT_KNOWN), returnMessage);
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(gotOrganization); assertEquals(GrapesTestUtils.ORGANIZATION_NAME_4TEST, gotOrganization.getName());
assertTrue(filter.filter(toBeValidatedLicense)); assertFalse(filter.filter(validatedLicense)); assertFalse(filter.filter(unvalidatedLicense)); assertFalse(filter.filter(toBeValidatedLicense)); assertTrue(filter.filter(validatedLicense)); assertTrue(filter.filter(unvalidatedLicense));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(lastVersion); assertEquals("2", lastVersion);
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(receivedVersions); assertEquals(1, receivedVersions.size()); assertEquals("1", receivedVersions.get(0));
assertNotNull(graph); assertEquals(2, graph.getElements().size()); assertEquals(2, graph.getDependencies().size());
assertFalse(versionsHandler.isUpToDate(artifact)); assertTrue(versionsHandler.isUpToDate(artifact)); assertTrue(versionsHandler.isUpToDate(artifact));
assertNull(exception); assertNotNull(receivedOrganization); assertEquals(organization, receivedOrganization);
assertNotNull(response); assertEquals(HttpStatus.NO_CONTENT_204, response.getStatus());
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency, dependencies.get(0));
assertNotNull(params); assertEquals(1, params.size()); assertEquals(DbModule.ORGANIZATION_DB_FIELD, params.keySet().iterator().next()); assertEquals(organization.getName(), params.values().iterator().next());
assertNull(exception); assertEquals("user", credential.getUser()); assertEquals(GrapesAuthenticator.encrypt("password"), credential.getPassword());
assertNotNull(exception);
assertNull(lastVersion);
assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus()); assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus()); assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus()); assertNotNull(response); assertEquals(HttpStatus.UNAUTHORIZED_401, response.getStatus());
assertNotNull(exception); assertEquals(javax.ws.rs.core.Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals(licenseName, strCaptor.getValue());
assertEquals(reply.booleanValue(), mockedReply); assertNull(exception);
assertEquals(entityId, comment.getEntityId()); assertEquals(entityType, comment.getEntityType()); assertEquals("test comment", comment.getCommentText()); assertEquals("testUser", comment.getCommentedBy());
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertEquals(1, licenseHandler.getLicenses().size());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(3, results.size());
assertNull(exception);
assertNull(exception);
assertFalse(artifact.equals(dependency));
assertNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(dbLicense); assertEquals(license.getName(), dbLicense.getName()); assertEquals(license.getLongName(), dbLicense.getLongName()); assertEquals(license.getComments(), dbLicense.getComments()); assertEquals(license.getRegexp(), dbLicense.getRegexp()); assertEquals(license.getUrl(), dbLicense.getUrl()); assertEquals(license.isApproved(), dbLicense.isApproved());
assertNotNull(gotModule); assertEquals(module, gotModule);
assertEquals(action, arg.getAction()); assertEquals(commentText, arg.getDbCommentText());
assertFalse(filter.filter(null));
assertNotNull(graph); assertEquals(5, graph.getElements().size()); assertEquals(4, graph.getDependencies().size()); assertNotNull(graph); assertEquals(1, graph.getElements().size()); assertEquals(0, graph.getDependencies().size());
assertEquals("0.1.0-SNAPSHOT", versionsHandler.getLastVersion(versions)); assertEquals("2.1.0-1", versionsHandler.getLastVersion(versions));
assertNull(exception); assertNotNull(gotVersions); assertEquals(versions.size(), gotVersions.size());
assertNotNull(exception);
assertNull(exception);
assertNotNull(dependencies); assertEquals(0, dependencies.size());
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNotNull(exception);
assertTrue(filter.filter(promotedArtifact)); assertFalse(filter.filter(notPromotedArtifact)); assertFalse(filter.filter(promotedArtifact)); assertTrue(filter.filter(notPromotedArtifact));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(gotModule); assertEquals(dbModule.getName(), gotModule.getName()); assertEquals(dbModule.getVersion(), gotModule.getVersion());
assertEquals(0, DataUtils.getAllSubmodules(module).size()); assertEquals(2, DataUtils.getAllSubmodules(module).size()); assertEquals(3, DataUtils.getAllSubmodules(module).size());
assertNotNull(dependencies); assertEquals(0, dependencies.size());
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertNull(exception); assertNotNull(result); assertTrue(result.isPresent()); assertNotNull(roles); assertTrue(roles.contains(AvailableRoles.ARTIFACT_CHECKER)); assertTrue(roles.contains(AvailableRoles.DATA_DELETER)); assertTrue(roles.contains(AvailableRoles.DATA_UPDATER)); assertTrue(roles.contains(AvailableRoles.DEPENDENCY_NOTIFIER)); assertTrue(roles.contains(AvailableRoles.LICENSE_CHECKER));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals("{\\"modules\\":null,\\"artifacts\\":null}", results);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertTrue(results);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(licenses); assertEquals(1, licenses.size()); assertEquals(modelMapper.getLicense(license), licenses.get(0));
assertNotNull(resource.getScopes()); assertNull(exception);
assertTrue(captor.getValue().getCorporateGroupIdPrefixes().contains("com.test"));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(dbModule.getName(), results.getName()); assertEquals(dbModule.getVersion(), results.getVersion());
assertNotNull(organization); assertNull(exception);
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertFalse(filter.filter(null));
assertEquals("", DataUtils.getModuleName(":123")); assertEquals("modulename", DataUtils.getModuleName("modulename:")); assertEquals("modulename", DataUtils.getModuleName("modulename:123")); assertEquals("module", DataUtils.getModuleName("module:name:123")); assertEquals("modulename123", DataUtils.getModuleName("modulename123"));
assertNotNull(exception);
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertEquals(DbCollections.DB_PRODUCT, nameCaptor.getValue()); assertEquals("{\'deliveries.0\' : {$exists: true}}", queryCaptor.getValue()); assertEquals(DbProduct.class, classCaptor.getValue());
assertNotNull(artifact); assertEquals("com.my.company", artifact.getGroupId()); assertEquals("artifact", artifact.getArtifactId()); assertEquals("1.0.0-SNAPSHOT", artifact.getVersion()); assertEquals("jar", artifact.getType()); assertEquals("win32", artifact.getClassifier()); assertFalse(artifact.isPromoted());
assertTrue(filter.filter(filterModules)); assertFalse(filter.filter(filterArtifacts)); assertTrue(filter.filter(filterArtifacts)); assertFalse(filter.filter(filterModules)); assertFalse(filter.filter(filterArtifacts)); assertFalse(filter.filter(filterModules));
assertNotNull(graph); assertEquals(5, graph.getElements().size()); assertEquals(4, graph.getDependencies().size()); assertNull(subModule);
assertEquals(3, dependencies.size());
assertNotNull(dependencies); assertEquals(0, dependencies.size());
assertNotNull(gotLicense); assertEquals(license, gotLicense);
assertTrue(filter.filter(module));
assertNull(organization);
assertNotNull(gotProduct); assertEquals(product, gotProduct);
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertTrue(byId.isPresent());
assertNull(exception); assertNotNull(promotionStatus); assertTrue(promotionStatus);
assertNotNull(graph); assertEquals(1, graph.getElements().size()); assertEquals(TC01_ModuleWithOneArtifactWithoutDependency.MODULE_NAME, graph.getElements().get(0).getValue()); assertEquals(TC01_ModuleWithOneArtifactWithoutDependency.MODULE_VERSION, graph.getElements().get(0).getVersion()); assertEquals(true, graph.getElements().get(0).isRoot()); assertEquals(0, graph.getDependencies().size());
assertEquals(null, exception); assertEquals(null, resolvedLicense);
assertNotNull(params); assertEquals(1, params.size()); assertEquals(DbArtifact.GROUPID_DB_FIELD, params.keySet().iterator().next()); assertEquals(GrapesTestUtils.CORPORATE_GROUPID_4TEST + "*|my.corporate.gid*", params.values().iterator().next().toString());
assertNull(exception); assertNotNull(result); assertFalse(result.isPresent()); assertNull(exception); assertNotNull(result); assertFalse(result.isPresent()); assertNull(exception); assertNotNull(result); assertFalse(result.isPresent());
assertNotNull(generatedSHA256); assertEquals(sha256, generatedSHA256);
assertEquals(3, artifacts.size()); assertTrue(artifacts.contains(artifact1)); assertTrue(artifacts.contains(artifact2)); assertTrue(artifacts.contains(artifact3));
assertNotNull(exception);
assertFalse(filter.filter(module));
assertNotNull(exception);
assertNotNull(exception);
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertEquals(GrapesTestUtils.ORGANIZATION_NAME_4TEST, gotOrganization.getName());
assertNull(exception);
assertFalse(filter.filter(null)); assertFalse(filter.filter(null));
assertNotNull(exception);
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNull(organization);
assertNotNull(exception);
assertNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(exception);
assertNull(exception);
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency1, dependencies.get(0));
assertFalse(filter.filter(null));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals(product.getName(), captor.getValue());
assertNotNull(exception);
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertNotNull(response); assertEquals(HttpStatus.SEE_OTHER_303, response.getStatus());
assertFalse(filter.filter(null));
assertNotNull(dependencies); assertEquals(1, dependencies.size()); assertEquals(dependency, dependencies.get(0));
assertNull(exception);
assertNull(exception);
assertNotNull(exception);
assertNotNull(license); assertNull(exception);
assertNotNull(versions); assertEquals(1, versions.size()); assertEquals(module.getVersion(), versions.get(0));
assertTrue(filter.filter(license)); assertFalse(filter.filter(license2));
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNull(exception);
assertEquals("Got fewer results 3 < 4", allValues.get(0)); assertEquals("There are referred dependencies not related to known artifacts", allValues.get(1));
assertNotNull(exception); assertEquals(Response.Status.NOT_FOUND.getStatusCode(), exception.getResponse().getStatus());
assertNull(exception); assertNotNull(artifacts); assertEquals(1, artifacts.size());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertFalse(captor.getValue().getCorporateGroupIdPrefixes().contains("org.test"));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(1, results.size()); assertEquals(dbArtifact.getGavc(), results.get(0).getTarget().getGavc()); assertEquals(Scope.COMPILE, results.get(0).getScope()); assertEquals(dbModule.getName(), results.get(0).getSourceName()); assertEquals(dbModule.getVersion(), results.get(0).getSourceVersion());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertEquals("com.my.company:test:1.0.0-SNAPSHOT:lin64:jar:jar:maven", artifact.toString());
assertNull(exception); assertNotNull(lastVersion); assertEquals("1.0.0", lastVersion);
assertTrue(filter.filter(artifactWithLicense)); assertFalse(filter.filter(artifactWithoutLicense)); assertFalse(filter.filter(artifactWithLicense)); assertTrue(filter.filter(artifactWithoutLicense));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertEquals(1, results.size()); assertEquals(moduleVersion, results.get(0));
assertNull(exception); assertNotNull(list2);
assertEquals(entityId, dbComment.getEntityId()); assertEquals(entityType, dbComment.getEntityType()); assertEquals("test comment", dbComment.getDbCommentText()); assertEquals("test action", dbComment.getAction()); assertEquals("testUser", dbComment.getDbCommentedBy());
assertNull(exception); assertNotNull(license2); assertEquals(license1, license2);
assertFalse(testFile.exists()); assertTrue(testFile.exists()); assertNotNull(realContent); assertEquals(content, realContent);
assertFalse(result.isPresent());
assertEquals(moduleNames, captor.getValue().getModules());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(licenses); assertEquals(1, licenses.size()); assertEquals("licenseId", licenses.get(0));
assertNull(exception);
assertFalse(filter.filter(null));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(organization); assertEquals(dbOrganization.getName(), organization.getName()); assertEquals(1, organization.getCorporateGroupIdPrefixes().size()); assertEquals(dbOrganization.getCorporateGroupIdPrefixes().get(0), organization.getCorporateGroupIdPrefixes().get(0));
assertNotNull(exception);
assertNull(exception);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertEquals(dbOrganization.getName(), captor.getValue());
assertNull(exception); assertNotNull(isPromulgable); assertTrue(isPromulgable);
assertNotNull(response); assertEquals(HttpStatus.BAD_REQUEST_400, response.getStatus()); assertTrue(entity.contains("provide at least one artifact filtering criteria"));
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertFalse(results); assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus()); assertNotNull(results); assertTrue(results);
assertFalse(result.isPresent());
assertEquals(license.getName(), dbLicense.getName()); assertEquals(license.getLongName(), dbLicense.getLongName()); assertEquals(license.getComments(), dbLicense.getComments()); assertEquals(license.getRegexp(), dbLicense.getRegexp()); assertEquals(license.getUrl(), dbLicense.getUrl());
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertFalse(d.getShowCorporate()); assertTrue(d.getShowThirdparty());
assertFalse(versionsHandler.isUpToDate(artifact)); assertTrue(versionsHandler.isUpToDate(artifact)); assertTrue(versionsHandler.isUpToDate(artifact));
assertNotNull(response); assertEquals(HttpStatus.NO_CONTENT_204, response.getStatus());
assertEquals(license, licenseHandler.resolve(license.getName()));
assertEquals("http: grapesClient = new GrapesClient("host", ""); assertEquals("http: grapesClient = new GrapesClient("host", "12345");
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertNotNull(gotModule); assertEquals(module, gotModule); assertNull(exception);
assertTrue(filter.filter(artifact)); assertFalse(filter.filter(artifact));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertFalse(filter.filter(module));
assertNotNull(exception);
assertNotNull(licenses); assertEquals(1, licenses.size()); assertEquals(license, licenses.get(0));
assertNotNull(gotOrganization); assertEquals(organization, gotOrganization);
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(exception);
assertTrue(filters.getDepthHandler().shouldGoDeeper(0)); assertFalse(filters.getDepthHandler().shouldGoDeeper(1)); assertTrue(filters.getDepthHandler().shouldGoDeeper(1)); assertFalse(filters.getDepthHandler().shouldGoDeeper(2)); assertTrue(filters.getDepthHandler().shouldGoDeeper(20));
assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus());
assertEquals("2.1.0-1", versionsHandler.getLastRelease(versions));
assertNull(exception); assertNotNull(receivedVersions); assertEquals(1, receivedVersions.size()); assertEquals("1.0.0", receivedVersions.get(0));
assertNotNull(exception);
assertNotNull(exception);
assertNotNull(gotArtifact); assertEquals(artifact, gotArtifact);
assertNotNull(response); assertEquals(HttpStatus.OK_200, response.getStatus());
assertTrue(filter.filter(module)); assertFalse(filter.filter(module));
assertFalse(captor.getValue().getCorporateGroupIdPrefixes().contains("org.test"));
assertNull(exception); assertNotNull(artifact2); assertEquals(artifact1, artifact2);
assertNull(exception);
assertFalse(filter.filter(null));
assertFalse(filter.filter(dependency));
assertNotNull(result); assertFalse(result.isHealthy());
assertNotNull(response); assertEquals(HttpStatus.CREATED_201, response.getStatus());
assertNotNull(exception);
assertEquals("/user/blog/sex/_layout_.vm|/user/blog/_layout_.vm|/user/_layout_.vm|/_layout_.vm",result); assertEquals("/user/blog/_layout_.vm|/user/_layout_.vm|/_layout_.vm",result); assertEquals("user/blog/_layout_.vm|user/_layout_.vm|_layout_.vm",result); assertEquals("/user/blog/_layout_.vm|/user/_layout_.vm|/_layout_.vm",result);
assertEquals("/anthem/fep/icr"+configUri, out);
assertSame(2, entries.size()); assertEquals("<!../testParam!>", iter.next()); assertEquals("<!../testParam2!>", iter.next());
assertNotNull(cmd); assertThat(buildUri).isEqualTo("/client_xyz/app_abc/p/domainRoot_alias/nestedDomain/abc/_new?b=$execute");
assertFalse(result);
assertTrue(result);
assertFalse(result);
assertSame(2, entries.size()); assertEquals("<!../.m/<!/id!>/another/<!path4!>/path3!>", iter.next()); assertEquals("<!/path2!>", iter.next());
assertTrue(result);
assertSame(2, entries.size()); assertEquals("<!/id!>", iter.next()); assertEquals("<!/path2!>", iter.next());
assertSame(3, entries.size()); assertEquals("<!p1!>", iter.next()); assertEquals("<!../p2/<!../p3!>/p4!>", iter.next()); assertEquals("<!p100/someB/<!../p5/someA/!>/xyz/<!p6!>/someC!>", iter.next());
assertTrue(result);
assertFalse(result);
assertEquals("/anthem/fep/icr/p/umcase_view:100"+configUri, out);
assertSame(Locale.getDefault(), Content.getLocale(l));
assertEquals("/anthem/fep/icr/p/umcase_view:100/pageCreateCaseInfo/tileCreateCaseInfo/sectionUMCaseInfo/formUMCaseInfo/_get?b=$executeAnd$nav", cmd.toUri());
assertFalse(result);
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("client",cmd.getRootClientAlias()); assertEquals("app", cmd.getAppAlias()); assertEquals("/flow_client-user", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertNotNull(cmd); assertSame(Action._process, cmd.getAction()); assertEquals("/flow_umcase/_findPatient", cmd.getAbsoluteDomainAlias()); assertEquals("/_findPatient", cmd.getProcessAlias()); assertEquals(Long.valueOf("10"), cmd.getRefId(Type.ProcessAlias).getId()); assertFalse(cmd.isRootDomainOnly());
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("client",cmd.getRootClientAlias()); assertEquals("app", cmd.getAppAlias()); assertEquals("/flow_client-user", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("anthem", cmd.getRootClientAlias()); assertEquals("flow_umcase", cmd.getRootDomainAlias()); assertEquals("/flow_umcase", cmd.getAbsoluteDomainAlias()); assertEquals("icr", cmd.getAppAlias()); assertTrue(cmd.isRootDomainOnly());
assertFalse(result);
assertEquals(configUri, out);
assertEquals("/anthem/fep/icr"+configUri, out);
assertEquals("/anthem/fep/icr/p/umcase_view:100/pageCreateCaseInfo/tileCreateCaseInfo/sectionUMCaseInfo/formUMCaseInfo/_get/someEvent?b=$execute", cmd.toUri());
assertThat(cmd.getRequestParams().size()).isEqualTo(cmd2.getRequestParams().size());
assertEquals(new Locale("hi", "IN"), Content.getLocale(l));
assertNotNull(cmd); assertSame(Action._update, cmd.getAction()); assertEquals("anthem", cmd.getRootClientAlias()); assertEquals("flow_umcase", cmd.getRootDomainAlias()); assertEquals(Long.valueOf("123"), cmd.getRootDomainElement().getRefId().getId()); assertEquals("/flow_umcase/pg1/caseInfo/requestType", cmd.getAbsoluteDomainAlias()); assertEquals("icr", cmd.getAppAlias()); assertFalse(cmd.isRootDomainOnly());
assertTrue(result);
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("/flow_client-user", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertFalse(result);
assertThat(cmd.getRequestParams().size()).isLessThan(cmd2.getRequestParams().size());
assertNotNull(cmd); assertSame(Action._search, cmd.getAction()); assertEquals("anthem", cmd.getRootClientAlias()); assertEquals("member", cmd.getRootDomainAlias()); assertEquals("/member/addr", cmd.getAbsoluteDomainAlias()); assertEquals("icr", cmd.getAppAlias());
assertSame(1, entries.size()); assertEquals("<!../<!../testParam2!>abc!>", iter.next());
assertSame(Locale.ENGLISH, Content.getLocale(l));
assertFalse(result);
assertNotNull(expression);
assertEquals("/anthem/fep/icr/p/umcase_view"+configUri, out);
assertNotEquals(cmd, cloned); assertEquals(cmd.getAbsoluteUri(), cloned.getAbsoluteUri()); assertEquals(cmd.getAction(), cloned.getAction()); assertEquals(cmd.getEvent(), cloned.getEvent()); assertEquals(cmd.getBehaviors(), cloned.getBehaviors()); assertEquals(cmd.getClientUserId(), cloned.getClientUserId()); assertNotNull(cloned.getRoot());
assertTrue(result);
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("/flow_userrole", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertEquals("/anthem/fep/icr/p/umcase_view:100/pageCreateCaseInfo/tileCreateCaseInfo/sectionUMCaseInfo/formUMCaseInfo/_get?b=$execute", cmd.toUri());
assertTrue(result);
assertNotNull(expression);
assertTrue(result);
assertSame(Locale.US, Content.getLocale(l));
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("client",cmd.getRootClientAlias()); assertEquals("app", cmd.getAppAlias()); assertEquals("/flow_client-user", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertTrue(result);
assertEquals(Locale.getDefault(), Content.getLocale(l));
assertNotNull(cmd); assertSame(Action._new, cmd.getAction()); assertEquals("/flow_client-user", cmd.getAbsoluteDomainAlias()); assertTrue(cmd.isRootDomainOnly());
assertTrue(result);
assertSame(Locale.US, Content.getLocale(l));
assertSame(Locale.FRENCH, Content.getLocale(l));
assertNotNull(expression);
assertEquals(Locale.getDefault(), Content.getLocale(l));
assertThat(fileContext.getRes()) .isEqualTo(INDENT + "String name();" + LINE_SEPARATOR);
assertThat(fileContext.getRes()).isEqualTo("");
assertThat(fileContext.getRes()).isEqualTo(type.isArray() ? "Name[]" : "Name");
assertThat(daType.getKind()).isEqualTo(DATypeKind.WILDCARD); assertThat(daType.getSimpleName()).isEqualTo(DANameFactory.wildcard()); assertThat(daType.getExtendsBound()).isSameAs(extendsBound);
assertThat(fileContext.getRes()).isEqualTo("(param)");
assertThat(DANameFactory.voidDAName().getName()).isEqualTo("void");
assertThat(new ImportListBuilder().getImports("com.acme")).isEmpty(); assertThat(new ImportListBuilder().getImports("")).isEmpty(); assertThat(new ImportListBuilder().getImports("acme")).isEmpty();
assertThat(daName.getName()).isEqualTo(typeKind.name().toLowerCase(Locale.US));
assertThat(classWriter.end()).isSameAs(parent);
assertThat(DANameFactory.from(TOTO).getName()).isEqualTo(TOTO);
assertThat(daType.getKind()).isEqualTo(DATypeKind.VOID); assertThat(daType.getSimpleName()).isEqualTo(DANameFactory.voidDAName());
assertThat(fileContext.getRes()).isEqualTo("(param1, param2)");
assertThat(classWriter.write()).isSameAs(parent);
assertThat(classWriter.end()).isSameAs(parent);
assertThat(classWriter.end()).isSameAs(parent);
assertThat(fileContext.getRes()).isEqualTo(type.isArray() ? "com.acme.Name[]" : "com.acme.Name");
assertThat(fileContext.getRes()).isEqualTo( "@javax.annotation.Generated(\\"" + MyProcessor.class.getCanonicalName() + "\\")" + LINE_SEPARATOR );
assertThat(daType.getKind()).isEqualTo(DATypeKind.DECLARED); assertThat(daType.getSimpleName().getName()).isEqualTo(getClass().getSimpleName()); assertThat(daType.getQualifiedName().getName()).isEqualTo(getClass().getCanonicalName()); assertThat(daType.getTypeArgs()).isEmpty();
assertThat(fileContext.getRes()).isEqualTo( "package com.acme.toto;" + LINE_SEPARATOR + LINE_SEPARATOR );
assertThat(daType.getKind()).isEqualTo(DATypeKind.DECLARED); assertThat(daType.getSimpleName().getName()).isEqualTo("Toto"); assertThat(daType.getQualifiedName().getName()).isEqualTo("com.acme.Toto"); assertThat(daType.getTypeArgs()).isEmpty();
assertThat(DANameFactory.simpleFromQualified(DANameFactory.from(TOTO)).getName()).isEqualTo(TOTO); assertThat(DANameFactory.simpleFromQualified(DANameFactory.from("a." + TOTO)).getName()).isEqualTo(TOTO); assertThat(DANameFactory.simpleFromQualified(DANameFactory.from("d.b.a." + TOTO)).getName()).isEqualTo(TOTO);
assertThat(fileContext.getRes()).isEqualTo( "@javax.annotation.Generated(\\"" + MyProcessor.class.getCanonicalName() + "\\")" + LINE_SEPARATOR );
assertThat(JavaxDANameFactory.from(mock).getName()).isEqualTo(TOTO);
assertThat(daType.getKind()).isEqualTo(DATypeKind.DECLARED); assertThat(daType.getSimpleName().getName()).isEqualTo("Toto"); assertThat(daType.getQualifiedName().getName()).isEqualTo("com.acme.Toto"); assertThat(daType.getTypeArgs()).isEqualTo(typeArgs);
assertThat(DANameFactory.wildcard().getName()).isEqualTo("?");
assertThat(daType.getKind()).isEqualTo(DATypeKind.DECLARED); assertThat(daType.getSimpleName().getName()).isEqualTo("Toto"); assertThat(daType.getQualifiedName().getName()).isEqualTo("Toto"); assertThat(daType.getTypeArgs()).isEmpty();
assertThat(fileContext.getRes()).isEqualTo("()");
assertThat(fileContext.getRes()).isEqualTo(type.isArray() ? "Name[]" : "Name");
assertThat(fileContext.getRes()).isEqualTo("");
assertThat(fileContext.getRes()).isEqualTo(type.isArray() ? "Name[]" : "Name");
assertThat(fileContext.getRes()).isEqualTo("");
assertThat(daType.getKind()).isEqualTo(DATypeKind.WILDCARD); assertThat(daType.getSimpleName()).isEqualTo(DANameFactory.wildcard()); assertThat(daType.getSuperBound()).isSameAs(superBound);
assertTrue(a.getMessage().contains("[\\"test1\\", \\"test2\\"]")); assertTrue(a.getMessage().contains("[1, 2]"));
assertTrue(multiKey.equals(multiKey));
assertFalse(compositeKey.equals("1"));
assertFalse(multiKey.equals(anotherMultiKey));
assertFalse(multiKey.equals(anotherMultiKey));
assertFalse(multiKey.equals(null));
assertFalse(compositeKey.equals(null));
assertFalse(multiKey.equals("a"));
assertTrue(compositeKey.equals(compositeKey));
assertEquals(0.0, s.f(0), 0.0);
assertEquals(0.5, c.f(1), 0.0);
assertEquals(0.0, c.f(0), 0.0);
assertTrue(sampler.trace());
assertEquals("Failed to add new SpanSink, concurrent add", caught.poll(5000, TimeUnit.MILLISECONDS).getMessage()); assertTrue(sinks + " < " + totalAdds + "?", totalAdds > sinks);
assertTrue(SpanHelper.captureSpans().isEmpty());
assertFalse(sampler.trace());
assertTrue(SpanHelper.captureSpans().isEmpty());
assertEquals(1, registeredSinks.size()); assertTrue(registeredSinks.get(0) instanceof AsynchronousSpanSink);
assertNull(Sampling.valueOf(null)); assertNull(Sampling.valueOf("unknown")); assertEquals(Sampling.ON, Sampling.valueOf("on")); assertEquals(Sampling.ON, Sampling.valueOf("ON")); assertEquals(Sampling.ON, Sampling.valueOf("oN")); assertEquals(Sampling.OFF, Sampling.valueOf("off")); assertEquals(Sampling.OFF, Sampling.valueOf("OFF")); assertEquals(Sampling.OFF, Sampling.valueOf("oFf"));
assertEquals(2, spans.size()); assertEquals(Optional.<BigInteger>absent(), spans.get(0).getParentSpanId()); assertEquals(Optional.<BigInteger>absent(), spans.get(1).getParentSpanId());
assertEquals("example", Annotations.getServiceAnnotations().getService());
assertFalse(SpanSinkRegistry.getSpanSinks().iterator().hasNext());
assertEquals(Sampling.ON, SpanHelper.getSampler()); assertEquals(Sampling.OFF, SpanHelper.getSampler());
assertThat(myService.message()).isNotNull();
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.USAGE); assertThat(ret.getOptions()).isNull();
assertThat(ret.isExit()).isFalse(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(options).isNotNull(); assertThat(options.docServiceEnabled()).isTrue(); assertThat(options.port()).isEqualTo(8080); assertThat(options.configFilePath()).isEqualTo("path/to/config");
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(ret.getOptions()).isNull();
assertThat(Configuration.persistentStorageDirectory()).isEqualTo(System.getProperty("user.dir")); assertThat(Configuration.persistentStorageDirectory()).isEqualTo(System.getProperty("user.dir"));
assertThat(res.isBoolean()).isTrue(); assertThat(res.asBoolean()).isFalse(); assertThat(testingFilter.mightContain(testingValue)).isTrue();
assertThat(iter.hasNext()).isTrue();
assertThat(filterUpdateTimesCounter.sum()).isZero();
assertThat(stream.nextFilterRecord()).isEqualTo(new FilterRecord<>(testingFilterName, filter));
assertThat(filterA).isEqualTo(filterB);
assertThat(stream.nextFilterRecord()).isEqualTo(expectRecord); assertThat(stream.nextFilterRecord()).isNull();
assertThat(manager.getAllFilterNames()).containsExactlyInAnyOrderElementsOf(expectFilterNames);
assertThat(Crc32C.compute(bytes, 0, bytes.length)).isEqualTo(608512271);
assertThat(filterA.hashCode()).isEqualTo(filterB.hashCode());
assertThat(events.size()).isZero();
assertThat(filterUpdateTimesCounter.sum()).isZero();
assertThat(crc1.getValue()).isEqualTo(crc2.getValue()); assertThat(crc1.getValue()).isEqualTo(crc3.getValue());
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.USAGE); assertThat(ret.getOptions()).isNull();
assertThat(res.status()).isEqualTo(HttpStatus.OK);
assertThat(ret.isExit()).isFalse(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(options).isNotNull(); assertThat(options.docServiceEnabled()).isTrue(); assertThat(options.port()).isEqualTo(8080); assertThat(options.configFilePath()).isEqualTo("path/to/config");
assertThat(stream.nextFilterRecord()).isEqualTo(expectRecord); assertThat(stream.nextFilterRecord()).isNull();
assertThat(manager.size()).isZero();
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(ret.getOptions()).isNull();
assertThat(res.get(i).textValue()).isEqualTo(expectedNames.get(i));
assertThat(node.asBoolean()).isFalse();
assertThat(firstCreateFilterResult.isCreated()).isTrue(); assertThat(secondCreateFilterResult.isCreated()).isTrue();
assertThat(filterUpdateTimesCounter.sum()).isEqualTo(5);
assertThat(manager.getFilter(testingFilterName)).isSameAs(filter); assertThat(manager.getFilter(testingFilterName)).isNull();
assertThat(manager.size()).isEqualTo(expectSize);
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(ret.getOptions()).isNull();
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.USAGE); assertThat(ret.getOptions()).isNull();
assertThat(options.configFilePath()).isEqualTo(configFilePath); assertThat(options.port()).isEqualTo(port); assertThat(options.docServiceEnabled()).isTrue();
assertThat(res.asBoolean()).isFalse(); assertThat(testingFilter.mightContain(testingValue)).isFalse();
assertThat(filter.expired()).isFalse(); assertThat(filter.expired()).isTrue();
assertThat(filterA.hashCode()).isEqualTo(filterB.hashCode());
assertThat(filterUpdateTimesCounter.sum()).isZero(); assertThat(wrapper.set(testingValue)).isFalse(); assertThat(filterUpdateTimesCounter.sum()).isEqualTo(1);
assertThat(filter).isEqualTo(expectedFilter);
assertThat(filterUpdateTimesCounter.sum()).isZero();
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.USAGE); assertThat(ret.getOptions()).isNull();
assertThat(manager.getFilter(testingFilterName)).isNull();
assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(ret.getOptions()).isNull();
assertThat(filter.mightContain(testingValue)).isFalse(); assertThat(filter.set(testingValue)).isTrue(); assertThat(filter.mightContain(testingValue)).isTrue();
assertThat(res.isArray()).isTrue(); assertThat(mightContain.isBoolean()).isTrue(); assertThat(mightContain.asBoolean()).isFalse(); assertThat(testingFilter.mightContain(value)).isTrue();
assertThat(filterA).isEqualTo(filterB);
assertThat(filter).isEqualTo(expectedFilter);
assertThat(filter.expired()).isTrue(); assertThat(manager.getFilter(testingFilterName)).isSameAs(filter); assertThat(manager.getFilter(testingFilterName)).isNull();
assertEquals(server.answer("what is your name"), "spark team");
assertEquals(server.answer("what is the sum of 14 and 4"), "18");
assertEquals(server.answer(null), "team name");
assertEquals(server.answer(null), "spark team");
assertEquals(server.answer("what is the sum of 4 and 12"), "16");
assertThat(result).containsExactly("1", "1", "1", "1");
assertThat(result).containsExactly("2", "2", "2", "2");
assertThat(msg.getObject()).isEqualTo(id); assertThat(msg.getDest()).isEqualTo(address); assertThat(options.getMode()).isEqualTo(ResponseMode.GET_ALL);
assertThat(result).containsExactly("1", "2", "1", "2");
assertThat(objects) .isNotNull() .isEmpty();
assertThat(msg.getObject()).isEqualTo(id); assertThat(msg.getDest()).isEqualTo(address); assertThat(options.getMode()).isEqualTo(ResponseMode.GET_NONE);
assertThat(msg.getObject()).isEqualTo(id); assertThat(msg.getDest()).isNull(); assertThat(options.getMode()).isEqualTo(ResponseMode.GET_ALL); assertThat(addresses).isEmpty();
assertNotNull(context); assertNotNull(context.getSecurityGroupApi());
assertTrue(uploadSuccessful);
assertTrue(cleanupSuccessful);
assertNotNull(contextBuilder);
assertTrue(cleanupSuccessful);
assertFalse(cleanupSuccessful);
assertEquals("10", groupId);
assertFalse(uploadSuccessful);
assertTrue(uploadSuccessful);
assertFalse(loaded);
assertEquals(30123, config.getInt("peer.listen.port")); assertEquals(Boolean.TRUE, config.getBoolean("sync.enabled"));
assertTrue(fullCheckTriggered); assertTrue(partialCheckTriggered); assertNotEquals(Success, rule.validate(partlyValidHeader));
assertFalse(config.acceptTransactionSignature(tx));
assertSame(instance.getBit(i), false);
assertEquals(Arrays.areEqual(expected, result), true); assertEquals(expected, result); assertEquals(expected, result); assertEquals(expected, result);
assertEquals(expected_1, Hex.toHexString(header)); assertEquals(expected_2, Hex.toHexString(header)); assertEquals(expected_3, Hex.toHexString(header));
assertEquals(expected, result);
assertEquals(BigInteger.valueOf(8126464), difficulty); assertEquals(BigInteger.valueOf(8396800), difficulty);
assertArrayEquals("odd compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertArrayEquals(expected, data); assertArrayEquals(expected2, data); assertArrayEquals(expected3, data); assertArrayEquals(expected4, data); assertArrayEquals(expected5, data);
assertEquals(61, (int) etcFork3M.getChainId());
assertTrue(nodeIdPropertiesFile.exists()); assertEquals(4, lines.length); assertTrue(lines[0].startsWith("#Generated NodeID.")); assertTrue(lines[1].startsWith("#")); assertTrue(lines[2].startsWith("nodeIdPrivateKey=" + expectedNodePrivateKey)); assertTrue(lines[3].startsWith("nodeId=" + expectedNodeId));
assertFalse(messageRoundtrip.hasToRetry());
assertTrue(wrapper1.equals(wrapper2)); assertFalse(wrapper1.equals(wrapper3)); assertFalse(wrapper1.equals(wrapper4)); assertFalse(wrapper1.equals(null)); assertFalse(wrapper2.equals(wrapper3));
assertArrayEquals(new byte[]{0x00}, actuals);
assertArrayEquals("odd terminated compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertFalse("Expected values not to be equal", val1.cmp(val2)); assertTrue("Expected values to be equal", val3.cmp(val4));
assertTrue(config.getGasCost() instanceof Eip160HFConfig.GasCostEip160HF); assertEquals(50, config.getGasCost().getEXP_BYTE_GAS());
assertEquals(instance.getK(), 7); assertEquals(expResult, result, 0.000009); assertEquals(instance.getK(), 7); assertEquals(expResult, result, 0.000009); assertEquals(1, instance.getK()); assertEquals(expResult, result, 0.0005); assertEquals(8, instance.getK()); assertEquals(expResult, result, 0.00001);
assertEquals(32, y.getData().length); assertEquals("0000000000000000000000010000000000000000000000000000000000000000", Hex.toHexString(y.getData()));
assertEquals("fe", val.toString()); assertEquals("fe", Hex.toHexString(val.asBytes()));
assertTrue(actualDifficultyOnEtherscan.compareTo(minimumDifficulty) > -1);
assertEquals(2, activePeers.size());
assertEquals(0, n0); assertEquals(5, n1); assertEquals(7, n2); assertEquals(8, n3); assertEquals(0, n4); assertEquals(3, n5); assertEquals(19, n6); assertEquals(64, n7);
assertEquals(30145, config.getInt("peer.listen.port"));
assertArrayEquals(Hex.decode(address), key.getAddress());
assertArrayEquals(new byte[]{(byte) 0x80}, actuals);
assertEquals("", ByteUtil.toHexString(null));
assertEquals(100, helper.preCacheCounter);
assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey4)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey5)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey6));
assertEquals(expected, result);
assertEquals(Success, rule.validate(validHeader)); assertEquals(Success, rule.validate(partlyValidHeader)); assertNotEquals(Success, rule.validate(invalidHeader));
assertEquals(expected, Hex.toHexString(encoderesult)); assertEquals(test, new BigInteger(1, decodeResult));
assertArrayEquals(expected1, ByteUtil.stripLeadingZeroes(test1)); assertArrayEquals(expected2, ByteUtil.stripLeadingZeroes(test2)); assertArrayEquals(expected3, ByteUtil.stripLeadingZeroes(test3)); assertArrayEquals(expected4, ByteUtil.stripLeadingZeroes(test4)); assertArrayEquals(expected5, ByteUtil.stripLeadingZeroes(test5));
assertFalse(blockLoader.loadBlocks());
assertTrue(outputFile.exists()); assertEquals(4, lines.length); assertTrue(lines[0].startsWith("#Generated NodeID.")); assertTrue(lines[1].startsWith("#")); assertTrue(lines[2].startsWith("nodeIdPrivateKey=")); assertEquals("nodeIdPrivateKey=".length() + 64, lines[2].length()); assertTrue(lines[3].startsWith("nodeId=")); assertEquals("nodeId=".length() + 128, lines[3].length());
assertFalse(isIn20PercentRange(BigInteger.ONE, BigInteger.valueOf(5))); assertTrue(isIn20PercentRange(BigInteger.valueOf(5), BigInteger.ONE)); assertTrue(isIn20PercentRange(BigInteger.valueOf(5), BigInteger.valueOf(6))); assertFalse(isIn20PercentRange(BigInteger.valueOf(5), BigInteger.valueOf(7)));
assertArrayEquals(Hex.decode("fffffffffffffffe"), actuals); assertArrayEquals(Hex.decode("0000000000000002"), actuals); assertArrayEquals(Hex.decode("0000000000000000"), actuals); assertArrayEquals(Hex.decode("00eeeeeeeeeeeeee"), actuals); assertArrayEquals(Hex.decode("eeeeeeeeeeeeeeee"), actuals);
assertEquals(abi.size(), 1); assertEquals(onlyFunc.type, Type.function); assertEquals(onlyFunc.inputs.size(), 1); assertEquals(onlyFunc.outputs.size(), 1); assertTrue(onlyFunc.payable); assertTrue(onlyFunc.constant);
assertEquals("c0", Hex.toHexString(setEncoded));
assertTrue(dump.startsWith("{")); assertTrue(dump.endsWith("}")); assertTrue(dump.length() > 5 * 1024); assertTrue(StringUtils.countOccurrencesOf(dump, "{") > 50); assertTrue(StringUtils.countOccurrencesOf(dump, "{") > 50);
assertEquals(expected, Hex.toHexString(acct.getEncoded()));
assertEquals(expected1, ByteUtil.numBytes(test1)); assertEquals(expected2, ByteUtil.numBytes(test2)); assertEquals(expected3, ByteUtil.numBytes(test3));
assertFalse(config.acceptTransactionSignature(txWithoutSignature));
assertEquals(decode.getClass(), BigInteger.class); assertEquals(expectedBigInteger, actualBigInteger);
assertEquals(1, instance.getK()); assertEquals(2, instance.getK()); assertEquals(3, instance.getK()); assertEquals(3, instance.getK()); assertEquals(4, instance.getK()); assertEquals(5, instance.getK()); assertEquals(6, instance.getK()); assertEquals(6, instance.getK()); assertEquals(7, instance.getK()); assertEquals(8, instance.getK()); assertEquals(8, instance.getK());
assertEquals("3a6de614", Hex.toHexString(topic.getBytes()));
assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey1)); assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey2)); assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey3));
assertEquals(262_400, differenceWithoutExplosion); assertEquals(524_288, differenceWithoutExplosion); assertEquals(268_697_600, differenceWithoutExplosion);
assertArrayEquals("odd terminated compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertTrue(config.acceptTransactionSignature(tx));
assertEquals(0, result);
assertEquals(BigInteger.valueOf(63_000), createGas.value());
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertEquals(BigInteger.valueOf(276582400), difficulty); assertEquals(BigInteger.valueOf(276828160), difficulty);
assertEquals(result, ByteUtil.nibblesToPrettyString(test));
assertEquals(32, y.getData().length); assertEquals(expected, Hex.toHexString(actual.getData()));
assertTrue(loaded);
assertTrue(key.isPubKeyCanonical()); assertTrue(key.isPubKeyOnly()); assertArrayEquals(key.getPubKey(), pubKey);
assertArrayEquals(new byte[]{(byte) 0x01}, actuals);
assertTrue(expected == result); assertTrue(expected == result); assertTrue(expected == result); assertTrue(expected == result); assertTrue(expected == result); assertTrue(expected == result);
assertEquals(61, chainId.intValue());
assertArrayEquals(expecteds, actuals);
assertEquals(-1, result);
assertEquals(new BigInteger("3000000000000000000"), byzantiumConfig.getConstants().getBLOCK_REWARD());
assertEquals(32, x.getData().length); assertEquals("0000000000000000000000000000000000000000000000000000000000000014", Hex.toHexString(actual.getData()));
assertEquals(0, result);
assertArrayEquals("even terminated compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertEquals(100, helper.preCacheCounter);
assertEquals(SyncQueueIfc.ValidatedHeaders.Empty, queue.validateChain(longestChain)); assertFalse(ret.isValid()); assertArrayEquals(nodeId, ret.getNodeId()); assertEquals(SyncQueueIfc.ValidatedHeaders.Empty, ret);
assertArrayEquals(new byte[]{(byte) 0xc0}, actuals);
assertEquals(BigInteger.valueOf(537_001_984), etcFork3M.calcDifficulty(current, parent)); assertEquals(BlockHeaderBuilder.parse("2,148,139,072"), etcFork3M.calcDifficulty(current, parent));
assertArrayEquals("even compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertEquals(1, result);
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertEquals(expected, result);
assertEquals(-2, byzantiumConfig.getExplosion(beforePauseBlock, null)); assertEquals(-2, byzantiumConfig.getExplosion(endOfIceAge, null)); assertEquals(0, byzantiumConfig.getExplosion(startExplodingBlock, null)); assertEquals(8, byzantiumConfig.getExplosion(startExplodingBlock, null)); assertEquals(28, byzantiumConfig.getExplosion(startExplodingBlock, null));
assertArrayEquals(expecteds, actuals);
assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals); assertArrayEquals(expected, actuals);
assertEquals(0, result);
assertEquals(expectedLength, buffer.length);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(1, result);
assertArrayEquals("odd compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertSame(instance.getBit(i), true); assertSame(instance.getBit(i), false);
assertEquals(expected, result);
assertEquals(-2, constantinopleConfig.getExplosion(beforePauseBlock, null)); assertEquals(-2, constantinopleConfig.getExplosion(endOfIceAge, null)); assertEquals(0, constantinopleConfig.getExplosion(startExplodingBlock, null)); assertEquals(8, constantinopleConfig.getExplosion(startExplodingBlock, null)); assertEquals(28, constantinopleConfig.getExplosion(startExplodingBlock, null));
assertEquals(EtherUtil.convert(2, EtherUtil.Unit.ETHER), constantinopleConfig2.getConstants().getBLOCK_REWARD());
assertArrayEquals(compressedPubKey, pubFromPriv);
assertEquals(decode.getClass(), BigInteger.class); assertEquals(expectedBigInteger, actualBigInteger);
assertEquals(BigInteger.valueOf(269435944), difficulty);
assertSame(instance.getBit(i), b);
assertEquals("2.99s", Utils.longToTimePeriod(3000 - 12)); assertEquals("1d21h", Utils.longToTimePeriod(45L * 3600 * 1000));
assertNotNull(key.getPrivKeyBytes()); assertEquals(32, key.getPrivKeyBytes().length);
assertArrayEquals(expecteds, actuals);
assertFalse(filter.accept(createTestNode("invalid-1", null)));
assertEquals(abi.size(), 1); assertEquals(onlyFunc.type, Type.function); assertEquals(onlyFunc.inputs.size(), 1); assertEquals(onlyFunc.outputs.size(), 1); assertTrue(onlyFunc.constant);
assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey1)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey2)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey3));
assertEquals(1, result);
assertEquals(Success, rule.validate(partlyValidHeader)); assertEquals(Success, rule.validate(validHeader)); assertNotEquals(Success, rule.validate(partlyValidHeader)); assertNotEquals(Success, rule.validate(invalidHeader)); assertNotEquals(Success, rule.validate(partlyValidHeader));
assertTrue(false); assertTrue(false); assertTrue(false); assertTrue(found.get(0) == 2); assertTrue(found.get(1) == 24); assertTrue(found.get(2) == 25);
assertTrue(instance1.equals(instance2)); assertTrue(instance2.equals(instance1));
assertArrayEquals(expected, ByteUtil.calcPacketLength(test));
assertEquals(BigInteger.valueOf(1_000_976), difficulty);
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertEquals(1, byzantiumConfig.getCalcDifficultyMultiplier(current, parent).intValue());
assertArrayEquals("even compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertEquals(instance.size(), i);
assertArrayEquals(expected, data); assertArrayEquals(expected2, data); assertArrayEquals(expected3, data);
assertEquals(30123, config.getInt("peer.listen.port"));
assertEquals(29, result);
assertEquals(result, ByteUtil.nibblesToPrettyString(test));
assertTrue(wrapper1.compareTo(wrapper2) == 0); assertTrue(wrapper1.compareTo(wrapper3) > 1); assertTrue(wrapper1.compareTo(wrapper4) > 1); assertTrue(wrapper2.compareTo(wrapper3) > 1);
assertTrue(instance1.hashCode() == instance2.hashCode()); assertTrue(instance1.hashCode() == instance2.hashCode()); assertTrue(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode());
assertFalse(instance.contains(UUID.randomUUID().toString().getBytes("UTF-8")));
assertEquals(1L, messageRoundtrip.retryTimes);
assertTrue(key.isPubKeyCanonical()); assertNotNull(key.getPubKey()); assertNotNull(key.getPrivKeyBytes());
assertEquals(0, ByteUtil.byteArrayToInt(null)); assertEquals(0, ByteUtil.byteArrayToInt(new byte[0]));
assertEquals(expected, result);
assertEquals(unimplementedPrePauseBlockExplosion, etcFork3M.getExplosion(beforePauseBlock, null)); assertEquals(28, etcFork3M.getExplosion(endOfIceAge, null)); assertEquals(30, etcFork3M.getExplosion(startExplodingBlock, null)); assertEquals(38, etcFork3M.getExplosion(startExplodingBlock, null));
assertFalse(messageRoundtrip.isAnswered());
assertArrayEquals(pubKey, pubFromPriv);
assertFalse(config.hasPath("peer.listen.port"));
assertEquals("pub:04a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7893aba425419bc27a3b6c7e693a24c696f794c2ed877a1593cbee53b037368d7", key.toString());
assertEquals(expResult, result); assertEquals(expResult, result);
assertEquals(expected, Hex.toHexString(encodedLength)); assertEquals(expected, Hex.toHexString(encodedLength));
assertArrayEquals("even terminated compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertArrayEquals(expected, data);
assertEquals(1, premine.size()); assertEquals(state.getNonce(), mordenInitialNonse); assertEquals("#0 (4addb5 <~ 000000) Txs:0, Unc: 0", genesis.getShortDescr());
assertTrue(nodeIdPropertiesFile.exists()); assertEquals(4, lines.length); assertTrue(lines[0].startsWith("#Generated NodeID.")); assertTrue(lines[1].startsWith("#")); assertTrue(lines[2].startsWith("nodeIdPrivateKey=")); assertEquals("nodeIdPrivateKey=".length() + 64, lines[2].length()); assertTrue(lines[3].startsWith("nodeId=")); assertEquals("nodeId=".length() + 128, lines[3].length());
assertEquals(expected, result);
assertEquals("91887637", Hex.toHexString(topic.getBytes()));
assertThat(HaloCloudinary.Effects.shear(10, 10).toString().equals("e_shear:10.0:10.0")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(mBuilder.dpi(27).build(CLOUD_URL).url().contains("dn_" + 27)).isTrue();
assertThat(mBuilder.height(0.5f).build(CLOUD_URL).url().contains("h_0.5")).isTrue();
assertThat(HaloUtils.isAvailableForVersion(1)).isTrue();
assertThat(HaloCloudinary.Effects.grayscale().toString().equals("e_grayscale")).isTrue();
assertThat(module.describeContents()).isEqualTo(0);
assertThat(HaloCloudinary.Effects.blackAndWhite().toString().equals("e_blackwhite")).isTrue();
assertThat(mBuilder.zoom(20).build(CLOUD_URL).url().contains("z_20")).isTrue();
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(mNetworkApi.requestUrl("1","get")).contains("HaloNetClientTest"); assertThat(mNetworkApi.requestUrl("1","get")).contains("get");
assertThat(HaloCloudinary.Effects.displace().toString().equals("e_displace")).isTrue();
assertThat(mAuthenticator.getCredentials()).isNotNull();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(haloUnknownServerException).isNotNull(); assertThat(haloUnknownServerException.getMessage()).contains("unknown exception");
assertThat(haloConfigurationException.getMessage()).contains("Unsupported");
assertThat(mBuilder.defaultImage("default").build(CLOUD_URL).url().contains("d_default")).isTrue(); assertThat(mBuilder.defaultImage(null).build(CLOUD_URL).url().contains("d_")).isFalse();
assertThat(tag.getValue()).isEqualTo("dummyData");
assertThat(newRequest).isNull();
assertThat(HaloCloudinary.Effects.improve().toString().equals("e_improve")).isTrue();
assertThat(mBuilder.overlay("default").build(CLOUD_URL).url().contains("l_default")).isTrue(); assertThat(mBuilder.overlay(null).build(CLOUD_URL).url().contains("l_")).isFalse();
assertThat(user.getEmail()).isEqualTo("mobgen@mobgen.com");
assertThat(mBuilder.color("white").build(CLOUD_URL).url().contains("co_white")).isTrue(); assertThat(mBuilder.color(null).build(CLOUD_URL).url().contains("co_")).isFalse();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(pendingList.containsKey(job1.info().mTag)).isFalse(); assertThat(pendingList.containsKey(job2.info().mTag)).isFalse();
assertThat(newRequest).isNotNull(); assertThat(newRequest.header("Authorization")).isEqualTo(token.getAuthorization());
assertThat(result.data()).isNull(); assertThat(result.status().isError()).isTrue();
assertThat(HaloCloudinary.Effects.overlay().toString().equals("e_overlay")).isTrue();
assertThat(mHaloModuleRule.toString()).isNotNull();
assertThat(mCallbackFlag.isFlagged()).isTrue();
assertThat(HaloUtils.hasFlag(1,2)).isFalse();
assertThat(mHaloModuleFieldType).isNotNull(); assertThat(mHaloModuleFieldType.getName()).isEqualTo("myawesomeName");
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloCloudinary.Effects.advancedRedEye().toString().equals("e_adv_redeye")).isTrue();
assertThat(mBuilder.addFlags(HaloCloudinary.IMAGE_FLAG_ATTACHMENT).build(CLOUD_URL).url().contains("fl_" + HaloCloudinary.IMAGE_FLAG_ATTACHMENT)).isTrue(); assertThat(mBuilder.addFlags().build(CLOUD_URL).url().contains("fl_")).isFalse();
assertThat(HaloCloudinary.Effects.vignette(10).toString().equals("e_vignette:10")).isTrue(); assertThat(HaloCloudinary.Effects.vignette(null).toString().equals("e_vignette")).isTrue(); assertThat(HaloCloudinary.Effects.vignette(-1).toString().equals("e_vignette")).isTrue(); assertThat(HaloCloudinary.Effects.vignette(101).toString().equals("e_vignette")).isTrue();
assertThat(numOps[0]).isEqualTo(1);
assertThat(mBuilder.gravity(HaloCloudinary.IMAGE_GRAVITY_ALL_FACES).build(CLOUD_URL).url().contains("g_" + HaloCloudinary.IMAGE_GRAVITY_ALL_FACES)).isTrue(); assertThat(mBuilder.gravity(null).build(CLOUD_URL).url().contains("g_")).isFalse();
assertThat(tags.size()).isEqualTo(12);
assertThat(mBuilder.width(0.5f).build(CLOUD_URL).url().contains("w_0.5")).isTrue();
assertThat(mFramework.toolbox()).isNotNull();
assertThat(storage).isNotNull(); assertThat(storageCopy).isNotNull(); assertThat(storageCopy).isEqualTo(storage);
assertThat(mHaloModuleField).isNotNull(); assertThat(mHaloModuleField.getName()).isEqualTo("awesome field");
assertThat(core.framework()).isNotNull();
assertThat(mBuilder.maxRadius().build(CLOUD_URL).url().contains("r_max")).isTrue();
assertThat(HaloCloudinary.Effects.trim(10).toString().equals("e_trim:10")).isTrue(); assertThat(HaloCloudinary.Effects.trim(null).toString().equals("e_trim")).isTrue(); assertThat(HaloCloudinary.Effects.trim(101).toString().equals("e_trim")).isTrue();
assertThat(mBuilder.xPos(17).build(CLOUD_URL).url().contains("x_17")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(core.tagCollectors().size()).isEqualTo(2);
assertThat(mHaloModuleField.toString()).isNotNull();
assertThat(error.getError().mMessage).isEqualTo(parcelInstance.getError().mMessage);
assertThat(mBuilder.delay(27).build(CLOUD_URL).url().contains("dl_27")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloCloudinary.Effects.green(10).toString().equals("e_green:10")).isTrue(); assertThat(HaloCloudinary.Effects.green(null).toString().equals("e_green")).isTrue(); assertThat(HaloCloudinary.Effects.green(-1000).toString().equals("e_green")).isTrue();
assertEquals(0, query.describeContents());
assertThat(mCallbackFlag.timesExecuted()).isGreaterThan(0);
assertThat(mBuilder.crop(HaloCloudinary.CROP_MODE_AOI_CROP).build(CLOUD_URL).url().contains("c_" + HaloCloudinary.CROP_MODE_AOI_CROP)).isTrue(); assertThat(mBuilder.crop(null).build(CLOUD_URL).url().contains("c_")).isFalse();
assertThat(HaloCloudinary.Effects.screen().toString().equals("e_screen")).isTrue();
assertThat(instance.getData().getItemId()).isEqualTo(parcelInstance.getData().getItemId()); assertThat(instance.getData().getItemId()).isEqualTo("5874c5f06a3a0d1e00c8039d");
assertThat(newRequest).isNull();
assertThat(mCallbackFlag.isFlagged()).isTrue();
assertThat(mSessionManager.getSession(HaloAuthenticator.HALO_SESSION_NAME)).isNull();
assertThat(fileJobInfo.isDirectory()).isTrue(); assertThat(fileToVerify.exists()).isFalse();
assertThat(mStorage.framework()).isEqualTo(mFramework);
assertThat(mBuilder.namedTransformation("myTransform").build(CLOUD_URL).url().contains("t_myTransform")).isTrue(); assertThat(mBuilder.namedTransformation(null).build(CLOUD_URL).url().contains("t_")).isFalse();
assertThat(job.triggers().size()).isEqualTo(1);
assertThat(errorInfo.getStatus()).isEqualTo(403); assertThat(errorInfo.getType()).isEqualTo("HaloError"); assertThat(errorInfo.getMessage()).contains("belong to you or does not exist"); assertThat(errorInfo.getExtra().toString()).contains("validator.8");
assertThat(mBuilder.overlayText("default").build(CLOUD_URL).url().contains("l_text:default")).isTrue(); assertThat(mBuilder.overlayText(null).build(CLOUD_URL).url().contains("l_text")).isFalse();
assertThat(core.credentials()).isNotNull(); assertThat(core.credentials().getUsername()).isEqualTo("myClientId"); assertThat(core.credentials().getPassword()).isEqualTo("myClientSecret");
assertThat(mMigration.getDatabaseVersion() == 1).isTrue();
assertThat(HaloUtils.isAvailableForVersion(Build.VERSION.SDK_INT+1)).isFalse();
assertThat(mBuilder.aspectRatio(0.2f).build(CLOUD_URL).url().contains("ar_0.2")).isTrue();
assertThat(job.conditionsOk().isEmpty()).isFalse(); assertThat(job.canBePersisted()).isFalse(); assertThat(job.info()).isNotNull();
assertThat(mHaloDatabase.getDatabase().getVersion()).isEqualTo(3); assertThat(mHaloDatabase.getReadableDatabase().getVersion()).isEqualTo(3); assertThat(mHaloDatabase.getWritableDatabase().getVersion()).isEqualTo(3);
assertThat(HaloCloudinary.Effects.hue(10).toString().equals("e_hue:10")).isTrue(); assertThat(HaloCloudinary.Effects.hue(null).toString().equals("e_hue")).isTrue(); assertThat(HaloCloudinary.Effects.hue(-1000).toString().equals("e_hue")).isTrue();
assertThat(HaloCloudinary.Effects.distort(new Pair<>(1, 1), new Pair<>(1, 1), new Pair<>(1, 1), new Pair<>(1, 1)).toString().equals("e_distort:1:1:1:1:1:1:1:1")).isTrue();
assertThat(haloServerException).isNotNull(); assertThat(haloServerException.getMessage()).contains("500"); assertThat(haloServerException.getErrorCode()).isEqualTo(500); assertThat(haloServerException.toString()).contains("500"); assertThat(haloServerException.getBody()).isEqualTo("");
assertThat(mHaloModuleFieldType.toString()).isNotNull();
assertThat(mBuilder.yPos(17).build(CLOUD_URL).url().contains("y_17")).isTrue();
assertThat(core.version()).isEqualTo(BuildConfig.HALO_SDK_VERSION);
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloCloudinary.Effects.makeTransparent().toString().equals("e_make_transparent")).isTrue();
assertThat(mBuilder.xPos(0.3f).build(CLOUD_URL).url().contains("x_0.3")).isTrue();
assertThat(HaloCloudinary.Effects.gradientFade(10).toString().equals("e_gradient_fade:10")).isTrue(); assertThat(HaloCloudinary.Effects.gradientFade(null).toString().equals("e_gradient_fade")).isTrue(); assertThat(HaloCloudinary.Effects.gradientFade(-1000).toString().equals("e_gradient_fade")).isTrue();
assertThat(HaloCloudinary.Effects.saturation(10).toString().equals("e_saturation:10")).isTrue(); assertThat(HaloCloudinary.Effects.saturation(null).toString().equals("e_saturation")).isTrue(); assertThat(HaloCloudinary.Effects.saturation(-1000).toString().equals("e_saturation")).isTrue();
assertThat(haloUnknownServerException).isNotNull(); assertThat(haloUnknownServerException.getMessage()).contains("unknown exception");
assertThat(version.isOutdated("1.1")).isFalse(); assertThat(version.isOutdated("1.0")).isFalse(); assertThat(version.isOutdated("1.0.1")).isFalse(); assertThat(version.isOutdated("0.9")).isTrue(); assertThat(version.isOutdated("0")).isTrue(); assertThat(version.isOutdated("0.5.3")).isTrue(); assertThat(newVersion.isOutdated("1")).isTrue();
assertThat(HaloCloudinary.Effects.viesusCorrect().toString().equals("e_viesus_correct")).isTrue();
assertThat(mBuilder.radius(2).build(CLOUD_URL).url().contains("r_2")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloUtils.hasFlag(1,1)).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(haloUnknownServerException).isNotNull(); assertThat(haloUnknownServerException.getMessage()).contains("301");
assertThat(jsonObject.get("coord")).isEqualTo("3,3");
assertThat(mStorage.prefs()).isNotNull();
assertThat(runEnded).isTrue();
assertThat(HaloUtils.isColor("#zzzzzz")).isFalse();
assertThat(HaloCloudinary.Effects.fillLight(10).toString().equals("e_fill_light:10")).isTrue(); assertThat(HaloCloudinary.Effects.fillLight(null).toString().equals("e_fill_light")).isTrue(); assertThat(HaloCloudinary.Effects.fillLight(-1000).toString().equals("e_fill_light")).isTrue();
assertThat(instance).isNull();
assertThat(HaloCloudinary.Effects.colorize(10).toString().equals("e_colorize:10")).isTrue(); assertThat(HaloCloudinary.Effects.colorize(null).toString().equals("e_colorize")).isTrue(); assertThat(HaloCloudinary.Effects.colorize(-1000).toString().equals("e_colorize")).isTrue();
assertThat(query.mRelationships.size()).isEqualTo(2); assertTrue(query.mRelationships.get(0).getFieldName().equals("fieldname"));
assertThat(fileJobInfo.isDirectory()).isTrue(); assertThat(fileToVerify.exists()).isFalse();
assertThat(HaloCloudinary.Effects.sepia(10).toString().equals("e_sepia:10")).isTrue(); assertThat(HaloCloudinary.Effects.sepia(null).toString().equals("e_sepia")).isTrue(); assertThat(HaloCloudinary.Effects.sepia(-1000).toString().equals("e_sepia")).isTrue();
assertThat(mToolbox.framework()).isEqualTo(mFramework);
assertThat(HaloCloudinary.Effects.negate().toString().equals("e_negate")).isTrue();
assertThat(core.credentials()).isNotEqualTo(credentials); assertThat(core.credentials()); assertThat(credentials.getUsername().equals(core.credentials().getUsername())).isFalse(); assertThat(credentials.getPassword().equals(core.credentials().getPassword())).isFalse(); assertThat(core.credentials().getUsername()).isEqualTo("newClient"); assertThat(core.credentials().getPassword()).isEqualTo("newSecret");
assertThat(newRequest).isNotNull(); assertThat(newRequest.header("Authorization")).contains("Bearer LSD4fw4NLBTESfF18tTVEST6q9vsaLW8tMfEGLJa");
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(mModule.toString()).isNotNull();
assertThat(HaloUtils.isCharging(mContext, intent)).isTrue();
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(newRequest).isNotNull(); assertThat(newRequest.header("Authorization")).isEqualTo(token.getAuthorization());
assertThat(HaloCloudinary.Effects.sharpen(10).toString().equals("e_sharpen:10")).isTrue(); assertThat(HaloCloudinary.Effects.sharpen(null).toString().equals("e_sharpen")).isTrue(); assertThat(HaloCloudinary.Effects.sharpen(-1000).toString().equals("e_sharpen")).isTrue();
assertThat(TestUtils.testParcel(effect, HaloCloudinary.Effect.CREATOR).toString().equals(effect.toString())).isTrue(); assertThat(effect.describeContents()).isEqualTo(0);
assertThat(query.mRelationships.size()).isEqualTo(2); assertTrue(query.mRelationships.get(0).getFieldName().equals("fieldname"));
assertThat(HaloCloudinary.Effects.blurFaces(10).toString().equals("e_blur_faces:10")).isTrue(); assertThat(HaloCloudinary.Effects.blurFaces(null).toString().equals("e_blur_faces")).isTrue(); assertThat(HaloCloudinary.Effects.blurFaces(-1000).toString().equals("e_blur_faces")).isTrue();
assertThat(HaloCloudinary.Effects.gamma(10).toString().equals("e_gamma:10")).isTrue(); assertThat(HaloCloudinary.Effects.gamma(null).toString().equals("e_gamma")).isTrue(); assertThat(HaloCloudinary.Effects.gamma(-1000).toString().equals("e_gamma")).isTrue();
assertThat(newRequest).isNotNull(); assertThat(newRequest.header("Authorization")).isEqualTo(token.getAuthorization());
assertThat(haloAuthenticationException).isNotNull(); assertThat(haloAuthenticationException.getMessage()).contains("401");
assertThat(mBuilder.page(7).build(CLOUD_URL).url().contains("pg_" + 7)).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue();
assertThat(haloNotFoundException).isNotNull(); assertThat(haloNotFoundException.getMessage()).contains("404");
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(mBuilder.yPos(0.3f).build(CLOUD_URL).url().contains("y_0.3")).isTrue();
assertThat(HaloCloudinary.Effects.oilPaint(10).toString().equals("e_oil_paint:10")).isTrue(); assertThat(HaloCloudinary.Effects.oilPaint(null).toString().equals("e_oil_paint")).isTrue(); assertThat(HaloCloudinary.Effects.oilPaint(-1000).toString().equals("e_oil_paint")).isTrue();
assertThat(mStorage.context()).isNotNull();
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(HaloUtils.getDrawable(mContext, android.R.drawable.alert_dark_frame)).isNotNull(); assertThat(HaloUtils.getDrawable(mContext, android.R.drawable.alert_dark_frame)).isEqualTo(drawable);
assertThat(jobList[0].conditionsOk().isEmpty()).isFalse(); assertThat(jobList[0].info()).isNotNull(); assertThat(jobList[1].conditionsOk().isEmpty()).isFalse(); assertThat(jobList[0].info()).isNotNull();
assertThat(HaloCloudinary.Effects.red(10).toString().equals("e_red:10")).isTrue(); assertThat(HaloCloudinary.Effects.red(null).toString().equals("e_red")).isTrue(); assertThat(HaloCloudinary.Effects.red(-1000).toString().equals("e_red")).isTrue();
assertThat(core.segmentationTags().size()).isEqualTo(2);
assertThat(mNetworkApi.framework()).isEqualTo(mFramework);
assertThat(jsonObject.get("id")).isEqualTo("fakeId");
assertThat(mFramework.parser()).isNotNull();
assertThat(mBuilder.width(20).build(CLOUD_URL).url().contains("w_20")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isFalse(); assertThat(future).isNotNull();
assertThat(HaloUtils.isCharging(mContext, intent)).isFalse();
assertThat(mBuilder.aspectRatio("10:10").build(CLOUD_URL).url().contains("ar_10:10")).isTrue();
assertThat(mBuilder.backgroundColor("white").build(CLOUD_URL).url().contains("b_white")).isTrue(); assertThat(mBuilder.backgroundColor(null).build(CLOUD_URL).url().contains("b_")).isFalse();
assertThat(cancellable).isNotNull();
assertThat(inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0)).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloCloudinary.Effects.autoColor().toString().equals("e_auto_color")).isTrue();
assertThat(mHaloNetClient.context()).isEqualTo(RuntimeEnvironment.application);
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(haloNetException).isNotNull(); assertThat(haloNetException.getMessage()).contains("not connectivity");
assertThat(HaloCloudinary.Effects.blue(10).toString().equals("e_blue:10")).isTrue(); assertThat(HaloCloudinary.Effects.blue(null).toString().equals("e_blue")).isTrue(); assertThat(HaloCloudinary.Effects.blue(-1000).toString().equals("e_blue")).isTrue();
assertThat(HaloCloudinary.Effects.contrast(10).toString().equals("e_contrast:10")).isTrue(); assertThat(HaloCloudinary.Effects.contrast(null).toString().equals("e_contrast")).isTrue(); assertThat(HaloCloudinary.Effects.contrast(-1000).toString().equals("e_contrast")).isTrue();
assertThat(response).isNotNull(); assertThat(response.isSuccessful()).isTrue();
assertThat(instance.toString()).isNotNull();
assertThat(HaloCloudinary.Effects.shadow(10).toString().equals("e_shadow:10")).isTrue(); assertThat(HaloCloudinary.Effects.shadow(null).toString().equals("e_shadow")).isTrue(); assertThat(HaloCloudinary.Effects.shadow(-1000).toString().equals("e_shadow")).isTrue();
assertThat(mBuilder.border("dotted").build(CLOUD_URL).url().contains("bo_dotted")).isTrue(); assertThat(mBuilder.border(null).build(CLOUD_URL).url().contains("b_")).isFalse();
assertThat(TestUtils.testParcel(rotation, HaloCloudinary.Rotation.CREATOR).toString().equals(rotation.toString())).isTrue(); assertThat(rotation.describeContents()).isEqualTo(0);
assertThat(mFramework.network()).isNotNull();
assertThat(job.canBePersisted()).isFalse();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloCloudinary.Effects.pixelateFaces(10).toString().equals("e_pixelate_faces:10")).isTrue(); assertThat(HaloCloudinary.Effects.pixelateFaces(null).toString().equals("e_pixelate_faces")).isTrue(); assertThat(HaloCloudinary.Effects.pixelateFaces(-1000).toString().equals("e_pixelate_faces")).isTrue();
assertThat(user.isAnonymous()).isFalse();
assertThat(mBuilder.height(20).build(CLOUD_URL).url().contains("h_20")).isTrue();
assertThat(mBuilder.quality(0.3f).build(CLOUD_URL).url().contains("q_0.3")).isTrue();
assertThat(mBuilder.colorRGB("#000000").build(CLOUD_URL).url().contains("co_rgb:#000000")).isTrue(); assertThat(mBuilder.colorRGB(null).build(CLOUD_URL).url().contains("co_rgb")).isFalse();
assertThat(HaloCloudinary.Effects.brightness(10).toString().equals("e_brightness:10")).isTrue(); assertThat(HaloCloudinary.Effects.brightness(null).toString().equals("e_brightness")).isTrue(); assertThat(HaloCloudinary.Effects.brightness(-1000).toString().equals("e_brightness")).isTrue();
assertThat(core.segmentationTags().size()).isEqualTo(0);
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(mBuilder.opacity(2).build(CLOUD_URL).url().contains("o_2")).isTrue();
assertThat(mBuilder.underlay("default").build(CLOUD_URL).url().contains("u_default")).isTrue(); assertThat(mBuilder.underlay(null).build(CLOUD_URL).url().contains("u_")).isFalse();
assertThat(HaloCloudinary.Effects.autoContrast().toString().equals("e_auto_contrast")).isTrue();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(fields).isNotNull();
assertThat(mBuilder.aspectRatio(1).build(invalidUrl).url()).isEqualTo(invalidUrl);
assertThat(HaloCloudinary.Effects.pixelate(10).toString().equals("e_pixelate:10")).isTrue(); assertThat(HaloCloudinary.Effects.pixelate(null).toString().equals("e_pixelate")).isTrue(); assertThat(HaloCloudinary.Effects.pixelate(-1000).toString().equals("e_pixelate")).isTrue();
assertThat(HaloCloudinary.Effects.blur(10).toString().equals("e_blur:10")).isTrue(); assertThat(HaloCloudinary.Effects.blur(null).toString().equals("e_blur")).isTrue(); assertThat(HaloCloudinary.Effects.blur(-1000).toString().equals("e_blur")).isTrue();
assertThat(mHaloModuleRule).isNotNull(); assertThat(mHaloModuleRule.getRule()).isEqualTo("rule1");
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(mCallbackFlag.isFlagged()).isFalse(); assertThat(future).isNotNull();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(HaloUtils.sha1(textToHash)).isEqualTo(HaloUtils.sha1("HaloNetClientTest"));
assertThat(response).isNotNull(); assertThat(response).isEqualTo("ExampleResponseTestFromNetWork");
assertThat(HaloCloudinary.Effects.multiply().toString().equals("e_multiply")).isTrue();
assertThat(mNetworkApi.context()).isNotNull();
assertThat(mBuilder.backgroundColorRGB("#000000").build(CLOUD_URL).url().contains("b_rgb:#000000")).isTrue(); assertThat(mBuilder.backgroundColorRGB(null).build(CLOUD_URL).url().contains("b_rgb")).isFalse();
assertThat(sort).contains(SortField.DELETED); assertThat(sort).contains(SortOrder.DESCENDING);
assertThat(mBuilder.devicePixelRatio(2).build(CLOUD_URL).url().contains("dpr_" + 2)).isTrue();
assertThat(result.data()).isNotNull(); assertThat(result.data().getNotificationsToken()).isEqualTo("mytoken");
assertThat(mHalo.getCore().manager().storage()).isNotNull();
assertThat(mCallbackFlag.isFlagged()).isTrue(); assertThat(cancellable).isNotNull();
assertThat(mDeviceSyncSubscription).isNotNull();
assertThat(HaloCloudinary.Effects.unsharpMask(10).toString().equals("e_unsharp_mask:10")).isTrue(); assertThat(HaloCloudinary.Effects.unsharpMask(null).toString().equals("e_unsharp_mask")).isTrue(); assertThat(HaloCloudinary.Effects.unsharpMask(-1000).toString().equals("e_unsharp_mask")).isTrue();
assertThat(pendingList.containsKey(job.info().mTag)).isFalse();
assertThat(mCallbackFlag.isFlagged()).isTrue();
assertThat(HaloCloudinary.Effects.autoBrightness().toString().equals("e_auto_brightness")).isTrue();
assertThat(mNetworkApi.requestUrl("1", "get")).contains("HaloNetClientTest"); assertThat(mNetworkApi.requestUrl("1","get")).contains("get");
assertThat(instance.getSortQuery()).isEqualTo(parcelInstance.getSortQuery());
assertThat(afterParse).isEqualTo(resultingUrl); assertThat(mBuilder.describeContents()).isEqualTo(0);
assertThat(mBuilder.build(invalidUrl).url()).isEqualTo(invalidUrl);
assertThat(modules.size()).isEqualTo(5); assertThat(cursor.isClosed()).isFalse(); assertThat(modules.size()).isEqualTo(5); assertThat(cursor.isClosed()).isTrue();
assertThat(mCallbackFlag.isFlagged()).isFalse(); assertThat(future).isNotNull();
assertThat(HaloUtils.isColor("#000000")).isTrue();
assertThat(mNetworkApi.client()).isNotNull();
assertThat(HaloCloudinary.Effects.redEye().toString().equals("e_redeye")).isTrue();
assertThat(response).isNotNull(); assertThat(response.isSuccessful()).isTrue();
assertThat(mNetworkApi.requestUrl("1","get")).contains("HaloNetClientTest"); assertThat(mNetworkApi.requestUrl("1","get")).contains("get");
assertThat(core.tagCollectors().size()).isEqualTo(0);
assertTrue("process stop callback not received", stopped); assertEquals(0, process.getExitCode().intValue());
assertEquals("hello", ens.getScheduledFuture().get());
assertTrue(rpc.started); assertTrue(rpc.stopped);
assertNotNull(runnable.getException());
assertEquals(one, parent.getPreviousService());
assertEquals(16, Utils.nextPowTwo(9)); assertEquals(8, Utils.nextPowTwo(8));
assertArrayEquals(new long[]{exp1, exp2, exp3}, ret);
assertEquals("4",stack.poll()); assertEquals("3",stack.poll()); assertEquals("2",stack.poll()); assertEquals("1",stack.poll()); assertNull(stack.poll());
assertArrayEquals(new long[]{expected}, ret);
assertEquals(null, tx.makeTx().getHashMap("test").get("aa"));
assertTrue(m.getClass().getName().contains("HTreeMap"));
assertEquals(Integer.valueOf(111), snapshot.get(recid, Serializer.INTEGER_SERIALIZER));
assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{1, 2, 4, 5}, 2, 3))); assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{2, 3, 4, 5}, 0, 1))); assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{1, 2, 3, 4}, 4, 5)));
assertTrue(db.engine.getClass() == CacheHashTable.class); assertEquals(1024 * 32, ((CacheHashTable) db.engine).cacheMaxSize); assertTrue(w instanceof SnapshotEngine); assertTrue(w.getWrappedEngine().getClass() == AsyncWriteEngine.class); assertTrue(r.getWrappedEngine() instanceof StorageDirect);
assertEquals(Integer.valueOf(111), snapshot.get(recid, Serializer.INTEGER_SERIALIZER));
assertTrue(m.getClass().getName().contains("HTreeMap"));
assertEquals(s,e!=null?e.getKey():null); assertEquals(9999, map.findSmaller(100000,true).getKey()); assertNull(map.findSmaller(0,false)); assertEquals(s,e!=null?e.getKey():null); assertEquals(9999, map.findSmaller(100000,false).getKey());
assertTrue(db.engine.getClass() == CacheHardRef.class);
assertTrue(e.getCause() instanceof EOFException);
assertArrayEquals(new long[]{exp1, exp2}, ret);
assertEquals(Integer.valueOf(222), tx.makeTx().getEngine().get(recid, Serializer.INTEGER_SERIALIZER));
assertTrue(db.engine.getClass() == CacheLRU.class);
assertTrue(e.getCause() instanceof EOFException);
assertTrue(m1 == db.getTreeMap("test")); assertEquals(m1, new DB(engine).getTreeMap("test"));
assertTrue(m.getClass().getName().contains("BTreeMap"));
assertEquals(11, b.getUnsignedByte(1000)); assertEquals(126, b.getUnsignedByte(1000)); assertEquals(130, b.getUnsignedByte(1000)); assertEquals(255, b.getUnsignedByte(1000)); assertEquals(0, b.getUnsignedByte(1000));
assertTrue(m1 == db.getHashMap("test")); assertEquals(m1, new DB(engine).getHashMap("test"));
assertTrue(e.getCause() instanceof EOFException);
assertTrue(db.engine.getClass() == CacheWeakSoftRef.class); assertFalse(((CacheWeakSoftRef)db.engine).useWeakRef);
assertEquals(slotMax, slotMaxMinus1 + 1);
assertEquals(1000, ((CacheHashTable) db.engine).cacheMaxSize);
assertTrue(slot >= 0); assertTrue(oldSlot <= slot); assertTrue(slot - oldSlot <= 1); assertEquals(StorageDirect.NUMBER_OF_PHYS_FREE_SLOT - 1, oldSlot);
assertEquals(111L, b.getLong(beyondInc));
assertTrue(m.getClass().getName().contains("BTreeMap"));
assertEquals("1", queue.poll()); assertEquals("2", queue.poll()); assertEquals("3", queue.poll()); assertEquals("4", queue.poll()); assertNull(queue.poll());
assertEquals(111L, b.getLong(1000));
assertTrue(m1 == db.getTreeSet("test")); assertEquals(m1, new DB(engine).getTreeSet("test"));
assertNotNull(snapshot);
assertTrue(e.getCause() instanceof EOFException);
assertEquals("bb", tx.makeTx().getHashMap("test").get("aa"));
assertEquals(Integer.valueOf(111), snapshot.get(recid, Serializer.INTEGER_SERIALIZER));
assertTrue(m1 == db.getHashSet("test")); assertEquals(m1, new DB(engine).getHashSet("test"));
assertTrue(db.engine.getClass() == CacheWeakSoftRef.class); assertTrue(((CacheWeakSoftRef)db.engine).useWeakRef);
assertEquals(11, in.readInt()); assertEquals(1111L, in.readLong());
assertEquals("draft", post.getPostStatus());
assertFalse(post.hasPostStatus());
assertNull("asdf : a -> null", Str.group("asdf", "a")); assertNull("asdf : q -> null", Str.group("asdf", "q")); assertEquals("asdf : (s) -> s", Str.group("asdf", "(s)"), "s"); assertEquals("asdf : ^.(..) -> sd", Str.group("asdf", "^.(..)"), "sd"); assertNull("asdf : ^.{5}(.+) -> null", Str.group("asdf", "^.{5}(.+)"));
assertNull(Str.trim(null)); assertNull(Str.trim("")); assertNull(Str.trim(" ")); assertNull(Str.trim(" \\t\\n ")); assertNotNull(Str.trim(".")); assertNotNull(Str.trim(" . "));
assertEquals(receiptNameColumn, columnDatabaseAdapter.read(cursor));
assertNotNull(response.getConfidenceLevel()); assertEquals(0.7216666666666667, response.getConfidenceLevel(), TestUtils.EPSILON);
assertEquals(nullTripSupplier.get(), "prefs"); assertEquals(validTripSupplier.get(), "trip");
assertEquals(receipt1, receiptCaptor.getValue()); assertEquals(newSyncState1, receiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(distance, mDistanceDatabaseAdapter.read(mCursor));
assertTrue(s3Client.isPresent());
assertFalse(consumableInAppPurchaseConsumer.isConsumed(managedProduct, PurchaseFamily.Ocr));
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getConsumablePurchaseSkus());
assertEquals(50, ocrPurchaseTracker.getRemainingScans());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getConsumablePurchaseSkus());
assertNull(new OcrResponseParser(new OcrResponse(null, null, null, new OcrResponseField<>(iso8601Date, 0.4), null, null, null, null)).getDate());
assertNotNull(generator1); assertNotNull(generator2); assertEquals(generator1, generator2);
assertEquals(syncState, mSyncStateAdapter.read(mCursor));
assertNull(contentValues.getAsString("drive_sync_id")); assertFalse(contentValues.getAsBoolean("drive_is_synced")); assertEquals(DRIVE_IS_MARKED, contentValues.getAsBoolean("drive_marked_for_deletion")); assertEquals(LAST_LOCAL_MODIFICATION_TIME, (long) contentValues.getAsLong("last_local_modification_time"));
assertEquals(49, localOcrScansTracker.getRemainingScans());
assertEquals(paymentMethod, mPaymentMethodDatabaseAdapter.read(mCursor));
assertEquals(Integer.valueOf(TYPE), contentValues.getAsInteger(AbstractColumnTable.COLUMN_TYPE)); assertEquals(sync, contentValues.getAsString(sync)); assertFalse(contentValues.containsKey(AbstractColumnTable.COLUMN_ID)); assertEquals(CUSTOM_ORDER_ID, (long) contentValues.getAsLong(AbstractSqlTable.COLUMN_CUSTOM_ORDER_ID)); assertEquals(COLUMN_UUID.toString(), contentValues.getAsString(AbstractSqlTable.COLUMN_UUID));
assertEquals(NAME, contentValues.getAsString(NAME_KEY)); assertEquals(CODE, contentValues.getAsString(CODE_KEY)); assertEquals(sync, contentValues.getAsString(sync)); assertEquals(CUSTOM_ORDER_ID, (int) contentValues.getAsInteger(CUSTOM_ORDER_ID_KEY)); assertEquals(CAT_UUID.toString(), contentValues.getAsString(UUID_KEY));
assertEquals("login.smartreceipts.co", authenticationProvider.getProviderName());
assertEquals(IDENTIFIER_STRING, contentValues.getAsString("drive_sync_id")); assertFalse(contentValues.getAsBoolean("drive_is_synced")); assertEquals(DRIVE_IS_MARKED, contentValues.getAsBoolean("drive_marked_for_deletion")); assertEquals(LAST_LOCAL_MODIFICATION_TIME, (long) contentValues.getAsLong("last_local_modification_time"));
assertNull(new OcrResponseParser(new OcrResponse(null, null, null, new OcrResponseField<>(iso8601Date, 1.0), null, null, null, null)).getDate());
assertTrue(ocrPurchaseTracker.hasAvailableScans()); assertFalse(ocrPurchaseTracker.hasAvailableScans());
assertFalse(subscriptionInAppPurchaseConsumer.isConsumed(subscription, PurchaseFamily.Ocr));
assertEquals(cognito, cognitoIdentityProvider.synchronouslyRefreshCognitoToken());
assertEquals("string", response.getError());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getSubscriptionSkus());
assertEquals(METHOD, contentValues.getAsString("method")); assertEquals(sync, contentValues.getAsString(sync)); assertEquals(CUSTOM_ORDER, (int) contentValues.getAsInteger("custom_order_id")); assertEquals(PM_UUID.toString(), contentValues.getAsString("entity_uuid")); assertFalse(contentValues.containsKey("id"));
assertEquals(NAME, contentValues.getAsString(NAME_KEY)); assertEquals(CODE, contentValues.getAsString(CODE_KEY)); assertEquals(sync, contentValues.getAsString(sync)); assertEquals(CUSTOM_ORDER_ID, (int) contentValues.getAsInteger(CUSTOM_ORDER_ID_KEY)); assertEquals(CAT_UUID.toString(), contentValues.getAsString(UUID_KEY));
assertTrue(plusPurchaseWallet.hasActivePurchase(InAppPurchase.SmartReceiptsPlus)); assertNull(plusPurchaseWallet.getLocalInAppManagedProduct(InAppPurchase.SmartReceiptsPlus)); assertFalse(plusPurchaseWallet.hasActivePurchase(InAppPurchase.OcrScans50)); assertNull(plusPurchaseWallet.getLocalInAppManagedProduct(InAppPurchase.OcrScans50)); assertEquals(plusPurchaseWallet.getActiveLocalInAppPurchases(), Collections.emptySet());
assertEquals(nullDistanceSupplier.get(), "trip"); assertEquals(validDistanceSupplier.get(), "distance");
assertEquals(nullReceiptSupplier.get(), "trip"); assertEquals(validReceiptSupplier.get(), "receipt"); assertEquals(nullReceiptSupplierWithCachedCurrency.get(), "cache");
assertEquals(receiptNameColumn, columnDatabaseAdapter.build(column, ID, COLUMN_UUID, mock(DatabaseOperationMetadata.class))); assertEquals(receiptNameColumn.getSyncState(), columnDatabaseAdapter.build(column, ID, COLUMN_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());
assertEquals(null, cognitoIdentityProvider.synchronouslyRefreshCognitoToken());
assertEquals(ReportTooltipUiIndicator.importInfo(), indicator); assertEquals(State.ImportInfo, indicator.getState()); assertEquals(null, indicator.getErrorType().orNull());
assertEquals(ReportTooltipUiIndicator.backupReminder(DAYS), indicator); assertEquals(State.BackupReminder, indicator.getState()); assertEquals(DAYS, (int)indicator.getDaysSinceBackup().get());
assertEquals(SyncProvider.None, mBackupProvidersManager.getSyncProvider());
assertEquals(userCredentialsPayloadCaptor.getValue(), new SmartReceiptsUserSignUp(EMAIL, PASSWORD));
assertEquals(null, authenticationProvider.refresh());
assertEquals(new File("4_name.jpg"), receipt.getFile());
assertEquals(userCredentialsPayloadCaptor.getValue(), new SmartReceiptsUserLogin(EMAIL, PASSWORD));
assertNull(receipt.getFile());
assertEquals(UiIndicator.State.Error, uiIndicator.getState()); assertEquals(null, uiIndicator.getData().orNull());
assertNotNull(receiptCaptor.getValue()); assertEquals(receipt1, updatedReceiptCaptor.getValue()); assertEquals(newSyncState1, updatedReceiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(category, mCategoryDatabaseAdapter.read(mCursor));
assertEquals(50, localOcrScansTracker.getRemainingScans());
assertTrue(e1.getX() == e2.getX() && e1.getY() == e2.getY()); assertEquals(expectedEntries.size(), resultEntries.size()); assertEquals(GraphUiIndicator.GraphType.SummationByDate, graphUiIndicator.getGraphType());
assertEquals(distance, mDistanceDatabaseAdapter.build(mDistance, ID, DIST_UUID, mock(DatabaseOperationMetadata.class))); assertEquals(distance.getSyncState(), mDistanceDatabaseAdapter.build(mDistance, ID, DIST_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());
assertEquals(UiIndicator.State.Success, uiIndicator.getState()); assertEquals(null, uiIndicator.getData().orNull());
assertEquals(paymentMethod, actual);
assertEquals(syncState, mSyncStateAdapter.read(mCursor));
assertEquals(TOKEN, authenticationProvider.refresh());
assertEquals(nonSyncGet.getSyncId(SyncProvider.GoogleDrive), mSyncState.getSyncId(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.isSynced(SyncProvider.GoogleDrive), mSyncState.isSynced(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.isMarkedForDeletion(SyncProvider.GoogleDrive), mSyncState.isMarkedForDeletion(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.getLastLocalModificationTime(), mSyncState.getLastLocalModificationTime());
assertEquals(receipt, mReceiptDatabaseAdapter.read(mCursor));
assertEquals(UiIndicator.State.Idle, uiIndicator.getState()); assertEquals(null, uiIndicator.getData().orNull());
assertEquals(column + " DESC", descending.getOrderByPredicate()); assertEquals(column + " ASC", ascending.getOrderByPredicate()); assertNull(defaultOrder.getOrderByPredicate()); assertEquals(descending.toString(), descending.getOrderByPredicate()); assertEquals(ascending.toString(), ascending.getOrderByPredicate()); assertEquals(defaultOrder.toString(), defaultOrder.getOrderByPredicate());
assertNotNull(key); assertTrue(key.length() > 16);
assertEquals(null, cognitoIdentityProvider.synchronouslyRefreshCognitoToken());
assertEquals(IDENTIFIER_STRING, contentValues.getAsString("drive_sync_id")); assertEquals(DRIVE_IS_SYNCED, contentValues.getAsBoolean("drive_is_synced")); assertEquals(DRIVE_IS_MARKED, contentValues.getAsBoolean("drive_marked_for_deletion")); assertEquals(LAST_LOCAL_MODIFICATION_TIME, (long) contentValues.getAsLong("last_local_modification_time"));
assertEquals(IDENTITY_ID, authenticationProvider.getIdentityId());
assertNotNull(receiptCaptor.getValue()); assertEquals(receipt1, updatedReceiptCaptor.getValue()); assertEquals(newSyncState1, updatedReceiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(null, localCognitoTokenStore.getCognitoToken());
assertEquals(cognito, localCognitoTokenStore.getCognitoToken()); assertEquals(null, localCognitoTokenStore.getCognitoToken());
assertEquals(receipt, mReceiptDatabaseAdapter.build(mReceipt, ID, RECEIPT_UUID, mock(DatabaseOperationMetadata.class))); assertEquals(receipt.getSyncState(), mReceiptDatabaseAdapter.build(mReceipt, ID, RECEIPT_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());
assertNotNull(completable);
assertEquals(new File("4_before__after.jpg"), receipt.getFile());
assertNull(contentValues.getAsString("drive_sync_id")); assertEquals(DRIVE_IS_SYNCED, contentValues.getAsBoolean("drive_is_synced")); assertEquals(DRIVE_IS_MARKED, contentValues.getAsBoolean("drive_marked_for_deletion")); assertEquals(LAST_LOCAL_MODIFICATION_TIME, (long) contentValues.getAsLong("last_local_modification_time"));
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getConsumablePurchaseSkus());
assertNotNull(receiptCaptor.getValue()); assertEquals(receipt1, updatedReceiptCaptor.getValue()); assertEquals(newSyncState1, updatedReceiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getSubscriptionSkus());
assertEquals(new Cognito(TOKEN, IDENTITY_ID, EXPIRES_AT), cognitoIdentityProvider.getCachedCognitoToken().get());
assertEquals(UiIndicator.State.Loading, uiIndicator.getState()); assertEquals(null, uiIndicator.getData().orNull());
assertEquals(mSyncState, mSyncStateAdapter.get(mSyncState, new DatabaseOperationMetadata(OperationFamilyType.Sync)));
assertFalse(defaultPurchaseWallet.hasActivePurchase(InAppPurchase.SmartReceiptsPlus)); assertTrue(defaultPurchaseWallet.hasActivePurchase(InAppPurchase.SmartReceiptsPlus)); assertTrue(newWallet.hasActivePurchase(InAppPurchase.SmartReceiptsPlus));
assertEquals(METHOD, contentValues.getAsString("method")); assertEquals(sync, contentValues.getAsString(sync)); assertEquals(CUSTOM_ORDER, (int) contentValues.getAsInteger("custom_order_id")); assertEquals(PM_UUID.toString(), contentValues.getAsString("entity_uuid")); assertFalse(contentValues.containsKey("id"));
assertEquals(completable, consumableInAppPurchaseConsumer.consumePurchase(managedProduct, PurchaseFamily.Ocr));
assertFalse(s3Client1.isPresent()); assertTrue(s3Client2.isPresent());
assertEquals(null, authenticationProvider.getIdentityId());
assertTrue(comparator.compare(string1, string1) == 0); assertTrue(comparator.compare(string2, string2) == 0); assertTrue(comparator.compare(string1, string2) < 0); assertTrue(comparator.compare(string2, string1) > 0);
assertEquals(Integer.valueOf(TYPE), contentValues.getAsInteger(AbstractColumnTable.COLUMN_TYPE)); assertEquals(sync, contentValues.getAsString(sync)); assertFalse(contentValues.containsKey(AbstractColumnTable.COLUMN_ID)); assertEquals(CUSTOM_ORDER_ID, (long) contentValues.getAsLong(AbstractSqlTable.COLUMN_CUSTOM_ORDER_ID)); assertEquals(COLUMN_UUID.toString(), contentValues.getAsString(AbstractSqlTable.COLUMN_UUID));
assertEquals(nonSyncGet.getSyncId(SyncProvider.GoogleDrive), mSyncState.getSyncId(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.isSynced(SyncProvider.GoogleDrive), mSyncState.isSynced(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.isMarkedForDeletion(SyncProvider.GoogleDrive), mSyncState.isMarkedForDeletion(SyncProvider.GoogleDrive)); assertEquals(nonSyncGet.getLastLocalModificationTime(), mSyncState.getLastLocalModificationTime());
assertNotNull(receiptCaptor.getValue()); assertEquals(receipt1, updatedReceiptCaptor.getValue()); assertEquals(newSyncState1, updatedReceiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getSubscriptionSkus());
assertEquals(category, mCategoryDatabaseAdapter.build(mCategory, PRIMARY_KEY_INT, CAT_UUID, mock(DatabaseOperationMetadata.class))); assertEquals(category.getSyncState(), mCategoryDatabaseAdapter.build(mCategory, PRIMARY_KEY_INT, CAT_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());
assertNotNull(receiptCaptor.getValue()); assertEquals(receipt1, updatedReceiptCaptor.getValue()); assertEquals(newSyncState1, updatedReceiptCaptor.getValue().getSyncState()); assertEquals(OperationFamilyType.Sync, operationMetadataCaptor.getValue().getOperationFamilyType());
assertEquals(trip, mTripDatabaseAdapter.build(mTrip, ID, TRIP_UUID, mock(DatabaseOperationMetadata.class))); assertEquals(trip.getSyncState(), mTripDatabaseAdapter.build(mTrip, ID, TRIP_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());
assertEquals(ReportTooltipUiIndicator.generateInfo(), indicator); assertEquals(State.GenerateInfo, indicator.getState()); assertEquals(null, indicator.getErrorType().orNull());
assertEquals(0, localOcrScansTracker.getRemainingScans());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getSubscriptionSkus());
assertEquals(bundleCaptor.getValue().getStringArrayList("ITEM_ID_LIST"), InAppPurchase.getConsumablePurchaseSkus());
assertEquals("zookeeper", args.getZookeeperQuorum()); assertEquals(4, results.size());
assertTrue(serverNameList.size() >= 2); assertEquals(1, regionInfoList.size()); assertEquals(2, getRegionLoad(regionInfo, serverName).getStorefiles()); assertEquals(1, getRegionLoad(regionInfo, serverName).getStorefiles());
assertTrue(serverNameList.size() >= 2); assertEquals(1, regionInfoList.size()); assertEquals(2 + 2, getRegionLoad(regionInfo, serverName).getStorefiles()); assertEquals(2 + 1, getRegionLoad(regionInfo, serverName).getStorefiles());
assertEquals("zookeeper", args.getZookeeperQuorum()); assertEquals(0, results.size());
assertEquals("zookeeper", args.getZookeeperQuorum());
assertEquals(numRegions - 1, splits.length); assertEquals(String.format("%0" + digits + "d", 3), Bytes.toString(splits[0])); assertEquals(String.format("%0" + digits + "d", 6), Bytes.toString(splits[1])); assertEquals(String.format("%0" + digits + "d", 10), Bytes.toString(splits[2])); assertEquals(String.format("%0" + digits + "d", 996), Bytes.toString(splits[numRegions - 2]));
assertEquals(1, DecimalStringSplit.digits(0)); assertEquals(1, DecimalStringSplit.digits(1)); assertEquals(1, DecimalStringSplit.digits(9)); assertEquals(2, DecimalStringSplit.digits(10)); assertEquals(2, DecimalStringSplit.digits(99)); assertEquals(3, DecimalStringSplit.digits(100)); assertEquals(6, DecimalStringSplit.digits(100000)); assertEquals(1, DecimalStringSplit.digits(-1));
assertEquals(LoadIO.DIRECTORY_NAME + "/zookeeper_table_19700101090000000.csv", loadIO.filename(args)); assertEquals(LoadIO.DIRECTORY_NAME + "/zookeeper__19700101090000000.csv", loadIO.filename(args)); assertEquals(LoadIO.DIRECTORY_NAME + "/zookeeper1_2180_zookeeper2_2180__19700101090000000.csv", loadIO.filename(args));
assertEquals(0, new RatioNumber(1.0, 0.1).intValue()); assertEquals(0, new RatioNumber(1.0, 0.0).intValue()); assertEquals(0, new RatioNumber(1.0, 0.5).intValue()); assertEquals(1, new RatioNumber(1.0, 1.1).intValue()); assertEquals(1, new RatioNumber(0.0, 1.1).intValue());
assertEquals(ratioNumber, LoadEntry.DataLocality.add(ratioNumber, zero)); assertEquals(ratioNumber, LoadEntry.DataLocality.add(zero, ratioNumber)); assertEquals(zero, LoadEntry.DataLocality.add(zero, zero));
assertTrue(serverNameList.size() >= 2); assertEquals(1, regionInfoList.size()); assertEquals(2, getRegionLoad(regionInfo, serverName).getStorefiles()); assertEquals(1, getRegionLoad(regionInfo, serverName).getStorefiles());
assertEquals(new RatioNumber(3, 4), RatioNumber.valueOf("3:4")); assertEquals(new RatioNumber(0, 0), RatioNumber.valueOf("0:0"));
assertEquals(numRegions - 1, splits.length); assertEquals(String.format("%0" + digits + "d", 1), Bytes.toString(splits[0])); assertEquals(String.format("%0" + digits + "d", 9), Bytes.toString(splits[numRegions - 2]));
assertTrue(serverNameList.size() >= 2); assertEquals(1, regionInfoList.size()); assertEquals(2, getRegionLoad(regionInfo, serverName).getStorefiles()); assertEquals(2, getRegionLoad(regionInfo, serverName).getStorefiles());
assertEquals(numRegions - 1, splits.length); assertEquals(String.format("%0" + digits + "d", 3), Bytes.toString(splits[0])); assertEquals(String.format("%0" + digits + "d", 6), Bytes.toString(splits[numRegions - 2]));
assertEquals("0.0:0.0", RatioNumber.ZERO.toString()); assertEquals("3.0:4.0", new RatioNumber(3, 4).toString());
assertEquals("zookeeper", args.getZookeeperQuorum()); assertEquals(4, results.size());
assertTrue(loadIO.showSavedFiles(args).startsWith(LoadIO.NO_SAVED_FILE));
assertThat(dartAnalyzerRepository).isNotNull(); assertThat(dartAnalyzerRepository.name()).isEqualTo("dartanalyzer"); assertThat(dartAnalyzerRepository.language()).isEqualTo("dart"); assertThat(dartAnalyzerRepository.rules()).isNotEmpty();
assertThat(issue1).isEqualTo(issue2);
assertThat(descriptor.name()).isEqualTo("Dart sensor");
assertThat(visitor.getComplexity()).isEqualTo(7);
assertThat(antlrContext.getTokens().length).isEqualTo(371);
assertNotNull(cookieString); assertEquals(cookieString, expectedString);
assertNotNull(mediaType); assertEquals(mediaType.getType(), "text"); assertEquals(mediaType.getSubtype(), "html"); assertEquals(mediaType.toString(), "text/html"); assertNull(mediaType2);
assertNotNull(date); assertEquals(date.getTime(), 784111777000L); assertNull(date2);
assertEquals(headerValues.size(), 2); assertTrue(headerValues.contains("test1")); assertTrue(headerValues.contains("test2")); assertEquals(headerValues.size(), 1); assertTrue(headerValues.contains("application/json"));
assertEquals(httpRequest.getHttpMethod(), HttpMethod.GET);
assertEquals("text/plain", provider.toString(new MediaType("text", "plain")), "simple media type is not serialized");
assertEquals(httpRequest.getUri(), URI.create("msf4j"));
assertNotNull(cookieMap); assertEquals(cookieMap.size(), 1); assertTrue(cookieMap.containsKey("JSESSIONID")); assertEquals(cookieMap.get("JSESSIONID").getValue(), "3508015E4EF0ECA8C4B761FCC4BC1718"); assertEquals(cookieMap2.size(), 0);
assertEquals(mediaTypes.size(), 1); assertEquals(mediaTypes.get(0).getType(), "application"); assertEquals(mediaTypes.get(0).getSubtype(), "json"); assertEquals(mediaTypes.get(0).toString(), "application/json"); assertEquals(mediaTypes.size(), 1); assertEquals(mediaTypes.get(0).getType(), "*"); assertEquals(mediaTypes.get(0).getSubtype(), "*"); assertEquals(mediaTypes.get(0).toString(), "*/*");
assertEquals(locales.size(), 3); assertEquals(locales.get(0).getLanguage(), "da"); assertEquals(locales.get(1).getLanguage(), "en-gb"); assertEquals(locales.get(2).getLanguage(), "en"); assertEquals(locales.size(), 1); assertEquals(locales.get(0).getLanguage(), "*");
assertEquals(httpServerRequest.getHttpMethod(), HttpMethod.GET);
assertNotNull(locale); assertEquals(locale.getLanguage(), "en"); assertNull(locale2);
assertEquals(headerValues.size(), 2); assertTrue(headerValues.contains("test1")); assertTrue(headerValues.contains("test2"));
assertEquals(httpResponse.getHttpStatusCode(), response.getStatusCode());
assertTrue(request.headers().get("testK").contains("testV"));
assertEquals(httpServerRequest.getHttpHeaderValue("testK"), "testV");
assertEquals(headerValue, "test1,test2"); assertEquals(headerValue, "application/json");
assertEquals(httpResponse.getHttpStatusCode(), response.status());
assertEquals(length, 1024); assertEquals(length2, -1);
assertEquals(httpServerRequest.getUri(), URI.create("msf4j"));
assertTrue(metric != null); assertEquals(1L, metric.getValue()); assertTrue(metric != null); assertEquals(0L, metric.getValue());
assertNull(lookoutRegistryMetricReader.findOne("")); assertTrue(this.metricReaderPublicMetrics != null && this.metricReaderPublicMetrics.size() > 0); assertNotNull(testRestTemplate); assertTrue(StringUtils.isNotBlank(response.getBody())); assertTrue(metric != null);
assertThat(indicator).isNotNull(); assertThat(indicator.measurements()).hasSize(1); assertThat(((Measurement<?>) indicator.measurements().iterator().next()).value()) .isEqualTo("i_am_info");
assertEquals(value, metric.getValue());
assertEquals(System.getProperties(), infoWrapper.value()); assertEquals(System.getenv(), envWrapper.value());
assertTrue(metricList.size() > 0);
assertThat(indicator).isNotNull(); assertThat(indicator.getTimestamp()).isEqualTo(20L); assertThat(indicator.measurements()).hasSize(1); assertThat(((Measurement<?>) indicator.measurements().iterator().next()).value()) .isEqualTo("i_am_info");
assertTrue(metric != null); assertTrue(this.lookoutRegistryMetricReader.findOne(metricName) == null);
assertTrue(count > 0);
assertTrue(FluxBuilder.isPrimitiveNumber(int.class)); assertFalse(FluxBuilder.isPrimitiveNumber(boolean.class)); assertFalse(FluxBuilder.isPrimitiveNumber(String.class));
assertEquals(repairProcessor.process(entry), RepairEntryProcessor.RepairStatus.CONCURRENT_MODIFICATION);
assertEquals(2, res.size()); assertEquals(0.6, agg1.clusterProb(), 1e-2); assertArrayEquals(new double[] {0.44, 0.72}, agg1.mean().asArray(), 1e-2); assertEquals(0.23, agg2.clusterProb(), 1e-2); assertArrayEquals(new double[] {0.42, 0.85}, agg2.mean().asArray(), 1e-2);
assertTrue(intSet.containsAll(new ArrayList<Integer>() {{ add(1); add(10); }})); assertFalse(intSet.containsAll(new ArrayList<Integer>() {{ add(1); add(10); add(11); add(1025); add(1026); }})); assertFalse(intSet.containsAll(new ArrayList<Integer>() {{ add(1); add(10); add(12); }}));
assertEquals(-3, impurity.impurity(), 1e-10);
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.RUNNING, status.getState()); assertNull(status.getException()); assertEquals(1, metadataStorage.size());
assertEquals(nativeCache, springCache.getNativeCache());
assertEquals(3.0, aggregator.apply(new double[] {1.0, 2.0, 4.0}), 0.001);
assertEquals(0.49, data.pcxi(0, 0), 1e-2); assertEquals(0.50, data.pcxi(1, 0), 1e-2); assertEquals(0.18, data.pcxi(0, 1), 1e-2); assertEquals(0.81, data.pcxi(1, 1), 1e-2); assertEquals(0.49, data.pcxi(0, 2), 1e-2); assertEquals(0.50, data.pcxi(1, 2), 1e-2);
assertEquals(folds, scores.length); assertTrue(scores[i] < 0.6);
assertEquals(producer1.get(), producer2.get(), 0.0001);
assertEquals(1.333, impurity.impurity(), 1e-3);
assertThat(immutableSet.size(), is(1)); assertFalse(immutableSet.isEmpty()); assertTrue(immutableSet.contains(2)); assertFalse(immutableSet.contains(1));
assertEquals(1, res.size()); assertTrue(res.containsKey(nodeId)); assertEquals(LongRunningProcessState.RUNNING, res.get(nodeId).iterator().next().getState());
assertEquals(2, stripedExecSvc.completedTasks());
assertTrue(client.getChildren("/apacheIgnite").isEmpty()); assertTrue(client.getChildren("/apacheIgnite").isEmpty());
assertArrayEquals(expData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);
assertArrayEquals(new double[]{1, 2, 3, 4}, resFunction.getX(), 1e-10); assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(1, 2, 3, 4), resFunction.getY());
assertEquals(probs[i], counters.get(i), 0.01); assertEquals(probs.length, producer.size());
assertEquals(0.0, impurity.impurity(), 1e-10);
assertEquals(1, stripedExecSvc.queueSize());
assertEquals(2, currentlyPreparedTxs.size()); assertTrue(currentlyPreparedTxs.contains(nearXidVersion(1))); assertTrue(currentlyPreparedTxs.contains(nearXidVersion(3))); assertEquals(1, currentlyPreparedTxs.size()); assertTrue(currentlyPreparedTxs.contains(nearXidVersion(1)));
assertEquals(10., binarizationTrainer.getThreshold(), 0); assertEquals(binarizationTrainer.getThreshold(), preprocessor.getThreshold(), 0); assertArrayEquals(new double[] {0, 0, 1}, preprocessor.apply(5, VectorUtils.of(1, 10, 100)).features().asArray(), 1e-8);
assertTrue(testVector.size() == MathTestConstants.STORAGE_SIZE); assertTrue(testVector.size() == MathTestConstants.STORAGE_SIZE + MathTestConstants.STORAGE_SIZE); assertTrue(testVector.size() == MathTestConstants.STORAGE_SIZE);
assertEquals(features.length, idx.rowsCount()); assertEquals(features[0].length, idx.columnsCount()); assertEquals((double)k + 1, idx.featureInSortedOrder(k, featureId), 0.01);
assertEquals(0.0, mse, 0.0001); assertTrue(!composition.toString().isEmpty()); assertTrue(!composition.toString(true).isEmpty()); assertTrue(!composition.toString(false).isEmpty()); assertEquals(400, composition.getModels().size()); assertTrue(composition.getPredictionsAggregator() instanceof WeightedPredictionsAggregator); assertTrue(trainer.fit(learningSample, 1, new DoubleArrayVectorizer<Integer>().labeled(1)).getModels().size() < 2000);
assertNotNull(MathTestConstants.NULL_VAL, testVector.nonZeroes()); assertNotNull(MathTestConstants.NULL_VAL, testVector.nonZeroes());
assertEquals(1.333, impurity.impurity(), 1e-3);
assertArrayEquals(exp, bridge.localFullData());
assertArrayEquals(postProcessedData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-2);
assertEquals(originalMdl.predict(v), updatedOnSameDS.predict(v), 0.01); assertEquals(originalMdl.predict(v), updatedOnEmptyDS.predict(v), 0.01);
assertArrayEquals(mean, meanStat.asArray(), 0.1); assertArrayEquals(variance, varianceStat.asArray(), 0.1);
assertArrayEquals(postProcessedData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);
assertEquals(0.0, aggregator.apply(new double[] {}), 0.001);
assertEquals(1, commands.size()); assertFalse(commands.contains(GridRestCommand.VERSION));
assertEquals(-6, impurity.impurity(), 1e-10);
assertTrue(v.get(0) >= 0.); assertTrue(v.get(1) >= 0.);
assertEquals((double)2 / 3, score, 1e-12);
assertEquals(1.0, aggregator.apply(new double[]{1.0, 1.0, 1.0, 0.0}), 0.001);
assertSame(gridAffinityAssignment.getIds(0), gridAffinityAssignment.getIds(0));
assertEquals(Double.NaN, score, 1e-12);
assertEquals(Integer.valueOf(1), iter.next()); assertEquals(Integer.valueOf(2), iter.next());
assertEquals(0.666, impurity.impurity(), 1e-3);
assertEquals(1, queueSizes[0]); assertEquals(2, queueSizes[1]); assertEquals(0, queueSizes[2]);
assertFalse(ipFinder.isShared());
assertNotNull(MathTestConstants.NULL_VALUES, testVector.get(i));
assertEquals(1, stripedExecSvc.activeStripesCount());
assertEquals(CUSTOM_THREAD_NAME, Thread.currentThread().getName()); assertFalse(chained1.isDone()); assertEquals(CUSTOM_THREAD_NAME, Thread.currentThread().getName()); assertEquals(10, (int)fut.get()); assertTrue(chained1.isDone()); assertEquals(10, (int)chained1.get()); assertTrue(fut.isDone()); assertEquals("10", fut.get()); assertTrue(chained2.isDone()); assertEquals(10, (int)chained2.get());
assertEquals(Integer.valueOf(1), iter.next()); assertEquals(Integer.valueOf(2), iter.next()); assertEquals(Integer.valueOf(3), iter.next());
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.NOT_FOUND, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertTrue(ms.exists(path1)); assertArrayEquals(getExpectedMessageHeader(reqId).out().arrayCopy(), result);
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNotNull(status.getException()); assertTrue(status.getException() instanceof RuntimeException); assertEquals(0, metadataStorage.size());
assertNotNull(pageLockDump); assertEquals(expectedLog, dumpStr);
assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector.dotSelf(), Arrays.stream(data).reduce(0, (x, y) -> x + y * y), MathTestConstants.NIL_DELTA);
assertEquals((double)2 / 3, score, 1e-12);
assertFalse(new LogisticRegressionModel(weights, 1.0).isKeepingRawLabels()); assertEquals(0.1, new LogisticRegressionModel(weights, 1.0).withThreshold(0.1).threshold(), 0); assertTrue(!new LogisticRegressionModel(weights, 1.0).toString().isEmpty()); assertTrue(!new LogisticRegressionModel(weights, 1.0).toString(true).isEmpty()); assertTrue(!new LogisticRegressionModel(weights, 1.0).toString(false).isEmpty());
assertTrue(aggr.toString().length() > 0); assertTrue(aggr.toString(true).length() > 0); assertTrue(aggr.toString(false).length() > 0); assertTrue(aggregator.toString().length() > 0); assertTrue(aggregator.toString(true).length() > 0); assertTrue(aggregator.toString(false).length() > 0);
assertEquals(ex, e);
assertArrayEquals(new double[]{1, 3, 5}, resFunction.getX(), 1e-10); assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(5, 3, 1), resFunction.getY());
assertTrue(res.result().keysToRepair().isEmpty()); assertEquals(1, res.result().repairedKeys().size()); assertEquals(keyVers, entry.getValue().getPreviousValue()); assertTrue(repairMeta.fixed()); assertEquals(repairAlgorithm, repairMeta.repairAlg());
assertNull(bridge.read("oldKey")); assertEquals("newVal", bridge.read("newKey"));
assertEquals(ex, e);
assertEquals(3., normalizationTrainer.p(), 0); assertEquals(normalizationTrainer.p(), preprocessor.p(), 0); assertArrayEquals(new double[] {0.125, 0.99, 0.125}, preprocessor.apply(5, VectorUtils.of(1., 8., 1.)).features().asArray(), 1e-2);
assertEquals(1.0, metricValues.rss(), 1e-12);
assertTrue(err < 0.02);
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertEquals(0.70, res1.clusterProb(), 1e-2); assertArrayEquals(new double[] {0.580, 0.491}, res1.mean().asArray(), 1e-2); assertEquals(0.68, res2.clusterProb(), 1e-2); assertArrayEquals(new double[] {0.50, 0.50}, res2.mean().asArray(), 1e-2);
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertNotNull(MathTestConstants.NULL_VAL, testVector.getElement(i)); assertEquals(MathTestConstants.UNEXPECTED_VAL, testVector.getElement(i).get(), data[i], MathTestConstants.NIL_DELTA); assertEquals(MathTestConstants.UNEXPECTED_VAL, testVector.getElement(i).get(), data[i], MathTestConstants.NIL_DELTA);
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertEquals(ex, e);
assertTrue(v.get(0) <= 2.); assertTrue(v.get(0) >= -2.); assertTrue(v.get(1) <= 100.); assertTrue(v.get(1) >= -100.);
assertEquals(v.features().get(0), v.label(), 1e-7);
assertTrue(res.isEmpty());
assertFalse(ipFinder.isShared());
assertTrue(!records.isEmpty()); assertTrue(records.stream().anyMatch(line -> line.contains("CheckpointRecord")));
assertEquals(rowCount / 2, agg.rowCountForNewCluster()); assertEquals(rowCount, agg.totalRowCount()); assertArrayEquals(new double[] {0, 1, 2}, agg.mean().asArray(), 1e-4);
assertEquals(1, res.size()); assertTrue(res.containsKey(nodeId)); assertEquals(procId, res.get(nodeId).iterator().next());
assertFalse(hdr.isCompacted()); assertEquals(RecordSerializerFactory.LATEST_SERIALIZER_VERSION, hdr.getSerializerVersion());
assertArrayEquals(new double[] {0., 0.}, VectorGeneratorPrimitives.zero(2).get().asArray(), 1e-7);
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertEquals(features.length, idx.rowsCount()); assertEquals(features[0].length, idx.columnsCount()); assertEquals(labelsInSortedOrder[k][featureId], idx.labelInSortedOrder(k, featureId), 0.01);
assertArrayEquals(new double[] {2., 1.}, family.get().asArray(), 1e-7);
assertArrayEquals(mean.asArray(), res.mean().asArray(), 1e-4); assertArrayEquals(identity(2).times(3).getStorage().data(), res.weightedSum().getStorage().data(), 1e-4); assertEquals(4, res.rowCount());
assertEquals(0.8389830508474576, scores[0], 1e-6); assertEquals(0.9402985074626866, scores[1], 1e-6); assertEquals(0.8809523809523809, scores[2], 1e-6); assertEquals(0.9921259842519685, scores[3], 1e-6);
assertNull(histCache.get(0));
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.NOT_FOUND, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertEquals(features.length, idx.rowsCount()); assertEquals(features[0].length, idx.columnsCount()); assertArrayEquals(featuresInSortedOrder[k][featureId], idx.featuresInSortedOrder(k, featureId), 0.01);
assertArrayEquals( new double[] {0.15, 0.3, 0.}, mixture.likelihood(VectorUtils.of(1.)).asArray(), 1e-4 );
assertEquals(2, res.size()); assertTrue(res.keySet().containsAll(recheckKeys));
assertEquals("Unexpected determinant for singular matrix decomposition.", 0d, new LUDecomposition(new DenseMatrix(2, 2)).determinant(), 0d);
assertArrayEquals(standardData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);
assertThat(emptyArr.length, is(0)); assertThat(arr.length, is(3)); assertThat(arr[0], is(23)); assertThat(arr[1], is(43)); assertThat(arr[2], is(53));
assertEquals(42, res.intValue());
assertEquals(0.625, score, 1e-12);
assertTrue(err < 0.02);
assertEquals(INITIAL_CAPACITY, IntHashMap.tableSize(1)); assertEquals(MAXIMUM_CAPACITY, IntHashMap.tableSize(Integer.MAX_VALUE));
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNotNull(status.getException()); assertTrue(status.getException() instanceof RuntimeException); assertEquals(0, metadataStorage.size());
assertNotNull(springCache.get(key)); assertNotNull(springCache.get(key)); assertNotNull(springCache.get(key)); assertNull(springCache.get("key1")); assertNull(springCache.get("key2")); assertNull(springCache.get("key3"));
assertEquals("Unexpected pivot size.", rawPivot.length, pivot.size()); assertEquals("Unexpected value at " + i, rawPivot[i], (int)pivot.get(i) + 1);
assertEquals((double)2 / 3, score, 1e-12);
assertArrayEquals(file1, ((FileRespose)resp).getData()); assertArrayEquals(expected, result);
assertFalse(ms.exists("/a/b/test_dir")); assertTrue(ms.exists("/a/b")); assertArrayEquals(getExpectedMessageHeader(reqId).out().arrayCopy(), result);
assertEquals(0.7, res.clusterProb(), 1e-4); assertArrayEquals(new double[] {0.580, 0.491}, res.mean().asArray(), 1e-2);
assertArrayEquals(getExpectedMessageHeader(reqId).out().arrayCopy(), result);
assertNotNull(MathTestConstants.NULL_GUID, testVector.guid()); assertEquals(MathTestConstants.UNEXPECTED_GUID_VAL, testVector.guid(), testVector.guid()); assertFalse(MathTestConstants.EMPTY_GUID, testVector.guid().toString().isEmpty()); assertNotNull(MathTestConstants.NULL_GUID, testVector.guid()); assertEquals(MathTestConstants.UNEXPECTED_GUID_VAL, testVector.guid(), testVector.guid()); assertFalse(MathTestConstants.EMPTY_GUID, testVector.guid().toString().isEmpty());
assertEquals(1, commands.size()); assertTrue(commands.contains(GridRestCommand.LOG));
assertArrayEquals(new double[][]{{0, 2}, {1, 4}, {2, 0}, {3, 3}, {4, 1}}, features); assertArrayEquals(new double[]{4, 3, 2, 1, 0}, labels, 1e-10); assertArrayEquals(new double[][]{{2, 0}, {4, 1}, {0, 2}, {3, 3}, {1, 4}}, features); assertArrayEquals(new double[]{2, 0, 4, 1, 3}, labels, 1e-10);
assertNull(springCache.get(key)); assertNotNull(springCache.get(key)); assertNull(springCache.get(key));
assertEquals(Double.NaN, score, 1e-12);
assertEquals(nodes, resNodes);
assertFalse(chained.isDone()); assertEquals(10, (int)fut.get()); assertTrue(chained.isDone()); assertEquals(10, (int)chained.get()); assertEquals(1, lsnrCnt.get()); assertTrue(fut.isDone()); assertEquals("10", fut.get());
assertEquals("Wrong solution vector size.", testMatrix.rowSize(), sol.size()); assertEquals("Unexpected value at index " + i, 0d, sol.getX(i), 0.0000001d);
assertEquals("Unexpected value.", csvVal, vector.get(i), DEFAULT_DELTA);
assertArrayEquals(standardData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);
assertEquals(4, vec.size()); assertArrayEquals(new double[] {2., 4., 6., 100.}, vec.asArray(), 1e-7);
assertNotNull(MathTestConstants.NULL_VAL, getAbstractVector(createEmptyStorage())); assertNotNull(MathTestConstants.NULL_VAL, getAbstractVector(createStorage())); assertNotNull(MathTestConstants.NULL_VAL, testVector.getStorage());
assertArrayEquals(new double[] {0.23, 0.27, 0.079, 0.19, 0.20}, probs, 0.01);
assertTrue(emptySet.isEmpty()); assertThat(emptySet.size(), is(0));
assertArrayEquals(new double[][]{{3}, {4}, {5}}, filteredData.getFeatures()); assertArrayEquals(new double[]{3, 4, 5}, filteredData.getLabels(), 1e-10);
assertTrue(res.result().keysToRepair().isEmpty()); assertEquals(1, res.result().repairedKeys().size()); assertEquals(keyVers, entry.getValue().getPreviousValue()); assertTrue(repairMeta.fixed()); assertEquals(LATEST, repairMeta.repairAlg()); assertTrue(res.result().repairedKeys().isEmpty()); assertEquals(1, res.result().keysToRepair().size()); assertEquals(keyVers, entry.getValue());
assertNotNull(ctx); assertNotNull(data);
assertTrue(MathTestConstants.UNEXPECTED_VAL, testVector.isZero(0d)); assertFalse(MathTestConstants.UNEXPECTED_VAL, testVector.isZero(1d));
assertEquals(1, procIds.size()); assertNotNull(metadataStorage.get(procId));
assertEquals("Unexpected row size.", testU.rowSize(), luDecompositionU.rowSize()); assertEquals("Unexpected column size.", testU.columnSize(), luDecompositionU.columnSize()); assertEquals("Unexpected value at (" + i + "," + j + ").", testU.getX(i, j), luDecompositionU.getX(i, j), 0.0000001d);
assertArrayEquals(expectedMeans, preprocessor.getMeans(), 1e-8);
assertFalse(ipFinder.isShared()); assertTrue(ipFinder.isShared());
assertEquals(rowCount, sum.rowCountForNewCluster()); assertEquals(rowCount * 2, sum.totalRowCount()); assertArrayEquals(new double[] {1, 1, 1}, sum.mean().asArray(), 1e-4);
assertEquals(lbs[i], labels[i], 0);
assertTrue(msg instanceof TestMessage1); assertTrue(msg instanceof TestMessage2); assertTrue(msg instanceof TestMessage42); assertArrayEquals(directTypes, new short[] {TEST_MSG_1_TYPE, TEST_MSG_2_TYPE, TEST_MSG_42_TYPE});
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertThat(fromHash.length, is(1)); assertThat(fromHash[0], is(2)); assertThat(fromBit.length, is(1)); assertThat(fromBit[0], is(2));
assertNotNull(MathTestConstants.NULL_VAL, testVector.all()); assertNotNull(MathTestConstants.NULL_VAL, getAbstractVector(createStorage()).all());
assertTrue(records.stream().allMatch(line -> line.contains("CheckpointRecord")));
assertEquals(0.45, mixture.prob(VectorUtils.of(1.)), 1e-4);
assertEquals(-3, impurity.impurity(), 1e-10);
assertEquals(42, res.intValue());
assertTrue(testVector.size() == MathTestConstants.STORAGE_SIZE);
assertTrue(!records.isEmpty()); assertTrue(records.stream().anyMatch(line -> line.contains("CheckpointRecord")));
assertEquals(ClientStatus.SUCCESS, resp.status()); assertFalse(ms.exists(from)); assertTrue(ms.exists(to));
assertTrue(!mdl.toString().isEmpty()); assertTrue(!mdl.toString(true).isEmpty()); assertTrue(!mdl.toString(false).isEmpty());
assertEquals(1.0, data.pcxi(0, 0), 1e-4); assertEquals(0.0, data.pcxi(1, 0), 1e-4); assertEquals(0.0, data.pcxi(0, 1), 1e-4); assertEquals(1.0, data.pcxi(1, 1), 1e-4); assertEquals(1.0, data.pcxi(0, 2), 1e-4); assertEquals(0.0, data.pcxi(1, 2), 1e-4);
assertEquals(deserialized.topologyVersion(), gridAffinityAssignment2.topologyVersion());
assertArrayEquals(new double[]{1, 2, 3, 4}, resFunction.getX(), 1e-10); assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(1, 2, 3, 4), resFunction.getY());
assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5}, buckets); assertArrayEquals(new double[] {4., 7., 9., 10., 11., 12.}, sums, 0.01);
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.NOT_FOUND, status.getState()); assertNull(status.getException()); assertEquals(0, metadataStorage.size());
assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector.nonZeroElements(), Arrays.stream(data).filter(x -> x != 0d).count()); assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector.nonZeroElements(), Arrays.stream(data).filter(x -> x != 0d).count());
assertArrayEquals(new double[] {0.781, 0.468}, aggregator1.mean().asArray(), 1e-2); assertArrayEquals(new double[] {0.5, 0.5}, aggregator2.mean().asArray(), 1e-2); assertEquals(0.4, aggregator1.clusterProb(), 1e-4); assertEquals(1.0, aggregator2.clusterProb(), 1e-4);
assertEquals(1, res.size()); assertTrue(res.containsKey(nodeId)); assertEquals(LongRunningProcessState.RUNNING, res.get(nodeId).iterator().next().getState());
assertNotNull(wrp); assertEquals(42, wrp.i); assertNull(wrp.o);
assertTrue(strLog.toString().contains("LongJVMPauseDetector was successfully started"));
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNull(status.getException()); assertEquals(1, metadataStorage.size());
assertEquals(42, partitions);
assertEquals(0, incorrect);
assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector.get(i), Math.exp(data[i]), MathTestConstants.NIL_DELTA);
assertArrayEquals(postProcessedData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);
assertTrue(intSet.contains(1)); assertFalse(intSet.contains(2)); assertFalse(intSet.contains(3)); assertFalse(intSet.contains(4)); assertTrue(intSet.contains(10)); assertTrue(intSet.contains(11)); assertFalse(intSet.contains(1024)); assertTrue(intSet.contains(1025));
assertFalse(log.contains("jvm-pause-detector-worker has been interrupted.")); assertTrue(log.contains("jvm-pause-detector-worker has been stopped."));
assertTrue(tree instanceof DecisionTreeConditionalNode); assertEquals(0, node.getThreshold(), 1e-3); assertTrue(node.getThenNode() instanceof DecisionTreeLeafNode); assertTrue(node.getElseNode() instanceof DecisionTreeLeafNode); assertEquals(1, thenNode.getVal(), 1e-10); assertEquals(0, elseNode.getVal(), 1e-10);
assertArrayEquals(expectedSigmas, preprocessor.getSigmas(), 1e-8);
assertEquals("Unexpected value.", csvVal, matrix.get(i, j), DEFAULT_DELTA);
assertEquals(0.75, score, 1e-12);
assertEquals(outItf.checkAfterUnmarshalled(), 17);
assertEquals(0.75, score, 1e-12);
assertEquals(cacheName, springCache.getName());
assertEquals(producer1.get(), producer2.get(), 0.0001);
assertThat(value, is(instanceOf(String.class))); assertEquals(asList("key1", "key2", "key3"), keys); assertEquals(asList("val1", "val2", "val3"), values);
assertEquals(1, res.size()); assertTrue(res.containsKey(nodeId)); assertEquals(LongRunningProcessState.RUNNING, res.get(nodeId).iterator().next().getState());
assertTrue(!records.isEmpty()); assertTrue(records.stream().anyMatch(line -> line.contains("CheckpointRecord")));
assertArrayEquals(new double[]{1, 2, 3, 4}, resFunction.getX(), 1e-10); assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(1, 2, 3, 4), resFunction.getY());
assertEquals(1, completedTaks[0]); assertEquals(1, completedTaks[1]); assertEquals(0, completedTaks[2]);
assertEquals(0.0, impurity.impurity(), 1e-10);
assertEquals(0, directPositionMap.distance(14, 1)); assertEquals(1, directPositionMap.distance(15, 1)); assertEquals(2, directPositionMap.distance(0, 1)); assertEquals(3, directPositionMap.distance(1, 1)); assertEquals(4, directPositionMap.distance(2, 1)); assertEquals(5, directPositionMap.distance(3, 1)); assertEquals(15, directPositionMap.distance(13, 1));
assertEquals(42, res.intValue()); assertEquals(1, cnt.intValue());
assertEquals(42, part);
assertNull(springCache.putIfAbsent(key, expected)); assertEquals(expected, springCache.putIfAbsent(key, "wrongValue").get()); assertEquals(expected, springCache.get(key).get());
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertEquals(producer1.get(), producer2.get(), 0.0001);
assertFalse(statuses[0]); assertTrue(statuses[1]); assertFalse(statuses[0]);
assertEquals(0.75, metricValues.accuracy(), 1e-12);
assertEquals(1, statuses.size()); assertEquals(LongRunningProcessState.DONE, status.getState()); assertNotNull(status.getException()); assertTrue(status.getException() instanceof RuntimeException); assertEquals(1, metadataStorage.size());
assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector.foldMap(testVector1, (string, xi) -> string.concat(xi.toString()), Functions.PLUS, ""), testVal.toString());
assertEquals(1000L, strategy.nextTimeout()); assertEquals(1000L, strategy.nextTimeout(1000L)); assertEquals(2000L, strategy.nextTimeout()); assertEquals(1000L, strategy.nextTimeout(1000L)); assertEquals(2000L, strategy.nextTimeout(2000L)); assertEquals(3000L, strategy.nextTimeout()); assertEquals(3000L, strategy.nextTimeout()); assertEquals(100L, strategy.nextTimeout(100L));
assertEquals(1, procIds.size()); assertNotNull(metadataStorage.get(procId)); assertEquals(true, fut.isDone());
assertNull(springCache.get(key)); assertEquals(value, springCache.get(key).get());
assertEquals(0.5, score, 1e-12);
assertEquals(42, res.intValue());
assertEquals(Integer.valueOf(i), infMdl.predict(i));
assertArrayEquals(expectedData[i], preprocessor.apply(i, VectorUtils.of(inputData[i])).features().asArray(), 1e-8);
assertTrue(res.result().keysToRepair().isEmpty()); assertEquals(1, res.result().repairedKeys().size()); assertEquals(keyVers, entry.getValue().getPreviousValue()); assertTrue(repairMeta.fixed()); assertEquals(repairAlgorithm, repairMeta.repairAlg());
assertTrue(validValues.contains(vector.get(0)));
assertEquals("Unexpected row size.", testL.rowSize(), luDecompositionL.rowSize()); assertEquals("Unexpected column size.", testL.columnSize(), luDecompositionL.columnSize()); assertEquals("Unexpected value at (" + i + "," + j + ").", testL.getX(i, j), luDecompositionL.getX(i, j), 0.0000001d);
assertEquals(0.5, score, 1e-12);
assertEquals(3, client.getChildren("/apacheIgnite").size());
assertArrayEquals(new double[]{1, 3, 5}, resFunction.getX(), 1e-10); assertArrayEquals(TestImpurityMeasure.asTestImpurityMeasures(1, 3, 5), resFunction.getY());
assertEquals("Wrong solution matrix row size.", testMatrix.rowSize(), sol.rowSize()); assertEquals("Wrong solution matrix column size.", testMatrix.rowSize(), sol.columnSize()); assertEquals("Unexpected P value at (" + row + "," + col + ").", 0d, sol.getX(row, col), 0.0000001d);
assertEquals(8_000, ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(1000, 5000, 3)); assertEquals(45_000, ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(5_000, 60_000, 3));
assertEquals(Integer.valueOf(i), infMdl.predict(i).get());
assertEquals(res.size(), 16);
assertEquals(0.75, aggregator.apply(new double[]{1.0, 1.0, 1.0, 0.0}), 0.001);
assertEquals(0, calculator.getLabelCode(0.0)); assertEquals(1, calculator.getLabelCode(1.0)); assertEquals(2, calculator.getLabelCode(2.0));
assertTrue(((FilesListResponse)resp).getFilesList().containsAll(Arrays.asList(file1path, file2path))); assertArrayEquals(expected, result);
assertTrue(mdl.getPredictionsAggregator() instanceof OnMajorityPredictionsAggregator); assertEquals(5, mdl.getModels().size());
assertArrayEquals(vec.copy().asArray(), VectorGeneratorPrimitives.constant(vec).get().asArray(), 1e-7);
assertEquals("Unexpected row size.", testP.rowSize(), luDecompositionP.rowSize()); assertEquals("Unexpected column size.", testP.columnSize(), luDecompositionP.columnSize()); assertEquals("Unexpected value at (" + i + "," + j + ").", testP.getX(i, j), luDecompositionP.getX(i, j), 0.0000001d);
assertEquals(MathTestConstants.VAL_NOT_EQUALS, testVector, testVector); assertTrue(MathTestConstants.VAL_NOT_EQUALS, testVector1.equals(testVector2)); assertFalse(MathTestConstants.VALUES_SHOULD_BE_NOT_EQUALS, testVector1.equals(testVector));
assertTrue(res.isEmpty());
assertEquals(42, res.intValue());
assertEquals(mean, meanStat, 0.01); assertEquals(variance, varianceStat, 0.1);
assertEquals(mean, meanStat, 0.01); assertEquals(variance, varianceStat, 0.1);
assertEquals(ClientStatus.FAILED, resp.status()); assertFalse(resp.error().isEmpty());
assertTrue("1234-567890-1 is valid format", hid.isValidFormat());
assertTrue("1610255800005 should be valid", CitizenId.isValid("1610255800005")); assertTrue("1610255811112 should be valid", CitizenId.isValid("1610255811112")); assertTrue("1610255822220 should be valid", CitizenId.isValid("1610255822220")); assertTrue("pretty format id should be valid", CitizenId.isValid("1-6102-55800-00-5"));
assertFalse("not repeating number must return false", TextUtils.isRepeatingNumber("029209355")); assertTrue("repeating number must return true", TextUtils.isRepeatingNumber("111111111")); assertTrue("repeating number must return true", TextUtils.isRepeatingNumber("222222222"));
assertEquals(1988, datePickerDialog.getYear()); assertEquals(SEPTEMBER, datePickerDialog.getMonth()); assertEquals(21, datePickerDialog.getDayOfMonth());
assertFalse("Not Only Digit citizen-id, must be invalid", CitizenId.isValid("1a3456789101b")); assertFalse("citizen-id length more than 13, must be invalid", CitizenId.isValid("12345678910124")); assertFalse("citizen-id length less than 13, must be invalid", CitizenId.isValid("00000"));
assertFalse("0012300000000 should be invalid", CitizenId.isValid("0012300000000")); assertFalse("1345678981235 should be invalid", CitizenId.isValid("1345678981235"));
assertEquals("calculate check digit result should be 2", 2, cid.calculateCheckDigit()); assertEquals("calculate check digit result should be 5", 5, cid.calculateCheckDigit());
assertFalse("not repeating number must return false", TextUtils.isRepeatPatternNumber("029209355")); assertTrue("repeat pattern number must return true", TextUtils.isRepeatPatternNumber("123123123")); assertTrue("repeat pattern number must return true", TextUtils.isRepeatPatternNumber("00010001")); assertTrue("repeating number must also return true", TextUtils.isRepeatPatternNumber("222222222"));
assertEquals("10", bangkok.getProvinceCode());
assertEquals(6, regions.size());
assertEquals("", areaPicker.getText());
assertEquals("pretty print should work", "7402-074996-5", hid.prettyPrint()); assertEquals("pretty print should work with not complete id", "7402-074", hid.prettyPrint()); assertEquals("pretty print should work with not complete id", "7402", hid.prettyPrint()); assertEquals("pretty print should work with not complete id", "7402-074996", hid.prettyPrint());
assertEquals("check digit should be 3", 3, cid.getCheckDigit()); assertEquals("check digit should be 5", 5, cid.getCheckDigit()); assertEquals("check digit should be -1", -1, cid.getCheckDigit());
assertEquals(31, newCalendar.get(DAY_OF_MONTH)); assertEquals(MARCH, newCalendar.get(MONTH)); assertEquals(2016, newCalendar.get(YEAR)); assertEquals(31, newCalendar.getActualMaximum(DAY_OF_MONTH)); assertEquals(29, newCalendar.get(DAY_OF_MONTH));
assertTrue("input only digit should return true", TextUtils.isDigitOnly("12346")); assertTrue("input only digit should return true", TextUtils.isDigitOnly("222222222")); assertFalse("input not only digit should return false", TextUtils.isDigitOnly("123adc")); assertFalse("empty should return false", TextUtils.isDigitOnly(""));
assertFalse("repeat number with valid check digit should be Invalid", cid.validate()); assertFalse("repeat pattern number with valid check digit should be Invalid", cid.validate());
assertEquals("pretty Print not as except ", "1-6102-55822-22-0", cid.prettyPrint()); assertEquals("pretty Print not as except ", "1-6102-55811-11-2", cid.prettyPrint()); assertEquals("pretty Print not as except ", "1-6102-5", cid.prettyPrint());
assertEquals("2 Object with same id should be equal", c1, c2);
assertTrue("12345678901 is valid format id", hid.isValidFormat());
assertEquals("embedded order", order.toString(), msg.getString(EncodedText.FIELD));
assertTrue("Message should be invalid", badMessage); assertTrue("Message should be valid (" + e.getMessage() + ")", false); assertEquals("8=FIX.4.2\\0019=12\\00135=A\\001108=30\\00110=026\\001", message.toString());
assertTrue(messageCracked > 0);
assertNotNull(sessionDictionary); assertNotNull(appDictionary);
assertTrue(message.isSetField(12)); assertTrue(!message.isSetField(12));
assertNull(strategy.getSessionConnector());
assertThat(dd, is(notNullValue())); assertThat(dd.getVersion(), is(FixVersions.BEGINSTRING_FIX40));
assertNotNull(msg.toString()); assertTrue("empty message contains no checksum", msg.toString().length() > 0);
assertTrue(messageCracked > 0);
assertEquals("wrong field value", 40, message.getHeader().getInt(BodyLength.FIELD)); assertEquals("wrong value", "D", valueMessageType.getString(RefMsgType.FIELD)); assertEquals("wrong value", "R", valueMessageType.getString(MsgDirection.FIELD)); assertEquals("wrong value", "8", valueMessageType.getString(RefMsgType.FIELD)); assertEquals("wrong value", "S", valueMessageType.getString(MsgDirection.FIELD));
assertNotNull(sessDictionary); assertNotNull(appDictionary);
assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertFalse(message.isAdmin()); assertFalse(message.isAdmin());
assertEquals("FOO", hops.getString(HopCompID.FIELD)); assertEquals("BAR", hops.getString(HopCompID.FIELD));
assertThat(e.getMessage(), containsString(" 999"));
assertThat(e.getMessage(), containsString("Unknown or unsupported ApplVerID"));
assertTrue(messageCracked > 0);
assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(3, state.getNextTargetMsgSeqNum());
assertThat(e.getCause(), is(ConfigError.class));
assertEquals(1, state.getNextSenderMsgSeqNum()); assertEquals(1, state.getNextTargetMsgSeqNum()); assertEquals(1, application.toAdminMessages.size()); assertEquals(MsgType.LOGON, message.getHeader().getString(MsgType.FIELD)); assertEquals(0, application.sessionResets); assertTrue("Session should be connected", session.isLoggedOn()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum());
assertEquals("ABCD", m.getHeader().getString(SecureData.FIELD));
assertTrue(messageCracked > 0);
assertNotNull(dictionary);
assertTrue(messageCracked > 0);
assertTrue(Message.isHeaderField(ApplVerID.FIELD)); assertTrue(Message.isHeaderField(CstmApplVerID.FIELD));
assertNotNull("No exception message", emsg); assertTrue(emsg.startsWith("Incorrect NumInGroup"));
assertNotNull(dictionary);
assertTrue("Message should be empty on construction", message.isEmpty()); assertFalse("Header should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty()); assertFalse("Body should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty()); assertFalse("Trailer should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty());
assertTrue(messageCracked > 0);
assertTrue(messageCracked > 0);
assertNotNull(sendReceipt.getEmail()); assertEquals(sendReceipt.getEmail().getLocale(), "en-US");
assertTrue(receipt instanceof APIReceipt);
assertTrue(receipt instanceof SnippetReceipt);
assertTrue(emails.length > 0);
assertNotNull(sendReceipt.getEmail()); assertEquals(sendReceipt.getEmail().getLocale(), "en-US");
assertNotNull(snippets); assertTrue(snippets.length > 0); assertNotNull(snippets[0]); assertEquals("test-snippet", snippets[0].getName());
assertTrue(receipt instanceof SnippetReceipt);
assertNotNull(snippet); assertTrue(snippet instanceof Snippet);
assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(WarcModule.class, info.getModule().getClass()); assertEquals(Arrays.asList(wm.getName()), info.getSigMatch());
assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(WarcModule.class, info.getModule().getClass()); assertEquals(Arrays.asList(wm.getName()), info.getSigMatch());
assertTrue(mix20File.isFile()); assertEquals("Mix v2.0 generated not conformant", expectedMix20, generatedMix);
assertTrue(mix02File.isFile()); assertEquals("Mix v0.2 generated not conformant", expectedMix02, generatedMix);
assertTrue( gzipFile.isFile() ); assertEquals(RepInfo.FALSE, info.getWellFormed()); assertEquals(RepInfo.FALSE, info.getValid()); assertTrue(info.getSigMatch().isEmpty()); assertEquals(1, info.getMessage().size()); assertEquals(1, messages.size()); assertNotNull(errorMessage); assertTrue(errorMessage + " should contain " + DataFormatException.class.toString(), errorMessage.contains(DataFormatException.class.getCanonicalName())); assertFalse(messageKeyIterator.hasNext());
assertEquals(expected, result);
assertTrue( gzipFile.isFile() ); assertEquals(RepInfo.FALSE, info.getWellFormed()); assertEquals(RepInfo.FALSE, info.getValid()); assertTrue(info.getSigMatch().isEmpty()); assertEquals(1, info.getMessage().size()); assertEquals(1, messages.size()); assertEquals(1, messages.get(DiagnosisType.INVALID_EXPECTED.name()).intValue());
assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(GzipModule.class, info.getModule().getClass()); assertEquals(Arrays.asList(gzm.getName()), info.getSigMatch());
assertEquals(expected, result);
assertTrue( gzipFile.isFile() ); assertEquals(RepInfo.FALSE, info.getWellFormed()); assertEquals(RepInfo.FALSE, info.getValid()); assertTrue(info.getSigMatch().isEmpty()); assertEquals(1, info.getMessage().size()); assertEquals(1, messages.size()); assertEquals(1, messages.get(DiagnosisType.ERROR_EXPECTED.name()).intValue());
assertEquals(expected, result);
assertTrue( warcFile.isFile() ); assertEquals(0, info.getMessage().size());
assertTrue(mix02File.isFile()); assertEquals("Mix v0.2 generated not conformant", expectedMix02, generatedMix);
assertTrue(mix10File.isFile()); assertEquals("Mix v1.0 generated not conformant", expectedMix10, generatedMix);
assertEquals(expected, result);
assertEquals(instance.getVersion(), "0.1.2-TESTER");
assertSame(instance, secondInstance);
assertTrue(mix10File.isFile()); assertEquals("Mix v1.0 generated not conformant", expectedMix10, generatedMix);
assertTrue(mix20File.isFile()); assertEquals("Exif Mix v2.0 generated not conformant", expectedMix20, generatedMix);
assertTrue( gzipFile.isFile() ); assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(RepInfo.TRUE, info.getValid()); assertEquals(Arrays.asList(gzm.getName()), info.getSigMatch()); assertEquals(0, info.getMessage().size()); assertEquals(1, info.getProperty().size()); assertNotNull(info.getProperty().get(RECORDS)); assertEquals(3, ((List<Property>)info.getProperty().get(RECORDS).getValue()).size());
assertTrue(mix20File.isFile()); assertEquals("Mix v2.0 generated not conformant", expectedMix20, generatedMix);
assertTrue(mix20File.isFile()); assertEquals("Mix v2.0 generated not conformant", expectedMix20, generatedMix);
assertTrue( gzipFile.isFile() ); assertEquals(RepInfo.FALSE, info.getWellFormed()); assertEquals(RepInfo.FALSE, info.getValid()); assertTrue(info.getSigMatch().isEmpty()); assertEquals(1, info.getMessage().size()); assertEquals(1, messages.size()); assertEquals(1, messages.get(DiagnosisType.INVALID_EXPECTED.name()).intValue());
assertEquals("sRGB2014", profileName);
assertEquals( "{\\"jhove\\":{" + APP_JSON + "}}", result);
assertFalse(profile.satisfiesThisProfile(ifd)); assertFalse(profile.satisfiesThisProfile(ifd)); assertFalse(profile.satisfiesThisProfile(ifd));
assertEquals(1, info.getMessage().size()); assertEquals(1, messages.size()); assertEquals(1, messages.get(DiagnosisType.ERROR_EXPECTED.name()).intValue());
assertTrue(mix10File.isFile()); assertEquals("Exif Mix v1.0 generated not conformant", expectedMix10, generatedMix);
assertEquals(instance.getBuildDate(), date);
assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(GzipModule.class, info.getModule().getClass()); assertEquals(Arrays.asList(gzm.getName()), info.getSigMatch());
assertTrue(mix02File.isFile()); assertEquals("Exif Mix v0.2 generated not conformant", expectedMix02, generatedMix);
assertEquals(expected, result);
assertEquals(expected, result);
assertNull(actual);
assertTrue(formatter != null); assertTrue(formatter.getClass().getName(), formatter instanceof MyCustomSerializer);
assertEquals(-321L, timestampedEvent.getTimestamp()); assertEquals("-321", timestampedEvent.getHeaders().get("timestamp"));
assertTrue(build(context).intercept(event).getHeaders().get(ID).startsWith("bar#"));
assertThat(withoutTimeZone, not(equalTo(timeToVerify)));
assertEquals("", hostname);
assertEquals(1, configurationErrors.size());
assertEquals(10, source.getSourceCounter().getEventAcceptedCount()); assertEquals(10, source.getSourceCounter().getEventReceivedCount());
assertNotNull(msgEmptyDir, files); assertTrue(msgEmptyDir, files.isEmpty());
assertTrue(build(context).intercept(event).getHeaders().get(ID).length() > 0);
assertEquals(-999L, timestampedEvent.getTimestamp()); assertEquals("-999", timestampedEvent.getHeaders().get("@timestamp")); assertNull(timestampedEvent.getHeaders().get("timestamp"));
assertEquals(1, configurationErrors.size());
assertTrue(formatter != null); assertTrue(formatter.getClass().getName(), formatter instanceof HDFSWritableSerializer);
assertEquals("Latin1: ()\\nLong: ()\\nNonUnicode: ()\\n", sb.toString());
assertThat(o, instanceOf(ElasticSearchTransportClient.class));
assertTrue(formatter != null); assertTrue(formatter.getClass().getName(), formatter instanceof HDFSTextSerializer);
assertEquals(1, configurationErrors.size());
assertEquals(msgSubDirs, 1, files.size()); assertTrue(msgSubDirs, files.contains("outerFile"));
assertNull(des.readEvent());
assertEquals(8, lineNum); assertEquals(7, lineNum); assertEquals(9, lineNum); assertEquals(30, lineNum); assertEquals(6, lineNum); assertEquals(9, Integer.parseInt(readLine(in, LINE_LEN).substring(0, 10))); assertEquals(10, Integer.parseInt(readLine(in, LINE_LEN).substring(0, 10))); assertEquals(11, Integer.parseInt(readLine(in, LINE_LEN).substring(0, 10)));
assertNull(configFilter.filter("unknown"));
assertEquals("localhost", hostname);
assertEquals(Collections.EMPTY_MAP, event.getHeaders()); assertEquals(TEXT, new String(event.getBody(), Charsets.UTF_8));
assertEquals(FIXED_TIME_MILLIS, timestampedEvent.getTimestamp()); assertEquals(String.valueOf(FIXED_TIME_MILLIS), timestampedEvent.getHeaders().get("timestamp"));
assertEquals(1, configurationErrors.size());
assertEquals("127.0.0.1", ip);
assertEquals("test1", fixture.get()); assertEquals("test2", fixture.get()); assertEquals("test1", fixture.get()); assertEquals("test2", fixture.get()); assertEquals("test1", fixture.get());
assertEquals("Invalid: (X)\\n".replaceAll("X", "\\ufffd"), sb.toString());
assertEquals(1, configurationErrors.size());
assertEquals("Coordinated Universal Time", indexNameBuilder.getFastDateFormat().getTimeZone().getDisplayName());
assertEquals(batchSize, events.size());
assertEquals(output, result1); assertEquals(output, result2); assertNull("Should be null: " + result3, result3);
assertEquals("", ip);
assertThat(withoutTimeZone, not(equalTo(timeToVerify)));
assertEquals("bar", reader.read(null, decoder).get("foo").toString()); assertEquals("bar", reader.read(null, decoder).get("foo").toString()); assertEquals("baz", reader.read(null, decoder).get("foo").toString()); assertEquals("baz", reader.read(null, decoder).get("foo").toString()); assertNull(deserializer.readEvent());
assertEquals(batchSize, events.size());
assertEquals(FILTERED, configFilter.filter(MY_PASSWORD_KEY)); assertEquals(FILTERED_2, configFilter.filter(MY_PASSWORD_KEY_2));
assertNotNull(msgNoMatch, files); assertTrue(msgNoMatch, files.isEmpty());
assertEquals(batchSize, events.size());
assertThat(withoutTimeZone, not(equalTo(timeToVerify)));
assertEquals(1, configurationErrors.size());
assertEquals("foo", build(context).intercept(event).getHeaders().get(ID));
assertEquals("", ip);
assertEquals(batchSize, events.size());
assertEquals("", hostname);
assertEquals(4, configurationErrors.size());
assertThat(o, instanceOf(ElasticSearchRestClient.class));
assertEquals(1, source.getSourceCounter().getEventReadFail());
assertEquals(1, source.getSourceCounter().getChannelWriteFail());
assertEquals(5, list.getSize());
assertNotNull(users); assertEquals(5, users.length); assertNotNull(user); assertEquals("foo" + startIndex++, user.getUserName()); assertNotNull(users); assertEquals(3, users.length); assertNotNull(user); assertEquals("foo" + startIndex++, user.getUserName()); assertNotNull(users); assertEquals(3, users.length); assertNotNull(user); assertEquals("foo" + startIndex++, user.getUserName());
assertThat(decode(FOUR_BYTES_ENCODED_TOO_GREAT_F4), is(nullValue())); assertThat(decode(FOUR_BYTES_ENCODED_TOO_GREAT_F5), is(nullValue()));
assertThat(returned, is(value));
assertThat(decode(TWO_BYTES_ENCODED_OVERLONG3A), is(nullValue())); assertThat(decode(TWO_BYTES_ENCODED_OVERLONG3B), is(nullValue()));
assertThat(Route.of("GET", "/foo").method(), is("GET")); assertThat(Route.of("FOOBAR", "/foo").method(), is("FOOBAR"));
assertThat(decode(TWO_BYTES_ENCODED).toString(), is(TWO_BYTES)); assertThat(decode(TWO_BYTES_MIN_ENCODED).toString(), is(TWO_BYTES_MIN)); assertThat(decode(TWO_BYTES_MAX_ENCODED).toString(), is(TWO_BYTES_MAX));
assertThat(decode(ONE_BYTE_ENCODED_OVERLONG2), is(nullValue()));
assertThat(decode(THREE_BYTES_ENCODED_INVALID1), is(nullValue())); assertThat(decode(THREE_BYTES_ENCODED_INVALID2), is(nullValue())); assertThat(decode(THREE_BYTES_ENCODED_A_PERCENT_INVALID), is(nullValue()));
assertThat(decode(TWO_BYTES_ENCODED_INVALID), is(nullValue())); assertThat(decode(TWO_BYTES_ENCODED_PERCENT_INVALID), is(nullValue()));
assertThat(decode(FOUR_BYTES_ENCODED_INVALID1), is(nullValue())); assertThat(decode(FOUR_BYTES_ENCODED_INVALID2), is(nullValue())); assertThat(decode(FOUR_BYTES_ENCODED_INVALID3), is(nullValue())); assertThat(decode(FOUR_BYTES_ENCODED_PERCENT_INVALID), is(nullValue()));
assertThat(Route.of(method, path).toString(), is(method + " " + path));
assertThat(decode(FOUR_BYTES_ENCODED).toString(), is(FOUR_BYTES)); assertThat(decode(FOUR_BYTES_MAX_ENCODED).toString(), is(FOUR_BYTES_MAX));
assertThat(decode(THREE_BYTES_ENCODED_A).toString(), is(THREE_BYTES_A)); assertThat(decode(THREE_BYTES_ENCODED_B).toString(), is(THREE_BYTES_B)); assertThat(decode(THREE_BYTES_MIN_ENCODED).toString(), is(THREE_BYTES_MIN)); assertThat(decode(THREE_BYTES_MAX_ENCODED).toString(), is(THREE_BYTES_MAX));
assertThat(decoded.toString(), is(s));
assertThat(decode(TWO_BYTES_ENCODED_OVERLONG4), is(nullValue()));
assertThat(decode(THREE_BYTES_ENCODED_OVERLONG4), is(nullValue()));
assertThat(decode(ONE_BYTE_ENCODED).toString(), is(ONE_BYTE)); assertThat(decode(ONE_BYTE_MIN_ENCODED).toString(), is(ONE_BYTE_MIN)); assertThat(decode(ONE_BYTE_MAX_ENCODED).toString(), is(ONE_BYTE_MAX));
assertThat(String.valueOf(decode(encoded)), is(expected));
assertThat(trie.toString(), not(Matchers.isEmptyOrNullString())); assertThat(trie.toString(), not(Matchers.isEmptyOrNullString())); assertThat(trie.toString(), not(Matchers.isEmptyOrNullString())); assertThat(trie.toString(), not(Matchers.isEmptyOrNullString()));
assertThat(Route.of("GET", path).pathString(), is(path));
assertEquals(mBuilder.getTextColor(), 0xFFFF0000); assertEquals(mLayout.getPaint().getColor(), 0xFFFF0000);
assertEquals(mBuilder.getBreakStrategy(), 1);
assertEquals(mBuilder.getTextSize(), 10.0f, 0.0f); assertEquals(mLayout.getPaint().getTextSize(), 10.0f, 0.0f);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 25);
assertEquals(mBuilder.getGlyphWarmer(), glyphWarmer);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 10);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 27);
assertEquals(mBuilder.getShouldWarmText(), true);
assertEquals(mBuilder.getIncludeFontPadding(), false);
assertEquals(mBuilder.getTextDirection(), TextDirectionHeuristicsCompat.LOCALE);
assertEquals(mBuilder.getShouldCacheLayout(), false);
assertEquals(mBuilder.getText(), "Android"); assertEquals(mLayout.getText(), "Android");
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 25);
assertEquals(mBuilder.getEllipsize(), TextUtils.TruncateAt.MARQUEE);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 10);
assertEquals(mBuilder.getMaxLines(), 10.0f, 0.0f);
assertEquals(mBuilder.getJustificationMode(), 1);
assertEquals(mBuilder.getTextSpacingMultiplier(), 1.5f, 0.0f); assertEquals(mLayout.getSpacingMultiplier(), 1.5f, 0.0f);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 10);
assertEquals(mBuilder.getTypeface(), Typeface.MONOSPACE);
assertEquals(mBuilder.getTextSpacingExtra(), 10.0f, 0.0f); assertEquals(mLayout.getSpacingAdd(), 10.0f, 0.0f);
assertEquals(mBuilder.getHyphenationFrequency(), 1);
assertEquals(mBuilder.getAlignment(), Layout.Alignment.ALIGN_CENTER); assertEquals(mLayout.getAlignment(), Layout.Alignment.ALIGN_CENTER);
assertEquals(LayoutMeasureUtil.getHeight(mLayout), 10);
assertEquals(mBuilder.getSingleLine(), true);
assertEquals(mBuilder.getLinkColor(), 0xFFFF0000); assertEquals(mLayout.getPaint().linkColor, 0xFFFF0000);
assertEquals(true, configuration.isIgnoreBlankRows());
assertNotNull(createActivity);
assertNotNull("The type for the port \'parameters\' could not be found", activity.getTypeDescriptorForInputPort("parameters")); assertTrue( "The type for the port \'parameters\' shoule be complex", activity.getTypeDescriptorForInputPort("parameters") instanceof ComplexTypeDescriptor); assertNull("There should be no type descriptor for \'fred\' port", activity.getTypeDescriptorForInputPort("fred"));
assertTrue(URISignatureHandler .isValid(validURI_PlaceholdersInMainPartOfURIOnly));
assertFalse(URISignatureHandler .isValid(badURI_DoubleOpeningSymbolsNoClosingSymbol));
assertSame(configBean, activity.getConfiguration());
assertEquals(5, range.getEnd());
assertFalse(URISignatureHandler.isValid(badURI_DuplicatePlaceholders));
assertFalse(URISignatureHandler.isValid(badURI_nullURI));
assertEquals(Collections.EMPTY_MAP, configuration.getColumnNames());
assertEquals(true, configuration.isExcludeFirstRow());
assertTrue(URISignatureHandler .isValid(validURI_PlaceholdersInQueryStringOnly));
assertEquals(SpreadsheetOutputFormat.PORT_PER_COLUMN, configuration.getOutputFormat());
assertEquals(Collections.singletonMap("A", "alpha"), configuration.getColumnNames());
assertTrue(range.contains(2)); assertTrue(range.contains(5)); assertFalse(range.contains(4));
assertTrue(URISignatureHandler.isValid(validURI_MultipleQueryString));
assertEquals("There should be only 1 processor",1,dataflow.getProcessors().size()); assertEquals("The processor should be called run_eInfo","run_eInfo",dataflow.getProcessors().get(0).getLocalName()); assertEquals("There should be no datalinks",0,dataflow.getLinks().size());
assertEquals( "unexpected xml", "<s:extensions xmlns:s=\\"http: xml);
assertEquals(false, configuration.isExcludeFirstRow());
assertNotNull(activity); assertNull(activity.getConfiguration());
assertEquals(URI.create(BeanshellActivity.URI), factory.getActivityType());
assertEquals(1, range.getStart());
assertFalse(URISignatureHandler.isValid(badURI_DoubleClosingSymbols));
assertNull(spreadsheetReadException.getMessage()); assertNull(spreadsheetReadException.getCause());
assertNotNull(placeholders); assertEquals(5, placeholders.size()); assertEquals("Wrong first placeholder", "catalogue", placeholders.get(0)); assertEquals("Wrong second placeholder", "count?", placeholders.get(1)); assertEquals("Wrong third placeholder", "startPage?", placeholders.get(2)); assertEquals("Wrong fourth placeholder", "startIndex?", placeholders.get(3)); assertEquals("Wrong fifth placeholder", "searchTerms?", placeholders.get(4));
assertEquals("operation namespace is wrong", "urn:xmethods-CurrencyExchange", operationNamespace);
assertTrue(factory.getActivityConfigurationSchema() instanceof JsonNode);
assertTrue("Wrong type of builder, it should be Literal based",builder instanceof LiteralBodyBuilder);
assertNotNull("there should be an output named \'output\'",outputMap.containsKey("output")); assertTrue(xml.contains("<block xmlns=\\"\\"></block>")); assertTrue(xml.contains("<version xmlns=\\"\\" " + "xmlns:xsi=\\"http: "xsi:nil=\\"true\\" />"));
assertTrue("Wrong type of builder, it should be Literal based",builder instanceof LiteralBodyBuilder);
assertEquals(false, configuration.isIgnoreBlankRows());
assertTrue(URISignatureHandler.isValid(validURI_3MixedPlaceholders));
assertFalse(URISignatureHandler.isValid(badURI_emptyURI));
assertEquals("operation element name is wrong", "GetListRequest", operationQName.getLocalPart());
assertEquals(Status.SEVERE, healthChecker.visit(activity, ancestors).getStatus()); assertEquals(Status.OK, healthChecker.visit(activity, ancestors).getStatus());
assertEquals("[1..5]", range.toString());
assertEquals(new Range(0, 1), configuration.getColumnRange());
assertEquals(0, SpreadsheetUtils.getColumnIndex("A")); assertEquals(4, SpreadsheetUtils.getColumnIndex("E")); assertEquals(25, SpreadsheetUtils.getColumnIndex("Z")); assertEquals(26, SpreadsheetUtils.getColumnIndex("AA")); assertEquals(457833, SpreadsheetUtils.getColumnIndex("ZAFZ"));
assertEquals("", configuration.getEmptyCellValue());
assertTrue("Is is the wrong type, it should be LiteralBodyBuilder",builder instanceof LiteralBodyBuilder);
assertNotNull(createActivity);
assertTrue(range.contains(4));
assertFalse(URISignatureHandler.isValid(badURI_DoubleOpeningSymbols));
assertEquals("Style should default to document if missing", "document", parser.getStyle());
assertFalse(URISignatureHandler .isValid(badURI_SingleOpeningSymbolNoClosingSymbol));
assertEquals("XXXX", configuration.getEmptyCellValue());
assertEquals(SpreadsheetEmptyCellPolicy.GENERATE_ERROR, configuration.getEmptyCellPolicy()); assertEquals(SpreadsheetEmptyCellPolicy.USER_DEFINED, configuration.getEmptyCellPolicy()); assertEquals(SpreadsheetEmptyCellPolicy.EMPTY_STRING, configuration.getEmptyCellPolicy());
assertEquals(false, configuration.isAllRows());
assertEquals(SpreadsheetOutputFormat.PORT_PER_COLUMN, configuration.getOutputFormat()); assertEquals(SpreadsheetOutputFormat.SINGLE_PORT, configuration.getOutputFormat());
assertTrue("Wrong type of builder created",builder instanceof EncodedBodyBuilder); assertTrue("empty body content", children.hasNext()); assertTrue("wrong body content (must be \'{}str\')", "str".equals(child.getLocalName()) && child.getNamespaceURI() == null); assertNotNull("missing xsi:type", type); assertTrue("wrong xsi:type", "xsd:string".equals(type)); assertTrue("wrong text value", "Roger Ramjet".equals(child.getTextContent()));
assertNotNull("There should be a descriptor for the port getPersonReturn",a.getTypeDescriptorForOutputPort("getPersonReturn")); assertTrue("The descriptor should be complex",a.getTypeDescriptorForOutputPort("getPersonReturn") instanceof ComplexTypeDescriptor);
assertEquals("use should be literal", "literal", use);
assertTrue("The input port named person should have been found",exists); assertNotNull("There should be a type descriptor for person",a.getTypeDescriptorForInputPort("person")); assertTrue("The descriptor should be complex",a.getTypeDescriptorForInputPort("person") instanceof ComplexTypeDescriptor);
assertTrue("Is is the wrong type, it should be LiteralBodyBuilder",builder instanceof LiteralBodyBuilder); assertEquals("Wrong localName","str", body.getLocalName());
assertEquals(URI.create(SpreadsheetImportActivity.URI), factory.getActivityType());
assertEquals("use should be encoded", "encoded", use);
assertEquals( "unexpected xml", "<s:extensions xmlns:s=\\"http: xml);
assertEquals("action uri is wrong", "einfo", actionURI);
assertEquals(new Range(5, 89), configuration.getColumnRange());
assertEquals("A", SpreadsheetUtils.getPortName(0, null)); assertEquals("AA", SpreadsheetUtils.getPortName(26, null)); assertEquals("delta", SpreadsheetUtils.getPortName(3, configuration)); assertEquals("AB", SpreadsheetUtils.getPortName(27, configuration));
assertNull(activity.getConfiguration()); assertNotNull(activity.getConfiguration()); assertEquals(configuration, activity.getConfiguration());
assertEquals(2, range.getStart());
assertTrue(range.contains(2)); assertFalse(range.contains(7));
assertNotNull(createActivity);
assertEquals(URI.create(WSDLActivity.URI), factory.getActivityType());
assertEquals(7, range.getEnd());
assertTrue(healthChecker.canVisit(activity)); assertFalse(healthChecker.canVisit(null)); assertFalse(healthChecker.canVisit(""));
assertNotNull(placeholders); assertEquals(1, placeholders.size()); assertEquals("Wrong first placeholder", "user_id", placeholders.get(0));
assertEquals(",", configuration.getCsvDelimiter());
assertFalse(URISignatureHandler .isValid(badURI_SingleClosingSymbolNoOpeningSymbol));
assertEquals("\'", configuration.getCsvDelimiter());
assertNotNull("The type for the port \'paremeters\' could not be found", activity.getTypeDescriptorForOutputPort("parameters")); assertTrue( "The type for the port \'paremeters\' shoule be complex", activity.getTypeDescriptorForOutputPort("parameters") instanceof ComplexTypeDescriptor); assertNull("There should be no type descriptor for \'fred\' port", activity.getTypeDescriptorForOutputPort("fred"));
assertFalse(URISignatureHandler .isValid(badURI_DoubleClosingSymbolsSpaced));
assertNotNull("there should be an output named \'output\'",outputMap.containsKey("output")); assertTrue(xml.contains("<block xmlns=\\"\\"></block>")); assertTrue(! xml.contains("<version>"));
assertFalse(URISignatureHandler .isValid(badURI_DoubleOpeningSymbolsSpaced));
assertNotNull(placeholders); assertEquals("Wrong number of placeholders extracted", 3, placeholders .size()); assertEquals("Wrong first placeholder", "sop_id", placeholders.get(0)); assertEquals("Wrong second placeholder", "cond_id", placeholders.get(1)); assertEquals("Wrong third placeholder", "unit", placeholders.get(2));
assertArrayEquals(new int[] { 1, 2, 3, 4, 5 }, range.getRangeValues()); assertArrayEquals(new int[] { 0, 6, 7 }, range2.getRangeValues());
assertEquals(configuration.hashCode(), configuration.hashCode()); assertEquals(configuration.hashCode(), new SpreadsheetImportConfiguration().hashCode());
assertEquals(new Range(41, 67), configuration.getRowRange());
assertTrue("Wrong type of builder, it should be Literal based",builder instanceof LiteralBodyBuilder);
assertNotNull(placeholders); assertEquals(0, placeholders.size());
assertFalse(URISignatureHandler .isValid(badURI_DuplicatePlaceholdersWithOthers));
assertEquals("wrong number of inputs", 1, inputs.size()); assertTrue("should not be base type", inputs.get(0) instanceof BaseTypeDescriptor); assertEquals("wrong name", "bid", (inputs.get(0)) .getName()); assertEquals("wrong type", "int", (inputs.get(0)) .getType());
assertNotNull(placeholders); assertEquals(2, placeholders.size()); assertEquals("Wrong first placeholder", "sop_id", placeholders.get(0)); assertEquals("Wrong second placeholder", "cond_id", placeholders.get(1));
assertFalse(URISignatureHandler .isValid(badURI_NestedPlaceholdersSpaced));
assertFalse(URISignatureHandler.isValid(badURI_NestedPlaceholders));
assertEquals(new Range(0, -1), configuration.getRowRange());
assertEquals(SpreadsheetEmptyCellPolicy.EMPTY_STRING, configuration.getEmptyCellPolicy());
assertEquals("A", SpreadsheetUtils.getColumnLabel(0)); assertEquals("E", SpreadsheetUtils.getColumnLabel(4)); assertEquals("Z", SpreadsheetUtils.getColumnLabel(25)); assertEquals("AA", SpreadsheetUtils.getColumnLabel(26)); assertEquals("ZAFZ", SpreadsheetUtils.getColumnLabel(457833));
assertEquals(true, configuration.isAllRows());
assertTrue("wrong type", a instanceof ComplexTypeDescriptor); assertEquals("wrong name", "a", a.getName()); assertEquals("should be only 1 element", 1, a_elements.size()); assertTrue("wrong type", b instanceof ComplexTypeDescriptor); assertEquals("should be only 1 element", 1, b_elements.size()); assertEquals("b should contain a reference to a", a.toString(), b_elements.get(0).toString());
assertTrue("Wrong type of builder, it should be Literal based",builder instanceof LiteralBodyBuilder);
assertTrue("Wrong type of builder, it should be Literal based",builder instanceof LiteralBodyBuilder);
assertEquals("A", SpreadsheetUtils.getPortName("A", null)); assertEquals("AABR", SpreadsheetUtils.getPortName("AABR", null)); assertEquals("beta", SpreadsheetUtils.getPortName("B", configuration)); assertEquals("T", SpreadsheetUtils.getPortName("T", configuration));
assertTrue(URISignatureHandler.isValid(validURI_NoPlaceholders));
assertEquals( "wrong number of operations found (wsdl may have changed)", 12, operations.size()); assertEquals("wrong name for first operation", "run_eGquery", operations.get(0)); assertEquals("wrong style", "document", parser.getStyle());
assertEquals("element name is wrong", "eInfoRequest", operationQName .getLocalPart());
assertThat(Hex.encode(plaintext)).isEqualTo(vector.plaintext);
assertEquals("Invalid signature", e.getMessage());
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertArrayEquals(tcId, sig, computedSig); assertEquals(0, errors);
assertThat(template.getTypeUrl()).isEqualTo(new XChaCha20Poly1305KeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW);
assertThat(token.getHeader(JwtNames.HEADER_TYPE)).isEqualTo("JWT");
assertEquals("cannot verify signature", e.getMessage());
assertEquals(inputData.length, rewindableChannel.read(buffer1)); assertEquals(-1, rewindableChannel.read(buffer2)); assertArrayEquals(Arrays.copyOf(buffer2.array(), buffer2.position()), new byte[]{});
assertThat(token.getType()).isEqualTo("JWT");
assertThat(input.read(output)).isEqualTo(expectedResult.length); assertThat(output).isEqualTo(expectedResult);
assertTrue( "Message " + expected.getMessage() + " should contain " + HttpStatusCodes.STATUS_CODE_NO_CONTENT, expected.getMessage().contains(Integer.toString(HttpStatusCodes.STATUS_CODE_NO_CONTENT)));
assertEquals(7, privateKey[0] & 7); assertEquals(128, privateKey[31] & 192);
assertEquals("cannot verify signature", e.getMessage());
assertThat(key.getVersion()).isEqualTo(0); assertThat(key.getKeyValue()).hasSize(format.getKeySize()); assertThat(key.getParams()).isEqualTo(format.getParams());
assertEquals(keyset1, handle1.getKeyset()); assertEquals(1, keyset2.getKeyCount()); assertEquals(keyset2.getPrimaryKeyId(), key2.getKeyId()); assertEquals(template.getTypeUrl(), key2.getKeyData().getTypeUrl());
assertArrayEquals(hkdfWithNullSalt, hkdfWithEmptySalt); assertArrayEquals(hkdfWithNullInfo, hkdfWithEmptyInfo);
assertEquals("expired payload", e.getMessage());
assertThat(key.getVersion()).isEqualTo(0); assertThat(key.getKeyValue()).hasSize(77); assertThat(key.getParams()).isEqualTo(format.getParams());
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertEquals("cannot decrypt", e.getMessage());
assertEquals("keys1", instance.download()); assertEquals("keys2", instance.download());
assertThat(buffer.array()) .isEqualTo(new byte[] {(byte) 0xFF, (byte) 0xEE, (byte) 0xDD, (byte) 0xCC});
assertThat(keys).hasSize(numKeys);
assertThat(compact).isEqualTo(expectedToken);
assertThat(token.getHeader(JwtNames.HEADER_KEY_ID)).isNull();
assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData)); assertEquals( CryptoFormat.RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);
assertThat(audiences.getString(0)).isEqualTo("foo"); assertThat(audiences.getString(1)).isEqualTo("bar");
assertThat(input.read(output)).isEqualTo(maxOutputLength);
assertThat(Hkdf.computeHkdf("HmacSha1", ikm, salt, info, result.length)).isEqualTo(result);
assertThat(token.getClaim(JwtNames.CLAIM_AUDIENCE)).isNull();
assertArrayEquals(TestUtil.hexDecode(NIST_PLAINTEXT), cipher.decrypt(ciphertext));
assertThat(kt.getTypeUrl()).isEqualTo(new HkdfPrfKeyManager().getKeyType()); assertThat(kt.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA256);
assertTrue(verifier.verify(signature));
assertArrayEquals( Hex.decode(test.hexIeee), EllipticCurves.ecdsaDer2Ieee(Hex.decode(test.hexDer), test.hexIeee.length() / 2));
assertEquals(plaintext, recipient.unseal(sender.seal(plaintext)));
assertEquals("keys1", instance.download()); assertEquals("keys1", instance.download()); assertEquals("keys2", instance.download()); assertEquals(1, backgroundFetchStartedCount.get());
assertThat(factory.createKey(createFormat(16, 16)).getVersion()).isEqualTo(0);
assertThat(publicKey).isEqualTo(privateKey.getPublicKey());
assertThat(token.getAudiences()).containsExactly("foo");
assertEquals(new AesGcmKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(16, format.getKeySize());
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("StreamingAeadConfig.register()"); assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("StreamingAeadConfig.register()"); assertThat(e.toString()).contains("No key manager found");
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertArrayEquals(plaintext, decrypted); assertThat(ciphertexts).hasSize(8);
assertEquals("keys1", instance.download()); assertEquals("keys1", task.get(5, TimeUnit.SECONDS)); assertEquals(1, backgroundFetchStartedCount.get()); assertEquals(1, httpTransportGetCount.get());
assertThat(token.getJwtId()).isEqualTo("blah");
assertEquals(maxVersion * (maxVersion + 1) / 2, count); assertEquals(maxVersion * (3 * maxVersion + 2), countNegative);
assertThat(token.getHeader(JwtNames.HEADER_CONTENT_TYPE)).isNull();
assertThat(token.getExpiration().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertEquals("signature and key id must be the last two query parameters", e.getMessage());
assertThat(input.read(output)).isEqualTo(100); assertThat(input2.read(output2, 2, 33)).isEqualTo(33); assertThat(input2.read(output2, 36, 64)).isEqualTo(64); assertThat(output).isEqualTo(output2);
assertThat(token.getClaim(JwtNames.CLAIM_SUBJECT)).isNull();
assertThat(token.getClaim("claim")).isNull();
assertEquals("keys1", instance.download()); assertEquals("keys2", instance.download());
assertThat(template.getTypeUrl()).isEqualTo(new XChaCha20Poly1305KeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK);
assertThat(key.getPublicKey().getParams()).isEqualTo(format.getParams()); assertThat(key.getPublicKey().getX()).isNotEmpty(); assertThat(key.getPublicKey().getY()).isNotEmpty(); assertThat(key.getKeyValue()).isNotEmpty();
assertThat(keyManager.firstSupportedPrimitiveClass()).isEqualTo(Void.class);
assertEquals("cannot verify signature", e.getMessage());
assertEquals("SHA256withRSA", SubtleUtil.toRsaSsaPkcs1Algo(HashType.SHA256)); assertEquals("SHA512withRSA", SubtleUtil.toRsaSsaPkcs1Algo(HashType.SHA512));
assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData)); assertEquals( CryptoFormat.RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);
assertThat(template.getTypeUrl()).isEqualTo(new Ed25519PrivateKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW);
assertFalse(verified);
assertEquals(new AesGcmSivKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(16, format.getKeySize());
assertThat(Registry.getKeyManager(MacConfig.HMAC_TYPE_URL, Mac.class).getClass().toString()) .contains("KeyManagerImpl");
assertEquals("Invalid signature", e.getMessage());
assertEquals(1, allSignatures.size());
assertThat(e.toString()).contains("Expected proto of type");
assertThat(key.getParams()).isEqualTo(format.getParams()); assertThat(key.getVersion()).isEqualTo(0); assertThat(key.getKeyValue()).hasSize(format.getKeySize());
assertThat(audiences.getString(0)).isEqualTo("foo");
assertThat(template.getTypeUrl()).isEqualTo(new HmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(64); assertThat(format.getParams().getTagSize()).isEqualTo(64); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA512);
assertThat(modBytes).hasLength(expectedSize); assertThat(new BigInteger(1, modBytes)).isEqualTo(bigIntWithALeadingZero);
assertEquals(20, rewindableChannel.read(buffer)); assertEquals(20, rewindableChannel.read(buffer)); assertEquals(inputData.length - 40, rewindableChannel.read(buffer)); assertEquals(-1, rewindableChannel.read(buffer)); assertArrayEquals(Arrays.copyOf(buffer.array(), inputData.length) , inputData);
assertThat(token.getClaim(JwtNames.CLAIM_ISSUER)).isNull();
assertEquals(1, publicHandle.getKeyset().getKeyCount()); assertEquals( privateHandle.getKeyset().getPrimaryKeyId(), publicHandle.getKeyset().getPrimaryKeyId()); assertEquals(SignatureConfig.ECDSA_PUBLIC_KEY_TYPE_URL, publicKeyData.getTypeUrl()); assertEquals(KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC, publicKeyData.getKeyMaterialType()); assertArrayEquals( privateKey.getPublicKey().toByteArray(), publicKeyData.getValue().toByteArray());
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertArrayEquals( Hex.decode(test.hexDer), EllipticCurves.ecdsaIeee2Der(Hex.decode(test.hexIeee)));
assertEquals(5, prfSet.getPrimaryId()); assertThat(prfSet.getPrfs()).hasSize(2); assertThat(prsPrimary).hasLength(12); assertArrayEquals(prs5, prsPrimary); assertThat(prsPrimary).isNotEqualTo(prs6);
assertArrayEquals(plaintext, decrypted);
assertThat(manager.keyFactory().createKey(keyFormat).getKeyValue()) .isNotEqualTo(manager.keyFactory().createKey(keyFormat).getKeyValue());
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertThat(token.getHeader(JwtNames.HEADER_KEY_ID)).isEqualTo("123");
assertEquals(testVectorOutputs[i], Hex.encode(r));
assertThat(manager.keyFactory().createKey(keyFormat).getKeyValue()) .isNotEqualTo(manager.keyFactory().createKey(keyFormat).getKeyValue());
assertThat(keyManager.supportedPrimitives()) .containsExactly(Primitive1.class, Primitive2.class);
assertEquals(prBytes.length, t.tag.length - 1); assertArrayEquals(prBytes, Arrays.copyOf(tag, prBytes.length));
assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData)); assertEquals( CryptoFormat.RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);
assertEquals(5, prfSet.getPrimaryId()); assertThat(prfSet.getPrfs()).hasSize(1); assertThat(prs).hasLength(12); assertArrayEquals(prs2, prs);
assertFalse(encChannel.isOpen());
assertThat(primitive1.getKeyValue()).isEqualTo(TEST_BYTESTRING); assertThat(primitive2.getSize()).isEqualTo(TEST_BYTESTRING.size());
assertThat(Registry.getInputPrimitive(EncryptOnly.class)).isEqualTo(Aead.class); assertThat(Registry.getInputPrimitive(Aead.class)).isEqualTo(Aead.class);
assertEquals("invalid version: " + invalidVersion, e.getMessage());
assertThat(buffer.array()) .isEqualTo(new byte[] {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF});
assertThat(keyManager.doesSupport("type.googleapis.com/SomeOtherKey")).isFalse();
assertThat(e.toString()).contains("validateKeyFormat(AesGcmKeyFormat) failed");
assertEquals(plaintext, recipient.unseal(sender.seal(plaintext)));
assertEquals("keys1", instance.download()); assertEquals("keys2", instance.download());
assertEquals(16 , tag.length);
assertTrue(verifier.verify(signature));
assertEquals("cannot verify signature", e.getMessage());
assertTrue(keyset.toString().contains(keyValue)); assertFalse(keysetInfo.toString().contains(keyValue));
assertEquals(new AesEaxKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(32, format.getKeySize()); assertTrue(format.hasParams()); assertEquals(16, format.getParams().getIvSize());
assertThat(template.getTypeUrl()).isEqualTo(new HmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getTagSize()).isEqualTo(16); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA256);
assertEquals("keys1", instance.download()); assertEquals("keys1", instance.download());
assertThat(token.getIssuedAt().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertEquals("keys", task.get(5, TimeUnit.SECONDS)); assertEquals(1, httpTransportGetCount.get());
assertThat(token.getKeyId()).isEqualTo("123");
assertEquals((byte) 0x80, r[0]); assertEquals((byte) 0x00, r[1]); assertEquals((byte) 0x00, r[15]); assertEquals(16, r.length); assertEquals((byte) 0x01, r[0]); assertEquals((byte) 0x80, r[1]); assertEquals((byte) 0x00, r[2]); assertEquals((byte) 0x00, r[15]); assertEquals(16, r.length);
assertThat(input.read(output)).isEqualTo(10); assertThat(input2.read(output2)).isEqualTo(10); assertThat(output).isEqualTo(output2);
assertEquals(new AesGcmSivKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(32, format.getKeySize());
assertThat(template.getTypeUrl()).isEqualTo(new HmacPrfKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA256);
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("MacConfig.register()"); assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("AeadConfig.register()"); assertThat(e.toString()).contains("No key manager found");
assertEquals(new AesEaxKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(16, format.getKeySize()); assertTrue(format.hasParams()); assertEquals(16, format.getParams().getIvSize());
assertThat(token.getContentType()).isEqualTo("foo");
assertThat(token.getHeader(JwtNames.HEADER_ALGORITHM)).isNull();
assertEquals("cannot decrypt", e.getMessage());
assertEquals(handle.getKeyset(), handle2.getKeyset());
assertEquals(16 , tag.length);
assertThat(e.toString()).contains("validateKeyFormat(AesGcmKeyFormat) failed");
assertEquals("cannot verify signature", e.getMessage());
assertEquals(201 - 2, count);
assertThat(token.getClaim(JwtNames.CLAIM_JWT_ID)).isNull();
assertThat(template.getTypeUrl()).isEqualTo(new HmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(64); assertThat(format.getParams().getTagSize()).isEqualTo(32); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA512);
assertThat(token.getClaim("claim")).isEqualTo(1);
assertEquals(keyset, handle.getKeyset()); assertFalse(keysetInfo.contains(keyValue)); assertTrue(handle.getKeyset().toString().contains(keyValue));
assertThat(token.getHeader(JwtNames.HEADER_TYPE)).isNull();
assertThat(token.getClaim("claim")).isEqualTo(1L);
assertThat(token.getExpiration()).isNull();
assertEquals("cannot verify signature", e.getMessage());
assertThat(Registry.getUntypedKeyManager(MacConfig.HMAC_TYPE_URL).getClass().toString()) .contains("KeyManagerImpl");
assertThat(e.toString()).contains("validateKey(AesGcmKey) failed");
assertEquals(new AesGcmSivKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(16, format.getKeySize());
assertThat(token.getNotBefore().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertThat(input.read(output)).isEqualTo(10);
assertThat(key.getKeyValue()).hasSize(keyFormat.getKeySize()); assertThat(key.getParams().getTagSize()).isEqualTo(keyFormat.getParams().getTagSize());
assertFalse(encChannel.isOpen());
assertEquals("signature and key id must be the last two query parameters", e.getMessage());
assertEquals(new ChaCha20Poly1305KeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType());
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("MacConfig.register()"); assertThat(e.toString()).contains("No key manager found");
assertThat(input.read(output)).isEqualTo(expectedResult.length); assertThat(output).isEqualTo(expectedResult);
assertEquals(PLAINTEXT, recipient.unseal(signECV2SigningOnly(PLAINTEXT)));
assertEquals(16, helper.getSymmetricKeySizeInBytes()); assertEquals(48, helper.getSymmetricKeySizeInBytes());
assertEquals(10, rewindableChannel.read(buffer)); assertEquals(20, rewindableChannel.read(buffer)); assertArrayEquals(Arrays.copyOf(buffer.array(), 30), Arrays.copyOf(inputData, 30));
assertThat(token.getClaim("claim")).isEqualTo(123.4);
assertThat(secret).hasLength(maxSizeInBytes); assertThat(secretBigInt.signum()).isEqualTo(1); assertThat(secretBigInt.compareTo(max)).isLessThan(0); assertThat(secrets).hasSize(100);
assertEquals(new AesGcmKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(16, format.getKeySize());
assertFalse(ciphertexts.contains(ctHex));
assertEquals(PLAINTEXT, recipient.unseal(sealECV2(PLAINTEXT)));
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertEquals("signature and key id must be the last two query parameters", e.getMessage());
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertEquals(PLAINTEXT, recipient.unseal(sealECV2(PLAINTEXT)));
assertEquals("SHA256withECDSA", SubtleUtil.toEcdsaAlgo(HashType.SHA256)); assertEquals("SHA512withECDSA", SubtleUtil.toEcdsaAlgo(HashType.SHA512));
assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData)); assertEquals( CryptoFormat.RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("SignatureConfig.registe"); assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("SignatureConfig.registe"); assertThat(e.toString()).contains("No key manager found");
assertFalse(ciphertexts.contains(ctHex));
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertEquals(plaintext, recipient.unseal(sender.seal(plaintext)));
assertEquals("keys1", instance.download()); assertEquals("keys1", instance.download());
assertThat( Registry.getKeyManager(AeadConfig.AES_EAX_TYPE_URL, Aead.class).getClass().toString()) .contains("KeyManagerImpl");
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertEquals(0, rewindableChannel.read(buffer1)); assertEquals(10, rewindableChannel.read(buffer1)); assertEquals(0, rewindableChannel.read(buffer1)); assertEquals(5, rewindableChannel.read(buffer1)); assertArrayEquals(buffer1.array(), Arrays.copyOf(inputData, 15));
assertThat(keyManager.getPrimitiveClass()).isEqualTo(Aead.class);
assertThat(manager.getPublicKey(key)).isEqualTo(key.getPublicKey());
assertEquals("expired payload", e.getMessage());
assertThat(token.getAlgorithm()).isEqualTo("HS256");
assertThat(keyManager.supportedPrimitives()).isEmpty();
assertEquals(new ChaCha20Poly1305KeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType());
assertThat(token.getHeader(JwtNames.HEADER_CONTENT_TYPE)).isEqualTo("foo");
assertEquals(plaintext, recipient.unseal(sealECV2(plaintext)));
assertThat(token.getClaim("claim")).isEqualTo("value");
assertThat(e.toString()).contains("Expected proto of type");
assertThat(token.getIssuedAt().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertThat(template.getTypeUrl()).isEqualTo(new AesSivKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(format.getKeySize());
assertEquals(c1.length, c2.length); assertFalse(Arrays.equals(c1, c2));
assertThat(e.toString()).contains("must be non-null");
assertEquals(TestUtil.hexEncode(encoded), TestUtil.hexEncode(test.encoded));
assertEquals("no trusted keys are available for this protocol version", e.getMessage());
assertEquals(PLAINTEXT, recipient.unseal(signECV2SigningOnly(PLAINTEXT)));
assertThat(count).isEqualTo(2);
assertEquals("expired payload", e.getMessage());
assertThat(template.getTypeUrl()).isEqualTo(new HmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getTagSize()).isEqualTo(32); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA256);
assertEquals("someValue", new JSONObject(recipient.unseal(ciphertext)).getString("someKey"));
assertThat(Hkdf.computeHkdf("HmacSha384", ikm, salt, info, result.length)).isEqualTo(result);
assertThat(token.getExpiration().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertEquals(p.getAffineX(), test.x); assertEquals(p.getAffineY(), test.y);
assertThat(token.getSubject()).isEqualTo("foo");
assertEquals("HmacSha1", StreamingAeadUtil.toHmacAlgo(HashType.SHA1)); assertEquals("HmacSha256", StreamingAeadUtil.toHmacAlgo(HashType.SHA256)); assertEquals("HmacSha512", StreamingAeadUtil.toHmacAlgo(HashType.SHA512));
assertThat(manager.getPublicKey(key)).isEqualTo(key.getPublicKey());
assertThat( keyManager .newKeyData(AesGcmKeyFormat.newBuilder().setKeySize(16).build().toByteString()) .getTypeUrl()) .isEqualTo("type.googleapis.com/google.crypto.tink.AesGcmKey");
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("DeterministicAeadConfig.register()"); assertThat(e.toString()).contains("No key manager found");
assertEquals(new AesGcmKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(32, format.getKeySize());
assertEquals("cannot verify signature", e.getMessage());
assertEquals("cannot verify signature", e.getMessage());
assertEquals("cannot verify signature", e.getMessage());
assertThat(publicKey).isEqualTo(privateKey.getPublicKey());
assertEquals("cannot verify signature", e.getMessage());
assertEquals(new AesGcmKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(32, format.getKeySize());
assertEquals("key_id must be a long", e.getMessage());
assertEquals(new AesEaxKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType()); assertEquals(16, format.getKeySize()); assertTrue(format.hasParams()); assertEquals(16, format.getParams().getIvSize());
assertThat(input.read(output)).isEqualTo(expectedResult.length); assertThat(output).isEqualTo(expectedResult);
assertEquals(plaintext, recipient.unseal(sender.seal(plaintext)));
assertEquals("cannot verify signature", e.getMessage());
assertThat(template.getTypeUrl()).isEqualTo(new AesCmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getTagSize()).isEqualTo(16);
assertThat(input.read(output)).isEqualTo(10); assertThat(input2.read(output2)).isEqualTo(10); assertThat(output).isNotEqualTo(output2);
assertThat(template.getTypeUrl()).isEqualTo(new Ed25519PrivateKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK);
assertEquals(PLAINTEXT, recipient.unseal(sealECV2(PLAINTEXT)));
assertThat(publicKey).isEqualTo(key.getPublicKey());
assertThat(token.getJwtId()).isEqualTo("foo");
assertThat(keyManager.firstSupportedPrimitiveClass()).isEqualTo(Primitive1.class);
assertThat(template.getTypeUrl()).isEqualTo(manager.getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getHashType()).isEqualTo(HashType.SHA256);
assertThat(e.toString()).contains("must be non-null");
assertEquals(-1, rewindableChannel.read(buffer));
assertEquals("cannot verify signature", e.getMessage());
assertTrue(e.getMessage().contains("cannot find verifying key with key id"));
assertThat(token.getJwtId()).isEqualTo("blah"); assertThat(token.getAlgorithm()).isEqualTo("HS256"); assertThat(token2.getJwtId()).isEqualTo("blah"); assertThat(token2.getAlgorithm()).isEqualTo("HS256");
assertEquals("signature and key id must be the last two query parameters", e.getMessage());
assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("MacConfig.register()"); assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("HybridConfig.register()"); assertThat(e.toString()).contains("no catalogue found"); assertThat(e.toString()).contains("HybridConfig.register()"); assertThat(e.toString()).contains("No key manager found");
assertArrayEquals(ciphertext, ciphertext2); assertArrayEquals(plaintext, decrypted); assertArrayEquals(plaintext, decrypted2);
assertThat(key.getKeyValue()).hasSize(keyFormat.getKeySize());
assertFalse(EllipticCurves.isValidDerEncoding(Hex.decode(der)));
assertEquals(plaintext, recipient.unseal(signECV2SigningOnly(plaintext)));
assertEquals("keys", newInstanceForTests().download());
assertEquals( "Unexpected status code = " + HttpStatusCodes.STATUS_CODE_NO_CONTENT, expected.getMessage());
assertThat(token.getClaim(JwtNames.CLAIM_SUBJECT)).isEqualTo("foo");
assertThat(buffer.array()).isEqualTo(new byte[] {0x11, 0x22, (byte) 0xEE, (byte) 0xFF});
assertThat(token.getIssuedAt()).isNull();
assertThat(input.read(output)).isEqualTo(expectedResult.length); assertThat(output).isEqualTo(expectedResult);
assertThat(input.read(output)).isEqualTo(expectedResult.length); assertThat(output).isEqualTo(expectedResult);
assertThat(template.getTypeUrl()).isEqualTo(new HmacPrfKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(64); assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA512);
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertEquals(plaintext, recipient.unseal(sender.seal(plaintext)));
assertThat(factory.createKey(XChaCha20Poly1305KeyFormat.getDefaultInstance()).getVersion()) .isEqualTo(0);
assertEquals(32, helper.getSymmetricKeySizeInBytes()); assertEquals(64, helper.getSymmetricKeySizeInBytes());
assertThat(template.getTypeUrl()).isEqualTo(new AesCmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK); assertThat(format.getKeySize()).isEqualTo(32); assertThat(format.getParams().getTagSize()).isEqualTo(16);
assertThat(template.getTypeUrl()).isEqualTo(new AesCmacPrfKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(32);
assertThat(e.toString()).contains("validateKeyFormat(AesGcmKeyFormat) failed");
assertThat(template.getTypeUrl()).isEqualTo(new JwtHmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(64); assertThat(format.getHashType()).isEqualTo(HashType.SHA512);
assertThat(managerPrf.computePrimary(message, 16)).isEqualTo(directPrf.compute(message, 16));
assertThat(keyManager.getKeyType()) .isEqualTo("type.googleapis.com/google.crypto.tink.AesGcmKey");
assertThat(token.getClaim(JwtNames.CLAIM_ISSUER)).isEqualTo("foo");
assertEquals(inputData.length, rewindableChannel.read(buffer)); assertArrayEquals(Arrays.copyOf(buffer.array(), buffer.position()), inputData);
assertEquals(new AesEaxKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(32, format.getKeySize()); assertTrue(format.hasParams()); assertEquals(16, format.getParams().getIvSize());
assertThat(token.getIssuer()).isEqualTo("foo");
assertEquals(PLAINTEXT, recipient.unseal(signECV2SigningOnly(PLAINTEXT)));
assertEquals(Enums.HashType.SHA256, SigUtil.toHashType(HashType.SHA256)); assertEquals(Enums.HashType.SHA384, SigUtil.toHashType(HashType.SHA384)); assertEquals(Enums.HashType.SHA512, SigUtil.toHashType(HashType.SHA512));
assertThat(token.getAudiences()).containsExactly("foo", "bar");
assertEquals("cannot verify signature", e.getMessage());
assertEquals( "8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a", TestUtil.hexEncode(out)); assertEquals( "de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f", TestUtil.hexEncode(out));
assertArrayEquals(ciphertext, ciphertext2); assertArrayEquals(plaintext, decrypted); assertArrayEquals(plaintext, decrypted2);
assertThat(token.getNotBefore()).isNull();
assertThat(token.getClaim(JwtNames.CLAIM_JWT_ID)).isEqualTo("foo");
assertThat(keyData.getTypeUrl()) .isEqualTo("type.googleapis.com/google.crypto.tink.Ed25519PublicKey"); assertThat(publicKey).isEqualTo(privateKey.getPublicKey()); assertThat(keyData.getKeyMaterialType()).isEqualTo(KeyMaterialType.ASYMMETRIC_PUBLIC);
assertEquals("signature and key id must be the last two query parameters", e.getMessage());
assertEquals("keys1", instance.download()); assertEquals("keys1", instance.download());
assertThat(keys).hasSize(numKeys);
assertEquals("cannot verify signature", e.getMessage());
assertThat( keyManager .newKeyData(AesGcmKeyFormat.newBuilder().setKeySize(16).build().toByteString()) .getValue() .size()) .isAtLeast(16);
assertEquals("cannot verify signature", e.getMessage());
assertEquals("cannot verify signature", e.getMessage());
assertEquals(new AesGcmSivKeyManager().getKeyType(), template.getTypeUrl()); assertEquals(KeyTemplate.OutputPrefixType.RAW, template.getOutputPrefixType()); assertEquals(32, format.getKeySize());
assertThat(keyManager.doesSupport("type.googleapis.com/google.crypto.tink.AesGcmKey")).isTrue();
assertThat(token.getNotBefore().getEpochSecond()).isEqualTo(instant.getEpochSecond());
assertThat(token.getClaim("claim")).isEqualTo(true);
assertEquals(PLAINTEXT, recipient.unseal(sealECV2(PLAINTEXT)));
assertEquals( "422c8e7a6227d7bca1350b3e2bb7279f7897b87bb6854b783c60e80311ae3079", TestUtil.hexEncode(k)); assertEquals( "684cf59ba83309552800ef566f2f4d3c1c3887c49360e3875f2eb94d99532c51", TestUtil.hexEncode(k));
assertThat(smallIntBytes).hasLength(expectedSize); assertThat(new BigInteger(1, smallIntBytes)).isEqualTo(smallInt);
assertThat(template.getTypeUrl()).isEqualTo(new JwtHmacKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(48); assertThat(format.getHashType()).isEqualTo(HashType.SHA384);
assertThat(template.getTypeUrl()).isEqualTo(new AesSivKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); assertThat(format.getKeySize()).isEqualTo(format.getKeySize());
assertEquals("key_id must be a long", e.getMessage());
assertEquals(0, rewindableChannel.read(buffer));
assertThat(e.toString()).contains("validateKey(AesGcmKey) failed");
assertEquals(PLAINTEXT, recipient.unseal(CIPHERTEXT_EC_V1));
assertEquals(0, errors);
assertThat(output).isEqualTo(test.out);
assertEquals(1, allSignatures.size());
assertThat(bigIntBytes).hasLength(expectedSize); assertThat(new BigInteger(1, bigIntBytes)).isEqualTo(bigInt);
assertThat(hybridDecrypt.decrypt(hybridEncrypt.encrypt(message, contextInfo), contextInfo)) .isEqualTo(message);
assertEquals("keys1", instance.download()); assertEquals("keys1", instance.download()); assertEquals(0, backgroundFetchStartedCount.get());
assertThat( keyManager .newKeyData(AesGcmKeyFormat.newBuilder().setKeySize(16).build().toByteString()) .getKeyMaterialType()) .isEqualTo(KeyMaterialType.SYMMETRIC);
assertEquals(32, Ed25519.GROUP_ORDER.length); assertEquals(1, result[0]); assertEquals(0, result[i]);
assertEquals(maxTasks, availableSlots.getValue()); assertEquals(maxTasks - 1, availableSlots.getValue()); assertEquals(2, phaser.getUnarrivedParties()); assertEquals(maxTasks, availableSlots.getValue()); assertEquals(1, successful.get()); assertEquals(0, failures.get());
assertEquals(maxTasks, availableSlots.getValue()); assertEquals(maxTasks - 1, availableSlots.getValue()); assertEquals(2, phaser.getUnarrivedParties()); assertEquals(maxTasks, availableSlots.getValue()); assertEquals(0, successful.get()); assertEquals(toThrow, thrown.get());
assertEquals(maxTasks, availableSlots.getValue()); assertEquals(maxTasks - 1, availableSlots.getValue()); assertEquals(2, phaser.getUnarrivedParties()); assertEquals(maxTasks, availableSlots.getValue()); assertEquals(0, successful.get()); assertEquals(1, failures.get());
assertEquals(3, phaser.getUnarrivedParties()); assertEquals(maxTasks - 2, availableSlots.getValue()); assertEquals(maxTasks, availableSlots.getValue()); assertEquals(2, successful.get()); assertEquals(1, failures.get()); assertEquals(1, rejections.get());
assertEquals("{\\"CycleCalibrated\\": {\\"StartValue\\":10000} {\\"TotalUnits\\":1000}}\\n",results.toString());
assertThat(switch2.getRole(), is(RoleState.MASTER)); assertThat(switch2.getRole(), is(RoleState.EQUAL));
assertThat(ospfProcessList, is(notNullValue()));
assertThat(iu.getProvidedCapabilites(), hasItem(capability("anotherId", "2.0.0.CAPABILITY"))); assertThat(iu.getProvidedCapabilites(), hasItem(capability("demo.iu", "1.0.0.CAPABILITY"))); assertThat(iu.getProvidedCapabilites(), hasItem(capability("demo.iu", "1.1.1.CAPABILITY")));
assertTrue(junitProvider.isEnabled(classPath("org.junit:4.7"), parallelProperties())); assertTrue(junitProvider.isEnabled(classPath("org.junit4:4.8.1"), parallelProperties())); assertTrue(junitProvider.isEnabled(classPath("org.junit:3.8.2", "org.junit:4.7.0"), parallelProperties()));
assertTrue(e.getMessage().contains("Element <id> is missing in <extraRequirements><requirement> section."));
assertEquals(1, result.size()); assertEquals(OTHER_ARTIFACT.getCanonicalFile(), getFileEntry("artifact.attached.other-classifier", result));
assertEquals(false, subject.uniqueAttachIds());
assertTrue(e.getMessage() .contains("Element <versionRange> is missing in <extraRequirements><requirement> section."));
assertEquals("junit", junitProvider.getType());
assertThat(config, hasItem("reference:file:absolute/path/to/bundle2@start"));
assertEquals(new Date(0L), tarEntries.get("dir2/testLastModified").getModTime());
assertEquals(1, messages.size()); assertEquals(Kind.WARNING, message.getKind()); assertEquals("foo", message.getFile()); assertEquals(4, message.getStartLine());
assertEquals(0700, getTarEntries().get("dir2/testPermissions").getMode());
assertThat(interpolator.interpolate("${undefined}"), is("${undefined}"));
assertEquals(expected, subject.getProducts());
assertEquals(1, messages.size()); assertFalse(message.isError()); assertEquals("foo", message.getFile()); assertEquals(4, message.getStartLine());
assertEquals(2, products.size()); assertTrue(products.contains(new Product("product.id.1"))); assertTrue(products.contains(new Product("product.id.2")));
assertThat(customExecutionEnvironment.getProfileProperties().size(), is(3));
assertTrue(sourceRef.startsWith("scm:git:foo;path=\\"tycho-extras/tycho-sourceref-jgit/src/test/resources\\""));
assertEquals(System.getProperty("java.version"), libraryInfo.getVersion()); assertEquals(expectedBootclasspath, String.join(File.pathSeparator, libraryInfo.getBootpath())); assertEquals(javaExtDirs, String.join(File.pathSeparator, libraryInfo.getExtensionDirs())); assertEquals(javaEndorsedDirs, String.join(File.pathSeparator, libraryInfo.getEndorsedDirs()));
assertThat(config, hasItem("reference:file:absolute/path/to/bundle1@6:start"));
assertEquals(1, messages.size()); assertEquals(EOL + "message line1" + EOL + "message line2", error.getMessage());
assertEquals(2, messages.size()); assertTrue(message.isError()); assertEquals("", message.getMessage()); assertEquals("foo bar", message.getFile()); assertEquals(3, message.getStartLine()); assertTrue(message.isError()); assertEquals("", message.getMessage()); assertEquals("test", message.getFile()); assertEquals(5, message.getStartLine());
assertEquals(DEFAULT_NAME, name);
assertEquals(2, messages.size()); assertTrue(error.isError()); assertEquals("foo bar", error.getFile()); assertEquals(3, error.getStartLine()); assertEquals(EOL + "a context line", error.getMessage()); assertFalse(error.isError()); assertEquals("test2", error.getFile()); assertEquals(4, error.getStartLine()); assertEquals(EOL + "second context line", error.getMessage());
assertEquals(iu.getVersion(), "1.0.0.ABC"); assertThat(iu.getProvidedCapabilites(), hasItem(capability("demo.iu", "1.0.0.ABC"))); assertThat(iu.getArtifacts(), hasItem(artifact("demo.iu", "1.0.0.ABC")));
assertEquals(true, subject.uniqueAttachIds());
assertEquals(Collections.emptyList(), subject.getProducts());
assertEquals(1, messages.size()); assertTrue(message.isError()); assertEquals("baz", message.getFile()); assertEquals(-1, message.getStartLine());
assertThat(interpolator.interpolate("${not closed"), is("${not closed"));
assertTrue(StandardExecutionEnvironment.getSystemPackagesCompanionJar().isFile());
assertEquals("baz", provider.getRelativePath(projectBasedir, repoRoot));
assertThat(feature.getIncludedFeatures(), hasItem(feature("org.eclipse.rcp", "4.5.0.v20140918"))); assertThat(feature.getPlugins(), hasItem(plugin("org.junit4", "4.8.1.v20100302"))); assertThat(plugin.getId(), is("org.junit4")); assertThat(plugin.getDownloadSize(), is(1L)); assertThat(plugin.getInstallSize(), is(2L)); assertThat(plugin.isUnpack(), is(false));
assertThat(customExecutionEnvironment.getProfileProperties().size(), is(3));
assertEquals(true, manifest.isDirectoryShape());
assertThat(customExecutionEnvironment.getProfileProperties().size(), is(3));
assertArrayEquals(new String[] { "lib/foo.jar", "dir/", "baz.jar" }, manifest.getBundleClasspath());
assertTrue(isLunaOrOlder(lunaSR2Version)); assertTrue(isLunaOrOlder(lunaSR0Version)); assertFalse(isLunaOrOlder(marsSR0Version)); assertFalse(isLunaOrOlder(marsLiteralQualifierVersion));
assertEquals("cvs", cvsUrl.getType());
assertThat(customExecutionEnvironment.getProfileProperties().size(), is(3));
assertEquals("attachId-os.ws.arch", classifier);
assertThat(config, hasItem("reference:file:absolute/path/to/bundle2"));
assertEquals(readTestVersion(), TychoVersion.getTychoVersion());
assertThat(DEFAULT_NAME, is(ProfileName.getNameForEnvironment(LINUX_GTK_X86_64, null, DEFAULT_NAME)));
assertThat(config, hasItem("reference:file:absolute/path/to/bundle1@start"));
assertEquals(false, subject.uniqueAttachIds());
assertEquals("0.1.0.qualifier", manifest.getHeaders().get("bUNDLE-vERSION"));
assertEquals("os.ws.arch", classifier);
assertEquals("Hello World", hello.test());
assertThat(customExecutionEnvironment.getProfileProperties().size(), is(3));
assertEquals(7, tarEntries.size()); assertThat(tarEntries.keySet(), hasItems("dir2/", "dir2/test.txt", "dir2/dir3/", "dir2/dir3/test.sh", "dir2/testPermissions", "dir2/testLastModified", "dir2/testOwnerAndGroupName")); assertTrue(dirArchiveEntry.isDirectory()); assertTrue(textFileEntry.isFile()); assertEquals("hello", new String(content, StandardCharsets.UTF_8));
assertEquals("unknown", libInfo.getVersion()); assertEquals(2, bootpath.length); assertTrue(bootpath[0].endsWith("lib" + File.separator + "some.jar")); assertTrue(bootpath[1].endsWith("lib" + File.separator + "ext" + File.separator + "another.jar")); assertArrayEquals(new String[0], libInfo.getEndorsedDirs()); assertArrayEquals(new String[0], libInfo.getExtensionDirs());
assertArrayEquals(new String[] { "J2SE-1.5", "JavaSE-1.7" }, manifest.getExecutionEnvironments());
assertEquals("bar/baz boo", provider.getRelativePath(projectBasedir, repoRoot));
assertTrue( e.getMessage().contains("Element <type> is missing in <extraRequirements><requirement> section."));
assertThat(interpolator.interpolate("pre1${localRepository}1post"), is("pre1myLocalRepo1post"));
assertEquals(Collections.emptyList(), subject.getProducts());
assertNotNull(PackageNameMatcher.compile(new ArrayList<String>()));
assertArrayEquals(new String[0], manifest.getExecutionEnvironments());
assertTrue(longPathFile.getParentFile().mkdirs()); assertTrue(longPathFile.createNewFile()); assertTrue(getTarEntries().containsKey(longPath));
assertThat(environment.size(), equalTo(2)); assertThat(environment.get("key1"), equalTo("value1")); assertThat(environment.get("key2"), equalTo(""));
assertEquals(1, warnings.size()); assertEquals(new File(project.getBasedir(), "build.properties").getAbsolutePath() + ": src.includes value(s) [foo3, bar3*] do not match any files.", warnings.get(0));
assertEquals("test/me", provider.getRelativePath(projectBasedir, repoRoot));
assertThat(config, hasItem("reference:file:absolute/path/to/bundle1@6"));
assertEquals(3, result.size()); assertEquals(MAIN_ARTIFACT.getCanonicalFile(), getFileEntry("artifact.main", result)); assertEquals(SOURCE_ARTIFACT.getCanonicalFile(), getFileEntry("artifact.attached.source", result)); assertEquals(OTHER_ARTIFACT.getCanonicalFile(), getFileEntry("artifact.attached.other-classifier", result));
assertThat(e.getMessage(), is("Not an IPS patch."));
assertEquals(pCrc.getPatchFileCRC(), pCrc.getRealPatchCRC());
assertTrue(UPS.checkMagic(patch)); assertFalse(UPS.checkMagic(noPatch));
assertTrue(new BiCardSource(aEmpty, aEmpty).isEmpty());
assertSame(ACE, new BiCardSource(aContainsAce, aContainsTwo).draw());
assertFalse(new BiCardSource(aEmpty, aContainsAce).isEmpty());
assertSame(ACE, new BiCardSource(aEmpty, aContainsAce).draw());
assertFalse(new BiCardSource(aContainsAce, aContainsTwo).isEmpty());
assertTrue(aPile.canMoveTo(ACE_CLUBS)); assertFalse(aPile.canMoveTo(THREE_CLUBS));
assertTrue(strategy.hasExecuted());
assertSame(ACE, new BiCardSource(aContainsAce, aEmpty).draw());
assertFalse(new BiCardSource(aContainsAce, aEmpty).isEmpty());
assertNotNull(weibo.uploadStatus(url1, pic));
assertNotNull(weibo.getUnread());
assertNotNull("consumerKey is null", consumerKey); assertNotNull("consumerSecret is null", consumerSecret); assertTrue(consumerKey.length()!=0&&consumerSecret.length()!=0); assertTrue(consumerKey!=null&&consumerSecret!=null);
assertNotNull(weibo.update(status, inReplyToStatusId));
assertNotNull(weibo.getOAuthRequestToken());
assertNotNull(weibo.updateStatus(status, latitude, longitude));
assertNotNull(weibo.showUser("1377583044"));
assertNotNull(weibo.getMentions()); assertNotNull(weibo.getMentions(new Paging(1,30)));
assertNotNull(weibo.verifyCredentials());
assertNotNull(weibo.test()); assertEquals(true, weibo.test());
assertNotNull(weibo.rateLimitStatus());
assertNotNull(weibo.endSession());
assertNotNull(weibo.destroyComment(comment.getId()));
assertNotNull(weibo.getComments("4052331047")); assertNotNull(weibo.getCommentsTimeline()); assertNotNull(weibo.getCommentsByMe()); assertNotNull(weibo.getCommentsToMe());
assertNotNull(weibo.updateStatus(status));
assertNotNull(weibo.destroyStatus(status.getId()));
assertNotNull(weibo.updateComment(comment, id, null));
assertNotNull(weibo.showFriendships("1775590093")); assertNotNull(weibo.showFriendships("1377583044", "1775590093"));
assertNotNull(weibo.getFriendsIDs()); assertNotNull(weibo.getFriendsIDs(new Paging(1,10))); assertNotNull(weibo.getFriendsIDs(1377583044)); assertNotNull(weibo.getFriendsIDs("nicotine"));
assertNotNull(weibo.showStatus(id));
assertNotNull("Error: repeated weibo text!",weibo.reply(sid,cid,status));
assertNotNull(weibo.retweetStatus(id));
assertNotNull(weibo.getBlockingUsers()); assertNotNull(weibo.createBlock("1775590093")); assertNotNull(weibo.existsBlock("1775590093")); assertNotNull(weibo.destroyBlock("1775590093")); assertNotNull(weibo.existsBlock("1775590093")); assertNotNull(weibo.getBlockingUsers()); assertNotNull(weibo.getBlockingUsersIDs());
assertNotNull(weibo.getHotUsers(category));
assertNotNull(weibo.getRateLimitStatus());
assertNotNull(weibo.getFavorites()); assertNotNull(weibo.getFavorites(2)); assertNotNull(weibo.createFavorite(id)); assertNotNull(weibo.destroyFavorite(id));
assertTrue(Utils.isNewInstall(VersionHistory.NEW_INSTALL_CODE)); assertFalse(Utils.isNewInstall(1));
assertEquals(1, Utils.getAnnotatedMethods(MockVersionModule.class, VersionCode.class).size()); assertEquals("foo", Utils.getAnnotatedMethods(MockVersionModule.class, VersionCode.class).get(0).getName());
assertEquals(buildOne, buildTwo);
assertThat(builder.toString(), is("(a)"));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("TABLE database.table"));
assertThat(builder.toString(), is("TRANSACTION"));
assertThat(result, is(nullValue()));
assertThat(builder.toString(), is("INSERT OR ABORT"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(iterator.hasNext(), is(true)); assertThat(iterator.next(), is((SqlPart) statement)); assertThat(iterator.hasNext(), is(true)); assertThat(iterator.next(), is(sqlPart)); assertThat(iterator.hasNext(), is(false));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("INSERT OR IGNORE"));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("INSERT OR FAIL"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(arguments, is(arrayContaining((Object) "a", "b", "c")));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(second));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("SELECT *"));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("DELETE"));
assertThat(builder.toString(), is("REPLACE"));
assertThat(builder.toString(), is("TABLE IF NOT EXISTS table"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("TO"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("LIMIT 5"));
assertThat(builder.toString(), is("DEFERRED"));
assertThat(builder.toString(), is("TABLE table"));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("(a,b,c)"));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("INTO database.table"));
assertThat(builder.toString(), is("TRANSACTION"));
assertThat(result, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("VALUES (?,?,?)"));
assertThat(builder.toString(), is("TABLE table"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("(a)"));
assertThat(builder.toString(), is("ORDER BY a"));
assertThat(previous, is(nullValue()));
assertThat(builder.toString(), is("SELECT a"));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("test"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("SET a=?"));
assertThat(builder.toString(), is("WITHOUT ROWID"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(iterator.hasNext(), is(true)); assertThat(iterator.next(), is((SqlPart) statement)); assertThat(iterator.hasNext(), is(true)); assertThat(iterator.next(), is(sqlPart)); assertThat(iterator.hasNext(), is(false));
assertThat(builder.toString(), is("SELECT a,b,c"));
assertThat(builder.toString(), is("SAVEPOINT savepoint"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(Statements.alter(), is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("END"));
assertThat(result, is(nullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(builder.toString(), is("VALUES (?)"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("GROUP BY a"));
assertThat(builder.toString(), is("INSERT OR REPLACE"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("UPDATE my_table"));
assertThat(builder.toString(), is("RENAME TO table"));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(previous, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("AS SELECT * FROM my_table"));
assertThat(arguments, is(arrayContaining((Object) 1, "test")));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("ANALYZE"));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("TABLE IF EXISTS table"));
assertThat(builder.toString(), is("BEGIN"));
assertThat(builder.toString(), is("TABLE database.table"));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("SET a=?,b=?,c=?"));
assertThat(builder.toString(), is("IMMEDIATE"));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(nullValue()));
assertThat(builder.toString(), is("ROLLBACK"));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("EXCLUSIVE"));
assertThat(builder.toString(), is("(a,b,c)"));
assertThat(builder.toString(), is("VACUUM"));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("FROM database.table"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("CREATE"));
assertThat(result, is(nullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("ALTER"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("ADD COLUMN test_column"));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("TABLE table"));
assertThat(result, is(nullValue()));
assertThat(builder.toString(), is("()"));
assertThat(builder.toString(), is("INSERT"));
assertThat(alterTable, is(notNullValue()));
assertThat(arguments, is(arrayContaining((Object) "a")));
assertThat(result, is(nullValue()));
assertThat(builder.toString(), is("DROP"));
assertThat(builder.toString(), is("ORDER BY a,b,c"));
assertThat(builder.toString(), is("TEMPORARY"));
assertThat(arguments, is(arrayContaining((Object) 1)));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(arguments, is(nullValue()));
assertThat(alterTable, is(notNullValue()));
assertThat(result, is(true));
assertThat(builder.toString(), is("COMMIT"));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("TABLE database.table"));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("TABLE IF EXISTS database.table"));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("TABLE IF NOT EXISTS database.table"));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("FROM table"));
assertThat(builder.toString(), isEmptyString());
assertThat(result, is(nullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(sqlPart));
assertThat(builder.toString(), is("INTO table"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("WHERE a=?"));
assertThat(builder.toString(), is("INSERT OR ROLLBACK"));
assertThat(result, is(notNullValue()));
assertThat(result, is(notNullValue()));
assertThat(result, is(sqlPart));
assertThat(result, is(notNullValue()));
assertThat(builder.toString(), is("FROM my_table"));
assertThat(result, is(true));
assertThat(hash, is(notNullValue()));
assertThat(nullString, is(notNullValue())); assertThat(nullString, is("null"));
assertThat(result, is(false));
assertThat(hash, is(notNullValue()));
assertThat(result, is(false));
assertThat(nonNullString, is(nonNullString)); assertThat(nonNullString, is("notNull"));
assertThat(result, is(false));
assertThat(result, is(true));
assertEquals(testString, mapper.mapTo(String.class, testString, props("name")));
assertEquals(b, max(a, b)); assertEquals(b, max(b, a));
assertEquals("_id", resolver.resolve("id", TestMappedClass.class));
assertEquals(o, translator.and(o));
assertEquals(o(property, -1), translator.order(property, Order.DESCENDING));
assertEquals(o(property, o(MongoOperator.LESS_THAN_OR_EQUAL, value)), translator.lte(property, value));
assertArrayEquals(field, hMapper.returnFields(projected));
assertEquals("", translator.and());
assertEquals(expected, translator.notNull(field));
assertEquals(string, hMapper.mapResult(string, unprojected));
assertEquals(o, translator.or(o));
assertEquals( Arrays.asList("a", "b", "c"), translator.translateProjection(QueryBuilder.builderFor( String.class, String.class, "a", "b", "c").build()));
assertEquals(o(MongoOperator.OR, set( o(property, o(MongoOperator.EXISTS, 0)), o(property, null) )), translator.isNull(property));
assertEquals(expected, translator.translateOrder(orderQuery));
assertEquals(expected, boxMaker.make(p, radius));
assertEquals(expected, translator.gte(field, testValue));
assertEquals("testclass", resolver.resolve(TestMappedClass.class));
assertEquals(this.tests[i], found.iterator().next()); assertFalse(found.iterator().hasNext());
assertEquals(fq(property, join(SolrOperator.OPEN_INCLUSIVE, SolrOperator.WILDCARD, opTO, quoted(value), SolrOperator.CLOSE_INCLUSIVE)), translator.lte(property, value));
assertEquals(expected, translator.within(field, new Point<Double>(x, y), distance));
assertEquals(tests[i], iterator.next());
assertEquals(fq(property, join(SolrOperator.OPEN_INCLUSIVE, from, opTO, to, SolrOperator.CLOSE_INCLUSIVE)), translator.between(property, from, to));
assertEquals(s1, s2);
assertEquals(o(property, between), translator.between(property, from, to));
assertEquals("latlon.latitude", resolved);
assertEquals("\\"test string\\"", translator.string("test string"));
assertEquals(t1, found);
assertEquals(Operator.AND, and.getOperator()); assertEquals(2, criteria.size()); assertEquals(left, criteria.get(0)); assertEquals(right, criteria.get(1));
assertEquals(Box.create(-almostOneDegree, -almostOneDegree, almostOneDegree, almostOneDegree), box);
assertEquals(expected, translator.translateProjection(QueryBuilder.builderFor( TestClass.class, TestClass.class, properties).build()));
assertEquals(join(property, HibernateOperator.EMPTY), translator.isEmpty(property));
assertEquals(expected, translator.eq(field, testValue));
assertEquals(expected, translator.lt(field, testValue));
assertEquals(expected, translator.notIn(field, testValues));
assertEquals(Operator.GREATER_THAN_OR_EQUAL, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertEquals(1D, GeoBoxMaker.kilometersToRadians(GeoBoxMaker.EARTH_RADIUS_KILOMETERS), 0);
assertEquals("\\"2012-02-21T14:34:25Z\\"", translator.string(c.getTime()));
assertEquals("latlon.longitude", resolved);
assertEquals(join(property, HibernateOperator.LESS_THAN, value), translator.lt(property, value));
assertEquals(Operator.CONTAINS, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertArrayEquals(values, e.getValues());
assertEquals(Operator.GREATER_THAN, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertEquals("t", resolver.resolve("t", TestMappedClass.class)); assertEquals("t.a", resolver.resolve("t.a", TestMappedClass.class)); assertEquals("t.bee", resolver.resolve("t.b", TestMappedClass.class));
assertEquals(a, min(a, b)); assertEquals(a, min(b, a));
assertEquals(Operator.BETWEEN, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(from, e.getFrom()); assertEquals(to, e.getTo());
assertEquals(o(property, value), translator.eq(property, value));
assertArrayEquals(new Integer[] { 10 }, Restrictions.range(10, 10));
assertEquals(Math.PI, GeoBoxMaker.degreesToRadians(180D), 0); assertEquals(2 * Math.PI, GeoBoxMaker.degreesToRadians(360D), 0);
assertEquals(o(property, o(MongoOperator.GREATER_THAN_OR_EQUAL, value)), translator.gte(property, value));
assertEquals(o(property, o(MongoOperator.IN, values)), translator.in(property, values));
assertEquals(b, max(a, b)); assertEquals(b, max(b, a));
assertEquals(a, min(a, b)); assertEquals(a, min(b, a));
assertEquals(join(property, HibernateOperator.NOT_NULL), translator.notNull(property));
assertEquals(Operator.NOT_EMPTY, e.getOperator()); assertEquals(propertyName, e.getPropertyName());
assertEquals(Operator.EMPTY, e.getOperator()); assertEquals(propertyName, e.getPropertyName());
assertEquals(b, max(a, b)); assertEquals(b, max(b, a));
assertEquals(expected, translator.within(xprop, yprop, box));
assertEquals(b, max(a, b)); assertEquals(b, max(b, a));
assertArrayEquals(new String[0], hMapper.returnFields(unprojected));
assertEquals(1, list.size()); assertEquals(property, ordering.getField()); assertEquals(SolrQuery.ORDER.desc, ordering.getOrder());
assertEquals(q1, translator.and(q1));
assertEquals(join(property, HibernateOperator.LESS_THAN_OR_EQUAL, value), translator.lte(property, value));
assertNull(result);
assertEquals(expected.toString(), actual.toString());
assertEquals("teatwo", resolver.resolve("t2", TestMappedClass.class)); assertEquals("teatwo.a", resolver.resolve("t2.a", TestMappedClass.class)); assertEquals("teatwo.bee", resolver.resolve("t2.b", TestMappedClass.class));
assertEquals( join(property, HibernateOperator.BETWEEN, from, HibernateOperator.AND, to), translator.between( property, from, to));
assertEquals(t, SymbolicLookup.resolve(t.symbol(), map, TestSymbol.class));
assertEquals(expression, translator.translate(query(e))); assertEquals(expression, translator.translate(e, entityClass));
assertEquals(propertyName, resolver.resolve(propertyName, Object.class));
assertEquals(test, hMapper.mapResult(input, projected2));
assertEquals(a, min(a, b)); assertEquals(a, min(b, a));
assertEquals(t.symbol(), lookup.apply(t));
assertEquals(o(property, o(MongoOperator.EXISTS, 0)), translator.exists(property, false));
assertEquals(expected, translator.notEmpty(field));
assertEquals("Maybe", resolver.resolve(Maybe.class));
assertEquals("thatProperty", resolver.resolve("thisProperty", TestMappedClass.class));
assertEquals(join(property, HibernateOperator.NOT_EMPTY), translator.notEmpty(property));
assertEquals(o(MongoOperator.AND, set( o(property, o(MongoOperator.EXISTS, 1)), o(property, o(MongoOperator.NOT_EQUAL, null)) )), translator.notNull(property));
assertArrayEquals(expected.getAliases(), actual.getAliases());
assertEquals(a, min(a, b)); assertEquals(a, min(b, a));
assertEquals(fq(property, join("(", Joiner.on(opAND).join(quoted(values)), ")")), translator.contains(property, values));
assertEquals(expected, translator.lte(field, testValue));
assertEquals(q1, translator.and(q1));
assertEquals("name", resolver.resolve("name", TestMappedClass.class));
assertEquals(expected, translator.translate(j, entityClass));
assertEquals("", translator.or());
assertEquals( "a,b,c", translator.translateProjection(QueryBuilder.builderFor( String.class, String.class, "a", "b", "c").build()));
assertEquals(Operator.NULL, e.getOperator()); assertEquals(propertyName, e.getPropertyName());
assertEquals(expected, translator.isNull(field));
assertEquals(fq(property, opALL), translator.notNull(property));
assertEquals(expected, actual);
assertNull(translator.translateProjection(QueryBuilder.builderFor(String.class).build()));
assertEquals(expected, translator.translateOrder(orderQuery(o)));
assertEquals(join(property, HibernateOperator.GREATER_THAN_OR_EQUAL, value), translator.gte(property, value));
assertEquals("", translator.or());
assertEquals(expected, e.toString());
assertEquals(expected, e.toString());
assertEquals("thatProperty", resolver.resolve("thisProperty", TestMappedClass.class));
assertEquals(Operator.EQUAL, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertEquals(4, actual.get().size()); assertEquals(expected.get(), actual.get());
assertEquals(one, mapper.mapTo(Integer.class, one, props("id")));
assertEquals(Box.create(-1D, -1D, 1D, 1D), box);
assertEquals(fq(SolrOperator.NEGATION + property, opALL), translator.isNull(property));
assertEquals("", translator.and());
assertEquals(expected, actual);
assertEquals(expected, translator.between(field, testFrom, testTo));
assertEquals(o(property, o(MongoOperator.LESS_THAN, value)), translator.lt(property, value));
assertEquals("without", resolver.resolve(No.class));
assertEquals(expected, translator.isEmpty(field));
assertEquals(o(property, o(MongoOperator.EXISTS, 1)), translator.exists(property, true));
assertEquals(to, e.getTo());
assertEquals(tests[i], iterator.next());
assertEquals(o(MongoOperator.AND, set( o(property, o(MongoOperator.EXISTS, 1)), o(property, o(MongoOperator.NOT_EQUAL, "")) )), translator.notEmpty(property));
assertEquals(property + " asc", translator.order(property, Order.ASCENDING));
assertEquals(expected, translator.contains(field, testValues));
assertEquals("UnnamedMappedClass", resolver.resolve(UnnamedMappedClass.class));
assertEquals(join(property, HibernateOperator.NULL), translator.isNull(property));
assertEquals(fq(property, quoted(value)), translator.eq(property, value));
assertArrayEquals(fields, hMapper.returnFields(projected2));
assertEquals(o(property, o(MongoOperator.GREATER_THAN, value)), translator.gt(property, value));
assertEquals(join(property, HibernateOperator.IN, (Object) values), translator.in(property, values));
assertEquals(o(property, 1), translator.order(property, Order.ASCENDING));
assertEquals(fq(property, join(SolrOperator.OPEN_INCLUSIVE, SolrOperator.WILDCARD, opTO, quoted(value), SolrOperator.CLOSE_EXCLUSIVE)), translator.lt(property, value));
assertEquals(o(property, o(MongoOperator.NOT_EQUAL, value)), translator.ne(property, value));
assertNull(result);
assertEquals(Box.create(-almostOneDegree, -almostOneDegree, almostOneDegree, almostOneDegree), box);
assertEquals(expected, translator.translateOrder(orderQuery(o)));
assertEquals("Object", resolver.resolve(Object.class));
assertEquals(fq(property, join(SolrOperator.OPEN_INCLUSIVE, quoted(value), opTO, SolrOperator.WILDCARD, SolrOperator.CLOSE_INCLUSIVE)), translator.gte(property, value));
assertNull(translator.translateProjection(QueryBuilder.builderFor(String.class).build()));
assertEquals(expected, boxMaker.make(p, -radius));
assertEquals(expected, translator.translate(j, entityClass));
assertEquals(query, translator.translate(e, Void.class));
assertEquals(o(property, o(MongoOperator.WITHIN, o(MongoOperator.CENTER, list(list(x, y), distance) ))), translator.within(property, new Point<Double>(x, y), distance));
assertEquals("\\"test string\\"", translator.string("test string"));
assertEquals(Operator.IN, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertArrayEquals(values, e.getValues());
assertEquals(expected, translator.translateProjection(QueryBuilder.builderFor( TestClass.class, TestClass.class, properties).build()));
assertEquals(180D, GeoBoxMaker.radiansToDegrees(Math.PI), 0); assertEquals(360D, GeoBoxMaker.radiansToDegrees(2 * Math.PI), 0);
assertEquals(fq(SolrOperator.NEGATION + property, join("(", Joiner.on(opOR).join(quoted(values)), ")")), translator.notIn(property, values));
assertEquals(fq(SolrOperator.NEGATION + property, quoted(value)), translator.ne(property, value));
assertEquals(fq(property, join(SolrOperator.OPEN_EXCLUSIVE, quoted(value), opTO, SolrOperator.WILDCARD, SolrOperator.CLOSE_INCLUSIVE)), translator.gt(property, value));
assertEquals(expression, translator.translate(query(e)));
assertEquals(1, list.size()); assertEquals(property, ordering.getField()); assertEquals(SolrQuery.ORDER.asc, ordering.getOrder());
assertEquals(expected, translator.ne(field, testValue));
assertEquals(Operator.OR, or.getOperator()); assertEquals(2, criteria.size()); assertEquals(left, criteria.get(0)); assertEquals(right, criteria.get(1));
assertEquals("\\"\\\\\\"test\\\\\\" string\\"", translator.string("\\"test\\" string"));
assertEquals(testValue, e.getValue());
assertEquals(fq(SolrOperator.NEGATION + property, opALL), translator.isEmpty(property));
assertEquals(o(property, value), translator.contains(property, new Object[]{ value }));
assertEquals(string, hMapper.mapResult(input, projected));
assertEquals("\\"\\\\\\"test\\\\\\" string\\"", translator.string("\\"test\\" string"));
assertEquals(criteria.size(), subqueries.length); assertEquals(translator.translate(criteria.get(i), entityClass), subqueries[i]);
assertEquals(Operator.NOT_NULL, e.getOperator()); assertEquals(propertyName, e.getPropertyName());
assertEquals("name", resolver.resolve("name", TestMappedClass.class));
assertEquals(a, min(a, b)); assertEquals(a, min(b, a));
assertEquals(t1, found);
assertEquals(o(MongoOperator.OR, set( o(property, o(MongoOperator.EXISTS, 0)), o(property, "") )), translator.isEmpty(property));
assertEquals(expected, actual);
assertEquals(o(property, o(MongoOperator.NOT_IN, values)), translator.notIn(property, values));
assertEquals(from, e.getFrom());
assertEquals(Operator.CONTAINS, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValues()[0]); assertEquals(1, e.getValues().length);
assertEquals(b, max(a, b)); assertEquals(b, max(b, a));
assertEquals(expected, translator.gt(field, testValue));
assertEquals(join(property, HibernateOperator.GREATER_THAN, value), translator.gt(property, value));
assertEquals(t1, saved);
assertEquals(join(property, HibernateOperator.NOT_IN, (Object) values), translator.notIn(property, values));
assertEquals("latlon.lat", resolved);
assertEquals(Operator.NOT_EQUAL, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertEquals( Collections.EMPTY_LIST, translator.translateProjection(QueryBuilder.builderFor(String.class).build()));
assertEquals("latlon.lon", resolved);
assertEquals(propertyName, o.getPropertyName()); assertEquals(Order.DESCENDING, o.getOrder());
assertEquals(Box.create(33.02886, -119.68064899173066, 35.02886, -117.26733700826932), box);
assertEquals("with", resolver.resolve(Yes.class));
assertEquals(Operator.LESS_THAN, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertEquals(fq(property, opALL), translator.notEmpty(property));
assertEquals(join(property, HibernateOperator.EQUAL, value), translator.eq(property, value));
assertEquals(strings, hMapper.mapResults(strings, unprojected));
assertEquals(propertyName, o.getPropertyName()); assertEquals(Order.ASCENDING, o.getOrder());
assertEquals(fq(property, join("(", Joiner.on(opOR).join(quoted(values)), ")")), translator.in(property, values));
assertEquals(t1, saved);
assertEquals(1D, GeoBoxMaker.milesToRadians(GeoBoxMaker.EARTH_RADIUS_MILES), 0);
assertEquals(expected, actual);
assertEquals(o(MongoOperator.AND, objects), translator.contains(property, values));
assertEquals(expected, e.toString());
assertEquals(expected, translator.order(o1, o2, o3, o4));
assertEquals(property + " desc", translator.order(property, Order.DESCENDING));
assertEquals(t, map.get(t.symbol()));
assertEquals(join(property, HibernateOperator.NOT_EQUAL, value), translator.ne(property, value));
assertEquals(this.t1, found); assertNull(found);
assertEquals(expected, translator.in(field, testValues));
assertEquals(Operator.IN, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertArrayEquals(values, e.getValues());
assertEquals("\\"2012-02-21 14:34:25\\"", translator.string(c.getTime()));
assertArrayEquals(new Integer[] { 10, 11, 12, 13, 14, 15, 16, 17 }, Restrictions.range(10, 17));
assertEquals(Operator.LESS_THAN_OR_EQUAL, e.getOperator()); assertEquals(propertyName, e.getPropertyName()); assertEquals(value, e.getValue());
assertArrayEquals(testValues, e.getValues());
assertThat(result, instanceOf(ScheduledExecutorService.class)); assertTrue(result.allowsCoreThreadTimeOut()); assertEquals(ThreadPoolManager.THREAD_TIMEOUT, result.getKeepAliveTime(TimeUnit.SECONDS)); assertEquals(ThreadPoolManager.DEFAULT_THREAD_POOL_SIZE, result.getCorePoolSize());
assertTrue(pt1.equals(pt2)); assertTrue(pt3.equals(pt4)); assertFalse(pt3.equals(pt1));
assertThat(stateDescription.isReadOnly(), is(stateDescriptionFragment1.isReadOnly()));
assertEquals(PercentType.HUNDRED, new HSBType("100,100,100").as(PercentType.class)); assertEquals(new PercentType("1"), new HSBType("100,100,1").as(PercentType.class)); assertEquals(PercentType.ZERO, new HSBType("100,100,0").as(PercentType.class));
assertEquals(new QuantityType<>("100 %"), PercentType.HUNDRED.as(QuantityType.class)); assertEquals(new QuantityType<>("1 one"), ((QuantityType<?>) PercentType.HUNDRED.as(QuantityType.class)).toUnit(SmartHomeUnits.ONE));
assertThat(stateDescription.isReadOnly(), is(stateDescriptionFragment1.isReadOnly()));
assertTrue(thingManager.isEnabled(unknownUID)); assertFalse(thingManager.isEnabled(unknownUID));
assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", INTEGER).withDefault("1").build()), is(BigDecimal.ONE)); assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", INTEGER).withDefault("1.2").build()), is(BigDecimal.ONE)); assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", INTEGER).withDefault("foo").build()), is(nullValue()));
assertTrue(hsb1.equals(hsb2)); assertTrue(hsb1.equals(hsb2));
assertThat(port, is(8080));
assertEquals(new HSBType(new DecimalType(75), new PercentType(75), new PercentType(75)), item.getState());
assertEquals(Temperature.class, SemanticTags.getProperty(pointItem));
assertThat(threadFactory.newThread(TEST_RUNNABLE).getUncaughtExceptionHandler(), is(handler));
assertThat(XmlHelper.getSystemUID("test"), is("system:test"));
assertEquals(RESPONSE_1, subject.get(FIRST_TEST_KEY)); assertNotEquals(RESPONSE_1, response); assertEquals(RESPONSE_2, response);
assertEquals(PlayPauseType.PLAY, item.getState()); assertEquals(PlayPauseType.PAUSE, item.getState());
assertThat(response.getStatus(), is(200)); assertThat(response.getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); assertThat(entity.getClass(), is(typeCompatibleWith(InputStream.class))); assertThat(largeEntityJSON, is(notNullValue())); assertTrue(largeEntityJSON.startsWith("{")); assertTrue(largeEntityJSON.endsWith("}"));
assertThat(provider.getParameterOptions(uriI18N, "unknown", null, Locale.US), nullValue());
assertTrue(items.contains(pointItem)); assertTrue(items.contains(pointItem));
assertThat(port, is(49090));
assertThat(results.size(), is(1)); assertThat(results.get(0).getThingUID(), is(equalTo(THING_UID2))); assertThat(results.size(), is(0));
assertNull(value1);
assertTrue(subject.containsKey(FIRST_TEST_KEY));
assertEquals(new HSBType("0,0,100"), item.getState()); assertEquals(new HSBType("0,0,0"), item.getState());
assertEquals("fake:type:bridge:thing", subject.getAsString()); assertThat(subject.getBridgeIds(), hasSize(1)); assertEquals("bridge", subject.getBridgeIds().get(0));
assertEquals(CHANNEL_GROUP_TYPE_UID, channelGroupType.getUID()); assertEquals(LABEL, channelGroupType.getLabel());
assertTrue(ThingHelper.equals(thingA, thingB)); assertFalse(ThingHelper.equals(thingA, thingB));
assertThat(matcher.filterNamespaces("", null), is(Collections.emptySet()));
assertEquals("Given HTTP Method \'TRACE\' is unknown", exception.getMessage());
assertNotNull(is); assertNull(is);
assertTrue(before.getPromise().isCompletedExceptionally(), "Scheduled job cancelled before timeout");
assertNotNull(discoveryResult.getThingTypeUID()); assertEquals(discoveryResult.getThingTypeUID(), thingTypeUID);
assertEquals("Some content", result);
assertNotNull(value1); assertNotNull(value2); assertEquals(value1, value2); assertNotNull(value3); assertNotEquals(value1, value3); assertEquals(expectedValues, values); assertNull(value4);
assertEquals("41-:-42-:-43-:-44", result);
assertEquals(OnOffType.ON, new QuantityType<>("1").as(OnOffType.class)); assertEquals(OnOffType.OFF, new QuantityType<>("0").as(OnOffType.class)); assertEquals(OnOffType.ON, new QuantityType<>("1 %").as(OnOffType.class)); assertEquals(OnOffType.ON, new QuantityType<>("100 %").as(OnOffType.class)); assertEquals(OnOffType.OFF, new QuantityType<>("0 %").as(OnOffType.class));
assertEquals(PercentType.HUNDRED, sut.getState());
assertThat(thing.getChannels(), hasSize(1)); assertThat(thing.getChannels().get(0).getUID().getId(), is(equalTo("channel2")));
assertTrue(ThingHelper.equals(thingA, thingB)); assertFalse(ThingHelper.equals(thingA, thingB));
assertThat(testThread.getName(), is("OH-" + testThreadName));
assertThat(isHandlerInitialized(thing), is(false)); assertThat(isHandlerInitialized(thing), is(false)); assertThat(isHandlerInitialized(thing), is(false)); assertThat(isHandlerInitialized(thing), is(false)); assertThat(isHandlerInitialized(thing), is(true)); assertThat(isHandlerInitialized(thing), is(true)); assertThat(isHandlerInitialized(thing), is(true));
assertThat(matcher.filterNamespaces("magic, foo, bar", null), hasItems("magic", "foo", "bar"));
assertTrue(after.isDone(), "Scheduled job should finish done"); assertEquals(10, check.get(), "After CompletableFuture should return correct value"); assertEquals(5, after.get().intValue(), "After CompletableFuture should return correct value");
assertNotNull(historicItem); assertEquals("1", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("1", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("2012", historicItem.getState().toString()); assertEquals(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneId.systemDefault()), historicItem.getTimestamp()); assertNotNull(historicItem); assertEquals("1", historicItem.getState().toString());
assertEquals(OpenClosedType.OPEN, new QuantityType<>("1.0").as(OpenClosedType.class)); assertEquals(OpenClosedType.CLOSED, new QuantityType<>("0.0").as(OpenClosedType.class)); assertNull(new QuantityType<>("0.5").as(OpenClosedType.class));
assertEquals(callItem1.toString(), "testItem (Type=CallItem, State=0699222222,0179999998, Label=null, Category=null)"); assertEquals(callItem1.toString(), "testItem (Type=CallItem, State=0699222222,0179999998, Label=null, Category=null)");
assertThat(configurableService.annotationType(), is(ConfigurableService.class)); assertThat(configurableService.category(), is(emptyString())); assertThat(configurableService.description_uri(), is(emptyString())); assertThat(configurableService.factory(), is(false)); assertThat(configurableService.label(), is(emptyString()));
assertThat(port, is(9090));
assertTrue(diff >= 3 && diff <= 4, "Difference calculation should be between 3 and 4 but was: " + diff); assertEquals("bar", ref.get(), "Environment variable \'foo\' should be correctly set");
assertTrue(before.isDone(), "Scheduled job should be done"); assertTrue(before.getPromise().isCompletedExceptionally(), "Before CompletableFuture should have completed with an exception");
assertNull(value1);
assertThat(threadFactory.newThread(TEST_RUNNABLE).getPriority(), is(Thread.MIN_PRIORITY)); assertThat(threadFactory.newThread(TEST_RUNNABLE).getPriority(), is(Thread.MAX_PRIORITY));
assertFalse(updated); assertTrue(updated); assertFalse(updated);
assertTrue(ThingHelper.equals(thingA, thingB)); assertFalse(ThingHelper.equals(thingA, thingB));
assertEquals("41 42 43 44", result);
assertEquals("itemName", new MetadataKey("namespace", "itemName").getItemName());
assertNotNull(result); assertNotEquals("test", result);
assertThat(thingStatusInfo.getStatus(), is(ThingStatus.ONLINE)); assertThat(thingStatusInfo.getStatusDetail(), is(ThingStatusDetail.NONE)); assertThat(thingStatusInfo.getDescription(), is(nullValue()));
assertEquals(RESPONSE_1, response); assertEquals(RESPONSE_1, subject.get(FIRST_TEST_KEY)); assertEquals(RESPONSE_1, response); assertNotEquals(RESPONSE_2, response);
assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", DECIMAL).withDefault("1").build()), is(BigDecimal.ONE)); assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", DECIMAL).withDefault("1.2").build()), is(new BigDecimal("1.2"))); assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", DECIMAL).withDefault("foo").build()), is(nullValue()));
assertEquals(OnOffType.ON, new HSBType("100,100,100").as(OnOffType.class)); assertEquals(OnOffType.ON, new HSBType("100,100,1").as(OnOffType.class)); assertEquals(OnOffType.OFF, new HSBType("100,100,0").as(OnOffType.class));
assertEquals(percent, item.getState());
assertEquals(new HSBType("0,0,0"), new DecimalType("0.0").as(HSBType.class)); assertEquals(new HSBType("0,0,100"), new DecimalType("1.0").as(HSBType.class)); assertEquals(new HSBType("0,0,50"), new DecimalType("0.5").as(HSBType.class));
assertThat(isHandlerInitialized(ThingStatus.UNINITIALIZED), is(false)); assertThat(isHandlerInitialized(ThingStatus.INITIALIZING), is(false)); assertThat(isHandlerInitialized(ThingStatus.REMOVING), is(false)); assertThat(isHandlerInitialized(ThingStatus.REMOVED), is(false)); assertThat(isHandlerInitialized(ThingStatus.UNKNOWN), is(true)); assertThat(isHandlerInitialized(ThingStatus.ONLINE), is(true)); assertThat(isHandlerInitialized(ThingStatus.OFFLINE), is(true));
assertEquals(26, decResult.intValue());
assertThat(item.getStateDescription().getPattern(), is("%.1f"));
assertNotNull(average); assertEquals(expected, average.doubleValue(), 0.01); assertNotNull(average); assertEquals(expected, average.doubleValue(), 0.01); assertNull(average);
assertTrue(UnitUtils.isDifferentMeasurementSystem(SIUnits.CELSIUS, ImperialUnits.FAHRENHEIT)); assertTrue(UnitUtils.isDifferentMeasurementSystem(ImperialUnits.MILES_PER_HOUR, SIUnits.KILOMETRE_PER_HOUR));
assertThat(convertedState, is(new DecimalType("0.42")));
assertThat(cddto.parameters, hasSize(1)); assertThat(cdpdto, instanceOf(EnrichedConfigDescriptionParameterDTO.class)); assertThat(cdpdto.defaultValue, is(nullValue())); assertThat(ecdpdto.defaultValues, is(nullValue()));
assertEquals(PercentType.ZERO, sut.getState());
assertEquals((double) 0.5f, (double) sRE.getConfidence(), (double) 0.001f, "SpeechRecognitionEvent.getConfidence() method failed");
assertEquals("87", dt.format("%d")); assertEquals(" 87", dt.format("%3d")); assertEquals("0x57", dt.format("%#x")); assertEquals("11", dt.format("%d"));
assertEquals(0, s.availablePermits(), "Scheduler should not have released more after cancel"); assertEquals(0, temporalAdjuster.getCount(), "Scheduler should have run 0 time");
assertTrue(ThingHelper.equals(thingA, thingA)); assertTrue(ThingHelper.equals(thingA, thingB));
assertTrue(ThingHelper.equals(thingA, thingB)); assertFalse(ThingHelper.equals(thingA, thingB));
assertEquals(OnOffType.ON, new PercentType("100.0").as(OnOffType.class)); assertEquals(OnOffType.ON, new PercentType("1.0").as(OnOffType.class)); assertEquals(OnOffType.OFF, new PercentType("0.0").as(OnOffType.class));
assertThat(stateDescription.getMinimum(), is(stateDescriptionFragment1.getMinimum())); assertThat(stateDescription.getMaximum(), is(stateDescriptionFragment1.getMaximum())); assertThat(stateDescription.getStep(), is(stateDescriptionFragment1.getStep())); assertThat(stateDescription.getPattern(), is(stateDescriptionFragment1.getPattern()));
assertEquals("test", value);
assertThat(stateDescription.getMinimum(), is(source.getMinimum())); assertThat(stateDescription.getMaximum(), is(source.getMaximum())); assertThat(stateDescription.getStep(), is(source.getStep())); assertThat(stateDescription.getPattern(), is(source.getPattern())); assertThat(stateDescription.isReadOnly(), is(source.isReadOnly())); assertThat(stateDescription.getOptions(), is(source.getOptions()));
assertTrue(compare < 0, "First future should be less than second");
assertEquals(OpenClosedType.OPEN, new PercentType("100.0").as(OpenClosedType.class)); assertEquals(OpenClosedType.CLOSED, new PercentType("0.0").as(OpenClosedType.class)); assertNull(new PercentType("50.0").as(OpenClosedType.class));
assertEquals(26, decResult.intValue());
assertNull(delta); assertNotNull(delta); assertEquals(7, delta.doubleValue(), 0.001); assertNotNull(delta); assertEquals(7, delta.doubleValue(), 0.001); assertNull(delta);
assertNotNull(commandDescription); assertNotNull(commandDescription.getCommandOptions()); assertEquals(3, commandDescription.getCommandOptions().size()); assertEquals("OPTION1", commandOption.getCommand()); assertNull(commandOption.getLabel()); assertEquals("OPTION2", commandOption.getCommand()); assertNull(commandOption.getLabel()); assertEquals("3", commandOption.getCommand()); assertEquals("Option 3", commandOption.getLabel());
assertEquals(state, item.getState());
assertNotNull(value1); assertNotNull(value2); assertEquals(value1, value2);
assertThat(group.getName(), is("test")); assertThat(group.getContext(), is("My Context")); assertThat(group.isAdvanced(), is(true)); assertThat(group.getLabel(), is("My Label")); assertThat(group.getDescription(), is("My Description"));
assertEquals("itemName", captor.getValue());
assertEquals("binding:thing-type:thing:group", channelGroupUID.toString()); assertEquals(GROUP_ID, channelGroupUID.getId()); assertEquals(THING_UID, channelGroupUID.getThingUID());
assertThat(event.getType(), is(INBOX_ADDED_EVENT_TYPE)); assertThat(event.getTopic(), is(INBOX_ADDED_EVENT_TOPIC)); assertThat(event.getPayload(), is(INBOX_ADDED_EVENT_PAYLOAD)); assertThat(event.getDiscoveryResult(), not(nullValue())); assertThat(event.getDiscoveryResult().thingUID, is(THING_UID.getAsString()));
assertThat(matcher.filterNamespaces(null, null), is(Collections.emptySet()));
assertThat(configDescription.getUID(), is(equalTo(uriDummy)));
assertNotNull(lastUpdate); assertEquals(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneId.systemDefault()), lastUpdate); assertNull(lastUpdate);
assertEquals(new HSBType("0,0,0"), new QuantityType<>("0.0").as(HSBType.class)); assertEquals(new HSBType("0,0,100"), new QuantityType<>("1.0").as(HSBType.class)); assertEquals(new HSBType("0,0,50"), new QuantityType<>("0.5").as(HSBType.class));
assertEquals(PercentType.HUNDRED, new QuantityType<>("100 %").as(PercentType.class)); assertEquals(PercentType.ZERO, new QuantityType<>("0 %").as(PercentType.class));
assertThat(results.size(), is(1)); assertThat(results.get(0).getThingUID(), is(equalTo(THING_UID))); assertThat(results.size(), is(0));
assertEquals(state, item.getState());
assertThat((Collection<?>) sitemaps.getEntity(), hasSize(1)); assertThat(dto.name, is(SITEMAP_MODEL_NAME)); assertThat(dto.link, is(SITEMAP_PATH + "/" + SITEMAP_MODEL_NAME));
assertEquals("test", result);
assertEquals(decimal, item.getState());
assertThat(isHandlerInitialized(thingHandler), is(false)); assertThat(isHandlerInitialized(thingHandler), is(false)); assertThat(isHandlerInitialized(thingHandler), is(false)); assertThat(isHandlerInitialized(thingHandler), is(false)); assertThat(isHandlerInitialized(thingHandler), is(true)); assertThat(isHandlerInitialized(thingHandler), is(true)); assertThat(isHandlerInitialized(thingHandler), is(true));
assertThat(errorResponse.getMediaType(), is(equalTo(MediaType.APPLICATION_JSON_TYPE))); assertThat(errorResponse.getStatus(), is(500)); assertThat(entity.get(JSONResponse.JSON_KEY_ERROR_MESSAGE).getAsString(), is("error")); assertThat(entity.get(JSONResponse.JSON_KEY_HTTPCODE).getAsInt(), is(500));
assertNull(item.eventPublisher); assertNull(item.itemStateConverter); assertNull(item.unitProvider); assertEquals(0, item.listeners.size());
assertTrue(originalState == state);
assertThat(threadFactory.newThread(TEST_RUNNABLE).isDaemon(), is(true)); assertThat(threadFactory.newThread(TEST_RUNNABLE).isDaemon(), is(false));
assertThat(undfinedPort, is(-1));
assertEquals(ITEM_NAME, label);
assertEquals("ABCD", new String(result));
assertEquals(0, s.availablePermits(), "Scheduler should not have released more after cancel"); assertEquals(1, temporalAdjuster.getCount(), "Scheduler should have run 1 time");
assertThat(item.getType(), is(itemTypeName)); assertThat(item.getName(), is(itemTypeName.toLowerCase()));
assertFalse(changed); assertTrue(changed); assertFalse(changed);
assertEquals("binding:thing-type:thing:id", channelUID.toString()); assertFalse(channelUID.isInGroup()); assertEquals(CHANNEL_ID, channelUID.getId()); assertEquals(CHANNEL_ID, channelUID.getIdWithoutGroup()); assertNull(channelUID.getGroupId()); assertEquals(THING_UID, channelUID.getThingUID());
assertEquals(new PercentType(70), new DecimalType("0.7").as(PercentType.class));
assertThat(configDescription.getUID(), is(CONFIG_URI)); assertThat(configDescription.getParameterGroups(), hasSize(0)); assertThat(configDescription.getParameters(), hasSize(0));
assertTrue(dt1.equals(dt2)); assertFalse(dt1.equals(dt3)); assertTrue(dt3.equals(pt)); assertFalse(dt1.equals(pt));
assertThat(matcher.filterNamespaces(".*", null), hasSize(4)); assertThat(matcher.filterNamespaces("magic.?", null), hasSize(2));
assertEquals(UpDownType.UP, new QuantityType<>("0.0").as(UpDownType.class)); assertEquals(UpDownType.DOWN, new QuantityType<>("1.0").as(UpDownType.class)); assertNull(new QuantityType<>("0.5").as(OpenClosedType.class));
assertEquals("11" + sep + "1", dt.format("%.1f")); assertEquals("11" + sep + "0", dt.format("%.1f")); assertEquals("11" + sep + "0", dt.format("%.1f"));
assertEquals(RewindFastforwardType.REWIND, item.getState()); assertEquals(RewindFastforwardType.FASTFORWARD, item.getState());
assertEquals(20, decResult.intValue());
assertEquals(OpenClosedType.OPEN, new DecimalType("1.0").as(OpenClosedType.class)); assertEquals(OpenClosedType.CLOSED, new DecimalType("0.0").as(OpenClosedType.class)); assertNull(new DecimalType("0.5").as(OpenClosedType.class));
assertThat(errorResponse.getMediaType(), is(equalTo(MediaType.APPLICATION_JSON_TYPE))); assertThat(errorResponse.getStatus(), is(500)); assertThat(entity.get(JSONResponse.JSON_KEY_ERROR_MESSAGE).getAsString(), is("error")); assertThat(entity.get(JSONResponse.JSON_KEY_HTTPCODE).getAsInt(), is(500)); assertThat(entity.get(JSONResponse.JSON_KEY_ENTITY), is(nullValue()));
assertNotEquals(value1, value2); assertNotEquals(expectedValues, values);
assertThat(response.getStatus(), is(200)); assertThat(response.getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); assertThat(entity.getClass(), is(typeCompatibleWith(InputStream.class))); assertThat(new String(entityValue), is(ENTITY_JSON_VALUE));
assertEquals("Message", sRE.getMessage(), "SpeechRecognitionErrorEvent.getMessage() method failed");
assertThat(errorResponse.getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); assertThat(errorResponse.getStatus(), is(500)); assertThat(resultJson.get(JSONResponse.JSON_KEY_ENTITY).getAsString(), is(ENTITY_VALUE)); assertThat(errorJson.get(JSONResponse.JSON_KEY_ERROR_MESSAGE).getAsString(), is("error")); assertThat(errorJson.get(JSONResponse.JSON_KEY_HTTPCODE).getAsInt(), is(500));
assertThat(result, is(new QuantityType<>("19.80 m")));
assertTrue(before.isDone(), "Scheduled job should finish done"); assertTrue(before.get(), "Before CompletableFuture should return correct value");
assertEquals("192.168.178.1", discoveryResult.getProperties().get("ipAddress")); assertEquals("AA:BB:CC:DD:EE:FF", discoveryResult.getProperties().get("macAddress")); assertEquals("macAddress", discoveryResult.getRepresentationProperty()); assertEquals("SOURCE", discoveryResult.getLabel()); assertEquals(DiscoveryResultFlag.IGNORED, discoveryResult.getFlag());
assertEquals("Label [value]", label);
assertEquals(uuid1, uuid2);
assertThat(gFunc, instanceOf(ArithmeticGroupFunction.Count.class)); assertThat(gFunc.getParameters().length, is(1)); assertThat(gFunc.getParameters()[0], instanceOf(StringType.class));
assertEquals("a,b,c", fullString);
assertThat(sslEngineCaptor.getValue().getPeerHost(), is("www.eclipse.org")); assertThat(sslEngineCaptor.getValue().getPeerPort(), is(443)); assertThat(certificateChainCaptor.getValue()[0].getSubjectX500Principal().getName(), containsString("eclipse.org"));
assertEquals(new HSBType("0,0,100"), item.getStateAs(HSBType.class)); assertEquals(new HSBType("0,0,0"), item.getStateAs(HSBType.class));
assertEquals(new DecimalType("1.0"), new PercentType("100.0").as(DecimalType.class)); assertEquals(new DecimalType("0.01"), new PercentType("1.0").as(DecimalType.class)); assertEquals(DecimalType.ZERO, new PercentType("0.0").as(DecimalType.class));
assertNotNull(result); assertNotEquals("", result);
assertEquals(OnOffType.ON, new DecimalType("100.0").as(OnOffType.class)); assertEquals(OnOffType.ON, new DecimalType("1.0").as(OnOffType.class)); assertEquals(OnOffType.OFF, new DecimalType("0.0").as(OnOffType.class));
assertNull(commandDescription);
assertEquals("ABCD", new String(result));
assertTrue(items.contains(pointItem)); assertTrue(items.isEmpty());
assertThat(response.getStatus(), is(202)); assertThat(response.getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); assertThat(entity, is(nullValue()));
assertEquals(new DecimalType("1.0"), new HSBType("100,100,100").as(DecimalType.class)); assertEquals(new DecimalType("0.01"), new HSBType("100,100,1").as(DecimalType.class)); assertEquals(DecimalType.ZERO, new HSBType("100,100,0").as(DecimalType.class));
assertEquals(new HSBType("11,100,100"), hsb);
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(EphemerisConditionHandler.class)); assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(EphemerisConditionHandler.class));
assertEquals("ABCD", new String(result));
assertEquals(new HSBType("0,0,0"), new PercentType("0.0").as(HSBType.class)); assertEquals(new HSBType("0,0,100"), new PercentType("100.0").as(HSBType.class)); assertEquals(new HSBType("0,0,50"), new PercentType("50.0").as(HSBType.class));
assertNull(stateDescriptionFragment);
assertEquals("123", uuid);
assertThat(configurableService.annotationType(), is(ConfigurableService.class)); assertThat(configurableService.category(), is(category)); assertThat(configurableService.description_uri(), is(descriptionURI)); assertThat(configurableService.factory(), is(factory)); assertThat(configurableService.label(), is(label));
assertEquals(Bathroom.class, SemanticTags.getSemanticType(locationItem)); assertEquals(CleaningRobot.class, SemanticTags.getSemanticType(equipmentItem)); assertEquals(Measurement.class, SemanticTags.getSemanticType(pointItem));
assertThat(ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", TEXT).withDefault("foo").build()), is("foo")); assertThat(ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", TEXT).withDefault("1.0").build()), is("1.0"));
assertThat(numberItem.getDimension(), equalTo(Temperature.class));
assertEquals(new DecimalType(1), item.getStateAs(DecimalType.class)); assertEquals(new DecimalType(0), item.getStateAs(DecimalType.class));
assertTrue(before.isDone(), "Scheduled job should be done"); assertTrue(before.getPromise().isCompletedExceptionally(), "Before CompletableFuture should have completed with an exception");
assertEquals("No transformation service \'UnknownTransformation\' could be found.", e.getMessage());
assertEquals(hsb, item.getState());
assertEquals("Message", sRE.getTranscript(), "SpeechRecognitionEvent.getTranscript() method failed");
assertNull(commandDescription);
assertNotNull(temperature); assertTrue(Temperature.class.isAssignableFrom(temperature)); assertNotNull(intensity); assertTrue(Intensity.class.isAssignableFrom(intensity));
assertEquals(0, s.availablePermits(), "Scheduler should not have released more after done"); assertEquals(3, temporalAdjuster.getCount(), "Scheduler should have run 3 times");
assertThat(item, is(nullValue()));
assertEquals("fake", subject.getBindingId()); assertEquals("thing", subject.getId()); assertThat(subject.getAllSegments(), hasSize(3)); assertEquals("fake::thing", subject.getAsString());
assertEquals("", call1.getValue(0)); assertEquals("0699222222", call1.getValue(1)); assertEquals("0699222222", call2.getValue(0)); assertEquals("", call2.getValue(1));
assertEquals(new HSBType(new DecimalType(0), new PercentType(0), new PercentType(50)), item.getState());
assertEquals("41424344", result);
assertEquals("", label);
assertEquals(offset + expectedResult, times.poll().longValue(), "Expected periodic time"); assertFalse(semaphore.tryAcquire(1, TimeUnit.SECONDS), "No more jobs should have been scheduled");
assertThat(stateDescription.getOptions(), is(stateDescriptionFragment1.getOptions()));
assertEquals(state, item.getState());
assertThat(info.getConfigStatusMessages().size(), is(0));
assertThat(handler, is(notNullValue())); assertThat(handler, instanceOf(EphemerisConditionHandler.class));
assertEquals(new PercentType(42), sut.getState());
assertNotNull(prevStateItem); assertEquals("2012", prevStateItem.getState().toString()); assertNotNull(prevStateItem); assertEquals("2012", prevStateItem.getState().toString()); assertNull(prevStateItem);
assertEquals("{\\"length\\":4,\\"data\\":[8,33,1,2]}", json.toString());
assertTrue(after.isCancelled(), "Scheduled job cancelled before timeout"); assertFalse(check.get(), "Callable method should not been called");
assertThat(new String(is.readAllBytes(), StandardCharsets.UTF_8), is("x-y z.png"));
assertNull(rate); assertNotNull(rate); assertEquals(0.349127182, rate.doubleValue(), 0.001); assertNotNull(rate); assertEquals(0.349127182, rate.doubleValue(), 0.001); assertNull(rate);
assertEquals("fake", subject.getBindingId()); assertEquals("thing", subject.getId()); assertThat(subject.getAllSegments(), hasSize(3)); assertEquals("fake:type:thing", subject.getAsString());
assertEquals(a, b); assertNotEquals(a, c); assertNotEquals(b, c);
assertThat(item.getStateDescription().getPattern(), is("%.1f " + UnitUtils.UNIT_PLACEHOLDER));
assertTrue(timeLeft < expectedTimeLeft, "Delay should be less:" + timeLeft + " < " + expectedTimeLeft);
assertEquals(null, new HSBType("100,100,100").as(PointType.class));
assertEquals(ItemCommandEvent.class, event.getClass()); assertEquals(ITEM_COMMAND_EVENT_TYPE, itemCommandEvent.getType()); assertEquals(ITEM_COMMAND_EVENT_TOPIC, itemCommandEvent.getTopic()); assertEquals(ITEM_REFRESH_COMMAND_EVENT_PAYLOAD, itemCommandEvent.getPayload()); assertEquals(ITEM_NAME, itemCommandEvent.getItemName()); assertEquals(SOURCE, itemCommandEvent.getSource()); assertEquals(RefreshType.REFRESH, itemCommandEvent.getItemCommand());
assertThat(cddto.parameters, hasSize(1)); assertThat(cdpdto, instanceOf(EnrichedConfigDescriptionParameterDTO.class)); assertThat(cdpdto.defaultValue, is(CONFIG_PARAMETER_DEFAULT_VALUE)); assertThat(ecdpdto.defaultValues, is(nullValue()));
assertNotEquals("", uuid);
assertThat(bridgeType.getBindingId(), is(BINDING_ID)); assertThat(bridgeType.getUID().getBindingId(), is(BINDING_ID)); assertThat(bridgeType.getUID().getId(), is(THING_TYPE_ID)); assertThat(bridgeType.getLabel(), is(LABEL));
assertNotNull(historicItem); assertEquals("2012", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("2011", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("2011", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("2000", historicItem.getState().toString()); assertNull(historicItem);
assertThat(results.size(), is(2)); assertThat(results.size(), is(1)); assertThat(results.get(0).getThingUID(), is(equalTo(THING_UID3)));
assertEquals("Given HTTP Method \'FAKE\' is unknown", exception.getMessage());
assertTrue(thingManager.isEnabled(unknownUID));
assertEquals(OpenClosedType.OPEN, item.getState()); assertEquals(OpenClosedType.CLOSED, item.getState());
assertThat(result, instanceOf(ExecutorService.class)); assertTrue(tpe.allowsCoreThreadTimeOut()); assertEquals(ThreadPoolManager.THREAD_TIMEOUT, tpe.getKeepAliveTime(TimeUnit.SECONDS)); assertEquals(ThreadPoolManager.DEFAULT_THREAD_POOL_SIZE, tpe.getMaximumPoolSize());
assertThat(convertedState.getUnit(), is(originalState.getUnit()));
assertThat(stateDescription.getMinimum(), is(BigDecimal.ZERO)); assertThat(stateDescription.getMaximum(), is(BigDecimal.TEN)); assertThat(stateDescription.getStep(), is(BigDecimal.ONE)); assertThat(stateDescription.getPattern(), is("pattern")); assertThat(stateDescription.isReadOnly(), is(true)); assertThat(stateDescription.getOptions(), is(options));
assertThat(thingType.getBindingId(), is(BINDING_ID)); assertThat(thingType.getUID().getBindingId(), is(BINDING_ID)); assertThat(thingType.getUID().getId(), is(THING_TYPE_ID)); assertThat(thingType.getLabel(), is(LABEL));
assertEquals("{\\"length\\":4,\\"data\\":[8,33,1,2]}", json.toString());
assertEquals("test", value2); assertNotEquals(value1, value2);
assertEquals("{\\"a\\":3,\\"b\\":-6,\\"c\\":255}", json.toString());
assertThat(stateDescription.getOptions(), is(stateDescriptionFragment2.getOptions()));
assertThat(dt1, is(dt2)); assertThat(zdt1.getZone(), is(zdt2.getZone())); assertThat(zdt1, is(zdt2)); assertThat(zdt1, is(zdt3.withZoneSameInstant(zdt1.getZone()))); assertThat(zdt2, is(zdt3.withZoneSameInstant(zdt2.getZone())));
assertEquals(state, sut.getState());
assertNotNull(historicItem); assertEquals("5000", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("5000", historicItem.getState().toString()); assertNotNull(historicItem); assertEquals("2005", historicItem.getState().toString()); assertEquals(ZonedDateTime.of(2005, 1, 1, 0, 0, 0, 0, ZoneId.systemDefault()), historicItem.getTimestamp()); assertNotNull(historicItem); assertEquals("5000", historicItem.getState().toString());
assertThat(configuration.get("p2"), is(nullValue()));
assertEquals(new PercentType(100), item.getStateAs(PercentType.class)); assertEquals(new PercentType(0), item.getStateAs(PercentType.class));
assertEquals(ItemAddedEvent.TYPE, event.getType()); assertEquals(ITEM_ADDED_EVENT_TOPIC, event.getTopic()); assertNotNull(event.getItem()); assertEquals(ITEM_NAME, event.getItem().name); assertEquals(CoreItemFactory.SWITCH, event.getItem().type);
assertEquals(testLabel, label);
assertTrue(diff < 200, "Time difference should be less 200 but was: " + diff); assertTrue(future.isDone(), "Scheduler should be done once reboot call done.");
assertNotNull(prevStateItem); assertEquals("2011", prevStateItem.getState().toString()); assertNull(prevStateItem);
assertTrue(UnitUtils.isDifferentMeasurementSystem(CENTI(SIUnits.METRE), ImperialUnits.INCH)); assertTrue(UnitUtils.isDifferentMeasurementSystem(ImperialUnits.MILE, KILO(SIUnits.METRE)));
assertEquals(1, s.availablePermits(), "Negative value should mean after finished right away");
assertEquals(2, propertiesURLs.size()); assertTrue(propertiesURLs.contains(hostPropertiesURL)); assertTrue(propertiesURLs.contains(fragmentPropertiesURL)); assertEquals(hostPropertiesURL, bundleMock.getEntry(null)); assertEquals(hostPropertiesURL, bundleMock.getEntry("always-return-hostPropertiesURL")); assertEquals(fragmentPropertiesURL, resource);
assertThat(context, is(notNullValue()));
assertThat("Config status info is null.", info, is((ConfigStatusInfo) null));
assertEquals(UpDownType.UP, new PercentType("0.0").as(UpDownType.class)); assertEquals(UpDownType.DOWN, new PercentType("100.0").as(UpDownType.class)); assertNull(new PercentType("50.0").as(OpenClosedType.class));
assertEquals(new PercentType("16.969364"), xy[0]); assertEquals(new PercentType("12.379659"), xy[1]);
assertThat(port, is(48080));
assertFalse(areThreadsFromPoolRunning(poolName));
assertNull(new DecimalType("0.23").as(PointType.class));
assertNotEquals(value1, value2); assertNotEquals(value2, value3);
assertThat(new QuantityType<>("4 m").divide(new QuantityType<>("2 cm")), is(new QuantityType<>("2 m/cm")));
assertThat(undef, is(UnDefType.NULL));
assertTrue(before.isDone(), "Scheduled job should be done"); assertTrue(before.getPromise().isCompletedExceptionally(), "Before CompletableFuture should have completed with an exception");
assertEquals(HttpMethod.GET, HttpUtil.createHttpMethod("GET")); assertEquals(HttpMethod.PUT, HttpUtil.createHttpMethod("PUT")); assertEquals(HttpMethod.POST, HttpUtil.createHttpMethod("POST")); assertEquals(HttpMethod.DELETE, HttpUtil.createHttpMethod("DELETE"));
assertEquals(state, item.getState());
assertEquals(new HSBType(new DecimalType(75), new PercentType(75), new PercentType(50)), item.getState());
assertEquals(ItemStateEvent.class, event.getClass()); assertEquals(ITEM_STATE_EVENT_TYPE, itemStateEvent.getType()); assertEquals(ITEM_STATE_EVENT_TOPIC, itemStateEvent.getTopic()); assertEquals(ITEM_UNDEF_STATE_EVENT_PAYLOAD, itemStateEvent.getPayload()); assertEquals(ITEM_NAME, itemStateEvent.getItemName()); assertEquals(SOURCE, itemStateEvent.getSource()); assertEquals(UnDefType.UNDEF, itemStateEvent.getItemState());
assertThat(XmlHelper.getSystemUID("system.test"), is("system:test"));
assertEquals(expectedKeys, keys);
assertEquals(UpDownType.UP, new DecimalType("0.0").as(UpDownType.class)); assertEquals(UpDownType.DOWN, new DecimalType("1.0").as(UpDownType.class)); assertNull(new DecimalType("0.5").as(OpenClosedType.class));
assertEquals("namespace", new MetadataKey("namespace", "itemName").getNamespace());
assertTrue(after.isDone(), "Scheduled job should be done"); assertTrue(after.getPromise().isCompletedExceptionally(), "After CompletableFuture should have completed with an exception");
assertNotNull(sum); assertEquals(0.0, sum.doubleValue(), 0.001); assertNotNull(sum); assertEquals(IntStream.of(2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012).sum(), sum.doubleValue(), 0.001); assertNotNull(sum); assertEquals(0.0, sum.doubleValue(), 0.001);
assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", BOOLEAN).withDefault("true").build()), is(Boolean.TRUE)); assertThat( ConfigUtil.getDefaultValueAsCorrectType( ConfigDescriptionParameterBuilder.create("test", BOOLEAN).withDefault("YES").build()), is(Boolean.FALSE));
assertThat(cddto.parameters, hasSize(1)); assertThat(cdpdto, instanceOf(EnrichedConfigDescriptionParameterDTO.class)); assertThat(cdpdto.defaultValue, is(CONFIG_PARAMETER_DEFAULT_VALUE)); assertThat(ecdpdto.defaultValues, is(notNullValue())); assertThat(ecdpdto.defaultValues, hasSize(3)); assertThat(ecdpdto.defaultValues, is(equalTo(List.of("first value", "second value", "third value"))));
assertFalse(ran[0], "The hook should not have run");
assertEquals(initialValue, property.getValue().intValue());
assertEquals(12, getPlaceholderCount(), "Adding a column should increase the number of placeholders from 9 to 12");
assertTrue(loader.unload(plugin), "The plugin was not unloaded"); assertFalse(plugin.isLoaded()); assertFalse(loader.getLoadedPlugins().contains(plugin)); assertTrue(loader.getKnownPlugins().contains(plugin)); assertFalse(dataTypes.isRegistered(MockPlugin.dataType)); assertFalse(sourceTypes.isRegistered(MockPlugin.sourceType)); assertFalse(components.isRegistered(MockPlugin.component)); assertFalse(themes.isRegistered(MockPlugin.theme));
assertArrayEquals(expected, adapter.deserialize(buffer, 0));
assertEquals(widget.getTrueColor(), getBackground(), "Background should be the \'true\' color");
assertArrayEquals(new byte[]{1}, Serialization.toByteArray(true)); assertArrayEquals(new byte[]{0}, Serialization.toByteArray(false));
assertEquals(list, result);
assertTrue(firstTile.isSelected(), "First tile should have been selected"); assertFalse(firstTile.isSelected(), "First tile should have been deselected"); assertTrue(secondTile.isSelected(), "Second tile should have been selected");
assertEquals(value, saved);
assertEquals(0, deserialized.length);
assertEquals(Arrays.asList(bar, foo, bar, foo, bar), list);
assertEquals(widget.getFalseColor(), getBackground(), "Background should be the \'false\' color");
assertEquals(Arrays.asList(bar, foo, bar, foo, bar, foo, bar), list);
assertTrue(StringUtils.equalsIgnoreCaseAndWhitespace("A B C", "abc"));
assertEquals(initialValue, property.getValue().doubleValue());
assertTrue(recorder.isRunning(), "Recorder should have been started");
assertArrayEquals(baseUrlsWithCameraNames, CameraUrlGenerator.generateUrls(commands, baseUrlsWithNames), "Name should be replaced");
assertEquals(89, num.getValue().doubleValue(), "Number was not set correctly"); assertEquals("10.01", str.getValue(), "String was not set correctly");
assertArrayEquals(expected, serialized);
assertEquals(Arrays.asList(bar, foo, foo, foo, bar), result);
assertEquals("246", hostInfo.getHost()); assertEquals(HostParser.DEFAULT_PORT, hostInfo.getPort());
assertTrue(firstTile.isSelected(), "First tile should have been selected by drag"); assertTrue(secondTile.isSelected(), "Middle tile should have been selected by drag"); assertFalse(thirdTile.isSelected(), "Rightmost tile should not have been selected");
assertFalse(loader.canLoad(plugin), "A self-dependent plugin should never be able to be loaded");
assertEquals(Color.web("#12345678"), color);
assertEquals(2, ((VBox) layout.getView().lookup(".layout-container")).getChildren().size());
assertEquals(12, getPlaceholderCount(), "Adding a row should increase the number of placeholders from 9 to 12");
assertArrayEquals(expected, adapter.deserialize(buffer, 0));
assertEquals("A Value", map.get("A Key"));
assertEquals(1, children.size(), "Should be 1 child"); assertEquals("firstLevel", child.getValue().getName());
assertEquals(0, structure.getTabs().size(), "Structure should have no initial tabs");
assertSame(parent, component.getParent());
assertEquals(new GridPoint(0, 1), pane.getTileLayout(firstTile).origin); assertEquals(new GridPoint(1, 1), pane.getTileLayout(secondTile).origin);
assertArrayEquals(expected, adapter.serialize(array));
assertEquals(6, getPlaceholderCount(), "Removing a row should reduce the number of placeholders from 9 to 6");
assertEquals(expected, adapter.deserialize(buffer, 0));
assertArrayEquals(new String[0], discoverer.getUrls(), "Initial URL array should be empty");
assertEquals(value, saved);
assertEquals("path", component.getPath());
assertFalse(EqualityUtils.isDifferent(new Object[]{""}, new Object[]{""}));
assertEquals(property.getValue().intValue(), value);
assertEquals(Arrays.asList(bar, bar, bar), list);
assertEquals( Collections.singletonList(foo), Stream.of(foo).collect(joining(barSupplier)) );
assertTrue(firstTile.isSelected(), "First tile should be selected"); assertFalse(secondTile.isSelected(), "Second tile should have been deselected by double-click");
assertEquals(1, children.size(), "Only one category should be present"); assertEquals(category, children.get(0).getValue(), "Root category was wrong"); assertNotNull(propertySheet, "Property sheet for category was not added");
assertEquals(tileSize, new TileSize(1, 2));
assertArrayEquals(urls, discoverer.getUrls());
assertEquals(property.getValue().longValue(), value);
assertArrayEquals(expected, adapter.serialize(string));
assertEquals(0, loader.comparePluginsByDependencyGraph(MockPlugin.class, NewerVersionPlugin.class)); assertEquals(0, loader.comparePluginsByDependencyGraph(NewerVersionPlugin.class, MockPlugin.class));
assertArrayEquals(new String[0], discoverer.getUrls());
assertEquals("246", hostInfo.getHost()); assertEquals(65535, hostInfo.getPort());
assertEquals(3, children.size(), "Three children should be present"); assertEquals(categoryA, children.get(0).getValue()); assertEquals(categoryB, children.get(1).getValue()); assertEquals(categoryC, children.get(2).getValue()); assertEquals(children.get(0), tree.getSelectionModel().getSelectedItem(), "The first child should be selected");
assertEquals(value, saved);
assertEquals(list, immutableList);
assertArrayEquals(expected, adapter.deserialize(array, 0));
assertSame(child, layout.getChild(path));
assertArrayEquals(expected, adapter.deserialize(buffer, 0));
assertEquals(value, saved);
assertSame(widget, layout.getChild("/Shuffleboard/Tab/Foo"));
assertEquals(Arrays.asList(bar, foo, bar), list);
assertEquals(Configuration.RED_RIGHT, configuration.getNearSwitch()); assertEquals(Configuration.RED_LEFT, configuration.getScale()); assertEquals(Configuration.RED_RIGHT, configuration.getFarSwitch());
assertEquals("[1,2]", json);
assertNull(child);
assertArrayEquals(expected, adapter.deserialize(buffer, 0));
assertArrayEquals(new String[0], discoverer.getUrls());
assertArrayEquals(new byte[4], serialized);
assertTrue(recorder.isRunning()); assertFalse(recorder.isRunning(), "Recorder should have been stopped");
assertArrayEquals(new String[0], discoverer.getUrls());
assertEquals("10.2.46.2", hostInfo.getHost()); assertEquals(HostParser.DEFAULT_PORT, hostInfo.getPort());
assertSame(source, widget.getDataSource(), "Wrong source returned by getDataSource()");
assertEquals(Arrays.asList(foo, bar, foo, bar, foo), list);
assertEquals(3, combine.size()); assertEquals(4, combine.size()); assertEquals(a.get(1), combine.get(2)); assertEquals(b.get(1), combine.get(3)); assertEquals(0, combine.size());
assertNotNull(cause);
assertSame(widget, tab.getChild("/Shuffleboard/Tab/Foo"));
assertEquals(property.getValue(), value);
assertEquals(property.getValue(), value);
assertEquals(2, combine.size()); assertEquals(a.get(0), combine.get(0)); assertEquals(b.get(0), combine.get(1));
assertEquals(color, getBackground(), "Background was the wrong color");
assertEquals(1, loader.comparePluginsByDependencyGraph(DependentPlugin.class, MockPlugin.class)); assertEquals(-1, loader.comparePluginsByDependencyGraph(MockPlugin.class, DependentPlugin.class));
assertArrayEquals(new byte[]{0x00, 0x7F, 0x10, (byte) 0xFF}, bytes);
assertTrue(EqualityUtils.isDifferent(new Object[]{""}, new Object[]{"A"}));
assertEquals( Arrays.asList(bar, foo, bar), Stream.of(foo).collect(joining(barSupplier, barSupplier, barSupplier)) );
assertEquals(title, tab.getTitle());
assertEquals(value, saved);
assertEquals(4, adapter.getSerializedSize(new byte[0]));
assertEquals(6, getPlaceholderCount(), "Removing a column should reduce the number of placeholders from 9 to 6");
assertNotNull(showAsText); assertNotNull(tile); assertTrue(source.isActive()); assertEquals("testSourceContextMenu", source.getName()); assertEquals("value",source.getData());
assertNull(child);
assertEquals(property.getValue().doubleValue(), value);
assertEquals(Lists.newArrayList(D.class, C.class, B.class, A.class), classes); assertEquals(Lists.newArrayList(A.class, B.class, C.class, D.class), classes);
assertTrue(firstTile.isSelected(), "First tile should have been selected by drag"); assertFalse(secondTile.isSelected(), "Middle tile should not have been selected"); assertFalse(thirdTile.isSelected(), "Rightmost tile should not have been selected");
assertFalse(recorder.isRunning(), "Recorder should not have been started");
assertArrayEquals(expected, adapter.serialize(array));
assertArrayEquals(expected, adapter.serialize(array));
assertEquals(7, adapter.getSerializedSize(array));
assertTrue(map.isEmpty());
assertEquals("some-host", hostInfo.getHost()); assertEquals(HostParser.DEFAULT_PORT, hostInfo.getPort());
assertArrayEquals( new byte[]{0x7F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, bytes);
assertTrue(firstTile.isSelected(), "Tile should have been selected by CTRL+click");
assertArrayEquals(baseUrls, CameraUrlGenerator.generateUrls(commands, baseUrls), "No commands should return the base URLs"); assertArrayEquals( new String[]{url1 + "?foo=bar", url2 + "?foo=bar"}, CameraUrlGenerator.generateUrls(commands, baseUrls), "Generated URLs do not match");
assertSame(child, tab.getChild(path));
assertEquals(Arrays.asList(foo, bar, foo), list);
assertEquals(4 + 4 + 1 + 2 + 4 + 2, adapter.getSerializedSize(data));
assertArrayEquals(expected, adapter.serialize(array));
assertEquals(0x0010FFAB, read);
assertTrue(hostInfo.isEmpty(), "No host specified should be empty");
assertNotNull("Should have returned an item!", response); assertEquals("item title", "Svejk", response.getTitle());
assertNotNull("Should have returned a bookstore!", response); assertEquals("bookstore name", "Czech Bookstore", response.getName());
assertEquals(represention.getName(), "name");
assertTrue(localQueue instanceof MockAsyncSqsClient);
assertFalse(response.join());
assertTrue(result.join());
assertTrue(asyncClient instanceof AsyncSqsClientImpl); assertNotNull(sqs);
assertTrue(asyncClient instanceof AsyncSqsClientImpl); assertNotNull(sqs);
assertEquals(sentRequest.getValue().messageBody(), "test"); assertEquals(sentRequest.getValue().queueUrl(), "testUrl"); assertEquals(sentRequest.getValue().delaySeconds(), new Integer(10)); assertNull(delay.join());
assertEquals(sentRequest.getValue().messageBody(), "test"); assertEquals(sentRequest.getValue().queueUrl(), "testUrl"); assertNull(noDelay.join());
assertEquals(visibilityReq.getValue().queueUrl(), "testUrl"); assertEquals(visibilityReq.getValue().receiptHandle(), "testHandle"); assertEquals(visibilityReq.getValue().visibilityTimeout(), new Integer(0));
assertSame(e.getCause(), addException);
assertEquals("jdee-foo-call-left-right", Symbol.java2Elisp("jdeeFooCallLeftRight"));
assertEquals("jdee-foo-call-left-right", Symbol.java2Elisp("jdee.foo.Call.leftRight"));
assertEquals("hello world", echo.ack("hello world"));
assertEquals("jdee-foo-call-left-right", Symbol.java2Elisp("jdee.foo.CALL_LEFT_RIGHT"));
assertEquals("(jdee-juci-invoke-elisp \'(message \\"hello %s\\" \\"nick\\"))", output.toString());
assertEquals(5, comments.getCount()); assertEquals(0, comments.getStart()); assertEquals(10, comments.getTotal()); assertEquals(5, comments.getComments().size()); assertEquals("g-4253322-S-89528249-64901084", c.getId()); assertEquals(new Date(1325749391000l), c.getCreationTimestamp());
assertEquals("z37f0n3A05", profile.getId()); assertEquals("Just a guy", profile.getHeadline()); assertEquals("Craig", profile.getFirstName()); assertEquals("Walls", profile.getLastName()); assertEquals("Computer Software", profile.getIndustry());
assertEquals("z37f0n3A05", linkedIn.profileOperations().getProfileId());
assertEquals(6, companies.size()); assertEquals("amworks", companies.get(0).getName());
assertEquals(10, suggestions.getCount()); assertEquals(0, suggestions.getStart()); assertEquals(37, suggestions.getTotal()); assertEquals(10, suggestions.getSuggestions().size()); assertEquals(new Integer(1835657), g.getId()); assertEquals(true, g.isOpenToNonMembers()); assertEquals("97 Things Every Software Architect Should Know", g.getName());
assertEquals(10, companies.size()); assertEquals("Ideo Technologies", companies.get(0).getName());
assertEquals(resultingProperties, new AdditionalPropertiesParser(propertiesString).parse(), "Wrong properties from parsing found.");
assertEquals(expectedMergeResult, AdditionalPropertiesParser.merge(base, additional), "Wrong result properties from merging found.");
assertEquals("Copy failed! The clock values do not match.", 7L, clockTicks);
assertTrue("The clock map is not empty!",clockMap.entrySet().isEmpty()); assertEquals("The clock map does not contain the expected value!", 1, clockMap2.get("Proc1")); assertEquals("The clock map does not contain the expected key!", "Proc1", clockMap2.firstKey());
assertEquals("The clock did not merge correctly!", "{\\"Proc1\\":1, \\"Proc2\\":3," + " \\"Proc3\\":1}", mergeClock.returnVCString());
assertEquals("Key value for tick Proc1 does not match the expected value!", 1L, tickResult); assertEquals("Key value for set Proc1 does not match the expected value!", 50L, setResult); assertEquals("Key value for set Proc3 should not be found!", -1, emptyResult);
assertEquals("{\\"Proc1\\":2, \\"Proc2\\":7," + " \\"Proc3\\":3}\\n", outContent.toString());
assertEquals("The function does not return the correct String!", "{\\"\\":1, \\"Proc1\\":1, \\"Proc2\\":2," + " \\"Proc5\\":6}", testClock.returnVCString());
assertEquals("Copy failed! The clock values do not match.", clockTicks, clockTicksCopy);
assertNotNull(a); assertNotNull(b); assertNotNull(c); assertEquals(b.getB(), a);
assertNotNull(propertiesLoader.getAfLink()); assertEquals(18, (int) propertiesLoader.getAfLink());
assertEquals(result.length, p.length); assertArrayEquals(sendingRawPacket, result);
assertNotNull(descr); assertFalse(descr.length() == 0);
assertNull(ph.getOriginalLength()); assertEquals(new Integer(74), ph.getOriginalLength()); assertEquals(packet.length(), ph.getOriginalLength().intValue());
assertNotNull(devs); assertTrue(devs.size() != 0 || !System.getProperty("user.name").equals("root"));
assertNull(ph.getTimestamp()); assertEquals(1434220771517L, ph.getTimestamp().getTime());
assertNotNull(err); assertFalse(err.length() == 0);
assertFalse(prog.applyFilter(udp)); assertFalse(prog.applyFilter(tcp.getRawData())); assertTrue(prog.applyFilter(icmpArr, icmp.length, icmp.length));
assertTrue(dumpFile.exists()); assertTrue(dumpFile.length() >= packet.length());
assertNotNull(propertiesLoader.getAfInet()); assertEquals(2, (int) propertiesLoader.getAfInet());
assertEquals(DataLinkType.EN10MB, dlt); assertEquals(DataLinkType.PPP, dlt);
assertNotNull(propertiesLoader.getDltRaw()); assertEquals(getExpectedDefaultDltRaw(), (int) propertiesLoader.getDltRaw());
assertNotNull(ver); assertFalse(ver.length() == 0);
assertNotNull(descr); assertFalse(descr.length() == 0);
assertNotNull(name); assertFalse(name.length() == 0);
assertNotNull(name); assertFalse(name.length() == 0);
assertNotNull(list); assertEquals(1, list.size()); assertEquals(DataLinkType.EN10MB, list.get(0));
assertTrue( "The exception should complain about permission to capture.", e.getMessage().contains("You don\'t have permission to capture on that device")); assertNotNull(handle); assertTrue(handle.isOpen());
assertNotNull(propertiesLoader.getAfInet6()); assertEquals(getExpectedDefaultAfInet6(), (int) propertiesLoader.getAfInet6());
assertTrue(position >= initialPosition); assertTrue(position >= packet.length());
assertEquals(1434220771517L, phNano.getTimestamp().getTime()); assertEquals(517995677, phNano.getTimestamp().getNanos()); assertEquals(1434220771517L, phMicro.getTimestamp().getTime()); assertEquals(517995000, phMicro.getTimestamp().getNanos());
assertNotNull(propertiesLoader.getAfPacket()); assertEquals(17, (int) propertiesLoader.getAfPacket());
assertNotNull(dev); assertTrue(dev.length() != 0);
assertTrue(e.getMessage().startsWith("Failed to set direction:"));
assertEquals("Statistics aren\'t available from a pcap_open_dead pcap_t", e.getMessage()); assertNotNull(ps); assertTrue( "The exception should complain about permission to capture.", e.getMessage().contains("You don\'t have permission to capture on that device"));
assertThat("Camel contexts are not deployed!", main.getCamelContextMap(), allOf(hasKey("default"), hasKey("foo"))); assertThat("Default Camel context is not started", context.getStatus(), is(equalTo(ServiceStatus.Started))); assertThat("Foo Camel context is not started", main.getCamelContextMap().get("foo").getStatus(), is(equalTo(ServiceStatus.Started)));
assertEquals(waitTime, RetryUtil.getWaitTimeMillis(i));
assertThat(task.getTitle(), equalTo("Buy some Coffee"));
assertThat(tasks, contains(task1));
assertThat(resp.getStatus(), equalTo(201)); assertThat(resp.getHeaders().get("Location"), contains(expectedRedirect));
assertThat(resp.getStatus(), equalTo(200)); assertThat(resp.getEntity(), equalTo(task1));
assertThat(task, nullValue());
assertThat(resp.getStatus(), equalTo(404));
assertFalse(iterator.hasNext());
assertFalse(modelObject().hasDefined("foo")); assertFalse(model.hasDefined("foo")); assertTrue(model.hasDefined("foo"));
assertTrue(newModel().set(true).isDefined()); assertEquals(ModelValue.ModelValueType.BOOLEAN, newModel().set(true).getValueType()); assertTrue(newModel().set(true).getValue()); assertFalse(newModel().set(false).getValue());
assertTrue(iterator.hasNext()); assertEquals(address, iterator.originalAddress()); assertEquals(address, iterator.originalAddress()); assertEquals(address, iterator.originalAddress());
assertTrue(iterator.hasNext()); assertEquals(PathAddress.pathAddress("two", "three"), iterator.currentAddress()); assertEquals(PathAddress.pathAddress("three"), iterator.currentAddress()); assertEquals(PathAddress.EMPTY_ADDRESS, iterator.currentAddress());
assertEquals("/a", a.getPath()); assertEquals("/a/a-1", a_1.getPath()); assertEquals("/a/a-1/a-1-1", a_1_1.getPath());
assertFalse(newModel().set((String) null).isDefined()); assertNull(newModel().set((String) null).getValue());
assertTrue(newModel().setEmptyObject().isDefined()); assertEquals(ModelValue.ModelValueType.OBJECT, newModel().setEmptyObject().getValueType());
assertTrue(string == string2); assertTrue(string2 == string3);
assertTrue(newModel().set(PathAddress.pathAddress("foo", "bar")).isDefined()); assertEquals(ModelValue.ModelValueType.REFERENCE, newModel().set(PathAddress.pathAddress("foo", "bar")).getValueType());
assertNull(modelString().getValue());
assertFalse(newModel().set((BigInteger) null).isDefined()); assertNull(newModel().set((BigInteger) null).getBigInteger()); assertFalse(newModel().set((BigDecimal) null).isDefined()); assertNull(newModel().set((BigDecimal) null).getBigDecimal());
assertNull(modelObject().remove("foo")); assertEquals("bar", string.getValue());
assertEquals(1, value.asValue(ModelNumber.class).getInt()); assertEquals("3", value.asValue(ModelString.class).getValue()); assertTrue(value.asValue(ModelBoolean.class).getValue());
assertTrue(newModel().setEmptyList().isDefined()); assertEquals(ModelValue.ModelValueType.LIST, newModel().setEmptyList().getValueType());
assertTrue(expected == actual);
assertTrue(expected == actual);
assertEquals(PathAddress.pathAddress("two", "three"), address.subAddress(1)); assertEquals(PathAddress.pathAddress("two", "three"), sub1); assertEquals(PathAddress.pathAddress("three"), sub2);
assertEquals(address, PathAddress.pathAddress("one/two", "three")); assertEquals(address, PathAddress.pathAddress("one/two/", "three")); assertEquals(address, PathAddress.pathAddress("/one/two/", "three")); assertEquals(address, PathAddress.pathAddress("one", "/two/three"));
assertFalse(modelRef().isDefined()); assertNull(modelRef().getValue());
assertEquals(ROOT_DESC.getDescription(), root.getResourceDescription(PathAddress.EMPTY_ADDRESS).getDescription());
assertNotNull(pageRef); assertEquals(pageRef.get("name", ModelString.class).getValue(), "home"); assertEquals(PathAddress.pathAddress("pages", "home"), pageRef.getValue());
assertFalse(modelBoolean().getValue());
assertEquals(3, modelList().add(1).add(2).add(3).size()); assertEquals(3, modelList().add(1).add(2).add(3).getValues().size());
assertTrue(newModel().set("foo").isDefined()); assertEquals(ModelValue.ModelValueType.STRING, newModel().set("foo").getValueType()); assertEquals("foo", newModel().set("foo").getValue());
assertTrue(bool1 == bool2); assertTrue(bool2 == bool3);
assertTrue(expected == actual);
assertFalse("invocation did not throw exception!", true); assertTrue(ex.getCause() instanceof SAXParseException);
assertEquals("000111110010000000", alu.floatSubtraction("00111111010100000", "00111111001000000", 8, 8, 4));
assertEquals("0110001",ALU.negation("1001110"));
assertEquals("001000",ALU.signedAddition("10011", "01011", 4));
assertEquals("000001010", alu.oneAdder("00001001"));
assertEquals("000001100", alu.integerMultiplication("0100", "0011", 8));
assertEquals("000000000",ALU.oneAdder("11111111"));
assertEquals("010011011",ALU.oneAdder("10011010"));
assertEquals("0000001000",ALU.signedAddition("10011", "01011", 8));
assertEquals("9", alu.integerTrueValue("00001001"));
assertEquals("11110",ALU.integerMultiplication("1101", "0110", 4));
assertEquals("00111101", alu.logRightShift("11110110", 2));
assertEquals("11110110", alu.negation("00001001"));
assertEquals("010011",ALU.signedAddition("0011", "1110", 4));
assertEquals("00110",ALU.integerSubtraction("1110", "1000", 4));
assertEquals("01000001001101100000000000000000", alu.ieee754("11.375", 32));
assertEquals("00011101",ALU.logRightShift("11101001", 3));
assertEquals("00100100", alu.leftShift("00001001", 2));
assertEquals("11101000",ALU.leftShift("01011101", 3));
assertEquals("01111",ALU.integerSubtraction("0100", "0101", 4));
assertEquals("00001001", alu.integerRepresentation("9", 8));
assertEquals("11.375", alu.floatTrueValue("01000001001101100000", 8, 11));
assertEquals("000000001",ALU.integerSubtraction("0100", "0011", 8));
assertEquals("+Inf",ALU.floatTrueValue("011110000000000", 4, 10));
assertEquals("101001",ALU.signedAddition("01111", "01010", 4));
assertEquals("11110",ALU.integerSubtraction("0110", "1000", 4));
assertEquals("10000",ALU.integerMultiplication("1000", "0010", 4));
assertEquals("00110",ALU.integerSubtraction("0001", "1011", 4));
assertEquals("000000111", alu.integerAddition("0100", "0011", 8));
assertEquals("0100000111", alu.signedAddition("1100", "1011", 8));
assertEquals("0.0009765625",ALU.floatTrueValue("000000001", 4, 4));
assertEquals("11111101", alu.ariRightShift("11110110", 2));
assertEquals("11110011",ALU.ariRightShift("10011011", 3));
assertEquals("000000001", alu.integerSubtraction("0100", "0011", 8));
assertEquals(null, JellyHyperlinkProvider.correspondingJellyResource(doc, offsetOf("iv align")));
assertThat(message.getObjectProperty("b3")) .isEqualTo("1");
assertThat(declarativeSampler.methodToSamplers) .hasSize(1);
assertThat(jmsTracing.messageListener(wrapped, false)) .isSameAs(wrapped);
assertThat(AMZN_TRACE_ID.getValue()) .isNull();
assertThat(operationEquals("send").matches(request)).isFalse();
assertThat(parseB3SingleFormat("0")) .isEqualTo(TraceContextOrSamplingFlags.NOT_SAMPLED);
assertThat(or(one)).isSameAs(one);
assertThat(and(one)).isSameAs(one);
assertThat(BAGGAGE_FIELD.getValue(currentTraceContext.get())).isEqualTo("user1");
assertThat(response.errorCode()).isEqualTo("CANCELLED");
assertThat(REQUEST_ID.getValue(requestIdExtraction)) .isEqualTo(requestId);
assertThat(span).isNotNull();
assertThat(tracer.toSpan(context)) .isInstanceOf(RealSpan.class) .extracting(Span::context) .isEqualTo(context);
assertThat(constant.getValue(context)).isEqualTo("bar"); assertThat(constant.getValue(extracted)).isEqualTo("bar"); assertThat(constantNull.getValue(context)).isNull(); assertThat(constantNull.getValue(extracted)).isNull();
assertThat(response.errorCode()).isEqualTo("CANCELLED");
assertThat( parseB3SingleFormat(traceIdHigh + traceId + "-" + spanId + "-1-" + parentId).context() ).isEqualToComparingFieldByField(TraceContext.newBuilder() .traceIdHigh(Long.parseUnsignedLong(traceIdHigh, 16)) .traceId(Long.parseUnsignedLong(traceId, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .sampled(true).build() );
assertThat(oneFunction.keyNames()).containsExactly("one");
assertThat(message.getIntProperty("foo")).isEqualTo(1);
assertThat(base.toString()) .isEqualTo("000000000000014d");
assertThat(kindBasedFunctions.keyNames()).containsExactly("four", "three", "two", "one");
assertThat(req).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(extended).usingRecursiveComparison() .isEqualTo(ParameterizedSampler.<Void>newBuilder() .putRule(one, Sampler.NEVER_SAMPLE) .putRule(two, Sampler.NEVER_SAMPLE) .putRule(three, Sampler.ALWAYS_SAMPLE) .putRule(four, Sampler.ALWAYS_SAMPLE) .build() );
assertThat(BaggageField.getAll(emptyExtraction)) .containsExactly(REQUEST_ID, AMZN_TRACE_ID) .containsExactlyElementsOf(BaggageField.getAll(extraction));
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(lastHeaders(mockProducer)) .containsEntry("tx-id", "1") .containsEntry("b3", producerSpan.traceId() + "-" + producerSpan.id() + "-1");
assertThat(nextSpan.context().parentId()) .isNull();
assertThat(span.context().spanId()).isNotZero();
assertThat(BaggageField.create("foo").context) .isSameAs(ExtraBaggageContext.get()); assertThat(new BaggageField("context", context).context) .isSameAs(context);
assertThat(request.method()).isEqualTo("sayHello");
assertThat(message.getStringProperty(BAGGAGE_FIELD_KEY)).isEmpty();
assertThat(pendingSpans.getOrCreate(null, context, false)).isNotEqualTo( pendingSpans.getOrCreate(null, context2, false));
assertThat(new WebMvc31().isHandlerMethod(handlerMethod)) .isTrue();
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/nested/items/{itemId}");
assertThat(nullSafe(o -> true).trySample("1")).isTrue();
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-0-" + parentId).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .sampled(false).build() );
assertThat(spans.get(0).parentId()).isEqualTo(parent.spanIdString()); assertThat(headers.get("b3").toString()).endsWith("-" + spans.get(0).id() + "-1");
assertThat(wrapper.maybeError()).isSameAs(error);
assertThat(getSpanName("foo", "bar")).isEqualTo("foo bar");
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 4, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1 }, null)).isNull();
assertThat(spans.get(0).annotations()) .extracting(Map.Entry::getValue) .containsExactly("foo");
assertThat(factory.create()) .isEqualTo(factory.create()); assertThat(factory.create()) .hasSameHashCodeAs(factory.create()); assertThat(extra).isEqualTo(extra2); assertThat(extra).hasSameHashCodeAs(extra2); assertThat(extra).isNotEqualTo(extra2); assertThat(extra.hashCode()).isNotEqualTo(extra2.hashCode());
assertThat(request.method()).isEqualTo("SayHello");
assertThat(spans).extracting(MutableSpan::name) .containsExactly("newname");
assertThat(array).containsExactly(3, 4, 5, 6, null, null); assertThat(array).containsExactly(1, 2, 5, 6, null, null); assertThat(array).containsExactly(1, 2, 3, 4, null, null);
assertThat(getNonEmptyBsonString(new BsonString(" foo "))).isEqualTo("foo");
assertThat(response.request()).isSameAs(request);
assertThat(PERMUTATIONS.get(0).get().isEmpty()).isTrue(); assertThat(PERMUTATIONS.get(i).get().isEmpty()).isFalse();
assertThat(Lists.ensureImmutable(list)) .isSameAs(list);
assertThat(handler.handleSend(request).isNoop()).isTrue();
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue(); assertThat(child.context().localRootId()).isEqualTo(span.context().localRootId()); assertThat(child.context().isLocalRoot()).isFalse();
assertThat(map.isEmpty());
assertThat(DubboParser.service(invoker)).isNull();
assertThat(TraceContextBinaryFormat.parseBytes(new byte[0], null)) .isNull();
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2 }, null)).isNull();
assertThat(toLowerHex(3405691582L)).isEqualTo("00000000cafebabe");
assertThat(tracer.currentSpan().context().shared()).isTrue();
assertThat(deferDecision().trySample(null)).isNull(); assertThat(deferDecision().trySample("1")).isNull();
assertThat(ensured.extra()) .hasSize(context.extra().size() + 1) .containsAll(context.extra());
assertThat(spans.get(0).finishTimestamp()) .isPositive();
assertThat(handler.handleSend(request).isNoop()).isTrue();
assertThat(IpLiteral.ipOrNull("::2")).isEqualTo("::2");
assertThat(methodEquals("Check").matches(request)).isFalse();
assertThat(request.service()).isEqualTo("helloworld.Greeter");
assertThat(oneCount.getAndSet(0)).isOne(); assertThat(oneCount.getAndSet(0)).isOne(); assertThat(oneCount.getAndSet(0)).isOne();
assertThat(BaggagePropagation.allKeyNames(factory.get())) .containsExactly("b3", "user-id", "session-id");
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue();
assertThat(tracer).extracting("pendingSpans.defaultSpan.localServiceName") .isEqualTo("my-foo");
assertThat(lowerHexToUnsignedLong("ffffffffffffffff")).isEqualTo(-1); assertThat(lowerHexToUnsignedLong(Long.toHexString(Long.MAX_VALUE))).isEqualTo(Long.MAX_VALUE);
assertThat(map).containsOnly( entry("1", "one"), entry("2", "two") ); assertThat(map).hasToString( "UnsafeArrayMap{1=one,2=two}" ); assertThat(map.get("1")).isEqualTo("one"); assertThat(map.get("2")).isEqualTo("two"); assertThat(map.get("3")).isNull();
assertThat(request.propagationField("b3")).isEqualTo("1");
assertThat(sampled(true, 0)) .isEqualTo(FLAG_SAMPLED_SET + FLAG_SAMPLED);
assertThat(wrapper.statusCode()).isEqualTo(200);
assertThat(request.propagationField("b3")).isEqualTo("1");
assertThat(joined).isNotSameAs(incoming); assertThat(joined.extra()).isNotEmpty();
assertThat(mutableSpan).isEqualTo(expected);
assertThat(response.unwrap()).isSameAs(result);
assertThat(response.unwrap()).isSameAs(result);
assertThat(parseB3SingleFormat(input, 10, 11).samplingFlags()) .isSameAs(SamplingFlags.DEBUG);
assertThat(wrapper.unwrap()) .isEqualTo(response);
assertThat(sampler.trySample(null)) .isNull();
assertThat(postProcessMessage.getMessageProperties().getHeaders()) .containsOnlyKeys("b3"); assertThat(postProcessMessage.getMessageProperties().getHeaders().get("b3").toString()) .matches("^[0-9a-f]{16}-[0-9a-f]{16}-1$");
assertThat(consumerRecord.headers().toArray()).isEmpty();
assertThat(REQUEST_ID.getValue((TraceContext) null)) .isNull();
assertThat( parseB3SingleFormat("0000000000000000" + traceId + "-" + spanId + "-1-" + parentId).context() ).isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .sampled(true).build() );
assertThat( listener.getCollectionName(new BsonDocument("find", new BsonString(" ")), "find")).isNull();
assertThat(pendingSpans.getOrCreate(null, context, false)).isSameAs(span);
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/eggs");
assertThat(jmsTracing.topicConnection(mock(TopicConnection.class))) .isInstanceOf(TracingConnection.class);
assertThat(tracer.nextSpan(extracted).context().extra()) .containsExactly(1L);
assertThat(BAGGAGE_FIELD.getValue(span.context())).contains("user1");
assertThat(servlet25.status(new ExceptionResponse())) .isZero();
assertThat(map.isEmpty());
assertThat(spans.get(0).finishTimestamp()).isNotZero(); assertThat(spans.get(0).error()).isEqualTo(error);
assertThat(span.kind()).isNull();
assertThat(jmsTracing.xaConnectionFactory(mock(XAConnectionFactory.class))) .isInstanceOf(TracingXAConnectionFactory.class);
assertThat(shield.toString()) .isNotEmpty() .isEqualTo("SpanCustomizer(RealSpan(" + span.context().traceIdString() + "/" + span.context() .spanIdString() + "))");
assertThat(map).containsOnly( entry("1", "1"), entry("2", "2"), entry("3", "3") ); assertThat(map).hasToString( "UnsafeArrayMap{1=1,2=2,3=3}" ); assertThat(map.get("1")).isEqualTo("1"); assertThat(map.get("2")).isEqualTo("2"); assertThat(map.get("3")).isEqualTo("3");
assertThat(toSpan).isNotSameAs(incoming); assertThat(tracer.toSpan(incoming).context()).isSameAs(toSpan);
assertThat(Lists.concat(list1, list2)) .hasSameClassAs(Collections.unmodifiableList(list1)) .containsExactly("foo", "bar", "baz");
assertThat(methodEquals("GET").matches(httpRequest)).isTrue();
assertThat(map.isEmpty());
assertThat(span.context().shared()).isFalse();
assertThat(IpLiteral.ipOrNull("::FFFF:43.0.192.2")).isEqualTo("43.0.192.2");
assertThat(request.service()).isEqualTo("helloworld.Greeter");
assertThat(BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY).build()) .isSameAs(B3Propagation.FACTORY);
assertThat(jmsTracing.xaTopicConnection(mock(XATopicConnection.class))) .isInstanceOf(TracingXAConnection.class);
assertThat(joined).isNotSameAs(incoming); assertThat(tracer.joinSpan(incoming).context()) .isNotSameAs(joined);
assertThat(request.unwrap()).isSameAs(invocation);
assertThat(REQUEST_ID.getValue(requestIdContext)) .isEqualTo(requestId);
assertThat(req).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(jmsTracing.xaQueueConnection(wrapped)) .isSameAs(wrapped);
assertThat(MessageProperties.getPropertyIfString(message, "b3")).isNull();
assertThat(request.operation()).isEqualTo("receive");
assertThat(adapter.statusCodeAsInt(response)).isEqualTo(200); assertThat(adapter.statusCode(response)).isEqualTo(200);
assertThat(handler).extracting("delegate.handlers") .asInstanceOf(InstanceOfAssertFactories.array(SpanHandler[].class)) .containsExactly(one, two);
assertThat(DubboParser.method(invocation)).isNull();
assertThat(platform.produceLinkLocalIp()) .isNull();
assertThat(parseB3SingleFormat("1")) .isEqualTo(TraceContextOrSamplingFlags.SAMPLED);
assertThat(req).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue();
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(producerSpan.tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC));
assertThat(serviceEquals("grpc.health.v1.health").matches(request)).isFalse();
assertThat(span.customizer()).isSameAs(NoopSpanCustomizer.INSTANCE);
assertThat(span.context().parentId()).isNull();
assertThat(GrpcParser.service("/")).isNull();
assertThat(request.unwrap()).isSameAs(invocation);
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1 }, null)).isNull();
assertThat(response.request()).isSameAs(request);
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, 2, 1 }, null)).isNull();
assertThat(toSpan).isNotSameAs(incoming); assertThat(toSpan.extra()).isNotEmpty();
assertThat(tracer.toSpan(context).context()) .isNotSameAs(context) .extracting(TraceContext::localRootId) .isEqualTo(context.spanId());
assertThat(factory).isEqualTo(factory); assertThat(factory.equals(sameFields)).isTrue(); assertThat(sameFields).isEqualTo(factory); assertThat(sameFields).hasSameHashCodeAs(factory); assertThat(factory).isNotEqualTo(B3Propagation.FACTORY); assertThat(B3Propagation.FACTORY).isNotEqualTo(factory); assertThat(factory.hashCode()).isNotEqualTo(B3Propagation.FACTORY.hashCode());
assertThat(MessageParser.channelKind(destination)) .isEqualTo("queue");
assertThat(channelKindEquals("queue").matches(request)).isFalse();
assertThat(servlet25.status(jettyResponse)) .isZero();
assertThat(injectorFunction(existing, InjectorFunction.NOOP)) .isSameAs(existing);
assertThat(kafkaStreamsTracing.nextSpan(fakeProcessorContext)).isNotNull();
assertThat(response.request()).isSameAs(request);
assertThat( listener.getCollectionName(new BsonDocument("find", BsonBoolean.TRUE), "find")).isNull();
assertThat(platform.produceLinkLocalIp()) .isNull();
assertThat(methodEquals("Check").matches(request)).isFalse();
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(lastHeaders(mockProducer)) .containsEntry("b3", producerSpan.traceId() + "-" + producerSpan.id() + "-1");
assertThat(map).containsOnly( entry("1", "one"), entry("2", "two"), entry("3", "three") ); assertThat(map).hasToString( "UnsafeArrayMap{1=one,2=two,3=three}" ); assertThat(map.get("1")).isEqualTo("one"); assertThat(map.get("2")).isEqualTo("two"); assertThat(map.get("3")).isEqualTo("three");
assertThat(ExtraFieldPropagation.get(context, "x-amzn-trace-id")) .isNull();
assertThat(and(one, two, three).matches(null)).isFalse();
assertThat(jmsTracing.connection(wrapped)) .isSameAs(wrapped);
assertThat(listener.getCollectionName(new BsonDocument(), "find")).isNull();
assertThat(span.isNoop()).isTrue();
assertThat(span.localServiceName()).isEqualTo(expectedLocalServiceName);
assertThat(handler.handleSend(request).isNoop()).isTrue();
assertThat(jmsTracing.xaConnectionFactory(wrapped)) .isSameAs(wrapped);
assertThat(MessageParser.channelName(null)).isNull();
assertThat(toSpan).isNotSameAs(incoming); assertThat(tracer.toSpan(incoming).context()) .isNotSameAs(toSpan);
assertThat(writeAscii(-1005656679588439279L)) .isEqualTo("-1005656679588439279"); assertThat(writeAscii(0L)) .isEqualTo("0"); assertThat(writeAscii(-9223372036854775808L )) .isEqualTo("-9223372036854775808"); assertThat(writeAscii(123456789L)) .isEqualTo("123456789");
assertThat(mutableSpan).isEqualTo(expected);
assertThat(rabbitTracing.decorateRabbitTemplate(template)) .extracting("beforePublishPostProcessors") .satisfies(postProcessors -> assertThat(((Collection) postProcessors)).anyMatch( postProcessor -> postProcessor instanceof TracingMessagePostProcessor ));
assertThat(response.errorCode()).isNull();
assertThat(MessageHeaders.getHeaderIfString(message, "b3")).isNull();
assertThat(DubboParser.method(invocation)).isNull();
assertThat(Lists.ensureImmutable(list)) .isSameAs(list);
assertThat(DubboParser.service(invoker)).isNull();
assertThat(span.customizer()).isInstanceOf(SpanCustomizerShield.class);
assertThat(objects.debug()) .isFalse(); assertThat(objects.sampled()) .isNull();
assertThat(factory.get().keys()) .isEqualTo(B3Propagation.B3_STRING.keys());
assertThat(parseB3SingleFormat(sequence, 2, 2 + encoded.length())) .isEqualToComparingFieldByField(parseB3SingleFormat(encoded));
assertThat(channelNameEquals("alerts").matches(request)).isTrue();
assertThat(jmsTracing.topicConnection(wrapped)) .isSameAs(wrapped);
assertThat(span.context().parentId()).isEqualTo(2L);
assertThat(spans.get(0).id()).isEqualTo(child.context().spanIdString());
assertThat(child.isNoop()).isTrue();
assertThat(channelNameEquals("Alerts").matches(request)).isFalse();
assertThat(MessageParser.channelKind(destination)) .isEqualTo("topic");
assertThat(span.context().shared()).isFalse();
assertThat(declarativeSampler.toSampler(traced(1.0f, 0, true)).isSampled(0L)) .isTrue(); assertThat(declarativeSampler.toSampler(traced(0.0f, 0, true)).isSampled(0L)) .isFalse(); assertThat(declarativeSampler.toSampler(traced(1.0f, 0, false)).isSampled(0L)) .isFalse();
assertThat(span.isNoop()).isFalse();
assertThat(jmsTracing.queueConnection(wrapped)) .isSameAs(wrapped);
assertThat(servlet25.status(response)) .isEqualTo(200); assertThat(servlet25.status(response)) .isEqualTo(200);
assertThat(DubboParser.method(invocation)) .isEqualTo("sayHello");
assertThat(handler.handleReceive(request).isNoop()).isTrue();
assertThat(HexCodec.toLowerHex(traceIdHigh)) .isEqualTo("5759e988ffffffff");
assertThat(request) .containsEntry("baggage-country-code", "FO") .containsEntry("x-vcap-request-id", uuid);
assertThat(request.service()).isEqualTo("helloworld.Greeter");
assertThat(sampler.trySample(null)) .isNull();
assertThat(WebMvcRuntime.findWebMvcRuntime()) .isInstanceOf(WebMvc31.class);
assertThat(jmsTracing.topicConnection(mock(Both.class))) .isInstanceOf(XATopicConnection.class);
assertThat(spans.get(0).error()) .isSameAs(error); assertThat(spans.get(0).tags()) .doesNotContainKey("error");
assertThat(ExtraFieldPropagation.getAll(extracted)) .hasSize(1) .containsEntry("x-amzn-trace-id", awsTraceId);
assertThat(toSpan).isNotSameAs(incoming); assertThat(toSpan.extra()).isNotEmpty();
assertThat(ExtraFieldPropagation.getAll(context)) .hasSize(1) .containsEntry("x-amzn-trace-id", awsTraceId);
assertThat(rabbitTracing.decorateRabbitTemplate(template)) .extracting("beforePublishPostProcessors") .satisfies(l -> assertThat((List<?>) l).hasSize(1));
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/items/{itemId}");
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue();
assertThat(new String(encoder.encode(localSpan), UTF_8)) .isEqualTo( "{\\"traceId\\":\\"dc955a1d4768875d\\",\\"id\\":\\"dc955a1d4768875d\\",\\"name\\":\\"encode\\",\\"timestamp\\":1510256710021866,\\"duration\\":1117,\\"localEndpoint\\":{\\"serviceName\\":\\"isao01\\",\\"ipv4\\":\\"10.23.14.72\\"}}");
assertThat(factory.extraKeyNames).containsExactly("x-foo");
assertThat(response.trailers()).isSameAs(trailers);
assertThat(alwaysMatch().matches(null)).isTrue();
assertThat(platform.produceLinkLocalIp()) .isEqualTo("192.168.0.1");
assertThat(tracer.nextSpan(extracted).context().traceId()) .isEqualTo(1L);
assertThat(jmsTracing.xaQueueConnection(mock(XAQueueConnection.class))) .isInstanceOf(TracingXAConnection.class);
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, }, null)).isEqualTo(context);
assertThat(channelNameEquals("alerts").matches(request)).isFalse();
assertThat(SamplingFlags.debug(true, SamplingFlags.EMPTY.flags)) .isEqualTo(SamplingFlags.DEBUG.flags) .isEqualTo(FLAG_SAMPLED_SET | FLAG_SAMPLED | FLAG_DEBUG);
assertThat(span.context().parentIdAsLong()).isEqualTo(context.spanId());
assertThat(request.invoker()).isSameAs(invoker);
assertThat(request.callOptions()).isSameAs(callOptions);
assertThat(methodEquals("GET").matches(httpRequest)).isFalse();
assertThat(twoFunctions.keyNames()).containsExactly("one", "two");
assertThat(tracer.nextSpan(extracted).context()) .extracting(TraceContext::traceId, TraceContext::parentId) .containsExactly(1L, 2L);
assertThat(spans).hasSize(1); assertThat(spans.get(0).annotations()) .extracting(Map.Entry::getValue) .doesNotContain("brave.flush");
assertThat(Matchers.toArray(() -> asList(one, two, three).iterator())) .containsExactly(one, two, three);
assertThat(jmsTracing.connectionFactory(mock(ConnectionFactory.class))) .isInstanceOf(TracingConnectionFactory.class);
assertThat(response.result()).isSameAs(result);
assertThat(DubboParser.method(invocation)) .isEqualTo("sayHello");
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/nested/items/{itemId}");
assertThat(SamplingFlags.debug(false, SamplingFlags.DEBUG.flags)) .isEqualTo(SamplingFlags.SAMPLED.flags) .isEqualTo(FLAG_SAMPLED_SET | FLAG_SAMPLED);
assertThat(injectorFunction(existing, two)) .isSameAs(two);
assertThat(jmsTracing.messageListener(mock(MessageListener.class), false)) .isInstanceOf(TracingMessageListener.class);
assertThat(span.shared()).isTrue(); assertThat(span.shared()).isFalse(); assertThat(span.flags).isZero();
assertThat(new WebMvc25().isHandlerMethod(handlerMethod)) .isFalse();
assertThat(base.toBuilder().traceIdHigh(222L).build().toString()) .isEqualTo("00000000000000de000000000000014d");
assertThat(rpcTracing.toBuilder().build()) .usingRecursiveComparison() .isEqualTo(rpcTracing); assertThat(rpcTracing.toBuilder().clientSampler(neverSample()).build()) .usingRecursiveComparison() .isEqualTo(HttpTracing.newBuilder(tracing).clientSampler(neverSample()).build());
assertThat(wrapper.maybeError()).isNull();
assertThat(rpcTracing.toBuilder().build()) .usingRecursiveComparison() .isEqualTo(rpcTracing); assertThat(rpcTracing.toBuilder().clientSampler(neverSample()).build()) .usingRecursiveComparison() .isEqualTo(RpcTracing.newBuilder(tracing).clientSampler(neverSample()).build());
assertThat(jmsTracing.queueConnection(mock(Both.class))) .isInstanceOf(XAQueueConnection.class);
assertThat(DubboParser.method(invocation)) .isEqualTo("sayHello");
assertThat(response.trailers()).isSameAs(trailers);
assertThat(response.error()).isSameAs(error);
assertThat(request.headers.get(b3Key)).isEqualTo("1");
assertThat(spans.get(0).finishTimestamp()).isNotZero(); assertThat(spans.get(0).error()).isEqualTo(error);
assertThat(RateLimitingSampler.create(0)).isSameAs(Sampler.NEVER_SAMPLE);
assertThat(withFallback.isSampled(0L)) .isTrue();
assertThat(ErrorParser.parse(new RuntimeException("this cake is a lie") { })).isEqualTo("this cake is a lie");
assertThat(jmsTracing.xaConnection(mock(XAConnection.class))) .isInstanceOf(TracingXAConnection.class);
assertThat(builder) .usingRecursiveComparison() .isEqualTo(Tracing.newBuilder() .addSpanHandler(one) .addSpanHandler(two) .addSpanHandler(three));
assertThat(wrapper.maybeError()).isNull();
assertThat(extra.get("1")).isNull();
assertThat(tracer.currentSpan().context().shared()).isFalse();
assertThat(spans.get(0).startTimestamp()) .isPositive();
assertThat(tracer.sampler) .isSameAs(sampler);
assertThat(new String(encoder.encode(span), UTF_8)) .isEqualTo( "{\\"traceId\\":\\"7180c278b62e8f6a216a2aea45d08fc9\\",\\"id\\":\\"5b4185666d50f68b\\"}");
assertThat(span).isNotNull();
assertThat(B3Propagation.newFactoryBuilder().build()) .isSameAs(B3Propagation.FACTORY);
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue(); assertThat(child.context().localRootId()).isEqualTo(span.context().localRootId()); assertThat(child.context().isLocalRoot()).isFalse();
assertThat(KafkaHeaders.lastStringHeader(record.headers(), "b3")).isNull();
assertThat(parser.spanName(adapter, request)) .isEqualTo("GET");
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-d-" + parentId).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .debug(true).build() );
assertThat(primitives) .isEqualToComparingFieldByField(objects); assertThat(primitives.debug()) .isFalse(); assertThat(primitives.sampled()) .isFalse();
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-1-0000000000000000").context()) .isEqualToComparingFieldByField( parseB3SingleFormat(traceId + "-" + spanId + "-1").context() );
assertThat(tracer.newTrace()) .satisfies(s -> assertThat(s.context().parentId()).isNull()) .isInstanceOf(RealSpan.class);
assertThat(getNonEmptyBsonString(BsonBoolean.TRUE)).isNull();
assertThat(testSpanHandler.takeLocalSpan().tags()) .containsOnly(entry("jms.queue", "foo"));
assertThat(MessageParser.channelKind(null)).isNull();
assertThat(sampler).isSameAs(sampler);
assertThat(oneCount.getAndSet(0)).isOne(); assertThat(twoCount.getAndSet(0)).isOne(); assertThat(oneCount.getAndSet(0)).isOne(); assertThat(twoCount.getAndSet(0)).isOne(); assertThat(oneCount.getAndSet(0)).isOne(); assertThat(twoCount.getAndSet(0)).isOne();
assertThat(wrapper.unwrap()) .isEqualTo(request);
assertThat(MessageHeaders.getHeaderIfString(message, "b3")) .isEqualTo("1");
assertThat(ExtraFieldPropagation.get("x-amzn-trace-id")) .isEqualTo(awsTraceId);
assertThat((String) message.getMessageProperties().getHeader("b3")) .isEqualTo("1");
assertThat(tracer.nextSpan(extracted).context().extra()) .containsExactly(1L);
assertThat(response.errorCode()).isEqualTo("TIMEOUT_EXCEPTION");
assertThat(propagationFactory.decorate(decorated).extra()) .isSameAs(originalExtra);
assertThat(request.propagationField("b3")).isEqualTo("d");
assertThat(Lists.concat(list, Collections.emptyList())) .isSameAs(list); assertThat(Lists.concat(Collections.emptyList(), list)) .isSameAs(list);
assertThat(injectorFunction(existing)) .isSameAs(existing);
assertThat(poll) .extracting(ConsumerRecord::headers) .flatExtracting(KafkaTest::lastHeaders) .extracting(Map.Entry::getKey) .containsOnly("b3"); assertThat(consumerSpan.kind()).isEqualTo(CONSUMER); assertThat(consumerSpan.parentId()).isNull();
assertThat(tracing).extracting("tracer.pendingSpans.defaultSpan.localServiceName") .isEqualTo("unknown"); assertThat(tracing).extracting("tracer.pendingSpans.defaultSpan.localIp") .isEqualTo(Platform.get().linkLocalIp());
assertThat(Lists.ensureImmutable(list).getClass().getSimpleName()) .isEqualTo("SingletonList");
assertThat(mongoDBTracing).extracting("tracing").isEqualTo(tracing);
assertThat(BaggageField.create("Foo")) .hasToString("BaggageField{Foo}");
assertThat(ITJms.propertiesToMap(message)).isEmpty();
assertThat(span.tag("error")).isEqualTo("500"); assertThat(span.tag("whoops")).isNull();
assertThat(wrapper.maybeError()).isSameAs(requestError);
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue(); assertThat(child.context().localRootId()).isEqualTo(span.context().localRootId()); assertThat(child.context().isLocalRoot()).isFalse();
assertThat(jmsTracing.connection(mock(Both.class))) .isInstanceOf(XAConnection.class);
assertThat(request.unwrap()).isSameAs(call);
assertThat(request.propagationField("b3")).isNull();
assertThat(IpLiteral.ipOrNull("43.0.192.2")).isEqualTo("43.0.192.2");
assertThat(mutableSpan).isEqualTo(expected);
assertThat(declarativeSampler.methodToSamplers) .isEmpty(); assertThat(declarativeSampler.methodToSamplers) .hasSize(1); assertThat(declarativeSampler.methodToSamplers) .hasSize(2);
assertThat(messagingTracing.toBuilder().build()) .usingRecursiveComparison() .isEqualTo(messagingTracing); assertThat(messagingTracing.toBuilder().producerSampler(neverSample()).build()) .usingRecursiveComparison() .isEqualTo(MessagingTracing.newBuilder(tracing).producerSampler(neverSample()).build());
assertThat(request.call()).isSameAs(call);
assertThat(jmsTracing.xaConnection(wrapped)) .isSameAs(wrapped);
assertThat(methodEquals("check").matches(request)).isFalse();
assertThat(extra.get("three")).isNull();
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-" + parentId).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)).build() );
assertThat(map).containsExactly(entry("k1", "")); assertThat(map).containsExactly( entry("k1", "v1"), entry("k2", "") );
assertThat(tracer.currentSpan()) .isEqualTo(current); assertThat(tracer.currentSpanCustomizer()) .isNotEqualTo(current) .isNotEqualTo(NoopSpanCustomizer.INSTANCE); assertThat(tracer.currentSpan()).isNull();
assertThat(message.getProperties()) .containsEntry(BAGGAGE_FIELD_KEY, "");
assertThat(IpLiteral.ipOrNull("::1")).isEqualTo("::1");
assertThat(request.invocation()).isSameAs(invocation);
assertThat(wrapper.path()) .isEqualTo("/bar");
assertThat(methodEquals("POST").matches(httpRequest)).isFalse();
assertThat(response.headers()).isSameAs(headers);
assertThat(parseB3SingleFormat(input, 3, input.length() - 1).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceIdHigh(Long.parseUnsignedLong(traceIdHigh, 16)) .traceId(Long.parseUnsignedLong(traceId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)).build() );
assertThat(attachments).containsEntry("b3", "d");
assertThat(factory.injectorFactory).extracting("injectorFunction") .isEqualTo(Format.SINGLE);
assertThat(mockProducer.history()).hasSize(1);
assertThat(spans.get(0).finishTimestamp()).isNotZero();
assertThat(GrpcParser.method(METHOD_DESCRIPTOR.getFullMethodName())) .isEqualTo("SayHello");
assertThat(spans).flatExtracting(s -> s.tags().entrySet()) .containsExactly(entry("foo", "bar"));
assertThat(WebMvcRuntime.findWebMvcRuntime()) .isInstanceOf(WebMvc25.class);
assertThat(response.errorCode()).isNull();
assertThat(MessageParser.channelName(destination)) .isEqualTo("topic-foo");
assertThat(context.withExtra(Arrays.asList(1L))) .extracting("extra") .isEqualTo(Arrays.asList(1L));
assertThat(DubboParser.method(invocation)).isNull();
assertThat(BaggageField.getByName((TraceContext) null, "foo")) .isNull();
assertThat(request.method()).isEqualTo("sayHello");
assertThat(span.context().parentIdAsLong()).isZero();
assertThat(sampler.trySample(httpClientRequest)).isTrue(); assertThat(sampler.trySample(httpServerRequest)).isTrue();
assertThat(DubboParser.method(invocation)).isNull();
assertThat(IpLiteral.ipOrNull("127.0.0.1")).isEqualTo("127.0.0.1");
assertThat(map).containsOnly( entry("2", "two") ); assertThat(map).hasToString( "UnsafeArrayMap{2=two}" ); assertThat(map.get("1")).isNull(); assertThat(map.get("2")).isEqualTo("two"); assertThat(map.get("3")).isNull();
assertThat(tracer).hasToString( "Tracer{spanHandler=[MyHandler, MyReporter]}" );
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-d").context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .debug(true).build() );
assertThat(joined).isNotSameAs(incoming); assertThat(joined.extra()).isNotEmpty();
assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()) .hasSize(1);
assertThat(AMZN_TRACE_ID.getValue(requestIdContext)) .isNull(); assertThat(AMZN_TRACE_ID.getValue(emptyContext)) .isNull(); assertThat(AMZN_TRACE_ID.getValue(context)) .isNull();
assertThat(wrapper.route()).isEqualTo("/users/{userId}");
assertThat((String) message.getMessageProperties().getHeader("b3")) .isEqualTo("1");
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEmpty();
assertThat(ExtraFieldPropagation.get("x-amzn-trace-id")) .isNull();
assertThat(DubboParser.service(invoker)).isNull();
assertThat(response.error()).isNull();
assertThat(extra.get("1")).isEqualTo("one"); assertThat(extra.isEmpty()).isFalse();
assertThat(Lists.ensureImmutable(list)) .isSameAs(list);
assertThat(platform.clock()) .hasToString("System.currentTimeMillis()");
assertThat(toLowerHex(0L)).isEqualTo("0000000000000000");
assertThat(servlet25.status(response)) .isEqualTo(0);
assertThat(testSpanHandler.takeLocalSpan().name()).isEqualTo("on-message");
assertThat( parseB3SingleFormat(traceIdHigh + "0000000000000000-" + spanId + "-1-" + parentId).context() ).isEqualToComparingFieldByField(TraceContext.newBuilder() .traceIdHigh(Long.parseUnsignedLong(traceIdHigh, 16)) .parentId(Long.parseUnsignedLong(parentId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .sampled(true).build() );
assertThat(handler.handleReceive(request).isNoop()).isTrue();
assertThat(message.getObjectProperty("b3")) .isEqualTo("1");
assertThat(jmsTracing.connectionFactory(mock(Both.class))) .isInstanceOf(XAConnectionFactory.class);
assertThat(child.context().parentIdString()) .isEqualTo(parent.spanIdString());
assertThat(DubboParser.service(invoker)) .isEqualTo("brave.dubbo.GreeterService");
assertThat(DubboParser.method(invocation)) .isEqualTo("sayHello");
assertThat(declarativeSampler.sample(traced(1.0f, 0, false))) .isEqualTo(SamplingFlags.EMPTY);
assertThat(channelKindEquals("Queue").matches(request)).isFalse();
assertThat(DubboParser.method(invocation)).isNull();
assertThat(IpLiteral.ipOrNull("::0000:43.0.192.2")).isEqualTo("43.0.192.2");
assertThat(Lists.ensureImmutable(list)).isSameAs(Collections.emptyList());
assertThat(response.headers()).isSameAs(headers);
assertThat(pathStartsWith("/foo").matches(httpRequest)).isFalse();
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(producerSpan.tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC));
assertThat(spans).isEmpty();
assertThat(factory.extraKeyNames).containsExactly("x-foo");
assertThat(joined).isNotSameAs(incoming); assertThat(tracer.joinSpan(incoming).context()).isSameAs(joined);
assertThat(spans.get(0).tags()) .containsOnly( entry("kafka.streams.application.id", TEST_APPLICATION_ID), entry("kafka.streams.task.id", TEST_TASK_ID));
assertThat(serviceEquals("grpc.health.v1.Health").matches(request)).isTrue();
assertThat(map.target.keySet()) .extracting(WeakReference::get) .containsExactlyInAnyOrder(null, key);
assertThat(extracted.context().toBuilder().extra(Collections.emptyList()).build()) .isEqualTo(context); assertThat(extracted.context().extra()) .hasSize(2); assertThat(BaggageField.getByName(extracted, "country-code").getValue(extracted)) .isEqualTo("FO"); assertThat(BaggageField.getByName(extracted, "x-vcap-request-id").getValue(extracted)) .isEqualTo(uuid);
assertThat( listener.getCollectionName(new BsonDocument("cmd", new BsonString(" bar ")), "cmd")).isNull();
assertThat(span.context().spanId()).isNotZero();
assertThat(kafkaTracing.nextSpan(consumerRecord)).isNotNull();
assertThat(headers.get(b3Key)).isEqualTo("d");
assertThat(serviceEquals("grpc.health.v1.Health").matches(request)).isFalse();
assertThat(request.service()) .isEqualTo("brave.dubbo.GreeterService");
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(producerSpan.name()).isEqualTo("send");
assertThat(tracer.sampler) .isSameAs(sampler);
assertThat(GrpcParser.service(METHOD_DESCRIPTOR.getFullMethodName())) .isEqualTo("helloworld.Greeter");
assertThat(methodEquals("GET").matches(httpRequest)).isFalse();
assertThat(request.unwrap()).isSameAs(call);
assertThat(tracer).extracting("pendingSpans.defaultSpan.localServiceName") .isEqualTo("unknown");
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 1, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1 }, null)).isNull();
assertThat(tracer).extracting("pendingSpans.defaultSpan").isEqualTo(defaultSpan);
assertThat(and(one, two, three).matches(null)).isTrue();
assertThat(IpLiteral.ipOrNull("2001:db8::c001")).isEqualTo("2001:db8::c001");
assertThat(spans.get(0).tags()) .isEmpty();
assertThat(tracer.currentSpanCustomizer()) .isSameAs(NoopSpanCustomizer.INSTANCE);
assertThat(serviceEquals("grpc.health.v1.Health").matches(request)).isFalse();
assertThat(ErrorParser.parse(new RuntimeException() { })).isEqualTo("RuntimeException");
assertThat(DubboParser.method(invocation)).isNull();
assertThat(request) .doesNotContainKey("userid") .containsEntry("sessionid", "12345");
assertThat(ExtraFieldPropagation.getAll(context)) .hasSize(2) .containsEntry("x-amzn-trace-id", awsTraceId) .containsEntry("x-vcap-request-id", uuid);
assertThat(headerKeys).containsOnly("b3");
assertThat(spans).hasSize(1);
assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()) .allMatch(advice -> advice instanceof TracingRabbitListenerAdvice);
assertThat(map).containsExactly( entry("k", "v"), entry("a", "b") );
assertThat(AMZN_TRACE_ID.getValue(requestIdExtraction)) .isNull(); assertThat(AMZN_TRACE_ID.getValue(emptyExtraction)) .isNull(); assertThat(AMZN_TRACE_ID.getValue(TraceContextOrSamplingFlags.EMPTY)) .isNull();
assertThat(jmsTracing.xaTopicConnection(wrapped)) .isSameAs(wrapped);
assertThat(consumerRecord.headers().headers("foo")).isNotEmpty();
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(lastHeaders(mockProducer)) .containsEntry("b3", producerSpan.traceId() + "-" + producerSpan.id() + "-1");
assertThat(span).usingRecursiveComparison().isEqualTo(span); assertThat(sameFields).usingRecursiveComparison().isEqualTo(span); assertThat(copy).usingRecursiveComparison().isEqualTo(span); assertThat(span).isNotSameAs(other); assertThat(Objects.deepEquals(span, other)).isFalse();
assertThat(withFallback.isSampled(0L)) .isTrue();
assertThat(map).containsExactly( entry("k 1", "v 1"), entry("k 2", "v 2") );
assertThat(span.debug()).isTrue(); assertThat(span.debug()).isFalse(); assertThat(span.flags).isZero();
assertThat(pathStartsWith("/foo").matches(httpRequest)).isTrue();
assertThat(IpLiteral.ipOrNull("::ffef:43.0.192.2")).isNull();
assertThat(request.methodDescriptor()).isSameAs(methodDescriptor);
assertThat(req).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(channelNameEquals("alerts").matches(request)).isFalse();
assertThat(resp).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(platform.produceLinkLocalIp()) .isEqualTo(ipv6.getHostAddress());
assertThat(wrapper.method()).isEqualTo("POST");
assertThat(userId.getValue(context)).isNull(); assertThat(sessionId.getValue(context)).isEqualTo("12345");
assertThat(Matchers.toArray(asList(one, two, three))) .containsExactly(one, two, three);
assertThat(map.isEmpty());
assertThat(listener.getCollectionName(new BsonDocument("find", new BsonString(" bar ")), "find")).isEqualTo("bar");
assertThat(neverSample().trySample(null)).isFalse(); assertThat(neverSample().trySample("1")).isFalse();
assertThat(spans.get(0).id()).isEqualTo(child.context().spanIdString());
assertThat(poll) .extracting(ConsumerRecord::headers) .flatExtracting(TracingConsumerTest::lastHeaders) .hasSize(1) .allSatisfy(e -> { assertThat(e.getKey()).isEqualTo("b3"); assertThat(e.getValue()).startsWith(parent.traceIdString()); }); assertThat(e.getKey()).isEqualTo("b3"); assertThat(e.getValue()).startsWith(parent.traceIdString());
assertThat(getSpanName("foo", null)).isEqualTo("foo");
assertThat(message).isEqualToIgnoringGivenFields(newMessageWithAllTypes(), "processAsExpired");
assertThat(tracer.nextSpan().context().parentId()).isNull(); assertThat(tracer.nextSpan(neverSample(), false).context().sampled()).isFalse();
assertThat(span.context().parentIdAsLong()).isEqualTo(context.spanId());
assertThat(decorator.decorateScope(context, Scope.NOOP)).isSameAs(Scope.NOOP); assertThat(decorator.decorateScope(null, Scope.NOOP)).isSameAs(Scope.NOOP);
assertThat(HexCodec.toLowerHex(traceIdHigh)).startsWith("5759e988");
assertThat(handler.handleReceive(request).isNoop()).isTrue();
assertThat(normalizeIdField("traceId", "4d2000000000000162e", false)) .isEqualTo("00000000000004d2000000000000162e");
assertThat(flags).isSameAs(SamplingFlags.EMPTY_SAMPLED_LOCAL); assertThat(flags.sampledLocal()).isTrue(); assertThat(flags.sampled()).isNull();
assertThat(response.errorCode()).isEqualTo("TIMEOUT_EXCEPTION");
assertThat(spans.get(0).tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC), entry("kafka.key", TEST_KEY));
assertThat(spans.get(0).tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC));
assertThat(response.unwrap()).isSameAs(status);
assertThat(tracer.currentTraceContext.get()).isSameAs(scoped.context()); assertThat(spans.get(0).name()) .isEqualTo("foo"); assertThat(spans.get(0).finishTimestamp()) .isPositive();
assertThat(getNonEmptyBsonString(new BsonString(" "))).isNull();
assertThat(NoopAwareSpanHandler.create(new SpanHandler[0], noop)) .isEqualTo(SpanHandler.NOOP);
assertThat(platform.produceLinkLocalIp()) .isNull();
assertThat(platform.clock()) .hasToString("Clock.systemUTC().instant()");
assertThat(Lists.ensureMutable(list)) .isInstanceOf(ArrayList.class) .containsExactlyElementsOf(list);
assertThat(listener.getCollectionName(command, "find")).isEqualTo("bar");
assertThat(operationEquals("send").matches(request)).isFalse();
assertThat(req).isSameAs(request); assertThat(sampler.trySample(httpClientRequest)).isTrue(); assertThat(reachedAssertion.getAndSet(false)).isTrue(); assertThat(sampler.trySample(httpServerRequest)).isTrue(); assertThat(reachedAssertion.getAndSet(false)).isTrue();
assertThat(request.service()) .isEqualTo("brave.dubbo.GreeterService");
assertThat(response.status()).isSameAs(status);
assertThat(DubboParser.method(invocation)).isNull();
assertThat(servlet25.status(new HttpServletResponseImpl())) .isEqualTo(200);
assertThat(channelKindEquals("queue").matches(request)).isTrue();
assertThat(operationEquals("send").matches(request)).isTrue();
assertThat(ExtraFieldPropagation.getAll(extracted)) .hasSize(1) .containsEntry("x-amzn-trace-id", awsTraceId);
assertThat(normalizeIdField("traceId", "0000000000000000000000000000162e", false)) .isEqualTo("000000000000162e");
assertThat(GrpcParser.method("/")).isNull();
assertThat(req).isSameAs(NULL_SENTINEL); assertThat(sampler.trySample(httpClientRequest)).isTrue(); assertThat(reachedAssertion.getAndSet(false)).isTrue(); assertThat(sampler.trySample(httpServerRequest)).isTrue(); assertThat(reachedAssertion.getAndSet(false)).isTrue();
assertThat(tracer.currentSpan()).isNull();
assertThat(primitives) .isEqualToComparingFieldByField(objects); assertThat(primitives.debug()) .isTrue(); assertThat(primitives.sampled()) .isTrue();
assertThat(DubboParser.method(invocation)).isNull();
assertThat(toLowerHex(Long.MAX_VALUE)).isEqualTo("7fffffffffffffff");
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1 }, null).sampled()).isNull();
assertThat(spans.get(0).remoteServiceName()) .isEqualTo("my-exchange");
assertThat(new String(encoder.encode(errorSpan), UTF_8)) .isEqualTo( "{\\"traceId\\":\\"dc955a1d4768875d\\",\\"id\\":\\"dc955a1d4768875d\\",\\"kind\\":\\"CLIENT\\",\\"localEndpoint\\":{\\"serviceName\\":\\"isao01\\"},\\"tags\\":{\\"error\\":\\"\\"}}");
assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain()) .hasSize(2) .matches(adviceArray -> adviceArray[0] instanceof TracingRabbitListenerAdvice);
assertThat(Lists.ensureImmutable(list).getClass().getSimpleName()) .startsWith("Unmodifiable");
assertThat(resp).isSameAs(NULL_SENTINEL); assertThat(reachedAssertion).isTrue();
assertThat(Lists.ensureImmutable(list).getClass().getSimpleName()) .isEqualTo("SingletonList");
assertThat(map).containsOnly( entry("1", "one"), entry("2", "two"), entry("3", "three") ); assertThat(map).hasToString( "UnsafeArrayMap{1=one,2=two,3=three}" ); assertThat(map.get("1")).isEqualTo("one"); assertThat(map.get("2")).isEqualTo("two"); assertThat(map.get("3")).isEqualTo("three");
assertThat(parseB3SingleFormat(traceIdHigh + traceId + "-" + spanId).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceIdHigh(Long.parseUnsignedLong(traceIdHigh, 16)) .traceId(Long.parseUnsignedLong(traceId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)).build() );
assertThat(injectorFunction.injectorFunctions) .containsExactly(two, three); assertThat(twoCount.getAndSet(0)).isOne(); assertThat(threeCount.getAndSet(0)).isOne();
assertThat(normalizeIdField("spanId", "162e", false)) .isEqualTo("000000000000162e");
assertThat(declarativeSampler.trySample(null)) .isNull();
assertThat(spans.get(0).containsAnnotation("foo")) .isTrue();
assertThat(request.operation()).isEqualTo("send");
assertThat(lowerHexToUnsignedLong("463ac35c9f6413ad48485a3953bb6124")) .isEqualTo(lowerHexToUnsignedLong("48485a3953bb6124"));
assertThat(map).containsExactly( entry("k1", "v1"), entry("k2", "v2") );
assertThat(BaggageField.getAll(emptyContext)) .containsExactly(REQUEST_ID, AMZN_TRACE_ID); assertThat(BaggageField.getAll()) .containsExactly(REQUEST_ID, AMZN_TRACE_ID);
assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 4, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1 }, null)).isNull();
assertThat(messageContext.traceIdString()).isEqualTo(consumer.traceId()); assertThat(messageContext.spanIdString()).isEqualTo(consumer.id());
assertThat(pathStartsWith("/foo").matches(httpRequest)).isTrue();
assertThat(testSpanHandler.takeLocalSpan().tags()).isEmpty();
assertThat(parseB3SingleFormat("d")) .isEqualTo(TraceContextOrSamplingFlags.DEBUG);
assertThat(handler.handleReceive(request).isNoop()).isTrue();
assertThat(ExtraFieldPropagation.get("x-amzn-trace-id")) .isNull();
assertThat(spans.get(0).finishTimestamp()).isNotZero();
assertThat(MessageProperties.getPropertyIfString(message, "b3")) .isNull();
assertThat(response.request()).isSameAs(request);
assertThat(consumer.name()).isEqualTo("receive"); assertThat(consumer.name()).isEqualTo("receive");
assertThat(adapter.path(request)) .isNull();
assertThat(response.error()).isNull();
assertThat(new Tag<Object>(" x-foo ") { @Override protected String parseValue(Object input, TraceContext context) { return null; } }.key()).isEqualTo("x-foo");
assertThat(platform.produceLinkLocalIp()) .isNull();
assertThat(or(one, two, three).matches(null)).isTrue();
assertThat(spans.get(0).tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC));
assertThat(IpLiteral.ipOrNull("::43.0.192.2")).isEqualTo("43.0.192.2");
assertThat(IpLiteral.ipOrNull("2001:DB8::C001")).isEqualTo("2001:DB8::C001");
assertThat(spans).isEmpty();
assertThat(listener.getCollectionName(command, "cmd")).isEqualTo( "coll");
assertThat(response.error()).isSameAs(error);
assertThat(handler.handleSend(request).isNoop()).isTrue();
assertThat(asList(testSpanHandler.takeRemoteSpan(Kind.CONSUMER), testSpanHandler.takeLocalSpan())) .extracting(brave.handler.MutableSpan::name) .containsExactly("receive", "on-message");
assertThat(span.context().spanId()).isEqualTo(span.context().localRootId()); assertThat(span.context().isLocalRoot()).isTrue(); assertThat(child.context().localRootId()).isEqualTo(span.context().localRootId()); assertThat(child.context().isLocalRoot()).isFalse();
assertThat(listener.getCollectionName(new BsonDocument("collection", new BsonString(" bar ")), "find")).isEqualTo("bar");
assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(producerSpan.tags()) .containsOnly(entry("kafka.topic", TEST_TOPIC), entry("kafka.key", TEST_KEY));
assertThat(response.result()).isSameAs(result);
assertThat(spans.get(0).parentId()).isEqualTo(parent.spanIdString()); assertThat(headers.get("b3").toString()).endsWith("-" + spans.get(0).id() + "-1"); assertThat(headers.get(BAGGAGE_FIELD_KEY).toString()).isEmpty();
assertThat(context2.extra()).containsExactly(extra2); assertThat(extra2.get("1")).isEqualTo("one");
assertThat(TracingMessageListener.create(null, jmsTracing)) .isNull();
assertThat(channelKindEquals("queue").matches(request)).isFalse();
assertThat(response.status()).isSameAs(status);
assertThat(builder) .usingRecursiveComparison() .isEqualTo(newFactoryBuilder(B3Propagation.FACTORY) .add(requestIdConfig) .add(traceIdConfig));
assertThat(Lists.ensureMutable(list)) .isSameAs(list);
assertThat(consumerRecord.headers().headers(BAGGAGE_FIELD_KEY)).isNotEmpty();
assertThat(span.context().parentIdAsLong()).isZero();
assertThat(factory.injectorFactory).extracting("clientInjectorFunction.injectorFunctions") .asInstanceOf(InstanceOfAssertFactories.ARRAY) .containsExactly(Format.SINGLE, Format.MULTI);
assertThat(spans).flatExtracting(s -> s.tags().entrySet()) .containsExactly(entry("foo", "bar"));
assertThat(spans.get(0).finishTimestamp()).isNotZero();
assertThat(threadLocalSpan.next()) .isEqualTo(threadLocalSpan.remove());
assertThat(jmsTracing.queueConnection(mock(QueueConnection.class))) .isInstanceOf(TracingConnection.class);
assertThat(jmsTracing.connectionFactory(wrapped)) .isSameAs(wrapped);
assertThat(rabbitTracing.decorateRabbitTemplate(template)) .extracting("beforePublishPostProcessors") .satisfies(postProcessors -> assertThat(((Collection) postProcessors)).anyMatch( postProcessor -> postProcessor instanceof TracingMessagePostProcessor ));
assertThat(tracer.pendingSpans).extracting("spanHandler") .hasToString("LogSpanHandler{name=brave.Tracer}");
assertThat(mongoDBTracing).extracting("tracing").isEqualTo(tracing);
assertThat(parseB3SingleFormat(traceId + "-" + spanId).context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)).build() );
assertThat(spans.get(0).parentId()).isEqualTo(parent.spanIdString()); assertThat(headers.get("b3").toString()).endsWith("-" + spans.get(0).id() + "-1");
assertThat(MessageHeaders.getHeaderIfString(message, "b3")) .isNull();
assertThat(mutableSpan.isEmpty()).isTrue();
assertThat(wrapper.method()) .isEqualTo("POST");
assertThat(request).containsOnly( entry("b3", B3SingleFormat.writeB3SingleFormat(context)), entry("userid", "bob"), entry("sessionid", "12345"), entry("baggage-userid", "bob"), entry("baggage-sessionid", "12345"), entry("baggage_userid", "bob"), entry("baggage_sessionid", "12345") );
assertThat(nullSafe(o -> { throw new NullPointerException(); }).trySample(null)).isNull();
assertThat(ExtraFieldPropagation.getAll(context)) .isEmpty();
assertThat(or(one, two, three).matches(null)).isFalse();
assertThat(adapter.path(request)) .isEqualTo("/bar");
assertThat(parseB3SingleFormat(traceId + "-" + spanId + "-0").context()) .isEqualToComparingFieldByField(TraceContext.newBuilder() .traceId(Long.parseUnsignedLong(traceId, 16)) .spanId(Long.parseUnsignedLong(spanId, 16)) .sampled(false).build() );
assertThat(methodEquals("Check").matches(request)).isTrue();
assertThat(BaggageField.getByName(emptyContext, REQUEST_ID.name())) .isSameAs(REQUEST_ID); assertThat(BaggageField.getByName(REQUEST_ID.name())) .isSameAs(REQUEST_ID);
assertThat(request.invocation()).isSameAs(invocation);
assertThat(span.remoteServiceName()).isEqualTo(expectedRemoteServiceName);
assertThat(tracer.nextSpan().context().parentId()).isNull(); assertThat(tracer.nextSpan(deferDecision(), false).context().parentId()).isNull();
assertThat(MessageProperties.getPropertyIfString(message, "b3")) .isEqualTo("1");
assertThat(ExtraFieldPropagation.get(context, "x-amzn-trace-id")) .isEqualTo(awsTraceId);
assertThat(operationEquals("Send").matches(request)).isFalse();
assertThat(pathStartsWith("/foo").matches(httpRequest)).isFalse();
assertThat(response.unwrap()).isSameAs(status);
assertThat(factory.injectorFactory).extracting("clientInjectorFunction") .isEqualTo(Format.SINGLE);
assertThat(context.toString()) .isEqualTo("000000000000014d00000000000001bc/0000000000000003");
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/base/items/{itemId}");
assertThat(tracer.nextSpan(extracted).context().extra()) .contains(1L);
assertThat(getNonEmptyBsonString(null)).isNull();
assertThat(servlet25.status(new LocalResponse())) .isZero();
assertThat(request.invoker()).isSameAs(invoker);
assertThat(neverMatch().matches(null)).isFalse();
assertThat(tracer.currentSpan().context()) .isNotSameAs(context) .extracting(TraceContext::localRootId) .isEqualTo(context.spanId());
assertThat(span.context().parentId()).isEqualTo(context.spanId());
assertThat(platform.linkLocalIp()) .isSameAs(platform.linkLocalIp());
assertThat(wrapper.route()).isNull();
assertThat(jmsTracing.connection(mock(Connection.class))) .isInstanceOf(TracingConnection.class);
assertThat(servlet25.status(new ExceptionResponse())) .isZero();
assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo("/items/{itemId}");
assertThat(request.call()).isSameAs(call);
assertThat(InternalPropagation.instance.shallowCopy(context)) .isNotSameAs(context) .usingRecursiveComparison() .isEqualTo(context);
assertThat(clock.currentTimeMicroseconds()).isEqualTo(1001L);
assertThat(tracer.newChild(parent)) .satisfies(c -> { assertThat(c.context().traceIdString()).isEqualTo(parent.traceIdString()); assertThat(c.context().parentIdString()).isEqualTo(parent.spanIdString()); }) .isInstanceOf(RealSpan.class); assertThat(c.context().traceIdString()).isEqualTo(parent.traceIdString()); assertThat(c.context().parentIdString()).isEqualTo(parent.spanIdString());
assertThat(MessageParser.channelName(destination)) .isEqualTo("queue-foo");
assertThat(builder).extracting("defaultSpan.localServiceName") .isEqualTo(expectedLocalServiceName);
assertThat(wrapper.path()) .isNull();
assertThat(spans.get(0).name()).isEqualTo("bar");
assertThat(traceSpan.clock).isSameAs(traceChildSpan.clock); assertThat(traceSpan.clock).isSameAs(traceJoinSpan.clock); assertThat(traceSpan.clock).isNotSameAs(trace2Span.clock);
assertThat(sampled(false, FLAG_SAMPLED_SET | FLAG_SAMPLED)) .isEqualTo(FLAG_SAMPLED_SET);
assertThat(userId.getValue(context)).isEqualTo("bob"); assertThat(sessionId.getValue(context)).isEqualTo("12345");
assertThat(objects.debug()) .isFalse(); assertThat(objects.sampled()) .isNull();
assertEquals(m1, m1.cloneInvoke(0)); assertEquals(m1,m1a); assertEquals(m2,m2a); assertEquals(m1,m1a); assertEquals(m1a,top); assertEquals(SymbolicAddressMap.top(),top);
assertEquals(m1.getStack(0),boundedSet("a","b")); assertEquals(m1.getStack(3),SymbolicAddressMap.top().getStack(3));
assertEquals(m1,m1a); assertEquals(m1,top);
assertEquals(join(m1,null),m1); assertEquals(join(m2,null),m2); assertEquals(join(top,null),top); assertEquals(join(m1,m2),join(m2,m1)); assertEquals(join(m1,top),top); assertEquals(join(top,m1),top); assertEquals(join(top,top),top);
assertThat("Expected no exception to be thrown", caughtException(), nullValue());
assertThat("Expected header value to be part of context.", context.parentContext(), sameInstance(parentContext));
assertThat("Expected saga handler method to be called.", saga.handlerCalled(), equalTo(true));
assertThat( "Handler has entry with start saga flag set.", handlers.messageHandlers(), hasItem(samePropertyValuesAs(new MessageHandler(String.class, TestSaga.startupMethod(), true))));
assertThat("Expected header value in callback param.", headers.get(DEFAULT_HEADER), equalTo(DEFAULT_HEADER_VALUE));
assertThat("Expected TestSaga from class path to be found.", foundSagas, hasItem((Class<? extends Saga>) TestSaga.class));
assertThat("Expected saga instance to be set.", captor.getValue().saga(), instanceOf(Saga.class)); assertThat("Expected message on invoker context.", captor.getValue().message(), equalTo(message));
assertThat("Expected both hash codes to be equal", hc1, equalTo(hc2));
assertThat("Expected saga start method to be called.", saga.startupCalled(), equalTo(true));
assertThat("Expected a continue all saga strategy.", strategies, hasItem(isA(ContinueAllStrategy.class)));
assertThat("Expected map to be empty.", classSagaHandlersMapMap.isEmpty(), is(true));
assertThat( "Handler has entry with start saga flag set.", handlers.messageHandlers(), hasItem(samePropertyValuesAs(new MessageHandler(FinishMessage.class, TestSaga.handlerMethod(), false))));
assertThat("Expected list of super classes.", classes, hasItems(ConcreteMessage.class, BaseMessage.class, Object.class));
assertThat("Expected return value to be an empty list.", foundSagas.size(), equalTo(0));
assertThat("Expected no exception to be thrown", caughtException(), nullValue());
assertThat("Expected no exception to be thrown", caughtException(), nullValue());
assertThat("Expected provided header value to be available.", headerValue.get(), equalTo(42));
assertThat("Expected iterable base interface.", interfaces, hasItem(Iterable.class));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object)keyValue));
assertThat("Expected saga type to be present.", classSagaHandlersMapMap.containsKey(TestSaga.class), is(true)); assertThat("Expected handlers map to contain handler type.", handlers.iterator().next().getMessageType(), equalTo(String.class)); assertThat("Expected handlers map to to be starting type.", handlers.iterator().next().getStartsSaga(), is(true));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object) keyValue));
assertThat("Expected a new saga strategy.", strategies, hasItem(isA(StartNewSagaStrategy.class)));
assertThat("Expected instance in result set.", instances, hasItem(instanceInfo));
assertThat("Expected interface of message class.", interfaces, hasItem(MarkerInterface.class));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object)keyValue));
assertThat("Expected an empty list.", instances, hasSize(0));
assertThat("Expected no exception to be thrown.", caughtException(), is(nullValue()));
assertThat("Expected context in key reader to be the same as the original.", providedReaderContext[0], sameInstance(originalContext));
assertThat("Expected two exceptions in resulting one.", exception.getExecutionErrors(), hasSize(2)); assertThat("Expected two exceptions in resulting one.", exception.getExecutionErrors(), hasItem(instanceOf(NullPointerException.class))); assertThat("Expected two exceptions in resulting one.", exception.getExecutionErrors(), hasItem(instanceOf(ArithmeticException.class)));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object) keyValue));
assertThat("Expected the start handler to be executed.", saga.isStartHandlerCalled(), is(true));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object) keyValue));
assertThat("Expected saga type to be present.", classSagaHandlersMapMap.containsKey(TestSaga.class), is(true)); assertThat("Expected handlers map to contain handler type", continueHandler.isPresent(), is(true)); assertThat("Expected handlers map to to be starting type.", continueHandler.get().getStartsSaga(), is(false));
assertThat("Saga id does not match.", captor.getValue().getSagaId(), equalTo(expected.getSagaId())); assertThat("Timeout name does not match.", captor.getValue().getName(), equalTo(expected.getName())); assertThat("Expiration time stamp does not match.", captor.getValue().getExpiredAt(), equalTo(expected.getExpiredAt())); assertThat("Data object does not match.", captor.getValue().getData(), sameInstance(expectedData));
assertThat("Expected one entry in scan result.", scanResult.size(), equalTo(1)); assertThat("Expected entry of key TestSage.class", scanResult.containsKey(TestSaga.class), is(true)); assertThat("Expected three total message handlers for saga.", handlers.messageHandlers(), hasSize(3));
assertThat("Expected not to find AbstractSaga in returned list.", foundSagas, not(hasItem(AbstractSaga.class)));
assertThat("Scheduled task not of expected type.", captor.getValue(), instanceOf(SagaTimeoutTask.class));
assertThat("Expected the continue handler to be executed.", saga.isContinueHandlerCalled(), is(true));
assertThat("Expected ids to be equal.", isEqual, equalTo(true));
assertThat("Expected map to be empty.", classSagaHandlersMapMap.isEmpty(), is(true));
assertThat("Expected a timeout strategy.", strategies, hasItem(isA(TimeoutResolveStrategy.class)));
assertThat("Expected empty map if no data present.", scanResult, not(nullValue()));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object) keyValue));
assertThat("Expected returned key to match key value provided reader.", foundKey, equalTo((Object)keyValue));
assertThat("Expected returned key to be null.", foundKey, nullValue());
assertEquals(jcrTemplate.hasPendingChanges(), result);
assertSame(jcrTemplate.getUserID(), result);
assertEquals(dao.getSessionFactory(), sessionFactory);
assertNotNull(sc); assertEquals(factoryBean.getObjectType(), sc.getClass()); assertEquals("testuser", sc.getUserID()); assertEquals("secret", new String(sc.getPassword()));
assertEquals(jcrTemplate.isLive(), result);
assertSame(jcrTemplate.getAttributeNames(), result);
assertEquals(rep.getDescriptor("jcr.repository.name"), "Jackrabbit"); assertEquals(true, factory.getObject() instanceof Repository); assertEquals(true, factory.isSingleton()); assertEquals(Repository.class, factory.getObjectType());
assertSame(jcrTemplate.getNamespacePrefixes(), result);
assertSame(jcrTemplate.getImportContentHandler(path, 0), result);
assertSame(jcrTemplate.getItem(path), result);
assertSame(jcrTemplate.getValueFactory(), result);
assertSame(jcrTemplate.getLockTokens(), result);
assertSame(jcrTemplate.getNamespacePrefix(uri), result);
assertSame(jcrTemplate.getNodeByUUID(uuid), result);
assertSame(GenericSessionHolderProvider.class, providerManager.getSessionProvider(repository).getClass());
assertSame(jcrTemplate.getAttribute(attr), result);
assertEquals(factory.hashCode(), repository.hashCode() + 17 * 37); assertFalse(factory.equals(null)); assertEquals(factory, factory); assertFalse(factory.equals(fact2));
assertSame(listeners, factory.getEventListeners()); assertSame(session, sess);
assertEquals(res, factory.getConfiguration()); assertEquals(".", factory.getHomeDir().getFilename());
assertEquals(jcrTemplate.itemExists(path), result);
assertSame(jcrTemplate.getNamespaceURI(prefix), result);
assertSame(customProvider, providerManager.getSessionProvider(repository));
assertEquals(dao.getSession(true), session);
assertNotNull(result); assertEquals(RootNode.class, result.getRequestedRootNodeClass()); assertEquals(AssessmentItem.class, result.getRootNode().getClass());
assertNotNull(result); assertEquals(QtiConstants.QTI_RESULT_21_NAMESPACE_URI, result.getQtiNamespaceUri()); assertEquals(AssessmentResult.class, result.getRequestedRootNodeClass()); assertNotNull(result.getXmlParseResult()); assertNotNull(result.getRootNode()); assertEquals(AssessmentResult.class, result.getRootNode().getClass());
assertNotNull(result); assertEquals(QtiConstants.QTI_21_NAMESPACE_URI, result.getQtiNamespaceUri()); assertEquals(AssessmentItem.class, result.getRequestedRootNodeClass()); assertNotNull(result.getXmlParseResult()); assertNotNull(result.getRootNode()); assertEquals(AssessmentItem.class, result.getRootNode().getClass());
assertThat(id1).isEqualTo(1); assertThat(id2).isEqualTo(2); assertThat(id3).isEqualTo(3); assertThat(encoder.toString()).isEqualTo( "[1,0] +A:long +B:2! [2,1] +B:1 -B! [3,1] -B +B:3!");
assertThat(attrs).containsKeys("SpecName", "SpecVendor", "SpecVersion");
assertEquals(" 0", formatRate(0d)); assertEquals("50.00", formatRate(50d)); assertEquals("500.0", formatRate(500d)); assertEquals("50.0k", formatRate(50e3d)); assertEquals("50.0m", formatRate(50e6d)); assertEquals("50.0g", formatRate(50e9d)); assertEquals("1.5e+11", formatRate(150e9d));
assertThat(id1).isEqualTo(id2);
assertEquals("3", toMemorySize(3L)); assertEquals("38k", toMemorySize(39327L)); assertEquals("31m", toMemorySize(33553116L)); assertEquals("35g", toMemorySize(38506017581L));
assertThat(id).isEqualTo(0); assertThat(encoder.toString()).isEqualTo("");
assertThat(id1).isEqualTo(1); assertThat(id2).isEqualTo(2); assertThat(id3).isEqualTo(3); assertThat(encoder.toString()).isEqualTo( "[1,0] +A:1! [2,0] +A:2! [3,1] +B:1!");
assertNotNull(pyResults.length == 2); assertNotNull(sysValues.length == 2); assertEquals(sysValues[0], sysValues[1]); assertNotNull(globalValues.length == 2); assertEquals(globalValues[0], globalValues[1]);
assertNotNull(result); assertEquals(executioId, result.getExecutionResult().get(VAR1).toString()); assertEquals(executioId, result.getExecutionResult().get(VAR2).toString());
assertNotNull(generatedKey); assertTrue(generatedKey.isEmpty());
assertNotNull(generatedKey); assertEquals(dep1 + ";" + dep2 + ";" + dep3 + ";", generatedKey);
assertFalse(executionMessageConverter.containsSensitiveData(p)); assertTrue(executionMessageConverter.containsSensitiveData(p));
assertTrue(t instanceof IllegalArgumentException);
assertTrue(t instanceof IllegalArgumentException);
assertNotNull(generatedKey); assertEquals(dep, generatedKey);
assertThat(version).isNotEmpty();
assertEquals("1, 2", prettyPrinter.format(Arrays.asList(1L, 2L)));
assertThat(updateSql, Matchers.startsWith("DELETE FROM user_specified_changelog "));
assertThat(applier.changeScripts.size(), is(2)); assertThat(applier.changeScripts.get(0), is(change1)); assertThat(applier.changeScripts.get(1), is(change2));
assertThat(undoApplier.changeScripts.size(), is(3)); assertThat(undoApplier.changeScripts.get(0), is(change3)); assertThat(undoApplier.changeScripts.get(1), is(change2)); assertThat(undoApplier.changeScripts.get(2), is(change1));
assertThat(dbDeploy.getWelcomeString(), startsWith("dbdeploy"));
assertThat(result, hasItems("SELECT 1", "SELECT 2")); assertThat(result.size(), is(2));
assertThat(dbDeploy.getDelimiterType(), is(DelimiterType.normal)); assertThat(dbDeploy.getDelimiterType(), is(DelimiterType.row));
assertThat(sql, equalToIgnoringWhiteSpace(expected));
assertThat(changeScript.toString(), equalTo("#5: abc.txt")); assertThat(changeScript.toString(), equalTo("#5: abc.txt"));
assertThat(2, equalTo(list.size())); assertSame(zero, list.get(0)); assertSame(four, list.get(1));
assertEquals("1, 2, 4, 7..10, 12", prettyPrinter.format(Arrays.asList(1L, 2L, 4L, 7L, 8L, 9L, 10L, 12L)));
assertThat(e.getExecutedSql(), is("split")); assertThat(e.getScript(), is(script));
assertThat(changeScript.getContent(), is("Hello\\nThere!\\n"));
assertThat(applier.changeScripts.size(), is(3)); assertThat(applier.changeScripts.get(0), is(change1)); assertThat(applier.changeScripts.get(1), is(change2)); assertThat(applier.changeScripts.get(2), is(change3));
assertThat(dbDeploy.getLineEnding(), is(LineEnding.platform)); assertThat(dbDeploy.getLineEnding(), is(LineEnding.cr)); assertThat(dbDeploy.getLineEnding(), is(LineEnding.crlf)); assertThat(dbDeploy.getLineEnding(), is(LineEnding.lf)); assertThat(dbDeploy.getLineEnding(), is(LineEnding.platform));
assertThat(4, equalTo(list.size())); assertSame(one, list.get(0)); assertSame(two, list.get(1)); assertSame(three, list.get(2)); assertSame(four, list.get(3));
assertThat(numbers, hasItems(5L, 9L, 12L));
assertEquals("myuserid", dbDeploy.getUserid());
assertThat(result, hasItem("SELECT \';\'")); assertThat(result.size(), is(1));
assertThat(result, hasItems("SELECT 1", "SELECT 2")); assertThat(result.size(), is(2));
assertEquals("1, 3", prettyPrinter.formatChangeScriptList(Arrays.asList(change1, change3)));
assertTrue(newChangeScript.exists()); assertTrue("file name doesnt have sql suffix", newChangeScriptFileName.endsWith(".sql")); assertTrue("file name not timestamped correctly", newChangeScriptFileName.matches("[0-9]{14}\\\\.sql"));
assertThat(dbDeploy.getPassword(), is("user entered password"));
assertThat(result, hasItems("SELECT 1", "SELECT 2")); assertThat(result.size(), is(2));
assertEquals("(none)", prettyPrinter.format(new ArrayList<Long>()));
assertThat(e.getMessage(), is("Could not find template named some_complete_rubbish_apply.ftl\\n" + "Check that you have got the name of the database syntax correct."));
assertThat(result, hasItem("SELECT 1")); assertThat(result.size(), is(1));
assertEquals("1, 3, 5", prettyPrinter.format(Arrays.asList(1L, 3L, 5L)));
assertThat(applier.changeScripts.size(), is(2)); assertThat(applier.changeScripts.get(0), is(change2)); assertThat(applier.changeScripts.get(1), is(change3));
assertEquals("Could not extract a change script number from filename: blah blah blah", e.getMessage() );
assertEquals("1..5", prettyPrinter.format(Arrays.asList(1L, 2L, 3L, 4L, 5L)));
assertThat(splitter.split("SELECT\\n1"), hasItems("SELECT" + SystemUtils.LINE_SEPARATOR + "1")); assertThat(splitter.split("SELECT\\r\\n1"), hasItems("SELECT" + SystemUtils.LINE_SEPARATOR + "1"));
assertEquals(1L, parser.extractIdFromFilename("0001_a_filename.txt")); assertEquals(1L, parser.extractIdFromFilename("1_a_filename.txt")); assertEquals(1L, parser.extractIdFromFilename("1 a filename.txt")); assertEquals(1L, parser.extractIdFromFilename("1.txt")); assertEquals(123L, parser.extractIdFromFilename("00123_something.txt"));
assertThat(one.compareTo(two), lessThan(1)); assertThat(two.compareTo(one), greaterThanOrEqualTo(1));
assertThat(path, is(equalTo(expectedResult)));
assertThat(filename, is(equalTo(fakeFileName)));
assertThat(restoreBlobStrategy.getHashAlgorithms(), containsInAnyOrder(HashAlgorithm.SHA1));
assertThat(path, is(equalTo(fakePath)));
assertThat(path, is(equalTo(expectedResult)));
assertThat(testState, instanceOf(TokenMatcher.State.class));
assertThat(componentName, is(equalTo(fakeComponentName)));
assertThat(path, is(equalTo(fakeFileName + "." + fakeExtension))); assertThat(path, is(equalTo(fakePath + "/" + fakeFileName + "." + fakeExtension)));
assertThat(path, is(equalTo(expectedResult)));
assertNotEquals(nodeOrder, testTree.nodeOrder); assertEquals(nodeOrder, testTree.nodeOrder);
assertEquals(expected, result);
assertEquals(-1, testTree.getNodeDepth());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(1L, times.getTime("SURVIVAL")); assertEquals(2L, times.getTime("CREATIVE")); assertEquals(0L, times.getTime("ADVENTURE")); assertEquals(0L, times.getTime("SPECTATOR"));
assertEquals(1L, times.getTime("SURVIVAL")); assertEquals(2L, times.getTime("CREATIVE")); assertEquals(3L, times.getTime("ADVENTURE")); assertEquals(4L, times.getTime("SPECTATOR"));
assertEquals(UUID.fromString(test), UUIDUtility.parseFromString(test).orElse(null));
assertEquals(expected, result);
assertEquals("Test Victim", underTest.getVictimName().orElse("Unknown"));
assertTrue(readConfig.getNode("Plugins.Towny.HideTowns").isPresent()); assertTrue(readConfig.getNode("Plugins.Towny.Enabled").isPresent()); assertFalse(readConfig.getNode("Plugins.Towny.HideTowns.Enabled").isPresent());
assertEquals(expResult, result);
assertEquals(expected, result);
assertEquals(1L, times.getTime("SURVIVAL")); assertEquals(2L, times.getTime("CREATIVE")); assertEquals(3L, times.getTime("ADVENTURE")); assertEquals(4L, times.getTime("SPECTATOR"));
assertEquals(weapon, underTest.getWeapon());
assertEquals(testUUID, underTest.getVictim());
assertEquals(new Version("4.1.7"), oldest.getVersion()); assertTrue(oldest.isRelease());
assertEquals(100L, underTest.getDate());
assertTrue(afterOptional.isPresent()); assertFalse(after.isEmpty());
assertEquals(expected, result);
assertNull(testTree.getString("Non-existent"));
assertTrue(beforeOptional.isPresent()); assertTrue(before.isEmpty()); assertTrue(afterOptional.isPresent()); assertFalse(after.isEmpty()); assertEquals(before, after);
assertTrue(lines.contains("java.lang.IllegalStateException"), () -> "Did not contain \'java.lang.IllegalStateException\', " + lines); assertTrue(lines.contains(" Suppressed:"), () -> "Did not contain \' Suppressed:\', " + lines); assertTrue(lines.contains(" java.lang.IllegalArgumentException"), () -> "Did not contain \' java.lang.IllegalArgumentException\', " + lines); assertTrue(lines.contains(" java.lang.NullPointerException"), () -> "Did not contain \' java.lang.NullPointerException\', " + lines);
assertEquals(expected, result);
assertTrue(readConfig.getNode("Test.List").isPresent()); assertTrue(readConfig.getNode("Test.Value").isPresent()); assertFalse(readConfig.getNode("Test.List.Value").isPresent()); assertEquals("Example", readConfig.getString("Test.Value")); assertEquals(Arrays.asList("First", "Second", "Third"), readConfig.getStringList("Test.List"));
assertFalse(originalLines.isEmpty()); assertFalse(writtenLines.isEmpty()); assertEquals(0, differing.length(), differing::toString);
assertEquals(expected, result);
assertEquals(expected, result);
assertFalse(testTree.getNode("NonexistentNode").isPresent());
assertEquals(expected, result);
assertTrue(optional.isPresent()); assertEquals(5L, worldTimes.getGMTimes("One").getTotal());
assertTrue(testTree.getNode(FIRST_LEVEL + "." + SECOND_LEVEL).isPresent(), "Node was not found");
assertEquals(expected, result);
assertEquals(0, testTree.childNodes.get(SIMPLE_STRING_NODE).getNodeDepth());
assertEquals(expected, writtenLines);
assertFalse(underTest.getVictimName().isPresent());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(0L, gmTimes.getTime("SURVIVAL")); assertEquals(5L, gmTimes.getTime("Survival"));
assertTrue(result.isPresent()); assertEquals(TimeZone.getDefault(), result.get());
assertEquals(expected, result);
assertEquals(expected, writtenLines);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertFalse(originalLines.isEmpty()); assertFalse(writtenLines.isEmpty()); assertEquals(0, differing.length(), differing::toString);
assertSame(testTree, adding.parent);
assertTrue(lines.contains("java.lang.IllegalStateException"), () -> "Did not contain \'java.lang.IllegalStateException\', " + lines);
assertTrue(testTree.getNode(SIMPLE_STRING_NODE).isPresent(), "Node was not found");
assertNull(result);
assertEquals(expected, result);
assertEquals(1, testTree.childNodes.get(FIRST_LEVEL).childNodes.get(SECOND_LEVEL).getNodeDepth());
assertNull(testTree.getString(FIRST_LEVEL));
assertEquals(expected, result);
assertEquals(expected, writtenLines);
assertTrue(cachedSession.isPresent()); assertEquals(session, cachedSession.get());
assertEquals(expected, result);
assertEquals("baz", Operations.getByAssociation(configuration, Association.ENEMY).stream().findAny().get().getName());
assertEquals(readFile(sourceFile).replaceAll("\\\\s", ""), output.replaceAll("\\\\s", ""));
assertTrue(setHasNames( Selector.create(configuration).enemies().friends().selectMatchingAny(), "John", "Ben", "Mark", "Jack"));
assertTrue(setHasNames( Selector.create(configuration).exactValue(-1).selectMatchingAll(), "Ben"));
assertTrue(setHasNames( Selector.create(configuration).association(Association.NEUTRAL).selectMatchingAll(), "Alice"));
assertTrue(setHasNames( Selector.create(configuration).enemies().friends().selectMatchingAll() ));
assertTrue(setHasNames( Selector.create(configuration).enemies().selectMatchingAll(), "Ben", "Jack"));
assertTrue(setHasNames( Selector.create(configuration).friends().selectMatchingAll(), "John", "Mark"));
assertTrue(setHasNames( Selector.create(configuration).enemies().friends().selectMatchingNone(), "Alice"));
assertEquals("bar", Operations.getByFriendliness(configuration, 2).stream().findAny().get().getName());
assertEquals(1, set.size(), "One person was loaded"); assertEquals("foo", person.getName()); assertEquals("8a2a3ef5-8d27-41b9-a69a-cbb05ac0ed1d", person.getId().toString()); assertEquals(0, person.getValue()); assertTrue(meta.has("displayName"), "Meta has displayName"); assertEquals("bar", meta.get("displayName").getAsString());
assertEquals(2, Operations.getInFriendlinessRange(configuration, 0, 2).size());
assertEquals("/s/c500-m60-c-s-k-s-o6.htm", UriTemplateUtil.clearVariablesValue(requestPath, matchingPatternPath, variableNames));
assertTrue(exists(bpatch2)); assertTrue(exists(bpatch3)); assertEquals(80, workDone); assertEquals(80, workMax); assertArrayEquals(baseFile, bits3); assertEquals(3, summary.highestVersion);
assertTrue(exists(bpatch2)); assertTrue(exists(bpatch3)); assertArrayEquals(baseFile, bits3); assertEquals(3, summary.highestVersion);
assertTrue(exists(bpatch2)); assertTrue(exists(bpatch3)); assertArrayEquals(baseFile, bits3); assertEquals(3, summary.highestVersion);
assertThat(hierarchy).isEqualTo("" + "Mortar Hierarchy:\\n" + BLANK + "SCOPE Root\\n" + BLANK + "`-SCOPE Child\\n" + BLANK + " `-SCOPE Grand Child\\n" );
assertThat(MortarScope.getScope(context)).isSameAs(root);
assertThat(root.isDestroyed()).isFalse();
assertThat(rootScope.getService("ServiceOne")).isNotNull(); assertThat(e).hasMessage("No service found named \\"SearchThis\\"");
assertThat(root.hasService("FOO")).isTrue(); assertThat(root.hasService("BAR")).isFalse();
assertThat(caught).isNotNull();
assertThat(presenter.loaded).isTrue(); assertThat(presenter.loaded).isFalse();
assertThat(presenter.destroyed).isSameAs(activityScope);
assertThat(presenter.registered).isSameAs(activityScope);
assertThat(presenter.loaded).isTrue(); assertThat(presenter.loaded).isTrue();
assertThat(presenter.droppedView).isSameAs(viewOne);
assertThat(e).hasMessageContaining("already has a child named");
assertThat(hierarchy).isEqualTo("" + "Mortar Hierarchy:\\n" + BLANK + "SCOPE Root\\n" + BLANK + "`-SCOPE Child\\n" );
assertThat(caught).isNotNull();
assertEquals(1, comment.children.size()); assertEquals(new HtmlTagStartNode(new SourceString(source, 6, 7), 5, 8), comment.children.get(0));
assertEquals(1, comment.children.size()); assertEquals("img", ref.tagName.getValue()); assertEquals("src", ref.attrs.get(0).key.getValue()); assertEquals("foo.png", ref.attrs.get(0).value.getValue()); assertEquals(11, ref.attrs.get(0).value.start); assertEquals(18, ref.attrs.get(0).value.end);
assertEquals(1, comment.children.size()); assertEquals(new HtmlTagStartNode(new SourceString(source, 8, 9), 7, 10), comment.children.get(0));
assertEquals(1, comment.children.size()); assertEquals(new HtmlTagStartNode(new SourceString(source, 4, 5), 3, 6), comment.children.get(0));
assertEquals(0, comment.children.size());
assertEquals("unexpected url: www.baidu.com", e.getMessage());
assertEquals(1, downloadId);
assertEquals("unexpected url: www.baidu.com", e.getMessage());
assertEquals(1, downloadId); assertEquals(-1, downloadId2);
assertTrue(credentialManager.getObservers().isEmpty()); assertEquals(keystoreChangedObserver, credentialManager.getObservers().get(0));
assertEquals(State.CREATED, statusReport.getState()); assertEquals(State.CREATED, statusReport.getState());
assertEquals("Bundle", bundle.getOntClass().getLocalName());
assertTrue(credentialManager.getJavaTruststorePasswordProviders().isEmpty());
assertEquals(now, statusReport.getStartedDate()); assertEquals(State.RUNNING, statusReport.getState());
assertNotNull(privateKey2); assertNotNull(privateKeyCertChain2);
assertNull(statusReport.getStartedDate());
assertEquals(URI.create(StringConstantActivity.URI), factory.getActivityType());
assertNull(testUsernamePassword); assertNotNull(testUsernamePassword); assertTrue(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.KEYSTORE, alias)); assertTrue(Arrays.equals(usernamePassword.getPassword(), testUsernamePassword.getPassword())); assertTrue(usernamePassword.getUsername().equals(testUsernamePassword.getUsername()));
assertNull(statusReport.getCompletedDate());
assertNotNull(statusReport.getSubject()); assertEquals(subject, statusReport.getSubject()); assertEquals(subject, statusReport.getSubject());
assertEquals(workflowBundle, execution.getWorkflowBundle());
assertEquals(0, configuration.get("maxRetries").intValue()); assertEquals(1000, configuration.get("initialDelay").intValue()); assertEquals(5000, configuration.get("maxDelay").intValue()); assertEquals(1.0, configuration.get("backoffFactor").doubleValue(), 0.001);
assertEquals(now, statusReport.getFailedDate()); assertEquals(State.FAILED, statusReport.getState());
assertTrue(credentialManager.hasKeyPair(privateKey, privateKeyCertChain)); assertTrue(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.KEYSTORE, alias)); assertFalse(credentialManager.hasKeyPair(privateKey, privateKeyCertChain)); assertFalse(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.KEYSTORE, alias));
assertFalse(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.KEYSTORE, alias));
assertEquals(4, UUID.fromString(run.getID()).version());
assertEquals(dataBundle, execution.getDataBundle());
assertNull(statusReport.getCancelledDate());
assertEquals(now, statusReport.getCreatedDate()); assertEquals(State.CREATED, statusReport.getState());
assertNotNull(createActivity);
assertTrue(statusReport.getResumedDates().isEmpty());
assertNotNull(prvKey); assertEquals(privateKey, prvKey);
assertNotNull("the identifier should be created at construction time",df.getIdentifier());
assertNotNull(testUsernamePassword); assertTrue(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.KEYSTORE, alias)); assertTrue(Arrays.equals(usernamePassword.getPassword(), testUsernamePassword.getPassword())); assertTrue(usernamePassword.getUsername().equals(testUsernamePassword.getUsername()));
assertNotNull(execution.getWorkflowReport());
assertTrue(credentialManager.getMasterPasswordProviders().contains(masterPasswordProvider)); assertNull(credentialManager.getMasterPasswordProviders());
assertNotNull(sslSocketFactory); assertEquals(sslSocketFactory, credentialManager.getTavernaSSLSocketFactory());
assertNotNull(statusReport.getCreatedDate()); assertFalse(statusReport.getCreatedDate().after(new Date())); assertEquals(statusReport.getCreatedDate(), statusReport.getCreatedDate());
assertTrue(credentialManager.getObservers().size() == 1); assertTrue(credentialManager.getObservers().size() == 0);
assertNull("freshly created activity should not contain configuration", activity.getConfiguration());
assertEquals(State.COMPLETED, run.getState());
assertEquals(datalink, edit.getSubject());
assertNull(statusReport.getPausedDate());
assertEquals(workflow, execution.getWorkflow());
assertTrue(credentialManager.getTrustConfirmationProviders().contains(trustConfirmationProvider)); assertNull(credentialManager.getTrustConfirmationProviders());
assertEquals(keystoreChangedObserver, credentialManager.getObservers().get(0));
assertNotNull(runProfile.getExecutionEnvironment()); assertEquals(executionEnvironment, runProfile.getExecutionEnvironment()); assertEquals(runProfile.getExecutionEnvironment(), runProfile.getExecutionEnvironment());
assertTrue(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.TRUSTSTORE, alias)); assertFalse(credentialManager.hasTrustedCertificate(trustedCertficate)); assertFalse(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.TRUSTSTORE, alias));
assertTrue(keystoreAliases.isEmpty()); assertTrue(keystoreAliases.size() == 2); assertTrue(truststoreAliases.size() >= 1); assertTrue(keystoreAliases.contains(aliasPassword)); assertTrue(keystoreAliases.contains(aliasKeyPair)); assertTrue(truststoreAliases.contains(aliasTrustedCert));
assertNotNull(privateKeyCertificate); assertTrue(privateKeyCertChain[0].equals(privateKeyCertificate)); assertTrue(!truststoreAliases.isEmpty()); assertNotNull(trustedCertificate);
assertNotNull(createActivity);
assertEquals(15, configuration.get("maxRetries").intValue()); assertEquals(150, configuration.get("initialDelay").intValue()); assertEquals(1200, configuration.get("maxDelay").intValue()); assertEquals(1.2, configuration.get("backoffFactor").doubleValue(), 0.001);
assertTrue(credentialManager.getJavaTruststorePasswordProviders().contains(javaTruststorePasswordProvider)); assertNull(credentialManager.getJavaTruststorePasswordProviders());
assertNull(runProfile.getExecutionEnvironment()); assertEquals(executionEnvironment, runProfile.getExecutionEnvironment());
assertFalse(credentialManager.hasEntryWithAlias(KeystoreType.TRUSTSTORE, aliasTrustedCert)); assertTrue(credentialManager.hasEntryWithAlias(KeystoreType.TRUSTSTORE, aliasTrustedCert2));
assertNull(runProfile.getDataBundle()); assertEquals(dataBundle, runProfile.getDataBundle());
assertEquals(wfBundle.getGlobalBaseURI(), DataBundles.getWorkflowBundle(bundle).getGlobalBaseURI()); assertTrue(Files.exists(runReport)); assertEquals("COMPLETED", runReportJson.get("state").asText());
assertEquals(URI.create(DataflowActivity.URI), factory.getActivityType());
assertFalse(credentialManager.getMasterPasswordProviders().isEmpty()); assertTrue(credentialManager.getMasterPasswordProviders().contains(masterPasswordProvider));
assertEquals(now, statusReport.getCancelledDate()); assertEquals(State.CANCELLED, statusReport.getState());
assertNotNull(runProfile.getDataBundle()); assertEquals(dataBundle, runProfile.getDataBundle()); assertEquals(runProfile.getDataBundle(), runProfile.getDataBundle());
assertFalse(credentialManager.isKeyEntry("somealias")); assertTrue(credentialManager.isKeyEntry(aliasPassword)); assertTrue(credentialManager.isKeyEntry(aliasKeyPair)); assertFalse(credentialManager.isKeyEntry(aliasTrustedCert));
assertEquals(now, statusReport.getCompletedDate()); assertEquals(State.COMPLETED, statusReport.getState());
assertNotNull(runProfile.getWorkflowBundle()); assertEquals(workflowBundle, runProfile.getWorkflowBundle()); assertEquals(runProfile.getWorkflowBundle(), runProfile.getWorkflowBundle());
assertTrue(credentialManager.getTrustConfirmationProviders().isEmpty());
assertTrue(credentialManager.getServiceUsernameAndPasswordProviders().isEmpty());
assertTrue(credentialManager.getServiceURIsForAllUsernameAndPasswordPairs().isEmpty());
assertNotNull(execution.getID()); assertEquals(execution.getID(), execution.getID());
assertNull(statusReport.getResumedDate());
assertEquals(now, statusReport.getPausedDate()); assertEquals(State.PAUSED, statusReport.getState());
assertFalse(credentialManager.hasKeyPair(privateKey, privateKeyCertChain)); assertTrue(credentialManager.hasKeyPair(privateKey, privateKeyCertChain));
assertTrue(statusReport.getPausedDates().isEmpty());
assertTrue(credentialManager.hasTrustedCertificate(trustedCertficate)); assertTrue(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.TRUSTSTORE, alias)); assertFalse(credentialManager.hasTrustedCertificate(trustedCertficate)); assertFalse(credentialManager.hasEntryWithAlias(CredentialManager.KeystoreType.TRUSTSTORE, alias));
assertEquals(datalink, edit.getSubject());
assertNull(runProfile.getWorkflowBundle()); assertEquals(workflowBundle, runProfile.getWorkflowBundle());
assertEquals(now, statusReport.getResumedDate()); assertEquals(State.RUNNING, statusReport.getState());
assertNull(statusReport.getFailedDate());
assertThat( mapper ).isNotNull();
assertThat( mapperClass ).isNotNull(); assertThat( mapperClass ).isNotExactlyInstanceOf( Foo.class );
assertThat( getLiteral( int.class.getCanonicalName(), "0xFFFF_FFFF_FFFF" ) ).isNull(); assertThat( getLiteral( long.class.getCanonicalName(), "0xFFFF_FFFF_FFFF_FFFF_FFFF" ) ).isNull();
assertThat( international ).isEqualTo( "international" );
assertThat( getLiteral( void.class.getCanonicalName(), "0xFFFF_FFFF_FFFF" ) ).isNull();
assertThat( params.equals( params2 ) ).as( "Different resultType" ).isFalse(); assertThat( params2.equals( params ) ).as( "Different resultType" ).isFalse();
assertThat( params.equals( params2 ) ).as( "All equal" ).isTrue(); assertThat( params2.equals( params ) ).as( "All equal" ).isTrue();
assertThat( params.equals( params2 ) ).as( "Different order for qualifyingNames" ).isFalse(); assertThat( params2.equals( params ) ).as( "Different order for qualifyingNames" ).isFalse();
assertThat( params.hashCode() ).as( "All nulls hashCode" ).isEqualTo( 3 * 97 * 97 );
assertThat( Strings.getSafeVariableName( "prop1", "prop1" ) ).isEqualTo( "prop1_1" ); assertThat( Strings.getSafeVariableName( "prop1", "prop1", "prop1_1" ) ).isEqualTo( "prop1_2" );
assertThat( international ).isEqualTo( "International" );
assertThat( Mappers.getMapperClass( PackagePrivateMapper.class ) ).isNotNull();
assertThat( getLiteral( int.class.getCanonicalName(), "156l" ) ).isNull(); assertThat( getLiteral( int.class.getCanonicalName(), "156L" ) ).isNull();
assertThat( params.hashCode() ) .as( "ResultType nulls hashCode" ) .isEqualTo( ( 3 * 97 + qualifyingNames.hashCode() ) * 97 );
assertThat( international ).isEqualTo( "International" );
assertThat( params.equals( params2 ) ).as( "Second null resultType" ).isFalse(); assertThat( params2.equals( params ) ).as( "First null resultType" ).isFalse();
assertThat( Mappers.getMapper( SomeClass.Foo.class ) ).isNotNull(); assertThat( Mappers.getMapper( SomeClass.NestedClass.Foo.class ) ).isNotNull();
assertThat( international ).isEqualTo( "international" );
assertThat( params.equals( params2 ) ).as( "Second null qualifyingNames" ).isFalse(); assertThat( params2.equals( params ) ).as( "First null qualifyingNames" ).isFalse();
assertThat( Mappers.getMapper( PackagePrivateMapper.class ) ).isNotNull();
assertThat( getLiteral( boolean.class.getCanonicalName(), "true" ) ).isNotNull(); assertThat( getLiteral( boolean.class.getCanonicalName(), "false" ) ).isNotNull(); assertThat( getLiteral( boolean.class.getCanonicalName(), "FALSE" ) ).isNull();
assertThat( dateFormatValidator.validate( "XXXX" ).isValid() ).isTrue();
assertThat( Strings.join( new ArrayList<String>(), "-" ) ).isEqualTo( "" ); assertThat( Strings.join( Arrays.asList( "Hello", "World" ), "-" ) ).isEqualTo( "Hello-World" ); assertThat( Strings.join( Arrays.asList( "Hello" ), "-" ) ).isEqualTo( "Hello" );
assertThat( params.hashCode() ).as( "Expected HashCode" ).isEqualTo( expectedHash );
assertThat( params.equals( params2 ) ).as( "Different order for qualifiers" ).isFalse(); assertThat( params2.equals( params ) ).as( "Different order for qualifiers" ).isFalse();
assertThat( getLiteral( int.class.getCanonicalName(), "-0xffaa" ) ).isNotNull(); assertThat( getLiteral( int.class.getCanonicalName(), "-0377_7777" ) ).isNotNull(); assertThat( getLiteral( int.class.getCanonicalName(), "-0b1111_1111" ) ).isNotNull();
assertThat( params.equals( params ) ).as( "Self equals" ).isTrue();
assertThat( getLiteral( long.class.getCanonicalName(), "156l" ) ).isNotNull(); assertThat( getLiteral( long.class.getCanonicalName(), "156L" ) ).isNotNull();
assertFalse( NativeTypes.isNumber( null ) ); assertFalse( NativeTypes.isNumber( Object.class ) ); assertFalse( NativeTypes.isNumber( String.class ) ); assertTrue( NativeTypes.isNumber( double.class ) ); assertTrue( NativeTypes.isNumber( Double.class ) ); assertTrue( NativeTypes.isNumber( long.class ) ); assertTrue( NativeTypes.isNumber( Long.class ) ); assertTrue( NativeTypes.isNumber( BigDecimal.class ) ); assertTrue( NativeTypes.isNumber( BigInteger.class ) );
assertThat( Mappers.getMapperClass( SomeClass.Foo.class ) ).isNotNull(); assertThat( Mappers.getMapperClass( SomeClass.NestedClass.Foo.class ) ).isNotNull();
assertThat( params.equals( params2 ) ).as( "Second null qualifiers" ).isFalse(); assertThat( params2.equals( params ) ).as( "First null qualifiers" ).isFalse();
assertThat( getLiteral( float.class.getCanonicalName(), "156L" ) ).isNotNull(); assertThat( getLiteral( float.class.getCanonicalName(), "156l" ) ).isNotNull();
assertThat( Strings.isEmpty( null ) ).isTrue(); assertThat( Strings.isEmpty( "" ) ).isTrue(); assertThat( Strings.isEmpty( " " ) ).isFalse(); assertThat( Strings.isEmpty( "not empty" ) ).isFalse();
assertThat( mostSimilarWord ).isEqualTo( "fullName" );
assertThat( params.equals( null ) ).as( "Equals with null" ).isFalse();
assertThat( Strings.capitalize( null ) ).isNull(); assertThat( Strings.capitalize( "c" ) ).isEqualTo( "C" ); assertThat( Strings.capitalize( "capitalize" ) ).isEqualTo( "Capitalize" ); assertThat( Strings.capitalize( "AlreadyCapitalized" ) ).isEqualTo( "AlreadyCapitalized" ); assertThat( Strings.capitalize( "notCapitalized" ) ).isEqualTo( "NotCapitalized" );
assertThat( params.hashCode() ) .as( "QualifyingNames null hashCode" ) .isEqualTo( 3 * 97 * 97 + "someType".hashCode() );
assertEquals(1, serialized.size()); assertEquals(KarelDbCoordinator.KDB_SUBPROTOCOL_V0, defaultMetadata.name()); assertEquals(LEADER_INFO, state);
assertEquals(load, created); assertEquals("TestUser not found", e.getMessage());
assertEquals("test", dao.getTableName());
assertEquals(1, e.getErrors().size()); assertTrue(validator.validateUpdate(JsonHelper.update("{email:\'ok@example.com\'}", TestValidateModel.class), fieldData));
assertEquals(model.name, created.name);
assertEquals(created, loaded); assertNotNull(created.getCreateAt()); assertEquals(creatorId, created.getCreateId());
assertEquals(expected, doc);
assertEquals("Ian", update.getPartial().getName()); assertTrue(update.isUpdateField("name")); assertTrue(update.isUpdateField("email")); assertEquals(ImmutableSet.of("email"), update.getRemoveFields());
assertEquals("Bob", load.getName()); assertEquals(updateBy, load.getUpdateId()); assertEquals(now.toEpochMilli(), load.getUpdateAt().toEpochMilli()); assertNull(load.getEmail());
assertEquals("test-user", dao.getCollection().getNamespace().getCollectionName());
assertEquals(created, loaded);
assertNotNull(index);
assertEquals(400, response.getStatus()); assertEquals("application/json", response.getMediaType().toString()); assertEquals(400, map.get("code")); assertEquals("field: is invalid", map.get("message")); assertEquals("field", ((List<ValidationError>)map.get("errors")).get(0).getField());
assertEquals("Rename", change.getName());
assertEquals(model, prev); assertEquals("Rename", change.getName());
assertEquals(1, errors.size()); assertEquals(1, errors.size()); assertEquals("must be a well-formed email address", errors.get(0).getMessage()); assertEquals(1, errors.size()); assertEquals("is not updatable", errors.get(0).getMessage()); assertEquals(1, errors.size()); assertEquals("email: is required", errors.get(0).toString());
assertEquals("Ian", update.getPartial().getName()); assertTrue(update.isUpdateField("name"));
assertNotNull(item.get("id")); assertEquals(creatorId.toString(), item.get("createId")); assertEquals(new BigDecimal(now.toEpochMilli()), item.get("createAt"));
assertEquals(2, count);
assertNull(dao.toStorageValue(null)); assertEquals(1, dao.toStorageValue(1)); assertEquals("test", dao.toStorageValue("test")); assertEquals(id.toString(), dao.toStorageValue(id)); assertEquals(time.toEpochMilli(), dao.toStorageValue(time));
assertTrue(update.getPartial().getActive()); assertTrue(update.getRemoveFields().contains("email"));
assertEquals(1, e.getErrors().size()); assertTrue(validator.validateCreate(TestValidateModel.builder().email("ok@example.com").type("type").build(), fieldData));
assertEquals("loginAt", scanner.toFieldName(TestModel.class.getDeclaredMethod("getLoginAt"))); assertNull(scanner.toFieldName(TestModel.class.getDeclaredMethod("getLoginAt", long.class)));
assertEquals(-73.9857, load.getLocation().getCoordinates().getLongitude(), .00001);
assertNotNull(created.getId()); assertEquals("Ian", created.getName()); assertEquals(creatorId, created.getCreateId()); assertEquals(now.toEpochMilli(), created.getCreateAt().toEpochMilli());
assertTrue(dao.generateId() instanceof ObjectId);
assertFalse(dao.exists(new Document("name", "Bob"), null)); assertTrue(dao.exists(new Document("name", "Ian"), null)); assertFalse(dao.exists(new Document("name", "Bob"), created.getId()));
assertFalse(dao.loadOpt(created.getId()).isPresent());
assertTrue(dao.checkUniqueField("email", "email", "new@example.com", null)); assertFalse(dao.checkUniqueField("email", "email", "bob@example.com", null)); assertTrue(dao.checkUniqueField("email", "email", "bob@exmaple.com", bob.getId()));
assertEquals("test-user", dao.getCollectionName());
assertEquals(myMap, dao.toStorageValue(myMap));
assertEquals(2, results.getData().size()); assertEquals(created2, results.getData().get(0)); assertEquals(created1, results.getData().get(1));
assertEquals(404, response.getStatus()); assertEquals("application/json", response.getMediaType().toString()); assertEquals(404, map.get("code")); assertEquals("not found", map.get("message"));
assertFalse(iterator.hasNext()); assertEquals("Bob 01", user1.getName()); assertEquals("Bob 02", user2.getName());
assertEquals("{\\"email\\":\\"test@example.com\\",\\"birthday\\":\\"2017-03-01\\",\\"country\\":null}", json);
assertTrue(update.isUpdateField("name")); assertEquals(ImmutableSet.of("name"), update.getUpdateFields()); assertEquals("Rename", update.getPartial().getName());
assertEquals(created, prev); assertEquals("Bob", load.getName()); assertEquals(updateBy, load.getUpdateId()); assertEquals(now.toEpochMilli(), load.getUpdateAt().toEpochMilli());
assertEquals(created, user); assertEquals(1, count);
assertFalse(load.isPresent());
assertEquals(1, key.getComponents().size()); assertEquals("id", attr.getName()); assertEquals(id.toString(), attr.getValue());
assertEquals(TestModel.class, dao.getModelClass());
assertEquals(2, count);
assertFalse(dao.exists(new Document("name", "Ian"), null));
assertEquals("Ian", object.getName());
assertEquals(2, results.getData().size());
assertEquals(1, e.getErrors().size()); assertTrue(validator.validateModel(TestValidateModel.builder().email("ok@example.com").build()));
assertEquals("id", data.getId().getName()); assertEquals("updateId", data.getUpdatedBy().getName()); assertEquals("updateAt", data.getUpdatedAt().getName()); assertEquals("createId", data.getCreatedBy().getName()); assertEquals("createAt", data.getCreatedAt().getName());
assertTrue(update.isUpdateField("name")); assertTrue(update.isUpdateField("email")); assertEquals("Rename", update.getPartial().getName()); assertEquals(ImmutableSet.of("name"), update.getSetFields()); assertEquals(ImmutableSet.of("email"), update.getRemoveFields());
assertNotNull(created.getId()); assertEquals("Ian", created.getName()); assertEquals(creatorId, created.getCreateId()); assertEquals(now.toEpochMilli(), created.getCreateAt().toEpochMilli());
assertEquals("Ian White", results.getData().get(0).getName()); assertEquals(1, results.getData().size());
assertTrue(dao.generatePrimaryKeyValue() instanceof UUID);
assertEquals(1, errors.size()); assertEquals("object is null", errors.get(0).getMessage()); assertEquals(1, errors.size()); assertEquals("must be a well-formed email address", errors.get(0).getMessage()); assertEquals(0, errors.size());
assertEquals(load, created); assertFalse(dao.loadByQueryOpt(new Document("email", "bob@example.com")).isPresent());
assertEquals("test", dao.getTable().getTableName());
assertEquals("bob@example.com", results.getData().get(0).getEmail()); assertEquals(1, results.getData().size());
assertEquals("Marty", update.getPartial().getName()); assertEquals(LocalDate.of(1985, 10, 26), update.getPartial().getBirthday()); assertNull(update.getPartial().getEmail()); assertNull(update.getPartial().getCountry()); assertEquals(ImmutableSet.of("email", "country"), update.getRemoveFields());
assertEquals("{\\"name\\":\\"Marty\\",\\"birthday\\":\\"1985-10-26\\"}", JsonHelper.json(model));
assertEquals("Hello World!", new App().sayHello());
assertEquals(1, time.size()); assertEquals(1318241472000l, time.get(0).getTime());
assertEquals(4, typeNames.size()); assertTrue(typeNames.contains("archsites")); assertTrue(typeNames.contains("bugsites")); assertTrue(typeNames.contains("Bridges")); assertTrue(typeNames.contains("Buildings"));
assertEquals(1, time.size()); assertTrue(now < time.get(0).getTime());
assertEquals(ints[i], fn.evaluate(feature(words[i].toLowerCase()), Integer.class)); assertEquals(ints[i], fn.evaluate(feature(words[i].toUpperCase()), Integer.class));
assertEquals(0, ds.getTypeNames().length); assertNotNull(ft);
assertFalse(temporalGeomericPrimitive2.length().equals(result));
assertTrue(time.isEmpty());
assertEquals(5, time.size()); assertEquals(1318241472000l, time.get(0).getTime()); assertEquals(1318241472000l + (3600 * 1000 * 4), time.get(time.size()-1).getTime());
assertEquals(3, time.size()); assertEquals(1318241472000l, time.get(0).getTime()); assertEquals(1318241472000l + (3600 * 1000 * 48), time.get(1).getTime());
assertThat(actual) .isBeforeOrEqualsTo(new Date());
assertThat(actual) .isNotNull();
assertThat(actual.toString()) .isEqualTo("new java.util.ArrayList<>(value)");
assertThat(actual) .isNotEmpty();
assertThat(actual) .isEqualTo(TypeName.INT);
assertThat(actual) .isEqualTo(TypeName.get(String.class));
assertThat(actual) .isTrue();
assertThat(actual) .isEqualTo(TypeName.INT);
assertThat(actual).isEmpty();
assertThat(actual.toString()) .isEqualTo("value");
assertThat(actual) .isEqualTo(Uri.EMPTY);
assertThat(actual) .isEqualTo(element);
assertThat(actual) .isEqualTo(calendar.getTimeInMillis());
assertThat(actual).hasSize(2); assertThat(actual.get(0)).isInstanceOf(ArrayTypeName.class); assertThat(actual.get(0).toString()).isEqualTo("java.lang.String[]"); assertThat(actual.get(1)).isInstanceOf(ClassName.class); assertThat(actual.get(1).toString()).isEqualTo("java.lang.String");
assertThat(actual) .isNotNull() .isEmpty();
assertThat(actual.toString()) .isEqualTo("new java.util.HashMap<>(value)");
assertThat(actual) .isWithinYear(2016) .isWithinMonth(11) .isWithinDayOfMonth(28) .isWithinHourOfDay(20) .isWithinMinute(0) .isWithinSecond(0);
assertThat(actual) .isEqualTo("String");
assertThat(actual) .isFalse();
assertThat(actual).hasSize(2); assertThat(actual.get(0)).isInstanceOf(ParameterizedTypeName.class); assertThat(actual.get(0).toString()).isEqualTo("java.util.List<java.lang.String>"); assertThat(actual.get(1)).isInstanceOf(ClassName.class); assertThat(actual.get(1).toString()).isEqualTo("java.lang.String");
assertThat(actual) .isTrue();
assertThat(actual.toString()) .isEqualTo("java.util.Arrays.copyOf(value, value.length)");
assertThat(actual) .isDefault() .isSupportedType(TypeName.VOID) .isConvertedType(TypeName.VOID);
assertThat(actual) .isZero();
assertThat(actual) .isFalse();
assertThat(actual) .isNotNull();
assertThat(actual.toString()) .isEqualTo("new java.util.HashSet<>(value)");
assertThat(actual) .isEqualTo(ClassName.get(String.class));
assertNotNull(r); assertEquals("<dummy/>", new String(buffer, 0, read));
assertEquals(ExpressionFactory.exp("a = \'a1\' and b = 5"), e);
assertNotNull(header); assertEquals(3, header.length); assertEquals("A0", header[0].getSourceName()); assertEquals("db:A0", header[0].getTargetPath()); assertEquals("A1", header[1].getSourceName()); assertEquals("db:A1", header[1].getTargetPath()); assertEquals("A2", header[2].getSourceName()); assertEquals("db:A2", header[2].getTargetPath());
assertNotNull(builder);
assertTrue(key instanceof Map); assertEquals(2, keyMap.size()); assertEquals("a1", keyMap.get("a")); assertEquals(5, keyMap.get("b"));
assertFalse(resolver.needsReload("dummy.xml", System.currentTimeMillis() + 1)); assertTrue(resolver.needsReload("dummy.xml", file.lastModified() - 1));
assertNotEquals(n1.hashCode(), n2.hashCode()); assertNotEquals(n1.hashCode(), n3.hashCode()); assertNotEquals(n1.hashCode(), n4.hashCode()); assertEquals(n1.hashCode(), n5.hashCode());
assertNotNull(runtime); assertNotNull(taskService); assertNotNull(taskService.createOrUpdate(CayenneDataObject.class));
assertSame(mockExtractor1, d1); assertSame(mockExtractor1, d2); assertSame(mockExtractor2, d3);
assertSame(expected, factory.getOrCreateWriter("dummy", "dbDummy", () -> expected)); assertSame(expected, factory.getOrCreateWriter("dummy", "dbDummy", () -> expected));
assertNotSame(defaultWriter, setter); assertSame(setter, factory.getOrCreateWriter("me", "dbDummy", () -> defaultWriter));
assertEquals(builder.toMapKey(b1).hashCode(), builder.toMapKey(b1).hashCode()); assertEquals(builder.toMapKey(b1).hashCode(), builder.toMapKey(b2).hashCode()); assertNotEquals(builder.toMapKey(b3).hashCode(), builder.toMapKey(b1).hashCode()); assertNotEquals(builder.toMapKey(b4).hashCode(), builder.toMapKey(b1).hashCode());
assertEquals(StreamConnector.class, extractorFactory.getConnectorType());
assertSame(connectorA, connectorService.getConnector(JdbcConnector.class, "a")); assertSame(connectorB, connectorService.getConnector(JdbcConnector.class, "b")); assertSame(connectorA, connectorService.getConnector(JdbcConnector.class, "a")); assertSame(connectorB, connectorService.getConnector(JdbcConnector.class, "b"));
assertEquals(null, mapper.keyForSource(new TestRowProxy(Index.forLabels("a", "abc"), "A", null)));
assertEquals(44, mapper.keyForTarget(t));
assertNotNull(listeners.get(AfterTargetsMapped.class)); assertNotNull(listeners.get(AfterSourceKeysExtracted.class)); assertNotNull(listeners.get(AfterMissingTargetsFiltered.class)); assertEquals(1, listeners.get(AfterTargetsMapped.class).size()); assertEquals(2, listeners.get(AfterSourceKeysExtracted.class).size()); assertEquals(1, listeners.get(AfterMissingTargetsFiltered.class).size());
assertEquals("v" + i + "1", row[0]); assertEquals("v" + i + "2", row[1]); assertEquals(3, i);
assertSame(e, task.targetFilter);
assertEquals(StreamConnector.class, extractorFactory.getConnectorType());
assertEquals(2, dss.size()); assertSame(ds1, dss.get("dn1")); assertSame(ds2, dss.get("dn2"));
assertNotNull(r); assertEquals("<dummy/>", new String(buffer, 0, read));
assertEquals("ABC", mapper.keyForSource(new TestRowProxy(Index.forLabels("a", "abc"), "A", "ABC")));
assertNotNull(r); assertEquals("<dummy/>", new String(buffer, 0, read));
assertNotNull(header); assertEquals(0, header.length);
assertEquals("abc = \\"a\\"", mapper.expressionForKey("a").toString());
assertTrue(key instanceof Map); assertEquals(2, keyMap.size()); assertEquals("a1", keyMap.get("a")); assertEquals(5, keyMap.get("b"));
assertEquals(builder.toMapKey(b1), builder.toMapKey(b1)); assertEquals(builder.toMapKey(b2), builder.toMapKey(b1)); assertNotEquals(builder.toMapKey(b3), builder.toMapKey(b1)); assertNotEquals(builder.toMapKey(b4), builder.toMapKey(b1));
assertNotNull(r); assertEquals("<dummy/>", new String(buffer, 0, read));
assertNotNull(reader);
assertEquals(55, task.batchSize);
assertSame(String.class, ClassNameResolver.typeForName("java.lang.String")); assertSame(Integer.class, ClassNameResolver.typeForName("java.lang.Integer")); assertSame(byte[].class, ClassNameResolver.typeForName("byte[]")); assertSame(Integer.TYPE, ClassNameResolver.typeForName("int"));
assertNotEquals(n1, n2); assertNotEquals(n1, n3); assertNotEquals(n1, n4); assertEquals(n1, n5);
assertSame(ds1, factory.connectorDataSource("ds1")); assertSame(ds2, factory.connectorDataSource("ds2"));
assertThat(p.getBaseCurrency().getSymbol().getCode()).isEqualTo(baseCurrency); assertThat(p.getBaseCurrency().getQuantity()).isEqualTo(amount);
assertThat(pairService.getForCodeAndProvider(providerCode, "YAHOO")).isNull();
assertThat(rateService.getNewestRateDate(USD, "TOTO")).isNull();
assertThat(StringUtils.format("I\'\'m {0}", "Batman")).isEqualTo("I\'m Batman");
assertThat(result.getFromcur().getCode()).isEqualTo(EUR); assertThat(result.getTocur().getCode()).isEqualTo(GBP); assertThat(result.getValue()).isEqualByComparingTo("0.7556613636"); assertThat(result.getDate()).isEqualTo(parse("2015-02-02T08:42:50"));
assertThat(result.getSymbol()).isEqualTo("UBI.PA"); assertThat(result.getName()).isEqualTo("Ubisoft Entertainment SA"); assertThat(result.getSource().getCode()).isEqualTo("UBI"); assertThat(result.getTarget().getCode()).isEqualTo("EUR"); assertThat(result.getProviderCode()).isEqualTo(YAHOO);
assertThat(result).isEqualTo(parse("2015-02-01T22:42:10"));
assertThat(result).containsOnlyOnce(expectedUsdEurRate);
assertThat(result).extracting("symbol", "name", "source.code", "target.code", "providerCode") .containsExactly(code, name, source, target, YAHOO);
assertThat(result).containsOnlyOnce(new LookupInfo("UBI.PA", "Ubisoft Entertainment SA", "Paris", "Equity", "YAHOO"));
assertThat(currency.getCode()).isEqualTo(GBP);
assertThat(result.getFromcur().getCode()).isEqualTo(USD); assertThat(result.getTocur().getCode()).isEqualTo(GBP); assertThat(result.getValue()).isEqualByComparingTo("0.664982"); assertThat(result.getDate()).isEqualTo(parse("2015-02-02T08:42:50"));
assertThat(yahooLookup.getDetails("UBI.PA").getCurrency()).isEqualTo("EUR");
assertThat(rateService.getOldestRateDate(USD, "TOTO")).isNull();
assertThat(MathUtils.invert(new BigDecimal("2.3"))).isEqualByComparingTo("0.4347826087");
assertThat(result).isEqualToIgnoringGivenFields(new Symbol(code, name, flag, new Symbol(USD, "US Dollar", "us", null))); assertThat(savedSymbol.getCode()).isEqualTo(code); assertThat(savedSymbol.getName()).isEqualTo(name); assertThat(savedSymbol.getCountryFlag()).isEqualTo(flag); assertThat(savedSymbol.getCurrency().getCode()).isEqualTo(currencyCode);
assertThat(pairService.getForCodeAndProvider(code, YAHOO)).isNull();
assertThat(info.getSelected().getSymbol().getCode()).isEqualTo(symbol); assertThat(info.getSelectedCurrency().getSymbol().getCode()).isEqualTo(EUR); assertThat(info.getGainCost()).isEqualByComparingTo("28.155001");
assertThat(MathUtils.percentChange(new BigDecimal("100"), new BigDecimal("110"))).isEqualTo(10f);
assertThat(YahooLookup.parseSource(code)).isEqualTo(expectedResult);
assertThat(result).isEqualTo(new Quote("UBI.PA", null, new BigDecimal("57.52"), parse("2017-09-08T17:35:14+02:00")));
assertThat(result).extracting("symbol").containsExactly("UBI.PA");
assertThat(result).extracting("symbol").containsExactlyInAnyOrder("UBI.PA", "GFT.PA", "RR.L");
assertThat(result).hasSize(443).containsOnlyOnce(expectedRate0, expectedRate3);
assertThat(result).isEqualTo(parse("2015-02-02T08:42:50"));
assertThat(YahooLookup.parseTarget(code)).isEqualTo(expectedResult);
assertThat(result).extracting("symbol").containsExactly("UBI.PA");
assertThat(jwtTokenUtil.getUsernameFromToken(token)).isEqualTo("username"); assertThat(jwtTokenUtil.getIssuedAtDateFromToken(token)).isBetween(start, Instant.now()); assertThat(jwtTokenUtil.getExpirationDateFromToken(token)).isBetween(start.plus(expiration), Instant.now().plus(expiration)); assertThat(roles).containsExactlyInAnyOrder("ADMIN", "USER");
assertThat(MathUtils.divide(new BigDecimal("1.2"), new BigDecimal("0.7"))).isEqualByComparingTo("1.7142857143");
assertThat(histoRepo.findAll()).hasSize(5);
assertThat(currency.getCode()).isEqualTo(EUR);
assertThat(jwtTokenUtil.getUsernameFromToken(token)).isEqualTo("username"); assertThat(jwtTokenUtil.getIssuedAtDateFromToken(token)).isBetween(start, Instant.now()); assertThat(jwtTokenUtil.getExpirationDateFromToken(token)).isBetween(start.plus(expiration), Instant.now().plus(expiration));
assertThat(info.getSelected().getSymbol().getCode()).isEqualTo(symbol); assertThat(info.getSelectedCurrency().getSymbol().getCode()).isEqualTo(EUR); assertThat(info.getGainCost()).isEqualByComparingTo("1.2664838478");
assertThat(symbols).extracting("code").containsExactly("RR", "UBI", USD);
assertThat(symbolService.getForCode(USD)).isNotPresent();
assertThat(result).containsOnlyOnce(expectedLitecoinRate, expectedUbisoftRate);
assertThat(result).isEqualToComparingFieldByField(new SymbolEntity(code, name, countryFlag, null)); assertThat(result).isEqualToComparingFieldByField(symbolRepo.findById(code).get());
assertFalse(mTasksRepository.mCacheIsDirty);
assertFalse(mTasksRepository.mCacheIsDirty);
assertThat(mTasksRepository.mCachedTasks.size(), CoreMatchers.is(1));
assertFalse(byteEntityProvider.isWriteable(String.class, null, null, null));
assertEquals("default value", resolved);
assertEquals(777, asynchronousJobPool.getJobTimeout());
assertSame(exceptionMapper, applicationProviders.getExceptionMapper(RuntimeException.class));
assertEquals(expectedAcceptMediaTypeList, acceptMediaTypeList);
assertEquals(expectedResult, builder.toString());
assertTrue("Dates are not equal", Math.abs(date.getTime() - containerRequest.getDate().getTime()) < 1000);
assertEquals(newArrayList(new AcceptToken("*")), charsetList);
assertNotNull(runtimeDelegate.createHeaderDelegate(Link.class));
assertSame(entityTag, response.getLastModified());
assertTrue(jsonValue.isNull());
assertEquals(-1, collectionMultipartFormDataMessageBodyWriter.getSize(newArrayList(), type, genericType, new Annotation[0], TEXT_PLAIN_TYPE));
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertNotNull(applicationContext.getProperties());
assertNotNull(mediaTypeWithBoundary); assertNotNull(boundary);
assertEquals(httpMethod, containerRequest.getMethod());
assertNotNull(runtimeDelegate.createHeaderDelegate(Locale.class));
assertFalse(mapMultipartFormDataMessageBodyReader.isReadable(type, null, new Annotation[0], null));
assertTrue(String.format("ServletContextDependencySupplier is expected to be created but %s found", dependencySupplier), dependencySupplier instanceof ServletContextDependencySupplier);
assertEquals(CollectionStringProducer.class, typeProducer.getClass());
assertSame(expectedMessageBodyReaderClassOrInstance, messageBodyReader); assertNull(messageBodyReader); assertNotNull(messageBodyReader); assertEquals(expectedMessageBodyReaderClassOrInstance, messageBodyReader.getClass());
assertEquals(NOT_FOUND, argumentCaptor.getValue().getStatusInfo());
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(permitAll);
assertNotNull(runtimeDelegate.createHeaderDelegate(MediaType.class));
assertNotNull(runtimeDelegate.createHeaderDelegate(AcceptLanguage.class));
assertEquals(CollectionStringConstructorProducer.class, typeProducer.getClass());
assertTrue(outputAsString.startsWith("[")); assertTrue(outputAsString.endsWith("]")); assertTrue(outputAsString.contains("\\"author\\":\\"Vincent Massol\\"")); assertTrue(outputAsString.contains("\\"title\\":\\"JUnit in Action\\"")); assertTrue(outputAsString.contains("\\"pages\\":386")); assertTrue(outputAsString.contains("\\"price\\":19.37")); assertTrue(outputAsString.contains("\\"isdn\\":93011099534534"));
assertTrue(jsonValue.isNull());
assertArrayEquals(testContent, out.toByteArray());
assertEquals(str, decode(encoded, HOST));
assertFalse(streamOutputEntityProvider.isReadable(StreamingOutput.class, null, null, null));
assertSame(request, applicationContext.getRequest());
assertEquals(expectedResult, MediaTypeHelper.isConsume(mediaTypes, mediaTypeForConsuming));
assertEquals(newArrayList(new AcceptToken("*")), charsetList);
assertFalse(reader.isReadable(String.class, genericType, null, null));
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertFalse(multivaluedMapEntityProvider.isWriteable(Object.class, null, null, null));
assertNotNull(jaxbContextResolver.getJAXBContext(Book.class));
assertFalse(readerEntityProvider.isReadable(Object.class, null, null, null));
assertEquals(-1, containerRequest.getLength());
assertTrue(result instanceof FileDataSource); assertArrayEquals(testContent, bytes); assertEquals(TEXT_PLAIN, result.getContentType());
assertEquals(CollectionStringProducer.class, typeProducer.getClass());
assertEquals(2, map.size()); assertEquals(new ArrayList<>(Arrays.asList("e", "f")), map.remove("KEY2")); assertEquals(1, map.size()); assertTrue(map.containsKey("key1")); assertFalse(map.containsKey("kEy2"));
assertEquals(newArrayList(allMatchesResponseFilter, embeddedResponseFilter), applicationProviders.getResponseFilters("/a"));
assertEquals("\\"test\\"", entityTagHeaderDelegate.toString(entityTag));
assertTrue(String.format("Dates are not equal, %s and %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertTrue(jsonValue.isObject());
assertNull(response.getHeaderString("foo"));
assertEquals(expected, result);
assertArrayEquals(TEST_CONTENT.getBytes("UTF-8"), out.toByteArray());
assertEquals("BASIC_AUTH", containerRequest.getAuthenticationScheme());
assertNotNull(mediaTypeWithBoundary); assertEquals("1234567", boundary);
assertSame(mediaType, response.getMediaType());
assertEquals(expectedResult, locale);
assertTrue(String.format("Dates are not equal. Expected %s, actual %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertNotNull(runtimeDelegate.createHeaderDelegate(URI.class));
assertTrue("Expected to have configured error page for org.test.SomeException", errorPages.hasErrorPage("org.test.SomeException"));
assertNull(acceptableMediaType);
assertTrue(String.format("Expected instance of OptionsRequestMethodInvoker but actual is %s", methodInvoker), methodInvoker instanceof OptionsRequestMethodInvoker);
assertEquals(expectedResult, HeaderHelper.removeQuoteEscapes(string));
assertEquals(normalizedUri, UriComponent.normalize(URI.create(originUri)).toString());
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertTrue(stringEntityProvider.isReadable(String.class, null, null, null));
assertEquals(expectedResult, AcceptToken.valueOf(header));
assertEquals(new EntityTag("bar"), response.getEntityTag());
assertEquals("text/plain", servletContainerRequest.getRequestHeaders().getFirst("content-type")); assertEquals("100", servletContainerRequest.getRequestHeaders().getFirst("content-length"));
assertEquals(1, inputItems.size()); assertEquals(fileItem.getFieldName(), inputItems.get(fileItem.getFieldName()).getName());
assertTrue(fileEntityProvider.isReadable(File.class, null, null, null));
assertEquals("BASIC_AUTH", servletContainerRequest.getAuthenticationScheme()); assertEquals("andrew", servletContainerRequest.getUserPrincipal().getName()); assertFalse(servletContainerRequest.isSecure()); assertTrue(servletContainerRequest.isUserInRole("user"));
assertTrue(json.isNull());
assertEquals(555, asynchronousJobPool.getMaxQueueSize());
assertEquals("bar", result);
assertArrayEquals(new Object[]{createJunitBook(), createCSharpBook()}, (Object[])array);
assertTrue(multivaluedMapEntityProvider.isWriteable(MultivaluedMap.class, null, null, null));
assertSame(uriInfo, contextParameterResolver.resolve(parameter, applicationContext));
assertFalse(formDataEntityProvider.isWriteable(type, genericType, new Annotation[0], null));
assertSame(stringMessageBodyWriter, applicationProviders.getMessageBodyWriter(String.class, null, null, TEXT_PLAIN_TYPE));
assertEquals(expected, result);
assertEquals(expectedJsonString, JsonUtils.getJsonString(sourceString));
assertEquals(METHOD_NOT_ALLOWED, argumentCaptor.getValue().getStatusInfo()); assertEquals("GET", allowHeader);
assertTrue(String.format("Only \\"init\\" and \\"nonPublicInit\\" methods are expected to be invoked but %s were invoked", callAssertion), callAssertion.size() == 2 && callAssertion.containsAll(newArrayList("init", "nonPublicInit")));
assertSame(stringMessageBodyWriter, applicationProviders.getMessageBodyWriter(String.class, null, null, TEXT_PLAIN_TYPE));
assertEquals(language, acceptLanguage.getPrimaryTag()); assertEquals(country, acceptLanguage.getSubTag()); assertEquals(qValue, acceptLanguage.getQvalue(), 0.0F);
assertTrue(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, genericType, new Annotation[0], null));
assertTrue(caselessString.equals(new CaselessStringWrapper(string.toUpperCase())));
assertTrue(result instanceof ByteArrayDataSource); assertArrayEquals(testContent, bytes); assertEquals(TEXT_PLAIN, result.getContentType());
assertTrue(everrestApplication.getSingletons().isEmpty());
assertNotNull(runtimeDelegate.createHeaderDelegate(String.class));
assertNull(instance);
assertEquals("W/\\"test\\"", entityTagHeaderDelegate.toString(entityTag));
assertTrue(jsonValue.isString()); assertEquals("to be or not to be", jsonValue.getStringValue());
assertFalse(writer.isWriteable(String.class, genericType, null, null));
assertTrue(jsonEntityProvider.isReadable(Object.class, null, null, null));
assertEquals(indexOfFirstInvalidChar, HeaderHelper.isToken(checkIsToken));
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertSame(principal, containerRequest.getUserPrincipal());
assertEquals(expectedResult, header);
assertEquals(StringValueOfProducer.class, typeProducer.getClass());
assertFalse(byteEntityProvider.isReadable(String.class, null, null, null));
assertEquals("default", resolvedHeader);
assertFalse(dataSourceEntityProvider.isReadable(String.class, null, null, null));
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertEquals(string, caselessString.getString());
assertTrue(String.format("Dates are not equal, %s and %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertSame(xsltTemplatesContextResolver, contextResolver);
assertEquals(expected, result);
assertEquals("text/xml", acceptMediaType.toString());
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals(exception.toString(), argumentCaptor.getValue().getEntity());
assertTrue(jsonValue.isBoolean()); assertTrue(jsonValue.getBooleanValue());
assertTrue(reader.isReadable(Book.class, null, null, null));
assertTrue(outputAsString.contains("\\"author\\":\\"Vincent Massol\\"")); assertTrue(outputAsString.contains("\\"title\\":\\"JUnit in Action\\"")); assertTrue(outputAsString.contains("\\"pages\\":386")); assertTrue(outputAsString.contains("\\"price\\":19.37")); assertTrue(outputAsString.contains("\\"isdn\\":93011099534534"));
assertEquals(new MediaType("text", "plain"), containerRequest.getMediaType());
assertNull(environmentContextAfterCall);
assertEquals("foo", instance);
assertNotNull(runtimeDelegate.createHeaderDelegate(Date.class));
assertArrayEquals(testContent, out.toByteArray());
assertFalse(formDataEntityProvider.isReadable(type, null, new Annotation[0], null));
assertSame(expectedContextResolverClassOrInstance, contextResolver); assertNull(contextResolver); assertNotNull(contextResolver); assertEquals(expectedContextResolverClassOrInstance, contextResolver.getClass());
assertEquals(new Integer("2147483647"), result);
assertEquals("a", map.getFirst("k")); assertEquals(Arrays.asList("a", "b"), map.get("k")); assertEquals("c", map.getFirst("E")); assertEquals(Arrays.asList("d", "e"), map.get("Y"));
assertTrue(jsonEntityProvider.isWriteable(Object.class, null, null, null));
assertTrue(jsonValue.isNull());
assertFalse(stringEntityProvider.isWriteable(Object.class, null, null, null));
assertEquals(newArrayList(TEXT_HTML_TYPE, TEXT_PLAIN_TYPE), providerDescriptor.produces());
assertEquals(expectedEncodingList, encodingList);
assertEquals("Vincent Massol", result.getAuthor()); assertEquals("JUnit in Action", result.getTitle()); assertEquals(386, result.getPages()); assertEquals(19.37, result.getPrice(), 0.01); assertEquals(93011099534534L, result.getIsdn());
assertEquals(1, instance.destroyVisitsCounter.get());
assertEquals(newArrayList(new AcceptToken("*")), charsetList);
assertEquals(TEST_CONTENT, result);
assertEquals(expected, result);
assertEquals("<foo>", HeaderHelper.getHeaderAsString("foo"));
assertEquals(isDouble, jsonValue.isDouble()); assertEquals(number, jsonValue.getNumberValue());
assertSame(locale, response.getLanguage());
assertSame(entityTag, response.getEntityTag());
assertEquals(expectedResult, acceptLanguage.isCompatible(checkAcceptLanguage));
assertNull(result);
assertEquals(newArrayList(new Range(-100, -1)), ranges.getRanges());
assertEquals(requestUri, containerRequest.getRequestUri());
assertSame(exceptionMapper, applicationProviders.getExceptionMapper(RuntimeException.class));
assertEquals(newArrayList(TEXT_PLAIN_TYPE, TEXT_XML_TYPE), providerDescriptor.consumes());
assertSame(response, applicationContext.getContainerResponse());
assertEquals(expectedCookies, response.getCookies());
assertEquals(matrixParameters.getFirst("foo"), resolvedMatrixParameter);
assertNotNull(cookieHeaders); assertTrue(cookieHeaders.isEmpty());
assertTrue(jsonValue.isArray());
assertEquals(newHashSet(), response.getAllowedMethods());
assertNull(containerRequest.evaluatePreconditions(now));
assertEquals("visible", jsonValue.getElement("field").getStringValue()); assertNull(jsonValue.getElement("jsonTransientField"));
assertEquals(scannedClasses, application.getClasses());
assertTrue(jsonValue.isNull());
assertEquals("name1", inputItem.getName());
assertSame(decodedMap, multivaluedMap);
assertEquals(URI.create(expected), uri);
assertSame(entityTag, response.getDate());
assertFalse(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, genericType, new Annotation[0], null));
assertEquals(newHashMap(), response.getCookies());
assertNull(containerRequest.evaluatePreconditions(now));
assertTrue(streamSourceEntityProvider.isReadable(StreamSource.class, null, null, APPLICATION_XML_TYPE));
assertTrue(Tracer.isTracingEnabled());
assertEquals(new MediaType("text", "plain", ImmutableMap.of("charset", "utf-8")), response.getMediaType());
assertEquals(200, argumentCaptor.getValue().getStatus()); assertEquals("foo", argumentCaptor.getValue().getEntity());
assertTrue(inputStreamEntityProvider.isWriteable(InputStream.class, null, null, null));
assertEquals(NOT_ACCEPTABLE, argumentCaptor.getValue().getStatusInfo());
assertSame(application, contextParameterResolver.resolve(parameter, applicationContext));
assertArrayEquals(testContent, out.toByteArray()); assertEquals(TEXT_PLAIN, headers.getFirst(CONTENT_TYPE));
assertTrue(saxSourceEntityProvider.isReadable(SAXSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(newArrayList("foo=bar"), cookieHeaders);
assertFalse(domSourceEntityProvider.isReadable(SAXSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(locale, acceptLanguage.getLocale());
assertTrue(jsonValue.isNull());
assertFalse(inputStreamEntityProvider.isReadable(String.class, null, null, null));
assertEquals(CollectionStringValueOfProducer.class, typeProducer.getClass());
assertSame(acceptMediaType, AcceptMediaType.valueOf("text/xml"));
assertTrue(multivaluedMapEntityProvider.isReadable(MultivaluedMap.class, multiValuedMapGenericType, null, null));
assertEquals("{\\"author\\":\\"Vincent Massol\\",\\"title\\":\\"JUnit in Action\\",\\"pages\\":386,\\"price\\":19.37,\\"isdn\\":93011099534534}", out.toString());
assertEquals(UNSUPPORTED_MEDIA_TYPE, argumentCaptor.getValue().getStatusInfo());
assertEquals(SomeApplication.class, application.getClass()); assertTrue("Must ignore scan \'org.everrest.scan.components\' parameter if FQN of Application class configured in ServletContext", application.getClasses() == null || application.getClasses().isEmpty());
assertEquals(expectedParsedParameters, headerParameterParser.parse(header));
assertEquals(null, invocationResult);
assertEquals(expectedCookies, cookies);
assertSame(request, contextParameterResolver.resolve(parameter, applicationContext));
assertEquals("default", resolvedHeader);
assertFalse(saxSourceEntityProvider.isWriteable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(1, resource.getResourceMethods().get("GET").size()); assertEquals(1, resource.getResourceMethods().get("POST").size());
assertTrue(byteEntityProvider.isReadable(byte[].class, null, null, null));
assertFalse(multivaluedMapEntityProvider.isReadable(Object.class, null, null, null));
assertNotNull(applicationContext.getAttributes());
assertNull(result);
assertEquals(0, statusInfo.getStatusCode()); assertEquals(OTHER, statusInfo.getFamily()); assertEquals("Unknown", statusInfo.getReasonPhrase());
assertEquals(101, containerRequest.getLength());
assertEquals(expectedResult, language.toString());
assertTrue(writer.isWriteable(Book.class, null, null, null));
assertTrue(readerEntityProvider.isWriteable(Reader.class, null, null, null));
assertTrue(checkHexCharacters(str, 0)); assertFalse(checkHexCharacters(str, 1)); assertTrue(checkHexCharacters(str, 3)); assertTrue(checkHexCharacters(str, 6)); assertFalse(checkHexCharacters(str, 9)); assertFalse(checkHexCharacters(str, 11));
assertTrue(jsonValue.isObject());
assertFalse(entityTag.isWeak()); assertEquals("test \\"test\\"", entityTag.getValue());
assertEquals(expectedResult, acceptMediaType.isCompatible(checkAcceptMediaType));
assertNull(containerRequest.evaluatePreconditions(new Date(), new EntityTag("1234567")));
assertEquals(1, map.size()); assertEquals("value", map.getFirst("key1")); assertEquals(1, map.get("KEY1").size());
assertNotNull(resources);
assertTrue(jsonValue.isString()); assertEquals("to be or not to be", jsonValue.getStringValue());
assertFalse(jsonEntityProvider.isWriteable(aClass, null, null, null));
assertTrue(fileEntityProvider.isWriteable(File.class, null, null, null));
assertEquals(NOT_ACCEPTABLE, argumentCaptor.getValue().getStatusInfo());
assertArrayEquals(testContent, ByteStreams.toByteArray(result));
assertFalse(stringEntityProvider.isReadable(Object.class, null, null, null));
assertEquals(newArrayList(new Range(100, -1)), ranges.getRanges());
assertEquals(newArrayList(new AcceptLanguage(new Locale("*"))), acceptedLanguageList);
assertEquals("bar", result);
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertFalse(writer.isWriteable(String.class, null, null, null));
assertEquals(expectedResult, headerDelegate.toString(acceptLanguage));
assertEquals(1, map.size()); assertEquals(list, map.get("key1"));
assertEquals(newHashSet(), response.getLinks());
assertEquals("private=\\"aaa\\", no-cache=\\"bbb\\", no-store, no-transform, must-revalidate, proxy-revalidate, 60, 60, foo=bar", cacheControlHeaderDelegate.toString(cacheControl));
assertSame(contextResolver, applicationProviders.getContextResolver(String.class, TEXT_PLAIN_TYPE));
assertEquals(newHashSet("GET", "PUT", "POST"), response.getAllowedMethods());
assertEquals(500, response.getStatus()); assertEquals(TEXT_PLAIN_TYPE, response.getMediaType()); assertEquals(exception.getMessage(), response.getEntity());
assertEquals(newArrayList("first", "second", "third", "fourth", "fifth", "last"), methodNames);
assertEquals("Vincent Massol", result.getElement("author").getStringValue()); assertEquals("JUnit in Action", result.getElement("title").getStringValue()); assertEquals(386, result.getElement("pages").getIntValue()); assertEquals(19.37, result.getElement("price").getNumberValue()); assertEquals(93011099534534L, result.getElement("isdn").getLongValue());
assertArrayEquals(testContent, out.toByteArray());
assertFalse(saxSourceEntityProvider.isReadable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(expected, result); assertEquals(expected, result);
assertTrue(bufferedStream instanceof FileInputStream); assertArrayEquals(testContent, ByteStreams.toByteArray(bufferedStream));
assertNull(result);
assertEquals("foo", instance);
assertArrayEquals(testContent, result);
assertEquals(BeanWithClassField.class.getName(), jsonValue.getElement("klass").getStringValue());
assertTrue(String.format("Dates are not equal, %s and %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertEquals(3, response.getLength());
assertEquals(ARGUMENT_VALUE, invocationResult);
assertTrue(bufferedStream instanceof ByteArrayInputStream); assertArrayEquals(testContent, ByteStreams.toByteArray(bufferedStream));
assertEquals("header parameter", instance.headerParam);
assertTrue(jsonValue.isObject());
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertEquals("hello", resolvedObject);
assertEquals("foo=bar;Version=1;Comment=comment;Domain=andrew.com;Path=/aaa;Max-Age=300;Expires=Fri, 08 Jan 2010 00:05:00 GMT;Secure;HttpOnly", newCookieHeaderDelegate.toString(cookie));
assertSame(ranges, Ranges.valueOf("bytes=49-100,150-250"));
assertEquals("/async/bla/bla", asynchronousJobPool.getAsynchronousServicePath());
assertNull(cookie);
assertEquals(expectedResult, result);
assertEquals(200, response.getStatus()); assertEquals(new MediaType("application", "vnd.sun.wadl+xml"), response.getMediaType()); assertSame(wadlDoc, response.getEntity());
assertTrue(jsonValue.isBoolean()); assertTrue(jsonValue.getBooleanValue());
assertArrayEquals(new String[][]{{"to", "be", "or"}, {"not", "to", "be"}}, (Object[][])array);
assertEquals(URI.create(expected), uri);
assertTrue(dataSourceEntityProvider.isReadable(DataSource.class, null, null, null));
assertNotNull(runtimeDelegate.createHeaderDelegate(Ranges.class));
assertNull(resolvedCookie);
assertEquals(NOT_MODIFIED, response.getStatusInfo());
assertTrue(jsonValue.isString()); assertEquals("0xzzz", jsonValue.getStringValue());
assertEquals(newHashSet("transientField", "jsonTransientField"), transientFields);
assertTrue(jsonArray.isArray());
assertEquals("Java and XML Data Binding", book.getTitle()); assertTrue(book.isSendByPost()); assertEquals("Brett McLaughlin", book.getAuthor()); assertEquals("USD", book.getPrice().getCurrency()); assertEquals(new BigDecimal("34.95"), book.getPrice().getValue()); assertEquals("USD", book.getMemberPrice().getCurrency()); assertEquals(new BigDecimal("26.56"), book.getMemberPrice().getValue());
assertEquals("default", resolvedHeader);
assertEquals("$Version=1;foo=bar;$Domain=andrew.com;$Path=/aaa", cookieHeaderDelegate.toString(cookie));
assertTrue(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, genericType, new Annotation[0], null));
assertTrue(byteEntityProvider.isWriteable(byte[].class, null, null, null));
assertTrue(jsonValue.isObject());
assertEquals(OK, argumentCaptor.getValue().getStatusInfo()); assertEquals("foo", argumentCaptor.getValue().getEntity());
assertNull(containerRequest.evaluatePreconditions(now));
assertEquals(METHOD_NOT_ALLOWED, argumentCaptor.getValue().getStatusInfo()); assertEquals("POST,OPTIONS", allowHeader);
assertSame(stringMessageBodyReader, applicationProviders.getMessageBodyReader(String.class, null, null, TEXT_PLAIN_TYPE));
assertEquals(expectedAcceptMediaTypeList, acceptMediaTypeList);
assertEquals("content", inputItem.getBodyAsString());
assertEquals(URI.create(expected), uri);
assertEquals("Fri, 08 Jan 2010 00:05:00 GMT", dateHeaderDelegate.toString(date));
assertNull(resolvedMatrixParameter);
assertEquals(decodedMap, multivaluedMap);
assertEquals(NOT_FOUND, argumentCaptor.getValue().getStatusInfo());
assertEquals(NO_CONTENT, argumentCaptor.getValue().getStatusInfo());
assertTrue(jsonValue.isObject());
assertEquals(URI.create(expected), uri);
assertNotNull(runtimeDelegate.createHeaderDelegate(Cookie.class));
assertEquals(expectedType, JsonUtils.getType(aClass));
assertEquals(3, response.getLength());
assertEquals(3, lines.size()); assertTrue(String.format("String \'%s\' is not matched to pattern", line), matcher.matches()); assertEquals(expectedProcessesTable, processesTable);
assertSame(stringContextResolver, applicationProviders.getContextResolver(String.class, TEXT_PLAIN_TYPE));
assertEquals(CollectionStringConstructorProducer.class, typeProducer.getClass());
assertNotNull(runtimeDelegate.createHeaderDelegate(NewCookie.class));
assertSame(request, applicationContext.getContainerRequest());
assertSame(securityContext, contextParameterResolver.resolve(parameter, applicationContext));
assertTrue(String.format("MethodInvoker filters %s expected but not found", expectedMethodInvokerFilterClassesOrInstances), expectedMethodInvokerFilterClassesOrInstances.isEmpty()); assertTrue(String.format("MethodInvoker filters %s expected but not found", expectedMethodInvokerFilterClassesOrInstances), expectedMethodInvokerFilterClassesOrInstances.isEmpty());
assertTrue(listMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertEquals(0, map.size()); assertNotNull(list); assertEquals(0, list.size()); assertEquals(1, map.size());
assertEquals("en-us", acceptLanguage.toString());
assertEquals(newArrayList(allMatchesMethodInvokerFilter, embeddedMethodInvokerFilter), applicationProviders.getMethodInvokerFilters("/a"));
assertTrue(writer.isWriteable(JAXBElement.class, null, null, null));
assertTrue(String.format("Response filters %s expected but not found", expectedResponseFilterClassesOrInstances), expectedResponseFilterClassesOrInstances.isEmpty()); assertTrue(String.format("Response filters %s expected but not found", expectedResponseFilterClassesOrInstances), expectedResponseFilterClassesOrInstances.isEmpty());
assertEquals(1, instance.initVisitsCounter.get());
assertEquals("foo", instance);
assertEquals(baseUri, containerRequest.getBaseUri());
assertEquals("baz", result);
assertNull(xsltTemplatesContextResolver.getTemplates("unavailable"));
assertEquals(3, map.size()); assertEquals(3, keys.size()); assertTrue(keys.contains("K")); assertTrue(keys.contains("Y")); assertTrue(keys.contains("e")); assertTrue(keys.remove("Y")); assertEquals(2, map.size()); assertEquals(2, keys.size()); assertTrue(keys.contains("K")); assertTrue(keys.contains("e")); assertFalse(keys.contains("Y")); assertEquals(0, map.size()); assertEquals(0, keys.size());
assertEquals(CollectionStringValueOfProducer.class, typeProducer.getClass());
assertNull(containerRequest.evaluatePreconditions(now));
assertEquals(CollectionStringProducer.class, typeProducer.getClass());
assertNull(array);
assertSame(expectedMessageBodyWriterClassOrInstance, messageBodyWriter); assertNull(messageBodyWriter); assertNotNull(messageBodyWriter); assertEquals(expectedMessageBodyWriterClassOrInstance, messageBodyWriter.getClass());
assertEquals(queryParameters.getFirst("foo"), resolvedHeader);
assertEquals("default_cookie", resolvedCookie.getName()); assertEquals("xxx", resolvedCookie.getValue());
assertTrue(domSourceEntityProvider.isReadable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(NOT_ACCEPTABLE, argumentCaptor.getValue().getStatusInfo());
assertNull(containerRequest.evaluatePreconditions(new EntityTag("1234567")));
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals("response from exception mapper", argumentCaptor.getValue().getEntity());
assertEquals(expectedType, JsonUtils.getType(instance));
assertFalse(listMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertTrue("Expected to have configured error page for status 400", errorPages.hasErrorPage(400));
assertSame(in, inputItem.getBody());
assertFalse(Tracer.isTracingEnabled());
assertEquals(500, response.getStatus()); assertEquals(TEXT_PLAIN_TYPE, response.getMediaType()); assertEquals(exception.getClass().getName(), response.getEntity());
assertEquals(expectedResult, HeaderHelper.addQuotesIfHasWhitespace(string));
assertTrue(entityTag.isWeak()); assertEquals("test", entityTag.getValue());
assertEquals(expectedResult, newArrayList(iterator));
assertArrayEquals("hello world".getBytes(), output.getData());
assertFalse(fileEntityProvider.isWriteable(String.class, null, null, null));
assertFalse(fileEntityProvider.isReadable(String.class, null, null, null));
assertEquals(1, map.size()); assertEquals("a", map.getFirst("key1")); assertEquals(1, map.get("KEY1").size());
assertTrue(containerRequest.isUserInRole("admin"));
assertEquals(expectedResult, HeaderHelper.removeWhitespaces(string));
assertTrue(dataSourceEntityProvider.isWriteable(DataSource.class, null, null, null));
assertEquals(StringProducer.class, typeProducer.getClass());
assertTrue(String.format("Request filters %s expected but not found", expectedRequestFilterClassesOrInstances), expectedRequestFilterClassesOrInstances.isEmpty()); assertTrue(String.format("Request filters %s expected but not found", expectedRequestFilterClassesOrInstances), expectedRequestFilterClassesOrInstances.isEmpty());
assertNull(array);
assertTrue(formDataEntityProvider.isReadable(type, genericType, new Annotation[0], null));
assertFalse(streamSourceEntityProvider.isWriteable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertFalse(streamOutputEntityProvider.isWriteable(Object.class, null, null, null));
assertEquals(newArrayList(allMatchesRequestFilter, embeddedRequestFilter), applicationProviders.getRequestFilters("/a"));
assertEquals(new Cookie("foo", "bar"), cookie);
assertSame(providerBinder, ProviderBinder.getInstance());
assertSame(applicationContext, applicationContext.getUriInfo());
assertFalse(inputStreamEntityProvider.isWriteable(String.class, null, null, null));
assertEquals("to%20be%23or%20not%20to%20be", recognizeEncode(str, PATH_SEGMENT, false));
assertNotNull(parameterResolver); assertEquals(expectedClassOfParameterResolver, parameterResolver.getClass());
assertTrue(stringEntityProvider.isWriteable(String.class, null, null, null));
assertSame(servletRequest, contextParameterResolver.resolve(parameter, applicationContext));
assertEquals(expectedResult, MediaTypeHelper.createConsumesList(consumes));
assertEquals(TEXT_PLAIN_TYPE, inputItem.getMediaType());
assertTrue(outputAsString.startsWith("[")); assertTrue(outputAsString.endsWith("]")); assertTrue(outputAsString.contains("\\"author\\":\\"Vincent Massol\\"")); assertTrue(outputAsString.contains("\\"title\\":\\"JUnit in Action\\"")); assertTrue(outputAsString.contains("\\"pages\\":386")); assertTrue(outputAsString.contains("\\"price\\":19.37")); assertTrue(outputAsString.contains("\\"isdn\\":93011099534534"));
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals("Some Error", argumentCaptor.getValue().getEntity());
assertTrue(processListWriter.isWriteable(List.class, newParameterizedType(List.class, AsynchronousProcess.class), new Annotation[0], MediaType.TEXT_PLAIN_TYPE));
assertEquals(expectedResult, header);
assertEquals(new HashSet<>(Arrays.asList("user", "admin")), webApplicationDeclaredRoles.getDeclaredRoles());
assertSame(initialProperties, contextParameterResolver.resolve(parameter, applicationContext));
assertEquals(null, invocationResult);
assertEquals(new Locale("en", "gb"), containerRequest.getLanguage());
assertEquals(newArrayList(new Range(49, 100)), ranges.getRanges());
assertFalse(entityTag.isWeak()); assertEquals("test", entityTag.getValue());
assertTrue(mapMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertEquals(expectedResult, acceptToken.isCompatible(checkAcceptToken));
assertEquals(UNSUPPORTED_MEDIA_TYPE, argumentCaptor.getValue().getStatusInfo());
assertSame(instance, result);
assertFalse(streamSourceEntityProvider.isReadable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertNull(inputItem.getMediaType());
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertEquals("<foo>", HeaderHelper.getHeaderAsString(someObject));
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals("Error message", argumentCaptor.getValue().getEntity());
assertEquals(dateFormat.format(date), dateFormat.format(response.getLastModified()));
assertEquals(CollectionStringValueOfProducer.class, typeProducer.getClass());
assertTrue(jsonValue.isString()); assertEquals("0zzz", jsonValue.getStringValue());
assertEquals(1, fileItemList.size()); assertEquals("text", fileItemList.get(0).getFieldName()); assertEquals("test.txt", fileItemList.get(0).getName()); assertEquals("text/plain", fileItemList.get(0).getContentType()); assertEquals("hello", fileItemList.get(0).getString());
assertTrue(result.exists()); assertArrayEquals(testContent, bytes);
assertEquals(1, inputItems.size()); assertEquals(fileItem.getFieldName(), inputItems.get(0).getName());
assertArrayEquals(TEST_CONTENT.getBytes("UTF-8"), out.toByteArray());
assertEquals(expectedAcceptMediaTypes, acceptableMediaTypes);
assertEquals(TEST_CONTENT, CharStreams.toString(result));
assertSame(methodResponse, argumentCaptor.getValue());
assertTrue(outputAsString.startsWith("{\\"1\\":{")); assertTrue(outputAsString.endsWith("}")); assertTrue(outputAsString.contains("\\"author\\":\\"Vincent Massol\\"")); assertTrue(outputAsString.contains("\\"title\\":\\"JUnit in Action\\"")); assertTrue(outputAsString.contains("\\"pages\\":386")); assertTrue(outputAsString.contains("\\"price\\":19.37")); assertTrue(outputAsString.contains("\\"isdn\\":93011099534534"));
assertEquals(expectedQualityValueList, qualitySortedList);
assertSame(jaxbContextResolver, contextResolver);
assertEquals(expectedResult, HeaderHelper.parseQualityValue(qValueString), 0.0f);
assertTrue(String.format("Only \\"destroy\\" and \\"nonPublicDestroy\\" methods are expected to be invoked but %s were invoked", callAssertion), callAssertion.size() == 2 && callAssertion.containsAll(newArrayList("destroy", "nonPublicDestroy")));
assertEquals(new MediaType("text", "plain"), acceptableMediaType);
assertSame(instance, result);
assertArrayEquals(streamingOutputContent, out.toByteArray());
assertTrue(domSourceEntityProvider.isWriteable(DOMSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals("Java and XML Data Binding", book.getTitle()); assertTrue(book.isSendByPost()); assertEquals("Brett McLaughlin", book.getAuthor()); assertEquals("USD", book.getPrice().getCurrency()); assertEquals(new BigDecimal("34.95"), book.getPrice().getValue()); assertEquals("USD", book.getMemberPrice().getCurrency()); assertEquals(new BigDecimal("26.56"), book.getMemberPrice().getValue());
assertTrue(streamSourceEntityProvider.isWriteable(StreamSource.class, null, null, APPLICATION_XML_TYPE));
assertNull(instance);
assertFalse(domSourceEntityProvider.isWriteable(SAXSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(OK, argumentCaptor.getValue().getStatusInfo()); assertEquals("foo", argumentCaptor.getValue().getEntity());
assertEquals(newArrayList("/b/c/d", "/b/c/z", "/b/c", "/b/{c}", "/b"), resourceLocators.keySet().stream().map(UriPattern::getTemplate).collect(toList()));
assertEquals(2, map.size()); assertTrue(map.containsKey("KEY1")); assertTrue(map.containsKey("key2"));
assertSame(stringMessageBodyReader, applicationProviders.getMessageBodyReader(String.class, null, null, TEXT_PLAIN_TYPE));
assertEquals(bodyAsList, inputItem.getBody(type, genericType));
assertEquals(1, resourceMethods.get(0).getAnnotations().length); assertNotNull(rolesAllowed);
assertEquals(encoded, encode(str, HOST, false));
assertTrue(json.isObject());
assertArrayEquals(new String[]{"to", "be", "or", "not", "to", "be"}, (Object[])array);
assertEquals(PrimitiveTypeProducer.class, typeProducer.getClass());
assertNull(applicationContextAfterCall);
assertArrayEquals(TEST_CONTENT.getBytes("windows-1251"), out.toByteArray());
assertEquals(URI.create(expected), uri);
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertFalse(mapMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertFalse(mapMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertEquals("to%20be%2523or%20not%20to%2520be", encode(str, PATH_SEGMENT, false));
assertTrue(jsonArray.isArray());
assertEquals(expectedResult, language.isCompatible(checkLanguage));
assertNotNull(runtimeDelegate.createHeaderDelegate(AcceptMediaType.class));
assertArrayEquals(TEST_CONTENT.getBytes("windows-1251"), out.toByteArray());
assertTrue(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, genericType, new Annotation[0], null));
assertFalse(dataSourceEntityProvider.isWriteable(String.class, null, null, null));
assertEquals(newArrayList(new Locale("en", "GB"), new Locale("en")), containerRequest.getAcceptableLanguages());
assertTrue(jsonArray.isArray());
assertEquals(expectedContent, bOut.toString());
assertEquals("Fri, 08 Jan 2010 00:05:00 GMT", HeaderHelper.formatDate(date));
assertFalse(reader.isReadable(String.class, null, null, null));
assertSame(expectedExceptionMapperClassOrInstance, exceptionMapper); assertNotNull(exceptionMapper); assertEquals(expectedExceptionMapperClassOrInstance, exceptionMapper.getClass());
assertEquals("\\"test \\\\\\"test\\\\\\"\\"", entityTagHeaderDelegate.toString(entityTag));
assertTrue(saxSourceEntityProvider.isWriteable(SAXSource.class, null, null, APPLICATION_XML_TYPE));
assertEquals(TEST_CONTENT, result);
assertTrue(jsonValue.isString()); assertEquals("123x", jsonValue.getStringValue());
assertNotNull(templates);
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals("Error message", argumentCaptor.getValue().getEntity());
assertEquals(StringConstructorProducer.class, typeProducer.getClass());
assertFalse(listMultipartFormDataMessageBodyReader.isReadable(type, null, new Annotation[0], null));
assertFalse(listMultipartFormDataMessageBodyReader.isReadable(type, genericType, new Annotation[0], null));
assertEquals("foo", instance);
assertNull(containerRequest.evaluatePreconditions());
assertEquals(caselessString.hashCode(), new CaselessStringWrapper(string.toUpperCase()).hashCode());
assertEquals("visible", jsonValue.getElement("field").getStringValue()); assertNull(jsonValue.getElement("transientField"));
assertEquals(expectedCookies, response.getCookies());
assertEquals(expectedResult, mediaType);
assertEquals(newArrayList(TEXT_HTML_TYPE, TEXT_PLAIN_TYPE), providerDescriptor.produces());
assertEquals(-1, response.getLength());
assertEquals("to be or not to be", stringHeaderDelegate.fromString("to be or not to be"));
assertSame(cookie1, resolvedCookie);
assertEquals(123, asynchronousJobPool.getMaxCacheSize());
assertEquals(PRECONDITION_FAILED, response.getStatusInfo());
assertTrue(String.format("Dates are not equal, %s and %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertNotNull(runtimeDelegate.createHeaderDelegate(EntityTag.class));
assertNotNull(runtimeDelegate.createHeaderDelegate(CacheControl.class));
assertEquals("default value", resolvedMatrixParameter);
assertNotNull(providers);
assertEquals(expectedAcceptedLanguageList, acceptedLanguageList);
assertEquals(expectedResult, UriComponent.resolve(baseUri, resolvingUri));
assertEquals(1, lifecycleComponents.size()); assertSame(instance, lifecycleComponents.get(0).getComponent());
assertEquals(newHashSet("transientField", "jsonTransientField"), transientFields);
assertEquals(expectedNewCookie, parsedNewCookie);
assertEquals(1, fieldInjectors.size()); assertEquals(String.class, fieldInjector.getParameterClass()); assertEquals(String.class, fieldInjector.getGenericType()); assertEquals("default", fieldInjector.getDefaultValue()); assertEquals(PathParam.class, fieldInjector.getAnnotation().annotationType()); assertEquals("b", ((PathParam)fieldInjector.getAnnotation()).value()); assertTrue(fieldInjector.isEncoded());
assertEquals(Arrays.asList("a", "b"), map.getList("k")); assertNotNull(list); assertEquals(0, list.size());
assertEquals(OK, response.getStatusInfo());
assertEquals(expectedCharsetList, charsetList);
assertEquals("path parameter", instance.pathParam);
assertSame(acceptLanguage, AcceptLanguage.valueOf("en-us"));
assertTrue(everrestApplication.getClasses().isEmpty());
assertEquals(newArrayList(new AcceptToken("*")), charsetList);
assertSame(httpHeaders, contextParameterResolver.resolve(parameter, applicationContext));
assertEquals(SomeApplication.class, application.getClass());
assertEquals(cookie1.getValue(), resolvedValue);
assertEquals(expectedQualityValueList, qualitySortedList);
assertNull(containerRequest.evaluatePreconditions(new Date(), new EntityTag("1234567")));
assertFalse(reader.isReadable(JAXBElement.class, null, null, null));
assertEquals("to be or not to be", stringHeaderDelegate.toString("to be or not to be"));
assertEquals(type, acceptMediaType.getType()); assertEquals(subType, acceptMediaType.getSubtype()); assertEquals(parameters, acceptMediaType.getParameters()); assertEquals(qValue, acceptMediaType.getQvalue(), 0.0F);
assertEquals(ACCEPTED, argumentCaptor.getValue().getStatusInfo());
assertFalse(streamOutputEntityProvider.isReadable(StreamingOutput.class, null, null, null));
assertEquals("default value", resolvedHeader);
assertEquals(new Integer("2147483647"), result);
assertEquals(newArrayList(new Range(49, 100), new Range(150, 250)), ranges.getRanges());
assertTrue(reader.isReadable(JAXBElement.class, genericType, null, null));
assertEquals(METHOD_NOT_ALLOWED, argumentCaptor.getValue().getStatusInfo()); assertEquals("GET", allowHeader);
assertEquals(CollectionStringConstructorProducer.class, typeProducer.getClass());
assertEquals(pathParameters.getFirst("foo"), resolvedHeader);
assertEquals(new Integer("-777"), result);
assertFalse(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, null, new Annotation[0], null));
assertEquals(newArrayList(new AcceptLanguage(new Locale("*"))), acceptedLanguageList);
assertEquals(expectedAcceptMediaTypeList, acceptMediaTypeList);
assertEquals("Java and XML Data Binding", book.getTitle()); assertTrue(book.isSendByPost()); assertEquals("Brett McLaughlin", book.getAuthor()); assertEquals("USD", book.getPrice().getCurrency()); assertEquals(new BigDecimal("34.95"), book.getPrice().getValue()); assertEquals("USD", book.getMemberPrice().getCurrency()); assertEquals(new BigDecimal("26.56"), book.getMemberPrice().getValue());
assertTrue(inputItem.getHeaders().isEmpty());
assertEquals(headers.getFirst("foo"), resolvedHeader);
assertTrue(containerRequest.isSecure());
assertEquals(initParams, configuration.getAllProperties());
assertTrue(streamOutputEntityProvider.isWriteable(StreamingOutput.class, null, null, null));
assertEquals(decodedForm.getFirst("foo"), resolved);
assertEquals(expectedResult, headerDelegate.toString(acceptMediaType));
assertEquals(expectedResult, MediaTypeHelper.createProducesList(produces));
assertNull(containerRequest.evaluatePreconditions(new EntityTag("7654321")));
assertEquals(new Integer("2147483647"), result);
assertTrue(inputStreamEntityProvider.isReadable(InputStream.class, null, null, null));
assertEquals(newArrayList(new MediaType("text", "plain"), new MediaType("text", "*"), new MediaType("text", "xml"), new MediaType("application", "xml")), applicationProviders.getAcceptableWriterMediaTypes(String.class, null, null));
assertTrue(String.format("Dates are not equal. Expected %s, actual %s", expectedDate, date), Math.abs(expectedDate.getTime() - date.getTime()) < 1000);
assertEquals(new Integer("2147483647"), result);
assertEquals(INTERNAL_SERVER_ERROR, argumentCaptor.getValue().getStatusInfo()); assertEquals("response from exception mapper", argumentCaptor.getValue().getEntity());
assertFalse(iterator.hasNext());
assertFalse(formDataEntityProvider.isReadable(type, genericType, new Annotation[0], null));
assertNull(containerRequest.evaluatePreconditions(new EntityTag("1234567")));
assertEquals(ARGUMENT_VALUE, invocationResult);
assertSame(request, env.get(HttpServletRequest.class)); assertSame(response, env.get(HttpServletResponse.class)); assertSame(servletConfig, env.get(ServletConfig.class)); assertSame(servletContext, env.get(ServletContext.class)); assertNotNull(env.get(WebApplicationDeclaredRoles.class)); assertNotNull(env.get(ErrorPages.class));
assertEquals("bar1,bar2", containerRequest.getHeaderString("foo"));
assertArrayEquals(new Book[][]{{createJunitBook(), createCSharpBook()}, {createJavaScriptBook()}}, (Object[][])array);
assertEquals(newArrayList(TEXT_PLAIN_TYPE, TEXT_XML_TYPE), providerDescriptor.consumes());
assertEquals(111L, contentLength);
assertEquals(new Cookie("foo", "bar"), cookie);
assertSame(String.format("ServletContextDependencySupplier is expected to be created but %s found", dependencySupplier), dependencySupplier, configuredDependencySupplier);
assertEquals(OK, argumentCaptor.getValue().getStatusInfo()); assertEquals("foo", argumentCaptor.getValue().getEntity());
assertEquals(expectedResult, result);
assertTrue( String.format("Instance of javax.inject.Provider expected but %s found", instance == null ? "null" : instance.getClass()), instance instanceof Provider); assertEquals("foo", ((Provider)instance).get());
assertTrue(readerEntityProvider.isReadable(Reader.class, null, null, null));
assertEquals(NOT_MODIFIED, response.getStatusInfo());
assertFalse(jsonEntityProvider.isReadable(aClass, null, null, null));
assertEquals("bar=hello+world&foo=to+be+or+not+to+be", out.toString());
assertEquals(oneMatchedToTwo, MediaTypeHelper.isMatched(mediaTypeOne, mediaTypeTwo)); assertEquals(twoMatchedToOne, MediaTypeHelper.isMatched(mediaTypeTwo, mediaTypeOne));
assertEquals(new Integer("-777"), result);
assertSame(providers, contextParameterResolver.resolve(parameter, applicationContext));
assertSame(request, applicationContext.getHttpHeaders());
assertNotNull(applicationContext.getEverrestConfiguration());
assertEquals(TEST_CONTENT, CharStreams.toString(result));
assertNotNull(environmentContextThatRequestHandlerCalledWith[0]); assertSame(environmentContext, environmentContextThatRequestHandlerCalledWith[0]);
assertEquals(UNSUPPORTED_MEDIA_TYPE, argumentCaptor.getValue().getStatusInfo());
assertEquals(expectedCookies, containerRequest.getCookies());
assertEquals(transformedContent, out.toString());
assertEquals(encodedForm.getFirst("foo"), resolved);
assertFalse(readerEntityProvider.isWriteable(Object.class, null, null, null));
assertEquals(new Locale("en", "GB"), response.getLanguage());
assertEquals(111, asynchronousJobPool.getThreadPoolSize());
assertTrue("Roles set must be empty", webApplicationDeclaredRoles.getDeclaredRoles().isEmpty());
assertEquals(dateFormat.format(date), dateFormat.format(response.getDate()));
assertTrue(entityTag.isWeak()); assertEquals("test \\"test\\"", entityTag.getValue());
assertThat(expected, is(0f));
assertNotNull(display);
assertThat(expected, is(1.0f));
assertThat(actual, is(250));
assertNull(display);
assertThat(mChild.getMeasuredHeight(), is(100));
assertThat(actual, is(101));
assertThat(mChild.getMeasuredHeight(), is(50));
assertThat(actual, is(100));
assertSame(mView, ViewCompat.requireViewById(container, R.id.view));
assertThat(mChild.getMeasuredHeight(), is(60));
assertTrue(isViewIdGenerated(generatedId)); assertThat(generatedIds.size(), equalTo(requestCount));
assertThat(expected, is(1.0f));
assertThat(expected, is(50));
assertThat(expected, is(1.0f));
assertEquals("{\\"inventory_id\\":123,\\"unit_price\\":1.00}", body);
assertEquals(1, responseStanzas.size());
assertEquals("prefs", prefs.getName()); assertEquals("foo", prefs.getNamespaceURI()); assertEquals("always", always.getName()); assertEquals(1, alwaysJids.size()); assertEquals("always@foo.com", alwaysJids.get(0).getInnerText().getText()); assertEquals("never", never.getName()); assertEquals(1, neverJids.size()); assertEquals("never@foo.com", neverJids.get(0).getInnerText().getText());
assertTrue(tested.test(romeoSidewalkToRomeoCar)); assertFalse(tested.test(romeoSidewalkToJulietBalcony));
assertFalse(tested.test(romeoSidewalkToRomeoCar)); assertFalse(tested.test(romeoSidewalkToJulietBalcony));
assertTrue(tested.supports(null, null, null));
assertEquals(archivedMessages, tested.execute());
assertTrue(tested.test(romeoSidewalkToRomeoCar)); assertTrue(tested.test(romeoSidewalkToJulietBalcony));
assertEquals(1, stanzas.size()); assertEquals("iq", stanza.getName()); assertNotNull(stanza.getSingleInnerElementsNamed("fin"));
assertFalse(mamStanzaBrokerProvider.archivingForced);
assertFalse(tested.lastPage());
assertTrue(mamStanzaBrokerProvider.archivingForced);
assertEquals(archivedMessages, tested.execute());
assertTrue(tested.lastPage());
assertEquals(firstStanzaBroker, firstInterceptor.receivedStanzaBroker); assertEquals(secondStanzaBroker, secondInterceptor.receivedStanzaBroker);
assertTrue(((InterceptorMock) interceptors.get(0)).intercepted); assertTrue(((InterceptorMock) interceptors.get(1)).intercepted);
assertTrue(tested.test(romeoSidewalkToRomeoCar)); assertFalse(tested.test(romeoSidewalkToJulietBalcony));
assertEquals(preferences.getDefaultBehaviour(), parsedPreferences.getDefaultBehaviour()); assertEquals(preferences.getAlwaysArchivedToOrFromJids().size(), parsedPreferences.getAlwaysArchivedToOrFromJids().size()); assertEquals(preferences.getNeverArchivedToOrFromJids().size(), parsedPreferences.getNeverArchivedToOrFromJids().size());
assertNotNull(audioFileFormat); assertEquals("flac", audioFileFormat.getType().getExtension()); assertEquals(new Long(9338775), audioFileFormat.getProperty("duration")); assertEquals(411840, audioFileFormat.getFrameLength()); assertEquals(44100f, format.getSampleRate(), 0); assertEquals(16, format.getSampleSizeInBits()); assertEquals(2, format.getChannels()); assertEquals("FLAC", format.getEncoding().toString());
assertTrue("For this test the stream MUST support mark()", in.markSupported()); assertNotNull(stream); assertEquals(44100f, format.getSampleRate(), 0); assertEquals(16, format.getSampleSizeInBits()); assertEquals(2, format.getChannels()); assertEquals("FLAC", format.getEncoding().toString());
assertNotNull(stream);
assertFalse("For this test the stream MUST NOT support mark()", in.markSupported());
assertTrue("For this test the stream MUST support mark()", in.markSupported()); assertNotNull(fileFormat); assertEquals(44100f, format.getSampleRate(), 0); assertEquals(16, format.getSampleSizeInBits()); assertEquals(2, format.getChannels()); assertEquals("FLAC", format.getEncoding().toString());
assertFalse("For this test the stream MUST NOT support mark()", in.markSupported());
assertTrue(ActionFactory.construct( "Absorb") instanceof AbsorbAction); assertTrue(ActionFactory.construct( "AbsorbAction") instanceof AbsorbAction); assertTrue(ActionFactory.construct( "com.elmakers.mine.bukkit.action.builtin.Absorb") instanceof AbsorbAction); assertTrue(ActionFactory.construct( "com.elmakers.mine.bukkit.action.builtin.AbsorbAction") instanceof AbsorbAction);
assertFalse(set.testBlock(stone())); assertFalse(set.testBlock(dirt())); assertTrue(set.testBlock(correct));
assertTrue(set.testBlock(stone())); assertFalse(set.testBlock(dirt()));
assertEquals(TestClass.class, class1);
assertEquals("testMethod", method1.getName());
assertEquals(TestClass.class, class1);
assertEquals("testMethod", method1.getName()); assertEquals("testMethod", method1.getName());
assertEquals("1.2.3,1.2.4,", s.toString());
assertEquals(TestClass.class, class1);
assertEquals("testMethod", method1.getName());
assertEquals("-1.2.4,-1.2.3,", s.toString());
assertEquals("testMethod", method1.getName());
assertEquals("1.2.3,1.2.4,1.2.5,2.2.5,", s.toString());
assertThat(numberParse.getNumber(0), is(10.0f)); assertThat(numberParse.getNumber(1), is(-10.0f)); assertThat(numberParse.getNumber(2), is(-1.0f)); assertThat(numberParse.getNextCmd(), is(numbers.length()));
assertNull(VOIUtils.getLUT(obj, Tag.ModalityLUTSequence));
assertSame(mlut, VOIUtils.getLUT(obj, Tag.ModalityLUTSequence));
assertSame(obj, VOIUtils.selectVoiObject(obj, null, 1));
assertNull(VOIUtils.selectVoiObject(new BasicDicomObject(), null, 1));
assertSame(frameVoiLut2, VOIUtils.selectVoiObject(obj, null, 2));
assertNull(VOIUtils.getLUT(obj, Tag.ModalityLUTSequence));
assertSame(sharedVoiLut, VOIUtils.selectVoiObject(obj, null, 2));
assertNull(VOIUtils.selectVoiObject(obj, null, 1));
assertSame(frameVoiLut, VOIUtils.selectVoiObject(obj, null, 1));
assertSame(obj, VOIUtils.selectVoiObject(obj, null, 1));
assertNull(VOIUtils.selectVoiObject(obj, null, 1));
assertNotNull(data);
assertThat(colourSetter.onSetColourCalled).isFalse();
assertThat(colourSetter.onSetColourCalled).isTrue();
assertThat(output).isEqualTo(LIGHT_VIBRANT);
assertThat(colourSetter.onSetColourCalled).isTrue();
assertThat(argbEvaluator).isInstanceOf(ArgbEvaluatorCompat.ArgbEvaluatorHoneycomb.class);
assertThat(output).isEqualTo(VIBRANT);
assertThat(FabSetter.isFab(floatingActionButton)).isTrue();
assertThat(value).isEqualTo(FloatingActionButton.DEFAULT);
assertThat(output).isEqualTo(DARK_VIBRANT);
assertThat(argbEvaluator).isInstanceOf(ArgbEvaluatorCompat.ArgbEvaluatorLegacy.class);
assertThat(FabSetter.isFab(vanillaView)).isFalse();
assertThat(colourSetter.onSetColourCalled).isTrue();
assertThat(output).isEqualTo(MUTED);
assertThat(output).isEqualTo(LIGHT_MUTED);
assertThat(argbEvaluator).isInstanceOf(ArgbEvaluatorCompat.ArgbEvaluatorLegacy.class);
assertThat(output).isEqualTo(DARK_MUTED);
assertThat(first.hasObservers(), is(false));
assertThat(observer.await(), is(true)); assertThat(observer.getInvalidatedTables().size(), is(1)); assertThat(observer.getInvalidatedTables(), hasItem("a")); assertThat(observer.await(), is(false)); assertThat(observer.await(), is(true)); assertThat(observer.getInvalidatedTables().size(), is(1)); assertThat(observer.getInvalidatedTables(), hasItem("a"));
assertThat(iterator.hasNext(), is(false));
assertThat(map.remove(2), is(20)); assertThat(map.remove(3), is(30)); assertThat(map, is(from(1, 4).to(10, 40)));
assertThat(mViewModelProvider.get(ViewModel1.class), is(model1)); assertThat(mViewModelProvider.get(ViewModel2.class), is(model2));
assertThat(obj.mCalled, is(true));
assertThat(iter.next().getKey(), is(expected[index++])); assertThat(index, is(4));
assertThat(map.remove(1), is(true)); assertThat(map, is(mapOf(2, 3, 4)));
assertThat(mValue.get(), is(-1)); assertThat(mValue.get(), is(1));
assertThat(i.getKey(), is(expected[index++])); assertThat(map.remove(2), is(20)); assertThat(map.remove(3), is(30));
assertThat(mLiveDataOutput, is(Arrays.asList("foo", "bar", "baz"))); assertThat(output2, is(Arrays.asList("bar", "baz")));
assertThat(map.equals(new ArrayList<>()), is(false));
assertThat(map1.equals(map2), is(false));
assertNull(lazyList.get(9));
assertThat(map.putIfAbsent(5, 10), is((Integer) null)); assertThat(map.putIfAbsent(10, 30), is(20));
assertThat(mSource.hasObservers(), is(false)); assertThat(mSource.hasObservers(), is(true)); assertThat(mSource.hasObservers(), is(false));
assertThat(StringUtil.splitToIntList("-4,a,5,7"), is(asList(-4, 5, 7)));
assertThat(map1.equals(map2), is(false));
assertThat(map.toString(), is("[1=true]"));
assertThat(data.get(), is(1)); assertThat(data.get(), is(1));
assertThat(map.ceil(1), nullValue()); assertThat(map.ceil(1), nullValue()); assertThat(map.ceil(2).getKey(), is(1)); assertThat(map.ceil(2), nullValue());
assertThat(iterator.hasNext(), is(false));
assertThat(map.equals(null), is(false));
assertThat(mSourceActive, is(true)); assertThat(mSourceActive, is(false)); assertThat(mSourceActive, is(true));
assertThat(map.contains(10), is(true)); assertThat(map.contains(11), is(false)); assertThat(new FastSafeIterableMap<Integer, Integer>().contains(0), is(false));
assertThat(map.remove(1), is(261)); assertThat(map, is(new SafeIterableMap<Integer, Integer>()));
assertThat(subscriber.errorCount(), CoreMatchers.is(1)); assertThat(subscriber.errors().get(0).getMessage(), CoreMatchers.is("i want exception"));
assertThat(map.remove(4), is(40)); assertThat(map, is(from(1, 2, 3).to(10, 20, 30)));
assertThat(vm1.mCleared, is(false)); assertThat(vw2, notNullValue()); assertThat(vm1.mCleared, is(true));
assertThat(iterator.hasNext(), is(false));
assertThat(map.contains(10), is(true)); assertThat(map.contains(20), is(true)); assertThat(map.remove(10), is(20)); assertThat(map.contains(10), is(false)); assertThat(map.putIfAbsent(10, 30), nullValue()); assertThat(map.putIfAbsent(10, 40), is(30));
assertThat(viewModel1.mCleared, is(false)); assertThat(viewModel2.mCleared, is(false)); assertThat(viewModel1.mCleared, is(true)); assertThat(viewModel2.mCleared, is(true)); assertThat(store.get("a"), nullValue()); assertThat(store.get("b"), nullValue());
assertThat(map1.equals(map2), is(false));
assertThat(consumer.mCount, CoreMatchers.is(0)); assertThat(consumer.mCount, CoreMatchers.is(1)); assertThat(consumer.mCount, CoreMatchers.is(2)); assertThat(consumer.mCount, CoreMatchers.is(2));
assertThat(RoomSQLiteQuery.acquire("fda", 3), not(sameInstance(query)));
assertThat(map.equals(new SafeIterableMap<Integer, Boolean>()), is(false));
assertThat(map.eldest(), nullValue()); assertThat(map.eldest().getKey(), is(1)); assertThat(map.eldest().getKey(), is(1)); assertThat(map.eldest().getKey(), is(2)); assertThat(map.eldest(), nullValue());
assertThat(map.newest(), nullValue()); assertThat(map.newest().getKey(), is(1)); assertThat(map.newest().getKey(), is(2)); assertThat(map.eldest().getKey(), is(1)); assertThat(map.newest(), nullValue());
assertThat("exception cause is wrong", e.getCause() instanceof UnprecedentedError);
assertThat(map1.equals(map2), is(true));
assertThat(map.remove(5), is((Boolean) null)); assertThat(map, is(mapOf(1, 2, 3, 4)));
assertThat(entry.getKey(), is(expected[index++])); assertThat(index, is(2));
assertThat(mRegistry.getObserverCount(), is(1)); assertThat(mRegistry.getObserverCount(), is(0));
assertThat(map.putIfAbsent(5, 10), is((Integer) null)); assertThat(map, is(from(1, 2, 3, 4, 5).to(10, 20, 30, 40, 10)));
assertThat(map.toString(), is("[1=a, 2=b, 3=c, 4=d]"));
assertThat(entry.getKey(), is(expected[index++]));
assertThat(map.toString(), is("[]"));
assertThat(throwable, instanceOf(IllegalArgumentException.class)); assertThat(throwable.getMessage(), is("Cannot add the same observer with different lifecycles"));
assertThat(map1.equals(map2), is(false));
assertThat(mMediator.getValue(), is("c"));
assertThat(mAddedObservers.size(), CoreMatchers.is(1)); assertThat(consumer.mCount, CoreMatchers.is(1)); assertThat(consumer.mCount, CoreMatchers.is(2)); assertThat(consumer.mCount, CoreMatchers.is(3)); assertThat(consumer.mCount, CoreMatchers.is(3));
assertThat(mAddedObservers.size(), CoreMatchers.is(1)); assertThat(mAddedObservers.size(), CoreMatchers.is(2)); assertThat(mAddedObservers.get(1), CoreMatchers.not(CoreMatchers.sameInstance(observer)));
assertThat(viewModel, is(provider.get(ViewModel1.class)));
assertNull(lazyList.get(0)); assertNull(lazyList.get(0));
assertThat(map.putIfAbsent(3, 239), is(261)); assertThat(map, is(from(1, 2, 3, 4).to(10, 20, 261, 40)));
assertThat(map1.equals(map2), is(true));
assertThat(mLiveDataOutput, is(Collections.singletonList("foo"))); assertThat(mLiveDataOutput, is(Arrays.asList("foo", "bar", "baz")));
assertThat(map.size(), is(4)); assertThat(map.size(), is(6)); assertThat(map.size(), is(5)); assertThat(map.size(), is(0)); assertThat(map.size(), is(1)); assertThat(mapOf().size(), is(0));
assertThat(mLiveDataOutput, is(Arrays.asList("foo", "bar", "baz")));
assertThat(frontend.source, containsString("void methodInChild()")); assertThat(frontend.source, containsString("void methodInParent()"));
assertThat(eventizer.getType()).isEqualTo(DummyListener.class);
assertThat(escapeSpecialChars("\\0"), is("\\\\u0000")); assertThat(escapeSpecialChars("\\1"), is("\\\\u0001")); assertThat(escapeSpecialChars("\\u001f"), is("\\\\u001f"));
assertThat(eventizer1).isSameAs(eventizer2);
assertThat(loggerOutput.toString(), containsString(originalCommand.toString()));
assertThat(output, containsString(Integer.toHexString(messageId))); assertThat(output).matches("(?s).* 0x[0-9a-f]{8} .*");
assertThat(output, containsString("uncaught exception")); assertThat(output, containsString("the actor")); assertThat(output, containsString("the message")); assertThat(output, containsString(DummyException.class.getName())); assertThat("should contain the stack trace", output, containsString("at " + getClass().getName()));
assertThat(EventToString.format("TheClass", "theMethod", (Object) null), is("TheClass.theMethod(null)"));
assertThat(provider.getEventizerForType(type1), is(eventizer1)); assertThat(provider.getEventizerForType(type2), is(eventizer2));
assertThat(EventToString.format("TheClass", "theMethod"), is("TheClass.theMethod()")); assertThat(EventToString.format("TheClass", "theMethod", 123), is("TheClass.theMethod(123)")); assertThat(EventToString.format("TheClass", "theMethod", 123, true), is("TheClass.theMethod(123, true)"));
assertThat(escapeSpecialChars("\\b"), is("\\\\b")); assertThat(escapeSpecialChars("\\t"), is("\\\\t")); assertThat(escapeSpecialChars("\\n"), is("\\\\n")); assertThat(escapeSpecialChars("\\f"), is("\\\\f")); assertThat(escapeSpecialChars("\\r"), is("\\\\r")); assertThat(escapeSpecialChars("\\""), is("\\\\\\"")); assertThat(escapeSpecialChars("\\\\"), is("\\\\\\\\"));
assertThat(sources, containsString("interface Opcodes"));
assertThat(sources, is(nullValue()));
assertThat(events.size(), is(2)); assertThat(events.get(0).name, endsWith(".OnOneEvent")); assertThat(events.get(1).name, endsWith(".OnTwoEvent"));
assertThat(rawActor.thread, is(notNullValue())); assertThat(rawActor.thread, is(not(Thread.currentThread())));
assertThat(EventToString.format("TheClass", "theMethod", "foo"), is("TheClass.theMethod(\\"foo\\")"));
assertThat("interrupt status after send", Thread.currentThread().isInterrupted(), is(true));
assertThat(output.toString(), containsString("[ 0.000235]"));
assertThat(output.toString(), containsLineWithWords("actor1 <-", "message1"));
assertThat(output.toString(), containsLineWithWords("<external> ->", "message1"));
assertThat(sources, containsString("class ByteStreams"));
assertThat(sources, containsString("class String"));
assertThat(output.toString(), containsString(Thread.currentThread().getName()));
assertThat(asynchronousExecutor, is(listenedExecutor));
assertEquals("scheduler@192.168.1.1:8081", pid.toString());
assertEquals(reply.message(), new BulkStringMessage("VALUE").message());
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertArrayEquals(new int[]{ 0, 5461, 10922, 16384 }, result);
assertEquals(reply.message(), StringMessage.OkMessage.message());
assertEquals(StringMessage.OkMessage.message(), reply.message());
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertEquals(reply.message(), new BulkStringMessage("VALUE").message());
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertEquals(reply.message(), BulkStringMessage.NoKeyFoundMessage.message());
assertEquals(length, hex.length());
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertEquals(StringMessage.OkMessage.message(), reply.message());
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertArrayEquals(new int[]{ 0, 4096, 8192, 12288, 16384 }, result);
assertEquals(0, ClusterCRC16.getSlot("")); assertEquals(12739, ClusterCRC16.getSlot("123456789")); assertEquals(9308, ClusterCRC16.getSlot("sfger132515")); assertEquals(6350, ClusterCRC16.getSlot("hae9Napahngaikeethievubaibogiech")); assertEquals(4813, ClusterCRC16.getSlot("AAAAAAAAAAAAAAAAAAAAAA")); assertEquals(4054, ClusterCRC16.getSlot("Hello, World!"));
assertEquals(reply, ErrorMessage.WrongArgcMessage);
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is("This cannot possibly happen."));
assertThat(networkAddresses, notNullValue()); assertThat(networkAddressEntities.size(), is(2)); assertThat(networkAddress1, notNullValue()); assertThat(networkAddress1.ip(), is("192.168.1.1")); assertThat(networkAddress1.port(), is(8889)); assertThat(networkAddress2, notNullValue()); assertThat(networkAddress2.ip(), is("192.168.1.2")); assertThat(networkAddress2.port(), is(8890));
assertThat(valid).isFalse();
assertThat(networkAddress, notNullValue()); assertThat(networkAddress, instanceOf(NetworkAddress.class)); assertThat(networkAddress.ip(), notNullValue()); assertThat(networkAddress.ip(), is("192.168.1.1")); assertThat(networkAddress.port(), is(8889));
assertThat(reactiveStream).isNotNull();
assertThat(permissionEntities, notNullValue()); assertThat(permissionEntities.size(), is(2)); assertThat(permissionEntity1, notNullValue()); assertThat(permissionEntity1.getPermission(), is("CAMERA")); assertThat(permissionEntity2.getPermission(), is("CONTACTS"));
assertThat(deserializedObject).isNotNull(); assertThat(deserializedObject).isInstanceOf(Integer.class); assertThat(deserializedObject).isEqualTo(1080);
assertThat(isValid).isFalse();
assertThat(valid).isFalse();
assertEquals(0, testDisposableObserver.valuesCount);
assertThat(serverModels, is(Collections.emptyList())); assertTrue(serverModels.isEmpty());
assertThat(networkAddressEntities, notNullValue()); assertThat(networkAddressEntities.size(), is(2)); assertThat(networkAddressEntity1, notNullValue()); assertThat(networkAddressEntity1.ip(), is("192.168.24.33")); assertThat(networkAddressEntity1.port(), is(9991)); assertThat(networkAddressEntity2, notNullValue()); assertThat(networkAddressEntity2.ip(), is("192.168.53.88")); assertThat(networkAddressEntity2.port(), is(9944));
assertThat(reactiveStream).isNotNull();
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is("Invalid Server Default Error Message"));
assertThat(reactiveStream).isNotNull();
assertThat(reactiveStream).isNotNull();
assertThat(errorMessage, is(""));
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is(instanceOf(String.class))); assertThat(errorMessage, is("Error message!!"));
assertThat(errorMessage).isNullOrEmpty();
assertThat(errorMessage, is(""));
assertThat(serverEntity).isNull();
assertThat(serverSearchActivity.loadingView.getVisibility(), is(View.VISIBLE));
assertNotNull(serverModels); assertThat(serverModels.size(), is(3));
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is("No Response Default Error Message"));
assertThat(valid).isFalse();
assertThat(networkAddressEntity, nullValue());
assertThat(networkAddressEntity, notNullValue()); assertThat(networkAddressEntity, instanceOf(NetworkAddressEntity.class)); assertThat(networkAddressEntity.ip(), is("192.168.24.33")); assertThat(networkAddressEntity.port(), is(9991));
assertThat(networkAddress, notNullValue()); assertThat(networkAddress, instanceOf(NetworkAddress.class)); assertThat(networkAddress.ip(), notNullValue()); assertThat(networkAddress.ip(), is("192.168.1.45")); assertThat(networkAddress.port(), is(9999));
assertThat(serverSearchActivity.loadingView.getVisibility(), is(View.GONE));
assertThat(permissions, notNullValue()); assertThat(permissions.size(), is(2)); assertThat(permission1, notNullValue()); assertThat(permission1, instanceOf(Permission.class)); assertThat(permission1.permission(), notNullValue()); assertThat(permission1.permission(), is("CAMERA")); assertThat(permission2, notNullValue()); assertThat(permission2, instanceOf(Permission.class)); assertThat(permission2.permission(), notNullValue()); assertThat(permission2.permission(), is("CONTACTS"));
assertThat(serverEntity, notNullValue()); assertThat(serverEntity.worldName(), is("Za warudo"));
assertThat(permissions, notNullValue()); assertThat(permissions.size(), is(2)); assertThat(permission1, notNullValue()); assertThat(permission1.permission(), is("CAMERA")); assertThat(permission2, notNullValue()); assertThat(permission2.permission(), is("CONTACTS"));
assertThat(reactiveStream).isNotNull();
assertThat(serverProtocol).isNull();
assertThat(permission, nullValue());
assertThat(valid).isFalse();
assertThat(serverEntity, notNullValue()); assertThat(serverEntity.worldName(), is("Za warudo"));
assertThat(valid).isFalse();
assertThat(isValid).isFalse();
assertThat(message).isNotNull(); assertThat(message.length()).isEqualTo(fakeSerializedJson.length());
assertThat(valid).isTrue();
assertThat(serializedObject).isNotNull(); assertThat(serializedObject).isInstanceOf(String.class); assertThat(serializedObject).isEqualTo("359");
assertThat(errorMessage).isNotNull(); assertThat(errorMessage).isInstanceOf(String.class); assertThat(errorMessage).isEqualTo("Unknown error");
assertThat(serverSearchActivity.qrReaderView.getVisibility(), is(View.GONE)); assertThat(serverSearchActivity.closeCameraView.getVisibility(), is(View.GONE));
assertThat(getEmptyReactiveStream()).isEqualTo(reactiveStream);
assertThat(reactiveStream).isNotNull();
assertThat(networkAddressModel, notNullValue()); assertThat(networkAddressModel, instanceOf(NetworkAddressModel.class)); assertThat(networkAddressModel.ip(), notNullValue()); assertThat(networkAddressModel.ip(), is("192.168.1.45")); assertThat(networkAddressModel.port(), is(9999));
assertNotNull(serverModel);
assertThat(message).isNotNull(); assertThat(message).isInstanceOf(Message.class);
assertThat(serverModels.get(0), is(instanceOf(ServerModel.class))); assertThat(serverModels.get(1), is(instanceOf(ServerModel.class))); assertThat(serverModels.get(2), is(instanceOf(ServerModel.class)));
assertThat(serverModel, is(instanceOf(ServerModel.class)));
assertThat(isValid).isFalse();
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is("Unknown error."));
assertThat(permissionEntity, nullValue());
assertThat(reactiveStream).isNotNull();
assertThat(exception).isNotNull(); assertThat(exception).isInstanceOf(RuntimeException.class);
assertThat(networkInterfaces).isNotNull(); assertThat(networkInterfaces).isInstanceOf(Collection.class);
assertThat(valid).isFalse();
assertThat(permissionModels, notNullValue()); assertThat(permissionModels.size(), is(2)); assertThat(permissionModel1, notNullValue()); assertThat(permissionModel1, instanceOf(PermissionModel.class)); assertThat(permissionModel1.permission(), notNullValue()); assertThat(permissionModel1.permission(), is("CAMERA")); assertThat(permissionModel2, notNullValue()); assertThat(permissionModel2, instanceOf(PermissionModel.class)); assertThat(permissionModel2.permission(), notNullValue()); assertThat(permissionModel2.permission(), is("CONTACTS"));
assertThat(errorMessage, notNullValue()); assertThat(errorMessage, is("No Internet Connection Default Error Message"));
assertThat(reactiveStream).isNotNull();
assertThat(isGranted).isNotNull(); assertThat(streamValues).isNotNull(); assertThat(streamValues.size()).isEqualTo(1); assertThat(streamValues.get(0)).isTrue();
assertThat(exception, nullValue());
assertFalse(testDisposableCompletableObserver.isCompleted);
assertThat(callingIntent, notNullValue()); assertThat(extras, notNullValue()); assertThat(extras.containsKey(ServerFoundActivity.KEY_SERVER), is(true)); assertThat(extras.getParcelable(ServerFoundActivity.KEY_SERVER), notNullValue()); assertThat(extras.getParcelable(ServerFoundActivity.KEY_SERVER), instanceOf(ServerModel.class)); assertThat(actualServerModel, notNullValue()); assertThat(actualServerModel.ip(), notNullValue()); assertThat(actualServerModel.ip(), is("192.168.15.47"));
assertThat(isGranted).isNotNull(); assertThat(streamValues).isNotNull(); assertThat(streamValues.size()).isEqualTo(1); assertThat(streamValues.get(0)).isFalse();
assertThat(exception, notNullValue()); assertThat(exception, is(instanceOf(Exception.class))); assertThat(exception, is(mockException));
assertThat(latestToast, notNullValue()); assertThat(latestToast.getDuration(), is(Toast.LENGTH_LONG)); assertThat(textOfLatestToast, notNullValue()); assertThat(textOfLatestToast, is("Something came up"));
assertThat(serverSearchActivity.fabMenuView.isOpened(), is(false));
assertEquals(0, testDisposableMaybeObserver.valuesCount);
assertThat(server, nullValue());
assertThat(serverSearchActivity.closeCameraView.getVisibility(), is(View.VISIBLE)); assertThat(serverSearchActivity.qrReaderView.getVisibility(), is(View.VISIBLE));
assertThat(serverFoundActivity.getSupportActionBar().getTitle(), notNullValue()); assertThat(serverFoundActivity.getSupportActionBar().getTitle(), is("Server found"));
assertThat(networkAddress, nullValue());
assertThat(exception).isNull();
assertThat(serverProtocol).isNotNull(); assertThat(serverProtocol).isInstanceOf(ServerProtocol.class);
assertThat(errorMessage).isNotNull(); assertThat(errorMessage).isInstanceOf(String.class); assertThat(errorMessage).isEqualTo("This cannot be null!");
assertNull(getManagedDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), MANAGED_DEPENDENCY_NOT_REMOVED_MSG);
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "POM file could not be modified"); assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class); assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, "non_existent_file.xml").getAbsolutePath() + " (No such file or directory)");
assertTrue(false); assertEquals(e.getMessage(), "artifactInfo cannot be blank");
assertEquals(getDependencyBeforeChange(uut).getType(), "pom"); assertEquals(getDependencyAfterChange(uut).getType(), "jar");
assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().size(), 0); assertEquals(pomModelAfterChange.getModules().size(), 2); assertTrue(pomModelAfterChange.getModules().contains("module1")); assertTrue(pomModelAfterChange.getModules().contains("foo"));
assertEquals(e.getMessage(), "XPath expression \'@#$123456\' didn\'t compile correctly.");
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertNotNull(executionResult.getWarnings()); assertEquals(executionResult.getWarnings().size(), 1); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), "Property encoding was not added to POM file pom.xml because it is already present");
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), "Module module1 was not added to POM file pom.xml because it is already present");
assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().size(), 0); assertEquals(pomModelAfterChange.getProperties().size(), 2); assertEquals(pomModelAfterChange.getProperties().getProperty("encoding"), "UTF-8"); assertEquals(pomModelAfterChange.getProperties().getProperty("foo"), "bar");
assertTrue(false); assertEquals(e.getMessage(), "Artifact info should be specified as [groupId]:[artifactId]:[version]");
assertEquals(getDependencyBeforeChange(uut).getScope(), "test"); assertEquals(getDependencyAfterChange(uut).getScope(), null);
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "Dependency foo:bar has not been replaced by newfoo:newbar in POM file /pom.xml because it is not present"); assertNull(executionResult.getException().getCause());
assertEquals(transformationUtility.getParent(), transformationUtilityGroup); assertEquals(transformationUtility.getTransformationTemplate(), transformationTemplate);
assertTrue(getDependencyBeforeChange(uut).isOptional()); assertFalse(getDependencyAfterChange(uut).isOptional());
assertTrue(originalFile.exists()); assertTrue(originalFile.isFile()); assertFalse(toDir.exists()); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(moveFile.getDescription(), "Move file foo.xml to bar"); assertEquals(executionResult.getDetails(), "File \'foo.xml\' has been moved to \'/bar\'"); assertFalse(originalFile.exists()); assertTrue(movedFile.exists()); assertTrue(FileUtils.contentEquals(tempOriginalFile, movedFile));
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertNotNull(executionResult.getWarnings()); assertEquals(executionResult.getWarnings().size(), 1); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), "Module module1 was not added to POM file pom.xml because it is already present");
assertEquals(pomGetPackaging.getDescription(), "Retrieve the packaging of specified Maven POM module"); assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE); assertEquals(executionResult.getValue(), "jar");
assertEquals(e.getMessage(), "Specified file does not exist: " + new File(transformedAppFolder, "foo").getAbsolutePath());
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertNotNull(executionResult.getException()); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class);
assertEquals(pomRemoveDependency.getDescription(), "Remove dependency org.springframework.boot:spring-boot-dependencies from POM file pom.xml"); assertEquals(pomRemoveDependency.clone(), pomRemoveDependency);
assertEquals(pomModelBeforeChange.getPackaging(), "jar"); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(pomModelAfterChange.getPackaging(), "war");
assertEquals(pomRemoveManagedDependency.getDescription(), "Remove managed dependency junit:junit from POM file pom.xml"); assertEquals(pomRemoveManagedDependency.clone(), pomRemoveManagedDependency);
assertEquals(tuName, "NO_EXTENSION:AnonymousTransformationTemplate-1-AnonymousTransformationUtility"); assertEquals(transformationUtility.getName(), tuName); assertTrue(transformationTemplate.getUtilities().contains(transformationUtility)); assertEquals(transformationTemplate.getUtilities().size(), 1);
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING);
assertEquals(transformationTemplate.add(transformationUtility), "NO_EXTENSION:AnonymousTransformationTemplate-1-AnonymousTransformationUtility"); assertEquals("Invalid attempt to add already registered transformation utility NO_EXTENSION:AnonymousTransformationTemplate-1-AnonymousTransformationUtility to transformation template NO_EXTENSION:AnonymousTransformationTemplate", ex.getMessage());
assertTrue(cause instanceof ApplicationValidationException); assertEquals(cause.getMessage(), exceptionMessage);
assertFalse(getPluginBeforeChange(uut).getExecutions().isEmpty()); assertTrue(uut.isRemoveExecutions()); assertTrue(getPluginAfterChange(uut).getExecutions().isEmpty());
assertNull(getManagedDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR);
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), "Property zoo has not been removed from POM file /pom.xml because it is not present");
assertFalse(transformationUtility.hasBeenPerformed()); assertTrue(transformationUtility.hasBeenPerformed()); assertEquals(performResult.getType(), PerformResult.Type.EXECUTION_RESULT); assertEquals(performResult.getExecutionResult().getType(), TUExecutionResult.Type.VALUE); assertEquals(((TUExecutionResult) performResult.getExecutionResult()).getValue(), transformedAppFolder);
assertEquals(pomModelBeforeChange.getProperties().size(), 1); assertEquals(pomModelBeforeChange.getProperties().getProperty("encoding"), "UTF-8"); assertEquals(pomRemoveProperty.getPropertyName(), "encoding"); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(pomModelAfterChange.getProperties().size(), 0);
assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(properties.size(), 3); assertEquals(properties.getProperty("bar"), "barv"); assertEquals(properties.getProperty("foo"), "boo"); assertEquals(properties.getProperty("foofoo"), "foofoov");
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class);
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertNotNull(executionResult.getWarnings()); assertEquals(executionResult.getWarnings().size(), 1); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), "Property zoo has not been removed from POM file /pom.xml because it is not present");
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertNotNull(executionResult.getException()); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class);
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), "Module zoo has not been removed from POM file /pom.xml because it is not present");
assertEquals(description, "Change dependency org.testng:testng in POM file pom.xml");
assertEquals(pomModelBeforeChange.getModules().size(), 1); assertTrue(pomModelBeforeChange.getModules().contains("module1")); assertEquals(pomRemoveModule.getModuleName(), "module1"); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(pomModelAfterChange.getModules().size(), 0);
assertEquals(description, "Remove dependency org.testng:testng from POM file pom.xml");
assertNull(getDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR);
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "POM file could not be modified"); assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class); assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, "non_existent_file.xml").getAbsolutePath() + " (No such file or directory)");
assertEquals(description, "Remove managed dependency org.testng:testng from POM file pom.xml");
assertEquals(getPluginBeforeChange(uut).getVersion(), "2.7"); assertTrue(uut.isRemoveVersion()); assertNull(getPluginAfterChange(uut).getVersion());
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "Property file could not be modified"); assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class); assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, "/src/main/resources/application_zeta.properties").getAbsolutePath() + " (No such file or directory)");
assertTrue(fromFile.exists()); assertFalse(fromFile.isDirectory()); assertFalse(toFile.exists()); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertEquals(copyFile.getDescription(), "Copy file foo.xml to src/main/resources"); assertEquals(executionResult.getDetails(), "File \'foo.xml\' has been copied to \'/src/main/resources\'"); assertTrue(fromFile.exists()); assertTrue(toFile.exists()); assertTrue(FileUtils.contentEquals(fromFile, toFile));
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "POM file could not be modified"); assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class); assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, "non_existent_file.xml").getAbsolutePath() + " (No such file or directory)");
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "Could not replace text"); assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class); assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, "/src/main/resources/application_zeta.properties").getAbsolutePath() + " (No such file or directory)");
assertEquals(getNewTestTransformationTemplate().getSimpleClassName(), "AnonymousTransformationTemplate"); assertEquals(new SampleTransformationTemplate().getSimpleClassName(), "SampleTransformationTemplate");
assertEquals(tu1, tu2); assertEquals(tu1.relative("pom.xml"), tu1); assertNotEquals(tu1, tu2); assertEquals(tu2.relative("pom.xml"), tu2); assertEquals(tu1, tu2); assertEquals(tu1.setName("TUA"), tu1); assertNotEquals(tu1, tu2); assertEquals(tu2.setName("TUA"), tu2); assertEquals(tu1, tu2);
assertNull(getDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), DEPENDENCY_NOT_REMOVED_MSG);
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP);
assertFalse(transformationOperation.hasBeenPerformed()); assertTrue(transformationOperation.hasBeenPerformed()); assertNotNull(performResult); assertEquals(performResult.getType(), PerformResult.Type.EXECUTION_RESULT); assertEquals(performResult.getExecutionResult().getType(), TOExecutionResult.Type.NO_OP); assertFalse(executionResult.isExceptionType()); assertEquals(executionResult.getDetails(), "nothing to be changed");
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), "Property encoding was not added to POM file pom.xml because it is already present");
assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().size(), 0); assertEquals(pomModelAfterChange.getModules().size(), 1); assertTrue(pomModelAfterChange.getModules().contains("module1"));
assertEquals(e.getMessage(), "Specified file is a directory: " + transformedAppFolder.getAbsolutePath());
assertFalse(new SampleExtension().automaticResolution(appFolder).isPresent());
assertEquals(getDependencyBeforeChange(uut).getVersion(), "3.4"); assertNull(getDependencyAfterChange(uut).getVersion());
assertNull(getDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), DEPENDENCY_NOT_REMOVED_MSG);
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), "Dependency foo:bar has not been replaced by newfoo:newbar in POM file /pom.xml because it is not present");
assertEquals(pomRemovePlugin.getDescription(), "Remove plugin org.apache.maven.plugins:maven-javadoc-plugin from POM file pom.xml"); assertEquals(pomRemovePlugin.clone(), pomRemovePlugin);
assertNotNull(extensions); assertEquals(extensions.size(), 1); assertTrue(extensions.get(0) instanceof ButterflySpringBootExtension);
assertTrue(transformationOperation.isSaveResult());
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), "Dependency foo:bar has not been replaced by newfoo:newbar in POM file /pom.xml because it is not present");
assertFalse(transformationUtility.hasBeenPerformed()); assertTrue(transformationUtility.hasBeenPerformed()); assertEquals(performResult.getType(), PerformResult.Type.EXECUTION_RESULT); assertEquals(performResult.getExecutionResult().getType(), TUExecutionResult.Type.VALUE); assertEquals(((TUExecutionResult) performResult.getExecutionResult()).getValue(), transformedAppFolder);
assertEquals(extension.automaticResolution(appFolder).get(), SampleTransformationTemplate2.class);
assertNull(getManagedDependencyBeforeChange(uut)); assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException()); assertEquals(executionResult.getDetails(), MANAGED_DEPENDENCY_NOT_REMOVED_MSG);
assertEquals(pomGetParent.getDescription(), "Retrieve the parent Maven coordinates of specified Maven POM module"); assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE); assertEquals(executionResult.getValue(), "com.test:foo-parent:1.0");
assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING); assertNull(executionResult.getException()); assertNotNull(executionResult.getWarnings()); assertEquals(executionResult.getWarnings().size(), 1); assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class); assertEquals(executionResult.getWarnings().get(0).getMessage(), "Module zoo has not been removed from POM file /pom.xml because it is not present");
assertEquals(transformationUtility.getSimpleClassName(), "SampleTransformationUtility");
assertEquals(executionResult.getType(), TUExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationUtilityException.class); assertEquals(executionResult.getException().getMessage(), "The specified file could not be found or read and parsed as valid Maven pom file");
assertEquals(executionResult.getType(), TOExecutionResult.Type.NO_OP); assertNull(executionResult.getException());
assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR); assertEquals(executionResult.getException().getClass(), TransformationOperationException.class); assertEquals(executionResult.getException().getMessage(), "Module module1 was not added to POM file pom.xml because it is already present"); assertNull(executionResult.getException().getCause()); assertNull(executionResult.getDetails()); assertEquals(new PomAddModule("module1").relative("pom.xml").execution(transformedAppFolder, transformationContext).getType(), TOExecutionResult.Type.ERROR);
assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().size(), 0); assertEquals(pomModelAfterChange.getProperties().size(), 1); assertEquals(pomModelAfterChange.getProperties().getProperty("encoding"), "bar");
assertEquals(MailUtil.sendMail(), "send email");
assertEquals(0, result);
assertEquals(0, result);
assertEquals(-1, result);
assertTrue(result > 0);
assertEquals(-1, result);
assertEquals(1, result);
assertTrue(result < 0);
assertEquals(poiBean.getName(), "yxy");
assertEquals(poiBean.getDescription(), "haha");
assertEquals(poiBean.getType(), "1");
assertEquals(poiBean.getId(), "1");
assertEquals(BigDecimal.ZERO, account.balance());
assertNull(Protected.object((List<?>) null)); assertSame(Collections.emptyList(), Protected.object(Collections.emptyList())); assertEquals(Collections.singletonList("a").getClass(), Protected.object(Arrays.asList("b")) .getClass()); assertEquals(input, output); assertNotSame(input, output); assertSame(output, Protected.object(output)); assertNotSame(output, Protected.object(input)); assertEquals("a", output.get(0));
assertSame(obj, Protected.object((Object) obj)); assertSame(obj, Protected.object((Object) builder)); assertSame(obj, Protected.object((JsonDdlObject) obj)); assertSame(obj, Protected.object((JsonDdlObject) builder));
assertEquals(input, output);
assertEquals(6, s.getModels().size());
assertNull(Protected.object((Map<?, ?>) null)); assertSame(Collections.emptyMap(), Protected.object(Collections.emptyMap())); assertEquals(Collections.singletonMap("a", "b").getClass(), Protected.object(singletonMap) .getClass()); assertEquals(input, output); assertNotSame(input, output); assertSame(output, Protected.object(output)); assertNotSame(output, Protected.object(input)); assertEquals("b", output.get("a"));
assertThat(dest).containsExactly(0, 0, 2, 2, 3, 6, 6, 7, 8, 8, 10, 11, 11);
assertThat(paramsRaw, is(expectedRaw)); assertThat(paramsNonRaw, is(expectedNonRaw));
assertEquals("Unexpected outputs", 2, outputs.size()); assertEquals("simple", outputs.get("simpleOutput")); assertEquals(Arrays.asList("Value 1", "Value 2"), outputs.get("moreOutputs"));
assertThat(paramsRaw, is(expectedRaw)); assertThat(paramsNonRaw, is(expectedNonRaw));
assertEquals(expectedInputs.size(), inputPorts.size()); assertTrue("Wrong input : " + inputPort.getName(), expectedInputs.remove(inputPort.getName())); assertEquals(expectedOutputs.size(), outputPorts.size()); assertTrue("Wrong output : " + outputPort.getName(), expectedOutputs.remove(outputPort.getName()));
assertEquals("Unexpected inputs", 0, activity.getInputPorts().size()); assertEquals("Unexpected outputs", 0, activity.getOutputPorts().size()); assertEquals("Unexpected inputs", 1, activity.getInputPorts().size()); assertEquals("Unexpected outputs", 2, activity.getOutputPorts().size()); assertEquals("Unexpected inputs", 1, activity.getInputPorts().size()); assertEquals("Unexpected outputs", 2, activity.getOutputPorts().size());
assertEquals("test-path", dcrawBin);
assertNotNull(builder); assertNotNull(d); assertThat(d, instanceOf(StateListDrawable.class));
assertEquals("expected", decoded);
assertEquals(141, time); assertEquals(141, time); assertEquals(133, time); assertEquals(133, time);
assertEquals(3334, time); assertEquals(3334, time); assertEquals(2251, time); assertEquals(2251, time);
assertNull(time); assertEquals(0, time.longValue()); assertEquals(1, time.longValue()); assertEquals(3, time.longValue()); assertNull(time);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("_"), "underscore"), new Translation(Language.of("de"), "de") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("_"), "underscore") )).isGreaterThan(0);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("<default>"), "default"), new Translation(Language.of("de"), "de") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("<default>"), "default") )).isGreaterThan(0);
assertThat(fileMatcher.matches(Paths.get("/my/root/foo.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/froo.properties"))).isFalse(); assertThat(fileMatcher.matches(Paths.get("/my/root/fro.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/aro.properties"))).isFalse();
assertThat(TRANSLATION_COMPARATOR.compare( t, t )).isEqualTo(0);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("de"), "de") )).isEqualTo(0);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("de_AT"), "de_AT") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de_AT"), "de_AT"), new Translation(Language.of("de"), "de") )).isGreaterThan(0);
assertThat(contentOf(f1)).isEqualTo("" + "# Comment 1\\n" + "key_A = A\\n" + "key_B = B\\n" + "\\n" + "# Comment 2\\n" + "key_F = F\\n" + "# Comment 3\\n" + "key_L = L\\n" );
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("de"), "zzz") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "zzz"), new Translation(Language.of("de"), "de") )).isGreaterThan(0);
assertThat(contentOf(f1)).isEqualTo("" + "# Comment 1\\n" + "key_A = A\\n" + "key_B = B\\n" + "# Comment 3\\n" + "key_F = F\\n" + "key_L = L\\n" + "\\n" + "# Comment 2\\n" );
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of("en"), "en") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("en"), "en"), new Translation(Language.of("de"), "de") )).isGreaterThan(0);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of(""), "empty"), new Translation(Language.of("_"), "underscore") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("_"), "underscore"), new Translation(Language.of(""), "empty") )).isGreaterThan(0);
assertThat(actual).isEqualTo(expected);
assertThat(contentOf(f1)).isEqualTo("" + "key1\\t=\\tvalue1\\n" + "key2\\t=\\tvalue2\\n" + "key3\\t=\\tvalue3\\n"); assertThat(contentOf(f2)).isEqualTo("" + "key1\\t=\\tvalue1\\n" + "key2\\t=\\tvalue2\\n" + "key3\\t=\\tvalue3\\n");
assertThat(helper.getBundlePrefix(ignorableBasePath.resolve("i18n/messages_de.properties"))).isEqualTo("i18n"); assertThat(helper.getBundlePrefix(ignorableBasePath.resolve("i18n/my/sub/options_de.properties"))).isEqualTo("i18n/my/sub");
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of(""), "empty"), new Translation(Language.of("<default>"), "default") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("<default>"), "default"), new Translation(Language.of(""), "empty") )).isGreaterThan(0);
assertThat(fileMatcher.matches(Paths.get("/my/root/foo.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/froo.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/fro.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/aro.properties"))).isFalse();
assertThat(fileMatcher.matches(Paths.get("/my/root/my.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/sub/my.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/sub/sub/my.properties"))).isTrue();
assertThat(fileMatcher.matches(Paths.get("/my/root/sub/my.properties"))).isTrue();
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("_"), "underscore"), new Translation(Language.of("<default>"), "default") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("<default>"), "default"), new Translation(Language.of("_"), "underscore") )).isGreaterThan(0);
assertThat(contentOf(f1)).isEqualTo("" + "# Comment 3\\n" + "key_A = A\\n" + "\\n" + "# Comment 2\\n" + "key_B = B\\n" + "# Comment 1\\n" + "key_F = F\\n" + "key_L = L\\n" );
assertThat(contentOf(f1)).isEqualTo("" + "key\\\\ \\\\\\n" + " one\\\\\\n" + " = value \\\\\\n" + " 1\\n" + "key\\\\ \\\\\\n" + " two\\\\\\r" + " = value \\\\\\r" + " 2\\n" );
assertThat(actual).isEqualTo(expected);
assertThat(contentOf(f1)).isEqualTo("" + "key\\\\ one = value 1\\n" + "key\\\\ two = value 2\\n" );
assertThat(actual).isEqualTo(expected);
assertThat(contentOf(f1)).isEqualTo("" + "key\\\\ \\\\\\n" + " 1\\\\\\n" + " = value \\\\\\n" + " 1\\n" + "\\n" + " # some comment\\n" + "key\\\\ \\\\\\n" + " 2\\\\\\n" + " = value \\\\\\n" + " 2\\n" + "key\\\\ \\\\\\n" + " 3\\\\\\n" + " = value \\\\\\n" + " 3\\n" );
assertThat(fileMatcher.matches(Paths.get("/my/root/sub/my.properties"))).isTrue(); assertThat(fileMatcher.matches(Paths.get("/my/root/sub/ex.properties"))).isFalse(); assertThat(fileMatcher.matches(Paths.get("/my/root/sub/other.properties"))).isTrue();
assertThat(TRANSLATION_COMPARATOR.compare( null, null )).isEqualTo(0);
assertThat(helper.getBundlePrefix(ignorableBasePath.resolve("i18n/messages_de.properties"))).isEqualTo("i18n"); assertThat(helper.getBundlePrefix(ignorableBasePath.resolve("i18n/messages_de.properties").toFile())).isEqualTo("i18n"); assertThat(helper.getBundlePrefix(new File(ignorableBasePath.toFile(), "i18n/messages_de.properties"))).isEqualTo("i18n");
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), null )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( null, new Translation(Language.of("de"), "de") )).isGreaterThan(0);
assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of(""), "empty"), new Translation(Language.of("de"), "de") )).isLessThan(0); assertThat(TRANSLATION_COMPARATOR.compare( new Translation(Language.of("de"), "de"), new Translation(Language.of(""), "empty") )).isGreaterThan(0);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertNotNull(reactiveTrigger); assertEquals(reactiveTrigger.getTriggerEvent(), INSERT); assertEquals(reactiveTrigger.getTriggerTime(), AFTER); assertEquals(reactiveTrigger.getTriggerTable(), TRIGGER_TABLE); assertEquals(reactiveTrigger.getTableColumns(), TABLE_COLS); assertEquals(reactiveTrigger.getTriggerName(), String.format(TRIGGER_NAME_TEMPLATE, AFTER, INSERT, TRIGGER_TABLE));
assertEquals(listener.getId(), 0L); assertNotEquals(persistedListener.getId(), 0L);
assertTrue(newEvents.isEmpty()); assertEquals(newEvents.size(), 1);
assertEquals(query, expected);
assertTrue(Map.class.isAssignableFrom(event.getNewEntity().get("value").getClass()));
assertEquals(parsedMap.size(), 0);
assertEquals(trigger.getDropSql(), "DROP TRIGGER IF EXISTS " + TRIGGER_NAME);
assertEquals(query, expected);
assertEquals(repo.findByTableName(TEST_TABLE_NAME, connection).size(), 0);
assertEquals(parsedMap.get("key"), "value"); assertEquals(parsedMap.get("key2"), 1);
assertNotNull(reactiveTrigger); assertEquals(reactiveTrigger.getTriggerEvent(), DELETE); assertEquals(reactiveTrigger.getTriggerTime(), AFTER); assertEquals(reactiveTrigger.getTriggerTable(), TRIGGER_TABLE); assertEquals(reactiveTrigger.getTableColumns(), TABLE_COLS); assertEquals(reactiveTrigger.getTriggerName(), String.format(TRIGGER_NAME_TEMPLATE, AFTER, DELETE, TRIGGER_TABLE));
assertEquals(query, expected);
assertEquals(events.size(), 1); assertEquals(events.get(0).getEventId(), event.getEventId());
assertTrue(triggerSql.contains(TRIGGER_NAME)); assertTrue(triggerSql.contains("\'" + TRIGGER_TABLE + "\'")); assertTrue(triggerSql.contains(TRIGGER_TABLE)); assertTrue(triggerSql.contains(INSERT.toString())); assertTrue(triggerSql.contains("\'" + INSERT.toString() + "\'")); assertTrue(triggerSql.contains(AFTER.toString()));
assertEquals(event.getEventType(), Event.UPDATE_TYPE); assertEquals(event.getEntityName(), "test"); assertEquals(event.getNewEntity(), expectedNewEntity); assertEquals(event.getOldEntity(), expectedOldEntity);
assertEquals(reactiveTrigger.newJson(), "\'{}\'");
assertTrue(initialLastCheck.before(listener.getLastCheck()));
assertEquals(event.getOldEntity(), Maps.newHashMap());
assertTrue(triggerSql.contains("NEW.ID")); assertTrue(triggerSql.contains("NEW.TXT")); assertTrue(triggerSql.contains("OLD.ID")); assertTrue(triggerSql.contains("OLD.TXT"));
assertEquals(genericEvent.getEventType(), mysqlEvent.getEventType()); assertEquals(genericEvent.getEntityName(), mysqlEvent.getEntityName()); assertEquals(genericEvent.getNewEntity().size(), 1); assertEquals(genericEvent.getOldEntity().size(), 0);
assertEquals(mysqlEvents.size(), 4); assertEquals(mysqlEvents.get(0).getEventId(), 3); assertEquals(mysqlEvents.get(1).getEventId(), 1); assertEquals(mysqlEvents.get(2).getEventId(), 2); assertEquals(mysqlEvents.get(3).getEventId(), 4);
assertTrue(triggerSql.contains("NEW.ID")); assertTrue(triggerSql.contains("NEW.TXT")); assertFalse(triggerSql.contains("OLD.ID")); assertFalse(triggerSql.contains("OLD.TXT"));
assertEquals(getEventsCount(), initialEventsCount + 1);
assertFalse(eventSource.isConnected());
assertFalse(reactiveDatasource.isStarted());
assertEquals(listAllListeners().size(), 1);
assertFalse(eventSource.isConnected());
assertEquals(pollerThread.getState(), TERMINATED);
assertEquals(getEventsCount(), initialEventsCount + 1);
assertEquals(listener.getLastEventId(), 0l);
assertEquals(getEventsCount(), initialEventsCount + 1);
assertTrue(newEventsForListener.isEmpty());
assertNotNull(reactiveTrigger); assertEquals(reactiveTrigger.getTriggerEvent(), UPDATE); assertEquals(reactiveTrigger.getTriggerTime(), AFTER); assertEquals(reactiveTrigger.getTriggerTable(), TRIGGER_TABLE); assertEquals(reactiveTrigger.getTableColumns(), TABLE_COLS); assertEquals(reactiveTrigger.getTriggerName(), String.format(TRIGGER_NAME_TEMPLATE, AFTER, UPDATE, TRIGGER_TABLE));
assertFalse(eventSource.isConnected());
assertFalse(triggerSql.contains("NEW.ID")); assertFalse(triggerSql.contains("NEW.TXT")); assertTrue(triggerSql.contains("OLD.ID")); assertTrue(triggerSql.contains("OLD.TXT"));
assertEquals(reactiveTrigger.oldJson(), "\'{}\'");
assertEquals(columnNames.size(), 2); assertTrue(columnNames.contains("ID")); assertTrue(columnNames.contains("TXT"));
assertFalse(TextUtils.isEmpty(Utils.calcFingerprint(localCert))); assertEquals(17187, data.length); assertNotNull(IndexUpdater.getSigningCertFromJar(indexEntry));
assertNotNull(cursor); assertEquals(0, cursor.getCount()); assertNotNull(cursor); assertEquals(1, cursor.getCount()); assertEquals("org.fdroid.fdroid", toCheck.packageName); assertEquals(13, toCheck.versionCode);
assertEquals(3, apps.length);
assertNotNull(cursor);
assertEquals(defaultRepos.size(), defaultRepoCount); assertEquals(defaultRepoCount + 1, defaultRepos.size()); assertEquals(2, RepoProvider.Helper.countEnabledRepos(context)); assertEquals(defaultRepoCount, defaultRepos.size()); assertEquals(1, RepoProvider.Helper.countEnabledRepos(context));
assertNotNull(cursor); assertEquals(0, cursor.getCount()); assertNotNull(cursor); assertEquals(1, cursor.getCount()); assertEquals("org.fdroid.fdroid", app.packageName); assertEquals("F-Droid", app.name); assertNotNull(otherApp); assertEquals("org.fdroid.fdroid", otherApp.packageName); assertEquals("F-Droid", otherApp.name);
assertEquals(2,content.keySet().size()); assertTrue(content.keySet().contains("Power.fbmodel")); assertTrue(content.keySet().contains("Power.mapping"));
assertTrue(report.isValid()); assertNotNull(report.getMessage());
assertThat(HTTP.charsetFromContentType("text/html; charset=UTF-8")).isEqualTo(Optional.of("UTF-8")); assertThat(HTTP.charsetFromContentType("application/json; charset=ISO-8859-1")).isEqualTo(Optional.of("ISO-8859-1")); assertThat(HTTP.charsetFromContentType("application/json")).isEqualTo(Optional.<String>absent());
assertThat(request.header("ETag")).isEqualTo("5a105e8b9d40e1329780d62ea2265d8a");
assertThat(HTTP.getContentTypeFromExtension("test.js")).isEqualTo(Optional.of("application/x-javascript")); assertThat(HTTP.getContentTypeFromExtension("html")).isEqualTo(Optional.of("text/html")); assertThat(HTTP.getContentTypeFromExtension("css")).isEqualTo(Optional.of("text/css"));
assertThat(repo.findUserByName("jane").isPresent()).isFalse();
assertThat(httpRequest.code()).isEqualTo(200); assertThat(httpRequest.body().trim()).isEqualTo("{\\n" + " \\"@class\\" : \\".PolymorphicResource$B\\",\\n" + " \\"a\\" : \\"a3\\",\\n" + " \\"b\\" : \\"b\\"\\n" + "}");
assertThat(match.isPresent()).isTrue(); assertThat(match.get().getPathParams()).isEqualTo(ImmutableMap.of("name", "johndoe")); assertThat(match.get().getPathParam("name")).isEqualTo("johndoe"); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse();
assertThat(getInheritedClasses(DummyClass.class)).containsExactly(Object.class);
assertThat(httpRequest.code()).isEqualTo(200);
assertThat(s).isEqualTo("{\\"key1\\":\\"value1\\"}");
assertThat(getInheritedClasses(Number.class)).containsOnly(Serializable.class, Object.class); assertThat(getInheritedClasses(AbstractCollection.class)).containsOnly(Collection.class, Iterable.class, Object.class);
assertThat(factory).isNotNull().isSameAs(Factory.getInstance());
assertThat(resource).doesNotExist(); assertThat(resource).exists(); assertThat(events).hasSize(1); assertThat(events.get(0)).isInstanceOf(ClasspathResourceEvent.class);
assertThat(resource).doesNotExist(); assertThat(resource).doesNotExist(); assertThat(events).isEmpty();
assertThat(watchEventCoalescor.removeNoise(noise)).isTrue(); assertThat(watchEventCoalescor.scheduledEvents).hasSize(1); assertThat(watchEventCoalescor.scheduledEvents.get(0).isPresent()).isFalse();
assertThat(m.getMessage("key1", Locale.ENGLISH)).isEqualTo("Hello!"); assertThat(m.getMessage("key1", Locale.ENGLISH)).isEqualTo("Greetings!"); assertThat(file).hasContent("key1=Greetings!\\nkey2=Hello {{who}}!");
assertThat(factory.getComponents(Integer.class)).containsExactly(2);
assertThat(watchEventCoalescor.removeNoise(noise)).isTrue(); assertThat(watchEventCoalescor.scheduledEvents).hasSize(1); assertThat(event.getPath()).isEqualTo(Paths.get("tmp/foo")); assertThat(event.getKind()).isEqualTo(StandardWatchEventKinds.ENTRY_MODIFY);
assertThat(match.isPresent()).isTrue(); assertThat(match.get().getPathParams()).isEqualTo(ImmutableMap.of("name", "johndoe", "child1", "bobby", "child2", "drake")); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse();
assertThat(watchEventCoalescor.removeNoise(noise)).isTrue(); assertThat(watchEventCoalescor.scheduledEvents).hasSize(1); assertThat(event.getPath()).isEqualTo(Paths.get("tmp/foo")); assertThat(event.getKind()).isEqualTo(StandardWatchEventKinds.ENTRY_CREATE);
assertThat(targetDir.toFile()).exists(); assertThat(targetDir.resolve("test").toFile()).exists().hasContent("test"); assertThat(targetDir.resolve("subfolder/test2").toFile()).exists().hasContent("test2");
assertThat(repo.findUserByName("jane").isPresent()).isFalse(); assertThat(repo.findUserByName("jane").isPresent()).isFalse();
assertThat(repo.findCredentialByUserName("admin").isPresent()).isFalse(); assertThat(repo.findCredentialByUserName("john")).isEqualTo(Optional.of("johnpwd"));
assertThat(getInheritedClasses(void.class)).isEmpty(); assertThat(getInheritedClasses(int.class)).isEmpty(); assertThat(getInheritedClasses(double.class)).isEmpty();
assertThat(m.getMessage("key1", Locale.ENGLISH)).isEqualTo("Hello!"); assertThat(m.getMessage("key1", Locale.FRENCH)).isEqualTo("Bonjour !");
assertThat(repo.findCredentialByUserName("john")).isEqualTo(Optional.of("johnpwd")); assertThat(repo.findCredentialByUserName("john")).isEqualTo(Optional.of("johnpwd2"));
assertThat(getInheritedClasses(ArrayList.class)).containsOnly( AbstractList.class, AbstractCollection.class, Object.class, List.class, Collection.class, Iterable.class, Serializable.class, RandomAccess.class, Cloneable.class ); assertThat(getInheritedClasses(FileOutputStream.class)).containsOnly( OutputStream.class, Object.class, Closeable.class, AutoCloseable.class, Flushable.class );
assertThat(match.isPresent()).isTrue(); assertThat(match.get().getPathParams()).isEmpty(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse();
assertThat(new File(dest, "A.txt")).exists(); assertThat(new File(dest, "1/B.txt")).exists(); assertThat(new File(dest, "1/C.txt")).exists(); assertThat(new File(dest, "2/D.txt")).exists(); assertThat(new File(dest, "2/E.txt")).exists().hasContent("hello");
assertThat(watchEventCoalescor.removeNoise(noise1)).isTrue(); assertThat(watchEventCoalescor.scheduledEvents).hasSize(1); assertThat(event.getPath()).isEqualTo(Paths.get("tmp/foo")); assertThat(event.getKind()).isEqualTo(StandardWatchEventKinds.ENTRY_MODIFY);
assertThat(watchEventCoalescor.removeNoise(noise1)).isTrue(); assertThat(watchEventCoalescor.scheduledEvents).hasSize(4); assertThat(watchEventCoalescor.scheduledEvents).extracting("reference").extracting("kind") .containsExactly( StandardWatchEventKinds.ENTRY_MODIFY, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY, StandardWatchEventKinds.ENTRY_CREATE );
assertThat(allSpecs).isNotEmpty().containsKey("cases/test/test.spec.yaml"); assertThat(allSpecs.get("cases/test/test.spec.yaml").getTitle()).isEqualTo("should say hello");
assertThat(getInheritedClasses(B.class)).containsOnly(A.class, Object.class); assertThat(getInheritedClasses(C.class)).containsOnly(B.class, A.class, Object.class);
assertThat(fromOtherThread[0]).isNotEqualTo(now).isNotEqualTo(0);
assertThat(MoreObjects.toString(classloader("Test"))).isEqualTo("Test"); assertThat(MoreObjects.toString(classloader("Test\\ntest"))).isEqualTo("Test"); assertThat(MoreObjects.toString(classloader("Test\\r\\ntest"))).isEqualTo("Test");
assertThat(getInheritedClasses(Externalizable.class)).containsExactly(Serializable.class);
assertThat(watchEventCoalescor.scheduledEvents).extracting("reference").extracting("path") .containsOnly( Paths.get("tmp/foo"), Paths.get("tmp/bar"), Paths.get("tmp/test"), Paths.get("tmp/another_file.txt") );
assertThat(repo.findUserByName("admin").isPresent()).isFalse();
assertThat(TypeHelper.toTypeDescription(this.stringedType)).isEqualTo(this.expectedTypeDescription);
assertThat(request.code()).isEqualTo(304);
assertThat(cookieDescriptor.getCookieName(), is(equalTo(this.expectedCookieName))); assertThat(cookieDescriptor.getCookieSignatureName(), is(equalTo(this.expectedCookieSignatureName)));
assertThat(m.keys()).containsOnly("key1", "key2");
assertThat(match.isPresent()).isTrue(); assertThat(match.get().getPathParams()).isEqualTo(ImmutableMap.of("name", "johndoe", "child1", "bobby", "child2", "drake")); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse(); assertThat(match.isPresent()).isFalse();
assertThat(m.getMessage("key2", MessageParams.of("who", "World"), Locale.ENGLISH)).isEqualTo("Hello World!"); assertThat(m.getMessage("key2", MessageParams.of("who", "World"), Locale.FRENCH)).isEqualTo("Bonjour World !");
assertThat(actual).isEqualTo(MoreFiles.removeWindowsCarriageReturnsBeforeLF( Resources.toString(Resources.getResource("restx/tests/expected_restx_case_example_1.yaml"), Charsets.UTF_8) ));
assertThat(Roles.getInterpolatedRoleName(this.rawName, this.oids)).isEqualTo(this.expectedInterpolatedRole);
assertThat(restxSession).isNotNull(); assertThat(restxSession.getPrincipal().isPresent()).isFalse();
assertThat(resource.filterSpecsByOperation(allSpecs, "GET", "/messages/{id}")) .isNotEmpty().containsExactly("cases/test/test.spec.yaml"); assertThat(resource.filterSpecsByOperation(allSpecs, "GET", "/messages")) .isNotEmpty().containsExactly("cases/test/test2.spec.yaml");
assertThat(m.getMessageTemplate("key2", Locale.ENGLISH)).isEqualTo("Hello {{who}}!"); assertThat(m.getMessageTemplate("key2", Locale.FRENCH)).isEqualTo("Bonjour {{who}} !");
assertThat(TypeHelper.getTypeExpressionFor(this.stringedType)).isEqualTo(this.expectedTypeExpression);
assertNull(leftTrim(null)); assertEquals(leftTrim(""), ""); assertEquals(leftTrim(" \\t "), ""); assertEquals(leftTrim(" 123"), "123"); assertEquals(leftTrim("\\t123"), "123"); assertEquals(leftTrim("\\n123"), "123"); assertEquals(leftTrim("123"), "123"); assertEquals(leftTrim(" \\n 123"), "123"); assertEquals(leftTrim("123 "), "123 "); assertEquals(leftTrim(" 3 123 "), "3 123 ");
assertTrue(allHasText("fg", "a", "hyh")); assertFalse(allHasText("fg", null, "hyh")); assertFalse(allHasText("fg", " ", "hyh"));
assertTrue(allNullOrEmpty("", "", null)); assertFalse(allNullOrEmpty("", null, "hyh")); assertFalse(allNullOrEmpty(" ", "", ""));
assertEquals(content, "\\u015fey");
assertEquals("873362e429c261e3596ad1d387ad152e", Bytes.toHex(Files.calculateMD5(new File("test/file_for_md5.txt"))));
assertEquals(s.trim(), "uno"); assertEquals(s.trim(), "dos"); assertEquals(s.trim(), "tres"); assertEquals(i, 17);
assertEquals(subStringUntilFirst("hello", "el"), "h"); assertEquals(subStringUntilFirst("hellohello", "el"), "h"); assertEquals(subStringUntilFirst("hello", "hello"), ""); assertEquals(subStringUntilFirst("hello", ""), "hello"); assertEquals(subStringUntilFirst("hello", null), "hello"); assertEquals(subStringUntilFirst("", "el"), ""); assertEquals(subStringUntilFirst(null, "el"), null);
assertEquals(s, "uno"); assertEquals(s, "dos");
assertNull(reverse(null), null); assertEquals(reverse(""), ""); assertEquals(reverse("a"), "a"); assertEquals(reverse("ab"), "ba"); assertEquals(reverse("ab cd "), " dc ba");
assertEquals(null, capitalizeFully(null)); assertEquals("", capitalizeFully("")); assertEquals(" ", capitalizeFully(" ")); assertEquals("I", capitalizeFully("I")); assertEquals("I", capitalizeFully("i")); assertEquals("I Am Here 123", capitalizeFully("i am here 123")); assertEquals("I Am Here 123", capitalizeFully("I Am Here 123")); assertEquals("I Am Here 123", capitalizeFully("i am HERE 123")); assertEquals("I Am Here 123", capitalizeFully("I AM HERE 123"));
assertTrue(isNullOrEmpty(null)); assertTrue(isNullOrEmpty("")); assertFalse(isNullOrEmpty("\\n")); assertFalse(isNullOrEmpty("\\t")); assertFalse(isNullOrEmpty(" ")); assertFalse(isNullOrEmpty("a")); assertFalse(isNullOrEmpty("as"));
assertEquals(list.size(), 17); assertEquals(list.get(1), "uno"); assertEquals(list.get(2), " dos");
assertEquals(null, capitalize(null)); assertEquals("", capitalize("")); assertEquals(" ", capitalize(" ")); assertEquals("I", capitalize("I")); assertEquals("I", capitalize("i")); assertEquals("I Am Here 123", capitalize("i am here 123")); assertEquals("I Am Here 123", capitalize("I Am Here 123")); assertEquals("I Am HERE 123", capitalize("i am HERE 123")); assertEquals("I AM HERE 123", capitalize("I AM HERE 123"));
assertEquals(subStringUntilLast("hello", "el"), "h"); assertEquals(subStringUntilLast("hellohello", "el"), "helloh"); assertEquals(subStringUntilLast("hello", "hello"), ""); assertEquals(subStringUntilLast("hello", ""), "hello"); assertEquals(subStringUntilLast("hello", null), "hello"); assertEquals(subStringUntilLast("", "el"), ""); assertEquals(subStringUntilLast(null, "el"), null);
assertEquals(Bytes.normalize(0xff, 8), -1); assertEquals(Bytes.normalize(0x8000, 16), Short.MIN_VALUE);
assertFalse(hasText(null)); assertTrue(hasText("a")); assertTrue(hasText("abc")); assertFalse(hasText("")); assertFalse(hasText(null)); assertFalse(hasText(" ")); assertFalse(hasText("\\t")); assertFalse(hasText("\\n")); assertFalse(hasText(" \\t"));
assertEquals(subStringAfterFirst("hello", "el"), "lo"); assertEquals(subStringAfterFirst("hellohello", "el"), "lohello"); assertEquals(subStringAfterFirst("hello", "hello"), ""); assertEquals(subStringAfterFirst("hello", ""), "hello"); assertEquals(subStringAfterFirst("hello", null), "hello"); assertEquals(subStringAfterFirst("", "el"), ""); assertEquals(subStringAfterFirst(null, "el"), null);
assertEquals(list.size(), 12); assertEquals(list.get(0), "uno"); assertEquals(list.get(1), "dos");
assertEquals(null, capitalize(null, null)); assertEquals("", capitalize("", new char[0])); assertEquals(" ", capitalize(" ", new char[0]));
assertEquals(null, rightPad(null, 5)); assertEquals(" ", rightPad("", 5)); assertEquals("abc ", rightPad("abc", 5)); assertEquals("abc", rightPad("abc", 2)); assertEquals("abc", rightPad("abc", -1));
assertEquals(null, wrap(null, 20)); assertEquals(null, wrap(null, -1)); assertEquals("", wrap("", 20)); assertEquals("", wrap("", -1)); assertEquals(expected, wrap(input, 20)); assertEquals(expected, wrap(input, 20)); assertEquals(expected, wrap(input, 20));
assertEquals(null, initials(null)); assertEquals("", initials("")); assertEquals("", initials(" ")); assertEquals("I", initials("I")); assertEquals("i", initials("i")); assertEquals("BJL", initials("Ben John Lee")); assertEquals("BJ", initials("Ben J.Lee")); assertEquals("BJ.L", initials(" Ben John . Lee")); assertEquals("iah1", initials("i am here 123"));
assertEquals(null, leftPad(null, 5)); assertEquals(" ", leftPad("", 5)); assertEquals(" abc", leftPad("abc", 5)); assertEquals("abc", leftPad("abc", 2));
assertEquals(null, capitalizeFully(null, null)); assertEquals("", capitalizeFully("", new char[0])); assertEquals(" ", capitalizeFully(" ", new char[0]));
assertNull(rightTrim(null)); assertEquals(rightTrim(""), ""); assertEquals(rightTrim(" \\t"), ""); assertEquals(rightTrim("aaa "), "aaa"); assertEquals(rightTrim("aaa \\t "), "aaa"); assertEquals(rightTrim("aaa\\n "), "aaa"); assertEquals(rightTrim("aaa"), "aaa"); assertEquals(rightTrim(" 123 "), " 123"); assertEquals(rightTrim(" 3 123 \\t"), " 3 123");
assertEquals(eliminateWhiteSpaces(null), null); assertEquals(eliminateWhiteSpaces(""), ""); assertEquals(eliminateWhiteSpaces("asd"), "asd"); assertEquals(eliminateWhiteSpaces("a "), "a"); assertEquals(eliminateWhiteSpaces("a a "), "aa"); assertEquals(eliminateWhiteSpaces("a \\t a \\t\\r\\f"), "aa");
assertEquals(null, uncapitalize(null, null)); assertEquals("", uncapitalize("", new char[0])); assertEquals(" ", uncapitalize(" ", new char[0]));
assertTrue("Theme holo_light should be light theme", WizardManagerHelper.isLightTheme(intent, false));
assertNull("Partner should be null", partner);
assertEquals(def, WizardManagerHelper.getThemeRes("abracadabra", def));
assertSame(mHeaderTextView, mixin.getTextView());
assertTrue("Theme material_light should be light theme", WizardManagerHelper.isLightTheme(intent, false));
assertEquals(originalSize + 3, mExprModel.size()); assertEquals(2, bindingExprs.size()); assertTrue(bindingExprs.get(0) instanceof FieldAccessExpr); assertTrue(bindingExprs.get(1) instanceof FieldAccessExpr); assertEquals(2, id.getParents().size()); assertTrue(bindingExprs.get(0).getChildren().contains(id)); assertTrue(bindingExprs.get(1).getChildren().contains(id));
assertSame(mAdapter, mixin.getAdapter());
assertFalse("Theme glif_pixel should be dark theme", WizardManagerHelper.isLightTheme(intent, false)); assertFalse("Theme glif_pixel should be dark theme", WizardManagerHelper.isLightTheme(intent, true));
assertTrue("Is setup wizard should be true", WizardManagerHelper.isSetupWizardIntent(intent));
assertNull("PeekProgressBar should return null initially", layout.peekProgressBar());
assertEquals("Header text should be \\"Abracadabra\\"", "Abracadabra", title.getText());
assertNotNull("Foo button should exist", mStubParent.findViewWithTag("foo")); assertNotNull("space should exist", mStubParent.findViewWithTag("space")); assertNull("Foo button should be removed", mStubParent.findViewWithTag("foo")); assertNull("Space should be removed", mStubParent.findViewWithTag("space"));
assertEquals("Partner value should default to 0xff448aff", 0xff448aff, partnerValue); assertFalse("Partner value should come from fallback", entry.isOverlay);
assertEquals("Title view should label for switch", R.id.suw_items_switch, titleView.getLabelFor());
assertNotNull("Progress bar should be available after setting to shown", progressBar); assertEquals(View.VISIBLE, progressBar.getVisibility());
assertNotNull("Background should be set", viewHolder.itemView.getBackground()); assertEquals("foobar", viewHolder.itemView.getTag());
assertSame("The view added should be the same text view", tv, view);
assertSame(mListView, mixin.getListView());
assertNotNull(mStubParent.findViewWithTag("space")); assertEquals("Space should have weight of 1", 1f, ((LinearLayout.LayoutParams) space.getLayoutParams()).weight, 0.001);
assertTrue("isLightTheme should return default value true", WizardManagerHelper.isLightTheme(intent, true)); assertFalse("isLightTheme should return default value false", WizardManagerHelper.isLightTheme(intent, false));
assertEquals("Button label should be kept initially", "OriginalLabel", button.getText()); assertEquals("TestMoreLabel", button.getText()); assertEquals("OriginalLabel", button.getText());
assertEquals("Theme extra should be the same as original intent", "test_theme", nextIntent.getStringExtra("theme")); assertFalse("ignoreExtra should not be in nextIntent", nextIntent.hasExtra("ignoreExtra")); assertEquals("Result code extra should be RESULT_OK", Activity.RESULT_OK, nextIntent.getIntExtra("com.android.setupwizard.ResultCode", 0)); assertEquals("Extra data should surface as extra in nextIntent", "shazam", nextIntent.getStringExtra("extraData"));
assertTrue("Switch should be checked", mSwitch.isChecked()); assertFalse("Switch should be unchecked", mSwitch.isChecked());
assertTrue("Theme glif_light should be light theme", WizardManagerHelper.isLightTheme(intent, false)); assertTrue("Theme glif_light should be light theme", WizardManagerHelper.isLightTheme(intent, true));
assertSame(drawable, mIconView.getDrawable());
assertEquals(R.style.SuwThemeGlif_Light, WizardManagerHelper.getThemeRes("glif_light", 0));
assertEquals(android.R.id.text1, view.getId()); assertNotNull(layout.findViewById(android.R.id.text1));
assertEquals(R.style.SuwThemeMaterial_Light, WizardManagerHelper.getThemeRes("material_light", 0));
assertEquals(R.style.SuwThemeGlif, WizardManagerHelper.getThemeRes("glif", 0));
assertTrue(WizardManagerHelper.isUserSetupComplete(application)); assertFalse(WizardManagerHelper.isUserSetupComplete(application));
assertNotNull("Peek progress bar should return the bar after setProgressBarShown(true)", layout.peekProgressBar());
assertTrue("Default button should be enabled", button.isEnabled()); assertTrue("Default button text should be empty", TextUtils.isEmpty(button.getText()));
assertNull("PeekProgressBar should return null when stub not inflated yet", mixin.peekProgressBar()); assertNotNull("PeekProgressBar should be available after setting to shown", mixin.peekProgressBar());
assertSame(mAdapter, mixin.getAdapter());
assertEquals(Color.RED, ((GlifPatternDrawable) getPhoneBackground(layout)).getColor()); assertEquals(Color.RED, layout.getBackgroundBaseColor().getDefaultColor());
assertEquals(R.style.SuwThemeMaterial, WizardManagerHelper.getThemeRes(intent, 0));
assertEquals(R.style.SuwThemeMaterial, WizardManagerHelper.getThemeRes("material", 0));
assertTrue(mixin.isShown()); assertFalse(mixin.isShown());
assertTrue("Theme glif_pixel_light should be light theme", WizardManagerHelper.isLightTheme(intent, false)); assertTrue("Theme glif_pixel_light should be light theme", WizardManagerHelper.isLightTheme(intent, true));
assertNull("Background should be null", viewHolder.itemView.getBackground());
assertEquals("ButtonItem theme should be SuwButtonItem.Colored", R.style.SuwButtonItem_Colored, item.getTheme()); assertNotNull(button.getContext().getTheme());
assertSame("createButton should be reused", button, button2); assertNull("Should be removed from parent after createButton", button2.getParent());
assertEquals(R.style.SuwThemeGlifPixel_Light, WizardManagerHelper.getThemeRes("glif_pixel_light", 0));
assertNotNull("Foo button should exist", mStubParent.findViewWithTag("foo")); assertNotNull("space should exist", mStubParent.findViewWithTag("space")); assertNotNull("Foo button should not be removed", mStubParent.findViewWithTag("foo")); assertNull("Space should be removed", mStubParent.findViewWithTag("space"));
assertEquals("Foobar", mHeaderTextView.getText());
assertEquals(ColorStateList.valueOf(Color.MAGENTA), mHeaderTextView.getTextColors());
assertFalse("Theme holo should not be light theme", WizardManagerHelper.isLightTheme(intent, true));
assertEquals("Should have 0 child", 0, mItemGroup.getCount());
assertNotNull("@id/test_template_view should exist in template", templateView); assertNotNull("@id/test_template_view should exist in template", templateView); assertSame("The view added should be the same text view", tv, contentView);
assertSame(mRecyclerView, mixin.getRecyclerView());
assertSame("lorem ipsum", mixin.getNextButtonText());
assertFalse("Is setup wizard should be true", WizardManagerHelper.isSetupWizardIntent(intent));
assertEquals(c, mExprModel.register(c2));
assertEquals(def, WizardManagerHelper.getThemeRes((String) null, def));
assertNotEquals(View.VISIBLE, progressBar.getVisibility());
assertNull(mRecyclerView.getAdapter()); assertSame(mAdapter, mRecyclerView.getAdapter());
assertNotNull("Partner should not be null", partner);
assertEquals("More button should be visible", View.VISIBLE, navigationBar.getMoreButton().getVisibility()); assertEquals("Next button should be hidden", View.GONE, navigationBar.getNextButton().getVisibility()); assertEquals("More button should be hidden", View.GONE, navigationBar.getMoreButton().getVisibility()); assertEquals("Next button should be visible", View.VISIBLE, navigationBar.getNextButton().getVisibility());
assertEquals("Partner value should default to 0xff448aff", 0xff448aff, partnerValue); assertFalse("Partner value should come from fallback", entry.isOverlay);
assertEquals("lorem ipsum", mHeaderTextView.getText());
assertNotNull("Get scroll view should not be null with default template", layout.getScrollView());
assertEquals(ColorStateList.valueOf(Color.GREEN), mixin.getColor());
assertNull("getMixin for a mixin that doesn\'t exist should return null", mixin);
assertTrue("isLightTheme should return default value true", WizardManagerHelper.isLightTheme(intent, true)); assertFalse("isLightTheme should return default value false", WizardManagerHelper.isLightTheme(intent, false));
assertEquals(R.style.SuwThemeGlifPixel, WizardManagerHelper.getThemeRes("glif_pixel", 0));
assertEquals(originalSize + 1, mExprModel.size()); assertEquals(value.getClass(), IdentifierExpr.class); assertEquals("test", id.getName()); assertEquals(new JavaClass(String.class), id.getResolvedType()); assertTrue(id.isDynamic());
assertNull("Partner should be null", partner);
assertTrue(WizardManagerHelper.isDeviceProvisioned(application)); assertFalse(WizardManagerHelper.isDeviceProvisioned(application));
assertNotNull(button); assertNotNull(mStubParent.findViewWithTag("button")); assertEquals("Next", button.getText()); assertEquals(dp2Px(16), button.getPaddingLeft()); assertEquals(dp2Px(16), button.getPaddingRight());
assertEquals(android.R.id.text1, view.getId()); assertNotNull(layout.findViewById(android.R.id.text1));
assertEquals("More", mNavigationBar.getNextButton().getText()); assertEquals("Foobar", mNavigationBar.getNextButton().getText());
assertNotNull("Foo button should exist", mStubParent.findViewWithTag("foo")); assertNotNull("Bar button should exist", mStubParent.findViewWithTag("bar")); assertNull("Foo button should be removed", mStubParent.findViewWithTag("foo")); assertNotNull("Bar button should not be removed", mStubParent.findViewWithTag("bar"));
assertNotNull(button); assertNotNull(mStubParent.findViewById(id)); assertEquals("foobar", button.getText()); assertEquals(dp2Px(16), button.getPaddingLeft()); assertEquals(dp2Px(16), button.getPaddingRight());
assertTrue(WizardManagerHelper.isUserSetupComplete(application)); assertFalse(WizardManagerHelper.isUserSetupComplete(application));
assertTrue(WizardManagerHelper.isDeviceProvisioned(application)); assertFalse(WizardManagerHelper.isDeviceProvisioned(application));
assertEquals("Lorem ipsum", mixin.getText());
assertEquals("ButtonItem text should be \\"lorem ipsum\\"", "lorem ipsum", item.getText()); assertEquals("Button text should be \\"lorem ipsum\\"", "lorem ipsum", button.getText());
assertEquals("Primary color should be red", ColorStateList.valueOf(Color.RED), layout.getPrimaryColor()); assertEquals("Progress bar should be tinted red", ColorStateList.valueOf(Color.RED), progressBar.getIndeterminateTintList()); assertEquals("Determinate progress bar should also be tinted red", ColorStateList.valueOf(Color.RED), progressBar.getProgressBackgroundTintList());
assertFalse("Theme glif should be dark theme", WizardManagerHelper.isLightTheme(intent, false)); assertFalse("Theme glif should be dark theme", WizardManagerHelper.isLightTheme(intent, true));
assertSame("Find item 23456 should return child 2", CHILD_2, mItemGroup.findItemById(23456));
assertNull(mListView.getAdapter()); assertSame(mAdapter, mListView.getAdapter());
assertEquals("Button\'s id should be set", item.createButton(mParent).getId(), id);
assertFalse("Theme material should not be light theme", WizardManagerHelper.isLightTheme(intent, true));
assertSame("Item at position 0 should be child1", CHILD_1, mItemGroup.getItemAt(0)); assertSame("Item at position 1 should be child3", CHILD_3, mItemGroup.getItemAt(1)); assertEquals("Should have 2 children", 2, mItemGroup.getCount());
assertSame(mIconView, mixin.getView());
assertSame("Root item hierarchy should be mItemGroup", mItemGroup, root);
assertSame(mNavigationBar, mixin.getNavigationBar());
assertSame("Clicked LinkSpan should be passed to setup", linkSpan, context.clickedSpan);
assertSame(drawable, mixin.getIcon());
assertEquals(expResult, result);
assertEquals("I live here 42", patientInfo.getAddress().getStreetAddress()); assertEquals("ECU", patientInfo.getAddress().getCountry());
assertEquals(author1, docEntry.getAuthor());
assertEquals(2, received.size()); assertEquals("bla", getContent(received.get(0))); assertEquals("blu", getContent(received.get(1))); assertEquals("blu", origExchange.getOut().getBody());
assertTrue(XMLUnit.compareXML(result("xquery/string.xml"), zapResult).similar());
assertNull(transformer.fromHL7(null));
assertNotNull(ebXML); assertEquals("orgName^^^^^&uni1&uniType1^^^^orgId|personId^familyName^givenName^second^suffix^prefix^degree^^&uni2&uniType2|^^Fidonet^2:465/193.8", ebXML);
assertTrue(historySplit[2].size() == 2);
assertNull(transformer.fromHL7(Collections.<String>emptyList()));
assertEquals(1, ebXML.length); assertEquals("1|" + uri, ebXML[0]);
assertEquals(6, hl7Data.size()); assertEquals("PID-3|abcdef", hl7Data.get(0)); assertEquals("PID-3|ghijkl", hl7Data.get(1)); assertEquals("PID-5|Joman", hl7Data.get(2)); assertEquals("PID-7|1234", hl7Data.get(3)); assertEquals("PID-8|A", hl7Data.get(4)); assertEquals("PID-11|Jo Str. 3", hl7Data.get(5));
assertEquals(org, copy);
assertEquals(2, result.size()); assertEquals("id1^^^&1.1.1.1&ISO", result.get(0)); assertEquals("id2^^^&2.2.2.2&ISO", result.get(1));
assertTrue(XMLUnit.compareXML(result("xquery/string-q2.xml"), zapResult1).similar()); assertFalse(XMLUnit.compareXML(zapResult1, zapResult2).similar());
assertEquals(Collections.singletonList(author3), docEntry.getAuthors());
assertEquals(historySplit[2], SplitHistory.parse("[(1/2),(2/3)]"));
assertEquals(recipient, transformer.fromEbXML("orgName^^^^^namespace1&uni1&uniType1^^^^orgId|personId^familyName^givenName^second^suffix^prefix^degree^^namespace2&uni2&uniType2"));
assertTrue(historySplit[2].size() == 2);
assertTrue(map.containsKey("2.5")); assertEquals("org.openehealth.ipf.modules.hl7.parser.test.hl7v2.def.v25", map.get("2.5")[0]);
assertEquals(0 , msg.getQUERY_RESPONSEReps());
assertEquals(0, flow.getStatusCount(CLEAN)); assertEquals(2, flow.getStatusCount(CLEAN));
assertEquals(org, copy);
assertEquals("0.0.2", (SplitHistory.parse(p).indexPathString())); assertEquals("0.1.2", (SplitHistory.parse(p).indexPathString())); assertEquals("0", (SplitHistory.parse(p).indexPathString()));
assertEquals(historySplit[2], SplitHistory.parse("[(0/1),(-1/3)]"));
assertEquals(2, ebXML.length); assertEquals("1|" + uriPart1, ebXML[0]); assertEquals("2|" + uriPart2, ebXML[1]);
assertEquals(3, ids.size()); assertEquals(2, ids.size());
assertNull(patientInfo.getDateOfBirth());
assertNotNull(ebXML); assertEquals("|personId^familyName^givenName^second^suffix^prefix^degree^^&uni2&uniType2|^^Fidonet^2:465/193.8", ebXML);
assertEquals(14, index.getIndex()); assertEquals(true, index.isLast());
assertNotNull (response); assertNotNull (response);
assertNull(transformer.fromEbXML(null));
assertTrue(result .contains("ERR|MSH^1^2^200&Unsupported message type&HL70357&&Blah~PID^5^4^201&Unsupported event code&HL70357&&Bleh~PV1^0^0^203&Unsupported version id&HL70357&&Blih"));
assertEquals("F", patientInfo.getGender());
assertEquals("M", transformer.toHL7(patientInfo).get(0));
assertEquals(2, received.size()); assertEquals("bla", getContent(received.get(0))); assertEquals("blu", getContent(received.get(1))); assertEquals("bla:blu", origExchange.getOut().getBody());
assertEquals(org, copy);
assertEquals(org, copy);
assertTrue(flow.isReplayable()); assertFalse(flow.isReplayable());
assertEquals(null, transformer.toHL7(patientInfo));
assertNotNull(ebXML); assertEquals("orgName^^^^^&uni1&uniType1^^^^orgId|personId^familyName^givenName^second^suffix^prefix^degree^^&uni2&uniType2", ebXML);
assertEquals(recipient, transformer.fromEbXML("|personId^familyName^givenName^second^suffix^prefix^degree^^namespace2&uni2&uniType2|^^Fidonet^2:465/193.8"));
assertEquals("6543-0100", patientInfo.getDateOfBirth());
assertNull(patientInfo.getGender());
assertEquals(0, flow.getPart("0.0").getFilterCount()); assertEquals(0, flow.getPart("0.1").getFilterCount()); assertFalse(flow.filter("0.0")); assertTrue(flow.filter("0.1")); assertEquals(0, flow.getPart("0.0").getFilterCount()); assertEquals(1, flow.getPart("0.1").getFilterCount());
assertEquals(org, copy);
assertNull(transformer.fromEbXML(""));
assertEquals(historySplit[2], SplitHistory.parse("[(0/0)]"));
assertEquals(index1a.hashCode(), index1b.hashCode()); assertTrue(index1a.hashCode() != index2.hashCode()); assertTrue(index1a.hashCode() != index3.hashCode());
assertNotNull(name); assertEquals("Jo|man", name.getFamilyName()); assertEquals("Jo|chen", name.getGivenName()); assertEquals("Jo|achim", name.getSecondAndFurtherGivenNames()); assertEquals("von Jo|del", name.getSuffix()); assertEquals("Jo|dler", name.getPrefix());
assertNull(patientInfo.getAddress());
assertEquals(ERROR, flow.getStatus()); assertEquals(1, flow.getReplayCount()); assertEquals(timestamp, flow.getCreationTime()); assertEquals("blub", new String(flow.getPacket())); assertNotNull(flow.getPart("0.2", ERROR));
assertEquals(0, hl7Data.size());
assertNotNull(result);
assertEquals(i, number);
assertEquals(org, copy);
assertTrue(XMLUnit.compareXML(result("xquery/string-q1.xml"), zapResult).similar());
assertTrue(failed);
assertEquals(0, patientInfo.getIds().size());
assertEquals(111, flow.getAckCountExpected());
assertNull(transformer.toHL7(patientInfo));
assertEquals(1, ids.size()); assertTrue(ids.contains(flow.getIdentifier())); assertEquals(1, ids.size()); assertTrue(ids.contains(flow.getIdentifier())); assertEquals(1, ids.size()); assertTrue(ids.contains(flow.getIdentifier())); assertEquals(0, ids.size()); assertEquals(0, ids.size()); assertEquals(0, ids.size());
assertEquals(0, patientInfo.getIds().size());
assertFalse((SplitHistory.parse(p).isFirst())); assertTrue((SplitHistory.parse(p).isFirst())); assertTrue((SplitHistory.parse(p).isFirst()));
assertNull(flow.getPart("non-existing-part-path")); assertNull(flow.getPart(null));
assertNull(patientInfo.getDateOfBirth());
assertEquals("a:b", a.getIn().getBody());
assertTrue(XMLUnit.compareXML(result("xquery/ns-q1.xml"), zapResult).similar());
assertEquals(org, copy);
assertEquals(recipient, transformer.fromEbXML("orgName^^^^^namespace1&uni1&uniType1^^^^orgId|personId^familyName^givenName^second^suffix^prefix^degree^^namespace2&uni2&uniType2|^^Fidonet^2:465/193.8"));
assertEquals(1, flow.getStatusCount(CLEAN)); assertEquals(1, flow.getStatusCount(ERROR)); assertEquals(1, flow.getStatusCount(CLEAN)); assertEquals(0, flow.getStatusCount(ERROR));
assertNull(transformer.toHL7(patientInfo));
assertFalse(history1.hashCode() == history2.hashCode()); assertTrue(history1.hashCode() == history1.hashCode()); assertTrue(history1.hashCode() == history.hashCode());
assertEquals(0, hl7Data.size());
assertEquals("I live here 42^^^^^ECU", transformer.toHL7(patientInfo).get(0));
assertNotNull(ebXML); assertEquals("orgName^^^^^&uni1&uniType1^^^^orgId||^^Fidonet^2:465/193.8", ebXML);
assertTrue(result .contains("ERR||MSH^1^2^3^4^5~PID^5^4^3^2^1~PV1^0^0^0^0^0|203^Unsupported version id^HL70357^^Blih|E|||Blih"));
assertNull(transformer.toHL7(patientInfo));
assertEquals(org, copy);
assertEquals(contents, extractSoapBody(envelopeWithNamespacePrefixes)); assertEquals(contents, extractSoapBody(envelopeWithoutNamespacePrefixes)); assertEquals("", extractSoapBody(emptyEnvelopeWithNamespacePrefixes)); assertEquals("", extractSoapBody(emptyEnvelopeWithoutNamespacePrefixes)); assertEquals("", extractSoapBody(emptyEnvelopeWithNamespacePrefixesShort)); assertEquals("", extractSoapBody(emptyEnvelopeWithoutNamespacePrefixesShort));
assertEquals("123456+0100", transformer.toHL7(patientInfo).get(0));
assertEquals(request.toString(), result.toString());
assertEquals(contents, extractNonEmptyElement(envelopeWithNamespacePrefixes, elementName)); assertEquals(contents, extractNonEmptyElement(envelopeWithoutNamespacePrefixes, elementName)); assertEquals(null, extractNonEmptyElement(emptyEnvelopeWithNamespacePrefixes, elementName)); assertEquals(null, extractNonEmptyElement(emptyEnvelopeWithoutNamespacePrefixes, elementName)); assertEquals(null, extractNonEmptyElement(emptyEnvelopeWithNamespacePrefixesShort, elementName)); assertEquals(null, extractNonEmptyElement(emptyEnvelopeWithoutNamespacePrefixesShort, elementName));
assertTrue("Should be equal", index1a.equals(index1b)); assertFalse("Should not be equal", index1a.equals(index2)); assertFalse("Should not be equal", index1a.equals(index3)); assertFalse("Null is never equal", index1a.equals(null)); assertFalse("Unrelated class is never equal", index1a.equals(this)); assertTrue("Same instances should be equal", index1a.equals(index1a));
assertEquals(6, flowRepository.findFlows(allFlows).size()); assertEquals(1, flowRepository.findFlows(allFlows).size());
assertNull(transformer.toEbXML(null));
assertNull(transformer.toEbXML(new Recipient()));
assertEquals(null, transformer.toHL7(new PatientInfo()));
assertEquals(0 , msg.getQUERY_RESPONSEReps());
assertEquals(1, ids.size()); assertEquals("id2", ids.get(0).getId()); assertEquals("2.2.2.2", ids.get(0).getAssigningAuthority().getUniversalId()); assertEquals("ISO", ids.get(0).getAssigningAuthority().getUniversalIdType());
assertEquals("[(0L)]", history.toString()); assertEquals("[(0L),(0)]", historySplit[0].toString()); assertEquals("[(0L),(1)]", historySplit[1].toString()); assertEquals("[(0L),(2L)]", historySplit[2].toString());
assertFalse(history1.equals(history2)); assertTrue(history1.equals(history1)); assertFalse(history1.equals(history1.toString())); assertFalse(history1.equals(null)); assertTrue(history1.equals(new SplitHistory()));
assertEquals(1, flows.size()); assertTrue(flows.contains(flow)); assertEquals(0, flows.size()); assertEquals(0, flows.size());
assertNull(transformer.toEbXML(null));
assertEquals(5, hl7Data.size()); assertEquals("PID-3|abcdef", hl7Data.get(0)); assertEquals("PID-5|Joman", hl7Data.get(1)); assertEquals("PID-7|1234", hl7Data.get(2)); assertEquals("PID-8|A", hl7Data.get(3)); assertEquals("PID-11|Jo Str. 3", hl7Data.get(4));
assertNotNull(patientInfo); assertEquals(2, patientInfo.getIds().size()); assertEquals("abcdef", patientInfo.getIds().get(0).getId()); assertEquals("fedcba", patientInfo.getIds().get(1).getId()); assertEquals("Joman", patientInfo.getName().getFamilyName()); assertEquals("1234", patientInfo.getDateOfBirth()); assertEquals("A", patientInfo.getGender()); assertEquals("Jo Str. 3", patientInfo.getAddress().getStreetAddress());
assertTrue(XMLUnit.compareXML(result("xquery/string.xml"), zapResult).similar());
assertNull(patientInfo.getName());
assertFalse((SplitHistory.parse(p).isLast())); assertTrue((SplitHistory.parse(p).isLast())); assertTrue((SplitHistory.parse(p).isLast()));
assertNotNull (response); assertNotNull (response);
assertNull(transformer.toEbXML(null));
assertEquals(CLEAN, flow.getStatus()); assertEquals("blah", new String(flow.getPacket())); assertNotNull(flow.getPart("0.0", CLEAN)); assertNotNull(flow.getPart("0.1", CLEAN));
assertNull(transformer.toHL7(patientInfo));
assertNull(patientInfo.getGender());
assertEquals(org, copy);
assertTrue(XMLUnit.compareXML(result("xquery/r-q1.xml"), zapResult).similar());
assertEquals(historySplit[2], SplitHistory.parse("[(0/1),(2/3)"));
assertEquals(recipient, transformer.fromEbXML("orgName^^^^^namespace1&uni1&uniType1^^^^orgId||^^Fidonet^2:465/193.8"));
assertNull(transformer.toEbXML(null));
assertEquals(null, docEntry.getAuthor());
assertTrue(XMLUnit.compareXML(result("xquery/string-q3.xml"), zapResult).similar());
assertNull(patientInfo.getName());
assertEquals(org, copy);
assertTrue(XMLUnit.compareXML(result("xquery/string.xml"), zapResult).similar());
assertEquals(null, submissionSet.getAuthor());
assertEquals("Jo\\\\F\\\\man^Jo\\\\F\\\\chen^Jo\\\\F\\\\achim^von Jo\\\\F\\\\del^Jo\\\\F\\\\dler", transformer.toHL7(patientInfo).get(0));
assertNull(transformer.toHL7(new PatientInfo()));
assertNotNull(result); assertNotNull(result.getReferences()); assertEquals(0, result.getReferences().size()); assertEquals(RemoveDocumentSet.DEFAULT_DELETION_SCOPE, result.getDeletionScope());
assertTrue(XMLUnit.compareXML(result("xquery/string.xml"), zapResult).similar());
assertNull(transformer.fromEbXML(null));
assertFalse(flow.isAckCountExpectedReached()); assertFalse(flow.isAckCountExpectedReached()); assertTrue(flow.isAckCountExpectedReached()); assertFalse(flow.isAckCountExpectedReached());
assertTrue("Class name missing", str.contains(Splitter.class.getName())); assertTrue("index missing", str.contains("14")); assertTrue("last flag missing", str.contains("true"));
assertNotNull (response); assertTrue(response instanceof RSP_K21_QUERY_RESPONSE);
assertNull(transformer.toHL7(new PatientInfo()));
assertNull(patientInfo.getAddress());
assertEquals(4L, Duration.parse("4").getValue()); assertEquals(4 * 1000L, Duration.parse("4s").getValue()); assertEquals(4 * 60 * 1000L, Duration.parse("4m").getValue()); assertEquals(4 * 60 * 60 * 1000L, Duration.parse("4h").getValue()); assertEquals(4 * 60 * 60 * 1000L * 24L, Duration.parse("4d").getValue());
assertEquals(history, SplitHistory.parse("[(0/1)]")); assertEquals(historySplit[0], SplitHistory.parse("[(0/1),(0/3)]")); assertEquals(historySplit[1], SplitHistory.parse("[(0/1),(1/3)]")); assertEquals(historySplit[2], SplitHistory.parse("[(0/1),(2/3)]"));
assertEquals(1, flow.getStatusCount(CLEAN)); assertEquals(1, flow.getStatusCount(ERROR)); assertEquals(1, flow.getStatusCount(CLEAN)); assertEquals(0, flow.getStatusCount(ERROR));
assertNotNull (response);
assertEquals(1, ExtensionsCount.getValue());
assertEquals(true, RCLJava.ok()); assertEquals(false, RCLJava.ok());
assertEquals(TsFileIOWriter.magicStringBytes.length + TsFileIOWriter.versionNumberBytes.length, rWriter.getTruncatedSize()); assertTrue(file.delete());
assertEquals(count.get(), threadCount);
assertTrue(r1.equals(r2));
assertEquals(1, inputSplits.length); assertTrue(inputSplits[0] instanceof TSFInputSplit);
assertEquals(reason, e.getCause().getMessage()); assertEquals(count.get(), threadCount);
assertEquals(reason, e.getCause().getMessage()); assertEquals(count.get(), threadCount);
assertEquals(connection.getServerProperties().getVersion(), version); assertEquals(connection.getServerProperties().getSupportedTimeAggregationOperations().get(i), supportedAggregationTime.get(i)); assertEquals(connection.getServerProperties().getTimestampPrecision(), timestampPrecision);
assertEquals(0D, ActiveTimeSeriesCounter.getInstance().getActiveRatio(storageGroups[i]), 0.0);
assertEquals(202, count); assertEquals(deletedFileNames.size(), deletedFileNamesTest.size()); assertEquals(toBeSyncedFiles.size(), toBeSyncedFilesTest.size()); assertTrue(deletedFileNames.containsAll(deletedFileNamesTest)); assertTrue(toBeSyncedFiles.containsAll(toBeSyncedFilesTest));
assertEquals(fetchSize, stmt.getFetchSize());
assertTrue(e instanceof IndexOutOfBoundsException); assertEquals("a", a.getSubString(0)); assertEquals("cc", a.getSubString(-1)); assertEquals("bbb", a.getSubString(-2)); assertTrue(e instanceof IndexOutOfBoundsException); assertEquals("a", a.getSubString(0)); assertEquals("cc", a.getSubString(-3)); assertEquals("dd", a.getSubString(3)); assertEquals("eeee", a.getSubString(-1)); assertTrue(e instanceof IndexOutOfBoundsException);
assertTrue(b.equals(rb1));
assertEquals(count.get(), threadCount);
assertEquals(0, Double .compare(compressionRatioSum / calcuTimes, this.compressionRatio.getRatio())); assertEquals(10, this.compressionRatio.getCalcTimes()); assertEquals(0, Double .compare(compressionRatioSum / calcuTimes, this.compressionRatio.getRatio()));
assertTrue(p1.equals(p2)); assertFalse(p1.equals(p2)); assertFalse(p1.equals(p2)); assertFalse(p1.equals(p2)); assertFalse(p1.equals(p2)); assertFalse(p1.equals(p2)); assertTrue(map.containsKey(p2)); assertTrue(p1.equals(p2)); assertTrue(p1.equals(p2)); assertTrue(p1.equals(p1)); assertFalse(p1.equals(new Integer(1)));
assertEquals("testBytesToFloat", b, bf);
assertEquals(f1, rf1, TestConstant.float_min_delta); assertEquals(b1, rb1); assertEquals(i1, ri1);
assertTrue(caught);
assertEquals(lNum, BytesUtils.bytesToLong(BytesUtils.longToBytes(lNum, 8), 8)); assertEquals(iNum, BytesUtils.bytesToLong(BytesUtils.longToBytes(iNum, 8), 8)); assertEquals(iNum, BytesUtils.bytesToLong(BytesUtils.longToBytes(iNum, 4), 4)); assertEquals(lSNum, BytesUtils.bytesToLong(BytesUtils.longToBytes(lSNum, 1), 1));
assertEquals(TSFileConfig.MAGIC_STRING.getBytes().length + TSFileConfig.VERSION_NUMBER .getBytes().length, rWriter.getTruncatedSize()); assertEquals(TsFileCheckStatus.COMPLETE_FILE, rWriter.getTruncatedSize()); assertFalse(rWriter.canWrite()); assertTrue(file.delete());
assertEquals(encodings[i], TypeInferenceUtils.getPredictedDataType(values[i], false));
assertEquals("<a,123123>", p1.toString()); assertEquals("<32.5,123.123>", p2.toString());
assertEquals(encodings[i], TypeInferenceUtils.getPredictedDataType(values[i], true));
assertEquals(now, zonedDateTime.toInstant().toEpochMilli()); assertEquals(now, zonedDateTime.toInstant().toEpochMilli());
assertFalse(flag); assertFalse(flag); assertEquals(metadata.getColumnCount(), 1);
assertTrue(flag); assertTrue(flag); assertTrue(flag); assertTrue(flag); assertEquals(metadata.getColumnLabel(i), colums[i - 1]);
assertEquals(size, file.length()); assertTrue(file.delete());
assertTrue(authenticator.checkValid(null, "root", "root".getBytes())); assertFalse(authenticator.checkValid(null, "", "foo".getBytes())); assertFalse(authenticator.checkValid(null, "root", null)); assertFalse(authenticator.checkValid(null, "foo", "foo".getBytes()));
assertEquals(value, value1_, delta); assertEquals(value + 2, value2_, delta);
assertEquals(0, Double .compare(compressionRatioSum / calcuTimes, this.compressionRatio.getRatio()));
assertTrue(groupByFilter.containStartEndTime(8, 9)); assertFalse(groupByFilter.containStartEndTime(8, 13)); assertFalse(groupByFilter.containStartEndTime(0, 3)); assertFalse(groupByFilter.containStartEndTime(0, 9)); assertFalse(groupByFilter.containStartEndTime(7, 8 + 30 * 24 + 3 + 6 + 1)); assertFalse(groupByFilter.containStartEndTime(8 + 30 * 24 + 3 + 6 + 1, 8 + 30 * 24 + 3 + 6 + 2));
assertEquals(count.get(), threadCount);
assertEquals(f1, rf1, TestConstant.float_min_delta); assertEquals(b1, rb1);
assertTrue(checker.doCheck().isEmpty());
assertEquals(l, BytesUtils.readLong(in));
assertEquals(contentInBytes.length, deltaSize); assertEquals(0, deltaSize);
assertEquals(b1, rb1, TestConstant.float_min_delta);
assertEquals(ms_str.length() + 3, (us_str).length()); assertEquals(us_str.length() + 3, (ns_str).length());
assertTrue(flag); assertTrue(flag); assertTrue(flag); assertTrue(flag); assertEquals(metadata.getColumnType(1), Types.TIMESTAMP); assertEquals(metadata.getColumnType(i + 1), types[i - 1]);
assertEquals(src, dest);
assertNotNull(PayloadFormatManager.getPayloadFormat("json"));
assertEquals(0, remainRanges.size());
assertEquals(connection.getTimeZone(), timeZone);
assertEquals(modifications[i], modificationList.get(i)); assertEquals(modifications[i], modificationList.get(i));
assertEquals(5, checker.doCheck().size());
assertNotEquals(TsFileIOWriter.magicStringBytes.length, rWriter.getTruncatedSize()); assertNotNull(chunkMetadataList); assertNotNull(chunkMetadataList); assertTrue(file.delete());
assertEquals(src, dest);
assertEquals(tuple.get("device"), event.getDevice()); assertEquals(tuple.get("timestamp"), String.valueOf(event.getTimestamp())); assertEquals(tuple.get("measurements"), event.getMeasurements().get(0)); assertEquals(tuple.get("types"), event.getTypes().get(0).toString()); assertEquals(tuple.get("values"), String.valueOf(event.getValues().get(0)));
assertEquals( "SELECT status, temperature FROM root.ln.wf01.wt01 WHERE temperature < 24 and time > 2017-11-1 0:13:00", argument.getValue().getStatement());
assertEquals(pos - 1 - Long.BYTES, rWriter.getTruncatedSize()); assertTrue(file.delete());
assertEquals(l, BytesUtils.readDouble(in), TestConstant.double_min_delta);
assertEquals(connection.getTimeZone(), timeZone);
assertEquals(host1, params.getHost()); assertEquals(port, params.getPort()); assertEquals(userName, params.getUsername()); assertEquals(userPwd, params.getPassword()); assertEquals(params.getHost(), host1); assertEquals(params.getPort(), port); assertEquals(params.getUsername(), userName); assertEquals(params.getPassword(), userPwd);
assertFalse(groupByFilter.satisfy(0, null)); assertFalse(groupByFilter.satisfy(7, null)); assertFalse(groupByFilter.satisfy(12, null)); assertFalse(groupByFilter.satisfy(8 + 30 * 24 + 3 + 6, null)); assertTrue(groupByFilter.satisfy(8, null)); assertTrue(groupByFilter.satisfy(9, null)); assertTrue(groupByFilter.satisfy(11, null));
assertEquals(l, BytesUtils.readBool(in));
assertEquals(l, BytesUtils.readLong(in));
assertTrue(filter1.contains(value1)); assertTrue(filter1.contains(value2)); assertTrue(filter1.contains(value3));
assertEquals(TsFileIOWriter.magicStringBytes.length + TsFileIOWriter.versionNumberBytes.length, rWriter.getTruncatedSize()); assertTrue(file.delete());
assertTrue(recordReader instanceof TSFHiveRecordReader);
assertEquals(402, count); assertEquals(deletedFileNames.size(), deletedFileNamesTest.size()); assertEquals(toBeSyncedFiles.size(), toBeSyncedFilesTest.size()); assertTrue(deletedFileNames.containsAll(deletedFileNamesTest)); assertTrue(toBeSyncedFiles.containsAll(toBeSyncedFilesTest));
assertEquals("testBoolToBytes", b, bf);
assertEquals(l, BytesUtils.readFloat(in), TestConstant.float_min_delta);
assertEquals(TsFileIOWriter.magicStringBytes.length + TsFileIOWriter.versionNumberBytes.length, rWriter.getTruncatedSize()); assertTrue(file.delete());
assertEquals(src, dest);
assertEquals(new ArrayList<>(), modifications);
assertEquals(IoTDBConfigDynamicAdapter.getInstance().getCurrentMemTableSize(), CONFIG.getMemtableSizeThreshold()); assertEquals(IoTDBConfigDynamicAdapter.getInstance().getTotalTimeseries(), totalTimeseries); assertEquals(String.format(ConfigAdjusterException.ERROR_MSG_FORMAT, IoTDBConfigDynamicAdapter.ADD_TIMESERIES), e.getMessage()); assertEquals(IoTDBConfigDynamicAdapter.getInstance().getTotalTimeseries(), totalTimeseries);
assertEquals(count.get(), threadCount);
assertEquals(TypeInferenceUtils.isNumber(values[i]), results[i]);
assertEquals(c1.hashCode(), copyC.hashCode()); assertNotEquals(c1.hashCode(), c2.hashCode()); assertNotEquals(c1.hashCode(), c3.hashCode()); assertNotEquals(c1.hashCode(), c4.hashCode());
assertEquals(l, BytesUtils.readInt(in));
assertEquals(b1, rb1); assertEquals(i1, ri1);
assertEquals("testBytesToFloat", b, bf, TestConstant.float_min_delta);
assertEquals(new Long(100L), sample.getSampleId()); assertEquals("Foo", sample.getName()); assertEquals(new Integer(14), sample.getUpdateSequence()); assertEquals(now, sample.getUpdateTime());
assertEquals(new Long(100L), sample.getSampleId()); assertEquals("Foo", sample.getName()); assertEquals(new Integer(14), sample.getUpdateSequence()); assertEquals(now, sample.getUpdateTime());
assertEquals(new Long(1L), sample.getSampleId()); assertEquals("Foo", sample.getName()); assertEquals(new Integer(0), sample.getUpdateSequence()); assertEquals(now, sample.getUpdateTime());
assertEquals(new Long(15L), sample.getSampleId()); assertEquals("Foo", sample.getName()); assertEquals(new Integer(3), sample.getUpdateSequence()); assertEquals(now, sample.getUpdateTime());
assertEquals(new Long(15L), sample.getSampleId()); assertEquals("Foo", sample.getName()); assertEquals(new Integer(3), sample.getUpdateSequence()); assertEquals(now, sample.getUpdateTime());
assertEquals("foo", ro.scope("foo").scope());
assertEquals(ulid, ulid.toLowerCase());
assertEquals(422, e.problem().status()); assertSame("option_ids_mismatch", e.problem().title());
assertEquals(send.logicalTime(), send1.logicalTime()); assertTrue(send.counter() < send1.counter()); assertSame(send.counter(), send1.counter() - 1);
assertEquals(true, oe.selectBooleanOptions( feature1.getOptions(), feature1.getStatus(), new OptionSelectorWeighted(feature1.getOptions().getItemsList()) ));
assertTrue(pathC != null);
assertEquals(headers1, ro.headers());
assertEquals(422, e.problem().status()); assertSame("option_ids_mismatch", e.problem().title());
assertEquals(feature, record.feature()); assertNotNull(controlFeatureOption); assertEquals("option-green", controlFeatureOption.getKey()); assertEquals("green", controlFeatureOption.getValue()); assertEquals(3000, controlFeatureOption.getWeight()); assertNotNull(staging); assertNotNull(stagingControlOptionRecord); assertEquals(stagingControlOptionData, stagingControlOptionRecord); assertNotNull(record.optionSelectorWeighted()); assertNotNull(record.optionSelectorWeighted("staging"));
assertFalse(oe.selectBooleanOptions( feature1.getOptions(), feature1.getStatus(), new OptionSelectorWeighted(feature1.getOptions().getItemsList()) ));
assertEquals("k1=v1,k2=v2", kvp);
assertEquals(ServerConfiguration.DEFAULT_NAMESPACE, configuration.namespace()); assertEquals("production", configuration.namespace());
assertEquals(in, feature);
assertEquals("grp", ro.group("grp").group());
assertFalse(oe.selectBooleanOptions(feature.getOptions(), feature.getStatus(), selector)); assertFalse(oe.selectBooleanOptions(feature1.getOptions(), feature.getStatus(), selector1));
assertEquals(feature.getId(), feature1.getId()); assertEquals(feature.getKey(), feature1.getKey()); assertEquals(feature.getGroup(), feature1.getGroup()); assertEquals(feature.getDescription(), feature1.getDescription()); assertEquals(feature.getStatus(), feature1.getStatus());
assertTrue(send.logicalTime() < send1.logicalTime()); assertEquals(send.counter(), send1.counter()); assertEquals(send.counter(), send1.counter());
assertTrue(tr == fr && (tr + fr == runs));
assertEquals(feature, feature1); assertNotEquals(feature, feature2); assertSame(2, Sets.newHashSet(feature, feature1, feature2).size()); assertEquals(feature.toString(), feature1.toString());
assertEquals(send.logicalTime(), send1.logicalTime()); assertTrue(send.counter() < send1.counter()); assertSame(send.counter(), send1.counter() - 1);
assertEquals("title", out.title()); assertEquals("detail", out.detail().get()); assertEquals(in, out);
assertTrue(nearestFrequencies.contains(1_000)); assertTrue(nearestFrequencies.contains(2_000)); assertTrue(nearestFrequencies.contains(3_000)); assertTrue(nearestFrequencies.contains(4_000));
assertThat(servletContext.getAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE)).isEqualTo(metricRegistry); assertThat(servletContext.getAttribute(MetricsServlet.METRICS_REGISTRY)).isEqualTo(metricRegistry);
assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isTrue();
assertTrue(res.getResponse().getContentAsString().contains("\\"activeProfiles\\":[\\""+profiles[0]+"\\"]"));
assertThat(container.getMimeMappings().get("abs")).isEqualTo("audio/x-mpeg"); assertThat(container.getMimeMappings().get("html")).isEqualTo("text/html;charset=utf-8"); assertThat(container.getMimeMappings().get("json")).isEqualTo("text/html;charset=utf-8"); assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isNull();
assertThat(servletContext.getAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE)).isEqualTo(metricRegistry); assertThat(servletContext.getAttribute(MetricsServlet.METRICS_REGISTRY)).isEqualTo(metricRegistry);
assertEquals("diego ceccarelli test test1 test2 and", helper .getArticle(1).getText().trim()); assertEquals("ceccarelli test test1 test2 and", helper.getArticle(2) .getText().trim()); assertEquals("pippo pippo pippo pippos", helper.getArticle(6).getText() .trim());
assertEquals(posSecondSentence, sentences.get(1).getStart());
assertEquals("11",result.get(0));
assertTrue(shingles.contains("canucks")); assertTrue(shingles.contains("bure suspended")); assertTrue(shingles.contains("for one")); assertTrue(shingles.contains("game")); assertTrue(shingles.contains("hockey canucks"));
assertEquals(3, results.size()); assertEquals(expected, new HashSet<Integer>(results));
assertTrue(shingles.contains("bure suspended")); assertTrue(shingles.contains("for one")); assertTrue(shingles.contains("game")); assertTrue(shingles.contains("hockey canucks"));
assertEquals(0, helper.getCosineSimilarity(1, 6), 0.01); assertEquals(1, helper.getCosineSimilarity(1, 1), 0.01); assertTrue(helper.getCosineSimilarity(1, 4) > helper .getCosineSimilarity(1, 3));
assertTrue(shingles.contains("if it works")); assertTrue(shingles.contains("works or not")); assertTrue(shingles.contains("this is a")); assertFalse(shingles.contains("test. let\'s"));
assertEquals(1, helper.getFreq("diego ceccarelli")); assertEquals(5, helper.getFreq("ceccarelli test")); assertEquals(5, helper.getFreq("test1 test2")); assertEquals(5, helper.getFreq("and")); assertEquals(2, helper.getFreq("diego and ceccarelli"));
assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertEquals("12",result.get(0));
assertThat(mCallbackCalled, is(true));
assertEquals(currentStreetData.getCurrentStreetName(), mGuidanceStreetLabelView.getGuidanceCurrentStreetData().getCurrentStreetName()); assertEquals(currentStreetData.getBackgroundColor(), mGuidanceStreetLabelView.getGuidanceCurrentStreetData().getBackgroundColor());
assertThat(data.toString(), is(inputStr));
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.SECTION_BAR));
assertThat(dialog.isShowing(), is(true)); assertThat(dialog.isShowing(), is(false));
assertThat(ret, is(valueStr));
assertEquals(mRouteWaypoint, entry.getRouteWaypoint());
assertEquals(DIRECTION, mManeuverResources.getExitDirections(maneuver));
assertNotNull(viewHolder);
assertThat(data.toString(), is(inputStr));
assertThat(mCallbackCalled, is(true));
assertThat(items.size(), equalTo(1)); assertThat(labels.size(), equalTo(3)); assertThat(selectedId, equalTo(getString(R.string.msdkui_avoid_long_term_closures))); assertThat(selectedId, equalTo(getString(R.string.msdkui_disabled)));
assertThat(minDateCalendar.get(Calendar.YEAR), equalTo(originalDate.get(Calendar.YEAR))); assertThat(minDateCalendar.get(Calendar.MONTH), equalTo(originalDate.get(Calendar.MONTH))); assertThat(minDateCalendar.get(Calendar.DAY_OF_MONTH), equalTo(originalDate.get(Calendar.DAY_OF_MONTH)));
assertEquals(mGuidanceStreetLabelView.getVisibility(), View.GONE);
assertThat(mManeuverData, is(data)); assertThat(mManeuverData, is(not(data1))); assertThat(null, is(not(mManeuverData))); assertThat(mManeuverData.hashCode(), is(data.hashCode()));
assertThat(((TextView) mGuidanceManeuverView.findViewById(R.id.infoView2)).getCurrentTextColor(), is(Color.RED));
assertEquals(distanceView.getVisibility(), View.GONE); assertEquals(infoView1.getVisibility(), View.GONE); assertEquals(infoView2.getVisibility(), View.GONE); assertEquals(iconView.getVisibility(), View.GONE);
assertThat(arrivalTime, equalTo(DateFormatterUtil.format(getApplicationContext(), new Date(currentTimeInMs + 1000 * DateUtils.SECOND_IN_MILLIS)))); assertThat(arrivalTime, equalTo(DateFormatterUtil.format(getApplicationContext(), new Date(currentTimeInMs + penaltyMinutes * DateUtils.MINUTE_IN_MILLIS))));
assertThat(mManeuverResources.getManeuverIconId(0), equalTo(R.drawable.ic_maneuver_icon_motorail));
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.ARRIVAL_TIME));
assertNotNull(dialog.findViewById(R.id.picker_tab)); assertNotNull(dialog.findViewById(R.id.travel_date)); assertNotNull(dialog.findViewById(R.id.travel_time));
assertNotNull(item); assertTrue(item.isSectionVisible(ManeuverItemView.Section.INSTRUCTIONS));
assertThat(mMultipleChoiceOptionItem.getChildCount(), equalTo(1)); assertNotNull(labelView); assertNotNull(selectionView); assertThat(mCallbackCalled, is(true));
assertEquals(extraIconView.getVisibility(), View.GONE); assertEquals(extraIconView.getVisibility(), View.VISIBLE);
assertThat(timeString, is("1 d"));
assertThat(data.toString(), is(inputStr));
assertEquals(View.GONE, mGuidanceNextManeuverView.getVisibility()); assertEquals(mGuidanceNextManeuverView.getVisibility(), View.VISIBLE); assertEquals(View.GONE, distanceView.getVisibility()); assertEquals(View.GONE, streetName.getVisibility()); assertEquals(View.GONE, dotView.getVisibility());
assertThat(spannable.toString(), equalTo(expectedDetails + " RouteName")); assertTrue(spannable2.toString().isEmpty());
assertThat(picker.getYear(), equalTo(calendar.get(Calendar.YEAR))); assertThat(picker.getMonth(), equalTo(calendar.get(Calendar.MONTH))); assertThat(picker.getDayOfMonth(), equalTo(calendar.get(Calendar.DAY_OF_MONTH))); assertThat(timePicker.getCurrentHour(), equalTo(calendar.get(Calendar.HOUR_OF_DAY))); assertThat(timePicker.getCurrentMinute(), equalTo(calendar.get(Calendar.MINUTE)));
assertThat(timeString, is("10 min"));
assertThat(mCallbackCalled, is(true));
assertThat(mManeuverData, is(data)); assertThat(mManeuverData, is(not(data1))); assertThat(null, is(not(mManeuverData))); assertThat(mManeuverData.hashCode(), is(data.hashCode())); assertThat(data2, is(mManeuverDataWithNextRoadIcon)); assertThat(mManeuverDataWithNextRoadIcon.hashCode(), is(data2.hashCode()));
assertNotNull(item); assertTrue(item.isSectionVisible(ManeuverItemView.Section.ADDRESS));
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.TYPE_ICON));
assertTrue(mRouteDescriptionItem.isSectionVisible(RouteDescriptionItem.Section.TRAFFIC_WARNING)); assertFalse(mRouteDescriptionItem.isSectionVisible(RouteDescriptionItem.Section.TRAFFIC_WARNING));
assertEquals(View.GONE, mGuidanceNextManeuverView.getVisibility()); assertEquals(mGuidanceNextManeuverView.getVisibility(), View.VISIBLE); assertThat(distanceView.getText(), is(equalTo(mDistance + " m"))); assertThat(streetName.getText(), is(equalTo(mStreetName)));
assertEquals(drawable, mWaypointItem.getRemoveDrawable());
assertThat(data.toString(), is(expectedResult));
assertNull(ret);
assertThat(items.size(), equalTo(1)); assertThat(labels.size(), equalTo(8)); assertThat(selectedIds.size(), equalTo(0)); assertThat(labels, hasItem(getString(R.string.msdkui_allow_car_pool))); assertThat(selectedIds.size(), equalTo(1));
assertThat(container.getVisibility(), is(View.VISIBLE));
assertThat(mCallbackCalled, is(true));
assertThat(mManeuverResources.getManeuverInstruction(0), equalTo(getStringFromContext(R.string.msdkui_maneuver_enter_car_shuttle_train)));
assertNotNull(mManeuverList.getAdapter()); assertThat(mManeuverList.getAdapter().getItemCount(), equalTo(0)); assertNull(mManeuverList.getRoute());
assertThat(street, is(signPostExitText));
assertThat(timeString, is("1 h"));
assertThat(timeString, is("50 s"));
assertThat(items.size(), equalTo(1)); assertThat(labels.size(), equalTo(5)); assertThat(selectedIds, equalTo(getString(R.string.msdkui_tunnel_cat_c))); assertThat(selectedIds, equalTo(getString(R.string.msdkui_undefined)));
assertThat(mEstimatedArrivalView.getVisibility(), is(View.GONE));
assertNotNull(mBaseGuidancePresenter.getEta());
assertThat(mSingleChoiceOptionItem.getChildCount(), equalTo(1)); assertNotNull(labelView); assertNotNull(selectionView); assertThat(mCallbackCalled, is(true));
assertThat(timeString, is("1 d"));
assertThat(items.size(), equalTo(1)); assertThat(labels.size(), equalTo(11)); assertThat(selectedIds.size(), equalTo(11)); assertThat(selectedIds.size(), equalTo(1));
assertThat(timeString, is("1 d 2 h"));
assertThat(measurement.getValue(), is(value));
assertNotNull(valueView); assertTrue(alertDialog.isShowing()); assertFalse(alertDialog.isShowing());
assertThat(measurement.getUnit(), is(MeasurementUnit.KILOMETER));
assertEquals(eta.getVisibility(), View.VISIBLE); assertEquals(distance.getVisibility(), View.VISIBLE); assertEquals(duration.getVisibility(), View.VISIBLE); assertThat(eta.getText().toString(), is(getString(R.string.msdkui_value_not_available))); assertThat(distance.getText().toString(), is(getString(R.string.msdkui_value_not_available))); assertThat(duration.getText().toString(), is(getString(R.string.msdkui_value_not_available)));
assertNull(mBaseGuidancePresenter.getTimeToArrival());
assertThat(mEstimatedArrivalData, is(data)); assertThat(mEstimatedArrivalData, is(not(data1))); assertThat(null, is(not(mEstimatedArrivalData))); assertThat(mEstimatedArrivalData.hashCode(), is(data.hashCode()));
assertThat(adapter.getCount(), equalTo(5)); assertNull(adapter.getItem(0)); assertNotNull(adapter.getTabView(0) .getIcon()); assertThat(adapter.isContentVisible(), is(false));
assertEquals(testLabel, tabView.getLabel());
assertNotNull(item); assertTrue(item.isSectionVisible(ManeuverItemView.Section.ICON));
assertEquals(waypoints.size(), mWaypointList.getEntriesCount());
assertThat(labelView.getText().toString(), equalTo(getApplicationContext().getString(R.string.msdkui_violate_truck_options))); assertThat(mBooleanOptionItem.getItemId(), equalTo(R.string.msdkui_violate_truck_options));
assertThat(container.getVisibility(), is(View.VISIBLE)); assertThat(speedValueView.getText().toString(), is(getString(R.string.msdkui_value_not_available))); assertThat(speedUnitView.getText().toString(), is("")); assertThat(speedValueView.getText().toString(), is(String.valueOf(SpeedFormatterUtil.format(VELOCITY, UnitSystem.METRIC))));
assertEquals(drawable, mWaypointItem.getDragDrawable());
assertNotNull(mBaseGuidancePresenter.getNextManeuver());
assertThat(spannable.toString(), equalTo(TimeFormatterUtil.format(getApplicationContext(), 1000 * DateUtils.SECOND_IN_MILLIS)));
assertEquals(distanceView.getVisibility(), View.GONE); assertEquals(infoView1.getVisibility(), View.GONE); assertEquals(defaultView.getVisibility(), View.VISIBLE); assertThat(defaultView.getText().toString(), is(getString(R.string.msdkui_maneuverpanel_updating))); assertEquals(infoView2.getVisibility(), View.GONE); assertEquals(iconView.getVisibility(), View.INVISIBLE); assertEquals(busyProgressBar.getVisibility(), View.VISIBLE);
assertThat(timeString, isEmptyString());
assertThat(mWaypointList.getAdapter().getItemCount(), equalTo(2)); assertThat(mWaypointList.getEntriesCount(), equalTo(2));
assertThat(data1, is(mCurrentSpeedData)); assertThat(mCurrentSpeedData, is(not(data2))); assertThat(null, is(not(mCurrentSpeedData))); assertThat(mCurrentSpeedData.hashCode(), is(data1.hashCode()));
assertEquals(PagerAdapter.POSITION_NONE, adapter.getItemPosition(new Object()));
assertThat(minDateCalendar.get(Calendar.YEAR), equalTo(originalDate.get(Calendar.YEAR))); assertThat(minDateCalendar.get(Calendar.MONTH), equalTo(originalDate.get(Calendar.MONTH))); assertThat(minDateCalendar.get(Calendar.DAY_OF_MONTH), equalTo(originalDate.get(Calendar.DAY_OF_MONTH)));
assertNotNull(titleView); assertEquals(View.GONE, titleView.getVisibility());
assertThat(maneuverInstruction, is(isEmptyString())); assertThat(maneuverInstruction, is(isEmptyString()));
assertThat(street, is(MockUtils.ROAD_NUMBER + " " + MockUtils.ROAD_NAME));
assertThat(mCurrentSpeedData.isSpeeding(), is(not(true))); assertThat(data1.isSpeeding(), is(true));
assertThat(mManeuverListAdapter.getItemCount(), equalTo(2));
assertNotNull(valueView); assertEquals(String.valueOf(value), valueView.getText().toString()); assertEquals(getApplicationContext().getString(R.string.msdkui_undefined), valueView.getText().toString()); assertEquals(getApplicationContext().getString(R.string.msdkui_undefined), valueView.getText().toString());
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.TIME));
assertTrue(mRouteDescriptionItem.isBikeOrPedestrian());
assertThat(mManeuverResources.getManeuverIconId(0), equalTo(R.drawable.ic_maneuver_icon_45));
assertThat(arrivedAtDestinationInstruction, equalToIgnoringCase(getStringFromContext(R.string.msdkui_maneuver_end)));
assertEquals(View.GONE, mGuidanceNextManeuverView.getVisibility()); assertEquals(mGuidanceNextManeuverView.getVisibility(), View.VISIBLE); assertThat(distanceView.getText(), is(equalTo(mDistance + " m"))); assertThat(streetName.getText(), is(equalTo(mStreetName)));
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.DETAILS));
assertThat(mWaypointListAdapter.getItemCount(), equalTo(3));
assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.TRAFFIC_WARNING));
assertThat(index, is(0)); assertThat(index, is(-1));
assertThat(layoutParams.getMarginEnd(), equalTo(10));
assertFalse(GuidanceManeuverUtil.maneuversEqual(maneuver1, maneuver2)); assertTrue(GuidanceManeuverUtil.maneuversEqual(maneuver1, maneuver1));
assertEquals(NAME, fromParcel.getCurrentStreetName()); assertEquals(COLOR, fromParcel.getBackgroundColor());
assertNotSame(0, style);
assertThat(street, is(MockUtils.ROAD_NUMBER + " " + MockUtils.ROAD_NAME));
assertThat(timeString, is("0 min"));
assertThat(mBaseGuidancePresenter.getNextManeuverDistance(), is(1L));
assertThat(timeString, is("1 h 5 min"));
assertNotSame(0, color); assertNotSame(Color.CYAN, color);
assertNotNull(item); assertTrue(item.isSectionVisible(ManeuverItemView.Section.DISTANCE));
assertThat(id, equalTo(R.drawable.ic_drive)); assertThat(id, equalTo(R.drawable.ic_truck_24)); assertThat(id, equalTo(R.drawable.ic_walk_24)); assertThat(id, equalTo(R.drawable.ic_bike_24)); assertThat(id, equalTo(R.drawable.ic_scooter));
assertThat(street, is(MockUtils.ROAD_NUMBER + " " + MockUtils.ROAD_NAME));
assertNull(ThemeUtil.getDrawable(getApplicationContext(), typedArray, anyInt()));
assertThat(mWaypointsListViewHolder.getRemovableView().getVisibility(), equalTo(View.VISIBLE)); assertThat(mIsCallbackCalled, is(true)); assertThat(mWaypointListAdapter.getItemCount(), equalTo(0));
assertThat(acceleratingTraversalSection.getDuration()).isEqualTo(DURATION); assertThat(deceleratingTraversalSection.getDuration()).isEqualTo(DURATION);
assertThat(config.areKeyAndValueDefined(TestConfig.FOO)).isFalse();
assertThat(constantAccelerationTraversal.getAccelerationAtTime(1.2)).isCloseTo(2, within(0.000001)); assertThat(constantAccelerationTraversal.getAccelerationAtTime(2.4)).isCloseTo(0, within(0.000001));
assertThat(testConfig.getPrefixedConfigItems("Prefix5").getValue(TestConfig.BAZ).asInt()).isEqualTo(13);
assertThat(ValuesInSIUnits.convertAcceleration(mmPerMsAcceleration, LengthUnit.MILLIMETERS, TimeUnit.MILLISECONDS)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertThat(listOfIds).isEmpty();
assertFalse(result); assertTrue(result); assertEquals(extended1, resultUpdated); assertFalse(result); assertFalse(result); assertFalse(result); assertFalse(result);
assertThat(ValuesInSIUnits.convertDuration(minuteDuration, TimeUnit.MINUTES)).isCloseTo(siDuration, withinPercentage(TOLERANCE));
assertThat(configValue.getWithPrefixBias("Prefix1").currentValue).isEqualTo("2");
assertEquals("+292278994-08-17 07:12:54.784", EventUtil.eventTimeToString((double) maxSupportedTime));
assertThat(constantAccelerationTraversal.getAccelerationAtDistance(2.4)).isCloseTo(2, within(0.000001)); assertThat(constantAccelerationTraversal.getAccelerationAtDistance(4.4)).isCloseTo(0, within(0.000001));
assertThat(configValue.getPrefix("Prefix2").prefixedValues.keySet().stream() .filter(key -> key.contains("Prefix3")) .findAny() .orElse(null)) .isNotEqualTo(null); assertThat(configValue.getPrefix("Prefix2").currentValue).isEqualTo("1");
assertTrue(result); assertEquals(2, updates.size()); assertEquals(extended1, updates.get(0).originalObject); assertEquals(extended1Updated, updates.get(0).newObject); assertNull(updates.get(1).originalObject); assertEquals(extended2, updates.get(1).newObject);
assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(0);
assertThat(prefixedConfigValue.prefixedValues).isEmpty(); assertThat(prefixedConfigValue.currentValue).isEqualTo("3");
assertEquals("0001-01-01 00:00:00.000", EventUtil.eventTimeToString(minSupportedTime));
assertThat(traversalSection.isConstantSpeed()).isTrue();
assertThat(prefixedConfigValue.prefixedValues).isEmpty(); assertThat(prefixedConfigValue.currentValue).isEqualTo("3");
assertEquals("1970-01-01 00:00:01.500", EventUtil.eventTimeToString(1500d));
assertSame(id, simpleIdentified.getId());
assertTrue(iterator.hasNext()); assertEquals(extended1, iterator.next()); assertTrue(iterator.hasNext()); assertEquals(extended2, iterator.next()); assertFalse(iterator.hasNext());
assertThat(constantAccelerationTraversal.getSpeedAtTime(1.2)).isCloseTo(2.4, within(0.000001)); assertThat(constantAccelerationTraversal.getSpeedAtTime(2.4)).isCloseTo(4, within(0.000001));
assertThat(configValue.getPrefixes()).isEqualTo(ImmutableSet.of("Prefix1", "Prefix2", "Prefix3", "Prefix4"));
assertThat(configValue.getPrefix("Prefix3").prefixedValues.keySet().stream() .filter(key -> key.contains("Prefix2")) .findAny() .orElse(null)) .isNotEqualTo(null); assertThat(configValue.getPrefix("Prefix3").currentValue).isEqualTo("1");
assertEquals("+10000-01-01 00:00:00.000", EventUtil.eventTimeToString(253402300800000d));
assertEquals("Invalid S3Config", exception.getMessage());
assertEquals("0001-01-01 00:00:00.000", EventUtil.eventTimeToString(Long.valueOf(minSupportedTime)));
assertThat(config.getValue(TestConfig.FOO).asInt()).isEqualTo(2); assertThat(config.getValue(TestConfig.BAR).asInt()).isEqualTo(1);
assertThat(realTraversal.getSpeedAtTime(4968.894977362377)).isCloseTo(8.000102181418545E-5, within(1e-9));
assertEquals("NaN", EventUtil.eventTimeToString(Double.valueOf(Double.NaN)));
assertThat(subTestConfig.getValue(Colours.BLUE).asInt()).isEqualTo(7); assertThat(subTestConfig.getPrefixedConfigItems("Prefix1").getValue(TestConfig.Colours.RED).asInt()).isEqualTo(8); assertThat(subTestConfig.getPrefixedConfigItems("Prefix1").getValue(TestConfig.Colours.GREEN).asInt()).isEqualTo(9);
assertEquals("null", EventUtil.eventTimeToString((Long) null));
assertThat(traversalSection.getDuration()).isEqualTo(DURATION);
assertEquals("NaN", EventUtil.eventTimeToString(Double.NaN));
assertThat(configValue.getWithPrefixBias("Prefix0").currentValue).isEqualTo("1");
assertThat(listOfIds.get(0)).isEqualTo(Id.create(1)); assertThat(listOfIds.get(1)).isEqualTo(Id.create(2)); assertThat(listOfIds.get(2)).isEqualTo(Id.create(3)); assertThat(listOfIds.get(3)).isEqualTo(Id.create(4));
assertEquals("Invalid S3Config", exception.getMessage());
assertEquals("9999-12-31 23:59:59.999", EventUtil.eventTimeToString(253402300799999L));
assertThat(constantAccelerationTraversal.getDistanceAtTime(1000)).isCloseTo(16, within(1e-9));
assertEquals("-Infinity", EventUtil.eventTimeToString(Double.valueOf(Double.NEGATIVE_INFINITY)));
assertEquals(expectedRoots, roots);
assertThat(testConfig.getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(testConfig.getValue(TestConfig.BAR).asInt()).isEqualTo(2); assertThat(testConfig.getPrefixedConfigItems("InvalidPrefix").getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(testConfig.getPrefixedConfigItems("InvalidPrefix").getValue(TestConfig.BAR).asInt()).isEqualTo(2);
assertThat(enumNode).isInstanceOf(Branch.class); assertThat(node.name).isEqualTo(EmptyEnum.class.getSimpleName()); assertThat(node.branches).isEmpty();
assertEquals("1969-12-31 23:59:59.975", EventUtil.eventTimeToString(Long.valueOf(-25)));
assertEquals(expectedRoots, roots);
assertThat(result).isCloseTo(9.4, within(1e-6));
assertEquals("1970-01-01 00:00:00.000", EventUtil.eventTimeToString(Long.valueOf(0)));
assertEquals("+292278994-08-17 07:12:54.784", EventUtil.eventTimeToString(Double.valueOf(maxSupportedTime)));
assertThat(ValuesInSIUnits.convertSpeed(kmPerMsSpeed, LengthUnit.KILOMETERS, TimeUnit.MILLISECONDS)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertThat(constantAccelerationTraversal.getDurationAtConstantSpeed()).isCloseTo(1, within(0.0000001));
assertThat(config.getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(config.getValue(TestConfig.BAR).asInt()).isEqualTo(2);
assertThat(config.getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(config.getValue(TestConfig.BAR).asInt()).isEqualTo(2);
assertThat(config.getValue(TestConfig.FOO).asString()).isEqualTo(testValue);
assertThat(constantAccelerationTraversal.getTotalDuration()).isCloseTo(7, within(0.000001));
assertThat(ValuesInSIUnits.convertAcceleration(kmPerHourAcceleration, LengthUnit.KILOMETERS, TimeUnit.HOURS)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertThat(actual).isEqualTo(expected);
assertEquals(expectedResult, result);
assertThat(config.getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(config.getValue(TestConfig.BAR).asInt()).isEqualTo(2);
assertEquals("0001-01-01 00:00:00.000", EventUtil.eventTimeToString(Double.valueOf(minSupportedTime)));
assertThat(ValuesInSIUnits.convertDuration(millisecondDuration, TimeUnit.MILLISECONDS)).isCloseTo(siDuration, withinPercentage(TOLERANCE));
assertThat(testConfig.getPrefixedConfigItems("Prefix1").getValue(TestConfig.FOO).asInt()).isEqualTo(100); assertThat(testConfig.getValue(TestConfig.FOO).asInt()).isEqualTo(1);
assertThat(configManager.getConfig(TestConfigTwo.class).getValue(TestConfigTwo.MOO).asInt()).isEqualTo(5); assertThat(configManager.getConfig(TestConfigThree.class).getValue(TestConfigThree.QUACK).asInt()).isEqualTo(4);
assertNotEquals(simpleIdentified, instanceWithDifferentClass); assertNotEquals(instanceWithDifferentClass, simpleIdentified);
assertThat(constantAccelerationTraversal.getDurationAccelerating()).isCloseTo(2, within(0.0000001));
assertThat(constantAccelerationTraversal.getTotalDistance()).isCloseTo(16, within(0.000001));
assertNotNull(s3FileFetcher);
assertTrue(result); assertEquals(2, updates.size()); assertEquals(extended1, updates.get(0).originalObject); assertNull(updates.get(0).newObject); assertEquals(extended2, updates.get(1).originalObject); assertNull(updates.get(0).newObject);
assertEquals("9999-12-31 23:59:59.999", EventUtil.eventTimeToString(Double.valueOf(253402300799999d)));
assertThat(config.getValue(TestConfig.FOO).asString()).isEqualTo("TEST_VALUE");
assertThat(simpleTrie).isInstanceOf(Branch.class); assertThat(branches).hasSize(2); assertThat(branches.values()).allMatch(n -> n instanceof TrieNode.Leaf); assertThat(branches.get("YES")).isEqualTo(new Leaf<>(SimpleEnum.YES)); assertThat(branches.get("NO")).isEqualTo(new Leaf<>(SimpleEnum.NO));
assertThat(config.isValueDefined(TestConfig.FOO)).isFalse();
assertThat(testConfigPrefixSubConfig.getValues().keySet()).isEqualTo(testConfigSubConfigPrefix.getValues().keySet());
assertThat(configValue.getValuesByPrefixedKeys("VALUE")).isEqualTo(expectedValuesByPrefixedKey);
assertEquals("1970-01-01 00:00:00.000", EventUtil.eventTimeToString(0L));
assertFalse(result); assertFalse(result); assertFalse(result); assertFalse(result); assertFalse(result); assertTrue(result); assertEquals(extended1Updated, resultOld);
assertThat(testConfig.getValue(Colours.RED).asInt()).isEqualTo(80); assertThat(testConfig.getValue(Colours.GREEN).asInt()).isEqualTo(90); assertThat(testConfig.getPrefixedConfigItems("Prefix1").getValue(Colours.RED).asInt()).isEqualTo(8); assertThat(testConfig.getPrefixedConfigItems("Prefix1").getValue(Colours.GREEN).asInt()).isEqualTo(9);
assertThat(jerkUpAcceleratingSection.getTotalDistance()).isEqualTo(JERK_UP_DISTANCE); assertThat(jerkDownAcceleratingSection.getTotalDistance()).isEqualTo(JERK_DOWN_DISTANCE); assertThat(jerkUpDeceleratingSection.getTotalDistance()).isEqualTo(JERK_UP_DISTANCE); assertThat(jerkDownDeceleratingSection.getTotalDistance()).isEqualTo(JERK_DOWN_DISTANCE);
assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(1);
assertThat(constantAccelerationTraversal.getSpeedAtTime(1000)).isCloseTo(0, within(1e-9));
assertFalse(result); assertTrue(result); assertNull(resultOld); assertEquals(extended1, resultUpdated); assertFalse(result); assertTrue(result); assertEquals(extended1, resultOld); assertEquals(extended1Updated, resultUpdated); assertFalse(result); assertEquals(extended1Updated, resultOld); assertNull(resultUpdated);
assertThat(config.getIfKeyAndValueDefined(TestConfig.FOO).asString().isPresent()).isFalse();
assertThat(config.isValueDefined(TestConfig.FOO)).isFalse();
assertThat(jerkUpAcceleratingSection.isConstantAcceleration()).isFalse(); assertThat(jerkDownAcceleratingSection.isConstantAcceleration()).isFalse(); assertThat(jerkUpDeceleratingSection.isConstantAcceleration()).isFalse(); assertThat(jerkDownDeceleratingSection.isConstantAcceleration()).isFalse();
assertEquals("1970-01-01 00:00:01.500", EventUtil.eventTimeToString(Double.valueOf(1500)));
assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(1);
assertEquals("null", EventUtil.eventTimeToString((Double) null));
assertThat(ValuesInSIUnits.convertJerk(mmPerMsJerk, LengthUnit.MILLIMETERS, TimeUnit.MILLISECONDS)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertEquals("+10000-01-01 00:00:00.000", EventUtil.eventTimeToString(Double.valueOf(253402300800000d)));
assertEquals("+10000-01-01 00:00:00.000", EventUtil.eventTimeToString(Long.valueOf(253402300800000L)));
assertThat(config.getValue(FirstSubConfig.HOO).asInt()).isEqualTo(1);
assertEquals(expectedRoots, roots);
assertThat(constantAccelerationTraversal.getAccelerationAtTime(1000)).isCloseTo(0, within(1e-9));
assertThat(constantAccelerationTraversal.getDistanceAtTime(2.4)).isCloseTo(5.6, within(0.000001));
assertThat(configValue.getPrefix("Prefix1").prefixedValues).isEmpty(); assertThat(configValue.getPrefix("Prefix1").currentValue).isEqualTo("2"); assertThat(configValue.getPrefix("Prefix2").currentValue).isEqualTo("1"); assertThat(configValue.getPrefix("Prefix3").currentValue).isEqualTo("1");
assertEquals("+292278994-08-17 07:12:55.807", EventUtil.eventTimeToString(Long.MAX_VALUE));
assertThat(configManager.getConfig(TestConfig.class).getValue(TestConfig.BAR).asInt()).isEqualTo(4); assertThat(configManager.getConfig(TestConfigTwo.class).getValue(TestConfigTwo.MOO).asInt()).isEqualTo(5);
assertEquals("Infinity", EventUtil.eventTimeToString(Double.POSITIVE_INFINITY));
assertThat(cm1.getConfig(TestConfig.class).getValue(TestConfig.FOO).asInt()).isEqualTo(1); assertThat(cm2.getConfig(TestConfig.class).getValue(TestConfig.FOO).asInt()).isEqualTo(2);
assertEquals("1969-12-31 23:59:59.979", EventUtil.eventTimeToString(Double.valueOf(-20.5)));
assertFalse(simpleIdentified.equals(null));
assertEquals("0001-01-01 00:00:00.000", EventUtil.eventTimeToString((double) minSupportedTime));
assertThat(config.isValueDefined(TestConfig.FOO)).isTrue();
assertThat(constantAccelerationTraversal.getTimeAtDistance(4.4)).isCloseTo(2.1, within(0.000001));
assertThat(config.getIfValueDefined(TestConfig.FOO).asString().isPresent()).isFalse();
assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(9);
assertEquals("-Infinity", EventUtil.eventTimeToString(Double.NEGATIVE_INFINITY));
assertThat(cm.getConfig(TestConfig.class).areKeyAndValueDefined(TestConfig.FOO)).isTrue();
assertThat(config.getValue(TestConfig.FOO).asInt()).isEqualTo(20); assertThat(config.getValue(TestConfig.BAR).asInt()).isEqualTo(2);
assertEquals("1970-01-01 00:00:00.000", EventUtil.eventTimeToString(Double.valueOf(0)));
assertFalse(result); assertTrue(result); assertEquals(extended1, resultUpdated); assertFalse(result); assertFalse(result); assertFalse(result); assertTrue(result); assertEquals(extended1Updated, resultUpdated);
assertEquals("9999-12-31 23:59:59.999", EventUtil.eventTimeToString(Long.valueOf(253402300799999L)));
assertThat(configValue.getWithPrefixBias("Prefix1").getWithPrefixBias("Prefix4").currentValue).isEqualTo("4");
assertEquals("1969-12-31 23:59:59.975", EventUtil.eventTimeToString(-25L));
assertThat(config.areKeyAndValueDefined(TestConfig.FOO)).isTrue();
assertThat(jerkUpAcceleratingSection.getDuration()).isEqualTo(DURATION); assertThat(jerkDownAcceleratingSection.getDuration()).isEqualTo(DURATION); assertThat(jerkUpDeceleratingSection.getDuration()).isEqualTo(DURATION); assertThat(jerkDownDeceleratingSection.getDuration()).isEqualTo(DURATION);
assertThat(result).isCloseTo(1.4, within(1e-6));
assertEquals(2, states.size()); assertEquals(extended1, states.get(0)); assertEquals(extended2, states.get(1));
assertEquals("+10000-01-01 00:00:00.000", EventUtil.eventTimeToString(253402300800000L));
assertNotEquals(simpleIdentified.getId(), otherId); assertNotEquals(simpleIdentified, instanceWithDifferentId); assertNotEquals(instanceWithDifferentId, simpleIdentified);
assertEquals(id.hashCode(), simpleIdentified.hashCode());
assertEquals("1969-12-31 23:59:59.979", EventUtil.eventTimeToString(-20.5d));
assertEquals(simpleIdentified, instanceWithSameId); assertEquals(instanceWithSameId, simpleIdentified);
assertEquals("Infinity", EventUtil.eventTimeToString(Double.valueOf(Double.POSITIVE_INFINITY)));
assertThat(traversalSection.getTotalDistance()).isEqualTo(DISTANCE);
assertEquals(expectedRoots, roots);
assertThat(ValuesInSIUnits.convertJerk(mmPerMinuteJerk, LengthUnit.MILLIMETERS, TimeUnit.MINUTES)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertThat(testConfig.getValue(TestConfigDummy.BAR).asInt()).isEqualTo(10); assertThat(testConfig.getValue(TestConfigDummy.FOO).asInt()).isEqualTo(12); assertThat(testConfig.getPrefixedConfigItems("Prefix4").getValue(TestConfigDummy.BAR).asInt()).isEqualTo(11); assertThat(testConfig.getPrefixedConfigItems("Prefix4").getValue(TestConfigDummy.FOO).asInt()).isEqualTo(12);
assertThat(realTraversal.getDistanceAtTime(4968.894977362377)).isCloseTo(1.4671108491237437, within(1e-9));
assertEquals("1970-01-01 00:00:01.500", EventUtil.eventTimeToString(1500L));
assertThat(config.getValue(TestConfig.FOO).asString()).isEqualTo(testValue);
assertThat(config.getIfKeyAndValueDefined(TestConfig.FOO).asString().isPresent()).isFalse();
assertThat(prefixedConfigValue.prefixedValues).isEqualTo(ImmutableMap.of()); assertThat(prefixedConfigValue.currentValue).isEqualTo("1");
assertEquals("+292278994-08-17 07:12:55.807", EventUtil.eventTimeToString(Long.valueOf(Long.MAX_VALUE)));
assertThat(constantAccelerationTraversal.getDurationDecelerating()).isCloseTo(4, within(0.0000001));
assertThat(prefixedConfig.getValue(FirstSubConfig.WOO).asInt()).isEqualTo(1); assertThat(prefixedConfig.getValue(SecondSubConfig.WOO).asInt()).isEqualTo(2);
assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(4); assertThat(groupByAggregation.get(otherCoordinate)).isEqualTo(5);
assertThat(acceleratingTraversalSection.getTotalDistance()).isEqualTo(DISTANCE); assertThat(deceleratingTraversalSection.getTotalDistance()).isEqualTo(DISTANCE);
assertThat(config.areKeyAndValueDefined(TestConfig.FOO)).isFalse();
assertThat(constantAccelerationTraversal.getSpeedAtDistance(1)).isCloseTo(2, within(0.000001)); assertThat(constantAccelerationTraversal.getSpeedAtDistance(4.4)).isCloseTo(4, within(0.000001));
assertEquals("9999-12-31 23:59:59.999", EventUtil.eventTimeToString(253402300799999d));
assertEquals("1970-01-01 00:00:00.000", EventUtil.eventTimeToString(0d));
assertEquals("1970-01-01 00:00:01.500", EventUtil.eventTimeToString(Long.valueOf(1500)));
assertThat(ValuesInSIUnits.convertSpeed(mmPerMinuteSpeed, LengthUnit.MILLIMETERS, TimeUnit.MINUTES)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));
assertNotNull(allocationSet); assertTrue(allocationSet.isEmpty());
assertFalse(resultAllocationSet.isEmpty()); assertEquals(resultAllocationSet.size(), 5);
assertEquals(result.getFileUuid(), newMetafile.getFileUuid());
assertNotNull(savedMetatableDTO);
assertEquals(metatableDTO.getType(), metatableEntity.getType()); assertEquals(metatableDTO.getVersion(), metatableEntity.getVersion()); assertEquals(metatableDTO.getUuid(), metatableEntity.getUuid()); assertEquals(metatableDTO.getLastUpdateTimestamp(), metatableEntity.getLastUpdateTimestamp()); assertEquals(metatableDTO.getMetafileSet().size(), metatableEntity.getMetafileSet() .size()); assertEquals(countEquals, metatableDTO.getMetafileSet().size());
assertEquals(version, "1.0-SNAPSHOT");
assertTrue(isAdded);
assertTrue(isRemoved); assertEquals(parentMetafile.getChildFileUuidSet().size(), 0);
assertEquals(parentMetafile.getChildFileUuidSet().size(), 0); assertEquals(childMetafile.getChildFileUuidSet().size(), 0); assertTrue(isAdded); assertEquals(parentMetafile.getChildFileUuidSet().size(), 1); assertTrue(parentMetafile.getChildFileUuidSet().contains(childMetafileUuid));
assertNotNull(savedCertDTO); assertNotNull(savedCertDTO.getId());
assertEquals(blockUuid1, blockUuid); assertEquals(blockUuid2, blockUuid);
assertEquals(AllocationStrategy.HA, changedMetafile.getAllocationStrategy());
assertEquals(metatableEntity.getType(), metatableDTO.getType()); assertEquals(metatableEntity.getVersion(), metatableDTO.getVersion()); assertEquals(metatableEntity.getUuid(), metatableDTO.getUuid()); assertEquals(metatableEntity.getLastUpdateTimestamp(), metatableDTO.getLastUpdateTimestamp()); assertEquals(metafileDTOs.length, metafileEntities.length); assertEquals(countEquals, metafileDTOs.length);
assertEquals(savedKeyStorePasswordDTO1.getPass(), savedKeyStorePasswordDTO2.getPass());
assertEquals(withNewBlock.getBlockUuidList().size(), 1); assertFalse(withRemove.getBlockUuidList().contains(newBlockUuid));
assertNotNull(masterMetatableDTO); assertEquals(masterMetatableDTO.getLastUpdateTimestamp(), lastUpdateTimeStamp1);
assertTrue(isRemoved);
assertEquals(keyStorePasswordDTO.getPass(), savedKeyStorePasswordDTO1.getPass()); assertEquals(keyStorePasswordDTO.getPass(), savedKeyStorePasswordDTO2.getPass());
assertEquals(AllocationStrategy.UNION, result);
assertEquals(blockUuid1, blockUuid); assertEquals(blockUuid2, blockUuid); assertEquals(blockUuid3, blockUuid); assertEquals(blockUuid4, blockUuid); assertEquals(blockUuid5, blockUuid);
assertTrue(withNewBlock.getBlockUuidList().contains(newBlockUuid));
assertNotNull(emptyMetafile); assertNotNull(emptyMetafile.getFileUuid()); assertNotNull(emptyMetafile.getVersion());
assertNotNull(users); assertTrue(users.size() > 3);
assertNotNull(users); assertTrue(users.size() > 3);
assertNotNull(users); assertTrue(users.size() > 3);
assertNotNull(users); assertTrue(users.size() > 3);
assertEquals( 2, tags.size() ); assertEquals( "#Fabio", tags.get( 0 ) ); assertEquals( "#nice", tags.get( 1 ) );
assertEquals(42, model.getDialogPositionX()); assertEquals(24, model.getDialogPositionY()); assertFalse(model.isDialogExpanded());
assertEquals("uri", model.getConfigurationFilePath()); assertEquals("name", model.getConfigurationFileName());
assertEquals(null, model.getLoadedPackageNames());
assertEquals("config_var_pattern", Whitebox.getInternalState(model, "configurationVariablePattern")); assertEquals(new ConfigurationItem("selected_test_id", "selected_test_profile"), Whitebox.getInternalState(model, "selectedConfigItem")); assertEquals(1, lastEntries.size());
assertTrue(model.isLoadConfigurationFileContainerVisible()); assertTrue(model.isLoadedPackageNamesContainerVisible()); assertFalse(model.isPermissionsHeaderVisible()); assertFalse(model.isSystemAlertWindowContainerVisible()); assertFalse(model.isAccessibilityServiceContainerVisible()); assertFalse(model.isReadExternalStorageContainerVisible());
assertEquals(42, model.getDialogPositionX()); assertEquals(24, model.getDialogPositionY()); assertFalse(model.isDialogExpanded());
assertTrue(model.isFastModeEnabled()); assertTrue(model.isFastModeEnabled()); assertFalse(model.isFastModeEnabled());
assertEquals(NORMAL_DIALOG_HEIGHT_PX, model.getNormalDialogHeight());
assertFalse(model.isLoadedPackageNamesContainerVisible()); assertTrue(model.isConfigurationLoadingInProgress());
assertFalse(model.isFastModeEnabled());
assertEquals(null, Whitebox.getInternalState(model, "selectedConfigItem")); assertEquals(0, lastEntries.size());
assertEquals(NORMAL_DIALOG_WIDTH_PX, model.getNormalDialogWidth());
assertEquals("name", model.getConfigurationFileName());
assertEquals(EXPANDED_DIALOG_HEIGHT_PX, model.getExpandedDialogHeight());
assertEquals(FillTheFormDialogModel.VIEW_TYPE_NORMAL_ITEM, viewType);
assertEquals(EXPANDED_DIALOG_WIDTH_PX, model.getExpandedDialogWidth());
assertEquals(null, value);
assertEquals(selectedConfigurationItems, model.getSortedConfigurationItems());
assertEquals(null, model.getConfigurationFileName());
assertFalse(model.isDialogExpanded());
assertFalse(model.isConfigurationLoadingInProgress());
assertEquals(null, model.getConfigurationFilePath());
assertEquals(selectedConfigurationItemsForLastName.size() + 1, model.getSortedConfigurationItems().size()); assertEquals(selectedConfigurationItemsForLastName.size(), model.getSortedConfigurationItems().size());
assertThat(admin).isNull(); assertThat(admin).isEmpty(); assertThat(admin).hasValue(true);
assertThat(mbeanServer.queryMBeans(new ObjectName("org.actioncontroller:controller=" + ExampleController.class.getName() + ",action=one"), null)) .anySatisfy(a -> assertThat(a.getClassName()).contains("ApiControllerActionMXBeanAdaptor"));
assertThat(credentials.get()).get().isEqualTo(Map.of("username", "someuser"));
assertThat(response.getStatus()).isEqualTo(404);
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).contains("org.jsonbuddy.parse.JsonParseException: Unexpected character \'T\'");
assertThat(credentials.get()).get().isEqualToComparingFieldByField(new Credentials("someuser", null)); assertThat(credentials.get()).get().isEqualToComparingFieldByField(new Credentials("someuser2", "secret"));
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).isEqualTo("Could not convert amount=one to int");
assertThat(JsonObject.parse(responseBody.toString()).requiredString("message")) .isEqualTo("Login required");
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).contains("Could not convert enumValue=unknown to java.lang.annotation.ElementType");
assertThat(connection.getResponseCode()).isEqualTo(200); assertThat(writer.toString()) .contains("Swagger Petstore");
assertThat(amount).isEqualTo(123);
assertThat(connection.getResponseCode()) .as(connection.getResponseMessage()) .isEqualTo(200); assertThat(body).contains("<h1>Hello World</h1>");
assertThat(directory.mkdirs()).isTrue(); assertThat(configuration).containsEntry("credentials.username", "someuser2");
assertThat(connection.getResponseCode()).isEqualTo(200); assertThat(writer.toString()) .contains("<h1>Hello World</h1>");
assertThat(fooValue[0]).isNull(); assertThat(fooValue[0]).isEqualTo("real value");
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).contains("Could not convert uuid=Not an uuid to java.util.UUID");
assertThat(value.get()).isEqualTo(11); assertThat(value.get()).isEqualTo(1337);
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).contains("Could not convert longValue=one hundred to long");
assertThat(path.get()).isEqualTo(System.getenv("PATH")); assertThat(path.get()).isEqualTo("test");
assertThat(response.getStatus()).isEqualTo(200); assertThat(JsonObject.parse(new String(response.getBody())).requiredString("name")).isEqualTo(name); assertThat(response.getContentType()).isEqualTo("application/json");
assertThat(postedBody).isEqualTo(requestObject);
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).isEqualTo("Could not convert amount=one to int");
assertThat(daemonPollingInterval).isEqualTo(null); assertThat(daemonPollingInterval).isEqualTo(Duration.ofMinutes(5)); assertThat(daemonPollingInterval).isEqualTo(Duration.ofMinutes(1));
assertThat(configMap.toString()) .contains("clientId=abc") .contains("clientSecret=****") .doesNotContain("my-secret") .doesNotContain("xyz");
assertThat(list).containsOnly("foo,bar"); assertThat(list).containsOnly("a, b ,c");
assertThat(dataSource).isEqualToComparingFieldByField(new DummyDataSource( "jdbc:datamastery:example", "sa", "" )); assertThat(dataSource).isNull(); assertThat(dataSource).isEqualToComparingFieldByField(new DummyDataSource( "jdbc:datamastery:UPDATED", "sa", "" ));
assertThat(credentials.get()).isEmpty(); assertThat(credentials.get()).get().isEqualToComparingFieldByField(new Credentials("someuser2", "secret")); assertThat(credentials.get()).isEmpty();
assertThat(httpListenAddress).isEqualTo(new InetSocketAddress(10080)); assertThat(httpListenAddress).isEqualTo(new InetSocketAddress("127.0.0.1", 11080)); assertThat(httpListenAddress).isEqualTo(new InetSocketAddress("0.0.0.0", 12080)); assertThat(httpListenAddress).isEqualTo(new InetSocketAddress("0.0.0.0", 13080));
assertThat(value.get()).isEqualTo(11L); assertThat(value.get()).isEqualTo(1337L);
assertThat(list).containsExactly("foo", "bar"); assertThat(list).containsExactly("a", "b", "c");
assertThat(response.getStatus()).isEqualTo(400); assertThat(response.getStatusMessage()).isEqualTo("Missing required parameter amount");
assertEquals(r1, r1); assertNotEquals(r1, "impossivel igualdade"); assertEquals(r1, r2); assertEquals(r1.hashCode(), r2.hashCode()); assertNotEquals(r1, r3); assertNotEquals(r2, r3);
assertFalse(verdadeiro.getBoolean());
assertEquals(a, a); assertEquals(a, b); assertEquals(a.hashCode(), b.hashCode());
assertEquals(3.14, pi.getReal(), 0.0001f);
assertEquals(0, r.avalie(avaliaveis, null).getReal(), 0.0001f);
assertEquals(1f, r.ajustaLimites(1.001f), 0.0001f); assertEquals(0f, r.ajustaLimites(-0.0001f), 0.0001f); assertEquals(0.5f, r.ajustaLimites(0.5f), 0.0001f);
assertEquals(r1, r2); assertEquals(r1.hashCode(), r2.hashCode());
assertNull(Valor.dataFromString("01/02"));
assertEquals(0, r.relatosPorTipo("qualquer coisa").size());
assertTrue(a.get("a").getBoolean());
assertNull(a.get("outro atributo"));
assertTrue(verdadeiro.getBoolean());
assertNotNull(et.getId());
assertEquals("casa", casa.getString());
assertEquals(1, relatoComUmValorApenas.getVariaveis().size());
assertFalse(verdadeiro.getBoolean());
assertEquals(0, r.avalie(avaliaveis, null).getReal(), 0.0001f);
assertEquals(0, r.avalie(avaliaveis, null).getReal(), 0.0001f);
assertFalse(verdadeiro.getBoolean());
assertEquals(6, rp.avalie(new ArrayList<>(0), new HashMap<>(0)).getReal(), 0.0001f);
assertTrue(new Observacao(null, o, "simples erro").isInsercao());
assertEquals(0, r.relatosPorTipo("x").size()); assertEquals(0, r.relatosPorTipo(null).size()); assertEquals(2, r.relatosPorTipo("a").size()); assertEquals(1, r.relatosPorTipo("b").size());
assertEquals(q.getRank().longValue(), i);
assertThat(json, notNullValue()); assertThat(json_notif, notNullValue());
assertEquals("agent@sictiam.fr", email);
assertTrue(convocation.isCancelled());
assertEquals("dev@sictiam.fr", email);
assertThat(jsonTranslation, notNullValue());
assertNotNull(providerConfiguration);
assertNotNull("active is null", active); assertEquals("active not true", Boolean.TRUE, active);
assertTrue(ruleMatcher.canCrawl("googlebot", "/test", content)); assertTrue(ruleMatcher.canCrawl("googlebot", "/", content));
assertFalse(ruleMatcher.canCrawl("*", "/", content)); assertFalse(ruleMatcher.canCrawl("ab", "/", content)); assertFalse(ruleMatcher.canCrawl("ab", "/test", content)); assertFalse(ruleMatcher.canCrawl("GoogleBot", "", content)); assertFalse(ruleMatcher.canCrawl("GoogleBot", null, content));
assertTrue(ruleMatcher.canCrawl("*", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/test", content));
assertTrue(ruleMatcher.canCrawl("googlebot", "/", content)); assertTrue(ruleMatcher.canCrawl("curl/7.2.1", "/modules/hello-world.js", content)); assertFalse(ruleMatcher.canCrawl("httpie/1.2.3", "/modules/not-allowed", content));
assertFalse(ruleMatcher.canCrawl("*", "/hello?user=javi", content)); assertFalse(ruleMatcher.canCrawl("*", "/disallow/this/rule?user=javi", content)); assertTrue(ruleMatcher.canCrawl("007", "/test?user=javi", content)); assertTrue(ruleMatcher.canCrawl("007", "/test/allow/this/hello", content));
assertTrue(ruleMatcher.canCrawl("*", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/test", content));
assertTrue(ruleMatcher.canCrawl("*", "/", content)); assertTrue(ruleMatcher.canCrawl("ab", "/test", content)); assertTrue(ruleMatcher.canCrawl("ab", "/", content));
assertTrue(ruleMatcher.canCrawl("*", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/test", content)); assertTrue(ruleMatcher.canCrawl("abc", "/*", content));
assertTrue(ruleMatcher.canCrawl("*", "/test", content)); assertTrue(ruleMatcher.canCrawl("*", "/test/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/test/1", content)); assertTrue(ruleMatcher.canCrawl("googlebot", "/hello", content)); assertTrue(ruleMatcher.canCrawl("*", "/hello", content));
assertFalse(UrlValidator.isValid("abc.hello")); assertFalse(UrlValidator.isValid(null)); assertFalse(UrlValidator.isValid(""));
assertTrue(ruleMatcher.canCrawl("*", "/users", content)); assertTrue(ruleMatcher.canCrawl("abc", "/users", content)); assertTrue(ruleMatcher.canCrawl("abc", "/", content)); assertFalse(ruleMatcher.canCrawl("googlebot", "/hello", content)); assertFalse(ruleMatcher.canCrawl("googlebot", "/", content));
assertTrue(ruleMatcher.canCrawl("googlebot", "/test/file.html", content)); assertTrue(ruleMatcher.canCrawl("googlebot", "/test", content)); assertTrue(ruleMatcher.canCrawl("googlebot", "/not-exists", content));
assertFalse(d1.isAgentValid()); assertFalse(d2.isAgentValid()); assertTrue(d3.isAgentValid());
assertTrue(ruleMatcher.canCrawl("*", "/robots.txt", content)); assertTrue(ruleMatcher.canCrawl("abc", "/", content)); assertTrue(ruleMatcher.canCrawl("abc", "/test", content)); assertTrue(ruleMatcher.canCrawl("*", "/", content));
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(branchCommit.sha, result.get(0).get("sha1")); assertEquals(anotherCommit.sha, result.get(0).get("sha1"));
assertTrue(result.isEmpty()); assertEquals(firstBranchID, result.get(0).get("id")); assertEquals(secondBranchID, result.get(0).get("id")); assertEquals(firstBranchID, result.get(0).get("id"));
assertEquals("app/src/main/java/com/nbossard/packlist/AboutActivity.java", result.oldFile); assertEquals("app/src/main/java/com/nbossard/packlist/dui/AboutActivity.java", result.newFile); assertEquals(94, result.similarity);
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertFalse(result.isEmpty()); assertEquals(1, result.get(0).get("id")); assertTrue(result.isEmpty()); assertFalse(result.isEmpty()); assertEquals(2, result.get(0).get("id")); assertFalse(result.isEmpty()); assertEquals(3, result.get(0).get("id"));
assertNotNull(original); assertEquals("method#a.b.c$myInnerClass$AnotherInnerClass", original.instance); assertEquals(j2gRename.oldFile, original.file);
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(commit.sha, result.get(0).get("sha1")); assertEquals(anotherSha.sha, result.get(0).get("sha1"));
assertNull(original);
assertEquals(expectedSecondSmell, renamed); assertEquals(firstSmell, renamed.parent);
assertNotNull(original); assertNull(secondOriginal);
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(firstBranchID, result.get(0).get("id")); assertEquals(firstBranchID, result.get(0).get("id")); assertEquals(firstBranchID, result.get(0).get("id"));
assertNotNull(original); assertEquals("method#a.b.c$myInnerClass$AnotherInnerClass", original.instance); assertEquals(g2jRename.oldFile, original.file);
assertEquals("aFWall/src/main/java/dev/ukanth/ufirewall/util/CustomRule.java", result.oldFile); assertEquals("aFWall/src/main/java/dev/ukanth/ufirewall/util/CustomRuleOld.java", result.newFile); assertEquals(90, result.similarity);
assertTrue(result.isEmpty()); assertEquals(originCommitId, result.get(0).get("id")); assertEquals(mergedIntoCommitId, result.get(0).get("id")); assertEquals(originCommitId, result.get(0).get("id"));
assertEquals("app/src/main/java/com/nbossard/packlist/dui/AboutActivity.java", result.oldFile); assertEquals("app/src/main/java/com/nbossard/packlist/AboutActivity.java", result.newFile); assertEquals(94, result.similarity);
assertNotNull(original); assertEquals("method#a.b.c$myInnerClass$AnotherInnerClass", original.instance); assertEquals(fileRename.oldFile, original.file);
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(branchCommitId, result.get(0).get("id")); assertEquals(anotherCommitId, result.get(0).get("id"));
assertEquals(++count, getRenameCount()); assertEquals(++count, getRenameCount()); assertEquals(++count, getRenameCount()); assertEquals(++count, getRenameCount()); assertEquals(count, getRenameCount());
assertEquals(expectedSecondSmell, renamed); assertEquals(firstSmell, renamed.parent);
assertEquals(third, myMap.get(first)); assertEquals(third, myMap.get(second)); assertEquals(third, myMap.get(Smell.copyWithoutParent(first))); assertEquals(first, myMap.get(third)); assertTrue(myMap.containsKey(myMap.keySet().toArray()[0]));
assertEquals("app/src/main/groovy/com/nbossard/packlist/gui/AboutActivity.groovy", result.oldFile); assertEquals("app/src/main/java/com/nbossard/packlist/gui/AboutActivity.java", result.newFile); assertEquals(59, result.similarity);
assertTrue(result.isEmpty()); assertFalse(result.isEmpty()); assertNull("returned ID is null", result.get(0).get("id")); assertFalse(result.isEmpty()); assertNull("returned ID is null", result.get(0).get("id")); assertEquals(1, result.get(0).get("id"));
assertEquals(first.hashCode(), second.hashCode()); assertNotEquals(first.hashCode(), third.hashCode()); assertNotEquals(first.hashCode(), second.hashCode());
assertEquals("a.txt", result.oldFile); assertEquals("b.txt", result.newFile); assertEquals(76, result.similarity);
assertNotNull(original); assertEquals("d.e.f", original.instance); assertEquals(sameCommit.oldFile, original.file);
assertNull(original);
assertEquals(++count, getDevelopersCount()); assertEquals(++count, getDevelopersCount()); assertEquals(count, getDevelopersCount());
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(1, result.get(0).get("id")); assertEquals(2, result.get(0).get("id"));
assertNotNull(expectedOriginal); assertNotNull(expectedFirstRename); assertEquals(expectedOriginal, original); assertEquals(expectedFirstRename, firstRename); assertEquals(original, renameEqualToFirst);
assertNotNull(original); assertEquals("a.b.c$myInnerClass$AnotherInnerClass", original.instance); assertEquals(sameOldFile.oldFile, original.file);
assertEquals(++count, getProjectsCount()); assertEquals(++count, getProjectsCount()); assertEquals(++count, getProjectsCount()); assertEquals(count, getProjectsCount());
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertEquals(firstBranchID, result.get(0).get("id")); assertEquals(secondBranchID, result.get(0).get("id"));
assertNull(original);
assertEquals(++count, getBranchCount()); assertEquals(++count, getBranchCount()); assertEquals(++count, getBranchCount()); assertEquals(++count, getBranchCount()); assertEquals(++count, getBranchCount()); assertEquals(++count, getBranchCount()); assertEquals(count, getBranchCount()); assertEquals(count, getBranchCount()); assertEquals(count, getBranchCount());
assertEquals("app/src/main/groovy/com/nbossard/packlist/gui/NewTripFragment.java", result.oldFile); assertEquals("app/src/main/java/com/nbossard/packlist/gui/NewTripFragment.java", result.newFile); assertEquals(100, result.similarity);
assertEquals("a/b/c/d/e.txt", result.oldFile); assertEquals("f/b/c/d/e.txt", result.newFile); assertEquals(100, result.similarity);
assertTrue(result.isEmpty()); assertEquals(commit.sha, result.get(0).get("sha1")); assertEquals(fifthOrdinal.sha, result.get(0).get("sha1")); assertEquals(fifthOrdinal.sha, result.get(0).get("sha1"));
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertFalse(result.isEmpty()); assertEquals(1, result.get(0).get("id")); assertFalse(result.isEmpty()); assertEquals(2, result.get(0).get("id"));
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertTrue(result.isEmpty());
assertNotNull(original); assertEquals("method#a.b.c", original.instance); assertEquals(sameOldFile.oldFile, original.file);
assertEquals(3, count.get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals("I", keyArgument.getValue().toString()); assertEquals(1, valueArgument.getValue().get());
assertEquals(false, ACollectionHelper.exists (Arrays.<String>asList (), len1)); assertEquals(true, ACollectionHelper.exists (Arrays.asList ("a"), len1)); assertEquals(false, ACollectionHelper.exists (Arrays.asList ("ab"), len1)); assertEquals(true, ACollectionHelper.exists (Arrays.asList ("ab", "c", "def"), len1));
assertEquals(3, grouped.size ()); assertEquals(Arrays.asList("a", "d", "j"), grouped.get (1)); assertEquals(Arrays.asList("bc", "hi"), grouped.get (2)); assertEquals(Arrays.asList("efg"), grouped.get (3));
assertEquals("1.230000000", result);
assertEquals (expected, elem);
assertEquals(true, ACollectionHelper.forAll(Arrays.<String>asList(), len1)); assertEquals(true, ACollectionHelper.forAll (Arrays.asList ("a"), len1)); assertEquals(true, ACollectionHelper.forAll (Arrays.asList ("a", "b", "c"), len1)); assertEquals(false, ACollectionHelper.forAll (Arrays.asList ("a", "b", "cd", "e"), len1));
assertEquals(2, grouped.size ()); assertEquals(Arrays.asList("a", "d", "efg", "j"), grouped.get(new AEqualsWrapper<>(equality, 1))); assertEquals(Arrays.asList("bc", "hi"), grouped.get(new AEqualsWrapper<>(equality, 2)));
assertEquals (ACollectionHelper.foldRight ( Arrays.asList (1, 2, 3, 4, 5), 0, new AFunction2<Integer, Integer, Integer, Exception> () { @Override public Integer apply (Integer param1, Integer param2) throws Exception { return param1 * 2 + param2; } }).intValue (), ((((5 * 2 + 4) * 2 + 3) * 2 + 2) * 2 + 1) );
assertEquals("true", result);
assertEquals("null", result);
assertEquals("-123456789.0", result);
assertEquals(Arrays.<String>asList(), ACollectionHelper.flatMap(Arrays.<String>asList(), uppercaseFirst)); assertEquals(Arrays.asList("A"), ACollectionHelper.flatMap(Arrays.asList("Asdf"), uppercaseFirst)); assertEquals(Arrays.asList("A", "Q"), ACollectionHelper.flatMap(Arrays.asList("xyz", "Asdf", "Qzd", "rLS"), uppercaseFirst));
assertEquals(5, flattened.size ()); assertEquals(Arrays.asList("a", "b", "b", "c", "d"), flattenedList);
assertEquals (AOption.<String>none(), ACollectionHelper.find (Arrays.<String>asList (), len1)); assertEquals (AOption.<String>none(), ACollectionHelper.find (Arrays.asList ("", "ab", "cde"), len1)); assertEquals (AOption.some("d"), ACollectionHelper.find (Arrays.asList ("", "abc", "d", "ef", "g"), len1));
assertEquals("-1.234567890", result);
assertEquals(null, StringHelper.hexStringToByteArray(null));
assertEquals(1, l1.size()); assertEquals(2, l2.size()); assertEquals(Arrays.<String>asList(), l0.asJavaUtilList()); assertEquals(Arrays.asList("a"), l1.asJavaUtilList()); assertEquals(Arrays.asList("y", "x"), l2.asJavaUtilList());
assertEquals("1", result);
assertEquals("-1.230000000", result);
assertEquals(0, AList.nil().size()); assertTrue(AList.nil().asJavaUtilList().isEmpty());
assertEquals(Arrays.<String>asList(), ACollectionHelper.filter(Arrays.<String>asList(), len1)); assertEquals(Arrays.<String>asList(), ACollectionHelper.filter (Arrays.asList ("abc"), len1)); assertEquals (Arrays.asList ("a"), ACollectionHelper.filter (Arrays.asList ("a"), len1)); assertEquals(Arrays.asList("a", "d"), ACollectionHelper.filter(Arrays.asList("a", "bc", "d", "efg"), len1));
assertEquals("1.234567890", result);
assertEquals("false", result);
assertEquals(Arrays.<Integer>asList(), ACollectionHelper.map (Arrays.<String>asList (), len)); assertEquals(Arrays.asList(1), ACollectionHelper.map (Arrays.asList ("a"), len)); assertEquals(Arrays.asList(2, 1, 3), ACollectionHelper.map (Arrays.asList ("ab", "c", "def"), len));
assertEquals("12345", result);
assertEquals(0, AHashSet.empty ().size()); assertTrue(AHashSet.empty ().asJavaUtilSet().isEmpty());
assertEquals("1.2", result);
assertEquals (4, result.size ());
assertEquals(null, StringHelper.bytesToHexString (null)); assertEquals("", StringHelper.bytesToHexString(new byte[] {})); assertEquals("01020304", StringHelper.bytesToHexString(new byte[] {1, 2, 3, 4})); assertEquals("0E0F10", StringHelper.bytesToHexString(new byte[] {14, 15, 16})); assertEquals("80FF", StringHelper.bytesToHexString(new byte[] {-128, -1}));
assertEquals("", ACollectionHelper.mkString (Arrays.asList ())); assertEquals("a", ACollectionHelper.mkString(Arrays.asList("a"))); assertEquals("a, b, c", ACollectionHelper.mkString(Arrays.asList("a", "b", "c")));
assertEquals (ACollectionHelper.foldLeft ( Arrays.asList (1, 2, 3, 4, 5), 0, new AFunction2<Integer, Integer, Integer, Exception> () { @Override public Integer apply (Integer param1, Integer param2) throws Exception { return param1 * 2 + param2; } }).intValue (), ((((1*2+2)*2+3)*2+4)*2+5) );
assertEquals("1234.5", result);
assertEquals(replaced, interceptor.changeTable(origin)); assertEquals(replaced, interceptor.changeTable(origin)); assertEquals(replaced, interceptor.changeTable(origin)); assertEquals(replaced, interceptor.changeTable(origin)); assertEquals(origin, interceptor.changeTable(origin));
assertThat(interceptors).isNotEmpty(); assertThat(interceptors.size()).isEqualTo(1); assertThat(page).isInstanceOf(PaginationInnerInterceptor.class); assertThat(pii.getMaxLimit()).isEqualTo(10); assertThat(pii.getDbType()).isEqualTo(DbType.H2);
assertThat(configuration).isInstanceOf(MybatisConfiguration.class); assertThat(configuration.getMappedStatement("com.baomidou.mybatisplus.core.MybatisXMLConfigBuilderTest$EntityMapper.selectCount")) .isNotNull();
assertFalse(cache.containsKey("a")); assertEquals("b1", cache.get("b")); assertFalse(cache.containsKey("c")); assertTrue(cache.containsKey("g")); assertNull(cache.get("g")); assertFalse(cache.containsKey("d")); assertNull(cache.get("d"));
assertTrue(expected.equals(actuals));
assertTrue(outputs.equals(Lists.distinct(inputs)));
assertEquals(1, oneString.length); assertEquals("foo", oneString[0]); assertEquals(1, oneString.length); assertNull(oneString[0]); assertNotNull(emptyOut); assertEquals(0, emptyOut.length); assertNotNull(nulOut); assertEquals(0, nulOut.length);
assertEquals(outputFormatClass, job.getOutputFormatClass()); assertEquals(numSplits, job.getNumReduceTasks());
assertTrue(outputs.equals(Lists.distinct(inputs)));
assertEquals("Must specify non-null table URI", iae.getMessage());
assertFalse(isMapSpecExEnabled);
assertTrue(inputs.equals(Lists.distinct(inputs))); assertTrue(inputs.equals(Lists.distinct(inputs)));
assertEquals("Must specify a non-empty table name", iae.getMessage());
assertEquals("Must specify a fully-qualified column", iae.getMessage());
assertTrue(job.run()); assertEquals("Expected producer output not present. Did producer run successfully?", "lorem", value);
assertEquals("c,b,a", stringified);
assertEquals("a,b,c", stringified);
assertEquals("Unable to find containing jar for class org.kiji.mapreduce.util.TestJars", ce.getMessage());
assertEquals(0, tempDir.list().length); assertEquals(2, tempDir.list().length); assertTrue(dedupedJarNames.contains(p.getName())); assertEquals(0, dedupedJarNames.size());
assertEquals("Could not open table: " + tableURI, iae.getMessage());
assertTrue(outputs.equals(Lists.distinct(inputs)));
assertEquals("127.0.0.1", rowArray.get(0)); assertEquals(1351112444000L, rowArray.get(1)); assertEquals("Mozilla/5.0 (X11; Linux i686 on x86_64; rv:11.0) Gecko/20100101 Firefox/11.0", rowArray.get(2)); assertEquals(800L, rowArray.get(3)); assertEquals(600L, rowArray.get(4));
assertEquals(localeWeekFields.getFirstDayOfWeek(), isoWeekFields.getFirstDayOfWeek()); assertEquals(localeWeekFields.getMinimalDaysInFirstWeek(), isoWeekFields.getMinimalDaysInFirstWeek());
assertNotNull(row); assertNull(row); assertNotNull(row); assertNull(row); assertNotNull(row);
assertEquals("", PathPrefixUtil.sanitize("")); assertEquals("/bla", PathPrefixUtil.sanitize("bla")); assertEquals("/bla", PathPrefixUtil.sanitize("bla/")); assertEquals("", PathPrefixUtil.sanitize("/"));
assertTrue(filter.filter("admin", "role")); assertTrue(filter.filter("group3", "role3")); assertFalse(filter.filter("group2", "role2")); assertFalse(filter.filter("group1", "role1"));
assertEquals(pw.length(), 10); assertNotEquals(pw, PasswordUtil.humanPassword(10)); assertEquals("", PasswordUtil.humanPassword(0));
assertNull(options.getSearchOptions().getUrl());
assertEquals("The node name should have been specified.", "theNodeName", options.getNodeName()); assertEquals("The cluster name should have been specified.", "theClusterName", options.getClusterOptions().getClusterName()); assertTrue("We specified the clusterName thus clustering should automatically be enabled.", options.getClusterOptions().isEnabled());
assertTrue(!metadata.isEmpty());
assertFalse(filter.filter("group")); assertTrue(filter.filter("group1"));
assertEquals("The path list should contain oneentries", 1, list.size()); assertEquals("abc", list.get(0));
assertEquals("The path list should contain two entries", 0, list.size());
assertNotNull(options); assertTrue("The file should have been created.", confFile.exists()); assertNotNull("A keystore password should have been generated.", options.getAuthenticationOptions().getKeystorePassword()); assertNotNull("The node name should have been generated.", options.getNodeName());
assertEquals("", PathPrefixUtil.strip(branch, "")); assertEquals("", PathPrefixUtil.strip(branch, "")); assertEquals("", PathPrefixUtil.strip(branch, "/abc"));
assertNotNull(mesh.getHostname());
assertEquals("The path list should contain two entries", 2, list.size()); assertEquals("abc", list.get(0)); assertEquals("efg", list.get(1));
assertEquals(1, rect.getStartX()); assertEquals(2, rect.getStartY()); assertEquals(3, rect.getWidth()); assertEquals(4, rect.getHeight());
assertEquals(100, outputImage.getWidth()); assertEquals(200, outputImage.getHeight()); assertEquals("No cropping operation should have occured", bi.hashCode(), outputImage.hashCode()); assertEquals(25, outputImage.getWidth()); assertEquals(20, outputImage.getHeight());
assertFalse(PathPrefixUtil.startsWithPrefix(branch, "/abc")); assertTrue(PathPrefixUtil.startsWithPrefix(branch, "/abc"));
assertEquals(50, outputImage.getWidth()); assertEquals(50, outputImage.getHeight());
assertEquals("alice@altostrat.com", mapper.map("alice")); assertEquals("john-bonjour@altostrat.net", mapper.map("john-hello")); assertEquals("marie-lowercase@altostrat.com.au", mapper.map("MaRiE-lowercase"));
assertEquals("alice@example.com", token.getId()); assertEquals(2222222222222L, token.getCreationTime().longValue()); assertArrayEquals("xyz".getBytes(), token.getValue());
assertNull(entity);
assertEquals(token.getValue(), "blah"); assertEquals(token.getExpiresAt(), 888888888L);
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode());
assertEquals("Keytab `/home/does-not-exist` in `authentication.spnego.keytabs` setting does not exist", e.getMessage());
assertEquals(1234, fetcher.getLocalCacheTime());
assertEquals("java.lang.ClassNotFoundException: com.example.DoesNotExist", e.getMessage());
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode());
assertEquals("java.lang.ClassNotFoundException: com.example.DoesNotExist", e.getMessage());
assertEquals( "FakeAccessToken/GoogleIdentity=alice@example.com;Scopes=" + String.join(",", SCOPES), accessToken.getValue());
assertNull(bucket.get()); assertArrayEquals("abcd".getBytes(), bucket.get());
assertEquals("FakeAccessToken/AuthenticatedUser=" + ALICE + ";Owner=" + ALICE + ";Target=", token.getToken());
assertTrue(e.getMessage().startsWith("Invalid `authentication.spnego.keytabs` setting -- Error: hardcoded value: No configuration setting found for key"));
assertNull(cache.get("test")); assertNull(bucket.get());
assertEquals(Status.UNAUTHENTICATED.getCode(), e.getStatus().getCode()); assertEquals("UNAUTHENTICATED: Use \\"authorization: Negotiate <token>\\" metadata to authenticate", e.getMessage());
assertNull(cache.get("whatever"));
assertEquals(Status.UNAUTHENTICATED.getCode(), e.getStatus().getCode()); assertEquals("UNAUTHENTICATED: SPNEGO authentication failed", e.getMessage());
assertNull(entity); assertArrayEquals("abcd".getBytes(), entity.getBlob(CACHE_VALUE_FIELD).toByteArray());
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode()); assertEquals( "GCP Token Broker authorization is invalid or has expired for identity: bob@example.com", e.getStatus().getDescription());
assertEquals("FakeSessionToken/AuthenticatedUser=" + ALICE + ";Owner=" + ALICE + ";Target=", token);
assertEquals(Status.UNAUTHENTICATED.getCode(), e.getStatus().getCode()); assertEquals("UNAUTHENTICATED: SPNEGO authentication failed", e.getMessage());
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode()); assertEquals("Impersonation disallowed for `storm/testhost@EXAMPLE.COM`", e.getStatus().getDescription());
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode()); assertEquals("Impersonation disallowed for `hive/testhost@EXAMPLE.COM`", e.getStatus().getDescription()); assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode()); assertEquals("Impersonation disallowed for `solr/testhost@EXAMPLE.COM`", e.getStatus().getDescription());
assertTrue(e.getCause().getClass().equals(NotFoundException.class));
assertEquals(session.getId(), computed.getId());
assertEquals("java.lang.ClassNotFoundException: com.example.DoesNotExist", e.getMessage());
assertEquals(String.format("access-token-%s-%s-%s", ALICE, SCOPES, TARGET), fetcher.getCacheKey());
assertTrue(result.equals("a1,b1,c1,a2,b2,c2") || result.equals("a2,b2,c2,a1,b1,c1"));
assertEquals("alice@EXAMPLE.COM", authenticateUser);
assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode()); assertEquals("Impersonation disallowed for `spark/testhost@EXAMPLE.COM`", e.getStatus().getDescription());
assertEquals("FakeSessionToken/AuthenticatedUser=" + ALICE + ";Owner=" + ALICE + ";Target=" + MOCK_BUCKET, token);
assertNull(cache.get("whatever"));
assertEquals("FakeAccessToken/AuthenticatedUser=" + ALICE + ";Owner=" + ALICE + ";Target=" + MOCK_BUCKET, token.getToken());
assertEquals("java.lang.ClassNotFoundException: com.example.DoesNotExist", e.getMessage());
assertTrue(accessToken.getValue().startsWith("y"));
assertNull(cache.get("test"));
assertEquals(6789, fetcher.getRemoteCacheTime());
assertTrue(result.equals("a1,b1,c1,a2,b2,c2") || result.equals("a2,b2,c2,a1,b1,c1"));
assertEquals("java.lang.ClassNotFoundException: com.example.DoesNotExist", e.getMessage());
assertArrayEquals("abcd".getBytes(), cache.get("test"));
assertEquals("session-xxxx", fetcher.getCacheKey());
assertArrayEquals("abcd".getBytes(), cache.get("test"));
assertEquals("myid", foo.getId()); assertEquals(1564094282994L, foo.getLongVal().longValue()); assertArrayEquals("abcd".getBytes(), foo.getByteVal()); assertEquals(List.of("hello", "hi"), foo.getStringList());
assertEquals("123456789", session.getId()); assertEquals(ALICE, session.getOwner()); assertEquals(YARN, session.getRenewer()); assertEquals(MOCK_BUCKET, session.getTarget()); assertEquals(GCS, session.getScopes()); assertEquals(11111111111111L, session.getCreationTime().longValue()); assertEquals(2222222222222L, session.getExpiresAt().longValue());
assertFalse(Files.exists(secretsDirectory.resolve("missing-optional.txt")));
assertEquals(RuntimeException.class, e.getClass()); assertEquals( "Failed creating a SPNEGO token. Make sure that you have run kinit and that your Kerberos configuration is correct. See the full Kerberos error message: " + TGT_ERROR, e.getMessage() );
assertTrue(accessToken.getValue().startsWith("y"));
assertEquals(1234, fetcher.getLocalCacheTime());
assertEquals( "FakeAccessToken/GoogleIdentity=alice@altostrat.com;Scopes=" + String.join(",", SCOPES) + ";Target=" + TARGET, token.getValue()); assertEquals(token.getExpiresAt(), 999999999L);
assertEquals("abcd", session.getId()); assertEquals(1000000000000L, session.getCreationTime().longValue()); assertEquals("bob@EXAMPLE.COM", session.getOwner()); assertEquals("yarn@BAZ.NET", session.getRenewer()); assertEquals(BIGQUERY, session.getScopes());
assertEquals(contents, "This is secret stuff");
assertEquals(RuntimeException.class, e.getClass());
assertThat(decodedRecords.length).isEqualTo(1); assertThat(anyValidRecord.getSchema()).isEqualTo(decodedRecords[0].getSchema());
assertThat(type).isEqualTo(CollectorType.BASIC);
assertThat(ttm.tagToTeam("ABCDEFF012"), equalTo(Optional.empty())); assertThat(ttmAfter.getTagToTeam(), hasEntry(new TagId("ABCDEFF012"), 0)); assertThat(ttmAfter.tagToTeam("ABCDEFF012"), equalTo(Optional.of(0)));
assertThat(result.tagToTeam(new TagId("ABCDEF")), equalTo(Optional.of(2))); assertThat(result.tagToTeam(new TagId("FEDCEB")), equalTo(Optional.of(4)));
assertThat(Serialization.getJsonMapper().writeValueAsString(teamStates), equalTo("{\\"0\\":{\\"tagFragmentCount\\":0}}"));
assertThat(teamStates.getTeamNbToState(), equalTo(Collections.EMPTY_MAP));
assertThat(result, equalTo("{\\"4\\":[\\"abcd\\",\\"adcb\\"],\\"5\\":[\\"deff\\"]}"));
assertThat(teamStates.getTeamNbToState(), hasKey(0));
assertEquals("org.postgresql.ssl.NonValidatingFactory", properties.get("sslfactory")); assertEquals("true", properties.get("ssl"));
assertEquals(vectorizedMatrix, new ArrayRealVector(flattenedMatrixContents)); assertEquals(vector.dotProduct(matrix.operate(vector)), vectorizedMatrix.dotProduct(AlgebraUtils.flattenMatrixByColumns(vector.outerProduct(vector))));
assertFalse(MacroBaseMockPipeline.initialized); assertTrue(MacroBaseMockPipeline.initialized); assertTrue(MacroBaseMockPipeline.ran); assertTrue(MacroBaseMockPipeline.initialized); assertTrue(MacroBaseMockPipeline.ran);
assertEquals(1, queryConf.getQueries().size()); assertEquals("some-project", query.getProject()); assertEquals("metric.type=\\"custom.googleapis.com/test\\"", query.getFilter()); assertEquals("300s", query.getAlignmentPeriod()); assertEquals("ALIGN_MEAN", query.getPerSeriesAligner()); assertEquals("REDUCE_MEAN", query.getCrossSeriesReducer()); assertArrayEquals(Lists.newArrayList("foo", "project").toArray(), query.getGroupByFields().toArray());
assertTrue(fakeColumns.contains(sc.getName())); assertEquals(fakeColumnMap.get(sc.getName()), sc.getType()); assertTrue(fakeColumns.isEmpty());
assertEquals(3, out.split("\\n").length); assertTrue(out.contains("b"));
assertEquals(api.size(), itemsets.size());
assertEquals(expected_peaks.length, peaks.size()); assertTrue(expected_peaks[i] == peaks.get(i));
assertEquals(0, node.estimateL2DistanceSquared(datum)[0], 1e-7); assertArrayEquals(distancesSquaredFromFarAwayPoint, node.estimateL2DistanceSquared(datum), 1e-7);
assertEquals(new ArrayRealVector(flattenedMatrixContents), vectorizedMatrix);
assertEquals(1000.0, p100, 0.01); assertEquals(995.0, p99, 0.01); assertEquals(949.0, p90, 0.01); assertEquals(707.0, p50, 0.01); assertEquals(100.0, p1, 0.01); assertEquals(1.0, p0, 0.01);
assertFalse(node.isInsideBoundaries(newdatum));
assertEquals(2, fpt.getSupport(intIfy("a, b"))); assertEquals(0, fpt.getSupport(intIfy("a, b, c, d")));
assertEquals(uniT.density(x), multiT.density(v), 1e-5);
assertEquals(77, datum.metrics().getEntry(0), 0.0); assertEquals(0, datum.attributes().get(0), 0.0); assertEquals(1, datum.attributes().get(1), 0.0);
assertEquals(3.953808582067758, new Wishart(new BlockRealMatrix(matrixArray), 2).getEntropy(), 1e-7); assertEquals(8.4584668123359084, new Wishart(new BlockRealMatrix(matrixArray), 5).getEntropy(), 1e-7);
assertEquals(Double.NaN, result, 0.01); assertEquals(1.0, result, 0.01); assertEquals(2.0, result, 0.01); assertEquals(3.0, result, 0.01); assertEquals(3.0, result, 0.01); assertEquals(3.0, result, 0.01); assertEquals(5.0, result, 0.01); assertEquals(-1.0, result, 0.01); assertEquals(Double.NaN, result, 0.01);
assertEquals(1.0, RiskRatio.compute(10, 10, 100, 100).get(), 0.01); assertEquals(6., RiskRatio.compute(10, 10, 1000, 100).get(), 0.01); assertEquals(900.082, RiskRatio.compute(10, 99, 1000, 100).get(), 0.01);
assertEquals(500, data.size()); assertEquals(vectorFiltered.get(ri), AlgebraUtils.flattenMatrixByColumns(matrixFiltered.get(ri)));
assertEquals(9, df.getNumRows()); assertEquals(df.getNumRows(), output.getNumRows()); assertTrue(e.prettyPrint().contains("location=AUS")); assertTrue(e.prettyPrint().contains("version=v2")); assertTrue(e.prettyPrint().contains("language=ENG"));
assertEquals(dupdetector.size(), itemsets.size());
assertEquals(mScores[i] > mScores[i-1], dScores[i] > dScores[i-1]);
assertEquals(18, itemsets.size());
assertArrayEquals(expected_return, acf.correlations, 1e-5);
assertEquals(0.6915, cdf, 0.001); assertEquals(0.3085, cdf, 0.001); assertEquals(0.7749, cdf, 0.001); assertEquals(1.0, cdf, 0.001); assertEquals(0.0, cdf, 0.001);
assertEquals(18, data.size());
assertEquals("foo", e2.getAttribute(encoded1).getColumn()); assertEquals("bar", e2.getAttribute(encoded3).getColumn()); assertEquals("attrValue3", e2.getAttribute(encoded3).getValue()); assertEquals("attrValue4", e2.getAttribute(encoded4).getValue());
assertEquals(truth.get(cnt.getKey()), cnt.getValue(), 1e-10);
assertEquals(1. / Math.sqrt(2 * var * Math.PI), multiT.density(v), 1e-3);
assertEquals(1.0, RiskRatio.compute(10, 10, 100, 100), 0.01); assertEquals(6., RiskRatio.compute(10, 10, 1000, 100), 0.01); assertEquals(900.082, RiskRatio.compute(10, 99, 1000, 100), 0.01);
assertEquals(0, numDup); assertEquals(dupdetector.size(), itemsets.size());
assertEquals(2, fpt.getSupport(intIfy("a, b"))); assertEquals(0, fpt.getSupport(intIfy("a, b, c, d")));
assertTrue(node.isLeaf());
assertArrayEquals(zeroArray, node.getMinMaxDistanceVectors(datum)[0].toArray(), 1e-7); assertArrayEquals(minArray, minMaxVectors[0].toArray(), 1e-7); assertArrayEquals(maxArray, minMaxVectors[1].toArray(), 1e-7);
assertEquals(avg.metrics().getEntry(0), 4.5, 1e-5); assertEquals(avg.metrics().getEntry(1), 1, 1e-5); assertEquals(avg.metrics().getEntry(1), 1, 1e-5);
assertEquals(3, itemsets.size());
assertEquals(0, numDup); assertEquals(api.size(), itemsets.size());
assertTrue(result.size() == 1); assertTrue(result.size() == 50); assertTrue(result.size() == 49);
assertThat(str.length(), greaterThan(Integer.valueOf(data.size())));
assertEquals(3.0, e.numTotal(), 1e-10);
assertEquals(2, data.size(), 0); assertEquals(1, data.get(0).metrics().getEntry(0), 0); assertEquals(.5, data.get(0).metrics().getEntry(1), 0); assertEquals(1, data.get(1).metrics().getEntry(0), 0); assertEquals(10, data.get(1).metrics().getEntry(1), 0);
assertEquals(43, datum.metrics().getEntry(0), 0.0); assertEquals(45, datum.metrics().getEntry(1), 0.0);
assertTrue(node.isInsideBoundaries(datum));
assertEquals(3, itemsets.size());
assertEquals(5, d.metrics().getEntry(0), 0.0); assertEquals(4, count);
assertEquals(1, e.getResults().size()); assertTrue(e.prettyPrint().contains("col1=a1")); assertEquals(1, e.numOutliers(), 1e-10);
assertEquals(0.155359, mixture.density(new ArrayRealVector(distData[0])), 1e-6); assertEquals(0.162771, mixture.density(new ArrayRealVector(distData[3])), 1e-6); assertEquals(0.094819, mixture.density(new ArrayRealVector(distData[6])), 1e-6);
assertTrue(a1.contains(a2));
assertEquals(1, e.getResults().size()); assertTrue(e.prettyPrint().contains("col1=a1")); assertEquals(47.0, e.numOutliers(), 1e-10);
assertEquals(500, data.size()); assertEquals(vectorFiltered.get(ri).getEntry(0), scalarFiltered.get(ri));
assertEquals(18, itemsets.size());
assertEquals(pdfs[s][i], mvtd.density(new ArrayRealVector(points[s][i])), 1e-7);
assertEquals("100000th prime is", 1_299_709, last);
assertNotNull(result); assertTrue(result.size() == 50); assertTrue(!instrumentIds.contains(instrumentInfo.getInstrumentId()));
assertThat(message.getMessageProperties().getHeaders().get("x-original-exchange")).isEqualTo("the.original.exchange");
assertThat(message.getMessageProperties().getHeaders().get("x-exception-stacktrace")).isEqualTo(expectedHeaderValue);
assertThat(message.getMessageProperties().getHeaders().get("x-exception-message")).isEqualTo(cause.getCause().getMessage());
assertThat(transformer.getTags("com.izettle.metrics.influxdb.tags.PositionBasedTransformer.count")) .containsEntry("className", "PositionBasedTransformer") .containsEntry("function", "count"); assertThat(transformer.getTags("com.izettle.metrics.influxdb.tags.NoopTransformer.count")) .containsEntry("className", "NoopTransformer") .containsEntry("function", "count");
assertThat(lineString).isEqualTo("xxx,tag1Key=tag1Value bb.cc2=\\"222\\",bb.cc1=\\"111\\" 456000\\n");
assertThat(lineString).isEqualTo( "xxx,tag1Key=tag1Value aaa.field1Key=\\"field1Value\\" 456000\\n"); assertThat(lineString).isEqualTo( "xxx,tag1Key=tag1Value aaa.field1Key=\\"field1Value\\",bbb.field1Key=\\"field1Value\\" 456000\\n");
assertThat(lineString) .isEqualTo( "my\\\\ measurement\\\\,1,tag1\\\\ Key=tag1\\\\ Value,tag1\\\\,Key=tag1\\\\,Value,tag1\\\\=Key=tag1\\\\=Value field1\\\\ Key=\\"field1Value\\" 456000\\n");
assertThat(influxDbHttpSender.getSerializer() != null); assertThat(influxDbHttpSender.getWriteObject() != null); assertThat(influxDbHttpSender.getTags().isEmpty()); assertThat(influxDbHttpSender.getWriteObject().getDatabase().equals("testdb")); assertThat(influxDbHttpSender.writeData(new byte[0]) == 0);
assertThat(influxDbHttpSender.writeData(new byte[0]) == 0);
assertThat(lineString) .isEqualTo("prefix.my\\\\ measurement\\\\,1=1 field1\\\\ Key=\\"field1Value\\" 456000\\n");
assertThat(lineString) .isEqualTo("my\\\\ measurement\\\\,1=1 field1\\\\ Key=\\"field1Value\\" 456000\\n");
assertThat(lineString).isEqualTo("measurement1 field1Key=\\"field1Value\\",field5Key=0.432 456000\\n");
assertThat(influxDbTcpSender.writeData(new byte[0]) == 0);
assertThat(influxDbUdpSender.writeData(new byte[0]) == 0);
assertThat(lineString).isEqualTo( "xxx,tag1Key=tag1Value bbb.ccc.field1Key=\\"field1Value\\" 456000\\n"); assertThat(lineString).isEqualTo( "xxx,tag1Key=tag1Value bbb.ccc.field1Key=\\"field1Value\\",yyy.zzz.field1Key=\\"field1Value\\" 456000\\n");
assertThat(lineString).isEqualTo( "measurement1,tag1Key=tag1Value field1Key=\\"field1Value\\" 456000\\n"); assertThat(lineString).isEqualTo( "measurement1,tag1Key=tag1Value field1Key=\\"field1Value\\" 456000\\n" + "measurement1,tag1Key=tag1Value field1Key=\\"field1Value\\" 456000\\n");
assertThat(lineString).isEqualTo("measurement1 field1Key=\\"field1Value\\",field5Key=0.432 456000\\n");
assertThat(transformer.getTags("com.izettle.metrics.influxdb.tags.PositionBasedTransformer.count")).isEmpty();
assertEquals(new Date(100, 0, 1), converter.fromString("01.01.2000")); assertEquals(null, converter.fromString(""));
assertEquals(null, Reference.from((String) null));
assertEquals(1, repository.query(new Foo()).count()); assertEquals(1, repository.query(new Bar()).count());
assertEquals(1, repository.query(new Foo()).count()); assertEquals(3, repository.query(new Bar()).count()); assertEquals(1, repository.query(new Foo()).count()); assertEquals(3, repository.query(new Bar()).count()); assertEquals(1, repository.query(new Foo()).count()); assertEquals(0, repository.query(new Bar()).count());
assertEquals(1, repository.query(new Foo()).count()); assertEquals(3, repository.query(new Bar()).count());
assertEquals(2, repository.query(foo, Where.equal(foo.barsP, null)).count());
assertEquals(2, repository.query(foo, Where.equal(foo.barP, null)) .count());
assertEquals("UTF_8", converter.toString(Encoding.UTF_8));
assertEquals(1, repository.query(foo, Where.hasOne(foo.barsP, bar, Where.any())) .count());
assertEquals(Encoding.UTF_8, converter.fromString("UTF_8"));
assertTrue(descending.hasNext()); assertTrue(descending.next().getClass() == Foo.class); assertTrue(descending.hasNext()); assertTrue(descending.next().getClass() == FooEx.class); assertFalse(descending.hasNext()); assertTrue(ascending.hasNext()); assertTrue(ascending.next().getClass() == FooEx.class); assertTrue(ascending.hasNext()); assertTrue(ascending.next().getClass() == Foo.class); assertFalse(ascending.hasNext());
assertEquals(2, repository.query(new Foo()).count());
assertEquals(1, references.size());
assertFalse(aspect.setCalled); assertFalse(aspect.getCalled); assertTrue(aspect.setCalled); assertTrue(aspect.getCalled); assertTrue(aspects.hasNext()); assertEquals(aspect, aspects.next()); assertTrue(aspects.hasNext()); assertFalse(aspects.hasNext()); assertFalse(aspect.setCalled); assertFalse(aspect.getCalled);
assertEquals(0, repository.query(new Foo()).count()); assertEquals(0, repository.query(new Bar()).count());
assertEquals( 1, repository.query(foo, Where.not(Where.has(foo.barP, bar, Where.any()))) .count());
assertEquals(1, repository.query(new Foo()).count()); assertEquals(0, repository.query(new Bar()).count());
assertEquals(Row.getID(foo), Row.getID(repository.lookup(reference)));
assertEquals(1, repository.query(foo, Where.has(foo.barP, bar, Where.any())) .count());
assertTrue(new Reference<Foo>(Foo.class, 1).equals(new Reference<Foo>( Foo.class, 1))); assertFalse(new Reference<Foo>(Foo.class, 1).equals(new Reference<Foo>( Foo.class, 2)));
assertEquals(1, repository.query(new Foo()).count()); assertEquals(0, repository.query(new Bar()).count());
assertTrue(foos.hasNext()); assertTrue(foos.next().getClass() == FooEx.class); assertFalse(foos.hasNext());
assertEquals(1, repository.query(new Foo()).count());
assertEquals("01.01.2000", converter.toString(new Date(100, 0, 1))); assertEquals("", converter.toString(null));
assertNull(Reference.from("propoid.db.operation.Quux/1"));
assertEquals(toParcel, fromParcel);
assertTrue(new Reference<Foo>(Foo.class, 1).hashCode() == new Reference<Foo>( Foo.class, 1).hashCode()); assertFalse(new Reference<Foo>(Foo.class, 1).hashCode() == new Reference<Foo>( Foo.class, 2).hashCode());
assertEquals(Row.getID(fooEx), Row.getID(repository.lookup(reference)));
assertTrue(foos.hasNext()); assertTrue(foos.next().getClass() == Foo.class); assertTrue(foos.hasNext()); assertTrue(foos.next().getClass() == FooEx.class); assertFalse(foos.hasNext());
assertTrue(e.getCause() instanceof ProtocolException); assertTrue((e.getCause() != null && e.getCause() instanceof CancelledKeyException) || (e instanceof SocketException && e.getMessage().equals("Socket is closed")));
assertEquals("a, b", j1); assertEquals("1, 2", j2);
assertTrue(jars.size() == 1);
assertEquals("com.sap.research.security.vulas", pp.getLibraryId().getMvnGroup()); assertEquals("lang-java", pp.getLibraryId().getArtifact()); assertTrue(false);
assertTrue(packs.size() > 0);
assertTrue(!o1.containsKey("foo.bar")); assertTrue(!o1.containsKey("john.doe")); assertTrue(o3.containsKey("foo.bar")); assertTrue(!o3.containsKey("john.doe")); assertTrue(o2.containsKey("foo.bar")); assertTrue(o2.containsKey("john.doe")); assertTrue(!o4.containsKey("foo.bar")); assertTrue(o4.containsKey("john.doe"));
assertTrue(!jars.isEmpty());
assertEquals(4, f1.length); assertEquals(3, f2.length); assertEquals(2, f3.length);
assertEquals( FileUtil.getDigest(source_file.toFile(), DigestAlgorithm.SHA1), FileUtil.getDigest(target_file.toFile(), DigestAlgorithm.SHA1)); assertEquals(true, false);
assertEquals(JavaId.Type.CONSTRUCTOR, retval);
assertEquals(13, constructs.size()); assertTrue(false);
assertEquals(JavaId.Type.INTERFACE, retval);
assertTrue(JavaId.removePackageContext("a.b.c.Class").equals("Class")); assertTrue(JavaId.removePackageContext("a.b.c.Class$NestedClass").equals("NestedClass")); assertTrue(JavaId.removePackageContext("Class").equals("Class"));
assertEquals(false, JarAnalyzer.isJavaIdentifier("1.0")); assertEquals(true, JarAnalyzer.isJavaIdentifier("Foo")); assertEquals(false, JarAnalyzer.isJavaIdentifier("{Foo"));
assertNull(vuln.getNotes()); assertEquals("COLLECTIONS-580", vuln.getVulnId());
assertEquals(35, constructs.size());
assertEquals("{\\"bar\\":\\"bar\\",\\"test\\":\\"test\\"}", json_all); assertEquals("{\\"bar\\":\\"bar\\"}", json_bar); assertEquals("{\\"bar\\":\\"bar\\",\\"test\\":\\"test\\"}", json_all);
assertEquals(hashSet, retval);
assertEquals(JavaId.Type.ENUM, retval);
assertEquals("Foo", fqn); assertEquals(null, fqn); assertEquals("com.sun.tools.xjc.grammar.IgnoreItem", fqn);
assertEquals(expected_sha1, sha1); assertEquals(expected_md5, md5);
assertEquals("test", parsedCommands.get(DIRECTORY_OPTION)); assertTrue((boolean) parsedCommands.get(VERBOSE_OPTION)); assertTrue((boolean) parsedCommands.get(UPLOAD_CONSTRUCT_OPTION)); assertFalse((boolean) parsedCommands.get(OVERWRITE_OPTION));
assertFalse(c3.containsKey(func));
assertEquals(15, c3.size());
assertEquals(JavaId.Type.NESTED_CLASS, retval);
assertEquals(options.getOptions().size(), 4); assertTrue(options.hasOption("d")); assertTrue(options.hasOption("u")); assertTrue(options.hasOption("v")); assertTrue(options.hasOption("o"));
assertTrue(rt < 50000);
assertEquals(3, vuln.getArtifacts().size());
assertEquals(JavaId.Type.PACKAGE, retval);
assertEquals(1, b.anInt); assertEquals("Foo", b.aString);
assertEquals(hashSet, retval);
assertEquals(url, c1.getServiceUrl(Service.BACKEND)); assertEquals(url, c1.getServiceUrl(Service.BACKEND)); assertEquals(url, c1.getServiceUrl(Service.BACKEND));
assertTrue(ppv.containsMD5(json, "c1d30f51cff4a38f9454b23328a15c5a")); assertEquals(c, ppv.getReleaseTimestamp()); assertFalse(ppv.containsMD5(json, "c1d30f51cff4a38f9454b23328a15c5azzzzz")); assertEquals(null, ppv.getReleaseTimestamp());
assertEquals("foo bar baz", text); assertEquals(expected_sha1, sha1);
assertTrue(fa instanceof org.eclipse.steady.python.Python3FileAnalyzer);
assertEquals(JavaId.Type.METHOD, retval);
assertTrue(found);
assertEquals(2, c1.size()); assertEquals(4, c2.size()); assertEquals(12, c3.size()); assertTrue(c3.containsKey(pack)); assertTrue(c3.containsKey(modu)); assertTrue(c3.containsKey(func)); assertTrue(c3.containsKey(clas)); assertTrue(c3.containsKey(meth));
assertTrue(results.size() > 0); assertEquals(1d, results.iterator().next().getResult(), 0d);
assertEquals(3, vuln.getArtifacts().size()); assertEquals(3, vuln.getNotes().size()); assertEquals("COLLECTIONS-580", vuln.getVulnId());
assertEquals( new LibraryId("commons-fileupload", "commons-fileupload", "1.2.1"), m.parseGAPV("commons-fileupload:commons-fileupload:jar:1.2.1")); assertTrue(m.parseGAPV("commons-fileupload:commons-fileupload:1.2.1") == null);
assertTrue(fa instanceof org.eclipse.steady.python.Python335FileAnalyzer);
assertEquals(1, r1.size()); assertEquals(2, r2.size());
assertEquals(0, SmtpClient.transform(addresses).length); assertEquals(1, SmtpClient.transform(addresses).length);
assertTrue(werkzeug.getDownloadUrl() != null); assertTrue(ms.getDownloadUrl() != null); assertTrue(isdang.getDownloadUrl() != null);
assertEquals("UTF-8", cs.name());
assertTrue(!cp.contains(with_mf_entry)); assertTrue(!with_mf_entry.equals(appended_path)); assertTrue(cp.contains(without_mf_entry)); assertTrue(without_mf_entry.equals(appended_path)); assertTrue(false);
assertEquals(JavaId.Type.CLASS, retval);
assertEquals(JavaId.Type.CLASSINIT, retval);
assertEquals(true, StringUtil.isEmptyOrContainsEmptyString(null)); assertEquals(true, StringUtil.isEmptyOrContainsEmptyString(new String[] {})); assertEquals(true, StringUtil.isEmptyOrContainsEmptyString(new String[] {""})); assertEquals(false, StringUtil.isEmptyOrContainsEmptyString(new String[] {"foo"})); assertEquals(false, StringUtil.isEmptyOrContainsEmptyString(new String[] {"foo", "bar"}));
assertEquals(0, this.spaceRepository.count()); assertEquals(1, this.spaceRepository.count());
assertEquals(m1, m2);
assertEquals(vul_sig_json, vulSigJson); assertEquals(fix_sig_json, fixSigJson); assertEquals(sig_chg_json, sigChange); assertEquals(chg, sig_chg);
assertEquals("{\\"bar\\":\\"bar\\",\\"test\\":\\"test\\"}", json_all);
assertEquals(new LibraryId("commons-codec", "commons-codec", "1.2.1"), parent);
assertEquals(testSpace, new_space);
assertEquals("master", commit.getBranch()); assertEquals("b2b8f4adc557e4ef1ee2fe5e0ab46866c06ec55b", commit.getCommitId()); assertEquals("1447974481000", commit.getTimestamp());
assertEquals(1, this.bugRepository.count());
assertEquals(" 1", StringUtil.padLeft(1, 3)); assertEquals( "11111", StringUtil.padLeft(11111, 3));
assertEquals(1, vuln.getArtifacts().size()); assertEquals(false, vuln.getArtifacts().get(0).getAffected());
assertEquals("hello.min", name1); assertEquals("hello", name2); assertEquals("hello.io.min", name3);
assertFalse(p1.equals(p2)); assertTrue(p1.equalsStandardDistributionName(p2));
assertEquals(expected_sha1, sha1);
assertNotNull(booleanICResponse); assertTrue(booleanICResponse.isSuccess()); assertTrue(booleanICResponse.getResult());
assertNotNull(booleanICResponse); assertTrue(booleanICResponse.isSuccess()); assertTrue(booleanICResponse.getResult());
assertThat(found).isNotNull(); assertThat(founds).isNotEmpty().hasSize(2);
assertThat(found).isNotNull();
assertNotNull(delete); assertTrue(delete.isSuccess()); assertTrue(delete.getResult());
assertNotNull(update); assertTrue(update.isSuccess()); assertTrue(update.getResult());
assertNotNull(mapICResponse); assertTrue(mapICResponse.isSuccess());
assertNotNull(fullCityItemWithDetailInfoICResponse); assertTrue(fullCityItemWithDetailInfoICResponse.isSuccess());
assertNotNull(fullCityItemInfoICResponse); assertTrue(fullCityItemInfoICResponse.isSuccess());
assertEquals("born", pas.get(SemanticRole.PREDICATE)); assertEquals("Putin", pas.get(SemanticRole.PATIENT)); assertEquals("Where", pas.get(SemanticRole.LOCATION));
assertEquals(name, defaultInterpretation.getName()); assertEquals(defaultInterpretation.getName(), analyzedInterpretation.getName());
assertEquals(celebrity, defaultInterpretation.getCelebrity()); assertEquals(defaultInterpretation.getCelebrity(), analyzedInterpretation.getCelebrity());
assertEquals(intent, defaultInterpretation.getIntent()); assertEquals(defaultInterpretation.getIntent(), analyzedInterpretation.getIntent());
assertEquals(intentDistance, defaultInterpretation.getIntentDistance()); assertEquals(defaultInterpretation.getIntentDistance(), analyzedInterpretation.getIntentDistance());
assertEquals(sentenceType, defaultInterpretation.getSentenceType()); assertEquals(defaultInterpretation.getSentenceType(), analyzedInterpretation.getSentenceType());
assertEquals("die", pas.get(SemanticRole.PREDICATE)); assertEquals("Elvis",pas.get(SemanticRole.AGENT)); assertEquals("Where", pas.get(SemanticRole.LOCATION));
assertEquals(objAnswer, defaultInterpretation.getObjAnswer()); assertEquals(defaultInterpretation.getObjAnswer(), analyzedInterpretation.getObjAnswer());
assertEquals(keywords, defaultInterpretation.getKeywords()); assertEquals(defaultInterpretation.getKeywords(), analyzedInterpretation.getKeywords());
assertEquals(parsingOutcome, defaultInterpretation.getParsingOutcome()); assertEquals(defaultInterpretation.getParsingOutcome(), analyzedInterpretation.getParsingOutcome());
assertEquals(underspecifiedAnswer, defaultInterpretation.getUnderspecifiedAnswer()); assertEquals(defaultInterpretation.getUnderspecifiedAnswer(), analyzedInterpretation.getUnderspecifiedAnswer());
assertEquals(parse, defaultInterpretation.getParse()); assertEquals(defaultInterpretation.getParse(), analyzedInterpretation.getParse());
assertArrayEquals(posTags, defaultInterpretation.getPosTags()); assertArrayEquals(defaultInterpretation.getPosTags(), analyzedInterpretation.getPosTags());
assertEquals(predAnswer, defaultInterpretation.getPredAnswer()); assertEquals(defaultInterpretation.getPredAnswer(), analyzedInterpretation.getPredAnswer());
assertEquals(triples, defaultInterpretation.getTriples()); assertEquals(triple, defaultInterpretation.getTriples().get(0)); assertEquals(defaultInterpretation.getTriples(), analyzedInterpretation.getTriples());
assertEquals(sentence, defaultInterpretation.getSentence()); assertEquals(defaultInterpretation.getSentence(), analyzedInterpretation.getSentence());
assertEquals(tokens, defaultInterpretation.getTokens()); assertEquals(defaultInterpretation.getTokens(), analyzedInterpretation.getTokens());
assertEquals(emotion, defaultInterpretation.getEmotion()); assertEquals(defaultInterpretation.getEmotion(), analyzedInterpretation.getEmotion());
assertEquals("is", pas.get(SemanticRole.PREDICATE)); assertEquals("Mount Everest", pas.get(SemanticRole.PATIENT)); assertEquals("How", pas.get(SemanticRole.MANNER)); assertEquals("high", pas.get(SemanticRole.AGENT)); assertEquals("live", pas.get(SemanticRole.PREDICATE)); assertEquals("in Berlin", pas.get(SemanticRole.LOCATION)); assertEquals("How many people", pas.get(SemanticRole.AGENT));
assertEquals(answer, defaultInterpretation.getAnswer()); assertEquals(defaultInterpretation.getAnswer(), analyzedInterpretation.getAnswer());
assertEquals(association, defaultInterpretation.getAssociation()); assertEquals(defaultInterpretation.getAssociation(), analyzedInterpretation.getAssociation());
assertEquals(semTriples, defaultInterpretation.getSemTriples()); assertEquals(defaultInterpretation.getSemTriples(), analyzedInterpretation.getSemTriples());
assertEquals(isRoboy, defaultInterpretation.isRoboy()); assertEquals(defaultInterpretation.isRoboy(), analyzedInterpretation.isRoboy());
assertTrue(interpretation.getSentenceType() == SentenceType.WHAT);
assertEquals("January first six hundred sixty six",action.getText()); assertEquals("December thirty first two thousand ten",action.getText()); assertEquals("September thirteenth one thousand forty",action.getText()); assertEquals("July twenty eighth two thousand three hundred",action.getText()); assertEquals("April fourth sixteen hundred four",action.getText());
assertArrayEquals(lemmas, defaultInterpretation.getLemmas()); assertArrayEquals(defaultInterpretation.getLemmas(), analyzedInterpretation.getLemmas());
assertEquals(defaultInterpretation, interpretation);
assertEquals(underspecifiedQuestion, defaultInterpretation.getUnderspecifiedQuestion()); assertEquals(defaultInterpretation.getUnderspecifiedQuestion(), analyzedInterpretation.getUnderspecifiedQuestion());
assertEquals(pas, defaultInterpretation.getPas()); assertEquals(defaultInterpretation.getPas(), analyzedInterpretation.getPas());
assertEquals("is", pas.get(SemanticRole.PREDICATE)); assertEquals("the area code of Germany", pas.get(SemanticRole.PATIENT)); assertEquals("What", pas.get(SemanticRole.AGENT));
assertEquals("born", pas.get(SemanticRole.PREDICATE)); assertEquals("Putin", pas.get(SemanticRole.PATIENT)); assertEquals("When", pas.get(SemanticRole.TIME));
assertEquals("die", pas.get(SemanticRole.PREDICATE)); assertEquals("Elvis", pas.get(SemanticRole.AGENT)); assertEquals("When", pas.get(SemanticRole.TIME));
assertEquals(sentiment, defaultInterpretation.getSentiment()); assertEquals(defaultInterpretation.getSentiment(), analyzedInterpretation.getSentiment());
assertThat(number).isEqualTo(42);
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(rejectedCmd.isResponseSemaphoreRejected() || rejectedCmd.isResponseShortCircuited()); assertEquals(0, stream.getLatestRollingMax());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatestRollingMax());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(7L, stream.getLatest().getErrorCount()); assertEquals(7L, stream.getLatest().getTotalRequests());
assertFalse(cmd.hasBeenInterrupted());
assertEquals("2", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(1, cmdIterator.next().getNumberCollapsed());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(2, stream.getLatestRollingMax());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SEMAPHORE_REJECTED\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[1]}]", actual);
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, command.execute()); assertEquals("Execution Failure for TestHystrixCommand", command.getFailedExecutionException().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[23,34]}]", actual);
assertFalse(foundError.get());
assertTrue(distribution.getTotalCount() <= 1); assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1, stream.getLatest().getTotalCount());
assertFalse(foundError.get());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertTrue(interrupted.get());
assertEquals("anException", e.getCause().getMessage());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"FAILURE\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[56,67]}]", actual);
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals(0, distribution.getTotalCount()); assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatest().getTotalCount());
assertEquals(FlexibleTestHystrixCommand.EXECUTE_VALUE, command.execute()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(1000, TimeUnit.MILLISECONDS));
assertEquals(1, counter.buckets.size()); assertEquals(4, counter.buckets.size());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(3, stream.getLatestRollingMax());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1, stream.getLatestRollingMax());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(commandShowsUp.get()); assertTrue(threadPoolShowsUp.get());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertFalse(cmd.hasBeenInterrupted());
assertEquals(0, metrics.getHealthCounts().getErrorPercentage()); assertEquals(50, metrics.getHealthCounts().getErrorPercentage()); assertEquals(25, metrics.getHealthCounts().getErrorPercentage()); assertEquals(50, metrics.getHealthCounts().getErrorPercentage()); assertEquals(30, metrics.getHealthCounts().getErrorPercentage());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals(added.get(), p.buckets.peekLast().data.length());
assertEquals(null, response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals(null, response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(true, command1.execute()); assertEquals(true, command2.execute()); assertNotSame(command1.getCircuitBreaker(), command2.getCircuitBreaker());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatestRollingMax());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"FAILURE\\",\\"FALLBACK_FAILURE\\"],\\"latencies\\":[104]}]", actual);
assertEquals(FlexibleTestHystrixCommand.EXECUTE_VALUE, command.execute()); assertEquals(null, command.getFailedExecutionException()); assertNull(command.getExecutionException()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isSuccessfulExecution()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertFalse(command1.isCommandRunningInThread()); assertEquals("A", f1); assertEquals("B", f2); assertEquals("A", f3); assertTrue(command1.executed); assertTrue(command2.executed); assertFalse(command3.executed); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(cmd.isResponseShortCircuited()); assertEquals(1, stream.getLatestRollingMax());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(2, stream.getLatestRollingMax());
assertTrue(writes.get() <= 2); assertEquals(0, servlet.getNumberCurrentConnections());
assertNull(Hystrix.getCurrentThreadExecutingCommand());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatestRollingMax());
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, command.queue().get()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(false, commandEnabled.execute()); assertEquals(false, commandDisabled.execute()); assertEquals("we failed with a simulated issue", commandDisabled.getFailedExecutionException().getMessage()); assertTrue(commandDisabled.isFailedExecution()); assertNotNull(commandDisabled.getExecutionException()); assertEquals(0, commandDisabled.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(0, counter.buckets.size()); assertEquals(1, counter.buckets.size()); assertEquals(1, counter.buckets.size()); assertEquals(1, counter.buckets.size());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[53],\\"collapsed\\":{\\"name\\":\\"FooCollapser\\",\\"count\\":6}}]", actual);
assertTrue(command1.getExecutionTimeInMilliseconds() == -1); assertTrue(command1.isResponseShortCircuited()); assertFalse(command1.isResponseTimedOut()); assertNotNull(command1.getExecutionException()); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertNotNull(context.getKeyParameters()); assertEquals(1, context.getKeyParameters().size()); assertEquals(String.class, actual.getRawType()); assertEquals(param1, actual.getValue()); assertEquals(0, actual.getPosition());
assertEquals(null, response1.get(1000, TimeUnit.MILLISECONDS)); assertTrue(e.getCause() instanceof IllegalStateException); assertTrue(e.getCause().getMessage().startsWith("No response set by")); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertTrue(command.isResponseTimedOut()); assertEquals("expected fallback value", "timed-out", value);
assertTrue(cmd.execute()); assertFalse(cmd.isCircuitBreakerOpen());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"THREAD_POOL_REJECTED\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[1]}]", actual);
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(shortCircuit1.isResponseShortCircuited()); assertTrue(shortCircuit2.isResponseShortCircuited()); assertEquals(3L, stream.getLatest().getErrorCount()); assertEquals(3L, stream.getLatest().getTotalRequests());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertFalse(command3.execute()); assertTrue(command3.isResponseRejected()); assertFalse(command1.isResponseRejected()); assertFalse(command2.isResponseRejected()); assertTrue(command3.isResponseFromFallback()); assertNotNull(command3.getExecutionException()); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals(true, properties.circuitBreakerForceClosed().get());
assertEquals("1", response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals("2", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals("3", response3.get(1000, TimeUnit.MILLISECONDS)); assertEquals("4", response4.get(1000, TimeUnit.MILLISECONDS)); assertEquals(2, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals(HystrixCommandProperties.default_circuitBreakerForceClosed, properties.circuitBreakerForceClosed().get());
assertEquals(100L, (long) cmd1.getProperties().executionTimeoutInMilliseconds().get()); assertEquals(1L, (long) cmd1.getProperties().executionIsolationSemaphoreMaxConcurrentRequests().get()); assertEquals(700L, (long) cmd2.getProperties().executionTimeoutInMilliseconds().get()); assertEquals(2L, (long) cmd2.getProperties().executionIsolationSemaphoreMaxConcurrentRequests().get());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(rejected1.isResponseThreadPoolRejected()); assertTrue(rejected2.isResponseThreadPoolRejected()); assertEquals(2L, stream.getLatest().getErrorCount()); assertEquals(12L, stream.getLatest().getTotalRequests());
assertEquals(1, writes.get()); assertEquals(0, servlet.getNumberCurrentConnections());
assertTrue(command.isResponseFromFallback()); assertFalse(command.isCircuitBreakerOpen()); assertFalse(command.isResponseShortCircuited()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isResponseTimedOut()); assertFalse(command.isSuccessfulExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(true, properties.circuitBreakerForceClosed().get());
assertTrue(filter.matches("this.metric.is.allowed", metric));
assertTrue(exceptionEncountered.get()); assertFalse(onThreadStartInvoked.get()); assertFalse(onThreadCompleteInvoked.get()); assertFalse(executionAttempted.get()); assertEquals(0, semaphoreCmd.metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(10, stream.getLatestRollingMax());
assertNull(collapser1.execute()); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(1, cmdIterator.next().getNumberCollapsed());
assertTrue(exceptionEncountered.get()); assertTrue(onThreadStartInvoked.get()); assertTrue(onThreadCompleteInvoked.get()); assertFalse(executionAttempted.get()); assertEquals(0, threadCmd.metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(10, stream.getLatestRollingMax());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[53],\\"collapsed\\":{\\"name\\":\\"FooCollapser\\",\\"count\\":1}}]", actual);
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, command.execute()); assertTrue("Execution Time is: " + command.getExecutionTimeInMilliseconds(), command.getExecutionTimeInMilliseconds() >= 50); assertFalse(command.isCircuitBreakerOpen()); assertFalse(command.isResponseShortCircuited()); assertTrue(command.isResponseTimedOut()); assertTrue(command.isResponseFromFallback()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals("Unrecoverable Error for TestHystrixCommand", e.getCause().getCause().getMessage()); assertEquals("Unrecoverable Error for TestHystrixCommand", command.getFailedExecutionException().getCause().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.metrics.getCurrentConcurrentExecutionCount());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[23],\\"cached\\":2}]", actual);
assertEquals(0, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
assertEquals("1a", response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals("2b", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals("3b", response3.get(1000, TimeUnit.MILLISECONDS)); assertEquals("4a", response4.get(1000, TimeUnit.MILLISECONDS)); assertEquals(2, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(3, hystrixCommandCompletions.size()); assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(2, stream.getLatestRollingMax());
assertTrue(2 == new PrimaryCommand(new TestCircuitBreaker()).execute());
assertFalse(ex.executor.isShutdown()); assertTrue(ex.executor.isShutdown()); assertNull(timer.executor.get()); assertFalse(ex2.executor.isShutdown());
assertEquals("[]", actual);
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(commandShowsUp.get());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"FAILURE\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[102]}]", actual);
assertEquals(false, properties.circuitBreakerForceClosed().get());
assertFalse(latch.await(1000, TimeUnit.MILLISECONDS));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatestRollingMax());
assertTrue(cmd.hasBeenInterrupted());
assertTrue(e instanceof NotWrappedByHystrixTestRuntimeException); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertTrue(command.getExecutionException() instanceof NotWrappedByHystrixTestRuntimeException); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(false, properties.circuitBreakerForceClosed().get());
assertEquals(0, distribution.getTotalCount()); assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatest().getTotalCount());
assertEquals("1", response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals("2", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals("3", response3.get(1000, TimeUnit.MILLISECONDS)); assertEquals(2, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed()); assertEquals(1, cmdIterator.next().getNumberCollapsed());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertNotNull(e.getFallbackException()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(5000, properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
assertTrue(actual.equals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[23]},{\\"name\\":\\"Bar\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[34]}]") || actual.equals("[{\\"name\\":\\"Bar\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[34]},{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[23]}]"));
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"FAILURE\\",\\"FALLBACK_MISSING\\"],\\"latencies\\":[101]}]", actual);
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0L, stream.getLatest().getErrorCount()); assertEquals(0L, stream.getLatest().getTotalRequests());
assertFalse(command1.isCommandRunningInThread()); assertEquals("A", f1); assertEquals("B", f2); assertEquals("A", f3); assertTrue(command1.executed); assertTrue(command2.executed); assertTrue(command3.executed); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"BAD_REQUEST\\"],\\"latencies\\":[50]}]", actual);
assertEquals("1", response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals("2", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals("3", response3.get(1000, TimeUnit.MILLISECONDS)); assertEquals(2, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed()); assertEquals(1, cmdIterator.next().getNumberCollapsed());
assertNotNull(e.getFallbackException()); assertNotNull(e.getImplementingClass()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(cmd2.isResponseFromCache()); assertTrue(cmd3.isResponseFromCache()); assertTrue(cmd4.isResponseFromCache()); assertEquals(1, stream.getLatestRollingMax());
assertEquals(HystrixCommandProperties.default_metricsRollingStatisticalWindow, properties.metricsRollingStatisticalWindowInMilliseconds().get());
assertTrue(writes.get() >= 9); assertEquals(0, servlet.getNumberCurrentConnections());
assertEquals(200, counter.timeInMilliseconds); assertEquals(10, counter.numberOfBuckets); assertEquals(20, counter.bucketSizeInMillseconds); assertEquals(0, counter.buckets.size()); assertEquals(10, counter.buckets.size()); assertEquals(10, counter.buckets.size());
assertEquals("1", response1.get(1000, TimeUnit.MILLISECONDS)); assertEquals("2", response2.get(1000, TimeUnit.MILLISECONDS)); assertEquals("3", response3.get(1000, TimeUnit.MILLISECONDS)); assertEquals("4", response4.get(1000, TimeUnit.MILLISECONDS)); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(4, cmdIterator.next().getNumberCollapsed());
assertFalse(exceptionFound.get());
assertEquals(FlexibleTestHystrixCommand.EXECUTE_VALUE, future.get()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isSuccessfulExecution()); assertNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(filter.matches("this.metric.is.allowed", metric));
assertEquals(true, command.execute());
assertEquals(1, writes.get()); assertEquals(0, servlet.getNumberCurrentConnections());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(commandShowsUp.get()); assertTrue(threadPoolShowsUp.get());
assertTrue(filter.matches("this.metric.is.not.allowed", metric));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(3, stream.getLatestRollingMax());
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, future.get()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0L, stream.getLatest().getErrorCount()); assertEquals(1L, stream.getLatest().getTotalRequests());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[100]}]", actual);
assertNotNull(cmd.getExecutionException()); assertEquals(0, cmd.metrics.getCurrentConcurrentExecutionCount());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[{\\"name\\":\\"EMIT\\",\\"count\\":3},\\"FAILURE\\",{\\"name\\":\\"FALLBACK_EMIT\\",\\"count\\":2},\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[100]}]", actual);
assertFalse(command.isExecutionComplete()); assertEquals(FlexibleTestHystrixCommand.EXECUTE_VALUE, command.execute()); assertTrue(command.isExecutionComplete()); assertTrue(command.isExecutedInThread()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isSuccessfulExecution()); assertNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertFalse(cmd.execute()); assertTrue(cmd.isCircuitBreakerOpen());
assertEquals(true, properties.circuitBreakerForceClosed().get());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals(3, hystrixCommandCompletions.size()); assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertNotNull(e.getFallbackException()); assertNotNull(e.getImplementingClass()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(5000, properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
assertEquals("Execution ERROR for TestHystrixCommand", e.getCause().getCause().getMessage()); assertEquals("Execution ERROR for TestHystrixCommand", command.getFailedExecutionException().getCause().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.metrics.getCurrentConcurrentExecutionCount());
assertEquals(0, counter.getRollingMaxValue(type));
assertFalse(filter.matches("this.metric.is.not.allowed", metric));
assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[{\\"name\\":\\"EMIT\\",\\"count\\":3},\\"SUCCESS\\"],\\"latencies\\":[100]}]", actual);
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(rejected1.isResponseSemaphoreRejected()); assertTrue(rejected2.isResponseSemaphoreRejected()); assertEquals(2L, stream.getLatest().getErrorCount()); assertEquals(12L, stream.getLatest().getTotalRequests());
assertNotNull(de.getFallbackException()); assertFalse(de.getFallbackException() instanceof UnsupportedOperationException); assertNotNull(de.getImplementingClass()); assertNotNull(de.getCause()); assertTrue(de.getCause() instanceof TimeoutException); assertNotNull(command.getExecutionException()); assertTrue("Execution Time is: " + command.getExecutionTimeInMilliseconds(), command.getExecutionTimeInMilliseconds() >= 50); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, command.execute()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.metrics.getCurrentConcurrentExecutionCount());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SUCCESS\\"],\\"latencies\\":[23],\\"cached\\":1}]", actual);
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertTrue(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0L, stream.getLatest().getErrorCount()); assertEquals(0L, stream.getLatest().getTotalRequests());
assertEquals(3456, properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0L, stream.getLatest().getErrorCount()); assertEquals(0L, stream.getLatest().getTotalRequests());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(10, stream.getLatest().getTotalCount()); assertTrue(threadPoolRejected.isResponseThreadPoolRejected());
assertEquals(true, command.execute());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(3, stream.getLatestRollingMax());
assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE, command.execute()); assertEquals("Raw exception for TestHystrixCommand", command.getFailedExecutionException().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(1 == new PrimaryCommand(new TestCircuitBreaker()).execute());
assertEquals(1, numValues.get()); assertEquals(NUM - 1, numErrors.get());
assertTrue(cmd.hasBeenInterrupted());
assertTrue(commandLatch.await(1000, TimeUnit.MILLISECONDS)); assertFalse(threadPoolLatch.await(1000, TimeUnit.MILLISECONDS));
assertEquals("Unrecoverable Error for TestHystrixCommand", e.getCause().getCause().getMessage()); assertEquals("Unrecoverable Error for TestHystrixCommand", command.getFailedExecutionException().getCause().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, command.metrics.getCurrentConcurrentExecutionCount());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(3, stream.getLatestRollingMax());
assertEquals(true, properties.circuitBreakerForceClosed().get());
assertEquals(2, results.size()); assertTrue(results.contains(Boolean.TRUE)); assertTrue(results.contains(Boolean.FALSE)); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals(1, numValues.get()); assertEquals(NUM - 1, numErrors.get());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertTrue(rejectedCmd.isResponseThreadPoolRejected()); assertEquals(10, stream.getLatestRollingMax());
assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(0, metrics.getHealthCounts().getErrorPercentage()); assertEquals(50, metrics.getHealthCounts().getErrorPercentage()); assertEquals(50, metrics.getHealthCounts().getErrorPercentage()); assertEquals(75, metrics.getHealthCounts().getErrorPercentage());
assertEquals(NUM_CMDS, metrics.getCurrentConcurrentExecutionCount()); assertEquals(0, metrics.getCurrentConcurrentExecutionCount());
assertEquals(true, result); assertFalse(cmd.isResponseTimedOut()); assertNull(cmd.getExecutionException()); assertTrue(cmd.executionResult.getExecutionLatency() >= 900);
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"FAILURE\\",\\"FALLBACK_REJECTION\\"],\\"latencies\\":[103]}]", actual);
assertFalse(cmd.hasBeenInterrupted());
assertTrue(cmd.isExecutionComplete()); assertTrue(cmd.isResponseTimedOut()); assertEquals(0, cmd.metrics.getCurrentConcurrentExecutionCount());
assertTrue(e instanceof IOException);
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(0, stream.getLatestRollingMax());
assertEquals("simulated checked exception message", e.getCause().getMessage()); assertEquals("simulated checked exception message", command.getFailedExecutionException().getMessage()); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.isFailedExecution()); assertNotNull(command.getExecutionException()); assertEquals(0, circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
assertEquals(0, counter.getRollingSum(type));
assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(0, counter.getValueOfLatestBucket(type));
assertFalse(foundError.get());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(1, stream.getLatestRollingMax());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"SHORT_CIRCUITED\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[1]}]", actual);
assertEquals(1234, properties.metricsRollingStatisticalWindowInMilliseconds().get().intValue());
assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(3, stream.getLatest().getTotalCount()); assertTrue(shortCircuit.isResponseShortCircuited());
assertEquals("[{\\"name\\":\\"Foo\\",\\"events\\":[\\"TIMEOUT\\",\\"FALLBACK_SUCCESS\\"],\\"latencies\\":[105]}]", actual);
assertEquals(null, properties.executionIsolationThreadPoolKeyOverride().get()); assertEquals("testPool", properties.executionIsolationThreadPoolKeyOverride().get());
assertEquals(0, instances.size());
assertTrue(e instanceof NotWrappedByHystrixTestRuntimeException); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.getEventCounts().contains(HystrixEventType.BAD_REQUEST)); assertNotNull(command.getExecutionException()); assertTrue(command.getExecutionException() instanceof HystrixBadRequestException); assertTrue(command.getExecutionException().getCause() instanceof NotWrappedByHystrixTestRuntimeException); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertTrue(e instanceof NotWrappedByHystrixTestRuntimeException); assertTrue(command.getExecutionTimeInMilliseconds() > -1); assertTrue(command.getEventCounts().contains(HystrixEventType.BAD_REQUEST)); assertNotNull(command.getExecutionException()); assertTrue(command.getExecutionException() instanceof HystrixBadRequestException); assertTrue(command.getExecutionException().getCause() instanceof NotWrappedByHystrixTestRuntimeException); assertEquals(0, command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
assertEquals("1", response1.get()); assertEquals("2", response2.get()); assertEquals(1, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size()); assertEquals(2, cmdIterator.next().getNumberCollapsed());
assertEquals(1, counter.buckets.size()); assertEquals(4, counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.SUCCESS).sum()); assertEquals(2, counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.FAILURE).sum()); assertEquals(1, counter.buckets.getLast().getAdder(HystrixRollingNumberEvent.TIMEOUT).sum());
assertThat(planet, matchesSnapshot());
assertThat(planet, matchesSnapshot());
assertThat(result).containsExactly(" foo", " bar ", "baz ");
assertThat(result).isEqualTo("A very\\\\r\\\\nlong text\\\\nwith multiple\\\\rdifferent newline\\\\n\\\\rvariations.");
assertThat(result).isEqualTo("<null>, <null>");
assertThat(result).isEqualTo("[1024]");
assertThat(result).isSameAs(obj);
assertThat(result).hasMessageMatching("Exception while invoking dataprovider method \'.*\': .*");
assertThat(result).isEqualTo("ss##bla##s##bla##s##bla##s%");
assertThat(result).isEqualTo(data);
assertThat(result).isFalse();
assertThat(result).isEqualTo("12.45");
assertThat(result).isEqualTo("[11, 2]");
assertThat(result).isEqualTo("<null>");
assertThat(result).isEqualTo(now.toString() + ", 3.5, 1|2|3, src/main/java/com/tngtech");
assertThat(result).isEqualTo("1234%s1234%s");
assertThat(result).containsExactly('a', (byte) 2, new double[] { 1.0 });
assertThat(result).isEqualTo(STRING_EMPTY);
assertThat(result).isEqualTo(data);
assertThat(result).isEmpty();
assertThat(result).isEqualTo("c0=test, i1=1, l2=2");
assertThat(result).isEqualTo("\\\\0");
assertThat(result).containsExactly(new long[] { 1, 2, 3 });
assertThat(result).isEqualTo("c0=[0.78, 315.0]");
assertThat(result).isEqualTo("\\\\r");
assertThat(result).isEqualTo("[12, 24]");
assertThat(result).containsExactly(data);
assertThat(result).containsExactly(null, new int[0]);
assertThat(result).isEqualTo("c0=[1024]");
assertThat(result).isTrue();
assertThat(result).isFalse();
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).isEmpty(); assertThat(TestResolver.usedContexts).containsOnly(context, context);
assertThat(result.getLocations()).containsOnly(testMethod.getDeclaringClass());
assertThat(result).containsOnly(method); assertThat(TestResolver.usedContexts).containsOnly(context);
assertThat(result).isEqualTo("c0=A very\\\\r\\\\nlong text\\\\nwith multiple\\\\rdifferent newline\\\\n\\\\rvariations.");
assertThat(result).hasSize(3);
assertThat(result).isEqualTo("c0=[test, 1, 1723940567289346512], i1=3");
assertThat(result).isEqualTo("ss##bla##s##bla##s##bla##s%");
assertThat(result).isEqualTo("$");
assertThat(result).isEqualTo("c0=RUNNABLE");
assertThat(result).isEqualTo("\\\\n");
assertThat(result).matches("java.lang.Object@[0-9a-f]+");
assertThat(result).containsOnly(method, method); assertThat(TestResolver.usedContexts).containsOnly(context, context);
assertThat(result).isEqualTo(STRING_NON_PRINTABLE);
assertThat(result).containsOnly(this.getClass());
assertThat(result).containsExactly(TestEnum.VAL1, TestEnum.VAL2);
assertThat(result).isEqualTo("c0=" + STRING_EMPTY);
assertThat(result).hasMessageMatching("Could not find annotation \'.*\' on test method \'.*\'\\\\.");
assertThat(result).hasSize(1);
assertThat(result).hasSize(1);
assertThat(result).isEqualTo("1234%s");
assertThat(result).hasSize(2);
assertThat(result).isEqualTo("c0=test\\\\rtest\\\\r");
assertThat(result).isEqualTo("c0=[111, 222, 333]");
assertThat(result).containsExactly(expectedDate.getTime());
assertThat(result).isEqualTo("\\\\");
assertThat(result).hasSize(3);
assertThat(result).isEqualTo("c0=\\\\n");
assertThat(result).containsExactly(new long[] { 1, 2, 3 });
assertThat(result).containsExactly(new int[0]);
assertThat(result).containsExactly(BigInteger.ONE);
assertThat(result).isTrue();
assertThat(underTest).isNotNull(); assertThat(underTest.getMethod()).isEqualTo(method); assertThat(underTest.idx).isEqualTo(idx); assertThat(underTest.parameters).isEqualTo(parameters); assertThat(underTest.nameFormat).isEqualTo(nameFormat);
assertThat(result).isEqualTo(now.toString() + ", 3.5, 1|2|3, src/main/java/com/tngtech");
assertThat(result).isEqualTo("[111, 222, 333]");
assertThat(result).containsExactly(null, null, "foo");
assertThat(result).isEqualTo("test\\\\rtest\\\\r");
assertThat(result).containsExactly(-5, 2014l, -1.234567f, -0.901d);
assertThat(result).isEqualTo("##foo##");
assertThat(result).containsExactly(Thread.class, DataProviders.class);
assertThat(result).isEqualTo("\\\\r");
assertThat(result).hasSize(1);
assertThat(result).containsExactly(explicitLocations);
assertThat(underTest.method).isEqualTo(method); assertThat(underTest.idx).isEqualTo(index); assertThat(underTest.parameters).isNotSameAs(parameters).isEqualTo(parameters);
assertThat(result).isEqualTo("abc%s%sabc%s%");
assertThat(result).isEqualTo("Test ##bar##()");
assertThat(result).isEqualTo("replacement");
assertThat(result).hasSize(1);
assertThat(result).isEqualTo("c0=" + now.toString() + ", i1=3.5, l2=1|2|3, d3=src/main/java/com/tngtech");
assertThat(result).isTrue();
assertThat(result).isTrue();
assertThat(result).isEqualTo("[111, 222, 333]");
assertThat(result).hasSize(3);
assertThat(result).isTrue();
assertThat(result).isEqualTo("test\\\\rtest\\\\r");
assertThat(result).isEqualTo("1\\\\n2\\\\n3");
assertThat(result).containsExactly(expectedDate.getTime());
assertThat(result).containsExactly(new double[] { 1.0 });
assertThat(result).isTrue();
assertThat(result).isEqualTo("1\\\\n2\\\\n3");
assertThat(result).isEqualTo("Method testMain[1: ](com.tngtech.Clazz)");
assertThat(result).isSameAs(object);
assertThat(result).isTrue();
assertThat(result).hasSize(11);
assertThat(result).containsExactly(new double[] { 1.0 });
assertThat(result).isFalse();
assertThat(result).isEqualTo("test\\\\rtest\\\\r");
assertThat(result).isEqualTo("test" + STRING_NON_PRINTABLE + "test" + STRING_NON_PRINTABLE);
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).isEqualTo("1\\\\n2\\\\n3");
assertThat(result).containsExactly("foobar", new long[] { 1, 2, 3 });
assertThat(result).isEqualTo("\\\\0");
assertThat(result).isEqualTo("c0=[true, false]");
assertThat(result).containsExactly(new File("home/schmida"));
assertThat(result).isEqualTo("test\\\\0test\\\\0");
assertThat(result).isEqualTo(STRING_NULL);
assertThat(result).isEqualTo("c0=[12, 24]");
assertThat(result).isFalse();
assertThat(result).containsExactly(new int[0]);
assertThat(result).containsExactly("4");
assertThat(result).isEqualTo("A very\\\\r\\\\nlong text\\\\nwith multiple\\\\rdifferent newline\\\\n\\\\rvariations.");
assertThat(result).isEqualTo("[0.3, 0.9, 0.81, 0.6561]");
assertThat(result).containsExactly("null", "null");
assertThat(result).isTrue();
assertThat(result).isTrue();
assertThat(result).containsExactly(-1f, -2, 3d);
assertThat(result).isEqualTo("test\\\\0test\\\\0");
assertThat(result).isEqualTo("Test ##bar##()");
assertThat(result).isEqualTo("c0=[7.5, test]");
assertThat(result).isEqualTo("RUNNABLE");
assertThat(result).isEqualTo("c0=" + STRING_NON_PRINTABLE);
assertThat(result).hasSize(1);
assertThat(result).isEqualTo(STRING_NON_PRINTABLE);
assertThat(result).containsExactly(new int[0]);
assertThat(result).isEqualTo("[12, 24]");
assertThat(result).hasSize(3);
assertThat(result).isEqualTo("test, 1, 2");
assertThat(result).hasSize(1);
assertThat(result).isTrue();
assertThat(result).isEqualTo("[0.78, 315.0]");
assertThat(result).isEqualTo("$");
assertThat(result).isFalse();
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).isEqualTo("c0=1\\\\n2\\\\n3");
assertThat(result).isEqualTo("<null>");
assertThat(result).isEqualTo("1234%s");
assertThat(result).isEqualTo("##foo##");
assertThat(result).isEqualTo("c0=test\\\\0test\\\\0");
assertThat(result).containsExactly(data);
assertThat(result).isEqualTo("<null>, <null>");
assertThat(result).isEqualTo("\\\\r");
assertThat(result).isEqualTo("[test, 1, 1723940567289346512], 3");
assertThat(result).matches("java.lang.Object@[0-9a-f]+");
assertThat(result).isEqualTo(new Object[] { null });
assertThat(result).isNull();
assertThat(result).isTrue();
assertThat(result).containsExactly('a', (byte) 2, new double[] { 1.0 });
assertThat(result).isEqualTo("[0.3, 0.9, 0.81, 0.6561]");
assertThat(result).hasSize(2);
assertThat(result).isTrue();
assertThat(result).isEqualTo(STRING_EMPTY);
assertThat(result).isEqualTo("[0.78, 315.0]");
assertThat(result).containsExactly("foobar", new long[] { 1, 2, 3 });
assertThat(result).isSameAs(object);
assertThat(result).isEqualTo(new int[][] { { 1, 2 } });
assertThat(result).containsExactly(TestEnum.VAL1);
assertThat(result).isEqualTo("[true, false]");
assertThat(result).containsExactly(new double[] { 1.0 });
assertThat(result).isEqualTo("\\\\n");
assertThat(result).containsExactly(new int[0]);
assertThat(result).isEqualTo("c0=\\\\0");
assertThat(result).containsExactly("test", new int[0]);
assertThat(result).isEqualTo("A very\\\\r\\\\nlong text\\\\nwith multiple\\\\rdifferent newline\\\\n\\\\rvariations.");
assertThat(result).containsExactly("test", new int[0]);
assertThat(result).isEqualTo("%s");
assertThat(result).isEqualTo(data);
assertThat(result).containsOnly(this.getClass());
assertThat(result).containsExactly("", true);
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).isEqualTo("[7.5, test]");
assertThat(result).isEqualTo("test, 1, 2");
assertThat(result).containsExactly(TestEnum.VAL1, TestEnum.VAL2);
assertThat(result).isEqualTo("test" + STRING_NON_PRINTABLE + "test" + STRING_NON_PRINTABLE);
assertThat(result).matches("c0=java.lang.Object@[0-9a-f]+");
assertThat(result).isEqualTo("[true, false]");
assertThat(result).isEqualTo("c0=[11, 2]");
assertThat(result).hasSize(1);
assertThat(result).isEqualTo("[1024]");
assertThat(result).isTrue();
assertThat(result).isEqualTo("c0=" + STRING_NULL);
assertThat(result).isEqualTo(data);
assertThat(result).containsExactly(new File("home/schmida"));
assertThat(result).isFalse();
assertThat(result).containsExactly("\\u00A0test\\u00A0");
assertThat(result).containsExactly("\\u00A0test\\u00A0");
assertThat(result).isEqualTo("c0=test" + STRING_NON_PRINTABLE + "test" + STRING_NON_PRINTABLE);
assertThat(result).isFalse();
assertThat(result).isEqualTo("1234%s1234%s");
assertThat(result).containsExactly("4");
assertThat(result).isEqualTo("abc%s%sabc%s%");
assertThat(result).isTrue();
assertThat(result).isEmpty(); assertThat(TestResolver.usedContexts).containsOnly(context);
assertThat(result).isEqualTo(StringConverter.OBJECT_NO_CONVERSION);
assertThat(result).isEqualTo("c0=[0.3, 0.9, 0.81, 0.6561]");
assertThat(result).isEqualTo("%d");
assertThat(result).containsExactly(BigInteger.ONE);
assertThat(result).isFalse();
assertThat(result).isEqualTo(new Object[] { null });
assertThat(result).isEqualTo("[11, 2]");
assertThat(result).isEqualTo("c0=12.45");
assertThat(result).hasSize(3);
assertThat(result).containsExactly("foobar", new long[] { 1, 2, 3 });
assertThat(result).isEqualTo(data);
assertThat(result).isTrue();
assertThat(underTest.data).isSameAs(data);
assertThat(result).containsExactly(null, new int[0]);
assertThat(result).isEqualTo("[test, 1, 1723940567289346512], 3");
assertThat(result).isEqualTo("12.45");
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).containsExactly(new long[] { 1, 2, 3 });
assertThat(result).isEqualTo("\\\\");
assertThat(result).isEqualTo("%s");
assertThat(result).isEqualTo(data);
assertThat(result).isEqualTo(dataProviderMethod);
assertThat(result).isEqualTo("c0=\\\\r");
assertThat(result).hasSize(3);
assertThat(result).containsExactly(1, "");
assertThat(result).isTrue();
assertThat(result).isEqualTo("c0=" + STRING_NULL);
assertThat(result).isTrue();
assertThat(result).isEqualTo(StringConverter.OBJECT_NO_CONVERSION);
assertThat(result).hasSize(1); assertThat(result[0]).isInstanceOf(Date.class).isEqualTo(date(2016, Calendar.MARCH, 11));
assertThat(result).isEqualTo("[7.5, test]");
assertThat(result).isEqualTo(new int[][] { { 1, 2 } });
assertThat(result).isEqualTo("%a##baz##%b");
assertThat(result).isEqualTo("%d");
assertThat(result).isEmpty();
assertThat(result).isTrue();
assertThat(result).isTrue();
assertThat(result).hasSize(1);
assertThat(result).containsExactly(TestEnum.VAL1);
assertThat(result).isEqualTo(STRING_NULL);
assertThat(result).isEqualTo("\\\\n");
assertThat(result).isFalse();
assertThat(result).isEqualTo("%a##baz##%b");
assertThat(result).isEqualTo("testGetNameShouldRetrunResultOfProcess[22: 720, 720]");
assertThat(result).isEqualTo(data);
assertThat(result).containsExactly("test", new int[0]);
assertThat(result).isTrue();
assertThat(result).isEqualTo(data);
assertThat(result).isNotNull(); assertThat(result.getTestMethod()).isEqualTo(testMethod); assertThat(result.getResolverClasses()).isNotSameAs(resolverClasses).isEqualTo(resolverClasses); assertThat(result.getResolveStrategy()).isEqualTo(resolveStrategy); assertThat(result.getLocations()).isNotSameAs(locations).isEqualTo(locations); assertThat(result.getDataProviderAnnotationClass()).isEqualTo(dataProviderAnnotationClass); assertThat(result.getDataProviderName()).isEqualTo(dataProviderName);
assertThat(result).isEqualTo("RUNNABLE");
assertThat(result).isEqualTo("c0=<null>, i1=<null>");
assertEquals(2,ebtsDescriptiveOnly.getAllRecords().size()); assertEquals(ebts.getRecordsByType(1).get(0).getLength(),ebtsDescriptiveOnly.getRecordsByType(1).get(0).getLength()); assertEquals(ebts.getRecordsByType(2).get(0).getLength(),ebtsDescriptiveOnly.getRecordsByType(2).get(0).getLength());
assertNotNull(ebts); assertFalse(type10.getFields().isEmpty()); assertEquals("JPEGB",type10.getField(11).toString()); assertFalse(type10.hasImageData());
assertEquals(39154,val);
assertThat(client.connectTimeoutMillis()).isEqualTo(10_000); assertThat(client.readTimeoutMillis()).isEqualTo(10_000); assertThat(client.writeTimeoutMillis()).isEqualTo(10_000);
assertThat(registry.getMeters()).isEmpty(); assertThat(registry.getMeters().get(generatedId)).isNotNull();
assertThat(client.connectTimeoutMillis()).isEqualTo(10_000); assertThat(client.readTimeoutMillis()).isEqualTo(10_000); assertThat(client.writeTimeoutMillis()).isEqualTo(10_000);
assertEquals(msg, "put() null item");
assertEquals(msg, "put() into full CircularQueue");
assertEquals(msg, "get() from empty CircularQueue");
assertEquals("Vmaster", result); assertEquals("master", wfRepo.getBranch());
assertEquals("wfRepos should be up.", true, wfRepo.isUp()); assertEquals("wfRepos should be down.", false, wfRepo.isUp());
assertTrue(a.equals(a)); assertFalse(a.isLargerThan(a)); assertFalse(a.equals(b)); assertTrue(b.isLargerThan(a));
assertEquals("V1.0", result1); assertEquals("V2.0", result2);
assertThat(parents, hasItems("field", "TwiceNested", "Nested", "Outer"));
assertThat(Naming.normalize("_public"), equalTo("Public"));
assertThat(Naming.normalize("_class"), equalTo("Class_"));
assertThat(stream(pkg).count(), is(0L));
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNotNull(matches); assertEquals(matches.size(), 3); assertEquals(matches.get(0), "b/a/c/d/e/f"); assertEquals(matches.get(1), "b/a/c/d"); assertEquals(matches.get(2), "b/a"); assertEquals(matches.size(), 1); assertEquals(matches.get(0), "b/a"); assertNotNull(matches); assertTrue(matches.isEmpty());
assertNotNull("Check that DataManager is not null", dataManager);
assertFalse(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello"));
assertTrue("Key file was created.", !verifyKeyExists()); assertTrue("Config file was created.", !verifyConfigExists());
assertNotNull(cmd); assertEquals(0, res.getExitStatus()); assertEquals("Test\\n", res.getResult());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertEquals(dispatcher.findExactMatch("\\\\one\\\\two"), "/one/two"); assertNull(dispatcher.findExactMatch("/one/two"));
assertFalse(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello"));
assertNotNull("This authentication should have succeeded", authReport.getAuthIdentity());
assertFalse(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello"));
assertNotNull("This authentication should have succeeded", authReport.getAuthIdentity()); assertNull("The query parameter should have been removed", exchange.getIn().getHeader(Exchange.HTTP_QUERY));
assertNotNull("No policy found", policies); assertEquals("Auth count is correct", 2, policyList.size()); assertTrue("Both Auths are found", (policyList.get(0).equals(policy.getId()) || policyList.get(0).equals(policy2.getId())) && (policyList.get(1).equals(policy.getId()) || policyList.get(1).equals(policy2.getId())));
assertNotNull(cmd); assertTrue(fTempDest.exists());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertFalse(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello")); assertFalse(expiringSet.contains("hello")); assertTrue(expiringSet.contains("hello"));
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertTrue("Key file was not created.", verifyKeyExists()); assertTrue("Config file was not created.", verifyConfigExists()); assertTrue("Config file was not correctly built.", verifyValidConfig(1));
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNull("This authentication should have failed", authReport.getAuthIdentity());
assertNotNull(fileData); assertNull(fileData.checkAllowed(api, "test").getAuthIdentity());
assertNotNull("This authentication should have succeeded", authReport.getAuthIdentity());
assertNotNull("This authentication should have succeeded", authReport.getAuthIdentity()); assertNull("The header should have been removed", exchange.getIn().getHeader(appHeaderName));
assertThat(actualSum.get(), is(equalTo(7)));
assertThat(actualSum.get(), is(equalTo(7)));
assertNotNull(mBuilder);
assertNotNull(mBuilder);
assertNotNull(mBuilder);
assertNotNull(mBuilder);
assertNotNull(mBuilder);
assertNotNull(mBuilder);
assertThat(e.getMessage()).isEqualTo("No user matches such a token " + token);
assertThat(path).isEqualTo("/root/path/to/resource/id?n=3&n=5");
assertThat(ancestors).isEqualTo(fibonacciValue);
assertThat(user).isEqualTo(username);
assertThat(fibo).isEqualTo(expected);
assertThat(responseEntity.getStatusCode()).isEqualTo(REQUEST_TIMEOUT);
assertThat(ancestors).isEqualTo(fibonacciValue);
assertThat(e.getMessage()).isEqualTo("No user matches username " + username + " and password");
assertThat(token).isEqualTo(this.token);
assertEquals(result.size(),4); assertTrue(result.contains(n1_first_john)); assertTrue(result.contains(n1_last_smith)); assertTrue(result.contains(n2_first_paul)); assertTrue(result.contains(n2_last_east));
assertEquals(result.size(),6); assertTrue(result.contains(n1_a_human)); assertTrue(result.contains(n1_first_john)); assertTrue(result.contains(n2_a_human)); assertTrue(result.contains(n2_first_paul)); assertTrue(result.contains(n3_a_human)); assertTrue(result.contains(n3_first_alien));
assertEquals(result.size(),4); assertTrue(result.contains(n1_a_human)); assertTrue(result.contains(n1_last_smith)); assertTrue(result.contains(n2_a_human)); assertTrue(result.contains(n2_last_east));
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(null)); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification("notAValidPath"));
assertEquals(expectCal, actualCalendar); assertEquals(expectCal, actualCalendar); assertEquals(expectCal, actualCalendar); assertEquals(expectCal, actualCalendar);
assertNotNull(plugIn.createReaderInstance());
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(input)); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(input));
assertNotNull(reader.getInput()); assertNull(reader.getSubsetDef()); assertSame(file, reader.getInput()); assertNotNull(productComponents); assertEquals(1, productComponents.getChildren().length);
assertNotNull(plugIn.getFormatNames()); assertTrue(plugIn.getFormatNames().length >= 1);
assertEquals(DecodeQualification.UNABLE, plugin.getDecodeQualification( "horst" ) ); assertEquals(DecodeQualification.UNABLE, plugin.getDecodeQualification( "gbats1_2.img" ) ); assertEquals(DecodeQualification.INTENDED, plugin.getDecodeQualification( "gbats2_0ll.img" ) ); assertEquals(DecodeQualification.INTENDED, plugin.getDecodeQualification( "gigbp2_0ll.img" ) );
assertEquals(WorldFireReader.PRODUCT_TYPE_AATSR_ALGO1, reader.getProductType(aatsrAlgo1)); assertEquals(WorldFireReader.PRODUCT_TYPE_AATSR_ALGO2, reader.getProductType(aatsrAlgo2)); assertEquals(WorldFireReader.PRODUCT_TYPE_ATSR2_ALGO1, reader.getProductType(atsr2Algo1)); assertEquals(WorldFireReader.PRODUCT_TYPE_ATSR2_ALGO2, reader.getProductType(atsr2Algo2));
assertNotNull("null for description not expected", plugIn.getDescription(null)); assertFalse("empty description not expected", plugIn.getDescription(Locale.ENGLISH).isEmpty());
assertEquals("Hello World", testObject.getLabel());
assertTrue(e.getMessage().contains("address"));
assertNotNull(newTx); assertNotNull(newTx.getExtraBytes()); assertEquals(0, newTx.getExtraBytes().length); assertNotNull(newTx); assertNotNull(newTx.getExtraBytes()); assertEquals(0, newTx.getExtraBytes().length); assertNotNull(newTx); assertArrayEquals(bytes, newTx.getExtraBytes());
assertTrue(btcSatoshi.equals(btcSatoshi2)); assertFalse(btcSatoshi.equals(ltcSatoshi)); assertFalse(btcSatoshi.equals(btcValue)); assertFalse(btcSatoshi.equals(ppcValue)); assertFalse(btcValue.equals(ppcValue));
assertTrue(e.getMessage().contains("Too many question marks"));
assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax"));
assertTrue(e.getMessage().contains("amount")); assertTrue(e.getMessage().contains("amount"));
assertEquals("Hello World", testObject.getMessage());
assertArrayEquals(nxtPublicKey, pub); assertEquals(nxtRsAddress, Convert.rsAccount(NxtMain.get(), id)); assertEquals(nxtAccountId, id);
assertEquals(Convert.toHexString(nxtAccount.getPublicKey()), Convert.toHexString(newWallet.getPublicKey())); assertEquals(nxtAccount.getPublicKeyMnemonic(), newWallet.getPublicKeyMnemonic()); assertEquals(nxtAccount.getId(), newWallet.getId());
assertEquals("aardvark=zebra", new CoinURI(BitcoinMain.get(), BitcoinMain.get().getUriScheme() + ":" + MAINNET_GOOD_ADDRESS + "?label=aardvark=zebra").getLabel());
assertEquals("1.00", NO_CODE.format(Coin.COIN).toString());
assertEquals(654321012345678L, testObject.getAmount().value); assertEquals(12345678L, testObject.getAmount().value); assertEquals(654321000000000L, testObject.getAmount().value);
assertNull(new CoinURI(BitcoinMain.get(), BitcoinMain.get().getUriScheme() + ":" + MAINNET_GOOD_ADDRESS + "?message=").getMessage());
assertEquals(EXPECTED_BITCOIN_SIG, signedMessage.getSignature()); assertEquals(EXPECTED_BITCOIN_SIG_UNICODE, signedMessage.getSignature()); assertEquals(EXPECTED_NUBITS_SIG, signedMessage.getSignature()); assertEquals(EXPECTED_NUBITS_SIG_UNICODE, signedMessage.getSignature());
assertTrue(BTC.oneCoin().isOfType(BTC)); assertTrue(BTC.oneCoin().isOfType(BTC.oneCoin())); assertFalse(BTC.oneCoin().isOfType(LTC)); assertFalse(BTC.oneCoin().isOfType(LTC.oneCoin()));
assertNull(new CoinURI(BitcoinMain.get(), BitcoinMain.get().getUriScheme() + ":" + MAINNET_GOOD_ADDRESS + "?label=").getLabel());
assertEquals(0, pocket.getUsedAddresses().size()); assertEquals(13, pocket.getUsedAddresses().size());
assertNull(chain.getLastIssuedKey(KeyChain.KeyPurpose.RECEIVE_FUNDS)); assertNull(chain.getLastIssuedKey(KeyChain.KeyPurpose.CHANGE)); assertEquals(extKey, chain.getLastIssuedKey(KeyChain.KeyPurpose.RECEIVE_FUNDS)); assertEquals(intKey, chain.getLastIssuedKey(KeyChain.KeyPurpose.CHANGE));
assertTrue(e.getMessage().contains("Bad address"));
assertEquals(ONE_EURO, NO_CODE.parseFiat("EUR", "1"));
assertEquals(40, watchingAddresses.size()); assertEquals(addresses.get(i), watchingAddresses.get(i).toString());
assertEquals( "CoinURI[\'address\'=\'1KzTSfqjF2iKCduwz59nv2uqh1W2JsTxZH\',\'amount\'=\'6543210BTC\',\'label\'=\'Hello World\',\'message\'=\'Be well\']", testObject.toString());
assertEquals("Hello Jane Doe!", helloWorldClientBean.sayHello(person));
assertEquals( "Authentication failed (details can be found in server log)", soapFaultException.getFault().getFaultString());
assertEquals("Hello Sherlock Holmes!", helloWorldClientImplBean.sayHello(person));
assertEquals( "Authentication required but no user or password was supplied", soapFaultException.getFault().getFaultString());
assertEquals( "Authentication failed (details can be found in server log)", soapFaultException.getFault().getFaultString());
assertEquals("Hello John Watson!", new HelloWorldClientImplMock( ENDPOINT_ADDRESS).sayHello(person, "john.watson", "w4750n"));
assertEquals("Hello Sherlock Holmes!", helloWorldClientImpl.sayHello(person));
assertEquals("Hello Sherlock Holmes!", new HelloWorldClientImpl().sayHello(person));
assertEquals("Hello Sherlock Holmes!", helloWorldClientImpl.sayHello( person, "sherlock.holmes", "h0lm35"));
assertEquals("Hello Sherlock Holmes!", helloWorldClientImplBean.sayHello(person));
assertEquals("Hello John Watson!", new HelloWorldClientImplMock( ENDPOINT_ADDRESS).sayHello(person));
assertEquals(0, getRowCount(connection, "messages_log")); assertEquals(1, getRowCount(connection, "messages_log")); assertEquals(2, getRowCount(connection, log.getOutgoingMessagesTableName())); assertEquals(0, getRowCount(connection, "messages_log")); assertEquals(0, getRowCount(connection, "messages_log")); assertEquals(0, getRowCount(connection, log.getOutgoingMessagesTableName()));
assertTrue(dd.isHeaderGroup(NoHops.FIELD));
assertEquals("Other", BusinessRejectReasonText.toText("OTHER")); assertEquals("Other", BusinessRejectReasonText.toText("other")); assertEquals("Other Reason", BusinessRejectReasonText.toText("OTHER_REASON")); assertEquals("Another Other Reason", BusinessRejectReasonText.toText("ANOTHER_OTHER_REASON"));
assertEquals("embedded order", text, msg.getString(EncodedText.FIELD));
assertEquals("<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\" standalone=\\"no\\"?> <message> <header/> <body> <field name=\\"Account\\" tag=\\"1\\"><![CDATA[test-account]]></field> </body> <trailer/> </message> ", xml);
assertEquals("wrong result", MessageDecoderResult.NEED_DATA, decoder .decodable(null, buffer));
assertTrue(messageCracked > 0);
assertNull(strategy.getSessionConnector());
assertNotNull("File not found", in);
assertNotNull("Resource not found", in);
assertTrue(messageCracked > 0);
assertEquals("no trailing newline", settings.getString(sessionID2, "label"));
assertEquals("wrong value", "SENDER", settings.getString("SenderCompID")); assertEquals("wrong value", "SENDER", settings.getString(sessionID, "SenderCompID")); assertEquals("wrong value", "TARGET", settings.getString(sessionID, "TargetCompID"));
assertNotNull(msg.toString()); assertTrue("empty message contains no checksum", msg.toString().length() > 0);
assertThat(e.getMessage(), containsString(" 999"));
assertTrue("Message should be invalid", badMessage); assertEquals("8=FIX.4.2\\0019=12\\00135=A\\001108=30\\00110=026\\001", message.toString());
assertNotNull(session);
assertTrue(state.isResendRequested()); assertEquals(684, state.getNextTargetMsgSeqNum()); assertFalse(state.isResendRequested());
assertEquals("wrong field name", "Currency", dd.getFieldName(15));
assertEquals(1, myLog4j.messages.size()); assertEquals("my-caller-fqcn", myLog4j.fqcns.get(0)); assertEquals("TEST123", myLog4j.messages.get(0));
assertEquals(1, connector.sessions.size()); assertEquals(1, connector.sessions.size()); assertEquals(2, connector.sessions.size());
assertEquals("780508", underlyingSymbol);
assertEquals("Company", id.getSenderCompID()); assertEquals("FixedIncome", id.getSenderSubID()); assertEquals("HongKong", id.getSenderLocationID()); assertEquals("CLIENT1", id.getTargetCompID()); assertEquals("HedgeFund", id.getTargetSubID()); assertEquals("NYC", id.getTargetLocationID());
assertNotNull(sessDictionary); assertNotNull(appDictionary);
assertEquals("FOO", hops.getString(HopCompID.FIELD)); assertEquals("BAR", hops.getString(HopCompID.FIELD));
assertTrue(session.isLoggedOn()); assertEquals(2, state.getNextTargetMsgSeqNum()); assertEquals(42, state.getNextTargetMsgSeqNum()); assertEquals(51, state.getNextTargetMsgSeqNum()); assertEquals(52, state.getNextTargetMsgSeqNum()); assertTrue(session.isLoggedOn()); assertFalse(state.isResendRequested()); assertTrue(state.getQueuedSeqNums().isEmpty());
assertEquals(quickfix.fix42.Message.Header.class, fix42Message.getHeader().getClass()); assertEquals(quickfix.fix44.Message.Header.class, fix44Message.getHeader().getClass()); assertEquals(quickfix.fix50.Message.Header.class, fix50Message.getHeader().getClass()); assertEquals(quickfix.fixt11.Message.Header.class, fixt11Message.getHeader().getClass());
assertEquals(11, field.getTag()); assertEquals(BigDecimal.valueOf(12.3), field.getValue()); assertEquals(11, field.getTag()); assertEquals(BigDecimal.valueOf(23.4), field.getValue()); assertEquals(22, field.getTag()); assertEquals(BigDecimal.valueOf(34.5), field.getValue()); assertEquals(33, field.getTag()); assertEquals(BigDecimal.valueOf(45.6), field.getValue());
assertTrue(messageCracked > 0);
assertTrue(e.getCause() instanceof NullPointerException);
assertEquals("wrong decoder result", MessageDecoderResult.NEED_DATA, decoderResult);
assertEquals(11, field.getTag()); assertEquals(date, field.getValue()); assertEquals(11, field.getTag()); assertEquals(date, field.getValue());
assertEquals(11, field.getTag()); assertTrue(field.getValue()); assertEquals(11, field.getTag()); assertFalse(field.getValue()); assertEquals(22, field.getTag()); assertTrue(field.getValue()); assertEquals(33, field.getTag()); assertTrue(field.getValue());
assertEquals(11, field.getTag()); assertEquals(date, field.getValue()); assertEquals(11, field.getTag()); assertEquals(date, field.getValue());
assertNotNull(context); assertNotNull(context.getProvider());
assertThat(dd, is(notNullValue())); assertThat(dd.getVersion(), is(FixVersions.BEGINSTRING_FIX40));
assertEquals("ABCD", m.getHeader().getString(SecureData.FIELD));
assertEquals("Other", BusinessRejectReasonText.getMessage(0));
assertNotNull(emptyConstructor.getHeader()); assertNotNull(secondConstructor.getHeader()); assertNotNull(thirdConstructor.getHeader()); assertNotNull(fourthConstructor.getHeader()); assertNotNull(fifthConstructor.getHeader()); assertNotNull(sixthConstructor.getHeader()); assertNotNull(seventhConstructor.getHeader());
assertTrue(messageCracked > 0);
assertTrue(message.isSetField(12)); assertTrue(!message.isSetField(12));
assertEquals("wrong field value", 40, message.getHeader().getInt(BodyLength.FIELD)); assertEquals("wrong value", "D", valueMessageType.getString(RefMsgType.FIELD)); assertEquals("wrong value", "R", valueMessageType.getString(MsgDirection.FIELD)); assertEquals("wrong value", "8", valueMessageType.getString(RefMsgType.FIELD)); assertEquals("wrong value", "S", valueMessageType.getString(MsgDirection.FIELD));
assertEquals(11, field.getTag()); assertEquals(12, field.getValue()); assertEquals(11, field.getTag()); assertEquals(23, field.getValue()); assertEquals(22, field.getTag()); assertEquals(23, field.getValue()); assertEquals(33, field.getTag()); assertEquals(44, field.getValue());
assertEquals("wrong decoder result", MessageDecoderResult.NEED_DATA, decoder.decode(null, buffer, decoderOutput));
assertEquals("wrong result", MessageDecoderResult.NEED_DATA, decoder .decodable(null, buffer));
assertNotNull("No exception message", emsg); assertTrue(emsg.startsWith("Incorrect NumInGroup"));
assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertTrue(message.isAdmin()); assertFalse(message.isAdmin()); assertFalse(message.isAdmin());
assertNotNull("InvalidMessage correctly thrown", im);
assertThat(e.getCause(), is(ConfigError.class));
assertEquals("This is a test? Yes, it is.", settings.getString(sessionID2, "label"));
assertTrue(message.contains("IOException"));
assertNotNull(dictionary);
assertTrue(Message.isHeaderField(ApplVerID.FIELD)); assertTrue(Message.isHeaderField(CstmApplVerID.FIELD));
assertThat(e.getMessage(), containsString("Unknown or unsupported ApplVerID"));
assertNotSame(sslContext1, sslContext2);
assertTrue(messageCracked > 0);
assertEquals(11, field.getTag()); assertEquals('x', field.getValue()); assertEquals(11, field.getTag()); assertEquals('X', field.getValue()); assertEquals(22, field.getTag()); assertEquals('a', field.getValue()); assertEquals(33, field.getTag()); assertEquals('A', field.getValue());
assertEquals(1, state.getNextSenderMsgSeqNum()); assertEquals(1, state.getNextTargetMsgSeqNum()); assertEquals(1, application.toAdminMessages.size()); assertEquals(MsgType.LOGON, application.toAdminMessages.get(0) .getHeader().getString(MsgType.FIELD)); assertEquals(0, application.sessionResets); assertTrue("Session should be connected", session.isLoggedOn()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum());
assertEquals("wrong result", MessageDecoderResult.NEED_DATA, decoder .decodable(null, buffer));
assertSame(sslContext1, sslContext2);
assertEquals(2, state.getNextTargetMsgSeqNum()); assertTrue(state.getQueuedSeqNums().contains(i)); assertEquals(state.getQueuedSeqNums().size(), numberOfMsgs); assertTrue(application.fromAppMessages.isEmpty()); assertEquals(application.fromAppMessages.size(), two); assertFalse(state.isResendRequested()); assertTrue(session.isLoggedOn()); assertTrue(state.getQueuedSeqNums().isEmpty());
assertTrue(messageCracked > 0);
assertEquals(11, field.getTag()); assertEquals(date, field.getValue()); assertEquals(11, field.getTag()); assertEquals(date, field.getValue());
assertTrue(dd.isFieldValue(65, "FOO"));
assertNotNull("No exception message", emsg); assertTrue(emsg.startsWith("Field not found"));
assertEquals("wrong field name", "Currency", dd.getFieldName(15));
assertNotNull("Resource not found", in);
assertTrue(Message.isHeaderField(ApplExtID.FIELD));
assertTrue(messageCracked > 0);
assertEquals("wrong decoder result", MessageDecoderResult.OK, decoderResult); assertEquals("Wrong encoding", 14397, (int) decoderOutput.getMessage().charAt(0));
assertEquals("value", settings.getString(sessionID2, "$$$foo bar.baz@@@"));
assertNotNull(dictionary);
assertEquals(11, field.getTag()); assertEquals(12.3, field.getValue(), 0); assertEquals(11, field.getTag()); assertEquals(23.4, field.getValue(), 0); assertEquals(22, field.getTag()); assertEquals(34.5, field.getValue(), 0); assertEquals(33, field.getTag()); assertEquals(45.6, field.getValue(), 0);
assertEquals(11, field.getTag()); assertEquals(date, field.getValue()); assertEquals(11, field.getTag()); assertEquals(date, field.getValue());
assertEquals("wrong decoder result", MessageDecoderResult.OK, decoderResult); assertEquals("Wrong encoding", 14397, (int) decoderOutput.getMessage().charAt(0));
assertEquals("FIX.4.4-SENDER____bla__--_____bla-___TARGET_foo__bar", sessionIdFileName); assertTrue(sessionIdFileName.matches("[a-zA-Z0-9-._]*")); assertEquals("FIX.4.4-SENDER-TARGET", sessionIdFileName);
assertNotNull(sessionDictionary); assertNotNull(appDictionary);
assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(2, state.getNextTargetMsgSeqNum()); assertEquals(2, state.getNextSenderMsgSeqNum()); assertEquals(3, state.getNextTargetMsgSeqNum());
assertTrue("Message should be empty on construction", message.isEmpty()); assertFalse("Header should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty()); assertFalse("Body should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty()); assertFalse("Trailer should contain a field", message.isEmpty()); assertTrue("Message should be empty after clear", message.isEmpty());
assertEquals("FIX", id.getBeginString().substring(0, 3)); assertEquals("", id.getSessionQualifier());
assertEquals(result, MessageDecoderResult.NOT_OK);
assertEquals(Arrays.asList(0, 2, 4, 6), values);
assertEquals(Collections.singletonList(3), memoized); assertEquals(2, ch.getModificationCount()); assertEquals(0, mod1.getFrom()); assertEquals(0, mod1.getRemovedSize()); assertEquals(Arrays.asList(1, 2), mod1.getAddedSubList()); assertEquals(3, mod2.getFrom()); assertEquals(0, mod2.getRemovedSize()); assertEquals(Arrays.asList(4, 5), mod2.getAddedSubList()); assertEquals(1, counter.get());
assertEquals(0, invalidationCounter.get()); assertEquals(0, invalidationCounter.get()); assertEquals(0, invalidationCounter.get()); assertEquals(0, invalidationCounter.get()); assertEquals(1, invalidationCounter.getAndReset());
assertEquals(7, memoized.size()); assertEquals(5, memoized.size()); assertEquals(4, memoized.size()); assertEquals(1, ch.getModificationCount()); assertEquals(1, mod.getFrom()); assertEquals(Arrays.asList(1, 5), mod.getRemoved()); assertEquals(0, mod.getAddedSize()); assertEquals(1, counter.get());
assertEquals(Arrays.asList(false, true, 1, 4, 9, 16, false), emitted.get());
assertEquals("a", firstNonNull.getValue()); assertEquals("a", firstNonNull.getValue()); assertEquals("c", firstNonNull.getValue()); assertEquals("b", firstNonNull.getValue()); assertNull(firstNonNull.getValue());
assertFalse(s1.isObservingInputs()); assertFalse(s2.isObservingInputs()); assertFalse(s2.isObservingInputs()); assertTrue(s1.isObservingInputs()); assertTrue(s2.isObservingInputs()); assertTrue(s2.isObservingInputs()); assertFalse(s1.isObservingInputs()); assertFalse(s2.isObservingInputs()); assertFalse(s2.isObservingInputs());
assertEquals(Arrays.asList(false, true, 1, 4, 9, 16, false), emitted.get());
assertNotEquals(ch._1, ch._2); assertEquals( "changes[" + i + "] = " + changes.get(i) + " and changes[" + (i+1) + "] = " + changes.get(i+1) + " are not compatible", changes.get(i)._2, changes.get(i+1)._1);
assertThat(result, is(false)); assertThat(endTime - startTime, greaterThanOrEqualTo(timeout));
assertThat(result.getData(), is(nullValue())); assertThat(result.getException(), is(exception));
assertThat(result.getData(), is(false)); assertThat(count, greaterThanOrEqualTo(testedCount));
assertEquals("VGVzdA", base64Data);
assertEquals(KEY_HANDLE_BASE64, response.getKeyHandle());
assertEquals(2, result.getRegisteredKeys().size()); assertTrue(result.getRegisteredKeys().contains(new RegisteredKey(U2fPrimitives.U2F_VERSION, "A", null, null))); assertTrue(result.getRegisteredKeys().contains(new RegisteredKey(U2fPrimitives.U2F_VERSION, "B", null, null)));
assertEquals(SERVER_CHALLENGE_SIGN_BASE64, signRequest.getChallenge()); assertEquals(SERVER_CHALLENGE_SIGN_BASE64, signRequest.getRequestId()); assertEquals(APP_ID_SIGN, signRequest.getAppId()); assertEquals(KEY_HANDLE_BASE64, signRequest.getKeyHandle());
assertEquals(KEY_HANDLE_BASE64, device.getKeyHandle()); assertEquals(device, overloadDevice);
assertEquals(registerRequest, registerRequest2);
assertNotNull(SignResponse.fromJson(makeLongJson(19999)));
assertNotNull(new DeviceRegistration("A", "B", null, 0, false).toString());
assertEquals(1, data.getSignRequests().size()); assertNotNull(data.getSignRequests().get(0).getChallenge()); assertNotEquals( "startSignature must not return the same challenge twice in a row.", data.getSignRequests().get(0).getChallenge(), data2.getSignRequests().get(0).getChallenge() );
assertEquals(out1, out2); assertEquals(out1, "Test"); assertEquals(out3, "");
assertEquals(KEY_HANDLE_BASE64, response.getKeyHandle());
assertEquals(new DeviceRegistration(AcmeKey.KEY_HANDLE, AcmeKey.USER_PUBLIC_KEY_B64, AcmeKey.ATTESTATION_CERTIFICATE, 0), deviceRegistration);
assertNotNull(CertificateParser.parsePem(PEM_ATTESTATION_CERT));
assertEquals(1, data.getRegisterRequests().size()); assertEquals(1, data2.getRegisterRequests().size()); assertNotEquals( "startRegistration must not return the same challenge twice in a row.", data.getRegisterRequests().get(0).getChallenge(), data2.getRegisterRequests().get(0).getChallenge() );
assertEquals(KEY_HANDLE_BASE64, device.getKeyHandle()); assertEquals(device, overloadDevice);
assertNotNull(RegisterResponse.fromJson(makeLongJson(19999)));
assertEquals(SERVER_CHALLENGE_REGISTER_BASE64, registerRequest.getChallenge()); assertEquals(APP_ID_ENROLL, registerRequest.getAppId()); assertNotNull(SERVER_CHALLENGE_REGISTER_BASE64, registerRequest.getRequestId());
assertEquals("{\\"foo\\":\\"bar\\"}", new Thing("bar").toString());
assertTrue(adapter.wasCalled("isValidRequest"));
assertEquals(1, result);
assertEquals(result, ByteUtil.nibblesToPrettyString(test));
assertEquals(1866897155, ECKey.fromPrivate(privateKey).hashCode());
assertTrue(key.isPubKeyCanonical()); assertTrue(key.isPubKeyOnly()); assertArrayEquals(key.getPubKey(), pubKey);
assertArrayEquals(new byte[] { (byte) 0x80 }, actuals);
assertArrayEquals("odd compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertEquals("pub:04a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7893aba425419bc27a3b6c7e693a24c696f794c2ed877a1593cbee53b037368d7", key.toString());
assertEquals(0, result);
assertNotNull(key.getPrivKeyBytes()); assertEquals(32, key.getPrivKeyBytes().length);
assertEquals(rlpWithoutNonce, Hex.toHexString(block.getEncodedWithoutNonce())); assertTrue(mined); assertTrue(valid); assertEquals(expectedHash, Hex.toHexString(block.getHash())); assertEquals(expectedNonce, Hex.toHexString(block.getNonce()));
assertArrayEquals("even terminated compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertArrayEquals("test".getBytes(), ByteUtil.appendByte(bytes, b));
assertArrayEquals(expecteds, actuals);
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertArrayEquals("even compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertEquals(0, result);
assertEquals(Genesis.GAS_LIMIT, gasLimit); assertEquals(actualGasLimit, calcGasLimit);
assertEquals(0, ByteUtil.byteArrayToInt(null)); assertEquals(0, ByteUtil.byteArrayToInt(new byte[0]));
assertEquals(1, result);
assertEquals(expected, Hex.toHexString(encoderesult)); assertEquals(test, new BigInteger(1, decodeResult));
assertEquals(Arrays.areEqual(expected, result), true); assertEquals(expected, result); assertEquals(expected, result); assertEquals(expected, result);
assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey1)); assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey2)); assertTrue(ECKey.isPubKeyCanonical(canonicalPubkey3));
assertArrayEquals(pubKey, pubFromPriv);
assertTrue(wrapper1.compareTo(wrapper2) == 0); assertTrue(wrapper1.compareTo(wrapper3) > 1); assertTrue(wrapper1.compareTo(wrapper4) > 1); assertTrue(wrapper2.compareTo(wrapper3) > 1);
assertEquals(result, ByteUtil.nibblesToPrettyString(test));
assertEquals(32, y.getData().length); assertEquals("0000000000000000000000010000000000000000000000000000000000000000", Hex.toHexString(y.getData()));
assertArrayEquals(expected, data); assertArrayEquals(expected2, data); assertArrayEquals(expected3, data); assertArrayEquals(expected4, data); assertArrayEquals(expected5, data);
assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey4)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey5)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey6));
assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey1)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey2)); assertFalse(ECKey.isPubKeyCanonical(nonCanonicalPubkey3));
assertEquals(32, y.getData().length); assertEquals(expected, Hex.toHexString(y.getData()));
assertEquals(expected, Hex.toHexString(encodedLength)); assertEquals(expected, Hex.toHexString(encodedLength));
assertEquals(new BigInteger(1, Genesis.DIFFICULTY), difficulty); assertEquals(actualDifficulty, calcDifficulty);
assertTrue(wrapper1.equals(wrapper2)); assertFalse(wrapper1.equals(wrapper3)); assertFalse(wrapper1.equals(wrapper4)); assertFalse(wrapper1.equals(null)); assertFalse(wrapper2.equals(wrapper3));
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertEquals(1, result);
assertArrayEquals(Hex.decode(address), key.getAddress());
assertArrayEquals(new byte[] { (byte) 0x00 }, actuals);
assertArrayEquals(result, CompactEncoder.binToNibbles(test));
assertEquals(expected1, ByteUtil.numBytes(test1)); assertEquals(expected2, ByteUtil.numBytes(test2)); assertEquals(expected3, ByteUtil.numBytes(test3));
assertArrayEquals(expected, data); assertArrayEquals(expected2, data); assertArrayEquals(expected3, data); assertArrayEquals(expected4, data); assertArrayEquals(expected5, data); assertArrayEquals(expected6, data); assertArrayEquals(expected7, data); assertArrayEquals(expected8, data);
assertArrayEquals("even compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertEquals(expected, Hex.toHexString(acct.getEncoded()));
assertFalse("Expected values not to be equal", val1.cmp(val2)); assertTrue("Expected values to be equal", val3.cmp(val4));
assertArrayEquals(expected, data);
assertArrayEquals(expected, data); assertArrayEquals(expected2, data); assertArrayEquals(expected3, data);
assertArrayEquals(expecteds, actuals);
assertTrue(key.isPubKeyCanonical()); assertNotNull(key.getPubKey()); assertNotNull(key.getPrivKeyBytes());
assertArrayEquals(expected, ByteUtil.calcPacketLength(test));
assertArrayEquals(expecteds, actuals);
assertArrayEquals("even terminated compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertArrayEquals("odd terminated compact encode fail", expectedData, CompactEncoder.packNibbles(test));
assertArrayEquals(new byte[] { (byte) 0x00 }, actuals);
assertEquals("", ByteUtil.toHexString(null));
assertArrayEquals(compressedPubKey, pubFromPriv);
assertArrayEquals("odd terminated compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertArrayEquals(new byte[] { (byte) 0xc0 }, actuals);
assertArrayEquals("odd compact decode fail", expected, CompactEncoder.unpackToNibbles(test));
assertArrayEquals(expected, ByteUtil.stripLeadingZeroes(test1)); assertArrayEquals(expected, ByteUtil.stripLeadingZeroes(test2));
assertThat(updatedProfile.getString("personalNumber"), is("04146251")); assertThat(updatedProfile.getString("username"), is("john")); assertThat(updatedProfile.getString("mail"), is("john.doe@swisspush.org")); assertThat(updatedProfile.getString("department"), is("sales")); assertThat(updatedProfile.getString("lang"), is("de")); assertThat(updatedProfile.getString("additionalAttribute"), is(nullValue()));
assertTrue(matcher.find()); assertEquals(3, matcher.groupCount()); assertEquals(2, mo.groupCount());
assertEquals("", new Token("").getRegex()); assertEquals("a(b)c", new Token("a(b)c").getRegex());
assertEquals("foo[INVALID XML CHAR FOUND: U+D8FF]bar", actualOutput);
assertEquals("foobar", actualOutput);
assertEquals(fakeErrorLog, output);
assertEquals(true, "ABC".matches(regex)); assertEquals(false, "abc".matches(regex)); assertEquals(true, "XYZ".matches(regex)); assertEquals(true, "xyz".matches(regex));
assertTrue(matcher.find()); assertEquals(3, matcher.groupCount()); assertEquals(2, mo.groupCount());
assertEquals("modify stream", output);
assertEquals("(?im:abc)", util.embedFlags("abc", Pattern.CASE_INSENSITIVE ^ Pattern.MULTILINE)); assertEquals("abc", util.embedFlags("abc", 0));
assertEquals(0, new Token("").getCapturingGroupCount()); assertEquals(1, new Token("a(b)c").getCapturingGroupCount()); assertEquals(0, new Token("a(?:b)c").getCapturingGroupCount());
assertEquals("modify\\n\\nstream", output);
assertArrayEquals(actualOutputs.getValues(), expectedOutputs.getValues(), 1e-7f);
assertEquals(expResult, result);
assertEquals(expResult, result); assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertArrayEquals(src, dest, 0.0f);
assertEquals(expResult, result); assertEquals(expResult, result);
assertArrayEquals(expResult, array1, 0.0f);
assertArrayEquals(expResult, result, 0.0f);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result, 0.0);
assertArrayEquals(expResult, result, 0.0f);
assertEquals(expResult, result);
assertEquals(expResult, result, 0.0);
assertArrayEquals(expResult, array, 0.0f);
assertEquals(expResult, result, 0.0);
assertEquals(expResult, result);
assertArrayEquals(expResult, array1, 1e-7f);
assertArrayEquals(expResult, array, 0.0f);
assertEquals(binoms[5][2], 10L);
assertArrayEquals(expected, cCoeffs[3]);
assertArrayEquals(expectedChebyshevMoments, convertedChebyshevMoments, 1e-14);
assertFalse(pc.getProducts().contains(product));
assertNull(res);
assertTrue(CheckIterator.checkElementNumber(it, 2)); assertTrue(CheckIterator.checkElementNumber(it, 2)); assertTrue(CheckIterator.checkElementNumber(it, 1)); assertTrue(CheckIterator.checkElementNumber(it, 0)); assertTrue(CheckIterator.checkElementNumber(it, 0));
assertNotNull(ids); assertEquals(ids.size(), 2); assertTrue(ids.contains(Long.valueOf(0))); assertTrue(ids.contains(Long.valueOf(5)));
assertNotNull(cart); assertEquals(cart.getUUID(), "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1"); assertEquals(cart.getUser(), user, "User not owner of the found cart."); assertNull(cart); assertNotNull(cart);
assertEquals("1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs", Address.publicKeyToAddress( BTCUtils.fromValidHex("0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352")));
assertTrue(Address.verify("1111111111111111111114oLvT2", false)); assertTrue(Address.verify("1111111111111111111114oLvT2", true)); assertFalse(Address.verify("111111111111111111117K4nzc", false)); assertFalse(Address.verify("111111111111111111117K4nzc", true)); assertFalse(Address.verify("1Wh4bh", false)); assertFalse(Address.verify("1Wh4bh", true));
assertNotNull(result); assertEquals(0, result.size());
assertNotNull(result); assertEquals(3, result.size()); assertEquals("Role1", result.get(0)); assertEquals("Role3", result.get(2));
assertNull(result);
assertThat(result).isEqualTo("param1={param1}&param1={param1}&param2={param2}&param3={param3}");
assertThat(intro.getJFishProperty("name", false).hasAnnotation(FieldName.class)).isTrue();
assertThat(map.toString()).isEqualTo("{birthDay=null, id=11, userName=testUserName, age=0, email=null, height=0.0, status=null}");
assertThat(period.getSeconds(), equalTo(Seconds.THREE.getSeconds())); assertThat(Seconds.secondsBetween(new LocalDateTime(start), new LocalDateTime(end)), equalTo(Seconds.THREE));
assertThat(user).isNotNull(); assertThat(user.getId()).isEqualTo(123); assertThat(user.getUserName()).isNull(); assertThat(user.getBirthDay()).isEqualTo(birthDay); assertThat(user.getRoles()).isNull();
assertThat(res).isInstanceOf(ClassPathResource.class); assertThat(res).isInstanceOf(FileSystemResource.class);
assertThat(data2).isEqualTo(data);
assertThat(attrs).isEmpty();
assertThat(strs).contains("name");
assertThat(result).isEqualTo("age={age}&height={height}&id={id}&roles[0].id={roles[0].id}&roles[0].name={roles[0].name}&roles[0].version={roles[0].version}&roles[1].id={roles[1].id}&roles[1].name={roles[1].name}&roles[1].version={roles[1].version}&userName={userName}");
assertThat(checked).isTrue(); assertThat(checked).isFalse();
assertThat(map.size()).isEqualTo(5); assertThat(map.get("birthday")).isEqualTo("2017-01-05"); assertThat(map.get("realName")).isEqualTo("testRealName");
assertThat(size).isEqualTo(1024); assertThat(size).isEqualTo(1024*1024); assertThat(size).isEqualTo(1024*1024*1024); assertThat(size).isEqualTo(1024); assertThat(size).isEqualTo(1024*1024); assertThat(size).isEqualTo(1024*1024*1024);
assertThat(arrayMap.size()).isEqualTo(keys.length); assertThat(arrayMap).containsKeys(keys[0], keys[1]);
assertThat(attrs).isEmpty();
assertThat(attrs).isEmpty();
assertEquals("{\\"k1\\":\\"v1\\",\\"k2\\":\\"v2\\",\\"k\\\\\\"\\":\\"v\\\\\\"\\",\\"k3\\":\\"v3\\"}", Utils.toJsonStr(map));
assertTrue(mask.equals(NetUtils.getInetNetworkMask(8, true))); assertTrue(mask.equals(NetUtils.getInetNetworkMask(1, true))); assertTrue(mask.equals(NetUtils.getInetNetworkMask(5, true))); assertTrue(mask.equals(NetUtils.getInetNetworkMask(127, true)));
assertNotNull(InstanceIdentifierUtils.generateNodeInstanceIdentifier(ncRef));
assertNotNull(tableInsId); assertEquals(NUM_ID_1, tableInsId.firstKeyOf(Table.class, TableKey.class).getId());
assertTrue(inet.equals(NetUtils.getInetAddress(ip))); assertTrue(inet.equals(NetUtils.getInetAddress(ip))); assertTrue(inet.equals(NetUtils.getInetAddress(ip)));
assertNotNull(flowInsId); assertEquals(NUM_ID_1, flowInsId.firstKeyOf(Table.class, TableKey.class).getId()); assertEquals(STR_ID_1, flowInsId.firstKeyOf(Flow.class, FlowKey.class).getId().getValue());
assertEquals(0, NetUtils.getUnsignedByte((byte) 0x00)); assertEquals(1, NetUtils.getUnsignedByte((byte) 0x01)); assertEquals(127, NetUtils.getUnsignedByte((byte) 0x7f)); assertEquals(128, NetUtils.getUnsignedByte((byte) 0x80)); assertEquals(255, NetUtils.getUnsignedByte((byte) 0xff));
assertNotNull(insId); assertNotNull(insId.firstIdentifierOf(Nodes.class)); assertEquals(STR_ID_1, insId.firstKeyOf(Node.class, NodeKey.class).getId().getValue());
assertTrue(NetUtils.getSubnetPrefix(ip, maskLen).equals(InetAddress.getByName("192.128.64.128")));
assertEquals(0, NetUtils.getUnsignedShort((short) 0x0000)); assertEquals(1, NetUtils.getUnsignedShort((short) 0x0001)); assertEquals(32767, NetUtils.getUnsignedShort((short) 0x7fff)); assertEquals(32768, NetUtils.getUnsignedShort((short) 0x8000)); assertEquals(65535, NetUtils.getUnsignedShort((short) 0xffff));
assertEquals(0, inventoryReader.getControllerSwitchConnectors().size());
assertEquals(0, inventoryReader.getSwitchNodeConnectors().size());
assertNotNull(ncInsId); assertEquals(STR_ID_1, ncInsId.firstKeyOf(Node.class, NodeKey.class).getId().getValue()); assertEquals(STR_ID_2, ncInsId.firstKeyOf(NodeConnector.class, NodeConnectorKey.class).getId().getValue());
assertNotNull(tableInsId); assertEquals(NUM_ID_1.shortValue(), tableInsId.firstKeyOf(Table.class, TableKey.class).getId().shortValue()); assertNotNull(tableInsId.firstIdentifierOf(FlowCapableNode.class));
assertNotNull(tableInsId); assertEquals(NUM_ID_1, tableInsId.firstKeyOf(Table.class, TableKey.class).getId());
assertNotNull(InstanceIdentifierUtils.generateNodeInstanceIdentifier(ncRef));
assertNotNull(InstanceIdentifierUtils.getNodePath(ncInsId));
assertNotNull(topologyInsId); assertEquals(STR_ID_1, topologyInsId.firstKeyOf(Topology.class, TopologyKey.class).getTopologyId().getValue());
assertEquals(token, formerToken);
assertTrue(mediaType1.equalsTypeSubTypeWithoutSuffix(mediaType2)); assertTrue(mediaType2.equalsTypeSubTypeWithoutSuffix(mediaType1));
assertEquals(token, formerToken);
assertThat(InstanceCoordinate.parse("foo:bar.baz"), is(nullValue())); assertThat(InstanceCoordinate.parse(null), is(nullValue())); assertThat(InstanceCoordinate.parse("foo.bar.baz"), is(nullValue())); assertThat(InstanceCoordinate.parse(""), is(nullValue()));
assertThat(coordA.hashCode(), is(coordB.hashCode())); assertThat(coordC.hashCode(), is(not(coordA.hashCode())));
assertThat(CloudnamePath.isValidPathElementName( "sojarindfleischetikettierungsueberwachungsaufgabenuebertragungsgesetz"), is(false));
assertThat(CloudnamePath.isValidPathElementName("-invalid"), is(false));
assertThat(CloudnamePath.isValidPathElementName(""), is(false));
assertEquals("10.001", buff.toString()); assertEquals("10", buff.toString());
assertFalse("index [" + i + "] not set earlier (" + id.longValue() + ")", allids.contains(id.longValue()));
assertEquals(eventString, form.format(event)); assertNotNull(form.format(eventWithException));
assertTrue(n > 0); assertEquals("T", ev.getType()); assertEquals(numMessages, count);
assertEquals(expected, mapper.map(t1, SERVICENAME));
assertEquals(1, listLogHandler.getEvents().size());
assertTrue(consul.isValid()); assertTrue(consul.createPermanentData(keyName, "SomeValue")); assertFalse(consul.createPermanentData(keyName, "AlreadyExists")); assertThat(consul.readData(keyName), is("SomeValue")); assertTrue(consul.writePermanentData(keyName, "OtherValue")); assertThat(consul.readData(keyName), is("OtherValue")); assertTrue(consul.removePermanentData(keyName));
assertThat(serviceData.addEndpoint(endpointA), is(true)); assertThat(serviceData.addEndpoint(endpointB), is(false)); assertThat(serviceData.addEndpoint(endpointC), is(false)); assertThat(serviceData.addEndpoint(endpointD), is(true));
assertEquals("1970/01/01/"+SERVICENAME+"_1970-01-01_00", mapper.map(0L, SERVICENAME));
assertNotNull(mapper.map(t1 + (i * 5000), SERVICENAME));
assertNotNull(LogUtil.getHostName());
assertThat(one.toString(), is(notNullValue())); assertThat(two.toString(), is(notNullValue())); assertThat(three.toString(), is(notNullValue()));
assertEquals(20, event.getLevel()); assertEquals("some.service", event.getServiceName()); assertEquals("the.source", event.getSource()); assertEquals("the message", event.getPayload(0).getPayload().toStringUtf8()); assertTrue((System.currentTimeMillis() - event.getTimestamp()) < 10);
assertEquals("msg", event.getPayload(0).getName()); assertEquals("application/java-exception", event.getPayload(1).getContentType());
assertEquals(expected, values); assertEquals(maxDelay, delayManager.getReconnectDelayMs(address));
assertTrue(createLatch.await(propagationTime, TimeUnit.MILLISECONDS)); assertTrue(dataLatch.await(propagationTime, TimeUnit.MILLISECONDS)); assertTrue(removeLatch.await(propagationTime, TimeUnit.MILLISECONDS));
assertThat(ServiceCoordinate.parse("foo bar baz"), is(nullValue()));
assertThat(CloudnamePath.isValidPathElementName("invalid-"), is(false));
assertTrue(consul.isValid()); assertThat(session, is(notNullValue())); assertThat(session.getId(), is(not("")));
assertTrue("Different worker id yields different id", worker100.getNextId() != worker200.getNextId());
assertTrue(idSet.add(idgen.getNextId())); assertEquals(numIterations, idSet.size());
assertThat(BackendManager.getBackend(null), is(nullValue()));
assertEquals("\\\\n\\\\t\\\\n\\\\t", Util.escape("\\n\\t\\n\\t")); assertEquals("\\\\\\\\\\\\\\\\", Util.escape("\\\\\\\\"));
assertThat(CloudnamePath.isValidPathElementName(null), is(false));
assertThat(a.equals(b), is(true)); assertThat(b.equals(a), is(true)); assertThat(b.hashCode(), is(a.hashCode())); assertThat(a.equals(c), is(false)); assertThat(b.equals(c), is(false)); assertThat(a.equals(d), is(false)); assertThat(a.equals(e), is(false)); assertThat(a.equals(null), is(false)); assertThat(a.equals("some string"), is(false));
assertThat(cnPath.length(), is(path.length())); assertThat(cnPath, is(equalTo(path)));
assertThat(coord.getRegion(), is("region")); assertThat(coord.getTag(), is("tag")); assertThat(coord.getService(), is("service"));
assertEquals(eventString, form.format(event));
assertEquals(initialDelay, delayManager.getReconnectDelayMs(address)); assertEquals(initialDelay * 2, delayManager.getReconnectDelayMs(address));
assertTrue(consul.isValid()); assertThat(session, is(notNullValue())); assertTrue(consul.writeSessionData("TheKey", "TheValue", session.getId())); assertThat(consul.readData("TheKey"), is("TheValue")); assertTrue(consul.writeSessionData("TheKey", "TheNewValue", session.getId())); assertThat(consul.readData("TheKey"), is("TheNewValue"));
assertEquals(level.getName(), Util.logLevelNameForValue(level.intValue())); assertEquals("NUCLEAR", Util.logLevelNameForValue(Level.SEVERE.intValue() + 1));
assertEquals("2011-11-29T22:05:15.123", buff.toString());
assertThat(form.format(eventWithException), startsWith(eventStringWithException));
assertTrue(consul.isValid());
assertThat(path.get(0), is(twoElements[0])); assertThat(path.get(1), is(twoElements[1]));
assertEquals(eventString, form.format(event));
assertThat(data.getEndpoint("foo"), is(equalTo(ep1))); assertThat(data.getEndpoint("bar"), is(equalTo(ep2))); assertThat(data.getEndpoint("baz"), is(nullValue()));
assertTrue("Label names aren\'t case sensitive", one.equals(two));
assertThat(CloudnamePath.isValidPathElementName("__"), is(false));
assertNotNull(providerInfos); assertEquals(1, providerInfos.size()); assertNotNull(providerInfo); assertEquals(instance.getIp(), providerInfo.getHost()); assertEquals(instance.getPort(), providerInfo.getPort()); assertEquals(RpcConfigs.getStringValue(RpcOptions.DEFAULT_PROTOCOL), providerInfo.getProtocolType()); assertEquals(RpcConstants.PROTOCOL_TYPE_REST, providerInfo.getProtocolType());
assertEquals(serviceName, "com.alipay.xxx.TestService:nacos-test:DEFAULT"); assertEquals(serviceName, "com.alipay.xxx.TestService:nacos-test:DEFAULT"); assertEquals(serviceName, "com.alipay.xxx.TestService:nacos-test:" + RpcConstants.PROTOCOL_TYPE_TRIPLE); assertEquals(serviceName, "com.alipay.xxx.TestService:nacos-test:" + RpcConstants.PROTOCOL_TYPE_REST);
assertEquals(RemotingConstants.SERIALIZE_CODE_HESSIAN, actual);
assertNotNull(sofaTracerSpan);
assertThat(sent).isTrue();
assertThat(sent).isTrue();
assertThat(analyze.getAction()).contains("Error message"); assertThat(analyze.getDescription()).contains("Error message"); assertThat(analyze.getCause()).isEqualTo(exception);
assertThat(receivedEvents.get(0)).isInstanceOf(ToAdmin.class); assertThat(((ToAdmin) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(conditionOutcome).isNotNull(); assertThat(conditionOutcome.getMessage()).contains("ResourceCondition (quickfixj.client) System property \'anyProperty\' is set.");
assertThat(receivedEvents.get(0)).isInstanceOf(Create.class); assertThat(((Create) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(receivedEvents.get(0)).isInstanceOf(Logout.class); assertThat(((Logout) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(settings).isNotNull();
assertThat(sent).isTrue();
assertThat(sent).isTrue();
assertThat(analyze.getAction()).contains("Please provide a QuickFIX/J settings file"); assertThat(analyze.getDescription()).contains("The QuickFIX/J settings file could not be found: Error message"); assertThat(analyze.getCause()).isEqualTo(exception);
assertThat(conditionOutcome).isNotNull(); assertThat(conditionOutcome.getMessage()).contains("ResourceCondition (quickfixj.client) did not find resource");
assertThat(sent).isTrue();
assertThat(receivedEvents.get(0)).isInstanceOf(FromApp.class); assertThat(((FromApp) receivedEvents.get(0)).getMessage()).isEqualTo(message); assertThat(((FromApp) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(sent).isTrue();
assertThat(receivedEvents.get(0)).isInstanceOf(FromAdmin.class); assertThat(((FromAdmin) receivedEvents.get(0)).getMessage()).isEqualTo(message); assertThat(((FromAdmin) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(receivedEvents.get(0)).isInstanceOf(ToApp.class); assertThat(((ToApp) receivedEvents.get(0)).getMessage()).isEqualTo(message); assertThat(((ToApp) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(receivedEvents.get(0)).isInstanceOf(Logon.class); assertThat(((Logon) receivedEvents.get(0)).getSessionId()).isEqualTo(sessionId);
assertThat(analyze.getAction()).contains("Please configure your QuickFIX/J settings"); assertThat(analyze.getDescription()).contains("A configuration error has been detected in the QuickFIX/J settings provided: Error message"); assertThat(analyze.getCause()).isEqualTo(exception);
assertThat(keyGenerator.resolveKeys("lock_", expression, service, sendMessageMethod, new Object[]{"p_"})) .containsExactly("lock_p_first", "lock_15");
assertThat(released).isTrue(); assertThat(jdbcTemplate.queryForList("SELECT * FROM locks")).isNullOrEmpty();
assertThat(token).isEqualTo("abc"); assertThat(acquiredLockMap).containsAllEntriesOf(values("1", "abc")); assertThat(((Date) expireAt).getTime()).isCloseTo(now + 1000, Offset.offset(100L));
assertThat(intervalConverter.toMillis(new Object() {}.getClass().getEnclosingMethod().getAnnotation(Interval.class))) .isEqualTo(10);
assertThat(redisTemplate.opsForValue().get("locks:1")).isNull();
assertThat(token).isEqualTo("abc"); assertThat(document.getToken()).isEqualTo("abc"); assertThat(document.getExpireAt()).isCloseTo(expectedExpiration, new TemporalUnitWithinOffset(100, ChronoUnit.MILLIS));
assertThat(acquiredLockMap).containsAllEntriesOf(values("1", "def"));
assertThat(token).isNull(); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def"); assertThat(redisTemplate.opsForValue().get("locks:2")).isNull();
assertThat(keyGenerator.resolveKeys("lock_", "#p0", service, sendMessageMethod, new Object[]{"hello"})) .containsExactly("lock_hello"); assertThat(keyGenerator.resolveKeys("lock_", "#a0", service, sendMessageMethod, new Object[]{"hello"})) .containsExactly("lock_hello"); assertThat(keyGenerator.resolveKeys("lock_", "#message", service, sendMessageMethod, new Object[]{"hello"})) .containsExactly("lock_hello");
assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def"); assertThat(redisTemplate.opsForValue().get("locks:2")).isNull();
assertThat(token).isNull(); assertThat(mongoTemplate.findById("1", LockDocument.class, "locks").getToken()).isEqualTo("def");
assertThat(redisTemplate.opsForValue().get("locks:1")).isNull();
assertThat(token).isEqualTo("abc"); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("abc"); assertThat(redisTemplate.opsForValue().get("locks:2")).isEqualTo("abc"); assertThat(redisTemplate.getExpire("locks:1", TimeUnit.MILLISECONDS)).isCloseTo(1000, Offset.offset(100L)); assertThat(redisTemplate.getExpire("locks:2", TimeUnit.MILLISECONDS)).isCloseTo(1000, Offset.offset(100L));
assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def");
assertThat(lock.refresh(Collections.singletonList("1"), "locks", "abc", 1000)).isFalse(); assertThat(mongoTemplate.findAll(LockDocument.class)).isNullOrEmpty();
assertThat(keyGenerator.resolveKeys("lock_", expression, service, sendMessageMethod, new Object[]{"p_"})) .containsExactly("lock_p_first", "lock_p_second");
assertThat(token).isNull(); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def");
assertThat(keyGenerator.resolveKeys("lock_", "#executionPath", service, sendMessageMethod, new Object[]{"hello"})) .containsExactly("lock_com.github.alturkovic.lock.key.SpelKeyGeneratorTest.MessageService.sendMessage");
assertThat(redisTemplate.opsForValue().get("locks:1")).isNull(); assertThat(redisTemplate.opsForValue().get("locks:2")).isNull();
assertThat(token).isNull(); assertThat(acquiredLockMap).containsAllEntriesOf(values("1", "def"));
assertThat(keyGenerator.resolveKeys("lock_", expression, service, sendMessageMethod, new Object[]{"p_"})) .containsExactly("lock_p_first", "lock_15");
assertThat(token).isNull(); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def"); assertThat(redisTemplate.opsForValue().get("locks:2")).isEqualTo("ghi");
assertThat(token).isEqualTo("abc"); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("abc"); assertThat(redisTemplate.getExpire("locks:1", TimeUnit.MILLISECONDS)).isCloseTo(1000, Offset.offset(100L));
assertThat(lock.refresh(keys, "locks", "abc", 1000)).isFalse(); assertThat(jdbcTemplate.queryForList("SELECT * FROM locks")).isNullOrEmpty();
assertThat(redisTemplate.opsForValue().get("locks:1")).isNull();
assertThat(retriableLock.getLock()).isEqualTo(lock); assertThat(retriableLock.getRetryTemplate()).isEqualTo(retryTemplate);
assertThat(token).isEqualTo("abc");
assertThat(token).isEqualTo("abc");
assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("def"); assertThat(redisTemplate.opsForValue().get("locks:2")).isEqualTo("ghi");
assertThat(token).isEqualTo("abc");
assertThat(lock.refresh(Collections.singletonList("1"), "locks", "abc", 1000)).isFalse(); assertThat(redisTemplate.keys("*")).isNullOrEmpty();
assertThat(redisTemplate.opsForValue().get("locks:1")).isNull(); assertThat(redisTemplate.opsForValue().get("locks:2")).isNull();
assertThat(released).isTrue(); assertThat(mongoTemplate.findById("1", LockDocument.class, "locks")).isNull();
assertThat(intervalConverter.toMillis(new Object() {}.getClass().getEnclosingMethod().getAnnotation(Interval.class))) .isEqualTo(10);
assertThat(token).isEqualTo("abc"); assertThat(redisTemplate.opsForValue().get("locks:1")).isEqualTo("abc"); assertThat(redisTemplate.getExpire("locks:1", TimeUnit.MILLISECONDS)).isCloseTo(1000, Offset.offset(100L));
assertThat(released).isFalse(); assertThat(mongoTemplate.findById("1", LockDocument.class, "locks").getToken()).isEqualTo("def");
assertTrue("The violators map should be empty after filtering", actual.isEmpty());
assertTrue("The list should contain 3 items", list.size() == 3);
assertTrue(results.contains("Test.Owner")); assertTrue(results.contains("test.user@nike.com")); assertFalse(results.contains("arn:aws:iam::111111111111:role/example/role"));
assertTrue("The violators map should be empty after filtering", actual.size() == 0);
assertNotNull(results);
assertTrue("The map should be empty", map.size() == 0);
assertTrue(results.contains("No owner found"));
assertTrue(results.contains("Test.Owner")); assertTrue(results.contains("test.user@nike.com")); assertFalse(results.contains("arn:aws:iam::111111111111:role/example/role"));
assertEquals(ImmutableList.of("52.71.59.82"), ips);
assertTrue("The violators map should still have one entry after filtering", actual.size() == 1);
assertTrue(processor.isMessageFromRateLimiter(slackMessage));
assertTrue("The map should have one element", map.size() == 1);
assertTrue("The map should have one violator", violators.size() == 1); assertTrue("The map should should contain 109.171.135.164", violators.containsKey("109.171.135.160")); assertTrue(violators.get("109.171.135.160").getMaxRate() == 20);
assertTrue("The map should have one violator", violators.size() == 1); assertTrue("The map should should contain 108.171.135.164", violators.containsKey("108.171.135.164")); assertTrue(violators.get("108.171.135.164").getMaxRate() == 10);
assertEquals("demo2", env);
assertTrue(results.contains("No owner found"));
assertFalse(processor.isMessageFromRateLimiter(new SlackMessage().setText("This message is not from the rate limiter")));
assertThat(actual, is("c"));
assertThat(queryResultMetaData.getColumnName(1), is("column"));
assertTrue(queryRow.equals(queryRow1)); assertFalse(queryRow.equals(queryRow2));
assertThat(aggregationDistinctQueryResult.getValue(1, Object.class), is((Object) 10)); assertThat(aggregationDistinctQueryResult.getValue(2, Object.class), is((Object) 1)); assertThat(aggregationDistinctQueryResult.getValue(3, Object.class), is((Object) 10)); assertThat(aggregationDistinctQueryResult.getValue(4, Object.class), is((Object) 1)); assertThat(aggregationDistinctQueryResult.getValue(5, Object.class), is((Object) 10));
assertThat(distinctQueryResult.getCurrentRow().getColumnValue(1), is((Object) 10));
assertThat((Timestamp) QueryResultUtil.getValue(resultSet, 1), is(new Timestamp(currentTime)));
assertTrue(distinctQueryResult.isCaseSensitive(1));
assertThat((double) QueryResultUtil.getValue(resultSet, 1), is(Double.MAX_VALUE));
assertThat((short) QueryResultUtil.getValue(resultSet, 1), is(Short.MAX_VALUE));
assertThat(actual, is(2));
assertThat((String) QueryResultUtil.getValue(resultSet, 1), is("xxxxx"));
assertThat((long) QueryResultUtil.getValue(resultSet, 1), is(Long.MAX_VALUE));
assertThat(result, is(not(nullValue()))); assertThat(resultCfg, is(not(anEmptyMap()))); assertThat(resultShardingCfg.getType(), is(ZebraShardingDataSourceCfg.Type.SHARDING)); assertThat(resultMasterSlaveCfg.getType(), is(ZebraShardingDataSourceCfg.Type.MASTER_SLAVE)); assertThat(resultMasterSlaveCfg.getMasterslave().getName(), is("masterSlaveDs1"));
assertThat(queryResultMetaData.getColumnLabel(1), is("label"));
assertThat(actual.size(), is(4));
assertTrue((boolean) QueryResultUtil.getValue(resultSet, 1));
assertThat((String) QueryResultUtil.getValue(resultSet, 1), is("x"));
assertThat(queryResult.getColumnCount(), Is.is(1));
assertThat(actual, is(2));
assertThat((Blob) QueryResultUtil.getValue(resultSet, 1), is(blob));
assertThat(e.getMessage(), equalTo("zebra.database.dataSourceName[0] must be config."));
assertThat(aggregationDistinctQueryResult.getInputStream(1, "Unicode").read(), is(getInputStream(10).read()));
assertThat(e.getMessage(), equalTo("zebra.database.username[0] must be config."));
assertThat(QueryResultUtil.getValue(resultSet, 1), is(object));
assertThat(cfg, is(nullValue()));
assertThat((Blob) QueryResultUtil.getValue(resultSet, 1), is(blob));
assertThat(aggregationDistinctQueryResult.getColumnLabel(6), is("order_id"));
assertThat(distinctQueryResult.getColumnCount(), is(1));
assertThat(queryResultMetaData.getColumnIndex("label"), is(1));
assertThat(actual.size(), is(0));
assertTrue(distinctQueryMetaData.isAggregationDistinctColumnLabel("c"));
assertThat((Date) QueryResultUtil.getValue(resultSet, 1), is(new Date(currentTime)));
assertTrue(distinctQueryResult.next()); assertTrue(distinctQueryResult.next()); assertFalse(distinctQueryResult.next());
assertThat(actual.size(), is(1)); assertThat(each.getInputs().size(), is(1));
assertFalse(queryResultMetaData.isCaseSensitive(1));
assertThat(transportHeartbeat, is(true)); assertThat(serviceDefaultGroupList, is("127.0.0.1:8091")); assertThat(transportShutdownWait, is(3)); assertThat(configOfDefaultValue, is("ping.pong")); assertThat(notExistConf, is(nullValue()));
assertEquals(41, queryRow.hashCode());
assertTrue(queryResult.next()); assertFalse(queryResult.next());
assertThat(queryResult.getColumnLabel(1), Is.is("order_id"));
assertThat(e.getMessage(), is("service.default.grouplist is required."));
assertThat(aggregationDistinctQueryResult.getInputStream("order_id", "Unicode").read(), is(getInputStream(10).read()));
assertNull(QueryResultUtil.getValue(resultSet, 1));
assertThat((int) QueryResultUtil.getValue(resultSet, 1), is(Integer.MAX_VALUE));
assertFalse(queryResult.isCaseSensitive(1));
assertThat((BigDecimal) QueryResultUtil.getValue(resultSet, 1), is(BigDecimal.TEN));
assertThat((Clob) QueryResultUtil.getValue(resultSet, 1), is(clob));
assertThat((byte) QueryResultUtil.getValue(resultSet, 1), is(Byte.MAX_VALUE));
assertTrue(SQLExecutionHookFixture.containsAction("start"));
assertThat((String) QueryResultUtil.getValue(resultSet, 1), is("xxxxx"));
assertThat(actual.size(), is(4));
assertThat(actual, is(2));
assertThat((Blob) QueryResultUtil.getValue(resultSet, 1), is(blob));
assertTrue(queryResultMetaData.getShardingEncryptor(1).isPresent()); assertThat(queryResultMetaData.getShardingEncryptor(1).get(), is(shardingEncryptor));
assertTrue(distinctQueryMetaData.isDerivedSumColumnIndex(4));
assertThat(normalizedGroupName, is("com--GUOSEN-z%ebra-hello1-service"));
assertTrue(SQLExecutionHookFixture.containsAction("finishSuccess"));
assertTrue(queryResult.next()); assertFalse(queryResult.next());
assertThat(queryRow.getColumnValue(1), is((Object) 10));
assertThat((double) QueryResultUtil.getValue(resultSet, 1), is(Double.MAX_VALUE));
assertFalse(queryResult.isCaseSensitive(1));
assertThat(actual, is(2));
assertTrue(distinctQueryMetaData.isAggregationDistinctColumnIndex(1));
assertTrue(SQLExecutionHookFixture.containsAction("finishFailure"));
assertThat(actual.size(), is(4));
assertThat(actual, is(AggregationType.AVG));
assertThat(actual.size(), is(10)); assertThat(each.getInputs().size(), is(2));
assertThat(distributedLock, is(nullValue()));
assertThat(queryResult.getColumnCount(), is(1));
assertThat((Blob) QueryResultUtil.getValue(resultSet, 1), is(blob));
assertThat(aggregationDistinctQueryResult.getValue("order_id", Object.class), is((Object) 10)); assertThat(aggregationDistinctQueryResult.getValue("a", Object.class), is((Object) 10));
assertThat(distinctQueryResult.getColumnIndex("order_id"), is(1));
assertThat((byte[]) QueryResultUtil.getValue(resultSet, 1), is(bytes));
assertThat(actual.size(), is(2)); assertThat(actual.iterator().next().getColumnCount(), is((Object) 5));
assertThat(normalizedGroupName, is("com-guosen-zebra-hello1-service"));
assertTrue(queryRow1.equals(queryRow));
assertThat(aggregationDistinctQueryResult.getColumnLabel(3), is("a")); assertThat(aggregationDistinctQueryResult.getColumnLabel(1), is("order_id"));
assertThat(queryResult.getColumnLabel(1), is("order_id"));
assertTrue(distinctQueryResult.wasNull());
assertTrue(distinctQueryMetaData.isDerivedCountColumnIndex(3));
assertThat(aggregationDistinctQueryResult.getColumnIndex("c"), is(2));
assertThat(distinctQueryResult.getColumnLabel(2), is("order_id"));
assertTrue(aggregationDistinctQueryResult.wasNull());
assertThat(aggregationDistinctQueryResult.getCalendarValue(1, Object.class, Calendar.getInstance()), is((Object) 10));
assertThat(aggregationDistinctQueryResult.getCalendarValue("order_id", Object.class, Calendar.getInstance()), is((Object) 10));
assertThat((Time) QueryResultUtil.getValue(resultSet, 1), is(new Time(currentTime)));
assertThat((BigDecimal) QueryResultUtil.getValue(resultSet, 1), is(BigDecimal.TEN));
assertThat(distinctQueryResult.getColumnLabel(1), is("order_id"));
assertThat(e.getMessage(), is("Failed to load properties file, file name : localCache; nested exception is java.io.IOException: file not found"));
assertThat(queryResultMetaData.getColumnCount(), is(1));
assertTrue(logger.getClass().getName(), Slf4jLogger.class.isInstance(logger)); assertEquals( "[main] INFO " + getClass().getName() + " - test log\\n", new String(buffer.toByteArray(), StandardCharsets.UTF_8));
assertEquals(3728699739546630719L, XxHash64.apply("foo"));
assertFalse(MyRunnable.ran); assertTrue(MyRunnable.ran);
assertNotEquals(contextClassLoader, proxyClass.getClassLoader()); assertEquals(proxyLoader, proxyClass.getClassLoader());
assertFalse(MyRunnable2.ran); assertTrue(MyRunnable2.ran);
assertFalse(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName()))); assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + "$1"))); assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + "$1$2"))); assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + "$15$222")));
assertEquals(annotatedType.hashCode(), annotatedType.hashCode()); assertEquals(annotatedType.hashCode(), wrapped.hashCode());
assertNull(MyMain.args); assertArrayEquals(new String[]{ "--other", "yes", "and", "args" }, MyMain.args);
assertNotNull(obj); assertFalse(obj.called);
assertNotNull(bb);
assertNotNull(desc); assertNotNull(analytic);
assertEquals(ring.length(), 1); assertEquals(ring.tail(), 100); assertEquals(ring.get(100), (Integer) 100); assertEquals(ring.tail(), 123); assertEquals(ring.get(123), (Integer) 100);
assertEquals(ring.length(), 10); assertEquals(ring.count(), 8); assertEquals(list.size(), ring.count()); assertEquals(ringItem, listItem);
assertEquals(t, union.getDate()); assertEquals(t4, union.getNextDate());
assertEquals(PeriodType.DAY, type); assertEquals(PeriodType.MINUTE, type); assertEquals(PeriodType.SECOND, type);
assertEquals(1, fraction); assertEquals("1", string); assertEquals(2, fraction); assertEquals("2", string); assertEquals(4, fraction); assertEquals("4", string); assertEquals(8, fraction); assertEquals("08", string); assertEquals(64, fraction); assertEquals("064", string);
assertEquals(0, cache.size());
assertTrue(newSpan2.extendsSpan(newSpan) && newSpan.extendsSpan(newSpan2));
assertEquals(ring.length(), 10); assertEquals(ring.count(), 8); assertEquals(map.size(), ring.count()); assertEquals(ringItem, mapItem);
assertEquals(13, week.getTradingDaysInMonth(dt1));
assertEquals(count, 0); assertEquals(count, 2);
assertEquals(result, ERROR); assertEquals(result, ERROR); assertEquals(result, ERROR); assertEquals(result, TOP);
assertEquals(result, ERROR); assertEquals(result, ERROR);
assertEquals(ring.length(), 10); assertEquals(ring.count(), 8); assertFalse(clone1 == clone2); assertTrue(Arrays.equals(clone1, clone2)); assertEquals(ring.get(100 + k), clone1[k]); assertEquals(ring.get(100 + k), clone2[k]);
assertEquals("2009-06-30T00:00:00.000", noZone(adjustedDate.toString())); assertEquals("2009-03-31T00:00:00.000", noZone(adjustedDate.toString()));
assertTrue(session.contains(test)); assertTrue(session.contains(test)); assertFalse(session.contains(test)); assertFalse(session.contains(test)); assertFalse(session.contains(test)); assertTrue(session.contains(test)); assertFalse(session.contains(test)); assertTrue(session.contains(test));
assertEquals(DictOne.ONE.name(), "ONE"); assertEquals(DictOne.TEST.name(), "TEST");
assertEquals("2009-04-01T00:00:00.000", noZone(adjustedDate.toString())); assertEquals("2009-01-01T00:00:00.000", noZone(adjustedDate.toString()));
assertNotNull(array2); assertEquals(array2.length, 3); assertArrayEquals(array1, array2); assertFalse(array1 == array2);
assertEquals(ring.length(), 1); assertEquals(ring.head(), 100); assertEquals(ring.get(100), (Integer) 100); assertEquals(ring.head(), 123); assertEquals(ring.get(123), (Integer) 100);
assertEquals(millisInDay * 2, sessionMillis); assertEquals(millisInDay * 2, sessionMillis);
assertTrue(array.isEmpty()); assertTrue(isAdded); assertTrue(isAdded); assertEquals(array.size(), 2); assertFalse(isAdded); assertFalse(isAdded); assertEquals(array.size(), 2); assertEquals(count1, 2); assertEquals(count2, 2); assertTrue(isRemoved); assertEquals(array.size(), 1); assertFalse(isRemoved); assertEquals(array.size(), 1); assertTrue(isRemoved); assertEquals(array.size(), 0); assertFalse(isRemoved); assertEquals(array.size(), 0);
assertNotNull(schema); assertEquals("PivotPoint", schema.getNetworkName()); assertEquals(8, schema.getNodeDescriptors().size()); assertTrue(!publishers.isEmpty()); assertEquals(7, publishers.size()); assertTrue(!and.getSpecifier().equals("PP_R2"));
assertEquals(t3, inter.getDate()); assertEquals(t2, inter.getNextDate());
assertThat(valueOf(instance.getFieldA()), is(5)); assertTrue(instance.getMemberClass() == Long.class);
assertThat(valueOf(instance.getFieldA()), is(5)); assertTrue(instance.getMemberClass() == Long.class);
assertTrue("should contain self ref", result.indexOf("(this") > -1);
assertEquals("Created incorrect PauselessHashMap", 0, hm2.size());
assertThat(valueOf(instance.getFieldA()), is(5));
assertTrue("Returned false for new map", new PauselessHashMap().isEmpty()); assertTrue("Returned true for non-empty", !hm.isEmpty());
assertThat(valueOf(instance.getFieldA()), is(5));
assertTrue("Returned incorrect size", hm.size() == (objArray.length + 2));
assertEquals(expected, map.hashCode()); assertEquals(expected, map.hashCode());
assertTrue("Returned false for valid value", hm .containsValue(new Integer(875))); assertTrue("Returned true for invalid valie", !hm .containsValue(new Integer(-9)));
assertEquals(encoded, encoded1);
assertEquals("a pr", expr.toString()); assertEquals("a pr and b pr", expr.toString());
assertEquals("", format.format()); assertEquals("a,b,c", format.format("a", "b", "c")); assertEquals("\\"x,y\\",z", format.format("x,y", "z"));
assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy)); assertNotSame(formatWithHeader.getHeader(), headerCopy);
assertEquals(test[1], ShortUUID.encode(test[0]));
assertTrue(p.ownerDocument() == doc); assertTrue(doc.ownerDocument() == doc); assertNull(doc.parent());
assertEquals(2, orderBy.items().length);
assertEquals("<div><p><#text></#text></p></div>", accum.toString());
assertEquals("<div>One <a href=\\"/\\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()));
assertEquals(dt,DateTimes.tryParseLocalDateTime("2014-11-01T10:01:01")); assertEquals(dt,DateTimes.tryParseLocalDateTime("2014-11-01 10:01:01"));
assertEquals("value",o.get("p"));
assertEquals("<section>\\n <div></div>\\n</section>", doc.select("section").first().outerHtml());
assertEquals(privateKeyBase64, RSA.encodePrivateKey(privateKey)); assertEquals(publicKeyBase64, RSA.encodePublicKey(publicKey));
assertEquals("a", left.getName()); assertEquals("b", right.getName()); assertEquals(expr.toString(), text);
assertFalse(right.equals(null)); assertFalse(right.equals("A String Instance")); assertEquals(right, right); assertEquals(right, left); assertEquals(left, right); assertEquals(right.hashCode(), right.hashCode()); assertEquals(right.hashCode(), left.hashCode());
assertEquals("file:/etc/password", one.absUrl("href")); assertEquals("file:/var/log/messages", two.absUrl("href"));
assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html());
assertEquals("<html><head></head><body><div> \\n<p>Hello\\n there</p></div></body></html>", doc.html());
assertNotNull(targetTable); assertEquals(1, changes.size()); assertTrue(changes.get(0) instanceof ColumnDefinitionChange); assertTrue(change.isUniqueChanged()); assertNull(changes.firstOrNull(ColumnDefinitionChange.class));
assertEquals("a", left.getName()); assertEquals("b", right.getName()); assertEquals(expr.toString(), text);
assertEquals( Character.valueOf('#'), formatWithCommentStart.getCommentStart());
assertEquals(2, select.items().length);
assertEquals(2, executor.queryList(options).list.size()); assertEquals(0, executor.queryList(options).list.size()); assertEquals(1, records.size()); assertEquals("book1", records.get(0).getString("title")); assertEquals(1, records.size()); assertEquals("book2", records.get(0).getString("title"));
assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN));
assertEquals(8, form.elements().size());
assertEquals("<script>one\\ntwo</script> \\n<style>three\\nfour</style>", doc.head().html());
assertEquals(4, params.size()); assertEquals("", params.get("a").get(0)); assertEquals("", params.get("b").get(0)); assertEquals("", params.get("c").get(0)); assertEquals("", params.get("d").get(0));
assertTrue(maxlen < 17); assertEquals(num, set.size());
assertEquals(3, parents.size()); assertEquals("div", parents.get(0).tagName()); assertEquals("body", parents.get(1).tagName()); assertEquals("html", parents.get(2).tagName());
assertEquals(Boolean.TRUE,eval("T(java.lang.Boolean).TRUE")); assertEquals(Boolean.TRUE,eval("T(Boolean).TRUE")); assertEquals(Boolean.TRUE,eval("T(Strings).isEmpty(\'\')"));
assertFalse(record.isSet("first")); assertTrue(recordWithHeader.isSet("first")); assertFalse(recordWithHeader.isSet("fourth"));
assertEquals("a", Strings.right("a", 10)); assertEquals("cde", Strings.right("abcde", 3));
assertTrue(record.isConsistent()); assertTrue(recordWithHeader.isConsistent()); assertFalse(recordWithHeader.isConsistent());
assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html()));
assertNotNull(Java.version());
assertEquals("nv1", np.get("np1"));
assertEquals("<p>Hello</p>\\n<p>There</p>", divs.html());
assertEquals(RESULT.length, records.size()); assertTrue(records.size() > 0); assertArrayEquals(RESULT[i], records.get(i).values());
assertEquals(2, params.size()); assertEquals("b", params.get("a").get(0)); assertEquals("e", params.get("a").get(1)); assertEquals("d",params.get("c").get(0));
assertEquals(0, r.pos());
assertEquals(1,c.size()); assertEquals("v",c.get(0));
assertEquals("foo", classVal);
assertEquals("Hello there. What\'s \\n\\n that?", doc.text());
assertEquals("there", doc.select("p").eq(1).text()); assertEquals("there", doc.select("p").get(1).text());
assertEquals(3, records.size()); assertArrayEquals(new String[]{"a", "b", "c"}, records.get(0).values()); assertArrayEquals(new String[]{"1", "2", "3"}, records.get(1).values()); assertArrayEquals(new String[]{"x", "y", "z"}, records.get(2).values());
assertEquals("s", expr.nodes()[2].literal());
assertEquals("<html>\\n <head>\\n <title>Format test</title>\\n </head>\\n <body>\\n <div>\\n <p>\\n Hello \\n <span>\\n jsoup \\n <span>users</span>\\n </span>\\n </p>\\n <p>Good.</p>\\n </div>\\n </body>\\n</html>", doc.html());
assertEquals("1 + 2.0 + -1 + -1.3", expr.toString());
assertEquals("a", left.getName()); assertEquals("b", right.getName()); assertEquals(expr.toString(), text);
assertEquals("Hello there world", doc.select("div > *").text());
assertEquals(5, divChildren.size()); assertEquals("Text 1 ", tn1.text()); assertEquals("<div id=\\"1\\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\\"2\\">Text 1 updated" +"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()));
assertEquals("One", r.consumeLetterSequence()); assertEquals(" &", r.consumeTo("bar;")); assertEquals("bar", r.consumeLetterSequence()); assertEquals("; qux", r.consumeToEnd());
assertEquals(2, els.size()); assertEquals("one", els.val()); assertEquals("two", els.last().val()); assertEquals("three", els.first().val()); assertEquals("three", els.last().val()); assertEquals("<textarea>three</textarea>", els.last().outerHtml());
assertEquals(Quote.ALL, formatWithQuotePolicy.getQuotePolicy());
assertArrayEquals(header, formatWithHeader.getHeader()); assertNotSame(header, formatWithHeader.getHeader()); assertFalse(Arrays.equals(formatWithHeader.getHeader(), header));
assertEquals("qqq", Strings.lowerUnderscore("QQQ")); assertEquals("q_qq", Strings.lowerUnderscore("qQq")); assertEquals("q_qq", Strings.lowerUnderscore("qQQ"));
assertTrue(ps.is("[title=foo]")); assertFalse(ps.is("[title=bar]"));
assertTrue(0 == ps.get(0).elementSiblingIndex()); assertTrue(1 == ps.get(1).elementSiblingIndex()); assertTrue(2 == ps.get(2).elementSiblingIndex());
assertTrue(records.hasNext()); assertEquals(record.get(0), record.get("A")); assertEquals(record.get(1), record.get("B")); assertEquals(record.get(2), record.get("C")); assertFalse(records.hasNext());
assertTrue(e instanceof IllegalStateException);
assertEquals("<div><div class=\\"head\\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<div><div class=\\"head\\"><div><div class=\\"foo\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); assertEquals(ret, p);
assertEquals(unescaped, Entities.unescape(escaped));
assertEquals("Before", div.child(0).text()); assertEquals("Hello", div.child(1).text());
assertEquals(s.raw(), "x");
assertEquals(Character.valueOf('&'), formatWithEscape.getEscape());
assertEquals(1, ps.size()); assertEquals(2, containers.size()); assertEquals("div", containers.get(0).tagName()); assertEquals("li", containers.get(1).tagName()); assertEquals("123", containers.get(1).text());
assertEquals(p1, p2);
assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html()));
assertEquals(d,DateTimes.tryParseLocalDate("2014-11-01")); assertEquals(d,DateTimes.tryParseLocalDate("2014-11-01T10:01:01")); assertEquals(d,DateTimes.tryParseLocalDate("2014-11-01 10:01:01"));
assertEquals(values[0], recordWithHeader.get("first")); assertEquals(values[1], recordWithHeader.get("second")); assertEquals(values[2], recordWithHeader.get("third"));
assertEquals(4, data.size()); assertEquals("one=two", data.get(0).toString()); assertEquals("three=four", data.get(1).toString()); assertEquals("three=five", data.get(2).toString()); assertEquals("six=seven", data.get(3).toString());
assertEquals(t,DateTimes.tryParseLocalTime("10:01:01")); assertEquals(LocalTime.of(10, 01, 00),DateTimes.tryParseLocalTime("10:01")); assertEquals(t,DateTimes.tryParseLocalTime("2014-11-01T10:01:01")); assertEquals(t,DateTimes.tryParseLocalTime("2014-11-01 10:01:01"));
assertEquals("<div><p></p> <p></p></div>", doc.body().html());
assertTrue(Strings.isNotBlank(" x ")); assertFalse(Strings.isNotBlank(" ")); assertFalse(Strings.isNotBlank(null)); assertFalse(Strings.isNotBlank(""));
assertNull(recordWithHeader.get(Integer.MAX_VALUE));
assertTrue(eval instanceof CombiningEvaluator.Or); assertEquals(3, or.evaluators.size()); assertTrue(innerEval instanceof CombiningEvaluator.And); assertEquals(2, and.evaluators.size()); assertTrue(and.evaluators.get(0) instanceof Evaluator.Tag); assertTrue(and.evaluators.get(1) instanceof StructuralEvaluator.Parent);
assertEquals(2, groupBy.items().length);
assertEquals(s, ScelParser.parse(s).toString());
assertEquals("<html>\\n <head>\\n <title>Format test</title>\\n </head>\\n <body>\\n <div>\\n <p>Hello <span>jsoup <span>users</span></span></p>\\n <p>Good.</p>\\n </div>\\n </body>\\n</html>", doc.html());
assertEquals('!', formatWithDelimiter.getDelimiter());
assertEquals(String.class, Types.getActualTypeArgument(SubSub.class, list.getGenericReturnType()));
assertEquals("<div> jsoup </div>", doc.body().html());
assertNull(em); assertNotNull(em);
assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));
assertEquals("/context/path1", Servlets.getRequestPathFromUri(url, "")); assertEquals("/path1", Servlets.getRequestPathFromUri(url, "/context")); assertEquals("/context/path1", Servlets.getRequestPathFromUri(url, "")); assertEquals("/path1", Servlets.getRequestPathFromUri(url, "/context"));
assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html())); assertTrue(node instanceof TextNode); assertEquals("Two ", ((TextNode) node).text()); assertEquals(node, twoText); assertEquals(node.parent(), doc.select("div").first());
assertEquals("a",condition.getName()); assertEquals("b",trueValue.getName()); assertEquals("c",falseValue.getName());
assertEquals("a", left.getName()); assertEquals(3, right.getValue()); assertEquals(expr.toString(), text);
assertEquals(Boolean.TRUE,ok.getValue(new TestedBean())); assertEquals(new Integer(100), intValue.getValue(new TestedBean()));
assertEquals(test[0], ShortUUID.decode(test[1]));
assertEquals(-1, r.nextIndexOf("]]>"));
assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString());
assertEquals("Hello &amp= &", Entities.unescape(text, true)); assertEquals("Hello &= &", Entities.unescape(text)); assertEquals("Hello &= &", Entities.unescape(text, false));
assertTrue(params.isEmpty()); assertTrue(params.isEmpty());
assertEquals(values[i], value);
assertNotNull(entity.getId()); assertTrue(isexist);
assertEquals("div1", div.id()); assertNull(doc.getElementById("none")); assertEquals("div", div2.tagName()); assertEquals("span", span.tagName());
assertEquals("q=jsoup", dataList.get(0).toString()); assertEquals(Connection.Method.POST, con2.request().method());
assertEquals(9, els.size()); assertEquals(2, forms.size()); assertTrue(forms.get(0) != null); assertTrue(forms.get(1) != null); assertEquals("1", forms.get(0).id()); assertEquals("2", forms.get(1).id());
assertEquals(in, toEnd); assertTrue(r.isEmpty());
assertNull(func.getPrefix()); assertEquals("a",func.getName()); assertEquals("p", func.getPrefix()); assertEquals("a", func.getName()); assertEquals("p", func.getPrefix()); assertEquals("a", func.getName());
assertEquals("b", eval("[\'a\']", m)); assertEquals("b", eval("o[\'a\']", vars));
assertEquals(1, joins.length); assertEquals("User", joins[0].getRelation()); assertEquals("u", joins[0].getAlias()); assertEquals(1, joins.length); assertEquals("User", joins[0].getRelation()); assertEquals("u", joins[0].getAlias()); assertEquals(1, joins.length); assertEquals("User", joins[0].getRelation()); assertEquals("u", joins[0].getAlias());
assertEquals("there & now > Hello", div.text()); assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()));
assertEquals(1, eval("a[0]",vars)); assertEquals(1, eval("a[index]",vars)); assertEquals(2, eval("a[index + 1]",vars)); assertEquals(1, eval("m[\'a\'][0]",vars)); assertEquals("str", eval("m[\'s\']",vars)); assertEquals("str", eval("m[p]",vars));
assertNotEquals(right, left);
assertTrue(Strings.equalsIgnoreCase(null, null));
assertEquals("One12", r.consumeLetterThenDigitSequence());
assertEquals("123", mc.getId()); assertEquals("test1", m3.getId1()); assertEquals("test2", m3.getId2());
assertEquals("null", formatWithNullString.getNullString());
assertNull(recordWithHeader.get(Integer.MIN_VALUE));
assertEquals(2, joins.length); assertEquals("User1", joins[0].getRelation()); assertEquals("u1", joins[0].getAlias()); assertEquals("User2", joins[1].getRelation()); assertEquals("u2", joins[1].getAlias());
assertEquals(doc.html(), clone.html()); assertEquals("<!DOCTYPE html><html><head><title>Doctype test</title></head><body></body></html>", TextUtil.stripNewlines(clone.html()));
assertTrue(r.matchesIgnoreCase("O")); assertTrue(r.matchesIgnoreCase("o"));
assertEquals("hello", new String(IO.readByteArray(r)));
assertTrue(eval instanceof CombiningEvaluator.Or); assertEquals(2, or.evaluators.size()); assertEquals("ol :ImmediateParent.foo", andLeft.toString()); assertEquals(2, andLeft.evaluators.size()); assertEquals("li :prevli :ImmediateParentol", andRight.toString()); assertEquals(2, andLeft.evaluators.size());
assertTrue(p.getIndex() instanceof AstString); assertTrue(p.getIndex() instanceof AstIdentifier); assertTrue(p.getIndex() instanceof AstProperty);
assertEquals("a", left.getName()); assertEquals("b", right.getName());
assertEquals(values[0], record.get(0)); assertEquals(values[1], record.get(1)); assertEquals(values[2], record.get(2));
assertEquals(3,m.getId());
assertNull(recordWithHeader.get("fourth"));
assertEquals(2, params.size()); assertEquals("b", params.get("a").get(0)); assertEquals("d e",params.get("c").get(0));
assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", e.getMessage()); assertTrue(threw);
assertEquals("<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>", doc.html());
assertEquals("name()", expr.nodes()[2].literal()); assertEquals("user.name()", expr.nodes()[6].literal());
assertEquals(true, Strings.isEmpty(null)); assertEquals(true, Strings.isEmpty("")); assertEquals(false, Strings.isEmpty(" ")); assertEquals(false, Strings.isEmpty("foo")); assertEquals(false, Strings.isEmpty(" foo "));
assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines()); assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());
assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()));
assertTrue(iterator.hasNext()); assertArrayEquals(new String[]{"a", "b", "c"}, iterator.next().values()); assertArrayEquals(new String[]{"1", "2", "3"}, iterator.next().values()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertArrayEquals(new String[]{"x", "y", "z"}, iterator.next().values()); assertFalse(iterator.hasNext());
assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html()); assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html());
assertTrue(div.hasText()); assertTrue(ps.first().hasText()); assertFalse(ps.last().hasText());
assertEquals("Hello There. Here is some text.", text);
assertTrue(r.containsIgnoreCase("two")); assertTrue(r.containsIgnoreCase("three")); assertFalse(r.containsIgnoreCase("one"));
assertEquals("&#x210c1;", escapedAscii); assertEquals(text, escapedUtf);
assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()));
assertNotNull(locale); assertEquals("en", locale.toString()); assertNotNull(locale); assertEquals("zh", locale.toString()); assertNotNull(locale); assertEquals("zh_CN", locale.toString());
assertEquals(p1, p2);
assertEquals("<div>One Two</div>", TextUtil.stripNewlines(doc.body().html())); assertTrue(node == null);
assertEquals("a", left.getName()); assertEquals("b", right.getName()); assertEquals(expr.toString(), text);
assertEquals(false, Strings.isNotEmpty(null)); assertEquals(false, Strings.isNotEmpty("")); assertEquals(true, Strings.isNotEmpty(" ")); assertEquals(true, Strings.isNotEmpty("foo")); assertEquals(true, Strings.isNotEmpty(" foo "));
assertEquals("a", left.getName()); assertEquals("b", right.getName()); assertEquals(expr.toString(), text);
assertEquals("a is null", expr.toString()); assertEquals("a is not null", expr.toString()); assertEquals("a is null and b is not null", expr.toString()); assertEquals("( a is null ) and ( b is not null )", expr.toString());
assertEquals("key=\\"value &amp;\\"", attr.html()); assertEquals(attr.html(), attr.toString());
assertEquals("div", doc.select("div[k" + s + "]").first().tagName()); assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName());
assertEquals(1, div1.size()); assertEquals("1", div1.first().id()); assertEquals(1, div2.size()); assertEquals("2", div2.first().id());
assertEquals("two three", p.text()); assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()));
assertEquals(1, authors.size()); assertEquals("none", authors.get(0).get("info", AuthorInfo.class).getAddress()); assertEquals(1, authors.size()); assertEquals("Author2", authors.get(0).getString("name"));
assertEquals("a", name.alias()); assertEquals("b", name.literal());
assertFalse(record.isMapped("first")); assertTrue(recordWithHeader.isMapped("first")); assertFalse(recordWithHeader.isMapped("fourth"));
assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html()); assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html());
assertTrue(ps.hasAttr("class")); assertFalse(ps.hasAttr("style"));
assertTrue(divs.hasText()); assertFalse(doc.select("div + div").hasText());
assertNull(br.readLine()); assertEquals("",br.readLine()); assertNull(br.readLine()); assertEquals(0, br.getCurrentLineNumber()); assertEquals("foo",br.readLine()); assertEquals(1, br.getCurrentLineNumber()); assertEquals("",br.readLine()); assertEquals(2, br.getCurrentLineNumber()); assertEquals("hello",br.readLine()); assertEquals(3, br.getCurrentLineNumber()); assertNull(br.readLine()); assertEquals(3, br.getCurrentLineNumber());
assertNotNull(records.get(0).get("author")); assertNotNull(records2.get(0).get("tags"));
assertFalse(gtP.test(v)); assertFalse(gtP.test(v - 1)); assertTrue(gtP.test(v + 1)); assertEquals(gt(v), gtP); assertEquals(gt(v).hashCode(), gtP.hashCode()); assertNotEquals(lt(v), gtP); assertNotEquals(gt(v + 1), gtP); assertEquals(gtP.toString(), "> 100");
assertTrue(eqP.test(v)); assertFalse(eqP.test(v - 1)); assertFalse(eqP.test(v + 1)); assertEquals(eq(v), eqP); assertEquals(eq(v).hashCode(), eqP.hashCode()); assertNotEquals(lt(v), eqP); assertNotEquals(eq(v + 1), eqP); assertEquals(eqP.toString(), "= 100");
assertEquals( new And<>(leaves("her", "ero", "ro ")), gram.extract(automaton));
assertEquals( new And<>(leaves("her", "ero", "ro ", "o o", " of", "of ", "f l", " le", "leg", "ege", "gen", "end")), gram.extract(automaton)); assertEquals(True.<String> instance(), gram.extract(automaton)); assertEquals(True.<String> instance(), gram.extract(automaton)); assertEquals(True.<String> instance(), gram.extract(automaton)); assertEquals(new Leaf<>("her"), gram.extract(automaton));
assertEquals(expected.toString(), actual.toString());
assertEquals(0, listener.getLatencyStats(Collections.singleton(42D)).size());
assertEquals(msg, exp.getValue(), hackExp.getValue(), Math.ulp(exp.getValue()));
assertEquals(expected.toString(), actual.toString());
assertFalse(ltP.test(v)); assertFalse(ltP.test(v + 1)); assertTrue(ltP.test(v - 1)); assertEquals(lt(v), ltP); assertEquals(lt(v).hashCode(), ltP.hashCode()); assertNotEquals(lte(v), ltP); assertNotEquals(lt(v + 1), ltP); assertEquals(ltP.toString(), "< 100");
assertThat(builder, instanceOf(DegradedRouterQueryBuilder.class)); assertNotNull(qb.systemLoad()); assertEquals(1, qb.conditionStream().count()); assertEquals(DegradedConditionType.cpu, cond.type()); assertThat(cond.query(), instanceOf(MatchPhraseQueryBuilder.class)); assertEquals(ConditionDefinition.lt, cond.definition()); assertEquals(70, cond.value()); assertThat(qb.fallback(), instanceOf(MatchNoneQueryBuilder.class)); assertEquals(expected, qb);
assertTrue(lteP.test(v)); assertFalse(lteP.test(v + 1)); assertTrue(lteP.test(v - 1)); assertEquals(lte(v), lteP); assertEquals(lte(v).hashCode(), lteP.hashCode()); assertNotEquals(lt(v), lteP); assertNotEquals(lte(v + 1), lteP); assertEquals(lteP.toString(), "<= 100");
assertTrue(gteP.test(v)); assertFalse(gteP.test(v - 1)); assertTrue(gteP.test(v + 1)); assertEquals(gte(v), gteP); assertEquals(gte(v).hashCode(), gteP.hashCode()); assertNotEquals(lt(v), gteP); assertNotEquals(gte(v + 1), gteP); assertEquals(gteP.toString(), ">= 100");
assertEquals(1.1 + 2.5 + 4.7, array5Vector.sumOfValues(), Double.MIN_NORMAL);
assertNotNull("Topology created is null.",topology); assertEquals("Topology created is not a ThreadsTopology.",ThreadsTopology.class,topology.getClass());
assertEquals("Number of threads is not set correctly.", numThreads, ThreadsEngine.getNumberOfThreads(),0);
assertEquals(1, emptyVector.getArrayRef().length); assertEquals(1.0, emptyVector.getArrayRef()[0], 0.0); assertEquals(6, emptyVector.getArrayRef().length); assertEquals(2, emptyVector.numNonZeroEntries()); assertEquals(5.5, emptyVector.getArrayRef()[5], 0.0);
assertEquals(0, emptyVector.numNonZeroEntries()); assertEquals(3, array5Vector.numNonZeroEntries());
assertNotNull("Unexpected end of input stream list.",inStream); assertTrue("File content is incorrect.",contents.contains(inputRead)); assertNull("Call getNextInputStream after the last file did not return null.",streamSource.getNextInputStream());
assertNotNull("ProcessingItem created is null.",pi); assertEquals("ProcessingItem created is not a ThreadsProcessingItem.",ThreadsProcessingItem.class,pi.getClass()); assertEquals("Parallelism of PI is not ",parallelism,pi.getParallelism(),0);
assertNotNull("EntranceProcessingItem created is null.",entrancePi); assertEquals("EntranceProcessingItem created is not a SimpleEntranceProcessingItem.",SimpleEntranceProcessingItem.class,entrancePi.getClass()); assertSame("EntranceProcessor is not set correctly.",entranceProcessor, entrancePi.getProcessor());
assertNotNull("List of PI instances is null.",instances); assertEquals("Number of instances does not match parallelism.",parallelism,instances.size(),0); assertNotNull("Instance "+i+" is null.",instances.get(i)); assertEquals("Instance "+i+" is not a ThreadsWorkerProcessingItem.",ThreadsProcessingItemInstance.class,instances.get(i).getClass());
assertEquals(5, array5Vector.getArrayRef()[2], 0.0); assertEquals(1, emptyVector.getArrayRef()[0], 0.0);
assertNotNull("EntranceProcessingItem created is null.",entrancePi); assertEquals("EntranceProcessingItem created is not a ThreadsEntranceProcessingItem.",ThreadsEntranceProcessingItem.class,entrancePi.getClass()); assertSame("EntranceProcessor is not set correctly.",entranceProcessor, entrancePi.getProcessor());
assertTrue(arrayRef != emptyVector.getArrayCopy()); assertThat(arrayRef, is(equalTo(emptyVector.getArrayCopy()))); assertTrue(arrayRef != array5Vector.getArrayCopy()); assertThat(arrayRef, is(equalTo(array5Vector.getArrayCopy())));
assertEquals("ThreadsEngine was not shutdown properly.", 0, ThreadsEngine.getNumberOfThreads());
assertNotNull("Topology created is null.",topology); assertEquals("Topology created is not a SimpleTopology.",SimpleTopology.class,topology.getClass());
assertNotNull("ProcessingItem created is null.",pi); assertEquals("ProcessingItem created is not a SimpleProcessingItem.",SimpleProcessingItem.class,pi.getClass()); assertEquals("Parallelism of PI is not 1",1,pi.getParallelism(),0);
assertThat(emptyVector.getArrayRef(), notNullValue()); assertTrue(emptyVector.getArrayRef() == emptyVector.getArrayRef()); assertEquals(5, array5Vector.getArrayRef().length);
assertNotNull("Unexpected end of input stream list.",inStream); assertTrue("File content is incorrect.",contents.contains(inputRead)); assertNull("Call getNextInputStream after the last file did not return null.",streamSource.getNextInputStream());
assertNotNull("ProcessingItem created is null.",pi); assertEquals("ProcessingItem created is not a SimpleProcessingItem.",SimpleProcessingItem.class,pi.getClass()); assertEquals("Parallelism of PI is not ",parallelism,pi.getParallelism(),0);
assertEquals(pi.getProcessor(), processor); assertEquals(pi.getParallelism(), PARRALLELISM_HINT_2); assertEquals(pi.getId(), ID);
assertNotNull("ProcessingItem created is null.",pi); assertEquals("ProcessingItem created is not a ThreadsProcessingItem.",ThreadsProcessingItem.class,pi.getClass()); assertEquals("Parallelism of PI is not 1",1,pi.getParallelism(),0);
assertTrue("Destination object was not added in stream\'s destinations set.",found);
assertEquals(expected, actual);
assertEquals(5, results.size()); assertTrue(results.iterator().hasNext());
assertEquals(3, resultSetToMap.size()); assertEquals(new Integer(2), resultSetToMap.get("abs")); assertEquals(new Integer(1), resultSetToMap.get("airbags")); assertEquals(new Integer(1), resultSetToMap.get("gps"));
assertEquals("keys and values", expected, actual); assertEquals("key order", expectedKeysOrder, actualKeysOrder);
assertEquals(Car.CAR_ID, compositePersistence.getPrimaryKeyAttribute());
assertTrue(compositePersistence.supportsIndex(index1)); assertFalse(compositePersistence.supportsIndex(index2));
assertEquals( asSet(keyValue("Ford", car1), keyValue("Honda", car2), keyValue("Honda", car3)), attributeMetadata.getKeysAndValues().collect(toSet()) );
assertEquals(3, countOfDistinctKeys);
assertNotNull(expected); assertEquals("A KeyStatisticsAttributeIndex has not been added to the collection, and must be added first, to enable metadata to be examined for attribute: ATTRIBUTE", expected.getMessage());
assertFalse(predicate.test(redCar)); assertTrue(predicate.test(blueCar));
assertNotNull(expected); assertEquals("A SortedKeyStatisticsAttributeIndex has not been added to the collection, and must be added first, to enable metadata to be examined for attribute: ATTRIBUTE", expected.getMessage());
assertEquals(Car.CAR_ID, wrappingPersistence.getPrimaryKeyAttribute());
assertTrue(isFlagDisabled(queryOptions, "a")); assertTrue(isFlagDisabled(queryOptions, "b")); assertFalse(isFlagDisabled(queryOptions, "c"));
assertEquals("keys and values", expected, actual); assertEquals("key order", expectedKeysOrder, actualKeysOrder);
assertNull(unexpected);
assertEquals(asList("a", "b"), GeneratedAttributeSupport.valueOf(new String[]{"a", "b"}));
assertTrue(StringContains.containsFragment("THIS IS A TEST", "THIS")); assertTrue(StringContains.containsFragment("THIS IS A TEST", "TEST")); assertTrue(StringContains.containsFragment("THIS IS A TEST", "IS A")); assertFalse(StringContains.containsFragment("THIS IS A TEST", "FOO")); assertTrue(StringContains.containsFragment("THIS IS A TEST", "")); assertTrue(StringContains.containsFragment("", "")); assertFalse(StringContains.containsFragment("", "TEST"));
assertTrue(isFlagEnabled(queryOptions, "a")); assertTrue(isFlagEnabled(queryOptions, "b")); assertFalse(isFlagEnabled(queryOptions, "c"));
assertNotEquals(Integer.MAX_VALUE, results.getRetrievalCost()); assertEquals(expectedCarIds, actualCarIds); assertEquals(expectedCarIds, actualCarIds);
assertEquals(connectionManager, carFeaturesOffHeapIndex.getConnectionManager(queryOptions));
assertTrue(supportsQueryInternal( backingIndexSupportsQuery(lessThan(Car.PRICE, 5000.0)), in(Car.MANUFACTURER, "Ford", "Honda"), and(lessThan(Car.PRICE, 5000.0), in(Car.MANUFACTURER, "Ford", "Honda")), lessThan(Car.PRICE, 5000.0), noQueryOptions() ));
assertSame(input, GeneratedAttributeSupport.valueOf(input));
assertEquals(input, output);
assertTrue(wrappingPersistence.supportsIndex(NavigableIndex.onAttribute(Car.MANUFACTURER))); assertFalse(wrappingPersistence.supportsIndex(DiskIndex.onAttribute(Car.MANUFACTURER)));
assertEquals(Integer.valueOf(4), attributeMetadata.getCountOfDistinctKeys());
assertFalse(supportsQueryInternal( backingIndexSupportsQuery(in(Car.MANUFACTURER, "Ford", "Honda")), or(in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MODEL, "Focus", "Civic")), in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MANUFACTURER, "Ford", "Honda"), noQueryOptions() ));
assertFalse(supportsQueryInternal( backingIndexSupportsQuery(lessThan(Car.PRICE, 5000.0)), and(in(Car.MANUFACTURER, "Ford", "Honda"), equal(Car.COLOR, Car.Color.BLUE)), and(lessThan(Car.PRICE, 5000.0), in(Car.MANUFACTURER, "Ford", "Honda"), equal(Car.COLOR, Car.Color.RED)), lessThan(Car.PRICE, 5000.0), noQueryOptions() ));
assertEquals( asSet("Accord", "Avensis", "Civic", "Focus", "Fusion", "Hilux", "Insight", "M6", "Prius", "Taurus"), attributeMetadata.getDistinctKeys().collect(toSet()) );
assertTrue(objectStore instanceof CollectionWrappingObjectStore); assertEquals(backingCollection, ((CollectionWrappingObjectStore)objectStore).getBackingCollection());
assertNotNull(carFeaturesOffHeapIndex);
assertSame(i1, i2); assertSame(i1, i3); assertNotSame(i3, i4); assertNotSame(i4, i5); assertSame(i5, i6); assertSame(i6, i7);
assertEquals(2, results.size()); assertTrue(results.iterator().hasNext());
assertEquals(2, results.size()); assertTrue(results.iterator().hasNext());
assertEquals(0, results.size()); assertFalse(results.iterator().hasNext());
assertThat(iterator.next(), is("abc"));
assertEquals(Integer.valueOf(2), attributeMetadata.getCountForKey("BMW"));
assertEquals(Integer.valueOf(2), attributeMetadata.getCountForKey("BMW"));
assertNotNull(CompoundQuery.fromAndQueryIfSuitable(and(equal(Car.DOORS, 5), equal(Car.MANUFACTURER, "Ford")))); assertNull(CompoundQuery.fromAndQueryIfSuitable(and(equal(Car.DOORS, 5), in(Car.MANUFACTURER, "Ford", "Honda"))));
assertFalse(supportsQueryInternal( backingIndexSupportsQuery(in(Car.MODEL, "Focus", "Civic")), in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MANUFACTURER, "Ford", "Honda"), noQueryOptions() ));
assertEquals(1, attributes.size());
assertSame(input, GeneratedAttributeSupport.valueOf(input));
assertTrue(supportsQueryInternal( backingIndexSupportsQuery(in(Car.MANUFACTURER, "Ford", "Honda")), in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MANUFACTURER, "Ford", "Honda"), in(Car.MANUFACTURER, "Ford", "Honda"), noQueryOptions() ));
assertEquals(Integer.valueOf(4), sortedAttributeMetadata.getCountOfDistinctKeys());
assertEquals(objectStore, result);
assertEquals( asList(keyValue("Ford", car1), keyValue("Honda", car3), keyValue("Toyota", car2)), attributeMetadata.getKeysAndValues().collect(toList()) ); assertEquals( asList(keyValue("Ford", car1), keyValue("Honda", car3)), attributeMetadata.getKeysAndValues("Alpha", true, "Toyota", false).collect(toList()) );
assertEquals(0, results.size()); assertFalse(results.iterator().hasNext());
assertEquals(5, results.size()); assertTrue(results.iterator().hasNext());
assertEquals(3, resultSetToMap.size()); assertEquals("gps", entry.getKey()); assertEquals(1, entry.getValue()); assertEquals("airbags", entry.getKey()); assertEquals(1, entry.getValue()); assertEquals("abs", entry.getKey()); assertEquals(2, entry.getValue());
assertEquals( asList(keyValue("Toyota", car2), keyValue("Honda", car3), keyValue("Ford", car1)), attributeMetadata.getKeysAndValuesDescending().collect(toList()) ); assertEquals( asList(keyValue("Honda", car3), keyValue("Ford", car1)), attributeMetadata.getKeysAndValuesDescending("Alpha", true, "Toyota", false).collect(toList()) );
assertNotNull(expected); assertEquals("Unable to determine if table exists: foo", expected.getMessage()); assertNotNull(expected.getCause()); assertEquals("expected_exception", expected.getCause().getMessage());
assertEquals( asSet(frequency("Ford", 6), frequency("BMW", 2), frequency("Toyota", 6), frequency("Honda", 6)), sortedAttributeMetadata.getFrequencyDistribution().collect(toSet()) );
assertEquals("FOO", query.getValue());
assertEquals( asList(frequency("BMW", 2), frequency("Ford", 6), frequency("Honda", 6), frequency("Toyota", 6)), sortedAttributeMetadata.getFrequencyDistribution().collect(toList()) );
assertEquals(1, attributes.size());
assertEquals(75, indexedCollection.retrieve(and(equal(Car.MANUFACTURER, "Ford"), between(Car.CAR_ID, 2, 4)), queryOptions).getRetrievalCost()); assertEquals(2147483647, indexedCollection.retrieve(and(equal(Car.MANUFACTURER, "Ford"), between(Car.CAR_ID, 2, 5)), queryOptions).getRetrievalCost());
assertNotNull(expected); assertEquals("Update returned error code: -1", expected.getMessage());
assertEquals( asList(frequency("Toyota", 6), frequency("Honda", 6), frequency("Ford", 6), frequency("BMW", 2)), sortedAttributeMetadata.getFrequencyDistributionDescending().collect(toList()) );
assertEquals(matchesRegex(Car.MODEL, "F.*"), matchesRegex(Car.MODEL, Pattern.compile("F.*")));
assertEquals(2, results.size()); assertTrue(results.iterator().hasNext());
assertNotNull(expected); assertEquals("A KeyStatisticsAttributeIndex has not been added to the collection, and must be added first, to enable metadata to be examined for attribute: ATTRIBUTE", expected.getMessage());
assertFalse(filter);
assertEquals("bar", mimicCreator.getKey());
assertFalse(filter);
assertTrue(filter);
assertEquals("\\u0410\\u0411", actual);
assertEquals(message, leap[1], TestUtils.invokeMethod(mainClass, leapYearCount, leap[0]));
assertEquals("0123", actual);
assertNotNull("Main.pseudoRandomStream(13) return null", stream); assertArrayEquals("Main.pseudoRandomStream(13).limit(10).toArray()", expected, actual.toArray(new Integer[10]));
assertEquals(testResults[i], checkSum);
assertEquals(new Integer(-52), min); assertEquals(new Integer(94), max);
assertEquals(message, expectedValue, actualValue);
assertArrayEquals(message, expected, actual);
assertEquals(message, "Expected non-negative number, got -100.0", e.getMessage());
assertEquals(expectedSql, TextUtils.join(", ", createIndexDefinition));
assertEquals(1, getCount()); assertEquals(0, getCount());
assertEquals(1, getCount());
assertEquals(8, tableNames.size()); assertFalse(tableNames.contains(ReActiveMasterTable.TABLE_NAME));
assertNull(model.id); assertEquals(1L, model.id, 0); assertEquals(1, getCount());
assertEquals(expectedSql, SQLiteUtils.createTableDefinition(testModelTableInfo));
assertEquals(100L, model.id, 0); assertEquals(100L, model.id, 0);
assertNull(migrationContainer.findMigrationPath(1, 2));
assertEquals(expectedSql, TextUtils.join(", ", createUniqueDefinitions));
assertNotNull(manager.getResults()); assertEquals(1, manager.getResults().size()); assertEquals("mountain_bike", manager.getResults().get(workItem.getId()).get("prediction")); assertTrue(manager.getResults().containsKey(workItem.getId()));
assertNotNull(trainingData);
assertNotNull(testData);
assertNotNull(crossValidationData);
assertEquals("utf-8", WARCRecord.extractHTTPHeaderCharset(httpHeaders)); assertEquals("iso-8859-4", WARCRecord.extractHTTPHeaderCharset(httpHeaders));
assertEquals("text/html", WARCRecord.extractHTTPHeaderContentType(httpHeaders)); assertEquals("application/xhtml+xml", WARCRecord.extractHTTPHeaderContentType(httpHeaders)); assertEquals("application/wordperfect5.1", WARCRecord.extractHTTPHeaderContentType(httpHeaders));
assertFalse("Output should not be busy", status.isOutputBusy()); assertTrue("Output should be paused", status.isOutputPaused()); assertEquals("Check number of characters left failed", 16, status.getNumberOfCharactersLeft()); assertFalse("Output should not be busy", status.isOutputBusy()); assertTrue("Output should be paused", status.isOutputPaused()); assertEquals("Check number of characters left failed", 10, status.getNumberOfCharactersLeft());
assertTrue("Should have some operations", fixture.operations().count() > 0); assertTrue("Should have completed all operations", fixture.operations().count() == 0);
assertEquals("Hello", converted); assertEquals("Hello", converted);
assertTrue(pitchBase > 0.0f); assertEquals(pitchBase + 1.0f, ss.getPitchBase(), 0.001); assertEquals(pitchBase, ss.getPitchBase(), 0.001);
assertTrue(toNativeConverter.convertsJavaType(ObjCObject.class)); assertTrue(fromNativeConverter.convertsJavaType(NSNumber.class));
assertEquals(0, fixture.operationCount().intValue());
assertNotNull(NSSpeechSynthesizer.CLASS.defaultVoice()); assertNotNull(NSSpeechSynthesizer.defaultVoice().getName()); assertNotNull(NSSpeechSynthesizer.synthesizerWithVoice(null)); assertEquals(NSSpeechSynthesizer.defaultVoice(), NSSpeechSynthesizer.synthesizerWithVoice(null).getVoice());
assertNull(converter.fromNative(nativeValue, null));
assertEquals(null, converter.toNative(null, null));
assertEquals(0, fixture.operationCount().intValue()); assertTrue("Not all should pass: " + firstFailure, 0 < firstFailure && firstFailure < numItems ); assertTrue(runnables.ops[firstFailure].isCancelled()||runnables.ops[firstFailure].isReady());
assertEquals(NSOperationQueue.NSOperationQueueDefaultMaxConcurrentOperationCount, fixture.maxConcurrentOperationCount().intValue()); assertEquals(new NSInteger(5), fixture.maxConcurrentOperationCount());
assertTrue(fortyTwo.equals(fortyTwoAlias)); assertTrue(fortyTwoAlias.equals(fortyTwo)); assertFalse(fortyTwo.equals(fortyThree)); assertFalse(fortyTwo.equals(null));
assertTrue(attribute.isKindOfClass(ObjCClass.CLASS.classWithName("NSNumber"))); assertFalse(attribute.isKindOfClass(ObjCClass.CLASS.classWithName("NSString"))); assertEquals(testMovieTimeScale, Rococoa.cast(attribute, NSNumber.class).intValue());
assertNotNull(string); assertEquals("Hello World", Foundation.toString(string));
assertEquals(defaultVoice, ss.getVoice()); assertEquals(defaultVoice.getIdentifier(), ss.voice()); assertEquals(NSVoice.BAD_NEWS, ss.voice()); assertEquals(new NSVoice(NSVoice.BAD_NEWS), ss.getVoice()); assertEquals(new NSVoice(NSVoice.BRUCE), ss.getVoice()); assertEquals(new NSVoice(NSVoice.FRED), ss.getVoice());
assertEquals(new ID(0), Foundation.sendReturnsID(new ID(0), "description"));
assertEquals(0, operationCount); assertEquals(1, resetCount); assertEquals(0, operationCount); assertEquals(1, resetCount); assertEquals(0, operationCount); assertEquals(1, resetCount); assertEquals(1, operationCount); assertEquals(2, resetCount); assertEquals(1, operationCount); assertEquals(2, resetCount);
assertNull(movie); assertEquals(-2000, error.code().intValue());
assertNull(thrown);
assertEquals(count, outstandingTasks.size()); assertTrue(fixture.isShutdown()); assertTrue(fixture.awaitTermination(5, TimeUnit.SECONDS)); assertTrue(fixture.isTerminated());
assertNull(converter.fromNative(nativeValue, null));
assertEquals(count, outstandingTasks.size()); assertTrue(fixture.isShutdown()); assertTrue(fixture.awaitTermination(10, TimeUnit.SECONDS));
assertTrue(fixture.isShutdown()); assertTrue(fixture.isTerminated());
assertTrue(fixture.operationCount().intValue() > 0); assertEquals(0, fixture.operationCount().intValue());
assertEquals(converted.id(), number.id()); assertEquals(45, converted.intValue()); assertEquals(45, converted.intValue());
assertTrue(helloWorld.exists()); assertTrue("Should have some bytes", fis.available() > 0);
assertTrue(done[0]);
assertEquals(nsNumberClass.id(), Foundation.getClass("NSNumber"));
assertNotSame("foo", fixture.name()); assertEquals("foo", fixture.name());
assertEquals(status.isOutputBusy(), ss.isSpeaking()); assertFalse(status.isOutputPaused()); assertEquals("Should have no characters left", 0, status.getNumberOfCharactersLeft()); assertEquals(0, status.getPhonemeCode()); assertEquals(status.isOutputBusy(), ss.isSpeaking()); assertFalse(status.isOutputPaused()); assertTrue("Should have characters left", status.getNumberOfCharactersLeft() > 0);
assertEquals("v@:^{TestStruct=id}", callbacks.methodSignatureForSelector("returnsVoidTakesStruct:")); assertEquals("v@:{ByValue=id}", callbacks.methodSignatureForSelector("returnsVoidTakesStructByValue:")); assertEquals("^{TestStruct=id}@:", callbacks.methodSignatureForSelector("returnsStructTakesVoid")); assertEquals("{ByValue=id}@:", callbacks.methodSignatureForSelector("returnsStructByValueTakesVoid"));
assertEquals(NSSpeechSynthesizer.CLASS.availableVoices().count(), NSSpeechSynthesizer.availableVoices().size()); assertTrue(NSSpeechSynthesizer.availableVoices().size() > 0); assertNotNull(NSSpeechSynthesizer.availableVoices().get(0).getName()); assertTrue(NSSpeechSynthesizer.availableVoices().get(0).getName().length() > 0);
assertFalse(fixture.isSuspended()); assertTrue(fixture.isSuspended()); assertFalse(fixture.isSuspended());
assertTrue(helloWorld.exists()); assertTrue("Should have some bytes", fis.available() > 0);
assertTrue(fixture.isShutdown());
assertEquals(null, converter.toNative(null, null));
assertEquals(42, fortyTwo.intValue());
assertEquals(0, fixture.operationCount().intValue()); assertEquals(0, fixture.operationCount().intValue());
assertTrue("Should have error position", sd.position > 0); assertTrue("Should have error message", sd.errorMessage != null); assertTrue("Should find error", error.getErrorCount() > 0); assertTrue("Should have error position", error.getNewestCharacterOffset() > 0); assertTrue("Should have error code", error.getNewestCode() != 0);
assertTrue(!NSSpeechSynthesizer.isAnyApplicationSpeaking()); assertTrue(NSSpeechSynthesizer.isAnyApplicationSpeaking());
assertEquals(0, operationCount); assertEquals(1, resetCount); assertEquals(1, operationCount); assertEquals(2, resetCount); assertEquals(2, operationCount); assertEquals(3, resetCount);
assertTrue(!ss.isSpeaking()); assertTrue(ss.isSpeaking());
assertTrue(typeMapper.getToNativeConverter(String.class) instanceof StringTypeConverter); assertTrue(typeMapper.getFromNativeConverter(String.class) instanceof StringTypeConverter);
assertTrue(selector.longValue() != 0); assertSame("selectorName:", selector.getName()); assertTrue(noSuchSelector.longValue() != 0); assertSame("noSelector:NamedThis:OrribleThing:", noSuchSelector.getName());
assertThat(users).isNotNull(); assertThat(users.size()).isEqualTo(1); assertThat(users.get(0).getUserName()).isEqualTo("Joe Tester"); assertThat(users).isNotNull(); assertThat(users.size()).isEqualTo(2);
assertThat(user.getLdapPassword(),is(OLD_PASSWORD)); assertThat(user.getLdapPassword(),is(NEW_PASSWORD));
assertThat(sut.checkPassword(user, "incorrect-password"), is(Boolean.FALSE));
assertThat(result.size(), is(1));
assertThat(isOnTime, is(false));
assertThat(result, is(expectedDate));
assertThat(sut.checkPassword(user, PASSWORD), is(Boolean.TRUE));
assertThat(user.getLdapName(),is(OLD_LDAPNAME)); assertThat(user.getLdapName(),is(NEW_LDAPNAME));
assertThat(result, is(nullValue()));
assertThat(user.isPasswordExpired(), is(Boolean.TRUE)); assertThat(user.getLdapPassword(), is(PASSWORD)); assertThat(user.isPasswordExpired(), is(Boolean.FALSE)); assertThat(user.getLdapPassword(), is(NEW_PASSWORD));
assertThat(sut, is(instanceOf(AuthenticationManagerLdapImpl.class)));
assertThat(result, is(expectedDate));
assertThat(result, is(nullValue()));
assertThat(result, is(not(empty()))); assertThat(result.get(0), is(holidays.get(holidays.size()-1))); assertThat(result.size(), is(1));
assertThat(passExpired ,is(true));
assertThat(user.getLdapName(),is(OLD_LDAPNAME));
assertThat(result, is(expectedDate));
assertThat(sut.checkPassword(user, PASSWORD), is(Boolean.TRUE));
assertThat(user.buildLdapName(), is("uid=user,ou=People"));
assertThat(result, is(empty()));
assertThat(nonExpiredPassword, is(false)); assertThat(expiredPassword, is(true));
assertThat(result.size(), is(1));
assertThat(result, is(NavigationResults.CHANGE_PASSWORD_OK)); assertThat(user.isPasswordExpired(), is(false));
assertThat(user.isLdapAuthentication(), is(Boolean.TRUE));
assertThat(result, is(expectedDate));
assertThat(sut.checkPassword(user, "incorrect-password"), is(Boolean.FALSE));
assertThat(ldapPrincipal.getId(),is(999)); assertThat(ldapPrincipal.getPassword(),is(ldapPassword));
assertThat(result, is(not(empty())));
assertThat(isOnTime, is(true));
assertThat(user.getDn(),is(OLD_DN));
assertThat(user.getPassword(), is ("b5599d4896bb77df9f597e34004eff6fb55e148e"));
assertThat(user.getPassword(), is(CRYPT_NEW_PASSWORD));
assertThat(result.size(), is(3));
assertThat(passExpired ,is(false));
assertThat(ldapPrincipal.getPassword(),is(ldapPassword)); assertThat(ldapPrincipal.getUser().getLdapPassword(),is(ldapPassword)); assertThat(ldapPrincipal.getUser().getPassword(),is(nullValue())); assertThat(ldapPrincipal.getUser().isActive(),is(true));
assertThat(user.getDn(),is(OLD_DN)); assertThat(user.getDn(),is(NEW_DN));
assertThat(user.isLdapAuthentication(), is(Boolean.FALSE));
assertThat(user.isPasswordExpired(), is(Boolean.FALSE)); assertThat(user.getLdapPassword(), is(PASSWORD)); assertThat(user.isPasswordExpired(), is(Boolean.FALSE)); assertThat(user.getLdapPassword(), is(PASSWORD));
assertThat(sut, is(instanceOf(AuthenticationManagerDaoImpl.class)));
assertThat(user.getLdapPassword(),is(OLD_PASSWORD));
assertThat(painter, is(nullValue()));
assertEquals(listenerCount +1, painter.getPropertyChangeListeners().length); assertEquals(listenerCount, painter.getPropertyChangeListeners().length);
assertEquals(false, exif.isFlippedVertically()); assertEquals(true, exif.isFlippedVertically()); assertEquals(false, exif.isFlippedVertically());
assertEquals(false, exif.isFlippedHorizontally()); assertEquals(true, exif.isFlippedHorizontally()); assertEquals(false, exif.isFlippedHorizontally());
assertEquals(-1, exif.getLastModifiedTimestamp()); assertEquals(-1, exif.getLastModifiedTimestamp()); assertEquals(-1, exif.getLastModifiedTimestamp());
assertThat(point.getX().getInteger(), is(new BigInteger("24714885350915573524959492804958774885039633758708007137167239543662320763472"))); assertThat(point.getY().getInteger(), is(new BigInteger("32610704945606948033834599741453719010166132071117736619400925734673110257760")));
assertThat(point1.isEqual(point2), is(false));
assertThat(HexEncoder.getString(value), is("462ee976890916e54fa825d26bdd0235f5eb5b6a143c199ab0ae5ee9328e08ce")); assertThat(seed, is(value)); assertThat(HexEncoder.getString(seed), is("462ee976890916e54fa825d26bdd0235f5eb5b6a143c199ab0ae5ee9328e08ce"));
assertThat(HexEncoder.getString(dom), is(""));
assertThat(readBit1, is(0)); assertThat(readBit2, is(1));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("34643617590234865996699167120328052565261792237873803846102513686264813449789"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("2399184961499513294557607325187831088545696902880432827228757905043131825908")));
assertThat(result.length, is(32)); assertThat(raw, is(result));
assertThat(HexEncoder.getString(seed), is("195ac5d462f0aa357c424982250f994ab0918ecee50a2ce5c6feb4f6b07ab660"));
assertNotNull(keyPair); assertNotNull(keyPair.getPrivateKey()); assertNotNull(keyPair.getPublicKey());
assertThat(point.getX().getInteger(), is(new BigInteger("15859889424997121447678417203126552703333111509882764573373873495686990760265"))); assertThat(point.getY().getInteger(), is(new BigInteger("10096193892184502829137016296170451381135740053910753749871387609999636210212")));
assertThat(point.getX().getInteger(), is(new BigInteger("11675954373387894284288004270057647646117187555908725144338394611307421402153"))); assertThat(point.getY().getInteger(), is(new BigInteger("6914948912687941235153802070429816612825513145320139793692760076939195789734")));
assertThat(HexEncoder.getString(dom), is("53696745643434380000"));
assertNotNull(signer);
assertThat(result.getInteger(), is(new BigInteger("304556772825615148595273960447787569070441654504708529964210125572869024510001115701686984853340368672385672566947078774505293620256218")));
assertThat(point.getX().getInteger(), is(new BigInteger("20266806181347897178517736945403300566236311925948585575972021784256181966831"))); assertThat(point.getY().getInteger(), is(new BigInteger("20852410506957026626210500909507772892959249564214740554270305643381675686982")));
assertThat(HexEncoder.getString(seed), is("fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025"));
assertThat(HexEncoder.getString(seed), is("d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a"));
assertThat(result, is(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 0, 0})); assertThat(result2, is(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}));
assertThat(point.getX().getInteger(), is(new BigInteger("13267040035417295396187264812269447027004279287377164120608901297558640265393"))); assertThat(point.getY().getInteger(), is(new BigInteger("30659936914619338944546583179452063721257503761316379129960678675145268230154")));
assertThat(point.getX().getInteger(), is(new BigInteger("42949322561463186230299817970593613279310279966655824621762638884512104730735"))); assertThat(point.getY().getInteger(), is(new BigInteger("34290536749966261157057464511838359353942848384132466399369493876322787415148")));
assertThat(str, is("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")); assertThat(HexEncoder.getString(seed), is("a5840d03f4f3b879f53f8511ba19f0ba7cfbb4c62c254822ccd2470235f0548e"));
assertEquals(result.getInteger(), new BigInteger("3"));
assertThat(result.getAffineX().getInteger(), is(new BigInteger("2550105584539864958223359997109982244652817874690374654323009420113342284222"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("32100423734119761214020102691557112218747037854384677234614616607240732191696")));
assertThat(HexEncoder.getString(seed), is("3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c"));
assertThat(result.getAffineX().getInteger(), is(new BigInteger("55556569241314067156494303609322045323771151550641480329783949256943018472903"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("32784530584814531279135473125766128158866185447326682367874410721387968224179")));
assertThat(HexEncoder.getString(seed), is( "3ba16da0c6f2cc1f30187740756f5e79" + "8d6bc5fc015d7c63cc9510ee3fd44adc" + "24d8e968b6e46e6f94d19b945361726b" + "d75e149ef09817f580"));
assertThat(result1, is(new byte[]{19, -16, 82, 23, 24, -5, 62, 17, 82, 3})); assertThat(result2, is(new byte[]{67, 121, -16, -83, 14, 25, -13, 37, 13, -19, 20, 21, -82, 3, 94, -5, 26, 57, 18, 91, 110, 78}));
assertThat(isCompressed, is(true));
assertThat(str, is("112eea215ef1ea1b70203901f0032c2df3db2b3b02ebfe1f0ef72e2fee29f60b")); assertThat(HexEncoder.getBytes(str), is(input)); assertThat(HexEncoder.getString(seed), is("91fa74ddee42574563acc2579f5e782d618d913b1cec2574e000b7768b462701"));
assertThat(point1.isEqual(point2), is(true));
assertNotNull(privateKey);
assertThat(str, is("13f0521718fb3e1152034379f0ad0e19f3250ded1415ae035efb1a39125b6e4e")); assertThat(HexEncoder.getBytes(str), is(input)); assertThat(HexEncoder.getString(seed), is("6158e2b8e2ba640375e64b680a239f5df6211791f5858b1348423f88b134b9c8"));
assertThat(coordinate.getInteger(), is(new BigInteger("4016116405453202388474865418908325977025123430952466464539276325205466974574")));
assertNotNull(privateKey);
assertEquals(result.getInteger(), new BigInteger("2000"));
assertNotNull(schemeProvider.getSigner());
assertThat(coordinate.getInteger(), is(new BigInteger("5635526907038231869349643959556202269054548263441123979990494297630113764337")));
assertThat(HexEncoder.getString(seed), is("f1b230afee2486a873e06a23f3455708fa0cabce67149c507cff5649d07eb24f"));
assertThat(point1.isEqual(point2), is(false));
assertThat(HexEncoder.getString(dom), is("53696745643434380003666f6f"));
assertThat(HexEncoder.getString(seed), is("ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf"));
assertThat(isCompressed, is(false));
assertThat(point.getX().getInteger(), is(new BigInteger("47481641482705931103934862287125658686534006637492775092431200862455707981015"))); assertThat(point.getY().getInteger(), is(new BigInteger("55756317091645948491064284809040306721406210822346482531807933600495972956139")));
assertEquals(result.getInteger(), new BigInteger("500"));
assertThat(HexEncoder.getString(encoded.getValue()), is("f29829ffdb3b229fd05dc7f83c1de7ab041cbbeb4156d7442f3e23de19c80701"));
assertThat(HexEncoder.getString(encoded.getValue()), is("f193d7d58eb5ba3482c54b4dad4f9685726b2957cdf363fd4c6ed5a85e98750c"));
assertThat(publicKey.getRaw(), is(integer.toByteArray()));
assertThat(coordinate.getInteger(), is(new BigInteger("1073164242609237669094038971348660945523306704071742924708751717996060223455")));
assertThat(point1.isEqual(point2), is(false));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("24727413235106541002554574571675588834622768167397638456726423682521233608206"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("15549675580280190176352668710449542251549572066445060580507079593062643049417")));
assertThat(point1.isEqual(point2), is(false));
assertThat(HexEncoder.getString(encoded.getValue()), is("df2780568c569c6713ed48bc7d96e04a93fdda45237bfc34afe40518b2635f02"));
assertThat(str, is("ae04ea035e8dea1b0c23f201e603d40d8fe15d1d02dfb82a0ef70d28e44ff326")); assertThat(HexEncoder.getBytes(str), is(input)); assertThat(HexEncoder.getString(seed), is("6daa7036e3ff1aa3fabb2a01b0b7e90c946f678df105da32bdd329593d3cbe3b"));
assertThat(result, is(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
assertEquals(integer1, integer2);
assertThat(scalard.getAffineX().getInteger(), is(new BigInteger("15803359856018908320086002332714894013924030585248052893900291221487236226419"))); assertThat(scalard.getAffineY().getInteger(), is(new BigInteger("25416682171142283067951549518103646638934086440885266225724336361653813092611")));
assertThat(HexEncoder.getString(seed), is("e3286b65a39e17f622407ec080db5732c9de3f74b1d8075d0f0240458f77d197"));
assertThat(str, is("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")); assertThat(HexEncoder.getBytes(str), is(input)); assertThat(HexEncoder.getString(seed), is("03a107bff3ce10be1d70dd18e74bc09967e4d6309ba50d5f1ddc8664125531b8"));
assertThat(HexEncoder.getString(seed), is( "43ba28f430cdff456ae531545f7ecd0a" + "c834a55d9358c0372bfa0c6c6798c086" + "6aea01eb00742802b8438ea4cb82169c" + "235160627b4c3a9480"));
assertThat(result.getAffineX().getInteger(), is(new BigInteger("36568395279531091001405240627702774400329345357946000277861114291457062189012"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("6892543919216139430465404745243127488161491607535545431263766463424432810420")));
assertThat(HexEncoder.getString(seed), is( "dcea9e78f35a1bf3499a831b10b86c90" + "aac01cd84b67a0109b55a36e9328b1e3" + "65fce161d71ce7131a543ea4cb5f7e9f" + "1d8b00696447001400"));
assertNotNull(analyzer);
assertNotNull(schemeProvider.getSigner());
assertThat(result.getAffineX().getInteger(), is(new BigInteger("46453596183992846648371334773013814104200062737923250995844281103986991912429"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("25430834724210084628427024029388177706947140598135008372913684687859787885119")));
assertThat(point.getX().getInteger(), is(new BigInteger("51129866767904606553230589361247885151272909473749371102570783512913896553871"))); assertThat(point.getY().getInteger(), is(new BigInteger("32605373213074853449054031639075642571848374710300664057820958199552138057137")));
assertThat(point1.isEqual(point2), is(true));
assertThat(coordinate.getInteger(), is(new BigInteger("466061824698566712370651010976869652622695944005000025458774533499639142642")));
assertNotNull(privateKey);
assertThat(ByteUtils.reverse(input), is(new byte[]{43, 13, 53, 62, 13, 43, 65, 11, 94, 26})); assertThat(ByteUtils.reverse(input2), is(new byte[]{53, 34, 14, 45, 30, 35, 41, 54, 51, 51, 42, 24, 91, 53, 25, 54}));
assertThat(point.getX().getInteger(), is(new BigInteger("53796438671359824102085853653404738634771041230653645888564199631429825277660"))); assertThat(point.getY().getInteger(), is(new BigInteger("52873790972168047993308827189322012202737756658766965387349495052412272053380")));
assertThat(point.getX().getInteger(), is(new BigInteger("20266806181347897178517736945403300566236311925948585575972021784256181966831"))); assertThat(point.getY().getInteger(), is(new BigInteger("20852410506957026626210500909507772892959249564214740554270305643381675686982")));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("46896733464454938657123544595386787789046198280132665686241321779790909858396"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("8324843778533443976490377120369201138301417226297555316741202210403726505172")));
assertThat(result.getX().getInteger(), is(BigInteger.ZERO)); assertThat(result.getY().getInteger(), is(BigInteger.ONE));
assertThat(HexEncoder.getString(seed), is("6a12e5b9a9c8494f8e3c7c8af3b54d3b72c33d21fc80271fa54d44620663e58a"));
assertThat(HexEncoder.getString(seed), is( "a81b2e8a70a5ac94ffdbcc9badfc3feb" + "0801f258578bb114ad44ece1ec0e799d" + "a08effb81c5d685c0c56f64eecaef8cd" + "f11cc38737838cf400"));
assertThat(HexEncoder.getString(encoded.getValue()), is("6e89e4b5973ab73a1538714746c77fd09f33aeeebdf11daffd94d6ba940ae108"));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("24727413235106541002554574571675588834622768167397638456726423682521233608206"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("15549675580280190176352668710449542251549572066445060580507079593062643049417")));
assertThat(HexEncoder.getString(seed), is("5ff5d819b2a0b07ba2db275331def8fd32fb0b463a17e798a9aa87dc6245f079"));
assertThat(point.getX().getInteger(), is(new BigInteger("5288904915125359943317363554591172762473106809525857286939154287576903061215"))); assertThat(point.getY().getInteger(), is(new BigInteger("49583116013539038265297505995597360672194268243619584093840920874690478834199")));
assertThat(HexEncoder.getString(seed), is( "79756f014dcfe2079f5dd9e718be4171" + "e2ef2486a08f25186f6bff43a9936b9b" + "fe12402b08ae65798a3d81e22e9ec80e" + "7690862ef3d4ed3a00"));
assertThat(HexEncoder.getString(seed), is("9b69ec0a4568848ec9bd9190996fce5a5f46d0a8eb20cdd770953e61855438ef"));
assertNotNull(privateKey); assertThat((privateKey instanceof PrivateKeyEd25519), is(true));
assertThat(HexEncoder.getString(seed), is("9553153da51781058489628fc538e1985522741de0d6162106c7d6d0243f1454"));
assertThat(point.getX().getInteger(), is(new BigInteger("28991574176798270631055516789513246251336837817295903512076991779188778127680"))); assertThat(point.getY().getInteger(), is(new BigInteger("43109591168687823035564402387271177577811433066020507559569157621096510013345")));
assertThat(readBit, is(1)); assertThat(value, is((byte) 0b11010101));
assertThat(point.getX().getInteger(), is(new BigInteger("55307901837819056100203421472284281626339181044463972151446027320031681414103"))); assertThat(point.getY().getInteger(), is(new BigInteger("4592278534742875130003490239944802183338230954052483234431143871319686381534")));
assertThat(point.getX().getInteger(), is(new BigInteger("34533599460759434840195068027488100886792431177105624727278431380599494051297"))); assertThat(point.getY().getInteger(), is(new BigInteger("51422534855936905954058747336281739654670737325900075107235061596710295322677")));
assertThat(privateKey1.getRaw(), is(seed));
assertThat(point.getX().getInteger(), is(new BigInteger("16119696165958767068520039407917355163375427197667342664755069949040746442291"))); assertThat(point.getY().getInteger(), is(new BigInteger("11382165760643794875560273637359185509760076262240039946799577435076376239241")));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("32159939716063394567822525359727347405356413309540137282993608327129696604205"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("29147333543209904737197244325450674102993621692520459538942544703173373584633")));
assertThat(publicKey.getHexString(), is("462ee976890916e54fa825d26bdd0235f5eb5b6a143c199ab0ae5ee9328e08ce"));
assertThat(isCompressed, is(true));
assertThat(result.getAffineX().getInteger(), is(new BigInteger("55567266549953732748489637086272210307507483701392087766383203587162091263037"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("39648261582079248220577879738713959882783855750578332978656472445048155089907")));
assertThat(publicKey.getHexString(), is("18c484505c8f175bbdd511acde1faaea8e35a579cfc0d220f6d3513ebb4204b5"));
assertThat(result1.getInteger(), is(new BigInteger("29526982755515629833010601177215416502583846089738343830061683922017848058174"))); assertThat(result2.getInteger(), is(new BigInteger("38867791596533294917564303539771571723867178851912571219685671691706937241210")));
assertEquals(result.getInteger(), new BigInteger("500"));
assertThat(result3Str, is("fb51bcb380697c0fd1e1817b4faefff56d780f2609169d69aa7db8e7ae4bc830c2c2b0487bbe69be5f8ce1e3c52abd1ac81e99af98bab15f73b18469376dd375"));
assertThat(privateKey1.getRaw(), is(seed));
assertNotNull(schemeProvider.getSigner());
assertThat(str, is("0aff0c0318053e075209116f3ead0e197b1112ed1401ea3f18b51a4d1c091e47")); assertThat(HexEncoder.getBytes(str), is(input)); assertThat(HexEncoder.getString(seed), is("6caba0ffd7da15129b9aaeb3021c4a6612f6ad3099ea3d90993a60f585243b23"));
assertThat(result[0], is(new byte[]{32, 43, 53, 56, 34})); assertThat(result[1], is(new byte[]{23, 43, 93, 42, 42}));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("43500613248243327786121022071801015118933854441360174117148262713429272820047"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("45005105423099817237495816771148012388779685712352441364231470781391834741548")));
assertThat(point1.isEqual(point2), is(false));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("46706390780465557264338673484185971070529246228527338942042475661633188627656"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("15299170165656271974649334809062094114079726227711063015095704409550798436788")));
assertThat(point.getX().getInteger(), is(new BigInteger("31621228259983782766387151846173419701451207683454700670358544852161525834558"))); assertThat(point.getY().getInteger(), is(new BigInteger("1087550498622212171315934886475455672530696511327350732598338573849547859723")));
assertThat(HexEncoder.getString(seed), is("71a0d0c6d77f76bc6a0ccde4b7293395962435c13d8fcd86c585ca8a8f2eddb3"));
assertThat(ArrayUtils.reverse(input1), is(new int[]{-1, 0, 0, -1, 1, 1, 0})); assertThat(ArrayUtils.reverse(input2), is(new int[]{0, -1, -1, 0, 1, 1, 1, -1, 1, 0, -1, 1, -1, 0}));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("9199134265559022971505535402808359556995554859516252602543778295037484220679"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("22512087849695599276028560866629687720820254811233262850576678203618951717560")));
assertThat(isKey25519, is(true));
assertThat(point.getX().getInteger(), is(new BigInteger("26579811288929527007271986534949559889238357380924397736032152196006905219455"))); assertThat(point.getY().getInteger(), is(new BigInteger("32830504693991902250379781095167938240398939587214709772415373618962111188227")));
assertEquals(result.getInteger(), new BigInteger("3"));
assertThat(HexEncoder.getString(seed), is( "43ba28f430cdff456ae531545f7ecd0a" + "c834a55d9358c0372bfa0c6c6798c086" + "6aea01eb00742802b8438ea4cb82169c" + "235160627b4c3a9480"));
assertThat(result, is(new int[]{1, 0})); assertThat(result1, is(new int[]{1, 0, 0, 0, 1})); assertThat(result2, is(new int[]{1, 0, 0, 0, 0, 0, 0, 0, 1})); assertThat(result3, is(new int[]{1, 0, 0, 0, 0, 0, 0, 0, 0}));
assertThat(point1.isEqual(point2), is(false));
assertThat(result1, is(new int[]{1, 0, -1, 1, 0, -1})); assertThat(result2, is(new int[]{1, -1, 1, 0, -1})); assertThat(result3, is(new int[]{1, 0, 0, 0, -1, 1, 0, 0, -1})); assertThat(result4, is(new int[]{1, -1, 1, -1, 0, 0, 1, 0, 0, -1}));
assertThat(doubled.getAffineX().getInteger(), is(new BigInteger("9451145793506787353375160377761530931587019091193333050860601958827395183563"))); assertThat(doubled.getAffineY().getInteger(), is(new BigInteger("20609402718286069808115703540855311742885093522056241285814584245966805874451")));
assertThat(result, is(new byte[]{0, 0, 1, 2, 3, 4, 5, 6, 7, 8})); assertThat(result2, is(new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8}));
assertThat(HexEncoder.getString(seed), is("6cf7c8ecd9de399fe992cd4dca5362b51c11183850f66f85e446d73ee323a582"));
assertNotNull(analyzer);
assertThat(HexEncoder.getString(seed), is("278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e"));
assertThat(HexEncoder.getString(seed), is( "df9705f58edbab802c7f8363cfe5560a" + "b1c6132c20a9f1dd163483a26f8ac53a" + "39d6808bf4a1dfbd261b099bb03b3fb5" + "0906cb28bd8a081f00"));
assertThat(point1.isEqual(point2), is(false));
assertThat(point1.isEqual(point2), is(false));
assertThat(HexEncoder.getString(result), is("69aaaf4b6fc82362212a611caff822be8bb4b8d246c3cd33474914690b32e2bc79da889adae033ecef441a1663028a64ec8f860fb039974bb1bb37500218d998"));
assertNotNull(keyPair); assertNotNull(keyPair.getPrivateKey()); assertNotNull(keyPair.getPublicKey());
assertThat(privateKey.getInteger(), is(new BigInteger(1, new byte[32]))); assertThat(privateKey.getInteger(), is(new BigInteger("00"))); assertThat(privateKey.getRaw(), is(ByteUtils.paddingZeroOnHead(new BigInteger("00").toByteArray(), 32)));
assertThat(point.getX().getInteger(), is(new BigInteger("50505920206304101148506670769962044834562415690945180860800334635063441812972"))); assertThat(point.getY().getInteger(), is(new BigInteger("52893620576450359719018512374896078131701031161676122303582965125535080500247")));
assertNotNull(keyPair); assertThat(keyPair.getPublicKey().getRaw(), is(checkKey.getRaw()));
assertEquals(result.getInteger(), new BigInteger("2000"));
assertThat(HexEncoder.getString(publicKey.getRaw()), is(hexString));
assertThat(result, is(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}));
assertThat(HexEncoder.getString(seed), is("e8cd865136cffc97f7637addb27865ff85af3da1ad9dbee40da974ca5bbed111"));
assertThat(coordinate.getInteger(), is(new BigInteger("690082385501664621091624779109445751481919948714921317484605800924977635702")));
assertThat(point.getX().getInteger(), is(new BigInteger("27443345399801550503820810706683867803355265925449420625371997396755160603300"))); assertThat(point.getY().getInteger(), is(new BigInteger("2564001854993589394597821165299375341350553971038818461341845310541327703804")));
assertThat(HexEncoder.getString(seed), is( "b3da079b0aa493a5772029f0467baebe" + "e5a8112d9d3a22532361da294f7bb381" + "5c5dc59e176b4d9f381ca0938e13c6c0" + "7b174be65dfa578e80"));
assertThat(result.getAffineX().getInteger(), is(new BigInteger("54335164024625743934669286787931302569680669857893696519224744689691858515668"))); assertThat(result.getAffineY().getInteger(), is(new BigInteger("44807246093863216660634594959379875777640228908622772878292058541219108796161")));
assertThat(HexEncoder.getString(seed), is("57c9d82d5856f1634f535f8d9774215fcffa3d04e5fd441c7ede5fab03c104c2"));
assertThat(HexEncoder.getString(seed), is( "5fd7449b59b461fd2ce787ec616ad46a" + "1da1342485a70e1f8a0ea75d80e96778" + "edf124769b46c7061bd6783df1e50f6c" + "d1fa1abeafe8256180"));
assertThat(HexEncoder.getString(encoded.getValue()), is("762115b81aae8ab7a87e5d205ee64173ffc2666721b9bed118c4af49a2928601"));
assertNotNull(privateKey);
assertThat(isCompressed, is(false));
assertThat(point.getX().getInteger(), is(new BigInteger("43891533794047446595129048335950223439754428083113210033800244870979949519638"))); assertThat(point.getY().getInteger(), is(new BigInteger("23252602200307492321313643524776623321052079804243872788483132543098216090908")));
assertEquals(expectedNodeTemplates, nodeTemplatesWithoutIncomingEdges);
assertEquals("java", installedPackage.getPackageName()); assertEquals("8", installedPackage.getVersion());
assertEquals("ubuntu", platform.getName());
assertEquals("openssh-client", installedPackage.getName());
assertEquals(componentVersion, v.toString());
assertTrue(cookbookParseResult.getCookbookConfigsByPlatform("windows").containsKey("10")); assertFalse(cookbookParseResult.getCookbookConfigsByPlatform("windows").containsKey("18.04"));
assertEquals(1, greater.compareTo(smaller));
assertNotNull(allTypes);
assertEquals(-1, smaller.compareTo(greater));
assertFalse(configuration.getBoolean("ui.features.foo")); assertTrue(configuration.getBoolean("ui.features.bar")); assertEquals(configuration.getString("ui.endpoints.quaz"), "");
assertEquals(0, dependencies.size());
assertNotNull(transform); assertEquals(9, transform.vertexSet().size());
assertEquals(3, parseResultList.size()); assertEquals("test", parseResultList.get(0).getCookbookName()); assertEquals("test", parseResultList.get(1).getCookbookName()); assertEquals("test", parseResultList.get(2).getCookbookName());
assertEquals("null", this.configurationBasedNamespaceManager.getPrefix((String) null));
assertEquals("windows", platform.getName());
assertNotNull(artifactTypeQName, "Artifact Type for .war does not exist");
assertEquals(nt1.getId(), splitting.getNodeTemplatesWhichPredecessorsHasNoPredecessors(topologyTemplate).get(0).getId());
assertEquals(expectedNodes, splitting.getHostedOnSuccessorsOfNodeTemplate(topologyTemplate2, nt1));
assertEquals("null", this.configurationBasedNamespaceManager.getPrefix(""));
assertEquals("java", cookbookConfiguration.getName());
assertEquals("winery", prefix); assertFalse(f.exists());
assertEquals("plainNCname", Util.namespaceToJavaPackage("plainNCname"));
assertTrue(tNodeTypeSubtypes.isPresent()); assertEquals(3, subtypes.size()); assertTrue(subtypes.removeIf(nodeType -> PARENT.equals(nodeType.getElement().getName()))); assertTrue(subtypes.removeIf(nodeType -> MOTHER.equals(nodeType.getElement().getName()))); assertTrue(subtypes.removeIf(nodeType -> AUNT.equals(nodeType.getElement().getName())));
assertEquals("id", gitInfo.getClientID()); assertEquals("secret", gitInfo.getClientSecret()); assertEquals("default", gitInfo.getUsername()); assertEquals("default", gitInfo.getPassword()); assertFalse(gitInfo.isAutocommit());
assertEquals("test.url", accountabilityConfig.getGethUrl()); assertEquals("123456789", accountabilityConfig.getEthereumPassword()); assertEquals("provenancesmartcontracttestaddress", accountabilityConfig.getEthereumProvenanceSmartContractAddress()); assertEquals("authorizationsmartcontracttestaddress", accountabilityConfig.getEthereumAuthorizationSmartContractAddress()); assertEquals("swarmgatewaytesturl", accountabilityConfig.getSwarmGatewayUrl());
assertTrue(this.authorizationTree.isAuthorized("0x3333"));
assertEquals(1, greater.compareTo(smaller));
assertTrue(lineage.isPresent()); assertEquals(3, lineage.get().size()); assertEquals("0x3333", ((AuthorizationNode) lineage.get().toArray()[lineage.get().size() - 1]).getAddress()); assertEquals("0x2222", ((AuthorizationNode) lineage.get().toArray()[lineage.get().size() - 2]).getAddress()); assertEquals("0x1111", ((AuthorizationNode) lineage.get().toArray()[lineage.get().size() - 3]).getAddress());
assertEquals(1, dependencies.size()); assertEquals("test", testRepoDependency.getName()); assertEquals("plain", testRepoDependency.getBranch());
assertEquals(true, splitting.checkValidTopology(topologyTemplate));
assertNotNull(JAXBSupport.createUnmarshaller());
assertEquals("test.url", Environment.getInstance().getConfiguration().getString("accountability.geth-url")); assertEquals("test2.url", Environment.getInstance().getConfiguration().getString("accountability.geth-url")); assertEquals("test2.url", Environment.getInstance().getConfiguration().getString("accountability.geth-url")); assertEquals("test.url", Environment.getInstance().getConfiguration().getString("accountability.geth-url"));
assertEquals(false, splitting.checkValidTopology(topologyTemplate));
assertEquals(true, splitting.checkValidTopology(topologyTemplate));
assertTrue(identity.isPresent()); assertEquals("Vladimir", identity.get());
assertEquals("ubuntu", cookbookConfiguration.getSupports().getName()); assertEquals("18.04", cookbookConfiguration.getSupports().getVersion()); assertEquals(platform, cookbookConfiguration.getSupports()); assertTrue(cookbookConfiguration.hasPlatform(new HashSet<>(Arrays.asList("ubuntu", "windows")))); assertTrue(cookbookConfiguration.hasPlatformFamily(new HashSet<>(Arrays.asList("debian", "windows"))));
assertFalse(attribute.isArray()); assertTrue(attribute.isArray());
assertEquals(1, list.size());
assertNotNull(JAXBSupport.getContext());
assertEquals(2, deploymentArtifacts.getDeploymentArtifact().size()); assertEquals(OpenToscaBaseTypes.stateArtifactType, deploymentArtifact.getArtifactType());
assertEquals(false, splitting.checkValidTopology(topologyTemplate));
assertTrue(this.repository.exists(old)); assertTrue(this.repository.exists(newId));
assertEquals(2, substitutableTemplates.size()); assertTrue(substitutableTemplates.entrySet() .removeIf(entry -> grandFather.equals(entry.getKey().getTypeAsQName())) ); assertTrue(substitutableTemplates.entrySet() .removeIf(entry -> parent.equals(entry.getKey().getType())) );
assertEquals(-1, smaller.compareTo(greater)); assertEquals(1, greater.compareTo(smaller));
assertEquals("18.04", platform.getVersion());
assertEquals("NCName", Util.makeNCName("NCName"));
assertTrue(testObject.getFeatures().get("foo")); assertFalse(testObject.getFeatures().get("bar"));
assertEquals(expected, v.toString());
assertEquals("origin_files = glob([\\"README.md\\", \\"LICENSE\\", \\"artifacttemplates/http%3A%2F%2Fplain.winery.opentosca.org%2Fartifacttemplates/ArtifactTemplateWithFilesAndSources-ArtifactTypeWithoutProperties/**\\",\\n" + " \\"artifacttemplates/http%3A%2F%2Fplain.winery.opentosca.org%2Fartifacttemplates/ArtifactTemplateWithoutAnyFiles-ArtifactTypeWithoutProperties/**\\"]),", config);
assertEquals(4, results.size()); assertEquals("[[A, C], [A, D], [B, C], [B, D]]", results.toString()); assertEquals(2, results.size()); assertEquals("[[A, C], [A, D]]", results.toString()); assertEquals(0, results.size()); assertEquals("[[A], [B], [C]]", results.toString());
assertEquals("ubuntu", cookbookConfiguration.getSupports().getName()); assertNull(cookbookConfiguration.getSupports().getVersion());
assertEquals("Frank-s-test", RestUtils.createXMLid("Frank\'s test").getDecoded()); assertEquals("MyNodeType", RestUtils.createXMLid("MyNodeType").getDecoded()); assertEquals("A-Node-Type", RestUtils.createXMLid("A Node Type").getDecoded());
assertEquals(expected, v.toString());
assertNotNull(transform); assertEquals(9, transform.vertexSet().size()); assertTrue(transform.vertexSet().stream().anyMatch(entity -> entity instanceof ScalarEntity && entity.getName().equals("extends") && ((ScalarEntity) entity).getValue().equals("software_component")));
assertEquals(cookbookPath, cookbookParseResult.getCookbookPath()); assertEquals(cookbookPath, cookbookParseResult.getCookbookPath());
assertEquals(3, parseResult.getAllConfigsAsList().size());
assertTrue(this.authorizationTree.getServiceOwnerBlockchainAddress().isPresent()); assertEquals("0x1111", this.authorizationTree.getServiceOwnerBlockchainAddress().get());
assertEquals("7.9", installedPackage.getVersion());
assertEquals("nums", attribute.getName());
assertEquals(expectedValues, cookbookConfiguration.getAttribute("[openssh][package_name]")); assertNull(cookbookConfiguration.getAttribute("thiskeydoesnoetexist"));
assertEquals(expectedValues, attribute.getValues());
assertTrue(tNodeTypeSubtypes.isPresent()); assertEquals(1, subtypes.size()); assertEquals(CHILD, firstChild.getElement().getName()); assertEquals(1, firstChild.getChildren().size()); assertEquals(GRANDCHILD, childOfFirstChild.getElement().getName()); assertNull(childOfFirstChild.getChildren());
assertEquals(15, allToscaLightCompliantModels.size());
assertEquals(1, newerVersion.compareTo(olderVersion));
assertFalse(this.authorizationTree.isAuthorized("0x5874"));
assertTrue(ChefDslHelper.hasChefAttributeInString(rubyStringWithAttribute));
assertEquals("file", repositoryConfig.getProvider().toString()); assertEquals("thisisatestroot", repositoryConfig.getRepositoryRoot());
assertTrue(version.getComponentVersion().startsWith("stateful-w1-wip1-"));
assertEquals(topology, clone); assertNotEquals(topology, cloneNotEquals);
assertNotNull(allTypes);
assertEquals("mainTestRepository", repositoryList.get(0).getName());
assertEquals(original, clone); assertNotEquals(original, cloneNotEquals);
assertEquals(OpenToscaBaseTypes.stateArtifactType, deploymentArtifact.getArtifactType());
assertEquals(">=6", cookbookConfiguration.getDepends().get("java"));
assertNotNull(((TNodeTemplate) topologyTemplate.getNodeTemplateOrRelationshipTemplate().get(0)).getPolicies()); assertNotNull(((TNodeTemplate) topologyTemplate.getNodeTemplateOrRelationshipTemplate().get(0)).getProperties()); assertNull(((TNodeTemplate) topologyTemplate.getNodeTemplateOrRelationshipTemplate().get(0)).getPolicies()); assertNull(((TNodeTemplate) topologyTemplate.getNodeTemplateOrRelationshipTemplate().get(0)).getProperties());
assertEquals(stNamespace.compareTo(otherNamespace), serviceTemplate.compareTo(otherServiceTemplate));
assertEquals("openssh-server", installedPackage.getName());
assertEquals(entityTemplates.get(0).getTypeAsQName().toString(), "{namespace}java8_1.0-w2-wip2");
assertEquals(expected, v.toString());
assertEquals(-1, smaller.compareTo(greater));
assertNotNull(artifactType, "Artifact Type for .war does not exist");
assertEquals(expectedValues, cookbookParseResult.getAllConfigsAsList().get(0).getAttribute("testname")); assertEquals(expectedValues, cookbookParseResult.getAllConfigsAsList().get(1).getAttribute("testname"));
assertEquals("7.9", installedPackage.getVersion());
assertEquals(4, cookbookConfigs.size()); assertEquals("openssh", cookbookConfigs.get(count).getName()); assertEquals("Installs and configures OpenSSH client and daemon", cookbookConfigs.get(count).getDescription()); assertTrue(cookbookConfigs.get(count).getDepends().containsKey("iptables")); assertTrue(extractedCookbookConfigs.getCookbookConfigs().containsKey("aix"));
assertEquals("16.04", platform.getVersion());
assertEquals(1, list.size());
assertEquals(1, policies.size()); assertEquals("FloorWarmth10", policies.get(0).getId());
assertTrue(realWorldIdentity.isPresent()); assertEquals("Vladimir", realWorldIdentity.get());
assertEquals(-1, smaller.compareTo(greater));
assertEquals(installedPackage, cookbookConfiguration.getInstalledPackages().get("java"));
assertEquals(requiredPackage, cookbookConfiguration.getRequiredPackages().get("java"));
assertEquals(1, greater.compareTo(smaller));
assertNotNull(JAXBSupport.createMarshaller(true));
assertEquals("openssh", cookbookConfiguration.getName());
assertEquals(original, clone); assertNotEquals(original, cloneNotEquals);
assertEquals(0, smaller.compareTo(greater));
assertEquals(entityTemplates, entityTemplatesClone);
assertArrayEquals(new String[]{"123456789", "MB"}, HumanReadableSize.sanitize("123456789MB"));
assertEquals("68.44GB", HumanReadableSize.parse(new BigDecimal("73476694570")));
assertEquals("68.44MB", HumanReadableSize.parse("71754584"));
assertEquals("CreationDate:\\t" + CREATION_DATE + linebreak + "LastInventoryDate:\\t" + INVENTORY_DATE + linebreak + "NumberOfArchives:\\t" + NUMBER_OF_ARCHIVES + linebreak + "SizeInBytes:\\t\\t" + SIZE_IN_BYTES + linebreak + "VaultARN:\\t\\t" + ARN + linebreak + "VaultName:\\t\\t" + VAULT_NAME + linebreak, out.toString());
assertEquals("eu-west-1", optionsParser.parseEndpointToRegion(ENDPOINT_URL)); assertEquals("eu-central-2", optionsParser.parseEndpointToRegion("eu-central-2"));
assertTrue(command.valid(options, optionParser)); assertEquals(vaultName, capturedRequest.getValue().getVaultName()); assertEquals(archiveId, capturedRequest.getValue().getArchiveId());
assertFalse(command.valid(options, optionParser));
assertEquals("73476694570 (68.44GB)", readableSize);
assertEquals(capturedJobRequest.getValue().getVaultName(), vaultName);
assertEquals(vaultName, output.getVaultName()); assertTrue(command.valid(options, optionParser));
assertArrayEquals(new String[]{"123456789", "B"}, HumanReadableSize.sanitize("123456789 B"));
assertTrue(command.valid(options, optionParser));
assertTrue(command.valid(options, optionParser)); assertEquals(vaultName, capturedRequest.getValue().getVaultName());
assertFalse(command.valid(options, optionParser));
assertEquals("68.44GB", HumanReadableSize.parse("73476694570"));
assertFalse(command.valid(options, optionParser));
assertTrue(command.valid(options, optionParser)); assertEquals(another.toString(), out.toString());
assertEquals(vaultName, output.getVaultName()); assertTrue(command.valid(options, optionParser));
assertTrue(command.valid(validOptions, optionParser)); assertFalse(command.valid(invalidOptions, optionParser));
assertArrayEquals(new String[]{"123456789", "TB"}, HumanReadableSize.sanitize("123456789TB"));
assertArrayEquals(new String[]{"123456789", "GB"}, HumanReadableSize.sanitize("123456789 GB"));
assertTrue(command.valid(options, optionParser));
assertArrayEquals(new String[]{"123456789", "kB"}, HumanReadableSize.sanitize("123456789kB"));
assertEquals("68.44TB", HumanReadableSize.parse("75240135239680"));
assertEquals("CreationDate:\\t" + CREATION_DATE + linebreak + "LastInventoryDate:\\t" + INVENTORY_DATE + linebreak + "NumberOfArchives:\\t" + NUMBER_OF_ARCHIVES + linebreak + "SizeInBytes:\\t\\t" + SIZE_IN_BYTES + linebreak + "VaultARN:\\t\\t" + ARN + linebreak + "VaultName:\\t\\t" + VAULT_NAME + linebreak, out.toString());
assertEquals(jobId, job.getJobId()); assertTrue(command.valid(options, optionParser));
assertArrayEquals(new String[]{"123456789", "B"}, HumanReadableSize.sanitize("123456789"));
assertEquals("Job ID:\\t\\t\\t\\t" + jobId + LINE_SEPARATOR + "Creation date:\\t\\t\\tnull" + LINE_SEPARATOR + "Completion date:\\t1970-01-01 00:00:00" + LINE_SEPARATOR + "Status:\\t\\t\\t\\tSucceeded (" + statusMessage + ")" + LINE_SEPARATOR + LINE_SEPARATOR, out.toString());
assertEquals(content, getInventory()); assertTrue(command.valid(options, optionParser));
assertTrue(command.valid(options, optionParser));
assertTrue(command.valid(options, optionParser));
assertThat(pageRangeResponse, not(nullValue())); assertThat(pageRangeResponse.getFirstPage(), is(1L)); assertThat(pageRangeResponse.getLastPage(), is(2L));
assertThat(format("CRC16 validation for packet [%s] failed", this.commandId), (short) crc16, equalTo(getPacketCrcValue()));
assertEquals(mangled.toString(), real.toString(), "At seed " + seed + " subSequence(" + i + ", " + j + ") are the same");
assertEquals(recover.toString(), lng);
assertThat(connection).isNotNull(); assertThat(connection.getURL().getHost()).isEqualTo(parsedDefaultHost); assertThat(connection.getURL().getPort()).isEqualTo(PORT); assertThat(connection.getConnectTimeout()).isEqualTo(TIMEOUT_IN_MS); assertThat(connection.getReadTimeout()).isEqualTo(TIMEOUT_IN_MS); assertThat(connection.getInstanceFollowRedirects()).isFalse(); assertThat(connection.getUseCaches()).isFalse();
assertThat(isAtLeastAndroidLollipop).isTrue();
assertThat(transformedHost).isEqualTo(HOST_WITHOUT_HTTP);
assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED);
assertThat(single).isNotNull();
assertThat(observer.isDisposed()).isTrue();
assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED);
assertThat(transformedHost).isEqualTo(HOST_WITHOUT_HTTP);
assertThat(single).isNotNull();
assertThat(disposable.isDisposed()).isTrue();
assertThat(isAtLeastAndroidLollipop).isTrue();
assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED);
assertThat(isIdleMode).isTrue();
assertThat(observer.isDisposed()).isTrue();
assertThat(observable).isNotNull();
assertThat(isAtLeastAndroidMarshmallow).isFalse();
assertThat(isIdleMode).isFalse();
assertThat(transformedHost).isEqualTo(HOST_WITH_HTTPS);
assertThat(transformedHost).isEqualTo(HOST_WITH_HTTPS);
assertThat(methods.length).isEqualTo(predefinedNumberOfMethods + publicMethodsInApi);
assertThat(observable).isNotNull();
assertThat(isIdleMode).isFalse();
assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED);
assertThat(observable).isNotNull();
assertThat(transformedHost).isEqualTo(HOST_WITHOUT_HTTP);
assertThat(isAtLeastAndroidMarshmallow).isTrue();
assertThat(reactiveNetwork).isNotNull();
assertThat(settings).isNotNull();
assertThat(transformedHost).isEqualTo(HOST_WITH_HTTPS);
assertThat(isIdleMode).isFalse();
assertThat(observable).isNotNull();
assertThat(isConnected).isFalse();
assertEquals(dd.getOrder(), 0); assertEquals(dd.getCrate(), 1); assertEquals(dd.getSlot(), 2); assertEquals(dd.getChannel(), 3); assertEquals(dd.getSector(), 4); assertEquals(dd.getLayer(), 5); assertEquals(dd.getComponent(), 6); assertEquals(dd.compare(dd2), true);
assertEquals(v1.compare(v2), 0.0, 1e-6); assertEquals(v1.compareWeighted(v2), 0.0, 1e-6);
assertEquals(p1.euclideanDistance(p2), 5.0, 1e-6);
assertTrue(srstimejacardIndex.get(key).equals( timejacardIndex.get(key)));
assertTrue(tweets.length == 6);
assertTrue(wordLineCounts.get(".").firstObject() == 12);
assertTrue(wordLineCounts.get(".").firstObject() == 24);
assertTrue(wordLineCounts.get(".").firstObject() == 24);
assertTrue(!file.exists()); assertTrue(file.exists());
assertTrue(tweets.length == 22);
assertTrue(lr.equals(lr2)); assertTrue(lr.calculateError(ipairs) < 5);
assertTrue(wordLineCounts.get(".").firstObject() == 12); assertTrue(sum == nenglish);
assertTrue(wordLineCounts.get(".").firstObject() == 12);
assertTrue(ds.numInstances() == 178); assertTrue(ds.size() == 3);
assertEquals(Math.log(x) / Math.log(2), LogHistogram.approxLog2(x), 0.01); assertTrue("Insufficient range", x > 1e6);
assertEquals(sum, x.headSum(node)); assertEquals(last, x.count(x.last()));
assertEquals(IntAVLTree.NIL, x.floorSum(-1)); assertTrue(x.headSum(floorNode) <= i); assertTrue(next == IntAVLTree.NIL || x.headSum(next) > i);
assertEquals(String.format("%d:", i), ref.get(i).intValue(), n);
assertEquals(2.77, Comparison.llr(count), 0.01); assertEquals(2.09, Comparison.llr(count), 0.01); assertEquals(3.55, Comparison.llr(count), 0.01);
assertEquals(IntAVLTree.NIL, x.floor(-30)); assertEquals(centroid.mean(), x.mean(x.floor(centroid.mean() + 0.1)), 0);
assertEquals(0, order[0]);
assertTrue(Double.isNaN(digest.quantile(q)));
assertEquals(5 - i, x[i]); assertEquals(5, x[0]); assertEquals(2, x[1]); assertEquals(3, x[2]); assertEquals(4, x[3]); assertEquals(1, x[4]); assertEquals(5, x[0]); assertEquals(2, x[1]); assertEquals(3, x[2]); assertEquals(4, x[3]); assertEquals(1, x[4]); assertEquals(6 - i, x[i]);
assertEquals(i, keys[i], 0); assertEquals(i, keys[i], 0);
assertThat(query, containsString("MATCH (n:A) DETACH DELETE n"));
assertThat(loader, notNullValue());
assertThat(configuration, notNullValue());
assertThat(namesOfIdProperties.size(), equalTo(1)); assertThat(namesOfIdProperties, hasItem(idPropertyName));
assertThat(ai, notNullValue());
assertThat(capturedMessages, hasItems(containsString(a3.asString() + " was expected, but is not present")));
assertNotNull(dataSetList); assertThat(dataSetList.size(), equalTo(2)); assertNotNull(doc1); assertThat(doc1.entrySet().size(), equalTo(2)); assertNotNull(doc2); assertThat(doc2.entrySet().size(), equalTo(2)); assertThat(doc1, equalTo(doc2));
assertNotNull(invocation.getContext()); assertThat(invocation.getTestMethod().get(), equalTo(getClass().getMethod("prepareMocks"))); assertThat(invocation.getTestClass(), equalTo(getClass())); assertFalse(invocation.getException().isPresent()); assertThat(invocation.getFeatureResolver().shouldCleanupAfter(), equalTo(Boolean.TRUE)); assertThat(invocation.getTestInstance(), notNullValue());
assertThat(ai, notNullValue());
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("JSON_TABLE_1", "JSON_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertTrue(FACTORY.supportsDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver"));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(4)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(DOCUMENT_1, DOCUMENT_2));
assertTrue(FACTORY.supportsDriver("org.postgresql.Driver"));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertTrue(isEqual);
assertThat(operation, equalTo(MongoDbOperations.INSERT));
assertThat(priority, equalTo(0));
assertThat(priority, equalTo(10));
assertThat(clazz, equalTo(subClassB));
assertThat(privateField, equalTo(value));
assertThat(configuration, notNullValue());
assertTrue(hasConfiguration);
assertThat(feature, notNullValue());
assertThat(value, instanceOf(Boolean.class)); assertThat(value, equalTo(Boolean.TRUE));
assertThat(feature, notNullValue());
assertThat(clazz, equalTo(entityClass));
assertThat(loader, notNullValue());
assertThat(value, instanceOf(Double.class)); assertThat(value, equalTo(10.0));
assertThat(operation, equalTo(DatabaseOperation.CLEAN_INSERT));
assertFalse(isSupported);
assertThat(columns, notNullValue()); assertThat(columns.size(), equalTo(2));
assertThat(loader, notNullValue());
assertThat(resource, notNullValue()); assertThat(new File(resource.toURI()).exists(), equalTo(Boolean.TRUE));
assertThat(result, equalTo(Boolean.TRUE));
assertThat(feature, notNullValue());
assertThat(STRATEGY_PROVIDER.cleanInsertStrategy(), equalTo(Neo4JOperations.CLEAN_INSERT));
assertNotNull(dataSetList); assertThat(dataSetList.size(), equalTo(2)); assertNotNull(ds1); assertThat(ds1.getTableNames().length, equalTo(2)); assertNotNull(ds2); assertThat(ds2.getTableNames().length, equalTo(2)); assertThat(ds1, equalTo(ds2));
assertThat(feature, notNullValue());
assertThat(connection, notNullValue()); assertThat(connection.getClass(), equalTo(DatabaseConnection.class));
assertThat(emf, nullValue());
assertThat(emf, equalTo(entityManagerFactory));
assertThat(operation, equalTo(MongoDbOperations.REFRESH));
assertTrue(FACTORY.supportsDriver("org.hsqldb.jdbc.JDBCDriver")); assertTrue(FACTORY.supportsDriver("org.hsqldb.jdbcDriver"));
assertThat(ai, notNullValue());
assertThat(loader, notNullValue());
assertThat(loader, notNullValue());
assertThat(provider, notNullValue());
assertThat(ai, notNullValue());
assertThat(loader, notNullValue());
assertThat(columns, notNullValue()); assertThat(columns.size(), equalTo(2)); assertThat(columns, hasItem(column1)); assertThat(columns, hasItem(column2));
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString(COLLECTION_NAME_1 + " was expected to be empty, but has <" + 1 + "> entries"));
assertThat(loader, notNullValue());
assertNotNull(invocation.getContext()); assertThat(invocation.getTestMethod().get(), equalTo(getClass().getMethod("prepareMocks"))); assertThat(invocation.getTestClass(), equalTo(getClass())); assertFalse(invocation.getException().isPresent()); assertThat(invocation.getFeatureResolver().shouldCleanupAfter(), equalTo(Boolean.TRUE)); assertThat(invocation.getTestInstance(), notNullValue());
assertThat(loader, notNullValue());
assertThat(columns, notNullValue()); assertThat(columns.size(), equalTo(3));
assertTrue(FACTORY.supportsDriver("com.mysql.jdbc.Driver"));
assertThat(ai, notNullValue());
assertThat(feature, notNullValue());
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("XLS_TABLE_1", "XLS_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertThat(priority, equalTo(2));
assertThat(ai, notNullValue());
assertThat(namesOfIdProperties.size(), equalTo(1)); assertThat(namesOfIdProperties, hasItem(idPropertyName));
assertThat(configuration, notNullValue());
assertTrue(isEqual);
assertTrue(FACTORY.supportsDriver("org.netezza.Driver"));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(MsSqlDataTypeFactory.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(value, instanceOf(Long.class)); assertThat(value, equalTo(10l));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(0));
assertThat(priority, equalTo(3));
assertThat(STRATEGY_PROVIDER.insertStrategy(), equalTo(Neo4JOperations.INSERT));
assertThat(edge, notNullValue()); assertThat(edge.getId(), equalTo(edgeId)); assertThat(edge.getLabels(), equalTo(edgeLabels)); assertThat(edge.getAttributes().size(), equalTo(1)); assertThat(edge.getSourceNode(), equalTo(nodeA)); assertThat(edge.getTargetNode(), equalTo(nodeB)); assertThat(idAttribute.getName(), equalTo("value")); assertThat(idAttribute.getValue(), equalTo("moo")); assertThat(idAttribute.isId(), equalTo(Boolean.FALSE));
assertFalse(hasConfiguration);
assertThat(priority, equalTo(1));
assertThat(privateField, equalTo(value));
assertThat(namesOfIdProperties.size(), equalTo(2)); assertThat(namesOfIdProperties, hasItems(compositeIdPropertyName + "." + id1PropertyName, compositeIdPropertyName + "." + id2PropertyName));
assertThat(feature, notNullValue());
assertThat(feature, notNullValue());
assertThat(priority, equalTo(5));
assertThat(priority, equalTo(0));
assertThat(it.hasNext(), equalTo(Boolean.TRUE)); assertThat(it.next(), equalTo(token)); assertThat(it.hasNext(), equalTo(Boolean.FALSE));
assertThat(errorCollector.amountOfErrors(), equalTo(2)); assertThat(e.getMessage(), containsString("failed in 2 case")); assertThat(e.getMessage(), containsString( TABLE_1_NAME + " was expected to be present and to contain <" + TABLE_1_ENTRIES + "> entries, but not found"));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(Db2DataTypeFactory.class)); assertThat(metadataHandler, notNullValue()); assertThat(metadataHandler.getClass(), equalTo(Db2MetadataHandler.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(invocation.getTestClass(), equalTo(TestClass.class)); assertThat(invocation.getContext(), equalTo(ctx)); assertThat(invocation.getFeatureResolver(), notNullValue());
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(query, containsString("CREATE (n1:A {id:1}),(n2:A {id:2}),(n1)-[e1:E {id:3}]->(n2)"));
assertThat(list.size(), equalTo(12)); assertThat(list, everyItem(not(containsString("comment")))); assertThat(list, everyItem(not(startsWith(" ")))); assertThat(list, everyItem(not(startsWith("\\t")))); assertThat(list, everyItem(not(endsWith(" ")))); assertThat(list, everyItem(not(endsWith("\\t"))));
assertFalse(isSupported);
assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(DOCUMENT_1, DOCUMENT_2));
assertThat(feature, notNullValue());
assertTrue(isEqual);
assertThat(namesOfIdProperties.size(), equalTo(1)); assertThat(namesOfIdProperties, hasItem(idPropertyName));
assertThat(loader, notNullValue());
assertThat(operation, equalTo(DatabaseOperation.INSERT));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString(TABLE_1_NAME + " was expected to be present and to contain <" + TABLE_1_ENTRIES + "> entries"));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(4)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(DOCUMENT_1, DOCUMENT_2));
assertThat(captured, not(nullValue())); assertThat(captured, instanceOf(EntityManagerProducerProxy.class));
assertThat(loader, notNullValue());
assertThat(feature, notNullValue());
assertTrue(FACTORY.supportsDriver("com.mckoi.JDBCDriver"));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(NetezzaDataTypeFactory.class)); assertThat(metadataHandler, notNullValue()); assertThat(metadataHandler.getClass(), equalTo(NetezzaMetadataHandler.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(capturedMessages, hasItems(containsString("Nodes with A labels were expected to be present, but not found"), containsString("Nodes with B labels were expected to be present, but not found"), containsString(a.asString() + " was expected, but is not present"), containsString(b.asString() + " was expected, but is not present"), containsString(e.asString() + " was expected, but is not present")));
assertTrue(hasConfiguration);
assertThat(priority, equalTo(3));
assertThat(provider, notNullValue());
assertThat(clazz, equalTo(subClassB));
assertThat(descriptors, notNullValue()); assertThat(descriptors.size(), equalTo(4)); assertThat(descriptors, not(hasItem(nullValue())));
assertThat(ai, notNullValue());
assertThat(operation, equalTo(MongoDbOperations.UPDATE));
assertThat(connection, notNullValue()); assertThat(connection.getClass(), equalTo(DatabaseConnection.class));
assertTrue(hasConfiguration);
assertThat(configuration, notNullValue());
assertThat(capturedCollectionNames.size(), equalTo(2)); assertThat(capturedCollectionNames, hasItems(COLLECTION_NAME_1, COLLECTION_NAME_2)); assertThat(capturedIndexes.size(), equalTo(2)); assertThat(capturedIndexes, hasItems(index1, index2)); assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(values1, values2));
assertThat(e.getCause(), equalTo(exception));
assertThat(loader, notNullValue());
assertThat(strategyExecutor, notNullValue());
assertThat(operation, equalTo(MongoDbOperations.CLEAN_INSERT));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(Oracle10DataTypeFactory.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(capturedCollectionNames.size(), equalTo(2)); assertThat(capturedCollectionNames, hasItems(COLLECTION_NAME_1, COLLECTION_NAME_2)); assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(DOCUMENT_1, DOCUMENT_2));
assertThat(connection, notNullValue()); assertThat(connection, instanceOf(H2Connection.class));
assertFalse(methodDecorators.isEmpty());
assertThat(dataSource.getUsername(), equalTo("user")); assertThat(dataSource.getPassword(), equalTo("password")); assertThat(dataSource.getDriverClassName(), equalTo("driver")); assertThat(dataSource.getUrl(), equalTo("url"));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(0));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), not(equalTo(DefaultDataTypeFactory.class))); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(loader, notNullValue()); assertThat(graph, notNullValue());
assertThat(bean, notNullValue());
assertNotNull(obj1); assertNotNull(obj2); assertThat(obj1, equalTo(obj2));
assertThat(resource, notNullValue()); assertThat(resource, equalTo(tmpFile.toURI().toURL()));
assertThat(configuration.getProperty(DatabaseConfig.FEATURE_QUALIFIED_TABLE_NAMES), equalTo("true")); assertThat(configuration.getProperty(DatabaseConfig.PROPERTY_BATCH_SIZE), equalTo("1000")); assertThat(configuration.keySet().size(), equalTo(2));
assertThat(feature, notNullValue());
assertThat(loader, notNullValue());
assertThat(errorCollector.amountOfErrors(), equalTo(0));
assertThat(e.getCause(), equalTo(exception));
assertThat(resource, notNullValue()); assertThat(new File(resource.toURI()).exists(), equalTo(Boolean.FALSE));
assertThat(invocationCaptor.getValue().getTestClass(), equalTo(testClass)); assertThat(invocationCaptor.getValue().getTestClass(), equalTo(testClass));
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case"));
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("XML_TABLE_1", "XML_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertThat(STRATEGY_PROVIDER.updateStrategy(), equalTo(Neo4JOperations.UPDATE));
assertThat(feature, notNullValue());
assertThat(ai, notNullValue());
assertTrue(FACTORY.supportsDriver("org.h2.Driver"));
assertThat(namesOfIdProperties.size(), equalTo(2)); assertThat(namesOfIdProperties, hasItems(compositeIdPropertyName + "." + id1PropertyName, compositeIdPropertyName + "." + id2PropertyName));
assertTrue(hasConfiguration);
assertThat(ai, notNullValue());
assertThat(value, instanceOf(Long.class)); assertThat(value, equalTo(10l));
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString(TABLE_1_NAME + " was expected to be empty, but has <" + TABLE_1_ENTRIES + "> entries"));
assertThat(clazz, equalTo(entityClass));
assertThat(feature, notNullValue());
assertThat(priority, equalTo(2));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(HsqldbDataTypeFactory.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertFalse(classDecorators.isEmpty());
assertThat(feature, notNullValue());
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(0));
assertThat(connection, notNullValue()); assertThat(connection, instanceOf(H2Connection.class));
assertThat(priority, equalTo(100));
assertThat(namesOfIdProperties.size(), equalTo(2)); assertThat(namesOfIdProperties, hasItems(compositeIdPropertyName + "." + id1PropertyName, compositeIdPropertyName + "." + id2PropertyName));
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("CSV_TABLE_1", "CSV_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertThat(capturedCollectionNames.size(), equalTo(2)); assertThat(capturedCollectionNames, hasItems(COLLECTION_NAME_1, COLLECTION_NAME_2)); assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(values1, values2));
assertThat(loader, notNullValue());
assertThat(operation, equalTo(DatabaseOperation.UPDATE));
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString( TABLE_1_NAME + " was expected to be present and to contain <" + TABLE_1_ENTRIES + "> entries, but not found"));
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("XLS_TABLE_1", "XLS_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertThat(privateField, equalTo(value));
assertThat(loader, notNullValue()); assertThat(dataSet, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("YAML_TABLE_1", "YAML_TABLE_2")); assertThat(table1.getRowCount(), equalTo(3)); assertThat(table2.getRowCount(), equalTo(1));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(MySqlDataTypeFactory.class)); assertThat(metadataHandler, notNullValue()); assertThat(metadataHandler.getClass(), equalTo(MySqlMetadataHandler.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(STRATEGY_PROVIDER.refreshStrategy(), equalTo(Neo4JOperations.REFRESH));
assertTrue(configuration.keySet().isEmpty());
assertTrue(FACTORY.supportsDriver("oracle.jdbc.OracleDriver")); assertTrue(FACTORY.supportsDriver("oracle.jdbc.driver.OracleDriver"));
assertNotNull(obj1); assertNotNull(obj2); assertThat(invocation.getTestClass(), equalTo(ClassA.class)); assertThat(invocation.getContext(), equalTo(ctx)); assertThat(invocation.getFeatureResolver(), notNullValue());
assertThat(invocationCaptor.getValue().getTestClass(), equalTo(testClass)); assertThat(invocationCaptor.getValue().getTestClass(), equalTo(testClass));
assertThat(capturedCollectionNames.size(), equalTo(2)); assertThat(capturedCollectionNames, hasItems(COLLECTION_NAME_1, COLLECTION_NAME_2)); assertThat(capturedDocuments.size(), equalTo(2)); assertThat(capturedDocuments, hasItems(values1, values2));
assertThat(strategyExecutor, notNullValue());
assertThat(loader, notNullValue());
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString(TABLE_1_NAME + " was not expected, but is present and contains <" + TABLE_1_ENTRIES + "> entries"));
assertTrue(hasConfiguration);
assertThat(priority, equalTo(3));
assertThat(operation, equalTo(DatabaseOperation.REFRESH));
assertThat(loader, notNullValue());
assertThat(configuration, notNullValue());
assertTrue(isSupported);
assertThat(loader, notNullValue());
assertThat(errorCollector.amountOfErrors(), equalTo(1)); assertThat(e.getMessage(), containsString("failed in 1 case")); assertThat(e.getMessage(), containsString( TABLE_1_NAME + " was expected to be present and to contain <" + TABLE_1_ENTRIES + "> entries, but not found"));
assertThat(loader, notNullValue());
assertThat(loader, notNullValue()); assertThat(document, notNullValue()); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems("JSON_COLLECTION_1", "JSON_COLLECTION_2")); assertThat(collection1.size(), equalTo(3)); assertThat(collection2.size(), equalTo(1));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(H2DataTypeFactory.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertFalse(isEqual);
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(capturedCollectionNames.size(), equalTo(2)); assertThat(capturedCollectionNames, hasItems(USER_DEFINED_COLLECTION_NAME_1, USER_DEFINED_COLLECTION_NAME_2));
assertThat(errorCollector.amountOfErrors(), equalTo(2)); assertThat(e.getMessage(), containsString("failed in 2 case")); assertThat(e.getMessage(), containsString(COLLECTION_NAME_1 + " was expected to be present, but not found")); assertThat(e.getMessage(), containsString(DOCUMENT_1 + " was expected in [" + COLLECTION_NAME_1 + "], but is not present"));
assertThat(ai, notNullValue());
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(4)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(value, instanceOf(Double.class)); assertThat(value, equalTo(10.0));
assertThat(dbConnection, notNullValue()); assertThat(typeFactory, notNullValue()); assertThat(typeFactory.getClass(), equalTo(MckoiDataTypeFactory.class)); assertThat(dbConnection.getSchema(), equalTo(schema));
assertThat(invocation.getTestClass(), equalTo(TestClass.class)); assertThat(invocation.getContext(), equalTo(ctx)); assertThat(invocation.getFeatureResolver(), notNullValue());
assertThat(priority, equalTo(1));
assertThat(capturedMessages, hasItems(containsString("No nodes with A labels were expected, but there are <1> nodes present"), containsString("No nodes with B labels were expected, but there are <1> nodes present")));
assertTrue(FACTORY.supportsDriver("com.ibm.db2.jcc.DB2Driver"));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(0)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(0));
assertThat(namesOfIdProperties.size(), equalTo(2)); assertThat(namesOfIdProperties, hasItems(compositeIdPropertyName + "." + id1PropertyName, compositeIdPropertyName + "." + id2PropertyName));
assertThat(namesOfIdProperties.size(), equalTo(1)); assertThat(namesOfIdProperties, hasItem(idPropertyName));
assertThat(strategyExecutor, notNullValue()); assertThat(getRecordCountFromTable(connection, "XML_TABLE_1"), equalTo(4)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_2"), equalTo(1)); assertThat(getRecordCountFromTable(connection, "XML_TABLE_3"), equalTo(1));
assertThat(feature, notNullValue());
assertThat(specificationDescription, containsString(TestClass.class.getSimpleName())); assertThat(specificationDescription, not(containsString("$")));
assertThat(feature, notNullValue());
assertThat(strategyExecutor, notNullValue());
assertThat(feature, notNullValue());
assertThat(testObject1, instanceOf(EnhancedProxy.class));
assertThat(errorCollector.amountOfErrors(), equalTo(2)); assertThat(e.getMessage(), containsString("failed in 2 case")); assertThat(e.getMessage(), containsString( TABLE_1_NAME + " was expected to be present and to contain <" + TABLE_1_ENTRIES + "> entries, but not found")); assertThat(e.getMessage(), containsString(TABLE_3_NAME + " was not expected, but is present and contains <" + TABLE_3_ENTRIES + "> entries"));
assertThat(privateField, equalTo(value));
assertNotNull(dataSetList); assertThat(dataSetList.size(), equalTo(2)); assertNotNull(graph1); assertThat(graph1.vertexSet().size(), equalTo(6)); assertThat(graph1.edgeSet().size(), equalTo(4)); assertNotNull(graph2); assertThat(graph2.vertexSet().size(), equalTo(6)); assertThat(graph2.edgeSet().size(), equalTo(4)); assertThat(graph1, equalTo(graph1));
assertThat(feature, notNullValue());
assertFalse(isEqual);
assertThat(priority, equalTo(0));
assertThat(value, instanceOf(String.class)); assertThat(value, equalTo("foo"));
assertEquals(BigDecimal.valueOf(10), TypeUtils.castToBigDecimal(Short.valueOf("10"))); assertEquals(BigDecimal.valueOf(10), TypeUtils.castToBigDecimal(BigDecimal.valueOf(10))); assertEquals(BigDecimal.valueOf(10), TypeUtils.castToBigDecimal("10")); assertEquals(BigDecimal.valueOf(10), TypeUtils.castToBigDecimal("10", BigDecimal.valueOf(10))); assertEquals(BigDecimal.valueOf(10), TypeUtils.castToBigDecimal(null, BigDecimal.valueOf(10)));
assertEquals(1, TypeUtils.castToNumber(null, 1));
assertTrue(TypeUtils.equals((Object) null, (Object) null)); assertFalse(TypeUtils.equals(o1, (Object) null)); assertFalse(TypeUtils.equals((Object) null, o2)); assertTrue(TypeUtils.equals(o1, o1)); assertFalse(TypeUtils.equals(o1, o2)); assertTrue(TypeUtils.equals(1, Integer.valueOf(1))); assertTrue(TypeUtils.equals("a", "a")); assertFalse(TypeUtils.equals("a", "b"));
assertEquals(true, (boolean) TypeUtils.convertValue(Boolean.TYPE, Boolean.TRUE)); assertEquals(Boolean.TRUE, TypeUtils.convertValue(Boolean.class, Boolean.TRUE));
assertEquals(10, TypeUtils.castToInt(Short.valueOf("10"))); assertEquals(10, TypeUtils.castToInt(Integer.valueOf("10"))); assertEquals(10, TypeUtils.castToInt("10")); assertEquals(10, TypeUtils.castToInt("10", 10)); assertEquals(10, TypeUtils.castToInt(null, 10));
assertEquals(0, types.size());
assertEquals(10L, TypeUtils.castToLong(Integer.valueOf("10"))); assertEquals(10L, TypeUtils.castToLong(Long.valueOf("10"))); assertEquals(10L, TypeUtils.castToLong("10")); assertEquals(10L, TypeUtils.castToLong("10", 10L)); assertEquals(10L, TypeUtils.castToLong(null, 10L));
assertEquals(BigInteger.valueOf(10), TypeUtils.castToBigInteger(Short.valueOf("10"))); assertEquals(BigInteger.valueOf(10), TypeUtils.castToBigInteger(BigInteger.valueOf(10))); assertEquals(BigInteger.valueOf(10), TypeUtils.castToBigInteger("10")); assertEquals(BigInteger.valueOf(10), TypeUtils.castToBigInteger("10", BigInteger.valueOf(10))); assertEquals(BigInteger.valueOf(10), TypeUtils.castToBigInteger(null, BigInteger.valueOf(10)));
assertEquals(1, logger.records().size()); assertEquals("Removing provider1\\n", logger.getFileContent());
assertThat(service.sayHello(input), equalTo(output));
assertEquals((byte) 10, TypeUtils.castToByte(Byte.valueOf("10"))); assertEquals((byte) 10, TypeUtils.castToByte(Integer.valueOf("10"))); assertEquals((byte) 10, TypeUtils.castToByte("10")); assertEquals((byte) 10, TypeUtils.castToByte("10", (byte) 10)); assertEquals((byte) 10, TypeUtils.castToByte(null, (byte) 10));
assertEquals(1, logger.records().size()); assertEquals("Removing provider1\\n", logger.getFileContent());
assertEquals(10d, TypeUtils.castToDouble(Integer.valueOf("10"))); assertEquals(10d, TypeUtils.castToDouble(Double.valueOf("10"))); assertEquals(10d, TypeUtils.castToDouble("10")); assertEquals(10d, TypeUtils.castToDouble("10", 10d)); assertEquals(10d, TypeUtils.castToDouble(null, 10d));
assertEquals((short) 10, TypeUtils.castToShort(Short.valueOf("10"))); assertEquals((short) 10, TypeUtils.castToShort(Integer.valueOf("10"))); assertEquals((short) 10, TypeUtils.castToShort("10")); assertEquals((short) 10, TypeUtils.castToShort("10", (short) 10)); assertEquals((short) 10, TypeUtils.castToShort(null, (short) 10));
assertEquals(0, handlers.size());
assertEquals(1, TypeUtils.castToNumber(1));
assertEquals(10f, TypeUtils.castToFloat(Integer.valueOf("10"))); assertEquals(10f, TypeUtils.castToFloat(Float.valueOf("10"))); assertEquals(10f, TypeUtils.castToFloat("10")); assertEquals(10f, TypeUtils.castToFloat("10", 10f)); assertEquals(10f, TypeUtils.castToFloat(null, 10f));
assertEquals(result, event);
assertEquals(1, listener.getNumberOfTimesInvoked());
assertEquals(result, event);
assertEquals(events.size(), 1); assertEquals(events.get(0), event);
assertEquals(events.size(), 1); assertEquals(events.get(0), event);
assertEquals(68, StandardPseudoComponentFactory.getAll().size());
assertThat(e.getMessage()).isEqualTo("Check css:selector-naming-convention (Selectors should follow a naming convention): " + "format parameter \\"(\\" is not a valid regular expression.");
assertEquals(Has.class, function.getClass()); assertEquals(function.getName(), "has"); assertEquals(function.getLinks().size(), 1);
assertThat(profile.getName()).isEqualTo("SonarQube Way"); assertThat(profile.getLanguage()).isEqualTo("scss"); assertThat(profile.getActiveRulesByRepository("scss")).hasSize(83); assertThat(validation.hasErrors()).isFalse();
assertThat(repository.name()).isEqualTo("SonarQube"); assertThat(repository.language()).isEqualTo("scss"); assertThat(repository.rules()).hasSize(99); assertThat(rule).isNotNull(); assertThat(rule.name()).isEqualTo(ScssVariableNamingConventionCheck.class.getAnnotation(Rule.class).name());
assertThat(repository.name()).isEqualTo("SonarQube"); assertThat(repository.language()).isEqualTo("less"); assertThat(repository.rules()).hasSize(88); assertThat(rule).isNotNull(); assertThat(rule.name()).isEqualTo(DeprecatedEscapingFunctionCheck.class.getAnnotation(Rule.class).name());
assertEquals(RepeatingLinearGradient.class, function.getClass()); assertEquals(function.getName(), "repeating-linear-gradient"); assertEquals(function.getLinks().size(), 1); assertEquals(function.isExperimental(), false); assertEquals(function.isObsolete(), false);
assertEquals(FirstLine.class, identifier.getClass()); assertEquals(identifier.getName(), "first-line"); assertEquals(identifier.getLinks().size(), 1);
assertEquals(Has.class, function.getClass()); assertEquals(function.getName(), "has"); assertEquals(function.getLinks().size(), 1);
assertEquals(Has.class, function.getClass()); assertEquals(function.getName(), "has"); assertEquals(function.getLinks().size(), 1);
assertThat(profile.getName()).isEqualTo("SonarQube Way"); assertThat(profile.getLanguage()).isEqualTo("less"); assertThat(profile.getActiveRulesByRepository("less")).hasSize(72); assertThat(validation.hasErrors()).isFalse();
assertThat(repository.name()).isEqualTo("SonarQube"); assertThat(repository.language()).isEqualTo("css"); assertThat(repository.rules()).hasSize(87); assertThat(CheckList.getEmbeddedCssChecks()).hasSize(repository.rules().size() - 6); assertThat(todoRule).isNotNull(); assertThat(todoRule.name()).isEqualTo(TodoTagCheck.class.getAnnotation(Rule.class).name());
assertEquals(0, StandardPseudoIdentifierFactory.getAll().stream().filter(StandardPseudoIdentifier::isObsolete).count());
assertEquals( 28, StandardAtRuleFactory.getAll() .stream() .filter(StandardAtRule::isExperimental) .collect(Collectors.toList()) .size());
assertEquals(RepeatingLinearGradient.class, function.getClass()); assertEquals(function.getName(), "repeating-linear-gradient"); assertEquals(function.getLinks().size(), 1); assertEquals(function.isExperimental(), false); assertEquals(function.isObsolete(), false);
assertEquals(Rotatex.class, function.getClass()); assertEquals(function.getName(), "rotatex"); assertEquals(function.getLinks().size(), 1);
assertEquals(Keyframes.class, atRule.getClass()); assertEquals(atRule.getName(), "keyframes"); assertEquals(atRule.getLinks().size(), 1); assertFalse(atRule.isObsolete()); assertTrue(atRule.isExperimental());
assertEquals(Border.class, property.getClass()); assertEquals(property.getName(), "border"); assertEquals(property.getLinks().size(), 2); assertEquals(property.getLinks().get(0), "https: assertEquals(property.getLinks().get(1), "https: assertEquals(property.getVendors().size(), 0); assertEquals(property.isObsolete(), false);
assertThat(profile.getName()).isEqualTo("SonarQube Way"); assertThat(profile.getLanguage()).isEqualTo("css"); assertThat(profile.getActiveRulesByRepository("css")).hasSize(72); assertThat(validation.hasErrors()).isFalse();
assertEquals(CharacterVariant.class, atRule.getClass()); assertEquals(atRule.getName(), "character-variant"); assertEquals(atRule.getLinks().size(), 2); assertEquals(atRule.getLinks().get(0), "https: assertEquals(atRule.getLinks().get(1), "https: assertEquals(atRule.isObsolete(), false); assertEquals(atRule.isExperimental(), true);
assertEquals(35, StandardAtRuleFactory.getAll().size());
assertEquals(Charset.class, atRule.getClass()); assertEquals(atRule.getName(), "charset"); assertEquals(atRule.getLinks().size(), 1);
assertEquals(14, StandardPseudoFunctionFactory.getAll().size());
assertEquals(BorderEnd.class, property.getClass()); assertEquals(property.getName(), "border-end"); assertEquals(property.getLinks().size(), 0); assertEquals(property.getValidators().size(), 0); assertEquals(property.getVendors().size(), 0); assertEquals(property.isObsolete(), true);
assertEquals(Rotatex.class, function.getClass()); assertEquals(function.getName(), "rotatex"); assertEquals(function.getLinks().size(), 1);
assertEquals(FirstLine.class, identifier.getClass()); assertEquals(identifier.getName(), "first-line"); assertEquals(identifier.getLinks().size(), 1);
assertEquals(UnknownProperty.class, property.getClass()); assertEquals("bla-bla", property.getName()); assertEquals(property.getLinks().size(), 0); assertEquals(property.getValidators().size(), 0); assertEquals(property.getVendors().size(), 0); assertEquals(property.isObsolete(), false);
assertEquals(7, StandardPseudoFunctionFactory.getAll().stream().filter(StandardPseudoFunction::isExperimental).count());
assertEquals(Rotatex.class, function.getClass()); assertEquals(function.getName(), "rotatex"); assertEquals(function.getLinks().size(), 1);
assertEquals(54, StandardPseudoIdentifierFactory.getAll().size());
assertEquals(614, StandardPropertyFactory.getAll().size());
assertEquals(FirstLine.class, identifier.getClass()); assertEquals(identifier.getName(), "first-line"); assertEquals(identifier.getLinks().size(), 1);
assertEquals(Charset.class, atRule.getClass()); assertEquals(atRule.getName(), "charset"); assertEquals(atRule.getLinks().size(), 1);
assertEquals(27, StandardPseudoIdentifierFactory.getAll().stream().filter(StandardPseudoIdentifier::isExperimental).count());
assertEquals(Border.class, property.getClass()); assertEquals(property.getName(), "border"); assertEquals(property.getLinks().size(), 2); assertEquals(property.getLinks().get(0), "https: assertEquals(property.getLinks().get(1), "https: assertEquals(property.getVendors().size(), 0); assertEquals(property.isObsolete(), false);
assertEquals(TransitionProperty.class, property.getClass()); assertEquals(property.getName(), "transition-property"); assertEquals(property.getLinks().size(), 1);
assertTrue(indOut[0] == ind1[0]); assertTrue(indOut[1] == ind1[1]); assertTrue(indOut[2] == ind1[2]); assertTrue(indOut[3] == ind2[0]); assertTrue(indOut[4] == ind2[1]); assertTrue(indOut.length == ind1.length + ind2.length);
assertEquals(4, results.length); assertSame(populationToAppend, results[0]); assertSame(inputPopulations[0], results[1]); assertSame(inputPopulations[1], results[2]); assertSame(inputPopulations[2], results[3]);
assertTrue(pop1.getIndividuals() == indOut || indOut.length == 0);
assertEquals((6+2+4+10), gray.length); assertEquals(gray.length, this.representation.genomeLength); assertTrue((6+2+4+10) >= result.length()); assertTrue(binary.length >=result.length());
assertEquals((6+2+4+10), gray.length); assertEquals((6+2+4+10), result.length); assertEquals(binary.length, result.length);
assertTrue(popsOut.length == 2); assertTrue(popsOut[0].getIndividuals().length == 2); assertTrue(popsOut[1].getIndividuals().length == 2); assertTrue(indOut.getFitness() == 9.0); assertTrue(indOut.getFitness() == 4.0); assertTrue(indOut.getFitness() == 1.0); assertTrue(indOut.getFitness() == 1.0);
assertTrue((6+2+4+10) >= result.length()); assertEquals(binary.length, gray.length);
assertEquals(MathUtils.sumSizes(this.descriptor.variablesLengths), this.representation.genome.length); assertEquals(expected.length, result.length);
assertTrue(popsOut.length == 1); assertTrue(popsOut[0].getIndividuals().length == 2); assertTrue(ind != null);
assertEquals(1, results.length); assertSame(populationToAppend, results[0]);
assertNotSame(copies, source);
assertEquals(expected.length, result.length);
assertEquals(this.expectedGenome1.length, result1.getTotalLength()); assertEquals(this.expectedGenome2.length, result2.getTotalLength()); assertEquals("at index " + i, expectedGenome1[i], result1.getGeneAt(i)); assertEquals("at index " + i, expectedGenome2[i], result2.getGeneAt(i));
assertEquals(10140.2011, distance1, 0.0001); assertEquals(10140.2011, distance2, 0.0001); assertTrue(distance1 == 0.0);
assertEquals(5, winners.size()); assertSame(this.inputIndividuals[0], winners.get(0)); assertSame(this.inputIndividuals[1], winners.get(1)); assertSame(this.inputIndividuals[3], winners.get(2)); assertSame(this.inputIndividuals[3], winners.get(3)); assertSame(this.inputIndividuals[4], winners.get(4));
assertEquals(expected.length, boolGenome.length); assertEquals(expected[i], boolGenome[i]);
assertTrue(indOut[0] == ind1[0]); assertTrue(indOut[1] == ind1[1]); assertTrue(indOut[2] == ind1[2]); assertNotSame(pop1.getIndividuals(), indOut); assertNotSame(ind1, indOut); assertTrue(indOut.length == ind1.length);
assertEquals(4, results.length); assertSame(inputPopulations[0], results[0]); assertSame(inputPopulations[1], results[1]); assertSame(inputPopulations[2], results[2]); assertSame(populationToAppend, results[3]);
assertTrue(popsOut.length == 1); assertTrue(popsOut[0].getIndividuals().length == 4); assertTrue(ind != null);
assertTrue(childrenPops.length == 1); assertTrue(children.length == 2); assertEquals(0.0, children[0].getRepresentation().getDoubleValue()[0]); assertEquals(0.5, children[0].getRepresentation().getDoubleValue()[1]); assertEquals(-1.5, children[1].getRepresentation().getDoubleValue()[0]); assertEquals(-1.75, children[1].getRepresentation().getDoubleValue()[1]);
assertTrue(copies[i] == null); assertNotSame(copies[i], source[i]); assertEquals(birthday, copies[i].getBirthday()); assertNotSame(copies[i].getRepresentation(), source[i].getRepresentation()); assertNotSame(copies, source);
assertTrue(copies == null);
assertEquals((6+2+4+10), result.length); assertEquals(binary.length, result.length); assertEquals(binary.length, gray.length);
assertEquals(MathUtils.sumSizes(this.descriptor.variablesLengths), this.representation.genomeLength); assertEquals(this.representation.genomeLength, expected.length); assertEquals(expected[i], this.representation.genome.get(i));
assertTrue(popsOut != null); assertTrue(popsOut.length == 1); assertTrue(outPop.getIndividuals().length == 100); assertTrue(((double)fittestCount/100) > 0.65);
assertTrue(ind.getFitness() == 9.0); assertTrue(ind.getFitness() == 4.0); assertTrue(ind.getFitness() == 1.0); assertTrue(ind.getFitness() == 1.0); assertTrue(ind.getFitness() == 0.0);
assertEquals(function.getDimension(), descriptor.getNumVariables());
assertEquals(null, results);
assertNotNull(bestIndividual); assertSame(ind2, bestIndividual);
assertEquals(cutPoints, flips);
assertEquals(MathUtils.sumSizes(this.descriptor.variablesLengths), this.representation.genome.length); assertEquals(this.representation.genome.length, expected.length); assertEquals(expected[i], this.representation.genome[i]);
assertEquals(this.expectedGenome1.length, result1.getTotalLength()); assertEquals(this.expectedGenome2.length, result2.getTotalLength()); assertEquals("at index " + i, expectedGenome1[i], result1.getGeneAt(i)); assertEquals("at index " + i, expectedGenome2[i], result2.getGeneAt(i));
assertEquals(5.0, ind1.getValue(), 0.0); assertEquals(8.0, ind2.getValue(), 0.0); assertEquals(13.0, ind3.getValue(), 0.0); assertEquals(10.0, ind4.getValue(), 0.0);
assertTrue(indOut[0] == ind1[0]); assertTrue(indOut[1] == ind1[1]); assertTrue(indOut[2] == ind1[2]); assertNotSame(pop1.getIndividuals(), indOut); assertNotSame(ind1, indOut); assertTrue(indOut.length == ind1.length);
assertTrue(flips == cutPoints);
assertEquals(3, winners.size()); assertSame(this.inputIndividuals[0], winners.get(0)); assertSame(this.inputIndividuals[2], winners.get(1)); assertSame(this.inputIndividuals[3], winners.get(2));
assertTrue(accumulatedProbabilities.length == 5); assertTrue(accumulatedProbabilities[0] == (2.0/15)); assertTrue(accumulatedProbabilities[1] == (6.0/15)); assertTrue(accumulatedProbabilities[2] == (7.0/15)); assertTrue(accumulatedProbabilities[3] == (12.0/15)); assertTrue(accumulatedProbabilities[4] == 1.0);
assertNotSame(copies, source);
assertEquals(1, results.length); assertSame(populationToAppend, results[0]);
assertEquals(expected.length, genome.length); assertEquals(expected[i], genome[i]);
assertThat(desc).isNotNull(); assertThat(desc.getAddr().isReachable(1)).isTrue(); assertThat(desc.getPort()).isEqualTo(9000);
assertThat(desc).isNotNull(); assertThat(desc.getAddr().getHostAddress()).isEqualToIgnoringCase( "0:0:0:0:0:acf:0:1"); assertThat(desc.getPort()).isEqualTo(9000);
assertThat(desc).isNotNull(); assertThat(desc.getAddr().isReachable(1)).isTrue(); assertThat(desc.getPort()).isEqualTo(9000);
assertThat(handlers).isNotNull().hasSize(5);
assertThat(configMap).isNotNull(); assertThat(configMap).hasSize(5); assertThat(configMap.containsKey("DEFAULT")); assertThat(configMap.get("DEFAULT")).hasSize(2); assertThat(configMap.get("ACLUSTERCONFIG")).hasSize(1); assertThat(configMap.get("FILTERINGHEADERS")).hasSize(3); assertThat(configMap.get("CONTEXTOVERRIDEEXAMPLE")).hasSize(3);
assertThat(desc).isNotNull(); assertThat(desc.getAddr().isReachable(1)).isTrue(); assertThat(desc.getPort()).isEqualTo(9000);
assertThat(desc).isNotNull(); assertThat(desc.getAddr().isReachable(1)).isTrue(); assertThat(desc.getPort()).isEqualTo(1);
assertFalse("null is empty", JavaxJson.nonEmptyValue(null)); assertFalse("JsonObject.NULL is empty", JavaxJson.nonEmptyValue(JsonValue.NULL)); assertFalse("an empty JsonArray is empty", JavaxJson.nonEmptyValue(Json.createArrayBuilder().build())); assertFalse("an empty JsonObject is empty", JavaxJson.nonEmptyValue(Json.createObjectBuilder().build())); assertTrue("some string is non-empty", JavaxJson.nonEmptyValue(wrap("foo")));
assertEquals("same value", value, facade.getDepth());
assertSame("expect same severity", severity, simpleViolation.getSeverity()); assertEquals("expect equal packageIds", Collections.singletonList(packId), simpleViolation.getPackages()); assertEquals("expect equal description", description, simpleViolation.getDescription());
assertSame("should be same", prefixes, facade.getNamespacePrefixes());
assertFalse("1 should be false for not even and not a multiple of 3", testOrDefault1(predicate, true).test(1)); assertTrue("2 should be true for even and not a multiple of 3", testOrDefault1(predicate, true).test(2)); assertTrue("3 should be true for multiple of 3", testOrDefault1(predicate, true).test(3));
assertTrue("is true", facade.isCheckedOut());
assertSame("same if already facade", alreadyFacade, NodeFacade.wrap(alreadyFacade, sessionFacade)); assertTrue("is VersionHistory", NodeFacade.wrap(versionHistory, sessionFacade) instanceof VersionHistoryFacade); assertTrue("is Version", NodeFacade.wrap(version, sessionFacade) instanceof VersionFacade); assertTrue("is Node", NodeFacade.wrap(justNode, sessionFacade) instanceof NodeFacade);
assertEquals("expect json", key(Rule.keys().type(), "ALLOW") .key(Rule.keys().pattern(), "[0-9]*").get(), allowsDigits.toJson());
assertSame("is same value", value, facade.childNodeJoinCondition(arg1, arg2));
assertEquals("compose concat then uppercase", "SENTINELSENTINEL", compose1(sentinel::concat, String::toUpperCase).apply(sentinel));
assertEquals("collected three errors", 3, collectedErrors.size()); assertArrayEquals("ints should contain no multiples of 3, up to ten 10", new Integer[]{1, 2, 4, 5, 7, 8, 10}, ints2);
assertEquals("expect ids", expectIds, subToParent);
assertTrue("should have pending changes", facade.hasPendingChanges());
assertEquals("expect version", expectVersion, mojo.getOakpalCoreVersion());
assertTrue("empty by default", mojo.listScanFiles().isEmpty()); assertEquals("expect files", Arrays.asList(artifactFile, fileFile), scanFiles);
assertTrue("silenced it", didIt.getNow(false));
assertSame("result is same as left", abc, result); assertEquals("result is expected", expected, result);
assertNull("expect null path", DefaultSlingSimulator.separatorsToUnix(null)); assertEquals("expect new path", "/some/path", DefaultSlingSimulator.separatorsToUnix("\\\\some\\\\path")); assertEquals("expect same path", "/some/path", DefaultSlingSimulator.separatorsToUnix("/some/path"));
assertTrue("contains alphaVal key", builder.containsKey("alphaVal")); assertEquals("associated alpha token", "a", builder.get("alphaVal")); assertTrue("contains bravoVal key", builder.containsKey("bravoVal")); assertEquals("associated bravo token", "b", builder.get("bravoVal")); assertFalse("not contains unknownVal key", builder.containsKey("unknownVal"));
assertTrue("is true", facade.hasVersionLabel(version, arg));
assertTrue("is true", facade.isMember(someUser));
assertSame("same value", value, facade.getSecondsRemaining());
assertSame("should be the same nothing", Nothing.instance, throwingVoidToNothing2(consumer).tryApply("", 2)); assertEquals("latch value should be 2", 2, latch.get());
assertTrue("is successful", opearResult.isSuccess()); assertNotNull("not null", opearFile); assertNotNull("control checklist URL not null", controlCl.getResource(checklistName)); assertNotNull("checklist URL not null: " + printClassLoader(classLoader), embeddedChecklistUrl);
assertTrue("did it", didIt.getNow(false)); assertTrue("did it again", didItAgain.getNow(false));
assertNull("patchParentPath null", options.getPatchParentPath()); assertEquals("patchParentPath /path", "/path", options.getPatchParentPath()); assertNull("patchParentPath null", delegate.getPatchParentPath()); assertEquals("patchParentPath /path", "/path", delegate.getPatchParentPath());
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:tmp_foo_bar"), idLatch.getNow(null)); assertEquals("path is", "/tmp/foo/bar/cat", pathLatch.getNow(""));
assertSame("is same value", value, facade.getVersionableUUID());
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertEquals("fooValue name is name", "nt:foo", JsonCnd.qValueString(fooValue, resolver)); assertEquals("path equals path", "/nt:foo/nt:foo", JsonCnd.qValueString(fooPathValue, resolver)); assertEquals("string equals string", "some string", JsonCnd.qValueString(stringValue, resolver));
assertTrue("is true", facade.allows(subject));
assertTrue("is true", facade.hasVersionLabel(arg));
assertSame("same value", value, facade.getDecimal());
assertTrue("foo mapping is retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals))); assertFalse("non-foo mappings are not retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals).negate()));
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertSame("is same value", value, facade.join(arg1, arg2, arg3, arg4));
assertTrue("is true", facade.isSessionScoped());
assertArrayEquals("filtered should contain tree and four", new String[]{"tree", "four"}, filtered);
assertFalse("isDryRun false", options.isDryRun()); assertTrue("isDryRun true", options.isDryRun()); assertFalse("isDryRun false", delegate.isDryRun()); assertTrue("isDryRun true", delegate.isDryRun());
assertTrue("Result hasNext()", it.hasNext()); assertFalse("Result has no more", it.hasNext()); assertEquals("Path is correct", resultPath, next.getPath()); assertEquals("sling:resourceSuperType value is correct", superPath, next.getProperty("sling:resourceSuperType").getString());
assertEquals("exect same rules", expectRules, Rules.fromJsonArray(arr() .val(key(Rule.keys().type(), "allow").key(Rule.keys().pattern(), "[0-9]*")) .val(key(Rule.keys().type(), "allow").key(Rule.keys().pattern(), "[a-z]*")) .get()));
assertNull("never dequeue an installable", instance().dequeueInstallable());
assertEquals("expect passthrough", "testKey", check.getString("testKey")); assertEquals("expect from bundle", "yeKtset", check.getString("testKey"));
assertTrue("future should be done: " + latch, latch.isDone()); assertSame("nothing should be returned", Nothing.instance, nothing); assertSame("latched should be same as input", sentinel, latch.get());
assertEquals("same value", value, facade.getScore(arg1), 1.0D);
assertSame("should be same", uris, facade.getURIs());
assertEquals("empty list to empty list", new ArrayList<ProgressCheck>(), Locator .loadFromCheckSpecs(Collections.emptyList()));
assertTrue("did it", didIt.getNow(false));
assertSame("same value", value, facade.createNodeTypeTemplate());
assertSame("should return same array", policies, facade.getEffectivePolicies(principals));
assertSame("same value", value, facade.getEventJournal());
assertEquals("name search should return one privilege reference", Collections.singleton("crx:replicate"), names);
assertTrue("foo mapping is retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals))); assertFalse("non-foo mappings are not retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals).negate()));
assertNull("property should be null", facade.getPropertyOrNull("/jcr:system/someProp")); assertEquals("someProp should have someVal value", "someVal", facade.getPropertyOrNull("/foo/someProp").getString());
assertSame("same value", value, facade.getLockOwner());
assertTrue("manifest was read, and produced correct value for Content-Package-Id", manifestWasRead.isDone() && manifestWasRead.get());
assertSame("same value", value, facade.getAllowedLifecycleTransistions());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertFalse("should not have permission", facade.hasPermission("", "")); assertTrue("should have permission", facade.hasPermission("/correct/path", Session.ACTION_READ));
assertTrue("invalid manifest when null", OpearFile.validateOpearManifest(null).isFailure()); assertTrue("invalid manifest when no bsn specified", OpearFile.validateOpearManifest( new Manifest(new ByteArrayInputStream(new byte[0]))) .isFailure());
assertEquals("same value in latch", (Long) value, latch.getNow(0L));
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertEquals("Expect two good paths for directory manifest: " + dirMapped, 2, dirMapped.values().iterator().next().size()); assertEquals("Expect two good paths for jar manifest: " + mapped, 2, mapped.values().iterator().next().size()); assertEquals("Expect two entries in both mapped: " + bothMapped, 2, bothMapped.size()); assertTrue("Expect two good paths for all entries when both mapped: " + bothMapped, bothMapped.values().stream().allMatch(resources -> resources.size() == 2));
assertEquals("latch value should be", 1 + 2 + 4 + 5 + 7 + 8 + 10, latch.get());
assertEquals("delegate name", "delegate", withoutAlias.getCheckName());
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null)); assertSame("same arg3", arg3, slot3.getNow(null));
assertTrue("expect args for startedScan", argRecord.stream() .anyMatch(entry -> "startedScan".equals(entry.getKey()) && entry.getValue().length == 1));
assertSame("is same value", value, facade.getVersionLabels(version));
assertArrayEquals("ints should contain only 2", new Integer[]{2}, ints);
assertSame("same value", value, facade.getPath());
assertSame("is same value", value, facade.length(arg1));
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertFalse("arg2 should not be done", slot2.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar"));
assertNull("should be null", facade.getURI("")); assertSame("should be same", uri, facade.getURI(prefix));
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar"));
assertEquals("expect json object for value", key("foo", "one").get(), converter().convertChild(xml("foosFoo.xml", "map"), eval)); assertEquals("expect json object for value", key("bar", "one").get(), converter().convertChild(xml("foosBar.xml", "map"), eval));
assertSame("same value", value, facade.getValues());
assertSame("same value", value, facade.getColumns());
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:tmp_foo_bar"), idLatch.getNow(null)); assertEquals("path is", "/", pathLatch.getNow(""));
assertSame("same value", value, facade.getMixinNodeTypes());
assertSame("same value", value, facade.getConstraint());
assertEquals("same path", path, fromFacade.getPath()); assertTrue("is facade", fromFacade instanceof NodeFacade);
assertEquals("isAutoSaveThreshold false", -1, options.getAutoSaveThreshold()); assertEquals("isAutoSaveThreshold true", 1, options.getAutoSaveThreshold()); assertEquals("isAutoSaveThreshold false", -1, delegate.getAutoSaveThreshold()); assertEquals("isAutoSaveThreshold true", 1, delegate.getAutoSaveThreshold());
assertSame("same value", value, facade.getOrderings());
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("same value", value, facade.getUUID());
assertSame("is same value", value, facade.column(arg1, arg2, arg3));
assertEquals("same equals for same objects", initial, initial); assertEquals("same hash for same objects", initial.hashCode(), initial.hashCode()); assertEquals("same equals for equal objects", initial, equalToInitial); assertEquals("same hash for equals objects", initial.hashCode(), equalToInitial.hashCode()); assertNotEquals("different equals for nonequal objects", initial, notEqual); assertNotEquals("different hash for nonequal objects", initial.hashCode(), notEqual.hashCode());
assertSame("same value", value, facade.getPath(arg1));
assertEquals("compose get sentinel with uppercase", "SENTINEL", compose0(() -> sentinel, String::toUpperCase).get());
assertEquals("original same as collected", original, original.stream().collect(Result.logAndRestream()).collect(Collectors.toSet())); assertEquals("original same as collected with message", original, original.stream().collect(Result.logAndRestream("collect message")).collect(Collectors.toSet())); assertEquals("original same as collected", original, original.stream() .collect(new Result.RestreamLogCollector<>(LoggerFactory.getLogger(specialLoggerError), "withError")) .collect(Collectors.toSet()));
assertNotNull("expect call for beforeSlingInstall", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]);
assertFalse("!mustInherit if template is null", hasTemplate.mustInherit()); assertFalse("!mustInherit if template is blank", hasTemplate.mustInherit()); assertTrue("mustInherit if template is non-empty", hasTemplate.mustInherit());
assertNull("should be null", facade.getSuccessors());
assertSame("should be same values", values, facade.getDescriptorValues(key)); assertNull("should be null", facade.getDescriptorValues("")); assertNull("should be null for null", facadeNull.getDescriptorValues(key));
assertSame("is same value", value, facade.getPrivilege(name));
assertSame("expect json true for value", JsonValue.TRUE, converter().convertChild(xml("fooTrue.xml"), eval)); assertEquals("expect json number for value", JavaxJson.wrap(-500), converter().convertChild(xml("fooNumber.xml"), eval)); assertEquals("expect json string \'-500\' for value", JavaxJson.wrap(-500), converter().convertChild(xml("fooNumber.xml", "number"), eval));
assertTrue("empty string is empty", Util.isEmpty("")); assertFalse("empty string is empty", Util.isEmpty("full"));
assertEquals("mapValue should result in same list", Arrays.asList(2, 4, 6), collected);
assertTrue("root node should be same as /", facade.getRootNode().isSame(facade.getNodeOrNull("/"))); assertNull("/foo node should be null", facade.getNodeOrNull("/foo"));
assertTrue("is true", facade.isNodeType(value));
assertTrue("can convert json objects", converter().canConvert(JsonObject.class)); assertFalse("cannot convert objects", converter().canConvert(Object.class));
assertSame("same classloader with empty classpath", parent, opearFile.getPlanClassLoader(parent));
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertEquals("expect -opear classifier", "some-artifactId-opear", mojo.getBundleSymbolicName()); assertEquals("expect no classifier", "some-artifactId", mojo.getBundleSymbolicName());
assertFalse("not exists at empty path", facade.nodeExists("")); assertTrue("exists at correct path", facade.nodeExists(path));
assertEquals("same path", path, fromFacade.getPath()); assertTrue("is facade", fromFacade instanceof VersionFacade);
assertSame("is same value", value, facade.getVersionableIdentifier());
assertEquals("expect json", key("checklists", arr("checklist1", "checklist2")).get(), readObject);
assertSame("default classLoader should be same as tccl when set", newCl, Util.getDefaultClassLoader()); assertSame("default classLoader should be same as Util.class.getClassLoader() when tccl is null", Util.class.getClassLoader(), Util.getDefaultClassLoader());
assertSame("is same value", value, facade.fullTextSearch(arg1, arg2, arg3));
assertSame("is same value", value, facade.descendantNode(arg1, arg2));
assertTrue("expect null config", result.isSuccess() && !result.getOrDefault(null).isPresent());
assertSame("should be same descriptorKeys", keys, facade.getDescriptorKeys()); assertEquals("should be empty", 0, facadeNull.getDescriptorKeys().length);
assertSame("is same value", value, facade.getLockTokens());
assertEquals("get message", "Failure(failure)", result.toString());
assertTrue("log is not empty", logEntry.isPresent()); assertTrue("log starts with \'No websterTargets", logEntry.get().message.startsWith("No websterTargets"));
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertFalse("expect json string might not be list ", converter().mightBeList(xml("fooBar.xml"))); assertTrue("expect json array might be list ", converter().mightBeList(xml("foosFoo.xml"))); assertFalse("expect json object might not be list ", converter().mightBeList(xml("foosBar.xml")));
assertEquals("same lengths", value, facade.getLengths());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("same value", value, facade.getBinary());
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar")); assertTrue("hook processor was called with specific class loader", latch.getNow(false));
assertEquals("same value", value, facade.getDouble(), 1.0D);
assertSame("same value", value, facade.getBindVariableNames());
assertSame("same value", value, facade.getHolds(path));
assertArrayEquals("ints should contain 1 and 2", new Integer[]{1, 2}, ints);
assertTrue("empty repoInits get failure to cache", urlResult.isFailure());
assertTrue("is true", facade.isMultiple());
assertTrue("same value", facade.hasProperty(path));
assertSame("same value", value, facade.getID());
assertEquals("debugFilter should not interfere with stream", Arrays.asList("one", "two", "three"), Stream.of("one", "two", "three") .filter(Util.debugFilter(logger, "counting {}")) .collect(Collectors.toList()));
assertTrue("default matches all", Rules.DEFAULT_ALLOW.matches("/foo")); assertTrue("allows digits matches digits", allowsDigits.matches("123")); assertFalse("allows digits doesn\'t match letters", allowsDigits.matches("abc"));
assertTrue("should be real definition", def instanceof JcrPackageDefinitionImpl);
assertTrue("SOME_KEY should be true", facade.isStandardDescriptor("SOME_KEY")); assertFalse("anyString key should be false", facade.isStandardDescriptor("ANOTHER_KEY")); assertFalse("null should return false", facadeNull.isStandardDescriptor("SOME_KEY"));
assertFalse("not hasNonNull on empty object for any key", hasNonNull(JsonValue.EMPTY_JSON_OBJECT, "any")); assertFalse("not hasNonNull for key with json null", hasNonNull(key("foo", null).get(), "foo")); assertTrue("hasNonNull for key with non-null json value", hasNonNull(key("foo", "bar").get(), "foo"));
assertFalse("expect callback not done", callback.isDone()); assertSame("expect callback complete with", ResourceBundle.getBundle(getClass().getName()), callback.getNow(null));
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:tmp_foo_bar"), idLatch.getNow(null));
assertSame("is same value", value, facade.getPrivileges(path));
assertNotNull("reported violations should not be null", echo.getReportedViolations()); assertTrue("reported violations should be empty", echo.getReportedViolations().isEmpty());
assertSame("success tees itself", success, success.teeLogError()); assertSame("failure tees itself", failure, failure.teeLogError());
assertEquals("expect json", expect, complete.toJson());
assertTrue("all violations are MINOR", report.getViolations().stream() .allMatch(viol -> viol.getSeverity().equals(Severity.MINOR)));
assertSame("same value", value, facade.getPrimaryNodeTypes());
assertTrue("reports has one report with two violations: " + reports.stream().findFirst(), reports.stream().anyMatch(report -> report.getViolations().size() == 2));
assertTrue("expect true for empty", check1.shouldExpectAfterExtract(PackageId.fromString("foo"))); assertFalse("expect false", check2.shouldExpectAfterExtract(PackageId.fromString("adamcin:test:1.0"))); assertTrue("expect true", check2.shouldExpectAfterExtract(PackageId.fromString("my_packages:test:1.0")));
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar")); assertTrue("hook processor was called", latch.getNow(false));
assertSame("should be same", prefixes, facade.getPrefixes());
assertTrue("testOutputFile exists", testOutputFile.exists()); assertTrue("testOutputJson exists", testOutputJson.exists());
assertTrue("admin should have read on root", facade.hasPermission("/", Session.ACTION_READ)); assertTrue("admin should have read and set_property on root", facade.hasPermission("/", Session.ACTION_READ, Session.ACTION_SET_PROPERTY));
assertTrue("did it", didIt.getNow(false));
assertEquals("expect no violations", Collections.emptyList(), graph.getReportedViolations()); assertEquals("expect no violations after startedScan", Collections.emptyList(), graph.getReportedViolations());
assertEquals("same type", type, facade.getType());
assertTrue("my_pack in toString", simpleViolation.toString().contains("my_pack")); assertTrue("description in toString", simpleViolation.toString().contains(description));
assertEquals("should be the same for same", base, base); assertEquals("should be the same for same params", base, same);
assertEquals("same value", value, facade.getLong());
assertFalse("has no path when empty", root.hasPath()); assertTrue("has path", root.hasPath()); assertEquals("getPath()", "/testSet", root.getPath()); assertEquals("getPath()", "/testWith", root.withPath("/testWith").getPath());
assertSame("same key in latch", varName, fromLatch.getKey()); assertSame("same value in latch", value, fromLatch.getValue());
assertFalse("opearResult should not be a failure", opearResult.isFailure()); assertNotNull("opearFile is not null", opearFile); assertArrayEquals("classpath should be", new String[]{"classes", "test-classes"}, opearFile.metadata.getPlanClassPath());
assertTrue("reports has one report with no violations: " + reports.stream().findFirst(), reports.stream().anyMatch(report -> report.getViolations().size() == 0));
assertEquals("* equals *", JsonCnd.TOKEN_RESIDUAL, func.tryApply(JsonCnd.QNAME_RESIDUAL)); assertEquals("nt:folder equals nt:folder", "nt:folder", func.tryApply(ntFolder));
assertEquals("name search should return a single reference", 1, names.size());
assertSame("is same value", value, facade.fullTextSearchScore(arg1));
assertEquals("onValue should add 1, 2, and 3 (6) to latch", 6, latch.get());
assertTrue("test for is empty", test.test("")); assertFalse("test for is not empty", test.test("abcde"));
assertSame("expect same parentId", expectParentId, installable.getParentId()); assertSame("expect same jcrPath", expectJcrPath, installable.getJcrPath()); assertEquals("expect same properties", expectProperties, params.getProperties()); assertEquals("expect same servicePid", expectServicePid, params.getServicePid()); assertEquals("expect same factoryPid", expectFactoryPid, params.getFactoryPid()); assertNull("expect null parseError", params.getParseError());
assertEquals("empty root toJson should be empty", JsonValue.EMPTY_JSON_OBJECT, emptyRoot.toJson()); assertEquals("path root toJson should have path", key(keys.path(), path).get(), pathRoot.toJson()); assertEquals("primaryType root toJson should have primaryType", key(keys.primaryType(), primaryType).get(), primaryTypeRoot.toJson()); assertEquals("mixinTypes root toJson should have mixinTypes", key(keys.mixinTypes(), mixinTypes).get(), mixinTypeRoot.toJson());
assertArrayEquals(names, new JcrSessionFacade(session, false).getAttributeNames());
assertEquals("instance1", listener1.pattern(), options.getCndPattern().pattern()); assertEquals("instance2", listener2.pattern(), options.getCndPattern().pattern()); assertEquals("instance1", listener1.pattern(), delegate.getCndPattern().pattern()); assertEquals("instance2", listener2.pattern(), delegate.getCndPattern().pattern());
assertTrue("is true", facade.isLive());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("same value", value, facade.getPath());
assertEquals("violation reported", 1, check.getReportedViolations().size()); assertTrue("violations are now empty", check.getReportedViolations().isEmpty());
assertTrue("Custom node store was used", usedCustomNodeStore.getNow(false));
assertNull("should be null in wrong path", facade.getPrivileges("", principals)); assertSame("should hasPrivileges", privileges, facade.getPrivileges("/foo", principals));
assertSame("same value", value, facade.getNodeType(type));
assertSame("same value", value, facade.getEventJournal(1, "", true, null, null));
assertEquals("success maps to SUCCESS", "SUCCESS", successMapped.getOrDefault("success")); assertSame("failures have same exception", failure.getError().get(), failureMapped.getError().get());
assertTrue("opear result should be success ", opearResult.isSuccess()); assertTrue("opear plan should be empty", plan.map(OakpalPlan::getChecklists).getOrDefault(Arrays.asList("not a checklist")).isEmpty());
assertNotNull("got package manager", new DefaultPackagingService().getPackageManager());
assertNull("home fixture provider is null without journal.log", mojo.getFixtureProvider()); assertTrue("log contains correct message", log.any(entry -> entry.message.startsWith("segmentstore/journal.log"))); assertNotNull("home fixture provider not null", homeProvider); assertTrue("should be performed with home", homePerformed.getNow(false));
assertSame("same value", value, facade.getRetentionPolicy(path));
assertTrue("reports has one report with one violation", reports.stream().anyMatch(report -> report.getViolations().size() == 1));
assertNotNull("expect call for appliedRepoInitScripts", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]); assertSame("same arg4", arg4, call.getValue()[4]);
assertSame("should be same session", jcrSession, facade.getSession());
assertTrue("log is not empty", logEntry.isPresent()); assertTrue("log starts with \'No source Oak", logEntry.get().message.startsWith("No source Oak"));
assertEquals("expect files", Arrays.asList(file1.getAbsoluteFile(), file2.getAbsoluteFile()), machine.getPreInstallFiles());
assertSame("is same value", value, facade.literal(arg1));
assertFalse("getOwnVersion", newMojo().getOwnVersion().isEmpty());
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertEquals("collected three errors", 3, results.stream().filter(Result::isFailure).count());
assertSame("empty object returns empty object for any key", JsonValue.EMPTY_JSON_OBJECT, objectOrEmpty(JsonValue.EMPTY_JSON_OBJECT, "someKey")); assertEquals("object returns present object for present key with object value", Json.createObjectBuilder().add("foo", "bar").build(), objectOrEmpty(key("someKey", key("foo", "bar")).get(), "someKey"));
assertTrue("is node", fromFacade instanceof Row); assertEquals("same path", path, nodeFromFacade.getPath()); assertTrue("is facade", nodeFromFacade instanceof RowFacade);
assertEquals("latch value should be 3", 3, latch.get());
assertTrue("fail to cache entry", OpearFile.cacheJar(new JarFile(deepTestTarget), cacheDir).isFailure()); assertTrue("fail to cache directory entry", OpearFile.cacheJar(new JarFile(deepTestTarget), cacheDir).isFailure());
assertTrue("foo mapping is retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals))); assertFalse("non-foo mappings are not retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals).negate()));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertEquals("expect json string", JavaxJson.wrap("bar"), converter().convertChild(xml("fooBar.xml"), eval));
assertTrue("error is of type", eLatch.getNow(null) instanceof RuntimeException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:tmp_foo_bar"), idLatch.getNow(null));
assertFalse("should not be done", latch.isDone()); assertEquals("should be done", "done", latch.getNow(""));
assertSame("same value", value, facade.getDate());
assertEquals("check filename should be", "noslash.js", new ScriptProgressCheck(mock(Invocable.class), mock(ScriptProgressCheck.ScriptHelper.class), new URL("file:noslash.js")).getCheckName());
assertArrayEquals("sort reverse sort should be stable", keys.orderedKeys().toArray(new String[0]), inputValues1); assertArrayEquals("sort unknown keys after known keys", expectValues2, inputValues2); assertArrayEquals("sort unknown keys after known keys", expectValues2b, inputValues2b); assertArrayEquals("sort unknown keys using String.compareTo", expectValues3, inputValues3);
assertEquals("reports not empty", 8, reports.size());
assertTrue("root node should be same as /", facade.getRootNode().isSame(facade.getItemOrNull("/"))); assertNull("/foo node should be null", facade.getItemOrNull("/foo"));
assertEquals("json array as array", arr("one", "two").get(), converter().convertChild(xml("fooArray.xml", "jsonarray"), eval)); assertEquals("json array as string", wrap("[\\"one\\", \\"two\\"]"), converter().convertChild(xml("fooArray.xml"), eval));
assertSame("same value", value, facade.getStoredQueryPath());
assertEquals("checklists", Arrays.asList(checklist1, checklist2), builder().withChecklists(Arrays.asList(checklist1, checklist2)) .build().getChecklists());
assertTrue("is true", facade.isDeclaredMember(someUser));
assertTrue("success is present", Result.success("success").toOptional().isPresent()); assertFalse("failure is not present", Result.failure("failure").toOptional().isPresent());
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertNotNull("expect call for readManifest", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]);
assertNotNull("expect call for beforeExtract", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]); assertSame("same arg4", arg4, call.getValue()[4]); assertEquals("same arg5", arg5, Arrays.asList((PackageId[]) call.getValue()[5]));
assertFalse("archiveRoot should not exist", archiveRoot.exists());
assertSame("is same value", value, facade.getSupportedPrivileges(path));
assertFalse("is not skipped", mojo.isIndividuallySkipped()); assertTrue("is skipped", mojo.isIndividuallySkipped());
assertEquals("mapKey should result in same list", new LinkedHashSet<>(Arrays.asList("one_one", "two_two", "three_three")), collected);
assertTrue("non-existing file can\'t be read", OpearFile.readExpectedManifest( new File("src/test/resources/OpearFileTest/non-existing-file.mf")) .isFailure());
assertNotEquals("success gets non-default", defaultValue, Result.success("success").getOrElse(() -> defaultValue)); assertEquals("failure gets default", defaultValue, Result.failure("failure").getOrElse(() -> defaultValue));
assertSame("same number", number, converter().readNumberFromValue("", number)); assertEquals("toString equals", number, converter().readNumberFromValue("", number.toString())); assertNull("should be null", converter().readNumberFromValue("", Boolean.TRUE));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertEquals("/correct/path with correct id", path, facade.getNode(path).getPath());
assertSame("is same value", value, facade.or(arg1, arg2));
assertEquals("value for two is a squared long 4", 4L, composed.apply("two").longValue()); assertEquals("value for three is a squared long 9", 9L, composed.apply("three").longValue());
assertSame("same value", value, facade.getSource());
assertSame("same value", value, facade.getDefinition());
assertNotNull("getPrincipalManager should not be null", facade.getPrincipalManager());
assertSame("instance1", listener1, options.getPathMapping()); assertSame("instance2", listener2, options.getPathMapping()); assertSame("instance1", listener1, delegate.getPathMapping()); assertSame("instance2", listener2, delegate.getPathMapping());
assertEquals("latch value should be", "refreshed", latch.getNow(""));
assertEquals("expect json array for value", arr("one").get(), converter().convertChild(xml("foosFoo.xml", "list"), eval)); assertEquals("expect json array for value", arr("one").get(), converter().convertChild(xml("foosBar.xml", "list"), eval));
assertFalse("1 should be false for not even and not a multiple of 3", testOrDefault2(predicate, true).test("", 1)); assertTrue("2 should be true for even and not a multiple of 3", testOrDefault2(predicate, true).test("", 2)); assertTrue("3 should be true for multiple of 3", testOrDefault2(predicate, true).test("", 3));
assertNull("unwrap null to null", NodeFacade.unwrap(null)); assertSame("same Node delegate", justNodeDelegate, NodeFacade.unwrap(justNodeDelegate)); assertSame("same Node delegate", justNodeDelegate, NodeFacade.unwrap(justNodeFacade)); assertSame("same Version delegate", versionDelegate, NodeFacade.unwrap(versionFacade)); assertSame("same Version delegate", versionHistoryDelegate, NodeFacade.unwrap(versionHistoryFacade));
assertSame("is same value", value, facade.descendantNodeJoinCondition(arg1, arg2));
assertNotNull("cli fixture provider not null", cliProvider); assertTrue("should be performed with cli", cliPerformed.getNow(false));
assertEquals("should convert config", key("bar", "one").get(), converter().fromConfiguration(lookup, config, type, enclosingType, loader, eval, listener));
assertSame("expect same resource bundle", expected, slot.getNow(null));
assertEquals("hash codes should be the same for same object", base.hashCode(), base.hashCode()); assertEquals("hash codes should be the same for same params", base.hashCode(), same.hashCode());
assertTrue("success is success", Result.success("success").isSuccess()); assertFalse("failure is not success", Result.failure("failure").isSuccess());
assertTrue("is true", facade.isNew());
assertFalse("non-empty string", new PlanParams().toString().isEmpty());
assertEquals("size is ", 1, nts.size()); assertEquals("name is", "foo", nts.get(0).getName().getLocalName()); assertEquals("uri is", Name.NS_NT_URI, nts.get(0).getName().getNamespaceURI());
assertSame("expect same artifact", artifactFile, mojo.getScanArtifactFile());
assertSame("NOOP for nulls", DefaultRepoInitFactory.NOOP_PROCESSOR, new DefaultRepoInitFactory(null).newInstance()); assertNotSame("expect non-NOOP nonnulls", DefaultRepoInitFactory.NOOP_PROCESSOR, new DefaultRepoInitFactory(ParserType.class).newInstance());
assertEquals("value of \'one\' should be 1", Integer.valueOf(1), collected.get("one"));
assertEquals("should be equal", size, facade.getSize());
assertSame("same value", value, facade.getDefinition());
assertEquals("constructed size is", 4, constructed.size()); assertTrue("constructed has alpha/alpha checklist", constructed.stream().anyMatch(alphaFilter)); assertTrue("constructed has bravo/bravo-1 checklist", constructed.stream().anyMatch(bravo1Filter)); assertTrue("constructed has bravo/bravo-2 checklist", constructed.stream().anyMatch(bravo2Filter)); assertTrue("constructed has charlie/charlie checklist", constructed.stream().anyMatch(charlieFilter));
assertNotNull("expect non-null instance", instance());
assertTrue("value should be present: " + testHead, testHead.isPresent()); assertSame("value should be same as sentinel", sentinel, testHead.get());
assertNull("should be null", facade.getNamespaceURI("")); assertSame("should be same", uri, facade.getNamespaceURI(prefix));
assertTrue("full plan is successful", fullPlan.isSuccess()); assertNotNull("not null full plan", derived); assertEquals("expect preInstallUrls", expectPreInstallUrls, machine.getPreInstallUrls());
assertTrue("expect log indicating failure to delete global home", logFor(mojo).any(entry -> entry.message.startsWith("Failed to delete temp global")));
assertEquals("json object as object", key("key", "value").get(), converter().convertChild(xml("fooObject.xml", "jsonobject"), eval)); assertEquals("json object as string", wrap("{\\"key\\": \\"value\\"}"), converter().convertChild(xml("fooObject.xml"), eval));
assertSame("is same value", value, facade.not(arg1));
assertEquals("check filename", ScriptProgressCheck.FILENAME_INLINE_SCRIPT, check.getCheckName()); assertEquals("checkJs filename", ScriptProgressCheck.FILENAME_INLINE_SCRIPT, checkJs.getCheckName()); assertEquals("checkConfig filename when null config", ScriptProgressCheck.FILENAME_INLINE_SCRIPT, checkConfigFactory.newInstance(null).getCheckName()); assertEquals("checkConfig foobar when null config", "foobar", checkConfigFactory.newInstance(key("checkNameForTest", "foobar").get()).getCheckName());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertEquals("provider should supply sentinel", sentinel, supplier.get());
assertEquals("same value in latch", (Long) value, latch.getNow(0L));
assertTrue("expect nodetypes", new File(archiveRoot, "META-INF/vault/nodetypes.cnd").exists()); assertTrue("expect privileges", new File(archiveRoot, "META-INF/vault/privileges.xml").exists());
assertTrue("same facade", facade.isSame(facade)); assertTrue("same as self", facade.isSame(self)); assertFalse("not same as other", facade.isSame(otherFacade));
assertNull("should be null if either prefix and uri are missing", JcrNs.fromJson(JsonValue.EMPTY_JSON_OBJECT)); assertNull("should be null prefix is missing", JcrNs.fromJson(key(KEYS.prefix(), prefix).get())); assertNull("should be null if uri is missing", JcrNs.fromJson(key(KEYS.uri(), uri).get())); assertNotNull("complete should not be null", complete); assertEquals("complete prefix should be", prefix, complete.getPrefix()); assertEquals("complete prefix should be", uri, complete.getUri());
assertSame("listener1", listener1, options.getListener()); assertSame("listener2", listener2, options.getListener()); assertSame("listener1", listener1, delegate.getListener()); assertSame("listener2", listener2, delegate.getListener());
assertTrue("is true", facade.hasNodes());
assertTrue("is true", facade.isDisabled());
assertSame("same value", value, facade.getValue());
assertTrue("constructed has alpha/alpha checklist", allChecklists.stream().anyMatch(alphaFilter)); assertTrue("constructed has bravo/bravo-1 checklist", allChecklists.stream().anyMatch(bravo1Filter)); assertTrue("constructed has bravo/bravo-2 checklist", allChecklists.stream().anyMatch(bravo2Filter)); assertTrue("constructed has charlie/charlie checklist", allChecklists.stream().anyMatch(charlieFilter));
assertNotNull("expect call for identifyEmbeddedPackage", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]);
assertEquals("zipKeys map should match", Collections.singletonMap("foo", 3), collected);
assertEquals("expect result for id: " + entry.getKey(), entry.getValue(), DefaultSlingSimulator.getResourceId(entry.getKey()));
assertEquals("value of \'one\' should be 2", Integer.valueOf(2), collected.get("one"));
assertTrue("no errors", builder().withPackagingService(new PackagingImpl()).build() .scanPackage(testPackage).get(0).getViolations().isEmpty());
assertEquals("zipValues map should match", Collections.singletonMap("acme", 4), collected);
assertEquals("compose sentinel+true with lowercase", "sentineltrue", compose2((String string, Boolean bool) -> string + bool, String::toLowerCase) .apply(sentinel, true));
assertTrue("should be valid package", opened.isValid());
assertArrayEquals("filtered should contain tree and four", new String[]{"tree", "four"}, filtered);
assertEquals("expect roots", expectRoots, builder().withForcedRoots(expectRoots).build().getForcedRoots());
assertEquals("expect version", expectVersion, mojo.getOakpalCoreVersion());
assertEquals("name search should return one nodetype reference", Collections.singleton("foo:mix"), names);
assertSame("is same value", value, facade.privilegeFromName(name));
assertNull("no fixture provider by default", mojo.getFixtureProvider());
assertSame("expect same resource bundle", expected, slot.getNow(null));
assertNotNull("expect call for identifyPackage", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]);
assertTrue("name search should be empty", names.isEmpty());
assertFalse("should not be done", latch.isDone()); assertEquals("should be done", "done", latch.getNow(""));
assertSame("same value", value, facade.getPath());
assertTrue("foo mapping is retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals))); assertFalse("non-foo mappings are not retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals).negate()));
assertSame("same value", value, facade.getDisabledReason());
assertEquals("traceFilter should not interfere with stream", Arrays.asList("one", "two", "three"), Stream.of("one", "two", "three") .filter(Util.traceFilter(logger, "counting {}")) .collect(Collectors.toList()));
assertSame("instance1", listener1, options.getFilter()); assertSame("instance2", listener2, options.getFilter()); assertSame("instance1", listener1, delegate.getFilter()); assertSame("instance2", listener2, delegate.getFilter());
assertSame("same value", value, facade.getProperty(path));
assertEquals("expect empty json object for empty value", JsonValue.EMPTY_JSON_OBJECT, converter().readJsonObjectFromConfig(xml("emptyFoo.xml"), eval)); assertEquals("expect json object for value", key("foo", "one").get(), converter().readJsonObjectFromConfig(xml("foosFoo.xml"), eval)); assertEquals("expect json object for value", key("bar", "one").get(), converter().readJsonObjectFromConfig(xml("foosBar.xml"), eval));
assertTrue("archiveRoot/jcr_root should exist", new File(archiveRoot, "jcr_root").exists()); assertFalse("archiveRoot/META-INF/vault should not exist", new File(archiveRoot, "META-INF/vault").exists()); assertTrue("archiveRoot/META-INF/vault should exist now", new File(archiveRoot, "META-INF/vault").exists());
assertEquals("entriesToMap should match with puts", parallelConstruction, collected); assertTrue("collected map should be a LinkedHashMap", collected instanceof LinkedHashMap);
assertEquals("key should be foo", "foo", entry.getKey()); assertEquals("value should be bar", "bar", entry.getValue());
assertEquals("mapValue bifunc should result in same list", Arrays.asList(1, 4, 6), collected);
assertEquals("expect passthrough", "testKey", listener.getString("testKey")); assertEquals("expect from bundle", "yeKtset", listener.getString("testKey"));
assertFalse("test value", boolResult); assertEquals("key is correct", "foo", future.getNow(""));
assertEquals("/correct/path with correct id", path, facade.getProperty(path).getPath());
assertEquals("empty json checklist toString should be", expectString, checklist.toString());
assertEquals("delegate name", "delegate", withoutAlias.getCheckName()); assertEquals("alias name", "alias", withAlias.getCheckName());
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar")); assertEquals("latch should have path", "/tmp/foo/bar", latch.getNow(""));
assertEquals("compare based on paths", "/a".compareTo("/b"), left.compareTo(right));
assertEquals("empty list to empty object", 0, JsonCnd.toJson(Collections.emptyList(), getMapping()).size()); assertEquals("json meets json", qJson, toJson);
assertEquals("CheckReports should round trip", new ArrayList<>(originalReports), new ArrayList<>(ReportMapper.readReports(() -> new StringReader(writer.toString()))));
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertNull("unwrap null to null", ItemFacade.unwrap(null)); assertSame("same Item delegate by itself", justNodeDelegate, ItemFacade.unwrap(justNodeDelegate)); assertSame("same Item delegate", justNodeDelegate, ItemFacade.unwrap(justNodeFacade)); assertSame("same Property delegate", propertyDelegate, ItemFacade.unwrap(propertyFacade)); assertSame("same Version delegate", versionDelegate, ItemFacade.unwrap(versionFacade)); assertSame("same VersionHistory delegate", versionHistoryDelegate, ItemFacade.unwrap(versionHistoryFacade));
assertEquals("/correct path with correct uuid", path, facade.getNodeByUUID(uuid).getPath());
assertEquals("no args returns list of strings for JsonArray containing strings", ordinals, mapArrayOfStrings(jsonOrdinals)); assertEquals("reverse function applied to strings", upperOrdinals, mapArrayOfStrings(jsonOrdinals, String::toUpperCase));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null)); assertSame("same arg3", arg3, slot3.getNow(null)); assertSame("same arg4", arg4, slot4.getNow(null));
assertSame("same value", value, facade.getSelectorNames());
assertSame("is same value", value, facade.comparison(arg1, arg2, arg3));
assertEquals("value of \'one\' should be 2", Integer.valueOf(2), collected.get("one")); assertTrue("collected map should be a HashMap", collected instanceof HashMap); assertFalse("collected map should not be a LinkedHashMap", collected instanceof LinkedHashMap);
assertFalse("should not have capability", facade.hasCapability("", "", new Object[0])); assertTrue("should have capability", facade.hasCapability(method, target, args));
assertTrue("SOME_KEY should be true", facade.isSingleValueDescriptor("SOME_KEY")); assertFalse("anyString key should be false", facade.isSingleValueDescriptor("ANOTHER_KEY")); assertFalse("null should return false", facadeNull.isSingleValueDescriptor("SOME_KEY"));
assertSame("is same value", value, facade.ascending(arg1));
assertEquals("expect checks", checks, builder().withProgressChecks(checks).build().getProgressChecks());
assertNull("should be null", facade.getPrefix("")); assertSame("should be same", prefix, facade.getPrefix(uri));
assertTrue("sling:Folder should be imported", ntManager.hasNodeType("sling:Folder")); assertTrue("sling:OrderedFolder should be imported", ntManager.hasNodeType("sling:OrderedFolder")); assertTrue("sling:Folder should be imported", ntManager.hasNodeType("sling:Folder")); assertFalse("sling:OrderedFolder should NOT be imported", ntManager.hasNodeType("sling:OrderedFolder"));
assertTrue("violation reported", check.getReportedViolations().stream() .anyMatch(violation -> violation.getSeverity() == Severity.MAJOR && "description".equals(violation.getDescription()) && violation.getPackages().contains(id0) && violation.getPackages().contains(id1) ));
assertEquals("expect json string", expect, complete.toString());
assertEquals("value is escaped", "some value,other value", Util.escapeManifestHeaderValue("some value", "other value"));
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertTrue("is success " + copyResult, copyResult.isSuccess()); assertTrue("contains key: " + copyMap.keySet(), copyMap.containsKey(expectFilename)); assertTrue("file exists: " + destFile, destFile.isFile());
assertSame("same json object", expectSameObject, converter().readJsonObjectFromValue("key", expectSameObject)); assertSame("null value is JsonValue.NULL", JsonValue.NULL, converter().readJsonObjectFromValue("key", null)); assertEquals("json object as string is equal", expectSameObject, converter().readJsonObjectFromValue("key", expectSameObject.toString()));
assertEquals("getUserID is admin", "admin", facade.getUserID()); assertEquals("getUserID is equal", admin.getUserID(), facade.getUserID());
assertTrue("violation reported", check.getReportedViolations().stream() .anyMatch(violation -> violation.getSeverity() == Severity.SEVERE && "description".equals(violation.getDescription()) && violation.getPackages().contains(id0) && violation.getPackages().contains(id1) ));
assertSame("same value", value, facade.getMixinNodeTypes());
assertTrue("name search should return no references", names.isEmpty());
assertSame("should be same", mockVf, facade.getValueFactory());
assertEquals("left if unequal", "left", operator.apply("left", "right")); assertEquals("right if left equal", "right", operator.apply(value, "right"));
assertSame("same value", value, facade.getStatement());
assertTrue("/home/users/system should exist", session.nodeExists("/home/users/system")); assertTrue("/home/groups should exist", session.nodeExists("/home/groups"));
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertSame("is same value", value, facade.propertyExistence(arg1, arg2));
assertEquals("same value", value, facade.getScore(), 1.0D);
assertTrue("json should have \'message\' key", json.containsKey("message"));
assertFalse("error is not thrown", eLatch.isDone());
assertTrue("skip policy should be skip", options.isSkip()); assertFalse("non skip policy should not be skip", options.isSkip());
assertNotNull("toString is still good", new SimpleReport("", null).toString());
assertEquals("latch value should be", 1 + 2 + 4 + 5 + 7 + 8 + 10, latch.get());
assertArrayEquals("loadedClasses should contain String and Map", new Class<?>[]{String.class, Map.class}, loadedClasses); assertTrue("collectedErrors should contain key " + notARealClassName, collectedErrors.containsKey(notARealClassName)); assertTrue("error should be ClassNotFoundException " + error.getClass().getName(), error instanceof ClassNotFoundException);
assertEquals("expect testKey=testKey", "testKey", check.getHelper().getString("testKey")); assertEquals("expect testKey=yeKtset", "yeKtset", check.getHelper().getString("testKey")); assertEquals("expect testKey=yeKtsettestKey", "yeKtsettestKey", check.getHelper().getString("testKey"));
assertSame("is same value", value, facade.nodeLocalName(arg1));
assertSame("same value", value, facade.createNodeTypeTemplate(def));
assertArrayEquals("filtered should contain 5 and 4", new Integer[]{5, 4}, filtered);
assertTrue("error is of type", eLatch.getNow(null) instanceof RuntimeException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:subtest"), idLatch.getNow(null));
assertEquals("same path", path, fromFacade.getPath()); assertTrue("is facade", fromFacade instanceof PropertyFacade);
assertNull("some other credentials should impersonate null", facade.impersonate(new SimpleCredentials("bar", "foo".toCharArray()))); assertTrue("jackrabbit session impersonation should work", facade.impersonate(credentials) instanceof JackrabbitSession);
assertEquals("single impl check", new ArrayList<ProgressCheck>(Collections.singletonList(new ACheck())), Locator.loadFromCheckSpecs(Collections.singletonList( CheckSpec.fromJson(key("impl", ACheck.class.getName()).get()))));
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("same value", value, facade.getStream());
assertTrue("is true", facade.hasNodeType(type));
assertEquals("empty report name is empty", "", emptyReport.getCheckName()); assertTrue("empty report violations are empty", emptyReport.getViolations().isEmpty()); assertEquals("more report name is more", "more", moreReport.getCheckName()); assertEquals("more report violations are ", Collections.singletonList(violation), moreReport.getViolations());
assertFalse("reports should not be empty", output.isEmpty()); assertFalse("json reports should not be empty", jsonOutput.isEmpty()); assertEquals("read report should match input report at index " + i, reports.get(i), readReports.get(i));
assertNotNull("expect ops processor", DefaultRepoInitFactory.newOpsProcessor());
assertSame("expect specific default", adHocDefault, matched0); assertSame("expect globbal default", Rules.DEFAULT_INCLUDE, matched1); assertSame("expect digits rule", allowsDigits, matchedDigits); assertSame("expect alpha rule", deniesLetters, matchedAlpha);
assertSame("same value", value, facade.getLockToken());
assertEquals("do these equate?", func.apply(sentinel), inferred.apply(sentinel));
assertNull("should be null", facade.getPredecessors());
assertArrayEquals("ints should contain 1 and 2", new Integer[]{1, 2}, ints);
assertSame("same value", value, facade.getPropertyNames(path));
assertSame("same value", value, facade.getSupportedQueryLanguages());
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertFalse("arg2 should not be done", slot2.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertEquals("latch value should be", "loggedout", latch.getNow(""));
assertEquals("jar urls size should be: " + jarUrls, 8, jarUrls.size()); assertEquals("dir urls size should be: " + dirUrls, 8, dirUrls.size());
assertEquals("name search should return one privilege reference", Collections.singleton("foo:canBar"), names);
assertEquals("name is", "folder", folderQType.getName().getLocalName()); assertEquals("uri is", Name.NS_NT_URI, folderQType.getName().getNamespaceURI());
assertFalse("success is not failure", Result.success("success").isFailure()); assertTrue("failure is failure", Result.failure("failure").isFailure());
assertSame("same value", value, facade.createPropertyDefinitionTemplate());
assertTrue("is true", facade.isSystemUser());
assertEquals("/correct/path with correct id", path, facade.getItem(path).getPath());
assertTrue("is true", facade.hasProperties());
assertNotNull("expect nonnull config params", params); assertEquals("expect servicePid", "pid", params.getServicePid()); assertEquals("expect factoryPid", "com.Test", params.getFactoryPid());
assertSame("is same", value, facade.getCreated());
assertEquals("cnd urls pass thru", Arrays.asList(cndA, cndB), builderWithCndUrls.build().getCndUrls());
assertTrue("is true", facade.hasPrivileges(path, value));
assertSame("same value", value, facade.getColumnNames());
assertEquals("no package has base message", expectMessage.apply(""), aseNoPackage.getMessage()); assertEquals("file package package has prefix", expectMessage.apply("(Failed package: " + file.getAbsolutePath() + ") "), aseFile.getMessage()); assertEquals("url package package has prefix", expectMessage.apply("(Failed package: " + url.toString() + ") "), aseUrl.getMessage()); assertEquals("node package package has prefix", expectMessage.apply("(Failed package: " + path + ") "), aseNode.getMessage());
assertTrue("is true", facade.isNode());
assertSame("same value", value, facade.getName());
assertFalse("help should not be empty", output.isEmpty());
assertSame("should be same", names, facade.getAccessibleWorkspaceNames());
assertNull("patchDirectory null", options.getPatchDirectory()); assertSame("patchDirectory file", delegate.getPatchDirectory(), options.getPatchDirectory()); assertNull("patchDirectory null", delegate.getPatchDirectory()); assertSame("patchDirectory file", options.getPatchDirectory(), delegate.getPatchDirectory());
assertTrue("copy instance should be instance of same class", copy instanceof InternalImportOptions); assertSame("same policy", InstallHookPolicy.PROHIBIT, typedCopy.getInstallHookPolicy()); assertSame("same delegate", factoryDelegate, typedCopy.getInstallHookProcessorFactoryDelegate()); assertSame("same reporter", errorListener, typedCopy.getViolationReporter());
assertEquals("expect result for id: " + entry.getKey(), entry.getValue(), DefaultSlingSimulator.removeConfigExtension(entry.getKey()));
assertTrue("keepChanges true", latchDoKeepChanges.getNow(false)); assertFalse("keepChanges false", latchDontKeepChanges.getNow(true));
assertTrue(manager instanceof JcrPackageManagerImpl);
assertFalse("should not hasPrivileges", facade.hasPrivileges("", principals, privileges)); assertTrue("should hasPrivileges", facade.hasPrivileges("/foo", principals, privileges));
assertTrue("is true", facade.hasProperty(path));
assertTrue("is true", facade.isModified());
assertNotNull("expect call for afterExtract", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]);
assertFalse("version should not be empty", output.isEmpty());
assertNull("importHandling null", options.getImportMode()); assertSame("importHandling merge", ImportMode.MERGE, options.getImportMode()); assertNull("importHandling null", delegate.getImportMode()); assertSame("importHandling merge", ImportMode.MERGE, delegate.getImportMode());
assertEquals("* equals *", JsonCnd.QNAME_RESIDUAL, func.tryApply(JsonCnd.TOKEN_RESIDUAL)); assertEquals("nt:folder equals nt:folder", ntFolder, func.tryApply("nt:folder"));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertTrue("is true", facade.getBoolean());
assertSame("should be same value", value, facade.getDescriptorValue(key)); assertNull("should be null", facade.getDescriptorValues("")); assertNull("should be null for null", facadeNull.getDescriptorValue(key));
assertNotSame("success gets non-default", defaultValue, Result.success("success").orElse(() -> defaultValue)); assertSame("failure gets default", defaultValue, Result.<String>failure("failure").orElse(() -> defaultValue));
assertFalse("is not skipped", mojo.isIndividuallySkipped()); assertTrue("is skipped", mojo.isIndividuallySkipped());
assertTrue("sling:Folder should be imported", ntManager.hasNodeType("sling:Folder")); assertTrue("sling:OrderedFolder should be imported", ntManager.hasNodeType("sling:OrderedFolder")); assertTrue("sling:Folder should be imported", ntManager.hasNodeType("sling:Folder")); assertTrue("sling:OrderedFolder should be imported", ntManager.hasNodeType("sling:OrderedFolder"));
assertEquals("should have reported", 3, errorListener.getReportedViolations().size());
assertTrue("test for /i equality", test.test("a", "A")); assertFalse("test for /i equality", test.test("b", "A"));
assertFalse("find best wrapper jcr", jcrFacade instanceof JackrabbitSession); assertTrue("find best wrapper jackrabbit", jackrabbitFacade instanceof JackrabbitSession); assertNull("find best wrapper null", SessionFacade.findBestWrapper(null, true));
assertEquals("expect parser class", ParserType.class, parserClazz); assertEquals("expect parser class", ParserTypeWrongConstructor.class, wrongConstructorClazz); assertNull("expect null type", nullClazz); assertNull("expect nonExistingClazz type", nonExistingClazz);
assertEquals("results should have three failures", 3, results.stream().filter(Result::isFailure).count()); assertArrayEquals("ints should contain no multiples of 3, up to ten 10", new Integer[]{1, 2, 4, 5, 7, 8, 10}, ints);
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertNotNull("expect call for deletedPath", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]);
assertSame("same value", value, facade.getPrincipal());
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertFalse("arg2 should not be done", slot2.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null));
assertTrue("should be live", facade.isLive());
assertFalse("isPatchKeepInRepo false", options.isPatchKeepInRepo()); assertTrue("isPatchKeepInRepo true", options.isPatchKeepInRepo()); assertFalse("isPatchKeepInRepo false", delegate.isPatchKeepInRepo()); assertTrue("isPatchKeepInRepo true", delegate.isPatchKeepInRepo());
assertTrue("cacheKey is failure", cacheKeyDeletedResult.isFailure()); assertTrue("cacheKey failure is FileNotFoundException", cacheKeyDeletedResult.findCause(FileNotFoundException.class).isPresent()); assertTrue("cacheKey is success", cacheKeyResult.isSuccess()); assertEquals("cacheKey should be 43 characters long: " + cacheKey, 43, cacheKey.length()); assertTrue(String.format("cacheKey %s matches regex %s", cacheKey, pattern), cacheKey.matches(pattern));
assertSame("is same value", value, facade.sameNode(arg1, arg2));
assertSame("same value", value, facade.getValues());
assertEquals("type is ", QName.Type.NODETYPE, ntPrefixName.getType()); assertEquals("prefix is ", "nt", ntPrefixName.getPrefix()); assertEquals("localName is ", "aType", ntPrefixName.getLocalName()); assertEquals("uri is ", NamespaceRegistry.NAMESPACE_NT, ntPrefixName.getUri()); assertEquals("toString is ", "nt:aType", ntPrefixName.toString()); assertEquals("expanded is ", "{" + NamespaceRegistry.NAMESPACE_NT + "}aType", ntPrefixName.toExpandedForm());
assertArrayEquals("ints should contain only 2", new Integer[]{2}, ints);
assertTrue("compose substrings of different lengths (left longer) then String::startsWith", truePredicate.test(sentinel, sentinel)); assertFalse("compose substrings of different lengths (right longer) then String::startsWith", falsePredicate.test(sentinel, sentinel));
assertNull("implicit null", builder().build().getInstallHookPolicy()); assertNull("explicit null", builder().withInstallHookPolicy(null).build().getInstallHookPolicy()); assertSame("same policy", policy, builder().withInstallHookPolicy(policy).build().getInstallHookPolicy());
assertSame("is same value", value, facade.childNode(arg1, arg2));
assertEquals("expect boolean for id: " + entry.getKey(), entry.getValue(), DefaultSlingSimulator.isConfigExtension(entry.getKey()));
assertSame("is same value", value, facade.upperCase(arg1));
assertEquals("expect json string for toString", expectString, jsonString);
assertSame("combine Nothing to produce Nothing", Nothing.instance, Nothing.instance.combine(Nothing.instance));
assertTrue("is true", facade.isGroup());
assertTrue("chomp an input string to a length test if sentinel::startsWith", sentinelStartsWith.test("senile", 3)); assertFalse("chomp an input string to a length test if sentinel::startsWith", sentinelStartsWith.test("straighten", 2));
assertSame("same value", violations, alias.getReportedViolations());
assertEquals("echo\'s check name should be \'echo\'", "echo", new Echo().getCheckName());
assertArrayEquals("results should be [sentinel, sentinel]: " + Arrays.toString(results), new String[]{sentinel, sentinel}, results);
assertTrue("future should be done: " + latch, latch.isDone()); assertSame("value should be same as input", sentinel, value); assertSame("latched should be same as input", sentinel, latch.get());
assertTrue("did it", didIt.getNow(false)); assertTrue("did it again", didItAgain.getNow(false));
assertEquals("expect same repoInits", inputInits, builder.build().getRepoInits());
assertTrue("bad severity should cause exception on construction.", threw);
assertTrue("is facade", node instanceof NodeFacade); assertSame("is same as delegate", delegate, NodeFacade.unwrap(node)); assertEquals("expect path after visitor", expectedPath, pathLatch.getNow(""));
assertNotNull("root0 should not be null", root0); assertEquals("root0 primaryType should be nt:folder", "nt:folder", root0.getPrimaryType()); assertNull("root1 should be null", root1); assertNotNull("root2 should not be null", root2); assertEquals("root2 primaryType should be nt:folder", "nt:folder", root2.getPrimaryType()); assertNull("root6 should be null", root6);
assertTrue("is true", facade.isAdmin());
assertTrue(".. should fail", OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isFailure()); assertTrue("/ should succeed", OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isSuccess()); assertTrue("/../.. should fail", OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isFailure());
assertEquals("expect true for empty string", JavaxJson.wrap(true), converter().convertChild(xml("topFoo.xml"), eval)); assertEquals("expect false for non-empty string", JavaxJson.wrap(false), converter().convertChild(xml("fooFoo.xml"), eval));
assertEquals("same length", value, facade.getLength());
assertEquals("results should have three failures", 3, results.stream().filter(Result::isFailure).count()); assertArrayEquals("ints should contain no multiples of 3, up to ten 10", new Integer[]{1, 2, 4, 5, 7, 8, 10}, ints);
assertEquals("", expected, mapObjectValues(input, (key, value) -> value.getInt("num") + 1, false));
assertNotNull("expect call for importedPath", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]); assertSame("same arg3", arg3, call.getValue()[3]); assertSame("same arg4", arg4, call.getValue()[4]);
assertSame("expect same parentId", expectParentId, installable.getParentId()); assertSame("expect same jcrPath", expectJcrPath, installable.getJcrPath()); assertSame("expect same embeddedId", expectEmbeddedId, installable.getEmbeddedId());
assertNull("null for null", new DefaultRepoInitFactory(null).newParser()); assertNull("null for wrong constructor", new DefaultRepoInitFactory(ParserTypeWrongConstructor.class) .newParser()); assertNotNull("expect non null", new DefaultRepoInitFactory(ParserType.class).newParser());
assertTrue("is true", facade.holdsLock(path));
assertSame("same value", value, facade.getCorrespondingNodePath(workspace));
assertSame("is same value", value, facade.equiJoinCondition(arg1, arg2, arg3, arg4));
assertFalse("is not skipped", mojo.isIndividuallySkipped()); assertTrue("is skipped", mojo.isIndividuallySkipped());
assertSame("should be same", name, facade.getName());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("is same value", value, facade.bindVariable(arg1));
assertEquals("same value", value, facade.getIndex());
assertFalse("fds dir should not exist @ " + fdsDir.getAbsolutePath(), fdsDir.exists()); assertNull("blob store should be null without datastore dir", fixture.getBlobStore()); assertTrue("fds dir should exist @ " + fdsDir.getAbsolutePath(), fdsDir.exists()); assertNotNull("blob store should not be null", fixture.getBlobStore());
assertSame("expect same severity", severity, simpleViolation.getSeverity()); assertEquals("expect equal packageIds", Collections.singletonList(packId), simpleViolation.getPackages()); assertSame("expect same description", description, simpleViolation.getDescription());
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertSame("same check", check, handlerLatch.getNow(null)); assertEquals("package id is", PackageId.fromString("my_packages:tmp_foo_bar"), idLatch.getNow(null));
assertFalse("should not be done", latch.isDone()); assertEquals("should be done", "done", latch.getNow(""));
assertSame("same object returned twice", originalBundle, check.getResourceBundle()); assertNotSame("not same object as created externally", newBundle, check.getResourceBundle()); assertSame("same object as set", newBundle, check.getResourceBundle()); assertSame("same object as set, again", newBundle, check.getResourceBundle());
assertSame("should be same value", value, facade.getDescriptor(key)); assertNull("should be null", facade.getDescriptor("")); assertNull("should be null for null", facadeNull.getDescriptor(key));
assertEquals("expect urls", Stream.of(file1.getAbsoluteFile(), file2.getAbsoluteFile()) .map(compose1(File::toURI, uncheck1(URI::toURL))).collect(Collectors.toList()), machine.getPreInstallUrls());
assertTrue("expect true for empty", check1.shouldExpectAfterExtract(PackageId.fromString("foo"))); assertFalse("expect false", check2.shouldExpectAfterExtract(PackageId.fromString("adamcin:test:1.0"))); assertTrue("expect true", check2.shouldExpectAfterExtract(PackageId.fromString("my_packages:test:1.0")));
assertNotNull("expect nonnull config params", params); assertEquals("expect servicePid", "pid", params.getServicePid()); assertEquals("expect factoryPid", "com.Test", params.getFactoryPid());
assertEquals("should be same length for Good-RelPaths", goodRelPaths.size(), Util.resolveManifestResources(mfUrl, goodRelPaths).size()); assertNotEquals("should be different length for Bad-RelPaths", badRelPaths.size(), Util.resolveManifestResources(mfUrl, badRelPaths).size());
assertTrue("foo mapping is retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals))); assertFalse("non-foo mappings are not retained", request.resolveToJcrNs(mapping).stream().flatMap(Result::stream) .anyMatch(inferTest1(NS_FOO::equals).negate()));
assertTrue("result is successful: " + result.getError(), result.isSuccess()); assertEquals("same values", Stream.of("copyme.txt", "copyme_1.txt") .collect(Collectors.toSet()), new HashSet<>(result.getOrDefault(Collections.emptyMap()).values()));
assertTrue("is node", fromFacade instanceof Node); assertEquals("same path", path, nodeFromFacade.getPath()); assertTrue("is facade", nodeFromFacade instanceof NodeFacade);
assertSame("same value", sessionFacade, facade.getSession());
assertEquals("nodetypes should be", expectTypes, builder() .withJcrNodetypes(expectTypes).build().getJcrNodetypes());
assertNull("unknown attr return null", facade.getAttribute("some other attr")); assertSame("get value for known attr", attrValue, facade.getAttribute(attrName));
assertSame("same value", value, facade.getValue(arg1));
assertArrayEquals("sort keys using json extractor", expectValues1, inputValues1);
assertSame("same value", value, facade.getCredentials());
assertSame("should return same array", policies, facade.getPolicies(principal));
assertEquals("expect empty json array for empty value", JsonValue.EMPTY_JSON_ARRAY, converter().readJsonArrayFromConfig(xml("emptyFoo.xml"), eval)); assertEquals("expect json array for value", arr("one").get(), converter().readJsonArrayFromConfig(xml("foosFoo.xml"), eval)); assertEquals("expect json array for value", arr("one").get(), converter().readJsonArrayFromConfig(xml("foosBar.xml"), eval));
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar"));
assertFalse("should not be done", latch.isDone()); assertEquals("should be done", "done", latch.getNow(""));
assertNull("nt:query should not be defined", scanner.findWithinHorizon("\\\\[nt:query]", 0)); assertNull("sling:OrderedFolder should not be defined", scanner.findWithinHorizon("\\\\[sling:OrderedFolder]", 0)); assertNotNull("nt:folder should be defined", scanner.findWithinHorizon("\\\\[nt:folder]", 0)); assertNotNull("sling:Folder should be defined", scanner.findWithinHorizon("\\\\[sling:Folder]", 0));
assertTrue("expect identified " + id, graph.isIdentified(id)); assertTrue("expect identified " + id, graph.isIdentified(id)); assertFalse("expect not identified " + id, graph.isIdentified(id)); assertFalse("expect not identified " + id, graph.isIdentified(id));
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null)); assertSame("same arg2", arg2, slot2.getNow(null)); assertSame("same arg3", arg3, slot3.getNow(null));
assertSame("same value", value, facade.getIdentifier());
assertSame("same value", value, facade.getPrimaryNodeType());
assertSame("same value", value, facade.getString());
assertSame("should return same array", policies, facade.getApplicablePolicies(principal));
assertFalse("not exists at empty path", facade.propertyExists("")); assertTrue("exists at correct path", facade.propertyExists(path));
assertTrue("skipped", result.isSkip()); assertEquals("shared should be", "two", result.getConfig().getString("shared")); assertEquals("zero should be", "orez", result.getConfig().getString("zero")); assertEquals("one should be", "eno", result.getConfig().getString("one")); assertEquals("two should be", "owt", result.getConfig().getString("two"));
assertSame("is same value", value, facade.getEffectivePolicies(path));
assertTrue("succeed with jar when cache is fresh", OpearFile.fromJar(new JarFile(deepTestTarget), cacheDir).isSuccess()); assertTrue("succeed with cache dir when cache is present", OpearFile.fromJar(new JarFile(deepTestTarget), cacheDir).isSuccess());
assertSame("should be the same nothing", Nothing.instance, throwingVoidToNothing1(consumer).tryApply(2)); assertEquals("latch value should be 2", 2, latch.get());
assertNull("just null", AccessControlManagerFacade.findBestWrapper(null)); assertTrue("is facade", jcrFacade instanceof AccessControlManagerFacade); assertFalse("is not jackrabbit facade", jcrFacade instanceof JackrabbitAccessControlManagerFacade); assertTrue("is jackrabbit facade", jackFacade instanceof JackrabbitAccessControlManagerFacade);
assertEquals("latch value should be 3", 3, latch.get());
assertNull("empty root has null path", rootEmpty.getPath()); assertNull("empty root has null primaryType", rootEmpty.getPrimaryType()); assertTrue("empty root has empty mixinTypes", rootEmpty.getMixinTypes().isEmpty()); assertEquals("path root has correct path", path, rootPath.getPath()); assertEquals("primaryType root has correct primaryType", primaryType, rootPrimaryType.getPrimaryType()); assertEquals("mixinTypes root has correct mixinTypes", mixinTypes, rootMixinTypes.getMixinTypes());
assertSame("same value", value, facade.createNodeDefinitionTemplate());
assertTrue("all violations are SEVERE", report.getViolations().stream() .allMatch(viol -> viol.getSeverity().equals(Severity.SEVERE)));
assertTrue("onKey latch should contain \'one\'", latch.get().contains("one")); assertTrue("onKey latch should contain \'two\'", latch.get().contains("two")); assertTrue("onKey latch should contain \'three\'", latch.get().contains("three"));
assertTrue("is true", facade.isLocked());
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertEquals("adapt equals", ntPrefixName, ntUriName);
assertTrue("no retain results in empty list", request.resolveToJcrNs(mapping).isEmpty());
assertTrue("expect failure", result.isFailure()); assertTrue("expect same exception", result.findCause(IllegalStateException.class).isPresent());
assertTrue("value should be present: " + testHead, testHead.isPresent()); assertSame("value should be same as sentinel", sentinel.get(), testHead.get());
assertTrue("should always return an empty iterator", facade.getRegisteredEventListeners() instanceof EmptyEventListenerIterator);
assertTrue("is true", facade.holdsLock());
assertTrue("is true", facade.canAddMixin(value));
assertSame("same value", value, facade.getLanguage());
assertEquals("mapEntry should result in same list", Arrays.asList("one_1", "two_2", "three_3"), collected);
assertSame("same value", value, facade.getAllNodeTypes());
assertTrue("contains violation", check.getReportedViolations().contains(violation));
assertNotEquals("SimpleViolation not equal to Violation", simpleViolation, violation); assertEquals("SimpleViolation equal to copy SimpleViolation", simpleViolation, simpleViolationCopy); assertNotEquals("SimpleViolation hashCode not equal to Violation hashCode", simpleViolation.hashCode(), violation.hashCode()); assertEquals("SimpleViolation hashCode equal to copy SimpleViolation hashCode", simpleViolation.hashCode(), simpleViolationCopy.hashCode());
assertEquals("getMixinTypes()", expectedSet, root.getMixinTypes()); assertEquals("getMixinTypes()", expectedWith, root.withMixinTypes("mixinTypeWith").getMixinTypes()); assertEquals("getMixinTypes()", Collections.emptyList(), root.getMixinTypes()); assertEquals("getMixinTypes()", Collections.emptyList(), root.withMixinTypes().getMixinTypes());
assertTrue("is version", fromFacade instanceof Version); assertEquals("same path", path, nodeFromFacade.getPath()); assertTrue("is facade", nodeFromFacade instanceof VersionFacade);
assertNotNull("check should not be null", check); assertTrue("default allowedModes should be empty: " + check.allowedModes, check.allowedModes.isEmpty());
assertEquals("same path", path, fromFacade.getPath()); assertTrue("is facade", fromFacade instanceof NodeFacade);
assertNotNull("root1 should not be null", root1); assertNull("root2 should be null", root2);
assertEquals("complete prefix should be", prefix, complete.getPrefix()); assertEquals("complete prefix should be", uri, complete.getUri());
assertTrue("should be true", facade.hasNext());
assertNotNull("expect call for identifySubpackage", call); assertSame("same arg1", arg1, call.getValue()[1]); assertSame("same arg2", arg2, call.getValue()[2]);
assertTrue("props is still empty: " + props, props.isEmpty()); assertEquals("props is not empty: " + props, "ERROR", props.getProperty("org.slf4j.simpleLogger.log.org.apache.jackrabbit.oak"));
assertFalse("options build is successful", optionsResult.getError().isPresent());
assertEquals("ns meet ns", ns, fromCnd);
assertEquals("do these equate?", func.apply(sentinel, sentinel), inferred.apply(sentinel, sentinel));
assertNotNull("always have plan params", mojo.getPlanBuilderParams()); assertSame("same plan params", mojo.planParams, mojo.getPlanBuilderParams());
assertFalse("isNonRecursive false", options.isNonRecursive()); assertTrue("isNonRecursive true", options.isNonRecursive()); assertFalse("isNonRecursive false", delegate.isNonRecursive()); assertTrue("isNonRecursive true", delegate.isNonRecursive());
assertArrayEquals("parsed is", new String[]{"some", "command with", "-quot\\" e\\"d", "args and\\\\", "stuff"}, parsed);
assertTrue("is true", facade.isLockOwningSession());
assertFalse("is false", facade.isAutoSave());
assertEquals("collected three errors", 3, collectedErrors.size());
assertEquals("results should have three failures", 3, results.stream().filter(Result::isFailure).count()); assertArrayEquals("ints should contain no multiples of 3, up to ten 10", new Integer[]{1, 2, 4, 5, 7, 8, 10}, ints);
assertTrue("should be JcrWorkspaceFacade", jcrFacade instanceof JcrWorkspaceFacade); assertTrue("should be JackrabbitWorkspaceFacade", jackFacade instanceof JackrabbitWorkspaceFacade); assertNull("null should return null", WorkspaceFacade.findBestWrapper(null, jcrSession));
assertSame("is same value", value, facade.nodeName(arg1));
assertEquals("expect privileges", expectPrivileges, builder().withJcrPrivileges(expectPrivileges) .build().getJcrPrivileges());
assertSame("is same value", value, facade.getVersionLabels());
assertNotEquals("success gets non-default", defaultValue, Result.success("success").getOrDefault(defaultValue)); assertEquals("failure gets default", defaultValue, Result.failure("failure").getOrDefault(defaultValue));
assertTrue("is FileBlobMemoryNodeStore", command.getNodeStoreSupplier( new Options.Builder() .setStoreBlobs(true) .build(console) .getOrDefault(null)).get() instanceof FileBlobMemoryNodeStore); assertTrue("is MemoryNodeStore", command.getNodeStoreSupplier( new Options.Builder() .build(console) .getOrDefault(null)).get() instanceof MemoryNodeStore);
assertNull("dependencyHandling null", options.getDependencyHandling()); assertSame("dependencyHandling strict", DependencyHandling.STRICT, options.getDependencyHandling()); assertNull("dependencyHandling null", delegate.getDependencyHandling()); assertSame("dependencyHandling strict", DependencyHandling.STRICT, delegate.getDependencyHandling());
assertSame("is same value", value, facade.getApplicablePolicies(path));
assertTrue("is true", facade.hasNode(path));
assertFalse("arg0 should not be done", slot0.isDone()); assertFalse("arg1 should not be done", slot1.isDone()); assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertTrue("violation reported", check.getReportedViolations().stream() .anyMatch(violation -> violation.getSeverity() == Severity.MINOR && "description".equals(violation.getDescription()) && violation.getPackages().contains(id0) && violation.getPackages().contains(id1) ));
assertSame("same json array", expectSameArray, converter().readJsonArrayFromValue("key", expectSameArray)); assertSame("null value is JsonValue.NULL", JsonValue.NULL, converter().readJsonArrayFromValue("key", null)); assertEquals("json array as string is equal", expectSameArray, converter().readJsonArrayFromValue("key", expectSameArray.toString()));
assertTrue("should be performed", performed.getNow(false));
assertSame("same object returned twice", originalBundle, listener.getResourceBundle()); assertNotSame("not same object as created externally", newBundle, listener.getResourceBundle()); assertSame("same object as set", newBundle, listener.getResourceBundle()); assertSame("same object as set, again", newBundle, listener.getResourceBundle());
assertTrue("all violations are MAJOR", report.getViolations().stream() .allMatch(viol -> viol.getSeverity().equals(Severity.MAJOR)));
assertSame("is same value", value, facade.getRegisteredPrivileges());
assertSame("expect json null for null", JsonValue.NULL, converter().convertChild(xml("fooBar.xml"), eval));
assertSame("is same value", value, facade.sameNodeJoinCondition(arg1, arg2, arg3));
assertSame("should be same", tokens, facade.getLockTokens());
assertSame("is same value", value, facade.getImpersonators());
assertSame("empty object returns empty array for any key", JsonValue.EMPTY_JSON_ARRAY, arrayOrEmpty(JsonValue.EMPTY_JSON_OBJECT, "someKey")); assertEquals("object returns present object for present key with object value", Json.createArrayBuilder().add("foo").add("bar").build(), arrayOrEmpty(key("someKey", arr("foo", "bar")).get(), "someKey"));
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertSame("expect same installable", installable, installableLatch.getNow(null));
assertTrue("no errors", builder().withSlingSimulator(watcher).build() .scanPackage(testPackage).get(0).getViolations().isEmpty());
assertEquals("getPrimaryType()", "primaryTypeSet", root.getPrimaryType()); assertEquals("getPrimaryType()", "primaryTypeWith", root.withPrimaryType("primaryTypeWith").getPrimaryType());
assertEquals("should be equal", position, facade.getPosition());
assertArrayEquals("ints contains three zeros, 1 for each multiple of 3", new Integer[]{1, 2, 0, 4, 5, 0, 7, 8, 0, 10}, ints);
assertEquals("results should have three failures", 3, results.stream().filter(Result::isFailure).count());
assertTrue("expect args for finishedScan", argRecord.stream() .anyMatch(entry -> "finishedScan".equals(entry.getKey()) && entry.getValue().length == 1));
assertNotNull("expect instance of builder", SimpleViolation.builder()); assertNotNull("expect instance of builder with bundle", SimpleViolation.builder(myBundle));
assertFalse("isStrict false", options.isStrict()); assertTrue("isStrict true", options.isStrict()); assertFalse("isStrict false", delegate.isStrict()); assertTrue("isStrict true", delegate.isStrict());
assertEquals("results should have three failures", 3, results.stream().filter(Result::isFailure).count());
assertTrue("error is of type", eLatch.getNow(null) instanceof RepositoryException); assertEquals("package id is", sub1, idLatch.getNow(null));
assertTrue("path should exist", session.nodeExists("/tmp/foo/bar"));
assertSame("is same value", value, facade.descending(arg1));
assertTrue("is true", facade.isDeep());
assertArrayEquals("expect prefixes", new String[0], emptyRoot.getNamespacePrefixes()); assertArrayEquals("expect prefixes", new String[0], noPrefixRoot.getNamespacePrefixes()); assertArrayEquals("expect prefixes", new String[]{"foo", "bar", "foobar"}, root.getNamespacePrefixes());
assertFalse("not exists at empty path", facade.itemExists("")); assertTrue("exists at correct path", facade.itemExists(path));
assertSame("is same value", value, facade.getPolicies(path));
assertTrue("future should be done: " + latch, latch.isDone()); assertSame("nothing should be returned", Nothing.instance, nothing); assertSame("latched should be same as input", sentinel, latch.get());
assertFalse("should not be done", latch.isDone()); assertEquals("should be done", "done", latch.getNow(""));
assertTrue("is true", facade.isLocked(path));
assertTrue("Root node should be same as / node", session.getRootNode().isSame(session.getNode("/")));
assertNotNull("expect nonnull config params", params); assertEquals("expect servicePid", "com.Test", params.getServicePid()); assertNull("expect null factoryPid", params.getFactoryPid());
assertSame("same arg0", arg0, slot0.getNow(null)); assertSame("same arg1", arg1, slot1.getNow(null));
assertSame("is same value", value, facade.selector(arg1, arg2));
assertFalse("should never have next", new EmptyEventListenerIterator().hasNext());
assertEquals("expect one violation", 1, violations.stream().count()); assertEquals("expect one packageId", 1, violations.stream().findFirst().get().getPackages().size());
assertSame("same value", value, facade.getPropertyNames());
assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty())); assertTrue("all violations have packageIds", report.getViolations().stream() .allMatch(viol -> !viol.getPackages().isEmpty()));
assertNull("acHandling null", options.getAccessControlHandling()); assertSame("acHandling clear", AccessControlHandling.CLEAR, options.getAccessControlHandling()); assertNull("acHandling null", delegate.getAccessControlHandling()); assertSame("acHandling clear", AccessControlHandling.CLEAR, delegate.getAccessControlHandling());
assertFalse("should not be done", latch.isDone()); assertEquals("should be equal", (Long) expected, latch.getNow(-1L));
assertFalse("compose concat empty string has no more length than sentinel", predicate.test("")); assertTrue("compose concat empty string has more length than sentinel", predicate.test("more"));
assertArrayEquals("loadedClasses should contain String and Map", new Class<?>[]{String.class, Map.class}, loadedClasses);
assertArrayEquals("results should be [sentinel, sentinel]: " + Arrays.toString(results), new String[]{sentinel, sentinel}, results);
assertNull("should be null", facade.getNamespacePrefix("")); assertSame("should be same", prefix, facade.getNamespacePrefix(uri));
assertTrue("numbers contains one", numbers.contains("one")); assertTrue("numbers contains two", numbers.contains("two")); assertTrue("numbers contains three", numbers.contains("three")); assertTrue("paths contains /test/one", paths.contains("/test/one")); assertTrue("paths contains /test/two", paths.contains("/test/two")); assertTrue("paths contains /test/three", paths.contains("/test/three"));
assertEquals("onEntry should add 1, 2, and 3 (6) to latch", 6, latch.get());
assertTrue("enablePreInstallHooks true", builder().withEnablePreInstallHooks(true).build() .isEnablePreInstallHooks()); assertFalse("enablePreInstallHooks false", builder().withEnablePreInstallHooks(false).build() .isEnablePreInstallHooks());
assertSame("is same value", value, facade.lowerCase(arg1));
assertSame("same value", violations, alias.getReportedViolations());
assertTrue("archiveRoot should exist", archiveRoot.exists());
assertTrue("value for one is present", composed.apply("one").isPresent()); assertFalse("value for two is empty", composed.apply("two").isPresent());
assertSame("is same value", value, facade.and(arg1, arg2));
assertEquals("expect json array for value", arr("one").get(), converter().convertChild(xml("foosFoo.xml"), eval)); assertEquals("expect json object for value", key("bar", "one").get(), converter().convertChild(xml("foosBar.xml"), eval));
assertArrayEquals("ints should contain 1 and 2", new Integer[]{1, 2}, ints);
assertEquals("/correct path with correct id", path, facade.getNodeByIdentifier(uuid).getPath());
assertTrue("is true", facade.isCheckedOut(path));
assertEquals("parse function should work", expected, parsed); assertTrue("error latch is done", errorLatch.isDone()); assertEquals("error latch key is", "notvalid", fromLatch.getKey()); assertEquals("error latch error message is", "missing colon", fromLatch.getValue().getMessage());
assertSame("is same value", value, facade.propertyValue(arg1, arg2));
assertEquals("success does do", "success", slotSuccess.getNow(null)); assertFalse("failure doesn\'t do", slotFailure.isDone());
assertSame("instance1", listener1, options.getHookClassLoader()); assertSame("instance2", listener2, options.getHookClassLoader()); assertSame("instance1", listener1, delegate.getHookClassLoader()); assertSame("instance2", listener2, delegate.getHookClassLoader());
assertFalse(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_REPEATABLE, false)); assertFalse(XmlHelper.readBooleanAttribute(reader, "", false)); assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_REPEATABLE, false)); assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_MOVABLE, false)); assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_STICKY, false));
assertEquals(1, elements.size()); assertEquals(1, decoration.getMatch().size()); assertEquals("org.acme.foo.*", match.getInterface()); assertEquals(1, match.getMatchProperty().size()); assertEquals("test.prop", matchProp.getName()); assertEquals("xyz", matchProp.getValue()); assertEquals(1, match.getAddProperty().size()); assertEquals("test.too", addProp.getName()); assertEquals("ahaha", addProp.getValue()); assertEquals("java.lang.String", addProp.getType());
assertTrue(PropertyHelper.getMultiValueProperty(null).isEmpty());
assertSame(b, ir.getBundle());
assertEquals(5, sih.invoke(null, m, new Object[] {}));
assertTrue(httpContext.handleSecurity(request, response)); assertTrue(doNothingFilter.called); assertFalse(commitFilter.called); assertFalse(accessDeniedFilter.called);
assertEquals(list, PropertyHelper.getMultiValueProperty(list));
assertEquals("Precondition failed", 0, called.size()); assertEquals(0, called.size()); assertEquals(Arrays.asList("addDecorations"), called); assertEquals(Arrays.asList("addDecorations", "removeDecorations"), called);
assertEquals(Arrays.asList("a", "b"), PropertyHelper.getMultiValueProperty(new String[]{"a", "b"}));
assertFalse(requestAllowed); assertTrue(requestAllowed);
assertEquals(Collections.singleton("hi"), PropertyHelper.getMultiValueProperty("hi"));
assertEquals(true, sih.invoke(null, OBJECT_METHODS.get("equals"), new Object[] {proxy})); assertEquals(System.identityHashCode(sih), sih.invoke(null, OBJECT_METHODS.get("hashCode"), new Object[] {})); assertEquals("somestring", sih.invoke(null, OBJECT_METHODS.get("toString"), new Object[] {})); assertEquals(Arrays.asList("equals", "hashCode", "toString"), called);
assertEquals(PRINCIPAL_FIXTURE, actual.getCreatedBy()); assertNotNull(actual.getBirthDate());
assertEquals(Integer.valueOf(9), firstPage.getTotalSize()); assertNotNull(firstPage.getCursorKey()); assertEquals(5, firstPage.getItems().size()); assertNull(secondPage.getTotalSize()); assertNull(secondPage.getCursorKey()); assertEquals(4, secondPage.getItems().size());
assertEquals("(0,0), 16 bit", 0xC000L, Geobox.getHashIterative(0f, 0f, 15));
assertEquals("NE, 2 bit", 3L, Geobox.getHashIterative(120f, 45f, 1));
assertEquals("E, 1 bit", 1L, Geobox.getHashIterative(120f, -45f, 0));
assertEquals("first", supplier.getString(actual, "createdBy")); assertEquals(date, supplier.getDate(actual, "birthDate")); assertEquals("first", supplier.getString(actual, "createdBy")); assertEquals(date, supplier.getDate(actual, "birthDate"));
assertEquals("(-90,-180), 16 bit", 0x0000L, Geobox.getHashIterative(-180f, -90f, 15));
assertEquals("first", supplier.getString(actual, "createdBy")); assertEquals(date, supplier.getDate(actual, "birthDate")); assertEquals("second", supplier.getString(actual, "createdBy")); assertEquals(date1, supplier.getDate(actual, "birthDate")); assertEquals("second", supplier.getString(actual, "createdBy")); assertEquals(date1, supplier.getDate(actual, "birthDate"));
assertEquals(5232.0f, Geobox.distance(P0, P1), 0.2f);
assertEquals("mod7_2", u.getDisplayName()); assertEquals(2, u.getId() % 7); assertEquals(9, count); assertFalse(users.iterator().hasNext());
assertEquals(one, uno); assertEquals(1, set.size()); assertNotEquals(one, two); assertEquals(2, set.size());
assertNotNull(actual); assertNull(actual); assertEquals(117, userDao.count());
assertNull(u47); assertEquals(Long.valueOf(47), u47.getId()); assertEquals("user_47@example.com", u47.getEmail());
assertEquals(118, userDao.count()); assertEquals(1, factoryDao.count());
assertEquals("(90,180), 16 bit", 0xFFFFL, Geobox.getHashIterative(180f, 90f, 15));
assertThat(contributors, hasSize(30));
assertThat(parseAndValidateMetadata(EmptyPathOnType.class, "get").template()) .hasUrl("/specific");
assertThat(result).isInstanceOf(Flowable.class);
assertThat(parseAndValidateMetadata(PathOnType.class, "base").template()) .hasUrl("/base"); assertThat(parseAndValidateMetadata(PathOnType.class, "get").template()) .hasUrl("/base/specific");
assertThat(Util.emptyValueOf(Number.class)).isNull(); assertThat(Util.emptyValueOf(Parameterized.class)).isNull();
assertThat(parseAndValidateMetadata(PathsWithSomeOtherSlashes.class, "get").template()) .hasUrl("/base/specific");
assertThat(stream.collect(Collectors.toList())).isEqualTo(Arrays.asList("foo", "bar"));
assertThat(contributors, hasSize(30));
assertThat(md.template()) .hasHeaders( entry("Content-Type", asList("application/json")), entry("Accept", asList("application/xml")));
assertThat(target.name(), equalTo("MockTargetTest"));
assertThat(md.template()) .hasQueries(entry("name", asList("{name}")), entry("type", asList("{type}"))); assertThat(md.indexToName()).containsExactly(entry(0, asList("domainId")), entry(1, asList("name")), entry(2, asList("type")));
assertThat(requestKey.hashCode(), equalTo(requestKey.hashCode())); assertThat(requestKey, equalTo(requestKey));
assertEquals(Reader.class, last);
assertThat(requestKey.hashCode(), equalTo(requestKey2.hashCode())); assertThat(requestKey.equalsExtended(requestKey2), equalTo(true));
assertThat(LBClient.parseStatusCodes("")).isEmpty(); assertThat(LBClient.parseStatusCodes(null)).isEmpty(); assertThat(LBClient.parseStatusCodes("504")).contains(504); assertThat(LBClient.parseStatusCodes("503,504")).contains(503, 504);
assertThat(removeValues(values, (number) -> number % 2 == 0, Integer.class)) .containsExactly(23);
assertEquals(listStringType, last);
assertEquals(listStringType, last);
assertThat(requestKey.getMethod(), equalTo(HttpMethod.GET)); assertThat(requestKey.getUrl(), equalTo("a")); assertThat(requestKey.getHeaders().size(), is(1)); assertThat(requestKey.getHeaders().fetch("my-header"), equalTo((Collection<String>) Arrays.asList("val"))); assertThat(requestKey.getCharset(), equalTo(StandardCharsets.UTF_16)); assertThat(requestKey.getBody(), equalTo("content".getBytes(StandardCharsets.UTF_8)));
assertThat(parseAndValidateMetadata(PathOnType.class, "emptyPath").template()) .hasUrl("/base");
assertEquals(Object.class, last);
assertEquals("List#iterator()", Feign.configKey(List.class, Iterable.class.getDeclaredMethod("iterator")));
assertTrue((Boolean) marshaller.getProperty(Marshaller.JAXB_FORMATTED_OUTPUT));
assertEquals("Unexpected encoded query map", expected, encodedMap);
assertThat(md.indexToName()).containsExactly( entry(0, asList("1")), entry(2, asList("2"))); assertThat(md.urlIndex()).isEqualTo(1);
assertEquals("@Param ignored", expectedNames, encodedMap.keySet());
assertThat(parseAndValidateMetadata(ClassPathWithTrailingSlash.class, "get").template()) .hasUrl("/base/specific");
assertThat(md.formParams()) .containsExactly("customer_name", "user_name", "password"); assertThat(md.indexToName()).containsExactly( entry(0, asList("customer_name")), entry(1, asList("user_name")), entry(2, asList("password")));
assertThat(md.template()) .hasHeaders(entry("Content-Type", asList("application/xml")), entry("Accept", Collections.singletonList("text/html")));
assertThat(result, notNullValue());
assertEquals("Unexpected encoded query map", expected, encodedMap);
assertThat(parseAndValidateMetadata(MixedAnnotations.class, "getWithHeaders", String.class, String.class, String.class) .template()) .hasHeaders(entry("Accept", Arrays.asList("application/json", "{Accept}"))) .hasQueries( entry("multiple", Arrays.asList("stuff", "{multiple}")), entry("another", Collections.singletonList("{another}")));
assertThat(md.bodyIndex()) .isEqualTo(0); assertThat(md.bodyType()) .isEqualTo(JAXRSContractTest.class.getDeclaredField("STRING_LIST").getGenericType());
assertThat(result).isInstanceOf(Flowable.class);
assertThat(md.bodyType()).isNull();
assertThat(result).isInstanceOf(Flowable.class);
assertThat(parseAndValidateMetadata(Methods.class, "post").template()) .hasMethod("POST"); assertThat(parseAndValidateMetadata(Methods.class, "put").template()) .hasMethod("PUT"); assertThat(parseAndValidateMetadata(Methods.class, "get").template()) .hasMethod("GET"); assertThat(parseAndValidateMetadata(Methods.class, "delete").template()) .hasMethod("DELETE");
assertThat(encoded).isEqualTo("/api/user@host:port#section[a-z]/data");
assertTrue((Boolean) marshaller.getProperty(Marshaller.JAXB_FRAGMENT));
assertThat(parseAndValidateMetadata(EmptyPathOnType.class, "base").template()) .hasUrl("/");
assertThat(template) .hasHeaders( entry("Authorization", asList( "Basic SU9JT0lPSU9JT0lPSU9JT0lPSU9JT0lPSU9JT0lPSU9JT0lPSU86MTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEw")));
assertThat(requestKey.getMethod(), equalTo(HttpMethod.GET)); assertThat(requestKey.getUrl(), equalTo("a")); assertThat(requestKey.getHeaders().size(), is(1)); assertThat(requestKey.getHeaders().fetch("my-header"), equalTo((Collection<String>) Arrays.asList("val"))); assertThat(requestKey.getCharset(), equalTo(StandardCharsets.UTF_16));
assertThat(template) .hasHeaders( entry("Authorization", asList("Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")));
assertThat(parseAndValidateMetadata(CustomMethod.class, "patch").template()) .hasMethod("PATCH") .hasUrl("/");
assertThat(parseAndValidateMetadata(ClassRootPath.class, "get").template()) .hasUrl("/specific");
assertEquals("@Param ignored", expectedNames, encodedMap.keySet());
assertThat(parseAndValidateMetadata(PathsWithSomeSlashes.class, "get").template()) .hasUrl("/base/specific");
assertTrue("Non-empty map generated from null getter: " + encodedMap, encodedMap.isEmpty());
assertThat(parseAndValidateMetadata( PathOnType.class, "pathParamWithSpaces", String.class).template()) .hasUrl("/base/{param}");
assertThat(result).isInstanceOf(Mono.class);
assertEquals("Unexpected encoded query map", expected, encodedMap);
assertThat(UriUtils.encode(queryParameterValue, UTF_8)) .isEqualToIgnoringCase( "firstName%3DJames%3BlastName%3DBond%3Blocation%3DEngland%26Britain%3F");
assertThat(md.template()) .hasHeaders(entry("Auth-Token", asList("{Auth-Token}"))); assertThat(md.indexToName()) .containsExactly(entry(0, asList("Auth-Token")));
assertThat(md.template()) .hasHeaders( entry("Content-Type", Collections.singletonList("application/json")), entry("Accept", asList("application/xml", "text/plain")));
assertThat((List<?>) Util.emptyValueOf(listStringType)).isEmpty();
assertEquals(NetworkStatus.FAILED, decoder.decode(statusFailedResponse(), NetworkStatus.class)); assertEquals("Failed", decoder.decode(statusFailedResponse(), String.class));
assertThat(parseAndValidateMetadata(MethodWithFirstPathThenGetWithoutLeadingSlash.class, "get") .template()) .hasUrl("/base/specific");
assertTrue("Non-empty map generated from null getter: " + encodedMap, encodedMap.isEmpty());
assertThat(requestKey.toString(), startsWith("Request [GET a: ")); assertThat(requestKey.toString(), both(containsString(" with my-header=[val] ")).and(containsString(" UTF-16]")));
assertThat(result).isInstanceOf(Mono.class);
assertThat(md.template()) .hasHeaders(entry("Content-Type", asList("application/json")), entry("Accept", asList("text/html")));
assertThat(result).isInstanceOf(Mono.class);
assertEquals("UTF-16", marshaller.getProperty(Marshaller.JAXB_ENCODING));
assertThat(uriTemplate.expand(Collections.emptyMap())).isEqualToIgnoringCase("/");
assertThat(parseAndValidateMetadata(PathsWithoutAnySlashes.class, "get").template()) .hasUrl("/base/specific");
assertThat(e.getMessage(), containsString("non negative"));
assertThat(md.template()) .hasHeaders( entry("Content-Type", asList("application/xml")), entry("Accept", asList("text/html")));
assertEquals(String.class, last);
assertEquals(listStringType, last);
assertEquals("TestInterface#post()", Feign.configKey(TestInterface.class, TestInterface.class.getDeclaredMethod("post"))); assertEquals("TestInterface#uriParam(String,URI,String)", Feign.configKey(TestInterface.class, TestInterface.class .getDeclaredMethod("uriParam", String.class, URI.class, String.class)));
assertThat(dao.read("1").get().sub.name).isEqualTo(model.sub.name);
assertThat(dao.read("1")).isNotPresent();
assertThat(dao.read("1")).isPresent();
assertThat(result.get("geo")).isEqualTo(model.geo);
assertThat(result.get("geo")).isEqualTo(model.geo);
assertThat(result.get("geo")).isEqualTo(model.geo);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_rise_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_fall_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(next).isEqualTo(1_561_893_799_000L);
assertThat(timeStamp).isEqualTo(-1);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_unclear_readings_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(userNotification.extra_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.extra_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(isBlueReader).isFalse();
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_missed_alerts).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(userNotification.calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.extra_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification.bg_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(next).isEqualTo(last + period - grace);
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(timeStamp).isEqualTo(1561830720000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 17:52:00 UTC 2019");
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.double_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification.bg_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertTrue(contextRx.ketone());
assertThat(getLogs()).contains("I/blueReader: initialize blueReader!"); assertThat(Pref.getInt("bridge_battery", -1)).isEqualTo(0); assertThat(PersistentStore.getDouble("blueReaderFirmwareValue")).isWithin(0.0d).of(0d); assertThat(new String(ackMessage.array())).isEqualTo("IDN");
assertThat(next).isEqualTo(last + period - grace);
assertThat(timeStamp).isEqualTo(1561830720000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 17:52:00 UTC 2019");
assertThat(calibrationAlert).isNull();
assertThat(timeStamp).isEqualTo(-1);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_fall_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(timeStamp).isEqualTo(2000000);
assertEquals("Context: Sequence: 4 KETONE MEALTYPE: 6 ", contextRx.toString());
assertThat(isBlueReader).isTrue();
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(timeStamp).isEqualTo(1561830721000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 17:52:01 UTC 2019");
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_unclear_readings_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(next).isEqualTo(now + 5);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(timeStamp).isEqualTo(-1);
assertThat(userNotification.double_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_rise_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(isBlueReader).isFalse();
assertThat(userNotification.double_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(timeStamp).isEqualTo(1561830721000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 17:52:01 UTC 2019");
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(userNotification.calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(userNotification).isNull(); assertThat(PersistentStore.getString("UserNotification:timestamp:" + type)) .isEqualTo(JoH.qs(timestamp)); assertThat(PersistentStore.getString("UserNotification:message:" + type)) .isEqualTo(message);
assertThat(testCount).isEqualTo(198);
assertThat(timeStamp).isEqualTo(-1);
assertThat(timeStamp).isEqualTo(1561837921000L); assertThat(new Date(timeStamp).toString()).isEqualTo("Sat Jun 29 19:52:01 UTC 2019");
assertThat(testCount).isEqualTo(333);
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_missed_alerts).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(calibrationAlert).isNull();
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(next).isEqualTo(now + 5);
assertThat(calibrationAlert).isNull();
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.double_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification).isNull(); assertThat(PersistentStore.getString("UserNotification:timestamp:" + type)) .isEqualTo(JoH.qs(timestamp)); assertThat(PersistentStore.getString("UserNotification:message:" + type)) .isEqualTo(message);
assertThat(calibrationAlert).isNull();
assertThat("Data not null", str != null, is(true)); assertThat("Marker found", str.contains("RelativeTime"), is(true)); assertThat("Sane Raw", trd.getRawValue() < RAW_UPPER_BOUND && trd.getRawValue() > RAW_LOWER_BOUND, is(true)); assertThat("Sane Filtered", trd.getFilteredValue() < RAW_UPPER_BOUND && trd.getFilteredValue() > RAW_LOWER_BOUND, is(true));
assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message);
assertThat(userNotification.extra_calibration_alert).isTrue(); assertThat(userNotification.message).isEqualTo("test2");
assertThat(result).isEqualTo(mockBundleContext);
assertThat(instance.hashCode()).isEqualTo(CharConverter.class.hashCode());
assertThat(ctx.getMeta()).isNotNull().isNotEmpty().hasSize(2);
assertThat(cfg.getContext().getPropertyFilters()).isNotNull().doesNotContain(testFilter); assertThat(cfg.getContext().getPropertyFilters()).contains(testFilter);
assertThat(b.sortPropertySources(psComp).getClass()).isEqualTo(DefaultConfigurationBuilder.class); assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]);
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv2).isNotEqualTo(null); assertThat(conv2).isNotEqualTo(new LocalDateTimeConverter());
assertThat(instance.hashCode()).isEqualTo(DurationConverter.class.hashCode());
assertThat(result).isNotNull(); assertThat(result.isPresent()).isTrue(); assertThat(result.get()).isEqualTo("astring");
assertThat(propertySource.getProperties()).describedAs("Should contain exactly 2 properties.") .hasSize(2); assertThat(propertySource.get("a")).isNotNull(); assertThat(propertySource.get("b")).isNotNull();
assertThat(v0).isNotNull(); assertThat(v0).isEqualTo(v1); assertThat(v1).isNotEqualTo(v2);
assertThat(0).isEqualTo(ov.getSize()); assertThat(1).isEqualTo(ov.getSize()); assertThat(2).isEqualTo(ov.getSize()); assertThat(2).isEqualTo(ov.getSize());
assertThat(new URI("test:path")).isEqualTo(converter.convert("test:path", context));
assertThat(ctx.getPropertyConverters(TypeLiteral.of(String.class))).hasSize(1).contains(converter); assertThat(ctx.getPropertyConverters(TypeLiteral.of(String.class))).doesNotContain(converter).isEmpty();
assertThat(source.getName()).isEqualTo("testWithMap"); assertThat(source.getDefaultOrdinal()).isEqualTo(166); assertThat(source.getProperties()).containsKey("firstKey");
assertThat(getGenericInterfaceTypeParameters(String.class, String.class).length).isEqualTo(0);
assertThat(pv.getKey()).isEqualTo("k"); assertThat(pv.getMeta().get("k")).isEqualTo("v2");
assertThat(context.getSupportedFormats()).contains("<float> (FloatConverter)", "MIN_VALUE (FloatConverter)", "MAX_VALUE (FloatConverter)");
assertThat(instance.convert(null, context)).isNull(); assertThat(result).isNotNull(); assertThat(context.getSupportedFormats()).contains("<File> (FileConverter)");
assertThat(properties).isNotNull(); assertThat(properties).hasSize(3); assertThat("javaconf-value1").isEqualTo(properties.get("confkey1")); assertThat("javaconf-value2").isEqualTo(properties.get("confkey2")); assertThat("javaconf-value3").isEqualTo(properties.get("confkey3")); assertThat(properties.get("confkey4")).isNull();
assertThat(result).isNotNull();
assertThat(instance.hashCode()).isEqualTo(OffsetDateTimeConverter.class.hashCode());
assertThat(new DefaultConfigValueEvaluator().toString()).isNotNull();
assertThat(map).hasSize(4); assertThat("aVal").isEqualTo(map.get("a")); assertThat("b3Val").isEqualTo(map.get("b.b2.b3")); assertThat("cVal1").isEqualTo(map.get("c[0]")); assertThat("cVal2").isEqualTo(map.get("c[1]"));
assertThat(getTypeParameters(String.class).length).isEqualTo(0);
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode());
assertThat(ChangeSupport.IMMUTABLE).isEqualTo(support.getChangeSupport()); assertThat(ChangeSupport.UNSUPPORTED).isEqualTo(support.getChangeSupport());
assertThat(ctx.getPropertyFilters()).hasSize(2).contains(filter1, filter2); assertThat(ctx.getPropertyFilters()).hasSize(1).contains(filter2);
assertThat(properties).isNotNull(); assertThat(properties).isEmpty(); assertThat(properties).isNotNull(); assertThat(properties).hasSize(1);
assertThat(1).isEqualTo(instance.compare(low, high)); assertThat(-1).isEqualTo(instance.compare(high, low)); assertThat(0).isEqualTo(instance.compare(low, low)); assertThat(1).isEqualTo(instance.compare(nullPriority, high)); assertThat(-1).isEqualTo(instance.compare(high, nullPriority)); assertThat(0).isEqualTo(instance.compare(nullPriority, low));
assertThat(context.getSupportedFormats()).contains("<File> (PathConverter)");
assertThat(manager.isTargetTypeSupported(TypeLiteral.of(MyType.class))) .isTrue();
assertThat(ctx.getAnnotatedElement()).isNull(); assertThat(ctx.getAnnotatedElement()).isEqualTo(MY_ANNOTATED_ELEMENT);
assertThat(result).containsKey("confkey1"); assertThat(result.get("confkey1").getValue()).isEqualTo("javaconf-value1");
assertThat(ov1.equals(ov2)).isTrue();
assertThat(conv2).isEqualTo(conv1); assertThat(conv2).isNotEqualTo(new ShortConverter()); assertThat(conv2).isNotEqualTo(null); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode());
assertThat(envEntry.getValue()).isEqualTo(envPropertySource.get(envEntry.getKey()).getValue());
assertThat(ctx.getPropertyFilters()).hasSize(2).contains(filter1, filter2); assertThat(ctx.getPropertyFilters()).hasSize(2);
assertThat(context.getSupportedFormats()).contains("<numericValue> (CurrencyConverter)", "<locale> (CurrencyConverter)", "<currencyCode>, using Locale.ENGLISH (CurrencyConverter)");
assertThat(ctx.toString()).isEqualTo("ConversionContext{configuration=null, key=\'toString\', " + "targetType=TypeLiteral{type=interface java.util.List}, " + "annotatedElement=null, supportedFormats=[0.0.0.0/nnn (MyConverter), x.x.x.x/yyy (MyConverter)]}");
assertThat(toString).isNotNull(); assertThat(toString).contains("FrozenPropertySource"); assertThat(toString).contains(MY_PS.getName());
assertThat(new URI("test:path")).isEqualTo(converter.convert("test:path ", context));
assertThat(c.evaluteRawValue("valueOfValid")).isNotNull(); assertThat(c.evaluteRawValue("valueOfNull")).isNull(); assertThat(c.evaluteRawValue("Filternull")).isNotNull();
assertThat(context.getSupportedFormats()).contains("<double>, <long> (NumberConverter)", "POSITIVE_INFINITY (NumberConverter)", "NEGATIVE_INFINITY (NumberConverter)", "NAN (NumberConverter)");
assertThat(instance.hashCode()).isEqualTo(InstantConverter.class.hashCode());
assertThat(resultBundles).hasSize(1); assertThat(mockBundleContext.getServiceCount()).isEqualTo(2); assertThat(resultBundles).hasSize(2); assertThat(mockBundleContext.getServiceCount()).isEqualTo(2); assertThat(resultBundles).hasSize(1); assertThat(mockBundleContext.getServiceCount()).isEqualTo(0);
assertThat(result).isNotEmpty();
assertThat(n.toObjectValue()).isNotNull();
assertThat(ov.isImmutable()).isFalse(); assertThat(ov2.isImmutable()).isFalse(); assertThat(ov == ov2).isTrue();
assertThat(result instanceof ConfigurationBuilder).isTrue();
assertThat("testQ").isEqualTo(c.query(config -> "testQ"));
assertThat(instance.hashCode()).isEqualTo(PathConverter.class.hashCode());
assertThat(ov.getSize()).isEqualTo(map.size()); assertThat(ov.getSize()).isEqualTo(map.size()); assertThat("b").isEqualTo(ov.getValue("a")); assertThat("c").isEqualTo(ov.getValue("b"));
assertThat(converter.convert("", context)).isNull(); assertThat(converter.convert(null, context)).isNull();
assertThat(context.getSupportedFormats().toString()).contains(" (OffsetTimeConverter)");
assertThat(c.getOrDefault("a", null)).isNotNull();
assertThat(getGenericInterfaceTypeParameters(MyListClass.class, List.class)[0]).isEqualTo(String.class);
assertThat(instance.hashCode()).isEqualTo(IntegerConverter.class.hashCode());
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(2); assertThat(source.getProperties()).contains(entry("a", PropertyValue.createValue("a", "b"))); assertThat(source.getProperties()).contains(entry("b", PropertyValue.createValue("b", "1")));
assertThat(services).isNotNull(); assertThat(services).isEmpty();
assertThat(ps).isNotNull(); assertThat(ps.get(e.getKey()).getValue()).isEqualTo(e.getValue().getValue());
assertThat(services).isNotNull(); assertThat(services).hasSize(2); assertThat(service instanceof InvalidPriorityImpl1 || service instanceof InvalidPriorityImpl2).isTrue();
assertThat(new CoreConfigurationProvider().getConfigurationBuilder()).isNotNull();
assertThat(n.toListValue()).isNotNull();
assertThat(instance.hashCode()).isEqualTo(DoubleConverter.class.hashCode());
assertThat(result).hasSize(1).containsKey("someKey");
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv2).isNotEqualTo(new LongConverter()); assertThat(conv2).isNotEqualTo(null);
assertThat(context.getSupportedFormats()).contains("<byte> (ByteConverter)", "MIN_VALUE (ByteConverter)", "MAX_VALUE (ByteConverter)");
assertThat(result.getValue()).isEqualTo("valueFromMockedWrappablePropertySource");
assertThat(context.getSupportedFormats()).contains("<double> (DoubleConverter)", "MIN_VALUE (DoubleConverter)", "MAX_VALUE (DoubleConverter)");
assertThat(ChangeSupport.IMMUTABLE).isEqualTo(source.getChangeSupport());
assertThat(1).isEqualTo(lv.getSize()); assertThat("[0]").isEqualTo(ov.getKey());
assertThat(instance.hashCode()).isEqualTo(URIConverter.class.hashCode());
assertThat(ps1.getProperties()).isNotNull(); assertThat(ps1.getProperties()).hasSize(1); assertThat(ps1.getProperties().get("a").getValue()).isEqualTo("b");
assertThat(converter.convert("", context)).isNull(); assertThat(converter.convert(null, context)).isNull();
assertThat(context.getSupportedFormats()).contains("<long> (LongConverter)", "MIN_VALUE (LongConverter)", "MAX_VALUE (LongConverter)");
assertThat(ov.getValues()).isNotNull().hasSize(2); assertThat(val).isEqualTo(ov.getPropertyValue("k1")); assertThat(val2).isEqualTo(ov.getPropertyValue("k2")); assertThat(ov.getValues()).isNotNull().hasSize(2); assertThat(val).isEqualTo(ov.getPropertyValue("k1")); assertThat(val2).isEqualTo(ov.getPropertyValue("k2"));
assertThat(new CoreConfigurationBuilder().build()).isNotNull();
assertThat(lv1.equals(lv2)).isTrue();
assertThat(new PropertyValue( "k", "v")).isEqualTo(new PropertyValue( "k", "v")); assertThat(new PropertyValue( "k2", "v")).isNotSameAs(new PropertyValue( "k", "v")); assertThat(new PropertyValue( "k", "v")).isNotSameAs(new PropertyValue( "k", "v2")); assertThat(new PropertyValue( "k", "v")).isNotSameAs(new PropertyValue( "k", "v"));
assertThat(c).isEqualTo(c.with(config -> config));
assertThat(ov).isNotNull(); assertThat(ov.getKey()).isEqualTo(lv.getKey()); assertThat(ov.getValue("[0]")).isNotNull(); assertThat(ov.getValue("[0]")).isEqualTo("List: [a]");
assertThat(envPropertySource.get("a")).isNull();
assertThat(services).isNotNull(); assertThat(services).isEmpty();
assertThat(snapshot.getKeys()).contains("confkey1"); assertThat(snapshot.getKeys()).contains("confkey2"); assertThat(snapshot.getKeys()).contains("confkey3"); assertThat(snapshot.getKeys()).doesNotContain("confkey4"); assertThat(snapshot.getKeys()).doesNotContain("foo");
assertThat(provider).isEqualTo(provider.init(ConfigurationContext.EMPTY)); assertThat(provider.getMetaData("foo")).isNotNull();
assertThat(Paths.get("testRoot")).isEqualTo(value); assertThat(value).isNotNull();
assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(1)).isEqualTo(propertySources[0]); assertThat(b.getPropertySources().get(0)).isEqualTo(propertySources[1]); assertThat(caughtAlreadyBuilt).isTrue();
assertThat(lv.getLists()).isNotEmpty().hasSize(1);
assertThat(ctx.getConfigurationContext()).isNotNull();
assertThat(ctx.getPropertySources()).hasSize(2).contains(testPropertySource, testPS2); assertThat(ctx.getPropertySources()).hasSize(1).contains(testPS2);
assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat("Object{size=\'3\', values=\'{valueKey=value}}").isEqualTo(toString);
assertThat(instance.hashCode()).isEqualTo(OffsetTimeConverter.class.hashCode());
assertThat(converter.convert("", context)).isNull(); assertThat(converter.convert(null, context)).isNull();
assertThat(instance.ordinal()).isEqualTo(10);
assertThat(ctx.getPropertyConverters(TypeLiteral.of(String.class))).contains(converter); assertThat(ctx.getPropertyConverters()).hasSize(1); assertThat(ctx.getPropertyConverters()).hasSize(1);
assertThat(BigDecimal.class).isEqualTo(converter.convert(" java.math.BigDecimal", context));
assertThat(testConverter.convert("fooBars", ctx)).isNull();
assertThat(ctx.getProperty()).isEqualTo(val);
assertThat(lv == lv2).isTrue();
assertThat(builder.build().getName()).isEqualTo(key);
assertThat(new URI("test:path")).isEqualTo(converter.convert(" test:path", context));
assertThat(new CoreConfigurationProvider().createConfiguration(cfg.getContext())).isNotNull(); assertThat(cfg).isEqualTo(new CoreConfigurationProvider().createConfiguration(cfg.getContext()));
assertThat(toString).isNotNull(); assertThat(toString).contains("FilterContext{value=\'[val]\', configEntries=[", "key-0", "key-1").endsWith("}");
assertThat(new OverriddenOrdinalPropertySource().getOrdinal()).isEqualTo(1000);
assertThat(new OverriddenOrdinalPropertySource().getOrdinal()).isEqualTo(1000);
assertThat(value).isNull();
assertThat(iter).isNotNull(); assertThat(iter.hasNext()).isTrue(); assertThat(val).isEqualTo(iter.next()); assertThat(iter.hasNext()).isTrue(); assertThat(val2).isEqualTo(iter.next()); assertThat(iter.hasNext()).isFalse();
assertThat(n.isImmutable()).isFalse(); assertThat(n.isImmutable()).isTrue(); assertThat(n.mutable().isImmutable()).isFalse();
assertThat(context.getSupportedFormats()).contains("<int> (IntegerConverter)", "MIN_VALUE (IntegerConverter)", "MAX_VALUE (IntegerConverter)");
assertThat(OSGIServiceComparator.getPriority(low)).isEqualTo(1); assertThat(OSGIServiceComparator.getPriority(nullPriority)).isEqualTo(1); assertThat(OSGIServiceComparator.getPriority(high)).isEqualTo(10);
assertThat(value).isNull(); assertThat(value).isNull();
assertThat(b.build()).isEqualTo(cfg);
assertThat(LocalDate.parse("2007-12-03")).isEqualTo(value); assertThat(value).isNull();
assertThat(instance.hashCode()).isEqualTo(ClassConverter.class.hashCode());
assertThat(context.getSupportedFormats().toString()).contains(" (LocalDateTimeConverter)");
assertThat(PropertySourceComparator.getOrdinal(defaultPropertySource)).isEqualTo(56); assertThat(new OverriddenOrdinalPropertySource().getOrdinal()).isEqualTo(1000); assertThat(new OverriddenInvalidOrdinalPropertySource().getOrdinal()).isEqualTo(1);
assertThat(b.sortPropertyFilter(pfComp).getClass()).isEqualTo(DefaultConfigurationBuilder.class); assertThat(b.getPropertyFilters().get(i)).isEqualTo(propertyFilters[i]);
assertThat(support.getValue("foo")).isNotNull(); assertThat(support.getValue("bar")).isNull();
assertThat(instance.hashCode()).isEqualTo(CurrencyConverter.class.hashCode());
assertThat(map).hasSize(4); assertThat("aVal").isEqualTo(map.get("a")); assertThat("b3Val").isEqualTo(map.get("b.b2.b3")); assertThat("cVal1").isEqualTo(map.get("c[0]")); assertThat("cVal2").isEqualTo(map.get("c[1]"));
assertThat(instance.hashCode()).isEqualTo(BigIntegerConverter.class.hashCode());
assertThat(RoundingMode.CEILING).isEqualTo(testConverter.convert(input, ctx));
assertThat(3).isEqualTo(lv.getSize()); assertThat("v").isEqualTo(lv.getPropertyValue(0).getValue()); assertThat("v1").isEqualTo(lv.getPropertyValue(1).getValue()); assertThat("v").isEqualTo(lv.getPropertyValue(2).getValue());
assertThat(currentConfig instanceof Configuration).isTrue(); assertThat(Configuration.current()).isEqualTo(newConfig); assertThat(Configuration.current()).isEqualTo(currentConfig);
assertThat(value).isNull();
assertThat(0).isEqualTo(lv.getIndex(val)); assertThat(1).isEqualTo(lv.getIndex(val2)); assertThat(-1).isEqualTo(lv.getIndex(val3));
assertThat(100 == (Integer) c.convertValue("aHundred", Collections.singletonList(PropertyValue.createValue("aHundred", "100")), TypeLiteral.of(Integer.class))).isTrue();
assertThat(resource).isNotNull(); assertThat(resource.toString()).contains("mockbundle.service");
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv2).isNotEqualTo(new OffsetTimeConverter()); assertThat(conv2).isNotEqualTo(null);
assertThat(ps).isNotNull(); assertThat(ps.getProperties()).isNotNull(); assertThat(ps.getProperties()).isNotEmpty(); assertThat(en.getValue()).isEqualTo(ps.get((String)en.getKey()));
assertThat(pv.getValue()).isEqualTo("v");
assertThat(instance.hashCode()).isEqualTo(LocalDateConverter.class.hashCode());
assertThat(duration).isEqualTo(Duration.parse("PT20.345S")); assertThat(duration).isEqualTo(Duration.parse("PT15M")); assertThat(duration).isEqualTo(Duration.parse("PT10H")); assertThat(duration).isEqualTo(Duration.parse("P2D")); assertThat(duration).isEqualTo(Duration.parse("P2DT3H4M")); assertThat(duration).isNull();
assertThat(result.longValue()).isEqualTo(101);
assertThat(source).isNotNull(); assertThat(source.getProperties()).isEmpty();
assertThat(ctx.isSinglePropertyScoped()).isEqualTo(false); assertThat(ctx.isSinglePropertyScoped()).isEqualTo(true);
assertThat(pv.getKey()).isEqualTo("k");
assertThat(converters).hasSize(1); assertThat(result).isNotNull(); assertThat(result).isInstanceOf(MyType.class); assertThat(((MyType) result).getValue()).isEqualTo("IN");
assertThat(instance.hashCode()).isEqualTo(LocalTimeConverter.class.hashCode());
assertThat(lv.getObjects("[0]")).isNotEmpty().hasSize(1); assertThat(lv.getObjects("[1]")).isNotEmpty().hasSize(1); assertThat(lv.getObjects("foo")).isEmpty();
assertThat(context.getSupportedFormats()).contains("<char> (CharConverter)", "\\\\\'<char>\\\\\' (CharConverter)");
assertThat(c.getOrDefault("a", String.class, null)).isNotNull(); assertThat((String) c.getOrDefault("a", TypeLiteral.of(String.class), null)).isNotNull();
assertThat(intResult.longValue()).isEqualTo(101); assertThat(booleanResult).isEqualTo(Boolean.TRUE);
assertThat(result).isNotNull(); assertThat(result.isPresent()).isFalse();
assertThat(context.getSupportedFormats()).contains("<enumValue> (EnumConverter)");
assertThat(BigDecimal.class).isEqualTo(converter.convert("java.math.BigDecimal ", context));
assertThat(instance.hashCode()).isEqualTo(LocalDateTimeConverter.class.hashCode());
assertThat(OffsetTime.parse("10:15:30+01:00")).isEqualTo(value); assertThat(value).isNull();
assertThat(OSGIServiceComparator.getPriority(MockHighPriorityServiceReference.class)).isEqualTo(10); assertThat(OSGIServiceComparator.getPriority(MockLowPriorityServiceReference.class)).isEqualTo(1); assertThat(OSGIServiceComparator.getPriority(MockServiceReference.class)).isEqualTo(1);
assertThat(ov == ov2).isTrue();
assertThat(provider).isEqualTo(provider.init(ConfigurationContext.EMPTY)); assertThat(provider.getMetaData("foo")).isNotNull().hasSize(1);
assertThat(ctx.getKey()).isEqualTo("getKey"); assertThat(ctx.getKey()).isEqualTo("setKey");
assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(1)).isEqualTo(propertySources[0]); assertThat(b.getPropertySources().get(0)).isEqualTo(propertySources[1]); assertThat(b.getPropertySources().get(0)).isEqualTo(propertySources[5]); assertThat(caughtAlreadyBuilt).isTrue();
assertThat(conv2).isEqualTo(conv1); assertThat(conv2).isNotEqualTo(new OptionalConverter()); assertThat(conv2).isNotEqualTo(null); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode());
assertThat(pv).isNotNull(); assertThat(ov.getValues()).hasSize(3); assertThat(val).isEqualTo(ov.getPropertyValue("k1")); assertThat(val2).isEqualTo(ov.getPropertyValue("k2")); assertThat(pv).isEqualTo(ov.getPropertyValue("foo"));
assertThat(provider.init(ConfigurationContext.EMPTY).toString()) .isEqualTo("DefaultMetaDataProvider[additionalProperties = {}, context = ConfigurationContext.EMPTY]");
assertThat(snapshot.getContext().getPropertySources()).hasSize(config.getContext().getPropertySources().size()); assertThat(snapshot.getContext().getPropertyConverters()).hasSize(config.getContext().getPropertyConverters().size()); assertThat(snapshot.getContext().getPropertyFilters()).hasSize(config.getContext().getPropertyFilters().size());
assertThat(instance.hashCode()).isEqualTo(NumberConverter.class.hashCode());
assertThat(instance.hashCode()).isEqualTo(ShortConverter.class.hashCode());
assertThat(name).isNotNull(); assertThat(name).isEqualTo(ps.getName());
assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); assertThat(b.getPropertySources().get(propertySources.length - 2)).isEqualTo(propertySources[propertySources.length - 1]); assertThat(b.getPropertySources().get(propertySources.length - 1)).isEqualTo(propertySources[propertySources.length - 2]); assertThat(caughtAlreadyBuilt).isTrue();
assertThat(service).isNotNull(); assertThat(service instanceof MultiImpl2).isTrue();
assertThat(intResult).isNull();
assertThat(ReflectionUtil.getParametrizedType(reflectable.getClass()).toString()).isEqualTo(genericListType.toString()); assertThat(ReflectionUtil.getParametrizedType(multi.getClass()).getRawType().getTypeName()).isEqualTo(First.class.getName()); assertThat(ReflectionUtil.getParametrizedType(Object.class)).isNull();
assertThat(snapshot1).isNotEqualTo(snapshot2); assertThat(((DefaultConfigurationSnapshot) snapshot1).getId()) .isNotEqualTo(((DefaultConfigurationSnapshot) snapshot2).getId());
assertThat("a").isEqualTo(root.getQualifiedKey()); assertThat("a.b").isEqualTo(child.getQualifiedKey()); assertThat("a.b.c").isEqualTo(val.getQualifiedKey());
assertThat(ov1.getValues()!=ov2.getValues()).isTrue(); assertThat(ov1.getMeta()!=ov2.getMeta()).isTrue(); assertThat(ov1.equals(ov2)).isTrue(); assertThat(ov1.iterator().next()!=ov2.iterator().next()).isTrue();
assertThat(instance.hashCode()).isEqualTo(URLConverter.class.hashCode());
assertThat(sps.isScannable()).isTrue();
assertThat(new URI("test:path")).isEqualTo(converter.convert(" test:path\\t", context));
assertThat(OffsetDateTime.parse("2007-12-03T10:15:30+01:00")).isEqualTo(value); assertThat(value).isNull();
assertThat(Instant.parse("2007-12-03T10:15:30.00Z")).isEqualTo(value); assertThat(value).isNull();
assertThat(context.getSupportedFormats()).contains("true (ignore case) (BooleanConverter)", "false (ignore case) (BooleanConverter)");
assertThat(BigDecimal.class).isEqualTo(converter.convert(" java.math.BigDecimal\\t", context));
assertThat(PropertySourceComparator.getOrdinal(defaultPropertySource)).isEqualTo(56); assertThat(new OverriddenOrdinalPropertySource().getOrdinal()).isEqualTo(1000); assertThat(new OverriddenInvalidOrdinalPropertySource().getOrdinal()).isEqualTo(1);
assertThat(converter1).isEqualTo(converter1); assertThat(converter1).isNotEqualTo(null); assertThat(converter1).isNotEqualTo("aString"); assertThat("aString").isNotEqualTo(converter1); assertThat(converter2).isEqualTo(converter1); assertThat(converter1).isNotEqualTo(converter3); assertThat(converter2.hashCode()).isEqualTo(converter1.hashCode()); assertThat(converter1.hashCode()).isNotEqualTo(converter3.hashCode());
assertThat(value).isNull();
assertThat(instance.isInitialized()).isTrue();
assertThat(b.build()).isEqualTo(cfg);
assertThat(result).isNotNull(); assertThat(result.isPresent()).isTrue(); assertThat(result.get().intValue()).isEqualTo(11);
assertThat(converter.convert("not a uri", context)).isNull();
assertThat(PropertyValue.ValueType.ARRAY).isEqualTo(PropertyValue.createList().getValueType());
assertThat(n.isLeaf()).isTrue(); assertThat(n.isLeaf()).isFalse();
assertThat(instance.isScannable()).isTrue();
assertThat(stringResult.get()).isNull(); assertThat(stringResult.get()).isEqualTo("aString"); assertThat(addressResult.get() instanceof InetAddress).isTrue();
assertThat(context.getSupportedFormats()).contains("PT20M34S (DurationConverter)");
assertThat(UUID.fromString(ps1.getName())).isNotNull();
assertThat(instance.hashCode()).isEqualTo(BooleanConverter.class.hashCode());
assertThat(ov.getKeys()).contains("k", "k2");
assertThat("Object{size=\'3\', values=\'{a=aVal, b.b2.b3=b3Val, c=cVal1}}").isEqualTo(n.toString());
assertThat(propertySource.getProperties()).describedAs("Should contain exactly 2 properties.") .hasSize(2); assertThat(propertySource.get("pre-a")).isNotNull(); assertThat(propertySource.get("pre-b")).isNotNull();
assertThat(ctx.getPropertySources()).hasSize(2).contains(testPropertySource, testPS2);
assertThat(ctx.getConfiguration()).isEqualTo(config);
assertThat(context.getSupportedFormats().toString()).contains(" (LocalTimeConverter)");
assertThat(instance.hashCode()).isEqualTo(FloatConverter.class.hashCode());
assertThat(context.getSupportedFormats()).contains("short (ShortConverter)", "MIN_VALUE (ShortConverter)", "MAX_VALUE (ShortConverter)");
assertThat(result.getValue()).isEqualTo("javaconf-value1"); assertThat(result).isNull();
assertThat(value).isNull();
assertThat(new CoreConfigurationProvider().isConfigurationSettable( getClass().getClassLoader() )).isTrue();
assertThat("a").isEqualTo(root.getKey());
assertThat(new DefaultConfigurationBuilder().build()).isNotNull();
assertThat("").isEqualTo(n.getValue()); assertThat("jhgjg").isEqualTo(n.getValue());
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv1).isNotEqualTo(new IntegerConverter()); assertThat(conv1).isNotEqualTo(null);
assertThat(b.build().getContext()).isEqualTo(context);
assertThat("java.lang.String").isEqualTo(t.getTypeName());
assertThat(foundMethod.getName()).isEqualTo("instanceOf"); assertThat(staticOf.getName()).isEqualTo("of"); assertThat(notFoundMethod).isNull(); assertThat(wrongSignature).isNull();
assertThat(cfg).isEqualTo(cfg.toBuilder().build());
assertThat(lv1.getMeta()!=lv2.getMeta()).isTrue(); assertThat(lv1.equals(lv2)).isTrue(); assertThat(lv1.iterator().next()!=lv2.iterator().next()).isTrue();
assertThat(testConverter.convert(null, ctx)).isNull();
assertThat(ps1.getName()).isEqualTo(ps2.getName()); assertThat(ps1.getProperties()).hasSize(ps2.getProperties().size());
assertThat(LocalDateTime.parse("2007-12-03T10:15:30")).isEqualTo(value); assertThat(value).isNull();
assertThat(ps).isNotNull();
assertThat(instance.hashCode()).isEqualTo(ByteConverter.class.hashCode());
assertThat(en.getKey().startsWith("someprefix")).isTrue(); assertThat(en.getValue().getValue()).isEqualTo(System.getenv(thisKey));
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(5).containsKey("key1");
assertThat(envPropertySource.getName()).isEqualTo("environment-properties");
assertThat(context.getSupportedFormats().toString()).contains(" (OffsetDateTimeConverter)");
assertThat(en.getValue().getValue()).isEqualTo(System.getenv(en.getKey()));
assertThat(iter).isNotNull(); assertThat(iter.hasNext()).isTrue(); assertThat(val).isEqualTo(iter.next()); assertThat(iter.hasNext()).isTrue(); assertThat(val2).isEqualTo(iter.next()); assertThat(iter.hasNext()).isFalse();
assertThat(LocalTime.parse("10:15:30")).isEqualTo(value); assertThat(value).isNull();
assertThat(provider).isEqualTo(provider.init(ConfigurationContext.EMPTY));
assertThat(PropertySourceComparator.getOrdinal(MY_PS)) .isEqualTo(PropertySourceComparator.getOrdinal(ps));
assertThat(resources).isNotNull(); assertThat(resource.toString()).contains("mockbundle.service"); assertThat(resources.size()).isEqualTo(1);
assertThat(pv.getMeta()).isNotNull().isEmpty();
assertThat(services).isNotNull(); assertThat(services).hasSize(2); assertThat(service instanceof InvalidPriorityImpl1 || service instanceof InvalidPriorityImpl2).isTrue(); assertThat(services).isNotNull(); assertThat(services).hasSize(3); assertThat(services.get(0) instanceof MultiImpl2).isTrue(); assertThat(services.get(1) instanceof MultiImpl1).isTrue(); assertThat(services.get(2) instanceof MultiImpl3).isTrue();
assertThat(PropertyValue.ValueType.ARRAY).isEqualTo(PropertyValue.createList().getValueType());
assertThat(providerSpi).isNotNull(); assertThat(providerSpi instanceof TestConfigurationProvider).isTrue();
assertThat(instance.hashCode()).isEqualTo(SupplierConverter.class.hashCode());
assertThat(v1).isNotEqualTo(v2);
assertThat(value).isNull(); assertThat(context.getSupportedFormats()).contains("<bigint> -> new BigInteger(bigint) (BigIntegerConverter)");
assertThat(new CoreConfigurationProvider().getConfiguration(getClass().getClassLoader())).isNotNull();
assertThat("ok").isEqualTo(c.getOrDefault("valueOfNull", "ok")); assertThat("ok").isEqualTo(c.getOrDefault("valueOfNull", String.class, "ok")); assertThat("ok").isEqualTo(c.getOrDefault("valueOfNull", TypeLiteral.of(String.class), "ok"));
assertThat(PropertyValue.createObject()).isEqualTo(PropertyValue.createObject()); assertThat(PropertyValue.createObject("a")).isNotEqualTo(PropertyValue.createObject()); assertThat(PropertyValue.createObject("")).isEqualTo(PropertyValue.createObject()); assertThat(root).isEqualTo(root);
assertThat(service).isNull();
assertThat(v1).isEqualTo(v2);
assertThat(ps1.get("a").getValue()).isEqualTo("b");
assertThat(converter.convert("not a url", context)).isNull();
assertThat(n.getParent()).isNull(); assertThat(n.getValue("b")).isNotNull(); assertThat(val).isEqualTo(n.getPropertyValue("b")); assertThat(n.getPropertyValue("b").getParent()).isNotNull();
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(2); assertThat(source.getProperties()).contains(entry("a", PropertyValue.createValue("a", "b"))); assertThat(source.getProperties()).contains(entry("b", PropertyValue.createValue("b", "1")));
assertThat(lv).isNotNull(); assertThat(lv.getKey()).isEqualTo(ov.getKey()); assertThat(lv.getPropertyValue(0)).isNotNull(); assertThat(ov.getValue("list")).isEqualTo(lv.getPropertyValue(0).getValue());
assertThat(n.isRoot()).isTrue(); assertThat(n.isRoot()).isFalse();
assertThat(BigDecimal.class).isEqualTo(converter.convert("java.math.BigDecimal", context));
assertThat(context.getSupportedFormats()).contains("<fullyQualifiedClassName> (ClassConverter)");
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(2); assertThat(source.getProperties()).contains(entry("a", PropertyValue.createValue("a", "b"))); assertThat(source.getProperties()).contains(entry("b", PropertyValue.createValue("b", "1")));
assertThat(property).isNotNull(); assertThat(property.getValue()).isEqualTo(System.getProperty(propertyKeyToCheck));
assertThat(ctx.getTargetType()).isEqualTo(TypeLiteral.of(String.class)); assertThat(ctx.getTargetType()).isEqualTo(TypeLiteral.of(Integer.class));
assertThat(lv.isImmutable()).isFalse(); assertThat(lv2.isImmutable()).isFalse(); assertThat(lv == lv2).isTrue();
assertThat(provider).isEqualTo(provider.init(ConfigurationContext.EMPTY)); assertThat(provider.getMetaData("foo")).isNotNull().isEmpty();
assertThat(instance.hashCode()).isEqualTo(LongConverter.class.hashCode());
assertThat(new CoreConfigurationBuilder().build().toBuilder()).isNotNull();
assertThat(ctx.getConfigEntries()).isEqualTo(config); assertThat(config != ctx.getConfigEntries()).isTrue();
assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat(toString).isNotNull(); assertThat("List{, size=\'3\', values=[List{, size=\'0\', values=[]}, Object{size=\'0\', values=\'{}}, " + "valueKey]}").isEqualTo(toString);
assertThat(instance.hashCode()).isEqualTo(FileConverter.class.hashCode());
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(5);
assertThat(propertySource.getProperties()).describedAs("Should contain exactly 2 properties.") .hasSize(2); assertThat(propertySource.get("pre-a")).isNotNull(); assertThat(propertySource.get("pre-b")).isNotNull();
assertThat(ov1.hashCode() == ov2.hashCode()).isTrue();
assertThat(c.get("valueOfValid")).isNotNull(); assertThat(c.get("valueOfNull")).isNull(); assertThat(c.get("Filternull")).isNull();
assertThat(context.getSupportedFormats().toString()).contains(" (LocalDateConverter)");
assertThat(context.getSupportedFormats()).contains("<uri> -> new URI(uri) (URIConverter)");
assertThat("key").isEqualTo(n.getKey()); assertThat("jhgjg").isEqualTo(n.getKey());
assertThat(context.getSupportedFormats().toString()).contains(" (InstantConverter)");
assertThat(1).isEqualTo(lv.getSize());
assertThat(instance.hashCode()).isEqualTo(OptionalConverter.class.hashCode());
assertThat(0).isEqualTo(lv.getSize()); assertThat(1).isEqualTo(lv.getSize()); assertThat(2).isEqualTo(lv.getSize());
assertThat(values).isNotNull().hasSize(4);
assertThat(source).isNotNull(); assertThat(source.getProperties()).hasSize(2); assertThat(source.getProperties()).contains(entry("a", PropertyValue.createValue("a", "b").setMeta("source", "test"))); assertThat(source.getProperties()).contains(entry("b", PropertyValue.createValue("b", "1").setMeta("source", "test")));
assertThat(b.build().getContext()).isEqualTo(context);
assertThat(PriorityServiceComparator.getInstance().compare("a", "b")==0).isTrue(); assertThat(PriorityServiceComparator.getInstance().compare(getClass(), getClass())==0).isTrue(); assertThat(PriorityServiceComparator.getInstance().compare(new A(), new SystemPropertySource())==-1).isTrue(); assertThat(PriorityServiceComparator.getInstance().compare(new SystemPropertySource(), new A())==1).isTrue();
assertThat(ps1.getOrdinal()).isEqualTo(55); assertThat(ps1.getDefaultOrdinal()).isEqualTo(166);
assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv2).isNotEqualTo(new LocalTimeConverter()); assertThat(conv2).isNotEqualTo(null);
assertThat(lv1.hashCode() == lv2.hashCode()).isTrue();
assertThat(SimplePropertySource.newBuilder()).isNotNull(); assertThat(SimplePropertySource.newBuilder()).isNotEqualTo(SimplePropertySource.newBuilder());
assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT); assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_CALL_INTENT);
assertEquals(chatroom.joinedUsers.get(0), userRef);
assertEquals(7, actual.size()); assertEquals("Android-Rate", actual.get(0).getName()); assertEquals("andrey7mel/Android-Rate", actual.get(0).getFullName()); assertEquals(26314692, actual.get(0).getId());
assertEquals(7, repositoryList.size()); assertEquals("Android-Rate", repositoryList.get(0).getRepoName()); assertEquals("andrey7mel", repositoryList.get(0).getOwnerName()); assertEquals("utils", repositoryList.get(6).getRepoName()); assertEquals("andrey7mel", repositoryList.get(6).getOwnerName());
assertEquals(11, actual.size()); assertEquals("hotchemi", actual.get(0).getLogin()); assertEquals("User", actual.get(0).getType()); assertEquals(471318, actual.get(0).getId());
assertEquals(11, contributorList.size()); assertEquals("hotchemi", contributorList.get(0).getName()); assertEquals("mrmike", contributorList.get(1).getName()); assertEquals("amitkot", contributorList.get(2).getName()); assertEquals("maarekj", contributorList.get(10).getName());
assertEquals(3, actual.size()); assertEquals("QuickStart", actual.get(0).getName()); assertEquals("94870e23f1cfafe7201bf82985b61188f650b245", actual.get(0).getCommit().getSha());
assertTrue(basePresenter.compositeSubscription.hasSubscriptions());
assertTrue(test.isUnsubscribed());
assertEquals(3, branchList.size()); assertEquals("QuickStart", branchList.get(0).getName()); assertEquals("gh-pages", branchList.get(1).getName()); assertEquals("master", branchList.get(2).getName());
assertThat(invalid).isTrue();
assertThat(HaikuReview.hasWord(text) ).isEqualTo(false);
assertThat(wordCount).isEqualTo(3);
assertThat(fizzBuzz.output(10)).isEqualTo("Buzz");
assertThat(valid).isTrue();
assertThat(syllableCount).isEqualTo(2);
assertThat(output).contains("oirb");
assertThat(result).isEqualTo(Arrays.asList(2, 2, 3));
assertThat(calculator.total()).isEqualTo(15.2D);
assertThat(output).contains("ibro");
assertThat(list(ONE), is(PrimeNumbers.generate(1)));
assertEquals(expected, actual);
assertThat(s).hasSize(3);
assertThat(output).contains("oirb");
assertThat(output).contains("ibro");
assertThat(output.size()).isEqualTo(BIRO_MAX_COMBINATIONS);
assertThat(item.getQuality()).isEqualTo(49);
assertEquals(true, result);
assertEquals(game.play(), Result.WIN);
assertThat(new LeapYear().isALeapYear(2000)).isTrue();
assertThat(result).hasSameSizeAs(expected);
assertThat(output).contains("neb");
assertEquals(true, result);
assertThat(validated).isFalse();
assertEquals(expected, actual);
assertThat(leapYear.isLeap(year)).isEqualTo(isLeapYear);
assertThat(isHaiku).isTrue();
assertThat(wordCount).isEqualTo(10);
assertFalse(result);
assertEquals(0, list.size());
assertThat(new LeapYear().isALeapYear(1700)).isFalse();
assertThat(result).isEqualTo(Arrays.asList(3, 5));
assertThat(list(TWO), is(PrimeNumbers.generate(2)));
assertThat(result).isEqualTo(scissors);
assertThat(number).isEqualTo(1);
assertThat(output).contains( "blundell", "lbundell", "ulbndell", "nlubdell", "dlunbell", "elundbll", "llundebl", "llundelb");
assertThat(anagram).hasSize(AB.length());
assertThat(result).isEqualTo(Arrays.asList(3));
assertThat(result).isEqualTo(paper);
assertThat(output).contains("Yes");
assertThat(lines[0]).isEqualTo("happy purple frog"); assertThat(lines[1]).isEqualTo("eating bugs in the marshes"); assertThat(lines[2]).isEqualTo("get indigestion");
assertThat(output).hasSize(24);
assertThat(output).isEqualTo("5,7,5,Yes");
assertThat(isHaiku).isFalse();
assertThat(isSyllable).isTrue();
assertEquals(false, alarm.isAlarmOn());
assertThat(b).isFalse();
assertThat( HaikuReview.checkWordsInEachLine(text)) .isEqualTo(true);
assertEquals(Arrays.asList(driver1.getName(), driver2.getName(), driver3.getName()), rankings);
assertThat(anagrams.anagram("bir")).contains("irb");
assertThat(result).hasSameSizeAs(expected);
assertThat(output).hasSize(24);
assertFalse(result);
assertThat(output.size()).isEqualTo(BIRO_MAX_COMBINATIONS);
assertThat(output).isEqualTo("3,7,3,No");
assertThat(output).isEqualTo("4,7,4,No");
assertThat(isVowel).isFalse();
assertThat(output).contains("ebn");
assertThat(invalid).isTrue();
assertThat(setup).isTrue();
assertEquals(true, result);
assertThat(b).isTrue();
assertThat(output).contains("ribo");
assertTrue(result);
assertThat(splitHaiku).hasSize(3);
assertThat(fizzBuzz.output(5)).isEqualTo("Buzz");
assertThat(lines.length).isEqualTo(3);
assertThat(isSyllable).isTrue();
assertThat(fizzBuzz.output(3)).isEqualTo("Fizz");
assertThat(syllableCount).isEqualTo(1);
assertThat(calculator.total()).isEqualTo(24.0D - 2.4D);
assertThat(bowlingGame.score()).isEqualTo(30);
assertThat(anagrams.anagram("bir")).contains("rib");
assertThat(fizzBuzz.output(15)).isEqualTo("FizzBuzz");
assertThat(isVowel).isTrue();
assertThat(result).isEqualTo(stone);
assertThat(valid).isTrue();
assertThat(new LeapYear().isALeapYear(1900)).isFalse();
assertEquals(expected, actual);
assertThat(results.size()).isEqualTo(1); assertThat(results).contains("a");
assertThat(count).isEqualTo(4);
assertThat(output).contains("biro");
assertThat(output.size()).isEqualTo(BIRO_MAX_COMBINATIONS);
assertThat(new LeapYear().isALeapYear(1992)).isTrue();
assertThat(numberOfSyllables).isEqualTo(17);
assertThat(validated).isTrue();
assertThat(new LeapYear().isALeapYear(1600)).isTrue();
assertThat(isHaiku).isFalse();
assertThat(result).isEqualTo(expected);
assertEquals(expect("&amp;"), converter.convertToHtml(reader));
assertEquals(FILE_PATH, converter.getFilename());
assertThat(item.getQuality()).isEqualTo(48);
assertThat(bowlingGame.score()).isEqualTo(29);
assertThat(result).isEqualTo(Arrays.asList(2,2));
assertThat(result).isEqualTo(Result.WIN);
assertThat(haiku.isValidLineCount()).isTrue();
assertTrue("results " + results, results.containsKey("Lewis Hamilton")); assertEquals(18 + 18 + 25, (int) results.get("Lewis Hamilton"));
assertThat(new LeapYear().isALeapYear(1996)).isTrue();
assertThat(results.size()).isEqualTo(2); assertThat(results).contains("ab"); assertThat(results).contains("ba");
assertThat(validated).isTrue();
assertThat(i).isEqualTo(2);
assertThat(fizzBuzz.output(30)).isEqualTo("FizzBuzz");
assertTrue(result);
assertEquals(" " + BREAK_LINE, converter.convertToHtml(reader));
assertThat(count).isEqualTo(5);
assertThat(count).isEqualTo(7);
assertThat(i).isEqualTo(5);
assertThat(list(THREE), is(PrimeNumbers.generate(3)));
assertThat(isHaiku).isFalse();
assertThat(result).isEqualTo(Arrays.asList(2));
assertThat(output).contains("biro");
assertThat(syllableCount).isEqualTo(5);
assertThat(valid).isTrue(); assertThat(invalid).isFalse();
assertThat(valid).isFalse();
assertThat(output).contains("No");
assertThat(isSyllable).isFalse();
assertThat(calculator.total()).isEqualTo(Book.defaultPrice());
assertThat(new LeapYear().isALeapYear(2001)).isFalse();
assertThat(syllableCount).isEqualTo(1);
assertEquals("Lewis Hamilton", TestData.sampleLeaderboard1.driverRankings().get(0));
assertThat(anagrams.anagram("bi")).contains("ib");
assertThat(bowlingGame.score()).isEqualTo(30);
assertThat(numberOfLines).isEqualTo(3);
assertThat(count).isEqualTo(5);
assertThat( HaikuReview.checkWordsInEachLine(text)) .isEqualTo(false);
assertThat(fizzBuzz.output(6)).isEqualTo("Fizz");
assertThat(b).isTrue();
assertThat(calculator.total()).isEqualTo(16D);
assertThat(bowlingGame.score()).isEqualTo(20);
assertEquals(expected, actual);
assertThat(output).contains("ibro");
assertThat(output.size()).isEqualTo(BIRO_MAX_COMBINATIONS);
assertThat( HaikuReview.hasThreeLines("one line/two lines") ).isEqualTo(false);
assertThat(number).isEqualTo(1);
assertThat(lines.size()).isEqualTo(3);
assertThat(fizzBuzz.output(1)).isEqualTo("1");
assertThat(output).contains("ibro");
assertThat(output).contains("ibro");
assertThat(output).contains("brio");
assertThat(i).isEqualTo(1);
assertThat( HaikuReview.hasWord(text) ).isEqualTo(true);
assertThat(fizzBuzz.output(2)).isEqualTo("2");
assertThat( HaikuReview.hasThreeLines("one line/two lines/three lines") ).isEqualTo(true);
assertThat(result).isEqualTo(Arrays.asList(2, 3));
assertThat(list(FOUR), is(PrimeNumbers.generate(4)));
assertThat(result).isEqualTo(Arrays.asList(3, 3));
assertThat(bowlingGame.score()).isEqualTo(0);
assertTrue(recents.isEmpty());
assertThat(output).contains("biro");
assertThat(valid).isTrue();
assertEquals(FILE_PATH, converter.getFilename());
assertEquals(mockedPath, ConfigUtils.getConfigFilePath());
assertEquals(defaultPath, ConfigUtils.getConfigFilePath());
assertEquals(decoded, response);
assertFalse(getResponse.isPresent()); assertSame(getResponse.get(), response);
assertEquals(KeyUtils.truncateKey(key), expectedResult == null ? key : expectedResult);
assertEquals(data.getData(), encoded); assertEquals(data.getFlags(), 0);
assertEquals(RequestCacheControl.valueOf(value).toString(), value);
assertEquals(reference, output, mime);
assertEquals(reference, output, mapContentType(fFormat));
assertThat(arguments).containsExactly("36");
assertThat(RunnerExpressionParser.parseExpressions("myvalue:secondvalue")).isEqualTo("myvalue:secondvalue");
assertThat(ResolveClassAnnotation.getClassWithAnnotation(B.class, Pact.class)).isPresent();
assertThat(arguments).containsExactly("dog, cat, mouse");
assertThat(RunnerExpressionParser.parseExpressions("${myprop2:}")).isEqualTo("");
assertThat(ArrayMatcher.matches(states, "I have 36 cukes in my belly")).isTrue();
assertThat(ResolveClassAnnotation.getClassWithAnnotation(A.class, Pact.class)).isPresent();
assertThat(contractFile).exists(); assertThat(contractFile).hasContent("My contract");
assertThat(PactConsumerVersionExtractor.fromClassPath()).startsWith("3.5");
assertThat(ArrayMatcher.matches(states, "I have 36 cukes in my belly")).isTrue();
assertThat(ArrayMatcher.matches(states, "I have 36 cukes in my belly")).isFalse();
assertThat(RunnerExpressionParser.parseExpressions("${myprop}")).isEqualTo("myvalue");
assertThat(pactDefinition.consumer).isEqualTo(new Consumer("planets_consumer")); assertThat(pactDefinition.interaction).isNotNull();
assertThat(RunnerExpressionParser.parseExpressions("myvalue")).isEqualTo("myvalue");
assertThat(url).isInstanceOf(URL.class); assertThat(urlObject).hasHost("mocked.org");
assertThat(RunnerExpressionParser.parseExpressions("${myprop2:myvalue}")).isEqualTo("myvalue");
assertThat(RunnerExpressionParser.parseExpressions("${myprop-colon}")).isEqualTo("myvalue");
assertThat(arguments).isEmpty();
assertThat(arguments).containsExactly("36", "belly");
assertTrue(new NomeRaro().test(pessoa));
assertEquals(sha256HashUnicode, DigestUtils.makeSha256Hash( unicodeStr.getBytes(StandardCharsets.UTF_8))); assertEquals(sha256HashBinary, DigestUtils.makeSha256Hash(binary));
assertTrue(DigestUtils.isMd5Hash(md5HashBinary)); assertTrue(DigestUtils.isMd5Hash(md5HashUnicode)); assertFalse(DigestUtils.isMd5Hash(sha256HashBinary)); assertFalse(DigestUtils.isMd5Hash(sha256HashUnicode)); assertFalse(DigestUtils.isMd5Hash("")); assertFalse(DigestUtils.isMd5Hash(unicodeStr));
assertEquals(md5HashUnicode, DigestUtils.makeMd5Hash( unicodeStr.getBytes(StandardCharsets.UTF_8))); assertEquals(md5HashBinary, DigestUtils.makeMd5Hash(binary));
assertTrue(DigestUtils.isSha256Hash(sha256HashBinary)); assertTrue(DigestUtils.isSha256Hash(sha256HashUnicode)); assertFalse(DigestUtils.isSha256Hash(md5HashBinary)); assertFalse(DigestUtils.isSha256Hash(md5HashUnicode)); assertFalse(DigestUtils.isSha256Hash("")); assertFalse(DigestUtils.isSha256Hash(unicodeStr));
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getUsername(), generatedDto.getUsername()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNull(generatedDto.getUsername());
assertEquals(1, reportItems.size()); assertNotNull(item.getIdentity()); assertEquals(identity.getId(), item.getIdentity().getId()); assertNotNull(item.getWorkPosition()); assertEquals(treeNode.getId(), item.getWorkPosition().getId()); assertNotNull(item.getIdentityContract()); assertEquals(contact.getId(), item.getIdentityContract().getId()); assertEquals(1, duplicities.size()); assertNotNull(duplicity.getRole()); assertEquals(role.getId(), duplicity.getRole().getId());
assertEquals(2, roles.size()); assertEquals(2, roles.size());
assertNotNull(generated); assertEquals(identityDto.getUsername() + suffix, generated.getPosition());
assertNotNull(generatedDto.getEmail()); assertEquals(finalUsername + emailSuffixResult, generatedDto.getEmail());
assertNotNull(generatedDto.getEmail()); assertEquals(finalUsername + emailSuffixResult, generatedDto.getEmail());
assertTrue("#1", result.getContent().contains(item)); assertTrue("#2", result.getContent().contains(item2)); assertTrue("#4",result.getContent().contains(item3));
assertNotNull(generated.getCode()); assertTrue(generated.getCode().isEmpty());
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNotNull(generatedDto.getUsername()); assertEquals(firstName.toLowerCase() + lastName.toLowerCase(), generatedDto.getUsername());
assertNotNull(exampleAction); assertNotNull(processAction.getLongRunningTaskId()); assertEquals(Long.valueOf(3), longRunningTask.getCount()); assertEquals(Long.valueOf(3), longRunningTask.getSuccessItemCount()); assertEquals(Long.valueOf(0), longRunningTask.getFailedItemCount()); assertEquals(Long.valueOf(0), longRunningTask.getWarningItemCount()); assertEquals(3, items.size()); assertTrue(identitySuccess); assertTrue(identitySuccess2); assertTrue(identitySuccess3);
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNotNull(generatedDto.getUsername()); assertEquals(newFirstName + newLastName, generatedDto.getUsername());
assertEquals(2, reportItems.size()); assertNotNull(item.getIdentity()); assertEquals(identity.getId(), item.getIdentity().getId()); assertNotNull(item.getWorkPosition()); assertEquals(treeNode.getId(), item.getWorkPosition().getId()); assertNotNull(item.getIdentityContract()); assertEquals(1, duplicities.size());
assertTrue("Long polling should be enabled by default!", longPollingManager.isLongPollingEnabled()); assertFalse(longPollingManager.isLongPollingEnabled());
assertNull(generatedDto.getEmail());
assertEquals(identityOne.getCreated().plus(1, ChronoUnit.MILLIS), lastTimeStamp); assertEquals(identityOne.getModified().plus(1, ChronoUnit.MILLIS), lastTimeStamp); assertEquals(identityOne.getCreated().plus(1, ChronoUnit.MILLIS), lastTimeStamp); assertEquals(identityOne.getModified().plus(1, ChronoUnit.MILLIS), lastTimeStamp);
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNotNull(generatedDto.getUsername()); assertEquals(firstName.toLowerCase() + lastName.toLowerCase(), generatedDto.getUsername());
assertEquals(1, resultModels.getInfos().size()); assertEquals(AccResultCode.ROLE_ACM_BULK_ACTION_NONE_IDENTITIES.getCode(), resultModels.getInfos().get(0).getStatusEnum()); assertEquals(1, resultModels.getInfos().size()); assertEquals(AccResultCode.ROLE_ACM_BULK_ACTION_NUMBER_OF_IDENTITIES.getCode(), resultModels.getInfos().get(0).getStatusEnum());
assertNull(systemService.getByCode(name)); assertNotNull(systemService.getByCode(name));
assertNotNull(generated.getCode()); assertEquals("node-test123", generated.getCode());
assertNotNull(generated); assertEquals(prefix + identityDto.getUsername(), generated.getPosition());
assertEquals("Wrong number of items!",1,result.getTotalElements()); assertTrue(result.getContent().contains(item)); assertFalse(result.getContent().contains(item2)); assertEquals("Wrong number of items!",1,result.getTotalElements()); assertTrue(result.getContent().contains(item2)); assertFalse(result.getContent().contains(item));
assertNotNull(generatedDto.getDescription()); assertEquals(username + 123, generatedDto.getDescription());
assertNotNull(e.getMessage()); assertNotNull(e.getMessage());
assertTrue(eavs.isEmpty()); assertFalse(eavs.isEmpty()); assertNotNull(generatedEav); assertEquals(1, values.size()); assertEquals(attrDefaultValue1, value.getValue().toString()); assertEquals(1, values.size()); assertEquals(attrDefaultValue2, value.getValue().toString());
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNotNull(generatedDto.getUsername()); assertEquals(newFirstName + "--" + newLastName, generatedDto.getUsername());
assertNotNull(generated); assertEquals(positionName, generated.getPosition());
assertNull(generatedDto.getEmail());
assertEquals(0, resultModels.getInfos().size()); assertEquals(1, resultModels.getInfos().size());
assertEquals(IdmIdentityDto.class.getCanonicalName(), generator.getDtoType());
assertEquals(errModel.getStatusEnum(), AccResultCode.GROOVY_SCRIPT_ATTR_TRANSFORMATION_FAILED.getCode()); assertTrue(message.contains(script)); assertTrue(idmPath.contains(system.getCode())); assertTrue(idmPath.contains(systemMapping.getName())); assertTrue(idmPath.contains(attrMapping.getName()));
assertTrue(eavs.isEmpty()); assertFalse(eavs.isEmpty()); assertNotNull(generatedEav); assertEquals(1, values.size()); assertEquals(attrDefaultValue1, value.getValue().toString()); assertEquals(1, values.size()); assertEquals(attrDefaultValue2, value.getValue().toString());
assertNotNull(generated); assertEquals(identityDto.getUsername(), generated.getPosition());
assertEquals(1, notifications.size()); assertEquals(IdmEmailLog.NOTIFICATION_TYPE, notificationLogDto.getType()); assertTrue(notificationLogDto.getMessage().getHtmlMessage().contains(bulkAction.getName()));
assertNull(generated.getCode());
assertEquals(2, result.getTotalElements()); assertTrue(result.getContent().contains(mappingSystem1)); assertTrue(result.getContent().contains(mappingSystem2));
assertEquals(1, reportItems.size()); assertEquals(3, duplicities.size()); assertEquals(role.getId(), duplicity.getRole().getId());
assertEquals(1, result.getTotalElements()); assertTrue(result.getContent().contains(mappingSystem1)); assertFalse(result.getContent().contains(mappingSystem2));
assertEquals(errModel.getStatusEnum(), AccResultCode.GROOVY_SCRIPT_ATTR_TRANSFORMATION_FAILED.getCode()); assertTrue(message.contains(script)); assertTrue(idmPath.contains(system.getCode())); assertTrue(idmPath.contains(systemMapping.getName())); assertTrue(idmPath.contains(attrMapping.getName()));
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNotNull(generatedDto.getUsername()); assertEquals(255, generatedDto.getUsername().length());
assertEquals(0, reportItems.size());
assertEquals(TEST_ONE, result);
assertEquals(item.getLongRunningTask(), retrieved.getLongRunningTask()); assertEquals(item.getReferencedDtoType(), retrieved.getReferencedDtoType()); assertEquals(item.getReferencedEntityId(), retrieved.getReferencedEntityId()); assertNotEquals(item.getLongRunningTask(), saved.getLongRunningTask()); assertNotEquals(item.getReferencedDtoType(), saved.getReferencedDtoType()); assertNotEquals(item.getReferencedEntityId(), saved.getReferencedEntityId());
assertTrue(result.getContent().contains(item)); assertTrue(result.getContent().contains(item2)); assertFalse(result.getContent().contains(item3));
assertNull(scheduledTaskService.get(d.getId())); assertNull(service.get(item.getId()));
assertNull(longrunningService.get(lrt.getId())); assertNull(service.get(item.getId())); assertNotNull(scheduledTaskService.get(d.getId()));
assertEquals("Wrong number of items!", 2, result.getTotalElements()); assertTrue(result.getContent().contains(item)); assertTrue(result.getContent().contains(item2));
assertNotNull(retrieved); assertEquals(item.getReferencedDtoType(), retrieved.getReferencedDtoType()); assertEquals(item.getReferencedEntityId(), retrieved.getReferencedEntityId()); assertEquals(item.getLongRunningTask(), retrieved.getLongRunningTask());
assertNotNull(generatedDto.getEmail()); assertEquals(lastNameResult + firstNameResult + emailSuffix, generatedDto.getEmail());
assertEquals("Wrong number of items!",2,result.getTotalElements()); assertTrue(result.getContent().contains(item)); assertTrue(result.getContent().contains(item2)); assertFalse(result.getContent().contains(item3));
assertNotNull(generated); assertEquals(prefix + identityDto.getUsername() + suffix, generated.getPosition());
assertNotNull(generatedDto.getEmail()); assertEquals(username + "@" + emailSuffix, generatedDto.getEmail());
assertEquals(identityDto.getLastName(), generatedDto.getLastName()); assertEquals(identityDto.getUsername(), generatedDto.getUsername()); assertEquals(identityDto.getFirstName(), generatedDto.getFirstName()); assertNull(generatedDto.getUsername());
assertNotNull(generatedDto.getEmail()); assertEquals(username + emailSuffix, generatedDto.getEmail());
assertEquals("xhtml/chapter1.html", book.getTableOfContents().getTocReferences().get(0).getCompleteHref());
assertThat(actual).isNull();
assertThat(e) .isInstanceOf(PersistenceException.class) .hasCauseInstanceOf(ConstraintViolationException.class);
assertThat(e).isInstanceOf(EntityNotFoundException.class); assertThat(e) .hasMessageContaining(TestEntity.class.getSimpleName()) .hasMessageContaining("not found");
assertThat(setEntity1.getId()).isNotEqualTo(setEntity2.getId());
assertThat(actual).isEqualTo(expected);
assertThat(actual).isNull();
assertThat(setEntity1.getId()).isNotEqualTo(setEntity2.getId());
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(e.getMessage()) .containsIgnoringCase("handicapGroupSet") .containsIgnoringCase("null");
assertThat(actual).isEqualTo(expected);
assertThat(actual.getStatus()).isEqualTo(HttpStatus.CONFLICT_409);
assertThat(actual).isEqualTo(expected);
assertThat(entity1.getId()).isNotEqualTo(entity2.getId());
assertThat(actual).isEqualTo(expected);
assertThat(actual.getRun()).isSameAs(run);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(lastInSequenceForEvent).isNull();
assertThat(actual).isSameAs(addedRun);
assertThat(actual.getOutcome()).isEqualTo(RunTimeAddedPayload.Outcome.RUN_RAWTIME_ASSIGNED_TO_EXISTING); assertThat(actual.getRun()).isSameAs(runWithRawTimeAssigned);
assertThat(actual).isSameAs(domainEntities);
assertThat(actual).isTrue().isEqualTo(task.ok);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(entity1.getId()).isNotEqualTo(entity2.getId());
assertThat(actual).isFalse().isEqualTo(task.ok);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isSameAs(registration);
assertThat(actual.getStatus()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR_500); assertThat((ErrorMessage) actual.getEntity()) .extracting(ErrorMessage::getCode, ErrorMessage::getMessage, ErrorMessage::getDetails) .containsExactly(HttpStatus.INTERNAL_SERVER_ERROR_500, message, null);
assertThat(actual).isSameAs(domainSetEntity);
assertThat(actual).extracting( GetRegistrationResultsPayload::getRegistration, GetRegistrationResultsPayload::getScore ).containsExactly(registration, null);
assertThat(actual) .extracting(ScoredRun::getRawTimeScored, ScoredRun::getHandicapTimeScored) .containsExactly(RunScoringInteractor.TIME_DID_NOT_FINISH, RunScoringInteractor.TIME_DID_NOT_FINISH);
assertThat(serializationFeatureArgumentCaptor.getValue()) .isEqualTo(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); assertThat(valueArgumentCaptor.getValue()).isFalse();
assertThat(actual).isSameAs(addedRun);
assertThat(actual).isNull();
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isNull();
assertThat(actual).isEqualTo(expected);
assertThat(newEvent.getId()) .isNotEmpty();
assertThat(actual.getScore()).isEqualTo(expectedScoredRun); assertThat(actual.getScoredRuns()).isEqualTo(expectedScoredRuns); assertThat(actual.getRegistration()).isSameAs(registration);
assertThat(actual).isSameAs(expected);
assertThat(actual).isSameAs(registrations);
assertThat(actual) .isNotNull() .isEmpty();
assertThat(actual).isSameAs(domainEntity);
assertThat(actual.getStatus()).isEqualTo(HttpStatus.NOT_FOUND_404);
assertThat(actual.getScoredRuns()).hasSize(1); assertThat(actual.getScore()).isSameAs(expectedScoredRun);
assertThat(actual).isEqualTo(expected);
assertThat(handicapGroup.hashCode()).isEqualTo(otherHandicapGroup.hashCode());
assertThat(e) .isInstanceOf(PersistenceException.class) .hasCauseInstanceOf(DataException.class);
assertThat(actual).isSameAs(registration);
assertThat(e) .isInstanceOf(PersistenceException.class) .hasCauseInstanceOf(ConstraintViolationException.class);
assertThat(actual).isNull();
assertThat(registration.hashCode()).isEqualTo(otherRegistration.hashCode());
assertThat(actual).isSameAs(domainEntity);
assertThat(actual).isNull();
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(e.getMessage()) .containsIgnoringCase("competitionGroupSet") .containsIgnoringCase("null");
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual.getStatus()).isEqualTo(HttpStatus.UNPROCESSABLE_ENTITY_422);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isSameAs(domainSetEntity);
assertThat(e).isInstanceOf(javax.validation.ConstraintViolationException.class);
assertThat(actual).isSameAs(domainEntity);
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertTrue(report.isSuccessful());
assertEquals("(POTOWNER in " + role1 + ", " + role2 + ", " + userId + ")", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertFalse(indexer.accept("A String")); assertFalse(indexer.accept(57)); assertFalse(indexer.accept(Boolean.FALSE)); assertFalse(indexer.accept(null)); assertTrue(indexer.accept(new Documents()));
assertEquals(expected, rendered); assertThat(templateManager.getRemoved()).hasSize(1).contains("basic-email");
assertNotNull(errors); assertEquals(0, errors.length); assertNotNull(errors2); assertEquals(1, errors2.length); assertEquals("Node \'MyDynamicNode\' [1] Dynamic has no completion condition set", errors2[0].getMessage());
assertNotNull(manager); assertNotNull(ksession); assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState()); assertNull(processInstance);
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(tasks); assertEquals(1, tasks.size()); assertNotNull(task); assertEquals(ADDTASKAFTERACTIVE_EXPR_ID_V1, task.getProcessId()); assertEquals(DEPLOYMENT_ID_V1, task.getDeploymentId()); assertEquals("Active Task test", task.getName()); assertNotNull(report); assertTrue(report.isSuccessful());
assertEquals(1, process.size()); assertEquals("my first case", process.get(0).getExtraData().get("name")); assertNotNull(caseId); assertEquals(FIRST_CASE_ID, caseId);
assertThat(messageContent) .isNotNull() .doesNotContain("<auditTask>") .doesNotContain("<org.jbpm.services.task.audit.impl.model.TaskEventImpl>") .contains("<taskInputs>");
assertEquals("((ENTITY_ID is_null OR ENTITY_ID != " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER = OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertNull(jobInstance); assertNull(jobInstance); assertNotNull(jobInstance);
assertNotNull(result); assertTrue(result instanceof SimpleCustomObject); assertEquals("default", ((SimpleCustomObject) result).getName());
assertNotNull(manager); assertNotNull(ksession);
assertNull(foundProcessId);
assertNotNull(processes); assertEquals(2, processes.size()); assertTrue(mappedProcesses.containsKey("UserTask")); assertTrue(mappedProcesses.containsKey("DataVerification")); assertNotNull(processes); assertEquals(1, processes.size()); assertTrue(mappedProcesses.containsKey("UserTask")); assertNotNull(processes); assertEquals(2, processes.size()); assertTrue(mappedProcesses.containsKey("UserTask")); assertTrue(mappedProcesses.containsKey("DataVerification"));
assertThat(found).hasSize(2); assertThat(found).contains("owner"); assertThat(found).contains("manager");
assertEquals( 1, wiser.getMessages().size() ); assertEquals( "Test body", content ); assertEquals( "Test notification", msg.getSubject() ); assertEquals( "admin@jbpm.org", ((InternetAddress)msg.getFrom()[0]).getAddress() ); assertEquals( "john@domain.com", ((InternetAddress)msg.getRecipients( RecipientType.TO )[0]).getAddress() ); assertNull( msg.getRecipients( RecipientType.CC ) ); assertNull( msg.getRecipients( RecipientType.BCC ) );
assertNotNull(repoResults); assertFalse(repoResults.isEmpty()); assertEquals(repoResults.size(), 1); assertNotNull(repoResults2); assertTrue(repoResults2.isEmpty()); assertNotNull(repoResults3); assertTrue(repoResults3.isEmpty());
assertThat(parameters).hasSize(5); assertThat(parameters) .containsEntry(AUTHOR_PARAM, comment.getAuthor()) .containsEntry(CASE_ID_PARAM, "CASE-00001") .containsEntry(COMMENT_ID_PARAM, comment.getId()) .containsEntry(COMMENT_PARAM, commentContent.toString()) .containsEntry(CREATED_AT_PARAM, comment.getCreatedAt());
assertTrue(t instanceof CompileException);
assertNotNull(processInstanceId); assertNotNull(report); assertTrue(report.isSuccessful());
assertNotNull(processInstanceId); assertNotNull(reports); assertTrue(report.isSuccessful());
assertTrue(organizationalEntity1 instanceof Group); assertEquals("Software Developers", organizationalEntity1.getId()); assertTrue(organizationalEntity2 instanceof Group); assertEquals("Project Managers", organizationalEntity2.getId());
assertThat(found).isEmpty();
assertNotNull(processInstanceId); assertNotNull(report); assertFalse(report.isSuccessful()); assertNotNull(error); assertEquals("Node with id _54C7BD3A-0BE4-4C87-9689-C492B8469D2D was not found in new process definition", error.getMessage());
assertEquals(1, messages.size()); assertEquals(workItem.getParameter("Subject"), message.getSubject()); assertTrue(Arrays.equals(InternetAddress.parse((String) workItem.getParameter("To")), message.getRecipients(RecipientType.TO))); assertTrue(message.getContent() instanceof Multipart); assertEquals(2, multipart.getCount()); assertEquals("email.png", bodyPart.getFileName());
assertNotNull(processInstanceId); assertNotNull(timers); assertEquals(1, timers.size()); assertEquals("usertask-timer", timer.getTimerName());
assertThat(collected).hasSize(2); assertThat(collected).allMatch(item -> item instanceof User); assertThat(commentContent.toString()).isEqualTo("simple comment for john and mary");
assertEquals(userId, metaData.get("OwnerId"));
assertNotNull(processInstanceId); assertNotNull(report); assertTrue(report.isSuccessful());
assertTrue(exists);
assertEquals(task, commandTask);
assertNotNull(errors); assertEquals(0, errors.length);
assertNotNull(repoResults); assertTrue(repoResults.isEmpty());
assertNotNull(repoResults); assertFalse(repoResults.isEmpty()); assertEquals(repoResults.size(), 1);
assertEquals(1, peopleAssignments.getTaskStakeholders().size()); assertTrue(organizationalEntity1 instanceof User); assertEquals(taskStakeholderId, organizationalEntity1.getId());
assertEquals("ID = role1, role2, userId", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertNull(dataSetLookup.getFirstFilterOp());
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertEquals(PROCESS_ID_V1, task.getProcessId()); assertEquals(DEPLOYMENT_ID_V1, task.getDeploymentId()); assertEquals(TASK_NAME_V1, task.getName()); assertNotNull(report); assertTrue(report.isSuccessful());
assertEquals("((ENTITY_ID is_null OR ENTITY_ID != " + userId + ") AND ((ID = " + role1 + ", " + role2 + ", " + userId + " AND (ACTUALOWNER = OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertEquals(1, peopleAssignments.getExcludedOwners().size()); assertTrue(organizationalEntity1 instanceof User); assertEquals(excludedOwnerId, organizationalEntity1.getId());
assertTrue(KModuleDeploymentService.isProcessFile("abc.bpmn")); assertTrue(KModuleDeploymentService.isProcessFile("abc.bpmn2")); assertTrue(KModuleDeploymentService.isProcessFile("abc.bpmn-cm")); assertFalse(KModuleDeploymentService.isProcessFile("abc.bpmn2-cm"));
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertFalse(report.isSuccessful()); assertNotNull(log); assertEquals(PROCESS_ID_V1, log.getProcessId()); assertEquals(DEPLOYMENT_ID_V1, log.getExternalId());
assertEquals("(POTOWNER in " + userId + ")", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertThat(messageContent) .isNotNull() .doesNotContain("<auditTask>") .contains("<org.jbpm.services.task.audit.impl.model.TaskEventImpl>") .contains("<type>RELEASED</type>");
assertTrue(resolvedTestStatuses.equals(resultStatuses)); assertFalse(resolvedTestStatuses.equals(invalidResultStatuses));
assertNotNull(report); assertThat(report.isSuccessful()).isTrue(); assertThat(report.getReports()).hasSize(1);
assertNotNull(result); assertTrue(result instanceof String); assertEquals("0", ((String) result));
assertNotNull(foundProcessId); assertEquals("5", foundProcessId);
assertNotNull(manager); assertNotNull(manager);
assertNotNull(groups); assertEquals(1, groups.size()); assertEquals("PM", groups.get(0));
assertTrue(exists);
assertEquals( 1, wiser.getMessages().size() ); assertEquals( "Test body", content ); assertEquals( "Test notification", msg.getSubject() ); assertEquals( "admin@jbpm.org", ((InternetAddress)msg.getFrom()[0]).getAddress() ); assertEquals( "john@domain.com", ((InternetAddress)msg.getRecipients( RecipientType.TO )[0]).getAddress() ); assertNull( msg.getRecipients( RecipientType.CC ) ); assertNull( msg.getRecipients( RecipientType.BCC ) );
assertEquals(cacheable, cacheManager.get("cacheable")); assertEquals(otherCacheable, cacheManager.get("other_cacheable")); assertEquals(cached, cacheManager.get("cached")); assertNull(cacheManager.get("cacheable")); assertNull(cacheManager.get("other_cacheable")); assertNull(cacheManager.get("cached"));
assertEquals("TASKID = -1", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertEquals("DEPLOYMENTID in deployment1, deployment2", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertNull(dataSetLookup.getFirstFilterOp());
assertNotNull(processInstanceId); assertNotNull(reports); assertTrue(report.isSuccessful());
assertEquals(expected, rendered); assertThat(templateManager.getCreatedOrUpdated()).hasSize(1).contains("basic-email");
assertNotNull(peopleAssignment); assertNotNull(peopleAssignment); assertNotNull(peopleAssignment); assertEquals(0, peopleAssignment.getPotentialOwners().size()); assertEquals(0, peopleAssignment.getBusinessAdministrators().size()); assertEquals(0, peopleAssignment.getExcludedOwners().size()); assertEquals(0, peopleAssignment.getRecipients().size()); assertEquals(0, peopleAssignment.getTaskStakeholders().size());
assertEquals("(POTOWNER in " + userId + ")", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertTrue(builded instanceof LogicalExprFilter); assertEquals("(" + COLUMN_PROCESSNAME + " like %processName%, true OR " + COLUMN_PROCESSID + " like %processName%, true)", builded.toString());
assertTrue("Parsed date as duration is bigger than " + MINUTE_IN_MILLISECONDS, parsedMilliseconds <= MINUTE_IN_MILLISECONDS); assertTrue("Parsed date as duration is too low! Expected value is between " + MINUTE_IN_MILLISECONDS + " and " + FIFTY_NINE_SECONDS_IN_MILLISECONDS + " but is " + parsedMilliseconds, parsedMilliseconds > FIFTY_NINE_SECONDS_IN_MILLISECONDS);
assertEquals(1, process.size()); assertEquals("my first case", process.get(0).getExtraData().get("name")); assertNotNull(caseId); assertEquals(HR_CASE_ID, caseId);
assertEquals(expected, rendered); assertEquals(expectedAdvanced, rendered);
assertFalse(exists);
assertThat(found).hasSize(1); assertThat(found).contains("owner");
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertTrue(report.isSuccessful());
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertTrue(report.isSuccessful());
assertEquals("ID = userId", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertTrue(report.isSuccessful());
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertThat(searchResult).isNotNull(); assertThat(searchResult.getAttributes().get("uid").get()).isEqualTo("john");
assertEquals(1, errors.size()); assertEquals("Node \'nodeName\' [" + Long.MAX_VALUE + "] any message", errors.get(0).getMessage());
assertNotNull(errors); assertEquals(1, errors.length); assertEquals("Node \'CompositeNode\' [3] Composite has no start node defined.", errors[0].getMessage());
assertNotNull(foundProcessId); assertEquals("5", foundProcessId); assertNotNull(foundProcessId); assertEquals("10", foundProcessId);
assertTrue(metaData.isEmpty());
assertEquals(task, commandTask);
assertFalse(exists);
assertTrue(organizationalEntity1 instanceof User); assertEquals(actorId, organizationalEntity1.getId()); assertNull(taskData.getCreatedBy()); assertEquals(2, peopleAssignments.getPotentialOwners().size()); assertEquals(actorId, organizationalEntity1.getId()); assertNull(taskData.getCreatedBy()); assertEquals("drbug", organizationalEntity2.getId()); assertEquals(0, peopleAssignments.getPotentialOwners().size());
assertEquals("application/xml;charset=UTF-8", handler.getContentTypeAndCharset(params) ); assertEquals("application/xml;charset=UTF-8", handler.getContentTypeAndCharset(params) ); assertEquals("application/xml;charset=UTF-8", handler.getContentTypeAndCharset(params) ); assertNull(handler.getContentTypeAndCharset(params));
assertNotNull(errors); assertEquals(0, errors.length);
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertNotNull(errors); assertEquals(1, errors.length); assertEquals("Node \'CallActivityNode\' [3] Reusable Subprocess has no called element specified.", errors[0].getMessage());
assertThat(collected).hasSize(2); assertThat(collected).allMatch(item -> item instanceof User); assertThat(commentContent.toString()).isEqualTo("simple comment for john and mary");
assertThat(attributeResult).isNotNull().isEqualTo("john");
assertNotNull(managerV1); assertNotNull(managerV2); assertNotNull(ksession); assertNotNull(pi1); assertEquals(ProcessInstance.STATE_ACTIVE, pi1.getState()); assertNotNull(report); assertTrue(report.isSuccessful());
assertNotNull(repoResults); assertFalse(repoResults.isEmpty()); assertEquals(repoResults.size(), 2);
assertNotNull(repoResults); assertTrue(repoResults.isEmpty());
assertNotNull(foundProcessId); assertEquals("2", foundProcessId);
assertNotNull(repoResults); assertFalse(repoResults.isEmpty()); assertEquals(repoResults.size(), 1); assertNotNull(repoResults.get("TestServiceOne")); assertNotNull(repoResults.get("TestServiceOne").getPath()); assertTrue(repoResults.get("TestServiceOne").getPath().endsWith("/repository/TestServiceOne")); assertNotNull(repoResults.get("TestServiceOne").getFile()); assertTrue(repoResults.get("TestServiceOne").getFile().equals("TestServiceOne.wid"));
assertEquals( 1, wiser.getMessages().size() ); assertEquals( expectedBody, content ); assertEquals( "Test notification", msg.getSubject() ); assertEquals( "admin@jbpm.org", ((InternetAddress)msg.getFrom()[0]).getAddress() ); assertEquals( "john@domain.com", ((InternetAddress)msg.getRecipients( RecipientType.TO )[0]).getAddress() ); assertNull( msg.getRecipients( RecipientType.CC ) ); assertNull( msg.getRecipients( RecipientType.BCC ) );
assertEquals(1, peopleAssignments.getRecipients().size()); assertTrue(organizationalEntity1 instanceof User); assertEquals(recipientId, organizationalEntity1.getId());
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertNull(foundProcessId);
assertNotNull(groups); assertEquals(0, groups.size());
assertNotNull(result); assertTrue(result instanceof Integer); assertEquals(10, ((Integer) result).intValue());
assertEquals("((ENTITY_ID is_null OR ENTITY_ID != " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER = OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertEquals( 2, wiser.getMessages().size() ); assertEquals( "Test body", content ); assertEquals( "Test notification", msg.getSubject() ); assertEquals( "admin@jbpm.org", ((InternetAddress)msg.getFrom()[0]).getAddress() ); assertEquals( "john@domain.com", ((InternetAddress)msg.getRecipients( RecipientType.TO )[0]).getAddress() ); assertNull( msg.getRecipients( RecipientType.CC ) ); assertNull( msg.getRecipients( RecipientType.BCC ) );
assertTrue(organizationalEntities.isEmpty()); assertTrue(organizationalEntities.size() == 1); assertTrue(organizationalEntities.contains(createUser("bpmsAdmin"))); assertTrue(organizationalEntities.isEmpty()); assertTrue(organizationalEntities.size() == 1); assertTrue(organizationalEntities.contains(createUser("bpmsAdmin")));
assertNotNull(repoResults); assertFalse(repoResults.isEmpty()); assertEquals(repoResults.size(), 9);
assertEquals(1, process.size()); assertEquals("my first case", process.get(0).getExtraData().get("name")); assertNotNull(caseId); assertEquals(HR_CASE_ID, caseId);
assertTrue(builded instanceof LogicalExprFilter); assertEquals("(USER_IDENTITY = 1234 AND (PROCESSNAME like %processName% OR PROCESSID like %processName%))", builded.toString());
assertEquals("ID = userId", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());
assertThat(jdbcEventListener.getEventListeners()).hasSize(2); assertThat(jdbcEventListener.getEventListeners()).contains(listener1, listener2);
assertThat(jdbcEventListener.getEventListeners()).hasSize(1); assertThat(jdbcEventListener.getEventListeners()).contains(listener1);
assertEquals(THING_URI, iri);
assertEquals(1, resource.getWorkspaces(model.getCurrentPrincipal(), model.create()) .size());
assertNotNull(snapshot); assertNull(model.records() .resolve(frank.getRuleform() .getId())); assertNotNull(model.records() .resolve(frank.getRuleform() .getId()));
assertEquals(THING_URI, iri);
assertNotNull(resource.queryMeta(model.getCurrentPrincipal(), WellKnownObject.KERNEL_IRI, new QueryRequest(getIntrospectionQuery()).asMap(), model.create()));
assertEquals(2, retrieved.getInserts() .size()); assertEquals(2, deserialized.getInserts() .size()); assertTrue(deserialized.getInserts() .stream() .anyMatch(r -> pseudoScientist.equals(r)));
assertNotNull(serialized);
assertEquals("i: " + i, str2, str);
assertEquals("20131228", str); assertEquals("19700102", str1);
assertNotNull(baseDir); assertEquals(0, cache.findNextDataCount(cycle, threadId)); assertEquals(5, cache2.findNextDataCount(cycle, threadId)); assertFalse(new File(baseDir).exists());
assertNotNull(baseDir); assertEquals(-1, index0); assertTrue(index1 > index0); assertTrue(index2 > index1); assertTrue(index3 > index2); assertTrue(index4 > index3); assertFalse(new File(baseDir).exists());
assertTrue(obj instanceof BeanArgConstructorClass);
assertEquals(13, localTime.getHourOfDay()); assertEquals(30, localTime.getMinuteOfHour()); assertEquals(1985, localDate.getYear()); assertEquals(9, localDate.getMonthOfYear()); assertEquals(3, localDate.getDayOfMonth()); assertEquals(13, localDateTime.getHourOfDay()); assertEquals(30, localDateTime.getMinuteOfHour()); assertEquals(1985, localDateTime.getYear()); assertEquals(9, localDateTime.getMonthOfYear()); assertEquals(3, localDateTime.getDayOfMonth());
assertTrue(converter.canHandle("CONVERTER", TypeToken.of(TestEnum.class)));
assertTrue(converter.getTargetTypeToken().equals(TypeToken.of(String.class)));
assertTrue(converter.canHandle("2017-09-03", TypeToken.of(LocalTime.class))); assertTrue(converter.canHandle("2017-09-03", TypeToken.of(LocalDate.class))); assertTrue(converter.canHandle("2017-09-03", TypeToken.of(LocalDateTime.class))); assertFalse(converter.canHandle("2017-09-03", TypeToken.of(Duration.class))); assertFalse(converter.canHandle(new Date(), TypeToken.of(LocalDate.class)));
assertEquals(9, author.getId());
assertNotNull(author); assertNotNull(author.getName());
assertEquals(1l, scriptRunner.run(ScriptFragment.of("sequence.number"))); assertEquals(2l, scriptRunner.run(ScriptFragment.of("sequence.number"))); assertEquals(3l, scriptRunner.run(ScriptFragment.of("sequence.number"))); assertEquals(4l, scriptRunner.run(ScriptFragment.of("sequence.number"))); assertEquals(5l, scriptRunner.run(ScriptFragment.of("sequence.number")));
assertEquals("path", file.getName());
assertTrue(beanmother.isRoot()); assertEquals(beanmother.getFixtureName(), "beanmother"); assertTrue(beanmother.get("id") instanceof FixtureValue); assertEquals(beanmother.get("id"), new FixtureValue(1)); assertEquals(beanmother.get("title"), new FixtureValue("beanmother"));
assertEquals(1, result.simple.get()); assertEquals("testString", result.optionalString.get()); assertEquals("testName", result.optionalBean.get().name.get());
assertTrue(obj instanceof MultipleArgConstructorClass);
assertEquals(testScriptRunner, actual); assertNull(scriptHandler.get(ScriptFragment.of("nothing")));
assertTrue(fixtureStore.getFixtureLocations().isEmpty()); assertTrue(fixtureStore.getFixtureFiles().isEmpty()); assertTrue(fixtureStore.getFixtureMaps().isEmpty());
assertEquals(2017, cal.get(Calendar.YEAR)); assertEquals(0, cal.get(Calendar.MONTH)); assertEquals(2, cal.get(Calendar.DAY_OF_MONTH));
assertEquals(date.getTime(), cal.getTime().getTime()); assertEquals(date.getTime(), cal.getTime().getTime());
assertTrue(converter.convert("yes")); assertTrue(converter.convert("t")); assertTrue(converter.convert("true")); assertFalse(converter.convert("false")); assertFalse(converter.convert("f")); assertFalse(converter.convert("no"));
assertEquals(1, converter.convert("1", TypeToken.of(Integer.class))); assertEquals(1.1d, converter.convert("1.1", TypeToken.of(Double.class)));
assertEquals(PostProcessor.DEFAULT_PRIORITY, postProcessor.getPriority()); assertEquals(3, postProcessor.getPriority());
assertTrue(obj instanceof SingleArgsConstuctorClass);
assertTrue(registered.contains(FakerScriptRunner.class)); assertTrue(registered.contains(SequenceScriptRunner.class));
assertTrue(converter.getSourceTypeToken().equals(TypeToken.of(Integer.class)));
assertEquals(ClassUtils.getDefaultClassLoader(), classLoader);
assertTrue(converter.canHandle("5", TypeToken.of(Hours.class))); assertTrue(converter.canHandle(100, TypeToken.of(Days.class))); assertTrue(converter.canHandle(100, TypeToken.of(Years.class))); assertFalse(converter.canHandle("2017-09-03", TypeToken.of(Months.class)));
assertEquals(2017, getCalFiled(date, Calendar.YEAR)); assertEquals(Calendar.JANUARY, getCalFiled(date, Calendar.MONTH)); assertEquals(2, getCalFiled(date, Calendar.DAY_OF_MONTH)); assertEquals(2017, getCalFiled(date, Calendar.YEAR)); assertEquals(Calendar.JANUARY, getCalFiled(date, Calendar.MONTH)); assertEquals(2, getCalFiled(date, Calendar.DAY_OF_MONTH));
assertEquals(date, value.getValue()); assertEquals("test", value.getFixtureName()); assertEquals(parent, value.getParent()); assertEquals("string", value2.getValue()); assertEquals("test", value2.getFixtureName()); assertEquals(parent, value2.getParent());
assertTrue(converter.canHandle(1, TypeToken.of(String.class))); assertFalse(converter.canHandle(1l, TypeToken.of(String.class))); assertFalse(converter.canHandle(1, TypeToken.of(Long.class)));
assertEquals("test", fixtureMap.getFixtureName()); assertNull(fixtureMap.getParent()); assertTrue(fixtureMap.get("value1") instanceof FixtureValue); assertTrue(fixtureMap.get("value2") instanceof FixtureValue); assertEquals(value1, fixtureValue1.getValue()); assertEquals(value2, fixtureValue2.getValue()); assertEquals("value1", fixtureValue1.getFixtureName()); assertEquals("value2", fixtureValue2.getFixtureName());
assertEquals(1, result.simple.get()); assertEquals("testString", result.optionalString.get()); assertEquals("testName", result.optionalBean.get().name.get());
assertEquals("1", converter.convert(1l, TypeToken.of(String.class))); assertEquals("test", converter.convert("test", TypeToken.of(String.class))); assertEquals("true", converter.convert(true, TypeToken.of(String.class)));
assertTrue(converter.canHandle(new Date(), TypeToken.of(String.class))); assertTrue(converter.canHandle("test", TypeToken.of(String.class))); assertFalse(converter.canHandle(new Date(), TypeToken.of(Date.class)));
assertTrue(converter.canHandle(new Date(), TypeToken.of(LocalTime.class))); assertTrue(converter.canHandle(new Date(), TypeToken.of(LocalDate.class))); assertTrue(converter.canHandle(new Date(), TypeToken.of(LocalDateTime.class))); assertFalse(converter.canHandle(new Date(), TypeToken.of(Duration.class))); assertFalse(converter.canHandle("2017-09-03", TypeToken.of(LocalDate.class)));
assertTrue(obj instanceof NoArgConstructorClass);
assertEquals("{edge1=2, edge2=3, list=[4, 5, {edge5=6, edge6=7}]}", sampleFixture.toString());
assertEquals(typeTokens.size(), 2); assertEquals(typeTokens.get(0), TypeToken.of(String.class)); assertEquals(typeTokens.get(1), TypeToken.of(Integer.class));
assertTrue(fixtureStore.getFixtureLocations().contains(new Location(fixturePath))); assertTrue(fileNames.contains("cat.yml")); assertTrue(fileNames.contains("dog.yml"));
assertEquals(1, scriptHandler.runScript(ScriptFragment.of("fortest")));
assertEquals(5, seconds.getSeconds()); assertEquals(5, minutes.getMinutes()); assertEquals(5, hours.getHours()); assertEquals(5, days.getDays()); assertEquals(5, weeks.getWeeks()); assertEquals(5, months.getMonths()); assertEquals(5, years.getYears());
assertTrue(scriptRunner.canHandle(ScriptFragment.of("sequence.number"))); assertFalse(scriptRunner.canHandle(ScriptFragment.of("faker.number")));
assertEquals("test", fixtureList.getFixtureName()); assertEquals(parent, fixtureList.getParent()); assertTrue(fixtureList.get(0) instanceof FixtureValue); assertTrue(fixtureList.get(1) instanceof FixtureValue); assertEquals(value1, fixtureValue1.getValue()); assertEquals(value2, fixtureValue2.getValue()); assertEquals("test", fixtureValue1.getFixtureName()); assertEquals("test", fixtureValue2.getFixtureName());
assertTrue(allKeys.isEmpty());
assertEquals(typeTokens.size(), 1); assertEquals(typeTokens.get(0), TypeToken.of(String.class));
assertEquals(12, localTime.getHourOfDay()); assertEquals(30, localTime.getMinuteOfHour()); assertEquals(2017, localDate.getYear()); assertEquals(6, localDate.getMonthOfYear()); assertEquals(27, localDate.getDayOfMonth()); assertEquals(12, localDateTime.getHourOfDay()); assertEquals(30, localDateTime.getMinuteOfHour()); assertEquals(2017, localDateTime.getYear()); assertEquals(6, localDateTime.getMonthOfYear()); assertEquals(27, localDateTime.getDayOfMonth());
assertEquals(1, TestUiObject.count);
assertEquals(1, TestUiObject.count);
assertFalse( s3Path.isDirectory());
assertThat("key/subkey",equalTo(p.getKey()));
assertEquals(expectedOutput, output);
assertEquals(0, result.size());
assertEquals("Should have found " + maxRecordsPerPoll + " records", maxRecordsPerPoll, records.count()); assertEquals("Should have found " + maxRecordsPerPoll + " records", maxRecordsPerPoll, records.count());
assertNotNull(webKafkaConsumer); assertEquals( "Should have a total of 20 records", 20, results.size()); assertTrue("Should be from partition 0 or 1", kafkaResult.getPartition() == 0 || kafkaResult.getPartition() == 1);
assertNotNull("non-null response", brokerConfig); assertFalse("Should not be empty", brokerConfig.getConfigEntries().isEmpty()); assertNotNull(configItem.getName());
assertNull("Should have null result", secretManager.decrypt(null));
assertTrue("Gracefully returns true", result); assertTrue("Temp dir still exists", tempDirectory.toFile().exists());
assertTrue("Gracefully returns true", result);
assertFalse("Should not contain our sensitive field", result.contains(expectedSecret1)); assertFalse("Should not contain our sensitive field", result.contains(expectedSecret2));
assertEquals(topic3, results.get(0)); assertEquals(topic2, results.get(1)); assertEquals(topic1, results.get(2));
assertEquals(1, result.size()); assertEquals("0-6", result.get(0));
assertTrue("Should be equal", id1.equals(id1)); assertTrue("Should be equal", id1.equals(id2)); assertFalse("Should NOT be equal", id1.equals(null)); assertFalse("Should NOT be equal", id1.equals(id3)); assertFalse("Should NOT be equal", id1.equals(id4)); assertFalse("Should NOT be equal", id3.equals(id4)); assertFalse("Should NOT be equal", id4.equals(id5));
assertNotNull("Result should be non-null", userDetails); assertTrue("Should be a CustomUserDetails instance", userDetails instanceof CustomUserDetails); assertEquals("Should have correct email", userEmail, userDetails.getUsername()); assertEquals("Should have correct id", user.getId(), ((CustomUserDetails) userDetails).getUserId()); assertNotNull("Should have a user model", ((CustomUserDetails) userDetails).getUserModel());
assertEquals("Has expected result filename", expectedUploadedPath, result); assertEquals("Contents are expected", mockContent, contentString);
assertNotNull(startingPosition); assertFalse(startingPosition.isStartFromTail()); assertFalse(startingPosition.isStartFromOffsets()); assertTrue(startingPosition.isStartFromTimestamp()); assertFalse(startingPosition.isStartFromHead()); assertEquals("Has expected timestamp", timestamp, startingPosition.getTimestamp());
assertEquals("Should have empty string result", "", secretManager.decrypt(""));
assertEquals("Should have found " + maxRecordsPerPoll + " records", maxRecordsPerPoll, records.count()); assertEquals("Should be from parittion 1 only", 1, record.partition()); assertTrue("Should be empty", records.isEmpty());
assertNotNull("Should have a non-null result", nodeList); assertFalse("Should have non-empty node", nodeList.getNodes().isEmpty());
assertTrue("Empty list", filterDefinitions.isEmpty());
assertTrue("Gracefully returns true", result); assertTrue("Temp dir still exists", tempDirectory.toFile().exists());
assertEquals(3, result.size()); assertEquals("0-1", result.get(0)); assertEquals("3-4", result.get(1)); assertEquals("6-7", result.get(2));
assertEquals(3, result.size()); assertEquals("0", result.get(0)); assertEquals("3", result.get(1)); assertEquals("6", result.get(2));
assertTrue("Should contain our topic now", topicsList.getTopicNames().contains(newTopic)); assertTrue("Should have returned true", result); assertFalse("Should not contain our topic anymore", topicsList.getTopicNames().contains(newTopic));
assertEquals("Has expected result filename", expectedUploadedPath, result); assertEquals("Contents are expected", mockContent, contentString);
assertNotNull("non-null response", topicConfig); assertFalse("Should not be empty", topicConfig.getConfigEntries().isEmpty()); assertNotNull(configItem.getName());
assertNotNull("Result should be non-null", userDetails); assertTrue("Should be a CustomUserDetails instance", userDetails instanceof CustomUserDetails); assertEquals("Should have correct email", userEmail, userDetails.getUsername()); assertEquals("Should have correct id", user.getId(), ((CustomUserDetails) userDetails).getUserId()); assertNotNull("Should have a user model", ((CustomUserDetails) userDetails).getUserModel());
assertNotNull("Should not be null", filterPlugin); assertTrue("Should have our parent class loader", filter.getClass().getClassLoader() instanceof PluginClassLoader); assertTrue("Should have read only permissions", permissionCollection.isReadOnly());
assertNotNull(results); assertTrue(results.containsKey(topicName), "Should have our topic.");
assertEquals(1, result.size()); assertEquals("0", result.get(0));
assertNotNull(startingPosition); assertFalse(startingPosition.isStartFromTail()); assertFalse(startingPosition.isStartFromOffsets()); assertFalse(startingPosition.isStartFromTimestamp()); assertTrue(startingPosition.isStartFromHead());
assertNotNull(pluginFilterClass); assertEquals("Has expected name", classPath, pluginFilterClass.getName());
assertNotNull(consumerGroupDetails); assertEquals(finalConsumerGroupId, consumerGroupDetails.getGroupId()); assertFalse(consumerGroupDetails.isSimple()); assertEquals("range", consumerGroupDetails.getPartitionAssignor()); assertEquals("Stable", consumerGroupDetails.getState()); assertEquals(1, consumerGroupDetails.getMembers().size()); assertNotNull(memberDetails); assertEquals("/127.0.0.1", memberDetails.getHost()); assertEquals(finalConsumerId, memberDetails.getClientId()); assertTrue(memberDetails.getMemberId().startsWith(finalConsumerId));
assertNotNull(webKafkaConsumer); assertEquals("Should have 10 records", 10, results.size()); assertEquals("Should be from partition 1", 1, kafkaResult.getPartition());
assertTrue("Should have at least 2 consumers listed", consumerIds.size() >= 2); assertTrue("Found consumer group 1", foundGroup1); assertTrue("Found consumer group 2", foundGroup2);
assertEquals("Has expected result filename", expectedUploadedPath, result); assertEquals("Contents are expected", mockContent, contentString); assertEquals("Should be true", true, deleteResult); assertFalse("File no longer exists", Files.exists(filePath));
assertFalse("Should not contain our sensitive field", result.contains(expectedSecret));
assertEquals("should have partitions 2 and 3", "2,3", view.getPartitions()); assertEquals("should have partitions 2 and 3", 2, view.getPartitionsAsSet().size()); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(2)); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(3));
assertEquals("Should have 100 results per partition", 100, (int) view.getResultsPerPartition()); assertEquals("should have partitions 2 and 3", "2,3", view.getPartitions()); assertEquals("should have partitions 2 and 3", 2, view.getPartitionsAsSet().size()); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(2)); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(3));
assertEquals("should have partitions 2 and 3", "2,3", view.getPartitions()); assertEquals("should have partitions 2 and 3", 2, view.getPartitionsAsSet().size()); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(2)); assertTrue("should have partitions 2 and 3", view.getPartitionsAsSet().contains(3));
assertEquals("Should have found " + maxRecordsPerPoll + " records", maxRecordsPerPoll, records.count()); assertEquals("Should be from parittion 1 only", 1, record.partition()); assertTrue("Should be empty", records.isEmpty());
assertNotNull(startingPosition); assertTrue(startingPosition.isStartFromTail()); assertFalse(startingPosition.isStartFromOffsets()); assertFalse(startingPosition.isStartFromTimestamp()); assertFalse(startingPosition.isStartFromHead());
assertNotNull("Should have a non-null result", results); assertNotNull("Should have non-null node result", nodes); assertFalse("Should have non-empty node", nodes.isEmpty());
assertFalse("Should not contain our topic yet", topicsList.getTopicNames().contains(newTopic)); assertTrue("Should have true return result", result); assertTrue("Should contain our topic now", topicsList.getTopicNames().contains(newTopic));
assertEquals(3, result.size()); assertEquals("0-1", result.get(0)); assertEquals("3-4", result.get(1)); assertEquals("6", result.get(2));
assertTrue("Sanity test", Files.exists(expectedJarPath)); assertNotNull("Should NOT have removed message format", messageFormat); assertTrue("Jar should not have been removed", Files.exists(expectedJarPath));
assertTrue("Sanity test", Files.exists(expectedJarPath)); assertFalse("Should NOT have message format", messageFormatRepository.existsById(formatId)); assertFalse("Should have been removed", Files.exists(expectedJarPath));
assertFalse("Should not contain our sensitive field", result.contains(expectedSecret1)); assertFalse("Should not contain our sensitive field", result.contains(expectedSecret2));
assertTrue("Should be able to serialize", objectMapper.canSerialize(ConsumerGroupOffsets.class)); assertEquals("Should have expected serialized value", expectedResult, result);
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getStepContribution(), stepContribution);
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus());
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getStepContribution(), stepContribution); assertEquals(tasklet.getChunkContext(), chunkContext);
assertTrue(jobParameter.equals(testParameter));
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getChunkContext(), chunkContext);
assertEquals(testParameter.hashCode(), jobParameter.hashCode());
assertEquals(RepeatStatus.FINISHED, repeatStatus);
assertEquals(new ExitStatus("DONE"), stepContribution.getExitStatus());
assertTrue(jobParameter.equals(testParameter));
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getStepContribution(), stepContribution); assertEquals(tasklet.getChunkContext(), chunkContext);
assertEquals("0", jobParameter.toString());
assertEquals(RepeatStatus.FINISHED, repeatStatus);
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getStepContribution(), stepContribution);
assertFalse(jobParameter.equals(testParameter));
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getChunkContext(), chunkContext);
assertEquals(testParameter.hashCode(), jobParameter.hashCode());
assertEquals(RepeatStatus.FINISHED, repeatStatus); assertEquals(tasklet.getStepContribution(), stepContribution); assertEquals(tasklet.getChunkContext(), chunkContext);
assertEquals(RepeatStatus.FINISHED, repeatStatus);
assertNotNull(FstSerializer.create());
assertEquals(data, sameAsData); assertEquals(o1, sameAsO1);
assertNotNull(encoder);
assertEquals(stringData, deserialized);
assertEquals((byte) 1, serialize[1]);
assertNotNull(unBoxedInt); assertEquals(intData, (int) unBoxedInt);
assertNotNull(factory);
assertEquals(stringData, guardedString.get());
assertThat(new SparseBooleanArrayBuilder().put(5, true).clear().build().size()).isEqualTo(0);
assertThat(new SparseIntArrayBuilder().put(5, 3).clear().build().size()).isEqualTo(0);
assertThat(new SparseArrayBuilder<Integer>().put(5, 3).clear().build().size()).isEqualTo(0);
assertEquals(defaultValue, i); assertEquals(defaultValue, i + 1); assertEquals(defaultValue, i);
assertFalse(DynamoDBManager.doesTableExist(dynamoDB, tableName));
assertEquals(description, DynamoDBManager.createTable(dynamoDB, request));
assertEquals(null, resultETag);
assertTrue(true);
assertEquals(defaultValue, b); assertEquals(defaultValue, !b); assertEquals(defaultValue, b);
assertFalse(DynamoDBManager.doesTableExist(dynamoDB, tableName));
assertEquals(defaultValue, l); assertEquals(defaultValue, l - 1); assertEquals(defaultValue, l);
assertTrue(DynamoDBManager.doesTableExist(dynamoDB, tableName));
assertEquals(json, result);
assertEquals(description, DynamoDBManager.createTable(dynamoDB, request));
assertEquals(EXPECTED_MAP, actual);
assertEquals(eTag, resultETag);
assertEquals(status, DynamoDBManager.getTableStatus(dynamoDB, tableName));
assertEquals(EXPECTED_MAP, missionMap);
assertTrue("resolver does not support MessageContext", resolver.supportsParameter(supported));
assertTrue("result must be a List", List.class.isAssignableFrom(result.getClass())); assertTrue("result List must be empty", ((List<?>) result).isEmpty());
assertFalse("processor supports parameter with no unmarshaller set", processor.supportsParameter(supportedParameter));
assertEquals(((SoapMessage) messageContext.getRequest()).getEnvelope(), result);
assertTrue("Interceptor should apply", result);
assertEquals("Invalid timeToLive", 100, timeToLive); assertEquals("Invalid timeToLive", Message.DEFAULT_TIME_TO_LIVE, timeToLive);
assertSame("Invalid message context returned", messageContext, result);
assertFalse("processor supports return type with no marshaller set", processor.supportsReturnType(supportedReturnType));
assertEquals("Invalid destination", "RequestQueue", destinationName); assertEquals("Invalid destination", "RequestQueue", destinationName);
assertEquals(messageContext.getRequest(), result);
assertTrue("result must be a List", List.class.isAssignableFrom(result.getClass())); assertTrue("size", elements.size() > 1); assertTrue("headers must be equal", element.getName().equals(HEADER_QNAME)); assertEquals("header must be equal to [" + HEADER_CONTENT + i + "]", HEADER_CONTENT + i, elements.get(i).getText());
assertNotNull(endpointAdapter); assertTrue(endpointAdapter instanceof MyDefaultMethodEndpointAdapter);
assertTrue("resolver does not support soapHeaderElement", resolver.supportsParameter(soapHeaderElementParameter)); assertTrue("resolver does not support List<soapHeaderElement>", resolver.supportsParameter(soapHeaderElementListParameter));
assertEquals(0, endpointMapping.getOrder()); assertEquals(1, interceptors.length); assertTrue(interceptors[0] instanceof MyInterceptor);
assertEquals(new QName("myNamespace", "myRoot"), name);
assertEquals("method1", namespaceContext.getNamespaceURI("prefix1")); assertEquals("method2", namespaceContext.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX));
assertNull(result);
assertTrue("resolver does not return String", result instanceof String); assertEquals("Invalid string value", "text", s);
assertTrue("resolver does not return Node", result instanceof Node); assertEquals("Invalid node value", "child", node.getLocalName());
assertEquals("Invalid priority", 5, priority); assertEquals("Invalid priority", Message.DEFAULT_PRIORITY, priority);
assertEquals("Invalid last modified", lastModified, adapter.getLastModified(null, schema));
assertEquals("METHOD_NOT_ALLOWED expected", HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatus());
assertFalse("adapter does not support method", result);
assertEquals(((SoapMessage) messageContext.getRequest()).getSoapBody(), result);
assertEquals("Invalid replyToName", "RESP_QUEUE", replyToName);
assertTrue("result must be a SoapHeaderElement", SoapHeaderElement.class.isAssignableFrom(result.getClass())); assertTrue("headers must be equal", element.getName().equals(HEADER_QNAME)); assertEquals("header text must be equal to [" + HEADER_CONTENT + "0]", HEADER_CONTENT + "0", element.getText());
assertTrue("Interceptor should apply", result);
assertTrue("resolver does not return double", result instanceof Double); assertEquals("Invalid double value", 42D, d, 0D);
assertTrue("resolver does not return String", result instanceof String); assertEquals("Invalid string value", "text", s);
assertEquals(((SoapMessage) messageContext.getRequest()).getSoapHeader(), result);
assertTrue("resolver does not support SoapMessage", resolver.supportsParameter(soapMessageParameter)); assertTrue("resolver does not support SoapEnvelope", resolver.supportsParameter(soapEnvelopeParameter)); assertTrue("resolver does not support SoapBody", resolver.supportsParameter(soapBodyParameter)); assertTrue("resolver does not support SoapHeader", resolver.supportsParameter(soapHeaderParameter));
assertTrue("resolver does not return String", result instanceof Integer); assertEquals("Invalid integer value", new Integer(42), i);
assertTrue("resolver does not return String", result instanceof String); assertEquals("Invalid string value", "text", s);
assertEquals("Invalid deliveryMode", DeliveryMode.NON_PERSISTENT, deliveryMode); assertEquals("Invalid deliveryMode", DeliveryMode.PERSISTENT, deliveryMode); assertEquals("Invalid deliveryMode", Message.DEFAULT_DELIVERY_MODE, deliveryMode);
assertEquals("class1", namespaceContext.getNamespaceURI("prefix1")); assertEquals("class2", namespaceContext.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX));
assertEquals("Invalid messageType", JmsTransportConstants.BYTES_MESSAGE_TYPE, messageType); assertEquals("Invalid messageType", JmsTransportConstants.TEXT_MESSAGE_TYPE, messageType); assertEquals("Invalid messageType", JmsTransportConstants.BYTES_MESSAGE_TYPE, messageType);
assertTrue("adapter does not support method", result);
assertTrue("resolver does not return boolean", result instanceof Boolean); assertTrue("Invalid boolean value", b);
assertTrue("resolver does not support XMLStreamReader", resolver.supportsParameter(streamParameter)); assertTrue("resolver does not support XMLEventReader", resolver.supportsParameter(eventParameter)); assertFalse("resolver supports invalid parameter", resolver.supportsParameter(invalidParameter));
assertFalse("No default MethodArgumentResolvers loaded", adapter.getMethodArgumentResolvers().isEmpty()); assertFalse("No default MethodReturnValueHandlers loaded", adapter.getMethodReturnValueHandlers().isEmpty());
assertTrue("resolver does not return NodeList", result instanceof NodeList); assertEquals("Invalid NodeList value", 1, nodeList.getLength()); assertEquals("Invalid Node value", "child", nodeList.item(0).getLocalName());
assertTrue("Interceptor should apply", result);
assertEquals(500, httpServletResponse.getStatus()); assertEquals(500, httpServletResponse.getStatus()); assertEquals(400, httpServletResponse.getStatus()); assertEquals(500, httpServletResponse.getStatus());
assertEquals("Invalid return argument", expected, result);
assertEquals( input.getStrokeColor(), output.getStrokeColor() ); assertEquals( input.getFillColor(), output.getFillColor() ); assertEquals( input.getStrokeWidth(), output.getStrokeWidth(), 0 ); assertEquals( 1, output.getPoints().size() );
assertEquals(expected, output);
assertEquals( input.getAlpha(), output.getAlpha(), 0 ); assertEquals( input.getAnchorU(), output.getAnchorU(), 0 ); assertEquals( input.getAnchorV(), output.getAnchorV(), 0 ); assertEquals( bitmapDescriptor, output.getIcon() ); assertEquals( input.isVisible(), output.isVisible() );
assertEquals(expected, output);
assertEquals( input.getFillColor(), output.getFillColor() ); assertEquals( input.getRadius(), output.getRadius(), 0 ); assertEquals( input.getStrokeColor(), output.getStrokeColor() ); assertEquals( input.getStrokeWidth(), output.getStrokeWidth(), 0 );
assertEquals( input.getColor(), output.getColor() ); assertEquals( input.getWidth(), output.getWidth(), 0 ); assertEquals( 1, output.getPoints().size() );
assertTrue(createFence().contains(new LatLng(0, 0))); assertTrue(createFence().contains(new LatLng(0.999, 0.999))); assertTrue(createFence().contains(new LatLng(-0.999, 0.999))); assertTrue(createFence().contains(new LatLng(-0.999, -0.999))); assertTrue(createFence().contains(new LatLng(0.999, -0.999)));
assertEquals(expected, output);
assertFalse(createFence().contains(new LatLng(1.001, 0))); assertFalse(createFence().contains(new LatLng(-1.001, 0))); assertFalse(createFence().contains(new LatLng(0, 1.001))); assertFalse(createFence().contains(new LatLng(0, -1.001)));
assertEquals(seasonal[i], seasonal[i + p * 12], epsilon);
assertEquals("[width = 23, degree = 1, jump = 3]", str);
assertEquals("average has length of data.length", data.length, average.length); assertEquals("average is just the original data", data[i], average[i], 1.0e-10);
assertEquals(data[i], seasonal[i], 1.0e-14); assertEquals(0.0, trend[i], 1.0e-14); assertEquals(0.0, residuals[i], 1.0e-14);
assertEquals(data[i], trend[i], 1.0e-12); assertEquals(0.0, seasonal[i], 1.0e-12); assertEquals(0.0, residuals[i], 1.0e-12); assertEquals(1.0, weights[i], 1.0e-13);
assertNotNull(y); assertEquals("Bad value extrapolating left", data[0], y, 3.0e-9); assertNotNull(y); assertEquals("Bad value extrapolating right", data[0], y, 3.0e-9);
assertEquals(seasonal[i], seasonal[i + p * 12], epsilon);
assertEquals(dt, trend[i] - trend[i-1], 1.0e-14); assertEquals(dt, 0.2 * dx, 1.0e-4);
assertNotNull(y); assertEquals("Bad value extrapolating left", -0.25 * -100, y, 1.0e-8); assertNotNull(y); assertEquals("Bad value extrapolating right", -0.25 * 1000, y, 1.0e-8);
assertNotNull(y); assertEquals(String.format("Bad value at %d", i), 3.7 - 0.25 * i + 0.7 * i * i, y, 1.0e-10);
assertNotNull(stl); assertNotNull(stl);
assertEquals(String.format("test point %d", i), value, extendedData[i], 1.0e-11);
assertNotNull(stl); assertNotNull(stl);
assertEquals(seasonal[i], seasonal[i + p * 12], epsilon);
assertEquals(String.format("seasonal[%d]", i), fRobustNoisySinusoidResults[i][1], trend[i], epsilon); assertEquals(String.format("trend[%d]", i), fRobustNoisySinusoidResults[i][2], seasonal[i], epsilon); assertEquals(String.format("residuals[%d]", i), fRobustNoisySinusoidResults[i][3], residuals[i], epsilon);
assertNotNull(y); assertEquals(String.format("Bad value at %d", i), data[i], y, 1.0e-8);
assertEquals("average has length of 1", 1, average.length); assertEquals("average[0] value is just the average", mean, average[0], 1.0e-10);
assertEquals(0.0, trend[i] - trend[i-1], 1.0e-13);
assertEquals(6, settings1.getJump()); assertEquals(6, settings2.getJump());
assertNotNull(stl); assertNotNull(stl);
assertEquals(ll0, ll, 1.0e-14); assertTrue("Max LL test", dp > 0.0); assertTrue("Max LL test", dm > 0.0);
assertEquals(String.format("test point %d", i), value, extendedData[i], 1.0e-11);
assertEquals(42.5, trend[i], 1.0e-12); assertEquals(data[i], seasonal[i] + stl.getTrend()[i], 1.0e-12); assertEquals(0.0, residuals[i], 1.0e-12); assertEquals(1.0, weights[i], 1.0e-13);
assertEquals( "SeasonalTrendLoess: [\\n" + "inner iterations = 2\\n" + "outer iterations = 0\\n" + "periodicity = 12\\n" + "seasonality settings = [width = 7, degree = 1, jump = 1]\\n" + "trend settings = [width = 23, degree = 1, jump = 3]\\n" + "lowpass settings = [width = 13, degree = 1, jump = 2]\\n]", stl.toString());
assertNotNull(y); assertEquals(String.format("Bad value at %d", i), data[i], y, 2.0e-11);
assertEquals(6, settings1.getJump()); assertEquals(6, settings2.getJump());
assertEquals(String.format("test point %d", i), value, extendedData[i], 1.0e-11);
assertEquals("average has right length", data.length - window + 1, average.length); assertEquals("moving average is correct", mean, average[i], 1.0e-10);
assertEquals((long)idGenerator.generate("test"), 0L); assertEquals((long)idGenerator.generate("test"), 1L); assertEquals((long)idGenerator.generate("test"), 2L); assertEquals((long)idGenerator.generate("test"), 3L);
assertThat(throwable).isInstanceOf(IllegalArgumentException.class);
assertEquals(coll.size(), 1); assertEquals(ids.length, 2); assertEquals(ids[0], 0); assertEquals(ids[1],1);
assertNotNull(result); assertTrue(result instanceof List); assertFalse(list.isEmpty()); assertEquals("args", list.get(0)); assertEquals(function.getId(), list.get(1)); assertTrue(list.get(2) == mockRegion); assertTrue(list.get(3) instanceof Set); assertNotNull(filter); assertEquals(1,filter.size()); assertEquals("filter",filter.iterator().next()); assertTrue(list.get(4) instanceof Exception);
assertThat(throwable).isInstanceOf(AuthenticationFailedException.class);
assertThat(throwable).isInstanceOf(IllegalArgumentException.class);
assertEquals(coll1.size(), 1); assertEquals(ids1.length, 2); assertEquals(ids1[0], 0); assertEquals(ids1[1], 1); assertEquals(coll2.size(), 1); assertEquals(ids2.length, 2); assertEquals(ids2[0], 2); assertEquals(ids2[1], 3);
assertEquals(coll.size(), 1); assertEquals(ids.length, 2); assertEquals(ids[0], 0); assertEquals(ids[1], 1);
assertThat(newBuildId).isEqualTo(buildIdOne);
assertEquals(40, age);
assertEquals("88Ff2a", r);
assertEquals(0, abi.getHi()); assertEquals(0, abi.getLo()); assertFalse(abi.compareAndSetHi(1, 42)); assertTrue(abi.compareAndSetHi(0, 42)); assertEquals(42, abi.getHi()); assertEquals(0, abi.getLo()); assertFalse(abi.compareAndSetLo(1, -42)); assertTrue(abi.compareAndSetLo(0, -42)); assertEquals(42, abi.getHi()); assertEquals(-42, abi.getLo());
assertTrue(e.hasMoreElements()); assertEquals(e.nextElement(), "value0A,value0B"); assertTrue(e.hasMoreElements()); assertEquals(e.nextElement(), "value0C,value0D"); assertFalse(e.hasMoreElements());
assertEquals(expected, url_encoded.getString("text"));
assertNull(ctx.add(field));
assertNotNull(list); assertSame(input, list);
assertEquals(source, jvmcheck); assertEquals(source, result);
assertNull(list);
assertEquals(OpCode.PING, actual.getOpCode()); assertTrue(actual.isFin()); assertFalse(actual.isRsv1()); assertFalse(actual.isRsv2()); assertFalse(actual.isRsv3()); assertEquals(expected.remaining(), actual.getPayloadLength());
assertFalse(cb.waitForComplete()); assertEquals(2, cb.processed);
assertEquals("[]", LazyList.toString(input));
assertEquals("", QuotedCSV.unquote("")); assertEquals("", QuotedCSV.unquote("\\"\\"")); assertEquals("foo", QuotedCSV.unquote("foo")); assertEquals("foo", QuotedCSV.unquote("\\"foo\\"")); assertEquals("foo", QuotedCSV.unquote("f\\"o\\"o")); assertEquals("\\"foo", QuotedCSV.unquote("\\"\\\\\\"foo\\"")); assertEquals("\\\\foo", QuotedCSV.unquote("\\\\foo"));
assertEquals("key", buf.toString());
assertNull(StringUtils.split(null, ".")); assertNull(StringUtils.split(null, ".", 3)); assertEquals(0, StringUtils.split("", ".").length); assertEquals(0, StringUtils.split("", ".", 3).length);
assertEquals(0, LazyList.size(null));
assertNull(LazyList.getList(null, true)); assertNotNull(LazyList.getList(null, false));
assertTrue(e.getMessage().contains("too large for configured max"));
assertNull(uri.getHost()); assertEquals("*", uri.getPath()); assertNull(uri.getHost()); assertEquals("/foo/bar", uri.getPath()); assertEquals("/bar", uri.getPath());
assertEquals(ret2, "hello {{{foo and bar mm"); assertEquals(ret2, "hello {{{foo and {} mm"); assertEquals(ret2, "hello {{{foo and bar mm"); assertEquals(ret2, "hello {{{12 and 23 mm");
assertEquals("123", BufferUtils.toString(to)); assertEquals("12345", BufferUtils.toString(to));
assertFalse(iter.hasNext());
assertEquals("abc", QuotedStringTokenizer.unquote("abc")); assertEquals("a\\"c", QuotedStringTokenizer.unquote("\\"a\\\\\\"c\\""));
assertEquals(10, NBitInteger.decode(buf, 5));
assertNull(uri.getHost()); assertEquals("*", uri.getPath()); assertNull(uri.getHost()); assertEquals("/foo/bar", uri.getPath());
assertNotNull(list); assertTrue(list instanceof List); assertEquals(0, LazyList.size(list));
assertEquals(2, header.size()); assertEquals("value:0", header.get("name0")); assertEquals("value1", header.get("name1")); assertNull(header.get("name2")); assertEquals(2, matches); assertTrue(e.hasMoreElements()); assertEquals(e.nextElement(), "value:0"); assertFalse(e.hasMoreElements());
assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);
assertNotNull(list); assertTrue(list instanceof List);
assertTrue(CollectionUtils.hasIntersection(a, b));
assertTrue(StringUtils.hasLength(str)); assertFalse(StringUtils.hasText(str)); assertFalse(StringUtils.hasText(str));
assertTrue(x.getMessage().contains("CONTINUATION frame without prior !FIN"));
assertEquals("bytes */100", InclusiveByteRange.to416HeaderRangeString(100), "416 Header on size 100"); assertEquals("bytes */123456789", InclusiveByteRange.to416HeaderRangeString(123456789), "416 Header on size 123456789");
assertEquals(16, key.length); assertEquals("mVL6JKtNRC4tluIaFAW2hhMffgE=", serverHash);
assertNotSame(bytes, buffer.array()); assertEquals(6, ByteBuffer.wrap(bytes).getInt()); assertEquals(3, ByteBuffer.wrap(bytes).getInt());
assertNotNull(list); assertTrue(list instanceof List);
assertTrue(x.getMessage().contains("Unexpected TEXT frame"));
assertEquals(0, maxTask.get());
assertNotNull(iter); assertTrue(iter.hasNext()); assertEquals("a", iter.next()); assertFalse(iter.hasNext());
assertEquals(1, LazyList.size(input));
assertNotNull(iter); assertTrue(iter.hasNext()); assertFalse(iter.hasPrevious()); assertEquals("a", iter.next()); assertFalse(iter.hasNext()); assertTrue(iter.hasPrevious());
assertEquals("www.smh.com.au", parser.getFieldCache().get("Host: www.smh.com.au").getValue()); assertSame(field, fields.get(0));
assertEquals(19, b.position()); assertEquals(0, b.remaining()); assertEquals(20, b1.remaining()); assertEquals(19, b1.position()); assertEquals(39, b1.capacity()); assertEquals(39, b1.limit()); assertEquals("Goodbye Cruel World", BufferUtils.toString(b1).trim());
assertEquals(fieldFoo2.hashCode(), fieldFoo1.hashCode());
assertTrue(cb.waitForComplete()); assertEquals(4, cb.processed);
assertEquals(val[i], BufferUtils.toInt(buf[i]), "t" + i);
assertEquals(fieldFoo2.hashCode(), fieldFoo1.hashCode());
assertNotNull(iter); assertFalse(iter.hasNext()); assertFalse(iter.hasPrevious());
assertNotNull(arr); assertTrue(arr.getClass().isArray());
assertEquals(1337, NBitInteger.decode(buf, 5));
assertEquals("abc\\ufffd", buffer.toString());
assertNull(ctx.add(field));
assertNull(ret); assertEquals(orig, ret);
assertEquals("abc", QuotedStringTokenizer.unquoteOnly("abc")); assertEquals("a\\"c", QuotedStringTokenizer.unquoteOnly("\\"a\\\\\\"c\\""));
assertEquals("/foo/bar", path); assertEquals("/foo/bar%23;,:=b a r=", path);
assertEquals("form-data", tok.nextToken().trim()); assertEquals("name=\\"fileup\\"", tok.nextToken().trim()); assertEquals("filename=\\"Taken on Aug 22 \\\\ 2012.jpg\\"", tok.nextToken().trim());
assertEquals("[a]", LazyList.toString(input));
assertNotNull(arr); assertTrue(arr.getClass().isArray()); assertTrue(arr instanceof String[]); assertEquals(1, strs.length); assertEquals("a", strs[0]);
assertEquals(ret, "hello foo and bar s"); assertEquals(ret, "hello foo and ${dddd} s"); assertEquals(ret, "hello null and ${dddd} s"); assertEquals(ret, "hello 33 and 42 s");
assertNull(bad); assertEquals("GET", methodOrVersion); assertEquals("/", uriOrStatus); assertEquals("HTTP/1.0", versionOrReason); assertEquals("Host", hdr[0]); assertEquals("localhost", val[0]); assertEquals("Connection", hdr[1]); assertEquals("close", val[1]); assertEquals(1, headers); assertTrue(complianceViolation.isEmpty());
assertEquals("abc", QuotedStringTokenizer.quoteIfNeeded("abc", " ,")); assertEquals("\\"a c\\"", QuotedStringTokenizer.quoteIfNeeded("a c", " ,"));
assertFalse(LazyList.contains(null, "z"));
assertEquals("/@foo/bar", uri.getPath());
assertNull(LazyList.remove(input, null)); assertNull(LazyList.remove(input, "a")); assertNull(LazyList.remove(input, new ArrayList<>())); assertNull(LazyList.remove(input, Integer.valueOf(42)));
assertEquals("GET", methodOrVersion); assertEquals("/chunk", uriOrStatus); assertEquals("HTTP/1.0", versionOrReason); assertEquals(1, headers); assertEquals("Header1", hdr[0]); assertEquals("value1", val[0]); assertEquals("0123456789", content); assertTrue(early);
assertFalse(iter.hasNext());
assertEquals("77Ea", r);
assertEquals("\\"abc \\\\n efg\\"", buf.toString()); assertEquals("\\"abcefg\\"", buf.toString());
assertEquals("", buf.toString());
assertEquals("foo%2523%3b%2c:%3db%20a%20r", buf.toString());
assertEquals(value, parameters.getString("value"));
assertEquals(min, integer.get());
assertEquals(str[i], BufferUtils.toString(buffer), "t" + i);
assertEquals(max, integer.get());
assertTrue(x.getMessage().contains("Bad EOL"));
assertNull(contentType);
assertEquals(0, LazyList.toStringArray(null).length); assertEquals(1, LazyList.toStringArray("a").length); assertEquals("a", LazyList.toStringArray("a")[0]); assertEquals(3, a.length); assertEquals("a", a[0]); assertEquals(null, a[1]); assertEquals("2", a[2]);
assertNull(StringUtils.split(null)); assertEquals(0, StringUtils.split("").length); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals(".c", res[2]); assertEquals(1, res.length); assertEquals("a", res[0]); assertEquals(2, res.length); assertEquals("a", res[0]); assertEquals("b" + NON_WHITESPACE + "c", res[1]);
assertEquals("zero", HttpFields.valueParameters(list.get(0), null)); assertEquals("one", HttpFields.valueParameters(list.get(1), null)); assertEquals("two", HttpFields.valueParameters(list.get(2), null)); assertEquals("three", HttpFields.valueParameters(list.get(3), null)); assertEquals("four", HttpFields.valueParameters(list.get(4), null));
assertNull(LazyList.remove(input, 0)); assertNull(LazyList.remove(input, 2)); assertNull(LazyList.remove(input, -2));
assertEquals(expectedHash, serverAccept);
assertEquals("GET", methodOrVersion); assertEquals("/uri", uriOrStatus); assertEquals("HTTP/1.0", versionOrReason); assertEquals("0123456789", content); assertTrue(early);
assertEquals("881f9a0a", r);
assertEquals("a", LazyList.get(input, 0));
assertEquals(0, abi.getHi()); assertEquals(0, abi.getLo()); assertEquals(Integer.MAX_VALUE, abi.getHi()); assertEquals(0, abi.getLo()); assertEquals(Integer.MAX_VALUE, abi.getHi()); assertEquals(Integer.MIN_VALUE, abi.getLo());
assertTrue(mm.containsSimpleValue("red")); assertFalse(mm.containsValue("nutrition"));
assertEquals("{color=red}", mm.toString()); assertEquals("{color=red, food=[apple, cherry, raspberry]}", mm.toString());
assertEquals("application", list.get(5).getParentType()); assertEquals("signed-exchange", list.get(5).getChildType()); assertEquals(0.9F, list.get(5).getQuality());
assertEquals(4, m.size()); assertEquals("value 0", m.getString("name\\n")); assertEquals("", m.getString("name1")); assertEquals("", m.getString("name2")); assertEquals("value 3", m.getString("n\\u00e3me3")); assertEquals(1, m2.size()); assertEquals("\\u30c6\\u30b9\\u30c8", m2.getString("name")); assertTrue(true);
assertArrayEquals(input, result.toByteArray());
assertEquals(newHashSet(2, 3, 4, 5, 6), result); assertEquals(a, result);
assertEquals(42, NBitInteger.decode(buf, 8));
assertNotNull(iter); assertFalse(iter.hasNext());
assertNull(list);
assertFalse(LazyList.contains(input, "z")); assertTrue(LazyList.contains(input, "a"));
assertEquals(3, sam.size());
assertEquals(source, buffer.toString()); assertTrue(buffer.toString().endsWith("firefly"));
assertTrue(entry.isStatic()); assertEquals(0x80, (0x80 & huff)); assertEquals(len, buffer.remaining()); assertEquals(entry.getHttpField().getValue(), value);
assertNotNull(list); assertTrue(list instanceof List); assertEquals(0, LazyList.size(list));
assertTrue(CollectionUtils.isEmpty(Collections.emptyMap())); assertTrue(CollectionUtils.isEmpty(Collections.emptyList())); assertTrue(CollectionUtils.isEmpty(new HashMap<>())); assertTrue(CollectionUtils.isEmpty(map));
assertNotNull(arr); assertTrue(arr.getClass().isArray()); assertTrue(arr instanceof String[]);
assertEquals(2,interval.getNumberOfDays()); assertEquals(7,interval.getNumberOfDays()); assertEquals(1,interval.getNumberOfDays());
assertEquals("4",openingHours.getFormattedClosingTime()); assertEquals("11",openingHours.getFormattedClosingTime()); assertEquals("0",openingHours.getFormattedClosingTime()); assertEquals("12:30",openingHours.getFormattedClosingTime()); assertEquals("12:05",openingHours.getFormattedClosingTime());
assertTrue(interval.isDateInInterval(date)); assertTrue(interval.isDateInInterval(date)); assertFalse(interval.isDateInInterval(date));
assertTrue(DateUtil.isPublicHoliday(calendar.getTime())); assertTrue(DateUtil.isPublicHoliday(calendar.getTime())); assertFalse(DateUtil.isPublicHoliday(calendar.getTime()));
assertEquals("some_kind (1)", prettifiedKey);
assertEquals(2, namespaceDtoList.size()); assertEquals(A_NAMESPACE, namespaceDtoList.get(0).getNamespace()); assertEquals(ANOTHER_NAMESPACE, namespaceDtoList.get(1).getNamespace());
assertNull(results);
assertEquals(2, result.size());
assertEquals(0d, result); assertEquals(0d, primitiveResult);
assertEquals(1, entities.size());
assertEquals("Longitude: " + testCase.value, testCase.isValid, geoPtValidator.isLongitudeValid(testCase.value));
assertTrue(result.isEmpty());
assertEquals("parent_kind (1) > child_kind (2)", prettifiedKey);
assertNull(mostRecentId);
assertEquals(1L, entityCount);
assertEquals("Value: " + testCase.value, testCase.isValid, ratingValidator.isRatingValid(testCase.value));
assertEquals(2L, entityCount);
assertEquals(4, result.size());
assertEquals(getCollectionsCsvData(), result);
assertNull(results);
assertEquals(3, results.size()); assertEquals(dtoFromMemCache1, results.get(0)); assertEquals(dtoFromMemCache2, results.get(1)); assertEquals(dtoFromMemCache3, results.get(2));
assertTrue(emailValidator.isValid("simon.pierre.gingras@gmail.com", null));
assertEquals(1, kindsList.size()); assertTrue(kindsList.contains(KIND_NAME));
assertTrue(result.isEmpty());
assertEquals("util", leafPackageName);
assertEquals("", prettifiedKey);
assertEquals(1, results.size()); assertEquals(dtoFromMemCache, results.get(0));
assertEquals(1, results.size()); assertEquals(dtoFromMemCache, results.get(0));
assertEquals(DEFAULT_COLUMN_VISIBILITY, helper.getColumnVisibility("appId", "ns", "kind", "col")); assertEquals(DEFAULT_COLUMN_VISIBILITY, Boolean.valueOf(item));
assertEquals(2, kindsList.size()); assertTrue(kindsList.contains(KIND_NAME)); assertTrue(kindsList.contains(ANOTHER_KIND));
assertNull(results);
assertEquals(0L, result); assertEquals(0L, primitiveResult);
assertEquals(0f, result); assertEquals(0f, primitiveResult);
assertEquals(2, kindsList.size()); assertTrue(kindsList.contains(KIND_NAME)); assertTrue(kindsList.contains(ANOTHER_KIND));
assertEquals(0, result); assertEquals(0, primitiveResult);
assertEquals(ANOTHER_NAME, savedEntity.getProperty(PROPERTY_NAME));
assertEquals(A_NAME, entity1.getProperty(PROPERTY_NAME)); assertEquals(ANOTHER_NAME, entity2.getProperty(PROPERTY_NAME)); assertFalse(it.hasNext());
assertEquals((byte) 0, result); assertEquals((byte) 0, primitiveResult);
assertEquals(getCsvData(), result);
assertFalse(emailValidator.isValid("simon.pierre.gingras@gmail.c", null));
assertEquals((short) 0, result); assertEquals((short) 0, primitiveResult);
assertEquals(3, result.size());
assertNotNull(entity); assertEquals(KIND_NAME, entity.getKind()); assertEquals("", entity.getProperty(PROPERTY_NAME));
assertFalse(emailValidator.isValid(null, null));
assertEquals("Latitude: " + testCase.value, testCase.isValid, geoPtValidator.isLatitudeValid(testCase.value));
assertEquals(1, result.size());
assertFalse(emailValidator.isValid("", null));
assertEquals(1, kindsList.size()); assertTrue(kindsList.contains(ANOTHER_KIND));
assertEquals(1L, entityCount);
assertEquals("", result);
assertEquals("grandparent_kind (some_name) > parent_kind (1) > child_kind (3)", prettifiedKey);
assertNotNull(entity); assertEquals(KIND_NAME, entity.getKind()); assertEquals("", entity.getProperty(PROPERTY_NAME)); assertFalse(entity.isUnindexedProperty(PROPERTY_NAME)); assertEquals("", entity.getProperty(UNINDEXED_PROPERTY_NAME)); assertTrue(entity.isUnindexedProperty(UNINDEXED_PROPERTY_NAME));
assertNotNull(actorList); assertFalse(actorList.isEmpty()); assertEquals(responseMock.getActors().size() , actorList.size());
assertThat(actor.getActorId() , is(22));
assertThat(cinema.getId() , is(20)); assertThat(cinema.getTitle() , is("Avengers")); assertThat(cinema.getDescription() , is("Avengers:description")); assertThat(cinema.getDirectorName() , is("Stan Lee")); assertThat(cinema.getReleaseDate() , is("2004.12.03"));
assertThat(actorEntity.getActorId() , is(expectedActorId));
assertNotNull(actor); assertThat(actor.getName() , is(expectedName));
assertThat(cinema.getId() , is(cinemaDetailResponseMock.getId()));
assertThat(cinemaEntity.getCinemaId() , is(62)); assertThat(cinemaEntity.getTitle() , is("Star wars")); assertThat(cinemaEntity.getDescription() , is("Best movie")); assertThat(cinemaEntity.getBudget() , is(200000000));
assertEquals(userNamespaceAuthorization, resultUserNamespaceAuthorization);
assertTrue(response);
assertEquals(customDdl, deletedCustomDdl);
assertEquals(dataProvider, deletedDataProvider);
assertEquals(expectedResult, actualResult);
assertEquals(businessObjectFormat, updatedBusinessObjectFormat);
assertEquals(namespace, resultNamespace);
assertNotNull(awsClientFactory.getAmazonSQSClient( new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(0, authorizedNamespaces.size());
assertEquals(businessObjectFormatDdlCollectionResponse, resultBusinessObjectFormatDdlCollectionResponse);
assertEquals(new Integer(attributeValue), value);
assertEquals(systemJobRunResponse, resultSystemJobRunResponse);
assertEquals(searchIndexTypeEntity, searchIndexTypeDaoHelper.getSearchIndexTypeEntity(SEARCH_INDEX_TYPE)); assertEquals(searchIndexTypeEntity, searchIndexTypeDaoHelper.getSearchIndexTypeEntity(SEARCH_INDEX_TYPE.toUpperCase())); assertEquals(searchIndexTypeEntity, searchIndexTypeDaoHelper.getSearchIndexTypeEntity(SEARCH_INDEX_TYPE.toLowerCase())); assertEquals(String.format("Search index type with code \\"%s\\" doesn\'t exist.", I_DO_NOT_EXIST), e.getMessage());
assertNotNull(result);
assertEquals(String.format("Configuration \\"%s\\" must be a positive integer.", ConfigurationValue.BDATA_FINAL_DESTROY_DELAY_IN_DAYS.getKey()), e.getMessage());
assertTrue(splitString.size() == 0);
assertEquals(new SecurityRoleFunctionKeys(securityRoleFunctionKeys), result);
assertEquals( new SearchIndex(searchIndexKey, SEARCH_INDEX_TYPE, SEARCH_INDEX_STATUS, SEARCH_INDEX_DEFAULT_ACTIVE_FLAG, NO_SEARCH_INDEX_STATISTICS, USER_ID, CREATED_ON, UPDATED_ON), searchIndex);
assertThat("Exception message not equal to expected exception message.", objectNotFoundException.getMessage(), is(String .format("Storage file \\"%s\\" doesn\'t exist in \\"%s\\" storage. Business object data: {%s}", filePath, storageUnitEntity.getStorage().getName(), businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey))));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Attribute \\"" + attributeName + "\\" for \\"" + storageEntity.getName() + "\\" storage must have a value that is not blank.", e.getMessage());
assertEquals(StorageEntity.MANAGED_STORAGE, value);
assertEquals(namespaceKeys, resultNamespaceKeys);
assertNotNull(notificationRegistrationEntity); assertEquals(NAMESPACE, notificationRegistrationEntity.getNamespace().getCode()); assertEquals(BDEF_NAME, notificationRegistrationEntity.getName());
assertEquals(CONFIGURATION_VALUE, result);
assertEquals(searchIndex, response);
assertEquals(FORMAT_FILE_TYPE_CODE, fileType.getFileTypeCode());
assertEquals(0, authorizedNamespaces.size());
assertEquals(new BusinessObjectFormatExternalInterfaceCreateRequest( new BusinessObjectFormatExternalInterfaceKey(NAMESPACE_2, BDEF_NAME_2, FORMAT_USAGE_CODE_2, FORMAT_FILE_TYPE_CODE_2, EXTERNAL_INTERFACE_2)), businessObjectFormatExternalInterfaceCreateRequest);
assertEquals(attributeValueList, result);
assertEquals(1, applicationUser.getNamespaceAuthorizations().size()); assertEquals(namespaceEntity.getCode(), namespaceAuthorization.getNamespace());
assertEquals(Lists.newArrayList(new InstanceTypeConfig().withInstanceType(instanceType).withWeightedCapacity(weightedCapacity).withBidPrice(bidPrice) .withBidPriceAsPercentageOfOnDemandPrice(bidPriceAsPercentageOfOnDemandPrice).withEbsConfiguration(null) .withConfigurations(expectedConfigurations)), result);
assertEquals(String.format("\\"%s\\" must be specified.", VARIABLE_NAME), e.getMessage());
assertTrue(obj instanceof Option);
assertEquals("result", "A|B|C", result);
assertEquals(SECURITY_FUNCTION_NAME_WITH_EXTRA_SPACES, SECURITY_FUNCTION_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION, SECURITY_FUNCTION_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getSecurityFunctionName());
assertTrue(herdRestControllerAdvice.isLoggingEnabled());
assertEquals(businessObjectDataDdl, result);
assertEquals(ObjectNotFoundException.class, e.getClass()); assertEquals("The notification registration with namespace \\"" + NAMESPACE + "\\" and name \\"DOES_NOT_EXIST\\" was not found.", e.getMessage());
assertNull("businessObjectDataStorageFilesCreateResponse", businessObjectDataStorageFilesCreateResponse);
assertEquals(USER_NAMESPACE_AUTHORIZATION_ID, userNamespaceAuthorization.getId()); assertEquals(USER_NAMESPACE_AUTHORIZATION_KEY, userNamespaceAuthorization.getUserNamespaceAuthorizationKey()); assertEquals(NAMESPACE_PERMISSIONS, userNamespaceAuthorization.getNamespacePermissions());
assertEquals(EXTERNAL_INTERFACE_NAME_WITH_EXTRA_SPACES, externalInterfaceKeyWithExtraSpacesInName.getExternalInterfaceName()); assertEquals(EXTERNAL_INTERFACE, externalInterfaceKeyWithExtraSpacesInName.getExternalInterfaceName());
assertEquals("A business object data storage unit key must be specified.", e.getMessage()); assertEquals("A business object format version must be specified.", e.getMessage()); assertEquals("A business object data version must be specified.", e.getMessage());
assertEquals(SEARCH_INDEX_STATUS_2, searchIndexEntity.getStatus().getCode());
assertEquals(emrHiveStep, result);
assertNotNull(awsClientFactory.getEc2Client( new AwsParamsDto(AWS_ASSUMED_ROLE_ACCESS_KEY, AWS_ASSUMED_ROLE_SECRET_KEY, AWS_ASSUMED_ROLE_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertTrue(exceptionHandler.isReportableError(new Throwable(MESSAGE)));
assertEquals("fragment with escaped html", result);
assertFalse(wildcardHelper.matches("ab", "*c"));
assertNull(uploaderApp.parseCommandLineArguments(arguments, applicationContext));
assertEquals(businessObjectFormatKeys, resultKeys);
assertTrue(splitString.get(0).equals(value1)); assertTrue(splitString.get(1).equals(value2Escaped));
assertNotNull(fileTypeKeys); assertEquals(0, fileTypeKeys.getFileTypeKeys().size());
assertEquals(new JobDefinitionAlternateKeyDto(NAMESPACE, JOB_NAME), jobDefinitionHelper.getJobDefinitionKey(testProcessDefinitionKey));
assertEquals(securityRoleFunction, result);
assertEquals(getResourceAsString("/exampleXml2"), exampleXml);
assertEquals(businessObjectDataKeys, result);
assertEquals("configurationValue is required", e.getMessage());
assertEquals(businessObjectDefinitionColumn, resultBusinessObjectDefinitionColumn);
assertEquals(new AttributeValueListCreateRequest(attributeValueListKey), request);
assertEquals(new DataProvider(DATA_PROVIDER_NAME), resultDataProvider); assertEquals(dataProvider, resultDataProvider);
assertEquals("Invalid search result.", e.getMessage());
assertEquals(String.format("Path prefix validation must be enabled on \\"%s\\" storage.", STORAGE_NAME), e.getMessage());
assertTrue(testFile.exists());
assertEquals(aggregation, result);
assertEquals(storagePolicy, resultStoragePolicy);
assertEquals(globalAttributeDefinitionEntity, response);
assertEquals(businessObjectDataNotificationRegistration, result);
assertEquals(businessObjectDataAvailabilityCollectionResponse, result);
assertEquals(NoSuchFieldException.class.getName(), e.getMessage());
assertEquals(new SecurityRoleKey(SECURITY_ROLE_2), securityRoleKey);
assertEquals(expectedResult, actualResult);
assertEquals(String .format("The business object format has a required attribute \\"%s\\" which was not specified or has a value which is blank.", ATTRIBUTE_NAME), e.getMessage());
assertNull("value", value);
assertThat("Destination is null.", destination, not(nullValue()));
assertEquals(String.format("Unable to create global attribute definition with global attribute definition level \\"%s\\" " + "and global attribute definition name \\"%s\\" because it already exists.", globalAttributeDefinitionKey.getGlobalAttributeDefinitionLevel(), globalAttributeDefinitionKey.getGlobalAttributeDefinitionName()), e.getMessage());
assertEquals(configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_HOST), resultAwsParamsDto.getHttpProxyHost()); assertEquals(configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_PORT, Integer.class), resultAwsParamsDto.getHttpProxyPort()); assertNotNull(resultAwsParamsDto);
assertEquals(String.format("Search index type with code \\"%s\\" is not supported.", SEARCH_INDEX_TYPE), e.getMessage());
assertEquals(new SecurityRoleFunctionKey(SECURITY_ROLE_2, SECURITY_FUNCTION_2), securityRoleFunctionKey);
assertEquals("", result);
assertEquals(businessObjectDefinitionSubjectMatterExpert, deletedBusinessObjectDefinitionSubjectMatterExpert);
assertEquals(String.format("namespace: \\"%s\\", businessObjectDefinitionName: \\"%s\\"", BDEF_NAMESPACE, BDEF_NAME), response);
assertEquals(1, CollectionUtils.size(result)); assertTrue(result.containsKey(name)); assertEquals(value, result.get(name));
assertNotNull("businessObjectDataStorageFilesCreateResponse", businessObjectDataStorageFilesCreateResponse);
assertEquals(INTEGER_VALUE, result);
assertThat("Exception message is not correct.", alreadyExistsException.getMessage(), is(equalTo(String .format("Display name \\"%s\\" already exists for a tag with tag type \\"%s\\" and tag code \\"%s\\".", TAG_DISPLAY_NAME, tagEntity.getTagType().getCode(), tagEntity.getTagCode()))));
assertEquals("", exampleXml);
assertEquals(searchIndex, response);
assertEquals(String.format("Configuration \\"%s\\" must have a value.", configurationValue.getKey()), e.getMessage());
assertEquals(UnsupportedOperationException.class, e.getClass()); assertEquals("Unknown namespaceURI \\"" + XsdNamespaceContext.NS_URI_XSD + "\\"", e.getMessage());
assertEquals("", result);
assertEquals(new SecurityRoleFunction(ID, securityRoleFunctionKey), result);
assertEquals(emrPigStep, result);
assertThat("Result is null.", result, is(notNullValue()));
assertEquals(ACTIVITI_ID + ActivitiRuntimeHelper.TASK_VARIABLE_MARKER + VARIABLE_NAME, activitiRuntimeHelper.buildTaskWorkflowVariableName(ACTIVITI_ID, VARIABLE_NAME));
assertEquals(tagType, resultTagType);
assertEquals(businessObjectDefinitionSearchResponse, result);
assertEquals("", result);
assertEquals(AccessDeniedException.class, e.getClass()); assertEquals("Current user does not have \\"[READ]\\" permission(s) to the namespace \\"foo\\"", e.getMessage());
assertEquals(businessObjectDefinitionKeys, result);
assertEquals(null, value);
assertEquals(expectedResult, result);
assertNull(authentication);
assertEquals(BOOLEAN_VALUE, result);
assertEquals(businessObjectFormatExternalInterface, result);
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals("result", "A\\\\||B\\\\||C\\\\|", result);
assertNull(argParser.getStringValue(strOpt)); assertEquals(testDefaultValue, argParser.getStringValue(strOpt, testDefaultValue)); assertNotNull(resultValue); assertEquals(inputValue, resultValue); assertNotNull(resultValue); assertEquals(inputValue, resultValue); assertNotNull(resultValue); assertEquals(inputValue, resultValue);
assertEquals(STRING_VALUE, result);
assertEquals(Arrays.asList(storageUnitKey), result);
assertEquals(attributeValue, storageHelper.getStorageAttributeIntegerValueByName(attributeName, storageEntity, attributeRequired, attributeValueRequiredIfExists));
assertEquals("|", hive13DdlGenerator.getDdlCharacterValue("|"));
assertEquals("A business object data search request must be specified.", e.getMessage()); assertEquals("A business object data search filter must be specified.", e.getMessage()); assertEquals("A business object data search filter must be specified.", e.getMessage()); assertEquals("A business object data search key must be specified.", e.getMessage()); assertEquals("A business object data search key must be specified.", e.getMessage());
assertTrue(wildcardHelper.matches("ab", "*")); assertTrue(wildcardHelper.matches("bc", "*")); assertTrue(wildcardHelper.matches("", "*"));
assertEquals(tagType, resultTagType);
assertEquals(securityRole, result);
assertEquals(tag, updatedTag);
assertEquals("A list of business object data search filters can only have one element.", e.getMessage()); assertEquals("A list of business object data search keys can only have one element.", e.getMessage());
assertEquals(getResourceAsString("/yaml2.yaml"), toYaml(swagger)); assertNotNull(exampleClassNames); assertEquals(1, exampleClassNames.size()); assertTrue(exampleClassNames.contains("BasicCase"));
assertEquals(tagTypeKeys, resultTagTypeKeys);
assertEquals(expectedResult, actualResult);
assertEquals( new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION), result);
assertFalse(argParser.getStringValueAsBoolean(strOpt, false)); assertTrue(argParser.getStringValueAsBoolean(strOpt, true)); assertTrue(argParser.getStringValueAsBoolean(strOpt, false)); assertTrue(argParser.getStringValueAsBoolean(strOpt, false)); assertFalse(argParser.getStringValueAsBoolean(strOpt, true)); assertEquals(String.format("Invalid boolean value [%s]", INVALID_BOOLEAN_VALUE), e.getMessage());
assertNotNull(result); assertTrue(result.contains("partitionKeyGroup")); assertFalse(result.contains("expectedPartitionValues")); assertFalse(result.contains(PARTITION_VALUE)); assertFalse(result.contains(PARTITION_VALUE_2)); assertFalse(result.contains(PARTITION_VALUE_3));
assertThat("Result not equal to storage file entity.", result, is(storageFileEntity));
assertEquals(storageUnitNotificationRegistrationKeys, resultStorageUnitNotificationRegistrationKeys);
assertEquals("0 Milliseconds", result);
assertEquals(storageUnitEntity, result);
assertEquals(String.format("Failed to parse JSON object from the URL: url=\\"%s\\"", MockUrlOperationsImpl.MOCK_URL_JSON_PARSE_EXCEPTION), e.getMessage());
assertNotNull(usage); assertTrue(usage.contains(String.format("usage: %s", argParser.getApplicationName()))); assertTrue(usage.contains(String.format("-%s,", option.getOpt()))); assertTrue(usage.contains(String.format("--%s", option.getLongOpt()))); assertTrue(usage.contains(option.getDescription())); assertTrue(!option.hasArg() || usage.contains("<arg>"));
assertEquals(String.format("The start registration date \\"%s\\" cannot be greater than the end registration date \\"%s\\".", start, end), e.getMessage());
assertEquals(emrShellStep, result);
assertNotNull(awsClientFactory.getEmrClient( new AwsParamsDto(AWS_ASSUMED_ROLE_ACCESS_KEY, AWS_ASSUMED_ROLE_SECRET_KEY, AWS_ASSUMED_ROLE_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertTrue(wildcardHelper.matches("a*", "a*")); assertFalse(wildcardHelper.matches("ab", "a*"));
assertEquals(Integer.valueOf(1), storageUnitEntity.getStoragePolicyTransitionFailedAttempts());
assertEquals("The namespace \\"namespace\\" does not have access to the following IAM roles: [iamRoleName2]", e.getMessage());
assertEquals(Integer.valueOf(2), storageUnitEntity.getStoragePolicyTransitionFailedAttempts());
assertThat("Result does not equal businessObjectDefinitionDescriptionSuggestionEntity.", result, is(equalTo(businessObjectDefinitionDescriptionSuggestionEntity)));
assertEquals(businessObjectFormatExternalInterface, result);
assertEquals(jobDefinition, resultJobDefinition);
assertEquals(new BusinessObjectDataStorageUnitKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION, STORAGE_NAME), result);
assertEquals(new InstanceGroupConfig(InstanceRoleType.MASTER, EC2_INSTANCE_TYPE, INSTANCE_COUNT), result);
assertEquals(calendarStringRepresentation, adapter.marshal(calendar));
assertEquals(length + " Days", result);
assertEquals(expectedErrMsg, e.getMessage());
assertEquals(500, mockHttpServletResponse.getStatus()); assertEquals(xmlHelper.objectToXml(errorInformation), mockHttpServletResponse.getContentAsString());
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(BusinessObjectDefinitionTagKeys, result);
assertEquals(listInstanceFleetsResult, result);
assertEquals(StorageEntity.MANAGED_STORAGE, value);
assertEquals(new ArrayList<>(), result);
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Attribute \\"" + attributeName + "\\" for \\"" + storageEntity.getName() + "\\" storage must have a value that is not blank.", e.getMessage());
assertEquals(DataBridgeApp.ReturnValue.FAILURE, uploaderApp.parseCommandLineArguments(arguments, applicationContext));
assertEquals("thrown exception type", IllegalStateException.class, e.getClass()); assertEquals("thrown exception message", "targetType \\"" + givenType + "\\" is not assignable from the default value of type \\"" + expectedDefaultType + "\\" for configuration value " + "\\"HERD_ENVIRONMENT\\".", e.getMessage());
assertEquals(Arrays.asList("a", "b", "c"), actualList);
assertEquals(dataProviderKeys, resultDataProviderKeys);
assertEquals(securityRoleFunctionKeys, result);
assertNotNull(result);
assertEquals(FORMAT_FILE_TYPE_CODE, fileType.getFileTypeCode());
assertEquals(String.format("AWS SQS queue with \\"%s\\" name not found.", MockSqsOperationsImpl.MOCK_SQS_QUEUE_NOT_FOUND_NAME), e.getMessage());
assertThat("Function is null.", illegalStateException.getMessage(), is("SQS queue name not found. Ensure the \\"search.index.update.sqs.queue.name\\" configuration entry is configured."));
assertEquals(INTEGER_VALUE, HerdStringUtils.convertStringToInteger(INTEGER_VALUE.toString(), INTEGER_VALUE_2));
assertEquals(storageUnitEntity, result);
assertEquals(emrClusterDefinitionInformation, result);
assertEquals(tagType, deletedTagType);
assertEquals(businessObjectFormat, updatedBusinessObjectFormat);
assertEquals(String.format("Configuration \\"%s\\" has an invalid BigDecimal value: \\"INVALID_BigDecimal_VALUE\\".", configurationValue.getKey()), e.getMessage());
assertEquals(storage, result);
assertEquals("A business object definition key must be specified.", e.getMessage());
assertTrue("not active", isActive);
assertEquals(fileType, deletedFileType);
assertEquals(securityRoleFunctionKeys, result);
assertEquals(((Integer) testStatusCode).hashCode(), testHttpErrorResponseException.hashCode());
assertEquals(emrClusterDefinitionKeys, result);
assertEquals("fragment<b> with <hlt>no</hlt></b> html", result);
assertEquals(tag, resultTag);
assertEquals(PASSWORD, result);
assertEquals(securityFunctionEntity, result);
assertEquals(job, result);
assertEquals(Predicate.BooleanOperator.OR, predicate.getOperator()); assertEquals(2, expressions.size()); assertEquals(1000, ((InPredicate) expressions.get(0)).getValues().size()); assertEquals(1, ((InPredicate) expressions.get(1)).getValues().size());
assertEquals(businessObjectDataAttribute, result);
assertEquals(expectedOutput, businessObjectDataHelper.businessObjectDataKeyToString(testBusinessObjectDataKey)); assertEquals(expectedOutput, businessObjectDataHelper .businessObjectDataKeyToString(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION));
assertEquals(tagListResponse, resultTagKeys);
assertEquals(new FileType(FORMAT_FILE_TYPE_CODE), resultFileType); assertEquals(fileType, resultFileType);
assertEquals(searchIndexEntity, searchIndexDaoHelper.getSearchIndexEntity(new SearchIndexKey(SEARCH_INDEX_NAME))); assertEquals(String.format("Search index with name \\"%s\\" doesn\'t exist.", I_DO_NOT_EXIST), e.getMessage());
assertEquals(resultBusinessObjectDefinitionDescriptionSuggestion, businessObjectDefinitionDescriptionSuggestion);
assertEquals(storageKeys, result);
assertEquals(partitionKeyGroup, resultPartitionKeyGroup);
assertEquals(STRING_VALUE, result);
assertEquals(Lists.newArrayList(new InstanceGroupConfig(InstanceRoleType.MASTER, null, instanceCount)), result);
assertEquals("value", configurationValue.getDefaultValue(), value);
assertEquals(userNamespaceAuthorization, deletedUserNamespaceAuthorization);
assertEquals("fragment with escaped html &amp; unrecognized entity &amp;zzz;x", result);
assertNull(result);
assertEquals(businessObjectDataNotificationRegistration, result);
assertThat("Result not equal to parent tag entities list.", result, is(equalTo(parentTagEntities)));
assertEquals(new SecurityFunction(SECURITY_FUNCTION), resultSecurityFunction); assertEquals(securityFunction, resultSecurityFunction);
assertEquals(7, CollectionUtils.size(systemJobs));
assertFalse(securityHelper.isUserGeneratedByClass(null, null)); assertFalse(securityHelper.isUserGeneratedByClass(authRequest, null));
assertNull(authentication);
assertThat("Destination is null.", destination, not(nullValue()));
assertEquals(businessObjectDefinitionDescriptionSuggestion, response);
assertEquals(storageUnitNotificationRegistrationKeys, resultStorageUnitNotificationRegistrationKeys);
assertEquals("A\\\\200B", hive13DdlGenerator.getDdlCharacterValue("A" + String.valueOf((char) 128) + "B"));
assertEquals(systemJobRunResponse, resultSystemJobRunResponse);
assertNotNull("businessObjectDataStorageFilesCreateResponse", businessObjectDataStorageFilesCreateResponse);
assertEquals(configurationValue.getDefaultValue(), value); assertEquals("", value); assertEquals(configurationValue.getDefaultValue().toString(), value); assertEquals(configurationValue.getDefaultValue().toString(), value); assertEquals(configurationValue.getDefaultValue().toString(), value);
assertEquals(attributeValue, value);
assertEquals(Double.valueOf(0.8), awsHelper.getTransferRateInMegabitsPerSecond(1000L, 10L));
assertNotNull(externalInterfaceKeys); assertEquals(0, externalInterfaceKeys.getExternalInterfaceKeys().size());
assertEquals("The object", xsdParser.getAnnotation("object")); assertEquals("The scalar 2", xsdParser.getAnnotation("object", "scalar2"));
assertEquals(securityFunctionKeys, resultSecurityFunctionKeys);
assertEquals(PredefinedRetryPolicies.DEFAULT_RETRY_CONDITION, retryPolicy.getRetryCondition()); assertEquals(backoffStrategy, retryPolicy.getBackoffStrategy()); assertEquals(expectedMaxErrorRetry, retryPolicy.getMaxErrorRetry());
assertTrue(e.getMessage().contains("Valid date or date and time format must be used when specifying values for start/end registration dates.")); assertTrue(e.getMessage().contains("Valid date or date and time format must be used when specifying values for start/end registration dates."));
assertEquals(firstAwsCredential, secondAwsCredential); assertNotEquals(firstAwsCredential, secondAwsCredential);
assertEquals(Boolean.TRUE, configurationHelper.getBooleanProperty(configurationValue, environment));
assertEquals(Timestamp.valueOf("2016-03-29 10:34:11"), HerdDateUtils.addDays(testTimestamp, daysDiff)); assertEquals(testTimestamp, HerdDateUtils.addDays(testTimestamp, 0)); assertEquals(Timestamp.valueOf("2015-09-13 10:34:11"), HerdDateUtils.addDays(testTimestamp, -daysDiff));
assertEquals("1 Millisecond", result); assertEquals(length + " Milliseconds", result);
assertEquals(ReturnValue.FAILURE, dataBridgeApp.go(null)); assertEquals(ReturnValue.FAILURE.getReturnCode(), dataBridgeApp.go(null).getReturnCode()); assertEquals(ReturnValue.SUCCESS, dataBridgeApp.go(new String[] {})); assertEquals(ReturnValue.SUCCESS.getReturnCode(), dataBridgeApp.go(new String[] {}).getReturnCode());
assertTrue(predicate instanceof InPredicate); assertEquals(1000, ((InPredicate) predicate).getValues().size());
assertEquals(tagTypeSearchResponse, resultTagTypeSearchResponse);
assertEquals(String.format("SQS queue name not found. Ensure the \\"%s\\" configuration entry is configured.", ConfigurationValue.HERD_NOTIFICATION_SQS_INCOMING_QUEUE_NAME.getKey()), ex.getMessage());
assertEquals(TrustedApplicationUserBuilder.TRUSTED_USER_ID, applicationUser.getUserId()); assertEquals(TrustedApplicationUserBuilder.TRUSTED_USER_FIRST_NAME, applicationUser.getFirstName()); assertEquals(TrustedApplicationUserBuilder.TRUSTED_USER_LAST_NAME, applicationUser.getLastName()); assertEquals(TrustedApplicationUserBuilder.TRUSTED_USER_EMAIL, applicationUser.getEmail()); assertEquals(namespaceAuthorizations, applicationUser.getNamespaceAuthorizations()); assertEquals(0, applicationUser.getRoles().size());
assertThat("Error message not correct.", illegalArgumentException.getMessage().contains(MESSAGE_TEXT), is(true));
assertEquals(new ExternalInterface(externalInterfaceKey, DISPLAY_NAME_FIELD, DESCRIPTION), resultExternalInterface); assertEquals(externalInterface, resultExternalInterface);
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals(businessObjectDataInvalidateUnregisteredResponse, result);
assertEquals(ToolsCommonConstants.ReturnValue.SUCCESS, accessValidatorApp.parseCommandLineArguments(arguments, applicationContext)); assertTrue("Incorrect usage information returned.", output.startsWith("usage: " + AccessValidatorApp.APPLICATION_NAME));
assertTrue(testFile.exists());
assertEquals(expectedErrMsg, e.getMessage());
assertEquals(businessObjectFormatKeys, resultKeys);
assertEquals(businessObjectDefinition, result);
assertEquals("\\\\", hive13DdlGenerator.getDdlCharacterValue("\\\\")); assertEquals("\\\\", hive13DdlGenerator.getDdlCharacterValue("\\\\", false)); assertEquals("\\\\\\\\", hive13DdlGenerator.getDdlCharacterValue("\\\\", true)); assertEquals("\\\\\\\\", hive13DdlGenerator.getDdlCharacterValue("\\\\\\\\", true));
assertNotNull(result); assertEquals(0, result.size());
assertEquals(businessObjectDefinitionTag, result);
assertEquals(ddl, resultDdl);
assertEquals(testStorageName, businessObjectDataHelper.getStorageUnitByStorageName(businessObjectData, testStorageName).getStorage().getName()); assertEquals(testStorageName, businessObjectDataHelper.getStorageUnitByStorageName(businessObjectData, testStorageName.toUpperCase()).getStorage().getName()); assertEquals(testStorageName, businessObjectDataHelper.getStorageUnitByStorageName(businessObjectData, testStorageName.toLowerCase()).getStorage().getName());
assertEquals(String.format("Configuration \\"%s\\" has an invalid boolean value: \\"NOT_A_BOOLEAN\\".", configurationValue.getKey()), e.getMessage());
assertEquals(storageUnitNotificationRegistration, deletedStorageUnitNotificationRegistration);
assertEquals(response, result);
assertFalse(wildcardHelper.matches("a*", "ab")); assertTrue(wildcardHelper.matches("ab", "ab"));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(new BusinessObjectDataStorageUnitKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION, STORAGE_NAME), result);
assertEquals("fragment with <hlt class=\\"highlight\\">no</hlt> html", result);
assertEquals("A business object data storage unit status must be specified.", e.getMessage());
assertEquals(StringType.class, type.getClass()); assertEquals(LongStringType.class, type.getClass());
assertEquals(null, accessValidatorApp.parseCommandLineArguments(arguments, applicationContext));
assertEquals(1, applicationUser.getNamespaceAuthorizations().size()); assertEquals(namespaceEntity.getCode(), namespaceAuthorization.getNamespace());
assertEquals(emrClusterDefinitionInformation, result);
assertFalse(testFile.exists()); assertTrue(localTempPath.toFile().exists());
assertEquals(tag, deletedTag);
assertEquals(Collections.singletonList(storageUnitKey), result);
assertTrue(testHttpErrorResponseException.equals(testHttpErrorResponseException)); assertFalse(testHttpErrorResponseException.equals(nullObject)); assertFalse(testHttpErrorResponseException.equals("")); assertTrue(testHttpErrorResponseException.equals(new HttpErrorResponseException(testStatusCode, null, null)));
assertEquals(businessObjectDefinitionTagKeys, result);
assertEquals(EXTERNAL_INTERFACE, externalInterface.getExternalInterfaceKey().getExternalInterfaceName());
assertEquals(tag, resultTag);
assertEquals(businessObjectDefinitionSubjectMatterExpert, resultBusinessObjectDefinitionSubjectMatterExpert);
assertTrue(emrHelper.isInstanceDefinitionsEmpty(null)); assertTrue(emrHelper.isInstanceDefinitionsEmpty(new InstanceDefinitions(null, null, null))); assertFalse(emrHelper.isInstanceDefinitionsEmpty(new InstanceDefinitions(new MasterInstanceDefinition(), null, null))); assertFalse(emrHelper.isInstanceDefinitionsEmpty(new InstanceDefinitions(null, new InstanceDefinition(), null))); assertFalse(emrHelper.isInstanceDefinitionsEmpty(new InstanceDefinitions(null, null, new InstanceDefinition())));
assertEquals(SECURITY_FUNCTION, securityFunction.getSecurityFunctionName());
assertEquals(DISPLAY_NAME_FIELD_WITH_EXTRA_SPACES, EXTERNAL_INTERFACE_UPDATE_REQUEST_WITH_EXTRA_SPACES_IN_DISPLAY_NAME.getDisplayName()); assertEquals(DISPLAY_NAME_FIELD, EXTERNAL_INTERFACE_UPDATE_REQUEST_WITH_EXTRA_SPACES_IN_DISPLAY_NAME.getDisplayName());
assertEquals(securityRoleFunctionKeys, result);
assertEquals(new SecurityRoleFunctionKeys(securityRoleFunctionKeys), result);
assertTrue(result.contains(new SimpleGrantedAuthority(SECURITY_FUNCTION)));
assertNotNull(awsClientFactory.getSesClient( new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertNull("result", result);
assertEquals(new BigDecimal("0.05"), configurationHelper.getBigDecimalRequiredProperty(configurationValue, environment));
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertThat("Exception message is not correct.", illegalArgumentException.getMessage(), is(equalTo("Tag type code in parent tag key must match the tag type code in the request.")));
assertEquals(storagePolicy, resultStoragePolicy);
assertEquals(new ExternalInterface(externalInterfaceKey, DISPLAY_NAME_FIELD, DESCRIPTION), resultExternalInterface); assertEquals(externalInterface, resultExternalInterface);
assertEquals(0, applicationUser.getNamespaceAuthorizations().size());
assertEquals(allowedAttributeValuesInformation, response);
assertEquals(resultUserNamespaceAuthorizations, userNamespaceAuthorizations);
assertEquals(SECURITY_FUNCTION, securityFunction.getSecurityFunctionName());
assertNotNull(notificationRegistrationStatus); assertEquals("ENABLED", notificationRegistrationStatus.getCode());
assertEquals(String.format("Line number %d of input file \\"%s\\" does not match the expected format.", LINE_NUMBER, LOCAL_FILE), e.getMessage());
assertThat("Result not equal to storage file entity.", result, is(storageFileEntity));
assertNull(result);
assertEquals(searchIndexKeys, response);
assertEquals(calendar.getTime(), gregorianCalendar.toGregorianCalendar().getTime());
assertEquals(new SearchIndexStatistics(NO_SEARCH_INDEX_STATISTICS_CREATION_DATE, SEARCH_INDEX_STATISTICS_NUMBER_OF_ACTIVE_DOCUMENTS, SEARCH_INDEX_STATISTICS_NUMBER_OF_DELETED_DOCUMENTS, SEARCH_INDEX_STATISTICS_INDEX_UUID, 0L), response);
assertThat("Exception message is not correct.", objectNotFoundException.getMessage(), is(equalTo(String.format( "Business object definition description suggestion with the parameters " + " {namespace=\\"%s\\", businessObjectDefinitionName=\\"%s\\", userId=\\"%s\\"} does not exist.", businessObjectDefinitionEntity.getNamespace().getCode(), businessObjectDefinitionEntity.getName(), USER_ID))));
assertEquals(businessObjectDataNotificationRegistrationKeys, result);
assertThat("Function is null.", illegalStateException.getMessage(), is("SQS queue name not found. Ensure the \\"search.index.update.sqs.queue.name\\" configuration entry is configured."));
assertEquals(String.format("Configuration \\"%s\\" has an invalid non-negative BigDecimal value: \\"-1.00\\".", configurationValue.getKey()), e.getMessage());
assertEquals(emrCluster, result);
assertEquals(testActivitiIdTemplate, jobDefinitionHelper.getActivitiJobDefinitionTemplate());
assertEquals(externalInterface, deletedExternalInterface);
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Attribute \\"" + attributeName + "\\" for \\"" + storageEntity.getName() + "\\" storage must be configured.", e.getMessage());
assertNotNull(jsonHelper.objectToJson(businessObjectDefinitionEntity));
assertTrue(errorInformation.getMessageDetails().size() == 0); assertTrue(errorInformation.getMessageDetails().size() == 2); assertEquals("cause_1_exception", errorInformation.getMessageDetails().get(0)); assertEquals("cause_2_exception", errorInformation.getMessageDetails().get(1));
assertEquals(globalAttributeDefinition, response);
assertEquals(businessObjectDefinitionDescriptionSuggestion, deletedBusinessObjectDefinitionDescriptionSuggestion);
assertEquals(String.format("Business object data has no storage unit with storage name \\"%s\\".", testStorageName), e.getMessage());
assertNotNull("value", value); assertEquals("value", expectedValue, value);
assertEquals(String.format("Configuration \\"%s\\" must have a value.", configurationValue.getKey()), e.getMessage());
assertEquals("Invalid search result.", e.getMessage());
assertEquals("~namespace~.~jobName~", jobDefinitionHelper.getActivitiJobDefinitionTemplate());
assertEquals(response, result);
assertThat("Result is null.", result, is(notNullValue()));
assertEquals(emrClusterDefinitionKeys, result);
assertEquals(String.format("\\"%s\\" must be specified.", VARIABLE_NAME), e.getMessage());
assertEquals(Arrays.asList(), actualList);
assertNotNull(resultClientConfiguration); assertEquals(testHttpProxyHost, resultClientConfiguration.getProxyHost()); assertEquals(testHttpProxyPort, Integer.valueOf(resultClientConfiguration.getProxyPort())); assertNull(resultClientConfiguration.getProxyHost()); assertEquals(-1, resultClientConfiguration.getProxyPort());
assertNull(result);
assertEquals(storageUnitNotificationRegistrationKeys, resultStorageUnitNotificationRegistrationKeys);
assertNotNull(fileTypeKeys); assertEquals(ALL_FILE_TYPE_KEYS, fileTypeKeys.getFileTypeKeys());
assertTrue(propertiesHelper.isBlankOrNull(HERD_USERNAME_PROPERTY)); assertTrue(propertiesHelper.isBlankOrNull(HERD_PASSWORD_PROPERTY));
assertEquals(3, CollectionUtils.size(result)); assertTrue(result.contains(new InstanceGroupConfig(InstanceRoleType.MASTER, null, instanceCount))); assertTrue(result.contains(new InstanceGroupConfig(InstanceRoleType.CORE, null, instanceCount))); assertTrue(result.contains(new InstanceGroupConfig(InstanceRoleType.TASK, null, instanceCount)));
assertEquals(job, result);
assertEquals(new BusinessObjectFormatExternalInterfaceKey(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, EXTERNAL_INTERFACE), result);
assertEquals(dataProvider, resultDataProvider);
assertTrue(splitString.size() == 0);
assertEquals(tagType, resultTagType);
assertEquals("The requested method is not allowed.", e.getMessage());
assertTrue( timeDiff >= testSeconds); assertEquals("Successfully waited for " + testSeconds + " seconds.", result.getMessage());
assertNotNull(awsClientFactory.getEc2Client( new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(String.format("\\"%s\\" must be a valid integer value.", VARIABLE_NAME), e.getMessage());
assertEquals(SECURITY_FUNCTION, securityFunction.getSecurityFunctionName());
assertEquals("1 Hour", result);
assertEquals(new SecurityRoleFunctionKeys(securityRoleFunctionKeys), result);
assertEquals(attributeValueListKeys, result);
assertEquals(Double.valueOf(0.1), awsHelper.getTransferRateInKilobytesPerSecond(10L, 100L));
assertEquals("split and trim result", expectedResults, actualResults);
assertEquals(STORAGE_UNIT_STATUS_2, storageUnitEntity.getStatus().getCode());
assertEquals("An attribute value list create request must be specified.", e.getMessage());
assertThat("Result not equal to tag entity.", result, is(equalTo(tagEntity)));
assertEquals(getTestBuildInformation(), xmlHelper.unmarshallXmlToObject(BuildInformation.class, getTestXml()));
assertEquals(securityRoleKeys, result);
assertEquals("1 Second", result);
assertEquals(Arrays.asList(storageUnitKey), result);
assertNotNull(awsClientFactory.getAmazonSNSClient( new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(businessObjectFormatExternalInterface, result);
assertEquals(response, resultResponse);
assertEquals(EXTERNAL_INTERFACE_NAME_WITH_EXTRA_SPACES, EXTERNAL_INTERFACE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getExternalInterfaceKey().getExternalInterfaceName()); assertEquals(EXTERNAL_INTERFACE, EXTERNAL_INTERFACE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getExternalInterfaceKey().getExternalInterfaceName());
assertEquals(businessObjectDefinitionColumnKeys, resultBusinessObjectDefinitionColumnKeys);
assertEquals(expectedErrMsg, e.getMessage());
assertEquals("UT_SomeText", HerdStringUtils.decodeBase64("VVRfU29tZVRleHQ=")); assertEquals(STRING_VALUE, HerdStringUtils.decodeBase64(encodedText));
assertEquals(expectedHttpErrorResponseExceptionString, testHttpErrorResponseException.toString());
assertEquals(MockUrlOperationsImpl.MOCK_JSON_STRING, urlHelper.parseJsonObjectFromUrl(MockUrlOperationsImpl.MOCK_URL_VALID).toJSONString());
assertEquals(Arrays.asList(STRING_VALUE, STRING_VALUE_2), jsonHelper.unmarshallJsonToListOfObjects(String.class, String.format("[\\"%s\\",\\"%s\\"]", STRING_VALUE, STRING_VALUE_2)));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals(Exception.class, cause.getClass()); assertEquals("test", cause.getMessage());
assertNotNull("value", value); assertEquals("value", expectedValue, value);
assertEquals(FORMAT_FILE_TYPE_CODE, fileType.getFileTypeCode());
assertEquals(String.format("Input file \\"%s\\" does not contain the expected CSV file header.", inputCsvFile.toString()), e.getMessage());
assertEquals(securityFunction, resultSecurityFunction);
assertEquals(FILE_TYPE_CODE_WITH_EXTRA_SPACES, FILE_TYPE_KEY_WITH_EXTRA_SPACES_IN_NAME.getFileTypeCode()); assertEquals(FORMAT_FILE_TYPE_CODE, FILE_TYPE_KEY_WITH_EXTRA_SPACES_IN_NAME.getFileTypeCode());
assertEquals(job, result);
assertTrue(ex.getMessage().startsWith("No supported notification handler found for notificationType"));
assertEquals(null, businessObjectDataHelper.getPartitionValue(businessObjectDataEntity, 0)); assertEquals(PARTITION_VALUE, businessObjectDataHelper.getPartitionValue(businessObjectDataEntity, 1)); assertEquals(SUBPARTITION_VALUES.get(partitionColumnPosition - 2), businessObjectDataHelper.getPartitionValue(businessObjectDataEntity, partitionColumnPosition)); assertEquals(null, businessObjectDataHelper.getPartitionValue(businessObjectDataEntity, BusinessObjectDataEntity.MAX_SUBPARTITIONS + 2));
assertEquals(businessObjectDefinitionSubjectMatterExpertKeys, resultBusinessObjectDefinitionSubjectMatterExperts);
assertEquals(storage, result);
assertEquals(defaultValue, value);
assertEquals(ObjectNotFoundException.class, e.getClass()); assertEquals("The notification registration status \\"DOES_NOT_EXIST\\" doesn\'t exist.", e.getMessage());
assertThat("Destination is null.", destination, not(nullValue()));
assertEquals(response, result);
assertEquals(storageUnitNotificationRegistration, resultStorageUnitNotificationRegistration);
assertEquals(securityRole, result);
assertEquals(new SecurityRoleFunctionCreateRequest(new SecurityRoleFunctionKey(SECURITY_ROLE_2, SECURITY_FUNCTION_2)), securityRoleFunctionCreateRequest);
assertTrue(matcher.find());
assertEquals("test", value);
assertEquals(businessObjectDataNotificationRegistration, result);
assertEquals(attributeValueList, result);
assertNotNull("value", value); assertEquals("value", expectedValue, value);
assertEquals(searchIndexValidation, response);
assertEquals(businessObjectDefinitionEntity.getTagSearchScoreMultiplier(), TAG_SEARCH_SCORE_MULTIPLIER.setScale(3, RoundingMode.HALF_UP));
assertEquals(getResourceAsString("/exampleXml1"), exampleXml);
assertEquals(securityRoleFunctionEntity, result);
assertEquals(businessObjectDefinitionColumn, resultBusinessObjectDefinitionColumn);
assertEquals(STORAGE_UNIT_STATUS_2, storageUnitEntity.getStatus().getCode());
assertNull(result);
assertEquals(STORAGE_UNIT_STATUS, storageUnitEntity.getStatus().getCode());
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals(result.length(), 10);
assertEquals(expectedResult, actualResult);
assertEquals(securityFunction, deletedSecurityFunction);
assertNotNull("step not retuned", stepConfig); assertEquals("name not found", "step_name", stepConfig.getName()); assertEquals("jar not found", "jar_location", stepConfig.getHadoopJarStep().getJar());
assertEquals("value", configurationValue.getDefaultValue(), value);
assertEquals("Specified value \\"-1\\" does not fall within the range of 0 to 1800 seconds.", e.getMessage());
assertEquals(externalInterface, resultExternalInterface);
assertEquals(namespace, deletedNamespace);
assertEquals(securityRoleFunction, result);
assertEquals(SECURITY_FUNCTION_NAME_WITH_EXTRA_SPACES, SECURITY_FUNCTION_KEY_WITH_EXTRA_SPACES_IN_NAME.getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION, SECURITY_FUNCTION_KEY_WITH_EXTRA_SPACES_IN_NAME.getSecurityFunctionName());
assertEquals(defaultValue, value);
assertEquals(configurationValue.getDefaultValue(), value);
assertEquals(1, CollectionUtils.size(result));
assertEquals(new VolumeSpecification().withVolumeType(VOLUME_TYPE).withIops(IOPS).withSizeInGB(SIZE_IN_GB), result);
assertEquals(subjectMatterExpert, result);
assertThat("Error message not correct.", amazonServiceException.getMessage().contains(ERROR_MESSAGE), is(true));
assertEquals(new GlobalAttributeDefinitionKey(GLOBAL_ATTRIBUTE_DEFINITON_LEVEL, GLOBAL_ATTRIBUTE_DEFINITON_NAME), globalAttributeDefinitionKey);
assertEquals(XsdNamespaceContext.NS_URI_XSD, namespaceURI);
assertEquals(BUSINESS_OBJECT_DEFINITION_NAME, retentionExpirationExporterController.getBusinessObjectDefinitionDisplayName(businessObjectDefinition)); assertEquals(BUSINESS_OBJECT_DEFINITION_DISPLAY_NAME, retentionExpirationExporterController.getBusinessObjectDefinitionDisplayName(businessObjectDefinition));
assertTrue(resultPartitionKeyGroupKeys.getPartitionKeyGroupKeys().size() >= 2); assertTrue(resultPartitionKeyGroupKeys.getPartitionKeyGroupKeys() .contains(partitionKeyGroupServiceTestHelper.createPartitionKeyGroupKey(PARTITION_KEY_GROUP))); assertTrue(resultPartitionKeyGroupKeys.getPartitionKeyGroupKeys() .contains(partitionKeyGroupServiceTestHelper.createPartitionKeyGroupKey(PARTITION_KEY_GROUP_2))); assertEquals(partitionKeyGroupKeys, resultPartitionKeyGroupKeys);
assertEquals(namespace, resultNamespace);
assertEquals(allowedAttributeValuesInformation, response);
assertEquals(DISPLAY_NAME_FIELD, externalInterface.getDisplayName());
assertEquals(fileTypeKeys, resultFileTypeKeys);
assertEquals(globalAttributeDefinition, response);
assertEquals(businessObjectDefinition, result);
assertEquals(String.format("EMR cluster definition with name \\"%s\\" doesn\'t exist for namespace \\"%s\\".", EMR_CLUSTER_DEFINITION_NAME, NAMESPACE), e.getMessage());
assertEquals(new BusinessObjectFormatExternalInterface(ID, new BusinessObjectFormatExternalInterfaceKey(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, EXTERNAL_INTERFACE)), result);
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals(RegServerAccessParamsDto.builder().withRegServerPort(8080).withUseSsl(false).build(), regServerAccessParamsDto);
assertEquals(partitionKeyGroup, deletedPartitionKeyGroup);
assertEquals(jobDefinition, resultJobDefinition);
assertEquals("\\\\200\\\\001", hive13DdlGenerator.getDdlCharacterValue(String.valueOf((char) 128) + String.valueOf((char) 1)));
assertNotNull(result);
assertEquals(INTEGER_VALUE, HerdStringUtils.convertStringToInteger(null, INTEGER_VALUE)); assertEquals(INTEGER_VALUE, HerdStringUtils.convertStringToInteger(EMPTY_STRING, INTEGER_VALUE));
assertEquals(emrClusterDefinitionInformation, result);
assertEquals(new BigDecimal("1.00"), configurationHelper.getNonNegativeBigDecimalRequiredProperty(configurationValue, environment));
assertEquals(String.format("%s: %s", CredStashGetCredentialFailedException.class.getName(), ERROR_MESSAGE), e.getMessage());
assertNull(uploaderApp.parseCommandLineArguments(arguments, applicationContext));
assertNull(result);
assertEquals(STRING_VALUE, jsonHelper.unmarshallJsonToObject(String.class, String.format("\\"%s\\"", STRING_VALUE)));
assertThat("Result not equal to storage file entity.", result, is(storageFileEntity));
assertEquals(expectedPartitionValuesInformation, resultPartitionValuesInformation);
assertNotNull("step not retuned", stepConfig); assertEquals("name not found", "step_name", stepConfig.getName()); assertEquals("jar not found", "jar_location", stepConfig.getHadoopJarStep().getJar());
assertFalse(testFile.exists()); assertTrue(localTempPath.toFile().exists());
assertEquals(0, comparator.compare(null, null)); assertEquals(-1, comparator.compare(null, new BusinessObjectDataKey())); assertEquals(1, comparator.compare(new BusinessObjectDataKey(), null));
assertEquals(new BusinessObjectDefinitionKey(BDEF_NAMESPACE, BDEF_NAME), businessObjectDefinitionKey);
assertNull(result);
assertEquals( String.format("Missing configuration parameter value for key \\"%s\\".", ConfigurationValue.ACTIVITI_JOB_DEFINITION_ID_TEMPLATE.getKey()), e.getMessage());
assertNotNull(searchIndexEntity); assertNotNull(searchIndexEntity.getType()); assertEquals(SEARCH_INDEX_TYPE, searchIndexEntity.getType().getCode()); assertNotNull(searchIndexEntity.getStatus()); assertEquals(SEARCH_INDEX_STATUS, searchIndexEntity.getStatus().getCode()); assertNull(searchIndexEntity.getCreatedBy()); assertNull(searchIndexEntity.getCreatedOn()); assertNull(searchIndexEntity.getUpdatedBy()); assertNull(searchIndexEntity.getUpdatedOn());
assertEquals("value", configurationValue.getDefaultValue(), value);
assertEquals(DataBridgeApp.ReturnValue.FAILURE, uploaderApp.parseCommandLineArguments(new String[] {}, applicationContext));
assertEquals(emrClusterDefinitionEntity, result);
assertEquals(null, xsdParser.getAnnotation("does_not_exist")); assertEquals(null, xsdParser.getAnnotation("object", "does_not_exist")); assertEquals(null, xsdParser.getAnnotation("does_not_exist", "does_not_exist"));
assertEquals("bar", spelExpressionHelper.evaluate(expressionString, variables));
assertEquals(businessObjectFormatExternalInterfaceDescriptiveInformation, result);
assertEquals(globalAttributeDefinition, response);
assertEquals(businessObjectDefinition, result);
assertEquals(businessObjectDefinitionDescriptionSuggestion, response);
assertEquals(STRING_VALUE, resultValue);
assertEquals("Download business object data storage file single initiation response does not equal result", downloadBusinessObjectDataStorageFileSingleInitiationResponse, result);
assertEquals("Specified value \\"1900\\" does not fall within the range of 0 to 1800 seconds.", e.getMessage());
assertNotNull(storagePlatforms); assertTrue(storagePlatforms.getStoragePlatforms().size() >= 1); assertEquals(storagePlatforms, resultStoragePlatforms);
assertEquals(expectedPartitionValuesInformation, resultPartitionValuesInformation);
assertEquals(String.format("Unable to decrypt configuration value \\"%s\\" since it is not configured.", ConfigurationValue.ACTIVITI_JOB_DEFINITION_ID_TEMPLATE.getKey()), e.getMessage());
assertEquals(storageUnitNotificationRegistration, resultStorageUnitNotificationRegistration);
assertNull(result);
assertEquals(businessObjectDefinitionKeys, resultKeys);
assertEquals(EXTERNAL_INTERFACE, externalInterface.getExternalInterfaceKey().getExternalInterfaceName());
assertEquals(ToolsCommonConstants.ReturnValue.SUCCESS, accessValidatorApp.parseCommandLineArguments(arguments, applicationContext)); assertEquals("output", String .format(DataBridgeApp.BUILD_INFO_STRING_FORMAT, buildInformation.getBuildDate(), buildInformation.getBuildNumber(), buildInformation.getBuildOs(), buildInformation.getBuildUser()), output);
assertEquals(Boolean.TRUE, searchIndexEntity.getActive()); assertEquals(Boolean.FALSE, searchIndexEntity1.getActive());
assertEquals(businessObjectFormat, resultBusinessObjectFormat);
assertNotNull(securityFunctionKeys); assertEquals(ALL_SECURITY_FUNCTION_NAMES.size(), securityFunctionKeyList.size()); assertEquals(SECURITY_FUNCTION, securityFunctionKeyList.get(0).getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION_2, securityFunctionKeyList.get(1).getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION_3, securityFunctionKeyList.get(2).getSecurityFunctionName());
assertEquals(businessObjectDefinitionDescriptionSuggestion, response);
assertNotNull(applicationContext); assertNotNull(applicationContext.getBean(S3Operations.class));
assertEquals(new SecurityFunctionKey(SECURITY_FUNCTION_2), securityFunctionKey);
assertEquals(Arrays.asList(), actualList);
assertThat("Exception message is not correct.", objectNotFoundException.getMessage(), is(equalTo(String .format("Business object definition description suggestion status with code \\"%s\\" doesn\'t exist.", BDEF_DESCRIPTION_SUGGESTION_STATUS))));
assertEquals(job, result);
assertNull(result);
assertEquals(businessObjectDataDdlCollectionResponse, result);
assertEquals("A&lt;&gt;&amp;&quot;&apos;&#x1;\\t", writer.toString());
assertEquals("A global attribute definition key must be specified.", e.getMessage());
assertEquals(new SecurityRoleFunction(ID, securityRoleFunctionKey), result);
assertEquals(getTestXml().replaceAll("\\\\s+",""), xmlHelper.objectToXml(getTestBuildInformation(), true).replaceAll("\\\\s+",""));
assertEquals(businessObjectDataKeys, result);
assertEquals(new SpotProvisioningSpecification().withTimeoutDurationMinutes(TIMEOUT_DURATION_MINUTES).withTimeoutAction(TIMEOUT_ACTION) .withBlockDurationMinutes(BLOCK_DURATION_MINUTES).withAllocationStrategy(ALLOCATION_STRATEGY_1), result);
assertEquals(expectedResult, actualResult);
assertEquals(new Integer(attributeValue), value);
assertEquals(String.format("File \\"%s\\" is not a valid file that can be read as a manifest. Is it a directory?", testDirectory.getName()), e.getMessage());
assertNull(result);
assertEquals(partitionKeyGroup, resultPartitionKeyGroup);
assertEquals(searchIndexActivation, response);
assertEquals(new OnDemandProvisioningSpecification().withAllocationStrategy(ALLOCATION_STRATEGY_1), result);
assertEquals(getTestXml(), xmlHelper.objectToXml(getTestBuildInformation()));
assertEquals(businessObjectDefinitionEntity.getTagSearchScoreMultiplier(), BigDecimal.ONE.setScale(3, RoundingMode.HALF_UP));
assertEquals(businessObjectDefinition, result);
assertEquals(Timestamp.valueOf("2015-12-21 12:13:11"), HerdDateUtils.addMinutes(testTimestamp, minutesDiff)); assertEquals(testTimestamp, HerdDateUtils.addMinutes(testTimestamp, 0)); assertEquals(Timestamp.valueOf("2015-12-21 08:55:11"), HerdDateUtils.addMinutes(testTimestamp, -minutesDiff));
assertThat("Result does not equal businessObjectDefinitionDescriptionSuggestionStatusEntity.", result, is(equalTo(businessObjectDefinitionDescriptionSuggestionStatusEntity)));
assertNull(emrPricingHelper.getEmrClusterPriceWithLowestCoreInstancePrice(Collections.emptyList()));
assertEquals(new ArrayList<>(), result);
assertNotNull(awsClientFactory.getSesClient( new AwsParamsDto(AWS_ASSUMED_ROLE_ACCESS_KEY, AWS_ASSUMED_ROLE_SECRET_KEY, AWS_ASSUMED_ROLE_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(storage, result);
assertEquals(IllegalArgumentException.class, e.getClass()); assertEquals("Error parsing SpEL \\"this is an invalid expression\\"", e.getMessage());
assertEquals(UnsupportedOperationException.class, e.getClass()); assertEquals("Unknown prefix \\"foo\\"", e.getMessage());
assertEquals(businessObjectFormat, result);
assertEquals(new AttributeValueListKey(ATTRIBUTE_VALUE_LIST_NAMESPACE, ATTRIBUTE_VALUE_LIST_NAME), attributeValueListKey);
assertEquals(userAuthorizations, resultUserAuthorizations);
assertEquals(storage, result);
assertEquals(securityRoleEntity, result);
assertEquals(String .format("S3 storage unit in \\"%s\\" storage must have \\"%s\\" status, but it actually has \\"%s\\" status. Business object data: {%s}", STORAGE_NAME, StorageUnitStatusEntity.RESTORED, STORAGE_UNIT_STATUS, BUSINESS_OBJECT_DATA_KEY_AS_STRING), e.getMessage());
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(Arrays.asList(INTEGER_VALUE, INTEGER_VALUE_2), result); assertNotNull(result); assertEquals(0, result.size());
assertEquals(Collections.singletonList( new EbsBlockDeviceConfig().withVolumeSpecification(new VolumeSpecification().withVolumeType(VOLUME_TYPE).withIops(IOPS).withSizeInGB(SIZE_IN_GB)) .withVolumesPerInstance(VOLUMES_PER_INSTANCE)), result);
assertEquals(new SubjectMatterExpert(updatedSubjectMatterExpertKey, subjectMatterExpertContactDetails), result);
assertEquals("result", "A", result);
assertEquals("result", "A|B", result);
assertEquals(String.format("Failed to read JSON from the URL: url=\\"%s\\"", MockUrlOperationsImpl.MOCK_URL_MALFORMED_URL_EXCEPTION), e.getMessage());
assertThat("Exception message is not correct.", objectNotFoundException.getMessage(), is(equalTo(String.format("Tag with code \\"%s\\" doesn\'t exist for tag type \\"%s\\".", tagKey.getTagCode(), tagKey.getTagTypeCode()))));
assertNull(result);
assertThat("Exception message not equal to expected exception message.", objectNotFoundException.getMessage(), is(String .format("Storage file \\"%s\\" doesn\'t exist in \\"%s\\" storage. Business object data: {%s}", filePath, storageUnitEntity.getStorage().getName(), businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey))));
assertEquals(searchIndexStatusEntity, searchIndexStatusDaoHelper.getSearchIndexStatusEntity(SEARCH_INDEX_STATUS)); assertEquals(searchIndexStatusEntity, searchIndexStatusDaoHelper.getSearchIndexStatusEntity(SEARCH_INDEX_STATUS.toUpperCase())); assertEquals(searchIndexStatusEntity, searchIndexStatusDaoHelper.getSearchIndexStatusEntity(SEARCH_INDEX_STATUS.toLowerCase())); assertEquals(String.format("Search index status with code \\"%s\\" doesn\'t exist.", I_DO_NOT_EXIST), e.getMessage());
assertEquals(emrClusterDefinitionInformation, result);
assertEquals("A tag key must be specified.", e.getMessage());
assertNotNull("step not retuned", stepConfig); assertEquals("name not found", "step_name", stepConfig.getName()); assertEquals("jar not found", "jar_location", stepConfig.getHadoopJarStep().getJar());
assertEquals(new BigDecimal("0"), configurationHelper.getNonNegativeBigDecimalRequiredProperty(configurationValue, environment));
assertEquals(expectedPartitionValuesInformation, resultPartitionValueInformation);
assertEquals(entry.getValue(), hive13DdlGenerator.escapeSingleQuotes((String) entry.getKey()));
assertTrue("Log4J output file exists, but shouldn\'t.", Files.notExists(outputPath)); assertTrue("Log4J output file doesn\'t exist, but should.", Files.exists(outputPath));
assertEquals("thrown exception type", IllegalStateException.class, e.getClass()); assertEquals("thrown exception message", "targetType is required", e.getMessage());
assertEquals(JSON_STRING, result);
assertEquals(expectedErrMsg, e.getMessage());
assertEquals(String.format("File \\"%s\\" doesn\'t exist.", testFile.getName()), e.getMessage());
assertEquals("A business object format schema backwards compatibility changes update request must be specified.", e.getMessage()); assertEquals( "allowNonBackwardsCompatibleChanges flag in business object format schema backwards compatibility changes update request must be specified.", e.getMessage());
assertEquals("testThrowIoException", e.getMessage());
assertEquals("A business object data attributes update request must be specified.", e.getMessage()); assertEquals("A list of business object data attributes must be specified.", e.getMessage());
assertEquals(1, authorizedNamespaces.size()); assertTrue(authorizedNamespaces.contains("namespace"));
assertEquals(null, value);
assertEquals(AccessDeniedException.class, e.getClass()); assertEquals("Current user does not have \\"[READ]\\" permission(s) to the namespace \\"foo\\"", e.getMessage());
assertEquals(businessObjectFormat, updatedBusinessObjectFormat);
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(businessObjectFormatExternalInterface, result);
assertEquals(String.format("[ activitiProcessDefinitionId=\\"%s\\" activitiProcessInstanceId=\\"%s\\" ]", processDefinitionId, processInstanceId), result);
assertEquals("Invalid search result.", e.getMessage());
assertEquals(BOOLEAN_DEFAULT_VALUE, result);
assertEquals(emrCluster, result);
assertEquals("1 Minute", result);
assertEquals(searchIndex, response);
assertEquals("", hive13DdlGenerator.getDdlCharacterValue(""));
assertEquals(businessObjectDefinitionDescriptionSuggestionKeys, resultBusinessObjectDefinitionDescriptionSuggestionKeys);
assertEquals(String.format("Failed to resolve the SQS queue: \\"%s\\".", ""), ex.getMessage());
assertEquals(userNamespaceAuthorization, resultUserNamespaceAuthorization);
assertEquals("waitForSeconds query parameter is required.", e.getMessage());
assertEquals(0, authorizedNamespaces.size());
assertEquals(expectedList, resultList);
assertEquals("&lt;&gt;", writer.toString());
assertTrue(propertiesHelper.isBlankOrNull(INVALID_PROPERTY));
assertEquals(NAMESPACE + "." + EMR_CLUSTER_DEFINITION_NAME + "." + EMR_CLUSTER_NAME, clusterName);
assertThat("Result size does not equal zero.", result.size(), is(equalTo(0)));
assertThat("Result size not equal to two.", result.size(), is(2)); assertThat("File size not equal.", result.get(0).getFileSizeBytes(), is(FILE_SIZE)); assertThat("Row count not equal.", result.get(0).getRowCount(), is(ROW_COUNT)); assertThat("File size not equal.", result.get(1).getFileSizeBytes(), is(FILE_SIZE_2)); assertThat("Row count not equal.", result.get(1).getRowCount(), is(ROW_COUNT_2));
assertEquals(securityRole, result);
assertEquals(businessObjectDataAvailability, result);
assertEquals("thrown exception type", IllegalStateException.class, e.getClass()); assertEquals("thrown exception message", "configurationValue is required", e.getMessage());
assertEquals(new TagKey(TAG_TYPE, TAG_CODE), tagKey);
assertEquals(String.format("Global attribute definition with level \\"%s\\" doesn\'t exist for global attribute definition name \\"%s\\".", globalAttributeDefinitionKey.getGlobalAttributeDefinitionLevel(), globalAttributeDefinitionKey.getGlobalAttributeDefinitionName()), e.getMessage());
assertEquals(businessObjectData, result);
assertEquals("fragment\\nwith no html", result);
assertEquals(new BusinessObjectDataStorageUnitKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION, STORAGE_NAME), result);
assertEquals(businessObjectDefinitionColumnSearchResponse, resultSearchResponse);
assertTrue("\\"Failed to resolve the SQS queue:\\" error message doesn\'t match", ex.getMessage().startsWith("Failed to resolve the SQS queue:"));
assertThat("Result is null.", result, is(notNullValue()));
assertEquals(storage, result);
assertEquals(userNamespaceAuthorization, response);
assertEquals(FILE_TYPE_CODE_WITH_EXTRA_SPACES, FILE_TYPE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getFileTypeCode()); assertEquals(FORMAT_FILE_TYPE_CODE, FILE_TYPE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME.getFileTypeCode());
assertTrue("Log4J output file doesn\'t exist, but should.", Files.exists(outputPath));
assertEquals(String .format("Attribute value list with name \\"%s\\" doesn\'t exist for namespace \\"%s\\".", ATTRIBUTE_VALUE_LIST_NAME, ATTRIBUTE_VALUE_LIST_NAMESPACE), e.getMessage());
assertEquals(BOOLEAN_VALUE, result);
assertThat("Exception message not equal to expected exception message.", objectNotFoundException.getMessage(), is(String.format("Storage file \\"%s\\" doesn\'t exist in \\"%s\\" storage.", filePath, STORAGE_NAME)));
assertEquals(new ArrayList<>(), result);
assertEquals(customDdl, resultCustomDdl);
assertThat("Destination is null.", destination, not(nullValue()));
assertFalse(testFile.exists()); assertFalse(localTempPath.toFile().exists());
assertEquals("Either start registration date or end registration date must be specified.", e.getMessage());
assertEquals(messageTypeEntity, messageTypeDaoHelper.getMessageTypeEntity(MESSAGE_TYPE)); assertEquals(messageTypeEntity, messageTypeDaoHelper.getMessageTypeEntity(MESSAGE_TYPE.toUpperCase())); assertEquals(messageTypeEntity, messageTypeDaoHelper.getMessageTypeEntity(MESSAGE_TYPE.toLowerCase())); assertEquals(String.format("Message type with code \\"%s\\" doesn\'t exist.", I_DO_NOT_EXIST), e.getMessage());
assertEquals(response, result);
assertEquals("result", "", result);
assertEquals("Invalid search result.", e.getMessage());
assertTrue(targetLocalDirectory.mkdirs());
assertEquals(SecurityException.class.getName(), e.getMessage());
assertEquals(INTEGER_VALUE, result);
assertEquals(new InstanceFleetProvisioningSpecifications().withSpotSpecification( new SpotProvisioningSpecification().withAllocationStrategy(ALLOCATION_STRATEGY_1).withBlockDurationMinutes(BLOCK_DURATION_MINUTES) .withTimeoutAction(TIMEOUT_ACTION).withTimeoutDurationMinutes(TIMEOUT_DURATION_MINUTES)) .withOnDemandSpecification(new OnDemandProvisioningSpecification().withAllocationStrategy(ALLOCATION_STRATEGY_2)), result);
assertNotNull("step not returned", stepConfig); assertEquals("name not found", "step_name", stepConfig.getName()); assertEquals("jar not found", "jar_location", stepConfig.getHadoopJarStep().getJar()); assertNotNull("arguments not found", stepConfig.getHadoopJarStep().getArgs());
assertEquals(Boolean.TRUE, searchIndexEntity.getActive());
assertEquals(storageUnitEntity, result);
assertEquals(storagePolicy, resultStoragePolicy);
assertEquals(externalInterfaceKeys, resultExternalInterfaceKeys);
assertEquals(new Integer(attributeValue), value);
assertEquals(businessObjectFormatExternalInterface, result);
assertEquals(emrHadoopJarStep, result);
assertEquals("Response not equal to expected configuration entry keys response.", configurationEntryKeys, response);
assertEquals(fileType, resultFileType);
assertEquals(String .format("The business object format has a required attribute \\"%s\\" which was not specified or has a value which is blank.", ATTRIBUTE_NAME), e.getMessage());
assertEquals("configurationValue is required", e.getMessage());
assertEquals(String.format("https: retentionExpirationExporterController.getBusinessObjectDefinitionUdcUri(UDC_SERVICE_HOSTNAME, NAMESPACE, BUSINESS_OBJECT_DEFINITION_NAME)); assertEquals("https: .getBusinessObjectDefinitionUdcUri(UDC_SERVICE_HOSTNAME, NAMESPACE + ",\\"", BUSINESS_OBJECT_DEFINITION_NAME + ",\\""));
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(new BusinessObjectDefinitionKey(BDEF_NAMESPACE, BDEF_NAME), response);
assertEquals("configurationValue is required", e.getMessage());
assertEquals(IllegalStateException.class, e.getClass()); assertEquals("Storage attribute \\"" + attributeName + "\\" must be a valid integer. Actual value is \\"" + attributeValue + "\\"", e.getMessage());
assertEquals(new Integer(attributeValue), value);
assertEquals(allowedAttributeValuesInformation, response);
assertFalse(response);
assertEquals(new Integer(attributeValue), value);
assertNull(result);
assertEquals(calendarStringRepresentation, adapter.marshal(calendar));
assertEquals("The namespace \\"namespace\\" does not have access to the following IAM roles: [iamRoleName1, iamRoleName2]", e.getMessage());
assertNull(parameter.getName()); assertEquals(parameter.getValue(), "val"); assertEquals(parameter.getValue(), "****");
assertEquals(buildInformation, result);
assertNull(SecurityContextHolder.getContext().getAuthentication());
assertEquals("result", "A|B", result);
assertEquals(subAggregation, result);
assertThat("Function is null.", illegalStateException.getMessage(), is("SQS queue name not found. Ensure the \\"search.index.update.sqs.queue.name\\" configuration entry is configured."));
assertEquals(0, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(-1, comparator.compare(businessObjectDataKey1, businessObjectDataKey2)); assertEquals(1, comparator.compare(businessObjectDataKey2, businessObjectDataKey1));
assertEquals(response, resultResponse);
assertEquals(businessObjectDefinitionColumn, updatedBusinessObjectDefinitionColumn);
assertEquals(MockUrlOperationsImpl.MOCK_JSON_STRING, urlHelper.parseJsonObjectFromUrl(MockUrlOperationsImpl.MOCK_URL_VALID).toJSONString());
assertEquals("fragment with html", result);
assertEquals(MockKmsOperationsImpl.MOCK_PLAIN_TEXT, resultDecryptedValue);
assertNotNull(awsClientFactory.getEmrClient( new AwsParamsDto(NO_AWS_ACCESS_KEY, NO_AWS_SECRET_KEY, NO_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT, AWS_REGION_NAME_US_EAST_1)));
assertEquals(EXTERNAL_INTERFACE, externalInterface.getExternalInterfaceKey().getExternalInterfaceName());
assertFalse(wildcardHelper.matches("ab", "**")); assertTrue(wildcardHelper.matches("ab*", "**"));
assertEquals(indexSearchResponse, result);
assertEquals("fragment with <hlt>no</hlt> html", result);
assertEquals(String.format("Unable to read file \\"%s\\". Check permissions.", testFile.getName()), e.getMessage());
assertEquals(resultUserNamespaceAuthorizations, userNamespaceAuthorizations);
assertEquals("fragment with no html", result);
assertThat("Result is null.", result, is(notNullValue()));
assertNotNull(result); assertEquals(0, result.size());
assertEquals(testApplicationName, argParser.getApplicationName());
assertEquals(businessObjectDefinitionColumn, deletedBusinessObjectDefinitionColumn);
assertEquals(customDdlKeys, resultCustomDdlKeys);
assertEquals("thrown exception type", HttpErrorResponseException.class, e.getClass()); assertEquals("httpErrorResponseException responseMessage", expectedErrorMessage, httpErrorResponseException.getResponseMessage()); assertEquals("httpErrorResponseException statusCode", expectedStatusCode, httpErrorResponseException.getStatusCode()); assertEquals("httpErrorResponseException statusDescription", expectedReasonPhrase, httpErrorResponseException.getStatusDescription()); assertEquals("httpErrorResponseException message", "Failed to add storage files", httpErrorResponseException.getMessage());
assertNotNull(storagePlatform); assertTrue(StoragePlatformEntity.S3.equals(storagePlatform.getName())); assertEquals(storagePlatform, resultStoragePlatform);
assertNotNull(externalInterfaceKeys); assertEquals(ALL_EXTERNAL_INTERFACE_NAMES.size(), externalInterfaceKeyList.size()); assertEquals(EXTERNAL_INTERFACE, externalInterfaceKeyList.get(0).getExternalInterfaceName()); assertEquals(EXTERNAL_INTERFACE_2, externalInterfaceKeyList.get(1).getExternalInterfaceName()); assertEquals(EXTERNAL_INTERFACE_3, externalInterfaceKeyList.get(2).getExternalInterfaceName());
assertEquals(businessObjectDataPartitions, result);
assertEquals(businessObjectDefinitionColumn, resultBusinessObjectDefinitionColumn);
assertEquals(MockUrlOperationsImpl.MOCK_JSON_STRING, urlHelper.parseJsonObjectFromUrl(MockUrlOperationsImpl.MOCK_URL_VALID).toJSONString());
assertEquals(String.format("\\"%s\\"", STRING_VALUE), jsonHelper.objectToJson(STRING_VALUE));
assertThat("Function is null.", illegalStateException.getMessage(), is("SQS queue name not found. Ensure the \\"search.index.update.sqs.queue.name\\" configuration entry is configured."));
assertEquals("Response not equal to expected configuration entry response.", configurationEntry, response);
assertEquals(String.format("\\"%s\\" must be a valid boolean value of \\"true\\" or \\"false\\".", VARIABLE_NAME), e.getMessage());
assertEquals(new EbsConfiguration().withEbsBlockDeviceConfigs( new EbsBlockDeviceConfig().withVolumeSpecification(new VolumeSpecification().withVolumeType(VOLUME_TYPE).withIops(IOPS).withSizeInGB(SIZE_IN_GB)) .withVolumesPerInstance(VOLUMES_PER_INSTANCE)).withEbsOptimized(EBS_OPTIMIZED), result);
assertEquals(job, result);
assertEquals("An attribute value list key must be specified.", e.getMessage());
assertEquals(VALUE, jsonHelper.getKeyValue(jsonObject, KEY, String.class)); assertEquals(String.format("Failed to get \\"%s\\" key value from JSON object.", I_DO_NOT_EXIST), e.getMessage()); assertEquals(String.format("Failed to cast \\"%s\\" key value to %s.", VALUE, BigDecimal.class.getName()), e.getMessage());
assertThat("Error message not correct.", objectNotFoundException.getMessage().contains(MESSAGE_TEXT), is(true));
assertEquals(Timestamp.valueOf("2015-12-21 00:00:00.0"), result);
assertEquals(NullPointerException.class.getName(), errorInformation.getMessage());
assertNotNull(securityFunctionKeys); assertEquals(0, securityFunctionKeys.getSecurityFunctionKeys().size());
assertNull(businessObjectDataHelper.businessObjectDataKeyToString(null));
assertEquals(String.format("Failed to convert \\"%s\\" value to %s.", INVALID_INTEGER_VALUE, Integer.class.getName()), e.getMessage());
assertNotNull(resultValue); assertFalse(resultValue); assertNotNull(resultValue); assertTrue(resultValue); assertNotNull(resultValue); assertTrue(resultValue);
assertEquals(String.format("Configuration \\"%s\\" must have a value.", ConfigurationValue.HERD_ENVIRONMENT.getKey()), e.getMessage());
assertEquals(securityRole, result);
assertEquals(tagSearchResponse, resultTagSearchResponse);
assertEquals(businessObjectDataNotificationRegistration, result);
assertEquals(String.format("\\"%s\\" must be specified.", VARIABLE_NAME), e.getMessage());
assertEquals(jobDefinition, resultJobDefinition);
assertTrue(wildcardHelper.matches("ab", "*b"));
assertEquals(StorageEntity.MANAGED_STORAGE, value);
assertThat(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE), is(true)); assertThat(namespacePermissions.contains(NamespacePermissionEnum.GRANT), is(true)); assertThat(namespacePermissions.contains(NamespacePermissionEnum.READ), is(true)); assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE), is(true)); assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE_ATTRIBUTE), is(true)); assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE_DESCRIPTIVE_CONTENT), is(true));
assertEquals(businessObjectDefinitionTag, result);
assertEquals(securityRoleFunction, result);
assertEquals("Invalid search result.", e.getMessage());
assertNull(argParser.getFileValue(fileOpt)); assertEquals(testDefaultValue, argParser.getFileValue(fileOpt, testDefaultValue)); assertNotNull(resultValue); assertEquals(inputValue, resultValue); assertNotNull(resultValue); assertEquals(inputValue, resultValue); assertNotNull(resultValue); assertEquals(inputValue, resultValue);
assertEquals("\\\\012", hive13DdlGenerator.getDdlCharacterValue("\\n"));
assertEquals(expectedErrMsg, e.getMessage());
assertEquals(new ArrayList<>(), result);
assertEquals(attributeValueListEntity, result);
assertEquals(UnsupportedOperationException.class, e.getClass()); assertEquals("Unknown namespaceURI \\"" + XsdNamespaceContext.NS_URI_XSD + "\\"", e.getMessage());
assertTrue(e instanceof IllegalArgumentException); assertTrue(e.getMessage().contains("Valid date or date and time format must be used when specifying values for start/end registration dates.")); assertTrue(e instanceof IllegalArgumentException); assertTrue(e.getMessage().contains("Valid date or date and time format must be used when specifying values for start/end registration dates."));
assertEquals("thrown exception type", HttpErrorResponseException.class, e.getClass()); assertEquals("httpErrorResponseException responseMessage", expectedErrorMessage, httpErrorResponseException.getResponseMessage()); assertEquals("httpErrorResponseException statusCode", expectedStatusCode, httpErrorResponseException.getStatusCode()); assertEquals("httpErrorResponseException statusDescription", expectedReasonPhrase, httpErrorResponseException.getStatusDescription()); assertEquals("httpErrorResponseException message", "Failed to add storage files", httpErrorResponseException.getMessage());
assertEquals(String.format("Error decrypting configuration value \\"%s\\".", ConfigurationValue.ACTIVITI_JOB_DEFINITION_ID_TEMPLATE.getKey()), e.getMessage());
assertEquals(Lists.newArrayList(new Configuration().withClassification(classification).withConfigurations(expectedConfigurations).withProperties(null)), result);
assertEquals(jobSummaries, result);
assertEquals(attributeValueList, result);
assertEquals(new GlobalAttributeDefinitionKeys(Arrays .asList(new GlobalAttributeDefinitionKey(GLOBAL_ATTRIBUTE_DEFINITON_LEVEL, GLOBAL_ATTRIBUTE_DEFINITON_NAME), new GlobalAttributeDefinitionKey(GLOBAL_ATTRIBUTE_DEFINITON_LEVEL, GLOBAL_ATTRIBUTE_DEFINITON_NAME_2))), response);
assertEquals(String.format("Failed to unmarshall \\"%s\\" configuration value to %s.", CONFIGURATION_KEY, String.class.getName()), e.getMessage());
assertEquals(String .format("Could not find storage unit in \\"%s\\" storage for the business object data {%s}.", STORAGE_NAME, BUSINESS_OBJECT_DATA_KEY_AS_STRING), e.getMessage());
assertEquals(externalInterfaceEntity, result);
assertEquals(systemJobRunResponse, resultSystemJobRunResponse);
assertEquals(String .format("Could not find storage unit in \\"%s\\" storage for the business object data {%s}.", STORAGE_NAME, BUSINESS_OBJECT_DATA_KEY_AS_STRING), e.getMessage());
assertEquals(expectedErrMsg, e.getMessage());
assertEquals(1, context.getCount());
assertEquals(1, context.getEntities().length);
assertNotNull(collector);
assertEquals(0, context.getReusableEntitiesCount()); assertEquals(2, context.getReusableEntitiesCount());
assertEquals(2, context.getReusableEntitiesCount());
assertEquals(1, cpool[0].size()); assertTrue(cpool[0].empty());
assertTrue(context.hasEntity(entity));
assertEquals(1, cpool[0].size()); assertTrue(cpool[0].empty());
assertEquals(1, context.getRetainedEntitiesCount()); assertEquals(1, context.getRetainedEntitiesCount());
assertEquals(1, group.getCount()); assertEquals(1, group.getCount());
assertEquals(0, context.getCount());
assertEquals(1, context.OnEntityCreated.size()); assertEquals(0, context.OnEntityCreated.size());
assertEquals(position2, nc);
assertEquals(0, context.getEntities().length);
assertEquals(1000, EMPTY_CONFIG.getBulkFlushMaxActions()); assertEquals(500, config.getBulkFlushMaxActions());
assertEquals("fake-0-1234", req.key.getId().toString()); assertEquals(Action.INDEX, req.key.getAction()); assertEquals(4L, req.key.getPartitionTsUnixMs().longValue()); assertEquals(3L, req.key.getEventTsUnixMs().longValue()); assertEquals(VersionType.FORCE, req.key.getVersionType()); assertEquals(5L, req.key.getVersion().longValue());
assertEquals("foo", req.key.getId().toString()); assertEquals(Action.DELETE, req.key.getAction()); assertEquals(99L, req.key.getPartitionTsUnixMs().longValue()); assertNull("Do not default event time", req.key.getEventTsUnixMs()); assertNull("No version set", req.key.getVersion()); assertNull("No version type set", req.key.getVersionType());
assertEquals(requestKey.getAction(), Action.INDEX); assertEquals(99L, requestKey.getPartitionTsUnixMs().longValue()); assertEquals(99L, requestKey.getEventTsUnixMs().longValue()); assertEquals("testId", requestKey.getId().toString());
assertEquals(expectedUser, user);
assertEquals("blah", req.key.getId().toString()); assertEquals(Action.UPDATE, req.key.getAction()); assertNull("Do not default partition time", req.key.getPartitionTsUnixMs()); assertNull("Do not default event time", req.key.getEventTsUnixMs()); assertNull("No version set", req.key.getVersion()); assertNull("No version type set", req.key.getVersionType()); assertEquals("{\\"doc\\":{}}", req.document);
assertEquals("update", action.getBulkMethodName()); assertEquals("myId", action.getId()); assertEquals("fakeindex", action.getIndex()); assertEquals("faketype", action.getType()); assertEquals("external", action.getParameter(Parameters.VERSION_TYPE).toArray()[0]); assertEquals(123L, action.getParameter(Parameters.VERSION).toArray()[0]); assertEquals("{}", action.getData(new Gson()));
assertEquals("fake-0-1234", req.key.getId().toString()); assertEquals(Action.INDEX, req.key.getAction()); assertEquals(4L, req.key.getPartitionTsUnixMs().longValue()); assertEquals(3L, req.key.getEventTsUnixMs().longValue()); assertEquals(VersionType.EXTERNAL, req.key.getVersionType()); assertEquals(5L, req.key.getVersion().longValue());
assertEquals("testId", outHdr.get("id").toString()); assertEquals(99L, ((Long)outHdr.get("time")).longValue()); assertEquals(21L, ((Long)outHdr.get("created")).longValue());
assertEquals(0, ((Map) gauge.getValue().get("data")).size()); assertEquals(0, ((Map) gauge.getValue().get("data")).size()); assertEquals(3, ((Map<String, Long>) gauge.getValue().get("data")).size()); assertEquals( new HashSet<String>(Arrays.asList("key3", "key4", "key5")), ((Map<String, Long>) gauge.getValue().get("data")).keySet());
assertFalse(EMPTY_CONFIG.getBulkFlushIntervalMS().isPresent()); assertEquals(500, config.getBulkFlushIntervalMS().get().intValue());
assertEquals("yo yo", joined.get("foo")); assertEquals(5, joined.get("bar")); assertEquals("blah blah", joined.get("charlie"));
assertEquals(requestKey.getAction(), Action.INDEX); assertEquals(99L, requestKey.getPartitionTsUnixMs().longValue()); assertEquals(99L, requestKey.getEventTsUnixMs().longValue()); assertEquals("testId", requestKey.getId().toString());
assertTrue(metrics.processed.getOneMinuteRate() > 0); assertTrue(metrics.dropped.getOneMinuteRate() > 0); assertFalse(errHandler.hasTooManyErrors(metrics));
assertEquals("fakeStream-56789-12345", myTask.getMessageIdFromSource(envelope));
assertEquals("hi", obj.get("foo")); assertEquals("hello", obj.get("bar")); assertTrue(jsonStr.contains("\\"bar\\":\\"hello\\""));
assertEquals("testId", outHdr.get("id").toString()); assertEquals(99L, ((Long)outHdr.get("time")).longValue()); assertEquals(21L, ((Long)outHdr.get("created")).longValue());
assertEquals("fake-0-1234", req.key.getId().toString()); assertEquals(Action.INDEX, req.key.getAction()); assertEquals(tsNowMs, req.key.getPartitionTsUnixMs().longValue()); assertNull("Do not default event time", req.key.getEventTsUnixMs()); assertNull("Version not set", req.key.getVersion()); assertNull("Version type not set", req.key.getVersionType());
assertEquals("delete", action.getBulkMethodName()); assertEquals("myId", action.getId()); assertEquals("fakeindex", action.getIndex()); assertEquals("faketype", action.getType()); assertEquals("external", action.getParameter(Parameters.VERSION_TYPE).toArray()[0]); assertEquals(123L, action.getParameter(Parameters.VERSION).toArray()[0]); assertEquals(null, action.getData(new Gson()));
assertEquals("testId", outHdr.get("id").toString()); assertEquals(99L, ((Long)outHdr.get("timestamp")).longValue()); assertEquals(21L, ((Long)outHdr.get("created")).longValue());
assertEquals("fake-0-1234", req.key.getId().toString()); assertEquals(Action.INDEX, req.key.getAction()); assertEquals(tsNowMs, req.key.getPartitionTsUnixMs().longValue()); assertNull("Do not default event time", req.key.getEventTsUnixMs()); assertNull("Version not set", req.key.getVersion()); assertNull("Version type not set", req.key.getVersionType());
assertFalse(MultiMapFactory.make() instanceof ChangeHandledMultiMap);
assertEquals(PMML_MODEL.REGRESSION_MODEL, executor.getPMMLModelType());
assertTrue(kbuilderImpl.getPackageNames().isEmpty()); assertNull(kbuilderImpl.getPackage(PACKAGE_NAME)); assertEquals(1, kbuilderImpl.getPackageNames().size()); assertNotNull(kbuilderImpl.getPackage(PACKAGE_NAME));
assertEquals(MODEL_NAME, kiePMMLDroolsModel.getName()); assertEquals(EXTENSIONS, kiePMMLDroolsModel.getExtensions()); assertEquals(getSanitizedPackageName(MODEL_NAME), kiePMMLDroolsModel.getKModulePackageName());
assertNotNull(retrieved);
assertNotNull(retrieved); assertEquals(scorecardModel.getModelName(), retrieved.getName()); assertEquals(TARGET_FIELD, retrieved.getTargetField());
assertNotNull(result); assertTrue(((Collection<?>) result).isEmpty());
assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(kiePmmlModel.sourcesMap.containsKey(expected)); assertTrue(generatedRuleMappers.contains(expected));
assertEquals(factIdentifier.getClassNameWithoutPackage(), "Test");
assertNotNull(text); assertEquals(text,"((( mTF1 == false ) && ( vTF1 > 100 )) || (( mTF2 == false ) && ( vTF2 not in ( 1, 8, 16, 21 ) )))");
assertEquals(indexToCheck, indexRetrieved); assertEquals(indexToCheck, indexRetrieved);
assertNotEquals(column1, column2);
assertNotNull( map );
assertThat( ifBase, is( instanceOf( IfExpressionNode.class ) ) ); assertThat( ifBase.getText(), is( inputExpression ) ); assertThat( ifBase.getResultType(), is( BuiltInType.STRING ) ); assertThat( ifExpr.getCondition().getText(), is( "applicant.age < 18" ) ); assertThat( ifExpr.getThenExpression().getText(), is( "\\"declined\\"" ) ); assertThat( ifExpr.getElseExpression().getText(), is( "\\"accepted\\"" ) );
assertEquals(3, retrieved.size());
assertNotNull(retrieved); assertEquals(1, retrieved.size()); assertTrue(retrieved.get(0) instanceof TestingModelImplementationProvider);
assertNotNull(result); assertTrue(((Collection<?>) result).isEmpty());
assertEquals(LocalTime.of(0, 1, 0), parsedResult.query(TemporalQueries.localTime())); assertEquals(ZoneId.of("Etc/UTC"), parsedResult.query(TemporalQueries.zone()));
assertEquals(snippet, result);
assertNotNull(builder); assertNotNull(kiePMMLSessionUtils);
assertTrue(true);
assertNotNull(retrieved); assertEquals(types, retrieved.getTypes()); assertFalse(retrieved.getRules().isEmpty());
assertThat( bool, is( instanceOf( BooleanNode.class ) ) ); assertThat( bool.getResultType(), is( BuiltInType.BOOLEAN ) );
assertEquals( 2, result.length ); assertEquals( expected1, result[0] ); assertEquals( expected2, result[1] );
assertEquals(PMML_MODEL.TREE_MODEL, PROVIDER.getPMMLModelType());
assertNotEquals( 0, con.hashCode() );
assertEquals(ireader.getEncoding(), iresource.getEncoding()); assertEquals(ireader.getEncoding(), iresource.getEncoding());
assertTrue(e instanceof KiePMMLInternalException);
assertNotNull(retrieved); assertEquals(expected, retrieved.asString());
assertEquals(1, variableMap.keySet().size()); assertEquals("value", interpolationVariable.getVarName()); assertEquals("fieldName", interpolationVariable.getFactField()); assertEquals("fieldType", interpolationVariable.getDataType()); assertEquals("==", interpolationVariable.getOperator());
assertEquals(1, rules.size());
assertNotNull( varList ); assertEquals( 3, varList.size() ); assertEquals( "Var1", var.getClassName() ); assertEquals( "Var3", var.getClassName() ); assertEquals( "var3", var.getIdentifier() );
assertEquals(top, fieldConstraints[1]);
assertThat( pathBase, is( instanceOf( PathExpressionNode.class ) ) ); assertThat( pathBase.getText(), is( inputExpression ) ); assertThat( pathExpr.getExpression(), is( instanceOf( ListNode.class ) ) ); assertThat( pathExpr.getExpression().getText(), is( "10, 15" ) ); assertThat( pathExpr.getName(), is( instanceOf( NameRefNode.class ) ) ); assertThat( pathExpr.getName().getText(), is( "size" ) );
assertNotNull(registryContext.lookup(DMNRuntime.class));
assertNotNull(retrieved); assertEquals(MINING_MODEL.getAlgorithmName(), retrieved.getAlgorithmName()); assertEquals(MINING_MODEL.isScorable(), retrieved.isScorable()); assertEquals(expectedTargetField, retrieved.getTargetField());
assertEquals( 2, result.length ); assertEquals( expected1, result[0] ); assertEquals( expected2, result[1] );
assertEquals(DataType.DataTypes.STRING, dcv.getDataType()); assertNull(dcv.getBooleanValue()); assertNull(dcv.getDateValue()); assertNull(dcv.getNumericValue()); assertEquals("woot", dcv.getStringValue());
assertEquals(KiePMMLException.class, e.getClass());
assertEquals(expected, start.overlaps(end));
assertEquals( "$b", p1.asString() ); assertEquals( "$b", p2.asString() ); assertEquals( "$b", p3.asString() ); assertEquals( "$b", p4.asString() ); assertEquals( "$b", p5.asString() ); assertEquals( "$b", p6.asString() );
assertFalse(SetStatementValidator.validate(setters));
assertEquals(derivedFields.size(), retrieved.size());
assertEquals( 3, list.size() ); assertEquals( "a", list.get( 0 ) ); assertEquals( "\\"b\\"", list.get( 1 ) ); assertEquals( "c", list.get( 2 ) );
assertNotNull(retrieved); assertEquals(2, retrieved.size()); assertNotNull(retrieved); assertEquals(2, retrieved.size());
assertEquals(2, classNames.size()); assertTrue(classNames.contains("org.test.Rambo")); assertTrue(classNames.contains("org.test.Pet"));
assertTrue(expressionEvaluatorLocal.isNodeEmpty(objectNode)); assertTrue(expressionEvaluatorLocal.isNodeEmpty(objectNode)); assertFalse(expressionEvaluatorLocal.isNodeEmpty(objectNode)); assertTrue(expressionEvaluatorLocal.isNodeEmpty(arrayNode)); assertFalse(expressionEvaluatorLocal.isNodeEmpty(arrayNode)); assertTrue(expressionEvaluatorLocal.isNodeEmpty(new TextNode(""))); assertTrue(expressionEvaluatorLocal.isNodeEmpty(new TextNode(null))); assertFalse(expressionEvaluatorLocal.isNodeEmpty(new TextNode(VALUE)));
assertEquals( 3, vertices.size() ); assertTrue( vertices.containsAll(Arrays.asList(new Integer[]{2, 3, 4})) );
assertThat(value.getStatus()).isEqualTo(FactMappingValueStatus.FAILED_WITH_ERROR); assertThat(value.getExceptionMessage()).isNull(); assertThat(value.getErrorValue()).isEqualTo(errorValue);
assertNotNull( drl ); assertTrue( drl.indexOf( "myObject.setIsValid(1, 2)" ) > 0 ); assertTrue( drl.indexOf( "myObject.size () > 2" ) > 0 ); assertTrue( drl.indexOf( "Foo(myObject.getColour().equals(red),\\n myObject.size () > 1" ) > 0 );
assertFalse(kiePMMLSimpleSetPredicate.evaluation("234")); assertTrue(kiePMMLSimpleSetPredicate.evaluation(values.get(0)));
assertFalse( MultiMapFactory.make( false ) instanceof ChangeHandledMultiMap );
assertNotNull(retrieved);
assertTrue(testFolder.isPresent()); assertEquals(1, filesFound.size()); assertEquals(0, internalGetResources(filesFound.get(0), Pattern.compile(".*\\\\.txt$")).count());
assertEquals( 18, node.getId() ); assertEquals( 0, source.getAttached() ); assertEquals( 1, source.getAttached() );
assertEquals(DataType.DataTypes.BOOLEAN, dcv.getDataType()); assertTrue(dcv.getBooleanValue()); assertNull(dcv.getDateValue()); assertNull(dcv.getNumericValue()); assertNull(dcv.getStringValue());
assertEquals( 3, list.size() ); assertEquals( "a", list.get( 0 ) ); assertEquals( "b", list.get( 1 ) ); assertEquals( "c", list.get( 2 ) );
assertNotNull(retrieved); assertEquals(expected.getName(), retrieved.getName()); assertNotEquals(expected.getId(), retrieved.getId());
assertNotNull(retrieved); assertEquals(treeModel.getModelName(), retrieved.getName()); assertEquals(TARGET_FIELD, retrieved.getTargetField());
assertTrue(commonEvaluateConstructor(constructorDeclaration, tableName.asString(), superInvocationExpressionsMap, assignExpressionMap));
assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertTrue(abstractScesimModelSpy.scesimData.contains(dataByIndex)); assertEquals(SCENARIO_DATA - 1, abstractScesimModelSpy.scesimData.size()); assertFalse(abstractScesimModelSpy.scesimData.contains(dataByIndex));
assertEquals(0, result.size());
assertNull(ScenarioBeanUtil.fillBean(of(null), String.class.getCanonicalName(), paramsToSet, classLoader));
assertTrue(column instanceof ArrayColumn); assertEquals("$column", column.getName()); assertEquals("LongCell", ((ArrayColumn) column).getCellType());
assertEquals(1, retrieved.size()); assertEquals(probabilityOutputFields.size(), retrieved.size());
assertEquals(fileName, retrieved); assertEquals(fileName, retrieved);
assertEquals(bottom, fieldConstraints[0]); assertEquals(top, fieldConstraints[1]); assertEquals(middle, fieldConstraints[2]);
assertEquals(2, list.size()); assertEquals(1, list.size());
assertNotNull(result); assertEquals("something.param.getAnother().equals($42);", result);
assertEquals(PMML_MODEL.SCORECARD_MODEL, PROVIDER.getPMMLModelType());
assertNull(objectRaw);
assertEquals(5, (int)node.key); assertEquals(10, (int)node.key); assertNull(node); assertNull(node); assertEquals(10, (int)node.key); assertEquals(15, (int)node.key); assertEquals(20, (int)node.key); assertEquals(25, (int)node.key); assertNull(node);
assertEquals( "hello", search1.get( new Value( "helloKey" ) ).get( 0 ) );
assertNotNull(pmml); assertEquals(1, pmml.getModels().size()); assertTrue(pmml.getModels().get(0) instanceof RegressionModel);
assertFalse(CommonCodegenUtils.getMethodDeclaration(classOrInterfaceDeclaration, methodName).isPresent()); assertFalse(CommonCodegenUtils.getMethodDeclaration(classOrInterfaceDeclaration, methodName).isPresent()); assertTrue(CommonCodegenUtils.getMethodDeclaration(classOrInterfaceDeclaration, methodName).isPresent());
assertEquals(expectedResult, retrieved); assertTrue(outputFieldsMap.containsKey(TARGET_FIELD)); assertEquals(expectedResult, outputFieldsMap.get(TARGET_FIELD));
assertNull( changeSet ); assertEquals( 0, timesCalled );
assertEquals(2, m.getInterpolationVariablesList().length); assertEquals("Integer", m.getInterpolationVariablesList()[0].getDataType()); assertEquals("String", m.getInterpolationVariablesList()[1].getDataType());
assertTrue(column instanceof LongColumn); assertEquals("$column", column.getName()); assertEquals("LongCell", column.getCellType());
assertThat(bool, is(instanceOf(AtLiteralNode.class))); assertThat(bool.getResultType(), is(BuiltInType.DATE));
assertNotNull( drl );
assertEquals(SOURCES_MAP, kiePMMLRegressionModelWithSources.getSourcesMap());
assertFalse(p.validCell(null, DataType.DataTypes.NUMERIC)); assertFalse(p.validCell("", DataType.DataTypes.NUMERIC)); assertFalse(p.validCell(" ", DataType.DataTypes.NUMERIC)); assertFalse(p.validCell(null, DataType.DataTypes.STRING)); assertFalse(p.validCell("", DataType.DataTypes.STRING)); assertFalse(p.validCell(" ", DataType.DataTypes.STRING));
assertNull(parser.getRangeIfMerged(cell, ranges)); assertEquals(FIRST_CELL_CONTENT, sheet.getRow(rangeIfMerged.getFirstRow()).getCell(rangeIfMerged.getFirstColumn()).getStringCellValue());
assertEquals( "I am null", search1.get( new Value( null ) ).get( 0 ) );
assertNotNull(retrieved);
assertTrue(toPopulate.getMembers().isEmpty()); assertEquals(toAdd.size(), retrieved.size()); assertTrue(toAdd.stream().anyMatch(methodDeclaration -> retrieved.stream() .anyMatch(bodyDeclaration -> bodyDeclaration.equals(methodDeclaration))));
assertSame(list, ((DefaultFactHandle) results[0]).getObject());
assertNotNull(retrieved); assertEquals(dataFields.size(), fieldTypeMap.size());
assertNotNull(text); assertEquals(text,"((( mTF1 == false ) && ( vTF1 == \\"ABC\\" )) && (( mTF2 == false ) && ( vTF2 in ( 10, 12, 1 ) )))");
assertNull(KIE_PMML_MINING_MODEL.getAlgorithmName()); assertEquals(algorithmName, KIE_PMML_MINING_MODEL.getAlgorithmName());
assertTrue(extractorFunction.apply(person).isValid()); assertFalse(extractorFunction.apply(person).isValid()); assertTrue(nullValue.isValid()); assertNull(nullValue.getValue());
assertEquals(KIE_PMML_PREDICATE, KIE_PMML_SEGMENT.getKiePMMLPredicate());
assertEquals(defineFunctions.size(), retrieved.size());
assertEquals(expected.toString(), actual.toString());
assertTrue(lookup.isDefined(testVariable));
assertFalse(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData)); assertFalse(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));
assertEquals( 3, changeSet.getAdded().get( new Value( "hello" ) ).size() ); assertTrue( changeSet.getAdded().get( new Value( "hello" ) ).contains( "a" ) ); assertTrue( changeSet.getAdded().get( new Value( "hello" ) ).contains( "b" ) ); assertTrue( changeSet.getAdded().get( new Value( "hello" ) ).contains( "c" ) ); assertEquals( 1, timesCalled );
assertNotNull(text); assertEquals(bldr.toString(),text);
assertNotNull(retrieved); assertFalse(retrieved.isPresent());
assertThat( context, is( instanceOf( ContextNode.class ) ) ); assertThat( context.getText(), is( inputExpression ) ); assertThat( ctx.getEntries(), is( empty() ));
assertEquals(expected, retrieved);
assertEquals(factIdentifier.getPackageWithoutClassName(), "com.project");
assertEquals(FACT_MAPPINGS, abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().size()); assertEquals(FACT_MAPPINGS - 1, abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().size()); assertFalse(abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().contains(factMappingByIndex));
assertEquals( "null", p1.asString() ); assertEquals( "null", p2.asString() ); assertEquals( "null", p3.asString() ); assertEquals( "null", p4.asString() ); assertEquals( "null", p5.asString() ); assertEquals( "null", p6.asString() );
assertEquals(1, m.getInterpolationVariablesList().length); assertEquals(TemplateModel.DEFAULT_TYPE, m.getInterpolationVariablesList()[0].getDataType());
assertEquals( 3, list.size() ); assertEquals( "a", list.get( 0 ) ); assertEquals( "b", list.get( 1 ) ); assertEquals( "c", list.get( 2 ) );
assertFalse(CommonCodegenUtils.getExplicitConstructorInvocationParameter(explicitConstructorInvocationStmt, parameterName).isPresent()); assertFalse(CommonCodegenUtils.getExplicitConstructorInvocationParameter(explicitConstructorInvocationStmt, parameterName).isPresent()); assertTrue(CommonCodegenUtils.getExplicitConstructorInvocationParameter(explicitConstructorInvocationStmt, parameterName).isPresent());
assertTrue(expressionEvaluatorLocal.evaluateUnaryExpression(null, null, String.class)); assertTrue(expressionEvaluatorLocal.evaluateUnaryExpression(null, null, Map.class)); assertTrue(expressionEvaluatorLocal.evaluateUnaryExpression(null, null, List.class));
assertEquals(expected, retrieved.toString());
assertNotNull(retrieved); assertEquals(1, retrieved.size());
assertFalse(x.isRedundant(b)); assertFalse(b.isRedundant(x));
assertEquals( "Boolean", p1.getSimpleClassName() ); assertEquals( "Smurf", p2.getSimpleClassName() ); assertEquals( "Float", p3.getSimpleClassName() ); assertEquals( "Integer", p4.getSimpleClassName() ); assertEquals( "Smurf", p5.getSimpleClassName() ); assertEquals( "String", p6.getSimpleClassName() );
assertEquals(expected, actual);
assertEquals(expected, retrieved);
assertNotNull( map );
assertTrue(KieModuleMetaDataImpl.isProcessFile("abc.bpmn")); assertTrue(KieModuleMetaDataImpl.isProcessFile("abc.bpmn2")); assertTrue(KieModuleMetaDataImpl.isProcessFile("abc.bpmn-cm")); assertFalse(KieModuleMetaDataImpl.isProcessFile("abc.bpmn2-cm"));
assertEquals(1, m.getInterpolationVariablesList().length); assertEquals(TemplateModel.DEFAULT_TYPE, m.getInterpolationVariablesList()[0].getDataType());
assertTrue(Objects.equals(column1, column2));
assertTrue(scesimModelDescriptor.getUnmodifiableFactMappings().contains(retrieved)); assertFalse(scesimModelDescriptor.getUnmodifiableFactMappings().contains(retrieved));
assertEquals(0, getScenarioJunitActivator().getChildren().size()); assertEquals(1, getScenarioJunitActivator().getChildren().size());
assertEquals(1, rules.size());
assertNotNull(scesimModelDescriptor.getFactMappingByIndex(testingIndex));
assertEquals(expected, actual);
assertNotNull(retrieved); assertTrue(retrieved instanceof KiePMMLDroolsModelWithSources); assertEquals(SOURCE_MAP, retrievedSources.getSourcesMap()); assertEquals(PACKAGE_NAME, retrievedSources.getKModulePackageName()); assertEquals(scorecard.getModelName(), retrievedSources.getName());
assertNull(objectRaw);
assertEquals(1, scenarioRunnerData1.getResults().size()); assertEquals(2, scenarioRunnerData2.getResults().size());
assertTrue(column instanceof LongColumn); assertEquals("column", column.getName());
assertThat( number, is( instanceOf( SignedUnaryNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( sun.getSign(), is( SignedUnaryNode.Sign.POSITIVE ) ); assertThat( sun.getExpression(), is( instanceOf( NumberNode.class ) ) ); assertThat( sun.getExpression().getText(), is( "10" ) );
assertEquals( 0, result.length );
assertTrue(kbuilderImpl.getPackageNames().isEmpty()); assertNull(kbuilderImpl.getPackage(PACKAGE_NAME)); assertEquals(kiePMMLModelFactory.getKiePMMLModels(), retrieved); assertEquals(1, kbuilderImpl.getPackageNames().size()); assertNotNull(kbuilderImpl.getPackage(PACKAGE_NAME));
assertEquals(retrieved, o);
assertNull( "Empty list should return null on getLast()", this.list.getLast() ); assertSame( "List should return node1 on getLast()", this.list.getLast(), this.node1 ); assertSame( "List should return node2 on getLast()", this.list.getLast(), this.node2 ); assertSame( "List should return node3 on getLast()", this.list.getLast(), this.node3 );
assertNotNull(retrieved); assertEquals(segmentationName, retrieved.getName());
assertNotNull(text); assertEquals(text,"((( mTF1 == false ) && ( vTF1 <= 0 )) ^ (( mTF1 == false ) && ( vTF1 > 4 )))");
assertEquals(predicates.size(), retrieved.size());
assertEquals(new String(storedSecretKey.getEncoded()), passwordKey);
assertEquals( "brie", declaration.getValue( null, brie ) );
assertTrue(column instanceof ArrayColumn); assertEquals("column", column.getName()); assertEquals("StringCell", ((ArrayColumn) column).getCellType());
assertNotNull(retrieved); assertEquals(2, retrieved.size()); assertEquals(CHILD_NODE, childNode.getNodeName()); assertEquals(1, testNodes.size()); assertEquals(TEST_NODE, testNodes.get(0).getNodeName()); assertNotNull(retrieved); assertEquals(2, retrieved.size()); assertEquals(NESTING_NODE, nestingNode.getNodeName()); assertEquals(1, nestedNodes.size()); assertEquals(NESTED_NODE, nestedNodes.get(0).getNodeName());
assertEquals(one, two);
assertThat( FEELParser.isVariableNameValid( var ), is( true ) );
assertSame( "List should return node1 on getFirst()", this.list.getFirst(), this.node1 ); assertSame( "List should return node2 on getFirst()", this.list.getFirst(), this.node2 ); assertSame( "List should return node3 on getFirst()", this.list.getFirst(), this.node3 ); assertNull( "Empty list should return null on getFirst()", this.list.getFirst() );
assertEquals( con, con );
assertNotNull(text); assertEquals(text,"((( mTF1 == false ) && ( vTF1 <= 0 )) || (( mTF1 == false ) && ( vTF1 > 4 )))");
assertEquals(KiePMMLException.class, e.getClass());
assertThat( list, is( instanceOf( ListNode.class ) ) ); assertThat( list.getResultType(), is( BuiltInType.LIST ) ); assertThat( list.getText(), is( inputExpression ) ); assertThat( ln.getElements(), is( empty() ));
assertEquals( "A", listener.getCell( 0, 0 ) ); assertEquals( "B", listener.getCell( 0, 1 ) ); assertEquals( "", listener.getCell( 2, 0 ) ); assertEquals( "C", listener.getCell( 1, 0 ) ); assertEquals( "D", listener.getCell( 1, 1 ) ); assertEquals( "E", listener.getCell( 1, 3 ) );
assertFalse(toPopulate.getResultVariables().isEmpty()); assertTrue(toPopulate.getResultVariables().containsKey(outputField.getName())); assertEquals("REASON_CODE_" + i, toPopulate.getResultVariables().get(outputField.getName()));
assertNotNull(retrieved); assertEquals(1, retrieved.size()); assertNotNull(testNodes); assertEquals(1, testNodes.size()); assertEquals(replacement, testNodes.get(0).getTextContent());
assertEquals(original.getId(), copy.getId()); assertEquals(original.getValue(), copy.getValue()); assertEquals(original, copy); assertNotSame(original, copy);
assertEquals( 1, cliques.size() ); assertEquals( 1, cliques.size() ); assertEquals( OpenBitSet1, cliques.get(0) ); assertEquals( 2, cliques.size() ); assertEquals( OpenBitSet1, cliques.get(0) ); assertEquals( OpenBitSet3, cliques.get(1) );
assertNotNull(retrieved); assertFalse(retrieved.isPresent()); assertNotNull(retrieved); assertTrue(retrieved.isPresent()); assertEquals(explicitConstructorInvocationStmt, retrievedExplicitConstructorInvocationStmt);
assertEquals(3, allLHSVariables.size()); assertTrue(allLHSVariables.contains("$sfc1")); assertTrue(allLHSVariables.contains("$sfc2")); assertTrue(allLHSVariables.contains("$sfc3"));
assertTrue(mapValues.stream().allMatch(ScenarioSimulationSharedUtils::isMap));
assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertTrue(abstractScesimModelSpy.scesimData.contains(dataByIndex)); assertEquals(SCENARIO_DATA - 1, abstractScesimModelSpy.scesimData.size()); assertFalse(abstractScesimModelSpy.scesimData.contains(dataByIndex));
assertNotNull(packageDescr); assertNotNull(all); assertEquals(45, all.size());
assertThat( filterBase, is( instanceOf( FilterExpressionNode.class ) ) ); assertThat( filterBase.getText(), is( inputExpression ) ); assertThat( filter.getExpression(), is( instanceOf( ListNode.class ) ) ); assertThat( filter.getExpression().getText(), is( "{x:1, y:2}, {x:2, y:3}" ) ); assertThat( filter.getFilter(), is( instanceOf( InfixOpNode.class ) ) ); assertThat( filter.getFilter().getText(), is( "x=1" ) );
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertNotEquals(column1, column2);
assertNotNull(builder.getDescr().getRules()); assertEquals(1, builder.getDescr().getRules().size()); assertEquals(name, retrieved.getName()); assertEquals(2, retrieved.getAttributes().size()); assertTrue(retrieved.getAttributes().containsKey("agenda-group")); assertEquals(agendaGroup, retrieved.getAttributes().get("agenda-group").getValue()); assertTrue(retrieved.getAttributes().containsKey("activation-group")); assertEquals(activationGroup, retrieved.getAttributes().get("activation-group").getValue());
assertEquals(MULTIPLE_MODELMETHOD, KIE_PMML_SEGMENTATION.getMultipleModelMethod());
assertFalse(failedResult.isValid()); assertEquals("The decision " + failedDecision.getDecisionName() + " has not been successfully evaluated: " + failedDecision.getEvaluationStatus(), failedResult.getErrorMessage().get());
assertNotNull(pmml); assertEquals(1, pmml.getModels().size()); assertTrue(pmml.getModels().get(0) instanceof RegressionModel); assertNotNull(retrieved);
assertThat(exampleClazz, is(notNullValue())); assertThat(result, is(5));
assertNotNull(retrieved);
assertEquals(firstColumn, firstColumnArgumentCaptor.getValue());
assertEquals(expected, retrieved);
assertEquals(expected, retrieved); assertEquals(expected, retrieved);
assertNull(getKiePMMLScorecardModelCharacteristicASTFactory().getKiePMMLReasonCodeAndValue(new Attribute(), "", 0));
assertEquals(expected, actual);
assertThat(aClass.getCompilationUnitAsString(), equalToIgnoringWhiteSpace(expectedResult));
assertEquals(PMML_MODEL.SCORECARD_MODEL, evaluator.getPMMLModelType());
assertTrue(expressionEvaluatorLocal.isObjectEmpty(json)); assertTrue(expressionEvaluatorLocal.isObjectEmpty(json)); assertFalse(expressionEvaluatorLocal.isObjectEmpty(json));
assertTrue( changeSet.getAdded().get( new Value( "hello" ) ).contains( "test" ) ); assertEquals( 1, timesCalled );
assertNotNull(text); assertEquals(text,"((( mTF1 == false ) && ( vTF1 == \\"ABC\\" )) && (( mTF2 == false ) && ( vTF2 > 4 )))");
assertNotEquals(column1, column2);
assertNotNull(retrieved);
assertNotNull(text); assertEquals("( mTF3 == false ) && ( vTF3 == \\"optA\\" )",text); assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 == 123 )",text);
assertNotNull(cloned); assertEquals(originalDescriptor.getUnmodifiableFactMappings().size(), clonedDescriptor.getUnmodifiableFactMappings().size()); assertEquals(originalDescriptor.getUnmodifiableFactMappings().get(index), clonedDescriptor.getUnmodifiableFactMappings().get(index)); assertEquals(simulation.getUnmodifiableData().size(), cloned.getUnmodifiableData().size()); assertEquals(simulation.getUnmodifiableData().get(index).getDescription(), cloned.getUnmodifiableData().get(index).getDescription());
assertTrue(result instanceof Dispute); assertSame(dispute, result); assertEquals(dispute.getCreator().getFirstName(), FIRST_NAME); assertEquals(dispute.getCreator().getAge(), AGE);
assertNotNull(expressionEvaluator.createObject(String.class.getCanonicalName(), Collections.emptyList())); assertTrue(expressionEvaluator.createObject(Map.class.getCanonicalName(), Arrays.asList(String.class.getCanonicalName(), String.class.getCanonicalName())) instanceof Map);
assertEquals(getAssertDescription(a, b, conflictExpected, "conflict"), conflictExpected, a.conflicts(b)); assertEquals(getAssertDescription(b, a, conflictExpected, "conflict"), conflictExpected, b.conflicts(a));
assertEquals(expected,retrieved); assertEquals(expected,retrieved); assertEquals(expected,retrieved);
assertTrue(coverageAgendaListener.getRuleExecuted().isEmpty()); assertTrue(coverageAgendaListener.getAuditsMessages().isEmpty()); assertEquals(1, ruleExecuted.size()); assertEquals((Integer) 1, ruleExecuted.get(RULE_NAME)); assertEquals(1, auditMessages.size()); assertEquals(RULE_NAME, auditMessages.get(0));
assertEquals(0, result.size());
assertTrue(expressionEvaluatorLocal.isListEmpty(json)); assertTrue(expressionEvaluatorLocal.isListEmpty(json)); assertTrue(expressionEvaluatorLocal.isListEmpty(json)); assertFalse(expressionEvaluatorLocal.isListEmpty(json));
assertThat( number, is( instanceOf( SignedUnaryNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( sun.getSign(), is( SignedUnaryNode.Sign.POSITIVE ) ); assertThat( sun.getExpression(), is( instanceOf( NumberNode.class ) ) ); assertThat( sun.getExpression().getText(), is( "10.5" ) );
assertNotNull(retrieved); assertEquals(toReturn, kieRuntimeFactory);
assertNotNull(retrieved);
assertEquals(KiePMMLException.class, e.getClass());
assertTrue(SetStatementValidator.validate(setters));
assertTrue(KieModuleMetaDataImpl.isFormFile("abc.frm")); assertFalse(KieModuleMetaDataImpl.isFormFile("abc.form"));
assertFalse(kbuilder.hasErrors()); assertEquals( 1, list.size() );
assertTrue(objectRaw instanceof String); assertEquals(directMappingSimpleTypeValue, objectRaw);
assertFalse(expressionEvaluatorLocal.isSimpleTypeNode(new ArrayNode(factory))); assertTrue(expressionEvaluatorLocal.isSimpleTypeNode(jsonNode)); assertFalse(expressionEvaluatorLocal.isSimpleTypeNode(jsonNode));
assertTrue(commonEvaluateConstructor(constructorDeclaration, simpleName.asString(), superInvocationExpressionsMap, assignExpressionMap));
assertTrue(retrieved instanceof KiePMMLSimpleSetPredicate);
assertEquals(factIdentifier.getClassNameWithoutPackage(), "Test");
assertEquals(bottom, fieldConstraints[0]);
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertNotNull(clone); assertEquals(clone, abstractScesimModelSpy.scesimData.get(4)); assertEquals(cloned.getDescription(), clone.getDescription());
assertEquals( 2, result.length ); assertEquals( expected1, result[0] ); assertEquals( expected2, result[1] );
assertEquals(eder, map.get(IndexKey.INDEX_ID).get(new Value(0)).iterator().next()); assertEquals(michael, map.get(IndexKey.INDEX_ID).get(new Value(1)).iterator().next()); assertEquals(michael, next);
assertFalse(kiePMMLCompoundPredicate.evaluate(inputData)); assertFalse(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));
assertTrue(fingerprint.contains("ALOAD 0")); assertTrue(fingerprint.contains("INVOKEVIRTUAL org/drools/mvel/compiler/Person.getAge()I"));
assertTrue(retrieved.isEmpty()); assertTrue(retrieved.containsKey("KEY")); assertEquals("VALUE", retrieved.get("KEY"));
assertTrue(compositePackageDescr.getPreferredPkgUUID().isPresent()); assertEquals(pkgUUID, compositePackageDescr.getPreferredPkgUUID().get()); assertEquals(pkgUUID, compositePackageDescr.getPreferredPkgUUID().get());
assertEquals(column1.getAttribute(), clone.getAttribute()); assertEquals(column1.isReverseOrder(), clone.isReverseOrder()); assertEquals(column1.isUseRowNumber(), clone.isUseRowNumber()); assertEquals(column1.getHeader(), clone.getHeader()); assertEquals(column1.getWidth(), clone.getWidth()); assertEquals(column1.isHideColumn(), clone.isHideColumn()); assertEquals(column1.getDefaultValue(), clone.getDefaultValue());
assertTrue(retrieved.isEmpty()); assertTrue(retrieved.containsKey("KEY")); assertEquals("VALUE", retrieved.get("KEY"));
assertNotNull(retrieved); assertEquals(segments.size(), retrieved.size());
assertNotNull(text); assertEquals("mTF2 == true",text);
assertNotNull(retrieved); assertEquals(1, retrieved.size()); assertEquals(factIdentifier, retrieved.iterator().next());
assertNotNull(retrieved); assertEquals(types, retrieved.getTypes()); assertFalse(retrieved.getRules().isEmpty());
assertEquals( "LinkedList should have 1 node", this.list.size(), 1 ); assertEquals( "LinkedList should have 2 nodes", this.list.size(), 2 ); assertEquals( "LinkedList should have 3 nodes", this.list.size(), 3 );
assertFalse(kiePMMLSimpleSetPredicate.evaluation(values.get(0))); assertTrue(kiePMMLSimpleSetPredicate.evaluation("234"));
assertNotNull( drl ); assertTrue( drl.indexOf( "rule \\"How cool is Shaun 12\\"" ) > 0 ); assertTrue( drl.indexOf( "rule \\"How cool is Kumar 11\\"" ) > 0 ); assertTrue( drl.indexOf( "import example.model.User;" ) > -1 ); assertTrue( drl.indexOf( "import example.model.Car;" ) > -1 );
assertEquals(2, result.size()); assertEquals(1, (int) iterator.next()); assertEquals(0, (int) iterator.next());
assertThat(value.getStatus()).isEqualTo(FactMappingValueStatus.SUCCESS); assertThat(value.getExceptionMessage()).isNull(); assertThat(value.getErrorValue()).isNull();
assertNotNull(retrieved); assertTrue(retrieved instanceof KiePMMLValueWeight); assertEquals(rawObject.doubleValue(), kiePMMLValueWeight.getValue(), 0.0); assertEquals(weight, kiePMMLValueWeight.getWeight(), 0.0);
assertEquals(1, list.size()); assertEquals(1, list.size());
assertTrue(a.subsumes(b)); assertTrue(b.subsumes(a));
assertEquals("something.getAnother(x).equals(x);", result);
assertEquals("4DEB93975D9859892B1A5FD4B38E2155", fingerprint);
assertEquals( "java.lang.Object[][][]", name );
assertTrue(retrieved instanceof KiePMMLSimplePredicate);
assertFalse(kiePMMLSimplePredicate.evaluation(value)); assertTrue(kiePMMLSimplePredicate.evaluation("NOT"));
assertEquals(pkgUuid, kiePMMLDroolsModelWithSources.getPkgUUID());
assertEquals(PMML_MODEL.TREE_MODEL, evaluator.getPMMLModelType());
assertEquals(5, allLHSVariables.size()); assertTrue(allLHSVariables.contains("$p1")); assertTrue(allLHSVariables.contains("$p2")); assertTrue(allLHSVariables.contains("$sfc1")); assertTrue(allLHSVariables.contains("$sfc2")); assertTrue(allLHSVariables.contains("$sfc3"));
assertEquals(getAssertDescription(a, b, !conflictExpected, "overlap"), !conflictExpected, a.overlaps(b)); assertEquals(getAssertDescription(b, a, !conflictExpected, "overlap"), !conflictExpected, b.overlaps(a));
assertFalse(xml.contains("org.drools.scenariosimulation.api.model")); assertFalse(xml.contains("org.kie.soup.project.datamodel.imports"));
assertEquals(expected, retrieved.toString()); assertEquals(expected, retrieved.toString());
assertTrue(ScenarioSimulationSharedUtils.isEnumCanonicalName(Enum.class.getCanonicalName())); assertFalse(ScenarioSimulationSharedUtils.isEnumCanonicalName(Enum.class.getSimpleName()));
assertEquals("Hello", new ImportsToFQCN(imports).resolveFQCN("Hello"));
assertNull(expressionEvaluatorLocal.evaluateLiteralExpression(null, String.class.getCanonicalName(), null)); assertNull(expressionEvaluatorLocal.evaluateLiteralExpression(null, List.class.getCanonicalName(), null)); assertNull(expressionEvaluatorLocal.evaluateLiteralExpression(null, Map.class.getCanonicalName(), null));
assertEquals(1, m.getInterpolationVariablesList().length); assertEquals(TemplateModel.DEFAULT_TYPE, m.getInterpolationVariablesList()[0].getDataType());
assertEquals("data", objects.get(0));
assertEquals(predictorTerms.size(), retrieved.size()); assertTrue(retrieved.containsKey(predictorTerm.getName().getValue())); assertEquals(expected, methodDeclaration.getNameAsString());
assertEquals("rulesOutputRouting.set( \\"80\\", \\"Department Manager\\", toa.getPersonExpense().getEntityCode(\\"Part Of\\",\\"Office\\"), 10004, 30 );", result);
assertEquals("something == x", result);
assertEquals(top, fieldConstraints[0]); assertEquals(bottom, fieldConstraints[1]);
assertTrue(result.containsKey(RuleScenarioExecutableBuilder.COVERAGE_LISTENER)); assertTrue(result.containsKey(RuleScenarioExecutableBuilder.RULES_AVAILABLE));
assertSame(list, ((DefaultFactHandle) results[0]).getObject());
assertNotEquals(column1, column2);
assertTrue(variableMap.containsKey(new InterpolationVariable("test", DataType.TYPE_OBJECT)));
assertEquals(expected, retrieved);
assertEquals(resource.getSourcePath(), dmnModel.getResource().getSourcePath());
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertEquals(expected, actual);
assertNotNull( e.getMessage() );
assertEquals("something.getAnother(x,y).equals(y, \'y\');", result);
assertEquals(expected.toString(), new ToMethodCall(typeResolver).toMethodCallWithClassCheck(expr.getExpr(), null, Person.class).getExpression().toString());
assertEquals(1, list.size()); assertEquals(2, list.size());
assertEquals(resource.getSourcePath(), dmnModel.getResource().getSourcePath());
assertNotNull(body.getStatements()); assertFalse(body.getStatements().isEmpty());
assertEquals(targetObject, FIRST_NAME); assertNull(ScenarioBeanUtil.navigateToObject(null, Collections.emptyList()).getBean());
assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertTrue(abstractScesimModelSpy.scesimData.isEmpty());
assertThat(bool, is(instanceOf(AtLiteralNode.class))); assertThat(bool.getResultType(), is(BuiltInType.DURATION));
assertTrue(expressionEvaluatorLocal.isEmptyText(new TextNode(""))); assertFalse(expressionEvaluatorLocal.isEmptyText(new TextNode(VALUE))); assertTrue(expressionEvaluatorLocal.isEmptyText(new ObjectNode(factory)));
assertEquals(DataType.DataTypes.NUMERIC_LONG, dcv.getDataType()); assertNull(dcv.getBooleanValue()); assertNull(dcv.getDateValue()); assertEquals(1L, dcv.getNumericValue()); assertNull(dcv.getStringValue());
assertNull(KIE_PMML_SEGMENTATION.getSegments()); assertEquals(segments, KIE_PMML_SEGMENTATION.getSegments());
assertEquals(expected, actual);
assertNotNull(pmml); assertEquals(1, pmml.getModels().size()); assertTrue(pmml.getModels().get(0) instanceof RegressionModel); assertNotNull(retrieved); assertTrue(retrieved instanceof KiePMMLRegressionModelWithSources); assertNotNull(sourcesMap); assertFalse(sourcesMap.isEmpty());
assertEquals(getAssertDescription(a, b, !conflictExpected, "be redundant"), !conflictExpected, a.isRedundant(b)); assertEquals(getAssertDescription(b, a, !conflictExpected, "be redundant"), !conflictExpected, b.isRedundant(a));
assertEquals( "List size should be 3", this.list.size(), 3 ); assertEquals( "Empty list should have size 0", this.list.size(), 0 );
assertEquals(numericPredictors.size(), retrieved.size());
assertTrue( clientHelper.checkDataWithPublicKey( KEY_ALIAS, data, signature ) ); assertFalse( clientHelper.checkDataWithPublicKey( KEY_ALIAS, "fake".getBytes( "UTF8" ), signature ) );
assertEquals(expected.toString(), new ToMethodCall(typeResolver).toMethodCallWithClassCheck(expr, null, Person.class).getExpression().toString()); assertEquals(expected.toString(), new ToMethodCall(typeResolver).toMethodCallWithClassCheck(expr1, null, Person.class).getExpression().toString()); assertEquals(expected.toString(), new ToMethodCall(typeResolver).toMethodCallWithClassCheck(expr2, null, Person.class).getExpression().toString());
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertEquals(expected.toString(), actual.toString());
assertEquals(KIE_PMML_MODEL, KIE_PMML_SEGMENT.getModel());
assertEquals(original.getDefinition(), copy.getDefinition()); assertEquals(original.getDrl(), copy.getDrl()); assertEquals(original.getValues(), copy.getValues()); assertEquals(firstValue(original), firstValue(copy)); assertNotSame(firstValue(original), firstValue(copy));
assertFalse(p.validateAttributeCell(null)); assertFalse(p.validateAttributeCell("")); assertFalse(p.validateAttributeCell(" "));
assertTrue(retrieved instanceof KiePMMLFalsePredicate);
assertEquals("\\"Test\\"", expressionEvaluator.fromObjectToExpression("Test")); assertEquals("false", expressionEvaluator.fromObjectToExpression(false)); assertEquals("1", expressionEvaluator.fromObjectToExpression(BigDecimal.valueOf(1))); assertEquals("date( \\"2019-05-13\\" )", expressionEvaluator.fromObjectToExpression(LocalDate.of(2019, 5, 13))); assertEquals("null", expressionEvaluator.fromObjectToExpression(null));
assertEquals(regressionTablesMap.size(), retrieved.size()); assertTrue(statement instanceof ExpressionStmt); assertTrue(((ExpressionStmt) statement).getExpression() instanceof MethodCallExpr); assertEquals("categoryTableMap", methodCallExpr.getScope().get().asNameExpr().toString()); assertEquals("put", methodCallExpr.getName().asString()); assertEquals(kiePMMLTableSourceCategory.getCategory(), stringLiteralExpr.getValue()); assertEquals(key, objectCreationExpr.getTypeAsString());
assertNotNull(retrieved); assertEquals(dataFields.size(), retrieved.size());
assertNotNull(retrieved);
assertEquals("Person", first.getType()); assertEquals(first, last);
assertEquals(1.0, KIE_PMML_SEGMENT.getWeight(), 0.0); assertEquals(weight, KIE_PMML_SEGMENT.getWeight(), 0.0);
assertEquals(factIdentifier.getPackageWithoutClassName(), "com");
assertTrue(commonEvaluateConstructor(constructorDeclaration, tableName.asString(), superInvocationExpressionsMap, assignExpressionMap));
assertEquals( "org.drools.core.util.ClassUtilsTest.A", name );
assertEquals(0, bytes.length);
assertThat( nullLit, is( instanceOf( NullNode.class ) ) ); assertThat( nullLit.getResultType(), is( BuiltInType.UNKNOWN ) );
assertTrue(column instanceof StringColumn); assertEquals("$column", column.getName()); assertEquals("StringCell", column.getCellType());
assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(kiePmmlModel.sourcesMap.isEmpty());
assertEquals( "java.lang.Object[]", name );
assertNotEquals(column1, column2);
assertSame( "List should return node1 on getLast()", this.list.getLast(), this.node3 ); assertSame( "List should return node2 on getLast()", this.list.getLast(), this.node2 ); assertSame( "List should return node3 on getLast()", this.list.getLast(), this.node1 ); assertNull( "Empty list should return null on getLast()", this.list.getLast() );
assertNotNull( drl ); assertTrue( m.matches() ); assertTrue( drl.indexOf( "This is a function block" ) > -1 ); assertTrue( drl.indexOf( "global Class1 obj1;" ) > -1 ); assertTrue( drl1.indexOf( "myObject.setIsValid(10-Jul-1974)" ) > -1 ); assertTrue( drl.indexOf( "myObject.getColour().equals(blue)" ) > -1 );
assertNotNull(result); assertEquals(1, dmnContext.getAll().size()); assertEquals(0, newDmnContext.getAll().size());
assertEquals( 0, result.length );
assertEquals("forall(&&){something == $}", result);
assertNotNull(lhsBuilder.getDescr()); assertNotNull(lhsBuilder.getDescr().getDescrs()); assertEquals(1, lhsBuilder.getDescr().getDescrs().size()); assertTrue(lhsBuilder.getDescr().getDescrs().get(0) instanceof PatternDescr); assertEquals(KiePMMLStatusHolder.class.getSimpleName(), patternDescr.getObjectType()); assertEquals(STATUS_HOLDER, patternDescr.getIdentifier()); assertTrue(patternDescr.getConstraint() instanceof AndDescr); assertTrue(andDescr.getDescrs().isEmpty());
assertEquals("Test template\\n", rt.getContents());
assertNotNull(retrieved); assertTrue(retrieved instanceof KiePMMLDroolsModelTest); assertEquals(pmml.getDataDictionary(), retrievedTest.dataDictionary); assertEquals(pmml.getTransformationDictionary(), retrievedTest.transformationDictionary); assertEquals(scorecard, retrievedTest.model); assertEquals(expectedPackageName, retrievedTest.getKModulePackageName()); assertEquals(PACKAGE_NAME, retrievedTest.getName());
assertEquals(column1.getMetadata(), clone.getMetadata()); assertEquals(column1.getHeader(), clone.getHeader()); assertEquals(column1.getWidth(), clone.getWidth()); assertEquals(column1.isHideColumn(), clone.isHideColumn()); assertEquals(column1.getDefaultValue(), clone.getDefaultValue());
assertEquals("something == x && something == y", result);
assertNotNull(retrieved); assertEquals(expected, retrieved.toString());
assertNotNull(retrieved); assertEquals(predicates.size(), retrieved.size());
assertEquals((Integer) 1, ValueWrapper.of(1).orElseGet(() -> 3)); assertEquals(3, ValueWrapper.errorWithValidValue(null, null).orElseGet(() -> 3)); assertNull(ValueWrapper.of(null).orElseGet(() -> 3));
assertNotNull(retrieved); assertEquals(rawObject, retrieved);
assertNotNull(ksession); assertNotNull(caseData); assertNotNull(allData); assertEquals(1, allData.size()); assertEquals("value", caseData.getData("test"));
assertEquals( s, ksession.getObject( handle ) ); assertSame( handle, ksession.getFactHandle( s ) ); assertEquals( s, ksession.getObject( handle ) ); assertEquals( length - i -1, ksession.getObjects().size() ); assertEquals( length - i -1, ksession.getFactHandles().size() ); assertEquals( 0, ksession.getObjects().size() ); assertEquals( 0, ksession.getFactHandles().size() );
assertThat(peers).contains(peer1, peer2);
assertTrue(first.getPreferredPkgUUID().isPresent()); assertTrue(compositePackageDescr.getPreferredPkgUUID().isPresent()); assertEquals(pkgUUID, compositePackageDescr.getPreferredPkgUUID().get()); assertTrue(second.getPreferredPkgUUID().isPresent()); assertNotEquals(first.getPreferredPkgUUID().get(), second.getPreferredPkgUUID().get());
assertEquals(top, fieldConstraints[0]); assertEquals(bottom, fieldConstraints[1]); assertEquals(middle, fieldConstraints[2]);
assertFalse(SetStatementValidator.validate(setters));
assertEquals((Integer) 1, ValueWrapper.of(1).orElse(3)); assertEquals(3, ValueWrapper.errorWithValidValue(null, null).orElse(3)); assertNull(ValueWrapper.of(null).orElse(3));
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 > 123 )",text);
assertEquals(bottom, fieldConstraints[1]);
assertTrue(result instanceof Dispute); assertEquals(dispute.getCreator().getFirstName(), FIRST_NAME); assertEquals(dispute.getCreator().getAge(), AGE);
assertTrue(commonEvaluateConstructor(constructorDeclaration, generatedClassName, superInvocationExpressionsMap, assignExpressionMap));
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertEquals(expectedDouble, retrieved.get(CASE_B), 0.0); assertEquals(expectedDouble, retrieved.get(CASE_A), 0.0);
assertEquals( "long[][][]", name );
assertEquals( 1, result.length ); assertEquals( expected, result[0] );
assertEquals("org.test.Hello", new ImportsToFQCN(imports).resolveFQCN("Hello"));
assertEquals(PMML_MODEL.MINING_MODEL, PROVIDER.getPMMLModelType());
assertNotEquals(column1, column2);
assertFalse(builder.hasValues());
assertTrue(objectRaw instanceof Person); assertEquals(10, object.getAge()); assertEquals("TestName", object.getFirstName());
assertEquals(expected, actual);
assertEquals(values.size(), retrieved.size()); assertTrue(obj instanceof Integer); assertEquals(expected, obj); assertEquals(values.size(), retrieved.size()); assertTrue(obj instanceof String); assertEquals(values.get(i), obj); assertEquals(values.size(), retrieved.size()); assertTrue(obj instanceof Double); assertEquals(expected, obj);
assertNotNull(retrieved); assertEquals(expected.getName(), retrieved.getName()); assertNotEquals(expected.getId(), retrieved.getId());
assertEquals(expected, retrieved.toString());
assertNotNull(cloned); assertEquals(originalDescriptor.getUnmodifiableFactMappings().size(), clonedDescriptor.getUnmodifiableFactMappings().size()); assertEquals(originalDescriptor.getUnmodifiableFactMappings().get(index), clonedDescriptor.getUnmodifiableFactMappings().get(index)); assertEquals(background.getUnmodifiableData().size(), cloned.getUnmodifiableData().size()); assertEquals(background.getUnmodifiableData().get(index).getDescription(), cloned.getUnmodifiableData().get(index).getDescription());
assertNull(field);
assertNotEquals(column1, column2);
assertTrue(classOrInterfaceDeclaration.getMethodsByName(methodName).isEmpty()); assertEquals(1, classOrInterfaceDeclaration.getMethodsByName(methodName).size()); assertEquals(body, classOrInterfaceDeclaration.getMethodsByName(methodName).get(0).getBody().get());
assertEquals(1, result.size()); assertEquals("var", var.getVarName()); assertEquals(DEFAULT_TYPE, var.getDataType());
assertFalse( a.isThereChanges( b ) );
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, retrieved);
assertEquals(characteristic.getAttributes().size(), rules.size());
assertNotNull(retrieved);
assertNotNull(retrieved); assertEquals(simplePredicates.size(), retrieved.size());
assertThat( bool, is( instanceOf( BooleanNode.class ) ) ); assertThat( bool.getResultType(), is( BuiltInType.BOOLEAN ) );
assertNotNull(field);
assertTrue( hello.compareTo( nroOne ) > 0 ); assertTrue( nroOne.compareTo( hello ) < 0 );
assertEquals(1, resources.size()); assertTrue(resources.stream().anyMatch(elem -> elem.endsWith("testFile.txt")));
assertTrue(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(primitives[i]).isPresent()); assertTrue(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(boxeds[i]).isPresent()); assertFalse(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(String.class).isPresent());
assertEquals("Num files in kjar", numFiles, jarFiles.size());
assertThat( stringLit, is( instanceOf( StringNode.class ) ) ); assertThat( stringLit.getResultType(), is( BuiltInType.STRING ) ); assertThat(stringLit.getText(), is(inputExpression));
assertThat( number, is( instanceOf( NumberNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( number.getText(), is( "10.5" ) );
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 <= 123 )",text);
assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertEquals(SCENARIO_DATA, abstractScesimModelSpy.scesimData.size()); assertFalse(abstractScesimModelSpy.scesimData.contains(replaced)); assertEquals(replacement, abstractScesimModelSpy.scesimData.get(3));
assertEquals(expected, retrieved.toString());
assertEquals( 2, list.size() ); assertTrue( list.contains( "car" ) ); assertTrue( list.contains( "ball" ) ); assertEquals( 1, list.size() ); assertTrue( list.contains( "doll" ) );
assertNotNull( map );
assertThat(exampleClazz, is(notNullValue())); assertThat(result, is(4));
assertTrue(commonEvaluateConstructor(constructorDeclaration, simpleName.asString(), superInvocationExpressionsMap, assignExpressionMap));
assertTrue(builder.getDescr().getTypeDeclarations().isEmpty()); assertEquals(2, builder.getDescr().getTypeDeclarations().size());
assertEquals(packageDescr, kiePMMLDroolsModelWithSources.getPackageDescr());
assertTrue(listValues.stream().allMatch(ScenarioSimulationSharedUtils::isList));
assertTrue( nroZero.compareTo( nroOne ) < 0 ); assertTrue( nroOne.compareTo( nroZero ) > 0 );
assertFalse(kiePMMLSimpleSetPredicate.evaluation("NOT")); assertTrue(kiePMMLSimpleSetPredicate.evaluation(values.get(0)));
assertNotNull(retrieved); assertTrue(retrieved.contains(expected));
assertNotNull( drl ); assertTrue( drl.indexOf( "This is a function block" ) > -1 ); assertTrue( drl.indexOf( "global Class1 obj1;" ) > -1 ); assertTrue( drl.indexOf( "myObject.getColour().equals(blue)" ) > -1 );
assertEquals(1, builder.getDescr().getTypeDeclarations().size());
assertEquals(1, list.size());
assertTrue( hello.compareTo( nroOne ) > 0 ); assertTrue( nroOne.compareTo( hello ) < 0 );
assertEquals( s, ksession.getObject( handle ) ); assertSame( handle, ksession.getFactHandle( s ) ); assertEquals( s, ksession.getObject( handle ) ); assertEquals( length - i -1, ksession.getObjects().size() ); assertEquals( length - i -1, ksession.getFactHandles().size() ); assertEquals( 0, ksession.getObjects().size() ); assertEquals( 0, ksession.getFactHandles().size() );
assertNotNull(cepWindowDefaultValues.hashCode()); assertNotNull(other.hashCode()); assertEquals(cepWindowDefaultValues.hashCode(), other.hashCode());
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 != 123 )",text);
assertEquals(2, allLHSVariables.size()); assertTrue(allLHSVariables.contains("$p1")); assertTrue(allLHSVariables.contains("$p2"));
assertNotNull(r.createRuleUnitDescription(fooBar, org.drools.ruleunit.TestRuleUnit.class));
assertEquals(1, rete.getObjectTypeNodes().size()); assertEquals(1, rete.getObjectTypeNodes().size());
assertNotNull(retrieved); assertTrue(retrieved.contains(expected)); assertTrue(retrieved.contains(expected));
assertThat( number, is( instanceOf( NumberNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) );
assertNotNull(retrieved); assertTrue(retrieved.getPackageDeclaration().isPresent()); assertEquals(packageName, retrieved.getPackageDeclaration().get().getName().asString()); assertFalse(retrieved.getClassByName(TEMPLATE_CLASS).isPresent()); assertTrue(retrieved.getClassByName(className).isPresent());
assertEquals( "Boolean.TRUE", p1.asString() ); assertEquals( "Smurf.PUPA", p2.asString() ); assertEquals( "1.23f", p3.asString() ); assertEquals( "123", p4.asString() ); assertEquals( "$b", p5.asString() ); assertEquals( "\\"hello\\"", p6.asString() );
assertFalse(kiePMMLSimplePredicate.evaluate(inputData)); assertFalse(kiePMMLSimplePredicate.evaluate(inputData)); assertTrue(kiePMMLSimplePredicate.evaluate(inputData));
assertEquals(FACT_MAPPINGS, abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().size()); assertEquals(FACT_MAPPINGS - 1, abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().size()); assertFalse(abstractScesimModelSpy.scesimModelDescriptor.getFactMappings().contains(factMappingByIndex));
assertEquals(overwrittenEncoding, iresource.getEncoding()); assertNotEquals(ireader.getEncoding(), iresource.getEncoding());
assertThat( nameRef, is( instanceOf( NameRefNode.class ) ) ); assertThat( nameRef.getResultType(), is( BuiltInType.STRING ) );
assertNotNull(retrieved);
assertEquals(syntaxErrorEvent, error.get()); assertEquals(syntaxErrorEvent, error.get()); assertEquals(syntaxErrorEvent, error.get()); assertNull(error.get());
assertEquals(SOURCES_MAP, kiePMMLMiningModelWithSources.getSourcesMap());
assertEquals( "org.drools.core.util.ClassUtilsTest.A.B", name );
assertEquals( "org.drools.core.util.ClassUtilsTest", name );
assertEquals("testValue", expressionEvaluatorLocal.getSimpleTypeNodeTextValue(jsonNode)); assertNull(expressionEvaluatorLocal.getSimpleTypeNodeTextValue(jsonNode));
assertTrue(retrieved instanceof KiePMMLTruePredicate);
assertTrue(column instanceof StringColumn); assertEquals("column", column.getName());
assertFalse(kbuilder.hasErrors()); assertEquals(120, basePrice);
assertNotNull(retrieved); assertEquals(retrieved.getKnowledgeBase(), secondRetrieved.getKnowledgeBase()); assertNotNull(thirdRetrieved); assertNotEquals(retrieved.getKnowledgeBase(), thirdRetrieved.getKnowledgeBase());
assertTrue(scenarioResultMetadata.getAuditLogLines().isEmpty()); assertEquals(1, retrieved.size());
assertFalse(kiePMMLSimplePredicate.evaluation("NOT")); assertTrue(kiePMMLSimplePredicate.evaluation(value));
assertNotNull(retrieved);
assertEquals(urlPath, specificPath);
assertEquals( "something == this && something == x || something == y && something < x && something < y", result);
assertEquals(1, rules.size());
assertTrue(column instanceof ArrayColumn); assertEquals("$column", column.getName()); assertEquals("StringCell", ((ArrayColumn) column).getCellType());
assertTrue( "Empty list should return true on isEmpty()", this.list.isEmpty() ); assertFalse( "Not empty list should return false on isEmpty()", this.list.isEmpty() );
assertNotEquals(column1, column2);
assertNull( "Empty list should return null on getFirst()", this.list.getFirst() ); assertSame( "List should return node1 on getFirst()", this.list.getFirst(), this.node1 ); assertSame( "List should return node1 on getFirst()", this.list.getFirst(), this.node1 ); assertSame( "List should return node1 on getFirst()", this.list.getFirst(), this.node1 );
assertEquals( "something == x || something == x && something == y || something == y", result);
assertNotNull(ExpressionEvaluatorFactory.create(classLoader, ScenarioSimulationModel.Type.RULE));
assertEquals(expected, actual);
assertTrue(e instanceof KiePMMLInternalException);
assertNotNull(retrieved); assertEquals(expected, retrieved.getPackageUUID());
assertFalse(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData)); assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));
assertNotNull(retrieved); assertEquals(SCENARIO_DATA, retrieved.size());
assertEquals(simulation.getUnmodifiableData().size(), scenarioWithIndex.size()); assertEquals(simulation.getDataByIndex(index - 1), scenario.getScesimData());
assertNotNull(retrieved); assertFalse(retrieved.isPresent()); assertNotNull(retrieved); assertFalse(retrieved.isPresent()); assertNotNull(retrieved); assertTrue(retrieved.isPresent()); assertEquals(assignExpr, retrievedAssignExpr);
assertTrue(column instanceof ArrayColumn); assertEquals("column", column.getName()); assertEquals("LongCell", ((ArrayColumn) column).getCellType());
assertNotEquals(column1, column2);
assertEquals(expectedResult, retrieved); assertEquals(expectedDouble, outputFieldsMap.get(PROBABILITY_FALSE)); assertEquals(expectedDouble, outputFieldsMap.get(PROBABILITY_TRUE));
assertTrue( ValueType.BOOLEAN_TYPE.isBoolean() ); assertTrue( ValueType.PBOOLEAN_TYPE.isBoolean() );
assertNotNull( list ); assertEquals( 0, list.size() ); assertEquals( 0, RuleSheetParserUtil.getImportList( cellVals ).size() ); assertEquals( 3, list.size() ); assertEquals( "com.something.Yeah", (list.get( 0 )).getClassName() ); assertEquals( "com.something.No", (list.get( 1 )).getClassName() ); assertEquals( "com.something.yeah.*", (list.get( 2 )).getClassName() );
assertThat(bool, is(instanceOf(AtLiteralNode.class))); assertThat(bool.getResultType(), is(BuiltInType.DATE_TIME));
assertNotNull( e.getMessage() );
assertTrue(retrieved.isEmpty()); assertTrue(retrieved.containsKey("KEY")); assertEquals("VALUE", retrieved.get("KEY"));
assertNull(text);
assertEquals( isEqual, BaseColumnFieldDiffImpl.isEqualOrNull( dcv1, dcv2 ) );
assertFalse(kiePMMLSimpleSetPredicate.evaluation("23.4")); assertTrue(kiePMMLSimpleSetPredicate.evaluation(values.get(0)));
assertEquals(DataType.DataTypes.DATE, dcv.getDataType()); assertNull(dcv.getBooleanValue()); assertEquals(now, dcv.getDateValue()); assertNull(dcv.getNumericValue()); assertNull(dcv.getStringValue());
assertEquals(derivedFields.size(), retrieved.size());
assertEquals( "org.drools.core.util.ClassUtilsTest.A.B[][][]", name );
assertNotNull(result); assertEquals("something.param.getAnother(42).equals(42);", result);
assertTrue(kbuilderImpl.getPackageNames().isEmpty()); assertNull(kbuilderImpl.getPackage(PACKAGE_NAME)); assertTrue(kbuilderImpl.getPackageNames().isEmpty()); assertNull(kbuilderImpl.getPackage(PACKAGE_NAME));
assertEquals(getAssertDescription(a, b, !conflictExpected, "be subsuming"), !conflictExpected, a.subsumes(b)); assertEquals(getAssertDescription(b, a, !conflictExpected, "be subsuming"), !conflictExpected, b.subsumes(a));
assertEquals("1.0", version);
assertEquals(value, assignExpr.getValue());
assertFalse(kiePMMLSimpleSetPredicate.evaluation(values.get(0))); assertTrue(kiePMMLSimpleSetPredicate.evaluation("NOT"));
assertTrue(testFolder.isPresent()); assertEquals(1, filesFound.size()); assertEquals(0, getResourcesFromDirectory(null, null).count()); assertEquals(0, getResourcesFromDirectory(dir, Pattern.compile("noMatch")).count());
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 == 123 )",text);
assertEquals( "This is my rule name", result );
assertFalse(kiePMMLSimplePredicate.evaluate(inputData)); assertFalse(kiePMMLSimplePredicate.evaluate(inputData)); assertTrue(kiePMMLSimplePredicate.evaluate(inputData));
assertEquals( j1, j1 ); assertEquals( j2, j2 ); assertEquals( j1, j2 ); assertEquals( n1, n1 ); assertEquals( n2, n2 ); assertEquals( n1, n2 ); assertFalse( j1.equals( n1 ) ); assertFalse( j1.equals( n2 ) ); assertFalse( n1.equals( j1 ) ); assertFalse( n1.equals( j2 ) );
assertEquals(0, a.compareTo(b));
assertTrue(cronExpression.isSatisfiedBy(cal.getTime())); assertFalse(cronExpression.isSatisfiedBy(cal.getTime())); assertFalse(cronExpression.isSatisfiedBy(cal.getTime())); assertFalse(cronExpression.isSatisfiedBy(cal.getTime()));
assertEquals(expectedSize, retrieved.size());
assertNull(r.createRuleUnitDescription(fooBar, "org.drools.ruleunit.TestRuleUnit.class"));
assertThat( qualRef, is( instanceOf( QualifiedNameNode.class ) ) ); assertThat( qualRef.getResultType(), is( BuiltInType.STRING ) ); assertThat( parts.get(0), is( instanceOf( NameRefNode.class ) ) ); assertThat( parts.get(0).getResultType(), is( personType ) ); assertThat( parts.get(1), is( instanceOf( NameRefNode.class ) ) ); assertThat( parts.get(1).getResultType(), is( BuiltInType.STRING ) );
assertEquals(1, rules.size());
assertEquals(2, result.size()); assertEquals(0, (int) iterator.next()); assertEquals(1, (int) iterator.next());
assertEquals(toClone.getFactAlias(), cloned.getFactAlias()); assertEquals(toClone.getExpressionAlias(), cloned.getExpressionAlias());
assertThat( number, is( instanceOf( NumberNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) );
assertEquals(parameterFields.size(), retrieved.size()); assertTrue(retrieved.containsKey(parameter.getName().toString()));
assertEquals("Row 1 My table", p.getName(dt, dt.getData().get(0), 1)); assertEquals("Custom Rule Name", p.getName(dt, dt.getData().get(1), 2)); assertEquals("Row 3 My table", p.getName(dt, dt.getData().get(2), 3));
assertNotNull(getField(Person.class, "firstName")); assertNotNull(getField(SubPerson.class, "firstName")); assertNotNull(getField(SubPerson.class, "additionalField"));
assertTrue(listValues.stream().allMatch(ScenarioSimulationSharedUtils::isCollection)); assertTrue(mapValues.stream().allMatch(ScenarioSimulationSharedUtils::isCollection));
assertEquals(THIS_PLACEHOLDER + ".getAddressName().startsWith(\\"M\\")", concatenated.toString());
assertFalse(p.validateMetadataCell(null)); assertFalse(p.validateMetadataCell((""))); assertFalse(p.validateMetadataCell((" ")));
assertTrue(retrieved.equals(original));
assertNotNull(ksession); assertNotNull(caseAssignment); assertNotNull(forRole); assertEquals(1, forRole.size());
assertTrue(commonEvaluateConstructor(constructorDeclaration, generatedClassName.asString(), superInvocationExpressionsMap, assignExpressionMap));
assertThat(factory.getGeneratorContexts()).hasSize(1); assertThat(factory.getGeneratorContexts().get(0).getDepth()).isEqualTo(0); assertThat(factory.getGeneratorContexts()).hasSize(2); assertThat(factory.getGeneratorContexts().get(1).getDepth()).isEqualTo(0);
assertEquals(KMODULEPACKAGENAME, kiePMMLDroolsModelWithSources.getKModulePackageName());
assertTrue(a.isRedundant(b)); assertTrue(b.isRedundant(a));
assertFalse(builder.isMultipleConstraints()); assertTrue(builder.isMultipleConstraints()); assertTrue(builder.isMultipleConstraints()); assertTrue(builder.isMultipleConstraints());
assertEquals(expected, actual);
assertEquals(factIdentifier.getClassNameWithoutPackage(), "Test");
assertNotEquals(column1, column2);
assertTrue(Objects.equals(column1, column2));
assertEquals(expected, retrieved.toString());
assertEquals(3, rulesArgumentCaptor.getValue() .size());
assertTrue(age.get(new Value(20)) .contains(toni)); assertTrue(age.get(new Value(20)) .contains(eder));
assertEquals(SOURCES_MAP, kiePMMLDroolsModelWithSources.getSourcesMap());
assertEquals(0, result.size());
assertNull(KIE_PMML_MINING_MODEL.getSegmentation()); assertEquals(segmentation, KIE_PMML_MINING_MODEL.getSegmentation());
assertEquals(top, fieldConstraints[0]); assertEquals(bottom, fieldConstraints[1]);
assertTrue(KiePMMLRegressionModelFactory.isRegression(MiningFunction.REGRESSION, null, null)); assertTrue(KiePMMLRegressionModelFactory.isRegression(MiningFunction.REGRESSION, "TARGET", OpType.CONTINUOUS)); assertFalse(KiePMMLRegressionModelFactory.isRegression(MiningFunction.REGRESSION, "TARGET", OpType.CATEGORICAL)); assertFalse(KiePMMLRegressionModelFactory.isRegression(MiningFunction.CLASSIFICATION, null, null));
assertNotNull(retrieved);
assertEquals(LocalTime.of(0, 1, 0), parsedResult.query(TemporalQueries.localTime())); assertEquals(ZoneId.of("Europe/Paris"), parsedResult.query(TemporalQueries.zone()));
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 < 123 )",text);
assertEquals(String.class, loadClass(String.class.getCanonicalName(), classLoader)); assertEquals(int.class, loadClass(int.class.getCanonicalName(), classLoader)); assertEquals(RuleScenarioRunnerHelperTest.class, loadClass(RuleScenarioRunnerHelperTest.class.getCanonicalName(), classLoader)); assertEquals(EnumTest.class, loadClass(EnumTest.class.getCanonicalName(), classLoader));
assertEquals(expected, actual);
assertThat(factory.getMaximumDepth()).isEqualTo(0); assertThat(factory.getMaximumDepth()).isEqualTo(1);
assertEquals(expected, retrieved); assertEquals(expected, retrieved);
assertEquals(factIdentifier.getPackageWithoutClassName(), "");
assertEquals(1, m.getInterpolationVariablesList().length); assertEquals("Integer", m.getInterpolationVariablesList()[0].getDataType());
assertThat( FEELParser.isVariableNameValid( var ), is( true ) );
assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData));
assertThat(rewritten, equalToIgnoringWhiteSpace("{ $address.setShortNumber($interimVar.shortValue()); }"));
assertThat( functionBase, is( instanceOf( FunctionInvocationNode.class ) ) ); assertThat( functionBase.getText(), is( inputExpression ) ); assertThat( function.getName(), is( instanceOf( QualifiedNameNode.class ) ) ); assertThat( function.getName().getText(), is( "my.test.Function" ) ); assertThat( function.getParams(), is( instanceOf( ListNode.class ) ) ); assertThat( function.getParams().getElements(), is( empty() ) );
assertFalse(x.subsumes(b)); assertFalse(b.subsumes(x));
assertEquals( "something == x || something == y && something < x || something < y", result);
assertNotNull(retrieved); assertEquals(BOOLEAN_OPERATOR.XOR, retrieved.getBooleanOperator()); assertEquals(simplePredicates.size(), retrieved.getKiePMMLPredicates().size());
assertNotNull(retrieved); assertFalse(retrieved.isPresent());
assertTrue(objectRaw instanceof String); assertEquals(directMappingSimpleTypeValue, objectRaw);
assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertFalse(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(kiePmmlModel.sourcesMap.containsKey(expected));
assertNotNull(field);
assertEquals( "java.lang.Boolean", p1.getClassName() ); assertEquals( "com.tests.example.Smurf", p2.getClassName() ); assertEquals( "java.lang.Float", p3.getClassName() ); assertEquals( "java.lang.Integer", p4.getClassName() ); assertEquals( "com.tests.example.Smurf", p5.getClassName() ); assertEquals( "java.lang.String", p6.getClassName() );
assertEquals("something == x", result);
assertEquals( "A1", cellName ); assertEquals( "K1", cellName ); assertEquals( "AQ1", cellName ); assertEquals( "AB10", cellName ); assertEquals( "BB100", cellName );
assertEquals(PMML_MODEL.MINING_MODEL, evaluator.getPMMLModelType());
assertNotEquals(column1, column2);
assertEquals(PMML_MODEL.REGRESSION_MODEL, PROVIDER.getPMMLModelType());
assertTrue(notJar.stream().anyMatch(elem -> elem.contains("test-classes")));
assertNotNull(retrieved); assertTrue(retrieved.contains(expected)); assertTrue(retrieved.contains(expected));
assertFalse(abstractRunnerHelper.isFactMappingValueToSkip(factMappingValueWithValidValue)); assertTrue(abstractRunnerHelper.isFactMappingValueToSkip(factMappingValueWithoutValue));
assertTrue(KIE_PMML_MINING_MODEL.isScorable()); assertFalse(KIE_PMML_MINING_MODEL.isScorable());
assertEquals( 1, result.length ); assertEquals( expected, result[0] );
assertFalse(kbuilder.hasErrors()); assertEquals(1, list.size());
assertNotEquals(column1, column2);
assertFalse(kiePMMLSimpleSetPredicate.evaluation(values.get(0))); assertTrue(kiePMMLSimpleSetPredicate.evaluation("23.4"));
assertEquals(expected, retrieved);
assertThat( inNode, is( instanceOf( InNode.class ) ) ); assertThat( inNode.getResultType(), is( BuiltInType.BOOLEAN ) ); assertThat( inNode.getText(), is( inputExpression ) ); assertThat( in.getExprs(), is( instanceOf( RangeNode.class ) ) ); assertThat( range.getStart().getText(), is( "\\"A\\"" ) ); assertThat( range.getEnd().getText(), is( "\\"Z...\\"" ) );
assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertEquals(kiePmmlModel.nestedModels.size(), generatedRuleMappers.size()); assertTrue(((HasSourcesMap) nestedModel).getSourcesMap().containsKey(nestedModel.getKModulePackageName() + "." +KIE_PMML_RULE_MAPPER_CLASS_NAME));
assertEquals(top, fieldConstraints[0]);
assertThat( number, is( instanceOf( SignedUnaryNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( sun.getSign(), is( SignedUnaryNode.Sign.NEGATIVE ) ); assertThat( sun.getExpression(), is( instanceOf( NumberNode.class ) ) ); assertThat( sun.getExpression().getText(), is( "10" ) );
assertNotNull(retrieved); assertEquals(regressionModel.getModelName(), retrieved.getName()); assertEquals(MINING_FUNCTION.byName(regressionModel.getMiningFunction().value()), retrieved.getMiningFunction()); assertEquals(miningFields.get(0).getName().getValue(), retrieved.getTargetField()); assertNotNull(regressionTable); assertTrue(regressionTable instanceof KiePMMLRegressionClassificationTable);
assertNotNull(retrieved); assertEquals(types, retrieved.getTypes()); assertFalse(retrieved.getRules().isEmpty());
assertTrue( "incorrect order in " + sb.toString(), ok );
assertTrue( a.compareTo( b ) < 0 ); assertTrue( b.compareTo( a ) > 0 );
assertThat(value.getStatus()).isEqualTo(FactMappingValueStatus.FAILED_WITH_EXCEPTION); assertThat(value.getExceptionMessage()).isEqualTo(exceptionValue); assertThat(value.getErrorValue()).isNull();
assertNotNull(text); assertEquals("( mTF2 == false ) && ( vTF2 >= 123 )",text);
assertNotNull(body.getStatements()); assertTrue(body.getStatements().isEmpty()); assertFalse(body.getStatements().isEmpty());
assertSame(orig, rm.metadataList); assertEquals(1, rm.metadataList.length); assertEquals("foo", rm.metadataList[0].getAttributeName()); assertEquals("bar", rm.metadataList[0].getValue()); assertEquals(2, rm.metadataList.length); assertEquals("foo", rm.metadataList[0].getAttributeName()); assertEquals("bar1", rm.metadataList[0].getValue()); assertEquals("foo2", rm.metadataList[1].getAttributeName()); assertEquals("bar2", rm.metadataList[1].getValue());
assertTrue(valueAssignExpr.getValue() instanceof NullLiteralExpr);
assertTrue(objectRaw instanceof Map); assertEquals(BigDecimal.valueOf(10), object.get("age")); assertTrue(object.get("creator") instanceof Map); assertEquals("TestName", creator.get("name")); assertEquals("TestSurname", creator.get("surname"));
assertTrue(objectRaw instanceof Person); assertEquals(10, object.getAge()); assertEquals("TestName", object.getFirstName());
assertTrue(retrieved.isEmpty()); assertTrue(retrieved.containsKey("KEY")); assertEquals("VALUE", retrieved.get("KEY"));
assertEquals(-2147483640, first.getId());
assertThat( number, is( instanceOf( SignedUnaryNode.class ) ) ); assertThat( number.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( sun.getSign(), is( SignedUnaryNode.Sign.NEGATIVE ) ); assertThat( sun.getExpression(), is( instanceOf( NumberNode.class ) ) ); assertThat( sun.getExpression().getText(), is( "10.5" ) );
assertNull(abstractScenarioRunnerLocal.simulationRunMetadataBuilder); assertNotNull(abstractScenarioRunnerLocal.simulationRunMetadataBuilder);
assertThat(factory.getMaximumPatternDepth()).isEqualTo(0); assertThat(factory.getMaximumPatternDepth()).isEqualTo(1); assertThat(factory.getMaximumPatternDepth()).isEqualTo(1);
assertThat(bool, is(instanceOf(AtLiteralNode.class))); assertThat(bool.getResultType(), is(BuiltInType.TIME));
assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(kiePmmlModel.sourcesMap.isEmpty()); assertTrue(generatedRuleMappers.isEmpty()); assertTrue(((HasSourcesMap) nestedModel).getSourcesMap().isEmpty());
assertNotNull(text); assertEquals("mTF2 == false",text);
assertNotNull( map );
assertEquals(original.getValue(), copy.getValue()); assertEquals(original, copy); assertNotSame(original, copy);
assertNotNull(retrieved); assertEquals(1, retrieved.size());
assertTrue(objectRaw instanceof Map); assertEquals("value1", object.get("key1")); assertEquals("value2", object.get("key2"));
assertFalse(((HasSourcesMap) kiePmmlModel).getSourcesMap().isEmpty()); assertTrue(((HasSourcesMap) kiePmmlModel).getSourcesMap().containsKey(expected)); assertTrue(((HasSourcesMap) kiePmmlModel).getSourcesMap().containsKey(expected)); assertTrue(((HasSourcesMap) kiePmmlModel).getSourcesMap().isEmpty());
assertEquals(background.getUnmodifiableData().size(), backgroundDataWithIndex.size()); assertEquals(background.getDataByIndex(index - 1), backgroundData.getScesimData());
assertEquals("x goo y", result);
assertEquals(1, result.size()); assertEquals("Mario", tuple.get(oldestV).getName());
assertTrue(column instanceof ArrayColumn); assertEquals("column", column.getName()); assertEquals("StringCell", ((ArrayColumn) column).getCellType());
assertFalse(CommonCodegenUtils.getVariableDeclarator(body, variableName).isPresent()); assertTrue(retrieved.isPresent()); assertEquals(variableName, variableDeclarator.getName().asString());
assertNotNull(retrieved); assertFalse(retrieved.getPackageDeclaration().isPresent()); assertFalse(retrieved.getClassByName(TEMPLATE_CLASS).isPresent()); assertTrue(retrieved.getClassByName(className).isPresent());
assertNotNull(retrieved); assertEquals(3, retrieved.size()); assertEquals(5, retrieved.size()); assertTrue(retrieved.get(3) instanceof InsertObjectCommand); assertEquals("DEFAULT", insertObjectCommand.getEntryPoint()); assertNotNull(insertObjectCommand.getObject()); assertEquals(toInsert, insertObjectCommand.getObject()); assertTrue(retrieved.get(4) instanceof SetGlobalCommand); assertEquals(globalName, setGlobalCommand.getIdentifier()); assertEquals(toInsert, setGlobalCommand.getObject());
assertEquals(0, original.getExpressionElements().size()); assertEquals(0, original.getExpressionElementsWithoutClass().size()); assertEquals(1, original.getExpressionElements().size());
assertEquals(fieldName, retrieved.getName()); assertNotNull(retrieved.getConstraintsAsString()); assertEquals(expected, retrieved.getConstraintsAsString());
assertEquals( 0, result.length );
assertNotNull(retrieved); assertEquals(1, retrieved.size()); assertNotNull(testNodes); assertEquals(1, testNodes.size()); assertEquals("replacement", testNodes.get(0).getNodeName());
assertNotNull(retrieved); assertEquals(pkgUUID, retrieved.getPackageUUID());
assertNotNull(retrieved); assertEquals(types, retrieved.getTypes()); assertFalse(retrieved.getRules().isEmpty());
assertEquals(1, retrieved.size());
assertNotNull(retrieved); assertEquals(5, retrieved.size());
assertTrue( MultiMapFactory.make( true ) instanceof ChangeHandledMultiMap );
assertEquals(retrieved, o);
assertEquals(retrieved.values().toArray()[0], newValue); assertTrue(retrieved.isEmpty()); assertEquals(2, retrieved.size());
assertEquals( 2, result.length ); assertEquals( expected1, result[0] ); assertEquals( expected2, result[1] );
assertNotNull(retrieved); assertTrue(retrieved.contains("CREATED"));
assertNotNull( map );
assertEquals("Test template 2\\n\\nTest template 1\\n\\n", drl);
assertFalse(age.get(new Value(20)) .contains(toni)); assertTrue(age.get(new Value(10)) .contains(toni));
assertNotEquals(column1, column2);
assertTrue(resolver.hasPermission(permissible, "commandbook.motd")); assertFalse(resolver.hasPermission(permissible, "commandbook.cuteasianboys")); assertFalse(resolver.hasPermission(permissible, "commandbook.warp.remove")); assertTrue(resolver.hasPermission(permissible, "commandbook.warp.create"));
assertTrue(resolver.inGroup(permissible, "a")); assertTrue(resolver.inGroup(permissible, "b")); assertFalse(resolver.inGroup(permissible, "c"));
assertEquals(0, location1.getX(), EPSILON); assertEquals(TEST_VALUE, location2.getX(), EPSILON); assertEquals(0, location2.getY(), EPSILON); assertEquals(0, location2.getZ(), EPSILON);
assertTrue(resolver.hasPermission(permissible, "commandbook.spawnmob.pig")); assertTrue(resolver.hasPermission(permissible, "commandbook.spawnmob.spider")); assertTrue(resolver.hasPermission(permissible, "commandbook.spawnmob.spider.skeleton"));
assertTrue(resolver.hasPermission(permissible, "testperm.test1")); assertFalse(resolver.hasPermission(permissible, "testperm.somethingelse")); assertFalse(resolver.hasPermission(permissible, "testperm.test1.anything")); assertFalse(resolver.hasPermission(permissible, "completely.unrelated"));
assertEquals(world, location.getExtent());
assertEquals(position, location.toVector());
assertEquals(0, location1.getZ(), EPSILON); assertEquals(0, location2.getX(), EPSILON); assertEquals(0, location2.getY(), EPSILON); assertEquals(TEST_VALUE, location2.getZ(), EPSILON);
assertNotNull(BukkitWorld.toBukkitTreeType(type), "No mapping for: " + type);
assertEquals(0, e.getPosition(), "Error position"); assertEquals(0, e.getPosition(), "Error position"); assertEquals(0, e.getPosition(), "Error position"); assertEquals(6, e.getPosition(), "Error position"); assertEquals(0, e.getPosition(), "Error position"); assertEquals(0, e.getPosition(), "Error position"); assertEquals(7, e.getPosition(), "Error position");
assertEquals(0, location1.getY(), EPSILON); assertEquals(0, location2.getX(), EPSILON); assertEquals(TEST_VALUE, location2.getY(), EPSILON); assertEquals(0, location2.getZ(), EPSILON);
assertThat(configConsumer.counter.get()).isEqualTo(0L); assertThat(operConsumer.counter.get()).isEqualTo(0L);
assertThat(configConsumer.counter.get()).isEqualTo(1L); assertThat(operConsumer.counter.get()).isEqualTo(1L);
assertThat(configConsumer.counter.get()).isEqualTo(0L); assertThat(operConsumer.counter.get()).isEqualTo(1L);
assertThat(configConsumer.counter.get()).isEqualTo(1L); assertThat(operConsumer.counter.get()).isEqualTo(0L);
assertThat(configConsumer.counter.get()).isEqualTo(1L); assertThat(operConsumer.counter.get()).isEqualTo(1L);
assertThat(model) .describedAs("A restbuilder model object") .isNotNull() .isInstanceOf(Model.class); assertThat(model.getNamespace()).isEqualTo("example"); assertThat(model.getOperations()).isNotEmpty().hasSize(2); assertThat(accountResource.getPreamble()).isNotEmpty(); assertThat(accountResource.getComment()).isNotEmpty(); assertThat(cancellationOperation.getAttributes()).isNotEmpty();
assertThat(version).isEqualTo("0.1.2-SNAPSHOT, commit 0123456789, built xyz");
assertThat(threadContext.startTraceEntry(null, timerName)) .isEqualTo(NopTransactionService.TRACE_ENTRY); assertThat(threadContext.startTraceEntry(messageSupplier, null)) .isEqualTo(NopTransactionService.TRACE_ENTRY); assertThat(threadContext.startTraceEntry(messageSupplier, timerName) .getClass().getName()).endsWith("$DummyTraceEntryOrQuery");
assertThat(value).isTrue();
assertThat(list.get(0)).isEqualTo(e1); assertThat(list.get(1)).isEqualTo(t1); assertThat(list.get(2)).isEqualTo(e2); assertThat(list.get(3)).isEqualTo(t2);
assertThat(HttpServices.shouldLogException(e)).isFalse();
assertThat(newLines).containsExactly("before=test", "collector.address=", "after=test");
assertThat(logger.getLevel()).isEqualTo(Level.OFF);
assertThat(methods).hasSize(1);
assertThat(mailService.getMessage()).isNotNull(); assertThat(((String) mailService.getMessage().getContent()).trim()) .isEqualTo("95th percentile over the last 1 minute is greater than or equal to the" + " alert threshold of 1 millisecond.");
assertThat(newLines).containsExactly("before=test", "collector.address=localhost:8181", "after=test");
assertThat(maskRequestQueryString).isEqualTo("test=one&xpassworry=nomask&test=two");
assertThat(gaugeValues).hasSize(1); assertThat(gaugeValues.get(0).getValue()).isEqualTo(555); assertThat(gaugeValues.get(0).getWeight()).isEqualTo(1);
assertThat(logger.getName()).isEqualTo("xyz");
assertThat(Version.getManifest(long.class)).isNull();
assertThat(logger.getLevel()).isEqualTo(Level.CONFIG);
assertThat(value).containsExactly("first", "second");
assertThat(newLines).containsExactly("before=test", "collector.address=localhost:8181", "after=test");
assertThat(list.get(0)).isEqualTo(e1); assertThat(list.get(1)).isEqualTo(t1); assertThat(list.get(2)).isEqualTo(e2); assertThat(list.get(3)).isEqualTo(t2); assertThat(list.get(4)).isEqualTo(e3); assertThat(list.get(5)).isEqualTo(t3);
assertThat(newLines).isEqualTo(lines);
assertThat(maskRequestQueryString).isEqualTo("test=one&xpasswordy=****&test=two");
assertThat(Reflection.getMethod(String.class, "thereWillNeverBeMethodWithThisName")) .isNull();
assertThat(((TimerNameImpl) timerName).name()).isEqualTo("unknown");
assertThat(version).isEqualTo("0.1.2-SNAPSHOT, built xyz");
assertThat(value).isEqualTo("first");
assertThat(newLines).containsExactly("before=test", "collector.address=", "after=test");
assertThat(((TimerNameImpl) timerName).name()).isEqualTo("unknown");
assertThat(LiveJvmServiceImpl.parseProcessId("123456@host")).isEqualTo(123456);
assertThat(Compilations.getPublicClassName("package a.b; public class X {}")) .isEqualTo("a.b.X"); assertThat(Compilations.getPublicClassName(" package a.b; public class X {}")) .isEqualTo("a.b.X"); assertThat(Compilations.getPublicClassName("\\n package a.b; \\n public class X {}")) .isEqualTo("a.b.X");
assertThat(JavaVersion.parseIsJava6("1.5")).isFalse(); assertThat(JavaVersion.parseIsJava6("1.7")).isFalse(); assertThat(JavaVersion.parseIsJava6("1.7.0")).isFalse(); assertThat(JavaVersion.parseIsJava6("1.8.0")).isFalse();
assertThat(Ordering.natural().sortedCopy(permissions)).containsExactly("agent:abc:error", "agent:abc:jvm:environment", "agent:abc:jvm:gauges", "agent:abc:transaction");
assertThat(content).isEqualTo("{\\"message\\":" + "\\"Query timed out (timeout is configurable under Configuration > Advanced)\\"}"); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.REQUEST_TIMEOUT);
assertThat(ToolMain.getGlowrootJarFile(codeSource)).isEqualTo(glowrootJar);
assertThat(version).isEqualTo("0.1.2-SNAPSHOT");
assertThat(optionalService.getAvailability().getAvailable()).isFalse(); assertThat(optionalService.getAvailability().getReason()).isEqualTo("abc");
assertThat(value).isEqualTo("4");
assertThat(RollupService.millisUntilNextRollup(15000)).isEqualTo(55000); assertThat(RollupService.millisUntilNextRollup(30000)).isEqualTo(40000); assertThat(RollupService.millisUntilNextRollup(45000)).isEqualTo(25000); assertThat(RollupService.millisUntilNextRollup(60000)).isEqualTo(10000);
assertThat(methods).hasSize(1);
assertThat(value).isEqualTo("3");
assertThat(value).isEqualTo(3);
assertThat(Level.WARNING.getName()).isEqualTo("WARNING");
assertThat(classNames).contains("com.google.common.collect.Lists$OnePlusArrayList");
assertThat(size).isEqualTo(0);
assertThat(mailService.getMessage()).isNotNull(); assertThat(((String) mailService.getMessage().getContent()).trim()) .isEqualTo("Average over the last 1 minute is less than or equal to the alert" + " threshold of 500 milliseconds per second.");
assertThat(content).isEqualTo("{\\"message\\":\\"\\"}"); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.PRECONDITION_FAILED);
assertThat(value).isNull();
assertThat(incidentDao.readOpenIncident(AGENT_ID, alertCondition, AlertSeverity.HIGH)) .isNull();
assertThat(version).isEqualTo("0.1.2");
assertThat(mailService.getMessage()).isNull();
assertThat(logger.isLoggable(Level.SEVERE)).isFalse(); assertThat(logger.isLoggable(Level.WARNING)).isFalse(); assertThat(logger.isLoggable(Level.INFO)).isFalse(); assertThat(logger.isLoggable(Level.CONFIG)).isFalse(); assertThat(logger.isLoggable(Level.FINE)).isFalse(); assertThat(logger.isLoggable(Level.FINER)).isFalse(); assertThat(logger.isLoggable(Level.FINEST)).isFalse();
assertThat(node.get("message").asText()).isEqualTo("java.lang.Exception: Banother message"); assertThat(node.get("stackTrace")).isNotNull(); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.INTERNAL_SERVER_ERROR);
assertThat(maskRequestQueryString) .isEqualTo("test=one&&&===&=&xpassworry=no=mask&&&==&test=two");
assertThat(newLines).containsExactly("before=test", "after=test");
assertThat(classNames).contains("com.google.common.collect.Lists$OnePlusArrayList");
assertThat(mailService.getMessage()).isNull();
assertThat(ToolMain.getGlowrootJarFile(codeSource)).isNull();
assertThat(logger.getSlf4jLogger().getName()).isEqualTo("abc");
assertThat(value).isEqualTo(3);
assertThat(lazySecretKey.getExisting().getEncoded()).isEqualTo(encodedKey);
assertThat(node.get("message").asText()) .isEqualTo("java.sql.SQLException: Another message"); assertThat(node.get("stackTrace")).isNotNull(); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.INTERNAL_SERVER_ERROR);
assertThat(glowrootLoggerMethods).containsAll(loggerMethods);
assertThat(mailService.getMessage()).isNotNull(); assertThat(((String) mailService.getMessage().getContent()).trim()) .isEqualTo("Average over the last 1 minute is greater than or equal to the alert" + " threshold of 500 milliseconds per second.");
assertThat(args).containsExactly(1, 0, exception);
assertThat(AgentPremain.getGlowrootJarFile(codeSource)).isEqualTo(glowrootJar);
assertThat(((TimerNameImpl) timerName).name()).isEqualTo("unknown");
assertThat(gaugeValues).isEmpty();
assertThat(lowerSixBytes).isEqualTo("9ab0affd1a83");
assertThat(JavaVersion.parseIsJava6("1.6")).isTrue(); assertThat(JavaVersion.parseIsJava6("1.6.0")).isTrue(); assertThat(JavaVersion.parseIsJava6("1.6.0_45")).isTrue();
assertThat(args).containsExactly(0, exception);
assertThat(classNames).contains("com.google.common.collect.ImmutableMap");
assertThat(AgentPremain.getGlowrootJarFile(null)).isNull();
assertThat(gaugeValues).isEmpty();
assertThat(value).containsExactly("a", "x", "z");
assertThat(ticker.read()).isEqualTo(0);
assertThat(lowerSixBytes).isEqualTo("70485e624d15");
assertThat(value).isEqualTo("b");
assertThat(((TimerNameImpl) timerName).name()).isEqualTo("z");
assertThat(lowerSixBytes).isEqualTo("00000001e240");
assertThat(LiveJvmServiceImpl.parseProcessId("")).isNull(); assertThat(LiveJvmServiceImpl.parseProcessId("x")).isNull(); assertThat(LiveJvmServiceImpl.parseProcessId("x:y")).isNull(); assertThat(LiveJvmServiceImpl.parseProcessId("@y")).isNull(); assertThat(LiveJvmServiceImpl.parseProcessId("x@y")).isNull();
assertThat(value).containsExactly("a", "x", "z");
assertThat(JavaVersion.parseIsJava6(null)).isFalse();
assertThat(version).isEqualTo("unknown");
assertThat(value).isEqualTo("1");
assertThat(message.getFrom()[0].toString()).isEqualTo("From Example <from@example.org>"); assertThat(message.getRecipients(Message.RecipientType.TO)[0].toString()) .isEqualTo("to@example.org"); assertThat(message.getSubject()).isEqualTo("[Glowroot] Test email"); assertThat(message.getContent()).isEqualTo("");
assertThat(HttpServices.shouldLogException(e)).isTrue();
assertThat(content).isEqualTo("{\\"message\\":\\"\\"}"); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.PRECONDITION_FAILED);
assertThat(content).isEqualTo("{\\"message\\":\\"A message\\"}"); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.PRECONDITION_FAILED);
assertThat(threadContext.startAsyncTraceEntry(null, timerName)) .isEqualTo(NopTransactionService.ASYNC_TRACE_ENTRY); assertThat(threadContext.startAsyncTraceEntry(messageSupplier, null)) .isEqualTo(NopTransactionService.ASYNC_TRACE_ENTRY); assertThat(threadContext.startAsyncTraceEntry(messageSupplier, timerName) .getClass().getName()).endsWith("$DummyTraceEntryOrQuery");
assertThat(json).isEqualTo("[{\\"startOffsetNanos\\":0,\\"durationNanos\\":0,\\"message\\":\\"\\"," + "\\"childEntries\\":[{\\"startOffsetNanos\\":0,\\"durationNanos\\":0,\\"message\\":\\"\\"}]" + "}]");
assertThat(Reflection.getMethod(null, null)).isNull();
assertThat(gaugeValues).isEmpty();
assertThat(args).containsExactly(0);
assertThat(list.get(0)).isEqualTo(e1); assertThat(list.get(1)).isEqualTo(t1); assertThat(list.get(2)).isEqualTo(e2);
assertThat(args).containsExactly(1, 0);
assertThat(value).isEqualTo(ImmutableMap.of("a", "b", "c", "d", "e", "f"));
assertThat(Reflection.invokeWithDefault(null, null, "the default")) .isEqualTo("the default");
assertThat(file.isDirectory()).isTrue();
assertThat(lazySecretKey.getOrCreate().getEncoded()).isEqualTo(encodedKey);
assertThat(mailService.getMessage()).isNull();
assertThat(list.get(0)).isEqualTo(e1); assertThat(list.get(1)).isEqualTo(e2);
assertThat(gaugeValues).isEmpty();
assertThat(logger.getLevel()).isEqualTo(Level.SEVERE);
assertThat(message.getFrom()[0].toString()) .isEqualTo("Glowroot <glowroot@" + localHostname + ">"); assertThat(message.getRecipients(Message.RecipientType.TO)[0].toString()) .isEqualTo("to@example.org"); assertThat(message.getSubject()).isEqualTo("[Glowroot] Test email"); assertThat(message.getContent()).isEqualTo("");
assertThat(value).isEqualTo(3);
assertThat(maskRequestQueryString) .isEqualTo("test=one&&&===&=&xpasswordy=****&&&==&test=two");
assertThat(logger.getLevel()).isEqualTo(Level.FINE);
assertThat(file.isDirectory()).isTrue();
assertThat(threadContext.startTimer(null)).isEqualTo(NopTimer.INSTANCE); assertThat(threadContext.startTimer(timerName)).isEqualTo(NopTimer.INSTANCE);
assertThat(value).containsExactly("first", "second");
assertThat(classNames).contains("com.google.common.collect.ImmutableMap");
assertThat(version).isEqualTo("0.1.2-SNAPSHOT, built xyz");
assertThat(logger.getLevel()).isEqualTo(Level.WARNING);
assertThat(HttpServices.shouldLogException(e)).isFalse();
assertThat(newLines).containsExactly("before=test", "after=test");
assertThat(logger.getLevel()).isEqualTo(Level.FINEST);
assertThat(logger.isLoggable(Level.SEVERE)).isTrue(); assertThat(logger.isLoggable(Level.WARNING)).isTrue(); assertThat(logger.isLoggable(Level.INFO)).isFalse(); assertThat(logger.isLoggable(Level.CONFIG)).isFalse(); assertThat(logger.isLoggable(Level.FINE)).isFalse(); assertThat(logger.isLoggable(Level.FINER)).isFalse(); assertThat(logger.isLoggable(Level.FINEST)).isFalse();
assertThat(Ordering.natural().sortedCopy(permissions)).containsExactly( "agent:*:error", "agent:*:jvm:environment", "agent:*:jvm:gauges", "agent:*:transaction");
assertThat(message.getFrom()[0].toString()) .isEqualTo("From Example <glowroot@" + localHostname + ">"); assertThat(message.getRecipients(Message.RecipientType.TO)[0].toString()) .isEqualTo("to@example.org"); assertThat(message.getSubject()).isEqualTo("[Glowroot] Test email"); assertThat(message.getContent()).isEqualTo("");
assertThat(version).isEqualTo("unknown");
assertThat(node.get("message").asText()).isEqualTo("java.lang.Exception: Wrapped message"); assertThat(node.get("stackTrace")).isNotNull(); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.INTERNAL_SERVER_ERROR);
assertThat(content).isEqualTo("{\\"message\\":\\"A message\\"}"); assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.PRECONDITION_FAILED);
assertThat(gaugeValues).hasSize(1); assertThat(gaugeValues.get(0).getValue()).isEqualTo(5); assertThat(gaugeValues.get(0).getWeight()).isEqualTo(SECONDS.toNanos(2));
assertThat(Ordering.natural().sortedCopy(permissions)).containsExactly( "agent:abc,mno,xyz:error", "agent:abc,mno,xyz:jvm:environment", "agent:abc,mno,xyz:jvm:gauges", "agent:abc,mno,xyz:transaction");
assertThat(classNames).hasSize(5);
assertThat(HttpServices.shouldLogException(e)).isTrue();
assertThat(version).isEqualTo("0.1.2-SNAPSHOT");
assertThat(json).isEqualTo("{\\"expired\\":true}");
assertThat(AgentPremain.getGlowrootJarFile(codeSource)).isNull();
assertThat(classNames).contains("com.google.common.base.Strings");
assertThat(args).containsExactly(1, 2, 0);
assertThat(keyValuePairs).containsExactly("x", "y", "z,z,z");
assertThat(logger.isLoggable(Level.SEVERE)).isTrue(); assertThat(logger.isLoggable(Level.WARNING)).isTrue(); assertThat(logger.isLoggable(Level.INFO)).isTrue(); assertThat(logger.isLoggable(Level.CONFIG)).isTrue(); assertThat(logger.isLoggable(Level.FINE)).isTrue(); assertThat(logger.isLoggable(Level.FINER)).isTrue(); assertThat(logger.isLoggable(Level.FINEST)).isTrue();
assertThat(newLines).containsExactly("before=test", "collector.address=localhost:8181", "after=test");
assertThat(ToolMain.getGlowrootJarFile(null)).isNull();
assertThat(HttpServices.shouldLogException(e)).isFalse();
assertThat(list.get(0)).isEqualTo(e1); assertThat(list.get(1)).isEqualTo(e2); assertThat(list.get(2)).isEqualTo(t2);
assertThat(traceId).hasSize(32); assertThat(traceId.toLowerCase()).isEqualTo(traceId);
assertThat(actual.getContentPath().getPath(), is("success.jsp"));
assertEquals(1, pkgArray.length);
assertEquals(buffer[i], myMessage.charAt(i));
assertEquals(msg, myMessage);
assertEquals(msg, myMessage);
assertTrue(stream.read(new byte[myMessage.length()/2], 0, myMessage.length()/2) > 0); assertEquals(remainder, myMessage.substring(myMessage.length()/2, myMessage.length()));
assertEquals(msg, myMessage.trim());
assertEquals(msg, myMessage.trim());
assertEquals(partialBuffer[i], myMessage.charAt(i));
assertEquals(msg1, myMessage.trim()); assertEquals(msg2, myMessage2.trim()); assertEquals(msg3, myMessage3.trim());
assertEquals(msg, myMessage);
assertEquals(msg1, myMessage); assertEquals(msg2, myMessage2);
assertEquals(msg1, myMessage); assertEquals(msg2, myMessage2);
assertEquals(msg1, myMessage.trim()); assertEquals(msg2, myMessage2.trim());
assertEquals(buffer[i], 0); assertEquals(buffer[i], myMessage.charAt(i - myMessage.length()/2));
assertThat(MatrixUtils.sumRows(nonZeroColumnMatrix(), null)) .isEqualTo(new double[] {11, 21.5, 3});
assertEquals(9, st.getStatesCount());
assertEquals("wi", seq.subSequence(2, 4).toString());
assertEquals(4, seq.length()); assertEquals(2, seq.length());
assertThat(MatrixUtils.computeSparseness(sparse)).isEqualTo(1);
assertThat(actualMaxColumnIndices).isEqualTo(expectedMaxIndices); assertThat(actualMaxValues).isEqualTo(expectedMaxValues);
assertEquals(seq.toString(), "Dawid Weiss");
assertEquals("awi", seq.toString());
assertEquals(8, st.getTransitionsCount());
assertThat(MatrixUtils.computeOrthogonality(orthogonal)).isEqualTo(0.0, Offset.offset(0.00));
assertThat(MatrixUtils.maxInRow(nonZeroColumnMatrix(), 1)).isEqualTo(3);
assertThat(MatrixUtils.computeSparseness(sparse)).isEqualTo(0);
assertThat(MatrixUtils.computeOrthogonality(identical)).isEqualTo(1.0, Offset.offset(0.02));
assertEquals(seq.toString(), "Dawid Weiss"); assertEquals(seq.toString(), "Abcdef"); assertEquals(seq, new MutableCharArray("awi")); assertTrue(h1 != h2);
assertFalse(seq.equals("Dawid Weiss")); assertTrue(seq.subSequence(1, 5).equals(new MutableCharArray("awid")));
assertThat( MatrixUtils.frobeniusNorm( new DenseDoubleMatrix2D( new double[][] { {1, -1}, {2, 0} }))) .isEqualTo(Math.sqrt(1 * 1 + (-1) * (-1) + 2 * 2));
assertThat(actualMinColumnIndices).isEqualTo(expectedMinIndices); assertThat(actualMinValues).isEqualTo(expectedMinValues);
assertFalse(testClass.supportsAggressiveRelease());
assertTrue(testClass.isConnectionHandleAlive(mockConnection));
assertEquals(mockConnection, testClass.getConnection());
assertTrue(this.testClass.isExpired(System.currentTimeMillis() + 9999L)); assertFalse(this.testClass.isExpired(System.currentTimeMillis())); assertFalse(this.testClass.isExpired(System.currentTimeMillis())); assertFalse(this.testClass.isExpired()); assertFalse(this.testClass.isExpired()); assertTrue(this.testClass.isExpired());
assertNotNull(PoolUtil.generateSQLException("foo", new SQLException())); assertNotNull(PoolUtil.generateSQLException("foo", new SQLException()));
assertEquals(99, config.getMinConnectionsPerPartition());
assertTrue(this.testClass.trackedStatement.containsKey(mockStatement)); assertFalse(this.testClass.trackedStatement.containsKey(mockStatement));
assertEquals(6, testClass.getTotalFree()); assertEquals(3, testClass.getTotalFree());
assertEquals("nullhello", PoolUtil.safePrint(null, "hello"));
assertTrue(testClass.isConnectionHandleAlive(mockConnection));
assertEquals(99, config.getMinConnectionsPerPartition());
assertEquals(mockConnection, testClass.getAsyncConnection().get());
assertEquals(123, config.getMinConnectionsPerPartition());
assertEquals(10, testClass.getTotalCreatedConnections()); assertEquals(5, testClass.getTotalCreatedConnections());
assertNotSame(mockInternalConnection, this.testClass.getInternalConnection());
assertNotNull(testClass.obtainRawInternalConnection()); assertNotNull(testClass.obtainRawInternalConnection());
assertEquals("foo", this.testClass.getUrl());
assertFalse( this.testClass.logicallyClosed.get());
assertNotSame(mockDataSource, ddsp.getTargetDataSource());
assertEquals(mockConnection, testClass.getConnection());
assertEquals(mockConfig, testClass.getConfig());
assertNull(new X().pollConnection());
assertEquals(mockConnection, testClass.getConnection());
assertEquals("ID=\'123\' AND FOO=\'?\' and LALA=\\"BOO\\" NULL (blob of unknown length) (cblob of unknown length) (array of unknown type) (ref of unknown type) ?", PoolUtil.fillLogParams("ID=? AND FOO=\'?\' and LALA=\\"BOO\\" ? ? ? ? ? ?", logParams));
assertEquals("", this.testClass.maybeCaptureStackTrace()); assertNotSame("", this.testClass.maybeCaptureStackTrace());
assertNull(testClass.getConnection());
assertEquals("foo", up.getUsername()); assertEquals("bar", up.getPassword()); assertTrue(up.equals( up2 ) ); assertFalse(up.equals( up3 ) ); assertFalse(up4.equals(new String())); assertNotNull(up.hashCode());
assertEquals(count+5, testClass.getCreatedConnections());
assertNull(testClass.getConnection());
assertEquals(0, config.getMinConnectionsPerPartition());
assertNotNull(statement); assertNull(cache.get(sql));
assertEquals(4, testClass.getTotalLeased()); assertEquals(2, testClass.getTotalLeased());
assertNull(cache.get("nonExistent"));
assertNotNull(this.testClass.toString());
assertFalse(testClass.isConnectionHandleAlive(mockConnection));
assertTrue(this.testClass.finalizableRefs.isEmpty());
assertEquals("a\\\\nb\\\\tc", TextUtil.toJavaString("a\\nb\\tc"));
assertEquals(2076710303, EndianNumbers.toBEInt(123, 456, 789, 159));
assertNull(this.halt.getRoadSegment()); assertNull(this.halt.getRoadSegment()); assertSame(this.segment2, this.halt.getRoadSegment()); assertSame(this.segment1, this.halt.getRoadSegment()); assertNull(this.halt.getRoadSegment());
assertEquals("#45123456", XMLUtil.toColor(0x45123456)); assertEquals("lime", XMLUtil.toColor(0xFF00FF00));
assertEquals("file", FileSystem.shortBasename(createHttpUrl())); assertEquals("file", FileSystem.shortBasename(createFileInJarUrl())); assertEquals("file with space", FileSystem.shortBasename(createFileUrlWithSpacesHardCoded())); assertEquals("file", FileSystem.shortBasename(createFileInJarUrlWithSpaces()));
assertTrue(test.addAll(this.reference)); assertTrue(this.reference.contains(p)); assertEquals(this.reference.size(), nb);
assertNull(this.stop.getGeoPosition()); assertNotNull(p);
assertEquals(-1, this.line.indexOf(this.itinerary1)); assertEquals(-1, this.line.indexOf(this.itinerary2)); assertEquals(0, this.line.indexOf(this.itinerary1)); assertEquals(1, this.line.indexOf(this.itinerary2));
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer1);
assertArrayEquals(new byte[]{21, -51, 91, 7, 0, 0, 0, 0}, EndianNumbers.parseLELong(123456789));
assertTrue(this.iterator.hasNext()); assertFalse(this.iterator.hasNext());
assertEquals(-1, this.xml.getIdentifier(new File("x"))); assertEquals(2, this.xml.getIdentifier(new File("a.txt"))); assertEquals(3, this.xml.getIdentifier(new File("b.txt"))); assertEquals(4, this.xml.getIdentifier(new File("a.jpg")));
assertEquals(-1, MathUtil.sign(-145.25)); assertEquals(-1, MathUtil.sign(-0.25)); assertEquals(0, MathUtil.sign(-0.)); assertEquals(0, MathUtil.sign(0.)); assertEquals(0, MathUtil.sign(+0.)); assertEquals(1, MathUtil.sign(145.25)); assertEquals(1, MathUtil.sign(0.25));
assertSame(this.busNetwork, this.halt.getBusNetwork());
assertNotNull(p); assertSame(this.segment4, p.getSegment()); assertNotNull(p); assertSame(this.segment6, p.getSegment()); assertNotNull(p); assertSame(this.segment6, p.getSegment());
assertEquals(0, this.line.getBusItineraryCount()); assertEquals(2, this.line.getBusItineraryCount());
assertTrue(this.location11.toBounds2D().isEmpty()); assertTrue(this.location12.toBounds2D().isEmpty()); assertTrue(this.location13.toBounds2D().isEmpty()); assertTrue(this.location21.toBounds2D().isEmpty()); assertTrue(this.location22.toBounds2D().isEmpty()); assertTrue(this.location23.toBounds2D().isEmpty());
assertEquals("An in-depth look at creating applications \\n with XML.", XMLUtil.getText(this.document, "catalog", "book", "description"));
assertEquals("hello", new String(XMLUtil.parseString(b64)));
assertNull(TextUtil.parseHTML(null)); assertEquals(expected, actual);
assertNotNull(names); assertEquals(8, names.size());
assertEquals(4, this.pool.getAttributeCount());
assertEquals("a\\\\\\\\nbc\\\\\\\\T", TextUtil.toJavaString("a\\\\nbc\\\\T"));
assertNull(FileSystem.makeAbsolute((File)null, root));
assertTrue(Arrays.equals(new String[0], VMCommandLine.getCommandLineParameters())); assertTrue(Arrays.equals(commandLine, VMCommandLine.getCommandLineParameters())); assertTrue(Arrays.equals(commandLine2, VMCommandLine.getCommandLineParameters()));
assertEquals(3, this.list.getLastValueOnSegment(0)); assertEquals(10, this.list.getLastValueOnSegment(2)); assertEquals(25, this.list.getLastValueOnSegment(4));
assertArrayEquals(new byte[]{-113, -62, -43, 85, 52, 111, -99, 65}, EndianNumbers.parseLEDouble(123456789.45875));
assertNotNull(obj); assertTrue(obj instanceof NumberStub); assertNotNull(obj); assertTrue(obj instanceof NumberStub); assertNotNull(obj); assertTrue(obj instanceof NumberStub);
assertNull(this.halt.getRoadSegment()); assertNull(p); assertNull(p); assertNotNull(p); assertNotNull(p); assertNull(p);
assertTrue(test.addAll(this.reference)); assertEquals(this.reference.size(), test.size()); assertTrue(this.reference.add(newElement)); assertTrue(test.add(newElement), msg); assertEquals(this.reference.size(), test.size(), msg); assertTrue(test.slowContains(newElement), msg);
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertEquals("ab\\\\\\\\u0004c", TextUtil.toJsonString("ab\\\\u0004c"));
assertNull(Resources.getResourceAsStream(ResourcesTest.class, null)); assertNotNull(is); assertNotNull(is); assertNotNull(is); assertNotNull(is); assertNull(Resources.getResourceAsStream((Class<?>)null, null)); assertNull(is); assertNull(is); assertNull(is);
assertEquals(this.resource, this.pool.getResource());
assertEquals(0, this.line.size()); assertEquals(2, this.line.size());
assertEquals(4, this.accessor.getAttributeCount());
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertSame(this.busNetwork, this.hub.getBusNetwork());
assertNotNull(actual); assertEquals(res, actual, "A:"); assertNotNull(actual); assertEquals(res, actual, "B:"); assertNotNull(actual); assertEquals(res, actual, "C:"); assertNotNull(actual); assertEquals(res, actual, "D:");
assertEquals(4, c.getParameterCount());
assertEquals(ShapeElementType.POINT, MapElementGroup.classifiesElement(new MapPoint(0, 0))); assertEquals(ShapeElementType.MULTIPOINT, MapElementGroup.classifiesElement(new MapMultiPoint())); assertEquals(ShapeElementType.POLYLINE, MapElementGroup.classifiesElement(new MapPolyline())); assertEquals(ShapeElementType.POLYGON, MapElementGroup.classifiesElement(new MapPolygon())); assertEquals(ShapeElementType.UNSUPPORTED, MapElementGroup.classifiesElement(new MapCircle(0, 0)));
assertTrue(iterator.hasNext()); assertNotNull(obj); assertTrue(obj instanceof NumberStub); assertEquals(i, ((Number)obj).intValue()); assertFalse(iterator.hasNext());
assertEquals(ShapeElementType.POLYGON, this.reader.getShapeElementType());
assertSame(this.halt1, this.itinerary.getBusHalt("HALT1")); assertSame(this.halt2, this.itinerary.getBusHalt("HALT2")); assertNull(this.itinerary.getBusHalt("HALT3"));
assertEquals("ab\'c", TextUtil.toJsonString("ab\'c"));
assertNull(this.halt.getRoadSegment()); assertNotNull(p); assertTrue(p instanceof GeoLocationNowhere); assertNotNull(p); assertTrue(p instanceof GeoLocationNowhere); assertNotNull(p); assertTrue(p instanceof GeoLocationPoint); assertNotNull(p); assertTrue(p instanceof GeoLocationPoint); assertNotNull(p); assertTrue(p instanceof GeoLocationNowhere);
assertTrue(this.constraint.isValidElement(element));
assertTrue(this.network.isValidPrimitive()); assertEquals(2, this.network.getBusHubCount()); assertTrue(this.network.isValidPrimitive()); assertTrue(this.network.isValidPrimitive()); assertEquals(0, this.network.getBusHubCount());
assertEquals(1, this.cPath.size()); assertTrue(this.cPath.contains(this.path1)); assertFalse(this.cPath.contains(this.path2)); assertFalse(this.cPath.contains(this.path3)); assertEquals(0, this.cPath.size()); assertFalse(this.cPath.contains(this.path1)); assertFalse(this.cPath.contains(this.path2)); assertFalse(this.cPath.contains(this.path3));
assertEquals(PHOTOGRAMMETRIE_VALUE, this.provider.getAttribute("SOURCE").getValue()); assertEquals(15., this.provider.getAttribute("HAUTEUR").getValue()); assertNull(this.provider.getAttribute("NOFIELD")); assertNull(this.provider.getAttribute("NEWFIELD"));
assertTrue(test.addAll(this.reference)); assertEquals(this.reference.size(), test.size()); assertTrue(this.reference.add(newElement), msg); assertTrue(test.add(newElement), msg); assertEquals(this.reference.size(), test.size(), msg); assertTrue(test.slowContains(newElement), msg);
assertEquals(0, this.itinerary.getRoadSegmentCount()); assertEquals(2, this.itinerary.getRoadSegmentCount());
assertEquals(4, this.writer.lastWritten);
assertEquals(new AttributeValueImpl(1), this.container.getAttribute("B", defaultValue)); assertSame(defaultValue, this.container.getAttribute("F", defaultValue)); assertSame(defaultValue, this.container.getAttribute("Z4", defaultValue));
assertEquals(0, this.primitive.getFlags()); assertEquals(32, this.primitive.getFlags());
assertTrue(this.itinerary.isValidPrimitive()); assertFalse(iterator.hasNext()); assertFalse(this.itinerary.isValidPrimitive());
assertNotNull(elt); assertEquals("name1", elt.getName()); assertEquals("Text", elt.getAttribute("attr1", (String) null));
assertEquals("004f", TextUtil.formatHex(0x4F, 4));
assertEquals(31688, EndianNumbers.toBEShort(123, 456));
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.itinerary1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.itinerary2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(-1, this.network.indexOf(this.line1)); assertEquals(-1, this.network.indexOf(this.line2)); assertEquals(-1, this.network.indexOf(new BusLine())); assertEquals(0, this.network.indexOf(this.line1)); assertEquals(1, this.network.indexOf(this.line2)); assertEquals(-1, this.network.indexOf(new BusLine()));
assertEquals("ab\\\\\\"c", TextUtil.toJsonString("ab\\"c"));
assertNull(Resources.getResourceAsStream(null)); assertNotNull(is); assertNotNull(is);
assertEquals(21, this.reader.getDBFRecordCount());
assertEquals("{\\n\\t" + "\\"k1\\": \\"myvalue\\"\\n}", actual);
assertEquals("book", element.getNodeName()); assertNull(element); assertEquals("book", element.getNodeName()); assertEquals("book", element.getNodeName());
assertEquals("ab\\\\\\\\u0004c", escaper.escape("ab\\\\u0004c"));
assertSame(this.busNetwork, this.itinerary.getBusNetwork());
assertEquals(InnerCallerTest.class, this.caller.innerinnerTestGetCallerClass());
assertFalse(this.stop.isValidPrimitive()); assertTrue(this.stop.isValidPrimitive());
assertNotNull(this.bounds); assertEquals(this.reference.size(), test.size()); assertNotNull(nearestData); assertTrue(nearest.contains(nearestData));
assertEquals( ((this.offset%2)!=0 ? this.offset+1 : this.offset) - 100, this.record.getOffsetInContent());
assertEquals("clean", c.getParameterAt(0)); assertEquals("package", c.getParameterAt(1)); assertEquals("installters", c.getParameterAt(2)); assertEquals("-v", c.getParameterAt(3));
assertNotNull(property);
assertEquals( ((this.length%2)!=0 ? this.length+1 : this.length), this.record.getEntireRecordLength());
assertNotNull(names); assertEquals(0, names.size()); assertFalse(iterator.hasNext()); assertNotNull(names); assertEquals(1, names.size()); assertTrue(iterator.hasNext()); assertEquals("NEWFIELD", iterator.next()); assertFalse(iterator.hasNext()); assertNotNull(names); assertEquals(0, names.size()); assertFalse(iterator.hasNext());
assertNull(this.halt.getRoadSegmentDirection()); assertNull(this.halt.getRoadSegmentDirection()); assertEquals(Direction1D.REVERTED_DIRECTION, this.halt.getRoadSegmentDirection()); assertEquals(Direction1D.SEGMENT_DIRECTION, this.halt.getRoadSegmentDirection());
assertSame(this.point, map.get(ShapeElementType.POINT).elements.iterator().next()); assertSame(this.multiPoint, map.get(ShapeElementType.MULTIPOINT).elements.iterator().next()); assertSame(this.polyline, map.get(ShapeElementType.POLYLINE).elements.iterator().next()); assertSame(this.polygon, map.get(ShapeElementType.POLYGON).elements.iterator().next());
assertArrayEquals(new byte[]{70, 64, -27, -51}, EndianNumbers.parseBEFloat(12345.45f));
assertTrue(this.constraint.isValidElement(element));
assertNotSame(commandLine, c.getParameters()); assertTrue(Arrays.equals(new String[] { "clean", "package", "installters", "-v" }, c.getParameters()));
assertEquals("004f", StringEscaper.formatHex(0x4F, 4));
assertFalse(this.reader.isClosed()); assertTrue(this.reader.isClosed());
assertFalse(FileSystem.isJarURL(createHttpUrl())); assertTrue(FileSystem.isJarURL(createFileInJarUrl())); assertFalse(FileSystem.isJarURL(createFileUrlWithSpacesHardCoded()));
assertTrue(i.hasNext()); assertEquals(1, s.getFirst()); assertEquals(3, s.getLast()); assertTrue(i.hasNext()); assertEquals(10, s.getFirst()); assertEquals(10, s.getLast()); assertTrue(i.hasNext()); assertEquals(20, s.getFirst()); assertEquals(25, s.getLast()); assertFalse(i.hasNext());
assertFalse(reader.isSeekEnabled()); assertFalse(reader.isSeekEnabled());
assertEquals(this.count1/2, this.location11.size()); assertEquals(this.count1/2, this.location12.size()); assertEquals(this.count1/2, this.location13.size()); assertEquals(this.count2/2, this.location21.size()); assertEquals(this.count2/2, this.location22.size()); assertEquals(this.count2/2, this.location23.size());
assertNull(this.network.getNearestBusStop(0, 0)); assertSame(this.stop1, this.network.getNearestBusStop(0, 0)); assertSame(this.stop2, this.network.getNearestBusStop(-10, 0)); assertSame(this.stop4, this.network.getNearestBusStop(110, -110)); assertSame(this.stop1, this.network.getNearestBusStop(100, 0));
assertNotNull(property);
assertArrayEquals(new byte[]{64, -30}, EndianNumbers.parseLEShort((short) 123456));
assertEquals(1,this.testData.getAttributeAsLong("A")); assertEquals(2,this.testData.getAttributeAsLong("B")); assertEquals(1, this.testData.getAttributeAsLong("C"));
assertSame(this.network, this.network.getBusNetwork());
assertNotSame(obj, obj2); assertEquals(obj, obj2);
assertEquals(-1, this.itinerary.indexOf(this.segment1)); assertEquals(-1, this.itinerary.indexOf(this.segment2)); assertEquals(-1, this.itinerary.indexOf(this.segment3)); assertEquals(0, this.itinerary.indexOf(this.segment1)); assertEquals(1, this.itinerary.indexOf(this.segment2)); assertEquals(-1, this.itinerary.indexOf(this.segment3));
assertNotNull(property); assertSame(property, property2); assertEquals(1, property.get());
assertFalse(this.network.isValidPrimitive()); assertFalse(this.network.isValidPrimitive()); assertFalse(this.network.isValidPrimitive()); assertTrue(this.network.isValidPrimitive());
assertTrue(iterator.hasNext()); assertNotNull(obj); assertEquals(j, ((Number)obj).intValue()); assertFalse(iterator.hasNext());
assertNotNull(property);
assertEquals("4f", TextUtil.formatHex(0x4F, 1));
assertEquals("catalog", node.getTagName());
assertEquals(new AttributeValueImpl(1), this.container.getAttribute("B")); assertNull(this.container.getAttribute("F")); assertNull(this.container.getAttribute("Z4"));
assertNotNull(z);
assertTrue(iterator.hasNext()); assertSame(this.halt1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.halt2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(12, tmpFile.length()); assertEquals("HELLO WORLD!", line);
assertEquals("TEST1: FOR UNIT TEST ONLY", line);
assertArrayEquals(new byte[]{0, 0, 0, 0, 7, 91, -51, 21}, EndianNumbers.parseBELong(123456789));
assertFalse(this.itinerary.hasBusHaltOnSegment(this.segment1)); assertFalse(this.itinerary.hasBusHaltOnSegment(this.segment2)); assertTrue(this.itinerary.hasBusHaltOnSegment(this.segment1)); assertFalse(this.itinerary.hasBusHaltOnSegment(this.segment2));
assertNull(FileSystem.makeAbsolute((File)null, (URL)null)); assertEquals(new URL("file:" + fromFileToUrl(getCurrentDir(), false) + "/toto"), FileSystem.makeAbsolute(new File("toto"), (URL)null));
assertEquals(5, this.root.getChildCount()); assertEquals(5, this.child1.getChildCount()); assertEquals(5, this.child2.getChildCount()); assertEquals(5, this.node.getChildCount());
assertFalse(i.hasNext());
assertNotNull(range);
assertNotNull(names); assertEquals(0, names.size()); assertFalse(iterator.hasNext()); assertNotNull(names); assertEquals(1, names.size()); assertTrue(iterator.hasNext()); assertNotNull(attr); assertEquals("NEWFIELD", attr.getName()); assertEquals(7., attr.getValue()); assertFalse(iterator.hasNext()); assertNotNull(names); assertEquals(0, names.size()); assertFalse(iterator.hasNext());
assertEquals("text/plain", this.connection.getHeaderField("content-type")); assertEquals("25", this.connection.getHeaderField("content-length")); assertNotNull(this.connection.getHeaderField("last-modified")); assertNull(this.connection.getHeaderField("expires"));
assertEquals("book", element.getNodeName()); assertNull(element);
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.itinerary1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.itinerary2, iterator.next()); assertFalse(iterator.hasNext());
assertTrue(this.provider.hasAttribute("SOURCE")); assertTrue(this.provider.hasAttribute("CATEGORIE")); assertTrue(this.provider.hasAttribute("NATURE")); assertTrue(this.provider.hasAttribute("HAUTEUR")); assertFalse(this.provider.hasAttribute("NOFIELD")); assertFalse(this.provider.hasAttribute("NEWFIELD"));
assertNull(this.list.comparator());
assertNull(FileSystem.getJarFile(createHttpUrl())); assertNull(FileSystem.getJarFile(createFileUrlWithSpacesHardCoded()));
assertEquals(this.userHome, this.builder.getCurrentDirectoryFile()); assertEquals(new File("./toto"), this.builder.getCurrentDirectoryFile());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.line1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.line2, iterator.next()); assertFalse(iterator.hasNext());
assertTrue(iterator.hasNext()); assertSame(halt, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(4, this.provider.getAttributeCount());
assertTrue(it.hasNext(), this.id); assertNotNull(attr, this.id); assertTrue(ref.remove(attr), this.id); assertFalse(it.hasNext(), this.id);
assertSame(this.s1, this.iterator.next()); assertSame(this.s2, this.iterator.next()); assertSame(this.s3, this.iterator.next()); assertSame(this.s4, this.iterator.next()); assertSame(this.s5, this.iterator.next());
assertEquals("book", element.getTagName()); assertNull(element); assertEquals("book", element.getTagName()); assertEquals("book", element.getTagName());
assertNull(this.stop.getGeoPosition()); assertNotNull(p);
assertNull(FileSystem.makeAbsolute((URL)null, (File)null)); assertEquals(new URL("file:/toto"), FileSystem.makeAbsolute(new URL("file:/toto"), (File)null)); assertEquals(new URL("file:toto"), FileSystem.makeAbsolute(new URL("file:toto"), (File)null));
assertEquals(BusItineraryHaltType.STOP_ON_DEMAND, this.halt.getType()); assertEquals(BusItineraryHaltType.SYSTEMATIC_STOP, this.halt.getType()); assertEquals(BusItineraryHaltType.SYSTEMATIC_STOP, this.halt.getType()); assertEquals(BusItineraryHaltType.STOP_ON_DEMAND, this.halt.getType());
assertArrayEquals(new byte[]{7, 91, -51, 21}, EndianNumbers.parseBEInt(123456789));
assertEquals(3455, MathUtil.max(3, 5, 7, 8, 3455, 3245, 45, 0, -10, 45));
assertTrue(clone.equals(m)); assertTrue(m.equals(clone)); assertTrue(m2.equals(m)); assertTrue(m.equals(m2)); assertFalse(m3.equals(m)); assertFalse(m.equals(m3));
assertEquals(XMLResources.IDENTIFIER_PREFIX + "0", XMLResources.getStringIdentifier(0)); assertEquals(XMLResources.IDENTIFIER_PREFIX + "351", XMLResources.getStringIdentifier(351)); assertEquals(XMLResources.IDENTIFIER_PREFIX + "-4521", XMLResources.getStringIdentifier(-4521));
assertFalse(this.constraint.isValidElement(element));
assertEquals("2017-11-12T12:14:15", XMLUtil.toString(base));
assertNotNull(property); assertSame(property, property2);
assertFalse(this.list.isEmpty()); assertTrue(this.list.isEmpty());
assertEquals(4, this.provider.getAttributeCount());
assertEquals("content-type", this.connection.getHeaderFieldKey(0)); assertEquals("content-length", this.connection.getHeaderFieldKey(1)); assertEquals("last-modified", this.connection.getHeaderFieldKey(2)); assertNull(this.connection.getHeaderFieldKey(3));
assertEquals(8, this.root.getChildCount()); assertEquals(8, this.child1.getChildCount()); assertEquals(8, this.child2.getChildCount()); assertEquals(8, this.node.getChildCount());
assertTrue(reader.isSeekEnabled()); assertFalse(reader.isSeekEnabled());
assertEquals("abc", escaper.escape("abc"));
assertNotNull(names); assertEquals(4, names.size()); assertTrue(iterator.hasNext()); assertEquals("SOURCE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("CATEGORIE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("NATURE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("HAUTEUR", iterator.next()); assertFalse(iterator.hasNext());
assertEquals("file.x.z", FileSystem.basename(createHttpUrl())); assertEquals("file.x.z", FileSystem.basename(createFileInJarUrl())); assertEquals("file with space", FileSystem.basename(createFileUrlWithSpacesHardCoded())); assertEquals("file.x.z", FileSystem.basename(createFileInJarUrlWithSpaces()));
assertEquals(PHOTOGRAMMETRIE_VALUE, this.provider.getAttribute("SOURCE",defaultValue).getValue()); assertEquals(15., this.provider.getAttribute("HAUTEUR",defaultValue).getValue()); assertEquals(false,this.provider.getAttribute("NOFIELD",defaultValue).getValue()); assertEquals(false,this.provider.getAttribute("NEWFIELD",defaultValue).getValue());
assertFalse(this.constraint.isValidElement(element));
assertTrue(Double.isNaN(this.halt.getPositionOnSegment())); assertTrue(Double.isNaN(this.halt.getPositionOnSegment()));
assertEquals("TEST1: FOR UNIT TEST ONLY", line);
assertSame(this.s1, this.iterator.next());
assertEquals(Collections.emptyMap(), VMCommandLine.getCommandLineOptions());
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer3);
assertEquals(Direction1D.SEGMENT_DIRECTION, path.getSegmentDirectionAt(0)); assertEquals(Direction1D.SEGMENT_DIRECTION, path.getSegmentDirectionAt(1)); assertEquals(Direction1D.SEGMENT_DIRECTION, path.getSegmentDirectionAt(2)); assertEquals(Direction1D.REVERTED_DIRECTION, path.getSegmentDirectionAt(3)); assertEquals(Direction1D.SEGMENT_DIRECTION, path.getSegmentDirectionAt(4)); assertEquals(Direction1D.REVERTED_DIRECTION, path.getSegmentDirectionAt(5));
assertEquals(-10l, MathUtil.min(3l, 5l, 7l, 8l, 3455l, 3245l, 45l, 0l, -10l, 45l));
assertNull(this.stop.getGeoPosition()); assertNotNull(p); assertTrue(p instanceof GeoLocationPoint);
assertNotNull(ColorNames.getColorFromName(nm), "Invalid color: " + nm);
assertNotNull(range);
assertEquals(-1, this.halt.getRoadSegmentIndex()); assertEquals(0, this.halt.getRoadSegmentIndex()); assertEquals(0, this.halt.getRoadSegmentIndex()); assertEquals(1, this.halt.getRoadSegmentIndex()); assertEquals(-1, this.halt.getRoadSegmentIndex());
assertNotNull(iterator); assertFalse(iterator.hasNext()); assertTrue(this.hub.addBusStop(b1)); assertTrue(this.hub.addBusStop(b2)); assertNotNull(iterator); assertTrue(iterator.hasNext()); assertSame(b1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(b2, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(point1); assertEquals("name1", point1.getName()); assertNotNull(point2); assertEquals("name2", point2.getName());
assertEquals("#45123456", XMLUtil.toColor(18, 52, 86, 69)); assertEquals("lime", XMLUtil.toColor(0, 255, 0, 255));
assertFalse(this.primitive.isReadOnlyObject()); assertTrue(this.primitive.isReadOnlyObject()); assertTrue(this.primitive.isReadOnlyObject()); assertFalse(this.primitive.isReadOnlyObject());
assertSame(this.halt1, this.itinerary.getBusHaltAt(0)); assertSame(this.halt2, this.itinerary.getBusHaltAt(1));
assertEquals(10, this.list.size()); assertTrue(this.list.add(Integer.valueOf(34))); assertEquals(11, this.list.size()); assertFalse(this.list.add(Integer.valueOf(34))); assertEquals(11, this.list.size()); assertTrue(this.list.remove(Integer.valueOf(1))); assertEquals(10, this.list.size());
assertFalse(this.path.isEmpty()); assertTrue(this.path.isEmpty());
assertEquals("ab\\\\\\\\u0004c", TextUtil.toJavaString("ab\\\\u0004c"));
assertEquals(1, this.iterator.rest()); assertEquals(0, this.iterator.rest());
assertFalse(this.stop.isBusHaltBinded()); assertTrue(this.stop.isBusHaltBinded()); assertFalse(this.stop.isBusHaltBinded());
assertSame(hub1, iterator.next()); assertSame(hub2, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(names); assertEquals(4, names.size()); assertTrue(iterator.hasNext()); assertEquals("SOURCE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("CATEGORIE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("NATURE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("HAUTEUR", iterator.next()); assertFalse(iterator.hasNext());
assertFalse(this.primitive.isValidPrimitive());
assertTrue(XMLResources.isStringIdentifier(XMLResources.IDENTIFIER_PREFIX + "0")); assertTrue(XMLResources.isStringIdentifier(XMLResources.IDENTIFIER_PREFIX + "351")); assertTrue(XMLResources.isStringIdentifier(XMLResources.IDENTIFIER_PREFIX + "-4521")); assertFalse(XMLResources.isStringIdentifier(null)); assertFalse(XMLResources.isStringIdentifier("")); assertFalse(XMLResources.isStringIdentifier("-4521")); assertFalse(XMLResources.isStringIdentifier(XMLResources.IDENTIFIER_PREFIX));
assertNotNull(property); assertSame(property, property2); assertEquals(-2, property.get());
assertEquals(0, this.provider.getBufferedAttributeCount()); assertEquals(1, this.provider.getBufferedAttributeCount()); assertEquals(0, this.provider.getBufferedAttributeCount());
assertEquals(12564, XMLUtil.getAttributeInt(this.document, "catalog", "book", "author", "number2")); assertEquals(0, XMLUtil.getAttributeInt(this.document, "catalog", "book", "author", "Number2"));
assertTrue(Arrays.equals(new String[] { "clean", "package", "installters", "-v" }, c.getParameters()));
assertTrue(Arrays.equals(new String[0], VMCommandLine.getCommandLineParameters())); assertTrue(Arrays.equals(commandLine, VMCommandLine.getCommandLineParameters())); assertTrue(Arrays.equals(commandLine, VMCommandLine.getCommandLineParameters()));
assertSame(this.point, map.get(ShapeElementType.POINT).elements.iterator().next()); assertSame(this.multiPoint, map.get(ShapeElementType.MULTIPOINT).elements.iterator().next()); assertSame(this.polyline, map.get(ShapeElementType.POLYLINE).elements.iterator().next()); assertSame(this.polygon, map.get(ShapeElementType.POLYGON).elements.iterator().next());
assertEquals("abc", TextUtil.toJsonString("abc"));
assertNull(this.halt.getBusStop()); assertSame(this.stop, this.halt.getBusStop()); assertNull(this.halt.getBusStop());
assertEquals(Integer.class, XMLUtil.getAttributeClass(this.document, "catalog", "book", "genre", "fakeclass1")); assertNull(XMLUtil.getAttributeClass(this.document, "catalog", "book", "genre", "Fakeclass1"));
assertNotNull(range);
assertEquals(3, this.root.getChildCount()); assertEquals(3, this.child1.getChildCount()); assertEquals(3, this.child2.getChildCount()); assertEquals(3, this.node.getChildCount());
assertFalse(this.stop.insideBusHub()); assertTrue(this.stop.insideBusHub());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.segment1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.segment2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(-10, MathUtil.min(3, 5, 7, 8, 3455, 3245, 45, 0, -10, 45));
assertNotNull(value); assertEquals("Religieux", value.getValue());
assertEquals("ab\'c", TextUtil.toJavaString("ab\'c"));
assertEquals("ab\\\\\\"c", escaper.escape("ab\\"c"));
assertTrue(this.hub.isEmpty()); assertTrue(this.hub.addBusStop(new BusStopStub(this.busNetwork, "STOP1"))); assertTrue(this.hub.addBusStop(new BusStopStub(this.busNetwork, "STOP2"))); assertFalse(this.hub.isEmpty()); assertEquals(2, this.hub.getBusStopCount()); assertTrue(this.hub.isEmpty());
assertTrue(this.iterator.hasNext()); assertTrue(this.iterator.hasNext()); assertTrue(this.iterator.hasNext()); assertTrue(this.iterator.hasNext()); assertTrue(this.iterator.hasNext()); assertFalse(this.iterator.hasNext());
assertTrue(Arrays.equals(commandLine, c.getParameters()));
assertNotNull(this.bounds); assertEquals(this.reference.size(), test.size()); assertNotNull(nearestData); assertTrue(found, "Polyline not found");
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer3);
assertEquals(base, XMLUtil.getAttributeDate(this.document, true, "catalog", "book", "publish", "date1")); assertNull(XMLUtil.getAttributeDate(this.document, true, "catalog", "book", "publish", "Date1")); assertEquals(base, XMLUtil.getAttributeDate(this.document, false, "catalog", "book", "publish", "date1")); assertEquals(base, XMLUtil.getAttributeDate(this.document, false, "catalog", "book", "publish", "Date1"));
assertNotNull(iterator); assertFalse(iterator.hasNext()); assertTrue(this.hub.addBusStop(b1)); assertTrue(this.hub.addBusStop(b2)); assertNotNull(iterator); assertTrue(iterator.hasNext()); assertSame(b1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(b2, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(range);
assertSame(hub1, iterator.next()); assertSame(hub2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(0, this.network.getBusHubCount());
assertEquals(this.path.makeAbsolute(new File("a.txt")), this.xml.getResourceURL(2)); assertEquals(this.path.makeAbsolute(new URL("file:b.txt")), this.xml.getResourceURL(3)); assertEquals(this.path.makeAbsolute(new URL("file:a.jpg")), this.xml.getResourceURL(4));
assertEquals(id, XMLUtil.getAttributeUUID(this.document, "catalog", "book", "description", "uuid1")); assertNull(XMLUtil.getAttributeUUID(this.document, "catalog", "book", "description", "Uuid1"));
assertEquals(makeInternalId(this.loc11), this.id11.getInternalId()); assertEquals(makeInternalId(this.loc12), this.id12.getInternalId()); assertEquals(makeInternalId(this.loc13), this.id13.getInternalId()); assertEquals(makeInternalId(this.loc21), this.id21.getInternalId()); assertEquals(makeInternalId(this.loc22), this.id22.getInternalId()); assertEquals(makeInternalId(this.loc23), this.id23.getInternalId());
assertNotNull(DBaseFileAttributePool.getProvider(this.resource.toURI(), 3));
assertEquals(this.userHome.toURI().toURL().toExternalForm(), this.builder.getCurrentDirectoryString()); assertEquals("file:./toto", this.builder.getCurrentDirectoryString());
assertTrue(this.network.isRightSidedTrafficDirection());
assertNull(this.xml.getResource(0)); assertNull(this.xml.getResource(1)); assertNull(this.xml.getResource(2)); assertNull(this.xml.getResource(3)); assertNull(this.xml.getResource(4)); assertNull(this.xml.getResource(5));
assertNotNull(x);
assertTrue(MathUtil.isEpsilonZero(0., Math.ulp(0.))); assertFalse(MathUtil.isEpsilonZero(0.1, Math.ulp(0.1))); assertFalse(MathUtil.isEpsilonZero(Double.NaN, Math.ulp(Double.NaN))); assertFalse(MathUtil.isEpsilonZero(Double.NEGATIVE_INFINITY, Math.ulp(0))); assertFalse(MathUtil.isEpsilonZero(Double.POSITIVE_INFINITY, Math.ulp(0)));
assertTrue(iterator.hasNext()); assertSame(this.halt1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.halt2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals("innerinnerTestGetCallerMethod", this.caller.innerinnerTestGetCallerMethod());
assertTrue(XMLUtil.getAttributeBoolean(this.document, "catalog", "book", "author", "fakebool1")); assertFalse(XMLUtil.getAttributeBoolean(this.document, "catalog", "book", "title", "fakebool2")); assertFalse(XMLUtil.getAttributeBoolean(this.document, "catalog", "book", "author", "Fakebool1")); assertFalse(XMLUtil.getAttributeBoolean(this.document, "catalog", "book", "title", "Fakebool2"));
assertEquals( ((this.length%2)!=0 ? this.length+1 : this.length) - 8, this.record.getRecordContentLength());
assertEquals("name1", point.getName()); assertEquals("Text", point.getAttribute("attr1", (String) null));
assertFalse(this.network.isLeftSidedTrafficDirection());
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertNotNull(range); assertTrue(Double.isInfinite(range.getMin()));
assertEquals("ab\\\\\\"c", TextUtil.toJavaString("ab\\"c"));
assertNotNull(x);
assertEquals(b64, XMLUtil.toString("hello".getBytes()));
assertEquals("ab/c", TextUtil.toJavaString("ab/c"));
assertNotNull(map); assertEquals(3, map.size()); assertEquals(Collections.singletonList("text/plain"), map.get("content-type")); assertEquals(Collections.singletonList("25"), map.get("content-length")); assertNotNull(map.get("last-modified")); assertNull(map.get("expires"));
assertEquals(1, this.writer.lastWritten); assertEquals(1024, this.writer.lastWritten);
assertNull(FileSystem.makeAbsolute((File)null, (File)null)); assertEquals(new File(File.separator+"toto"), FileSystem.makeAbsolute(new File(File.separator+"toto"), (File)null)); assertEquals(new File("toto"), FileSystem.makeAbsolute(new File("toto"), (File)null));
assertArrayEquals(new byte[]{21, -51, 91, 7}, EndianNumbers.parseLEInt(123456789));
assertEquals(ShapeElementType.POLYGON, this.writer.getElementType());
assertEquals("book", element.getTagName()); assertNull(element);
assertEquals(PHOTOGRAMMETRIE_VALUE, this.provider.getAttributeObjectFromDBase("SOURCE").getValue()); assertEquals(15., this.provider.getAttributeObjectFromDBase("HAUTEUR").getValue()); assertNull(this.provider.getAttributeObjectFromDBase("NOFIELD")); assertNull(this.provider.getAttributeObjectFromDBase("NEWFIELD"));
assertEquals(Integer.valueOf(25), this.list.last());
assertTrue(this.reader.isSeekEnabled()); assertFalse(this.reader.isSeekEnabled());
assertSame(this.path1, this.cPath.getRoadPathAt(0)); assertSame(this.path1, this.cPath.getRoadPathAt(0)); assertSame(this.path3, this.cPath.getRoadPathAt(1));
assertNotNull(range);
assertEquals("a\\\\\\\\nbc\\\\\\\\T", TextUtil.toJsonString("a\\\\nbc\\\\T"));
assertEquals(4, this.accessor.getRecordNumber());
assertFalse(this.provider.isBufferedAttribute("NEWFIELD")); assertTrue(this.provider.isBufferedAttribute("NEWFIELD")); assertFalse(this.provider.isBufferedAttribute("NEWFIELD"));
assertFalse(this.list.containsAll(Collections.singleton(0))); assertTrue(this.list.containsAll(Arrays.asList(1, 2, 3))); assertFalse(this.list.containsAll(Arrays.asList(4, 5, 6, 7, 8, 9))); assertFalse(this.list.containsAll(Arrays.asList(10, 11, 12, 13, 14, 15)));
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer2);
assertNull(this.line.getBusItinerary("ITINERARY1")); assertNull(this.line.getBusItinerary("ITINERARY2")); assertSame(this.itinerary1, this.line.getBusItinerary("ITINERARY1")); assertSame(this.itinerary2, this.line.getBusItinerary("ITINERARY2"));
assertEquals(1,this.testData.getAttribute("A",5)); assertEquals(2,this.testData.getAttribute("B",34)); assertEquals(1,this.testData.getAttribute("C",18)); assertEquals(24,this.testData.getAttribute("D",24)); assertEquals(-34,this.testData.getAttribute("E",-34)); assertEquals(18,this.testData.getAttribute("F",18));
assertSame(this.point, map.get(ShapeElementType.POINT).elements.iterator().next()); assertSame(this.multiPoint, map.get(ShapeElementType.MULTIPOINT).elements.iterator().next()); assertSame(this.polyline, map.get(ShapeElementType.POLYLINE).elements.iterator().next()); assertSame(this.polygon, map.get(ShapeElementType.POLYGON).elements.iterator().next());
assertEquals(".z", FileSystem.extension(createHttpUrl())); assertEquals(".z", FileSystem.extension(createFileInJarUrl())); assertEquals(".toto", FileSystem.extension(createFileUrlWithSpacesHardCoded())); assertEquals(".z", FileSystem.extension(createFileInJarUrlWithSpaces()));
assertEquals("4f", StringEscaper.formatHex(0x4F, 1));
assertEquals("B", XMLUtil.getAttributeValue(this.document, "catalog", "book", "publish", "enum1")); assertEquals("", XMLUtil.getAttributeValue(this.document, "catalog", "book", "publish", "Enum1")); assertEquals("b", XMLUtil.getAttributeValue(this.document, "catalog", "book", "genre", "enum2")); assertEquals("", XMLUtil.getAttributeValue(this.document, "catalog", "book", "genre", "Enum2"));
assertTrue(i.hasNext()); assertEquals(1, s.getFirst()); assertEquals(3, s.getLast()); assertTrue(i.hasNext()); assertEquals(10, s.getFirst()); assertEquals(10, s.getLast()); assertTrue(i.hasNext()); assertEquals(20, s.getFirst()); assertEquals(25, s.getLast()); assertFalse(i.hasNext());
assertNotNull(range);
assertFalse(iterator.hasNext()); assertSame(this.stop1, iterator.next()); assertSame(this.stop2, iterator.next()); assertSame(this.stop3, iterator.next()); assertSame(this.stop4, iterator.next()); assertFalse(iterator.hasNext());
assertSame(this.itinerary1, this.line.getBusItineraryAt(0)); assertSame(this.itinerary2, this.line.getBusItineraryAt(1));
assertNotNull(paths); assertEquals(0, paths.size()); assertNotNull(paths); assertEquals(1, paths.size()); assertNotNull(paths); assertEquals(2, paths.size());
assertTrue(MathUtil.isEpsilonEqual(0., 0.)); assertFalse(MathUtil.isEpsilonEqual(0.1, 0.)); assertFalse(MathUtil.isEpsilonEqual(Double.NaN, 0.)); assertFalse(MathUtil.isEpsilonEqual(Double.NEGATIVE_INFINITY, 0.)); assertFalse(MathUtil.isEpsilonEqual(Double.POSITIVE_INFINITY, 0.));
assertEquals(expected, c);
assertEquals("a\\\\nb\\\\tc", escaper.escape("a\\nb\\tc"));
assertNotNull(src); assertNotNull(src.getByteStream());
assertArrayEquals(new byte[]{65, -99, 111, 52, 85, -43, -62, -113}, EndianNumbers.parseBEDouble(123456789.45875));
assertNotNull(range);
assertEquals(924, MathUtil.clamp(924, min, max)); assertEquals(min, MathUtil.clamp(min, min, max)); assertEquals(max, MathUtil.clamp(max, min, max)); assertEquals(max, MathUtil.clamp(max+1, min, max)); assertEquals(max, MathUtil.clamp(9000, min, max)); assertEquals(min, MathUtil.clamp(min-1, min, max)); assertEquals(min, MathUtil.clamp(-124, min, max));
assertNull(Resources.getResource(ResourcesTest.class, null)); assertNotNull(u1); assertNotNull(u2); assertNotNull(u3); assertEquals(u1,u2); assertEquals(u1,u3); assertNull(Resources.getResource((Class<?>)null, null)); assertNull(u1); assertNull(u2);
assertNull(this.network.getBusLine("LINE1")); assertNull(this.network.getBusLine("LINE2")); assertNull(this.network.getBusLine("LINE3")); assertSame(this.line1, this.network.getBusLine("LINE1")); assertSame(this.line2, this.network.getBusLine("LINE2")); assertNull(this.network.getBusLine("LINE3"));
assertNotNull(v);
assertFalse(pts.hasNext()); assertEquals("name1", polyline.getName()); assertEquals(ColorNames.getColorFromName("orange").intValue(), polyline.getAttribute("color", 0xFFFFFF)); assertEquals("Text", polyline.getAttribute("attr1", (String) null));
assertNotNull(zipEntry); assertEquals("TEST1: FOR UNIT TEST ONLY", readInputStream(zipFile.getInputStream(zipEntry))); assertNotNull(zipEntry); assertEquals("TEST2: FOR UNIT TEST ONLY", readInputStream(zipFile.getInputStream(zipEntry))); assertNotNull(zipEntry); assertEquals("TEST1: FOR UNIT TEST ONLY", readInputStream(zipFile.getInputStream(zipEntry)));
assertEquals(AbstractBusPrimitive.DEFAULT_COLOR, this.primitive.getColor()); assertEquals(0xFF0000, this.primitive.getColor());
assertFalse(iterator.hasNext());
assertNull(this.halt.getBusStop()); assertTrue(this.halt.setBusStop(this.stop)); assertSame(this.stop, this.halt.getBusStop()); assertFalse(this.halt.setBusStop(this.stop)); assertTrue(this.halt.setBusStop(null)); assertNull(this.halt.getBusStop()); assertFalse(this.halt.setBusStop(null));
assertNotNull(nearestData); assertTrue(nearest.contains(nearestData));
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.itinerary1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.itinerary2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals("-D=true", VMCommandLine.shiftCommandLineParameters()); assertTrue(Arrays.equals(new String[] { "-v", "clean", "-v", "-F", "-b", "-v", "package", "-F", "123", "-nob", "installters", "-S", "-b", "--", "-v"}, VMCommandLine.getCommandLineParameters()));
assertFalse(path.isEmpty()); assertEquals(6, path.size()); assertEquals(this.segment2.getBeginPoint(), path.getFirstCrossRoad());
assertEquals("ab/c", escaper.escape("ab/c"));
assertEquals(-1, MathUtil.signNoZero(-145.25)); assertEquals(-1, MathUtil.signNoZero(-0.25)); assertEquals(1, MathUtil.signNoZero(-0.)); assertEquals(1, MathUtil.signNoZero(0.)); assertEquals(1, MathUtil.signNoZero(+0.)); assertEquals(1, MathUtil.signNoZero(145.25)); assertEquals(1, MathUtil.signNoZero(0.25));
assertNotNull(property); assertSame(property, property2); assertEquals(0, property.get());
assertEquals(expected, actual);
assertEquals(94, this.reader.getDBFRecordSize());
assertEquals(754801260, EndianNumbers.toLELong(123, 456, 789, 159, 753, 145, 487, 653));
assertNotNull(names); assertEquals(4, names.size()); assertTrue(iterator.hasNext()); assertEquals("SOURCE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("CATEGORIE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("NATURE", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("HAUTEUR", iterator.next()); assertFalse(iterator.hasNext());
assertNull(path); assertNotNull(path); assertSame(this.segment1, path.get(0)); assertSame(this.segment2, path.get(1)); assertEquals(2, path.size()); assertNull(path);
assertTrue(iterator.hasNext()); assertNotNull(obj); assertEquals(j, ((Number)obj).intValue()); assertFalse(iterator.hasNext());
assertTrue(c.hasOption("S")); assertTrue(c.hasOption("b")); assertFalse(c.hasOption("nob"));
assertFalse(this.provider.hasAttribute("NEWFIELD")); assertTrue(this.provider.hasAttribute("SOURCE")); assertTrue(this.provider.hasAttribute("CATEGORIE")); assertTrue(this.provider.hasAttribute("NATURE")); assertTrue(this.provider.hasAttribute("HAUTEUR"));
assertEquals(-1, this.xml.getIdentifier(new URL("file:x"))); assertEquals(2, this.xml.getIdentifier(new URL("file:a.txt"))); assertEquals(3, this.xml.getIdentifier(new URL("file:b.txt"))); assertEquals(4, this.xml.getIdentifier(new URL("file:a.jpg")));
assertNotNull(m);
assertEquals("-b", c.getFirstOptionValue("S")); assertEquals(false, c.getFirstOptionValue("b")); assertEquals(0., c.getFirstOptionValue("F")); assertNull(c.getFirstOptionValue("nob"));
assertEquals(TEST_FILE_SIZE, this.reader.getFileSize());
assertArrayEquals(new String[] {"x", "z", "z"}, FileSystem.extensions(createHttpUrl())); assertArrayEquals(new String[] {"x", "z", "z"}, FileSystem.extensions(createFileInJarUrl())); assertArrayEquals(new String[] {"toto"}, FileSystem.extensions(createFileUrlWithSpacesHardCoded())); assertArrayEquals(new String[] {"x", "z", "z"}, FileSystem.extensions(createFileInJarUrlWithSpaces()));
assertTrue(this.itinerary.isValidPrimitive()); assertEquals(2, this.itinerary.getRoadSegmentCount()); assertFalse(this.itinerary.isValidPrimitive()); assertEquals(0, this.itinerary.getRoadSegmentCount());
assertEquals(expected, actual);
assertNull(FileSystem.makeAbsolute((URL)null, (URL)null)); assertEquals(new URL("file:/toto"), FileSystem.makeAbsolute(new URL("file:/toto"), (URL)null)); assertEquals(new URL("file:toto"), FileSystem.makeAbsolute(new URL("file:toto"), (URL)null));
assertEquals(Integer.valueOf(1), this.list.first());
assertEquals("ab\\\\u0004c", escaper.escape("ab\\u0004c"));
assertEquals(-1625962373, EndianNumbers.toLEInt(123, 456, 789, 159));
assertEquals(AttributeType.STRING, type.get()); assertEquals(BATIMENT_RELIGIEUX_VALUE, value); assertEquals(AttributeType.STRING, type.get()); assertEquals(BDTOPO_VALUE, value);
assertTrue(test.addAll(this.reference)); assertTrue(this.reference.add(newElement), msg); assertTrue(test.add(newElement), msg); assertEquals(this.reference.size(), test.size(), msg); assertTrue(test.slowContains(newElement), msg);
assertEquals(3, this.list.getSegmentCount()); assertEquals(5, this.list.getSegmentCount());
assertEquals(0, XMLResources.getNumericalIdentifier(XMLResources.IDENTIFIER_PREFIX + "0")); assertEquals(351, XMLResources.getNumericalIdentifier(XMLResources.IDENTIFIER_PREFIX + "351")); assertEquals(-4521, XMLResources.getNumericalIdentifier(XMLResources.IDENTIFIER_PREFIX + "-4521"));
assertEquals(expected, actual);
assertEquals(1834614060, EndianNumbers.toBELong(123, 456, 789, 159, 753, 145, 487, 653));
assertNull(TextUtil.toHTML(null)); assertEquals(expected, actual);
assertTrue(iterator.hasNext()); assertSame(this.point, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.multiPoint, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.polyline, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.polygon, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.circle, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(DBaseFileAttributePool.getCollection(this.resource.toURI(), 3));
assertEquals(0, this.network.getBusLineCount()); assertEquals(2, this.network.getBusLineCount());
assertEquals(1, this.itinerary.getTroneonCount());
assertSame(this.segment1, this.itinerary.getRoadSegmentAt(0)); assertSame(this.segment2, this.itinerary.getRoadSegmentAt(1));
assertTrue(this.constraint.isValidElement(element));
assertEquals(0, this.network.size()); assertEquals(2, this.network.size());
assertNull(d1);
assertNotEquals(0xFFFFFF, ColorNames.getColorFromName(nm, 0xFFFFFF), "Invalid color: " + nm);
assertNotNull(range);
assertEquals("4f", StringEscaper.formatHex(0x4F, 2));
assertEquals(1, tab[0]); assertEquals(2, tab[1]); assertEquals(3, tab[2]); assertEquals(10, tab[3]); assertEquals(20, tab[4]); assertEquals(21, tab[5]); assertEquals(22, tab[6]); assertEquals(23, tab[7]); assertEquals(24, tab[8]); assertEquals(25, tab[9]);
assertNull(this.primitive.getRawColor()); assertEquals(0xFF0000, this.primitive.getRawColor().intValue());
assertEquals(this.segment2.getBeginPoint(), cross.connectionPoint); assertSame(this.segment2, cross.enteringSegment); assertSame(this.segment6, cross.exitingSegment);
assertEquals(1, this.iterator.totalSize()); assertEquals(1, this.iterator.totalSize());
assertEquals(Number.class, this.list.getElementType()); assertNull(this.list.getElementType()); assertEquals(0, this.list.size());
assertEquals("a\\\\\\\\nbc\\\\\\\\T", escaper.escape("a\\\\nbc\\\\T"));
assertEquals(100, this.reader.getFileReadingPosition()); assertEquals(100, this.reader.getFileReadingPosition()); assertEquals(108, this.reader.getFileReadingPosition()); assertEquals(116, this.reader.getFileReadingPosition());
assertFalse(this.constraint.isValidElement(element));
assertEquals(0, TextUtil.getLevenshteinDistance(null, null)); assertEquals(0, TextUtil.getLevenshteinDistance(null, "")); assertEquals(0, TextUtil.getLevenshteinDistance("", null)); assertEquals(0, TextUtil.getLevenshteinDistance("", "")); assertEquals(1, TextUtil.getLevenshteinDistance("", "a")); assertEquals(3, TextUtil.getLevenshteinDistance("a", "abcd"));
assertEquals("v", XMLUtil.getAttributeValue(doc, "a", "b", "id"));
assertFalse(this.hub.isSignificant()); assertFalse(this.hub.isSignificant()); assertTrue(this.hub.isSignificant());
assertNotNull(v);
assertArrayEquals(new byte[]{-51, -27, 64, 70}, EndianNumbers.parseLEFloat(12345.45f));
assertNotNull(y);
assertEquals(1,this.testData.getAttribute("A",5)); assertEquals(2,this.testData.getAttribute("B",34)); assertEquals(1,this.testData.getAttribute("C",18)); assertEquals(24,this.testData.getAttribute("D",24)); assertEquals(-34,this.testData.getAttribute("E",-34)); assertEquals(18,this.testData.getAttribute("F",18));
assertEquals(u1, FileSystem.convertFileToURL(f1));
assertEquals(1,this.testData.getAttributeAsInt("A")); assertEquals(2,this.testData.getAttributeAsInt("B")); assertEquals(1, this.testData.getAttributeAsInt("C"));
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer1);
assertNotNull(range);
assertEquals(1, this.list.getFirstValueOnSegment(0)); assertEquals(10, this.list.getFirstValueOnSegment(2)); assertEquals(20, this.list.getFirstValueOnSegment(4));
assertEquals(this.segment1.getBeginPoint(), this.network.getNearestConnection( new Point2d(-5.,0.))); assertEquals(this.segment9.getBeginPoint(), this.network.getNearestConnection( new Point2d(1000.,1000.))); assertEquals(this.segment4.getEndPoint(), this.network.getNearestConnection( new Point2d(0.,0.)));
assertEquals("a\\\\nb\\\\tc", TextUtil.toJsonString("a\\nb\\tc"));
assertNotNull(elt); assertEquals("name1", elt.getName()); assertEquals("Text", elt.getAttribute("attr1", (String) null));
assertEquals(0, this.itinerary.size()); assertEquals(1, this.itinerary.size()); assertEquals(1, this.itinerary.size()); assertEquals(2, this.itinerary.size()); assertEquals(1, this.itinerary.size()); assertEquals(0, this.itinerary.size()); assertEquals(0, this.itinerary.size());
assertSame(this.busNetwork, this.line.getBusNetwork());
assertEquals(12564l, XMLUtil.getAttributeLong(this.document, "catalog", "book", "author", "number2")); assertEquals(0l, XMLUtil.getAttributeLong(this.document, "catalog", "book", "author", "Number2"));
assertTrue(this.provider.hasAttributeInDBase("SOURCE")); assertTrue(this.provider.hasAttributeInDBase("CATEGORIE")); assertTrue(this.provider.hasAttributeInDBase("NATURE")); assertTrue(this.provider.hasAttributeInDBase("HAUTEUR")); assertFalse(this.provider.hasAttributeInDBase("NOFIELD")); assertFalse(this.provider.hasAttributeInDBase("NEWFIELD"));
assertNull(d1); assertNotNull(d1); assertTrue(d1 instanceof MyDrawer1);
assertEquals(3, this.container.getAttributeContainerCount());
assertFalse(this.reader.isHeaderRead()); assertTrue(this.reader.isHeaderRead());
assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertFalse(this.halt.isStartingBusHalt()); assertTrue(this.halt.isStartingBusHalt());
assertEquals("ab\\\\u0004c", TextUtil.toJsonString("ab\\u0004c"));
assertNotNull(d1); assertTrue(d1 instanceof MyDrawer2);
assertNull(d1);
assertNotNull(y);
assertEquals(this.resource, this.accessor.getResource());
assertEquals("04f", TextUtil.formatHex(0x4F, 3));
assertEquals(base, XMLUtil.getAttributeDate(this.document, "catalog", "book", "publish", "date1")); assertNull(XMLUtil.getAttributeDate(this.document, "catalog", "book", "publish", "Date1"));
assertArrayEquals(new byte[]{-30, 64}, EndianNumbers.parseBEShort((short) 123456));
assertNull(Resources.getResource(null)); assertNotNull(u1); assertNotNull(u2); assertEquals(u1,u2);
assertTrue(this.testData.getAttributeAsBool("A")); assertTrue(this.testData.getAttributeAsBool("B")); assertTrue(this.testData.getAttributeAsBool("C")); assertFalse(this.testData.getAttributeAsBool("F"));
assertFalse(this.bounds.equals(null)); assertFalse(this.bounds.equals(new Object())); assertTrue(this.bounds.equals(this.bounds)); assertTrue(this.bounds.equals(new ESRIBounds(this.bounds))); assertFalse(this.bounds.equals(new ESRIBounds())); assertTrue(this.bounds.equals(new ESRIBounds( this.minx, this.maxx, this.miny, this.maxy, this.minz, this.maxz, this.minm, this.maxm)));
assertEquals(5, this.root.getChildCount()); assertEquals(5, this.child1.getChildCount()); assertEquals(5, this.child2.getChildCount()); assertEquals(5, this.node.getChildCount());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.line1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.line2, iterator.next()); assertFalse(iterator.hasNext());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(halt, iterator.next()); assertFalse(iterator.hasNext()); assertFalse(iterator.hasNext());
assertNotNull(DBaseFileAttributePool.getContainer(this.resource, 3));
assertTrue(this.hub.isEmpty()); assertFalse(this.hub.isEmpty());
assertNotNull(point1); assertEquals("name1", point1.getName()); assertNotNull(point2); assertEquals("name2", point2.getName());
assertEquals("ab\\\\/c", TextUtil.toJsonString("ab/c"));
assertFalse(pts.hasNext()); assertEquals("name1", polyline.getName()); assertTrue(polyline.isWidePolyline()); assertEquals(ColorNames.getColorFromName("orange").intValue(), polyline.getColor()); assertEquals("Text", polyline.getAttribute("attr1", (String) null));
assertEquals(2, this.root.getChildCount()); assertEquals(2, this.child1.getChildCount()); assertEquals(2, this.child2.getChildCount()); assertEquals(2, this.node.getChildCount());
assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertFalse(this.halt.isEndingBusHalt()); assertTrue(this.halt.isEndingBusHalt());
assertNotNull(range); assertTrue(Double.isInfinite(range.getMax()));
assertNull(range);
assertNotNull(property);
assertEquals("red", ColorNames.getColorNameFromValue(0xFFFF0000)); assertNull(ColorNames.getColorNameFromValue(0xFF0000)); assertEquals("lime", ColorNames.getColorNameFromValue(0xFF00FF00)); assertNull(ColorNames.getColorNameFromValue(0x00FF00)); assertEquals("blue", ColorNames.getColorNameFromValue(0xFF0000FF)); assertNull(ColorNames.getColorNameFromValue(0x0000FF));
assertEquals(base, XMLUtil.parseDate("2017-11-12T12:14:15"));
assertNotNull(reader); assertNotNull(record); assertEquals(0, record.getRecordIndex()); assertEquals(161, record.getRecordOffset()); assertEquals(BDTOPO_VALUE, record.getFieldValue(0)); assertEquals("Religieux", record.getFieldValue(1)); assertEquals(BATIMENT_RELIGIEUX_VALUE, record.getFieldValue(2)); assertEquals(15., record.getFieldValue(3));
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertTrue(iterator.hasNext()); assertNotNull(obj); assertTrue(obj instanceof NumberStub); assertEquals(i, ((Number)obj).intValue()); assertFalse(iterator.hasNext());
assertNotNull(nearestData); assertTrue(nearest.contains(nearestData));
assertTrue(this.network.isValidPrimitive()); assertEquals(2, this.network.size()); assertEquals(0, this.network.size()); assertFalse(this.network.isValidPrimitive());
assertTrue(names.remove(nm), "Missed name: " + nm); assertEquals(0, names.size());
assertFalse(this.line.isValidPrimitive()); assertTrue(this.line.isValidPrimitive()); assertFalse(this.line.isValidPrimitive());
assertNotNull(bounds);
assertNotNull(attrs); assertEquals(8, attrs.size());
assertSame(this.line1, this.network.getBusLineAt(0)); assertSame(this.line2, this.network.getBusLineAt(1));
assertEquals(4, this.network.getBusStopCount()); assertTrue(this.network.isValidPrimitive()); assertEquals(0, this.network.getBusStopCount()); assertFalse(this.network.isValidPrimitive());
assertSame(this.bounds, this.writer.getFileBounds());
assertTrue(MathUtil.isEpsilonZero(0.)); assertFalse(MathUtil.isEpsilonZero(0.1)); assertFalse(MathUtil.isEpsilonZero(Double.NaN)); assertFalse(MathUtil.isEpsilonZero(Double.NEGATIVE_INFINITY)); assertFalse(MathUtil.isEpsilonZero(Double.POSITIVE_INFINITY));
assertTrue(iterator.hasNext(), "record #"+Integer.toString(i)); assertNotNull(obj, "record #"+Integer.toString(i)); assertEquals(j, obj.intValue(), "record #"+Integer.toString(i)); assertFalse(iterator.hasNext());
assertEquals(0, this.itinerary.getInvalidBusHaltCount()); assertEquals(0, this.itinerary.getInvalidBusHaltCount()); assertEquals(1, this.itinerary.getInvalidBusHaltCount()); assertEquals(1, this.itinerary.getInvalidBusHaltCount()); assertEquals(1, this.itinerary.getInvalidBusHaltCount()); assertEquals(0, this.itinerary.getInvalidBusHaltCount());
assertEquals("abc", TextUtil.toJavaString("abc"));
assertEquals(BusItineraryHaltType.STOP_ON_DEMAND, this.halt.getType()); assertEquals(BusItineraryHaltType.SYSTEMATIC_STOP, this.halt.getType()); assertEquals(BusItineraryHaltType.SYSTEMATIC_STOP, this.halt.getType()); assertEquals(BusItineraryHaltType.STOP_ON_DEMAND, this.halt.getType());
assertEquals(2, this.root.getChildCount()); assertEquals(1, this.child1.getChildCount()); assertEquals(0, this.child2.getChildCount()); assertEquals(0, this.node.getChildCount());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.line1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.line2, iterator.next()); assertFalse(iterator.hasNext());
assertEquals("clean", c.shiftParameters()); assertNotSame(commandLine, c.getParameters()); assertTrue(Arrays.equals(new String[] { "package", "installters", "-v" }, c.getParameters()));
assertFalse(iterator.hasNext()); assertSame(this.stop1, iterator.next()); assertSame(this.stop2, iterator.next()); assertSame(this.stop3, iterator.next()); assertSame(this.stop4, iterator.next()); assertFalse(iterator.hasNext());
assertEquals(0, MathUtil.compareEpsilon(50., 50.)); assertEquals(-1, MathUtil.compareEpsilon(0., 50.)); assertEquals(1, MathUtil.compareEpsilon(50., 0.)); assertEquals(0, MathUtil.compareEpsilon(50. + Math.ulp(50.) / 2., 50.)); assertEquals(0, MathUtil.compareEpsilon(50. - Math.ulp(50.) / 2., 50.));
assertEquals(8, this.container.getAttributeCount());
assertEquals(0, this.network.getBusStopCount()); assertEquals(4, this.network.getBusStopCount());
assertEquals(-1, this.xml.getIdentifier(new byte[0])); assertEquals(-1, this.xml.getIdentifier(new byte[] { 1, 2, 3 })); assertEquals(1, this.xml.getIdentifier(this.data));
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(hub, iterator.next()); assertFalse(iterator.hasNext());
assertTrue(this.testData.getAttribute("A",true)); assertTrue(this.testData.getAttribute("B",false)); assertTrue(this.testData.getAttribute("C",false)); assertTrue(this.testData.getAttribute("D",true)); assertFalse(this.testData.getAttribute("E",false)); assertFalse(this.testData.getAttribute("F",true));
assertEquals(3455l, MathUtil.max(3l, 5l, 7l, 8l, 3455l, 3245l, 45l, 0l, -10l, 45l));
assertEquals(0, this.xml.computeNextIdentifier()); assertEquals(5, this.xml.computeNextIdentifier()); assertEquals(6, this.xml.computeNextIdentifier()); assertEquals(7, this.xml.computeNextIdentifier());
assertEquals(19, this.provider.getRecordNumber());
assertEquals(id, XMLUtil.getAttributeUUID(this.document, true, "catalog", "book", "description", "uuid1")); assertNull(XMLUtil.getAttributeUUID(this.document, true, "catalog", "book", "description", "Uuid1")); assertEquals(id, XMLUtil.getAttributeUUID(this.document, false, "catalog", "book", "description", "uuid1")); assertEquals(id, XMLUtil.getAttributeUUID(this.document, false, "catalog", "book", "description", "Uuid1"));
assertEquals(u1, actual); assertEquals(u2e, actual);
assertFalse(VMCommandLine.hasCommandLineOption("S")); assertTrue(VMCommandLine.hasCommandLineOption("S")); assertFalse(VMCommandLine.hasCommandLineOption("nob"));
assertTrue(iterator.hasNext()); assertNotNull(obj); assertTrue(obj instanceof NumberStub); assertEquals(i, ((Number)obj).intValue()); assertFalse(iterator.hasNext());
assertEquals("4f", TextUtil.formatHex(0x4F, 2));
assertEquals(expected, actual);
assertEquals(this.resource, this.provider.getResource());
assertNotNull(range);
assertEquals(this.userHome.toURI().toURL(), this.builder.getCurrentDirectoryURL()); assertEquals(new URL("file:./toto"), this.builder.getCurrentDirectoryURL());
assertSame(this.busNetwork, this.stop.getBusNetwork());
assertEquals(Integer.valueOf(5), reader.read()); assertEquals(Integer.valueOf(8), reader.read()); assertEquals(Integer.valueOf(5), reader.read());
assertEquals(b64, XMLUtil.toString(obj));
assertTrue(test.addAll(this.reference)); assertTrue(this.reference.remove(p)); assertTrue(this.reference.isEmpty());
assertEquals(4, this.root.getChildCount()); assertEquals(4, this.child1.getChildCount()); assertEquals(4, this.child2.getChildCount()); assertEquals(4, this.node.getChildCount());
assertEquals("text/plain", this.connection.getHeaderField(0)); assertEquals("25", this.connection.getHeaderField(1)); assertNotNull(this.connection.getHeaderField(2)); assertNull(this.connection.getHeaderField(3));
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertTrue(this.reader.isSeekEnabled()); assertFalse(this.reader.isSeekEnabled());
assertEquals(-10, MathUtil.min(new short[] { 3, 5, 7, 8, 3455, 3245, 45, 0, -10, 45 }));
assertSame(this.point, map.get(ShapeElementType.POINT).elements.iterator().next()); assertSame(this.multiPoint, map.get(ShapeElementType.MULTIPOINT).elements.iterator().next()); assertSame(this.polyline, map.get(ShapeElementType.POLYLINE).elements.iterator().next()); assertSame(this.polygon, map.get(ShapeElementType.POLYGON).elements.iterator().next());
assertNull(FileSystem.makeAbsolute((URL)null, root));
assertEquals("{\\n\\t" + "\\"k1\\": \\"myvalue\\",\\n\\t\\"k2\\": 123,\\n\\t\\"k3\\": " + Double.toString(456.78) + ",\\n\\t\\"k4\\": \\"" + obj.toString() + "\\",\\n\\t\\"k5\\": true\\n}", actual);
assertEquals(ids, XMLUtil.getAttributeUUIDs(this.document, "catalog", "book", "title", "uuids1")); assertEquals(Collections.emptyList(), XMLUtil.getAttributeUUIDs(this.document, "catalog", "book", "title", "Uuids1"));
assertEquals(-14213, EndianNumbers.toLEShort(123, 456));
assertNotNull(hubs); assertFalse(iterator.hasNext()); assertNotNull(hubs); assertTrue(iterator.hasNext()); assertSame(hub, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(DBaseFileAttributePool.getCollection(this.resource, 3));
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertEquals(Direction1D.SEGMENT_DIRECTION, this.itinerary.getRoadSegmentDirection(0)); assertEquals(Direction1D.REVERTED_DIRECTION, this.itinerary.getRoadSegmentDirection(1));
assertEquals(0,this.path.size());
assertEquals(3455, MathUtil.max(new short[] { 3, 5, 7, 8, 3455, 3245, 45, 0, -10, 45 }));
assertNull(this.list.getElementType());
assertNull(this.reader.getDBFFields()); assertNotNull(fields); assertEquals(4, fields.size()); assertEquals("SOURCE", fields.get(0).getName()); assertEquals("CATEGORIE", fields.get(1).getName()); assertEquals("NATURE", fields.get(2).getName()); assertEquals("HAUTEUR", fields.get(3).getName());
assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount());
assertEquals(new ArrayList<>(0), VMCommandLine.getCommandLineOption("S")); assertNotNull(values); assertEquals(1, values.size()); assertEquals("-b", values.get(0)); assertEquals(new ArrayList<>(0), VMCommandLine.getCommandLineOption("nob"));
assertEquals( ((this.offset%2)!=0 ? this.offset+1 : this.offset), this.record.getOffsetInFile());
assertTrue(this.path.isEmpty());
assertNotNull(loc); assertTrue(loc instanceof GeoLocationNowhere);
assertEquals(TEST_FILE_RECORD_COUNT, this.reader.getRecordCount());
assertEquals(PHOTOGRAMMETRIE_VALUE, this.provider.getAttributeObject("SOURCE").getValue()); assertEquals(15., this.provider.getAttributeObject("HAUTEUR").getValue()); assertNull(this.provider.getAttributeObject("NOFIELD")); assertNull(this.provider.getAttributeObject("NEWFIELD"));
assertEquals("ab\'c", escaper.escape("ab\'c"));
assertNull(this.halt.getRoadSegment()); assertNull(p); assertNull(p); assertNotNull(p); assertNotNull(p); assertNull(p);
assertFalse(this.hub.isValidPrimitive()); assertFalse(this.hub.isValidPrimitive()); assertFalse(this.hub.isValidPrimitive()); assertFalse(this.hub.isValidPrimitive()); assertTrue(this.hub.isValidPrimitive());
assertEquals("polyline", XMLGISElementUtil.getDefaultMapElementNodeName(MapPolyline.class)); assertEquals("polygon", XMLGISElementUtil.getDefaultMapElementNodeName(MapPolygon.class)); assertEquals("multipoint", XMLGISElementUtil.getDefaultMapElementNodeName(MapMultiPoint.class)); assertEquals("point", XMLGISElementUtil.getDefaultMapElementNodeName(MapPoint.class)); assertEquals("circle", XMLGISElementUtil.getDefaultMapElementNodeName(MapCircle.class));
assertEquals(-1, this.iterator.index()); assertEquals(0, this.iterator.index());
assertSame(this.segment1, this.network.getRoadSegment(this.segment1.getGeoId())); assertSame(this.segment9, this.network.getRoadSegment(this.segment9.getGeoId())); assertSame(this.segment6, this.network.getRoadSegment(this.segment6.getGeoId()));
assertEquals("04f", StringEscaper.formatHex(0x4F, 3));
assertEquals("file.x.z.z", FileSystem.largeBasename(createHttpUrl())); assertEquals("file.x.z.z", FileSystem.largeBasename(createFileInJarUrl())); assertEquals("file with space.toto", FileSystem.largeBasename(createFileUrlWithSpacesHardCoded())); assertEquals("file.x.z.z", FileSystem.largeBasename(createFileInJarUrlWithSpaces()));
assertEquals(4, this.reader.getDBFFieldCount());
assertTrue(this.provider.removeAllAttributes()); assertEquals(0, this.subprovider1.getAttributeCount()); assertEquals(0, this.subprovider2.getAttributeCount()); assertEquals(0, this.subprovider3.getAttributeCount()); assertEquals(2, this.subcontainer4.getAttributeCount()); assertEquals(2, this.provider.getAttributeCount()); assertFalse(this.provider.removeAllAttributes());
assertEquals("ab\\\\u0004c", TextUtil.toJavaString("ab\\u0004c"));
assertEquals(0, this.itinerary.getValidBusHaltCount()); assertEquals(2, this.itinerary.getValidBusHaltCount()); assertEquals(2, this.itinerary.getValidBusHaltCount()); assertEquals(2, this.itinerary.getValidBusHaltCount()); assertEquals(2, this.itinerary.getValidBusHaltCount()); assertEquals(3, this.itinerary.getValidBusHaltCount());
assertEquals(2, this.line.getBusItineraryCount()); assertTrue(this.line.isValidPrimitive()); assertEquals(0, this.line.getBusItineraryCount()); assertFalse(this.line.isValidPrimitive());
assertFalse(iterator.hasNext()); assertTrue(iterator.hasNext()); assertSame(this.segment1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.segment2, iterator.next()); assertFalse(iterator.hasNext());
assertNotNull(property); assertSame(property, property2);
assertNotNull(property); assertSame(property, property2);
assertTrue(c.isParameterExists(0)); assertTrue(c.isParameterExists(1)); assertTrue(c.isParameterExists(2)); assertTrue(c.isParameterExists(3)); assertFalse(c.isParameterExists(5));
assertTrue(iterator.hasNext()); assertSame(this.halt1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.halt2, iterator.next()); assertFalse(iterator.hasNext());
assertFalse(this.itinerary.contains(this.segment1)); assertFalse(this.itinerary.contains(this.segment2)); assertFalse(this.itinerary.contains(this.segment3)); assertTrue(this.itinerary.contains(this.segment1)); assertTrue(this.itinerary.contains(this.segment2)); assertFalse(this.itinerary.contains(this.segment3));
assertEquals(new Float(123.456), val);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertNotNull(it2);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertSame(table, table2);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertThat(convertedBitmap.getHeight()).isEqualTo(253);
assertThat(convertedBitmap.getWidth()).isEqualTo(230);
assertThat(legofy).isNotNull();
assertThat(convertedBitmap).isNotNull();
assertThat(key).isEqualTo(LegofyPicassoTransformation.LEGOFY);
assertThat("Should return true if case form is ready", caseListPresenter.isFormReady(), is(true));
assertThat(incidentService.getByUniqueId(uniqueId), is(incident));
assertThat("Should return 3 when ratio is 3.", actual, is(3));
assertThat(actual, is(deleteIncident));
assertThat(tracingFormService.isReady(), is(false));
assertThat(encryptedText1, not(encryptedText2)); assertThat(encryptedText1, not(encryptedText3)); assertThat(encryptedText2, not(encryptedText3));
assertThat("Should return string \'aa\'", incidentRegisterPresenter.getUniqueId(bundle), is("aa"));
assertThat("Should return true", incidentPresenter.isFormReady(), is(true));
assertThat("Should return true", loginService.isOnline(), is(true));
assertThat("Should return CP search list", caseSearchPresenter.getSearchResult(searchCondition), is(list));
assertThat(itemValuesMap.getAsString("incident_id"), is("89fdj89r34jif9af90a"));
assertThat("Should return records by age ASC filter when SpinnerState is AGE_ASC", actual, is(expected));
assertThat("Should return 1 when incidents is empty", index, is(1));
assertThat(loginService.isUrlValid(null), CoreMatchers.is(false)); assertThat(loginService.isUrlValid(""), CoreMatchers.is(false));
assertThat(incidentFormService.isReady(), is(false));
assertThat(loginService.isUsernameValid("Jack"), CoreMatchers.is(true));
assertThat(TextUtils.isEmpty(" "), is(true));
assertThat(tracingService.getById(tracingId), is(tracing));
assertThat("Should return 1 when cases is empty", index, is(1));
assertTrue(caseFormService.isReady());
assertThat(loginService.isPasswordValid(null), CoreMatchers.is(false)); assertThat(loginService.isPasswordValid(""), CoreMatchers.is(false));
assertThat("Should return records by registrarion date DES filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat(new ItemValuesMap().concatMultiStringsWithBlank(),is(""));
assertTrue("When hasUnSynced() is more than zero, should return true", actual);
assertThat(loginService.isUsernameValid(null), CoreMatchers.is(false)); assertThat(loginService.isUsernameValid(""), CoreMatchers.is(false));
assertThat("Should return records by age DES filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat("Should return same uuid", actual.getUniqueId(), is(uuid));
assertThat("Should return CasePhoto", casePhotoService.getById(123L), is(casePhoto));
assertThat("should return 2 when ratio is 2", actual, is(2));
assertThat("Should return 0 when incident exits", incidentListPresenter.calculateDisplayedIndex(), is(0));
assertThat(incidentService.getAllOrderByAgeDES(), is(Arrays.asList(new Long[]{1L, 2L, 3L})));
assertThat("Should return 4 when ratio is 4.", actual, is(4));
assertNull(actual);
assertThat("Should return same incident string list", caseServiceSpy.getIncidentsByCaseId(""), is(listStr));
assertThat(result, is(true));
assertThat("When call getAllOrdersByDateAsc() should return orders sorted by date.", incidentService.getAllOrderByDateASC(), is(Arrays.asList(new Long[]{1L, 2L, 3L})));
assertThat("Should return false", loginService.isOnline(), is(false));
assertThat(encryptedText, not(plainText));
assertThat(map.size(), is(2)); assertThat(map.get("a"), is("1")); assertThat(map.get("b"), is("2"));
assertThat(TextUtils.isEmpty(null), is(true));
assertThat(tracingListPresenter.isFormReady(), is(true));
assertThat("Should return same map size", actual.size(), is(map.size())); assertThat(actual.get("1"), is(map.get("1"))); assertThat(actual.get("2"), is(map.get("2"))); assertThat(actual, is(map));
assertThat("Should return records by registrarion date DES filter when SpinnerState is " + "AGE_DES", actual, is(expected));
assertThat(incidentRegisterPresenter.getRecordId(bundle), is(2L));
assertThat(incidentListPresenter.isFormReady(),is(false));
assertThat("Should return 1 when ratio is smaller than 2.", actual, is(1));
assertThat("Incidents should be null", incidents, is(nullValue()));
assertFalse("Sync status should be false", actual.isSynced()); assertThat("Age should be 18", actual.getAge(), is(18)); assertThat("Registration date should be 2016/12/25", actual.getRegistrationDate(), is (Utils.getRegisterDateByYyyyMmDd("2016/12/25")));
assertThat(result, is("L0::L1"));
assertThat("Should return uniqueId", TextUtils.getLastSevenNumbers(uniqueId), is(uniqueId));
assertThat(incidentService.getById(incidentId), is(incident));
assertThat(loginService.isUsernameValid("Ja ck"), CoreMatchers.is(false));
assertThat("When call getAllOrderByDateASC() should return orders sorted by date.", tracingService.getAllOrderByDateASC(), is(Arrays.asList(new Long[]{1L, 2L, 3L})));
assertThat("Should return true if incident form is ready", incidentListPresenter.isFormReady(), is(true));
assertThat(userService.isUserEverLoginSuccessfully(), is(false));
assertThat("Should return records by registrarion date ASC filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat(tracingRegisterPresenter.getRecordId(bundle), is(2L));
assertThat("Should return false", casePhotoService.hasUnSynced(1L), is(false));
assertThat("Should return id list", actual, is(searchResult));
assertThat("Should get tracing", tracingService.getByInternalId(""), is(tracing));
assertThat(actual, is(deleteTracing));
assertThat("Should contain mini form field", actual.contains(miniFormField), is(true)); assertThat("Should not contain full form field", actual.contains(otherFormField), is (false));
assertThat(caseTemplateForm.toString(), is("<Children>\\n"));
assertThat("Should return last 7 numbers", TextUtils.getLastSevenNumbers(uniqueId), is("4567890"));
assertThat("Should return password is true", actual, is(true));
assertThat("Should return false", incidentPresenter.isFormReady(), is(false));
assertThat("Should return records by registrarion date ASC filter when SpinnerState is " + "AGE_DES", actual, is(expected));
assertThat("Should return true if tracing form is ready", tracingListPresenter .isFormReady(), is(true));
assertThat(incidentService.getAllOrderByAgeASC(), is(Arrays.asList(new Long[]{1L, 2L, 3L})));
assertThat(incidentRegisterPresenter.getFields(position).contains(miniFormField),is(true)); assertThat(incidentRegisterPresenter.getFields(position).contains(otherFormField),is(true));
assertThat(tracingListPresenter.isFormReady(), is(false));
assertThat("Should return same list", tracingSearchPresenter.getSearchResult(searchConditions), is(list));
assertThat(incidentListPresenter.isFormReady(),is(true));
assertThat(userService.isUserEverLoginSuccessfully(), is(true));
assertThat(result, is("L2::L3"));
assertThat(incidentService.getAll(), is(incidentList));
assertThat("Should return GBV search list", caseSearchPresenter.getSearchResult(Collections.emptyMap()), is(list));
assertThat("Should return false", loginService.isOnline(), is(false));
assertThat("Should return 0 when tracing_request is empty", index, is(1));
assertThat(tracingTemplateForm.toString(), is("<Enquiries>\\n"));
assertNull(actual);
assertThat("When call getAllOrderByDateDES() should return orders sorted by date.", tracingService.getAllOrderByDateDES(), is(Arrays.asList(new Long[]{3L, 2L, 1L})));
assertFalse(caseFormService.isReady());
assertThat("Should return null map", JsonUtils.toMap(object), is(Collections.emptyMap()));
assertThat("Should get incident", incidentService.getByInternalId(""), is(incident));
assertFalse("Sync status should be false", actual.isSynced()); assertThat("Age should be 18", actual.getAge(), is(18)); assertThat("Registration date should be 2016/12/25", actual.getRegistrationDate(), is (Utils.getRegisterDateByYyyyMmDd("2016/12/25")));
assertThat(new ItemValuesMap().concatMultiStringsWithBlank(FULL_NAME),is(""));
assertThat("Should return records by registrarion date DES filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat("Should return true", casePresenter.isIncidentFormReady(), is(true));
assertThat("Should return 0 when case exits", caseListPresenter.calculateDisplayedIndex(), is(0));
assertNull(actual);
assertThat("When call getCPSearchResult() should return search result depends on search " + "condition", tracingService.getSearchResult("uniqueId", "name", 1, 20, new Date(20161108)), is(Arrays.asList(new Long[]{3L, 2L, 1L})));
assertTrue("When hasUnSynced() is more than zero, should return true", actual);
assertThat(incidentFormService.isReady(), is(false));
assertThat("Should return same list", incidentSearchPresenter.getSearchResult(searchConditions), is(list));
assertThat(result, is("Language1, Language2")); assertThat(result, is("")); assertThat(result, is(""));
assertThat(tracingFormService.isReady(), is(false));
assertThat(tracingService.getAll(), is(tracingList));
assertThat(result, is("L0"));
assertEquals(fieldList,null);
assertThat(incidentRegisterPresenter.getRecordId(bundle), is(-100L));
assertThat("Should return same list", incidentSearchPresenter.getViolenceTypeList(), is(list));
assertThat(result, is(true));
assertThat("Should return same day", actual.getDay(), is(date.getDay())); assertThat("Should return same month", actual.getMonth(), is(date.getMonth())); assertThat("Should return same year", actual.getYear(), is(date.getYear()));
assertThat("Should return records by registrarion date ASC filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat("Should return same list", incidentSearchPresenter.getIncidentLocationList(), is(list));
assertThat(actual, is(deleteCase));
assertThat(result, is("L2::L3"));
assertThat(result, is("L2::L3"));
assertThat("When call getAllOrderByDateDES() should return orders sorted by date.", incidentService.getAllOrderByDateDES(), is(Arrays.asList(new Long[]{3L, 2L, 1L})));
assertThat(incidentTemplateForm.toString(), is("<Incidents>\\n"));
assertThat("Should return password is false", loginService.isPasswordValid("123"), is(false));
assertThat(TextUtils.isEmpty("primero"), is(false));
assertThat("Should return false", casePresenter.isIncidentFormReady(), is(false));
assertThat("Should return records by age ASC filter when SpinnerState is AGE_ASC", actual, is(expected));
assertThat("Should return same date", Utils.getRegisterDateAsDdMmYyyy(registrationDateString), is(date));
assertThat(tracingService.getByUniqueId(uniqueId), is(tracing));
assertThat("Should return records by age DES filter when SpinnerState is AGE_DES", actual, is(expected));
assertThat("Should return null", TextUtils.getLastSevenNumbers(null), is(nullValue()));
assertThat("Should return false", loginService.isOnline(), is(false));
assertThat("Should get case", caseService.getByInternalId(""), is(c));
assertEquals(ErrorCode.TABLE_ALREADY_EXISTS, e.getCode());
assertNotNull(countResponse); assertEquals(2, countResponse.getCount());
assertNotNull(countResponse); assertEquals(11, countResponse.getCount());
assertTrue(response.getCounts() .equals(counts));
assertEquals(ErrorCode.INVALID_REQUEST, e.getCode());
assertEquals(ErrorCode.STORE_EXECUTION_ERROR, e.getCode());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(1, statsResponse.getResult() .getStats() .size()); assertTrue(statsResponse.getResult() .getStats() .containsKey("avg"));
assertNotNull(distinctResponse);
assertEquals(ErrorCode.MALFORMED_QUERY, ex.getCode());
assertEquals(ErrorCode.ACTION_EXECUTION_ERROR, ex.getCode());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(150, statsResponse.getResult() .getStats() .get("sum") .intValue()); assertEquals(5, statsResponse.getResult() .getStats() .get("count") .intValue()); assertNull(statsResponse.getBuckets()); assertNotNull(statsResponse.getResult().getPercentiles());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(5, statsResponse.getResult() .getStats() .size());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(1, statsResponse.getResult() .getPercentiles() .size()); assertTrue(statsResponse.getResult() .getPercentiles() .containsKey(5d));
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(1, statsResponse.getResult() .getStats() .size()); assertTrue(statsResponse.getResult() .getStats() .containsKey("count"));
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("max")); assertNull(statsTrendResponse.getBuckets());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(3, statsResponse.getBuckets() .size()); assertNotNull(bucketResponse.getResult());
assertNotNull(translatedDocument.getMetadata()); assertEquals(translatedDocument.getId(), translatedDocument.getMetadata() .getRawStorageId()); assertEquals(translatedDocument.getMetadata() .getId(), document.getId()); assertTrue(translatedDocument.getMetadata() .getRawStorageId() .endsWith(Constants.RAW_KEY_VERSION_TO_SUFFIX_MAP.get("2.0")));
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(1, statsResponse.getResult() .getStats() .size()); assertTrue(statsResponse.getResult() .getStats() .containsKey("min"));
assertEquals(ErrorCode.MALFORMED_QUERY, e.getCode());
assertEquals(expectedResponse, response.getResult());
assertEquals(ErrorCode.STORE_CONNECTION_ERROR, ex.getCode());
assertEquals(ErrorCode.UNRESOLVABLE_OPERATION, e.getCode());
assertEquals(response, actualResult.getResult());
assertEquals(expectedResponse, response);
assertEquals(response, actualResult.getResult());
assertNotNull(response); assertEquals(table.getName(), response.getName()); assertEquals(table.getTtl(), response.getTtl());
assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());
assertNotNull(response); assertEquals(TEST_TABLE_NAME, response.getName()); assertEquals(7, response.getTtl());
assertEquals(expectedResponse, actualResponse);
assertEquals(ErrorCode.MALFORMED_QUERY, ex.getCode());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(3, statsResponse.getBuckets() .size()); assertNull(bucketResponse.getResult()); assertNotNull(bucketResponse.getBuckets());
assertEquals(translatedDocument.getId(), document.getId()); assertNotNull(translatedDocument.getMetadata()); assertEquals(translatedDocument.getMetadata() .getId(), document.getId()); assertEquals(translatedDocument.getMetadata() .getRawStorageId(), document.getId() + ":" + table.getName());
assertNotNull(distinctResponse); assertEquals(expectedResponse, distinctResponse);
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("min")); assertNull(statsTrendResponse.getBuckets());
assertEquals(response, actualResult.getResult());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(2, statsResponse.getResult() .getStats() .get("count") .intValue()); assertNull(statsResponse.getBuckets()); assertNull(statsResponse.getResult().getPercentiles());
assertEquals(expectedResponse, actualResponse);
assertNotNull(distinctResponse); assertEquals(expectedResponse, distinctResponse);
assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
assertNull(statsTrendResponse);
assertEquals(3, Arrays.stream(response.getIndices()) .filter(index -> index.matches(".*-" + TestUtils.TEST_TABLE_NAME + "-.*")) .count()); assertEquals(documents.size(), actualResponse.getDocuments() .size());
assertEquals(NonCacheableAction.class, queryExecutor.resolve(new NonCacheableActionRequest()) .getClass());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(1, statsResponse.getResult() .getStats() .size()); assertTrue(statsResponse.getResult() .getStats() .containsKey("max"));
assertEquals(response.getCounts(), counts);
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("sum")); assertNull(statsTrendResponse.getBuckets());
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("count")); assertNull(statsTrendResponse.getBuckets());
assertTrue(response.getCounts() .equals(counts));
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertNotNull(distinctResponse);
assertNotNull(countResponse); assertEquals(1, countResponse.getCount());
assertEquals(response, actualResult.getResult());
assertEquals(9, actualResponse.getDocuments() .size());
assertEquals(ErrorCode.DOCUMENT_NOT_FOUND, ex.getCode());
assertEquals(ErrorCode.DOCUMENT_NOT_FOUND, dse.getCode());
assertEquals(response, actualResult.getResult());
assertEquals(translatedDocument.getId(), document.getId()); assertNotNull(translatedDocument.getMetadata()); assertEquals(translatedDocument.getMetadata() .getId(), document.getId()); assertEquals(translatedDocument.getMetadata() .getRawStorageId(), document.getId() + ":" + table.getName());
assertEquals(request.getTable(), response.getTable()); assertEquals(request.getMappings(), response.getMappings());
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(5, statsTrendResponse.getResult() .size()); assertEquals(5, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertEquals(7, statsTrendResponse.getResult() .get(0) .getPercentiles() .size()); assertNull(statsTrendResponse.getBuckets());
assertEquals(expectedResponse, actualResponse);
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertEquals(150, statsResponse.getResult() .getStats() .get("sum") .intValue()); assertEquals(5, statsResponse.getResult() .getStats() .get("count") .intValue()); assertNull(statsResponse.getBuckets()); assertNull(statsResponse.getResult().getPercentiles());
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertEquals(response, actualResult.getResult());
assertNotNull(statsTrendResponse); assertNull(statsTrendResponse.getResult()); assertNotNull(statsTrendResponse.getBuckets()); assertEquals(3, statsTrendResponse.getBuckets() .size());
assertNotNull(countResponse); assertEquals(2, countResponse.getCount());
assertEquals(response.getCounts(), counts);
assertEquals(ErrorCode.STORE_CONNECTION_ERROR, ex.getCode());
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(5, statsTrendResponse.getResult() .size()); assertEquals(8, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertEquals(7, statsTrendResponse.getResult() .get(0) .getPercentiles() .size()); assertNull(statsTrendResponse.getBuckets());
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertEquals(expectedResponse, actualResponse);
assertNotNull(multiQueryResponse); assertEquals(9, countResponse.getCount());
assertEquals(ErrorCode.INVALID_REQUEST, e.getCode());
assertEquals(ErrorCode.MALFORMED_QUERY, ex.getCode());
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("count")); assertNull(statsTrendResponse.getBuckets());
assertEquals(expectedResponse, actualResponse.getResult());
assertEquals(expectedResponse, actualResponse);
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getStats() .containsKey("avg")); assertNull(statsTrendResponse.getBuckets());
assertEquals(tableFieldMapping.getTable(), responseMapping.getTable()); assertEquals(tableFieldMapping.getMappings(), responseMapping.getMappings());
assertTrue(response.getCounts() .equals(counts));
assertEquals(expectedResponse, response.getResult());
assertEquals(response, actualResult.getResult());
assertEquals(expectedResponse, actualResponse);
assertEquals(response.getCounts(), counts);
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(1, statsTrendResponse.getResult() .get(0) .getPercentiles() .size()); assertTrue(statsTrendResponse.getResult() .get(0) .getPercentiles() .containsKey(5d));
assertEquals(expectedResponse, actualResponse);
assertEquals(ErrorCode.INVALID_REQUEST, e.getCode());
assertEquals(request.getTable(), response.getTable()); assertNotNull(response.getMappings());
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertEquals(expectedResponse, actualResponse);
assertEquals(ErrorCode.MALFORMED_QUERY, ex.getCode());
assertEquals(expectedResponse, actualResponse);
assertEquals(ErrorCode.INVALID_REQUEST, ex.getCode());
assertNotNull(multiTimeQueryResponse); assertEquals(9, queryResponse.getTotalHits());
assertEquals(ErrorCode.INVALID_REQUEST, e.getCode());
assertEquals(ErrorCode.STORE_EXECUTION_ERROR, e.getCode());
assertEquals(ErrorCode.INVALID_REQUEST, qse.getCode());
assertNotNull(statsResponse); assertNotNull(statsResponse.getResult()); assertTrue(statsResponse.getResult() .getStats() .containsKey("sum"));
assertEquals(expectedResponse, groupResponse.getResult());
assertNotNull(countResponse); assertEquals(7, countResponse.getCount());
assertNotNull(statsTrendResponse); assertNotNull(statsTrendResponse.getResult()); assertEquals(5, statsTrendResponse.getResult() .size()); assertEquals(8, statsTrendResponse.getResult() .get(0) .getStats() .size()); assertNull(statsTrendResponse.getResult() .get(0) .getPercentiles()); assertNull(statsTrendResponse.getBuckets());
assertEquals(ErrorCode.TABLE_NOT_FOUND, e.getCode());
assertEquals(9, actualResponse.getTotalHits());
assertTrue(br1.compareTo(br2) < 0);
assertEquals(br2, auctionResult.getWinner());
assertTrue(true);
assertTrue(true);
assertNotNull(auctionResult.getOtherBidders()); assertTrue(auctionResult.getOtherBidders().contains(br1));
assertThat(orderHistory.getOrders().get(2).getOrderId()).isEqualTo("order9");
assertThat(orderHistory.getOrders().get(2).getOrderId()).isEqualTo("order3");
assertEquals(23, result.size());
assertEquals("123", gameVariant.getLabel(translator));
assertEquals(900, result.getFixationLength());
assertEquals(10, result.length); assertEquals(20, result[0].length);
assertTrue(testFolder.isDirectory()); assertTrue(expectedFile.exists()); assertTrue(expectedFile.delete()); assertTrue(testFolder.delete());
assertTrue(result.contains(profileDirectory)); assertFalse(result.contains(hiddenDirectory)); assertFalse(result.contains(exampleFile));
assertEquals(Collections.emptyList(), result);
assertEquals("English", result.getLabel()); assertTrue(result.getFlags().get(0).contains("Flag_of_the_United_Kingdom"));
assertTrue(imageView.getImage().getUrl().contains("bear.jpg"));
assertEquals(properties.get("WHEREISITDIR"), configuration.getWhereIsItDir());
assertEquals(1, children.size()); assertTrue(target.getImgLib().pickRandomImage().getUrl().contains("common/default/images"));
assertEquals(3, result.size());
assertEquals(properties.get("BACKGROUND_ENABLED"), configuration.isBackgroundEnabled().toString());
assertEquals("GazePlay v1.2.3", menuBar.getMenus().get(0).getText()); assertEquals("Current Profile: test user name", menuBar.getMenus().get(1).getText());
assertEquals(properties.get("QUESTIONLENGTH"), Long.toString(configuration.getQuestionLength()));
assertTrue(parent.isDirectory()); assertTrue(test.isFile()); assertFalse(parent.isDirectory()); assertFalse(test.isFile());
assertTrue(expected.contains(variant.getLabel(translator)));
assertNotEquals(firstRandom, secondRandom); assertNotEquals(firstRandom, thirdRandom); assertNotEquals(thirdRandom, secondRandom);
assertEquals("[untranslated!] wrong", result);
assertEquals("Fermer", result);
assertTrue(license.getText().contains("test licence"));
assertEquals("123x456 easy", gameVariant.getLabel(translator));
assertEquals(0, result.size());
assertEquals(100, result);
assertEquals("translation", gameVariant.getLabel(translator));
assertEquals(properties.get("FORCE_DISPLAY_NEWS"), configuration.isLatestNewsDisplayForced().toString());
assertNotNull(Utils.getInputStream("data/biboule/images/gazeplayClassicLogo.png"));
assertEquals(properties.get("FIXATIONLENGTH"), configuration.getFixationLength().toString());
assertEquals(9, result.getChildren().size());
assertEquals("eng", result.getLanguage());
assertEquals(BuiltInUiTheme.values().length, result.getItems().size()); assertEquals(BuiltInUiTheme.BLUE, result.getValue()); assertEquals(cssFileProperty.getValue(), "builtin:BLUE"); assertEquals(BuiltInUiTheme.GREEN, result.getValue()); assertEquals(cssFileProperty.getValue(), "builtin:GREEN");
assertEquals("translation", gameVariant.getLabel(translator));
assertEquals(0.5, result.getValue()); assertEquals(0.3, result.getValue()); assertEquals(300, length.get());
assertNotEquals(number, random.random());
assertEquals(0.5, result.getValue()); assertEquals(10, result.getValue()); assertEquals(10000, length.get());
assertTrue(centerPane.getChildren().contains(lineChart)); assertFalse(centerPane.getChildren().contains(lineChart)); assertTrue(centerPane.getChildren().contains(lineChart));
assertTrue(expected.contains(variant.getLabel(translator)));
assertEquals(3, result1.getColumnCount()); assertEquals(6, result1.getRowCount()); assertEquals(5, result2.getRowCount());
assertEquals(101, mockList.size());
assertEquals(0, imageView.getTranslateX()); assertEquals(0, imageView.getTranslateY());
assertEquals(11, result.getItems().size()); assertEquals(0.2, heatMapProperty.getValue());
assertEquals( new File(localDataFolder + "/images", "subdirectory"), Utils.getImagesSubdirectory("subdirectory") );
assertEquals(properties.get("GAZE_MENU"), configuration.isGazeMenuEnable().toString());
assertEquals(properties.get("CSSFILE"), configuration.getCssFile());
assertEquals( System.getProperty("os.name").contains("win"), Utils.isWindows() );
assertNotNull(result);
assertTrue(BackgroundMusicManager.getInstance().getBackupPlaylist().isEmpty());
assertFalse(mute.isVisible()); assertTrue(unmute.isVisible());
assertEquals(properties.get("USER_NAME"), configuration.getUserName());
assertEquals(0, dirs.size());
assertTrue(test.isFile()); assertFalse(test.isFile());
assertEquals(mfr.getMediaList().size(), 0); assertEquals(mfr.getIndexOfFirstToDisplay(), -1);
assertNotEquals(0, mockVolumeSlider.getValue());
assertNotNull(result);
assertTrue(parent.isDirectory()); assertTrue(test.isFile()); assertTrue(test2.isFile()); assertTrue(test3.isFile()); assertFalse(parent.isDirectory()); assertFalse(test.isFile()); assertFalse(test2.isFile()); assertFalse(test3.isFile());
assertEquals(1, imageView.getScaleX()); assertEquals(1, imageView.getScaleY());
assertEquals(6, result.getItems().size()); assertEquals("Q", quitProperty.getValue());
assertEquals(0, AreaOfInterest.orientation( new Point2D(0, 0), new Point2D(1, 1), new Point2D(2, 2) )); assertEquals(1, AreaOfInterest.orientation( new Point2D(2, 5), new Point2D(1, 2), new Point2D(0, 0) )); assertEquals(-1, AreaOfInterest.orientation( new Point2D(0, 0), new Point2D(1, 2), new Point2D(2, 5) ));
assertTrue(mute.isVisible()); assertFalse(unmute.isVisible());
assertEquals("Close", result);
assertEquals(entry.getValue(), Utils.convertWindowsPath(entry.getKey()));
assertEquals(firstRandom, secondRandom);
assertEquals(initial + 1, result);
assertEquals("1.7 (1234)", result);
assertTrue(expected.contains(variant.getLabel(translator)));
assertArrayEquals(expected, actual);
assertEquals(Locale.CHINA.getISO3Language(), configuration.getLanguage());
assertEquals(1, children.size()); assertTrue(target.getImgLib().pickRandomImage().getUrl().contains("biscuit"));
assertTrue(DateUtils.timeNow().matches("[0-9]{2}[:][0-9]{2}[:][0-9]{2}"));
assertEquals(10d, result.getFitHeight()); assertEquals(50d, result.getFitWidth()); assertEquals(5d, result.getFitHeight()); assertEquals(50d, result.getFitWidth());
assertEquals(properties.get("QUIT_KEY"), configuration.getQuitKey());
assertEquals(properties.get("GAZE_MOUSE"), configuration.isGazeMouseEnable().toString());
assertEquals(properties.get("BACKGROUND_STYLE"), configuration.getBackgroundStyle().toString());
assertEquals(0, mockVolumeSlider.getValue());
assertEquals(Locale.CHINA.getCountry(), configuration.getCountry());
assertEquals(500, result.getFixationLength());
assertTrue(dirs.contains("grey"));
assertTrue(testFile.isFile()); assertTrue(testFile.isFile());
assertEquals("GazePlay unreleased version", menuBar.getMenus().get(0).getText()); assertEquals("Current Profile: Default", menuBar.getMenus().get(1).getText());
assertEquals("1.7", result);
assertTrue(captor.getAllValues().contains(Cursor.WAIT)); assertTrue(captor.getAllValues().contains(Cursor.DEFAULT));
assertEquals(2, children.size()); assertTrue(target.getImgLib().pickRandomImage().getUrl().contains("rabbit"));
assertTrue(DateUtils.dateTimeNow().matches("[0-9]{4}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}"));
assertEquals(3, result.getItems().size()); assertEquals("eyetribe", eyeTrackerProperty.getValue());
assertEquals(properties.get("MUSIC_FOLDER"), configuration.getMusicFolder());
assertEquals(properties.get("VIDEO_RECORDING_DISABLED"), configuration.isVideoRecordingEnabled().toString());
assertEquals(new File(localDataFolder, "images"), Utils.getBaseImagesDirectory());
assertTrue(DateUtils.todayCSV().matches("[0-9]{2}[/][0-9]{2}[/][0-9]{4}"));
assertEquals(0.5, result.getValue()); assertEquals(1, result.getValue()); assertEquals(1000, length.get());
assertEquals(2, result.getItems().size()); assertEquals("VERTICAL", buttonOrientationProperty.getValue());
assertFalse(unmute.isVisible()); assertTrue(mute.isVisible());
assertEquals(properties.get("FILEDIR"), configuration.getFileDir());
assertTrue(result.contains("1h 5s")); assertTrue(result.contains("1d 1h 1m 5s"));
assertTrue(mfr.getMediaList().contains(mediaTypeMediaFile)); assertTrue(mfr.getMediaList().contains(urlTypeMediaFile));
assertEquals(expected, configuration.getHeatMapColors());
assertEquals("123x456", gameVariant.getLabel(translator));
assertEquals(properties.get("ENABLE_REWARD_SOUND"), configuration.isEnableRewardSound().toString());
assertTrue(testFolder.mkdir()); assertTrue(testFolder.isDirectory()); assertFalse(expectedFile.exists()); assertTrue(testFolder.delete());
assertEquals(3, result.getRoot().getChildren().size()); assertEquals(4, box.getChildren().size());
assertArrayEquals(expected, actual);
assertEquals(new LinkedHashSet<>(), variantGenerator.getVariants());
assertNull(mediaPlayer);
assertTrue(expected.contains(variant.getLabel(translator)));
assertTrue(DateUtils.today().matches("[0-9]{4}[-][0-9]{2}[-][0-9]{2}"));
assertEquals(properties.get("EYETRACKER"), configuration.getEyeTracker());
assertArrayEquals(r1, e1); assertArrayEquals(r2, e2);
assertTrue(result.isEmpty());
assertTrue(res[0] / 100d > 0.25); assertTrue(res[1] / 100d > 0.25);
assertEquals(BuiltInUiTheme.values().length, result.getItems().size()); assertEquals(BuiltInUiTheme.SILVER_AND_GOLD, result.getValue()); assertEquals(BuiltInUiTheme.GREEN, result.getValue()); assertEquals(cssFileProperty.getValue(), "builtin:GREEN");
assertEquals(properties.get("VIDEO_FOLDER"), configuration.getVideoFolder());
assertEquals(properties.get("MENU_BUTTONS_ORIENTATION"), configuration.getMenuButtonsOrientation());
assertEquals(localDataFolder, Utils.getFilesFolder());
assertEquals(properties.get("FIXATIONSEQUENCE_DISABLED"), configuration.isFixationSequenceDisabled().toString());
assertFalse(mute.isVisible()); assertTrue(unmute.isVisible());
assertTrue(testFile.isFile());
assertTrue(testFolder.mkdir()); assertTrue(testFolder.isDirectory()); assertTrue(expectedFile.exists()); assertTrue(expectedFile.delete()); assertTrue(testFolder.delete());
assertEquals("Current Version", result);
assertEquals(3, result.getRoot().getChildren().size()); assertEquals(5, box.getChildren().size()); assertEquals(button, box.getChildren().get(4));
assertNull(areaChart);
assertEquals(root.getChildren().size(), context.getChildren().size());
assertEquals(properties.get("HEATMAP_OPACITY"), configuration.getHeatMapOpacity().toString());
assertEquals(properties.get("USER_PICTURE"), configuration.getUserPicture());
assertTrue(result.isSelected()); assertFalse(testProperty.getValue());
assertTrue(result.getImage().getUrl().contains(LogoFactory.staticLogoImagePath));
assertEquals(properties.get("HEATMAP_DISABLED"), configuration.isHeatMapDisabled().toString());
assertEquals(initial + 5, result);
assertTrue(res[0] / 1000d > 0.08); assertTrue(res[1] / 1000d > 0.08); assertTrue(res[2] / 1000d > 0.08); assertTrue(res[3] / 1000d > 0.08); assertTrue(res[4] / 1000d > 0.08); assertTrue(res[5] / 1000d > 0.08);
assertThat(node).hasLeaves(1).leavesEqualTo(10);
assertEquals(expectedResult, type.encode(value));
assertThat(boundaryA.compareTo(boundaryB)).isGreaterThan(0);
assertFalse(h1.booleanValue()); assertTrue(h2.booleanValue()); assertFalse(h3.booleanValue());
assertThat(collectionItems).isInstanceOf(List.class);
assertThat(tree).hasDepth(4).levelAt(1).isDictionaryLevel();
assertThat(writer.toString()).containsOnlyOnce("one;two") .containsOnlyOnce("entry_one;entry_one").containsOnlyOnce("entry_two;entry_two");
assertThat(capable).isTrue();
assertNotNull(arr1); assertNotNull(arr2); assertNotSame(arr1, arr2);
assertThat(loader).hasEntryLoader().hasMetadataFor("parameter").hasMetadataWithLevels(5);
assertNotSame(sdf1, sdf2);
assertThat(contains).isFalse();
assertEquals(expected, value);
assertThat(entries).hasSize(1);
assertEquals("15-03-2012", h1.getString()); assertEquals("15-03-2012", h2.getString()); assertNull(h3.getString());
assertTrue(long1.longValue() == (long) h1.intValue()); assertTrue(long2.longValue() != (long) h2.intValue()); assertEquals(0, h3.intValue());
assertEquals(new Integer(long1.intValue()), h1.getInteger()); assertEquals(new Integer(long2.intValue()), h2.getInteger()); assertEquals(null, h3.getInteger());
assertThat(parameter).hasName("parameter").isCacheable().isNullable().hasInputLevels(1).hasLevels(2) .level(0).hasName("level1").hasLevelCreator("level1Creator") .hasType("level1Type").hasMatcher("level1Matcher");
assertThat(parameters).containsExactly("parameter4", "parameter3", "parameter2", "parameter1", "parameter0");
assertThat(method.getName()).isEqualTo("inconventionalSetter");
assertThat(packageList.getPackages()).isNotNull();
assertEquals(0, result);
assertEquals(d1, h1.getDate()); assertEquals(d2, h2.getDate()); assertEquals(null, h3.getDate());
assertEquals(expected, value);
assertThat(writer.toString()).containsOnlyOnce("one;two");
assertArrayEquals(expectedResult, mv.getBigDecimalArray(0));
assertThat(walker.find().get(0)).isExactlyInstanceOf(PreparedEntry.class);
assertThat(caughtException()).isInstanceOf(UnknownMatcherException.class);
assertThat(mv.getBoolean(0)).isTrue();
assertThat(preparedParameter).isNotNull();
assertTrue(e instanceof IllegalArgumentException || e instanceof NumberFormatException);
assertThat(metadata).isNull();
assertArrayEquals(getlevels, entry.getLevels());
assertThat(entries).hasSize(5).isSortedAccordingTo(new ParameterEntryIdSequenceComparator(ids));
assertEquals(new Integer(d1.intValue()), h1.getInteger()); assertEquals(new Integer(d2.intValue()), h2.getInteger()); assertEquals(null, h3.getInteger());
assertThat(parameter).isNotNull().hasName("parameter") .hasLevels(5).hasEntries(5);
assertEquals(BigDecimal.ONE, mv.nextBigDecimal()); assertEquals(BigDecimal.TEN, mv.nextBigDecimal());
assertThat(decoded).isNull();
assertThat(caughtException()).isInstanceOf(GettingWrongTypeException.class);
assertThat(entries).hasSize(4);
assertArrayEquals(e1, mv.nextArray()); assertArrayEquals(e2, mv.nextArray());
assertSame(sdf1, sdf2);
assertEquals(long1, h1.getLong()); assertEquals(long2, h2.getLong()); assertEquals(null, h3.getLong());
assertEquals(expectedResult, type.encode(holder));
assertThat(mv.getLong(0)).isEqualTo(12L);
assertEquals(expectedValue, type.convert(obj).getBigDecimal()); assertEquals(expectedValue, type.convert(obj).getValue());
assertEquals(expectedDate, result.getValue()); assertEquals(expectedDate, result.getDate()); assertEquals(new DateHolder(expectedDate), result);
assertThat(decoded).isInstanceOf(Star.class);
assertEquals(null, array[0].getValue()); assertEquals(false, (boolean) array[1].getValue()); assertEquals(true, (boolean) array[2].getValue());
assertThat(entries).hasSize(10);
assertThat(invoked).isTrue(); assertThat(testObject.privateSetterArg).isEqualTo(1);
assertThat(parameter).isNotNull().hasName("parameter");
assertEquals(d1.doubleValue(), h1.doubleValue(), 0.0); assertEquals(d2.doubleValue(), h2.doubleValue(), 0.0); assertEquals(0, h3.doubleValue(), 0.0);
assertThat(caughtException()).isInstanceOf(NonUniqueItemRegisteredException.class);
assertThat(foundLevel).isNull();
assertEquals(long1.longValue(), h1.longValue()); assertEquals(long2.longValue(), h2.longValue()); assertEquals(0L, h3.longValue());
assertThat(result).isEqualTo(-1);
assertEquals(expectedValue, holder.getValue());
assertThat(entries).isEmpty();
assertSame(h1, mv.nextHolder()); assertSame(h2, mv.nextHolder()); assertSame(h3, mv.nextHolder());
assertThat(mv.getHolder(0)).isSameAs(holder);
assertThat(parameter).hasName("parameter").hasLevels(4).hasEntries(5);
assertThat(capable).isFalse();
assertThat(entries).hasSize(2);
assertThat(decoded.from()).isEqualTo("A"); assertThat(decoded.to()).isEqualTo("B");
assertThat(tree).hasDepth(4) .levelAt(0).isDictionaryLevel() .levelAt(1).isDictionaryLevel() .levelAt(2).isNotDictionaryLevel();
assertThat(caughtException()).isInstanceOf(UnknownTypeException.class);
assertThat(parameters).containsExactly("parameter4");
assertEquals(expectedResult, result); assertEquals(expectedResult, result);
assertEquals(d1, h1.getValue()); assertEquals(d2, h2.getValue()); assertNull(h3.getValue());
assertEquals(bd1, h1.getBigDecimal()); assertEquals(bd2, h2.getBigDecimal()); assertEquals(bd3, h3.getBigDecimal());
assertEquals(expectedValue, holder.getValue());
assertThat(map.get("nullValue")).isNull();
assertThat(wrapper.publicInvoked).isTrue();
assertThat(values).containsOnly("value", "allowAllValue");
assertThat(caughtException()).isInstanceOf(GettingWrongTypeException.class);
assertThat(contains).isTrue();
assertThat(invoked).isFalse();
assertThat(namedRepository).containsRepository(repository).hasName("test");
assertThat(hasMore).isTrue();
assertThat(node).isNull();
assertThat(caughtException()).isInstanceOf(UnsupportedOperationException.class);
assertEquals("A", entry.getLevel(0)); assertEquals("B", entry.getLevel(1)); assertEquals(null, entry.getLevel(2));
assertThat(key.value()).isEqualTo("key");
assertThat(entry).hasLevels("2013-12-04");
assertEquals(expected, value);
assertEquals(d1, h1.getValue()); assertEquals(d2, h2.getValue()); assertNull(h3.getValue());
assertThat(localParamEditor.repositories()).containsOnly(RepositoryName.from("fake1"), RepositoryName.from("fake2"));
assertThat(values).containsOnly("value", "default");
assertThat(node).containsExactly(expectedValue);
assertThat(parameter).isNotNull().hasLevels(1);
assertEquals(d1.longValue(), h1.longValue()); assertEquals(d2.longValue(), h2.longValue()); assertEquals(0L, h3.longValue());
assertThat(map.get("star")).isInstanceOf(Star.class);
assertThat(namedRepository).containsRepository(repository).hasName("test");
assertEquals(expectedResult, result);
assertEquals(expectedValue, holder.getValue());
assertThat(request.invocations).isLessThanOrEqualTo(2);
assertThat(namedRepository).hasName(repositoryClassName);
assertThat(map.getAs("date", Date.class)).isEqualTo("2012-02-12");
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.IDENTICAL);
assertEquals(v1, mv.nextDate()); assertEquals(v2, mv.nextBigDecimal()); assertEquals(v3, mv.nextLong());
assertThat(entries).hasSize(5);
assertThat(normalized.get("level")).isEqualTo("ASC");
assertTrue(d1.intValue() == h1.intValue()); assertTrue(d2.intValue() == h2.intValue()); assertEquals(0, h3.intValue());
assertNotNull(arr1); assertNotNull(arr2); assertNotSame(arr1, arr2);
assertThat(parameter.isNotNull()).isFalse();
assertThat(encoded).isEqualTo("value");
assertThat(preparedParameter).isNull();
assertThat(entries).hasSize(20);
assertThat(objects.get(RepositoryObjectKey.withKey("TEST_CODE2")).property).isSameAs("PROPERTY_VALUE");
assertEquals(expectedResult, result);
assertThat(caughtException()).isInstanceOf(InitializableComponentNotInitialized.class);
assertEquals(new Long(d1.longValue()), h1.getLong()); assertEquals(new Long(d2.longValue()), h2.getLong()); assertEquals(null, h3.getLong());
assertThat(encoded).isEqualTo("A~#B");
assertThat(paramEngine.runtimeConfiguration()).hasParamCache().hasFunctionCache();
assertThat(caughtException()).isInstanceOf(InitializableComponentNotInitialized.class);
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.CONTAINS);
assertEquals(expectedResult, result);
assertThat(mv.getBigDecimal(0)).isEqualTo(BigDecimal.TEN);
assertArrayEquals(expectedResult, unwrapped);
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.AFTER);
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.CONTAINED);
assertEquals(Boolean.FALSE, h1.getBoolean()); assertEquals(Boolean.TRUE, h2.getBoolean()); assertEquals(null, h3.getBoolean());
assertEquals(expectedValue, holder.getValue());
assertThat(boundary.isPlusInfinity()).isTrue();
assertThat(matches).isTrue();
assertEquals(LetterType.A3, mv.nextEnum(LetterType.class)); assertEquals(LetterType.A4, mv.nextEnum(LetterType.class)); assertEquals(null, mv.nextEnum(LetterType.class));
assertThat(invoked).isTrue(); assertThat(testObject.inconventionalSetterArg).isEqualTo("TEST");
assertThat(encoded).isEqualTo("");
assertThat(value).isNull();
assertThat(store.storedRepositories()).containsOnly(new RepositoryName("fakeRepo"));
assertThat(context).hasValue("TEST", "A");
assertThat(caughtException()).isInstanceOf(InitializableComponentNotInitialized.class);
assertThat(encoded).isEqualTo("*");
assertEquals(expectedResult, result);
assertArrayEquals(expectedResult, mv.getIntegerArray(0));
assertThat(clonedParameter).hasNoEntries();
assertEquals(expectedResult, result);
assertEquals(expected, value);
assertThat(preparedLevel).hasName("level").hasLevelCreator(levelCreator) .hasMatcher(matcher).hasType(type);
assertTrue(e instanceof IllegalArgumentException || e instanceof NumberFormatException);
assertThat(caughtException()).isInstanceOf(InvalidValueIndexException.class);
assertThat(mv.getDate(0)).isEqualTo(date);
assertThat(node).containsExactly(42);
assertEquals(expectedHolder, type.decode(text)); assertEquals(expectedHolder.getBigDecimal(), type.decode(text).getBigDecimal());
assertThat(entries).hasSize(5);
assertThat(preparedParameter).hasName("param").hasNoIndex();
assertThat(wrapper.protectedInvoked).isTrue();
assertThat(parameters).hasSize(2);
assertThat(decoded).isEqualTo("hello");
assertThat(parameter).isNotNull().hasName("parameter"); assertThat(reader).hasTextLeft("\\nhello;hello");
assertThat(mv.getInteger(0)).isEqualTo(12);
assertThat(mv.getEnum(0, LetterType.class)).isEqualTo(LetterType.A3);
assertThat(entry).hasLevels("something", "else");
assertArrayEquals(new BigDecimal[]{v0, v1}, mv.nextBigDecimalArray()); assertArrayEquals(new BigDecimal[]{v1, v10}, mv.nextBigDecimalArray());
assertThat(entry).hasLevels("something");
assertThat(encoded).isEqualTo("simpleObject");
assertEquals(d1, h1.getBigDecimal()); assertEquals(d2, h2.getBigDecimal()); assertEquals(null, h3.getBigDecimal());
assertEquals("abc", h1.getValue()); assertNull(h2.getValue());
assertEquals(new Integer(123), mv.nextInteger());
assertThat(mv.getString(0)).isEqualTo("v");
assertThat(caughtException()).isInstanceOf(IllegalStateException.class);
assertThat(caughtException()).isInstanceOf(UnsupportedOperationException.class);
assertThat(preparedLevel).hasName("level").hasLevelCreator(null) .hasMatcher(null).hasType(null);
assertThat(map.get("rawValue")).isEqualTo("something");
assertArrayEquals(expectedResult, mv.getStringArray(0));
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.BEFORE);
assertArrayEquals(expectedResult, mv.asBigDecimals());
assertEquals(d1, mv.nextDate()); assertEquals(d2, mv.nextDate());
assertThat(decoded.from()).isEqualTo("A:B"); assertThat(decoded.to()).isEqualTo(null);
assertEquals(expectedValue, type.convert(obj).getDate());
assertEquals(long1, h1.getValue()); assertEquals(long2, h2.getValue()); assertNull(h3.getValue());
assertArrayEquals(expectedResult, mv.asStrings());
assertThat(nonexistentParam).isNull();
assertThat(context).hasValue("TEST", "A");
assertEquals(expected, result);
assertEquals(new Double(d1.doubleValue()), h1.getDouble()); assertEquals(new Double(d2.doubleValue()), h2.getDouble()); assertEquals(null, h3.getDouble());
assertEquals(expectedHolder.getValue(), holder.getValue());
assertThat(entries).hasSize(10);
assertThat(result).isEqualTo(1);
assertThat(walker.find().get(0)).isInstanceOf(IdentifiablePreparedEntry.class);
assertThat(entry).hasLevels("*");
assertThat(decoded).isEqualTo("value");
assertArrayEquals(new String[]{"A", "B"}, mv.nextStringArray()); assertArrayEquals(new String[]{"B", "C"}, mv.nextStringArray());
assertEquals(b1, h1.getValue()); assertEquals(b2, h2.getValue()); assertNull(h3.getValue());
assertEquals(expectedHolder.getValue(), holder.getValue());
assertThat(entry).hasLevels("");
assertThat(root).hasNoLeaves().hasDirectChild("A");
assertEquals("21474836470999", h1.getString()); assertEquals("0.01234567890123456789012345678901234567890123456789", h2.getString()); assertNull(h3.getString());
assertThat(caughtException()).isInstanceOf(JavaFunctionInvocationException.class);
assertThat(boundaryA.compareTo(boundaryB)).isEqualTo(0);
assertThat(values).containsOnly("value", "default", "allowAllValue");
assertThat(exists).isTrue();
assertThat(output.toString()).isNotEmpty().contains("levels").contains("parameter") .doesNotContain("entries");
assertThat(engine).isNotNull();
assertThat(node).containsExactly(42);
assertEquals("a", mv.nextString()); assertEquals("1", mv.nextString()); assertEquals("9", mv.nextString());
assertNull(result1); assertNull(result2);
assertArrayEquals(expectedResult, mv.getDateArray(0));
assertThat(matches).isTrue();
assertEquals(expectedResult, result);
assertThat(item).isEqualTo("1");
assertThat(matches).isFalse();
assertThat(metadata).hasName("parameter").hasLevels(4).hasNoEntries();
assertThat(matches).isTrue();
assertThat(result).isEqualTo(0);
assertThat(decoded.from()).isEqualTo("A"); assertThat(decoded.to()).isEqualTo("B");
assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.NONE);
assertThat(namedRepository1).hasName(repositoryClassName + "1"); assertThat(namedRepository2).hasName(repositoryClassName + "2");
assertEquals(new Long(123), mv.getLong(0));
assertThat((Map) filters.get(RequestField.of("name"))) .hasSize(1) .containsEntry(RequestOperator.of(OperatorType.REGEX), "John");
assertThat(result).isEqualTo(new Criteria().orOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("name").in("Doe", "Smith")));
assertThat(requestField).isNotEqualTo(RequestField.of("bar"));
assertThat(foundBinding).isPresent();
assertThat(result).isEqualTo(expectedCriteria);
assertThat(requestField).isEqualTo(RequestField.of("foo"));
assertThat(result).isEqualTo(new Criteria().orOperator(Criteria.where("name").regex("^John", "i")));
assertThat((Map) filters.get(RequestField.of("name"))) .containsEntry(RequestOperator.of(OperatorType.EQUAL.getName()), "John"); assertThat((Map) filters.get(RequestField.of("size"))) .containsEntry(RequestOperator.of(OperatorType.GREATER_THAN_EQUAL.getName()), "5");
assertThat(result).isEqualTo(new Criteria().orOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("name").in("John", "Bob")));
assertThat((Map) filters.get(RequestLogicalOperator.of(LogicalOperatorType.OR))) .hasSize(2) .containsEntry(RequestField.of("name"), ImmutableMap.of(RequestOperator.of(OperatorType.EQUAL), "John")) .containsEntry(RequestField.of("surname"), ImmutableMap.of(RequestOperator.of(OperatorType.STARTS_WITH), "Doe"));
assertThat(requestLogicalOperator).isEqualTo(RequestLogicalOperator.of("$or"));
assertThat(result).isEqualTo(new Criteria().orOperator( Criteria.where("remappedName").regex("^John", "i"), Criteria.where("secondName").regex("^Bob", "i"), Criteria.where("remappedLastName").in("Doe", "Smith")));
assertThat(result).isEqualTo(Criteria.where("name").regex("^John", "i"));
assertThat(result).isEqualTo(new Criteria().andOperator( Criteria.where("initialField").is("initialValue"), new Criteria().orOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("secondName").regex("^Bob", "i"), Criteria.where("lastName").in("Doe", "Smith")) ) );
assertThat(requestOperator).isNotEqualTo(RequestOperator.of("$startsWith"));
assertThat(foundBinding).isPresent();
assertThat(criteria).isEqualTo(new Criteria());
assertThat(binding).isEmpty();
assertThat(binding).isEmpty();
assertThat(foundBinding) .isPresent() .contains(illegalStateBinding);
assertThat(requestOperator).isEqualTo(RequestOperator.of("$eq"));
assertThat(result).isEqualTo(new Criteria().orOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("lastName").in("Doe", "Smith")));
assertThat(result).isEqualTo(new Criteria().andOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("secondName").regex("^Bob", "i"), Criteria.where("lastName").in("Doe", "Smith")));
assertThat((Map) filters.get(RequestField.of("name"))) .containsEntry(RequestOperator.of(OperatorType.EQUAL.getName()), "John");
assertThat(foundBinding).isEmpty();
assertThat(result).isEqualTo(new Criteria().andOperator( Criteria.where("name").regex("^John", "i"), Criteria.where("name").in("John", "Bob")));
assertThat(result).isEqualTo(new Criteria().orOperator(Criteria.where("count").lt(5)));
assertEquals("org/bukkit/craftbukkit/caveupdate/XD", internal.getOBC("XD").getInternalName());
assertEquals("org/bukkit/craftbukkit/caveupdate/XD/DDDD", internal.getOBC("XD/DDDD").getInternalName());
assertEquals("net/minecraft/server/caveupdate/XD/DDDD", internal.getNMS("XD/DDDD").getInternalName());
assertEquals("net/minecraft/server/caveupdate/XD", internal.getNMS("XD").getInternalName());
assertFalse(value);
assertEquals("hostNAME", result);
assertEquals(4243, value);
assertFalse(value);
assertEquals(52, wrapper.getFetchInterval(-1));
assertFalse(result);
assertEquals(1122, wrapper.getServerPort(TankSelector.valuesWithoutMix()[0], -1));
assertFalse(result);
assertTrue(wrapper.getFillLevelDiagram(testTank, false));
assertEquals(liquid, new SubtractiveMixingStrategy().mixLiquids(liquids));
assertEquals(empty, pipe.putIn(l1)); assertEquals(empty, pipe.putIn(l2)); assertEquals(empty, pipe.putIn(l1)); assertEquals(empty, pipe.putIn(l1)); assertEquals(empty, pipe.putIn(l2)); assertEquals(l1, pipe.putIn(l2)); assertEquals(l2, pipe.putIn(l2)); assertEquals(l1, pipe.putIn(l2)); assertEquals(l1, pipe.putIn(l2));
assertFalse(value);
assertTrue(value);
assertEquals(15f, parser.variables.get("x"), 0.0001); assertEquals(16f, parser.variables.get("y"), 0.0001); assertEquals(15f, parser.variables.get("x"), 0.0001); assertEquals(18f, parser.variables.get("y"), 0.0001);
assertTrue(value);
assertTrue(value);
assertEquals("branch", output);
assertNotNull(tank.getMotor());
assertEquals(0f, parser.readNumber(), 0.0001); assertEquals(424242f, parser.readNumber(), 0.0001); assertEquals(0.05f, parser.readNumber(), 0.0001); assertEquals(45.67f, parser.readNumber(), 0.0001);
assertFalse(result);
assertEquals(1122, interval);
assertTrue(value);
assertEquals(25f, parser.readExpression(), 0.0001); assertEquals(26f, parser.readExpression(), 0.0001); assertEquals(10f, parser.readExpression(), 0.0001);
assertTrue(observed);
assertEquals(1042, wrapper.getServerPort(TankSelector.valuesWithoutMix()[0], -1));
assertEquals(1122, interval);
assertTrue(value);
assertTrue(liquid1.equals(liquid2)); assertTrue(liquid2.equals(liquid1)); assertFalse(liquid1.equals(null)); assertFalse(liquid1.equals("test")); assertFalse(liquid1.equals(liquid2)); assertFalse(liquid2.equals(liquid1)); assertFalse(liquid1.equals(liquid2)); assertFalse(liquid2.equals(liquid1));
assertEquals(new Liquid(400, 330, new Color(0x770000)), result);
assertEquals(SimulationConstants.MIN_TEMPERATURE, site.getInputTemperature(selector), 0.001);
assertEquals(80, result);
assertEquals("local", value);
assertEquals(4242, result);
assertEquals(new Liquid(300, 375, new Color(0x101000)), tank.getLiquid());
assertFalse(value);
assertEquals(color1.hashCode(), color2.hashCode()); assertNotEquals(color1.hashCode(), color2.hashCode());
assertEquals(liquid1.hashCode(), liquid2.hashCode()); assertNotEquals(liquid1.hashCode(), liquid2.hashCode()); assertNotEquals(liquid1.hashCode(), liquid2.hashCode());
assertEquals(new Liquid(33, 350, new Color(0x421337)), out); assertEquals(new Liquid(67, 350, new Color(0x421337)), out);
assertFalse(value);
assertFalse(result);
assertFalse(result);
assertEquals(424299, helpPort);
assertEquals(new Liquid(200, 325, new Color(0x7f7f7f)), result);
assertEquals(1000, result);
assertTrue(value);
assertEquals(-1, result);
assertTrue(counter.get() > state1); assertTrue(scenario.isRunning());
assertEquals(inPipe, tank.getInPipe()); assertEquals(outPipe, tank.getOutPipe());
assertFalse(value);
assertEquals(-5f, parser.readFactor(), 0.0001); assertEquals(3f, parser.readFactor(), 0.0001); assertEquals(10f, parser.readFactor(), 0.0001); assertEquals(42f, parser.readFactor(), 0.0001); assertEquals(-42f, parser.readFactor(), 0.0001);
assertEquals(new Liquid(33, 350, new Color(0x421337)), out); assertEquals(new Liquid(67, 350, new Color(0x421337)), out);
assertTrue(future1.get(100, TimeUnit.MILLISECONDS)); assertFalse(future2.isDone()); assertTrue(scenario.isRunning()); assertFalse(future2.isDone()); assertTrue(scenario.isRunning()); assertTrue(future2.get(300, TimeUnit.MILLISECONDS)); assertFalse(scenario.isRunning());
assertFalse(value);
assertTrue(wrapper.getTempDiagram(testTank, false));
assertEquals("hi", output);
assertTrue(value);
assertEquals(10, machine.getPort());
assertTrue(wrapper.getOverheatingAlarm(testTank, false));
assertTrue(wrapper.getUnderflowAlarm(testTank, false));
assertEquals(new Liquid(500, 310, new Color(0x102001)), result);
assertEquals(25f, parser.readTerm(), 0.0001); assertEquals(-3f, parser.readTerm(), 0.0001); assertEquals(10f, parser.readTerm(), 0.0001); assertEquals(3f / -42f, parser.readTerm(), 0.0001); assertEquals(1f, parser.readTerm(), 0.0001); assertEquals(84f, parser.readTerm(), 0.0001);
assertFalse(value);
assertTrue(value);
assertEquals("mac", machine.getHostname());
assertTrue(value);
assertEquals(1042, wrapper.getPort(testTank, -1));
assertTrue(wrapper.getOverflowAlarm(testTank, false));
assertTrue(value);
assertFalse(result);
assertTrue(value);
assertTrue(color1.equals(color2)); assertTrue(color2.equals(color1)); assertFalse(color1.equals(null)); assertFalse(color1.equals("test")); assertFalse(color1.equals(color2)); assertFalse(color2.equals(color1));
assertEquals(new Liquid(200, 330, new Color(0x402010)), tank.getLiquid());
assertFalse(pipe.isLiquidEntering()); assertTrue(pipe.isLiquidEntering()); assertFalse(pipe.isLiquidEntering());
assertEquals(5f, parser.variables.get("x"), 0.0001); assertEquals(10f, parser.variables.get("y"), 0.0001);
assertEquals(15f, parser.variables.get("x"), 0.0001); assertEquals(-6f, parser.variables.get("myVariable"), 0.0001); assertEquals(-42f, parser.variables.get("var"), 0.0001);
assertEquals(4243, value);
assertFalse(value);
assertEquals("123.123", wrapper.getHostname(testTank, "ERROR"));
assertTrue(value);
assertEquals(-1, result);
assertFalse(value);
assertFalse(value);
assertFalse(value);
assertEquals(0, result.getAmount(), 0.00001);
assertEquals("hello", o.pagename); assertEquals(12345678901234L, o.cid); assertEquals(new Long(22345678901234L), o.tid); assertNull(o.c); assertEquals("oof", o.bar);
assertEquals("me", object.foo); assertEquals("foot", object.foot);
assertEquals(expected, result);
assertEquals(DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE, result);
assertEquals(expected, result);
assertEquals(DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT, result);
assertEquals(DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS, result);
assertEquals(MockEvents.LOG_MESSAGE, object.getString(LogstashEventFormat.MESSAGE)); assertEquals(MockEvents.LOGGER_NAME, object.getString(LogstashEventFormat.SOURCE)); assertEquals("INFO", object.getJsonArray(LogstashEventFormat.TAGS).getString(0)); assertEquals(MockEvents.LOG_PROPERTY_VALUE, object.getJsonObject(LogstashEventFormat.FIELDS).getString(MockEvents.LOG_PROPERTY_ID)); assertNotNull(object.get(LogstashEventFormat.TIMESTAMP));
assertEquals(expectedText, scriptPanel.getText()); assertEquals(13, scriptPanel.getSelectionStart()); assertEquals(226 + CommentUtil.BLOCK_COMMENT_START.length() + CommentUtil.BLOCK_COMMENT_END.length(), scriptPanel.getSelectionEnd());
assertTrue(cp.get(Double.NEGATIVE_INFINITY).equals(tester));
assertFalse(sta.validateStroke(new GraphicStroke()));
assertEquals(result, wKTReader.read("POLYGON ((118 134, 118 278,196 278, 266 278, 266 134, 118 134 ))")); assertNull(result);
assertTrue(tester.equals(rm)); assertTrue(ca.get(Double.NEGATIVE_INFINITY).equals(tester)); assertTrue(ca.get(100000.0).equals(tester)); assertFalse(ca.containsKey(75000.0));
assertEquals(expectedLength, length, 10E-11);
assertEquals(0.0, length, 10E-11);
assertTrue(GeometryEdit.splitLineStringWithLine(lineA, lineB).equals(wKTReader.read("LINESTRING(50 0, 100 0)")));
assertTrue(cs.getFallbackValue().equals(-15.0)); assertTrue(cs.getFallbackValue().equals(16.8));
assertTrue(result.equals(expected));
assertTrue(first == second); assertFalse(third == second); assertFalse(second == third);
assertEquals(expResult, result); assertEquals(expResult, result); assertEquals(expResult, result);
assertTrue(cpm == categorize.getFallbackValue().getColor(null, -1));
assertTrue(cp.get(Double.NEGATIVE_INFINITY).equals(tester));
assertTrue(true);
assertFalse(sta.validateFill(as.getFill()));
assertTrue(ca.get(Double.NEGATIVE_INFINITY).equals(tester)); assertTrue(ca.get(70000.0).equals(tester)); assertTrue(ca.get(100000.0).equals(tester)); assertTrue(ca.get(110000.0).equals(tester));
assertNull(cs.remove(50.0)); assertNull(cs.remove(Double.NEGATIVE_INFINITY));
assertTrue(cs.getFallbackValue().equals("fallback")); assertTrue(cs.getFallbackValue().equals("yo"));
assertTrue(descr.getTitle(new Locale("en")).equals("Hello")); assertTrue(descr.getTitle(new Locale("en","en")).equals("Good morning")); assertTrue(descr.getTitle(new Locale("en")).equals("Hello"));
assertTrue(ca.getFallbackParameters().equals(ap));
assertTrue(cs.getFallbackValue().equals(Color.decode("#001122"))); assertTrue(cs.getFallbackValue().equals(Color.decode("#EDCBA0")));
assertEquals("toto", FileUtils.getNameFromURI(f.toURI())); assertEquals("LANDCOVER2000", FileUtils.getNameFromURI(u)); assertEquals("landcover2000.shp", FileUtils.getNameFromURI(u));
assertTrue(rect.getMapItem().size() == 4);
assertTrue(bbs.size()==2); assertTrue(exp1.equals(real0) || exp2.equals(real0)); assertTrue(exp1.equals(real1) || exp2.equals(real1)); assertFalse(real1.equals(real0));
assertNull(SeParameterFactory.createStringParameter((ParameterValueType) null)); assertNull(SeParameterFactory.createStringParameter((JAXBElement<?>) null));
assertTrue(ca.get(Double.NEGATIVE_INFINITY).equals(tester)); assertTrue(ca.get(70000.0).equals(tester)); assertTrue(ca.get(75000.0).equals(tester)); assertTrue(ca.get(100000.0).equals(tester)); assertTrue(ca.get(110000.0).equals(tester));
assertTrue(rm.equals(tester));
assertEquals(pointAt.getX(), 20.0, 0.00001); assertEquals(pointAt.getY(), 30.0, 0.00001);
assertTrue(sta.validateStrokeAndFill(new PenStroke(),null));
assertEquals(KeyEvent.VK_E,action.getMnemonic()); assertEquals("Hello",action.getValue(Action.NAME));
assertTrue(sta.validateStroke(as.getStroke()));
assertFalse(sta.validateGraphic(new PieChart()));
assertFalse(sta.validateGraphic(mg));
assertTrue(tl.count == 1); assertTrue(tl.count == 2);
assertTrue(sta.validateStrokeAndFill(null,new SolidFill()));
assertEquals(result.get(0).getNumInteriorRing(), 1); assertEquals(result.get(0).getInteriorRingN(0).getEnvelopeInternal(), cutter.getEnvelopeInternal()); assertEquals(result.get(0), wKTReader.read("POLYGON (( 2 0, 0 0, 0 10, 10 10, 10 0, 7.177873563218391 0, 7.177873563218391 7, 2 7, 2 0 ))"));
assertTrue(true);
assertEquals(geomLocation.getSegmentIndex(), 0); assertTrue(geomLocation.getCoordinate().equals2D(new Coordinate(243.56500711237555, 204.7044096728307)));
assertEquals(originalText, scriptPanel.getText());
assertTrue(categorize.getNumClasses() == 1); assertTrue(categorize.get(0).getColor(null, -1) == class1.getColor(null, -1));
assertTrue(ap2.equals(usa.getAreaParameters()));
assertTrue(cs.getField().equals("")); assertTrue(cs.getField().equals("potato")); assertTrue(cs.getField().equals("height")); assertTrue(cs.getField().equals("new")); assertTrue(vf.getColumnName().equals("new"));
assertTrue(usa.getFillLegend().getColor().equals(Color.CYAN)); assertTrue(usa.getFillLegend().getOpacity() - .46 < EPS); assertTrue(usa.getStrokeLegend().getDashArray().equals("2")); assertTrue(usa.getStrokeLegend().getLineWidth() - 42.0 < EPS); assertTrue(usa.getStrokeLegend().getLineColor().equals(Color.BLUE)); assertTrue(usa.getStrokeLegend().getLineOpacity() - .25 < EPS);
assertEquals(op1.getChildren().size(),2);
assertTrue(sta.validateFill(as.getFill()));
assertTrue(ap.equals(ap2)); assertFalse(ap.equals("ahoi"));
assertTrue(GeometryEdit.splitLineStringWithLine(lineA, lineB). equals(wKTReader.read("MULTILINESTRING((0 0, 50 0), (50 0 , 100 0))")));
assertEquals(10, scriptPanel.getSelectionStart()); assertEquals(28 - CommentUtil.BLOCK_COMMENT_START.length() - CommentUtil.BLOCK_COMMENT_END.length(), scriptPanel.getSelectionEnd()); assertEquals("This is a test for block uncommenting.", scriptPanel.getText());
assertEquals(expectedLength, length, 10E-11);
assertTrue(exp1.equals(real0) || exp2.equals(real0)); assertTrue(exp1.equals(real1) || exp2.equals(real1)); assertFalse(real1.equals(real0));
assertTrue(tl.count == 1); assertTrue(tl.count == 2);
assertTrue(result.getCoordinates()[0].equals2D(point.getCoordinate()));
assertTrue(cs.getValueReference() == vf);
assertTrue(sta.validateGraphic(mg));
assertTrue((af.getType() & AffineTransform.TYPE_GENERAL_ROTATION) != 0); assertFalse((af.getType() & AffineTransform.TYPE_FLIP) != 0);
assertFalse(sta.validateStroke(s));
assertTrue(sta.validateStrokeAndFill(null, null));
assertArrayEquals(new Integer[] {11, 12, 13, 45, 46}, tail.toArray()); assertArrayEquals(new Integer[] {45, 46}, tail.toArray()); assertArrayEquals(new Integer[] {10, 11, 12, 13, 45, 46}, tail.toArray()); assertArrayEquals(new Integer[] {46}, tail.toArray()); assertArrayEquals(new Integer[] {45, 46}, tail.toArray());
assertTrue(true);
assertTrue(ca.getFallbackParameters().equals(ap));
assertTrue(env.equals(new Envelope(40,70,40,70))); assertTrue(env.equals(new Envelope(10,20,10,20)));
assertEquals(ps.getLineCap(), PenStroke.LineCap.BUTT); assertEquals(ps.getLineCap(), PenStroke.LineCap.BUTT); assertEquals(ps.getLineCap(), PenStroke.LineCap.SQUARE);
assertTrue(cs.remove(20.0).equals("Greater")); assertNull(cs.remove(20.0));
assertEquals(result.getCoordinates().length, 6); assertEquals(result.getCoordinates().length, 7); assertEquals(result.getCoordinates().length, 1); assertEquals(result.getCoordinates().length, 2); assertEquals(result.getCoordinates().length, 10);
assertTrue(tester.equals(new AreaParameters(Color.decode("#dd77ee"),.2,7.0,"1 6 8 1",Color.decode("#dd66ee"),.5))); assertTrue(ca.get(70000.0).equals(tester)); assertTrue(ca.get(100000.0).equals(tester)); assertFalse(ca.containsKey(75000.0));
assertNull(cs.remove(50.0)); assertNull(cs.remove(Double.NEGATIVE_INFINITY));
assertTrue(WMService.WMS_1_3_0.equals(vers));
assertTrue(cs.remove(20.0).equals(24.0)); assertNull(cs.remove(20.0));
assertEquals(result, wKTReader.read("LINESTRING(0 8, 1 8 , 1.5 8, 3 8, 8 8, 10 8, 20 8)")); assertNull(result);
assertEquals(13, scriptPanel.getSelectionStart()); assertEquals(226 + CommentUtil.BLOCK_COMMENT_START.length() + CommentUtil.BLOCK_COMMENT_END.length(), scriptPanel.getSelectionEnd()); assertEquals(13, scriptPanel.getSelectionStart()); assertEquals(226, scriptPanel.getSelectionEnd()); assertEquals(originalText, scriptPanel.getText());
assertTrue(sta.validateStrokeAndFill(new PenStroke(),new SolidFill()));
assertTrue(true);
assertTrue(ca.getFallbackParameters().equals(ap));
assertEquals(ps.getWidth().getValue(null), (Double) PenStroke.DEFAULT_WIDTH); assertEquals(ps.getWidth().getValue(null), (Double) PenStroke.DEFAULT_WIDTH); assertEquals(ps.getWidth().getValue(null),(Double) 0.4);
assertTrue(ca.get(Double.NEGATIVE_INFINITY).equals(tester));
assertEquals(CommentUtil.SQL_COMMENT_CHARACTER + LINE_ONE + CommentUtil.SQL_COMMENT_CHARACTER + LINE_TWO + LINE_THREE, scriptPanel.getText());
assertTrue(sfi.getColor() instanceof Categorize); assertTrue(sfi.getOpacity() instanceof Categorize); assertTrue(sfp.getColor() instanceof Categorize); assertTrue(sfp.getOpacity() instanceof Categorize); assertTrue(ps.getDashArray() instanceof Categorize); assertTrue(ps.getWidth() instanceof Categorize);
assertTrue("Invalid Locale parts size:"+parts.length, parts.length==1); assertTrue("Invalid Locale parts size:"+parts.length, parts.length==1); assertTrue("Invalid Locale parts size:"+parts.length, parts.length==2); assertTrue("Invalid Locale parts size:"+parts.length, parts.length==3);
assertEquals("1, 12, 14", CollectionUtils.getCommaSeparated(array)); assertEquals("", CollectionUtils.getCommaSeparated(array));
assertEquals(expectedLength, length, 10E-11);
assertTrue(cs.remove(20.0).equals(Color.decode("#332133"))); assertNull(cs.remove(20.0));
assertTrue(ca.get(Double.NEGATIVE_INFINITY).equals(tester));
assertEquals(ps.getLineJoin(), PenStroke.LineJoin.MITRE); assertEquals(ps.getLineJoin(), PenStroke.LineJoin.MITRE); assertEquals(ps.getLineJoin(), PenStroke.LineJoin.BEVEL);
assertTrue(result.equals(expected));
assertEquals(expectedLength, length, 10E-11);
assertEquals(KeyEvent.VK_W,menu.getMnemonic()); assertEquals("Smith & Wesson",menu.getText());
assertTrue(mg.getWkn().getValue(null, 0).equalsIgnoreCase("circle")); assertTrue(mg.getViewBox().getWidth().getValue(null, 0) == 3.0); assertTrue(mg.getUom() == Uom.MM); assertNotNull(mg.getOwnUom());
assertTrue(cp.get(Double.NEGATIVE_INFINITY).equals(tester));
assertTrue(categorizedArea.getSymbolizer() == as);
assertTrue(c2c.get(0).getColor(null, 0).equals(new Color(0x11, 0x33, 0x55))); assertTrue(c2c.get(1).getColor(null, 0).equals(new Color(0xdd, 0x66, 0xee))); assertTrue(c2c.get(2).getColor(null, 0).equals(new Color(0xff, 0xaa, 0x99)));
assertEquals(expectedLength, length, 10E-11);
assertTrue(tl.count == 1); assertTrue(tl.count == 2);
assertEquals(geomLocation.getSegmentIndex(), 1); assertTrue(geomLocation.getCoordinate().equals2D(new Coordinate(1.5, 8))); assertEquals(geomLocation.getSegmentIndex(), 0); assertTrue(geomLocation.getCoordinate().equals2D(new Coordinate(1, 8))); assertNull(geomLocation);
assertEquals(expectedLength * 2, length, 10E-11);
assertTrue(ap2.equals(usa.getPointParameters()));
assertFalse(sta.validateGraphic(mg));
assertEquals(result.getNumGeometries(), 5); assertEquals(result.getNumGeometries(), 6); assertEquals(result.getNumGeometries(), 6); assertNull(result); assertNull(result);
assertEquals("H&ello",menu.getText()); assertEquals(KeyEvent.VK_E,menu.getMnemonic()); assertEquals("Hello",menu.getText());
assertTrue(cs.get(20.0).equals(24.0)); assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals(100.0)); assertNull(cs.get(25.0)); assertTrue(cs.get(30.0).equals(0.1)); assertNull(cs.get(25.0)); assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals(16.8));
assertEquals(TEXT, scriptPanel.getText());
assertTrue(rs.next()); assertEquals(expectedPk, rs.getLong(1)); assertFalse(rs.next());
assertTrue(rm.equals(tester));
assertTrue(op1.getOperator() == RealFunction.Operators.LOG); assertTrue(op1.getOperands().isEmpty());
assertEquals(expResult, result);
assertEquals(results[0], wKTReader.read("LINESTRING(0 8, 1 8 , 1.5 8)")); assertEquals(results[1], wKTReader.read("LINESTRING(1.5 8 , 3 8, 8 8, 10 8, 20 8, 25 8, 30 8, 50 8, 100 8)"));
assertTrue(lp.equals(lp2)); assertFalse(lp.equals(lp2)); assertFalse(lp.equals(lp2)); assertFalse(lp.equals(lp2)); assertFalse(lp.equals(lp2));
assertNull(cs.remove(50.0)); assertNull(cs.remove(Double.NEGATIVE_INFINITY));
assertTrue(ps.getFill() instanceof SolidFill); assertEquals(sf.getColor().getColor(null),Color.BLACK); assertEquals(sf.getOpacity().getValue(null), (Double)1.0); assertTrue(ps.getFill() instanceof SolidFill); assertEquals(sf.getColor().getColor(null),Color.BLACK); assertEquals(sf.getOpacity().getValue(null), (Double)1.0); assertFalse(ps.getFill() instanceof SolidFill);
assertEquals(result, wKTReader.read("LINEARRING(0 8, 1 8 , 1.5 8, 3 8, 8 8, 10 8, 20 8, 0 8)")); assertNull(result);
assertEquals(LINE_ONE + CommentUtil.SQL_COMMENT_CHARACTER + LINE_TWO + LINE_THREE, scriptPanel.getText());
assertTrue(h.getChildren().size() == 2);
assertTrue(recode.getColor(null, -1) == c1.getColor(null, -1)); assertTrue(recode.getColor(null, -1) == c2.getColor(null, -1)); assertTrue(recode.getColor(null, -1) == c3.getColor(null, -1)); assertTrue(false);
assertTrue(cs.getFromLower(25.0).equals(Color.decode("#332133")));
assertTrue(first == second); assertFalse(third == second);
assertTrue(cp.getSymbolizer().equals(ps));
assertTrue(cs.get(20.0).equals("Greater")); assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals("youhou")); assertNull(cs.get(25.0)); assertTrue(cs.get(30.0).equals("EvenGreater")); assertNull(cs.get(25.0)); assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals("yo"));
assertTrue(ps.getWidth() instanceof Categorize); assertTrue(ps.getDashArray() instanceof Categorize); assertTrue(((SolidFill)ps.getFill()).getColor() instanceof Categorize); assertTrue(((SolidFill)ps.getFill()).getOpacity() instanceof Categorize);
assertEquals(112, UnsignedByteUtils.unsignedByteToInt(a)); assertEquals(252, UnsignedByteUtils.unsignedByteToInt(b));
assertTrue(true);
assertTrue(cs.getFromLower(25.0).equals(24.0));
assertTrue(cs.getFromLower(25.0).equals("Greater"));
assertEquals(CommentUtil.SQL_COMMENT_CHARACTER + CommentUtil.SQL_COMMENT_CHARACTER + LINE_ONE + CommentUtil.SQL_COMMENT_CHARACTER + LINE_TWO + CommentUtil.SQL_COMMENT_CHARACTER + CommentUtil.SQL_COMMENT_CHARACTER + LINE_THREE, scriptPanel.getText());
assertNull(cs.getValueReference());
assertTrue(Double.isNaN(result.getStartPoint().getCoordinate().z)); assertTrue(Double.isNaN(result.getEndPoint().getCoordinate().z)); assertTrue(result.getStartPoint().getCoordinate().z == 0); assertTrue(result.getEndPoint().getCoordinate().z == 10); assertTrue(result.getCoordinates()[1].z == 5);
assertFalse(sta.validateGraphic(mg));
assertEquals(expectedLength, length, 10E-11);
assertEquals(expectedDistance, coords[0].distance(coords[1]), 10E-9);
assertEquals(result, 100.0, 0.00000001); assertEquals(result, 102.5, 0.00000001); assertEquals(result, 155.0, 0.00000001); assertEquals(result, 200.0, 0.00000001);
assertTrue(rs.next()); assertEquals(expectedPk, rs.getLong(1)); assertFalse(rs.next());
assertTrue(descr.getAbstract(new Locale("en")).equals("I\'ve said hello !")); assertTrue(descr.getAbstract(new Locale("en","en")).equals("Good morning world")); assertTrue(descr.getAbstract(new Locale("en")).equals("I\'ve said hello !"));
assertThat("Timer is not registered correctly", timer, notNullValue()); assertThat("Timer count is incorrect", timer.getCount(), is(equalTo(1L)));
assertNotNull(metricRegistry.getCounter(constructorMetricId)); assertNotNull(metricRegistry.getCounter(methodMetricId)); assertEquals(1, metricRegistry.getCounter(methodMetricId).getCount());
assertThat("Gauges are not registered correctly", parentGauge, notNullValue()); assertThat("Gauges are not registered correctly", childGauge, notNullValue()); assertThat("Gauge values are incorrect", Arrays.asList(parentGauge.getValue(), childGauge.getValue()), contains(parentValue, childValue));
assertThat("Histogram is not registered correctly", histogram, notNullValue()); assertThat("Histogram count is incorrect", histogram.getCount(), is(equalTo(1L))); assertThat("Histogram size is incorrect", histogram.getSnapshot().size(), is(equalTo(1))); assertThat("Histogram min value is incorrect", histogram.getSnapshot().getMin(), is(equalTo(value))); assertThat("Histogram max value is incorrect", histogram.getSnapshot().getMax(), is(equalTo(value)));
assertNotNull(metricRegistry.getCounter(constructorMetricId)); assertEquals("description", constructorMetadata.description().orElse(null)); assertEquals("displayName", constructorMetadata.getDisplayName()); assertNotNull(metricRegistry.getCounter(methodMetricId)); assertEquals("description", methodMetadata.description().orElse(null)); assertEquals("displayName", methodMetadata.getDisplayName()); assertEquals(1, metricRegistry.getCounter(methodMetricId).getCount());
assertThat("Counter is not registered correctly", counter, notNullValue()); assertThat("Counter value is incorrect", counter.getCount(), is(equalTo(value)));
assertThat("Timer is not registered correctly", timer, notNullValue()); assertThat("Timer count is incorrect", timer.getCount(), is(equalTo(1L)));
assertThat("Counter is not registered correctly", counter, notNullValue()); assertThat(cause, is(Matchers.<Exception>instanceOf(IllegalStateException.class))); assertThat("Counter count is incorrect", counter.getCount(), is(equalTo(COUNTER_COUNT.get())));
assertThat("Timer counts are incorrect", registry.getTimers().values(), hasItem(Matchers.<Timer> hasProperty("count", equalTo(1L))));
assertThat("Counter is not registered correctly", counter, notNullValue()); assertThat("Counter count is incorrect", counter.getCount(), is(equalTo(COUNTER_COUNT.incrementAndGet()))); assertThat("Counted method return value is incorrect", exchanger.exchange(0L), is(equalTo(random))); assertThat("Counter count is incorrect", counter.getCount(), is(equalTo(COUNTER_COUNT.get()))); assertThat("Exception thrown in method call thread", uncaught.get(), is(equalTo(0)));
assertThat("Gauge is not registered correctly", gauge, notNullValue()); assertThat("Gauge value is incorrect", gauge.getValue(), is(equalTo(0L)));
assertThat("Timer is not registered correctly", timer, notNullValue()); assertThat("Timer count is incorrect", timer.getCount(), is(equalTo(1L)));
assertThat("Gauge value is incorrect", gauge.getValue(), is(equalTo(value)));
assertThat("Concurrent Gauge is not registered correctly", cGauge, notNullValue()); assertThat(cause, is(instanceOf(IllegalStateException.class))); assertThat("Concurrent Gauges count is incorrect", cGauge.getCount(), is(equalTo(COUNTER_COUNT.get())));
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(300); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(100);
assertThat(nodeSelector.getNodeSelectorTerms()).hasSize(1); assertThat(nodeSelector.getNodeSelectorTerms().get(0).getMatchExpressions().get(0).getValues().get(0)).isEqualTo(SPECIFIC_GPU_INSTANCE_TYPE);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine does not exist");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Instance group does not run non gpu tasks");
assertThat(response.getStatus()).isEqualTo(SERVING); assertThat(response.getDetailsCount()).isEqualTo(2); assertThat(response.getDetails(0).hasDetails()).isTrue(); assertThat(response.getDetails(1).hasDetails()).isTrue(); assertThat(cellsSeen).contains("one", "two");
assertThat(output.length()).isLessThan(input.length());
assertThat(result).isEqualTo(adjustedResources);
assertThat(pageResult.getPagination().getTotalItems()).isEqualTo(2); assertThat(pageResult.getItems()).isEmpty();
assertThat(result.isSuccessful()).isTrue();
assertEquals(10, refillStrategy.refill());
assertThat(entity).isEqualTo(mockResponse);
assertThat(nodeSelector.getNodeSelectorTerms()).hasSize(1);
assertThat(result).contains("top1", "top2");
assertThat(callMetadata.getCallers()).hasSize(1); assertThat(callMetadata.getCallers().get(0).getId()).isEqualTo(MY_DIRECT_CALLER); assertThat(callMetadata.getCallers().get(0).getCallerType()).isEqualTo(CallerType.Unknown);
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(task).isEqualTo(retrievedTask);
assertThat(emitCounter.get()).isEqualTo(limit);
assertThat(JobFunctions.findHardConstraint(job, "myConstraint")).contains("good"); assertThat(JobFunctions.findSoftConstraint(job, "myConstraint")).isEmpty();
assertThat(multiMapThatOnlyReplacesV1.put("first", new TestEntity("1", "v2"))).isTrue(); assertThat(multiMapThatOnlyReplacesV1.put("first", new TestEntity("1", "v1"))).isFalse();
assertThat(parser.get()).isEmpty();
assertThat(result).isEqualTo(expected);
assertThat(resultOpt).isNotEmpty();
assertThat(routingRules).isNotNull(); assertThat(routingRules).hasSize(1); assertThat(routingRules.get(cell)).isEqualTo("(app1.*)");
assertThat(cache.getAgentInstance(updatedInstance.getId()).getLifecycleStatus().getState()).isEqualTo(InstanceLifecycleState.Stopped);
assertThat(next.getLeft()).isEqualTo(BUCKET_SIZE); assertThat(next.getRight().tryTake()).isEmpty(); assertThat(next.getLeft()).isEqualTo(BUCKET_SIZE); assertThat(next.getRight().tryTake()).isEmpty();
assertThat(resultSubscriber.getOnNextEvents().get(0).getLoadBalancersCount()).isZero();
assertThat(disposable.isDisposed()).isTrue();
assertThat(batchGen.getValue()).isEqualTo(asList(0L, 1L)); assertThat(batchGen.apply().isClosed()).isTrue();
assertThat(allocations.getInstanceGroups()).isEmpty();
assertThat(CollectionsExt.containsAnyKeys(map, "a", "c")).isTrue(); assertThat(CollectionsExt.containsAnyKeys(map, "c", "a")).isTrue(); assertThat(CollectionsExt.containsAnyKeys(map, "c", "d")).isFalse();
assertThat(revision2).isGreaterThan(revision1); assertThat(revision3).isGreaterThan(revision2);
assertThat(actual).containsAllEntriesOf(ImmutableMap.<String, String> builder().put("key1", "value1").put("key2", "value2").put("key3", "").put("key4", "").build() );
assertThat(result.getAppName()).isEqualTo(myApp.getAppName()); assertThat(result.getSchedulerName()).isEqualTo(myApp.getSchedulerName());
assertThat(response.getStatus()).isEqualTo(NOT_SERVING); assertThat(response.getDetailsCount()).isEqualTo(1); assertThat(response.getDetails(0).hasDetails()).isTrue(); assertThat(response.getDetails(0).getDetails().getCell()).isEqualTo("one"); assertThat(response.getDetails(0).getDetails().getLeader()).isFalse();
assertThat(sanitizedOpt).isPresent();
assertThat(containerInfoBuilder.getPassthroughAttributesMap()).containsEntry(S3_WRITER_ROLE, "defaultWriter"); assertThat(containerInfoBuilder.getPassthroughAttributesMap()).containsEntry(S3_BUCKET_NAME, "defaultBucket");
assertThat(thrown).isInstanceOf(JobManagerException.class); assertThat(((JobManagerException) thrown).getErrorCode()).isEqualTo(JobManagerException.ErrorCode.NotServiceJob);
assertThat(result).hasSize(1); assertThat(relocationStatus.getTaskId()).isEqualTo(task.getId()); assertThat(relocationStatus.getStatusCode()).isEqualTo(TaskRelocationStatus.STATUS_CODE_TERMINATED); assertThat(relocationStatus.getTaskRelocationPlan()).isEqualTo(taskRelocationPlan);
assertThat(timesCalled).hasValue(0); assertThat(timesCalled).hasValue(0); assertThat(timesCalled).hasValue(1); assertThat(timesCalled).hasValue(1);
assertThat(task.getId()).isEqualTo(taskOne.getId()); assertThat(task.getJobId()).isEqualTo(taskOne.getJobId());
assertThat(Archaius2Ext.newConfiguration(MyConfig.class).getString()).isEqualTo("hello");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine does not exist");
assertEquals(someRequest, req); assertEquals("some response", resp);
assertThat(resolver.resolve(JOB_SELF_MANAGED)).isEqualTo(FALLBACK_BUDGET_1); assertThat(resolver.resolve(JOB_SELF_MANAGED)).isEqualTo(FALLBACK_BUDGET_2);
assertThat(testSubscriber.takeNext()).isEqualTo(TASK1);
assertThat(cache.getAgentInstances(instanceGroupId).size()).isEqualTo(initialCount - 1);
assertThat(resultRef.get()).isEqualTo("CANCELLED");
assertThat(cg1Usage).isNotNull(); assertThat(cg1Usage.getCpu()).isEqualTo(CONTAINER_RESOURCES.getCpu() * 4); assertThat(cg1Usage.getMemoryMB()).isEqualTo(CONTAINER_RESOURCES.getMemoryMB() * 4); assertThat(cg1Usage.getDiskMB()).isEqualTo(CONTAINER_RESOURCES.getDiskMB() * 4); assertThat(cg1Usage.getNetworkMbs()).isEqualTo(CONTAINER_RESOURCES.getNetworkMbps() * 4);
assertThat(violations).isEmpty();
assertThat(sanitizedJobDescriptor).isNotNull(); assertThat(sanitizedJobDescriptor.getContainer().getContainerResources().getDiskMB()).isEqualTo(MIN_DISK_SIZE); assertThat(nonCompliant).contains(FeatureRolloutPlans.MIN_DISK_SIZE_STRICT_VALIDATION_FEATURE);
assertThat(selectors.get("cellB").apply(JOB_DESCRIPTOR, JOB_PREDICTIONS)).isEmpty();
assertThat(allIps).isNotNull(); assertThat(allIps).allSatisfy(address -> assertThat(NetworkExt.isIpV4(address) || NetworkExt.isIPv6(address)).isTrue());
assertThat(selector.select("app1", cell -> true)).contains(CELL_1); assertThat(selector.select("app2", cell -> true)).contains(CELL_2);
assertThat(containerInfoBuilder.getPassthroughAttributesMap()).containsEntry( S3_WRITER_ROLE, job.getJobDescriptor().getContainer().getSecurityProfile().getIamRole() );
assertThat(cell.getName()).isEqualTo("cell1");
assertThat(values).hasSize(3); assertThat(values).containsExactly( new TestEntity("1", "v1"), new TestEntity("2", "v2"), new TestEntity("3", "v3") );
assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(0); assertThat(quotaController.consume("someTaskId").isApproved()).isTrue(); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5);
assertThat(asString).isPresent(); assertThat(asString.get()).isEqualTo("0.1=10.0;0.2=15.0;0.95=26.2");
assertThat(result.isSuccessful()).isTrue();
assertThat(configuration).hasSize(2); assertThat(configuration.get(0)).isEqualTo(TokenBucketTestConfigurations.NOT_SHARED_CONFIGURATION); assertThat(configuration.get(1)).isEqualTo(TokenBucketTestConfigurations.SHARED_ANY_CONFIGURATION);
assertThat(onNextEvents.size()).isEqualTo(1); assertThat(onNextEvents.get(0).getJobId()).isEqualTo(JOB_2); assertThat(onNextEvents.get(0).getLoadBalancersCount()).isEqualTo(1); assertThat(onNextEvents.get(0).getLoadBalancers(0).getId()).isEqualTo(LB_2);
assertThat(ResourceDimensions.multiply(small, 2)).isEqualTo(expected);
assertThat(errors).allMatch(error -> error.getType().equals(ValidationError.Type.HARD));
assertThat(resultSet.wasApplied()).isTrue();
assertThat(failErrors).hasSize(1); assertThat(timeoutErrors).hasSize(1);
assertThat(sanitized).isPresent(); assertThat(attributes).containsKey(TITUS_NON_COMPLIANT_FEATURES); assertThat(problems).contains(FeatureRolloutPlans.ENTRY_POINT_STRICT_VALIDATION_FEATURE);
assertThat(createdJob).isPresent(); assertThat(createdJob.get().getAttributesMap()).containsEntry(JOB_ATTRIBUTES_STACK, stackName);
assertThat(cache.getInstanceGroups()).hasSize(initialCount + 1);
assertThat(result.isSuccessful()).isTrue();
assertThat(gpuToleration.getKey()).isEqualTo(KubeConstants.TAINT_KUBE_BACKEND); assertThat(gpuToleration.getValue()).isEqualTo("kublet");
assertThat(cache.getInstanceGroups()).hasSize(initialCount + 1);
assertThat(e.getResponse().getStatus()).isEqualTo(500);
assertThat(ResourceDimensions.alignUp(original, small2X)).isEqualTo(small2X);
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(task).isEqualTo(retrievedTask); assertThat(tasks.getLeft()).isEmpty();
assertThat(matcher.apply(message).matches()).isTrue(); assertThat(matcher.apply(message).matches()).isFalse();
assertThat(ordered).containsExactlyInAnyOrder('A', 'B', 'C'); assertThat(notOrdered).containsExactlyInAnyOrder('B', 'C', 'A');
assertThat(firstLeader).isPresent(); assertThat(firstLeader.get().getCurrent().getMemberId()).isEqualTo(MEMBER_1.getCurrent().getMemberId()); assertThat(secondLeader).isPresent(); assertThat(secondLeader.get().getCurrent().getMemberId()).isEqualTo(MEMBER_2.getCurrent().getMemberId());
assertThat(errorRef.get()).hasMessageContaining("simulated error");
assertThat(entity).isEqualTo(GET_JOB_LOAD_BALANCERS_RESULT);
assertThat(result).containsEntry("top1", null); assertThat(result).containsEntry("top2", asSet("nested2"));
assertThat(nextEvent.getMemberRevisions().get(MEMBER_1.getCurrent().getMemberId()).getRevision()).isEqualTo(nextRevision);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine id does not match the specified id");
assertThat(Archaius2Ext.newConfiguration(MyConfig.class, "string", "overridden").getString()).isEqualTo("overridden");
assertThat(resolver.resolve()).hasSize(2);
assertThat(immediateEvictions).hasSize(1).containsKey(task0.getId());
assertThat(selector.select("app1", cell -> true)).contains(CELL_1); assertThat(selector.select("app1", cell -> true)).contains(CELL_2);
assertThat(it.next().getStatus().getState()).isEqualTo(MasterState.Starting); assertThat(it.next().getStatus().getState()).isEqualTo(MasterState.NonLeader);
assertThat(allTasks).hasSize(cellSnapshots.getLeft().size() + cellSnapshots.getRight().size()); assertThat(task.getId()).isNotEmpty(); assertThat(task.getJobId()).isNotEmpty(); assertThat(task.getStatus().getReasonMessage()).isEmpty(); assertThat(task.getStatusHistoryList()).isEmpty();
assertThat(event).isInstanceOf(AgentInstanceUpdateEvent.class);
assertThat(Archaius2Ext.newConfiguration(MyConfig.class, "root", config).getString()).isEqualTo("HELLO");
assertThat(merged.getMigrationDetails().getNeedsMigration()).isFalse();
assertThat(update.getState()).isEqualTo(LoadBalancerTarget.State.REGISTERED); assertThat(update.getPriority()).isEqualTo(Priority.LOW); assertThat(update.getLoadBalancerId()).isEqualTo(loadBalancerId);
assertThat(onNextEvents).hasSize(1); assertThat(resultLoadBalancers).contains(LB_1, LB_2);
assertThat(KubeUtil.createPodAnnotationsFromJobParameters(job)).containsEntry(KubeConstants.POD_LABEL_ACCOUNT_ID, "myAccount"); assertThat(KubeUtil.createPodAnnotationsFromJobParameters(job)).containsEntry(KubeConstants.POD_LABEL_SUBNETS, "subnet1,subnet2");
assertThat(result).hasSize(statusList.size()); assertThat(failures).isZero();
assertThat(reference.getSchedule().getCompletedActions()).hasSize(1); assertThat(failedAction.getStatus().getState()).isEqualTo(SchedulingState.Failed); assertThat(failedAction.getStatus().getError().get()).isInstanceOf(TimeoutException.class);
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200);
assertThat(results).isNotEmpty();
assertThat(cpmRecorder.numberOfFinishedSubscriptions()).isEqualTo(1);
assertThat(e).isInstanceOf(RuntimeException.class); assertThat(e.getMessage()).isEqualTo("simulated error"); assertThat(changesSubscriber.takeNext()).isNull();
assertThat(ResourceDimensions.divideAndRoundUp(large, small)).isEqualTo(2); assertThat(ResourceDimensions.divideAndRoundUp(largePlus, small)).isEqualTo(3);
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo(PodResourcePoolResolvers.RESOURCE_POOL_ELASTIC_FARZONE_PREFIX + FARZONE_ID);
assertThat(filteredMachines).isEmpty();
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase(KubeConstraint.NODE_NOT_FOUND_REASON);
assertThat(sanitizedOpt).isNotEmpty(); assertThat(nonCompliant).contains(JobFeatureComplianceChecks.DISRUPTION_BUDGET_FEATURE); assertThat(policy.getRelocationTimeMs()).isEqualTo(DisruptionBudgetSanitizer.DEFAULT_SERVICE_RELOCATION_TIME_MS);
assertThat(entity).isEqualTo(TASK_1);
assertThat(executionResult).hasSize(2); assertThat(executionResult.get("mono1")).isEmpty(); assertThat(executionResult.get("mono2")).isEmpty(); assertThat(resultCollector).contains("mono1", "mono2");
assertThat(existing).hasValueSatisfying(v -> assertThat(v.getAppName()).isEqualTo(myApp.getAppName())); assertThat(absent).isEmpty();
assertThat(it.next()).isEqualTo(1); assertThat(it.next()).isEqualTo(2);
assertThat(testSubscriber.takeNext()).isSameAs(A); assertThat(testSubscriber.takeNext()).isNull();
assertThat(result.isSuccessful()).isFalse();
assertThat(tracker.marked).hasSize(2); assertThat(first.getClassName()).isEqualTo(SpectatorCodePointTrackerTest.class.getName()); assertThat(first.getMethodName()).isEqualTo("testCodePointHit");
assertThat(subscription2.isDisposed()).isTrue(); assertThat(subscriber1.isDisposed()).isFalse(); assertThat(subscriber1.getAllItems()).hasSize(3);
assertThat(updatedTask.getTaskContext()).containsEntry(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, "192.0.2.0");
assertEquals("The cause should be from ZK connection failure", CuratorConnectionLossException.class, e.getCause().getClass()); assertTrue("The error message is unexpected: " + e.getMessage(), e.getCause().getMessage().contains("ConnectionLoss"));
assertThat(executionResult).hasSize(3); assertThat(executionResult.get("mono1")).isEmpty(); assertThat(executionResult.get("mono2")).containsInstanceOf(RuntimeException.class); assertThat(executionResult.get("mono3")).isEmpty();
assertThat(failure.getReasonMessage()).contains("job quota");
assertThat(instanceGroupIds(cache.getInstanceGroups())).containsAll(testConnector.takeInstanceGroupIds()); assertThat(cache.getInstanceGroups()).contains(firstInstanceGroup); assertThat(firstInstanceGroup.getInstanceIds()).containsAll(instanceIds(testConnector.takeInstances(0))); assertThat(cache.getInstanceGroups()).contains(secondInstanceGroup); assertThat(secondInstanceGroup.getInstanceIds()).containsAll(instanceIds(testConnector.takeInstances(1))); assertThat(eventSubscriber.takeNext()).isNull();
assertThat(onErrorEvents).hasSize(1); assertThat(Status.fromThrowable(onErrorEvents.get(0))).isEqualTo(Status.INTERNAL);
assertThat(result).hasSize(1);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine does not exist");
assertThat(KubeApiServerIntegrator.hasRequiredNodeAttributes(attributes)).isFalse(); assertThat(KubeApiServerIntegrator.hasRequiredNodeAttributes(attributes)).isTrue();
assertThat(multiMap.containsKey("first")).isTrue(); assertThat(multiMap.removeAll("first")).hasSize(2).containsExactly( new TestEntity("1", "v1"), new TestEntity("2", "v2") ); assertThat(multiMap.containsKey("first")).isFalse();
assertThat(stackTrace.getDetails(), is(notNullValue())); assertThat(stackTrace.getDetails().get("property"), is(equalTo("myType")));
assertThat(onErrorEvents).hasSize(1); assertThat(Status.fromThrowable(onErrorEvents.get(0))).isEqualTo(Status.NOT_FOUND);
assertThat(actual).contains(part);
assertThat(multiMap.containsValue(new TestEntity("1", "v1"))).isTrue(); assertThat(multiMap.containsValue(new TestEntity("2", "v2"))).isTrue(); assertThat(multiMap.containsValue(new TestEntity("3", "v3"))).isTrue();
assertThat(map).containsOnlyKeys("firstBucket", "secondBucket"); assertThat(map.get("firstBucket")).hasSize(1) .contains(new TestEntity("1", "v1")); assertThat(map.get("secondBucket")).hasSize(2).containsExactly( new TestEntity("2", "v2"), new TestEntity("3", "v3") );
assertThat(ReflectionExt.isObjectMethod(method)).describedAs("Service method: %s", method).isFalse(); assertThat(ReflectionExt.isObjectMethod(method)).isTrue();
assertThat(KubeUtils.is4xx(e)).isTrue(); assertThat(findNextMemberEvent(memberId)).isNotNull();
assertThat(first.tryTake()).isTrue(); assertThat(first.tryTake()).isFalse(); assertThat(first != second).isTrue(); assertThat(second.tryTake()).isTrue(); assertThat(second.tryTake()).isTrue(); assertThat(second.tryTake()).isFalse(); assertThat(buckets).hasSize(3); assertThat(buckets.get(1)).isEqualTo(first); assertThat(buckets.get(2)).isEqualTo(second);
assertEquals(200, response.getStatus());
assertThat(error).isEmpty();
assertThat(predicate.get()).isFalse(); assertThat(predicate.get()).isTrue(); assertThat(predicate.get()).isFalse();
assertThat(router.routeKey(JobDescriptor.getDefaultInstance())).isEmpty();
assertThat(value).isEqualTo("eventType=[leadership] memberId=local active=n/a registered=n/a enabled=n/a memberRevision=n/a leadershipState=Leader leadershipRevision=0");
assertThat(result).contains("#0", "#1", "#2", "#3", "#4");
assertThat(e).isInstanceOf(RuntimeException.class); assertThat(e.getMessage()).isEqualTo("simulated error"); assertThat(changesSubscriber.takeNext()).isNull();
assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).isEmpty(); assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).contains(CELL_1); assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).contains(CELL_2);
assertThat(onErrorEvents).hasSize(1); assertThat(Status.fromThrowable(onErrorEvents.get(0))).isEqualTo(Status.INTERNAL);
assertThat(entity).isEqualTo(SCALING_POLICY_ID);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Instance group is not active or phased out");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine group does not match the specified name");
assertThat(multiMap.containsEntry("first", new TestEntity("1", "v1"))).isTrue(); assertThat(multiMap.containsEntry("first", new TestEntity("2", "v2"))).isFalse(); assertThat(multiMap.containsEntry("second", new TestEntity("2", "v2"))).isTrue(); assertThat(multiMap.containsEntry("second", new TestEntity("3", "v3"))).isTrue();
assertThat(Archaius2Ext.newConfiguration(MyConfig.class, config).getString()).isEqualTo("HELLO");
assertThat(mappedRequest.get("relativeURI"), is(equalTo("/servletPath/pathInfo")));
assertThat(containerInfoBuilder.getPassthroughAttributesMap()).doesNotContainKey(S3_WRITER_ROLE);
assertThat(filteredMachines).isEmpty();
assertThat(goodSubscriber.isOpen()).isTrue(); assertThat(badSubscriber.isDisposed()).isTrue();
assertThat(TimeUnitExt.toMillis("1m").get()).isEqualTo(60_000);
assertThat(KubeUtil.findFinishedTimestamp(pod)).isEmpty(); assertThat(KubeUtil.findFinishedTimestamp(pod)).isEmpty(); assertThat(KubeUtil.findFinishedTimestamp(pod)).contains(now.getMillis());
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Cannot place on instance group or agent instance due to systemNoPlacement attribute");
assertThat(disposable.isDisposed()).isFalse(); assertThat(canceled.get()).isFalse(); assertThat(changesSubscriber.takeNext()).isNull(); assertThat(reconciler.apply(anything -> Mono.just("Regular")).block(TIMEOUT)).isEqualTo("Regular");
assertThat(thrown).isInstanceOf(JobManagerException.class); assertThat(((JobManagerException) thrown).getErrorCode()).isEqualTo(JobManagerException.ErrorCode.UnexpectedJobState);
assertThat(selectionOpt).isEmpty();
assertThat(result.isSuccessful()).isTrue();
assertThat(entity).isEqualTo(GET_POLICY_RESULT);
assertThat(nextEvent.getMemberRevisions()).hasSize(1);
assertThat(event).isInstanceOf(AgentInstanceRemovedEvent.class);
assertThat(sanitized).isNotPresent();
assertThat(sanitized.getChild().getMax()).isEqualTo(24);
assertThat(connector.getClusterMemberSiblings()).containsKey("sibling1");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Cannot place on instance group or agent instance due to toleration attribute not matching taint attribute");
assertThat(testSubscriber.takeNext()).isEqualTo(toDisruptionBudget(DESCRIPTOR_1_1)); assertThat(testSubscriber.takeNext()).isEqualTo(toDisruptionBudget(DESCRIPTOR_2_2));
assertThat(result).hasSize(1); assertThat(relocationStatus.getTaskId()).isEqualTo("nonExistingTaskId"); assertThat(relocationStatus.getStatusCode()).isEqualTo(TaskRelocationStatus.STATUS_EVICTION_ERROR); assertThat(relocationStatus.getTaskRelocationPlan()).isEqualTo(taskRelocationPlan);
assertThat(sanitized).isNotEmpty(); assertThat(sanitized.get().getAttributes().get(TITUS_NON_COMPLIANT_FEATURES)).isEqualTo(ENVIRONMENT_VARIABLE_NAMES_STRICT_VALIDATION_FEATURE);
assertThat(keys).hasSize(3); assertThat(keys.elementSet()).hasSize(2); assertThat(keys.count("first")).isEqualTo(1); assertThat(keys.count("second")).isEqualTo(2);
assertThat(Status.fromThrowable(testSubscriber.getOnErrorEvents().get(0))).isEqualTo(UNAVAILABLE);
assertThat(next.tryTake()).isEmpty(); assertThat(pair.getLeft()).isEqualTo(REFILL_BATCH); assertThat(pair.getRight().tryTake()).isEmpty();
assertThat(response.getStatus()).isEqualTo(NOT_SERVING); assertThat(response.getDetailsCount()).isEqualTo(2); assertThat(response.getDetails(0).hasDetails()).isTrue(); assertThat(response.getDetails(1).hasDetails()).isTrue(); assertThat(cellsSeen).contains("one", "two");
assertThat(testSubscriber.takeNext()).isSameAs(B); assertThat(testSubscriber.takeNext()).isNull();
assertThat(timesCalled.apply("foo")).isEqualTo(1); assertThat(timesCalled.apply("bar")).isEqualTo(2); assertThat(timesCalled.apply("foo")).isEqualTo(3); assertThat(timesCalled.apply("bar")).isEqualTo(4);
assertThat(result).contains("#0", "#1", "#2", "#3", "#4");
assertThat(child.getChildName()).isEqualTo("child1"); assertThat(child.getMin()).isEqualTo(20); assertThat(child.getMax()).isEqualTo(20);
assertThat(predicate.get()).isTrue();
assertThat(onErrorEvents.size()).isEqualTo(1);
assertThat(affinityWithAnnotations.getLeft().getNodeAffinity()).isNull();
assertThat(results).isNotEmpty();
assertThat(messageChain).contains("(RuntimeException) outside -CAUSED BY-> (Exception) inside");
assertThat(testSubscriber.getOnErrorEvents()).isEmpty(); assertThat(testSubscriber.isUnsubscribed()).isFalse(); assertThat(testSubscriber.getCompletions()).isEqualTo(0); assertThat(testSubscriber.getOnErrorEvents()).isEmpty(); assertThat(testSubscriber.isUnsubscribed()).isTrue(); assertThat(testSubscriber.getCompletions()).isEqualTo(1);
assertThat(result.getChildren()).containsKeys("top1", "top2"); assertThat(result.getChildren().get("top1").getValue()).contains(true); assertThat(result.getChildren().get("top2").getValue()).isEmpty(); assertThat(result.getChildren().get("top2").getChildren()).containsKeys("nested2"); assertThat(result.getChildren().get("top2").getChildren().get("nested2").getValue()).contains(true);
assertThat(error).isPresent(); assertThat(error.get()).isInstanceOf(RuntimeException.class);
assertEquals(200, response.getStatus());
assertThat(violations).hasSize(1);
assertThat(Status.fromThrowable(testSubscriber.getOnErrorEvents().get(0))).isEqualTo(INTERNAL);
assertThat(counter).isEqualTo(1); assertThat(evaluator.apply("a")).isEqualTo("A"); assertThat(counter).isEqualTo(2);
assertThat(multiMap.size()).isEqualTo(3);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase(KubeConstraint.TAINT_NOT_TOLERATED_IN_CONFIGURATION_REASON);
assertThat(sanitized.getChild().getMax()).isEqualTo(100);
assertThat(stoppedAt).isGreaterThanOrEqualTo(SHARED_ANY_CONFIGURATION.getCapacity()); assertThat(stoppedAt).isLessThan(limit);
assertThat(okSubscriber.takeNext()).isEqualTo("OK!");
assertThat(sanitized.getChild().getMax()).isEqualTo(10);
assertThat(allJobs).hasSize(cellSnapshots.getLeft().size() + cellSnapshots.getRight().size()); assertThat(job.getId()).isNotEmpty(); assertThat(job.getJobDescriptor().getOwner().getTeamEmail()).isNotEmpty(); assertThat(job.getStatus().getReasonMessage()).isEmpty(); assertThat(job.getStatusHistoryList()).isEmpty();
assertThat(esIndexNameCurrent).isNotNull(); assertThat(esIndexNameCurrent).isNotEmpty(); assertThat(esIndexNameCurrent).isEqualTo(String.format("workloads_%s", monthlySuffix));
assertThat(timeSeriesData.getAggregatedValue()).isEqualTo(0);
assertThat(predicate.get()).isFalse(); assertThat(predicate.get()).isTrue();
assertThat(gpuToleration).isEqualTo(Tolerations.TOLERATION_GPU_INSTANCE);
assertThat(reconciler.apply(c -> Mono.just("update")).block()).isEqualTo("update"); assertThat(changesSubscriber.takeNext()).isEqualTo("update"); assertThat(changesSubscriber.takeNext()).isNull();
assertThat(instanceGroup.getTier()).isEqualTo(Tier.Critical); assertThat(allocations.getExpectedMinSize(m4xlInstanceGroup)).isEqualTo(6); assertThat(allocations.getExpectedMinSize(m44xlInstanceGroup)).isEqualTo(0);
assertThat(adapted.getCpus()).isEqualTo(reference.getCpus() - 2); assertThat(adapted.getMemoryGB()).isEqualTo(reference.getMemoryGB() - 1); assertThat(adapted.getStorageGB()).isEqualTo(reference.getStorageGB() - 10);
assertThat(testSubscriber.takeNext()).isEqualTo("Done round 0"); assertThat(testSubscriber.isUnsubscribed()).isTrue(); assertThat(invocationCounter.get()).isEqualTo(1);
assertThat(testSubscriber.getOnErrorEvents()).isEmpty(); assertThat(testSubscriber.isUnsubscribed()).isFalse(); assertThat(testSubscriber.getCompletions()).isEqualTo(0); assertThat(testSubscriber.getOnErrorEvents()).hasSize(1); assertThat(testSubscriber.isUnsubscribed()).isTrue(); assertThat(testSubscriber.getCompletions()).isEqualTo(0);
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo(PodResourcePoolResolvers.RESOURCE_POOL_RESERVED);
assertThat(results).isEmpty();
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(jobsAndErrors.getLeft()).isEmpty();
assertThat(sanitizedJobDescriptorOpt).isEmpty();
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(task).isEqualTo(retrievedTask); assertThat(newTask).isEqualTo(newRetrievedTask);
assertThat(resolver.resolve(JOB_SELF_MANAGED)).isEqualTo(FALLBACK_BUDGET_1);
assertThat(result.isSuccessful()).isTrue();
assertThat(StringExt.removeSurroundingQuotes("\\"abc")).isEqualTo("\\"abc"); assertThat(StringExt.removeSurroundingQuotes("\\"abc\\"")).isEqualTo("abc"); assertThat(StringExt.removeSurroundingQuotes("abc\\"")).isEqualTo("abc\\"");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Instance group not found");
assertThat(result).isNotNull(); assertThat(result).hasSize(2);
assertThat(subscriber.isUnsubscribed()).isFalse();
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Instance group does not have gpus");
assertThat(subProps).containsAllEntriesOf(asMap("a", "valueA", "b", "valueB"));
assertThat(LoggingProxyBuilder.getCategory(MyApi.class, new MyApi.MyApiImpl())).isEqualTo(MyApi.MyApiImpl.class);
assertThat(result.isSuccessful()).isTrue();
assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(0); assertThat(quotaController.consume("someTaskId").isApproved()).isTrue(); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5);
assertThat(thrown).isInstanceOf(LoadBalancerException.class); assertThat(((LoadBalancerException) thrown).getErrorCode()).isEqualTo(LoadBalancerException.ErrorCode.JobMaxLoadBalancers);
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo("elastic");
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(100);
assertThat(selectionOpt).isEmpty();
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo("myResourcePool");
assertThat(parser.get()).isEmpty();
assertThat(onErrorEvents).hasSize(1); assertThat(Status.fromThrowable(onErrorEvents.get(0))).isEqualTo(Status.INTERNAL);
assertThat(entity).isEqualTo(response);
assertThat(Archaius2Ext.asDurationList(() -> "1, 2, 3").get()).contains( Duration.ofMillis(1), Duration.ofMillis(2), Duration.ofMillis(3) );
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine does not exist");
assertThat(multiMap.asMap()).isNotEmpty(); assertThat(multiMap.asMap()).isEmpty();
assertThat(response.getStatus()).isEqualTo(NOT_SERVING); assertThat(response.getDetailsCount()).isEqualTo(2); assertThat(response.getDetails(0).hasDetails()).isTrue(); assertThat(response.getDetails(1).hasDetails()).isTrue(); assertThat(cellsSeen).contains("one", "two");
assertThat(predictions.toSimpleString()).isEmpty();
assertThat(firstResult).hasSize(1); assertThat(secondResult).hasSize(1); assertThat(first).isEqualTo(second);
assertThat(allocations.getInstanceGroups()).isEmpty();
assertThat(service.isOwnedByFenzo(instanceGroups.get(0))).isTrue(); assertThat(service.isOwnedByFenzo(instanceGroups.get(1))).isFalse();
assertThat(entity).isEqualTo(GET_POLICY_RESULT);
assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy); assertThat(terminatedStatus.getStatusCode()).isEqualTo(AgentStatusCode.Terminated); assertThat(terminatedStatus.getAgentInstance().getId()).isEqualTo(STARTED_INSTANCE.getId()); assertThat(terminatedStatus.getAgentInstance().getLifecycleStatus().getState()).isEqualTo(InstanceLifecycleState.Stopped);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Cannot place on instance group or agent instance due to noPlacement attribute");
assertThat(leadElectedEvent.getLeaderRevision()).isNotEmpty();
assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(0); assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(1); assertThat(registered.getString("state")).isEqualTo("REGISTERED"); assertThat(session.execute(countStmt).one().getLong(0)).isEqualTo(1); assertThat(deregistered.getString("state")).isEqualTo("DEREGISTERED");
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(newJobsAndErrors.getLeft().get(0)).isEqualTo(newJob);
assertThat(cpmRecorder.numberOfFinishedSubscriptions()).isEqualTo(1);
assertThat(engine.getReferenceView().getId()).isEqualTo("myRoot"); assertThat(engine.getReferenceView().getChildren()).hasSize(1); assertThat(engine.getReferenceView().getId()).isEqualTo("myRoot"); assertThat(engine.getReferenceView().getChildren()).isEmpty();
assertThat(legacyTask).isEqualToComparingFieldByField(legacyTask);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase(KubeConstraint.INSTANCE_NOT_FOUND_REASON);
assertThat(schedulerStore.retrieveSystemSelectors().toList().toBlocking().first()).hasSize(7); assertThat(schedulerStore.retrieveSystemSelectors().toList().toBlocking().first()).hasSize(6);
assertThat(response.isAllowed()).isTrue(); assertThat(response.getReasonMessage()).isEqualTo("Rate limits not configured");
assertThat(leader.getCurrent()).isEqualTo(sibling);
assertThat(TimeUnitExt.parse("1b2mss")).isNotPresent();
assertThat(configuration).hasSize(1); assertThat(configuration.get(0).getName()).isEqualTo(SHARED_ANY_CONFIGURATION.getName());
assertThat(instanceGroup.getTier()).isEqualTo(Tier.Critical); assertThat(allocations.getExpectedMinSize(r48xlInstanceGroup)).isEqualTo(2);
assertThat(sanitizedOpt).isPresent(); assertThat(sanitized.getName()).isEqualTo("root1");
assertThat(resolver.resolve(JOB_NOT_SELF_MANAGED)).isEqualTo(JOB_NOT_SELF_MANAGED.getJobDescriptor().getDisruptionBudget());
assertThat(selector.select("app1", cell -> true)).contains(CELL_1); assertThat(selector.select("app1", cell -> true)).contains(CELL_1); assertThat(selector.select("app1", cell -> true)).contains(CELL_2);
assertThat(byJobId.get(jobLoadBalancer.getJobId())).isNullOrEmpty();
assertThat(results).isNotEmpty();
assertThat(multiMap.keySet()).containsExactly("first", "second");
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo("elastic"); assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo("reserved");
assertThat(entity).isEqualTo(expectedResult);
assertThat(NetworkExt.toIPv4(address)).isEqualTo("1.1.1.1");
assertThat(sanitized).isNotPresent();
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine or machine group does not have a matching taint");
assertThat(entity.getId()).isEqualTo(JOB_ID_1);
assertThat(status.getStatusCode()).isEqualTo(AgentStatusCode.Healthy); assertThat(status.getDescription()).contains("No data recorded yet");
assertThat(activationTrace).containsExactlyInAnyOrder( Pair.of("serviceA", "ACTIVATED"), Pair.of("serviceB", "ACTIVATED") );
assertThat(parseEnumListIgnoreCase("", EnumValue.class)).isEmpty(); assertThat(parseEnumListIgnoreCase(" ", EnumValue.class)).isEmpty(); assertThat(parseEnumListIgnoreCase("a , B", EnumValue.class)).contains(EnumValue.A, EnumValue.B); assertThat(parseEnumListIgnoreCase("a , B, AB", EnumValue.class, grouping::get)).contains(EnumValue.A, EnumValue.B); assertThat(e.getMessage()).contains("bb");
assertThat(fieldNames).contains("name", "child");
assertThat(selector.apply(JOB_DESCRIPTOR, JOB_PREDICTIONS)).isEmpty();
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(firstTask).isEqualTo(retrievedTask); assertThat(tasks.getLeft()).hasSize(1); assertThat(tasks.getRight()).isEqualTo(0); assertThat(tasks.getLeft().get(0)).isEqualTo(secondTask);
assertThat(stoppedAt).isGreaterThanOrEqualTo(NOT_SHARED_CONFIGURATION.getCapacity()); assertThat(stoppedAt).isLessThan(limit);
assertThat(serverContext.isEmpty(), is(false));
assertThat(cells).isNotNull(); assertThat(cells.size()).isEqualTo(1); assertThat(cells.get(0).getAddress()).isEqualTo("hostName1:7001");
assertThat(cell.getName()).isEqualTo("cell1");
assertThat(sensor.getLastPercentile(99.5).keySet()).hasSize(Runtime.getRuntime().availableProcessors());
assertThat(pageResult.getItems()).isEmpty(); assertThat(pageResult.getPagination().hasMore()).isFalse();
assertThat(event).isInstanceOf(AgentInstanceRemovedEvent.class);
assertTrue(gotToken); assertTrue(gotToken);
assertThat(annotations).containsEntry(PerformanceToolUtil.PREPARE_TIME, "3s"); assertThat(annotations).containsEntry(PerformanceToolUtil.RUN_TIME, "60s"); assertThat(annotations).containsEntry(PerformanceToolUtil.KILL_TIME, "5s");
assertThat(jobController.getQuota(jobReference).getQuota()).isEqualTo(2); assertThat(jobController.getQuota(jobReference).getQuota()).isEqualTo(0);
assertThat(nodeSelector.getNodeSelectorTerms()).hasSize(1); assertThat(nodeSelector.getNodeSelectorTerms().get(0).getMatchExpressions().get(0).getValues().get(0)).isEqualTo(DEFAULT_GPU_INSTANCE_TYPE);
assertThat(cellRouter.routeKey(withCellAntiAffinity).get().getName()).isEqualTo("cell2"); assertThat(cellRouter.routeKey(allRejectedGoesToDefault)).isEmpty();
assertThat(allJobs).hasSize(cellSnapshots.getLeft().size() + cellSnapshots.getRight().size()); assertThat(allJobs).containsExactlyElementsOf(expected);
assertThat(result.isSuccessful()).isTrue();
assertThat(disposable.isDisposed()).isFalse(); assertThat(canceled.get()).isFalse(); assertThat(changesSubscriber.takeNext()).isNull(); assertThat(reconciler.apply("r1", anything -> Mono.just("Regular")).block(TIMEOUT)).isEqualTo("Regular");
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo("anElastic");
assertThat(testSubscriber.takeNext()).isNull(); assertThat(testSubscriber.takeNext()).isEqualTo(i); assertThat(testSubscriber.takeNext()).isNull();
assertThat(mappedError, is(hasSize(1)));
assertThat(violations).isEmpty();
assertThat(status.getStatusCode()).isEqualTo(AgentStatusCode.Healthy);
assertThat(onNextEvents).hasSize(1); assertThat(onNextEvents.get(0).getJobLoadBalancersCount()).isEqualTo(2);
assertThat(toRateString(1, 1, TimeUnit.MILLISECONDS, "action")).isEqualTo("1.00 action/ms"); assertThat(toRateString(60, 5, TimeUnit.SECONDS, "action")).isEqualTo("5.00 action/min");
assertThat(results).isPresent(); assertThat(results.get().getLeft().getId()).isEqualTo(agent2);
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200);
assertThat(results).hasSize(10);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("Task cannot run on instance group tier");
assertThat(ResourceDimensions.add(small, small)).isEqualTo(expected);
assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy); assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Unhealthy); assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy);
assertThat(tokenBucket.tryTake()).isTrue(); assertThat(tokenBucket.tryTake()).isFalse(); assertThat(tokenBucket.tryTake()).isTrue(); assertThat(supplier.get() == tokenBucket).isTrue(); assertThat(buckets).hasSize(2); assertThat(buckets.get(1)).isEqualTo(tokenBucket);
assertEquals(expectedResult, actualResult);
assertThat(result).hasSize(1); assertThat(result.get(0).getAppName()).isEqualTo(myApp.getAppName()); assertThat(result.get(0).getSchedulerName()).isEqualTo(myApp.getSchedulerName());
assertThat(hardErrors).hasSize(1); assertThat(softErrors).hasSize(1);
assertThat(JobFunctions.containsExactlyTaskStates(task, TaskState.Accepted, TaskState.Launched, TaskState.StartInitiated, TaskState.KillInitiated)).isTrue();
assertThat(updateAction.get(0).getAction()).isInstanceOf(RetryActionInterceptor.RemoveRetryRecord.class);
assertThat(agentInstance).isNotNull(); assertThat(cachedAgentInstance.getAttributes()).containsKey("a").containsValue("1");
assertThat(KubeUtil.estimatePodSize(new V1Pod())).isGreaterThan(0);
assertThat(entity).isEqualTo(JOB_1);
assertThat(annotatedMethods).hasSize(1); assertThat(annotatedMethods.get(0).getName()).isEqualTo("classAnnotated");
assertThat(engine.orderedView("ascending").stream().map(EntityHolder::getEntity)).containsExactly("child1", "child2"); assertThat(engine.orderedView("descending").stream().map(EntityHolder::getEntity)).containsExactly("child2", "child1");
assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy); assertThat(monitor.getStatus(instance.getId()).getStatusCode()).isEqualTo(AgentStatusCode.Healthy);
assertThat(errors.get()).isEqualTo(5);
assertThat(result.get(0)).isEqualTo("Second");
assertThat(result).isEqualTo(expected);
assertThat(jobLoadBalancerPage.size()).isEqualTo(10 * 20);
assertThat(entries).hasSize(3); assertThat(entries).containsExactly( SimpleEntry.of("first", new TestEntity("1", "v1")), SimpleEntry.of("second", new TestEntity("2", "v2")), SimpleEntry.of("second", new TestEntity("3", "v3")) );
assertThat(sanitized).isNotEmpty(); assertThat(sanitized.get().getAttributes()).containsOnlyKeys("myApp.a");
assertThat(violations).isEmpty();
assertThat(tuples.get(0)).isIn(COMBINATIONS_2x2); assertThat(tuples.get(1)).isIn(COMBINATIONS_2x2); assertThat(tuples).containsAll(COMBINATIONS_3x3);
assertThat(sanitizer.sanitize(agentInstance).get().getIpAddress()).isEqualTo("10.0.0.1"); assertThat(sanitizer.validate(agentInstance)).hasSize(1);
assertEquals(expectedResult, actualResult);
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(300); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(100);
assertThat(sanitizer.sanitize(agentInstanceGroup).get().getId()).isEqualTo("myId"); assertThat(sanitizer.validate(agentInstanceGroup)).hasSize(2);
assertThat(results).isNotEmpty();
assertThat(fromResAllocs(criticalTierCapacity)).isEqualTo(CRITICAL_CAPACITY); assertThat(fromResAllocs(criticalGrCapActual)).isEqualTo(toResourceDimension(CRITICAL_CAPACITY_GROUP)); assertThat(fromResAllocs(flexTierCapacity)).isEqualTo(FLEX_CAPACITY); assertThat(fromResAllocs(flexGrCapActual)).isEqualTo(toResourceDimension(FLEX_CAPACITY_GROUP));
assertThat(filteredMachines).isEmpty();
assertThat(toEmit.poll().getIndex()).isEqualTo("second"); assertThat(toEmit.poll().getIndex()).isEqualTo("third");
assertThat(groups).hasSize(2); assertThat(groups.get("my")).containsAllEntriesOf(asMap("a", "valueA", "b", "valueB")); assertThat(groups.get("your")).containsAllEntriesOf(asMap("y", "valueX", "y", "valueY"));
assertFalse(gotToken); assertFalse(gotToken);
assertThat(result).hasSize(1); assertThat(result.get(0).getResourcePoolName()).isEqualTo(PodResourcePoolResolvers.RESOURCE_POOL_ELASTIC);
assertThat(router.routeKey(gpuJobDescriptor)).contains(CELL_2);
assertThat(selector.apply(JOB_DESCRIPTOR, JOB_PREDICTIONS)).isEmpty();
assertThat(firstElector.join()).isTrue(); assertThat(firstElector.leaveIfNotLeader()).isFalse(); assertThat(secondElector.join()).isTrue(); assertThat(secondElector.leaveIfNotLeader()).isTrue();
assertThat(e.getResponse().getStatus()).isEqualTo(404);
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200);
assertThat(response.getStatus()).isEqualTo(NOT_SERVING); assertThat(response.getDetailsCount()).isEqualTo(2); assertThat(errors).hasSize(1); assertThat(errors.get(0).getError().getCell()).isEqualTo("two"); assertThat(errors.get(0).getError().getErrorCode()).isEqualTo(DEADLINE_EXCEEDED.toString());
assertThat(asList(takeNextOrFail(singleLB), takeNextOrFail(singleLB))).contains(healthy, healthy); assertThat(asList(takeNextOrFail(singleLB), takeNextOrFail(singleLB))).contains(INSTANCE_1, INSTANCE_2);
assertThat(filteredMachines).isEmpty();
assertThat(ResourceDimensions.alignUp(original, small2X)).isEqualTo(small2X);
assertThat(elector.join()).isTrue();
assertThat(result.isSuccessful()).isTrue();
assertThat(result).isEmpty();
assertThat(entity).isEqualTo(expectedResult);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine type does not match the specified machine type");
assertThat(entity).isEqualTo(GET_POLICY_RESULT);
assertThat(callMetadata.getCallers()).hasSize(2); assertThat(callMetadata.getCallers().get(0).getId()).isEqualTo(MY_ORIGINAL_CALLER); assertThat(callMetadata.getCallers().get(1).getId()).isEqualTo(MY_DIRECT_CALLER); assertThat(callMetadata.getCallers().get(1).getCallerType()).isEqualTo(CallerType.Application);
assertThat(result).hasSize(2);
assertThat(instanceGroup.getTier()).isEqualTo(Tier.Critical); assertThat(allocations.getExpectedMinSize(m4xlInstanceGroup)).isEqualTo(1); assertThat(allocations.getExpectedMinSize(m44xlInstanceGroup)).isEqualTo(0);
assertThat(capacity).isPresent(); assertThat(capacity).contains(criticalExpected);
assertThat(cells).isNotNull(); assertThat(cells.size()).isEqualTo(0);
assertThat(JobFunctions.findHardConstraint(job, "myConstraint")).isEmpty(); assertThat(JobFunctions.findSoftConstraint(job, "myConstraint")).contains("good");
assertThat(cellRouter.routeKey(APP_3).get().getName()).isEqualTo("cell2"); assertThat(cellRouter.routeKey(APP_2).get().getName()).isEqualTo("cell1"); assertThat(cellRouter.routeKey(OTHER).get().getName()).isEqualTo("cell1");
assertThat(multiMap.removeIf( "first", new TestEntity("1", "foo"), existing -> "foo".equals(existing.value)) ).isFalse(); assertThat(multiMap.get("first")).hasSize(2); assertThat(multiMap.removeIf( "first", new TestEntity("1", "foo"), existing -> "v1".equals(existing.value)) ).isTrue(); assertThat(multiMap.get("first")).hasSize(1) .doesNotContain(new TestEntity("1", "v1"));
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The availability zone does not match the specified availability zone");
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine does not exist");
assertThat(nodeSelector.getNodeSelectorTerms()).hasSize(1); assertThat(nodeSelector.getNodeSelectorTerms().get(0).getMatchExpressions().get(0).getKey()).isEqualTo(KubeConstants.NODE_LABEL_RESOURCE_POOL); assertThat(nodeSelector.getNodeSelectorTerms().get(0).getMatchExpressions().get(0).getValues().get(0)).isEqualTo("elastic");
assertThat(allocations.getTiersWithResourceShortage()).containsExactly(Tier.Critical);
assertThat(agentStatus.getStatusCode()).isEqualTo(AgentStatusCode.Unhealthy);
assertThat(LogStorageInfos.parseS3AccessPointArn("myBucket")).isEmpty(); assertThat(LogStorageInfos.parseS3AccessPointArn("arn:aws:s3:us-west-2:123456789012:accesspoint/test")).contains( new S3Account("123456789012", "us-west-2") ); assertThat(LogStorageInfos.parseS3AccessPointArn("arn:aws:ec2:us-west-2:123456789012:accesspoint/test")).isEmpty();
assertThat(merged.getMigrationDetails().getNeedsMigration()).isTrue(); assertThat(merged.getMigrationDetails().getDeadline()).isEqualTo(deadlineTimestamp);
assertThat(nodeSelector.getNodeSelectorTerms()).hasSize(1); assertThat(requirement.getKey()).isEqualTo(KubeConstants.TAINT_KUBE_BACKEND); assertThat(requirement.getValues()).contains("kublet");
assertThat(resultSet.wasApplied()).isTrue();
assertThat(result.isSuccessful()).isTrue();
assertThat(allocations.getInstanceGroups()).hasSize(1); assertThat(CollectionsExt.first(allocations.getInstanceGroups()).getId()).isEqualTo("fenzo");
assertThat(service.isOwnedByFenzo(instanceSet0.get(0))).isTrue(); assertThat(service.isOwnedByFenzo(instanceSet1.get(0))).isFalse();
assertThat(lines).containsExactly("line1", "line2");
assertThat(sanitizedOpt).isNotEmpty(); assertThat(nonCompliant).contains(JobFeatureComplianceChecks.DISRUPTION_BUDGET_FEATURE); assertThat(policy.getRelocationTimeMs()).isEqualTo( (long) ((jobDescriptor.getExtensions()).getRuntimeLimitMs() * BATCH_RUNTIME_LIMIT_FACTOR) );
assertThat(result.isSuccessful()).isFalse();
assertThat(onNextEvents).isNotNull(); assertThat(onNextEvents.size()).isEqualTo(1); assertThat(onNextEvents.get(0).getItemsCount()).isEqualTo(1); assertThat(onErrorEvents).isNotNull(); assertThat(onErrorEvents).hasSize(1); assertThat(Status.fromThrowable(onErrorEvents.get(0)).getCode()).isEqualTo(Status.CANCELLED.getCode());
assertThat(KubeApiClients.mapUri(newRequest(path))).isEqualTo("/segment1_/segment2_");
assertThat(KubeUtil.isFarzoneNode(FARZONES, newNodeInZone(FARZONE_A))).isTrue(); assertThat(KubeUtil.isFarzoneNode(asList(FARZONE_A, "farzoneB"), newNodeInZone(NOT_FARZONE))).isFalse(); assertThat(KubeUtil.isFarzoneNode(asList(FARZONE_A, "farzoneB"), NODE_WITHOUT_ZONE)).isFalse();
assertThat(subscriber.isUnsubscribed()).isFalse();
assertThat(LoggingProxyBuilder.getCategory(MyApi.class, proxy)).isEqualTo(MyApi.class);
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("b")).getLimit()).isEqualTo(300); assertThat(resolver.resolve(new MyObject("x")).getLimit()).isEqualTo(100);
assertThat(matches).isTrue();
assertThat(filteredMachines).isEmpty();
assertThat(result).isEqualTo(instanceGroups.get(0).getResourceDimension());
assertThat(filteredBatch.getValue()).contains(0L, 2L, 4L, 6L, 8L); assertThat(filteredBatch.isClosed()).isFalse(); assertThat(filteredBatch.apply().isClosed()).isTrue();
assertThat(policyName).isEqualTo("job1/policy1");
assertThat(isNumeric(Integer.class)).isTrue(); assertThat(isNumeric(Long.class)).isTrue(); assertThat(isNumeric(IntegerHolder.class.getDeclaredField("intValue").getType())).isTrue();
assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(0); assertThat(quotaController.consume("someTaskId").isApproved()).isTrue(); assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5);
assertThat(job.getId()).isEqualTo(jobOne.getId());
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200);
assertThat(agentInstance.getAttributes()).isEmpty();
assertThat(sanitizedOpt).isPresent(); assertThat(sanitized.getName()).isEqualTo("root1"); assertThat(sanitized.getChild().getChildName()).isEqualTo("child1"); assertThat(sanitized.getChild().getMin()).isEqualTo(1); assertThat(sanitized.getChild().getMax()).isEqualTo(2); assertThat(sanitized.getNullableChild().getOptionalValue()).isEqualTo("child2");
assertThat(cache.getAgentInstances(instanceGroupId).size()).isEqualTo(initialCount + 1);
assertThat(entity).isEqualTo(MACHINE_1);
assertThat(e).isInstanceOf(RuntimeException.class); assertThat(e.getMessage()).isEqualTo("simulated error"); assertThat(changesSubscriber.takeNext()).isNull();
assertThat(disposable.isDisposed()).isTrue();
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(100);
assertThat(text).isEqualTo("DefaultTokenBucket{name=\'junit\', capacity=1, refillStrategy=FixedIntervalRefillStrategy{refillRate=1.00 refill/s}, numberOfTokens=0}");
assertThat(result.isSuccessful()).isTrue();
assertThat(result.isSuccessful()).isTrue();
assertThat(e.getResponse().getStatus()).isEqualTo(500);
assertThat(result).isNotNull();
assertThat(result).hasSize(0);
assertThat(ResourceDimensions.subtractPositive(large, small)).isEqualTo(small);
assertThat(testSubscriber.takeNext()).isNull();
assertThat(onNextEvents).isNotNull(); assertThat(onNextEvents.size()).isEqualTo(1); assertThat(onNextEvents.get(0).getItemsCount()).isEqualTo(2);
assertThat(details, is(notNullValue())); assertThat(details.get("pathReference"), is(equalTo(this.getClass().getName() + "$MyService[\\"value\\"]"))); assertThat(details.get("targetType"), is(equalTo("int"))); assertThat((String) details.get("errorLocation"), containsString("line: 1")); assertThat(details.get("document"), is(equalTo("{\\"value\\":\\"notANumber\\"}")));
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); assertThat(task).isEqualTo(retrievedTask); assertThat(e.getErrorCode()).isEqualTo(JobStoreException.ErrorCode.TASK_DOES_NOT_EXIST);
assertThat(cells).isNotNull(); assertThat(cells.size()).isEqualTo(2); assertThat(cells.get(0).getAddress()).isEqualTo("hostName1:7001"); assertThat(cells.get(1).getAddress()).isEqualTo("hostName2:7002");
assertThat(resultRef.get()).isInstanceOf(TimeoutException.class);
assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase("The machine group does not exist");
assertThat(seq[i - 1] <= seq[i]).isTrue();
assertThat(e).isInstanceOf(RuntimeException.class); assertThat(e.getMessage()).isEqualTo("simulated error"); assertThat(changesSubscriber.takeNext()).isNull();
assertThat(actual.getCpu()).isEqualTo(descriptor.getvCPUs()); assertThat(actual.getMemoryMB()).isEqualTo(descriptor.getMemoryGB() * 1024); assertThat(actual.getDiskMB()).isEqualTo(descriptor.getStorageGB() * 1024); assertThat(actual.getNetworkMbs()).isEqualTo(descriptor.getNetworkMbs());
assertThat(status.getStatusCode()).isEqualTo(AgentStatusCode.Unhealthy);
assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job);
assertThat(e.getErrorCode()).isEqualTo(ErrorCode.InitializationError);
assertThat(value).isEqualTo("eventType=[membership] memberId=local active=true registered=true enabled=true memberRevision=0 leadershipState=n/a leadershipRevision=n/a");
assertThat(sanitizedOpt).isPresent(); assertThat(sanitized.getName()).isNull(); assertThat(sanitized.getChild().getChildName()).isEqualTo("ChildGuest"); assertThat(sanitized.getChild().getMin()).isEqualTo(1); assertThat(sanitized.getChild().getMax()).isEqualTo(2); assertThat(sanitized.getNullableChild()).isNull();
assertThat(cellRouter.routeKey(withCellAffinity).get().getName()).isEqualTo("cell2");
assertThat(resolver.resolve(new MyObject("a")).getLimit()).isEqualTo(200); assertThat(resolver.resolve(new MyObject("b")).getLimit()).isEqualTo(300); assertThat(resolver.resolve(new MyObject("x")).getLimit()).isEqualTo(100);
assertThat(serverGroups).hasSize(2); assertThat(result).hasSize(1); assertThat(result.get(0).getLeft().getId()).isEqualTo(serverGroups.get(0).getId());
assertThat(notMatching).containsExactly("their.y");
assertThat(createResponse.getReasonMessage()).contains(SHARED_ANY_CONFIGURATION.getName()); assertThat(getResponse.getReasonMessage()).contains(SHARED_GETTERS_CONFIGURATION.getName());
assertThat(terminatedTaskIds).isEmpty();
assertThat(entity).isEqualTo(EVENT);
assertThat(thrown).isInstanceOf(JobManagerException.class); assertThat(((JobManagerException) thrown).getErrorCode()).isEqualTo(JobManagerException.ErrorCode.JobNotFound);
assertTrue(tableHandle instanceof SpreadsheetTableHandle); assertEquals(filePath, spreadsheetTableHandle.getSpreadsheetPath()); assertEquals(name, tableName); assertEquals(SESSION.getUser(), spreadsheetTableHandle.getUser());
assertEquals(1, listSchemaNames.size()); assertEquals(SCHEMA_NAME, listSchemaNames.get(0));
assertEquals(2, listTables.size()); assertEquals(SCHEMA_NAME, schemaTableName.getSchemaName()); assertEquals("multiple_types_per_column", tables.get(0)); assertEquals("simple_sheet", tables.get(1));
assertFalse(notified);
assertTrue(config.isStrategyConfigured("test")); assertTrue(strategy.toString(), strategy instanceof LastCandidateSelectionStrategy); assertEquals(100L, strategy.getSelectionDelayInMillis()); assertEquals(strategy, strategy1); assertNotEquals(strategy1, strategy2);
assertEquals("Behavior", RaftState.PreLeader, candidate.state());
assertTrue("isSerializedType", CreateTransaction.isSerializedType(new CreateTransaction())); assertFalse("isSerializedType", CreateTransaction.isSerializedType(new Object()));
assertEquals(INITIAL_SIZE, chunk.length); assertEquals((byte) i, chunk[i]);
assertEquals((byte) counter++, actual);
assertFalse(syncStatus.isInitialSyncDone()); assertFalse("append entries reply should be false", reply.isSuccess());
assertEquals(Boolean.TRUE, object().exists(YangInstanceIdentifier.empty()).get());
assertTrue(expected.size() > 0);
assertEquals("Behavior", RaftState.Leader, candidate.state());
assertEquals("String has not been created correctly.", bodyString, topicDOMNotification.toString());
assertTrue("New Behavior : " + newBehavior + " term = " + actorContext.getTermInformation().getCurrentTerm(), newBehavior instanceof Follower);
assertTrue(e instanceof IllegalArgumentException); assertTrue(e instanceof NullPointerException); assertTrue(ex instanceof IllegalStateException);
assertEquals("return index", -1L, retIndex);
assertEquals("Serialized type", CanCommitTransaction.class, serialized.getClass()); assertEquals("getTransactionID", expected.getTransactionId(), actual.getTransactionId()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertEquals("return index", -1L, retIndex);
assertTrue(followerLogInformation.okToReplicate(0)); assertFalse(followerLogInformation.okToReplicate(0)); assertTrue(followerLogInformation.okToReplicate(0)); assertTrue(followerLogInformation.okToReplicate(0));
assertEquals("isSuccess", false, reply.isSuccess());
assertNull(getWithTimeout(abort));
assertEquals("getOperationDuration", 5, actorUtils.getOperationDuration().toSeconds()); assertEquals("getTransactionCommitOperationTimeout", 7, actorUtils.getTransactionCommitOperationTimeout().duration().toSeconds()); assertEquals("getOperationDuration", 6, actorUtils.getOperationDuration().toSeconds()); assertEquals("getTransactionCommitOperationTimeout", 8, actorUtils.getTransactionCommitOperationTimeout().duration().toSeconds());
assertNotNull(submit1); assertNotNull(submit2);
assertEquals("isSuccess", true, reply.isSuccess());
assertEquals("getLastApplied", 101L, context.getLastApplied());
assertEquals(getSystem().dispatchers().defaultGlobalDispatcher(), actorUtils.getClientDispatcher());
assertNotNull(localRegisteredRoutedRpc); assertTrue(localRegisteredRoutedRpc.isEmpty());
assertTrue(matchingPaths.isEmpty()); assertTrue(matchingPaths.isEmpty()); assertTrue(matchingPaths.contains(paths.get(0))); assertTrue(matchingPaths.contains(paths.get(1))); assertEquals(paths.size(), matchingPaths.size()); assertTrue(matchingPaths.contains(paths.get(1))); assertEquals(1, matchingPaths.size());
assertArrayEquals(array, chunk);
assertNotNull(data.get()); assertEquals(TestModel.TEST_QNAME, data.get().getNodeType());
assertTrue("isSerializedType", CanCommitTransaction.isSerializedType(new CanCommitTransaction())); assertFalse("isSerializedType", CanCommitTransaction.isSerializedType(new Object()));
assertEquals("getIdentifier", expected.getIdentifier(), cloned.getIdentifier());
assertNotNull(globalRpc); assertEquals(1, globalRpc.size()); assertEquals(REMOTE_QNAME.toString(), rpc);
assertEquals("isVoteGranted", true, reply.isVoteGranted()); assertEquals("getTerm", term, reply.getTerm());
assertTrue(retrievedSourceFuture.isCompleted()); assertEquals(resultSchemaSource.getIdentifier(), schemaSource.getIdentifier()); assertArrayEquals(resultSchemaSource.read(), schemaSource.read());
assertTrue("After pruning present", actual.isPresent()); assertEquals("After pruning", prunedNode, actual.get());
assertEquals(bs.size(), barray.length); assertEquals("bytestring size not matching for chunk:" + chunkIndex, length - i, chunk.length); assertEquals("chunkindex not matching", chunkIndex, fts.getChunkIndex()); assertEquals("totalChunks not matching", chunkIndex, fts.getTotalChunks());
assertNotNull(rpcByRoute); assertEquals(1, rpcByRoute.size()); assertTrue(rpcByRoute.containsValue(LOCAL_QNAME.getLocalName()));
assertTrue(result.isPresent()); assertEquals(DATA, result.get());
assertEquals(expectedResult, rpcResult.getResult()); assertTrue(rpcResult.isSuccessful()); assertTrue(rpcResult.getErrors().isEmpty()); assertEquals(expectedResult, rpcResult.getResult()); assertTrue(rpcResult.isSuccessful()); assertTrue(rpcResult.getErrors().isEmpty());
assertTrue(followerLogInformation.decrNextIndex(1)); assertEquals("getNextIndex", 0, followerLogInformation.getNextIndex()); assertTrue(followerLogInformation.decrNextIndex(1)); assertEquals("getNextIndex", -1, followerLogInformation.getNextIndex()); assertFalse(followerLogInformation.decrNextIndex(1)); assertEquals("getNextIndex", -1, followerLogInformation.getNextIndex());
assertEquals("getCurrentTerm", 10, impl.getCurrentTerm()); assertEquals("getVotedFor", "member-1", impl.getVotedFor()); assertEquals("Message type", UpdateElectionTerm.class, message.getValue().getClass()); assertEquals("getCurrentTerm", 10, update.getCurrentTerm()); assertEquals("getVotedFor", "member-1", update.getVotedFor());
assertFalse(out.isPresent());
assertNotNull("fromBinary returned null", deserialized); assertEquals("fromBinary return type", SimpleReplicatedLogEntry.class, deserialized.getClass()); assertEquals("getTerm", expected.getTerm(), actual.getTerm()); assertEquals("getIndex", expected.getIndex(), actual.getIndex()); assertEquals("getData", expected.getData(), actual.getData());
assertFalse(config.isStrategyConfigured("test"));
assertEquals("getShardName", "shard-1", findLocalShard.getShardName());
assertNotNull(TestModel.TEST2_PATH + " not found", node);
assertTrue(resultData.isPresent()); assertEquals(data, resultData.get());
assertEquals(-1, appendEntries.getLeaderCommit()); assertEquals(0, appendEntries.getEntries().size()); assertEquals(0, appendEntries.getPrevLogIndex()); assertEquals(2, appendEntriesReply.getLogLastIndex()); assertEquals(1, appendEntriesReply.getLogLastTerm()); assertEquals(2, appendEntriesReply.getLogLastIndex()); assertEquals(1, appendEntriesReply.getLogLastTerm());
assertEquals(INITIAL_SIZE * 2, chunk.length); assertEquals((byte) i, chunk[i]);
assertEquals(Boolean.TRUE, getWithTimeout(canCommit));
assertNotNull(strategy);
assertTrue(raftBehavior instanceof Leader); assertEquals("getCommitIndex", newLogIndex, actorContext.getCommitIndex()); assertEquals("ApplyState count", newLogIndex, applyStateList.size()); assertEquals("getIndex", i + 1, applyState.getReplicatedLogEntry().getIndex()); assertEquals("getTerm", term, applyState.getReplicatedLogEntry().getTerm()); assertEquals("getData", newEntry.getData(), last.getReplicatedLogEntry().getData()); assertEquals("getIdentifier", id, last.getIdentifier());
assertEquals("path should not be null", ex.getMessage());
assertEquals("isVoteGranted", false, reply.isVoteGranted()); assertEquals("getTerm", 1001, reply.getTerm());
assertTrue(future.isCompleted());
assertTrue(resultData.isPresent()); assertEquals(data, resultData.get());
assertNotNull(tx);
assertFalse(readCars(peopleDataTree).isPresent()); assertTrue(readPeople(peopleDataTree).isPresent());
assertEquals("Serialized type", CommitTransaction.class, serialized.getClass()); assertEquals("getTransactionID", expected.getTransactionId(), actual.getTransactionId()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertTrue(request.getPersistenceProtocol().isPresent()); assertEquals(PersistenceProtocol.SIMPLE, request.getPersistenceProtocol().get()); assertEquals(Boolean.TRUE, getWithTimeout(canCommit));
assertEquals(901, transactionContextWrapper.getLimiter().availablePermits()); assertEquals(1001, transactionContextWrapper.getLimiter().availablePermits());
assertFalse(syncStatus.isInitialSyncDone()); assertFalse("append entries reply should be false", reply.isSuccess());
assertTrue(raftBehavior instanceof Candidate);
assertTrue("isSerializedType", DataExists.isSerializedType(new DataExists())); assertFalse("isSerializedType", DataExists.isSerializedType(new Object()));
assertTrue("Can commit", canCommitReply.getCanCommit());
assertEquals(OptionalLong.empty(), connection.checkTimeout(context.ticker().read()));
assertEquals("Behavior", RaftState.Leader, newBehavior.state());
assertTrue("isSerializedType", AbortTransaction.isSerializedType(new AbortTransaction())); assertFalse("isSerializedType", AbortTransaction.isSerializedType(new Object()));
assertFalse(wasSliced);
assertTrue("isSerializedType", CommitTransaction.isSerializedType(new CommitTransaction())); assertFalse("isSerializedType", CommitTransaction.isSerializedType(new Object()));
assertEquals("Serialized type", AbortTransactionReply.class, serialized.getClass()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertEquals("getPendingTxCommitQueueSize", 0, shard.underlyingActor().getPendingTxCommitQueueSize()); assertTrue("Failure type", failure instanceof IllegalStateException);
assertTrue(actorRef.path().toString().contains(moduleConfig.getRpcManagerPath()));
assertNotNull(rpcByRoute); assertTrue(rpcByRoute.isEmpty());
assertFalse(config.isStrategyConfigured("test"));
assertEquals(Boolean.TRUE, getWithTimeout(exists));
assertNull(getWithTimeout(abort));
assertEquals("getMemberShardNames", ImmutableSortedSet.of("people-1", "cars-1", "test-1", "default"), ImmutableSortedSet.copyOf(memberShardNames)); assertEquals("getMemberShardNames", ImmutableSortedSet.of("default"), ImmutableSortedSet.copyOf(memberShardNames)); assertEquals("getMemberShardNames size", 0, memberShardNames.size());
assertSame(behavior, connection.runTimer(behavior));
assertEquals("member-1", id.getMemberName().getName()); assertEquals("inventory", id.getShardName()); assertEquals("config", id.getType());
assertNotNull("Topic has not been created correctly.", eventSourceTopic.getTopicId());
assertEquals("peerMembers size", 0, shardBuilder.getPeerAddresses().size()); assertEquals("schemaContext", DisableElectionsRaftPolicy.class.getName(), shardBuilder .getDatastoreContext().getShardRaftConfig().getCustomRaftPolicyImplementationClass());
assertEquals(Boolean.TRUE, result.get());
assertEquals(TestModel.OUTER_LIST_QNAME.getLocalName(), mergeData, actualNode);
assertTrue(reply.isNeedsLeaderAddress()); assertFalse(reply.isNeedsLeaderAddress());
assertEquals("getRaftState", RaftState.Follower, mockRaftActor.getRaftState());
assertEquals("size", 1, log.size());
assertTrue(sourceFuture.isDone()); assertThat(e.getCause(), instanceOf(SchemaSourceException.class));
assertTrue("Recovery Applicable", shard1.underlyingActor().persistence().isRecoveryApplicable()); assertFalse("Recovery Not Applicable", shard2.underlyingActor().persistence().isRecoveryApplicable());
assertNull(leader.handleMessage(followerActor, "foo"));
assertEquals(0, object().compareTo(object())); assertEquals(0, object().compareTo(equalObject())); assertTrue(object().compareTo(differentObject()) < 0); assertTrue(differentObject().compareTo(object()) > 0);
assertTrue(capture); assertEquals(true, snapshotManager.isCapturing()); assertEquals("isPresent", false, outputStream.getValue().isPresent()); assertEquals(9L, captureSnapshot.getLastIndex()); assertEquals(1L, captureSnapshot.getLastTerm()); assertEquals(9L, captureSnapshot.getLastAppliedIndex()); assertEquals(1L, captureSnapshot.getLastAppliedTerm()); assertEquals(-1L, captureSnapshot.getReplicatedToAllIndex()); assertEquals(-1L, captureSnapshot.getReplicatedToAllTerm());
assertArrayEquals(array, chunk);
assertEquals("Serialized type", InstallSnapshot.class, serialized.getClass());
assertEquals("test1", OBJECT.getName());
assertTrue("isRecoveryApplicable", shard.underlyingActor().persistence().isRecoveryApplicable()); assertFalse("isRecoveryApplicable", shard.underlyingActor().persistence().isRecoveryApplicable()); assertTrue("isRecoveryApplicable", shard.underlyingActor().persistence().isRecoveryApplicable());
assertTrue(newBehavior instanceof Leader);
assertEquals("isVoteGranted", false, reply.isVoteGranted()); assertEquals("getTerm", 2, reply.getTerm());
assertEquals("cars-1", shard);
assertEquals("ModuleShardName", "default", shardName); assertNull("ModuleStrategy", shardStrategy); assertEquals("Members", ImmutableSortedSet.of(MEMBER_1, MEMBER_3), ImmutableSortedSet.copyOf(members)); assertEquals("ShardNames", ImmutableSortedSet.of("people-1", "cars-1", "test-1", "default"), ImmutableSortedSet.copyOf(shardNames));
assertEquals(true, snapshotManager.isCapturing()); assertEquals(false, snapshotManager.isCapturing()); assertEquals(Long.MAX_VALUE, criteriaCaptor.getValue().maxSequenceNr()); assertEquals(1233L, criteriaCaptor.getValue().maxTimestamp());
assertEquals(Boolean.FALSE, getWithTimeout(exists));
assertEquals("getShardList", expected.getShardList(), cloned.getShardList());
assertEquals("getRaftState", RaftState.Follower, mockRaftActor.getRaftState());
assertEquals("String has not been created correctly.", containerNodeBodyMock, topicDOMNotification.getBody());
assertEquals("return index", 10L, retIndex);
assertTrue(elapsed < context.getConfigParams().getElectionTimeOutInterval().toMillis()); assertTrue("Expected Candidate", newBehavior instanceof Candidate);
assertTrue(retrievedSourceFuture.isCompleted());
assertNotNull(tx);
assertEquals(ID, providedSource.getIdentifier()); assertArrayEquals(schemaSource.read(), providedSource.read());
assertEquals("getPeerAddress", "peerAddress1_1", context.getPeerAddress("peer1")); assertEquals("getPeerAddress", null, context.getPeerAddress("peer2"));
assertFalse(syncStatus.isInitialSyncDone()); assertTrue("append entries reply should be true", reply.isSuccess());
assertEquals(false, snapshotManager.isCapturing());
assertEquals("Raft state", RaftState.Follower, raftBehavior.state()); assertEquals("ReplicatedLog size", 1, context.getReplicatedLog().size());
assertTrue("After pruning present", actual.isPresent()); assertEquals("After pruning", prunedNode, actual.get());
assertNotNull(localRegisteredRoutedRpc); assertEquals(1, localRegisteredRoutedRpc.size()); assertThat(localRpc, containsString(LOCAL_QNAME.toString()));
assertEquals("Serialized type", ReadData.class, serialized.getClass()); assertEquals("getPath", expected.getPath(), actual.getPath()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertTrue("isSerializedType", ReadData.isSerializedType(new ReadData())); assertFalse("isSerializedType", ReadData.isSerializedType(new Object()));
assertEquals("getServerConfig", expected.getServerConfig(), cloned.getServerConfig());
assertEquals("getShardName", "shard-1", findLocalShard.getShardName());
assertEquals("Serialized type", AbortTransaction.class, serialized.getClass()); assertEquals("getTransactionID", expected.getTransactionId(), actual.getTransactionId()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertTrue("Can commit", canCommitReply.getCanCommit()); assertEquals(TestModel.OUTER_LIST_QNAME.getLocalName(), mergeData, actualNode);
assertTrue(strategy instanceof ModuleShardStrategy);
assertTrue("isSerializedType", DataExistsReply.isSerializedType(new DataExistsReply())); assertFalse("isSerializedType", DataExistsReply.isSerializedType(new Object()));
assertEquals("payload size", 156, payload.size());
assertEquals("Root present", true, actual.isPresent()); assertEquals("Root node", root, actual.get());
assertNotNull("Return value has not been created correctly.", eventSourceTopology.registerEventSource(eventSourceMock));
assertEquals("Behavior", RaftState.Candidate, candidate.state());
assertEquals("getFromIndex", expected.getToIndex(), cloned.getToIndex());
assertEquals("isFollowerActive", true, leader.getFollower(FOLLOWER_ID).isFollowerActive()); assertEquals("The number of append entries collected should be 2", 2, allMessages.size()); assertEquals(0, allMessages.get(0).getEntries().size()); assertEquals(1, allMessages.get(1).getEntries().size());
assertEquals("isVoteGranted", false, reply.isVoteGranted());
assertEquals(contextProbe.ref(), connection.localActor());
assertEquals(modification, request.getModification());
assertSame(Ticker.systemTicker(), ctx.ticker());
assertNotNull("getSnapshot is null", cloned.getSnapshot()); assertEquals("getSnapshot type", MetadataShardDataTreeSnapshot.class, cloned.getSnapshot().getClass()); assertEquals("getRootNode", expectedNode, ((MetadataShardDataTreeSnapshot)cloned.getSnapshot()).getRootNode().get());
assertTrue(capture); assertFalse(capture);
assertEquals("Failure cause type", TimeoutException.class, failure.cause().getClass());
assertEquals("ModuleShardName", "people-1", shardName); assertEquals("ModuleStrategy", ModuleShardStrategy.class, shardStrategy.getClass()); assertEquals("Members", ImmutableSortedSet.of(MEMBER_1, MEMBER_2), ImmutableSortedSet.copyOf(members)); assertEquals("ShardNames", ImmutableSortedSet.of("people-1", "cars-1", "test-1", "default"), ImmutableSortedSet.copyOf(shardNames));
assertEquals(providedSources, remoteProvidedSources);
assertEquals("resolve", null, resolver.resolve(peerId)); assertEquals("getShardActorAddress", address.toString() + "/user/shardmanager-" + type + "/" + memberName.getName() + "-shard-default-" + type, shardAddress); assertEquals("resolve", shardAddress, resolver.resolve(peerId));
assertEquals(1000, context.getShardBatchedModificationCount()); assertFalse(context.isTransactionDebugContextEnabled());
assertEquals("Applied state", node, actual);
assertEquals(RaftState.Leader, raftActorBehavior.state());
assertFalse("NormalizedNode isPresent", readOptional.isPresent()); assertTrue("NormalizedNode isPresent", readOptional.isPresent()); assertEquals("Response NormalizedNode", expectedNode, readOptional.get());
assertFalse(wasSliced);
assertEquals(true, snapshotManager.isCapturing()); assertEquals("isPresent", true, outputStream.getValue().isPresent()); assertEquals(0L, captureSnapshot.getLastIndex()); assertEquals(1L, captureSnapshot.getLastTerm()); assertEquals(0L, captureSnapshot.getLastAppliedIndex()); assertEquals(1L, captureSnapshot.getLastAppliedTerm()); assertEquals(-1L, captureSnapshot.getReplicatedToAllIndex()); assertEquals(-1L, captureSnapshot.getReplicatedToAllTerm());
assertTrue("getLocalShardDataTree present", leaderStateChanged.getLocalShardDataTree().isPresent()); assertSame("getLocalShardDataTree", shard.underlyingActor().getDataStore().getDataTree(), leaderStateChanged.getLocalShardDataTree().get()); assertFalse("getLocalShardDataTree present", leaderStateChanged.getLocalShardDataTree().isPresent());
assertFalse(wasSliced);
assertTrue("isSerializedType", AbortTransactionReply.isSerializedType(new AbortTransactionReply())); assertFalse("isSerializedType", AbortTransactionReply.isSerializedType(new Object()));
assertTrue("new modification not of type PruningDataTreeModification", dataTreeModification instanceof PruningDataTreeModification);
assertTrue("isSerializedType", CreateTransactionReply.isSerializedType(new CreateTransactionReply())); assertFalse("isSerializedType", CreateTransactionReply.isSerializedType(new Object()));
assertFalse(getWithTimeout(exists).isPresent());
assertEquals(Collections.emptyMap().toString(), bucketVersions);
assertEquals("getLeaderId", "leader", leaderStateChange.getLeaderId()); assertEquals("getMemberId", persistenceId, leaderStateChange.getMemberId()); assertEquals("getLeaderId", null, leaderStateChange.getLeaderId());
assertFalse("Unexpected DataTreeChangedReply", deadLetter.message() instanceof DataTreeChangedReply);
assertEquals("getUniqueMemberNamesForAllShards", Sets.newHashSet(MEMBER_1, MEMBER_2, MEMBER_3), configuration.getUniqueMemberNamesForAllShards());
assertEquals("isVoteGranted", true, reply.isVoteGranted()); assertEquals("getTerm", 1001, reply.getTerm());
assertNotNull(txChain);
assertTrue(bucketVersions.contains(testActor.provider().getDefaultAddress().toString()));
assertEquals("Serialized type", CommitTransactionReply.class, serialized.getClass()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertEquals("size", 2, replicatedLogImpl.size()); assertEquals("getSnapshotIndex", 1, replicatedLogImpl.getSnapshotIndex()); assertEquals("getSnapshotTerm", 1, replicatedLogImpl.getSnapshotTerm()); assertEquals("size", 4, replicatedLogImpl.size()); assertEquals("dataSize", 4, replicatedLogImpl.dataSize()); assertEquals("getSnapshotIndex", -1, replicatedLogImpl.getSnapshotIndex()); assertEquals("getSnapshotTerm", -1, replicatedLogImpl.getSnapshotTerm());
assertEquals(ABIVersion.BORON, clone.getVersion()); assertEquals(OBJECT.getSequence(), clone.getSequence()); assertEquals(OBJECT.getTarget(), clone.getTarget());
assertSame(CLIENT_ID, ctx.getIdentifier()); assertSame(PERSISTENCE_ID, ctx.persistenceId()); assertSame(probe.ref(), ctx.self());
assertFalse("Follower should be termed inactive before stopwatch starts", followerLogInformation.isFollowerActive()); assertTrue("Follower should be active", followerLogInformation.isFollowerActive()); assertFalse("Follower should be inactive after time lapsed", followerLogInformation.isFollowerActive()); assertTrue("Follower should be active from inactive", followerLogInformation.isFollowerActive());
assertNull(getWithTimeout(preCommit));
assertEquals("Journal log size", 1, context.getReplicatedLog().size()); assertEquals("Last index", 0, context.getReplicatedLog().lastIndex());
assertEquals("Serialized type", DataExists.class, serialized.getClass()); assertEquals("getPath", expected.getPath(), actual.getPath()); assertEquals("getVersion", DataStoreVersions.CURRENT_VERSION, actual.getVersion());
assertTrue("isSerializedType", CloseTransactionChain.isSerializedType(new CloseTransactionChain())); assertFalse("isSerializedType", CloseTransactionChain.isSerializedType(new Object()));
assertTrue("New Behavior : " + newBehavior, newBehavior instanceof Follower);
assertEquals("Message handled", true, handled); assertEquals("Message handled", false, handled);
assertNull(getWithTimeout(commit));
assertFalse(syncStatus.isInitialSyncDone()); assertTrue("append entries reply should be true", reply.isSuccess());
assertEquals(rpcErrors.size(), actualErrors.size()); assertEquals(expected.getApplicationTag(), actual.getApplicationTag()); assertEquals(expected.getSeverity(), actual.getSeverity()); assertEquals(expected.getMessage(), actual.getMessage()); assertEquals(expected.getErrorType(), actual.getErrorType()); assertEquals(expected.getCause(), actual.getCause()); assertEquals(expected.getInfo(), actual.getInfo()); assertEquals(expected.getTag(), actual.getTag());
assertEquals("getPath", expected.getPath(), clone.getPath()); assertEquals("getData", expected.getData(), clone.getData());
assertNotNull(globalRpc); assertTrue(globalRpc.isEmpty());
assertNotNull("Expected temp file created", FileBackedOutputStreamTest.findTempFileName(TEMP_DIR)); assertNull("Found unexpected temp file", FileBackedOutputStreamTest.findTempFileName(TEMP_DIR));
assertFalse(service.isCandidateRegistered(test)); assertTrue(service.isCandidateRegistered(test));
assertEquals("getFromIndex", expected.getFromIndex(), cloned.getFromIndex());
assertNull(getWithTimeout(preCommit));
assertEquals(shardActorRef, out.get());
assertEquals("getEntity", entity, e.getEntity());
assertEquals("Default instance", DefaultRaftPolicy.INSTANCE, params.getRaftPolicy());
assertEquals("getShardName", "shard-1", findLocalShard.getShardName()); assertEquals("getPath", path, registerMsg.getPath()); assertTrue("isRegisterOnAllInstances", registerMsg.isRegisterOnAllInstances());
assertTrue(timeout.isPresent());
assertEquals("getShardNameForModule", "cars-1", shardName); assertEquals("getShardNameForModule", "people-1", shardName); assertNull("getShardNameForModule - expected null", shardName);
assertEquals(shardAccess.getShardIdentifier(), TEST_ID); assertTrue(e instanceof IllegalStateException);
assertNotNull(tx);
assertEquals("Type has not been created correctly.", Absolute.of(TopicNotification.QNAME), topicDOMNotification.getType());
assertEquals(100, config.createStrategy("test", Collections.emptyMap()).getSelectionDelayInMillis()); assertEquals(0, config.createStrategy("test2", Collections.emptyMap()).getSelectionDelayInMillis());
assertNotNull(rpcByName); assertEquals(1, rpcByName.size()); assertTrue(rpcByName.containsValue(LOCAL_QNAME.getLocalName()));
assertTrue("isSerializedType", CommitTransactionReply.isSerializedType(new CommitTransactionReply())); assertFalse("isSerializedType", CommitTransactionReply.isSerializedType(new Object()));
assertEquals(shardAccess.getLeaderLocation(), LeaderLocation.UNKNOWN); assertEquals(shardAccess.getLeaderLocation(), LeaderLocation.LOCAL); assertEquals(shardAccess.getLeaderLocation(), LeaderLocation.UNKNOWN); assertTrue(e instanceof IllegalStateException);
assertTrue("isSerializedType", ReadDataReply.isSerializedType(new ReadDataReply())); assertFalse("isSerializedType", ReadDataReply.isSerializedType(new Object()));
assertNotNull(rpcResult); assertTrue(rpcResult.isSuccessful());
assertNotNull("getStrategyForModule null", strategy); assertEquals("getStrategyForModule type", ModuleShardStrategy.class, strategy.getClass()); assertNotNull("getStrategyForModule null", strategy); assertEquals("getStrategyForModule type", ModuleShardStrategy.class, strategy.getClass()); assertNull("getStrategyForModule - expected null", strategy); assertNull("getStrategyForModule - expected null", strategy);
assertEquals(ABIVersion.BORON, clone.getVersion()); assertEquals(OBJECT.getSequence(), clone.getSequence()); assertEquals(OBJECT.getTarget(), clone.getTarget());
assertFalse(OBJECT.isRetriable());
assertEquals("getModuleNameFromNameSpace", "cars", moduleName); assertEquals("getModuleNameFromNameSpace", "test", moduleName); assertNull("getModuleNameFromNameSpace - expected null", moduleName);
assertTrue("isSerializedType", CanCommitTransactionReply.isSerializedType(new CanCommitTransactionReply())); assertFalse("isSerializedType", CanCommitTransactionReply.isSerializedType(new Object()));
assertNotEquals(actorSystem.dispatchers().defaultGlobalDispatcher(), actorUtils.getClientDispatcher());
assertEquals("getTerm", expected.getTerm(), cloned.getTerm()); assertEquals("isVoteGranted", expected.isVoteGranted(), cloned.isVoteGranted());
assertNotNull(rpcByName); assertTrue(rpcByName.isEmpty());
assertSame(behavior, connection.lockedReconnect(behavior, mock(RequestException.class)));
assertEquals("getShardManagerPeerActorAddresses", Sets.newHashSet( address2.toString() + "/user/shardmanager-config", address3.toString() + "/user/shardmanager-config"), Sets.newHashSet(peerAddresses));
assertEquals("isFollowerActive", true, leader.getFollower(FOLLOWER_ID).isFollowerActive()); assertEquals("The number of append entries collected should be 1", 1, allMessages.size());
assertNotNull("Topic has not been created correctly.", eventSourceTopology.createTopic(createTopicInputMock));
assertEquals(DefaultShardStrategy.DEFAULT_SHARD, shard);
assertEquals("return index", -1L, retIndex);
assertEquals("getMembersFromShardName", ImmutableSortedSet.of(MEMBER_1, MEMBER_2, MEMBER_3), ImmutableSortedSet.copyOf(members)); assertEquals("getMembersFromShardName", ImmutableSortedSet.of(MEMBER_1), ImmutableSortedSet.copyOf(members)); assertEquals("getMembersFromShardName size", 0, members.size());
assertEquals("isSuccess", false, reply.isSuccess()); assertEquals("getTerm", 2, reply.getTerm()); assertTrue("New Behavior : " + newBehavior, newBehavior instanceof Candidate);
assertEquals("size", 2, replicatedLogImpl.size()); assertEquals("dataSize", 2, replicatedLogImpl.dataSize()); assertEquals("getSnapshotIndex", 1, replicatedLogImpl.getSnapshotIndex()); assertEquals("getSnapshotTerm", 1, replicatedLogImpl.getSnapshotTerm()); assertEquals("lastIndex", 3, replicatedLogImpl.lastIndex()); assertEquals("lastTerm", 2, replicatedLogImpl.lastTerm());
assertEquals("getAllShardNames", ImmutableSortedSet.of("people-1", "cars-1", "test-1", "default"), ImmutableSortedSet.copyOf(allShardNames));
assertSame("handleMessage result", follower, newBehavior);
assertEquals("Exists response", Boolean.FALSE, exists); assertEquals("Exists response", Boolean.TRUE, exists);
assertEquals("isFollowerActive", true, leader.getFollower(FOLLOWER_ID).isFollowerActive()); assertEquals("The number of append entries collected should be 3", 3, allMessages.size());
assertFalse(shardManager.getMBean().getSyncStatus());
assertArrayEquals(SMILEY, data); assertEquals('H', rfis.read()); assertEquals('e', fin.read()); assertEquals('l', fin.read()); assertEquals('l', fin.read()); assertEquals('o', rfis.read());
assertThat(isTokenValid).isEqualTo(false);
assertThat(isTokenValid).isEqualTo(false);
assertThat(isTokenValid).isEqualTo(false);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertNotNull(result); assertEquals(0, (int) result.getMin()); assertEquals(32767, (int) result.getMax()); assertNotNull(result); assertEquals(2, (int) result.getMin()); assertEquals(6, (int) result.getMax());
assertTrue(expected.equalElems(stopTime));
assertEquals(0, elem.getNumAttributes()); assertEquals(1, elem.getNumElements()); assertNotNull(recordRoot); assertEquals(0, recordRoot.getNumElements()); assertEquals(21, recordRoot.getNumAttributes());
assertEquals("PROD_TYPE", ModisFileReader.getTypeString(null, product));
assertEquals(Double.NaN, samples[0].getDouble(), 1e-8); assertEquals(0.0, samples[1].getDouble(), 1e-8); assertEquals(0.0, samples[2].getDouble(), 1e-8); assertEquals(0.0, samples[3].getDouble(), 1e-8); assertEquals(0.0, samples[4].getDouble(), 1e-8); assertEquals(Double.NaN, samples[5].getDouble(), 1e-8);
assertNotNull(productReader); assertTrue(productReader instanceof LandsatGeotiffReader);
assertEquals(65, fileNames.size()); assertEquals(false, fileNames.contains("amin.nc")); assertEquals(false, fileNames.contains("flags.nc")); assertEquals("r0560.nc", fileNames.get(5)); assertEquals("r0550n.nc", fileNames.get(18)); assertEquals("r1375o.nc", fileNames.get(27));
assertEquals("cloud NN result", 0.004993, out, 0.00001);
assertEquals(1, ceosReader.readB1()); assertEquals(3, ceosReader.readB1()); assertEquals(9, ceosReader.readB1()); assertEquals(4, ceosReader.readB1()); assertEquals(14, ceosReader.readB1());
assertEquals(Instrument.S2_MSI, DetectInstrument.getInstrument(product));
assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(invalidPath));
assertNotNull(f1_BT_io_netcdfFile); assertEquals(1800000, NcFileStitcher.determineSectionSize(0, f1_BT_io_variable)); assertNotNull(met_tx_netcdfFile); assertEquals(260000, NcFileStitcher.determineSectionSize(2, u_wind_tx_variable));
assertEquals(5.5, di.getValue(centerTimeMJD, 45, -90)); assertEquals(7.6, di.getValue(centerTimeMJD, 45, 90)); assertEquals(3.85, di.getValue(centerTimeMJD, -45, -90)); assertEquals(9.125, di.getValue(centerTimeMJD, -45, 90));
assertNotNull(physVolDescriptor); assertEquals(24, properties.length); assertEquals("1", physVolDescriptor.getValue("PHYS_VOL_NUMBER")); assertEquals("V2KRNS10__20060721E", physVolDescriptor.getValue("PRODUCT_#0001_ID")); assertEquals("_MIR.HDF", physVolDescriptor.getValue("PRODUCT_#0001_PLAN_09"));
assertNotNull(LonLatMultiLevelSource.create(lonSource, latSource, function, DataBuffer.TYPE_DOUBLE)); assertNotNull(LonLatMultiLevelSource.create(lonSource, latSource, function, DataBuffer.TYPE_FLOAT));
assertEquals(coastlineColor, coastlineColor1); assertEquals(coastlineColor, coastlineColor2); assertEquals(coastlineColor, coastlineColor3); assertEquals(firstDefaultColour, coastlineColor4);
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("cevbtvztx", manifestElement.getFirstChild().getNodeValue());
assertEquals(26.36134, fuAlgo.getTristimulusValue(spectrum, xFactor), 1e-8); assertEquals(25.691876, fuAlgo.getTristimulusValue(spectrum, yFactor), 1e-8); assertEquals(24.818239000000005, fuAlgo.getTristimulusValue(spectrum, zFactor), 1e-8);
assertEquals("VZA", SpotVgtProductReaderPlugIn.getBandName("VZA.HDF")); assertEquals("VZA", SpotVgtProductReaderPlugIn.getBandName("_VZA.HDF")); assertEquals("B2", SpotVgtProductReaderPlugIn.getBandName("V220050513179_B2.HDF")); assertEquals("MIR", SpotVgtProductReaderPlugIn.getBandName("V220050513179_MIR.HDF"));
assertEquals(8.496979944265044E21, rayThickness, 1e-8);
assertEquals("atsrProductInformation", factory.getProductSpecificMetadataElementName());
assertArrayEquals(new String[]{"LandsatGeoTIFF"}, plugin.getFormatNames());
assertNotNull(defaultFileExtensions); assertEquals(1, defaultFileExtensions.length); assertEquals(".hdf", defaultFileExtensions[0]);
assertEquals(150.5, upperBound, 1e-2); assertEquals(128.5, lowerBound, 1e-2); assertEquals(146.1, v, 1e-2);
assertTrue(coding.isCrossingMeridianAt180()); assertFalse(coding.isCrossingMeridianAt180());
assertEquals(inputString, result.getName()); assertEquals(inputFile.getName(), result.getName()); assertNull(result);
assertEquals(5, sampleMap.size()); assertEquals("chl", sampleMap.get(0)); assertEquals("mph_chl_flags", sampleMap.get(1)); assertEquals("immersed_cyanobacteria", sampleMap.get(2)); assertEquals("floating_cyanobacteria", sampleMap.get(3)); assertEquals("floating_vegetation", sampleMap.get(4));
assertFalse(MphChlUtils.isCyano(1.0, -1.0)); assertFalse(MphChlUtils.isCyano(-0.1, -1.0)); assertFalse(MphChlUtils.isCyano(1.0, 0.1)); assertTrue(MphChlUtils.isCyano(-0.1, 0.1));
assertEquals("18490", ModisUtils.extractValueForKey(TestCoreString, "ORBITNUMBER"));
assertEquals(2, sectionSigma.length); assertEquals(1.004158010817489E-9, sectionSigma[0], 1e-8); assertEquals(3.9154039638717356E-12, sectionSigma[1], 1e-8);
assertEquals(landColor, landColor1); assertEquals(landColor, landColor2); assertEquals(landColor, landColor3); assertEquals(firstDefaultColour, landColor4);
assertNotNull(formatNames); assertEquals(1, formatNames.length); assertEquals("MODIS", formatNames[0]);
assertEquals(lakeColor, lakeColor1); assertEquals(lakeColor, lakeColor2); assertEquals(lakeColor, lakeColor3); assertEquals(firstDefaultColour, lakeColor4);
assertTrue(LandsatGeotiffReaderPlugin.isMetadataFile(positiveFile1)); assertTrue(LandsatGeotiffReaderPlugin.isMetadataFile(positiveFile2));
assertEquals(Instrument.MERIS, DetectInstrument.getInstrument(product)); assertEquals(Instrument.MERIS, DetectInstrument.getInstrument(product)); assertEquals(Instrument.MERIS, DetectInstrument.getInstrument(product)); assertEquals(Instrument.MERIS, DetectInstrument.getInstrument(product));
assertNotNull(firstInstance); assertNotSame(secondInstance, firstInstance);
assertNotNull(actual); assertEquals(expected[n], actual[n]);
assertNotNull(incrementOffset); assertEquals(2, incrementOffset.offset); assertEquals(5, incrementOffset.increment); assertNotNull(incrementOffset); assertEquals(2, incrementOffset.offset); assertEquals(5, incrementOffset.increment);
assertEquals(cloudColor, cloudColor1); assertEquals(cloudColor, cloudColor2); assertEquals(cloudColor, cloudColor3); assertEquals(firstDefaultColour, cloudColor4);
assertFalse(ModisFileReader.hasInvalidScaleAndOffset(new float[4], new float[4], 3));
assertFalse(MphChlOp.isValidBrrSourceProduct(sourceProduct, Sensor.MERIS_3RD)); assertTrue(MphChlOp.isValidBrrSourceProduct(sourceProduct, Sensor.MERIS_3RD)); assertTrue(MphChlOp.isValidBrrSourceProduct(sourceProduct, Sensor.MERIS_4TH)); assertFalse(MphChlOp.isValidBrrSourceProduct(sourceProduct, Sensor.OLCI)); assertTrue(MphChlOp.isValidBrrSourceProduct(sourceProduct, Sensor.OLCI));
assertEquals(name,"LC08_L1TP_024036_20181011_20181011_01_RT - Level 2");
assertNotNull(inputTypes); assertEquals(2, inputTypes.length); assertEquals(String.class, inputTypes[0]); assertEquals(File.class, inputTypes[1]);
assertTrue(coding.canClone());
assertTrue(landsatMetadata instanceof LandsatReprocessedMetadata);
assertEquals(3, oa01_radians.length); assertEquals(0.13498464f, oa01_radians[0], 1.0e-6); assertEquals(0.13473716f, oa01_radians[1], 1.0e-6); assertEquals(0.1344073f, oa01_radians[2], 1.0e-6);
assertNull(ModisProductReaderPlugIn.getInputFile(null));
assertNotNull(productFileFilter); assertEquals("MODIS", productFileFilter.getFormatName()); assertEquals(".hdf", productFileFilter.getDefaultExtension()); assertEquals("MODIS HDF4 Data Products (*.hdf)", productFileFilter.getDescription());
assertTrue(LandsatGeotiffReaderPlugin.isMetadataFilename("test_L8_MTL.txt")); assertTrue(LandsatGeotiffReaderPlugin.isMetadataFilename("test_legacy_L5_WithTrailingWhiteSpace_MTL.txt")); assertFalse(LandsatGeotiffReaderPlugin.isMetadataFilename("test_MTL_L7.txt"));
assertNotNull(readerInstance); assertTrue(readerInstance instanceof ModisProductReader);
assertEquals(name.length,10);
assertNotNull(mgr.getCoefficientFile("MERIS", "radiance_2", AEROSOL_TYPE.DESERT));
assertEquals(Instrument.SEAWIFS, DetectInstrument.getInstrument(product));
assertTrue(BrrOp.isValidRhoSpectralIndex(0)); assertFalse(BrrOp.isValidRhoSpectralIndex(10)); assertTrue(BrrOp.isValidRhoSpectralIndex(11)); assertFalse(BrrOp.isValidRhoSpectralIndex(14)); assertFalse(BrrOp.isValidRhoSpectralIndex(-1)); assertFalse(BrrOp.isValidRhoSpectralIndex(15));
assertTrue(landsatMetadata instanceof LandsatReprocessedMetadata);
assertEquals("p3", masterProduct.getName());
assertEquals("probability", 0.01313, probability, 0.00001);
assertEquals(expected, ceosReader.readAn(expected.length()));
assertEquals(0.04048583f, scales[0], 1e-8); assertEquals(0.f, scales[1], 1e-8); assertEquals(-0.01f, scales[2], 1e-8);
assertEquals(2, nodeList.getLength()); assertEquals("valueTag", valueTagOne.getNodeName()); assertEquals("A", valueTagOne.getTextContent()); assertEquals("valueTag", valueTagTwo.getNodeName()); assertEquals("A", valueTagTwo.getTextContent());
assertEquals("FWD_PIXEL_INTERPOLATING", codingKeys[0]); assertEquals("INV_PIXEL_QUAD_TREE", codingKeys[1]);
assertEquals(22, points.length);
assertEquals(1, ceosReader.readB1()); assertEquals(5, ceosReader.readB1()); assertEquals(11, ceosReader.readB1());
assertEquals(8.0, di.getValue(endTimeMJD, 45, -90)); assertEquals(11.2, di.getValue(endTimeMJD, 45, 90)); assertEquals(2.7, di.getValue(endTimeMJD, -45, -90)); assertEquals(12.25, di.getValue(endTimeMJD, -45, 90));
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("2013-07-07T15:47:52.000014Z", manifestElement.getFirstChild().getNodeValue());
assertNotNull(range); assertEquals(34.0, range.getMin(), 1e-8); assertEquals(3809.0, range.getMax(), 1e-8);
assertNotNull(elem); assertEquals("name suffix", elem.getName()); assertNotNull(elem); assertEquals("name", elem.getName()); assertNotNull(elem); assertEquals("name", elem.getName()); assertNotNull(elem); assertEquals("name", elem.getName());
assertNotNull(result); assertEquals(ptDst.getX(), result.getX(), 1e-8); assertEquals(ptDst.getY(), result.getY(), 1e-8); assertEquals(expected[i].getX(), ptDst.getX(), 1e-8); assertEquals(expected[i].getY(), ptDst.getY(), 1e-8);
assertTrue(slstrCoding.canClone());
assertEquals("FWD_PIXEL", codingKeys[0]); assertEquals("INV_PIXEL_QUAD_TREE", codingKeys[1]);
assertEquals(".bla", ModisUtils.decodeBandName("schnipp,schnupp,bla,blubb", 2)); assertEquals(".schnipp", ModisUtils.decodeBandName("schnipp,schnupp,bla,blubb", 0));
assertEquals(2, massAir.length); assertArrayEquals(new float[]{0.84070706f, -3.9328835f}, massAir, 0);
assertEquals(Instrument.CZCS, DetectInstrument.getInstrument(product));
assertFalse(ModisProductReaderPlugIn.isValidInputFile(null));
assertEquals(7358, ceosReader.readIn(6));
assertEquals("", checksum);
assertEquals(4, S2Utils.getNumBandsToRcCorrect(inputBands)); assertEquals(4, S2Utils.getNumBandsToRcCorrect(inputBands)); assertEquals(3, S2Utils.getNumBandsToRcCorrect(inputBands));
assertEquals(1, vStart, 0.05); assertTrue(vStart < 1.0); assertEquals(1, vMid, 0.05); assertTrue(vMid > 1.0); assertEquals(1, vEnd, 0.05); assertTrue(vEnd < 1.0);
assertEquals("cloud NN result", 0.004993, out, 0.00001);
assertNotNull(mgr.getCoefficientFile("MERIS", "radiance_2", AEROSOL_TYPE.DESERT));
assertNotNull(tf); assertEquals("01.10.2003 00:00:00", dateFormat.format(tf.getStartDate())); assertEquals("31.03.2004 23:59:59", dateFormat.format(tf.getEndDate())); assertNotNull(tf); assertEquals("01.04.2003 00:00:00", dateFormat.format(tf.getStartDate())); assertEquals("30.09.2003 23:59:59", dateFormat.format(tf.getEndDate()));
assertNotNull(file); assertEquals(testFileName, file.getName());
assertNotNull(tempDir); assertTrue(tempDir.isDirectory()); assertFalse(tempDir.isDirectory());
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("2013-07-07T15:32:52.300000Z", manifestElement.getFirstChild().getNodeValue());
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("545765", manifestElement.getFirstChild().getNodeValue());
assertEquals("REFLECTANCE", Landsat8Metadata.getSpectralInputString()); assertEquals("RADIANCE", Landsat8Metadata.getSpectralInputString());
assertArrayEquals(expectedDestinationOffsets[i], actualDestinationOffsets[i]);
assertEquals(Sensor.OLCI, sensorType);
assertTrue(ModisFileReader.hasInvalidScaleAndOffset(new float[2], new float[4], 3));
assertEquals(1.0351, SolarFluxCorrectionFactorCalculator.computeFactorFor(time1, time2), 1e-4);
assertEquals(2, massAir.length); assertArrayEquals(new float[]{2, 2}, massAir, 0);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path)); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals("OL_1_ERR", manifest.getProductType());
assertArrayEquals(null, gaseousAbsorptionAlgo.gasToComputeForBand("dummy1"));
assertNull(SmacUtils.getSensorType("Nasenann")); assertNull(SmacUtils.getSensorType("strange")); assertNull(SmacUtils.getSensorType(""));
assertNotNull(mosaicImage); assertEquals(50, mosaicImage.getWidth()); assertEquals(100, mosaicImage.getHeight()); assertEquals(x / 10 + 1, data.getSample(x, 0, 0));
assertEquals(-1, band.getSpectralBandIndex()); assertEquals(0.f, band.getSpectralWavelength(), 1e-8); assertEquals(0.f, band.getSpectralBandwidth(), 1e-8);
assertNotNull(upperLeft); assertEquals(upperLeft.x,473400,0.1); assertEquals(upperLeft.y,3946500,0.1);
assertNotNull(f1_BT_io_netcdfFile); assertArrayEquals(new int[]{0}, NcFileStitcher.determineSourceOffsets(1800000, f1_BT_io_variable)); assertNotNull(met_tx_netcdfFile); assertArrayEquals(new int[]{0, 260000, 520000, 780000, 1040000}, NcFileStitcher.determineSourceOffsets(260000, u_wind_tx_variable));
assertEquals(-1.06962770630708111E+01, ceosReader.readGn(24), 1E-25);
assertEquals(6, band.getSpectralBandIndex()); assertEquals(555.f, band.getSpectralWavelength(), 1e-8); assertEquals(20.f, band.getSpectralBandwidth(), 1e-8);
assertEquals(3.5, absorptionAuxII.convolve(3, 4, coeffhighres)); assertEquals(4.0, absorptionAuxII.convolve(3, 5, coeffhighres)); assertEquals(3.0, absorptionAuxII.convolve(1, 5, coeffhighres));
assertNotNull(actualNames); assertEquals(expectedNames[n], actualNames[n]);
assertEquals(expDualDesc, description); assertEquals(expNadirDesc, description);
assertEquals(3, ncFiles.size()); assertEquals("met_tx.nc", ncFiles.get(0)); assertEquals("viscal.nc", ncFiles.get(1)); assertEquals("F1_BT_io.nc", ncFiles.get(2));
assertTrue(manifestFile.exists());
assertEquals(1973, ceosReader.readI4()); assertEquals(60, ceosReader.readI4());
assertNotNull(auxPath);
assertEquals(0, profileManager.getProfileCount()); assertEquals(9, profileManager.getProfileCount());
assertEquals("FWD_PIXEL", codingKeys[0]); assertEquals("jippie", codingKeys[1]);
assertFalse(ModisProductReaderPlugIn.hasHdfFileExtension(null)); assertFalse(ModisProductReaderPlugIn.hasHdfFileExtension(new File("tonio_und.tom"))); assertTrue(ModisProductReaderPlugIn.hasHdfFileExtension(new File("I_am_but.hdf")));
assertEquals("taur_B1", s2TargetBandName); assertEquals("rBRR_B9", s2TargetBandName); assertEquals("rtoa_ng_B8A", s2TargetBandName); assertEquals("rtoa_B12", s2TargetBandName);
assertEquals(2, massAir.length); assertArrayEquals(new float[]{2.0015247f, 2.0030515f}, massAir, 0);
assertNotNull(path); assertTrue(path.toFile().exists());
assertEquals(1.3, SpikeInterpolation.getUpperValue(useAr, 1.3), 1e-8); assertEquals(2, SpikeInterpolation.getUpperValue(useAr, 1.9), 1e-8); assertEquals(2.9, SpikeInterpolation.getUpperValue(useAr, 2.7), 1e-8); assertEquals(2.9, SpikeInterpolation.getUpperValue(useAr, 2.9), 1e-8);
assertEquals(3, PpeOp.getMAD(list), 1e-10); assertEquals(2, PpeOp.getMAD(list2), 1e-10); assertEquals(6.5, PpeOp.getMAD(list3), 1e-10);
assertNotNull(ints); assertEquals(6, ints.length); assertEquals(123, ints[0]); assertEquals(45, ints[1]); assertEquals(6, ints[2]); assertEquals(46, ints[3]); assertEquals(7, ints[4]); assertEquals(234, ints[5]); assertEquals(prefix.length() + 6 * 3, _ios.getStreamPosition());
assertNotNull(allFileArray); assertEquals(2, allFiles.size()); assertThat(allFiles, hasItem("dir1/file3.txt")); assertThat(allFiles, hasItem("file1"));
assertEquals(0, bowtiePixelGeoCoding.getScanlineOffset()); assertEquals(0, bowtiePixelGeoCoding.getScanlineOffset());
assertTrue(expected.equalElems(manifest.getStartTime()));
assertArrayEquals(new String[]{".txt", ".TXT", ".gz", ".tgz"}, plugin.getDefaultFileExtensions());
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals(SensorCoefficientManager.AATSR_NAME, type); assertEquals(SensorCoefficientManager.MERIS_NAME, type); assertEquals(SensorCoefficientManager.MERIS_NAME, type);
assertNotNull(range); assertEquals(14.0, range.getMin(), 1e-8); assertEquals(9886.0, range.getMax(), 1e-8);
assertEquals(16.418472, calibrator.calibrate((float) (86.12158)), 1.0e-6f);
assertEquals(16.418472, calibrator.calibrate((float) (7.31)), 1.0e-6f);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals("C", node.getTextContent());
assertEquals("rBRR_07", sampleMap.get(0)); assertEquals("rBRR_08", sampleMap.get(1)); assertEquals("rBRR_10", sampleMap.get(2)); assertEquals("rBRR_11", sampleMap.get(3)); assertEquals("rBRR_12", sampleMap.get(4)); assertEquals("rBRR_18", sampleMap.get(5));
assertEquals(1.2515000000000285, fuAlgo.getPolyCorr(1.0, constPolyHueForMeris), 1e-8); assertEquals(-1.7544999999999717, fuAlgo.getPolyCorr(2.5, constPolyHueForMeris), 1e-8);
assertEquals(file, VirtualDirTgz.getFilenameFromPath(file));
assertEquals("in", targetImageSize.getIdentifier()); assertEquals(21687, targetImageSize.getStartOffset()); assertEquals(445, targetImageSize.getTrackOffset()); assertEquals(6000, targetImageSize.getRows()); assertEquals(2498, targetImageSize.getColumns());
assertEquals(referencePixelPos.getX(), slstrPixelPos.getX(), 1e-8); assertEquals(referencePixelPos.getY(), slstrPixelPos.getY(), 1e-8);
assertEquals("longitude_an", variableNames[0]); assertEquals("latitude_ao", variableNames[1]); assertEquals("longitude_bn", variableNames[0]); assertEquals("latitude_bo", variableNames[1]); assertEquals("longitude_cn", variableNames[0]); assertEquals("latitude_co", variableNames[1]); assertEquals("longitude_in", variableNames[0]); assertEquals("latitude_io", variableNames[1]); assertEquals("longitude_fn", variableNames[0]); assertEquals("latitude_fo", variableNames[1]);
assertEquals("925 members", 925, cwRR.length); assertEquals("value 0", 0f, cwRR[0], DIFF); assertEquals("value 1", 0f, cwRR[1], DIFF); assertEquals("value 924", 0f, cwRR[924], DIFF);
assertEquals(Double.NaN, samples[0].getDouble(), 1e-8); assertEquals(0.0, samples[1].getDouble(), 1e-8); assertEquals(0.0, samples[2].getDouble(), 1e-8); assertEquals(0.0, samples[3].getDouble(), 1e-8); assertEquals(0.0, samples[4].getDouble(), 1e-8); assertEquals(0.0, samples[4].getDouble(), 1e-8);
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("265.156859", manifestElement.getFirstChild().getNodeValue());
assertEquals(masks.size(),19);
assertEquals(2.7182817459106445, gaseousAbsorptionAlgo.getExponential(1, -1, 1), 1e-8); assertEquals(0.36787945, gaseousAbsorptionAlgo.getExponential(1, 1, 1), 1e-8); assertEquals(1.0, gaseousAbsorptionAlgo.getExponential(1, 0, 1), 1e-8);
assertEquals(expectedOutput[0], actualOutput[0], EPS);
assertEquals(1.75, geoPos.lon, 1e-8); assertEquals(1.7, geoPos.lat, 1e-8); assertEquals(1.75, geoPos.lon, 1e-8); assertEquals(1.7, geoPos.lat, 1e-8);
assertEquals(1, SpikeInterpolation.arrayIndex(useAr, 1.3)); assertEquals(3, SpikeInterpolation.arrayIndex(useAr, 2));
assertEquals("calculated i", (radiance / (sunSpectralFlux * Math.cos(sunZenith * MathUtils.DTOR))), i, 0.00001);
assertEquals(1, (int)resultPos.getX()); assertEquals(0, (int)resultPos.getY()); assertEquals(1, (int)resultPos.getX()); assertEquals(0, (int)resultPos.getY()); assertEquals(2, (int)resultPos.getX()); assertEquals(1, (int)resultPos.getY()); assertEquals(3, (int)resultPos.getX()); assertEquals(2, (int)resultPos.getY());
assertEquals("rBRR_06", sampleMap.get(0)); assertEquals("rBRR_07", sampleMap.get(1)); assertEquals("rBRR_08", sampleMap.get(2)); assertEquals("rBRR_09", sampleMap.get(3)); assertEquals("rBRR_10", sampleMap.get(4)); assertEquals("rBRR_14", sampleMap.get(5));
assertEquals("reflec_10", bestBandName1); assertEquals("reflec_20", bestBandName2);
assertNotNull(sensor); assertEquals(Sensor.MERIS_3RD, sensor); assertNotNull(sensor); assertEquals(Sensor.OLCI, sensor); assertNull(sensor);
assertEquals(0, profileManager.getProfileCount()); assertEquals(9, profileManager.getProfileCount());
assertNotNull(description); assertEquals("MODIS HDF4 Data Products", description); assertNotNull(description); assertEquals("MODIS HDF4 Data Products", description);
assertTrue(landsatMetadata instanceof LandsatReprocessedMetadata);
assertNotNull(reader); assertTrue(reader instanceof AtsrProductReader);
assertFalse(ModisProductReaderPlugIn.isValidInputFile(new File("I/don/not/exist.hdf")));
assertEquals("C", xPathHelper.getString("/xml/secondTag/valueTag", xmlDoc));
assertTrue(auxDataPath.isAbsolute()); assertTrue(collect.stream().anyMatch(path -> path.getFileName().toString().equals("band_info_olci.txt"))); assertTrue(collect.stream().anyMatch(path -> path.getFileName().toString().equals("band_value.txt")));
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals("FWD_TIE_POINT_BILINEAR", codingKeys[0]); assertEquals("INV_TIE_POINT", codingKeys[1]);
assertEquals("band_name", ModisUtils.extractBandName("band_name")); assertEquals("EV_250_Aggr500_RefSB", ModisUtils.extractBandName("MODIS_SWATH_Type_L1B/Data Fields/EV_250_Aggr500_RefSB")); assertEquals("EV_500_RefSB_Uncert_Indexes", ModisUtils.extractBandName("MODIS_SWATH_Type_L1B/Data Fields/EV_500_RefSB_Uncert_Indexes"));
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("265.843889", manifestElement.getFirstChild().getNodeValue());
assertNotNull(result); assertEquals(ptDst.getX(), result.getX(), 1e-8); assertEquals(ptDst.getY(), result.getY(), 1e-8); assertEquals(expected[i].getX(), ptDst.getX(), 1e-8); assertEquals(expected[i].getY(), ptDst.getY(), 1e-8);
assertEquals(281547991161788L, ceosReader.readB8());
assertEquals(3.0, di.getValue(startTimeMJD, 45, -90)); assertEquals(4.0, di.getValue(startTimeMJD, 45, 90)); assertEquals(5.0, di.getValue(startTimeMJD, -45, -90)); assertEquals(6.0, di.getValue(startTimeMJD, -45, 90));
assertEquals("TYPE_STRING", ModisFileReader.getTypeString("TYPE_STRING", product));
assertEquals("04-JAN-2000 12:00:00.000000", time1.format()); assertEquals("06-JAN-2000 12:00:00.000000", time2.format()); assertEquals("05-JAN-2000 12:00:00.000000", centerTime1.format()); assertEquals("05-JAN-2000 12:00:00.000000", centerTime2.format());
assertTrue(landsatMetadata instanceof LandsatReprocessedMetadata);
assertTrue(Files.isDirectory(zipDir)); assertTrue(Files.isRegularFile(imageFile)); assertEquals(45088, Files.size(imageFile)); assertTrue(Files.isRegularFile(textFile)); assertEquals(1710, Files.size(textFile));
assertArrayEquals(expected_met_tx_DestinationOffsets[i], actual_met_tx_DestinationOffsets[i]);
assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(invalidPath));
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("6059", manifestElement.getFirstChild().getNodeValue()); assertEquals("6059", manifestElement.getTextContent());
assertTrue(ModisProductReaderPlugIn.isValidInputFile(testFile));
assertArrayEquals(new double[]{4, 9, 16, 25}, squarePower, 1e-3);
assertEquals(Instrument.MODIS, DetectInstrument.getInstrument(product));
assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(invalidPath));
assertNotNull(flagCoding);
assertTrue(expected.equalElems(startTime));
assertEquals("S3A_SL_1_RBT____20160820T201637_20160820T201937_20160820T222707_0179_007_370_4500_MAR_O_NR_001.SEN3", manifestTest.getProductName());
assertEquals(0.0, corrOzone, 1e-3);
assertEquals("Landsat Data Products (GeoTIFF)", plugin.getDescription(null));
assertNotNull(manifestElement); assertEquals("Manifest", manifestElement.getName()); assertEquals(0, manifestElement.getNumAttributes()); assertEquals(1, manifestElement.getNumElements()); assertNotNull(headerElement); assertEquals(2, headerElement.getNumElements()); assertNotNull(fixedHeaderElement); assertEquals(7, fixedHeaderElement.getNumAttributes()); assertEquals("TEST", fixedHeaderElement.getAttributeString("File_Class")); assertNotNull(validityPeriodElement); assertEquals(2, validityPeriodElement.getNumAttributes());
assertTrue(VirtualDirTgz.isTgz("test_archive.tar.gz")); assertTrue(VirtualDirTgz.isTgz("test_archive.tgz")); assertFalse(VirtualDirTgz.isTgz("test_archive.tar")); assertFalse(VirtualDirTgz.isTgz("test_archive.exe")); assertFalse(VirtualDirTgz.isTgz("test_archive"));
assertTrue(manifestFile.exists());
assertEquals(waterColor, waterColor1); assertEquals(waterColor, waterColor2); assertEquals(waterColor, waterColor3); assertEquals(firstDefaultColour, waterColor4);
assertEquals(8, SmileCorrectionUtils.getSourceBandIndex("band_08")); assertEquals(-1, SmileCorrectionUtils.getSourceBandIndex("band")); assertEquals(9, SmileCorrectionUtils.getSourceBandIndex("09band")); assertEquals(5, SmileCorrectionUtils.getSourceBandIndex("Bla05band")); assertEquals(15, SmileCorrectionUtils.getSourceBandIndex("Bla15band")); assertEquals(21, SmileCorrectionUtils.getSourceBandIndex("taur_21"));
assertEquals(3, fourierSeriesExpected.length); assertEquals(0.6321, fourierSeriesExpected[0], 1e-4);
assertEquals(-3, mph, 1e-8); assertEquals(-4, mph, 1e-8); assertEquals(-5, mph, 1e-8); assertEquals(3, mph, 1e-8); assertEquals(-2.2, mph, 1e-8); assertEquals(-0.5, mph, 1e-8); assertEquals(3.0, mph, 1e-8);
assertNotNull(file); assertEquals(inputFile.getName(), file.getName());
assertTrue(landsatMetadata instanceof LandsatLegacyMetadata);
assertArrayEquals(new double[]{2.0003046560878155, 2.0012190885976433, 2.002744691995842}, rayleighAux.getAirMass(), 1e-8);
assertEquals("YEAH!", codingKeys[0]); assertEquals("INV_TIE_POINT", codingKeys[1]);
assertEquals(0, elem.getNumElements()); assertEquals(6, elem.getNumAttributes());
assertEquals(2.42241E-02, sdr, EPS);
assertTrue(expected.equalElems(manifest.getStopTime()));
assertNotNull(plugin.getProductFileFilter());
assertEquals(4, band.getSpectralBandIndex()); assertEquals(2.f, band.getSpectralWavelength(), 1e-8); assertEquals(3.f, band.getSpectralBandwidth(), 1e-8);
assertEquals(0, pixelList1[0], 1e-5); assertEquals(10.39630, pixelList1[2], 1e-5); assertEquals(10.58545, pixelList1[4], 1e-5); assertEquals(0, pixelList2[0], 1e-5); assertEquals(0, pixelList2[1], 1e-5); assertEquals(10.22066, pixelList2[2], 1e-5);
assertEquals(17820, ceosReader.readEn(22), 1E-6);
assertTrue(product.getSceneGeoCoding() instanceof BowtiePixelGeoCoding); assertNull(targetProduct.getSceneGeoCoding()); assertNotNull(targetProduct.getSceneGeoCoding()); assertTrue(targetProduct.getSceneGeoCoding() instanceof BowtiePixelGeoCoding);
assertEquals(6, sampleMap.size()); assertEquals("chl", sampleMap.get(0)); assertEquals("mph_chl_flags", sampleMap.get(1)); assertEquals("immersed_cyanobacteria", sampleMap.get(2)); assertEquals("floating_cyanobacteria", sampleMap.get(3)); assertEquals("floating_vegetation", sampleMap.get(4)); assertEquals("mph", sampleMap.get(5));
assertEquals("corrected pressure", 988.08, correctedPressure, 0.01); assertEquals("corrected pressure", 1000, correctedPressure, 0.0001);
assertEquals(AatsrLevel1ProductReader.class, plugIn.createReaderInstance().getClass());
assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(path));
assertEquals(225.0, fuAlgo.getHue(0.0, 0.0), 1e-8); assertEquals(50.52753979724931, fuAlgo.getHue(5, 6), 1e-8); assertEquals(37.4570178393783, fuAlgo.getHue(40.1, 30.8), 1e-8);
assertEquals("theFile.txt", VirtualDirTgz.getFilenameFromPath(fullPath)); assertEquals("schnatter.txt", VirtualDirTgz.getFilenameFromPath(relativePath));
assertEquals(Sensor.MERIS_4TH, sensorType);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals(122, ceosReader.readB1());
assertFalse(ModisProductReaderPlugIn.isValidInputFile(testFile));
assertEquals(1.002, corrOzone, 1e-3); assertEquals(1.002, corrOzone, 1e-3);
assertEquals("Sentinel 3 SYN Level 2", manifestTest.getDescription());
assertEquals("probability", 0.01313, probability, 0.00001);
assertNull(fuBand.getSampleCoding()); assertNull(fuBand.getIndexCoding()); assertNotNull(fuBand.getSampleCoding()); assertNotNull(fuBand.getIndexCoding());
assertTrue(ModisFileReader.hasInvalidScaleAndOffset(new float[4], new float[2], 3));
assertEquals(oceanColor, oceanColor1); assertEquals(oceanColor, oceanColor2); assertEquals(oceanColor, oceanColor3); assertEquals(firstDefaultColour, oceanColor4);
assertTrue(landsatQA instanceof CollectionOLILandsatQA);
assertEquals(Instrument.OLCI, DetectInstrument.getInstrument(product));
assertEquals(Sensor.MERIS, sensorType);
assertEquals("Landsat 5 TM Product Reader", plugIn.getDescription(Locale.getDefault()));
assertEquals(67, fileNames.size()); assertEquals("r0400.nc", fileNames.get(0)); assertEquals("r0560.nc", fileNames.get(5)); assertEquals("r0550n.nc", fileNames.get(18)); assertEquals("r1375o.nc", fileNames.get(27)); assertEquals("flags.nc", fileNames.get(66));
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals(0, manifestElement.getAttributes().getLength()); assertEquals(1, manifestElement.getChildNodes().getLength()); assertEquals("537", manifestElement.getFirstChild().getNodeValue()); assertEquals("537", manifestElement.getTextContent());
assertArrayEquals(new Class[]{String.class, File.class}, plugin.getInputTypes());
assertEquals("e40ee529b406f33efb8f53ee5e26bcbf", checksum);
assertTrue(landsatMetadata instanceof Landsat8Metadata);
assertEquals("925 members", 925, cwRR.length); assertEquals("value 0", 0f, cwRR[0], DIFF); assertEquals("value 1", 1f, cwRR[1], DIFF); assertEquals("value 2", 2f, cwRR[2], DIFF); assertEquals("value 924", 924f, cwRR[924], DIFF);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertArrayEquals(new double[]{0.0, 0.0, 0.0}, rayleighAux.getAziDifferent(), 1e-8);
assertEquals(Instrument.MODIS500, DetectInstrument.getInstrument(product));
assertEquals(1.002, corrOzone, 1e-3);
assertEquals(2160, ISINGrid.detectRowCount(name9277)); assertEquals(4320, ISINGrid.detectRowCount(name4320)); assertEquals(2160, ISINGrid.detectRowCount(nameFoo));
assertNotNull(mosaicImage); assertEquals(50, mosaicImage.getWidth()); assertEquals(100, mosaicImage.getHeight()); assertEquals(2, mosaicImage.getModel().getLevelCount()); assertEquals(x / 10 + 1, dataL0.getSample(x, 0, 0)); assertEquals(x / 5 + 1, dataL1.getSample(x, 0, 0));
assertNotNull(ozoneHighs); assertEquals(595, ozoneHighs.size());
assertEquals("theFile.txt", VirtualDirTgz.getFilenameFromPath(fullPath)); assertEquals("schnatter.txt", VirtualDirTgz.getFilenameFromPath(relativePath));
assertEquals(iceColor, iceColor1); assertEquals(iceColor, iceColor2); assertEquals(iceColor, iceColor3); assertEquals(firstDefaultColour, iceColor4);
assertNotNull(file_1);
assertNull(landsatQA);
assertArrayEquals(new double[]{0.996}, vaporCorrection709, 1e-3);
assertNull(ModisFileReader.createRangeFromArray(new int[]{34}));
assertEquals("", description);
assertEquals("Sentinel 3 Level 1B Product", manifest.getDescription());
assertEquals(referenceGeoPos.getLat(), slstrGeoPos.getLat(), 1e-8); assertEquals(referenceGeoPos.getLon(), slstrGeoPos.getLon(), 1e-8);
assertArrayEquals(expected_f1_BT_in_DestinationOffsets[i], actual_f1_BT_in_DestinationOffsets[i]);
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals("hoppla", codingKeys[0]); assertEquals("INV_PIXEL_QUAD_TREE", codingKeys[1]);
assertEquals(560.0,wavelength,1E-6);
assertEquals(AtsrConstants.DESCRIPTION, _plugIn.getDescription(null));
assertEquals("SL_1_RBT", manifestTest.getProductType());
assertEquals(snowColor, snowColor1); assertEquals(snowColor, snowColor2); assertEquals(snowColor, snowColor3); assertEquals(firstDefaultColour, snowColor4);
assertEquals(1, PpeOp.getMedian(list), 1e-10); assertEquals(2, PpeOp.getMedian(list2), 1e-10); assertEquals(3.5, PpeOp.getMedian(list3), 1e-10);
assertTrue(landsatQA instanceof PreCollectionLandsatQA);
assertArrayEquals(expectedDestinationOffsets[i], actual_f1_BT_in_DestinationOffsets[i]);
assertEquals("Night", ModisUtils.extractValueForKey(TestCoreString, "DAYNIGHTFLAG")); assertEquals("2005-10-26T10:07:21.000Z", ModisUtils.extractValueForKey(TestCoreString, "PRODUCTIONDATETIME")); assertNull(ModisUtils.extractValueForKey(TestCoreString, "huppepup"));
assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(path));
assertEquals(0, s2SpectralBandIndex); assertEquals(9, s2SpectralBandIndex); assertEquals(8, s2SpectralBandIndex); assertEquals(12, s2SpectralBandIndex);
assertEquals(0, testValue, 1e-5); assertEquals(0, testValue2, 1e-5); assertEquals(0, testValue3, 1e-5); assertEquals(10.36252, testValue4, 1e-5); assertEquals(10.47061, testValue5, 1e-5);
assertNull(ModisFileReader.createRangeFromArray(null));
assertTrue(ModisFileReader.isEosGridType(globalAttributes)); assertFalse(ModisFileReader.isEosGridType(globalAttributes));
assertNotNull(coeffs); assertNotNull(coeffs);
assertEquals(23, volumeMetadata.getNumAttributes()); assertEquals(0, volumeMetadata.getNumElements());
assertEquals("S3_OL_1_ERR_20130621T100921_20130621T101413_00291_000001_001_EST_TEST_00", manifest.getProductName());
assertEquals(2, inputTypes.length); assertEquals(String.class, inputTypes[0]); assertEquals(File.class, inputTypes[1]);
assertEquals(0, profileManager.getProfileCount()); assertEquals(9, profileManager.getProfileCount());
assertThat(tracer).isSameAs(mockTracer);
assertThat(labels.getValue().getLabels()) .containsExactly(new com.google.cloud.trace.core.Label( "g.co/jdbc/url", "jdbc:mockdriver"));
assertThat(conn).isNotNull();
assertThat(conn).isNotNull();
assertThat(driver.acceptsURL("jdbc:stackdriver:")).isTrue();
assertThat(driver.getMinorVersion()).isEqualTo(0);
assertThat(driver.jdbcCompliant()).isFalse();
assertThat(method.getName()).isEqualTo("vendorSpecificMethod"); assertThat(proxy instanceof VendorSpecificPreparedStatement).isTrue();
assertThat(tracer.endSpanEvents).hasSize(1); assertThat(endEvent.getTraceContext()).isEqualTo(traceContext); assertThat(tracer.annotateEvents).hasSize(1); assertThat(annotateEvent.getLabels().getLabels()).containsAllOf( new Label("/response/size", "123"), new Label("/http/status_code", "200") ); assertThat(annotateEvent.getTraceContext()).isEqualTo(traceContext);
assertThat(tracer.startSpanEvents).hasSize(0); assertThat(tracer.endSpanEvents).hasSize(0); assertThat(tracer.annotateEvents).hasSize(0);
assertThat(actualException).isSameAs(expectedException);
assertThat(actualException).isSameAs(expectedException);
assertThat(driver.getMajorVersion()).isEqualTo(1);
assertThat(tracer.endSpanEvents).hasSize(1); assertThat(endSpanEvent.getTraceContext()).isEqualTo(startEvent.getTraceContext()); assertThat(endSpanEvent.getEndSpanOptions()).isNull(); assertThat(tracer.annotateEvents).hasSize(1); assertThat(annotateEvent.getTraceContext()).isEqualTo(endSpanEvent.getTraceContext()); assertThat(annotateEvent.getLabels().getLabels()).contains( new Label("/mongodb/status", "SUCCESS") );
assertThat(actualException).isSameAs(expectedException);
assertThat(conn).isNotNull();
assertThat(traceContext).isEqualTo(testContext); assertThat(response.getHeader("Content-Length")).isEqualTo("123"); assertThat(response.getStatus()).isEqualTo(200);
assertThat(context.getAttribute("TRACE-CONTEXT")).isEqualTo(testContext); assertThat(request.getMethod()).isEqualTo("GET"); assertThat(request.getProtocol()).isEqualTo("HTTP");
assertThat(o instanceof Statement).isTrue();
assertThat(driver.getPropertyInfo("jdbc:stackdriver:mockdriver", info)) .isSameAs(driverPropertyInfos);
assertTrue("Unexpected exception message: " + exp.getMessage(), exp.getMessage().contains("NoSuchObjectException while fetching table")); assertTrue(newTable != null); assertTrue(newTable.getTableName().equals(newName));
assertEquals("MessageBus topic-name doesn\'t match!", messageBusTopicName, client.getMessageBusTopicName(dbName, tableName)); assertTrue("Unexpected exception:" + exception.getMessage(), false);
assertArrayEquals(newSchema.toArray(), client.getTable(dbName, tableName).getCols().toArray()); assertTrue("Unexpected exception: " + exception.getMessage(), false);
assertTrue(tables.size() == 2);
assertEquals(4, resultEnvs.size()); assertEquals("/etc/passwd:/etc/passwd:ro,/etc/group:/etc/group:ro,/etc/krb5.conf:/etc/krb5.conf:ro", resultEnvs.get(EnvironmentUtilities.ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME)); assertEquals("1:33", resultEnvs.get("a")); assertEquals("2", resultEnvs.get("b")); assertEquals("44", resultEnvs.get("c"));
assertEquals(true, tables.contains("testtable"));
assertEquals(1, resultEnvs.size());
assertEquals(2, files.size()); assertEquals(TypeEnum.STATIC, configFile1.getType()); assertEquals("testFileDest1", configFile1.getDestFile()); assertEquals(FILE_SCHEME + expectedTestFile1.getAbsolutePath(), configFile1.getSrcFile()); assertEquals(TypeEnum.STATIC, configFile2.getType()); assertEquals("testFileDest2", configFile2.getDestFile()); assertEquals(FILE_SCHEME + expectedTestFile2.getAbsolutePath(), configFile2.getSrcFile());
assertEquals("/tmp/localFile", resultFile);
assertEquals("", EnvironmentUtilities.getValueOfEnvironment(""));
assertEquals(0L, (long) component.getNumberOfContainers());
assertEquals(sysDeptSelects.get(0).getChildren().get(0).getChildren().get(0).getDisabled(), Boolean.TRUE);
assertEquals(true, databases.contains("testdb"));
assertEquals(response.getStatus(), Response.Status.OK.getStatusCode()); assertTrue(((String) response.getEntity()).contains("\\"result\\":1"));
assertEquals(1, submarineMetaStore.getDatabaseCount());
assertEquals(experimentTemplateSpec.getName(), experimentTemplate.getExperimentTemplateSpec().getName());
assertEquals(response.getAttributes().size(), 0); assertEquals(response.getResult().getTotal(), 5);
assertEquals(1L, (long) component.getNumberOfContainers());
assertEquals("", EnvironmentUtilities.getValueOfEnvironment("a="));
assertTrue(ret); assertEquals(teamMemberList.size(), 1); assertEquals(member.getTeamName(), teamMember.getTeamName()); assertEquals(member.getTeamId(), teamMember.getTeamId()); assertEquals(member.getCreateBy(), teamMember.getCreateBy()); assertEquals(member.getMember(), teamMember.getMember()); assertEquals(member.getInviter(), teamMember.getInviter());
assertTrue(ret); assertTrue(deleteRet); assertEquals(projectList.size(), 0); assertEquals(projectFilesList.size(), 0);
assertEquals("", EnvironmentUtilities.getValueOfEnvironment(null));
assertEquals(InterpreterResult.Code.SUCCESS, ret.code()); assertEquals(11, ret.message().get(0).getData().split("\\n").length); assertTrue(ret.message().get(1).getData().contains("alert-warning")); assertEquals(InterpreterResult.Code.SUCCESS, ret.code()); assertEquals(6, ret.message().get(0).getData().split("\\n").length);
assertEquals(response.getStatus(), Response.Status.OK.getStatusCode()); assertTrue(((String) response.getEntity()).contains("testdb"));
assertEquals("", EnvironmentUtilities.getValueOfEnvironment("="));
assertEquals(addr1, result.get(0)); assertEquals(addr2, result.get(1));
assertTrue(response2.getSuccess()); assertTrue(deptTree.getDeleted() == 1);
assertNotNull(result); assertEquals(expectedKeytabFilePath, result.getKeytab()); assertEquals("principal", result.getPrincipalName());
assertEquals("testdb", database.getName());
assertEquals(1, resultEnvs.size()); assertEquals("/etc/passwd:/etc/passwd:ro,/etc/group:/etc/group:ro,/etc/krb5.conf:/etc/krb5.conf:ro", resultEnvs.get(EnvironmentUtilities.ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME));
assertEquals("foo", environment.getEnvironmentSpec().getName()); assertEquals(kernelName, environment.getEnvironmentSpec().getKernelSpec().getName()); assertEquals(kernelChannels, environment.getEnvironmentSpec().getKernelSpec().getChannels()); assertEquals(kernelDependencies, environment.getEnvironmentSpec().getKernelSpec().getDependencies()); assertEquals("continuumio/miniconda", environment.getEnvironmentSpec().getDockerImage());
assertEquals(1, Lists.newArrayList(iterable).size()); assertEquals(1, pullResult.getFetchResult().getTrackingRefUpdates().size());
assertEquals(response.getStatus(), Response.Status.OK.getStatusCode()); assertTrue(((String) response.getEntity()).contains("testdb"));
assertTrue(((String) response.getEntity()).contains("\\"result\\":1"));
assertEquals((int) dict.getDeleted(), 1); assertEquals((int) dict.getDeleted(), 0);
assertNull(resultFile);
assertEquals(1, resultEnvs.size());
assertEquals(dummyId, result.getExperimentId());
assertEquals(testCommons.role.getComponentName(), component.getName()); assertEquals(1L, (long) component.getNumberOfContainers()); assertEquals(RestartPolicyEnum.NEVER, component.getRestartPolicy()); assertEquals( new Artifact().type(Artifact.TypeEnum.DOCKER).id("testTBDockerImage"), component.getArtifact());
assertNotNull("Service must not be null!", service); assertEquals("Number of components is not correct!", 1, components.size()); assertEquals(1L, (long) component.getNumberOfContainers()); assertEquals("./run-PRIMARY_WORKER.sh", component.getLaunchCommand());
assertEquals(dummyId, result.get(0).getExperimentId());
assertEquals(3, resultEnvs.size()); assertEquals("/etc/passwd:/etc/passwd:ro,/etc/group:/etc/group:ro,/etc/krb5.conf:/etc/krb5.conf:ro", resultEnvs.get(EnvironmentUtilities.ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME)); assertEquals("1:33:44", resultEnvs.get("a")); assertEquals("2", resultEnvs.get("b"));
assertTrue(ret); assertEquals(sysUser.getRealName(), user.getRealName()); assertEquals(sysUser.getUserName(), user.getUserName()); assertEquals(sysUser.getId(), user.getId());
assertEquals(1, experimentTemplates.length); assertEquals(experimentTemplateSpec.getName(), experimentTemplate.getExperimentTemplateSpec().getName());
assertEquals(response.getStatus(), Response.Status.OK.getStatusCode()); assertTrue(((String) response.getEntity()).contains("testtable"));
assertEquals(sizeDeptTreeList, 5);
assertEquals((int) item.getDeleted(), 1); assertEquals((int) item.getDeleted(), 0);
assertNotNull("Service must not be null!", service); assertEquals("Number of components is not correct!", 1, components.size()); assertEquals(1L, (long) component.getNumberOfContainers()); assertEquals("./run-PRIMARY_WORKER.sh", component.getLaunchCommand());
assertEquals(1L, (long) component.getNumberOfContainers());
assertEquals(2L, (long) component.getNumberOfContainers());
assertNotNull(result);
assertTrue(ret); assertTrue(deleteRet);
assertTrue(result); assertTrue(editResult);
assertEquals(expectedFile.getAbsolutePath(), path.toString()); assertEquals(1, uploadedFiles.size()); assertEquals(path, storedPath);
assertNotNull(resultFile); assertEquals(testFile.getAbsolutePath(), resultFile.getAbsolutePath());
assertNull(result);
assertEquals(1L, (long) component.getNumberOfContainers());
assertTrue(response2.getSuccess()); assertEquals(deptTree.getParentCode(), null);
assertEquals("bbb", EnvironmentUtilities.getValueOfEnvironment("a=bbb"));
assertNotNull(resultFile); assertEquals(testFile.getAbsolutePath(), resultFile.getAbsolutePath());
assertEquals(1, tableCount);
assertEquals(12, serviceResource.getCpus().intValue()); assertEquals(4096, (int) Integer.valueOf(serviceResource.getMemory())); assertEquals(3, additionalResources.size()); assertEquals("G", customResourceRI.getUnit()); assertEquals(20L, (long) customResourceRI.getValue());
assertTrue(ret); assertTrue(deleteRet); assertEquals(teamList.size(), 0); assertEquals(teamMemberList.size(), 0);
assertTrue(response2.getSuccess()); assertTrue(deptTree.getDeleted() == 1);
assertEquals(2, environments.length); assertEquals("foo", environment.getEnvironmentSpec().getName()); assertEquals(kernelName, environment.getEnvironmentSpec().getKernelSpec().getName()); assertEquals(kernelChannels, environment.getEnvironmentSpec().getKernelSpec().getChannels()); assertEquals(kernelDependencies, environment.getEnvironmentSpec().getKernelSpec().getDependencies()); assertEquals("continuumio/miniconda", environment.getEnvironmentSpec().getDockerImage());
assertEquals(1, resultEnvs.size());
assertNull(result);
assertTrue(result); assertTrue(editResult);
assertEquals("localFile", resultFile);
assertNull(result);
assertEquals(expectedLName, voter.getLastName());
assertEquals(valid_id_doc_num, valid.getPrettyData().getDocumentNumber()); assertEquals(valid_id_data_of_birth, valid.getPrettyData().getDateOfBirth()); assertEquals(valid_id_expiry_data, valid.getPrettyData().getExpiryDate()); assertTrue(valid.getPrettyData().isValid());
assertFalse(e1.equals(e2));
assertFalse(invalid.valid());
assertFalse(invalid.valid());
assertFalse(invalid.valid());
assertEquals(valid_pass_doc_num, data.getDocumentNumber()); assertEquals(valid_pass_data_of_birth, data.getDateOfBirth()); assertEquals(valid_pass_expiry_data, data.getExpiryDate()); assertTrue(data.isValid());
assertEquals(expectedLName, voter.getLastName());
assertTrue(valid.valid());
assertTrue(valid.valid());
assertFalse(e1.equals(e2));
assertTrue(e1.equals(e2));
assertTrue(e1.equals(e2));
assertFalse(invalid.valid());
assertNull(cache.get(1));
assertEquals(writer.buffer[0], '\\r'); assertEquals(writer.buffer[1], '\\n');
assertTrue(CacheBuilder.redisCache() instanceof RedisCacheBuilder);
assertTrue(cache.contains("a"));
assertEquals(object2, actualObjects.get(0));
assertEquals(size, actualSize);
assertEquals(objects, actualObjects);
assertTrue(cache instanceof SearchableCache); assertTrue(cache instanceof VersionedOffHeapCache);
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(cache.get("a"), null);
assertEquals(etCriteria, query.getCriteria()); assertEquals(ltFilter, query.getFilter());
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(theByte, actualByte);
assertTrue(CacheBuilder.heapCache() instanceof HeapCacheBuilder);
assertEquals(1, cache.get(1));
assertEquals(value, actualValue);
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(comparable, actualObjects.get(0));
assertEquals(comparable, actualObjects.get(0));
assertEquals(value, actualValue);
assertEquals(cache, cacheManager.getCache(cacheName).getNativeCache());
assertFalse(connection.isConnected());
assertEquals(-10, actualInt);
assertEquals(object1, actualObjects.get(0));
assertEquals(10, actualInt);
assertEquals(null, cache.get(key));
assertEquals(cache.get("c"), "d");
assertEquals(1, bufferStore.availableBuffers.size());
assertEquals(comparable, actualObjects.get(0)); assertEquals(comparable, actualObjects.get(1));
assertEquals(result, actualResult);
assertEquals(value, actualValue);
assertFalse(connection.isConnected());
assertEquals(object, actualObjects.get(0));
assertEquals(cache.get("a"), null);
assertEquals(result, actualResult);
assertEquals(status, actualStatus);
assertTrue(list.contains(value));
assertEquals(cache.size(), 3);
assertArrayEquals(bytes, actualBytes);
assertEquals(value, cache.get(key)); assertTrue(cache instanceof OffHeapCache);
assertTrue(cache.contains(key));
assertEquals(value, actualObjects.get(0));
assertEquals(value, actualValue);
assertEquals(cache.size(), 3);
assertTrue(cache instanceof SearchableCache); assertTrue(cache instanceof HeapCache);
assertEquals(result, actualResult);
assertEquals(cache.size(), 0);
assertEquals(new SimpleValueWrapper(1).get(), imcache.get(1).get());
assertEquals(new SimpleItem<>(0, value), cache.get(key));
assertEquals(size, actualSize);
assertArrayEquals(bytes, actualBytes);
assertEquals(1, cacheManager.getCacheNames().size()); assertTrue(cacheManager.getCacheNames().contains(cacheName));
assertEquals(result, actualResult);
assertEquals(comparable, actualObjects.get(0)); assertEquals(comparable, actualObjects.get(1));
assertNotNull(connection.getStreamReader()); assertNotNull(connection.getStreamWriter()); assertEquals(connection.getHost(), Connection.DEFAULT_HOST); assertEquals(connection.getPort(), Connection.DEFAULT_PORT); assertEquals(connection.getSocketTimeout(), Connection.DEFAULT_SOCKET_TIMEOUT); assertEquals(connection.getTimeout(), Connection.DEFAULT_TIMEOUT);
assertEquals(size, actualSize);
assertEquals(10, item.getValue().intValue()); assertEquals(0, item.getVersion()); assertEquals(2, item2.getVersion()); assertEquals(10, item2.getValue().intValue()); assertEquals(item2.getVersion() + 1, item2.update(3).getVersion()); assertFalse(item2.equals(item2.update(4)));
assertEquals(10, actualValue);
assertEquals(cache.get("c"), "d");
assertEquals(result, actualResult);
assertEquals(object2, actualObjects.get(0));
assertEquals(size, cache.size()); assertEquals(0, cache.size());
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(criteria, criterias[0]);
assertTrue(cache.stats() != null);
assertEquals(firstClient, redisClient.getClient());
assertEquals(value, actualValue);
assertEquals(object1, actualObjects.get(0));
assertArrayEquals(null, reader.read(-1));
assertTrue(cache instanceof RedisCache);
assertTrue(actualObjects.contains(object1)); assertTrue(actualObjects.contains(object2)); assertTrue(actualObjects.contains(object3));
assertEquals(value, actualValue);
assertEquals(new Integer(1), cacheEntry.getKey()); assertEquals(new Integer(2), cacheEntry.getValue());
assertEquals(size, actualSize);
assertTrue(cache.contains("a"));
assertTrue(cache instanceof SearchableCache); assertTrue(cache instanceof OffHeapCache);
assertTrue(cache.contains(key));
assertEquals(writer.position, 0);
assertEquals(value, actualValue);
assertEquals(0, cache.size());
assertEquals(criteria, criterias[0]);
assertEquals(cache.getName(), imcache.getName());
assertTrue(actualObjects.contains(object1)); assertTrue(actualObjects.contains(object2)); assertTrue(actualObjects.contains(object3));
assertEquals(comparable, actualObjects.get(0));
assertEquals(comparable, actualObjects.get(0));
assertTrue(CacheBuilder.versionedOffHeapCache() instanceof VersionedOffHeapCacheBuilder);
assertTrue(list.contains(value));
assertEquals(value, actualObjects.get(0));
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(size, actualSize);
assertEquals(null, imcache.get(null));
assertEquals(expectedBytes, actualBytes);
assertTrue(null == imcache.get(null, Integer.class));
assertTrue(filteredItems.contains(item));
assertEquals(result, actualResult);
assertArrayEquals(expectedBytes, actualBytes);
assertEquals(value, actualValue);
assertEquals(cache, imcache.getNativeCache());
assertEquals(cacheTask, tasksHolder.tasks.get(0));
assertEquals(size, actualSize);
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("bar")); assertThat(el.toString(), is(equalTo("div, after span")));
assertThat(div, CustomMatchers.isSelectedIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: div is selected\\n but: div is not selected")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("not-foo")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("any element, inside document, and has non of the classes [bar, foo]")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("I\'m here")); assertThat(getElementName(nodes.item(0)), equalTo("div"));
assertThat(nodes.getLength(), is(2)); assertThat(getElementName(nodes.item(0)), equalTo("html")); assertThat(getCssClass(nodes.item(1)), equalTo("abc")); assertThat(el.toString(), is(equalTo("any element, that has no the text \\"a\\"")));
assertThat(InBrowserSinglton.isSelected(BasicPath.div), is(equalTo(true))); assertThat(InBrowserSinglton.isSelected(BasicPath.div), is(equalTo(false)));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(el.toString(), is(equalTo("any element, inside document, and has children: [div, span]")));
assertThat(nodes.getLength(), is(4)); assertThat(el.toString(), is(equalTo("any element, that is before sibling: (span, that has class abc)")));
assertThat(InBrowserSinglton.find(BasicPath.div), is(equalTo(webElement)));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("any element, inside (document, that has some children), and has child: div")));
assertThat(nodes.getLength(), is(3)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(getCssClass(nodes.item(2)), equalTo("b")); assertThat(el.toString(), is(equalTo("any element, that is child of: div")));
assertThat(nodes.getLength(), is(3)); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(getElementName(nodes.item(1)), equalTo("div")); assertThat(getElementName(nodes.item(2)), equalTo("span")); assertThat(el.toString(), is(equalTo("div or span, that has at most 3 children")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("abc")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has foo: \\"bar\\"")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), is("a")); assertThat(getCssClass(nodes.item(1)), is("d")); assertThat(el.toString(), is(equalTo("div, that has name: \\"abc\\"")));
assertThat(nodes.getLength(), equalTo(3)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("b")); assertThat(getCssClass(nodes.item(2)), equalTo("c")); assertThat(el.toString(), equalTo( "any element, with aggregated text that starts with \\"aB\\""));
assertThat(nodes.getLength(), is(2)); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(getText(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("b")); assertThat(el.toString(), is(equalTo("any element, that has sibling: (div, that has class a)")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("a.b")); assertThat(el.toString(), is(equalTo("any element, that is before 2 occurrences of: div")));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("a")); assertThat(getText(nodes.item(1)), equalTo("a.a")); assertThat(el.toString(), is(equalTo("any element, that is before 2 siblings of type: div")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("div, ancestor of div, that has class a.a")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("ab")); assertThat(el.toString(), is(equalTo("div, that has the text \\"AB\\"")));
assertThat(browser, CustomMatchers.hasElements(div).present(2).times());
assertThat(nodes.getLength(), equalTo(3)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("b")); assertThat(getCssClass(nodes.item(2)), equalTo("c")); assertThat(el.toString(), is(equalTo("any element, with aggregated text that ends with \\"aB\\"")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("any element, inside document, and has child: div")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("b")); assertThat(el.toString(), is(equalTo("any element, that is after sibling: (div, that has class a)")));
assertThat(InBrowserSinglton.numberOfAppearances(BasicPath.div), is(2));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesOrLessIn(browser));
assertThat(nodes.getLength(), is(3)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(getCssClass(nodes.item(2)), equalTo("b")); assertThat(el.toString(), is(equalTo("any element, that is child of: div")));
assertThat(nodes.getLength(), equalTo(1)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(el.toString(), equalTo("occurrence number 2 of div"));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo(" foo not")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has classes [not, foo]")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("div, that has descendant: (div, that has class a.a)")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(el.toString(), is(equalTo("div, that has ancestor: (div, that has class container)")));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesOrLessIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains (span, inside div) at most 5 times\\n but: (span, inside div) appears 1 time")));
assertThat(InBrowserSinglton.isDisplayed(BasicPath.div), is(equalTo(true))); assertThat(InBrowserSinglton.isDisplayed(BasicPath.div), is(equalTo(false)));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("a b")); assertThat(el.toString(), is(equalTo("div, that has classes [a, b]")));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains (span, inside div) 5 times\\n but: (span, inside div) appears 1 time")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), is("c")); assertThat(el.toString(), is(equalTo("div, (has text containing \\"x\\" and is in place 2 among its siblings)")));
assertThat(browser, CustomMatchers.hasNoElement(div)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page does not contain div\\n but: div is present")));
assertThat(path.toString(), is(equalTo("xpath: \\"Johhny\\"")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("a.b")); assertThat(el.toString(), is(equalTo("any element, that is after 2 occurrences of: div")));
assertThat(InBrowserFinder.find(driverMock, path), is(webElement2));
assertThat(nodes.getLength(), is(4)); assertThat(getCssClass(nodes.item(0)), equalTo("b")); assertThat(getText(nodes.item(1)), equalTo("a.b")); assertThat(getText(nodes.item(2)), equalTo("a.c")); assertThat(getText(nodes.item(3)), equalTo("c")); assertThat(el.toString(), is(equalTo("div, that is before at most 2 occurrences of: (div, that has some text)")));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("ab")); assertThat(getText(nodes.item(1)), equalTo("xabc")); assertThat(el.toString(), is(equalTo("div, that has text containing \\"AB\\"")));
assertThat(nodes.getLength(), is(4)); assertThat(getText(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("b")); assertThat(getText(nodes.item(2)), equalTo("a.a")); assertThat(getText(nodes.item(3)), equalTo("a.b")); assertThat(el.toString(), is(equalTo("div, that is after at most 2 occurrences of: (div, that has some text)")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0).getFirstChild()), equalTo("ab")); assertThat(el.toString(), is(equalTo("div, with aggregated text \\"abCD\\"")));
assertThat(nodes.getLength(), is(3)); assertThat(getText(nodes.item(0)), equalTo("a.b")); assertThat(getText(nodes.item(1)), equalTo("a.c")); assertThat(getText(nodes.item(2)), equalTo("c")); assertThat(el.toString(), is(equalTo("any element, that is after at least 2 occurrences of: div")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0).getFirstChild()), equalTo("zx ")); assertThat(el.toString(), is(equalTo("div, with aggregated text containing \\"x Y\\"")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("abc")); assertThat(getElementName(nodes.item(0)), equalTo("span")); assertThat(el.toString(), is(equalTo("any element, that has the text \\"abc\\"")));
assertThat(browser, CustomMatchers.hasElements(div).present(5).timesOrLess()); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains at most div 5 times\\n but: div appears 2 times")));
assertThat(InBrowserSinglton.isEnabled(BasicPath.div), is(equalTo(true))); assertThat(InBrowserSinglton.isEnabled(BasicPath.div), is(equalTo(false)));
assertThat(span, CustomMatchers.isPresent(0).timesIn(browser));
assertThat(nodes.getLength(), equalTo(2)); assertThat(getCssClass(nodes.item(0)), equalTo("a x")); assertThat(getCssClass(nodes.item(1)), equalTo("a y")); assertThat(el.toString(), equalTo("child number 1 of type(span, that has class a)"));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(el.toString(), is(equalTo("div, that has ancestor: (div, that has class container)")));
assertThat(nodes.getLength(), is(3)); assertThat(getText(nodes.item(0)), equalTo("c")); assertThat(getText(nodes.item(1)), equalTo("d")); assertThat(getCssClass(nodes.item(2)), equalTo("abc")); assertThat(el.toString(), is(equalTo("any element, that is after: (div, that has class container)")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("xyz")); assertThat(el.toString(), is(equalTo("span, that is after: div")));
assertThat(nodes.getLength(), is(2)); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(getElementName(nodes.item(1)), equalTo("span")); assertThat(el.toString(), is(equalTo("div or span, that has at least 1 children")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo(" foo not")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(getCssClass(nodes.item(1)), equalTo(" foo")); assertThat(getElementName(nodes.item(1)), equalTo("span")); assertThat(el.toString(), is(equalTo("any element, that has at least one of the classes [bar, foo]")));
assertThat(browser, CustomMatchers.hasElements(div).present(5).times()); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains div 5 times\\n but: div appears 2 times")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(el.toString(), is(equalTo("div, that has ancestor: (div, that has class container)")));
assertThat(browser, CustomMatchers.hasElements(div).present(5).timesOrMore()); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains at least div 5 times\\n but: div appears 2 times")));
assertThat(nodes.getLength(), is(1)); assertThat(getElementName(nodes.item(0)), equalTo("p")); assertThat(getText(nodes.item(0)), equalTo("123")); assertThat(el.toString(), is(equalTo("any element, that has siblings: [(div, that has class a), (div, that has the text \\"a\\"), span]")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("div, that has descendant: (div, that has class a.a)")));
assertThat(nodes.getLength(), is(3)); assertThat(getText(nodes.item(0)), equalTo("3")); assertThat(getText(nodes.item(1)), equalTo("4")); assertThat(getText(nodes.item(2)), equalTo("5")); assertThat(el.toString(), is(equalTo("list item, with index from 2 to 4")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("ABC")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has the text \\"abc\\"")));
assertThat(InBrowserFinder.findAll(driverMock, path), is(equalTo(expected)));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("abc")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has Id \\"bar\\"")));
assertThat(xpath, is(equalTo("span[string(.)=\'x\'][count(preceding-sibling::*)=0 and count(following-sibling::*)=0]"))); assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), is("c")); assertThat(el.toString(), is(equalTo("span, that is awesome, and is only child")));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("x yz")); assertThat(getText(nodes.item(1).getFirstChild()), equalTo("zx ")); assertThat(el.toString(), is(equalTo("div, with aggregated text containing \\"X Y\\"")));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("aBcd")); assertThat(getText(nodes.item(1).getFirstChild()), equalTo("ab")); assertThat(el.toString(), is(equalTo("div, with aggregated text \\"ABCD\\"")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("aabCD")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has text containing \\"abC\\"")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("a.a")); assertThat(el.toString(), is(equalTo("div, that has ancestor: (div, that has class container)")));
assertThat(InBrowserSinglton.findAll(BasicPath.div), is(equalTo(Arrays.asList(webElement, webElement))));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("abcd")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has text that starts with \\"abc\\"")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(el.toString(), is(equalTo("div, that has descendants: [(div, that has class a.a), (div, that has class a)]")));
assertThat(browser, CustomMatchers.hasElements(div).present(2).timesOrLess());
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("xyz")); assertThat(getCssClass(nodes.item(0)), equalTo("a dfdsf")); assertThat(el.toString(), is(equalTo("div, that has class a, and has the text \\"xyz\\"")));
assertThat(nodes.getLength(), is(0)); assertThat(el.toString(), is(equalTo("any element, that [has class a.a, has some children]")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("abcd")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has text containing \\"abC\\"")));
assertThat(path.toString(), startsWith("under reference element Mock for WebElement")); assertThat(path.toString(), endsWith("xpath: \\"Johhny\\""));
assertThat(nodes.getLength(), is(7)); assertThat(el.toString(), is(equalTo("any element, that is before: (span, that has class abc)")));
assertThat(nodes.getLength(), is(4)); assertThat(getText(nodes.item(0)), equalTo("a")); assertThat(getCssClass(nodes.item(1)), equalTo("b")); assertThat(getText(nodes.item(2)), equalTo("a.a")); assertThat(getText(nodes.item(3)), equalTo("a.b")); assertThat(el.toString(), is(equalTo("any element, that is before at least 1 siblings of type: div")));
assertThat(nodes.getLength(), equalTo(1)); assertThat(getElementName(nodes.item(0)), equalTo("span")); assertThat(getText(nodes.item(0)), equalTo("def"));
assertThat(nodes.getLength(), is(4)); assertThat(getCssClass(nodes.item(0)), equalTo("b")); assertThat(getText(nodes.item(1)), equalTo("a.b")); assertThat(getText(nodes.item(2)), equalTo("a.c")); assertThat(getText(nodes.item(3)), equalTo("c")); assertThat(el.toString(), is(equalTo("any element, that is after at least 1 siblings of type: div")));
assertThat(div, CustomMatchers.isEnabledIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: div is enabled\\n but: div is not enabled")));
assertThat(div, CustomMatchers.isDisplayedIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: div is displayed\\n but: div is not displayed")));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesOrMoreIn(browser));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("\'abcd")); assertThat(getElementName(nodes.item(0)), equalTo("div"));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("a.c")); assertThat(getText(nodes.item(1)), equalTo("c")); assertThat(el.toString(), is(equalTo("any element, that is after 2 siblings of type: div")));
assertThat(nodes.getLength(), is(1)); assertThat(getElementName(nodes.item(0)), equalTo("span")); assertThat(el.toString(), is(equalTo("any element, that has 2 children")));
assertThat(div, CustomMatchers.isPresent().in(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains div\\n but: div is absent")));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), is("c")); assertThat(el.toString(), is(equalTo("span, (has text containing \\"x\\" and is only child)")));
assertThat(nodes.getLength(), is(3)); assertThat(getText(nodes.item(0)), equalTo("a")); assertThat(getText(nodes.item(1)), equalTo("a.a")); assertThat(getText(nodes.item(2)), equalTo("a.b")); assertThat(el.toString(), is(equalTo("any element, that is before at least 2 occurrences of: div")));
assertThat(browser, CustomMatchers.hasElement(div)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains div\\n but: div is absent")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("div, ancestor of div, that has class a.a")));
assertThat(nodes.getLength(), is(2)); assertThat(getCssClass(nodes.item(0)), equalTo("container")); assertThat(getCssClass(nodes.item(1)), equalTo("a")); assertThat(el.toString(), is(equalTo("any element, inside document, and has child: div")));
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("foo")); assertThat(getText(nodes.item(1)), equalTo("boo")); assertThat(el.toString(), is(equalTo("div, that is before: span")));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("xxABC")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has text that ends with \\"abc\\"")));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesOrMoreIn(browser)); assertThat(e.getMessage(), is(equalTo("\\nExpected: browser page contains (span, inside div) at least 5 times\\n but: (span, inside div) appears 1 time")));
assertThat(browser, CustomMatchers.hasElements(div).present(2).timesOrMore());
assertThat(nodes.getLength(), is(2)); assertThat(getText(nodes.item(0)), equalTo("1")); assertThat(getText(nodes.item(1)), equalTo("2"));
assertThat(nodes.getLength(), is(1)); assertThat(getCssClass(nodes.item(0)), equalTo(" foo ")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, that has class foo")));
assertThat(span.inside(div), CustomMatchers.isPresent(5).timesIn(browser));
assertThat(InBrowserSinglton.isPresent(BasicPath.div), is(equalTo(true)));
assertThat(el.getXPath().get(), equalTo("a[preceding-sibling::span[parent::div][ancestor::li]]")); assertThat(nodes.getLength(), equalTo(1)); assertThat(getElementName(nodes.item(0)), equalTo("a")); assertThat(getText(nodes.item(0)), equalTo("abc"));
assertThat(nodes.getLength(), is(1)); assertThat(getText(nodes.item(0)), equalTo("b")); assertThat(getElementName(nodes.item(0)), equalTo("div")); assertThat(el.toString(), is(equalTo("div, with index 1")));
assertEquals(errors.size(), 1);
assertEquals(new SshjClient(null, null, null) .getCommandsFromScript("classpath:ssh-client/classpath-test-ssh.txt"), Arrays.asList("ping -c google.com", "echo hello"));
assertEquals(ex.getSubExceptions().size(), 3);
assertEquals(ex.getSubExceptions().size(), 2);
assertEquals(errors.size(), 1);
assertEquals(cause.getSubExceptions().size(), 3);
assertNotNull(credentials); assertNotNull(credentials.getPassword()); assertNotNull(credentials.getUserName()); assertFalse(credentials.getPassword().isEmpty()); assertFalse(credentials.getUserName().isEmpty());
assertEquals(ex.getSubExceptions().size(), 3);
assertFalse(manageSv.exists(ccsOperationParam));
assertEquals(1, children.size());
assertTrue(manageSv.exists(ccsOperationParam)); assertEquals("modify Value1", manageSv.get(ccsOperationParam));
assertEquals("23", processer.getIdFromHref(TESTHREF));
assertEquals(2, results.length); assertEquals("d32019d3-bc6e-4319-9c1d-6722fc136a22", results[0]); assertEquals("ACTIVE", results[1]); assertTrue(true);
assertEquals("3f9f7d18-aaf3-4703-b368-ea9b4d609c95", results.getHref()); assertEquals("new-server-test", results.getName()); assertEquals(ComputeState.ACTIVE, results.getState()); assertEquals("1", results.getInstanceType()); assertTrue(true);
assertEquals(LOWERCASEXML, processer.tags2LowerCase(UPPERCASEXML));
assertEquals(1, results.size()); assertEquals("a26887c6-c47b-4654-abb5-dfadf7d3f803", results.get(0).getNetwork().getHref()); assertEquals("fa:16:3e:7d:31:9a", results.get(0).getMac()); assertTrue(true);
assertEquals(20, results.getCpu()); assertEquals(51200, results.getMemory()); assertEquals(10, results.getNumVms()); assertTrue(true);
assertEquals(UPPERCASEXML, processer.tags2UpperCase(LOWERCASEXML));
assertEquals(SAVEASXML, processer.getSaveAsPayload(UPPERCASEXML));
assertEquals(10000, results); assertTrue(true);
assertEquals("1bea47ed-f6a9-463b-b423-14b9cca9ad27", results.getHref()); assertEquals("cirros-0.3.2-x86_64-disk", results.getName()); assertEquals("13167616", results.getSize()); assertEquals(StorageType.OS, results.getType()); assertTrue(true);
assertEquals(1, results.getCpu()); assertEquals("1", results.getHref()); assertEquals(512, results.getMemory()); assertEquals("m1.tiny", results.getName()); assertTrue(true);
assertEquals(1, results.getCompute().size()); assertEquals("b626796d-d585-4874-b178-78c65289bba4", results.getCompute().get(0).getHref()); assertEquals("new-server-test", results.getCompute().get(0).getName()); assertTrue(true);
assertEquals("This is yet, another volume.", results.getDescription()); assertEquals("5aa119a8-d25b-45a7-8d1b-88e127885635", results.getHref()); assertEquals("vol-003", results.getName()); assertEquals("1", results.getSize()); assertEquals(StorageType.DATABLOCK, results.getType()); assertTrue(true);
assertEquals(1, games.size()); assertEquals(180, game.size()); assertEquals(coords.at("R16"), (short) game.get(0)); assertEquals(coords.at("N11"), (short) game.get(179));
assertEquals(0.55f, shapeTable.getWinRate(hash), 0.01); assertEquals((1.0 + (BIAS * 0.5)) / (2.0 + BIAS), node.getWinRate(coords.at("a1")), 0.01); assertEquals((1.0 + (BIAS * 0.55)) / (2.0 + BIAS), node.getWinRate(p), 0.01);
assertFalse(vector.get(i)); assertTrue(vector.get(i)); assertFalse(vector.get(i));
assertEquals(at("c4"), observer.get(0)); assertEquals(at("e1"), observer.get(1)); assertEquals(at("b2"), observer.get(2));
assertTrue(node.isFresh(coords));
assertTrue(counts[at("b3")] > 250); assertTrue(counts[at("c1")] > 250); assertTrue(counts[at("e5")] > 250);
assertEquals(4, scorer.score(), 0.01);
assertNull(table.findIfPresent(1L)); assertEquals(n, table.findIfPresent(1L));
assertEquals(5, pool.size()); assertFalse(pool.isEmpty()); assertNotSame(node, previous); assertNotNull(node); assertTrue(pool.isEmpty()); assertNull(pool.allocate());
assertEquals("Total runs: 60\\n", updater.toString(5));
assertFalse(board.isLegal(at("c5"))); assertTrue(board.isLegal(PASS)); assertTrue(board.isLegal(at("c4"))); assertEquals(asOneString(before), board.toString()); assertEquals(BLACK, board.getColorToPlay());
assertEquals(NO_POINT, suggester.getMoves().get(0));
assertEquals(BLACK, runnable.performMcRun());
assertEquals(9000, manager.getMsec()); assertEquals(99000, manager.getMsec());
assertTrue(table.getWinRate(hash) < 0.3);
assertEquals(Double.NEGATIVE_INFINITY, descender.searchValue(root, at("a1")), 0.001);
assertNotNull(m); assertTrue(m == n); assertFalse(m == p);
assertEquals(coords.at("c1"), suggester.getMoves().get(0));
assertFalse(player.undo()); assertTrue(player.undo()); assertEquals(fancyHash, player.getBoard().getFancyHash()); assertEquals(asOneString(after), player.getBoard().toString());
assertFalse(notEyeLike.at(at("a1"))); assertTrue(notEyeLike.at(at("e1"))); assertTrue(notEyeLike.at(at("a5"))); assertTrue(notEyeLike.at(at("a3")));
assertEquals(coords.at("c1"), suggester.getMoves().get(0));
assertEquals(1, movesToCapture.getMoves().size()); assertTrue(movesToCapture.getMoves().contains(at("c3")));
assertEquals(1, node.getWins(p), 0.01); assertEquals(0.5, node.getWinRate(p), 0.01); assertEquals(1.0 + (BIAS * 0.5), node.getWins(p), 0.01); assertEquals((1.0 + (BIAS * 0.5)) / (2.0 + BIAS), node.getWinRate(p), 0.01);
assertEquals(3, list2.size()); assertTrue(list2.contains((short)-5)); assertEquals(1, list2.get(0));
assertTrue(movesToEscape.getMoves().contains(at("e2"))); assertTrue(movesToEscape.getMoves().contains(at("a4"))); assertTrue(movesToEscape.getMoves().contains(at("e5"))); assertEquals(3, movesToEscape.getMoves().size());
assertEquals(3, node.getRaveRuns(at("a1")), 0.001); assertEquals(2, node.getRaveWins(at("a1")), 0.001); assertEquals(2.0/3.0, node.getRaveWinRate(at("a1")), 0.001);
assertEquals(3, builder.build().getNumberOfThreads());
assertFalse(c19.isOnBoard(c19.getFirstPointBeyondBoard()));
assertEquals(7, c19.manhattanDistance(c19.at("c4"), c19.at("f8")));
assertEquals( "Total runs: " + base + "\\nA1: 2/ 3 (0.6667)\\nPASS: 2/ 11 (0.1818)\\n", node.toString(coords));
assertTrue(table2.contains(-3));
assertEquals((5 * 7) + 1, c5.getFirstPointBeyondBoard()); assertEquals((19 * 21) + 1, c19.getFirstPointBeyondBoard()); assertEquals(c19.getNeighbors(c19.at("t1"))[EAST_NEIGHBOR], c19.getFirstPointBeyondBoard());
assertEquals(c19.at("b19"), c19.at(0, 1)); assertEquals(c5.at("b5"), c5.at(0, 1)); assertEquals(CoordinateSystem.PASS, c5.at("PASS")); assertEquals(CoordinateSystem.RESIGN, c5.at("RESIGN"));
assertEquals(100, list.capacity());
assertTrue(node.isInUse()); assertFalse(node.isInUse()); assertTrue(node.isInUse());
assertFalse(table.contains(-3)); assertTrue(table.contains(-3)); assertFalse(table.contains(3)); assertTrue(table.contains(3)); assertTrue(table.contains(3));
assertFalse(nearAnotherStone.at(at("e4"))); assertTrue(nearAnotherStone.at(at("b5"))); assertTrue(nearAnotherStone.at(at("c3"))); assertTrue(nearAnotherStone.at(at("b2")));
assertEquals(4, set.get((short)0)); assertEquals(5, set.get((short)1)); assertEquals(9, set.get((short)2)); assertEquals(9, set.get((short)0));
assertEquals(-1, scorer.score(), 0.01);
assertEquals(25, scorer.score(), 0.01);
assertEquals(PASS, observer.get(0));
assertEquals(player.getBoard().toString(), runnable.getBoard().toString());
assertEquals(0, board.getTurn()); assertEquals(1, board.getTurn()); assertEquals(2, board.getTurn());
assertFalse(notEyeLike.at(at("c5"))); assertTrue(notEyeLike.at(at("c1")));
assertNotEquals(0, manager.getMsec()); assertEquals(0, manager.getMsec(), .01);
assertFalse(notEyeLike.at(at("b3"))); assertTrue(notEyeLike.at(at("d3"))); assertTrue(notEyeLike.at(at("c2")));
assertEquals(StoneColor.BLACK, board.getColorToPlay()); assertEquals(TestingTools.asOneString(diagram), board.toString());
assertEquals(OK, board.playFast(at("a5"))); assertEquals(OK, board.playFast(at("a1"))); assertEquals(OK, board.playFast(at("e3"))); assertEquals(OK, board.playFast(at("b5"))); assertEquals(OK, board.playFast(at("b1"))); assertEquals(OK, board.playFast(at("e4"))); assertEquals(asOneString(before), board.toString());
assertEquals(0, set.size()); assertEquals(2, set.size()); assertEquals(2, set.size()); assertTrue(set.contains((short)23)); assertFalse(set.contains((short)0));
assertTrue(movesToCapture.getMoves().contains(at("e2"))); assertTrue(movesToCapture.getMoves().contains(at("a4")));
assertEquals(23, builder.build().getUpdater().getGestation());
assertEquals(at("e15"), parser.sgfToPoint("ee")); assertEquals(at("t1"), parser.sgfToPoint("ss")); assertEquals(at("a19"), parser.sgfToPoint("aa")); assertEquals(at("t19"), parser.sgfToPoint("sa")); assertEquals(at("a1"), parser.sgfToPoint("as"));
assertEquals(100, list.get(1)); assertEquals("(5, 100, 3)", list.toString());
assertEquals(1, set.size()); assertFalse(set.contains((short)23));
assertEquals(at("b1"), copy.get(0)); assertEquals(at("e2"), copy.get(1)); assertEquals(at("a2"), copy.get(2));
assertNull(counter.mercyWinner()); assertNull(counter.mercyWinner()); assertEquals(BLACK, counter.mercyWinner()); assertNull(counter.mercyWinner()); assertEquals(WHITE, counter.mercyWinner());
assertEquals(OCCUPIED, board.play("c1"));
assertTrue(atari.getChainsInAtari(WHITE).contains(board.getChainRoot(at("c5")))); assertTrue(atari.getChainsInAtari(WHITE).contains(board.getChainRoot(at("d3")))); assertTrue(atari.getChainsInAtari(WHITE).contains(board.getChainRoot(at("c1")))); assertEquals(0, atari.getChainsInAtari(WHITE).size());
assertFalse(conjunction.at(at("g6"))); assertFalse(conjunction.at(at("c4"))); assertFalse(conjunction.at(at("a2"))); assertTrue(conjunction.at(at("d3")));
assertEquals(OK, board.play("pass")); assertEquals(WHITE, board.getColorToPlay());
assertEquals(8675309, builder.build().getMsecPerMove());
assertEquals("{}", set.toString()); assertEquals("{8, 3}", set.toString());
assertEquals(2, counter.getCount(BLACK)); assertEquals(6, counter.getCount(WHITE)); assertEquals(0, counter.getCount(BLACK)); assertEquals(0, counter.getCount(WHITE));
assertEquals(child2, n.getKey()); assertEquals(child1, n.getNext().getKey());
assertSame(node, pool.allocate()); assertEquals(-8, node.getKey().intValue());
assertEquals(WHITE, scorer.winner());
assertEquals(3.5, builder.build().getFinalScorer().getKomi(), 0.001);
assertEquals(0.5, extractor.getWinRate(43425), 0.01); assertEquals(1.0, extractor.getWinRate(47900), 0.01); assertEquals(1.0, extractor.getWinRate(44867), 0.01); assertEquals(1.0, extractor.getWinRate(64193), 0.01);
assertFalse(movesToEscape.getMoves().contains(at("e2"))); assertTrue(movesToEscape.getMoves().contains(at("e5"))); assertTrue(movesToEscape.getMoves().contains(at("e2")));
assertFalse(a.isMarked()); assertTrue(b.isMarked()); assertTrue(c.isMarked()); assertTrue(d.isMarked()); assertTrue(e.isMarked());
assertEquals(0.333333, root.getWinRate(at("a2")), 0.01); assertEquals(0.25, root.getRaveWinRate(at("a2")), 0.01); assertEquals(0.2856f, descender.searchValue(root, at("a2")), 0.01f);
assertEquals(3, list.removeLast()); assertEquals(2, list.size()); assertEquals(5, list.get(0)); assertEquals(8, list.get(1));
assertFalse(onThirdOrFourthLine.at(at("a1"))); assertFalse(onThirdOrFourthLine.at(at("a3"))); assertTrue(onThirdOrFourthLine.at(at("c3"))); assertTrue(onThirdOrFourthLine.at(at("q16")));
assertArrayEquals(new short[] {-1, 0}, offsets[0]); assertArrayEquals(new short[] {0, -1}, offsets[1]); assertArrayEquals(new short[] {0, 1}, offsets[2]); assertArrayEquals(new short[] {1, 0}, offsets[3]); assertArrayEquals(new short[] {-1, -1}, offsets[4]); assertNotNull(offsets[offsets.length - 1]);
assertTrue(counts[p] > 20); assertEquals(0, counts[at("a5")]); assertEquals(0, counts[at("a4")]); assertEquals(0, counts[at("b5")]);
assertTrue(table.getWinRate(PatternFinder.getHash(board, board.getCoordinateSystem().at("e4"), 2, history.get(board.getTurn()-1))) > 0.5); assertTrue(table.getWinRate(PatternFinder.getHash(board, board.getCoordinateSystem().at("e6"), 2, history.get(board.getTurn()-1))) > 0.5);
assertFalse(patterns.getMoves().contains(board.getCoordinateSystem().at("c3")));
assertTrue(table.contains(0));
assertEquals(0, sizes[0]); assertEquals(4, sizes[1]); assertEquals(8, sizes[2]); assertEquals(12, sizes[3]); assertEquals(20, sizes[4]); assertEquals(24, sizes[5]);
assertFalse(disjunction.at(at("g6"))); assertTrue(disjunction.at(at("c4"))); assertTrue(disjunction.at(at("a2"))); assertTrue(disjunction.at(at("d3")));
assertEquals(0, list.size()); assertEquals("()", list.toString()); assertEquals(2, list.size()); assertEquals(2, list.size()); assertTrue(list.contains((short)23)); assertFalse(list.contains((short)0)); assertEquals("(23, 99)", list.toString());
assertEquals(at("a3"), observer.get(0));
assertEquals(2, counter.getCount(BLACK)); assertEquals(6, counter.getCount(WHITE));
assertNull(counter.mercyWinner()); assertNull(counter.mercyWinner()); assertEquals(BLACK, counter.mercyWinner()); assertNull(counter.mercyWinner()); assertEquals(WHITE, counter.mercyWinner());
assertTrue(movesToEscape.getMoves().contains(at("e2"))); assertTrue(movesToEscape.getMoves().contains(at("a4")));
assertFalse(nearAnotherStone.at(at("e5"))); assertTrue(nearAnotherStone.at(at("b5"))); assertTrue(nearAnotherStone.at(at("c3"))); assertFalse(nearAnotherStone.at(at("a4")));
assertEquals(5, table.dagSize(a)); assertEquals(4, table.dagSize(b)); assertEquals(2, table.dagSize(c)); assertEquals(2, table.dagSize(d)); assertEquals(1, table.dagSize(e));
assertTrue(movesToEscape.getMoves().contains(at("c5"))); assertEquals(1, movesToEscape.getMoves().size());
assertEquals(NO_POINT, observer.get(-1));
assertEquals(3, stones.size()); assertTrue(stones.contains(at("a1"))); assertTrue(stones.contains(at("a2"))); assertTrue(stones.contains(at("a3")));
assertEquals(-13.5, scorer.score(), 0.1);
assertTrue(board.hasMaxNeighborsForColor(BLACK, at("d5"))); assertTrue(board.hasMaxNeighborsForColor(WHITE, at("c2"))); assertFalse(board.hasMaxNeighborsForColor(BLACK, at("b5"))); assertFalse(board.hasMaxNeighborsForColor(WHITE, at("b2")));
assertEquals(board.toString(), copy.toString()); assertEquals(counter.getCount(BLACK), copyCounter.getCount(BLACK)); assertEquals(counter.getCount(WHITE), copyCounter.getCount(WHITE)); assertEquals(board.toString(), copy.toString()); assertEquals(counter.getCount(BLACK), copyCounter.getCount(BLACK)); assertEquals(counter.getCount(WHITE), copyCounter.getCount(WHITE));
assertSame(c19, c19again);
assertEquals(move, coords.toString(m)); assertEquals(NO_POINT, book.nextMove(board));
assertTrue(atari.getChainsInAtari(WHITE).contains(board.getChainRoot(at("b5")))); assertFalse(atari.getChainsInAtari(BLACK).contains(board.getChainRoot(at("b4")))); assertTrue(atari.getChainsInAtari(WHITE).contains(board.getChainRoot(at("a5"))));
assertEquals(0, set.size()); assertEquals(1, set.size()); assertEquals(0, set.size());
assertNull(table.findIfPresent(0L)); assertEquals(b, table.findIfPresent(1L)); assertEquals(c, table.findIfPresent(2L)); assertEquals(d, table.findIfPresent(3L)); assertEquals(e, table.findIfPresent(4L));
assertEquals(coords.at("c1"), table.getFirstLevelReply(BLACK, coords.at("b1"))); assertEquals(NO_POINT, table.getFirstLevelReply(BLACK, coords.at("a1"))); assertEquals(coords.at("c1"), table.getSecondLevelReply(BLACK, coords.at("a1"), coords.at("b1")));
assertNotEquals("", textUpdater.toString()); assertEquals("", textUpdater.toString());
assertEquals(board.getCoordinateSystem().at("c8"), suggester.getMoves().get(0));
assertEquals(firstSize - 1, list.size()); assertTrue((random == (short)5) || (random == (short)8) || (random == (short)3));
assertEquals(173, builder.build().getDescender().getBiasDelay());
assertEquals(4, set.size()); assertEquals("{1, 2, 3, 4}", set.toString());
assertEquals(5.0, distanceTo(new short[] {3, 4}), 0.001);
assertEquals(trials/4.0, counts[at("b1")], trials/20.0); assertEquals(trials/4.0, counts[at("c1")], trials/20.0); assertEquals(trials/4.0, counts[at("c3")], trials/20.0); assertEquals(trials/4.0, counts[at("d1")], trials/20.0);
assertEquals(174, moves.size()); assertEquals(254, moves.size());
assertEquals(25, c5.getAllPointsOnBoard().length); assertEquals(361, c19.getAllPointsOnBoard().length);
assertEquals(at("c4"), observer.get(0)); assertEquals(at("e1"), observer.get(1)); assertEquals(at("b2"), observer.get(2));
assertEquals(0, list.size()); assertFalse(list.contains((short)42));
assertEquals(NO_POINT, table.getFirstLevelReply(BLACK, coords.at("b1")));
assertNotSame(w2, w); assertSame(w2.x.z, w2.y.z); assertSame(w2.x.z, z2);
assertEquals(3, node.getRaveRuns(at("a1")), 0.001); assertEquals(2, node.getRaveWins(at("a1")), 0.001); assertEquals(3, node.getRaveRuns(at("a2")), 0.001); assertEquals(2, node.getRaveWins(at("a2")), 0.001);
assertEquals(2, set.size()); assertEquals("{1, 3}", set.toString());
assertEquals(0, atari.getChainsInAtari(BLACK).size()); assertEquals(0, atari.getChainsInAtari(WHITE).size());
assertEquals(hash, board.getFancyHash()); assertEquals(hash, board.getFancyHash());
assertEquals(2, list.size()); assertEquals(2, list.size()); assertTrue(list.contains((short)23)); assertFalse(list.contains((short)0)); assertEquals("(23, 99)", list.toString());
assertEquals(0, suggester.getMoves().size());
assertEquals(4, set.size()); assertTrue(set.contains((short)i));
assertEquals(NO_POINT, node.getWinningMove()); assertEquals(at("a1"), node.getWinningMove()); assertEquals(NO_POINT, node.getWinningMove());
assertTrue(patterns.getMoves().contains(board.getCoordinateSystem().at("a4"))); assertFalse(patterns.getMoves().contains(board.getCoordinateSystem().at("b2")));
assertFalse(vector.get(i)); assertTrue(vector.get(i)); assertFalse(vector.get(i));
assertTrue(after > before);
assertFalse(set.equals(null)); assertFalse(set.equals("a String")); assertTrue(set.equals(set)); assertTrue(other.equals(other)); assertFalse(set.equals(other)); assertTrue(other.equals(set)); assertTrue(set.equals(other)); assertFalse(other2.equals(set)); assertFalse(other2.equals(other)); assertFalse(other3.equals(set)); assertFalse(set.equals(other3));
assertEquals((coords.getArea() + 1.0) / ((2 * coords.getArea()) + 10), node.overallWinRate(coords), 0.001); assertEquals((coords.getArea()) / ((2 * coords.getArea()) + 8.0), node.overallWinRate(coords), 0.001);
assertEquals(3, node.getRaveRuns(at("a1")), 0.001); assertEquals(1, node.getRaveWins(at("a1")), 0.001); assertEquals(1.0/3.0, node.getRaveWinRate(at("a1")), 0.001);
assertEquals(3, flowEvents.size()); assertEquals(flowId, flowEvent.getFlowIdentifier()); assertNotNull(flowEvent.getIdentifier()); assertNotNull(flowEvent.getFlowRevision()); assertNotNull(flowEvent.getComponentId()); assertNotNull(flowEvent.getCreated()); assertNotNull(flowEvent.getUpdated()); assertNotNull(flowEvent.getUserIdentity()); assertNotNull(flowEvent.getEventType()); assertNotNull(flowEvent.getEventDescription()); assertNotNull(flowEvent.getFlowFormat()); assertEquals(1, flowEvent.getFlowRevision().compareTo(prevRevision));
assertEquals(3, group2.getProcessors().size()); assertEquals(1, group2.getConnections().size()); assertEquals(2, group2.getProcessors().size()); assertEquals(1, group2.getConnections().size());
assertEquals(1, group2.getControllerServices().size()); assertEquals(0, group2.getControllerServices().size());
assertTrue(publishEvent.isPresent()); assertEquals("4", publishEvent.get().getIdentifier());
assertFalse(propertyDescriptor.isPresent());
assertNotNull(controllerService); assertEquals(sslContextService.getType(), controllerService.getType()); assertEquals(sslContextService.getGroup(), controllerService.getGroup()); assertEquals(sslContextService.getArtifact(), controllerService.getArtifact()); assertEquals(sslContextService.getVersion(), controllerService.getVersion()); assertEquals(sslContextService.getPropertyDescriptors().size(), controllerService.getPropertyDescriptors().size());
assertEquals(desc.getDefaultValue(),otherDescriptor.getDefaultValue()); assertEquals(desc.getDescription(),otherDescriptor.getDescription()); assertEquals(desc.getDisplayName(),otherDescriptor.getDisplayName()); assertEquals(desc.getName(),otherDescriptor.getName()); assertEquals(desc.getSensitive(),otherDescriptor.isSensitive()); assertEquals(desc.getRequired(),otherDescriptor.isRequired());
assertEquals(3, flowEvents.size()); assertNotNull(flowEvent2); assertNotNull(flowEvent3);
assertEquals(desc.getAllowableValues().size(),otherDescriptor.getAllowableValues().size()); assertEquals(desc.getDefaultValue(),otherDescriptor.getDefaultValue()); assertEquals(desc.getDescription(),otherDescriptor.getDescription()); assertEquals(desc.getDisplayName(),otherDescriptor.getDisplayName()); assertEquals(desc.getName(),otherDescriptor.getName()); assertEquals(desc.getSensitive(),otherDescriptor.isSensitive()); assertEquals(desc.getRequired(),otherDescriptor.isRequired());
assertFalse(flowMetadataOptional.isPresent());
assertEquals(desc.getAllowableValues().size(),otherDescriptor.getAllowableValues().size()); assertEquals(desc.getDefaultValue(),otherDescriptor.getDefaultValue()); assertEquals(desc.getDescription(),otherDescriptor.getDescription()); assertEquals(desc.getDisplayName(),otherDescriptor.getDisplayName()); assertEquals(desc.getName(),otherDescriptor.getName()); assertEquals(desc.getSensitive(),otherDescriptor.isSensitive()); assertEquals(desc.getRequired(),otherDescriptor.isRequired());
assertNotNull(processGroupFlow); assertTrue(processGroupFlowContent.getProcessGroups().size() > 0); assertEquals(flowContent.getProcessGroups().size(), processGroupFlowContent.getProcessGroups().size()); assertEquals(5, totalProcessors); assertEquals(1, totalServices);
assertFalse(client.resolveNiFiRegistryBucketId().isPresent());
assertNotNull(serviceTypes); assertEquals(2, serviceTypes.size()); assertEquals(sslContextService.getType(), serviceType.getType()); assertEquals(systemBundle.getGroup(), serviceType.getGroup()); assertEquals(systemBundle.getArtifact(), serviceType.getArtifact()); assertEquals(systemBundle.getVersion(), serviceType.getVersion());
assertTrue(propertyDescriptor.isPresent()); assertEquals(propertyName, propertyDescriptor.get().getName());
assertNotNull(processorTypes); assertEquals(2, processorTypes.size()); assertEquals(invokeHttpProcessor.getType(), processorType.getType()); assertEquals(httpBundle.getGroup(), processorType.getGroup()); assertEquals(httpBundle.getArtifact(), processorType.getArtifact()); assertEquals(httpBundle.getVersion(), processorType.getVersion());
assertNotNull(dynamicProperty); assertEquals(propertyName, dynamicProperty.getName()); assertEquals(propertyName, dynamicProperty.getDisplayName());
assertTrue(flowMetadataOptional.isPresent()); assertEquals("2", flowMetadata.getIdentifier()); assertEquals("Class 2", flowMetadata.getAgentClass()); assertNotNull(flowMetadata.getCreated()); assertNotNull(flowMetadata.getUpdated());
assertFalse(flowEventOptional.isPresent());
assertNotNull(flowUri); assertFalse(flowUri.isPresent());
assertNotNull(processGroupFlow); assertTrue(processGroupFlowContent.getProcessGroups().size() > 0); assertEquals(flowContent.getProcessGroups().size(), processGroupFlowContent.getProcessGroups().size());
assertFalse(publishEvent.isPresent());
assertNotNull(processGroupFlow); assertEquals(0, processGroupFlowContent.getProcessGroups().size()); assertEquals(group3.getProcessGroups().size(), processGroupFlowContent.getProcessGroups().size()); assertEquals(1, totalProcessors);
assertNotNull(processor); assertEquals(invokeHttpProcessor.getType(), processor.getType()); assertEquals(invokeHttpProcessor.getGroup(), processor.getGroup()); assertEquals(invokeHttpProcessor.getArtifact(), processor.getArtifact()); assertEquals(invokeHttpProcessor.getVersion(), processor.getVersion()); assertEquals(invokeHttpProcessor.getPropertyDescriptors().size(), processor.getPropertyDescriptors().size()); assertNotNull(invokeHttpProcessor.getSupportedRelationships()); assertEquals(2, invokeHttpProcessor.getSupportedRelationships().size()); assertEquals(true, invokeHttpProcessor.getSupportsDynamicRelationships());
assertNotNull(createdRemoteProcessGroup); assertEquals(requestConfig.getTargetUris(), createdRemoteProcessGroup.getComponentConfiguration().getTargetUris());
assertEquals(BUCKET_ID, client.resolveNiFiRegistryBucketId().get());
assertNotNull(processGroupFlow); assertEquals(0, processGroupFlowContent.getProcessGroups().size());
assertEquals(1, validationErrors.size()); assertTrue(validationErrors.isEmpty());
assertFalse(flowOptional.isPresent());
assertTrue(propertyDescriptor.isPresent()); assertEquals(propertyName, propertyDescriptor.get().getName());
assertTrue(flowEventOptional.isPresent()); assertEquals("4", flowEvent.getIdentifier()); assertEquals(3, flowEvent.getFlowRevision().intValue());
assertEquals(2, flows.size());
assertEquals(BUCKET_ID, client.resolveNiFiRegistryBucketId().get());
assertFalse(propertyDescriptor.isPresent());
assertNotNull(controllerService); assertNotNull(controllerService.getComponentConfiguration()); assertNotNull(controllerService.getComponentDefinition()); assertEquals(sslContextService.getType(), controllerService.getComponentDefinition().getType()); assertEquals(sslContextService.getGroup(), controllerService.getComponentDefinition().getGroup()); assertEquals(sslContextService.getArtifact(), controllerService.getComponentDefinition().getArtifact()); assertEquals(sslContextService.getVersion(), controllerService.getComponentDefinition().getVersion());
assertNotNull(flowUri); assertTrue(flowUri.isPresent()); assertEquals(REGISTRY_URL, flowUri.get().getRegistryUrl()); assertEquals(BUCKET_ID, flowUri.get().getBucketId()); assertEquals(versionedFlow.getIdentifier(), flowUri.get().getFlowId());
assertNotNull(dynamicProperty); assertEquals(propertyName, dynamicProperty.getName()); assertEquals(propertyName, dynamicProperty.getDisplayName());
assertTrue(detector.isLightStreamer(mockInstrumentation));
assertFalse(context.handleSecurity(request, response));
assertEquals(clearText, clear);
assertEquals(expected[i],((int[]) obj)[i]); assertEquals(expected[i],(int) ((Integer[]) obj)[i]); assertEquals(strings.length,2); assertEquals("hallo,hans!",strings[0]); assertEquals("wu!rst",strings[1]);
assertEquals(header.getFirst("content-type"), "text/plain; charset=utf-8");
assertEquals(result, DateUtil.toISO8601(date)); assertEquals(result,date.getTime());
assertTrue(ctx.handleSecurity(null,null));
assertEquals(oldVal,currentTime); assertEquals(date.getTime(),0L); assertEquals(oldVal,0L); assertEquals(date.getTime(),1000L);
assertTrue(authenticator.authenticate(null) instanceof Authenticator.Success);
assertTrue(extractor.canSetValue());
assertEquals("Attr1 has 3 entries",3,((List) history.get("attr1")).size()); assertEquals("Attr2 has 4 entries",4,((List) history.get("attr2")).size());
assertEquals(req.getAttributeName(),"HeapMemoryUsage"); assertEquals(req.getParameter(ConfigKey.MAX_DEPTH),"10"); assertEquals(req.getParameterAsInt(ConfigKey.MAX_OBJECTS), 100);
assertEquals("4 history entries",3,((List) res.get("attr")).size());
assertTrue((Boolean) config.get("doIt"));
assertTrue(handler.handleAllServersAtOnce(new JmxRequestBuilder(RequestType.SEARCH, "java.lang:*").<JmxSearchRequest>build()));
assertNotNull(handle);
assertEquals(col1.get("key"),"keyOne"); assertEquals(col1inner.get("key"),"innerKeyOne"); assertEquals(col1inner.get("value"),"valueOne");
assertEquals(NetworkUtil.replaceExpression(testData[i]),testData[i+1],"Checking " + testData[i]);
assertFalse(httpContext.handleSecurity(request, response));
assertEquals(oldValue,"baz"); assertEquals(bean.getMap().get("foo").get(0),"bar"); assertEquals(bean.getMap().get("foo").get(1),"blub"); assertEquals(oldValue,"bar"); assertEquals(bean.getArray()[0],"fcn");
assertEquals(((Authenticator.Retry) res).getResponseCode(),401); assertTrue(respHeader.containsKey("WWW-Authenticate")); assertTrue(respHeader.getFirst("WWW-Authenticate").contains("jolokia"));
assertEquals(test.intProp,1); assertEquals(test.intProp,2);
assertEquals(2,res.size()); assertEquals("com1",((Map) res.get("java.lang:type=Memory")).get("common")); assertEquals("com2",((Map) res.get("java.lang:type=GarbageCollection")).get("common"));
assertTrue(result instanceof Authenticator.Failure);
assertNull(ret.get("transientValue")); assertEquals(ret.get("value"),"value");
assertEquals(out.size(), respString.length()); assertEquals(out.toString("UTF-8"), respString);
assertEquals(date.getTime(),0); assertEquals(date.getTime() / 1000,now.getTime() / 1000);
assertTrue(names.contains(new ObjectName("test:type=one"))); assertTrue(names.contains(new ObjectName("test:type=two"))); assertEquals(names.size(), 3);
assertEquals(extractor.getType(),Date.class);
assertEquals(result.get("verein"),"FCN"); assertEquals(result.get("trainer"),null); assertEquals(result.get("platz"),6); assertEquals(result.get("absteiger"),false); assertEquals(result.values().size(),4);
assertNull(config);
assertEquals(req.getPathParts().size(),2,"Size of path"); assertEquals(req.getPath(),"used!/bla!/blub/bloe","Path properly parsed");
assertEquals(test.stringProp,"set"); assertEquals(test.stringProp,null);
assertFalse(handler.handleAllServersAtOnce(request)); assertTrue(handler.handleAllServersAtOnce(request)); assertTrue(handler.handleAllServersAtOnce(request)); assertTrue(handler.handleAllServersAtOnce(request));
assertTrue(extractor.canSetValue()); assertEquals(old,"Test"); assertEquals(getText(),"NewText");
assertTrue(found ? addr != null : addr == null); assertTrue(addr instanceof Inet4Address);
assertEquals(result,date); assertEquals(result,date);
assertTrue(authenticator.authenticate(null) instanceof Authenticator.Success);
assertFalse(req.isMultiAttributeMode()); assertFalse(req.hasAttribute()); assertNull(req.getAttributeName()); assertNull(list);
assertFalse(detector.isLightStreamer(mockInstrumentation));
assertEquals(aliases.size(), 1); assertTrue(alias.contains("ca.test.jolokia.org")); assertTrue(cert.getSubjectDN().getName().contains(CA_CERT_SUBJECT_DN_CN)); assertEquals(key.getAlgorithm(),"RSA");
assertEquals(handle.getVersion(),"7.1.1.Final"); assertEquals(handle.getVendor(),"RedHat"); assertEquals(handle.getProduct(),"jboss");
assertNull(config);
assertEquals(col1.get("key"),"keyOne"); assertEquals(col1.get("value"),"valueOne"); assertEquals(col2.get("key"),"keyTwo"); assertEquals(col2.get("value"),"valueTwo");
assertNotNull(dispatcher.dispatchRequest(req));
assertEquals(result.size(),3); assertEquals(result.get("bundleId"),10L); assertEquals(result.get("active"),false);
assertTrue(context.handleSecurity(request,response));
assertEquals(path.size(),2); assertEquals(path.get(0),"blub/bla"); assertEquals(path.get(1),"hello"); assertEquals(req.getPath(),"blub!/bla/hello");
assertTrue(o instanceof Example); assertEquals("test", ((Example)o).getValue());
assertNull(vmHandler.attachVirtualMachine());
assertTrue(result instanceof Authenticator.Failure);
assertEquals(req.get(0).getType(), RequestType.READ); assertEquals(req.get(1).getType(), RequestType.LIST);
assertEquals(req.getAttributeName(),"HeapMemoryUsage","Attribute parsed properly");
assertEquals(test.getClass(),getClass()); assertEquals(test.stringProp,"eins"); assertEquals(test.intProp,2);
assertEquals(name,"jolokia");
assertNotNull(cert); assertEquals(cert.getSubjectDN().getName(), "CN=Jolokia Agent " + Version.getAgentVersion() + ", OU=JVM, O=jolokia.org, L=Pegnitz, ST=Franconia, C=DE"); assertEquals(cert.getSubjectDN(), cert.getIssuerDN());
assertEquals(out.size(), respString.length()); assertEquals(out.toString("UTF-8"), respString);
assertEquals(got, (List<String>) COMMA_SPLIT_TEST_DATA[i+1]);
assertEquals(path, pathname);
assertTrue(restrictor.getClass().isAssignableFrom(PolicyRestrictor.class));
assertEquals(history.size(), 3);
assertEquals(key, ConfigKey.MAX_DEPTH);
assertTrue(authenticator.authenticate(null) instanceof Authenticator.Failure);
assertTrue(res[0]); assertFalse(res[1]); assertNull(res[2]);
assertTrue(authenticator.authenticate(null) instanceof Authenticator.Failure);
assertEquals(Base64Util.decode("").length, 0);
assertEquals(result,TestEnum.EINS);
assertEquals(objName, testName);
assertEquals(aliases.size(), 2); assertNotNull(key); assertNotNull(expectedSubjectDN); assertTrue(cert.getSubjectDN().getName().contains(expectedSubjectDN)); assertEquals(certPublicKey.getAlgorithm(),"RSA"); assertEquals(expectedAliases.size(),0);
assertEquals(resName,oName);
assertNotNull(data); assertEquals(keySet.size(), 1); assertEquals(keys.size(),2); assertTrue(keys.contains("homestreet")); assertEquals(row.get("user"),cd); assertEquals(row.get("street"),"homestreet"); assertEquals(row.get("oname"),new ObjectName("java.lang:type=Memory"));
assertEquals(info.getVendor(),"IBM"); assertEquals(info.getProduct(),"websphere"); assertNotNull(info.getExtraInfo(null)); assertEquals(info.getExtraInfo(null).get("buildDate"),"8/14/10");
assertNotNull(urls); assertEquals(urls.size(),1);
assertEquals(out.size(), respString.length()); assertEquals(out.toString("UTF-8"), respString);
assertEquals(EscapeUtil.escape("hello\\\\world,how are you?",CSV_ESCAPE,","),"hello\\\\\\\\world\\\\,how are you?");
assertTrue(response == resp);
assertEquals(aliases.size(), 1); assertTrue(alias.contains("server")); assertEquals(cert.getSubjectDN().getName(), SERVER_CERT_SUBJECT_DN); assertEquals("RSA", key.getAlgorithm()); assertEquals("RSA", pubKey.getAlgorithm());
assertEquals("val0", res.get("attr0")); assertEquals("val1",res.get("attr1"));
assertEquals(handle.getVersion(),"5.1.0"); assertEquals(handle.getVendor(),"RedHat"); assertEquals(handle.getProduct(),"jboss");
assertTrue(tryAttach(singleHitPattern.pattern())); assertFalse(tryAttach("RobertMakClaudioPizarro",".*No.*process.*")); assertFalse(tryAttach(".",procs.get(0).getId()));
assertEquals(j.get("url"),URL); assertEquals(j.get("user"),"roland"); assertEquals(j.get("password"),"s!cr!t");
assertNotNull(result); assertTrue(result instanceof Authenticator.Failure); assertEquals(((Authenticator.Failure) result).getResponseCode(), 401);
assertNotNull("Bean 2 is set",result.get("bean2")); assertNotNull("Bean2:Bean1 is set",((Map)result.get("bean2")).get("bean1")); assertEquals("Reference breackage",((Map)result.get("bean2")).get("bean1").getClass(),String.class); assertTrue("Bean 3 should be resolved",result.get("bean3") instanceof Map);
assertTrue(result instanceof Authenticator.Failure);
assertTrue(response == resp);
assertEquals(result.size(),2); assertEquals(inner.get("domain"),"test"); assertEquals(inner.get("domain"),"java.lang");
assertEquals(req.getAttributeName(),"HeapMemoryUsage","Attribute parsed properly");
assertTrue(result.isEmpty());
assertEquals(ret,set);
assertTrue(dispatcher.useReturnValueWithPath(JmxRequestFactory.createGetRequest("/read/java.lang:type=Memory", procParams)));
assertTrue(result.containsKey("HeapMemoryUsage"));
assertEquals(((Map) resp.getValue()).get("max"), 530186240L);
assertEquals(failure.getResponseCode(), 422); assertTrue(error.contains("Invalid JSON"));
assertNull("Null check",obj);
assertEquals(req.getType(),RequestType.SEARCH); assertEquals(req.getObjectName().getCanonicalName(),"java.lang:*"); assertTrue(req.getObjectName().isPattern());
assertEquals(oldVal,current); assertEquals(date.getTime(),0L);
assertEquals(ret.get("name"),"myFile"); assertEquals(name,"myFile");
assertEquals(e.getErrorValue().toJSONString(), "{\\"test\\":\\"ok\\"}");
assertEquals(config.getPort(), 4711); assertTrue(config.isModeStop()); assertEquals(config.getBacklog(), 10);
assertFalse(context.handleSecurity(request, response));
assertTrue(ret instanceof Map); assertEquals(((Map) ret).get("answer"),42);
assertEquals(((Authenticator.Failure) result).getResponseCode(), 401);
assertTrue(req.isMultiAttributeMode()); assertEquals(list.size(), 2); assertTrue(list.contains("Heap/Memory/Usage")); assertTrue(list.contains("NonHeapMemoryUsage")); assertTrue(req.toString().contains("attribute=[")); assertTrue(exp.getMessage().contains("getAttributeNames"));
assertEquals("testValue",res);
assertEquals(2,res.size()); assertEquals("memval0",((Map) res.get("java.lang:type=Memory")).get("mem0")); assertEquals("gcval3",((Map) res.get("java.lang:type=GarbageCollection")).get("gc3"));
assertEquals(pName,name);
assertTrue(auth.doAuthenticate(req, info));
assertFalse(in.isQuery()); assertEquals(details.get("url"), JOLOKIA_URL); assertEquals(details.get("agent_version"), Version.getAgentVersion()); assertEquals(idCount,1,"Exactly one in message with the send id should have been received"); assertEquals(urlCount,1,"Only one message with the url should be included");
assertNotNull(enc); assertNotNull(enc2); assertNotEquals(enc,enc2);
assertEquals("type=Memory",result.get("canonicalKeyPropertyListString"));
assertTrue(key.toString().contains("operation")); assertTrue(key.toString().contains("exec")); assertTrue(key.toString().contains("test:type=blub")); assertTrue(key.toString().contains("targetUrl"));
assertNull(ctx.getMimeType(null));
assertNull(result.get("parent"));
assertEquals(services.size(), 4); assertEquals(it.next().getName(),val);
assertEquals(date.getTime(),result.get("millis"));
assertTrue(o instanceof Example); assertNull(((Example)o).getList()); assertEquals("[test]", ((Example)o).getValue());
assertEquals(o.getCommand(),"list"); assertEquals(o.getCommand(), "toggle");
assertEquals(map.get("hello"),"world");
assertEquals("Attr1 has 3 entries",4,((List) history.get("attr1")).size()); assertEquals("Attr2 has 4 entries",4,((List) history.get("attr2")).size());
assertEquals(decrypted,passwd);
assertNotNull(row); assertFalse((Boolean) row.get("absteiger"));
assertEquals("val0",res.get("attr0")); assertTrue(err != null && err.contains("ERROR"));
assertFalse(dispatcher.canHandle(JmxRequestFactory.createGetRequest("/read/java.lang:type=Memory", procParams))); assertTrue(dispatcher.canHandle(req));
assertEquals(res,3); assertEquals(res2.length,3); assertEquals((int) res2[0],1); assertEquals((int) res2[1],2); assertEquals((int) res2[2],3);
assertEquals(ctx.handleSecurity(null, resp), testData[i + 2], String.format("%s: %s --> %s", testData[i], printBooleanList((boolean[]) testData[i + 1]), testData[i + 2]));
assertEquals(json,object); assertEquals(array,object);
assertEquals(d.dispatchCommand(null, null), 0); assertTrue(outStream.toString().contains(Version.getAgentVersion())); assertFalse(outStream.toString().contains(Version.getProtocolVersion()));
assertTrue(restrictor.getClass().isAssignableFrom(TestRestrictor.class));
assertTrue(res[0]); assertFalse(res[1]);
assertEquals(result.size(), 2); assertTrue(result.containsKey("indexNames")); assertTrue(result.containsKey("values")); assertEquals(indexNames.size(), 1); assertTrue(indexNames.contains("key")); assertEquals(values.size(),1); assertEquals(key.get("name"),"roland"); assertEquals(key.get("date"),1968); assertEquals(key.size(), 2); assertEquals(value.get("value"), TEST_VALUE); assertEquals(key.size(),2);
assertEquals("4 history entries",3,updateNTimesAsList(req,4).size());
assertTrue(key.toString().contains("attribute")); assertTrue(key.toString().contains("bla")); assertTrue(key.toString().contains("test:type=blub"));
assertEquals("2 history entries",2,updateNTimesAsList(req,3,"42").size());
assertFalse(result);
assertEquals(handler.getType(), EXEC); assertNull(res);
assertEquals(enumExtractor.extractObject(converter, TestEnum.EINS,stack,true),"EINS"); assertEquals(enumExtractor.extractObject(converter, TestEnum.EINS,stack,true),"EINS");
assertEquals("1 History Entry", 1, hist.size());
assertEquals(principal.getRealm(),"jolokia"); assertEquals(principal.getUsername(),"roland");
assertTrue(result.containsKey("HeapMemoryUsage"));
assertEquals(json.get("vendor"),vendor); assertEquals(json.get("product"),product); assertEquals(json.get("version"),version); assertEquals(((JSONObject) json.get("extraInfo")).get("extra1"),"value1");
assertNotNull(handle); assertEquals(handle.getVersion(),version);
assertTrue(store.getSize() < 100); assertTrue(store.getSize() > 100);
assertEquals(result[0].get("verein"), "FCN"); assertEquals(result.length,1);
assertEquals(test.getClass(),getClass());
assertEquals(failure.getResponseCode(), 400); assertTrue(error.contains(data[i+1]));
assertNull(history);
assertEquals(glued,PATH_SPLIT_TEST_DATA[i]);
assertEquals(req.getType(),RequestType.VERSION);
assertNotNull("Bean2 is set",result.get("bean2")); assertNotNull("Binary attribute is set",result.get("strong"));
assertTrue(result instanceof Authenticator.Success);
assertEquals(info.getVersion(), "3"); assertEquals(info.getProduct(),"glassfish");
assertEquals(history.size(), 3);
assertTrue(restrictor.getClass().isAssignableFrom(AllowAllRestrictor.class));
assertEquals(vals[i],res.get(attrs[i]));
assertEquals(clazz.getName(),"org.jolokia.util.RequestType"); assertEquals(oldCl.loadClass("org.jolokia.util.RequestType"),clazz);
assertFalse(auth.doAuthenticate(req, info));
assertTrue(procs.size() > 0); assertTrue(foundAtLeastOne);
assertEquals(res.size(),1);
assertEquals(name, new ObjectName("java.lang:type=blub"));
assertNull(ctx.getResource(null));
assertEquals(config.getProtocol(), "https"); assertNotNull(authenticator); assertEquals(config.getClientPrincipals().get(0),"O=jolokia.org,OU=JVM"); assertTrue(authenticator instanceof UserPasswordAuthenticator); assertTrue(((UserPasswordAuthenticator) authenticator).checkCredentials("roland", "s!cr!t"));
assertEquals(result.getUser(),"roland"); assertEquals(result.getPassword(),"s!cr!t"); assertTrue(result.isValid());
assertEquals(handler.dispatchRequest(reqHandler, request),result);
assertNotNull(obj); assertTrue(obj instanceof Date); assertEquals(expectedDate, obj);
assertTrue(key.isMBeanPattern()); assertFalse(key2.isMBeanPattern()); assertFalse(key3.isMBeanPattern()); assertTrue(key.matches(key2)); assertFalse(key.matches(key3));
assertEquals(d.dispatchCommand(null, vmh), 0);
assertEquals(d.dispatchCommand(null, null), 0); assertTrue(outStream.toString().contains(Version.getAgentVersion())); assertTrue(outStream.toString().contains(Version.getProtocolVersion()));
assertNull(detector.detect(servers));
assertEquals(Base64Util.decode("abc").length,0);
assertEquals(rc, 0);
assertEquals(data.get(new String[] { "fcn" }).get("absteiger"),false); assertEquals(data.get(new String[] { "fcb" }).get("absteiger"),true);
assertNull(J4pClientBuilder.parseProxySettings(null));
assertTrue(jolokiaServer.isRegistered(name));
assertTrue(ClassUtil.checkForClass("java.lang.String")); assertEquals(ClassUtil.classForName(ClassUtilTest.class.getName()),ClassUtilTest.class); assertNull(ClassUtil.classForName("blablub"));
assertFalse(result.isValid());
assertTrue(context.handleSecurity(request,response));
assertTrue("Recurence detected",c.contains("bean1: toString"));
assertTrue(auth.checkCredentials("roland","s!cr!t")); assertFalse(auth.checkCredentials("roland", "bla")); assertFalse(auth.checkCredentials(null, "bla")); assertFalse(auth.checkCredentials("roland", null)); assertFalse(auth.checkCredentials(null, null));
assertEquals(handle.getVersion(),"7"); assertEquals(handle.getVendor(),"RedHat"); assertEquals(handle.getProduct(),"jboss");
assertTrue(o.toAgentArg().contains(EscapeUtil.escape(DN1,EscapeUtil.CSV_ESCAPE,","))); assertTrue(o.toAgentArg().contains(EscapeUtil.escape(DN2,EscapeUtil.CSV_ESCAPE,","))); assertTrue(o.toAgentArg().contains("clientPrincipal")); assertTrue(o.toAgentArg().contains("clientPrincipal.1")); assertFalse(o.toAgentArg().contains("clientPrincipal.0")); assertFalse(o.toAgentArg().contains("clientPrincipal.2"));
assertNotNull(executor.getJolokiaMBeanServer()); assertNull(executorNull.getJolokiaMBeanServer());
assertTrue(found);
assertTrue(in.size() > 0);
assertEquals(data.length,2); assertEquals(data[0],"hello"); assertEquals(data[1],"world");
assertEquals(resName,new ObjectName("jolokia:type=dummy"));
assertEquals(actual.getClass(), MortbayMuleAgentHttpServer.class);
assertNull(converter.convertToObject(SimpleType.STRING,null));
assertEquals(val, "habanero");
assertTrue(key.toString().contains("attribute")); assertTrue(key.toString().contains("(all)")); assertTrue(key.toString().contains("test:type=blub"));
assertFalse(resp.containsKey("error"));
assertEquals(1,res.size()); assertEquals("memval1",((Map) res.get("java.lang:type=Memory")).get("mem1"));
assertEquals("Empty String check",0,((String) obj).length());
assertFalse(auth.doAuthenticate(req, info));
assertTrue(result instanceof Authenticator.Failure);
assertEquals(req.getAttributeName(),"/Heap/Memory/Usage/","Attribute properly parsed");
assertTrue(path.contains("bin")); assertTrue(path.startsWith("Hello")); assertTrue(path.endsWith("World"));
assertEquals(response.size(),2); assertTrue(response.get(0) == resp); assertTrue(response.get(1) == resp);
assertEquals(handle.getVersion(),"10.1.0.Final"); assertEquals(handle.getVendor(),"RedHat"); assertEquals(handle.getProduct(),"WildFly Full");
assertEquals(handler.dispatchRequest(reqHandler, request),result);
assertEquals(got, (List<String>) PATH_SPLIT_TEST_DATA[i+1]);
assertTrue(dump.contains("java.lang")); assertTrue(dump.contains("type=Memory"));
assertTrue(info.contains("Platform MBeanServer")); assertTrue(info.contains("type=Memory"));
assertTrue(result instanceof Authenticator.Success);
assertNull(converter.prepareValue("java.lang.String", null)); assertEquals(converter.prepareValue("java.lang.Long", 10L), 10L); assertEquals(converter.prepareValue("java.lang.Long", "10"), 10L); assertTrue(converter.prepareValue("java.util.Map", map) == map);
assertEquals((Long)22L, (Long)instance.spParam); assertNotNull(instance.sentData);
assertThat(ts.getOnNextEvents(), hasItems(connection));
assertThat(feed.getPosts(), equalTo(posts));
assertThat(store.get(), equalTo(getObservable));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(e.getCode(), equalTo(1000));
assertThat(feed.getEvents(), equalTo(events));
assertThat(ts.getOnNextEvents(), hasItems(comment));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(tapglue.retrieveEventFeed(), equalTo(events));
assertThat(result, equalTo(users));
assertThat(configuration.getBaseUrl(), equalTo(URL));
assertThat(result, equalTo(users));
assertThat(tapglue.refreshCurrentUser(), equalTo(user));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(comment));
assertThat(tapglue.createComment(id, comment), equalTo(comment));
assertThat(feed.flatten(), equalTo(likes));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(tapglue.createLike(id), equalTo(like));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(ts.getOnNextEvents(), hasItems(events));
assertThat(ts.getOnNextEvents(), hasItems(like));
assertThat(store.isEmpty(), equalTo(false));
assertThat(ts.getOnNextEvents(), hasItems(like));
assertThat(tapglue.createSocialConnections(socialConnections), equalTo(userList));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(userPage));
assertThat(tapglue.retrievePost(id), equalTo(post));
assertThat(tapglue.createPost(post), equalTo(post));
assertThat(network.service, equalTo(secondService));
assertThat(ts.getOnNextEvents(), hasItems(comment));
assertThat(tapglue.loginWithEmail(EMAIL, PASSWORD), equalTo(user));
assertThat(tapglue.updateComment(postId, commentId, comment), equalTo(comment));
assertThat(network.service, equalTo(secondService));
assertThat(ts.getOnNextEvents(), hasItems(entity));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(ts.getOnNextEvents(), hasItems(users));
assertThat(wrapper.unwrap(Observable.just(entity)), equalTo(entity));
assertThat(ts.getOnNextEvents(), hasItems(userPage));
assertThat(store.clear(), equalTo(clearAction));
assertThat(comments, notNullValue());
assertThat(feed, notNullValue());
assertThat(tapglue.getCurrentUser(), equalTo(user));
assertThat(result, equalTo(users));
assertThat(store.clear(), equalTo(clearAction));
assertThat(configuration.getToken(), equalTo(TOKEN));
assertThat(result, equalTo(users));
assertThat(ts.getOnNextEvents(), hasItems(connection));
assertThat(ts.getOnNextEvents(), hasItems("uuid"));
assertThat(ts.getOnNextEvents().size(), equalTo(1));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(store.store(), equalTo(internalStore.store()));
assertThat(events, notNullValue());
assertThat(result, equalTo(posts));
assertThat(tapglue.createUser(user), equalTo(user));
assertThat(result, equalTo(events));
assertThat(tapglue.retrieveUser(id), equalTo(user));
assertThat(network.service, equalTo(secondService));
assertThat(TapglueSchedulers.analytics(), instanceOf(Scheduler.class));
assertThat(feed.flatten(), equalTo(comments));
assertThat(posts, notNullValue());
assertThat(store.store(), equalTo(storeFunc));
assertThat(ts.getOnNextEvents(), hasItems(userPage));
assertThat(service, notNullValue());
assertThat(tapglue.createConnection(connection), equalTo(connection));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(store.get(), equalTo(getObservable));
assertThat(ts.getOnNextEvents(), hasItems(post));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(tapglue.updateCurrentUser(user), equalTo(user));
assertThat(configuration.isLogging(), equalTo(false));
assertThat(entity, nullValue());
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(ts.getOnNextEvents(), hasItems(events));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(store.get(), equalTo(getObservable));
assertThat(tapglue.updatePost(id, post), equalTo(post));
assertThat(ts.getOnNextEvents(), hasItems(users));
assertThat(store.isEmpty(), equalTo(true));
assertThat(tapglue.loginWithUsername(USERNAME, PASSWORD), equalTo(user));
assertThat(ts.getOnNextEvents(), hasItems(userPage));
assertThat(ts.getOnNextEvents(), hasItems(user));
assertThat(likes, notNullValue());
assertThat(actual, equalTo("/engine/models"));
assertThat(result.getServices(), hasSize(2)); assertThat(context.getNanoentities(), hasSize(3));
assertThat(isAuthenticated).isTrue();
assertThat(login).isEqualTo("admin");
assertThat(isAuthenticated).isFalse();
assertThat(users).isEmpty();
assertThat(persistentTokenRepository.findByUser(admin)).hasSize(existingCount + 2); assertThat(persistentTokenRepository.findByUser(admin)).hasSize(existingCount + 1);
assertThat(maybeUser.isPresent()).isFalse(); assertThat(maybeUser.isPresent()).isTrue(); assertThat(maybeUser.get().getEmail()).isEqualTo("admin@localhost"); assertThat(maybeUser.get().getResetDate()).isNotNull(); assertThat(maybeUser.get().getResetKey()).isNotNull();
assertEquals(new Double(1.0d), config.getPriorityForCouplingCriterion("sameEntity"));
assertThat(actual, equalTo("/engine/api/models"));
assertEquals(userId, user.getId());
assertEquals(ResponseCode.SUCCESS, rep.getResponseCode()); assertNotNull(rep.getPayload()); assertEquals(1, rep.getPayload().length); assertTrue(rep.getPayload()[0] instanceof byte[]); assertEquals(KEY_SIZE.intValue(), b.length);
assertNotNull(s); assertEquals(ResponseCode.SUCCESS, r.getResponseCode()); assertNotNull(response); assertEquals(1, response.length); assertNotNull(id);
assertEquals("No http requests file provided", e.getMessage());
assertTrue(result.isPresent()); assertEquals(rootDir.resolve("p1/p2/hello").toFile(), result.get().file); assertEquals(singletonList("application/octet-stream"), result.get().fileHttpHeaders.get("Content-Type"));
assertEquals("Cannot use both --text and --file options together", e.getMessage()); assertEquals("Cannot use both --text and --file options together", e.getMessage());
assertTrue(result.isPresent()); assertEquals(rootDir.resolve("p1/hello.json").toFile(), result.get().file); assertEquals(singletonList("application/json"), result.get().fileHttpHeaders.get("Content-Type")); assertTrue(result.isPresent()); assertEquals(rootDir.resolve("p1/hello.xml").toFile(), result.get().file); assertEquals(singletonList("text/xml"), result.get().fileHttpHeaders.get("Content-Type"));
assertTrue(result.isPresent()); assertEquals(singletonList("application/json"), result.get().fileHttpHeaders.get("Content-Type")); assertEquals(singletonList("text/xml"), result.get().fileHttpHeaders.get("Content-Type"));
assertFalse(result.isPresent()); assertFalse(result.isPresent()); assertFalse(result.isPresent()); assertFalse(result.isPresent());
assertTrue(result.isPresent()); assertEquals(rootDir.resolve("hello").toFile(), result.get().file); assertEquals(singletonList("application/octet-stream"), result.get().fileHttpHeaders.get("Content-Type"));
assertTrue(result.isPresent()); assertEquals(rootDir.resolve("p1/hello.json").toFile(), result.get().file); assertEquals(singletonList("application/json"), result.get().fileHttpHeaders.get("Content-Type")); assertTrue(result.isPresent()); assertEquals(rootDir.resolve("p1/hello.xml").toFile(), result.get().file); assertEquals(singletonList("text/xml"), result.get().fileHttpHeaders.get("Content-Type"));
assertTrue(result.isPresent()); assertEquals(singletonList("application/json"), result.get().fileHttpHeaders.get("Content-Type")); assertEquals(singletonList("text/xml"), result.get().fileHttpHeaders.get("Content-Type"));
assertThat(topology).isNotNull();
assertThat(producer.getSpout()).isInstanceOf(PageViewSpout.class);
assertTrue(instance1.equals(instance2)); assertTrue(instance2.equals(instance1));
assertFalse(r.equals(falseDuplicate), r + " is equal to " + falseDuplicate + " but it should not be");
assertEquals(expectedMean, statistics.getMean(), 0.3); assertEquals(stdDev, statistics.getStdDev(), 0.3);
assertThat(producer.getSpout()).isInstanceOf(FileReadSpout.class);
assertNotNull(countResponse); assertEquals(11, countResponse.getCount());
assertThat(combined).isEqualTo(new AccuracyState<Boolean>(25, 16));
assertEquals(0.01, error, 0.01); assertEquals(0.01, error, 0.01); assertEquals(baseline.cardinality(), mergedEstimate);
assertFalse(list.isEmpty()); assertEquals(1, list.size()); assertArrayEquals(new Integer[]{1}, list.toArray()); assertFalse(list.isEmpty()); assertEquals(2, list.size()); assertArrayEquals(new Integer[]{2, 1}, list.toArray()); assertFalse(list.isEmpty()); assertEquals(3, list.size()); assertArrayEquals(new Integer[]{3, 2, 1}, list.toArray()); assertEquals(new Integer(3), list.first()); assertEquals(new Integer(1), list.last());
assertEquals(1, vocabulary.count("only one").intValue()); assertEquals(2, vocabulary.count("we are 2").intValue()); assertEquals(0, vocabulary.count("I\'m not here").intValue());
assertEquals(DataStoreException.ErrorCode.STORE_NO_DATA_FOUND_FOR_ID, ex.getErrorCode());
assertTrue(r.equals(trueDuplicate), r + " is not equal to " + trueDuplicate + " but it should be");
assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), statusCode);
assertThat(distinct.zero()) .isNotNull() .isInstanceOf(HashSet.class) .isEmpty();
assertThat(actualFields).isEqualTo(Lists.newArrayList(fields));
assertThat(one.init(tuple)).isEqualTo(1);
assertEquals(names.size(), responseTables.size());
assertTrue(distributedTableMetadataManager.exists(table.getName())); assertFalse(distributedTableMetadataManager.exists("DUMMY_TEST_NAME_NON_EXISTENT"));
assertEquals(expectedWords, actualWords);
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertThat(collector) .isNotNull() .isInstanceOf(collectorClass);
assertEquals(cardinality, instance.cardinality(), 100);
assertNotNull(response); assertEquals(table.getName(), response.getName()); assertEquals(table.getTtl(), response.getTtl());
assertThat(actualState).isEqualTo(new AccuracyState<Boolean>(1, 1));
assertNotNull(response); assertEquals(table.getName(), response.getName()); assertEquals(table.getTtl(), response.getTtl());
assertThat(BenchmarkUtils.ifAckEnabled(config)).isFalse(); assertThat(BenchmarkUtils.ifAckEnabled(config)).isEqualTo(expected);
assertThat(BenchmarkUtils.max(numbers)).isEqualTo(expected);
assertEquals(expectedMean, statistics.getMean(), 0.1); assertEquals(stdDev, statistics.getStdDev(), 0.1);
assertEquals(port, brokerInfo.getBrokerFor(partition).port); assertEquals(host, brokerInfo.getBrokerFor(partition).host); assertEquals(newPort, brokerInfo.getBrokerFor(partition).port); assertEquals(newHost, brokerInfo.getBrokerFor(partition).host);
assertEquals(0.01, error, 0.01); assertEquals(0.01, error, 0.01); assertEquals(baselineEstimate, mergedEstimate);
assertEquals(expectedInstance, actualInstance);
assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), ex.getResponse().getStatus());
assertThat(collector.collectSpoutThroughput).isEqualTo(expected);
assertThat(esConfig.toBasicSettings().get("cluster.name"), is(clusterName));
assertEquals(tableFieldMapping.getTable(), responseMapping.getTable()); assertTrue(tableFieldMapping.getMappings().equals(responseMapping.getMappings()));
assertThat(map.get("key1")).isEqualTo(1); assertThat(map.get("key1")).isEqualTo(1); assertThat(map.get("key2")).isEqualTo(3);
assertEquals(result2, result1); assertNotSame(result3, result2); assertEquals(result4, result1);
assertTrue(mergedEstimate >= expectedCardinality - (3 * se)); assertTrue(mergedEstimate <= expectedCardinality + (3 * se)); assertEquals(mergedEstimate, baselineEstimate);
assertEquals(table.getName(), responseTable.getName()); assertEquals(table.getTtl(), responseTable.getTtl());
assertEquals(expectedTokens, actualTokens);
assertThat(first.compareTo(second)).isEqualTo(expCompareToValue);
assertThat(collector.collectSpoutLatency).isEqualTo(expected);
assertThat(summer.isZero(0L)).isTrue(); assertThat(summer.isZero(NON_ZERO)).isFalse();
assertEquals(correctIdx[i], indexes[i]);
assertEquals(ImmutableMap.of(key, value), lists.iterator().next().get(0));
assertEquals("onekey2val2|", hash);
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertTrue(response.isExists()); assertFalse(response.isExists());
assertEquals(1, KafkaUtils.calculatePartitionsForTask(globalPartitionInformation, numTasks, 0).size()); assertEquals(0, KafkaUtils.calculatePartitionsForTask(globalPartitionInformation, numTasks, 1).size());
assertEquals(2, brokerInfo.getOrderedPartitions().size()); assertEquals(port, brokerInfo.getBrokerFor(partition).port); assertEquals(host, brokerInfo.getBrokerFor(partition).host); assertEquals(secondPort, brokerInfo.getBrokerFor(secondPartition).port); assertEquals(host, brokerInfo.getBrokerFor(secondPartition).host);
assertEquals("onekey1val1val5|key2val2|", hash);
assertEquals(DataStoreException.ErrorCode.STORE_SINGLE_SAVE, ex.getErrorCode());
assertEquals(1, vocabulary.count("only one").intValue()); assertEquals(2, vocabulary.count("we are 2").intValue()); assertEquals(0, vocabulary.count("I\'m not here").intValue());
assertEquals(expectedTokens, actualTokens);
assertFalse(list.isEmpty()); assertEquals(1, list.size()); assertArrayEquals(new Integer[]{1}, list.toArray()); assertFalse(list.isEmpty()); assertEquals(2, list.size()); assertArrayEquals(new Integer[]{1, 2}, list.toArray()); assertFalse(list.isEmpty()); assertEquals(3, list.size()); assertArrayEquals(new Integer[]{1, 2, 3}, list.toArray()); assertEquals(new Integer(1), list.first());
assertEquals(QueryStoreException.ErrorCode.INVALID_REQUEST, ex.getErrorCode());
assertEquals(expectedTokens, actualTokens);
assertEquals(1, instance.getK()); assertEquals(2, instance.getK()); assertEquals(3, instance.getK()); assertEquals(3, instance.getK()); assertEquals(4, instance.getK()); assertEquals(5, instance.getK()); assertEquals(6, instance.getK()); assertEquals(6, instance.getK()); assertEquals(7, instance.getK()); assertEquals(8, instance.getK()); assertEquals(8, instance.getK());
assertThat(one.zero()).isEqualTo(1);
assertThat(topology).isNotNull();
assertThat(topology).isNotNull();
assertThat(obj).isEqualTo(ANY_OBJECT);
assertEquals("one", hash);
assertEquals(mergedEstimate, baselineEstimate);
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), statusCode);
assertNull(distributedCache.get(null));
assertEquals(27, lc.computeCount());
assertEquals(expectedInstance, actualInstance);
assertTrue(Arrays.asList("A", "C", "X").contains(c.getItem()));
assertEquals(Response.Status.OK.getStatusCode(), statusCode);
assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), ex.getResponse().getStatus());
assertTrue(siddhiHandler.getSiddhiPlans().containsKey("testID"));
assertEquals(instance.size(), i);
assertEquals(partitionsPerTask, myManagedPartitions.size()); assertEquals(coordinator._taskIndex, myManagedPartitions.get(0).getPartition().partition);
assertNull(CountMinSketchAlt.merge());
assertTrue(Runner.getApplicationFromName(validName) instanceof IApplication);
assertThat(collector.collectSupervisorStats).isEqualTo(expected);
assertEquals(expectedResponse, response.getResult());
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertThat(collector.collectTopologyStats).isEqualTo(expected);
assertEquals(17, LogLog.rho(0, 16)); assertEquals(16, LogLog.rho(1, 16)); assertEquals(15, LogLog.rho(2, 16)); assertEquals(1, LogLog.rho(0x00008000, 16)); assertEquals(23, LogLog.rho(0, 10)); assertEquals(22, LogLog.rho(1, 10)); assertEquals(21, LogLog.rho(2, 10)); assertEquals(1, LogLog.rho(0x00200000, 10));
assertNull(response);
assertThat(BenchmarkUtils.avg(numbers)).isEqualTo(expected);
assertTrue(bf.membershipTest(k));
assertThat(declaredFields.getValue(), is(fields));
assertEquals("42", result.getStringValue());
assertEquals(expectedResponse, actualResponse.getResult());
assertThat(topology).isNotNull();
assertEquals(rs.get(pos), merged.get(pos));
assertThat(BenchmarkUtils.getInt(map, "key1", 1)).isEqualTo(1); assertThat(BenchmarkUtils.getInt(map, "key1", 1)).isEqualTo(2); assertThat(BenchmarkUtils.getInt(map, "key2", 1)).isEqualTo(3);
assertEquals(expectedTokens, actualTokens);
assertEquals(0.25, vocabulary.frequency("only one"), 0.001); assertEquals(0.5, vocabulary.frequency("we are 2"), 0.001); assertEquals(0.0, vocabulary.frequency("I\'m not here"), 0.001);
assertEquals(0.01, error, 0.01); assertEquals(0.01, error, 0.01); assertEquals(0.01, error, 0.01);
assertThat(strRepresentation).contains(obj.toString()).contains("" + count);
assertEquals(Response.Status.NOT_FOUND.getStatusCode(), ex.getResponse().getStatus());
assertEquals(request.getTable(), response.getTable()); assertTrue(request.getMappings().equals(response.getMappings()));
assertEquals(requestString, actualResponse);
assertEquals(2, actualPredictions.size()); assertNull(actualPredictions.get(0)); assertNull(actualPredictions.get(1));
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertTrue(response); assertFalse(response); assertFalse(response);
assertThat(reader.nextLine()).isEqualTo("first line"); assertThat(reader.nextLine()).isEqualTo("second line"); assertThat(reader.nextLine()).isEqualTo("third line"); assertThat(reader.nextLine()).isEqualTo("first line");
assertFalse(r.equals(notARankable), r + " is equal to " + notARankable + " but it should not be");
assertEquals(tableFieldMapping.getTable(), mapping.getTable()); assertTrue(tableFieldMapping.getMappings().equals(mapping.getMappings()));
assertEquals(2, labels.size()); assertNull(labels.get(0)); assertNull(labels.get(1));
assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), statusCode);
assertSame(instance.getBit(i), b);
assertEquals(4, list.size()); assertArrayEquals(new Integer[]{1, 2, 3, 4}, list.toArray()); assertEquals(5, list.size()); assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, list.toArray()); assertEquals(new Integer(5), list.last()); assertEquals(node5, list.head());
assertEquals(128, cte.cardinality()); assertFalse(cte.tipped()); assertEquals(256, cte.cardinality()); assertTrue(clone.tipped()); assertEquals(0.1, error, 0.1);
assertThat(dir).exists(); assertThat(writer).isNotNull(); assertThat(file).exists();
assertEquals(4, cbf.maxBucket());
assertThat(topology).isNotNull();
assertThat(reducer.zero()).isEmpty();
assertEquals(ANY_WORDS.length, rets.length); assertEquals(ANY_WORDS[i], rets[i]);
assertThat(rankings.maxSize()).isEqualTo(topN);
assertEquals(value, lists.iterator().next().get(0));
assertEquals(expectedResponse, response.getResult());
assertEquals(QueryStoreException.ErrorCode.DOCUMENT_NOT_FOUND, qse.getErrorCode());
assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), ex.getResponse().getStatus());
assertThat(one.combine(ANY_INT_ONE, ANY_INT_TWO)).isEqualTo(1);
assertEquals(QueryStoreException.ErrorCode.DOCUMENT_NOT_FOUND, qse.getErrorCode());
assertEquals(result1.length, 10); assertEquals(result2.length, 10); assertArrayEquals(result1, result2); assertEquals(result3.length, 5); assertEquals(result3[i], result1[i]);
assertThat(combined) .isNotNull() .hasSize(4) .contains(1, 2, 3, 4);
assertThat(writer).isNotNull(); assertThat(dir).exists(); assertThat(file).exists();
assertEquals(expResult, result); assertEquals(expResult, result);
assertEquals(1L, result.getLongValue());
assertThat(actualState).isEqualTo(new AccuracyState<Boolean>(0, 0));
assertEquals(expectedResponse, returnResponse); assertEquals(GroupResponse.class.cast(expectedResponse).getResult(), actualResponse.getResult());
assertTrue(filter.membershipTest("hello")); assertFalse(filter.membershipTest("hello"));
assertThat(summer.zero()).isEqualTo(0L);
assertEquals(expectedTokens, actualTokens);
assertThat(topology).isNotNull();
assertThat(summer.reduce(v1, v2)).isEqualTo(sum);
assertEquals(Response.Status.OK.getStatusCode(), statusCode);
assertEquals(instance.getK(), 7); assertEquals(expResult, result, 0.000009); assertEquals(instance.getK(), 7); assertEquals(expResult, result, 0.000009); assertEquals(1, instance.getK()); assertEquals(expResult, result, 0.0005); assertEquals(8, instance.getK()); assertEquals(expResult, result, 0.00001);
assertEquals(request.getTable(), response.getTable()); assertTrue(request.getMappings().equals(response.getMappings()));
assertThat(collector.collectThroughputMB).isEqualTo(expected);
assertNotNull(countResponse); assertEquals(2, countResponse.getCount());
assertSame(instance.getBit(i), false);
assertEquals(QueryStoreException.ErrorCode.NO_SUCH_TABLE, qse.getErrorCode());
assertEquals(NonCacheableAction.class, queryExecutor.resolve(new NonCacheableActionRequest()).getClass());
assertEquals(DataStoreException.ErrorCode.STORE_SINGLE_SAVE, ex.getErrorCode());
assertTrue(instance1.hashCode() == instance2.hashCode()); assertTrue(instance1.hashCode() == instance2.hashCode()); assertTrue(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode()); assertFalse(instance1.hashCode() == instance2.hashCode());
assertEquals(cardinality, instance.cardinality(), 100);
assertEquals(result1, result2);
assertEquals(expectedTokens, actualTokens);
assertThat(batches) .hasSize(2) .containsKey(0L) .containsKey(1L); assertThat(batches.get(0L)).hasSize(10); assertThat(batches.get(1L)).hasSize(10);
assertThat(earliestOffset, is(equalTo(offsetFromConfig)));
assertTrue(responseKeys.contains(name));
assertThat(count).isEqualTo(ANY_COUNT);
assertEquals(Arrays.asList("test"), scheme.deserializeKeyAndValue(null, "test".getBytes()));
assertThat(topology).isNotNull();
assertTrue(siddhiHandler.getSiddhiPlans().isEmpty());
assertThat(topology).isNotNull();
assertSame(instance.getBit(i), true); assertSame(instance.getBit(i), false);
assertEquals(2, labels.size()); assertTrue(labels.get(0)); assertFalse(labels.get(1));
assertThat(reducer.isZero(new HashSet<Object>())).isTrue();
assertThat(rankings.maxSize()).isGreaterThan(0);
assertEquals(expectedTokens, actualTokens);
assertNull(tableMapStore.load(UUID.randomUUID().toString()));
assertEquals(1L, set.put(e[0])); assertEquals(e[0], set.peek().getItem()); assertEquals(e[0], ((SampleSet<String>) set).peekMin());
assertEquals(2, brokerInfo.getOrderedPartitions().size()); assertEquals(port, brokerInfo.getBrokerFor(partition).port); assertEquals(host, brokerInfo.getBrokerFor(partition).host); assertEquals(port, brokerInfo.getBrokerFor(secondPartition).port); assertEquals(host, brokerInfo.getBrokerFor(secondPartition).host);
assertEquals(expectedInstance, actualInstance);
assertThat(TupleHelpers.isTickTuple(MockTupleHelpers.mockTickTuple())).isTrue(); assertThat(TupleHelpers.isTickTuple(MockTupleHelpers.mockAnyTuple())).isFalse();
assertThat(collector.collectThroughput).isEqualTo(expected);
assertEquals(DataStoreException.ErrorCode.STORE_MULTI_SAVE, ex.getErrorCode());
assertTrue(response.isExists()); assertFalse(response.isExists());
assertNull(distributedCache.get("DUMMY_KEY_GET"));
assertThat(init) .isNotNull() .hasSize(1) .contains(1);
assertThat(r.hashCode()).isEqualTo(trueDuplicate.hashCode());
assertEquals(DataStoreException.ErrorCode.STORE_NO_DATA_FOUND_FOR_IDS, ex.getErrorCode());
assertThat(reducer.reduce(set1, set2)).isEqualTo(union);
assertTrue("False negative", filter.membershipTest("idx_" + i)); assertTrue("Too many false positives", falsePos <= filter.getError());
assertThat(pageView.status).isEqualTo(200); assertThat(pageView.zipCode).isEqualTo(100000); assertThat(pageView.userID).isEqualTo(1); assertThat(pageView.toString()).isEqualTo(pvString);
assertEquals(expectedInstance, actualInstance);
assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), ex.getResponse().getStatus());
assertEquals(table.getName(), response.getName()); assertEquals(table.getTtl(), response.getTtl());
assertNull(x.floor(new TDigest.Group(-30)));
assertThat(r.hashCode()).isNotEqualTo(falseDuplicate.hashCode());
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertEquals(Response.Status.OK.getStatusCode(), response.getStatus()); assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
assertThat(latestOffset, is(equalTo(offsetFromConfig)));
assertEquals(QueryStoreException.ErrorCode.INVALID_REQUEST, ex.getErrorCode());
assertFalse(instance.contains(UUID.randomUUID().toString()));
assertEquals(DataStoreException.ErrorCode.STORE_MULTI_SAVE, ex.getErrorCode());
assertThat(collector.collectExecutorStats).isEqualTo(expected);
assertEquals(Arrays.asList(ImmutableMap.of("key", "test")), scheme.deserializeKeyAndValue("key".getBytes(), "test".getBytes()));
assertEquals(expectedResponse, response);
assertEquals(Math.ceil(1.203972), Math.ceil(value), 0);
assertNull(tableMapStore.load(UUID.randomUUID().toString()));
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertEquals(Response.Status.OK.getStatusCode(), statusCode);
assertThat(stats).containsKey(id); assertThat(stats.get(id)).isNotNull().contains(lat);
assertEquals(1, brokerInfo.getOrderedPartitions().size()); assertEquals(port, brokerInfo.getBrokerFor(partition).port); assertEquals(host, brokerInfo.getBrokerFor(partition).host);
assertEquals(655403, testSet[0]); assertEquals(655425, testSet[1]); assertEquals(655416, testSet[2]);
assertEquals(expectedResponse, groupResponse.getResult());
assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());
assertThat(MetricsUtils.getTopologySummary(cs, tsName)).isEqualTo(ts); assertThat(MetricsUtils.getTopologySummary(cs, fakeName)).isNull();
assertThat(actualState).isEqualTo(new AccuracyState<Boolean>(1, 0));
assertThat(topology).isNotNull();
assertTrue(executionPlans.containsAll(siddhiHandler.list())); assertTrue(siddhiHandler.list().containsAll(executionPlans));
assertThat(e).hasMessage("baseUrl == null"); assertThat(e).hasMessage("baseUrl == null");
assertEquals(0, emptyUrl.getTrafficStatsTag());
assertEquals(request.getMethod(), Method.OPTIONS); assertEquals("OPTIONS", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertEquals(request.getMethod(), Method.TRACE); assertEquals("TRACE", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertEquals(null, HttpUrl.get(uri));
assertEquals(Arrays.asList("bar", "baz", "bak"), headers.values("foo")); assertEquals(Arrays.asList("pong"), headers.values("ping")); assertEquals(Arrays.asList("kat"), headers.values("kit"));
assertThat(s).isEqualTo("{\\"key\\" : \\"value\\"}");
assertEquals(request.getMethod(), Method.PATCH); assertEquals("PATCH", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertEquals(request.getMethod(), Method.PATCH); assertEquals("PATCH", mockConnection.getRequestMethod()); assertTrue(mockConnection.getDoOutput());
assertEquals(request.getMethod(), Method.POST); assertEquals("POST", mockConnection.getRequestMethod()); assertTrue(mockConnection.getDoOutput());
assertThat(body.theName).isEqualTo("value"); assertThat(sRequest.getBody().readUtf8()).isEqualTo("{\\"theName\\":\\"value\\"}"); assertThat(sRequest.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8"); assertThat(sRequest.getHeader("Accept")).isEqualTo("application/json");
assertTrue(low.compareTo(high) > 0); assertTrue(high.compareTo(low) < 0); assertTrue(low.compareTo(low2) < 0); assertTrue(low.compareTo(immediate) > 0); assertTrue(immediate.compareTo(high) < 0);
assertEquals(null, HttpUrl.get(uri));
assertEquals(request.getMethod(), Method.PUT); assertEquals("PUT", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertThat(body.getName()).isEqualTo("value"); assertThat(sRequest.getBody().readUtf8()).isEqualTo("{\\"name\\":\\"value\\"}"); assertThat(sRequest.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8"); assertThat(sRequest.getHeader("Accept")).isEqualTo("application/json");
assertEquals(request.getMethod(), Method.DELETE); assertEquals("DELETE", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertEquals(null, HttpUrl.get(javaNetUrl));
assertEquals(request.getMethod(), Method.GET); assertEquals("GET", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertEquals(request.getMethod(), Method.POST); assertEquals("POST", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertThat(e).hasMessage("requestQueue == null");
assertEquals(request.getMethod(), Method.PUT); assertEquals("PUT", mockConnection.getRequestMethod()); assertTrue(mockConnection.getDoOutput());
assertThat(sRequest.getBody().readUtf8()).isEqualTo("{}"); assertThat(sRequest.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8"); assertThat(sRequest.getHeader("Accept")).isEqualTo("application/json");
assertEquals(request.getMethod(), Method.HEAD); assertEquals("HEAD", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput());
assertThat(e).hasMessageStartingWith("Cannot find converter for " + ":NetworkResponse{contentType=application/json, statusCode=200, data={\\"key\\"" + " " + ": \\"value\\"}, headers=Content-Type: application/json\\n" + ", networkTimeNs=0}, tried:");
assertTrue(registry.getRegisteredListeners().containsKey("test"));
assertTrue(lastPaginatedSession.isPresent()); assertEquals(lastPaginatedSession.get(), paginatedSession);
assertNotNull(listenerRegistry); assertEquals(3, copy.getRegisteredListeners().size());
assertTrue(test); assertTrue(!registry.contains("test"));
assertEquals(this.icon, icon);
assertEquals("test", test.getIdentifier()); assertEquals(Integer.valueOf(2), test.getListener());
assertEquals(allByTemplate.size(), 2); assertTrue(allByTemplate.contains(vasyaSes)); assertTrue(allByTemplate.contains(petyaSes));
assertEquals("id", registeredListener.getIdentifier().a); assertEquals("listener", registeredListener.getListener().a); assertEquals("id", registeredListener.getIdentifier().a); assertEquals("listener", registeredListener.getListener().a);
assertTrue(session.isPresent()); assertEquals(session.get(), vasyaSes); assertTrue(session1.isPresent()); assertEquals(session1.get(), petyaSes);
assertTrue(session.getItemByIndex(2).isPresent()); assertTrue(session.getItemByIndex(16).isPresent()); assertEquals(session.getItemByIndex(2).get(), item1); assertEquals(session.getItemByIndex(16).get(), item2);
assertTrue(registry.getRegisteredListeners().containsKey("registry")); assertTrue(registry.getRegisteredListeners().containsKey("registry2")); assertTrue(registry.getRegisteredListeners().containsKey("registry3"));
assertTrue(call);
assertThat(NhsCodeValidator.nhsNumberValid("0123456789")).isTrue(); assertThat(NhsCodeValidator.nhsNumberValid(null)).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid("")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid("012345678")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid("01234567890")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid("012345678A")).isFalse();
assertThat(read.trim(), is(EXPECTED_CONTENT));
assertThat(questionGroup.getSections().size(), Is.is(1)); assertThat(questionGroup.getSections().get(0).getName(), Is.is("Misc")); assertThat(questionGroup.getSections().get(0).getSectionQuestions().size(), Is.is(1)); assertThat(questionGroup.getSections().get(0).getSectionQuestions().get(0).getText(), Is.is("Q2")); assertThat(result, Is.is("success"));
assertThat(equalInstallments.size(), is(20));
assertThat(cashFlowForm.getTotalExpenses().doubleValue(), is(76d)); assertThat(cashFlowForm.getTotalRevenues().doubleValue(), is(55d));
assertThat(customizedTextDto.getOriginalText(), is(originalText)); assertThat(customizedTextDto.getCustomText(), is(customText));
assertThat(changeSets, is(not(nullValue()))); assertThat(changeSets.size(), is(2));
assertThat(result, is("failure"));
assertThat(result, Is.is("failure"));
assertThat(view, Is.is("viewQuestionGroupDetail"));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("48.0"))));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("56.0"))));
assertThat(cashFlowDetail.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowDetail.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowDetail.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowDetail.shouldForValidateIndebtednessRate(), is(true));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("62.8"))));
assertThat(equalInstallments.get(0).getPrincipal(), is(TestMoneyUtil.createMoney("10"))); assertThat(TestMoneyUtil.moneyOf(equalInstallments.get(0).getInterest()), is(TestMoneyUtil.moneyOf("0.8")));
assertThat(individualLoan, is(notNullValue()));
assertThat(result, Is.is("success"));
assertThat((List<QuestionGroupInstanceDetail>) flow.getObjectFromSession("questionGroupInstances"), is(instanceDetails));
assertThat(equalInstallments.get(0).getPrincipal(), is(TestMoneyUtil.createMoney("100"))); assertThat(equalInstallments.get(0).getInterest(), is(loanInterest));
assertThat(questionGroupReferences, is(notNullValue())); assertThat(questionGroupReferences.size(), is(3)); assertThat(qgReferences[0].getQuestionGroupId(), is(1)); assertThat(qgReferences[1].getQuestionGroupId(), is(2)); assertThat(qgReferences[2].getQuestionGroupId(), is(3));
assertThat(result, is("failure"));
assertEquals(expected, result);
assertThat(actual.get(0),new MonthlyCashFlowFormMatcher(expected.get(0))); assertThat(actual.get(1),new MonthlyCashFlowFormMatcher(expected.get(1)));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("80.0"))));
assertThat(result, Is.is("success"));
assertThat(TestMoneyUtil.moneyOf(equalInstallments.get(0).getPrincipal()), is(TestMoneyUtil.moneyOf("0.0"))); assertThat(TestMoneyUtil.moneyOf(equalInstallments.get(0).getInterest()), is(TestMoneyUtil.moneyOf("0.8")));
assertThat(result, is("success"));
assertThat(loanDurationCalculator, is(instanceOf(LoanDurationInAccountingYearsCalculatorFactoryForMonthlyRecurrence.class)));
assertThat((List<QuestionGroupInstanceDetail>) flow.getObjectFromSession("questionGroupInstances"), is(instanceDetails));
assertThat(result, is("failure"));
assertThat(eventSources.get("Create.Client"), Is.is("Create Client")); assertThat(eventSources.get("View.Client"), Is.is("View Client"));
assertThat(view, Is.is("viewQuestionGroupDetail"));
assertThat(questionGroup.getSections().size(), Is.is(1)); assertThat(questionGroup.getSections().size(), Is.is(0));
assertThat(view, Is.is("viewQuestionGroupDetail"));
assertThat(unRunChangeSetInfo1.getId(), is("id1")); assertThat(unRunChangeSetInfo1.getAuthor(), is("author1")); assertThat(unRunChangeSetInfo1.getContexts(), is("["+EXPANSION+"]"));
assertThat(result, is("failure"));
assertThat(result, is("failure"));
assertThat((List<QuestionGroupInstanceDetail>) flow.getObjectFromSession("questionGroupInstances"), is(instanceDetails));
assertThat(result, is("failure"));
assertTrue("given nearest matching valid date is same as date provided, then dibursement date should be valid.", result);
assertThat(calculatedInterest, is(TestMoneyUtil.createMoney("10.0")));
assertThat(sectionQuestions, Is.is(notNullValue())); assertThat(sectionQuestions.size(), Is.is(0));
assertThat(result, is("failure"));
assertThat(filteredQuestionGroupDetails, is(questionGroupDetails));
assertThat(controller.getAllCountriesForPPI(), is(countries));
assertThat(sectionQuestions, Is.is(notNullValue())); assertThat(sectionQuestions.size(), Is.is(2)); assertThat(sectionQuestions.get(0).getQuestionId(), Is.is(1)); assertThat(sectionQuestions.get(0).getText(), Is.is("Q1")); assertThat(sectionQuestions.get(1).getQuestionId(), Is.is(2)); assertThat(sectionQuestions.get(1).getText(), Is.is("Q2"));
assertThat(result, is("failure"));
assertThat(result, Is.is("failure"));
assertThat(new String(converted).trim(), is(EXPECTED_CONTENT));
assertThat(newString, is("This is the custom message")); assertThat(newString, is("The Administrator function is performed by admins, Administrators and Administratoristrators")); assertThat(newString, is("Many People have a Person"));
assertThat(equalInstallments.size(), is(1));
assertThat(result, is("failure"));
assertThat(view, Is.is("viewQuestionGroupDetail"));
assertThat(loanDurationCalculator, is(instanceOf(LoanDurationInAccountingYearsCalculatorFactoryForWeeklyRecurrence.class)));
assertEquals(expected, result);
assertEquals(expected, result);
assertThat(result, is("success"));
assertThat((List<QuestionGroupInstanceDetail>) flow.getObjectFromSession("questionGroupInstances"), is(instanceDetails));
assertThat(result, is("failure"));
assertThat(loanDurationCalculator, is(instanceOf(LoanDurationInAccountingYearsCalculatorFactoryForDailyRecurrence.class)));
assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(false)); assertThat(cashFlowForm.shouldForValidateIndebtednessRate(), is(true));
assertThat(result, is("failure"));
assertEquals(expected, result);
assertThat(result, Is.is(notNullValue())); assertThat(result, Is.is("failure"));
assertThat(result, is("failure"));
assertThat(result, is("success"));
assertThat(result, is("failure"));
assertEquals(2, found.length);
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("62.8"))));
assertThat(view, Is.is("viewQuestionGroups"));
assertThat(result, Is.is(notNullValue())); assertThat(result, Is.is("failure"));
assertThat(equalInstallments.get(0).getPrincipal(), is(TestMoneyUtil.createMoney("100"))); assertThat(equalInstallments.get(0).getInterest(), is(loanInterest));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("56.0"))));
assertThat(result, is(nextMatchingDate.toLocalDate()));
assertThat(questionGroup.getSections().size(), Is.is(1)); assertThat(questionGroup.getSections().get(0).getName(), Is.is("sectionName")); assertThat(questionGroup.getSections().get(0).getSectionQuestions().size(), Is.is(1)); assertThat(questionGroup.getSections().get(0).getSectionQuestions().get(0).getText(), Is.is("Q1")); assertThat(result, Is.is("success"));
assertThat(cashFlowForm, new CashFlowFormMatcher(expectedCashFlowForm));
assertThat(result, is("failure"));
assertThat(equalInstallments.get(0).getPrincipal(), is(TestMoneyUtil.createMoney("10"))); assertThat(TestMoneyUtil.moneyOf(equalInstallments.get(0).getInterest()), is(TestMoneyUtil.moneyOf("0.8")));
assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney("81.6"))));
assertThat(sectionQuestions, Is.is(notNullValue())); assertThat(sectionQuestions.size(), Is.is(2)); assertThat(sectionQuestions.get(0).getQuestionId(), Is.is(1)); assertThat(sectionQuestions.get(0).getText(), Is.is("Q1")); assertThat(sectionQuestions.get(1).getQuestionId(), Is.is(2)); assertThat(sectionQuestions.get(1).getText(), Is.is("Q2"));
assertTrue(files.size() > 5);
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(4).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(5).getStereo(), is(IBond.Stereo.NONE));
assertThat(texts.size(), is(2)); assertThat(texts.get(0).text, is("t")); assertThat(texts.get(0).style, is(AbbreviationLabel.STYLE_ITALIC)); assertThat(texts.get(1).text, is("Bu")); assertThat(texts.get(1).style, is(AbbreviationLabel.STYLE_NORMAL));
assertThat(smarts, is("n(ccc(a)a)a"));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstMapping().size());
assertNotNull(atomContainer);
assertTrue(state.feasible(0, 0)); assertFalse(state.feasible(0, 0));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertThat(writtenMol, containsString( " 1 F 3 9 7 8\\n"+ "M ALS 1 3 F F N O"));
assertThat(writtenMol, containsString( " 1 T 3 9 7 8\\n" + "M ALS 1 3 T F N O"));
assertEquals(1, permutationParity.parity(new long[]{4, 3, 2, 1}));
assertThat(perpendicular.x, closeTo(-2d, 0.01)); assertThat(perpendicular.y, closeTo(5d, 0.01));
assertThat(sw.toString(), containsString("2D"));
assertTrue(matcher.matches(atom));
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertThat(m.getBond(m.getAtom(1), m.getAtom(0)).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(m.getAtom(1), m.getAtom(6)).getStereo(), is(IBond.Stereo.UP));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(1).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE));
assertEquals(3, instance.getSize()); assertEquals(expectedValue, instance.getLabelID("R3"));
assertThat(getGeometricParity(encoder).parity(), is(-1));
assertThat(smarts, is("[nH1v3X3+0][cH1v4X3+0][cH1v4X3+0][cH0v4X3+0]"));
assertThat(shapes.size(), is(2));
assertThat(mol.getAtom(2).getPoint2d().x - mol.getAtom(1).getPoint2d().x, is(greaterThan(SDG.getBondLength())));
assertEquals(TOGETHER, geometric.parity());
assertNotNull(atom.getPoint2d()); assertThat(mol.getAtom(0).getPoint2d().distance(mol.getAtom(1).getPoint2d()), closeTo(1.5*SDG.getBondLength(), 0.001)); assertThat(mol.getAtom(4).getPoint2d().distance(mol.getAtom(5).getPoint2d()), closeTo(1.5*SDG.getBondLength(), 0.001));
assertThat(a.getMassNumber(), is(14));
assertThat(part.getAtomCount(), is(3)); assertThat(part.getBondCount(), is(2));
assertThat(new CDKToBeam().toBeamAtom(new PseudoAtom("R")).hydrogens(), is(0)); assertThat(new CDKToBeam().toBeamAtom(new PseudoAtom("*")).hydrogens(), is(0)); assertThat(new CDKToBeam().toBeamAtom(new PseudoAtom("R1")).hydrogens(), is(0));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(4).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(5).getStereo(), is(IBond.Stereo.NONE));
assertThat(mol.getAtomCount(), CoreMatchers.is(31));
assertEquals(0.9, output, 0.1);
assertThat(unit.x, closeTo(0.707d, 0.01)); assertThat(unit.y, closeTo(-0.707d, 0.01)); assertThat(unit.length(), closeTo(1d, 0.01));
assertThat(getGeometricParity(encoder).parity(), is(1));
assertNotNull(instance.getAllMapping()); assertEquals(1, instance.getAllMapping().size());
assertTrue(siter.hasNext()); assertThat(se, is(instanceOf(ITetrahedralChirality.class))); assertThat(((ITetrahedralChirality) se).getStereo(), is(ITetrahedralChirality.Stereo.CLOCKWISE)); assertThat(((ITetrahedralChirality) se).getLigands(), is(new IAtom[]{container.getAtom(1), container.getAtom(3), container.getAtom(4), container.getAtom(0)})); assertFalse(siter.hasNext());
assertThat(mol.getAtom(11).getSymbol(), is("H")); assertThat(mol.getAtom(12).getSymbol(), is("H")); assertThat(mol.getAtom(13).getSymbol(), is("H")); assertThat(mol.getAtom(14).getSymbol(), is("H")); assertThat(mol.getAtom(15).getSymbol(), is("H")); assertThat(mol.getAtom(16).getSymbol(), is("H"));
assertFalse(suppressed.contains(0)); assertTrue(suppressed.contains(1)); assertFalse(suppressed.contains(2)); assertFalse(suppressed.contains(3)); assertTrue(suppressed.contains(4));
assertThat(m.fix(), is(new int[][]{{0, 1, 1, 0, 1}, {1, 0, 0, 1, 0}, {0, 0, 0, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0},}));
assertTrue(matcher.matches(atom));
assertThat(MDLV2000Reader.dataHeader("> <MELTING.POINT> "), is("MELTING.POINT"));
assertThat(MmffAromaticTypeMapping.contribution(8, 2, 2), is(2));
assertFalse(suppressed.contains(0)); assertFalse(suppressed.contains(1)); assertFalse(suppressed.contains(2)); assertFalse(suppressed.contains(3)); assertFalse(suppressed.contains(4));
assertThat(MolecularFormulaManipulator.getString(mf, false, false), is("C7H3Br2O3")); assertThat(MolecularFormulaManipulator.getString(mf, false, true), is("C7H3Br[81]BrO3"));
assertThat(generator.generate(new long[]{1L, 2L, 1L}, StereoEncoder.EMPTY, new int[][]{{1}, {0, 2}, {1}}, Suppressed.none()), is(second));
assertThat(state.nextN(-1), is(4));
assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01));
assertThat(bond.getStereo(), is(IBond.Stereo.NONE));
assertThat(map.size(), CoreMatchers.is(222)); assertThat(mol.getAtomCount(), CoreMatchers.is(327));
assertThat(fp.getCountForHash("cccc".hashCode()), is(2)); assertThat(fp.getCountForHash("Oc0c".hashCode()), is(1)); assertThat(fp.getCountForHash("c0cc".hashCode()), is(1)); assertThat(fp.getCountForHash("0ccc".hashCode()), is(1)); assertThat(fp.getCountForHash("ccc0".hashCode()), is(1));
assertThat(c2g.toBeamEdge(b, mock), is(uk.ac.ebi.beam.Bond.DOUBLE.edge(0, 1)));
assertThat(nearest.x, closeTo(0.707d, 0.01)); assertThat(nearest.y, closeTo(0.707d, 0.01));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.UP_OR_DOWN));
assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond), is(0));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE));
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 3, 2, 4}));
assertThat(container.getBondCount(), is(8)); assertNotNull(sgroups); assertThat(sgroups.size(), is(1)); assertThat(sgroups.get(0).getType(), is(SgroupType.ExtMulticenter));
assertThat(StandardAtomGenerator.accessPseudoLabel(atom, "*"), is("R1"));
assertTrue(isaromatic);
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertTrue(ses.hasNext()); assertThat(se, is(instanceOf(ExtendedTetrahedral.class))); assertThat(element.peripherals(), is(new IAtom[]{container.getAtom(5), container.getAtom(0), container.getAtom(1), container.getAtom(6)})); assertThat(element.focus(), is(container.getAtom(4))); assertThat(element.winding(), is(ITetrahedralChirality.Stereo.ANTI_CLOCKWISE));
assertThat(c2g.toBeamEdge(b, mock), is(uk.ac.ebi.beam.Bond.TRIPLE.edge(0, 1)));
assertThat(dCount, is(5));
assertEquals(label, result);
assertThat(c2g.toBeamEdge(b, mock), is(uk.ac.ebi.beam.Bond.AROMATIC.edge(0, 1)));
assertNotNull(instance.getFirstAtomMapping());
assertThat(MolecularFormulaManipulator.getString(mf, false, false), is("C7H3Br2O3")); assertThat(MolecularFormulaManipulator.getString(mf, false, true), is("C7H3Br[81]BrO3"));
assertThat(output, containsString("M STY 3 1 SUP 2 SUP 3 SUP\\n")); assertThat(output, containsString("M SDS EXP 1 1"));
assertThat(sw.toString(), not(containsString("M ISO 1 1 12")));
assertEquals(expResult, result);
assertThat(sw.toString(), containsString("3D"));
assertEquals(score, smsd1.getFragmentSize(0));
assertFalse(MmffAromaticTypeMapping.isAromaticRing(cycle, contr, dbs, arom));
assertNotNull(smsd1.getFirstMapping());
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3, 4}));
assertThat(a.getSymbol(), is("O")); assertThat(a.getImplicitHydrogenCount(), is(2));
assertTrue(v + " was not within 0.1 % of a uniform distribution", 99000 <= v && v <= 101000);
assertThat(x, is(not(8L)));
assertTrue(GeometricDoubleBondEncoderFactory.accept(atom, bonds)); assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds)); assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds));
assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.none()), is(new long[]{1L, 1L, 1L}));
assertEquals(2.0, output, 0.1);
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertThat(CxSmilesParser.unescape("&#36;"), is("$")); assertThat(CxSmilesParser.unescape("&#127;"), is("\\u007F")); assertThat(CxSmilesParser.unescape("&#9;"), is("\\t"));
assertEquals(ac.getAtomCount(), refinable.getVertexCount());
assertNotNull(ExactMapping.extractMapping(new ArrayList<List<Integer>>(), new ArrayList<Integer>(), new ArrayList<Integer>()));
assertTrue(Aromaticity.cdkLegacy().apply(mol));
assertThat(MmffAromaticTypeMapping.contribution(7, 2, 3), is(1));
assertThat(m.getBond(m.getAtom(1), m.getAtom(0)).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(m.getAtom(1), m.getAtom(6)).getStereo(), is(IBond.Stereo.DOWN));
assertEquals(expResult, result.getAtomCount());
assertThat(generator.generate(new long[]{1L, 2L, 1L}, StereoEncoder.EMPTY, new int[][]{{1}, {0, 2}, {1}}, Suppressed.none()), is(second)); assertThat(generator.generate(new long[]{1L, 2L, 1L}, StereoEncoder.EMPTY, new int[][]{{1}, {0, 2}, {1}}, Suppressed.fromBitSet(suppressed)), is(second));
assertTrue(querytool.matches(indole));
assertThat(state.nextM(0, -1), is(2));
assertEquals(OPPOSITE, geometric.parity());
assertThat(label, is(CIPTool.CIP_CHIRALITY.Z));
assertThat(set.size(), is(6)); assertTrue(set.contains(0)); assertTrue(set.contains(1)); assertTrue(set.contains(2)); assertTrue(set.contains(3)); assertTrue(set.contains(4)); assertTrue(set.contains(5));
assertThat(container.getSingleElectronCount(), is(1)); assertThat(container.getAtom(0).getImplicitHydrogenCount(), is(3));
assertEquals(result.getAtom(i).getSymbol(), container.getAtom(i).getSymbol()); assertEquals(result.getAtom(i).getID(), container.getAtom(i).getID());
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15521419, 1, 15521419, 1, 1}));
assertThat(VecmathUtil.extent(new Vector2d(1, 0)), is(closeTo(Math.toRadians(0), 0.01)));
assertEquals("%!PS-Adobe-3.0 EPSF-3.0", lines[0]); assertEquals("%%BoundingBox: 0 0 92 33", lines[1]);
assertThat(StandardAtomGenerator.chargeAdjunctText(2, 0), is("2+"));
assertThat(smarts, is("[CH3v4X4+0]"));
assertThat(state.nextM(0, -1), is(0)); assertThat(state.nextM(0, 0), is(1)); assertThat(state.nextM(0, 1), is(2)); assertThat(state.nextM(0, 2), is(3));
assertThat(encoder(generator), is(not(StereoEncoderFactory.EMPTY)));
assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.none()), is(new long[]{expected, expected, expected}));
assertThat(new SmilesGenerator(SmiFlavor.AtomicMassStrict).create(mol), is("[12CH3]C"));
assertEquals(UNSPECIFIED, geometric.parity());
assertThat(sw.toString(), containsString("M ISO 1 1 12"));
assertThat(new Tetrahedral3DParity(coords).parity(), is(CLOCKWISE));
assertThat(bond.getStereo(), is(IBond.Stereo.NONE));
assertNotNull(h1.getPoint2d());
assertTrue(mmff.assignAtomTypes(mol)); assertTrue(mmff.partialCharges(mol)); assertThat(mol.getProperties().size(), is(sizeBefore));
assertTrue(matcher.matches(atom));
assertTrue(g1 instanceof PerturbedAtomHashGenerator);
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertTrue(new CDKToBeam().toBeamAtom(a).aromatic());
assertTrue(smsd1.isSubgraph(true));
assertThat(new CDKToBeam().toBeamAtom(a).isotope(), is(13));
assertThat(StandardAtomGenerator.accessPseudoLabel(atom, "*"), is("*"));
assertEquals(4, smsd1.getAllAtomMapping().size());
assertThat(new Bounds(2, 2, 7, 6).height(), is(closeTo(4d, 0.1)));
assertNotNull(bond.getOrder()); assertThat(container.getBond(4).getOrder(), is(IBond.Order.UNSET));
assertEquals(TOGETHER, geometric.parity());
assertThat(encoded, is("CO |(12.5,5.5,;4.0,2.0,)|"));
assertFalse(state.feasible(i, j));
assertTrue(matcher.matches(atom));
assertThat(nSize5, is(5)); assertThat(nSize6, is(5));
assertEquals(expResult, result);
assertThat(deref, CoreMatchers.<IAtom>instanceOf(QueryAtom.class)); assertThat(expr, is(expected));
assertThat(deref, CoreMatchers.<IAtom>instanceOf(QueryAtom.class)); assertThat(expr, is(expected));
assertThat(mol.getAtomCount(), is(108));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertEquals(expResult.getBondCount(), result.getBondCount());
assertNotNull(atom.getPoint2d()); assertThat(mol.getAtom(0).getPoint2d().distance(mol.getAtom(1).getPoint2d()), closeTo(1.5*SDG.getBondLength(), 0.001));
assertThat(MmffAromaticTypeMapping.contribution(7, 2, 2), is(2));
assertThat(GeometryTools.getBondLengthMedian(container), is(1.5));
assertEquals(7, smsd1.getFirstMapping().size());
assertEquals(3, mappings.size()); assertEquals(2, expResult.size());
assertNotNull(forceFieldConfigurator.getParameterSet()); assertEquals("Csp2", atomtype1.getAtomTypeName()); assertEquals(6, (int) atomtype1.getAtomicNumber()); assertEquals(12, (int) atomtype1.getMassNumber());
assertEquals(new IntegerInvariant(1), bondRefinable.neighboursInBlock(block, 0)); assertEquals(new IntegerInvariant(1), bondRefinable.neighboursInBlock(block, 2));
assertThat(VecmathUtil.extent(new Vector2d(-1, 0)), is(closeTo(Math.toRadians(180), 0.01)));
assertThat(sdf, CoreMatchers.containsString("ThisIsAVeryLongFieldThatShouldBeWrappedThisIsAVeryLongFieldThatShouldBeWrappedThisIsAVeryLongFieldThatShouldBeWrappedThisIsAVeryLongFieldThatShouldBeWrappedThisIsAVeryLongFieldThatShouldBeWrappedThisI\\n"));
assertEquals(1.2, output, 0.1);
assertThat(str, is("|(12.5,5.5,;4.0,2.0,)|"));
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3, 4}));
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertEquals(expected, bondPartition);
assertThat(atom.getValency(), is(0)); assertThat(atom.getImplicitHydrogenCount(), is(0));
assertNotNull(atom.getAtomicNumber()); assertNotNull(container);
assertThat(points.length, is(2)); assertThat(points[0].x, closeTo(12.5, 0.01)); assertThat(points[0].y, closeTo(5.5, 0.01)); assertThat(points[1].x, closeTo(4, 0.01)); assertThat(points[1].y, closeTo(2, 0.01));
assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(localHydrogen.getBounds().getMinY(), 0.01));
assertThat(InChINumbersTools.getUSmilesNumbers(container), is(new long[]{8, 9, 1, 7, 2, 3, 4, 5, 6}));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstAtomMapping().size());
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllMapping().size());
assertThat(new SmilesGenerator(SmiFlavor.Stereo).create(mol), is("C/C=C=C=C/C")); assertThat(new SmilesGenerator(SmiFlavor.Stereo).create(mol), is("C/C=C=C=C\\\\C"));
assertThat(x, is(not(5L)));
assertThat(new Tetrahedral3DParity(coords).parity(), is(ANTICLOCKWISE));
assertThat(MolecularFormulaManipulator.getMajorIsotopeMass(formula), closeTo(15.0234, 0.01));
assertThat(MDLV2000Reader.dataHeader("> 55 (MD-08974) <BOILING.POINT> DT12"), is("BOILING.POINT"));
assertThat(odd.parity(), is(-1)); assertThat(even.parity(), is(+1));
assertThat(hashCode, is(expected));
assertEquals(0.4, output, 0.1);
assertThat(output, containsString("M SST 1 1 RAN")); assertThat(output, containsString("M STY 3 1 COP 2 SRU 3 SRU"));
assertThat(parity.parity(dummy), is(1)); assertThat(parity.parity(dummy), is(-1)); assertThat(parity.parity(dummy), is(-1)); assertThat(parity.parity(dummy), is(1)); assertThat(parity.parity(dummy), is(0)); assertThat(parity.parity(dummy), is(0)); assertThat(parity.parity(dummy), is(0)); assertThat(parity.parity(dummy), is(0));
assertEquals(expResult, result);
assertThat(InChINumbersTools.getUSmilesNumbers(container), is(new long[]{2, 1, 3, 4, 5}));
assertThat(new CDKToBeam().toBeamAtom(a).isotope(), is(12));
assertThat(GeometryTools.getBondLengthMedian(container), is(1.5));
assertNotNull(new HashGeneratorMaker().depth(0).elemental().atomic());
assertFalse(new CDKToBeam().toBeamAtom(a).aromatic());
assertEquals(expResult, result);
assertEquals(UNSPECIFIED, geometric.parity());
assertThat(sw.toString(), containsString("3D"));
assertFalse(matches);
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllAtomMapping().size());
assertThat(wavyCount, is(1));
assertNull(a.getMassNumber());
assertThat(state.nextN(-1), is(0));
assertThat(basic.generate(m1), is(basic.generate(m2))); assertThat(perturb.generate(m1), is(not(perturb.generate(m2))));
assertFalse(suppressed.contains(0)); assertTrue(suppressed.contains(1)); assertFalse(suppressed.contains(2)); assertFalse(suppressed.contains(3)); assertTrue(suppressed.contains(4));
assertThat(outline.toString(), is("Cl [x=" + toString(bounds.getX()) + ", y=" + toString(bounds.getY()) + ", w=" + toString(bounds.getWidth()) + ", h=" + toString(bounds.getHeight()) + "]"));
assertThat(atom.getValency(), is(3)); assertThat(atom.getImplicitHydrogenCount(), is(3));
assertThat(state.nextN(0), is(0)); assertThat(state.nextN(0), is(1)); assertThat(state.nextN(0), is(2));
assertThat(generator.getInchi(), is("InChI=1S/C5H8/c1-3-5-4-2/h3-4H,1-2H3/t5-/m0/s1"));
assertEquals(expectedValue, instance.getLabelID("R3"));
assertThat(a, is(instanceOf(IAtom.class))); assertThat(a, is(not(instanceOf(IPseudoAtom.class)))); assertThat(a.getSymbol(), is("N"));
assertThat(sw.toString(), containsString("M RAD 8 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2"));
assertThat(bi1.getValency(), is(3)); assertThat(h2.getValency(), is(1)); assertThat(bi1.getImplicitHydrogenCount(), is(2)); assertThat(h2.getImplicitHydrogenCount(), is(0));
assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01));
assertThat(symbs[cycle[1]], is("CB")); assertThat(symbs[cycle[2]], is("CB"));
assertEquals(1, bondRefinable.getConnectivity(0, 1)); assertEquals(1, bondRefinable.getConnectivity(0, 2)); assertEquals(1, bondRefinable.getConnectivity(1, 3)); assertEquals(1, bondRefinable.getConnectivity(2, 3));
assertThat(set.size(), is(4)); assertTrue(set.contains(0)); assertTrue(set.contains(2)); assertTrue(set.contains(3)); assertTrue(set.contains(4));
assertThat(output, containsString("M STY 5 1 MUL 2 SRU")); assertThat(output, containsString("M SPA 1 12"));
assertThat(MolecularFormulaManipulator.getString(mamf, false, true), is("[12]C6[79]Br3[81]Br3"));
assertThat(empty, is("<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n" + "<!DOCTYPE svg PUBLIC \\"- + "<svg version=\'1.2\' xmlns=\'http: + " <desc>Generated by the Chemistry Development Kit (http: + "</svg>\\n"));
assertEquals(TOGETHER, geometric.parity());
assertNotNull(smsd1.getFirstMapping());
assertThat(vector.x, closeTo(-4d, 0.01)); assertThat(vector.y, closeTo(-2d, 0.01));
assertNotNull(new MCSPlus().getOverlaps(new AtomContainer(), new AtomContainer(), true));
assertThat(elementBounds.getMaxX(), greaterThan(hydrogenBounds.getMinX())); assertThat(elementBounds.getMaxY(), closeTo(hydrogenBounds.getMaxY(), 0.01));
assertNotSame(expResult, result);
assertThat(vector.x, closeTo(10d, 0.01)); assertThat(vector.y, closeTo(5d, 0.01));
assertThat(shapes.size(), is(2));
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3, 4}));
assertThat(atom.getValency(), is(4)); assertThat(atom.getImplicitHydrogenCount(), is(4));
assertThat(StandardAtomGenerator.chargeAdjunctText(1, 0), is("+"));
assertThat(symbs[cycle[1]], is("NPD+")); assertThat(symbs[cycle[2]], is("NPD+")); assertThat(symbs[cycle[3]], is("NPD+"));
assertTrue(state.feasible(0, 0)); assertFalse(state.feasible(0, 0));
assertThat(mol.getAtom(0), instanceOf(IPseudoAtom.class)); assertThat(((IPseudoAtom)mol.getAtom(0)).getLabel(), is("Blah"));
assertThat(generator.getInchi(), is("InChI=1S/C5H8/c1-3-5-4-2/h3-4H,1-2H3/t5-/m1/s1"));
assertTrue(state.feasible(4, 4)); assertFalse(state.feasible(4, 4));
assertThat(newBounds.getX(), closeTo(orgBounds.getX() + 4, 0.01)); assertThat(newBounds.getY(), closeTo(orgBounds.getY() + 2, 0.01)); assertThat(newBounds.getMaxX(), closeTo(orgBounds.getMaxX() + 4, 0.01)); assertThat(newBounds.getMaxY(), closeTo(orgBounds.getMaxY() + 2, 0.01));
assertEquals(-1, permutationParity.parity(new long[]{4, -1, 3, -2}));
assertNotNull(atom.getPoint2d()); assertThat(mol.getAtom(0).getAtomicNumber(), is(17)); assertThat(mol.getAtom(15).getAtomicNumber(), is(7)); assertThat(mol.getAtom(0).getPoint2d().distance(mol.getAtom(15).getPoint2d()), closeTo(1.5*SDG.getBondLength(), 0.001));
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertFalse(ptrn.matches(smi("N#CN/C(=N/CCSCC=1N=CNC1C)NC")));
assertTrue(ses.hasNext()); assertThat(se, is(instanceOf(ExtendedTetrahedral.class))); assertThat(element.peripherals(), is(new IAtom[]{container.getAtom(5), container.getAtom(0), container.getAtom(1), container.getAtom(6)})); assertThat(element.focus(), is(container.getAtom(4))); assertThat(element.winding(), is(ITetrahedralChirality.Stereo.CLOCKWISE));
assertEquals(5, count);
assertThat(unit.x, closeTo(0.371d, 0.01)); assertThat(unit.y, closeTo(0.928d, 0.01)); assertThat(unit.length(), closeTo(1d, 0.01));
assertThat(deref, CoreMatchers.<IAtom>instanceOf(QueryAtom.class));
assertTrue(matcher.matches(atom));
assertThat(intersect.x, closeTo(-4, 0.01)); assertThat(intersect.y, closeTo(-4, 0.01));
assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond, a1), is(-1)); assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond, a2), is(+1));
assertThat(MmffAromaticTypeMapping.contribution(7, 3, 4), is(1));
assertEquals(OPPOSITE, geometric.parity());
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15543053, 1}));
assertEquals(true, result.hasNext());
assertEquals(-1, permutationParity.parity(new long[]{4, 2, 3, 1}));
assertFalse(MmffAromaticTypeMapping.normaliseCycle(cycle, contr));
assertTrue(a.getFlag(CDKConstants.ISAROMATIC));
assertThat(state.nextM(1, -1), is(4));
assertThat(deref, CoreMatchers.<IAtom>instanceOf(QueryAtom.class)); assertThat(expr, is(expected));
assertThat(new CDKToBeam().toBeamAtom(a).element(), is(Element.Oxygen)); assertThat(new CDKToBeam().toBeamAtom(a).hydrogens(), is(2));
assertEquals(7, smsd1.getFirstAtomMapping().size());
assertThat(shapes.size(), is(2));
assertThat(writtenMol, containsString( " 4 F 2 8 7\\n" + " 5 F 2 7 8\\n" + " 6 F 2 7 8\\n"+ "M ALS 4 2 F O N \\n" + "M ALS 5 2 F N O \\n" + "M ALS 6 2 F N O"));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertEquals(expResult, result);
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3, 4}));
assertFalse(matcher.matches(atom));
assertEquals(TOGETHER, geometric.parity());
assertThat(m.fix()[0], is(new int[]{0, 1, 1, 0, 1})); assertThat(m.fix()[0], is(new int[]{0, -1, -1, 0, -1}));
assertThat(x, is(y)); assertThat(x, not(sameInstance(y)));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertEquals(1, instance.getSize());
assertEquals(new Point3d(2.0, 1.0, 1.0), atom1.getPoint3d(), 0.2);
assertTrue(SelectionVisibility.isSelected(chemObject, new RendererModel()));
assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.none()), is(new long[]{1L, 1L, 1L})); assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.fromBitSet(suppressed)), is(new long[]{0L, 1L, 0L}));
assertEquals(2, instance.getSize());
assertNotNull(sgroups); assertThat(sgroups.size(), is(2)); assertThat(sgroup.getType(), is(SgroupType.CtabStructureRepeatUnit)); assertThat((Integer) sgroup.getValue(SgroupKey.CtabBracketStyle), is(1)); assertThat(sgroup.getType(), is(SgroupType.CtabStructureRepeatUnit)); assertThat((Integer) sgroup.getValue(SgroupKey.CtabBracketStyle), is(1));
assertFalse(suppressed.contains(i));
assertTrue(invariant instanceof IntegerInvariant); assertEquals(new IntegerInvariant(2), invariant);
assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01));
assertThat(tCenter.getX(), lessThan(oCenter.getX()));
assertNotNull(atomContainer);
assertTrue(matcher.matches(atom));
assertThat(intersect.x, closeTo(1.0, 0.01)); assertThat(intersect.y, closeTo(0.0, 0.01));
assertTrue(sqt.matches(furan, true)); assertFalse(sqt.matches(furan, true));
assertEquals(expResult, result);
assertFalse(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertEquals(3, bondRefinable.getVertexCount());
assertThat(elementBounds.getMinY(), lessThan(hydrogenBounds.getMaxY())); assertThat(elementBounds.getMinX(), closeTo(hydrogenBounds.getMinX(), 0.01));
assertThat(mol.getAtomCount(), is(4)); assertThat(mol.stereoElements().iterator().hasNext(), is(true));
assertThat(VecmathUtil.extent(new Vector2d(0, -1)), is(closeTo(Math.toRadians(270), 0.01)));
assertThat(symbs[cycle[1]], is("NPOX"));
assertThat(c1.getValency(), is(3)); assertThat(c1.getImplicitHydrogenCount(), is(1)); assertThat(c2.getValency(), is(4)); assertThat(c2.getImplicitHydrogenCount(), is(2));
assertNotNull(atom.getPoint2d());
assertEquals(1, permutationParity.parity(new long[]{4, 3, -1, -2}));
assertThat(MmffAromaticTypeMapping.contribution(6, 3, 4), is(1));
assertThat(a.getSymbol(), is("O")); assertThat(a.getImplicitHydrogenCount(), is(1)); assertThat(a.getFormalCharge(), is(-1));
assertThat(a.getMassNumber(), is(13));
assertThat(state.mapping(), is(state.m1)); assertThat(state.mapping(), is(not(sameInstance(state.m1))));
assertEquals(0, permutationParity.parity(new long[]{4, 3, -1, -1}));
assertThat(smarts, containsString("-"));
assertThat(smigen.create(r1), is(smigen.create(r2))); assertThat(smigen.create(r2), is(smigen.create(r3)));
assertEquals(OPPOSITE, geometric.parity());
assertFalse(MmffAromaticTypeMapping.isAromaticRing(cycle, contr, dbs, new boolean[contr.length]));
assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond), is(-1));
assertEquals(2, instance.getSize()); assertEquals(0, instance.getSize());
assertFalse(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 1, 1, 1, 1, 1}));
assertThat(state.nextM(0, -1), is(0)); assertThat(state.nextM(0, 0), is(1)); assertThat(state.nextM(0, 1), is(2)); assertThat(state.nextM(0, 0), is(2));
assertThat(set.size(), is(0));
assertNotNull(flags);
assertFalse(state.feasible(i, j));
assertThat(sw.toString(), containsString("2D"));
assertThat(sw.toString(), containsString("M SAL 1 2 2 3"));
assertTrue(invariant instanceof IntegerListInvariant); assertEquals(new IntegerListInvariant(new int[] {1, 1}), invariant);
assertTrue(SmartsPattern.create("C[C@H](O)CC", bldr).matches(smi("C[C@H](O)CC"))); assertFalse(SmartsPattern.create("C[C@H](O)CC", bldr).matches(smi("C[C@@H](O)CC"))); assertFalse(SmartsPattern.create("C[C@H](O)CC", bldr).matches(smi("CC(O)CC")));
assertEquals(5, count);
assertThat(new CDKToBeam().toBeamAtom(a).element(), is(Element.Unknown));
assertTrue(Double.isNaN(intersect.x)); assertTrue(Double.isNaN(intersect.y));
assertThat(sw.toString(), containsString("C 0 3"));
assertThat(StandardAtomGenerator.accessPseudoLabel(atom, "*"), is("*"));
assertEquals(expResult, result);
assertThat(shapes.size(), is(2));
assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds)); assertTrue(GeometricDoubleBondEncoderFactory.accept(atom, bonds));
assertThat(output, containsString(" 0.0000 0.0000 0.0000 C 0 0 2 0 0 0 0 0 0 0 0 0\\n"));
assertEquals(expResult, result);
assertFalse(state.feasible(i, j));
assertThat(nearest.x, closeTo(0.5d, 0.01)); assertThat(nearest.y, closeTo(0.5d, 0.01));
assertThat(getGeometricParity(encoder).parity(), is(-1));
assertThat(chargeBounds.getMinX(), greaterThan(hydrogenBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(hydrogenBounds.getMinY(), 0.01));
assertThat(encoders.size(), is(2)); assertThat(encoders.get(0), is(e1)); assertThat(encoders.get(1), is(e2)); assertThat(encoders.size(), is(2)); assertThat(encoders.get(0), is(e2)); assertThat(encoders.get(1), is(e1));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(1).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.NONE));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(1).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE));
assertThat(MolecularFormulaManipulator.getTotalMassNumber(formula), closeTo(15.0, 0.01));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertThat(output, containsString("M STY 1 1 SRU")); assertThat(output, containsString("M SMT 1 n")); assertThat(output, containsString("M SCN 1 1 HT"));
assertThat(mol, CoreMatchers.containsString("Bioclip"));
assertNotNull(circ.getBitFingerprint(m));
assertThat(new Tetrahedral3DParity(coords).parity(), is(ANTICLOCKWISE));
assertEquals(true, smsd1.isSubgraph(true));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllMapping().size());
assertEquals(UNSPECIFIED, geometric.parity());
assertThat(MDLV2000Reader.dataHeader("> 29 <DENSITY> "), is("DENSITY"));
assertThat(vector.x, closeTo(-0.707d, 0.01)); assertThat(vector.y, closeTo(-0.707d, 0.01)); assertThat(vector.length(), closeTo(1d, 0.01));
assertThat(MmffAromaticTypeMapping.contribution(7, 3, 5), is(-1));
assertEquals(OPPOSITE, geometric.parity());
assertEquals(expResult, result);
assertThat(mol.getAtom(0).getMassNumber(), is(261));
assertThat(bi1.getValency(), is(3)); assertThat(h2.getValency(), is(1)); assertThat(bi1.getImplicitHydrogenCount(), is(2)); assertThat(h2.getImplicitHydrogenCount(), is(0));
assertThat(new Tetrahedral3DParity(coords).parity(), is(CLOCKWISE));
assertThat(new CDKToBeam().toBeamAtom(a).element(), is(Element.Unknown));
assertEquals(expResult, result);
assertTrue(matcher.matches(atom));
assertThat(a, is(instanceOf(IPseudoAtom.class))); assertThat(((IPseudoAtom) a).getLabel(), is("*"));
assertEquals(expResult, result);
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllAtomMapping().size());
assertThat(outlineBounds.getX(), closeTo(symbolBounds.getX(), 0.01)); assertThat(outlineBounds.getY(), closeTo(symbolBounds.getY(), 0.01)); assertThat(outlineBounds.getMaxX(), closeTo(symbolBounds.getMaxX(), 0.01)); assertThat(outlineBounds.getMaxY(), closeTo(symbolBounds.getMaxY(), 0.01));
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertThat(vector.x, closeTo(1, 0.01)); assertThat(vector.y, closeTo(0, 0.01)); assertThat(vector.length(), closeTo(1d, 0.01));
assertThat(paramClasses, hasItem(SomeParam.class));
assertThat(MmffAromaticTypeMapping.cyclesOfSizeFiveOrSix(container, graphK8).length, is(0));
assertThat(output, CoreMatchers.containsString("M SDT 3 WEIGHT_PERCENT N %")); assertThat(output, CoreMatchers.containsString("M SED 3 33%"));
assertEquals(expResult, result);
assertTrue(matcher.matches(atom));
assertThat(auxInfo, is(expected));
assertTrue(molecule.getAtom(0).getFlag(CDKConstants.ISAROMATIC)); assertTrue(molecule.getBond(0).getFlag(CDKConstants.ISAROMATIC));
assertNotNull(result);
assertEquals("%!PS-Adobe-3.0 EPSF-3.0", lines[0]); assertEquals("%%BoundingBox: 0 0 28 35", lines[1]);
assertThat(atom.getValency(), is(4)); assertThat(atom.getImplicitHydrogenCount(), is(3));
assertThat(output, containsString(" 0.0000 0.0000 0.0000 C 0 0 1 0 0 0 0 0 0 0 0 0\\n"));
assertTrue(invariant instanceof IntegerInvariant); assertEquals(new IntegerInvariant(2), invariant);
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(1).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.NONE));
assertThat(bond.getStereo(), is(IBond.Stereo.NONE));
assertEquals(0.3, output, 0.1);
assertThat(hashCode, is(expected));
assertEquals(2, instance.getSize());
assertThat(InChINumbersTools.getUSmilesNumbers(container), is(new long[]{3, 1, 2}));
assertThat(bounds.getMinX(), closeTo(-5, 0.01)); assertThat(bounds.getMinY(), closeTo(-5, 0.01)); assertThat(bounds.getMaxX(), closeTo(5, 0.01)); assertThat(bounds.getMaxY(), closeTo(5, 0.01));
assertNotNull(dataSgroup); assertThat(dataSgroup.<String>getValue(SgroupKey.DataFieldName), CoreMatchers.is("WEIGHT_PERCENT")); assertThat(dataSgroup.<String>getValue(SgroupKey.DataFieldUnits), CoreMatchers.is("%")); assertThat(dataSgroup.<String>getValue(SgroupKey.DataFieldFormat), CoreMatchers.is("N")); assertThat(dataSgroup.<String>getValue(SgroupKey.Data), CoreMatchers.is("33%"));
assertThat(factory.loadFromFile("obabel_superatoms.smi"), is(27)); assertThat(factory.loadFromFile("/org/openscience/cdk/depict/obabel_superatoms.smi"), is(27));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstAtomMapping().size());
assertEquals(OPPOSITE, geometric.parity());
assertFalse(ptrn.matches(smi("[H][H]"))); assertTrue(ptrn.matches(smi("[2H]"))); assertTrue(ptrn.matches(smi("[3H]")));
assertThat(VecmathUtil.extent(new Vector2d(0, 1)), is(closeTo(Math.toRadians(90), 0.01)));
assertThat(label, is(CIPTool.CIP_CHIRALITY.Z));
assertThat(symbs[cycle[1]], is("NPYD")); assertThat(symbs[cycle[2]], is("NPYD"));
assertThat(a.getSymbol(), is("C")); assertThat(a.getImplicitHydrogenCount(), is(4));
assertThat(MmffAromaticTypeMapping.contribution(7, 3, 3), is(2));
assertEquals(expResult, result);
assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds));
assertEquals(expResult, result.getAtomCount());
assertThat(superBits.asBitSet(), is(asBitSet(6, 11, 12, 15, 16, 18, 33, 34, 35))); assertThat(subBits.asBitSet(), is(asBitSet(8, 11, 16, 35)));
assertThat(new SmilesGenerator(SmiFlavor.Canonical|SmiFlavor.AtomAtomMapRenumber).create(mol), is("[*:1]CCC([*:2])[*:3]")); assertThat(new SmilesGenerator(SmiFlavor.Canonical|SmiFlavor.AtomAtomMapRenumber).create(mol2), is("[*:1]CCC([*:2])[*:3]"));
assertEquals(5, count);
assertThat(set.size(), is(2)); assertTrue(set.contains(0)); assertTrue(set.contains(3));
assertNotNull(new HashGeneratorMaker().depth(0).elemental().molecular());
assertThat(tCenter.getX(), greaterThan(oCenter.getX()));
assertEquals("%!PS-Adobe-3.0", lines[0]); assertEquals("%%Creator: FreeHEP Graphics2D Driver", lines[1]);
assertThat(outlineBounds.getX(), closeTo(symbolBounds.getX(), 0.01)); assertThat(outlineBounds.getY(), closeTo(symbolBounds.getY(), 0.01)); assertThat(outlineBounds.getMaxX(), closeTo(symbolBounds.getMaxX(), 0.01)); assertThat(outlineBounds.getMaxY(), closeTo(symbolBounds.getMaxY(), 0.01));
assertThat(p.getX(), closeTo(4d, 0.01)); assertThat(p.getY(), closeTo(2d, 0.01));
assertEquals(expResult, result);
assertThat(MmffAromaticTypeMapping.contribution(16, 2, 2), is(2));
assertThat(output, containsString(" 0.0000 0.0000 0.0000 C 0 0 1 0 0 0 0 0 0 0 0 0\\n"));
assertThat(p.x, closeTo(4d, 0.01)); assertThat(p.y, closeTo(2d, 0.01));
assertEquals(expResult, result);
assertThat(InChINumbersTools.getUSmilesNumbers(container), is(new long[]{3, 2, 1}));
assertThat(elementBounds.getMaxX(), lessThan(hydrogenBounds.getMinX())); assertThat(elementBounds.getMaxY(), closeTo(hydrogenBounds.getMaxY(), 0.01));
assertThat(elementBounds.getMinY(), greaterThan(hydrogenBounds.getMaxY())); assertThat(elementBounds.getMinX(), closeTo(hydrogenBounds.getMinX(), 0.01));
assertNotNull(atom.getPoint2d()); assertThat(mol.getAtom(0).getPoint2d().distance(mol.getAtom(1).getPoint2d()), closeTo(1.5*SDG.getBondLength(), 0.001));
assertThat(mean.x, closeTo(0.5d, 0.01)); assertThat(mean.y, closeTo(0d, 0.01));
assertThat(unique, is(new long[]{31, 0, 0, 0})); assertThat(rotated, is(new long[]{generator.rotate(31, 2), 0, 0, 0})); assertThat(value, is(generator.distribute(21) ^ 31 ^ generator.rotate(31) ^ generator.rotate(31, 2)));
assertThat(new SmilesGenerator(SmiFlavor.AtomicMass).create(mol), is("[12CH3]C"));
assertThat(permutation(new int[]{1, 2}), is(PermutationParity.IDENTITY));
assertTrue(reader.accepts(ChemFile.class)); assertTrue(reader.accepts(ChemModel.class)); assertTrue(reader.accepts(AtomContainer.class));
assertThat(output, containsString("M STY 3 1 COM 2 COM 3 MIX")); assertThat(output, containsString("M SPL 2 1 3 2 3"));
assertThat(value, is(5));
assertNotNull(instance.getAllAtomMapping());
assertTrue(GeometricDoubleBondEncoderFactory.accept(atom, bonds)); assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds));
assertEquals(expResult, result);
assertThat(total.toString(), is("H4"));
assertThat(new Bounds(2, 2, 7, 6).width(), is(closeTo(5d, 0.1)));
assertThat(smarts, is("C*"));
assertTrue(encoder.encode(current, next)); assertFalse(encoder.encode(current, next)); assertTrue(encoder.encode(current, next));
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllMapping().size());
assertThat(deref, CoreMatchers.<IAtom>instanceOf(QueryAtom.class)); assertThat(expr, is(expected));
assertThat(new CDKToBeam().toBeamAtom(a).isotope(), is(-1));
assertNotNull(sgroups); assertThat(sgroups.size(), is(1)); assertThat(sgroup.getType(), is(SgroupType.CtabAbbreviation)); assertThat(sgroup.getSubscript(), is("Cs2CO3")); assertThat(sgroup.getAtoms().size(), is(6));
assertThat(a, is(instanceOf(IAtom.class))); assertThat(a, is(not(instanceOf(IPseudoAtom.class)))); assertThat(a.getSymbol(), is("C"));
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15543053, 1}));
assertThat(outlineBounds.getX(), closeTo(symbolBounds.getX(), 0.01)); assertThat(outlineBounds.getY(), closeTo(symbolBounds.getY(), 0.01)); assertThat(outlineBounds.getMaxX(), closeTo(symbolBounds.getMaxX(), 0.01)); assertThat(outlineBounds.getMaxY(), closeTo(symbolBounds.getMaxY(), 0.01));
assertNotNull(instance.getAllMapping());
assertThat(nearest.x, closeTo(0.5d, 0.01)); assertThat(nearest.y, closeTo(-0.5d, 0.01));
assertThat(length, closeTo(4.94, 0.01));
assertTrue(encoder.encode(current, next)); assertFalse(encoder.encode(current, next));
assertThat(vector.x, closeTo(6d, 0.01)); assertThat(vector.y, closeTo(7d, 0.01));
assertThat(atom.getValency(), is(3)); assertThat(atom.getImplicitHydrogenCount(), is(3));
assertNotNull(message);
assertThat(bond.getStereo(), is(IBond.Stereo.NONE));
assertThat(new SmilesGenerator(SmiFlavor.Canonical|SmiFlavor.AtomAtomMap).create(mol), is("[*:1]C([*:2])CC[*:3]")); assertThat(new SmilesGenerator(SmiFlavor.Canonical|SmiFlavor.AtomAtomMap).create(mol2), is("[*:1]CCC([*:2])[*:2]"));
assertThat(set.size(), is(0));
assertFalse(ptrn.matches(smi("C"))); assertTrue(ptrn.matches(smi("[12C]"))); assertTrue(ptrn.matches(smi("[13C]")));
assertThat(hydrogenCountBounds.getMinX(), greaterThan(hydrogenBounds.getMinX())); assertThat(hydrogenCountBounds.getCenterY(), closeTo(hydrogenBounds.getMaxY(), 0.01));
assertThat(new CDKToBeam().toBeamAtom(a).charge(), is(chg));
assertEquals(result.getAtom(i).getSymbol(), container.getAtom(i).getSymbol()); assertEquals(result.getAtom(i).getID(), container.getAtom(i).getID());
assertEquals(OPPOSITE, geometric.parity());
assertEquals(expResult, result);
assertThat(getGeometricParity(encoder).parity(), is(-1));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstMapping().size());
assertEquals(score, smsd1.getEnergyScore(0));
assertNotNull(instance.getFirstMapping());
assertTrue(p instanceof BasicPermutationParity); assertArrayEquals((int[]) field.get(p), new int[]{1, 2});
assertThat(new Xorshift().next(0L), is(0L));
assertThat(c2g.toBeamEdge(b, mock), is(uk.ac.ebi.beam.Bond.QUADRUPLE.edge(0, 1)));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstMapping().size());
assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01));
assertThat(mol.getAtom(1).getPoint2d().x - mol.getAtom(0).getPoint2d().x, is(greaterThan(SDG.getBondLength())));
assertThat(m.getBond(0).getStereo(), is(not(IBond.Stereo.UP_OR_DOWN))); assertThat(m.getBond(2).getStereo(), is(not(IBond.Stereo.UP_OR_DOWN))); assertThat(m.getBond(3).getStereo(), is(not(IBond.Stereo.UP_OR_DOWN)));
assertThat(superBits.asBitSet(), is(asBitSet(0, 11, 13, 17, 40, 48, 136, 273, 274, 278, 286, 294, 299, 301, 304, 306))); assertThat(subBits.asBitSet(), is(asBitSet(1, 17, 273, 274, 278, 294, 306)));
assertEquals(4, smsd1.getAllMapping().size());
assertTrue(stereoElements.hasNext()); assertTrue(stereoElement instanceof ITetrahedralChirality);
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15543053, 1, 15543053, 1, 1}));
assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.UP));
assertThat(sw.toString(), containsString("C 1"));
assertNull(GeometricCumulativeDoubleBondFactory.axialEncoder(container, start, end));
assertThat(atom.getValency(), is(1)); assertThat(atom.getImplicitHydrogenCount(), is(1));
assertTrue(matcher.matches(atom));
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 3, 2, 4}));
assertThat(state.mapping(), is(state.m1)); assertThat(state.mapping(), is(not(sameInstance(state.m1))));
assertEquals(TOGETHER, geometric.parity());
assertNotNull(smsd1.getFirstMapping()); assertEquals(4, smsd1.getAllAtomMapping().size());
assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 2, 3}));
assertFalse(state.feasible(i, j));
assertEquals(1, refinable.getConnectivity(0, 1)); assertEquals(2, refinable.getConnectivity(1, 2)); assertEquals(3, refinable.getConnectivity(2, 3));
assertThat(shapes.size(), is(1)); assertThat(atomSymbol.elementOutline().text(), is("*"));
assertEquals(expResult, result);
assertThat(MmffAromaticTypeMapping.contribution(6, 3, 3), is(-1));
assertTrue(ptrn.matches(smi("[C@@]1(O[C@@]([C@@]([C@]([C@]1(C)O)(C)O)(O)C)(O)C)(O)C")));
assertThat(output, containsString("M SAL 1 15")); assertThat(output, containsString("M SAL 1 4"));
assertNotNull(container); assertTrue(container.getBond(0).getOrder() == Order.DOUBLE || container.getBond(1).getOrder() == Order.DOUBLE);
assertTrue(new AnyAtom(null).matches(new Atom("H")));
assertEquals("HOSECODE", cleanHoseCode); assertEquals("HOSECODE", cleanHoseCode);
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(4).getStereo(), is(IBond.Stereo.UP)); assertThat(m.getBond(5).getStereo(), is(IBond.Stereo.DOWN));
assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond, a1), is(+1)); assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond, a2), is(-1));
assertThat(wavyCount, is(1));
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15543053, 1}));
assertThat(shapes.size(), is(1));
assertThat(generator, is(instanceOf(SuppressedAtomHashGenerator.class)));
assertThat(GeometricCumulativeDoubleBondFactory.elevation(bond), is(+1));
assertThat(fragments.length, is(2)); assertThat(fragments[0].getAtomCount(), is(12)); assertThat(fragments[1].getAtomCount(), is(6));
assertNotNull(circ.getBitFingerprint(pyrazole));
assertEquals(expectedValue, result);
assertNotNull(container);
assertNotNull(smsd1.getFirstMapping());
assertThat(new CDKToBeam().toBeamAtom(a).element(), is(Element.Carbon)); assertThat(new CDKToBeam().toBeamAtom(a).hydrogens(), is(4));
assertThat(new String(baos.toByteArray()), is("[C][C][O] |(.0,1.0,;2.0,3.0,;4.0,5.0,)|\\n[C][C] |(.0,1.0,;2.0,3.0,)|\\n"));
assertThat(set.size(), is(0));
assertTrue(format instanceof SMILESFormat);
assertThat(a.getSymbol(), is("N")); assertThat(a.getImplicitHydrogenCount(), is(4)); assertThat(a.getFormalCharge(), is(+1));
assertThat(circ.getBitFingerprint(proton).cardinality(), is(0));
assertThat(newBounds.getX(), closeTo(oBounds.getMinX() + dx, 0.01)); assertThat(newBounds.getY(), closeTo(oBounds.getMinY() + dy, 0.01)); assertThat(newBounds.getMaxX(), closeTo(oBounds.getMaxX() + dx, 0.01)); assertThat(newBounds.getMaxY(), closeTo(oBounds.getMaxY() + dy, 0.01));
assertThat(nSize5, is(4)); assertThat(nSize6, is(6));
assertThat(output, containsString("M STY 2 1 SRU 2 SRU")); assertThat(output, containsString("M SBT 1 1 1"));
assertThat(a.getMassNumber(), is(12));
assertTrue(SmartsPattern.create("(O).(O)", bldr).matches(smi("O.O"))); assertFalse(SmartsPattern.create("(O).(O)", bldr).matches(smi("OO")));
assertThat(bond.getOrder(), is(IBond.Order.SINGLE)); assertTrue(bond.getFlag(CDKConstants.ISAROMATIC));
assertThat(reaction.getAgents().getAtomContainerCount(), is(1));
assertTrue(SmartsPattern.create("CC", bldr).matches(rsmi("CC>>"))); assertTrue(SmartsPattern.create("CC", bldr).matches(rsmi(">>CC"))); assertTrue(SmartsPattern.create("CC", bldr).matches(rsmi(">CC>"))); assertFalse(SmartsPattern.create("CO", bldr).matches(rsmi(">>CC")));
assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.E_OR_Z));
assertThat(output, containsString("M STY 3 1 COM 2 COM 3 FOR")); assertThat(output, containsString("M SNC 1 1 1")); assertThat(output, containsString("M SNC 1 2 2"));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(1).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(2).getStereo(), is(IBond.Stereo.NONE));
assertThat(MolecularFormulaManipulator.getTotalExactMass(formula), closeTo(15.0234, 0.01));
assertThat(m.getBond(0).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(3).getStereo(), is(IBond.Stereo.NONE)); assertThat(m.getBond(4).getStereo(), is(IBond.Stereo.DOWN)); assertThat(m.getBond(5).getStereo(), is(IBond.Stereo.UP));
assertEquals(TOGETHER, geometric.parity());
assertThat(mol.stereoElements().iterator().hasNext(), is(false));
assertNotNull(smsd1.getFirstMapping()); assertEquals(7, smsd1.getFirstAtomMapping().size());
assertThat(atom.getValency(), is(1)); assertThat(atom.getImplicitHydrogenCount(), is(1));
assertThat(c2g.toBeamEdge(b, mock), is(uk.ac.ebi.beam.Bond.SINGLE.edge(0, 1)));
assertEquals(score, smsd1.getStereoScore(0));
assertTrue(SmartsPattern.create("CC>>", bldr).matches(rsmi("CC>>"))); assertFalse(SmartsPattern.create("CC>>", bldr).matches(rsmi(">>CC"))); assertFalse(SmartsPattern.create("CC>>", bldr).matches(rsmi(">CC>")));
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15521419, 1}));
assertNotNull(forceFieldConfigurator.getParameterSet()); assertEquals("CO2M", atomtype4.getAtomTypeName()); assertEquals(6, (int) atomtype4.getAtomicNumber()); assertEquals(3, (int) atomtype4.getFormalNeighbourCount()); assertEquals(12, (int) atomtype4.getMassNumber());
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 1, 1, 1, 1, 1}));
assertThat(massBounds.getMaxX(), lessThan(elementBounds.getMinX())); assertThat(massBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01));
assertThat(x, is(y)); assertThat(x, not(sameInstance(y)));
assertEquals(expResult, result);
assertThat(state.nextN(-1), is(2));
assertNotNull(message);
assertThat(atom.getValency(), is(2)); assertThat(atom.getImplicitHydrogenCount(), is(2));
assertNotNull(instance.getOverLaps(source, target, removeHydrogen));
assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.none()), is(new long[]{expected, expected, expected})); assertThat( generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}}, Suppressed.fromBitSet(suppressed)), is(new long[]{expected, 0L, expected}));
assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15521419, 1}));
assertEquals(expResult, result);
assertThat(entry.getKey(), is("CO")); assertThat(entry.getValue(), is(new Point2d[]{new Point2d(12.5f, 5.5f), new Point2d(4f, 2f)}));
assertThat(sw.toString(), containsString("SPA 1 1"));
assertEquals("Hello, world!", message);
assertEquals(userDb.getCredit(), 200); assertEquals(topicDb.getDigest(), Topic.DIGEST_TOPIC);
assertEquals(boardDb.getTopicNum(), 1); assertEquals(userDb.getCredit(), 110); assertEquals(topic.getTopicId()>0, true);
assertEquals(post.getPostId()>1, true); assertEquals(userDb.getCredit(), 105); assertEquals(topicDb.getReplies(), 2);
assertNull(postDb); assertEquals(userDb.getCredit(), 80); assertEquals(topicDb.getReplies(), 0);
assertNull(repository.find(1L));
assertEquals("John Smith", repository.find(1L).getName()); assertEquals("Clark Kent", repository.find(2L).getName());
assertThat(throwable) .isInstanceOf(IllegalStateException.class) .hasMessage("connectorDefinition name cannot have \'.\' character");
assertThat(throwable) .isInstanceOf(IllegalStateException.class) .hasMessage("connectorDefinition name cannot be null or empty");
assertThat(filter.getProcessDefinitionKeys()).isEqualTo(keys);
assertThat(thrown) .isInstanceOf(AppliationLoadException.class) .hasCause(ioException);
assertThat(applicationContents).containsExactly(applicationContent);
assertThat(resources).containsExactly(applicationResource);
assertThat(filter.getProcessDefinitionKeys()).isEqualTo(keys);
assertThat(throwable) .isInstanceOf(IllegalStateException.class) .hasMessage("connectorDefinition name cannot be null or empty");
assertThat(throwable) .isInstanceOf(IllegalStateException.class) .hasMessage("More than one connectorDefinition with name \'" + connectorDefinition.getName() + "\' was found. Names must be unique.");
assertThat(thrown).isInstanceOf(AppliationLoadException.class) .hasCause(ioException);
assertNotNull(cache.get("0")); assertNull(cache.get("1")); assertNotNull(cache.get("0")); assertNull(cache.get("1")); assertNotNull(cache.get("1")); assertNull(cache.get("0"));
assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(1, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(2, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]);
assertEquals("file", u.getScheme()); assertEquals(null, u.getAuthority()); assertEquals(FileSystem.getLocalFileSystem().getWorkingDirectory().toUri().getPath() + "/" + path, u.getPath()); assertEquals("file", u.getScheme()); assertEquals(null, u.getAuthority()); assertEquals(path, u.getPath());
assertEquals("abc", result); assertEquals("def", result); assertEquals("", result); assertNull(result); assertTrue(format.reachedEnd());
assertEquals(0.0, average.getLocalValue(), 0.0);
assertNotNull(groupId); assertFalse(constraint1 == constraint2); assertFalse(constraint1 == constraint3); assertFalse(constraint2 == constraint3); assertEquals(groupId, constraint1.getGroupId()); assertEquals(groupId, constraint2.getGroupId()); assertEquals(groupId, constraint3.getGroupId());
assertFalse(cm.reportHeartBeat(new InstanceID(), new byte[] {}));
assertNotNull(e.getCause()); assertEquals("Expected test exception", e.getCause().getMessage());
assertEquals(expected.get(state), newTaskState);
assertEquals(new Integer(this.testIntArray[i]), new FieldFromArray<Integer>(i).extract(testIntArray));
assertEquals(addressString, NetUtils.ipAddressToUrlString(address));
assertTrue(Hardware.getNumberCPUCores() >= 0);
assertTrue(map1.getCurrentTableCapacity() < map2.getCurrentTableCapacity()); assertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map1, map1) == 0); assertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map2, map2) == 0); assertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map1, map2) > 0); assertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map2, map1) < 0);
assertFalse(future.isCompleted()); assertTrue(future.isCompleted()); assertTrue(future.isCompleted()); assertTrue(future.failed().isCompleted());
assertTrue(kryo2.getKryo().getRegistration(FromNested.class).getId() > 0);
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(2));
assertEquals("hostTest", testObj.getFactory().getHost()); assertEquals(999, testObj.getFactory().getPort()); assertEquals("userTest", testObj.getFactory().getUsername()); assertEquals("passTest", testObj.getFactory().getPassword());
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3));
assertNull(spiller.rollOver()); assertNull(spiller.rollOver()); assertNull(spiller.rollOver());
assertNull(queue.pollBatch()); assertEquals(asList("a", "b"), queue.pollBatch()); assertNull(queue.pollBatch()); assertEquals(singletonList("c"), queue.pollBatch()); assertNull(queue.pollBatch()); assertTrue(queue.close());
assertEquals(boe, tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked());
assertEquals(asList(TestIOData.NAMES), resultMutableSafe); assertEquals(asList(TestIOData.NAMES), resultRegular);
assertEquals(original1, javaSerCopy1); assertEquals(javaSerCopy1, original1); assertEquals(original2, javaSerCopy2); assertEquals(javaSerCopy2, original2); assertEquals(original1.hashCode(), javaSerCopy1.hashCode()); assertEquals(original2.hashCode(), javaSerCopy2.hashCode());
assertEquals("{}", response);
assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(4.5, average.getLocalValue(), 0.0); assertEquals(0.0, average.getLocalValue(), 0.0);
assertTrue("ReservoirSamplerWithoutReplacement sampled output size should not beyond the source size.", getSize(sampled) == SOURCE_SIZE);
assertTrue(fs.size() == 2); assertTrue(fs.contains(2)); assertTrue(fs.contains(1)); assertTrue(fs.size() == 2); assertTrue(fs.contains(2)); assertTrue(fs.contains(1));
assertEquals("Race: Successfully subscribed, but was never notified.", 1, listener.getNumberOfNotifications()); assertEquals("Race: Never subscribed successfully, but was notified.", 0, listener.getNumberOfNotifications());
assertEquals(10, numReadBuffers); assertEquals(1, numEndOfSuperstepEvents);
assertEquals(0, forwardPartitioner.selectChannels(sd, 1)[0]); assertEquals(0, forwardPartitioner.selectChannels(sd, 2)[0]); assertEquals(0, forwardPartitioner.selectChannels(sd, 1024)[0]);
assertTrue(savepointPathFuture.isCompleted()); assertEquals(0, getSavepointPromises(coordinator).size());
assertTrue(k1.equals(k2)); assertFalse(k1.equals(k3));
assertEquals(eitherInfo1, eitherInfo2); assertEquals(eitherInfo1.hashCode(), eitherInfo2.hashCode());
assertTrue(InstantiationUtil.isProperClass(StringValue.class));
assertTrue(fs.size() == 2); assertTrue(fs.contains(1)); assertTrue(fs.contains(3)); assertTrue(fs.size() == 4); assertTrue(fs.contains(0)); assertTrue(fs.contains(1)); assertTrue(fs.contains(2)); assertTrue(fs.contains(3));
assertArrayEquals(expectedArray, hexArray);
assertFalse("Allowed to subscribe w/o any outstanding requests.", writer.registerAllRequestsProcessedListener(listener)); assertTrue("Didn\'t allow to subscribe.", writer.registerAllRequestsProcessedListener(listener)); assertEquals("Listener was not notified.", 1, listener.getNumberOfNotifications());
assertNotNull(prg.getPreviewPlan()); assertNotNull(op); assertNotNull(dumper.getOptimizerPlanAsJSON(op));
assertEquals(5, numReadBuffers);
assertTrue(sp.getForwardingTargetFields(0, 0).contains(1)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(2));
assertEquals(asList(TestIOData.RICH_NAMES), resultMutableSafe); assertEquals(asList(TestIOData.RICH_NAMES), resultRegular);
assertNotNull(result);
assertTrue(fs.size() == 3); assertTrue(fs.contains(1)); assertTrue(fs.contains(2)); assertTrue(fs.contains(4)); assertTrue(fs.size() == 4); assertTrue(fs.contains(0)); assertTrue(fs.contains(1)); assertTrue(fs.contains(2)); assertTrue(fs.contains(3));
assertEquals(value, ((StreamRecord<?>) output.poll()).getTimestamp());
assertEquals(testStrings[j], new FieldFromTuple<String>(j).extract(current));
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3));
assertFalse(future.isCompleted()); assertTrue(future.isCompleted()); assertEquals(0, getSavepointPromises(coordinator).size());
assertTrue(exceptionForwarded.get());
assertNotNull(stringValue);
assertEquals("[1.0]", controlString);
assertEquals(tpeInfo1, tpeInfo2); assertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());
assertEquals(recNoTimestamp, recNoTimestampCopy); assertEquals(recWithTimestamp, recWithTimestampCopy);
assertEquals(normalizedAddress, NetUtils.ipAddressToUrlString(address));
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0); assertTrue(sp.getReadFields(0).size() == 2); assertTrue(sp.getReadFields(0).contains(0)); assertTrue(sp.getReadFields(0).contains(2));
assertEquals(tpeInfo1, tpeInfo2); assertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());
assertEquals("/my/fancy", p.getParent().toUri().getPath()); assertEquals("/my/other/fancy", p.getParent().toUri().getPath()); assertNull(p.getParent()); assertEquals("/C:/my/windows", p.getParent().toUri().getPath());
assertEquals(1, distributePartitioner.selectChannels(sd, 1).length); assertEquals(1, distributePartitioner.selectChannels(sd, 2).length); assertEquals(1, distributePartitioner.selectChannels(sd, 1024).length);
assertFalse(sampleFuture.isCompleted()); assertTrue(sampleFuture.isCompleted()); assertEquals(0, coord.getNumberOfPendingSamples());
assertTrue(store.getStateStore() instanceof FileSystemStateStore); assertEquals(new Path(rootPath), stateStore.getRootPath());
assertEquals(enumTypeInfo1, enumTypeInfo2); assertEquals(enumTypeInfo1.hashCode(), enumTypeInfo2.hashCode());
assertEquals("\\\\b \\\\t \\\\n \\\\f \\\\r default", controlString);
assertTrue(expected.equals(jo.toString()));
assertTrue(physMem >= -1);
assertEquals(0, shufflePartitioner.selectChannels(sd, 1)[0]); assertTrue(0 <= shufflePartitioner.selectChannels(sd, 2)[0]); assertTrue(2 > shufflePartitioner.selectChannels(sd, 2)[0]); assertTrue(0 <= shufflePartitioner.selectChannels(sd, 1024)[0]); assertTrue(1024 > shufflePartitioner.selectChannels(sd, 1024)[0]);
assertEquals("{}", response);
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0);
assertNotEquals(eitherInfo1, eitherInfo2); assertNotEquals(eitherInfo1.hashCode(), eitherInfo2.hashCode());
assertEquals(Integer.valueOf(111), result); assertEquals(Integer.valueOf(222), result); assertNull(result); assertTrue(format.reachedEnd());
assertNotNull(stringValue);
assertTrue(sp.getForwardingTargetFields(0, 0).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 1).contains(1)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).size() == 0);
assertTrue(sp.getForwardingTargetFields(0, 0).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 1).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 0).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0));
assertEquals("path", p.getName()); assertEquals("path", p.getName()); assertEquals("", p.getName()); assertEquals("path", p.getName()); assertEquals("path", p.getName());
assertNotNull(executionConfig); assertEquals(closureCleanerEnabled, executionConfig.isClosureCleanerEnabled()); assertEquals(forceAvroEnabled, executionConfig.isForceAvroEnabled()); assertEquals(forceKryoEnabled, executionConfig.isForceKryoEnabled()); assertEquals(objectReuseEnabled, executionConfig.isObjectReuseEnabled()); assertEquals(sysoutLoggingEnabled, executionConfig.isSysoutLoggingEnabled()); assertEquals(dop, executionConfig.getParallelism());
assertTrue(info1 instanceof PojoTypeInfo); assertTrue(info2 instanceof PojoTypeInfo); assertFalse(info1.equals(info2));
assertTrue(exceptionForwarded.get());
assertEquals(Double.valueOf(1.21), result); assertEquals(Double.valueOf(2.23), result); assertNull(result); assertTrue(format.reachedEnd());
assertEquals(null, u.getAuthority()); assertEquals(path, u.getPath()); assertEquals(scheme, u.getScheme()); assertEquals(null, u.getAuthority()); assertEquals(path, u.getPath()); assertEquals(scheme, u.getScheme()); assertEquals("test", u.getAuthority()); assertEquals("/test", u.getPath());
assertTrue(savepointPathFuture.isCompleted()); assertEquals(0, getSavepointPromises(coordinator).size());
assertEquals(1, hashPartitioner.selectChannels(sd1, 1).length); assertEquals(1, hashPartitioner.selectChannels(sd1, 2).length); assertEquals(1, hashPartitioner.selectChannels(sd1, 1024).length);
assertEquals("019f314a", hex);
assertTrue(store.getStateStore() instanceof HeapStateStore);
assertNotNull(info1.getFQDNHostname()); assertNotNull(info2.getFQDNHostname());
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0);
assertTrue(slot.isAlive()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertTrue(slot.isReleased()); assertTrue(slot.isAlive()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertFalse(slot.isReleased()); assertFalse(slot.isAlive()); assertTrue(slot.isCanceled()); assertTrue(slot.isReleased());
assertEquals("\\\\b \\\\t \\\\/ <br> \\\\f \\\\r &lt;default&gt;", controlString);
assertTrue(k1.compareTo(k2) == 0); assertTrue(k1.compareTo(k3) < 0);
assertNotNull(subpartition.createReadView(null));
assertFalse(InstantiationUtil.isProperClass(Value.class));
assertEquals(this.testIntegerArray[i], new FieldFromArray<String>(i).extract(testIntegerArray));
assertEquals(Integer.valueOf(111), result); assertEquals(Integer.valueOf(222), result);
assertEquals(first, result); assertEquals(second, result);
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(2));
assertArrayEquals(result, globalPartitioner.selectChannels(sd, 1)); assertArrayEquals(result, globalPartitioner.selectChannels(sd, 2)); assertArrayEquals(result, globalPartitioner.selectChannels(sd, 1024));
assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(1, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(2, distributePartitioner.selectChannels(sd, 3)[0]); assertEquals(0, distributePartitioner.selectChannels(sd, 3)[0]);
assertEquals(tpeInfo1, tpeInfo2); assertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());
assertEquals(0, format.splitStart); assertEquals(myString.length() - bufferSize, format.splitLength); assertEquals(bufferSize, format.getBufferSize());
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).size() == 0); assertTrue(sp.getForwardingTargetFields(0, 2).size() == 0);
assertTrue(store.getStateStore() instanceof FileSystemStateStore); assertEquals(new Path(rootPath), stateStore.getRootPath());
assertTrue(taskResults[i].get());
assertTrue(fs.size() == 5); assertTrue(fs.contains(0)); assertTrue(fs.contains(1)); assertTrue(fs.contains(2)); assertTrue(fs.contains(3)); assertTrue(fs.contains(4)); assertTrue(fs.size() == 4); assertTrue(fs.contains(0)); assertTrue(fs.contains(1)); assertTrue(fs.contains(2)); assertTrue(fs.contains(3));
assertTrue(fs.size() == 2); assertTrue(fs.contains(2)); assertTrue(fs.contains(1));
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(2)); assertTrue(sp.getReadFields(0).size() == 2); assertTrue(sp.getReadFields(0).contains(0)); assertTrue(sp.getReadFields(0).contains(2));
assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3)); assertTrue(sp.getForwardingTargetFields(0, 0).contains(4)); assertTrue(sp.getForwardingTargetFields(0, 4).contains(0));
assertNull(reader.commentPrefix); assertEquals("#", reader.commentPrefix);
assertEquals(boe, tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked()); assertNull(tracker.getNextNonBlocked());
assertEquals(tpeInfo1, tpeInfo2); assertEquals(tpeInfo1.hashCode(), tpeInfo2.hashCode());
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(fs.size() == 3); assertTrue(fs.contains(0)); assertTrue(fs.contains(2)); assertTrue(fs.contains(5));
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(subpartition.registerListener(listener));
assertNotEquals(tpeInfo1, tpeInfo2);
assertTrue(store.getStateStore() instanceof HeapStateStore);
assertEquals(expectedName1, generatedName1); assertEquals(expectedName2, generatedName2); assertEquals(expectedName3, generatedName3);
assertTrue(reader.handleEvent(EndOfPartitionEvent.INSTANCE));
assertEquals(1, distributePartitioner.selectChannels(sd, 1).length); assertEquals(1, distributePartitioner.selectChannels(sd, 2).length); assertEquals(1, distributePartitioner.selectChannels(sd, 1024).length);
assertTrue(nextInputSplit == null);
assertEquals(recNoTimestamp, recNoTimestampCopy); assertEquals(recWithTimestamp, recWithTimestampCopy);
assertTrue(savepointPathFuture.isCompleted()); assertEquals(0, getSavepointPromises(coordinator).size());
assertEquals("{}", response);
assertEquals("\\n", new String(format.getDelimiter())); assertEquals("&-&", new String(format.getDelimiter()));
assertEquals(1, averageNew.getLocalValue(), 0.0);
assertEquals(2, p.depth()); assertEquals(3, p.depth()); assertEquals(12, p.depth()); assertEquals(0, p.depth()); assertEquals(4, p.depth());
assertEquals(4, sorted.size());
assertEquals("{}", response);
assertEquals(original, copy); assertEquals(original, serCopy); assertEquals(original, copy); assertEquals(original, serCopy);
assertEquals(1, shufflePartitioner.selectChannels(sd, 1).length); assertEquals(1, shufflePartitioner.selectChannels(sd, 2).length); assertEquals(1, shufflePartitioner.selectChannels(sd, 1024).length);
assertNotNull(buf1); assertNotNull(buf2); assertTrue("Repeated call to getNioBuffer() returns the same nio buffer", buf1 != buf2);
assertEquals("Listener was not notified.", 1, listener.getNumberOfNotifications());
assertEquals(1, forwardPartitioner.selectChannels(sd, 1).length); assertEquals(1, forwardPartitioner.selectChannels(sd, 2).length); assertEquals(1, forwardPartitioner.selectChannels(sd, 1024).length);
assertArrayEquals(first, broadcastPartitioner1.selectChannels(sd, 1)); assertArrayEquals(second, broadcastPartitioner2.selectChannels(sd, 2)); assertArrayEquals(sixth, broadcastPartitioner3.selectChannels(sd, 6));
assertArrayEquals(hashPartitioner.selectChannels(sd1, 1), hashPartitioner.selectChannels(sd2, 1)); assertArrayEquals(hashPartitioner.selectChannels(sd1, 2), hashPartitioner.selectChannels(sd2, 2)); assertArrayEquals(hashPartitioner.selectChannels(sd1, 1024), hashPartitioner.selectChannels(sd2, 1024));
assertEquals(origID.hashCode(), copyID.hashCode()); assertEquals(origID, copyID);
assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);
assertTrue(fs.size() == 1); assertTrue(fs.contains(0)); assertTrue(fs.size() == 1); assertTrue(fs.contains(0));
assertEquals(this.testStringArray[i], new FieldFromArray<String>(i).extract(testStringArray));
assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 1).contains(1)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2));
assertTrue(InstantiationUtil .hasPublicNullaryConstructor(StringValue.class));
assertEquals(0, getSavepointPromises(coordinator).size());
assertTrue(record.getNumFields() == 2); assertTrue(recVal1.getValue().equals(this.origVal1.getValue())); assertTrue(recVal2.getValue() == this.origVal3.getValue()); assertTrue(record.getNumFields() == oldLen - 1); assertTrue(record.getNumFields() == oldLen - 1); assertTrue(record.getNumFields() == oldLen - 1);
assertEquals(0L, new StreamRecord<>("test", 0).getTimestamp()); assertEquals(-1L, new StreamRecord<>("test", -1).getTimestamp()); assertEquals(1L, new StreamRecord<>("test", 1).getTimestamp()); assertEquals(Long.MIN_VALUE, new StreamRecord<>("test", Long.MIN_VALUE).getTimestamp()); assertEquals(Long.MAX_VALUE, new StreamRecord<>("test", Long.MAX_VALUE).getTimestamp());
assertNotNull(MimeTypes.getMimeTypeForFileName("test.txt")); assertNotNull(MimeTypes.getMimeTypeForFileName("t.txt")); assertNotNull(MimeTypes.getMimeTypeForFileName("first.second.third.txt")); assertNull(MimeTypes.getMimeTypeForFileName(".txt")); assertNull(MimeTypes.getMimeTypeForFileName("txt")); assertNull(MimeTypes.getMimeTypeForFileName("test."));
assertEquals("/my/path_123", p.toUri().getPath()); assertEquals("/my/path/abc", p.toUri().getPath()); assertEquals("/C:/my/windows/path/abc", p.toUri().getPath());
assertNull(e.getCause()); assertNotNull(e.getCauseAsString());
assertEquals(s1.hashCode(), s2.hashCode()); assertEquals(s1, s2);
assertEquals(msg.getClass(), NettyMessage.ErrorResponse.class); assertTrue(err.cause instanceof CancelTaskException);
assertTrue(fs.size() == 2); assertTrue(fs.contains(2)); assertTrue(fs.contains(1));
assertEquals("Didn\'t increment number of outstanding requests.", 1, writer.getNumberOfOutstandingRequests()); assertEquals("Didn\'t decrement number of outstanding requests.", 0, writer.getNumberOfOutstandingRequests());
assertTrue(hasDifferences);
assertArrayEquals(new Object[]{null, "b", "c", "d", "X"}, b1); assertArrayEquals(new Object[]{null, "c", "d", "X", null}, b2); assertArrayEquals(new Object[]{null, "X", null, null, null}, b3);
assertArrayEquals(new int[]{5, 5, 4, 2, 2}, ints);
assertSame(s, tr.series); assertTrue(tr.truncated); assertEquals(3, tr.head); assertEquals(2, tr.tail);
assertEquals(n1, n1); assertEquals(n1, n2); assertNotEquals(n1, n3); assertNotEquals(n1, n4);
assertEquals(n1, n1); assertEquals(n1, n2); assertNotEquals(n1, n3); assertNotEquals(n1, n4); assertNotEquals(n1, n5);
assertEquals(2, s.getInt(0)); assertEquals(3, s.getInt(1));
assertEquals(2, s.getLong(0)); assertEquals(3, s.getLong(1));
assertEquals(true, s.getBoolean(0)); assertEquals(false, s.getBoolean(1));
assertEquals("Unexpected DataFrame height ==> expected: <3> but was: <2>", f.getMessage());
assertSame(s, tr.series); assertTrue(tr.truncated); assertEquals(1, tr.head); assertEquals(1, tr.tail);
assertSame(s, tr.series); assertTrue(tr.truncated); assertEquals(0, tr.head); assertEquals(0, tr.tail);
assertEquals(1, s.getDouble(0), 0.001); assertEquals(2.1, s.getDouble(1), 0.001);
assertEquals(false, s.getBoolean(0)); assertEquals(true, s.getBoolean(1));
assertEquals(n1, n1); assertEquals(n1, n2); assertNotEquals(n1, n3); assertNotEquals(n1, n4);
assertArrayEquals(new int[]{Integer.MAX_VALUE, 2119160956, 0, -2123259216, Integer.MIN_VALUE}, ints);
assertTrue(ints[i - 1] >= ints[i], "Failed at " + i + ": " + ints[i - 1] + " vs " + ints[i]);
assertTrue(s instanceof ArraySeries);
assertEquals("{col1:one,column2:1},{col1:two,column2:2},{col1:three,column2:3},{col1:four,column2:4}", w.print(df).toString());
assertEquals("c", f.getExpected().getValue()); assertEquals("b", f.getActual().getValue());
assertEquals("X", s.get(0)); assertEquals("a", s.get(1)); assertEquals("b", s.get(2)); assertEquals("c", s.get(3));
assertEquals("b", s.get(0)); assertEquals("c", s.get(1)); assertEquals("d", s.get(2)); assertEquals("X", s.get(3));
assertEquals(1, s.getLong(0)); assertEquals(2, s.getLong(1));
assertSame(s, tr.series); assertTrue(tr.truncated); assertEquals(3, tr.head); assertEquals(3, tr.tail);
assertTrue(hasDifferences);
assertArrayEquals(new int[]{4, 3, 1, -2, -5}, ints);
assertSame(c1, md.getColumn("c1")); assertSame(c2, md.getColumn("c2"));
assertEquals("A,B\\r\\n" + "1,2\\r\\n" + "3,4\\r\\n", readFile(file.getAbsolutePath()));
assertEquals("a1", s.get(0)); assertEquals("b1", s.get(1)); assertEquals("a2", s.get(2)); assertEquals("b2", s.get(3));
assertEquals("a:,b:", w.print(DataFrame.newFrame("a", "b").empty()).toString());
assertEquals("{col1:one,c..2:1},{col1:two,c..2:2},{col1:t..e,c..2:3},{col1:four,c..2:4}", w.print(df).toString());
assertTrue(s instanceof ArraySeries);
assertEquals(2.1, s.getDouble(0), 0.001); assertEquals(3.2, s.getDouble(1), 0.001);
assertArrayEquals(new int[]{5, 4, 3, 2, 1}, ints);
assertEquals("A,B\\r\\n" + "1,2\\r\\n" + "3,4\\r\\n", Csv.saver().saveToString(df));
assertEquals(6, s1.size()); assertEquals(4, s2.size());
assertEquals(1, s.getInt(0)); assertEquals(2, s.getInt(1));
assertEquals(SaveViaInsert.class, saver.createSaveStrategy().getClass());
assertEquals("A,B\\r\\n" + "1,2\\r\\n" + "3,4\\r\\n", out.toString());
assertFalse(repeated, i + " is present at least twice");
assertEquals("{col1:one,column2:1},...,{col1:four,column2:4}", w.print(df).toString());
assertArrayEquals(new int[]{5, 4, 3, 2, 1}, ints);
assertEquals(Integer.valueOf(6), a[2]);
assertTrue(ints[i - 1] >= ints[i], "Failed at " + i + ": " + ints[i - 1] + " vs " + ints[i]);
assertArrayEquals(new Object[]{null, "X", "a", "b", "c"}, b1); assertArrayEquals(new Object[]{null, "a", "b", "c", null}, b2); assertArrayEquals(new Object[]{null, "c", null, null, null}, b3); assertArrayEquals(new Object[]{null, "X", null, null, null}, b4);
assertSame(s, tr.series); assertTrue(tr.truncated); assertEquals(1, tr.head); assertEquals(0, tr.tail);
assertEquals(n1, n1); assertEquals(n1, n2); assertNotEquals(n1, n3);
assertEquals(Integer.valueOf(1), DFDescriptor.A.get(arr)); assertEquals("a", DFDescriptor.B.get(arr)); assertEquals(Integer.valueOf(3), DFDescriptor.C.get(arr));
assertEquals(Integer.valueOf(3), S.get(a));
assertEquals("A,B\\r\\n" + "1,2\\r\\n" + "3,4\\r\\n", readFile(filePath));
assertArrayEquals(new int[]{33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}, ints);
assertArrayEquals(new int[]{4, 1, 5, 2, 3}, ints);
assertThat( integer.get(), is( 5 ) );
assertTrue( SpaceModifiers.isUpdateOnly( JSpace.UPDATE_ONLY ) ); assertFalse( SpaceModifiers.isUpdateOnly( JSpace.WRITE_ONLY ) ); assertFalse( SpaceModifiers.isUpdateOnly( JSpace.WRITE_OR_UPDATE ) );
assertTrue( SpaceModifiers.isReturnAsBytes( JSpace.EXCLUSIVE_READ_LOCK | JSpace.MATCH_BY_ID | JSpace.RETURN_AS_BYTES ) ); assertFalse( SpaceModifiers.isReturnAsBytes( JSpace.EXCLUSIVE_READ_LOCK | JSpace.MATCH_BY_ID ) );
assertThat( JVMUtil.repeatConcurrently( Runtime.getRuntime().availableProcessors(), 100, new Runnable() { AtomicInteger counter = new AtomicInteger(); @Override public void run() { if ( counter.incrementAndGet() % 2 == 0 ) throw new IllegalStateException( "exception" ); } } ).size(), is( greaterThan( 0 ) ) );
assertThat( serializer.readID( ByteBuffer.wrap( data ) ), is( notNullValue() ) );
assertEquals( Memory.kb( Long.SIZE ), (long) 64 * 1024 );
assertEquals( Memory.toKb( 1024 ), 1 );
assertTrue( SpaceModifiers.isWriteOnly( JSpace.WRITE_ONLY ) ); assertFalse( SpaceModifiers.isWriteOnly( JSpace.WRITE_OR_UPDATE ) ); assertFalse( SpaceModifiers.isWriteOnly( JSpace.UPDATE_ONLY ) );
assertEquals( Memory.gb( Long.SIZE ), (long) 64 * 1024 * 1024 * 1024 );
assertThat( JVMUtil.runAndGetExecutionException( new Runnable() { @Override public void run() { throw new NullPointerException(); } } ), is( notNullValue() ) );
assertEquals( Memory.mb( Long.SIZE ), (long) 64 * 1024 * 1024 );
assertThat( (String) serializer.readID( ByteBuffer.wrap( data ) ), is( entity1.getUniqueIdentifier() ) );
assertThat( keyLocker.writeLock( "abc", transactionID + 1, 1, true ), is( nullValue() ) ); assertThat( keyLocker.writeLock( "abc", transactionID + 2, 0, true ), is( nullValue() ) );
assertEquals(expectedProperty,property.toString());
assertTrue(actualProperty.equals(expectedProperty));
assertEquals(expectedProperty,property.toString());
assertEquals(expectedHashCode,property.hashCode());
assertEquals(expectedSubgroupName,property.getPropertySubGroup());
assertEquals(expectedProperty,property.toString());
assertEquals(expectedSubgroupName,property.getPropertySubGroupID());
assertThat("CreateTask is expected", tasks.get(0) instanceof CreateJobTask);
assertThat(pairs, containsInAnyOrder(Pair.of(source1, ImmutableSet.of(store1))));
assertEquals(Arrays.asList("abc", "def"), converter.readStream(stringStream));
assertThat(actual1, equalTo(expected1)); assertThat(actual2, equalTo(expected2));
assertThat(actual, equalTo(expected));
assertThat(JsonUtil.convertJsonStringToMap(input), equalTo(expected));
assertThat(actualFeatureSetStringRef1, equalTo(expectedFeatureSetStringRef)); assertThat(actualFeatureSetStringRef2, equalTo(expectedFeatureSetStringRef));
assertThat(TypeConversion.convertJsonStringToMap(input), equalTo(expected));
assertThat(TypeConversion.convertMapToJsonString(input), equalTo("{}"));
assertThat(featureSetsForStore, containsInAnyOrder(featureSet1, featureSet2));
assertThat(actual1, equalTo(expected1)); assertThat(actual2, equalTo(expected2)); assertThat(actual3, equalTo(expected3));
assertThat(TypeConversion.convertTagStringToList(input), equalTo(expected));
assertEquals(String.format("namespace:%s", new String(key.toByteArray())), keyWithPrefix);
assertThat(JsonUtil.convertJsonStringToMap(input), equalTo(expected));
assertEquals(expectedOutputString, new String(byteConverter.toByte(featureSets)));
assertArrayEquals(key.toByteArray(), serializer.serialize(key));
assertThat(TypeConversion.convertTimestamp(date), equalTo(expected));
assertThat(pairs, hasSize(2)); assertThat(pairs, hasItem(Pair.of(source1, Sets.newHashSet(store)))); assertThat(pairs, hasItem(Pair.of(source2, Sets.newHashSet(store))));
assertThat(pairs, hasSize(2)); assertThat(pairs, hasItem(Pair.of(source1, Sets.newHashSet(store1)))); assertThat(pairs, hasItem(Pair.of(source2, Sets.newHashSet(store2))));
assertThat(TypeConversion.convertTagStringToList(input), equalTo(expected));
assertThat( TypeConversion.convertMapToJsonString(input), hasJsonPath("$.key", equalTo("value")));
assertThat(TypeConversion.convertJsonStringToMap(input), equalTo(expected));
assertEquals(originalString, decompressedString);
assertThat(mappedFile).isNotNull(); assertThat(mappedFile.appendMessage(bytes)).isTrue(); assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(50); assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(45);
assertThat(mappedFile).isNotNull(); assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue();
assertThat(method).isNotNull(); assertThat(result != null).isTrue(); assertThat(cq).isNotNull(); assertThat(Boolean.parseBoolean(dispatchResult.toString())).isTrue();
assertThat(mappedFile).isNotNull(); assertThat(mappedFile.appendMessage(fixedMsg.getBytes())).isTrue(); assertThat(mappedFileQueue.getMappedMemorySize()).isEqualTo(fixedMsg.length() * 1024);
assertEquals("Must not be added again",1,template.getChild("foo").getChildren().size()); assertEquals("Must not be added again",1,translation.getChild("foo").getChildren().size());
assertNotNull(getFixture().review(null, templ, trans));
assertEquals("test.properties", getFixture().findTemplate(new File("test_de_DE.properties"), configuration).getName()); assertEquals("test.properties", getFixture().findTemplate(new File("test_de.properties"), configuration).getName());
assertNotNull(getFixture().review(null, master, slave));
assertEquals(2, result.size()); assertEquals("foo_de.properties", result.get(new Locale("de")).getName()); assertEquals("foo_en_US.properties", result.get(new Locale("en","US")).getName());
assertNotNull(getFixture().review(null, templ, trans));
assertEquals("ISO-8859-1", getFixture().getEncoding());
assertEquals(1, filenames.size()); assertEquals("messages.properties", filenames.get(index++));
assertNull(getFixture().review(null, master, slave));
assertEquals(-1, c.compare(r1, r2)); assertEquals(-1, c.compare(r1, r2)); assertEquals(-1, c.compare(r1, r2)); assertEquals(-1, c.compare(r1, r2));
assertEquals(1, versions.size()); assertEquals("a_2.1.jar", versions.get(0));
assertEquals(1, properties.size()); assertEquals("key", property.getKey()); assertEquals("value", property.getValue()); assertNull(file.getLicenseHeader());
assertEquals("test_en_US.properties", getFixture().findTemplate(new File("test_de_DE.properties"), configuration).getName()); assertEquals("test_en_US.properties", getFixture().findTemplate(new File("test_de_US.properties"), configuration).getName());
assertNull(getFixture().review(null, master, slave));
assertEquals(1, versions.size()); assertEquals("a.b_19.0.1.jar", versions.get(0));
assertNull(getFixture().review(null, master, slave));
assertNull("this is ok, because the 0 argument is present in both cases",getFixture().review(null, master, slave));
assertEquals(1, properties.size()); assertEquals("key", property.getKey()); assertEquals("value", property.getValue()); assertEquals("licensed under\\napache license\\nv3", file.getLicenseHeader());
assertEquals(expected, result.toString());
assertNotNull("must create a review if slave existis without template", review);
assertNotNull(getFixture().review(null, master, slave));
assertNull(getFixture().review(null, master, slave));
assertEquals("Must write a BOM in unicode mode", ByteOrderMark.UTF_8, mark);
assertNull(getFixture().review(null, templ, trans));
assertEquals("Must be added",2,template.getChild("foo").getChildren().size()); assertEquals("Must be added",2,translation.getChild("foo").getChildren().size());
assertFalse(getFixture().isBilingual());
assertNull("Must not write a BOM in iso mode", mark);
assertNotNull( "its faulty if the master has no value, but there is a translation", review);
assertNull("its alright if both are empty", review);
assertNotNull( "the value is empty, but the key in the translation is still wrong", review);
assertEquals(2, versions.size()); assertEquals("a.b_1.0.1.jar", versions.get(0)); assertEquals("b_2.0.0.jar", versions.get(1));
assertEquals(2, properties.size()); assertEquals("key", property.getKey()); assertEquals("value", property.getValue()); assertEquals("key3", property.getKey()); assertEquals("value", property.getValue()); assertEquals("myannotation", annotation.getName()); assertEquals("bar", annotation.getValues().get("foo"));
assertNull( "empty translation is not worth a review. The UI spots that alone", review);
assertEquals(1, properties.size()); assertEquals("DTM.CASCADE_SESSION_FRAMES_TEXT", property.getKey()); assertEquals("Cascade", property.getValue()); assertEquals("test", file.getLicenseHeader());
assertNull("equality is ok if terminology says so",getFixture().review(mock(PropertyFileDescriptor.class), createProperty("test", "test"), createProperty("test", "test")));
assertEquals(expected, result.toString());
assertEquals("messages.properties", filenames.get(index++)); assertEquals("messages2.properties", filenames.get(index++)); assertEquals("plugin.properties", filenames.get(index++)); assertEquals("messages.properties", filenames.get(index++)); assertEquals(4, filenames.size());
assertEquals(0, filenames.size());
assertEquals(-1, fixture.compare(folder1, folder2)); assertEquals(-1, fixture.compare(folder1, folder2)); assertEquals(-1, fixture.compare(folder1, folder2)); assertEquals(-1, fixture.compare(folder1, folder2));
assertEquals("#apache license\\n#v3\\n\\n#comment\\nkey = value\\n", result);
assertNotNull(getFixture().review(null, master, slave));
assertEquals(expected, result.toString());
assertEquals(expected, result.toString());
assertNull(getFixture().review(mock(PropertyFileDescriptor.class), createProperty("key", "value"), createProperty("key", "value1"))); assertNotNull(getFixture().review(mock(PropertyFileDescriptor.class), createProperty("key", "value"), createProperty("key", "value")));
assertNull(getFixture().review(null, templ, trans));
assertEquals("messages.properties", filenames.get(index++)); assertEquals("messages2.properties", filenames.get(index++)); assertEquals("plugin.properties", filenames.get(index++)); assertEquals("messages.properties", filenames.get(index++)); assertEquals("wiki_example.properties", filenames.get(index++)); assertEquals(5, filenames.size());
assertEquals(expected, result.toString());
assertEquals(expected, result.toString());
assertEquals(15, result.getSuccess()); assertEquals(0, result.getWarning()); assertEquals(0, result.getDanger());
assertEquals(1, filenames.size()); assertEquals("messages_en_CA.properties", filenames.get(index++));
assertEquals(1, versions.size()); assertEquals("a_1.0.0.jar", versions.get(0));
assertEquals(new Locale("de","DE"),getFixture().getLocale(new File("test_de_DE.properties"))); assertEquals(new Locale("de","DE"),getFixture().getLocale(new File("tes_en_USt_de_DE.properties")));
assertNull(review);
assertEquals(1, filenames.size()); assertEquals("messages.properties", filenames.get(index++));
assertTrue(testtable.getFields().size() == 2);
assertTrue(got.getName().equals("taxonName"));
assertTrue(froms.contains(c)); assertTrue(froms.contains(b)); assertTrue(!froms.contains(b)); assertTrue(froms.contains(d));
assertTrue(result.get(0) == a); assertTrue(result.get(1) == c); assertTrue(result.get(2) == b); assertTrue(result.get(3) == d); assertTrue(result.get(result.size()-1) == f);
assertTrue(!disConnect.isStronglyConnected()); assertTrue(connect.isStronglyConnected());
assertTrue(testtable.getFields().size() == 3);
assertTrue(v.getData().equals("nodule number nine"));
assertTrue(disConnect.getAdjacentVertices(a).contains(c)); assertTrue(connect.getAdjacentVertices(a).contains(c)); assertTrue(connect.getAdjacentVertices(a).contains(d)); assertTrue(connect.getAdjacentVertices(a).contains(f));
assertTrue(testtable.getName().equals("testtable"));
assertTrue(v.getLabel().equals("testing"));
assertTrue(result.size() == 1); assertTrue(v == a);
assertTrue(tester.getPointA() == a); assertTrue(tester.getPointB() == b); assertTrue(tester.getData().equals("edgy"));
assertTrue(t.contains(a)); assertTrue(t.contains(c)); assertTrue(t.size() == 0);
assertTrue(result.get(0) == a); assertTrue(result.get(1) == c); assertTrue(result.get(2) == b);
assertThat(generationParameters, samePropertyValuesAs(stringGenerationParameters));
assertThat(pemString, startsWith("ssh-rsa "));
assertThat(subject.matchesCanary(mock(EncryptionKeyCanary.class)), equalTo(false));
assertThat(pemString, startsWith("-----BEGIN RSA PRIVATE KEY-----")); assertThat(pemString, endsWith("-----END RSA PRIVATE KEY-----\\n"));
assertThat(pe.getMessage(), equalTo(ErrorMessages.NOT_A_CA_NAME));
assertThat(characterRules, iterableWithSize(2)); assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.UpperCase), usesCharacters(EnglishCharacterData.Digit) )); assertThat(characterRules, not(containsInAnyOrder( usesCharacters(EnglishCharacterData.LowerCase), usesCharacters(CredHubCharacterData.SPECIAL), usesCharacters(CredHubCharacterData.HEX) )));
assertThat(keys.size(), equalTo(2)); assertThat(firstKey.getEncryptionPassword(), equalTo("opensesame")); assertThat(firstKey.isActive(), equalTo(true)); assertThat(secondKey.getEncryptionPassword(), equalTo("correcthorsebatterystaple")); assertThat(secondKey.isActive(), equalTo(false));
assertThat(subject.createKeyProxy(keyMetadata).getKey(), equalTo(aesKey));
assertThat(passwordCredentialData.getEncryptedGenerationParameters().getEncryptedValue(), notNullValue()); assertThat(passwordCredentialData.getEncryptedGenerationParameters().getNonce(), notNullValue());
assertThat(certificateAuthorityService.findTransitionalVersion(CREDENTIAL_NAME).getCertificate(), equalTo(transitionalCertificateCredential.getCertificate()));
assertThat(certificateReader.isCa(), equalTo(false));
assertThat(characterRules, iterableWithSize(4)); assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.UpperCase), usesCharacters(EnglishCharacterData.LowerCase), usesCharacters(EnglishCharacterData.Digit), usesCharacters(CredHubCharacterData.SPECIAL) ));
assertThat(authorityKeyIdentifier.getKeyIdentifier(), equalTo(subjectKeyIdentifier.getKeyIdentifier()));
assertThat(generatedCertificate.getIssuerX500Principal().getEncoded(), equalTo(caCertificate.getSubjectX500Principal().getEncoded()));
assertThat(subject .decrypt(new EncryptedValue(activeKeyUuid, "fake-encrypted-value".getBytes(UTF_8), "fake-nonce".getBytes(UTF_8))), equalTo("fake-plaintext"));
assertThat(subject.matchesCanary(mock(EncryptionKeyCanary.class)), equalTo(false));
assertThat(ssh.getPublicKey(), equalTo(expectedPublicKey));
assertThat(subject.getCredentialType(), equalTo("json"));
assertThat(passwordCredentialData.getEncryptedGenerationParameters(), nullValue());
assertThat(config.getHost(), equalTo("localhost")); assertThat(config.getPort(), equalTo(50051));
assertThat(credential, equalTo(expected));
assertThat( subject.decrypt(new EncryptedValue(activeKeyUuid, "fake-encrypted-value".getBytes(UTF_8), "fake-nonce".getBytes(UTF_8))), equalTo("fake-plaintext"));
assertThat(subject.getCredentialType(), equalTo("user"));
assertThat(jsonCredentialData.getEncryptedValueData().getEncryptedValue(), notNullValue()); assertThat(jsonCredentialData.getNonce(), notNullValue());
assertTrue(subject.matchesCanary(encryptionKeyCanary));
assertThat(keys.size(), equalTo(3)); assertThat(keys.stream().map(EncryptionKey::getKey).collect(Collectors.toList()), containsInAnyOrder( activeKey, existingKey1, existingKey2 ));
assertThat(user.getUsername(), equalTo("test-user")); assertThat(user.getPassword(), equalTo("fake-generated-password")); assertThat(user.getSalt(), equalTo("fake-generated-salt"));
assertThat(characterRules, iterableWithSize(3)); assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.UpperCase), usesCharacters(EnglishCharacterData.LowerCase), usesCharacters(EnglishCharacterData.Digit) )); assertThat(characterRules, not(hasItem(usesCharacters(CredHubCharacterData.SPECIAL)))); assertThat(characterRules, not(hasItem(usesCharacters(CredHubCharacterData.HEX))));
assertThat(e.getCause().getMessage(), equalTo("test message"));
assertThat(e.getCause().getCause().getMessage(), equalTo("some message that isn\'t 0x40..."));
assertFalse(subject.matchesCanary(encryptionKeyCanary));
assertThat(actualValue, equalTo(expectedResult));
assertThat(subject.getValue(), equalTo("my-value"));
assertThat(keySet.get(activeCanaryUuid).getKey(), equalTo(activeKey)); assertThat(keySet.get(existingCanaryUuid1).getKey(), equalTo(existingKey1)); assertThat(keySet.get(existingCanaryUuid2).getKey(), equalTo(existingKey2)); assertThat(keySet.getInactiveUuids().toArray(), arrayContainingInAnyOrder(existingCanaryUuid1, existingCanaryUuid2)); assertThat(keySet.getActive().getUuid(), equalTo(activeCanaryUuid));
assertThat(ssh.getPublicKey(), equalTo(CertificateFormatter.derOf((RSAPublicKey) keyPair.getPublic()))); assertThat(ssh.getPrivateKey(), equalTo(CertificateFormatter.pemOf(keyPair.getPrivate())));
assertTrue(subject.matchesCanary(encryptionKeyCanary)); assertEquals(encryptionProvider, argument.getValue().getProvider()); assertEquals("name", argument.getValue().getEncryptionKeyName());
assertThat(subject.createKeyProxy(keyMetadata).getKey(), equalTo(aesKey));
assertFalse(subject.matchesCanary(canary));
assertThat(generatedCertificate.getExtensionValue(Extension.keyUsage.getId()), nullValue()); assertThat(Arrays.copyOfRange(actualKeyUsage, 5, actualKeyUsage.length), equalTo(certificateGenerationParameters.getKeyUsage().getBytes()));
assertThat(provider.getKeys(), is(empty())); assertThat(provider.getKeys(), hasSize(1));
assertFalse(subject.matchesCanary(canary));
assertThat(hexOutput, equalTo(knownGeneratedKey)); assertThat(derivedKey.getEncoded().length, equalTo(32));
assertThat(generationParameters, equalTo(actualGenerationParameters));
assertThat(pe.getMessage(), equalTo(ErrorMessages.CERT_NOT_CA));
assertThat(e.getMessage(), equalTo(ErrorMessages.MISSING_VALUE));
assertThat(userCredentialData.getEncryptedGenerationParameters().getEncryptionKeyUuid(), equalTo(ENCRYPTION_KEY_UUID)); assertThat(userCredentialData.getEncryptedGenerationParameters().getEncryptedValue(), equalTo(ENCRYPTED_GENERATION_PARAMS)); assertThat(userCredentialData.getEncryptedGenerationParameters().getNonce(), equalTo(PARAMETERS_NONCE));
assertThat(subject.generateSalt().size(), greaterThanOrEqualTo(48));
assertFalse(subject.matchesCanary(encryptionKeyCanary));
assertThat(certificateAuthorityService.findActiveVersion(CREDENTIAL_NAME), samePropertyValuesAs(certificate));
assertThat(passwordCredentialData.getEncryptedValueData().getEncryptedValue(), notNullValue()); assertThat(passwordCredentialData.getNonce(), notNullValue());
assertThat(authorityKeyIdentifier.getKeyIdentifier(), equalTo(caSubjectKeyIdentifier.getKeyIdentifier()));
assertThat(pe.getMessage(), equalTo(ErrorMessages.NOT_A_CA_NAME));
assertThat(new UUID(buffer.getLong(), buffer.getLong()), equalTo(originalUuid));
assertThat(subject.matchesCanary(canary), equalTo(true));
assertFalse(subject.matchesCanary(encryptionKeyCanary));
assertThat(keySet.getKeys(), hasItem(keySet.getActive()));
assertThat(userCredentialData.getEncryptionKeyUuid(), equalTo(ENCRYPTION_KEY_UUID)); assertThat(userCredentialData.getEncryptedValueData().getEncryptedValue(), equalTo(ENCRYPTED_PASSWORD)); assertThat(userCredentialData.getEncryptedGenerationParameters().getEncryptedValue(), equalTo(ENCRYPTED_GENERATION_PARAMS)); assertThat(userCredentialData.getNonce(), equalTo(NONCE)); assertThat(userCredentialData.getEncryptedGenerationParameters().getNonce(), equalTo(PARAMETERS_NONCE));
assertNull(transitionalVersion);
assertThat(characterRules, iterableWithSize(0));
assertThat(generationParameters, equalTo(actualGenerationParameters));
assertThat(newEncryption.getUuid(), equalTo(value.getUuid()));
assertThat(user.getUsername(), equalTo("fake-generated-username")); assertThat(user.getPassword(), equalTo("fake-generated-password")); assertThat(user.getSalt(), equalTo("fake-generated-salt"));
assertThat(subject.createKeyProxy(keyMetadata).getKey(), equalTo(aesKey));
assertThat(rsaHelper.getKeyLength(), equalTo(0));
assertThat(rte.getMessage(), containsString("The encryption keys provided cannot decrypt any of the 4 value(s) in the database." + " Please make sure you\'ve provided the necessary encryption keys."));
assertThat(generatedCertificate.getExtensionValue(Extension.keyUsage.getId()), nullValue()); assertThat(Arrays.copyOfRange(actualKeyUsage, 2, actualKeyUsage.length), equalTo(certificateGenerationParameters.getExtendedKeyUsage().getEncoded()));
assertThat(generationParameters, equalTo(actualGenerationParameters));
assertThat(encryptedValue, equalTo(expectedEncryption));
assertThat(subject.matchesGenerationParameters(generationParameters), equalTo(false));
assertThat(generatedCertificate.getExtensionValue(Extension.authorityKeyIdentifier.getId()), nullValue());
assertThat(password, equalTo(USER_PASSWORD));
assertThat(internal, sameInstance(internalAgain)); assertThat(internal, instanceOf(PasswordEncryptionService.class));
assertThat(keySet.get(activeCanaryUuid).getKey(), equalTo(activeKey)); assertThat(keySet.get(unknownCanaryUuid), equalTo(null)); assertThat(keySet.getActive().getUuid(), equalTo(activeCanaryUuid)); assertThat(keySet.getInactiveUuids().size(), equalTo(0));
assertThat(characterRules, iterableWithSize(2)); assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.UpperCase), usesCharacters(EnglishCharacterData.LowerCase) )); assertThat(characterRules, not(containsInAnyOrder( usesCharacters(EnglishCharacterData.Digit), usesCharacters(CredHubCharacterData.SPECIAL) )));
assertThat(userCredentialData.getEncryptionKeyUuid(), equalTo(ENCRYPTION_KEY_UUID)); assertThat(userCredentialData.getEncryptedValueData().getEncryptedValue(), equalTo(ENCRYPTED_PASSWORD)); assertThat(userCredentialData.getNonce(), equalTo(NONCE));
assertThat(subject.findByCanaryUuids(canaryUuids), equalTo(encryptedValues));
assertThat(certificateReader.isCa(), equalTo(true));
assertThat(subject.matchesCanary(deprecatedCanary), equalTo(true));
assertThat(characterRules, iterableWithSize(2)); assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.LowerCase), usesCharacters(EnglishCharacterData.Digit) )); assertThat(characterRules, not(containsInAnyOrder( usesCharacters(EnglishCharacterData.UpperCase), usesCharacters(CredHubCharacterData.SPECIAL), usesCharacters(CredHubCharacterData.HEX) )));
assertThat(signer.getAlgorithmIdentifier().getAlgorithm(), equalTo(sha256WithRSAEncryption));
assertThat(pe.getMessage(), equalTo(ErrorMessages.Credential.CERTIFICATE_ACCESS));
assertThat(subject.findAll(), hasSize(0));
assertThat(generatedCertificate.getExtensionValue(Extension.subjectAlternativeName.getId()), nullValue()); assertThat(Arrays.copyOfRange(actualSubjectAlternativeName, 2, actualSubjectAlternativeName.length), equalTo(expectedAlternativeName));
assertThat(certificateReader.isCa(), equalTo(false));
assertThat(Arrays.copyOfRange(actual, 4, actual.length), equalTo(expectedSubjectKeyIdentifier));
assertThat(subject.getCredentialType(), equalTo("password"));
assertThat(rsa.getPublicKey(), equalTo(CertificateFormatter.pemOf(keyPair.getPublic()))); assertThat(rsa.getPrivateKey(), equalTo(CertificateFormatter.pemOf(keyPair.getPrivate())));
assertThat(generatedCertificate.getIssuerDN().getName(), containsString("CN=my cert name")); assertThat(generatedCertificate.getSubjectDN().toString(), containsString("CN=my cert name")); assertThat(authorityKeyId, equalTo(expectedSubjectKeyIdentifier)); assertThat(generatedCertificate.getSerialNumber(), equalTo(BigInteger.valueOf(1337)));
assertThat(subject.encrypt("fake-plaintext"), equalTo(expectedEncryption));
assertThat(valueCredentialData.getEncryptedValueData().getEncryptedValue(), notNullValue()); assertThat(valueCredentialData.getEncryptedValueData().getNonce(), notNullValue());
assertThat(actual.getLength(), equalTo(20)); assertThat(actual.isExcludeLower(), equalTo(false)); assertThat(actual.isExcludeUpper(), equalTo(false)); assertThat(actual.isExcludeNumber(), equalTo(true)); assertThat(actual.isIncludeSpecial(), equalTo(false));
assertThat(subject.getCredentialType(), equalTo("value"));
assertThat(characterRules, containsInAnyOrder( usesCharacters(EnglishCharacterData.Digit), usesCharacters(EnglishCharacterData.LowerCase), usesCharacters(EnglishCharacterData.UpperCase) )); assertThat(characterRules, not(hasItem(usesCharacters(CredHubCharacterData.HEX))));
assertThat(keyProxy, instanceOf(PasswordBasedKeyProxy.class));
assertFalse(MessageFieldUtil.isMessage(field));
assertEquals(VALUE, provider.getProperty(null, PROPERTY));
assertEquals("__bitField0", MessageFieldUtil.bitFieldName(f1)); assertEquals("__bitField0", MessageFieldUtil.bitFieldName(f32)); assertEquals("__bitField1", MessageFieldUtil.bitFieldName(f33));
assertEquals("java.util.List<Integer>", MessageFieldUtil.getRepeatedFieldType(field));
assertEquals("getClass_", MessageFieldUtil.getFieldGetterName(field));
assertEquals("some_foo", Formatter.toUnderscoreCase("someFoo")); assertEquals("some_foo", Formatter.toUnderscoreCase("SomeFoo"));
assertEquals("java.lang.Iterable<Integer>", MessageFieldUtil.getIterableFieldType(field));
assertFalse(MessageFieldUtil.isScalarNullableType(field));
assertEquals("interface_", MessageFieldUtil.getFieldName(field));
assertEquals("getInterfaceValue", MessageFieldUtil.getEnumFieldValueGetterName(field));
assertEquals("#/types/io.protostuff.Test", rendering.href); assertEquals("Test", rendering.text);
assertEquals("setInterface", MessageFieldUtil.getBuilderSetterName(field));
assertEquals("clearInterface", MessageFieldUtil.getFieldCleanerName(field));
assertTrue(MessageFieldUtil.isScalarNullableType(field));
assertEquals("getInterface", MessageFieldUtil.getFieldGetterName(field));
assertEquals("package.Enum.A", MessageFieldUtil.getDefaultValue(field));
assertEquals("SOME_FOO", Formatter.toUpperCase("some_foo"));
assertEquals("fieldName", MessageFieldUtil.getFieldName(field));
assertEquals("int", MessageFieldUtil.getFieldType(field));
assertEquals("package.Enum", MessageFieldUtil.getWrapperFieldType(field));
assertEquals("getInterface", MessageFieldUtil.getBuilderGetterName(field));
assertNotNull(a); assertNull(b);
assertEquals("java.package.MessageName", name);
assertEquals(0, MessageUtil.bitFieldNames(m).size()); assertEquals(1, MessageUtil.bitFieldNames(m).size()); assertEquals(1, MessageUtil.bitFieldNames(m).size()); assertEquals(2, bitFieldNames.size()); assertEquals("__bitField0", bitFieldNames.get(0)); assertEquals("__bitField1", bitFieldNames.get(1));
assertEquals("someFoo", Formatter.toCamelCase("some_foo")); assertEquals("someFoo", Formatter.toCamelCase("SomeFoo"));
assertTrue(MessageFieldUtil.isMessage(field));
assertEquals("Integer", MessageFieldUtil.getWrapperFieldType(field));
assertEquals("int", ScalarFieldTypeUtil.getPrimitiveType(INT32));
assertEquals("abc", removeFirstAndLastChar("\\"abc\\""));
assertEquals("setInterfaceValue", MessageFieldUtil.getEnumFieldValueSetterName(field));
assertFalse(MessageFieldUtil.isMessage(field));
assertEquals("Service", name);
assertEquals("hasInterface", MessageFieldUtil.getHasMethodName(field));
assertEquals("package.Enum.UNRECOGNIZED", MessageFieldUtil.getDefaultValue(field));
assertEquals("#/types/io.protostuff.Test", rendering.href); assertEquals("io.protostuff.Test", rendering.text);
assertNotNull(a); assertNotNull(b); assertNull(c); assertEquals("1", a.getText(Interval.of(0, 1))); assertEquals("2", b.getText(Interval.of(0, 1)));
assertEquals("0", ScalarFieldTypeUtil.getDefaultValue(INT32));
assertEquals("package.Message", MessageFieldUtil.getFieldType(field));
assertEquals("MessageName", name);
assertTrue(MessageFieldUtil.isScalarNullableType(field));
assertEquals("interface", MessageFieldUtil.getJsonFieldName(field));
assertEquals("setInterfaceList", MessageFieldUtil.getRepeatedBuilderSetterName(field));
assertEquals(1, MessageFieldUtil.bitFieldMask(f1)); assertEquals(-2147483648, MessageFieldUtil.bitFieldMask(f32)); assertEquals(1, MessageFieldUtil.bitFieldMask(f33));
assertTrue(provider.hasProperty(PROPERTY)); assertFalse(provider.hasProperty("does not exist"));
assertEquals("serviceMethod", name);
assertEquals("some_foo", Formatter.toLowerCase("SOME_FOO"));
assertEquals("setInterface", MessageFieldUtil.getFieldSetterName(field));
assertEquals(0, MessageFieldUtil.bitFieldIndex(f1)); assertEquals(31, MessageFieldUtil.bitFieldIndex(f32)); assertEquals(0, MessageFieldUtil.bitFieldIndex(f33));
assertNotNull(s1); assertNotNull(s2); assertNull(s3); assertEquals("1", s1.getText(Interval.of(0, 1))); assertEquals("2", s2.getText(Interval.of(0, 1)));
assertEquals("SomeFoo", Formatter.toPascalCase("some_foo")); assertEquals("SomeFoo", Formatter.toPascalCase("someFoo"));
assertEquals("0", MessageFieldUtil.getDefaultValue(field));
assertEquals("MessageName", name);
assertTrue(MessageFieldUtil.isScalarNullableType(field));
assertEquals("io.protostuff.MessageName", name);
assertEquals("java.lang.Iterable<package.Enum>", MessageFieldUtil.getIterableFieldType(field));
assertEquals("interface_", name);
assertEquals("io.protostuff.MessageName.NestedMessage", name);
assertEquals("Integer", ScalarFieldTypeUtil.getWrapperType(INT32));
assertEquals("java.util.List<package.Enum>", MessageFieldUtil.getRepeatedFieldType(field));
assertEquals("package.Message.getDefaultInstance()", MessageFieldUtil.getDefaultValue(field));
assertThat(tested.collectionView).isNotNull();
assertThat(tested.refreshLayout.isRefreshing()).isFalse(); assertThat(tested.getChildAt(1)).isEqualTo(emptyView); assertThat(tested.refreshLayout.isRefreshing()).isFalse(); assertThat(tested.getChildAt(1)).isEqualTo(errorView);
assertThat(tested.refreshLayout.isRefreshing()).isFalse();
assertThat(mergedList).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6));
assertThat(tested.validate("foo")).isFalse(); assertThat(tested.validate("foo@")).isFalse(); assertThat(tested.validate("foo@gmail")).isFalse();
assertThat(tested.validate("foo@gmail.com")).isTrue();
assertThat(tested.refreshLayout.isRefreshing()).isTrue(); assertThat(tested.getChildCount()).isEqualTo(1);
assertEquals(mockedAppComponent, Daggers.appComponent);
assertThat(tested.refreshLayout.isRefreshing()).isFalse(); assertThat(tested.getChildCount()).isEqualTo(1);
assertThat(appendedList).isEqualTo(Arrays.asList(1, 2, 3, 4));
assertThat(tested.collectionView).isNull();
assertEquals(header, request.getHeaderValues());
assertEquals("value", extractor.getValue("name"));
assertTrue(entrySet.containsAll(coll));
assertTrue(renderer.isRenderable("Result", requestContext));
assertNotNull(ClassUtil.instantiate(TestClass.class.getName(), true)); assertNull(ClassUtil.instantiate("this.class.does.not.Exist", true));
assertTrue(map.keySet() instanceof RemovableKeySet);
assertFalse(map.containsValue(3));
assertEquals(new Integer(2), map.get("two"));
assertTrue(names.hasMoreElements()); assertEquals("one", names.nextElement()); assertFalse(names.hasMoreElements());
assertEquals("value", extractor.getValue("key"));
assertArrayEquals(new String[] { "parent", "page" }, context.getAvailableScopes().toArray());
assertTrue(req.getHeaderValues() instanceof HeaderValuesMap);
assertEquals(keys, extractor.getKeys());
assertNotNull(context.getPrintWriter());
assertEquals("value", extractor.getValue("name"));
assertEquals(response, req.getResponse());
assertEquals(httpRequest, servletRequest.getRequest()); assertEquals(httpResponse, servletRequest.getResponse());
assertEquals(servletContext, context.getContext());
assertTrue(jspRequest instanceof JspRequest);
assertEquals(portletContext, context.getPortletContext());
assertEquals(param, request.getParam());
assertEquals(new Integer(1), VelocityUtil.getObject(new Integer(1), new Integer(2))); assertEquals(new Integer(1), VelocityUtil.getObject(new Integer(1), null)); assertEquals(new Integer(2), VelocityUtil.getObject(null, new Integer(2))); assertNull(VelocityUtil.getObject(null, null));
assertTrue(context.getApplicationScope() instanceof ScopeMap);
assertTrue(req.getParam() instanceof ReadOnlyEnumerationMap);
assertEquals(keys, extractor.getKeys());
assertEquals("test template with test value", writer.toString());
assertEquals(response, req.getResponse());
assertTrue(map.isEmpty());
assertTrue(request.getSessionScope() instanceof ScopeMap);
assertEquals("value", extractor.getValue("attribute"));
assertEquals(1, map.size());
assertEquals(wrappedContext, wrapper.getWrappedApplicationContext());
assertEquals(42, notnullParam); assertEquals(null, nullParam); assertEquals(42, notnullParamDefault); assertEquals(24, nullParamDefault);
assertEquals(cause, exception.getCause()); assertEquals("my message", exception.getMessage());
assertNull(extractor.getValue("key"));
assertNull(extractor.getValue("name"));
assertEquals("key", entry.getKey());
assertTrue(field.get(req) instanceof PortletRequestDelegate); assertTrue(field.get(req) instanceof MimeResponseDelegate);
assertEquals(keys, extractor.getKeys());
assertTrue(context.getApplicationScope() instanceof ScopeMap);
assertEquals(param, request.getRequestLocale());
assertTrue(modelBody instanceof VelocityModelBody);
assertTrue(req.getResponseHeaders() instanceof HeaderExtractor);
assertNull(map.put("one", 1));
assertTrue((Boolean)request.getContext(Request.REQUEST_SCOPE).get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));
assertEquals(printWriter, response.getWriter());
assertTrue(map.equals(otherMap));
assertEquals(locale, req.getRequestLocale());
assertTrue(req.isUserInRole("myrole"));
assertTrue(req.getResponseHeaders() instanceof HeaderExtractor);
assertTrue(context.getPageScope() instanceof EnvironmentScopeMap);
assertFalse(map.isEmpty());
assertTrue(entrySet.retainAll(coll));
assertNotNull(ClassUtil.instantiate(TestClass.class.getName()));
assertTrue(field.get(req) instanceof StateAwareRequestDelegate); assertTrue(field.get(req) instanceof StateAwareResponseDelegate);
assertTrue(map.containsKey("one")); assertFalse(map.containsKey("two"));
assertEquals(2, map.size());
assertFalse(map.isEmpty());
assertNotNull(is);
assertTrue(jspModelBody instanceof JspModelBody);
assertNull(extractor.getValue("name"));
assertNull(extractor.getKeys());
assertEquals(keys, extractor.getKeys());
assertEquals(os, delegate.getOutputStream());
assertFalse(delegate.isResponseCommitted());
assertEquals(request, req.getRequest());
assertEquals(req.getWriter(), os);
assertTrue(req.getRequestScope() instanceof ScopeMap);
assertFalse(entrySet.remove("one"));
assertFalse(map.equals(otherMap));
assertEquals(param, request.getParamValues());
assertEquals("value", extractor.getValue("name"));
assertTrue(req.isResponseCommitted());
assertEquals("value", extractor.getValue("key"));
assertEquals(applicationContext, ServletUtil.getApplicationContext(servletContext));
assertEquals(("first".hashCode() ^ value1.hashCode()) + ("second".hashCode() ^ 0), map.hashCode());
assertEquals("value", extractor.getValue("name"));
assertNotNull(keys); assertFalse(keys.hasMoreElements());
assertEquals(obj, wrapper.getResources("whatever.html"));
assertEquals(params, delegate.getParamValues());
assertEquals(keys, extractor.getValues("name"));
assertEquals(servletContext, config.getServletContext());
assertEquals(2, CollectionUtil.enumerationSize(enumeration));
assertEquals("value", extractor.getValue("name"));
assertTrue(request.isUserInRole("myrole"));
assertTrue(map.containsKey("key"));
assertTrue(req.getRequestScope() instanceof ScopeMap);
assertEquals(new Integer(1), FreemarkerUtil.getAsObject(null, Integer.class, new Integer(1)));
assertEquals(keys, extractor.getKeys());
assertEquals(keys, extractor.getKeys());
assertEquals(writer, request.getWriter());
assertEquals("value", entry.getValue());
assertFalse(map.isEmpty());
assertEquals("value", extractor.getValue("key"));
assertEquals(requestModel, FreemarkerRequestUtil.getRequestHashModel(env));
assertTrue(request.getRequestScope() instanceof ScopeMap);
assertTrue(req.isResponseCommitted());
assertEquals("value", extractor.getValue("name"));
assertEquals(req.getOutputStream(), os);
assertEquals(applicationContext, request.getApplicationContext());
assertEquals(applicationContext, request.getApplicationContext());
assertTrue(request.isResponseCommitted());
assertEquals(keys, extractor.getKeys());
assertEquals(locale, req.getRequestLocale());
assertTrue(entrySet.contains("one"));
assertEquals(keys, extractor.getKeys());
assertTrue(resource.getLastModified() > 0);
assertTrue(entryIt.hasNext()); assertEquals("two", entryIt.next());
assertTrue(modelBody instanceof FreemarkerModelBody);
assertNull(map.put("one", "value1"));
assertEquals(applicationScope, wrapper.getApplicationScope());
assertEquals("value", extractor.getValue("key"));
assertEquals(portletContext, context.getContext());
assertEquals("1", CollectionUtil.key(1)); assertEquals("hello", CollectionUtil.key("hello"));
assertTrue(entrySet.remove("one"));
assertEquals(keys, extractor.getValues("name"));
assertFalse(entrySet.isEmpty());
assertNotNull(ClassUtil.instantiate("this.class.does.not.Exist"));
assertFalse(entry.equals(null)); assertFalse(entry.equals("whatever")); assertTrue(entry.equals(entry2)); assertFalse(entry.equals(entry2)); assertFalse(entry.equals(entry2)); assertTrue(entry.equals(entry2)); assertTrue(entry.equals(entry2));
assertFalse(map.containsValue(new String[] {"value2", "value4"}));
assertEquals(stream, request.getOutputStream());
assertEquals(applicationScope, request.getApplicationScope());
assertEquals(writer, request.getWriter());
assertEquals(req.getOutputStream(), os);
assertEquals(42, notnullParam); assertEquals(null, nullParam); assertEquals(42, notnullParamDefault); assertEquals(24, nullParamDefault);
assertTrue(req.getHeaderValues() instanceof HeaderValuesMap);
assertEquals(keys, extractor.getKeys());
assertTrue(keys.hasMoreElements()); assertEquals("one", keys.nextElement()); assertTrue(keys.hasMoreElements()); assertEquals("two", keys.nextElement()); assertFalse(keys.hasMoreElements());
assertEquals(2, map.size());
assertEquals(context, request.getContext("one"));
assertFalse(request.isForceInclude()); assertTrue(request.isForceInclude());
assertTrue(request instanceof FreemarkerRequest);
assertEquals("value", extractor.getValue("name"));
assertEquals(wrappedRequest, request.getWrappedRequest());
assertTrue(entrySet.isEmpty());
assertEquals(obj, wrapper.getResource("whatever.html")); assertEquals(objFr, wrapper.getResource(obj, Locale.FRENCH));
assertEquals(header, request.getResponseHeaders());
assertEquals(context, request.getPageContext());
assertEquals(writer, context.getWriter());
assertEquals(obj, wrapper.getInitParams());
assertFalse(entrySet.contains("one"));
assertEquals(servletRequest, wrappedRequest.getRequest()); assertEquals(servletResponse, wrappedRequest.getResponse());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals("value", map.remove("key"));
assertNull(map.put("key", values));
assertTrue(context.getInitParams() instanceof ReadOnlyEnumerationMap);
assertTrue(map.isEmpty());
assertNotNull(resource); assertEquals(resource.getLocalePath(), "/my/path.html"); assertEquals(resource.getPath(), "/my/path.html"); assertEquals(Locale.ROOT, resource.getLocale()); assertNotNull(resourceFr); assertEquals("/my/path_fr.html", resourceFr.getLocalePath()); assertEquals("/my/path.html", resourceFr.getPath()); assertEquals(Locale.FRENCH, resourceFr.getLocale()); assertNull(nullResource);
assertNull(extractor.getValue("key"));
assertTrue(delegate.getParam() instanceof AddableParameterMap);
assertEquals("testGetKeys", keys.nextElement()); assertFalse(keys.hasMoreElements());
assertEquals(request, req.getRequest());
assertEquals( ("one".hashCode() ^ "value1".hashCode()) + ("two".hashCode() ^ ("value2".hashCode() + "value3" .hashCode())), map.hashCode());
assertEquals(applicationContext, FreemarkerRequestUtil.getApplicationContext(env));
assertTrue(map.containsKey("key"));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals("value", extractor.getValue("attribute"));
assertEquals(req.getWriter(), os);
assertEquals("value1", config.findInitParameter("one"));
assertTrue(map.keySet() instanceof KeySet);
assertEquals("value", extractor.getValue("name"));
assertEquals("oldValue", map.put("key", "value"));
assertEquals(keySet, map.keySet());
assertEquals(obj, wrapper.getContext());
assertTrue(req.getHeader() instanceof ReadOnlyEnumerationMap);
assertEquals(servletContextModel, FreemarkerRequestUtil.getServletContextHashModel(env));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(2, set.size()); assertTrue(set.contains("one")); assertTrue(set.contains("two"));
assertEquals("key".hashCode() ^ ("value1".hashCode() + "value2".hashCode()), entry.hashCode()); assertEquals(0 ^ ("value1".hashCode() + "value2".hashCode()), entry.hashCode()); assertEquals("key".hashCode() ^ 0, entry.hashCode()); assertEquals(0 ^ 0, entry.hashCode());
assertEquals(env, context.getEnvironment()); assertNotNull(context.getWriter());
assertEquals(new Integer(1), map.remove("one"));
assertArrayEquals(new String[] {"one", "two"}, entrySet.toArray(realArray));
assertNotNull(is);
assertEquals("value1", config.getInitParameter("one"));
assertTrue(renderer.isRenderable("/my/template.ftl", null)); assertFalse(renderer.isRenderable("my/template.ftl", null)); assertFalse(renderer.isRenderable("/my/template.jsp", null));
assertTrue(entrySet.removeAll(coll));
assertTrue(field.get(req) instanceof PortletRequestDelegate); assertTrue(field.get(req) instanceof MimeResponseDelegate);
assertTrue(req.getSessionScope() instanceof ScopeMap);
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(writer, request.getPrintWriter());
assertArrayEquals(new String[] {"one", "two"}, entrySet.toArray());
assertEquals(keys, extractor.getKeys());
assertTrue(req.getPortletSessionScope() instanceof ScopeMap);
assertEquals(paramMap, req.getParamValues());
assertTrue(req.getSessionScope() instanceof ScopeMap);
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(locale, context.getRequestLocale());
assertEquals(new Integer(42), FreemarkerUtil.getAsObject(model, Integer.class, new Integer(1)));
assertTrue(request.getApplicationScope() instanceof ScopeMap);
assertTrue(context.getPageScope() instanceof VelocityScopeMap);
assertNull(extractor.getKeys());
assertTrue(delegate.isResponseCommitted());
assertFalse(map.isEmpty());
assertEquals(keys, extractor.getKeys());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertTrue(map.containsValue(values));
assertEquals(httpRequest, servletRequest.getRequest()); assertEquals(response, servletRequest.getResponse());
assertEquals(os, delegate.getWriter());
assertTrue(req.getHeader() instanceof ReadOnlyEnumerationMap);
assertEquals(env, context.getEnvironment()); assertNotNull(context.getPrintWriter());
assertTrue(req.isUserInRole("myrole"));
assertTrue(request.getPageScope() instanceof ScopeMap);
assertArrayEquals(values, map.remove("key"));
assertSame(params, VelocityUtil.getParameters(context, node));
assertTrue(map.containsKey("one")); assertFalse(map.containsKey("two"));
assertEquals(names, map.keySet());
assertTrue(resource.getLastModified() > 0);
assertArrayEquals(new String[] {"value2", "value3"}, map.get("two"));
assertTrue((Boolean) requestScope.get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));
assertEquals(TestInterface.class, ClassUtil.getClass( TestInterface.class.getName(), Object.class));
assertTrue(delegate.getParam() instanceof ReadOnlyEnumerationMap);
assertEquals(os, delegate.getPrintWriter());
assertTrue(renderer.isRenderable("/my/template.vm", null)); assertFalse(renderer.isRenderable("my/template.vm", null)); assertFalse(renderer.isRenderable("/my/template.jsp", null));
assertEquals(req.getPrintWriter(), os);
assertEquals("value", entry.getValue()); assertEquals("value2", entry.getValue());
assertEquals("Not written \'Result\'", "Result", writer.toString());
assertEquals(header, request.getHeader());
assertTrue(context.getInitParams() instanceof ReadOnlyEnumerationMap);
assertTrue(map.isEmpty());
assertEquals("key".hashCode() ^ "value".hashCode(), entry.hashCode()); assertEquals(0 ^ "value".hashCode(), entry.hashCode()); assertEquals("key".hashCode() ^ 0, entry.hashCode()); assertEquals(0 ^ 0, entry.hashCode());
assertArrayEquals(new String[] {"parent", "page"}, context.getAvailableScopes().toArray());
assertEquals(keys, extractor.getKeys());
assertTrue(renderer.isRenderable("/my/template.html", null)); assertTrue(renderer.isRenderable("/my/template.any", null)); assertFalse(renderer.isRenderable("my/template.html", null)); assertFalse(renderer.isRenderable(null, null));
assertEquals(paramMap, req.getParamValues());
assertNull(env.getVariable("key"));
assertFalse(map.containsValue(1)); assertTrue(map.containsValue(new String[] {"value2", "value3"}));
assertEquals("value", extractor.getValue("name"));
assertEquals("value", extractor.getValue("name"));
assertEquals(writer, ((JspPrintWriterAdapter) request.getPrintWriter()) .getJspWriter());
assertEquals(applicationContext, JspUtil.getApplicationContext(jspContext));
assertTrue(field.get(req) instanceof StateAwareRequestDelegate); assertTrue(field.get(req) instanceof StateAwareResponseDelegate);
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(keys, extractor.getKeys());
assertEquals(valueModel, env.getVariable("key"));
assertTrue(map.keySet() instanceof KeySet);
assertEquals(2, entrySet.size());
assertTrue(renderer.isRenderable("/myTemplate.jsp", requestContext)); assertFalse(renderer.isRenderable(null, requestContext));
assertEquals(new Integer(42), FreemarkerUtil.getAsObject(model, Integer.class, new Integer(1)));
assertEquals(values, map.values());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(entrySet, map.entrySet());
assertTrue(map.containsValue(2));
assertTrue(renderer.isRenderable("Result", requestContext));
assertEquals("Application Context JEE Config", config.getName());
assertArrayEquals(values, map.get("key"));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(2, map.size());
assertEquals(req.getPrintWriter(), os);
assertEquals(keys, extractor.getKeys());
assertNotNull(resource); assertEquals(resource.getLocalePath(), "/my/path.html"); assertEquals(resource.getPath(), "/my/path.html"); assertEquals(Locale.ROOT, resource.getLocale()); assertNotNull(resourceFr); assertEquals("/my/path_fr.html", resourceFr.getLocalePath()); assertEquals("/my/path.html", resourceFr.getPath()); assertEquals(Locale.FRENCH, resourceFr.getLocale()); assertNull(nullResource);
assertEquals(valueModel, env.getVariable("key"));
assertEquals(servletException, exception.getCause()); assertEquals("my message", exception.getMessage());
assertEquals(map, req.getParam());
assertTrue(velocityRequest instanceof VelocityRequest);
assertTrue(delegate.getParamValues() instanceof StateAwareParameterMap);
assertArrayEquals(scopes, request.getAvailableScopes().toArray());
assertTrue((Boolean) requestScope.get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));
assertNotNull(description); assertEquals("description", description);
assertNotNull(asJSON); assertEquals(TOKEN_TO_JSON, asJSON);
assertNotNull(token); assertEquals("12345678990", token.getUuid()); assertEquals("edifice.reception", token.getService()); assertEquals("aaaa", token.getLogin()); assertEquals("aaaa", token.getPassword());
assertThat(mock.size()).isEqualTo(3);
assertThat(distance, is(equalTo(0.0d)));
assertThat(f2, sameInstance(f1));
assertThat(gainMultiplier, is(equalTo(1.0d))); assertThat(values, is(equalTo(values2)));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(distance, is(equalTo(19.0)));
assertThat(f2, sameInstance(f1));
assertThat(features, is(equalTo(reference)));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(gainMultiplier, is(closeTo(1.0d, Math.ulp(0.0d)))); assertThat(values, is(equalTo(values2)));
assertThat(distance, is(equalTo(0.0d)));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(gainMultiplier, is(equalTo(1.25d))); assertThat(values[i], is(equalTo(0.125d))); assertThat(values[10], is(equalTo(1.0d)));
assertThat(output, is(sameInstance(voiceSample)));
assertNotNull(voicePrint);
assertThat(output.length, is(equalTo(0)));
assertThat(autocorrelate, is(equalTo((arrayOfTwos.length - i) * 4.0d)));
assertThat(distance, is(equalTo(d)));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(gainMultiplier, is(equalTo(1.0d))); assertThat(values, is(equalTo(values2)));
assertThat(distance, is(equalTo(2660.0)));
assertThat(window.length, is(equalTo(WINDOW_LENGTHS[i[0]])));
assertThat(lpcCoding[0], is(equalTo(reference[0]))); assertThat(lpcCoding[1], is(equalTo(reference[1])));
assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(e, exception(UnexpectedFailureException.class, DEFAULT_HEADER, "unexpected")); assertThat(e, exception(UnexpectedFailureException.class, MESSAGE)); assertThat(e, exception(UnexpectedFailureException.class, MESSAGE_1));
assertFalse(isBST.checkIterative(root));
assertTrue(ObjectUtil.isSameType(null, null)); assertTrue(ObjectUtil.isSameType(null, Boolean.TRUE)); assertTrue(ObjectUtil.isSameType(Boolean.TRUE, null)); assertTrue(ObjectUtil.isSameType(Boolean.TRUE, Boolean.FALSE)); assertFalse(ObjectUtil.isSameType(Boolean.TRUE, new Integer(0)));
assertEquals(3, com.insightfullogic.java8.answers.chapter3.StringExercises.countLowercaseLetters("aBcDeF"));
assertEquals(expectedNode, result);
assertThat(e, exception(UnreachableCodeException.class, DEFAULT_HEADER, "unreachable")); assertThat(e, exception(UnreachableCodeException.class, MESSAGE)); assertThat(e, exception(UnreachableCodeException.class, MESSAGE_1));
assertEquals("", result);
assertEquals(3, result, DELTA);
assertEquals("one", f.get());
assertArrayEquals(new int[0], array);
assertEquals(5040, result);
assertNull(ExceptionUtil.getRootCause(null)); assertSame(t, ExceptionUtil.getRootCause(t)); assertThat(ExceptionUtil.getRootCause(getException()), instanceOf(IllegalStateException.class));
assertEquals(1010 - 250, newMoney.getCent()); assertEquals(1010 + 250, newMoney.getCent());
assertTrue(thrown);
assertEquals(5040, result);
assertEquals(0, result.length);
assertEquals(7, bitsCounter.countBitsToOneBasedOnBinaryOperators(1990));
assertNull(ReflectionUtil.getAnnotationFields((Class<?>) null, (Class<? extends Annotation>) null)); assertNull(ReflectionUtil.getAnnotationFields((Class<?>) null, AnnotationClass.Test.class)); assertNull(ReflectionUtil.getAnnotationFields(AnnotationClass.class, (Class<? extends Annotation>) null)); assertTrue(fields.length == 2); assertTrue(ObjectUtil.isEmpty(fields));
assertTrue(thrown);
assertEquals(1, result);
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertEquals(100, money.getCentFactor());
assertTrue(thrown);
assertEquals("a", result);
assertEquals(1, numberOfDifferentBits);
assertEquals(2020, money.getCent()); assertEquals(1010, money.getCent());
assertThat(e, exception(IllegalArgumentException.class, DEFAULT_HEADER, "must be null")); assertThat(e, exception(IllegalArgumentException.class, MESSAGE)); assertThat(e, exception(IllegalArgumentException.class, MESSAGE_1)); assertThat(e, exception(IllegalStateException.class, MESSAGE)); assertThat(e, exception(IllegalStateException.class, MESSAGE_1));
assertEquals(Integer.valueOf(2), middleElement.getData());
assertEquals(4, countBandMembersInternal(Arrays.asList(SampleData.johnColtrane, SampleData.theBeatles)));
assertTrue("Timeout means `unsubscribe` is not called", unsubscribe.await(30, TimeUnit.SECONDS));
assertEquals(1, depth);
assertTrue(thrown);
assertEquals(0, tested.get()); assertEquals(1, tested.get()); assertEquals(2, tested.get()); assertEquals(3, tested.get()); assertEquals(4, tested.get());
assertTrue(result.isEmpty());
assertArrayEquals(new char[] { 'p', 'e', '%', '2', '0', 'd', 'r', 'o' }, input);
assertEquals(11, result);
assertFalse(result);
assertEquals("CNY", money.getCurrencyCode());
assertEquals(expected, result);
assertEquals(144, fibonacciNumbers.getRecursiveWithCatching(11));
assertNotSame(localeInfo, localeInfo.clone()); assertEquals(localeInfo, localeInfo.clone());
assertTrue(result.contains(new Pair<Integer, Integer>(2, 5))); assertTrue(result.contains(new Pair<Integer, Integer>(1, 6)));
assertEquals(0, result.length);
assertTrue(stacktrace.contains(Throwable.class.getName())); assertTrue(stacktrace.contains(ExceptionUtilTest.class.getName() + ".getStackTrace"));
assertEquals(4, depth);
assertArrayEquals(result, fields); assertArrayEquals(result, fields); assertTrue(methodSize > 0); assertTrue(instanceMethodSize > 0); assertTrue(methodSize > instanceMethodSize);
assertEquals(expected, result);
assertEquals("xxaayy$2zz", subs.substitute("xx$1yy$2zz"));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertEquals(123, com.github.kowshik.bigo.common.NumberUtils.atoi("+123"));
assertEquals("a", result);
assertEquals(4, result);
assertEquals(n4, reversedList); assertEquals(n3, reversedList.getNext()); assertEquals(n2, reversedList.getNext().getNext()); assertEquals(head, reversedList.getNext().getNext().getNext());
assertEquals(0, result);
assertNull(ReflectionUtil.getAnnotationMethods((Class<?>) null, (Class<? extends Annotation>) null)); assertNull(ReflectionUtil.getAnnotationMethods((Class<?>) null, AnnotationClass.Test.class)); assertNull(ReflectionUtil.getAnnotationMethods(AnnotationClass.class, (Class<? extends Annotation>) null)); assertTrue(list.size() == 8); assertTrue(CollectionUtil.isEmpty(list));
assertEquals(1, victims.size()); assertEquals(latestStart(a, b).transaction(), victims.iterator().next());
assertTrue(cancelled);
assertEquals(0, keyRange(10, null).compareTo(keyRange(9, null))); assertEquals(0, keyRange(10, null).compareTo(keyRange(10, null))); assertEquals(0, keyRange(10, null).compareTo(keyRange(11, null)));
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue("a and b should be different", a != b); assertTrue(it.hasNext()); assertTrue("c should not just be the next in sequence", c != (b + 1)); assertTrue("expected that c [" + c + "] is higher than or equal to " + COUNT, c >= COUNT); assertTrue(it.hasNext()); assertTrue(d > c); assertFalse(it.hasNext());
assertArrayEquals(expectedResult, result);
assertEquals(expectedNode, result);
assertFalse(tested.hasNext());
assertFalse(palindromes.evaluate("pedro"));
assertEquals(3, depth);
assertNull(ClassUtil.getClassNameAsResource("")); assertNull(ClassUtil.getClassNameAsResource(null)); assertEquals("java/lang/String.class", ClassUtil.getClassNameAsResource("java.lang.String")); assertEquals("xxx/yyy/zzz.class", ClassUtil.getClassNameAsResource("xxx.yyy.zzz"));
assertEquals(1, bitsCounter.countBitsToOneBasedOnBinaryOperators(1));
assertFalse(FileUtil.exist((String) null)); assertFalse(FileUtil.exist("notexist")); assertFalse(FileUtil.exist("xxx/yyy/zzz")); assertTrue(FileUtil.exist(ClassLoaderUtil.getClasspath())); assertTrue(FileUtil.exist(ClassLoaderUtil.getClasspath() + "META-INF/log4j.properties"));
assertFalse(s1.isUnsubscribed()); assertFalse(s2.isUnsubscribed()); assertTrue(s1.isUnsubscribed()); assertTrue(s2.isUnsubscribed()); assertFalse(s.isUnsubscribed()); assertTrue(s3.isUnsubscribed()); assertTrue(s.isUnsubscribed());
assertEquals(0, result.length);
assertEquals(3.46410f, result, DELTA);
assertEquals(2, pivotIndex); assertArrayEquals( "Failure => Array returned is not partitioned according to the pivot.", array, new Integer[] { 3, 3, 3, 10, 5, 7, 7, 4 });
assertEquals("xxaayy$2zz", subs.substitute("xx$1yy$2zz")); assertThat(e, TestUtil.exception("expected 1 MatchResults"));
assertEquals(2020, newMoney.getCent()); assertEquals(505, newMoney.getCent());
assertEquals(asList(sampleShortAlbum, aLoveSupreme), result);
assertEquals(2, result, DELTA);
assertEquals(0, new SimpleHeapImpl<Integer>(minHeapComparator).size()); assertEquals(6, new SimpleHeapImpl<Integer>(listWithElements, minHeapComparator).size());
assertEquals(5040, result);
assertTrue(thrown);
assertEquals(1, median, DELTA);
assertNull(cursor.next()); assertNull(cursor.next()); assertNull(cursor.next()); assertNotNull(cursor.next()); assertNotNull(cursor.next()); assertNull(cursor.next()); assertNull(cursor.next());
assertTrue(e1.equals(entry1)); assertTrue(e2.equals(entry2)); assertTrue(e1.equals(e1)); assertFalse(e1.equals(null)); assertFalse(e1.equals(""));
assertTrue(new PeekIterator<Integer>(listWithElements.iterator()) .hasNext());
assertEquals(2.5, result, DELTA);
assertTrue(it.hasNext()); assertEquals("one", it.next());
assertTrue(isBalanced);
assertEquals(expected, result);
assertEquals("default", StringUtil.defaultIfEmpty(null, "default")); assertEquals("default", StringUtil.defaultIfEmpty("", "default")); assertEquals(" ", StringUtil.defaultIfEmpty(" ", "default")); assertEquals("bat", StringUtil.defaultIfEmpty("bat", "default"));
assertFalse(isEven.check(99));
assertEquals(0, result);
assertEquals(2, result);
assertTrue(isBST.checkRecursive(root));
assertTrue(result.contains(new Pair<Integer, Integer>(-17, 9)));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertFalse(binaryTreeEquals.areEqualsIterative(root, null));
assertTrue(thrown);
assertFalse(result);
assertEquals(7, sequenceLength);
assertTrue(busyObserver.onNextCount.get() < 4); assertTrue(busyObserver.onError); assertFalse(busyObserver.onCompleted); assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busyObserver.maxConcurrentThreads.get());
assertFalse(result);
assertTrue(result);
assertEquals(expected, result);
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertArrayEquals(expectedMatrix, matrix);
assertFalse(StringExercises.mostLowercaseString(Collections.<String>emptyList()).isPresent());
assertEquals(123, com.github.kowshik.bigo.common.NumberUtils.atoi("123"));
assertEquals(8, NumSetBits.getNumSetBits((byte) 255, 0, 7)); assertEquals(6, NumSetBits.getNumSetBits((byte) 255, 1, 6)); assertEquals(4, NumSetBits.getNumSetBits((byte) 255, 2, 5)); assertEquals(2, NumSetBits.getNumSetBits((byte) 255, 3, 4)); assertEquals(1, NumSetBits.getNumSetBits((byte) 255, 4, 4));
assertEquals(0, ClassLoaderUtil.getResources(null).length); assertEquals(0, ClassLoaderUtil.getResources(null, getClass()).length); assertEquals(0, ClassLoaderUtil.getResources(null, (Class<?>) null).length); assertEquals(0, ClassLoaderUtil.getResources(null, getClass().getClassLoader()).length); assertEquals(0, ClassLoaderUtil.getResources(null, (ClassLoader) null).length);
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertTrue(isBalanced);
assertArrayEquals(expected, array);
assertEquals("", result);
assertEquals(null, Observable.<Void>never().toBlocking().mostRecent(null).iterator().next());
assertNull(ClassLoaderUtil.newInstance((String) null)); assertNull(ClassLoaderUtil.newInstance((Class<?>) null)); assertNull(ClassLoaderUtil.newInstance(null, getClass())); assertNull(ClassLoaderUtil.newInstance(null, (Class<?>) null)); assertNull(ClassLoaderUtil.newInstance(null, getClass().getClassLoader())); assertNull(ClassLoaderUtil.newInstance(null, (ClassLoader) null));
assertNull(FileUtil.file(null)); assertNull(FileUtil.file(null, null)); assertNull(FileUtil.file(new File(ClassLoaderUtil.getClasspath()), null)); assertNotNull(FileUtil.file("")); assertNotNull(FileUtil.file(null, "")); assertNotNull(FileUtil.file(new File(ClassLoaderUtil.getClasspath()), ""));
assertEquals(0, multiply.calculate(0, 100));
assertFalse(isBST.checkRecursive(root));
assertEquals(listWithElements.get(0), tested.next()); assertEquals(listWithElements.get(1), tested.next()); assertEquals(listWithElements.get(2), tested.next());
assertEquals(0, last);
assertTrue(result);
assertEquals(1, bitsCounter.countBitsToOneBasedOnString(2));
assertTrue(String.format("Exception: %s not thrown", NoSuchElementException.class.getCanonicalName()), thrown);
assertEquals("ordeP", result);
assertEquals(SampleData.johnLennon, artist);
assertEquals(0, result.length);
assertEquals(expected, result);
assertEquals("a", result);
assertEquals(chars, StreamUtil.readText(sr, close)); assertEquals(chars, StreamUtil.readText(bais, "GBK", close));
assertFalse(binaryTreeEquals.areEqualsRecursive(root, null));
assertFalse(uniqueChars.evaluate2("vicente"));
assertEquals(0, com.insightfullogic.java8.answers.chapter3.StringExercises.countLowercaseLetters(""));
assertEquals(10 * 100 + 10, money.getCent());
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 5, 4, 3, 2, 1 });
assertFalse(result);
assertEquals(Arrays.asList(2, 3, 4), values);
assertEquals(2, order.countTracks());
assertEquals(RxRingBuffer.SIZE * 4, ts.getOnNextEvents().size());
assertEquals(144, fibonacciNumbers.getRecursive(11));
assertEquals(1, result);
assertEquals(0, sequenceLength);
assertEquals(n4, reversedList); assertEquals(n3, reversedList.getNext()); assertEquals(n2, reversedList.getNext().getNext()); assertEquals(head, reversedList.getNext().getNext().getNext());
assertThat(e, exception(UnsupportedOperationException.class, DEFAULT_HEADER, "unsupported")); assertThat(e, exception(UnsupportedOperationException.class, MESSAGE)); assertThat(e, exception(UnsupportedOperationException.class, MESSAGE_1));
assertEquals(1, result);
assertNotNull(buffer); assertEquals(0, buffer.position()); assertEquals(PAGE_SIZE, buffer.limit()); assertNull(slab.takePageBuffer()); assertEquals(expectedArrayOffset, arrayOffsets[b]);
assertEquals(expectedResult, result);
assertThat(ee, exception(UnexpectedFailureException.class, DEFAULT_HEADER, "unexpected")); assertThat(ee, exception(UnexpectedFailureException.class, MESSAGE)); assertThat(ee, exception(UnexpectedFailureException.class, MESSAGE_1)); assertSame(e, ee.getCause()); assertSame(e, ee.getCause());
assertEquals("en_US:ISO-8859-1", localeInfo.toString());
assertEquals(null, f.get());
assertEquals("default", StringUtil.defaultIfBlank(null, "default")); assertEquals("default", StringUtil.defaultIfBlank("", "default")); assertEquals("default", StringUtil.defaultIfBlank(" ", "default")); assertEquals("bat", StringUtil.defaultIfBlank("bat", "default"));
assertEquals(SampleData.johnColtrane, artist);
assertEquals(144, fibonacciNumbers.getIterative(11));
assertFalse(areAnagrams.check("", "pedro"));
assertTrue(result);
assertTrue(impl instanceof RxJavaObservableExecutionHookTestImpl);
assertEquals(7, bitsCounter.countBitsToOneBasedOnBinaryOperators(1990));
assertTrue(anagrams.get("").isEmpty());
assertArrayEquals(expectedArray, result);
assertArrayEquals( new char[] { 'p', 'e', '%', '2', '0', 'd', 'r', 'o', '%', '2', '0', 'g', 's' }, input);
assertTrue(thrown);
assertEquals("one", f.get().get(0)); assertEquals("two", f.get().get(1)); assertEquals("three", f.get().get(2));
assertEquals(1010 + 250, money.getCent()); assertEquals(1010, money.getCent());
assertEquals(expected, result);
assertFalse(analyser.isLargerGroup("John Coltrane", "The Beatles"));
assertEquals(4, numberOfDifferentBits);
assertEquals(entry1.hashCode(), new DefaultMapEntry<String, Object>(null, null).hashCode()); assertEquals(entry2.hashCode(), new DefaultMapEntry<String, Object>("hello", "baobao").hashCode());
assertEquals(expectedList, result);
assertTrue(isBST.checkIterative(root));
assertTrue(mapTable.getLevel() == 1); assertTrue(mapTable.getCreatedTime() == createdTime); assertTrue(mapTable.getAppendedSize() == 0); assertTrue(mapTable.isEmpty()); assertTrue(mapTable.getBackFileSize() == HashMapTable.INIT_INDEX_FILE_SIZE + HashMapTable.INIT_DATA_FILE_SIZE + HashMapTable.INDEX_ITEM_LENGTH); assertFalse(mapTable.isUsable());
assertTrue(deadlockDetector.victims().isEmpty());
assertNull(tested.get(1));
assertEquals(1, bitsCounter.countBitsToOneBasedOnString(1));
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext()); assertEquals("two", it.next()); assertEquals(true, it.hasNext()); assertEquals("three", it.next()); assertEquals(false, it.hasNext());
assertEquals(1, result.size()); assertTrue(result.contains(root));
assertEquals(result, Optional.of("abc"));
assertTrue(thrown);
assertEquals(909, order.countRunningTime());
assertEquals("[John Coltrane, John Lennon, The Beatles]", result);
assertSame(iae, ExceptionUtil.toRuntimeException(iae, IllegalStateException.class)); assertTrue(ExceptionUtil.toRuntimeException(ioe, IllegalStateException.class) instanceof IllegalStateException); assertSame(ioe, ExceptionUtil.toRuntimeException(ioe, IllegalStateException.class).getCause());
assertEquals(4, result);
assertEquals(1, paths.size()); assertEquals(1, paths.get(0).get(0).getData());
assertEquals(new Integer(1), result.getData());
assertTrue(binaryTreeEquals.areEqualsRecursive(root, root1));
assertFalse(result);
assertEquals(0, result.length);
assertEquals(3, es.size()); assertThat(i.next(), instanceOf(IllegalStateException.class)); assertThat(i.next(), instanceOf(IllegalArgumentException.class)); assertThat(i.next(), instanceOf(IOException.class));
assertEquals(SampleData.johnColtrane, artist);
assertEquals(0, StringExercises.countLowercaseLetters("ABCDEF"));
assertTrue(ObjectUtil.isNotEmpty(result)); assertTrue(ObjectUtil.isNotEmpty(result));
assertTrue(deadlockDetector.victims().isEmpty());
assertEquals(Long.MAX_VALUE, r.get());
assertArrayEquals(expected, array);
assertEquals(1, c.get());
assertTrue(String.format("Exception: %s not thrown", NoSuchElementException.class.getCanonicalName()), thrown);
assertEquals(n2, result);
assertEquals(3, requested1.get()); assertEquals(3, requested2.get());
assertEquals("/etc/abc/", finalPath);
assertArrayEquals(bytes, StreamUtil.readBytes(bais, close).toByteArray());
assertEquals("three", obs.last());
assertEquals(30, result);
assertEquals("unknown", artist);
assertEquals(expected, result);
assertArrayEquals(bytes, out.toByteArray());
assertFalse(autoBoxingTrick.compare(1000, 1000));
assertEquals(160, result);
assertArrayEquals(result, methods); assertArrayEquals(result, methods);
assertNull(ReflectionUtil.findAllMethodAnnotation((Class<?>) null, (Class<? extends Annotation>) null)); assertNull(ReflectionUtil.findAllMethodAnnotation((Class<?>) null, AnnotationClass.Test.class)); assertNull(ReflectionUtil.findAllMethodAnnotation(AnnotationClass.class, (Class<? extends Annotation>) null)); assertTrue(list.size() == 8); assertTrue(CollectionUtil.isEmpty(newList));
assertEquals(5, result);
assertEquals(-14, multiply.calculate(-2, 7));
assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertFalse(com.insightfullogic.java8.answers.chapter3.StringExercises.mostLowercaseString(Collections.<String>emptyList()).isPresent());
assertEquals(120, result);
assertTrue(result);
assertEquals(2, result);
assertEquals("one", observable.firstOrDefault("default"));
assertArrayEquals(expectedResult, picture);
assertEquals("", result);
assertTrue(cancelled);
assertEquals(1010 - 250, money.getCent()); assertEquals(1010, money.getCent());
assertEquals(expectedNode, result);
assertEquals("a3", result);
assertEquals(chars, out.toString());
assertEquals("7", intToString.transform(7));
assertArrayEquals(new char[] { 'p', 'e', '%', '2', '0', 'd', 'r', 'o' }, input);
assertTrue(result.contains(new Pair<Integer, Integer>(5, 2))); assertTrue(result.contains(new Pair<Integer, Integer>(6, 1)));
assertEquals(0, result.length);
assertEquals(328350, SerialToParallel.sumOfSquares(range));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 5, 4, 3, 2, 1 });
assertNull(ReflectionUtil.getAllMethodsOfClass(null)); assertTrue(methods.length > 0); assertTrue(methods.length > 0); assertFalse(methodList.contains(equalsMethod)); assertTrue(methods.length > interMethodLength);
assertTrue(result);
assertEquals(0, result);
assertEquals(7, result);
assertEquals(expectedList, result);
assertEquals(0, result);
assertEquals(8, result);
assertEquals(1, BehaviorSubject.create(1).take(1).toBlocking().single().intValue()); assertEquals(2, BehaviorSubject.create(2).toBlocking().toIterable().iterator().next().intValue()); assertEquals(3, BehaviorSubject.create(3).toBlocking().next().iterator().next().intValue());
assertEquals(3, missingNumber);
assertEquals(expectedNode, result);
assertEquals(3, bitsCounter.countBitsToOneBasedOnBinaryOperators(7));
assertEquals(2, paths.size());
assertSame(ia, ObjectUtil.defaultIfNull(null, ia)); assertSame(ic, ObjectUtil.defaultIfNull(null, ic)); assertSame(is, ObjectUtil.defaultIfNull(null, is)); assertSame(s, ObjectUtil.defaultIfNull(null, s)); assertSame(s, ObjectUtil.defaultIfNull((Object) null, s)); assertEquals("123", ObjectUtil.defaultIfNull("123", s));
assertTrue(result);
assertEquals("", reverseSentence.reverse(""));
assertEquals(2.5, result, DELTA);
assertEquals(3, result, DELTA);
assertEquals("", result);
assertEquals(3, busyObserver.onNextCount.get()); assertFalse(busyObserver.onError); assertTrue(busyObserver.onCompleted); assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busyObserver.maxConcurrentThreads.get());
assertEquals(1, c.get());
assertArrayEquals(result, fields); assertArrayEquals(result, fields);
assertFalse(areAnagrams.check("ana", "pedro"));
assertArrayEquals(new char[] { 'p', 'e', 'd', 'r', 'o', '%', '2', '0' }, input);
assertEquals(30, result);
assertNull(ReflectionUtil.getComponentType(f1.getGenericType())); assertEquals(Long.class, ReflectionUtil.getComponentType(f5.getGenericType()));
assertFalse(binaryTreeEquals.areEqualsIterative(root, root1));
assertTrue(isEven.check(68));
assertEquals(head, reverseLinkedList.reverseIterative(head));
assertTrue("32".equals(arch) || "64".equals(arch)); assertTrue(flag); assertEquals("JVMUtil.getManifestFromJar Error", e.getMessage()); assertEquals(RuntimeException.class, e.getClass()); assertEquals("error in opening zip file", e.getCause().getMessage()); assertEquals(java.util.zip.ZipException.class, e.getCause().getClass());
assertTrue(impl instanceof RxJavaObservableExecutionHookDefault);
assertTrue(analyser.isLargerGroup("The Beatles", "John Coltrane"));
assertTrue(it.hasNext()); assertEquals("default", it.next()); assertEquals("default", it.next()); assertTrue(it.hasNext()); assertEquals("one", it.next()); assertEquals("one", it.next()); assertTrue(it.hasNext()); assertEquals("two", it.next()); assertEquals("two", it.next()); assertFalse(it.hasNext());
assertEquals(expectedNode, result);
assertArrayEquals(expected, array);
assertArrayEquals(input, target);
assertTrue(latch.await(10, TimeUnit.SECONDS)); assertTrue(exception.get() instanceof IllegalArgumentException);
assertEquals(testString, new String(dest)); assertEquals(testString + i, new String(dest));
assertEquals(0, expected); assertNull(record); assertEquals(0, expected); assertEquals(n == 0 ? 0 : -1, expected); assertEquals(n, k); assertNull(record);
assertEquals("0", intToString.transform(0));
assertEquals("com.baidu.unbiz.common.RuntimeUtilTest.currentClassMethod", RuntimeUtil.currentClassMethod());
assertNotNull(artist);
assertEquals(expected, result);
assertEquals(1, fibonacciNumbers.getRecursive(1));
assertEquals(3, StringExercises.countLowercaseLetters("aBcDeF"));
assertArrayEquals(Arrays.copyOf(expected, i + 1), rs.getValues()); assertArrayEquals(expected, rs.getValues());
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new int[] { 1, 2, 3, 4, 5 });
assertTrue(result);
assertEquals(n, expected); assertNull(record); assertEquals(n, expected); assertEquals(n, k); assertNull(record); assertEquals(n, expected);
assertArrayEquals(expected, result);
assertEquals(0L, RainWater.findAccumulatedWater(new int[] { 2, 1 }));
assertEquals(5, fibonacciNumbers.getRecursive(4));
assertEquals(63, median, DELTA);
assertEquals(1, bitsCounter.countBitsToOneBasedOnBinaryOperators(2));
assertEquals(2, result, DELTA);
assertEquals("xx$12345678901234567890yy$2zz", subs.substitute("xx$12345678901234567890yy$2zz"));
assertEquals(120, result);
assertEquals(expectedList, result);
assertArrayEquals(expectedMatrix, matrix);
assertEquals(count, states.size());
assertTrue(result);
assertEquals("one", it.next()); assertEquals("two", it.next());
assertEquals(SampleData.johnColtrane, artist);
assertTrue(result.isEmpty());
assertEquals(1, order.countMusicians());
assertEquals("24", intToString.transform(24));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 5, 4, 3, 2, 1 });
assertEquals(2.64575f, result, DELTA);
assertEquals(7, sequenceLength);
assertEquals(2, median, DELTA);
assertEquals(2, count);
assertEquals(LoggerFactory.getLogger(ConcurrentCacheTest.class), result); assertTrue(LoggerFactory.getLogger(ConcurrentCacheTest.class) == result);
assertEquals("ordeP", result);
assertEquals("a2bc5a3", result);
assertEquals(4, countBandMembersInternal(Arrays.asList(SampleData.johnColtrane, SampleData.theBeatles)));
assertEquals(1, NumSetBits.getNumSetBits(array, 3, 3)); assertEquals(20, NumSetBits.getNumSetBits(array, 3, 26));
assertSame(RxJavaPlugins.DEFAULT_ERROR_HANDLER, impl);
assertEquals(4, countBandMembersExternal(Arrays.asList(SampleData.johnColtrane, SampleData.theBeatles)));
assertEquals("ISO-8859-1", LocaleUtil.getCanonicalCharset("8859_1")); assertEquals("ISO-8859-1", LocaleUtil.getCanonicalCharset("ISO8859_1"));
assertTrue(isEven.check(0));
assertEquals(328350, SerialToParallel.sumOfSquares(range));
assertEquals("currentMethodName", RuntimeUtil.currentMethodName());
assertArrayEquals(expectedMatrix, matrix);
assertTrue(unsubscribed.isUnsubscribed());
assertEquals(505, newMoney.getCent()); assertEquals(2020, newMoney.getCent());
assertEquals(expectedNode, result);
assertEquals(0, com.insightfullogic.java8.answers.chapter3.StringExercises.countLowercaseLetters("ABCDEF"));
assertFalse(uniqueChars.evaluate("vicente"));
assertNotNull(id); assertTrue(id, !id.contains("+") && !id.contains("/") && !id.contains("=")); assertEquals(concurrency * loop, allIDs.size());
assertEquals(505, money.getCent()); assertEquals(1010, money.getCent());
assertTrue(isBST.checkIterative(n1));
assertTrue(result.contains(new Pair<Integer, Integer>(9, -17)));
assertTrue(thrown);
assertNull(FileUtil.toFile(null)); assertEquals(file, FileUtil.toFile(file.toURI().toURL()));
assertEquals(5, result, DELTA);
assertEquals(1, result);
assertEquals(3, depth);
assertEquals(2, c.get());
assertArrayEquals(new char[] { '%', '2', '0', '%', '2', '0' }, input);
assertEquals(expected, result);
assertTrue(impl instanceof RxJavaErrorHandlerTestImpl);
assertEquals(6, sequenceLength);
assertEquals("test", e.getMessage()); assertEquals("test", e.getMessage()); assertEquals("test", e.getMessage());
assertEquals(3, paths.size());
assertEquals(head, head);
assertEquals(0, numberOfDifferentBits);
assertEquals(55, multiply.calculate(5, 11));
assertEquals(expected++, ((TestKey) record.key()).key()); assertEquals("second", record.stringValue()); assertEquals(N, expected);
assertArrayEquals(output, ArrayExamples.imperativeInitilize(size), 0.0);
assertEquals(asList(sampleShortAlbum, aLoveSupreme), result);
assertEquals(6, sequenceLength);
assertTrue(mapTable.getLevel() == 1); assertTrue(mapTable.getCreatedTime() == createdTime); assertTrue(mapTable.getAppendedSize() == 0); assertTrue(mapTable.isEmpty()); assertFalse(mapTable.isUsable());
assertThat(e, exception(IllegalArgumentException.class, DEFAULT_HEADER, "must be true")); assertThat(e, exception(IllegalArgumentException.class, MESSAGE)); assertThat(e, exception(IllegalArgumentException.class, MESSAGE_1)); assertThat(e, exception(IllegalStateException.class, MESSAGE)); assertThat(e, exception(IllegalStateException.class, MESSAGE_1));
assertTrue(result);
assertEquals(2, result, DELTA);
assertEquals(p1.get(), p2.get(), 10000);
assertEquals("one", observable.first());
assertEquals(0, sequenceLength);
assertArrayEquals(expectedArray, arrayResult);
assertNull(ReflectionUtil.getAllFieldsOfClass(null)); assertNull(ReflectionUtil.getAllFieldsOfClass(Object.class)); assertEquals(0, ReflectionUtil.getAllFieldsOfClass(List.class).length); assertTrue(fields.length > 0); assertTrue(instancefields.length > 0); assertTrue(fields.length - instancefields.length > 0);
assertFalse(result);
assertFalse(binaryTreeEquals.areEqualsRecursive(root, root1));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertFalse(empty.isUnsubscribed()); assertTrue(empty.isUnsubscribed());
assertEquals("com.baidu.unbiz.common.RuntimeUtilTest", RuntimeUtil.currentClassName());
assertTrue(uniqueChars.evaluate2(""));
assertNull(replaced); assertNotNull(replaced); assertEquals(i, ((TestKey) replaced.key()).key()); assertEquals("first", ((TestRecord) replaced).stringValue()); assertNull(replaced); assertNull(map.first().next());
assertEquals(7, sequenceLength);
assertEquals(expectedList, result);
assertEquals(chars, writer.toString()); assertArrayEquals(bytes, stream.toByteArray());
assertArrayEquals(expectedArray, result);
assertArrayEquals(output, ArrayExamples.parallelInitialize(size), 0.0);
assertEquals(3.46410f, result, DELTA);
assertEquals("a3", result);
assertTrue(thrown);
assertEquals(0, result);
assertThat(e, exception(IllegalArgumentException.class, DEFAULT_HEADER, "must not be null")); assertThat(e, exception(IllegalArgumentException.class, MESSAGE)); assertThat(e, exception(IllegalArgumentException.class, MESSAGE_1)); assertThat(e, exception(IllegalStateException.class, MESSAGE)); assertThat(e, exception(IllegalStateException.class, MESSAGE_1));
assertArrayEquals(expectedResult, picture);
assertArrayEquals(expectedResult, result);
assertArrayEquals(data, baos.toByteArray());
assertEquals("-15", intToString.transform(-15));
assertEquals(SampleData.johnColtrane, artist);
assertFalse(binaryTreeEquals.areEqualsIterative(root, root1));
assertEquals(0, StringExercises.countLowercaseLetters(""));
assertEquals(3, counts.size()); assertEquals(Long.valueOf(3), counts.get("John")); assertEquals(Long.valueOf(2), counts.get("Paul")); assertEquals(Long.valueOf(1), counts.get("George"));
assertEquals(0, result);
assertEquals(120, result);
assertEquals(String.class, genericSupertypes[0]); assertEquals(Integer.class, genericSupertypes[1]);
assertEquals(3, bitsCounter.countBitsToOneBasedOnBinaryOperators(7));
assertEquals(160, result);
assertTrue(combinations.isEmpty());
assertTrue(result);
assertEquals(5, result, DELTA);
assertEquals(expected, result);
assertFalse(binaryTreeEquals.areEqualsRecursive(root, root1));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 5, 4, 3, 2, 1 });
assertTrue(it.hasNext()); assertEquals("one", it.next()); assertTrue(it.hasNext()); assertEquals("two", it.next()); assertFalse(it.hasNext()); assertFalse(it.hasNext());
assertEquals(entry1.toString(), new DefaultMapEntry<String, Object>(null, null).toString()); assertEquals(entry2.toString(), new DefaultMapEntry<String, Object>("hello", "baobao").toString());
assertTrue(isBST.checkRecursive(n1));
assertEquals(expectedList, result);
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new int[] { 1, 2, 3, 4, 5 });
assertArrayEquals(new int[0], array);
assertTrue(ArrayUtil.isNotEmpty(jars)); assertEquals(jarSuffixs.length, jars.length); assertEquals(jarSuffixs[i].getAbsolutePath(), jars[i]); assertNull(JVMUtil.addAllJarsToClassPath(null)); assertTrue(ArrayUtil.isEmpty(JVMUtil.addAllJarsToClassPath(""))); assertTrue(ArrayUtil.isEmpty(JVMUtil.addAllJarsToClassPath("notexist")));
assertEquals(0, vectorScalarProduct.calculateScalarProduct(new Vector(null), new Vector(null)));
assertEquals("a2bc5a3", result);
assertFalse(result);
assertEquals(-5, result);
assertEquals(1, result);
assertEquals("foo", e.getEntityName(100)); assertEquals("bar", e.getEntityName(101)); assertEquals(100, e.getEntityValue("foo")); assertEquals(101, e.getEntityValue("bar"));
assertEquals(asList("John Coltrane", "US", "John Lennon", "UK", "The Beatles", "UK"), namesAndOrigins);
assertEquals(5, fibonacciNumbers.getIterative(4));
assertEquals( 25L, RainWater.findAccumulatedWater(new int[] { 2, 0, 2, 1, 3, 2, 6, 0, 5, 2, 10, 5, 5, 0, 0, 2, 4 }));
assertFalse(result);
assertEquals(-4, result);
assertEquals("test", e.getCause().getMessage()); assertEquals("test", e.getMessage()); assertEquals("test", e.getMessage());
assertEquals(469, result);
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext()); assertEquals("two", it.next()); assertEquals(true, it.hasNext()); assertEquals("three", it.next()); assertEquals(false, it.hasNext());
assertTrue(it.hasNext()); assertEquals("default", it.next()); assertEquals("default", it.next()); assertTrue(it.hasNext());
assertThat(e, TestUtil.exception("no locale name")); assertThat(e, TestUtil.exception("no locale name")); assertEquals("en_US:UTF-8", LocaleInfo.parse(" en_US ").toString()); assertEquals("en_US:UTF-8", LocaleInfo.parse(" en_US : ").toString()); assertEquals("en_US:ISO-8859-1", LocaleInfo.parse(" en_US : 8859_1").toString());
assertArrayEquals(expected, result);
assertEquals(expectedResult, result);
assertEquals(Integer.valueOf(2), middleElement.getData());
assertEquals(0, list.size()); assertEquals(1, list.size()); assertEquals((Integer)1, list.removeFirst()); assertEquals(0, list.size()); assertEquals(1, list.size()); assertEquals((Integer)1, list.removeFirst()); assertEquals(2, list.size()); assertEquals((Integer)1, list.removeFirst()); assertEquals((Integer)2, list.removeFirst()); assertEquals(0, list.size()); assertEquals(2, list.size()); assertEquals(0, list.size());
assertEquals(6, workDone.size()); assertEquals(Arrays.asList("A.1", "A.B.1", "A.B.2", "B.1", "B.B.1", "B.B.2"), workDone);
assertEquals(1, victims.size()); assertEquals(latestStart(b, c).transaction(), victims.iterator().next());
assertEquals(expectedList, result);
assertEquals(3, result);
assertEquals("byte[10]", ba.toString()); assertEquals("byte[9]", ba.toString()); assertEquals("byte[10]", ba.toString()); assertEquals("byte[9]", ba.toString()); assertEquals("byte[0]", ba.toString());
assertEquals(1, c.get());
assertEquals(-123, com.github.kowshik.bigo.common.NumberUtils.atoi("-123"));
assertEquals(expectedNode, result);
assertEquals(65, result);
assertTrue(String.format("Exception: %s not thrown", NoSuchElementException.class.getCanonicalName()), thrown);
assertNotNull(value); assertEquals(rndString, new String(value)); assertNull(value);
assertTrue(uniqueChars.evaluate("pedro"));
assertEquals(sub, sub2);
assertEquals("", result);
assertEquals(0, result);
assertEquals(target + File.separator + "classes", classLocation); assertNull(RuntimeUtil.classLocation(null)); assertEquals("java.lang.String", RuntimeUtil.classLocation(String.class));
assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busyObserver.maxConcurrentThreads.get()); assertFalse(busyObserver.onCompleted); assertTrue(busyObserver.onError); assertTrue(busyObserver.onNextCount.get() < 9);
assertArrayEquals(bytes, baos.toByteArray()); assertArrayEquals(bytes, baos.toByteArray());
assertEquals("1\\\\1234\\\\1234567\\\\1234567890".replace("\\\\", File.separator), where); assertEquals("123\\\\123456\\\\123456789".replace("\\\\", File.separator), where);
assertArrayEquals(result, fields); assertArrayEquals(result, fields); assertTrue(fieldSize > 0); assertTrue(instanceFieldSize > 0); assertTrue(fieldSize > instanceFieldSize);
assertEquals(1, victims.size()); assertEquals(latestStart(a, b, c).transaction(), victims.iterator().next());
assertEquals("one", observable.single());
assertEquals(7, sequenceLength);
assertEquals(2, result, DELTA);
assertEquals("-4", intToString.transform(-4));
assertEquals(7, multiply.calculate(1, 7));
assertTrue(JVMUtil.appendToClassPath(classpath + File.separator + "lib/test1.jar")); assertFalse(JVMUtil.appendToClassPath(null)); assertFalse(JVMUtil.appendToClassPath("")); assertFalse(JVMUtil.appendToClassPath("impossible exist! ")); assertFalse(JVMUtil.appendToClassPath(classpath + File.separator + "lib/notexist.jar"));
assertEquals(1, result);
assertEquals(Arrays.asList(2, 3, 4), values);
assertTrue(result);
assertEquals(4, pivotIndex); assertArrayEquals( "Failure => Array returned is not partitioned according to the pivot.", array, new Integer[] { 3, 3, 3, 3, 3 });
assertEquals(null, entry.setValue("hello")); assertEquals("hello", entry.getValue());
assertTrue(uniqueChars.evaluate(""));
assertNull(PackageUtil.getPackage(null)); assertEquals("java.lang", PackageUtil.getPackage(String.class).getName()); assertEquals("com.baidu.unbiz.common", PackageUtil.getPackage(PackageUtil.class).getName());
assertTrue(money.greaterThan(new Money("9.85"))); assertFalse(money.greaterThan(new Money("11"))); assertEquals(money, new Money(10.1)); assertEquals(money, new Money("10.1"));
assertEquals(2.64575f, result, DELTA);
assertTrue(result.isEmpty());
assertTrue(sid.length() > instanceId.length()); assertTrue(sid.startsWith(instanceId)); assertTrue(sid.matches("[A-Z0-9-]+"));
assertEquals(null, StringEscapeUtil.unescapeURL(null)); assertThat(e, TestUtil.exception("The Appendable must not be null"));
assertTrue(areAnagrams.check("ana", "naa"));
assertEquals(4, result.size()); assertEquals(root, result.get(0)); assertEquals(n1, result.get(1)); assertEquals(n2, result.get(2)); assertEquals(n3, result.get(3));
assertEquals(4, numberOfDifferentBits);
assertArrayEquals(input, target);
assertArrayEquals( new char[] { 'p', 'e', '%', '2', '0', 'd', 'r', 'o', '%', '2', '0', 'g', 's' }, input);
assertFalse(isBalanced);
assertNull(FileUtil.readBytes((String) null)); assertNull(FileUtil.readBytes((File) null)); assertNull(FileUtil.readBytes("notexist")); assertNull(FileUtil.readBytes(new File("notexist"))); assertNull(FileUtil.readBytes(ClassLoaderUtil.getClasspath())); assertEquals(fileSize, FileUtil.readBytes(log4jPath).length);
assertEquals(expected, NumSetBits.getNumSetBits((byte) number, 0, 7));
assertEquals(head, reverseLinkedList.reverseRecursive(head));
assertTrue(autoBoxingTrick.compare(1, 1));
assertEquals(expectedNode, result);
assertEquals(0, sequenceLength);
assertEquals(5, fibonacciNumbers.getRecursiveWithCatching(4));
assertEquals(0, sequenceLength);
assertEquals(expected, result);
assertTrue(areAnagrams.check("", ""));
assertEquals(2, bitsCounter.countBitsToOneBasedOnBinaryOperators(3));
assertTrue(result);
assertEquals("1.7.7", app.getAppVersion());
assertEquals(469, result);
assertEquals(1010 + 250, newMoney.getCent()); assertEquals(1010 - 250, newMoney.getCent());
assertEquals(Integer.valueOf(2), middleElement.getData());
assertArrayEquals(expected, array);
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertTrue(heap.isEmpty());
assertEquals(11, result);
assertEquals(asList("John Coltrane", "US", "John Lennon", "UK", "The Beatles", "UK"), namesAndOrigins);
assertEquals(173500, numNextEvents);
assertEquals(11, result);
assertEquals(101, mon.getCent()); assertEquals(money, xMoney);
assertEquals(Integer.valueOf(2), middleElement.getData());
assertEquals("Hello world this is the content of a real file", result);
assertTrue(binaryTreeEquals.areEqualsIterative(root, root1));
assertEquals(n2, result);
assertEquals(expectedNode, result);
assertArrayEquals(new char[] { '%', '2', '0', '%', '2', '0' }, input);
assertArrayEquals(input, target);
assertNull(cursor.next());
assertEquals(0, result);
assertEquals(54, median, DELTA);
assertFalse(heap.isEmpty());
assertEquals(expectedResult, result);
assertEquals(null, subs.substitute(null));
assertArrayEquals(expectedResult, matrix);
assertEquals(TestException.class, e.getCause().getClass());
assertTrue(ObjectUtil.isNotEmpty(result)); assertTrue(ObjectUtil.isNotEmpty(result));
assertEquals(0, MatchResultSubstitution.EMPTY_MATCH_RESULT.groupCount()); assertEquals("", MatchResultSubstitution.EMPTY_MATCH_RESULT.group(0));
assertEquals(result1, result2);
assertNull(replaced); assertEquals(i, ((TestKey) replaced.key()).key()); assertEquals("first", ((TestRecord) replaced).stringValue()); assertEquals(expected++, record.key().key()); assertEquals("second", record.stringValue()); assertEquals(N, expected);
assertEquals(1, result);
assertEquals(true, it.hasNext()); assertEquals("one", it.next()); assertEquals(true, it.hasNext());
assertEquals(expected, result);
assertEquals("a", result);
assertTrue(uniqueChars.evaluate2("pedro"));
assertTrue(palindromes.evaluate("ana"));
assertEquals(-9180000000L, result);
assertEquals("pedro", result);
assertTrue(LocaleUtil.isCharsetSupported("GBK")); assertTrue(LocaleUtil.isCharsetSupported("8859_1")); assertTrue(LocaleUtil.isCharsetSupported("iso8859_1")); assertTrue(LocaleUtil.isCharsetSupported("iso-8859-1")); assertFalse(LocaleUtil.isCharsetSupported(null)); assertFalse(LocaleUtil.isCharsetSupported("hello"));
assertTrue(sid.length() > instanceId.length()); assertTrue(sid.startsWith(instanceId)); assertTrue(sid.matches("[A-Za-z0-9-]+"));
assertEquals("com.baidu.unbiz.common.RuntimeUtilTest.currentNamespace", RuntimeUtil.currentNamespace());
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertEquals("one", it.next());
assertEquals(4, tested.get(4)); assertEquals(1, tested.get(4)); assertEquals(3, tested.get(3)); assertEquals(2, tested.get(2)); assertEquals(0, tested.get(1)); assertEquals(5, tested.get(5)); assertEquals(6, tested.get(6)); assertEquals(7, tested.get(6));
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new Integer[] { 1, 2, 3, 4, 5 });
assertArrayEquals(new char[] { 'p', 'e', 'd', 'r', 'o', '%', '2', '0' }, input);
assertFalse(result);
assertEquals(2, bitsCounter.countBitsToOneBasedOnString(3));
assertEquals(9180000000L, result);
assertEquals(3, counts.size()); assertEquals(Long.valueOf(3), counts.get("John")); assertEquals(Long.valueOf(2), counts.get("Paul")); assertEquals(Long.valueOf(1), counts.get("George"));
assertEquals(result, Optional.of("abc"));
assertTrue(palindromes.evaluate(""));
assertEquals(0, tested.get()); assertEquals(4, tested.get(4)); assertEquals(2, tested.get()); assertEquals(3, tested.get()); assertEquals(1, tested.get());
assertArrayEquals("Failure => Array returned is not sorted.", sorted, new int[] { 5, 4, 3, 2, 1 });
assertNull(ExceptionUtil.toRuntimeException(null)); assertEquals(RuntimeException.class, ExceptionUtil.toRuntimeException(new Exception(), PrivateRuntimeException.class).getClass()); assertSame(iae, ExceptionUtil.toRuntimeException(iae)); assertTrue(ExceptionUtil.toRuntimeException(ioe) instanceof RuntimeException); assertSame(ioe, ExceptionUtil.toRuntimeException(ioe).getCause());
assertArrayEquals(expectedMatrix, matrix);
assertEquals(i + 1, object);
assertEquals(25, NumSetBits.getNumSetBitsBetweenWholeBytes(array, 0, 3)); assertEquals(16, NumSetBits.getNumSetBitsBetweenWholeBytes(array, 1, 2));
assertEquals(7, pivotIndex); assertArrayEquals( "Failure => Array returned is not partitioned according to the pivot.", array, new Integer[] { 3, 0, 2, 3, -1, -2, 0, 3 });
assertEquals(1, fibonacciNumbers.getIterative(1));
assertEquals("baiduBeidou", result);
assertArrayEquals(array, resultArray);
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());
assertFalse(subscriptions.isOffsetResetNeeded(tp)); assertTrue(subscriptions.isFetchable(tp)); assertEquals(5, subscriptions.position(tp).longValue());
assertFalse(subscriptions.refreshCommitsNeeded()); assertEquals(100L, subscriptions.committed(tp).offset());
assertEquals(0, cache.size()); assertEquals(1, cache.size()); assertEquals(1, cache.size()); assertEquals(2, cache.size()); assertEquals(3, cache.size());
assertEquals(parse("{ \\"type\\": \\"int64\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(4398046511104L, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).longValue());
assertEquals(Collections.singleton(consumerId), assignment.keySet());
assertEquals(1, consumerClient.pendingRequestCount()); assertEquals(1, consumerClient.pendingRequestCount(node)); assertFalse(future.isDone()); assertTrue(future.isDone()); assertTrue(future.succeeded()); assertEquals(Errors.NONE.code(), response.errorCode());
assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get()); assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get()); assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get()); assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());
assertEquals(schema, schemaAndValue.schema()); assertEquals(reference, converted);
assertEquals(Arrays.asList( new TopicPartition(topic, 0), new TopicPartition(topic, 1), new TopicPartition(topic, 2)), assignment.get(consumerId));
assertNull(lock); assertNotNull(lock);
assertEquals(cluster.topics().size(), allTopics.size());
assertEquals(parse("{ \\"type\\": \\"bytes\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(ByteBuffer.wrap("test-string".getBytes()), ByteBuffer.wrap(converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).binaryValue()));
assertTrue("Thread should have completed all iterations successfully.", thread.success.get()); assertEquals(totalMemory, pool.availableMemory());
assertFalse(subscriptions.isOffsetResetNeeded(tp)); assertTrue(subscriptions.isFetchable(tp)); assertEquals(5, subscriptions.position(tp).longValue());
assertEquals(100, heartbeat.timeToNextHeartbeat(0)); assertEquals(0, heartbeat.timeToNextHeartbeat(100)); assertEquals(0, heartbeat.timeToNextHeartbeat(200));
assertEquals(new SchemaAndValue(Schema.INT8_SCHEMA, (byte) 12), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"int8\\" }, \\"payload\\": 12 }".getBytes()));
assertTrue(converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME).isNull()); assertTrue(converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).isArray()); assertEquals(3, payload.size()); assertEquals(new HashSet<>(Arrays.asList(JsonNodeFactory.instance.arrayNode().add("string").add(12), JsonNodeFactory.instance.arrayNode().add(52).add("string"), JsonNodeFactory.instance.arrayNode().add(false).add(true))), payloadEntries );
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions()); assertEquals(1, rebalanceListener.revokedCount); assertEquals(Collections.emptySet(), rebalanceListener.revoked); assertEquals(1, rebalanceListener.assignedCount); assertEquals(Collections.singleton(tp), rebalanceListener.assigned);
assertEquals("127.0.0.1", getHost("127.0.0.1:8000"));
assertEquals(Arrays.asList( new TopicPartition(topic, 0), new TopicPartition(topic, 1), new TopicPartition(topic, 2)), assignment.get(consumerId));
assertEquals(parse("{ \\"type\\": \\"boolean\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(true, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).booleanValue());
assertEquals(new SchemaAndValue(SchemaBuilder.map(Schema.INT32_SCHEMA, Schema.INT32_SCHEMA).build(), expected), converter.toConnectData(TOPIC, mapJson));
assertTrue(success.get()); assertEquals(100L, subscriptions.committed(tp).offset());
assertEquals(1, task.executions); assertEquals(1, task.executions); assertEquals(2, task.executions);
assertEquals("We should have only one response", 1, selector.completedReceives().size()); assertEquals("The response should not be from the muted node", "0", selector.completedReceives().get(0).source()); assertEquals("We should have only one response", 1, selector.completedReceives().size()); assertEquals("The response should be from the previously muted node", "1", selector.completedReceives().get(0).source());
assertTrue(converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME).isNull()); assertEquals(true, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).booleanValue());
assertEquals(Utils.mkList("A:aa", "B:bb", "C:cc", "D:dd"), processorSupplier.processed);
assertTrue("The client should be ready", client.isReady(node, time.milliseconds())); assertEquals("There should be one leastloadednode", leastNode.id(), node.id()); assertFalse("After we forced the disconnection the client is no longer ready.", client.ready(node, time.milliseconds())); assertEquals("There should be NO leastloadednode", leastNode, null);
assertEquals(Collections.singleton(consumerId), assignment.keySet()); assertTrue(assignment.get(consumerId).isEmpty());
assertTrue(converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME).isNull()); assertEquals(JsonNodeFactory.instance.arrayNode().add(1).add("string").add(true), converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME));
assertEquals(returnedProps.get(ConsumerConfig.CLIENT_ID_CONFIG), "client-consumer"); assertEquals(returnedProps.get(ConsumerConfig.GROUP_ID_CONFIG), "example-application");
assertEquals("X-0000000000", builder.newName("X-")); assertEquals("Y-0000000001", builder.newName("Y-")); assertEquals("Z-0000000002", builder.newName("Z-")); assertEquals("X-0000000000", builder.newName("X-")); assertEquals("Y-0000000001", builder.newName("Y-")); assertEquals("Z-0000000002", builder.newName("Z-"));
assertTrue(iter.hasNext()); assertEquals((long) i, entry.offset()); assertEquals(list.get(i), entry.record()); assertFalse(iter.hasNext());
assertNull(stateMgr.getStore("noSuchStore")); assertEquals(mockStateStore, stateMgr.getStore(nonPersistentStoreName));
assertEquals(1, serialized.size()); assertEquals(WorkerCoordinator.DEFAULT_SUBPROTOCOL, defaultMetadata.name()); assertEquals(1, state.offset());
assertTrue(table1.sendingOldValueEnabled()); assertTrue(table2.sendingOldValueEnabled());
assertTrue(coordinator.coordinatorUnknown()); assertEquals(1, cb.invoked); assertTrue(cb.exception instanceof RetriableCommitFailedException);
assertEquals(new SchemaAndValue(Schema.INT32_SCHEMA, 12), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"int32\\" }, \\"payload\\": 12 }".getBytes()));
assertEquals(parse("{ \\"type\\": \\"double\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12.34, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).doubleValue(), 0.001);
assertEquals(new SchemaAndValue(Schema.FLOAT64_SCHEMA, 12.34), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"double\\" }, \\"payload\\": 12.34 }".getBytes()));
assertEquals(parse("{ \\"type\\": \\"float\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12.34f, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).floatValue(), 0.001);
assertEquals(new SchemaAndValue(Schema.FLOAT32_SCHEMA, 12.34f), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"float\\" }, \\"payload\\": 12.34 }".getBytes()));
assertEquals(8, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertTrue("We should never choose a leader-less node in round robin", part == 0 || part == 2); assertEquals("The distribution between two available partitions should be even", countForPart0, countForPart2);
assertTrue(heartbeat.sessionTimeoutExpired(time.milliseconds()));
assertEquals(100, metadata.timeToNextUpdate(1000)); assertEquals(100, metadata.timeToNextUpdate(1100)); assertEquals(100, metadata.lastSuccessfulUpdate()); assertEquals(100, metadata.timeToNextUpdate(1000));
assertEquals(100L, subscriptions.committed(tp).offset());
assertEquals(connector, state.name()); assertEquals("RUNNING", state.connector().state()); assertEquals(1, state.tasks().size()); assertEquals(workerId, state.connector().workerId()); assertEquals(0, taskState.id()); assertEquals("UNASSIGNED", taskState.state()); assertEquals(workerId, taskState.workerId());
assertTrue("The client should be ready", client.isReady(node, time.milliseconds())); assertEquals("There should be 1 in-flight request after send", 1, client.inFlightRequestCount(node.idString())); assertEquals("There should be no in-flight request after close", 0, client.inFlightRequestCount(node.idString())); assertFalse("Connection should not be ready after close", client.isReady(node, 0));
assertEquals(Arrays.asList(new TopicPartition(topic, 0)), assignment.get(consumer1)); assertEquals(Collections.<TopicPartition>emptyList(), assignment.get(consumer2));
assertEquals("metric names created in two different ways should be equal", n1, n2);
assertEquals(expectedRecords.size(), actualRecords.size()); assertEquals(expectedRecord, actualRecord);
assertEquals(workerId, taskState.workerId()); assertEquals("FAILED", taskState.state()); assertEquals(0, taskState.id()); assertNotNull(taskState.trace());
assertTrue(future.isDone());
assertEquals(expected, actual);
assertEquals(Decimal.LOGICAL_NAME, plain.name()); assertEquals(Collections.singletonMap(Decimal.SCALE_FIELD, "2"), plain.parameters()); assertEquals(1, (Object) plain.version());
assertEquals(Utils.mkList("topic1", "topic2"), subscription.topics()); assertEquals(info.encode(), subscription.userData());
assertEquals(Utils.mkSet(partition2), new HashSet<>(task.changeLogPartitions()));
assertEquals(schema, schemaAndValue.schema()); assertEquals(reference, converted);
assertEquals(new SchemaAndValue(Schema.STRING_SCHEMA, "foo-bar-baz"), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"string\\" }, \\"payload\\": \\"foo-bar-baz\\" }".getBytes()));
assertEquals(CONFIG_INFOS.name(), configInfos.name()); assertEquals(CONFIG_INFOS.errorCount(), configInfos.errorCount()); assertEquals(CONFIG_INFOS.groups(), configInfos.groups()); assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));
assertTrue(subscriptions.isFetchable(tp)); assertEquals(5, subscriptions.position(tp).longValue());
assertFalse(subscriptions.isOffsetResetNeeded(tp)); assertTrue(subscriptions.isFetchable(tp)); assertEquals(5, subscriptions.position(tp).longValue());
assertEquals(1, validatedAddresses.size()); assertEquals("mydomain.com", onlyAddress.getHostName()); assertEquals(10000, onlyAddress.getPort());
assertEquals(new SchemaAndValue(Schema.BOOLEAN_SCHEMA, true), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"boolean\\" }, \\"payload\\": true }".getBytes())); assertEquals(new SchemaAndValue(Schema.BOOLEAN_SCHEMA, false), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"boolean\\" }, \\"payload\\": false }".getBytes()));
assertEquals(parse("{ \\"type\\": \\"int32\\", \\"optional\\": false, \\"name\\": \\"org.apache.kafka.connect.data.Time\\", \\"version\\": 1 }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertTrue(payload.isInt()); assertEquals(14400000, payload.longValue());
assertEquals(new SchemaAndValue(SchemaBuilder.array(Schema.INT32_SCHEMA).build(), Arrays.asList(1, 2, 3)), converter.toConnectData(TOPIC, arrayJson));
assertEquals(0, delay);
assertEquals(parse("{ \\"type\\": \\"array\\", \\"items\\": { \\"type\\": \\"int32\\", \\"optional\\": false }, \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(JsonNodeFactory.instance.arrayNode().add(1).add(2).add(3), converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME));
assertEquals(singleton(tp0), consumer.assignment()); assertTrue(consumer.paused().isEmpty()); assertEquals(singleton(tp0), consumer.paused()); assertTrue(consumer.paused().isEmpty()); assertTrue(consumer.paused().isEmpty());
assertEquals(parse("{ \\"type\\": \\"int8\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).intValue());
assertEquals(returnedProps.get(ConsumerConfig.CLIENT_ID_CONFIG), "client-restore-consumer"); assertNull(returnedProps.get(ConsumerConfig.GROUP_ID_CONFIG));
assertEquals(Arrays.asList( new TopicPartition(topic1, 0), new TopicPartition(topic2, 0), new TopicPartition(topic2, 1)), assignment.get(consumerId));
assertEquals(expectedHosts, actualHosts);
assertEquals(reference, converted);
assertEquals(new SchemaAndValue(expectedSchema, expected), converted);
assertEquals(1, Utils.min(1)); assertEquals(1, Utils.min(1, 2, 3)); assertEquals(1, Utils.min(2, 1, 3)); assertEquals(1, Utils.min(2, 3, 1));
assertFalse(stateDirApp1.exists()); assertFalse(stateDirApp2.exists()); assertTrue(stateDirApp1.exists()); assertTrue(stateDirApp2.exists()); assertFalse(stateDirApp1.exists()); assertTrue(stateDirApp2.exists()); assertFalse(stateDirApp1.exists()); assertFalse(stateDirApp2.exists());
assertEquals(new SchemaAndValue(Schema.INT64_SCHEMA, 12L), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"int64\\" }, \\"payload\\": 12 }".getBytes())); assertEquals(new SchemaAndValue(Schema.INT64_SCHEMA, 4398046511104L), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"int64\\" }, \\"payload\\": 4398046511104 }".getBytes()));
assertEquals(parse("{ \\"type\\": \\"int16\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).intValue());
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions()); assertEquals(1, rebalanceListener.revokedCount); assertEquals(1, rebalanceListener.assignedCount); assertEquals(Collections.singleton(tp), rebalanceListener.assigned);
assertEquals(new SchemaAndValue(Schema.INT16_SCHEMA, (short) 12), converter.toConnectData(TOPIC, "{ \\"schema\\": { \\"type\\": \\"int16\\" }, \\"payload\\": 12 }".getBytes()));
assertEquals(mkSet("source-1", "source-2", "processor-1", "processor-2"), nodeNames(topology0.processors())); assertEquals(mkSet("source-3", "source-4", "processor-3"), nodeNames(topology1.processors())); assertEquals(mkSet("source-5"), nodeNames(topology2.processors()));
assertTrue(endTime - initialTime >= RETRY_BACKOFF_MS);
assertEquals(parse("{ \\"type\\": \\"string\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals("test-string", converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).textValue());
assertEquals(expected, actual);
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(new HashSet<>(Arrays.asList(tp1, tp2)), subscriptions.assignedPartitions());
assertEquals(Long.MAX_VALUE, delay);
assertTrue(heartbeat.shouldHeartbeat(time.milliseconds()));
assertEquals(expected, builder.sourceTopics("X"));
assertEquals(100L, subscriptions.committed(tp).offset());
assertEquals(returnedProps.get(ConsumerConfig.CLIENT_ID_CONFIG), "client-producer");
assertEquals(singleton(topic), consumer.subscription()); assertTrue(consumer.assignment().isEmpty()); assertTrue(consumer.subscription().isEmpty()); assertTrue(consumer.assignment().isEmpty()); assertTrue(consumer.subscription().isEmpty()); assertEquals(singleton(tp0), consumer.assignment()); assertTrue(consumer.subscription().isEmpty()); assertTrue(consumer.assignment().isEmpty());
assertEquals(Arrays.asList( new TopicPartition(topic1, 0)), assignment.get(consumer1)); assertEquals(Arrays.asList( new TopicPartition(topic1, 1), new TopicPartition(topic2, 0), new TopicPartition(topic2, 1)), assignment.get(consumer2)); assertEquals(Arrays.asList( new TopicPartition(topic1, 2)), assignment.get(consumer3));
assertEquals(Collections.singleton(consumerId), assignment.keySet()); assertTrue(assignment.get(consumerId).isEmpty());
assertEquals(parse("{ \\"type\\": \\"bytes\\", \\"optional\\": false, \\"name\\": \\"org.apache.kafka.connect.data.Decimal\\", \\"version\\": 1, \\"parameters\\": { \\"scale\\": \\"2\\" } }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertArrayEquals(new byte[]{0, -100}, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).binaryValue());
assertEquals(schema, schemaAndValue.schema()); assertEquals(reference, converted);
assertEquals(0, Utils.abs(Integer.MIN_VALUE)); assertEquals(10, Utils.abs(-10)); assertEquals(10, Utils.abs(10)); assertEquals(0, Utils.abs(0)); assertEquals(1, Utils.abs(-1));
assertEquals(Collections.singleton(consumerId), assignment.keySet()); assertTrue(assignment.get(consumerId).isEmpty());
assertFalse(subscriptions.refreshCommitsNeeded()); assertEquals(100L, subscriptions.committed(tp).offset());
assertEquals(0, cache.size()); assertEquals(1, cache.size()); assertEquals(1, cache.size()); assertEquals(2, cache.size());
assertEquals(parse("{ \\"type\\": \\"int32\\", \\"optional\\": false, \\"name\\": \\"org.apache.kafka.connect.data.Date\\", \\"version\\": 1 }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertTrue(payload.isInt()); assertEquals(10000, payload.intValue());
assertTrue(converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME).isNull()); assertEquals(JsonNodeFactory.instance.objectNode().put("key1", 12).put("key2", "string").put("key3", true), converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME));
assertEquals(1, consumerClient.pendingRequestCount()); assertFalse(future.isDone()); assertTrue(future.isDone()); assertTrue(future.failed()); assertEquals(Errors.ILLEGAL_GENERATION.exception(), future.exception()); assertTrue(coordinator.needRejoin());
assertTrue(exception.getMessage().equals("Producer is closed forcefully.")); assertEquals("No nodes should be ready.", 0, result.readyNodes.size()); assertEquals(numExceptionReceivedInCallback.get(), 100); assertFalse(accum.hasUnsent());
assertEquals(2, metadata.size()); assertEquals(roundRobin.name(), metadata.get(0).name()); assertEquals(range.name(), metadata.get(1).name()); assertEquals(2, metadata.size()); assertEquals(range.name(), metadata.get(0).name()); assertEquals(roundRobin.name(), metadata.get(1).name());
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());
assertTrue(client.requests().isEmpty());
assertEquals(6, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertTrue(coordinator.coordinatorUnknown()); assertEquals(1, cb.invoked); assertTrue(cb.exception instanceof RetriableCommitFailedException);
assertEquals(SchemaAndValue.NULL, converter.toConnectData(TOPIC, null));
assertEquals(false, leaderAssignment.failed()); assertEquals("leader", leaderAssignment.leader()); assertEquals(1, leaderAssignment.offset()); assertEquals(Collections.singletonList(connectorId), leaderAssignment.connectors()); assertEquals(Collections.emptyList(), leaderAssignment.tasks()); assertEquals(false, memberAssignment.failed()); assertEquals("leader", memberAssignment.leader()); assertEquals(1, memberAssignment.offset()); assertEquals(Collections.emptyList(), memberAssignment.connectors()); assertEquals(Collections.singletonList(taskId0), memberAssignment.tasks());
assertEquals(1, rebalanceListener.revokedCount); assertEquals(1, rebalanceListener.assignedCount); assertEquals(2, rebalanceListener.revokedCount); assertEquals(Collections.singleton(tp), rebalanceListener.revoked); assertEquals(2, rebalanceListener.assignedCount); assertEquals(Collections.singleton(tp), rebalanceListener.assigned);
assertEquals(new SchemaAndValue(SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build(), expected), converter.toConnectData(TOPIC, mapJson));
assertEquals(6, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertFalse(subscriptions.isOffsetResetNeeded(tp)); assertTrue(subscriptions.isFetchable(tp)); assertEquals(5, subscriptions.position(tp).longValue());
assertEquals(invokedBeforeTest + 1, defaultOffsetCommitCallback.invoked); assertNull(defaultOffsetCommitCallback.exception);
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions()); assertEquals(1, rebalanceListener.revokedCount); assertEquals(Collections.emptySet(), rebalanceListener.revoked); assertEquals(1, rebalanceListener.assignedCount); assertEquals(Collections.singleton(tp), rebalanceListener.assigned);
assertEquals(Arrays.asList(new TopicPartition(topic, 0)), assignment.get(consumer1)); assertEquals(Arrays.asList(new TopicPartition(topic, 1)), assignment.get(consumer2));
assertEquals(4, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertEquals(1, consumerClient.pendingRequestCount()); assertFalse(future.isDone()); assertTrue(future.isDone()); assertTrue(future.failed()); assertEquals(Errors.UNKNOWN_MEMBER_ID.exception(), future.exception()); assertTrue(coordinator.needRejoin());
assertFalse(subscriptions.partitionAssignmentNeeded()); assertTrue(subscriptions.partitionAssignmentNeeded());
assertEquals(record.checksum(), record.computeChecksum()); assertEquals(record.checksum(), Record.computeChecksum( this.timestamp, this.key == null ? null : this.key.array(), this.value == null ? null : this.value.array(), this.compression, 0, -1)); assertTrue(record.isValid()); assertFalse(copy.isValid());
assertEquals(parse("{ \\"type\\": \\"int32\\", \\"optional\\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).intValue());
assertEquals(schema, schemaAndValue.schema()); assertEquals(reference, converted);
assertEquals(parse("{ \\"type\\": \\"int64\\", \\"optional\\": false, \\"name\\": \\"org.apache.kafka.connect.data.Timestamp\\", \\"version\\": 1 }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertTrue(payload.isLong()); assertEquals(4000000000L, payload.longValue());
assertFalse(subscriptions.refreshCommitsNeeded()); assertEquals(null, subscriptions.committed(tp));
assertFalse(subscriptions.refreshCommitsNeeded()); assertEquals(100L, subscriptions.committed(tp).offset());
assertTrue(table1.sendingOldValueEnabled());
assertEquals(expected, config.originalsWithPrefix("foo."));
assertEquals("Same key should yield same partition", partition, partitioner.partition("test", null, keyBytes, null, null, cluster));
assertTrue(received.get()); assertEquals(JoinGroupRequest.UNKNOWN_MEMBER_ID, coordinator.memberId); assertEquals(OffsetCommitRequest.DEFAULT_GENERATION_ID, coordinator.generation);
assertEquals(cluster.topics().size(), allTopics.size());
assertEquals(10, scheduler.nextTimeout(0)); assertEquals(20, scheduler.nextTimeout(0)); assertEquals(30, scheduler.nextTimeout(0)); assertEquals(Long.MAX_VALUE, scheduler.nextTimeout(0));
assertNotNull(metrics.removeMetric(metrics.metricName("test1", "grp1"))); assertNull(metrics.metrics().get(metrics.metricName("test1", "grp1"))); assertNotNull(metrics.metrics().get(metrics.metricName("test2", "grp1"))); assertNotNull(metrics.removeMetric(metrics.metricName("test2", "grp1"))); assertNull(metrics.metrics().get(metrics.metricName("test2", "grp1"))); assertEquals(size, metrics.metrics().size());
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());
assertEquals("We should have a single produce request in flight.", 1, client.inFlightRequestCount()); assertEquals("All requests completed.", offset, (long) client.inFlightRequestCount()); assertTrue("Request should be completed", future.isDone()); assertEquals(offset, future.get().offset());
assertEquals("", Utils.join(Collections.emptyList(), ",")); assertEquals("1", Utils.join(Arrays.asList("1"), ",")); assertEquals("1,2,3", Utils.join(Arrays.asList(1, 2, 3), ","));
assertEquals(4, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertEquals(Collections.singleton(consumerId), assignment.keySet()); assertTrue(assignment.get(consumerId).isEmpty());
assertTrue(coordinator.coordinatorUnknown()); assertEquals(1, cb.invoked); assertTrue(cb.exception instanceof RetriableCommitFailedException);
assertFalse(subscriptions.partitionAssignmentNeeded()); assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions()); assertEquals(1, rebalanceListener.revokedCount); assertEquals(1, rebalanceListener.assignedCount); assertEquals(Collections.singleton(tp), rebalanceListener.assigned);
assertEquals(invokedBeforeTest + 1, defaultOffsetCommitCallback.invoked); assertTrue(defaultOffsetCommitCallback.exception instanceof RetriableCommitFailedException);
assertEquals(Collections.singleton(consumerId), assignment.keySet());
assertEquals(Arrays.asList( new TopicPartition(topic1, 0), new TopicPartition(topic1, 2), new TopicPartition(topic2, 1)), assignment.get(consumer1)); assertEquals(Arrays.asList( new TopicPartition(topic1, 1), new TopicPartition(topic2, 0), new TopicPartition(topic2, 2)), assignment.get(consumer2));
assertEquals(4, processor.processed.size()); assertEquals(expected[i], processor.processed.get(i));
assertEquals(Collections.singleton(topicName), e.unauthorizedTopics());
assertEquals(ApiKeys.PRODUCE.id, client.requests().peek().request().header().apiKey()); assertEquals(1, client.inFlightRequestCount()); assertTrue("Client ready status should be true", client.isReady(node, 0L)); assertEquals(1, client.inFlightRequestCount());
assertEquals(200, avgMetric.value(), EPS); assertEquals(300, maxMetric.value(), EPS);
assertEquals(3, branches.length); assertEquals(3, processors[0].processed.size()); assertEquals(1, processors[1].processed.size()); assertEquals(2, processors[2].processed.size());
assertEquals(0, adapter.listClients("foo").length); assertEquals(0, adapter.listClients("bar").length);
assertEquals(Parser.EVENT, packet.type); assertNotNull(packet.data); assertEquals(JSONArray.class, packet.data.getClass()); assertEquals(1, ((JSONArray) packet.data).length()); assertEquals("baz", ((JSONArray) packet.data).get(0)); assertNotNull(rooms); assertArrayEquals(new String[] { "foo", "bar" }, rooms); assertNull(socketsExcluded);
assertNotNull(namespace);
assertEquals(Parser.EVENT, packet.type); assertNotNull(packet.data); assertEquals(JSONArray.class, packet.data.getClass()); assertEquals(1, ((JSONArray) packet.data).length()); assertEquals("bar", ((JSONArray) packet.data).get(0)); assertNotNull(rooms); assertEquals(1, rooms.length); assertEquals("foo", rooms[0]); assertNull(socketsExcluded);
assertEquals(0, adapter.listClientRooms(socket1).length); assertEquals(0, adapter.listClientRooms(socket2).length);
assertEquals(Parser.EVENT, packet.type); assertNotNull(packet.data); assertEquals(JSONArray.class, packet.data.getClass()); assertEquals(1, ((JSONArray) packet.data).length()); assertEquals("foo", ((JSONArray) packet.data).get(0)); assertNull(rooms); assertNull(socketsExcluded);
assertEquals("/_foo", namespace.getName()); assertEquals(server, namespace.getServer()); assertNotNull(namespace.getAdapter()); assertEquals(0, namespace.getConnectedSockets().size());
assertNotNull(namespace);
assertNotNull(packet); assertEquals("/", packet.nsp);
assertFalse(sub1.isCancelled()); assertFalse(sub1.isCancelled()); assertTrue(sub2.isCancelled()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertTrue(d.isCancelled()); assertEquals(1, tc.start);
assertEquals("capacityHint > 0 required but it was -99", ex.getMessage());
assertFalse(pp.hasSubscribers()); assertNotNull(((MaybeCache<Integer>)source).source.get()); assertNull(((MaybeCache<Integer>)source).source.get()); assertTrue(pp.hasSubscribers());
assertTrue(bmo.blockingAwait(1, TimeUnit.MINUTES));
assertFalse(d.isDisposed()); assertFalse(s.isDisposed()); assertTrue(bs.isCancelled()); assertTrue(d.isDisposed()); assertTrue(s.isDisposed());
assertTrue("No observers?!", pp.hasSubscribers()); assertTrue("Has errors already?!", errors.isEmpty()); assertFalse("Has observers?!", pp.hasSubscribers()); assertFalse("No errors?!", errors.isEmpty()); assertTrue(errors.toString(), errors.get(0) instanceof TestException);
assertFalse(us.hasObservers()); assertTrue(us.hasObservers()); assertFalse(us.hasObservers());
assertTrue(ex.toString(), ex.getCause() instanceof TestException); assertEquals("One", ex.getCause().getMessage());
assertTrue(d.isDisposed());
assertTrue(e instanceof RuntimeException); assertEquals("Error occurred when trying to propagate error to Subscriber.onError", e.getMessage()); assertTrue(e2 instanceof CompositeException); assertEquals(2, innerExceptions.size()); assertTrue(e3 instanceof SafeSubscriberTestException); assertEquals("error!", e3.getMessage()); assertTrue(e4 instanceof SafeSubscriberTestException); assertEquals("onErrorFail", e4.getMessage());
assertEquals(10000, to1.values().size()); assertEquals(10000, to2.values().size());
assertEquals(false, didRunOnTerminate.get()); assertEquals(true, didRunOnTerminate.get());
assertEquals(Arrays.asList(3, 5), list);
assertSame(m, (((HasUpstreamMaybeSource<?>)m.toFlowable()).source()));
assertFalse(run.isDisposed()); assertTrue(run.isDisposed());
assertFalse(tc.isDisposed()); assertTrue(tc.isDisposed()); assertTrue(d.isCancelled()); assertEquals(0, tc.start);
assertFalse(mo.isDisposed()); assertTrue(mo.isDisposed()); assertTrue(d.isDisposed());
assertNull(source.current.get());
assertEquals(0, set.size());
assertEquals(s, SchedulerPoolFactory.POOLS.size());
assertEquals(1, count[0]);
assertEquals("Scheduler Callable can\'t be null", npe.getMessage()); assertEquals("Scheduler Callable result can\'t be null", npe.getMessage());
assertEquals(1000, list.size());
assertTrue(e instanceof SafeSubscriberTestException); assertEquals("onNextFail", e.getMessage());
assertEquals("maxSize > 0 required but it was -99", ex.getMessage());
assertFalse(d.isDisposed()); assertTrue(d.isDisposed());
assertFalse(pp.hasSubscribers());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { throw new TestException(); } }));
assertFalse(pp.hasSubscribers());
assertEquals(1, count[0]);
assertTrue(d.isDisposed()); assertTrue(so.isDisposed());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertFalse(s.isDisposed()); assertTrue(s2.isDisposed());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { return new CallablePublisher(); } }));
assertTrue(RxJavaPlugins.isLockdown()); assertEquals("Plugins can\'t be changed anymore",ex.getCause().getMessage()); assertEquals(m.toString(), before, after); assertSame(m.toString(), before, after); assertFalse(RxJavaPlugins.isLockdown());
assertNull(onError.get()); assertTrue(e instanceof SafeObserverTestException); assertEquals("onCompleteFail", e.getMessage());
assertEquals(1, list.size());
assertEquals(0, BackpressureHelper.producedCancel(requested, 2));
assertFalse(o.isDisposed()); assertTrue(received.toString(), received.get(0) instanceof TestException); assertEquals(received.toString(), 1, received.size()); assertTrue(o.isDisposed());
assertEquals(2, count[0]);
assertEquals(1, qd.poll().intValue()); assertNull(qd.poll());
assertFalse(o.hasCustomOnError());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new EmptyCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { return Observable.just(1); } }));
assertFalse(qs.isEmpty()); assertEquals(1, qs.poll().intValue()); assertFalse(qs.isEmpty());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { return Observable.just(1); } }));
assertFalse(o.hasCustomOnError());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertEquals(Collections.<Integer>emptyList(), list);
assertEquals(1000, list.size());
assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);
assertTrue(bmo.blockingGetError() instanceof InterruptedException);
assertEquals(Flowable.bufferSize() * 4, to.valueCount());
assertTrue(e instanceof RuntimeException); assertEquals("Error occurred when trying to propagate error to Observer.onError", e.getMessage()); assertTrue(e2 instanceof CompositeException); assertEquals(2, innerExceptions.size()); assertTrue(e3 instanceof SafeObserverTestException); assertEquals("error!", e3.getMessage()); assertTrue(e4 instanceof SafeObserverTestException); assertEquals("onErrorFail", e4.getMessage());
assertEquals(100, to.values().size());
assertEquals(s, SchedulerPoolFactory.POOLS.size());
assertFalse(o.isDisposed()); assertTrue(received.toString(), received.isEmpty()); assertTrue(o.isDisposed());
assertTrue(e instanceof SafeSubscriberTestException); assertEquals("onErrorFail", e.getMessage());
assertFalse(sub1.isCancelled()); assertFalse(sub1.isCancelled()); assertTrue(sub2.isCancelled()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertEquals(Integer.MAX_VALUE - 1, n);
assertEquals(3, busySubscriber.onNextCount.get()); assertFalse(busySubscriber.onError); assertTrue(busySubscriber.onComplete); assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busySubscriber.maxConcurrentThreads.get());
assertEquals(BlockingObserver.TERMINATED, q.poll()); assertNull(q.poll());
assertTrue(aa.get());
assertEquals("IdentityFunction", Functions.identity().toString());
assertTrue(o.hasCustomOnError());
assertEquals(false, didRunOnTerminate.get()); assertEquals(true, didRunOnTerminate.get());
assertFalse(task.isDisposed()); assertTrue(task.isDisposed()); assertTrue(task.isDisposed());
assertTrue("No observers?!", ps.hasObservers()); assertTrue("Has errors already?!", errors.isEmpty()); assertFalse("Has observers?!", ps.hasObservers()); assertFalse("No errors?!", errors.isEmpty()); assertTrue(errors.toString(), errors.get(0) instanceof TestException);
assertTrue(d.isCancelled()); assertEquals(0, tc.start);
assertFalse(sub1.isCancelled()); assertFalse(sub1.isCancelled()); assertTrue(sub2.isCancelled()); assertEquals(EndConsumerHelper.composeMessage("io.reactivex.internal.util.EndConsumerHelperTest$EndDefaultSubscriber"), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertTrue(ds.tryCancel()); assertFalse(ds.tryCancel());
assertEquals(10000, ts1.values().size()); assertEquals(10000, ts2.values().size());
assertFalse(o.hasCustomOnError());
assertEquals("maxSize > 0 required but it was -99", ex.getMessage());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertEquals(0, BackpressureHelper.produced(requested, 2));
assertTrue(disposed.isDisposed());
assertEquals(Arrays.asList(2, 4), list);
assertEquals(-1, ObjectHelper.compare(0L, 2L)); assertEquals(0, ObjectHelper.compare(0L, 0L)); assertEquals(1, ObjectHelper.compare(2L, 0L));
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertFalse(bq.isCancelled()); assertTrue(bq.isCancelled()); assertTrue(bq.isCancelled());
assertNull(onError.get()); assertTrue(e instanceof SafeSubscriberTestException); assertEquals("onCompleteFail", e.getMessage());
assertArrayEquals(Arrays.copyOf(expected, i + 1), rs.getValues()); assertArrayEquals(expected, rs.getValues());
assertTrue(busySubscriber.onNextCount.get() < 4); assertTrue(busySubscriber.onError); assertFalse(busySubscriber.onComplete); assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busySubscriber.maxConcurrentThreads.get());
assertTrue(Functions.predicateReverseFor(s).test(1)); assertFalse(Functions.predicateReverseFor(s).test(1));
assertTrue(e.getCause() instanceof SafeObserverTestException); assertEquals("error!", e.getCause().getMessage());
assertFalse(EndConsumerHelper.validate(DisposableHelper.DISPOSED, d1, getClass())); assertTrue(d1.isDisposed()); assertTrue(errors.toString(), errors.isEmpty());
assertFalse(o.isDisposed()); assertTrue(received.toString(), received.isEmpty()); assertTrue(o.isDisposed());
assertTrue(d.isCancelled());
assertEquals("maxSize > 0 required but it was -99", ex.getMessage());
assertFalse(empty.isDisposed()); assertTrue(empty.isDisposed());
assertFalse(pp.hasSubscribers()); assertNotNull(((MaybeCache<Integer>)source).source.get()); assertNull(((MaybeCache<Integer>)source).source.get()); assertTrue(pp.hasSubscribers());
assertTrue(d.isCancelled());
assertTrue(ex.toString(), ex.getCause() instanceof TestException); assertEquals("One", ex.getCause().getMessage());
assertFalse(o.hasCustomOnError());
assertEquals(2, count[0]);
assertTrue(onSubscribe.maxConcurrentThreads.get() > 1); assertEquals(1, busySubscriber.maxConcurrentThreads.get()); assertFalse(busySubscriber.onComplete); assertTrue(busySubscriber.onError); assertTrue(busySubscriber.onNextCount.get() < 9);
assertEquals(10, onNextEvents.size()); assertEquals((Integer)i, onNextEvents.get(i));
assertFalse(o.hasCustomOnError());
assertFalse(s.isCancelled()); assertTrue(s2.isCancelled());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new CallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { return Observable.just(1); } }));
assertFalse(o.isDisposed()); assertTrue(received.toString(), received.get(0) instanceof TestException); assertEquals(received.toString(), 1, received.size()); assertTrue(o.isDisposed());
assertEquals(1, count.get());
assertEquals(1, fs.get(5, TimeUnit.MILLISECONDS).intValue());
assertFalse(d.isDisposed()); assertTrue(d.isDisposed());
assertFalse(sub1.isCancelled()); assertFalse(sub1.isCancelled()); assertTrue(sub2.isCancelled()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertTrue(e instanceof SafeObserverTestException); assertEquals("onErrorFail", e.getMessage());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertFalse(pp.offer(1)); assertTrue(pp.offer(1)); assertFalse(pp.offer(2)); assertTrue(pp.offer(2)); assertTrue(pp.offer(null)); assertTrue(pp.hasThrowable()); assertTrue(pp.getThrowable().toString(), pp.getThrowable() instanceof NullPointerException);
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertEquals(1, qd.requested());
assertFalse(pp.hasSubscribers()); assertNotNull(((MaybeCache<Integer>)source).source.get()); assertNull(((MaybeCache<Integer>)source).source.get()); assertTrue(pp.hasSubscribers());
assertFalse(d.isDisposed()); assertFalse(d.isDisposed()); assertTrue(d.isDisposed());
assertEquals(DeferredScalarSubscription.FUSED_CONSUMED, ds.get()); assertNull(ds.value);
assertEquals(0, sa.requested);
assertFalse(rp.hasSubscribers()); assertTrue(rp.hasSubscribers()); assertFalse(rp.hasSubscribers());
assertSame(ex, ex.getRootCause(ex));
assertFalse(ps.hasObservers()); assertTrue(ps.hasObservers()); assertTrue(ps.hasObservers());
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertTrue(QueueDrainHelper.isCancelled(new BooleanSupplier() { @Override public boolean getAsBoolean() throws Exception { throw new IOException(); } }));
assertNull(onError.get()); assertTrue(e instanceof SafeSubscriberTestException); assertEquals("onNextFail", e.getMessage());
assertEquals(QueueFuseable.NONE, ds.requestFusion(QueueFuseable.SYNC));
assertNull(task.call());
assertFalse(d.isDisposed()); assertTrue(d.isDisposed());
assertFalse(o.isDisposed()); assertTrue(received.toString(), received.get(0) instanceof TestException); assertEquals(received.toString(), 1, received.size()); assertTrue(o.isDisposed());
assertFalse(b.get());
assertNull(error.get());
assertFalse(tc.isDisposed()); assertEquals(0, tc.start); assertTrue(tc.values.isEmpty()); assertTrue(tc.errors.isEmpty()); assertTrue(tc.isDisposed()); assertEquals(1, tc.start); assertEquals(1, tc.values.get(0).intValue()); assertTrue(tc.errors.isEmpty());
assertTrue(e instanceof RuntimeException); assertEquals("Error occurred when trying to propagate error to Subscriber.onError", e.getMessage()); assertTrue(e2 instanceof CompositeException); assertEquals(2, innerExceptions.size()); assertTrue(e3 instanceof SafeSubscriberTestException); assertEquals("onNextFail", e3.getMessage()); assertTrue(e4 instanceof SafeSubscriberTestException); assertEquals("onErrorFail", e4.getMessage());
assertEquals(2, count[0]);
assertEquals(1, qd.requested());
assertFalse(EndConsumerHelper.validate(SubscriptionHelper.CANCELLED, d1, getClass())); assertTrue(d1.isCancelled()); assertTrue(errors.toString(), errors.isEmpty());
assertFalse(pp.offer(1)); assertTrue(pp.offer(1)); assertFalse(pp.offer(2)); assertTrue(pp.offer(2)); assertTrue(pp.offer(null)); assertTrue(pp.hasThrowable()); assertTrue(pp.getThrowable().toString(), pp.getThrowable() instanceof NullPointerException);
assertTrue(ExceptionHelper.addThrowable(error, ex));
assertEquals(Long.MAX_VALUE, n);
assertEquals(10000, to1.values().size()); assertEquals(10000, to2.values().size());
assertTrue(e.getCause() instanceof SafeSubscriberTestException); assertEquals("error!", e.getCause().getMessage());
assertTrue(d1.isDisposed());
assertFalse(bs.isCancelled()); assertTrue(bs.isCancelled());
assertFalse(ps.hasObservers());
assertTrue(o.hasCustomOnError());
assertTrue(o.hasCustomOnError());
assertSame(source, (((HasUpstreamPublisher<?>)source.replay())).source());
assertTrue(d.isDisposed());
assertEquals("Scheduler Callable can\'t be null", npe.getMessage()); assertEquals("Scheduler Callable result can\'t be null", npe.getMessage());
assertNull(error.get());
assertTrue(ex.getCause() instanceof InterruptedException);
assertArrayEquals(Arrays.copyOf(expected, i + 1), rs.getValues()); assertArrayEquals(expected, rs.getValues());
assertEquals(1, tc.start); assertEquals(Collections.emptyList(), tc.values); assertTrue(tc.errors.isEmpty()); assertEquals(0, tc.complete); assertEquals(1, tc.start); assertEquals(1, tc.values.get(0).intValue()); assertTrue(tc.errors.isEmpty()); assertEquals(1, tc.complete);
assertTrue(d.isCancelled()); assertEquals(1, tc.start);
assertSame(Maybe.empty(), ((HasUpstreamMaybeSource)(Maybe.<Integer>empty().switchIfEmpty(Single.just(1)))).source() );
assertEquals(1000, to.valueCount());
assertEquals(2, count[0]);
assertFalse(tc.isDisposed()); assertEquals(0, tc.start); assertTrue(tc.values.isEmpty()); assertTrue(tc.errors.isEmpty()); assertFalse(tc.isDisposed()); assertEquals(1, tc.start); assertEquals(1, tc.values.get(0).intValue()); assertTrue(tc.errors.isEmpty());
assertEquals(100, ts.values().size());
assertSame(m, (((HasUpstreamMaybeSource<?>)m.toObservable()).source()));
assertEquals(Arrays.asList(2, 3, 4, 5), list);
assertFalse(o.hasCustomOnError());
assertTrue(o.hasCustomOnError());
assertEquals(Arrays.asList(2, 3, 4, 5), list);
assertFalse(sub1.isDisposed()); assertFalse(sub1.isDisposed()); assertTrue(sub2.isDisposed()); assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage()); assertEquals(errors.toString(), 1, errors.size());
assertEquals(Integer.MAX_VALUE, n);
assertFalse(fs.isDone()); assertFalse(fs.isCancelled()); assertTrue(fs.isDone()); assertTrue(fs.isCancelled());
assertFalse(bs.isDisposed()); assertTrue(bs.isDisposed());
assertTrue(b.get());
assertEquals("Scheduler Callable can\'t be null", npe.getMessage()); assertEquals("Scheduler Callable result can\'t be null", npe.getMessage());
assertFalse(so.isDisposed()); assertTrue(so.isDisposed()); assertTrue(d.isDisposed());
assertTrue(o.hasCustomOnError());
assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() { @Override public ObservableSource<Integer> apply(Integer f) throws Exception { return Observable.empty(); } }));
assertTrue(ex.getCause() instanceof InterruptedException);
assertFalse(ps.hasObservers());
assertEquals("Scheduler Callable can\'t be null", npe.getMessage()); assertEquals("Scheduler Callable result can\'t be null", npe.getMessage());
assertEquals("maxSize > 0 required but it was -99", ex.getMessage());
assertEquals(1, BehaviorProcessor.createDefault(1).take(1).blockingSingle().intValue()); assertEquals(2, BehaviorProcessor.createDefault(2).blockingIterable().iterator().next().intValue()); assertEquals(3, BehaviorProcessor.createDefault(3).blockingNext().iterator().next().intValue());
assertTrue(d.isDisposed());
assertNotNull(sharedPreferences);
assertThat(tested.insert(1,"eee").toString()).isEqualTo("teeeest");
assertThat(builder).isNotNull();
assertThat(progressBar).isNotNull();
assertThat(fragment).isNotNull();
assertThat(view).isNotNull();
assertThat(tested.append("ed").toString()).isEqualTo("tested");
assertThat(context).isNotNull();
assertThat(tested.getFilters()).isEqualTo(filters);
assertThat(editText.getText().toString()).isEqualTo("test");
assertThat(view).isNotNull();
assertThat(view).isNotNull(); assertThat(view.animate()).isEqualTo(viewPropertyAnimator);
assertThat(textView).isNotNull(); assertThat(textView.getText().toString()).isEqualTo("test");
assertThat(button).isNotNull();
assertThat(fragmentManager).isNotNull(); assertThat(fragmentManager.beginTransaction()).isEqualTo(transaction);
assertThat(editText.getText().toString()).isEqualTo("test");
assertThat(tested.charAt(2)).isEqualTo('s');
assertThat(bundle).isNotNull();
assertThat(animator).isNotNull(); assertThat(animator.alpha(anyFloat())).isEqualTo(animator); assertThat(animator.rotation(anyFloat())).isEqualTo(animator);
assertThat(intent).isNotNull();
assertThat(tested.length()).isEqualTo(4);
assertThat(view).isNotNull(); assertThat(view.getResources()).isEqualTo(resources);
assertThat(tested.subSequence(0, 2).toString()).isEqualTo("te");
assertThat(textView).isNotNull(); assertThat(textView.getResources()).isEqualTo(resources);
assertThat(button).isNotNull();
assertThat(builder).isNotNull();
assertThat(fragmentManager).isNotNull();
assertThat(view).isNotNull();
assertThat(tested.toString()).isEqualTo("");
assertThat(button).isNotNull();
assertThat(activity).isNotNull(); assertThat(activity.getApplication()).isEqualTo(application);
assertThat(inflater).isNotNull();
assertThat(view).isNotNull();
assertThat(textView).isNotNull();
assertThat(view).isNotNull();
assertThat(tested.getFilters()).isNotNull();
assertThat(view).isNotNull(); assertThat(view.getAdapter()).isNull(); assertThat(view.getLayoutManager()).isNull(); assertThat(view.getLayoutManager()).isNotNull(); assertThat(view.getAdapter()).isNotNull();
assertThat(activity).isNotNull();
assertThat(application).isNotNull();
assertThat(cardView).isNotNull();
assertThat(tested.replace(0, 1,"R").toString()).isEqualTo("Rest");
assertThat(tested.delete(0,2).toString()).isEqualTo("st");
assertThat(resources).isNotNull(); assertThat(resources.getString(anyInt())).isNotNull(); assertThat(resources.getText(anyInt())).isNotNull();
assertTrue(MacAddress.isBroadcast(mac)); assertFalse(MacAddress.isBroadcast(mac));
assertTrue("L\'encodage SHA-512 a echoue", "e32ef19623e8ed9d267f657a81944b3d07adbb768518068e88435745564e8d4150a0a703be2a7d88b61e3d390c2bb97e2d4c311fdc69d6b1267f05f59aa920e7".equals(result));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue("L\'identifiant n\'a pas ete enregistre", map.containsValue(id)); assertFalse("L\'identifiant a ete conserve", map.containsValue(id));
assertEquals(expResult.getLogin(), result.getLogin()); assertNull(result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertFalse("L\'acceptor contient deja le jeton", this.acceptor.accept(id)); assertTrue("L\'acceptor ne contient pas le jeton", this.acceptor.accept(id));
assertEquals(expResult, result);
assertTrue(result.size() > 0 );
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertTrue("L\'identifiant n\'a pas ete enregistre", map.containsValue(id)); assertTrue("La methode ne confirme pas l\'ajout de l\'identifiant", result); assertFalse("La methode confirme l\'ajout de l\'identifiant", result);
assertNotNull(result);
assertNotNull(result);
assertEquals(expResult, result);
assertNull(bearerToken);
assertEquals("THE_TOKEN", bearerToken);
assertEquals("THE_CUSTOM_TOKEN", bearerToken);
assertNull(bearerToken);
assertEquals(key, keyLocationResolver.resolveKey(signature, emptyList()));
assertEquals("THE_TOKEN", bearerToken);
assertEquals("THE_TOKEN", bearerToken);
assertEquals("THE_COOKIE_TOKEN", bearerToken);
assertNotNull(keyLocationResolver.key); assertEquals(keyLocationResolver.key, keyLocationResolver.resolveKey(signature, emptyList())); assertEquals(keyLocationResolver.key, keyLocationResolver.getJsonWebKey("key1", null).getKey());
assertEquals("THE_TOKEN", bearerToken);
assertNotNull(keyLocationResolver.key); assertEquals(keyLocationResolver.key, keyLocationResolver.resolveKey(encryption, emptyList())); assertEquals(keyLocationResolver.key, ((PublicJsonWebKey) keyLocationResolver.getJsonWebKey("key1", null)).getPrivateKey());
assertEquals("THE_CUSTOM_TOKEN", bearerToken);
assertEquals("", bearerToken);
assertNull(bearerToken);
assertEquals(key, keyLocationResolver.resolveKey(signature, emptyList()));
assertNull(bearerToken);
assertEquals("THE_TOKEN", bearerToken);
assertEquals(key, keyLocationResolver.resolveKey(signature, emptyList()));
assertEquals("THE_TOKEN", bearerToken);
assertEquals("Profile Name", builder.label("Profile Name"));
assertEquals(new ResourceAddress(), result);
assertEquals(AddressTemplate.ROOT, result);
assertNull(at.lastValue()); assertEquals("b", at.lastValue()); assertNull(at.lastValue()); assertEquals("{c}", at.lastValue());
assertEquals(ENGAGE_DATA, ex.data()); assertEquals(ENGAGE_DATA, ex.toString()); assertEquals(NCC_DATA, wr.data()); assertEquals(NCC_DATA, wr.toString());
assertEquals(66, pageInfo.getVisible());
assertEquals(RRD_DEPTH, operation.get(RECURSIVE_DEPTH).asInt());
assertFalse(ModelNodeHelper.failSafeGet(modelNode, null).isDefined());
assertFalse(ModelNodeHelper.failSafeGet(modelNode, "/").isDefined());
assertNull(at.firstValue()); assertEquals("b", at.firstValue()); assertEquals("b", at.firstValue());
assertEquals(PRODUCT, product.evaluate(TEMPLATE));
assertSame(ValidationResult.OK, blacklistValidation.validate(""));
assertTrue(node.isDefined()); assertEquals(bar, node);
assertEquals("", community.evaluate(""));
assertEquals(AddressTemplate.ROOT, result);
assertEquals(expected, result);
assertTrue(operations.isEmpty());
assertEquals(expected, result);
assertEquals("\'First\'", builder.enumeration(singletonList("first"), "and")); assertEquals("\'First\' or \'Second\'", builder.enumeration(asList("first", "second"), "or")); assertEquals("\'First\', \'Second\' and / or \'Third\'", builder.enumeration(asList("first", "second", "third"), "and / or"));
assertEquals(expected, result);
assertFalse(single.hasFilters()); assertSame(FilterValue.EMPTY, single.getFilter("foo"));
assertNull(formItem.getValue()); assertEquals("${foo:bar}", formItem.getExpressionValue()); assertTrue(formItem.isModified()); assertFalse(formItem.isUndefined());
assertEquals("Check Valid Connection SQL", builder.label("check-valid-connection-sql")); assertEquals("Connection URL", builder.label("connection-url")); assertEquals("JNDI Name", builder.label("jndi-name")); assertEquals("URL Selector Strategy Class Name", builder.label("url-selector-strategy-class-name")); assertEquals("Modify WSDL Address", builder.label("modify-wsdl-address")); assertEquals("WSDL Port", builder.label("wsdl-port"));
assertNull(noExpression.getValue()); assertNull(noExpression.getExpressionValue()); assertEquals(modified, noExpression.isModified()); assertEquals(undefined, noExpression.isUndefined()); assertNull(expression.getValue()); assertNull(expression.getExpressionValue()); assertEquals(modified, expression.isModified()); assertEquals(undefined, expression.isUndefined());
assertEquals(expected, result);
assertFalse(path.isEmpty()); assertEquals(1, path.size()); assertTrue(path.isEmpty()); assertEquals(0, path.size());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(LOREM, community.evaluate(LOREM)); assertEquals(LOREM_EXPRESSION, community.evaluate(LOREM_EXPRESSION));
assertEquals(expected, result);
assertTrue(node.isDefined()); assertEquals(foo, node);
assertTrue(results.isEmpty());
assertTrue(results.isEmpty());
assertEquals(2, results.size()); assertEquals("private", results.get(0).name); assertEquals("public", results.get(1).name);
assertFalse(path.isEmpty()); assertEquals(2, path.size());
assertNull(formItem.getValue()); assertEquals("${foo:bar}", formItem.getExpressionValue()); assertEquals(modified, formItem.isModified()); assertEquals(undefined, formItem.isUndefined());
assertNull(Strings.substringAfterLast(null, "/")); assertEquals("", Strings.substringAfterLast("", "/")); assertEquals("", Strings.substringAfterLast("a", "/")); assertEquals("c", Strings.substringAfterLast("a/b/c", "/"));
assertTrue(formItem.requiresValidation()); assertFalse(formItem.requiresValidation()); assertFalse(formItem.requiresValidation()); assertTrue(formItem.requiresValidation());
assertEquals("test-read-only", formItem.getId(Form.State.READONLY)); assertEquals("test-editing", formItem.getId(Form.State.EDITING));
assertEquals(10, pageInfo.getPages()); assertEquals(7, pageInfo.getPages()); assertEquals(5, pageInfo.getPages());
assertEquals("foo", noExpression.getValue()); assertNull(noExpression.getExpressionValue()); assertTrue(noExpression.isModified()); assertFalse(noExpression.isUndefined()); assertEquals("foo", expression.getValue()); assertNull(expression.getExpressionValue()); assertTrue(expression.isModified()); assertFalse(expression.isUndefined());
assertNull(community.evaluate(null));
assertSame(ValidationResult.OK, blacklistValidation.validate(null));
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(OPERATION, ex.getName()); assertEquals(ATTRIBUTE, wr.getName());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(Permission.EXECUTABLE, ex.getPermission()); assertEquals(Permission.WRITABLE, wr.getPermission());
assertEquals(1, pageInfo.getPage()); assertEquals(11, pageInfo.getFrom()); assertEquals(20, pageInfo.getTo());
assertEquals(expected, result);
assertFalse(ModelNodeHelper.failSafeGet(modelNode, "").isDefined());
assertEquals(expected, result);
assertNull(Strings.getDomain(null)); assertEquals("", Strings.getDomain("")); assertEquals("a", Strings.getDomain("a"));
assertFalse(formItem.isDeprecated()); assertTrue(formItem.isDeprecated()); assertFalse(formItem.isDeprecated());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals("foo", noExpression.getValue()); assertNull(noExpression.getExpressionValue()); assertEquals(modified, noExpression.isModified()); assertEquals(undefined, noExpression.isUndefined()); assertEquals("foo", expression.getValue()); assertNull(expression.getExpressionValue()); assertEquals(modified, expression.isModified()); assertEquals(undefined, expression.isUndefined());
assertEquals(expected, result);
assertEquals(expected, result);
assertFalse(localLookupResult.allPresent()); assertTrue(localLookupResult.allPresent());
assertEquals(expected, result);
assertEquals(expected, result);
assertTrue(results.isEmpty());
assertSame(ValidationResult.OK, blacklistValidation.validate(" "));
assertEquals(TEMPLATE, ex.getTemplate()); assertEquals(TEMPLATE, wr.getTemplate());
assertEquals("a=b/c=d", at.getTemplate()); assertEquals("a=b/c=d", at.getTemplate());
assertEquals(expected, result);
assertSame(ValidationResult.OK, blacklistValidation.validate("ok"));
assertEquals(COMMUNITY, community.evaluate(TEMPLATE));
assertFalse(noExpression.isExpressionValue()); assertFalse(noExpression.isExpressionValue()); assertFalse(noExpression.isExpressionValue()); assertFalse(expression.isExpressionValue()); assertFalse(expression.isExpressionValue()); assertTrue(expression.isExpressionValue());
assertEquals("c.a.main", Strings.abbreviateFqClassName("com.acme.main")); assertEquals("c.a.main.Main", Strings.abbreviateFqClassName("com.acme.main.Main")); assertEquals("c.a.l.p.foo.Bar", Strings.abbreviateFqClassName("com.acme.longer.package.foo.Bar"));
assertEquals(expected, result);
assertEquals(1, results.size()); assertEquals("management", results.get(0).name);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertTrue(at.getTemplate().length() == 0);
assertEquals(Target.OPERATION, ex.getTarget()); assertEquals(Target.ATTRIBUTE, wr.getTarget());
assertEquals(expected, result);
assertTrue(single.contains(0)); assertTrue(single.contains(9)); assertTrue(single.contains(10)); assertTrue(single.contains(22)); assertFalse(single.contains(23));
assertFalse(blacklistValidation.validate("foo").isValid()); assertFalse(blacklistValidation.validate("bar").isValid());
assertEquals("Background Validation", builder.label("background-validation")); assertEquals("Enabled", builder.label("enabled"));
assertFalse(Expression.isExpression(null)); assertFalse(Expression.isExpression("")); assertFalse(Expression.isExpression(" ")); assertFalse(Expression.isExpression("foo")); assertTrue(Expression.isExpression("${foo}")); assertTrue(Expression.isExpression("${foo}/bar")); assertTrue(Expression.isExpression("my/${foo}/bar"));
assertFalse(ModelNodeHelper.failSafeGet(modelNode, "a").isDefined()); assertFalse(ModelNodeHelper.failSafeGet(modelNode, "a/b").isDefined()); assertFalse(ModelNodeHelper.failSafeGet(modelNode, "foo/bar/baz").isDefined());
assertArrayEquals(NAMES, results.stream().map(result -> result.name).toArray(String[]::new));
assertEquals("", at.subTemplate(0, 0).getTemplate()); assertEquals("", at.subTemplate(2, 2).getTemplate()); assertEquals("b=c", at.subTemplate(1, 2).getTemplate()); assertEquals("{d}=e/f=g", at.subTemplate(2, 4).getTemplate()); assertEquals(at, at.subTemplate(0, 4));
assertEquals(ex, Constraint.parse(ENGAGE_DATA)); assertEquals(wr, Constraint.parse(NCC_DATA));
assertEquals(expected, result);
assertTrue(logger.error());
assertEquals(4, mappings.size()); assertEquals("STARTUP", mappings.get("load")); assertArrayEquals(new String[] {"a"}, (String[]) mappings.get("loadbefore")); assertArrayEquals(new String[] {"b"}, (String[]) mappings.get("softdepend")); assertArrayEquals(new String[] {"c"}, (String[]) mappings.get("depend"));
assertTrue(parser.names.isEmpty());
assertEquals(new Vector(-1.27223251272018, -1.8388649851410237, 3.0), Vectors.rotateAroundZAxis(vector, 3));
assertEquals(new Vector(-0.5666324724208438, 2.0, -3.111097497861204), Vectors.rotateAroundYAxis(vector, 3));
assertEquals("old", entry.setValue("new")); assertEquals("new", entry.value);
assertTrue(parser.names.isEmpty());
assertEquals(builder.lore, List.of("A", "B", "C"));
assertArrayEquals(new String[] {"Pante"}, (String[]) mapping.get("authors")); assertEquals("description", mapping.get("description"));
assertEquals(4, mappings.size()); assertEquals("POSTWORLD", mappings.get("load")); assertArrayEquals(EMPTY, (String[]) mappings.get("loadbefore")); assertArrayEquals(EMPTY, (String[]) mappings.get("softdepend")); assertArrayEquals(EMPTY, (String[]) mappings.get("depend"));
assertEquals(null, command.getName()); assertEquals("/null", command.getUsage()); assertEquals(plugin, command.getPlugin()); assertEquals(dispatcher, command.dispatcher); assertEquals(List.of(), command.getAliases());
assertEquals(Optional.empty(), exceptional.some(0, TimeUnit.MINUTES));
assertEquals("expected", maybe.some().orElseThrow());
assertNotNull(writer);
assertEquals(new Vector(1.6947429641668934, 2.186059878281388, 2.519719923716756), Vectors.rotate(vector, 3, 3, 3));
assertEquals(VALUE, WEAK.orThrow());
assertTrue(literal instanceof LiteralCommandNode<?>); assertEquals("a", literal.getName()); assertSame(Mapper.NONE, literal.getCommand()); assertSame(Mapper.TRUE, literal.getRequirement());
assertEquals(4, point.set(Axis.X, 4).getX(), 0.00000001); assertEquals(5, point.set(Axis.Y, 5).getY(), 0.00000001); assertEquals(6, point.set(Axis.Z, 6).getZ(), 0.00000001);
assertEquals("value", CONTEXT.getOptionalArgument("argument", String.class, "value"));
assertSame(SpigotMapper.CLIENT_SIDE.get(ClientSuggestionProvider.ENTITIES), mapper.suggestions(Argument.of("a", PlayerType.WORD).suggests(ClientSuggestionProvider.ENTITIES).build()));
assertEquals(RootCommandNode.class, mapper.map(new RootCommandNode<>()).getClass());
assertTrue(set.remove("app")); assertEquals(2, set.size()); assertFalse(set.remove("app"));
assertEquals("1.15", parser.environment.mappings.get("api-version"));
assertEquals( "Unknown player or selector: invalid", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("invalid"))).getRawMessage().toString() );
assertEquals("Invalid command: \'a\', root already contains a child with the same name", assertThrows(IllegalArgumentException.class, () -> root.addChild(Literal.of("a").build())).getMessage() );
assertEquals(6, processor.parsers.size());
assertEquals( "Unknown particle: invalid", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("invalid"))).getRawMessage().toString() );
assertEquals( "Unknown enchantment: invalid", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("invalid"))).getRawMessage().toString() );
assertTrue(command.execute(sender, "command", "a", "b"));
assertEquals(builder.lore, List.of("A", "B", "C"));
assertEquals("b", argument.getName()); assertSame(unmapped.getType(), argument.getType()); assertSame(Mapper.NONE, argument.getCommand()); assertSame(Mapper.TRUE, argument.getRequirement()); assertNull(argument.getCustomSuggestions());
assertEquals(PluginParserTest.class.getName(), environment.mappings.get("main")); assertEquals("name1", environment.mappings.get("name")); assertEquals("1.0.0", environment.mappings.get("version"));
assertEquals(new Vector(1.0, -2.4033450173804924, -2.687737473681602), Vectors.rotateAroundXAxis(vector, 3));
assertEquals(1, permissions.size()); assertEquals(1, permission.size()); assertEquals("op", permission.get("default"));
assertEquals(Constructor.class.getName(), parser.stringify(Constructor.class));
assertTrue(command.execute(sender, "command", "a", "b"));
assertEquals("1.15", environment.mappings.get("api-version"));
assertEquals("\\"something\\"", Messages.quote("something"));
assertEquals(new Point(null, 3, -2, -1), Vectors.rotate(position, 90, -180));
assertEquals(item.getAmount(), 10); assertEquals(item.getItemMeta(), meta);
assertEquals(ArgumentUUID.class, UUIDType.of().mapped().getClass());
assertEquals(task, scheduler.decorateTask(runnable, task));
assertTrue(point.rotation(true).rotation());
assertEquals(new SimpleEntry<>(null, "warning"), environment.warnings.get(0)); assertTrue(environment.errors.isEmpty());
assertEquals(new Point(2, -4, -6).relative(Axis.X, true).relative(Axis.Y, true).relative(Axis.Z, true).rotation(true), position);
assertEquals("default", CONTEXT.getOptionalArgument("invalid", String.class, "default"));
assertEquals(1, argument.getChildren().size()); assertSame(this.child, argument.getChild("child"));
assertEquals("", mapped.getName()); assertEquals(0, empty.getChildren().size()); assertSame(empty, mapped.getChild("c").getRedirect()); assertSame(mapped.getChild("c"), same);
assertNotNull(type.parse(new StringReader("Pante")));
assertFalse(processor.process(Set.of(), environment));
assertEquals(new Point(1, 2, 3), point);
assertEquals(1, permissions.size()); assertEquals(3, permission.size()); assertEquals("desc", permission.get("description")); assertEquals("false", permission.get("default")); assertEquals(1, children.size()); assertTrue(children.get("a.b.c"));
assertTrue(logger.error()); assertFalse(logger.error());
assertEquals(2, argument.getChildren().size()); assertSame(literal, argument.getChild("child")); assertEquals(2, extensive.getChildren().size());
assertEquals(type, typing.type(int.class));
assertEquals("expected", maybe.some(1, TimeUnit.MINUTES).orElseThrow());
assertEquals(command, entry.getKey()); assertEquals(Label.ALIAS, entry.getValue());
assertEquals( "Unknown material: invalid", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("invalid"))).getRawMessage().toString() );
assertSame(proxied, map.map());
assertNotNull(processor.processor); assertNotNull(processor.yaml);
assertEquals(new Vector(1, -2, -3), Vectors.rotate((v, x, y, z) -> v.setX(x).setY(y).setZ(z), vector, 1, 2, 3, 90, 180));
assertEquals(0, root.getChildren().size());
assertSame(plugin, command.getPlugin());
assertEquals(1, argument.getChildren().size()); assertSame(this.child, child); assertEquals(2, child.getChildren().size());
assertTrue(parser.names.isEmpty());
assertEquals("Null keys are not permitted in a trie", assertThrows(NullPointerException.class, () -> trie.get(null)).getMessage());
assertTrue(file.exists());
assertEquals("\\"something\\" why", Messages.format("something", "why"));
assertSame(SpigotMapper.TRUE, mapper.requirement(Literal.of("a").requires(null).build()));
assertEquals( "Unknown player: invalid", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("invalid"))).getRawMessage().toString() );
assertNull(entry.child(' '));
assertEquals(0.4636476090008061, Vectors.angleToXAxis(vector), 0.0001);
assertEquals(Material.CACTUS, type.parse(new StringReader("CACTUS")));
assertEquals("expected", maybe.value());
assertEquals(List.of("flint_and_steel", "tnt"), type.getExamples());
assertEquals(1, tokens.size()); assertEquals(location, token.location); assertEquals("<argument>", token.literal); assertEquals("argument", token.lexeme);
assertEquals(new SimpleEntry<>(null, "error"), environment.errors.get(0)); assertTrue(environment.warnings.isEmpty());
assertEquals("a", maybe.value());
assertNull(exceptional.value());
assertEquals("literal", command.getName()); assertEquals("literal", command.getUsage()); assertEquals(plugin, command.getPlugin()); assertEquals(dispatcher, command.dispatcher); assertEquals(List.of("l"), command.getAliases());
assertTrue(populated.isEmpty()); assertEquals(5, populated.modifications); assertNull(populated.get("app"));
assertEquals(4, root.getChildren().size()); assertEquals(literal, root.removeChild("a")); assertEquals(0, root.getChildren().size());
assertEquals(argument.getType(), mapper.type(argument));
assertEquals(2, results.size());
assertEquals( "Unknown world: \\"something\\" at position 9: something<--[HERE]", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("something"))).getMessage() );
assertEquals(mirror, typing.erasure(int.class));
assertEquals(Set.of(Command.class), parser.annotations());
assertEquals(1, mapping.size()); assertEquals(1, commands.size()); assertEquals(5, command.size()); assertArrayEquals(new String[] {"a", "b"}, (String[]) command.get("aliases")); assertEquals("desc", command.get("description")); assertEquals("syntax", command.get("usage")); assertEquals("a.b", command.get("permission")); assertEquals("message", command.get("permission-message"));
assertEquals(Set.of(element), processor.annotated(Plugin.class).collect(toSet()));
assertEquals(List.of("@a", "@r", "\\"Pante, Kevaasaurus\\""), type.getExamples());
assertNull(map.register(literal));
assertNotNull(dispatcher.dispatcher.getRoot().getChild("a"));
assertEquals("name", project.name); assertEquals("version", project.version); assertEquals("description", project.description); assertEquals("url", project.url); assertEquals("1.15-R0.1-SNAPSHOT", project.api); assertEquals(List.of("bob", "bobby"), project.authors);
assertTrue(command.execute(sender, "command", "a", "b")); assertEquals("/command a b", reader.getString()); assertEquals("command a b", reader.getRemaining());
assertEquals("literal", command.getName()); assertEquals("literal", command.getUsage()); assertEquals(plugin, command.getPlugin()); assertEquals(dispatcher, command.dispatcher); assertEquals(List.of("l"), command.getAliases());
assertArrayEquals(new String[] {"Pante"}, (String[]) mappings.get("authors")); assertEquals("description", mappings.get("description"));
assertTrue(assertThrows(UncheckedIOException.class, () -> yaml.handle(exception)).getCause() instanceof IOException);
assertFalse(processor.process(Set.of(), round));
assertNull(root.getChild("a")); assertNotNull(root.getChild("test:a")); assertNotNull(root.getChild("a1")); assertNotNull(root.getChild("test:a1"));
assertSame(proxied, map.map());
assertEquals("\\"something\\" why, how", Messages.format("something", "why", "how"));
assertTrue(parser.names.isEmpty());
assertNull(mapper.suggestions(Argument.of("a", PlayerType.WORD).build()));
assertNull(exceptional.value(0, TimeUnit.MINUTES));
assertEquals(mirror.toString(), parser.stringify(type));
assertSame(map, map.map());
assertEquals("project_name", environment.mappings.get("name")); assertEquals("1.0.0", environment.mappings.get("version"));
assertNotNull(processor.annotations); assertEquals( Set.of( API.class, Command.class, Commands.class, Information.class, Load.class, Permission.class, Permissions.class, Plugin.class ), annotations );
assertTrue(set.contains("lol")); assertFalse(set.contains("lo"));
assertTrue(point.relative(Axis.X, true).relative(Axis.X));
assertEquals( "\'@a\' cannot be used in a list of players.", assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader("\\"@a, Pante\\""))).getRawMessage().toString() );
assertNotNull(root.getChild("a")); assertNotNull(root.getChild("test:a")); assertNotNull(root.getChild("a1")); assertNotNull(root.getChild("test:a1"));
assertEquals(command, map.unregister("literal")); assertEquals(Map.of("b", other), commands);
assertEquals( "Cannot make " + sender + " a vanilla command listener", assertThrows(IllegalArgumentException.class, () -> Exceptions.from(sender)).getMessage() );
assertTrue(parser.names.isEmpty()); assertEquals(5, results.size()); assertArrayEquals(new String[] {"a", "b"}, (String[]) results.get("aliases")); assertEquals("desc", results.get("description")); assertEquals("syntax", results.get("usage")); assertEquals("a.b", results.get("permission")); assertEquals("message", results.get("permission-message"));
assertSame(map, map.map());
assertSame(proxied, map.map());
assertSame(map, map.map());
assertEquals(new SimpleEntry<>(Object.class, "warning"), environment.warnings.get(0)); assertTrue(environment.errors.isEmpty());
assertEquals(3, values.size()); assertTrue(values.contains("app_value")); assertTrue(values.contains("apple_value")); assertTrue(values.contains("application_value"));
assertEquals(2, trie.size()); assertEquals(2, trie.modifications); assertEquals("value1", trie.get("key1")); assertEquals("value2", trie.get("key2"));
assertTrue(command.execute(sender, "command", "a", "b"));
assertEquals(writer, yaml.writer());
assertEquals("", project.name); assertEquals("", project.version); assertTrue(project.authors.isEmpty()); assertEquals("", project.api); assertEquals("", project.description); assertEquals("", project.url);
assertEquals(new Vector(1, -2, -3), Vectors.rotate(vector, pivot));
assertTrue(loader instanceof URLClassLoader);
assertEquals(Particle.BLOCK_CRACK, type.parse(new StringReader("BLOCK_CRACK")));
assertEquals(Optional.empty(), exceptional.some());
assertEquals("value", CONTEXT.getOptionalArgument("argument", String.class));
assertEquals(enchantment, type.parse(new StringReader("CHANNELING")));
assertEquals(0, lock.getHoldCount());
assertTrue(mapper.requirement(null).test(null));
assertSame(dispatcher, ((SpigotMap) dispatcher.getRoot().map()).dispatcher);
assertEquals("Value was reclaimed", assertThrows(NoSuchElementException.class, () -> Weak.empty().orThrow()).getMessage());
assertEquals(List.of("Bob", "Pante"), type.getExamples());
assertTrue(environment.mappings.isEmpty());
assertEquals(new SimpleEntry<>(Object.class, "error"), environment.errors.get(0)); assertTrue(environment.warnings.isEmpty());
assertEquals(3, argument.getChildren().size()); assertSame(this.extensive, child); assertEquals(2, child.getChildren().size()); assertEquals(2, child.aliases().size()); assertEquals(2, child.aliases().get(0).getChildren().size()); assertTrue(((Aliasable<String>) child.aliases().get(0)).aliases().isEmpty());
assertEquals(List.of(Command.class), actual);
assertEquals(List.of("barrier", "bubble_column_up"), type.getExamples());
assertSame(execution, literal.getCommand());
assertEquals(new Point(null, 3, -2, -1), Vectors.rotate(position, pivot));
assertEquals("1.13", environment.mappings.get("api-version"));
assertEquals(round, processor.round);
assertEquals(VALUE.hashCode(), Weak.of("test").hashCode());
assertEquals(task, scheduler.decorateTask(runnable, task)); assertSame(task, runnable.future);
assertNull(CONTEXT.getOptionalArgument("invalid", String.class));
assertNull(mapper.suggestions(null));
assertEquals(1, root.getChildren().size()); assertNotNull(root.getChild("a").getChild("child"));
assertEquals(1, permissions.size()); assertEquals(3, permission.size()); assertEquals("desc", permission.get("description")); assertEquals("false", permission.get("default")); assertEquals(1, children.size()); assertTrue(children.get("a.b.c"));
assertTrue(iterator.next() instanceof TrieEntry<?>);
assertFalse(processor.process(Set.of(), round));
assertEquals(0, mapper.execution(null).run(null));
assertNull(map.unregister("something"));
assertEquals("lol", string);
assertEquals( "Unsupported command, \'" + command.getName() + "\' of type: " + command.getClass().getName(), assertThrows(IllegalArgumentException.class, () -> mapper.map(command)).getMessage() );
assertEquals(2, prefixed.size()); assertTrue(prefixed.contains("apple")); assertTrue(prefixed.contains("application"));
assertFalse(processor.process(Set.of(), round));
assertNotNull(root.getChild("a")); assertNotNull(root.getChild("test:a")); assertNull(root.getChild("a1")); assertNull(root.getChild("test:a1"));
assertEquals(1, tokens.size()); assertEquals(location, token.location); assertEquals("a|b|b", token.literal); assertEquals("a", token.lexeme); assertEquals(Set.of("b"), token.aliases);
assertEquals(0, runnable.times()); assertEquals(0, runnable.times());
assertEquals(declared, typing.specialize(int.class, String.class));
assertEquals(1, tokens.size()); assertEquals(location, token.location); assertEquals("a|b|c", token.literal); assertEquals("a", token.lexeme); assertEquals(Set.of("b", "c"), token.aliases);
assertEquals(List.of("my_fancy_world", "\\"Yet another world\\""), type.getExamples());
assertEquals(List.of("arrow_damage", "channeling"), type.getExamples());
assertEquals(new Vector(1, -2, -3), Vectors.rotate(vector, 90, -180));
assertEquals(new Vector(1, 2, 3), vector);
assertTrue(set.add("lol")); assertFalse(set.add("lol"));
assertEquals(3, keys.size()); assertTrue(keys.contains("app")); assertTrue(keys.contains("apple")); assertTrue(keys.contains("application"));
assertEquals(quoted, type.parse(new StringReader("\\"world name\\"")));
assertFalse(WEAK.equals("string"));
assertEquals(3, argument.getChildren().size()); assertSame(extensive, argument.getChild("child")); assertEquals(2, extensive.getChildren().size());
assertEquals("expected", maybe.value(1, TimeUnit.MINUTES));
assertEquals(VALUE, WEAK.orThrow(RuntimeException::new));
assertEquals(id, UUIDType.of().parse(new StringReader(id.toString())));
assertEquals(bool, mapper.type(Argument.of("test", bool).build())); assertEquals(PlayerType.WORD, mapper.type(Argument.of("test", new PlayerType()).build()));
assertEquals(3, root.getChildren().size()); assertNull(root.getChild("a").getChild("child"));
assertEquals("alias", alias.getName()); assertTrue(alias.isAlias()); assertEquals(literal.getCommand(), alias.getCommand()); assertEquals(1, alias.getChildren().size()); assertTrue(literal.aliases().contains(alias));
assertEquals(2, argument.getChildren().size()); assertSame(this.literal, argument.getChild("child"));
assertFalse(filter);
assertEquals(0, actual.size());
assertEquals(true, buffer.isEmpty());
assertTrue(ex.getCause() instanceof RetriesExhaustedException);
assertEquals(1484802359000L, Time.toMilliseconds(1484802359000L));
assertEquals( "http transport call failed because \\"expected failure\\" payload response \\"resp\\"", e.getCause().getMessage());
assertEquals(expected, result);
assertEquals(expectedJson, actualJson);
assertEquals(expectedJson, actualJson);
assertEquals(expected, captor.getValue());
assertEquals("a_string", spec.interpret("a_string"));
assertEquals(1, devent.payload.size()); assertEquals("?foo=bar&baz=qux", devent.getFieldAsString("foo"));
assertEquals(expectedJson, actualJson);
assertEquals("unable to find value for partition \'foo\'", e.getMessage());
assertEquals("2017-01-19 05:05:59", spec.interpret("1484802359000"));
assertNotNull(devent.getFieldAsString(path)); assertFalse(opMatch.test(ievent)); assertTrue(opFail.test(ievent));
assertEquals(parser.parse(expectedOutput), devent.payload);
assertEquals( "http transport call failed because \\"expected failure\\" payload response \\"gzip resp\\"", e.getCause().getMessage());
assertEquals(expected, result);
assertEquals(1588589101000l, ievent.getEventTime());
assertEquals(expected, result);
assertEquals(0, DummyTransportHelper.BufferedTransporter.output.size());
assertEquals("foo", actual); assertEquals(false, buffer.isEmpty());
assertEquals("bar", payload.get("foo").getAsString()); assertEquals("b", payload.get("a").getAsString());
assertEquals("static", spec.interpret(""));
assertEquals(expectedJson, actualJson);
assertEquals("2017-01-19 05:05:00", spec.interpret("1484802359000"));
assertEquals(1, DummyTransportHelper.BufferedTransporter.output.size());
assertEquals(1484802359000L, Time.toMilliseconds(1484802359L));
assertEquals("foo", actual); assertEquals(true, buffer.isEmpty());
assertEquals("test i am", event.getField("foo"));
assertEquals(expected, ievent.getPartitions());
assertEquals("unable to find value for partition \'foo\'", e.getMessage());
assertEquals(expectedJsonObject, actualJsonObject);
assertEquals(1484802359000L, Time.toMilliseconds(1484802359000000000L));
assertEquals(0, DummyTransportHelper.BufferedTransporter.output.size());
assertEquals("foo", actual); assertEquals(true, buffer.isEmpty());
assertEquals("2017-01-19 05:05:59", spec.interpret("1484802359"));
assertTrue(devent.payload.toString().contains("\\"timestamp\\":1.522686301055E9"));
assertEquals(1, devent.payload.size()); assertEquals("?foo=bar&baz=qux", devent.getFieldAsString("foo"));
assertEquals(null, spec.interpret("")); assertEquals(null, spec.interpret(null));
assertEquals("foo", actual); assertEquals(false, buffer.isEmpty());
assertEquals(1, DummyTransportHelper.BufferedTransporter.output.size());
assertEquals(1588589101480l, ievent.getEventTime());
assertEquals("foo bar\\n", actual);
assertEquals("junk\\n", allWrittenLines);
assertFalse(filter);
assertEquals(2, devent.payload.size()); assertEquals("?foo=bar&baz=qux", devent.getFieldAsString("foo")); assertEquals("bar=(abc)", devent.getFieldAsString("bar"));
assertEquals(2, payload.size()); assertEquals(null, payload.get("foo")); assertEquals("qux", payload.get("baz").getAsString()); assertEquals("b", payload.get("a").getAsString());
assertEquals(1484802359000L, Time.toMilliseconds(1484802359000000L));
assertEquals( "http transport call failed because \\"expected failure\\" payload response \\"resp\\"", e.getCause().getMessage());
assertEquals(expectedJsonObject, actualJsonObject);
assertEquals(1504728473000l, ievent.getEventTime());
assertEquals(1, devent.payload.size()); assertEquals("?foo=bar&baz=qux", devent.getFieldAsString("foo"));
assertEquals(true, buffer.isEmpty());
assertNotNull(devent.getFieldAsString(path)); assertTrue(opMatch.test(ievent)); assertFalse(opFail.test(ievent));
assertEquals("a_string", spec.interpret("a_string"));
assertEquals(parser.parse(expectedOutput), devent.payload);
assertEquals(1484802359000L, Time.toMilliseconds(1484802L));
assertEquals(2, actual.size()); assertTrue(expected.containsAll(actual));
assertFalse(filter);
assertEquals("test i am", event.getField("foo"));
assertEquals(2, payload.size()); assertEquals(null, payload.get("foo")); assertEquals("qux", payload.get("baz").getAsString()); assertEquals("b", payload.get("a").getAsString());
assertEquals(expected, result);
assertThat(isDuplicate).isFalse(); assertThat(isDuplicate).isTrue(); assertThat(isDuplicate).isFalse(); assertThat(isDuplicate).isTrue();
assertThat(githubRepo.getName()).isEqualTo("webmagic");
assertThat(page.isDownloadSuccess()).isFalse();
assertThat(name).isEqualTo("json");
assertEquals("/db/mycollection", request.getUnmappedRequestUri()); assertEquals("/", request.getUnmappedRequestUri()); assertEquals("/", request.getUnmappedRequestUri()); assertEquals("/data", request.getUnmappedRequestUri()); assertEquals("/db/coll", request.getUnmappedRequestUri()); assertEquals("/db/coll/doc", request.getUnmappedRequestUri()); assertEquals("/db/coll", request.getUnmappedRequestUri());
assertEquals(true, PluginUtils.requiresContent(plugin));
assertEquals(expResult, result);
assertEquals(false, PluginUtils.requiresContent(plugin));
assertEquals(InitPoint.BEFORE_STARTUP, PluginUtils.initPoint(plugin));
assertEquals("/testDefaultPlugin", PluginUtils.defaultURI(plugin));
assertEquals(InitPoint.AFTER_STARTUP, PluginUtils.initPoint(plugin));
assertNull(result);
assertArrayEquals(expected, PluginUtils.dontIntercept(plugin));
assertArrayEquals(expected, PluginUtils.dontIntercept(plugin));
assertTrue(MetricsInstrumentationInterceptor.isFilledAndNotMetrics("foobar")); assertTrue(MetricsInstrumentationInterceptor.isFilledAndNotMetrics("rainbow")); assertFalse(MetricsInstrumentationInterceptor.isFilledAndNotMetrics("_metrics")); assertFalse(MetricsInstrumentationInterceptor.isFilledAndNotMetrics("")); assertFalse(MetricsInstrumentationInterceptor.isFilledAndNotMetrics(" ")); assertFalse(MetricsInstrumentationInterceptor.isFilledAndNotMetrics(null));
assertNotNull(dbo); assertTrue(dbo.isDocument()); assertEquals(DAOUtils.validContent(dbo), dbo);
assertTrue(result.isPresent()); assertEquals(Integer.valueOf(1), result.get());
assertEquals(InterceptPoint.REQUEST_AFTER_AUTH, PluginUtils.interceptPoint(plugin));
assertEquals("/test", PluginUtils.defaultURI(plugin));
assertEquals(expResult, result);
assertEquals(InterceptPoint.REQUEST_BEFORE_AUTH, PluginUtils.interceptPoint(plugin));
assertEquals("/db/mycollection/x", request.getUnmappedRequestUri()); assertEquals("/x", request.getUnmappedRequestUri()); assertEquals("/db/x", request.getUnmappedRequestUri()); assertEquals("/db/coll/x", request.getUnmappedRequestUri());
assertEquals(expResult, result);
assertSame(factory, blueTape.factory); assertSame(view, blueTape.view);
assertSame(factory, blueTape.factory); assertSame(view, blueTape.view);
assertTrue(bindingFunction instanceof TextChangedBindingFunction);
assertThat(type).isEqualTo(Boolean.class);
assertThat(preconditions).isNotNull();
assertThat(prefser.size()).isEqualTo(3); assertThat(prefser.size()).isEqualTo(0);
assertThat(prefser.size()).isEqualTo(3); assertThat(prefser.size()).isEqualTo(2); assertThat(prefser.size()).isEqualTo(0);
assertThat(prefser.contains(givenKey)).isTrue(); assertThat(prefser.contains(givenKey)).isFalse();
assertThat(prefser.contains(givenKey)).isTrue(); assertThat(prefser.contains(givenKey)).isFalse();
assertNotNull(content); assertTrue(content.isEmpty());
assertNotNull(referrers); assertTrue(referrers.isEmpty());
assertNotNull(gauges); assertTrue(gauges.isEmpty());
assertNotNull(settings); assertEquals(true, settings.userHasAgreedToLicense());
assertEquals(false, settings.userHasAgreedToLicense()); assertEquals(true, settings.userHasAgreedToLicense());
assertNotNull(transaction2); assertNotSame(transaction1, transaction2); assertEquals(null, transaction1.getCategoryName()); assertEquals("A Category", transaction2.getCategoryName());
assertEquals(transaction1, transaction); assertEquals(transaction1.getId(), transaction.getId()); assertEquals("a category", transaction.getCategoryName());
assertFalse(encryptorService.isConfigured()); assertTrue(encryptorService.isConfigured());
assertNotNull(response); assertEquals(204, response.getResponseCode());
assertEquals(ImmutableList.of(), normalizer.normalize(ImmutableList.of()));
assertNotNull(service.load());
assertEquals("one", reader.readNextNonBlankLine()); assertEquals("two", reader.readNextNonBlankLine()); assertEquals(null, reader.readNextNonBlankLine());
assertNotNull(eula); assertFalse(Strings.isNullOrEmpty(eula.getText())); assertTrue(eula.getText().contains("Apache License"));
assertNotNull(new Transactions().getTransactions());
assertNotNull(matchRule); assertEquals("abc", matchRule.getPattern()); assertEquals("MatchRule{pattern=abc}", matchRule.toString());
assertEquals("GET", request.getHttpMethod()); assertEquals(null, request.getEntity()); assertEquals(requestPath, request.getPath());
assertEquals(0, comparator.compare(summary1, summary1)); assertEquals(0, comparator.compare(summary2, summary2)); assertEquals(1, comparator.compare(summary1, summary2)); assertEquals(-1, comparator.compare(summary2, summary1));
assertNotNull(response); assertEquals(200, response.getResponseCode()); assertEquals("{\\"applicationName\\":\\"" + GreenBeans.APP_NAME + "\\",\\"copyrightNotice\\":\\"Copyright (c) 2015, " + currentYear + " David Green. All rights reserved.\\"}", response.getEntity());
assertNotSame(transactions, transactions3);
assertEquals("Monthly Expenses By Category", expensesByCategory.getTitle()); assertNotNull(months); assertEquals(2, months.size()); assertEquals("January 2015", months.get(0).getName()); assertFalse(months.get(0).getCategories().isEmpty()); assertEquals("March 2015", months.get(1).getName()); assertFalse(months.get(1).getCategories().isEmpty());
assertEquals(transactions, categorized); assertEquals(null, categorized.get(0).getCategory());
assertSame(data2, configurationService.retrieve());
assertNotNull(savedCategories); assertEquals(2, savedCategories.getCategories().size()); assertNotNull(savedCategories.getCategoryByName("B")); assertNotNull(savedCategories.getCategoryByName("A"));
assertNotNull(category2); assertNotSame(category, category2); assertEquals(category.getName(), category2.getName()); assertEquals(ImmutableList.of(), category.getMatchRules()); assertEquals(ImmutableList.of(rule), category2.getMatchRules()); assertEquals(ImmutableList.of(rule, rule2), category2.withMatchRule(rule2).getMatchRules());
assertEquals(CategoriesTypeAdapter.class, gson.getAdapter(Categories.class).getClass());
assertEquals("one", reader.readLine()); assertEquals("two", reader.readLine()); assertEquals(null, reader.readLine()); assertEquals(null, reader.readLine());
assertEquals("a b", match.getVariables().get("two")); assertEquals(" c", match.getVariables().get("three"));
assertFalse(service.isInitialized()); assertTrue(service.isInitialized());
assertEquals(null, invoker.convert(String.class, ""));
assertSame(t1, transactions.byId(t1.getId())); assertSame(t2, transactions.byId(t2.getId())); assertEquals(null, transactions.byId("not here"));
assertNotSame(transaction1, transaction2); assertEquals(category, transaction2.getCategory()); assertEquals(null, transaction1.getCategory());
assertEquals("January 2015", detailsForMonth.getName()); assertEquals(2, detailsForMonth.getCategories().size()); assertEquals("Fries", categorySummary.getName()); assertEquals(-1500L, categorySummary.getAmount()); assertEquals("Burgers", categorySummary.getName()); assertEquals(102300L, categorySummary.getAmount());
assertEquals(ImmutableList.of(transaction1, transaction2), normalizer.normalize(ImmutableList.of(transaction1, transaction2)));
assertNotNull(about); assertEquals("Green Beans", about.getApplicationName()); assertEquals("Copyright (c) 2015, " + currentYear + " David Green. All rights reserved.", about.getCopyrightNotice());
assertFalse(current.userHasAgreedToLicense()); assertTrue(current.userHasAgreedToLicense());
assertEquals(null, parameters.get("a"));
assertNull(categories.getCategoryByName("nope")); assertEquals(category1, categories.getCategoryByName("a")); assertEquals(category1, categories.getCategoryByName("A"));
assertTrue(settings.get().getEncryptorSettings().validateMasterPassword("1234"));
assertSame(invoker, serviceLocator.getWebInvoker());
assertSame(data, configurationService.retrieve()); assertSame(data, configurationService.retrieve());
assertEquals(ImmutableList.of(transaction1, transaction2), normalizer.normalize(ImmutableList.of(transaction1, transaction2)));
assertEquals(TransactionsTypeAdapter.class, gson.getAdapter(Transactions.class).getClass());
assertEquals(System.getProperty("user.home") + "/Library/Application Support/GreensOpinionFinance", file.getPath()); assertEquals(System.getProperty("user.home") + "\\\\AppData\\\\Roaming\\\\GreensOpinionFinance", file.getPath()); assertTrue(file.getParentFile().exists()); assertTrue(file.getParentFile().isDirectory());
assertTrue(category.matches(MockTransaction.create("2015-01-01", "aaabc", 123))); assertTrue(category.matches(MockTransaction.create("2015-01-01", "def", 123))); assertFalse(category.matches(MockTransaction.create("2015-01-01", "ghi", 123))); assertFalse(new Category("nope").matches(MockTransaction.create("2015-01-01", "def", 123)));
assertEquals(transactions, categorized); assertEquals(null, categorized.get(2).getCategory()); assertEquals(null, categorized.get(3).getCategory());
assertEquals("February 2015", transactionsForMonth.getName()); assertEquals(1, transactionsForMonth.getTransactions().size());
assertSame(encryptor, service.getEncryptor()); assertSame(encryptor2, service.getEncryptor());
assertEquals("test it yeah!", handler.invoke(ImmutableMap.of("message", "test it yeah!")));
assertTrue(settings.get().getEncryptorSettings().validateMasterPassword("1234")); assertTrue(settings.get().getEncryptorSettings().validateMasterPassword("5678"));
assertNotNull(list); assertEquals(3, list.size()); assertEquals("a", list.get(0).getName()); assertEquals("B", list.get(1).getName()); assertEquals("c", list.get(2).getName());
assertEquals(500, response.getResponseCode()); assertEquals("{\\"errorCode\\":\\"NullPointerException\\",\\"message\\":\\"test\\"}", response.getEntity());
assertEquals(ImmutableList.of(transaction3), normalizer.normalize(ImmutableList.of(transaction1, transaction2, transaction3)));
assertNotNull(response); assertEquals(404, response.getResponseCode()); assertEquals("{\\"errorCode\\":\\"NotFoundException\\",\\"message\\":\\"Not found: GET /not-present\\"}", response.getEntity());
assertFalse(encryptorService.isInitialized()); assertTrue(encryptorService.isInitialized());
assertEquals(ImmutableList.of(), categories.getCategories());
assertEquals(ImmutableList.of(transaction0, transaction3), normalizer.normalize(ImmutableList.of(transaction0, transaction1, transaction2, transaction3)));
assertEquals("one", reader.peekLine()); assertEquals("one", reader.peekLine()); assertEquals("one", reader.readLine()); assertEquals("two", reader.peekLine()); assertEquals("two", reader.readLine()); assertEquals(null, reader.readLine()); assertEquals(null, reader.readLine());
assertEquals(ImmutableList.of(matchRule), category.getMatchRules());
assertEquals(rules, category.getMatchRules());
assertNotNull(transaction2); assertNotSame(transaction1, transaction2); assertEquals("test12345", transaction2.getId()); assertEquals(transaction1, transaction2);
assertNotNull(savedCategories); assertEquals(ImmutableList.of(), savedCategories.getCategories());
assertNotNull(months); assertEquals(2, months.size());
assertSame(data, configurationService.retrieve()); assertSame(data, configurationService.retrieve());
assertEquals(ImmutableList.of(category1, category2), categories.getCategories());
assertNotNull(copyWithReplacement); assertNotSame(transactions, copyWithReplacement); assertSame(t3, copyWithReplacement.byId(t3.getId())); assertSame(t1, transactions.byId(t1.getId())); assertEquals(ImmutableList.of(t1, t2), transactions.getTransactions()); assertEquals(ImmutableList.of(t3, t2), copyWithReplacement.getTransactions());
assertEquals(0, m1.compareTo(m1));
assertEquals(ImmutableList.of(t1, t2), transactions.getTransactions());
assertEquals("February 2015", detailsForMonth.getName()); assertEquals(1, detailsForMonth.getCategories().size()); assertEquals("Uncategorized", categorySummary.getName()); assertEquals(-12345L, categorySummary.getAmount());
assertNotNull(response); assertEquals(Status.NO_CONTENT.getStatusCode(), response.getResponseCode());
assertFalse(encryptorService.isInitialized()); assertTrue(encryptorService.isInitialized());
assertEquals(204, response.getStatus());
assertEquals(201, response.getStatus());
assertEquals(200, response.getStatus()); assertEquals(1, resource.getContents().size()); assertEquals("User", u1.eClass().getName()); assertEquals("u3", u1.eGet(u1.eClass().getEStructuralFeature("name")));
assertEquals(1, resource.getContents().size()); assertEquals("User", u1.eClass().getName()); assertEquals("u1", u1.eGet(u1.eClass().getEStructuralFeature("name")));
assertEquals(new Date(1000L), dbObject.get("timeStamp"));
assertThat(map.size(), is(2)); assertThat(map, hasKey("key1")); assertEquals(map.get("key1"), "1"); assertThat(map, not(hasKey("key2"))); assertThat(map, hasKey("key3")); assertEquals(map.get("key3"), "-1");
assertEquals("uri", requestDBObject.getString("uri")); assertEquals("protocol", requestDBObject.getString("protocol")); assertEquals("method", requestDBObject.getString("method")); assertEquals("postContent", requestDBObject.getString("postContent")); assertEquals("sessionId", requestDBObject.getString("sessionId")); assertEquals("userAgent", requestDBObject.getString("userAgent")); assertEquals("referer", requestDBObject.getString("referer"));
assertEquals("servername", dbObject.get("serverName"));
assertEquals("host", remoteDBObject.getString("host")); assertEquals("user", remoteDBObject.getString("user")); assertEquals("addr", remoteDBObject.getString("addr"));
assertThat(map.size(), is(1)); assertThat(map, hasKey(REQUESTTIME_ATTR_NAME)); assertEquals("10.001", map.get(REQUESTTIME_ATTR_NAME)); assertThat(map2.size(), is(0));
assertNotNull("app should have a connect", classUnderTest.connect());
assertFalse(result);
assertTrue(actor.message.getContent().equals(1));
assertTrue(true);
assertFalse(result);
assertTrue(system.getActorsInjector().getInjectedActorsOwners().size() == 1 && containsOwner(system.getActorsInjector().getInjectedActorsOwners(), ownerTwo));
assertTrue(result.equals(A.class));
assertTrue(true);
assertTrue(actor.message.getContent().equals(2));
assertTrue(system.getActorsInjector().getInjectedActorsOwners().isEmpty());
assertTrue(result.equals(A.class));
assertFalse(result);
assertTrue(actorSystem.getMailboxes().containsKey(TestActor.class).blockingGet() && !actorSystem.getActorsDisposables().get(TestActor.class).blockingFirst().isDisposed());
assertFalse(result);
assertTrue(result);
assertTrue(actor.message.getId() == 1);
assertNull(map.getOrIgnore(new A()).blockingGet());
assertTrue(result);
assertTrue(result);
assertTrue(result);
assertTrue(result.equals(ObjectTypeRetriever.NullType.class));
assertTrue(ActorScheduler.schedules.get(MockActorTwo.class) == null);
assertTrue(actor.message.getContent().equals(1));
assertTrue(actor.message.getId() == 1);
assertFalse(result);
assertTrue(actorSystem.getMailboxes().containsKey(TestActorTwo.class).blockingGet() && !actorSystem.getActorsDisposables().get(TestActorTwo.class).blockingFirst().isDisposed());
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT)); assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME)); assertEquals(RESULT, wrapped.call());
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals(RESULT, wrapped.call());
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT)); assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME)); assertEquals("true", managedTask.getExecutionProperties().get("custom"));
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT)); assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME)); assertTrue(task.ran);
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertTrue(task.ran);
assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT)); assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME)); assertEquals("true", managedTask.getExecutionProperties().get("custom"));
assertTrue(TASK_LISTENER == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get("custom"));
assertTrue(TASK_LISTENER == managedTask.getManagedTaskListener()); assertEquals("true", managedTask.getExecutionProperties().get("custom"));
assertEquals("b9d4dee98caec486a8a3b1a577fce7efd0e7f0fb", NOTIFICATION_UTILS.calculateHash(map, SECRET));
assertTrue(NOTIFICATION_UTILS.isHashValid(createParamsMap(), SECRET));
assertEquals("money-source(\\"wallet\\")", moneySource.value());
assertEquals(string, NOTIFICATION_UTILS.createStringForHash(paramsMap));
assertFalse(YamoneyAccount.isValidAccountNumber("41003103403")); assertFalse(YamoneyAccount.isValidAccountNumber("410jhk3403")); assertFalse(YamoneyAccount.isValidAccountNumber("4106546535"));
assertEquals("money-source(\\"wallet\\",\\"card\\")", moneySource.value());
assertEquals(1, switches.size());
assertThat(tlv.getType(), is((byte)127)); assertThat(tlv.getLength(), is((short)13)); assertThat(tlv.getOUI(), is(new byte[] {0x0, 0x26, (byte) 0xe1})); assertThat(tlv.getSubType(), is((byte)12)); assertThat(tlv.serialize(), is(expected));
assertEquals(true, sw.checkFirstPendingRoleRequestCookie(232323)); assertEquals(false, sw.checkFirstPendingRoleRequestCookie(0)); assertEquals(false, sw.checkFirstPendingRoleRequestCookie(232323));
assertTrue(exceptionThrown);
assertTrue(Arrays.equals(probePkt, pkt.serialize())); assertEquals(expected, pkt);
assertTrue(switches.isEmpty());
assertTrue(Arrays.equals(pktSerialized, pktSerialized1));
assertTrue(Arrays.equals(pkt, ethernet.serialize()));
assertTrue(Arrays.equals(pktSerialized, pktSerialized1));
assertEquals(false, sw.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE)); assertEquals(null, sw.role); assertEquals(0, sw.pendingRoleRequests.size());
assertEquals("Check that update queue is empty", 0, controller.updates.size()); assertNotNull("Check that update queue has an update", upd); assertTrue("Check that update is HARoleUpdate", upd instanceof Controller.HARoleUpdate); assertSame(null, roleUpd.oldRole); assertSame(Role.SLAVE, roleUpd.newRole);
assertTrue(Arrays.equals(expected, ethernet.serialize()));
assertEquals(false, cache.update(e1));
assertTrue(Arrays.equals(pktSerialized, actual));
assertEquals(intIp, IPv4.toIPv4Address(stringIp)); assertEquals(intIp, IPv4.toIPv4Address(byteIp)); assertTrue(Arrays.equals(byteIp, IPv4.toIPv4AddressBytes(intIp))); assertTrue(Arrays.equals(byteIp, IPv4.toIPv4AddressBytes(stringIp)));
assertTrue(switches.isEmpty());
assertEquals(false, cache.update(e1a)); assertEquals(true, cache.update(e1a)); assertEquals(true, cache.update(e1b)); assertEquals(true, cache.update(e1c)); assertEquals(false, cache.update(e2)); assertEquals(true, cache.update(e2)); assertEquals(false, cache.update(e1a)); assertEquals(false, cache.update(e2));
assertEquals(null, sw.role); assertEquals(0, sw.pendingRoleRequests.size());
assertTrue(ret == Command.CONTINUE); assertTrue(ret == Command.STOP);
assertTrue("IOFSwitchListener.addedSwitch() was not called", switchListener.nAdded == 1); assertTrue("IOFSwitchListener.removedSwitch() was not called", switchListener.nRemoved == 1); assertTrue("IOFSwitchListener.switchPortChanged() was not called", switchListener.nPortChanged == 1);
assertTrue(ret == Command.CONTINUE);
assertEquals(true, sw.checkFirstPendingRoleRequestXid(54321)); assertEquals(false, sw.checkFirstPendingRoleRequestXid(0)); assertEquals(false, sw.checkFirstPendingRoleRequestXid(54321));
assertTrue(Arrays.equals(probePkt, serialized));
assertEquals("expectedControllerNodeIPs is not as expected", expectedCurMap, controller.getControllerNodeIPs());
assertEquals(2, roleChanger.pendingTasks.size()); assertSame(RoleChanger.RoleChangeTask.Type.TIMEOUT, roleChanger.pendingTasks.peek().type); assertNotSame(switches, roleChanger.pendingTasks.peek().switches); assertEquals(0, roleChanger.pendingTasks.size());
assertEquals(0, sw.pendingRoleRequests.size());
assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:ff:ee:dd"))); assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:FF:EE:DD")));
assertTrue(MACAddress.valueOf("FF:FF:FF:FF:FF:FF").isBroadcast()); assertFalse(MACAddress.valueOf("11:22:33:44:55:66").isBroadcast());
assertEquals(2, switches.size());
assertEquals(2, switches.size());
assertEquals("Check that task ran", 1, ran);
assertTrue(MACAddress.valueOf("01:80:C2:00:00:00").isMulticast()); assertFalse(MACAddress.valueOf("FF:FF:FF:FF:FF:FF").isMulticast()); assertFalse(MACAddress.valueOf("11:22:33:44:55:66").isBroadcast());
assertEquals(null, sw.role); assertEquals(0, sw.pendingRoleRequests.size());
assertThat(tlv.getType(), is((byte)127)); assertThat(tlv.getLength(), is((short)13)); assertThat(tlv.getOUI(), is(new byte[] {0x0, 0x26, (byte) 0xe1})); assertThat(tlv.getSubType(), is((byte)12)); assertThat(tlv.getInfoString(), is("ExtraInfo".getBytes(Charset.forName("UTF-8"))));
assertTrue(ret == Command.CONTINUE);
assertTrue(Arrays.equals(pkt, ethernet.serialize())); assertEquals(expected, ethernet);
assertNull(topology.switchLinks.get(lt.getSrc())); assertNull(topology.switchLinks.get(lt.getDst())); assertNull(topology.portLinks.get(srcNpt)); assertNull(topology.portLinks.get(dstNpt)); assertTrue(topology.links.isEmpty());
assertFalse("Check that task hasn\'t run yet", ran > 0); assertEquals("Check that task ran", 1, ran); assertTrue("Check that time passed appropriately", (time - start) >= TimeUnit.NANOSECONDS.convert(10, TimeUnit.MILLISECONDS));
assertArrayEquals(expected, Proto.build_lenenc_int(251));
assertArrayEquals(expected, Proto.build_filler(2, (byte) 0x1C));
assertArrayEquals(expected, Proto.build_filler(1));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.filename, "/etc/passwd");
assertArrayEquals(expected, Proto.build_lenenc_int(0));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.errorCode, 1096); assertEquals(pkt.sqlState, "HY000"); assertEquals(pkt.errorMessage, "No tables used");
assertArrayEquals(packet, colcount.toPacket()); assertEquals(colcount.colCount, 5); assertEquals(colcount.sequenceId, 1);
assertArrayEquals(expected, Proto.build_lenenc_int(16777216));
assertArrayEquals(expected, Proto.build_fixed_str(3, str));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.query, "select \\"012345678901234567890123456789012345\\"");
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.query, "SELECT 1");
assertArrayEquals(expected, Proto.build_null_str(str));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.authPluginResponse, "XElNXk5YT0cA");
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.pluginName, "mysql_native_password"); assertEquals(pkt.authPluginData, "zQg4i6oNy6=rHN/>-b)A");
assertArrayEquals(expected, Proto.build_lenenc_str(str));
assertArrayEquals(expected, Proto.build_lenenc_int(33554432));
assertArrayEquals(packet, pkt.toPacket());
assertArrayEquals(expected, Proto.build_filler(2));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.authPluginResponse, "9BeWH3nzrBAL2qaztcIOq1mF/7g=");
assertArrayEquals(expected, Proto.build_null_str(str));
assertArrayEquals(expected, Proto.build_byte((byte)0x00));
assertArrayEquals(expected, Proto.build_lenenc_str(str));
assertArrayEquals(expected, Proto.build_filler(2, (byte) 0xFF));
assertArrayEquals(expected, Proto.build_fixed_str(3, str));
assertArrayEquals(expected, Proto.build_lenenc_int(252));
assertArrayEquals(expected, Proto.build_byte((byte)0xFF));
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.query, "select @@version_comment limit 1");
assertArrayEquals(expected, Proto.build_eop_str(str));
assertArrayEquals(expected, Proto.build_byte((byte)0x01));
assertArrayEquals(packet, pkt.toPacket());
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.schema, "test");
assertArrayEquals(packet, pkt.toPacket());
assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.pluginData, "bXlzcWxfbmF0aXZlX3Bhc3N3b3JkAHpRZzRpNm9OeTY9ckhOLz4tYilBAA==");
assertArrayEquals(packet, pkt.toPacket());
assertArrayEquals(expected, Proto.build_lenenc_int(65536));
assertArrayEquals(expected, Proto.build_fixed_str(2, str));
assertThat(job).isNull();
assertThat(result.getExitCode()).isEqualTo(exitCode); assertThat(result.getExitDescription()).isEqualTo(exitDescription);
assertThat(fetchedJobNames).contains(JOB_NAME, JOB_NAME_2, JOB_NAME_3);
assertThat(beanName).startsWith("sampleJob-CRON");
assertThat(result).hasSize(count);
assertThat(beanName).startsWith("sampleJob-PERIOD");
assertThat(durationValue).isEqualTo(expectedValue);
assertThat(jobInstance).isNotNull(); assertThat(jobInstance.getInstanceId()).isEqualTo(jobInstanceId); assertThat(jobInstance.getJobName()).isEqualTo(JOB_NAME);
assertThat(jobExecutions).isNotEmpty(); assertThat(jobExecutions.size()).isEqualTo(10);
assertThat(jobInstances).isNotEmpty(); assertThat(jobInstances.size()).isEqualTo(10);
assertThat(entry.getKey()).isEqualTo("test"); assertThat(entry.getValue()).isEqualTo(5.2212);
assertThat(stepExecution).isNotNull(); assertThat(stepExecution.getStepName()).isEqualTo(STEP_NAME);
assertThat(date).isNotNull(); assertThat(simpleDateFormat.format(date)).isEqualTo(dateString);
assertThat(durationValue).isEqualTo(expectedValue);
assertThat(result).hasSize(1);
assertThat(instanceCount).isEqualTo(expectedInstanceCount);
assertThat(entry.getKey()).isEqualTo("test"); assertThat(entry.getValue()).isEqualTo(56L);
assertThat(result).hasSize(count);
assertThat(entry.getKey()).isEqualTo("test"); assertThat(simpleDateFormat.format(entry.getValue())).isEqualTo( "2015/03/27 23:19:24:120");
assertThat(resultMap.containsKey(parameterName)).isTrue(); assertThat(resultMap.get(parameterName).getParameter()).isEqualTo(value);
assertThat(result).containsKey("sampleJob"); assertThat(result.get("sampleJob")).hasSize(2);
assertThat(result).isEqualTo(jobConfiguration);
assertThat(result).hasSize(2);
assertThat(result).isNotNull(); assertThat(result.getParameters()).hasSize(2); assertThat(resultDate).isEqualTo(parserResult); assertThat(resultDate2).isEqualTo(parserResult);
assertThat(durationValue).isEqualTo(expectedValue);
assertThat(parameterMap).isNotNull(); assertThat(parameterMap).isNotEmpty(); assertThat(parameterMap.containsKey("testS")).isTrue(); assertThat(parameterMap.containsKey("testL")).isTrue(); assertThat(parameterMap.containsKey("testD")).isTrue(); assertThat(stringValue).isEqualTo("56788"); assertThat(longValue).isEqualTo(56L); assertThat(simpleDateFormat.format(dateValue)).isEqualTo( "2015/03/27 23:19:24:120");
assertThat(jobExecution.getJobInstance()).isEqualTo(jobInstance);
assertThat(entry.getKey()).isEqualTo("test"); assertThat(entry.getValue()).isEqualTo("56788");
assertThat(instanceCount).isEqualTo(expectedInstanceCount);
assertThat(result).isEqualTo("String(String)=someString,long(Long)=1");
assertThat(parameterMap).isNotNull(); assertThat(parameterMap).isEmpty();
assertThat(job).isEqualTo(expectedJob);
assertThat(result).isEqualTo(jobParameters);
assertThat(durationValue).isEqualTo(expected);
assertThat(jobExecution).isNotNull(); assertThat(jobExecution.getId()).isEqualTo(jobExecutionId);
assertThat(date).isNotNull(); assertThat(simpleDateFormat.format(date)).isEqualTo(dateString);
assertThat(durationValue).isNotNull();
assertThat(schedulerStatus).isEqualTo(SchedulerStatus.STOPPED);
assertThat(result).hasSize(count);
assertThat(resultCount).isEqualTo(count);
assertThat(jobExecutions).isNotEmpty(); assertThat(jobExecutions.size()).isEqualTo(5);
assertEquals("4 Nov 2010 16:06:04 GMT", block.getTime().toGMTString());
assertTrue(wallet.getBalance().signum() > 0);
assertTrue(signature.s.compareTo(ECKey.HALF_CURVE_ORDER) <= 0);
assertEquals(MainNetParams.get().getId(), params.getId()); assertEquals(TestNet3Params.get().getId(), params.getId());
assertEquals(hash, "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"); assertNull(block.transactions); assertEquals(Utils.bytesToHexString(block.getMerkleRoot().getBytes()), "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098");
assertEquals( "BitcoinURI[\'amount\'=\'654321000000000\',\'label\'=\'Hello World\',\'message\'=\'Be well\',\'address\'=\'"+CoinDefinition.UNITTEST_ADDRESS+"\']", testObject.toString());
assertTrue(p1.lastReceivedFilter.contains(key.getPubKey())); assertFalse(p1.lastReceivedFilter.contains(tx.getHash().getBytes())); assertTrue(outbound(p1) instanceof GetDataMessage); assertNull(outbound(p1)); assertNull(outbound(p2)); assertTrue(p3.lastReceivedFilter.contains(key.getPubKey())); assertTrue(p3.lastReceivedFilter.contains(outpoint.bitcoinSerialize()));
assertTrue(testNetChain.add(b1)); assertFalse(future.isDone()); assertTrue(testNetChain.add(b2)); assertTrue(future.isDone()); assertEquals(2, future.get().getHeight());
assertTrue(wallet.isConsistent()); assertEquals("Wrong number of PENDING.5", 1, wallet.getPoolSize(WalletTransaction.Pool.PENDING)); assertEquals("Wrong number of UNSPENT.5", 0, wallet.getPoolSize(WalletTransaction.Pool.UNSPENT)); assertEquals("Wrong number of ALL.5", 2, wallet.getTransactions(true).size()); assertEquals(toNanoCoins(0, 49), wallet.getBalance(Wallet.BalanceType.ESTIMATED));
assertTrue(result.get());
assertEquals(BigInteger.valueOf(536879104L), work);
assertEquals(Sha256Hash.ZERO_HASH, getblocks.getStopHash()); assertTrue(outbound(p1) instanceof GetDataMessage); assertNull(message == null ? "" : message.toString(), message);
assertTrue(chain.add(newBlock)); assertTrue(chain.add(b));
assertTrue(s.isSentToRawPubKey());
assertTrue(testNetChain.add(getBlock1())); assertTrue(testNetChain.add(b2)); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Difficulty target is bad")); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Unexpected change in difficulty"));
assertEquals(tx, tx2);
assertFalse(DefaultCoinSelector.isSelectable(t)); assertFalse(DefaultCoinSelector.isSelectable(t)); assertFalse(DefaultCoinSelector.isSelectable(t)); assertTrue(DefaultCoinSelector.isSelectable(t)); assertTrue(DefaultCoinSelector.isSelectable(t)); assertTrue(DefaultCoinSelector.isSelectable(t));
assertEquals("n4eA2nbYqErp7H6jebchxAN59DmNpksexv", a.toString()); assertFalse(a.isP2SHAddress()); assertEquals(CoinDefinition.UNITTEST_ADDRESS, b.toString()); assertFalse(b.isP2SHAddress());
assertEquals(nanos, tx1.getValueSentToMe(wallet, true)); assertEquals(nanos, send2.getValueSentFromMe(wallet)); assertEquals(BigInteger.ZERO.subtract(toNanoCoins(0, 10)), send2.getValue(wallet));
assertEquals(CENT, toNanoCoins("0.01")); assertEquals(CENT, toNanoCoins("1E-2")); assertEquals(COIN.add(Utils.CENT), toNanoCoins("1.01")); assertEquals(CENT, toNanoCoins(0, 1));
assertEquals(BigInteger.ZERO, wallet.getBalance());
assertTrue(e.getMessage().contains("Bad address"));
assertTrue(ScriptBuilder.createOutputScript(p2shAddress).isSentToP2SH());
assertTrue(outbound(p1) instanceof MemoryPoolMessage); assertTrue(outbound(p2) instanceof MemoryPoolMessage); assertNotEquals(f1, f3); assertNotEquals(f2, f4); assertEquals(f3, f4); assertTrue(f3.contains(key.getPubKey())); assertTrue(f3.contains(key.getPubKeyHash())); assertFalse(f1.contains(key.getPubKey())); assertFalse(f1.contains(key.getPubKeyHash()));
assertTrue(chain.add(b1)); assertFalse(chain.add(b3)); assertEquals(chain.getChainHead().getHeader(), b1.cloneAsHeader()); assertTrue(chain.add(b2)); assertEquals(chain.getChainHead().getHeader(), b3.cloneAsHeader());
assertTrue(chain.add(b1)); assertEquals(b1, block[0].getHeader()); assertTrue(chain.add(b2)); assertEquals(b2, block[0].getHeader()); assertTrue(chain.add(b3)); assertEquals(b3, block[0].getHeader()); assertEquals(b3, chain.getChainHead().getHeader()); assertTrue(chain.add(b2)); assertEquals(b3, chain.getChainHead().getHeader()); assertEquals(b3, block[0].getHeader());
assertEquals(1, flag.get());
assertEquals("fda79a24e50ff70ff42f7d89585da5bd19d9e5cc", Utils.bytesToHexString(a.getHash160())); assertEquals("4a22c3c4cbb31e4d03b15550636762bda0baf85a", Utils.bytesToHexString(b.getHash160()));
assertTrue(m.matchesPackage("pa")); assertTrue(m.matchesPackage(""));
assertEquals(String.format("start%n1%n2"), andJoin("start", asList(1, 2)));
assertTrue(m.matchesPackage("pa")); assertFalse(m.matchesPackage("xxxpa")); assertTrue(m.matchesPackage("paxxx"));
assertEquals("ExampleConcreteClass.java", clazz.getSourceFile());
assertFalse(m.matches("pa", "Cl$bla", "me"));
assertEquals("a", join(",", asList("a")));
assertEquals("", join(",", asList()));
assertTrue(m.matches("c", null, "A", null, true)); assertTrue(m.matches("d", null, "a.B", null, true)); assertTrue(m.matches("d", null, "Y", "c", true)); assertTrue(m.matches("d", null, "A", "x", true)); assertFalse(m.matches("e", null, "Y", "c", true)); assertFalse(m.matches("d", null, "Y", "d", true));
assertEquals("a,b", join(",", new String[]{"a", "b"}));
assertEquals("a,b", join(",", asList("a", "b")));
assertFalse(m.matchesPackage("pa")); assertFalse(m.matchesPackage("xxxpa")); assertTrue(m.matchesPackage("paxxx"));
assertEquals("ExampleConcreteClass.java", clazz.getSourceFile());
assertTrue(m.matches("cat", null, null, null, false)); assertTrue(m.matches("xcat", null, null, null, false)); assertTrue(m.matches("catx", null, null, null, false)); assertTrue(m.matches("xcatx", null, null, null, false)); assertFalse(m.matches("ca", null, null, null, false));
assertFalse(m.matchesPackage("pa")); assertTrue(m.matchesPackage("xxxpa")); assertFalse(m.matchesPackage("paxxx"));
assertTrue(m.matches("c", null, "A", null, true)); assertFalse(m.matches("c", null, "B", null, true));
assertTrue(m.matchesPackageClass("a", "B")); assertTrue(m.matchesPackageClass("ab", "B")); assertTrue(m.matchesPackageClass("a.b", "B")); assertFalse(m.matchesPackageClass("b", "B")); assertFalse(m.matchesPackageClass("a", "C"));
assertEquals("ExampleConcreteClass.java", clazz.getSourceFile());
assertTrue(m.matches("c", null, "A", null, true)); assertTrue(m.matches("c", JAVA, "A", null, true)); assertTrue(m.matches("c", KOTLIN, "B", null, true)); assertFalse(m.matches("c", SCALA, "A", null, true));
assertEquals("", join(",", new String[]{}));
assertEquals("a", join(",", new String[]{"a"}));
assertEquals(7, clazz.getMethods().size()); assertEquals(1, method.getAccessFlags()); assertEquals(51, method.getCodeSize()); assertEquals("<init>", method.getName());
assertTrue(m.matchesPackage("pa")); assertTrue(m.matchesPackage("xxxpa")); assertFalse(m.matchesPackage("paxxx"));
assertEquals("1,2", join(",", new Integer[]{1, 2}));
assertEquals(1, clazz.getFields().size()); assertEquals(2, field.getAccessFlags()); assertEquals(0, field.getCodeSize()); assertEquals("statements", field.getName());
assertTrue(m.matchesPackage("pa")); assertTrue(m.matchesPackage("xxxpa")); assertTrue(m.matchesPackage("paxxx")); assertFalse(m.matchesPackage(""));
assertEquals(518, clazz.getCodeSize()); assertEquals(2221, clazz.getTotalSize());
assertEquals(model("ExamplePackageClass"), clazz.getName());
assertEquals(model("ExampleConcreteClass"), clazz.getName());
assertEquals(String.format("start%n1%n2"), andJoin("start", new Integer[]{1, 2}));
assertTrue(m.matchesPackage("pa")); assertFalse(m.matchesPackage("paxxx")); assertTrue(m.matchesPackage("pa.xxx"));
assertEquals(model("ExampleConcreteClass$ExampleInnerClass"), clazz.getName());
assertEquals("1,2", join(",", asList(1, 2)));
assertTrue(m.matches("c", null, "X", null, true)); assertTrue(m.matches("c", null, null, "#e", true)); assertFalse(m.matches("e", null, "X", null, true));
assertEquals(7, intVal); assertEquals(8, intVal);
assertEquals(.5f, (Float)f.getDefaultValue(), 0); assertEquals(.7f, (Float)f.getValue(), 0); assertEquals(.8f, (Float)f.getValue(), 0);
assertEquals(ds0, dataSrc.sinkList.get(0)); assertEquals(ds1, dataSrc.sinkList.get(1)); assertEquals(ds2, dataSrc.sinkList.get(2)); assertEquals(ds3, dataSrc.sinkList.get(3)); assertEquals(ds4, dataSrc.sinkList.get(4));
assertNull(getSymbol("<<NULL_SYMBOL"));
assertThat(captor.getValue().body, hasToString("*cell-demo-1*"));
assertNull(normaliser);
assertThat(props, not(hasKey(startsWith("#"))));
assertThat(paramAccessor, is(not(nullValue()))); assertThat(paramAccessor.getName(), is("param 1"));
assertNull(getSymbol("<<MISSING_SYMBOL"));
assertEquals("13:12:05", timeParts[0]); assertEquals(1, Integer.parseInt(timeParts[1])); assertEquals(2, timeParts.length);
assertNull(parseHelper.parse("<<MISSING_SYMBOL"));
assertThat(table, numCellsWith(1, "*GOOD-1*", "fail"));
assertThat(normaliseTypeName("INT(WHATEVER"), is("INT"));
assertEquals("password", keyval[0]); assertEquals("crap", keyval[1]);
assertEquals("abc", parser.parse("abc"));
assertThat(rs.getColumnNames(), is(new String[] { "col1", "col2", "col3" }));
assertThat(allResults.get(2).getType(), equalTo(expectedType));
assertEquals(outBigDec, inBigDec);
assertEquals( asList("dummy1", "dummy2", "dummy3"), accessors.getSortedAccessorNames());
assertEquals(new BigDecimal(2001), BigDecimalParseDelegate.parse("2001"));
assertEquals(BigInteger.valueOf(2001), BigIntegerParseDelegate.parse("2001"));
assertEquals("X", parser.parse("<<SYMBOL_X"));
assertTrue("Date periods are not equal", tdp.equals(tdp2));
assertEquals(new Timestamp(103340l), new SqlDateNormaliser().transform(dt));
assertEquals("mydemodb", props.get("database"));
assertEquals("Date periods are not equal", fromDate.toString() + "," + toDate.toString(), tdp.toString());
assertTrue("Timestamp period parse does not produce expected object", tp.equals(tp2));
assertThat(row.getStringValue("c1"), is("null"));
assertEquals(normaliserMid, normaliser); assertEquals(normaliserTop, normaliser);
assertEquals(value, PropertiesLoader.unwrapEncryptedValue(wrapped));
assertEquals(DB_PASSWORD, decPwd);
assertEquals(Integer.valueOf(7), parser.parse("7", "java.lang.Integer"));
assertThat(normaliseTypeName("INT"), is("INT"));
assertEquals(normaliserMid, normaliser);
assertEquals("{ call storedProc(?, ?) }", buildStoredRoutineCallText("storedProc", 2, false));
assertThat(actual, is(millisTime)); assertThat(actual, is(not(secTime)));
assertFalse(nullValueCell.equalTo(cell));
assertEquals(expected, parser.parse("123", BigDecimalParseDelegate.class));
assertTrue("Time periods are not equal", tdp.equals(tdp2));
assertEquals("Time periods toString does return expected value", fromTime.toString() + "," + toTime.toString(), tdp.toString());
assertTrue("Time period parse does not produce expected object", tp.equals(tp2));
assertEquals(value, ValueNormaliser.normaliseValue(value));
assertFalse(cell.equalTo(null));
assertFalse(cell.equalTo(cell2));
assertThat(table, numCellsWith(1, "*cell-demo-1*", "pass"));
assertThat(normaliseTypeName(null), is("SHOULDN\'T GET TO HERE"));
assertNull(new SqlDateNormaliser().transform(null));
assertNull(new OracleRefNormaliser().transform(null));
assertEquals(outBigDec, inBigDec);
assertEquals("CLOB contents", new OracleSerialClobNormaliser().transform(clob));
assertEquals("A,B,C", LangUtils.join(asList("A", "B", "C"), ","));
assertEquals("TEST", ValueNormaliser.normaliseValue("test"));
assertEquals("TimestampPeriod toString() return unexpected value", F.toString() + "," + T.toString(), tdp.toString());
assertEquals("z_p := z_bool2chr( z_v_p_out );", p.toString().trim());
assertNull(DataCell.createDataCell(null, "n"));
assertTrue("Date period parse does not produce expected object", tp.equals(tp2));
assertNull(new OracleTimestampNormaliser().transform(null));
assertEquals(new Timestamp(0l), new OracleTimestampNormaliser().transform(ts));
assertFalse("Date periods are equal", tdp.equals(tdp2));
assertThat(normaliseTypeName("int"), is("INT"));
assertNull(parseHelper.parse("<<NULL_SYMBOL"));
assertThat(parse(null), is(nullValue()));
assertEquals("X", parseHelper.parse("<<SYMBOL_X"));
assertNull(new OracleDateNormaliser().transform(null));
assertThat(rs.getKeyProperties(), is(new boolean[] { true, false, true }));
assertEquals(DB_PASSWORD, decPwd);
assertEquals(r1, firstUnprocessed);
assertTrue(cell.equalTo(cell2));
assertThat(parse("13:12:05"), is(Time.valueOf("13:12:05")));
assertThat(normaliseTypeName(" INT (WHATEVER"), is("INT")); assertThat(normaliseTypeName(" INT WHAT(EVER"), is("INT")); assertThat(normaliseTypeName(" INT WHAT ( EVER"), is("INT"));
assertFalse(cell.equalTo(nullValueCell));
assertEquals(DB_PASSWORD, props.get("password"));
assertEquals(r3, matchingRow);
assertThat(table, isParseThat() .withRecursiveChildren() .withRecursiveSiblings() .which(allOf( hasTagThat(containsString("<td")), hasBodyThat(allOf( containsString("Cruel World!"), containsString("stacktrace"))))));
assertEquals("X", getSymbol("<<SYMBOL_X"));
assertNull(ValueNormaliser.normaliseValue(null));
assertThat(captor.getAllValues(), contains(r1, r2));
assertTrue("Timestamp periods are not equal", tdp.equals(tdp2));
assertThat(allResults.get(0).getType(), equalTo(expectedType)); assertThat(allResults.get(1).getType(), equalTo(expectedType));
assertEquals(DB_PASSWORD, props.get("password"));
assertNull(PropertiesLoader.unwrapEncryptedValue("XYZ"));
assertFalse("Timestamp periods are equal", tdp.equals(tdp2));
assertEquals("z_chr2bool( ? )", arg.getCallArgument());
assertEquals("{ ? = call func(?, ?) }", buildStoredRoutineCallText("func", 3, true));
assertEquals(expected, parser.parse("123", "dbfit.util.BigDecimalParseDelegate"));
assertThat(normaliseTypeName(" ( INT"), is("")); assertThat(normaliseTypeName("( INT"), is(""));
assertThat(row.getStringValue("NO-SUCH-COLUMN"), is("null"));
assertEquals(asList("A","A","A"), LangUtils.repeat("A", 3));
assertThat(normaliseTypeName("INT Whatever"), is("INT"));
assertThat(Options.is("dummy-option-2"), is(false));
assertEquals("[A].[B].[C]", LangUtils.enquoteAndJoin(asList("A", "B", "C"), ".", "[", "]"));
assertEquals(null, parser.parse("NulL"));
assertFalse("Time periods are equal", tdp.equals(tdp2));
assertEquals("{ ? = call func() }", buildStoredRoutineCallText("func", 1, true));
assertEquals("?", arg.getCallArgument());
assertEquals(mdt.getUnprocessedRows(), rows);
assertEquals("{ call storedProc() }", buildStoredRoutineCallText("storedProc", 0, false));
assertEquals(new Timestamp(0l), new OracleDateNormaliser().transform(dt));
assertThat(normaliseTypeName(" int "), is("INT"));
assertEquals("", parser.parse(""));
assertEquals(key, keyval[0]); assertEquals(value, keyval[1]);
assertEquals(null, parser.parse("null"));
assertThat(row.getStringValue("c0"), is("2")); assertThat(row.getStringValue("c1"), is("4"));
assertEquals(null, parser.parse(null));
assertEquals(outBigDec.getClass(), BigDecimal.class);
assertNull(new OracleClobNormaliser().transform(null));
assertEquals("X", getSymbol(">>SYMBOL_X"));
assertThat(params.toMap().keySet(), containsInAnyOrder("r1", "p1", "r2", "p2"));
assertTrue(nullValueCell.equalTo(nullValueCell2));
assertNull(new OracleSerialClobNormaliser().transform(null));
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(floatPrimitive), 0);
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(longObject), 0);
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(expectedFloat), 0);
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(expectedDouble), 0);
assertEquals(1, downloadProgressNotification.notificationBuilder.mActions.size()); assertEquals(0, downloadProgressNotification.notificationBuilder.mActions.size());
assertEquals(null, getValueInPrivateField(NotificationCompat.Builder.class, builder, "mChannelId"));
assertFalse(arrowLineLayer.removeLayerOnMap(mapboxMap));
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(intPrimtive), 0);
assertEquals(0, ((ArrayList<BaseLayer>) ReflectionHelpers.getField(baseLayerSwitcherPlugin, "baseLayers")).size()); assertFalse(baseLayerSwitcherPlugin.addBaseLayer(new SatelliteBaseLayer(), true));
assertEquals(updatedFeatureCollection, ReflectionHelpers.getField( ReflectionHelpers.getField(boundaryLayer, "builder"), "featureCollection") );
assertNotNull(mbTilesHelper.tileServer);
assertEquals(3, layerIds.length); assertNotNull(layerIds[0]); assertNotNull(layerIds[1]); assertNotNull(layerIds[2]);
assertEquals(1, downloadProgressNotification.notificationBuilder.mActions.size());
assertEquals(connectionStatus, ""); assertEquals(connectionStatus, "connected"); assertEquals(connectionStatus, "disconnected");
assertNotNull(layersAndSources); assertEquals(1, layersAndSources.first.size()); assertEquals(1, layersAndSources.second.size()); assertNotNull(mbTilesHelper.tileServer); assertTrue(source instanceof RasterSource); assertTrue(layer instanceof RasterLayer);
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(floatObject), 0);
assertEquals(2, layerIds.length); assertNotNull(layerIds[0]); assertNotNull(layerIds[1]);
assertFalse(testLocationClient.isBetterLocation(newLocation, currentLocation));
assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation));
assertEquals(context.getString(R.string.error_msg_could_not_retrieve_chosen_feature), ShadowToast.getTextOfLatestToast());
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(integerObject), 0);
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(longPrimitive), 0);
assertEquals(mapName, results.get(0)); assertEquals(mapboxAccessToken, results.get(1)); assertEquals(MapboxOfflineDownloaderService.SERVICE_ACTION.DELETE_MAP, results.get(2));
assertEquals(0, ((ArrayList<BaseLayer>) ReflectionHelpers.getField(baseLayerSwitcherPlugin, "baseLayers")).size()); assertFalse(addLayerResult);
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(intPrimtive), 0);
assertEquals(null, getValueInPrivateField(NotificationCompat.Builder.class, builder, "mChannelId"));
assertFalse(mbTilesHelper.tileServer.isStarted());
assertEquals(formatedDecimals[i], DownloadProgressNotification.formatDecimal(decimals[i]));
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(jsonObject), 0);
assertEquals(1, callbacks.size()); assertEquals(locationClientStartedCallback, callbacks.get(0)); assertEquals(0, callbacks.size());
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(floatObject), 0);
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToDoublePrimitive(expectedFloat), 0);
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(doubleObject), 0);
assertNull((GeoJsonSource) ReflectionHelpers.getField(arrowLineLayer, "lineLayerSource")); assertNotNull((GeoJsonSource) ReflectionHelpers.getField(arrowLineLayer, "lineLayerSource"));
assertEquals(2, layerIds.length); assertNotNull(layerIds[0]); assertNotNull(layerIds[1]);
assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(longPrimitive), 0);
assertNull(ReflectionHelpers.getField(kujakuMapView,"onFeatureLongClickListener")); assertNull(ReflectionHelpers.getField(kujakuMapView,"featureLongClickLayerIdFilters")); assertEquals(onFeatureLongClickListenerMock, ReflectionHelpers.getField(kujakuMapView,"onFeatureLongClickListener")); assertEquals(layerIds, ReflectionHelpers.getField(kujakuMapView,"featureLongClickLayerIdFilters"));
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(integerObject), 0);
assertNotNull(actualNotification); assertEquals(title, shadowNotification.getContentTitle()); assertEquals(content, shadowNotification.getContentText());
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(jsonObject), 0);
assertFalse(boundaryLayer.removeLayerOnMap(mapboxMap));
assertEquals(propertyValues.get("line-color").value, ColorUtils.colorToRgbaString(colorInt)); assertEquals(propertyValues.get("line-width").value, lineWidth);
assertEquals(mapName, results.get(0)); assertEquals(mapboxAccessToken, results.get(1)); assertEquals(MapboxOfflineDownloaderService.SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, results.get(2)); assertEquals(MapBoxOfflineQueueTask.TASK_TYPE_DOWNLOAD, results.get(3));
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(doubleObject), 0);
assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation));
assertNotNull(mbTilesHelper.tileServer);
assertEquals(expectedDouble, ObjectCoercer.coerceNumberObjectToDoublePrimitive(longObject), 0);
assertFalse(kujakuMapView.changeLocationUpdates(5000, 2000, 999));
assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation));
assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation));
assertNull((GeoJsonSource) ReflectionHelpers.getField(arrowLineLayer, "arrowHeadSource")); assertNotNull((GeoJsonSource) ReflectionHelpers.getField(arrowLineLayer, "arrowHeadSource"));
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertTrue(true);
assertEquals(exc.getData().toString(), "{code: 400, message: \\"Bad Request\\"}");
assertNotNull(at); assertSame(getFieldValue.apply(f, at), jws.getBody()); assertSame(getFieldValue.apply(f, at), jws.getSignature());
assertTrue(zms.validateTenancyObject(tenant, "athenz", "sports.provider")); assertFalse(zms.validateTenancyObject(tenant, "athens", "sports.provider")); assertFalse(zms.validateTenancyObject(tenant, "athenz", "sports.providers"));
assertEquals(ls.size(), 0);
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "domain:role.Role2", null, null, nullFetcher)); assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "coretech:role.Role", null, null, nullFetcher));
assertFalse(jdbcConn.skipAwsUserQuery(map, "queryP1", "zms", "zms"));
assertNotNull(certReq); assertTrue(certReq.validateUriHostname("abc.athenz.com")); assertFalse(certReq.validateUriHostname(null)); assertFalse(certReq.validateUriHostname("")); assertFalse(certReq.validateUriHostname("def.athenz.com")); assertNotNull(certReq); assertTrue(certReq.validateUriHostname("abc.athenz.com"));
assertEquals(0, notifications.size());
assertNotNull(policyRes1); assertTrue(true);
assertEquals(certRecord.getLastNotifiedTime(), now); assertEquals(certRecord.getLastNotifiedServer(), "last-notified-server"); assertEquals(certRecord.getExpiryTime(), now); assertEquals(certRecord.getHostName(), "hostname");
assertFalse(zms.isAllowedResourceLookForAllUsers(principal1));
assertFalse(zts.certRecordChanged(null, null)); assertTrue(zts.certRecordChanged(null, "")); assertTrue(zts.certRecordChanged("", null)); assertFalse(zts.certRecordChanged("", "")); assertFalse(zts.certRecordChanged("test1", "test1")); assertTrue(zts.certRecordChanged("test1", "test2")); assertTrue(zts.certRecordChanged("test1", "")); assertTrue(zts.certRecordChanged("", "test2"));
assertNotNull(authorizer);
assertNull(context.authenticate(true)); assertEquals(ex.getCode(), ResourceException.UNAUTHORIZED);
assertTrue(jdbcConn.validatePrincipalDomain("coretech.storage")); assertTrue(jdbcConn.validatePrincipalDomain("coretech.storage.db")); assertTrue(jdbcConn.validatePrincipalDomain("user.user1")); assertTrue(jdbcConn.validatePrincipalDomain("*"));
assertNotNull(idJws);
assertTrue(zts.validateRoleCertificateExtRequest(certReq, "user_domain.user1", null, null, "10.11.12.13"));
assertNotNull(recipientsResp); assertEquals(recipientsResp.size(), 3); assertTrue(recipientsResp.contains("user1@example.com")); assertTrue(recipientsResp.contains("user2@example.com")); assertTrue(recipientsResp.contains("user3@example.com"));
assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
assertEquals(AuthzHelper.extractResourceDomainName("domain:entity"), "domain"); assertEquals(AuthzHelper.extractResourceDomainName("domain:entity:value2"), "domain");
assertNotNull(dbConn);
assertTrue(true); assertTrue(true);
assertNull(client);
assertTrue(result);
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertTrue(true); assertTrue(true);
assertEquals(1, ips.size()); assertEquals(ips.get(0), "10.11.12.13");
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertNull(fstore.getServerSignedDomain("athenz"));
assertTrue(provider.validateAWSDocument("athenz.aws-ecs.us-west-2", data, "1234", "i-1234", true, privateIp, errMsg));
assertNotNull(store.getConnection(true, false));
assertEquals(zmsImpl.virtualDomainLimit, 10); assertEquals(zmsImpl.userDomainAliasPrefix, "xyz."); assertEquals(zmsImpl.signedPolicyTimeout, 1000 * 86400); assertTrue(zmsImpl.isValidCORSOrigin("a.com"));
assertNotNull(accessJws);
assertEquals(ex.getCode(), 404);
assertEquals(404, ex.getCode()); assertTrue(ex.getMessage().contains("athenz"));
assertEquals(check, expected);
assertEquals(Crypto.getSignatureAlgorithm("DSA", "SHA256"), "SHA256withDSA"); assertTrue(ex instanceof NoSuchAlgorithmException, ex.getMessage()); assertEquals(Crypto.getSignatureAlgorithm("RSA", "SHA555"), "SHA555withRSA"); assertTrue(ex instanceof NoSuchAlgorithmException, ex.getMessage()); assertEquals(Crypto.getSignatureAlgorithm("ECDSA", "SHA999"), "SHA999withECDSA"); assertTrue(ex instanceof NoSuchAlgorithmException, ex.getMessage());
assertNull(store.getSignedDomain(store.awsS3Client, "iaas"));
assertNotNull(signedDomain); assertEquals(signedDomain.getDomain().getName(), "athenz"); assertNull(fstore.getServerSignedDomain("coretech"));
assertNotNull(certId); assertEquals(certId.getDomain(), "athens"); assertEquals(certId.getService(), "zts"); assertEquals(certId.getRoles().get(0), "sports:role.readers");
assertEquals(actual, isMember);
assertFalse(AuthzHelper.isMemberExpired(null, 0)); assertFalse(AuthzHelper.isMemberExpired(Timestamp.fromCurrentTime(), System.currentTimeMillis() - 10000)); assertTrue(AuthzHelper.isMemberExpired(Timestamp.fromCurrentTime(), System.currentTimeMillis() + 10000));
assertEquals(serviceAuthority.getAuthenticateChallenge(), "AthenzPrincipalToken realm=\\"athenz\\"");
assertEquals(exc.getData(Integer.class), new Integer(5000));
assertEquals(jdbcConn.countServiceIdentities("my-domain"), 5);
assertEquals(ex.getCode(), 500);
assertTrue(true); assertTrue(true);
assertEquals(ex.getCode(), ResourceException.FORBIDDEN); assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
assertTrue(store.roleMatchInSet("writers", checkSet)); assertTrue(store.roleMatchInSet("readers", checkSet)); assertFalse(store.roleMatchInSet("admin", checkSet)); assertFalse(store.roleMatchInSet("testwriters", checkSet)); assertFalse(store.roleMatchInSet("writerstest", checkSet));
assertEquals(a, a); assertNotEquals(a, b); assertEquals(a, b);
assertNull(services);
assertEquals(7, jdbcConn.getPrincipalId("my-domain.user1")); assertEquals(7, jdbcConn.getPrincipalId("my-domain.user1"));
assertTrue(zms.isAllowedPutMembershipAccess(mockDomRestRsrcCtx.principal(), domain, role.getName())); assertNotNull(rsrcPrince); assertFalse(zms.isAllowedPutMembershipAccess(rsrcPrince, domain, role.getName()));
assertTrue(true);
assertTrue(true);
assertTrue(requestSuccess);
assertNull(jdbcConn.nullIfDefaultValue(false, false)); assertTrue(jdbcConn.nullIfDefaultValue(true, false)); assertNull(jdbcConn.nullIfDefaultValue(0, 0)); assertEquals(jdbcConn.nullIfDefaultValue(10, 0), Integer.valueOf(10));
assertEquals(3, policies.size()); assertEquals(testAssertions.size(), 1); assertEquals(testAssertions.size(), 1); assertTrue(policy1Check); assertTrue(policy2Check);
assertEquals(zts.getConfiguredRoleListExpiryTimeMins(requestedRoleList), 90);
assertEquals(0, ZTSUtils.parseInt(null, 0)); assertEquals(-1, ZTSUtils.parseInt("", -1)); assertEquals(100, ZTSUtils.parseInt("100", 1)); assertEquals(0, ZTSUtils.parseInt("abc", 0));
assertFalse(result);
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1")); assertTrue(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1"));
assertEquals(expected.getCode(), 403); assertEquals(expected.getMessage(), "ResourceException (403): Forbidden");
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertTrue(true); assertTrue(true);
assertTrue(ips.isEmpty()); assertTrue(ips.isEmpty());
assertEquals(ex.getCode(), 400);
assertEquals(500, ex.getCode());
assertEquals(ConfigProperties.getPortNumber("athenz.port", 4080), 4080);
assertNotNull(accessJws);
assertEquals(ex.getCode(), 404);
assertTrue(requestSuccess);
assertTrue(zms.isConsistentPolicyName("domain1", "policy1", policy)); assertTrue(zms.isConsistentPolicyName("domain1", "policy1", policy)); assertEquals(policy.getName(), "domain1:policy.policy1"); assertFalse(zms.isConsistentPolicyName("domain1", "policy2", policy)); assertFalse(zms.isConsistentPolicyName("domain1", "policy2", policy));
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 25L), 25L);
assertEquals(status.getCode(), ResourceException.OK);
assertEquals(certRecord.getInstanceId(), "1234"); assertEquals(certRecord.getService(), "cn"); assertEquals(certRecord.getPrincipals(), "host1,host2"); assertEquals(certRecord.getClientIP(), "10.10.10.11"); assertEquals(certRecord.getPrivateIP(), "10.10.10.12");
assertEquals(jdbcConn.countPublicKeys("my-domain", "service1"), 2);
assertEquals(msgBuilder.who(), "athenz.production");
assertTrue(notificationToEmailConverterCommon.readContentFromFile(getClass().getClassLoader(), "resources/non-existent").isEmpty());
assertEquals(list.size(), 1); assertEquals(list.get(0).getMemberName(), "member1"); assertEquals(list.size(), 1); assertEquals(list.get(0).getMemberName(), "member1");
assertTrue(true);
assertTrue(ex instanceof IllegalArgumentException);
assertNull(X509CertUtils.extractRequestInstanceIdFromURI(uriList));
assertNotNull(accessJws);
assertTrue(certReq.validateIPAddress(cert1, "10.11.12.13")); assertTrue(certReq.validateIPAddress(cert2, "10.11.12.13"));
assertEquals(ResourceUtils.roleResourceName("athenz", "role1"), "athenz:role.role1"); assertEquals(ResourceUtils.roleResourceName("athenz.api", "role1"), "athenz.api:role.role1");
assertEquals(token.getDomain(), "coretech"); assertEquals(token.getName(), "storage"); assertEquals(token.getVersion(), "S1"); assertNull(token.getUnsignedToken());
assertEquals(accessibleRoles.size(), 0);
assertFalse(result);
assertEquals(certRecord.getLastNotifiedTime(), now); assertEquals(certRecord.getLastNotifiedServer(), "last-notified-server"); assertEquals(certRecord.getExpiryTime(), now); assertEquals(certRecord.getHostName(), "hostname");
assertEquals(zts.determineIdTokenTimeout(3600), 3600); assertEquals(zts.determineIdTokenTimeout(360000), zts.idTokenMaxTimeout);
assertNotNull(accessCheck); assertTrue(accessCheck.getGranted()); assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertTrue(true); assertTrue(true);
assertEquals(e.getMessage(), "Role Certificates not allowed"); assertNull(certId);
assertTrue(a.getGranted());
assertEquals(1, uris.size());
assertNotNull(mbr); assertTrue(mbr.getIsMember()); assertTrue(mbr.getApproved()); assertEquals(mbr.getGroupName(), domainName + ":group." + groupName); assertEquals(mbr.getMemberName(), "user.joe"); assertNotNull(mbr); assertTrue(mbr.getIsMember()); assertTrue(mbr.getApproved()); assertEquals(mbr.getGroupName(), domainName + ":group." + groupName); assertEquals(mbr.getMemberName(), "user.jane");
assertNotNull(src);
assertEquals(store.hostCache.size(), 1); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertEquals(2, ips.size()); assertEquals(ips.get(0), "10.11.12.13"); assertEquals(ips.get(1), "10.11.12.14");
assertEquals("Table named " + requestedTable + " wasn\'t found in DynamoDB", ex.getMsg()); assertEquals(200, ex.getCode());
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20), 100); assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20), 0); assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20), -100);
assertEquals(403, ex.getCode());
assertEquals(tenancy.getDomain(), "coretech"); assertEquals(tenancy.getService(), "storage"); assertTrue(tenancy.getResourceGroups().contains("burbank")); assertTrue(tenancy.getResourceGroups().contains("santa_monica"));
assertTrue(fileconnection.getPendingMembershipApproverRoles("localhost", 0L).isEmpty());
assertEquals(jdbcConn.countGroupMembers("my-domain", "group1"), 4);
assertEquals(ex.getCode(), 404);
assertTrue(requestSuccess);
assertEquals(returnList.getDomains().size(), 1); assertEquals(returnList.getDomains().get(0).getDomain().getName(), "athenz");
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 540); assertEquals(zts.determineTokenTimeout(data, roles, null, 500), 500); assertEquals(zts.determineTokenTimeout(data, roles, null, null), 540);
assertTrue(domainList.contains("user")); assertNull(fstore.getServerDomainList());
assertNotNull(req); assertEquals("coretech.test", Crypto.extractX509CSRCommonName(certReq)); assertEquals("test.coretech.aws.athenz.cloud", Crypto.extractX509CSRDnsNames(certReq).get(0));
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 1200); assertEquals(zts.determineTokenTimeout(data, roles, null, null), 1800);
assertNull(fileconnection.getRoleObject(domain, "role1", false));
assertTrue(fileconnection.matchExpiration(0, null)); assertFalse(fileconnection.matchExpiration(10, null)); assertTrue(fileconnection.matchExpiration(100, Timestamp.fromMillis(100))); assertFalse(fileconnection.matchExpiration(101, Timestamp.fromMillis(100)));
assertEquals(jdbcConn.countPolicies("my-domain"), 5);
assertFalse(zms.isValidUserTokenRequest(null, "user1"));
assertEquals(ldapAuthority.getDomain(),"user");
assertEquals(ls.size(), 3); assertTrue(ls.contains("test1")); assertTrue(ls.contains("test2")); assertTrue(ls.contains("test3"));
assertEquals(authority.getAuthenticateChallenge(), "Bearer realm=\\"athenz.io\\"");
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertTrue(true);
assertNull(SimplePrincipal.create("user", fakeCreds, (List<String>) null, userAuthority));
assertTrue(accessToken.confirmMTLSBoundToken(cert, null));
assertEquals(403, ex.getCode());
assertTrue(true);
assertEquals(e.getCode(), code); assertEquals(e.getCode(), code);
assertEquals(gottenItems, items);
assertNull(store.getUpdatedSignedDomains(str));
assertFalse(token.validate(servicePublicKeyStringK0, 3600, false));
assertNotNull(dbConn);
assertNull(fileconnection.getRoleObject(domain, "role1"));
assertFalse(AuthzHelper.matchDelegatedTrustPolicy(policy, "testRole", "testMember", null, nullFetcher));
assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion));
assertEquals(zms.normalizeDomainAliasUser("user.user"), "user.user"); assertEquals(zms.normalizeDomainAliasUser("user.user2"), "user.user2"); assertEquals(zms.normalizeDomainAliasUser("user.user1"), "user.user1");
assertNotNull(Http.authenticate(httpServletRequest, authorities));
assertTrue(Crypto.isRestrictedCertificate(cert, null)); assertTrue(Crypto.isRestrictedCertificate(null, globStringsMatcher)); assertTrue(Crypto.isRestrictedCertificate(null, null)); assertFalse(Crypto.isRestrictedCertificate(cert, globStringsMatcher));
assertFalse(zmsImpl.isValidCORSOrigin(null)); assertFalse(zmsImpl.isValidCORSOrigin(""));
assertNotNull(accessJws);
assertEquals(400, ex.getCode()); assertEquals(400, ex.getCode()); assertEquals(400, ex.getCode()); assertEquals(400, ex.getCode());
assertTrue(true); assertTrue(true);
assertEquals(ex.getCode(), 400);
assertFalse(zms.matchPrincipalInRole(role, null, "user.user23", null));
assertEquals("coretech", zts.retrieveTenantDomainName("storage.tenant.coretech.admin", "storage")); assertEquals("coretech", zts.retrieveTenantDomainName("storage.tenant.coretech.admin", null));
assertNotNull(principal); assertTrue(AuthzHelper.authorityAuthorizationAllowed(principal));
assertFalse(authz.access("op", "resource", principal, null));
assertNull(athenzDomain);
assertEquals(authority.authenticate(null, null, null, null), null);
assertEquals(notifications, new ArrayList<>());
assertNotNull(name);
assertTrue(true); assertTrue(true);
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120);
assertEquals(dnsNames.get(0), "production.athenz.ostk.athenz.cloud"); assertEquals(dnsNames.get(1), "1001.instanceid.athenz.ostk.athenz.cloud");
assertTrue(zts.compareRoleSets(set1, set2)); assertFalse(zts.compareRoleSets(set1, set2)); assertFalse(zts.compareRoleSets(set1, set2)); assertTrue(zts.compareRoleSets(set1, set2));
assertEquals(serverHostName, ZTSImpl.getServerHostName()); assertEquals("server1.athenz", ZTSImpl.getServerHostName());
assertEquals(expected.getCode(), 401);
assertNotNull(domain);
assertEquals(10, (meta.getLatestVersion().intValue())); assertEquals("templateWithService", meta.getTemplateName());
assertEquals(quotaCheck.getListSize(null), 0); assertEquals(quotaCheck.getListSize(list), 0); assertEquals(quotaCheck.getListSize(list), 1); assertEquals(quotaCheck.getListSize(list), 3);
assertTrue(AuthzHelper.matchDelegatedTrustAssertion(assertion, "weather:role.Role", "user.user2", roles, nullFetcher));
assertFalse(zms.dbService.updateGroupMemberDisabledState(mockDomRsrcCtx, mockJdbcConn, groupMembers, domainName, groupName, adminUser, auditRef, "unit-test"));
assertNotNull(parser); assertNotNull(getFieldValue.apply(f, parser)); assertNotNull(parser); assertNotNull(getFieldValue.apply(f, parser)); assertNotNull(parser); assertNotNull(getFieldValue.apply(f, parser));
assertNull(fstore.getServerSignedDomain("athenz"));
assertEquals(m, 300); assertEquals(principalAuthority.userDomain, "user");
assertTrue(true, "Caught expected CryptoException"); assertTrue(true, "Caught FileNotFoundException while");
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertEquals(notifications.size(), 1); assertEquals(notifications.get(0), expectedNotification);
assertTrue(requestSuccess);
assertEquals(ConfigProperties.retrieveConfigSetting("unknown", 10), 10);
assertFalse(fileconnection.delete("zms"));
assertFalse(dbService.shouldRetryOperation(null, 0)); assertFalse(dbService.shouldRetryOperation(null, 1)); assertTrue(dbService.shouldRetryOperation(exc, 2)); assertTrue(dbService.shouldRetryOperation(exc, 2)); assertFalse(dbService.shouldRetryOperation(exc, 2)); assertFalse(dbService.shouldRetryOperation(exc, 2)); assertFalse(dbService.shouldRetryOperation(exc, 2)); assertFalse(dbService.shouldRetryOperation(exc, 2));
assertTrue(store.parseInstanceInfo(AWS_INSTANCE_DOCUMENT)); assertEquals(store.awsRegion, "us-west-2");
assertNotNull(certReq); assertTrue(certReq.validateCommonName("athenz.production")); assertEquals(certReq.getCommonName(), "athenz.production"); assertFalse(certReq.validateCommonName("sys.production")); assertFalse(certReq.validateCommonName("athenz.storage"));
assertFalse(noOpRateLimitFactory.create().filter(new MockHttpServletRequest(), new MockHttpServletResponse()));
assertEquals(entry.getId(), "0"); assertEquals(entry.getKey(), ZTS_Y64_CERT0);
assertTrue(uris.isEmpty()); assertTrue(uris.isEmpty());
assertNull(client);
assertNotNull(src);
assertEquals(zms.normalizeDomainAliasUser("user.user"), "user.user"); assertEquals(zms.normalizeDomainAliasUser("user.user2"), "user.user2"); assertEquals(zms.normalizeDomainAliasUser("user.user1"), "user.user1"); assertEquals(zms.normalizeDomainAliasUser("coretech.storage"), "coretech.storage"); assertEquals(zms.normalizeDomainAliasUser("user1"), "user1");
assertFalse(AthenzUtils.isRoleCertificate(cert));
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 401);
assertEquals(expected.getCode(), 403); assertEquals(expected.getMessage(), "ResourceException (403): mTLS Restricted");
assertFalse(store.processDomainDeletes());
assertNotNull(roleList); assertEquals(roleList.getNames().size(), 2); assertNotNull(roleList); assertEquals(roleList.getNames().size(), 1); assertFalse(roleList.getNames().contains(roleName)); assertTrue(roleList.getNames().contains("admin"));
assertFalse(check.isTargetPrincipal(null,null));
assertNotNull(store);
assertNotNull(notificationManager);
assertNotNull(schema);
assertNull(athenzDomain);
assertFalse(provider.verifyInstanceIdentity(info, "1234"));
assertFalse(certReq.validate(roles, "coretech", "sports.api", "proxy.user", orgValues));
assertEquals(ex.getCode(), 404);
assertNotNull(certReq); assertEquals(Crypto.extractX509CSRCommonName(certReq), "athenz.syncer"); assertEquals(Crypto.extractX509CSRSubjectOField(certReq), "My Test Company"); assertNull(Crypto.extractX509CSRSubjectOUField(certReq)); assertNull(Crypto.extractX509CSREmail(certReq));
assertTrue(result); assertFalse(result); assertFalse(result);
assertTrue(result);
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 1200); assertEquals(zts.determineTokenTimeout(data, roles, null, null), 1500);
assertEquals(new String(data, StandardCharsets.UTF_8), NO_PADDING);
assertNotNull(privKey);
assertNotNull(roleList); assertTrue(true); assertTrue(true); assertTrue(true); assertTrue(true);
assertNotNull(certReq); assertEquals(certReq.getUriHostname(), "abc.athenz.com"); assertNotNull(certReq); assertEquals(certReq.getUriHostname(), "abc.athenz.com");
assertNotNull(certReq); assertEquals(Crypto.extractX509CSRDnsNames(certReq), dnsNames);
assertNotNull(publicKey); assertEquals("Value1", publicKey.getKey()); assertEquals("zone1", publicKey.getId());
assertEquals(ConfigProperties.getPortNumber("athenz.port", 4080), 4080);
assertTrue(true);
assertEquals("ZTS On AWS Health Notification", description);
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), 100, null), roleTokenDefaultTimeout);
assertTrue(true);
assertEquals(ex.getCode(), 404);
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertTrue(true);
assertNull(InstanceUtils.getInstanceProperty(null, "cloudAccount")); assertNull(InstanceUtils.getInstanceProperty(attributes, "cloudAccount")); assertNull(InstanceUtils.getInstanceProperty(attributes, "cloudAccount")); assertEquals(InstanceUtils.getInstanceProperty(attributes, "cloudAccount"), "1235");
assertFalse(accessToken.confirmMTLSBoundToken(cert, "cnf-hash"));
assertNotNull(user); assertTrue(user.getIssueTime() != 0); assertTrue(prToken.validate(servicePublicKeyStringK1, 0, false)); assertEquals(prToken.getKeyId(), "1");
assertFalse(status);
assertFalse(certReq.validate(roles, "athenz", "athenz.production", "proxy.user", orgValues));
assertFalse(verifier1.verify("athenz", session));
assertNotNull(check); assertEquals(check,"{\\"policies\\":[{\\"assertions\\":[{}]}]}"); assertNotNull(check); assertEquals(check,"{\\"policies\\":[{}]}");
assertNull(store.getUpdatedSignedDomains(str)); assertNotNull(retDoamins); assertEquals(retDoamins.getDomains().size(), 1); assertEquals(retDoamins.getDomains().get(0).getDomain().getName(), "athenz"); assertNull(store.getUpdatedSignedDomains(str));
assertEquals(ex.getCode(), 404);
assertNull(jwt.getClientId());
assertTrue(certReq.validate("athenz.production", "proxy.service", orgValues)); assertTrue(certReq.validate("athenz.production", "proxy.service", null)); assertFalse(certReq.validate("athenz.api", "proxy.service", orgValues)); assertFalse(certReq.validate("athenz.production", "proxy.api", orgValues)); assertFalse(certReq.validate("athenz.production", "proxy.service", orgValues2));
assertNull(client);
assertTrue(true);
assertEquals(store.publicKeyCache.size(), 1); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0"));
assertNotNull(resAthenzDomain.getRoles()); assertEquals(members.size(), 1); assertEquals(members.get(0), "user.admin");
assertEquals(3, services.size()); assertEquals("aservice", services.get(0)); assertEquals("bservice", services.get(1)); assertEquals("zservice", services.get(2));
assertNotNull(instanceCertManager);
assertTrue(requestSuccess);
assertNotNull(con); assertTrue(result); assertNotNull(certRecordCheck); assertNull(certRecordCheck);
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, null, null, null, nullFetcher));
assertNotNull(virtualDomain); assertNotNull(roles); assertNotNull(adminRole); assertEquals(roleMembers.size(), 1); assertEquals(roleMembers.get(0).getMemberName(), "user.user1"); assertNotNull(policies); assertNotNull(adminPolicy);
assertEquals(accessibleRoles.size(), 2); assertTrue(accessibleRoles.contains("admin")); assertTrue(accessibleRoles.contains("readers"));
assertEquals(3, domains.size()); assertEquals("adomain", domains.get(0)); assertEquals("bdomain", domains.get(1)); assertEquals("zdomain", domains.get(2));
assertNotNull(principal); assertFalse(zms.isSysAdminUser(principal));
assertNotNull(idJws);
assertEquals(exception.getCode(), ResourceException.NOT_FOUND); assertEquals(exception.getData().toString(), "{code: 404, message: \\"unknown principal - johndoe\\"}");
assertFalse(isEnabled); assertFalse(isEnabled);
assertTrue(certReq.validateIPAddress(cert, "10.11.12.13")); assertFalse(certReq.validateIPAddress(cert, "10.10.11.12"));
assertNotNull(certReq); assertSame(ztsImpl.validateServiceX509RefreshRequest(principal, certReq, "10.0.0.1"), ServiceX509RefreshRequestStatus.SUCCESS);
assertTrue(true);
assertNull(store.getCurveName(spec, false));
assertNull(zms.getUserAuthorityExpiry("user.john", role.getUserAuthorityExpiration(), "unit-test")); assertNotNull(zms.getUserAuthorityExpiry("user.john", role.getUserAuthorityExpiration(), "unit-test")); assertTrue(ex.getMessage().contains("User does not have required user authority expiry configured"));
assertFalse(token.validate(servicePublicKeyStringK0, 3600, false)); assertFalse(token.validate(servicePublicKeyStringK0, 3600, false, null)); assertFalse(token.validate(servicePublicKeyStringK0, 3600, false, errMsg)); assertTrue(!errMsg.toString().isEmpty());
assertEquals(503, ex.getCode());
assertTrue(result); assertTrue(result); assertTrue(result);
assertTrue(true); assertEquals(ex.getCode(), 400);
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1"); assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1"); assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1");
assertNotNull(accessJws);
assertEquals(fetchedRoles.size(), 1); assertEquals(fetchedRoles.get(0).getName(), "coretech:role.admin"); assertEquals(fetchedRoles.size(), 0);
assertNull(ex.getMessage()); assertEquals(500, ex.getCode());
assertEquals(authority.getCredSource(), CredSource.REQUEST);
assertTrue(validateDueDate(stamp.millis(), ext125Millis)); assertTrue(validateDueDate(stamp.millis(), ext100Millis)); assertNull(members.get(2).getReviewReminder()); assertTrue(validateDueDate(stamp.millis(), ext100Millis));
assertEquals(dataCache.getMemberCount(), 0); assertEquals(dataCache.getMemberCount(), 0); assertEquals(dataCache.getMemberCount(), 0);
assertNotNull(con); assertEquals(con.deleteExpiredSSHCertRecords(0), 0);
assertFalse(zms.matchPrincipalInRole(role, null, null, null)); assertFalse(zms.matchPrincipalInRole(role, null, null, "weather"));
assertEquals(ex.getCode(), 400);
assertEquals(9, jdbcConn.getGroupId(7, "group1")); assertEquals(9, jdbcConn.getGroupId(7, "group1"));
assertNotNull(retMember); assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 400);
assertEquals(ex.getCode(), 404);
assertEquals(provider.getProviderScheme(uri), ProviderScheme.UNKNOWN);
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "1.2.3.4");
assertNotNull(athenzDomain); assertEquals(athenzDomain.getName(), "user.user1");
assertNull(identity);
assertTrue(ex.getMessage().contains("Invalid Role"), ex.getMessage());
assertEquals(expected.getCode(), 500);
assertNull(cert.getPem()); assertEquals(cert.getPem(), "pem-value"); assertEquals(cert.getExpiryTime().intValue(), 30); assertEquals(cert.getX509ExtKeyUsage(), extKeyUsage);
assertTrue(true);
assertTrue(true); assertTrue(true);
assertNull(AthenzUtils.extractServicePrincipal(cert));
assertNotNull(ctx); assertNotNull(ctx.context()); assertNull(ctx.principal()); assertEquals(ctx.request(), mockServletRequest); assertEquals(ctx.response(), mockServletResponse); assertEquals(401, ex.getCode()); assertEquals( ((ResourceError) ex.data).message, "failed struct");
assertEquals(ResourceException.INTERNAL_SERVER_ERROR, rEx.getCode()); assertEquals(ResourceException.INTERNAL_SERVER_ERROR, rEx.getCode()); assertEquals(ResourceException.SERVICE_UNAVAILABLE, rEx.getCode());
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20L), 100L); assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20L), 0); assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20L), -100L);
assertFalse(result);
assertFalse(provider.verifyInstanceIdentity(info, "1234"));
assertNull(cstore.retrieveLastModificationTime()); assertEquals(cstore.retrieveLastModificationTime(), now); assertNull(cstore.retrieveLastModificationTime());
assertNotNull(entity2); assertEquals(entity2.getName(), entityName); assertEquals("Value1", value.getString("Key1"));
assertTrue(accessibleRoles.isEmpty());
assertEquals(svcList.getNames().size(), 2); assertTrue(svcList.getNames().contains("storage")); assertTrue(svcList.getNames().contains("backup"));
assertTrue(true);
assertNotNull(ex); assertEquals(ex.getMessage(), "err msg"); assertSame(ex.getCause(), t);
assertTrue(zms.isVirtualDomain("user.user1")); assertTrue(zms.isVirtualDomain("user.user2")); assertTrue(zms.isVirtualDomain("user.user1.sub1")); assertTrue(zms.isVirtualDomain("user.user1.sub2.sub3")); assertFalse(zms.isVirtualDomain("user")); assertFalse(zms.isVirtualDomain("usertest")); assertFalse(zms.isVirtualDomain("coretech.api"));
assertNotNull(quota); assertEquals(quota.getAssertion(), 10); assertEquals(quota.getRole(), 14); assertEquals(quota.getPolicy(), 12);
assertEquals(0, dbConn.deleteExpiredX509CertRecords(100)); assertEquals(0, dbConn.deleteExpiredX509CertRecords(100000));
assertNotNull(certReq); assertFalse(certReq.validateSubjectOUField("Athenz", null, null)); assertFalse(certReq.validateSubjectOUField("Yahoo", null, null));
assertNotNull(certReq); assertFalse(certReq.validateDnsNames(cert));
assertTrue(true);
assertTrue(mr1.equals(mr1)); assertFalse(mr1.equals(null)); assertFalse(mr1.equals("string")); assertTrue(mr1.equals(mr2)); assertFalse(mr1.equals(mr3)); assertFalse(mr4.equals(mr1)); assertTrue(mr4.equals(mr5)); assertFalse(mr1.equals(mr6));
assertEquals(zmsImpl.getModTimestamp(null), 0); assertEquals(zmsImpl.getModTimestamp("\\"\\""), 0); assertEquals(zmsImpl.getModTimestamp(""), 0);
assertEquals(store.hostCache.size(), 2); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertTrue(true); assertTrue(true);
assertFalse(dynamoDBClientSettings.areCredentialsProvided());
assertEquals(store.generateServiceKeyName("coretech", "storage", "3"), "coretech.storage_3");
assertTrue(ex.getMessage().contains("CSR is null")); assertTrue(ex.getMessage().contains("CSR is null")); assertTrue(true, "Caught expected crypto exception");
assertEquals(new String(data, StandardCharsets.UTF_8), DOUBLE_PADDING);
assertTrue(requestSuccess);
assertNotNull(YBase64.encode(data));
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(null, null, null, "", null));
assertTrue(zms.isConsistentRoleName("domain1", "role1", role)); assertTrue(zms.isConsistentRoleName("domain1", "role1", role)); assertEquals(role.getName(), "domain1:role.role1"); assertFalse(zms.isConsistentRoleName("domain1", "role2", role)); assertFalse(zms.isConsistentRoleName("domain1", "role2", role));
assertNotNull(Crypto.ybase64EncodeString("testString"));
assertNull(zts.logPrincipalAndGetDomain(ctx));
assertNull(AthenzUtils.extractServicePrincipal(cert)); assertNull(AthenzUtils.extractServicePrincipal(cert));
assertEquals(originalGroupMembers.size(), expectedSize);
assertNull(ex.getMessage()); assertEquals(500, ex.getCode());
assertEquals(exc.getData(Integer.class), new Integer(5000));
assertTrue(result); assertFalse(result);
assertTrue(requestSuccess);
assertTrue(certs.length == 3); assertTrue(certs.length == 3);
assertEquals(ex.getCode(), 404);
assertNotNull(key); assertNull(key);
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertEquals(404, ex.getCode()); assertEquals(501, ex.getCode());
assertEquals(encodedInt1, new String(encoder.encode(store.toIntegerBytes(bigInt1, true))));
assertNotNull(dynamoDBClient);
assertNull(p);
assertNull(athenzDomain);
assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertFalse(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion));
assertEquals(notifications, new ArrayList<>());
assertNull(servletRequest.getAttribute("com.yahoo.athenz.auth.principal")); assertEquals(servletRequest.getAttribute("com.yahoo.athenz.auth.principal"), "hockey.kings"); assertEquals(servletRequest.getAttribute("com.yahoo.athenz.auth.authority_id"), "Auth-NTOKEN");
assertNotNull(group); assertNotNull(members); assertEquals(members.size(), 1);
assertEquals(403, ex.getCode());
assertFalse(AuthzHelper.isMemberOfRole(role, "user.joe", devTeamFetcher));
assertTrue(updatedRole.getAuditEnabled()); assertEquals(ex.getCode(), 400);
assertEquals(exc.getCode(), 403); assertEquals(exc.getMessage(), "ResourceException (403): unable to access");
assertTrue(zms.hasExceededDepthLimit(0, "domain.sub1")); assertTrue(zms.hasExceededDepthLimit(1, "domain.sub1.sub2")); assertTrue(zms.hasExceededDepthLimit(1, "domain.sub1.sub2.sub3")); assertTrue(zms.hasExceededDepthLimit(2, "domain.sub1.sub2.sub3"));
assertEquals(ConfigProperties.getPortNumber("athenz.port", 4080), 4085);
assertTrue(certReq.validatePublicKeys(ztsPublicKey));
assertNotNull(signedDomain); assertEquals(signedDomain.getDomain().getName(), "athenz"); assertNull(fstore.getServerSignedDomain("coretech"));
assertEquals(true, ZTSUtils.parseBoolean(null, true)); assertEquals(false, ZTSUtils.parseBoolean(null, false)); assertEquals(true, ZTSUtils.parseBoolean("", true)); assertEquals(false, ZTSUtils.parseBoolean("", false)); assertEquals(true, ZTSUtils.parseBoolean("true", false)); assertEquals(false, ZTSUtils.parseBoolean("false", true)); assertEquals(false, ZTSUtils.parseBoolean("unknown", false));
assertTrue(requestSuccess);
assertEquals(e.getCode(), 404);
assertEquals(3, policies.size()); assertEquals("apolicy", policies.get(0)); assertEquals("bpolicy", policies.get(1)); assertEquals("zpolicy", policies.get(2));
assertFalse(zms.isValidUserTokenRequest(principal, "user1"));
assertFalse(zms.dbService.isTrustRole(null)); assertFalse(zms.dbService.isTrustRole(role)); assertFalse(zms.dbService.isTrustRole(role)); assertTrue(zms.dbService.isTrustRole(role));
assertNotNull(store);
assertTrue(true);
assertNull(hosts.getNames());
assertEquals(ex.getCode(), 204); assertEquals(ex.getCode(), 400);
assertEquals(accessibleRoles.size(), 0);
assertNull(ZTSClient.multipleRoleKey(null)); assertNull(ZTSClient.multipleRoleKey(roles)); assertEquals(ZTSClient.multipleRoleKey(roles), "role"); assertEquals(ZTSClient.multipleRoleKey(roles), "apple,one,ones,role,yellow"); assertEquals(ZTSClient.multipleRoleKey(unmRoles), "apple,one,ones,role,yellow");
assertEquals(certs1, certs2); assertEquals(certs1, certs1); assertEquals(Collections.singletonList(cert), certs1.getCertificates()); assertNotEquals(certs1, certs2); assertEquals(certs1, certs2); assertNotEquals(certs1, certs2); assertEquals("signer", certs2.getCertificateSigner()); assertNotEquals(certs1, certs2); assertEquals(certs1, certs2); assertNotEquals(certs2, null); assertNotEquals("certs", certs1);
assertNotNull(role); assertEquals(role.getName(), "GetRoleDom1:role.Role1".toLowerCase()); assertNull(role.getTrust()); assertNotNull(members); assertEquals(members.size(), 2);
assertTrue(zms.isZMSService("sys.auth", "zms")); assertTrue(zms.isZMSService("sys.Auth", "ZMS")); assertTrue(zms.isZMSService("SYS.AUTH", "ZMS"));
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1"));
assertEquals("OnShore-US", zms.dbService.getDomainUserAuthorityFilterFromMap(null, map, "coretech")); assertTrue(zms.dbService.getDomainUserAuthorityFilterFromMap(conn, map, "coretech").isEmpty()); assertTrue(zms.dbService.getDomainUserAuthorityFilterFromMap(conn, map, "coretech").isEmpty()); assertEquals("OnShore-US", zms.dbService.getDomainUserAuthorityFilterFromMap(conn, map, "coretech"));
assertTrue(true); assertTrue(true);
assertEquals(store.generateServiceKeyName(domain, service, "2"), expectedValue);
assertFalse(zms.hasExceededDepthLimit(null, "domain"));
assertNotNull(certReq); assertTrue(certReq.validatePublicKeys(cert));
assertEquals(ls.size(), 2); assertTrue(ls.contains("test1")); assertTrue(ls.contains("test3"));
assertNull(zms.getPrincipalDomain(ctx));
assertEquals(zms.normalizeDomainAliasUser("coretech.storage"), "coretech.storage"); assertEquals(zms.normalizeDomainAliasUser("weather.storage.api"), "weather.storage.api"); assertEquals(zms.normalizeDomainAliasUser("weather.entity.api"), "weather.entity.api"); assertEquals(zms.normalizeDomainAliasUser("weather.storage.service.*"), "weather.storage.service.*");
assertNull(signedDomain); assertNotNull(signedDomain); assertNotNull(domainData); assertEquals(domainData.getName(), "iaas"); assertNotNull(signedDomain);
assertFalse(restrictedCertificate);
assertEquals(2, uris.size());
assertEquals(404, ex.getCode());
assertTrue(true);
assertFalse(accessToken.confirmX509CertPrincipal(cert, "athenz.proxy"));
assertFalse(zms.matchRole("domain", new ArrayList<>(), "domain:role\\\\.role2.*", null));
assertNotNull(rollTokenToValidate.getSignedToken()); assertEquals(rollTokenToValidate.getDomain(), svcDomain); assertEquals(rolesToValidate.size(), roles.size()); assertEquals(rolesToValidate, roles); assertEquals(rollTokenToValidate.getKeyId(), testKeyVersionK1); assertFalse(rollTokenToValidate.validate(ztsPublicKeyStringK1, 300, false));
assertEquals(store.publicKeyCache.size(), 1); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0"));
assertEquals("arn:aws:iam::1234:role/admin", req.getRoleArn()); assertEquals("athenz-zts-service", req.getRoleSessionName()); assertNull(req.getDurationSeconds()); assertNull(req.getExternalId()); assertEquals("arn:aws:iam::12345:role/adminuser", req.getRoleArn()); assertEquals("athenz-zts-service", req.getRoleSessionName()); assertEquals(Integer.valueOf(101), req.getDurationSeconds()); assertEquals("external", req.getExternalId());
assertNotNull(src);
assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE); assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);
assertFalse(keyRefresher.haveFilesBeenChanged("testfile", checksum)); assertFalse(keyRefresher.haveFilesBeenChanged("testfile", checksum));
assertNull(trustManagerProxy.getAcceptedIssuers());
assertNull(svc.readBinaryFromFile("resources/non-existent"));
assertNull(accessToken.getX509CertificateHash(mockCert));
assertEquals(store.hostCache.size(), 3); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 3); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertTrue(retServices.contains("sports.storage")); assertEquals(retServices.size(), 1); assertTrue(retServices.contains("sports.storage"));
assertTrue(true);
assertNotNull(statusChecker);
assertEquals(404, e.getCode());
assertTrue(requestSuccess);
assertNotNull(dynamoDBClientFetcher);
assertTrue(certReq.validate(roles, "coretech", "sports.api", "proxy.user", orgValues)); assertFalse(certReq.validate(roles, "coretech", "sports.api", "proxy2.user", orgValues));
assertNotNull(store.getConnection());
assertNotNull(store.getDomainData("sports")); assertNotNull(store.getDomainData("coretech"));
assertFalse(restrictedCertificate);
assertTrue(zms.isConsistentGroupName("domain1", "group1", group)); assertTrue(zms.isConsistentGroupName("domain1", "group1", group)); assertEquals(group.getName(), "domain1:group.group1"); assertFalse(zms.isConsistentGroupName("domain1", "group2", group)); assertFalse(zms.isConsistentGroupName("domain1", "group2", group));
assertEquals(503, ex.getCode());
assertEquals("e5e97240-e94e-11e4-8163-6d083f3f473f", jdbcConn.processInsertUuidValue(UUID.fromString("e5e97240-e94e-11e4-8163-6d083f3f473f"))); assertEquals("", jdbcConn.processInsertUuidValue(null));
assertEquals(userTokenToValidate.getVersion(), usrVersion); assertEquals(userTokenToValidate.getDomain(), usrDomain); assertEquals(userTokenToValidate.getName(), usrName); assertNull(userTokenToValidate.getHost()); assertEquals(userTokenToValidate.getSalt(), salt); assertTrue(userTokenToValidate.validate(servicePublicKeyStringK0, 300, false));
assertEquals("caCert", instanceManager.getX509CertificateSigner()); assertEquals("caCert", instanceManager.getX509CertificateSigner());
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 60); assertEquals(zts.determineRoleCertTimeout(data, roles, 120), 60); assertEquals(zts.determineRoleCertTimeout(data, roles, -1), 60); assertEquals(zts.determineRoleCertTimeout(data, roles, 30), 30);
assertEquals(result.size(), 4); assertTrue(result.contains("principal1")); assertTrue(result.contains("principal2")); assertTrue(result.contains("principal4")); assertTrue(result.contains("principal5"));
assertFalse(Validate.domainName("domain$sub")); assertFalse(Validate.domainName("coretech:domain")); assertFalse(Validate.domainName("")); assertFalse(Validate.domainName(null));
assertEquals(zts.determineRoleCertTimeout(data, roles, 120), 120); assertEquals(zts.determineRoleCertTimeout(data, roles, -1), 0); assertEquals(zts.determineRoleCertTimeout(data, roles, 60), 60);
assertEquals("test1", jdbcConn.processInsertValue("test1")); assertEquals("", jdbcConn.processInsertValue((String) null));
assertEquals(wrapper.principal(), prin);
assertTrue(certReq.validate(roles, "coretech", "sports.api", null, orgValues));
assertTrue(fileconnection.lookupDomainByRole("member1", "role1").isEmpty());
assertNotNull(entity2); assertEquals(entity2.getName(), "Entity1".toLowerCase());
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0);
assertNotNull(ex); assertEquals(ex.getMessage(), "err msg"); assertSame(ex.getCause(), t);
assertNotNull(certId); assertEquals(certId.getRoles(), Arrays.asList("coretech:role.readers", "coretech:role.writers"));
assertTrue(result);
assertNotNull(certReq); assertFalse(certReq.validatePublicKeys(ztsPublicKey));
assertEquals(ZTSUtils.getApplicationSecret(null, "appname", "pass"), "pass"); assertEquals(ZTSUtils.getApplicationSecret(keyStore, null, "pass"), "app234"); assertEquals(ZTSUtils.getApplicationSecret(keyStore, "appname", "passname"), "app123");
assertEquals(7, jdbcConn.getDomainId("my-domain")); assertEquals(7, jdbcConn.getDomainId("my-domain"));
assertNull(svcList.getNames()); assertEquals(svcList.getNames().size(), 0); assertEquals(svcList.getNames().size(), 0); assertEquals(svcList.getNames().size(), 1); assertEquals(svcList.getNames().get(0), "storage"); assertEquals(svcList.getNames().size(), 2); assertEquals(svcList.getNames().get(0), "storage"); assertEquals(svcList.getNames().get(1), "api");
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), null, -10), roleTokenDefaultTimeout);
assertTrue(zms.verifyServicePublicKeys(service));
assertTrue(true);
assertEquals("athenz.api", Http.authorizedUser(httpServletRequest, authorities, authorizer, "action", "resource", null));
assertNotNull(zms.auditReferenceValidator);
assertNotNull(principal); assertTrue(AuthzHelper.authorityAuthorizationAllowed(principal));
assertTrue(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertTrue(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertTrue(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion)); assertTrue(AuthzHelper.assumeRoleResourceMatch("domain1:role.role1", assertion));
assertNotNull(src);
assertEquals(propValue, null); assertEquals(propValue, ""); assertEquals(propValue, "default_value"); assertEquals(propValue, "test_value"); assertEquals(propValue, "test_value"); assertEquals(propValue, "test_value");
assertEquals(3, templates.size()); assertEquals("platforms", templates.get(0)); assertEquals("user_understanding", templates.get(1)); assertEquals("vipng", templates.get(2));
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), null, null), roleTokenDefaultTimeout);
assertNotNull(client);
assertNull(certRecord.getSvcDataUpdateTime()); assertNotNull(certRecord.getSvcDataUpdateTime()); assertNotNull(certRecord.getSvcDataUpdateTime());
assertTrue(a.getGranted());
assertFalse(ret); assertFalse(ret);
assertFalse(role.getAuditEnabled()); assertTrue(role.getSelfServe());
assertEquals(0, dbConn.deleteExpiredSSHCertRecords(100)); assertEquals(0, dbConn.deleteExpiredSSHCertRecords(100000));
assertTrue(ex instanceof RuntimeException);
assertTrue(true);
assertEquals(e.getCode(), code);
assertEquals(404, e.getCode());
assertNotNull(accessJws);
assertEquals(expected.getCode(), 400);
assertEquals(404, e.getCode());
assertTrue(ls.isEmpty());
assertEquals(policyList.size(), 0);
assertNotNull(policyRes2); assertEquals(policyRes2.getName(), domainName + ":policy." + policyName);
assertNotNull(certId); assertEquals(certId.getDomain(), "domain"); assertEquals(certId.getService(), "service"); assertEquals(certId.getRoles(), Arrays.asList("role_1", "role_2")); assertSame(certId.getX509Certificate(), cert);
assertTrue(true); assertTrue(true);
assertNotNull(certId); assertEquals(certId.getDomain(), "athenz"); assertEquals(certId.getService(), "syncer"); assertNull(certId.getRoles());
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20L), 20L);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertNotNull(cert); assertEquals(cert.getSubjectX500Principal().getName(), "CN=athenz.syncer,O=My Test Company,L=Sunnyvale,ST=CA,C=US");
assertFalse(fileconnection.updatePendingRoleMembersNotificationTimestamp("localhost", 0L, 0));
assertFalse(result); assertFalse(result);
assertNotNull(generatedQuery); assertEquals(generatedQuery, expectedQuery);
assertNull(zms.dbService.getRoleExpiryMembers(1));
assertEquals(accessibleRoles.size(), 0);
assertTrue(true);
assertNull(pubKey);
assertNotNull(container);
assertNotNull(check); assertEquals(check,"{\\"roleCertExpiryMins\\":0,\\"roles\\":[],\\"serviceCertExpiryMins\\":0,\\"services\\":[],\\"ypmId\\":0}");
assertNotNull(policyList); assertEquals(policyList.getNames().size(), 4); assertTrue(policyList.getNames().contains("Policy1".toLowerCase())); assertTrue(policyList.getNames().contains("Policy2".toLowerCase())); assertTrue(policyList.getNames().contains("Policy3".toLowerCase()));
assertNotNull(eTag); assertEquals(eTag.getValue(), "etag");
assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS)); assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN)); assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
assertFalse(AuthzHelper.isMemberDisabled(null)); assertFalse(AuthzHelper.isMemberDisabled(0)); assertTrue(AuthzHelper.isMemberDisabled(1)); assertTrue(AuthzHelper.isMemberDisabled(2));
assertEquals(zms.memberDueDateTimestamp(null, null, Timestamp.fromMillis(100)), Timestamp.fromMillis(100)); assertEquals(zms.memberDueDateTimestamp(-1, 0, Timestamp.fromMillis(100)), Timestamp.fromMillis(100)); assertEquals(zms.memberDueDateTimestamp(-3, -2, Timestamp.fromMillis(100)), Timestamp.fromMillis(100)); assertTrue(validateDueDate(stamp.millis(), ext50Millis)); assertTrue(validateDueDate(stamp.millis(), ext75Millis));
assertFalse(result);
assertEquals(svcList.getNames().size(), 0);
assertFalse(globStringsMatcher.isEmptyPatternsList()); assertTrue(globStringsMatcher.isEmptyPatternsList()); assertTrue(globStringsMatcher.isEmptyPatternsList());
assertEquals(e.getMessage(), "Invalid role cert, invalid email SAN entry"); assertNull(certId);
assertFalse(cloudStore.removeExpiredCredentials()); assertTrue(cloudStore.removeExpiredCredentials());
assertTrue(true);
assertEquals(404, ex.getCode());
assertFalse(result);
assertNotNull(recipientsRes); assertTrue(recipientsRes.contains("user.joe"));
assertTrue(true);
assertNotNull(con); assertEquals(con.deleteExpiredX509CertRecords(0), 0);
assertEquals(accessibleRoles.size(), 0);
assertNotNull(retMembers); assertEquals(retMembers.getMembers().get(0).getMemberName(), "athenz.api"); assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertSame(argument.getValue(), certs);
assertNull(authority.getHeader());
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1"));
assertEquals(3, roles.size()); assertEquals("arole", roles.get(0)); assertEquals("brole", roles.get(1)); assertEquals("zrole", roles.get(2));
assertNotNull(user); assertTrue(user.getIssueTime() != 0); assertTrue(prToken.validate(servicePublicKeyStringK0, 0, false)); assertEquals(prToken.getKeyId(), "0");
assertEquals(store.publicKeyCache.size(), 0);
assertTrue(true); assertTrue(true);
assertEquals(ex.getCode(), 400);
assertFalse(store.roleMatchInSet("expired", checkSet)); assertTrue(store.roleMatchInSet("notexpired", checkSet));
assertEquals(store.publicKeyCache.size(), 3); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0")); assertTrue(store.publicKeyCache.containsKey("sports.storage_0")); assertTrue(store.publicKeyCache.containsKey("sports.storage_1"));
assertTrue(result);
assertEquals(new ArrayList<>(), notifications);
assertNotNull(jwsDomain); assertEquals(new String(decoder.decode(protectedHeader.getBytes(StandardCharsets.UTF_8))), "{\\"alg\\":\\"RS256\\"}"); assertTrue(Crypto.verify(data.getBytes(StandardCharsets.UTF_8), Crypto.extractPublicKey(zms.privateKey.getKey()), sig, Crypto.SHA256)); assertNotNull(domainData); assertEquals(domainData.getName(), "jws-domain"); assertEquals(header.get("keyid"), "0");
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertNull(provider); assertNotNull(provider); assertNotNull(provider); assertNotNull(provider); assertNotNull(provider); assertNull(provider);
assertEquals(e.getCode(), 404);
assertEquals(tenantRoles.getDomain(), "coretech"); assertEquals(tenantRoles.getService(), "storage"); assertEquals(tenantRoles.getTenant(), "deltenantrolesdom1"); assertEquals(tenantRoles.getResourceGroup(), "hockey");
assertEquals(ex.getCode(), 404);
assertTrue(requestSuccess);
assertNull(ServletRequestUtil.getRemoteAddress(httpServletRequest));
assertEquals(store.publicKeyCache.size(), 1); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0"));
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.standings", null, null, "10.0.0.1"));
assertEquals(e.getMessage(), "Principal is excluded"); assertNull(certId);
assertTrue(zts.validateInstanceId("", null)); assertTrue(zts.validateInstanceId(null, null)); assertFalse(zts.validateInstanceId("1001", cert)); assertTrue(zts.validateInstanceId("1001", cert)); assertFalse(zts.validateInstanceId("1002", cert));
assertTrue(true); assertTrue(true);
assertNotNull(certReq); assertTrue(certReq.validateDnsNames(cert));
assertNotNull(client);
assertFalse(StringUtils.containsControlCharacter("abcd")); assertFalse(StringUtils.containsControlCharacter("abc td")); assertFalse(StringUtils.containsControlCharacter("abc2345423540908d")); assertFalse(StringUtils.containsControlCharacter("abcd!@#$#@%$$^%&%*()_+==")); assertFalse(StringUtils.containsControlCharacter("abc\\\\][\\\\|}{|}d"));
assertEquals(encodedInt2, new String(encoder.encode(store.toIntegerBytes(bigInt2, true))));
assertEquals(authority.getPublicKey("domain", "service", "keyId"), "public_key_in_pem");
assertEquals(roles.size(), 2); assertEquals(list1.length, 1); assertEquals(list1[0], "readers"); assertEquals(list2.length, 2); assertEquals(list2[0], "readers"); assertEquals(list2[1], "writers");
assertTrue(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName, roleName, adminUser, "auditref", "unit-test")); assertFalse(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName, roleName, adminUser, "auditref", "unit-test")); assertFalse(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName, roleName, adminUser, "auditref", "unit-test"));
assertNotNull(privKey);
assertTrue(ZMSUtils.parseBoolean(null, true)); assertFalse(ZMSUtils.parseBoolean(null, false)); assertTrue(ZMSUtils.parseBoolean("", true)); assertFalse(ZMSUtils.parseBoolean("", false)); assertTrue(ZMSUtils.parseBoolean("true", false)); assertFalse(ZMSUtils.parseBoolean("false", true)); assertFalse(ZMSUtils.parseBoolean("unknown", false));
assertEquals(1, rolesFetched.size()); assertEquals("admin", rolesFetched.get(0).getName());
assertTrue(certReq.validateIPAddress(null, "10.11.12.13")); assertFalse(certReq.validateIPAddress(null, "10.10.11.12"));
assertEquals(e.getMessage(), "Invalid role cert, no email SAN entry"); assertNull(certId);
assertNull(context.authenticate());
assertEquals(exc.getMessage(), "ResourceException (400): Bad Request"); assertEquals(exc.getCode(), 400); assertEquals(excObj.getMessage(), "ResourceException (403): Object String"); assertEquals(excObj.getCode(), 403);
assertEquals("certificate failed refresh notification", description);
assertFalse(svcToken.isValidAuthorizedServiceToken(errMsg)); assertTrue(!errMsg.toString().isEmpty()); assertFalse(svcToken.isValidAuthorizedServiceToken(errMsg)); assertTrue(!errMsg.toString().isEmpty());
assertEquals(store.hostCache.size(), 1); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertEquals(expected.getCode(), 401);
assertTrue(true);
assertEquals("Membership Approval Notification", description);
assertFalse(zms.dbService.validResourceGroupObjectToDelete("role.name", "roles.")); assertFalse(zms.dbService.validResourceGroupObjectToDelete("role.name", "role.name.")); assertFalse(zms.dbService.validResourceGroupObjectToDelete("role.name.test.name", "role.name.")); assertTrue(zms.dbService.validResourceGroupObjectToDelete("role.name.test", "role.name."));
assertTrue(true); assertTrue(true);
assertNotNull(certReq); assertTrue(certReq.validatePublicKeys(ztsPublicKey));
assertNotNull(policy); assertEquals("my-domain:policy.policy1", policy.getName());
assertEquals(ex.getCode(), 404);
assertNotNull(container);
assertEquals(store.publicKeyCache.size(), 3); assertEquals(value, "PublicKey0"); assertEquals(value, "PublicKey100"); assertEquals(value, "PublicKey101");
assertTrue(restrictedCertificate);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(null, null, null, null, null));
assertEquals(encodedInt3, new String(encoder.encode(store.toIntegerBytes(bigInt3, true))));
assertNotNull(checkByte);
assertTrue(requestSuccess);
assertNull(zts.convertEmptyStringToNull(null));
assertTrue(true); assertTrue(true);
assertEquals(ex.getCode(), 404);
assertEquals(msgBuilder.who(), "unsigned-creds");
assertNotNull(quotaRes); assertEquals(quotaRes.getPolicy(), 12); assertEquals(quotaRes.getRole(), 14); assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertEquals(AthenzUtils.getPrincipalName("domain", "service"), "domain.service"); assertEquals(AthenzUtils.getPrincipalName("dDd", "SsS"), "ddd.sss"); assertNull(AthenzUtils.getPrincipalName("domain", null)); assertNull(AthenzUtils.getPrincipalName("domain", "")); assertNull(AthenzUtils.getPrincipalName(null, "service")); assertNull(AthenzUtils.getPrincipalName("", "service"));
assertEquals("scope", response.getScope()); assertEquals("refresh", response.getRefresh_token()); assertEquals("Bearer", response.getToken_type()); assertEquals("id", response.getId_token()); assertEquals("access", response.getAccess_token()); assertTrue(expiry < 100, response.getExpires_in().toString());
assertFalse(certReq.validate(roles, "coretech", "sports.api", "proxy.user", orgValues));
assertEquals("ResourceException (503): DynamoDB table name not specified", ex.getMessage()); assertEquals(503, ex.getCode());
assertFalse(emailResult);
assertNotNull(store.getConnection());
assertEquals(roleAuthority.getAuthenticateChallenge(), "AthenzRoleToken realm=\\"athenz\\"");
assertTrue(keyRefresher.haveFilesBeenChanged(classLoader.getResource("testFile").getPath(), checksum)); assertFalse(keyRefresher.haveFilesBeenChanged(classLoader.getResource("testFile").getPath(), checksum)); assertTrue(keyRefresher.haveFilesBeenChanged(classLoader.getResource("testFile").getPath(), checksum));
assertNotNull(req); assertEquals("sports:role.readers", Crypto.extractX509CSRCommonName(certReq)); assertEquals("coretech.test@aws.athenz.cloud", Crypto.extractX509CSREmail(certReq));
assertNotNull(accessJws); assertNotNull(claims); assertEquals("subject", claims.getBody().getSubject()); assertEquals("coretech", claims.getBody().getAudience()); assertEquals("athenz", claims.getBody().getIssuer()); assertNotNull(scopes); assertEquals(1, scopes.size()); assertEquals("readers", scopes.get(0));
assertNotNull(src); assertNotNull(conn);
assertEquals(zms.getPrincipalDomain(ctx), "sports");
assertNotNull(certReq); assertFalse(certReq.validate("athenz", "production", "provider", null, athenzSysDomainCache, null, null, null, null, errorMsg)); assertTrue(errorMsg.toString().contains("Unable to validate CSR common name"));
assertEquals(returnList.getDomains().size(), 1); assertEquals(returnList.getDomains().get(0).getDomain().getName(), "athenz");
assertTrue(true);
assertEquals(accessibleRoles.size(), 0);
assertFalse(svcToken.isValidAuthorizedServiceToken(errMsg)); assertTrue(!errMsg.toString().isEmpty());
assertEquals(token.getVersion(), svcVersion); assertEquals(token.getDomain(), svcDomain); assertEquals(token.getName(), svcName); assertNull(token.getHost()); assertNotNull(token.getSalt()); assertEquals(token.getKeyId(), "0"); assertNull(token.getIP()); assertTrue(timestamp != 0); assertEquals(token.getExpiryTime(), timestamp + 3600);
assertFalse(provider.validateAWSInstanceId("1234", "12345", errMsg)); assertFalse(provider.validateAWSInstanceId("1234", null, errMsg)); assertTrue(provider.validateAWSInstanceId("1234", "1234", errMsg));
assertNotNull(principal); assertTrue(true);
assertEquals(returnList.size(), 1); assertEquals(returnList.get(0).getDomain().getName(), "athenz");
assertFalse(fileconnection.validatePrincipalDomain("principal"));
assertNull(fstore.retrieveTagHeader(responseHeaders)); assertNull(fstore.retrieveTagHeader(responseHeaders)); assertEquals(fstore.retrieveTagHeader(responseHeaders), "tag1");
assertNotNull(AthenzJettyContainer.getServerHostName());
assertFalse(svcToken.isValidAuthorizedServiceToken(errMsg)); assertTrue(!errMsg.toString().isEmpty());
assertNull(ou); assertEquals("Testing Domain", ou);
assertNull(authority.getDomain());
assertEquals(ldapAuthority.getHeader(), "Authorization");
assertEquals(store.publicKeyCache.size(), 4); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0")); assertTrue(store.publicKeyCache.containsKey("sports.storage_0")); assertTrue(store.publicKeyCache.containsKey("sports.storage_1")); assertTrue(store.publicKeyCache.containsKey("sports.storage_2"));
assertNotNull(src); assertNotNull(conn);
assertNotNull(parser); assertEquals(getFieldValue.apply(f, parser), null); assertEquals(getFieldValue.apply(f, parser), false); assertNotNull(parser); assertEquals(getFieldValue.apply(f, parser), new HashSet<>(Arrays.asList("principal_1", "principal_2"))); assertEquals(getFieldValue.apply(f, parser), true);
assertEquals(3, entities.size()); assertEquals("a-entity", entities.get(0)); assertEquals("b-entity", entities.get(1)); assertEquals("z-entity", entities.get(2));
assertEquals(ResourceException.CONFLICT, ex.getCode());
assertTrue(access.getGranted()); assertTrue(access.getGranted()); assertFalse(access.getGranted()); assertFalse(access.getGranted());
assertTrue(requestSuccess);
assertNotNull(certReq); assertTrue(certReq.validateDnsNames("domain", "service1", "provider", athenzSysDomainCache, null, null, null, null));
assertTrue(verifier1.verify("athenz", session)); assertFalse(verifier2.verify("athenz", session));
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 180);
assertNotNull(certId); assertEquals(certId.getPrincipalName(), "domain.service"); assertNull(certId.getRoles()); assertNull(certId.getX509Certificate());
assertNull(store.getUpdatedSignedDomains(str));
assertEquals(new String(data, StandardCharsets.UTF_8), SINGLE_PADDING);
assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
assertNotNull(userList); assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 400);
assertEquals(e.getCode(), 404);
assertTrue(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1")); assertTrue(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, null, "10.0.0.1"));
assertEquals(accessibleRoles.size(), 0);
assertTrue(true);
assertEquals(ResourceException.INTERNAL_SERVER_ERROR, rEx.getCode()); assertEquals(ResourceException.INTERNAL_SERVER_ERROR, rEx.getCode()); assertEquals(ResourceException.SERVICE_UNAVAILABLE, rEx.getCode());
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 401);
assertTrue(notificationToEmailConverterCommon.readContentFromFile(getClass().getClassLoader(), "resources/dummy").isEmpty());
assertNull(store.getServerSignedDomain("iaas"));
assertEquals(zts.convertEmptyStringToNull("test"), "test");
assertEquals(ex.getMessage(), "S3ChangeLogStore: Couldn\'t detect AWS region");
assertNull(zts.convertEmptyStringToNull(""));
assertFalse(zms.matchPrincipalInRole(role, "Role", "user.user1", "coretech_not_present"));
assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE); assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);
assertEquals(tokenString, "dummy_access_token_1"); assertEquals(tokenString, "dummy_access_token_2"); assertEquals(tokenString, "dummy_access_token_3"); assertEquals(tokenString, null); assertEquals(tokenString, null);
assertNotNull(certReq); assertFalse(certReq.validatePublicKeys((String) null));
assertEquals(assertion.getRole(), "coretech:role.role1"); assertEquals(assertion.getAction(), "read"); assertEquals(assertion.getResource(), "coretech:vip.*"); assertEquals(assertion.getRole(), "coretech:role.role1"); assertEquals(assertion.getAction(), "Read"); assertEquals(assertion.getResource(), "coretech:VIP.*");
assertNotNull(provider.awsPublicKey); assertEquals(provider.bootTimeOffset, 60000);
assertEquals(AthenzUtils.extractPrincipalServiceName("athenz.reader"), "reader"); assertEquals(AthenzUtils.extractPrincipalServiceName("athenz.api.reader"), "reader"); assertEquals(AthenzUtils.extractPrincipalServiceName("athenz.api.test.reader"), "reader"); assertNull(AthenzUtils.extractPrincipalServiceName("athenz")); assertNull(AthenzUtils.extractPrincipalServiceName("athenz.")); assertNull(AthenzUtils.extractPrincipalServiceName(".athenz"));
assertEquals(provider.getInstanceId(data, null), "task1234"); assertEquals(provider.getInstanceId(data, doc), "data1234"); assertEquals(provider.getInstanceId(data, doc), "data1234"); assertEquals(provider.getInstanceId(data, doc), "task1234");
assertEquals(ex.getCode(), 404);
assertEquals(token.getDomain(), "coretech"); assertNotNull(token.getRoles()); assertEquals(token.getRoles().size(), 2); assertTrue(token.getRoles().contains("role1")); assertTrue(token.getRoles().contains("role2")); assertEquals(token.getVersion(), "Z1"); assertEquals(token.getSignature(), "signature;d=sports;r=api"); assertEquals(token.getUnsignedToken(), "v=Z1;d=coretech;r=role1,role2");
assertEquals(Crypto.getSignatureAlgorithm("RSA"), "SHA256withRSA"); assertEquals(Crypto.getSignatureAlgorithm("RSA", "SHA256"), "SHA256withRSA"); assertEquals(Crypto.getSignatureAlgorithm("RSA", "SHA1"), "SHA1withRSA");
assertEquals(400, ex.getCode()); assertTrue(ex.getMessage().contains("Audit reference required"));
assertFalse(accessToken.confirmX509CertPrincipal(cert, "mtls"));
assertTrue(group.getAuditEnabled()); assertEquals(ex.getCode(), 400);
assertFalse(store.supportsFullRefresh());
assertNotNull(entityRes); assertTrue(true);
assertEquals("athenz:policy.policy1", newPolicy.getName()); assertEquals(1, assertions.size()); assertEquals("athenz:role.role1", assertion.getRole()); assertEquals("athenz:*", assertion.getResource()); assertEquals("read", assertion.getAction()); assertEquals(AssertionEffect.ALLOW, assertion.getEffect());
assertNotNull(idJws); assertNotNull(claims); assertEquals("subject", claims.getBody().getSubject()); assertEquals("coretech", claims.getBody().getAudience()); assertEquals("athenz", claims.getBody().getIssuer());
assertTrue(AuthzHelper.checkRoleMemberValidity(members, "user.athenz2", nullFetcher)); assertFalse(AuthzHelper.checkRoleMemberValidity(members, "user.athenz1", nullFetcher));
assertFalse(zts.isAuthorizedServicePrincipal(principal)); assertFalse(zts.isAuthorizedServicePrincipal(principal)); assertTrue(zts.isAuthorizedServicePrincipal(principal));
assertTrue(requestSuccess);
assertEquals(roleMemberExpiryNotificationTask.getNotifications(), new ArrayList<>());
assertEquals(2, receivedMembers.size()); assertTrue(receivedMembers.contains("user.unexpiredUser")); assertTrue(receivedMembers.contains("user.noExpiration")); assertEquals(new HashSet<>(), receivedMembers); assertEquals(new HashSet<>(), receivedMembers);
assertNotNull(privateKey);
assertEquals(dataCache.getMemberRoleSet("user_domain.user").size(), 2); assertTrue(dataCache.getMemberRoleSet("user_domain.user") .contains(new MemberRole("coretech:role.admin", 0))); assertTrue(dataCache.getMemberRoleSet("user_domain.user") .contains(new MemberRole("coretech:role.readers", 0)));
assertNull(certReq.getRequestedRoleList());
assertEquals(e.getCode(), 404);
assertNotNull(p);
assertEquals(accessibleRoles.size(), 0);
assertNull(cache.getAWSResourceRoleSet("role")); assertEquals(1, set.size()); assertEquals(1, set.size()); assertEquals(1, set.size()); assertEquals(2, set.size()); assertTrue(set.contains("resource")); assertTrue(set.contains("resource3"));
assertFalse(isEnabled); assertFalse(isEnabled); assertTrue(isEnabled);
assertEquals(instanceManager.getSSHCertificateSigner("host"), "ssh-host"); assertEquals(instanceManager.getSSHCertificateSigner("user"), "ssh-user"); assertEquals(instanceManager.getSSHCertificateSigner("host"), "ssh-host"); assertEquals(instanceManager.getSSHCertificateSigner("user"), "ssh-user");
assertEquals(Http.authenticatedUser(httpServletRequest, authorities), "athenz.api");
assertEquals(ls.size(), 1); assertTrue(ls.contains("test1"));
assertTrue(result);
assertTrue(emailResult);
assertEquals(accessibleRoles.size(), 1);
assertNotNull(svc); assertEquals(svc.getName(), "coretech.storage"); assertNotNull(svc); assertEquals(svc.getName(), "coretech.backup");
assertTrue(true);
assertEquals(expected.getCode(), 401);
assertEquals("{\\"name\\": \\"role1\\", \\"auditEnabled\\": \\"true\\"}", auditDetails.toString());
assertNull(zms.dbService.memberStrictExpiration(null, null)); assertEquals(zms.dbService.memberStrictExpiration(null, now), now); assertEquals(zms.dbService.memberStrictExpiration(now, null), now); assertEquals(zms.dbService.memberStrictExpiration(now, future), now); assertEquals(zms.dbService.memberStrictExpiration(now, past), past);
assertEquals(jdbcConn.countEntities("my-domain"), 5);
assertEquals(returnList.size(), 0);
assertFalse(provider.validateAWSDocument("athenz.aws.us-west-2", data, "cloudAccount", "instanceId", true, privateIp, errMsg)); assertFalse(provider.validateAWSDocument("athenz.aws.us-west-2", data, "cloudAccount", "instanceId", true, privateIp, errMsg));
assertEquals("sports.hosted.res_group.hockey.", ZMSUtils.getProviderResourceGroupRolePrefix("sports", "hosted", "hockey")); assertEquals("sports.hosted.", ZMSUtils.getProviderResourceGroupRolePrefix("sports", "hosted", null));
assertNotNull(con); assertEquals(records, new ArrayList<>());
assertTrue(true);
assertFalse(zts.validateRoleCertificateExtRequest(certReq, "user_domain.user1", null, null, "10.20.20.20")); assertTrue(zts.validateRoleCertificateExtRequest(certReq, "user_domain.user1", null, null, "10.20.20.20"));
assertFalse((ztsImpl.validateRoleCertificateRequest("invalid-csr", null, null, null, null, null, "10.0.0.1")));
assertEquals(authority.getDomain(), null);
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 600);
assertTrue(true);
assertEquals(originalRoleMembers.size(), expectedSize);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", null));
assertFalse(zts.validateRoleCertificateExtRequest(certReq, "user_domain.user1", null, null, null));
assertNotNull(store.getConnection());
assertNotNull(quota); assertEquals(quota.getAssertion(), 100); assertEquals(quota.getRole(), 1000); assertEquals(quota.getPolicy(), 1000);
assertEquals(status.getCode(), ResourceException.OK);
assertTrue(true);
assertNull(returnList);
assertEquals(ex.getCode(), 400);
assertFalse(zms.hasExceededListLimit(10, 9)); assertFalse(zms.hasExceededListLimit(10, 10));
assertNotNull(store.getS3Client()); assertNotNull(store.getS3Client());
assertNotNull(accessJws); assertTrue(ex.getMessage().contains("expired"));
assertEquals(403, ex.getCode());
assertNotNull(sslContextFactory); assertFalse(sslContextFactory.getWantClientAuth()); assertNull(sslContextFactory.getKeyStoreResource()); assertEquals(sslContextFactory.getKeyStoreType(), "PKCS12"); assertNull(sslContextFactory.getTrustStore()); assertEquals(sslContextFactory.getTrustStoreType(), "PKCS12");
assertEquals(ConfigProperties.getPortNumber("NotExistantProperty", 4080), 4080);
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertNotNull(pkey);
assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 400);
assertTrue(true); assertTrue(true);
assertNotNull(container);
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 80); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 60); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 60);
assertNotNull(listCheck); assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertTrue(ex instanceof IllegalArgumentException);
assertTrue(result);
assertEquals(accessibleRoles.size(), 1);
assertNull(store.getSignedDomain(store.awsS3Client, "iaas"));
assertTrue(true);
assertFalse(AthenzUtils.isRoleCertificate(cert));
assertEquals("zts.cloud", provider.dnsSuffix); assertNull(provider.keyStore); assertEquals(provider.principals.size(), 2); assertTrue(provider.principals.contains("athenz.api")); assertTrue(provider.principals.contains("sports.backend")); assertEquals("zts.athenz.cloud", provider.dnsSuffix); assertNull(provider.keyStore); assertNull(provider.principals);
assertFalse(AuthzHelper.shouldRunDelegatedTrustCheck(null, "TrustDomain")); assertTrue(AuthzHelper.shouldRunDelegatedTrustCheck("TrustDomain", null)); assertTrue(AuthzHelper.shouldRunDelegatedTrustCheck("TrustDomain", "TrustDomain")); assertFalse(AuthzHelper.shouldRunDelegatedTrustCheck("TrustDomain1", "TrustDomain"));
assertNotNull(sslContextFactory); assertEquals(sslContextFactory.getTrustStoreType(), "PKCS12"); assertEquals(sslContextFactory.getExcludeCipherSuites(), ZTSUtils.ZTS_DEFAULT_EXCLUDED_CIPHER_SUITES.split(",")); assertEquals(sslContextFactory.getExcludeProtocols(), ZTSUtils.ZTS_DEFAULT_EXCLUDED_PROTOCOLS.split(",")); assertTrue(sslContextFactory.getWantClientAuth());
assertNotNull(certReq); assertFalse(certReq.validateDnsNames("athenz", "api", "provider", athenzSysDomainCache, "zts.athenz.info", "api.athenz.ostk.athenz.info", null, null));
assertEquals(authority.getAuthenticateChallenge(), "AthenzX509Certificate realm=\\"athenz\\"");
assertEquals(eTagFilter.removeLeadingAndTrailingQuotes("abc"), "abc"); assertEquals(eTagFilter.removeLeadingAndTrailingQuotes("\\"abc"), "abc"); assertEquals(eTagFilter.removeLeadingAndTrailingQuotes("abc\\""), "abc"); assertEquals(eTagFilter.removeLeadingAndTrailingQuotes("\\"abc\\""), "abc"); assertEquals(eTagFilter.removeLeadingAndTrailingQuotes("\\"a\\"bc\\""), "a\\"bc");
assertEquals(accessibleRoles.size(), 0);
assertNotNull(templateDomainMappingList); assertEquals(100,meta.getCurrentVersion().intValue());
assertNotNull(certReq); assertTrue(certReq.validate("athenz", "production", "provider", null, athenzSysDomainCache, null, null, null, null, errorMsg)); assertTrue(certReq.validate("athenz", "production", "provider", validOrgs, athenzSysDomainCache, null, null, null, null, errorMsg));
assertNull(serviceAuthority.getAuthorizedServiceName(authorizedServices, null)); assertNull(serviceAuthority.getAuthorizedServiceName(authorizedServices, "sports.storage")); assertEquals(serviceAuthority.getAuthorizedServiceName(authorizedServices, "coretech.storage"), "coretech.storage");
assertEquals(roleAction.getAction(), "read"); assertEquals(roleAction.getRole(), "reader");
assertEquals("test-domain1", responseMembers.getDomainName()); assertEquals(responseRoleMemberList.size(), 2); assertEquals(responseRoleMemberList.get(0).getMemberName(), "user.overduereview1"); assertEquals(responseRoleMemberList.get(1).getMemberName(), "user.overduereview2");
assertTrue(matchObject instanceof ZpeMatchAll); assertTrue(matchObject instanceof ZpeMatchRegex); assertTrue(matchObject instanceof ZpeMatchRegex); assertTrue(matchObject instanceof ZpeMatchRegex); assertTrue(matchObject instanceof ZpeMatchRegex); assertTrue(matchObject instanceof ZpeMatchRegex); assertTrue(matchObject instanceof ZpeMatchEqual); assertTrue(matchObject instanceof ZpeMatchEqual); assertTrue(matchObject instanceof ZpeMatchStartsWith);
assertNotNull(resolver); assertNull(getFieldValue.apply(f, resolver)); assertNotNull(getFieldValue.apply(f, resolver)); assertSame(getFieldValue.apply(f, resolver), baseKeyStore); assertNotNull(getFieldValue.apply(f, resolver));
assertEquals(dataCache.getMemberCount(), 0);
assertEquals(expected.getCode(), 401);
assertFalse(zms.dbService.isTenantRolePrefixMatch(mockJdbcConn, "coretech.storage.res_group.group1.group2.access", "coretech.storage.res_group1.group1.", "group1", "tenant"));
assertTrue(zms.verifyServicePublicKey(pubKeyK1)); assertTrue(zms.verifyServicePublicKey(pubKeyK2));
assertTrue(true);
assertTrue(AuthzHelper.matchDelegatedTrustAssertion(assertion, "weather:role.Role", "user.user2", roles, nullFetcher));
assertEquals(9, jdbcConn.getServiceId(7, "service1")); assertEquals(9, jdbcConn.getServiceId(7, "service1"));
assertNotNull(ctx); assertNotNull(ctx.context()); assertNull(ctx.principal()); assertEquals(ctx.request(), mockServletRequest); assertEquals(ctx.response(), mockServletResponse); assertEquals(401, ex.getCode()); assertEquals( ((ResourceError) ex.getData()).message, "failed message");
assertEquals(e.getCode(), 404);
assertNull(X509CertUtils.extractRequestInstanceId(null)); assertNull(X509CertUtils.extractRequestInstanceId(cert)); assertEquals("instanceid1", X509CertUtils.extractRequestInstanceId(cert));
assertEquals(exc.getData(), "Invalid domain name");
assertEquals(CredSource.CERTIFICATE, authority.getCredSource());
assertFalse(certReq.validateIPAddress(cert1, "10.11.12.13")); assertTrue(certReq.validateIPAddress(cert2, "10.11.12.13"));
assertTrue(true);
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 25), 25);
assertTrue(zms.hasExceededDepthLimit(-1, "domain")); assertTrue(zms.hasExceededDepthLimit(-1, "domain.sub1"));
assertTrue(ex instanceof IllegalArgumentException);
assertNotNull(role); assertEquals(role.getTrust(), "sys.auth"); assertNull(role.getRoleMembers());
assertNotNull(certReq); assertFalse(certReq.validate("athenz", "production", "provider", validOrgs, athenzSysDomainCache, null, null, null, null, errorMsg)); assertTrue(errorMsg.toString().contains("Unable to validate Subject O Field")); assertTrue(certReq.validate("athenz", "production", "provider", validOrgs, athenzSysDomainCache, null, null, null, null, errorMsg));
assertFalse(userAuthority.allowAuthorization());
assertTrue(instance.updateSSHCertRecord(null, true)); assertTrue(instance.updateSSHCertRecord(sshCertRecord, true));
assertFalse(zms.dbService.isTenantRolePrefixMatch(mockJdbcConn, "coretech.storage.res_group.group1.group2.group3.reader", "coretech.storage.", "group1.group2.group3", "tenant"));
assertNotNull(list.getNames()); assertEquals(list.getNames().size(), 1); assertEquals(list.getNames().get(0), domainName); assertNotNull(list.getNames()); assertEquals(list.getNames().size(), 1); assertEquals(list.getNames().get(0), domainName); assertNull(list.getNames()); assertNull(list.getNames());
assertEquals(domainRoleMember.getMemberName(), "johndoe"); assertEquals(domainRoleMember.getMemberRoles().size(), 0);
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), null, 100), 100);
assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);
assertTrue(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws_role_name", "user_domain.user100")); assertTrue(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws_role_name", "user_domain.user101")); assertFalse(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws_role_name", "user_domain.user102"));
assertTrue(certReq.validateSpiffeURI("domain", "sa", "api"));
assertEquals("101:role1", jdbcConn.roleIndex("101", "role1"));
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertNotNull(resDom1); assertNotNull(resDom2);
assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertNotNull(dynamoDBClient);
assertEquals(zts.getQueryLogData(request), "data_test_again"); assertEquals(zts.getQueryLogData(request + "abcd"), request);
assertNull(store.getSignedDomain(store.awsS3Client, "iaas"));
assertEquals(e.getCode(), 400);
assertFalse(provider.verifyInstanceIdentity(info, "1234"));
assertNotNull(check); assertEquals(check,"{\\"policies\\":[]}");
assertNotNull(recipientsRes); assertTrue(recipientsRes.contains("user.joe"));
assertEquals(jdbcConn.con, mockConn); assertEquals(jdbcConn.con, mockConn);
assertNull(store.getCacheStore().getIfPresent("coretech")); assertFalse(file.exists());
assertFalse(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws2_role_name", "user_domain.user100")); assertFalse(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws2_role_name", "user_domain.user101")); assertFalse(zts.verifyAWSAssumeRole("athenz.product", "athenz.product:aws2_role_name", "user_domain.user102"));
assertTrue(zms.hasExceededListLimit(10, 11));
assertFalse(result);
assertNotNull(accessCheck); assertTrue(accessCheck.getGranted()); assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertNotNull(list); assertTrue(list.getTemplateNames().contains("platforms")); assertTrue(list.getTemplateNames().contains("vipng")); assertTrue(list.getTemplateNames().contains("user_provisioning"));
assertTrue(true);
assertNull(client);
assertTrue(true);
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 1200); assertEquals(zts.determineTokenTimeout(data, roles, null, null), roleTokenDefaultTimeout);
assertEquals(ex.getCode(), 404);
assertNotNull(certReq); assertSame(ztsImpl.validateServiceX509RefreshRequest(principal, certReq, "10.0.0.1"), ServiceX509RefreshRequestStatus.DNS_NAME_MISMATCH);
assertFalse(ldapAuthority.allowAuthorization());
assertTrue(true); assertTrue(true);
assertEquals(exception.getCode(), 200); assertEquals(exception.getData(), "OK"); assertEquals(exception.getData(String.class), "OK");
assertNotNull(entity); assertEquals("entity1", entity.getName()); assertEquals("{\\"value\\":1}", JSON.string(entity.getValue()));
assertEquals(4, principals.size()); assertTrue(principals.contains("user.joe")); assertTrue(principals.contains("user.jane")); assertTrue(principals.contains("user.doe")); assertTrue(principals.contains("user.jack"));
assertTrue(result);
assertTrue(zms.validateRoleBasedAccessCheck(Collections.emptyList(), null, "domain1", "domain1")); assertTrue(zms.validateRoleBasedAccessCheck(roles, null, "domain1", "domain1")); assertTrue(zms.validateRoleBasedAccessCheck(roles, null, "domain1", "domain1")); assertTrue(zms.validateRoleBasedAccessCheck(roles, null, "domain1", "domain2"));
assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE); assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);
assertNotNull(temp);
assertEquals(expected.getCode(), 401);
assertNull(svc);
assertNotNull(certReq); assertTrue(certReq.validatePublicKeys(ztsPublicKey1)); assertTrue(certReq.validatePublicKeys(ztsPublicKey2));
assertTrue(zms.matchPrincipalInRole(role, null, "user.user2", null));
assertFalse(zts.verifyAWSAssumeRole("athenz.product", "role", "user_domain.user200"));
assertEquals(ztsService.getName(), "athenz.api"); assertNull(ztsService.getPublicKeys());
assertTrue(ex.getMessage().contains("No password specified")); assertTrue(true, "Invalid password specified");
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "1.4.5.6");
assertTrue(provider.verifyInstanceIdentity(info, "1234"));
assertNotNull(roleList); assertEquals(roleList.getNames().size(), 3); assertNotNull(roleList); assertEquals(roleList.getNames().size(), 2); assertFalse(roleList.getNames().contains("Role1".toLowerCase())); assertTrue(roleList.getNames().contains("Role2".toLowerCase()));
assertFalse(zms.dbService.auditLogPublicKeyEntry(auditDetails, "keyId", true)); assertEquals("{\\"id\\": \\"keyId\\"}", auditDetails.toString()); assertFalse(zms.dbService.auditLogPublicKeyEntry(auditDetails, "keyId", false)); assertEquals(",{\\"id\\": \\"keyId\\"}", auditDetails.toString());
assertNull(resolver.getSocketFactory(null));
assertTrue(store.checkRoleSet("test1", null)); assertTrue(store.checkRoleSet("role1", checkSet)); assertTrue(store.checkRoleSet("role2", checkSet)); assertFalse(store.checkRoleSet("role3", checkSet));
assertFalse(keyRefresher.haveFilesBeenChanged(classLoader.getResource("testFile").getPath(), stuff));
assertNotNull(userAuthority.getPAM());
assertEquals(exception.getCode(), 503); assertEquals(exception.getData().toString(), "{code: 503, message: \\"Statement cancelled due to timeout\\"}");
assertNull(fstore.getServerDomainModifiedList());
assertTrue(true);
assertEquals(ResourceException.CONFLICT, rEx.getCode()); assertEquals(ResourceException.CONFLICT, rEx.getCode()); assertEquals(ResourceException.GONE, rEx.getCode()); assertEquals(ResourceException.BAD_REQUEST, rEx.getCode()); assertEquals(ResourceException.SERVICE_UNAVAILABLE, rEx.getCode());
assertTrue(accessibleRoles.contains("readers"));
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), 120000, null), roleTokenMaxTimeout);
assertEquals("test1", jdbcConn.saveValue("test1")); assertNull(jdbcConn.saveValue(""));
assertNotNull(assertion); assertEquals(assertion.getAction(), "*"); assertEquals(assertion.getResource(), domainName + ":*");
assertEquals(dynamoDBClientFetcher.getAWSRegion("us-west-2"), "us-west-2"); assertEquals(dynamoDBClientFetcher.getAWSRegion("us-west-2"), "us-west-2"); assertEquals(dynamoDBClientFetcher.getAWSRegion(""), "us-east-1"); assertEquals(dynamoDBClientFetcher.getAWSRegion(null), "us-east-1");
assertEquals(zms.getMemberDueDate(100, null), Timestamp.fromMillis(100)); assertEquals(zms.getMemberDueDate(100, Timestamp.fromMillis(50)), Timestamp.fromMillis(50)); assertEquals(zms.getMemberDueDate(100, Timestamp.fromMillis(150)), Timestamp.fromMillis(100));
assertEquals(zts.getConfiguredRoleListExpiryTimeMins(requestedRoleList), 60);
assertTrue(result); assertFalse(result);
assertEquals(exception.getCode(), 503); assertEquals(exception.getData().toString(), "{code: 503, message: \\"Statement cancelled due to timeout\\"}");
assertEquals(expected.getCode(), 401);
assertTrue(requestSuccess);
assertNotNull(groupList); assertEquals(groupList.getList().size(), 1); assertEquals(group.getName(), domainName + ":group.group1"); assertEquals(group.getGroupMembers().size(), 2); assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
assertTrue(notificationToEmailConverterCommon.readContentFromFile(getClass().getClassLoader(), "resources/dummy").isEmpty());
assertTrue(a.setGranted(true).granted);
assertEquals(badDomains, 0); assertNotNull(store.getDomainData("coretech")); assertNotNull(store.getDomainData("sports"));
assertTrue(AuthzHelper.matchDelegatedTrustPolicy(policy, "weather:role.Role", "user.user2", roles, devTeamFetcher)); assertFalse(AuthzHelper.matchDelegatedTrustPolicy(policy, "weather:role.Role", "user.unknown", roles, devTeamFetcher));
assertEquals("athenz.production", AthenzUtils.extractServicePrincipal(cert)); assertEquals("athenz.syncer", AthenzUtils.extractServicePrincipal(cert));
assertNotNull(store); assertTrue(store instanceof ZMSFileMTLSChangeLogStore);
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "domain:role.Role2", null, null, nullFetcher)); assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "coretech:role.Role2", null, null, nullFetcher));
assertTrue(AthenzUtils.isRoleCertificate(cert));
assertTrue(true);
assertNull(AthenzUtils.extractServicePrincipal(cert));
assertEquals(e.getMessage(), "Role Certificates not allowed"); assertNull(certId);
assertTrue(op.isOperationAllowedOn("opItemType", "opItemValue", AllowedOperation.MatchType.EQUALS));
assertNull(zts.retrieveTenantDomainName("storage.tenant.coretech_unknown.admin", "storage")); assertNull(zts.retrieveTenantDomainName("storage.tenant.coretech_unknown.admin", null));
assertEquals(store.publicKeyCache.size(), 2); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0")); assertTrue(store.publicKeyCache.containsKey("sports.storage_1"));
assertEquals(cstore.retrieveLastModificationTime(), "12345");
assertEquals("Group Membership Approval Notification", description);
assertNotNull(encoded);
assertEquals(ex.getCode(), 204); assertEquals(ex.getCode(), 400);
assertTrue(true); assertTrue(true);
assertFalse(accessToken.confirmX509CertPrincipal(cert, "mtls"));
assertTrue(zts.validateUriHostname("", null)); assertTrue(zts.validateUriHostname(null, null)); assertFalse(zts.validateUriHostname("abc.athenz.com", cert)); assertTrue(zts.validateUriHostname("abc.athenz.com", cert)); assertFalse(zts.validateUriHostname("def.athenz.com", cert));
assertNull(files);
assertTrue(true); assertTrue(true);
assertFalse(provider.verifyInstanceIdentity(info, "1234"));
assertTrue(validateDueDate(stamp.millis(), ext125Millis)); assertTrue(validateDueDate(stamp.millis(), ext100Millis)); assertTrue(validateDueDate(stamp.millis(), ext150Millis)); assertTrue(validateDueDate(stamp.millis(), ext100Millis));
assertEquals(ex.getClass(), IllegalArgumentException.class);
assertTrue(true);
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 120);
assertEquals(AthenzJettyContainer.getServerHostName(), "MyTestHost");
assertTrue(a.setGranted(true).granted);
assertEquals(ResourceException.NOT_FOUND, ex.getCode()); assertEquals(ResourceException.OK, status.getCode()); assertEquals(ResourceException.NOT_FOUND, ex.getCode());
assertFalse(zms.dbService.isTenantRolePrefixMatch(mockJdbcConn, "coretech.storage.role1", "coretech2.role.", null, "tenant"));
assertNull(manager.generateSSHCertificates(null, null));
assertTrue(zms.matchRole("domain", roles, "domain:role\\\\.role.*", authRoles));
assertTrue(result); assertNotNull(store.getDomainData("coretech")); assertNotNull(store.getDomainData("sports"));
assertFalse(zms.matchRole("domain", roles, "domain:role\\\\.role1.*", authRoles));
assertFalse(result);
assertNotNull(zmsClient);
assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains("admin"));
assertTrue(true);
assertEquals(e.getCode(), 404);
assertNotNull(certReq); assertFalse(certReq.validateDnsNames(cert));
assertNull(jwt.getCertificateThumbprint());
assertNull(provider.dnsSuffix); assertEquals("", provider.dnsSuffix);
assertEquals(e.getCode(), 404);
assertTrue(true);
assertFalse(zms.matchRole("domain", new ArrayList<>(), "role", null));
assertEquals(accessibleRoles.size(), 0);
assertTrue(true); assertTrue(true);
assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains("admin"));
assertEquals(ex.getCode(), 404);
assertEquals(zts.getAssertionEffect(null), com.yahoo.athenz.zts.AssertionEffect.ALLOW); assertEquals(zts.getAssertionEffect(AssertionEffect.ALLOW), com.yahoo.athenz.zts.AssertionEffect.ALLOW); assertEquals(zts.getAssertionEffect(AssertionEffect.DENY), com.yahoo.athenz.zts.AssertionEffect.DENY);
assertEquals(e.getMessage(), "Invalid role cert, invalid uri SAN entry"); assertNull(certId);
assertEquals("athenz:policy.policy1", newPolicy.getName()); assertEquals(0, assertions.size());
assertTrue(ls.isEmpty());
assertNotNull(quotaCheck); assertEquals(domainName, quotaCheck.getName()); assertEquals(quotaCheck.getAssertion(), 10); assertEquals(quotaCheck.getRole(), 14); assertEquals(quotaCheck.getPolicy(), 12); assertEquals("server-default", quotaCheck.getName()); assertEquals(quotaCheck.getAssertion(), 100); assertEquals(quotaCheck.getRole(), 1000); assertEquals(quotaCheck.getPolicy(), 1000);
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertNotNull(cert); assertEquals(cert.getSubjectX500Principal().getName(), "CN=athenz.syncer,O=My Test Company,L=Sunnyvale,ST=CA,C=US");
assertEquals(400, ex.getCode()); assertEquals(400, ex.getCode()); assertEquals(400, ex.getCode());
assertNotNull(certReq); assertFalse(certReq.validate("athenz", "production", "provider", null, athenzSysDomainCache, null, null, null, null, errorMsg));
assertEquals(notifications.size(), 1); assertEquals(notifications.get(0), expectedNotification);
assertEquals(ex.getCode(), 404);
assertEquals(store.hostCache.size(), 2); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertNotNull(Crypto.hmac("testMessage", "testSharedSecret"));
assertNotNull(signedDomain); assertNotNull(domainData); assertEquals(domainData.getName(), "iaas");
assertNotNull(privateKey);
assertNotNull(recipientsResp); assertEquals(recipientsResp.size(), 3); assertTrue(recipientsResp.contains("user1@test.com")); assertTrue(recipientsResp.contains("user2@test.com")); assertTrue(recipientsResp.contains("user3@test.com"));
assertFalse(zms.matchRole("domain", roles, "domain:role\\\\.role1.*", authRoles));
assertEquals(ls.size(), 0);
assertNull(certReq.getRequestedRoleList());
assertEquals("id-001", X509CertUtils.extractRequestInstanceId(cert));
assertEquals(28, unrefreshedCertDates.size()); assertTrue(unrefreshedCertDates.contains("2020-05-10")); assertTrue(unrefreshedCertDates.contains("2020-06-06")); assertFalse(unrefreshedCertDates.contains("2020-05-09")); assertFalse(unrefreshedCertDates.contains("2020-06-07"));
assertNotNull(zms.serverSolutionTemplates); assertTrue(zms.serverSolutionTemplates.getTemplates().isEmpty());
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), null, 120000), roleTokenMaxTimeout);
assertEquals(ex.getCode(), code);
assertEquals("test-domain1", responseMembers.getDomainName()); assertEquals(responseRoleMemberList.size(), 2); assertEquals(responseRoleMemberList.get(0).getMemberName(), "user.overduereview1"); assertEquals(responseRoleMemberList.get(1).getMemberName(), "user.overduereview2");
assertNotNull(list.getNames()); assertEquals(list.getNames().size(), 1); assertEquals(list.getNames().get(0), domainName); assertNotNull(list.getNames()); assertEquals(list.getNames().size(), 1); assertEquals(list.getNames().get(0), domainName); assertNull(list.getNames()); assertNull(list.getNames()); assertNotNull(list.getNames()); assertNotNull(list.getNames());
assertTrue(svcToken.isValidAuthorizedServiceToken(errMsg));
assertTrue(ex instanceof IllegalArgumentException);
assertEquals(context.request(), httpServletRequest); assertEquals(context.response(), httpServletResponse); assertNull(context.principal());
assertEquals(e.getMessage(), "Principal is not a valid service identity"); assertNull(certId);
assertEquals(ex.getCode(), 404); assertEquals(ex.getData().toString(), "{code: 404, message: \\"unknown domain - unknownDomain\\"}");
assertNull(recipientsRes);
assertNotNull(map); assertEquals(map.size(), 1); assertTrue(map.containsKey("trustD")); assertEquals(map.get("trustD").size(), 1); assertTrue(map.get("trustD").contains("dom.role1"));
assertTrue(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id)); assertEquals(id.toString(), "i-1234");
assertEquals(cloudStore.getSshKeyReqType(req), "host"); assertNull(cloudStore.getSshKeyReqType(req2)); assertNull(cloudStore.getSshKeyReqType(req3));
assertFalse(zms.verifyServicePublicKeys(service));
assertTrue(true);
assertNull(zmsImpl.userAuthority); assertNull(zmsImpl.principalAuthority); assertNotNull(zmsImpl.userAuthority); assertNotNull(zmsImpl.principalAuthority);
assertEquals(zts.getConfiguredRoleListExpiryTimeMins(requestedRoleList), 0);
assertEquals(m,300); assertEquals(roleAuthority.userDomain,"user");
assertNull(zms.processListRequest(domainName, AthenzObject.ROLE, null, null, names)); assertEquals(names.size(), 0);
assertNotNull(role3); assertEquals(role3.getName(), domainName + ":role." + roleName); assertNull(role3.getTrust());
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 403);
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 404);
assertEquals(401, ex.getCode()); assertEquals(400, ex.getCode());
assertTrue(fileconnection.getExpiredPendingDomainRoleMembers(30).isEmpty());
assertTrue(true);
assertNotNull(store.getTokenServiceClient());
assertEquals(certRecord.getInstanceId(), "instance-id"); assertEquals(certRecord.getService(), "athenz.api"); assertEquals(certRecord.getPrincipals(), "host1,host2"); assertEquals(certRecord.getClientIP(), "10.10.10.11"); assertEquals(certRecord.getPrivateIP(), "10.10.10.12");
assertNull(zms.dbService.getDelegatedRoleMembers(conn, "dom1", "dom1", "role1")); assertNull(zms.dbService.getDelegatedRoleMembers(conn, "dom1", "invalid-domain", "role1"));
assertNotNull(jwsDom);
assertTrue(true); assertTrue(true);
assertNotNull(zms);
assertEquals(exc.getData(), "Invalid domain name");
assertNotNull(token); assertTrue(token instanceof DefaultOAuthJwtAccessToken); assertEquals(token.getSignature(), "dummy-jwt-signature");
assertEquals("GET", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_METHODS)); assertEquals("2592000", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_MAX_AGE)); assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS)); assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN)); assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
assertEquals(userAuthority.getDomain(), expectedDomain); assertEquals(userAuthority.getHeader(), expectedHeader); assertTrue(userAuthority.isValidUser("user1")); assertNotNull(principal); assertEquals(principal.getName(), "testuser"); assertEquals(principal.getDomain(), expectedDomain); assertEquals(principal.getCredentials(), testToken); assertEquals(principal.getUnsignedCredentials(), "testuser"); assertNotNull(principal.getAuthority()); assertEquals(principal.getCredentials(), testToken); assertTrue(userAuthority.isValidUser("user1")); assertNull(principal);
assertNull(sslContextFactory.getTrustStoreResource()); assertEquals(sslContextFactory.getTrustStoreType(), "PKCS12"); assertEquals(sslContextFactory.getExcludeCipherSuites(), ZTSUtils.ZTS_DEFAULT_EXCLUDED_CIPHER_SUITES.split(",")); assertEquals(sslContextFactory.getExcludeProtocols(), ZTSUtils.ZTS_DEFAULT_EXCLUDED_PROTOCOLS.split(","));
assertNotNull(Http.authenticate(httpServletRequest, authorities));
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "no-email", null, null, "10.0.0.1"));
assertNotNull(resDom1); assertTrue(true);
assertNotNull(check); assertEquals(check,"{\\"policyData\\":{\\"policies\\":[]}}");
assertEquals(policy.getAssertions().size(), 2); assertEquals(assertion.getResource(), "table"); assertEquals(assertion.getRole(), "writers"); assertEquals(assertion.getAction(), "delete"); assertEquals(assertion.getEffect(), AssertionEffect.DENY);
assertTrue(serviceAuthority.remoteIpCheck("10.11.12.23", false, serviceToken, null)); assertTrue(serviceAuthority.remoteIpCheck("10.11.12.23", true, serviceToken, null)); assertFalse(serviceAuthority.remoteIpCheck("10.11.12.22", false, serviceToken, null)); assertFalse(serviceAuthority.remoteIpCheck("10.11.12.22", true, serviceToken, null));
assertEquals(token.getHost(), "host"); assertNull(token.getProxyUser());
assertEquals(msgBuilder.who(), "null");
assertNotNull(tokenCheck); assertEquals(tokenCheck.getToken(), "token"); assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 403);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertFalse(fileconnection.removePublicKeyEntry(null, "12"));
assertTrue(notify);
assertNotNull(quotaCheck); assertEquals(domainName, quotaCheck.getName()); assertEquals(quotaCheck.getAssertion(), 10); assertEquals(quotaCheck.getRole(), 14); assertEquals(quotaCheck.getPolicy(), 12); assertEquals("server-default", quotaCheck.getName()); assertEquals(quotaCheck.getAssertion(), 100); assertEquals(quotaCheck.getRole(), 1000); assertEquals(quotaCheck.getPolicy(), 1000);
assertEquals(accessibleRoles.size(), 0);
assertEquals(hosts.size(), 1); assertTrue(hosts.contains("coretech.storage"));
assertEquals(ex.getCode(), 404);
assertEquals(gottenName, name);
assertEquals(token.getDomain(), "coretech"); assertNotNull(token.getRoles()); assertEquals(token.getVersion(), "S1"); assertNull(token.getUnsignedToken());
assertNotNull(req); assertEquals("coretech.system.test", Crypto.extractX509CSRCommonName(certReq)); assertEquals("coretech.system.test", IETFUtils.valueToString(cnRdn.getFirst().getValue())); assertEquals("test.coretech-system.aws.athenz.cloud", Crypto.extractX509CSRDnsNames(certReq).get(0));
assertTrue(true);
assertEquals(ex.getCode(), 404);
assertEquals(status.getCode(), ResourceException.OK);
assertEquals(certRecord.getService(), "cn"); assertEquals(certRecord.getInstanceId(), "instance-id"); assertEquals(certRecord.getPrincipals(), "host1,host2"); assertEquals(certRecord.getClientIP(), "10.1.1.1"); assertEquals(certRecord.getPrivateIP(), "10.1.1.2");
assertNotNull(con); assertTrue(con.insertSSHCertRecord(certRecord)); assertNotNull(certRecordCheck); assertNull(certRecordCheck);
assertEquals(privateKeyStore.getKMS(), kms);
assertEquals(zts.getConfiguredRoleListExpiryTimeMins(requestedRoleList), 60);
assertNull(Crypto.extractX509CSRSubjectField(certReq, null));
assertSame(unsignedToken, signedToken);
assertEquals(store.hostCache.size(), 2); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertTrue(store.parseIamRoleInfo(AWS_IAM_ROLE_INFO)); assertEquals(store.awsRole, "athenz.zts");
assertNotNull(check); assertEquals(check,"{\\"policies\\":[]}");
assertTrue(provider.validateAWSAccount("1234", "1234", errMsg)); assertFalse(provider.validateAWSAccount("1235", "1234", errMsg));
assertFalse(store.validDomainListResponse(domainList));
assertNull(fileconnection.getPolicyObject(domain, "role1"));
assertTrue(ex instanceof IllegalArgumentException);
assertNotNull(certReq); assertSame(ztsImpl.validateServiceX509RefreshRequest(principal, certReq, "10.0.0.2"), ServiceX509RefreshRequestStatus.IP_NOT_ALLOWED);
assertNotNull(zts);
assertNotNull(instanceManager.getX509CertificateSigner()); assertNotNull(instanceManager.getX509CertificateSigner());
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "1.2.3.4");
assertNotNull(p); assertEquals(p.getName(), "jdoe"); assertEquals(p.getDomain(), "user"); assertEquals(p.getCredentials(), fakeCreds); assertEquals(p.getUnsignedCredentials(), fakeUnsignedCreds); assertEquals(p.getApplicationId(), testApplicationId); assertNotNull(p);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1");
assertEquals(wrapper.principal(), prin);
assertEquals("user.user1", rsrcAccess.getPrincipal()); assertTrue(assertions.isEmpty()); assertEquals("user.user2", rsrcAccess.getPrincipal()); assertEquals(1, assertions.size()); assertEquals("update", testAssertion.getAction()); assertEquals("role", testAssertion.getRole()); assertEquals("resource", testAssertion.getResource());
assertSame(f.get(authority), authority);
assertTrue(true); assertEquals(ex.getCode(), 404); assertEquals(ex.getCode(), 400);
assertTrue(instance.loadAllowedIPAddresses(ipBlocks, null)); assertTrue(instance.loadAllowedIPAddresses(ipBlocks, "")); assertFalse(instance.loadAllowedIPAddresses(ipBlocks, "some-invalid-filename")); assertFalse(instance.loadAllowedIPAddresses(ipBlocks, "src/test/resources/invalid_ipblocks.txt")); assertFalse(instance.loadAllowedIPAddresses(ipBlocks, "src/test/resources/empty_ipblocks.txt"));
assertEquals(ls.size(), 2); assertTrue(ls.contains("test1")); assertTrue(ls.contains("test3"));
assertNull(zts.retrieveTenantDomainName("storage.tenant.coretech.office.glendale.admin", "storage")); assertNull(zts.retrieveTenantDomainName("storage.tenant.coretech.office.glendale.resource_group.admin", null));
assertTrue(result);
assertFalse(zms.dbService.isTrustRoleForTenant(mockJdbcConn, "sports", "coretech.storage.tenant.admin", "coretech2.storage.tenant.", null, "athenz"));
assertEquals("athens.zts", AthenzUtils.extractServicePrincipal(cert));
assertEquals(DataSourceFactory.retrieveConfigSetting(ATHENZ_DBPOOL_PROP1, 20), 20);
assertNotNull(svc);
assertNull(servletRequest.getAttribute("com.yahoo.athenz.auth.principal")); assertNull(servletRequest.getAttribute("com.yahoo.athenz.auth.principal")); assertEquals(servletRequest.getAttribute("com.yahoo.athenz.auth.principal"), "hockey.kings"); assertEquals(servletRequest.getAttribute("com.yahoo.athenz.auth.authority_id"), "Auth-NTOKEN");
assertEquals(fileconnection.getDomainFromTemplateName(templateVersionMap), domainNameTemplateListMap);
assertNotNull(certReq); assertEquals(certReq.getInstanceId(), "1001");
assertNotNull(req); assertEquals(req.getSubject().toString(), "C=US,ST=CA,L=Sunnyvale,O=My Test Company,CN=athenz.syncer");
assertEquals(exception.getCode(), ResourceException.NOT_FOUND); assertEquals(exception.getData().toString(), "{code: 404, message: \\"unknown principal - johndoe\\"}");
assertEquals(ex.getCode(), 403);
assertNull(zms.dbService.getRoleReviewMembers(1));
assertEquals(domainTemplateMapping.size(), 1);
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "weather:role.Role", "user.user1", roles, nullFetcher));
assertEquals(jdbcConn.countRoleMembers("my-domain", "role1"), 4);
assertEquals(ls.size(), 3); assertTrue(ls.contains("test1")); assertTrue(ls.contains("test2")); assertTrue(ls.contains("test3"));
assertNotNull(certReq); assertSame(ztsImpl.validateServiceX509RefreshRequest(principal, certReq, "10.0.0.1"), ServiceX509RefreshRequestStatus.PUBLIC_KEY_MISMATCH);
assertNotNull(accessJws);
assertNotNull(certReq); assertEquals(certReq.getInstanceId(), "id-001");
assertFalse(zms.dbService.isTenantRolePrefixMatch(mockJdbcConn, "coretech.storage.res_group.reader", "coretech.storage.", "reader", "tenant"));
assertFalse(store.validDomainListResponse(domainList));
assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0); assertEquals(zts.getConfiguredRoleCertExpiryTimeMins(data, roles), 0);
assertTrue(authorizer.isRoleToken("v=Z1;d=domain;r=roles;s=signature")); assertTrue(authorizer.isRoleToken("d=domain;r=roles;v=Z1;s=signature")); assertFalse(authorizer.isRoleToken("v=S1;d=domain;n=server;s=signature")); assertFalse(authorizer.isRoleToken("d=domain;r=roles;s=signature")); assertFalse(authorizer.isRoleToken("vZ1"));
assertFalse(zts.verifyAWSAssumeRole("unknown-domain", "role", "user_domain.user"));
assertEquals("coretech.office.burbank", zts.retrieveTenantDomainName("storage.tenant.coretech.office.burbank.admin", "storage")); assertEquals("coretech.office.burbank", zts.retrieveTenantDomainName("storage.tenant.coretech.office.burbank.admin", null));
assertEquals(410, ex.getCode());
assertEquals(a, a); assertNotEquals(a, b); assertEquals(a, b);
assertEquals(sshRecord.getPrivateIP(), "127.0.0.1"); assertEquals(sshRecord.getClientIP(), MOCKCLIENTADDR); assertEquals(sshRecord.getService(), "api"); assertEquals(sshRecord.getInstanceId(), "id001"); assertEquals(sshRecord.getPrivateIP(), MOCKCLIENTADDR); assertEquals(sshRecord.getClientIP(), MOCKCLIENTADDR); assertEquals(sshRecord.getPrivateIP(), MOCKCLIENTADDR); assertEquals(sshRecord.getClientIP(), MOCKCLIENTADDR);
assertEquals(e.getMessage(), "No certificate available in request"); assertNull(certId); assertEquals(e.getMessage(), "No certificate available in request"); assertNull(certId);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertFalse(isEnabled); assertFalse(isEnabled); assertTrue(isEnabled);
assertNotNull(quotaCheck); assertEquals(quotaCheck.getAssertion(), 10); assertEquals(quotaCheck.getRole(), 14); assertEquals(quotaCheck.getPolicy(), 12);
assertNull(zms.processListRequest("testdomain", AthenzObject.ASSERTION, null, null, names)); assertEquals(names.size(), 0);
assertEquals(0, notifications.size());
assertTrue(requestSuccess);
assertEquals(zms.providerServiceDomain("coretech.storage"), "coretech"); assertEquals(zms.providerServiceDomain("coretech.hosted.storage"), "coretech.hosted"); assertNull(zms.providerServiceDomain("coretech")); assertNull(zms.providerServiceDomain(".coretech")); assertNull(zms.providerServiceDomain("coretech."));
assertNotNull(store);
assertNull(client);
assertNotNull(new Auth0Jwt(parser.parseClaimsJws(Jwts.builder().setSubject("subject").signWith(secretKey).compact())));
assertFalse(fstat.validPolFile); assertTrue(fstat.validPolFile);
assertEquals(ResourceUtils.serviceResourceName("athenz", "service1"), "athenz.service1"); assertEquals(ResourceUtils.serviceResourceName("athenz.api", "service1"), "athenz.api.service1");
assertTrue(true); assertTrue(true); assertTrue(true); assertTrue(true);
assertFalse(zms.validateRoleBasedAccessCheck(Collections.emptyList(), "trustdomain", "domain1", "domain1"));
assertNull(Http.authenticatingCredentials(null, authority));
assertEquals(token.getVersion(), rolVersion); assertEquals(token.getDomain(), svcDomain); assertEquals(token.getRoles(), roles); assertNull(token.getHost()); assertNotNull(token.getSalt()); assertEquals(token.getKeyId(), "0"); assertNull(token.getIP()); assertTrue(timestamp != 0); assertEquals(token.getExpiryTime(), timestamp + 3600);
assertEquals(ex.getCode(), 400); assertTrue(ex.getMessage().contains("reserved system domain")); assertEquals(ex.getCode(), 404);
assertEquals(e.getCode(), 404);
assertTrue(group.getGroupMembers().isEmpty());
assertTrue(store.roleMatchInSet("coretech:role.readers", checkSet)); assertTrue(store.roleMatchInSet("coretech:role.writers", checkSet)); assertTrue(store.roleMatchInSet("sports:role.update", checkSet)); assertTrue(store.roleMatchInSet("weather:role.update", checkSet)); assertFalse(store.roleMatchInSet("coretech:role.admin", checkSet));
assertEquals(store.lastModTime, 0); assertEquals(store.lastModTime, 12345); assertEquals(store.lastModTime, 0);
assertEquals(roleMemberReviewNotificationTask.getNotifications(), new ArrayList<>());
assertTrue(true);
assertTrue(initResult); assertFalse(initResult); assertFalse(initResult); assertFalse(initResult);
assertFalse(zms.dbService.insertGroupMembers(mockDomRsrcCtx, mockJdbcConn, groupMembers, domainName, groupName, adminUser, auditRef, "unit-test"));
assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains("writers"));
assertEquals(expected.getCode(), 500);
assertTrue(keyRefresher.haveFilesBeenChanged(classLoader.getResource("testFile").getPath(), new byte[md.getDigestLength()]));
assertEquals(zms.dbService.getPrincipalName(rsrcCtx), "user.user1"); assertNull(zms.dbService.getPrincipalName(null)); assertNull(zms.dbService.getPrincipalName(rsrcCtx2));
assertEquals(404, ex.getCode()); assertEquals(404, ex.getCode()); assertEquals(404, ex.getCode());
assertEquals(zms.normalizeDomainAliasUser("user:user:user1"), "user:user:user1"); assertEquals(zms.normalizeDomainAliasUser("user:"), "user:"); assertEquals(zms.normalizeDomainAliasUser("coretech:storage:api"), "coretech:storage:api");
assertNull(recipientsRes);
assertEquals("storage.tenant.sports.api.", ZMSUtils.getTenantResourceGroupRolePrefix("storage", "sports.api", null)); assertEquals("storage.tenant.sports.api.res_group.Group1.", ZMSUtils.getTenantResourceGroupRolePrefix("storage", "sports.api", "Group1"));
assertEquals(zts.getConfiguredRoleListExpiryTimeMins(requestedRoleList), 90);
assertNotNull(schema);
assertEquals(zts.determineTokenTimeout(data, roles, null, 1200), 300);
assertEquals(domains.size(), 2); assertTrue(domains.contains("iaas")); assertTrue(domains.contains("iaas.athenz"));
assertNotNull(domList); assertTrue(domList.getNames().contains("ListDom1".toLowerCase())); assertTrue(domList.getNames().contains("ListDom2".toLowerCase()));
assertEquals(e.getMessage(), "Invalid audit reference factory class");
assertEquals(9, jdbcConn.getPolicyId(7, "policy1")); assertEquals(9, jdbcConn.getPolicyId(7, "policy1"));
assertEquals(1, hosts.getNames().size()); assertTrue(hosts.getNames().contains("coretech.storage")); assertEquals(2, hosts.getNames().size()); assertTrue(hosts.getNames().contains("coretech.storage")); assertTrue(hosts.getNames().contains("coretech.backup")); assertEquals(1, hosts.getNames().size()); assertTrue(hosts.getNames().contains("coretech.backup"));
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertEquals(3, values.size()); assertEquals("aaa", values.get(0)); assertEquals("bbb", values.get(1)); assertEquals("ccc", values.get(2)); assertEquals(new ArrayList<>(), values2);
assertNull(zms.getPolicyListWithoutAssertionId(null)); assertTrue(result.isEmpty()); assertEquals(result.size(), 1); assertNull(testAssertion.getId()); assertEquals(assertion.getAction(), "update"); assertEquals(assertion.getEffect(), AssertionEffect.ALLOW); assertEquals(assertion.getResource(), domainName + ":resource"); assertEquals(assertion.getRole(), ZMSUtils.roleResourceName(domainName, "admin")); assertNull(result.get(0).getCaseSensitive()); assertNull(testAssertion.getCaseSensitive());
assertEquals(krbAuthority.getAuthenticateChallenge(), "Negotiate");
assertEquals(ConfigProperties.getPortNumber("athenz.port", 4080), 4080);
assertNotNull(accessList);
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "coretech:role.Role", null, roles, nullFetcher));
assertEquals(req1, req2); assertEquals(req1, req1); assertEquals("csr1", req1.getCsr()); assertEquals(data1, req1.getCertRequestData()); assertEquals(meta1, req1.getCertRequestMeta()); assertNotEquals(req1, req2); assertNotEquals(req1, req2); assertNotEquals(req1, req2); assertNotEquals(req1, req2); assertEquals(req1, req2); assertNotEquals(null, req1); assertNotEquals("data", req1);
assertEquals(msgBuilder.whoFullName(), "athenz.production"); assertTrue(auditLog.contains("UUID="), "Test string=" + auditLog); assertTrue(auditLog.contains("WHEN-epoch="), "Test string=" + auditLog);
assertEquals(1, notifications.size()); assertTrue(notifications.get(0).getRecipients().contains("user.test1")); assertTrue(notifications.get(0).getRecipients().contains("user.test2")); assertEquals("zts.url;testDomain;role;1592346376;Fail to get token of type AWS. ", notifications.get(0).getDetails().get("awsZtsHealth")); assertEquals("testServer", notifications.get(0).getDetails().get("affectedZts"));
assertNull(cache.getPublicKeyMap().get("service1_id1")); assertNull(cache.getPublicKeyMap().get("service1_id1")); assertEquals(cache.getPublicKeyMap().get("service1_id1"), ZTS_PEM_CERT0);
assertEquals(store.hostCache.size(), 2); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 2); assertTrue(retServices.contains("coretech.storage")); assertTrue(retServices.contains("coretech.backup"));
assertNull(provider.awsPublicKey); assertEquals(provider.bootTimeOffset, 0);
assertFalse(accessToken.confirmX509CertPrincipal(cert, "athenz.proxy"));
assertEquals(3, roleMembers.size()); assertNotNull(roleMembers.get(0).getExpiration()); assertNull(roleMembers.get(1).getExpiration()); assertNotNull(roleMembers.get(2).getExpiration()); assertEquals("adomain.storage", roleMembers.get(0).getMemberName()); assertEquals("bdomain.user2", roleMembers.get(1).getMemberName()); assertEquals("zdomain.user1", roleMembers.get(2).getMemberName());
assertEquals(ex.getCode(), 204); assertEquals(ex.getCode(), 204); assertEquals(ex.getCode(), 400);
assertEquals(accessibleRoles.size(), 0);
assertNull(zts.getProxyForPrincipalValue("", "athenz.syncer", "athenz", "getToken")); assertEquals(ex.getCode(), 400); assertEquals("user_domain.proxy", zts.getProxyForPrincipalValue("user_domain.proxy", "user_domain.proxy-user1", "user_domain", "getAccessToken")); assertEquals(ex.getCode(), 403);
assertEquals(tenantRoles.getDomain(), "coretech"); assertEquals(tenantRoles.getService(), "storage"); assertEquals(tenantRoles.getTenant(), "deltenantrolesdom1"); assertEquals(tenantRoles.getResourceGroup(), "hockey");
assertEquals(exc.getData().toString(), "{code: 400, message: \\"Bad Request\\"}");
assertTrue(result); assertNotNull(store.getDomainData("coretech"));
assertTrue(zms.dbService.isTenantRolePrefixMatch(mockJdbcConn, "coretech.storage.res_group.group1.access", "coretech.storage.res_group.group1.", "group1", "tenant"));
assertEquals(500, ex.getCode());
assertFalse(zms.validateRoleBasedAccessCheck(roles, null, "domain1", "domain2")); assertFalse(zms.validateRoleBasedAccessCheck(roles, null, "domain1", "domain1"));
assertEquals(fileconnection.getDomainModTimestamp("DummyDomain1"), 0);
assertEquals(hosts.size(), 2); assertTrue(hosts.contains("coretech.storage")); assertTrue(hosts.contains("sports.storage")); assertEquals(hosts.size(), 2); assertTrue(hosts.contains("coretech.storage")); assertTrue(hosts.contains("sports.storage"));
assertEquals(9, jdbcConn.getRoleId(7, "role1")); assertEquals(9, jdbcConn.getRoleId(7, "role1"));
assertEquals(ls.size(), 1); assertTrue(ls.contains("test1"));
assertTrue(certReq.validateIPAddress(null, "10.10.11.12"));
assertNotNull(member1); assertEquals(member1.getMemberName(), "user.joe"); assertEquals(member1.getRoleName(), "MbrGetRoleDom1:role.Role1".toLowerCase()); assertTrue(member1.getIsMember()); assertNotNull(member2); assertEquals(member2.getMemberName(), "user.doe"); assertEquals(member2.getRoleName(), "MbrGetRoleDom1:role.Role1".toLowerCase()); assertFalse(member2.getIsMember());
assertNotNull(store);
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertNotNull(store);
assertEquals(ConfigProperties.retrieveConfigSetting("athenz.port", 4080), 4443); assertEquals(ConfigProperties.retrieveConfigSetting("athenz.port", 4080), 4080); assertEquals(ConfigProperties.retrieveConfigSetting("athenz.port", 4080), 4080);
assertEquals(ex.getCode(), 400);
assertEquals(3, serviceHosts.size()); assertEquals("host1", serviceHosts.get(0)); assertEquals("host3", serviceHosts.get(1)); assertEquals("host2", serviceHosts.get(2));
assertNotNull(privKey);
assertEquals(serviceAuthority.getAuthorizedServiceName(authorizedServices, null), "coretech.storage"); assertNull(serviceAuthority.getAuthorizedServiceName(authorizedServices, "sports.storage")); assertEquals(serviceAuthority.getAuthorizedServiceName(authorizedServices, "coretech.storage"), "coretech.storage");
assertTrue(result);
assertTrue(true);
assertNotNull(resDom1); assertTrue(true);
assertEquals(zts.logPrincipalAndGetDomain(ctx), "sports");
assertTrue(true);
assertEquals(e.getCode(), 400); assertEquals(e.getCode(), 404);
assertTrue(requestSuccess);
assertNull(members.get(0).getReviewReminder()); assertTrue(validateDueDate(stamp.millis(), ext100Millis)); assertTrue(validateDueDate(stamp.millis(), ext150Millis)); assertTrue(validateDueDate(stamp.millis(), ext100Millis));
assertTrue(true);
assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 401); assertNotNull(client.getPrincipal("v=S1;d=domain;n=service;s=signature", null)); assertEquals(ex.getCode(), 401); assertEquals(ex.getCode(), 401);
assertNotNull(filter); assertEquals(response.getStatus(), 200);
assertNotNull(bundle); assertNotNull(bundle); assertNotNull(bundle); assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
assertNotNull(domainRoleMembership); assertTrue(domainRoleMembership.getDomainRoleMembersList().isEmpty());
assertEquals(jdbcConn.countAssertions("my-domain", "policy1"), 1);
assertTrue(true); assertTrue(true);
assertEquals(5, notificationTasks.size()); assertEquals(notificationTasks.get(0).getDescription(), "pending role membership approvals reminders"); assertEquals(notificationTasks.get(1).getDescription(), "pending group membership approvals reminders"); assertEquals(notificationTasks.get(2).getDescription(), "membership expiration reminders"); assertEquals(notificationTasks.get(3).getDescription(), "Periodic Review Reminder"); assertEquals(notificationTasks.get(4).getDescription(), "group membership expiration reminders");
assertFalse(accessToken.confirmX509CertPrincipal(null, "athenz.proxy"));
assertNull(zms.getAuthority("invalid.class"));
assertEquals(ex.getCode(), 500);
assertNotNull(identity); assertEquals(identity.getName(), "cn"); assertEquals(identity.getX509Certificate(), cert); assertTrue(identity.getX509CertificateSigner().contains("-----BEGIN CERTIFICATE-----"));
assertNotNull(svc); assertTrue(svc instanceof EmailNotificationService);
assertNotNull(certReq); assertFalse(certReq.validatePublicKeys(cert));
assertNull(resAthenzDomain.getRoles());
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), 1200, null), roleTokenDefaultTimeout);
assertFalse(store.processDomainDeletes());
assertNotNull(members); assertEquals(members.size(), 2);
assertNull(provider.awsPublicKey); assertEquals(provider.bootTimeOffset, 300000);
assertNotNull(svc.readBinaryFromFile("emails/athenz-logo-white.png"));
assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1"); assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1"); assertEquals(ServletRequestUtil.getRemoteAddress(httpServletRequest), "127.0.0.1");
assertNotNull(client); assertNotNull(client.getDomain("domain")); assertNotNull(client.getDomain("domain"));
assertEquals(accessibleRoles.size(), 0);
assertTrue(true);
assertNotNull(ztsImpl.hostnameResolver);
assertEquals(notifications, new ArrayList<>());
assertEquals(domains.size(), 1); assertTrue(domains.contains("iaas.athenz"));
assertEquals("My Test Company", o);
assertEquals(jdbcConn.countRoles("my-domain"), 7);
assertEquals(accessibleRoles.size(), 2); assertTrue(accessibleRoles.contains("admin")); assertTrue(accessibleRoles.contains("readers"));
assertFalse(fstore.supportsFullRefresh());
assertFalse(isEnabled); assertFalse(isEnabled);
assertEquals(expected.getCode(), 401);
assertEquals(ZMSUtils.removeDomainPrefixForService("athenz.api", "athenz"), "api"); assertEquals(ZMSUtils.removeDomainPrefixForService("athenz.dev.api", "athenz.dev"), "api"); assertEquals(ZMSUtils.removeDomainPrefixForService("athenz.dev.api", "athenz"), "dev.api"); assertEquals(ZMSUtils.removeDomainPrefixForService("athenz.api", "coretech"), "athenz.api");
assertNull(fstore.jsonValueAsBytes(testStruct, Struct.class));
assertTrue(true);
assertFalse(svcToken.isValidAuthorizedServiceToken(errMsg)); assertTrue(!errMsg.toString().isEmpty());
assertEquals(501, ex.getCode());
assertEquals(e.getMessage(), "Certificate principal is empty"); assertNull(certId);
assertEquals(Crypto.getSignatureAlgorithm("ECDSA"), "SHA256withECDSA"); assertEquals(Crypto.getSignatureAlgorithm("ECDSA", "SHA256"), "SHA256withECDSA"); assertEquals(Crypto.getSignatureAlgorithm("ECDSA", "SHA1"), "SHA1withECDSA");
assertNull(store.getUpdatedSignedDomains(str));
assertEquals(3, awsDomains.size()); assertEquals("101", awsDomains.get("dom1")); assertEquals("102", awsDomains.get("dom2")); assertEquals("103", awsDomains.get("dom3"));
assertTrue(accessToken.confirmX509CertPrincipal(cert, "mtls"));
assertNotNull(store.getConnection());
assertEquals(zms.removeQuotes("abc"), "abc"); assertEquals(zms.removeQuotes("\\"abc"), "abc"); assertEquals(zms.removeQuotes("abc\\""), "abc"); assertEquals(zms.removeQuotes("\\"abc\\""), "abc"); assertEquals(zms.removeQuotes("\\"a\\"bc\\""), "a\\"bc");
assertEquals(e.getCode(), 404);
assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains("admin"));
assertEquals(ex.getCode(), code);
assertEquals(e.getCode(), 400);
assertTrue(store.validDomainListResponse(domainList));
assertEquals(m,100);
assertTrue(true);
assertEquals(2, trustedRoles.size()); assertEquals(2, roles.size()); assertEquals("101:trole1", roles.get(0)); assertEquals("102:trole2", roles.get(1)); assertEquals(1, roles.size()); assertEquals("103:trole3", roles.get(0));
assertTrue(validateDueDate(stamp.millis(), ext125Millis)); assertTrue(validateDueDate(stamp.millis(), ext100Millis)); assertNull(members.get(2).getExpiration()); assertTrue(validateDueDate(stamp.millis(), ext100Millis));
assertFalse(zms.isValidUserTokenRequest(principal, "user1"));
assertEquals(userAuthority.getAuthenticateChallenge(), "Basic realm=\\"athenz\\"");
assertFalse(op1.equals(null));
assertTrue(provider.validateAWSDocument("athenz.aws.us-west-2", data, "1234", "i-1234", true, privateIp, errMsg));
assertEquals("role", mr.getRole()); assertEquals(100, mr.getExpiration()); assertEquals(3510355, mr.hashCode()); assertNull(mr.getRole()); assertEquals(200, mr.getExpiration()); assertEquals(7161, mr.hashCode());
assertEquals(CredSource.HEADER, authority.getCredSource());
assertNull(Http.getCookieValue(httpServletRequest, "cookie1")); assertNull(Http.getCookieValue(httpServletRequest, "cookie2")); assertEquals(Http.getCookieValue(httpServletRequest, "cookie1"), "value1"); assertEquals(Http.getCookieValue(httpServletRequest, "cookie2"), "value2"); assertNull(Http.getCookieValue(httpServletRequest, "cookie3"));
assertNotNull(principal); assertTrue(true);
assertEquals(zms.providerServiceName("coretech.storage"), "storage"); assertEquals(zms.providerServiceName("coretech.hosted.storage"), "storage"); assertNull(zms.providerServiceName("coretech")); assertNull(zms.providerServiceName(".coretech")); assertNull(zms.providerServiceName("coretech."));
assertNull(client);
assertEquals(ex.getCode(), 404); assertEquals(ex.getData().toString(), "{code: 404, message: \\"unknown domain - unknownDomain\\"}");
assertNotNull(stringMembers); assertEquals(stringMembers.size(), 2); assertTrue(stringMembers.contains("user.joe")); assertTrue(stringMembers.contains("user.jane"));
assertFalse(isEnabled); assertFalse(isEnabled);
assertEquals(400, ex.getCode()); assertEquals(404, ex.getCode());
assertEquals(jdbcConn.con, rwMockConn); assertEquals(jdbcConn.con, roMockConn);
assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, "athenz", "api", "athenz.cloud", id));
assertTrue(awsPrivateKeyStoreFactory.create() instanceof AwsPrivateKeyStore);
assertTrue(op1.equals(op1));
assertEquals(400, ex.getCode()); assertEquals(404, ex.getCode());
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertNull(user); assertNull(user);
assertEquals(accessibleRoles.size(), 0);
assertTrue(certReq.validateSpiffeURI("coretech", "ra", "api")); assertFalse(certReq.validateSpiffeURI("coretech", "ra", "backend")); assertFalse(certReq.validateSpiffeURI("coretech", "sa", "api"));
assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains("admin"));
assertEquals(policy.getName(), "coretech:policy.newpolicy"); assertEquals(assertion.getRole(), "coretech:role.role1");
assertTrue(requestSuccess);
assertNotNull(roleList); assertTrue(roleList.getNames().contains("Role1".toLowerCase())); assertTrue(roleList.getNames().contains("Role2".toLowerCase()));
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), 3200, null), 3200);
assertEquals(ex.getCode(), 403); assertEquals(ex.getCode(), 400);
assertTrue(true);
assertEquals(store.hostCache.size(), 2); assertEquals(retServices.size(), 1); assertTrue(retServices.contains("coretech.backup")); assertEquals(retServices.size(), 1); assertTrue(retServices.contains("coretech.storage"));
assertFalse(op1.equals("fail"));
assertFalse(fstore.supportsFullRefresh());
assertFalse(keyRefresher.haveFilesBeenChanged(classLoader.getResource("").getPath(), new byte[md.getDigestLength()]));
assertEquals("athenz.syncer", cn);
assertFalse(zms.isZMSService("sys.auth2", "zms")); assertFalse(zms.isZMSService("sys.auth", "zts"));
assertEquals(e.getCode(), 404);
assertTrue(true); assertTrue(true);
assertNull(zms.getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration())); assertEquals("elevated-clearance", zms.getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration())); assertNull(zms.getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration())); assertNull(zms.getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration()));
assertEquals("2020-06-09", DynamoDBUtils.getIso8601FromDate(now)); assertEquals("2020-06-09", DynamoDBUtils.getIso8601FromDate(anHourAgo)); assertEquals("2020-06-08", DynamoDBUtils.getIso8601FromDate(yesterday)); assertEquals("2020-05-10", DynamoDBUtils.getIso8601FromDate(lastMonth));
assertNotNull(schema);
assertNotNull(certReq); assertFalse(certReq.validate("sys", "production", "provider", null, null, null, null, null, null, errorMsg));
assertEquals(expected.getCode(), 401);
assertEquals("employee", zms.dbService.getDomainUserAuthorityFilter(conn, domainName));
assertNull(store.getUpdatedSignedDomains(str));
assertTrue(ex.getMessage().contains("role has invalid group member"));
assertNull(store.getServerDomainModifiedList());
assertNotNull(certFactory); assertNotNull(certSigner);
assertNotNull(certReq); assertTrue(certReq.validateSubjectOUField(null, null, null)); assertTrue(certReq.validateSubjectOUField("Testing Domains", null, null)); assertTrue(certReq.validateSubjectOUField(null, "Testing Domains", null)); assertTrue(certReq.validateSubjectOUField("Bad1", "Bad2", null)); assertTrue(certReq.validateSubjectOUField(null, null, validOrgUnits)); assertTrue(certReq.validateSubjectOUField("Testing Domains", "None Test", validOrgUnits));
assertEquals(ex.getClass(), IllegalArgumentException.class); assertEquals(ex.getClass(), IllegalArgumentException.class);
assertNotNull(serviceList); assertEquals(serviceList.getNames().size(), 2); assertTrue(serviceList.getNames().contains("Service1".toLowerCase())); assertTrue(serviceList.getNames().contains("Service2".toLowerCase()));
assertNotNull(certId); assertEquals(certId.toString(), String.format("{domain:\\"domain\\", service:\\"service\\", roles:[\\"role_1\\", \\"role_2\\"], x509Cert:\\"%s\\"}", certId.getX509Certificate().toString()));
assertNotNull(cert); assertEquals(cert.getIssuerX500Principal().getName(), "CN=athenz.syncer,O=My Test Company,L=Sunnyvale,ST=CA,C=US"); assertTrue(diff <= 600 * 60 * 1000);
assertTrue(op1.equals(op2));
assertEquals(record.getPrincipals(), "127.0.0.1"); assertEquals(result.size(), 3); assertTrue(result.contains("principal1")); assertTrue(result.contains("principal2")); assertTrue(result.contains("principal4")); assertEquals(result.size(), 3); assertTrue(result.contains("principal1")); assertTrue(result.contains("principal2")); assertTrue(result.contains("principal4"));
assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
assertTrue(ex instanceof IllegalArgumentException);
assertTrue(true); assertTrue(true);
assertEquals(ls.size(), 1); assertTrue(ls.contains("test1"));
assertEquals(record.getPrincipals(), "127.0.0.1"); assertEquals(record.getPrincipals(), "127.0.0.1"); assertEquals(result.size(), 3); assertTrue(result.contains("principal1")); assertTrue(result.contains("xprincipal1")); assertTrue(result.contains("xprincipal2"));
assertFalse(accessToken.confirmMTLSBoundToken(null, "cnf-hash"));
assertFalse(result);
assertNull(m);
assertEquals(ResourceException.CONFLICT, ex.getCode());
assertEquals(ex.getCode(), 400); assertEquals(ex.getCode(), 403);
assertEquals(token.getName(), "storage"); assertEquals(token.getDomain(), "coretech"); assertNull(token.getVersion());
assertTrue(zms.matchPrincipalInRole(role, "weather:role.role1", "user.user1", "coretechtrust")); assertFalse(zms.matchPrincipalInRole(role, "weather:role.role1", "user.user1", "coretechtrust2")); assertFalse(zms.matchPrincipalInRole(role, "weather:role.role1", "user.user3", "coretechtrust"));
assertFalse(zms.hasExceededListLimit(0, 10)); assertFalse(zms.hasExceededListLimit(-1, 10));
assertNotNull(certReq); assertFalse(certReq.validatePublicKeys(cert));
assertTrue(true);
assertEquals(ls.size(), 1); assertTrue(ls.contains("test1"));
assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "weather:role.Role1", null, roles, nullFetcher)); assertFalse(AuthzHelper.matchDelegatedTrustAssertion(assertion, "coretech:role.Role", null, roles, nullFetcher));
assertEquals(9, jdbcConn.getHostId("host1")); assertEquals(9, jdbcConn.getHostId("host1"));
assertNull(eTag);
assertEquals(list.size(), 1); assertEquals(list.get(0).getMemberName(), "member1"); assertEquals(list.size(), 1); assertEquals(list.get(0).getMemberName(), "member1");
assertEquals(store.getPublicKey("coretech", "storage", "0"), "PublicKey0"); assertEquals(store.getPublicKey("sports", "storage", "0"), "PublicKey0"); assertEquals(store.getPublicKey("sports", "storage", "1"), "PublicKey1"); assertEquals(store.getPublicKey("sports", "storage", "2"), "PublicKey2");
assertFalse(zts.isAuthorizedProxyUser(null, "user.joe")); assertTrue(zts.isAuthorizedProxyUser(proxyUsers, "user.joe")); assertTrue(zts.isAuthorizedProxyUser(proxyUsers, "user.jane")); assertFalse(zts.isAuthorizedProxyUser(proxyUsers, "user.john"));
assertEquals(ZTSClient.getHeader(), "Athenz-Role-Auth");
assertNull(jwt.getSubject()); assertEquals(jwt.getSubject(), "user.github-1234567"); assertEquals(jwt.getSubject(), "user.github-1234567");
assertNotNull(testPrincipal); assertNotNull(principal); assertEquals("storage", principal.getService()); assertEquals("coretech", principal.getDomain());
assertEquals(store.publicKeyCache.size(), 1); assertTrue(store.publicKeyCache.containsKey("coretech.storage_0"));
assertNotNull(zms.getDomainTemplateDetailsList(mockDomRsrcCtx, domainName));
assertNotNull(s3Client);
assertTrue(zms.matchRole("domain", roles, "domain:role\\\\.role.*", authRoles));
assertEquals(pubKey, ZTS_PEM_CERT0); assertNull(pubKey);
assertNull(certReq.getRequestedRoleList());
assertTrue(ls.isEmpty());
assertEquals(domainGroupMember.getMemberName(), "johndoe"); assertEquals(domainGroupMember.getMemberGroups().size(), 0);
assertEquals(jdbcConn.countGroups("my-domain"), 7);
assertFalse(ZTSUtils.validateCertReqCommonName(certReq, "athenz.syncer"));
assertTrue(store.parseInstanceProfileArn("arn:aws:iam::111111111111:instance-profile/athenz.zts,athenz")); assertEquals(store.awsRole, "athenz.zts");
assertTrue(requestSuccess);
assertTrue(providerManager.verifyProviderEndpoint("test1.athenz.com")); assertTrue(providerManager.verifyProviderEndpoint("test1.athenz2.com")); assertFalse(providerManager.verifyProviderEndpoint("test1.athenz3.com")); assertTrue(providerManager.verifyProviderEndpoint("test1.athenz.com")); assertTrue(providerManager.verifyProviderEndpoint("test1.athenz2.com")); assertTrue(providerManager.verifyProviderEndpoint("test1.athenz3.com"));
assertFalse(zmsImpl.isAllowedSystemMetaDelete(mockDomRsrcCtx.principal(), "mockdom1", "auditenabled", "role")); assertTrue(zmsImpl.isAllowedSystemMetaDelete(mockDomRsrcCtx.principal(), "mockdom1", "auditenabled", "role"));
assertTrue(domainList.contains("user")); assertNull(fstore.getServerDomainList());
assertTrue(file.exists()); assertNull(store.getDomainData("coretech")); assertFalse(file.exists());
assertTrue(requestSuccess);
assertNotNull(resDom1); assertNotNull(resDom2); assertEquals(dom2.getOrg(), "testorg"); assertFalse(resDom2.getAuditEnabled());
assertFalse(zms.hasExceededListLimit(null, 10));
assertEquals(null, keyRefresherException.getMessage()); assertEquals("exception", keyRefresherException.getMessage()); assertEquals("java.lang.Throwable: new throwable", keyRefresherException.getMessage()); assertEquals("exception", keyRefresherException.getMessage());
assertNotNull(signedDomain); assertNotNull(domainData); assertEquals(domainData.getName(), "iaas");
assertEquals("coretech:role.storage.tenant.sports.api.", ZMSUtils.getTrustedResourceGroupRolePrefix("coretech", "storage", "sports.api", null)); assertEquals("coretech:role.storage.tenant.sports.api.res_group.group1.", ZMSUtils.getTrustedResourceGroupRolePrefix("coretech", "storage", "sports.api", "group1"));
assertEquals(zts.determineTokenTimeout(dataCache, Collections.emptySet(), -10, null), roleTokenDefaultTimeout);
assertEquals(ex.getCode(), 404);
assertEquals(ResourceException.NOT_FOUND, ex.getCode()); assertEquals(ResourceException.OK, status.getCode()); assertEquals(ResourceException.NOT_FOUND, ex.getCode());
assertNull(pubKey); assertNull(pubKey); assertNull(pubKey);
assertTrue(result); assertFalse(result); assertFalse(result); assertFalse(result);
assertNotNull(accessJws); assertTrue(ex.getMessage().contains("X.509 Certificate Confirmation failure"));
assertTrue(zms.assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain", roles, authRoles, null)); assertTrue(zms.assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain", roles, authRoles, null)); assertTrue(zms.assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain", roles, authRoles, null));
assertNotNull(certReq); assertFalse(certReq.validate("athenz", "production", "provider", null, athenzSysDomainCache, null, null, null, null, errorMsg)); assertTrue(errorMsg.toString().contains("invalid dns suffix"));
assertEquals(provider.getServerHostName(), "localhost");
assertEquals(groupMemberExpiryNotificationTask.getNotifications(), new ArrayList<>());
assertEquals(3, domains.size()); assertEquals("adomain", domains.get(0)); assertEquals("bdomain", domains.get(1)); assertEquals("zdomain", domains.get(2));
assertTrue(store.processDomainDeletes());
assertTrue(true); assertTrue(true);
assertNotNull(certReq); assertFalse(certReq.validateDnsNames("athenz", "api", "provider", athenzSysDomainCache, "zts.athenz.info", "api.athenz.ostk.athenz.info", null, null));
assertNotNull(certFactory); assertNotNull(certSigner);
assertNull(hosts);
assertNull(cstore.retrieveLastModificationTime()); assertEquals(cstore.retrieveLastModificationTime(), now); assertNull(cstore.retrieveLastModificationTime());
assertFalse(zms.matchRole("domain", roles, "domain:role\\\\.role1.*", authRoles));
assertTrue(true);
assertEquals(authority.getHeader(), "Authorization");
assertFalse(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, invalidCert, "10.0.0.1")); assertTrue(zts.validateRoleCertificateRequest(csr, "sports", roles, "sports.scores", null, validCert, "10.0.0.1"));
assertNull(st);
assertNotNull( nodeId ); assertEquals( nodeId, "N1" );
assertNotNull( fruID );
assertNull( instance.getSession() );
assertFalse(TR.getNode().isPowered());
assertTrue(TR.getNode().isPowered());
assertFalse( isDataConcerning );
assertNotNull( sessionObj );
assertFalse( FileUtil.isFileExists( fileAbsPath ) ); assertTrue( created ); assertTrue( FileUtil.isFileExists( fileAbsPath ) ); assertTrue( updated ); assertFalse( text.contains( fileContent ) ); assertTrue( text.contains( fileContent2 ) ); assertTrue( FileUtil.deleteFile( fileAbsPath ) );
assertNotNull( "The list of vlans (string) is null", listOfVlansString ); assertNotNull( "SwitchVlan object is null", switchVlan_Obj ); assertNotNull( switchVlan_Obj.getName() ); assertNotNull( switchVlan_Obj.getClass() );
assertNotNull( fruID );
assertNotNull( "List of switch vlans is null", listOfSwitchVlans );
assertNull( result );
assertNotNull( status ); assertNotNull( status.isPowered() ); assertNotNull( status.isDiscoverable() ); assertTrue( status.isPowered() );
assertNotNull(result);
assertFalse( isDataConcerning );
assertNotNull( selfTestResults ); assertNotNull( selfTestResults.getSelfTestResult() ); assertNotNull( selfTestResults.getSelfTestResultCode() );
assertNotNull( "SensorInfo is null", sensorInfo_Obj ); assertNotNull( "ChassisTemp list is null", chassisTempList ); assertNotNull( "fanSpeed list is null", fanSpeedList ); assertNotNull( "psuStatus list is null", psuStatusList );
assertFalse( lockAcquired );
assertTrue( hostProxy.getHostSystem() != null ); assertTrue( hostProxy.getHostSystem().getHardware() != null ); assertTrue( hostProxy.getHostSystem().getHardware().getCpuPkg().length > 0 );
assertNotNull( response ); assertTrue( 202 == response.getStatusCode() );
assertTrue( HmsGenericUtil.isHostReachable( "127.0.0.1" ) );
assertNotNull( fruID );
assertNotNull(result);
assertFalse( HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileName, null ) ); assertFalse( HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileName, upgradeStatus ) ); assertFalse( HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileName, null ) ); assertTrue( HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileName, upgradeStatus ) ); assertTrue( upgradeStatusFile.exists() && upgradeStatusFile.isFile() ); assertTrue( upgradeStatusFile.delete() );
assertNotNull( ethernetControllers );
assertNotNull( "Switch Type is null", switchTypeRetrieved );
assertTrue( status );
assertTrue( lockAcquired );
assertNotNull(node.getAcpiPowerState()); assertNull(node.getAcpiPowerState().getDeviceAcpiPowerState()); assertNull(node.getAcpiPowerState().getSystemAcpiPowerState());
assertNotNull( result );
assertNotNull( stringCache ); assertFalse( stringCache.isStale( s1 ) ); assertNotNull( stringCache.get( s1 ) ); assertNull( stringCache.get( s2 ) ); assertTrue( stringCache.isStale( s1 ) );
assertNotNull( response ); assertTrue( 202 == response.getStatusCode() );
assertFalse(TR.getNode().isPowered());
assertTrue( FileUtil.unzipFile( zipFile, outputDir ) );
assertFalse( FileUtil.isFileExists( FilenameUtils.concat( tmpDir, timeInMillis ) ) ); assertFalse( FileUtil.isFileExists( null ) ); assertFalse( FileUtil.isFileExists( null, timeInMillis ) ); assertFalse( FileUtil.isFileExists( tmpDir, null ) );
assertNotNull(result);
assertNotNull(result);
assertNotNull( memories ); assertEquals( 2, memories.size() );
assertNotNull( bootOptions ); assertEquals( BootOptionsValidity.Persistent, bootOptions.getBootOptionsValidity() ); assertEquals( BootDeviceSelector.PXE, bootOptions.getBootDeviceSelector() ); assertEquals( BootDeviceType.Internal, bootOptions.getBootDeviceType() ); assertEquals( BiosBootType.Legacy, bootOptions.getBiosBootType() );
assertNotNull( storageControllerInfo ); assertEquals( 2, storageControllerInfo.size() ); assertEquals( ServerComponent.STORAGE_CONTROLLER, storageControllerInfo.get( 0 ).getComponent() );
assertTrue(TR.getNode().isPowered());
assertNotNull( response );
assertNotNull( selInfo );
assertNotNull( instance.getSession() );
assertTrue(TR.getNode().isPowered());
assertNotNull( eventData.get( "fruID" ) );
assertNotNull(node.getAcpiPowerState()); assertNull(node.getAcpiPowerState().getDeviceAcpiPowerState()); assertNull(node.getAcpiPowerState().getSystemAcpiPowerState());
assertTrue( isDataConcerning );
assertTrue( FileUtil.isDirExists( dirName ) );
assertFalse(TR.getNode().isPowered());
assertNotNull(result);
assertFalse( UpgradeUtil.rollbackUpgrade( null ) );
assertFalse( isDataConcerning );
assertEquals( e.getResponseErrorCode(), Status.BAD_REQUEST.getStatusCode() ); assertEquals( message, e.getReason() );
assertNotNull( selInfo );
assertNotNull(result);
assertNull(node.getBoardProductName());
assertNotNull( response ); assertEquals( response, "xyz" );
assertTrue( "The switch is NOT powered on. Expected result: True; Value returned: " + isPoweredOn, isPoweredOn );
assertTrue( debuggerUtil.cleanHmsDebugLogs( null ) );
assertNotNull( ethernetControllers ); assertEquals( 1, ethernetControllers.size() ); assertNotNull( ethernetControllers.get( 0 ).getPortInfos() ); assertTrue( ethernetControllers.get( 0 ).getPortInfos().size() > 0 ); assertEquals( ServerComponent.NIC, ethernetControllers.get( 0 ).getComponent() );
assertTrue("0:0:0:0:0:0".equals(node.getOobMacAddress()));
assertTrue( exitValue != -1 ); assertTrue( exitValue == 0 ); assertTrue( exitValue != -1 ); assertTrue( exitValue == 1 );
assertNotNull( cpuInfos );
assertNull(result);
assertNotNull( hmsApis ); assertTrue( hmsApis.size() > 0 );
assertNotNull( result.getSwitchList() );
assertNotNull( returnedNode ); assertTrue( "Intel".equals( returnedNode.getBoardVendor() ) ); assertTrue( "10.28.197.28".equals( returnedNode.getIbIpAddress() ) );
assertNotNull(node.getBoardVendor()); assertNotNull(node.getBoardProductName());
assertNotNull( e ); assertEquals( e.getResponseErrorCode(), Status.BAD_REQUEST.getStatusCode() ); assertEquals( message, e.getReason() );
assertNotNull( storageControllerInfo ); assertEquals( 2, storageControllerInfo.size() );
assertNotNull(node.getSytemBootOptions()); assertNull(node.getSytemBootOptions().getBiosBootType()); assertNull(node.getSytemBootOptions().getBootDeviceInstanceNumber()); assertNull(node.getSytemBootOptions().getBootDeviceType()); assertNull(node.getSytemBootOptions().getBootDeviceSelector()); assertNull(node.getSytemBootOptions().getBootOptionsValidity());
assertNotNull( memories );
assertNotNull( cpuInfos ); assertEquals( 2, cpuInfos.size() );
assertNull( HmsUpgradeUtil.loadUpgradeStatus( upgradeStatusFileName ) ); assertTrue( HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileName, upgradeStatus ) ); assertTrue( upgradeStatusFile.exists() && upgradeStatusFile.isFile() ); assertNotNull( status ); assertEquals( status.getId(), upgradeStatus.getId() ); assertEquals( status.getStatusCode(), upgradeStatus.getStatusCode() ); assertTrue( upgradeStatusFile.delete() );
assertNotNull( result );
assertTrue( createdOrUpdated ); assertTrue( FileUtil.deleteDirectory( tempDir ) );
assertNotNull( ethernetControllers ); assertEquals( 2, ethernetControllers.size() );
assertNotNull(result);
assertNotNull( memories ); assertEquals( 2, memories.size() ); assertEquals( ServerComponent.MEMORY, memories.get( 0 ).getComponent() );
assertTrue( hmsInventory.loadInventory( props.getProperty( HMS_IB_INVENTORY_LOCATION_PROPERTY ) ) ); assertTrue( hmsInventory.addHost( getServerNode( nodeId ) ) ); assertTrue( hmsInventory.saveInventory( props.getProperty( HMS_IB_INVENTORY_LOCATION_PROPERTY ), false ) );
assertNotNull( fruID );
assertTrue( checksum.equalsIgnoreCase( "1be59e6a535497fc39eee2119bc158341d9abfd0" ) );
assertNotNull(node.getAcpiPowerState());
assertNotNull( hddEvents ); assertTrue( hddEvents.size() > 0 ); assertNotNull( hddEvents.get( 0 ) );
assertNotNull( response ); assertNotNull( response.get( "N1" ) );
assertTrue( "Was NOT able to discover switch. Expected result: True; Value returned: " + isCumulus, isCumulus );
assertTrue( hmsInventory.loadInventory( props.getProperty( HMS_IB_INVENTORY_LOCATION_PROPERTY ) ) );
assertNotNull(result);
assertNotNull( "List of SwitchPorts is null", listOfSwitchPorts );
assertNotNull(result);
assertTrue( hmsInventory.loadInventory( props.getProperty( HMS_IB_INVENTORY_LOCATION_PROPERTY ) ) ); assertTrue( hmsInventory.addHost( getServerNode( nodeId ) ) ); assertNotNull( hosts ); assertTrue( nodeIds.contains( nodeId ) );
assertNotNull( acpiPowerState ); assertEquals( "D0", acpiPowerState.getDeviceAcpiPowerState() ); assertEquals( "S0", acpiPowerState.getSystemAcpiPowerState() );
assertNotNull( hmsApis ); assertTrue( hmsApis.size() > 0 );
assertNotNull( fruID );
assertFalse( UpgradeUtil.initiateUpgrade( null, null ) );
assertFalse("".equals(node.getOobMacAddress())); assertEquals(17, node.getOobMacAddress().length());
assertNotNull( "List of vlans (string) is null", listOfVlansString );
assertFalse( status ); assertTrue( status2 );
assertNotNull( "List of switch ports is null", listOfSwitchPorts ); assertNotNull( "The switchPort status is null", switchPort_Obj.getStatus() );
assertNotNull( "The switchSession is NULL", switchSession );
assertNotNull( hddInfos ); assertEquals( 2, hddInfos.size() ); assertEquals( ServerComponent.STORAGE, hddInfos.get( 0 ).getComponent() );
assertFalse(TR.getNode().isPowered());
assertNull(result);
assertNotNull(result);
assertNotNull( response ); assertEquals( response.getStatusCode().intValue(), 202 );
assertNotNull(node.getAcpiPowerState()); assertNotNull(node.getAcpiPowerState().getDeviceAcpiPowerState()); assertNotNull(node.getAcpiPowerState().getSystemAcpiPowerState());
assertNotNull( "listOfLacpGroupNames is null, No Lacp Groups", listOfLacpGroupNames );
assertNotNull( e ); assertEquals( e.getResponseErrorCode(), Status.BAD_REQUEST.getStatusCode() ); assertEquals( message, e.getReason() );
assertTrue( lockAcquired );
assertFalse( isDataConcerning );
assertNotNull( response ); assertTrue( 200 == response.getStatusCode() );
assertNotNull( response ); assertTrue( response.getStatus() == Status.ACCEPTED.getStatusCode() );
assertNotNull( hddInfos ); assertEquals( 2, hddInfos.size() );
assertNull( inventory );
assertNotNull( nodeId ); assertEquals( nodeId, "N1" );
assertNotNull( hmsResourceMonitor.response );
assertNotNull( storageControllerInfo );
assertNotNull( instance.getSession() );
assertNull( oobOperations );
assertFalse(TR.getNode().isPowered());
assertTrue(TR.getNode().isPowered());
assertNotNull( cpuInfos ); assertEquals( 1, cpuInfos.size() ); assertEquals( "CPU_0", cpuInfos.get( 0 ).getId() );
assertNull( FileUtil.findFiles( tmpDir, null ) ); assertNull( FileUtil.findFiles( null, timeInMillis ) ); assertNull( files ); assertNotNull( files ); assertTrue( files.length == 1 );
assertNotNull( currentDate );
assertNotNull( nodeId ); assertEquals( nodeId, "S1" );
assertNotNull( hddInfos );
assertTrue( isDataConcerning );
assertNotNull(result);
assertNotNull(node.getSytemBootOptions()); assertNotNull(node.getSytemBootOptions().getBiosBootType()); assertNotNull(node.getSytemBootOptions().getBootDeviceInstanceNumber()); assertNotNull(node.getSytemBootOptions().getBootDeviceSelector()); assertNotNull(node.getSytemBootOptions().getBootDeviceType()); assertNotNull(node.getSytemBootOptions().getBootOptionsValidity());
assertNotNull( bmcUsers ); assertEquals( 2, bmcUsers.size() ); assertNotNull( bmcUsers.get( 0 ).getUserName() ); assertTrue( bmcUsers.get( 0 ).getUserName().contains( "test" ) );
assertNotNull( dhcpLeases ); assertTrue( dhcpLeases.size() > 0 ); assertTrue( dhcpLeases.size() == 8 ); assertNotNull( dhcpLease ); assertTrue( StringUtils.equals( dhcpLease.getStarts(), "2016/06/19 09:55:11" ) ); assertTrue( StringUtils.equals( dhcpLease.getEnds(), "2016/06/20 09:55:11" ) );
assertNotNull(node.getAcpiPowerState());
assertNotNull( "The list of switch vlans is null", listOfSwitchVlans ); assertTrue( "Vlan failed to get created", createVlanSuccess );
assertNotNull( currentDate );
assertTrue( created ); assertTrue( FileUtil.isFileExists( fileAbsPath ) ); assertTrue( FileUtil.deleteFile( fileAbsPath ) );
assertNotNull( status );
assertNotNull( response );
assertEquals(actual, expected);
assertEquals("j%40heroku%2djar%2ecom", encodeIncludingSpecialCharacters("j@heroku-jar.com"));
assertEquals("%2e%2d%2a%5f", encodeIncludingSpecialCharacters(".-*_"));
assertTrue("Expected one column", queryResults.columnCount() == 1);
assertTrue(eq.equal(a, a));
assertTrue(eq.equal(a, b));
assertTrue(eq.equal(a, b));
assertEquals(queryResults.getColumns(), copy.getColumns()); assertEquals(queryResults.getRows(), copy.getRows());
assertFalse(eq.equal(a, b));
assertEquals(cqr.getColumns(), 2); assertEquals(cqr.getRows(), 3);
assertTrue(eq.equal(a, a));
assertTrue(!result.isPresent());
assertFalse(eq.equal(a, b));
assertFalse(eq.equal(a, b));
assertNotNull(StateLookup.getConfig());
assertFalse(eq.equal(a, b));
assertFalse(eq.equal(a, b));
assertTrue(result.isPresent()); assertTrue(bounds0.size() == bounds.size());
assertFalse("Found Association Column", queryResults.containsColumnName(ASSOC)); assertTrue("Did not find new assoc1 column", queryResults.containsColumnName("assoc1")); assertTrue("Did not find correct # of associations", queryResults.getResults("assoc1").size() == 3);
assertTrue(bounds0.size() == myBounds.size());
assertFalse("Found Association Column", queryResults.containsColumnName(ASSOC)); assertTrue("Did not find new assoc1 column", queryResults.containsColumnName("assoc1")); assertTrue("Did not find new assoc2 column", queryResults.containsColumnName("assoc2")); assertTrue("Did not find correct # of associations", queryResults.getResults("assoc1").size() == 4);
assertTrue("KLMNOPQRST".equals(s));
assertTrue(verifier.isValid("79927398713")); assertTrue(verifier.isValid("49927398716")); assertFalse(verifier.isValid("49927398717")); assertTrue(verifier.isValid("1234567812345670")); assertFalse(verifier.isValid("1234567812345678")); assertFalse(verifier.isValid("294217778"));
assertTrue(bytes1.equals(bytes2));
assertTrue(value.length() == 200); assertFalse("TEST".equals(value)); assertTrue("TEST".equals(value.substring(0, 4))); assertTrue(value.length() == 200); assertFalse("TEST".equals(value)); assertTrue("TEST".equals(value.substring(0, 4)));
assertEquals("", testField.getOptionalField4());
assertTrue(ByteArray.equalTo(byteArray, ba));
assertTrue(filler == 0x20); assertTrue(filler == 0x40);
assertEquals("should be TIFF", ImageObject.TYPE_TIFF, io.getSegmentType(1)); assertEquals("should be TIFF", ImageObject.TYPE_TIFF, io.getSegmentType(2));
assertEquals(offset2, offset); assertArrayEquals(tiffMarker, buffer);
assertTrue(value.equals("01234CBBBBBBBBBBBBBB")); assertTrue(value.equals("01234CBBBBBBBBBBBBBB")); assertTrue(value.equals("010001234DBBBBBBBBBB")); assertTrue(value.equals("01234F234DBBBBBBBBBB"));
assertEquals("suf", fn.getSuffix()); assertEquals("", fn.getSuffix()); assertEquals("suf", fn.getSuffix()); assertEquals("", fn.getSuffix()); assertEquals("suf", fn.getSuffix());
assertEquals(recordsFound[0], filter.getRecordCounters()[25]);
assertEquals("03", fileHeaderRecord.standardLevel()); assertEquals(3, fileHeaderRecord.standardLevelAsInt());
assertTrue(byteArray.getLength() == 10);
assertTrue(byteArray.getLength() == 200);
assertEquals("12345", testField.getAccountNumber());
assertEquals(" 12345/20", testField.toString());
assertTrue(byteArray.equals(byteArrayClone)); assertTrue(byteArray.getArray().value!= byteArrayClone.getArray().value); assertTrue(byteArray.getLength() == byteArrayClone.getLength()); assertTrue(byteArray.getEncoding().equals(byteArrayClone.getEncoding())); assertTrue(byteArray.getOrder() == byteArrayClone.getOrder()); assertTrue(s1.equals(s2));
assertTrue(byteArray.testBit(0, (byte) 0x01)); assertTrue(byteArray.testBit(0, (byte) 0x40)); assertTrue(byteArray.testBit(0, (byte) 0x41)); assertFalse(byteArray.testBit(0, (byte) 0x02)); assertTrue(byteArray.testBit(0, (byte) 0x01)); assertFalse(byteArray.testBit(0, (byte) 0x40));
assertEquals(f, testField);
assertEquals(recordsFound[0], filter.getRecordCounters()[25]);
assertTrue(byteArray.getLength() == 200);
assertEquals("20", testField.getTranCode());
assertEquals(inFile.length(), outFile.length());
assertTrue(value.length == 4); assertTrue(test[i] == (value[i] & 0x00ff));
assertTrue(bytes1[i] == bytes2[i]);
assertEquals(service.findUser(ServiceTestConfiguration.PROFILE_ID).toString(),ServiceTestConfiguration.user().toString());
assertNotNull("should have 2 quotes", quotes); assertEquals("should have 2 quotes", quotes.size(), 2);
assertEquals(service.findAccountprofileByAuthtoken(ServiceTestConfiguration.AUTH_TOKEN).toString(),ServiceTestConfiguration.user().toString());
assertFalse(comps.isEmpty()); assertTrue(pass);
assertThat(valid).isTrue();
assertNotNull("should have 1 quotes", quotes); assertEquals("should have 1 quotes", quotes.size(), 1);
assertEquals(accounts.size(),1); assertEquals(accounts.get(0), ServiceTestConfiguration.account());
assertEquals(result.getLogoutcount(), i); assertNull(result.getAuthtoken());
assertEquals(service.findAccount(ServiceTestConfiguration.PROFILE_ID).toString(),ServiceTestConfiguration.account().toString());
assertNull(result);
assertEquals(accounts.size(),0);
assertEquals(quote.getStatus(), "FAILED");
assertEquals(accounts.size(),1); assertEquals(accounts.get(0),ServiceTestConfiguration.account());
assertEquals(TestConfiguration.QUOTE_SYMBOL, quote.getSymbol()); assertEquals(TestConfiguration.QUOTE_NAME, quote.getName());
assertEquals(service.findUser(ServiceTestConfiguration.USER_ID).toString(),ServiceTestConfiguration.user().toString());
assertThat(valid).isFalse();
assertEquals(service.saveUser(acc),acc.getId());
assertEquals(result.get("accountid"),ServiceTestConfiguration.PROFILE_ID); assertNotNull(result.get("authToken"));
assertEquals(service.saveUser(accNull),acc.getId());
assertEquals(service.saveAccount(acc),acc.getId());
assertTrue(comps.isEmpty());
assertThat(entry.getKey(), is(1)); assertThat(entry.getValue(), is("y"));
assertThat(new HashSet<>(vars), is(new HashSet<>(asList(a, b, c, d))));
assertThat(entry.getKey(), is("foo")); assertThat(entry.getValue(), is(12L));
assertTrue(references(v, s));
assertThat(message.sender, is("Alice")); assertThat(message.body, is("Hi")); assertThat(message.recipient, is("Bob")); assertThat(message.subject, is("test")); assertThat(message.body, is("Goodbye"));
assertThat(getPath(body), is("/delete")); assertThat(getBody(body), is(Optional.empty())); assertThat(type.apply(body), is("DELETE"));
assertThat(string.getString().size(), is(1)); assertThat(string.getString().get(0), is(initialString));
assertThat(getPath(body), is("/post")); assertThat(getBody(body), is(Optional.of("body"))); assertThat(type.apply(body), is("POST"));
assertTrue(references(k, s));
assertThat(zebra.name(), is("foo")); assertThat(zebra.numberOfLegs(), is(10)); assertThat(updated.name(), is("clara")); assertThat(updated.numberOfLegs(), is(10));
assertThat(getPath(body), is("/put")); assertThat(getBody(body), is(Optional.of("body"))); assertThat(type.apply(body), is("PUT"));
assertTrue(spaghetti.alDente); assertThat(spaghetti.cheese, is("reggiano")); assertThat(spaghetti.sauce, is("tomato")); assertFalse(spaghetti.alDente); assertThat(spaghetti.cheese, is("cheddar")); assertThat(spaghetti.sauce, is("hot salsa"));
assertThat(entry.getKey(), is("1")); assertThat(entry.getValue(), is("1"));
assertTrue(references(LIST_OF_K, K)); assertFalse(references(LIST_OF_K, V)); assertTrue(references(MAP_K_V, V)); assertTrue(references(MAP_V_LIST_OF_K, K));
assertThat(apex.concat(), is("ab")); assertThat(updatedApex.concat(), is("ac"));
assertThat(message.sender, is("Alice")); assertThat(message.body, is("Hi")); assertThat(message.recipient, is("Bob")); assertThat(message.subject, is("test")); assertThat(messageUpdater(message).body("Goodbye").done().body, is("Goodbye"));
assertThat(getPath(body), is("/get")); assertThat(getBody(body), is(Optional.empty())); assertThat(type.apply(body), is("GET"));
assertThat(simple.concat(), is("ab")); assertThat(updatedSimple.concat(), is("ac")); assertTrue(updater == updaterFactory.updater(factory.simple("x")));
assertEquals(clusterName, presenter.clusterName());
assertEquals( org.dashbuilder.client.widgets.dataset.editor.sql.SQLDataSetDefAttributesEditor.class, presenter.getEditorClass() );
assertEquals( org.dashbuilder.client.widgets.dataset.editor.bean.BeanDataSetEditor.class, presenter.getEditorClass() );
assertEquals(datePattern, presenter.datePattern());
assertEquals(dataSetDef, presenter.getDataSetDef());
assertEquals(backendCacheAttributesEditor, presenter.backendCacheEditor());
assertEquals(dbSchema, presenter.dbSchema());
assertEquals(attributesEditor.quoteChar, presenter.quoteChar());
assertEquals(type, presenter.providerType);
assertEquals( org.dashbuilder.client.widgets.dataset.editor.sql.SQLDataSetEditor.class, presenter.getEditorClass() );
assertEquals( ElasticSearchDataSetDefAttributesDriver.class, presenter.getDriverClass() );
assertNull(presenter.getValue());
assertTrue(presenter.hasErrors());
assertEquals(cacheEnabled, presenter.cacheEnabled());
assertFalse(navTreeEditor.isExpanded()); assertEquals(((NavGroup) navTreeEditor.getNavItem()).getChildren().size(), 2); assertTrue(navTreeEditor.isExpanded());
assertEquals(id, presenter.id());
assertEquals(pushEnabled, presenter.pushEnabled());
assertNull(tested.tableDisplayer);
assertFalse(navTreeEditor.isExpanded()); assertTrue(navTreeEditor.isExpanded()); assertEquals(((NavGroup) navTreeEditor.getNavItem()).getChildren().size(), 3);
assertEquals(filter2, tested.value);
assertEquals(presenter.getSelectedType(), BARCHART);
assertEquals( CSVDataSetDefDriver.class, presenter.getDriverClass() );
assertNotNull(ne); assertEquals(NotificationEvent.NotificationType.SUCCESS, ne.getType());
assertEquals(generatorClass, presenter.generatorClass());
assertEquals(dataSet.getRowCount(), 11); assertEquals(d.getYear(), 114);
assertTrue(presenter.hasErrors());
assertEquals( org.dashbuilder.client.widgets.dataset.editor.csv.CSVDataSetEditor.class, presenter.getEditorClass() );
assertEquals(filePath, presenter.filePath());
assertEquals(timeAmount.getQuantity(), 11);
assertEquals( ElasticSearchDataSetDefDriver.class, presenter.getDriverClass() );
assertEquals(deptIntervalList.size(), 1); assertEquals(dataSet.getRowCount(), 1); assertEquals(deptPieChart.filterIndexes(COLUMN_DEPARTMENT).size(), 1); assertEquals(deptIntervalList.size(), 0);
assertEquals( org.dashbuilder.client.widgets.dataset.editor.bean.BeanDataSetDefAttributesEditor.class, presenter.getEditorClass() );
assertEquals(numberPattern, presenter.numberPattern());
assertEquals( SQLDataSetDefAttributesDriver.class, presenter.getDriverClass() );
assertEquals( SQLDataSetDefDriver.class, presenter.getDriverClass() );
assertEquals(view.asWidget(), presenter.asWidget());
assertEquals(filterView, filterEditor.view);
assertNull(d);
assertEquals(nameEditor, presenter.name());
assertEquals(view.asWidget(), presenter.asWidget());
assertEquals(timeInstant.getIntervalType(), DateIntervalType.MINUTE);
assertEquals(4, actualEntries.size());
assertNull(presenter.acceptableColumns);
assertNull("current workflow null", presenter.currentWorkflow);
assertTrue(presenter.restrictedColumns.isEmpty());
assertFalse(navTreeEditor.isExpanded()); assertEquals(((NavGroup) navTreeEditor.getNavItem()).getChildren().size(), 2); assertTrue(navTreeEditor.isExpanded());
assertEquals(quoteChar, presenter.quoteChar());
assertEquals(type, DateIntervalType.DAY);
assertEquals(attributesEditor.paramaterMap, presenter.paramaterMap());
assertTrue(layoutTemplateAnalyzer.hasNavigationComponents(layoutA)); assertTrue(layoutTemplateAnalyzer.hasNavigationComponents(layoutB)); assertTrue(layoutTemplateAnalyzer.hasNavigationComponents(layoutC)); assertTrue(layoutTemplateAnalyzer.hasNavigationComponents(layoutD)); assertFalse(layoutTemplateAnalyzer.hasNavigationComponents(layoutE));
assertEquals(basicAttributesEditor, presenter.basicAttributesEditor());
assertEquals(dataSetDef, presenter.getDataSetDef());
assertEquals(newValue, presenter.getValue());
assertEquals(qb - 1, qa);
assertEquals(uuidEditor, presenter.UUID());
assertEquals(attributesEditor.numberPattern, presenter.numberPattern());
assertEquals(validator.validate("500"), true); assertEquals(validator.validate("500d"), false); assertEquals(validator.validate("aaa"), false);
assertEquals(presenter.getSelectedSubtype(), LINE);
assertEquals(true, result);
assertEquals(presenter.getValue(), "entry2"); assertNull(presenter.getValue());
assertEquals(timeInstantView, timeInstantEditor.view);
assertNull("current workflow null", presenter.currentWorkflow);
assertNotNull(ne); assertEquals(NotificationEvent.NotificationType.ERROR, ne.getType());
assertEquals(columnTypeWidget, presenter.asWidget());
assertEquals(cacheMaxRows, presenter.cacheMaxRows());
assertEquals( DataSetProviderType.SQL, presenter.getProviderType() );
assertEquals(attributesEditor.serverURL, presenter.serverURL());
assertTrue(info.isEmpty());
assertEquals(timeInstant.getTimeMode(), TimeInstant.TimeMode.BEGIN);
assertEquals(view.asWidget(), presenter.asWidget());
assertEquals(attributesEditor.clusterName, presenter.clusterName());
assertEquals(attributesEditor.escapeChar, presenter.escapeChar());
assertEquals(columnType, presenter.columnType());
assertEquals(true, ((DropDownImageListEditor) presenter).isEditMode);
assertEquals( org.dashbuilder.client.widgets.dataset.editor.csv.CSVDataSetDefAttributesEditor.class, presenter.getEditorClass() );
assertEquals(dataSource, presenter.dataSource());
assertNull(presenter.getDataSetDef()); assertNull(presenter.flushCommand); assertNull(presenter.stepValidator); assertTrue(presenter.violations.isEmpty());
assertEquals( BeanDataSetDefDriver.class, presenter.getDriverClass() );
assertEquals(info.getRefList().size(), 3); assertEquals(info.getRefList().get(0), new LayoutNavigationRef(PERSPECTIVE, "A")); assertEquals(info.getRefList().get(1), new LayoutNavigationRef(NAV_COMPONENT, "PerspectiveDrag")); assertEquals(info.getRefList().get(2), new LayoutNavigationRef(PERSPECTIVE, "A"));
assertEquals(columnType, presenter.columnType());
assertEquals(acceptableValues, presenter.acceptableValues);
assertEquals( editor, presenter.getEditor() );
assertEquals(timeFrameView, timeFrameEditor.view);
assertEquals(filter3, tested.value);
assertEquals(1, presenter.restrictedColumns.size()); assertEquals("col1", presenter.restrictedColumns.get(0));
assertEquals(attributesEditor.fileURL, presenter.fileURL());
assertEquals(dataSet.getRowCount(), 2);
assertEquals(1, presenter.panels.size()); assertEquals(dataSetPanel, presenter.panels.get(0));
assertEquals(presenter.getItemSelected(), tree.getItemById(ITEM_ID_HOME));
assertEquals(refreshEditor, presenter.refreshEditor());
assertEquals( CSVDataSetDefAttributesDriver.class, presenter.getDriverClass() );
assertEquals(dataSetFilterEditor, tested.dataSetFilter());
assertEquals(refreshTime, presenter.refreshTime());
assertEquals(presenter.getNavItemStack().size(), 2); assertEquals(presenter.getNavItemStack().size(), 3);
assertEquals(attributesEditor.datePattern, presenter.datePattern());
assertEquals(dbTable, presenter.dbTable());
assertEquals(dbSQL, presenter.dbSQL());
assertEquals(dataSetBasicAttributesWorkflow, presenter.currentWorkflow);
assertEquals(1, presenter.panels.size()); assertEquals(dataSetPanel, presenter.panels.get(0));
assertEquals(this.view, view);
assertTrue(listEditor.getList().isEmpty());
assertEquals(escapeChar, presenter.escapeChar());
assertEquals(refreshAlways, presenter.refreshAlways());
assertEquals(columnsEditor, tested.columnListEditor());
assertEquals(false, ((DropDownImageListEditor) presenter).isEditMode);
assertEquals(dataSet.getRowCount(), 19);
assertEquals(separatorChar, presenter.separatorChar());
assertEquals(index, presenter.index());
assertEquals(attributesEditor.generatorClass, presenter.generatorClass());
assertEquals(provider, tested.provider());
assertEquals(1, presenter.panels.size()); assertEquals(dataSetPanel, presenter.panels.get(0));
assertNull(presenter.getValue());
assertEquals(attributesEditor.separatorChar, presenter.separatorChar());
assertEquals(presenter.getPerspectiveName("A.1"), "A.1"); assertEquals(presenter.getPerspectiveName("B.1"), "Pretty");
assertEquals(settings.getColumnSettings("date").getValuePattern(), "dd/MM/yyyy"); assertEquals(settings.getColumnSettings("number").getValuePattern(), "#,###");
assertEquals(dataSetProviderTypeWorkflow, presenter.currentWorkflow);
assertEquals(columnsAndFilterEditor, presenter.columnsAndFilterEditor());
assertEquals(itemList.size(), 2); assertEquals(itemList.get(0).getKey(), "entry1"); assertEquals(itemList.get(1).getKey(), "entry2");
assertEquals(timeAmount.getQuantity(), 9);
assertEquals(timeInstantView, timeInstantEditor.view);
assertEquals("ff", presenter.value);
assertEquals(timeFrameView, timeFrameEditor.view);
assertEquals( org.dashbuilder.client.widgets.dataset.editor.elasticsearch.ElasticSearchDataSetEditor.class, presenter.getEditorClass() );
assertEquals(type, presenter.type());
assertEquals(type, DateIntervalType.MONTH);
assertEquals(pushMaxSize, presenter.pushMaxSize());
assertTrue(info.isEmpty());
assertEquals(view.asWidget(), presenter.asWidget()); assertEquals(callback, presenter.callback);
assertEquals(attributesEditor.index, presenter.index());
assertEquals(attributesEditor.filePath, presenter.filePath());
assertThat(testTree.getItemById(PERSPECTIVE_ID)).isNotNull(); assertThat(testTree.getItemById(PERSPECTIVE_ID)).isNull();
assertEquals(attributesEditor.type, presenter.type());
assertEquals(serverURL, presenter.serverURL());
assertEquals(view.asWidget(), presenter.asWidget());
assertEquals(1, presenter.getValue().size());
assertEquals( BeanDataSetDefAttributesDriver.class, presenter.getDriverClass() );
assertTrue(info.isEmpty());
assertEquals(result, "Sales, Management, IT "); assertEquals(result, "Sales, Management, IT "); assertEquals(result, "Sales, Managemen..."); assertEquals(result, "Sales, Managem..."); assertEquals(result, "Sales ..."); assertEquals(result, "S...");
assertEquals( org.dashbuilder.client.widgets.dataset.editor.elasticsearch.ElasticSearchDataSetDefAttributesEditor.class, presenter.getEditorClass() );
assertEquals(clientCacheAttributesEditor, presenter.clientCacheEditor());
assertEquals(dataSet.getRowCount(), 10); assertTrue(d.getMonth() > 8);
assertThat((items).get(0).getName()).isEqualTo("name1"); assertThat((items).get(0).getContext()).contains("resourceId=" + PERSPECTIVE_ID); assertThat(tree.searchItems(NavWorkbenchCtx.perspective(PERSPECTIVE_ID))).isEmpty(); assertThat(tree.searchItems(NavWorkbenchCtx.perspective(perspectiveRenamedPlugin.getName())).get(0).getContext()).contains("resourceId=" + perspectiveRenamedPlugin.getName());
assertEquals("1 second", value);
assertEquals(fileURL, presenter.fileURL());
assertEquals(1, presenter.panels.size()); assertEquals(dataSetPanel, presenter.panels.get(0));
assertNotNull(presenter.listEditor);
assertEquals(newValue, presenter.getValue());
assertEquals(dataSet.getRowCount(), 18);
assertEquals(paramaterMap, presenter.paramaterMap());
assertTrue(info.isEmpty());
assertEquals( "accept,cancel", dialog.getButtons() );
assertEquals( "handler.consume()", list.getOnselect() );
assertEquals( Boolean.FALSE, table.getValueAt( 0, 0 ) ); assertEquals( "Ted", table.getValueAt( 0, 1 ) ); assertEquals( "tester", table.getValueAt( 0, 4 ) );
assertEquals( "start", dialog.getButtonalign() );
assertEquals( 20, determined.getMinimum() );
assertEquals( "F", menu.getAccesskey() );
assertEquals( 2, tabbox.getSelectedIndex() );
assertEquals( tree.getRootChildren(), document.getElementById( "main_treechildren" ) );
assertEquals( deck.getSelectedIndex(), 0 ); assertEquals( deck.getSelectedIndex(), 1 );
assertEquals( 0, ( (TreeHandler) container.getEventHandler( "handler" ) ).selectedRow );
assertTrue( txt.isMultiline() );
assertTrue( radio1.isDisabled() == false ); assertTrue( radio3.isDisabled() );
assertTrue( !determined.isIndeterminate() ); assertTrue( undetermined.isIndeterminate() );
assertEquals( 1, selectedItems.length ); assertEquals( selectedItems[0], item );
assertEquals( list.getSelectedItem().toString(), item.getLabel() );
assertEquals( "f", menu.getAcceltext() );
assertEquals( "testImage.png", img.getSrc() );
assertEquals( "this is extra1", dialog.getButtonlabelextra1() );
assertEquals( "default", txt.getValue() );
assertTrue( sampleData[i][y].equals( vals[i][y] ) );
assertEquals( "extra1", dialog.getButtonlabelextra1() );
assertEquals( 3, tabs.getTabCount() );
assertEquals( "testImage.png", button1.getImage() );
assertEquals( "500", txt.getMax() );
assertEquals( "onAccept", dialog.getOndialogaccept() );
assertEquals( 1, list.getSelectedIndex() ); assertEquals( item1, selected[0] ); assertEquals( item2, selected[1] );
assertEquals( 3, panels.getChildNodes().size() );
assertEquals( panel, tabbox.getSelectedPanel() );
assertTrue( !radio2.isSelected() ); assertTrue( radio1.isSelected() );
assertEquals( "single", list.getSeltype() );
assertTrue( check.isDisabled() ); assertTrue( !check.isDisabled() );
assertEquals( "Cancel", dialog.getButtonlabelcancel() );
assertEquals( 1, list.getSelectedIndex() );
assertEquals( SWT.V_SCROLL | SWT.H_SCROLL, Style.getOverflowProperty( "overflow:auto;color:red;" ) ); assertEquals( SWT.NONE, Style.getOverflowProperty( "overflow:other;" ) );
assertEquals( cols.getColumn( 0 ).getColumnType(), ColumnType.CHECKBOX ); assertEquals( cols.getColumn( 1 ).getColumnType(), ColumnType.TEXT ); assertEquals( cols.getColumn( 3 ).getColumnType(), ColumnType.COMBOBOX );
assertEquals( 35, determined.getValue() );
assertEquals( "4", txt.getMin() );
assertEquals( 2, tree.getRootChildren().getItemCount() );
assertEquals( 70, determined.getMaximum() );
assertEquals( 3, list.getRowCount() ); assertEquals( 0, list.getRowCount() );
assertTrue( check.isChecked() );
assertTrue( radio1.isDisabled() );
assertEquals( 5, determined.getMinimum() );
assertTrue( dialog.isHidden() );
assertEquals( "test", check.getLabel() );
assertEquals( SwingTree.SELECTION_MODE.MULTIPLE.toString(), tree.getSeltype() );
assertEquals( tabs, tabbox.getTabs() );
assertEquals( "foo.test()", check.getCommand() );
assertEquals( tree.getColumns(), document.getElementById( "column_list" ) );
assertTrue( radio2.isSelected() ); assertTrue( !radio1.isSelected() );
assertEquals( "label", list.getBinding() );
assertEquals( 3, box.getRowCount() ); assertEquals( "Nick", ( (XulListitem) items.get( 0 ) ).getLabel() ); assertEquals( "Barb", ( (XulListitem) items.get( 1 ) ).getLabel() ); assertEquals( "Kenneth", ( (XulListitem) items.get( 2 ) ).getLabel() );
assertTrue( !check.isDisabled() );
assertEquals( panels, tabbox.getTabpanels() );
assertEquals( "P", item.getAccesskey() );
assertEquals( "TOP", button1.getLabel() );
assertEquals( "true", bc.sourceToTarget( true ) ); assertEquals( "false", bc.sourceToTarget( false ) ); assertTrue( bc.targetToSource( "true" ) ); assertFalse( bc.targetToSource( "false" ) ); assertFalse( bc.targetToSource( null ) ); assertFalse( bc.targetToSource( "anything" ) );
assertEquals( "cancel me please", dialog.getButtonlabelcancel() );
assertNotNull( check2 );
assertEquals( 53, bc.sourceToTarget( longString ).length() );
assertEquals( "testing", radio1.getLabel() );
assertTrue( sampleData[i][y].equals( vals[i][y] ) );
assertEquals( 3, list.getElements().size() );
assertEquals( "accept,cancel,extra1,extra2", dialog.getButtons() );
assertEquals( 2, tree.getRows() );
assertEquals( "onExtra1", dialog.getOndialogextra1() );
assertEquals( 3, list.getRowCount() );
assertTrue( bc.sourceToTarget( 1 ) ); assertTrue( bc.sourceToTarget( Integer.MAX_VALUE ) ); assertFalse( bc.sourceToTarget( 0 ) ); assertFalse( bc.sourceToTarget( Integer.MIN_VALUE ) ); assertEquals( Integer.valueOf( 1 ), bc.targetToSource( true ) ); assertEquals( Integer.valueOf( 0 ), bc.targetToSource( false ) );
assertTrue( !dialog.isHidden() );
assertEquals( 65, determined.getMaximum() );
assertEquals( "onCancel", dialog.getOndialogcancel() );
assertEquals( "Test 1", radio1.getLabel() );
assertTrue( item.isDisabled() );
assertEquals( "Save", dialog.getButtonlabelaccept() );
assertTrue( msgThread.isAlive() ); assertTrue( !err );
assertEquals( "Paste", item.getLabel() );
assertEquals( source, converted ); assertEquals( target, converted );
assertEquals( "NUMERIC", txt.getType() ); assertEquals( "NORMAL", txt.getType() );
assertEquals( 1, list.getSelectedIndex() ); assertEquals( 2, list.getSelectedIndex() );
assertEquals( list.getSelectedItem().toString(), item.getLabel() );
assertEquals(expectedCaptionText, groupBox.label.getValue());
assertEquals( "extra2", dialog.getButtonlabelextra2() );
assertTrue( !check2.isChecked() ); assertTrue( check2.isChecked() );
assertEquals( deck.getSelectedIndex(), 0 );
assertEquals( "end", dialog.getButtonalign() );
assertTrue( !dialog.isHidden() ); assertTrue( dialog.isHidden() );
assertEquals( "reverse", button1.getDir() );
assertTrue( "selected indices should be equal: " + toString( indices ) + " vs " + toString( list.getSelectedIndices() ), Arrays.equals( indices, list.getSelectedIndices() ) );
assertTrue( table.editCellAt( 0, 0 ) ); assertTrue( table.editCellAt( 0, 3 ) ); assertTrue( table.editCellAt( 0, 4 ) );
assertEquals( 10, determined.getValue() );
assertEquals( "this is extra2", dialog.getButtonlabelextra2() );
assertEquals( "onExtra2", dialog.getOndialogextra2() );
assertEquals( "save me please", dialog.getButtonlabelaccept() );
assertTrue( txt.isReadonly() );
assertTrue(json.isPresent());
assertThat(err).isEqualTo("Not attempting to decode error response of type \'application/json;charset=utf-8\' as string");
assertThat(CollectionUtils.deepEquals( list, list )).isTrue();
assertThat(err).isEqualTo("Not attempting to decode error response with unspecified Content-Type");
assertThat(CollectionUtils.deepEquals( unmodifiableList(newArrayList(b(1), b(2), b(3))), newArrayList(b(1), b(2), b(3)) )).isTrue();
assertThat(err).isNotEqualTo("lies"); assertThat(e.getMessage()).isEqualTo("Content stream is already disposed.");
assertThat(err).isEqualTo("");
assertThat(err).isEqualTo("");
assertThat(err).isEqualTo(errMsg);
assertThat(CollectionUtils.deepEquals( newArrayList(b(1), b(2), b(3)), unmodifiableList(newArrayList(b(1), b(2), b(3))) )).isTrue();
assertThat(CollectionUtils.deepEquals( newArrayList(b(11), b(12), b(13)), newArrayList(b(1), b(2), b(3)) )).isFalse();
assertThat(CollectionUtils.deepEquals( newArrayList(b(1), b(2), b(3), b(4)), newArrayList(b(1), b(2), b(3)) )).isFalse();
assertThat(CollectionUtils.deepEquals( unmodifiableList(newArrayList(b(1), b(2), b(3))), unmodifiableList(newArrayList(b(1), b(2), b(3))) )).isTrue();
assertThat(CollectionUtils.deepEquals( newArrayList(b(1), b(2), b(3)), newArrayList(b(1), b(2), b(3)) )).isTrue();
assertTrue(eval.matches); assertTrue(eval.lookingAt); assertTrue(eval.find); assertEquals(2, eval.groups.length); assertEquals(testInput, eval.groups[0].group); assertEquals(0, eval.groups[0].start); assertEquals(testInput.length(), eval.groups[0].end); assertEquals("bar", eval.groups[1].group); assertEquals(3, eval.groups[1].start); assertEquals(6, eval.groups[1].end);
assertEquals("zzzcatzzzdogzzz", eval.replaceFirst); assertEquals("zzzcatzzzcatzzz", eval.replaceAll);
assertFalse(eval.matches); assertFalse(eval.find); assertEquals(0, eval.groups.length);
assertNull (UBLPEDocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBLPEDocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBLPEDocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBLPEDocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBLPEDocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator (null));
assertNull (UBL21DocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBL21DocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBL21DocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBL21DocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBL21DocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator ());
assertNull (UBL20DocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBL20DocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBL20DocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBL20DocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBL20DocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator (null));
assertSame (EChange.CHANGED, aNSCtx0.removeMapping ("cec")); assertSame (EChange.UNCHANGED, aNSCtx0.removeMapping ("cec")); assertSame (EChange.CHANGED, aNSCtx.removeMapping ("cec")); assertSame (EChange.UNCHANGED, aNSCtx.removeMapping ("cec"));
assertNull (UBL23DocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBL23DocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBL23DocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBL23DocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBL23DocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator ());
assertSame (EChange.CHANGED, aNSCtx.removeMapping ("cec")); assertSame (EChange.UNCHANGED, aNSCtx.removeMapping ("cec"));
assertNull (UBL22DocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBL22DocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBL22DocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBL22DocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBL22DocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator ());
assertNull (UBLTRDocumentTypes.getDocumentTypeOfImplementationClass (null)); assertNull (UBLTRDocumentTypes.getSchemaOfImplementationClass (null)); assertNull (UBLTRDocumentTypes.getSchemaOfImplementationClass (String.class)); assertSame (eDocType, UBLTRDocumentTypes.getDocumentTypeOfImplementationClass (eDocType.getImplementationClass ())); assertSame (eDocType.getSchema (), UBLTRDocumentTypes.getSchemaOfImplementationClass (eDocType.getImplementationClass ())); assertNotNull (eDocType.getValidator (null));
assertThat(resultFields).containsExactlyInAnyOrder( mapper.createObjectNode().put("name", "stagemonitorField")); assertThat(resultFieldFormat).hasSize(1); assertThat(resultFieldFormat.get("stagemonitor")).isEqualTo(mapper.createObjectNode().put("name", "stagemonitorFieldFormatMap"));
assertEquals(Long.valueOf(2L), aLong.getValue());
assertNotNull(registry.getTimers().get(name("cache_get").tag("cache_name", "cache").tier("All").build()));
assertTrue(context.isReport()); assertFalse(context.isReport());
assertThat(converter.toString(null)).isNull();
assertEquals("\\"measurement\\\\ with\\\\ quotes\\",tag\\\\ key\\\\ with\\\\ spaces=tag\\\\,value\\\\,with\\"commas\\"", InfluxDbReporter.getInfluxDbLineProtocolString(name("\\"measurement with quotes\\"").tag("tag key with spaces", "tag,value,with\\"commas\\"").build()));
assertThat(etag).isNotNull(); assertThat(conditionalGetResponse.getStatus()).isEqualTo(304); assertThat(conditionalGetResponse.getContentLength()).isZero();
assertEquals( objectMap("@timestamp", timestamp) .add("name", "gauge") .add("app", "test"), asMap(out));
assertEquals("java.lang.RuntimeException", tags.get("exception.class")); assertEquals("test", tags.get("exception.message")); assertNotNull(tags.get("exception.stack_trace"));
assertFalse(new ConfigurationPasswordChecker(configuration, passwordKey).isPasswordSet());
assertThat(response.getContentAsString()).contains("EumObject"); assertThat(response.getStatus()).isEqualTo(200); assertThat(response.getHeader(CACHE_CONTROL)).isEqualTo("no-cache");
assertThat(reports).isEqualTo(51);
assertNull(testUpdate.getValue()); assertEquals("updated!", testUpdate.getValue());
assertEquals(name("foo").tag("bar", "baz").tag("qux", "quux").build(), name("foo").tag("bar", "baz").tag("qux", "quux").build()); assertEquals(name("foo").tag("qux", "quux").tag("bar", "baz").build(), name("foo").tag("bar", "baz").tag("qux", "quux").build());
assertEquals(1000, new QuantizedClock(delegate, 100).getTime());
assertNotNull(incident); assertEquals(CheckResult.Status.OK, incident.getOldStatus()); assertEquals(CheckResult.Status.WARN, incident.getNewStatus()); assertNotNull(incident.getFirstFailureAt()); assertNull(incident.getResolvedAt()); assertEquals(1, incident.getConsecutiveFailures()); assertNull(incidentRepository.getIncidentByCheckId(check.getId()));
assertTrue(interceptorContext.isCollectCallTree()); assertFalse(interceptorContext.isCollectCallTree());
assertThat(tagExcludingSpanEventListener.onSetTag("foo", "bar")).isEqualTo("bar"); assertThat(tagExcludingSpanEventListener.onSetTag("foo", 1)).isEqualTo(1);
assertEquals(Long.valueOf(Long.MAX_VALUE), converter.convert(Long.toString(Long.MAX_VALUE)));
assertThat(ClientSpanBooleanTagProcessor.parseBooleanOrFalse("0")).isFalse();
assertTrue(logMessage.contains("foo.bar: baz"));
assertEquals("foo", configuration.getConfigurationOptionByKey("primaryKey").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey1").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey2").getValueAsString());
assertFalse(indexTemplate.contains("hot")); assertEquals(0, JsonUtils.getMapper().readTree(indexTemplate).get("settings").get("index").get("number_of_replicas").asInt()); assertFalse(indexTemplate.contains("number_of_shards"));
assertFalse(interceptorContext.isCollectCallTree()); assertTrue(interceptorContext.isCollectCallTree()); assertTrue(interceptorContext.isCollectCallTree());
assertThat(VersionUtils.getVersionFromPomProperties(ByteBuddy.class, BYTEBUDDY_GROUP, "byte-buddy")).matches(VERSION_PATTERN);
assertTrue(Stagemonitor.isStarted()); assertTrue(Stagemonitor.getMeasurementSession().isInitialized()); assertSame(measurementSession, Stagemonitor.getMeasurementSession()); assertThat(healthCheckRegistry.runHealthCheck("TestPlugin").isHealthy()).isTrue(); assertThat(healthCheckRegistry.runHealthCheck("TestExceptionPlugin").isHealthy()).isFalse();
assertThat(tracer.finishedSpans().get(0).tags().get(Tags.SAMPLING_PRIORITY.getKey())).isEqualTo(0);
assertThat(ClientSpanBooleanTagProcessor.parseBooleanOrFalse("true")).isTrue();
assertEquals(expected, elasticsearchClient.getDashboardForElasticsearch("Test Dashboard.json").toString());
assertTrue(context.isReport()); assertFalse(context.isReport());
assertThat(tagExcludingSpanEventListener.onSetTag("foo", "bar")).isEqualTo("bar"); assertThat(tagExcludingSpanEventListener.onSetTag("foo", 1)).isEqualTo(1);
assertEquals(TestEnum.TEST_ENUM, converter.convert("TEST_ENUM")); assertEquals(TestEnum.TEST_ENUM, converter.convert("test_enum")); assertEquals(TestEnum.TEST_ENUM, converter.convert("test-enum"));
assertNull(converter.toString(null));
assertEquals(Long.valueOf(2L), invalidLong.getValue());
assertEquals("foo", configuration.getConfigurationOptionByKey("primaryKey").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey1").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey2").getValueAsString());
assertFalse(interceptorContext.isExcludeCallTree()); assertTrue(interceptorContext.isExcludeCallTree());
assertEquals("Config key \'configuration.password\' does not exist.", e.getMessage());
assertThat(healthCheckRegistry.runHealthCheck("TestPlugin").isHealthy()).isTrue(); assertThat(healthCheckRegistry.runHealthCheck("TestExceptionPlugin").isHealthy()).isFalse(); assertThat(healthCheckRegistry.runHealthCheck("TestExceptionPlugin").getMessage()).isEqualTo("disabled via configuration");
assertTrue(loggingSpanReporter.isActive(null)); assertFalse(loggingSpanReporter.isActive(null));
assertThat(mockTracer.finishedSpans()).hasSize(1); assertThat(mockTracer.finishedSpans().get(0).tags()).containsEntry(Tags.SAMPLING_PRIORITY.getKey(), 0);
assertThat(finishedSpans).hasSize(1);
assertEquals( objectMap("@timestamp", timestamp) .add("name", "gauge") .add("app", "test") .add("value_string", "foo"), asMap(out));
assertThat(elasticsearchClient.getJson("/test").get("test")).isNotNull();
assertNull(spanContext);
assertEquals("cpu_usage,core=1,level=user", InfluxDbReporter.getInfluxDbLineProtocolString(name("cpu_usage").tag("level", "user").tag("core", "1").build()));
assertThat(plugin.isInitialized()).describedAs("{} is not initialized", plugin.getClass().getSimpleName()).isTrue();
assertEquals("a94a8fe5ccb19ba61c4c0873d391e987982fbbd3", StringUtils.sha1Hash("test"));
assertEquals("[{\\"name\\":\\"foo\\",\\"tags\\":{\\"bar\\":\\"baz\\"},\\"values\\":{\\"count\\":1}}]", resp.getContentAsString());
assertFalse(indexTemplate.contains("hot")); assertEquals(1, JsonUtils.getMapper().readTree(indexTemplate).get("settings").get("index").get("number_of_shards").asInt()); assertFalse(indexTemplate.contains("number_of_replicas"));
assertEquals(1900, new QuantizedClock(delegate, 100).getTime());
assertThat(testAppender.list).hasSize(1); assertThat(event.getLevel().toString()).isEqualTo("WARN"); assertThat(event.getMessage()).startsWith("Error(s) while sending a _bulk request to elasticsearch: {}");
assertEquals("foo", configuration.getConfigurationOptionByKey("primaryKey").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey1").getValueAsString()); assertEquals("foo", configuration.getConfigurationOptionByKey("alternateKey2").getValueAsString());
assertThat(ClientSpanBooleanTagProcessor.parseBooleanOrFalse(null)).isFalse();
assertTrue(converter.convert("true")); assertFalse(converter.convert("false"));
assertThat(testAppender.list).hasSize(0);
assertEquals("Wrong password for \'configuration.password\'.", e.getMessage());
assertTrue(invalidPatternSyntax.getValue().isEmpty());
assertThat(ClientSpanBooleanTagProcessor.parseBooleanOrFalse("false")).isFalse();
assertEquals(map("@timestamp", timestamp, Object.class) .add("name", "meter") .add("app", "test") .add("count", 10) .add("m15_rate", 5.0) .add("m1_rate", 3.0) .add("m5_rate", 4.0) .add("mean_rate", 2.0), asMap(out));
assertEquals( objectMap("@timestamp", timestamp) .add("name", "gauge") .add("app", "test") .add("value_boolean", true), asMap(out));
assertEquals("GET *.js", monitoredHttpRequest.getRequestName());
assertThat(option.getValidOptions()).containsExactlyInAnyOrder(DefaultStrategyImpl.class.getName(), SpecialStrategyImpl.class.getName()); assertThat(option.getValue()).isInstanceOf(DefaultStrategyImpl.class); assertThat(option.getValue()).isInstanceOf(SpecialStrategyImpl.class);
assertNull(converter.toString(null));
assertThat(pluginNoDependency.isInitialized()).isTrue(); assertThat(pluginSimpleDependency.isInitialized()).isTrue();
assertFalse(context.isReport());
assertFalse(modifyIndexTemplate("es/6/stagemonitor-elasticsearch-metrics-index-template.json", 0, 0, 0).contains("hot")); assertFalse(modifyIndexTemplate("es/6/stagemonitor-elasticsearch-metrics-index-template.json", -1, 0, 0).contains("hot"));
assertNotNull(registry.getMeters().get(name)); assertEquals(1, registry.getMeters().get(name).getCount());
assertEquals( map("@timestamp", timestamp, Object.class) .add("name", "web_sessions") .add("app", "test") .add("count", 123), asMap(out));
assertEquals("\'configuration.password\' is not set.", e.getMessage());
assertThat(jaegerTracerFactory.isRoot(rootSpan)).isTrue(); assertThat(jaegerTracerFactory.isRoot(childSpan)).isFalse();
assertEquals(Collections.singleton("foobar"), lowerStrings.getValue());
assertEquals(3.1415, converter.convert("3,1415"), 0);
assertEquals(Integer.valueOf(Integer.MAX_VALUE), converter.convert(Integer.toString(Integer.MAX_VALUE)));
assertEquals(name("foo").tag("bar", "baz").tag("qux", "q").build(), metricNameTemplate.build("baz", "q")); assertSame(metricNameTemplate.build("baz", "quux"), metricNameTemplate.build("baz", "quux")); assertNotEquals(metricNameTemplate.build("baz", "quux"), metricNameTemplate.build("baz2", "quux"));
assertEquals("metrics-*,-metrics-1970.01.08,-metrics-1970.01.07,-metrics-1970.01.06", indexPattern);
assertFalse(interceptorContext.isExcludeCallTree()); assertFalse(interceptorContext.isExcludeCallTree());
assertThat(resultDefinitions.get("foo").textValue()).isEqualTo("bar"); assertThat(mapper.readTree(resultDefinitions.get("fields").textValue())) .isEqualTo(mapper.readTree(sourceDefinitions.get("fields").textValue())); assertThat(mapper.readTree(resultDefinitions.get("fieldFormatMap").textValue())) .isEqualTo(mapper.readTree(sourceDefinitions.get("fieldFormatMap").textValue()));
assertThat(statusCode).isEqualTo(401); assertThat(e.getMessage()) .doesNotContain(url) .contains(urlWithoutAuth);
assertEquals(name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode(), name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode()); assertEquals(name("foo").tag("qux", "quux").tag("bar", "baz").build().hashCode(), name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode());
assertTrue(booleanTrue.getValue()); assertFalse(booleanFalse.getValue());
assertEquals("60s", template.get("auto_min").textValue()); assertTrue(intervalFound);
assertEquals(1000, new QuantizedClock(delegate, 100).getTime());
assertThat(pluginNoDependency.isInitialized()).isTrue();
assertEquals(3.1415, converter.convert(Double.toString(3.1415)), 0);
assertEquals("metrics-*,-metrics-1970.01.*,-metrics-1969.12.*,-metrics-1969.11.30,-metrics-1969.11.29", indexPattern);
assertEquals(3.1415, converter.convert("3.1415"), 0);
assertTrue(context.isReport());
assertThat(errors.get()).isEqualTo(1);
assertTrue("Expected m1 rate of > 0, but got " + mean_rate, mean_rate > 0);
assertNotNull(registry.getMeters().get(name)); assertEquals(1, registry.getMeters().get(name).getCount());
assertNull(converter.toString(null));
assertEquals(name("foo").tag("bar", "baz").tag("qux", "q").build(), metricNameTemplate.build("baz", "q")); assertSame(metricNameTemplate.build("baz", "quux"), metricNameTemplate.build("baz", "quux")); assertNotEquals(metricNameTemplate.build("baz", "quux"), metricNameTemplate.build("baz2", "quux"));
assertThat(ClientSpanBooleanTagProcessor.parseBooleanOrFalse("1")).isTrue();
assertEquals("cpu_usage", InfluxDbReporter.getInfluxDbLineProtocolString(name("cpu_usage").build()));
assertTrue(indexTemplate.contains("hot")); assertFalse(indexTemplate.contains("number_of_shards")); assertFalse(indexTemplate.contains("number_of_replicas"));
assertTrue(new ConfigurationPasswordChecker(configuration, passwordKey).isPasswordSet());
assertThat(response.getStatus()).isEqualTo(404); assertThat(response.getContentAsString()).isEmpty();
assertFalse(context.isReport()); assertFalse(context.isReport());
assertThat(sampledSpans).hasSize(1);
assertNull(corePlugin.getElasticsearchUrl());
assertEquals("testCaching", testCaching.getValue()); assertEquals("testCaching", testCaching.getValue()); assertEquals("testCaching", testCaching.getValue()); assertEquals("testCaching2", testCaching.getValue());
assertNotNull(registry.getMeters().get(name)); assertEquals(1, registry.getMeters().get(name).getCount());
assertThat(corePlugin.getElasticsearchUrls()).isEmpty();
assertNotNull(CorePlugin.getNameOfLocalHost());
assertEquals(Collections.singletonMap("Transient Configuration Source", true), configuration.getNamesOfConfigurationSources());
assertThat(resultFields).containsExactlyInAnyOrder( mapper.createObjectNode().put("name", "fooField").put("value", "new")); assertThat(resultFieldFormat).hasSize(1); assertThat(resultFieldFormat.get("foo")).isEqualTo(mapper.createObjectNode().put("name", "fooNew"));
assertThat(response.getContentAsString()).contains("EumObject"); assertThat(response.getStatus()).isEqualTo(200); assertThat(response.getHeader(CACHE_CONTROL)).isEqualTo("max-age=60");
assertEquals(0, tags.get(Tags.SAMPLING_PRIORITY.getKey()));
assertEquals("Validation failed", e.getMessage());
assertFalse(context.isReport()); assertFalse(context.isReport());
assertEquals(1, registry.getGauges().entrySet().size()); assertEquals(0, registry.getMeters().entrySet().size()); assertEquals("test", stagemonitorEntry.getKey().getName()); assertEquals(1, stagemonitorEntry.getValue().getValue());
assertEquals("fooBar", string.getValue());
assertNotNull(incident); assertEquals(CheckResult.Status.OK, incident.getOldStatus()); assertEquals(CheckResult.Status.WARN, incident.getNewStatus()); assertNotNull(incident.getFirstFailureAt()); assertNull(incident.getResolvedAt()); assertEquals(1, incident.getConsecutiveFailures()); assertNotNull(incident); assertEquals(CheckResult.Status.WARN, incident.getOldStatus()); assertEquals(CheckResult.Status.OK, incident.getNewStatus()); assertNotNull(incident.getFirstFailureAt()); assertNotNull(incident.getResolvedAt());
assertEquals("[" + "{\\"name\\":\\"foo\\",\\"tags\\":{\\"bar\\":\\"baz\\"},\\"values\\":{\\"count\\":1}}," + "{\\"name\\":\\"qux\\",\\"tags\\":{\\"quux\\":\\"foo\\"},\\"values\\":{\\"count\\":1}}" + "]", resp.getContentAsString());
assertTrue(invalidPatternMap.getValue().isEmpty());
assertEquals(name("foo").tag("bar", "baz").tag("qux", "quux").build(), metricNameTemplate.build("baz")); assertSame(metricNameTemplate.build("baz"), metricNameTemplate.build("baz")); assertNotEquals(metricNameTemplate.build("baz"), metricNameTemplate.build("baz2"));
assertEquals("Basic dXNlcjpwYXNz", request.getHeader("Authorization")); assertThat(request.getQueryString()).isEqualTo("bar=baz");
assertEquals(StringUtils.removeStart("teststring", "test"), "string"); assertEquals(StringUtils.removeStart("string", "test"), "string"); assertEquals(StringUtils.removeStart("stringtest", "test"), "stringtest");
assertEquals("metrics-*,-metrics-1970.01.*,-metrics-1969.12.31,-metrics-1969.12.30", indexPattern);
assertEquals("[OK -> CRITICAL] Test Timer has 2 failing checks", alertTemplateProcessor.processShortDescriptionTemplate(createIncidentWithVersion("1", 1))); assertEquals("foo", alertTemplateProcessor.processShortDescriptionTemplate(testIncident));
assertTrue(context.isReport());
assertNotNull(classLoadingGauge); assertTrue(((Integer) classLoadingGauge.getValue()) > 1);
assertThat(StringUtils.toCommaSeparatedString("foo", "bar")).isEqualTo("foo,bar"); assertThat(StringUtils.toCommaSeparatedString("foo")).isEqualTo("foo"); assertThat(StringUtils.toCommaSeparatedString()).isEqualTo("");
assertNull(converter.toString(null));
assertThat(elasticsearchIncidentRepository.getIncidentByCheckId("test 1")).isNull();
assertEquals("bar", source.getValue("foo"));
assertThat(testAppender.list).hasSize(1); assertThat(event.getLevel().toString()).isEqualTo("WARN"); assertThat(event.getMessage()).startsWith("Error(s) while sending a _bulk request to elasticsearch: {}");
assertNull(registry.getTimers().get(name)); assertNotNull(registry.getMeters().get(name));
assertThat(MonitoredHttpRequest.getClientIp(request)).isEqualTo("10.1.1.1");
assertThat(tagExcludingSpanEventListener.onSetTag("foo", "bar")).isNull(); assertThat(tagExcludingSpanEventListener.onSetTag("foo", 1)).isNull();
assertThat(sampledSpans).hasSize(1);
assertEquals("cpu\\\\ usage,level=soft\\\\ irq", InfluxDbReporter.getInfluxDbLineProtocolString(name("cpu usage").tag("level", "soft irq").build()));
assertNull(converter.toString(null));
assertEquals(0, seriesRegistry.size()); assertEquals(1, seriesRegistry.size());
assertEquals(0, listeners.size()); assertEquals(1, listeners.size()); assertFalse(plot.addListener(pl1)); assertEquals(1, listeners.size()); assertEquals(2, listeners.size());
assertEquals(plot.getRenderer(MockRenderer1.class).getFormatter(m1), f1); assertEquals(plot.getRenderer(MockRenderer1.class).getFormatter(m2), f2); assertEquals(plot.getRenderer(MockRenderer2.class).getFormatter(m2), f3); assertNotSame(plot.getRenderer(MockRenderer2.class).getFormatter(m2), f1);
assertEquals(0d, normedData.getY(0).doubleValue(), DELTA); assertEquals(0.1d, normedData.getY(1).doubleValue(), DELTA); assertEquals(0.2d, normedData.getY(2).doubleValue(), DELTA); assertEquals(0.5d, normedData.getY(5).doubleValue(), DELTA);
assertTrue(r1.intersects(r2)); assertTrue(r2.intersects(r1)); assertFalse(r1.intersects(r3)); assertFalse(r3.intersects(r1)); assertTrue(r2.intersects(r3)); assertTrue(r3.intersects(r2));
assertEquals(2, seriesRegistry.get(s1).size()); assertEquals(1, seriesRegistry.get(s2).size());
assertEquals(1000, sampledXYSeries.size()); assertEquals(500, sampledXYSeries.size()); assertEquals(250, sampledXYSeries.size()); assertEquals(125, sampledXYSeries.size());
assertEquals(0f, point.x); assertEquals(0f, point.y); assertEquals(10f, point.x); assertEquals(100f, point.y); assertEquals(5f, point.x); assertEquals(50f, point.y);
assertEquals(0, renderer.pointsCaches.size()); assertEquals(1, renderer.pointsCaches.size()); assertEquals(1, renderer.pointsCaches.size()); assertEquals(1, renderer.pointsCaches.size()); assertEquals(0, renderer.pointsCaches.size());
assertEquals(2, layerHash.size()); assertEquals(obj1, layerHash.getAbove(obj3));
assertEquals(10d, lr.length().doubleValue(), 0); assertEquals(10d, lr.length().doubleValue(), 0);
assertTrue(seriesRegistry.contains(s1, LineAndPointFormatter.class)); assertFalse(seriesRegistry.contains(s1, BarFormatter.class)); assertTrue(seriesRegistry.contains(s2, LineAndPointFormatter.class)); assertFalse(seriesRegistry.contains(s3, LineAndPointFormatter.class));
assertEquals(5.0, r1.transform(1.5, r2, true)); assertEquals(10.0, r1.transform(1, r2, true)); assertEquals(0.0, r1.transform(2, r2, true)); assertEquals(10.0, r1.transform(1, r3, true));
assertEquals(2, rList.size());
assertEquals(5.0, r1.transform(1.5, r2)); assertEquals(0.0, r1.transform(1, r2)); assertEquals(10.0, r1.transform(2, r2)); assertEquals(-10.0, r1.transform(1, r3));
assertEquals(0, listeners.size()); assertEquals(2, listeners.size()); assertFalse(plot.removeListener(pl3)); assertTrue(plot.removeListener(pl1)); assertEquals(1, listeners.size()); assertFalse(plot.removeListener(pl1)); assertEquals(1, listeners.size()); assertTrue(plot.removeListener(pl2)); assertEquals(0, listeners.size());
assertEquals(obj3, layerHash.getKeysAsList().get(0)); assertEquals(obj1, layerHash.getKeysAsList().get(1)); assertEquals(obj2, layerHash.getKeysAsList().get(2));
assertEquals(0, result.getMin().intValue()); assertEquals(1, result.getMax().intValue()); assertEquals(0, result.getMin().intValue()); assertEquals(4, result.getMax().intValue());
assertEquals(0f, graphWidget.seriesToScreenX(-100)); assertEquals(10f, graphWidget.seriesToScreenX(100)); assertEquals(5f, graphWidget.seriesToScreenX(0));
assertEquals(-100, coords.x.intValue()); assertEquals(100, coords.y.intValue()); assertEquals(100, coords.x.intValue()); assertEquals(-100, coords.y.intValue()); assertEquals(0, coords.x.intValue()); assertEquals(0, coords.y.intValue());
assertEquals(1, seriesRegistry.size()); assertEquals(1, seriesRegistry.size()); assertEquals(0, seriesRegistry.size());
assertEquals(5, sampledXYSeries.getZoomLevels().size());
assertEquals(8d, series.getMaxZoomFactor());
assertEquals(1, plot.getRegistry().size()); assertEquals(1, plot.getRenderers().size()); assertEquals(2, plot.getRenderer(cl).getSeriesList().size()); assertEquals(1, plot.getRendererList().size()); assertEquals(3, plot.getRenderer(cl).getSeriesList().size()); assertEquals(2, plot.getRendererList().size());
assertEquals(-350, plot.getBounds().getMinX().intValue());
assertEquals(obj, layerHash.getTop()); assertEquals(obj3, layerHash.getKeysAsList().get(0)); assertEquals(obj2, layerHash.getKeysAsList().get(1)); assertEquals(obj1, layerHash.getKeysAsList().get(2)); assertEquals(obj, layerHash.getKeysAsList().get(3));
assertEquals(0.5d, normedData.getY(0).doubleValue(), DELTA); assertEquals(0.7d, normedData.getY(1).doubleValue(), DELTA); assertEquals(1.5d, normedData.getY(5).doubleValue(), DELTA);
assertEquals(350, plot.getBounds().getMaxY().intValue());
assertEquals(-100, graphWidget.screenToSeriesX(new PointF(0, 0)).intValue()); assertEquals(100, graphWidget.screenToSeriesX(new PointF(10, 100)).intValue()); assertEquals(0, graphWidget.screenToSeriesX(new PointF(5, 50)).intValue());
assertEquals(2, r3.getMin().intValue()); assertEquals(5, r3.getMax().intValue()); assertEquals(2, r4.getMin().intValue()); assertEquals(5, r4.getMax().intValue());
assertNull(FastNumber.orNull(null));
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertEquals(-350, plot.getBounds().getMinY().intValue());
assertEquals(obj3, layerHash.getKeysAsList().get(0)); assertEquals(obj1, layerHash.getKeysAsList().get(1)); assertEquals(obj2, layerHash.getKeysAsList().get(2));
assertTrue(region1.intersects(region2)); assertTrue(region2.intersects(region1)); assertFalse(region1.intersects(region3)); assertFalse(region3.intersects(region1)); assertTrue(region1.intersects(region4)); assertTrue(region4.intersects(region1)); assertTrue(region1.intersects(region5)); assertTrue(region5.intersects(region1));
assertEquals(3.0, trans1.x); assertEquals(15.0, trans1.y); assertEquals(100f, result.x); assertEquals(0f, result.y); assertEquals(2d, result2.x); assertEquals(10d, result2.y);
assertEquals(obj1, layerHash.getBottom()); assertEquals(obj3, layerHash.getAbove(obj1)); assertEquals(obj2, layerHash.getAbove(obj3));
assertEquals(1.5, r1.center()); assertEquals(0.0, r2.center()); assertEquals(-1.5, r3.center());
assertEquals(4, iterations); assertEquals(10, iterations);
assertEquals(2, seriesRegistry.size()); assertEquals(0, seriesRegistry.size());
assertEquals(0.5d, normedData.getY(0).doubleValue(), DELTA); assertEquals(0.6d, normedData.getY(1).doubleValue(), DELTA); assertEquals(1.0d, normedData.getY(5).doubleValue(), DELTA);
assertEquals(0d, normedData.getY(0).doubleValue(), DELTA); assertEquals(0.4d, normedData.getY(2).doubleValue(), DELTA); assertEquals(0.8d, normedData.getY(4).doubleValue(), DELTA); assertEquals(1.0d, normedData.getY(5).doubleValue(), DELTA);
assertEquals(obj3, layerHash.getTop()); assertEquals(obj1, layerHash.getBeneath(obj3)); assertEquals(obj2, layerHash.getBeneath(obj1));
assertEquals(0f, distance.left); assertEquals(0f, distance.top); assertEquals(10f, distance.right); assertEquals(10f, distance.bottom); assertEquals(0f, distance.left); assertEquals(0f, distance.top); assertEquals(10f, distance.right); assertEquals(10f, distance.bottom);
assertEquals(0.01, r1.ratio(r2)); assertEquals(100.0, r2.ratio(r1));
assertFalse(line1.intersects(line2)); assertTrue(line1.intersects(line2)); assertTrue(line1.intersects(line2)); assertFalse(line1.intersects(line2));
assertEquals(100f, graphWidget.seriesToScreenY(100)); assertEquals(0f, graphWidget.seriesToScreenY(-100)); assertEquals(50f, graphWidget.seriesToScreenY(0));
assertEquals(200f, cellRect.width()); assertEquals(200f, cellRect.width()); assertEquals(400f, cellRect.height());
assertEquals(5d, result.getMinX().doubleValue()); assertEquals(9d, result.getMaxX().doubleValue()); assertEquals(5d, result.getMinY().doubleValue()); assertEquals(9d, result.getMaxY().doubleValue());
assertEquals(series.getMaxZoomFactor(), estimator.calculateZoom(series, new RectRegion(0, 1000, 0, 1000))); assertEquals(1d, estimator.calculateZoom(series, new RectRegion(0, 1, 0, 1)));
assertEquals(100, graphWidget.screenToSeriesY(new PointF(0, 0)).intValue()); assertEquals(-100, graphWidget.screenToSeriesY(new PointF(100, 100)).intValue()); assertEquals(0, graphWidget.screenToSeriesY(new PointF(50, 50)).intValue());
assertFalse(containsRole);
assertTrue(containsRole);
assertTrue(exceptionThrown);
assertTrue(exceptionThrown);
assertEquals(RouteController.DEFAULT_ROUTE, routeController.router());
assertEquals(TEST_USER_ENTITY, userEntity);
assertTrue(exceptionThrown);
assertFalse(containsRole);
assertTrue(exceptionThrown);
assertTrue(exceptionThrown);
assertTrue(exceptionThrown);
assertFalse(containsRole);
assertTrue(userService.containsKey(RANDOM_UUID));
assertNotNull(loginResponse);
assertEquals(ENCRYPTED_PASSWORD, userService.encrypt(UNENCRYPTED_PASSWORD));
assertNotNull(loginResponse);
assertFalse(containsRole);
assertEquals(COUNT, Long.valueOf(userService.count()));
assertFalse(exceptionThrown);
assertTrue(userService.matches(UNENCRYPTED_PASSWORD, ENCRYPTED_PASSWORD));
assertTrue(dto instanceof Movie); assertEquals("Iron Man 3", ((Movie)dto).getName()); assertEquals(new Integer(2013), ((Movie)dto).getYear()); assertEquals(Quality.HD, ((Movie)dto).getQuality());
assertEquals(getExpectedMovie(), movieParser.parse(getMatchItem(movieInput)));
assertEquals(getExpectedTvShow(), tvShowParser.parse(getMatchItem(tvShowInput3)));
assertEquals(getExpectedTvShow(), tvShowParser.parse(getMatchItem(tvShowInput1)));
assertEquals(getExpectedTvShow(), tvShow2); assertEquals(getExpectedTvShow(), tvShow3); assertEquals(getExpectedTvShow(), tvShow4); assertEquals(1, tvShows.size());
assertEquals(getExpectedTvShow(), tvShowParser.parse(getMatchItem(tvShowInput2)));
assertEquals(getExpectedMovie(), movieParser.parse(getMatchItem(movieInput)));
assertEquals(getExpectedTvShow(), tvShowParser.parse(getMatchItem(tvShowInput4)));
assertTrue(dto instanceof MovieInfo); assertEquals("Iron Man 3", ((MovieInfo)dto).getName()); assertEquals(new Integer(2013), ((MovieInfo)dto).getYear()); assertEquals("HD", ((MovieInfo)dto).getQuality());
assertEquals(expectedParsedContent, parsedContents);
assertThat("The initial database must contain 5 entries", getNumberOfRows(), is(5)); assertThat("No current versions should be deleted", getNumberOfRows(), is(5)); assertThat("There must be 15 entries", getNumberOfRows(), is(15)); assertThat("The 10 outdated entries should be deleted", getNumberOfRows(), is(5)); assertThat("Only the recent blacklist version should be present", getUniqueBlacklistVersions(), Matchers.containsInAnyOrder(expected.toArray()));
assertEquals("!yro1\\n", sWriter.toString());
assertEquals("Hello\\\\\\\\nWorld!", StringUtil.escape("Hello\\\\nWorld!")); assertEquals("Hello\\\\nWorld!", StringUtil.escape("Hello\\nWorld!")); assertEquals("\\\\r\\tHello\\\\nWorld!", StringUtil.escape("\\r\\tHello\\nWorld!")); assertEquals("Hello\\\\\\\\\\\\nWorld!", StringUtil.escape("Hello\\\\\\nWorld!")); assertEquals("Hello\\tWorld", StringUtil.escape("Hello\\tWorld")); assertEquals("Hello\\\\\\\\World!", StringUtil.escape("Hello\\\\World!"));
assertEquals("!yn\\n", sWriter.toString());
assertEquals(1.2f, converter.convert(1.2)); assertTrue(converter.convert(1.2) instanceof Float);
assertEquals("!ylo2\\n", sWriter.toString()); assertEquals(7, newList.size()); assertEquals(4, list.size()); assertEquals(3, list2.size()); assertEquals(newList.get(4), list2.get(0)); assertEquals("!ylo2\\n!ylo3\\n", sWriter.toString()); assertEquals(8, newList.size());
assertEquals("!yi10\\n", sWriter.toString());
assertTrue(sWriter.toString().startsWith("!x"));
assertEquals("!yi2\\n", sWriter.toString());
assertEquals("!yv\\n", sWriter.toString()); assertEquals(((ExampleClass) gateway.getObject(target)).field10, 123);
assertEquals("!yro1\\n", sWriter.toString()); assertEquals("!yro1\\n!yi2\\n", sWriter.toString());
assertEquals("", StringUtil.unescape(""));
assertTrue(gateway.getBindings().containsKey(target)); assertTrue(page.length() > 1); assertTrue(!page.contains("method1")); assertTrue(page.contains("getField1"));
assertEquals("!yv\\n", sWriter.toString()); assertEquals(list.get(0), "2"); assertEquals(list.get(1), "3"); assertEquals(list.get(2), "9"); assertEquals(list.get(3), "1");
assertTrue(sWriter.toString().startsWith("!xspy4j.Py4JException: "));
assertEquals("!yi2\\n", sWriter.toString());
assertEquals("!yo\\n", sWriter.toString());
assertTrue(gateway.getBindings().containsKey(target)); assertTrue(page.length() > 1); assertTrue(page.contains("method1")); assertTrue(page.contains("getField1"));
assertTrue(Protocol.isEnd("e")); assertFalse(Protocol.isEnd("")); assertFalse(Protocol.isEnd("btrue")); assertTrue(true);
assertEquals("!yo\\n", sWriter.toString());
assertEquals("!x\\n", sWriter.toString());
assertEquals("Hello", StringUtil.unescape("Hello")); assertEquals("Hello World!", StringUtil.unescape("Hello World!")); assertEquals("Hello\\tWorld!\\"", StringUtil.unescape("Hello\\tWorld!\\""));
assertTrue(gateway.getBindings().containsKey(target)); assertEquals("!yv\\n", sWriter.toString()); assertFalse(gateway.getBindings().containsKey(target)); assertEquals("!yv\\n!yv\\n", sWriter.toString());
assertEquals(rEngine.getFieldValue(cat, rEngine.getField(cat, "age2")), 2); assertEquals(rEngine.getFieldValue(cat, rEngine.getField(cat, "CONSTANT")), "Salut!"); assertEquals(rEngine.getFieldValue(null, rEngine.getField(cat, "CONSTANT")), "Salut!");
assertTrue(TypeUtil.isInstanceOf(I0Test.class, object)); assertTrue(TypeUtil.isInstanceOf("py4j.reflection.I0Test", object)); assertFalse(TypeUtil.isInstanceOf(I0Test.class, object)); assertFalse(TypeUtil.isInstanceOf("py4j.reflection.I0Test", object));
assertArrayEquals(mInvoker.getMethod().getParameterTypes(), new Class[] { TestInterface.class }); assertArrayEquals(mInvoker.getMethod().getParameterTypes(), new Class[] { TestInterface.class });
assertEquals("!yro0\\n", sWriter.toString());
assertNull(rEngine.getClass(Cat.class, "smallcat")); assertNotNull(rEngine.getClass(Cat.class, "SmallCat")); assertNull(rEngine.getClass(ReflectionEngineTest.class, "smallcat"));
assertEquals("!ys9\\n", sWriter.toString());
assertEquals("Hello\\\\World!", StringUtil.unescape("Hello\\\\\\\\World!")); assertEquals("Hello \\\\\\\\World!", StringUtil.unescape("Hello \\\\\\\\\\\\\\\\World!"));
assertTrue(sWriter.toString().startsWith("!ysjava.lang.RuntimeException: Hello World"));
assertEquals("!ys111\\n", sWriter.toString());
assertEquals(2, array1int.length); assertEquals(3, array1String.length); assertEquals(4, array1String[0].length);
assertNull(rEngine.getMethod(Cat.class, "methodABC")); assertNotNull(rEngine.getMethod(Cat.class, "meow")); assertNotNull(rEngine.getMethod(Cat.class, "meow15"));
assertEquals("!x\\n", sWriter.toString());
assertTrue(sWriter.toString().startsWith("!xspy4j.Py4JException: "));
assertEquals("!x\\n", sWriter.toString());
assertEquals("!yv\\n", sWriter.toString()); assertNull(Array.get(array2, 1)); assertTrue(true);
assertEquals("!yro1\\n", sWriter.toString()); assertEquals(3, ((ExampleClass) gateway.getObject("o1")).getField1());
assertEquals("!ys123\\n", sWriter.toString());
assertEquals("!yro1\\n", sWriter.toString()); assertEquals(3, ((ExampleClass) gateway.getObject("o1")).getField1());
assertEquals("!ys1\\n", sWriter.toString());
assertEquals("!yv\\n", sWriter.toString()); assertEquals(((ExampleClass) gateway.getObject(target)).field20, gateway.getObject(objectId));
assertEquals("!yv\\n", sWriter.toString());
assertTrue(gateway.getBindings().containsKey(target)); assertTrue(page.length() > 1); assertTrue(page.contains("method1")); assertTrue(!page.contains("getField1"));
assertEquals("!yro0\\n", sWriter.toString()); assertEquals("!yro0\\n!xsThe class java.lang.FOOOOO does not exist.\\n", sWriter.toString());
assertEquals("!yo\\n", sWriter.toString());
assertEquals("!ylo2\\n", sWriter.toString()); assertEquals(12, newList.size()); assertEquals(4, list.size()); assertEquals("!ylo2\\n!ylo3\\n", sWriter.toString()); assertEquals(0, newList.size());
assertEquals("!yro0\\n", sWriter.toString());
assertEquals("!yv\\n", sWriter.toString()); assertNull(Array.get(array1, 1));
assertEquals("!yv\\n", sWriter.toString()); assertEquals(list.get(0), "1"); assertEquals(list.get(3), "9");
assertArrayEquals(bytes, bytes2); assertNotNull(rObject.getPrimitiveObject());
assertEquals("!yv\\n", sWriter.toString());
assertEquals(pythonPort, GatewayServer.DEFAULT_PYTHON_PORT + 1); assertEquals(pythonAddress, server.getAddress());
assertEquals((short) 100, converter.convert(100)); assertTrue(converter.convert(100) instanceof Short); assertEquals((byte) 100, converter.convert(100)); assertTrue(converter.convert(102) instanceof Byte);
assertEquals("!xro1\\n", sWriter.toString());
assertEquals(3, intarray.length); assertEquals(3, stringarray.length); assertEquals(5, stringarray[0].length);
assertEquals("!ysHello World\\n", sWriter.toString());
assertEquals("!yv\\n", sWriter.toString()); assertEquals(Array.getInt(array2, 1), 555);
assertEquals("Hello\\\\nWorld!", StringUtil.unescape("Hello\\\\\\\\nWorld!")); assertEquals("Hello\\nWorld!", StringUtil.unescape("Hello\\\\nWorld!")); assertEquals("Hello\\\\\\nWorld!", StringUtil.unescape("Hello\\\\\\\\\\\\nWorld!")); assertEquals("\\rHello\\\\\\nWorld!", StringUtil.unescape("\\\\rHello\\\\\\\\\\\\nWorld!"));
assertEquals("!yi1\\n", sWriter.toString());
assertTrue(gateway.getBindings().containsKey(target)); assertTrue(page.length() > 1); assertTrue(page.contains("method1")); assertTrue(page.contains("getField1"));
assertTrue(gateway.getBindings().containsKey(target)); assertTrue(page.length() > 1); assertTrue(page.contains("method1")); assertTrue(!page.contains("getField1"));
assertEquals("test", converter.convert("test")); assertTrue(converter.convert("test") instanceof String);
assertEquals("!yro0\\n", sWriter.toString()); assertTrue(gateway.getObject("o0") instanceof Stack);
assertEquals("!ylo2\\n", sWriter.toString()); assertEquals(2, newList.size()); assertEquals("9", newList.get(0)); assertEquals("3", newList.get(1)); assertEquals(4, list.size()); assertEquals("!ylo2\\n!ylo3\\n", sWriter.toString()); assertEquals(0, newList.size());
assertEquals("!yv\\n", sWriter.toString()); assertEquals("!yv\\n!yro1\\n", sWriter.toString()); assertEquals(((ExampleClass) gateway.getObject("o1")).getField1(), 3); assertEquals("!yv\\n!yro1\\n!yi2\\n", sWriter.toString());
assertEquals("!yro1\\n", sWriter.toString());
assertEquals(4, list.size()); assertEquals("!yv\\n", sWriter.toString()); assertEquals(12, list.size()); assertEquals("!yv\\n!yv\\n", sWriter.toString()); assertEquals(0, list.size());
assertEquals("!yro1\\n", sWriter.toString());
assertTrue(Protocol.isEmpty("")); assertTrue(Protocol.isEmpty(" ")); assertTrue(Protocol.isEmpty("\\n")); assertTrue(Protocol.isEmpty(null)); assertFalse(Protocol.isEmpty("btrue"));
assertEquals("test/me", provider.getRelativePath(projectBasedir, repoRoot));
assertTrue(sourceRef.startsWith("scm:git:foo;path=\\"tycho-sourceref-jgit/src/test/resources\\""));
assertEquals(IOTester.VALUE_OUT_PAYLOAD, buf.toString());
assertEquals(IOTester.VALUES_OUT_PAYLOAD, buf.toString());
assertEquals(IOTester.BT_OUT_PAYLOAD, buf.toString());
assertThat("Activated", activated, is(false));
assertThat("Activated", activated, is(false));
assertThat("Not Activated", activated, is(true));
assertThat("Activated", activated, is(false));
assertThat("Not Activated", activated, is(true));
assertThat("Activated", activated, is(false));
assertThat("Activated", activated, is(true));
assertThat("Not Activated", activated, is(true));
assertEquals(Collections.singletonList(solaceServiceCredentials), jmsAutoConfBase.getSolaceServiceCredentials());
assertNotNull(VCAP_APPLICATION); assertEquals("{}", VCAP_APPLICATION); assertNotNull(VCAP_SERVICES); assertTrue(VCAP_SERVICES.contains("solace-pubsub")); assertNotNull(bean); assertNotNull(springSolConnectionFactoryCloudFactory.getSolConnectionFactory()); assertNotNull(availableServices); assertEquals(1, availableServices.size());
assertNull((jmsAutoConfBase.getSolConnectionFactory(solaceServiceCredentials.getId())));
assertEquals(solaceServiceCredentials, jmsAutoConfBase.findFirstSolaceServiceCredentials());
assertNotNull(VCAP_APPLICATION); assertEquals("{}", VCAP_APPLICATION); assertNotNull(VCAP_SERVICES); assertTrue(VCAP_SERVICES.contains("solace-pubsub")); assertNotNull(bean); assertNotNull(springSolConnectionFactoryCloudFactory.getSolConnectionFactory()); assertNotNull(availableServices); assertEquals(1,availableServices.size());
assertNotNull("The ServiceDescription should not be NULL.", desc);
assertEquals(1234, config.getInteger("testValidNumber"));
assertTrue("The ServiceDescription should not be NULL.", desc != null );
assertEquals(1234, value);
assertTrue( "Re-serialised ServiceDescription does not match the original. ", sd.equals(nsd));
assertNotNull("The generated temporary file path should not be null", tempFile.getPath()); assertTrue("Did not find the ID in the file name.", tempFile.getPath() .indexOf(humanReadableID) >= 0);
assertTrue("The ServiceDescription should not be NULL.", desc != null);
assertEquals("testString", config.getString("testValidString"));
assertTrue("The ServiceDescription should not be NULL.", desc != null );
assertNotNull("The generated temporary file path should not be null", tempFile.getPath()); assertEquals("Un-expected filename.", desiredFileName, tempFile .getName());
assertTrue("ValidateResult should not be NULL!", vr!=null);
assertNotNull(sb);
assertEquals("defaultValue", config.getString("testInvalidString", "defaultValue"));
assertNotNull("The generated temporary file path should not be null", tempFile.getPath());
assertNotNull("Expected to find properties in: " + baseDir + File.separatorChar + getClass().getName() + ".properties", config);
assertThat(caughtException()).isExactlyInstanceOf(TodoNotFoundException.class);
assertThat(returnedTodoEntries).hasSize(1);
assertThat(error.getCode()).isEqualTo(HttpStatus.BAD_REQUEST.value()); assertThat(error.getMessage()).isNotEmpty(); assertThat(error.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST); assertThat(validationErrors).hasSize(1); assertThat(validationError.getField()).isEqualTo(FIELD_NAME); assertThat(validationError.getErrorCode()).isEqualTo(FIELD_ERROR_CODE); assertThat(validationError.getErrorMessage()).isEqualTo(FIELD_ERROR_DEFAULT_MESSAGE);
assertThat(caughtException()).isExactlyInstanceOf(TodoNotFoundException.class);
assertThat(caughtException()).isExactlyInstanceOf(TodoNotFoundException.class);
assertTrue(complete.isCompleted()); assertEquals(6, complete.getResult().intValue()); assertFalse(complete.isFaulted()); assertFalse(complete.isCancelled()); assertTrue(error.isCompleted()); assertTrue(error.getError() instanceof RuntimeException); assertTrue(error.isFaulted()); assertFalse(error.isCancelled()); assertTrue(cancelled.isCompleted()); assertFalse(cancelled.isFaulted()); assertTrue(cancelled.isCancelled());
assertFalse(delayed.isCompleted()); assertTrue(delayed.isCompleted()); assertFalse(delayed.isFaulted()); assertFalse(delayed.isCancelled());
assertEquals(10, count.get());
assertFalse(task.isCompleted()); assertTrue(success); assertTrue(task.isCompleted()); assertEquals("SHOW ME WHAT YOU GOT", task.getResult());
assertTrue(complete.isCompleted()); assertEquals(6, complete.getResult().intValue()); assertFalse(complete.isFaulted()); assertFalse(complete.isCancelled()); assertTrue(error.isCompleted()); assertTrue(error.getError() instanceof RuntimeException); assertTrue(error.isFaulted()); assertFalse(error.isCancelled()); assertTrue(cancelled.isCompleted()); assertFalse(cancelled.isFaulted()); assertTrue(cancelled.isCancelled());
assertFalse(task.isCompleted()); assertTrue(success); assertTrue(task.isCompleted()); assertEquals(exception, task.getError());
assertArrayEquals(testSequence.getBytes(StandardCharsets.US_ASCII), result);
assertEquals("192.168.70.12", ByteUtil.formatIntAsIpAddress(address));
assertEquals(int1, Bits.readShort(longBytes, 0) & 0xFFFF); assertEquals(int2, Bits.readShort(longBytes, 2) & 0xFFFF); assertEquals(int3, Bits.readShort(longBytes, 4) & 0xFFFF); assertEquals(int4, Bits.readShort(longBytes, 6) & 0xFFFF);
assertFalse(ByteUtil.isInteger(bytes, 0, bytes.length));
assertTrue(ByteUtil.isInteger(bytes, 0, bytes.length));
assertArrayEquals("0000000000000000000".getBytes(StandardCharsets.US_ASCII), longAsAsciiBytes); assertArrayEquals("0000000000000000007".getBytes(StandardCharsets.US_ASCII), longAsAsciiBytes); assertArrayEquals("0900000000000000000".getBytes(StandardCharsets.US_ASCII), longAsAsciiBytes); assertArrayEquals("0099999999999999999".getBytes(StandardCharsets.US_ASCII), longAsAsciiBytes); assertArrayEquals("0899999999999999999".getBytes(StandardCharsets.US_ASCII), longAsAsciiBytes);
assertThat(saved).isNotEmpty();
assertThat(emailAddresses).containsOnly("shazin.sadakath@gmail.com", "shazin.swe@gmail.com");
assertThat(comments).isEqualTo(actualComments);
assertEquals("2.11", version);
assertFalse(connection.isClosed());
assertTrue(checker.versionIsCompatible(2.12));
assertEquals("groupId:artifactId", softwareProjectId.getProjectId());
assertTrue(building);
assertEquals(earth, softwareProjectId);
assertFalse(isDisabled);
assertEquals("description", description);
assertTrue(isSuccessful);
assertEquals(1, comparator.compare("13", "6"));
assertEquals(1, views.size());
assertEquals(1000, buildTime.getDuration()); assertNotNull(buildTime.getStartTime());
assertEquals("planName1", projectIds.get(new SoftwareProjectId("key1"))); assertEquals("planName2", projectIds.get(new SoftwareProjectId("key2")));
assertEquals(78, testResult.getCoverage(), 0); assertEquals(10, testResult.getFailCount()); assertEquals(20, testResult.getSkipCount()); assertEquals(120, testResult.getPassCount());
assertEquals(1.0f, plugin.getVersion(), 0);
assertEquals(BuildState.SUCCESS, state);
assertEquals("jsmadja", commiter.getId()); assertEquals("Julien Smadja", commiter.getName()); assertEquals("jsmadja@xebia.fr", commiter.getEmail());
assertEquals(1.0f, bamboo.getVersion(), 0);
assertTrue(projectNames.contains("Earth"));
assertEquals(TEAM_CITY_URL + "/app/rest/projects", projectsUrl);
assertTrue(softwareProjectIds.contains(earth));
assertFalse(isDisabled);
assertEquals(DemoConnection.class, connectionClass);
assertTrue(checker.versionIsCompatible("2.4"));
assertEquals(hashCode1, hashCode2);
assertEquals(BambooConnection.class, bamboo.getConnectionClass());
assertEquals(TEAM_CITY_URL + "/app/rest/server", serverUrl);
assertNotNull(estimatedFinishTime);
assertEquals("2.12", version);
assertEquals(TEAM_CITY_URL + "/app/rest/version", versionUrl);
assertTrue(isNotMavenProject);
assertEquals(TEAM_CITY_URL + "/app/rest/buildTypes/id:bt297/builds", buildListUrl);
assertTrue(isDisabled);
assertTrue(checker.versionIsCompatible(3.0));
assertEquals("name1", softwareProjectIds.get(new SoftwareProjectId("key1"))); assertEquals("name2", softwareProjectIds.get(new SoftwareProjectId("key2")));
assertNotNull(estimatedFinishTime);
assertEquals("description", description);
assertEquals(0, unitTestResult.getCoverage(), 0); assertEquals(3, unitTestResult.getFailCount(), 0); assertEquals(4, unitTestResult.getSkipCount(), 0); assertEquals(0, unitTestResult.getPassCount(), 0);
assertFalse(checker.versionIsCompatible(1.0));
assertNull(cache.get("url", ResourceCache.class));
assertNotNull(buildTime); assertNotNull(buildTime.getStartTime()); assertTrue(buildTime.getDuration() > 0);
assertEquals("5", lastBuildId);
assertEquals(qm1, qm2);
assertFalse(hashCode == 0);
assertNull(plugin.getSoftwareId(null, properties));
assertEquals(-1, comparator.compare("1", "2"));
assertEquals("id1", softwareProjectId.getProjectId());
assertEquals("10", lastBuildId);
assertEquals("1.396", version);
assertEquals(1, views.size());
assertEquals(0, comparator.compare("1", "text"));
assertEquals("name", name);
assertTrue(commiters.isEmpty());
assertNotNull(build);
assertTrue(description.isEmpty());
assertEquals(TEAM_CITY_URL + "/app/rest/changes/id:3", changeUrl);
assertEquals(5, views.size()); assertTrue(views.contains(expectedView));
assertTrue(isDisabled);
assertEquals("Demo Plugin", plugin.getName());
assertEquals(BuildState.SUCCESS, state);
assertEquals(1, lastBuildId);
assertEquals("groupId:artifactId", mavenId);
assertEquals(8, integrationTestResult.getCoverage(), 0);
assertEquals(42, lastBuildNumber);
assertEquals("Sonar plugin", sonar.getName());
assertTrue(commiters.isEmpty());
assertTrue(views.isEmpty());
assertTrue(sonar.getVersion() > 0);
assertNotNull(result.getMeasure("coverage"));
assertEquals(TEAM_CITY_URL + "/builds/id:26/pom.xml", pomUrl);
assertEquals(TEAM_CITY_URL + "/app/rest/projects/id:project54", projectUrl);
assertEquals("Earth", name);
assertEquals(coverageMeasure, qualityResult.getMeasure("coverage"));
assertTrue(buildCommiters.isEmpty());
assertEquals("1.407", version);
assertEquals("2.0.1", version);
assertFalse(building);
assertEquals(TEAM_CITY_URL + "/app/rest/users/username:davcamer", usernameUrl);
assertFalse(buildIds.isEmpty());
assertEquals("net.awired.visuwall.plugin.demo:earth", mavenId);
assertEquals("Pluto", name);
assertNull(cache.get("url", ResourceCache.class, MediaType.TEXT_HTML_TYPE));
assertFalse(s1.equals(null));
assertEquals("5", lastBuildId);
assertEquals("name1", projectIds.get(new SoftwareProjectId("id1"))); assertEquals("name2", projectIds.get(new SoftwareProjectId("id2")));
assertFalse(projectDisabled);
assertFalse(checker.versionIsCompatible(2.3));
assertEquals("2.8", version);
assertEquals("Bamboo Plugin", bamboo.getName());
assertTrue(checker.versionIsCompatible(2.5));
assertEquals("description", description);
assertFalse(isDisabled);
assertTrue(checker.versionIsCompatible(2.4));
assertTrue(properties.isEmpty());
assertEquals("project1", names.get(0)); assertEquals("project2", names.get(1));
assertTrue(isMavenProject);
assertTrue(earthBuildTime.getDuration() > 1000); assertNotNull(earthBuildTime.getStartTime());
assertEquals(0, comparator.compare("1", "1"));
assertTrue(views.isEmpty());
assertEquals(date, hudsonConnection.getEstimatedFinishTime(projectId, ""));
assertTrue(isBuilding);
assertEquals(duration, hudsonBuild.getDuration()); assertEquals(buildNumber, hudsonBuild.getBuildNumber()); assertEquals(commiters, hudsonBuild.getCommiters()); assertEquals(startTime, hudsonBuild.getStartTime()); assertEquals(state, hudsonBuild.getState());
assertEquals(date, jenkinsConnection.getEstimatedFinishTime(projectId, ""));
assertEquals("description", description);
assertEquals(TEAM_CITY_URL + "/app/rest/builds/id:47068", buildTypeUrl);
assertEquals(1, connection.getBuildIds(uranus).size()); assertEquals(1, connection.getBuildIds(earth).size()); assertEquals(2, connection.getBuildIds(mars).size()); assertEquals(1, connection.getBuildIds(moon).size()); assertEquals(1, connection.getBuildIds(pluto).size()); assertEquals(1, connection.getBuildIds(neptune).size());
assertFalse(checker.versionIsCompatible(2.0));
assertFalse(s1.equals(s2));
assertEquals("1.407", version);
assertEquals(4, projectNames.size()); assertTrue(projectNames.contains(expectedProject));
assertTrue(projectNames.contains("Earth"));
assertEquals(SonarConnection.class, connectionClass);
assertFalse(isBuilding);
assertTrue(metricsByCategory.isEmpty());
assertEquals("artifactId", mavenId);
assertEquals("1", lastBuildId);
assertEquals(2011, cal.get(Calendar.YEAR)); assertEquals(2, cal.get(Calendar.DAY_OF_MONTH)); assertEquals(3, cal.get(Calendar.MONTH) + 1); assertTrue(15 == cal.get(Calendar.HOUR_OF_DAY) || 9 == cal.get(Calendar.HOUR_OF_DAY)); assertEquals(19, cal.get(Calendar.MINUTE)); assertEquals(40, cal.get(Calendar.SECOND));
assertTrue(checker.versionIsCompatible("2.12"));
assertEquals(TEAM_CITY_URL + "/app/rest/buildTypes/id:bt296", buildTypeUrl);
assertEquals("dude", commiters[0]); assertEquals("sweet", commiters[1]);
assertEquals("2.7.1", version);
assertEquals(3, views.size()); assertEquals("Telluriques", views.get(0)); assertEquals("Gazeuses", views.get(1)); assertEquals("Other", views.get(2));
assertTrue(isDisabled);
assertEquals("fr.norad.visuwall:visuwall-hudsonclient", artifactId);
assertEquals("name", name);
assertFalse(isDisabled);
assertNotNull(document);
assertEquals(0, testResult.getCoverage(), 0); assertEquals(0, testResult.getFailCount()); assertEquals(0, testResult.getSkipCount()); assertEquals(0, testResult.getPassCount());
assertEquals(2, graph.getEdgeCount()); assertEquals(0, graph.getEdgeCount());
assertNotNull(result.get());
assertFalse(node.isRegulatingVoltage()); assertFalse(node.isRegulatingVoltage()); assertTrue(node.isRegulatingVoltage()); assertTrue(node.isRegulatingVoltage());
assertEquals(3.f, sensitivityValue.getVariableReference(), EPSILON_COMPARISON);
assertArrayEquals(new int[] {2, 0, 1, 0, 1}, m.getColumnValueCount());
assertTrue(TransformersValidation.INSTANCE.checkTransformer(transformer, strictConfig, NullWriter.NULL_WRITER)); assertFalse(TransformersValidation.INSTANCE.checkTransformer(transformer, strictConfig, NullWriter.NULL_WRITER));
assertEquals(1, parameters.getExtensions().size()); assertTrue(parameters.getExtensionByName(DUMMY_EXTENSION_NAME) instanceof DummyExtension); assertNotNull(parameters.getExtension(DummyExtension.class));
assertTrue(FlowsValidation.INSTANCE.checkFlows(transformer1, looseConfigSpecificCompatibility, NullWriter.NULL_WRITER)); assertFalse(FlowsValidation.INSTANCE.checkFlows(transformer1, strictConfigSpecificCompatibility, NullWriter.NULL_WRITER));
assertTrue(exc.getCause() instanceof MyException);
assertArrayEquals(new Vertex[] {vertexObj1, vertexObj2}, graph.getVertexObjectStream().toArray());
assertNotNull(result);
assertEquals(1, cmd.size()); assertEquals(1, cmd.get(0).getExecutionCount());
assertFalse(config.getPreprocessorName().isPresent());
assertNotNull(importers); assertEquals(1, importers.size()); assertTrue(importers.contains(testImporter));
assertNull(exporter);
assertTrue(isUcteNodeId("B_SU1_11")); assertTrue(isUcteNodeId("B_SU1_1 ")); assertTrue(isUcteNodeId("7efG8411")); assertFalse(isUcteNodeId(" ")); assertFalse(isUcteNodeId("B_SU1_")); assertFalse(isUcteNodeId("&ezrt874g"));
assertEquals("Default", defaultNamingStrategy.getName());
assertEquals(Boolean.FALSE, options.isThrowExceptionIfExtensionNotFound()); assertEquals(Boolean.FALSE, options.withNoExtension()); assertEquals(-1, (int) options.getExtensions().map(Set::size).orElse(-1)); assertEquals(Boolean.TRUE, options.withAllExtensions());
assertEquals("Name", variable.getName());
assertTrue(parameters.getLoadFlowParameters().isTwtSplitShuntAdmittance());
assertThat(computationException) .hasCause(cause) .hasMessageContaining("oops") .hasMessageContaining("RuntimeException") .hasStackTraceContaining("Caused by") .hasStackTraceContaining("oops");
assertThat(SecurityAnalysisPreprocessors.factoryForName("test")) .isInstanceOf(TestPreprocessorFactory.class);
assertNotEquals("B1", bPluginID); assertEquals(b1.getClass().getName(), bPluginID);
assertEquals(1, parameters.getExtensions().size()); assertNotNull(parameters.getExtension(DummyExtension.class)); assertNotNull(parameters.getExtensionByName("dummy-extension"));
assertNotNull(network); assertNotNull(network.getLoad("LOAD"));
assertEquals(FilePreProcessor.FILE_GUNZIP, file.getPreProcessor());
assertFalse(node.isRegulatingFrequency()); assertFalse(node.isRegulatingFrequency()); assertFalse(node.isRegulatingFrequency()); assertTrue(node.isRegulatingFrequency());
assertNotNull(computation); assertEquals("dummy", computation.getName()); assertEquals(126f, network.getGenerator("GEN").getTerminal().getP(), 0f);
assertEquals(1, parameters.getExtensions().size()); assertTrue(parameters.getExtensionByName("dummyExtension") instanceof DummyExtension); assertNotNull(parameters.getExtension(DummyExtension.class));
assertTrue(providerFromStream instanceof GroovyDslContingenciesProvider); assertEquals(4, contingenciesFromStream.size()); assertTrue(providerFromFile instanceof GroovyDslContingenciesProvider); assertEquals(4, contingenciesFromFile.size()); assertEquals(getContingenciesNames(contingenciesFromFile), getContingenciesNames(contingenciesFromStream));
assertTrue(FlowsValidation.INSTANCE.checkFlows(transformer1, looseConfig, NullWriter.NULL_WRITER)); assertFalse(FlowsValidation.INSTANCE.checkFlows(transformer1, strictConfig, NullWriter.NULL_WRITER)); assertTrue(FlowsValidation.INSTANCE.checkFlows(transformer1, strictConfig, NullWriter.NULL_WRITER));
assertTrue(network.getGenerator("g3").getTerminal().isConnected()); assertEquals(100.0, network.getGenerator("g3").getTargetP(), 0.0); assertEquals(1.0, network.getGenerator("g3").getTargetV(), 0.0);
assertNotNull(result); assertTrue(result.getPreContingencyResult().isComputationOk()); assertTrue(result.getPreContingencyResult().getLimitViolations().isEmpty()); assertTrue(result.getPostContingencyResults().isEmpty());
assertTrue(parameters.isTwtSplitShuntAdmittance());
assertEquals("{startTime=0, stopTime=1000}", parameters.toString());
assertEquals(1, network.getHvdcLineCount()); assertEquals(1, network.getHvdcLineCount()); assertEquals(0, observer.getHvdcLineReplacedCount()); assertEquals(0, observer.getHvdcLineRemovedCount()); assertEquals(0, network.getHvdcLineCount()); assertEquals(0, observer.getHvdcLineReplacedCount()); assertEquals(1, observer.getHvdcLineRemovedCount());
assertEquals("Name", function.getName());
assertNull(importer);
assertTrue(dataSource.exists(FOO_TST));
assertTrue(ValidationUtils.isMainComponent(looseConfig, true)); assertFalse(ValidationUtils.isMainComponent(looseConfig, false)); assertTrue(ValidationUtils.isMainComponent(looseConfig, true)); assertTrue(ValidationUtils.isMainComponent(looseConfig, false));
assertEquals(1, graph.getVertexCount());
assertThat(command.getArgs(0).subList(1, args.size())) .containsExactlyInAnyOrder("--case-file=/work/network.xiidm", "--parameters-file=/work/parameters.json", "--output-file=/work/result.json", "--output-format=JSON", "--contingencies-file=/work/contingencies.groovy", "--log-file=/work/logs.zip");
assertNotNull(network); assertNotNull(network.getLoad("LOAD"));
assertArrayEquals(new int[]{0, 1}, graph.getVertices());
assertNotNull(validationWriters.getWriter(type)); assertNull(validationWriters.getWriter(type));
assertNotNull(exporter); assertSame(testExporter, exporter);
assertEquals(1, copy.getExtensions().size()); assertSame(parameters, dummyExtension.getExtendable()); assertSame(copy, copiedExt.getExtendable());
assertNotNull(config1); assertEquals("newValue1", config1.getStringProperty("key1")); assertEquals("value2", config1.getStringProperty("key2"));
assertEquals(1, generators.size()); assertSame(generator1, generators.get(0));
assertEquals("UCTE", exporter.getFormat()); assertNotEquals("IIDM", exporter.getFormat());
assertNotNull(buffer); assertEquals(100, buffer.remaining());
assertEquals("Arrow", graph.getEdgeObject(e));
assertEquals(2, network.getVoltageLevelCount()); assertEquals(1, network.getDanglingLineCount()); assertEquals(1, network.getLineCount()); assertEquals("ESNODE11 XXNODE11 1 + FRNODE11 XXNODE11 1", l.getId()); assertNotNull(mergedXnode); assertNotNull(l.getCurrentLimits1()); assertNotNull(l.getCurrentLimits2());
assertTrue(dataSource.exists(FOO_TST));
assertEquals("IIDM to UCTE converter", exporter.getComment()); assertNotEquals("UCTE to IIDM converter", exporter.getComment());
assertNotNull(network.getIdentifiable("FFFFFF11 FFFFFF12 1")); assertNotNull(network.getIdentifiable("FFFFFF11 FFFFFF12 2")); assertNotNull(network.getIdentifiable("FFFFFF11 FFFFFF12 3")); assertNull(network.getIdentifiable("FFFFFF11 FFFFFF12 N/A")); assertNotNull(network.getIdentifiable("FFFFFF11 FFFFFF12 Unique"));
assertEquals(BRANCH_ID, branchIntensity.getBranchId());
assertEquals(2.f, sensitivityValue.getFunctionReference(), EPSILON_COMPARISON);
assertEquals(FilePostProcessor.FILE_GZIP, file.getPostProcessor());
assertTrue(Files.exists(tmpDir.resolve("copy.mat")));
assertTrue(parameters.getLoadFlowParameters().isTwtSplitShuntAdmittance());
assertEquals(result1, results.get(0)); assertEquals(result2, results.get(1)); assertEquals(result3, results.get(2));
assertEquals(Arrays.asList("DL contingency"), validContingencies.stream().map(Contingency::getId).collect(Collectors.toList()));
assertEquals(2, isLoadPresent.size());
assertSame(factorOk, results.getSensitivityValue(factorOk.getFunction(), factorOk.getVariable()).getFactor()); assertSame(factorNok, results.getSensitivityValue(factorNok.getFunction(), factorNok.getVariable()).getFactor()); assertSame(factorOk, results.getSensitivityValue(factorOk).getFactor()); assertSame(factorNok, results.getSensitivityValue(factorNok).getFactor());
assertTrue(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER)); assertFalse(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER)); assertTrue(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER));
assertNotNull(formats); assertEquals(1, formats.size()); assertTrue(formats.contains(TEST_FORMAT));
assertEquals(LimitViolationType.LOW_VOLTAGE, v.getLimitType()); assertEquals(400, v.getLimit(), 0d); assertEquals(380, v.getValue(), 0d); assertNull(v.getSide()); assertEquals(Integer.MAX_VALUE, v.getAcceptableDuration());
assertTrue(provider instanceof JsonSensitivityFactorsProvider);
assertTrue(resultsOk.isOk()); assertFalse(resultsNok.isOk());
assertNotNull(factory); assertThat(input.getContingenciesProvider()) .isNotNull() .isInstanceOf(EmptyContingencyListProvider.class);
assertEquals(1200, l.getLimit(), 0d); assertEquals(1250, l.getValue(), 0d); assertSame(Branch.Side.ONE, l.getSide()); assertEquals(60, l.getAcceptableDuration());
assertSame(function, factor.getFunction());
assertEquals(2, contingencies.size()); assertEquals(Sets.newHashSet("NHV1_NHV2_1", "NHV1_NHV2_2"), getContingenciesNames(contingencies)); assertTrue(contingencies.isEmpty());
assertEquals(ImmutableMap.of("a", "1", "b", "2", "c", "3"), executionVariables);
assertEquals(3, graph.getVertexCount()); assertEquals(3, graph.getVertexCount()); assertEquals(2, graph.getVertexCount());
assertEquals(0, network.getLineCount()); assertEquals(1, network.getTwoWindingsTransformerCount()); assertEquals(1, network.getSwitchStream().count());
assertEquals(metrics.size(), results.getMetrics().size()); assertEquals("Val 1", results.getMetrics().get("Key 1")); assertEquals("Val 2", results.getMetrics().get("Key 2")); assertEquals("Val 3", results.getMetrics().get("Key 3"));
assertTrue(StaticVarCompensatorsValidation.INSTANCE.checkSVCs(network, looseConfig, data)); assertTrue(ValidationType.SVCS.check(network, looseConfig, tmpDir)); assertTrue(ValidationType.SVCS.check(network, looseConfig, validationWriter));
assertEquals(2, results.getSensitivityValuesByVariable(factorOk.getVariable()).size()); assertEquals(2, results.getSensitivityValuesByVariable(factorNok.getVariable()).size());
assertEquals(Collections.emptyList(), subList1);
assertEquals(2, isLoadPresent.size());
assertNotNull(computation); assertEquals("loadflow", computation.getName()); assertEquals(92f, network.getGenerator("GEN").getTerminal().getP(), 0f);
assertEquals(1, graph.getEdgeObjects(0, 1).size()); assertEquals(1, graph.getEdgeObjects(1, 0).size());
assertEquals(1, parameters.getExtensions().size()); assertTrue(parameters.getExtensionByName("dummyExtension") instanceof DummyExtension); assertNotNull(parameters.getExtension(DummyExtension.class));
assertEquals(expected1, limitViolation1.toString()); assertEquals(expected2, limitViolation2.toString());
assertEquals(1, results.getSensitivityValuesByFunction(factorOk.getFunction()).size()); assertEquals(1, results.getSensitivityValuesByFunction(factorNok.getFunction()).size());
assertTrue(dataSource.exists(FOO_TST));
assertEquals("[CSV, JSON]", SensitivityAnalysisResultExporters.getFormats().toString());
assertEquals(expected, print(a, null, null)); assertEquals(expected, print(a));
assertNotNull(importer); assertSame(testImporter, importer);
assertNotNull(result.get());
assertEquals(2, importer.getParameters().size()); assertEquals("iidm.import.xml.throw-exception-if-extension-not-found", importer.getParameters().get(0).getName()); assertEquals(Arrays.asList("iidm.import.xml.throw-exception-if-extension-not-found", "throwExceptionIfExtensionNotFound"), importer.getParameters().get(0).getNames());
assertEquals(1100, l.getLimit(), 0d); assertEquals(1101, l.getValue(), 0d); assertSame(Branch.Side.TWO, l.getSide()); assertEquals(600, l.getAcceptableDuration());
assertTrue(network.getGenerator("GEN").getTerminal().isConnected()); assertFalse(network.getGenerator("GEN").getTerminal().isConnected());
assertEquals(1, contingencies.size()); assertEquals(1, contingencies.get(0).getExtensions().size()); assertEquals("myTs", contingencies.get(0).getExtension(ProbabilityContingencyExtension.class).getProbabilityTimeSeriesRef());
assertEquals("hello", XmlUtil.readText("a", xmlReader));
assertFalse(new ZipFileDataSource(testDir, "fake").exists("e"));
assertEquals("ID", function.getId());
assertEquals(1.573, calculateSymmAngleDu(reference.getTwoWindingsTransformer("ZABCD221 ZEFGH221 1")), 0.0001);
assertEquals("none (local mode)", new LocalComputationManager(config).getVersion());
assertNotNull(computation); assertEquals("loadflow", computation.getName());
assertEquals("ts1", ts1.getMetadata().getName()); assertEquals(TimeSeriesDataType.STRING, ts1.getMetadata().getDataType()); assertArrayEquals(new String[] {"a", "b", "c"}, ts1.toArray());
assertEquals(bb.getTerminal().getBusView().getBus(), l.getTerminal().getBusView().getBus()); assertEquals(initialSwitchCount + 2, topo.getSwitchCount());
assertEquals(1, network.getBusBreakerView().getBusStream().count());
assertEquals(oldExtension.isParameterBoolean(), updatedExtension.isParameterBoolean()); assertEquals(oldExtension.getParameterDouble(), updatedExtension.getParameterDouble(), 0.01); assertNotEquals(oldExtension.getParameterString(), updatedExtension.getParameterString());
assertEquals(Byte.BYTES, is.read());
assertEquals(2, graph.getVertexCount()); assertEquals(0, e); assertEquals(1, graph.getEdgeCount()); assertEquals(0, graph.getEdgeVertex1(e)); assertEquals(1, graph.getEdgeVertex2(e));
assertEquals("Unable to find b: end of document has been reached", e.getMessage());
assertEquals("XIIDM", importer.getFormat());
assertEquals("Test", graph.getVertexObject(0).toString());
assertEquals(3, new RegularTimeSeriesIndex(0, 19, 10).getPointCount()); assertEquals(3, new RegularTimeSeriesIndex(0, 20, 10).getPointCount()); assertEquals(3, new RegularTimeSeriesIndex(0, 21, 10).getPointCount()); assertEquals(10, new RegularTimeSeriesIndex( Instant.parse("2000-01-01T00:00:00Z").toEpochMilli(), Instant.parse("2009-01-01T00:00:00Z").toEpochMilli(), millisInYear).getPointCount());
assertTrue(ImmutableSet.copyOf(CandidateComputations.getComputationsNames()).containsAll(ImmutableSet.of("dummy", "loadflow")));
assertEquals(PHASE_TAP_CHANGER_HOLDER_ID, phaseTapChangerAngle.getPhaseTapChangerHolderId());
assertEquals(1.f, sensitivityValue.getValue(), EPSILON_COMPARISON);
assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(shunt, strictConfig, NullWriter.NULL_WRITER)); assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(shunt, strictConfig, NullWriter.NULL_WRITER)); assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(shunt, strictConfig, NullWriter.NULL_WRITER)); assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(shunt, strictConfig, NullWriter.NULL_WRITER));
assertTrue(network.getLine("NHV1_NHV2_1").getTerminal1().isConnected()); assertTrue(network.getLine("NHV1_NHV2_1").getTerminal2().isConnected()); assertFalse(network.getLine("NHV1_NHV2_1").getTerminal1().isConnected()); assertFalse(network.getLine("NHV1_NHV2_1").getTerminal2().isConnected());
assertEquals(LoadFlowResultsCompletionPostProcessor.NAME, processor.getName());
assertEquals(expected, print(a, ImmutableList.of("r1", "r2", "r3"), ImmutableList.of("c1", "c2")));
assertEquals(3, paths.size()); assertArrayEquals(paths.get(0).toArray(), new int[] {2, 6}); assertArrayEquals(paths.get(1).toArray(), new int[] {0, 3, 5}); assertArrayEquals(paths.get(2).toArray(), new int[] {1, 4, 5});
assertTrue(g2.getTerminal().isConnected()); assertEquals(33., g2.getTargetV(), 0.01);
assertNotNull(result);
assertEquals(line1Violation1, violations.get(0)); assertEquals(line1Violation2, violations.get(1)); assertEquals(line2Violation, violations.get(2)); assertEquals(vl1Violation1, violations.get(3)); assertEquals(vl1Violation2, violations.get(4));
assertTrue(g2.getTerminal().isConnected()); assertEquals(99., g2.getTargetV(), 0.01);
assertNotNull(result);
assertEquals("CSV", SensitivityAnalysisResultExporters.getExporter("CSV").getFormat()); assertEquals("JSON", SensitivityAnalysisResultExporters.getExporter("JSON").getFormat());
assertEquals("baz", loadModuleRepository.getModuleConfig("foo").get().getStringProperty("bar"));
assertTrue(provider instanceof GroovyDslContingenciesProvider); assertEquals(4, contingencies1.size()); assertEquals(4, contingencies2.size()); assertEquals(getContingenciesNames(contingencies1), getContingenciesNames(contingencies2));
assertSame(factorOk, results.getSensitivityValue(factorOk.getFunction(), factorOk.getVariable(), "Contingency").getFactor()); assertSame(factorNok, results.getSensitivityValue(factorNok.getFunction(), factorNok.getVariable(), "Contingency").getFactor()); assertSame(factorOk, results.getSensitivityValue(factorOk, "Contingency").getFactor()); assertSame(factorNok, results.getSensitivityValue(factorNok, "Contingency").getFactor());
assertEquals(logs, results.getLogs());
assertEquals(expected, print(a, null, null)); assertEquals(expected, print(a));
assertTrue(dataSource.exists(FOO_TST));
assertTrue(new MatpowerImporter().exists(new FileDataSource(tmpDir, model.getCaseName()))); assertFalse(new MatpowerImporter().exists(new FileDataSource(tmpDir, "doesnotexist")));
assertEquals(0, l1.minimumValue(network, LOAD), 0.); assertEquals(-100, l3.minimumValue(network), 0.); assertEquals(-100, l3.minimumValue(network, GENERATOR), 0.); assertEquals(20, l3.minimumValue(network, LOAD), 0.);
assertEquals(2, linearGlsk.getGLSKs().size());
assertNotNull(rawData); assertEquals(jsonRef, json);
assertTrue("Should throw Missing Provider exception", e.getMessage().contains("not found"));
assertEquals(2, network.getBusBreakerView().getBusStream().count());
assertTrue(BusesValidation.INSTANCE.checkBuses(network, looseConfig, data)); assertFalse(BusesValidation.INSTANCE.checkBuses(network, strictConfig, data)); assertTrue(ValidationType.BUSES.check(network, looseConfig, tmpDir)); assertFalse(ValidationType.BUSES.check(network, strictConfig, tmpDir)); assertTrue(ValidationType.BUSES.check(network, looseConfig, validationWriter));
assertEquals("Default", namingStrategy.getName()); assertEquals("OtherNamingStrategy", namingStrategy.getName());
assertEquals(String.join(System.lineSeparator(), "Pre-contingency violations", "Action,Equipment (1),End,Country,Base voltage,Violation type,Violation name,Value,Limit,abs(value-limit),Loading rate %", "action1,,,,,,,,,,", ",NHV1_NHV2_1,VLHV1,FR,380,CURRENT,Permanent limit,1100.0000,950.0000,150.0000,110.00"), writer.toString().trim());
assertFalse(result[0]); assertTrue(result[1]);
assertEquals(1, parameters.getExtensions().size()); assertNotNull(parameters.getExtension(DummyExtension.class)); assertNotNull(parameters.getExtensionByName("dummy-extension"));
assertEquals(Arrays.asList("GEN contingency", "NHV1_NHV2_1 contingency"), validContingencies.stream().map(Contingency::getId).collect(Collectors.toList()));
assertArrayEquals(new int[]{0, 1}, graph.getEdges());
assertNotNull(vl); assertNotNull(topo.getSwitch("load1Disconnector1")); assertNotNull(topo.getSwitch("load1Breaker1")); assertEquals(5, topo.getSwitchCount()); assertNull(vl.getConnectable("load1", Load.class)); assertNull(topo.getSwitch("load1Breaker1")); assertNull(topo.getSwitch("load1Disconnector1")); assertNull(topo.getSwitch("load1Breaker1")); assertEquals(3, topo.getSwitchCount());
assertEquals(values.size(), results.getSensitivityValues().size());
assertSame(variable, factor.getVariable());
assertEquals("Invalid vertex -1", e.getMessage()); assertFalse(graph.vertexExists(0)); assertTrue(graph.vertexExists(0));
assertTrue(Double.isNaN(sc.getTerminal().getQ())); assertEquals(30.0, sc2.getTerminal().getQ(), 0.0);
assertEquals(Arrays.asList("SVC contingency"), validContingencies.stream().map(Contingency::getId).collect(Collectors.toList()));
assertEquals("IIDM XML v " + CURRENT_IIDM_XML_VERSION.toString(".") + " importer", importer.getComment());
assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(network, strictConfig, data)); assertTrue(ValidationType.SHUNTS.check(network, strictConfig, tmpDir)); assertTrue(ValidationType.SHUNTS.check(network, strictConfig, validationWriter));
assertNotNull(buffer); assertEquals(100, buffer.remaining());
assertEquals(5, violations.size());
assertEquals(0, exitCode);
assertEquals("ID", variable.getId());
assertEquals(Double.MAX_VALUE, l1.maximumValue(network, LOAD), 0.); assertEquals(-20, l3.maximumValue(network), 0.); assertEquals(-20, l3.maximumValue(network, GENERATOR), 0.); assertEquals(100, l3.maximumValue(network, LOAD), 0.);
assertTrue(g2.getTerminal().isConnected()); assertEquals(22., g2.getTargetV(), 0.01);
assertEquals(Country.ES, network.getSubstation("EHORTA").getCountry().orElse(null)); assertEquals(1, network.getSubstation("EHORTA").getVoltageLevelStream().count()); assertEquals(Country.BE, network.getSubstation("BHORTA").getCountry().orElse(null)); assertEquals(1, network.getSubstation("BHORTA").getVoltageLevelStream().count());
assertNotNull(result);
assertEquals(preContingencyResult, mergedResult.getPreContingencyResult()); assertEquals(Arrays.asList(postContingencyResult, postContingencyResult2), mergedResult.getPostContingencyResults());
assertNotNull(a2); assertSame(a2, a2.toSparse()); assertEquals(a, a3);
assertTrue(execution instanceof SecurityAnalysisExecutionImpl); assertNotNull(actualProvider.get()); assertEquals(10, actualProvider.get().getContingencies(null).size());
assertSame(executionInput.getParameters(), input.getParameters()); assertSame(executionInput.getNetworkVariant(), input.getNetworkVariant());
assertTrue(parameters.isSimulShunt()); assertTrue(parameters.isReadSlackBus()); assertTrue(parameters.isWriteSlackBus());
assertEquals(oldExtension.isParameterBoolean(), updatedExtension.isParameterBoolean()); assertEquals(oldExtension.getParameterDouble(), updatedExtension.getParameterDouble(), 0.01); assertNotEquals(oldExtension.getParameterString(), updatedExtension.getParameterString());
assertNotNull(result); assertTrue(result.getPreContingencyResult().isComputationOk()); assertTrue(result.getPreContingencyResult().getLimitViolations().isEmpty()); assertEquals(2, result.getPostContingencyResults().size()); assertEquals("c1", result.getPostContingencyResults().get(0).getContingency().getId()); assertEquals("c2", result.getPostContingencyResults().get(1).getContingency().getId());
assertEquals(1, results.getSensitivityValuesByFunction(factorOk.getFunction(), "Contingency").size()); assertEquals(1, results.getSensitivityValuesByFunction(factorNok.getFunction(), "Contingency").size());
assertEquals(1, files.size()); assertNotNull(files.get(0));
assertEquals(1, parameters.getExtensions().size()); assertNotNull(parameters.getExtension(DummyExtension.class)); assertNotNull(parameters.getExtensionByName("dummy-extension"));
assertEquals(1, formats.size()); assertTrue(formats.contains(TEST_FORMAT));
assertTrue(Files.exists(fileSystem.getPath("/work").resolve("copy.txt")));
assertEquals(ImmutableMap.of("a", "1", "b", "2"), executionVariables);
assertTrue(result.getSensitivityValuesContingencies().isEmpty());
assertEquals(2, contingencies.size()); assertEquals("c1", contingencies.get(0).getId()); assertEquals("c2", contingencies.get(1).getId());
assertEquals(1200, l.getLimit(), 0d); assertEquals(1201, l.getValue(), 0d); assertSame(Branch.Side.TWO, l.getSide()); assertEquals(60, l.getAcceptableDuration());
assertTrue(BusesValidation.INSTANCE.checkBuses(bus, looseConfig, NullWriter.NULL_WRITER)); assertFalse(BusesValidation.INSTANCE.checkBuses(bus, strictConfig, NullWriter.NULL_WRITER));
assertEquals(switchIds, switchesToOpen.stream().map(Switch::getId).collect(Collectors.toSet())); assertEquals(Collections.emptySet(), terminalsToDisconnect); assertTrue(network.getSwitch("BD").isOpen()); assertTrue(network.getSwitch("BL").isOpen()); assertEquals(expectedSwitchStates, switchStates);
assertTrue(parameters.isTwtSplitShuntAdmittance());
assertTrue(parameters.isDc()); assertTrue(parameters.isDistributedSlack()); assertEquals(LoadFlowParameters.BalanceType.PROPORTIONAL_TO_LOAD, parameters.getBalanceType());
assertEquals(3, TimeSeriesVersions.check(3));
assertTrue(Float.isNaN(Double2Float.safeCasting(nan))); assertEquals(Float.MAX_VALUE, Double2Float.safeCasting(maxQ), 1e-6); assertEquals(-Float.MAX_VALUE, Double2Float.safeCasting(minQ), 1e-6); assertNull(Double2Float.safeCasting(n));
assertEquals(DEFAULT_PROVIDER_NAME, defaultSensitivityAnalysisRunner.getName()); assertEquals("1.0", defaultSensitivityAnalysisRunner.getVersion());
assertEquals(BRANCH_ID, branchFlow.getBranchId());
assertTrue(parameters.isTwtSplitShuntAdmittance());
assertTrue(new IeeeCdfImporter().exists(new ResourceDataSource("ieee14cdf", new ResourceSet("/", "ieee14cdf.txt"))));
assertTrue(TransformersValidation.INSTANCE.checkTransformers(network, strictConfig, data)); assertTrue(ValidationType.TWTS.check(network, strictConfig, tmpDir)); assertTrue(ValidationType.TWTS.check(network, strictConfig, validationWriter));
assertTrue(dataSource.exists(FOO_TST));
assertEquals(oldExtension.isParameterBoolean(), extension.isParameterBoolean()); assertNotEquals(oldExtension.getParameterDouble(), extension.getParameterDouble()); assertNotEquals(oldExtension.getParameterString(), extension.getParameterString());
assertEquals(500, v.getLimit(), 0d); assertEquals(520, v.getValue(), 0d); assertNull(v.getSide()); assertEquals(Integer.MAX_VALUE, v.getAcceptableDuration());
assertFalse(Transformers3WValidation.INSTANCE.checkTransformers(network, strictConfig, data)); assertFalse(ValidationType.TWTS3W.check(network, strictConfig, tmpDir)); assertFalse(ValidationType.TWTS3W.check(network, strictConfig, validationWriter)); assertTrue(Transformers3WValidation.INSTANCE.checkTransformers(network, strictConfig, NullWriter.NULL_WRITER));
assertEquals(1, parameters.getExtensions().size()); assertNotNull(parameters.getExtension(DummyExtension.class)); assertNotNull(parameters.getExtensionByName("dummy-extension"));
assertEquals(localDir, new LocalComputationManager(config).getLocalDir());
assertEquals(FilePreProcessor.ARCHIVE_UNZIP, file.getPreProcessor());
assertEquals(2, contingencies.size()); assertEquals(Sets.newHashSet("NHV1_NHV2_1", "NHV1_NHV2_2"), getContingenciesNames(contingencies));
assertEquals(2, isLoadPresent.size());
assertEquals(60.0, calculateAsymmAngleTheta(reference.getTwoWindingsTransformer("HDDDDD2 HCCCCC1 1")), 0.0001);
assertTrue(Files.exists(fsFoo.getPath("/dest/a/b/c"))); assertTrue(Files.exists(fsBar.getPath("/dest/a/b/c")));
assertEquals(1, contingencies.size()); assertEquals("c1", contingency.getId()); assertEquals(0, contingency.getExtensions().size()); assertEquals(1, contingency.getElements().size()); assertTrue(element instanceof BranchContingency); assertEquals("NHV1_NHV2_1", element.getId());
assertNotNull(pluginInfo); assertNotNull(pluginInfo.toString());
assertEquals(Arrays.asList("Shunt contingency"), validContingencies.stream().map(Contingency::getId).collect(Collectors.toList()));
assertTrue(ImmutableSet.copyOf(CandidateComputations.getComputationsNames()).containsAll(ImmutableSet.of("dummy", "loadflow"))); assertEquals(ImmutableSet.of("dummy", "loadflow"), ImmutableSet.copyOf(CandidateComputations.getComputationsNames()));
assertEquals(1.000, calculateAsymmAngleDu(reference.getTwoWindingsTransformer("HDDDDD2 HCCCCC1 1")), 0.0001);
assertTrue(network.getGenerator("GEN").getTerminal().isConnected()); assertFalse(network.getGenerator("GEN").getTerminal().isConnected());
assertNull(exporter);
assertSame(factor, sensitivityValue.getFactor());
assertEquals(1, anonymizer.getStringCount());
assertNotNull(names); assertEquals(1, names.size()); assertTrue(names.contains("test"));
assertNotNull(importer.importData(new FileDataSource(fileSystem.getPath("/"), "test0"), null)); assertNotNull(importer.importData(new FileDataSource(fileSystem.getPath("/"), "test5"), null)); assertNotNull(network.getSubstation("X1")); assertNotNull(network2.getSubstation("P1"));
assertTrue(provider instanceof JsonSensitivityFactorsProvider);
assertEquals(124, exitCode);
assertEquals(0, graph.getEdgeCount()); assertEquals(0, e); assertEquals(1, graph.getEdgeCount()); assertEquals(0, e); assertEquals(0, graph.getEdgeCount());
assertEquals(2, graph.getVertexCount()); assertEquals(0, graph.getVertexCount());
assertEquals("A1", pluginInfo.getId(a1)); assertEquals("A2", pluginInfo.getId(a2));
assertEquals(Boolean.FALSE, options.withNoExtension()); assertEquals(2, (int) options.getExtensions().map(Set::size).orElse(-1));
assertTrue(StaticVarCompensatorsValidation.INSTANCE.checkSVCs(svc, strictConfig, NullWriter.NULL_WRITER)); assertFalse(StaticVarCompensatorsValidation.INSTANCE.checkSVCs(svc, strictConfig, NullWriter.NULL_WRITER)); assertTrue(StaticVarCompensatorsValidation.INSTANCE.checkSVCs(svc, strictConfig, NullWriter.NULL_WRITER));
assertEquals(2, new RegularTimeSeriesIndex(0, 10, 10).getPointCount());
assertEquals(1, ptc.getTapPosition()); assertEquals(2, ptc.getTapPosition());
assertTrue(FlowsValidation.INSTANCE.checkFlows(line1, looseConfig, NullWriter.NULL_WRITER)); assertFalse(FlowsValidation.INSTANCE.checkFlows(line1, strictConfig, NullWriter.NULL_WRITER)); assertTrue(FlowsValidation.INSTANCE.checkFlows(line1, strictConfig, NullWriter.NULL_WRITER));
assertEquals("default", factory.getName()); assertSame(provider, input.getContingenciesProvider());
assertEquals(Boolean.FALSE, options.withNoExtension()); assertTrue(options.withExtension("loadFoo")); assertFalse(options.withAllExtensions()); assertEquals(Boolean.FALSE, options.isAnonymized()); assertEquals(Boolean.TRUE, options.isIndent()); assertEquals(Boolean.TRUE, options.isWithBranchSV()); assertEquals(3, (int) options.getExtensions().map(Set::size).orElse(-1));
assertEquals(SecurityAnalysisResultMerger.FAILED_SECURITY_ANALYSIS_RESULT, mergedResult);
assertEquals(1, parameters.getExtensions().size()); assertTrue(parameters.getExtensionByName("dummyExtension") instanceof DummyExtension); assertNotNull(parameters.getExtension(DummyExtension.class));
assertSame(res, task.get());
assertEquals(1, extensions.size()); assertTrue(extensions.get(0) instanceof DummyCurveGroovyExtension); assertEquals(2, curves.size()); assertTrue(curves.get(0) instanceof DummyCurve); assertEquals("id", curve1.getId()); assertEquals("variable", curve1.getVariable()); assertTrue(curves.get(1) instanceof DummyCurve); assertEquals("LOAD", curve2.getId()); assertEquals("p0", curve2.getVariable());
assertEquals(valuesContingency.get("Contingency").size(), results.getSensitivityValuesContingencies().get("Contingency").size());
assertEquals(TestEnum.VALUE2, CommandLineUtil.getOptionValue(line, "value", TestEnum.class, TestEnum.VALUE1)); assertEquals(TestEnum.VALUE1, CommandLineUtil.getOptionValue(line, "value", TestEnum.class, TestEnum.VALUE1));
assertNotNull(ucteFileName.getGeographicalCode()); assertNull(ucteFileName.getCountry());
assertEquals("negative timeout: -1", e.getMessage());
assertEquals("ts1", ts1.getMetadata().getName()); assertEquals(TimeSeriesDataType.DOUBLE, ts1.getMetadata().getDataType()); assertArrayEquals(new double[] {0d, 1d, 2d}, ts1.toArray(), 0d);
assertThat(factory) .isPresent() .get() .isInstanceOf(TestPreprocessorFactory.class); assertThat(factory).isNotPresent();
assertNotNull(ext); assertEquals(EntsoeGeographicalCode.D4, ext.getCode()); assertNull(ext); assertNull(ext); assertNull(ext);
assertEquals("dl", mergedLine.getOptionalName().orElse(null)); assertEquals("dl", mergedLine.getNameOrId()); assertTrue(mergedLine.hasProperty()); assertTrue(mergedLine.hasProperty("ucteCode")); assertEquals(3, mergedLine.getPropertyNames().size()); assertEquals("value", mergedLine.getProperty("key")); assertEquals("defaultValue", mergedLine.getProperty("noKey", "defaultValue"));
assertEquals(1, network.getThreeWindingsTransformerCount()); assertEquals(1, network.getThreeWindingsTransformerCount()); assertEquals(0, observer.getThreeWindingsTransformerReplacedCount()); assertEquals(0, observer.getThreeWindingsTransformerRemovedCount()); assertEquals(0, network.getThreeWindingsTransformerCount()); assertEquals(0, observer.getThreeWindingsTransformerReplacedCount()); assertEquals(1, observer.getThreeWindingsTransformerRemovedCount());
assertFalse(memoryMappedFile.exists());
assertEquals(ImmutableMap.of("a", 0, "b", 1, "c", 2, "d", 1), depths);
assertEquals(INJECTION_ID, branchIntensity.getInjectionId());
assertEquals(2, results.getSensitivityValuesByVariable(factorOk.getVariable(), "Contingency").size()); assertEquals(2, results.getSensitivityValuesByVariable(factorNok.getVariable(), "Contingency").size());
assertEquals(2.0000, calculatePhaseDu(reference.getTwoWindingsTransformer("0BBBBB5 0AAAAA2 1")), 0.00001); assertNotEquals(2.0001, calculatePhaseDu(reference.getTwoWindingsTransformer("0BBBBB5 0AAAAA2 1")), 0.00001);
assertTrue(memoryMappedFile.exists());
assertEquals(ImmutableList.of("contingency-1", "contingency-2"), subList1); assertEquals(ImmutableList.of("contingency-3", "contingency-4"), subList2);
assertNotNull(importer); assertEquals(testImporter, importer);
assertTrue(exception.getCause() instanceof ComputationException);
assertEquals("Export a sensitivity analysis result in CSV format", SensitivityAnalysisResultExporters.getExporter("CSV").getComment());
assertEquals(1, boundaryPoints.size()); assertNotNull(point); assertEquals("BoundaryPoint FR-BE", point.getName()); assertEquals(Country.FR, point.getBorderFrom()); assertEquals(Country.BE, point.getBorderTo());
assertThat(exception).hasMessageThat().isEqualTo("Forbidden");
assertThat(cache.getAllItemsRaw()).containsExactly(ITEM_B_A);
assertThat(thrown) .hasMessageThat() .contains("Invalid proxy address \'foo-host-with-illegal-char^:1234\'.");
assertThat(fakeTable).isEqualTo(table);
assertThat(result).isEqualTo(TEST_TABLE_REF);
assertThat(lazyExecutorService.awaitTermination(1, TimeUnit.MILLISECONDS)).isFalse(); assertThat(lazyExecutorService.awaitTermination(1, TimeUnit.MILLISECONDS)).isTrue();
assertThat(errorExtractor.fieldSizeTooLarge(null)).isFalse();
assertThat(result).containsExactlyElementsIn(expected).inOrder(); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(getTestCapturedLog()).isEqualTo("FINE: Uploading: NAME");
assertThat(errorExtractor.accessDeniedNonRecoverable(null)).isFalse();
assertThat(result).isEqualTo(TEST_PROJECT_ID);
assertThat(cache.getAllItemsRaw()).containsExactly(ITEM_B_B);
assertThat(tableRef.getProjectId()).isEqualTo("google.com:foo-proj"); assertThat(tableRef.getDatasetId()).isEqualTo("foo"); assertThat(tableRef.getTableId()).isEqualTo("bar");
assertThat(thrown).hasMessageThat().contains("FakeException"); assertThat(callTester.timesCalled()).isEqualTo(3);
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expectedCached);
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expectedCached);
assertThat( PropertyUtil.getPropertyOrDefault(getClass(), "test.properties", "testKey", "NotFound")) .isEqualTo("testValue");
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getCurrentKey()).isEqualTo(key1); assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getCurrentKey()).isEqualTo(key2); assertThat(multipleRecordReader.nextKeyValue()).isFalse(); assertThat(multipleRecordReader.getCurrentKey()).isEqualTo(key2);
assertThat(errorExtractor.fieldSizeTooLarge(new IOException(statusOk))).isFalse();
assertThat(errorExtractor.accessDeniedNonRecoverable(withJsonError)).isTrue();
assertThat(errorExtractor.accessDenied(accessDenied)).isTrue(); assertThat(errorExtractor.accessDenied(new IOException(accessDenied))).isTrue(); assertThat(errorExtractor.accessDenied(new IOException(new IOException(accessDenied)))) .isTrue(); assertThat(errorExtractor.accessDenied(statusOk)).isFalse(); assertThat(errorExtractor.accessDenied(new IOException(statusOk))).isFalse();
assertThat( PropertyUtil.getPropertyOrDefault( getClass(), "test.properties", "whitespaceKey", "NotFound")) .isEqualTo("test value with whitespace");
assertThat(!ghfs.exists(outputPath)).isTrue(); assertThat(!ghfs.exists(outputSampleFilePath)).isTrue();
assertEquals(1234L, readChannel.size());
assertThat(json).isEqualTo(expectedJson);
assertEquals(50, readChannel.position());
assertThat(e) .hasMessageThat() .isEqualTo("inplaceSeekLimit must be non-negative! Got " + inplaceSeekLimit);
assertThat(thrown).hasMessageThat().contains("socket3"); assertThat(callTester.timesCalled()).isEqualTo(3);
assertThat(!ghfs.exists(outputPath)).isTrue(); assertThat(!ghfs.exists(outputSampleFilePath)).isTrue();
assertThat(result.toString()).isEqualTo(TEST_OUTPUT_PATH_STRING);
assertThat(BigQueryStrings.toString(tableRef)).isEqualTo("foo.bar"); assertThat(BigQueryStrings.toString(tableRef)).isEqualTo("foo.bar");
assertThat(credential.getAccessToken()).isEqualTo(TestingAccessTokenProvider.FAKE_ACCESS_TOKEN); assertThat(credential.getExpirationTimeMilliseconds()) .isEqualTo(TestingAccessTokenProvider.EXPIRATION_TIME_MILLISECONDS);
assertThat(result).isFalse();
assertTrue(readChannel.isOpen());
assertThat( input.createRecordReader(new DirectBigQueryInputSplit("foo", "schema", 7), taskContext)) .isInstanceOf(DirectBigQueryRecordReader.class);
assertThat(gcsOutputFileCaptor.getValue()).contains(TEST_OUTPUT_FILE_STRING);
assertThat(committer).isEqualTo(mockOutputCommitter);
assertThat(actualNames.toArray(new String[0])).isEqualTo(expectedNames);
assertThat(lazyExecutorService.isShutdown()).isFalse();
assertThat(errorExtractor.userProjectMissing(nullJsonError)).isFalse();
assertThat(result).containsExactlyElementsIn(expected).inOrder(); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(errorExtractor.toUserPresentableMessage(new IOException(accessDenied))) .isEqualTo("Forbidden");
assertThat(thrown) .hasMessageThat() .contains("The output path \'" + TEST_OUTPUT_PATH + "\' already exists.");
assertThat(fooSplit.getPath().getName()).isEqualTo("Foo"); assertThat(barSplit.getPath().getName()).isEqualTo("Bar");
assertThat(uri).isEqualTo(expectedUri);
assertThat(getTestCapturedLog()).isEmpty();
assertThat(errorExtractor.fieldSizeTooLarge(withJsonError)).isTrue();
assertThat(errorExtractor.preconditionNotMet(withJsonError)).isTrue();
assertThat(result).isEqualTo(ITEM_A_A); assertThat(cache.getItem(ITEM_A_A.getResourceId())).isEqualTo(ITEM_A_A);
assertThat(committer.getDelegate()).isEqualTo(mockOutputCommitter);
assertThat(thrown).hasCauseThat().isEqualTo(fakeUnhandledException);
assertThat(result).containsExactly(itemAAUpdated); assertThat(cache.getAllItemsRaw()).containsExactly(itemAAUpdated);
assertThat(gcsfs.getFileInfo(GoogleCloudStorageFileSystem.GCS_ROOT).getPath()) .isEqualTo(GoogleCloudStorageFileSystem.GCS_ROOT); assertThat(gcsfs.getFileInfo(GoogleCloudStorageFileSystem.GCS_ROOT).getItemInfo()) .isEqualTo(GoogleCloudStorageItemInfo.ROOT_INFO);
assertThat(split1.getLocations()).isNotNull(); assertThat(split1.getLocations()).isEmpty();
assertEquals(1234L, readChannel.size()); assertEquals(1234L, readChannel.size());
assertThat(thrown).hasMessageThat().contains("Proxy address \':1234\' has no host.");
assertThat(thrown) .hasMessageThat() .contains("Invalid proxy address \'foo-host:1234/some/path\'.");
assertThat(errorExtractor.readTimedOut(x)).isTrue(); assertThat(errorExtractor.readTimedOut(x)).isFalse(); assertThat(errorExtractor.readTimedOut(x)).isFalse();
assertThat(readChannel.generation()).isEqualTo(generation);
assertNull(writeChannel.getItemInfo());
assertThat(recordWriter).isEqualTo(mockRecordWriter);
assertThat(result).containsExactlyElementsIn(expected).inOrder(); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(bigquery).isNotNull();
assertThat( PropertyUtil.getPropertyOrDefault( getClass(), "test.properties", "testKey2", "NotFound")) .isEqualTo("NotFound");
assertThat(result).isEqualTo(ITEM_A_A); assertThat(cache.getAllItemsRaw()).containsExactly(ITEM_A_A);
assertThat(newKeyWithoutDeprecatedKey.getDefault()).isEqualTo(0);
assertThat(errorExtractor.accessDeniedNonRecoverable(withJsonError)).isTrue();
assertThat(BigQueryConfiguration.getTemporaryPathRoot(conf, mockJobID)) .isEqualTo(GCS_TEMP_PATH);
assertThat(result).isEqualTo(TEST_PROJECT_ID);
assertThat(options.getCloudStorageOptions().getHttpRequestHeaders()) .containsExactly("test-header", "test-VAL", "key-in-header", "+G2Ap33m5NVOgmXznSGTEvG0I=");
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(errorExtractor.clientError(withJsonError)).isFalse();
assertThat(exists).isFalse();
assertThat(exists).isTrue();
assertThat(BigQueryStrings.toString(tableRef)).isEqualTo("foo-proj:foo.bar");
assertThat(errorExtractor.userProjectMissing(withJsonError)).isFalse();
assertThat(e).hasMessageThat().contains("Generation parameter of -1 is invalid");
assertThat(result).containsExactlyElementsIn(expectedResult); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expectedCached);
assertThat( PropertyUtil.getPropertyOrDefault( getClass(), "test.properties", "postCommentKey", "NotFound")) .isEqualTo("postCommentValue");
assertThat(!ghfs.exists(outputPath)).isTrue(); assertThat(!ghfs.exists(outputSampleFilePath)).isTrue();
assertThat(itemInfo).isEqualTo(expectedItemInfo);
assertThat(getMandatoryConfig(config, PROPERTY_ONE)).isEqualTo(VALUE_ONE);
assertThat(ghfs.getCanonicalServiceName()).isNull();
assertThat(errorExtractor.internalServerError(accessDenied)).isFalse();
assertThat(requests).hasSize(1); assertThat(readChannel.size()).isEqualTo(object.getSize().longValue()); assertThat(requests).hasSize(1);
assertThat(future.isDone()).isTrue();
assertThat( PropertyUtil.getPropertyOrDefault(getClass(), "NonExistentFile", "testKey", "NotFound")) .isEqualTo("NotFound");
assertThat(options.getCloudStorageOptions().getHttpRequestHeaders()) .containsExactly("header-key", "val=ue");
assertThat(requests).isEmpty(); assertThat(readChannel.size()).isEqualTo(object.getSize().longValue()); assertThat(requests).hasSize(1);
assertThat( ResilientOperation.retry( callTester, backoff, RetryDeterminer.DEFAULT, Exception.class, sleeper)) .isEqualTo(3); assertThat(callTester.timesCalled()).isEqualTo(4);
assertThat(readChannel.size()).isEqualTo(Long.MAX_VALUE);
assertThat(errorExtractor.itemAlreadyExists(alreadyExists)).isTrue(); assertThat(errorExtractor.itemAlreadyExists(new IOException(alreadyExists))).isTrue(); assertThat(errorExtractor.itemAlreadyExists(new IOException(new IOException(alreadyExists)))) .isTrue(); assertThat(errorExtractor.itemAlreadyExists(statusOk)).isFalse(); assertThat(errorExtractor.itemAlreadyExists(new IOException(statusOk))).isFalse();
assertThat(result).containsExactlyElementsIn(expectedResult); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expectedCached);
assertThat(inner1).isNotSameInstanceAs(compositeException); assertThat(inner2).isNotSameInstanceAs(compositeException); assertThat(compositeException).hasMessageThat().isEqualTo("Multiple IOExceptions."); assertThat(compositeException.getSuppressed()).isEqualTo(new Throwable[] {inner1, inner2}); assertThat(compositeException.getSuppressed()[0]).isSameInstanceAs(inner1); assertThat(compositeException.getSuppressed()[1]).isSameInstanceAs(inner2);
assertThat(result).isEqualTo(ITEM_A_AA); assertThat(cache.getAllItemsRaw()).containsExactly(ITEM_A_AA);
assertThat(errorExtractor.getErrorMessage(withJsonError)).isEqualTo("Top Level HTTP Message"); assertThat(errorExtractor.getErrorMessage(nullJsonErrorWithMessage)) .isEqualTo("Top Level HTTP Message");
assertThat(thrown).hasMessageThat().contains("FakeException"); assertThat(callTester.timesCalled()).isEqualTo(3);
assertThat(thrown) .hasMessageThat() .contains("Compression isn\'t supported for this OutputFormat.");
assertThat(cache.getAllItemsRaw()).isEmpty();
assertThat(exception) .hasMessageThat() .isEqualTo(String.format("Encountered an error while %s: Forbidden", action));
assertThat(batchHelper.isEmpty()).isTrue();
assertThat(split1.toString()).contains(shardPath1.toString()); assertThat(split1.toString()).contains(Long.toString(numRecords1));
assertThat(result).containsExactlyElementsIn(expected); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected);
assertThat(result).isEqualTo(TEST_PROJECT_ID);
assertThat(committer).isEqualTo(mockOutputCommitter);
assertThat(tableRef.getProjectId()).isNull(); assertThat(tableRef.getDatasetId()).isEqualTo("fooA1_"); assertThat(tableRef.getTableId()).isEqualTo("2bar");
assertThat(committer.getDelegate()).isEqualTo(mockOutputCommitter);
assertThat(delegate).isInstanceOf(TextOutputFormat.class);
assertThat(result).isEqualTo(TEST_PROJECT_ID);
assertThat(futures).hasSize(2);
assertThat(i + 1).isEqualTo(backoff.nextBackOffMillis()); assertThat(backoff.nextBackOffMillis()).isEqualTo(BackOff.STOP); assertThat(backoff.nextBackOffMillis()).isEqualTo(BackOff.STOP);
assertThat(request.getKmsKeyName()).isEqualTo(kmsKeyName);
assertThat(result).isEqualTo(TEST_LOAD_PROJECT_ID);
assertThat(getTestCapturedLog()).isEmpty();
assertThat(getTestCapturedLog()) .isEqualTo( "FINE: Uploading:" + " NAME Average Rate: 0.167 MiB/s, Current Rate: 0.167 MiB/s, Total: 10.000 MiB"); assertThat(getTestCapturedLog()) .isEqualTo( "FINE: Uploading:" + " NAME Average Rate: 0.833 MiB/s, Current Rate: 1.500 MiB/s, Total: 100.000 MiB");
assertThat(errorExtractor.getDebugInfo(new IOException(accessDenied))).isNull();
assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getCurrentValue()).isEqualTo(json1); assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getCurrentValue()).isEqualTo(json2); assertThat(multipleRecordReader.nextKeyValue()).isFalse(); assertThat(multipleRecordReader.getCurrentValue()).isEqualTo(json2);
assertThat(errorExtractor.accessDeniedNonRecoverable(statusOk)).isFalse();
assertThat(collectionKey.getStringCollection(config)).containsExactly("key1", "key2").inOrder();
assertThat(thrown).hasMessageThat().contains("FakeException"); assertThat(callTester.timesCalled()).isEqualTo(1);
assertThat(result.get()).isEqualTo(TEST_TABLE_SCHEMA);
assertThat(e).hasCauseThat().isSameInstanceAs(cause);
assertThat(errorExtractor.internalServerError(withJsonError)).isTrue();
assertThat(futures).hasSize(2);
assertThat(outputFileURIs).containsExactly(TEST_OUTPUT_FILE_STRING);
assertThat(result).isEqualTo(TEST_PROJECT_ID);
assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getProgress()).isWithin(.01f).of(.58f); assertThat(multipleRecordReader.nextKeyValue()).isTrue(); assertThat(multipleRecordReader.getProgress()).isWithin(.01f).of(1); assertThat(multipleRecordReader.nextKeyValue()).isFalse(); assertThat(multipleRecordReader.getProgress()).isWithin(.01f).of(1);
assertThat(errorExtractor.clientError(null)).isFalse();
assertThat(errorExtractor.clientError(accessDenied)).isTrue();
assertThat(iae).hasMessageThat().matches(".*objectName.*");
assertThat(errorExtractor.itemNotFound(notFound)).isTrue(); assertThat(errorExtractor.itemNotFound(new IOException(notFound))).isTrue(); assertThat(errorExtractor.itemNotFound(new IOException(new IOException(notFound)))).isTrue(); assertThat(errorExtractor.itemNotFound(statusOk)).isFalse(); assertThat(errorExtractor.itemNotFound(new IOException())).isFalse(); assertThat(errorExtractor.itemNotFound(new IOException(new IOException()))).isFalse();
assertThat(delegate).isEqualTo(mockGcsDelegate);
assertThat(lazyExecutorService.isTerminated()).isTrue();
assertThat(callTester.timesCalled()).isEqualTo(1); assertThat(sleeper.getCount()).isEqualTo(0);
assertThat(errorExtractor.rateLimited(bigqueryRateLimited)).isTrue(); assertThat(errorExtractor.rateLimited(new IOException(bigqueryRateLimited))).isTrue(); assertThat(errorExtractor.rateLimited(new IOException(new IOException(bigqueryRateLimited)))) .isTrue(); assertThat(errorExtractor.rateLimited(notRateLimited)).isFalse();
assertThat(thrown).hasMessageThat().contains(jobHandle.toString()); assertThat(thrown).hasCauseThat().isEqualTo(unhandledException); assertThat(job).isEqualTo(jobHandle);
assertThat(getTestCapturedLog()).isEqualTo("FINE: Finished Uploading: NAME");
assertThat(list).hasSize(2); assertThat(list.get(0).getName()).isEqualTo("MyName"); assertThat(list.get(0).getType()).isEqualTo("STRING"); assertThat(list.get(1).getName()).isEqualTo("Number"); assertThat(list.get(1).getType()).isEqualTo("INTEGER"); assertThat(list.get(1).getMode()).isEqualTo("sample");
assertThat(thrown).hasMessageThat().contains("Proxy address \'foo-host\' has no port.");
assertThat(gcsOutputFileCaptor.getValue()).containsExactly(TEST_OUTPUT_FILE_STRING);
assertThat(helper.insertJobOrFetchDuplicate(jobProjectId, jobHandle)).isEqualTo(jobHandle); assertThat(job).isEqualTo(jobHandle);
assertThat(inner).isSameInstanceAs(compositeException);
assertThat(result).isEqualTo(TEST_FILE_FORMAT);
assertThat(errorExtractor.resourceNotReady(resourceNotReady)).isTrue(); assertThat(errorExtractor.resourceNotReady(new IOException(resourceNotReady))).isTrue(); assertThat(errorExtractor.resourceNotReady(new IOException(new IOException(resourceNotReady)))) .isTrue(); assertThat(errorExtractor.resourceNotReady(statusOk)).isFalse(); assertThat(errorExtractor.resourceNotReady(new IOException(statusOk))).isFalse(); assertThat(errorExtractor.resourceNotReady(null)).isFalse();
assertThat(errorExtractor.quotaExceeded(quotaExceeded)).isTrue(); assertThat(errorExtractor.quotaExceeded(new IOException(quotaExceeded))).isTrue(); assertThat(errorExtractor.quotaExceeded(new IOException(new IOException(quotaExceeded)))) .isTrue(); assertThat(errorExtractor.quotaExceeded(statusOk)).isFalse(); assertThat(errorExtractor.quotaExceeded(new IOException())).isFalse(); assertThat(errorExtractor.quotaExceeded(new IOException(new IOException()))).isFalse(); assertThat(errorExtractor.quotaExceeded(null)).isFalse();
assertThat(errorExtractor.internalServerError(null)).isFalse();
assertThat(future.isDone()).isTrue();
assertThat(getMandatoryConfig(config, Lists.newArrayList(PROPERTY_ONE, PROPERTY_TWO))) .isEqualTo(expectedMap);
assertThat(formatter.format(DayOfWeek.SATURDAY).toString(), is("Sat"));
assertThat(formatter.format(DayOfWeek.WEDNESDAY).toString(), is("Wed"));
assertThat(formatter.format(DayOfWeek.FRIDAY).toString(), is("Fri"));
assertThat(formatter.format(DayOfWeek.THURSDAY).toString(), is("Thu"));
assertThat(formatter.format(DayOfWeek.MONDAY).toString(), is("Mon"));
assertThat(formatter.format(DayOfWeek.TUESDAY).toString(), is("Tue"));
assertThat(formatter.format(DayOfWeek.SUNDAY).toString(), is("Sun"));
assertEquals(o1, o2);
assertEquals(o1, o2);
assertTrue(v.getPrecision() > 0.);
assertEquals(itemDocumentFiltered, filter.filter(itemDocument));
assertEquals(1235L, fd1.withRevisionId(1235L).getRevisionId()); assertEquals(fd1, fd1.withRevisionId(1325L).withRevisionId(fd1.getRevisionId()));
assertEquals("M65057", result.getEntityId().getId());
assertEquals(o1, o2);
assertNotEquals(withoutStatement, mi1);
assertEquals(WmfDumpFile.getDumpFileCompressionType("foo.tar.gz"), CompressionType.GZIP); assertEquals(WmfDumpFile.getDumpFileCompressionType("bar.txt.bz2"), CompressionType.BZ2); assertEquals(WmfDumpFile.getDumpFileCompressionType("baz.txt"), CompressionType.NONE); assertEquals(WmfDumpFile.getDumpFileCompressionType("bat.txt"), CompressionType.NONE);
assertEquals(firstValue, otherValue); assertNotEquals(secondValue, otherValue);
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_EXTERNAL_ID), DatatypeIdImpl.JSON_DT_EXTERNAL_ID);
assertEquals(o1, o2);
assertEquals(s1.getString(), "some string");
assertEquals(r1.hashCode(), r2.hashCode());
assertEquals(o1, o2);
assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers .getResourceFromFile("Statement.rdf")));
assertEquals(0, su.toDelete.size()); assertEquals(1, su.toKeep.size()); assertTrue(su.toKeep.containsKey(P1)); assertEquals(1, su.toKeep.get(P1).size()); assertEquals(s1merged, su.toKeep.get(P1).get(0).statement); assertTrue(su.toKeep.get(P1).get(0).write);
assertEquals("Test contents", br.readLine()); assertNull(br.readLine());
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_TIME), DatatypeIdValue.DT_TIME);
assertEquals("Item Q42", withLabel.findLabel("fr"));
assertEquals(1, wde.getRemainingEdits()); assertEquals(expectedResultDocument, result); assertEquals(0, wde.getRemainingEdits()); assertNull(result); assertEquals(0, wde.getRemainingEdits());
assertEquals("M925243", result.getId());
assertTrue(doc.getSenses().isEmpty());
assertEquals(itemDocument, nullEditedItemDocument); assertEquals(9, wde.getRemainingEdits());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_TIME), DatatypeIdImpl.JSON_DT_TIME);
assertEquals("P1921", this.propertyRegister.uriPatternPropertyId);
assertEquals(fixedId, dmc.copy(brokenId));
assertTrue(su.toDelete.contains("ID-s4")); assertTrue(su.toKeep.containsKey(P2)); assertEquals(1, su.toKeep.get(P2).size()); assertEquals(s3, su.toKeep.get(P2).get(0).statement); assertFalse(su.isEmptyEdit());
assertEquals(itemRedirect.hashCode(), itemRedirect2.hashCode());
assertEquals("{}", su.getJsonUpdateString()); assertTrue(su.isEmptyEdit());
assertEquals(ToString.toString(firstValue), firstValue.toString()); assertEquals(ToString.toString(secondValue), secondValue.toString());
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(lid, newForm.getEntityId().getLexemeId()); assertEquals(ld1.getForms().size() + 1, ld1.withForm(newForm).getForms().size()); assertEquals(newForm, ld1.withForm(newForm).getForm(newForm.getEntityId()));
assertEquals( dfp.result, "Contents of daily 20140221\\nContents of daily 20140220\\nContents of current 20140219\\n");
assertTrue(connection.isLoggedIn());
assertEquals(DatatypeIdValue.DT_STRING, this.propertyRegister.getPropertyType(dataObjectFactory .getPropertyIdValue("P434", this.siteIri))); assertEquals(DatatypeIdValue.DT_STRING, this.propertyRegister.getPropertyType(dataObjectFactory .getPropertyIdValue("P434", this.siteIri))); assertEquals(50, this.propertyRegister.smallestUnfetchedPropertyIdNumber); assertTrue(this.propertyRegister.datatypes.containsKey("P434"));
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(3, wde.getMaxLag());
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_MATH), DatatypeIdValue.DT_MATH);
assertEquals(o1, o2);
assertEquals(mediaInfoDocumentFiltered, filter.filter(mediaInfoDocument));
assertEquals("eine viel bessere Beschreibung", withDescription.findDescription("de"));
assertEquals(dumpFiles.size(), dumpDates.length); assertEquals(dumpFiles.get(i).getDumpContentType(), DumpContentType.FULL); assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]); assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
assertEquals(o1, o2);
assertEquals(secondValue.hashCode(), otherValue.hashCode());
assertEquals(o1, o2);
assertTrue(result.containsKey("Q32063953"));
assertEquals(Collections.singletonList(newAlias), withAliases.getAliases().get("fr"));
assertEquals(sense1.hashCode(), sense2.hashCode());
assertEquals(form1.getId(), "L42-F1");
assertEquals(expectedResultDocument, result);
assertEquals("", connection.username); assertEquals("", connection.password); assertFalse(connection.loggedIn);
assertEquals(mediaInfo1.getEntityType(), EntityIdValue.ET_MEDIA_INFO);
assertNotEquals(withoutStatement, sd1);
assertEquals(prop1.hashCode(), prop2.hashCode());
assertEquals("+4.00", quantity.getValue().getAmountAsString());
assertEquals(result.size(), 1); assertEquals("M32455073", result.get("Cat.jpg").getId());
assertTrue(statement.getReferences().isEmpty());
assertEquals(r1.getSnakGroups(), Collections.singletonList(snakGroup));
assertEquals(2, result.keySet().size()); assertEquals("Q42", result.get("Douglas Adams").getEntityId().getId()); assertEquals("Q131261", result.get("Oliver Kahn").getEntityId().getId());
assertEquals(o1, o2);
assertEquals(o1, o2);
assertNull(q4.getUnitItemId());
assertEquals(o1, o2);
assertEquals(1235L, ld1.withRevisionId(1235L).getRevisionId()); assertEquals(ld1, ld1.withRevisionId(1325L).withRevisionId(ld1.getRevisionId()));
assertFalse(df.isAvailable());
assertEquals(5432, wde.getMaxLagFirstWaitTime());
assertEquals("funky", firstValue.getTypeJsonString()); assertEquals("shiny", secondValue.getTypeJsonString());
assertEquals(c1.hashCode(), c2.hashCode());
assertEquals("M4215516", result.getEntityId().getId());
assertEquals(lid, newSense.getEntityId().getLexemeId()); assertEquals(ld1.getSenses().size() + 1, ld1.withSense(newSense).getSenses().size()); assertEquals(newSense, ld1.withSense(newSense).getSense(newSense.getEntityId()));
assertEquals(mediaInfo1.hashCode(), mediaInfo2.hashCode());
assertNull(result);
assertNotEquals(withoutStatement, fd1);
assertEquals(itemDocumentFiltered, filter.filter(itemDocument));
assertTrue(su.getLabelUpdates().isEmpty()); assertEquals(su.getAliasUpdates().size(), 1); assertEquals(su.getAliasUpdates().get("fr").size(), 0); assertEquals("{\\"aliases\\":{\\"fr\\":[]}}", su.getJsonUpdateString()); assertFalse(su.isEmptyEdit());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_MATH), DatatypeIdImpl.JSON_DT_MATH);
assertEquals(o1, o2);
assertEquals(o1, o2); assertEquals(o3, o2);
assertEquals("The P42 Property", withLabel.findLabel("en"));
assertEquals(0, results.size());
assertEquals(expectedResultDocument, result);
assertEquals(form1.hashCode(), form2.hashCode());
assertEquals(lexeme1.hashCode(), lexeme2.hashCode());
assertNotEquals(withoutStatement, ld1);
assertTrue(results.isEmpty());
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_GEO_SHAPE), DatatypeIdValue.DT_GEO_SHAPE);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_EXTERNAL_ID), DatatypeIdValue.DT_EXTERNAL_ID);
assertEquals(0, wde.getRemainingEdits()); assertNull(result); assertEquals(0, wde.getRemainingEdits());
assertEquals(o1, o2);
assertEquals(Collections.singletonList(newAlias), withAliases.getAliases().get("fr"));
assertEquals("M65057", result.getEntityId().getId());
assertEquals(ir1.hashCode(), ir2.hashCode());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_GEO_SHAPE), DatatypeIdImpl.JSON_DT_GEO_SHAPE);
assertEquals(2, result.size()); assertEquals("M32455073", result.get("Cat.jpg").getId()); assertEquals("M925243", result.get("File:Albert Einstein Head.jpg").getId());
assertEquals(mediaInfoDocumentFiltered, filter.filter(mediaInfoDocument));
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_ITEM), DatatypeIdValue.DT_ITEM);
assertEquals(itemDocumentFiltered, filter.filter(itemDocument));
assertEquals(o1, o2);
assertEquals(expectedResultDocument, result);
assertNotNull(result);
assertEquals(result.size(), 2); assertEquals("M32455073", result.get("Cat.jpg").getId()); assertEquals("M32455073", result.get("File:Cat.jpg").getId());
assertEquals(o1, o2);
assertEquals(mt1.hashCode(), mt2.hashCode());
assertEquals(form1.getEntityType(), EntityIdValue.ET_FORM);
assertFalse(connection.getCookies().isEmpty()); assertTrue(connection.getCookies().isEmpty());
assertEquals(o1, o2);
assertEquals(lexeme1.getEntityType(), EntityIdValue.ET_LEXEME);
assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers .getResourceFromFile("StatementCplx.rdf")));
assertNull(result);
assertEquals(q1.hashCode(), q2.hashCode());
assertTrue(result1.containsKey("Q42")); assertEquals(result1, result2);
assertEquals(item, converter.copy(item));
assertEquals("http: this.propertyRegister.getPropertyUriPattern(pid)); assertEquals("http: this.propertyRegister.getPropertyUriPattern(pid)); assertEquals(50, this.propertyRegister.smallestUnfetchedPropertyIdNumber); assertTrue(this.propertyRegister.datatypes.containsKey("P434"));
assertEquals(br.readLine(), "Line1"); assertNull(br.readLine()); assertTrue(dump.isAvailable()); assertTrue(dump.isAvailable()); assertEquals(dateStamp, dump.getDateStamp()); assertEquals("wikidatawiki", dump.getProjectName()); assertEquals("wikidatawiki-daily-" + dateStamp, dump.toString()); assertEquals(DumpContentType.DAILY, dump.getDumpContentType());
assertEquals(o1, o2);
assertEquals("MediaInfo M42", withLabel.findLabel("fr"));
assertTrue(doc.getForms().isEmpty());
assertNull(result);
assertEquals(s1.hashCode(), s2.hashCode());
assertEquals(1235L, ir1.withRevisionId(1235L).getRevisionId()); assertEquals(ir1, ir1.withRevisionId(1325L).withRevisionId(ir1.getRevisionId()));
assertEquals(1235L, mi1.withRevisionId(1235L).getRevisionId()); assertEquals(mi1, mi1.withRevisionId(1325L).withRevisionId(mi1.getRevisionId()));
assertEquals(1235L, sd1.withRevisionId(1235L).getRevisionId()); assertEquals(sd1, sd1.withRevisionId(1325L).withRevisionId(sd1.getRevisionId()));
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_MONOLINGUAL_TEXT), DatatypeIdImpl.JSON_DT_MONOLINGUAL_TEXT);
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(fd1.hashCode(), fd2.hashCode());
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_GLOBE_COORDINATES), DatatypeIdValue.DT_GLOBE_COORDINATES);
assertEquals("unknown", code); assertEquals("some message", message);
assertFalse(df.isAvailable());
assertEquals(withLabel, pd1);
assertTrue(connection.isLoggedIn()); assertEquals("foo", connection.getCurrentUser()); assertEquals("", connection.getCurrentUser()); assertFalse(connection.isLoggedIn()); assertEquals("", connection.getCurrentUser()); assertNotNull(request.getHeader("Authorization"));
assertEquals(o1, o2);
assertTrue(result1.containsKey("Q42")); assertEquals(result1, result2);
assertEquals(dumpFiles.size(), dumpDates.length); assertEquals(dumpFiles.get(i).getDumpContentType(), DumpContentType.DAILY); assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]); assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(Collections.singletonList(newAlias), withAlias.getAliases().get("en"));
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_STRING), DatatypeIdValue.DT_STRING);
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(expectedResultDocument, result);
assertEquals(o1, o2);
assertEquals(mi1.hashCode(), mi2.hashCode());
assertEquals(mi1.getEntityId(), mid); assertEquals(mi1.getLabels(), Collections.singletonMap(label.getLanguageCode(), label)); assertEquals(mi1.getStatementGroups(), statementGroups);
assertEquals(o1, o2);
assertEquals(item1.hashCode(), item2.hashCode());
assertEquals(withDescription, pd1);
assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers .getResourceFromFile("EmptyPropertyDocument.rdf")));
assertEquals(o1, o2);
assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers .getResourceFromFile("ItemDocument.rdf")));
assertEquals(o1, o2);
assertNotEquals(withoutStatement, ir1);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_QUANTITY), DatatypeIdValue.DT_QUANTITY);
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_PROPERTY), DatatypeIdValue.DT_PROPERTY);
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_MONOLINGUAL_TEXT), DatatypeIdValue.DT_MONOLINGUAL_TEXT);
assertTrue(dm instanceof DirectoryManagerImpl); assertTrue(dmi.readOnly); assertEquals(path, dmi.directory);
assertNull(result);
assertEquals(Datamodel.SITE_WIKIDATA, wbdf.siteIri); assertEquals(ApiConnection.URL_WIKIDATA_API, wbdf.wbGetEntitiesAction.connection.apiBaseUrl);
assertEquals("M925243", result.getId());
assertEquals(r1, r2);
assertEquals(o1, o2);
assertTrue(su.isEmptyEdit());
assertEquals(ld1.hashCode(), ld2.hashCode());
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(propertyDocumentFiltered, filter.filter(propertyDocument));
assertEquals("M925243", result.getId());
assertEquals(sense1.getEntityType(), EntityIdValue.ET_SENSE);
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_COMMONS_MEDIA), DatatypeIdImpl.JSON_DT_COMMONS_MEDIA);
assertTrue(result1.containsKey("Q42")); assertEquals(result1, result2);
assertTrue(connection.isLoggedIn());
assertEquals(o1, o2);
assertEquals(3.45, lag, 0.001);
assertEquals("des", withDescription.findDescription("fr")); assertEquals("Beschreibung", withDescription.findDescription("de"));
assertEquals(2, results.size()); assertFalse(results.containsKey("Q6")); assertTrue(results.containsKey("Q42")); assertTrue(results.containsKey("P31"));
assertEquals(sd1.hashCode(), sd2.hashCode());
assertEquals("une meilleure description", withDescription.findDescription("fr"));
assertEquals(dumpFiles.size(), 1); assertEquals(dumpFiles.get(0).getDumpContentType(), DumpContentType.DAILY); assertEquals(dumpFiles.get(0).getDateStamp(), "20140220"); assertTrue(dumpFiles.get(0) instanceof WmfLocalDumpFile);
assertEquals(t1.hashCode(), t2.hashCode());
assertTrue(doc.getGrammaticalFeatures().isEmpty());
assertEquals(s1.hashCode(), s2.hashCode());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_STRING), DatatypeIdImpl.JSON_DT_STRING);
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_URL), DatatypeIdImpl.JSON_DT_URL);
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals(sense1.getId(), "L42-S1");
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_GLOBE_COORDINATES), DatatypeIdImpl.JSON_DT_GLOBE_COORDINATES);
assertEquals(mt1.hashCode(), mt2.hashCode());
assertEquals("{}", su.getJsonUpdateString()); assertTrue(su.isEmptyEdit());
assertEquals(sitelink.getBadges(), Collections.emptyList());
assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers .getResourceFromFile("ItemDocumentUnknownPropertyTypes.rdf")));
assertEquals(item1.getEntityType(), EntityIdValue.ET_ITEM);
assertEquals(o1, o2);
assertEquals(pd1.hashCode(), pd2.hashCode());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_PROPERTY), DatatypeIdImpl.JSON_DT_PROPERTY);
assertNotNull(connection.getOrFetchToken("csrf"));
assertEquals(o1, o2);
assertEquals(o1, o2);
assertEquals("Q42", result.getEntityId().getId());
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_QUANTITY), DatatypeIdImpl.JSON_DT_QUANTITY);
assertEquals(c1.hashCode(), c2.hashCode());
assertEquals(1235L, pd1.withRevisionId(1235L).getRevisionId()); assertEquals(pd1, pd1.withRevisionId(1325L).withRevisionId(pd1.getRevisionId()));
assertEquals("l\'item 42 bien connu", withDescription.findDescription("fr"));
assertEquals(0, su.toDelete.size()); assertEquals(1, su.toKeep.size()); assertTrue(su.toKeep.containsKey(P3)); assertEquals(1, su.toKeep.get(P3).size()); assertEquals(s1, su.toKeep.get(P3).get(0).statement); assertTrue(su.toKeep.get(P3).get(0).write); assertFalse(su.isEmptyEdit());
assertEquals(fixedId, dmc.copy(brokenId));
assertNull(result);
assertNull(this.propertyRegister.getPropertyType(dataObjectFactory .getPropertyIdValue("P10000", this.siteIri))); assertNull(this.propertyRegister.getPropertyType(dataObjectFactory .getPropertyIdValue("P10000", this.siteIri))); assertEquals("no requests should be made if the property is known to be missing", smallestBefore, this.propertyRegister.smallestUnfetchedPropertyIdNumber);
assertTrue(dm instanceof DirectoryManagerImpl); assertTrue(dmi.readOnly); assertEquals(path, dmi.directory);
assertEquals(o1, o2);
assertEquals(dumpFiles.size(), dumpDates.length); assertEquals(dumpFiles.get(i).getDumpContentType(), DumpContentType.CURRENT); assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]); assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
assertEquals(statement.getStatementId(), "");
assertEquals(t.getYear(), -13800000000L);
assertEquals( RdfTestHelpers .parseRdf("\\n<http: + "<http: model);
assertEquals( DatatypeIdImpl.getJsonDatatypeFromDatatypeIri(DatatypeIdImpl.DT_ITEM), DatatypeIdImpl.JSON_DT_ITEM);
assertEquals("M925243", result.getId());
assertEquals(o1, o2);
assertEquals(itemDocumentFiltered, filter.filter(itemDocument));
assertTrue(2.69 < wde.getMaxLagBackOffFactor() && 2.71 > wde.getMaxLagBackOffFactor());
assertEquals(78, wde.getMaxLagMaxRetries());
assertEquals(s1.hashCode(), s2.hashCode());
assertEquals(r1, r2);
assertEquals(Collections.singletonList(newAlias), withAlias.getAliases().get("en"));
assertEquals(o1, o2);
assertTrue(snaks.hasNext()); assertEquals(valueSnak, snaks.next()); assertFalse(snaks.hasNext());
assertEquals(o1, o2);
assertEquals(prop1.getEntityType(), EntityIdValue.ET_PROPERTY);
assertEquals(d1.hashCode(), d2.hashCode());
assertEquals(3, results.size()); assertFalse(results.containsKey("Q6")); assertTrue(results.containsKey("Q1")); assertTrue(results.containsKey("P31")); assertTrue(results.containsKey("Q42"));
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_URL), DatatypeIdValue.DT_URL);
assertEquals(o1, o2);
assertEquals( DatatypeIdImpl.getDatatypeIriFromJsonDatatype(DatatypeIdImpl.JSON_DT_COMMONS_MEDIA), DatatypeIdValue.DT_COMMONS_MEDIA);
assertEquals(5000, wde.getAverageTimePerEdit());
assertEquals(expectedResultDocument, result);
assertFalse(connection.loggedIn); assertEquals("username", connection.getCurrentUser()); assertEquals("password", connection.password); assertTrue(connection.isLoggedIn());
assertNotEquals(withoutStatement, pd1);
assertEquals(o1, o2);
assertNull(password);
assertEquals(90, (fixed).getFixedWidth(), 0);
assertTrue(message, paragraph.add(jpegImage));
assertEquals(1, cell.getColspan(), 0); assertEquals(2, cell.getColspan());
assertEquals(0, c.getTextRise(), 0); assertEquals(5, c.getTextRise(), 0); assertEquals(12, c.getFont().getSize(), 0); assertEquals(-c.getFont().getSize() / 2, c.getTextRise(), 0); assertEquals(12, c.getFont().getSize(), 0); assertEquals(c.getFont().getSize() / 2 + 0.5, c.getTextRise(), 0);
assertEquals(0f, firstPara.getFirstLineIndent(), 0); assertEquals(16, firstPara.getFirstLineIndent(), 0);
assertEquals(30 - 25, secondPara.getSpacingBefore(), 0);
assertEquals(1, cell.getRowspan(), 0); assertEquals(3, cell.getRowspan());
assertEquals(0.5, cell.getBorderWidthTop(), 0); assertEquals(5, cell.getCellValues().getBorderWidthTop(), 0); assertEquals(6, cell.getCellValues().getBorderWidthLeft(), 0); assertEquals(7, cell.getCellValues().getBorderWidthRight(), 0); assertEquals(8, cell.getCellValues().getBorderWidthBottom(), 0);
assertEquals(null, cell.getBorderColorTop()); assertEquals(BaseColor.RED, cell.getCellValues().getBorderColorTop()); assertEquals(BaseColor.GREEN, cell.getCellValues().getBorderColorLeft()); assertEquals(BaseColor.BLUE, cell.getCellValues().getBorderColorRight()); assertEquals(new BaseColor(000,111,222), cell.getCellValues().getBorderColorBottom());
assertEquals(0f, firstPara.getIndentationRight(), 0); assertEquals(10, firstPara.getIndentationRight(), 0);
assertEquals(30 - (2 * 12), secondPara.getSpacingBefore(), 0);
assertEquals(0.8f*config.getPageSize().getWidth()*0.2f, calc.getWidth(cell, config.getRootTags(), config.getPageSize().getWidth()),0.01f);
assertEquals(60 - (2 * 13.5f), secondPara.getSpacingBefore(), 0);
assertEquals(22 - 12, secondPara.getSpacingBefore(), 0);
assertTrue("expected to be less than", result <= -1);
assertEquals(0f, firstPara.getIndentationLeft(), 0); assertEquals(10, firstPara.getIndentationLeft(), 0);
assertEquals(0, firstPara.getSpacingBefore(), 0); assertEquals(25, secondPara.getSpacingAfter(), 0);
assertTrue("expected not to be equal", result != 0);
assertEquals(Element.ALIGN_LEFT, firstPara.getAlignment(), 0); assertEquals(Element.ALIGN_RIGHT, firstPara.getAlignment(), 0); assertEquals(Element.ALIGN_LEFT, firstPara.getAlignment(), 0); assertEquals(Element.ALIGN_CENTER, firstPara.getAlignment(), 0);
assertEquals(0.8*config.getPageSize().getWidth(), calc.getWidth(table, config.getRootTags(), config.getPageSize().getWidth()), 0);
assertEquals(BaseColor.BLACK, c.getFont().getColor()); assertEquals(255, c.getFont().getColor().getBlue(), 0); assertEquals(255, c.getFont().getColor().getGreen(), 0); assertEquals(255, c.getFont().getColor().getRed(), 0);
assertEquals(12, c.getFont().getSize(), 0); assertEquals(18, c.getFont().getSize(), 0);
assertEquals(18f, firstPara.getLeading(), 0); assertEquals(25, firstPara.getLeading(), 0); assertEquals(25, firstPara.getLeading(), 0); assertEquals(30, firstPara.getLeading(), 0);
assertEquals(0.8*config.getPageSize().getWidth(), calc.getWidth(body, config.getRootTags(), config.getPageSize().getWidth()), 0);
assertEquals(config.getPageSize().getWidth()*0.2f, calc.getWidth(cell, config.getRootTags(), config.getPageSize().getWidth()),0.01f);
assertTrue("expected to be equal", result == 0);
assertTrue("expected to be greater than", result >= 1);
assertEquals(1, c.getHorizontalScaling(), 0); assertEquals(0.75f, c.getHorizontalScaling(), 0); assertEquals(9, c.getFont().getSize(), 0); assertEquals(100 / 75f, c.getHorizontalScaling(), 0);
assertEquals(0, c.getCharacterSpacing(), 0); assertEquals(15, c.getCharacterSpacing(), 0);
assertTrue(String.format("There is 130 pages in document, but iText counted %d", pagesNum), pagesNum == 130);
assertEquals(0, secondPara.getSpacingBefore(), 0);
assertEquals(60 - (2 * 12 * 2), secondPara.getSpacingBefore(), 0);
assertThat(resourceDescription).isEmpty();
assertThat(description).isEmpty();
assertThat(results).isEmpty();
assertThat(matches).isTrue();
assertThat(terraformState).isNotNull(); assertThat(terraformState.getValues()).isNotNull(); assertThat(terraformState.getValues().getRootModule()).isNotNull(); assertThat(terraformState.getValues().getRootModule().getAddress()).isNull();
assertThat(resourceDescription).isNotEmpty().get().isEqualTo(testDescription);
assertThat(results).hasSize(1); assertThat(resourceOptional).isPresent(); assertThat(resource.getOriginalResource()).isSameAs(terraformResource); assertThat(resource.getName()).isEqualTo("i am a name"); assertThat(values.get("a")).isEqualTo(1d); assertThat(values.get("b")).isEqualTo(2d); assertThat(values.get("name")).isEqualTo(resource.getName());
assertThat(matches).isFalse();
assertThat(matches).isFalse();
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertThat(foundDirectory.getAbsolutePath()).isEqualTo(dotGitDir.getAbsolutePath());
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertEquals(exptecedProperties, actualProperties);
assertThat(e).hasMessageThat().isEqualTo("argument validation failed"); assertThat(e).hasMessageThat().isEqualTo("foo-42");
assertThat(e).hasMessageThat().contains("$RUNFILES_DIR and $JAVA_RUNFILES");
assertThat(Util.isNullOrEmpty(null)).isTrue(); assertThat(Util.isNullOrEmpty("")).isTrue(); assertThat(Util.isNullOrEmpty("\\0")).isFalse(); assertThat(Util.isNullOrEmpty("some text")).isFalse();
assertThat(e).hasMessageThat().contains("non-existing path");
assertThat(shadowTextToSpeech.isShutdown()).isFalse();
assertThat(shadowTextToSpeech.isShutdown()).isTrue();
assertThat(languages).isEqualTo(shadowTextToSpeech.getAvailableLanguages());
assertThat(shadowTextToSpeech.getLastSpokenText()).isEqualTo(expected);
assertThat(shadowTextToSpeech.getLanguage()).isEqualTo(Locale.JAPANESE);
assertThat(speakerbox.getTextToSpeech()).isEqualTo(speakerbox.getTextToSpeech());
assertThat(ShadowLog.getLogs().get(0).tag).isEqualTo(Speakerbox.TAG); assertThat(ShadowLog.getLogs().get(0).msg).isEqualTo("Initialization failed.");
assertThat(activity.getVolumeControlStream()) .isEqualTo(AudioManager.USE_DEFAULT_STREAM_TYPE);
assertThat(callbackList).isEmpty();
assertThat(shadowTextToSpeech.getLastSpokenText()).isEqualTo(expected.toString());
assertTrue(bv.equals(bv)); assertTrue(bv.equals(otherBv)); assertFalse(bv.equals(null)); assertFalse(bv.equals("Not a bit vector")); assertFalse(bv.equals(new StrictBitVector(new byte[]{})));
assertEquals("Not initialized", e.getMessage()); assertEquals(true, thrown);
assertThat(result1, Is.is(BigInteger.valueOf(1))); assertThat(result2, Is.is(BigInteger.valueOf(67))); assertThat(result3, Is.is(BigInteger.valueOf(111))); assertThat(result4, Is.is(BigInteger.valueOf(91))); assertThat(result5, Is.is(BigInteger.valueOf(112)));
assertEquals("The byte arrays are not of equal length", e.getMessage()); assertEquals(thrown, true);
assertTrue(new CompUInt128(0, 0,0).isZero()); assertFalse(new CompUInt128(0, 0,1).isZero()); assertFalse(new CompUInt128(0, 1,0).isZero()); assertFalse(new CompUInt128(1, 0,0).isZero());
assertEquals(expected[i], output[i]);
assertArrayEquals(bits, bv.toByteArray());
assertEquals(results.get(0).size(), 1); assertEquals(results.get(1).size(), 1);
assertEquals((byte) 0x81, res.get(i).toByteArray()[0]); assertEquals((byte) 0x7E, res.get(8 + i).toByteArray()[0]);
assertEquals(3, validBroadcastNetwork.getNoOfParties());
assertEquals("Test", pair.getFirst()); assertEquals(5, pair.getSecond().intValue());
assertArrayEquals(randBytes1, randBytes2); assertFalse(Arrays.equals(randBytes1, randBytes3));
assertThat(value, Is.is(BigInteger.valueOf(62))); assertThat(value.pow(2).mod(bigModulus.getBigInteger()), Is.is(expected));
assertEquals(expected, actual);
assertEquals("The amount rows in the matrix is not 8*2^x for some x > 1", e.getMessage()); assertEquals(true, thrown); assertEquals("The amount rows in the matrix is not 8*2^x for some x > 1", e.getMessage()); assertEquals(true, thrown);
assertEquals("Test", pair.getFirst()); assertEquals(5, pair.getSecond().intValue());
assertFalse(Arrays.equals(bytes, new byte[100]));
assertEquals(BigInteger.ONE, fieldDefinition.convertToUnsigned(supplier.getSecretSharedKey()));
assertEquals("12135", uint.toString());
assertEquals(expected, actual);
assertEquals(params.getParameterSpec(DHParameterSpec.class).getG(), DhParameters.getStaticDhParams().getG()); assertEquals(params.getParameterSpec(DHParameterSpec.class).getP(), DhParameters.getStaticDhParams().getP());
assertEquals(me.getPartyId(), netConf.getMe().getPartyId()); assertEquals(me.getHostname(), netConf.getMe().getHostname()); assertEquals(me.getPort(), netConf.getMe().getPort());
assertEquals((byte) 0xF0, list1.get(0)[0]); assertEquals((byte) 0x00, list1.get(0)[1]); assertEquals((byte) 0x0F, list1.get(0)[2]); assertEquals((byte) 0xF0, list1.get(1)[0]); assertEquals((byte) 0x00, list1.get(1)[1]); assertEquals((byte) 0x0F, list1.get(1)[2]);
assertThat(result1, Is.is(modulus.getPrime().subtract(value1))); assertThat(result2, Is.is(modulus.getPrime().subtract(value2))); assertThat(result3, Is.is(modulus.getPrime().subtract(value3)));
assertEquals(expected, actual);
assertEquals("host2", p2.getHostname()); assertEquals(2, p2.getPartyId()); assertEquals(3002, p2.getPort()); assertEquals(null, p10);
assertTrue(seenOne); assertTrue(seenZero);
assertEquals("<Foo, 5>", pair1.toString());
assertArrayEquals(bytes1, bytes2); assertFalse(Arrays.equals(bytes1, new byte[arraySize]));
assertEquals(actual.pow(2).mod(bigModulus), value);
assertEquals(expected, element.toString());
assertThat(element.toString(), StringContains.containsString("7854"));
assertThat(trip.toString(), is("TinyTablesTriple[" + e + "," + e + "," + e + "]"));
assertThat(e1.toString(), is("TinyTablesElement[share=false]")); assertThat(e2.toString(), is("TinyTablesElement[share=true]"));
assertEquals(me.getPartyId(), netConf.getMyId());
assertEquals((byte) 0x81, res.get(i).toByteArray()[0]); assertEquals((byte) 0x7E, res.get(i).toByteArray()[1]); assertEquals((byte) 0x81, res.get(i + 8).toByteArray()[0]); assertEquals((byte) 0x7E, res.get(i + 8).toByteArray()[1]);
assertEquals(bv.hashCode(), otherBv.hashCode()); assertNotEquals(bv.hashCode(), new StrictBitVector(new byte[]{0x42}));
assertThat( prime.toString(), CoreMatchers.containsString("1461501637330902918203684832716283019655932542929"));
assertArrayEquals(bytes, actual);
assertFalse(Arrays.equals(bytes1, bytes2)); assertFalse(Arrays.equals(bytes1, new byte[arraySize]));
assertThat(rp.getMyId(), is(0)); assertThat(rp.getNoOfParties(), is(1));
assertEquals(expected[i], output[i]);
assertArrayEquals(randBytes1, randBytes2);
assertEquals(expected, bv.asBinaryString());
assertFalse(Arrays.equals(randBytes1, randBytes2));
assertArrayEquals(bytesA, bytesB);
assertThat(element.toString(), StringContains.containsString("7854"));
assertThat(vector.get(i).getShare(), is(i == 8));
assertThat(falseSBool.toString(), is("TinyTablesSBool[value=" + falseElem + "]")); assertThat(trueSBool.toString(), is("TinyTablesSBool[value=" + trueElem + "]"));
assertThat(table.toString(), is(String.format("[[%s, %s], [%s, %s]]", e, e, e, e)));
assertArrayEquals(bytes1, bytes2); assertFalse(Arrays.equals(bytes1, new byte[arraySize])); assertFalse(Arrays.equals(bytes1, bytes2)); assertArrayEquals(bytes1, bytes2); assertFalse(Arrays.equals(bytes1, new byte[arraySize]));
assertEquals(numParties, netConf.noOfParties());
assertEquals(expected, triple.toString());
assertFalse(util.isPow2(-2)); assertFalse(util.isPow2(14)); assertFalse(util.isPow2(5)); assertTrue(util.isPow2(4)); assertTrue(util.isPow2(8)); assertFalse(util.isPow2(-8));
assertThat(result1, Is.is(BigInteger.valueOf(1))); assertThat(result2, Is.is(BigInteger.valueOf(67))); assertThat(result3, Is.is(BigInteger.valueOf(111))); assertThat(result4, Is.is(BigInteger.valueOf(91))); assertThat(result5, Is.is(BigInteger.valueOf(112)));
assertNull((new TinyTablesPreproOpenToAllProtocol(0, null)).out());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals((byte) 0x81, res.get(i).toByteArray()[0]); assertEquals((byte) 0x7E, res.get(i).toByteArray()[1]);
assertThat(result1, Is.is(BigInteger.valueOf(27))); assertThat(result2, Is.is(BigInteger.valueOf(86))); assertThat(result3, Is.is(BigInteger.valueOf(78))); assertThat(result4, Is.is(BigInteger.valueOf(83))); assertThat(result5, Is.is(BigInteger.valueOf(109)));
assertThat(networkLoggingDecorator.getNoOfParties(), is(22));
assertEquals(1, uint.toInt());
assertThat(result1, Is.is(modulus.getBigInteger().subtract(value1))); assertThat(result2, Is.is(modulus.getBigInteger().subtract(value2))); assertThat(result3, Is.is(modulus.getBigInteger().subtract(value3)));
assertThat(sce, instanceOf(SecureComputationEngineImpl.class));
assertThat(result, StringContains.containsString(share.toString())); assertThat(result, StringContains.containsString(mac.toString()));
assertThat(gen.getNextTriple(), is(TinyTablesTriple.fromShares(true, true, true)));
assertArrayEquals(bytes, actual);
assertEquals(true, ByteArrayHelper.getBit(byteArray, 13)); assertEquals(false, ByteArrayHelper.getBit(byteArray, 13));
assertEquals(expected, bv.toString());
assertThat(b, is(BigInteger.valueOf(20)));
assertThat(sb.toString(), is(String.format("TinyTablesPreproSBool[value=%s]", e)));
assertEquals(expected, actual);
assertTrue(trueCount > iterations / 10); assertTrue(falseCount > iterations / 10);
assertEquals(AesCtrDrbg.SEED_LENGTH, seed.length); assertArrayEquals(bytesA, bytesB);
assertEquals(expected[i], output[i]);
assertEquals(expected, actual);
assertEquals("The vectors are not of equal length", e.getMessage()); assertEquals(thrown, true); assertEquals("The byte arrays are not of equal length", e.getMessage()); assertEquals(thrown, true);
assertEquals((byte) 0xF0, arr1[0]); assertEquals((byte) 0x00, arr1[1]); assertEquals((byte) 0x0F, arr1[2]);
assertEquals(bvOne, actual);
assertThat(b, is(BigInteger.valueOf(20)));
assertThat(value, Is.is(BigInteger.valueOf(62))); assertThat(value.pow(2).mod(bigModulus.getPrime()), Is.is(expected));
assertEquals(expected, bvOne);
assertTrue(s.startsWith("NetworkConfigurationImpl")); assertTrue(s.contains("myId=" + me.getPartyId())); assertTrue(s.contains(netConf.getParty(i).toString()));
assertNull(current); assertTrue(tossOne.equals(tossTwo)); assertNotEquals(zeroVec, tossOne);
assertArrayEquals(expected, actual);
assertEquals(expected[i], byteArray[i]); assertEquals(expected[i], byteArray[i]); assertEquals(expected[i], byteArray[i]); assertEquals(expected[i], byteArray[i]);
assertEquals(expected, MathUtils.sum(summands, modulus));
assertEquals(true, MathUtils.isQuadraticResidue(new BigInteger("2"), modulus)); assertEquals(false, MathUtils.isQuadraticResidue(new BigInteger("23"), modulus));
assertEquals(expected, actual);
assertEquals(expected, ModulusFinder.findSuitableModulus(16));
assertEquals("persiflage", actual);
assertEquals(expected, s5, 0.001);
assertEquals(exp, IntList.catenate(A, B)); assertEquals(IntList.of(1, 2, 3), A);
assertEquals(expA, IntList.reverse(A));
assertEquals(threeTwoOne, x);
assertEquals(exp, IntList.dcatenate(A, B)); assertEquals(IntList.of(1, 2, 3, 4, 5, 6), A);
assertTrue(offByOne.equalChars('a', 'b')); assertTrue(offByOne.equalChars('r', 'q')); assertFalse(offByOne.equalChars('a', 'e')); assertFalse(offByOne.equalChars('z', 'a')); assertFalse(offByOne.equalChars('a', 'a'));
assertEquals(exp, IntList.catenate(A, B)); assertEquals(IntList.of(1, 2, 3), A);
assertEquals(ooA, ooA2); assertNotEquals(ooA, ooB); assertNotEquals(ooA2, ooB); assertNotEquals(ooA, "ketchup");
assertEquals(hashCode, so.hashCode());
assertEquals(exp, IntList.dcatenate(A, B)); assertEquals(IntList.of(1, 2, 3, 4, 5, 6), A);
assertEquals(IntList.of(1, 2, 3), L); assertEquals(IntList.of(1, 4, 9), res);
assertEquals(IntList.of(1, 4, 9), L);
assertEquals("Attendee\'s name was not retrieved as expected", "Jonathan Doe", attendee.getName()); assertEquals("Attendee\'s ID was not retrieved as expected", id, attendee.getId()); assertEquals("An unexpected number of attendees have been registered", 1, attendees.size()); assertTrue("The session vote service is missing the updated attendee", attendees.contains(jonathanDoe));
assertEquals("Unexpected result from session1 rating average", 7.0, avg, 0.0);
assertEquals("Attendee\'s name was not retrieved as expected", "Jonathan Doe", attendee.getName()); assertEquals("Attendee\'s ID was not retrieved as expected", id, attendee.getId()); assertEquals("An unexpected number of attendees have been registered", 0, attendees.size());
assertEquals("Unexpected number of ratings for session1", 3, session1Ratings.size()); assertTrue("Returned ratings does not include all submitted ratings for session1", session1Ratings.contains(sr1) && session1Ratings.contains(sr2) && session1Ratings.contains(sr4));
assertEquals("Unexpected session in updated rating", "session2", updatedRating.getSession()); assertEquals("Unexpected attendee ID in updated rating", id2, updatedRating.getAttendeeId()); assertEquals("Unexpected rating value in updated rating", 7, updatedRating.getRating()); assertTrue("The session vote service is missing the newly-updated session rating", sessionVote.getAllSessionRatings().contains(updatedRating));
assertEquals("Returned SessionRating\'s session name does not match expected session name", "session1", sessionRating.getSession()); assertEquals("Returned SessionRating\'s attendee ID does not match expected attendee ID", id, sessionRating.getAttendeeId()); assertEquals("Returned SessionRating\'s rating value does not match expected value", 5, sessionRating.getRating()); assertTrue("The session vote service is missing the newly-submitted session rating", sessionVote.getAllSessionRatings().contains(sessionRating));
assertFalse("The deleted session was not retrieved as expected", sessionVote.getAllSessionRatings().contains(sessionRatingToDelete)); assertEquals("An unexpected number of rating have been registered", 1, ratings.size()); assertEquals("An unexpected number of rating have been registered", 1, ratings.size()); assertEquals("An unexpected number of rating have been registered", 0, ratingForAttendee.size());
assertEquals("Attendee\'s name was not updated as expected", "Jon Doe", attendee.getName()); assertEquals("Attendee\'s ID was updated when it was expected to stay the same", id, attendee.getId()); assertEquals("An unexpected number of attendees have been registered", 1, attendees.size()); assertTrue("The session vote service is missing the updated attendee", attendees.contains(attendee));
assertThat(annotation, notNullValue());
assertThat(e.getMessage(), containsString("setInvalidProperty"));
assertThat(annotations, notNullValue()); assertThat(annotations.length, equalTo(1)); assertThat(annotations[0], instanceOf(TestAnnotation.class));
assertThat(xoTransaction.isActive(), equalTo(true)); assertThat(xoTransaction.isActive(), equalTo(false));
assertThat(xoTransaction.isActive(), equalTo(true)); assertThat(xoTransaction.isActive(), equalTo(false));
assertThat(e.getMessage(), containsString("setInvalidProperty"));
assertThat(annotation, notNullValue());
assertThat(actualMessage, is(equalTo(expectedMessage)));
assertThat(userModelList.toArray()[0], is(instanceOf(UserModel.class))); assertThat(userModelList.toArray()[1], is(instanceOf(UserModel.class))); assertThat(userModelList.size(), is(2));
assertThat(userId, is(FAKE_USER_ID));
assertThat(userModelList.toArray()[0], is(instanceOf(UserModel.class))); assertThat(userModelList.toArray()[1], is(instanceOf(UserModel.class))); assertThat(userModelList.size(), is(2));
assertThat(actualMessage, is(equalTo(expectedMessage)));
assertThat(userModel, is(instanceOf(UserModel.class))); assertThat(userModel.getUserId(), is(FAKE_USER_ID)); assertThat(userModel.getFullName(), is(FAKE_FULLNAME));
assertThat(userModel, is(instanceOf(UserModel.class))); assertThat(userModel.getUserId(), is(FAKE_USER_ID)); assertThat(userModel.getFullName(), is(FAKE_FULLNAME));
assertThat(fileToWrite.exists(), is(true));
assertThat(userEntity.getUserId(), is(1)); assertThat(userEntity.getFullname(), is("Simon Hill")); assertThat(userEntity.getFollowers(), is(7484));
assertEquals(asset1, fooGroup.getAssets().get(0));
assertEquals("&gt;&lt;iframe src=\'external.html\'&gt;&lt;/iframe&gt;", sanitizer.execute("><iframe src=\'external.html\'></iframe>")); assertEquals("&gt;&lt;script&gt;alert(\'hack!\');&lt;/script&gt;", sanitizer.execute("><script>alert(\'hack!\');</script>"));
assertEquals("foo", new RequestParameter(null, "foo").toString());
assertEquals("2012-06-28", sanitizer.execute("2012-06-28")); assertEquals("2012-06-282012-06-28", sanitizer.execute("2012-06-28 2012-06-28")); assertEquals("2012-06-28", sanitizer.execute("yadda yadda 2012-06-28")); assertEquals("", sanitizer.execute("^50 First} St, ~Flo|or 7"));
assertEquals(AssetPackageMode.PRODUCTION, new RequestParameter(null, "PRODUCTION").toEnum(AssetPackageMode.class)); assertEquals(AssetPackageMode.PRODUCTION, new RequestParameter(null, "production").toEnum(AssetPackageMode.class)); assertEquals(AssetPackageMode.PRODUCTION, new RequestParameter(null, "Production").toEnum(AssetPackageMode.class));
assertEquals(URL, sanitizer.execute(URL));
assertEquals("Luke\'\'s big head.", sanitizer.execute("Luke\'s big head."));
assertEquals(Long.valueOf(1), new RequestParameter(null, "1").toLong()); assertEquals(Long.valueOf(-1), new RequestParameter(null, "-1").toLong());
assertEquals("Abc-12_3", sanitizer.execute("Abc-12_3")); assertEquals("", sanitizer.execute("")); assertEquals(" ", sanitizer.execute(" ")); assertEquals(null, sanitizer.execute(null)); assertEquals("default", sanitizer.execute("Abc- 12_3")); assertEquals("default", sanitizer.execute("Abc-12_3!")); assertEquals("default", sanitizer.execute("Abc-12_3\'"));
assertEquals(null, cssGroup.getExtension()); assertEquals("css", cssGroup.getExtension());
assertEquals(2, assetGroup.getAssets().size()); assertEquals(asset1, assetGroup.getAssets().get(0)); assertEquals(asset2, assetGroup.getAssets().get(1));
assertEquals("SPG Flights FAQs Home Frequently Asked Questions", sanitizer.execute(html));
assertEquals(Integer.valueOf(1), new RequestParameter(null, "1").toInteger()); assertEquals(Integer.valueOf(-1), new RequestParameter(null, "-1").toInteger());
assertEquals(expected, compressed);
assertEquals("Abc-12_4", parameterNameSanitizer.execute("Abc-12_4")); assertEquals("Abc-12_4", parameterNameSanitizer.execute("Abc-1 2_4")); assertEquals("Abc-12_4", parameterNameSanitizer.execute("Abc-12_4!"));
assertEquals(Double.valueOf(0.1), new RequestParameter(null, "0.1").toDouble()); assertEquals(Double.valueOf(-0.1), new RequestParameter(null, "-0.1").toDouble());
assertTrue(testFile.exists()); assertFalse(testFile.exists());
assertNotNull(plist); assertTrue(plist.exists());
assertFalse(iconFile.exists()); assertTrue(iconFile.exists()); assertTrue(contentEquals(expectedIconFile, iconFile));
assertThat(javadocLocation, notNullValue()); assertTrue("DB file does not exist", dbFile.exists()); assertThat(expectedEntry.getValue().intValue(), is(count));
assertThat(err, containsString("Something went wrong with parsing a link, possibly unescaped tags" + " in Javadoc. (Name: , Type: CONSTRUCTOR, Link: )")); assertThat(err, containsString("Most recently parsed value was: (Name: SampleClass, Type: CLASS," + " Path: ./com/megatome/j2d/sample/clazz/SampleClass.html)"));
assertEquals(originalFiles, copiedFiles);
assertThat(actual, is(ShipmentStatus.NOT_SHIPPED));
assertThat(actual, is(ShipmentStatus.COMPLETED));
assertThat(actual.getYear(), is(equalTo(2011))); assertThat(actual.getMonth(), is(equalTo(11))); assertThat(actual.getDay(), is(equalTo(30))); assertThat(actual.getHour(), is(equalTo(23))); assertThat(actual.getMinute(), is(equalTo(59))); assertThat(actual.getSecond(), is(equalTo(59)));
assertThat(newStocks.getResults().size(), is(0)); assertThat(newShipments.getResults().size(), is(0));
assertThat(item1.getCategoryCodeAsString(), is("A")); assertThat(item5.getCategoryCodeAsString(), is("A")); assertThat(item10.getCategoryCodeAsString(), is("A")); assertThat(item15.getCategoryCodeAsString(), is("B")); assertThat(item20.getCategoryCodeAsString(), is("B")); assertThat(item30.getCategoryCodeAsString(), is("C")); assertThat(item31, is(nullValue()));
assertThat(actual.getYear(), is(equalTo(2011))); assertThat(actual.getMonth(), is(equalTo(11))); assertThat(actual.getDay(), is(equalTo(01))); assertThat(actual.getHour(), is(equalTo(00))); assertThat(actual.getMinute(), is(equalTo(00))); assertThat(actual.getSecond(), is(equalTo(00)));
assertThat(actual, is(ShipmentStatus.COST_UNKNOWN));
assertThat(newStocks.getResults().size(), is(1)); assertThat(newShipments.getResults().size(), is(1));
assertThat(newStocks.getResults().size(), is(1)); assertThat(newShipments.getResults().size(), is(0));
assertThat(holder.getValue(), is(not(nullValue()))); assertThat(holder.getValue().length, is(2)); assertThat(holder.getValue()[0], is((byte) 0xff)); assertThat(holder.getValue()[1], is((byte) 0x0f));
assertThat(mapCodec, is(not(nullValue())));
assertThat(mapCodec, is(not(nullValue())));
assertNull(Converters.get(String.class, Boolean.class)); assertNotNull(converter1); assertEquals(new Integer(3), converter1.convert(new Byte((byte) 3))); assertNotNull(converter2); assertEquals(new Integer(3), converter2.convert(new Short((byte) 3))); assertNotNull(converter3); assertEquals(new Integer(3), converter3.convert(new Long(3)));
assertThat(factory.create(metadata, type, context), is(nullValue()));
assertThat(mapCodec, is(nullValue()));
assertThat(map.size(), is(2)); assertThat(map, hasEntry("foo", 1)); assertThat(map, hasEntry("bar", 2));
assertThat(output.length, is(match.length)); assertArrayEquals(match, output);
assertThat(decoded, is(not(nullValue()))); assertThat(decoded.length, is(2));
assertThat(codec.decode(buffer, resolver, builder), is("DONE"));
assertThat(bitChannelCaptor.getValue(), instanceOf(BoundedBitChannel.class));
assertEquals("foobar", reference.resolve(new DataResolver(data)));
assertThat(boundedChannel.getRelativeBitPos(), is(4));
assertEquals(Number.class, ClassUtils.calculateCommonSuperType(Byte.class, Integer.class)); assertEquals(Number.class, ClassUtils.calculateCommonSuperType(double.class, Integer.class)); assertEquals(Integer.class, ClassUtils.calculateCommonSuperType(int.class, Integer.class)); assertEquals(Object.class, ClassUtils.calculateCommonSuperType(Byte.class, String.class));
assertThat(result.length, is(4)); assertThat(new String(result, "US-ASCII"), is("What"));
assertThat(map.size(), is(0));
assertThat(mapCodec, is(not(nullValue())));
assertThat(decoded, is(not(nullValue()))); assertThat(decoded.length, is(1));
assertEquals(false, method.isSynchronized()); assertEquals(true, method.isSynchronized());
assertEquals("Map<java.math.BigDecimal, java.util.List<com.beeant.dto.User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertEquals(0, clazz.getTypeParameters().size()); assertEquals(1, clazz.getTypeParameters().size()); assertEquals(2, clazz.getTypeParameters().size());
assertThat(fqt.getDomainObjectName()).isEqualTo("MyTable");
assertNotNull(interfaze.getFileCommentLines()); assertEquals(1, interfaze.getFileCommentLines().size()); assertEquals("test", interfaze.getFileCommentLines().get(0));
assertEquals("Map<BigDecimal, List<?>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertFalse(method.getReturnType().isPresent()); assertEquals(FullyQualifiedJavaType.getIntInstance(), method.getReturnType().get());
assertNotNull(interfaze.getStaticImports()); assertEquals(2, interfaze.getStaticImports().size()); assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil1")); assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil2"));
assertNotNull(method); assertEquals("bar", method.getName());
assertEquals(0, method.getBodyLines().size());
assertFalse(clazz.isAbstract()); assertTrue(clazz.isAbstract());
assertEquals("BigDecimal[]", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertNotNull(typeParameter); assertEquals("T extends List & Comparator", typeParameter.toString());
assertNotNull(method); assertEquals("foo", method.getName());
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("List<BigDecimal>"); assertThat(kt.getImportList()).hasSize(2); assertThat(kt.getImportList()).contains("java.math.BigDecimal", "java.util.List");
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("Byte"); assertThat(kt.getImportList()).isEmpty();
assertEquals(0, clazz.getInitializationBlocks().size()); assertEquals(1, clazz.getInitializationBlocks().size()); assertEquals(2, clazz.getInitializationBlocks().size());
assertEquals(false, method.isConstructor()); assertEquals(true, method.isConstructor());
assertEquals(false, method.isNative()); assertEquals(true, method.isNative());
assertNotNull(interfaze.getImportedTypes()); assertEquals(1, interfaze.getImportedTypes().size()); assertTrue(interfaze.getImportedTypes().contains(arrayList));
assertEquals("bar", method.getName()); assertEquals("foo", method.getName());
assertThat(fqt.getDomainObjectName()).isEqualTo("SysMytable");
assertEquals("Map<BigDecimal, List<User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertThat(fqt.getDomainObjectName()).isEqualTo("MyTable");
assertEquals("java.util.Map<java.math.BigDecimal, java.util.List<com.beeant.dto.User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertEquals("Map<BigDecimal, List<? super com.beeant.dto.User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertNotNull(interfaze.getStaticImports()); assertEquals(1, interfaze.getStaticImports().size()); assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil"));
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("Byte"); assertThat(kt.getImportList()).isEmpty();
assertEquals("java.util.Map<java.math.BigDecimal, java.util.List<User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("Array<Byte>"); assertThat(kt.getImportList()).isEmpty();
assertThat(fqt.getDomainObjectName()).isEqualTo("Mytable");
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("BigDecimal"); assertThat(kt.getImportList()).hasSize(1); assertThat(kt.getImportList()).contains("java.math.BigDecimal");
assertEquals("Map<BigDecimal, List<? extends User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertThat(fqt.getDomainObjectName()).isEqualTo("Mytable");
assertFalse(clazz.getSuperClass().isPresent()); assertNotNull(clazz.getSuperClass()); assertEquals("com.hoge.SuperClass", clazz.getSuperClass().get().getFullyQualifiedName());
assertEquals("java.util.Map<BigDecimal, List<User>>", JavaDomUtils.calculateTypeName(interfaze, fqjt));
assertThat(fqt.getDomainObjectName()).isEqualTo("Mytable");
assertThat(kt.getShortNameWithTypeArguments()).isEqualTo("ByteArray"); assertThat(kt.getImportList()).isEmpty();
assertNotNull(interfaze.getImportedTypes()); assertEquals(2, interfaze.getImportedTypes().size()); assertTrue(interfaze.getImportedTypes().contains(arrayList)); assertTrue(interfaze.getImportedTypes().contains(hashMap));
assertEquals(0, restart.lastUpdate); assertEquals(0, restart.lastUpdate); assertFalse(population.isEmpty()); assertFalse(restart.archive.isEmpty()); assertEquals(21, restart.lastUpdate); assertTrue(population.isEmpty()); assertTrue(restart.archive.isEmpty());
assertEquals(0, restart.lastUpdate); assertEquals(21, restart.lastUpdate); assertFalse(population.isEmpty()); assertFalse(restart.archive.isEmpty());
assertEquals(String.format("encode %d -> %s, expected %s (minBytes=%d)", _input, Text.byteBufferToString(actual), Text.byteBufferToString(_expected), _minBytes), _expected, actual);
assertEquals(Collections.emptyList(), s.collect(Collectors.toList()));
assertEquals("9df4b597-af9e-4dca-bdda-719cce2c4e28", notification.sessionId);
assertEquals(certificates, s.collect(Collectors.toList()));
assertThat(completed).hasSize(1); assertThat(checks.get(0).getKey()).isEqualTo(ValidationString.VALIDATOR_NO_LOCAL_MANIFEST_NO_MANIFEST_IN_REPOSITORY); assertThat(checks.get(0).getParameters()).isEqualTo(Lists.newArrayList(manifestUri.toString(), repository.getRrdpNotifyUri()));
assertThat(completed).hasSize(1); assertThat(result.getStatus()).isEqualTo(SUCCEEDED); assertEquals(RpkiRepository.Status.PENDING, all.get(0).getStatus());
assertThat(oldCount.get()).isEqualTo(1);
assertThat(oldCount.get()).isEqualTo(0);
assertThat(ta.getLocationsByPreference()).isEmpty();
assertThat(orphanCount.get()).isEqualTo(1);
assertEquals(0, counter.get()); assertEquals(0, counter.get()); assertEquals(1, counter.get()); assertEquals(1, counter.get());
assertThat(orphanCount.get()).isEqualTo(1);
assertThat(new SearchTerm("10.0.0.0").test(prefixTest)).isTrue(); assertThat(new SearchTerm("12.0.0.0").test(prefixTest)).isFalse();
assertThat(completed).hasSize(1); assertThat(checks.get(0).getKey()).isEqualTo(ValidationString.VALIDATOR_NO_MANIFEST_REPOSITORY_FAILED); assertThat(checks.get(0).getParameters()).isEqualTo(Collections.singletonList(repository.getRrdpNotifyUri()));
assertEquals(Collections.singletonList(CERTIFICATE_1), s.collect(Collectors.toList()));
assertEquals(Collections.singletonList(CERTIFICATE_1), s.collect(Collectors.toList()));
assertThat(response.getData()).isNotNull();
assertThat(subject.getValues()).containsExactly(1, 2, 3);
assertThat(new SearchTerm("10.10.0.0/16").test(prefixTest)).isTrue(); assertThat(new SearchTerm("11.10.0.0/16").test(prefixTest)).isFalse();
assertThat(subject.isLiteralIpAddress("dbg::")).isEmpty(); assertThat(subject.isLiteralIpAddress("db8:dead:beef::/26")).isEmpty(); assertThat(subject.isLiteralIpAddress("127")).isEmpty(); assertThat(subject.isLiteralIpAddress("")).isEmpty();
assertThat(new SearchTerm("3642").test(asnTest)).isTrue(); assertThat(new SearchTerm("as3642").test(asnTest)).isTrue(); assertThat(new SearchTerm("AS3642").test(asnTest)).isTrue(); assertThat(new SearchTerm("AS364").test(asnTest)).isFalse(); assertThat(new SearchTerm("364").test(asnTest)).isFalse();
assertThat(subject.isLiteralIpAddress(".10.0.0.24")).isEmpty(); assertThat(subject.isLiteralIpAddress("a10.0.0.24")).isEmpty(); assertThat(subject.isLiteralIpAddress("10.0.0.24.b")).isEmpty(); assertThat(subject.isLiteralIpAddress("10.0.0/24")).isEmpty(); assertThat(subject.isLiteralIpAddress("127")).isEmpty(); assertThat(subject.isLiteralIpAddress("")).isEmpty();
assertEquals(1, counter.get()); assertEquals(2, counter.get());
assertThat(oldCount.get()).isEqualTo(1);
assertThat(subject.cleanupRpkiObjects()).isEqualTo(0); assertThat(subject.cleanupRpkiObjects()).isEqualTo(0); assertThat(subject.cleanupRpkiObjects()).isEqualTo(1);
assertThat(SerialNumber.of(0).isBefore(SerialNumber.of(0))).isFalse(); assertThat(SerialNumber.of(Integer.MAX_VALUE).isBefore(SerialNumber.of(Integer.MAX_VALUE))).isFalse(); assertThat(SerialNumber.of(n).isBefore(SerialNumber.of(n))).isFalse();
assertThat(response.getData()).isNotNull();
assertThat(subject.isLiteralIpAddress("10.0.0.10")).hasValue("10.0.0.10"); assertThat(subject.isLiteralIpAddress("127.0.0.1")).hasValue("127.0.0.1"); assertThat(subject.isLiteralIpAddress("567.0.0.1")).hasValue("567.0.0.1");
assertThat(new SearchTerm("Bla").test(genericTest)).isTrue(); assertThat(new SearchTerm("bla").test(genericTest)).isFalse(); assertThat(new SearchTerm("3742").test(genericTest)).isFalse(); assertThat(new SearchTerm("locati").test(genericTest)).isTrue();
assertThat(inetSocketAddresses).isNotEmpty();
assertEquals(1, countAll);
assertThat(completed).hasSize(1); assertThat(validatedRoas).hasSize(1); assertThat(validatedRoas.get(0).getLeft()).isEqualTo(result);
assertThat(validationChecks).hasSize(1); assertThat(validationChecks.get(0).getKey()).isEqualTo(ErrorCodes.TRUST_ANCHOR_FETCH);
assertThat(subject.getCurrentVersion()).isEqualTo(SerialNumber.of(0)); assertThat(subject.getCurrentVersion()).isEqualTo(SerialNumber.of(1)); assertThat(subject.getCurrentVersion()).isEqualTo(SerialNumber.of(2));
assertEquals("apiQ_64_Google", action.getTemplatePresentation().getText());
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertFalse(myPresentation.isEnabled()); assertEquals("Screen Record", myPresentation.getText());
assertTrue(needsExplicitBuildToolsVersion(parse("3.0.0"), parseRevision("27.0.4"), CURRENT_BUILD_TOOLS)); assertTrue(needsExplicitBuildToolsVersion(parse("3.0.0"), parseRevision("28.0.0"), CURRENT_BUILD_TOOLS));
assertEquals(274, new StackFrameParser(line).getLineNumber());
assertThat(definedMethods.size()).isEqualTo(allMethods.size());
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo(ACTIVITY_NAME);
assertTrue(myFilter.include(mockEntry(false)));
assertThat(result).isEqualTo("ABC");
assertThat(findTab(myView, OverviewTabContent.class).findTimingBar()).isNull(); assertThat(findTab(myView, OverviewTabContent.class).findTimingBar()).isNotNull();
assertThat(list.toArray()).isEqualTo(new String[]{"A", "B", "C"});
assertThat(iconProperty.get().isPresent()).isFalse(); assertThat(listener.getCount()).isEqualTo(0); assertThat(iconProperty.get().isPresent()).isTrue(); assertThat(iconProperty.getValue()).isEqualTo(dummyIcon); assertThat(listener.getCount()).isEqualTo(1); assertThat(iconProperty.get().isPresent()).isFalse(); assertThat(listener.getCount()).isEqualTo(2);
assertNull(JavaModuleDependency.copy(myIdeaProject, myOriginalDependency));
assertThat(color.get().isPresent()).isFalse(); assertThat(listener.getCount()).isEqualTo(0); assertThat(color.get().isPresent()).isTrue(); assertThat(color.getValue()).isEqualTo(Color.RED); assertThat(colorPanel.getSelectedColor()).isEqualTo(Color.BLUE); assertThat(listener.getCount()).isEqualTo(1); assertThat(colorPanel.getSelectedColor()).isNull(); assertThat(listener.getCount()).isEqualTo(2);
assertTrue(validator.checkSuperclass(""));
assertTrue(task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter).getSuccess());
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(myStage.getName()).isEqualTo("NETWORK");
assertThat(mySplitter.isVisible()).isFalse(); assertThat(myContainer.getComponents()).asList().containsExactly(myToolWindowComponent1, myToolWindowComponent2);
assertEquals("Pixel 3 API 29 - Snapshot", text);
assertEquals(100, nodeA.getGlobalTotal(), EPS); assertEquals(61, nodeA.getGlobalChildrenTotal(), EPS); assertEquals(19, nodeA.getGlobalTotal(), EPS); assertEquals(16, nodeA.getGlobalChildrenTotal(), EPS); assertEquals(5, nodeA.getGlobalTotal(), EPS); assertEquals(1, nodeA.getGlobalChildrenTotal(), EPS);
assertThat(treeWalker.descendantStream().collect(Collectors.toList())). containsExactly(panelRoot, panel1, panel2, panel3, panel11, panel31, panel32, panel111, panel112).inOrder();
assertThat(traceInfo).isNull(); assertThat(traceInfo).isNotNull(); assertThat(traceInfo.getTraceId()).isEqualTo(traceId1); assertThat(traceInfo).isNotNull(); assertThat(traceInfo.getTraceId()).isEqualTo(traceId2); assertThat(traceInfo).isNotNull(); assertThat(traceInfo.getTraceId()).isEqualTo(traceId1);
assertEquals(expectedResult, actualResult);
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.STARTED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo(ACTIVITY_NAME);
assertThat(result).isNull();
assertThat(property1.get()).isEqualTo(20); assertThat(property2.get()).isEqualTo(30); assertThat(property1.get()).isEqualTo(40);
assertEquals(ourRoot, result.receiver); assertEquals(ourRoot.getChild(0), result.nextComponent); assertEquals(1, result.depth); assertEquals(0, result.row);
assertThat(DEFAULT_DATA.getJavaThreads()).hasSize(1); assertThat(findTab(myView, OverviewTabContent.class).findInitiatingThreadValue()).isNotNull(); assertThat(findTab(myView, OverviewTabContent.class).findOtherThreadsValue()).isNull();
assertEquals(expected, MaterialDesignIcons.getBasenameToPathMap(mockGenerator()));
assertNotEquals(original, image.myBuffer); assertNotEquals(copy, image.myBuffer); assertNotEquals(copy, image.myBuffer); assertEquals(25, copy.getWidth()); assertEquals(50, copy.getHeight()); assertNotEquals(copy, image.myBuffer); assertEquals(25, copy.getWidth()); assertEquals(25, copy.getHeight());
assertThat(mySideModel.getContext()).isSameAs(CONTEXT);
assertThat(dependencyNames).hasSize(4); assertThat(dependencyNames) .containsExactly("Gradle: library_c", "Gradle: library_d", "Gradle: library_a", "Gradle: library_b").inOrder();
assertEquals("CPU", monitor.getName());
assertThat(boolValue.get()).isEqualTo(true);
assertEquals(Snapshot.quickboot(myFileSystem), snapshot);
assertEquals(dataList.size(), 1); assertEquals(data.x, TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS)); assertEquals(data.value.getStartUs(), TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS)); assertEquals(data.value.getEndUs(), TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS)); assertEquals(data.value.getType(), UserEvent.ROTATION);
assertThat(myFileSystem.getName()).isEqualTo(myMockDevice.getName());
assertEquals("Pixel 3 API 29", action.getTemplatePresentation().getText());
assertEquals(4, finder.getAllUrls().size());
assertThat(payloadBody).isNotNull(); assertThat(new TreeWalker(payloadBody).descendantStream().anyMatch(c -> c.getName().equals("View Parsed"))).isTrue(); assertThat(new TreeWalker(payloadBody).descendantStream().anyMatch(c -> c.getName().equals("View Source"))).isTrue();
assertSame(aVariant, variant);
assertThat(TreeWalker.isAncestor(panel1, panel123)).isTrue(); assertThat(TreeWalker.isAncestor(panel123, panel1)).isFalse(); assertThat(TreeWalker.isAncestor(panel1, panel1)).isTrue(); assertThat(TreeWalker.isAncestor(panel11, panel123)).isFalse(); assertThat(TreeWalker.isAncestor(panel12, panel123)).isTrue();
assertEquals(24, font.getSize());
assertThat(payloadBody).isNotNull(); assertThat(new TreeWalker(payloadBody).descendantStream().anyMatch(c -> c.getName().equals("View Parsed"))).isTrue(); assertThat(new TreeWalker(payloadBody).descendantStream().anyMatch(c -> c.getName().equals("View Source"))).isTrue();
assertThat(filterMetadata).isNotNull(); assertThat(filterMetadata.getFilterTextLength()).isEqualTo(0); assertThat(filterMetadata.getFeaturesUsed()).isEqualTo(0); assertThat(filterMetadata).isNotNull(); assertThat(filterMetadata.getFilterTextLength()).isEqualTo(4); assertThat(filterMetadata.getFeaturesUsed()).isEqualTo(FilterMetadata.MATCH_CASE | FilterMetadata.IS_REGEX);
assertEquals(Arrays.asList(myDeviceAndSnapshotComboBoxTargetProvider, myCloudTestMatrixTargetProvider), actualProviders);
assertEquals(0, loaded.get()); assertEquals(50, asyncIcon.getIconWidth()); assertEquals(40, asyncIcon.getIconHeight()); assertEquals(0, painted.get()); assertEquals(1, loaded.get()); assertEquals(1, painted.get()); assertEquals(2, loaded.get()); assertEquals(2, painted.get());
assertEquals(profilers.getStage().getClass(), NullMonitorStage.class); assertThat(profilers.getStage(), instanceOf(CpuProfilerStage.class));
assertThat(textProperty.get()).isEqualTo("New Field"); assertThat(listener.getCount()).isEqualTo(0); assertThat(textProperty.get()).isEqualTo("Field text updated directly"); assertThat(listener.getCount()).isEqualTo(2); assertThat(field.getText()).isEqualTo("Field text updated via property"); assertThat(listener.getCount()).isEqualTo(3);
assertThat(result).isNull();
assertEquals(SESSION_DATA, myService.getSession());
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(stackTrace.getTrace()).isEqualTo(data.getTrace()); assertThat(stackTrace.getCodeLocations()).hasSize(2); assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.NORMAL); assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.EXPANDED); assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.NORMAL);
assertThat(tasks).hasLength(5); assertThat(tasks[0]).isInstanceOf(ProjectNotificationsCleanUpTask.class); assertThat(tasks[1]).isInstanceOf(ProjectPreferencesCleanUpTask.class); assertThat(tasks[2]).isInstanceOf(HttpProxySettingsCleanUpTask.class); assertThat(tasks[3]).isInstanceOf(GradleDistributionCleanUpTask.class); assertThat(tasks[4]).isInstanceOf(SyncIssueCleanupTask.class);
assertEquals("", toString(messages));
assertThat(myTracker.getTrackingState()).isTrue(); assertThat(myProxyBytesCache.containsKey(Integer.toString(time1))).isFalse(); assertThat(myProxyBytesCache.get(Integer.toString(time1))) .isEqualTo(ByteString.copyFrom(FakeLegacyAllocationTracker.Companion.getRAW_DATA()));
assertThat(getUniqueName("test", value -> value.endsWith("9") ? OK : ERROR)).isEqualTo("test9");
assertThat(stringList).containsExactly("1", "2", "3", "4", "5"); assertThat(listener.getCount()).isEqualTo(1); assertThat(stringList).containsExactly("1", "2", "3", "4", "5", "6", "7"); assertThat(listener.getCount()).isEqualTo(2); assertThat(stringList).isEmpty(); assertThat(listener.getCount()).isEqualTo(3);
assertThat(iconProperty.get().isPresent()).isFalse(); assertThat(listener.getCount()).isEqualTo(0); assertThat(iconProperty.get().isPresent()).isTrue(); assertThat(iconProperty.getValue()).isEqualTo(dummyIcon); assertThat(listener.getCount()).isEqualTo(1); assertThat(iconProperty.get().isPresent()).isFalse(); assertThat(listener.getCount()).isEqualTo(2);
assertThat(comparator.compare(files.get(0), files.get(1))).isLessThan(0); assertThat(comparator.compare(files.get(1), files.get(2))).isLessThan(0); assertThat(comparator.compare(files.get(0), files.get(2))).isLessThan(0);
assertThat(definedMethods.size()).isEqualTo(allMethods.size());
assertTrue(validator.checkPackage(""));
assertFalse(action.isSelected(new AnActionEvent(null, dataId -> null, "sdsd", action.getTemplatePresentation(), ActionManager.getInstance(), -1)));
assertFalse(task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter).getSuccess());
assertTrue(component.isVisible());
assertThat(destProperty.get()).isEqualTo(10); assertThat(destProperty.get()).isEqualTo(20); assertThat(destProperty.get()).isEqualTo(20); assertThat(destProperty.get()).isEqualTo(20); assertThat(destProperty.get()).isEqualTo(20); assertThat(destProperty.get()).isEqualTo(40); assertThat(destProperty.get()).isEqualTo(50);
assertTrue(result.isSuccess());
assertNull(myPresentation.getDescription()); assertTrue(myPresentation.isEnabled());
assertThat(paths).hasSize(expectedRepo.size()); assertThat(paths).containsExactlyElementsIn(expectedRepo);
assertNotNull(axis); assertSame(myMonitor.getNetworkUsage().getTrafficRange(), axis.getRange());
assertThat(layeredPane).isSameAs(cursorSettingContainer); assertThat(cursor).isEqualTo(layeredPane.getCursor());
assertEquals("X", xClass.getName()); assertEquals("a.X", xClass.getFqn()); assertSame(aPackage, xClass.getParent()); assertEquals("Y", yClass.getName()); assertEquals("Y", yClass.getFqn()); assertSame(defaultPackage, yClass.getParent());
assertFalse(validator.checkPackage("_abc123 xyz.ABC.ABC"));
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("item1", "item1"), new ValueWithDisplayString("item2", "item2")).inOrder();
assertThat(myStage.getTraceIdsIterator().hasNext()).isFalse(); assertThat(myStage.getTraceIdsIterator().hasPrevious()).isFalse(); assertThat(myStage.getTraceIdsIterator().hasNext()).isTrue(); assertThat(myStage.getTraceIdsIterator().hasPrevious()).isTrue();
assertTrue("[match file path]", matcher.matches()); assertEquals("[source path]", filePath.trim(), matchedPath); assertEquals("[line number]", lineNumber, fields.lineNumber); assertEquals("[column number]", columnNumber, fields.columnNumber);
assertEquals(expected, listener.toString());
assertNull(myPresentation.getDescription()); assertTrue(myPresentation.isEnabled());
assertTrue(myParser.parse(line, myReader, myConsumer)); assertThat(generatedMessages).hasSize(1); assertThat(generatedMessages.get(0)).isInstanceOf(MessageEventImpl.class); assertThat(fileMessageEvent.getResult().getDetails()).isEqualTo(expected);
assertEquals(myDeviceAndSnapshotComboBoxTargetProvider, provider);
assertEquals("Pixel 3 API 29 (Missing system image)", action.getTemplatePresentation().getText());
assertTrue(myController.isProcessStopped());
assertEquals(Collections.singletonList(myDeviceAndSnapshotComboBoxTargetProvider), actualProviders);
assertThat(textProperty.get()).isEqualTo("New Button"); assertThat(listener.getCount()).isEqualTo(0); assertThat(textProperty.get()).isEqualTo("Button text updated directly"); assertThat(listener.getCount()).isEqualTo(1); assertThat(button.getText()).isEqualTo("Button text updated via property"); assertThat(listener.getCount()).isEqualTo(2);
assertThat(count).isEqualTo(3);
assertThat(view1.getListView().getSelectedIndex()).isLessThan(0); assertThat(view2.getListView().getSelectedIndex()).isLessThan(0); assertThat(view1.getListView().getSelectedIndex()).isEqualTo(1); assertThat(view2.getListView().getSelectedIndex()).isLessThan(0); assertThat(view1.getListView().getSelectedIndex()).isLessThan(0); assertThat(view2.getListView().getSelectedIndex()).isEqualTo(2);
assertThat(listener.getCount()).isEqualTo(0);
assertThat(findTab(myView, OverviewTabContent.class).findUrlValue()).isNull(); assertThat(value.getText()).isEqualTo("dumbUrl");
assertEquals(STUDIO_HELP_URL + "test", resolvedUrl);
assertNotNull(dependency); assertEquals("fake", dependency.getName()); assertEquals("compile", dependency.getScope()); assertSame(binaryPath, dependency.getBinaryPath()); assertSame(sourcePath, dependency.getSourcePath()); assertSame(javadocPath, dependency.getJavadocPath()); assertEquals(moduleVersion, dependency.getModuleVersion()); assertTrue(dependency.isResolved());
assertEquals(MultiUserUtils.PRIMARY_USERID, MultiUserUtils.getUserIdFromAmParameters("")); assertEquals(MultiUserUtils.PRIMARY_USERID, MultiUserUtils.getUserIdFromAmParameters(" --user")); assertEquals(MultiUserUtils.PRIMARY_USERID, MultiUserUtils.getUserIdFromAmParameters(" --user 0")); assertEquals(20, MultiUserUtils.getUserIdFromAmParameters(" --user 20"));
assertThat(FileUtil.toSystemIndependentName(actualLocation.toString())).isEqualTo(dpd);
assertEquals("-DenableTranslation=true", GradleUtil.getGradleInvocationJvmArg(BuildMode.ASSEMBLE_TRANSLATE));
assertThat(intReceiver.myInvalidationCount).isEqualTo(1); assertThat(intReceiver.myLastValue).isEqualTo(10); assertThat(intReceiver.myInvalidationCount).isEqualTo(2); assertThat(intReceiver.myLastValue).isEqualTo(20);
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo( String.format("%s - %s", ACTIVITY_NAME, Interaction.ViewData.State.DESTROYED.toString().toLowerCase()));
assertTrue(testJarFile.delete());
assertFalse(validator.checkPackage("._abc123.xyz.ABC.ABC"));
assertThat(FileUtil.toSystemIndependentName(actualLocation.toString())).isEqualTo(rpl);
assertFalse(validator.checkSuperclass("0_abc123_XYZ__"));
assertThat(myCpuService.getSession()).isEqualTo(FAKE_SESSION);
assertThat(myLogcatListener.toString()).isEqualTo(expected);
assertThat(myHighlighter.getHighlightingLexer()).isInstanceOf(SmaliLexerAdapter.class);
assertArrayEquals(buffer, baos.toByteArray());
assertThat(getUniqueName("test", value -> INFO)).isEqualTo("test");
assertThat(list.contains("B")).isTrue(); assertThat(list.contains("X")).isFalse();
assertThat(myStage.getEventMonitor()).isNotNull();
assertEquals("0: Error:The content of elements must consist of well-formed character data or markup.\\n" + "1: Error:Error: The content of elements must consist of well-formed character data or markup.\\n" + "\\t" + sourceFilePath + ":42:-1\\n" + "2: Error:Error: The content of elements must consist of well-formed character data or markup.\\n" + "\\t" + sourceFilePath + ":-1:-1\\n", toString(parser.parseGradleOutput(output)));
assertEquals(0, Messages.size());
assertThat(emulatorSupportsSnapshotManagement(createMockSdk("27.2.4", FD_EMULATOR))).isFalse(); assertThat(emulatorSupportsSnapshotManagement(createMockSdk("27.2.5", FD_EMULATOR))).isTrue();
assertEquals(0, toCheckNode.getChildren().size()); assertEquals(2, toCheckNode.getChildren().size());
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo( String.format("%s - %s", ACTIVITY_NAME, Interaction.ViewData.State.DESTROYED.toString().toLowerCase()));
assertThat(listener.getCount()).isEqualTo(2); assertThat(listener.getCount()).isEqualTo(3); assertThat(list).containsExactly("A", "B", "C");
assertNull(action.getSelectedDevice(myProject));
assertThat(StackTraceExpander.getCauseLine(cause)).isEqualTo(cause.trim());
assertThat(dependencyNames).hasSize(4); assertThat(dependencyNames) .containsExactly("Gradle: library1", "Gradle: library4", "Gradle: library2", "Gradle: library3").inOrder();
assertTrue(validator.checkInterface("_abc123_XYZ_"));
assertThat(list.containsAll(ImmutableSet.of("A", "B", "C"))).isTrue(); assertThat(list.containsAll(ImmutableSet.of("X", "Y", "Z"))).isFalse();
assertFalse(myModel.canAddComponents(myDragged, receiver, null)); assertEquals(ourRoot, result.receiver); assertEquals(ourRoot.getChild(3), result.nextComponent); assertEquals(0, result.depth); assertEquals(5, result.row);
assertEquals(ourRoot, result.receiver); assertEquals(ourRoot.getChild(1), result.nextComponent); assertEquals(0, result.depth); assertEquals(1, result.row);
assertNotNull(monitor); assertTrue(monitor instanceof NetworkMonitor);
assertEquals("Nexus 5X", name);
assertThat(sessionsManager.getSelectedSession().getStartTimestamp()).isEqualTo(traceCreationTime);
assertThat(optStringValue.getValueOrNull()).isNull();
assertThat(findTab(myView, OverviewTabContent.class).findResponsePayloadViewer()).isNull(); assertThat(findTab(myView, OverviewTabContent.class).findResponsePayloadViewer()).isNotNull();
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertEquals(Lists.newArrayList("foo", "bar", "baz"), pathSegments);
assertThat(myLogcatListener.toString()).isEqualTo(expected);
assertArrayEquals(new int[]{0, 248, 526, 558, 590, 622, 654, 686, 717}, actual);
assertThat(mySplitter.isVisible()).isTrue(); assertThat(mySplitter.getFirstComponent()).isEqualTo(myToolWindowComponent1); assertThat(mySplitter.getLastComponent()).isNull(); assertThat(myContainer.getComponents()).asList().containsExactly(myToolWindowComponent2);
assertTrue(myGeneratedSourceFolders.isFolderGeneratedInCorrectLocation(aFolderPath, myAndroidProject)); assertFalse(myGeneratedSourceFolders.isFolderGeneratedInCorrectLocation(bFolderPath, myAndroidProject));
assertThat(common).isEqualTo("c:/usr/one");
assertThat(text.indexOf("123")).isGreaterThan(-1); assertThat(text.indexOf("123")).isLessThan(text.indexOf("apple")); assertThat(text.indexOf("apple")).isLessThan(text.indexOf("border")); assertThat(text.indexOf("border")).isLessThan(text.indexOf("car"));
assertEquals("0: Simple::processFlavor1DebugManifest\\n" + "1: Error:Could not find element /manifest/application.\\n" + "\\t" + sourceFilePath + ":1:-1\\n" + "2: Simple::processFlavor1DebugManifest FAILED\\n" + "3: Simple:FAILURE: Build failed with an exception.\\n", toString(parser.parseGradleOutput(output)));
assertThat(treeWalker.descendantStream().anyMatch(c -> c == panel1)).isTrue();
assertNull(myPresentation.getDescription()); assertTrue(myPresentation.isEnabled());
assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(0).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.INSTALLED, nodes.get(1).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(2).getCurrentState());
assertEquals("Physical Device", name);
assertFalse(ApplicationManager.getApplication().isDispatchThread()); assertTrue(invoked.get());
assertEquals("Pixel 3 API 29 (Missing system image)", text);
assertThat(HttpDataComponentFactory.findPayloadViewer(findTab(myView, RequestTabContent.class).findPayloadBody())).isNull(); assertThat(HttpDataComponentFactory.findPayloadViewer(findTab(myView, RequestTabContent.class).findPayloadBody())).isNotNull();
assertThat(myProfilers.getStage()).isInstanceOf(CpuProfilerStage.class); assertThat(cpuProfilerStage.isImportTraceMode()).isTrue();
assertEquals(RenderClassLoaderTest.class, loader.loadClassFile("com.myjar.MyJarClass", vFile)); assertNull(loader.loadClassFile("com.myjar.MyJarClass", vFile));
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertNotNull(dependency); assertEquals("fake", dependency.getName()); assertNull(dependency.getScope()); assertSame(binaryPath, dependency.getBinaryPath()); assertNull(dependency.getSourcePath()); assertNull(dependency.getJavadocPath()); assertEquals(moduleVersion, dependency.getModuleVersion()); assertFalse(dependency.isResolved());
assertThat(capture.getType()).isEqualTo(Cpu.CpuTraceType.ART); assertThat(capture.getType()).isEqualTo(Cpu.CpuTraceType.SIMPLEPERF); assertThat(capture.getType()).isEqualTo(Cpu.CpuTraceType.ATRACE); assertThat(capture.getType()).isEqualTo(Cpu.CpuTraceType.UNSPECIFIED_TYPE);
assertThat(libraries).containsAllOf(library2, library3);
assertEquals("com.example.android.displayingbitmaps.util.ImageWorker$BitmapWorkerTask", new StackFrameParser(line).getClassName());
assertEquals("com.example.android.displayingbitmaps.util.AsyncTask$2", new StackFrameParser(line).getClassName());
assertFalse(needsExplicitBuildToolsVersion(parse("3.0.0"), parseRevision("27.0.0"), CURRENT_BUILD_TOOLS)); assertFalse(needsExplicitBuildToolsVersion(parse("3.0.0"), parseRevision("27.0.3"), CURRENT_BUILD_TOOLS)); assertFalse(needsExplicitBuildToolsVersion(parse("3.0.0"), parseRevision("26.0.0"), CURRENT_BUILD_TOOLS));
assertThat(relativize(locator.getLicenseFiles(), ideHome)).containsAllIn(expectedPaths);
assertThat(ProxySettings.replaceCommasWithPipesAndClean(TEST_INPUT)).isEqualTo(expected);
assertThat(stage.getLiveAllocationSamplingMode()).isEqualTo(MemoryProfilerStage.LiveAllocationSamplingMode.FULL);
assertThat(definedMethods.size()).isEqualTo(allMethods.size());
assertFalse(myParser.parse(line, myReader, myConsumer));
assertThat("").isEqualTo(myLogcatListener.toString()); assertThat(myLogcatListener.toString()).isEqualTo(expected);
assertThat(stageView.getCaptureInfoMessage().isVisible()).isTrue(); assertThat(stageView.getCaptureInfoMessage().isVisible()).isFalse();
assertTrue(validator.checkPackage("_abc123.xyz.ABC.ABC"));
assertFalse(aPackage.doSubpackagesHaveClasses()); assertFalse(bPackage.doSubpackagesHaveClasses()); assertTrue(aPackage.doSubpackagesHaveClasses()); assertFalse(bPackage.doSubpackagesHaveClasses());
assertThat(ProxySettings.replacePipesWithCommasAndClean(TEST_INPUT)).isEqualTo(expected);
assertThat(intValue.get()).isEqualTo(4);
assertThat(HttpDataComponentFactory.findPayloadViewer(findTab(myView, RequestTabContent.class).findPayloadBody())).isNull();
assertThat(result).isNull();
assertEquals("", myPreferences.LOGCAT_FORMAT_STRING); assertEquals(message, formattedMessage);
assertEquals("Expect one message.", 1, Messages.size()); assertEquals("No resource identifier found for attribute \'a\' in package \'android\'", message.getText()); assertEquals(Message.Kind.ERROR, message.getKind()); assertEquals("/usr/local/google/home/cmw/udacity/Sunshine/app/src/main/res/menu/detail.xml", message.getSourcePath()); assertEquals(new SourcePosition(5, -1, -1), message.getSourceFilePositions().get(0).getPosition());
assertThat(srcValue.get()).isTrue(); assertThat(destValue.get()).isFalse(); assertThat(srcValue.get()).isFalse(); assertThat(destValue.get()).isTrue();
assertEquals(0, pathSegments.size());
assertEquals(STUDIO_HELP_URL + "r/studio-ui/rundebugconfig.html", resolvedUrl);
assertTrue(DeviceRenderer.shouldShowSerialNumbers(devices));
assertTrue(validator.checkPackage("_abc123 .xyz . ABC. ABC"));
assertThat(common).isEqualTo("/usr/one");
assertThat(libraries).isEmpty();
assertThat(handler.getXml(SdkConstants.TEXT_INPUT_LAYOUT.newName(), XmlType.COMPONENT_CREATION)).isEqualTo(expected);
assertThat(result).isNotNull(); assertThat(result).contains("com.example.rpaquay.myapplication");
assertThat(allocations.size()).isEqualTo(1); assertThat(allocations.get(0).getClassTag()).isEqualTo(id); assertThat(allocations.get(0).getSize()).isEqualTo(SIZE); assertThat(allocations.get(0).getThreadId()).isEqualTo(THREAD_ID); assertThat(allocations.get(0).getStackId()).isEqualTo(STACK_ID); assertThat(converter.getAllocationEvents().size()).isEqualTo(0);
assertEquals(adapter, node.getAdapter());
assertThat(stopCpuTrace.getLastTraceInfo()).isEqualTo(Cpu.CpuTraceInfo.getDefaultInstance()); assertThat(stopCpuTrace.getLastTraceInfo()).isNotEqualTo(Cpu.CpuTraceInfo.getDefaultInstance()); assertThat(myCpuService.getStartStopCapturingSession()).isNull(); assertThat(myCpuService.getStartStopCapturingSession()).isEqualTo(FAKE_SESSION);
assertThat(StackTraceExpander.getStackLine(frame)).isEqualTo(frame.trim());
assertEquals(3, model.getSize()); assertEquals(AndroidLogcatView.FAKE_SHOW_ONLY_SELECTED_APPLICATION_FILTER, model.getElementAt(index++)); assertEquals(AndroidLogcatView.NO_FILTERS_ITEM, model.getElementAt(index++)); assertEquals(AndroidLogcatView.EDIT_FILTER_CONFIGURATION_ITEM, model.getElementAt(index++));
assertTrue(myPresentation.isEnabled()); assertEquals("Screen Record", myPresentation.getText());
assertThat(result).isNull();
assertThat(myProxyBytesCache.get(Integer.toString(time1))).isEqualTo(ByteString.EMPTY);
assertThat(intValue.get()).isEqualTo(42); assertThat(intValue.get()).isEqualTo(0);
assertThat(getUniqueName("test", value -> ERROR)).isEqualTo("test100");
assertEquals(INVALID_LINE_NUMBER, new StackFrameParser(line).getLineNumber());
assertThat(DefaultIgnorable.removeDefaultIgnorable("A\\u200EBC\\u200F & 1\\u202C2\\u00013")).isEqualTo("ABC & 123");
assertThat(stage.isImportTraceMode()).isTrue(); assertThat(stage.isImportTraceMode()).isFalse(); assertThat(stage.isImportTraceMode()).isFalse();
assertThat(intValue.get()).isEqualTo(-20);
assertThat(sublist).containsExactly("B", "C");
assertTrue(myInstallerFactory.canHandlePackage(p, myRepoManager, myFileOp));
assertTrue(myParser.parse(line, myReader, myConsumer));
assertEquals("Add a run/debug configuration", myPresentation.getDescription()); assertFalse(myPresentation.isEnabled());
assertThat(myPanel.isVisible()).isTrue(); assertThat(findVisibleComponent()).isSameAs(myToolWindowComponent1); assertThat(findHiddenComponents()).contains(myToolWindowComponent2);
assertEquals("--size 600x400 --bit-rate 6000000 " + expectedPath, ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options)); assertEquals("--time-limit 100 " + expectedPath, ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options)); assertEquals("--time-limit 180 " + expectedPath, ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options));
assertEquals(original, result);
assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(device)).isEqualTo("Manufacturer Model"); assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(deviceWithEmptyManufacturer)).isEqualTo("Model"); assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(deviceWithSerialInModel)).isEqualTo("Manufacturer Model");
assertFalse(ApplicationManager.getApplication().isDispatchThread()); assertTrue(invoked.get());
assertNotNull(image); assertEquals(0, image.getWidth()); assertEquals(0, image.getHeight()); assertNull(image.getCopy());
assertThat(result).isNull();
assertFalse(myInstallerFactory.canHandlePackage(p, myRepoManager, myFileOp));
assertFalse(validator.checkPackage("8_abc123.xyz.ABC.ABC"));
assertEquals("0: Warning:A minor warning\\n" + ":project:app1\\n" + "1: Warning:A|minor|warning\\n" + ":project:app2\\n" + "2: Error:Serious error\\n" + ":project:libs:lib1\\n", toString(parser.parseGradleOutput(output)));
assertNull(path);
assertFalse(StringUtil.containsIgnoreCase(name, "Nexus 4")); assertTrue(StringUtil.containsIgnoreCase(name, "Avdname")); assertTrue(StringUtil.containsIgnoreCase(name, IDevice.DeviceState.BOOTLOADER.toString())); assertTrue(StringUtil.containsIgnoreCase(name, serial));
assertThat(common).isEqualTo("");
assertNull(variant);
assertTrue(action.isSelected(new AnActionEvent(null, dataId -> null, "sdsd", action.getTemplatePresentation(), ActionManager.getInstance(), -1)));
assertEquals("0: Error:The element type \\"error\\" must be terminated by the matching end-tag \\"</error>\\".\\n" + "1: Simple:FAILURE: Build failed with an exception.\\n", toString(messages));
assertFalse(myPresentation.isEnabled()); assertEquals("Screen Record Is Unavailable for Wear OS", myPresentation.getText());
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("item1", "item1"), new ValueWithDisplayString("item2", "item2")).inOrder();
assertThat(treeModelChangeCount[0]).isEqualTo(0); assertThat(treeModelChangeCount[0]).isEqualTo(1);
assertThat(intListener.myInvalidationCount).isEqualTo(0); assertThat(intListener.myInvalidationCount).isEqualTo(1); assertThat(intListener.myInvalidationCount).isEqualTo(1); assertThat(intListener.myInvalidationCount).isEqualTo(2);
assertEquals(target, patcher);
assertThat(myView.getStageView()).isEqualTo(view);
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertEquals(message, formattedMessage);
assertFalse(myModel.canAddComponents(myDragged, receiver, null)); assertEquals(root, result.receiver); assertNull(result.nextComponent); assertEquals(4, result.row); assertEquals(-1, result.depth);
assertThat(definedMethods.size()).isEqualTo(allMethods.size());
assertSame(NUMBER_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertThat(relativize(locator.getLicenseFiles(), ideHome)).containsAllIn(expectedPaths);
assertThat(LexicalIncludePaths.trimPathSeparators("a")).isEqualTo("a"); assertThat(LexicalIncludePaths.trimPathSeparators("/a")).isEqualTo("a"); assertThat(LexicalIncludePaths.trimPathSeparators("a/")).isEqualTo("a"); assertThat(LexicalIncludePaths.trimPathSeparators("/a/")).isEqualTo("a");
assertEquals("p1.p2.c", c.getFqn());
assertThat(result).isNotNull(); assertThat(result.getSimplePackageName()).isEqualTo("folder"); assertThat(result.getRelativeIncludeSubFolder()).isEqualTo("/"); assertThat(result.getIncludeFolder()).isEqualTo(new File("/path/to/folder"));
assertTrue(validator.checkInterface(""));
assertThat(common).isEqualTo("");
assertThat(property1.get()).isEqualTo(20); assertThat(property1.get()).isEqualTo(30); assertThat(property2.get()).isEqualTo(20); assertThat(property1.get()).isEqualTo(40);
assertFalse(myInstallerFactory.canHandlePackage(p, myRepoManager, myFileOp));
assertEquals(2, seriesDataList.size()); assertEquals(333, seriesDataList.get(0).x); assertEquals(111, seriesDataList.get(0).value.longValue()); assertEquals(444, seriesDataList.get(1).x); assertEquals(111, seriesDataList.get(1).value.longValue());
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("display1", "item1"), new ValueWithDisplayString("display2", "item2")).inOrder();
assertFalse(MultiUserUtils.isCurrentUserThePrimaryUser(device, 200, TimeUnit.MILLISECONDS, true)); assertTrue(MultiUserUtils.isCurrentUserThePrimaryUser(device, 200, TimeUnit.MILLISECONDS, false));
assertSame(STRING_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertEquals(String.format(DISPLAY_FORMAT, "Unknown"), INVALID_THREAD_ID.toString()); assertEquals(String.format(DISPLAY_FORMAT, "1"), new ThreadId(1).toString()); assertEquals(String.format(DISPLAY_FORMAT, "TestThread"), new ThreadId("TestThread").toString());
assertFalse(myParser.parse(line, myReader, myConsumer));
assertThat(result).isNull(); assertThat(totalBytesRef.get()).isEqualTo(deviceEntry.getSize()); assertThat(Files.exists(tempFile)).isTrue(); assertThat(tempFile.toFile().length()).isEqualTo(deviceEntry.getSize());
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(count).isEqualTo(5);
assertEquals("LGE Device", name);
assertFalse(myInstallerFactory.canHandlePackage(PATCHER_4, myRepoManager, myFileOp));
assertThat(textProperty.get()).isEqualTo(""); assertThat(listener.getCount()).isEqualTo(0); assertThat(textProperty.get()).isEqualTo("Edit label set directly"); assertThat(listener.getCount()).isEqualTo(1); assertThat(editLabel.getText()).isEqualTo("Edit label updated via property"); assertThat(listener.getCount()).isEqualTo(2);
assertThat(ProfilerLayeredPane.setCursorOnProfilerLayeredPane(button, cursor)).isNull();
assertThat(capture.getTraceId()).isEqualTo(traceId1); assertThat(capture.getTraceId()).isEqualTo(traceId2);
assertEquals("1.3.72", inst.getKotlinVersionForGradle());
assertEquals(Paths.get("/usr/local/google/home/juancnuno/.android/avd/Pixel_2_XL_API_28.avd/tmp.webm"), path);
assertEquals(rootModel, topDown.getMethodModel()); assertEquals("com.package.Class.A", rootModel.getFullName()); assertTrue(model instanceof JavaMethodModel); assertEquals("com.package.Class", ((JavaMethodModel) model).getClassName()); assertEquals("A", model.getName());
assertEquals(1, messages.size()); assertEquals("[message count]", 1, messages.size()); assertNotNull(message); assertEquals("[file path]", expected, getSystemIndependentSourcePath(message)); assertEquals("[message severity]", Message.Kind.ERROR, message.getKind()); assertEquals("[message text]", messageText, message.getText()); assertEquals("[position line]", 4, message.getLineNumber());
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo( String.format("%s - %s - %s", ACTIVITY_NAME, Interaction.ViewData.State.STOPPED.toString().toLowerCase(), Interaction.ViewData.State.DESTROYED.toString().toLowerCase()));
assertThat(myConfiguration.SETUP_ISSUES).containsExactly(issue3);
assertThat(myServices.getNotification()).isNull(); assertThat(myServices.getNotification()).isEqualTo(CpuProfilerNotifications.ATRACE_BUFFER_OVERFLOW);
assertThat(common).isEqualTo("usr/one");
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("id1", "@+id/id1"), new ValueWithDisplayString("id2", "@+id/id2")).inOrder();
assertNotNull(cluster); assertEquals(2, cluster.size()); assertNotNull(cluster2); assertEquals(5, cluster2.size()); assertNotNull(cluster3); assertEquals(4, cluster3.size());
assertEquals("Installed", node.getStatusString()); assertEquals("Partially installed", node.getStatusString()); assertEquals("Installed", node.getStatusString());
assertEquals(testString, AdtUiUtils.shrinkToFit(testString, testMetrics, stringWidth)); assertEquals("", AdtUiUtils.shrinkToFit(testString, testMetrics, ellipsisWidth - 1)); assertEquals("", AdtUiUtils.shrinkToFit(testString, testMetrics, ellipsisWidth)); assertEquals(StringUtil.repeat("A", i) + "...", shrunk);
assertThat(treeWalker.ancestorStream().anyMatch(c -> c == panel12)).isTrue(); assertThat(treeWalker.ancestorStream().anyMatch(c -> c == panel1)).isTrue(); assertThat(treeWalker.ancestorStream().anyMatch(c -> c == panel11)).isFalse(); assertThat(treeWalker.ancestorStream().anyMatch(c -> c == panel13)).isFalse();
assertEquals(1, Messages.size()); assertEquals(output, message.getText()); assertEquals(Message.Kind.SIMPLE, message.getKind());
assertThat(new ConnectedAndroidDevice(emulatorWithNoAvdName, null).getName()).isEqualTo("Google Pixel [My Pixel]");
assertThat(reportedMissingItems.get()).containsExactly(CLASS_FROM_JRE);
assertThat(converter.addCallStack(stackTraceElementList)).isEqualTo(callStack);
assertFalse(validator.checkPackage("_abc123-xyz.ABC.ABC"));
assertThat(findTab(myView, OverviewTabContent.class).findContentTypeValue()).isNull();
assertThat(myModel.requestBytes("invalid id")).isEqualTo(ByteString.EMPTY);
assertTrue(validator.checkSuperclass("_abc123_XYZ__"));
assertEquals(1, Messages.size()); assertEquals(output, message.getText()); assertEquals(Message.Kind.SIMPLE, message.getKind());
assertEquals(SESSION_DATA, myService.getSession());
assertEquals(1, model.getSize()); assertNull(model.getElementAt(0));
assertThat(axis).isNotNull(); assertThat(axis.getRange()).isEqualTo(myStage.getDetailedNetworkUsage().getTrafficRange());
assertEquals(Collections.emptyList(), devices.get(1, TimeUnit.SECONDS));
assertTrue(myParser.parse(line, myReader, myConsumer));
assertThat(myCpuService.getSession()).isEqualTo(FAKE_SESSION);
assertEquals(1, GridInfo.getIndex(lineLocatoin, 380, true)); assertEquals(2, GridInfo.getIndex(lineLocatoin, 600, true)); assertEquals(8, GridInfo.getIndex(lineLocatoin, 380, false)); assertEquals(-1, GridInfo.getIndex(lineLocatoin, 50, true)); assertEquals(-1, GridInfo.getIndex(lineLocatoin, 800, true));
assertThat(counter.myRunCount).isEqualTo(0); assertThat(counter.myRunCount).isEqualTo(1); assertThat(counter.myRunCount).isEqualTo(2); assertThat(counter.myRunCount).isEqualTo(3); assertThat(counter.myRunCount).isEqualTo(4);
assertFalse(ApplicationManager.getApplication().isDispatchThread());
assertThat(listener.getCount()).isEqualTo(1); assertThat(list).containsExactly("A", "B", "C");
assertThat(treeWalker.descendantStream(TreeWalker.DescendantOrder.DEPTH_FIRST).collect(Collectors.toList())). containsExactly(panelRoot, panel1, panel11, panel111, panel112, panel2, panel3, panel31, panel32).inOrder();
assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(0).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.INSTALLED, nodes.get(1).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(2).getCurrentState());
assertThat(editableProperty.get()).isTrue(); assertThat(listener.getCount()).isEqualTo(0); assertThat(editableProperty.get()).isFalse(); assertThat(listener.getCount()).isEqualTo(1); assertThat(field.isEditable()).isTrue(); assertThat(listener.getCount()).isEqualTo(2);
assertTrue(task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter).getSuccess());
assertThat(sessionImportedSuccessfully).isTrue(); assertThat(myProfilerService.getLastImportedSessionType()).isEqualTo(Common.SessionMetaData.SessionType.CPU_CAPTURE);
assertThat(result).isNull(); assertThat(totalBytesRef.get()).isEqualTo(deviceEntry.getSize()); assertThat(Files.exists(tempFile)).isTrue(); assertThat(tempFile.toFile().length()).isEqualTo(deviceEntry.getSize());
assertTrue(new DeviceComparator().compare(device1, device2) < 0);
assertThat(handler.getXml(SdkConstants.BOTTOM_APP_BAR, XmlType.COMPONENT_CREATION)).isEqualTo(expected); assertThat(handler.getXml(SdkConstants.BOTTOM_APP_BAR, XmlType.DRAG_PREVIEW)).isEqualTo(expected);
assertThat(myStage.getTimeline().isStreaming()).isFalse(); assertThat(myStage.getTimeline().isStreaming()).isTrue();
assertEquals(29, frozenColumnTable.getRowHeight());
assertTrue(new DeviceComparator().compare(device1, device2) < 0);
assertTrue(MultiUserUtils.hasMultipleUsers(device, 200, TimeUnit.MILLISECONDS, false)); assertFalse(MultiUserUtils.hasMultipleUsers(device, 200, TimeUnit.MILLISECONDS, true)); assertFalse(MultiUserUtils.hasMultipleUsers(device, 200, TimeUnit.MILLISECONDS, true));
assertThat(myPanel.isVisible()).isTrue(); assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1); assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2); assertThat(findHiddenComponents()).isEmpty();
assertThat(myPanel.isVisible()).isFalse(); assertThat(findHiddenComponents()).containsAllOf(myToolWindowComponent1, myToolWindowComponent2);
assertNull(path);
assertFalse(result.isSuccess());
assertThat(listener.getCount()).isEqualTo(0); assertThat(listener.getCount()).isEqualTo(3);
assertThat(series1.getY(i)).isEqualTo(i); assertThat(series2.getY(i)).isEqualTo(i);
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(myPanel.isVisible()).isTrue(); assertThat(splitter).isNotNull(); assertThat(splitter.getFirstComponent()).isEqualTo(myToolWindowComponent1); assertThat(splitter.getSecondComponent()).isEqualTo(myToolWindowComponent2); assertThat(findHiddenComponents()).containsNoneOf(myToolWindowComponent1, myToolWindowComponent2);
assertFalse(validator.checkSuperclass("_abc123,XYZ_"));
assertEquals(Collections.singletonList(expectedDevice), actualDevices);
assertThat(optStringValue.get().isPresent()).isTrue();
assertTrue(indicator.onCancelInvoked);
assertThat(GradleUtil.getAllParentModulesPaths(":foo:buz")).containsExactly(":foo"); assertThat(GradleUtil.getAllParentModulesPaths(":foo")).isEmpty(); assertThat(GradleUtil.getAllParentModulesPaths(":")).isEmpty(); assertThat(GradleUtil.getAllParentModulesPaths(":foo:bar:buz:lib")).containsExactly(":foo", ":foo:bar", ":foo:bar:buz");
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(findTab(myView, OverviewTabContent.class).findContentTypeValue()).isNull(); assertThat(value.getText()).isEqualTo("111");
assertThat(validatePackageName(repeat("A", 200))).isEqualTo("Package name is too long");
assertEquals(1, seriesData.size()); assertNotNull(systemUsageData); assertEquals(60, (long)systemUsageData.value); assertEquals(1, seriesData.size()); assertNotNull(systemUsageData); assertEquals(100, (long)systemUsageData.value); assertEquals(1, seriesData.size()); assertNotNull(systemUsageData); assertEquals(0, (long)systemUsageData.value);
assertThat(childA.getParent()).isEqualTo(realParent); assertThat(realParent.getChildAt(0)).isEqualTo(childA); assertThat(childA.getParent()).isEqualTo(realParent); assertThat(realParent.getChildAt(0)).isEqualTo(childA); assertThat(visualParent.getChildAt(0)).isEqualTo(childA);
assertTrue(e.getMessage().contains("magic number mismatch"));
assertEquals(data, table.getData());
assertTrue(new DeviceComparator().compare(device1, device2) < 0);
assertEquals(":foo", GradleUtil.getParentModulePath(":foo:buz")); assertEquals(":foo:bar", GradleUtil.getParentModulePath(":foo:bar:buz")); assertEquals("", GradleUtil.getParentModulePath(":"));
assertEquals(0, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(10000, myTimeline.getViewRange().getMax(), EPSILON); assertEquals(0 + delta * 0.5, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(10000 - delta * 0.5, myTimeline.getViewRange().getMax(), EPSILON);
assertEquals(ourRoot.getChild(2), result.receiver); assertEquals(ourRoot.getChild(2).getChild(0), result.nextComponent); assertEquals(1, result.depth); assertEquals(3, result.row);
assertThat(transformed.get()).isEqualTo("10"); assertThat(transformed.get()).isEqualTo("20");
assertEquals(ourRoot.getChild(3), result.receiver); assertNull(result.nextComponent); assertEquals(0, result.depth); assertEquals(COMPONENT_NUMBER - 1, result.row);
assertThat(mySplitter.isVisible()).isTrue(); assertThat(mySplitter.getFirstComponent()).isNull(); assertThat(mySplitter.getLastComponent()).isEqualTo(myToolWindowComponent1); assertThat(myContainer.getComponents()).asList().containsExactly(myToolWindowComponent2);
assertEquals("Pixel 3 API 29 (Missing system image)", action.getTemplatePresentation().getText());
assertThat(validatePackageName(null)).isEqualTo("Package name is missing");
assertThat(myStage.getCaptureState()).isEqualTo(CpuProfilerStage.CaptureState.CAPTURING); assertThat(myStage.getCaptureState()).isEqualTo(CpuProfilerStage.CaptureState.IDLE);
assertThat(myPanel.isVisible()).isFalse(); assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1); assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2); assertThat(findHiddenComponents()).isEmpty();
assertNull(patcher);
assertTrue(myPresentation.isEnabled());
assertThat(textProperty.get()).isEqualTo("New Label"); assertThat(listener.getCount()).isEqualTo(0); assertThat(textProperty.get()).isEqualTo("Label text updated directly"); assertThat(listener.getCount()).isEqualTo(1); assertThat(label.getText()).isEqualTo("Label text updated via property"); assertThat(listener.getCount()).isEqualTo(2);
assertTrue(new DeviceComparator().compare(device1, device2) < 0);
assertThat(optStringValue.get().isPresent()).isFalse();
assertFalse(validator.checkSuperclass("_abc123-XYZ__"));
assertThat(result).isNull(); assertThat(totalBytesRef.get()).isEqualTo(1024);
assertEquals(String.format("%s %s Android %s, API %s", StringUtil.capitalizeWords(manufacturer, false), StringUtil.capitalizeWords(model, false), buildVersion, apiLevel), name); assertFalse(StringUtil.containsIgnoreCase(name, IDevice.DeviceState.ONLINE.toString())); assertFalse(StringUtil.containsIgnoreCase(name, serial));
assertSame(BRACES_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertThat(listener.getCount()).isEqualTo(0); assertThat(listener.getCount()).isEqualTo(1);
assertEquals(data, result);
assertThat(myHandler.getXml(SdkConstants.FLOATING_ACTION_BUTTON.defaultName(), XmlType.COMPONENT_CREATION)).isEqualTo( "<android.support.design.widget.FloatingActionButton\\n" + " android:src=\\"@android:drawable/ic_input_add\\"\\n" + " android:layout_width=\\"wrap_content\\"\\n" + " android:layout_height=\\"wrap_content\\"\\n" + " android:clickable=\\"true\\" />\\n");
assertTrue(myParser.parse(line, myReader, myConsumer));
assertNull(myStageView.getStage().getSelectedConnection()); assertNull(myStageView.getStage().getSelectedConnection()); assertNotNull(myStageView.getStage().getSelectedConnection()); assertNotNull(myStageView.getStage().getSelectedConnection());
assertEquals("", invalidFinder.getDefaultUrl());
assertFalse(myPresentation.isEnabled());
assertTrue(task.run(myExecutor, myDevice, myLaunchStatus, myPrinter).getSuccess());
assertThat(treeModelChanged[0]).isTrue(); assertThat(treeModelChanged[0]).isFalse();
assertSame(JAVA_IDENTIFIER_ATTR_KEYS, myHighlighter.getTokenHighlights(JAVA_IDENTIFIER));
assertFalse(myPresentation.isEnabled());
assertEquals(0, myComparator.compare(a, a)); assertEquals(0, myComparator.compare(a, b));
assertFalse(myPresentation.isEnabled()); assertEquals("Screen Record", myPresentation.getText());
assertThat(axis).isNotNull(); assertThat(axis.getRange()).isEqualTo(myStage.getDetailedNetworkUsage().getConnectionsRange());
assertThat(jars).isEmpty();
assertFalse(myInstallerFactory.canHandlePackage(p, myRepoManager, myFileOp));
assertTrue(GradleUtil.useCompatibilityConfigurationNames(GradleVersion.parse("2.3.2"))); assertFalse(GradleUtil.useCompatibilityConfigurationNames((GradleVersion)null)); assertFalse(GradleUtil.useCompatibilityConfigurationNames(GradleVersion.parse("3.0.0-alpha1"))); assertFalse(GradleUtil.useCompatibilityConfigurationNames(GradleVersion.parse("3.0.0"))); assertFalse(GradleUtil.useCompatibilityConfigurationNames(GradleVersion.parse("4.0.0")));
assertThat(myComparator.compare(a, b)).isLessThan(0); assertThat(myComparator.compare(b, a)).isGreaterThan(0);
assertThat(treeWalker.descendantStream().filter(c -> c instanceof JLabel).findFirst().get()).isEqualTo(label); assertThat(treeWalker.descendantStream().filter(c -> c instanceof JButton).findFirst().get()).isEqualTo(button); assertThat(treeWalker.descendantStream().filter(c -> c instanceof JTextField).findFirst().get()).isEqualTo(textField); assertThat(treeWalker.descendantStream().anyMatch(c -> c instanceof JTable)).isFalse();
assertNull(myStage.getSelectedInstanceObject()); assertFalse(component.isVisible());
assertThat(intListener.myInvalidationCount).isEqualTo(1); assertThat(intListener.myInvalidationCount).isEqualTo(2);
assertTrue("[match file path]", matcher.matches()); assertEquals("[source path]", filePath.trim(), matchedPath); assertEquals("[line number]", lineNumber, fields.lineNumber); assertEquals("[column number]", columnNumber, fields.columnNumber);
assertThat(callStack.hashCode()).isEqualTo(stackTraceElementList.hashCode());
assertThat(treeWalker.ancestorStream().collect(Collectors.toList())).containsExactly(panel3, panel2, panel1).inOrder();
assertThat(result).isNull();
assertEquals("LGE Nexus 5X [00fff9d2279fa601]", action.getTemplatePresentation().getText());
assertEquals(Collections.emptyList(), actual);
assertFalse(DeviceRenderer.shouldShowSerialNumbers(devices));
assertFalse(validator.checkInterface("a-b"));
assertFalse(validator.checkPackage("_abc123,xyz.ABC.ABC"));
assertThat(myStage.getTimeline().isStreaming()).isFalse();
assertEquals("1.3.72", inst.getKotlinVersionForGradle());
assertThat(sessionsManager.getSelectedSession().getStartTimestamp()).isEqualTo(traceCreationTime); assertThat(sessionsManager.getSelectedSession().getStartTimestamp()).isNotEqualTo(traceCreationTime); assertThat(sessionsManager.getSelectedSession().getStartTimestamp()).isEqualTo(traceCreationTime);
assertNull(myGetter.getChecker());
assertThat(myStage.getStudioProfilers().isAgentAttached()).isTrue(); assertThat(selection.getMin()).isWithin(EPSILON).of(0); assertThat(selection.getMax()).isWithin(EPSILON).of(100); assertThat(myStage.getStudioProfilers().isAgentAttached()).isFalse(); assertThat(selection.getMin()).isWithin(EPSILON).of(0); assertThat(selection.getMax()).isWithin(EPSILON).of(100);
assertEquals("Receiving", networkLegends.getRxLegend().getName()); assertEquals("2 B/s", networkLegends.getRxLegend().getValue()); assertEquals("Sending", networkLegends.getTxLegend().getName()); assertEquals("1 B/s", networkLegends.getTxLegend().getValue()); assertEquals(2, legends.size()); assertEquals("Sending", legends.get(0).getName()); assertEquals("Receiving", legends.get(1).getName());
assertNull(JavaModuleDependency.copy(myIdeaProject, myOriginalDependency));
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("id1", "@+id/id1"), new ValueWithDisplayString("id2", "@+id/id2"), new ValueWithDisplayString("@+id/parent", "@+id/parent"), new ValueWithDisplayString("parent", "parent")).inOrder();
assertTrue("[match file path]", matcher.matches()); assertEquals("[source path]", filePath.trim(), matchedPath); assertEquals("[line number]", lineNumber, fields.lineNumber); assertEquals("[column number]", columnNumber, fields.columnNumber);
assertNull(JavaModuleDependency.copy(myIdeaProject, myOriginalDependency));
assertArrayEquals(new int[]{0, 248, 496, 528, 560, 592, 624, 656, 688, 717}, actual);
assertThat(LexicalIncludePaths.matchFolderToRegex(Pattern.compile("/.*"), new File("\\\\header.h")).matches()).isTrue(); assertThat(LexicalIncludePaths.matchFolderToRegex(Pattern.compile("/.*"), new File("/header.h")).matches()).isTrue();
assertThat(mappings).hasSize(2); assertThat(mappings).containsEntry("a1.so", "b1.so"); assertThat(mappings).containsEntry("a2.so", "b2.so");
assertFalse(myFilter.include(mockEntry(true)));
assertSame(KEYWORD_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertEquals(Arrays.asList("action", "alert"), actual);
assertThat(myCpuProfiler.getTraceFile(session1)).isEqualTo(trace1); assertThat(myCpuProfiler.getTraceFile(session2)).isEqualTo(trace2);
assertThat(capture.isDualClock()).isTrue(); assertThat(capture.isDualClock()).isFalse();
assertEquals("Not applicable for the \\"ExampleUnitTest\\" configuration", myPresentation.getDescription()); assertFalse(myPresentation.isEnabled());
assertThat(myPanel.isVisible()).isTrue(); assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1); assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2); assertThat(findHiddenComponents()).isEmpty();
assertThat(result).isNull();
assertThat(DefaultIgnorable.removeDefaultIgnorable("abc & 123")).isEqualTo("abc & 123"); assertThat(DefaultIgnorable.removeDefaultIgnorable("\\t\\r\\n")).isEqualTo("\\t\\r\\n");
assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(0).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(1).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.INSTALLED, nodes.get(2).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(3).getCurrentState());
assertThat(converter.addClassName(CLASS_NAME)).isEqualTo(id); assertThat(classes.size()).isEqualTo(1); assertThat(classes.get(0).getClassName()).isEqualTo(CLASS_NAME); assertThat(classes.get(0).getClassId()).isEqualTo(id);
assertEquals(ourRoot, result.receiver); assertNull(result.nextComponent); assertEquals(-1, result.depth); assertEquals(COMPONENT_NUMBER - 1, result.row);
assertThat(myTooltipLabel.getText()).isEqualTo(text);
assertThat(sliderValue.get()).isEqualTo(50); assertThat(listener.getCount()).isEqualTo(0); assertThat(sliderValue.get()).isEqualTo(90); assertThat(listener.getCount()).isEqualTo(1); assertThat(slider.getValue()).isEqualTo(10); assertThat(listener.getCount()).isEqualTo(2);
assertEquals(0, invalidFinder.getAllUrls().size());
assertEquals(Snapshot.quickboot(myFileSystem), snapshot);
assertSame(EMPTY_KEYS, myHighlighter.getTokenHighlights(mock(IElementType.class)));
assertNull(GradleUtil.getGradleInvocationJvmArg(null));
assertThat(libraries).isEmpty();
assertThat(myView.isVisible()).isTrue();
assertThat(result).isNotNull(); assertThat(result.getSimplePackageName()).isEqualTo("Native App Glue"); assertThat(result.getRelativeIncludeSubFolder()).isEqualTo("/sources/android/native_app_glue/"); assertThat(result.getIncludeFolder()).isEqualTo(new File("/path/to/ndk-bundle/sources/android/native_app_glue"));
assertThat(myModel.requestBytes("dummyid").toStringUtf8()).isEqualTo("Dummy Contents");
assertThat(stringValue.get()).isEqualTo("Goodbye");
assertThat(boolValue.get()).isEqualTo(true); assertThat(boolValue.get()).isEqualTo(false);
assertEquals("Pixel 3 API 29 - Snapshot", action.getTemplatePresentation().getText());
assertFalse(validator.checkPackage("_abc123.xyz.ABC.ABC."));
assertEquals("0: Error:A problem occurred evaluating project \':project\'.\\n" + "> Could not find method ERROR() for arguments [{plugin=android}] on project \':project\'.\\n" + "\\t" + sourceFilePath + ":9:1\\n" + "1: Info:BUILD FAILED\\n" + "2: Info:Total time: 18.303 secs\\n", toString(messages));
assertThat(g.getColor(TestStates.A)).isEqualTo(COLOR_A_0); assertThat(g.getColor(TestStates.B)).isEqualTo(COLOR_B_0); assertThat(g.getColor(TestStates.C)).isEqualTo(COLOR_C_0);
assertEquals(expected, listener.toString());
assertThat(selectedProperty.get()).isTrue(); assertThat(listener.getCount()).isEqualTo(0); assertThat(selectedProperty.get()).isFalse(); assertThat(listener.getCount()).isEqualTo(1); assertThat(checkbox.isSelected()).isTrue(); assertThat(listener.getCount()).isEqualTo(2);
assertThat(findTab(myView, OverviewTabContent.class).findSizeValue()).isNull(); assertThat(value.getText()).isEqualTo("222 B");
assertSame(PARENTHESES_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertEquals(INVALID_LINE_NUMBER, new StackFrameParser(line).getLineNumber());
assertThat(a.get()).isEqualTo(30); assertThat(b.get()).isEqualTo(30); assertThat(c.get()).isEqualTo(30); assertThat(a.get()).isEqualTo(-100); assertThat(b.get()).isEqualTo(-100); assertThat(c.get()).isEqualTo(-100); assertThat(a.get()).isEqualTo(9); assertThat(b.get()).isEqualTo(9); assertThat(c.get()).isEqualTo(9);
assertThat(Quantity.parse("9999999999999999dp")).isNull(); assertThat(Quantity.parse("rio")).isNull();
assertThat(myView.isVisible()).isFalse();
assertThat(list.indexOf("B")).isEqualTo(1); assertThat(list.get(2)).isEqualTo("C"); assertThat(list.lastIndexOf("B")).isEqualTo(3);
assertThat(myPropertiesComponent.getInt(TOOL_WINDOW_PROPERTY_PREFIX + "BENCH.PALETTE.UNSCALED.WIDTH", -1)).isEqualTo(700); assertThat(mySplitter.getFirstSize()).isEqualTo(JBUI.scale(700));
assertFalse(validator.checkSuperclass("_abc123_XYZ _"));
assertThat(getUniqueName("test", value -> WARNING)).isEqualTo("test");
assertEquals(new Snapshot(directory, "My Snapshot"), snapshot);
assertTrue("[match file path]", matcher.matches()); assertEquals("[source path]", filePath.trim(), matchedPath); assertEquals("[line number]", lineNumber, fields.lineNumber); assertEquals("[column number]", columnNumber, fields.columnNumber);
assertEquals(Collections.singletonList(connectedDevice), connectedDevices.get(1, TimeUnit.SECONDS));
assertThat(result).isNull();
assertFalse(myParser.parse(line, myReader, myConsumer));
assertEquals(ourRoot.getChild(3).getChild(1), result.receiver); assertNull(result.nextComponent); assertEquals(1, result.depth); assertEquals(8, result.row);
assertThat(error).isNotNull(); assertThat(error).isInstanceOf(AdbShellCommandException.class); assertThat(error.getMessage()).isEqualTo("cp: /system/build.prop: Read-only file system");
assertThat(myMainContent.getBounds()).isEqualTo(new Rectangle(0, 0, 800, 600)); assertThat(mySplitter.getBounds()).isEqualTo(new Rectangle(0, 0, 800, 600));
assertEquals(Collections.emptyList(), MaterialDesignIcons.getCategories(null));
assertEquals(1, Messages.size()); assertEquals(output, message.getText()); assertEquals(Message.Kind.SIMPLE, message.getKind());
assertTrue(myParser.parse(line, myReader, myConsumer)); assertFalse(myParser.parse(detailLine, myReader, myConsumer)); assertThat(generatedMessages).hasSize(1); assertThat(generatedMessages.get(0)).isNotInstanceOf(FileMessageEvent.class); assertThat(messageEvent.getGroup()).isEqualTo("D8 warnings"); assertThat(messageEvent.getKind()).isEqualTo(MessageEvent.Kind.WARNING); assertThat(messageEvent.getResult().getDetails()).isEqualTo("Warning message.");
assertNull(node.getParent()); assertEquals(parent, node.getParent());
assertThat(factory).isInstanceOf(PatchInstallerFactory.class); assertThat(factory).isInstanceOf(BasicInstallerFactory.class);
assertThat(myPanel.isVisible()).isFalse(); assertThat(findVisibleComponents(Split.TOP)).isEmpty(); assertThat(findVisibleComponents(Split.BOTTOM)).isEmpty(); assertThat(findHiddenComponents()).isEmpty();
assertThat(tracker.getLastCaptureDetailsType()).isNull(); assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.CALL_CHART); assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.FLAME_CHART); assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.TOP_DOWN); assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.BOTTOM_UP);
assertFalse(myPresentation.isEnabled());
assertThat(dataList).hasSize(1); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo(FRAGMENT_NAME);
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertFalse(myScrollbar.isScrollable()); assertEquals(-100, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(200, myTimeline.getViewRange().getMax(), EPSILON);
assertEquals(target, patcher);
assertThat(dependencies).containsExactlyElementsIn(Arrays.asList(dependency1, dependency2));
assertThat(common).isEqualTo("usr/one/two");
assertThat(g.getColor(TestStates.A)).isEqualTo(COLOR_A_0); assertThat(g.getColor(TestStates.B)).isEqualTo(COLOR_B_0); assertThat(g.getColor(TestStates.C)).isEqualTo(COLOR_C_0);
assertThat(mySupport.getAllValues()).containsExactly( new ValueWithDisplayString("id1", "@+id/id1"), new ValueWithDisplayString("id2", "@+id/id2"), new ValueWithDisplayString("parent", "parent")).inOrder();
assertThat(data.getJavaThreads()).hasSize(2); assertThat(findTab(myView, OverviewTabContent.class).findOtherThreadsValue()).isNotNull();
assertEquals("NETWORK", myMonitor.getName());
assertThat(mySideModel.getProject()).isSameAs(myProject);
assertEquals(LogLevel.DEBUG, header.getLogLevel()); assertEquals("dalvikvm", header.getTag());
assertEquals( " type=EMULATED diskId=null partGuid=null mountFlags=0 mountUserId=-1 ", myFormatter.formatMessage("+ type=EMULATED diskId=null partGuid=null mountFlags=0 mountUserId=-1 "));
assertThat(stringValue.get()).isEqualTo("");
assertThat(stackFramesChangedCount[0]).isEqualTo(0); assertThat(stackTraceView.getModel().getCodeLocations()).hasSize(0); assertThat(stackFramesChangedCount[0]).isEqualTo(1); assertThat(stackTraceView.getModel().getCodeLocations()).isEqualTo(stackTrace.getCodeLocations());
assertEquals(root, result.receiver); assertNull(result.nextComponent); assertEquals(0, result.depth); assertEquals(2, result.row);
assertThat(stackTrace.getTrace()).isEqualTo(data.getTrace()); assertThat(stackTrace.getCodeLocations()).hasSize(1); assertThat(modeChanged[0]).isFalse(); assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.EXPANDED); assertThat(modeChanged[0]).isTrue(); assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.NORMAL);
assertEquals(24, font.getSize());
assertNotNull(mySeries); assertFalse(mySeries.getDataForRange(ANY_RANGE).isEmpty()); assertTrue(mySeries.getDataForRange(ANY_RANGE).isEmpty());
assertNull(snapshot);
assertThat(optStringValue.getValue()).isEqualTo("Hello"); assertThat(optStringValue.get().isPresent()).isEqualTo(false);
assertSame(KEYWORD_ATTR_KEYS, myHighlighter.getTokenHighlights(tokenType));
assertThat(handler.getXml(SdkConstants.TEXT_INPUT_LAYOUT.oldName(), XmlType.COMPONENT_CREATION)).isEqualTo(expected);
assertThat(optStringValue.getValueOr("Default")).isEqualTo("Default"); assertThat(optStringValue.get().isPresent()).isFalse(); assertThat(optStringValue.getValueOr("Default")).isEqualTo("Not Default"); assertThat(optStringValue.get().isPresent()).isTrue();
assertThat(treeWalker.ancestorStream().anyMatch(c -> c == panel12)).isTrue();
assertThat(optStringValue.getValue()).isEqualTo("Goodbye");
assertEquals(node, argument.getValue().getSource());
assertFalse(myController.isProcessStopped());
assertThat(getUniqueName("test", value -> OK)).isEqualTo("test");
assertThat(myPanel.isVisible()).isTrue(); assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1); assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2); assertThat(findHiddenComponents()).isEmpty();
assertThat(personProperty.get()).isEqualTo(person1); assertThat(optionalPersonProperty.getValue()).isEqualTo(person2);
assertThat(mockRepaint.myRunCount).isEqualTo(0); assertThat(mockRepaint.myRunCount).isEqualTo(0); assertThat(mockRepaint.myRunCount).isEqualTo(1); assertThat(mockRepaint.myRunCount).isEqualTo(2);
assertFalse(action.isSelected(new AnActionEvent(null, dataId -> null, "sdsd", action.getTemplatePresentation(), ActionManager.getInstance(), -1)));
assertEquals(dataList.size(), 1); assertEquals(event.x, TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS)); assertEquals(event.value.getStartUs(), TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS)); assertEquals(event.value.getEndUs(), TimeUnit.NANOSECONDS.toMicros(TEST_END_TIME_NS)); assertEquals(event.value.getType(), UserEvent.TOUCH);
assertThat(boolValue.get()).isEqualTo(true);
assertThat(result).isNotNull(); assertThat(result.getSimplePackageName()).isEqualTo("include"); assertThat(result.getRelativeIncludeSubFolder()).isEqualTo("/third_party/include/"); assertThat(result.getIncludeFolder()).isEqualTo(new File("/path/to/third_party/include"));
assertThat(result).containsExactly(matchedClassInstance, matchedInnerClassInstance);
assertTrue(myParser.parse(line, myReader, myConsumer)); assertFalse(myParser.parse(detailLines[0], myReader, myConsumer)); assertFalse(myParser.parse(detailLines[1], myReader, myConsumer)); assertTrue(myParser.parse(detailLines[2], myReader, myConsumer)); assertFalse(myParser.parse(detailLines[3], myReader, myConsumer));
assertThat(AdbPathUtil.getFileName("")).isEqualTo(""); assertThat(AdbPathUtil.getFileName("/")).isEqualTo(""); assertThat(AdbPathUtil.getFileName("/foo")).isEqualTo("foo"); assertThat(AdbPathUtil.getFileName("/foo/bar")).isEqualTo("bar"); assertThat(AdbPathUtil.getFileName("/foo/blah/bar-test.txt")).isEqualTo("bar-test.txt");
assertEquals("LGE Nexus 5X", name);
assertEquals("Emulator emulator-5554 Android 4.2, API 17", name);
assertThat(result).isNull();
assertNull(patcher);
assertTrue(component.isVisible());
assertEquals(1, Messages.size()); assertEquals(output, message.getText()); assertEquals(Message.Kind.SIMPLE, message.getKind());
assertFalse(myPresentation.isEnabled());
assertThat(LexicalIncludePaths.hasHeaderExtension("header")).isTrue(); assertThat(LexicalIncludePaths.hasHeaderExtension("header.h")).isTrue(); assertThat(LexicalIncludePaths.hasHeaderExtension("header.inl")).isTrue(); assertThat(LexicalIncludePaths.hasHeaderExtension("header.cpp")).isFalse();
assertThat(myLogcatListener.toString()).isEqualTo(expected);
assertThat(myTable.getSelectedItem()).isNull(); assertThat(myTable.getSelectedItem()).isSameAs(myEmptyItem);
assertSame(myProfilers.getStage().getClass(), NullMonitorStage.class); assertThat(myProfilers.getStage(), instanceOf(NetworkProfilerStage.class));
assertThat(optStringValue.get().isPresent()).isFalse();
assertThat(result).isNull();
assertThat(myStage.getStudioProfilers().getStage()).isEqualTo(myStage); assertThat(myStage.getStudioProfilers().getStage().getClass()).isAssignableTo(CpuCaptureStage.class);
assertFalse(validator.checkInterface("8a"));
assertThat(myProfilers.getStage()).isInstanceOf(StudioMonitorStage.class); assertThat(points.size()).isEqualTo(4); assertThat(myProfilers.getStage()).isInstanceOf(CpuProfilerStage.class); assertThat(myProfilers.getStage()).isInstanceOf(MemoryProfilerStage.class); assertThat(myProfilers.getStage()).isInstanceOf(NetworkProfilerStage.class); assertThat(myProfilers.getStage()).isInstanceOf(EnergyProfilerStage.class);
assertSame(debugVariant, variant);
assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); assertThat(captor.getAllValues()).hasSize(1);
assertThat(getProjectLocationParent().getName()).isEqualTo(IdeInfo.getInstance().isAndroidStudio() ? "AndroidStudioProjects" : "IntelliJIDEAProjects");
assertEquals("0: Error:A problem occurred configuring project \':EpicMix\'.\\n" + "> Failed to notify project evaluation listener.\\n" + " > A problem occurred configuring project \':facebook\'.\\n" + " > Failed to notify project evaluation listener.\\n" + " > java.lang.OutOfMemoryError: PermGen space\\n" + "1: Info:BUILD FAILED\\n" + "2: Info:Total time: 24.154 secs\\n", toString(parser.parseGradleOutput(output)));
assertNull(myIdeaJarLibraryDependencyFactory.create(myOriginalDependency));
assertThat(result).isNull(); assertThat(totalBytesRef.get()).isEqualTo(deviceEntry.getSize()); assertThat(Files.exists(tempFile)).isTrue(); assertThat(tempFile.toFile().length()).isEqualTo(deviceEntry.getSize());
assertThat(definedMethods.size()).isEqualTo(allMethods.size());
assertTrue(new DeviceComparator().compare(device1, device2) < 0);
assertEquals(0 + delta, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(5000 + delta, myTimeline.getViewRange().getMax(), EPSILON); assertEquals(0 + delta * 3, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(5000 + delta * 3, myTimeline.getViewRange().getMax(), EPSILON); assertEquals(0, myTimeline.getViewRange().getMin(), EPSILON); assertEquals(5000, myTimeline.getViewRange().getMax(), EPSILON);
assertFalse(component.isVisible());
assertEquals(1, seriesDataList.size()); assertEquals(222, seriesDataList.get(0).x); assertEquals(111, seriesDataList.get(0).value.longValue());
assertEquals("Google Nexus 4 123 Android 4.2, API 17", name);
assertThat(myStage.getCapture()).isNull(); assertThat(myStage.getCapture()).isNotNull(); assertThat(myStage.getCapture()).isEqualTo(capture);
assertFalse(task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter).getSuccess());
assertThat(new ConnectedAndroidDevice(emulatorWithNoAvdName, null).getName()).isEqualTo("Google Pixel [local:5554]");
assertEquals("com.example.android.displayingbitmaps.util.ImageFetcher", new StackFrameParser(line).getClassName());
assertTrue(locked);
assertThat(signature.length, Matchers.lessThanOrEqualTo(72));
assertEquals(5, e.getTriesRemaining()); assertEquals(PinMode.USER, e.getPinMode()); assertFalse(neo.isUserUnlocked());
assertEquals(expectedPubKey, pubKey);
assertEquals(5, e.getTriesRemaining()); assertEquals(PinMode.ADMIN, e.getPinMode()); assertFalse(neo.isAdminUnlocked());
assertEquals("0.1.0", neo.getAppletVersion());
assertEquals(expectedHeader, header);
assertThat(addition.handles('+')).isTrue(); assertThat(addition.handles('/')).isFalse();
assertThat(service.find("1234")).isEmpty();
assertThat(handler.echo(msg)).isEqualTo("RECEIVED: " + msg);
assertThat(addition.apply(2, 2)).isEqualTo(4); assertThat(addition.apply(12, 88)).isEqualTo(100);
assertThat(addition.apply(2, 2)).isEqualTo(4); assertThat(addition.apply(12, 10)).isEqualTo(120);
assertThat(addition.handles('*')).isTrue(); assertThat(addition.handles('/')).isFalse();
assertThat(addition.handles('*')).isTrue(); assertThat(addition.handles('/')).isFalse();
assertThat(addition.handles('+')).isTrue(); assertThat(addition.handles('/')).isFalse();
assertThat(service.find("1234")).isEmpty();
assertThat(job.conf.get("es.net.ssl.keystore.location")).isEqualTo("file:keystore.jks"); assertThat(job.conf.get("es.net.ssl.keystore.pass")).isEqualTo("superSecret"); assertThat(job.conf.get("es.net.ssl.truststore.location")).isEqualTo("file:truststore.jks"); assertThat(job.conf.get("es.net.ssl.truststore.pass")).isEqualTo("secretSuper");
assertThat(job.conf.get("es.net.http.auth.user")).isEqualTo("foo"); assertThat(job.conf.get("es.net.http.auth.pass")).isEqualTo("bar");
assertThat(new Date(date)) .hasYear(2013) .hasMonth(5) .hasDayOfMonth(15) .hasHourOfDay(0) .hasMinute(0) .hasSecond(0) .hasMillisecond(0);
assertThat(parsePort("1.1.1.1:9142")) .isEqualTo("9142");
assertThat(parsePort("1.1.1.1:9143,2.2.2.2")) .isEqualTo("9042");
assertThat(parsePort("1.1.1.1")) .isEqualTo("9042");
assertThat(parseHosts("1.1.1.1:9142")) .isEqualTo("1.1.1.1");
assertThat(parseHosts("1.1.1.1:9143,2.2.2.2:9143")) .isEqualTo("1.1.1.1,2.2.2.2");
assertThat(parsePort("1.1.1.1:9143,2.2.2.2:9143")) .isEqualTo("9143");
assertEquals("SELECT a, b FROM mytable", select.toString());
assertEquals("SELECT * FROM mytable", select.toString());
assertEquals("SELECT a FROM mytable LEFT JOIN mytable2 ON a = b", select.toString());
assertEquals("a + b", result.toString()); assertTrue(result instanceof Addition); assertTrue(add.getLeftExpression() instanceof Column); assertTrue(add.getRightExpression() instanceof Column);
assertEquals("SELECT a + b, test FROM mytable", select.toString()); assertTrue(((SelectExpressionItem)((PlainSelect)select.getSelectBody()).getSelectItems().get(0)).getExpression() instanceof Addition);
assertEquals("2 * (a + 6.0)", result.toString()); assertTrue(result instanceof Multiplication); assertTrue(mult.getLeftExpression() instanceof LongValue); assertTrue(mult.getRightExpression() instanceof Parenthesis);
assertEquals("a + b > 5 AND c < 3", result.toString());
assertEquals("SELECT a, b FROM mytable", select.toString()); assertEquals("SELECT a, b, 5 + 6 FROM mytable", select.toString());
assertEquals("success", result);
assertEquals("success", result);
assertFalse(KafkaOffsetManagerUtils.isValidOffsetMap(tap));
assertTrue(KafkaOffsetManagerUtils.isValidOffsetMap(tap));
assertFalse(KafkaOffsetManagerUtils.isValidOffsetMap(tap));
assertFalse(KafkaOffsetManagerUtils.isValidOffsetMap(tap));
assertThat(results.size(), is(1));
assertThat(artifactDirectory, DirectoryMatcher.contains("testArtifactId-testVersion.jar", "testArtifactId-testVersion.pom"));
assertThat(artifactDirectory, DirectoryMatcher.contains("testArtifactId-testVersion.jar", "testArtifactId-testVersion.pom"));
assertThat(artifacts.size(), is(5));
assertThat(results.size(), is(2));
assertThat(results.size(), is(5));
assertTrue(debugOutput.contains("0. SAFE {S}")); assertTrue(debugOutput.contains("1. NULL {N}")); assertTrue(debugOutput.contains("2. UNKNOWN {U}")); assertTrue(debugOutput.contains("3. TAINTED {T}")); assertTrue(debugOutput.contains("| "+variable));
assertTrue(debugOutput.contains("0. SAFE {S}")); assertTrue(debugOutput.contains("1. NULL {N}")); assertTrue(debugOutput.contains("2. UNKNOWN {U}")); assertTrue(debugOutput.contains("3. TAINTED {T}"));
assertTrue(debugOutput.contains("0. SAFE {S")); assertTrue(debugOutput.contains("1. NULL {N}")); assertTrue(debugOutput.contains("2. UNKNOWN {U")); assertTrue(debugOutput.contains("3. TAINTED {T}")); assertTrue(debugOutput.contains("12345678")); assertTrue(debugOutput.contains("PASSWORD_VARIABLE")); assertTrue(debugOutput.contains("H@rdC0deStr1ng"));
assertTrue(debugOutput.contains("0. SAFE {S}")); assertTrue(debugOutput.contains("1. NULL {N}")); assertTrue(debugOutput.contains("2. UNKNOWN {U}")); assertTrue(debugOutput.contains("3. TAINTED {T}")); assertTrue(debugOutput.contains("| "+variable));
assertTrue(debugOutput.contains("field[taintedField]")); assertTrue(debugOutput.contains("method[returnFrom]")); assertTrue(debugOutput.contains("parameter[2]"));
assertEquals("UTF-8", response.getCharacterEncoding()); assertEquals("{\\"basePath\\":\\"/service1\\"}", context.getResponseBody());
assertTrue(filter.shouldFilter());
assertTrue(filter.shouldFilter());
assertFalse(filter.shouldFilter());
assertTrue(Types.toBoolean(null, 1)); assertFalse(Types.toBoolean(null, 0)); assertFalse(Types.toBoolean(null, null)); assertFalse(Types.toBoolean(null, "")); assertTrue(Types.toBoolean(null, "0")); assertTrue(Types.toBoolean(null, "1")); assertTrue(Types.toBoolean(null, "2"));
assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext());
assertEquals("null", ArrayUtils.toString(null)); assertEquals("[]", ArrayUtils.toString(new Object[] {})); assertEquals("[1]", ArrayUtils.toString(new Object[] { 1 })); assertEquals("[1, 2]", ArrayUtils.toString(new Object[] { 1, 2 })); assertEquals("[null]", ArrayUtils.toString(new Object[] { null })); assertEquals("[a, 1, null]", ArrayUtils.toString(new Object[] { "a", 1, null }));
assertEquals(10, Ops.and(null, 1, 10)); assertEquals(1, Ops.and(null, 10, 1)); assertEquals(10, Ops.and(null, 10, 10)); assertEquals(null, Ops.and(null, null, 10)); assertEquals(0, Ops.and(null, 0, 10)); assertEquals(null, Ops.and(null, 10, null)); assertEquals(0, Ops.and(null, 10, 0));
assertThat(SUCCESS_WITH_OTHER_VALUE.attemptRecover(mockAttemptRecoverValueFunction), equalTo(SUCCESS_WITH_OTHER_VALUE));
assertThat(resultRepositoryPresenter.getItemId(STRING, 0), is(STABLE_ID));
assertThat(Functions.<Integer>resultListAsList().apply(FAILURE_LIST), is((empty())));
assertThat(updatable, wasUpdated());
assertThat(databaseUpdateFunction(databaseSupplier) .apply(sqlUpdateRequest() .table(TABLE) .column("column", "value4") .where("column=?") .arguments("value3") .compile()).get(), is(1));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededMap(mockValueFunction), sameInstance(FAILURE_WITH_THROWABLE));
assertThat(repository, has(LIST_AND_OTHER_LIST));
assertThat(Functions.<Integer>resultListAsList().apply(ABSENT_LIST), is((empty())));
assertThat(any(mockConditionFalse), is(sameInstance(mockConditionFalse)));
assertThat(SUCCESS_WITH_OTHER_VALUE.contains(VALUE), is(false));
assertThat(resultRepositoryPresenter.getItemCount(STRING_RESULT), is(1));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMerge(STRING_VALUE, mockAttemptMerger), sameInstance((Result) FAILURE_WITH_THROWABLE));
assertThat(Result.<Integer>absentIfNull(null), sameInstance(ABSENT));
assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION) .apply(sqlRequest() .sql(SQL_QUERY) .compile()).get(), contains("value1", "value2", "value3"));
assertThat(not(mockConditionFalse), applies());
assertThat(FAILURE_WITH_THROWABLE.attemptRecover(mockAttemptRecoverValueFunction), equalTo(SUCCESS_WITH_VALUE));
assertThat(httpFunction().apply(HTTP_PUT_WITH_BODY_REQUEST), is(notNullValue())); assertThat(outputStream.toByteArray(), is(REQUEST_BODY));
assertThat(function.apply(inputList), contains("for", "some", "strings", "testing")); assertThat(inputList, is(INPUT_LIST));
assertThat(SUCCESS_WITH_VALUE.ifSucceededBindFrom(mockSupplier, mockBinder), sameInstance(SUCCESS_WITH_VALUE));
assertThat(predicateAsCondition(mockPredicateFalse, mockValueSupplier), doesNotApply());
assertThat(fineGrained, is(true));
assertThat(not(not(mockConditionFalse)), is(sameInstance(mockConditionFalse)));
assertThat(function.apply(INPUT_LIST), contains(4, 7, 3, 7));
assertThat(updatable, wasUpdated());
assertThat(repositoryAdapter.getItemId(1), is(11L + STATIC_ITEM_COUNT));
assertThat(resultListRepositoryPresenter.getLayoutResId(STRING_LIST_RESULT, 1), is(DYNAMIC_LAYOUT_ID));
assertThat(functionAsSupplier(mockFunction, ITEM), gives(RETURN_ITEM));
assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(EMPTY_BODY));
assertThat(SUCCESS_WITH_OTHER_VALUE.ifSucceededMap(mockValueFunction), equalTo(SUCCESS_WITH_VALUE));
assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));
assertThat(all(mockConditionTrue, mockConditionTrue), applies());
assertThat(successfulHttpResponse.getBodyString().get(), is(BODY_STRING));
assertThat(resultListRepositoryPresenter.getItemId(STRING_LIST_RESULT, 0), is(STABLE_ID));
assertThat(any(mockConditionTrue, mockConditionFalse), applies());
assertThat(successfulHttpResponse.getHeaderFieldValue("absentfield").isAbsent(), is(true));
assertThat(identityMultimap.addKeyValuePair(KEY_1, VALUE_1), is(false));
assertThat(updatable, wasUpdated());
assertThat(httpFunction() .apply(HTTP_PUT_REQUEST), is(notNullValue()));
assertThat(databaseInsertFunction(databaseSupplier) .apply(sqlInsertRequest() .table(INVALID_TABLE) .emptyColumn("column") .compile()).getFailure(), instanceOf(SQLException.class));
assertThat(trueCondition(), applies());
assertThat(compositeObservable(), notNullValue());
assertThat(httpFunction() .apply(HTTP_POST_REQUEST), is(notNullValue()));
assertThat(repositoryAdapter.getItemViewType(8), is(42));
assertThat(FAILURE_WITH_THROWABLE.failureOrNull(), sameInstance(THROWABLE));
assertThat(repositoryAdapter.getItemViewType(4), is(34));
assertThat(updatable, wasUpdated());
assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));
assertThat(sqlDatabaseSupplier.get().get(), instanceOf(SQLiteDatabase.class));
assertThat(updatable, wasNotUpdated()); assertThat(repository, has(INITIAL_STRING_VALUE));
assertThat(resultListRepositoryPresenter.getItemCount(LIST_FAILURE), is(0));
assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION) .apply(sqlRequest() .sql(SQL_QUERY_FOR_ARGUMENT) .arguments("value2").compile()).get(), contains("value2"));
assertThat(staticFunction(INPUT_STRING).apply(new Object()), is(sameInstance(INPUT_STRING)));
assertThat(updatable, wasUpdated()); assertThat(scheduler.getCurrentTime(), greaterThanOrEqualTo(expectedDelayedTime));
assertThat(SUCCESS_WITH_VALUE.recover(mockRecoverValueFunction), equalTo(VALUE));
assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));
assertThat(fineGrained, is(true));
assertThat(repository, has(LIST));
assertThat(repository, has(LIST));
assertThat(SUCCESS_WITH_VALUE.succeeded(), equalTo(true));
assertThat(databaseInsertFunction(databaseSupplier) .apply(sqlInsertRequest() .table(TABLE) .column("column", "value") .compile()).succeeded(), is(true));
assertThat(listRepositoryPresenter.getItemCount(STRING_LIST), is(STRING_LIST.size()));
assertThat(databaseInsertFunction(FAILURE) .apply(sqlInsertRequest() .table(TABLE) .column("column", "value") .compile()).failed(), is(true));
assertThat(repository, has(LIST_PLUS_TWO));
assertThat(databaseDeleteFunction(FAILURE) .apply(sqlDeleteRequest() .table(TABLE) .where("column=?") .arguments("value2") .compile()).failed(), is(true));
assertThat(SUCCESS_WITH_VALUE, equalTo(success(VALUE)));
assertThat(PRESENT_WITH_VALUE.isAbsent(), equalTo(false));
assertThat(fineGrained, is(true));
assertThat(updatable, wasNotUpdated());
assertThat(updatable, wasUpdated());
assertThat(databaseDeleteFunction(databaseSupplier) .apply(sqlDeleteRequest() .table(INVALID_TABLE) .compile()).getFailure(), instanceOf(SQLException.class));
assertThat(SUCCESS_WITH_VALUE.orElse(OTHER_VALUE), equalTo(VALUE));
assertThat(repository, has(INT_VALUE));
assertThat(Functions.<Integer>resultAsList().apply(ABSENT), is((empty())));
assertThat(resultListRepositoryPresenter.getLayoutResId(STRING_LIST_RESULT, 1), is(DYNAMIC_LAYOUT_ID));
assertThat(repository, has(LIST_PLUS_TWO));
assertThat(httpFunction().apply(HTTP_GET_REQUEST_WITH_HEADERS), is(notNullValue()));
assertThat(Functions.<String>resultListAsList().apply(PRESENT_WITH_LIST), is(INPUT_LIST));
assertThat(falseCondition(), doesNotApply());
assertThat(resultListRepositoryPresenter.getItemId(STRING_LIST_RESULT, 1), is(STABLE_ID));
assertThat(sqlDatabaseSupplier.get().failed(), is(true));
assertThat(function.apply(inputList), contains(3, 4, 7, 7));
assertThat(SUCCESS_WITH_VALUE.orNull(), equalTo(VALUE));
assertThat(function.apply(new ArrayList<String>()), sameInstance(Collections.<String>emptyList()));
assertThat(returnValue, is(false));
assertThat(repositoryAdapter.getItemViewType(1), is(2));
assertThat(FAILURE_WITH_THROWABLE.orElse(OTHER_VALUE), equalTo(OTHER_VALUE));
assertThat(any(mockConditionFalse, mockConditionFalse), doesNotApply());
assertThat(identityMultimap.addKeyValuePair(KEY_1, VALUE_1), is(true));
assertThat(httpResponse.getResponseCode(), is(200)); assertThat(httpResponse.getResponseMessage(), is("message"));
assertThat(updatable, wasNotUpdated()); assertThat(repository, has(INITIAL_VALUE));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMap(mockSucceededValueFunction), sameInstance(FAILURE_WITH_THROWABLE));
assertThat(function.apply(INPUT_STRING), contains('n', 'n'));
assertThat(updatable, wasNotUpdated());
assertThat(resultRepositoryPresenter.getItemCount(FAILURE), is(0));
assertThat(fineGrained, is(false));
assertThat(identityMultimap.removeKey(new Object()), is(false));
assertThat(databaseUpdateFunction(databaseSupplier) .apply(sqlUpdateRequest() .table(INVALID_TABLE) .emptyColumn("column") .compile()).getFailure(), instanceOf(SQLException.class));
assertThat(databaseDeleteFunction(databaseSupplier) .apply(sqlDeleteRequest() .table(TABLE) .compile()).get(), is(3));
assertThat(SUCCESS_WITH_OTHER_VALUE.ifSucceededAttemptMap(mockSucceededValueFunction), equalTo(SUCCESS_WITH_VALUE));
assertThat(resultRepositoryPresenter.getItemCount(FAILURE), is(0));
assertThat(databaseUpdateFunction(databaseSupplier) .apply(sqlUpdateRequest() .table(TABLE) .column("column", "value4") .compile()).get(), is(3));
assertThat(predicateAsCondition(mockPredicateTrue, mockValueSupplier), applies());
assertThat(updatable, wasUpdated());
assertThat(SUCCESS_WITH_VALUE.get(), equalTo(VALUE));
assertThat(supplierAsFunction(mockSupplier).apply(new Object()), is(sameInstance(INPUT_STRING)));
assertThat(fineGrained, is(true)); assertThat(fineGrained, is(true)); assertThat(fineGrained, is(true));
assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));
assertThat(resultListRepositoryPresenter.getItemCount(STRING_LIST_RESULT), is(STRING_LIST.size()));
assertThat(SUCCESS_WITH_VALUE.ifSucceededMergeFrom(mockSupplier, mockMerger), equalTo(SUCCESS_WITH_FLOAT_VALUE));
assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));
assertThat(SUCCESS_WITH_VALUE.failed(), equalTo(false));
assertThat(FAILURE.getFailure(), notNullValue());
assertThat(new TestRepositoryPresenter().getItemId(new Object(), 0), is(RecyclerView.NO_ID));
assertThat(absentIfNull(VALUE), equalTo(PRESENT_WITH_VALUE));
assertThat(staticSupplier(ITEM), gives(ITEM));
assertThat(repositoryAdapter.getItemId(0), is(10L + STATIC_ITEM_COUNT));
assertThat(resultListRepositoryPresenter.getItemCount(LIST_FAILURE), is(0));
assertThat(resultRepositoryPresenter.getItemId(STRING_LIST, 1), is(STABLE_ID));
assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));
assertThat(SUCCESS_WITH_VALUE.failureOrNull(), nullValue());
assertThat(function.apply(INPUT_LIST), contains(4, 7, 3));
assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));
assertThat(updatable, wasUpdated()); assertThat(repository, has(STRING_VALUE));
assertThat(FAILURE.isAbsent(), equalTo(false));
assertThat(updatable, wasNotUpdated()); assertThat(repository, has(INITIAL_VALUE));
assertThat(repository(1), has(1));
assertThat(ABSENT.isPresent(), equalTo(false));
assertThat(databaseQueryFunction(FAILURE, CURSOR_STRING_FUNCTION) .apply(sqlRequest() .sql(SQL_QUERY_FOR_ARGUMENT) .arguments("value2") .compile()).failed(), is(true));
assertThat(all(mockConditionFalse), is(sameInstance(mockConditionFalse)));
assertThat(Functions.<String>identityFunction().apply(INPUT_STRING), is(sameInstance(INPUT_STRING)));
assertThat(SUCCESS_WITH_VALUE.orAttemptGetFrom(mockOtherValueSuccessfulAttemptSupplier), sameInstance(SUCCESS_WITH_VALUE));
assertThat(Functions.<Integer>itemAsList().apply(VALUE), contains(VALUE));
assertThat(updatable, UpdatableUpdated.wasNotUpdated());
assertThat(databaseDeleteFunction(databaseSupplier) .apply(sqlDeleteRequest() .table(TABLE) .where("column=?") .arguments("value2") .compile()).get(), is(1));
assertThat(all(mockConditionTrue, mockConditionFalse), doesNotApply());
assertThat(function.apply(INPUT_STRING), contains('i', 'n', 'p', 'u', 't', 'i', 'n'));
assertThat(updatable, wasUpdated()); assertThat(repository, has(STRING_VALUE));
assertThat(SUCCESS_WITH_VALUE.ifSucceededSendTo(mockReceiver), sameInstance(SUCCESS_WITH_VALUE));
assertThat(failedResponse.getResponseMessage(), is(FAILED_RESPONSE_MESSAGE));
assertThat(identityFunction(), is(sameInstance(identityFunction())));
assertThat(SUCCESS_WITH_VALUE.contains(VALUE), is(true));
assertThat(httpFunction() .apply(HTTP_DELETE_REQUEST), is(notNullValue()));
assertThat(ABSENT.failureOrNull(), instanceOf(NullPointerException.class));
assertThat(resultRepositoryPresenter.getItemId(STRING, 0), is(STABLE_ID));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMergeFrom(mockSupplier, mockAttemptMerger), sameInstance((Result) FAILURE_WITH_THROWABLE));
assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION) .apply(sqlRequest() .sql(INVALID_QUERY) .compile()).getFailure(), instanceOf(SQLException.class));
assertThat(databaseUpdateFunction(FAILURE) .apply(sqlUpdateRequest() .table(TABLE) .column("column", "value4") .where("column=?") .arguments("value3") .compile()).failed(), is(true));
assertThat(updatable, wasNotUpdated());
assertThat(updatable, wasNotUpdated()); assertThat(repository, has(INITIAL_STRING_VALUE));
assertThat(fineGrained, is(true));
assertThat(listRepositoryPresenter.getItemId(STRING_LIST, 0), is(STABLE_ID));
assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMerge(STRING_VALUE, mockAttemptMerger), equalTo(SUCCESS_WITH_FLOAT_VALUE));
assertThat(ABSENT.isAbsent(), equalTo(true));
assertThat(repository, has(LIST_PLUS_TWO));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededMergeFrom(mockSupplier, mockMerger), sameInstance((Result) FAILURE_WITH_THROWABLE));
assertThat(FAILURE.asList(), is((empty())));
assertThat(failure(), equalTo(failure()));
assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMap(mockFailedFunction), equalTo(FAILURE_WITH_THROWABLE));
assertThat(repositoryAdapter.onCreateViewHolder(viewGroup, LAYOUT_ID).itemView, is(view));
assertThat(listRepositoryPresenter.getItemCount(STRING_LIST), is(STRING_LIST.size()));
assertThat(resultRepositoryPresenter.getItemId(STRING, 0), is(STABLE_ID));
assertThat(repository, has(LIST));
assertThat(Functions.<Integer>resultAsList().apply(PRESENT_WITH_VALUE), contains(VALUE));
assertThat(not(mockConditionTrue), doesNotApply());
assertThat(updatable, UpdatableUpdated.wasNotUpdated());
assertThat(resultRepositoryPresenter.getItemCount(STRING_RESULT), is(1));
assertThat(resultRepositoryPresenter.getItemId(STRING, 0), is(STABLE_ID));
assertThat(FAILURE_WITH_THROWABLE.ifSucceededMerge(STRING_VALUE, mockMerger), sameInstance((Result) FAILURE_WITH_THROWABLE));
assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMergeFrom(mockSupplier, mockAttemptMerger), equalTo(SUCCESS_WITH_FLOAT_VALUE));
assertThat(httpResponse.header.size(), is(2)); assertThat(httpResponse.header, hasEntry("name", "value")); assertThat(httpResponse.header, hasEntry("name2", "value2"));
assertThat(repositoryAdapter.getItemCount(), is(10));
assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));
assertThat(FAILURE_WITH_THROWABLE.orAttemptGetFrom(mockOtherValueSuccessfulAttemptSupplier), sameInstance(SUCCESS_WITH_OTHER_VALUE));
assertThat(function.apply(INPUT_STRING), is(10));
assertThat(FAILURE_WITH_THROWABLE.recover(mockRecoverValueFunction), equalTo(VALUE));
assertThat(fineGrained, is(true));
assertThat(failedResponse.getResponseCode(), is(FAILED_RESPONSE_CODE));
assertThat(fineGrained, is(true));
assertThat(FAILURE_WITH_THROWABLE.orNull(), nullValue());
assertThat(repositoryAdapterWithoutStatic.getItemId(0), is(10L));
assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));
assertThat(fineGrained, is(true)); assertThat(fineGrained, is(true)); assertThat(fineGrained, is(true));
assertThat(httpResponse.getResponseMessage(), is(""));
assertThat(function.apply(INPUT_LIST), is(14));
assertThat(FAILURE.failureOrNull(), notNullValue());
assertThat(updatable, wasUpdated()); assertThat(repository, has(STRING_VALUE));
assertThat(repositoryAdapter.getItemId(i), is(i - 4L));
assertThat(PRESENT_WITH_VALUE.isPresent(), equalTo(true));
assertThat(fineGrained, is(false));
assertThat(FAILURE_WITH_THROWABLE.orGetFrom(mockOtherValueSupplier), equalTo(OTHER_VALUE));
assertThat(successfulHttpResponse.getResponseMessage(), is(SUCCESSFUL_RESPONSE_MESSAGE));
assertThat(resultListRepositoryPresenter.getItemCount(STRING_LIST_RESULT), is(STRING_LIST.size()));
assertThat(SUCCESS_WITH_VALUE.ifFailedSendTo(mockThrowableReceiver), sameInstance(SUCCESS_WITH_VALUE));
assertThat(SUCCESS_WITH_VALUE.ifSucceededBind(STRING_VALUE, mockBinder), sameInstance(SUCCESS_WITH_VALUE));
assertThat(function.apply(INPUT_LIST), Matchers.<Integer>emptyIterable());
assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));
assertThat(ABSENT.contains(VALUE), is(false));
assertThat(Functions.<Integer>resultAsList().apply(FAILURE), is((empty())));
assertThat(ABSENT.asList(), is((empty())));
assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION) .apply(sqlRequest() .sql(NON_MATCHING_SQL_QUERY) .compile()).get(), empty());
assertThat(httpFunction().apply(HTTP_POST_WITH_BODY_REQUEST), is(notNullValue())); assertThat(outputStream.toByteArray(), is(REQUEST_BODY));
assertThat(listRepositoryPresenter.getItemId(STRING_LIST, 1), is(STABLE_ID));
assertThat(httpFunction().apply(HTTP_DELETE_REQUEST).getFailure(), instanceOf(ProtocolException.class));
assertThat(SUCCESS_WITH_VALUE.ifSucceededMerge(STRING_VALUE, mockMerger), equalTo(SUCCESS_WITH_FLOAT_VALUE));
assertThat(repositoryAdapter.getItemViewType(0), is(1));
assertThat(failedResult().apply(throwable).getFailure(), is(throwable));
assertThat(FAILURE_WITH_THROWABLE.failed(), equalTo(true));
assertThat(FAILURE_WITH_THROWABLE.succeeded(), equalTo(false));
assertThat(updatable, wasNotUpdated()); assertThat(repository, has(INITIAL_STRING_VALUE));
assertThat(FAILURE_WITH_THROWABLE.orAttemptGetFrom(mockOtherValueFailingAttemptSupplier), sameInstance(FAILURE));
assertThat(successfulHttpResponse.getResponseCode(), is(SUCCESSFUL_RESPONSE_CODE));
assertThat(SUCCESS_WITH_VALUE.orGetFrom(mockOtherValueSupplier), equalTo(VALUE));
assertThat(httpResponse.header.size(), is(1)); assertThat(httpResponse.header, hasEntry("name2", "value2"));
assertThat(httpFunction() .apply(HTTP_GET_REQUEST), is(notNullValue()));
assertThat(updatable, wasUpdated());
assertThat(updatable, wasNotUpdated());
assertEquals(3, rows.size()); assertThat(rows, hasItems(similarityResult(0, 1, true, false))); assertThat(rows, hasItems(similarityResult(1, 0, true, true))); assertThat(rows, hasItems(similarityResult(2, 0, true, true)));
assertEquals(2, weightedInputs.length);
assertArrayEquals(new double[]{Double.POSITIVE_INFINITY, 2.0, 4.0}, actuals, 0.01);
assertEquals(asList(0L, 0L, 0L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertEquals(0.0, similarityResult.similarity, 0.01);
assertEquals(1, weightedInputs.length);
assertEquals(asList(0L, 0L, 0L), new OneHotEncoding().oneHotEncoding(values, null));
assertEquals(Collections.emptyList(), new OneHotEncoding().oneHotEncoding(null, null));
assertEquals(asList(1L, 0L, 1L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertArrayEquals(new double[0], actuals, 0.01);
assertEquals(asList(1L, 1L, 1L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(asList(0L, 0L, 1L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertArrayEquals(new double[]{1.0, 2.0, 3.0, 4.0}, Weights.buildWeights(weightList), 0.01);
assertEquals(7, result.item1); assertEquals(3, result.item2); assertEquals(3, result.count1); assertEquals(4, result.count2); assertEquals(3, result.intersection); assertEquals(1.0, result.similarity, 0.01);
assertEquals(asList(1L, 0L, 0L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(0.0, similarityResult.similarity, 0.01);
assertEquals(10.0, histogram.getValueAtPercentile(100D), 0.01); assertEquals(8.0, histogram.getValueAtPercentile(50D), 0.01);
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(2, rows.size()); assertThat(rows, hasItems(similarityResult(0, 1, false, false))); assertThat(rows, hasItems(similarityResult(0, 2, false, false)));
assertEquals(3, rows.size()); assertThat(rows, hasItems(similarityResult(0, 1, true, false))); assertThat(rows, hasItems(similarityResult(0, 2, true, false))); assertThat(rows, hasItems(similarityResult(1, 2, true, false)));
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(1.0, similarityResult.similarity, 0.01);
assertArrayEquals(new double[]{ Double.POSITIVE_INFINITY, 2.0, 2.0, Double.POSITIVE_INFINITY, 2.0, 4.0, Double.POSITIVE_INFINITY, 2.0, 6.0}, actuals, 0.01);
assertEquals(6, LouvainUtils.normalize(communities)); assertArrayEquals(new int[]{0, 1, 2, 3, 4, 5}, communities);
assertEquals(1, LouvainUtils.normalize(communities)); assertArrayEquals(new int[]{0, 0, 0, 0}, communities);
assertEquals(4, rows.size()); assertThat(rows, hasItems(similarityResult(0, 2, false, false))); assertThat(rows, hasItems(similarityResult(1, 2, false, false))); assertThat(rows, hasItems(similarityResult(2, 3, false, false))); assertThat(rows, hasItems(similarityResult(3, 2, false, false)));
assertEquals(4, rows.size()); assertThat(rows, hasItems(similarityResult(5, 6, false, false))); assertThat(rows, hasItems(similarityResult(5, 7, false, false))); assertThat(rows, hasItems(similarityResult(6, 7, false, false))); assertThat(rows, hasItems(similarityResult(7, 6, false, false)));
assertEquals(1.0, similarityResult.similarity, 0.01);
assertArrayEquals(new double[]{ 7.0, Double.POSITIVE_INFINITY, 2.0, 2.0, Double.POSITIVE_INFINITY, 2.0, 4.0, Double.POSITIVE_INFINITY, 2.0, 6.0, 7.0}, actuals, 0.01);
assertArrayEquals(new double[]{ Double.POSITIVE_INFINITY, 2.0, 2.0, Double.POSITIVE_INFINITY, 4.0, 4.0, Double.POSITIVE_INFINITY, 2.0, 6.0}, actuals, 0.01);
assertEquals(3, rows.size()); assertThat(rows, hasItems(similarityResult(5, 6, false, false))); assertThat(rows, hasItems(similarityResult(6, 7, false, false))); assertThat(rows, hasItems(similarityResult(7, 6, false, false)));
assertEquals(1, rows.size()); assertThat(rows, hasItems(similarityResult(1, 0, false, false)));
assertArrayEquals(new double[]{7.0, 2.0, 2.0, 4.0, 4.0, 6.0, 6.0, 7.0}, actuals, 0.01);
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(5, LouvainUtils.normalize(communities)); assertArrayEquals(new int[]{0, 1, 2, 3, 4, 3, 0}, communities);
assertNull(result);
assertEquals(0.0, similarityResult.similarity, 0.01);
assertArrayEquals(new double[]{ Double.POSITIVE_INFINITY, 5.0, Double.NaN}, actuals, 0.01);
assertEquals(2, rows.size()); assertThat(rows, hasItems(similarityResult(1, 0, false, false))); assertThat(rows, hasItems(similarityResult(3, 0, false, false)));
assertEquals(1, weightedInputs.length);
assertEquals(0.0, similarityResult.similarity, 0.01);
assertEquals(1.0, similarityResult.similarity, 0.01);
assertEquals(asList(0L, 0L, 0L), new OneHotEncoding().oneHotEncoding(values, selectedValues));
assertEquals(4.0, histogram.getValueAtPercentile(100D), 0.01);
assertThat(error.get()).hasMessage("failed");
assertThat(list).containsExactly("1", "4", "9");
assertThat(engine.buildCompletion(graph)).isNotNull();
assertThat(list).containsExactly("1", "2", "3");
assertThat(list).containsExactly("1", "4", "9");
assertThat(list).hasSize(5).containsExactly(1, 2, 3, 4, 5);
assertThat(list).hasSize(10);
assertThat(wrapped).isNotNull();
assertThat(list).containsExactly("1", "4", "9"); assertThat(squares).containsExactly(1, 4, 9); assertThat(strings).containsExactly("1", "4", "9");
assertThat(engine.buildPublisher(graph)).isNotNull();
assertThat(optional).contains(6);
assertThat(list).hasSize(5).containsExactly(6, 7, 8, 9, 10);
assertThat(list).containsExactly("1", "1", "2", "2", "3", "3");
assertThat(result).isEqualTo(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10); assertThat(list).hasSize(10);
assertThat(cancellationReference1.get()).isFalse(); assertThat(subscriptionReference.get()).isNotNull(); assertThat(cancellationReference1.get()).isFalse(); assertThat(cancellationReference2.get()).isTrue(); assertThat(subscriptionReference.get()).isNotNull();
assertThat(list).hasSize(5).containsExactly(1, 2, 3, 4, 5);
assertThat(list).isEmpty(); assertThat(cancelled).isTrue();
assertThat(optional).contains(6);
assertThat(list).containsExactly(1, 2, 3); assertThat(res).contains(25); assertThat(empty).isEmpty();
assertThat(list).hasSize(5).containsExactly(2, 4, 6, 8, 10);
assertThat(list).containsExactly(1, 2, 3); assertThat(res).contains(25); assertThat(empty).isEmpty(); assertThat(e).hasMessageContaining("Boom");
assertThat(list).containsExactly("1", "1", "2", "2", "3", "3");
assertThat(engine.buildCompletion(graph)).isNotNull();
assertThat(list).hasSize(5).containsExactly(6, 7, 8, 9, 10);
assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
assertThat(subject.getDisplaySeconds(0)).isEqualTo("0"); assertThat(subject.getDisplaySeconds(1)).isEqualTo("1"); assertThat(subject.getDisplaySeconds(999)).isEqualTo("1"); assertThat(subject.getDisplaySeconds(1000)).isEqualTo("1"); assertThat(subject.getDisplaySeconds(1001)).isEqualTo("2"); assertThat(subject.getDisplaySeconds(100000)).isEqualTo("100");
assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull(); assertThat(result).isFalse();
assertThat(subject.getNumberOfZigzags()).isEqualTo(0); assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0); assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
assertThat(positioning.getFixedPositions()).containsOnly(5); assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
assertThat(subject.isSmsAvailable(context)).isFalse();
assertThat(taskHeader).isNotNull(); assertThat(taskHeader.getName()).isEqualTo(CUSTOM_SELECTOR.getKey()); assertThat(taskHeader.getValue()).isEqualTo(expectedHeaderValue);
assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser"); assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras); assertThat(intentForResult.requestCode).isEqualTo(100);
assertThat(subject.getDeviceLocale()).isNull();
assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.INSTALLED).build());
assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), null)).isNull(); assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), defaultAdId)).isEqualTo(defaultAdId);
assertThat(intent.getAction()).isEqualTo("android.intent.action.VIEW"); assertThat(intent.getData().toString()).isEqualTo("about:blank"); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener); assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse(); assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull(); assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
assertThat(positioning.getFixedPositions()).isEmpty(); assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
assertThat(trackers.size()).isEqualTo(2);
assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false); assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
assertThat(subject.getHashedUdid()).isNull();
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(clientMetadata).isNotNull();
assertThat(positioning.getFixedPositions()).isEmpty(); assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
assertThat(file.getAbsolutePath()).isEqualTo(expectedPath);
assertThat(IntentUtils.deviceCanHandleIntent(context, specificIntent)).isTrue();
assertThat(ImageService.calculateInSampleSize(nativeWidth, 2046)).isEqualTo(1);
assertThat(actualAdView).isSameAs(mraidWebView);
assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue(); assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
assertThat(shadowAlertDialog.hasBeenDismissed()).isTrue(); assertThat(expectedFile.exists()).isFalse(); assertThat(expectedFile.length()).isEqualTo(0);
assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
assertThat(GpsHelper.isClientMetadataPopulated(context)).isFalse();
assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
assertThat(nextStartedActivity).isNull();
assertThat(subject.getText()).isEqualTo("text");
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads"); assertThat(intent.getComponent().getClassName()) .isEqualTo("com.mopub.mobileads.MraidActivity"); assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
assertThat(networkImages.isEmpty()).isTrue();
assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull(); assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE); assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL); assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
assertThat(subject.getAdConfiguration()).isNotNull();
assertThat(ImageService.calculateInSampleSize(nativeWidth, 800)).isEqualTo(1);
assertThat(subject.getNumberOfZigzags()).isEqualTo(1); assertThat(subject.getNumberOfZigzags()).isEqualTo(2); assertThat(subject.getNumberOfZigzags()).isEqualTo(3); assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(ShadowVideoView.START); assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
assertThat(subject.getParameters()).isEqualTo(expectedParameters);
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0); assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
assertThat(emailAttachments).contains(fileUri);
assertThat(shouldConsumeTouch).isFalse(); assertThat(shouldConsumeTouch).isFalse(); assertThat(shouldConsumeTouch).isFalse();
assertThat(subject.isVideoFinishedPlaying()).isTrue();
assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE); assertThat(emailIntent.getType()).isEqualTo("plain/text"); assertThat(emailIntent.getDataString()).isEqualTo("mailto:"); assertThat(emailIntent.getStringArrayExtra(Intent.EXTRA_EMAIL)[0]).isEqualTo(EMAIL_ADDRESS);
assertThat(returnValue).isEqualTo(null);
assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT); assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
assertThat(((TextView)view.findViewById(titleView.getId())).getText()).isEqualTo("test title"); assertThat(((TextView)view.findViewById(textView.getId())).getText()).isEqualTo("test text"); assertThat(((TextView)view.findViewById(callToActionView.getId())).getText()).isEqualTo("test call to action");
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(expectedCustomEventName); assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedCustomData);
assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
assertThat(expectedFile.exists()).isTrue(); assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5); assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesInterstitial");
assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(adInfo, false)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse(); assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_CLICK);
assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT); assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlBanner");
assertThat(map).isEqualTo(expectedMap);
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_BANNER.toString());
assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
assertThat(trackers.size()).isEqualTo(2);
assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse(); assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0); assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
assertThat(layoutParams.width).isEqualTo(320); assertThat(layoutParams.height).isEqualTo(50); assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
assertThat(emailAttachments).contains(fileUri);
assertThat(getContentView().getChildAt(0)).isSameAs(mraidWebView);
assertThat(subject.getAdConfiguration()).isNull();
assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName()); assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse(); assertThat(intent.getExtras()).isEqualTo(bundle);
assertThat(state).isEqualTo(ViewState.LOADING);
assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
assertThat(getWebViewUserAgent("test")).isEqualTo("test");
assertThat(durationWidgetTextView.getText()).isEqualTo(""); assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 50 seconds"); assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 1 seconds"); assertThat(durationWidgetTextView.getText()).isEqualTo("Thanks for watching");
assertThat(subject.isCalendarAvailable(context)).isTrue();
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
assertThat(result).isTrue();
assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl");
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
assertThat(customEventName).isNull();
assertThat(trackers.size()).isEqualTo(1);
assertThat(subject.isCalendarAvailable(context)).isFalse();
assertThat(customEventName).isEqualTo("com.mopub.mobileads.VastVideoInterstitial");
assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
assertThat(consumeUrlLoading).isTrue();
assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
assertThat(intent).isNull(); assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(50);
assertThat(intent).isNull(); assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
assertThat(getContentView().getChildCount()).isEqualTo(1);
assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(relativeLayout.performClick()).isFalse(); assertThat(callToActionView.performClick()).isFalse(); assertThat(relativeLayout.performClick()).isTrue(); assertThat(callToActionView.performClick()).isTrue();
assertThat(trackers.size()).isEqualTo(2);
assertThat(result).isTrue();
assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1); assertThat(subject.getVideoRetries()).isEqualTo(0); assertThat(getShadowVideoView().isPlaying()).isTrue(); assertThat(subject.getVideoRetries()).isEqualTo(1);
assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url); assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(userAgent);
assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlInterstitial");
assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
assertThat(subject.isTelAvailable(context)).isTrue();
assertThat(desiredAssets.size()).isEqualTo(0);
assertThat(closeButton).isNotNull(); assertThat(getShadowImageButton(closeButton).getOnClickListener()).isNotNull(); assertThat(closeButton.getVisibility()).isEqualTo(GONE);
assertThat(wasDownloadTaskExecuted()).isFalse();
assertThat(networkImages.keySet()).containsOnly(url1, url2);
assertThat(state).isEqualTo(ViewState.DEFAULT);
assertThat(result).isFalse();
assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
assertThat(clientMetadata).isNotNull();
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_INTERSTITIAL.toString());
assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
assertThat(actualMotionEvent).isNull();
assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidBanner");
assertThat(subject.isCalendarAvailable(context)).isFalse();
assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0"); assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5"); assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
assertThat(bitmap).isNotNull(); assertThat(bitmap).isInstanceOf(Bitmap.class);
assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser"); assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo("about:blank"); assertThat(startedActivity.getData()).isNull();
assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
assertThat(subject.getTitle()).isEqualTo("title");
assertThat(subject.getHashedUdid()).isEqualTo("da39a3ee5e6b4b0d3255bfef95601890afd80709");
assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE); assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0); assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull(); assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
assertThat(GpsHelper.reflectedGetAdvertisingId(adInfo, null)).isEqualTo(adInfo.ADVERTISING_ID);
assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull(); assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
assertThat(hardwareAccelerated).isFalse();
assertThat(subject.getShowCloseButtonDelay()).isEqualTo(1000);
assertThat(title).isEqualTo("New creative violation report"); assertThat(date.getTime() - now.getTime()).isLessThan(10000);
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;BYMONTHDAY=2,-15;");
assertThat(result).isFalse(); assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
assertThat(GpsHelper.isClientMetadataPopulated(context)).isTrue();
assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidInterstitial");
assertThat(ShadowToast.shownToastCount()).isEqualTo(0); assertThat(ShadowToast.shownToastCount()).isEqualTo(1); assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery..."); assertThat(expectedFile.exists()).isTrue(); assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
assertThat(ImageService.calculateInSampleSize(nativeWidth, 512)).isEqualTo(4);
assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isNullOrEmpty();
assertThat(subject.isSmsAvailable(context)).isTrue();
assertThat(shouldConsumeTouch).isTrue();
assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
assertThat(bitmaps.size()).isEqualTo(2); assertThat(bitmaps.get(url1)).isNotNull(); assertThat(bitmaps.containsKey(url2)).isTrue(); assertThat(bitmaps.get(url2)).isNull();
assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
assertThat(positioning.getFixedPositions()).containsOnly(2); assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
assertThat(view).isEqualTo(relativeLayout); assertThat(view.getVisibility()).isEqualTo(View.GONE);
assertThat(javascriptInterface).isNotNull(); assertThat(returnValue).isTrue();
assertThat(webViewClient).isNotNull(); assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
assertThat(subject.getClickTracker()).isEqualTo("moPubClickTrackerUrl");
assertThat(CacheService.getBitmapLruCache()).isNull(); assertThat(CacheService.getDiskLruCache()).isNull(); assertThat(CacheService.getBitmapLruCache()).isNotNull(); assertThat(CacheService.getDiskLruCache()).isNotNull();
assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url); assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse(); assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
assertThat(shouldConsumeTouch).isFalse();
assertThat(actualAdView).isSameAs(mraidWebView);
assertThat(adUrl).isEqualTo(expectedAdUrl);
assertThat(subject.getCallToAction()).isEqualTo("callToAction");
assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
assertThat(webViewClient).isNotNull(); assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0"); assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3"); assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_INTERSTITIAL.toString());
assertThat(positioning.getFixedPositions()).containsExactly(1, 8); assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0"); assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5"); assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
assertThat(subject.getBroadcastIdentifier()).isGreaterThan(0);
assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10); assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0); assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
assertThat(result).isTrue();
assertThat(shadowOf(subject).getOnTouchListener()).isNotNull(); assertThat(shadowOf(subject).getOnTouchListener()).isNotNull();
assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
assertThat(subject.isStorePictureSupported(context)).isTrue();
assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
assertThat(bitmaps.size()).isEqualTo(2); assertThat(bitmaps.containsKey(url1)).isTrue(); assertThat(bitmaps.containsKey(url2)).isTrue(); assertThat(bitmaps.get(url1)).isNull(); assertThat(bitmaps.get(url2)).isNull();
assertThat(map).isEqualTo(expectedMap);
assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
assertThat(javascriptInterface).isNotNull();
assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
assertThat(returnValue).isEqualTo(subject);
assertThat(subject.getDeviceLocale()).isEqualTo("fr_FR");
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1); assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(getContentView().getChildCount()).isEqualTo(1);
assertThat(durationWidgetTextView.getText()).isEqualTo(""); assertThat(durationWidgetTextView.getText()).isEqualTo("");
assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(GOOGLE_PLAY_SERVICES_BANNER.toString());
assertThat(Robolectric.httpRequestWasMade()).isFalse();
assertThat(IntentUtils.deviceCanHandleIntent(context, otherIntent)).isFalse();
assertThat(alertDialog.isShowing()); assertThat(shadowAlertDialog.getTitle()).isEqualTo("Save Image"); assertThat(shadowAlertDialog.getMessage()).isEqualTo("Download image to Picture gallery?"); assertThat(shadowAlertDialog.isCancelable()).isTrue(); assertThat(alertDialog.getButton(BUTTON_POSITIVE).hasOnClickListeners()); assertThat(alertDialog.getButton(BUTTON_NEGATIVE)).isNotNull();
assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
assertThat(getContentView().getChildCount()).isEqualTo(0);
assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
assertThat(positioning.getFixedPositions()).containsExactly(0, 1); assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
assertThat(positioning.getFixedPositions()).isEmpty(); assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
assertThat(result).isFalse();
assertThat(returnValue).isEqualTo(null);
assertThat(actualMotionEvent).isNull();
assertThat(durationWidgetTextView.getText()).isEqualTo(""); assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 100 seconds"); assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 99 seconds");
assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
assertThat(subject.getUserAgent()).isEqualTo("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
assertThat(subject.getUserAgent()).isNull();
assertThat(vastXmlManagers.size()).isEqualTo(1);
assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialBanner");
assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesBanner");
assertThat(hardwareAccelerated).isTrue();
assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3); assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
assertThat(shadowSubject.getOnCompletionListener()).isNotNull(); assertThat(shadowSubject.getOnErrorListener()).isNotNull();
assertThat(map).isEqualTo(expectedMap);
assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName()); assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isTrue(); assertThat(intent.getExtras()).isNull();
assertThat(bitmaps.size()).isEqualTo(2); assertThat(bitmaps.get(url1)).isNotNull(); assertThat(bitmaps.get(url2)).isNotNull();
assertThat(intentForResult).isNull();
assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse(); assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
assertThat(subject.isTelAvailable(context)).isFalse();
assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull(); assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse(); assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull(); assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL); assertThat(shadowOf(subject).isFinishing()).isTrue();
assertThat(subject.getParameters()).isEqualTo(expectedParameters);
assertThat(getShadowVideoView().isPlaying()).isFalse();
assertThat(extras.size()).isEqualTo(2); assertThat(extras.get("extra")).isEqualTo("extraValue"); assertThat(extras.get("extraImage")).isEqualTo("extraImageUrl"); assertThat(extras).isNotSameAs(mNativeAd.getExtras());
assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener); assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue(); assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl"); assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
assertThat(clientMetadata).isNull();
assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialInterstitial");
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
assertThat(subject.isStorePictureSupported(context)).isFalse();
assertThat(subject.isStorePictureSupported(context)).isFalse();
assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0); assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName()); assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse(); assertThat(intent.getExtras()).isNull();
assertThat(result).isEmpty();
assertEquals(StreamlineEventImpl.DEFAULT_SOURCE_STREAM, event.getSourceStream()); assertEquals(sourceStream, event.getSourceStream());
assertEquals(1000, config.getInt("a")); assertEquals("world", config.get("d"));
assertEquals(100, cfg.getInt("a")); assertEquals("hello", cfg.get("b")); assertTrue(cfg.getBoolean("c"));
assertEquals(notifier, result);
assertEquals(expected, actual);
assertEquals(expectedMetric, actual);
assertEquals(1, result.size()); assertEquals(event, result.get(0));
assertEquals(notifier, result);
assertEquals("foo-clone", streamCatalogService.getNextCloneName("foo")); assertEquals("foo-clone2", streamCatalogService.getNextCloneName("foo-clone")); assertEquals("foo-clone3", streamCatalogService.getNextCloneName("foo-clone2"));
assertNotNull(UUID.fromString(event.getId()));
assertEquals(Collections.singleton(parentEvent.getId()), EventCorrelationInjector.getRootIds(injectedEvent)); assertEquals(Collections.singleton(parentEvent.getId()), EventCorrelationInjector.getParentIds(injectedEvent)); assertEquals(StormTopologyUtil.extractStreamlineComponentName(TEST_COMPONENT_NAME), EventCorrelationInjector.getSourceComponentName(injectedEvent));
assertEquals(1, result.size()); assertEquals(3, result.get(0).size()); assertEquals("one", result.get(0).get("1")); assertEquals("two", result.get(0).get("2")); assertEquals("three", result.get(0).get("3"));
assertEquals(Collections.emptySet(), EventCorrelationInjector.getRootIds(injectedEvent)); assertEquals(Collections.emptySet(), EventCorrelationInjector.getParentIds(injectedEvent)); assertEquals(StormTopologyUtil.extractStreamlineComponentName(TEST_COMPONENT_NAME), EventCorrelationInjector.getSourceComponentName(injectedEvent));
assertEquals(Arrays.asList("CREATE FUNCTION FLOOR AS \'com.hortonworks.streamline.Floor\'"), stormSqlExpression.createFunctions());
assertEquals(1, config.getInt("a")); assertEquals(10, config.getInt("aa", 10)); assertEquals(true, config.getBoolean("c"));
assertEquals(1, result.size()); assertEquals(3, result.get(0).size()); assertEquals(1, result.get(0).get("1")); assertEquals(2, result.get(0).get("2")); assertEquals("1 plus 2", result.get(0).get("3"));
assertEquals(1, result.size()); assertEquals("two", result.get(0).get("2")); assertEquals("THREE", result.get(0).get("3"));
assertEquals(Sets.newHashSet(src, processor), topology.getOutputComponents()); assertEquals(Sets.newHashSet(sink, processor), topology.getInputComponents()); assertEquals(2, topology.getAllEdges().size());
assertEquals("1", event.getDataSourceId());
assertEquals(mockNotifier, result); assertEquals(NotificationServiceContext.class, ctx.getClass());
assertEquals(1, result.size()); assertEquals(3, result.get(0).size()); assertEquals("one", result.get(0).get("1")); assertEquals("two", result.get(0).get("2")); assertEquals("one plus two", result.get(0).get("3"));
assertEquals("f1[\'g\'][\'h\'] = \'A\' and kafka_stream_1.f2[5][\'j\'] = 100", res); assertEquals("kafka_stream_1.f2[\'x\'][\'y\'] = 100", res); assertEquals("f1[\'f2\'][\'x\'][\'y\'] = 100", res);
assertEquals(4, qps.size());
assertEquals(1, config.getInt("aa"));
assertEquals(mockNotifier, result); assertEquals(null, result);
assertEquals(1, collectionResponse .getEntities().size()); assertEquals(notifier, collectionResponse.getEntities().iterator().next());
assertEquals(mockNotifier, result);
assertEquals(1, result.size()); assertEquals(3, result.get(0).size()); assertEquals("one", result.get(0).get("1")); assertEquals("one plus one", result.get(0).get("2")); assertEquals("one plus one plus one", result.get(0).get("3"));
assertEquals(aVal % 2 == 0, groovyScript.evaluate(StreamlineEventImpl.builder().fieldsAndValues(fieldsAndValue).dataSourceId("1").build()));
assertEquals(1, result.size()); assertEquals(3, result.get(0).size()); assertEquals("one", result.get(0).get("1")); assertEquals("${1} plus ${1}", result.get(0).get("2")); assertEquals("one plus two", result.get(0).get("3"));
assertEquals("rowid", notification.getId()); assertEquals(Notification.Status.DELIVERED, notification.getStatus()); assertEquals(1444042473518L, notification.getTs());
assertArrayEquals(new Component[] {src2, src1, processor, sink}, topOrder.toArray());
assertEquals(expectedMetric, actual);
assertEquals(expectedMetric, actual);
assertEquals(2, topology.getEdges(processor).size()); assertEquals(1, topology.getEdges(processor).size()); assertEquals(1, topology.getEdges(src).size()); assertEquals(0, topology.getEdges(sink).size());
assertEquals("foo-clone10", streamCatalogService.getLatestCloneName("foo", topologies).get());
assertTrue(groovyScript.evaluate(StreamlineEventImpl.builder().fieldsAndValues(fieldsAndValue).dataSourceId("1").build()));
assertEquals(0, cfg.getSources().getFiles().size());
assertEquals("C:\\\\Users\\\\ext-cmarchand\\\\src/main/xsl", ret);
assertFalse("xs:int+ allows empty sequence", intDT.allowsEmpty()); assertTrue("xs:int+ doest not allow multiple values", intDT.allowsMultiple()); assertTrue("value is not a XdmAtomicValue", ret instanceof XdmAtomicValue); assertEquals("value is not a sequence", 4, ret.size());
assertTrue(ret instanceof XdmValue); assertEquals(((XdmValue)ret).toString(), "0");
assertEquals("5 files are expected ", files.size(), 5);
assertTrue("xs:int? does not allow empty sequence", intDT.allowsEmpty()); assertFalse("xs:int? allows multiple values", intDT.allowsMultiple()); assertTrue("value is not a XdmAtomicValue", ret instanceof XdmAtomicValue); assertEquals("value is not an empty sequence", 0, ret.size());
assertTrue("Datatype for document()? does not allow empty", dt.allowsEmpty());
assertEquals(config.getParams().get(new QName("outputDirPath")).getValue(), "..");
assertTrue(expect.isFile()); assertEquals(10, ret);
assertFalse("xs:string allows multiple", dt.allowsMultiple()); assertEquals(inputValue+" do not produces a single value", 1, value.size()); assertEquals(inputValue, value.toString());
assertFalse("xs:int allows empty sequence", intDT.allowsEmpty()); assertFalse("xs:int allows multiple values", intDT.allowsMultiple()); assertTrue("value is not a XdmAtomicValue", ret instanceof XdmAtomicValue); assertTrue("java value is not a BigInteger", javaValue instanceof BigInteger);
assertEquals(3, count);
assertNotNull("Datatype factory instance is null", factory); assertNotEquals("two instances return are equals", factory, factory2);
assertThat(resultAdd, is(closeTo(2.222, 0.01)));
assertThat(resultDiv, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(resultPow, is(equalTo(9d)));
assertThat(resultPow, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(resultPow, is(equalTo(9d)));
assertThat(resultDiv, is(equalTo(Double.NaN)));
assertThat(resultPow, is(equalTo(1/27d)));
assertThat(resultDiv, is(equalTo(2d)));
assertThat(resultPow, is(equalTo(-27d)));
assertThat(resultSub, is(equalTo(-16d)));
assertThat(resultDiv, is(equalTo(16d)));
assertThat(resultPow, is(equalTo(Double.POSITIVE_INFINITY)));
assertThat(resultAdd, is(equalTo(234567892d)));
assertThat(resultAdd, is(equalTo(2d)));
assertThat(resultSub, is(equalTo(-16d)));
assertEquals( MediaIDHelper.MEDIA_ID_ROOT, MediaIDHelper.getParentMediaID(MediaIDHelper.MEDIA_ID_ROOT));
assertThat(resultAdd, is(equalTo(2.222)));
assertThat(resultSub, is(equalTo(0d)));
assertThat(resultPow, is(equalTo(0d)));
assertThat(resultMul, is(equalTo(64d)));
assertThat(resultAdd, is(equalTo(-18d)));
assertThat(resultAdd, is(equalTo(1d)));
assertThat(resultMul, is(equalTo(4d)));
assertThat(resultMul, is(equalTo(0d)));
assertThat(resultPow, is(equalTo(1d)));
assertEquals("foo", Util.justify("foo ", "both", options, 0)); assertEquals("foo", Util.justify("foo ", "both", options, 0)); assertEquals("foo", Util.justify(" foo", "both", options, 0)); assertEquals("foo", Util.justify(" foo", "both", options, 0)); assertEquals(" foo", Util.justify(" foo ", "left", options, 0)); assertEquals("foo ", Util.justify(" foo ", "right", options, 0));
assertEquals("Wrong return converterName", String.class, result.getClass()); assertEquals("Wrong return converterName", Double.class, result.getClass()); assertEquals("Wrong return converterName", BigDecimal.class, result.getClass()); assertEquals("Wrong return converterName", Float.class, result.getClass()); assertEquals("Wrong return converterName", Long.class, result.getClass()); assertEquals("Wrong return converterName", Integer.class, result.getClass()); assertEquals("Wrong return converterName", Date.class, result.getClass());
assertEquals("f", Util.justify("foo", "both", options, 0)); assertEquals("f", Util.justify("fooOO00", "both", options, 0)); assertEquals("f", Util.justify("oofoo", "both", options, 0)); assertEquals("f", Util.justify("oo00OOfooOO00", "both", options, 0)); assertEquals("oof", Util.justify("oofoo", "left", options, 0)); assertEquals("foo", Util.justify("oofoo", "right", options, 0));
assertTrue(response);
assertEquals(e.getResponseCode(), 400); assertFalse(response);
assertTrue(val.length() == 5); assertTrue( NumberUtils.isNumber(val.substring(1, 2)) || NumberUtils.isNumber(val.substring(2, 3)));
assertNotNull(userExternalIdMap.get(JsonKey.ORIGINAL_EXTERNAL_ID)); assertEquals(userExternalIdMap.get(JsonKey.PROVIDER), "state");
assertNotNull(userMap.get(JsonKey.USERNAME)); assertNotNull(userMap.get(JsonKey.STATUS)); assertNotNull(userMap.get(JsonKey.ROLES));
assertEquals(userMap.get(JsonKey.FIRST_NAME), response.get(JsonKey.FIRST_NAME)); assertNotEquals(email, response.get(JsonKey.EMAIL)); assertNotEquals( "India", ((List<Map<String, Object>>) response.get(JsonKey.ADDRESS)).get(0).get(JsonKey.COUNTRY)); assertNotEquals( addressLine1, ((List<Map<String, Object>>) response.get(JsonKey.ADDRESS)) .get(0) .get(JsonKey.ADDRESS_LINE1));
assertNotEquals("India", response.get(0).get(JsonKey.COUNTRY)); assertNotEquals(addressLine1, response.get(0).get(JsonKey.ADDRESS_LINE1)); assertNotEquals(state, response.get(0).get(JsonKey.STATE));
assertTrue(val.length() == 4);
assertEquals(e.getResponseCode(), 400); assertFalse(response);
assertTrue(CharScanner.isLong(String.valueOf(Long.MIN_VALUE + 1).toCharArray()));
assertFalse(CharScanner.isInteger("2147483648".toCharArray()));
assertEquals( 'e', idx( letters, 4 ) ); assertEquals( 'a', idx( letters, 0 ) ); assertEquals( len( letters ), 26 ); assertEquals( '\\0', idx( letters, 20 ) ); assertArrayEquals( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c' ), letters );
assertArrayEquals( array( 'a', 'b', 'c', 'd', 'e', 'f' ), add( array( 'a', 'b', 'c', 'd', 'e' ), 'f' ) );
assertEquals( 'e', idx( letters, 4 ) ); assertEquals( 'a', idx( letters, 0 ) ); assertEquals( len( letters ), 26 ); assertEquals( '\\0', idx( letters, 20 ) ); assertArrayEquals( array( 'a', 'b', 'c' ), letters );
assertArrayEquals( array( 'a', 'b', 'c' ), results );
assertArrayEquals( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' ), copy( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' ) ) );
assertTrue(CharScanner.isInteger("123".toCharArray()));
assertTrue(CharScanner.isInteger(String.valueOf(Integer.MIN_VALUE).toCharArray()));
assertArrayEquals( array( 'a', 'b', 'c', 'd', 'e' ), letters );
assertTrue(returnValue); assertTrue(testService.someMethodCalled.get());
assertFalse(CharScanner.isLong("abc".toCharArray()));
assertArrayEquals( array( '#', '#', 'a', 'b', 'c' ), results );
assertFalse( in( 'a', 1, 2, letters ) ); assertTrue( in( 'c', 1, 3, letters ) );
assertTrue((Boolean) returnValue); assertTrue(testService.someMethodCalled.get());
assertFalse( in( 'a', 1, letters ) ); assertTrue( in( 'c', 1, letters ) );
assertFalse(CharScanner.isLong("9223372036854775808".toCharArray()));
assertEquals( "dog", entry.key() ); assertEquals( dog, entry.value() ); assertTrue( entry.equals( entry ) ); assertTrue( entry.equals( ( Object ) entry ) ); assertFalse( entry.equals( ( Object ) entry4 ) ); assertTrue( entry.hashCode() == ( new Pair( entry ).hashCode() ) ); assertEquals( "{\\"k\\":dog, \\"v\\":Dog{\\"name\\":\\"dog\\"}}", entry.toString() );
assertEquals( "line 1", line ); assertEquals( "grapes", line );
assertEquals( set, set2 ); assertEquals( set, set2 ); assertEquals( set, set2 ); assertEquals( set, set2 );
assertEquals( set, set2 );
assertFalse(CharScanner.isInteger("-12147483648".toCharArray()));
assertTrue(CharScanner.isInteger("-123".toCharArray()));
assertFalse(CharScanner.isLong("19223372036854775808".toCharArray()));
assertArrayEquals( array( 'a', 'b', 'c', '#', '#' ), rpad( array( 'a', 'b', 'c' ), 5, '#' ) );
assertEquals( "line 1", line ); assertEquals( "grapes", line );
assertTrue(CharScanner.isInteger(String.valueOf(Integer.MAX_VALUE).toCharArray()));
assertArrayEquals( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e', ( byte ) 'f' ), add( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' ), ( byte ) 'f' ) );
assertTrue(CharScanner.isLong(String.valueOf(Long.MIN_VALUE).toCharArray()));
assertFalse(CharScanner.isLong("-19223372036854775808".toCharArray()));
assertArrayEquals( array( ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' ), letters );
assertTrue(CharScanner.isInteger(String.valueOf(Integer.MAX_VALUE - 1).toCharArray()));
assertTrue(CharScanner.isLong(String.valueOf(Long.MAX_VALUE - 1).toCharArray()));
assertTrue(CharScanner.isLong(String.valueOf(Long.MAX_VALUE).toCharArray()));
assertFalse(CharScanner.isInteger("abc".toCharArray()));
assertFalse(CharScanner.isInteger("12147483647".toCharArray()));
assertEquals( "abcde", letters );
assertArrayEquals( array( 'a', 'b', 'c', 'd', 'e' ), copy( array( 'a', 'b', 'c', 'd', 'e' ) ) );
assertTrue(CharScanner.isInteger(String.valueOf(Integer.MIN_VALUE + 1).toCharArray()));
assertTrue(CharScanner.isLong("123".toCharArray()));
assertTrue(CharScanner.isLong("-123".toCharArray()));
assertFalse(CharScanner.isInteger("-2147483649".toCharArray()));
assertFalse(CharScanner.isLong("-9223372036854775809".toCharArray()));
assertEquals(0, a.getMetrics().getAppsPending()); assertEquals(0, a.getMetrics().getAppsFailed()); assertEquals(1, a.getMetrics().getAppsSubmitted()); assertEquals(1, a.getMetrics().getAppsPending()); assertEquals(1, a.getMetrics().getAppsSubmitted()); assertEquals(0, a.getMetrics().getAppsPending()); assertEquals(0, a.getMetrics().getAppsFailed()); assertEquals(1, a.getMetrics().getAppsCompleted()); assertEquals(1, userMetrics.getAppsSubmitted());
assertEquals(rmApp1.getQueue(), queue1.getName()); assertEquals("root.asterix", rmApp1.getQueue()); assertEquals(rmApp2.getQueue(), queue2.getName()); assertEquals("root.notdefault", rmApp2.getQueue());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, and job.jar is not in" + " the classpath!", env_str.contains(expectedClasspath)); assertFalse("MAPREDUCE_JOB_USER_CLASSPATH_FIRST false, but taking effect!", env_str.startsWith(expectedClasspath));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler memory")); assertTrue("The thrown exception is not the expected one.", e.getMessage().startsWith( "Invalid resource scheduler vcores"));
assertNotNull("getJobFile results in null.", jobFile); assertEquals("jobFile with specified user is not as expected.", "/my/path/to/staging/dummy-user/.staging/job_dummy-job_12345/job.xml", jobFile);
assertEquals(numLocations, storage.getNumStorageDirs()); assertEquals(0, storage.getNumStorageDirs());
assertFalse("Replicas for block is not stored on enough racks", bm.blockHasEnoughRacks(blockInfo));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertFalse("MAPREDUCE_JOB_CLASSLOADER true, but job.jar is in the" + " classpath!", cp.contains("jar" + ApplicationConstants.CLASS_PATH_SEPARATOR + "job")); assertFalse("MAPREDUCE_JOB_CLASSLOADER true, but PWD is in the classpath!", cp.contains("PWD")); assertEquals("MAPREDUCE_JOB_CLASSLOADER true, but job.jar is not in the app" + " classpath!", expectedAppClasspath, appCp);
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(0, taid.getTaskId().getJobId().getAppId().getClusterTimestamp()); assertEquals(1, taid.getTaskId().getJobId().getAppId().getId()); assertEquals(1, taid.getTaskId().getJobId().getId()); assertEquals(2, taid.getTaskId().getId()); assertEquals(3, taid.getId());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(appC, e.getAppId()); assertEquals(KILL_CONTAINER, e.getType());
assertEquals(1, tid.getJobId().getAppId().getClusterTimestamp()); assertEquals(2, tid.getJobId().getAppId().getId()); assertEquals(2, tid.getJobId().getId()); assertEquals(TaskType.REDUCE, tid.getTaskType()); assertEquals(3, tid.getId()); assertEquals(TaskType.MAP, tid.getTaskType());
assertEquals("attempt_0_0000_m_000000_0", MRApps.toString(taid));
assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM) );
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(Status.INTERNAL_SERVER_ERROR, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(0, storage.getNumStorageDirs());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(1, jid.getAppId().getClusterTimestamp()); assertEquals(1, jid.getAppId().getId()); assertEquals(1, jid.getId());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType());
assertEquals(STATE.INITED, historyServer.getServiceState()); assertEquals(5, historyServer.getServices().size()); assertNotNull(historyServer.getClientService()); assertEquals(STATE.INITED, historyService.getServiceState()); assertEquals(STATE.STARTED, historyServer.getServiceState()); assertEquals(STATE.STARTED, historyService.getServiceState()); assertEquals(STATE.STOPPED, historyServer.getServiceState());
assertTrue("Empty Config did not produce an empty list of resources", localResources.isEmpty());
assertEquals(Status.NOT_FOUND, response.getClientResponseStatus());
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertEquals("task_0_0000_m_000000", MRApps.toString(tid)); assertEquals("task_0_0000_r_000000", MRApps.toString(tid));
assertEquals("job_0_0000", MRApps.toString(jid));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!", env_str.startsWith(expectedClasspath));
assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId1, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertEquals(1, apps.size()); assertEquals(appAttId3, apps.get(0)); assertTrue(appAttIds.contains(appAttId1)); assertTrue(appAttIds.contains(appAttId2));
assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());
assertTrue("appA should be running on queueB", mCS.getAppsInQueue("queueB").contains(expectedAttemptOnQueueB)); assertTrue("appB should be running on queueC", mCS.getAppsInQueue("queueC").contains(expectedAttemptOnQueueC)); assertTrue("appC should be running on queueE", mCS.getAppsInQueue("queueE").contains(expectedAttemptOnQueueE));
assertNull(model.getCityList()); assertEquals(1, model.getCityList().size()); assertTrue(model.getCityList().contains(cityModel)); assertEquals(CITIES_NUM + 1, model.getCityList().size()); assertEquals(cityModel, model.getCityList().get(0));
assertEquals("CityName[CityId]", model.toString());
assertEquals(0, model.getCityCount()); assertEquals(0, model.getCityCount()); assertEquals(1, model.getCityCount()); assertEquals(CITIES_NUM + 1, model.getCityCount());
assertNull(provinceInfoHandler.getProvinceList());
assertEquals(PROVINCE_NAME, model.getText()); assertEquals("", model.getText());
assertNull(actual);
assertNull(model.getCity(0)); assertEquals(cityModel, model.getCity(0)); assertNull(model.getCity(-1)); assertNull(model.getCity(1)); assertEquals(cityModel, model.getCity(0)); assertEquals(cities[i], model.getCity(i+1)); assertNull(model.getCity(-1)); assertNull(model.getCity(CITIES_NUM + 1));
assertTrue(model.getCityNameList().isEmpty()); assertEquals(1, model.getCityNameList().size()); assertNull(model.getCityNameList().get(0)); assertEquals(CITIES_NUM + 1, model.getCityNameList().size()); assertNull(model.getCityNameList().get(0)); assertEquals(cities[i].name, model.getCityNameList().get(i+1));
assertTrue(provinceInfoHandler.getProvinceList() == null || provinceInfoHandler.getProvinceList().isEmpty());
assertTrue(model.getCityIdList().isEmpty()); assertEquals(1, model.getCityIdList().size()); assertNull(model.getCityIdList().get(0)); assertEquals(CITIES_NUM + 1, model.getCityIdList().size()); assertNull(model.getCityIdList().get(0)); assertEquals(cities[i].id, model.getCityIdList().get(i+1));
assertEquals("ProvinceName[ProvinceId][0 cities]", model.toString()); assertEquals("ProvinceName[ProvinceId][1 cities]", model.toString()); assertEquals("ProvinceName[ProvinceId][" + (CITIES_NUM + 1) + " cities]", model.toString());
assertNotNull(actual);
assertEquals(CITY_NAME, model.getText()); assertEquals("", model.getText());
assertTrue(provinceInfoHandler.getProvinceList().isEmpty());
assertThat(server.getPort(), not(equalTo(0)));
assertEquals(expected, result);
assertTrue(result == OperationMode.STUB, "The operation mode should be STUB.");
assertFalse(result);
assertEquals(actual.getHitcount(), 0); assertEquals(actual.getTimeout(), 0);
assertNotNull(result);
assertEquals(actual, true);
assertEquals(actual, RESPONSE_BODY.getBytes());
assertFalse(actual);
assertFalse(matches);
assertEquals(actual, false);
assertEquals(actual, true);
assertEquals(actual, true);
assertEquals(actual.getName(), "name");
assertEquals(actual, "");
assertTrue(actual);
assertEquals(actual.getBody(), request.getBody());
assertEquals(actual, false);
assertTrue(actual);
assertEquals(actual, false);
assertNotNull(result);
assertEquals(((ResponseFormatterDescriptor) actual.toArray()[0]).getParams().getAllParameters().get(0).getValue(), "value");
assertTrue(actual.getResponseFormatters().contains(templateFormatterDescriptor));
assertEquals(actual.getHitcount(), 0); assertEquals(actual.getTimeout(), 0);
assertEquals(actual, true);
assertFalse(result);
assertFalse(actual);
assertEquals(xmlConverter, result);
assertNull("WilmaVersionInformation is expected to be null.", result);
assertNull(actual);
assertEquals(dialogDescriptor.getAttributes().getUsage(), DialogDescriptorUsage.DISABLED);
assertEquals(actual, "blablahis is a blablaesblabla blablaemplablablae".getBytes());
assertEquals(expected, result);
assertEquals(actual.get("switch"), "stub"); assertEquals(actual.getInt("proxy.port"), Integer.valueOf(1234));
assertNull(actual);
assertEquals(actual, "External response formatter class \'" + FILE_PATH + "\' was uploaded to Wilma.");
assertEquals(url.getValue(), STUB_CONFIGURATION_UPLOAD_URL_FOR_STRING); assertEquals(resource.getValue(), FILENAME);
assertEquals(actual.getAttributes().isActive(), expectedAttributes.isActive());
assertNull(actual);
assertEquals(((ResponseFormatterDescriptor) actual.toArray()[0]).getResponseFormatter(), templateFormatter);
assertNull("WilmaLoadInformation is expected to be null.", result);
assertFalse(result);
assertEquals(actual, EVALUATED_QUERY);
assertEquals(FILE_NOT_FOUND_MESSAGE, result);
assertEquals(actual, "path/" + WILMA_MESSAGE_LOGGER_ID + "req.txt");
assertEquals(actual, false);
assertTrue(actual);
assertEquals(actual, "path/" + WILMA_MESSAGE_LOGGER_ID + "resp.txt");
assertTrue(responseMessageVolatilityConfiguration.setResponseMessageVolatilityStatus(ON)); assertFalse(responseMessageVolatilityConfiguration.setResponseMessageVolatilityStatus(OFF));
assertFalse(result);
assertEquals(SEQUENCE_DESCRIPTOR_NAME, result.getName()); assertEquals(9000L, result.getDefaultTimeout()); assertEquals(GROUP_NAME, result.getGroupName()); assertEquals(dummySequenceHandler, result.getHandler());
assertEquals(ERROR_MESSAGE, result);
assertNull(actual);
assertTrue(xml.equals(expectedResult1) || xml.equals(expectedResult2), "Convert from JSON to XML failed, got answer:" + xml);
assertEquals(actual, true);
assertFalse(actual);
assertEquals(actual, outputStream.toString());
assertTrue(((ResponseFormatterDescriptor) actual.toArray()[0]).getParams().getAllParameters().isEmpty());
assertEquals(data, result);
assertEquals(actual, byteArrayOutputStream);
assertEquals(actual, templateResource);
assertEquals(actual, false);
assertEquals(expectedFileContent, result);
assertFalse(actual);
assertNull(result);
assertFalse(actual);
assertTrue(actual);
assertNull(actual.getCondition());
assertEquals(url.getValue(), RESPONSE_FORMATTER_UPLOAD_URL); assertEquals(file.getValue(), testFile);
assertEquals(actual, true);
assertFalse(actual);
assertEquals(actual.getUri(), request.getUri());
assertEquals(actual.getBody(), wilmaHttpRequest.getBody());
assertEquals(expectedHostName, actualHostName);
assertEquals(expected, result.get("loadInformation"));
assertTrue("1211".equals(response));
assertEquals(actual.getHeader(CONTENT_TYPE_HEADER), XML_CONTENT); assertEquals(actual.getHeader(CONTENT_ENCODING_HEADER), GZIP_CONTENT);
assertEquals(actual, outputStream.toByteArray());
assertEquals(actual.getRequestInterceptor(), requestInterceptor); assertEquals(actual.getResponseInterceptor(), null);
assertFalse(stubConfiguration.dropAllStubConfig());
assertEquals(actual, true);
assertEquals(actual, responseDescriptorDTOWithError);
assertNotNull(actual);
assertTrue(result);
assertEquals(actual, generator);
assertEquals(expected, result);
assertEquals(actual, responseBody);
assertEquals(actual.getName(), NAME); assertEquals(actual.getRequestInterceptor(), requestInterceptor); assertEquals(actual.getResponseInterceptor(), responseInterceptor); assertEquals(actual.getParams().getAllParameters().get(0).getName(), NAME); assertEquals(actual.getParams().getAllParameters().get(0).getValue(), VALUE);
assertTrue("111221".equals(response));
assertTrue(result);
assertFalse(matches);
assertEquals(url.getValue(), TEMPLATE_UPLOAD_URL); assertEquals(file.getValue(), testFile);
assertEquals(actual.getInt("webapp.port"), Integer.valueOf(1234));
assertFalse(actual);
assertEquals(actual, expected);
assertEquals(actual, false);
assertEquals(json, "{}");
assertNotNull(result);
assertEquals(json, "");
assertEquals(actual, true);
assertEquals(((ResponseFormatterDescriptor) actual.toArray()[0]).getResponseFormatter(), templateFormatter);
assertNull(actual.getCondition());
assertEquals(url.getValue(), CONDITION_CHECKER_UPLOAD_URL); assertEquals(file.getValue(), testFile);
assertEquals(actual, false);
assertEquals(actual, true);
assertTrue(result == LocalhostControlStatus.ON);
assertFalse(actual);
assertEquals(actual, RESPONSE_BODY.getBytes());
assertEquals(jsonConverter, result);
assertEquals(actual, true);
assertEquals(actual, document);
assertNull(result);
assertEquals(actual.getAttributes().isActive(), expectedAttributes.isActive());
assertEquals(0, result.size());
assertEquals(actual, true);
assertTrue(actual);
assertNull(actual);
assertEquals(actual, false);
assertEquals(actual, "External condition checker class \'" + FILE_PATH + "\' was uploaded to Wilma.");
assertEquals(expected, result);
assertTrue(new JSONObject(JSON_STRING).similar(result), "The two JSON objects should be similar.");
assertEquals(result, expected);
assertEquals(actual, false);
assertTrue(result); assertEquals(url.getAllValues().get(0), DROP_STUB_URL1); assertEquals(url.getAllValues().get(1), DROP_STUB_URL2);
assertFalse(result);
assertTrue(actual.getHeaderChanges().entrySet().size() == 2);
assertEquals(actual.getRequestLine(), wilmaHttpRequest.getRequestLine()); assertEquals(actual.getHeader("header"), wilmaHttpRequest.getHeader("header"));
assertEquals(expected, result);
assertFalse(actual);
assertEquals(actual, true);
assertTrue("11".equals(response));
assertTrue(result);
assertFalse(result);
assertEquals(actual, responseBody);
assertNull(result);
assertEquals(actual, expected);
assertEquals(actual, expected);
assertEquals(actual, false);
assertTrue(soapResult); assertFalse(jsonResult); assertFalse(xmlResult);
assertTrue(result == OperationMode.WILMA, "The operation mode should be WILMA.");
assertFalse(result);
assertEquals(actual, RESOURCE_NAME.getBytes());
assertTrue(actual);
assertTrue(result);
assertFalse(result);
assertTrue(actual.getHeaderChanges().entrySet().size() == 2);
assertEquals(actual.getTimeout(), 61000L);
assertEquals(actual, false);
assertEquals(actual, "External interceptor \'" + FILE_PATH + "\' was uploaded to Wilma.");
assertEquals(actual.getStatusCode(), response.getStatusCode());
assertEquals(expected, result);
assertEquals(result, "");
assertEquals(actual, true);
assertEquals(actual, templateResource);
assertEquals(actual, false);
assertEquals(dialogDescriptor.getAttributes().getUsage(), DialogDescriptorUsage.ALWAYS);
assertTrue(actual);
assertEquals(nullConverter, result);
assertEquals(resolvedType, "");
assertFalse(actual);
assertEquals(actual, false);
assertEquals(actual, false);
assertFalse(matches);
assertFalse(actual);
assertEquals(result, expected);
assertEquals("converted data", result);
assertEquals(actual.getInputStream(), clonedInputStream);
assertFalse(actual);
assertTrue(jsonResult); assertTrue(jsonArrayResult); assertFalse(xmlResult); assertFalse(emptyResult); assertFalse(textResult);
assertEquals(resolvedType, "ExactResolvable");
assertEquals("invalidjson{:}", request.getBody());
assertFalse(matches);
assertEquals(actual, response);
assertEquals(actual, "HELLO3 this is a test template HELLO3".getBytes());
assertEquals(actual.getRequestHeader(CONTENT_TYPE_HEADER), XML_CONTENT); assertEquals(actual.getRequestHeader(CONTENT_ENCODING_HEADER), GZIP_CONTENT);
assertFalse(result);
assertTrue(actual);
assertTrue(actual);
assertEquals(actual, internalPort);
assertEquals(actual.getContentType(), response.getContentType());
assertFalse(result);
assertEquals(actual, "No file uploaded");
assertEquals(actual, baos);
assertEquals(actual, baos);
assertFalse(result);
assertEquals(processors.size(), initialSize + 1);
assertEquals(actual, xsltExecutable);
assertNull(actual.getCondition());
assertFalse(actual);
assertNull(actual.getCondition());
assertEquals(actual, true);
assertTrue(new JSONObject(JSON_STRING).similar(result), "The two JSON objects should be similar.");
assertFalse(actual);
assertEquals(actual, "");
assertEquals(resolvedType, "XpathType");
assertNull(actual);
assertTrue(messageLoggingConfiguration.setMessageLoggingStatus(ON)); assertFalse(messageLoggingConfiguration.setMessageLoggingStatus(OFF));
assertEquals(resolvedType, "");
assertEquals(0, actualAttributes.getDelay()); assertEquals("404", actualAttributes.getCode()); assertEquals(MimeType.TEXT.getOfficialMimeType(), actualAttributes.getMimeType()); assertEquals(expectedTemplate, actualAttributes.getTemplate()); assertNull(responseDescriptor.getResponseFormatters());
assertEquals(NOT_FOUND, result);
assertEquals(actual, expected);
assertFalse(result);
assertNull(actual);
assertEquals(actual, expected);
assertNull(result);
assertFalse(actual);
assertTrue(actual.isEmpty());
assertEquals(actual, fileInputStream);
assertEquals(actual, false);
assertTrue(actual);
assertTrue(result);
assertEquals(adminHosts, Whitebox.getInternalState(underTest, "allowedHosts"));
assertEquals(actual.getRequestInterceptor(), null); assertEquals(actual.getResponseInterceptor(), responseInterceptor);
assertTrue(result);
assertFalse(actual);
assertEquals(actual.getBody(), response.getBody());
assertEquals(actual, false);
assertFalse(actual);
assertEquals(resolvedType, "");
assertTrue(localhostBlockingConfiguration.setLocalhostBlockingStatus(ON)); assertFalse(localhostBlockingConfiguration.setLocalhostBlockingStatus(OFF));
assertTrue("11191711".equals(response));
assertEquals(expectedResult, actualResult);
assertEquals(actual, false);
assertEquals(url.getValue(), DROP_STUB_URL1);
assertFalse(actual);
assertFalse(result);
assertEquals(actual.getParams().getAllParameters().isEmpty(), true);
assertNull(result);
assertFalse(actual);
assertFalse(actual);
assertEquals(actual, RESOURCE_NAME.getBytes());
assertEquals(actual.get(0), expected.get(0));
assertEquals(actual, expected);
assertTrue(actual);
assertEquals(actual, expected);
assertEquals("converted data", result);
assertTrue(actual);
assertTrue(actual);
assertEquals(actual.getRequestBody(), MSG_ID);
assertFalse(actual);
assertEquals(actual, "New stub configuration was uploaded to Wilma.");
assertFalse(actual);
assertFalse(result);
assertTrue(actual);
assertEquals(expected, result);
assertEquals(actual, null);
assertNull(actual);
assertEquals(dialogDescriptor.getAttributes().getHitcount(), 1);
assertEquals(MediaType.TEXT_PLAIN, result.getHeaders().getContentType()); assertEquals(HttpStatus.OK, result.getStatusCode()); assertNull(result.getHeaders().get(CONTENT_DISPOSITION)); assertEquals(expectedBody, result.getBody());
assertEquals(actual, false);
assertTrue(actual);
assertTrue(actual);
assertEquals(dialogDescriptor.getAttributes().getUsage(), DialogDescriptorUsage.DISABLED);
assertTrue(actual);
assertFalse(actual);
assertEquals(actual, expected);
assertTrue(actual);
assertEquals(actual, "External template \'" + FILE_PATH + "\' was uploaded to Wilma.");
assertEquals(conditionDescriptors, result.getConditionDescriptors()); assertEquals(sequenceDialogDescriptors, result.getDialogDescriptors()); assertEquals(1L, result.getDefaultTimeout()); assertEquals(dummySequenceHandler, result.getHandler()); assertEquals("bob", result.getName());
assertTrue(actual);
assertTrue(operationConfiguration.setOperationMode(WILMA)); assertTrue(operationConfiguration.setOperationMode(PROXY)); assertFalse(operationConfiguration.setOperationMode(STUB));
assertEquals(url.getValue(), STUB_CONFIGURATION_UPLOAD_URL); assertEquals(file.getValue(), testFile);
assertNotNull(result);
assertTrue(result);
assertFalse(actual);
assertNull(actual.getCondition());
assertEquals(9876, Whitebox.getInternalState(underTest, "internalPort"));
assertFalse(result);
assertEquals("converted data", result);
assertNull(result);
assertTrue(result == OperationMode.PROXY, "The operation mode should be PROXY.");
assertTrue(matches);
assertEquals(url.getValue(), SAVE_STUB_URL);
assertEquals(actual.getHeaderUpdateValue(CONTENT_TYPE_HEADER), XML_CONTENT); assertEquals(actual.getHeaderUpdateValue(CONTENT_ENCODING_HEADER), GZIP_CONTENT);
assertEquals(actual, false);
assertEquals(expectedBody, result.getBody());
assertNull(actual);
assertEquals(actual, false);
assertFalse(stubConfiguration.dropAllStubConfig());
assertNull(result);
assertEquals(expectedNames, result);
assertNull(actual);
assertFalse(result);
assertEquals("name", result);
assertTrue(actual);
assertEquals(actual.getRequestLine(), request.getRequestLine());
assertEquals(actual, expected);
assertEquals(xml, "");
assertTrue(result.isEmpty());
assertEquals(expected, result);
assertNull(actual);
assertFalse(matches);
assertTrue("21".equals(response));
assertTrue(result);
assertEquals(actual.getName(), NAME); assertEquals(actual.getResponseInterceptor(), responseInterceptor); assertEquals(actual.getParams().getAllParameters().get(0).getName(), NAME); assertEquals(actual.getParams().getAllParameters().get(0).getValue(), VALUE);
assertEquals(actual, "processing result message");
assertEquals(actual, "HELLO3 this not is not a test template HELLO3".getBytes());
assertEquals(nullConverter, result);
assertTrue(actual);
assertEquals(expectedHostName, actualHostName);
assertEquals(processors.size(), initialSize);
assertEquals(actual.getHeaderUpdateValue(CONTENT_TYPE_HEADER), XML_CONTENT); assertEquals(actual.getHeaderUpdateValue(CONTENT_ENCODING_HEADER), GZIP_CONTENT);
assertTrue(actual);
assertEquals(actual, response);
assertEquals(actual, true);
assertEquals(json, "{\\"root\\":{\\"field1\\":\\"value1\\"}}");
assertTrue(matches);
assertNotNull(actual);
assertEquals(actual, "bloblohis not is not o blobloesbloblo blobloemploblobloe".getBytes());
assertTrue(actual.isEmpty());
assertTrue(actual);
assertEquals(result, objectMessage);
assertEquals(actual.getHeader(CONTENT_TYPE_HEADER), XML_CONTENT); assertEquals(actual.getHeader(CONTENT_ENCODING_HEADER), GZIP_CONTENT);
assertTrue(messageMarkingConfiguration.setMessageMarkingStatus(ON)); assertFalse(messageMarkingConfiguration.setMessageMarkingStatus(OFF));
assertEquals(MediaType.TEXT_PLAIN, result.getHeaders().getContentType()); assertEquals(HttpStatus.OK, result.getStatusCode()); assertEquals(String.format(ATTACHMENT_TEMPLATE, fileName), result.getHeaders().getFirst(CONTENT_DISPOSITION)); assertEquals(expectedBody, result.getBody());
assertEquals("something", result);
assertEquals(actual.getHitcount(), 2);
assertEquals(actual, outputStream.toByteArray());
assertEquals(whitespaceFree(new String(formattedResponse)), whitespaceFree(expected));
assertEquals(actual, false);
assertEquals(actual, false);
assertEquals(actual.getName(), NAME); assertEquals(actual.getRequestInterceptor(), requestInterceptor); assertEquals(actual.getParams().getAllParameters().get(0).getName(), NAME); assertEquals(actual.getParams().getAllParameters().get(0).getValue(), VALUE);
assertEquals(result.getStatusCode(), HttpStatus.CREATED); assertEquals("{\\"messageSearchVersion\\":\\"version\\"}", result.getBody()); assertEquals(MediaType.APPLICATION_JSON, result.getHeaders().getContentType());
assertNotNull(result);
assertTrue(result);
assertFalse(matches);
assertNull(actual);
assertEquals(actual, expected);
assertNull(actual);
assertTrue(actual);
assertTrue(actual.isEmpty());
assertEquals(actual, true);
assertEquals(actual, false);
assertEquals(actual, false);
assertEquals(resolvedType, "RegexResolvable");
assertTrue(xmlResult); assertTrue(soapResult); assertFalse(jsonResult);
assertEquals(actual.getAttributes().getGroupName(), stubDescriptorAttributes.getGroupName());
assertFalse(actual);
assertEquals(newDescriptorMap.get("someOtherKey").getRequestBody(), MSG_ID);
assertFalse(actual);
assertEquals(actual.getProperty("webapp.port"), "8080");
assertTrue(response.length() == 0);
assertEquals(actual, responseBody);
assertFalse(actual);
assertEquals(actual, expected);
assertEquals(actual, responseBody);
assertEquals(actual, "External jar \'" + FILE_PATH + "\' was uploaded to Wilma.");
assertTrue(result.isEmpty());
assertEquals(actual, true);
assertTrue(actualSimpleCondition.getConditionChecker() instanceof StubModeConditionChecker); assertFalse(actualSimpleCondition.isNegate()); assertTrue(actualSimpleCondition.getParameters().isEmpty());
assertTrue(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled()); assertFalse(auditConfig.isLocationEnabled());
assertNull(widget.getAnswer()); assertTrue(answerValues.contains(selectedValue));
assertArrayEquals(new long[] {1, 2, 3, 4, 5}, toPrimitive(new Long[] {1L, 2L, 3L, 4L, 5L}));
assertFalse(result); assertEquals(toastText, getString(R.string.corrupt_imported_preferences_error));
assertNotNull(driveHelper.createNewFile(anyString(), anyString(), anyString())); assertNotNull(driveHelper.createNewFile("file name", null, null));
assertArrayEquals(new Long[] {1L, 2L, 3L, 4L, 5L}, toObject(new long[] {1, 2, 3, 4, 5}));
assertEquals(rootId, driveHelper.getRootFolderId());
assertEquals("GPS", GeoUtils.capitalizeGps(input)); assertEquals("network", GeoUtils.capitalizeGps(locationProvider)); assertNull(GeoUtils.capitalizeGps(nullLocationProvider));
assertFalse(googleAccountsManager.isAccountSelected());
assertEquals(EXPECTED_ACCOUNT, googleAccountsManager.getLastSelectedAccountIfValid()); assertEquals(googleAccountsManager.getLastSelectedAccountIfValid(), ""); assertNull(savedAccount);
assertNotNull(auditEvent); assertTrue(auditEvent.isIntervalAuditEventType()); assertEquals("question,/data/text1,1545392727685,", auditEvent.toString()); assertFalse(auditEvent.isEndTimeSet()); assertTrue(auditEvent.isEndTimeSet()); assertFalse(auditEvent.isLocationAlreadySet()); assertEquals("question,/data/text1,1545392727685,1545392728527", auditEvent.toString());
assertTrue(savedQrCodeImage.exists()); assertTrue(md5File.exists()); assertEquals(lastModifiedCache, md5File.lastModified()); assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());
assertThat(isPlaying.getValue(), equalTo(false));
assertSame(androidLocationClient.getLastLocation(), gpsLocation); assertSame(androidLocationClient.getLastLocation(), networkLocation); assertSame(androidLocationClient.getLastLocation(), networkLocation); assertSame(androidLocationClient.getLastLocation(), gpsLocation); assertSame(androidLocationClient.getLastLocation(), networkLocation); assertSame(androidLocationClient.getLastLocation(), passiveLocation); assertSame(androidLocationClient.getLastLocation(), passiveLocation); assertNull(androidLocationClient.getLastLocation());
assertEquals(ldtExpected, DateTimeUtils.skipDaylightSavingGapIfExists(ldtOriginal));
assertEquals(fetchResult.errorMessage, "Parsing failed with null while accessing " + URL_STRING);
assertEquals(CollectServerClient.getPlainTextMimeType(), "text/plain");
assertArrayEquals(new long[0], toPrimitive(null));
assertFalse(androidLocationClient.canSetUpdateIntervals());
assertThat(fakeScheduler.isCancelled(), equalTo(true));
assertEquals("", googleAccountsManager.getLastSelectedAccountIfValid()); assertNull(currentAccount);
assertArrayEquals(new Long[0], toObject(null));
assertEquals("new_folder_id", folderId);
assertEquals(expected, FileUtils.constructMediaPath("sample-file.xml")); assertEquals(expected, FileUtils.constructMediaPath("sample-file.extension")); assertEquals(expected, FileUtils.constructMediaPath("sample-file.123")); assertEquals(expected, FileUtils.constructMediaPath("sample-file.docx"));
assertTrue(result);
assertTrue(auditEventLogger.isAuditEnabled()); assertFalse(auditEventLogger.isAuditEnabled());
assertTrue(googleLocationClient.canSetUpdateIntervals());
assertEquals(mockedSpreadsheet, spreadsheet);
assertNull(driveHelper.buildRequest(null, null)); assertNull(driveHelper.buildRequest("some query", null)); assertNull(driveHelper.buildRequest(null, "some fields")); assertNotNull(driveHelper.buildRequest("some query", "some fields"));
assertEquals(EXPECTED_ACCOUNT, googleAccountsManager.getLastSelectedAccountIfValid());
assertTrue(SQLiteUtils.doesColumnExist(db, tableName, "id")); assertTrue(SQLiteUtils.doesColumnExist(db, tableName, "column1")); assertFalse(SQLiteUtils.doesColumnExist(db, tableName, "column2"));
assertThat(fakeScheduler.isCancelled(), equalTo(true));
assertEquals(testCase, TextUtils.textToHtml(testCase).toString());
assertEquals(testCase, TextUtils.markdownToHtml(testCase));
assertNull(fetchResult.errorMessage); assertEquals(fetchResult.responseCode, 0); assertTrue(fetchResult.isOpenRosaResponse);
assertTrue(Arrays.equals(new byte[] {0x01, 0x01, 0x00}, byteOut.toByteArray()));
assertNotNull(CryptoUtils.encryptToAes128EcbWithBase64(randomUUID().toString()));
assertEquals(child.get(parentKey), parentValue); assertEquals(child.get(childKey), childValue);
assertNotNull(serverInfo);
assertNotNull(contractTxReceipt);
assertNull(FilenameUtils.makeFilename(null, "png")); assertNull(FilenameUtils.makeFilename("HelloWorld", null)); assertEquals(expected, FilenameUtils.makeFilename(name, ext));
assertEquals(expected, composed.apply(randomUUID().toString(), randomUUID().toString(), randomUUID().toString(), randomUUID().toString(), randomUUID().toString()));
assertEquals(expected, StringUtils.isEmpty(str));
assertNotNull(queryApi.getNameOwner(randomUUID().toString())); assertNotNull(queryApi.getNameOwner(anyName));
assertNotNull(peerMetrics);
assertTrue(expected.equals(actual));
assertNotNull(preparedWalletApi); assertNotNull(preparedWalletApi.transaction()); assertNotNull(preparedWalletApi.query());
assertEquals(expected, actual);
assertNotNull(payload);
assertEquals(ENCODED_WITH_CHECKSUM, Base58Utils.encodeWithCheck(DECODED_WITH_CHECKSUM)); assertEquals("", Base58Utils.encodeWithCheck(new byte[0])); assertEquals("", Base58Utils.encodeWithCheck(null));
assertEquals("", AccountAddress.EMPTY.getEncoded());
assertEquals(expected, actual);
assertEquals(expected, ParsingUtils.convertToLong(val));
assertNotNull(blockHash);
assertSame(NullPointerException.class, e.getClass()); assertEquals(expected, FilepathUtils.concat(fragments));
assertTrue(Arrays.areEqual(new byte[0], actual));
assertEquals(expected, actual);
assertNotNull(conf.asMap());
assertEquals(expected, ParsingUtils.convertToInt(val));
assertEquals(expected, actual);
assertEquals(Aer.of("3", Unit.AER), left.add(right));
assertNull(nvl(null, null)); assertNotNull(ObjectUtils.nvl(randomUUID().toString(), randomUUID().toString())); assertNotNull(ObjectUtils.nvl(randomUUID().toString(), randomUUID().toString(), randomUUID().toString()));
assertTrue(contractApi.toString().contains(contractAddress.toString()));
assertNotNull(payload);
assertEquals(expected, IoUtils.redirect(from, to));
assertEquals(expected, actual);
assertEquals(null, null); assertEquals("Hello", "Hello"); assertEquals("Hello", "Hello1"); assertEquals(null, "Hello1"); assertEquals("Hello", null);
assertFalse(false); assertFalse(true);
assertEquals("", StringUtils.trim(null)); assertEquals(expected, StringUtils.trim(str));
assertEquals(tryCount + 1, nonceProvider.incrementAndGetNonce(identity));
assertEquals(v2, conf.get(key));
assertTrue(Arrays.equals(DECODED, Base58Utils.decode(ENCODED))); assertTrue(Arrays.equals(new byte[0], Base58Utils.decode(""))); assertTrue(Arrays.equals(new byte[0], Base58Utils.decode(null)));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, accountTemplate .updateName(deprecatedOne, randomUUID().toString(), anyAccountAddress, anyNonce)); assertEquals(expected, accountTemplate .updateName(anySigner, randomUUID().toString(), anyAccountAddress, anyNonce)); assertEquals(expected, accountTemplate.updateNameTx(anySigner, anyName, anyAccountAddress, anyNonce));
assertEquals(TxHash.of(encodedHash), txHash.adapt(Hash.class)); assertEquals(BlockHash.of(encodedHash), txHash.adapt(BlockHash.class)); assertEquals(TxHash.of(encodedHash), txHash.adapt(TxHash.class)); assertEquals(ContractTxHash.of(encodedHash), txHash.adapt(ContractTxHash.class));
assertNotNull(updateNameTransaction);
assertTrue(ParsingUtils.convertToBoolean(null, true)); assertFalse(ParsingUtils.convertToBoolean(null, false)); assertEquals(expected, ParsingUtils.convertToBoolean(str, defaultValue));
assertTrue(walletApi.lock()); assertFalse(walletApi.lock());
assertNotNull(channel);
assertEquals(expected, actual);
assertNotNull(txReceipt);
assertEquals(ecPublicKey.getQ(), ((org.bouncycastle.jce.interfaces.ECPublicKey) recovered).getQ());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, handled.getValue()); assertEquals(stop, countDown.get());
assertEquals(expected[i], actual[i]);
assertEquals(expected, StringUtils.join(values, token));
assertEquals(expected, actual);
assertEquals(nonce, account.getRecentlyUsedNonce());
assertEquals(ENCODED, Base64Utils.encode(DECODED)); assertEquals("", Base64Utils.encode(new byte[0])); assertEquals("", Base64Utils.encode(null));
assertNotNull(event.toString());
assertEquals(expected, contractTemplate .redeploy(anySigner, anyContractAddress, anyDefinition, anyNonce, anyFee)); assertEquals(expected, contractTemplate .redeployTx(anySigner, anyContractAddress, anyDefinition, anyNonce, anyFee));
assertTrue(equal(null, null)); assertFalse(equal(null, randomUUID().toString())); assertFalse(equal(randomUUID().toString(), null)); assertEquals(expected, ObjectUtils.equal(obj1, obj2));
assertNull(ExceptionUtils.trace(null, start, end)); assertSame(ArrayIndexOutOfBoundsException.class, e.getClass()); assertSame(ArrayIndexOutOfBoundsException.class, e.getClass()); assertSame(ArrayIndexOutOfBoundsException.class, e.getClass()); assertNotNull(ExceptionUtils.trace(elements, start, end));
assertTrue(expected == actual);
assertNotNull(txHash);
assertEquals(expected, accountTemplate.getState(deprecatedOne)); assertEquals(expected, accountTemplate.getState(anyAccountAddress));
assertEquals(5, parsed.size());
assertEquals(expected, actual);
assertFalse(testFlushable.isFlushed); assertEquals(expected, testFlushable.isFlushed);
assertNotNull(unstakeTransaction);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("Hello", null, new UnsupportedOperationException()); assertEquals(null, "Hello", new UnsupportedOperationException());
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertEquals(prefix, appended.getValue()[0]);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, accountTemplate .voteTx(anySigner, anyVoteId, anyCandidates, anyNonce)); assertEquals(expected, accountTemplate .vote(anySigner, anyVoteId, anyCandidates, anyNonce));
assertEquals(expected, accountTemplate.getStakingInfo(anyAccountAddress)); assertEquals(expected, accountTemplate.getStakeInfo(anyAccountAddress));
assertTrue(Arrays.equals(left, ArrayUtils.concat(left, null))); assertTrue(Arrays.equals(right, ArrayUtils.concat(null, right)));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, contractTemplate.deploy(deprecatedOne, anyDefinition, anyNonce)); assertEquals(expected, contractTemplate.deploy(deprecatedOne, anyDefinition, anyNonce, anyFee)); assertEquals(expected, contractTemplate.deploy(anySigner, anyDefinition, anyNonce, anyFee)); assertEquals(expected, contractTemplate.deployTx(anySigner, anyDefinition, anyNonce, anyFee));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, parseToBytesValue(byteString));
assertEquals(expected, actual);
assertEquals(expected, response.getValue()); assertNull(response.getError());
assertNotNull(configuration.asMap());
assertNotNull(CryptoUtils.createSecret(password, password.length));
assertEquals(expected, IoUtils.redirect(from, to));
assertTrue( Arrays.equals(DECODED_WITH_CHECKSUM, Base58Utils.decodeWithCheck(ENCODED_WITH_CHECKSUM))); assertTrue(Arrays.equals(new byte[0], Base58Utils.decodeWithCheck(""))); assertTrue(Arrays.equals(new byte[0], Base58Utils.decodeWithCheck(null)));
assertEquals(expected, pair.equals(obj));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertNotNull(converted);
assertEquals(actual.getClass(), expectedClass);
assertEquals(0, ArrayUtils.length(null));
assertEquals(prefix, appended[0]);
assertEquals(expected, handled.getValue()); assertEquals(2, usedSet.size());
assertNotNull(exception.from); assertNotNull(exception.to);
assertEquals(accountExpected, accountActual); assertEquals(contractExpected, contractActual);
assertEquals(actual.getClass(), expectedClass);
assertNotNull(aergoKey);
assertNotNull(keyStore);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(false, new UnsupportedOperationException());
assertEquals(expected, actual);
assertNotNull(electedCandidates);
assertEquals(expected, StringUtils.hasText(str));
assertEquals(expected, StringUtils.removeSuffix(str, prefix));
assertNotNull(accountState);
assertNotNull(account);
assertNotNull(server.getException()); assertEquals(ServerStatus.TERMINATED, server.getStatus());
assertNotEquals("Hello", "Hello", new UnsupportedOperationException());
assertNull(ExceptionUtils.getStackTraceOf(null)); assertNotNull(ExceptionUtils.getStackTraceOf(e));
assertNotNull(payload);
assertNull(Sha256Utils.mask(null)); assertTrue(Sha256Utils.mask(randomUUID().toString()).contains("**"));
assertNull(conf.get(randomUUID().toString()));
assertNotNull(accountTotalVote);
assertEquals("", StringUtils.multiply(null, -1)); assertEquals("", StringUtils.multiply(null, 0)); assertEquals("", StringUtils.multiply(null, 1)); assertEquals(expected, StringUtils.multiply(word, repeat));
assertEquals(0.0, ParsingUtils.convertToDouble(null, 0.0), 1e-15); assertEquals(1.0, ParsingUtils.convertToDouble(null, 1.0), 1e-15); assertEquals(expected, ParsingUtils.convertToDouble(val, defaultValue), 1e-15);
assertFalse(ParsingUtils.convertToBoolean(null));
assertNull(FilenameUtils.stripExtension(null)); assertEquals(expected, FilenameUtils.stripExtension(filename));
assertNotNull(key.getPrivateKey()); assertNotNull(key.getPublicKey()); assertNotNull(key.getAddress());
assertEquals(expected, actual);
assertEquals(0, new Pair<String, String>(null, null).hashCode());
assertNotNull(aergoClient);
assertEquals(expected, actual);
assertNotNull(keyStore);
assertEquals(expected, actual);
assertEquals(second, join.v1); assertEquals(third, join.v2);
assertNotNull(chainIdHash);
assertEquals(expected, handled.getValue()); assertEquals(count, countDown.get());
assertNotNull(payload);
assertNotNull(account);
assertNotNull(plainTransaction);
assertNull(FilenameUtils.getExtension(null)); assertEquals(expected, FilenameUtils.getExtension(filename));
assertNotNull(queryApi.query(anyInvocation)); assertNotNull(queryApi.queryContract(anyInvocation));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertNull(response.getValue()); assertEquals(expected, response.getError());
assertEquals(expected, blockTemplate.subscribeBlockMetadata(observer)); assertEquals(expected, blockTemplate.subscribeNewBlockMetadata(observer));
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertNull(StringUtils.split(null, null)); assertNull(StringUtils.split("2021_09_18", null)); assertNull(StringUtils.split(null, "_")); assertEquals(expected.get(i), StringUtils.split(string, delimiter).get(i));
assertEquals(expected, actual);
assertNotNull(contractTxHash);
assertEquals(ENCODED, Base58Utils.encode(DECODED)); assertEquals("", Base58Utils.encode(new byte[0])); assertEquals("", Base58Utils.encode(null));
assertTrue(Arrays.equals(DECODED, Base64Utils.decode(ENCODED))); assertTrue(Arrays.equals(new byte[0], Base64Utils.decode(""))); assertTrue(Arrays.equals(new byte[0], Base64Utils.decode(null)));
assertEquals(expected, actual);
assertEquals(curr, prev);
assertEquals('A', Integer.parseInt(new String(byteOut.toByteArray()), 16));
assertEquals(0, StringUtils.length(null));
assertEquals(expected, actual);
assertNotNull(invocation);
assertEquals(expected, FilepathUtils.getCanonicalForm(path));
assertEquals(expected, ParsingUtils.parse(val, unit));
assertNotNull(contractApiFactory.create(contractAddress, type)); assertNotNull(contractApiFactory.create(contractAddress, type, tryCountAndInterval)); assertNotNull(contractApiFactory.create(contractAddress, type, getClass().getClassLoader())); assertNotNull(contractApiFactory .create(contractAddress, type, tryCountAndInterval, getClass().getClassLoader()));
assertEquals(1, middle.compareTo(bottom)); assertEquals(0, middle.compareTo(middle)); assertEquals(-1, middle.compareTo(top));
assertEquals("", StringUtils.nvl(null, null)); assertNotNull(StringUtils.nvl(randomUUID().toString(), randomUUID().toString())); assertNotNull(StringUtils.nvl(randomUUID().toString(), randomUUID().toString(), randomUUID().toString()));
assertEquals(expected, actual);
assertEquals(expected, new Pair<String, String>(v1, v2).hashCode());
assertNotNull(nodeStatus);
assertEquals(expected, actual);
assertEquals(expected, IoUtils.getChecksumAsString(in));
assertNotNull(subscription);
assertSame(NullPointerException.class, e.getClass()); assertEquals(expected, ObjectUtils.getInt(bytes));
assertArrayEquals(expected, fragments);
assertEquals(expected, ArrayUtils.isEmpty(arrays));
assertNotNull(queryApi.getStakingInfo(anyAccountAddress)); assertNotNull(queryApi.getStakeInfo(anyAccountAddress));
assertEquals(expected, actual);
assertNotNull(txHash);
assertEquals(BlockHash.of(encodedHash), blockHash.adapt(Hash.class)); assertEquals(BlockHash.of(encodedHash), blockHash.adapt(BlockHash.class)); assertEquals(TxHash.of(encodedHash), blockHash.adapt(TxHash.class)); assertEquals(ContractTxHash.of(encodedHash), blockHash.adapt(ContractTxHash.class));
assertEquals(currentTimeMillis + 3000, System.currentTimeMillis(), 0);
assertEquals(value1.hashCode(), value2.hashCode());
assertNotNull(chainInfo);
assertNotNull(blockchainStatus);
assertEquals(expected, ParsingUtils.convertToBoolean(val));
assertNotNull(transactionApi.updateName(randomUUID().toString(), anyAccountAddress)); assertNotNull(transactionApi.updateName(anyName, anyAccountAddress));
assertNotNull(contractTxHash);
assertEquals(curr, prev);
assertEquals(expected, composed.apply(randomUUID().toString(), randomUUID().toString(), randomUUID().toString()));
assertEquals(expected, accountTemplate.getNameOwner(randomUUID().toString(), anyHeight)); assertEquals(expected, accountTemplate.getNameOwner(anyName, anyHeight));
assertEquals(expected, actual);
assertNotNull(walletApi1.toString()); assertNotEquals(walletApi1, walletApi2); assertEquals(walletApi1.hashCode(), walletApi1.hashCode()); assertNotEquals(walletApi1.hashCode(), walletApi2.hashCode());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(v2, subConf.get(childKey));
assertEquals(expected, parseToTxHash(byteString).getBytesValue());
assertEquals(expected, StringUtils.removePrefix(str, prefix));
assertNotNull(executeTransaction);
assertEquals(expected, actual);
assertEquals(capacity, nonceProvider.cache.size());
assertEquals(expected, accountTemplate.createName(deprecatedOne, randomUUID().toString(), anyNonce)); assertEquals(expected, accountTemplate.createName(anySigner, randomUUID().toString(), anyNonce)); assertEquals(expected, accountTemplate.createNameTx(anySigner, anyName, anyNonce));
assertNotNull(account);
assertEquals("", StringUtils.rtrim(null)); assertEquals(expected, StringUtils.rtrim(str));
assertEquals(expected, actual);
assertNotNull(configuration.asMap());
assertNotNull(transaction);
assertEquals(target, actual);
assertEquals(expected, actual);
assertTrue(Arrays.equals(expected, Sha256Utils.getBytes(characterSequence)));
assertNotNull(voteTransaction);
assertNull("Hello", new UnsupportedOperationException());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertSame(IllegalArgumentException.class, e.getClass());
assertNull(value);
assertNotNull(chainStats);
assertEquals(expected, aer);
assertNotNull(encryptedPrivateKey);
assertTrue(verifier.verify(signedTransaction));
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertEquals(expected, actual);
assertNotNull(queryApi.subscribeNewBlock(observer)); assertNotNull(queryApi.subscribeBlock(observer));
assertNull(FilepathUtils.getFilename(null)); assertEquals(expected, FilepathUtils.getFilename(path));
assertNotNull("Hello"); assertNotNull(null);
assertNull(ExceptionUtils.trace(null)); assertNotNull(ExceptionUtils.trace(elements));
assertTrue(Arrays.equals(new byte[] {0x01, 0x01, 0x00}, byteOut.toByteArray()));
assertEquals(expected[i], actual[i]);
assertEquals(value1, value2);
assertEquals(expected[i], FilepathUtils.getCanonicalFragments(path)[i]);
assertNotNull(signer);
assertNotNull(null, new UnsupportedOperationException());
assertNotNull(invocation);
assertEquals(expected, composed.apply(randomUUID().toString(), randomUUID().toString(), randomUUID().toString(), randomUUID().toString()));
assertTrue(Arrays.equals(expected, ExceptionUtils.concat(left, right)));
assertEquals(expected, composed.apply());
assertNotNull(inMemoryConfiguration.get(key));
assertNotNull(payload);
assertNotNull(walletApiFactory.create(keyStore)); assertNotNull(walletApiFactory.create(keyStore, 3, 100L)); assertNotNull(walletApiFactory.create(keyStore, TryCountAndInterval.of(3, Time.of(100L))));
assertEquals(expected, actual);
assertNotNull(electedCandidates);
assertEquals(ByteString.copyFrom(filledValue.getValue()), copyFrom(filledValue)); assertEquals(ByteString.EMPTY, copyFrom(emptyValue)); assertEquals(ByteString.EMPTY, copyFrom(nullValue));
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertEquals(expected, account.incrementAndGetNonce()); assertEquals(expected, account.getRecentlyUsedNonce());
assertEquals(success, stateMachine.getState()); assertEquals(failure, stateMachine.getState());
assertNotNull(events);
assertEquals(expected, actual);
assertEquals(expected, StringUtils.hasLength(str));
assertEquals(ByteString.copyFrom(filledValue), copyFrom(filledValue)); assertEquals(ByteString.EMPTY, copyFrom(emptyValue)); assertEquals(ByteString.EMPTY, copyFrom(nullValue));
assertEquals(expected, ObjectUtils.hex(value));
assertNotNull(inMemoryConfiguration.asMap());
assertNotNull(contractInterface);
assertEquals("", FilepathUtils.append(null, null, null)); assertEquals(expected, FilepathUtils.append(fragments, start, end));
assertEquals(expected, StringUtils.length(str));
assertNull(FilepathUtils.getParentPath(null)); assertNull(FilepathUtils.getParentPath("")); assertNull(FilepathUtils.getParentPath("/")); assertNull(FilepathUtils.getParentPath(" ")); assertEquals(expected, FilepathUtils.getParentPath(path));
assertNotEquals(null, "Hello"); assertNotEquals("Hello", null); assertNotEquals("Hello", "Hello1"); assertNotEquals(null, null); assertNotEquals("Hello", "Hello");
assertEquals(expected, actual);
assertEquals(0, ParsingUtils.convertToLong(null, 0)); assertEquals(1, ParsingUtils.convertToLong(null, 1)); assertEquals(expected, ParsingUtils.convertToLong(val, defaultValue));
assertEquals("", StringUtils.ltrim(null)); assertEquals(expected, StringUtils.ltrim(str));
assertEquals(ByteString.copyFrom(positiveToByteArray(filledValue.getValue())), copyFrom(filledValue)); assertEquals(ByteString.EMPTY, copyFrom(nullValue));
assertTrue(stateMachine.toString().contains(s1));
assertEquals(expected, composed.apply(randomUUID().toString()));
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertTrue(walletApi.unlock(valid));
assertTrue(key.verify(message, signature));
assertEquals("", sb.toString()); assertEquals("", sb.toString()); assertEquals("", sb.toString()); assertEquals(expected, buffer.toString());
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertEquals(0L, ParsingUtils.convertToCapacity(null, 0L)); assertEquals(1L, ParsingUtils.convertToCapacity(null, 1L)); assertEquals(expected, ParsingUtils.convertToCapacity(str, defaultValue));
assertNotNull(queryApi.subscribeNewBlockMetadata(observer)); assertNotNull(queryApi.subscribeBlockMetadata(observer));
assertEquals(0, ParsingUtils.convertToInt(null, 0)); assertEquals(1, ParsingUtils.convertToInt(null, 1)); assertEquals(expected, ParsingUtils.convertToInt(val, defaultValue));
assertEquals(expected, handled.getError());
assertNotNull(keyStore);
assertEquals(expected, ArrayUtils.length(arrays));
assertTrue(Arrays.equals(expected, byteOut.toByteArray()));
assertNotNull(payload);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(subscription.isUnsubscribed());
assertNull(value);
assertNotNull(key.getPrivateKey()); assertNotNull(key.getPublicKey()); assertArrayEquals(key.getPrivateKey().getEncoded(), arrayRecovered.getPrivateKey().getEncoded()); assertArrayEquals(key.getPublicKey().getEncoded(), arrayRecovered.getPublicKey().getEncoded()); assertArrayEquals(key.getPrivateKey().getEncoded(), keyRecovered.getPrivateKey().getEncoded()); assertArrayEquals(key.getPublicKey().getEncoded(), keyRecovered.getPublicKey().getEncoded());
assertTrue(true); assertTrue(false);
assertEquals(expected, actual);
assertNotNull(CryptoUtils.encryptToAesGcm(message, password, nonce));
assertEquals(expected, actual);
assertNull(null); assertNull("Hello");
assertNotNull(instance1); assertTrue(instance1 == instance2);
assertTrue(StringUtils.isEmpty(null));
assertTrue(Arrays.equals(expected, actual));
assertNull(ExceptionUtils.buildExceptionMessage(null, null)); assertNotNull(ExceptionUtils.buildExceptionMessage(randomUUID().toString(), new Throwable()));
assertEquals(expected[i], actual);
assertNotNull(CryptoUtils.decryptFromAes128EcbWithBase64(source));
assertNotNull(i + " th test", guid(this));
assertEquals(-1, ObjectUtils.compare(null, "a")); assertEquals(expected, ObjectUtils.compare(o1, o2));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, blockTemplate.subscribeBlock(observer)); assertEquals(expected, blockTemplate.subscribeNewBlock(observer));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, contractTemplate.execute(deprecatedOne, anyInvocation, anyNonce)); assertEquals(expected, contractTemplate.execute(deprecatedOne, anyInvocation, anyNonce, anyFee)); assertEquals(expected, contractTemplate.execute(anySigner, anyInvocation, anyNonce, anyFee)); assertEquals(expected, contractTemplate.executeTx(anySigner, anyInvocation, anyNonce, anyFee));
assertEquals(expected, accountTemplate.getNameOwner(randomUUID().toString())); assertEquals(expected, accountTemplate.getNameOwner(anyName));
assertNull(StringUtils.uncapitalize(null)); assertEquals(expected, StringUtils.uncapitalize(str));
assertEquals(expected, accountTemplate.stake(deprecatedOne, anyAmount, anyNonce)); assertEquals(expected, accountTemplate.stake(anySigner, anyAmount, anyNonce)); assertEquals(expected, accountTemplate.stakeTx(anySigner, anyAmount, anyNonce));
assertNotNull(ExceptionUtils.trace());
assertEquals(Hash.of(encodedHash), hash.adapt(Hash.class)); assertEquals(BlockHash.of(encodedHash), hash.adapt(BlockHash.class)); assertEquals(TxHash.of(encodedHash), hash.adapt(TxHash.class)); assertEquals(ContractTxHash.of(encodedHash), hash.adapt(ContractTxHash.class));
assertEquals(expected, contractTemplate.getReceipt(anyContractTxHash)); assertEquals(expected, contractTemplate.getContractTxReceipt(anyTxHash));
assertEquals(expected, StringUtils.join(values, token));
assertEquals(expected, accountTemplate.unstake(deprecatedOne, anyAmount, anyNonce)); assertEquals(expected, accountTemplate.unstake(anySigner, anyAmount, anyNonce)); assertEquals(expected, accountTemplate.unstakeTx(anySigner, anyAmount, anyNonce));
assertNotNull(txHash);
assertEquals(expected, actual);
assertNotNull(stakeTransaction);
assertEquals("", StringUtils.repeat(null, -1)); assertEquals("", StringUtils.repeat(null, 0)); assertEquals("", StringUtils.repeat(null, 1)); assertEquals(expected, StringUtils.repeat(word, repeat));
assertEquals(ContractTxHash.of(encodedHash), contractTxHash.adapt(Hash.class)); assertEquals(BlockHash.of(encodedHash), contractTxHash.adapt(BlockHash.class)); assertEquals(ContractTxHash.of(encodedHash), contractTxHash.adapt(TxHash.class)); assertEquals(ContractTxHash.of(encodedHash), contractTxHash.adapt(ContractTxHash.class));
assertNotNull(subConfiguration);
assertEquals(expected, composed.apply(randomUUID().toString(), randomUUID().toString()));
assertEquals(prefix, appended[0]);
assertNull(FilenameUtils.getExtension(null, false)); assertNull(FilenameUtils.getExtension(null, true)); assertEquals(expected, FilenameUtils.getExtension(filename, isGreedy));
assertFalse(true, new UnsupportedOperationException());
assertNull(FilepathUtils.split(null)); assertEquals(expected[i], FilepathUtils.split(path)[i]);
assertEquals(expected, handled.getValue());
assertEquals(ecPrivateKey.getD(), ((org.bouncycastle.jce.interfaces.ECPrivateKey) recovered).getD());
assertTrue(bytes.length < HexUtils.dump(bytes).length()); assertTrue(0 == (testcase[i].length() % 2)); assertNotNull(dump(byteOut.toByteArray()));
assertSame(NullPointerException.class, e.getClass()); assertEquals(expected, FilepathUtils.append(fragments));
assertTrue(ArrayUtils.isEmpty(null));
assertEquals(Collections.EMPTY_MAP, conf.asMap());
assertNotNull(contractTxHash);
assertTrue(Arrays.equals(HexUtils.decode( "3045022100ABE06C1B99DE0C51B4790D24EE52674F532D9057744ED9EEF3F61425F9D1BDF60220353CDC395B12ABB6E297085B4D6F1A9DF7783DB66F95A7E0CE28246FC538219E"), signature.getSign().getValue()));
assertEquals(expected, ParsingUtils.convertToDouble(val), 1e-15);
assertNotNull(txHash);
assertEquals(expected, method.invoke(NumberUtils.class, value));
assertNotNull(handled.getError()); assertEquals(0, countDown.get());
assertNotNull(peers);
assertEquals(expected, parseToBlockHash(byteString).getBytesValue());
assertEquals(expected, actual);
assertNotNull(transactionApi.createName(randomUUID().toString())); assertNotNull(transactionApi.createName(anyName));
assertEquals(aergoKey.getAddress(), account.getAddress());
assertEquals(prefix, appended.getValue()[0]);
assertNotNull(channel);
assertEquals(expected, actual);
assertEquals(Arrays.asList("a a", "b b "), CommandLineSupport.split("\\"a a\\" \\"b b \\" "));
assertEquals("", CommandLineSupport.quote(Arrays.<String>asList()));
assertEquals("aBc", CommandLineSupport.quote("aBc"));
assertTrue(matcher.matches(ctClass));
assertFalse(agentConfigs.toString().isEmpty()); assertEquals(config, agentConfigs.toString());
assertTrue(matcher.matches(ctClass));
assertEquals("\\"a c\\"", CommandLineSupport.quote("a c"));
assertTrue(orMatcher.matches(ctBehavior)); assertFalse(orMatcher.matches(ctBehavior)); assertFalse(orMatcher.matches(ctBehavior)); assertFalse(orMatcher.matches(ctBehavior));
assertEquals(Arrays.asList("aa", "bbbb", "cccccc"), CommandLineSupport.split(" aa bbbb cccccc "));
assertTrue(prefixMatcher.matches(ctBehavior));
assertEquals(Arrays.asList("a\\\\", "b"), CommandLineSupport.split("a\\\\ b"));
assertEquals("-javaagent:/tmp/foo=", agentConfigs.getVMArgument(new File("/tmp/foo")));
assertEquals("", VMUtils.toVMName(""));
assertTrue(prefixMatcher.matches(ctField));
assertEquals("a b c", CommandLineSupport.quote(Arrays.asList("a", "b", "c")));
assertEquals(Arrays.asList("a\\"c"), CommandLineSupport.split("a\\\\\\"c"));
assertEquals(Arrays.asList("a\\\\b"), CommandLineSupport.split("a\\\\\\\\b"));
assertTrue(agentConfigs.toString().isEmpty());
assertTrue(orMatcher.matches(ctBehavior)); assertTrue(orMatcher.matches(ctBehavior)); assertFalse(orMatcher.matches(ctBehavior));
assertEquals("abc", StaticField.getFoo());
assertEquals(Arrays.asList("abc"), CommandLineSupport.split("abc"));
assertTrue(prefixMatcher.matches(ctClass));
assertEquals(Arrays.asList(), CommandLineSupport.split(""));
assertEquals("foo/bar/MyClass", VMUtils.toVMName("foo.bar.MyClass"));
assertEquals("-javaagent:/tmp/foo=", agentConfigs.prependVMArguments(null, new File("/tmp/foo")));
assertEquals("-javaagent:/tmp/foo=", agentConfigs.prependVMArguments("-javaagent:/tmp/foo=", new File("/tmp/foo"))); assertEquals("-javaagent:/tmp/foo= -cp .:/tmp/", agentConfigs.prependVMArguments("-cp .:/tmp/", new File("/tmp/foo")));
assertEquals(Arrays.asList("a\\\\c"), CommandLineSupport.split("a\\\\c"));
assertTrue(superclassMatcher.matches(ctClass));
assertEquals("\\" xy \\"", CommandLineSupport.quote(" xy "));
assertFalse(matcher.matches(ctClass));
assertEquals("a\\\\\\\\b", CommandLineSupport.quote("a\\\\b"));
assertEquals("\\"a\\\\\\"c\\"", CommandLineSupport.quote("a\\"c"));
assertEquals(value, agentConfigs.getBuildLocation());
assertEquals("a", CommandLineSupport.quote(Arrays.asList("a")));
assertEquals("a \\"b b\\" c", CommandLineSupport.quote(Arrays.asList("a", "b b", "c")));
assertTrue(matcher.matches(ctClass)); assertTrue(matcher.matches(ctClass));
assertEquals("-javaagent:/tmp/foo=", agentConfigs.getQuotedVMArgument(new File("/tmp/foo")));
assertEquals(Arrays.asList("a\\\\"), CommandLineSupport.split("a\\\\"));
assertEquals(value, agentConfigs.getBuildLocation());
assertEquals(Arrays.asList(), CommandLineSupport.split(null));
assertEquals("-javaagent:/tmp/foo=", agentConfigs.prependVMArguments("", new File("/tmp/foo")));
assertEquals("foo", StaticField.getFoo());
assertTrue(registrationService.register(user)); assertFalse(registrationService.register(user));
assertNull(registrationService.getByEMail("eberhard.wolff@gmail.com"));
assertEquals("{\\"title\\":\\"First Post\\",\\"body\\":\\"...\\",\\"comments\\":[]}", result);
assertEquals(error, ex.getError());
assertEquals("hello", writer.toString());
assertEquals("{\\"title\\":\\"First Post\\"}", result);
assertEquals("abc", new ForwardingTemplateSource(source).content(StandardCharsets.UTF_8));
assertEquals(template, new HighConcurrencyTemplateCache(cache).get(source, parser));
assertNotNull(loader.sourceAt("home"));
assertEquals(template, result);
assertEquals(0, new URLTemplateSource(filename, url).lastModified());
assertEquals(message, result);
assertEquals("{\\n" + " \\"title\\" : \\"First Post\\",\\n" + " \\"body\\" : \\"...\\",\\n" + " \\"comments\\" : [ ]\\n" + "}", result);
assertEquals("template.hbs", templateSource.content(StandardCharsets.UTF_8));
assertEquals("filename", new ForwardingTemplateSource(source).filename());
assertEquals(expected, template.apply(text));
assertEquals(123L, new URLTemplateSource(filename, url).lastModified());
assertEquals(-1, new URLTemplateSource(filename, url).lastModified());
assertEquals("{\\"title\\":\\"First Post\\"}", result);
assertEquals(cause, ex.getCause()); assertEquals(error, ex.getError());
assertNotNull(loader.sourceAt("template"));
assertEquals("", template.apply(null));
assertEquals(template, new GuavaTemplateCache(cache).get(source, parser)); assertEquals(template, new GuavaTemplateCache(cache).get(source, parser));
assertEquals(l, Locales.fromString(l.toString()));
assertEquals(template, result);
assertEquals(false, Thread.currentThread().isInterrupted()); assertEquals(template, new HighConcurrencyTemplateCache(cache).get(source, parser)); assertEquals(true, Thread.currentThread().isInterrupted());
assertEquals("a", new Text(new Handlebars(), "a").text());
assertEquals("abc", new Text(new Handlebars(), "abc").text());
assertEquals(message, result);
assertNotNull(context.getValue());
assertNotNull(context); assertEquals("baseProperty", context.get("baseProperty")); assertEquals("value", context.get("expanded"));
assertEquals(message, result);
assertNotNull(delegates); assertNotNull(iterator); assertTrue(iterator.next() instanceof ClassPathTemplateLoader); assertTrue(iterator.next() instanceof FileTemplateLoader);
assertEquals("{\\"title\\":\\"First Post\\",\\"body\\":\\"...\\",\\"comments\\":[]}", result);
assertNotNull(context); assertEquals("String", context.model());
assertEquals(template, result);
assertEquals("{\\"script\\":\\"<script text=\\\\\\"text/javascript\\\\\\"></script>\\"}", handlebars .compileInline("{{@json this}}").apply(model)); assertEquals( "{\\"script\\":\\"\\\\u003Cscript text=\\\\\\"text/javascript\\\\\\"\\\\u003E\\\\u003C/script\\\\u003E\\"}", handlebars.compileInline("{{@json this escapeHTML=true}}").apply(model));
assertNotNull(loader.sourceAt("template")); assertNotNull(cachedLoader.sourceAt("template"));
assertEquals(FileUtils.fileRead("target/helpers-i18njs.js"), FileUtils.fileRead("src/test/resources/helpers-i18njs.expected").trim(), FileUtils.fileRead("target/helpers-i18njs.js").trim());
assertEquals(tokens("src/test/resources/messages.expected.js"), tokens("target/messages.js")); assertEquals(tokens("src/test/resources/messages_es_AR.expected.js"), tokens("target/messages_es_AR.js"));
assertTrue(new File("src/test/resources/inheritance", "home.hbs").getPath() .compareTo(new File(loader.resolve("home")).getPath()) == 0 );
assertEquals("/template.hbs", loader.resolve("template"));
assertEquals(template, new ConcurrentMapTemplateCache(cache).get(source, parser)); assertEquals(template, new ConcurrentMapTemplateCache(cache).get(source, parser));
assertEquals(l, Locales.fromString(l.toLanguageTag()));
assertEquals(template, new HighConcurrencyTemplateCache(cache).get(source, parser)); assertEquals(template, new HighConcurrencyTemplateCache(cache).get(source, parser));
assertEquals(template, result);
assertEquals(lastModified, new ForwardingTemplateSource(source).lastModified());
assertNull(Locales.fromString(null));
assertEquals(jedi, value.getValue());
assertFalse(personFound.isPresent());
assertFalse(people.isEmpty()); assertThat(names, containsInAnyOrder("Bruce Banner", "Natasha Romanoff"));
assertEquals(actor, value.getValue());
assertEquals(6, edges.size());
assertTrue(edgeEntity.isPresent()); assertEquals(reads.getId().get(), edgeEntity.get().getId().get());
assertNotNull(template);
assertNotNull(personRepository);
assertThat(names, Matchers.containsInAnyOrder("[Poliana]", "[Otavio]", "[Paulo]"));
assertThat(people, containsInAnyOrder(otavio, poliana));
assertEquals("movie", vertex.label()); assertEquals(1999, Number.class.cast(vertex.value("movie_year")).intValue()); assertEquals("Matrix", vertex.value("title"));
assertFalse(properties.isEmpty()); assertEquals(4, properties.size()); assertThat(properties, containsInAnyOrder("Bruce Banner", 30, 30, "Natasha Romanoff"));
assertEquals(query, captor.getValue().getQuery());
assertEquals(3L, count);
assertEquals(queryExpected, query);
assertEquals(queryExpected, query);
assertNotNull(documentFrom);
assertFalse(properties.isEmpty()); assertEquals(2, properties.size()); assertThat(names, containsInAnyOrder("Bruce Banner", "Natasha Romanoff"));
assertFalse(count.isEmpty()); assertThat(count, containsInAnyOrder(2L));
assertNotNull(columnFrom);
assertNotNull(personRepository);
assertEquals(jedi, value.getValue());
assertFalse(edges.isEmpty()); assertEquals("loves", edgeEntity.getLabel()); assertEquals("Bruce Banner", person2.getName()); assertEquals("Natasha Romanoff", person.getName());
assertEquals(0L, count);
assertEquals(6, edges.size());
assertFalse(entity.isPresent());
assertEquals(reads, entity.get());
assertNotNull(personRepository);
assertEquals(3, maps.size());
assertFalse(entity.isPresent());
assertNotNull(personRepository);
assertEquals(3L, count);
assertEquals(jedi, value.getValue());
assertNotNull(columnRepository);
assertNotNull(personRepository);
assertEquals(jedi, value.getValue());
assertNotNull(deleteFrom);
assertEquals(query, captor.getValue().getQuery());
assertNotNull(personRepository);
assertEquals(queryExpected, query);
assertEquals(query, captor.getValue().getQuery());
assertFalse(properties.isEmpty()); assertEquals(2, properties.size()); assertThat(names, containsInAnyOrder("Bruce Banner", "Natasha Romanoff"));
assertEquals(name, poliana.map(m -> List.class.cast(m.get("name")).get(0)).orElse(""));
assertEquals(entity, captorValue.getEntity());
assertFalse(count.isEmpty()); assertThat(count, containsInAnyOrder(2L));
assertEquals(jedi, value.getValue());
assertEquals(3, entities.size());
assertEquals(3, edges.size()); assertThat(edges, containsInAnyOrder(reads, reads2, reads3));
assertEquals(2, people.size()); assertThat(people, containsInAnyOrder(otavio, poliana));
assertEquals(actor, value.getValue());
assertFalse(people.isEmpty()); assertThat(names, containsInAnyOrder("Bruce Banner"));
assertEquals(jedi, value.getValue());
assertEquals(jedi, value.getValue());
assertEquals(jedi, value.getValue());
assertEquals(entity, captorValue.getEntity());
assertNotNull(personRepository);
assertEquals(1, fields.size());
assertNotNull(template);
assertEquals("Actor", classMapping.getName()); assertEquals(Actor.class, classMapping.getClassInstance()); assertEquals(6, classMapping.getFields().size()); assertThat(classMapping.getFieldsName(), containsInAnyOrder("_id", "name", "age", "phones", "movieCharacter", "movieRating"));
assertFalse(people.isEmpty()); assertThat(names, containsInAnyOrder("Bruce Banner"));
assertTrue(edges.isEmpty());
assertEquals(3, edges.size()); assertThat(edges, containsInAnyOrder(reads, reads2, reads3));
assertEquals(entity, captorValue.getEntity());
assertNotNull(columnDeleteFrom);
assertEquals(actor, value.getValue());
assertTrue(allMatch);
assertNotNull(personRepository);
assertEquals(3, edges.size()); assertThat(edges, containsInAnyOrder(reads, reads2, reads3));
assertNotNull(transaction);
assertNotNull(personRepository);
assertEquals(query, captor.getValue().getQuery());
assertEquals(entity, captorValue.getEntity());
assertFalse(people.isEmpty()); assertThat(names, containsInAnyOrder("Bruce Banner", "Natasha Romanoff"));
assertEquals(jedi, value.getValue());
assertFalse(person.isPresent());
assertEquals(entity, captorValue.getEntity());
assertEquals(actor, value.getValue());
assertEquals("Person", classMapping.getName()); assertEquals(Person.class, classMapping.getClassInstance()); assertEquals(4, classMapping.getFields().size()); assertThat(classMapping.getFieldsName(), containsInAnyOrder("_id", "name", "age", "phones"));
assertFalse(properties.isEmpty()); assertEquals(4, properties.size()); assertThat(properties, containsInAnyOrder("Bruce Banner", 30, 30, "Natasha Romanoff"));
assertTrue(next.isPresent());
assertEquals(jedi, value.getValue());
assertEquals("Director", classMapping.getName()); assertEquals(Director.class, classMapping.getClassInstance()); assertEquals(5, classMapping.getFields().size()); assertThat(classMapping.getFieldsName(), containsInAnyOrder("_id", "name", "age", "phones", "movie"));
assertEquals(3, edges.size()); assertThat(edges, containsInAnyOrder(reads, reads2, reads3));
assertNotNull(personRepository);
assertTrue(fields.stream().anyMatch(hasKeyAnnotation)); assertEquals("_id", fieldMapping.getName()); assertEquals(DEFAULT, fieldMapping.getType());
assertFalse(otavio.isPresent());
assertNotNull(personRepository);
assertEquals(entity, captorValue.getEntity());
assertTrue(edges.isEmpty());
assertEquals(queryExpected, query);
assertNotNull(documentRepository);
assertFalse(next.isPresent());
assertFalse(edges.isEmpty()); assertEquals("loves", edgeEntity.getLabel()); assertEquals("Bruce Banner", person2.getName()); assertEquals("Natasha Romanoff", person.getName());
assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(3.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(other, retval); assertNotNull(retval); assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertEquals(target, retval); assertEquals(1.32923e+36f, target.z, 0.0f); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(1.32923e+36f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertNotNull(retval); assertEquals(1.0f, retval.x, 0.0f); assertEquals(-2.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f); assertEquals(retval2, target);
assertEquals(0.0f, target.get(0), 0.0f); assertEquals(0.5f, target.get(1), 0.0f); assertEquals(1.5f, target.get(2), 0.0f);
assertEquals(retval, result); assertNotNull(result); assertEquals(0.0f, result.x, 0.0f); assertEquals(0.0f, result.y, 0.0f); assertEquals(-10.807f, result.z, 0.01f); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(-10.807f, retval.z, 0.01f);
assertNotNull(retval); assertEquals(5.84f, retval.x, 0.01f); assertEquals(-2.33f, retval.y, 0.01f); assertEquals(3.32f, retval.z, 0.01f);
assertNull(retval);
assertEquals(1.57f, target.angleBetween(otherVector), 0.01f);
assertNotNull(v); assertEquals(Float.NEGATIVE_INFINITY, v.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, v.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, v.z, 0.0f); assertNotNull(u); assertEquals(Float.POSITIVE_INFINITY, u.x, 0.0f); assertEquals(0.0f, u.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, u.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.getY(), 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.getZ(), 0.0f);
assertNotNull(retval); assertEquals(retval, target); assertEquals(1.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(0, FastMath.counterClockwise(p0, p1, p2));
assertEquals(3.141f, target.angleBetween(otherVector), 0.001f);
assertNull(target.mult(null));
assertEquals(-1, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(-51.475147f, retval.y, 0.01f); assertEquals(-5.736f, retval.z, 0.001f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(Float.NaN, retval.z, 0.0f); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(Float.NaN, retval.y, 0.0f);
assertNotNull(retval); assertEquals(0, retval.x, 0.0f); assertEquals(0, retval.y, 0.0f); assertEquals(0, retval.z, 0.0f);
assertNotNull(retval); assertEquals(3.125f, retval.getX(), 0.0f); assertEquals(4.125f, retval.getY(), 0.0f); assertEquals(5.875f, retval.getZ(), 0.0f);
assertEquals(store, retval); assertArrayEquals(new float[] {1.0f, 2.0f, 3.0f}, retval, 0.0f); assertArrayEquals(new float[] {1.0f, 2.0f, 3.0f}, retval2, 0.0f); assertArrayEquals(new float[] {1.0f, 2.0f, 3.0f}, retval3, 0.0f);
assertNotNull(retval); assertEquals(0.94f, retval.getX(), 0.01f); assertEquals(1.95f, retval.getY(), 0.01f); assertEquals(3.82f, retval.getZ(), 0.01f);
assertEquals(1, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertNotNull(retval); assertEquals(retval, result); assertEquals(1.42f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(4.2f, retval.z, 0.0f);
assertNull(target.mult(null, store));
assertNotNull(v); assertEquals(Float.NEGATIVE_INFINITY, v.x, 0.0f); assertEquals(Float.POSITIVE_INFINITY, v.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, v.z, 0.0f); assertNotNull(u); assertEquals(0.0f, u.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, u.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, u.z, 0.0f);
assertNotNull(retval); assertEquals(0.5950255f, retval.x, 0.01f); assertEquals(0.70391715f, retval.y, 0.0f); assertEquals(0.3878727f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertNotNull(retval); assertEquals(4.86f, retval.x, 0.0f); assertEquals(9.945f, retval.y, 0.0f); assertEquals(11.715f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, retval.y, 0.0f); assertEquals(-0.0f, retval.z, 0.0f);
assertEquals(result, retval); assertNotNull(retval); assertEquals(8.90785f, retval.x, 0.0001f); assertEquals(2.17593f, retval.y, 0.0001f); assertEquals(-56.96825f, retval.z, 0.0001f);
assertNotNull(retval); assertEquals(1.42f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(4.2f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertNotNull(retval); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(Float.NaN, retval.y, 0.0f); assertEquals(Float.NaN, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(0f, retval.x, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.y, 0.0f); assertEquals(1.35f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(-0.0f, retval.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, retval.y, 0.0f); assertEquals(-0.0f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(Float.NaN, retval.getX(), 0.0f); assertEquals(Float.NaN, retval.getY(), 0.0f); assertEquals(Float.NaN, retval.getZ(), 0.0f);
assertNotNull(v); assertEquals(Float.NaN, v.x, 0.0f); assertEquals(Float.NaN, v.y, 0.0f); assertEquals(Float.NaN, v.z, 0.0f); assertNotNull(u); assertEquals(0.0f, u.x, 0.0f); assertEquals(Float.NaN, u.y, 0.0f); assertEquals(Float.NaN, u.z, 0.0f);
assertNotNull(retval); assertEquals(4.4375f, retval.getX(), 0.0f); assertEquals(5.4375f, retval.getY(), 0.0f); assertEquals(6.0625f, retval.getZ(), 0.0f);
assertTrue(FastMath.approximateEquals(1000.0f, 1000.0f)); assertTrue(FastMath.approximateEquals(100000.0f, 100001.0f)); assertTrue(FastMath.approximateEquals(0.0f, -0.0f)); assertFalse(FastMath.approximateEquals(10000.0f, 10001.0f)); assertFalse(FastMath.approximateEquals(149.0f, 0.0f));
assertEquals(0, FastMath.counterClockwise(p0, p1, p2));
assertTrue(tx2.getImage().getColorSpace()==ColorSpace.sRGB); assertTrue(tx2.getImage().getColorSpace()==ColorSpace.sRGB); assertTrue(tx.getImage().getColorSpace()==ColorSpace.Linear); assertTrue(tx2.getImage().getColorSpace()==ColorSpace.Linear);
assertNull(retval);
assertNotNull(retval); assertEquals(4.86f, retval.x, 0.0f); assertEquals(9.945f, retval.y, 0.0f); assertEquals(11.715f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(12.0f, retval.x, 0.0f); assertEquals(-2.5f, retval.y, 0.01f); assertEquals(-10.4f, retval.z, 0.001f);
assertEquals(slowResult, fastResult);
assertEquals(Float.POSITIVE_INFINITY, target.distance(v), 0.0f);
assertNotNull(retval); assertEquals(retval.x, 2.0f, 0.0f); assertEquals(retval.y, -1.32f, 0.01f); assertEquals(retval.z, 11.4f, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(4.5f, retval.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, retval.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.z, 0.0f);
assertEquals(19.5f, target.dot(new Vector3f(2.0f, 3.0f, 8.0f)), 0.0f);
assertEquals(0.0f, target.angleBetween(otherVector), 0.0f);
assertEquals(-1, FastMath.counterClockwise(p0, p1, p2));
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(1.6379999f, retval.x, 0.01f); assertEquals(17.324999f, retval.y, 0.01f); assertEquals(12.9800005f, retval.z, 0.01f);
assertNotNull(v); assertEquals(-0.1105, v.x, 0.001f); assertEquals(-0.9915, v.y, 0.001f); assertEquals(0.0679, v.z, 0.001f); assertNotNull(u); assertEquals(-0.5234f, u.x, 0.001f); assertEquals(0.0f, u.y, 0.0f); assertEquals(-0.8520f, u.z, 0.001f);
assertNotNull(v); assertEquals(Float.NaN, v.x, 0.0f); assertEquals(Float.NaN, v.y, 0.0f); assertEquals(Float.NaN, v.z, 0.0f); assertNotNull(u); assertEquals(Float.NaN, u.x, 0.0f); assertEquals(0.0f, u.y, 0.0f); assertEquals(Float.NaN, u.z, 0.0f);
assertNull(retval);
assertEquals(target, retval); assertNotNull(retval); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(Float.NaN, retval.y, 0.0f); assertEquals(Float.NaN, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.94f, retval.getX(), 0.01f); assertEquals(1.95f, retval.getY(), 0.01f); assertEquals(3.82f, retval.getZ(), 0.01f);
assertNotNull(retval); assertEquals(32.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertEquals(target, retval); assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(Float.NaN, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(-37.3071f, retval.getX(), 0.01f); assertEquals(Float.POSITIVE_INFINITY, retval.getY(), 0.0f); assertEquals(0.854082f, retval.getZ(), 0.01f);
assertEquals(target.x, 5.0, 0.0f); assertEquals(target.y, 3.0, 0.0f); assertEquals(target.z, 8.0, 0.0f);
assertNotNull(retval); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(Float.NEGATIVE_INFINITY, retval.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertEquals(0.0f, FastMath.atan2(0.0f, 0.0f), 0.0f); assertEquals(0.076f, FastMath.atan2(1.0f, 13.0f), 0.01f);
assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(-0.0f, retval.z, 0.0f);
assertEquals(3.141f, target.angleBetween(otherVector), 0.01f);
assertEquals(14.150971f, target.distance(v), 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(-13.257f, retval.x, 0.001f); assertEquals(Float.NaN, retval.y, 0.0f); assertEquals(Float.NaN, retval.z, 0.0f);
assertNotNull(retval); assertEquals(1.65f, retval.x, 0.001f); assertEquals(2.972f, retval.y, 0.001f); assertEquals(1.5253967f, retval.z, 0.001f);
assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertEquals(0, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertTrue(target.isSimilar(other, 2.0f)); assertFalse(target_2.isSimilar(other_2, 0.0f)); assertFalse(target_3.isSimilar(other_3, 0.0f)); assertFalse(target_4.isSimilar(other_4, 1.2f)); assertFalse(target_5.isSimilar(other_5, 1.2f)); assertFalse(target_6.isSimilar(other_6, 1.2f));
assertEquals(1, FastMath.counterClockwise(p0, p1, p2));
assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(3.0f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(Float.POSITIVE_INFINITY, retval.x, 0.0f); assertEquals(9.52f, retval.y, 0.0f); assertEquals(0.8319998f, retval.z, 0.0f);
assertEquals(8, bufferPoints.remaining()); assertEquals(7, bufferPoints.remaining()); assertEquals(15, bufferLineLoop.remaining()); assertEquals(14, bufferLineStrip.remaining()); assertEquals(8, bufferLines.remaining()); assertEquals(18, bufferTriangleFan.remaining()); assertEquals(18, bufferTriangleStrip.remaining()); assertEquals(8, bufferTriangles.remaining()); assertEquals(0, bufferPatch.remaining());
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.y, 0.0f); assertEquals(1.32923e+36f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.0f, retval.getX(), 0.0f); assertEquals(0.0f, retval.getY(), 0.0f); assertEquals(0.0f, retval.getZ(), 0.0f);
assertEquals(-1, FastMath.sign(-2_147_483_647)); assertEquals(1, FastMath.sign(1)); assertEquals(0, FastMath.sign(0)); assertEquals(0.0f, FastMath.sign(0.0f), 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(9.5114f, retval.x, 0.001f); assertEquals(11.629f, retval.y, 0.001f); assertEquals(-2.4326f, retval.z, 0.001f);
assertEquals(1, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertNotNull(v); assertEquals(-0.9159, v.x, 0.001f); assertEquals(-8.2152, v.y, 0.001f); assertEquals(0.5626, v.z, 0.001f); assertNotNull(u); assertEquals(-0.5234f, u.x, 0.001f); assertEquals(0.0f, u.y, 0.0f); assertEquals(-0.8520f, u.z, 0.001f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(1.6379999f, retval.x, 0.01f); assertEquals(17.324999f, retval.y, 0.01f); assertEquals(12.9800005f, retval.z, 0.01f);
assertEquals(9, bufferTriangleFan.size()); assertEquals(15, bufferLineLoop.size()); assertEquals(8, bufferPoints.size()); assertEquals(8, bufferLines.size()); assertEquals(14, bufferLineStrip.size()); assertEquals(8, bufferTriangles.size()); assertEquals(18, bufferTriangleStrip.size());
assertNotNull(retval); assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertEquals("", generateSource(dl)); assertEquals("#define BOOL_VAR 1\\n", generateSource(dl)); assertEquals("#define BOOL_VAR 1\\n" + "#define INT_VAR 123\\n", generateSource(dl)); assertEquals("#define INT_VAR 123\\n", generateSource(dl)); assertEquals("#define BOOL_VAR 1\\n" + "#define INT_VAR 123\\n", generateSource(dl)); assertEquals("#define INT_VAR 123\\n", generateSource(dl));
assertEquals(0, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertEquals(0, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertNotNull(retval); assertEquals(3.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(0.0f, target.dot(null), 0.0f);
assertNotNull(retval); assertEquals(1.2208f, retval.x, 0.0f); assertEquals(7.1027f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertNull(retval);
assertEquals(1, FastMath.counterClockwise(p0, p1, p2));
assertEquals(5, buffer.remaining()); assertEquals(4, buffer.remaining()); assertEquals(5, buffer.remaining());
assertNotNull(retval); assertEquals(retval.x, 2.0f, 0.0f); assertEquals(retval.y, -1.32f, 0.01f); assertEquals(retval.z, 11.4f, 0.0f);
assertNotNull(retval); assertEquals(0.5657f, retval.x, 0.001f); assertEquals(2.1228f, retval.y, 0.001f); assertEquals(2.7457f, retval.z, 0.001f);
assertNotNull(retval); assertEquals(3.125f, retval.getX(), 0.0f); assertEquals(4.125f, retval.getY(), 0.0f); assertEquals(5.875f, retval.getZ(), 0.0f);
assertEquals(1, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertEquals(target, retval); assertNotNull(retval); assertEquals(-0.0f, retval.x, 0.0f); assertEquals(0.753f, retval.y, 0.01f); assertEquals(-0.0f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(0.0f, retval.x, 0.0f); assertEquals(0.0f, retval.y, 0.0f); assertEquals(0.0f, retval.z, 0.0f);
assertEquals(1, FastMath.pointInsideTriangle(t0, t1, t2, p));
assertNotNull(retval); assertEquals(Float.POSITIVE_INFINITY, retval.x, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.y, 0.0f); assertEquals(Float.POSITIVE_INFINITY, retval.z, 0.0f);
assertEquals(target, retval); assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f);
assertNotNull(retval); assertEquals(0.5657f, retval.x, 0.001f); assertEquals(2.1228f, retval.y, 0.001f); assertEquals(2.7457f, retval.z, 0.001f);
assertEquals(product, retval); assertNotNull(retval); assertEquals(4.86f, retval.x, 0.0f); assertEquals(9.945f, retval.y, 0.0f); assertEquals(11.715f, retval.z, 0.0f);
assertEquals(target, retval); assertNotNull(retval); assertEquals(5.8409867f, retval.x, 0.01f); assertEquals(-2.331271f, retval.y, 0.01f); assertEquals(3.3239825f, retval.z, 0.01f);
assertEquals(-1, loadBalanceFactor);
assertThat(true, is(true));
assertThat(ac.getValue(), is(runnable));
assertNull("Control socket is not null despite protocol error", controlConnection.controlSocket); assertFalse("QoSControlConnection reports as running", controlConnection.isRunning.get()); assertTrue("QoSControlConnection does not show connection issue", controlConnection.couldNotConnect.get());
assertNull("Control socket is not null despite protocol error", controlConnection.controlSocket); assertFalse("QoSControlConnection reports as running", controlConnection.isRunning.get()); assertTrue("QoSControlConnection does not show connection issue", controlConnection.couldNotConnect.get());
assertEquals("Forcefully thrown exception", ex.getMessage()); assertFalse("ControlConnection wrongly says it\'s running", controlConnection.isRunning.get()); assertTrue("ControlConnection wrongly says it could connect", controlConnection.couldNotConnect.get());
assertNull("Control socket is not null despite protocol error", controlConnection.controlSocket); assertFalse("QoSControlConnection reports as running", controlConnection.isRunning.get()); assertTrue("QoSControlConnection does not show connection issue", controlConnection.couldNotConnect.get());
assertNull("Control socket is not null despite protocol error", controlConnection.controlSocket); assertFalse("QoSControlConnection reports as running", controlConnection.isRunning.get()); assertTrue("QoSControlConnection does not show connection issue", controlConnection.couldNotConnect.get());
assertThat(call).isTrue();
assertThat(call).isTrue();
assertThat(call).isTrue();
assertThat(call).isTrue();
assertThat(call).isTrue();
assertThat(call).isTrue();
assertTrue(out.getMin() >= 0); assertTrue(out.getMax() >= 0);
assertSame(resp, result);
assertTrue(wrapper1.invokedCallable); assertTrue(wrapper2.invokedCallable); assertSame(out, result);
assertTrue(i1.contains(new DiscreteInterval(3,4)));
assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName()); assertEquals(serviceStatus.getStatus(), Status.DEGRADED); assertTrue(serviceStatus.getReasons().contains(SERVICE_1_NAME + ":" + SERVICE_1_REASON)); assertTrue(serviceStatus.getReasons().contains(SERVICE_2_NAME + ":" + SERVICE_2_REASON));
assertSame(factory, aspect.getPerformanceMonitorFactory());
assertEquals(456.78, converter.convertParameterValue("doubleValue", "double"));
assertTrue(i1.contains(i1));
assertTrue(wrapper1.invokedRunnable); assertTrue(wrapper2.invokedRunnable); assertTrue(f.set);
assertEquals(name, serviceStatus.getName()); assertEquals(status, serviceStatus.getStatus()); assertNotNull(serviceStatus.getReasons()); assertTrue(serviceStatus.getReasons().isEmpty());
assertEquals(0, impl.getPercentile(50));
assertSame(out, result);
assertEquals(valueString, invokeResult);
assertEquals("this&lt;contains&gt;evil&amp;characters", escapedString);
assertTrue(found);
assertNotNull(createdMonitor);
assertNotNull(createdBreaker);
assertTrue(wrapper1.invokedRunnable); assertTrue(wrapper2.invokedRunnable); assertTrue(f.set); assertSame(out, result);
assertFalse(impl.set(1000L, 500L));
assertNotNull(createdMonitor);
assertEquals(testSet, monitorNames);
assertEquals(CircuitBreaker.BreakerState.OPEN, impl.state); assertEquals(CircuitBreaker.BreakerState.CLOSED, impl.state);
assertEquals(CircuitBreaker.BreakerState.OPEN, impl.state); assertTrue(impl.lastFailure.get() >= start); assertTrue(impl.lastFailure.get() <= end);
assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName()); assertEquals(serviceStatus.getStatus(), Status.UP);
assertSame(resp, impl.execute(host, req, ctx));
assertEquals("[1,6]", i1.toString());
assertTrue(i1.contains(new DiscreteInterval(1,4)));
assertSame(result, theReturned);
assertEquals(7L, impl.getNanoTime().size());
assertSame(out, result);
assertEquals(3, i.size());
assertFalse(i1.equals(i2));
assertSame(result, resp);
assertEquals("some_string", converter.convertParameterValue("stringValue", "java.lang.String"));
assertEquals(Status.DEGRADED, impl.getStatus());
assertEquals((float)123.45, converter.convertParameterValue("floatValue", "float"));
assertEquals(0, impl.tally());
assertEquals(null, converter.convertParameterValue("nullString", "any_type_will_do"));
assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName()); assertEquals(serviceStatus.getStatus(), Status.DEGRADED); assertTrue(serviceStatus.getReasons().contains(SERVICE_2_NAME + ":" + SERVICE_2_REASON));
assertEquals(i1.hashCode(), i2.hashCode());
assertTrue(f1.set && !f2.set); assertTrue(f1.set && f2.set);
assertEquals(123, converter.convertParameterValue("intValue", "int"));
assertEquals(mockOperation2, operationInfo);
assertEquals(1, (new DiscreteInterval(1, 3)).getMin());
assertTrue(f1.set); assertFalse(f2.set);
assertEquals((long)456, converter.convertParameterValue("longValue", "long"));
assertEquals(CircuitBreaker.BreakerState.OPEN, impl.state);
assertFalse(i1.contains(new DiscreteInterval(0,2)));
assertNotNull(impl.getNanoTime()); assertNotNull(impl.getNanoTime());
assertEquals(null, converter.convertParameterValue("not_in_the_map", ""));
assertEquals("&lt;null&gt;", sanitizer.escapeValue(null));
assertSame(createdMonitor, secondMonitor);
assertNotNull(foundBreaker); assertEquals(createdBreaker, foundBreaker);
assertSame(out, result);
assertEquals(tripCount1 + 1, tripCount2); assertEquals(tripCount2, impl.getTripCount());
assertEquals(2, resultSet.size()); assertTrue(resultSet.contains(name1)); assertTrue(resultSet.contains(name2));
assertFalse(i1.contains(new DiscreteInterval(5,6)));
assertEquals(3, (new DiscreteInterval(1, 3)).getMax());
assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName()); assertEquals(serviceStatus.getStatus(), Status.DEGRADED); assertTrue(serviceStatus.getReasons().contains(SERVICE_1_NAME + ":" + SERVICE_1_REASON));
assertEquals(testSet, monitorNames);
assertFalse(i1.hashCode() == i2.hashCode());
assertEquals(returnResult, callResult);
assertSame(obj, result); assertEquals(CircuitBreaker.BreakerState.CLOSED, impl.state);
assertEquals(CircuitBreaker.BreakerState.OPEN, impl.state); assertTrue(impl.lastFailure.get() >= start); assertTrue(impl.lastFailure.get() <= end);
assertEquals(-1, impl.getRequestPerSecondThreshold());
assertFalse(impl.match(mockMetadataReader, mockMetadataReaderFactory));
assertNotNull(resp.getHeader("Expires")); assertEquals(resp.getHeader("Date"), resp.getHeader("Expires")); assertEquals("no-cache", resp.getHeader("Cache-Control"));
assertFalse(i1.equals(i2));
assertNotNull(circuitBreakerFactory);
assertArrayEquals(new long[] {0L, 0L, 0L}, impl.sample());
assertFalse(i1.equals(null));
assertTrue(f1.set); assertFalse(f2.set); assertSame(out, result);
assertEquals(2, attributeMap.size()); assertEquals(mockAttribute1, attributeMap.get(attributeName1)); assertEquals(mockAttribute2, attributeMap.get(attributeName2));
assertEquals(1, i.size());
assertSame(resp, result);
assertEquals(0L, impl.elapsedTime(1L, 1L));
assertFalse(i1.equals(new Object()));
assertSame(createdBreaker, secondBreaker);
assertNull(factory.findCircuitBreaker("breakerA")); assertNull(factory.findCircuitBreaker("breakerB"));
assertSame(createdBreaker, secondBreaker);
assertNull(foundMonitor);
assertSame(factory, aspect.getCircuitBreakerFactory());
assertEquals(3L, impl.elapsedTime(4L,7L));
assertSame(out, impl.invoke(c));
assertSame(resp, impl.execute(host, req, ctx));
assertEquals(10L, impl.elapsedTime(start, end));
assertEquals(true, converter.convertParameterValue("booleanValue", "boolean"));
assertNull(impl.handleRequest(req, resp));
assertEquals(Status.UP, impl.getStatus());
assertTrue(impl.getNanoTime() instanceof DiscreteInterval);
assertEquals(2, operationMap.size()); assertEquals(mockOperation1, operationMap.get(operationName1)); assertEquals(mockOperation2, operationMap.get(operationName2));
assertFalse(i1.equals(i2));
assertTrue(impl.canProceed());
assertTrue(pept.shouldTrip(new Exception()));
assertSame(out1, impl.invoke(c));
assertEquals("this/has/slashes", sanitizedString);
assertEquals(1L, impl.sampleGranularity());
assertTrue(i1.contains(new DiscreteInterval(3,6)));
assertNotNull(foundMonitor); assertEquals(createdMonitor, foundMonitor);
assertEquals(6L, impl.sampleGranularity());
assertNull(foundMonitor);
assertEquals(Status.DEGRADED, impl.getStatus()); assertEquals(CircuitBreaker.BreakerState.HALF_CLOSED, impl.state);
assertSame(resp, impl.execute(host, req, ctx));
assertNull(foundBreaker);
assertEquals(Status.DEGRADED, impl.getStatus());
assertTrue(f.set);
assertEquals(valueString, attributeValue);
assertNull(foundBreaker);
assertEquals(7L, impl.getNanoTime().size());
assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName()); assertEquals(serviceStatus.getStatus(), Status.DEGRADED); assertTrue(serviceStatus.getReasons().contains(SERVICE_2_NAME + ":" + SERVICE_2_REASON));
assertSame(createdMonitor, secondMonitor);
assertTrue(impl.match(mockMetadataReader, mockMetadataReaderFactory));
assertTrue(impl.shouldTrip(new IOException()));
assertTrue(i1.equals(i1));
assertFalse(i1.contains(new DiscreteInterval(2,4)));
assertNotNull(foundMonitor); assertEquals(createdMonitor, foundMonitor);
assertNotNull(bundle.loadClass("org.apache.winegrower.test.simpleservice.MyServiceImpl"));
assertEquals(new File(registry.getFramework().getParentFile(), "test-classes").getAbsolutePath(), bundle.getLocation());
assertTrue(entries.hasMoreElements()); assertEquals("org/apache/winegrower/test/simpleservice/META-INF/MANIFEST.MF", entries.nextElement()); assertFalse(entries.hasMoreElements());
assertEquals(0, bundle.compareTo(bundle));
assertNotNull(bundle.getEntry("org"));
assertNotSame(ref.getReference(), ref.getReference());
assertTrue(bundle.getResources("org").hasMoreElements()); assertFalse(bundle.getResources("javax/enterprise").hasMoreElements());
assertNull(bundle.adapt(String.class));
assertEquals("test", headers.get("Bundle-SymbolicName"));
assertNotNull(new BundleImpl(manifest, null, context, configuration, 1, null, null).getLocation());
assertEquals(ref.getReference(), ref.getReference());
assertNotNull(bundle.adapt(BundleWiring.class));
assertNotNull(bundle.getLoader());
assertNotNull(bundle.getResource("org")); assertNull(bundle.getResource("javax/enterprise"));
assertEquals(1, bundle.compareTo(registry.getBundles().get(0L).getBundle()));
assertEquals(1L, bundle.getBundleId());
assertNotNull(bundle.getBundleContext());
assertEquals("test", bundle.getSymbolicName());
assertEquals(0, bundle.getRegisteredServices().length);
assertEquals(bundle.getHeaders(), bundle.getHeaders("en"));
assertThat(uuid, is("28A8836D-5642-534B-B46B-34F87E078729"));
assertThat(tags, is(nullValue()));
assertThat(tags.size(), is(0));
assertEquals(200, readInt);
assertThat(result, is(""));
assertThat(tags, hasItems("a", "b", "c"));
assertThat(result, is("a,b,"));
assertThat(tags, is("a;b;c"));
assertThat(uuid, is(nullValue()));
assertThat(tags, hasItems("abc"));
assertThat(uuid, is("abc"));
assertThat(result, is("a;b;c"));
assertTrue(ex.getMessage().contains("Incorrect type of arguments"));
assertTrue(context.toString().startsWith(prefix.toString()));
assertNull(ps.getItem(table, key));
assertTrue(e.getMessage().contains("too long"));
assertTrue(mypp.isSatisfiedBy(ptd, null, null));
assertFalse(ps.deleteItem(table, key));
assertEquals(expectedUtf8, v.getIntegerValueUnderEncoding(ENCODING_URI_UTF_8)); assertEquals(expectedSha, v.getIntegerValueUnderEncoding(ENCODING_URI_SHA));
assertEquals(expectedUtf8, v3.getCompatibleIntegerValue(set1)); assertEquals(expectedSha, v3.getCompatibleIntegerValue(set2)); assertTrue(e.getMessage().contains("No encoding")); assertTrue(e.getMessage().contains("Too many encodings")); assertEquals(v1.getEncodingOrNull(), ENCODING_STRING_UTF_8); assertEquals(v2.getEncodingOrNull(), ENCODING_STRING_SHA); assertEquals(v3.getEncodingOrNull(), null);
assertEquals(NUMBER_OF_CONTEXTS_TO_GENERATE, contexts.size());
assertTrue(mypp.isSatisfiedBy(pt, null, null));
assertEquals(expectedHex, expectedDec); assertEquals(v.getIntegerValueOrNull(), expectedHex);
assertTrue(e.getMessage().contains("too long"));
assertEquals(resultSet, cp);
assertEquals(MyAttributeValueString.class, parseValueFromFunction(stringEqualFunction, "hello") .getClass()); assertEquals(MyAttributeValueDate.class, parseValueFromFunction( new URI("urn:oasis:names:tc:xacml:1.0:function:date-greater-than"), "2010-01-01") .getClass());
assertTrue(ex.getMessage().contains(BigInteger.valueOf(2).pow(PRODUCT_ELEMENTS).toString()));
assertEquals(expectedUtf8, v.getIntegerValueUnderEncoding(ENCODING_STRING_UTF_8)); assertEquals(expectedSha, v.getIntegerValueUnderEncoding(ENCODING_STRING_SHA));
assertEquals(0, ret.size());
assertEquals(expectedHex, expectedDec); assertEquals(v.getIntegerValueOrNull(), expectedHex);
assertEquals(resultSet, cp);
assertEquals(String.format("%.2f", value), sb.toString());
assertNotNull(labels); assertEquals(0, labels.exit); assertEquals(0, labels.deploy); assertEquals(2, labels.land);
assertEquals(1524182400000L, NMEA.parseDate("200418")); assertEquals(0L, NMEA.parseDate(null)); assertEquals(0L, NMEA.parseDate("")); assertEquals(0L, NMEA.parseDate("X"));
assertEquals("Kpow", kpow.name); assertEquals("USA", kpow.country); assertEquals(47.239, kpow.latLng().latitude, 0.001); assertEquals(-123.143, kpow.latLng().longitude, 0.001); assertEquals("Kpow", kpow.toString()); assertEquals("Kpow, USA", kpow.niceString()); assertEquals("Kpow", kpow.shortName()); assertFalse(kpow.isBASE());
assertEquals("straight", Convert.angle2(0.0)); assertEquals("90 right", Convert.angle2(90.0)); assertEquals("90 right", Convert.angle2(90.5)); assertEquals("130 right", Convert.angle2(135.0)); assertEquals("130 left", Convert.angle2(-135.0)); assertEquals("", Convert.angle2(Double.NaN));
assertEquals(2.0, estimator.refreshRate, 0.01); assertEquals(2.0, estimator.refreshRate, 0.01); assertEquals(1.0, estimator.refreshRate, 0.5); assertEquals(1.0, estimator.refreshRate, 0.25); assertEquals(1.0, estimator.refreshRate, 0.1); assertEquals(1.0, estimator.refreshRate, 0.01);
assertEquals("1541348400990,,gps,,47.6,-122.33,100,3,4,0", seattle.toRow());
assertEquals(1, LaserMeasurement.parse("100 200", false, true).size()); assertEquals(2, LaserMeasurement.parse("100 200\\n20.0 -50.0", false, true).size());
assertEquals(millis, parsed);
assertEquals(72258990L, NMEA.parseTime("200418.99")); assertEquals(0L, NMEA.parseTime(null)); assertEquals(0L, NMEA.parseTime("")); assertEquals(0L, NMEA.parseTime("X"));
assertEquals(5.0, estimator.refreshRate, 0.01); assertEquals(5.0, estimator.refreshRate, 0.01);
assertEquals(bearing, Geo.bearing(seattle.latitude, seattle.longitude, la.latitude, la.longitude), 0.01);
assertEquals(distance, Geo.distance(seattle.latitude, seattle.longitude, la.latitude, la.longitude), 0.01);
assertEquals("100.0, -100.0\\n", LaserMeasurement.render(points, true).toString()); assertEquals("328.1, -328.1\\n", LaserMeasurement.render(points, false).toString());
assertEquals("Kpow (2 mi)", nearestPlace.getString(shelton));
assertEquals("MPressure(1541348400990,1014.30)", pres.toString());
assertEquals("MLocation(1541348400990,47.600000,-122.330000,100.0,3,4)", seattle.toString());
assertEquals("0 kb", trackFile.getSize());
assertEquals("990 meters", Convert.distance2(999, 2)); assertEquals("999 meters", Convert.distance2(999, 3)); assertEquals("1 kilometer", Convert.distance2(1000, 1)); assertEquals("1.0 kilometers", Convert.distance2(1000, 2));
assertEquals(5.0, estimator.refreshRate, 0.01); assertEquals(5.0, estimator.refreshRate, 0.01);
assertEquals(2000, stats.exit.millis); assertEquals(4000, stats.deploy.millis); assertEquals(6000, stats.land.millis); assertEquals(100, stats.altitude.min, 0.01); assertEquals(1000, stats.altitude.max, 0.01);
assertEquals(1, reader.read().size()); assertEquals(1, reader.read().size());
assertArrayEquals(split, NMEA.splitNmea("$GPFOO,0,1,2,3*99"));
assertEquals(String.format("%02d", value), sb.toString());
assertEquals("1541348400990,111000,alt,1014.3", pres.toRow());
assertNull(labels);
assertEquals(200, trimmed.size());
assertEquals(2, count);
assertEquals("0 ft", Convert.distance(0.0)); assertEquals("3 ft", Convert.distance(1.0)); assertEquals("3.3 ft", Convert.distance(1.0, 1, true)); assertEquals("3.3", Convert.distance(1.0, 1, false)); assertEquals("", Convert.distance(Double.NaN)); assertEquals("Infinity", Convert.distance(Double.POSITIVE_INFINITY));
assertTrue(t.isReal());
assertEquals("47.24, -123.14, 0 ft", laser.locationString());
assertTrue(tempfile.delete()); assertEquals("d41d8cd98f00b204e9800998ecf8427e", checksum);
assertEquals("", alt.toRow());
assertEquals(40, out.length());
assertTrue(validate("$GPATT,45.781233,10.862333,1796.3,45.0,2.6,2.6,*72")); assertFalse(validate("$GPATT,45.781233,10.862333,1796.3,45.0,2.6,2.6,*99"));
assertEquals(0, tasks.pending.size()); assertEquals(2, tasks.pending.size()); assertEquals(1, tasks.pending.size()); assertEquals(0, tasks.pending.size());
assertEquals(String.format("%.3f", value), sb.toString());
assertFalse(LaserSearch.matchLaser(laser, "Norway")); assertTrue(LaserSearch.matchLaser(laser, "Fjord")); assertTrue(LaserSearch.matchLaser(laser, "Norway")); assertTrue(LaserSearch.matchLaser(laser, "Fjord Norway")); assertTrue(LaserSearch.matchLaser(laser, "fjo no"));
assertNull(plot.canvas); assertNotNull(plot.canvas);
assertFalse(t.isReal());
assertEquals("66-6f-6f", BluetoothUtil.byteArrayToHex("foo".getBytes()));
assertEquals("BASE", out);
assertTrue(placeFile.exists()); assertTrue(placeFile.isFresh()); assertEquals(1, places.size()); assertEquals(kpow.name, parsed.name); assertEquals(kpow.region, parsed.region); assertEquals(kpow.country, parsed.country); assertEquals(kpow.lat, parsed.lat, 0.0001); assertEquals(kpow.lng, parsed.lng, 0.0001); assertEquals(kpow.alt, parsed.alt, 0.0001); assertEquals(kpow.objectType, parsed.objectType);
assertEquals("1 m", Convert.distance3(1)); assertEquals("1 km", Convert.distance3(1000)); assertEquals("2 km", Convert.distance3(1609.34)); assertEquals("16 km", Convert.distance3(16093.4));
assertEquals(0, series.size()); assertEquals(1, series.size()); assertEquals(0, series.size());
assertEquals(5.0, estimator.refreshRate, 0.01); assertEquals(5.0, estimator.refreshRate, 0.01);
assertEquals(0, bounds.x.min, 0.01); assertEquals(1, bounds.y.max, 0.01); assertEquals(1, bounds.x.max, 0.01); assertEquals(-0.33, bounds.y.min, 0.01);
assertEquals("track 2018-01-01 16-20-00", trackFile.getName());
assertEquals(bearing, seattle.bearingTo(la), 0.01);
assertEquals("900.00 hPa", Convert.pressure(900.0)); assertEquals("", Convert.pressure(Double.NaN));
assertFalse(settings.isEnabled); assertTrue(settings.airplaneMode); assertEquals("Glide Ratio", settings.mode.name); assertEquals(0.0, settings.min, 0.001); assertEquals(4.0, settings.max, 0.001);
assertEquals("BASE", os.toString());
assertTrue(range.isEmpty()); assertFalse(range.isEmpty());
assertEquals("Kpow", nearestPlace.cached(shelton).name); assertEquals("USA", nearestPlace.cached(shelton).country);
assertEquals("3 ft", Convert.distance3(1)); assertEquals("3281 ft", Convert.distance3(1000)); assertEquals("1 mi", Convert.distance3(1609.34)); assertEquals("10 mi", Convert.distance3(16093.4)); assertEquals("", Convert.distance3(Double.NaN)); assertEquals("Infinity", Convert.distance3(Double.POSITIVE_INFINITY)); assertEquals("-Infinity", Convert.distance3(Double.NEGATIVE_INFINITY));
assertEquals(String.format("%03d", value), sb.toString());
assertEquals(distance, Geo.fastDistance(seattle.latitude, seattle.longitude, la.latitude, la.longitude), 0.001 * distance);
assertEquals(5.144, Convert.kts2mps(10.0), 0.1);
assertEquals("MAltitude(1541348400990,100.0)", alt.toString());
assertEquals(0, bounds.x.min, 0.01); assertEquals(1, bounds.y.max, 0.01); assertEquals(1.33, bounds.x.max, 0.01); assertEquals(0, bounds.y.min, 0.01);
assertEquals(la.latitude, moved.latitude, 0.01); assertEquals(la.longitude, moved.longitude, 0.01);
assertEquals(2.718, range.min, 0.0001); assertEquals(3.14, range.max, 0.0001);
assertEquals("0 ft", Convert.altitude(0.0)); assertEquals("3.3 kft", Convert.altitude(1000.0)); assertEquals("", Convert.altitude(Double.NaN)); assertEquals("Infinity", Convert.altitude(Double.POSITIVE_INFINITY));
assertNotNull(labels); assertEquals(2, labels.exit); assertEquals(4, labels.deploy); assertEquals(6, labels.land);
assertNull(labels);
assertEquals("LaserProfile(laser_id, Laser Name)", laser.toString());
assertEquals(0, bounds.x.min, 0.01); assertEquals(1, bounds.x.max, 0.01); assertEquals(0, bounds.y.min, 0.01); assertEquals(1, bounds.y.max, 0.01);
assertEquals(0x666f, BluetoothUtil.bytesToShort((byte) 0x66, (byte) 0x6f));
assertFalse(TrackSearch.matchTrack(trackNoPlace, "Norway")); assertTrue(TrackSearch.matchTrack(track, "Fjord")); assertTrue(TrackSearch.matchTrack(track, "Norway")); assertTrue(TrackSearch.matchTrack(track, "Fjord Norway")); assertTrue(TrackSearch.matchTrack(track, "fjo no"));
assertEquals("100.0, -100.0\\n50.0, -50.0\\n", LaserMeasurement.render(points, true).toString()); assertEquals("50.0, -50.0\\n100.0, -100.0\\n", LaserMeasurement.render(reordered, true).toString());
assertFalse(store.isUploading(trackFile)); assertFalse(store.isUploading(trackFile)); assertTrue(store.isUploading(trackFile)); assertEquals(0, store.getUploadProgress(trackFile)); assertEquals(1000, store.getUploadProgress(trackFile)); assertFalse(store.isUploading(trackFile)); assertEquals(cloudData, store.getCloudData(trackFile));
assertFalse(settings.isEnabled); assertTrue(settings.airplaneMode); assertEquals("Horizontal Speed", settings.mode.name); assertEquals(0.0, settings.min, 0.001); assertEquals(80.467, settings.max, 0.001); assertEquals(0, settings.precision); assertEquals(2.5, settings.speechInterval, 0.001); assertEquals(1.0, settings.speechRate, 0.001);
assertEquals(0, bounds.x.min, 0.01); assertEquals(0, bounds.x.max, 0.01); assertEquals(0, bounds.y.min, 0.01); assertEquals(0, bounds.y.max, 0.01);
assertEquals(1.0, estimator.refreshRate, 0.01); assertEquals(1.0, estimator.refreshRate, 0.01);
assertEquals(0, con.listChildPropertiesDataCalls.get()); assertNotNull(properties); assertFalse(properties.isEmpty()); assertEquals(1, con.listChildPropertiesDataCalls.get()); assertNotNull(properties); assertFalse(properties.isEmpty()); assertEquals(1 + TOTAL_TIMES, con.listChildPropertiesDataCalls.get());
assertEquals(0, con.getChildNodesCountCalls.get()); assertEquals(1, result); assertEquals(1, con.getChildNodesCountCalls.get());
assertEquals(0, con.getItemDataByIdCalls.get()); assertNotNull(item); assertEquals(1, con.getItemDataByIdCalls.get());
assertEquals(0, con.getChildPropertiesDataCalls.get()); assertNotNull(properties); assertFalse(properties.isEmpty()); assertEquals(1, con.getChildPropertiesDataCalls.get()); assertNotNull(properties); assertFalse(properties.isEmpty()); assertEquals(1 + TOTAL_TIMES, con.getChildPropertiesDataCalls.get());
assertEquals(0, con.getChildNodesDataCalls.get()); assertNotNull(nodes); assertFalse(nodes.isEmpty()); assertEquals(1, con.getChildNodesDataCalls.get()); assertNotNull(nodes); assertFalse(nodes.isEmpty()); assertEquals(1 + TOTAL_TIMES, con.getChildNodesDataCalls.get());
assertEquals(0, con.getItemDataByNodeDataNQPathEntryCalls.get());
assertEquals("****************Hey hey Wooo", res);
assertEquals(expectedXml,xmlOut);
assertEquals(null, FilenameUtils.normalize(null));
assertTrue(result.contains("DummyCalendar A") && result.contains("DummyCalendar B"));
assertEquals("test\\n", fileAsString);
assertEquals(amount, dispatcher.getPatternClients().size());
assertEquals(fileContent, Misc.streamToString(url.openStream()).trim());
assertEquals("C:\\\\a\\\\b\\\\", FilenameUtils.getFullPath("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("src" + File.separator + "test" + File.separator + "java" + File.separator + "nl" + File.separator + "nn" + File.separator + "adapterframework" + File.separator + "util" + File.separator + "test" + File.separator + "test.java", FilenameUtils.concat("src\\\\test\\\\java\\\\nl\\\\nn\\\\adapterframework\\\\util", "test\\\\test.java"));
assertNotNull("BuildInfoZip not found", zip); assertEquals("buildInfo name does not match", "ConfigurationName", buildInfoName); assertEquals("buildInfo version does not match", "789_20171002-1300", buildInfoVersion);
assertEquals("testString", res.getResult().asString());
assertEquals(getFile("simpleMockedHttpGet.txt"), result.trim());
assertEquals("application/xml; charset=UTF-8", sender.getFullContentType().toString());
assertNotNull(engine); assertNotNull(result); assertNotNull(svg);
assertFalse(schedulerHelper.contains("target", "something")); assertTrue(schedulerHelper.contains("target", null));
assertEquals( true, FilenameUtils.wildcardMatch("C:\\\\a\\\\b\\\\c.txt", "*.txt"));
assertEquals(6, slv.getMaxSize()); assertEquals( 10, slv.capacity()); assertEquals(6, slv.size()); assertEquals(2, slv.get(0));
assertEquals("15032385536", Long.toString(res));
assertThat(e.getMessage(),StringContains.containsString("fakeFailure")); assertTrue(target.isCloseCalled());
assertFalse("should not contain key [dummy-key]", AppConstants.getInstance().contains("dummy-key"));
assertEquals(4, list.size()); assertEquals("c,b,d,a",sequence);
assertNotNull(inputSource);
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals("a/b/", FilenameUtils.getPath("~userz/a/b/c.txt"));
assertEquals(expectedBasicNoNSFirstTwoElements, actual); assertThat(sc.hitCount.get("in"), Matchers.lessThan(15));
assertEquals(null, constants.getResolvedProperty("i.dont.exist"));
assertEquals(getFile("simpleMockedHttpGetWithContentType.txt"), result.trim());
assertFalse(Misc.getFileSystemFreeSpace().isEmpty());
assertEquals(true, FilenameUtils.equals("C:\\\\a\\\\b\\\\c.txt", "C:\\\\a\\\\b\\\\c.txt"));
assertEquals("4", constants.getResolvedProperty("overwrite.in.buildinfo"));
assertNotNull(inputSource);
assertFalse(sourceFolderPath.isEmpty()); assertEquals("-", uuid.substring(8, 9)); assertFalse(uuid.isEmpty());
assertEquals( 10, cs.getValue());
assertEquals(url.getFile(), url2.getFile());
assertNull(appConstants.get("configurations."+configurationName+".parentConfig"));
assertThat(e.getMessage(),StringContains.containsString("fakeFailure")); assertTrue(cos.isCloseCalled());
assertEquals(getFile("simpleMockedWss.txt"), result.trim());
assertEquals(fileContent, Misc.streamToString(url.openStream()).trim());
assertEquals("text/html; charset=ISO-8859-1", sender.getFullContentType().toString());
assertTrue(scheduleXml.contains("cronExpression="));
assertEquals("Donald Duck ** Hey hey ** Wooo", res);
assertEquals(11, res.getResult().asString().length());
assertEquals("test", baos.toString());
assertEquals("<!doctype txt>this is a text file. newly added string new line in the text file.", s1);
assertEquals(10, cs.getValue());
assertEquals("74657374", hex);
assertNotEquals(uuid.substring(8, 9), "-"); assertEquals(32, uuid.length());
assertTrue(compressedNumbers.length < s3.length()); assertEquals( 120, compressedNumbers[0]); assertEquals(-38, compressedNumbers[1]); assertTrue(compressedText.length < s1.length()); assertEquals(120, compressedText[0]); assertEquals(-38, compressedText[1]); assertTrue(compressedSymbols.length < s.length()); assertEquals(120, compressedSymbols[0]); assertEquals( -38, compressedSymbols[1]);
assertEquals(15, FilenameUtils.indexOfExtension("src/blabla/text.txt"));
assertNotNull(context); assertNotNull(file); assertNotNull(inputSource);
assertEquals(SUCCESS_MESSAGE, result.getResult().asString());
assertEquals( "NEW*NAME", Misc.toSortName("new_name"));
assertNotNull(engine); assertEquals("{format:\'SVG_STANDALONE\',engine:\'dot\'}", options.toJson(true)); assertEquals("{format:\'svg\',engine:\'dot\'}", options.toJson(false)); assertNotNull(svg);
assertEquals(15, c.getValue());
assertEquals(244, Misc.unsignedByteToInt(new Byte("-12"))); assertEquals(12, Misc.unsignedByteToInt(new Byte("12")));
assertNotNull(engine); assertNotNull(result); assertNotNull(svg);
assertEquals(getFile("simpleMockedWssMultipart.txt"), result.trim());
assertNotNull(inputSource);
assertEquals("one,two,three_value1value1,my_value2.value1,StageSpecifics_value1.value2.value1", result);
assertNotNull("BuildInfoZip not found", zip); assertTrue("file uploaded to mock database", result); assertEquals("buildInfo name does not match", "ConfigurationName", parameters.get("NAME")); assertEquals("buildInfo version does not match", "001_20191002-1300", parameters.get("VERSION"));
assertThat(e.getMessage(),StringContains.containsString("FakeTimeout"));
assertNotNull(inputSource);
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals( true, FilenameUtils.isExtension("C:\\\\a\\\\b\\\\c.txt", "txt"));
assertNull(url);
assertEquals(dummy, key);
assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>"+testString, actual); assertTrue(target.isCloseCalled());
assertNotNull(a); assertNotNull(b); assertNotNull(c); assertNotNull(d); assertNull(e); assertTrue(StringUtils.isNotEmpty(a.getDatasourceName())); assertTrue(StringUtils.isNotEmpty(b.getDatasourceName())); assertFalse(StringUtils.isNotEmpty(c.getDatasourceName())); assertFalse(StringUtils.isNotEmpty(d.getDatasourceName()));
assertEquals("<root> 23 <name>GeeksforGeeks</name> 23 <address> 23 <sector>142</sector> 23 <location>Noida</location> 23 </address> 23</root> r", s);
assertEquals("<jobMessages />", schedulerAdapter.getJobMessages(null).toXML().trim());
assertEquals("blalblalab ${key5}", result);
assertEquals("bailarbesos", res);
assertEquals(dummyInput, result);
assertEquals(expected,xmlWriter.toString());
assertEquals("123", constants.getResolvedProperty("unresolved.property"));
assertEquals(true, FilenameUtils.equalsOnSystem("C:\\\\a\\\\b\\\\c.txt", "C:\\\\A\\\\B\\\\c.txt")); assertNotEquals(true, FilenameUtils.equalsOnSystem("C:\\\\a\\\\b\\\\c.txt", "C:\\\\A\\\\B\\\\c.txt"));
assertFalse(Misc.getAge(1).isEmpty());
assertNull(sender.getFullContentType());
assertEquals(pipe.isToLowercase(), true);
assertEquals("text/xml; charset=UTF-8", sender.getFullContentType().toString());
assertThat(lastWarning,StringEndsWith.endsWith("PipeLine exit named [success] already exists"));
assertEquals(getFile("simpleMockedMultipartMtom2.txt"), result.trim());
assertNotNull("BuildInfoZip not found", zip); assertTrue("file uploaded to mock database", result); assertEquals("buildInfo name does not match", "ConfigurationName", parameters.get("NAME")); assertEquals("buildInfo version does not match", "001_20191002-1300", parameters.get("VERSION"));
assertEquals(getFile("simpleMockedWssMultipart2.txt"), result.trim());
assertEquals(getFile("simpleMockedHttpPut.txt"), result.trim());
assertEquals(expectedBasicNoNSFirstElement, actual); assertThat(sc.hitCount.get("in"), Matchers.lessThan(10));
assertEquals(getFile("simpleMockedMultipartMtom3.txt"), result.trim());
assertNotNull(engine); assertNotNull(svg);
assertEquals( "5", res.getResult().asString());
assertEquals(16, c.increase());
assertEquals("blalblalab value1.value2.value1", result);
assertFalse(s1.isEmpty());
assertEquals("DirectoryClassLoader", parentClassloader.getClass().getSimpleName()); assertNotNull(parentResource); assertNotNull(resource);
assertEquals( "inside the lebron file", os.toString());
assertThat(e.getMessage(),StringContains.containsString("fakeFailure")); assertTrue(cow.isCloseCalled());
assertEquals(getFile("simpleMockedHttpGetWithContentTypeAndCharset.txt"), result.trim());
assertNull(url);
assertNull(ClassUtils.getResourceURL(classLoader, fullPath, ""));
assertTrue(schedulerAdapter.getSchedulerMetaDataToXml(schedulerHelper.getScheduler()).toXML().contains("<schedulerMetaData "));
assertTrue(stringCollection.size() == 3); assertEquals("c", stringCollection.get(stringCollection.size() - 1));
assertEquals("txt", FilenameUtils.getExtension("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("test", baos.toString());
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals("blalblalab value1", result);
assertEquals(14, c.decrease());
assertEquals("2", constants.getResolvedProperty("overwrite.in.deploymentspecifics"));
assertNotNull("jar url not found", file); assertNotNull("jar file not found",jarFile); assertNotNull(inputSource);
assertNull("no content-type should be present", sender.getFullContentType());
assertNotNull(engine); assertNotNull(result); assertNotNull(svg);
assertEquals(expectedBasicNoNSBlock, actual);
assertEquals("c,b,d,a",sequence); assertFalse(it.hasNext());
assertNotNull(engine);
assertEquals( true, FilenameUtils.isExtension("C:\\\\a\\\\b\\\\c.txt", extensions));
assertEquals(getFile("simpleMockedMultipartHttp3.txt"), result.trim());
assertNotNull("jar url not found", file); assertNotNull("jar file not found",jarFile); assertNotNull(inputSource);
assertEquals("****", res);
assertTrue(context1.equals(context2));
assertEquals(tekst, actual); assertTrue("inputstream was not closed", closeChecker.inputStreamClosed);
assertEquals("-1", res.getResult().asString());
assertEquals(1L, session.get("long1", 0L)); assertEquals(1L, session.get("long1", -123L)); assertEquals(-1L, session.get("long2", 0L)); assertEquals(-1L, session.get("long2", -123L)); assertEquals(12345678910L, session.get("long3", 0L)); assertEquals(12345678910L, session.get("long3", -123L));
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals("1", constants.getResolvedProperty("only.in.appconstants"));
assertEquals(4, regexCount);
assertNotNull(inputSource);
assertEquals( 0, cs.getIntervalValue());
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals("C:\\\\a\\\\b\\\\c", FilenameUtils.removeExtension("C:\\\\a\\\\b\\\\c.txt"));
assertNull(appConstants.get("configurations."+configurationName+".parentConfig")); assertNull(resource);
assertEquals(query, expected, out);
assertEquals("text/xml; charset=ISO-8859-1", sender.getFullContentType().toString());
assertEquals(expectedText,textOut);
assertNotNull("jar url not found", file); assertNotNull("jar file not found",jarFile); assertNotNull(inputSource);
assertNull(schedulerSender.getParameterList().findParameter("_jobname")); assertTrue(schedulerHelper.contains(JOB_NAME));
assertEquals("failure", pipeRunResult.getPipeForward().getName());
assertEquals(s, res);
assertEquals(getFile("simpleMockedHttpCharset.txt"), result.trim());
assertEquals(getFile("simpleMockedHttpPost.txt"), result.trim());
assertNotNull(engine); assertNotNull(svg);
assertThat(sc.hitCount.get("in"), Matchers.lessThan(17)); assertEquals(expectedBasicNoNSFirstTwoElements, actual);
assertThat(e.getMessage(),StringContains.containsString("fakeFailure")); assertTrue(target.isCloseCalled());
assertEquals("C:/bar", FilenameUtils.normalize("C:\\\\foo\\\\..\\\\bar", true));
assertEquals(fileContent, Misc.streamToString(url.openStream()).trim());
assertNull(url);
assertNotNull("BuildInfoZip not found", zip); assertTrue("file uploaded to mock database", result); assertEquals("buildInfo name does not match", "ConfigurationName", parameters.get("NAME")); assertEquals("buildInfo version does not match", "789_20171002-1300", parameters.get("VERSION"));
assertEquals("test", writer.toString());
assertEquals("a\\\\b", FilenameUtils.getPathNoEndSeparator("C:\\\\a\\\\b\\\\c.txt"));
assertEquals(getFile("simpleMockedWssMultipartMtom.txt"), result.trim());
assertEquals("3GB", gb); assertEquals("14 MB", mb); assertEquals("146KB", kb);
assertNotNull(engine); assertNotNull(svg);
assertEquals(getFile("simpleMockedHttpPostJSON.txt"), result);
assertEquals(0, FilenameUtils.getPrefixLength("src/test/java/nl/nn/adapterframework/util/t.txt")); assertEquals(7, FilenameUtils.getPrefixLength("~userz/a/b/c.txt"));
assertEquals(res.length(), 10); assertFalse(res.isEmpty());
assertEquals(getFile("simpleMockedMultipartMtom1.txt"), result.trim());
assertEquals(41, FilenameUtils.indexOfLastSeparator("src\\\\test\\\\java\\\\nl\\\\nn\\\\adapterframework\\\\util\\\\t.txt"));
assertTrue(schedulerHelper.contains("target", "some-group")); assertFalse(schedulerHelper.contains("target", SchedulerHelper.DEFAULT_GROUP));
assertThat(resourceAsFileUrl, startsWith("file:")); assertNull("file protocol was allowed but should not", actual);
assertEquals(getFile("simpleMockedHttpGetWithParams.txt"), result.trim());
assertNull(appConstants.get("configurations."+configurationName+".parentConfig"));
assertEquals(30, c.getValue());
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals("<jobMessages />", schedulerAdapter.getJobMessages(null).toXML().trim());
assertEquals(input, result);
assertNull(appConstants.get("configurations."+configurationName+".parentConfig"));
assertThat(resourceAsFileUrl, startsWith("file:"));
assertEquals("t**t", res);
assertEquals( 10, cs.getValue());
assertEquals(File.separator + "baz", FilenameUtils.normalize("/foo/../bar/../baz"));
assertNotNull("BuildInfoZip not found", zip); assertEquals("buildInfo name does not match", "ConfigurationName", buildInfoName); assertEquals("buildInfo version does not match", "001_20191002-1300", buildInfoVersion);
assertNotNull(inputSource);
assertEquals("c.txt", FilenameUtils.getName("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("success", res.getPipeForward().getName());
assertEquals("text/xml; charset=ISO-8859-1", sender.getFullContentType().toString());
assertEquals("b",jmsRealmFactory.getFirstDatasourceJmsRealm());
assertNotNull("BuildInfoZip not found", zip); assertEquals("buildInfo name does not match", "ConfigurationName", buildInfoName); assertEquals("buildInfo version does not match", "123_20181002-1300", buildInfoVersion);
assertEquals("Phoebe", res);
assertEquals("src\\\\test\\\\java\\\\nl\\\\nn\\\\adapterframework\\\\util", FilenameUtils.separatorsToWindows("src/test/java/nl/nn/adapterframework/util"));
assertNull(sender.getFullContentType());
assertEquals(expectedBasicNoNS, actual);
assertEquals("2", constants.getResolvedProperty("only.in.deploymentspecifics"));
assertEquals("3", constants.getResolvedProperty("only.in.deploymentspecifics.parent"));
assertFalse(Misc.getFileSystemTotalSpace().isEmpty());
assertEquals("src/test/java/nl/nn/adapterframework/util", FilenameUtils.separatorsToUnix("src\\\\test\\\\java\\\\nl\\\\nn\\\\adapterframework\\\\util"));
assertEquals(31, uuid.length());
assertEquals(0, c.getValue());
assertEquals(4, result.size()); assertEquals(query1, result.get(0)); assertEquals(query2, result.get(1)); assertEquals(query3, result.get(2)); assertEquals(query4, result.get(3));
assertEquals( true, FilenameUtils.wildcardMatch("C:\\\\a\\\\b\\\\C.txt", "*.txt"));
assertEquals(dummyKey, retrievedKey);
assertEquals(14, slv.get(0));
assertEquals("c", FilenameUtils.getBaseName("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("failure", pipeRunResult.getPipeForward().getName());
assertThat(resourceAsFileUrl, startsWith("file:")); assertNull("file protocol was allowed but should not", actual);
assertEquals(getFile("simpleMockedWssMtom.txt"), result.trim());
assertEquals("test", new String(arr, StandardCharsets.UTF_8));
assertEquals("&lt;root&gt; 23 &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23 &lt;address&gt; 23 &lt;sector&gt;142&lt;/sector&gt; 23 &lt;location&gt;Noida&lt;/location&gt; 23 &lt;/address&gt; 23&lt;/root&gt; r", s);
assertEquals("&lt;!doctype txt&gt;this is a text file. newly added string new line in the text file.", s1);
assertEquals(getFile("simpleMockedHttpGetWithoutPRC.txt"), result.trim());
assertEquals(slv.getMaxSize(), 10); assertEquals("testString", slv.get(0));
assertEquals(getFile("simpleMockedMultipartHttp1.txt"), result.trim());
assertEquals("inside the lebron file", Misc.fileToString(file.getName()));
assertNotNull("jar url not found", file); assertNotNull("jar file not found",jarFile); assertNotNull(inputSource);
assertEquals(TEST_OBJECT, session.get("object1")); assertEquals(TEST_OBJECT.toString(), session.get("object1", "dummy"));
assertEquals("C:\\\\a\\\\b", FilenameUtils.getFullPathNoEndSeparator("C:\\\\a\\\\b\\\\c.txt"));
assertEquals(dummy, key);
assertEquals(getFile("simpleMockedHttpPutJSON.txt"), result);
assertEquals(getFile("simpleMockedMultipartHttp2.txt"), result.trim());
assertEquals(2,list.size()); assertEquals("b,a",sequence);
assertEquals("inside the lebron file", Misc.fileToString(file.getName(), " the end"));
assertEquals(getFile("simpleMockedHttpGetWithParams.txt"), result.trim());
assertEquals("testString", res.getResult().asString());
assertEquals("success", pipeRunResult.getPipeForward().getName());
assertEquals(172800000, res);
assertNotNull("BuildInfoZip not found", zip); assertEquals("buildInfo name does not match", "ConfigurationName", details.getName()); assertEquals("buildInfo version does not match", "001_20191002-1300", details.getVersion());
assertEquals(0, cs.getValue());
assertThat(resourceAsFileUrl, startsWith("file:"));
assertThat(e.getMessage(),StringContains.containsString("fakeFailure")); assertTrue(target.isCloseCalled());
assertEquals( "inside the lebron file", writer.toString());
assertEquals("4", constants.getResolvedProperty("only.in.buildinfo"));
assertFalse(Misc.getDurationInMs(14).isEmpty());
assertEquals("${resolve.me}", constants.getUnresolvedProperty("unresolved.property"));
assertNotNull("BuildInfoZip not found", zip); assertTrue("file uploaded to mock database", result); assertEquals("buildInfo name does not match", "ConfigurationName", parameters.get("NAME")); assertEquals("buildInfo version does not match", "123_20181002-1300", parameters.get("VERSION"));
assertEquals("3", constants.getResolvedProperty("overwrite.in.deploymentspecifics.parent"));
assertEquals(dummyKey, retrievedKey);
assertNotNull(engine);
assertEquals("~userz/", FilenameUtils.getPrefix("~userz/a/b/c.txt"));
assertNotNull(result); assertEquals("testJob", result.getKey().getName());
assertEquals(testString, actual); assertTrue(target.isCloseCalled());
assertEquals(25, c.increase(10));
assertEquals(5, c.decrease(10));
assertThat(e.getMessage(),StringContains.containsString("(NullPointerException) FakeException"));
assertFalse(uuid.isEmpty());
assertNull(appConstants.get("configurations."+configurationName+".parentConfig")); assertEquals(name, config.getClass().getSimpleName());
assertEquals(baseUrl.getFile(), ClassUtils.getResourceURL(this, fileName).getFile());
assertEquals("blalblalab value101", result);
assertEquals(1, result.size()); assertTrue(result.contains(third));
assertTrue(listGeno.isEmpty());
assertEquals(3, (long) genotype.getValue(2)); assertEquals(4, (long) genotype.getValue(2));
assertEquals(population, parents);
assertEquals("[mock=1;mock=2;mock=3;]", integerMapGenotype.toString());
assertEquals("[m1=1.0;m2=1.0;]", doubleMapGeno.toString());
assertEquals(3, neighborhoods.size());
assertTrue(listBoundGeno.isEmpty()); assertEquals(3, listBoundGeno.size());
assertEquals(0, doubleMapGeno.getIndexOf(m1));
assertEquals(1.5, epsilonEnhanced.get(first).getDouble(), 0.0); assertEquals(-1.0, epsilonEnhanced.get(second).getDouble(), 0.0);
assertTrue(doubleMapGeno.containsKey(m1)); assertFalse(doubleMapGeno.containsKey(m3));
assertNotEquals(doubleMapGeno, other); assertTrue(other.isEmpty());
assertTrue(listBoundGeno.isEmpty()); assertEquals(3, listBoundGeno.size());
assertEquals(0.4, doubleMapGeno.getValue(m2), 0.0); assertEquals(0.5, doubleMapGeno.getValue(m1), 0.0);
assertTrue(couple.getFirst().equals(first) || couple.getSecond().equals(first)); assertTrue(couple.getFirst().equals(second) || couple.getSecond().equals(second)); assertTrue(couple.getFirst().equals(second)); assertTrue(couple.getSecond().equals(second));
assertTrue(amplitudeMap.containsKey(first)); assertTrue(amplitudeMap.containsKey(second)); assertEquals(3.0, amplitudeMap.get(first), 0.0); assertEquals(2.0, amplitudeMap.get(second), 0.0);
assertEquals(2, ks.size()); assertTrue(ks.contains(m1)); assertTrue(ks.contains(m2));
assertEquals(2, couples.size());
assertTrue(listGeno.isEmpty());
assertEquals(scheduler.next().toString(), "first"); assertEquals(scheduler.next().toString(), "second"); assertEquals(scheduler.next().toString(), "third"); assertEquals(scheduler.next().toString(), "first");
assertEquals(afmPlayerView.getMyPlaylist().size(), playlist.size());
assertNotNull("Error parsing yyyy-MM-dd", localDate); assertEquals(2010, localDate.getYear()); assertEquals(2, localDate.getMonthOfYear()); assertEquals(22, localDate.getDayOfMonth()); assertNull("Error parsing yyyy-MM-dd", DateUtil.parseLocalDate("invalid date"));
assertEquals( "The parsed value is not the expected.", 1200300.10, parsed.doubleValue(), 1e-6); assertEquals( "The parsed value is not the expected.", 1200300.10, parsed.doubleValue(), 1e-6);
assertEquals(list.get(0), new Proxy(Type.HTTP , new InetSocketAddress(InetAddress.getByName(LOCALHOST), TEST_PORT_NUM)));
assertNull("The parsed value is not null.", parsed);
assertNull("The parsed value is not null.", parsed);
assertEquals("The parsed value is not the expected.", 0.39, parsed.doubleValue(), 0.0); assertEquals("The parsed value is not the expected.", 33.33, parsed.doubleValue(), 0.0);
assertEquals(list.get(0), new Proxy(Type.HTTP , new InetSocketAddress(InetAddress.getByName(LOCALHOST), TEST_PORT_NUM)));
assertNotNull("Error parsing yyyyMMdd", localDate); assertEquals(2001, localDate.getYear()); assertEquals(1, localDate.getMonthOfYear()); assertEquals(1, localDate.getDayOfMonth()); assertNull("Error parsing yyyyMMdd", DateUtil.parseLocalDate(toParse));
assertEquals(list.get(0), Proxy.NO_PROXY);
assertNull("The parsed value is not null.", parsed);
assertNull("The parsed value is not null.", parsed);
assertNotNull("Error parsing yyyy-MM", localDate); assertEquals(2000, localDate.getYear()); assertEquals(12, localDate.getMonthOfYear()); assertEquals(1, localDate.getDayOfMonth()); assertNull("Error parsing yyyy-MM", DateUtil.parseLocalDate(toParse));
assertEquals( "Error formatting yyyyMMdd for " + calendar.getTimeZone().getID(), "20110915", formatted); assertEquals( "Error formatting yyyyMMdd for " + calendar.getTimeZone().getID(), "20130701", formatted); assertEquals( "Error formatting yyyyMMdd for " + calendar.getTimeZone().getID(), "20110915", formatted); assertEquals( "Error formatting yyyyMMdd for " + calendar.getTimeZone().getID(), "20130131", formatted);
assertEquals("The parsed value is not the expected.", 0.39, parsed.doubleValue(), 0.0); assertEquals("The parsed value is not the expected.", 33.33, parsed.doubleValue(), 0.0);
assertEquals(list.get(0), new Proxy(Type.SOCKS , new InetSocketAddress(InetAddress.getByName(LOCALHOST), TEST_PORT_NUM)));
assertEquals(list.get(0), new Proxy(Type.HTTP, new InetSocketAddress(InetAddress.getByName(LOCALHOST), TEST_PORT_NUM)));
assertNull("The parsed value is not null.", parsed);
assertEquals("The parsed value is not the expected.", 0.39, parsed.doubleValue(), 0.0); assertEquals("The parsed value is not the expected.", 33.33, parsed.doubleValue(), 0.0);
assertEquals( "Error formatting yyyy-MM for " + calendar.getTimeZone().getID(), "2011-09", formatted); assertEquals( "Error formatting yyyy-MM for " + calendar.getTimeZone().getID(), "2013-07", formatted); assertEquals( "Error formatting yyyy-MM for " + calendar.getTimeZone().getID(), "2011-09", formatted); assertEquals( "Error formatting yyyy-MM for " + calendar.getTimeZone().getID(), "2013-01", formatted);
assertEquals( "The parsed value is not the expected.", 1200300.10, parsed.doubleValue(), 1e-6); assertEquals( "The parsed value is not the expected.", 1200300.10, parsed.doubleValue(), 1e-6);
assertThat(Geometry.isInsideTriangle(p, triangle)).isFalse();
assertThat(Geometry.isInsideTriangle(p, pA, pB, pC)).isTrue();
assertThat(Geometry.isInsideTriangle(p, triangle)).isTrue();
assertThat(df.format(Geometry.coordinatesAfterRotation(point, rotation).x)).isEqualTo("1.29"); assertThat(df.format(Geometry.coordinatesAfterRotation(point, rotation).y)).isEqualTo("1.53");
assertThat(Geometry.isInsideTriangle(p, pA, pB, pC)).isFalse();
assertThat(plugins).containsSequence(plugin4, plugin2, plugin3, plugin1); assertThat(orderedPlugins).containsSequence(plugin1, plugin2, plugin3, plugin4);
assertThat(AssertUtils.hasAnnotationDeep(Class1.class, MetaAnno2.class)).isTrue(); assertThat(AssertUtils.hasAnnotationDeep(Class1.class, MetaAnno1.class)).isTrue(); assertThat(AssertUtils.hasAnnotationDeep(Class1.class, Anno1.class)).isTrue(); assertThat(AssertUtils.hasAnnotationDeep(Class2.class, Anno2.class)).isTrue(); assertThat(AssertUtils.hasAnnotationDeep(Class2.class, MetaAnno2.class)).isTrue();
assertThat(createInMemoryClass).isNotNull();
assertThat(matches(pattern, toTest)).isEqualTo(assertion) .as("Check that " + toTest + " is " + assertion);
assertThat(underTest.matches(inMemo1)).isTrue();
assertThat(createInMemoryResource).isNotNull();
assertThat(underTest.getPlugins()).isNotNull();
assertThat(e).hasMessage(String.format("Plugin %s can not be instantiated", MyPlugin2.class));
assertThat(underTest.getPluginClasses()).isNotNull();
assertThat(createInMemoryResource).isNotNull();
assertFalse(p.hasText()); assertFalse(p.hasText()); assertTrue(p.hasText());
assertThat(search.getLevel()).isEqualTo(128); assertTrue(search.lessThanOrEqualTo(256)); assertTrue(search.lessThanOrEqualTo(128)); assertFalse(search.lessThanOrEqualTo(12));
assertEquals( (fieldOne.getLength() + fieldTwo.getLength() + fieldThree.getLength() + fieldFour.getLength() + fieldFive.getLength()), workArea.length());
assertTrue(this.converter.canConvert(Field.class)); assertFalse(this.converter.canConvert(Object.class));
assertFalse(workArea.isFiltered(fieldOne)); assertFalse(workArea.isFiltered(fieldTwo)); assertFalse(workArea.isFiltered(fieldThree)); assertTrue(workAreaWithFilters.isFiltered(fieldOne)); assertFalse(workAreaWithFilters.isFiltered(fieldTwo)); assertTrue(workAreaWithFilters.isFiltered(fieldThree));
assertFalse(support.hasItemDocumentation()); assertFalse(support.hasItemDocumentation()); assertTrue(support.hasItemDocumentation());
assertEquals(this.expectedLat, (double)geocodingResult.get(LatLongEnhancer.DEFAULT_LATLONG_CONFIG.getLatName())); assertEquals(this.expectedLong, (double)geocodingResult.get(LatLongEnhancer.DEFAULT_LATLONG_CONFIG.getLongName()));
assertFalse(gm.matches(id)); assertTrue(gm.matches(id + "10")); assertFalse(gm.matches("10" + id));
assertFalse(itemDocumentation.documents(id)); assertTrue(itemDocumentation.documents(id)); assertFalse(itemDocumentation.documents(id)); assertTrue(itemDocumentation.documents(id));
assertNull(new Paragraph().getText());
assertEquals(1, td.getColspan()); assertEquals(text, td.getText()); assertNull(td.getFootnote()); assertTrue(td.isHeader());
assertFalse(search.isRejected()); assertTrue(new Search(fix.requestLevelFour, fix.responseReject).isRejected());
assertTrue(this.policy.inputForSubSearches(fix.searchResult).isEmpty());
assertNotNull(desc.getParagraphs()); assertTrue(desc.getParagraphs().size()==1); assertEquals(txt, desc.getParagraphs().get(0).getText());
assertEquals(1, fd.getFields().size()); assertTrue(fd.getFields().contains(iDoc1));
assertEquals("#item-" + doc.getId(), vh.href(doc));
assertEquals(0,new TableRow().getColumns().size());
assertEquals(Arrays.asList("fieldTwo","fieldComposite","fieldFour","fieldFive"), workAreaWithFilters.getFieldIds()); assertEquals(workAreaWithFilters.getFieldIds(null,false,true), workAreaWithFilters.getFieldIds()); assertEquals(workAreaWithFilters.getFieldIds(Field.DEFAULT_SORT,false,true), workAreaWithFilters.getFieldIds());
assertThat(policy.findExactMatch(fix.searchResult)).isNull(); assertThat(policy.findExactMatch(fix.searchResult)).isEqualTo(searchZero);
assertEquals("10.2 - null (Function null)", vh.sectionHeaderText(10, 2,functionDocumentation)); assertEquals("10.2 - null (Function abc)", vh.sectionHeaderText(10, 2,functionDocumentation)); assertEquals("10.2 - xyz (Function abc)", vh.sectionHeaderText(10, 2,functionDocumentation));
assertThat(id.next().contains(prefix)); assertThat(id.next()).isNotEqualTo(id.next());
assertThat(locationTokens.firstTokenOfType(TokenType.AND)).isNull(); assertThat(locationTokens.firstTokenOfType(TokenType.STREET_NAME)).isEqualTo(streetNameToken);
assertTrue(Registry.containsWorkArea(workArea.getId())); assertTrue(this.length == workArea.length()); assertTrue(workArea.isFiltered(TestData.fieldOne));
assertThat(this.responseStatus.similarNamesCount()).isEqualTo(0); assertThat(this.responseStatus.similarNamesCount()).isEqualTo(1); assertThat(this.responseStatus.similarNamesCount()).isEqualTo(0);
assertEquals("foo",new Paragraph("foo").getText());
assertFalse(bd.hasText()); assertTrue(desc.hasText()); assertTrue(bd.hasText());
assertThat(search.getLevel()).isEqualTo(search.getRequest().getLevel()); assertThat(search.getLevel()).isEqualTo(128);
assertSame(expectedResult, actualResult.get(RestController.NORMALIZE_OBJ));
assertThat(this.policy.inputForSubSearches(fix.searchResult).size()).isEqualTo(1); assertTrue(this.policy.inputForSubSearches(fix.searchResult).contains(rejectedLevelOneSearch));
assertEquals("<sup>*</sup>", new Footnote("*",1).toHtml());
assertTrue(filter.matches(field("nin"))); assertFalse(filter.matches(field("lowHouseNumberOfDefiningAddressRange")));
assertFalse(fd.add(iDoc2)); assertTrue(fd.add(iDoc1)); assertEquals(1, fd.getFields().size()); assertTrue(fd.getFields().contains(iDoc1));
assertTrue(fd.joinDescriptionText(", ").isEmpty()); assertEquals(description.joinText(" "), fd.joinDescriptionText(" "));
assertEquals("",desc.toHtml()); assertEquals("<p>Blah, blah, blah</p>",desc.toHtml()); assertEquals("<p>Blah, blah, blah</p><p>Once upon a time</p>",desc.toHtml());
assertEquals("section-10.2", vh.sectionAnchor(10, 2));
assertEquals("", vh.summarize(doc, 4, "...")); assertEquals("123", vh.summarize(doc, 4, "...")); assertEquals("1234...", vh.summarize(doc, 4, "...")); assertEquals("1234...", vh.summarize(doc, 4, "..."));
assertSame(functionDocumentation, result); assertEquals(2, result.getFields().size()); assertTrue(result.getFields().contains(iDocOne)); assertTrue(result.getFields().contains(iDocTwo));
assertNull(support.getItemDocumentationId()); assertNull(support.getItemDocumentationId()); assertEquals("foo",support.getItemDocumentationId());
assertSame(version, this.restController.version());
assertFalse(new MissingDocumentation("xx").isDocumented());
assertEquals("<td></td>",td.toHtml()); assertEquals("<th></th>",td.toHtml()); assertEquals("<td colspan=\\"2\\"></td>",td.toHtml()); assertEquals("<td>blah note</td>",td.toHtml()); assertEquals("<td>blah <sup>*</sup>note</td>",td.toHtml());
assertTrue(this.converter.canConvert(DefaultConfiguration.class)); assertFalse(this.converter.canConvert(Configuration.class));
assertThat(search.responseMessageAppliesTo(streetName)) .isEqualTo(search.getResponse().messageAppliesTo(streetName)); assertFalse(search.responseMessageAppliesTo(streetName)); assertThat(search.responseMessageAppliesTo(streetName)) .isEqualTo(search.getResponse().messageAppliesTo(streetName)); assertTrue(search.responseMessageAppliesTo(streetName));
assertEquals(1, td.getColspan()); assertEquals("", td.getText()); assertEquals("*", td.getFootnote().getSymbol()); assertEquals(0, td.getFootnote().getPosition()); assertFalse(td.isHeader());
assertSame(expectedResult, actualResult.get(RestController.ADDRESS_OBJ));
assertEquals(1, td.getColspan()); assertEquals(text, td.getText()); assertEquals("*", td.getFootnote().getSymbol()); assertEquals(8, td.getFootnote().getPosition()); assertFalse(td.isHeader());
assertThat(result).isSameAs(expectedTasks);
assertTrue(this.grc.isRejected()); assertFalse(this.grc.isRejected()); assertTrue(this.grc.isRejected()); assertFalse(this.grc.isRejected());
assertTrue(function_twoWorkAreas.isTwoWorkAreas()); assertFalse(function_oneWorkArea.isTwoWorkAreas());
assertTrue(desc.joinText(", ").isEmpty()); assertEquals("one", desc.joinText(", ")); assertEquals("one, two", desc.joinText(", "));
assertFalse(this.policy.continueSearch(fix.searchResult));
assertNotNull(ClassUtils.getDefaultClassLoader());
assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode()); assertEquals(String.format("%s?%s", requestUri, queryString), result.getBody().getRequestUri()); assertEquals(e.getMessage(), result.getBody().getMessage());
assertSame(catMapper, ctx.getMapper(CatMapper.class)); assertSame(dogMapper, ctx.getMapper(DogMapper.class));
assertNotNull(result); assertNotNull(result.requiredArguments()); assertEquals("val1", result.requiredArguments().get("arg1")); assertEquals("val2", result.requiredArguments().get("arg2"));
assertSame(expectedResult, actualResult.get(RestController.BLOCKFACE_OBJ));
assertTrue(this.policy.levelEnabled(maxLevel - 1)); assertTrue(this.policy.levelEnabled(maxLevel)); assertFalse(this.policy.levelEnabled(maxLevel + 1));
assertEquals("1", actualResult.get("one"));
assertEquals("13X", geosupportVersion.formatRelease("13X"));
assertFalse(this.policy.continueSearch(fix.searchResult));
assertFalse(response.isCompassDirectionRequired()); assertTrue(new Response(fix.rejectStatus, fix.geocodes).isRejected());
assertEquals(platform.getName().replace("_", "-"), jniLibrary.getPlatformDirName());
assertTrue(this.converter.canConvert(TableData.class)); assertFalse(this.converter.canConvert(String.class));
assertNull(workArea.resolveInputValue(params, fieldOne)); assertEquals("X",workArea.resolveInputValue(params, fieldOne)); assertEquals("Y",workArea.resolveInputValue(params, fieldOne)); assertFalse(fieldFive.isInput()); assertNull(workArea.resolveInputValue(params, fieldFive));
assertFalse(fd.hasDisplayName()); assertTrue(fd.hasDisplayName());
assertNotNull(desc.getParagraphs()); assertTrue(desc.getParagraphs().isEmpty());
assertThat(policy.clean("")).isEqualTo(""); assertThat(policy.clean(" ")).isEqualTo(" "); assertThat(policy.clean("a")).isEqualTo("A"); assertThat(policy.clean("a ")).isEqualTo("A"); assertThat(policy.clean(" a ")).isEqualTo("A"); assertThat(policy.clean(" ave a ")).isEqualTo("A"); assertThat(policy.clean("St Marks")).isEqualTo("MARKS");
assertThat(request.summarize()).isEqualTo("blockface [onStreet=null, crossStreetOne=null, crossStreetTwo=null, borough=null]"); assertThat(request.summarize()).isEqualTo("blockface [onStreet=bway, crossStreetOne=w 100 st, crossStreetTwo=w 101 st, borough=manhattan]");
assertFalse(ctx.containsMapper(CatMapper.class)); assertSame(catMapper, ctx.getMapper(CatMapper.class));
assertEquals("libwoof.so",SUPPORTED_LINUX_PLATFORM.getSharedLibraryFileName("woof")); assertEquals("Meow.dll",SUPPORTED_WINDOWS_PLATFORM.getSharedLibraryFileName("Meow"));
assertTrue(this.mapConverter.canConvert(Map.class)); assertTrue(this.mapConverter.canConvert(SortedMap.class)); assertTrue(this.mapConverter.canConvert(HashMap.class)); assertTrue(this.mapConverter.canConvert(TreeMap.class)); assertFalse(this.mapConverter.canConvert(String.class));
assertThat(search.getSimilarNames()).isSameAs(search.getResponse().getSimilarNames());
assertSame(this.paragraphs,desc.getParagraphs());
assertFalse(groupDocumentation.isMember(itemDocumentation)); assertTrue(groupDocumentation.isMember(itemDocumentation));
assertTrue(footnote.linksTo(footnoteSameSymbol)); assertTrue(footnoteSameSymbol.linksTo(footnote)); assertFalse(footnote.linksTo(footnoteDifferentSymbol)); assertFalse(footnoteDifferentSymbol.linksTo(footnote));
assertSame(expectedResult, actualResult.get(RestController.ADDRESS_OBJ));
assertEquals(" ", new String(actualBytes));
assertSame(expectedResult, actualResult.get(RestController.ADDRESS_OBJ));
assertEquals("<p>foo</p>",new Paragraph("foo").toHtml()); assertEquals("<p></p>",new Paragraph().toHtml());
assertSame(Boroughs.MANHATTAN, Boroughs.fromName(name)); assertSame(Boroughs.MANHATTAN, Boroughs.fromName(name.toLowerCase())); assertSame(Boroughs.MANHATTAN, Boroughs.fromName(name.toUpperCase())); assertNull(Boroughs.fromName("New Yawk"));
assertEquals("<tr></tr>",tr.toHtml()); assertEquals("<tr></tr>",tr.toHtml()); assertEquals("<tr><td>foo</td></tr>",tr.toHtml());
assertEquals(1, td.getColspan()); assertEquals("", td.getText()); assertNull(td.getFootnote()); assertFalse(td.isHeader());
assertThat(response.similarNamesCount()).isEqualTo(0); assertThat(response.similarNamesCount()).isEqualTo(1);
assertEquals(new String(expectedBytes), new String(actualBytes));
assertEquals("#item-" + doc.getId(), vh.href(ids));
assertFalse(geocodingResult.containsKey(LatLongEnhancer.DEFAULT_LATLONG_CONFIG.getLatName())); assertFalse(geocodingResult.containsKey(LatLongEnhancer.DEFAULT_LATLONG_CONFIG.getLongName()));
assertThat(locationTokens.parseSummary()).isEqualTo("ADDRESS{ HOUSE_NUMBER[22], STREET_NAME[Broadway] }, COUNTY{ BOROUGH_NAME[Manhattan] }");
assertTrue(desc.summarize(4).isEmpty()); assertEquals("12",desc.summarize(4)); assertEquals("12 3",desc.summarize(4));
assertSame(expectedResult, actualResult.get(RestController.INTERSECTION_OBJ));
assertNotNull(result); assertTrue(result.exists());
assertEquals(functionCode, result.get(InputParam.GEOSUPPORT_FUNCTION_CODE)); assertEquals(houseNumber, result.get(InputParam.HOUSE_NUMBER)); assertEquals(streetName, result.get(InputParam.STREET_NAME)); assertEquals(boroughCode, result.get(InputParam.BOROUGH_CODE)); assertEquals(requiredArgValue, result.get(requiredArgKey));
assertNull(this.dataDictionary.findItem(itemDocumentation.getId())); assertSame(this.itemDocumentation, this.dataDictionary.findItem(itemDocumentation.getId())); assertNull(this.dataDictionary.findItem(this.aliases.get(0))); assertSame(this.itemDocumentation, this.dataDictionary.findItem(this.aliases.get(0)));
assertTrue(this.policy.continueSearch(fix.searchResult));
assertEquals("1", actualResult.get("one")); assertEquals("2", actualResult.get("two"));
assertSame(Boroughs.QUEENS, Boroughs.fromName(name)); assertSame(Boroughs.QUEENS, Boroughs.fromName(name.toLowerCase())); assertSame(Boroughs.QUEENS, Boroughs.fromName(name.toUpperCase())); assertNull(Boroughs.fromName("Queensland"));
assertSame(expectedResult, actualResult.get(RestController.BBL_OBJ));
assertTrue(filter.matches(field("lowCrossStreetB5SC1"))); assertTrue(filter.matches(field("lowCrossStreetB5SC10"))); assertTrue(filter.matches(field("highCrossStreetB5SC1"))); assertTrue(filter.matches(field("highCrossStreetB5SC10"))); assertFalse(filter.matches(field("highCrossStreetB5SC")));
assertEquals(osName, OperatingSystemUtils.uname());
assertFalse(fd.isGroupMember(iDoc2)); assertFalse(fd.isGroupMember(iDoc1)); assertTrue(fd.isGroupMember(iDoc2)); assertFalse(fd.isGroupMember(iDoc1));
assertFalse(this.responseStatus.isCompassDirectionRequired()); assertTrue(this.responseStatus.isCompassDirectionRequired());
assertEquals("(cat)", PatternUtils.literalMatchGroup(list)); assertEquals("(cat|dog)", PatternUtils.literalMatchGroup(list)); assertEquals("(cat|dog|rat)", PatternUtils.literalMatchGroup(list));
assertTrue(this.policy.inputForSubSearches(fix.searchResult).isEmpty());
assertEquals(GeosupportVersion.RELEASE_NOT_AVAILABLE,this.geosupportVersion.getRelease()); assertEquals("13X", geosupportVersion.getRelease());
assertEquals("10.2", vh.sectionNumber(10, 2));
assertSame(this.items, this.dataDictionary.getItems());
assertEquals("item-" + doc.getId(), vh.itemAnchor(doc));
assertTrue(fd.summarize(2).isEmpty()); assertEquals(description.summarize(2), fd.summarize(2));
assertSame(expectedResult, actualResult.get(RestController.PLACE_OBJ));
assertTrue(this.policy.inputForSubSearches(fix.searchResult).isEmpty());
assertFalse(fix.requestLevelOne.containsAssignedValue()); assertTrue(this.policy.nextLevelEnabled(fix.requestLevelOne)); assertTrue(fix.requestLevelOne.containsAssignedValue()); assertFalse(this.policy.nextLevelEnabled(fix.requestLevelOne));
assertNull(this.fileInfo.applyFormat(null)); assertEquals(badDate,this.fileInfo.applyFormat(badDate)); assertEquals("2014-01-21",this.fileInfo.applyFormat("140121"));
assertEquals(" ", new String(actualBytes));
assertFalse(response.messageAppliesTo(null)); assertFalse(response.messageAppliesTo("truck")); assertTrue(response.messageAppliesTo("truck")); assertFalse(response.messageAppliesTo("duck")); assertFalse(response.messageAppliesTo(null));
assertEquals(platform.getSharedLibraryFileName(name), jniLibrary.getLibraryFileName());
assertEquals("#null",vh.href((String)null)); assertEquals("#xyz", vh.href("xyz"));
assertFalse(this.grc.hasMessage()); assertTrue(this.grc.hasMessage());
assertEquals(GeosupportVersion.VERSION_NOT_AVAILABLE,this.geosupportVersion.getVersion()); assertEquals("13.2", geosupportVersion.getVersion());
assertSame(expectedResult, actualResult.get(RestController.BIN_OBJ));
assertSame(columns,new TableRow(columns).getColumns());
assertSame(Boroughs.BRONX, Boroughs.fromName(name)); assertSame(Boroughs.BRONX, Boroughs.fromName(name.toLowerCase())); assertSame(Boroughs.BRONX, Boroughs.fromName(name.toUpperCase())); assertNull(Boroughs.fromName("Boogie Down"));
assertTrue(this.policy.nextLevelEnabled(fix.requestLevelZero)); assertTrue(this.policy.nextLevelEnabled(fix.requestLevelOne)); assertFalse(this.policy.nextLevelEnabled(fix.requestLevelFour));
assertEquals(expectedGrc1.getReturnCode(), actualWrappedMap.getReturnCode1()); assertEquals(expectedGrc1.getReasonCode(), actualWrappedMap.getReasonCode1()); assertEquals(expectedGrc1.getMessage(), actualWrappedMap.getMessage1()); assertEquals(expectedGrc2.getReturnCode(), actualWrappedMap.getReturnCode2()); assertEquals(expectedGrc2.getReasonCode(), actualWrappedMap.getReasonCode2()); assertEquals(expectedGrc2.getMessage(), actualWrappedMap.getMessage2());
assertTrue(documentation.applicableFunctions(itemDocumentation).isEmpty()); assertEquals(Documentation.BLOCKFACE_FUNCTION, result.get(0)); assertEquals(Documentation.INTERSECTION_FUNCTION, result.get(1)); assertEquals(Documentation.ADDRESS_AND_PLACE_FUNCTIONS, result.get(2)); assertEquals(Documentation.BIN_FUNCTION, result.get(3)); assertEquals(Documentation.BBL_FUNCTION, result.get(4)); assertEquals(5, result.size());
assertFalse(response.getSimilarNames().contains("abc")); assertThat(response.getSimilarNames()).isSameAs(response.getResponseStatus().getSimilarNames()); assertTrue(response.getSimilarNames().contains("abc"));
assertSame(Boroughs.STATEN_ISLAND, Boroughs.fromName(name)); assertSame(Boroughs.STATEN_ISLAND, Boroughs.fromName(name.toLowerCase())); assertSame(Boroughs.STATEN_ISLAND, Boroughs.fromName(name.toUpperCase())); assertNull(Boroughs.fromName("Shaolin"));
assertSame(expectedResult, actualResult.get(RestController.PLACE_OBJ));
assertEquals(id, md.getId()); assertEquals(MissingDocumentation.MESSAGE, md.getDescription().joinText(""));
assertEquals("gMember", vh.memberText(null, member)); assertEquals("gMember1 to 12", vh.memberText(group, member));
assertEquals(this.fileInfo.applyFormat(dateString),this.fileInfo.getFormattedDate());
assertFalse(bd.isDocumented()); assertTrue(bd.isDocumented());
assertEquals(2, td.getColspan()); assertEquals(text, td.getText()); assertNull(td.getFootnote()); assertFalse(td.isHeader());
assertEquals(Double.parseDouble(this.xCoord), result.getX()); assertEquals(Double.parseDouble(this.yCoord), result.getY());
assertThat(specs.isEmpty()).isFalse();
assertEquals(6, result.size()); assertSame(address,result.get(0)); assertSame(bbl,result.get(1)); assertSame(bin,result.get(2)); assertSame(blockface,result.get(3)); assertSame(intersection,result.get(4)); assertSame(place,result.get(5));
assertSame(expectedResult, actualResult.get(RestController.PLACE_OBJ));
assertThat(policy.findExactMatch(fix.searchResult)).isNull(); assertThat(policy.findExactMatch(fix.searchResult)).isNull();
assertSame(Boroughs.BROOKLYN, Boroughs.fromName(name)); assertSame(Boroughs.BROOKLYN, Boroughs.fromName(name.toLowerCase())); assertSame(Boroughs.BROOKLYN, Boroughs.fromName(name.toUpperCase())); assertNull(Boroughs.fromName("Brooklyn Zoo"));
assertFalse(this.grc.isCompassDirectionRequired()); assertTrue(this.grc.isCompassDirectionRequired());
assertSame(functionDocumentation, result); assertEquals(4, result.getFields().size()); assertFalse(result.getFields().contains(new MissingDocumentation(this.groupedField.getId()))); assertTrue(result.getFields().remove(iDocOne)); assertTrue(result.getFields().remove(iDocTwo)); assertTrue(result.getFields().remove(iDocFour)); assertEquals(1, result.getFields().size()); assertTrue(result.getFields().first() instanceof MissingDocumentation);
assertEquals("a", result.get(fieldOne.getId())); assertEquals("bc", result.get(fieldTwo.getId())); assertEquals("def", result.get(fieldThree.getId())); assertEquals("bcdef", result.get(fieldComposite.getId()));
assertFalse(desc.hasText()); assertFalse(desc.hasText()); assertFalse(p.hasText()); assertFalse(desc.hasText()); assertTrue(p.hasText()); assertTrue(desc.hasText());
assertTrue(OperatingSystemUtils.isWindows()); assertFalse(OperatingSystemUtils.isWindows());
assertFalse(response.isCompassDirectionRequired()); assertTrue(response.isCompassDirectionRequired()); assertFalse(response.isCompassDirectionRequired());
assertFalse(this.grc.hasReasonCode()); assertTrue(this.grc.hasReasonCode());
assertEquals("abcd", new String(actualBytes)); assertEquals("abcd", new String(actualBytes)); assertEquals("ab ", new String(actualBytes));
assertEquals(DocumentationController.DOC_VIEW_NAME, this.documentationController.doc(modelMap)); assertSame(version, modelMap.getAttribute("version")); assertSame(doc, modelMap.get("doc"));
assertFalse(this.grc.hasSimilarNames()); assertTrue(this.grc.hasSimilarNames()); assertFalse(this.grc.hasSimilarNames());
assertEquals(expectedResourceName, jniLibrary.getResourceName());
assertEquals(abc.getId().compareTo(def.getId()),abc.compareTo(def)); assertEquals(def.getId().compareTo(abc.getId()),def.compareTo(abc)); assertEquals(0, abc.compareTo(abcAlso)); assertEquals(0, abcAlso.compareTo(abc));
assertEquals(string, ByteBufferUtils.readString(buffer)); assertTrue(positionBeforeCall==buffer.position());
assertThat(search.getResponseStatus()).isSameAs(search.getResponse().getResponseStatus());
assertSame(expectedResult, actualResult.get(RestController.ADDRESSPOINT_OBJ));
assertThat(result).isSameAs(expectedTasks);
assertEquals( 1d, module.costForMovingInLevel( LevelType.GROUND ) ); assertEquals( Double.MAX_VALUE, module.costForMovingInLevel( LevelType.SKY ) ); assertEquals( Double.MAX_VALUE, module.costForMovingInLevel( LevelType.SPACE ) ); assertEquals( (double) levelType.ordinal(), module.costForMovingInLevel( levelType ) );
assertEquals( 0d, module.costForLevelingToLevel( LevelType.GROUND ) ); assertEquals( 1d, module.costForLevelingToLevel( LevelType.SKY ) ); assertEquals( 3d, module.costForLevelingToLevel( LevelType.SPACE ) );
assertThat(AutoServices.classesAnnotated(Foo.class), is(List.arrayList(Bar.class.getName())));
assertNull(Dispatcher.execute("x"));
assertTrue(List.iterableList(injected).isEmpty());
assertEquals(stamp.getEvent(), fork[0].getEvent()); assertEquals(stamp.getEvent(), fork[1].getEvent()); assertEquals(splitIDs[0], fork[0].getId()); assertEquals(splitIDs[1], fork[1].getId());
assertFalse(zero.isOne()); assertTrue(one.isOne()); assertFalse(zeroZero.isOne()); assertFalse(zeroOne.isOne()); assertFalse(oneZero.isOne()); assertFalse(oneOne.isOne());
assertEquals(zero, zeroSplit[0]); assertEquals(zero, zeroSplit[1]); assertEquals(oneZero, oneSplit[0]); assertEquals(zeroOne, oneSplit[1]);
assertTrue(peek[0].equals(stamp)); assertTrue(peek[1].getId().isZero()); assertTrue(peek[1].getEvent().equals(stamp.getEvent()));
assertEquals(zero, zero.sum(zero)); assertEquals(one, zero.sum(one)); assertEquals(one, one.sum(zero));
assertArrayEquals(expected, zeroOne.split());
assertEquals(one, oneZero.sum(zeroOne)); assertEquals(one, zeroOne.sum(oneZero)); assertEquals(expected, oneZero.sum(IDs.with(zero, oneZero)));
assertArrayEquals(expected, oneOne.split());
assertEquals(event1, event1.normalize()); assertEquals(event2, event2.normalize());
assertTrue(zero.isLeaf()); assertTrue(one.isLeaf()); assertFalse(zeroZero.isLeaf()); assertFalse(zeroOne.isLeaf()); assertFalse(oneZero.isLeaf()); assertFalse(oneOne.isLeaf());
assertTrue(stamp.getEvent().leq(evented.getEvent()));
assertTrue(zero.isZero()); assertFalse(one.isZero()); assertFalse(zeroZero.isZero()); assertFalse(zeroOne.isZero()); assertFalse(oneZero.isZero()); assertFalse(oneOne.isZero());
assertTrue(event1.leq(event1)); assertTrue(event1.leq(event2)); assertTrue(event1.leq(event3)); assertFalse(event2.leq(event1)); assertTrue(event2.leq(event2)); assertFalse(event2.leq(event3)); assertFalse(event3.leq(event1)); assertFalse(event3.leq(event2)); assertTrue(event3.leq(event3));
assertArrayEquals(expected, oneZero.split());
assertTrue(seedStamp.equals(new Stamp())); assertFalse(seedStamp.equals(forkedStamp1)); assertTrue(forkedStamp1.equals(forkedStamp1)); assertFalse(forkedStamp1.equals(forkedStamp2));
assertEquals(expected, event.normalize()); assertEquals(expected, event.normalize());
assertEquals(event1, event1.join(event1)); assertEquals(event2, event1.join(event2)); assertEquals(event3, event1.join(event3)); assertEquals(expected, event2.join(event3));
assertEquals(expected, forkedStamp1.join(forkedStamp2)); assertEquals(expected, forkedStamp2.join(forkedStamp1));
assertTrue(event1.isLeaf()); assertFalse(event2.isLeaf());
assertEquals(graph.findRootNode(graph.findNode("n5")), graph.findNode("n1")); assertEquals(graph.findRootNode(graph.findNode("n1")), graph.findNode("n1")); assertNotSame(graph.findRootNode(graph.findNode("n1")), graph.findNode("n5")); assertEquals(graph.findRootNode(graph.findNode("n4")), graph.findNode("n2"));
assertFalse(status); assertFalse(status); assertTrue(status); assertFalse(status); assertTrue(status);
assertNotNull(wrapper);
assertNull(graph.findNode("n2")); assertNotNull(graph.findNode("n6"));
assertTrue(ValidityTools.isLocalhost("127.0.0.1")); assertFalse(ValidityTools.isLocalhost("127.0.1.1")); assertTrue(ValidityTools.isLocalhost("localhost")); assertFalse(ValidityTools.isLocalhost("129.0.0.1"));
assertTrue(ss1.validate()); assertTrue(is.validate()); assertTrue(sensorConfig.validate());
assertTrue(ss.getSqlQuery().trim().equals("select * from wrapper")); assertEquals(ss.getSqlQuery().trim(),"select * from wrapper");
assertFalse(tweets.getBody().isEmpty());
assertEquals("lsof -F -T +c0 -l -s -a +L 5 -n -N -P -U -S 100 -b", _builder.build(createPreferencesWithEmptyFilters(createOtherPage())));
assertThat(properties.keySet().size(), is(0)); assertThat(properties.values().size(), is(0));
assertThat(allHaveSameLength(i), is(false));
assertThat(fossologySshUsername, not(isEmptyOrNullString()));
assertThat(allHaveSameLength(iArray, sArray, bArray), is(false));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertEquals(2, handler.getMyProjects(user1.getEmail()).size()); assertEquals(1, handler.getMyProjects(user2.getEmail()).size()); assertEquals(1, handler.getMyProjects(user3.getEmail()).size());
assertThat(fossologyHandler.checkConnection(), is(requestStatus));
assertEquals("P2", project2.getId());
assertThat(match.getDistance(), is(0));
assertEquals(1, attachmentsToKeep.size()); assertTrue(attachmentsToKeep.contains(attachmentAccepted1)); assertFalse(attachmentsToKeep.contains(attachmentRejected1)); assertFalse(attachmentsToKeep.contains(attachmentRejected2)); assertEquals(3, attachmentsToKeep.size()); assertTrue(attachmentsToKeep.contains(attachmentAccepted1)); assertTrue(attachmentsToKeep.contains(attachmentRejected1)); assertTrue(attachmentsToKeep.contains(attachmentRejected2));
assertThat( parser.isApplicableTo(attachment, dummyUser, new Project().setVisbility(Visibility.ME_AND_MODERATORS).setCreatedBy(dummyUser.getEmail()) .setAttachments(Collections.singleton( new Attachment().setAttachmentContentId(attachment.getAttachmentContentId())))), is(true));
assertThat(successIdsFromUpdateMap(failedUpdateMap), containsInAnyOrder("u1", "u2", "u3", "n1", "n2", "o1", "o2", "o3"));
assertThat(repo.getHostKey(), notNullValue());
assertEquals(1, vendors.size());
assertThat(uploadId, is((long) -1));
assertThat(fossologyFileHandler.sendToFossology(releaseId, user, clearingTeam), is(RequestStatus.FAILURE));
assertTrue(db.contains(id));
assertNotNull(parser.getName()); assertEquals("", parser.getName());
assertThat(fossologyHandler.getFingerPrints(), sameInstance(status));
assertThat(match.getDistance(), is(0));
assertFalse(parser.isApplicableTo(attachment, new User(), new Project()));
assertThat(actual, is(expected));
assertEquals(object, object1);
assertEquals(DUMMY_EMAIL_ADDRESS_2, userFromDatabase.getEmail()); assertEquals(DUMMY_DEPARTMENT, userFromDatabase.getDepartment()); assertFalse(userFromDatabase.isSetCommentMadeDuringModerationRequest());
assertThat(statusMap, hasEntry(clearingTeam, FossologyStatus.SCANNING)); assertThat(statusMap.keySet(), containsInAnyOrder(clearingTeam));
assertThat(properties.keySet().size(), is(0)); assertThat(properties.values().size(), is(0));
assertThat(getProjectIds(projects), containsInAnyOrder("P1"));
assertThat(fossologyHandler.sendToFossology(releaseId, user, clearingTeam), sameInstance(requestStatus));
assertThat(reduceVulnerabilityUpdateStatus(vus1).getRequestStatus(), is(RequestStatus.SUCCESS)); assertThat(reduceVulnerabilityUpdateStatus(vus1).statusToVulnerabilityIds.get(UpdateType.UPDATED), is(vus1.statusToVulnerabilityIds.get(UpdateType.UPDATED))); assertThat(reduceVulnerabilityUpdateStatus(vus1).statusToVulnerabilityIds.get(UpdateType.FAILED), is(vus1.statusToVulnerabilityIds.get(UpdateType.FAILED)));
assertThat(properties.keySet().size(), is(1)); assertThat(properties.values().size(), is(1));
assertThat(allHaveSameLength(), is(true));
assertEquals(user.getEmail(), user.getId()); assertEquals(TYPE_USER,user.getType()); assertFalse(user.isSetCommentMadeDuringModerationRequest());
assertNotNull(displayDownloadAttachmentBundle.attachments);
assertThat(fossologyHandler.getPublicKey(), is(pubkey));
assertEquals(1, vendors.size()); assertEquals(vendorList.get(1), vendors.get(0));
assertThat( fossologyUploader.parseResultStatus("status=CLOPED"), is(FossologyStatus.CONNECTION_FAILED));
assertThat(fossologyScriptsHandler.deployScripts(), is(RequestStatus.SUCCESS));
assertTrue(connector.deleteById(id)); assertFalse(connector.deleteById(id));
assertThat(statusInFossology, is(FossologyStatus.CONNECTION_FAILED));
assertThat(attachmentStream.read(), is(1)); assertThat(attachmentStream.read(), is(2));
assertThat(concatClosingInputStream.read(), is(1)); assertThat(concatClosingInputStream.read(), is(2)); assertThat(concatClosingInputStream.read(), is(-1)); assertThat(concatClosingInputStream.read(), is(-1)); assertThat(concatClosingInputStream.read(), is(-1));
assertThat(formatTime(1), is("00:00:01"));
assertThat(concatClosingInputStream.read(), is(-1)); assertThat(concatClosingInputStream.read(), is(-1)); assertThat(concatClosingInputStream.read(), is(-1));
assertThat(read, is(not(nullOrEmpty()))); assertThat(read, containsString("couchdb"));
assertEquals(DUMMY_EMAIL_ADDRESS_1, userFromDatabase.getEmail()); assertFalse(userFromDatabase.isSetCommentMadeDuringModerationRequest());
assertNotNull(copy.getFieldValue(renderedField));
assertFalse(connector.add(object));
assertThat(statusInFossology, is(parseResult));
assertEquals(summary.size(), licenses.size()); assertNotNull(license.id); assertNotNull(license.fullname); assertFalse(license.isSetTodoDatabaseIds()); assertFalse(license.isSetTodos()); assertFalse(license.isSetReviewdate());
assertThat(repo.check("host", null), is(HostKeyRepository.NOT_INCLUDED));
assertThat(match.getDistance(), is(0));
assertThat(inputStream.read(), is(-1)); assertThat(exitCode, greaterThanOrEqualTo(0));
assertThat(levenshteinMatch("x","y").getDistance(), is(Integer.MAX_VALUE)); assertThat(levenshteinMatch("x","y ").getDistance(), is(Integer.MAX_VALUE)); assertThat(levenshteinMatch("x"," y").getDistance(), is(Integer.MAX_VALUE)); assertThat(levenshteinMatch("x"," y ").getDistance(), is(Integer.MAX_VALUE)); assertThat(levenshteinMatch("x","lorem ipsum").getDistance(), is(Integer.MAX_VALUE));
assertThat(fossologyFileHandler.sendToFossology(releaseId, user, clearingTeam), is(RequestStatus.FAILURE)); assertThat(e, instanceOf(SW360Exception.class));
assertTrue(connector.contains(id));
assertThat(properties.keySet().size(), is(0)); assertThat(properties.values().size(), is(0));
assertThat(fossologyHandler.deployScripts(), sameInstance(requestStatus));
assertThat(properties.keySet(), Matchers.containsInAnyOrder("prop1")); assertThat(properties.get("prop1"), Matchers.containsInAnyOrder("val1"));
assertThat(formatTime(0), is("00:00:00"));
assertThat(match.getDistance(), is(0));
assertThat(resultMap.get(UpdateType.OLD).get(0).getId(), is("idv1")); assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
assertEquals("CT BE OSS", SW360Utils.getBUFromOrganisation("CT BE OSS NE")); assertEquals("CT BE", SW360Utils.getBUFromOrganisation("CT BE"));
assertThat(allHaveSameLength(iArray, sArray, bArray), is(true));
assertNull(license);
assertThat(msg + "is not readable", fossologyPrivateKey, notNullValue()); assertThat(msg + "is empty", fossologyPrivateKey.length, is(greaterThan(0)));
assertThat(properties.keySet(), Matchers.containsInAnyOrder(1)); assertThat(properties.get(1).getProperty(), is("prop1")); assertThat(properties.get(1).getValue(), is("val1"));
assertThat(result.getRequestStatus(), is(RequestStatus.SUCCESS)); assertThat(result.statusToVulnerabilityIds.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST)); assertThat(result.statusToVulnerabilityIds.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
assertThat(success, is(true));
assertEquals(0, vendors.size());
assertThat(attachmentStream.read(), is(1)); assertThat(attachmentStream.read(), is(2)); assertThat(attachmentStream.read(), is(-1));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertThat(match.getDistance(), is(noise.length())) ;
assertThat(match.getNeedle(), is(needle)); assertThat(match.getDistance(), is(greaterThan(0)));
assertThat(match.getDistance(), is(2));
assertEquals(obligations.size(), actualObligations.size());
assertSame(closingException, e); assertThat(e.getSuppressed(), is(arrayContaining((Throwable) closingException2, closingException3)));
assertThat(fossologyHost, not(isEmptyOrNullString()));
assertThat(fossologyScriptsHandler.deployScripts(), is(RequestStatus.FAILURE));
assertThat(types, not(hasItem(equalTo(attachmentType)))); assertThat(types, hasItem(equalTo(attachmentType)));
assertEquals("P2", project2.getId());
assertThat(repo.getHostKey("", ""), notNullValue());
assertThat(ThriftEnumUtils.enumToString(AttachmentType.DESIGN), is("Design document")); assertThat(ThriftEnumUtils.enumToString(RepositoryType.GIT), is("Git"));
assertThat(properties.keySet().size(), is(0)); assertThat(properties.values().size(), is(0));
assertThat(exitCode, greaterThanOrEqualTo(0));
assertThat(res.getStatus(), is(LicenseInfoRequestStatus.FAILURE)); assertThat(res.getLicenseInfo(), notNullValue()); assertThat(res.getLicenseInfo().getFilenames(), contains("a.xml"));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertEquals(vendorList.size(), actualList.size());
assertEquals("P1", project1.getId());
assertThat(repo.check("host", key), is(HostKeyRepository.NOT_INCLUDED));
assertTrue(parser.isApplicableTo(attachment, new User(), new Project()));
assertThat(result.getRequestStatus(), is(RequestStatus.SUCCESS)); assertThat(result.statusToVulnerabilityIds.get(UpdateType.UPDATED), containsInAnyOrder("ue1", "ue2", "ue3")); assertThat(result.statusToVulnerabilityIds.get(UpdateType.NEW), containsInAnyOrder("ne1", "ne2"));
assertThat(isValidUrl("www.google.com"), is(false));
assertThat(getTargetNameOfUrl("www.google.com"), is(""));
assertEquals("A1", attachment.id); assertEquals("a.txt", attachment.filename); assertEquals("text", attachment.contentType);
assertNull(license);
assertThat(reduceVulnerabilityUpdateStatus(emptyVus).requestStatus, is(RequestStatus.SUCCESS)); assertThat(reduceVulnerabilityUpdateStatus(emptyVus).statusToVulnerabilityIds.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
assertTrue(parser.isApplicableTo(attachment, new User(), new Project()));
assertThat(formatTime(3600), is("01:00:00"));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertThat( fossologyUploader.parseResultStatus("status=" + fossologyStatus), is(fossologyStatus));
assertThat(resultMap.get(UpdateType.FAILED).get(0).getId(), is("idv2")); assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertThat(formatTime(86400), is("24:00:00"));
assertThat(connectionTimeout, is(greaterThan(100L))); assertThat(connectionTimeout, is(lessThan(100000L)));
assertNotNull(parser.getType()); assertEquals("", parser.getType());
assertEquals(3, handler.getAccessibleProjectsSummary(user1).size()); assertEquals(1, handler.getAccessibleProjectsSummary(user2).size()); assertEquals(2, handler.getAccessibleProjectsSummary(user3).size());
assertThat(b, is(false));
assertTrue("Release IDs size", releaseIds.size() == 0);
assertThat(formatTime(60), is("00:01:00"));
assertThat(fossologySshUsername, is(greaterThan(0))); assertThat(fossologySshUsername, is(lessThan(65536)));
assertThat(customProperties.size(), is(0)); assertThat(todoCustomPropertyMap.size(), is(0));
assertThat(isValidUrl(null), is(false));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(false));
assertThat(uploadId, is((long) -1));
assertEquals(RequestStatus.SUCCESS, status); assertEquals("Fullname of license changed", licenseActual.getFullname());
assertThat(resultMap.get(UpdateType.UPDATED).get(0).getId(), is("idv1")); assertThat(resultMap.get(UpdateType.UPDATED).get(0).getLastExternalUpdate(), is("2000-01-01")); assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
assertThat(fossologyHandler.getStatusInFossology(releaseId, user, clearingTeam), sameInstance(status));
assertEquals("P3", project3.getId());
assertFalse(parser.isApplicableTo(attachment, new User(), new Project()));
assertThat(fossologyHostKeyHandler.getFingerPrints(), sameInstance(fingerPrints));
assertThat(attachmentStream.read(), is(1)); assertThat(attachmentStream.read(), is(2)); assertThat(attachmentStream.read(), is(-1));
assertEquals("testfullname", parser.getName());
assertThat(executionTimeout, is(greaterThan(1000L))); assertThat(executionTimeout, is(lessThan(1000000L)));
assertThat(statusMap, hasEntry(clearingTeam, FossologyStatus.SCANNING)); assertThat(statusMap, hasEntry(clearingTeam2, FossologyStatus.CLOSED)); assertThat(statusMap.keySet(), containsInAnyOrder(clearingTeam, clearingTeam2));
assertThat(successIdsFromUpdateMap(updateMap), containsInAnyOrder("u1", "u2", "u3", "n1", "n2"));
assertThat(allHaveSameLength(i, s), is(false));
assertThat(fossologyFileHandler.sendToFossology(releaseId, user, clearingTeam), is(RequestStatus.FAILURE));
assertThat(fossologyFileHandler.getAllClearingTeams(release, clearingTeam), containsInAnyOrder(clearingTeam, clearingTeam2)); assertThat(fossologyFileHandler.getAllClearingTeams(release, clearingTeam3), containsInAnyOrder(clearingTeam, clearingTeam2, clearingTeam3));
assertThat(levenshteinMatch("", "haystack").getDistance(), is(Integer.MAX_VALUE)); assertThat(levenshteinMatch("", "haystack").getDistance(), is(Integer.MAX_VALUE));
assertThat(fossologyHostKeyHandler.getFingerPrints(), is(emptyCollectionOf(FossologyHostFingerPrint.class)));
assertThat(uploadId, is((long) -1));
assertThat(success, is(true));
assertThat(exitCode, greaterThanOrEqualTo(0));
assertEquals(DisplayDownloadAbstract.DOWNLOAD_IMAGE_ENABLED, displayDownloadAttachment.getImage());
assertEquals(1, vendors.size());
assertEquals("testvalue", parser.getProperty("testkey"));
assertThat(fossologyHandler.setFingerPrints(newFingerPrints), sameInstance(requestStatus));
assertThat(repo.check("host", key), is(HostKeyRepository.NOT_INCLUDED));
assertEquals(1, attachmentsToKeep.size()); assertTrue(attachmentsToKeep.contains(attachmentAccepted)); assertFalse(attachmentsToKeep.contains(attachmentRejected)); assertEquals(1, attachmentsToKeep.size()); assertTrue(attachmentsToKeep.contains(changedAttachment));
assertThat(allHaveSameLength(iArray, sArray, bArray), is(false));
assertThat(customProperties.size(), is(3)); assertThat(todoCustomPropertyMap.size(), is(3)); assertThat(customProperties.get(id).getProperty(), is("A")); assertThat(customProperties.get(id).getValue(), is("A1"));
assertThat(todos.size(), is(0));
assertThat(isValidUrl(""), is(false));
assertFalse(parser.isApplicableTo(attachment, new User(), new Project()));
assertEquals("P3", project3.getId());
assertThat(FossologyFileHandler.isVisible(null), is(false)); assertThat(errorMessage, FossologyFileHandler.isVisible(fossologyStatus), is(expectedVisible));
assertThat(properties.keySet(), Matchers.containsInAnyOrder("A", "B")); assertThat(properties.get("A"), Matchers.containsInAnyOrder("A1", "A2", "A3")); assertThat(properties.get("B"), Matchers.containsInAnyOrder("B1", "B2"));
assertEquals("license", parser.getType());
assertFalse(parser.isApplicableTo(attachment, new User(), new Project()));
assertThat(requestSummary.requestStatus, is(RequestStatus.FAILURE));
assertEquals("P1", project1.getId());
assertThat(properties.keySet().size(), is(0)); assertThat(properties.values().size(), is(0));
assertThat(vulnerabilityConnector.isMoreRecent(v1, v2), is(true));
assertThat(resultMap.get(UpdateType.FAILED).get(0).getId(), is("idv2")); assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
assertThat(properties.keySet().size(), is(1)); assertThat(properties.values().size(), is(1));
assertThat(resultMap.get(UpdateType.NEW).get(0).getId(), is("idv1")); assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST)); assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
assertThat(repo.getKnownHostsRepositoryID(), not(isEmptyOrNullString()));
assertThat(allHaveSameLength(iArray, sArray, bArray), is(false));
assertThat(input, sameInstance(inputStream)); assertThat(command, is("./uploadFromSW360 -i \'id\' -g \'cl\' -f \'fileName\'")); assertThat(uploadId, is((long) 60));
assertThat(getIntOrDefault("25", 6), is(25)); assertThat(getIntOrDefault("-25", 25), is(-25)); assertThat(getIntOrDefault("25z", 6), is(6)); assertThat(getIntOrDefault( null, 42), is(42));
assertThat(fossologyUploader.getStatusInFossology(-1, "a"), is(FossologyStatus.ERROR));
assertThat(uploadId, is((long) -1));
assertThat(getEmptyVulnerabilityUpdateStatus(RequestStatus.FAILURE).requestStatus, is(RequestStatus.FAILURE));
assertThat(permissions.isActionAllowed(RequestedAction.WRITE_ECC), is(true)); assertThat(permissions.isActionAllowed(RequestedAction.WRITE_ECC), is(false));
assertThat(exitCode, greaterThanOrEqualTo(0));
assertThat(types, containsInAnyOrder(AttachmentType.values()));
assertNotNull(parser.getName()); assertEquals("", parser.getName());
assertThat(unprefixed.keySet(), containsInAnyOrder("", "a", "ab", "ac")); assertThat(unprefixed, hasEntry("", new String[]{"1"})); assertThat(unprefixed, hasEntry("a", new String[]{"5"})); assertThat(unprefixed, hasEntry("ab", new String[]{"6"})); assertThat(unprefixed, hasEntry("ac", new String[]{"7"}));
assertThat(fossologyHandler.checkConnection(), is(requestStatus));
assertThat(levenshteinMatch("needle", "").getDistance(), is(Integer.MAX_VALUE));
assertThat(success, is(false));
assertThat(allHaveSameLength(array), is(true));
assertThat(problems.size(), is(0));
assertThat(factory.create(1l), is(1.0d));
assertEquals(6, paths.size()); assertTrue("/parent/child5 not moved before /parent/child4", child5Idx < child4Idx); assertTrue("/parent/child6 not moved before /parent/child4", child6Idx < child4Idx); assertTrue("/parent/child3 not moved before /parent/child2", child3Idx < child2Idx); assertEquals(Arrays.asList("/parent/child1", "/parent/child2"), paths.subList(4, 6));
assertThat(metadata.getCatalogName(i), is(info.getRepositoryName())); assertThat(metadata.getCatalogName(i), is(info.getRepositoryName()));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor(4.99, PropertyType.LONG)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertThat(new JcrValue(factories, PropertyType.DOUBLE, 1.0).getString(), is("1.0"));
assertThat(session.itemExists(identifierPathFor("/")), is(true)); assertThat(session.itemExists(identifierPathFor("/a")), is(true)); assertThat(session.itemExists(identifierPathFor("/a/b")), is(true));
assertThat(resultSet.getRow(), is(0));
assertThat(resultSet.isClosed(), is(false));
assertThat(parser.parseContextItemExpr(tokenize(".")), is(new ContextItem()));
assertEquals(referrerIds, resultIds);
assertThat(path.isAtOrAbove(path), is(true));
assertThat(workspace.getQueryManager(), notNullValue());
assertThat(factory.create(" 1 "), is(Double.valueOf(1))); assertThat(factory.create(" -1.0 "), is(Double.valueOf(-1.0d))); assertThat(factory.create(" 100.000101 "), is(Double.valueOf(100.000101d)));
assertThat(stringMethods.length, is(4)); assertThat(method.getName(), is("indexOf")); assertThat(stringMethods.length, is(1)); assertThat(method.getName(), is("length"));
assertThat(new JcrValue(factories, PropertyType.DATE, date).getDouble(), is((double)date.getTime()));
assertThat(path.getAncestor(1), is(pathFactory.create("/mode:a/mode:b"))); assertThat(path.getAncestor(2), is(pathFactory.create("/mode:a"))); assertThat(path.getAncestor(3), is(ROOT));
assertThat(factory.create("0.1".getBytes("UTF-8")), is(0.1d)); assertThat(factory.create("1".getBytes("UTF-8")), is(1.0d)); assertThat(factory.create("-1.03".getBytes("UTF-8")), is(-1.03)); assertThat(factory.create("1003044".getBytes("UTF-8")), is(1003044.d));
assertThat(root.hasSameAncestor(root), is(true));
assertThat(path.isAtOrBelow(path), is(true));
assertThat("ORACLE", is((String)this.rootNode.getProperty(StandardDdlLexicon.PARSER_ID)));
assertThat(count, is(265));
assertThat(prefixes, notNullValue()); assertThat(prefixes.length, is(not(0)));
assertThat(Type.forSymbol(type.getSymbol().toLowerCase()), is(sameInstance(type)));
assertThat(path.isNormalized(), is(false));
assertSame(expected, actual);
assertThat(resultSet.findColumn(TestUtil.COLUMN_NAME_PROPERTIES.PROP_A), is(1));
assertThat(factory.create("1"), is(Long.valueOf(1))); assertThat(factory.create("-10"), is(Long.valueOf(-10))); assertThat(factory.create("100000101"), is(Long.valueOf(100000101)));
assertThat(theNodes.size(), is(16)); assertThat(theNodes.size(), is(2));
assertThat(path.hasSameAncestor(path), is(true));
assertThat(cnd, is(notNullValue()));
assertThat(StringUtil.normalize("test this"), is("test this"));
assertThat(TestI18nDuplicateProperty.testMessage.localeToTextMap.get(Locale.getDefault()), nullValue()); assertThat(TestI18nDuplicateProperty.testMessage.localeToProblemMap.get(Locale.getDefault()), nullValue());
assertThat(root.getString(), is("/")); assertThat(root.getString(registry), is("/")); assertThat(root.getString(registry, encoder), is("/")); assertThat(root.getString(registry, encoder, encoder), is("/")); assertThat(root.getString(encoder), is("/"));
assertThat(stmt.getResultSetType(), is(ResultSet.TYPE_SCROLL_INSENSITIVE));
assertThat(problems.hasErrors(), is(true));
assertThat(factory.create(1.0f), is(1l)); assertThat(factory.create(1.023f), is(1l)); assertThat(factory.create(1.923f), is(1l));
assertThat(factory.create(10000l), is((new ModeShapeDateTime(10000l))));
assertThat(conn.getAutoCommit(), is(true));
assertSame("null", writer.write(null));
assertThat(resultSet.getHoldability(), is(0));
assertThat(factory.create(1.0d), is(BigDecimal.valueOf(1.0d)));
assertThat(path.getLastSegment(), is(sameInstance(childSegment)));
assertEquals(referrerIds, resultIds);
assertThat(repository.getDescriptor(""), is(nullValue()));
assertThat(stmt.getMoreResults(Statement.CLOSE_CURRENT_RESULT), is(false));
assertThat(prop.satisfiesConstraints(valueFor("jcr:system", PropertyType.NAME), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor("modetest:constrainedType", PropertyType.NAME), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor("newprefix:constrainedType", PropertyType.NAME), session), is(true));
assertThat(path, hasSegments(factory, "a", "b", "c", "..", "dna:e", "dna:f"));
assertThat(extMetadata.isSigned(1), is(false)); assertThat(extMetadata.isSigned(2), is(true)); assertThat(extMetadata.isSigned(3), is(false)); assertThat(extMetadata.isSigned(4), is(false)); assertThat(extMetadata.isSigned(5), is(true));
assertThat(wrapper.isClosed(), is(false)); assertThat(IoUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true)); assertThat(wrapper.isClosed(), is(false)); assertThat(IoUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true));
assertNotNull(db); assertEquals(RelationalDbConfig.DEFAULT_CONNECTION_URL, db.id()); assertNotNull(config); assertTrue(config.createOnStart()); assertFalse(config.dropOnExit()); assertEquals(RelationalDbConfig.DEFAULT_TABLE_NAME, config.tableName()); assertEquals(RelationalDbConfig.DEFAULT_FETCH_SIZE, config.fetchSize()); assertFalse(config.compress()); assertNotNull(dsManager); assertEquals(DatabaseType.Name.H2, dsManager.dbType().name());
assertThat(session.getAttribute("attribute1"), is((Object)"value1"));
assertThat(stmt.getUpdateCount(), is(-1));
assertThat(pathFactory.create("/"), is(ROOT)); assertThat(pathFactory.create("/").isRoot(), is(true));
assertThat(parser.parseStepExpr(tokenize("\'foo\'")), is((StepExpression)filterStep(literal("foo"))));
assertThat(name.getLocalName(), is(validLocalName));
assertThat(parser.parseCommentTest(tokenize("comment x )")), is(nullValue())); assertThat(parser.parseCommentTest(tokenize("comment(x )")), is(nullValue())); assertThat(parser.parseCommentTest(tokenize("comment(x")), is(nullValue()));
assertThat(item, instanceOf(Node.class)); assertThat(item.getPath(), is("/a")); assertThat(item, instanceOf(Node.class)); assertThat(item.getPath(), is("/a/b")); assertThat(item, instanceOf(Node.class)); assertThat(item.getPath(), is("/"));
assertThat(parser.parseQName(tokenize("abc")), is(nameTest("abc"))); assertThat(parser.parseQName(tokenize("abc:def")), is(nameTest("abc", "def")));
assertSame(expected, actual);
assertThat(savedNode.getParent(), is(rootNode)); assertThat(newNode.getParent(), is(rootNode)); assertThat(nodeWithModifiedProperty.getParent(), is(rootNode)); assertThat(nodeWithModifiedChildren.getParent(), is(rootNode)); assertThat(nodeOfDepth2.getParent(), is(nodeWithModifiedChildren));
assertThat(factory().acceptUrl(INVALID_URL), is(false));
assertEquals(202, keyCount.get());
assertThat(factory.create(1l), is(BigDecimal.valueOf(1l)));
assertThat(list.contains("not found"), is(false)); assertThat(list.contains(null), is(false));
assertThat(kind, is(notNullValue())); assertThat(found, is(EnumSet.allOf(IndexKind.class)));
assertThat(factory.getDecoder(), is(notNullValue())); assertThat(factory.getDecoder(), is(sameInstance(ValueFactory.DEFAULT_DECODER)));
assertThat(iter.getPosition(), is(0L));
assertThat(parser.parseStringLiteral(tokenize("one")), is(literal("one"))); assertThat(parser.parseStringLiteral(tokenize("\'one\'")), is(literal("one"))); assertThat(parser.parseStringLiteral(tokenize("\'one word as a quote\'")), is(literal("one word as a quote")));
assertThat(list.lastIndexOf("not found"), is(-1)); assertThat(list.lastIndexOf(null), is(-1));
assertThat(path.getLastSegment(), is(notNullValue()));
assertThat(parent.getChildCount(), is(0)); assertThat(parent.getChildCount(), is(i + 1));
assertEquals(1, rootNode.getChildCount()); assertThat(result, is(tableNode)); assertEquals(tableName, tableNode.getName()); assertEquals(2, tableNode.getChildCount()); assertEquals("NUMERIC", column.getProperty(DATATYPE_NAME)); assertEquals(10, column.getProperty(DATATYPE_PRECISION)); assertTrue(column.getProperty(DATATYPE_LENGTH) == null); assertEquals("REALMUID", columnRef.getName());
assertFalse(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, NO_MATCH_TYPE, MIXINS));
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertEquals(8, ringBuffer.getBufferSize()); assertEquals(1024, ringBuffer.getBufferSize());
assertThat(name.getNamespaceUri(), is(""));
assertThat(result, is(sameInstance(joinNode))); assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.LEFT_OUTER)); assertThat(joinNode.getFirstChild(), is(sameInstance(lhs))); assertThat(joinNode.getLastChild(), is(sameInstance(rhs))); assertThat(joinNode.getChildCount(), is(2));
assertThat(repositories, is(nullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getElementTest().getElementName(), is(nameTest("foo", "bar"))); assertThat(result.getElementTest().getTypeName(), is(wildcard())); assertThat(result.getSchemaElementTest(), is(nullValue())); assertThat(result, is(notNullValue())); assertThat(result.getSchemaElementTest().getElementDeclarationName(), is(nameTest("foo"))); assertThat(result.getElementTest(), is(nullValue()));
assertThat(factory.create("true".getBytes("UTF-8")), is(true)); assertThat(factory.create("false".getBytes("UTF-8")), is(false)); assertThat(factory.create("TRUE".getBytes("UTF-8")), is(true)); assertThat(factory.create("FALSE".getBytes("UTF-8")), is(false)); assertThat(factory.create("something else".getBytes("UTF-8")), is(false));
assertSame(expected, actual);
assertThat(root.getNormalizedPath(), is(sameInstance(root)));
assertThat(cndStream, is(notNullValue())); assertThat(referral.getMixinNodeTypes()[0].getName(), is("er:eReferral")); assertThat(group.getPrimaryNodeType().getName(), is("inf:doctor"));
assertThat(tokens.canConsume("SELECT"), is(false)); assertThat(tokens.canConsume(TokenStream.ANY_VALUE), is(false)); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL), is(false));
assertThat(conn.isValid(0), is(true)); assertThat(conn.isValid(120), is(true)); assertThat(conn.isValid(1200), is(true));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Conjunction.class)));
assertThat(segment, is(expectedIter.next())); assertThat(segment, is(expectedIter.next()));
assertThat(metadata.isReadOnly(i + 1), is(true)); assertThat(extMetadata.isReadOnly(i + 1), is(true));
assertThat(I18n.getLocalizationProblems(TestI18n.class, Locale.US), notNullValue());
assertThat(StringUtil.truncate(str, 2), is("..")); assertThat(StringUtil.truncate(str, 2, null), is("..")); assertThat(StringUtil.truncate(str, 1, "XX"), is("X"));
assertThat(iter.hasNext(), is(true)); assertThat(iter.next(), is(root)); assertThat(iter.hasNext(), is(false));
assertThat(factory.create("1"), is(BigDecimal.valueOf(1))); assertThat(factory.create("-1.0"), is(BigDecimal.valueOf(-1.0d))); assertThat(factory.create("100.000101"), is(BigDecimal.valueOf(100.000101d)));
assertThat(parser.parsePathExpr(tokenize("/a/b/c_x0020_d")), is(pathExpr(axisStep(nameTest("a")), axisStep(nameTest("b")), axisStep(nameTest("c d")))));
assertNotNull(environment.getDb(repositoryConfiguration.getPersistenceConfiguration()));
assertThat(problems.size(), is(0));
assertEquals(1, nodeIterator.getSize()); assertEquals(columnsName, nodeIterator.nextNode().getName());
assertNotEquals(this, collection); assertNotEquals(collection, this); assertEquals(Collections.emptyList(), collection); assertEquals(collection, Collections.emptyList()); assertEquals(Collections.emptySet(), collection); assertEquals(collection, Collections.emptySet());
assertThat(list.contains(value), is(true));
assertNotNull(repository); assertTrue(repositoriesContainer.shutdownRepository(repoName).get());
assertThat(query, is(notNullValue()));
assertEquals(2, constraintNodes.size()); assertEquals(DdlConstants.UNNAMED_CHECK_NODE_NAME, constraintNodes.get(0).getName()); assertEquals("chk_Person", constraintNodes.get(1).getName());
assertThat(parser.parsePredicates(tokenize("[@ex:age<3 or jcr:like(@jcr:title,\'%something%\')]")), is(predicates(or(comparison(attributeNameTest(nameTest("ex", "age")), Operator.LESS_THAN, literal("3")), functionCall(nameTest("jcr", "like"), attributeNameTest(nameTest("jcr", "title")), literal("%something%"))))));
assertThat(sorted.getRowCount(), is(countRows(allNodes())));
assertThat(parser.parsePredicates(tokenize("[foo]")), is(predicates(nameTest("foo"))));
assertThat(parser.parsePredicates(tokenize("[@ex:age<3 and jcr:like(@jcr:title,\'%something%\')]")), is(predicates(and(comparison(attributeNameTest(nameTest("ex", "age")), Operator.LESS_THAN, literal("3")), functionCall(nameTest("jcr", "like"), attributeNameTest(nameTest("jcr", "title")), literal("%something%"))))));
assertThat(newPropertyOnModifiedNode.getAncestor(1), is((Item)nodeWithModifiedProperty)); assertThat(modifiedPropertyOnModifiedNode.getAncestor(1), is((Item)nodeWithModifiedProperty)); assertThat(unmodifiedPropertyOnModifiedNode.getAncestor(1), is((Item)nodeWithModifiedProperty));
assertThat(primaryType.compareTo(lastPrimaryType) >= 0, is(true));
assertThat(name.getNamespaceUri(), is(validNamespaceUri.trim())); assertThat(name.getNamespaceUri(), is(""));
assertThat(iter.getPosition(), is(0L));
assertSame(expected, actual);
assertThat(result, is(sameInstance(project))); assertThat(access.getType(), is(Type.ACCESS));
assertThat(metadata.isAutoIncrement(i + 1), is(false)); assertThat(extMetadata.isAutoIncrement(i + 1), is(false));
assertThat(parser.parsePathExpr(tokenize("/jcr:root/a/b/*[@prop]")), is(pathExpr(axisStep(nameTest("jcr", "root")), axisStep(nameTest("a")), axisStep(nameTest("b")), axisStep(wildcard(), attributeNameTest(nameTest("prop"))))));
assertThat(stmt.getFetchSize(), is(0));
assertThat(StringUtil.normalize("test \\t\\n\\r this"), is("test this"));
assertThat(iter.getSize(), is(0L));
assertThat(result, is(nullValue()));
assertThat(satisfiesConstraints(prop, new Value[] {valueFor(30, PropertyType.LONG)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertThat(ruleExecutionOrder.get(0), is(0)); assertThat(ruleExecutionOrder.get(1), is(1)); assertThat(ruleExecutionOrder.get(2), is(2)); assertThat(ruleExecutionOrder.size(), is(3));
assertThat(TestI18n.testMessage, instanceOf(I18n.class));
assertThat(nameFactory.getNamespaceRegistry(), is(registry));
assertThat(root.getString((NamespaceRegistry)null, encoder, encoder), is("/"));
assertThat(factory.create(value), is(value.doubleValue()));
assertThat(new JcrValue(factories, PropertyType.STRING, UUID.randomUUID()).getBoolean(), is(false));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Disjunction.class)));
assertThat(session.itemExists("/a/b"), is(true)); assertThat(session.itemExists("/a/c"), is(false));
assertEquals(TEST_MIME, mimeType);
assertNotEquals(nodeA.getIdentifier(), otherSession.getNode("/A").getIdentifier()); assertNotEquals(nodeB.getIdentifier(), otherSession.getNode("/B").getIdentifier());
assertThat(result, is(notNullValue())); assertThat(result.length(), is(0));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Conjunction.class)));
assertThat(root.getString((TextEncoder)null), is("/"));
assertEquals("DERBY", rootNode.getProperty(StandardDdlLexicon.PARSER_ID));
assertThat(func, is(notNullValue())); assertThat(func.getName(), is(nameTest("a"))); assertThat(func.getParameters().size(), is(1)); assertThat(func.getParameters().get(0), is((Component)nameTest("foo")));
assertThat(result, is(notNullValue())); assertEquals(1, rootNode.getChildCount()); assertEquals(7, tableNode.getChildCount()); assertFalse(foundConstraint); assertEquals(value, PRIMARY_KEY); assertEquals(1, kid.getChildCount()); assertTrue(hasMixinType(child, TYPE_COLUMN_REFERENCE)); assertEquals(PK_COL, child.getName());
assertThat(satisfiesConstraints(prop, new Value[] {value}), is(false));
assertThat(list.toArray(), is((Object[])data));
assertThat(path.isDescendantOf(path), is(false));
assertThat(IoUtil.readBytes((InputStream)null), is(new byte[] {}));
assertEquals(NullMimeTypeDetector.INSTANCE, detector);
assertThat(parser.parsePredicates(tokenize("[@ex:age<3]")), is(predicates(comparison(attributeNameTest(nameTest("ex", "age")), Operator.LESS_THAN, literal("3")))));
assertThat(prop.satisfiesConstraints(valueFor("system", PropertyType.NAME), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("jcr:system2", PropertyType.NAME), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("modetest:constrainedType", PropertyType.NAME), session), is(false));
assertThat(multimap.size(), is(0));
assertThat(stringMethods.length, is(4)); assertThat(method.getName(), is("indexOf")); assertThat(stringMethods.length, is(1)); assertThat(method.getName(), is("length"));
assertFalse(nodeTypeMgr.hasNodeType("someArgleBargle")); assertFalse(nodeTypeMgr.hasNodeType(HIERARCHY_NODE_TYPE + "x"));
assertThat(ns1.equals(ns3), is(true)); assertThat(ns3.equals(ns1), is(true)); assertThat(ns2.equals(ns4), is(true)); assertThat(ns4.equals(ns2), is(true)); assertThat(ns5.equals(ns5), is(true));
assertSame("\\"MinKey\\"", writer.write(MinKey.getInstance()));
assertThat(nodeA, is(notNullValue()));
assertThat(prop.satisfiesConstraints(valueFor("+1945-08-01T01:30:00.001Z", PropertyType.DATE), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("+1975-08-01T01:29:59.999Z", PropertyType.DATE), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("+1945-08-01T01:30:00.000-05:00", PropertyType.DATE), session), is(false));
assertThat(metadata.isDefinitelyWritable(i + 1), is(false)); assertThat(extMetadata.isDefinitelyWritable(i + 1), is(false));
assertThat(parsers.getLanguages().isEmpty(), is(true));
assertEquals(2, nodes.getSize()); assertTrue(path + " not found", expectedPaths.remove(path));
assertThat(new JcrValue(factories, PropertyType.DATE, date).getLong(), is(date.getTime()));
assertThat(problems.isEmpty(), is(true)); assertThat(plan.getType(), is(PlanNode.Type.PROJECT)); assertThat(plan.getChildCount(), is(1)); assertThat(source.getChildCount(), is(0));
assertThat(segment.equals(Path.PARENT_SEGMENT), is(true));
assertEquals(2, nodes.getSize()); assertEquals(2, nodes.getSize());
assertThat(altima.getPath(), is("/Cars/Hybrid/Nissan Altima")); assertThat(altima2, is(notNullValue())); assertThat(altima2.getPath(), is("/Cars/Hybrid/Nissan Altima[2]"));
assertThat(row.getNode().getPath(), is("/Cars/Hybrid/Toyota Highlander"));
assertThat(id, is(notNullValue()));
assertThat(parser.parseTextTest(tokenize("text()")), is(instanceOf(TextTest.class)));
assertThat(func, is(notNullValue())); assertThat(func.getName(), is(nameTest("a"))); assertThat(func.getParameters().size(), is(1)); assertThat(func.getParameters().get(0), is((Component)literal("foo")));
assertSame("10.01", writer.write(10.01)); assertSame("0.0", writer.write(0.0)); assertSame("-1.0135", writer.write(-1.0135)); assertSame(Float.toString(Float.MAX_VALUE), writer.write(Float.MAX_VALUE)); assertSame(Float.toString(Float.MIN_VALUE), writer.write(Float.MIN_VALUE));
assertThat(IoUtil.read((InputStream)null), is(""));
assertNotNull(conn.getMetaData());
assertEquals(referrerIds, resultIds);
assertThat(factory.create(true), is(true)); assertThat(factory.create(false), is(false));
assertThat(stmt.getGeneratedKeys(), instanceOf(ResultSet.class));
assertThat(path.isNormalized(), is(true));
assertThat("POSTGRES", is((String)rootNode.getProperty(StandardDdlLexicon.PARSER_ID)));
assertThat(firstToken, is("Select"));
assertThat(splits, is(correctSplits));
assertThat(factory.create("1".getBytes("UTF-8")), is(BigDecimal.valueOf(1l))); assertThat(factory.create("-1.0".getBytes("UTF-8")), is(BigDecimal.valueOf(-1.d))); assertThat(factory.create("100.000101".getBytes("UTF-8")), is(BigDecimal.valueOf(100.000101d)));
assertThat(loaded, is(notNullValue())); assertThat(loaded.getLanguage(), is(Query.JCR_SQL2)); assertThat(loaded.getStatement(), is(statement)); assertThat(loaded.getStoredQueryPath(), is(node.getPath()));
assertThat(metadata.getColumnName(i + 1), is(columnNames[i]));
assertThat(name.getNamespaceUri(), is(""));
assertThat(conn.getTransactionIsolation(), is(Connection.TRANSACTION_READ_COMMITTED));
assertThat(metadata.getPrecision(i + 1), is(JcrType.typeInfo(STRING).getNominalDisplaySize()));
assertTrue(!p1.isAggregate()); assertTrue(p3.isAggregate());
assertTrue(client.storeDocument(INDEX_NAME, TYPE_NAME, "10", doc)); assertEquals(1, count);
assertThat(config.getIndexes(), is(notNullValue()));
assertThat(encodedNameForEncoding, not(nameForEncoding)); assertThat(result, is(encodedNameForEncoding)); assertThat(result, is(encodedNameForEncoding));
assertThat(factory.create(TODAY.getString()), is(TODAY)); assertThat(factory.create(LAST_YEAR.getString()), is(LAST_YEAR));
assertThat(problems.hasErrors(), is(false)); assertThat(plan.getType(), is(PlanNode.Type.PROJECT)); assertThat(plan.getSelectors(), is(selectors("someTable")));
assertThat(new JcrValue(factories, PropertyType.DATE, date).getString().substring(0, expectedValue.length()), is(expectedValue)); assertThat(new JcrValue(factories, PropertyType.DATE, date.getTime()).getString().substring(0, expectedValue.length()), is(expectedValue));
assertThat(prop.satisfiesConstraints((Value)null, session), is(false));
assertThat(new JcrValue(factories, PropertyType.LONG, 0L).getDate().getTimeInMillis(), is(expectedValue.getTimeInMillis()));
assertThat(stmt.getQueryTimeout(), is(0));
assertEquals(otherB.getIdentifier(), otherA.getProperty("test:strongReference").getNode().getIdentifier()); assertEquals(otherC.getIdentifier(), otherA.getProperty("test:weakReference").getNode().getIdentifier()); assertEquals(otherD.getIdentifier(), otherA.getProperty("test:simpleReference").getNode().getIdentifier());
assertEquals(3, pp.length); assertTrue(contains(p1, pp)); assertTrue(contains(p2, pp)); assertTrue(contains(p3, pp));
assertTrue(stmt.equals(stmt)); assertFalse(stmt.equals(stmt2));
assertEquals(2, newParent.getNodes().getSize()); assertEquals(child1.getIdentifier(), child1.getProperty("jcr:uuid").getString()); assertEquals(child2.getIdentifier(), child2.getProperty("jcr:uuid").getString());
assertThat(node, is(notNullValue())); assertThat(node.getPath(), is("/"));
assertEquals(2, newParent.getNodes().getSize()); assertEquals(folder1CreatedTs, folder1Copy.getProperty("jcr:created").getDate().getTimeInMillis()); assertEquals(folder2CreatedTs, folder2Copy.getProperty("jcr:created").getDate().getTimeInMillis());
assertThat(extMetadata.isNullable(1), is(ResultSetMetaData.columnNullable)); assertThat(extMetadata.isNullable(2), is(ResultSetMetaData.columnNullable)); assertThat(extMetadata.isNullable(3), is(ResultSetMetaData.columnNoNulls)); assertThat(extMetadata.isNullable(4), is(ResultSetMetaData.columnNullableUnknown)); assertThat(extMetadata.isNullable(5), is(ResultSetMetaData.columnNoNulls));
assertThat(tokens.canConsume("SELECT"), is(false)); assertThat(tokens.canConsume(TokenStream.ANY_VALUE), is(false)); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL), is(false));
assertThat(wrapper.isClosed(), is(false)); assertThat(output, is(content)); assertThat(wrapper.isClosed(), is(true)); assertThat(wrapper.isClosed(), is(false)); assertThat(output, is(content)); assertThat(wrapper.isClosed(), is(true));
assertThat(stmt.getResultSetConcurrency(), is(ResultSet.CONCUR_READ_ONLY));
assertThat(factory.create(new ByteArrayInputStream(TODAY.getString().getBytes("UTF-8"))), is(TODAY)); assertThat(factory.create(new ByteArrayInputStream(LAST_YEAR.getString().getBytes("UTF-8"))), is(LAST_YEAR));
assertEquals(nodeA.getIdentifier(), otherSession.getNode("/A").getIdentifier()); assertEquals(nodeB.getIdentifier(), otherSession.getNode("/B").getIdentifier());
assertThat(new JcrValue(factories, PropertyType.LONG, 1L).getLong(), is(1L));
assertThat(path.subpath(0), is(sameInstance(path))); assertThat(path.subpath(0, path.size()), is(sameInstance(path)));
assertEquals("jcr:p1", p1.getName());
assertEquals(prefix, result);
assertThat(satisfiesConstraints(prop, new Value[] {valueFor(stringOfLength(9), PropertyType.BINARY)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertThat(resultSet.last(), is(false));
assertThat(path.iterator(), is(notNullValue()));
assertThat(config.getDocumentOptimization(), is(notNullValue())); assertThat(config.getDocumentOptimization().isEnabled(), is(false));
assertThat(registry, is(notNullValue())); assertThat(registry.getURI(JcrLexicon.Namespace.PREFIX), is(JcrLexicon.Namespace.URI));
assertThat(row.getValue("foo").getString(), is("value1"));
assertThat(newPropertyOnModifiedNode.getAncestor(2), is((Item)newPropertyOnModifiedNode)); assertThat(modifiedPropertyOnModifiedNode.getAncestor(2), is((Item)modifiedPropertyOnModifiedNode)); assertThat(unmodifiedPropertyOnModifiedNode.getAncestor(2), is((Item)unmodifiedPropertyOnModifiedNode));
assertThat(repository.getDescriptor(null), is(nullValue()));
assertTrue(metadata.check());
assertThat(parser.parsePathExpr(tokenize("/jcr:root/a/b/*")), is(pathExpr(axisStep(nameTest("jcr", "root")), axisStep(nameTest("a")), axisStep(nameTest("b")), axisStep(wildcard()))));
assertSame(expected, actual);
assertThat(factory.create(value), is(Double.valueOf(value.getTime())));
assertSame("\\"\\"", writer.write("")); assertSame("\\"10.01\\"", writer.write("10.01")); assertSame("\\"10.01d\\"", writer.write("10.01d")); assertSame("\\"null\\"", writer.write("null")); assertSame("\\"abcdefghijklmnopqrstuvwxyz\\"", writer.write("abcdefghijklmnopqrstuvwxyz"));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Disjunction.class))); assertThat(disjunction.getTerms().size(), is(2));
assertEquals(otherB.getIdentifier(), otherA.getProperty("test:strongReference").getNode().getIdentifier()); assertEquals(otherC.getIdentifier(), otherA.getProperty("test:weakReference").getNode().getIdentifier()); assertEquals(otherD.getIdentifier(), otherA.getProperty("test:simpleReference").getNode().getIdentifier());
assertTrue(filter.accept(null, "anystring"));
assertEquals(BUCKET, copyRequest.getSourceBucketName()); assertEquals(BUCKET, copyRequest.getDestinationBucketName()); assertEquals(TEST_KEY, copyRequest.getSourceKey()); assertEquals(TEST_KEY, copyRequest.getDestinationKey()); assertEquals(extractedText, copyRequest.getNewObjectMetadata() .getUserMetadata() .get(S3BinaryStore.EXTRACTED_TEXT_KEY));
assertTrue("Path for added node is wrong: actual=" + listener.getEvents().get(0).getPath() + ", expected=" + addedNode.getPath(), containsPath(listener, addedNode.getPath())); assertThat(eventUserData, is(userData)); assertThat(listener.userData.size(), is(not(0))); assertThat(receivedUserData, is(userData));
assertThat(factory.create(TODAY.getString().getBytes("UTF-8")), is(TODAY)); assertThat(factory.create(LAST_YEAR.getString().getBytes("UTF-8")), is(LAST_YEAR));
assertThat(list.size(), is(parent.size() + 1));
assertThat(factory.create(value.getTime()), is(new ModeShapeDateTime(value.getTime())));
assertThat(path, hasSegments(factory, "a", "b", "c", "..", "dna:e", "dna:f"));
assertSame(expected, actual);
assertThat(factory.create(" 1 "), is(Long.valueOf(1))); assertThat(factory.create(" -10 "), is(Long.valueOf(-10))); assertThat(factory.create(" 100000101 "), is(Long.valueOf(100000101)));
assertThat(prop.satisfiesConstraints(value, session), is(false));
assertThat(tokens.matches(BasicTokenizer.WORD, BasicTokenizer.DECIMAL), is(false)); assertThat(tokens.matches(BasicTokenizer.DECIMAL, BasicTokenizer.WORD), is(false));
assertThat(children.next(), is(sameInstance(child1))); assertThat(children.next(), is(sameInstance(child2))); assertThat(children.next(), is(sameInstance(child3))); assertThat(children.hasNext(), is(false));
assertThat(problems.hasErrors(), is(true));
assertThat(factory.create(new ByteArrayInputStream("0".getBytes("UTF-8"))), is(0l)); assertThat(factory.create(new ByteArrayInputStream("10".getBytes("UTF-8"))), is(10l)); assertThat(factory.create(new ByteArrayInputStream("-103".getBytes("UTF-8"))), is(-103l)); assertThat(factory.create(new ByteArrayInputStream("1003044".getBytes("UTF-8"))), is(1003044l));
assertThat(binary.getSize(), is(0l)); assertThat(binary, hasNoContent());
assertThat(sorted.getRowCount(), is(countRows(allNodes())));
assertThat(StringUtil.read((Reader)null), is(""));
assertThat(factory.create(1.0122d), is(1l));
assertThat(parser.parseStepExpr(tokenize("(\'foo\')")), is((StepExpression)filterStep(paren(literal("foo")))));
assertThat(path.getParent(), is(sameInstance(parent)));
assertThat(SequencerPathExpression.compile("/a/b[0]/c[1]/d/e"), is(notNullValue())); assertThat(SequencerPathExpression.compile("/a/b[0]/c[1]/d/e[2]"), is(notNullValue()));
assertThat(trace, containsString(msg)); assertThat(trace, containsString(this.getClass().getName()));
assertThat(session1.getRootNode(), is(notNullValue())); assertThat(session2.getRootNode(), is(notNullValue()));
assertThat(resultSet.next(), is(true)); assertThat(resultSet.next(), is(false));
assertNotNull(row.getValue("jcr:primaryType"));
assertThat(extMetadata.isCaseSensitive(1), is(true)); assertThat(extMetadata.isCaseSensitive(2), is(false)); assertThat(extMetadata.isCaseSensitive(3), is(true)); assertThat(extMetadata.isCaseSensitive(4), is(false)); assertThat(extMetadata.isCaseSensitive(5), is(false));
assertThat(satisfiesConstraints(prop, new Value[] {valueFor("+1945-08-01T01:30:00.001Z", PropertyType.DATE)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertNotNull(workspaces); assertEquals(1, wsList.size()); assertEquals("default", wsList.get(0));
assertThat(result, is(nullValue()));
assertThat(names, notNullValue()); assertThat(names.length, is(1)); assertThat(names[0], is("attribute1"));
assertThat(cal.get(Calendar.MILLISECOND), is(0));
assertThat(new JcrValue(factories, PropertyType.STRING, "true").getBoolean(), is(true)); assertThat(new JcrValue(factories, PropertyType.STRING, "yes").getBoolean(), is(false));
assertThat(parser.parsePredicates(tokenize("[@jcr:title=\'something\']")), is(predicates(comparison(attributeNameTest(nameTest("jcr", "title")), Operator.EQUAL_TO, literal("something")))));
assertThat(root.isNormalized(), is(true));
assertThat(path.getSegmentsArray(), is(notNullValue()));
assertThat(iter.getSize(), is((long)children.size()));
assertThat(list.containsAll(copy), is(true)); assertThat(copy.containsAll(list), is(true));
assertThat(factory.create("true"), is(true)); assertThat(factory.create("false"), is(false)); assertThat(factory.create("TRUE"), is(true)); assertThat(factory.create("FALSE"), is(false));
assertThat(conn.unwrap(JcrConnection.class), is(instanceOf(JcrConnection.class)));
assertThat(new JcrValue(factories, PropertyType.DOUBLE, 1.0).getLong(), is(1L)); assertThat(new JcrValue(factories, PropertyType.DOUBLE, Double.MAX_VALUE).getLong(), is(Long.MAX_VALUE));
assertThat(factory.create(1.0f), is(BigDecimal.valueOf(1.0f)));
assertThat(value.getString(), is("true"));
assertThat(root.getCanonicalPath(), is(sameInstance(root)));
assertTrue(iter.hasNext()); assertThat(iter.next(), is(notNullValue())); assertTrue(iter.hasNext()); assertThat(iter.next(), is(notNullValue())); assertThat(iter.hasNext(), is(false));
assertThat(metadata.isCaseSensitive(i + 1), is(true));
assertThat(actualValue, is(expectedValue));
assertThat(new JcrValue(factories, PropertyType.STRING, UUID.fromString(expectedValue)).getString(), is(expectedValue));
assertEquals(0, it.getPosition()); assertEquals(1, it.getPosition());
assertThat(result, is("mode:" + encodedLocalName)); assertThat(encodedNamespaceUri, is("http%3a%2f%2fwww.modeshape.org%2f1.0")); assertThat(encodedLocalName, is("some%3aname%3awith%3acolons"));
assertThat(tokens.matches("ALL"), is(false)); assertThat(tokens.matches("SElect"), is(false)); assertThat(tokens.matches("SELECT"), is(true));
assertEquals("ORACLE", rootNode.getProperty(StandardDdlLexicon.PARSER_ID));
assertThat(jaas, is(nullValue()));
assertTrue("Expected BinaryStore to contain the key", getBinaryStore().hasBinary(STORED_MEDIUM_KEY));
assertThat(XmlCharacters.isValidNameStart(c), is(true)); assertThat(XmlCharacters.isValidNameStart(c), is(true));
assertEquals(0, nodes.getSize()); assertEquals(0, nodes.getSize()); assertEquals(1, nodes.getSize()); assertEquals("/N", nodes.nextNode().getPath()); assertEquals(1, nodes.getSize()); assertEquals("/N", nodes.nextNode().getPath());
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Disjunction.class)));
assertEquals(1, nodes.getSize()); assertEquals("/A", nodes.nextNode().getPath());
assertThat(iterator, hasItems("a", "b", "c", "1", "2", "3"));
assertThat(stmt.getResultSetHoldability(), is(ResultSet.CLOSE_CURSORS_AT_COMMIT));
assertThat(path, hasSegments(factory, ".", "a", "b", "c", ".", "dna:e", "dna:f"));
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertEquals("hEllO", Inflector.replaceAllWithUppercase("hello", "([aeiou])", 1)); assertEquals("hLlo", Inflector.replaceAllWithUppercase("hello", "([aeiou])(l)", 2));
assertThat(problems.hasErrors(), is(true));
assertThat(name.getString(namespaceRegistry, encoder, delimiterEncoder), is("mode\\\\:some\\uf03aname\\uf03awith\\uf03acolons")); assertThat(name.getString(null, encoder, delimiterEncoder), is("mode:some\\uf03aname\\uf03awith\\uf03acolons"));
assertThat(list.equals(copy), is(true));
assertThat(StringUtil.truncate(str, str.length() + 2), is(str)); assertThat(StringUtil.truncate(str, str.length() + 2, null), is(str)); assertThat(StringUtil.truncate(str, str.length() + 2, "really long suffix"), is(str));
assertThat(wrapper.isClosed(), is(false)); assertThat(StringUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true)); assertThat(wrapper.isClosed(), is(false)); assertThat(StringUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true));
assertThat(result, is(sameInstance(joinNode))); assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.LEFT_OUTER)); assertThat(joinNode.getFirstChild(), is(sameInstance(rhs))); assertThat(joinNode.getLastChild(), is(sameInstance(lhs))); assertThat(joinNode.getChildCount(), is(2));
assertThat(ns1.getNamespaceUri(), is(validUri1)); assertThat(ns2.getNamespaceUri(), is(validUri2)); assertThat(ns3.getNamespaceUri(), is(validUri1)); assertThat(ns4.getNamespaceUri(), is(validUri2)); assertThat(ns5.getNamespaceUri(), is(validUri3));
assertThat(repository.getDescriptor(""), is(nullValue()));
assertThat(repository.getDescriptor(org.modeshape.jcr.api.Repository.REPOSITORY_WORKSPACES), is(nullValue()));
assertNotNull(e);
assertEquals(8, journal.allRecords(false).size());
assertThat(parsers.getLanguages().size(), is(1)); assertThat(parsers.getLanguages().contains(parser1.getLanguage()), is(true));
assertThat(root.getString(registry, encoder, (TextEncoder)null), is("/"));
assertThat(factory.create(" " + TODAY.getString() + " "), is(TODAY)); assertThat(factory.create(" " + LAST_YEAR.getString() + " "), is(LAST_YEAR));
assertNotNull(testNode); assertNotNull(rootNode); assertFalse(rootNode.hasNode(name)); assertEquals(testNodePath, newTestNode.getPath()); assertEquals("Node path should equal " + testNodePath, testNodePath, node.getPath()); assertNotNull(node);
assertThat(I18n.getLocalizationProblemLocales(TestI18n.class), notNullValue());
assertThat(lastIndex, is(i));
assertThat(wrapper.isClosed(), is(false)); assertThat(IoUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true)); assertThat(wrapper.isClosed(), is(false)); assertThat(IoUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true));
assertThat(conn.isReadOnly(), is(true));
assertThat(problems.hasErrors(), is(false)); assertThat(plan.getType(), is(PlanNode.Type.PROJECT)); assertThat(plan.getSelectors(), is(selectors("t1")));
assertThat(name.getNamespaceUri(), is("")); assertThat(name.getLocalName(), is("something")); assertThat(name.getString(NO_OP_ENCODER), is("something"));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor(stringOfLength(0), PropertyType.BINARY)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertThat(name.equals(null), is(false));
assertSame(expected, actual);
assertThat(session1.isLive(), is(true));
assertThat(StringUtil.normalize(" \\t\\n test this \\t"), is("test this"));
assertSame(expected, actual);
assertEquals(3, nodes.getSize()); assertArrayEquals(new String[] { "folder2", "folder3_1", "folder3_1_1" }, names.toArray(new String[0]));
assertEquals(otherB.getIdentifier(), otherA.getProperty("test:strongReference").getNode().getIdentifier()); assertEquals(otherC.getIdentifier(), otherA.getProperty("test:weakReference").getNode().getIdentifier()); assertEquals(otherD.getIdentifier(), otherA.getProperty("test:simpleReference").getNode().getIdentifier());
assertThat(context.getId().length(), is(not(0))); assertThat(context.getId().trim().length(), is(not(0)));
assertThat(problems.size(), is(0));
assertThat(parser.parseStepExpr(tokenize("foo:bar(*)")), is((StepExpression)filterStep(functionCall(nameTest("foo", "bar"), wildcard()))));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Disjunction.class))); assertThat(disjunction.getTerms().size(), is(4));
assertThat("Wrong number of event listeners.", getObservationManager().getRegisteredEventListeners().getSize(), is(2L)); assertThat("Wrong number of event listeners after removing a listener.", getObservationManager().getRegisteredEventListeners().getSize(), is(1L)); assertThat("Wrong number of event listeners after removing a listener.", getObservationManager().getRegisteredEventListeners().nextEventListener(), is(listener2));
assertThat(result, is(sameInstance(joinNode))); assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.CROSS)); assertThat(joinNode.getFirstChild(), is(sameInstance(lhs))); assertThat(joinNode.getLastChild(), is(sameInstance(rhs))); assertThat(joinNode.getChildCount(), is(2));
assertThat(factory.getDecoder(), is(notNullValue())); assertThat(factory.getDecoder(), is(sameInstance(CUSTOM_DECODER)));
assertThat(factory.create(value), is(Double.valueOf(value.getTimeInMillis())));
assertTrue(buffer.addIfAbsent("first")); assertTrue(buffer.addIfAbsent("second")); assertTrue(buffer.addIfAbsent("third")); assertTrue(buffer.addIfAbsent("fourth")); assertFalse(buffer.addIfAbsent("first")); assertFalse(buffer.addIfAbsent("second")); assertFalse(buffer.addIfAbsent("fourth")); assertFalse(buffer.addIfAbsent("third")); assertThat(buffer.size(), is(4L));
assertThat(workspace.context().getId(), is(session.context().getId()));
assertEquals(targetName, result); assertEquals(targetName, result); assertEquals(targetName, result); assertEquals(targetName, result); assertEquals(targetName, result);
assertThat(parser.removeBracketsAndQuotes("\\"string\\"", null), is("\\"string\\"")); assertThat(parser.removeBracketsAndQuotes("\\"string\\"", null), is("\\"string\\"")); assertThat(parser.removeBracketsAndQuotes("\\"word one and two\\"", null), is("\\"word one and two\\"")); assertThat(parser.removeBracketsAndQuotes("[word one and two]", null), is("[word one and two]"));
assertThat(StringUtil.read((InputStream)null), is(""));
assertThat(factory.create("1"), is(Double.valueOf(1))); assertThat(factory.create("-1.0"), is(Double.valueOf(-1.0d))); assertThat(factory.create("100.000101"), is(Double.valueOf(100.000101d)));
assertThat(factory.create(value), is(Long.valueOf(value.getTimeInMillis())));
assertTrue(metadata.check());
assertThat(StringUtil.truncate(str, str.length()), is(str)); assertThat(StringUtil.truncate(str, str.length(), null), is(str)); assertThat(StringUtil.truncate(str, str.length(), "really long suffix"), is(str));
assertThat(rootNode.getDepth(), is(0)); assertThat(savedNode.getDepth(), is(1)); assertThat(newNode.getDepth(), is(1)); assertThat(nodeWithModifiedProperty.getDepth(), is(1)); assertThat(nodeWithModifiedChildren.getDepth(), is(1)); assertThat(nodeOfDepth2.getDepth(), is(2));
assertThat(iter.hasNext(), is(false));
assertThat(theNodes.size(), is(0)); assertThat(theNodes.size(), is(13));
assertThat(I18n.getLocalizationProblems(TestI18n.class), notNullValue());
assertEquals(1, rootNode.getChildCount()); assertThat(result, is(tableNode)); assertEquals(tableName, tableNode.getName()); assertEquals(4, tableNode.getChildCount()); assertEquals("VARCHAR", column1.getProperty(DATATYPE_NAME)); assertEquals(255L, column1.getProperty(DATATYPE_LENGTH)); assertTrue(column1.getProperty(DATATYPE_PRECISION) == null);
assertThat(opt, is(notNullValue())); assertThat(opt.isEnabled(), is(true)); assertThat(opt.getIntervalInHours(), is(Default.OPTIMIZATION_INTERVAL_IN_HOURS)); assertThat(opt.getInitialTimeExpression(), is(Default.OPTIMIZATION_INITIAL_TIME)); assertThat(opt.getThreadPoolName(), is(Default.OPTIMIZATION_POOL));
assertThat(workspace.getObservationManager(), is(notNullValue()));
assertThat(tokens.matches("select"), is(false)); assertThat(tokens.matches("SElect"), is(false)); assertThat(tokens.matches("Select"), is(true));
assertThat(factory.create(value), is(new ModeShapeDateTime(value)));
assertTrue(it.hasNext()); assertTrue(it.hasNext()); assertFalse(it.hasNext());
assertThat(root.isDescendantOf(other), is(false)); assertThat(root.isDescendantOf(root), is(false));
assertThat(new JcrValue(factories, PropertyType.LONG, 1L).getString(), is("1"));
assertThat(item, instanceOf(Node.class)); assertThat(item, instanceOf(Node.class)); assertThat(item, instanceOf(Property.class));
assertEquals(session.getNode("/a").getIdentifier(), otherSession.getNode("/a").getIdentifier()); assertEquals(session.getNode("/a/b").getIdentifier(), otherSession.getNode("/a/b").getIdentifier()); assertEquals(session.getNode("/a/b/c").getIdentifier(), otherSession.getNode("/a/b/c").getIdentifier()); assertEquals(session.getNode("/b").getIdentifier(), otherSession.getNode("/b").getIdentifier());
assertSame("10.01", writer.write(10.01d)); assertSame("0.0", writer.write(0.0d)); assertSame("-1.0135", writer.write(-1.0135d)); assertSame(Double.toString(Double.MAX_VALUE), writer.write(Double.MAX_VALUE)); assertSame(Double.toString(Double.MIN_VALUE), writer.write(Double.MIN_VALUE));
assertThat(error.toString(), is("ERROR: (1) " + message.text("message") + " Resource=\\"" + resource + "\\" At \\"" + location + "\\" (threw " + throwable.getLocalizedMessage() + ")"));
assertTrue(configuration.getJournaling().isEnabled());
assertThat(metadata.isSearchable(i + 1), is(true)); assertThat(extMetadata.isSearchable(i + 1), is(true));
assertThat(HashCode.compute((Object)null), is(0)); assertThat(HashCode.compute("abc", (Object)null), is(not(0)));
assertThat(factory.create(1.0f), is(1.0d));
assertThat(results.size(), is(myParsers.size()));
assertThat(stringReflection.findMethods("size", true).length, is(0)); assertThat(stringListReflection.findMethods("argleBargle", true).length, is(0));
assertThat(path.getParent(), nullValue());
assertThat(list.lastIndexOf("not found"), is(-1)); assertThat(list.lastIndexOf(null), is(-1));
assertThat(stmt.getMaxFieldSize(), is(0));
assertThat(new JcrValue(factories, PropertyType.STRING, "1").getDouble(), is(1.0));
assertThat(new JcrValue(factories, PropertyType.DOUBLE, 1.2).getDouble(), is(1.2));
assertThat(error.getMessageString(), is(message.text("error msg"))); assertThat(warning.getMessageString(), is(message.text("warning msg"))); assertThat(info.getMessageString(), is(message.text("info msg")));
assertNotNull(transactionManager); assertTrue(transactionManager.getClass().getName().contains("arjuna")); assertNotNull(tx);
assertThat(iter.getPosition(), is(0L));
assertTrue(buffer.addIfAbsent("first")); assertTrue(buffer.addIfAbsent("second")); assertTrue(buffer.addIfAbsent("third")); assertTrue(buffer.addIfAbsent("fourth")); assertFalse(buffer.addIfAbsent("first")); assertFalse(buffer.addIfAbsent("second")); assertFalse(buffer.addIfAbsent("fourth")); assertFalse(buffer.addIfAbsent("third")); assertThat(buffer.size(), is(4L));
assertThat(query, is(notNullValue())); assertThat(row.getNode().hasProperty("something"), is(true));
assertTrue(gram.getBuckets() instanceof LinkedList<?>);
assertThat(prop.satisfiesConstraints(value, session), is(true));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor("baz", PropertyType.STRING)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertThat(path.isAncestorOf(path), is(false));
assertNotNull(result.getRows());
assertThat(root, notNullValue()); assertThat(root.isNodeType("mix:referenceable"), is(true)); assertThat(root.getUUID(), is(uuid)); assertThat(uuid, notNullValue());
assertThat(problems.hasErrors(), is(false)); assertThat(plan.getType(), is(PlanNode.Type.SORT)); assertThat(plan.getSelectors(), is(selectors("t1")));
assertThat(factory.create(value), is(value.longValue()));
assertThat(path.isDescendantOf(parent), is(true));
assertThat(index.estimateTotalCount(), is(10L)); assertThat(index.estimateTotalCount(), is(9L)); assertThat(index.estimateTotalCount(), is(9L)); assertThat(index.estimateTotalCount(), is(8L)); assertThat(index.estimateTotalCount(), is(8L));
assertTrue("Not all expected car makers found", expectedMakers.isEmpty());
assertThat(workspace.getName(), is(workspaceName));
assertSame("\\"\\"", writer.write(new Symbol(""))); assertSame("\\"10.01\\"", writer.write(new Symbol("10.01"))); assertSame("\\"10.01d\\"", writer.write(new Symbol("10.01d"))); assertSame("\\"null\\"", writer.write(new Symbol("null"))); assertSame("\\"abcdefghijklmnopqrstuvwxyz\\"", writer.write(new Symbol("abcdefghijklmnopqrstuvwxyz")));
assertEquals(0, this.duration.getComponents().getHours()); assertEquals(0, this.duration.getComponents().getMinutes()); assertEquals(0.0d, this.duration.getComponents().getSeconds(), 0.00001d);
assertThat(problems.size(), is(0));
assertThat(extractor.supportsMimeType("application/vnd.openxmlformats-officedocument.wordprocessingml.document"), is(true));
assertEquals(2, it.getSize()); assertEquals(1, it.getSize());
assertSame(expected, actual);
assertEquals(1, entries.length);
assertThat(parser.parsePredicates(tokenize("[@ex:age<3][jcr:like(@jcr:title,\'%something%\')]")), is(predicates(comparison(attributeNameTest(nameTest("ex", "age")), Operator.LESS_THAN, literal("3")), functionCall(nameTest("jcr", "like"), attributeNameTest(nameTest("jcr", "title")), literal("%something%")))));
assertTrue(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, SUBTYPE2, null)); assertTrue(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, SUBTYPE2, MIXINS));
assertEquals(1, rootNode.getChildCount()); assertThat(result, is(tableNode)); assertEquals(tableName, tableNode.getName()); assertEquals(2, tableNode.getChildCount()); assertEquals("NUMERIC", column.getProperty(DATATYPE_NAME)); assertEquals(10, column.getProperty(DATATYPE_PRECISION)); assertTrue(column.getProperty(DATATYPE_LENGTH) == null); assertEquals(2, prim_key.getChildCount()); assertEquals("columnA", columnRef.getName());
assertThat(sorted.getRowCount(), is(countRows(allNodes())));
assertThat(list.hashCode(), is(hc));
assertThat(parser.parseAnyKindTest(tokenize("node()")), is(instanceOf(AnyKindTest.class)));
assertThat(tokens.canConsume("SELECT"), is(false)); assertThat(tokens.canConsume(TokenStream.ANY_VALUE), is(false)); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL), is(false));
assertThat(metadata.getColumnLabel(i + 1), is(columnNames[i]));
assertSame(expected, actual);
assertSame(expected, actual);
assertThat(factory.create(1), is(BigDecimal.valueOf(1)));
assertThat(extMetadata.isNullable(1), is(ResultSetMetaData.columnNullable)); assertThat(extMetadata.isNullable(2), is(ResultSetMetaData.columnNoNulls)); assertThat(extMetadata.isNullable(3), is(ResultSetMetaData.columnNoNulls)); assertThat(extMetadata.isNullable(4), is(ResultSetMetaData.columnNullableUnknown)); assertThat(extMetadata.isNullable(5), is(ResultSetMetaData.columnNoNulls)); assertThat(extMetadata.isNullable(2), is(ResultSetMetaData.columnNoNulls));
assertThat(metadata.isCurrency(i + 1), is(false)); assertThat(extMetadata.isCurrency(i + 1), is(false));
assertTrue(metadata.check());
assertThat(error.toString(), is("ERROR: " + message.text("message")));
assertThat(path.size(), is(3)); assertThat(path, hasSegments(pathFactory, "a", "b", "c"));
assertThat(stringReflection.getTargetClass() == String.class, is(true)); assertThat(stringListReflection.getTargetClass() == List.class, is(true));
assertEquals(referrerIds, resultIds);
assertThat(problems.size(), is(0));
assertThat(cndStream, is(notNullValue()));
assertThat(cnd, is(notNullValue()));
assertThat(factory.create(" 1 "), is(BigDecimal.valueOf(1))); assertThat(factory.create(" -1.0 "), is(BigDecimal.valueOf(-1.0d))); assertThat(factory.create(" 100.000101 "), is(BigDecimal.valueOf(100.000101d)));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {value}), is(true));
assertThat(root.getString(registry, (TextEncoder)null), is("/"));
assertThat(factory.create(value), is(Long.valueOf(value.getTime())));
assertThat(factory.create(value), is(BigDecimal.valueOf(value.getTimeInMillis())));
assertNotNull(REST_CLIENT.queryPlan("SELECT node.[jcr:path] FROM [mode:root] AS node", Query.JCR_SQL2));
assertThat(session.decode(PUBLIC_ENCODED_NAME), is(PUBLIC_DECODED_NAME));
assertThat(factory.create(10000), is(new ModeShapeDateTime(10000)));
assertThat(name.getNamespaceUri(), is("")); assertThat(name.getLocalName(), is("")); assertThat(name.getString(NO_OP_ENCODER), is(""));
assertThat(extractor.supportsMimeType("application/postscript"), is(false));
assertNotNull(MimeTypeDetectors.createDetectorFor(RepositoryConfiguration.FieldValue.MIMETYPE_DETECTION_CONTENT, environment));
assertThat(IoUtil.read((Reader)null), is(""));
assertThat(stmt.getFetchDirection(), is(ResultSet.FETCH_FORWARD));
assertThat(conn.isWrapperFor(JcrConnection.class), is(true));
assertSame(expected, actual);
assertThat(parser.parseName(tokens("\'jcr:name\'"), typeSystem), is("jcr:name"));
assertThat(path.toString(), is(notNullValue()));
assertThat(parser.parsePredicates(tokenize("[jcr:like(@jcr:title,\'%something%\')]")), is(predicates(functionCall(nameTest("jcr", "like"), attributeNameTest(nameTest("jcr", "title")), literal("%something%")))));
assertThat(iter.getSize(), is(0L));
assertThat(name.getNamespaceUri(), is("")); assertThat(name.getLocalName(), is("")); assertThat(name.getString(NO_OP_ENCODER), is(""));
assertTrue(doc1 == null);
assertThat(result, is(nullValue()));
assertThat(parser.parseParenthesizedExpr(tokenize("(\'foo\')")), is(paren(literal("foo"))));
assertThat(rootNode.getChildCount(), is(1)); assertEquals(rootNode.getProperty(JcrConstants.JCR_MIXIN_TYPES), StandardDdlLexicon.STATEMENTS_CONTAINER); assertEquals(rootNode.getChild(0).getProperty(JcrConstants.JCR_MIXIN_TYPES), StandardDdlLexicon.TYPE_CREATE_TABLE_STATEMENT); assertThat(rootNode.getChild(0).getName(), is(name));
assertThat(metadata.getScale(i + 1), is(0));
assertFalse(config.getJournaling().isEnabled());
assertThat(countRows(NodeSequence.limit(allNodes(), countAll)), is(countAll));
assertThat(factory.getDecoder(), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(null), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(CUSTOM_DECODER), is(sameInstance(CUSTOM_DECODER)));
assertThat(metadata.isCaseSensitive(1), is(true)); assertThat(metadata.isCaseSensitive(2), is(true)); assertThat(metadata.isCaseSensitive(3), is(true)); assertThat(metadata.isCaseSensitive(4), is(true)); assertThat(metadata.isCaseSensitive(5), is(true));
assertTrue(p4.contains(p3)); assertTrue(p4.contains(p2)); assertTrue(p4.contains(p4));
assertEquals(1, nodes.getSize()); assertArrayEquals(new String[] { "folder2" }, names.toArray(new String[0])); assertEquals(0, nodes.getSize()); assertEquals(2, nodes.getSize()); assertArrayEquals(new String[] { "folder1", "folder2" }, names.toArray(new String[0]));
assertThat(resultSet.first(), is(false));
assertEquals(1, nodes.getSize()); assertEquals("/parent/child2", nodes.nextNode().getPath()); assertFalse(nodes.hasNext()); assertEquals(1, rows.getSize()); assertEquals("/parent/child2", rows.nextRow().getNode().getPath()); assertFalse(rows.hasNext());
assertThat(row.getValue("propB").getString(), is("value1"));
assertThat(repository.nodeTypeManager().refreshFromSystem(), is(true));
assertThat(multimap.isEmpty(), is(true));
assertEquals(Arrays.asList("/parent/child4", "/parent/child3", "/parent/child2", "/parent/child1"), paths);
assertThat(parser.parseDocumentTest(tokenize("document-node foo")), is(nullValue())); assertThat(parser.parseDocumentTest(tokenize("document-node foo")), is(nullValue()));
assertThat(result, is(notNullValue())); assertThat(result.getElementDeclarationName(), is(nameTest("foo"))); assertThat(result, is(notNullValue())); assertThat(result.getElementDeclarationName(), is(nameTest("foo", "bar"))); assertThat(result, is(notNullValue())); assertThat(result.getElementDeclarationName(), is(wildcard()));
assertThat(iter.next(), is(data[i++]));
assertThat(names.size(), is(2)); assertThat(names.contains(workspaceName), is(true)); assertThat(names.contains(otherWorkspaceName), is(true));
assertThat(session1.getRootNode(), is(notNullValue())); assertThat(session2.getRootNode(), is(notNullValue()));
assertEquals(2, pp.length); assertEquals(p1, pp[0]); assertEquals(p2, pp[1]);
assertThat(problems.size(), is(1));
assertThat(path.getString(), is(notNullValue()));
assertThat(ns1.getPrefix(), is(validPrefix1)); assertThat(ns2.getPrefix(), is(validPrefix1)); assertThat(ns3.getPrefix(), is(validPrefix2)); assertThat(ns4.getPrefix(), is(validPrefix2)); assertThat(ns5.getPrefix(), is(validPrefix3));
assertEquals(2, otherParent.getNodes().getSize()); assertEquals(folder1CreatedTs, otherFolder1.getProperty("jcr:created").getDate().getTimeInMillis()); assertEquals(folder1.getIdentifier(), otherFolder1.getIdentifier()); assertEquals(folder2.getIdentifier(), otherFolder2.getIdentifier()); assertEquals(folder2CreatedTs, otherFolder2.getProperty("jcr:created").getDate().getTimeInMillis());
assertThat(satisfiesConstraints(prop, new Value[] {valueFor("jcr:system2", PropertyType.NAME)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertEquals(BUCKET, copyRequest.getSourceBucketName()); assertEquals(BUCKET, copyRequest.getDestinationBucketName()); assertEquals(TEST_KEY, copyRequest.getSourceKey()); assertEquals(TEST_KEY, copyRequest.getDestinationKey()); assertEquals(TEST_MIME, copyRequest.getNewObjectMetadata().getContentType());
assertNull(conn.getWarnings());
assertThat(list.toString(), is(copy.toString()));
assertThat(parsers.getLanguages().size(), is(2)); assertThat(parsers.getLanguages().contains(parser1.getLanguage()), is(true)); assertThat(parsers.getLanguages().contains(parser2.getLanguage()), is(true));
assertThat(new JcrValue(factories, PropertyType.STRING, "true").getString(), is("true"));
assertThat(index.estimateTotalCount(), is(10L)); assertThat(index.estimateTotalCount(), is(10L)); assertThat(index.estimateTotalCount(), is(9L)); assertThat(index.estimateTotalCount(), is(9L)); assertThat(index.estimateTotalCount(), is(8L)); assertThat(index.estimateTotalCount(), is(8L));
assertThat(workspace.getSession(), is(notNullValue()));
assertThat(stmt.getMoreResults(), is(false));
assertThat(parser.parseNumericLiteral(tokenize("1")), is(literal("1"))); assertThat(parser.parseNumericLiteral(tokenize("-1")), is(literal("-1"))); assertThat(parser.parseNumericLiteral(tokenize("0")), is(literal("0"))); assertThat(parser.parseNumericLiteral(tokenize("+1001")), is(literal("1001")));
assertThat(value.getType(), is(PropertyType.BOOLEAN));
assertThat(iter.hasNext(), is(false));
assertNull(stmt.getWarnings());
assertThat(query, is(notNullValue()));
assertTrue(row.getNode().hasProperty("car:model"));
assertThat(factory.create(new BigDecimal(10000)), is((new ModeShapeDateTime(10000))));
assertThat(parser.parsePredicates(tokenize("[\'foo\'][\'bar\']")), is(predicates(literal("foo"), literal("bar")))); assertThat(parser.parsePredicates(tokenize("[foo][bar]")), is(predicates(nameTest("foo"), nameTest("bar"))));
assertThat(wrapper.isClosed(), is(false)); assertThat(StringUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true)); assertThat(wrapper.isClosed(), is(false)); assertThat(StringUtil.read(wrapper), is(content)); assertThat(wrapper.isClosed(), is(true));
assertThat(tokens.canConsume("Select"), is(false)); assertThat(tokens.canConsume("SELECT"), is(true)); assertThat(tokens.canConsume("aLL"), is(false)); assertThat(tokens.canConsume("all"), is(false)); assertThat(tokens.canConsume("ALL"), is(true));
assertThat(root.getSegmentsList(), is(notNullValue())); assertThat(root.getSegmentsList().isEmpty(), is(true));
assertThat(ddlParsers.getParsers(), hasItems(myParsers.toArray(new DdlParser[myParsers.size()])));
assertThat(TestI18n.nonI18n, nullValue());
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertTrue("Journal should\'ve been started", journal.started());
assertEquals(2, nodes.getSize()); assertTrue(path + " not found", expectedPaths.remove(path));
assertThat(altima.getIndex(), is(1)); assertThat(altima2, is(notNullValue())); assertThat(altima2.getIndex(), is(2));
assertThat(root.iterator(), is(notNullValue())); assertThat(root.iterator().hasNext(), is(false));
assertNull(REST_CLIENT.getRepository("foobar")); assertNotNull(repository);
assertThat(name.getLocalName(), is("a")); assertThat(name.getNamespaceUri(), is(this.registry.getNamespaceForPrefix("")));
assertThat(ntFile.getPrimaryItemName(), is("jcr:content"));
assertNotNull(is);
assertTrue(this.nodeTypeMgr.isDerivedFrom(new String[] { MIXIN2 }, SUBTYPE1, MIXINS));
assertThat(problems.size(), is(0));
assertThat(conn.getClientInfo(), is(new Properties()));
assertThat(parser.parseName(tokens("name"), typeSystem), is("name"));
assertSame("\\"MaxKey\\"", writer.write(MaxKey.getInstance()));
assertThat(query, is(notNullValue()));
assertEquals("DERBY", rootNode.getProperty(StandardDdlLexicon.PARSER_ID));
assertThat("result should contain zero rows", result.getRows().getSize(), is(0L)); assertThat("result should contain zero rows", result.getRows().getSize(), is(0L));
assertThat(value.getBoolean(), is(true));
assertEquals(2, it.getSize()); assertEquals(1, it.getSize());
assertThat(path.size(), is(validSegmentsList.size()));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor("jcr:system", PropertyType.NAME)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertEquals(1, entries.length); assertEquals("kulikov", entries[0].getPrincipal().getName());
assertNotNull(MimeTypeDetectors.createDetectorFor(RepositoryConfiguration.FieldValue.MIMETYPE_DETECTION_NAME, environment));
assertThat(problems.size(), is(0));
assertEquals(2, constraintNodes.size()); assertEquals(DdlConstants.UNNAMED_CHECK_NODE_NAME, constraintNodes.get(0).getName()); assertEquals("chk_Person", constraintNodes.get(1).getName());
assertThat(extractor.supportsMimeType("application/pdf"), is(true));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Conjunction.class)));
assertThat(TestI18nPrivate.testMessage, instanceOf(I18n.class));
assertThat(factory.create("0".getBytes("UTF-8")), is(0l)); assertThat(factory.create("10".getBytes("UTF-8")), is(10l)); assertThat(factory.create("-103".getBytes("UTF-8")), is(-103l)); assertThat(factory.create("1003044".getBytes("UTF-8")), is(1003044l));
assertTrue(repositoriesContainer.getRepositoryNames(null).isEmpty());
assertThat(root.getSegmentsArray(), is(notNullValue())); assertThat(root.getSegmentsArray().length, is(0));
assertEquals(1, rootNode.getChildCount()); assertThat(result, is(tableNode)); assertEquals(tableName, tableNode.getName()); assertEquals(2, tableNode.getChildCount()); assertEquals("VARCHAR", column.getProperty(DATATYPE_NAME)); assertEquals(255L, column.getProperty(DATATYPE_LENGTH)); assertTrue(column.getProperty(DATATYPE_PRECISION) == null);
assertThat(row.getValue("foo").getString(), is("value1"));
assertThat(countRows(NodeSequence.limit(allNodes(), countAll + 1)), is(countAll));
assertSame(expected, actual);
assertThat(extractor.supportsMimeType("application/msword"), is(true));
assertThat(opt, is(notNullValue())); assertThat(opt.isEnabled(), is(false));
assertThat(newPropertyOnModifiedNode.getParent(), is(nodeWithModifiedProperty)); assertThat(modifiedPropertyOnModifiedNode.getParent(), is(nodeWithModifiedProperty)); assertThat(unmodifiedPropertyOnModifiedNode.getParent(), is(nodeWithModifiedProperty));
assertThat(stmt.getConnection(), is(notNullValue()));
assertThat(context.getId(), is(notNullValue()));
assertThat(satisfiesConstraints(prop, new Value[] {valueFor("/a", PropertyType.PATH)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertThat(factory.create(new ByteArrayInputStream("0.1".getBytes("UTF-8"))), is(0.1d)); assertThat(factory.create(new ByteArrayInputStream("1".getBytes("UTF-8"))), is(1.0d)); assertThat(factory.create(new ByteArrayInputStream("-1.03".getBytes("UTF-8"))), is(-1.03)); assertThat(factory.create(new ByteArrayInputStream("1003044".getBytes("UTF-8"))), is(1003044.d));
assertThat(StringUtil.truncate(str, 0), is("")); assertThat(StringUtil.truncate("", 0), is("")); assertThat(StringUtil.truncate(str, 0, "123"), is("")); assertThat(StringUtil.truncate("", 0, "123"), is(""));
assertThat(path, hasSegments(factory, "a", "b", "c", "d", "dna:e", "dna:f"));
assertThat(factory.create(10000.12345f), is(new ModeShapeDateTime(10000)));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor("+1975-08-01T01:31:00.000Z", PropertyType.DATE)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertThat(path.isDescendantOf(parent), is(true));
assertThat(result, is(notNullValue())); assertThat(result.getAttributeDeclarationName(), is(nameTest("foo"))); assertThat(result, is(notNullValue())); assertThat(result.getAttributeDeclarationName(), is(nameTest("foo", "bar"))); assertThat(result, is(notNullValue())); assertThat(result.getAttributeDeclarationName(), is(wildcard()));
assertThat(query, is(notNullValue()));
assertThat(metadata.getColumnCount(), is(columnNames.length));
assertThat(problems.hasErrors(), is(false)); assertThat(problems.hasErrors(), is(true));
assertEquals("This one is two should three not four last five", StringUtil.createString(pattern, "one", "two", "three", "four", "five"));
assertThat(parser.parseTextTest(tokenize("text x )")), is(nullValue())); assertThat(parser.parseTextTest(tokenize("text(x )")), is(nullValue())); assertThat(parser.parseTextTest(tokenize("text(x")), is(nullValue()));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor("/a/b/c", PropertyType.PATH)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertNotNull(otherSession.getNode("/a")); assertNotNull(otherSession.getNode("/a/b")); assertNotNull(otherSession.getNode("/a/b/c")); assertNotNull(otherSession.getNode("/b"));
assertThat(segment.equals(Path.SELF_SEGMENT), is(true));
assertEquals("Error converting \\"[-1]\\" from byte[] to a BinaryValue", text);
assertThat(path.equals(path2), is(true)); assertThat(path.compareTo(path2), is(0));
assertThat(parser.parseName(tokens("name"), typeSystem), is("name"));
assertTrue(node.hasProperty("jcr:mixinTypes")); assertThat(node.getProperty("jcr:mixinTypes").getValues().length, is(0));
assertThat(factory.create(new ByteArrayInputStream("true".getBytes("UTF-8"))), is(true)); assertThat(factory.create(new ByteArrayInputStream("false".getBytes("UTF-8"))), is(false)); assertThat(factory.create(new ByteArrayInputStream("TRUE".getBytes("UTF-8"))), is(true)); assertThat(factory.create(new ByteArrayInputStream("FALSE".getBytes("UTF-8"))), is(false)); assertThat(factory.create(new ByteArrayInputStream("something else".getBytes("UTF-8"))), is(false));
assertTrue(parser.areNextTokensCreateTableOptions(tokens)); assertFalse(parser.areNextTokensCreateTableOptions(tokens));
assertThat(resultSet.getConcurrency(), is(0));
assertThat(results.size(), is(DdlParsers.BUILTIN_PARSERS.size())); assertThat(results.get(0).getParserId(), is(OracleDdlParser.ID)); assertThat(results.size(), is(DdlParsers.BUILTIN_PARSERS.size())); assertThat(results.get(0).getParserId(), is(DerbyDdlParser.ID));
assertThat(row.getValue("bogus"), is(nullValue())); assertThat(row.getValue("laughable"), is(nullValue())); assertThat(row.getValue("car:year"), is(not(nullValue())));
assertThat(library, is(notNullValue())); assertThat(library.getPrimaryNodeType().getName(), is("nt:folder"));
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertThat(slide.getTitle(), is("Test Slide")); assertThat(slide.getText(), is("This is some text")); assertThat(slide.getNotes(), is("My notes")); assertNotNull(slide.getThumbnail());
assertThat(session.hasPendingChanges(), is(false));
assertThat(resultSet.getFetchSize(), is(0));
assertThat(parsers.getLanguages().isEmpty(), is(true));
assertNotNull(row.getValue("jcr:primaryType"));
assertNotNull(doc); assertEquals(6, countFields(doc)); assertEquals(3, countFields(doc));
assertThat(conn.getCatalog(), is(REPOSITORY_NAME));
assertThat(binary.getSize(), is((long)validByteArrayContent.length));
assertThat(parser.parseAnyKindTest(tokenize("node x )")), is(nullValue())); assertThat(parser.parseAnyKindTest(tokenize("node(x )")), is(nullValue())); assertThat(parser.parseAnyKindTest(tokenize("node(x")), is(nullValue()));
assertFalse(config.getJournaling().isEnabled());
assertThat(session.getAttribute(null), nullValue());
assertNotNull(row.getValue("jcr:primaryType"));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Conjunction.class)));
assertThat(query, is(notNullValue())); assertThat(query.getLanguage(), is(Query.JCR_SQL2)); assertThat(query.getStatement(), is(statement));
assertThat(name, notNullValue()); assertThat(name.length(), is(0));
assertThat(parser.parseWildcard(tokenize("*")), is(wildcard())); assertThat(parser.parseWildcard(tokenize("*:*")), is(wildcard())); assertThat(parser.parseWildcard(tokenize("*:name")), is(nameTest(null, "name"))); assertThat(parser.parseWildcard(tokenize("name:*")), is(nameTest("name", null)));
assertTrue(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, HIERARCHY_NODE_TYPE, MIXINS));
assertThat(path.isNormalized(), is(false));
assertThat(result, is(sameInstance(joinNode))); assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.FULL_OUTER)); assertThat(joinNode.getFirstChild(), is(sameInstance(lhs))); assertThat(joinNode.getLastChild(), is(sameInstance(rhs))); assertThat(joinNode.getChildCount(), is(2));
assertThat(ruleExecutionOrder.get(i), is(i));
assertThat(problems.size(), is(1));
assertThat(session.isLive(), is(true));
assertThat(parser.removeBracketsAndQuotes("string", null), is("string")); assertThat(parser.removeBracketsAndQuotes("\'string\'", null), is("string")); assertThat(parser.removeBracketsAndQuotes("word one and two", null), is("word one and two")); assertThat(parser.removeBracketsAndQuotes("\'word one and two\'", null), is("word one and two"));
assertTrue(!p1.isAbstract()); assertTrue(p5.isAbstract());
assertThat(query, is(notNullValue()));
assertThat(session.itemExists("/"), is(true)); assertThat(session.itemExists("/a"), is(true)); assertThat(session.itemExists("/a/b"), is(true));
assertThat(stmt.getMaxRows(), is(0));
assertTrue(nodeTypeMgr.hasNodeType("nt:base")); assertTrue(nodeTypeMgr.hasNodeType(HIERARCHY_NODE_TYPE)); assertTrue(nodeTypeMgr.hasNodeType(MIXIN1));
assertEquals(extractedText, extractValue);
assertThat(this.parsers.getParsers(), hasItems(DdlParsers.BUILTIN_PARSERS.toArray(new DdlParser[DdlParsers.BUILTIN_PARSERS.size()])));
assertThat(list.isEmpty(), is(false));
assertThat(stats.length, is(not(0))); assertThat(history.getTotalDuration(TimeUnit.SECONDS), is(60L));
assertThat(ids.add(new ExecutionContext().getId()), is(true));
assertThat(stmt, is(notNullValue())); assertThat(stmt, is(instanceOf(JcrStatement.class)));
assertTrue(stream != null); assertEquals("Binary value", s);
assertEquals(conn.getTypeMap(), new HashMap<Object, Object>());
assertThat(metadata.getSchemaName(i), is(info.getWorkspaceName())); assertThat(metadata.getSchemaName(i), is(info.getWorkspaceName()));
assertThat(Type.forSymbol(type.getSymbol()), is(sameInstance(type)));
assertThat(names, notNullValue()); assertThat(names.length, is(0));
assertNotNull(db); assertEquals(4, dataSource.getMinimumIdle()); assertEquals(4000, dataSource.getLeakDetectionThreshold()); assertEquals(5, dataSource.getMaximumPoolSize()); assertFalse(dataSource.isReadOnly()); assertEquals("testPool", dataSource.getPoolName());
assertSame(expected, actual);
assertThat(path.isNormalized(), is(false)); assertThat(path.getNormalizedPath(), is(ROOT));
assertEquals("alice", entries[0].getPrincipal().getName()); assertEquals("bob", entries[0].getPrincipal().getName());
assertFalse(nodeTypes.isEmpty()); assertNotNull(nodeTypes.getNodeType("nt:base")); assertNotNull(nodeTypes.getNodeType("nt:unstructured")); assertNull(nodeTypes.getNodeType("foobar"));
assertSame(expected, actual);
assertEquals("child" + childIdx, child.getName());
assertThat(parser.parseStepExpr(tokenize("foo:bar[3]")), is((StepExpression)axisStep(nameTest("foo", "bar"), literal("3"))));
assertThat(factory.create(value), is(value));
assertThat(problems.hasErrors(), is(false)); assertThat(plan.getType(), is(PlanNode.Type.PROJECT)); assertThat(plan.getSelectors(), is(selectors("t1")));
assertThat(config.getIndexProviders(), is(notNullValue()));
assertThat(iterator, hasItems("a", "b", "c", "1", "2", "3"));
assertThat(factory.create(" true "), is(true)); assertThat(factory.create(" false "), is(false)); assertThat(factory.create(" TRUE "), is(true)); assertThat(factory.create(" FALSE "), is(false));
assertThat(new JcrValue(factories, PropertyType.STRING, "test").getLength(), is(4L)); assertThat(new JcrValue(factories, PropertyType.BINARY, "test").getLength(), is(4L));
assertThat(result, containsString(prefix)); assertThat(result, containsString(encodedLocalName)); assertThat(result, is(prefix + ":" + encodedLocalName));
assertThat(pathFactory.create("/a/b/c/d/e").isNormalized(), is(true)); assertThat(pathFactory.create("a/b/c/d/e").isNormalized(), is(true)); assertThat(pathFactory.create("a").isNormalized(), is(true)); assertThat(pathFactory.create("/a").isNormalized(), is(true)); assertThat(ROOT.isNormalized(), is(true));
assertThat(new JcrValue(factories, PropertyType.LONG, 1L).getDouble(), is(1.0));
assertThat(binary.getSize(), is(0l)); assertThat(binary, hasNoContent()); assertThat(hash.length, is(20)); assertThat(StringUtil.getHexString(hash), is("da39a3ee5e6b4b0d3255bfef95601890afd80709"));
assertThat(sorted.getRowCount(), is(countRows(allNodes())));
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertThat(iter.next(), is(nameFactory.create(valueIter.next())));
assertThat(problems.hasErrors(), is(true));
assertThat(root.isNodeType("mix:referenceable"), is(true)); assertThat(root.getUUID(), is(uuid)); assertThat(root.getIdentifier(), is(uuid)); assertThat(system.getName(), is("jcr:system")); assertThat(childA, is(notNullValue())); assertThat(system2.getName(), is("jcr:system")); assertThat(childA2.getName(), is("childA"));
assertNull(stmt.getResultSet());
assertThat(factory.create(1), is(1.0d));
assertThat(parsers.getLanguages().size(), is(3)); assertThat(parsers.getLanguages().contains(parser1.getLanguage()), is(true)); assertThat(parsers.getLanguages().contains(parser2.getLanguage()), is(true)); assertThat(parsers.getLanguages().contains(parser3.getLanguage()), is(true));
assertThat(new JcrValue(factories, PropertyType.DATE, date).getDate().getTime(), is(date));
assertEquals(session.getNode("/a").getIdentifier(), otherSession.getNode("/a").getIdentifier()); assertEquals(session.getNode("/a/b").getIdentifier(), otherSession.getNode("/a/b").getIdentifier()); assertEquals(session.getNode("/a/b/c").getIdentifier(), otherSession.getNode("/a/b/c").getIdentifier()); assertEquals(session.getNode("/b").getIdentifier(), otherSession.getNode("/b").getIdentifier());
assertThat(row.getNode().getName(), is("Hybrid"));
assertThat(Reflection.getClassName(CharSequence.class), is(CharSequence.class.getName())); assertThat(Reflection.getClassName(List.class), is(List.class.getName()));
assertThat(parent.isDescendantOf(path), is(false));
assertThat(lastIndex, is(i));
assertThat(parser.parseStepExpr(tokenize("element2(*,*)")), is((StepExpression)filterStep(functionCall(nameTest("element2"), wildcard(), wildcard()))));
assertThat(ns1.equals(ns2), is(false)); assertThat(ns2.equals(ns1), is(false)); assertThat(ns3.equals(ns4), is(false)); assertThat(ns4.equals(ns3), is(false));
assertThat(problems.hasErrors(), is(false)); assertThat(problems.isEmpty(), is(true)); assertThat(plan.getType(), is(PlanNode.Type.PROJECT)); assertThat(plan.getChildCount(), is(1)); assertThat(source.getChildCount(), is(0));
assertThat(tokens.matches(BasicTokenizer.WORD, BasicTokenizer.WORD), is(true));
assertTrue(str.matches("1 sample.*")); assertTrue(str.matches(".*min=\\\\d{1,5}.*")); assertTrue(str.matches(".*max=\\\\d{1,5}.*")); assertTrue(str.matches(".*avg=\\\\d{1,5}.*")); assertTrue(str.matches(".*stddev=\\\\d{1,5}.*")); assertTrue(str.matches(".*median=\\\\d{1,5}.*"));
assertThat(cal.get(Calendar.HOUR_OF_DAY), is(0)); assertThat(cal.get(Calendar.MINUTE), is(0)); assertThat(cal.get(Calendar.SECOND), is(0)); assertThat(cal.get(Calendar.MILLISECOND), is(0)); assertThat(cal.get(Calendar.YEAR), is(2004)); assertThat(cal.get(Calendar.MONTH), is(Calendar.JUNE)); assertThat(cal.get(Calendar.DATE), is(30));
assertThat(session.getAttribute(""), nullValue()); assertThat(session.getAttribute(" "), nullValue());
assertThat(session.propertyExists("/a/foo/bar/non-existant"), is(false));
assertThat(node.getPath(), is("/a")); assertThat(node.getPath(), is("/a/b")); assertThat(node.getPath(), is("/"));
assertThat(problems.hasErrors(), is(false)); assertThat(problems.hasErrors(), is(true));
assertThat(newPropertyOnModifiedNode.getAncestor(0), is((Item)rootNode)); assertThat(modifiedPropertyOnModifiedNode.getAncestor(0), is((Item)rootNode)); assertThat(unmodifiedPropertyOnModifiedNode.getAncestor(0), is((Item)rootNode));
assertThat(result, is(validLocalName)); assertThat(result, is(validLocalName)); assertThat(result, is(encoder.encode(validLocalName)));
assertThat(extractor.supportsMimeType("text/plain"), is(true));
assertThat(def, is(notNullValue())); assertThat(def.getName(), is(JcrLexicon.PROPERTY_DEFINITION.getString(registry)));
assertThat(StringUtil.createString("test", (Object[])null), is("test"));
assertThat(id, is(notNullValue()));
assertSame(expected, actual);
assertThat(node, instanceOf(Node.class));
assertTrue(result); assertTrue(result); assertTrue(result); assertTrue(result); assertTrue(result); assertTrue(result); assertFalse(result); assertFalse(result);
assertEquals(doc, doc.clone());
assertThat(result, is(nullValue()));
assertThat(path.isNormalized(), is(false));
assertThat(TestI18nFinal.testMessage, instanceOf(I18n.class));
assertNotNull(row.getValue("jcr:primaryType"));
assertThat(new JcrValue(factories, PropertyType.DOUBLE, 0.0).getDate().getTimeInMillis(), is(expectedValue.getTimeInMillis()));
assertThat(factory.getPropertyType(), is(sameInstance(PropertyType.STRING)));
assertThat(session.getWorkspace(), notNullValue());
assertThat(root.size(), is(0));
assertThat(result, is(notNullValue()));
assertThat(StringUtil.truncate(null, 0), is("")); assertThat(StringUtil.truncate(null, 1), is("")); assertThat(StringUtil.truncate(null, 100), is(""));
assertThat(factory.create(1.0d), is(1.0d));
assertThat(namedLocks.size(), is(0));
assertThat(config.getSecurity(), is(notNullValue()));
assertThat(new JcrValue(factories, PropertyType.BINARY, customBinary).getString(), is(stringValue));
assertThat(result, is(notNullValue())); assertThat(result, is(instanceOf(Conjunction.class)));
assertThat(countRows(NodeSequence.limit(allNodes(), 2)), is(2L));
assertNotNull(row.getNode("category")); assertTrue(car.getName().contains("Toyota"));
assertThat(factory.create(new ByteArrayInputStream("1".getBytes("UTF-8"))), is(BigDecimal.valueOf(1l))); assertThat(factory.create(new ByteArrayInputStream("-1.0".getBytes("UTF-8"))), is(BigDecimal.valueOf(-1.d))); assertThat(factory.create(new ByteArrayInputStream("100.000101".getBytes("UTF-8"))), is(BigDecimal.valueOf(100.000101d)));
assertThat(session.getAttribute("something else entirely"), nullValue());
assertThat(path.isNormalized(), is(true));
assertThat(factory.create(10000.12345d), is((new ModeShapeDateTime(10000))));
assertSame("true", writer.write(Boolean.TRUE)); assertSame("false", writer.write(Boolean.FALSE));
assertThat(binary.getSize(), is((long)validByteArrayContent.length)); assertThat(hash.length, is(20)); assertThat(StringUtil.getHexString(hash), is("14abe696257e85ba18b7c784d6c7855f46ce50ea"));
assertNotNull(lastRecord); assertEquals("j3", lastRecord.getJournalId()); assertEquals(timestamp3.getMilliseconds(), lastRecord.getChangeTimeMillis());
assertThat(newChild.getPath(session1), is(path("/childB/newChild")));
assertThat(resultSet.getFetchDirection(), is(ResultSet.FETCH_FORWARD));
assertThat(err.getMessage().startsWith("0 parameters supplied, but 1 parameter required"), is(true)); assertThat(err.getMessage().startsWith("1 parameter supplied, but 0 parameters required"), is(true)); assertThat(err.getMessage().startsWith("0 parameters supplied, but 2 parameters required"), is(true));
assertNotNull(this.duration.getComponents());
assertThat(factory.create("1"), is(false)); assertThat(factory.create("0"), is(false)); assertThat(factory.create(" 0 "), is(false)); assertThat(factory.create(" 1 "), is(false));
assertSame("10", writer.write(10)); assertSame("0", writer.write(0)); assertSame("-1", writer.write(-1)); assertSame(Integer.toString(Integer.MAX_VALUE), writer.write(Integer.MAX_VALUE)); assertSame(Integer.toString(Integer.MIN_VALUE), writer.write(Integer.MIN_VALUE));
assertThat(rootNode.getPath(), is("/"));
assertEquals(4, testUpgrades.getLatestAvailableUpgradeId()); assertEquals(Upgrades.EMPTY_UPGRADES_ID, new Upgrades().getLatestAvailableUpgradeId());
assertFalse(journal.hasNext());
assertThat(result, is(sameInstance(joinNode))); assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.INNER)); assertThat(joinNode.getFirstChild(), is(sameInstance(lhs))); assertThat(joinNode.getLastChild(), is(sameInstance(rhs))); assertThat(joinNode.getChildCount(), is(2));
assertThat(path, hasSegments(factory, "a", "b", "c", "d", "dna:e", "dna:f"));
assertThat(parser.parseWildcard(tokenize("name")), is(nullValue())); assertThat(parser.parseWildcard(tokenize("name:foo")), is(nullValue()));
assertThat(parser.parseName(tokens("jcr:name"), typeSystem), is("jcr:name"));
assertThat(XmlCharacters.isValidNcNameStart(':'), is(false));
assertThat(binary.getSize(), is((long)validByteArrayContent.length)); assertThat(binary, hasContent(validByteArrayContent));
assertTrue("Did not expect BinaryStore to contain the key", !getBinaryStore().hasBinary(invalidBinaryKey()));
assertThat(path, hasSegments(factory, "a", "b", "c", ".", "dna:e", "dna:f"));
assertThat(func, is(notNullValue())); assertThat(func.getName(), is(nameTest("a"))); assertThat(func.getParameters().isEmpty(), is(true));
assertThat(parsers.getLanguages().size(), is(2)); assertThat(parsers.getLanguages().contains(parser2.getLanguage()), is(true)); assertThat(parsers.getLanguages().contains(parser3.getLanguage()), is(true));
assertThat(Type.forSymbol(type.getSymbol().toUpperCase()), is(sameInstance(type)));
assertThat(extMetadata.getScale(1), is(0)); assertThat(extMetadata.getScale(2), is(0)); assertThat(extMetadata.getScale(3), is(0)); assertThat(extMetadata.getScale(4), is(0)); assertThat(extMetadata.getScale(5), is(3));
assertThat(children.get(0), is(sameInstance(child1))); assertThat(children.get(1), is(sameInstance(child2))); assertThat(children.get(2), is(sameInstance(child3))); assertThat(children.size(), is(3));
assertThat(prop.satisfiesConstraints(valueFor("a", PropertyType.PATH), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("/a/b", PropertyType.PATH), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("/jcr:system", PropertyType.PATH), session), is(false)); assertThat(prop.satisfiesConstraints(valueFor("/a/b/c/d", PropertyType.PATH), session), is(false));
assertThat(satisfiesConstraints(prop, new Value[] {valueFor("bazzat", PropertyType.STRING)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertThat(schemaNodes.size(), is(1)); assertThat(schemaNodes.get(0).getChildCount(), is(2)); assertThat(schemaNodes.get(0).getName(), is("GLOBALFORCEMGMT"));
assertThat(row.getValue("pa").getString(), is("value1")); assertThat(row.getValue("pb").getString(), is("value1")); assertThat(row.getNode("x").getPath(), is("/Other/NodeA")); assertThat(expectedPaths.remove(row.getNode("y").getPath()), is(true));
assertNotNull(doc); assertEquals(4, countFields(doc)); assertEquals(3, countFields(doc));
assertThat(Type.forSymbol(" \\t " + type.getSymbol() + " \\t \\n"), is(sameInstance(type)));
assertThat(parser.parseName(tokens("\'name\'"), typeSystem), is("name"));
assertThat(list.hashCode(), is(copy.hashCode()));
assertThat(config.getSequencing(), is(notNullValue()));
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertTrue("Path for added node is wrong: actual=" + listener.getEvents().get(0).getPath() + ", expected=" + addedNode.getPath(), containsPath(listener, addedNode.getPath()));
assertThat(satisfiesConstraints(prop, new Value[] {valueFor(20.2, PropertyType.DOUBLE)}), is(false)); assertThat(satisfiesConstraints(prop, values), is(false));
assertThat(resultSet.getMetaData(), is(notNullValue()));
assertThat(path, hasSegments(factory, "a", "b", "c", ".", "dna:e", "dna:f"));
assertThat(result, is("mode:" + validLocalName)); assertThat(result, is("mode:some%3aname%3awith%3acolons"));
assertThat(path.getLastSegment(), is(nullValue()));
assertThat(name.getLocalName(), is("some/thing"));
assertThat(HashCode.compute(), is(0));
assertThat(factory.create(value), is(BigDecimal.valueOf(value.getTime())));
assertThat(session.encode(PUBLIC_DECODED_NAME), is(PUBLIC_ENCODED_NAME));
assertNotNull(result.getNodes());
assertThat(new JcrValue(factories, PropertyType.STRING, "1").getLong(), is(1L));
assertEquals("Child " + childIdx, child.getName());
assertThat(factory.getDecoder(), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(null), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(CUSTOM_DECODER), is(sameInstance(CUSTOM_DECODER)));
assertThat(headings.size(), is(TEST_HEADERS_TEXT.length)); assertThat(headings.get(i).getText(), is(TEST_HEADERS_TEXT[i])); assertThat(headings.get(i).getHeaderLevel(), is(TEST_HEADERS_LEVEL[i]));
assertThat(session.getRepository(), is((Repository)repository));
assertThat(factory.create(1l), is(1l));
assertThat(defn.getKind(), is(notNullValue()));
assertThat(problems.hasErrors(), is(false)); assertThat(plan.getType(), is(PlanNode.Type.SORT)); assertThat(plan.getSelectors(), is(selectors("t1")));
assertThat(parser.parseCommentTest(tokenize("comment()")), is(instanceOf(CommentTest.class)));
assertThat(iter.next(), is(factory.create(valueIter.next())));
assertTrue(metadata.check());
assertThat(name.getLocalName(), is("something"));
assertThat(row.getNode().getName(), is("Hybrid"));
assertThat(anon, is(notNullValue())); assertThat(anon.getAnonymousUsername(), is(RepositoryConfiguration.Default.ANONYMOUS_USERNAME)); assertThat(anon.getAnonymousRoles(), is(RepositoryConfiguration.Default.ANONYMOUS_ROLES));
assertEquals("SQL92", rootNode.getProperty(StandardDdlLexicon.PARSER_ID));
assertThat(parser.parseGeneralComp(tokenize("name")), is(nullValue())); assertThat(parser.parseGeneralComp(tokenize("+")), is(nullValue())); assertThat(parser.parseGeneralComp(tokenize("!+")), is(nullValue()));
assertEquals(expected, actual);
assertThat(Reflection.getClassName(String.class), is(String.class.getName())); assertThat(Reflection.getClassName(ArrayList.class), is(ArrayList.class.getName())); assertThat(Reflection.getClassName(StringUtil.class), is(StringUtil.class.getName()));
assertTrue(testUpgrades.isUpgradeRequired(-1)); assertTrue(testUpgrades.isUpgradeRequired(0)); assertTrue(testUpgrades.isUpgradeRequired(1)); assertTrue(testUpgrades.isUpgradeRequired(2)); assertTrue(testUpgrades.isUpgradeRequired(3)); assertFalse(testUpgrades.isUpgradeRequired(4)); assertFalse(testUpgrades.isUpgradeRequired(5));
assertEquals(TEST_CONTENT, IOUtils.toString(resultStream));
assertThat(workspace.getNodeTypeManager(), is(notNullValue()));
assertThat(satisfiesConstraints(prop, new Value[] {}), is(true)); assertThat(satisfiesConstraints(prop, new Value[] {valueFor(4.99, PropertyType.DOUBLE)}), is(true)); assertThat(satisfiesConstraints(prop, values), is(true));
assertThat(StringUtil.truncate(str, str.length() - 1), is("This is the st...")); assertThat(StringUtil.truncate(str, str.length() - 1, null), is("This is the st...")); assertThat(StringUtil.truncate(str, str.length() - 1, "X"), is("This is the striX"));
assertThat(opt, is(notNullValue())); assertThat(opt.isEnabled(), is(false));
assertThat(factory.create(1), is(1l));
assertThat(problems.size(), is(0));
assertThat(metadata.isNullable(1), is(ResultSetMetaData.columnNullableUnknown)); assertThat(metadata.isNullable(2), is(ResultSetMetaData.columnNullableUnknown)); assertThat(metadata.isNullable(3), is(ResultSetMetaData.columnNullableUnknown)); assertThat(metadata.isNullable(4), is(ResultSetMetaData.columnNullableUnknown)); assertThat(metadata.isNullable(5), is(ResultSetMetaData.columnNullableUnknown));
assertNotNull(repositories); assertEquals(1, repositoryList.size()); assertEquals("repo", repository.getName()); assertNotNull(metadata); assertFalse(metadata.isEmpty());
assertThat(new JcrValue(factories, PropertyType.STRING, "2008").getDate(), notNullValue());
assertThat(workspace.getImportContentHandler("/b", 0), is(notNullValue()));
assertEquals(1, nodes.getSize()); assertEquals("/Other/NodeA", nodes.nextNode().getPath());
assertThat(repository.getDescriptor(null), is(nullValue()));
assertThat(id, is(12582913L));
assertTrue(id2 > id1); assertTrue(id3 > id2);
assertThat(id, is(4194304001L));
assertThat(testee.getId(), is(1));
assertTrue(Bytes.compareTo(result.getRecordId(), rowIdBytes) == 0); assertTrue(count == 3);
assertEquals(1, count); assertEquals(2, count);
assertTrue(rowIdList.contains(result.getRecordId())); assertTrue(count == 3);
assertTrue(iter.hasNext());
assertTrue(iter.current() == null); assertTrue(iter.current() != null); assertTrue(iter.hasNext()); assertArrayEquals(new byte[] { 3 }, iter.next().getRecordId());
assertEquals(1, ret.getKeyValues().size()); assertEquals(ckv, ret.getKeyValues().get(0)); assertEquals(1, ret.getKeyValues().size()); assertEquals(ckv, ret.getKeyValues().get(0));
assertTrue(compare < 0); assertTrue(compare < 0); assertTrue(compare > 0); assertEquals(0, compare);
assertTrue("Exception site should be meaninful", exceptionSiteIsMeaningful);
assertTrue(Bytes.compareTo(result.getRecordId(), cccRowId) == 0); assertTrue(count == 1);
assertArrayEquals(new byte[] { 2 }, iter.current().getRecordId()); assertEquals(1, count);
assertTrue("Exception site should be meaninful", exceptionSiteIsMeaningful);
assertEquals(fitler, ret); assertTrue(fitler.equals(ret));
assertTrue(compare < 0); assertTrue(compare < 0); assertTrue(compare > 0); assertEquals(0, compare);
assertEquals(new CRange(new byte[] { 2 }), ct.getRange());
assertEquals(3, count); assertEquals(2, count); assertEquals(1, count);
assertTrue(Bytes.compareTo(result.getRecordId(), rowIdBytes) == 0); assertTrue(count == 1);
assertTrue(iter.hasNext()); assertTrue(iter.hasNext()); assertTrue(iter.hasNext());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("3 gsm/8000",rtpmap.getValue());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("8 pcma/8000",rtpmap.getValue());
assertTrue(verify(s, new int[]{941, 1336}));
assertEquals(marker, h2.getMarker()); assertEquals(payloadType, h2.getPayloadType()); assertEquals(seqNumber, h2.getSeqNumber()); assertEquals(timestamp, h2.getTimestamp()); assertEquals(ssrc, h2.getSsrc());
assertEquals(Integer.toString(i), range.next());
assertEquals(9201, port); assertEquals(80, rtpSocket.getJitter()); assertEquals(2, format.size()); assertEquals(1, rtpSocket.getRtpMap().size()); assertEquals(2, rtpSocket2.getRtpMap().size());
assertEquals(2, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("18 g729/8000",rtpmap.getValue()); assertEquals("fmtp",fmtp.getName()); assertEquals("18 annex=b",fmtp.getValue());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("10 l16/44100/2",rtpmap.getValue());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("11 l16/44100",rtpmap.getValue());
assertEquals(2, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("101 telephone-event/8000",rtpmap.getValue()); assertEquals("fmtp",fmtp.getName()); assertEquals("101 0-15",fmtp.getValue());
assertEquals(3, tokens.size()); assertEquals(true, t instanceof FixedToken); assertEquals(true, t instanceof FixedToken); assertEquals(true, t instanceof NumericRange);
assertEquals(true, range.hasMore());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("97 speex/8000",rtpmap.getValue());
assertEquals(1, attributes.size()); assertEquals("rtpmap",rtpmap.getName()); assertEquals("0 pcmu/8000",rtpmap.getValue());
assertTrue("Expected other number of packets", Math.abs(150 - count) < 10); assertEquals(true, echo.isInUse()); assertEquals(true, transmittor.isInUse()); assertEquals(false, echo.isInUse()); assertEquals(false, transmittor.isInUse());
assertSame("Ontology instance should be of type LocalOntology", LocalOntology.class, lOnt.getInstance().getClass());
assertTrue("Resource list should have a minimum of one resource.", lOnt.getLoadedOntologyResources().size() == 1);
assertNotNull("Test setUp should create a new instance of LocalOntology.", lOnt);
assertTrue(pid > 0);
assertTrue(!result); assertTrue(!result); assertTrue(!result); assertTrue(result); assertTrue(!result);
assertThat(numberOfCorrectCoffee).isBetween(expectedCount - variation, expectedCount + variation);
assertThat(numberOfCorrectCoffee).isBetween(expectedCount - variation, expectedCount + variation);
assertThat(result).contains(MapEntry.entry("a", "1"), MapEntry.entry("-Dc", "2"));
assertThat(System.getProperty("c")).isEqualTo("2");
assertNotNull(response);
assertTrue(MimeTypeHelper.isApp("application/atomsvc+xml")); assertFalse(MimeTypeHelper.isApp("application/atomserv+xml"));
assertNotNull(response);
assertNotNull(response);
assertEquals(0, feed.getEntries().size());
assertTrue(MimeTypeHelper.isXml("application/xml"));
assertEquals(s.length() - 2, n); assertEquals("abcdefghijklmnop", new String(chars, 0, n));
assertEquals("application/atom+xml;type=feed", mimeType1); assertEquals("application/atom+xml;type=entry", mimeType2); assertEquals("application/atomsvc+xml", mimeType3);
assertTrue(MimeTypeHelper.isAtom("application/atom+xml")); assertTrue(MimeTypeHelper.isAtom("application/atom+xml;type=\\"entry\\"")); assertTrue(MimeTypeHelper.isAtom("application/atom+xml;type=\\"feed\\""));
assertEquals(ResponseType.SUCCESS, resp.getType()); assertEquals(201, resp.getStatus()); assertEquals("http: resp = client.get("http: Document<Feed> feed_doc = resp.getDocument(); assertEquals(feed.getEntries().size(), 1);
assertTrue(ad1.hashCode() == ad1.hashCode()); assertFalse(ad1.hashCode() == ad2.hashCode());
assertNotNull(response);
assertNotNull(response);
assertTrue(MimeTypeHelper.isFeed("application/atom+xml;type=\\"feed\\""));
assertEquals(now, adNow.getDate()); assertFalse(now2.equals(adNow.getDate()));
assertEquals("utf-8", charsetIso); assertNull(charsetEmpty);
assertTrue(MimeTypeHelper.isMimeType("text/html")); assertTrue(MimeTypeHelper.isMimeType("*/*")); assertTrue(MimeTypeHelper.isMimeType("blafasel/pdf")); assertFalse(MimeTypeHelper.isMimeType("text"));
assertTrue(MimeTypeHelper.isText("text/plain"));
assertEquals(0, feed.getEntries().size());
assertNotNull(response);
assertNotNull(response);
assertNotNull(response);
assertNotNull(response);
assertEquals(200, resp.getStatus()); assertEquals(1, feed.getEntries().size());
assertTrue(MimeTypeHelper.isEntry("application/atom+xml;type=\\"entry\\""));
assertEquals(1, types.length); assertEquals("image/*", types[0]);
assertEquals(ad, adClone); assertNotSame(ad, adClone);
assertTrue(MimeTypeHelper.isMatch("application/atom+xml;type=entry", "application/atom+xml;type=feed")); assertTrue(MimeTypeHelper.isMatch("**")); assertFalse(MimeTypeHelper.isMatch(null, "application/atom+xml;type=feed")); assertFalse(MimeTypeHelper.isMatch("blafasel", "application/atom+xml;type=feed")); assertFalse(MimeTypeHelper.isMatch(mimeType1, mimeType2, true));
assertNotNull(response);
assertNotNull(response);
assertEquals(now, parsed);
assertEquals("GZIP", codec.toString());
assertNotNull(response);
assertTrue(MimeTypeHelper.isMultipart("multipart/related"));
assertThat(expected.getMessage(), containsString("Extension type == null"));
assertEquals(expected, p);
assertEquals(0, get); assertEquals(Integer.MAX_VALUE, i1.get()); assertEquals(127, get); assertEquals(126, i2.get()); assertEquals(Integer.MAX_VALUE, get); assertEquals(Integer.MAX_VALUE - 1, i3.get());
assertThat(ReflectUtils.getDescWithoutMethodName(Foo2.class.getDeclaredMethod("hello", int[].class)), equalTo("([I)Ljava/util/List;"));
assertTrue(ReflectUtils.isCompatible(short.class, (short) 1)); assertTrue(ReflectUtils.isCompatible(int.class, 1)); assertTrue(ReflectUtils.isCompatible(double.class, 1.2)); assertTrue(ReflectUtils.isCompatible(Object.class, 1.2)); assertTrue(ReflectUtils.isCompatible(List.class, new ArrayList<String>()));
assertThat(StringUtils.length(null), equalTo(0)); assertThat(StringUtils.length("abc"), equalTo(3));
assertEquals(Optional.of("1"), converter.convert("1")); assertEquals(Optional.empty(), converter.convert(null));
assertThat(ClassUtils.toShortString(null), equalTo("null")); assertThat(ClassUtils.toShortString(new ClassUtilsTest()), startsWith("ClassUtilsTest@"));
assertThat(response.getStatus().code(), equalTo(404));
assertThat(lines.length, equalTo(1)); assertThat(lines[0], equalTo(TEXT));
assertThat(ReflectUtils.getSignature("greeting", m.getParameterTypes()), equalTo("greeting([I)"));
assertEquals(subscribe, newSubscribe);
assertThat(StringUtils.parseInteger(null), equalTo(0)); assertThat(StringUtils.parseInteger("123"), equalTo(123));
assertTrue(config.publishConfig(key, group, content)); assertEquals("test", config.getProperties(key, group));
assertEquals("", CollectionUtils.join(list, "/")); assertEquals("x", CollectionUtils.join(list, "-")); assertEquals("a/b", CollectionUtils.join(list, "/"));
assertEquals(expectSubscribe, newSubscribe);
assertThat(expected.getMessage(), containsString("Extension type (class org.apache.dubbo.common.extension.ExtensionLoaderTest) is not an interface"));
assertThat(t.getName(), allOf(containsString("prefix-"), containsString("-thread-"))); assertTrue(t.isDaemon());
assertThat(s, containsString("a,")); assertThat(s, containsString("0,")); assertThat(s, containsString("{\\"enabled\\":true}"));
assertTrue(result.contains("Application has shutdown successfully"));
assertTrue(statItem.isAllowable()); assertTrue(statItem.isAllowable()); assertTrue(lastResetTime != statItem.getLastResetTime()); assertEquals(4, statItem.getToken());
assertThat(ConfigUtils.getProperty("dubbo"), equalTo("system"));
assertEquals("left blank", StringUtils.trim(" left blank")); assertEquals("right blank", StringUtils.trim("right blank ")); assertEquals("bi-side blank", StringUtils.trim(" bi-side blank "));
assertTrue(ReflectUtils.isPublicInstanceField(field)); assertFalse(ReflectUtils.isPublicInstanceField(field));
assertTrue(converter.accept(String.class, char[].class)); assertTrue(converter.accept(null, char[].class)); assertFalse(converter.accept(null, String.class)); assertFalse(converter.accept(null, String.class)); assertFalse(converter.accept(null, null));
assertThat(ConfigUtils.isNotEmpty("abc"), is(true));
assertEquals(((Throwable) o).getMessage(), "dubbo exception");
assertThat(LogUtil.checkNoError(), is(false)); assertThat(LogUtil.checkNoError(), is(true));
assertTrue(converter.convert("true")); assertTrue(converter.convert("true")); assertTrue(converter.convert("True")); assertFalse(converter.convert("a")); assertNull(converter.convert("")); assertNull(converter.convert(null));
assertEquals("1", converter.convert("1")); assertNull(converter.convert(null));
assertThat(ClassUtils.getClassLoader(), sameInstance(ClassUtils.class.getClassLoader()));
assertThat(output, containsString("greeting")); assertThat(output, containsString("help")); assertThat(output, containsString("ls")); assertThat(output, containsString("online")); assertThat(output, containsString("offline")); assertThat(output, containsString("quit"));
assertTrue(UrlUtils.isItemMatch(null, null)); assertTrue(!UrlUtils.isItemMatch("1", null)); assertTrue(!UrlUtils.isItemMatch(null, "1")); assertTrue(UrlUtils.isItemMatch("1", "1")); assertTrue(UrlUtils.isItemMatch("*", null)); assertTrue(UrlUtils.isItemMatch("*", "*")); assertTrue(UrlUtils.isItemMatch("*", "1234")); assertTrue(!UrlUtils.isItemMatch(null, "*"));
assertThat(ConfigUtils.getSystemProperty("dubbo"), equalTo("system-only"));
assertThat(LogUtil.findMessage("message"), equalTo(1));
assertThat((int) IOUtils.write(reader, writer, 16), equalTo(TEXT.length()));
assertThat(expected.getMessage(), containsString("No such method ")); assertThat(expected.getMessage(), containsString("in class"));
assertEquals(0, urls.size()); assertEquals(1, urls.size()); assertEquals("192.168.0.102", url.getHost()); assertEquals(20881, url.getPort()); assertEquals("com.alibaba.cloud.dubbo.service.DubboMetadataService", url.getServiceInterface());
assertTrue(configuration.publishConfig(KEY, CONTENT)); assertTrue(configuration.publishConfig(KEY, CONTENT)); assertTrue(configuration.publishConfig(KEY, CONTENT)); assertEquals(CONTENT, configuration.getConfig(KEY, DEFAULT_GROUP));
assertThat(IOUtils.read(reader), equalTo(TEXT));
assertEquals(CAPACITY, buffer.capacity()); assertEquals(0, buffer.readerIndex());
assertEquals("Used the demo as default.\\r\\nYou can cancel default service by command: cd /", result);
assertEquals("Illegal port a, must be integer.", result);
assertTrue(ArrayUtils.isEmpty(null)); assertTrue(ArrayUtils.isEmpty(new Object[0])); assertFalse(ArrayUtils.isEmpty(new Object[]{"abc"}));
assertThat(ConfigUtils.getPid(), greaterThan(0));
assertTrue(ReflectUtils.isBeanPropertyWriteMethod(method)); assertTrue(ReflectUtils.isBeanPropertyWriteMethod(method));
assertEquals(Short.valueOf("1"), converter.convert("1")); assertNull(converter.convert(null));
assertThat(this.gsonJsonObjectInput.readFloat(), is(1.88f));
assertEquals(asList("aaa"), merged);
assertFalse(server.isCalled());
assertNotNull(signature);
assertThat(status.getLevel(), is(Status.Level.WARN)); assertThat(status.getMessage(), containsString("status1")); assertThat(status.getMessage(), not(containsString("status2")));
assertTrue(NetUtils.isLocalHost("localhost")); assertTrue(NetUtils.isLocalHost("127.1.2.3")); assertFalse(NetUtils.isLocalHost("128.1.2.3"));
assertEquals(expected, p);
assertThat(ReflectUtils.getGenericClass(Foo1.class), sameInstance(String.class));
assertTrue(configManager.configsCache.isEmpty());
assertTrue(registered.contains(serviceUrl)); assertFalse(registered.contains(serviceUrl));
assertEquals(2, legalMap.size()); assertEquals("value2", legalMap.get("key2")); assertEquals(2, legalSpaceMap.size()); assertEquals("value2", legalSpaceMap.get("key2")); assertEquals(2, legalSpecialMap.size()); assertEquals("value*.1", legalSpecialMap.get("key-1")); assertEquals("value*.-_2", legalSpecialMap.get("key.2")); assertEquals(0, illegalMap.size());
assertNotNull(method); assertEquals("test", result.get(0).get(1));
assertThat(address.getHostName(), equalTo("localhost")); assertThat(address.getPort(), equalTo(1234)); assertThat(address.getHostName(), equalTo("localhost")); assertThat(address.getPort(), equalTo(0));
assertNull(value); assertNull(value); assertEquals("", value); assertEquals("one", value); assertEquals("one,two", value); assertEquals("one,two,three", value);
assertThat(this.gsonJsonObjectInput.readBytes(), is("hello".getBytes()));
assertThat(service2.getExportedUrls(), hasSize(1)); assertEquals(2, TestProxyFactory.count);
assertThat(ClassUtils.forName(ClassUtilsTest.class.getName()) == ClassUtilsTest.class, is(true));
assertEquals(StringUtils.join(s), "123");
assertEquals(LinkedList.class, listResult.getClass()); assertEquals(listResult, listStr); assertEquals(HashSet.class, setResult.getClass()); assertEquals(setResult, setStr);
assertNotNull(method); assertEquals("test", value.get(1));
assertTrue(ReflectUtils.isInstance(new Foo1(), Foo.class.getName()));
assertThat(context.getCommandName(), equalTo("test")); assertThat(context.isHttp(), is(false)); assertThat(context.getArgs(), arrayContaining("a", "b"));
assertThat(status.getLevel(), is(Status.Level.OK)); assertThat(status.getMessage(), isEmptyOrNullString());
assertTrue(delayService.getExportedUrls().isEmpty()); assertThat(delayService.getExportedUrls(), hasSize(1));
assertThat(NetUtils.getIpByHost("localhost"), equalTo("127.0.0.1")); assertThat(NetUtils.getIpByHost("dubbo"), equalTo("dubbo"));
assertEquals(100, i1.get()); assertThat(expected.getMessage(), allOf(containsString("new value"), containsString("< 0")));
assertTrue(obj instanceof LinkedHashMap); assertTrue(outputObject instanceof LinkedHashMap); assertTrue(objects[0] instanceof LinkedHashMap); assertEquals(objects[0], outputObject);
assertEquals(Float.valueOf("1.0"), converter.convert("1.0")); assertNull(converter.convert(null));
assertEquals(3, get); assertEquals(3, i1.get()); assertEquals(127 + 3, get); assertEquals(127 + 3, i2.get()); assertEquals(2, get); assertEquals(2, i3.get());
assertTrue(builder.accept(processingEnv, integersField.asType())); assertTrue(builder.accept(processingEnv, stringsField.asType())); assertTrue(builder.accept(processingEnv, primitiveTypeModelsField.asType())); assertTrue(builder.accept(processingEnv, modelsField.asType())); assertTrue(builder.accept(processingEnv, colorsField.asType()));
assertEquals(boolean.class, ReflectUtils.name2class("boolean")); assertEquals(boolean[].class, ReflectUtils.name2class("boolean[]")); assertEquals(int[][].class, ReflectUtils.name2class(ReflectUtils.getName(int[][].class))); assertEquals(ReflectUtilsTest[].class, ReflectUtils.name2class(ReflectUtils.getName(ReflectUtilsTest[].class)));
assertNull(newForbid);
assertNotNull(method);
assertEquals(false, notified.get()); assertEquals(1, latch.getCount()); assertEquals(0, latch.getCount()); assertEquals(true, notified.get());
assertThat(status.getLevel(), is(Status.Level.ERROR));
assertThat(map.size(), is(2)); assertThat(map, hasKey("set")); assertThat(map, hasKey("property"));
assertFalse(StringUtils.isNoneEmpty(null)); assertFalse(StringUtils.isNoneEmpty("")); assertTrue(StringUtils.isNoneEmpty(" ")); assertTrue(StringUtils.isNoneEmpty("abc")); assertTrue(StringUtils.isNoneEmpty("abc", "def")); assertFalse(StringUtils.isNoneEmpty("abc", null)); assertFalse(StringUtils.isNoneEmpty("abc", "")); assertTrue(StringUtils.isNoneEmpty("abc", " "));
assertThat(stack.isEmpty(), is(false)); assertThat(stack.isEmpty(), is(true));
assertEquals(StringUtils.translate(s, "123456", "abcdef"), "afcad"); assertEquals(StringUtils.translate(s, "123456", "abcd"), "acad");
assertEquals(consumerUrl, subscribed.keySet().iterator().next()); assertEquals(serviceUrl.toFullString(), notifyUrl[0].toFullString());
assertNotNull(method);
assertThat(t.getName(), allOf(containsString("pool-"), containsString("-thread-"))); assertFalse(t.isDaemon()); assertSame(t.getThreadGroup(), Thread.currentThread().getThreadGroup());
assertTrue(o instanceof String[]); assertEquals(((String[]) o)[0], "FRIDAY"); assertEquals(((String[]) o)[1], "SATURDAY");
assertThat(message.getContent(), equalTo("greeting")); assertThat(message.getFrom(), equalTo("dubbo")); assertTrue(message.isUrgent());
assertTrue(result.contains("Please use the invoke command first."));
assertThat(StringUtils.getServiceKey(map), equalTo("dubbo/a.b.c.Foo:1.0.0"));
assertEquals("" + availablePort + "", result);
assertThat(toStringMap("key", "value"), equalTo(Collections.singletonMap("key", "value")));
assertEquals("192.168.0.1" + ":10000", urls.get(0).getAddress()); assertEquals("192.168.0.2" + ":10000", urls.get(1).getAddress());
assertThat(classes, containsInAnyOrder(GreetingCommand.class, Help.class, Ls.class, Offline.class, Online.class, Quit.class, Ready.class, Version.class, PublishMetadata.class));
assertThat(config.getGeneric(), equalTo(GENERIC_SERIALIZATION_DEFAULT));
assertThat(response, not(nullValue())); assertThat(response.getEntity(), instanceOf(ViolationReport.class));
assertTrue(NetUtils.isValidAddress("10.20.130.230:20880")); assertFalse(NetUtils.isValidAddress("10.20.130.230")); assertFalse(NetUtils.isValidAddress("10.20.130.230:666666"));
assertThat(ReflectUtils.getDesc(Foo2.class.getDeclaredMethod("hello", int[].class)), equalTo("hello([I)Ljava/util/List;"));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertFalse(ConfigManager.isDefaultConfig(providerConfig)); assertTrue(ConfigManager.isDefaultConfig(providerConfig1)); assertTrue(ConfigManager.isDefaultConfig(providerConfig3)); assertFalse(ConfigManager.isDefaultConfig(protocolConfig));
assertThat(builder.build().getGeneric(), equalTo(GENERIC_SERIALIZATION_DEFAULT)); assertThat(builder.build().getGeneric(), equalTo(GENERIC_SERIALIZATION_NATIVE_JAVA)); assertThat(builder.build().getGeneric(), equalTo(GENERIC_SERIALIZATION_BEAN));
assertTrue(result.contains("Application has shutdown successfully") && (end - start) > sleepTime);
assertTrue(deepEquals(new Integer[]{123}, converter.convert("123", Integer[].class, Integer.class))); assertTrue(deepEquals(new Integer[]{1, 2, 3}, converter.convert("1,2,3", Integer[].class, null))); assertNull(converter.convert("", Integer[].class, null)); assertNull(converter.convert(null, Integer[].class, null));
assertThat(ReflectUtils.getName(c), equalTo("(java.util.List,int[])"));
assertThat(captor.getAllValues(), contains("unknown :no such command", "\\r\\ndubbo>"));
assertThat((int) IOUtils.write(is, os, 16), equalTo(TEXT.length()));
assertEquals(echoEvent, listener.getEchoEvent()); assertEquals(value, listener.getEchoEvent().getSource());
assertThat(expected.getMessage(), allOf(containsString("org.apache.dubbo.common.extension.NoSpiExt"), containsString("is not an extension"), containsString("NOT annotated with @SPI")));
assertEquals(2, cache.getReferredReferences().size()); assertTrue(config.isDestroyMethodRun()); assertEquals(1, cache.getReferredReferences().size()); assertTrue(configCopy.isDestroyMethodRun()); assertEquals(0, cache.getReferredReferences().size());
assertEquals(1, parameters.size()); assertEquals("1.0.0", version);
assertNull(CollectionUtils.joinAll(null, null)); assertNull(CollectionUtils.joinAll(null, "-")); assertEquals(expected, output);
assertFalse(NetUtils.isValidV4Address((InetAddress) null)); assertFalse(NetUtils.isValidV4Address(address)); assertFalse(NetUtils.isValidV4Address(address)); assertFalse(NetUtils.isValidV4Address(address)); assertFalse(NetUtils.isValidV4Address(address)); assertTrue(NetUtils.isValidV4Address(address));
assertEquals("dubbo.version=2.0.0&group=test&version=1.0.0", newSubscribe.get("test/dubbo.test.api.HelloService:1.0.0"));
assertThat(context.getCommandName(), equalTo("test")); assertThat(context.isHttp(), is(true)); assertThat(context.getArgs(), arrayContaining("b", "d"));
assertTrue(listeners.isEmpty()); assertTrue(received.get(consumerUrl).isEmpty());
assertTrue(result.contains(method.getName()));
assertThat(curatorClient.checkExists(path), is(false)); assertNull(curatorClient.getContent(path)); assertThat(curatorClient.checkExists(path), is(true)); assertEquals(curatorClient.getContent(path), content);
assertEquals(Color.class.getName(), typeDefinition.getType()); assertEquals(asList("RED", "YELLOW", "BLUE"), typeDefinition.getEnums());
assertTrue(result.contains("Please input the index of the method you want to invoke"));
assertTrue(address.getAddress().isAnyLocalAddress()); assertEquals(address.getPort(), 12345); assertEquals(address.getHostName(), "dubbo-addr"); assertEquals(address.getPort(), 12345);
assertEquals("org.apache.dubbo.rpc.protocol.dubbo.support.DemoService", result);
assertTrue(ReflectUtils.isPrimitive(boolean.class)); assertTrue(ReflectUtils.isPrimitive(String.class)); assertTrue(ReflectUtils.isPrimitive(Boolean.class)); assertTrue(ReflectUtils.isPrimitive(Character.class)); assertTrue(ReflectUtils.isPrimitive(Number.class)); assertTrue(ReflectUtils.isPrimitive(Date.class)); assertFalse(ReflectUtils.isPrimitive(Map.class));
assertEquals("PROVIDER:\\r\\norg.apache.dubbo.qos.legacy.service.DemoService -> published: N\\r\\n", result);
assertTrue(StringUtils.isEquals(null, null)); assertFalse(StringUtils.isEquals(null, "")); assertTrue(StringUtils.isEquals("abc", "abc")); assertFalse(StringUtils.isEquals("abc", "ABC"));
assertThat(ReflectUtils.getDesc(Foo2.class.getConstructors()[0]), equalTo("(Ljava/util/List;[I)V"));
assertEquals("Please input service name, eg: \\r\\ncd XxxService\\r\\ncd com.xxx.XxxService", result);
assertThat(skip, is(0L));
assertEquals(asList(), merged);
assertThat((String) ConfigUtils.getProperties().get("key1"), equalTo("value1"));
assertThat(StringUtils.getQueryStringValue("key1=value1&key2=value2", "key1"), equalTo("value1")); assertThat(StringUtils.getQueryStringValue("key1=value1&key2=value2", "key2"), equalTo("value2")); assertThat(StringUtils.getQueryStringValue("", "key1"), isEmptyOrNullString());
assertNull(sorted.get(0)); assertNull(sorted.get(1));
assertThat(reader.markSupported(), is(true));
assertEquals("No such service: xx", result);
assertThat(response, not(nullValue())); assertThat(response.getEntity(), instanceOf(String.class));
assertThat(protocol.getDefaultPort(), is(80));
assertThat(client1, not(client2));
assertEquals("No such port 20880", result);
assertEquals(2, cache.getReferredReferences().size()); assertTrue(config.isDestroyMethodRun()); assertTrue(configCopy.isDestroyMethodRun()); assertEquals(0, cache.getReferredReferences().size());
assertEquals(0, copy.readerIndex()); assertEquals(buffer.readableBytes(), copy.writerIndex()); assertEquals(buffer.readableBytes(), copy.capacity()); assertEquals(buffer.getByte(i + readerIndex), copy.getByte(i)); assertTrue(buffer.getByte(readerIndex) != copy.getByte(0)); assertTrue(buffer.getByte(readerIndex + 1) != copy.getByte(1));
assertNotNull(instance.getMetadata(METADATA_SERVICE_URLS_PROPERTY_NAME)); assertNotNull(instance.getMetadata(METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME));
assertEquals(asList("fixed", "cached", "aaa", "bbb", "default.custom"), merged);
assertTrue(NetUtils.isInvalidLocalHost(null)); assertTrue(NetUtils.isInvalidLocalHost("")); assertTrue(NetUtils.isInvalidLocalHost("localhost")); assertTrue(NetUtils.isInvalidLocalHost("0.0.0.0")); assertTrue(NetUtils.isInvalidLocalHost("127.1.2.3")); assertTrue(NetUtils.isInvalidLocalHost("127.0.0.1")); assertFalse(NetUtils.isInvalidLocalHost("128.0.0.1"));
assertThat((int) IOUtils.write(writer, TEXT), equalTo(TEXT.length()));
assertTrue(result.contains("CURRENT LOG APPENDER"));
assertTrue(NetUtils.isMulticastAddress("224.0.0.1")); assertFalse(NetUtils.isMulticastAddress("127.0.0.1"));
assertThat(ClassUtils.getCallerClassLoader(ClassUtilsTest.class), sameInstance(ClassUtilsTest.class.getClassLoader()));
assertThat(registered.contains(serviceUrl), is(true)); assertThat(registered.size(), is(1));
assertEquals("No such service demo", result);
assertTrue(builder.accept(processingEnv, stringsField.asType())); assertTrue(builder.accept(processingEnv, colorsField.asType())); assertTrue(builder.accept(processingEnv, primitiveTypeModelsField.asType())); assertTrue(builder.accept(processingEnv, modelsField.asType())); assertTrue(builder.accept(processingEnv, modelArraysField.asType()));
assertThat(ClassUtils.getClassLoader(ClassUtilsTest.class), sameInstance(oldClassLoader)); assertThat(ClassUtils.getClassLoader(ClassUtilsTest.class), sameInstance(ClassUtilsTest.class.getClassLoader()));
assertNull(NetUtils.filterLocalHost(null)); assertEquals(NetUtils.filterLocalHost(""), ""); assertThat(host, equalTo(NetUtils.getLocalHost() + ":8080")); assertThat(host, equalTo(NetUtils.getLocalHost())); assertThat(host, equalTo(host));
assertTrue(StringUtils.isBlank(null)); assertTrue(StringUtils.isBlank("")); assertFalse(StringUtils.isBlank("abc"));
assertThat(gsonJsonObjectInput.readBool(), is(true));
assertThat(status.getLevel(), is(Status.Level.ERROR)); assertThat(status.getMessage(), containsString("status1")); assertThat(status.getMessage(), containsString("status2")); assertThat(status.getMessage(), not(containsString("status3")));
assertNotNull(event.toString());
assertEquals(service.enumlength(new Type[]{}), Type.Lower); assertEquals(service.getSize(null), -1); assertEquals(service.getSize(new String[]{"", "", ""}), 3); assertEquals(set.size(), 1); assertEquals(set.iterator().next(), "aa");
assertTrue(configManager.getApplication().isPresent()); assertFalse(configManager.getProviders().isEmpty()); assertFalse(configManager.getProtocols().isEmpty());
assertEquals(KEY, event.getKey()); assertEquals("test", event.getKey());
assertEquals(Integer.MAX_VALUE, converter.getPriority());
assertEquals("ab-cd-ef", StringUtils.camelToSplitName("abCdEf", "-")); assertEquals("ab-cd-ef", StringUtils.camelToSplitName("AbCdEf", "-")); assertEquals("ab-cd-ef", StringUtils.camelToSplitName("ab-cd-ef", "-")); assertEquals("abcdef", StringUtils.camelToSplitName("abcdef", "-"));
assertThat(logger1, is(logger2));
assertThat((String) p.get("dubbo"), equalTo("properties"));
assertThat(server.isBound(), is(true));
assertThat(queryString, containsString("key1=value1")); assertThat(queryString, containsString("key2=value2"));
assertThat(ExecutorUtil.isTerminated(executor), is(true)); assertThat(ExecutorUtil.isTerminated(executor2), is(false));
assertTrue(result.contains(ReflectUtils.getName(method)));
assertThat(new String(captor.getValue().array()), containsString("Foreign Ip Not Permitted"));
assertEquals("DUBBO_TAG1", StringUtils.toOSStyleKey("dubbo_tag1")); assertEquals("DUBBO_TAG1", StringUtils.toOSStyleKey("dubbo.tag1")); assertEquals("DUBBO_TAG1_TAG11", StringUtils.toOSStyleKey("dubbo.tag1.tag11")); assertEquals("DUBBO_TAG1", StringUtils.toOSStyleKey("tag1"));
assertNotNull(ReflectUtils.findMethodByMethodName(Foo.class, "hello"));
assertThat(map.size(), is(2)); assertThat(map, hasKey("set")); assertThat(map, hasKey("property"));
assertFalse(ArrayUtils.isNotEmpty(null)); assertFalse(ArrayUtils.isNotEmpty(new Object[0])); assertTrue(ArrayUtils.isNotEmpty(new Object[]{"abc"}));
assertTrue(consulServiceDiscovery.getInstances(serviceName).isEmpty()); assertTrue(r.contains("127.0.0.1:" + portA)); assertTrue(r.contains("127.0.0.1:" + portB));
assertTrue(StringUtils.isEmpty(null)); assertTrue(StringUtils.isEmpty("")); assertFalse(StringUtils.isEmpty("abc"));
assertTrue(ReflectUtils.isPrimitives(boolean[].class)); assertTrue(ReflectUtils.isPrimitives(byte.class)); assertFalse(ReflectUtils.isPrimitive(Map[].class));
assertThat(response.getStatus().code(), equalTo(200));
assertEquals(expected, CollectionUtils.sort(list));
assertThat(ConfigUtils.getProperty("not-exist", "default"), equalTo("default"));
assertThat(output, equalTo(QosConstants.CLOSE));
assertFalse(StringUtils.isInteger(null)); assertFalse(StringUtils.isInteger("")); assertTrue(StringUtils.isInteger("123"));
assertEquals(Integer.valueOf("1"), converter.convert("1")); assertNull(converter.convert(null));
assertFalse(server.isCalled());
assertThat(context.getCommandName(), equalTo("test")); assertThat(context.isHttp(), is(true)); assertThat(context.getArgs(), arrayContaining("b", "d"));
assertThat(DubboAppender.logList, hasSize(0)); assertThat(DubboAppender.logList, hasSize(1)); assertThat(log.getLogThread(), equalTo("thread-name"));
assertThat(monitor, not(nullValue())); assertThat(invoker.getUrl().getParameter(REFERENCE_FILTER_KEY), containsString("testFilter"));
assertThat(status, notNullValue());
assertEquals(s, "1ABC2ABC3"); assertEquals(s, "123");
assertThat(children.size(), is(2));
assertThat(response, is("Tomcat"));
assertThat(cache.getCapacity(), equalTo(1000));
assertTrue(builder.accept(processingEnv, stringsField.asType())); assertTrue(builder.accept(processingEnv, colorsField.asType())); assertTrue(builder.accept(processingEnv, primitiveTypeModelsField.asType())); assertTrue(builder.accept(processingEnv, modelsField.asType())); assertTrue(builder.accept(processingEnv, modelArraysField.asType()));
assertEquals(0, i1.get()); assertEquals(127, i2.get()); assertEquals(Integer.MAX_VALUE, i3.get());
assertEquals("PROVIDER:\\r\\norg.apache.dubbo.qos.legacy.service.DemoService\\r\\n", result);
assertThat(expected.getMessage(), containsString("Not unique method for method name("));
assertNotNull(NetUtils.getLocalHost());
assertThat(ReflectUtils.getName(Foo2.class.getDeclaredMethod("hello", int[].class)), equalTo("java.util.List hello(int[])"));
assertThat(result, equalTo("greeting dubbo"));
assertEquals(expected, p);
assertThat(context.getCommandName(), equalTo("test")); assertThat(context.getCommandName(), equalTo("command")); assertThat(context.getArgs(), Matchers.arrayContaining("hello")); assertTrue(context.isHttp());
assertEquals(Long.valueOf("1"), converter.convert("1")); assertNull(converter.convert(null));
assertThat(curatorClient.checkExists(path), is(true)); assertThat(curatorClient.checkExists(path + "/noneexits"), is(false));
assertEquals(asList("cached", "aaa"), merged);
assertNotNull(serviceDiscovery.getServices());
assertEquals(o, Day.MONDAY);
assertNotNull(constructor);
assertFalse(socket.isClosed()); assertTrue(socket.isClosed());
assertThat((String) p.get("a"), equalTo("12")); assertThat((String) p.get("b"), equalTo("34")); assertThat((String) p.get("c"), equalTo("56"));
assertEquals(expected, p);
assertEquals("Cancelled default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
assertThat(CommandHelper.getCommandClass("greeting"), equalTo(GreetingCommand.class)); assertNull(CommandHelper.getCommandClass("not-exiting"));
assertThat(newIs, is(is));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertThat(status.getLevel(), anyOf(is(OK), is(WARN)));
assertEquals("method1", m.getName()); assertEquals(1, parameterTypes.length); assertEquals(int.class, parameterTypes[0]);
assertThat(subscribed.size(), is(1)); assertThat(subscribed.get(serviceUrl).size(), is(1)); assertThat(subscribed.size(), is(1)); assertThat(subscribed.get(serviceUrl).size(), is(0));
assertThat(output, containsString("COMMAND NAME")); assertThat(output, containsString("greeting")); assertThat(output, containsString("EXAMPLE")); assertThat(output, containsString("greeting dubbo"));
assertTrue(StringUtils.isAnyEmpty(null)); assertTrue(StringUtils.isAnyEmpty("")); assertFalse(StringUtils.isAnyEmpty(" ")); assertFalse(StringUtils.isAnyEmpty("abc")); assertFalse(StringUtils.isAnyEmpty("abc", "def")); assertTrue(StringUtils.isAnyEmpty("abc", null)); assertTrue(StringUtils.isAnyEmpty("abc", "")); assertFalse(StringUtils.isAnyEmpty("abc", " "));
assertThat(url.toString(), equalTo(""));
assertEquals(forbid, newForbid);
assertEquals(param.getValue(), value); assertEquals(VALUE, parameter);
assertEquals(new AtomicPositiveInteger(), new AtomicPositiveInteger()); assertEquals(new AtomicPositiveInteger(1), new AtomicPositiveInteger(1));
assertThat((int) IOUtils.write(is, os), equalTo(TEXT.length()));
assertThat(NetUtils.getAvailablePort(), greaterThan(0)); assertThat(NetUtils.getAvailablePort(12345), greaterThanOrEqualTo(12345)); assertThat(NetUtils.getAvailablePort(-1), greaterThanOrEqualTo(0));
assertNull(configuration.getInternalProperty(null));
assertTrue(builder.accept(processingEnv, typeElement.asType()));
assertNull(url.getAbsolutePath()); assertEquals("/home/user1/route.js", url.getAbsolutePath());
assertThat(stream.markSupported(), is(true)); assertThat(stream.position(), is(2)); assertThat(stream.position(), is(1));
assertEquals(register, newRegister);
assertEquals(ReflectUtils.getPropertyNameFromBeanReadMethod(method), "property"); assertEquals(ReflectUtils.getPropertyNameFromBeanReadMethod(method), "set");
assertThat(isEmpty(null), is(true)); assertThat(isEmpty(new HashSet()), is(true)); assertThat(isEmpty(emptyList()), is(true));
assertTrue(registered.contains(serviceUrl)); assertEquals(1, registered.size());
assertTrue(content.contains(value));
assertThat(ConfigUtils.isDefault("true"), is(true)); assertThat(ConfigUtils.isDefault("TRUE"), is(true)); assertThat(ConfigUtils.isDefault("default"), is(true)); assertThat(ConfigUtils.isDefault("DEFAULT"), is(true));
assertTrue(NetUtils.isAnyHost("0.0.0.0")); assertFalse(NetUtils.isAnyHost("1.1.1.1"));
assertEquals(emptySet(), set); assertEquals(emptySet(), set); assertEquals(expectedSet, set);
assertEquals("Used the DemoService as default.\\r\\nYou can cancel default service by command: cd /", result);
assertThat(status.getLevel(), is(Status.Level.ERROR));
assertNotNull(signature); assertNotEquals(signature, signature1);
assertThat(response.getStatus().code(), equalTo(404));
assertThat(curatorClient.checkExists(path), is(false)); assertNull(curatorClient.getContent(path)); assertThat(curatorClient.checkExists(path), is(true)); assertEquals(curatorClient.getContent(path), content);
assertThat(server.isStarted(), is(true)); assertThat(server.getHost(), is("localhost")); assertThat(server.getPort(), is(12345)); assertThat(server.isAcceptForeignIp(), is(false));
assertEquals(Double.valueOf("1.0"), converter.convert("1.0")); assertNull(converter.convert(null));
assertTrue(result.startsWith("Use default service org.apache.dubbo.qos.legacy.service.DemoService.\\r\\n" + "org.apache.dubbo.qos.legacy.service.DemoService (as provider):\\r\\n")); assertTrue(result.contains(method.getName()));
assertTrue(ReflectUtils.isBeanPropertyReadMethod(method)); assertFalse(ReflectUtils.isBeanPropertyReadMethod(method)); assertFalse(ReflectUtils.isBeanPropertyReadMethod(method)); assertFalse(ReflectUtils.isBeanPropertyReadMethod(method));
assertNull(configuration.getConfig(null, null)); assertNull(configuration.getConfig(null, null, 200));
assertEquals("/", result);
assertThat(url.getParameter(THREAD_NAME_KEY), equalTo("custom-thread-localhost:1234"));
assertEquals("dubbo.tag1", StringUtils.toURLKey("dubbo_tag1")); assertEquals("dubbo.tag1.tag11", StringUtils.toURLKey("dubbo-tag1_tag11"));
assertEquals(1, get); assertEquals(1, i1.get()); assertEquals(128, get); assertEquals(128, i2.get()); assertEquals(0, get); assertEquals(0, i3.get());
assertTrue(UrlUtils.isMatchGlobPattern("*", "value")); assertTrue(UrlUtils.isMatchGlobPattern("", null)); assertFalse(UrlUtils.isMatchGlobPattern("", "value")); assertTrue(UrlUtils.isMatchGlobPattern("value", "value")); assertTrue(UrlUtils.isMatchGlobPattern("v*", "value")); assertTrue(UrlUtils.isMatchGlobPattern("*e", "value")); assertTrue(UrlUtils.isMatchGlobPattern("v*e", "value"));
assertThat(LogUtil.findLevelWithThreadName(Level.ERROR, "thread-2"), equalTo(1));
assertThat(lookup.size(), is(0)); assertThat(lookup.size(), is(1));
assertThat(ConfigUtils.getProperty("dubbo"), equalTo("properties"));
assertThat(s, containsString("greeting")); assertThat(s, containsString("java.lang.RuntimeException: abc"));
assertEquals("myname", personInfo.getName()); assertTrue(personInfo.isMale()); assertFalse(personInfo.isFemale());
assertThat(lookup.size(), is(0)); assertThat(lookup.size(), is(1));
assertTrue(NetUtils.isValidLocalHost("1.2.3.4")); assertTrue(NetUtils.isValidLocalHost("128.0.0.1"));
assertThat(gsonJsonObjectInput.readInt(), is(1));
assertEquals(subscribe, newSubscribe);
assertThat(new String(bos.toByteArray()), equalTo(TEXT + System.lineSeparator()));
assertNull(CollectionUtils.splitAll(null, null)); assertNull(CollectionUtils.splitAll(null, "-")); assertTrue(CollectionUtils.splitAll(new HashMap<String, List<String>>(), "-").isEmpty()); assertEquals(expected, CollectionUtils.splitAll(input, ":"));
assertTrue(o instanceof Object[]); assertEquals(((Object[]) o).length, 2);
assertThat(this.gsonJsonObjectInput.readBytes(), is("ll".getBytes()));
assertThat(NetUtils.getRandomPort(), greaterThanOrEqualTo(30000)); assertThat(NetUtils.getRandomPort(), greaterThanOrEqualTo(30000)); assertThat(NetUtils.getRandomPort(), greaterThanOrEqualTo(30000));
assertEquals(1, LogUtil.findMessage("Exception in AccessLogFilter of service"));
assertThat(this.gsonJsonObjectInput.readDouble(), is(1.66d));
assertFalse(PojoUtils.isPojo(boolean.class)); assertFalse(PojoUtils.isPojo(Map.class)); assertFalse(PojoUtils.isPojo(List.class)); assertTrue(PojoUtils.isPojo(Person.class));
assertThat(gsonJsonObjectInput.readLong(), is(1000L));
assertEquals("Used the org.apache.dubbo.qos.legacy.service.DemoService as default.\\r\\nYou can cancel default service by command: cd /", result);
assertEquals(mockValue, apolloDynamicConfiguration.getInternalProperty(mockKey)); assertEquals(mockValue, apolloDynamicConfiguration.getInternalProperty(mockKey)); assertNull(apolloDynamicConfiguration.getInternalProperty(mockKey));
assertNotNull(NetUtils.getHostName("127.0.0.1"));
assertEquals("Cancelled default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
assertEquals(asList("aaa", "bbb", "fixed", "cached", "zzz"), merged);
assertThat(status.getLevel(), is(Status.Level.OK)); assertThat(status.getMessage(), is("test1,test2"));
assertNotNull(address); assertTrue(NetUtils.isValidLocalHost(address.getHostAddress()));
assertThat(status.getLevel(), is(Status.Level.OK));
assertNull(ReflectUtils.getCodeBase(null)); assertNull(ReflectUtils.getCodeBase(String.class)); assertNotNull(ReflectUtils.getCodeBase(ReflectUtils.class));
assertNull(dataStore.get("name", "key"));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertEquals(0, latch.getCount());
assertThat(captor.getValue(), containsString("greeting")); assertThat(captor.getValue(), containsString("dubbo>"));
assertEquals(expected, p); assertEquals(expected, p);
assertThat(writer.toString(), is("abc"));
assertTrue(NetUtils.isInvalidPort(0)); assertTrue(NetUtils.isInvalidPort(65536)); assertFalse(NetUtils.isInvalidPort(1024));
assertEquals(ReflectUtils.getPropertyNameFromBeanWriteMethod(method), "property");
assertEquals("Hello,World", event.getSource()); assertTrue(event.getTimestamp() >= timestamp);
assertTrue(result.contains("Illegal index ,please input select 1")); assertTrue(result.contains("Illegal index ,please input select 1")); assertTrue(result.contains("Illegal index ,please input select 1"));
assertEquals("", StringUtils.join(list, ",")); assertEquals("v1", StringUtils.join(list, "-")); assertEquals("v1:v2:v3", out);
assertEquals(mockValue, apolloDynamicConfiguration.getConfig(mockKey, DEFAULT_NAMESPACE, 3000L)); assertNull(apolloDynamicConfiguration.getConfig(mockKey, DEFAULT_NAMESPACE, 3000L));
assertThat((int) IOUtils.write(reader, writer), equalTo(TEXT.length()));
assertTrue(NetUtils.matchIpExpression("192.168.1.*", "192.168.1.63", 90)); assertTrue(NetUtils.matchIpExpression("192.168.1.192/26", "192.168.1.199", 90));
assertNull(UrlUtils.parseURLs(null, null));
assertThat(reader.ready(), is(true));
assertFalse(StringUtils.isNotEmpty(null)); assertFalse(StringUtils.isNotEmpty("")); assertTrue(StringUtils.isNotEmpty("abc"));
assertEquals(mockValue, result.getContent()); assertEquals(mockKey, result.getKey()); assertEquals(ConfigChangeType.MODIFIED, result.getChangeType());
assertThat(c == ClassUtils.class, is(true));
assertThat(isNotEmpty(singleton("a")), is(true));
assertEquals("Unsupported parameter test for pwd.", result);
assertThat(LogUtil.findThread("thread-1"), equalTo(1));
assertEquals(test[1], 2); assertEquals(test[2].getClass(), Bean.class); assertEquals(test[0], 1);
assertNotNull(serviceDiscovery.getInstances(serviceName));
assertFalse(ReflectUtils.isCompatible(new Class[]{short.class, int.class}, new Object[]{(short) 1})); assertFalse(ReflectUtils.isCompatible(new Class[]{double.class}, new Object[]{"hello"})); assertTrue(ReflectUtils.isCompatible(new Class[]{double.class}, new Object[]{1.2}));
assertEquals(ElementKind.CLASS, subType.getKind()); assertEquals(ElementKind.ENUM, subType.getKind());
assertTrue(callback.isExecuted());
assertThat(LogUtil.findName("a"), equalTo(1));
assertThat(NetUtils.toAddressString(socketAddress), equalTo("dubbo:1234"));
assertThat(LogUtil.findMessage(Level.ERROR, "message"), equalTo(1));
assertEquals(InjectExtImpl.class, injectExt.getClass()); assertEquals(InjectExtImpl.class, loader.getOrDefaultExtension("injection").getClass());
assertThat(ClassUtils.forName("byte") == byte.class, is(true)); assertThat(ClassUtils.forName("java.lang.String[]") == String[].class, is(true)); assertThat(ClassUtils.forName("[Ljava.lang.String;") == String[].class, is(true));
assertTrue(CommandHelper.hasCommand("greeting")); assertFalse(CommandHelper.hasCommand("not-exiting"));
assertThat(server.isBound(), is(true));
assertThat((String)p.get("dubbo"), equalTo("properties"));
assertThat(logger1, is(logger2));
assertThat(normalized.getHostAddress(), equalTo("fe80:0:0:0:894:aeec:f37d:23e1%5"));
assertEquals(expected, p);
assertThat(StringUtils.toString(new RuntimeException("abc")), containsString("java.lang.RuntimeException: abc"));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN)); assertThat(registry, not(nullValue())); assertThat(status.getLevel(), is(Status.Level.OK)); assertThat(status.getLevel(), is(Status.Level.OK));
assertThat(LogUtil.findLevel(Level.ERROR), equalTo(1)); assertThat(LogUtil.findLevel(Level.INFO), equalTo(0));
assertThat(StringUtils.isContains("a,b, c", "b"), is(true)); assertThat(StringUtils.isContains("", "b"), is(false)); assertThat(StringUtils.isContains(new String[]{"a", "b", "c"}, "b"), is(true)); assertThat(StringUtils.isContains((String[]) null, null), is(false));
assertEquals(0, get); assertEquals(1, i1.get()); assertEquals(127, get); assertEquals(128, i2.get()); assertEquals(Integer.MAX_VALUE, get); assertEquals(0, i3.get());
assertThat(StringUtils.isJavaIdentifier(""), is(false)); assertThat(StringUtils.isJavaIdentifier("1"), is(false)); assertThat(StringUtils.isJavaIdentifier("abc123"), is(true)); assertThat(StringUtils.isJavaIdentifier("abc(23)"), is(false));
assertEquals(0, get); assertEquals(100, i1.get()); assertThat(expected.getMessage(), allOf(containsString("new value"), containsString("< 0")));
assertThat(expected.getMessage(), containsString("only 1 META-INF/services/org.apache.dubbo.common.status.StatusChecker file is expected, but 2 dubbo.properties files found on class path:"));
assertEquals(Integer.MAX_VALUE, get); assertEquals(Integer.MAX_VALUE, i1.get()); assertEquals(126, get); assertEquals(126, i2.get()); assertEquals(Integer.MAX_VALUE - 1, get); assertEquals(Integer.MAX_VALUE - 1, i3.get());
assertThat(lines.length, equalTo(3)); assertThat(lines[0], equalTo("a")); assertThat(lines[1], equalTo("b")); assertThat(lines[2], equalTo("c"));
assertThat(this.gsonJsonObjectInput.readByte(), is((byte) 123));
assertThat(server.isStarted(), is(true)); assertThat(server.getHost(), is("localhost")); assertThat(server.getPort(), is(12345)); assertThat(server.isAcceptForeignIp(), is(false));
assertThat(gsonJsonObjectInput.readShort(), is((short) 2));
assertThat(result, equalTo(expected));
assertEquals(null, handler.parse("null")); assertEquals(true, handler.parse("true")); assertEquals(false, handler.parse("false")); assertEquals("my string", handler.parse("\'my string\'")); assertEquals("null", handler.parse("\'null\'")); assertEquals("true", handler.parse("\'true\'")); assertEquals(2, handler.parse("2")); assertEquals(2.4, handler.parse("2.4")); assertEquals("", handler.parse("\'\'"));
assertNull(PathUtil.split(null));
assertEquals("null", handler.format(null)); assertEquals("true", handler.format(true)); assertEquals("false", handler.format(false)); assertEquals("\\"my string\\"", handler.format("my string")); assertEquals("\\"null\\"", handler.format("null")); assertEquals("\\"true\\"", handler.format("true")); assertEquals("2", handler.format(2)); assertEquals("2.4", handler.format(2.4)); assertEquals("\\"\\"", handler.format(""));
assertTrue(FileUtil.compare("src", "pom.xml") < 0); assertTrue(FileUtil.compare("pom.xml", "src") > 0);
assertFalse(files.contains(new File("./src/test/java/not-found.txt"))); assertTrue(files.contains(new File("./src/test/java/com/googlecode/mycontainer/maven/plugin/util/ListFileCrawlerTest.java")));
assertNotNull(mb.mockService); assertEquals(IDO_IT, mb.callDoIt()); assertEquals(IDO_IT, mb.callDoItMapped()); assertEquals(IDO_IT, mb.callDoItResoucedAndMapped()); assertEquals(IDO_IT, mb.callDoItResourced()); assertEquals(IDO_IT, mb.callDoItInterface()); assertEquals(IDO_IT, mb.callDoItResourcedByType());
assertEquals(28, test.sum(5, 9));
assertEquals(0, FileUtil.compare("src", "src")); assertTrue(FileUtil.compare("src", "target") != 0); assertTrue(FileUtil.compare("src", "src-notfound") < 0); assertTrue(FileUtil.compare("src-notfound", "src") > 0); assertTrue(FileUtil.compare("src-notfound", "src-notfound-2") == 0);
assertEquals("text/html", ContentTypeUtil.getContentType("html")); assertEquals("text/html", ContentTypeUtil.getContentType("htm")); assertEquals("text/plain", ContentTypeUtil.getContentType("txt")); assertNull(ContentTypeUtil.getContentType("notexists"));
assertEquals("/", PathUtil.parentPath("xyz.txt")); assertEquals("/", PathUtil.parentPath("/xyz.txt")); assertEquals("/abc/fff", PathUtil.parentPath("/abc/fff/xyz.txt")); assertEquals("/", PathUtil.parentPath("xyz.txt/")); assertEquals("/", PathUtil.parentPath("/xyz.txt/")); assertEquals("/abc/fff", PathUtil.parentPath("/abc/fff/xyz.txt/")); assertNull(PathUtil.parentPath("/"));
assertNotNull(ds); assertNotNull(conn); assertEquals(conn, conn1); assertEquals(conn, conn2); assertFalse(conn.equals(conn2)); assertEquals(conn, conn1); assertFalse(conn.equals(conn2));
assertNotNull(ds); assertTrue(rs.next()); assertTrue(rs.getInt(1) > 0);
assertEquals("text/plain", ContentTypeUtil.getContentTypeByPath("/a/bb.txt")); assertEquals("text/html", ContentTypeUtil.getContentTypeByPath("/a/bb.html")); assertNull(ContentTypeUtil.getContentTypeByPath("/a/bb.notexists")); assertNull(ContentTypeUtil.getContentTypeByPath("/a/bb"));
assertEquals("xyz.txt", PathUtil.getName("xyz.txt")); assertEquals("xyz.txt", PathUtil.getName("/xyz.txt")); assertEquals("xyz.txt", PathUtil.getName("/abc/fff/xyz.txt")); assertEquals("xyz.txt", PathUtil.getName("xyz.txt/")); assertEquals("xyz.txt", PathUtil.getName("/xyz.txt/")); assertEquals("xyz.txt", PathUtil.getName("/abc/fff/xyz.txt/")); assertEquals("/", PathUtil.getName("/"));
assertNull(PathUtil.fix(null)); assertEquals("xyz.txt", PathUtil.fix("xyz.txt"));
assertTrue(postConstruct);
assertEquals("this is my test", new String(buffer)); assertEquals("timeout", e.getMessage());
assertTrue(preDestroy);
assertArrayEquals(content, from(in));
assertTrue(message.startsWith(" "));
assertEquals(new HashSet<>(asList(item1, item2, item3, item4)), beforeAndAfter.getUnionedItems());
assertNotNull(executionResult.getContractTransactionHash());
assertTrue(session1.equals(session2)); assertTrue(new HashSet<>(asList(session1)).contains(session2));
assertEquals("fjdkjfkdjf", Source.fromImport("import \\"fjdkjfkdjf\\"")); assertEquals("fjdkjfkdjf", Source.fromImport("import \'fjdkjfkdjf\'")); assertEquals(null, Source.fromImport("import fjdkjfkdjf"));
assertArrayEquals(expected.getBytes(), byteOut.toByteArray()); assertArrayEquals(expected.getBytes(), byteOut2.toByteArray());
assertNotNull(responseEntity);
assertNotNull(target); assertEquals(source.getElapsedTime(), target.getElapsedTime()); assertEquals(source.getError(), target.getError()); assertEquals(source.getState(), target.getState());
assertNotNull(buildService.get(details.getUuid()));
assertNotNull(message);
assertEquals(2, buildService.list(result2.getUuid(), 3).size()); assertEquals(3, buildService.list(null, 3).size()); assertEquals(3, buildService.list(result5.getUuid(), 3).size()); assertNull(buildService.list(randomUUID().toString(), 3));
assertNotNull(project.toString()); assertTrue(0 < project.toString().length());
assertEquals(new HashSet<>(asList(item1)), beforeAndAfter.getRemovedItems());
assertEquals(expected, text.get());
assertNotNull(pool.borrowResource());
assertEquals(new HashSet<>(asList(item4)), beforeAndAfter.getAddedItems());
assertNotNull(file);
assertNotNull(projectFile.toJson());
assertFalse(source.getBody().get().trim().isEmpty());
assertTrue(commandFactory.create(new String[] { command }).isPresent());
assertNotNull(packageResource.adapt(ResourceManager.class));
assertArrayEquals(bytes, from(in));
assertNotNull(queryResult.getResult());
assertEquals(new HashSet<>(asList(item2, item3)), beforeAndAfter.getIntersectedItems());
assertNotEquals(source, target); assertEquals(source.getElapsedTime(), target.getElapsedTime()); assertEquals(source.getError(), target.getError()); assertEquals(source.getState(), target.getState()); assertEquals(source.getSequence(), target.getSequence()); assertEquals(source.getResult(), target.getResult()); assertEquals(source.getDependencies(), target.getDependencies()); assertEquals(source.getUnitTestReport(), target.getUnitTestReport());
assertNotNull(message); assertTrue(message.contains(uuid)); assertFalse(message.contains(messageId));
assertNotNull(router.handleThrowable(runtimeException, webRequest));
assertTrue(encoded.startsWith(blue)); assertTrue(encoded.contains("hello")); assertTrue(encoded.contains("world")); assertTrue(encoded.endsWith(resetCode));
assertNotNull(DummyMessagePrinter.getInstance());
assertEquals(3, libraries.size());
assertTrue(file.exists()); assertTrue(DemoTestClass.exists());
assertNotNull(userOne); assertEquals("User One", userOne.getName());
assertNull(userOneModel);
assertNotNull(userOne); assertNull(userOneFailedAuth);
assertEquals("Item id does not match", 1, item.getId()); assertEquals("Item name does not match", "Apples", item.getName());
assertNotNull(json);
assertNotNull(userOne); assertTrue(userOne.getEmailAddresses().contains("User.One@gitblit.com"));
assertNotNull(userOne); assertEquals("Mr. User One", userOne.getName());
assertNotNull(userOne); assertTrue(userOne.getEmailAddresses().contains("userone@gitblit.com"));
assertEquals(student, insertedStudent);
assertEquals(student1, insertedStudent); assertEquals(student2, insertedStudent);
assertNull(loginToken.getUsername()); assertNull(loginToken.getFullname()); assertEquals("norole", loginToken.getRole());
assertEquals("kmh", loginToken.getUsername()); assertEquals("Monirul Hasan", loginToken.getFullname()); assertEquals("faculty", loginToken.getRole());
assertEquals(expectedStudent, actualStudent);
assertEquals("2012000000089", loginToken.getUsername()); assertEquals("Md. Masum", loginToken.getFullname()); assertEquals("student", loginToken.getRole());
assertNotNull(studentList);
assertThat(sync.hashCode()).isEqualTo(async.hashCode());
assertThat(requestResult).isEmpty();
assertThat(componentById).isPresent(); assertThat(componentById).hasValue(component);
assertThat(pomFile.toString()).endsWith(MavenInvokerRequester.POM_FILENAME);
assertThat(result).isEqualTo(composeTemplateXml());
assertThat(HttpUtils.urlEncode(null)).isNull();
assertThat(SW360ReleaseAdapterUtils.validateRelease(release)).isSameAs(release);
assertThat(optId).isNotPresent();
assertThat(matchStateValidator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(1);
assertThat(sw360LicenseByAntennaLicense).isPresent(); assertThat(sw360LicenseByAntennaLicense).hasValue(license);
assertThat(e.getMessage()).contains("missing property \'name\'");
assertThat(latchStop.await(10, TimeUnit.SECONDS)).isTrue(); assertThat(Files.isDirectory(directory)).isTrue(); assertThat(errorCount.get()).isEqualTo(0);
assertEquals(2, readBooleanMapProperty.keySet().size()); assertEquals(booleanValue, readBooleanMapProperty .values() .stream() .anyMatch(e -> e == booleanValue)); assertEquals(booleanValue, readBooleanMapProperty .values() .stream() .anyMatch(e -> e == DEFAULT_BOOL));
assertThat(e.getMessage()).contains("missing property \'name\'");
assertThat(componentByName).isPresent(); assertThat(componentByName).hasValue(component);
assertThat(response.responseCount()).isEqualTo(3);
assertThat(licenses).hasSize(0);
assertThat(licenseText).isEqualTo("No license text available");
assertThat(basicConfig.customObjectMapper()).isNotPresent(); assertThat(basicConfig.proxySettings().isProxyUse()).isFalse();
assertThat(reporter.getProcessingReport().getMessageList()).isNotEmpty();
assertThat(reporter.getProcessingReport().getMessageList()).isNotEmpty();
assertThat(e.getMessage()).contains("release already exists");
assertThat(artifacts).isEmpty();
assertThat(irGetNotClearedReleases.helpMessage()).contains(irGetNotClearedReleases.getInfoParameter());
assertThat(processor.getCopyOptions()).containsOnly(StandardCopyOption.REPLACE_EXISTING); assertThat(optTarget).isNotEmpty(); assertThat(target).isEqualTo(downloadPath.resolve(fileName));
assertThat(context.getHttpClient()).isEqualTo(httpClient);
assertThat(parameterValue).isEqualTo(null);
assertThat(Files.exists(clearingDocument)).isTrue(); assertThat(clearingDocument.getFileName().toString()).isEqualTo(release.getId() + "_clearing.json"); assertThat(content).contains(release.getDeclaredLicense()); assertThat(content).contains(release.getObservedLicense()); assertThat(content).contains(release.getOverriddenLicense());
assertThat(accessToken.getToken()).isEqualTo(TOKEN);
assertThat(multiResponse.isAllSuccess()).isTrue();
assertThat(result.getTarget()).isEqualTo(createdRelease);
assertThat(multiResponse.responseCount()).isEqualTo(1);
assertThat(e.getCause()).isInstanceOf(InterruptedException.class); assertThat(Thread.currentThread().isInterrupted()).isTrue();
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0);
assertThat(result.getTarget()).isEqualTo(updatedRelease2); assertThat(result.isSuccess()).isTrue(); assertThat(result.failedUploads()).isEmpty(); assertThat(result.successfulUploads()).contains(new AttachmentUploadRequest.Item(uploadPath1, attachmentType1), new AttachmentUploadRequest.Item(uploadPath2, attachmentType2));
assertThat(HttpUtils.unwrapCompletionException(null)).isNull();
assertThat(result).doesNotContain("$" + propertyWithDotKey); assertThat(result).doesNotContain("${" + propertyWithDotKey + "}"); assertThat(result).doesNotContain("$" + propertyWithDotKey); assertThat(result).contains("<test" + propertyWithDotValue + ">" + propertyWithDotValue + "</test" + propertyWithDotValue + ">");
assertThat(e.getMessage()).contains("missing property \'categories\'");
assertThat(result).isEqualTo(updatedComponent);
assertThat(licenses).hasSize(0);
assertThat(component.getName()).isEqualTo(release.getName()); assertThat(component.getComponentType()).isEqualTo(SW360ComponentType.INTERNAL); assertThat(component.getHomepage()).isEqualTo(homepageUrl);
assertThat(clearedReleases).containsExactly(release);
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(1);
assertThat(component.getPurl()).isEqualTo("pkg:npm/%40angular%2Fistrue@23_0_3"); assertThat(component.getName()).isEqualTo("@angular/istrue"); assertThat(component.getVersion()).isEqualTo("23_0_3"); assertThat(component.getLicenseChoice().getLicenses()) .hasSize(1) .extracting("id").containsExactly("MIT");
assertThat(createdRelease).isEqualTo(release); assertThat(release.getComponentId()).isEqualTo(component.getId());
assertThat(artifact0.askFor(ArtifactFilename.class).get().getArtifactFilenameEntries()).hasSize(2);
assertThat(printedReleases.length).isEqualTo(sparseReleases.size()); assertThat(Arrays.asList(printedReleases[0]).contains(sparseRelease.getName())).isTrue(); assertThat(Arrays.asList(printedReleases[0]).contains(sparseRelease.getVersion())).isTrue(); assertThat(Arrays.asList(printedReleases[0]).contains(sparseRelease.getReleaseId())).isTrue(); assertThat(printedReleases[0].length) .isEqualTo(sparseReleasesHeader.split(delimiter).length);
assertThat(actualLicenseSupport.evaluate()) .startsWith("( First License AND Second License AND Third License )");
assertThat(result).hasSize(1); assertThat(processor.getDownloadPath()).isEqualTo(expPath); assertThat(processor.getFileName()).isEqualTo("strange_file_.txt");
assertThat(validator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(1);
assertThat(e.getMessage()).contains("Cannot create release", release.getName()); assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
assertThat(e.getCause()).isInstanceOf(SW360ClientException.class); assertThat(e.getCause().getMessage()).contains("invalid project");
assertThat(jarPath).hasToString(toAbsolutePathname("/some/path/to/file.jar"));
assertThat(jarPath).hasToString(toAbsolutePathname("/some/path/to/file.jar"));
assertThat(result.getTarget()).isEqualTo(updatedRelease); assertThat(release.getMainLicenseIds()).containsOnly(sw360License.getShortName());
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(4); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.AND); assertThat(licenseInformation) .isEqualTo(licenseInformation1);
assertThat(releaseByExternalIds).isEmpty();
assertThat(component.getName()).isEqualTo(expectedName); assertThat(component.getComponentType()).isEqualTo(expectedType);
assertThat(Files.exists(clearingDocument)).isTrue();
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(2); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.AND); assertThat(licenseInformation) .isEqualTo(licenseInformation1);
assertThat(result).doesNotContain("$" + property1key); assertThat(result).doesNotContain("${" + property1key + "}"); assertThat(result).doesNotContain("$" + property2key); assertThat(result).contains("<test" + property1key + ">" + property1value + "</test" + property1key + ">"); assertThat(result).contains("<test" + property2key + ">" + property2value + "</test" + property2key + ">");
assertThat(notClearedReleases).containsExactly(release);
assertThat(result).isEqualTo(updatedRelease);
assertThat(context.getGeneric(JsonBean.class)).contains(bean);
assertThat(validComponent).isFalse();
assertThat(hasEqualCoordinates).isFalse();
assertThat(expectedJarBaseName).endsWith("-sources" + MavenInvokerRequester.JAR_EXTENSION); assertThat(expectedJarBaseName).contains(mavenCoordinate.getName()); assertThat(expectedJarBaseName).contains(mavenCoordinate.getVersion()); assertThat(expectedJarBaseName).doesNotContain("/");
assertThat(metaDataReceiver).isNotNull(); assertThat(getter.apply(e.getKey())).isEqualTo(e.getValue());
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(2); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.AND);
assertThat(license1.equalLicense(license2)).isTrue(); assertThat(license1.equalLicense(license3)).isFalse();
assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
assertThat(validComponent).isFalse();
assertThat(optId).isNotPresent();
assertThat(gottenOutputFormat).isEqualTo(outputFormat);
assertThat(result).doesNotContain("$" + property1key); assertThat(result).doesNotContain("${" + property1key + "}"); assertThat(result).doesNotContain("$" + property2key); assertThat(result).contains("<test" + property1key + ">" + property1value + "</test" + property1key + ">"); assertThat(result).contains("<test" + property2key + ">" + property2value + "</test" + property2key + ">");
assertEquals(2, readStringListProperty.size()); assertTrue(readStringListProperty .stream() .anyMatch(e -> e.equals(stringValue))); assertTrue(readStringListProperty .stream() .anyMatch(e -> e.equals(DEFAULT_STRING)));
assertThat(irGetNotClearedReleases.helpMessage()).contains(irGetNotClearedReleases.getInfoParameter());
assertThat(licenseDetails).hasValue(sw360License);
assertThat(artifacts).hasSize(7); assertThat(typesToTest.stream() .filter(type -> artifacts.stream().anyMatch( artifact -> artifact.getCoordinateForType(type).isPresent() )).count()) .isEqualTo(typesToTest.size());
assertThat(e.getMessage()).contains(String.valueOf(status)); assertThat(e.getStatusCode()).isEqualTo(status); assertThat(e.getTag()).isNull();
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(1); assertThat(licenseInformation.getLicenses().iterator().next().getId()) .isEqualTo(license);
assertThat(result).isEqualTo(uploadResult);
assertThat(reporter.getProcessingReport().getMessageList()).isEmpty();
assertThat(e.getMessage()).contains("missing property \'name\'");
assertThat(componentById).isNotPresent();
assertThat(helpMessage).contains(expectedFragments);
assertThat(FutureUtils.block(future)).isEqualTo(RESULT);
assertThat(result).containsOnly(releaseWithSources);
assertThat(sw360Enricher.getConnectionFactory()).isNotNull();
assertThat(licenseText).isEqualTo("Lorum ipsum");
assertThat(e.getCause()).isEqualTo(exception);
assertThat(foundArtifact.askFor(ArtifactClearingDocument.class)).isNotPresent();
assertThat(parameterValue).isEqualTo(idValue);
assertThat(reporter.getProcessingReport().getMessageList()).isEmpty();
assertThat(result).isEqualTo(licenses);
assertThat(processor.process(response)).isNull();
assertThat(testResult).isNotNull(); assertThat(createdExecutor.size()).isEqualTo(1); assertThat(identifyExecutors(createdExecutor, SingleArtifactExecutor.class.getName())).isTrue(); assertThat(identifyExecutors(createdExecutor, CompareArtifactExecutor.class.getName())).isFalse(); assertThat(createdRules.size()).isEqualTo(2);
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(1); assertThat(licenseInformation).isInstanceOf(WithLicense.class); assertThat(((WithLicense) licenseInformation).getLicenseId()).isEqualTo("BSD"); assertThat(((WithLicense) licenseInformation).getExceptionId()).isEqualTo("Exception");
assertThat(emptySettings.isProxyUse()).isFalse(); assertThat(emptySettings.getProxyHost()).isEqualTo(ProxySettings.UNDEFINED_HOST); assertThat(emptySettings.getProxyPort()).isEqualTo(ProxySettings.UNDEFINED_PORT);
assertThat(e.getCause()).isInstanceOf(SW360ClientException.class); assertThat(e.getCause().getMessage()).contains("invalid project");
assertThat(result).containsExactlyInAnyOrderElementsOf(expResult);
assertThat(releaseByExternalIds).isPresent(); assertThat(releaseByExternalIds).hasValue(sparseRelease);
assertEquals(booleanValue, readBooleanProperty);
assertThat(components).hasSize(1); assertThat(components).containsExactly(sparseComponent);
assertThat(artifacts).isEmpty();
assertThat(component.getComponentType()).isEqualTo(SW360ComponentType.OSS);
assertThat(result).isEqualTo(licenseCreated);
assertThat(result).containsOnly(releaseWithSources);
assertThat(accessToken2).isSameAs(accessToken1);
assertThat(coordinateWildcard.matches(coordinate)) .isTrue(); assertThat(coordinate.matches(coordinateWildcard)) .isFalse();
assertThat(result.getArtifacts()).hasSize(size);
assertThat(foundArtifact.askFor(CopyrightStatement.class).get()).isEqualTo(new CopyrightStatement("Copyright 2005-2016 The Apache Software Foundation"));
assertThat(component.getComponentType()).isEqualTo(SW360ComponentType.INTERNAL);
assertThat(e.getMessage()).contains("Cannot update release", updateRelease.getName()); assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
assertThat(result).doesNotContain("$" + property1key); assertThat(result).doesNotContain("${" + property1key + "}"); assertThat(result).contains("$" + property2key); assertThat(result).contains("<test" + property1key + ">" + property1value + "</test" + property1key + ">");
assertThat(proxy).isNotNull(); assertThat(proxy.address()).isInstanceOf(InetSocketAddress.class); assertThat(address.getHostName()).isEqualTo(host); assertThat(address.getPort()).isEqualTo(port); assertThat(proxy.type()).isEqualTo(Proxy.Type.HTTP);
assertThat(e.getMessage()).contains(key);
assertEquals(stringValue, readStringProperty);
assertThat(client.getClient().hostnameVerifier().verify("", null)).isTrue();
assertThat(file).isPresent(); assertThat(Arrays.stream(targetDirectory.toFile().listFiles()) .anyMatch(f -> f.equals(file.get()))).isTrue();
assertThat(updaterImpl.isUpdateReleases()).isTrue(); assertThat(updaterImpl.isUploadSources()).isTrue(); assertThat(updaterImpl.isDeleteObsoleteSourceAttachments()).isTrue();
assertThat(sw360Release1.getEmbedded().getAttachments()).containsExactly(sw360SparseAttachment);
assertThat(reporter.getProcessingReport().getMessageList()).isEmpty();
assertThat(result).isEqualTo(projectCreated);
assertThat(csvFile.exists()).isTrue(); assertThat(records.size()).isEqualTo(3);
assertThat(systemEnvs.get("ANTENNATESTVARIABLE")).isEqualTo("WARN"); assertThat(workflow.getProcessors().getStep().stream().findFirst().get().getConfiguration().getEntry() .stream() .filter(entry -> entry.getKey().equals("incompleteSourcesSeverity")) .findFirst() .get() .getValue()) .isEqualTo("WARN");
assertThat(s).contains("proxyHost=\'" + PROXY_HOST); assertThat(s).contains("proxyPort=" + PROXY_PORT);
assertThat(mapper2).isSameAs(mapper1);
assertThat(requestResult).isEmpty();
assertThat(s).contains("configFilePath=\'" + options.getConfigFilePath()); assertThat(s).contains("propertiesFilePath=\'" + options.getPropertiesFilePath()); assertThat(s).contains("debugLog=" + options.isDebugLog()); assertThat(s).contains("showHelp=" + options.isShowHelp()); assertThat(s).contains("valid=" + options.isValid());
assertThat(e.getMessage()).contains("missing property \'version\'");
assertThat(computed).hasToString(toAbsolutePathname("/some/path/to/file_jar/child_war/subChild.jar"));
assertThat(future.join()).isEqualTo(result);
assertThat(gottenOutputFormat).isEqualTo(outputFormat);
assertThat(config.proxySettings()).isSameAs(HttpClientConfig.basicConfig().proxySettings()); assertThat(config.customObjectMapper()).contains(mapper);
assertThat(client.getMapper()).isSameAs(mapper); assertThat(client.getClient().proxy()).isNull();
assertThat(csvFilePath).exists();
assertThat(accessToken.getToken()).isEqualTo(TOKEN);
assertThat(file).isEmpty();
assertThat(adapter.getFilename()).isEqualTo("chet.txt");
assertThat(HttpUtils.unwrapCompletionException(new CompletionException(null))).isNull();
assertThat(parametersFromOptions).isNotEqualTo(antennaComplianceToolOptions.getParameters()); assertThat(antennaComplianceToolOptions.getParameters()).isEqualTo(parameterSet);
assertThat(response).isEqualTo(expResponse);
assertThat(s).contains(params.getName(), params.getBusinessUnit(), params.getType().toString(), params.getTag());
assertThat(messageList).isNotEmpty(); assertThat(messageList.get(0).getMessageType()).isEqualTo(MessageType.UNNECESSARY_CONFIG);
assertThat(logBuffer.toString()) .contains("Base directory", localBaseDir.toString(), "Sources directory", localBaseDir.resolve("sources").toString(), "CSV path", "updater_test.csv");
assertThat(threshold == 40);
assertThat(releaseByVersion).isPresent(); assertThat(releaseByVersion).hasValue(release);
assertThat(infoParameterFromParameter).isEqualTo(infoParameter);
assertThat(client.resolveAgainstBase(relativeUri).toString()).isEqualTo(BASE_REST_URI + relativeUri);
assertThat(projectIdByNameAndVersion).isPresent(); assertThat(projectIdByNameAndVersion).contains(projectWithLink);
assertThat(licenseText).isEqualTo("Lorum ipsum");
assertThat(accessToken.addToken(builder)).isEqualTo(builderResult);
assertThat(e.getMessage()).contains("Cannot update release", updatedRelease.getName()); assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
assertThat(factory.getConnectionFactory()).isNotNull();
assertThat(result.getTarget()).isEqualTo(deletedRelease); assertThat(predicate.test(createAttachment(Paths.get("foo"), SW360AttachmentType.SOURCE))) .isTrue(); assertThat(predicate.test(createAttachment(Paths.get("foo"), SW360AttachmentType.BINARY))) .isFalse();
assertThat(response.getStatus("res-success")).isEqualTo(200); assertThat(response.getStatus("res-err-2")).isEqualTo(500);
assertThat(e).isEqualTo(exception);
assertThat(e.getMessage()).contains(String.valueOf(status), tag); assertThat(e.getStatusCode()).isEqualTo(status); assertThat(e.getTag()).isEqualTo(tag);
assertThat(validator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(1);
assertThat(printedReleases.length).isEqualTo(releases.size()); assertThat(Arrays.asList(printedReleases[0]).contains(release.getDownloadurl())).isTrue(); assertThat(Arrays.asList(printedReleases[0]).contains(release.getName())).isTrue(); assertThat(Arrays.asList(printedReleases[0]).contains(release.getCopyrights())).isTrue(); assertThat(printedReleases[0].length) .isEqualTo(releasesHeader.split(delimiter).length);
assertThat(jarPath).hasToString(toAbsolutePathname("/some/path/to/file.jar"));
assertThat(metaDataUpdater.getOrCreateRelease(release, true)).isEqualTo(newRelease);
assertThat(config2).isSameAs(config1);
assertThat(messageList).isEmpty();
assertThat(iterator.hasNext()).isTrue(); assertThat(val).hasToString(toAbsolutePathname("/some/path/to/file.jar")); assertThat(iterator.hasNext()).isTrue(); assertThat(val).hasToString(File.separator + "child.war"); assertThat(iterator.hasNext()).isTrue(); assertThat(val).hasToString(File.separator + "subChild.jar"); assertThat(iterator.hasNext()).isFalse();
assertThat(validator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(csvFile.exists()).isTrue(); assertThat(records.size()).isEqualTo(1); assertThat(csvRecord.get(csvColumn).isEmpty()).isFalse();
assertThat(responses).hasSize(3); assertThat(responses.get("res-err-1")).isEqualTo(400); assertThat(responses.get("res-success")).isEqualTo(200);
assertThat(context.getGeneric(Runnable.class)).contains(runnable); assertThat(context.getGeneric(Object.class)).contains(runnable);
assertThat(response.responseCount()).isEqualTo(0);
assertThat(releaseForArtifact).isNotPresent();
assertThat(checkFileExists(validPath1)).isTrue(); assertThat(checkFileExists(validPath2)).isTrue(); assertThat(checkFileExists(delPath3)).isFalse(); assertThat(checkFileExists(delPath2)).isFalse(); assertThat(checkFileExists(delPath1)).isFalse();
assertThat(actualLicenseSupport.evaluate()).startsWith("Single License");
assertThat(getter.apply(e.getKey())).isEqualTo(e.getValue());
assertThat(key).isEqualTo("p1939860698");
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(4); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.OR); assertThat(licenseInformation) .isEqualTo(licenseInformation1);
assertThat(sync.answerQuestionOfLifeUniverseAndEverything()).isEqualTo(ANSWER);
assertThat(expectedJarBaseName).endsWith(MavenInvokerRequester.JAR_EXTENSION); assertThat(expectedJarBaseName).contains(mavenCoordinate.getName()); assertThat(expectedJarBaseName).contains(mavenCoordinate.getVersion()); assertThat(expectedJarBaseName).doesNotContain("/");
assertThat(setOutputFormat).isEqualTo(DEFAULT_OUTPUT_FORMAT);
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(1); assertThat(evaluate.getEvaluationResults().stream() .findFirst() .get() .getSeverity()).isEqualTo(IEvaluationResult.Severity.FAIL);
assertThat(response.hasResourceId("foo")).isTrue(); assertThat(response.hasResourceId("bar")).isFalse();
assertThat(validator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(result.getArtifacts()).hasSize(1); assertThat(actualArtifact.getAnalysisSource()).isEqualTo(expectedArtifact.getAnalysisSource()); assertThat(actualArtifact.askFor(ArtifactMatchingMetadata.class).get().getMatchState()) .isEqualTo(expectedArtifact.askFor(ArtifactMatchingMetadata.class).get().getMatchState()); assertThat(actualArtifact.getArtifactIdentifiers()) .isEqualTo(expectedArtifact.getArtifactIdentifiers());
assertThat(configuration.getConnection()).isEqualTo(connection);
assertThat(result).isEqualTo(updatedRelease);
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(4); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.OR); assertThat(licenseInformation) .isEqualTo(licenseInformation1);
assertThat(artifacts.get(0).askForGet(DeclaredLicenseInformation.class).get().evaluate()).isEqualTo("( license1 AND license2 AND license3 )");
assertThat(optId).isNotPresent();
assertThat(result).isEqualTo(uploadResult); assertThat(predicate.test(createAttachment(Paths.get("foo"), SW360AttachmentType.SOURCE))) .isTrue(); assertThat(predicate.test(createAttachment(sourceFile, SW360AttachmentType.SOURCE))) .isFalse();
assertThat(hash).isEqualTo(expectedMd5);
assertThat(name).isEqualTo(COORD_NAME);
assertThat(component.getPurl()).isEqualTo("pkg:generic/model-1.0.0-SNAPSHOT.jar?checksum=UNKNOWN%3Aabcdef&download_url=file%3A%2F%2Fmodel-1.0.0-SNAPSHOT.jar");
assertThat(reporter.getProcessingReport().getMessageList()).isNotEmpty();
assertThat(HttpUtils.unwrapCompletionException(wrap)).isEqualTo(exception);
assertThat(artifacts.size()).isEqualTo(3); assertThat(ArtifactLicenseUtils.getFinalLicenses(artifacts.get(0))) .isNotEqualTo(configuredLicense); assertThat(ArtifactLicenseUtils.getFinalLicenses(artifacts.get(1))) .isEqualTo(configuredLicense);
assertThat(e.getCause()).isInstanceOf(NoSuchMethodException.class);
assertThat(artifacts).hasSize(2); assertThat(artifacts.stream().map(artifact1 -> artifact1.askForGet(CopyrightStatement.class).get()) .anyMatch(copyrightStatement -> copyrightStatement.equals(new CopyrightStatement("Copyright 2005-2016 The Apache Software Foundation") .mergeWith(new CopyrightStatement("Copyright 2020 Fake Company")) .mergeWith(new CopyrightStatement("Copyright 2020 Fake the 2nd")).get()))).isTrue();
assertThat(unzipFolder.list()).contains("testText.txt"); assertThat(Files.readAllLines(Paths.get(unzipFolder.toString(), "testText.txt"))).containsExactly("Test String");
assertThat(downloadedAttachmentPath).isPresent(); assertThat(downloadedAttachmentPath).hasValue(attachmentPath);
assertThat(result).isNotNull(); assertThat(result.size()).isEqualTo(2); assertThat(ruleIds.size()).isEqualTo(1);
assertThat(HttpUtils.isSuccessStatus(i)).isTrue();
assertThat(artifacts.stream() .map(artifact -> artifact.askFor(ArtifactCoordinates.class)) .filter(Optional::isPresent) .map(Optional::get) .anyMatch(artifactCoordinates -> artifactCoordinates.containsPurl(purl))) .isTrue();
assertThat(projects).containsOnly(projectWithLink);
assertThat(result).containsOnly(releaseWithSources);
assertThat(result).containsOnly(releaseWithSources);
assertThat(uploadResult).isEqualTo(new AttachmentUploadResult<>(release));
assertThat(e.getMessage()).contains("Multiple releases");
assertThat(reporter.getProcessingReport().getMessageList()).isEmpty();
assertThat(config.proxySettings()).isSameAs(proxySettings); assertThat(config.customObjectMapper()).contains(mapper);
assertThat(s).contains("res-1", "res-2");
assertThat(e.getCause()).isInstanceOf(NullPointerException.class); assertThat(e.getMessage()).contains("no ID");
assertThat(sync).isNotEqualTo(new Object());
assertThat(releaseByNameAndVersion).isPresent(); assertThat(releaseByNameAndVersion).hasValue(sparseRelease);
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(1); assertThat(evaluate.getEvaluationResults().stream() .findFirst() .get() .getSeverity()).isEqualTo(IEvaluationResult.Severity.WARN);
assertThat(validator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(e.getMessage()).contains("missing property \'name\'");
assertThat(rel.getExternalIds()).isEqualTo(extIDs); assertThat(rel.getCopyrights()).isEqualTo(copyright); assertThat(metaDataUpdater.getOrCreateRelease(queryRelease, true)).isEqualTo(patchedRelease);
assertThat(result).isEqualTo(uploadResult);
assertThat(sync1).isNotEqualTo(sync2);
assertThat(HttpUtils.waitFor(future)).isEqualTo(result);
assertEquals(booleanValue, readComplexProperty);
assertThat(reporter.getProcessingReport().getMessageList()).isEmpty();
assertThat(mapper).isNotNull(); assertThat(bean).isEqualTo(expBean);
assertThat(result).isEqualTo(uploadResult);
assertThat(csvFile.exists()).isTrue(); assertThat(csvParser.getHeaderMap().size()).isEqualTo(CSV_COLUMNS.length); assertThat(csvParser.getRecordNumber()).isEqualTo(0);
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0 );
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0);
assertThat(compare).isEqualTo(0);
assertThat(jarPath).hasToString("C:\\\\some\\\\path\\\\to\\\\file.jar");
assertThat(compare).isLessThan(0); assertThat(compare).isGreaterThan(0);
assertThat(HttpUtils.urlEncode(source)).isEqualTo(expResult);
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0);
assertThat(result).isEqualTo(TOKEN);
assertThat(map).hasSize(1); assertThat(attachable.getClassifier()).isEqualTo("cyclonedx-bom"); assertThat(attachable.getType()).isEqualTo("xml"); assertThat(bom.getComponents()).hasSize(2);
assertThat(s) .contains(successPath.toString(), failurePath.toString(), exception.getMessage(), release.toString());
assertThat(s).contains(path1.toString(), path2.toString(), release.toString());
assertThat(sw360Release1.getEmbedded().getAttachments()).containsExactly(sw360SparseAttachment);
assertThat(licenseInformation.getLicenses().size()) .isEqualTo(5); assertThat(licenseInformation.evaluate()) .isEqualTo("( MIT AND BSD AND ( EPL OR ( GPL AND APACHE-2.0 ) ) )"); assertThat(licenseStatement.getOp()) .isEqualTo(LicenseOperator.AND); assertThat(licenseInformation) .isEqualTo(licenseInformation1);
assertThat(e.getMessage()).contains("Cannot create release", release.getName()); assertThat(e.getCause()).isInstanceOf(IllegalArgumentException.class);
assertThat(matchStateValidator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(licenseInformation).isInstanceOf(License.class); assertThat(((License) licenseInformation).getId()).isEqualTo("Apache-2.0");
assertThat(filesInZip.stream().map(Paths::get)).contains(innerPath); assertThat(contentOfAddedFile).isEqualTo(contentOfInnerFile);
assertThat(licenseDetails).isEmpty();
assertThat(e.getMessage()).contains("invalid component");
assertThat(result).isEqualTo(composeTemplateXml(properties0));
assertThat(licenseDetails).isEqualTo(license);
assertThat(result).isEqualTo(composeTemplateXml());
assertThat(result).isEqualTo(response);
assertThat(artifacts.get(0).askForGet(ObservedLicenseInformation.class)).isEmpty(); assertThat(artifacts.get(0).askFor(MissingLicenseInformation.class).get().getMissingLicenseReasons()) .containsExactlyInAnyOrder(MissingLicenseReasons.NO_LICENSE_IN_SOURCES);
assertThat(foundArtifact.askFor(ArtifactSourceFile.class)).isNotPresent();
assertThat(evaluate).isNotNull(); assertThat(evaluate.getEvaluationResults().size()).isEqualTo(0);
assertThat(artifacts.size()).isEqualTo(2); assertThat(processedArtifact.askFor(ArtifactMatchingMetadata.class) .map(ArtifactMatchingMetadata::getMatchState) .orElse(null)) .isEqualTo(Optional.ofNullable(artifactMatchState).orElse(null));
assertThat(extension.put(this)).isTrue(); assertThat(context.getGeneric(JsonBean.class)).isEmpty();
assertThat(hasEqualCoordinates).isTrue();
assertNotEquals(stringValue, DEFAULT_INT); assertEquals(stringValue, readStringPropertyByXPath);
assertThat(result.getResult()).containsOnly(sparseComponent); assertThat(result.getPaging()).isEqualTo(PAGING);
assertThat(licenses).hasSize(1);
assertThat(releases).isEqualTo(updateResult);
assertThat(iex.getCause()).isEqualTo(exception);
assertThat(bom.getComponents()).hasSize(30);
assertThat(metaDataUpdater.getOrCreateRelease(queryRelease, false)).isEqualTo(queryRelease); assertThat(queryRelease.getExternalIds()).containsKey("id2");
assertThat(ProxySettings.noProxy()).isSameAs(empty);
assertThat(this.mergedConfigs.getOverride().size()).isEqualTo(0); assertThat(messageList.get(0).getMessage().contains("director-ant.jar")); assertThat(messageList.size()).isEqualTo(2);
assertThat(SW360ComponentAdapterUtils.validateComponent(component)).isSameAs(component);
assertThat(artifactSourceFile.isPresent()).isTrue(); assertThat(artifactSourceFile.get().get().toFile()).exists(); assertThat(artifactSourceFile.get().get().toAbsolutePath()). isEqualTo(Paths.get(this.getClass().getClassLoader().getResource("CsvAnalyzerTest/test_source.txt").toURI()));
assertThat(component.getPurl()).isEqualTo("pkg:maven/com.example/myArtifact@42"); assertThat(component.getName()).isEqualTo("myArtifact"); assertThat(component.getGroup()).isEqualTo("com.example"); assertThat(component.getVersion()).isEqualTo("42"); assertThat(component.getHashes()).isEmpty(); assertThat(component.getLicenseChoice().getLicenses()).isNull();
assertThat(compare).isLessThan(0); assertThat(compare).isGreaterThan(0);
assertThat(sync.answerQuestionOfLifeUniverseAndEverything()).isEqualTo(ANSWER);
assertThat(releaseForArtifact).isPresent(); assertThat(releaseForArtifact).hasValue(release);
assertThat(HttpUtils.isSuccessStatus(199)).isFalse(); assertThat(HttpUtils.isSuccessStatus(0)).isFalse(); assertThat(HttpUtils.isSuccessStatus(Integer.MIN_VALUE)).isFalse();
assertThat(mapper).isSameAs(ServiceFactory.getObjectMapper());
assertThat(result).doesNotContain("$" + property1key); assertThat(result).doesNotContain("${" + property1key + "}"); assertThat(result).contains("$" + property2key); assertThat(result).contains("<test" + property1key + ">" + property1value + "</test" + property1key + ">");
assertThat(e.getMessage()).contains(String.valueOf(status), tag); assertThat(e.getStatusCode()).isEqualTo(status); assertThat(e.getTag()).isEqualTo(tag);
assertThat(hasEqualCoordinates).isFalse();
assertThat(result).containsOnly(releaseWithSources);
assertThat(s).contains("propertiesFilePath=\'" + options.getPropertiesFilePath()); assertThat(s).contains("complianceMode=" + options.getComplianceMode()); assertThat(s).contains("debugLog=" + options.isDebugLog()); assertThat(s).contains("showHelp=" + options.isShowHelp()); assertThat(s).contains("valid=" + options.isValid());
assertThat(wrappedMavenProject.getBuildDirectory()).isEqualTo(outputDir); assertThat(wrappedMavenProject.getConfigFile()).isEqualTo(pomFile); assertThat(wrappedMavenProject.getRawProject()).isEqualTo(mavenProject); assertThat(wrappedMavenProject.getProjectId()).isEqualTo(artifactId); assertThat(wrappedMavenProject.getVersion()).isEqualTo(version);
assertThat(jarPath.toString()).doesNotStartWith("file:"); assertThat(jarPath.toString()).doesNotStartWith("jar:"); assertThat(jarPath).hasFileName(fileBasename); assertThat(jarPath).exists();
assertThat(client.resolveAgainstBase(uri).toString()).isEqualTo(uri);
assertThat(HttpUtils.isSuccessStatus(300)).isFalse(); assertThat(HttpUtils.isSuccessStatus(HttpConstants.STATUS_ERR_BAD_REQUEST)).isFalse(); assertThat(HttpUtils.isSuccessStatus(HttpConstants.STATUS_ERR_SERVER)).isFalse(); assertThat(HttpUtils.isSuccessStatus(Integer.MAX_VALUE)).isFalse();
assertThat(metaDataUpdater.deleteSourceAttachments(release)).isEqualTo(release);
assertThat(validComponent).isTrue();
assertThat(name).isEqualTo(COORD_NAMESPACE + "/" + COORD_NAME);
assertThat(context.getGeneric(Object.class)).isEmpty();
assertThat(processorResult).isEqualTo(result);
assertThat(releaseForArtifact).isNotPresent();
assertThat(optRelease).isEmpty();
assertThat(sync1).isEqualTo(sync2);
assertThat(matchStateValidator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(HttpUtils.unwrapCompletionException(exception)).isEqualTo(exception);
assertThat(release.getOverriddenLicense()).isNull(); assertThat(release.getMainLicenseIds().isEmpty()).isTrue();
assertThat(file).isEmpty();
assertThat(withLicense.isEmpty()).isTrue();
assertThat(reporterOutput).isEqualTo(ReporterOutputFactory.DEFAULT_REPORTER_OUTPUT);
assertThat(result.getTarget()).isEqualTo(release); assertThat(result.isSuccess()).isFalse(); assertThat(result.failedUploads().get(new AttachmentUploadRequest.Item(uploadPath, attachmentType))) .isInstanceOf(SW360ClientException.class);
assertThat(result.getResult()).containsOnly("entry1");
assertThat(processResult).isEqualTo(result);
assertThat(result).isEqualTo(updatedRelease);
assertThat(e.getMessage()).contains("missing property \'categories\'");
assertThat(result).isSameAs(release);
assertThat(result).isEmpty();
assertThat(e.getMessage()).contains("missing property \'version\'");
assertEquals(intValue, readIntProperty);
assertThat(matchStateValidator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);
assertThat(ex.getCause()).isEqualTo(expException);
assertThat(updater.getConnectionFactory()).isNotNull();
assertThat(result).isEqualTo(projectUpdated);
assertThat(createdComponent).isEqualTo(component);
assertThat(s).contains("size=" + paging.getSize(), "number=" + paging.getNumber(), "totalElements=" + paging.getTotalElements(), "totalPages=" + paging.getTotalPages());
assertThat(httpClient.getClass().getSimpleName()).isEqualTo("HttpClientImpl");
assertThat(sw360Release1.getEmbedded().getAttachments()).containsExactly(sw360SparseAttachment);
assertThat(helpMessage).contains(expectedFragments);
assertThat(bytes).isEqualTo(BYTEARRAY_GOOD);
assertThat(decreaseRespPars.getNewValue()).isEqualTo(NEW_VALUE);
assertThat(apduRequest.getBytes()).isEqualTo(request2_4); assertThat(readRecordsCmdBuilder.getReadMode()) .isEqualTo(ReadRecordsCmdBuild.ReadMode.ONE_RECORD);
assertThat(getPoApplicationByte((byte) 0x01).isModificationsCounterInBytes()).isFalse(); assertThat(getPoApplicationByte((byte) 0x27).isModificationsCounterInBytes()).isTrue();
assertThat(poSecuritySettings.isSessionKvcAuthorized((byte) 0x12)).isTrue(); assertThat(poSecuritySettings.isSessionKvcAuthorized((byte) 0x34)).isTrue(); assertThat(poSecuritySettings.isSessionKvcAuthorized((byte) 0x56)).isFalse();
assertThat(hex.length()).isEqualTo(0);
assertThat(apduRequest.getBytes()).isEqualTo(request3_2); assertThat(readRecordsCmdBuilder.getReadMode()) .isEqualTo(ReadRecordsCmdBuild.ReadMode.MULTIPLE_RECORD);
assertThat(increaseRespPars.getNewValue()).isEqualTo(NEW_VALUE);
assertThat(samSelector.getAtrFilter().getAtrRegex()) .isEqualTo("3B(.{6}|.{10})805A..80E120.{4}.{8}829000");
assertThat(calypsoPoRev31.getFileBySfi(FILE7).getData().getContentAsCounterValue(1)) .isEqualTo(ByteArrayUtil.threeBytesToInt(ByteArrayUtil.fromHex(FILE7_REC1_COUNTER1), 0)); assertThat(calypsoPoRev31.getFileBySfi(FILE7).getData().getContentAsCounterValue(2)) .isEqualTo(ByteArrayUtil.threeBytesToInt(ByteArrayUtil.fromHex(FILE7_REC1_COUNTER2), 0));
assertThat(poSecuritySettings.getPinTransmissionMode()).isEqualTo(ENCRYPTED);
assertThat(parser.getRemainingAttemptCounter()).isEqualTo(3);
assertThat(getPoApplicationByte((byte) 0x01).getDfName()).isEqualTo(DF_NAME);
assertThat(poSecuritySettings.getSessionModificationMode()).isEqualTo(MULTIPLE);
assertThat(testSeSelectionRequest.getSeSelector()).isEqualTo(seSelector);
assertThat(samSelector.getAtrFilter().getAtrRegex()) .isEqualTo("3B(.{6}|.{10})805A..80C120.{4}.{8}829000");
assertNotNull(resp.toString());
assertThat(samSelector.getAtrFilter().getAtrRegex()) .isEqualTo("3B(.{6}|.{10})805A..80C120.{4}11223344829000");
assertThat(records.size()).isEqualTo(2); assertThat(records.get(FIRST_REC1)).isEqualTo(ByteArrayUtil.fromHex(REC1)); assertThat(records.get(FIRST_REC1 + 1)).isEqualTo(ByteArrayUtil.fromHex(REC2));
assertThat(po.getDirectoryHeader()).isNull();
assertThat(keyReference.getKif()).isEqualTo(((byte) 0x11)); assertThat(keyReference.getKvc()).isEqualTo((byte) 0x22);
assertArrayEquals( selectionStatusCode.toArray(), seRequest.getSeSelector().getAidSelector().getSuccessfulSelectionStatusCodes().toArray());
assertThat(bytes.length).isEqualTo(0);
assertThat(getPoApplicationByte((byte) 0x01).getAtr()).isEqualTo(ATR_VALUE);
assertThat(apduRequest.getBytes()).isEqualTo(request3_1); assertThat(readRecordsCmdBuilder.getReadMode()) .isEqualTo(ReadRecordsCmdBuild.ReadMode.MULTIPLE_RECORD);
assertThat(poSecuritySettings.getRatificationMode()).isEqualTo(RatificationMode.CLOSE_RATIFIED);
assertThat(parser.getRemainingAttemptCounter()).isEqualTo(1);
assertArrayEquals(apdus.toArray(), seRequest.getApduRequests().toArray());
assertNotNull(request); assertTrue(request.isCase4()); assertArrayEquals(getACommand(), request.getBytes()); assertEquals(getAName(), request.getName()); assertEquals(getASuccessFulStatusCode(), request.getSuccessfulStatusCodes()); assertEquals( "ApduRequest: NAME = \\"" + getAName() + "\\", RAWDATA = FEDCBA989005, case4, additional successful status codes = 2328", request.toString());
assertThat(po.isDfRatified()).isFalse();
assertThat(value).isEqualTo(0x345678);
assertThat(poSecuritySettings.getPinTransmissionMode()).isEqualTo(ENCRYPTED);
assertThat(selectFileRespPars.getProprietaryInformation()) .isEqualTo(ByteArrayUtil.fromHex(PROPRIETARY_INFORMATION));
assertThat(value).isEqualTo(0x123456);
assertThat(poSecuritySettings.getSessionModificationMode()).isEqualTo(ATOMIC);
assertThat(records.size()).isEqualTo(1); assertThat(records.get(FIRST_REC1)).isEqualTo(ByteArrayUtil.fromHex(REC1));
assertThat(value).isEqualTo(0x90ABCD);
assertThat(hex).isEqualTo(HEXSTRING_GOOD);
assertThat(value).isEqualTo(0x123456);
assertThat(poSecuritySettings.getRatificationMode()).isEqualTo(RatificationMode.CLOSE_RATIFIED);
assertThat(value).isEqualTo(0x654321);
assertThat(poSecuritySettings.getPinTransmissionMode()).isEqualTo(PLAIN);
assertThat(parser.getRemainingAttemptCounter()).isEqualTo(2);
assertNotNull(event);
assertThat(getPoApplicationByte((byte) 0x01).getApplicationSerialNumberBytes()) .isEqualTo(ByteArrayUtil.fromHex(SERIAL_NUMBER));
assertThat(parser.getRemainingAttemptCounter()).isEqualTo(0);
assertThat(po.getAllFiles()).isNotNull();
assertEquals(seProtocol, seRequest.getSeSelector().getSeProtocol());
assertThat(poSecuritySettings.getSvNegativeBalance()).isEqualTo(FORBIDDEN); assertThat(poSecuritySettings.getSvNegativeBalance()).isEqualTo(AUTHORIZED);
assertThat(samSelector.getAtrFilter().getAtrRegex()).isEqualTo(".*");
assertTrue(version.matches(regex));
assertNotNull(seRequest.toString());
assertThat(samSelector.getAtrFilter().getAtrRegex()) .isEqualTo("3B(.{6}|.{10})805A..80C120.{4}11223344829000");
assertNotNull(seRequest);
assertThat(hex.length()).isEqualTo(0);
assertThat(getPoApplicationByte((byte) 0x01).getDfNameBytes()) .isEqualTo(ByteArrayUtil.fromHex(DF_NAME));
assertThat(getPoApplicationByte((byte) 0x01).getPoClass()).isEqualTo(PoClass.LEGACY); assertThat(getPoApplicationByte((byte) 0x27).getPoClass()).isEqualTo(PoClass.ISO);
assertThat(calypsoSam.getSamRevision()).isEqualTo(SamRevision.C1); assertThat(calypsoSam.getSerialNumber()).isEqualTo(SN);
assertThat(file.getAllRecordsContent()).isNotNull();
assertThat(calypsoSam.getSamRevision()).isEqualTo(SamRevision.C1); assertThat(calypsoSam.getSerialNumber()).isEqualTo(SN);
assertThat(po.getStartupInfo()).isEqualTo("0A3C2F05141001");
assertThat(calypsoPo.isDfInvalidated()).isTrue(); assertThat(calypsoPo.isDfInvalidated()).isFalse();
assertThat(apduRequest.getBytes()).isEqualTo(request2_4); assertThat(readRecordsCmdBuilder.getReadMode()) .isEqualTo(ReadRecordsCmdBuild.ReadMode.MULTIPLE_RECORD);
assertThat(samSelector.getAtrFilter().getAtrRegex()) .isEqualTo("3B(.{6}|.{10})805A..80D?20.{4}.{8}829000");
assertThat(poSecuritySettings.getSessionModificationMode()).isEqualTo(ATOMIC);
assertThat(getPoApplicationByte((byte) 0x01).getModificationsCounter()).isEqualTo(6); assertThat(getPoApplicationByte((byte) 0x27).getModificationsCounter()).isEqualTo(215);
assertThat(calypsoPoRev31.getPinAttemptRemaining()).isEqualTo(3);
assertThat(samSelector.getAidSelector()).isNull();
assertThat(poSecuritySettings.getRatificationMode()) .isEqualTo(RatificationMode.CLOSE_NOT_RATIFIED);
assertNotNull(user);
assertTrue(user.getId() > 0);
assertTrue(users.size() > 0);
assertThat(solution.getVisitList()).containsExactly(visit);
assertThat(routingProblem.name()).isNotNull(); assertThat(routingProblem.depot()).contains(depot); assertThat(routingProblem.visits()).containsExactly(visit1, visit2); assertThat(routingProblem.vehicles()).containsExactly(vehicle1, vehicle2);
assertThat(vehicleArgumentCaptor.getValue().id()).isEqualTo(vehicleId); assertThat(vehicleArgumentCaptor.getValue().capacity()).isEqualTo(capacity); assertThat(vehicleArgumentCaptor.getValue().capacity()).isEqualTo(capacity);
assertThat(portableLocation.getId()).isEqualTo(location.id()); assertThat(portableLocation.getLatitude()).isEqualTo(location.coordinates().latitude()); assertThat(portableLocation.getLongitude()).isEqualTo(location.coordinates().longitude()); assertThat(portableLocation.getDescription()).isEqualTo(location.description());
assertThat(vehicle.id()).isEqualTo(vehicleId); assertThat(vehicle.name()).isEqualTo(name); assertThat(vehicle.capacity()).isEqualTo(capacity);
assertThat(locationService.addLocation(location)).isTrue();
assertThat(depot.angleTo(locationAt(1.76, -5))).isCloseTo(0, offset).isNegative(); assertThat(depot.angleTo(locationAt(100000, -1))).isCloseTo(Math.PI / 2, offset);
assertThat(savedLocation.getLatitude()).isEqualTo(savedCoordinates.latitude()); assertThat(savedLocation.getLongitude()).isEqualTo(savedCoordinates.longitude()); assertThat(savedLocation.getDescription()).isEqualTo(savedDescription); assertThat(newLocation.id()).isEqualTo(newEntity.getId()); assertThat(newLocation.coordinates()) .isEqualTo(new Coordinates(newEntity.getLatitude(), newEntity.getLongitude())); assertThat(newLocation.description()).isEqualTo(newEntity.getDescription());
assertThat(removed).isEqualTo(testLocation);
assertThat(solution.getVisitList()).isEmpty(); assertThat(solution.getDepotList()).isEmpty(); assertThat(solution.getVehicleList()).isEmpty(); assertThat(solution.getScore()).isEqualTo(HardSoftLongScore.ZERO);
assertThat(bounds.getSouthWest()).isEqualTo(Coordinates.valueOf(-90, -180)); assertThat(bounds.getNorthEast()).isEqualTo(Coordinates.valueOf(90, 180));
assertThat(savedVehicle.getId()).isEqualTo(testVehicle.id()); assertThat(savedVehicle.getName()).isEqualTo(testVehicle.name()); assertThat(savedVehicle.getCapacity()).isEqualTo(testVehicle.capacity());
assertThat(event).isSameAs(solution);
assertThat(Distance.ofMillis(3600_000 * 37 + 60_000 * 3 + 24_000)).hasToString("37h 3m 24s 0ms"); assertThat(Distance.ofMillis(3601_000)).hasToString("1h 0m 1s 0ms"); assertThat(Distance.ofMillis(5_123)).hasToString("0h 0m 5s 123ms");
assertThat(repository.vehicles()).containsExactly(testVehicle);
assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(headers.getContentLength()).isEqualTo(msg.length()); assertThat(headers.getContentType()).isNotNull(); assertThat(headers.getContentType().toString()).isEqualToIgnoringWhitespace("text/x-yaml;charset=UTF-8"); assertThat(headers.getContentDisposition()).isNotNull(); assertThat(contentDisposition) .startsWith("attachment;") .containsPattern("; *filename=\\".*\\\\.yaml\\"");
assertThat(new GraphHopperRouter(graphHopper).travelTimeMillis(from, to)).isEqualTo(travelTimeMillis);
assertThat(solution.getVisitList()).containsExactly(otherVisit);
assertThat(validate(new ArrayList<>())).isEmpty();
assertThat(routingProblem.name()).isEmpty(); assertThat(routingProblem.depot()).isEmpty(); assertThat(routingProblem.vehicles()).isEmpty(); assertThat(routingProblem.visits()).isEmpty();
assertThat(vehicle.getId()).isEqualTo(vehicleId); assertThat(vehicle.getCapacity()).isEqualTo(capacity);
assertThat(savedVehicle.getName()).isEqualTo(vehicleData.name()); assertThat(savedVehicle.getCapacity()).isEqualTo(vehicleData.capacity()); assertThat(newVehicle.id()).isEqualTo(newEntity.getId()); assertThat(newVehicle.name()).isEqualTo(newEntity.getName()); assertThat(newVehicle.capacity()).isEqualTo(newEntity.getCapacity());
assertThat(portablePlan.getDistance()).isEqualTo(PortableDistance.fromDistance(Distance.ZERO)); assertThat(portablePlan.getVehicles()).isEmpty(); assertThat(portablePlan.getDepot()).isNull(); assertThat(portablePlan.getRoutes()).isEmpty();
assertThat(vehicleData.name()).isEqualTo(name); assertThat(vehicleData.capacity()).isEqualTo(capacity);
assertThat(json.write(PortableDistance.fromDistance(distance)).getJson()).isEqualTo("\\"1h 1m 2s\\"");
assertThat(portableErrorMessage).isNotEqualTo(null) .isNotEqualTo(new PortableErrorMessage("", text)) .isNotEqualTo(new PortableErrorMessage(id, "")) .isNotEqualTo(message) .isEqualTo(portableErrorMessage) .isEqualTo(new PortableErrorMessage(id, text)) .hasSameHashCodeAs(new PortableErrorMessage(id, text)) .asString().contains(id, text);
assertThat(solution.getDepotList()).hasSize(1); assertThat(solution.getDepotList().get(0).getLocation().distanceTo(fromDomain(location2))).isEqualTo(millis);
assertThat(route).containsExactly( coordinates1, coordinates2, coordinates3);
assertThat(validate(Arrays.asList("US", "ca"))).containsExactly("US", "CA");
assertThat(serverInfo.getCountryCodes()).isEqualTo(countryCodes); assertThat(serverInfo.getBoundingBox()).containsExactly( PortableCoordinates.fromCoordinates(southWest), PortableCoordinates.fromCoordinates(northEast)); assertThat(demos).hasSize(1); assertThat(demo.getName()).isEqualTo(demoName); assertThat(demo.getVisits()).isEqualTo(visits.size());
assertThat(capturedMessage.text).isEqualTo(text); assertThat(capturedMessage.id).isNotNull();
assertThat(problems).containsExactly(routingProblem);
assertThat(distanceEntity) .isEqualTo(distanceEntity) .isEqualTo(new DistanceEntity(new DistanceKey(from, to), distance)) .isNotEqualTo(null) .isNotEqualTo(distanceKey) .isNotEqualTo(new DistanceEntity(distanceKey, distance + 1)) .isNotEqualTo(new DistanceEntity(new DistanceKey(to, from), distance));
assertThat(boundingBox.getSouthWest()).isEqualTo(Coordinates.valueOf(minLat_Y, minLon_X)); assertThat(boundingBox.getNorthEast()).isEqualTo(Coordinates.valueOf(maxLat_Y, maxLon_X));
assertThat(routeListener.getBestRoutingPlan().isEmpty()).isTrue();
assertThat(repository.getDistance(from, to)).isEqualTo(distance);
assertThat(distance) .isEqualTo(distance) .isEqualTo(Distance.ofMillis(millis)) .isNotEqualTo(null) .isNotEqualTo(millis) .isNotEqualTo(Distance.ofMillis(millis + 1)) .hasSameHashCodeAs(Distance.ofMillis(millis));
assertThat(travelTimeMillis).isEqualTo((long) (5 * AirDistanceRouter.KILOMETERS_PER_DEGREE / AirDistanceRouter.TRAVEL_SPEED_KPH * AirDistanceRouter.MILLIS_IN_ONE_HOUR));
assertThat(RoutingPlan.empty().isEmpty()).isTrue(); assertThat(new RoutingPlan(Distance.ZERO, emptyList(), depot, emptyList(), emptyList()).isEmpty()).isFalse(); assertThat(new RoutingPlan(Distance.ZERO, vehicles, null, emptyList(), emptyList()).isEmpty()).isFalse(); assertThat(new RoutingPlan(Distance.ZERO, vehicles, depot, emptyList(), singletonList(emptyRoute)).isEmpty()) .isFalse();
assertThat(removed).isEqualTo(testVehicle);
assertThat(planningLocation.distanceTo(testLocation(otherId))).isEqualTo(millis);
assertThat(regionService.countryCodes()).isEqualTo(countryCodes);
assertThat(routingProblem.name()).isNotNull(); assertThat(routingProblem.depot()).isEmpty(); assertThat(routingProblem.visits()).isEmpty(); assertThat(routingProblem.vehicles()).isEmpty();
assertThat(router.getPath(from, to)).containsExactly(from, to);
assertThat(solution.getVehicleList()).containsExactly(vehicle);
assertThat(workingVehicle.getCapacity()).isEqualTo(newCapacity);
assertThat(visit.getId()).isEqualTo(location.getId()); assertThat(visit.getLocation()).isEqualTo(location); assertThat(visit.getDemand()).isEqualTo(PlanningVisitFactory.DEFAULT_VISIT_DEMAND);
assertThat(shallowRoute.toString()).containsSubsequence("200", "100", "93", "92", "91");
assertThat(routingPlan.vehicles()).containsExactly(vehicle); assertThat(routingPlan.depot()).isEmpty(); assertThat(routingPlan.visits()).isEmpty(); assertThat(routingPlan.routes()).isEmpty();
assertThat(validate(Arrays.asList("us"))).containsExactly("US");
assertThat(portableDistance) .isEqualTo(portableDistance) .isEqualTo(PortableDistance.fromDistance(distance)) .isNotEqualTo(null) .isNotEqualTo(millis) .isNotEqualTo(PortableDistance.fromDistance(Distance.ofMillis(millis - 501))) .hasSameHashCodeAs(PortableDistance.fromDistance(distance)) .asString().contains("0h 2m 53s");
assertThat(portableVehicle.getId()).isEqualTo(id); assertThat(portableVehicle.getName()).isEqualTo(name); assertThat(portableVehicle.getCapacity()).isEqualTo(capacity);
assertThat(repository.locations()).containsExactly(testLocation);
assertThat(locationService.createLocation(coordinates, description)).isTrue();
assertThat(repository.getDistance(from, to)) .isNegative() .isNotZero();
assertThat(repository.find(testLocation.id())).contains(testLocation);
assertThat(json.write(portableErrorMessage)).isStrictlyEqualToJson("portable-error-message.json");
assertThat(repository.find(testVehicle.id())).contains(testVehicle);
assertThat(distanceMap.distanceTo(location2)).isEqualTo(distance.millis());
assertThat(planningLocation.distanceTo(PlanningLocationFactory.testLocation(1))).isEqualTo(distance);
assertNotNull(icndbJoke); assertEquals(correct, icndbJoke.getJoke());
assertEquals(3, counter.count);
assertThat(generatedFiles).hasSize(1);
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertNull(pmmlRestResourceGenerator.annotator); assertEquals(pmmlRestResourceGenerator, retrieved); assertEquals(dependencyInjectionAnnotator, pmmlRestResourceGenerator.annotator);
assertThat(source).isNotBlank().contains(processId).contains(instanceId);
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertNotNull(retrieved); assertTrue(retrieved.contains(expected)); assertTrue(retrieved.contains(expected));
assertThat(type) .isNotBlank() .doesNotContain(processId) .contains(processId.toLowerCase()) .contains(channelName) .startsWith(AbstractDataEvent.TYPE_PREFIX);
assertThat(response).isEqualTo(conflictResponse);
assertFalse(pmmlRestResourceGenerator.useInjection()); assertTrue(pmmlRestResourceGenerator.useInjection());
assertThat(scheduledTime).isEqualTo(job.getExpirationTime());
assertThat(job.getId()).isEqualTo(processInstanceJobDescription.id());
assertEquals(1, files.size()); assertEquals("InputOutput_test.json", file.relativePath());
assertEquals(CONTENT, resource.get().trim());
assertNotNull(errors); assertEquals(0, errors.length); assertNotNull(errors2); assertEquals(1, errors2.length); assertEquals("Node \'MyDynamicNode\' [1] Dynamic has no completion condition set", errors2[0].getMessage());
assertThat(response).isEqualTo(internalErrorResponse);
assertThat(jobsServiceUri.toString()).isEqualTo(JOB_SERVICE_URL + "/jobs");
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertThat(response).isEqualTo(badRequestResponse);
assertNotNull(outputs); assertEquals(2, outputs.size()); assertNotNull(output); assertNotNull(output.getResult()); assertNotNull(output.getModelIdentifier()); assertTrue(result.containsKey("Should the driver be suspended?")); assertEquals("No", result.get("Should the driver be suspended?")); assertNull(result.get("Fine"));
assertThat(context.isPresent()).isTrue(); assertThat(context.get()).isExactlyInstanceOf(SpringResourceGenerator.class);
assertEquals(expected, pmmlRestResourceGenerator.className());
assertNotNull(retrieved); assertEquals(modelName, retrieved.getModelName()); assertEquals(parameters.size(), parameterInfos.size()); assertTrue(parameterInfos.containsKey(key)); assertEquals(value, parameterInfo.getValue()); assertEquals(value.getClass(), parameterInfo.getType());
assertTrue(retrieved.startsWith("org/kie/kogito")); assertTrue(retrieved.endsWith(expected));
assertThat(context.isPresent()).isTrue(); assertThat(context.get()).isExactlyInstanceOf(ResourceGenerator.class);
assertNotNull(errors); assertEquals(1, errors.length); assertEquals("Node \'CompositeNode\' [3] Composite has no start node defined.", errors[0].getMessage());
assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals("Model " + unknownwResourceId + " not found.", responseEntity.getBody());
assertNotNull(retrieved); assertTrue(retrieved.contains(expected)); assertTrue(retrieved.contains(expected));
assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class); assertThat(((ManagedUnitOfWork)unit).delegate()).isInstanceOf(CollectingUnitOfWork.class); assertThat(counter.get()).isEqualTo(0); assertThat(counter.get()).isEqualTo(1); assertThat(picounter.get()).isEqualTo(0);
assertThat(job.getId()).isEqualTo(processInstanceJobDescription.id()); assertThat(job.getExpirationTime()).isEqualTo(processInstanceJobDescription.expirationTime().get()); assertThat(job.getProcessInstanceId()).isEqualTo(processInstanceJobDescription.processInstanceId()); assertThat(job.getProcessId()).isEqualTo(processInstanceJobDescription.processId());
assertEquals(KIE_PMML_MODEL, pmmlPredictionModel.getKiePMMLModel());
assertNotNull(retrieved); assertNotNull(retrieved); assertEquals(MODEL_NAME, pmmlRequestData.getModelName()); assertEquals(parameters.size(), parameterInfos.size()); assertTrue(parameterInfos.containsKey(key)); assertEquals(value, parameterInfo.getValue()); assertEquals(value.getClass(), parameterInfo.getType());
assertEquals(PMML_4_RESULT, pmmlPredictionModel.evaluateAll(context));
assertEquals(1, dmnRuntime.getModels().size());
assertEquals(1, errors.size()); assertEquals("Node \'nodeName\' [" + Long.MAX_VALUE + "] any message", errors.get(0).getMessage());
assertThat(testFile.relativePath()).isEqualTo(TEST_RELATIVE_PATH);
assertTrue(files.isEmpty());
assertNotNull(sourceCode); assertNotNull(clazz); assertThat(clazz.getChildNodes()).isNotEmpty(); assertThat(clazz.getImports()).contains( new ImportDeclaration("org.kie.kogito.events.knative.ce.Printer", false, false));
assertEquals(0, counter.count); assertEquals(1, counter.count); assertEquals(3, counter.count);
assertEquals(1, dmnRuntime.getModels().size()); assertEquals(0, dmnModel.getMessages(Severity.ERROR).size());
assertEquals(1, files.size()); assertEquals("org#jbpm#test_test.json", file.relativePath());
assertThat(context.isPresent()).isTrue(); assertThat(context.get()).isExactlyInstanceOf(ReactiveResourceGenerator.class);
assertThat(response).isInstanceOf(List.class).asList().hasSize(1).element(0) .hasFieldOrPropertyWithValue("id", node.getId()) .hasFieldOrPropertyWithValue("name", node.getName()) .hasFieldOrPropertyWithValue("uniqueId", node.getUniqueId()) .hasFieldOrPropertyWithValue("nodeDefinitionId", NODE_UNIQUE_ID) .hasFieldOrPropertyWithValue("type", node.getClass().getSimpleName());
assertNull(abstractPredictionConfig.predictionEventListeners());
assertThat(response).isEqualTo(notFoundResponse);
assertTrue(parsedMilliseconds <= MINUTE_IN_MILLISECONDS, "Parsed date as duration is bigger than " + MINUTE_IN_MILLISECONDS); assertTrue(parsedMilliseconds > FIFTY_NINE_SECONDS_IN_MILLISECONDS, "Parsed date as duration is too low! Expected value is between " + MINUTE_IN_MILLISECONDS + " and " + FIFTY_NINE_SECONDS_IN_MILLISECONDS + " but is " + parsedMilliseconds);
assertEquals(0, grafanaObj.getDashboard().panels.size());
assertThat(unit).isNotNull().isInstanceOf(PassThroughUnitOfWork.class);
assertThat(testFile.getType()).isEqualTo(TEST_TYPE);
assertEquals(Integer.valueOf(2), m.invoke(instance, "pepe", 2)); assertEquals(Float.valueOf(2.0f), m.invoke(instance, "pepe", 2.0f));
assertEquals(1, files.size()); assertEquals("org#jbpm#test_test.json", file.relativePath());
assertNotNull(retrieved); assertTrue(retrieved.contains(expected));
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(Response.Status.BAD_REQUEST.getStatusCode()); assertThat(response.getEntity()).isInstanceOf(ResponseError.class);
assertThat(results).isNotNull().containsKey("test").containsValue("fake");
assertEquals("Hello!", myProcess.result);
assertThat(new URI(filePath).toString()).endsWith(".java");
assertEquals(0, Policies.of(null).length); assertEquals(1, policies.length); assertEquals("pepe", policies[0].value().getName()); assertEquals(4, policies[0].value().getRoles().size());
assertThat(imageMetaData.getLabels()).isNotNull(); assertThat(imageMetaData.getLabels()).hasSize(1); assertThat(imageMetaData.getLabels().get(0)).hasSize(2); assertThat(imageMetaData.getLabels().get(0)).containsAllEntriesOf(labels);
assertEquals(retrieved, predictionContainerGenerator); assertNull(predictionContainerGenerator.addonsConfig); assertEquals(AddonsConfig.DEFAULT, predictionContainerGenerator.addonsConfig);
assertThat(scheduledTime).isEqualTo(job.getExpirationTime());
assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class); assertThat(((ManagedUnitOfWork)unit).delegate()).isInstanceOf(CollectingUnitOfWork.class); assertThat(counter.get()).isEqualTo(0); assertThat(counter.get()).isEqualTo(1);
assertEquals("id", cloudEvent1.getId()); assertEquals("id", cloudEvent2.getId());
assertEquals(1, files.size()); assertEquals("org#jbpm#test_test.json", file.relativePath()); assertEquals(1, filesFromClasses.size()); assertEquals(fileFromClasses.relativePath(), file.relativePath(), "must have the same path of a class-based generator"); assertArrayEquals(fileFromClasses.contents(), file.contents(), "must have the same contents of a class-based generator");
assertEquals(expected, retrieved.toString());
assertNotNull(errors); assertEquals(0, errors.length);
assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class); assertThat(counter.get()).isEqualTo(0);
assertThat(type).isNotBlank().contains(processId).contains(channelName).startsWith(AbstractDataEvent.TYPE_PREFIX);
assertThat(response).isNotNull();
assertThat(labels).size().isEqualTo(4); assertThat(labels).containsEntry(PrometheusLabeler.LABEL_PATH, PrometheusLabeler.DEFAULT_PATH); assertThat(labels).containsEntry(PrometheusLabeler.LABEL_PORT, PrometheusLabeler.DEFAULT_PORT); assertThat(labels).containsEntry(PrometheusLabeler.LABEL_SCHEME, PrometheusLabeler.DEFAULT_SCHEME); assertThat(labels).containsEntry(PrometheusLabeler.LABEL_SCRAPE, PrometheusLabeler.DEFAULT_SCRAPE);
assertThat(response).isInstanceOf(List.class); assertThat(((List)response).get(0)).isEqualTo(workItem);
assertEquals(KIE_PMML_MODEL, pmmlRestResourceGenerator.getKiePMMLModel());
assertEquals(HOUR_IN_MILLISECONDS, parsedMilliseconds);
assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class); assertThat(counter.get()).isEqualTo(0); assertThat(counter.get()).isEqualTo(0);
assertNotNull(retrieved); assertTrue(retrieved.isEmpty());
assertThat( CollectedResource.fromDirectory(Paths.get("src/main/resources")) .stream() .map(CollectedResource::resource) .map(Resource::getSourcePath) .map(File::new) .filter(File::isDirectory) .count()).isZero();
assertThat(appGenerator.targetCanonicalName()).isNotNull(); assertThat(appGenerator.targetCanonicalName()).isEqualTo(EXPECTED_APPLICATION_NAME);
assertThat(response).isEqualTo(notFoundResponse);
assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode()); assertThat(response.getEntity()).isInstanceOf(ResponseError.class);
assertThat(response).isEqualTo(forbiddenResponse);
assertThat(response).isEqualTo(badRequestResponse);
assertEquals(predictionEventListenerConfigs.get(0), abstractPredictionConfig.predictionEventListeners());
assertNotNull(outputs); assertEquals(0, outputs.size());
assertEquals ("object", schemaMap.get("type")); assertEquals(2,properties.size()); assertTrue((Boolean)((Map)properties.get("approved")).get("output")); assertTrue((Boolean)((Map)properties.get("traveller")).get("input"));
assertEquals(1, result.size()); assertEquals(4, merged.size()); assertTrue(numbers instanceof ArrayNode); assertEquals(4, numbersNode.get(0).asInt()); assertEquals(5, numbersNode.get(1).asInt()); assertEquals(6, numbersNode.get(2).asInt()); assertEquals(false, merged.get("boolean").asBoolean()); assertEquals("javier", merged.get("string").asText()); assertEquals(1, merged.get("number").asInt());
assertEquals(expected, pmmlRestResourceGenerator.getNameURL());
assertThat(unit).isNotNull().isInstanceOf(ManagedUnitOfWork.class);
assertThat(protoFile).isNotNull(); assertThat(kogitoApplication).isNotNull(); assertThat(labels).size().isEqualTo(1); assertThat(labels).containsKey(labeler.generateKey(protoFile)); assertThat(roundTrip).isEqualTo(originalContent);
assertThat(kpe.getKeys()).isNotEmpty();
assertTrue(retrievedOpt.isPresent()); assertEquals("Path", retrieved.getName().asString()); assertEquals(expected, retrieved.getMemberValue().asStringLiteralExpr().asString());
assertThat(response).isEqualTo(badRequestResponse);
assertThat(labels).containsEntry(PersistenceLabeler.PERSISTENCE_LABEL_PREFIX, "true");
assertThat(returnedConfigGenerator).isNotNull(); assertThat(returnedConfigGenerator).isSameAs(generator);
assertThat(response).isNotNull();
assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, "travels"))).isEqualTo("/travels"); assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, "demo.orders"))).isEqualTo("/orders");
assertThat(returnedConfigGenerator).isNotNull(); assertThat(returnedConfigGenerator).isSameAs(generator);
assertThat(response).isInstanceOf(Map.class); assertThat(responseMap.get("id")).isEqualTo(PROCESS_INSTANCE_ID); assertThat(responseMap.get("failedNodeId")).isEqualTo(NODE_ID_ERROR);
assertThat(path).isNotNull(); assertThat(path).isEqualTo(EXPECTED_APPLICATION_NAME.replace(".", "/") + ".java");
assertThat(testFile.contents()).isEqualTo(TEST_CONTENTS);
assertNotNull(retrieved); assertTrue(retrievedString.contains(expected));
assertNotNull(errors); assertEquals(0, errors.length);
assertNotEquals("", fingerprint.toString());
assertEquals(name, AssembleUtil.getName(name)); assertEquals(name, AssembleUtil.getName("." + s + name)); assertEquals(name, AssembleUtil.getName("foo" + s + "bar" + s + name));
assertEquals(a[i++], enumeration.nextElement()); assertEquals(a.length, i);
assertArrayEquals(new Integer[] {2, 3}, AgentRuleUtil.subArray(array, 2, 4)); assertArrayEquals(new Integer[] {6, 7, 8}, AgentRuleUtil.subArray(array, 6));
assertNotEquals("", fingerprint.toString());
assertTrue(clientWrapper.add("test", 1000, "value", transcoder));
assertEquals(expectedValue, advice.cacheInvalidateSingle(pjp));
assertEquals(results, clientWrapper.getBulk(keys));
assertNotNull(id); assertEquals("cairt", id); assertEquals(Object.class.getName(), id);
assertEquals(2L, clientWrapper.decr("key1", 1, 10));
assertEquals(2L, clientWrapper.incr("key1", 1, 10, 1000));
assertEquals(expectedValue, advice.readCounter(pjp));
assertTrue(ex.getMessage().indexOf("at least 1 character") != -1); assertTrue(ex.getMessage().indexOf("at least 1 character") != -1); assertTrue(result.indexOf(objectId) != -1); assertTrue(result.indexOf(namespace) != -1);
assertEquals("test-value", clientWrapper.get("key1"));
assertTrue(clientWrapper.set("key1", 1, "value", transcoder));
assertEquals(1, c.size()); assertEquals(newAddrs, c);
assertTrue(clientWrapper.set("key1", 1, "value"));
assertEquals(0, data.getListIndexInKeys()); assertEquals(1, data.getListIndexInMethodArgs());
assertEquals(expectedValue, advice.cacheSingleAssign(pjp));
assertNotNull(client);
assertSame(cache, nativeCache);
assertEquals(2L, clientWrapper.decr("key1", 1));
assertSame(client, nativeClient);
assertEquals("getAKey", cacheKeyMethod.getName()); assertEquals("getBKey", cacheKeyMethod.getName()); assertEquals("getCKey", cacheKeyMethod.getName()); assertEquals("getBKey", cacheKeyMethod.getName());
assertEquals(2L, clientWrapper.incr("key1", 1, 10));
assertEquals(0, data.getListIndexInKeys()); assertEquals(0, data.getListIndexInMethodArgs());
assertTrue(cut.verifyTypeIsList(List.class)); assertTrue(cut.verifyTypeIsList(ArrayList.class)); assertTrue(cut.verifyTypeIsList(LinkedList.class)); assertTrue(cut.verifyTypeIsList(ArrayList.class)); assertFalse(cut.verifyTypeIsList(Integer.class)); assertFalse(cut.verifyTypeIsList(Collection.class)); assertFalse(cut.verifyTypeIsList(Map.class)); assertFalse(cut.verifyTypeIsList(Set.class));
assertEquals(expectedValue, advice.cacheGetSingle(pjp));
assertTrue(clientWrapper.add("test", 1000, "value"));
assertEquals(2L, clientWrapper.decr("key1", 1));
assertSame(cache, nativeCache);
assertSame(client, nativeClient);
assertTrue(clientWrapper.delete("key1"));
assertEquals(2L, clientWrapper.decr("key1", 1, 10));
assertNull(result);
assertEquals(2L, clientWrapper.incr("key1", 1, 10));
assertEquals("test-value", clientWrapper.get("key1", transcoder));
assertEquals(2L, clientWrapper.incr("key1", 1));
assertEquals(results, clientWrapper.getBulk(keys, transcoder));
assertTrue(clientWrapper.delete("key1"));
assertEquals("test-value", clientWrapper.get("key1", transcoder));
assertTrue(data.getKeyIndexes().isEmpty()); assertTrue(data.isReturnKeyIndex());
assertTrue(clientWrapper.set("key1", 1, "value", transcoder));
assertEquals(servers, clientWrapper.getAvailableServers());
assertNotNull(client);
assertTrue(clientWrapper.add("test", 1000, "value", transcoder));
assertNotNull(cacheKeyMethod); assertEquals("toString", cacheKeyMethod.getName()); assertNotNull(cacheKeyMethod); assertEquals("getKey", cacheKeyMethod.getName());
assertEquals(results, clientWrapper.getBulk(keys, transcoder));
assertNotNull(co); assertNotNull(co.getData()); assertEquals("{\\"v\\":\\"40x50\\"}", new String(co.getData()));
assertEquals(2L, clientWrapper.incr("key1", 1, 10L, 1000));
assertEquals(0, data.getListIndexInKeys()); assertEquals(0, data.getListIndexInMethodArgs());
assertEquals("toString", cacheKeyMethod.getName()); assertEquals("Y", result.toString()); assertEquals("toString", cacheKeyMethod.getName()); assertEquals("X", result.toString());
assertNotNull(client);
assertArrayEquals(expectedResults, results);
assertTrue(ex.getMessage().indexOf("is invalid") != -1); assertTrue(ex.getMessage().indexOf("too big") != -1); assertTrue(ex.getMessage().indexOf("too big") != -1); assertTrue(ex.getMessage().indexOf("null") != -1); assertArrayEquals(answer, Utils.getMethodArgs(Arrays.asList(2, 1), args, method.toString()));
assertTrue(clientWrapper.set("key1", 1, "value"));
assertEquals(Integer.MIN_VALUE, data.getListIndexInKeys()); assertEquals(Integer.MIN_VALUE, data.getListIndexInMethodArgs());
assertEquals(expectedValue, advice.cacheGetSingle(pjp));
assertEquals(2L, clientWrapper.decr("key1", 1));
assertEquals(expectedValue, advice.readCounter(pjp));
assertNotNull(result); assertEquals(1, result.size()); assertEquals("127.0.0.1", result.get(0).getAddress().getHostAddress()); assertEquals(11211, result.get(0).getPort()); assertNotNull(result); assertEquals(1, result.size()); assertEquals("127.0.0.1", result.get(0).getAddress().getHostAddress()); assertEquals(11211, result.get(0).getPort());
assertEquals(2L, clientWrapper.incr("key1", 1, 10));
assertNotNull(co); assertNotNull(co.getData()); assertEquals("{\\"v\\":\\"40x50\\"}", new String(co.getData()));
assertNotNull(client);
assertEquals("test-value", clientWrapper.get("key1", transcoder, 100L));
assertEquals(expectedValue, advice.cacheInvalidateMulti(pjp));
assertTrue(ex.getMessage().indexOf("is invalid") != -1); assertTrue(ex.getMessage().indexOf("too big") != -1); assertTrue(ex.getMessage().indexOf("too big") != -1); assertTrue(ex.getMessage().indexOf("null") != -1); assertEquals(answer, Utils.getMethodArg(1, args, method.toString()));
assertEquals(2L, clientWrapper.incr("key1", 1, 10, 1000));
assertNotNull(names); assertEquals(5, names.size()); assertTrue(names.contains("cache1")); assertTrue(names.contains("cache2")); assertTrue(names.contains("cache3")); assertTrue(names.contains("cache3Alias1")); assertTrue(names.contains("cache3Alias2"));
assertEquals(0, data.getListIndexInKeys()); assertEquals(0, data.getListIndexInMethodArgs());
assertEquals(2L, clientWrapper.decr("key1", 1, 10));
assertTrue(clientWrapper.add("test", 1000, "value"));
assertEquals(expectedValue, advice.cacheSingleAssign(pjp));
assertEquals(flags, cachedObjectWrapper.getFlags());
assertEquals(2L, clientWrapper.incr("key1", 1));
assertSame(addresses, cache.getAvailableServers());
assertTrue(ex.getMessage().indexOf("requirement") != -1);
assertTrue(ex.getMessage().indexOf("0 arguments") != -1); assertTrue(ex.getMessage().indexOf("String") != -1); assertTrue(ex.getMessage().indexOf("String") != -1); assertTrue(ex.getMessage().indexOf("only one method") != -1); assertEquals("doIt", cut.getKeyMethod(new KeyObject05()).getName()); assertEquals("toString", cut.getKeyMethod(new KeyObject06(null)).getName());
assertEquals(expectedValue, advice.cacheInvalidateAssign(pjp));
assertEquals("test-value", clientWrapper.get("key1"));
assertEquals(expectedResult, result);
assertTrue(clientWrapper.delete("key1"));
assertEquals("test-value", clientWrapper.get("key1", transcoder, 100));
assertNotNull(result); assertEquals(1, result.size()); assertEquals("127.0.0.1", result.get(0).getAddress().getHostAddress()); assertEquals(11311, result.get(0).getPort());
assertEquals(expectedValue, advice.cacheInvalidateSingle(pjp));
assertEquals(2L, clientWrapper.incr("key1", 1));
assertEquals("test-value", clientWrapper.get("key1", transcoder, 100));
assertEquals(SerializationType.JAVA, serializationType); assertEquals(SerializationType.JSON, serializationType);
assertTrue(clientWrapper.set("key1", 1, "value"));
assertEquals(flags, cachedObjectWrapper.getFlags());
assertTrue(clientWrapper.add("test", 1000, "value"));
assertTrue(data.getKeyIndexes().isEmpty()); assertTrue(data.isReturnKeyIndex());
assertTrue(data.getKeyIndexes().isEmpty()); assertFalse(data.isReturnKeyIndex());
assertSame(entity, result); assertSame(entity, result); assertSame(entity, result);
assertTrue(clientWrapper.add("test", 1000, "value", transcoder));
assertNotNull(client);
assertEquals("test-value", clientWrapper.get("key1", transcoder));
assertTrue(clientWrapper.set("key1", 1, "value", transcoder));
assertEquals(value.intValue(), ((Number) advice.readCounter(pjp)).intValue());
assertEquals("test-value", clientWrapper.get("key1"));
assertNotNull(client);
assertEquals(expectedValue, advice.cacheGetSingle(pjp));
assertEquals(results, clientWrapper.getBulk(keys));
assertEquals(data, cachedObjectWrapper.getData());
assertTrue(ex.getMessage().indexOf("empty key value") != -1); assertTrue(ex.getMessage().indexOf("empty key value") != -1); assertEquals(result, cut.generateObjectId(method, new KeyObject(result)));
assertEquals(expectedValue, advice.cacheSingleAssign(pjp));
assertTrue(Math.abs(rowSum.get(i) - 55 - i * 10) < 1e-9);
assertThat(empty.extend("other")).isEqualTo(new LinearId("other")); assertThat(single.extend("other")).isEqualTo(new LinearId("single", "other")); assertThat(dual.extend("other")).isEqualTo(new LinearId("hello", "world", "other"));
assertTrue(j.getRowsCount() == 2);
assertEquals(PATH, Files2.fromPath(PATH.getPath())); assertEquals(PATH + File.separator + "hello", Files2.fromPath(PATH.getPath(), "hello").getPath()); assertEquals(PATH + File.separator + "hello" + File.separator + "world", Files2.fromPath(PATH.getPath(), "hello", "world").getPath());
assertEquals(c1.getRe(), new ComplexBuilder(c1).getRe(), 0);
assertTrue(Math.abs(fn.get(i+10)-fn2.get(i))<1e-9);
assertEquals(V0.length, ID0.getLevel()); assertEquals(V1.length, ID1.getLevel()); assertEquals(V2.length, ID2.getLevel());
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(10);
assertTrue(model.description.getOutliers().size()>1);
assertThat(of().close(DIV).writer.toString()).isEqualTo("</div>");
assertTrue(j.getRowsCount() == 3);
assertThat(EMPTY.isSeries()).isTrue(); assertThat(SECTOR_REGION.isSeries()).isFalse(); assertThat(INDUSTRY.isSeries()).isFalse(); assertThat(INDUSTRY.child("be").isSeries()).isTrue();
assertEquals("two", iterator.getLast()); assertEquals("two", iterator.getLast());
assertTrue(valueOf(1).isIdentity()); assertFalse(valueOf(0).isIdentity()); assertTrue(valueOf(1, 0).isIdentity()); assertFalse(valueOf(0, 1).isIdentity());
assertTrue(factory.isValid(load("/sdmx-generic-sample.xml"))); assertFalse(factory.isValid(load("/sdmx-compact-sample.xml")));
assertTrue(c.isZero());
assertTrue(Arrays.deepEquals(s, (Object[]) p));
assertThat(single).isLessThan(dual); assertThat(dual).isGreaterThan(single); assertThat(dual).isEqualByComparingTo(dual); assertThat(WorkspaceFamily.parse("a")).isLessThan(WorkspaceFamily.parse("b")); assertThat(WorkspaceFamily.parse("b")).isGreaterThan(WorkspaceFamily.parse("a"));
assertThat(parser.parse(formatter.formatValue(newSample()).get())).isEqualTo(newSample());
assertThat(empty.path()).isEmpty(); assertThat(single.path()).containsExactly(single); assertThat(dual.path()).containsExactly(WorkspaceFamily.parse("hello"), WorkspaceFamily.parse("hello@world"));
assertTrue(D.isDiagonal()); assertTrue(D.isDiagonal(.001)); assertTrue(!D.isDiagonal()); assertTrue(D.isDiagonal(.001)); assertTrue(!D.isDiagonal(.000999));
assertThat(empty.getCount()).isEqualTo(0); assertThat(single.getCount()).isEqualTo(1); assertThat(dual.getCount()).isEqualTo(2);
assertEquals("one", iterator.find(o -> o != null)); assertEquals("two", iterator.find(o -> o != null));
assertThat(f.format(new File("test.xml"))).isEqualTo("test.xml");
assertThat(p.parse("[3.5,6.1]")).containsExactly(3.5, 6.1); assertThat(p.parse("[ 3.5 , 6.1 ]")).containsExactly(3.5, 6.1); assertThat(p.parse("[3.5;6.1]")).isNull(); assertThat(p.parse("3.5,6.1]")).isNull(); assertThat(p.parse("hello")).isNull();
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(10d);
assertEquals(rawQuery, uri.getRawQuery()); assertNotNull(tmp); assertEquals(query.size(), tmp.size()); assertTrue(query.containsKey(o.getKey())); assertEquals(o.getValue(), query.get(o.getKey()));
assertThat(p.parse("Monthly")).isEqualTo(TsFrequency.Monthly); assertThat(p.parse("hello")).isNull();
assertEquals(y0, y1, EPS);
assertArrayEquals(new String[]{"one", "two", "three"}, iterator.toList().toArray()); assertArrayEquals(new String[]{"two", "three"}, iterator.toList().toArray()); assertArrayEquals(new String[]{}, iterator.toList().toArray());
assertThat(Formatters.ofInstance("123").formatValue(new Object()).get()).isEqualTo("123"); assertThat(Formatters.ofInstance(null).formatValue(new Object()).isPresent()).isFalse();
assertTrue(cl0.toString().equalsIgnoreCase("td2")); assertTrue(cl1.toString().equalsIgnoreCase("td3")); assertTrue(cl2.toString().equalsIgnoreCase("td7"));
assertTrue(period_2001_03.isAfter(DATE_2001_01_10)); assertFalse(period_2001_03.isAfter(DATE_2001_03_10));
assertTrue(all.size() == 32); assertTrue(allInt.size() == 21);
assertThat(new TsInformation(null, goodSeries, All)).satisfies(info -> { assertThat(filler.fillSeries(info)).isFalse(); assertThat(info).isEqualToComparingFieldByField(seriesInfo(null, goodSeries, All, null, "boom", null)); }); assertThat(filler.fillSeries(info)).isFalse(); assertThat(info).isEqualToComparingFieldByField(seriesInfo(null, goodSeries, All, null, "boom", null));
assertEquals(c1.inv(), new ComplexBuilder(c1).inv().build());
assertArrayEquals(new String[]{"one", "two", "three"}, tmp.toArray()); assertArrayEquals(new String[]{"two", "three"}, tmp.toArray()); assertArrayEquals(new String[]{}, tmp.toArray());
assertArrayEquals(new String[]{"hello", "hello", "hello"}, iterator.toList().toArray());
assertTrue(M1.minus(M2).nrm2() < 1e-9); assertTrue(S1.minus(S2).nrm2() < 1e-9); assertTrue(T1.minus(T2).nrm2() < 1e-9);
assertThat(p.parse("2010-01")).isEqualTo("2010-01-01"); assertThat(p.parse("2010-02")).isEqualTo("2010-02-01"); assertThat(p.parse("2010-01-01")).isNull(); assertThat(p.parse("2010-01x")).isNull(); assertThat(p.parse("x2010-01")).isNull();
assertTrue(cl0.isInside(cl1)); assertTrue(cl1.isInside(cl2)); assertTrue(cl3.isInside(cl2)); assertTrue(!cl4.isInside(cl0)); assertTrue(cl0.isInside(cl4));
assertThat(list.stream().toArray()).isEmpty(); assertThat(list.stream().toArray()).containsExactly(10d, 5d); assertThat(list.stream().toArray()).isEmpty();
assertThat(newSample()) .isEqualTo(newSample()) .isNotEqualTo(new DataSet(id, DataSet.Kind.SERIES, content)) .isNotEqualTo(new DataSet(id, DataSet.Kind.DUMMY, emptyContent));
assertThat(EMPTY.getMaxLevel()).isEqualTo(0); assertThat(SECTOR_REGION.getMaxLevel()).isEqualTo(2);
assertTrue(iterator.contains("one")); assertFalse(iterator.contains("two")); assertFalse(iterator.contains("one"));
assertEquals(dist.getDensity(d),chi.getDensity(d), 1e-6);
assertTrue(iterator.elementsEqual(create("one", "two"))); assertFalse(iterator.elementsEqual(create("one", "two", "three"))); assertFalse(iterator.elementsEqual(create("one", "two"))); assertTrue(iterator.elementsEqual(tmp));
assertEquals(SymmetricMatrix.quadraticForm(S, x.getData()), SymmetricMatrix.quadraticForm(S, x), 1e-9);
assertThat(f.format(StandardCharsets.UTF_8)).isEqualTo("UTF-8");
assertTrue(Math.abs(M.sum())<1e-9 );
assertTrue(items.isEmpty());
assertArrayEquals(new String[]{"one", "two", "three"}, iterator.toArray(String.class)); assertArrayEquals(new String[]{"two", "three"}, iterator.toArray(String.class)); assertArrayEquals(new String[]{}, iterator.toArray(String.class));
assertEquals(2001, D_2001_03_03.getYear());
assertThat(checkProvider("myprovider", input)) .isSameAs(input);
assertArrayEquals(new String[]{"Col1", "Col2", "Col3"}, DbBean.getDimArray("Col1, Col2, Col3")); assertArrayEquals(new String[]{"Col1", "Col3"}, DbBean.getDimArray("Col1, , Col3"));
assertEquals(result, computeC2(q2, f2), 0);
assertThat(empty) .isEqualTo(WorkspaceFamily.parse("")) .isNotEqualTo(single) .isNotEqualTo(dual); assertThat(single) .isEqualTo(WorkspaceFamily.parse("single")) .isNotEqualTo(empty) .isNotEqualTo(dual); assertThat(dual) .isEqualTo(WorkspaceFamily.parse("hello@world")) .isNotEqualTo(empty) .isNotEqualTo(single);
assertNotSame(data, p1.getCoefficients());
assertThat(empty.toArray()).isEmpty(); assertThat(single.toArray()).containsExactly("single"); assertThat(dual.toArray()).containsExactly("hello", "world"); assertThat(single.toArray()).isNotSameAs(single.toArray());
assertThat(newSample().hashCode()) .isEqualTo(newSample().hashCode()) .isEqualTo(new DataSource(PNAME, VERSION, ImmutableSortedMap.of(K3, V3, K2, V2, K1, V1)).hashCode()) .isNotEqualTo(ZERO.hashCode());
assertEquals(666, p1.get(0), NO_DELTA);
assertTrue(m.equals(m2, 1e-6));
assertThat(DataSource.deepCopyOf(PNAME, VERSION, P3)).isEqualTo(newSample());
assertThat(p.parse("2010-01")).isEqualTo(jan2010); assertThat(p.parse("2010-02")).isNotEqualTo(jan2010); assertThat(p.parse("2010-01-01")).isNull();
assertEquals(3, count);
assertThat(empty.toString()).isEqualTo(""); assertThat(single.toString()).isEqualTo("single"); assertThat(dual.toString()).isEqualTo("hello.world");
assertThat(f.format(Boolean.TRUE)).isEqualTo("true"); assertThat(f.format(Boolean.FALSE)).isEqualTo("false");
assertThat(Trees.breadthFirstStream(n1, Node::childrenStream).map(Node::getName)) .containsExactly("1", "2", "3", "4", "5", "6");
assertThat(FileDataSourceId.parse(input)).isNull();
assertEquals(Month.March.intValue(), D_2001_03_03.getMonth());
assertThat(empty.getCount()).isEqualTo(0); assertThat(single.getCount()).isEqualTo(1); assertThat(dual.getCount()).isEqualTo(2);
assertEquals(c3, new ComplexBuilder(3.14).build());
assertEquals(16, items.size()); assertEquals("1 s0b44000.e2", first.name); assertEquals(192, first.data.get().getLength()); assertEquals(TsFrequency.Monthly, first.data.get().getFrequency()); assertEquals("16 s0b72200.e2", last.name); assertEquals(192, last.data.get().getLength()); assertEquals(TsFrequency.Monthly, last.data.get().getFrequency());
assertEquals(ImmutableMap.of(AccessMode.READ, "hello", AccessMode.WRITE, "hello"), iterator.toMap(Enums.stringConverter(AccessMode.class), o -> "hello"));
assertEquals(expected, actual); assertNotEquals(expected, actual); assertEquals(expected, actual); assertNotEquals(expected, actual); assertEquals(expected, actual); assertNotEquals(expected, actual); assertEquals(expected, actual);
assertThat(col.hashCode()) .isEqualTo(col.hashCode()) .isNotEqualTo(TsFactory.instance.createTsCollection().hashCode()) .isEqualTo(TsFactory.instance.createTsCollection("name", col.getMoniker(), TsInformationType.All).hashCode());
assertThat(checkProvider("myprovider", input)) .isSameAs(input);
assertThat(f.format("hello")).isEqualTo("hello");
assertEquals(c1.negate(), new ComplexBuilder(c1).chs().build());
assertTrue(d.nrm2() < 1e-9);
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(5, 10);
assertThat(newSample()) .isEqualTo(newSample()) .isNotSameAs(newSample()) .isNotEqualTo(ZERO) .isEqualTo(new DataSource(PNAME, VERSION, ImmutableSortedMap.of(K3, V3, K2, V2, K1, V1)));
assertThat(empty.toString()).isEqualTo(""); assertThat(single.toString()).isEqualTo("single"); assertThat(dual.toString()).isEqualTo("hello@world");
assertFalse(period_2001_03.isBefore(DATE_2001_01_10)); assertFalse(period_2001_03.isBefore(DATE_2001_03_10));
assertTrue(all.get("y_f", TsData.class) != null);
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(5d, 10d);
assertTrue(fullYears.start.getPosition()==0); assertTrue(fullYears.period(fullYears.data.getEndPosition()).getPosition()==0);
assertThat(other.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(10, 5);
assertTrue(s.extendTo(d0).getLastPeriod().lastday().equals(d0)); assertTrue(s.extendTo(d1).getLastPeriod().lastday().isBefore(d1)); assertTrue(s.extendTo(d2).getLastPeriod().lastday().equals(d0));
assertThat(f.format(TsFrequency.Monthly)).isEqualTo("Monthly");
assertTrue(M1.distance(M2) > 1e-9); assertTrue(M1.distance(M2) < 1e-9);
assertTrue(all.get("y_f", TsData.class) != null);
assertThat(INDUSTRY.getDimensionValue(0)).isEqualTo("industry");
assertThat(p.parse("123")).isEqualTo(123); assertThat(p.parse("123.3")).isNull(); assertThat(p.parse("hello")).isNull();
assertEquals(c1, new ComplexBuilder(54.654, 7.321).build());
assertThat(formatter.format(newSample())) .isNotEmpty() .isEqualTo(formatter.format(newSample())) .isEqualTo(formatter.format(new DataSource(PNAME, VERSION, ImmutableSortedMap.of(K3, V3, K2, V2, K1, V1)))) .isNotEqualTo(formatter.format(ZERO));
assertTrue(D.nrm2() < 1e-9);
assertEquals(V2[0], ID2.getValue(0)); assertEquals(V2[1], ID2.getValue(1));
assertTrue(J.getRowsCount() == n - m);
assertThat(of().write(DIV).writer.toString()).isEqualTo("<div/>"); assertThat(of().write(DIV, "content").writer.toString()).isEqualTo("<div>content</div>"); assertThat(of().write(DIV, "content", NO_CLASS).writer.toString()).isEqualTo("<div>content</div>"); assertThat(of().write(DIV, "content", HELLO_CLASS).writer.toString()).isEqualTo("<div class=\\"hello\\">content</div>");
assertArrayEquals(new String[]{"one", "two", "three"}, iterator.toList().toArray());
assertEquals("hello", iterator.next("hello")); assertEquals("one", iterator.next("hello")); assertEquals("hello", iterator.next("hello")); assertEquals("hello", iterator.next("hello"));
assertThat(DataSource.of(PNAME, VERSION, K1, V1)).isEqualTo(ONE);
assertTrue(beg.extract(i, -1, FREQ).isConstant()); assertTrue(end.extract(i, -1, FREQ).isConstant());
assertThat(other.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(10, 5);
assertTrue(null != all.search("series" + (i + 1) + ".final.sa", TsData.class));
assertTrue(input != null); assertTrue(regarima != null); assertTrue(x11 != null); assertTrue(finalDecomposition != null); assertTrue(bench != null);
assertEquals(COLUMNS.length, ID0.getMaxLevel()); assertEquals(COLUMNS.length, ID1.getMaxLevel()); assertEquals(COLUMNS.length, ID2.getMaxLevel());
assertThat(EMPTY.getDepth()).isEqualTo(0); assertThat(SECTOR_REGION.getDepth()).isEqualTo(2); assertThat(INDUSTRY.getDepth()).isEqualTo(1);
assertTrue(sa != null); assertTrue(fcasts != null); assertTrue(d8 != null); assertTrue(lb != null);
assertThat(p.parse("UTF-8")).isEqualTo(StandardCharsets.UTF_8); assertThat(p.parse("hello")).isNull();
assertThat(EMPTY.isAncestorOf(EMPTY)).isFalse(); assertThat(SECTOR_REGION.isAncestorOf(SECTOR_REGION)).isFalse(); assertThat(SECTOR_REGION.isAncestorOf(INDUSTRY)).isTrue(); assertThat(INDUSTRY.isAncestorOf(SECTOR_REGION)).isFalse();
assertTrue(B0.distance(B1)<1e-9);
assertTrue(B0.distance(B1)<1e-9);
assertThat(newSample().hashCode()) .isEqualTo(newSample().hashCode()) .isNotEqualTo(new DataSet(id, DataSet.Kind.DUMMY, emptyContent).hashCode());
assertTrue(null != all.search("P" + i + ".likelihood.aic", Double.class));
assertTrue(model.description.getOutliers().size()>1);
assertTrue(j.getRowsCount() == 2);
assertTrue(D.nrm2() < 1e-9);
assertEquals(c1.getIm(), new ComplexBuilder(c1).getIm(), 0);
assertThat(p.parse("true")).isEqualTo(true); assertThat(p.parse("false")).isEqualTo(false); assertThat(p.parse("TRUE")).isEqualTo(true); assertThat(p.parse("FALSE")).isEqualTo(false); assertThat(p.parse("1")).isEqualTo(true); assertThat(p.parse("0")).isEqualTo(false); assertThat(p.parse("hello")).isNull();
assertThat(empty.extend("other")).isEqualTo(WorkspaceFamily.parse("other")); assertThat(single.extend("other")).isEqualTo(WorkspaceFamily.parse("single@other")); assertThat(dual.extend("other")).isEqualTo(WorkspaceFamily.parse("hello@world@other"));
assertTrue(Doubles.equals(0, 0, EPS)); assertTrue(Doubles.equals(666, 666, EPS)); assertTrue(Doubles.equals(666, 666 + EPS, EPS)); assertTrue(Doubles.equals(666, 666 - EPS, EPS)); assertFalse(Doubles.equals(666, 666 + EPS * 2, EPS)); assertFalse(Doubles.equals(666, 666 - EPS * 2, EPS));
assertArrayEquals(new double[]{1, 2, 3, 4, 5, 6, 7}, Arrays2.concat(d1, d2, d3), NO_DELTA); assertArrayEquals(new double[]{}, Arrays2.concat(), NO_DELTA); assertArrayEquals(new double[]{4, 5}, Arrays2.concat(d2), NO_DELTA); assertNotSame(new double[]{4, 5}, Arrays2.concat(d2));
assertEquals(1, items.size()); assertEquals("ipiSPAIN", single.name); assertEquals(new TsDomain(TsFrequency.Monthly, 1983, 1, 158), single.data.get().getDomain()); assertEquals(158 - 4, single.data.get().getObsCount()); assertEquals(Double.NaN, single.data.get().get(4), 0);
assertThat(empty.parent()).isNull(); assertThat(single.parent()).isEqualTo(empty); assertThat(dual.parent()).isEqualTo(WorkspaceFamily.parse("hello"));
assertEquals(result, computeDiscr(B2, A2, C2), 0);
assertFalse(ID0.isSeries()); assertFalse(ID1.isSeries()); assertTrue(ID2.isSeries());
assertTrue(nspec.equals(espec));
assertEquals(A, p1.get(0), NO_DELTA);
assertTrue(Files2.acceptByLowerCaseExtension(new File("hello.xml"), "xml")); assertTrue(Files2.acceptByLowerCaseExtension(new File("hello.xml"), "jpg", "xml")); assertTrue(Files2.acceptByLowerCaseExtension(new File("hello.xMl"), "xml")); assertFalse(Files2.acceptByLowerCaseExtension(new File("hello.xml"), "jpg")); assertFalse(Files2.acceptByLowerCaseExtension(new File("hello.xml")));
assertTrue(Arrays2.arrayEquals(new int[]{1, 2, 3}, new int[]{1, 2, 3})); assertFalse(Arrays2.arrayEquals(new int[]{1, 2, 3}, new int[]{1, 2}));
assertTrue(j.getRowsCount() == 3);
assertEquals(y0, y1, EPS);
assertThat(empty) .isEqualTo(new LinearId()) .isNotEqualTo(single) .isNotEqualTo(dual); assertThat(single) .isEqualTo(new LinearId("single")) .isNotEqualTo(empty) .isNotEqualTo(dual); assertThat(dual) .isEqualTo(new LinearId("hello", "world")) .isNotEqualTo(empty) .isNotEqualTo(single);
assertTrue(d.nrm2() < 1e-15);
assertArrayEquals(r1, t1, NO_DELTA); assertArrayEquals(r2, t2, NO_DELTA); assertArrayEquals(r3, t3, NO_DELTA); assertArrayEquals(r4, t4, NO_DELTA); assertArrayEquals(r5, t5, NO_DELTA); assertArrayEquals(r6, t6, NO_DELTA);
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(2d, 3d);
assertThat(of().open(DIV).writer.toString()).isEqualTo("<div>"); assertThat(of().open(DIV, NO_CLASS).writer.toString()).isEqualTo("<div>"); assertThat(of().open(DIV, HELLO_CLASS).writer.toString()).isEqualTo("<div class=\\"hello\\">");
assertThat(empty.toArray()).isEmpty(); assertThat(single.toArray()).containsExactly("single"); assertThat(dual.toArray()).containsExactly("hello", "world"); assertThat(single.toArray()).isNotSameAs(single.toArray());
assertThat(list.stream().toArray()).isEmpty(); assertThat(list.stream().toArray()).containsExactly(10, 5); assertThat(list.stream().toArray()).isEmpty();
assertTrue(ID0.equals(ID0)); assertFalse(ID0.equals(ID1)); assertFalse(ID1.equals(ID0)); assertTrue(ID0.child("A", "B").equals(ID0.child("A", "B"))); assertFalse(ID0.child("A", "B").equals(ID0.child("B", "A")));
assertThat(Formatters.ofInstance("123").formatAsString(new Object())).isEqualTo("123"); assertThat(Formatters.ofInstance(null).formatAsString(new Object())).isNull();
assertThat(p.parse("test.xml")).isEqualTo(new File("test.xml"));
assertThat(newSample().toString()) .isEqualTo(newSample().toString()) .isEqualTo(new DataSource(PNAME, VERSION, ImmutableSortedMap.of(K3, V3, K2, V2, K1, V1)).toString()) .isNotEqualTo(ZERO.toString());
assertThat(EMPTY.hashCode()) .isEqualTo(EMPTY.hashCode()) .isNotEqualTo(SECTOR_REGION.hashCode()); assertThat(SECTOR_REGION.hashCode()) .isEqualTo(SECTOR_REGION.hashCode()) .isNotEqualTo(INDUSTRY.hashCode()); assertThat(INDUSTRY.hashCode()) .isEqualTo(INDUSTRY.hashCode()) .isEqualTo(SECTOR_REGION.child("industry").hashCode());
assertTrue(B0.distance(B1)<1e-9);
assertTrue(data0.distance(data1)<1e-9);
assertEquals(Gamma.gamma(d), SpecialFunctions.gamma(d), 1e-3);
assertThat(newSample().getParams()).containsAllEntriesOf(content);
assertTrue(j.getRowsCount() == 4);
assertEquals("one", iterator.get(0, "hello")); assertEquals("two", iterator.get(1, "hello")); assertEquals("one", iterator.get(0, "hello")); assertEquals("two", iterator.get(0, "hello")); assertEquals("hello", iterator.get(3, "hello"));
assertTrue(solver.factorize(Polynomial.of(c)));
assertArrayEquals(new String[]{}, iterator.skip(1).toArray(String.class)); assertArrayEquals(new String[]{"two"}, iterator.skip(1).toArray(String.class)); assertArrayEquals(new String[]{}, iterator.skip(3).toArray(String.class));
assertTrue(m.get(0, 4)==1); assertTrue(m.get(1, 4)==1); assertTrue(m.get(2, 0)==1); assertTrue(m.get(3, 2)==1); assertTrue(m.get(4, 5)==1);
assertEquals(c1.div(c3), c1.div(3.14), EPS);
assertThat(SECTOR_REGION.getDimensionId(0)).isEqualTo("sector");
assertTrue(burg.solve(new ReadDataBlock(x), 30));
assertEquals(2, valueOf(A, B, C).getDegree()); assertEquals(0, valueOf(1).getDegree()); assertEquals(0, valueOf(0, 0, 0).getDegree());
assertEquals(1, items.size()); assertEquals("EXPORTS (Spain)", single.name); assertEquals(new TsDomain(TsFrequency.Monthly, 1976, 0, 155), single.data.get().getDomain());
assertThat(empty.parent()).isEqualTo(empty); assertThat(single.parent()).isEqualTo(empty); assertThat(dual.parent()).isEqualTo(new LinearId("hello"));
assertTrue(x.get(9)==7 && x.get(3)==1);
assertThat(FileWorkspaceImpl.getRootFolder(JIM_FS.getPath("/workspace.xml"))) .isAbsolute() .hasFileName("workspace") .matches(o -> o.getFileSystem().equals(JIM_FS));
assertThat(EMPTY).isEqualTo(CubeId.root()); assertThat(EMPTY).isNotEqualTo(null); assertThat(EMPTY).isNotEqualTo(SECTOR_REGION); assertThat(SECTOR_REGION).isEqualTo(CubeId.root("sector", "region")); assertThat(SECTOR_REGION).isNotEqualTo(INDUSTRY);
assertTrue(Math.abs(q.sum() - K) < 1e-6); assertTrue(Math.abs(q.sum() - K) < 1e-6);
assertEquals(COLUMNS.length - 0, ID0.getDepth()); assertEquals(COLUMNS.length - 1, ID1.getDepth()); assertEquals(COLUMNS.length - 2, ID2.getDepth());
assertTrue(Utilities.julianEaster3(i, true).getDayOfWeek() == DayOfWeek.Sunday);
assertEquals(result, computeB2(f2, f1, q2, f0), 0);
assertEquals(now.get(Calendar.YEAR), today.getYear()); assertEquals(now.get(Calendar.MONTH), today.getMonth()); assertEquals(now.get(Calendar.DAY_OF_WEEK), DayOfWeek.toCalendar(today.getDayOfWeek()));
assertTrue(ReadDataBlock.equals(A, AM, 0));
assertEquals("hello", create("one", "two").find(o -> "three".equals(o), "hello"));
assertEquals(2, iterator.count());
assertTrue(x.get(6)==10 && x.get(0)==4);
assertThat(list.toArray()).isEmpty(); assertThat(list.toArray()).containsExactly(2, 3);
assertEquals(1, items.size());
assertThat(p.parse("hello")).isEqualTo("hello");
assertThat(f.format(new double[]{0.4, -4.5})).isEqualTo("[0.4, -4.5]"); assertThat(f.format(new double[]{})).isEqualTo("[]");
assertTrue(cl.check(Data.P));
assertTrue(durbin.solve(new ReadDataBlock(x), 30));
assertThat(EMPTY.isRoot()).isTrue(); assertThat(SECTOR_REGION.isRoot()).isTrue(); assertThat(INDUSTRY.isRoot()).isFalse();
assertTrue(period_2001_03.contains(DATE_2001_03_10)); assertFalse(period_2001_03.contains(DATE_2001_01_10));
assertTrue(M2.equals(M)); assertTrue(M2.equals(M)); assertTrue(M2.equals(M)); assertTrue(M2.equals(M)); assertTrue(M2.equals(M)); assertTrue(M2.equals(M));
assertThat(LinearId.of(empty)).isSameAs(empty); assertThat(LinearId.of(new LinearId())).isEqualTo(empty); assertThat(LinearId.of(new LinearId("hello", "world"))).isEqualTo(dual);
assertThat(indexer.loadIndex()).isEqualTo(expectedIndex);
assertEquals(a2c1_first, a2c1_second); assertSame(a2c1_first, a2c1_second); assertEquals(a2c2_first, a2c2_second); assertSame(a2c2_first, a2c2_second); assertEquals(a2c1_first, a2c2_first); assertNotSame(a2c1_first, a2c2_first);
assertThat(single.get(0)).isEqualTo("single"); assertThat(dual.get(0)).isEqualTo("hello"); assertThat(dual.get(1)).isEqualTo("world");
assertThat(p1).isEqualByComparingTo(TsMoniker.createProvidedMoniker("A", "123")); assertThat(p2).isGreaterThan(p1); assertThat(p3).isGreaterThan(p2); assertThat(p3).isGreaterThan(p1); assertThat(a1).isEqualByComparingTo(a1); assertThat(a1.compareTo(a2)).isEqualTo(a2.compareTo(a1) * -1);
assertEquals(1, items.size()); assertEquals("Monetary Aggregate ALP (Spain)", single.name); assertEquals(new TsDomain(TsFrequency.Monthly, 1972, 0, 234), single.data.get().getDomain());
assertEquals(1, iterator.advance(1)); assertEquals(2, iterator.advance(3));
assertTrue(t.get(99, 99) != 0); assertTrue(l.equals(d, 1e-18));
assertEquals("one", iterator.get(0)); assertEquals("two", iterator.get(1)); assertEquals("one", iterator.get(0)); assertEquals("two", iterator.get(0));
assertThat(indexer.loadIndex()).isEqualTo(sampleIndex);
assertThat(checkProvider("myprovider", input)) .isSameAs(input);
assertEquals(ImmutableMap.of("one", "hello", "two", "hello"), iterator.toMap(o -> "hello"));
assertTrue(out.range(0, P + 1).isConstant()); assertTrue(out.range(N - P - 1, N).isConstant());
assertTrue(null != all.search("series" + (i + 1) + ".likelihood.aic", Double.class));
assertTrue(Utilities.julianEaster(i, true).getDayOfWeek() == DayOfWeek.Sunday);
assertFalse(factory.isValid(load("/sdmx-generic-sample.xml"))); assertTrue(factory.isValid(load("/sdmx-compact-sample.xml")));
assertEquals(0, iterator.count()); assertEquals(1, iterator.count()); assertEquals(1, iterator.count());
assertEquals(c1, new ComplexBuilder(c1).build());
assertEquals(0, iterator.frequency("three")); assertEquals(1, iterator.frequency("one")); assertEquals(2, iterator.frequency("one"));
assertTrue(Math.abs(w.sum() - 1) < 1e-9);
assertTrue(create("one", "two").all(o -> o != null)); assertFalse(create("one", "two").all(o -> "one".equals(o)));
assertThat(p.parseValue("hello").isPresent()).isFalse(); assertThat(p.parseValue("123").isPresent()).isTrue(); assertThat(p.parseValue("123").get()).isEqualTo(123);
assertArrayEquals(new String[]{"one", "one"}, iterator.toList().toArray()); assertArrayEquals(new String[]{}, iterator.toList().toArray());
assertTrue(D_2001_01_03.compareTo(D_2001_01_03) == 0); assertTrue(D_2001_03_03.compareTo(D_2001_01_03) > 0); assertTrue(D_2001_01_03.compareTo(D_2001_03_03) < 0);
assertTrue(Math.abs(w.sum() - 1) < 1e-9);
assertThat(DataSource.of(PNAME, VERSION)).isEqualTo(ZERO);
assertThat(WorkspaceFamily.of(empty)).isSameAs(empty); assertThat(WorkspaceFamily.of(new LinearId())).isEqualTo(empty); assertThat(WorkspaceFamily.of(new LinearId("hello", "world"))).isEqualTo(dual); assertThat(LinearId.of(dual)).isEqualTo(new LinearId("hello", "world"));
assertThat(EMPTY.getParent()).isNull(); assertThat(SECTOR_REGION.getParent()).isNull(); assertThat(INDUSTRY.getParent()).isEqualTo(SECTOR_REGION);
assertFalse(create("one", "two").any(o -> "hello".equals(o))); assertTrue(create("one", "two").any(o -> "one".equals(o)));
assertFalse(ID0.parent().isPresent()); assertTrue(ID1.parent().isPresent()); assertEquals(ID0, ID1.parent().get()); assertTrue(ID2.parent().isPresent()); assertEquals(ID1, ID2.parent().get());
assertArrayEquals(r1, t1, NO_DELTA); assertArrayEquals(r2, t2, NO_DELTA); assertArrayEquals(r3, t3, NO_DELTA); assertArrayEquals(r4, t4, NO_DELTA); assertArrayEquals(r5, t5, NO_DELTA);
assertTrue(DayClustering.create(new int[]{0,2,2,2,0,0,1})!= null); assertTrue(DayClustering.create(new int[]{0,2,2,2,0,0,0})== null); assertTrue(DayClustering.create(new int[]{0,2,2,2,2,2,1})!= null); assertTrue(DayClustering.create(new int[]{0,1,2,3,4,5,6})!= null);
assertThat(EMPTY.isVoid()).isTrue(); assertThat(SECTOR_REGION.isVoid()).isFalse(); assertThat(INDUSTRY.isVoid()).isFalse();
assertTrue(null != all.search("series" + (i + 1) + ".final.sa", TsData.class));
assertThat(p.parse("hello")).isNull();
assertThat(f.format(42)).isEqualTo("42");
assertEquals(f3[i], f1[i] + f2[i], 1e-9); assertEquals(f3[i], f1[i] + f2[i], 1e-9);
assertThat(single.get(0)).isEqualTo("single"); assertThat(dual.get(0)).isEqualTo("hello"); assertThat(dual.get(1)).isEqualTo("world");
assertThat(f.format("lkj")).isEqualTo("hello"); assertThat(Formatters.ofInstance(null).format("lkj")).isNull();
assertThat(Trees.depthFirstStream(n1, Node::childrenStream).map(Node::getName)) .containsExactly("1", "2", "3", "4", "5", "6");
assertTrue(row.sum() == 1);
assertEquals(COLUMNS[0], ID0.getColumn(0)); assertEquals(COLUMNS[1], ID0.getColumn(1));
assertThat(EMPTY.getLevel()).isEqualTo(0); assertThat(SECTOR_REGION.getLevel()).isEqualTo(0); assertThat(INDUSTRY.getLevel()).isEqualTo(1);
assertArrayEquals(new double[]{3, 2, 1}, d1, NO_DELTA); assertArrayEquals(new double[]{4, 3, 2, 1}, d2, NO_DELTA); assertArrayEquals(new double[]{}, d3, NO_DELTA);
assertThat(col) .isEqualTo(col) .isNotEqualTo(TsFactory.instance.createTsCollection()) .isEqualTo(TsFactory.instance.createTsCollection("name", col.getMoniker(), TsInformationType.All));
assertTrue(y.distance(yc) < 1e-9); assertTrue(y.distance(yc) < 1e-9);
assertTrue(B0.distance(B1)<1e-9);
assertThat(parser.parse(formatter.formatValue(newSample()).get())).isEqualTo(newSample());
assertTrue(j.getRowsCount() == 3);
assertEquals(result, computeA2(q2, f2, f0, f1), 0);
assertEquals(-1, create("one", "two").indexOf(o -> "hello".equals(o))); assertEquals(0, create("one", "two").indexOf(o -> "one".equals(o))); assertEquals(1, create("one", "two").indexOf(o -> "two".equals(o)));
assertTrue(data.getDictionary().size() == N);
assertEquals(cerrors.ssq(), process.estimation.getStatistics().SsqErr, 1e-6);
assertThat(Formatters.ofInstance("123").formatValueAsString(new Object()).get()).isEqualTo("123"); assertThat(Formatters.ofInstance(null).formatValueAsString(new Object()).isPresent()).isFalse();
assertEquals("[]", characterOutput.getOutput(""));
assertThat(echoPlugin, notNullValue());
assertEquals("", characterOutput.getOutput(""));
assertTrue(uut.test(mockedImg)); assertTrue(uut.test(null));
assertFalse(uut.deleteData(image));
assertTrue(uut.test(mockedImg)); assertTrue(uut.test(null));
assertEquals(uut.hashCode(), result);
assertTrue(uut.dataIsStorable(c0)); assertTrue(uut.dataIsStorable(null)); assertFalse(uut.dataIsStorable(c0)); assertFalse(uut.dataIsStorable(null));
assertNull(uut.loadData(image.getId()));
assertEquals(IMG_DATA.getBytes().length, uut.getByteSize());
assertNull(uut.getImageSize(PRODUCT_IMAGE_ID)); assertNull(uut.getImageSize(NAME_IMAGE_ID)); assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID)); assertNull(uut.getImageSize(NAME_IMAGE_ID)); assertNotEquals(sizeLarge, uut.getImageSize(PRODUCT_IMAGE_ID)); assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID));
assertTrue(uut.deleteData(c0)); assertFalse(uut.deleteData(c0)); assertTrue(uut.deleteData(c1)); assertFalse(uut.deleteData(c1));
assertTrue(uut.equals(uut)); assertFalse(uut.equals(uut2)); assertFalse(uut.equals(null)); assertFalse(uut.equals(nullEntry));
assertEquals(IDataCache.STD_MAX_CACHE_SIZE, uut.getMaxCacheSize()); assertEquals(1234567890, uut.getMaxCacheSize());
assertTrue(uut.equals(uut)); assertFalse(uut.equals(null)); assertFalse(uut.equals(mockedImg0)); assertTrue(uut.equals(test)); assertFalse(uut.equals(img));
assertEquals(0, uut.getCurrentCacheSize()); assertEquals(c0.getByteSize(), uut.getCurrentCacheSize()); assertEquals(c0.getByteSize() + c1.getByteSize(), uut.getCurrentCacheSize());
assertEquals(IMG_ID1, uut.getId());
assertFalse(uut.dataExists(image.getId()));
assertEquals(IDataCache.STD_MAX_CACHE_SIZE, uut.getFreeSpace()); assertEquals(IDataCache.STD_MAX_CACHE_SIZE - c0.getByteSize(), uut.getFreeSpace()); assertEquals(IDataCache.STD_MAX_CACHE_SIZE - (c0.getByteSize() + c1.getByteSize()), uut.getFreeSpace());
assertArrayEquals(IMG_DATA.getBytes(), uut.getByteArray());
assertTrue(uut.hasImageID(mockedProductKey, size)); assertFalse(uut.hasImageID(mockedNameKey, size)); assertTrue(uut.hasImageID(mockedNameKey, size)); assertFalse(uut.hasImageID(mockedProductKey, size));
assertFalse(uut.saveData(image));
assertFalse(uut.dataIsStorable(image));
assertTrue(uut.test(mockedLargeImg)); assertFalse(uut.test(mockedIconImg)); assertFalse(uut.test(mockedMainImg)); assertFalse(uut.test(mockedPreviewImg)); assertFalse(uut.test(null));
assertEquals(bi.getWidth(), img.getWidth()); assertEquals(bi.getHeight(), img.getHeight());
assertEquals(TEST_PRODUCT_KEY, uut.getProductID()); assertNull(uut.getWebUIName());
assertEquals(IMG_DATA, uut.getBase64());
assertEquals(MOCKED_BYTE_SIZE, uut.getByteSize());
assertTrue(uut.isProductKey()); assertFalse(uut.isProductKey());
assertEquals(ImageSizePreset.ICON.getSize(), uut.getSize());
assertEquals(TEST_FILENAME, uut.getWebUIName()); assertEquals(0, uut.getProductID());
assertEquals(mockedImg, uut.getData());
assertEquals(IMG_STRING + IMG_DATA, uut.toString());
assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertFalse(uut.dataIsInCache(c2.getId())); assertFalse(uut.dataIsInCache(c3.getId()));
assertEquals(MOCKED_ID, uut.getId());
assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertFalse(uut.dataIsInCache(c0.getId())); assertFalse(uut.dataIsInCache(c1.getId()));
assertThat(exception, is(instanceOf(RocketChatInvalidResponseException.class))); assertThat(exception.getMessage(), is(equalTo("Use JsonReader.setLenient(true) to accept malformed JSON at path $"))); assertThat(exception.getCause(), is(instanceOf(JsonEncodingException.class)));
assertThat(getFirstTypeArgument(type), is(Matchers.<Type>equalTo(A.class))); assertThat(getFirstTypeArgument(type), is(Matchers.<Type>equalTo(B.class)));
assertThat(expected.getMessage(), is(equalTo(message)));
assertThat(token.userId(), is(equalTo("userid"))); assertThat(token.authToken(), is(equalTo("token"))); assertThat(token.expiresAt(), is(nullValue()));
assertThat(exceptionCaptor.getValue(), is(instanceOf(RocketChatNetworkErrorException.class)));
assertThat(booleanCaptor.getAllValues().get(0), is(equalTo(true))); assertThat(booleanCaptor.getAllValues().get(1), is(equalTo(false)));
assertThat(Types.mapKeyAndValueTypes(mapOfStringIntegerType, Map.class), is(Matchers.<Type>arrayContaining(String.class, Integer.class)));
assertThat(exceptionCaptor.getValue(), is(instanceOf(RocketChatException.class))); assertThat(exceptionCaptor.getValue().getCause(), is(instanceOf(JsonEncodingException.class))); assertThat(exceptionCaptor.getValue().getMessage(), containsString("Use JsonReader.setLenient"));
assertThat(throwableCaptor.getValue(), is(equalTo(throwable)));
assertThat(expected.getMessage(), is(equalTo(message)));
assertTrue("reconnect interval", strategy.getReconnectInterval() == 1000);
assertThat(exception, is(instanceOf(RocketChatAuthException.class))); assertThat(exception.getMessage(), is(equalTo("Unauthorized")));
assertTrue("max attempts", strategy.getMaxAttempts() == 5);
assertThat(Types.mapKeyAndValueTypes(StringIntegerMap.class, StringIntegerMap.class), is(Matchers.<Type>arrayContaining(String.class, Integer.class)));
assertThat(Types.supertypeOf(String.class), is(equalTo(expected)));
assertTrue(strategy.getReconnectInterval() == 30000);
assertThat(Types.collectionElementType(arrayListOfMapOfStringIntegerType, List.class), is(equalTo(mapOfStringIntegerType)));
assertThat(Types.subtypeOf(CharSequence.class), is(equalTo(expected)));
assertThat(Types.mapKeyAndValueTypes(Properties.class, Properties.class), is(Matchers.<Type>arrayContaining(String.class, String.class)));
assertThat(Types.arrayComponentType(String[][].class), is(Matchers.<Type>equalTo(String[].class))); assertThat(Types.arrayComponentType(String[].class), is(Matchers.<Type>equalTo(String.class))); assertThat(Types.arrayComponentType(arrayOfMapOfStringIntegerType), is(equalTo(mapOfStringIntegerType)));
assertTrue(Types.getRawType(Types.arrayOf(int.class)) == int[].class); assertTrue(Types.getRawType(Types.arrayOf(List.class)) == List[].class); assertTrue(Types.getRawType(Types.arrayOf(String[].class)) == String[][].class);
assertThat(versionCaptor.getValue(), is(equalTo("0.59.0")));
assertThat(id, is(equalTo("sessionId")));
assertThat(getFirstTypeArgument(A.class), is(nullValue())); assertThat(getFirstTypeArgument(type), is(Matchers.<Type>equalTo(B.class)));
assertThat(exceptionCaptor.getValue(), is(instanceOf(RocketChatException.class))); assertThat(exceptionCaptor.getValue().getMessage(), is(equalTo("Unsupported version: 0.59.0")));
assertThat(exception, is(instanceOf(RocketChatException.class)));
assertEquals(project, savedProject, "saving altered project");
assertEquals(2, numberOfProjects, "not fetching all existing projects");
assertNotNull(result); assertEquals(expectedCompanyId.getIdentifier(), result.getIdentifier()); assertEquals(expectedCompanyName, result.getName()); assertEquals(expectedCompanyValue, result.getValue()); assertEquals(expectedAmountOfShares, result.getAmountOfShares());
assertEquals(AMOUNT_OF_MONEY - RESERVED_AMOUNT_OF_MONEY, portfolio.obtainMoneyToSpend());
assertEquals(AMOUNT_ITEMS - AMOUNT_RESERVED, portfolio.obtainAmountOfAvailableItemsFor(ORDER_BOOK_ID));
assertNotNull(result); assertEquals(expectedUserId.getIdentifier(), result.getUserId()); assertEquals(expectedName, result.getName()); assertEquals(expectedUserName, result.getUserName());
assertNotNull(vltPack); assertNull(vltPack.getArchive());
assertFalse("malformed.xml is expected to be malformed", format.format(dir, patterns, false).isEmpty()); assertEquals(expected, result); assertTrue("malformed.xml is expected to be formatted", format.format(dir, patterns, true).isEmpty());
assertNull("test user must not exist", vip); assertFalse( "\\"" + TEST_USER + "\\" is not admin/system and doesn\'t belong to administrators thus shouldn\'t have admin permissions", AdminPermissionChecker.hasAdministrativePermissions(session));
assertTrue( "user \\"" + TEST_USER + "\\" has been added to administrators group thus should have admin permissions", AdminPermissionChecker.hasAdministrativePermissions(session));
assertNull("PackageInfo", info);
assertNotNull(vltPack); assertNotNull(vltPack.getArchive());
assertEquals("/etc/packages", packageNode.getPath());
assertEquals("/var/packages", packageNode.getPath());
assertTrue( "user \\"" + TEST_USER + "\\" has been added to additional administrators group thus should have admin permissions", AdminPermissionChecker.hasAdministrativePermissions(session, "myadmins"));
assertSame(packageNode, jcrPackageManager.getPackageRoot());
assertNull(jcrPackageManager.getPackageRoot(true));
assertTrue(seemsCompressible(newArtifact(incompressibleData(50*1024), null)) < 0); assertTrue(seemsCompressible(newArtifact(compressibleData(50*1024), null)) > 0);
assertTrue("initially the packages set is empty", packMgr.listPackages().isEmpty()); assertEquals("package list contains 1 element", 1, packMgr.listPackages().size()); assertEquals("contains new package", TMP_PACKAGE_ID, pkg.getDefinition().getId());
assertNull("test user must not exist", vip); assertTrue( "\\"" + TEST_USER + "\\" is additional admin/system thus should have admin permissions", AdminPermissionChecker.hasAdministrativePermissions(session, TEST_USER));
assertNull(jcrPackageManager.getPackageRoot(true));
assertTrue("user admin should have admin permissions", AdminPermissionChecker.hasAdministrativePermissions(admin));
assertFalse(anonymous.nodeExists("/")); assertFalse(anonymous.nodeExists("/etc")); assertTrue(anonymous.nodeExists("/etc/packages"));
assertNotNull(year); assertEquals("2015", year);
assertNotNull(year); assertEquals(currentYear, year);
assertEquals(key, key2);
assertEquals(3, keyParts.length); assertEquals(1, keyParts[0].length); assertEquals(42, keyParts[0][0]); assertEquals(2, keyParts[1].length); assertEquals(12, keyParts[1][0]); assertEquals(13, keyParts[1][1]); assertEquals(3, keyParts[2].length); assertEquals(1, keyParts[2][0]); assertEquals(2, keyParts[2][1]); assertEquals(3, keyParts[2][2]);
assertFalse(EngineChecks.checkIdentifier("")); assertFalse(EngineChecks.checkIdentifier(null)); assertFalse(EngineChecks.checkIdentifier("-a")); assertFalse(EngineChecks.checkIdentifier("_a")); assertFalse(EngineChecks.checkIdentifier("0a"));
assertEquals(0, comparator.compare(new byte[] {}, new byte[] {})); assertEquals(0, comparator.compare(new byte[] { 1 }, new byte[] { 1 })); assertEquals(0, comparator.compare(new byte[] { 1, 1, 1 }, new byte[] { 1, 1, 1 }));
assertNotNull(version);
assertNotNull(iterator); assertFalse(iterator.hasNext()); assertNull(iterator.next());
assertTrue(stopWatch.getDuration().compareTo(Duration.ofSeconds(1, 100)) < 0);
assertThat(methodSpec.toString(), is(expected));
assertFalse(contract.isValid());
assertThat(TypeEncoder.encodeArrayValues(array), is("0000000000000000000000000000000220000000000000000000000000000000" + "0000000000000000000000000000000880000000000000000000000000000000"));
assertThat(key, equalTo(SampleKeys.PUBLIC_KEY));
assertFalse(ensResolver.isSynced());
assertEquals(mnemonic, actualMnemonic);
assertThat(FunctionEncoder.encodeConstructor( Arrays.<Type>asList(new Uint(BigInteger.ONE), new Uint(BigInteger.valueOf(0x20)))), is("0000000000000000000000000000000000000000000000000000000000000001" + "0000000000000000000000000000000000000000000000000000000000000020"));
assertThat(FunctionReturnDecoder.decodeIndexedValue( encoded, new TypeReference<Uint256>() {}), IsEqual.<Type>equalTo(value));
assertThat(results, equalTo(ethBlocks)); assertTrue(subscription.isUnsubscribed());
assertArrayEquals(seed, actualSeed);
assertThat(FunctionEncoder.encodeConstructor( Collections.<Type>singletonList(new Utf8String("Greetings!"))), is("0000000000000000000000000000000000000000000000000000000000000020" + "000000000000000000000000000000000000000000000000000000000000000a" + "4772656574696e67732100000000000000000000000000000000000000000000"));
assertThat(rlpStrings.size(), is(6)); assertThat(rlpStrings.get(3), CoreMatchers.<RlpType>is(RlpString.create("")));
assertThat(methodSpec.toString(), is(expected));
assertThat(ethSyncing.getResult(), CoreMatchers.<EthSyncing.Result>equalTo( new EthSyncing.Syncing("0x384", "0x386", "0x454", null, null)));
assertThat(getNativeType( ParameterizedTypeName.get( ClassName.get(DynamicArray.class), TypeName.get(Address.class))), IsEqual.<TypeName>equalTo(ParameterizedTypeName.get( ClassName.get(List.class), TypeName.get(String.class))));
assertThat((String) utf8Strings.get(0).getValue(), is("one more time"));
assertThat( FunctionEncoder.buildMethodSignature( "baz", Arrays.<Type>asList( new Uint32(BigInteger.valueOf(69)), new Bool(true)) ), is("baz(uint32,bool)"));
assertThat(FunctionReturnDecoder.decode("0x", function.getOutputParameters()), CoreMatchers.<List>is(Collections.emptyList()));
assertThat(FunctionReturnDecoder.decodeIndexedValue( rawInput, new TypeReference<Bytes32>(){}), IsEqual.<Type>equalTo(new Bytes32(rawInputBytes)));
assertThat(FunctionEncoder.encodeConstructor(Collections.<Type>emptyList()), is(""));
assertThat(generateContractAddress(address, BigInteger.valueOf(209)), is("0xe41e694d8fa4337b7bffc7483d3609ae1ea068d5")); assertThat(generateContractAddress(address, BigInteger.valueOf(257)), is("0x59c21d36fbe415218e834683cb6616f2bc971ca9"));
assertFalse(contract.isValid());
assertTrue(ensResolver.isSynced());
assertThat(Async.run(new Callable<String>() { @Override public String call() throws Exception { return ""; } }).get(), is(""));
assertThat((String) utf8Strings.get(0).getValue(), is(""));
assertThat(signatureData, is(expected));
assertThat(methodSpec.toString(), is(expected));
assertThat(Sign.publicKeyFromPrivate(SampleKeys.PRIVATE_KEY), equalTo(SampleKeys.PUBLIC_KEY));
assertThat(TypeEncoder.encodeString(string), is("000000000000000000000000000000000000000000000000000000000000000d" + "48656c6c6f2c20776f726c642100000000000000000000000000000000000000"));
assertThat(results, equalTo(ethBlocks)); assertTrue(subscription.isUnsubscribed());
assertThat(typeMap(new ArrayList<BigInteger>(), Uint256.class), CoreMatchers.<List<Uint256>>equalTo(new ArrayList<Uint256>()));
assertTrue(contract.isValid());
assertThat(Numeric.decodeQuantity("0x0400"), equalTo(BigInteger.valueOf(1024L))); assertThat(Numeric.decodeQuantity("0x001"), equalTo(BigInteger.valueOf(1L)));
assertThat(decoded, is(expected));
assertNotNull(privateKey); assertNotNull(publicKey); assertThat(privateKey.getEncoded().length, is(144)); assertThat(publicKey.getEncoded().length, is(88));
assertThat(eventValuesWithLogs1.size(), equalTo(1)); assertThat(eventValuesWithLogs1.get(0).getLog(), equalTo(logs.get(0))); assertThat(eventValuesWithLogs2.size(), equalTo(1)); assertThat(eventValuesWithLogs2.get(0).getLog(), equalTo(logs.get(1)));
assertThat(contract.getContractAddress(), is(ADDRESS));
assertThat(join(Arrays.asList("a", "b"), "|"), is("a|b")); assertNull(join(null, "|")); assertThat(join(Collections.singletonList("a"), "|"), is("a"));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<Utf8String>() {}), IsEqual.<Type>equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertThat(typeMap(input, Uint256.class), equalTo(Arrays.asList( new Uint256(BigInteger.ZERO), new Uint256(BigInteger.ONE), new Uint256(BigInteger.TEN))));
assertThat(TypeDecoder.decodeUtf8String( "000000000000000000000000000000000000000000000000000000000000000d" + "48656c6c6f2c20776f726c642100000000000000000000000000000000000000", 0), is(new Utf8String("Hello, world!")));
assertThat( TypeEncoder.encodeDynamicArray(array), is("0000000000000000000000000000000000000000000000000000000000000003" + "0000000000000000000000000000000000000000000000000000000000000001" + "0000000000000000000000000000000000000000000000000000000000000002" + "0000000000000000000000000000000000000000000000000000000000000003" ));
assertThat(rlpStrings.size(), is(9)); assertThat(rlpStrings.get(3), IsEqual.<RlpType>equalTo(RlpString.create(new BigInteger("add5355", 16))));
assertNull(contract.getTransactionReceipt());
assertThat(Transfer.sendFunds(web3j, SampleKeys.CREDENTIALS, ADDRESS, BigDecimal.TEN, Convert.Unit.ETHER).send(), is(transactionReceipt));
assertThat(normalise("foo"), is("foo")); assertThat(normalise("foo.bar.baz.eth"), is("foo.bar.baz.eth")); assertThat(normalise("fOo.eth"), is("foo.eth")); assertThat(normalise("foo-bar.eth"), is("foo-bar.eth"));
assertThat(FunctionReturnDecoder.decodeIndexedValue( rawInput, new TypeReference<Bytes16>(){}), IsEqual.<Type>equalTo(new Bytes16(rawInputBytes)));
assertThat(FunctionEncoder.encode(function), is("0xcdcd77c0" + "0000000000000000000000000000000000000000000000000000000000000045" + "0000000000000000000000000000000000000000000000000000000000000001" ));
assertThat( FunctionEncoder.buildMethodSignature("empty", Collections.<Type>emptyList()), is("empty()"));
assertThat(FunctionReturnDecoder.decode( "0x0000000000000000000000000000000000000000000000000000000000000037" + "0000000000000000000000000000000000000000000000000000000000000007", function.getOutputParameters()), IsEqual.<List>equalTo(Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7)))));
assertThat(FunctionReturnDecoder.decode("0x", function.getOutputParameters()), CoreMatchers.<List>is(Collections.emptyList()));
assertFalse(ensResolver.isSynced());
assertThat(deployedContract.getContractAddress(), is(ADDRESS)); assertNotNull(deployedContract.getTransactionReceipt()); assertThat(deployedContract.getTransactionReceipt(), equalTo(transactionReceipt));
assertThat(FunctionReturnDecoder.decode( "0x0000000000000000000000000000000000000000000000000000000000000037", function.getOutputParameters()), IsEqual.<List>equalTo(Collections.singletonList(new Uint(BigInteger.valueOf(55)))));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<DynamicBytes>() {}), IsEqual.<Type>equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertThat(FunctionReturnDecoder.decodeIndexedValue( hash, new TypeReference<DynamicArray>() {}), IsEqual.<Type>equalTo(new Bytes32(Numeric.hexStringToByteArray(hash))));
assertTrue(i.attribute(j).isNumeric());
assertThat("Makes sure writing to a broken SharedPreferencesHelper returns false", success, is(false));
assertEquals(new File(dir, "test.json"), generator.getDestFile("test.json"));
assertEquals(expected, actual);
assertFalse(resolver.resolve(input).isPresent());
assertEquals(date1, date2); assertEquals(date1.getYear(), date2.getYear()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(WRITER.writeValueAsString(expected), WRITER.writeValueAsString(actual)); assertEquals(2, actual.getIntents().size());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(left, right); assertNotSame(left, right);
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertNull(dialog.getConfirmationRequired()); assertNull(dialog.getPrompts().getConfirmation());
assertEquals(slot.getType(), "TestCustom"); assertEquals(slot.getConfirmationRequired(), true); assertEquals(slot.getPrompts().getConfirmation(), "Confirm.Intent-TestIntent.IntentSlot-customSlot"); assertEquals( model.getPrompts().stream().filter(p -> p.getId().equals("Confirm.Intent-TestIntent.IntentSlot-customSlot")).findFirst().get().getVariations(), Collections.singletonList(PromptVariation.builder().withType("PlainText").withValue("test_en_US customSlot confirmation").build()));
assertEquals(left, right); assertEquals(left.getTime(), right.getTime()); assertEquals(left.getSlot(), right.getSlot()); assertEquals(left.hashCode(), right.hashCode()); assertEquals(left.toString(), right.toString());
assertTrue(underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getConfirmationRequired()); assertFalse(underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getConfirmationRequired());
assertEquals( "explicit.confirmation", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getPrompts().getConfirmation() );
assertEquals(test, test); assertEquals(test.hashCode(), test.hashCode());
assertSame(handlerInput.getAttributesManager(), resolver.resolve(input).get());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals( underTest.renderSlotType(mockSlotType, mockSlotData), slotTypeBuilder() .withName("TypeName") .withValues(Collections.singletonList( slotTypeValueBuilder() .withId("test_id") .withName(slotValueBuilder() .withValue("test_value") .withSynonyms(Collections.singletonList("test_synonym")) .build() ) .build() )) .build());
assertTrue(RequiredFlag.choose(true, null)); assertTrue(RequiredFlag.choose(true, false)); assertTrue(RequiredFlag.choose(true, true));
assertEquals( "slot_type", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getType());
assertEquals(test, test); assertEquals(test.hashCode(), test.hashCode());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertFalse(result.isPresent());
assertEquals(left, right); assertEquals(left.hashCode(), right.hashCode());
assertEquals(left, right); assertEquals(left.getValue(), right.getValue()); assertEquals(left.getSlot(), right.getSlot()); assertEquals(left.hashCode(), right.hashCode()); assertEquals(left.toString(), right.toString());
assertEquals("Test", new TypeReflector<>(TestClass.class).getAnnotation(Intent.class).value());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(expected, actual);
assertEquals(date1, date2); assertEquals(date1.getCentury(), date2.getCentury()); assertEquals(date1.getDecade(), date2.getDecade()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertFalse(resolver.resolve(input).isPresent());
assertTrue(underTest.canHandle(mockInput));
assertEquals( underTest.renderSlotType(mockSlotType, mockSlotData), slotTypeBuilder() .withName("TypeName") .withValues(Collections.emptyList()) .build());
assertEquals(0, new TypeReflector<>(NoSetter.class).getPropertyDescriptors().size());
assertFalse(resolver.resolve(input).isPresent());
assertFalse(resolver.resolve(input).isPresent());
assertEquals(WRITER.writeValueAsString(expected), WRITER.writeValueAsString(actual));
assertEquals(date1, date2); assertEquals(date1.getWeek(), date2.getWeek()); assertEquals(date1.getYear(), date2.getYear()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(1, underTest.getPropertyDescriptors().size()); assertNull(instance.getValue()); assertEquals("test", instance.getValue());
assertEquals(prompts, Collections.singletonList( Prompt.builder() .withId("Confirm.Intent-intent_name.IntentSlot-slot_name") .withVariations(new ArrayList<>(confirmations)) .build() ));
assertEquals( "explicit.elicitation", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getPrompts().getElicitation() );
assertSame(((IntentRequest) envelope.getRequest()).getIntent().getSlots().get("GREETING"), resolver.resolve(input).get());
assertSame(envelope, resolver.resolve(input).get());
assertEquals(date1, date2); assertEquals(date1.getMonth(), date2.getMonth()); assertEquals(date1.getYear(), date2.getYear()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(Time1, Time2); assertEquals(Time1.getTime(), Time2.getTime()); assertEquals(Time1.getSlot(), Time2.getSlot()); assertEquals(Time1.hashCode(), Time2.hashCode()); assertEquals(Time1.toString(), Time2.toString());
assertEquals( "Confirm.Intent-intent_name.IntentSlot-slot_name", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getPrompts().getConfirmation() );
assertNull(dialog.getElicitationRequired()); assertNull(dialog.getPrompts().getElicitation());
assertFalse(resolver.resolve(input).isPresent());
assertFalse(resolver.resolve(input).isPresent());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(date1, date2); assertEquals(date1.getSeason(), date2.getSeason()); assertEquals(date1.getYear(), date2.getYear()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(1, underTest.getPropertyDescriptors().size()); assertNull(instance.getValue()); assertNull(underTest.get(instance, "value")); assertEquals("test", underTest.get(instance, "value"));
assertNull(RequiredFlag.choose(null, null)); assertFalse(RequiredFlag.choose(null, false)); assertTrue(RequiredFlag.choose(null, true));
assertTrue(resolved instanceof MappingsController.PetTypeIntent);
assertNotEquals(model, "wrong class");
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertNull(RequiredFlag.choose(null, null));
assertEquals(Collections.singletonMap("GREETING", "hola"), resolver.resolve(input).get());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(prompts, Collections.singletonList( Prompt.builder() .withId("explicit.confirmation") .withVariations(new ArrayList<>(confirmations)) .build() ));
assertFalse(resolver.resolve(input).isPresent());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(0, new TypeReflector<>(NoGetter.class).getPropertyDescriptors().size());
assertSame(envelope.getRequest(), resolver.resolve(input).get());
assertEquals(expected, actual);
assertSame(envelope.getSession().getAttributes(), resolver.resolve(input).get());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertNotEquals(null, intent1); assertNotEquals(intent1, null); assertNotEquals(intent1, "differentClass"); assertNotEquals("differentClass", intent1);
assertEquals(MappingsController.PetType.DRAGON, resolver.resolve(input).get());
assertEquals(expected, actual);
assertEquals("hola", resolver.resolve(input).get());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(actualPrompt, expectedPrompt); assertEquals(actualIntent.getPrompts().getConfirmation(), "testIntentConfirmation"); assertEquals(actualIntent.getConfirmationRequired(), true);
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(date1, date2); assertEquals(date1.getDate(), date2.getDate()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(date1, date2); assertEquals(date1.getNumber(), date2.getNumber()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertEquals(Locale.JAPAN, resolver.resolve(input).get());
assertFalse(resolver.resolve(input).isPresent());
assertEquals(left, left); assertEquals(left.hashCode(), left.hashCode());
assertEquals(prompts, Collections.singletonList( Prompt.builder() .withId("Confirm.Intent-intent_name.IntentSlot-slot_name") .withVariations(new ArrayList<>(confirmations)) .build() ));
assertEquals( "Elicit.Intent-intent_name.IntentSlot-slot_name", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getPrompts().getElicitation() );
assertFalse(underTest.canHandle(mockInput));
assertEquals(expected, actual);
assertTrue(underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getElicitationRequired()); assertFalse(underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getElicitationRequired());
assertEquals(left, right); assertEquals(left.getTime(), right.getTime()); assertEquals(left.getSlot(), right.getSlot()); assertEquals(left.hashCode(), right.hashCode()); assertEquals(left.toString(), right.toString());
assertSame(envelope.getSession(), resolver.resolve(input).get());
assertEquals(prompts, Collections.singletonList( Prompt.builder() .withId("explicit.elicitation") .withVariations(new ArrayList<>(elicitations)) .build() ));
assertFalse(RequiredFlag.choose(false, null)); assertFalse(RequiredFlag.choose(false, false)); assertTrue(RequiredFlag.choose(false, true));
assertEquals(String.class, new TypeReflector<>(TestClass.class).reifyPropertyType("value"));
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertTrue(resolved instanceof ServiceClientFactory); assertSame(factory, resolved);
assertEquals(Optional.empty(), underTest.renderDialogIntent(intent, IntentData.builder().build())); assertEquals(Optional.empty(), underTest.renderDialogIntent( intent, IntentData.builder().addSlot("slot_name", IntentSlotData.builder().build()).build()));
assertSame(((IntentRequest) envelope.getRequest()).getIntent(), resolver.resolve(input).get());
assertFalse(resolver.resolve(input).isPresent());
assertTrue(resolver.resolve(input).isPresent());
assertEquals(date1, date2); assertEquals(date1.getWeek(), date2.getWeek()); assertEquals(date1.getYear(), date2.getYear()); assertEquals(date1.getSlot(), date2.getSlot()); assertEquals(date1.hashCode(), date2.hashCode()); assertEquals(date1.toString(), date2.toString());
assertNotEquals(left, right); assertNotEquals(left.hashCode(), right.hashCode());
assertEquals(0, underTest.renderSlotPrompts(mockIntentDefinition, "slot_name", mockSlotMetadata).size());
assertFalse(resolver.resolve(input).isPresent());
assertEquals(test, test); assertEquals(test.hashCode(), test.hashCode());
assertEquals(actualPrompt, expectedPrompt); assertEquals(actualIntent.getPrompts().getConfirmation(), "Confirm.Intent-TestIntent"); assertEquals(actualIntent.getConfirmationRequired(), true);
assertEquals(TestApplication.class, skillModelSupplier.getClass()); assertEquals(new File("destdir"), destdir); assertEquals(Arrays.asList(Locales.en_US, Locales.fr_FR), locales);
assertNotEquals(model, null);
assertEquals(Arrays.asList("merged", "merged2", "test_en_US"), intent.getSamples());
assertEquals(test, IntentSlotData.builder().merge(test).merge(test).build());
assertFalse(resolver.resolve(input).isPresent());
assertTrue(resolver.resolve(input).get() instanceof ResponseBuilder);
assertFalse(resolver.resolve(input).isPresent());
assertEquals("Test", new TypeReflector<>(TestClass.class).getAnnotation("value", PropertyAnnotation.class).value());
assertFalse(resolver.resolve(input).isPresent());
assertNotSame(handlerInput.getResponseBuilder(), resolved); assertNotSame(secondResolved, resolved);
assertEquals( "slot_name", underTest.renderDialogSlot(mockIntentDefinition, "slot_name", mockSlotTypeDefinition, mockSlotMetadata).getName());
assertNotNull(arg.getValue().timer); assertSame(runnable, arg.getValue().task);
assertEquals(2, sessionConfiguration.getSessionTracking().length); assertEquals("COOKIE", sessionConfiguration.getSessionTracking()[0]); assertEquals("URL", sessionConfiguration.getSessionTracking()[1]);
assertEquals(wrappedHttpRequestWrapper, req.getEmbeddedRequest()); assertEquals(wrappedComplex, req.getRequest());
assertEquals(1, sessionConfiguration.getSessionTracking().length); assertEquals("DEFAULT", sessionConfiguration.getSessionTracking()[0]);
assertEquals("value", rbs.getAttribute("Test"));
assertNotNull(configuration); assertEquals("my-context", configuration.getNamespace());
assertEquals(sc, configuration);
assertFalse(rbs.isValid());
assertNull(provider.readId("ABCDEFG")); assertNull(provider.readId("")); assertNull(provider.readId(null)); assertEquals("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE", provider.readId("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE"));
assertTrue("Expecting instance of UrlSessionTracking", tracking instanceof UrlSessionTracking); assertTrue("Expecting instance of CookieSessionTracking", tracking instanceof CookieSessionTracking); assertTrue("Expecting instance of CookieSessionTracking", tracking instanceof CookieSessionTracking); assertNull(tracking);
assertThat(result, instanceOf(EnahceAddListener.class)); assertThat(result, instanceOf(EnahceAddListener.class)); assertThat(result, instanceOf(EnahceAddListener.class));
assertEquals(SessionConfiguration.DEFAULT_SESSION_TIMEOUT_VALUE_NUM, sc.getMaxInactiveInterval());
assertEquals("com.amadeus.session.repository.inmemory.InMemoryRepository", repository.getClass().getName());
assertEquals(1, sessionConfiguration.getSessionTracking().length); assertEquals("URL", sessionConfiguration.getSessionTracking()[0]);
assertFalse(rbs.replicateOnGet("String")); assertFalse(rbs.replicateOnGet(this)); assertFalse(rbs.replicateOnGet("String")); assertTrue(rbs.replicateOnGet(this));
assertNotNull(result); assertNotSame(request, result); assertSame(reWrappedRequest, result);
assertSame(expected, result);
assertEquals("prefixexpirations:120000", SafeEncoder.encode(captureExpireKey.getValue()));
assertEquals(ReplicationTrigger.SET, sc.getReplicationTrigger());
assertEquals(56, provider.newId().length()); assertThat(provider.newId(), RegexMatchers.matchesPattern("[A-Za-z0-9_\\\\-]{56}"));
assertEquals(60, provider.newId().length()); assertEquals("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEabcde_____1234567890", provider.readId("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEabcde_____1234567890"));
assertEquals(1, metrics.meter(MetricRegistry.name(SessionManager.SESSIONS_METRIC_PREFIX, "deleted")).getCount());
assertTrue(rf.supportsMultiSpop());
assertEquals("prefixexpirations:60000", SafeEncoder.encode(captureExpireKey.getValue())); assertEquals("key:{1}", SafeEncoder.encode(captureSessionKey.getValue()));
assertNotNull(result); assertSame(request, result);
assertNull(provider.readId("ABCDEFG")); assertNull(provider.readId("")); assertNull(provider.readId(null)); assertEquals("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE", provider.readId("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE"));
assertNotNull(result); assertNotSame(request, result); assertTrue(result instanceof HttpRequestWrapper);
assertSame(writer1, writer2);
assertSame(stream1, stream2);
assertTrue("Expecting instance of CookieSessionTracking", tracking instanceof CookieSessionTracking); assertTrue("Expecting instance of UrlSessionTracking", tracking instanceof UrlSessionTracking); assertTrue("Expecting instance of CookieSessionTracking", tracking instanceof CookieSessionTracking); assertTrue(tracking instanceof CookieSessionTracking);
assertEquals("com.amadeus.session.repository.inmemory.InMemoryRepository", repository.getClass().getName());
assertFalse(rf.supportsMultiSpop());
assertNull(retrievedSession);
assertEquals(40, provider.newId().length()); assertThat(provider.newId(), RegexMatchers.matchesPattern("[A-Za-z0-9_\\\\-]{40}"));
assertTrue(tracking.newId().indexOf("!") > 0); assertTrue(tracking.newId().indexOf("!") < 0);
assertEquals("Session id in Logging MDC is wrong", "new-id", MDC.get(configuration.getLoggingMdcKey())); assertSame(session, retrievedSession); assertEquals(1, metrics.meter(MetricRegistry.name(SessionManager.SESSIONS_METRIC_PREFIX, "created")).getCount());
assertEquals(0, sessionConfiguration.getMaxInactiveInterval());
assertThat(facade, instanceOf(JedisPoolFacade.class));
assertEquals(1, sessionConfiguration.getSessionTracking().length); assertEquals("URL", sessionConfiguration.getSessionTracking()[0]);
assertThat(facade, instanceOf(JedisPoolFacade.class));
assertEquals("prefixexpirations:60000", SafeEncoder.encode(captureExpireKey.getValue())); assertEquals("key:{1}", SafeEncoder.encode(captureSessionKey.getValue())); assertEquals("com.amadeus.session:expire::test:{1}", SafeEncoder.encode(captureSessionExpireKey.getValue()));
assertNull(retrievedSession);
assertNotNull(captor.getValue().timer);
assertEquals("com.amadeus.session:expire::test:{1}", SafeEncoder.encode(captureKey.getValue())); assertArrayEquals(SafeEncoder.encode("key:{1}"), captureKey2.getValue()); assertEquals("prefix:expirations:60000", SafeEncoder.encode(captureKey.getValue())); assertEquals("key:{1}", SafeEncoder.encode(captureSessionKey.getValue()));
assertThat(names, hasItems("Test", "Test2"));
assertFalse(rf.supportsMultiSpop());
assertEquals(NEW_SESSION_ID, session2.getId());
assertEquals(3, sc.getNonCacheable().size()); assertTrue(sc.getNonCacheable().contains("a")); assertTrue(sc.getNonCacheable().contains("b")); assertTrue(sc.getNonCacheable().contains("c")); assertFalse(sc.getNonCacheable().contains("a,b,c"));
assertThat(result, not(instanceOf(EnahceAddListener.class))); assertThat(result, not(instanceOf(EnahceAddListener.class))); assertThat(result, not(instanceOf(EnahceAddListener.class)));
assertNotNull(sessionManager.getValue());
assertEquals(1, hostsAndPorts.size()); assertEquals("127.0.0.1", hostsAndPorts.iterator().next().host);
assertEquals("200", System.getProperty(SessionAgent.SESSION_TIMEOUT)); assertEquals("timeout=200,provider=redis", System.getProperty(SessionAgent.REPOSITORY_CONF_PROPERTY)); assertEquals("redis", System.getProperty(SessionAgent.SESSION_FACTORY)); assertNull(System.getProperty(SessionAgent.SESSION_DISTRIBUTABLE)); assertNull(System.getProperty(SessionAgent.SESSION_MANAGEMENT_DISABLED));
assertTrue(repository.cleanSessionsOnShutdown());
assertNull(req.getEmbeddedRequest()); assertEquals(wrappedSimple, req.getRequest()); assertEquals(servletContext, req.getServletContext()); assertEquals(sessionManager, req.getManager());
assertEquals("COOKIE", sessionConfiguration.getSessionTracking()[0]); assertEquals("true", sessionConfiguration.getAttribute(CookieSessionTracking.COOKIE_HTTP_ONLY_PARAMETER, null)); assertEquals("false", sessionConfiguration.getAttribute(CookieSessionTracking.SECURE_COOKIE_PARAMETER, null)); assertEquals("/test", sessionConfiguration.getAttribute(CookieSessionTracking.COOKIE_CONTEXT_PATH_PARAMETER, null));
assertEquals("somesession", cookie.getValue().getName()); assertEquals("123", cookie.getValue().getValue()); assertEquals(-1, cookie.getValue().getMaxAge()); assertEquals(COOKIE_PATH_TEST, cookie.getValue().getPath());
assertEquals("Session id in Logging MDC is wrong", "47", MDC.get(configuration.getLoggingMdcKey()));
assertTrue(req.isRequestedSessionIdFromCookie()); assertFalse(req.isRequestedSessionIdFromURL()); assertFalse(req.isRequestedSessionIdFromUrl());
assertEquals(1800, sessionConfiguration.getMaxInactiveInterval()); assertFalse(sessionConfiguration.isDistributable());
assertEquals(60, provider.newId().length()); assertEquals("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEabcde_____1234567890", provider.readId("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEabcde_____1234567890"));
assertEquals(100, sc.getMaxInactiveInterval());
assertEquals(0L, NotificationExpirationManagement.roundDownMinute(1234L)); assertEquals(0L, NotificationExpirationManagement.roundDownMinute(12345L)); assertEquals(60000L, NotificationExpirationManagement.roundDownMinute(62000L));
assertEquals(0, metrics.meter(MetricRegistry.name(SessionManager.SESSIONS_METRIC_PREFIX, "deleted")).getCount());
assertTrue(RepositoryBackedSession.isImmutableType("")); assertTrue(RepositoryBackedSession.isImmutableType(Boolean.FALSE));
assertEquals(SessionConfiguration.DEFAULT_REPLICATION_TRIGGER, sc.getReplicationTrigger());
assertThat(result, not(instanceOf(EnahceAddListener.class))); assertThat(result, not(instanceOf(EnahceAddListener.class))); assertThat(result, not(instanceOf(EnahceAddListener.class)));
assertArrayEquals(sticky.getSessionExpireKey("10"), sticky.getSessionExpireKey("this", "10"));
assertEquals(1, s.size()); assertEquals("A", s.toArray()[0]);
assertEquals(null, serializer.deserialize(serializedNull)); assertEquals("String", serializer.deserialize(serializedString)); assertEquals(now, serializer.deserialize(serializedDate));
assertEquals(null, serializer.deserialize(null)); assertEquals("String", serializer.deserialize(serializedString));
assertNull(req.getEmbeddedRequest()); assertEquals(wrappedComplex, req.getRequest());
assertEquals(500, pool.getMaxTotal());
assertNull(rbs.getAttribute("Test"));
assertTrue(rbs.isExpired());
assertEquals(SESSION_ID, id);
assertThat(repository.getOwnedSessionIds(), not(hasItem("test"))); assertThat(repository.getOwnedSessionIds(), hasItem("test")); assertThat(repository.getOwnedSessionIds(), not(hasItem("test2"))); assertThat(repository.getOwnedSessionIds(), not(hasItem("test")));
assertSame(responseWrapped, result);
assertNull("Session id shouldn\'t be in logging MDC", MDC.get(configuration.getLoggingMdcKey())); assertNull(retrievedSession);
assertEquals(1, sentinels.size()); assertEquals("localhost", sentinels.iterator().next());
assertFalse(rbs.isExpired());
assertEquals("com.amadeus.session::myapp:{test}", encode(rsr.getSessionKey(encode("test"))));
assertFalse(req.isRequestedSessionIdFromCookie()); assertTrue(req.isRequestedSessionIdFromURL()); assertTrue(req.isRequestedSessionIdFromUrl());
assertEquals(1, sc.getTrackerInterval());
assertEquals(1800, sessionConfiguration.getMaxInactiveInterval()); assertTrue(sessionConfiguration.isDistributable());
assertThat(captured, hasItem("prefix:forced-expirations:120000")); assertThat(captured, hasItem("key:{1}"));
assertEquals(now, serializer.deserialize(serializedDate));
assertNotNull(node); assertEquals("test", node); assertEquals(System.getenv("COMPUTERNAME"), node); assertEquals(System.getenv("HOSTNAME"), node);
assertEquals(1800, sessionConfiguration.getMaxInactiveInterval());
assertFalse(RedisSessionRepository.hasInternalPrefix(encode("test"))); assertTrue(RedisSessionRepository.hasInternalPrefix(encode("#:test"))); assertFalse(RedisSessionRepository.hasInternalPrefix(encode("#:"))); assertFalse(RedisSessionRepository.hasInternalPrefix(encode("#test"))); assertTrue(RedisSessionRepository.hasInternalPrefix(encode("#:t")));
assertEquals(10, responseWrapper.contentLength);
assertEquals(hash("1", 100L, 200), hash("1", 100L, 300)); assertNotEquals(hash("1", 100L, 200), hash("2", 100L, 300)); assertNotEquals(hash("1", 100L, 200), hash("1", 200L, 300));
assertTrue(rbsExpired.isExpired()); assertFalse(rbsNotExpired.isExpired()); assertFalse(rbsNeverExpires.isExpired());
assertTrue(rf.supportsMultiSpop());
assertEquals(2, hostsAndPorts.size()); assertEquals("1.2.3.4", asList.get(0).host); assertEquals(2, asList.get(0).port); assertEquals("5.6.7.8", asList.get(1).host); assertEquals(6379, asList.get(1).port);
assertNull(provider.readId("ABCDEFG")); assertNull(provider.readId("")); assertNull(provider.readId(null)); assertEquals(uuid.toString(), provider.readId(uuid.toString()));
assertEquals(10, responseWrapper.contentLength);
assertEquals(40, provider.newId().length()); assertThat(provider.newId(), RegexMatchers.matchesPattern("[A-Za-z0-9_\\\\-]{40}"));
assertEquals(1, sc.getTrackerLimits());
assertEquals(1000, sessionConfiguration.getMaxInactiveInterval());
assertEquals(null, id);
assertEquals(56, provider.newId().length()); assertThat(provider.newId(), RegexMatchers.matchesPattern("[A-Za-z0-9_\\\\-]{56}"));
assertNotNull(result); assertNotSame(request, result); assertTrue(result instanceof HttpRequestWrapper);
assertThat(repository.getOwnedSessionIds(), not(hasItem("test")));
assertEquals(36, provider.newId().length()); assertThat(provider.newId(), RegexMatchers.matchesPattern("[a-f0-9\\\\-]{36}"));
assertThat(list, hasItems("Test", "TestChanged")); assertThat(list, not(hasItems("TestToDelete")));
assertNotNull(arg.getValue().timer); assertSame(runnable, arg.getValue().task);
assertNotNull(result); assertSame(request, result); assertTrue(result instanceof HttpRequestWrapper);
assertTrue(arg.getValue().containsKey("redis")); assertEquals(JedisSessionRepositoryFactory.class.getName(), arg.getValue().get("redis")); assertTrue(arg.getValue().containsKey("in-memory")); assertEquals(InMemoryRepositoryFactory.class.getName(), arg.getValue().get("in-memory"));
assertNotNull(repository.getSessionAttribute(sessionData2, "name")); assertNull(repository.getSessionAttribute(sessionDataOrig, "name"));
assertEquals("Short comment not as expected", resp.getCommitShortComment(), "Making a first test commit"); assertEquals("", 1, resp.getFilesChanged()); assertEquals("", 0, resp.getLinesDeleted()); assertEquals("", 1, resp.getLinesInserted());
assertEquals("Wrong name for new branch, ", TEST_BRANCH, branchNameNoQuotes);
assertEquals("File to commit", 1, statusResponse.getNewFilesToCommitSize()); assertEquals("Wrong path, ", repoDirectory.getAbsolutePath() + File.separator + "file A.txt",statusResponse.getNewFilesToCommit().iterator().next().getAbsolutePath() );
assertEquals("No of deleted files not equal", 1, status.getDeletedFilesToCommitSize()); assertEquals("No of deleted files not equal", 1, status.getDeletedFilesNotUpdatedSize());
assertTrue(checkedOutFile.exists()); assertEquals("Modified File exists", 1, response.getNumberOfModifiedFiles());
assertFalse(file3.exists());
assertEquals(62, dtos.size()); assertEquals(10512, dtos.get(0).data().length);
assertEquals(49, variables.size());
assertEquals(1, dtos.size()); assertEquals(10368, dtos.get(0).data().length);
assertTrue(grid.startTime().isEqual(ZonedDateTime.of(1983, 12, 31, 23, 0, 0, 0, ZoneId.of("UTC")))); assertTrue(grid.endTime().isEqual(ZonedDateTime.of(1984, 1, 1, 0, 0, 0, 0, ZoneId.of("UTC"))));
assertTrue(grid.startTime().isEqual(ZonedDateTime.of(1984, 1, 1, 0, 0, 0, 0, ZoneId.of("UTC")))); assertTrue(grid.endTime().isEqual(ZonedDateTime.of(1984, 1, 1, 0, 0, 0, 0, ZoneId.of("UTC"))));
assertEquals(365, dtos.size()); assertEquals(259200, dtos.get(0).data().length);
assertEquals(2, variables.size());
assertEquals(ZonedDateTime.of(2020, 3, 1, 0, 0, 0, 0, ZoneId.of("Z")), vortexGrid.startTime()); assertEquals(ZonedDateTime.of(2020, 3, 2, 0, 0, 0, 0, ZoneId.of("Z")), vortexGrid.endTime());
assertEquals(1, direction);
assertTrue(ReferenceUtils.isShg(info));
assertEquals(1, dtos.size()); assertEquals(32768, dtos.get(0).data().length);
assertTrue(variables.contains("Total_precipitation_surface_1_Hour_Accumulation")); assertEquals(2, variables.size());
assertTrue(isContained); assertEquals(9, gridCells.size());
assertFalse(ReferenceUtils.isShg(info));
assertEquals(365, dtos.size()); assertEquals(259200, dtos.get(0).data().length);
assertTrue(wkt.contains("USA_Contiguous_Albers_Equal_Area_Conic_USGS_version"));
assertTrue(ReferenceUtils.isShg(info));
assertEquals(1, direction);
assertEquals(66.21134185791016, max, 1E-5); assertEquals(0.04108993336558342, min, 1E-5);
assertTrue(grid.startTime().isEqual(ZonedDateTime.of(2010, 2, 28, 12, 0, 0, 0, ZoneId.of("UTC")))); assertTrue(grid.endTime().isEqual(ZonedDateTime.of(2010, 3, 1, 12, 0, 0, 0, ZoneId.of("UTC"))));
assertEquals("tavern", config.getName()); assertEquals("classpath*:spring/appcontext-*.xml", config.getContextPath()); assertEquals("com.dianping.tavern", config.getPackageBase()); assertNull(config.getParent());
assertNotNull(bean); assertNotNull(bean);
assertThat(facesMessages).isEqualTo(singletonList(message));
assertThat(reservation).isNotNull(); assertThat(reservation.getReservationNumber()).isNotNull();
assertNull(new LocalDateTimeConverter().convertToEntityAttribute(null));
assertThat(new ServiceRegistration().getAddNewReservationUrl()).isNotEmpty();
assertThat(value).isEmpty();
assertThat(generatedjson, is(equalTo(JSON)));
assertThat(guest.getId()).isNotNull();
assertThat(notAuditable.lastUpdate).isNotNull(); assertThat(notAuditable.lastUpdate).isEqualTo(NOW);
assertThat(date, is(equalTo(Date.valueOf(localDate))));
assertTrue(Stream.of(stackTrace) .filter(s -> s.contains("BOOM")) .findAny() .isPresent()); assertTrue(stackTrace.contains("foo"));
assertThat(auditable.lastUpdate).isNotNull(); assertThat(auditable.lastUpdate.getTime()).isGreaterThan(NOW.getTime());
assertThat(rate).isEqualTo(BigDecimal.valueOf(240L));
assertThat(new GuestFeedSubscriber().determineGuestHostAndPort()).isEqualTo("localhost:8080");
assertNull(new LocalDateConverter().convertToDatabaseColumn(null));
assertThat(guest.getLastUpdate()).isNotNull();
assertThat(value).isSameAs(CANCELED);
assertNotNull(bean.getBooking());
assertThat(serviceRegistration.getAddNewReservationUrl()).isNull();
assertThat(guestService.deleteGuest(randomUUID().toString())).isFalse();
assertThat(allReservations).isNotNull();
assertThat(new GuestFeedSubscriber().determineGuestHostAndPort()).isEqualTo(expectedConfig);
assertThat(localDate).isNull();
assertThat("foo bar", is(equalTo(guest.getName()))); assertThat("bratzen@putz.de", is(equalTo(guest.getEmail())));
assertThat(timestamp, is(equalTo(Timestamp.valueOf(localDate))));
assertThat(result.isPresent()).isFalse();
assertThat(localDate).isEqualTo(LocalDate.of(2012, APRIL, 5));
assertNull(new LocalDateTimeConverter().convertToDatabaseColumn(null));
assertThat(facesMessages).isEqualTo(emptyList());
assertNull(new LocalDateConverter().convertToEntityAttribute(null));
assertThat(value).isNull();
assertThat(w.toString()).startsWith("<?xml");
assertThat(value).isEqualTo("");
assertThat(value).isEqualTo("2012-04-03");
assertThat(value).isEqualTo(CANCELED.name());
assertThat(guestService.getAllGuests()).isNotNull();
assertThat(fromJson.getGuest(), is(equalTo(12L))); assertThat(fromJson.getRoom(), is(equalTo("abc"))); assertThat(fromJson.getCheckin(), is(equalTo(LocalDate.of(2014, Month.NOVEMBER, 25)))); assertThat(fromJson.getCheckout(), is(equalTo(LocalDate.of(2014, Month.NOVEMBER, 25))));
assertThat(localDate, is(equalTo(LocalDate.of(2012, FEBRUARY, 12))));
assertThat(localDate).isNull();
assertEquals(22.0, Utils.getDimenFromString("22dip"), 0); assertEquals(1.5f, Utils.getDimenFromString("1.5dp"), 0); assertEquals(0.7f, Utils.getDimenFromString("0.7sp"), 0); assertEquals(2f, Utils.getDimenFromString("2in"), 0); assertEquals(22f, Utils.getDimenFromString("22px"), 0);
assertNotNull(response);
assertNotNull(schema); assertTrue(member.getIsReference());
assertNotNull(extendedClass); assertEquals(3, fields.size());
assertNotNull(schema); assertTrue(schema.getVersion().getName() .contains("#versionname#"));
assertTrue(itr.next().isClass()); assertTrue(class1.getName().contains("TeslaClass")); assertTrue(((Field) field).getIsOptional());
assertArrayEquals(new byte[] { (byte) 0x90, 0x78, 0x45, 0x23, 0x01, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB }, BitConverter.getBytes(0xABCDEF0123457890L));
assertNotSame(schema.getVersion().getSchemaHash(), schema2 .getVersion().getSchemaHash());
assertNotNull(schema); assertTrue(schema.getVersion().getVersionNumber() == 0);
assertTrue(types.iterator().next().isClass()); assertTrue(class1.getName().contains("TeslaClass")); assertTrue(((Field) field).getIsArray()); assertEquals(2, ((Field) field).getRank());
assertTrue(types.iterator().next().isClass()); assertNotNull(field); assertEquals(fieldName, field.getName()); assertEquals(expectedTypeList[i], field.getType());
assertNotNull(schema); assertEquals("My", schema.getUserTypes().iterator().next() .getNameSpace());
assertEquals( 0xABCDEF0123457890L, BitConverter.toInt64(new byte[] { (byte) 0x90, 0x78, 0x45, 0x23, 0x01, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB }, 0));
assertTrue(types.iterator().next().isClass()); assertEquals("FieldDisplayName", fields.get(0).getDisplayName());
assertNotNull(schema); assertTrue(schema.getVersion().getVersionNumber() > 1);
assertNotNull(extendedClass); assertEquals(2, fields.size());
assertNotNull(schema); assertTrue(types.iterator().next().isEnum()); assertNotNull(enumType); assertEquals(3, enumEntries.size()); assertEquals(i-1, enumEntry.getValue());
assertEquals("home", result); assertEquals("data", modelData);
assertNull(newUser);
assertNotNull(result); assertTrue(result.contains(CtxController.INTRO));
assertNull(newUser);
assertNotNull(users); assertEquals(2, users.size()); assertEquals(Long.valueOf(0), users.get(0).getId()); assertEquals("users/list", viewName);
assertEquals(aiOut.getDigits(), "9023629581");
assertThat(testee.bazMethod(), is(6));
assertThat(testee.fooMethod(), is(7));
assertThat(testee.conditionedBarMethod(true), is("6jacoco"));
assertEquals(DEFAULT_AMQP_REMOTE_URL, properties.getRemoteUrl());
assertEquals(1, policy.getWhiteList().length());
assertEquals("org.apache.qpid.proton.*", policy.getWhiteList()); assertEquals("org.apache.activemq..*", policy.getBlackList());
assertEquals(0, policy.getBlackList().length());
assertFalse(properties.getPool().isEnabled());
assertNull(properties.getClientId());
assertEquals(0, modifications.size());
assertEquals(new File("ivy.xml").getAbsolutePath(), ivy.getIvyXml());
assertEquals(new File("ivysettings.xml").getAbsolutePath(), ivy.getIvySettings());
assertEquals("someproject successful", proxy.status);
assertFalse("Generic ScriptRunner should not have created AntOuputLogger file: " + expectedAntBuilderLog.getAbsolutePath(), expectedAntBuilderLog.exists());
assertEquals(0, ivy.getModifications(null, artifacts).size());
assertTrue(validate.called);
assertNotNull(testProject.getProgress()); assertNotNull(testProject.getProgress().getValue());
assertTrue("loop counts should have been different when not paused", firstLoopCount != secondLoopCount); assertEquals("loop counts should be same when paused", firstLoopCount, secondLoopCount); assertTrue("loop count increased after pause ended", lastLoopCount > secondLoopCount);
assertEquals(publicationDate, mods.get(0).getModifiedTime());
assertEquals(1, mockProject.getLoopCount()); assertEquals(1, mockProject.getLoopCount()); assertEquals(2, mockProject.getLoopCount());
assertTrue(cmdLine.called); assertTrue(cmdLine.with.contains("-target target"));
assertEquals("xcodebuild", cmdLine.getExecutable());
assertThat(svn.getProperties().get("hasDeletions?"), nullValue()); assertThat(svn.getProperties().get("hasDeletions?"), nullValue()); assertThat(svn.getProperties().get("hasDeletions?"), equalTo("true"));
assertTrue(Project.needToWaitForNextBuild(1)); assertFalse(Project.needToWaitForNextBuild(0)); assertFalse(Project.needToWaitForNextBuild(-1));
assertTrue(listener.wasNotified());
assertEquals(1, mockProject.getLoopCount()); assertEquals(1, mockProject.getLoopCount()); assertEquals(2, mockProject.getLoopCount());
assertEquals("someproject fixed", proxy.status);
assertThat("Windows SVN date format does not match", SVN.formatSVNDate(date, true), equalTo("\\"{2007-07-11T12:32:45Z}\\"")); assertThat("non-Windows SVN date format does not match", SVN.formatSVNDate(date, false), equalTo("{2007-07-11T12:32:45Z}"));
assertEquals(modifications, project.getModifications(false)); assertEquals(modifications, project.getModifications(true)); assertEquals(null, project.getModifications(false)); assertEquals(modifications, project.getModifications(true));
assertEquals(2, publisher.getPublishCount());
assertNull(e);
assertEquals("someproject failed", proxy.status);
assertEquals(false, project.checkOnlySinceLastBuild()); assertEquals(false, project.checkOnlySinceLastBuild()); assertEquals(true, project.checkOnlySinceLastBuild()); assertEquals(false, project.checkOnlySinceLastBuild()); assertEquals(false, project.checkOnlySinceLastBuild());
assertEquals(null, svn.getProperties().get("hasChanges?")); assertThat(properties.get("hasChanges?"), equalTo("true")); assertThat(properties.get("svnrevision"), equalTo("663"));
assertFalse(outputLog.exists()); assertFalse("LiveOutput log should be cleared at end of script run: " + outputLog.getAbsolutePath(), outputLog.exists()); assertTrue("buildOutputLogger id should change due to clear() at end of script run. origId: " + origId + "; current Id: " + currentId, currentId.startsWith(origId) && (currentId.length() > origId.length()));
assertEquals("Project foo: stopped", project.toString()); assertEquals("Project foo: stopped (paused)", project.toString());
assertThat(actualCmd, equalTo(expectedCmd)); assertThat(actualCmd, equalTo(expectedCmd));
assertEquals(lastBuild, project.getLastBuild());
assertEquals(projectName + " successful", proxy.status);
assertNull(e);
assertEquals(0, secondRun.size());
assertEquals(helloWorld.helloMessage(), "Well hi there");
assertArrayEquals(new String[] {}, cmdLine.getArguments());
assertEquals(artifactId.toString(), mods.get(0).getRevision());
assertEquals("", textInstructions.laneConfig(new LegStep(Collections.singletonList( new StepIntersection(new IntersectionLanes[] {})))));
assertEquals("1st", textInstructions.ordinalize(1)); assertEquals("", textInstructions.ordinalize(999));
assertEquals("", textInstructions.directionFromDegree(361.));
assertEquals("Mapbox", TextInstructions.capitalizeFirstLetter("mapbox"));
assertNotNull(textInstructions.getVersionObject());
assertEquals(Opcodes.ASM7, AsmApi.value());
assertEquals("text/html", wrapper.getContentType());
assertNotNull(context.lookupLink("name"));
assertTrue(response.getStatus() != 200);
assertEquals(0, sessionManager.getMaxAge()); assertEquals(60, sessionManager.getMaxAge());
assertNotNull(webApp.getAttribute("contextDestroyed"));
assertEquals(1, environment.getLoadOnStartup());
assertNotNull(wrapped.getCookies()); assertFalse(wrapped.getCookies().isEmpty());
assertNull(cookie.getDomain()); assertEquals("domain", cookie.getDomain());
assertNotNull(webApp.getAttribute("name")); assertNull(webApp.getAttribute("name"));
assertEquals(1, DriverManager.getDriver("jdbc:environment:0").getMajorVersion());
assertNotNull(session.getServletContext());
assertEquals("ECHO", new String(response.getResponseBytes()));
assertNotEquals("/defaultContextPath", webXml.getDefaultContextPath()); assertFalse(webXml.getDenyUncoveredHttpMethods()); assertNotEquals("myServletContextName", webXml.getDisplayName()); assertFalse(webXml.isDistributable()); assertNotEquals("UTF-8", webXml.getResponseCharacterEncoding());
assertFalse(enumeration.hasMore());
assertNull(manager.getHeader("NAME"));
assertEquals(-1, wrapper.getContentLength());
assertEquals(2, webXml.getWelcomeFiles().size()); assertEquals("index.html", webXml.getWelcomeFiles().get(0)); assertEquals("default.jsp", webXml.getWelcomeFiles().get(1));
assertEquals(ServletSecurity.EmptyRoleSemantic.PERMIT, element.getEmptyRoleSemantic()); assertNotNull(element.getHttpMethodConstraints()); assertEquals("HEAD", element.getHttpMethodConstraints().iterator().next().getMethodName());
assertEquals("value", event.getValue());
assertEquals(0, cookie.getVersion()); assertEquals(10, cookie.getVersion());
assertNotNull(context.composeName(new CompositeName("name"), new CompositeName("")));
assertNotNull(element.getHttpMethodConstraints()); assertNotNull(element.getHttpMethodConstraints());
assertEquals(10, sessionManager.getSessionTimeout()); assertEquals(5, sessionManager.getSessionTimeout());
assertTrue(file.exists()); assertEquals("text/html", part.getContentType());
assertNotNull(manager.getHeaders("NAME")); assertFalse(manager.getHeaders("NAME").hasMoreElements());
assertNotNull(event.getAsyncContext());
assertNotNull(webApp.getClassLoader()); assertNull(webApp.getClassLoader());
assertEquals(1000, element.getMaxFileSize());
assertEquals("name", event.getName());
assertNotNull(piranha.getWebApplication().getAttribute(TestInitializer.class.getName()));
assertEquals("url", wrapper.encodeURL("url"));
assertFalse(sessionManager.isSecure()); assertTrue(sessionManager.isSecure());
assertNotNull(DriverManager.getDriver("jdbc:property:0").getPropertyInfo("jdbc:property:0", new Properties()));
assertEquals(200, wrapper.getStatus());
assertNotNull(context.getNameParser(new CompositeName()));
assertTrue(exception.isPermanent());
assertNotNull(enumeration.next());
assertNull(exception.getRootCause());
assertEquals("0", wrapped.getHeader("date"));
assertNotNull(wrapper.getHeaders("int")); assertEquals(1, wrapper.getHeaders("int").size());
assertNotNull(webApp.getAttributeNames());
assertTrue(responseText.contains("ECHO"));
assertTrue(result.isEmpty()); assertFalse(filters.isEmpty());
assertNotNull(webApp.getHttpSessionManager());
assertTrue(session.getCreationTime() > 0); assertTrue(session.getLastAccessedTime() >= session.getCreationTime());
assertNotNull(resource.getRootDirectory());
assertNotNull(resource.getRootDirectory());
assertNull(manager.getResource("/doesnotexist"));
assertNotNull(DriverManager.getDriver("jdbc:property:0"));
assertEquals("test", sessionManager.encodeURL(null, "test"));
assertEquals(1000, element.getFileSizeThreshold());
assertTrue(manager.getDateHeader("NAME") > 0);
assertEquals(1000, session.getMaxInactiveInterval());
assertNull(session.getSessionContext());
assertTrue(webApp.getEffectiveSessionTrackingModes().contains(SessionTrackingMode.URL));
assertEquals(0, webApp.getMinorVersion());
assertNotNull(enumeration);
assertEquals("value", outputStream.toString());
assertNull(wrapper.getAsyncContext());
assertEquals("0", wrapped.getHeader("date"));
assertEquals(4, webApp.getEffectiveMajorVersion());
assertEquals("value", wrapped.getHeader("header"));
assertEquals("127.0.0.1", wrapper.getLocalAddr());
assertTrue(webApp.setInitParameter("name", "value")); assertFalse(webApp.setInitParameter("name", "value"));
assertNull(webApp.getJspConfigDescriptor());
assertNull(cookie.getPath()); assertEquals("path", cookie.getPath());
assertEquals("test", sessionManager.encodeRedirectURL(null, "test"));
assertEquals(404, response.getStatus());
assertEquals(0, DriverManager.getDriver("jdbc:environment:0").getMinorVersion());
assertNotNull(context.lookup(name));
assertNull(webApp.getContext("/does_not_matter"));
assertEquals(302, wrapper.getStatus());
assertNotNull(wrapper.getAttributeNames());
assertEquals("0", wrapped.getHeader("date"));
assertNull(webApp.getRealPath("index.html"));
assertNull(webApp.getResourcePaths("/this_will_be_null/")); assertNull(webApp.getResourcePaths(null));
assertEquals("ECHO", new String(response.getResponseBytes()));
assertEquals(-1, manager.getDateHeader("NAME"));
assertEquals("ID", session.getId());
assertNotNull(webApp.getNamedDispatcher("Snoop"));
assertFalse(environment.isAsyncSupported()); assertTrue(environment.isAsyncSupported());
assertEquals("TEST", session.getValue("TEST")); assertNull(session.getValue("TEST"));
assertNotNull(webApp.getRequest(response));
assertNotNull(webApp.getServletContextName()); assertEquals("MYNAME", webApp.getServletContextName());
assertTrue(file.exists());
assertNull(webApp.addJspFile("MyJspFile", "myjspfile.jsp"));
assertFalse(wrapper.authenticate(response));
assertEquals("ECHO", new String(response.getResponseBytes()));
assertEquals(301, wrapped.getStatus());
assertNull(session.getAttribute("TEST"));
assertEquals(cookie.getName(), clone.getName()); assertEquals(cookie.getValue(), clone.getValue());
assertEquals("myname", webApp.getVirtualServerName());
assertNotNull(wrapper.getInputStream());
assertFalse(cookie.isHttpOnly()); assertTrue(cookie.isHttpOnly());
assertEquals(8180, wrapper.getLocalPort());
assertNotNull(DriverManager.getDriver("jdbc:environment:0"). getPropertyInfo("jdbc:environment:0", new Properties()));
assertNotNull(context.composeName("name", ""));
assertEquals("url", wrapper.encodeRedirectURL("url"));
assertEquals(1000, element.getMaxRequestSize());
assertTrue(result.isEmpty()); assertTrue(result.isEmpty()); assertNotNull(mapping);
assertEquals("methodName", element.getMethodName());
assertEquals("true", webApp.getInitParameter("initParameter"));
assertEquals(-1, manager.getIntHeader("NAME"));
assertNull(resource.getResource("/resource"));
assertFalse(cookie.getSecure()); assertTrue(cookie.getSecure());
assertTrue(outputStream.toString().contains("Date = "));
assertNotNull(webApp.getRequestDispatcher("/Snoop"));
assertTrue(outputStream.toString().contains("Hello Wicket"));
assertNotNull(config.getInitParameterNames());
assertEquals("ECHO", new String(response.getResponseBytes()));
assertNull(resource.getResource("/cloud/piranha/resource/AliasedDirectoryResourceTest2.java"));
assertEquals("name", event.getName());
assertEquals(404, response.getStatus());
assertEquals("localhost", wrapper.getLocalName());
assertNotNull(webApp.getServletRegistrations()); assertTrue(webApp.getServletRegistrations().isEmpty());
assertNotNull(enumeration);
assertNotNull(event.getSuppliedResponse());
assertTrue(responseText.contains("<title>Snoop</title>"));
assertNull(securityManager.getWebApplication());
assertNotNull(context.lookup("name"));
assertNotNull(connection);
assertEquals(0, cookie.getMaxAge()); assertEquals(10, cookie.getMaxAge());
assertEquals("COMMENT", sessionManager.getComment());
assertTrue(names.hasMoreElements()); assertEquals("NAME", names.nextElement());
assertEquals(-1, exception.getUnavailableSeconds());
assertNotNull(event.getServletRequest());
assertTrue(session.isNew()); assertFalse(session.isNew());
assertNotNull(exception.getRootCause()); assertTrue(exception.getRootCause() instanceof RuntimeException);
assertEquals("name", event.getName());
assertTrue(session.getCreationTime() > 0);
assertNull(cookie.getComment()); assertEquals("comment", cookie.getComment());
assertNotNull(server.getRequestMapper());
assertEquals(400, wrapper.getStatus());
assertNotNull(DriverManager.getDriver("jdbc:environment:0").getParentLogger());
assertEquals("TEST", session.getAttribute("TEST")); assertNull(session.getAttribute("TEST"));
assertNotNull(webApp.getSessionCookieConfig());
assertTrue(session.getValueNames().length == 0);
assertEquals("value", event.getValue());
assertNotNull(resource.getResourceAsStream("/alias/cloud/piranha/resource/DirectoryResource.java"));
assertNotNull(resource.getResource("mylocation")); assertNull(resource.getResource("notmylocation")); assertTrue(resource.getResource("mylocation").openStream() instanceof ByteArrayInputStream);
assertFalse(enumeration.hasMoreElements());
assertTrue(securityManager.isUserInRole(request, "role1")); assertFalse(securityManager.isUserInRole(request, "role1"));
assertNotNull(event.getSuppliedRequest());
assertTrue(resource.getResourceAsStream("mylocation") instanceof ByteArrayInputStream); assertNull(resource.getResourceAsStream("notmylocation"));
assertNull(resource.getResource(null));
assertNull(manager.getResourceAsStream("/doesnotexist"));
assertNotNull(resource.getResourceAsStream("pom.xml"));
assertNull(resource.getResourceAsStream("/resource"));
assertNull(wrapper.getParameter("null"));
assertEquals(100, exception.getUnavailableSeconds());
assertNotNull(event.getSession());
assertNull(wrapper.getAttribute("null"));
assertNull(resource.getResource("resource"));
assertEquals("test", context.removeFromEnvironment("test")); assertNull(context.removeFromEnvironment("test"));
assertTrue(result.isEmpty());
assertTrue(tempDir.exists());
assertNull(webApp.getAttribute("myattribute"));
assertEquals(1, manager.getIntHeader("NAME"));
assertNotNull(wrapper.getHeaderNames()); assertEquals(1, wrapper.getHeaderNames().size());
assertTrue(wrapper.containsHeader("int"));
assertNull(manager.getPart(application, request, "part_test"));
assertNotNull(result);
assertTrue(webApp.getDefaultSessionTrackingModes().contains(SessionTrackingMode.COOKIE));
assertFalse(sessionManager.isHttpOnly()); assertTrue(sessionManager.isHttpOnly());
assertEquals(-1L, wrapper.getContentLengthLong());
assertEquals("/", sessionManager.getPath());
assertNotNull(webApp.getResourceAsStream("/pom.xml"));
assertEquals("UTF-8", wrapper.getCharacterEncoding());
assertEquals("ECHO", new String(response.getResponseBytes()));
assertEquals("/alias", resource.getAlias());
assertNull(webApp.getResponseCharacterEncoding()); assertEquals("UTF-8", webApp.getResponseCharacterEncoding());
assertEquals(ServletSecurity.EmptyRoleSemantic.PERMIT, element.getEmptyRoleSemantic()); assertNotNull(element.getHttpMethodConstraints());
assertEquals(1000, element.getMaxRequestSize());
assertEquals("user", principal.getName());
assertNotNull(context.lookup("context/name1"));
assertEquals("VALUE", manager.getHeader("NAME"));
assertEquals("domain", sessionManager.getDomain());
assertTrue(responseText.contains("ECHO"));
assertNotNull(DriverManager.getDriver("jdbc:property:0").getParentLogger());
assertNotNull(DriverManager.getDriver("jdbc:environment:0"));
assertTrue(manager.isUserInRole(request, "Administrator"));
assertEquals(DispatcherType.ERROR, wrapper.getDispatcherType());
assertNotNull(context.getEnvironment());
assertNotNull(webApp.getResource("/src/main/java"));
assertNotNull(context.getNameParser(""));
assertNotNull(manager.getAnnotatedClasses()); assertTrue(manager.getAnnotatedClasses().isEmpty());
assertEquals(0, webApp.getEffectiveMinorVersion());
assertNotNull(element.getMethodNames());
assertNull(resource.getResourceAsStream("/alias/cloud/piranha/DirectoryResource.class"));
assertNotNull(event.getServletContext());
assertTrue(responseText.contains("<title>Snoop</title>"));
assertEquals("initParameter", enumeration.nextElement()); assertFalse(enumeration.hasMoreElements());
assertEquals("value", cookie.getValue()); assertEquals("newvalue", cookie.getValue());
assertNotNull(connection);
assertEquals(0, DriverManager.getDriver("jdbc:property:0").getMinorVersion());
assertNotNull(factory.getInitialContext(null));
assertNull(resource.getResourceAsStream("/resource"));
assertNotNull(wrapper.getLocales());
assertEquals("", webApp.getServerInfo());
assertNull(resource.getBytes());
assertNull(webApp.getRequestCharacterEncoding()); assertEquals("UTF-8", webApp.getRequestCharacterEncoding());
assertNotNull(context.lookup(name));
assertEquals(1, resource.getAllLocations().count());
assertNull(webApp.getMimeType("this_maps_to.null"));
assertNull(manager.getPart(webApplication, request, "notfound"));
assertNotNull(webApplication.getAttribute(TestInitializer.class.getName()));
assertEquals(Locale.getDefault(), wrapper.getLocale());
assertEquals("value", event.getValue());
assertNotNull(sessionManager.getSessionCookieConfig());
assertTrue(securityManager.isUserInRole(request, "role1"));
assertTrue(DriverManager.getDriver("jdbc:property:0").jdbcCompliant());
assertTrue(outputStream.toString().contains("Hello JSP"));
assertTrue(outputStream.toString().contains("Hello Wicket"));
assertEquals("Hello World", outputStream.toString());
assertEquals("JSESSIONID", sessionManager.getName());
assertEquals(4, webApp.getMajorVersion());
assertEquals("windows-1252", response.getCharacterEncoding());
assertEquals(1, DriverManager.getDriver("jdbc:property:0").getMajorVersion());
assertTrue(DriverManager.getDriver("jdbc:environment:0").jdbcCompliant());
assertEquals("value", wrapped.getHeader("header"));
assertEquals("1", wrapper.getHeader("int"));
assertEquals("methodName", element.getMethodName());
assertNull(webApplication.getAttribute(TestInitializer.class.getName()));
assertEquals("location", element.getLocation());
assertFalse(session.getAttributeNames().hasMoreElements());
assertEquals("q=value", outputStream.toString());
assertNotNull(event.getThrowable());
assertNotNull(config.getServletName());
assertEquals("VALUE", manager.getHeader("NAME")); assertTrue(manager.containsHeader("NAME"));
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertEquals(SubscriptionMapper.DEFAULT_FROM_TIME, s.getFromTime()); assertEquals(SubscriptionMapper.DEFAULT_TO_TIME, s.getToTime());
assertEquals(null, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.SUBSCRIPTION_UPDATE_INVALID, ce.getErrorCode());
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertThat(resultAlarms).containsOnly(alarm1, alarm2);
assertEquals(SubscriptionMapper.DEFAULT_FROM_TIME, s.getFromTime()); assertEquals(SubscriptionMapper.DEFAULT_TO_TIME, s.getToTime());
assertNotNull(alerts); assertTrue(alerts.getValues().size()==result.getValues().size()); assertArrayEquals(result.getValues().toArray(),alerts.getValues().toArray());
assertTrue(repository.deleteSubscription("alarmId","subscriptionId"));
assertNull(s);
assertEquals(e.getHttpStatus(),HttpStatus.CONFLICT.value()); assertEquals(e.getAction(),"addSubscription");
assertNotNull(alarms); assertTrue(alarms.getValues().size()==result.getValues().size()); assertArrayEquals(result.getValues().toArray(),alarms.getValues().toArray());
assertEquals(DEFAULT_GRAPHITE_IPPORT, backendAlarm.getGraphiteBaseUrl());
assertEquals(AlarmMapper.DEFAULT_FROM, c.getFrom()); assertEquals(AlarmMapper.DEFAULT_UNTIL, c.getUntil());
assertEquals(OTHER_GRAPHITE_IPPORT, backendAlarm.getGraphiteBaseUrl());
assertEquals(DEFAULT_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertNotNull(subscription); assertEquals(TestUtils.DEFAULT_SUBSCRIPTION_ID, subscription.getId()); assertEquals(TestUtils.DEFAULT_EMAIL, subscription.getTarget());
assertEquals(DEFAULT_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.SUBSCRIPTION_UPDATE_INVALID, ce.getErrorCode());
assertNotNull(statsM); assertNotNull(statsD); assertNotNull(statsH); assertEquals(statsM.size(), 0); assertEquals(statsD.size(), 0); assertEquals(statsH.size(), 0);
assertEquals(OTHER_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.SUBSCRIPTION_INVALID, ce.getErrorCode());
assertEquals(SubscriptionService.DeletedSubscriptionStatus.OK, subscriptionService.deleteSubscription(TestUtils.DEFAULT_ALARM_ID, TestUtils.DEFAULT_SUBSCRIPTION_ID));
assertNotNull(alerts); assertTrue(alerts.getValues().size()==result.getValues().size()); assertArrayEquals(result.getValues().toArray(),alerts.getValues().toArray());
assertNotNull(allAlerts); assertFalse(allAlerts.getValues().isEmpty()); assertEquals(allAlerts.getValues().size(), 2);
assertEquals(alarmMapper.DEFAULT_FROM, c.getFrom()); assertEquals(alarmMapper.DEFAULT_UNTIL, c.getUntil());
assertEquals(ErrorCode.SUBSCRIPTION_INVALID, ce.getErrorCode());
assertEquals(SubscriptionMapper.DEFAULT_FROM_TIME, s.getFromTime()); assertEquals(SubscriptionMapper.DEFAULT_TO_TIME, s.getToTime());
assertNotNull(returnedAlarm); assertEquals(addedAlarm.getId(), returnedAlarm.getId());
assertEquals(null, backendAlarm.getGraphiteBaseUrl());
assertTrue(repository.deleteAlarm("id"));
assertNotNull(subscription.getId()); assertNull(alarm.getId()); assertEquals(SubscriptionType.EMAIL, subscription.getType());
assertNull(foundAlarm);
assertTrue(c.getSubscriptions().isEmpty()); assertEquals(SubscriptionService.DeletedSubscriptionStatus.ALARM_DELETED, subscriptionService.deleteSubscription(TestUtils.DEFAULT_ALARM_ID, TestUtils.DEFAULT_SUBSCRIPTION_ID));
assertEquals(DEFAULT_GRAPHITE_IPPORT, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertEquals(SubscriptionMapper.DEFAULT_FROM_TIME, s.getFromTime()); assertEquals(SubscriptionMapper.DEFAULT_TO_TIME, s.getToTime());
assertNotNull(alarm); assertEquals(TestUtils.DEFAULT_ALARM_ID, alarm.getId()); assertEquals(TestUtils.DEFAULT_ALARM_NAME, alarm.getName());
assertEquals(DEFAULT_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertNull(subscription); assertEquals(ErrorCode.SUBSCRIPTION_UNKNOWN, e.getErrorCode());
assertEquals(ErrorCode.SUBSCRIPTION_DELETE_ERROR, ce.getErrorCode());
assertEquals(OTHER_GRAPHITE_IPPORT, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertNotNull(updatedAlarm);
assertEquals(ErrorCode.ALARM_DUPLICATE_NAME, ce.getErrorCode());
assertEquals(ErrorCode.SUBSCRIPTION_DUPLICATE, ce.getErrorCode());
assertNotNull(foundAlarm); assertEquals(TestUtils.DEFAULT_ALARM_ID, foundAlarm.getId());
assertEquals(ErrorCode.ALARM_UNKNOWN, ce.getErrorCode());
assertEquals(OTHER_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.ALARM_UNKNOWN, e.getErrorCode());
assertEquals(ErrorCode.ALARM_UNKNOWN, e.getErrorCode());
assertEquals(TestUtils.DEFAULT_ALARM_ID, alarm.getId());
assertEquals(ErrorCode.SUBSCRIPTION_INVALID, ce.getErrorCode());
assertNull(alarm); assertEquals(ErrorCode.ALARM_UNKNOWN, e.getErrorCode());
assertEquals(allAlarms.size(), 1);
assertNotNull(allAlerts); assertFalse(allAlerts.getValues().isEmpty()); assertEquals(allAlerts.getValues().size(), 2);
assertEquals(OTHER_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertNotNull(s); assertEquals(TestUtils.DEFAULT_SUBSCRIPTION_ID, s.getId());
assertEquals(DEFAULT_GRAPHITE_URL, backendAlarm.getGraphiteBaseUrl());
assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());
assertEquals(expected, filter);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertNotNull(testFile); assertTrue(format.accepts(testFile)); assertNotNull(reader); assertNotNull("Null value returned instead of a coverage", coverage); assertTrue("coverage dimensions different from what we expected", coverage.getGridGeometry().getGridRange().getSpan(0) == 250 && coverage.getGridGeometry().getGridRange().getSpan( 1) == 250);
assertNull(transformed.getBounds());
assertEquals( 2, def.size() ); assertEquals( "the_geom", def.get(0).name ); assertTrue( def.get(0).expression instanceof PropertyName ); assertEquals( "cat", def.get(1).name );
assertTrue(geom instanceof com.vividsolutions.jts.geom.Polygon); assertEquals(-10.0, geomEnv.getMinX(), TOL); assertEquals(10.0, geomEnv.getMaxX(), TOL); assertEquals(-5.0, geomEnv.getMinY(), TOL); assertEquals(5.0, geomEnv.getMaxY(), TOL);
assertEquals(1, result.size()); assertEquals(1, ml.getNumGeometries()); assertEquals(2, cs.size());
assertTrue(offsetCities.contains(f.getAttribute("CITY"))); assertEquals(6, count); assertEquals(6, matches.size()); assertEquals(6, rows.getCount(query));
assertFalse(step1.equals(null)); assertFalse(step1.equals(new Object())); assertFalse(step1.equals(step2)); assertTrue(step2.equals(step3)); assertFalse(step2.equals(step4)); assertFalse(step2.equals(step5));
assertEquals(CRS.decode("EPSG:4326"), sg.getUserData());
assertTrue(cos.isEmpty()); assertTrue(cos.size() == 1); assertNotNull(co); assertSame(crs, co.getSourceCRS()); assertSame(crs, co.getTargetCRS()); assertTrue(co.getMathTransform() instanceof MathTransform); assertEquals(p[0], DST_TEST_POINT[0], 1e-8); assertEquals(p[1], DST_TEST_POINT[1], 1e-8);
assertTrue(f.exists()); assertEquals(3, fc.size()); assertEquals("Activity" + i, sf.getAttribute("Name")); assertNotNull(sf.getDefaultGeometry()); assertTrue(sf.getDefaultGeometry() instanceof MultiLineString); assertEquals(1, mls.getNumGeometries()); assertEquals(2, ls.getNumPoints()); assertEquals(ls.getStartPoint(), ls.getEndPoint()); assertEquals(421, i); assertEquals(3, fc.toArray().length);
assertEquals("Unexpected strategy", CSVSpecifiedWKTStrategy.class, csvStrategy.getClass());
assertEquals(targetType, dataStore.getSchema(targetName));
assertNull (GeoTools.fixName(null)); assertEquals("simpleName", GeoTools.fixName("simpleName")); assertEquals("jdbc:EPSG", GeoTools.fixName(null, "jdbc:EPSG")); assertEquals("jdbc/EPSG", GeoTools.fixName(null, "jdbc/EPSG"));
assertTrue(true); assertNotNull(keywords); assertEquals(1, keywords.size()); assertTrue(keywords.contains("archsites sfArchsites"));
assertFalse(conn.isOpen());
assertTrue(isValid); assertFalse(isValid); assertFalse(isValid);
assertEquals(ff.and(a, b), result);
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertEquals(pvg.getDescriptor(), NADCONTransform.Provider.PARAMETERS); assertEquals(pvg.values().size(), 2); assertTrue(value instanceof URI); assertEquals(value.toString(), STPAUL_LAS); assertTrue(value instanceof URI); assertEquals(value.toString(), STPAUL_LOS);
assertTrue (withoutAlias.contains("CRS")); assertTrue (withoutAlias.contains("AUTO2")); assertTrue (withoutAlias.contains("urn:ogc:def"));
assertNotNull(fill); assertNotNull(b.color); assertEquals(Color.BLUE, fill.getColor().evaluate(null, Color.class));
assertNotNull( bounds2 );
assertEquals(1.0, Filters.asType(ff.literal("1"), double.class), DELTA); assertEquals(Color.BLUE, Filters.asType(ff.literal("#0000FF"), Color.class));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertTrue( latch.await(LISTENER_TIMEOUT, TimeUnit.MILLISECONDS) );
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertFalse( mapContent.layers().remove(new MockLayer(WORLD)) );
assertNotNull(time); assertEquals("2013-03-01T00:00:00.000Z", df.format(time));
assertTrue(ring.isEmpty()); assertEquals(2, ring.getCoordinateSequence().getDimension());
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("bar", tmp.getValue());
assertEquals(2, CoordinateSequences.coordinateDimension(geom));
assertEquals(transform, t2); assertEquals(transform.hashCode(), t2.hashCode());
assertNull(factory.createCoordinateOperation(INVALID_CRS)); assertNotNull(co); assertSame(crs, co.getSourceCRS()); assertSame(crs, co.getTargetCRS()); assertTrue(co.getMathTransform() instanceof MathTransform); assertEquals(p[0], DST_TEST_POINT[0], 1e-8); assertEquals(p[1], DST_TEST_POINT[1], 1e-8);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:00:00.000Z",df.format(time.get(0)));
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("bar", tmp.getValue());
assertEquals(table.get(name), value);
assertTrue( vp.isEditable() );
assertTrue(geom instanceof LinearRing); assertEquals(NPOINTS + 1, coords.length); assertTrue(list.contains(c));
assertSame(DefaultGeographicCRS.WGS84, CRS.decode("WGS84(DD)"));
assertNotNull(set); assertFalse(set.isEmpty()); assertEquals(set.size(), 1); assertSame(set.iterator().next().getClass(), InterpolationConverterFactory.class); assertNull(new InterpolationConverterFactory().createConverter(null, null, null)); assertNull(new InterpolationConverterFactory().createConverter(String.class, null, null)); assertNull(new InterpolationConverterFactory().createConverter(String.class, Double.class, null));
assertEquals(ff.or(a, b), result);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:00:00.000Z",df.format(time.get(0)));
assertTrue(geom instanceof com.vividsolutions.jts.geom.Polygon); assertEquals(-10.0, geomEnv.getMinX(), TOL); assertEquals(10.0, geomEnv.getMaxX(), TOL); assertEquals(-5.0, geomEnv.getMinY(), TOL); assertEquals(5.0, geomEnv.getMaxY(), TOL);
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertTrue(factory.getAuthority().equals(Citations.EPSG));
assertEquals(1, CoordinateSequences.coordinateDimension(geom));
assertNotNull(conn);
assertTrue(f.exists());
assertEquals(transform.getSourceDimensions(), 2);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertTrue(factoryExceptionThrown); assertTrue(factoryExceptionThrown); assertTrue(factoryExceptionThrown); assertFalse(factoryExceptionThrown); assertNotNull(grid); assertTrue(grid.isLoaded());
assertEquals(1, result.size()); assertEquals(2, ml.getNumGeometries()); assertEquals(2, cs.size()); assertEquals(2, cs.size());
assertEquals(expectedText, displayedText);
assertEquals(table.get(name), value);
assertEquals("start123end", result);
assertTrue( result.sum > 0 );
assertNotNull( reader.read("POINT(1 2)") ); assertNotNull( reader.read("Point(1 2)") ); assertNotNull( reader.read("LINESTRING(0 2, 2 0, 8 6)") ); assertNotNull( reader.read("LineString(0 2, 2 0, 8 6)") );
assertNotNull(logMsg); assertTrue(logMsg.toLowerCase().contains("setfallbackvalue"));
assertThat(needsToBeCreated.exists(), is(equalTo(false))); assertThat(needsToBeCreated.isDirectory(), is(equalTo(true))); assertThat(needsToBeCreated.exists(), is(equalTo(true)));
assertEquals("IllegalArgumentException", windowFixture.component().getTitle());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertNotNull(info); assertNotNull(info.getTitle()); assertNotNull(info.getDescription()); assertNotNull(info.getSchema());
assertEquals(11, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("name = \'baloon\'"))).size());
assertTrue(limitCities.contains(f.getAttribute("CITY"))); assertEquals(3, count); assertEquals(3, matches.size()); assertEquals(3, rows.getCount(query));
assertEquals(1, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size());
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertNotNull(helper); assertEquals(FeatureLayerHelper.class, helper.getClass());
assertTrue(writer.hasNext()); assertEquals((long) i, writer.next());
assertNotNull(typeNames); assertEquals(1, typeNames.length); assertEquals(targetName, typeNames[0]); assertNotNull(names); assertEquals(1, names.size()); assertEquals(targetName, names.get(0));
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("3.0,10", tmp.getValue());
assertNotSame(copy, a); assertEquals(copy, a);
assertEquals(re, ae);
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("EPSG:1234", tmp.getValue());
assertFalse(parsed);
assertEquals("IllegalArgumentException", windowFixture.component().getTitle());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertTrue(writer.hasNext()); assertEquals((long) i, writer.next()); assertTrue(writer.hasNext()); assertEquals((long) i + 1, writer.next());
assertNotNull(time); assertEquals("2013-03-01T00:00:00.000Z", df.format(time));
assertEquals(3, time.size()); assertEquals(1318241472000l, time.get(0).getTime()); assertEquals(1318241472000l + (3600 * 1000 * 48), time.get(1).getTime());
assertEquals(p[0], TEST_POINT_DST[0], TOLERANCE); assertEquals(p[1], TEST_POINT_DST[1], TOLERANCE);
assertEquals("", styles[0].getFeatureTypeStyles()[0].getRules()[0].getDescription().getAbstract().toString());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertEquals(1, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("persons = 1"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("people = 1"))).size());
assertSame(featureType2, dataStore.getRemoteSimpleFeatureType(TYPE2)); assertTrue(true);
assertTrue(limitCities.contains(f.getAttribute("CITY"))); assertEquals(3, count); assertEquals(3, matches.size()); assertEquals(3, rows.getCount(query));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:00:00.000Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertEquals("2011-10-01T00:00:00.000Z",df.format(time.get(0)));
assertNull(layerBounds); assertNotNull(maxBounds); assertEquals( DefaultGeographicCRS.WGS84, maxBounds.getCoordinateReferenceSystem() ); assertTrue( maxBounds.isEmpty() );
assertEquals("testFeature", strategy.getPrefixedTypeName(new QName("", "testFeature", "")));
assertEquals(1, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("name = \'baloon\'"))).size());
assertEquals("sampleFile.ext", customFile.getName());
assertEquals(1, range.size()); assertEquals("2008-10-31T00:00:00.000Z/2008-11-01T00:00:00.000Z/PT1S", range.iterator().next());
assertTrue(true);
assertNull( vp.getScreenToWorld() );
assertEquals(1, result.size()); assertEquals(1, mp.getNumGeometries()); assertEquals(0, p.getNumInteriorRing()); assertEquals(5, cs.size()); assertFalse(fi.hasNext());
assertFalse(names.isEmpty()); assertTrue(names.contains(new NameImpl("vec", "Clip"))); assertEquals(1, result.size());
assertTrue(joining);
assertEquals(4, result.size());
assertNull(re);
assertEquals(0, dst[0], TOLERANCE); assertEquals(0, dst[1], TOLERANCE); assertEquals(dst[2], TEST_POINT_DST[0], TOLERANCE); assertEquals(dst[3], TEST_POINT_DST[1], TOLERANCE);
assertNotNull(crs); assertTrue(CRS.equalsIgnoreMetadata(expected, crs));
assertEquals("Invalid number of type names", 1, typeNames.length); assertEquals("Invalid type name", "locations", typeNames[0]);
assertEquals( origional.size(), result.size() ); assertTrue( Long.class.isAssignableFrom( number.getType().getBinding() ) );
assertTrue("Did not process file params", csvDataStoreFactory.canProcess(fileParams));
assertSame(transform, transform.inverse().inverse()); assertEquals(p1[0], p2[0], TOLERANCE); assertEquals(p1[1], p2[1], TOLERANCE);
assertNotNull(names); assertEquals(2, names.size()); assertTrue(names.contains(simpleTypeName1)); assertTrue(names.contains(simpleTypeName2));
assertEquals("Invalid attribute count", 1, featureType.getAttributeCount()); assertEquals("Invalid featuretype name", "foo", featureType.getName().getLocalPart()); assertEquals("Invalid name", "foo", featureType.getTypeName()); assertEquals("Invalid geometry attribute name", "location", geometryDescriptor.getLocalName());
assertTrue(parseObject instanceof Calendar); assertEquals(year, 2014); assertEquals(month, 9); assertEquals(day, 12); assertEquals(hours, 5); assertEquals(mins, 0); assertEquals(sec, 0); assertEquals(millis, 0);
assertEquals(shpFiles.getTypeName() + ".11", reader.next()); assertTrue(reader.hasNext()); assertEquals(shpFiles.getTypeName() + ".16", reader.next()); assertTrue(reader.hasNext()); assertEquals(shpFiles.getTypeName() + ".1", reader.next()); assertTrue(reader.hasNext()); assertEquals(shpFiles.getTypeName() + ".4", reader.next()); assertTrue(reader.hasNext());
assertTrue(true); assertNotNull(supportedCRSs); assertEquals(1, supportedCRSs.size()); assertTrue(supportedCRSs.contains("EPSG:26713")); assertNotNull(supportedCRSs); assertEquals(3, supportedCRSs.size()); assertTrue(supportedCRSs.contains("EPSG:4269")); assertTrue(supportedCRSs.contains("EPSG:4326"));
assertEquals(pvg.getDescriptor(), NTv2Transform.Provider.PARAMETERS); assertEquals(pvg.values().size(), 1); assertTrue(value instanceof URI); assertEquals(value.toString(), TEST_GRID); assertTrue(value instanceof URI); assertEquals(value.toString(), TEST_GRID);
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("3.0", tmp.getValue());
assertTrue(true);
assertTrue(g.isValid()); assertTrue(g.isValid()); assertEquals(3, g.getCoordinateSequence().size());
assertEquals(9, size); assertEquals(0, STATES.getFeatures(f).size()); assertEquals(0, transformed.getFeatures(f).size());
assertEquals("This is a description of your Web Feature Server.", wfs.getServiceAbstract() .trim());
assertTrue(caps.isOffsetSupported()); assertFalse(caps.isVersionSupported()); assertEquals(originalCaps.isJoiningSupported(), caps.isJoiningSupported()); assertEquals(originalCaps.isReliableFIDSupported(), caps.isReliableFIDSupported()); assertEquals(originalCaps.isUseProvidedFIDSupported(), caps.isUseProvidedFIDSupported());
assertTrue(true);
assertEquals(pane, mapEv.getSource());
assertTrue(true); assertTrue("Did not throw illegal argument exception for non-existent file", false);
assertTrue(item.toLowerCase().contains(code));
assertEquals("123|567", fn.evaluate(f1)); assertEquals(null, fn.evaluate(f2)); assertEquals("abc12|67", fn.evaluate(f3));
assertTrue(output.norm().equalsExact(expectedOutput.norm()));
assertSame(transform, transform.inverse().inverse()); assertEquals(p1[0], p2[0], TOLERANCE); assertEquals(p1[1], p2[1], TOLERANCE);
assertTrue(isMonotonic(output, NO_DATA));
assertEquals(new ReferencedEnvelope(-2, 4, -1, 6, CRS.decode("EPSG:4326")), store .getFeatureSource(BASIC_POLYGONS).getBounds(Query.ALL));
assertEquals( 2, def.size() ); assertEquals( "the_geom", def.get(0).name ); assertTrue( def.get(0).expression instanceof PropertyName ); assertEquals( "cat", def.get(1).name );
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertFalse(ds.indexManager.isIndexStale(fix)); assertTrue(ds.indexManager.isIndexStale(fix)); assertTrue(fixFile.setLastModified(shpFile.lastModified())); assertFalse(ds.indexManager.isIndexStale(fix)); assertTrue(fixFile.delete()); assertTrue(ds.indexManager.isIndexStale(fix));
assertEquals(text, displayedText);
assertEquals(crs, geom.getUserData()); assertEquals(srs, bbox.getSRS());
assertEquals(2, CoordinateSequences.coordinateDimension(geom));
assertEquals(0, result.size()); assertFalse(fi.hasNext());
assertEquals("dummy", e.getAuthorityCode());
assertNull(Filters.findPropertyName(null)); assertNull(Filters.findPropertyName(f));
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("stuff", tmp.getValue());
assertEquals(JCRSChooser.DEFAULT_TITLE, windowFixture.component().getTitle()); assertNotNull(textBox); assertNotNull(list);
assertEquals(1, styles.length); assertEquals(1, fts.size()); assertEquals(1, rules.size()); assertEquals(1, symbolizers.size()); assertEquals(1, graphicalSymbols.size()); assertEquals(mark, CommonFactoryFinder.getStyleFactory(null).createMark());
assertTrue(maxAngle < 11.5);
assertNotNull(fc); assertEquals(1, fc.size()); assertEquals("testft", schema.getTypeName()); assertEquals(1, schema.getAttributeCount()); assertEquals(Polygon.class, ad.getType().getBinding()); assertEquals(utm32n, ad.getCoordinateReferenceSystem()); assertEquals(poly, sf.getDefaultGeometry());
assertNotNull(halo);
assertTrue(wfs.supportsOperation(DESCRIBE_FEATURETYPE, false)); assertFalse(wfs.supportsOperation(DESCRIBE_FEATURETYPE, true)); assertTrue(wfs.supportsOperation(DESCRIBE_FEATURETYPE, false)); assertTrue(wfs.supportsOperation(DESCRIBE_FEATURETYPE, true));
assertNotNull(time); assertEquals("2012-06-02T12:00:00.000Z", df.format(time));
assertEquals( expected, wrapper );
assertEquals(2, ft.getAttributeCount()); assertEquals(Point.class, ft.getGeometryDescriptor().getType().getBinding()); assertEquals(String.class, ft.getDescriptor("name").getType().getBinding());
assertEquals(1, params.size()); assertEquals("foo", tmp.getName()); assertEquals("tiger", tmp.getValue());
assertTrue(function instanceof GeometryTransformation); assertEquals(expected, inverted);
assertNotNull(c);
assertEquals( 2, def.size() ); assertEquals( "the_geom", def.get(0).name ); assertTrue( def.get(0).expression instanceof PropertyName ); assertEquals( "cat", def.get(1).name );
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertEquals(DefaultGeographicCRS.WGS84, sg.getUserData());
assertEquals("1", Filters.puts(1.0)); assertEquals("3.14", Filters.puts(3.14));
assertEquals(0, windowFixture.textBox().component().getDocument().getLength());
assertEquals(new Long(1l), Filters.gets("1.0", Long.class));
assertEquals("suburb", results);
assertEquals(0.0, anchor.getAnchorPointX().evaluate(null, Double.class), 0.0); assertEquals(0.0, anchor.getAnchorPointY().evaluate(null, Double.class), 0.0); assertEquals(0.5, anchor.getAnchorPointX().evaluate(null, Double.class), 0.0); assertEquals(0.9, anchor.getAnchorPointY().evaluate(null, Double.class), 0.0);
assertEquals(text.replaceAll(regex, "|"), displayedText.replaceAll(regex, "|"));
assertNotNull(testFile); assertTrue(format.accepts(testFile)); assertNotNull(reader); assertNotNull("Null value returned instead of a coverage", coverage); assertTrue("coverage dimensions different from what we expected", coverage.getGridGeometry().getGridRange().getSpan(0) == 250 && coverage.getGridGeometry().getGridRange().getSpan( 1) == 250);
assertTrue(time.isEmpty());
assertNotNull(time); assertEquals("2012-06-02T12:00:00.000Z", df.format(time));
assertEquals(1, result.size()); assertEquals(2, ml.getNumGeometries()); assertEquals(2, cs.size()); assertEquals(2, cs.size());
assertEquals(1, result.size()); assertEquals(1, ml.getNumGeometries()); assertEquals(2, cs.size());
assertTrue( latch.await(LISTENER_TIMEOUT, TimeUnit.MILLISECONDS) );
assertEquals(p[0], TEST_POINT_SRC[0], TOLERANCE); assertEquals(p[1], TEST_POINT_SRC[1], TOLERANCE);
assertTrue(all.size() > 0); assertTrue("Found Interpolate", found );
assertEquals(0, (expectedRate - calculatedRate) / expectedRate, 0.01);
assertEquals(x + x, value);
assertNotNull(testFile); assertNotNull(reader); assertNull(reader.read(new GeneralParameterValue[] {readGG}));
assertEquals( 2, def.size() ); assertEquals( "the_geom", def.get(0).name ); assertTrue( def.get(0).expression instanceof PropertyName ); assertEquals( "cat", def.get(1).name );
assertTrue(FeatureTypes.equalsExact(ft1, ft2)); assertFalse(FeatureTypes.equalsExact(ft1, ft2));
assertTrue("Did not process url params", csvDataStoreFactory.canProcess(urlParams));
assertNull("Start with nothing should end with nothing", results); assertSame("Existing should be returned with null target", a, results); assertEquals("Should not change when target not a child", base, results); assertEquals(expected, results); assertEquals(results, c); assertSame("Include should be returned when same filter", Filter.INCLUDE, results);
assertTrue(true); assertNotNull(url);
assertEquals("Generated from sfArchsites", wfs .getFeatureTypeAbstract(GEOS_ARCHSITES.FEATURETYPENAME)); assertNull(wfs.getFeatureTypeAbstract(CUBEWERX_GOVUNITCE.FEATURETYPENAME)); assertTrue(true);
assertEquals(2, result.size());
assertTrue(true); assertEquals("EPSG:26713", wfs.getDefaultCRS(GEOS_ARCHSITES.FEATURETYPENAME)); assertEquals("EPSG:4326", wfs.getDefaultCRS(GEOS_STATES.FEATURETYPENAME));
assertTrue(WORLD.boundsEquals2D(bounds, TOL)); assertEquals(DEFAULT_CRS, bounds.getCoordinateReferenceSystem());
assertEquals(11, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("persons = 1"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("people = 1"))).size());
assertEquals(4, features.size()); assertTrue(prev.compareTo(id) >= 0);
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertNotNull(wfs.getServiceProviderUri());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertTrue(g.isValid()); assertTrue(g.isValid()); assertTrue(original.equalsExact(g));
assertEquals( DefaultGeographicCRS.WGS84_3D, worldBounds3D.getCoordinateReferenceSystem() ); assertEquals( DefaultGeographicCRS.WGS84, worldBounds2D.getCoordinateReferenceSystem() );
assertEquals("Unexpected default csv strategy", CSVAttributesOnlyStrategy.class, csvStrategy.getClass());
assertTrue(true); assertTrue(true); assertNotNull(wfs); assertNotNull(((WFS_1_1_0_Protocol) wfs).capabilities);
assertEquals(0, dst[0], TOLERANCE); assertEquals(0, dst[1], TOLERANCE); assertEquals(dst[2], TEST_POINT_SRC[0], TOLERANCE); assertEquals(dst[3], TEST_POINT_SRC[1], TOLERANCE);
assertNotNull(initialContext.lookup(jndiRef)); assertNotNull(dataStore); assertNotNull(session); assertEquals(String.valueOf(config.get("user")).toUpperCase(), session.getUser() .toUpperCase());
assertNotNull(handler); assertEquals(envelope, handler.getRenderingEnvelope()); assertTrue(CRS.getMapProjection(envelope.getCoordinateReferenceSystem()) instanceof PolarStereographic);
assertTrue(env1.boundsEquals2D(env2, eps)); assertFalse(env1.boundsEquals2D(env2, eps));
assertEquals("42", Filters.puts(42));
assertEquals(1, time.size()); assertEquals("2011-10-01T00:00:00.000Z",df.format(time.get(0)));
assertNull(crs);
assertTrue(geom.getEnvelopeInternal().equals(refEnv));
assertTrue(parseObject instanceof Calendar); assertEquals(year, 2014); assertEquals(month, 9); assertEquals(day, 12); assertEquals(hours, 0); assertEquals(mins, 0); assertEquals(sec, 0); assertEquals(millis, 0);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertEquals(42, featureCollection.size());
assertEquals(store.getSupportedHints(), store.delegate.getSupportedHints());
assertEquals(transform.getTargetDimensions(), 2);
assertTrue(version.isEmpty());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertFalse(estimator.isEstimateAccurate());
assertTrue(doesEntryExists(GeoPackage.GEOPACKAGE_CONTENTS, entry)); assertFalse(doesEntryExists(GeoPackage.GEOPACKAGE_CONTENTS, entry));
assertTrue(i + "th record", writer.hasNext()); assertEquals((long) i, writer.next());
assertEquals(new Rectangle(0, 0, 2, 1), ts.getBounds());
assertEquals("", styles[0].getFeatureTypeStyles()[0].getRules()[0].getDescription().getTitle().toString());
assertNotNull("Could not create datastore from file params", dataStore);
assertFalse(joining);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertEquals(p[0], TEST_POINT_DST[0], TOLERANCE); assertEquals(p[1], TEST_POINT_DST[1], TOLERANCE);
assertTrue(geom instanceof LineString); assertEquals(NPOINTS, coords.length); assertTrue(list.contains(c));
assertEquals(2, reduced.size()); assertTrue(reduced.contains(f2)); assertTrue(reduced.contains(f3));
assertEquals("Unexpected coordinates", expectedCoordinates, geometries); assertEquals("Unexecpted cities", expectedCities, cities); assertEquals("Unexpected numbers", expectedNumbers, numbers);
assertTrue(testMosaic.exists()); assertTrue(resolution > 60);
assertTrue(true); assertNotNull(schema);
assertNotNull(schema); assertEquals(TEST_TABLE_COLS.length, schema.getAttributeCount()); assertEquals("at index" + i, TEST_TABLE_COLS[i], schema.getDescriptor(i).getLocalName()); assertFalse(schema.getDescriptor(0).isNillable()); assertTrue(schema.getDescriptor(1).isNillable());
assertTrue(joining);
assertEquals(3, offset); assertEquals(0, offset); assertEquals(-1, offset); assertEquals(-1, offset); assertEquals(-1, offset); assertEquals(-1, offset);
assertEquals(9, size); assertEquals(0, STATES.getFeatures(f).size()); assertEquals(0, transformed.getFeatures(f).size()); assertEquals(0, STATES.getFeatures(Query.ALL).size()); assertEquals(0, transformed.getFeatures(Query.ALL).size());
assertEquals(2, CoordinateSequences.coordinateDimension(geom));
assertEquals(TITLE, windowFixture.component().getTitle());
assertNotNull(factory); assertTrue(factory instanceof TestParserFactory);
assertEquals("1", Filters.asString(ff.literal("1"))); assertEquals("1", Filters.asString(ff.literal(1))); assertEquals("1.0", Filters.asString(ff.literal(1.0))); assertEquals("3.14", Filters.asString(ff.literal(3.14))); assertEquals("#000000", Filters.asString(ff.literal(Color.BLACK)));
assertEquals(varValue, result.toString());
assertEquals(0, requestedEnvelope.getMinimum(0), DELTA); assertEquals(0, requestedEnvelope.getMinimum(1), DELTA); assertEquals(10, requestedEnvelope.getMaximum(0), DELTA); assertEquals(10, requestedEnvelope.getMaximum(1), DELTA); assertEquals(10, envelope3D.getMaximum(2), DELTA); assertFalse(is3D);
assertTrue(true); assertNotNull(baseUrl);
assertEquals("noMatch", result);
assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(value, covValues[0]);
assertEquals(values[threadIndex], value);
assertTrue(cropRegion.contains(rect)); assertFalse(notThrown); assertFalse(notThrown);
assertEquals(transform.getTargetDimensions(), 2);
assertTrue( latch.await(LISTENER_TIMEOUT, TimeUnit.MILLISECONDS) );
assertEquals(2, CoordinateSequences.coordinateDimension(geom));
assertFalse(dsf.canProcess(params));
assertNotNull(serviceKeywords); assertEquals(3, serviceKeywords.size()); assertTrue(serviceKeywords.contains("WFS")); assertTrue(serviceKeywords.contains("WMS")); assertTrue(serviceKeywords.contains("GEOSERVER"));
assertTrue(ring.isEmpty()); assertEquals(3, ring.getCoordinateSequence().getDimension());
assertEquals("Invalid type name", "locations", typeName.getLocalPart());
assertNotNull(hints); assertTrue(hints.isEmpty()); assertNotNull(hints); assertFalse(hints.isEmpty()); assertEquals(1, hints.size()); assertTrue(value instanceof Boolean); assertTrue(((Boolean) value).booleanValue()); assertNotNull(Hints.removeSystemDefault(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER)); assertNotNull(hints); assertTrue(hints.isEmpty());
assertTrue(g.isValid()); assertTrue(g.isValid()); assertEquals(4, g.getCoordinateSequence().size());
assertEquals(3, atts.size()); assertTrue(atts.contains("the_geom")); assertTrue(atts.contains("offx")); assertTrue(atts.contains("offy")); assertFalse(extractor.getDefaultGeometryUsed());
assertEquals(sr.getRenderingInterpolation(layer), Interpolation.getInstance(Interpolation.INTERP_NEAREST)); assertEquals(sr.getRenderingInterpolation(layer), Interpolation.getInstance(Interpolation.INTERP_BICUBIC)); assertEquals(sr.getRenderingInterpolation(layer), Interpolation.getInstance(Interpolation.INTERP_BILINEAR)); assertEquals(sr.getRenderingInterpolation(layer), Interpolation.getInstance(Interpolation.INTERP_NEAREST));
assertEquals(1, filters.asInt(ff.literal(1))); assertEquals(1, filters.asInt(ff.literal("1"))); assertEquals(Filters.NOTFOUND, filters.asInt(ff.property("fred")));
assertEquals( point.getX(), world.getY(), 0.00000005 ); assertEquals( point.getY(), world.getX(), 0.00000005 );
assertNotNull("meta", meta); assertNotNull("idInfo", idInfo); assertNotNull(bounding); assertEquals(-180.0, bounding.getMinX(), 0.00001); assertEquals(180.0, bounding.getMaxX(), 0.00001); assertEquals(-90.0, bounding.getMinY(), 0.00001); assertEquals(90.0, bounding.getMaxY(), 0.00001);
assertTrue(it.hasNext()); assertEquals(0, ((Point) f.getDefaultGeometry()).getX(), 1e-6); assertEquals(0, ((Point) f.getDefaultGeometry()).getY(), 1e-6); assertEquals("one", f.getAttribute("name")); assertEquals(10, ((Point) f.getDefaultGeometry()).getX(), 1e-6); assertEquals(0, ((Point) f.getDefaultGeometry()).getY(), 1e-6); assertEquals("two", f.getAttribute("name"));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertTrue(parseObject instanceof Calendar); assertEquals(year, 2014); assertEquals(month, 9); assertEquals(day, 12); assertEquals(hours, 9); assertEquals(mins, 0); assertEquals(sec, 0); assertEquals(millis, 0);
assertNotNull(identifiers); assertEquals(7, identifiers.length); assertEquals(first.getCode(), "WGS84"); assertEquals(first.getAuthority(), Citations.OGC);
assertNotNull(testFile); assertNotNull(reader); assertNotNull(coverage); assertTrue("coverage dimensions different from what we expected",coverage.getGridGeometry().getGridRange().getSpan(0) == 250&& coverage.getGridGeometry().getGridRange().getSpan(1) == 250);
assertNotNull(button); assertEquals(expected, clipText);
assertEquals(4, offset);
assertEquals(1.0, Filters.asInt(ff.literal(1)), DELTA); assertEquals(1, Filters.asInt(ff.literal("1")), DELTA);
assertTrue(item.toLowerCase().contains(filterStr));
assertSame(tr, Utilities.getOriginalGridToWorld(tr, PixelInCell.CELL_CENTER)); assertTrue(LinearTransform.class.isAssignableFrom(Utilities.getOriginalGridToWorld(tr, PixelInCell.CELL_CORNER).getClass())); assertTrue(LinearTransform.class.isAssignableFrom(Utilities.getOriginalGridToWorld(tr, PixelInCell.CELL_CORNER).getClass()));
assertTrue(strategy.getNamespaceURIMappings().size() > 0);
assertTrue(CRS.equalsIgnoreMetadata(wgs84, coverage.getCoordinateReferenceSystem())); assertEquals(worldEnvelope, new ReferencedEnvelope(coverage.getEnvelope()));
assertNull( vp.getWorldToScreen() );
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertEquals("#0000ff", Filters.puts(Color.BLUE));
assertTrue(r1.isNull()); assertTrue(r2.isNull()); assertTrue(r1.isNull());
assertEquals(2, mp.getNumGeometries()); assertEquals(3, p.getCoordinateSequence().getDimension());
assertTrue(parseObject instanceof Calendar); assertEquals(year, 2014); assertEquals(month, 9); assertEquals(day, 12); assertEquals(hours, 9); assertEquals(mins, 0); assertEquals(sec, 0); assertEquals(millis, 0);
assertEquals(1, result.size()); assertEquals(1, ml.getNumGeometries()); assertEquals(3, cs.size());
assertNotNull(operationURL);
assertFalse(dsf.canProcess(params));
assertTrue(listener.await(WaitingMapListener.Type.ADDED, LISTENER_TIMEOUT));
assertFalse(wgs84.isEmpty()); assertTrue(wgs84.contains(envelope, true)); assertFalse(wgs84_2.isEmpty()); assertTrue(wgs84_2.contains(envelope, true)); assertFalse(wgs84.isEmpty()); assertFalse(wgs84_2.isEmpty());
assertNotNull(text); assertTrue(text.length() == 0);
assertEquals(text, conn.getText());
assertEquals(expected, displayedText);
assertEquals(1, mapContent.layers().size()); assertTrue(mapContent.layers().get(0) == layer2); assertTrue(layer1.isDisposed()); assertFalse(layer2.isDisposed());
assertEquals("IllegalArgumentException", windowFixture.component().getTitle());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertTrue(geom instanceof com.vividsolutions.jts.geom.Polygon); assertEquals(-10.0, geomEnv.getMinX(), TOL); assertEquals(10.0, geomEnv.getMaxX(), TOL); assertEquals(-5.0, geomEnv.getMinY(), TOL); assertEquals(5.0, geomEnv.getMaxY(), TOL);
assertTrue(g.isValid()); assertTrue(g.isValid()); assertEquals(4, g.getCoordinateSequence().size());
assertEquals(1, time.size()); assertEquals("2011-01-01T00:00:00.000Z",df.format(time.get(0)));
assertEquals(PROJECTED[i], dst[i], 0.1); assertEquals(true, mt.checkReciprocal(src, target, false)); assertEquals(true, mt.checkReciprocal(target, src, true)); assertEquals(GEOGRAPHIC[i], dst[i], 0.0001);
assertNotNull(image); assertEquals(187, image.getData().getSample(1, 5, 0)); assertFalse(readSuccess);
assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals("crs", parser.type.name); assertEquals("EPSG", parser.authority); assertNull ( parser.version); assertEquals("4326", parser.code); assertEquals("EPSG:4326", parser.getAuthorityCode());
assertEquals("Invalid attribute count", 2, featureType.getAttributeCount()); assertEquals("Invalid geometry attribute name", "quux", geometryDescriptor.getLocalName());
assertEquals(2, result.size());
assertEquals(1, result.size()); assertEquals(1, ml.getNumGeometries()); assertEquals(4, cs.size());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.000Z",df.format(time.get(0)));
assertEquals(1, mapContent.layers().size()); assertTrue(mapContent.layers().get(0) == layer2); assertTrue(layer1.isDisposed()); assertFalse(layer2.isDisposed());
assertNull(b.unset().build()); assertNotNull(b.reset().build());
assertNotNull("Failure creating data store", dataStore);
assertEquals("My GeoServer WFS", wfs.getServiceTitle());
assertSame(Version.v1_1_0, wfs.getServiceVersion());
assertEquals("first123_second678_fullabc123_678", result);
assertNotNull(complexSource); assertEquals(targetType, complexSource.getSchema());
assertEquals( 1, def.size() ); assertEquals( "the_geom", def.get(0).name ); assertTrue( def.get(0).expression instanceof PropertyName );
assertEquals(0, params.size());
assertTrue(output.norm().equalsExact(expectedOutput.norm()));
assertEquals(1, XPathUtil.rootElementSteps(descriptor, namespaces).size()); assertEquals(rootQName, step.getName()); assertEquals(1, XPathUtil.rootElementSteps(descriptor, namespaces).size()); assertEquals(rootQName, step.getName());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertEquals("2011-10-10T00:00:00.000Z",df.format(time.get(0)));
assertEquals(11, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter("state_name = \'baloon\'"))).size());
assertEquals(dest0.x, -dest180.x, TOL); assertEquals(dest0.y, dest180.y, TOL); assertEquals(dest0.z, dest180.z, TOL);
assertNotNull(helper); assertEquals(GridCoverageLayerHelper.class, helper.getClass());
assertNotNull(featureTypes);
assertEquals(features, reader.getCount()); assertEquals(shpFiles.getTypeName() + "." + i, reader.next()); assertEquals(shpFiles.getTypeName() + "." + i, i - 1, reader.currentSHXIndex()); assertEquals(features, i - 1);
assertNotNull(f); assertTrue(filter.evaluate(f)); assertFalse(badFilter.evaluate(f)); assertEquals(expectedCount, count);
assertNull(bbox.getCoordinateReferenceSystem()); assertEquals( australia.getCoordinateReferenceSystem(), bbox.getCoordinateReferenceSystem() );
assertEquals(1, time.size()); assertEquals("2011-10-10T00:00:00.000Z",df.format(time.get(0)));
assertNotNull(geometry); assertNotNull(geometry); assertNotNull(geometry); assertNotNull(geometry); assertTrue( geometry.isEmpty() );
assertTrue(atts.contains("attribute")); assertEquals(1, atts.size()); assertTrue(extractor.getDefaultGeometryUsed());
assertEquals(9, size); assertEquals(0, STATES.getFeatures(f).size()); assertEquals(0, transformed.getFeatures(f).size());
assertNotNull(found); assertEquals(fid, found);
assertEquals(p.getX(), pos.x, TOL); assertEquals(p.getY(), pos.y, TOL);
assertEquals(1.0, Filters.number("1.0"), DELTA); assertEquals(1, Filters.number("1"), DELTA);
assertTrue(line.isEmpty()); assertEquals(2, line.getCoordinateSequence().getDimension());
assertSame(crs, co.getSourceCRS()); assertSame(crs, co.getTargetCRS()); assertTrue(co.getMathTransform() instanceof MathTransform); assertEquals(p[0], SRC_TEST_POINT[0], 1e-8); assertEquals(p[1], SRC_TEST_POINT[1], 1e-8);
assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("persons = 0"))).size()); assertEquals(1, rfc.size()); assertTrue(fi.hasNext()); assertEquals("Illinois", sf.getAttribute("state_name"));
assertTrue(env2D.boundsEquals(refEnv, 0, 1, TOL));
assertEquals(2, mp.getNumGeometries()); assertEquals(2, p.getCoordinateSequence().getDimension());
assertThat(typeName(new File("testMe.json")), is(equalTo("testMe"))); assertThat(typeName(new File("c:/testMe.json")), is(equalTo("testMe"))); assertThat(typeName(new File("/opt/tomcat/webapps/data/mongodb-schemas/teststore/testMe.json")), is(equalTo("testMe")));
assertTrue(hints.contains(Hints.FEATURE_DETACHED));
assertEquals(text, clipText);
assertEquals(transform.getSourceDimensions(), 2);
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertEquals(1, result.size()); assertEquals(1, ml.getNumGeometries()); assertEquals(3, cs.size());
assertTrue(CRS.equalsIgnoreMetadata(wgs84, coverage.getCoordinateReferenceSystem())); assertEquals(worldEnvelope, new ReferencedEnvelope(coverage.getEnvelope()));
assertEquals(urn, e.getAuthorityCode());
assertTrue( "Sorting is optional", factory.canProcess(params) ); assertTrue( "Shape NG supported", factory.canProcess(params) ); assertTrue( "Plain shape supported", factory.canProcess(params) ); assertTrue( "Plain index supported", factory.canProcess(params) ); assertFalse( "Feeling blue; don\'t try a smruf", factory.canProcess(params) );
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("persons = 0"))).size()); assertEquals(1, rfc.size()); assertTrue(fi.hasNext()); assertEquals("Illinois", sf.getAttribute("name"));
assertEquals(expected, actual); assertEquals(expected, actual);
assertEquals(0, result.size()); assertFalse(fi.hasNext());
assertEquals("Unexpected strategy", CSVSpecifiedLatLngStrategy.class, csvStrategy.getClass());
assertFalse(polygon.isValid()); assertEquals(2, validPols.size()); assertEquals(5, polygon1.getNumPoints()); assertEquals(5, polygon2.getNumPoints());
assertEquals(name, id.getName()); assertEquals("EPSG:5715", id.getIdentifier()); assertNull(id.getRemarks()); assertNull(id.getAlias()); assertEquals(20, length); assertNotEquals(id, id2); assertSame(id, id3); assertEquals(id, id3);
assertEquals(1, CoordinateSequences.coordinateDimension(geom));
assertEquals(3, CoordinateSequences.coordinateDimension(geom));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:00:00.000Z",df.format(time.get(0)));
assertEquals(42, (int) p.getCoordinate().z);
assertNotNull(testFile); assertNull(reader); assertNull(reader); assertNull(reader); assertNull(value); assertTrue("Some of the unsopported method did not send an exception",false);
assertEquals(expected, actual);
assertTrue(rects.get(covValue[0]).contains(geoP.x, geoP.y));
assertNotNull("Could not create datastore from url params", dataStore);
assertNotNull(typeNames); assertEquals(expectedTypeNames.size(), names.size()); assertEquals(expectedTypeNames, names);
assertNotNull(testFile); assertTrue(format.accepts(testFile)); assertNotNull(reader); assertEquals("pyramid", coverage.getName().toString()); assertNotNull("Null value returned instead of a coverage", coverage); assertTrue("coverage dimensions different from what we expected", coverage.getGridGeometry().getGridRange().getSpan(0) == 250 && coverage.getGridGeometry().getGridRange().getSpan( 1) == 250);
assertTrue( worldPoint instanceof Point ); assertEquals( point.getX(), worldPoint.getCoordinate().x,0.00000001);
assertTrue(ra.hasNext());
assertSame(SampleDimensionType.UNSIGNED_8BITS, TypeMap.getSampleDimensionType( sm, 0)); assertSame(SampleDimensionType.UNSIGNED_8BITS, TypeMap.getSampleDimensionType( sm, 1)); assertSame(SampleDimensionType.UNSIGNED_8BITS, TypeMap.getSampleDimensionType( sm, 2));
assertTrue(doesEntryExists(GeoPackage.GEOMETRY_COLUMNS, entry)); assertFalse(doesEntryExists(GeoPackage.GEOMETRY_COLUMNS, entry));
assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter("persons = 0"))).size()); assertEquals(1, rfc.size()); assertTrue(fi.hasNext()); assertEquals("illinois", sf.getAttribute("name"));
assertEquals(0, params.size());
assertTrue(parseObject instanceof Calendar); assertEquals(year, 2014); assertEquals(month, 9); assertEquals(day, 12); assertEquals(hours, 9); assertEquals(mins, 0); assertEquals(sec, 0); assertEquals(millis, 0);
assertTrue(CRS.equalsIgnoreMetadata(DefaultGeographicCRS.WGS84, sg.getUserData()));
assertEquals(3, line.getCoordinateSequence().getDimension());
assertTrue(featureCollection.isEmpty());
assertEquals("archsites_Type", wfs.getFeatureTypeTitle(GEOS_ARCHSITES.FEATURETYPENAME));
assertEquals(re, ae);
assertEquals("crs", parser.type.name); assertEquals("EPSG", parser.authority); assertEquals("6.11.2", parser.version.toString()); assertEquals("4326", parser.code); assertEquals("EPSG:4326", parser.getAuthorityCode());
assertEquals("Invalid attribute count", 2, featureType.getAttributeCount()); assertEquals("Invalid featuretype name", "foo", featureType.getName().getLocalPart()); assertEquals("Invalid name", "foo", featureType.getTypeName()); assertEquals("Invalid number of attributes", 2, attrs.size()); assertEquals("Invalid property descriptor", "morx", attrNames.get(0)); assertEquals("Invalid property descriptor", "quux", attrNames.get(1));
assertNull(resultType); assertNull(kvpParameters.get("RESULTTYPE"));
assertEquals(5, time.size()); assertEquals(1318241472000l, time.get(0).getTime()); assertEquals(1318241472000l + (3600 * 1000 * 4), time.get(time.size()-1).getTime());
assertEquals(p[0], TEST_POINT_SRC[0], TOLERANCE); assertEquals(p[1], TEST_POINT_SRC[1], TOLERANCE);
assertEquals(TITLE, windowFixture.component().getTitle()); assertTrue(textBox.component() instanceof JTextArea); assertEquals(JTextReporter.DEFAULT_TEXTAREA_ROWS, textArea.getRows()); assertEquals(JTextReporter.DEFAULT_TEXTAREA_COLS, textArea.getColumns()); assertEquals(expectModal, df.component().isModal()); assertEquals(expectResizable, df.component().isResizable()); assertEquals(expectAlwaysOnTop, df.component().isAlwaysOnTop());
assertEquals("Unexpected strategy", CSVLatLonStrategy.class, csvStrategy.getClass());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertTrue(now < time.get(0).getTime());
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:20.666Z",df.format(time.get(0)));
assertEquals(1, time.size()); assertEquals("2011-10-10T10:11:00.000Z",df.format(time.get(0)));
assertNotNull(initialContext.lookup(jndiRef)); assertNotNull(dataStore); assertNotNull(session);
assertEquals(defaultValue, value);
assertNull(parentFirstPluginClassLoader.getResource("META-INF/non-existing-file"));
assertTrue(result.hasCyclicDependency());
assertTrue(result.getWrongVersionDependencies().isEmpty());
assertThat(compilation).succeededWithoutWarnings(); assertEquals(3, generatedFiles.size()); assertNull(extension);
assertThat(compilation).succeededWithoutWarnings(); assertEquals(2, generatedFiles.size()); assertNotNull(extension);
assertNull(plugin);
assertEquals(pluginZip.unzippedPath(), unzipped); assertTrue(Files.exists(unzipped.resolve("classes/META-INF/plugin-file")));
assertNotSame(extensionOne, extensionTwo);
assertSame(extensionOne, extensionTwo);
assertEquals(0, descriptorFinder.size()); assertEquals(1, descriptorFinder.size());
assertEquals(2, result.size()); assertEquals(1, result.size());
assertEquals(expected, result);
assertEquals(3, pluginPaths.size());
assertFalse(parentFirstPluginClassLoader.getResources("META-INF/non-existing-file").hasMoreElements());
assertNull(parentLastPluginClassLoader.getResource("META-INF/non-existing-file"));
assertFalse(parentLastPluginClassLoader.getResources("META-INF/non-existing-file").hasMoreElements());
assertEquals(1, extensions.size());
assertNotNull(result); assertThat(result, instanceOf(TestPlugin.class));
assertNull(plugin);
assertNotNull(pluginDescriptor); assertEquals("test-plugin-1", pluginDescriptor.getPluginId()); assertEquals("0.0.1", pluginDescriptor.getVersion());
assertEquals(expected, result);
assertTrue(result.getNotFoundDependencies().isEmpty()); assertEquals(result.getSortedPlugins(), Arrays.asList("p2", "p1"));
assertEquals(2, list.size());
assertEquals(expected, descriptor.getDependencies());
assertFalse(statusProvider.isPluginDisabled("plugin-1")); assertTrue(statusProvider.isPluginDisabled("plugin-2")); assertTrue(statusProvider.isPluginDisabled("plugin-3"));
assertThat(read.containsKey("hello"), is(true)); assertThat(read.get("hello"), is(Collections.singleton("World")));
assertEquals(extra, FileUtils.expandIfZip(extra)); assertEquals(folder, FileUtils.expandIfZip(folder));
assertFalse(versionManager.checkVersionConstraint("1.4.3", ">2.0.0")); assertTrue(versionManager.checkVersionConstraint("1.4.3", ">=1.4.0 & <1.6.0"));
assertFalse(result.getNotFoundDependencies().isEmpty()); assertEquals(result.getNotFoundDependencies(), Arrays.asList("p2", "p3"));
assertThat(entries.size(), is(1)); assertThat(entries.contains("World"), is(true));
assertEquals(expected, result);
assertNotNull(extensionFactory.create(TestExtension.class));
assertNull(plugin);
assertEquals(2, list.size()); assertEquals(2, list.size()); assertEquals(0, list.size());
assertEquals(0, list.size());
assertTrue(pluginJar.file().exists()); assertEquals(1, pluginManager.getPlugins().size()); assertNotNull(pluginsStorages); assertNotNull(pluginStorages); assertEquals(1, pluginStorages.size()); assertThat(pluginStorages, contains(TestExtension.class.getName())); assertTrue(fileDeleted); assertFalse(pluginJar.file().exists());
assertTrue(statusProvider.isPluginDisabled("plugin-1")); assertTrue(statusProvider.isPluginDisabled("plugin-2")); assertTrue(statusProvider.isPluginDisabled("plugin-3"));
assertTrue(versionManager.compareVersions("1.1.0", "1.0.0") > 0);
assertFalse(statusProvider.isPluginDisabled("plugin-1")); assertTrue(statusProvider.isPluginDisabled("plugin-2")); assertFalse(statusProvider.isPluginDisabled("plugin-3"));
assertEquals(pluginZip.unzippedPath(), unzipped); assertTrue(Files.exists(unzipped.resolve("plugin.properties")));
assertFalse(result.getWrongVersionDependencies().isEmpty());
assertEquals(expected, result);
assertEquals("trimmed value", "text to trim", config.getNestedConfig().getStringSetting());
assertEquals("SchemaVersion matches", SCHEMA_VERSION,e.schemaVersion()); assertTrue("SchemaId doesn\'t match", !Arrays.equals(schemaId, e.schemaId())); assertTrue("SchemaId (14 bytes) matches", Arrays.equals(Arrays.copyOfRange(schemaId, 2, schemaId.length), Arrays.copyOfRange(e.schemaId(), 2, schemaId.length)));
assertEquals(rc1.equals(rc2), false);
assertEquals("Timestamp matches", timeStamp,e.timestampInNanos());
assertEquals(4, serverInfo.getSources().size()); assertEquals(true, serverInfo.supportsSources(Arrays.asList("source1"))); assertEquals(true, serverInfo.supportsSources(Arrays.asList("source3"))); assertEquals(true, serverInfo.supportsSources(Arrays.asList("source2", "source4"))); assertEquals(false, serverInfo.supportsSources(Arrays.asList("source5"))); assertEquals(false, serverInfo.supportsSources(Arrays.asList("source3", "source1")));
assertTrue(dbuf.getScnIndex().getUpdateOnNext()); assertTrue(dbuf.appendEvent(new DbusEventKey(key), pPartitionId, lPartitionId, timeStamp, srcId, schemaId, value.getBytes(Charset.defaultCharset()), false));
assertTrue(e.isValid());
assertEquals(_eventBufferMult.bufsNum(), 3);
assertTrue(e.isValid());
assertEquals(true, jsonString.contains("\\"name\\":\\"test\\"")); assertEquals(true, jsonString.contains("[\\"source1\\",\\"source2\\",\\"source3\\",\\"source4\\"]"));
assertEquals("expected empty dataValues array", 0, dataValues.length); assertEquals("expected NaN for 50th percentile of empty array", Double.NaN, result); assertEquals("expected NaN for max of empty array", Double.NaN, result);
assertTrue(e.isValid()); assertEquals("value CRCs should match", calcValueCRC, actualValueCRC); assertEquals("value CRCs should match", calcValueCRC+1, actualValueCRC); assertTrue(!e.isValid());
assertEquals(cp.getInit(), true); assertEquals(cp.getInit(), false); assertEquals(cp.getInit(), true);
assertNotNull("Uri is null.", pStatic.getUri()); assertNotNull("Name is null.", pStatic.getName()); assertEquals(100, pStatic.getId(),"physical source id mismatch:"); assertEquals(4, lSources.size(), "number of logical sources"); assertEquals(2, lSource.getId(), "logical source id");
assertEquals(rc1.equals(rc2), false);
assertEquals(cp, newCp);
assertNotNull(NameParserGbifV1.fromGbif(t));
assertEquals("aCcepTed", NormalizeUtils.trimToNull("aCcepTed ")); assertEquals("nuller", NormalizeUtils.trimToNull("nuller ")); assertNull(NormalizeUtils.trimToNull("NuLL ")); assertNull(NormalizeUtils.trimToNull(" ")); assertNull(NormalizeUtils.trimToNull(" NULL ")); assertNull(NormalizeUtils.trimToNull(" ")); assertNull(NormalizeUtils.trimToNull("\\\\N "));
assertNull(pn.authorshipComplete()); assertEquals("L.", pn.authorshipComplete()); assertEquals("(Bassier) L.", pn.authorshipComplete()); assertEquals("(Bassier) L.", pn.authorshipComplete()); assertEquals("(Bassier) L. & Rohe", pn.authorshipComplete()); assertEquals("(Bassier) L. & Rohe", pn.authorshipComplete()); assertEquals("(Bassier) L. & Rohe : Fr.", pn.authorshipComplete());
assertEquals("Abies alba", parser.parseToCanonical("Abies alba Mill.")); assertNull(parser.parseToCanonical("BOLD:AAX3687", Rank.SPECIES));
assertEquals("BOLD:AAX3687", parser.parseToCanonicalOrScientificName("BOLD:AAX3687", Rank.SPECIES)); assertEquals("Abies alba", parser.parseToCanonicalOrScientificName("Abies alba")); assertEquals("Abies alba x Pinus graecus L.", parser.parseToCanonicalOrScientificName("Abies alba x Pinus graecus L."));
assertEquals("", JOB.preClean("")); assertEquals("Hallo Spencer", JOB.preClean("Hallo Spencer ")); assertEquals("Hallo Spencer", JOB.preClean("\' \'Hallo Spencer"));
assertNotNull(NameParserGbifV1.toGbif(t));
assertEquals(r.getMarker(), r, RankUtils.inferRank(r.getMarker()));
assertEquals("accepted", NormalizeUtils.normalizeTerm("aCcepTed ")); assertEquals("accepted", NormalizeUtils.normalizeTerm("accepted"));
assertEquals("L. : Pers.", pn.authorshipComplete());
assertNull(auth.toString()); assertEquals("L.", auth.toString()); assertEquals("L. & Rohe", auth.toString()); assertEquals("1878", auth.toString()); assertEquals("L. & Rohe, 1878", auth.toString()); assertEquals("Bassier ex L. & Rohe, 1878", auth.toString());
assertNotNull(NameParserGbifV1.gbifNameType(pn)); assertEquals(NameType.CANDIDATUS, NameParserGbifV1.gbifNameType(pn)); assertEquals(NameType.CULTIVAR, NameParserGbifV1.gbifNameType(pn)); assertEquals(NameType.DOUBTFUL, NameParserGbifV1.gbifNameType(pn)); assertEquals(NameType.BLACKLISTED, NameParserGbifV1.gbifNameType(pn));
assertEquals("(Carl., 1999)", NameFormatter.authorshipComplete(pn)); assertEquals("(Carl., 1999) Mill., 1887", NameFormatter.authorshipComplete(pn));
assertEquals(r, RankUtils.inferRank(r.getMarker())); assertEquals(r, RankUtils.inferRank("notho"+r.getMarker()));
assertNotNull(NameParserGbifV1.toGbif(t));
assertEquals("OUTAGE,null,null,java.lang.NullPointerException", compDep.call().getErrorMessage());
assertEquals(ImmutableList.of(listener1, listener2, listener3), Arrays.asList(Iterators.toArray(actual, StatusUpdateListener.class)));
assertThat(actual, notNullValue()); assertThat(actual.getContent().getFormatFamilyId(), is(CSVFormatFamily.BEAN_ID)); assertThat(actual.getContent().getMediaType(), is("text/csv")); assertThat(actual.getContent().getParameters().get("SEPARATOR"), is(";"));
assertEquals("[]", actual, true);
assertFalse(applyPreparationExportStrategy.test(null));
assertThat(schema.getSheetContents(), is(notNullValue())); assertThat(schema.draft(), is(false)); assertThat(schema.getSheetName(), is("Feuille1"));
assertThat(content, sameJSONAsFile(expected));
assertThat(outputStream.toString()).isEqualTo(expectedCsv);
assertThat(response.getStatusCode(), is(200)); assertNotNull(folders); assertEquals(2, folders.size()); assertNotNull(preparations); assertEquals(3, preparations.size()); assertNotNull(dataset); assertTrue(dataset.has("dataSetName"));
assertNull(stream);
assertTrue(parameters.containsKey("new_value")); assertTrue(parameters.containsKey("original_value")); assertFalse(parameters.containsKey(CELL_VALUE)); assertFalse(parameters.containsKey(REPLACE_VALUE)); assertEquals(1, actionUpdated); assertEquals(33, actionNotUpdated);
assertEquals(VERSION, task.getTarget());
assertTrue(wasCalled.get());
assertFalse(wasCalled.get());
assertNull(repository.get(expected.id(), Preparation.class)); assertNull(repository.get(expected.id(), PreparationActions.class));
assertTrue(FileSystemUtils.hasEntry(testFolder));
assertThat(preparation.getHeadId(), is(Step.ROOT_STEP.getId())); assertThat(preparation.getLastModificationDate(), is(greaterThan(oldModificationDate))); assertThat(headAction.getActions(), hasSize(1)); assertThat(headAction.getActions().get(0).getName(), is("copy"));
assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(repository.list(Preparation.class).count(), is(1L)); assertThat(repository.list(Preparation.class).count(), is(0L));
assertThat(actual, notNullValue()); assertThat(actual.getContent().getFormatFamilyId(), is(CSVFormatFamily.BEAN_ID)); assertThat(actual.getContent().getMediaType(), is("text/csv")); assertThat(actual.getContent().getParameters().get("SEPARATOR"), is(",")); assertThat(actual.getEncoding(), is("UTF-16LE"));
assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(repository.list(Preparation.class).count(), is(1L)); assertThat(preparation.id(), is(preparationId)); assertThat(preparation.getName(), is("test_name")); assertThat(doesPreparationExists(preparationId), is(true)); assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(doesPreparationExists(preparationId), is(false));
assertTrue(separatorAnalyzer.compare(commaSeparator, semiColonSeparator) < 0);
assertThat(lookups.size(), is(1));
assertThat(result, sameJSONAs(expected));
assertEquals(CommonErrorCodes.UNEXPECTED_EXCEPTION, e.getCode());
assertEquals("contentId", properties.getProperty("contentId")); assertEquals("folderId", properties.getProperty("folderId")); assertEquals(FolderContentType.PREPARATION, FolderContentType.fromName(properties.getProperty("contentType")));
assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
assertEquals(datasetLabel, result.getDataSetName());
assertThat(ids, hasItem(Step.ROOT_STEP.id())); assertThat(ids, hasItem(step1.id())); assertThat(ids, not(hasItem(step2.id()))); assertThat(ids, hasItem(Step.ROOT_STEP.id())); assertThat(ids, hasItem(step1.id())); assertThat(ids, hasItem(step2.id()));
assertThat(preparationIds, hasItem(preparation1)); assertThat(preparationIds, hasItem(preparation2)); assertThat(preparationIds, not(hasItem(preparation3))); assertThat(preparationIds, not(hasItem(preparation4))); assertThat(preparationIds, not(hasItem(preparation5)));
assertFalse(csvSchemaParser.accept(metadata));
assertThat(response.getStatusCode(), is(200)); assertEquals("yap", repository.get(originalId, Preparation.class).getName());
assertFalse(contentCache.has(key)); assertTrue(contentCache.has(key));
assertThat(columnMetadatas).isNotNull().isNotEmpty().hasSize(2);
assertTrue(id1.compareTo(id2) > 0);
assertEquals(0, repository.size()); assertEquals(count, repository.size()); assertEquals(0, repository.size());
assertTrue(wasCalled.get());
assertFalse(cachedExportStrategy.test(parameters));
assertEquals(200, response.getStatusCode()); assertTrue(rootNode.isArray()); assertEquals(6, rootNode.size());
assertThat(preparationService .listAll(null, null, "/prep_name_home", null, null) .collect(Collectors.toList()) .size(), is(1));
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertTrue(StringUtils.equals("UTF-8", actual.getEncoding()));
assertTrue(limit.isPresent()); assertThat(limit.get(), is(newLimit));
assertThat(response.getStatusCode(), is(200)); assertEquals(bar.getId(), actual.getId());
assertTrue(actual.getFormatFamily() instanceof CSVFormatFamily); assertEquals("ISO-8859-1", actual.getEncoding());
assertFalse(wasCalled.get());
assertEquals("My response", value);
assertEquals(lock1, lock2);
assertTrue(fileSystemPreparationRepository.list(Preparation.class).allMatch(p -> p.getRowMetadata() == null)); assertTrue(fileSystemPreparationRepository.list(Preparation.class).allMatch(p -> p.getRowMetadata() != null));
assertEquals(3, receivedData.size()); assertEquals("1", receivedData.get(0).getValue()); assertEquals("2", receivedData.get(1).getValue()); assertEquals("3", receivedData.get(2).getValue());
assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(repository.list(Preparation.class).count(), is(1L)); assertThat(first.isPresent(), is(true)); assertThat(preparation.id(), is(preparationId)); assertThat(preparation.getName(), is("test_name")); assertThat(preparation.getAuthor(), is(System.getProperty("user.name"))); assertThat(preparation.getAppVersion(), is(versionService.version().getVersionId()));
assertThat(content, sameJSONAsFile(expected));
assertFalse(matches);
assertThat(response.getStatusCode(), is(204)); assertThat(folders, is(empty()));
assertThat(totalSize, is(5488927L));
assertThat(steps, hasItem(Step.ROOT_STEP)); assertThat(steps, hasItem(step1)); assertThat(steps, not(hasItem(step2))); assertThat(steps, hasItem(Step.ROOT_STEP)); assertThat(steps, hasItem(step1)); assertThat(steps, hasItem(step2));
assertTrue(format.supportSampling());
assertTrue(repository.size() > 0); assertEquals(0, repository.size());
assertTrue(wasCalled.get());
assertTrue(reorderStepsUtils.isStepOrderInvalid(steps));
assertNull(actual);
assertThat(response.getStatusCode(), is(404));
assertTrue(wasCalled.get());
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertEquals("UTF-8", actual.getEncoding());
assertEquals(4, stepIds.size()); assertThat(headActions.getActions(), hasSize(3)); assertThat(headActions.getActions().get(0).getName(), is("copy")); assertThat(headActions.getActions().get(1).getName(), is("copy")); assertThat(headActions.getActions().get(2).getName(), is("uppercase"));
assertThat(response.getStatusCode(), is(200)); assertEquals("prep_1 copy", repository.get(entry.getContentId(), Preparation.class).getName()); assertTrue(found);
assertEquals(datasetLabel, result.getDataSetName());
assertEquals("My Value", value.value);
assertNotEquals(lock1, lock2); assertNotEquals(lock1, lock3); assertNotEquals(lock2, lock3);
assertTrue(matches);
assertEquals(oldName, folderPath.getName()); assertEquals(newName, folderPath.getName());
assertTrue(actual.getFormatFamily() instanceof UnsupportedFormatFamily);
assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(repository.list(Preparation.class).count(), is(2L)); assertThat(repository.list(Preparation.class).count(), is(1L));
assertFalse(new FolderPath("foo").isRoot());
assertEquals(propertyEncodedValue, properties.getProperty(propertyKey)); assertEquals(mongoPropValueEncrypted, properties.getProperty(mongoPropName));
assertEquals(NAME, value);
assertTrue(wasCalled.get());
assertFalse(wasCalled.get());
assertThat(result.isDraft(), is(false));
assertTrue(actual.getFormatFamily() instanceof UnsupportedFormatFamily);
assertEquals(preparationIds.size(), actual.size()); assertEquals(preparationIds.get(i), actual.get(i).getId());
assertFalse("The OptimizedExportStrategy should not be acceptable if version is ROOT_STEP", optimizedExportStrategy.test(exportParameters));
assertThat(format.getOrder(), is(-1));
assertEquals(CommonErrorCodes.UNEXPECTED_EXCEPTION, e.getCode());
assertThat(preparation.getLastModificationDate(), is(greaterThan(oldModificationDate))); assertThat(head.getParent(), is(firstStepId));
assertTrue(result);
assertEquals("|", entryParameters.get(SEPARATOR_PARAMETER)); assertEquals("0", entryParameters.get(HEADER_NB_LINES_PARAMETER)); assertEquals(null, entryParameters.get(HEADER_COLUMNS_PARAMETER));
assertNotNull(DataprepBundle.getDataprepBundle());
assertFalse(WrapperProcessor.isValidWrapper(new InvalidWrapper()));
assertEquals(ENCRYPTED_URI, encrypted);
assertTrue(result);
assertThat(keyStr, is("transformation_prep1_dataset1_b6aa01425c31e1eed71d0c3cbc7763aad865d1b1"));
assertFalse(wasCalled.get());
assertTrue(extractDatePart.isPresent()); assertEquals(Locale.getDefault().getLanguage(), extractDatePart.get().getParameters().get(ExtractDateTokens.LANGUAGE));
assertEquals(messagesProperties.getProperty(key), DataprepBundle.message(key));
assertThat(response.getStatusCode(), is(200)); assertEquals("the new preparation", repository.get(copyId, Preparation.class).getName()); assertEquals(System.getProperty("user.name"), repository.get(copyId, Preparation.class).getAuthor()); assertNotNull(repository.get(copyId, Preparation.class).getRowMetadata());
assertThat(dataSetMetadataRepository.get(dataSetId), nullValue());
assertThat(preparationContent, sameJSONAsFile(PreparationAPITest.class.getResourceAsStream("t-shirt_100.csv.expected.json")));
assertEquals(1, identifiableList.size()); assertEquals(step, iterator.next());
assertFalse(wasCalled.get()); assertTrue(wasCalled.get());
assertTrue(wasCalled.get());
assertTrue(Files.exists(tempFile)); assertFalse(Files.exists(tempFile));
assertThat(contentAsString, sameJSONAsFile(expected));
assertThat(dataSetContent, sameJSONAs(expectedContent).allowingExtraUnexpectedFields());
assertThat(response.getStatusCode(), is(200)); assertEquals("moved preparation", repository.get(originalId, Preparation.class).getName());
assertTrue(names.containsAll(expected));
assertFalse(optimizedExportStrategy.test(exportParameters));
assertFalse(cachedExportStrategy.test(null));
assertThat(records.size(), is(100));
assertEquals(DECRYPTED_URI, decrypted);
assertFalse(wasCalled.get());
assertThat(response.getStatusCode(), is(404));
assertThat(preparationService .listAll(null, null, "/foo/prep_name_foo", null, null) .collect(Collectors.toList()) .size(), is(1));
assertEquals(GZIPOutputStream.class, stream.getClass());
assertEquals("1.0.0", manifestInfo.getVersionId()); assertEquals("abcd1234", manifestInfo.getBuildId());
assertThat(dataSetMetadataRepository.get(dataSetId), nullValue());
assertThat(contentAsString, sameJSONAsFile(expected));
assertThat(dataSetMetadataRepository.get(metadata.getId()), notNullValue()); assertThat(actual.getContent().getNbLinesInHeader(), is(1)); assertThat(actual.getContent().getNbLinesInFooter(), is(0)); assertThat(actual.getLifecycle().contentIndexed(), is(true));
assertTrue(id1.compareTo(id2) < 0);
assertThat(response.asString(), sameJSONAs(expected).allowingExtraUnexpectedFields());
assertTrue(WrapperProcessor.isValidWrapper(null));
assertFalse(wasCalled.get());
assertNotNull(locale); assertEquals(Locale.JAPANESE, locale);
assertEquals(i, task.getId().getOrder());
assertEquals("N/A", manifestInfo.getVersionId()); assertEquals("N/A", manifestInfo.getBuildId());
assertThat(result.isDraft(), is(true));
assertNull(conversionService.convert(null, Object.class));
assertEquals(mostRecentEndDate, unOrderedAsyncs.get(0).getTime().getEndDate());
assertEquals("test", new String(outputStream.toByteArray()));
assertNotNull(folderEntry); assertEquals(contentId, folderEntry.getContentId()); assertEquals(folderId, folderEntry.getFolderId()); assertEquals(contentType, folderEntry.getContentType());
assertTrue(separatorAnalyzer.compare(commaSeparator, semiColonSeparator) < 0);
assertFalse(result);
assertThat(response.getStatusCode(), is(404));
assertEquals(expected, actual);
assertTrue(wasCalled.get());
assertThat(tdpException.getLocalizedMessage(), startsWith("Une erreur inattendue est survenue"));
assertNotNull(settings); assertEquals(settings.size(), 6); assertTrue(settings.contains(HomeViews.appHeaderBar())); assertTrue(settings.contains(HomeViews.sidePanel())); assertTrue(settings.contains(HomeViews.breadcrumb())); assertTrue(settings.contains(ListViews.folderList())); assertTrue(settings.contains(ListViews.preparationList())); assertTrue(settings.contains(PlaygroundViews.playgroundAppHeaderBar()));
assertEquals(3, stepIds.size()); assertEquals(singletonList("0004"), repository.get(stepIds.get(1), Step.class).getDiff().getCreatedColumns()); assertEquals(asList("0005", "0006"), repository.get(stepIds.get(2), Step.class).getDiff().getCreatedColumns());
assertEquals(StepMarker.Result.INTERRUPTED, result);
assertThat(preparation.getHeadId(), is(secondStepId)); assertThat(preparation.getHeadId(), is(firstStepId));
assertEquals(updatedMetadata, metadata);
assertEquals("beer", folderPath.getName());
assertEquals(4, newActionFormArray.length); assertArrayEquals(expectedResult, newActionFormArray);
assertTrue(strategy.test(parameters));
assertNotNull(locale); assertEquals(Locale.US, locale);
assertThat(preparationService .listAll(null, null, "prep_name_home", null, null) .collect(Collectors.toList()) .size(), is(1));
assertFalse(cachedExportStrategy.test(parameters));
assertEquals("", value);
assertFalse(wasCalled.get());
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertEquals("UTF-8", actual.getEncoding());
assertEquals(200, response.getStatusCode()); assertTrue(type.has("id")); assertTrue(type.has("label")); assertTrue(type.has("frequency"));
assertThat(format.getOrder(), is(0));
assertEquals(1, actual.size()); assertTrue(actual.contains(expected));
assertEquals("test", new String(outputStream.toByteArray())); assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode()); assertEquals("custom value", responseEntity.getHeaders().get("custom").get(0));
assertNotNull(locale); assertEquals(Locale.US, locale);
assertNotNull(tdpException); assertEquals(UNABLE_TO_CONNECT_TO_STREAMS, tdpException.getCode());
assertEquals(new FolderPath("foo", "bar"), new FolderPath("foo", "bar", "beer").getParent());
assertEquals(404, e.getStatusCode());
assertFalse(result);
assertThat(response.getStatusCode(), is(204));
assertTrue(currentScore >= suggestion.getScore());
assertTrue(new FolderPath().isRoot());
assertTrue(optimizedExportStrategy.test(exportParameters));
assertTrue(p.isReadonly()); assertEquals("Number of action should be the same", actions.size(), detailsPrep.getActions().size()); assertEquals("Number of ActionForm should be the same", actions.size(), detailsPrep.getMetadata().size());
assertTrue(id1.compareTo(id2) > 0);
assertFalse(optimizedExportStrategy.test(exportParameters));
assertTrue(format.supportSampling());
assertNotNull(tdpException); assertEquals(UNEXPECTED_SERVICE_EXCEPTION, tdpException.getCode());
assertTrue(actualErrorCodes.isArray()); assertTrue(actualErrorCodes.size() > 0); assertTrue(currentCode.has("code")); assertTrue(currentCode.has("http-status-code"));
assertNull(stream);
assertThat(response.getStatusCode(), is(200));
assertThat(encodings.isEmpty(), is(false)); assertThat(encodings.get(0), is("UTF-8")); assertThat(encodings.get(1), is("UTF-16"));
assertThat(dataSetMetadataRepository.get("1234"), nullValue());
assertTrue(separatorMap.isEmpty());
assertFalse(wasCalled.get());
assertEquals(runtimeException, e); assertEquals(CommonErrorCodes.UNEXPECTED_EXCEPTION, e.getCode());
assertTrue(actual.getFormatFamily() instanceof HtmlFormatFamily); assertEquals("ISO-8859-1", actual.getEncoding());
assertEquals(DistributedLockWatcher.WatchedDistributedLock.class, lock.getClass());
assertThat(repository.list(Preparation.class).count(), is(0L)); assertThat(createdPreparation.getId(), is(preparationId)); assertThat(updatedId, is(preparationId)); assertThat(preparations.size(), is(1)); assertThat(preparation.getName(), is("test_name_updated")); assertThat(preparation.getLastModificationDate(), is(greaterThan(oldModificationDate))); assertThat(preparation.getAppVersion(), is(versionService.version().getVersionId()));
assertEquals(DESC, value);
assertEquals(StepMarker.Result.COMPLETED, result);
assertTrue(applyPreparationExportStrategy.test(parameters));
assertEquals(initialIds.size(), updatedIds.size());
assertEquals(4, preparationList.get(0).getSteps().size()); assertEquals(8, preparationList.get(1).getSteps().size());
assertTrue(FileSystemUtils.hasEntry(testFolder));
assertTrue(match); assertFalse(noMatch);
assertFalse(wasCalled.get());
assertEquals(messagesProperties.getProperty(producedKey), DataprepBundle.errorTitle(CommonErrorCodes.ILLEGAL_ORDER_FOR_LIST));
assertNotNull(metadata); assertEquals("Test with spaces", metadata.getName());
assertThat(preparation.getHeadId(), is(Step.ROOT_STEP.getId())); assertThat(preparation.getLastModificationDate(), is(greaterThan(oldModificationDate))); assertThat(headAction.getActions(), hasSize(1)); assertThat(copyAction.getName(), is("copy")); assertThat(copyAction.getParameters().get(ImplicitParameters.FILTER.getKey()), is("{\\"eq\\":{\\"field\\":\\"0001\\",\\"value\\":\\"value\\"}}"));
assertFalse(strategy.test(null));
assertNotNull(locale); assertEquals(Locale.US, locale);
assertTrue(numericOpsAction.isPresent()); assertEquals(TRUE.toString(), numericOpsAction.get().getParameters().get(CREATE_NEW_COLUMN));
assertEquals(4, stepIds.size()); assertEquals(newHead, newPreparation.getHeadId());
assertTrue(receivedData.isEmpty());
assertEquals(0, id1.compareTo(id2));
assertThat(preparation.getHeadId(), is(firstStepId));
assertThat(actual, notNullValue()); assertThat(actual.getContent().getFormatFamilyId(), is(XlsFormatFamily.BEAN_ID)); assertThat(actual.getContent().getMediaType(), is("application/vnd.ms-excel")); assertThat(actual.getContent().getParameters().isEmpty(), is(true));
assertEquals(3, stepIds.size()); assertThat(headActions.getActions(), hasSize(2)); assertThat(headActions.getActions().get(0).getName(), is("uppercase")); assertThat(headActions.getActions().get(1).getName(), is("delete_column"));
assertTrue(wasCalled.get());
assertThat(columnMetadatas).isNotNull().isNotEmpty().hasSize(17);
assertThat(preparation.getHeadId(), is(secondStepId)); assertThat(preparation.getLastModificationDate(), is(greaterThanOrEqualTo(oldModificationDate))); assertThat(head.getParent(), is(firstStepId)); assertThat(first.getParent(), is(Step.ROOT_STEP.getId()));
assertEquals("0003", firstStep.getDiff().getCreatedColumns().iterator().next()); assertEquals("0004", secondStep.getDiff().getCreatedColumns().iterator().next()); assertEquals("0004", thirdStep.getActions().iterator().next().getParameters().get(ImplicitParameters.COLUMN_ID.getKey()));
assertNotNull(settings); assertEquals(4, settings.size()); assertTrue(settings.contains(HomeViewsForNonTDPUsers.appHeaderBarForNonTdpUsers())); assertTrue(settings.contains(HomeViewsForNonTDPUsers.sidePanel())); assertTrue(settings.contains(ListViews.folderList())); assertTrue(settings.contains(ListViews.preparationList()));
assertEquals(3, identifiableList.size()); assertEquals(preparation, iterator.next()); assertEquals(step1, iterator.next()); assertEquals(step2, iterator.next());
assertTrue(csvSchemaParser.accept(metadata));
assertThat(dataSetMetadataRepository.get(metadata.getId()), notNullValue()); assertThat(actual.getContent().getNbLinesInHeader(), is(56)); assertThat(actual.getContent().getNbLinesInFooter(), is(0)); assertThat(actual.getLifecycle().contentIndexed(), is(true));
assertEquals("v1", version.getVersionId()); assertEquals("1234-1234", version.getBuildId());
assertThat(list, hasItems("#18875", "#483275"));
assertEquals("v1", version.getVersionId()); assertEquals("1234-5678", version.getBuildId());
assertTrue(matches);
assertNull(result.getDataSetName());
assertEquals(lock1, lock2); assertEquals(lock1, lock3);
assertThat(steps, hasSize(0));
assertEquals("", IOUtils.toString(value, Charset.defaultCharset()));
assertTrue(format.isCompatible(null)); assertTrue(format.isCompatible(new DataSetMetadata()));
assertNotEquals(firstLockForOneValue, secondLockForOneValue); assertNotEquals(firstLockForTwoValue, secondLockForTwoValue);
assertThat(dataSetMetadataRepository.get("1234"), nullValue());
assertFalse(emptyList.hasNext()); assertTrue(Integer.valueOf(dataSetMetadata.getId()) <= expected); assertEquals(expected, count.intValue());
assertFalse(optimizedExportStrategy.test(exportParameters));
assertTrue(separatorAnalyzer.compare(invalidSeparator1, invalidSeparator2) < 0);
assertEquals(6, i);
assertEquals(2, statuses.size()); assertTrue(statuses.contains("OK")); assertTrue(statuses.contains("CANCEL"));
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertEquals(XlsFormatFamily.MEDIA_TYPE, actual.getFormatFamily().getMediaType()); assertEquals("UTF-8", actual.getEncoding());
assertThat(response.getStatusCode(), is(200)); assertNotNull(dataSetMetadataRepository.get(copyId));
assertEquals(3, FileSystemUtils.countSubDirectories(testFolder));
assertEquals(ByteArrayInputStream.class, stream.getClass()); assertEquals(content, IOUtils.toString(stream, "UTF-8"));
assertNull(value);
assertEquals(expected, actual);
assertFalse(wasCalled.get());
assertFalse(reorderStepsUtils.isStepOrderInvalid(steps));
assertThat(keyStr, is("transformation-metadata_prep1_step1_HEAD_user1"));
assertEquals("v1", version.getVersionId()); assertEquals("1234-1234", version.getBuildId());
assertTrue(id1.compareTo(id2) < 0);
assertThat(response.getStatusCode(), is(200)); assertEquals(expected, actual);
assertTrue(actual.getFormatFamily() instanceof HtmlFormatFamily); assertEquals("ISO-8859-1", actual.getEncoding());
assertEquals("# file.password = the file password", line); assertEquals("file = /tmp", line);
assertEquals("text/csv", exportFormatMessage.getMimeType()); assertEquals("CSV", exportFormatMessage.getId()); assertEquals("Local CSV file", exportFormatMessage.getName()); assertEquals(true, exportFormatMessage.isNeedParameters()); assertEquals(false, exportFormatMessage.isDefaultExport()); assertEquals(true, exportFormatMessage.isEnabled()); assertEquals("", exportFormatMessage.getDisableReason()); assertEquals("Export to CSV", exportFormatMessage.getTitle()); assertNotNull(parameters); assertEquals(6, parameters.size());
assertEquals(0, identifiableList.size());
assertNotNull(updated); assertThat(updated.getContent().getFormatFamilyId(), is(CSVFormatFamily.BEAN_ID)); assertThat(updated.getContent().getMediaType(), is("text/csv")); assertThat(updated.getEncoding(), is("windows-1252"));
assertThat( preparationService .listAll(null, null, "foo/prep_name_foo", null, null) .collect(Collectors.toList()) .size(), is(1));
assertNotNull(key.getKey());
assertEquals(Resources.toString(getClass().getResource("keep-layout-test-expected.properties"), Charsets.UTF_8), com.google.common.io.Files.toString(tempFile.toFile(), Charsets.UTF_8));
assertEquals(6, i);
assertEquals(new FolderPath("foo", "bar", "beer"), FolderPath.deserializeFromString("/foo/bar/beer"));
assertEquals("", IOUtils.toString(value, Charset.defaultCharset()));
assertEquals(GZIPInputStream.class, stream.getClass());
assertFalse(applyPreparationExportStrategy.test(parameters));
assertFalse(repository.list().findFirst().isPresent()); assertNull(dataSetMetadata);
assertNotNull(streamingSheet.getReader());
assertThat(preparationService .listAll("prep_name_foo", "/foo", null, null, null) .collect(Collectors.toList()) .size(), is(1));
assertEquals(2, actual.size()); assertTrue(actual.contains(expected1)); assertTrue(actual.contains(expected2));
assertNotNull(dictionaryDirectory); assertNotNull(keywordDirectory);
assertFalse(FileSystemUtils.matches(testEntry, "other id", contentType));
assertThat(schema.getSheetContents(), is(notNullValue())); assertThat(schema.draft(), is(true)); assertThat(schema.getSheetName(), is("Sumary"));
assertFalse(FileSystemUtils.hasEntry(testFolder));
assertTrue(format.isCompatible(null)); assertTrue(format.isCompatible(new DataSetMetadata()));
assertThat(defaultDataSetContent.contains("__tdp"), is(false)); assertThat(dataSetContent.contains("__tdp"), is(false)); assertThat(dataSetContentWithTechnicalContent.contains("__tdp"), is(true));
assertEquals("prep-1234", captor.getValue().getPreparationId()); assertEquals("head", captor.getValue().getPreparation().getHeadId());
assertThat(steps, not(hasItem(Step.ROOT_STEP))); assertThat(steps, hasItem(step1)); assertThat(steps, hasItem(step2)); assertThat(steps, not(hasItem(Step.ROOT_STEP))); assertThat(steps, not(hasItem(step1))); assertThat(steps, hasItem(step2));
assertFalse(cachedExportStrategy.test(parameters));
assertTrue(FileSystemUtils.matches(testEntry, contentId, contentType));
assertEquals(4, Files.walk(testFolder).count()); assertEquals(3, Files.walk(testFolder).count());
assertTrue(match); assertFalse(noMatch);
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertTrue(StringUtils.equals("UTF-8", actual.getEncoding()));
assertEquals(TdqCategories.class, object.getClass());
assertThat(preparationService .listAll("dont_exist", "wrong_folder_path", "/foo/prep_name_foo", null, null) .collect(Collectors.toList()) .size(), is(1));
assertThat(actual, notNullValue()); assertThat(actual.getContent().getFormatFamilyId(), is(CSVFormatFamily.BEAN_ID)); assertThat(actual.getContent().getMediaType(), is("text/csv")); assertThat(actual.getContent().getParameters().get("SEPARATOR"), is("\\t")); assertThat(actual.getEncoding(), is("UTF-16LE"));
assertEquals("name", name);
assertThat(response.getStatusCode(), is(200)); assertThat(response.getStatusCode(), is(200));
assertTrue(format.isCompatible(null)); assertTrue(format.isCompatible(new DataSetMetadata()));
assertTrue(wasCalled.get());
assertThat(emptyRows, is(0L));
assertNull(value);
assertFalse(actual.getContent().getLimit().isPresent());
assertEquals(Long.MAX_VALUE, availableSpace);
assertEquals(VERSION, task.getTarget());
assertThat(preparationService .listAll("prep_name_home", "/", null, null, null) .collect(Collectors.toList()) .size(), is(1));
assertFalse(optimizedExportStrategy.test(null));
assertTrue(separatorAnalyzer.compare(spaceSeparator, tabulationSeparator) < 0); assertTrue(separatorAnalyzer.compare(tabulationSeparator, commaSeparator) < 0); assertTrue(separatorAnalyzer.compare(commaSeparator, semiColonSeparator) < 0);
assertFalse(optimizedExportStrategy.test(exportParameters));
assertEquals(VERSION, task.getTarget());
assertEquals(firstLockForOneValue, secondLockForOneValue);
assertThat(contentAsString, sameJSONAsFile(expected));
assertThat(ids.size(), is(1)); assertThat(before - after, is(1));
assertTrue(wasCalled.get());
assertFalse(csvSchemaParser.accept(metadata));
assertTrue(actual.getFormatFamily() instanceof XlsFormatFamily); assertEquals(XlsFormatFamily.MEDIA_TYPE, actual.getFormatFamily().getMediaType()); assertTrue(StringUtils.equals("UTF-8", actual.getEncoding()));
assertTrue(response.asString().contains(dataSetId));
assertFalse(applyPreparationExportStrategy.test(parameters));
assertThat(tdpException.getMessageTitle(), is("Une erreur est survenue"));
assertEquals(expected, actual);
assertTrue(actual.getFormatFamily() instanceof UnsupportedFormatFamily);
assertEquals(key1.getKey(), key2.getKey());
assertEquals(4.683d, toto.getValue(), 0.001d); assertEquals(7.5d, tata.getValue(), 0);
assertTrue(separatorAnalyzer.compare(semiColonSeparator, commaSeparator) < 0); assertTrue(separatorAnalyzer.compare(commaSeparator, tabulationSeparator) < 0); assertTrue(separatorAnalyzer.compare(tabulationSeparator, spaceSeparator) < 0); assertTrue(separatorAnalyzer.compare(spaceSeparator, invalidSeparator) < 0);
assertThat(ids, not(hasItem(Step.ROOT_STEP.id()))); assertThat(ids, hasItem(step1.id())); assertThat(ids, hasItem(step2.id())); assertThat(ids, not(hasItem(Step.ROOT_STEP.id()))); assertThat(ids, not(hasItem(step1.id()))); assertThat(ids, hasItem(step2.id()));
assertEquals(5, newActionFormArray.length); assertArrayEquals(expectedResult, newActionFormArray);
assertEquals("Export to CSV", DataprepBundle.defaultMessage("export.CSV.title"));
assertThat(preparationService .listAll("dont_exist", "wrong_folder_path", null, null, null) .collect(Collectors.toList()) .size(), is(0));
assertThat(preparationDetails, sameJSONAsFile(expected));
assertThat(preparation.getLastModificationDate(), is(greaterThan(oldModificationDate))); assertThat(head.getParent(), is(Step.ROOT_STEP.getId()));
assertThat(content, sameJSONAsFile(expected));
assertFalse(wasCalled.get());
assertEquals(StepMarker.Result.INTERRUPTED, result);
assertEquals(AsyncExecution.Status.RUNNING, unOrderedAsyncs.get(0).getStatus());
assertEquals(1, identifiableList.size()); assertEquals(preparationActions, identifiableList.iterator().next());
assertFalse(mockTask.applied);
assertEquals(CommonErrorCodes.UNEXPECTED_EXCEPTION, e.getCode());
assertThat(preparations.size(), is(1)); assertThat(preparations.get(0).getName(), is("Preparation"));
assertFalse(optimizedExportStrategy.test(exportParameters));
assertEquals("v1-v2", version.getVersionId()); assertEquals("1234-1234", version.getBuildId());
assertTrue(actual.getFormatFamily() instanceof UnsupportedFormatFamily);
assertEquals("/foo/bar/beer", new FolderPath("foo", "bar", "beer").serializeAsString());
assertEquals(expected, actual);
assertTrue(wasCalled.get());
assertTrue(actual.containsAll(expected) && expected.containsAll(actual));
assertTrue(compatiblePreparations.isEmpty());
assertNotNull(locale); assertEquals(TEST_LOCALE, locale.toLanguageTag());
assertArrayEquals(bytes, result);
assertEquals(0, actual);
assertThat(response.getStatusCode(), is(409)); assertTrue(StringUtils.isNoneBlank(content)); assertTrue(content.contains(FolderErrorCodes.FOLDER_NOT_EMPTY.name())); assertThat(folders, hasSize(1));
assertEquals("prep-1234", captor.getValue().getPreparationId()); assertEquals("step-1234", captor.getValue().getPreparation().getHeadId());
assertTrue(wasCalled.get());
assertThat(format.getOrder(), is(1));
assertFalse(reorderStepsUtils.isStepOrderInvalid(steps));
assertFalse(actual.getFormatFamily() instanceof HtmlFormatFamily);
assertFalse(wasCalled.get());
assertTrue(format.supportSampling());
assertTrue(reorderStepsUtils.isStepOrderInvalid(steps));
assertFalse(optimizedExportStrategy.test(exportParameters));
assertThat(tdpException.getMessage(), startsWith("An unexpected error occurred and we could"));
assertEquals(result, new BigDecimal("-12.7"));
assertEquals(result, new BigDecimal("0.125"));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1"));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD:XYZ"));
assertThat(cookies, hasKey("name"));
assertThat(httpServletRequestImpl.getContentType(), is("SOME_TYPE/TEXT"));
assertThat(servletContextHelper.getResolvedServletMapping(servletContext, "/context/somepath"), is(nullValue()));
assertThat(headers.getFileName(), is("FILE.PDF")); assertThat(headers.getName(), is("FIELDNAME")); assertThat(headers.getContentType(), is("application/pdf"));
assertThat(StringUtilities.isEmpty(null), is(true)); assertThat(StringUtilities.isEmpty(""), is(true)); assertThat(StringUtilities.isEmpty(" "), is(false)); assertThat(StringUtilities.isEmpty("a"), is(false));
assertThat(cookies.size(), is(0));
assertThat(locales.get(0), is(new Locale("pl"))); assertThat(locales.get(1), is(new Locale("en"))); assertThat(locales.get(2), is(new Locale("ro"))); assertThat(locales.get(3), is(new Locale("ru")));
assertThat(rangeHelper.isSatisfiable(Arrays.asList(new Range(0, 0), new Range(-1, 0)), 5), is(false));
assertThat(headers.containsHeader("Word-Of-The-Day"), is(true)); assertThat(headers.getHeader("Word-Of-The-Day"), is("The Fox Jumps Over the brown dog.")); assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD"));
assertThat(cookie.getValue(), is("true"));
assertThat(cookies, hasKey("name")); assertThat(cookies.get("name").getValue(), is(value));
assertThat(fileSessionStorage.getSession(null), is(nullValue())); assertThat(fileSessionStorage.getSession("abcX8"), is(nullValue())); assertThat(fileSessionStorage.getSession("/asdfghjklzxasdfghjklzxasdfghjklzxz"), is(nullValue()));
assertThat(output, containsString(">FancyExceptionMessage java.lang.RuntimeException<"));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1"));
assertThat(headers.containsHeader("Accept"), is(true)); assertThat(headers.getHeader("Accept"), is("application/xml,application/json"));
assertThat(cookies.size(), is(0));
assertThat(locales.get(0), is(new Locale("pl"))); assertThat(locales.get(1), is(new Locale("en"))); assertThat(locales.get(2), is(new Locale("ro"))); assertThat(locales.get(3), is(new Locale("ru")));
assertThat(response.getCookies().size(), is(greaterThan(0))); assertThat(cookie.getMaxAge(), lessThan(-1));
assertThat(out.length, is(equalTo(inputBytesSliced.length))); assertThat(out, equalTo(inputBytesSliced));
assertThat(response.getStatus(), containsString("500")); assertThat(outputStream.toString(), containsString("MSG_TOKEN")); assertThat(outputStream.toString(), containsString("EXPLANATION_TOKEN"));
assertThat(response.getCookies().size(), is(greaterThan(0))); assertThat(cookie.getValue(), is(not(nullValue())));
assertThat(serializedCookie, is("name=" + StringUtilities.urlEncode(value)));
assertThat(filter, is(not(nullValue()))); assertThat(filter.getFilterConfig(), is(equalTo(filterConfig))); assertThat(filter.getFilterConfig().getServletContext(), is(notNullValue()));
assertThat(out.length, is(equalTo(inputBytesSliced.length))); assertThat(out, equalTo(inputBytesSliced));
assertThat(servlet, is(not(nullValue()))); assertThat(servlet.getInitializedCounter(), is(equalTo(1))); assertThat(servlet.getServletConfig(), is(equalTo(servletConfig)));
assertThat(rangeHelper.getRangeLength(new Range(0, 0)), is(1L)); assertThat(rangeHelper.getRangeLength(new Range(0, 10)), is(11L)); assertThat(rangeHelper.getRangeLength(new Range(2, 3)), is(2L)); assertThat(rangeHelper.getRangeLength(new Range(11, 12)), is(2L));
assertThat(locales.get(0), is(new Locale("pl"))); assertThat(locales.get(1), is(new Locale("en"))); assertThat(locales.get(2), is(new Locale("ro"))); assertThat(locales.get(3), is(new Locale("ru")));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1")); assertThat(headers.getHeader("Non-existent"), is(nullValue()));
assertThat(s1.length(), is(32)); assertThat(s2.length(), is(32)); assertThat(s1, is(not(s2)));
assertThat(requestStatus.getMethod(), is("GET")); assertThat(requestStatus.getQueryString(), is("param1=ABC&param2=123")); assertThat(requestStatus.getUri(), is("/home")); assertThat(requestStatus.getProtocol(), is("HTTP/1.1"));
assertThat(outputStream.toString(), containsString("FILE_TOKEN"));
assertThat(new File(nonExistentDirectory).exists(), is(false));
assertThat(headers.containsHeader("Cookie"), is(false)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Server"), is("Pepis"));
assertThat(rangeHelper.isRangeValid(new Range(0, 0)), is(true)); assertThat(rangeHelper.isRangeValid(new Range(10, 20)), is(true)); assertThat(rangeHelper.isRangeValid(new Range(10, 10)), is(true));
assertThat(parameters.size(), is(0));
assertThat(dateProvider.now().getTime(), is(lessThanOrEqualTo(new Date().getTime())));
assertThat(computedLength, is(0L));
assertThat(session, is(not(nullValue()))); assertThat(session.getServletContext(), is((ServletContext) servletContext));
assertThat(pathHelper.isPathContainingIllegalCharacters("somepath../"), is(false)); assertThat(pathHelper.isPathContainingIllegalCharacters("../somepath"), is(true)); assertThat(pathHelper.isPathContainingIllegalCharacters("somepath/../"), is(true)); assertThat(pathHelper.isPathContainingIllegalCharacters(null), is(true));
assertThat(rageList.size(), is(2)); assertThat(rageList.get(0).getFrom(), is(1L)); assertThat(rageList.get(0).getTo(), is(100L)); assertThat(rageList.get(1).getFrom(), is(200L)); assertThat(rageList.get(1).getTo(), is(301L));
assertThat(servletContextHelper.getResolvedContext(Arrays.asList(servletContext), "/context/someurl"), is(servletContext));
assertThat(cookies, hasKey("name")); assertThat(cookies.get("name").getValue(), is(value));
assertThat(rageList.size(), is(2)); assertThat(rageList.get(0).getFrom(), is(1L)); assertThat(rageList.get(0).getTo(), is(100L)); assertThat(rageList.get(1).getFrom(), is(200L)); assertThat(rageList.get(1).getTo(), is(301L));
assertThat(out.length, is(greaterThan(0))); assertThat(out, equalTo(inputBytes));
assertThat(httpServletRequestImpl.getDateHeader("If-Modified-Since"), is(1421339413000L)); assertThat(httpServletRequestImpl.getDateHeader("If-Modified-Since-MALFORMED"), is(-1L)); assertThat(httpServletRequestImpl.getDateHeader("Inexisting"), is(-1L));
assertThat(parameters.size(), is(4)); assertThat(parameters.get("param1"), is("")); assertThat(parameters.get("param2"), is("ABCD2")); assertThat(parameters.get("param3"), is("ABC=DEF")); assertThat(parameters.get("param4"), is("A B = % *"));
assertThat(output, containsString(">java.lang.RuntimeException<"));
assertThat(fileSessionStorage.getSession(sid), is(nullValue()));
assertThat(servletContextHelper.getResolvedServletMapping(servletContext, "/context/somepathX"), is(servletMapping1));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1")); assertThat(headers.getHeader("Non-existent"), is(nullValue()));
assertThat(httpServletRequestImpl.getSession(), is(instanceOf(HttpSessionImpl.class))); assertThat(httpServletRequestImpl.getSession().equals(httpServletRequestImpl.getSession()), is(true));
assertThat(FileUtilities.getExtension("file.ext"), is("ext")); assertThat(FileUtilities.getExtension("/path/file.ext"), is("ext")); assertThat(FileUtilities.getExtension("file"), is("")); assertThat(FileUtilities.getExtension(null), is(nullValue()));
assertThat(servletContextHelper.getFilterMappingsForPath(servletContext, "/context/"), hasSize(0));
assertThat(rangeHelper.isSatisfiable(Collections.singletonList(new Range(0, 0)), 1), is(true)); assertThat(rangeHelper.isSatisfiable(Collections.singletonList(new Range(0, 1)), 2), is(true)); assertThat(rangeHelper.isSatisfiable(Collections.singletonList(new Range(0, 2)), 3), is(true));
assertThat(headersSerializer.serialize(headers), anyOf( is("SomeOtherHeader: 123\\r\\nHeader: Value\\r\\n\\r\\n"), is("Header: Value\\r\\nSomeOtherHeader: 123\\r\\n\\r\\n") ));
assertThat(headers.getFileName(), is(nullValue())); assertThat(headers.getName(), is(nullValue())); assertThat(headers.getContentType(), is(nullValue()));
assertThat(serialized, startsWith("--" + boundary + "\\r\\n")); assertThat(serialized, endsWith("\\r\\n\\r\\n")); assertThat(serialized, containsString("\\r\\nContent-Type: " + contentType + "\\r\\n")); assertThat(serialized, containsString("\\r\\nContent-Range: bytes 333-1234/12345\\r\\n"));
assertThat(cookies.size(), is(0));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1"));
assertThat(httpServletRequestImpl.getContentLength(), is(1234));
assertThat(requestStatus.getMethod(), is("GET")); assertThat(requestStatus.getQueryString(), is("param1=ABC&param2=123")); assertThat(requestStatus.getUri(), is("/home")); assertThat(requestStatus.getProtocol(), is("HTTP/1.1"));
assertThat(handler, is(instanceOf(HttpError500Handler.class)));
assertThat(servletContextHelper.getResolvedContext(Arrays.asList(servletContext), "/invalid/someurl"), is(nullValue()));
assertThat(rangeHelper.getTotalLength(ranges), is(1151L));
assertThat(output, containsString(">java.lang.RuntimeException<"));
assertThat(new String(out.toByteArray()), is("4\\r\\nWiki\\r\\n5\\r\\npedia\\r\\nE\\r\\n in\\r\\n\\r\\nchunks.\\r\\n0\\r\\n\\r\\n"));
assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.containsHeader("Test"), is(true)); assertThat(headers.containsHeader("Server"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD")); assertThat(headers.getHeader("Test"), is("XYZ")); assertThat(headers.getHeader("Server"), is("1"));
assertThat(parameters.size(), is(0));
assertThat(headers.getFileName(), is(nullValue())); assertThat(headers.getName(), is("text")); assertThat(headers.getContentType(), is(nullValue()));
assertThat(rageList.size(), is(1)); assertThat(rageList.get(0).getFrom(), is(1L)); assertThat(rageList.get(0).getTo(), is(100L));
assertThat(headersSerializer.serialize(headers), anyOf( is("someOtherHeader: 123\\r\\nheader: Value\\r\\n\\r\\n"), is("header: Value\\r\\nsomeOtherHeader: 123\\r\\n\\r\\n") ));
assertThat(headers.containsHeader("Word-Of-The-Day"), is(true)); assertThat(headers.containsHeader("Another"), is(true)); assertThat(headers.getHeader("Word-Of-The-Day"), is("The Fox Jumps Over the brown dog.")); assertThat(headers.getHeader("Another"), is("Another multiline header")); assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD"));
assertThat(sessionRead, is(not(nullValue()))); assertThat(sessionRead.getServletContext(), is((ServletContext) servletContext));
assertThat(out.length, is(equalTo((int) rangeHelper.getTotalLength(Arrays.asList(range))))); assertThat(out, equalTo(inputBytesSliced));
assertThat(out.length, is(equalTo((int) rangeHelper.getTotalLength(Arrays.asList(range))))); assertThat(out, equalTo(inputBytesSliced));
assertThat(getExpiresValue(serializedCookie), is(expiresValue));
assertThat(headers.getHeader("Word-Of-The-Day"), is(nullValue())); assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD"));
assertThat(cookie.getValue(), is("1545454454544844"));
assertThat(cookies.size(), is(0));
assertThat(servletConfigImpl.getServletContext(), is(not(nullValue())));
assertThat(headers.getFileName(), is("FILE.PDF")); assertThat(headers.getName(), is("FIELDNAME")); assertThat(headers.getContentType(), is("application/pdf"));
assertThat(servlet, is(not(nullValue()))); assertThat(servlet, is(not(nullValue()))); assertThat(servlet, is(not(sameInstance(servlet2))));
assertThat(out.length, is(equalTo(inputBytesSliced.length))); assertThat(out, equalTo(inputBytesSliced));
assertThat(servletContextHelper.getFilterMappingsForPath(servletContext, "/context/secured/abc/excluded"), hasSize(1));
assertThat(locales.get(0), is(new Locale("pl"))); assertThat(locales.get(1), is(new Locale("en"))); assertThat(locales.get(2), is(new Locale("ro"))); assertThat(locales.get(3), is(new Locale("ru")));
assertThat(pathHelper.getNormalizedDirectoryPath("somepath"), is("somepath/")); assertThat(pathHelper.getNormalizedDirectoryPath("somepath/"), is("somepath/"));
assertThat(servletContextHelper.getResolvedServletMapping(servletContext, "/context/somepath"), is(nullValue()));
assertThat(headers.getHeader("Non-existent"), is(nullValue()));
assertThat(DateUtilities.dateFormat(new Date(1520881821937L)), is("Mon, 12 Mar 2018 19:10:21 GMT"));
assertThat(servletContextHelper.getFilterMappingsForPath(servletContext, "/context/secured/abc"), hasSize(2));
assertThat(headers.containsHeader("Word-Of-The-Day"), is(true)); assertThat(headers.getHeader("Word-Of-The-Day"), is("The Fox Jumps Over the brown dog.")); assertThat(headers.containsHeader("Cookie"), is(true)); assertThat(headers.getHeader("Cookie"), is("ABCD"));
assertThat(new String(out.toByteArray()), is("4\\r\\nWiki\\r\\n2\\r\\n\\r\\n\\r\\n"));
assertThat(pathHelper.isDirectoryPath("somepath"), is(false)); assertThat(pathHelper.isDirectoryPath("somepath/"), is(true));
assertThat(rangeHelper.isRangeValid(new Range(10, 6)), is(false)); assertThat(rangeHelper.isRangeValid(new Range(-1, 6)), is(false));
assertThat(cookie.getValue(), is("22.33"));
assertThat(httpServletRequestImpl.getSession(), is(instanceOf(HttpSessionImpl.class)));
assertThat(sessionRead, is(nullValue()));
assertThat(rangeHelper.getTotalLength(ranges), is(12L));
assertThat(locales.get(0), is(new Locale("pl"))); assertThat(locales.get(1), is(new Locale("en"))); assertThat(locales.get(2), is(new Locale("ro"))); assertThat(locales.get(3), is(new Locale("ru")));
assertThat(serializedCookie, is("name=value"));
assertThat(out.toString(), is(input));
assertThat(new String(out.toByteArray()), is("23\\r\\nSomeTextLongerThanSixteenCharacters\\r\\n")); assertThat(new String(out.toByteArray()), is("23\\r\\nSomeTextLongerThanSixteenCharacters\\r\\n0\\r\\n\\r\\n"));
assertThat(parameters.size(), is(4)); assertThat(parameters.get("param1"), is("ABCD1")); assertThat(parameters.get("param2"), is("ABCD2")); assertThat(parameters.get("param3"), is("ABC=DEF")); assertThat(parameters.get("param4"), is("A B = % *"));
assertThat(outputStream.toString(), containsString("503"));
assertThat(rangeHelper.getTotalLength(ranges), is(4L));
assertThat(httpServletRequestImpl.getIntHeader("missingIntKey"), is(-1)); assertThat(httpServletRequestImpl.getIntHeader("intKey"), is(3333)); assertThat(httpServletRequestImpl.getIntHeader("unableToParseKey"), is(0));
assertThat(httpServletResponseImpl.getWriter().equals(httpServletResponseImpl.getWriter()), is(true));
assertThat(cookie.getValue(), is("14"));
assertThat(servletContext.getAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE)).isEqualTo(metricRegistry); assertThat(servletContext.getAttribute(MetricsServlet.METRICS_REGISTRY)).isEqualTo(metricRegistry);
assertThat(servletContext.getAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE)).isEqualTo(metricRegistry); assertThat(servletContext.getAttribute(MetricsServlet.METRICS_REGISTRY)).isEqualTo(metricRegistry);
assertThat(CryptoContainer.isContainerFileName("some-file.cDoC")) .isTrue();
assertFalse(SignatureVerifier.verify(configSignature, configSignaturePublicKey, configJson + "a"));
assertThat(filterString, is("(cn= " + CN_QUERY + ")"));
assertThat(smartCardReader.transmit(0x00, 0x00, 0x00, 0x00, null, null)) .isEqualTo(new byte[] {0x01, 0x03, 0x05});
assertThat(filterString, is("(cn=*" + CN_QUERY + "*)"));
assertThat(CryptoContainer.isContainerFileName("some-file.cdoc")) .isTrue();
assertThat(filterString, is("(serialNumber=" + SERIAL_NUMBER_QUERY + ")"));
assertThat(CryptoContainer.isContainerFileName("some-file.bdoc")) .isFalse();
assertTrue(SignatureVerifier.verify(configSignature, configSignaturePublicKey, configJson));
assertThat(new LdapFilter(SERIAL_NUMBER_QUERY).isSerialNumberSearch(), is(true));
assertThat(smartCardReader.transmit(0x00, 0x00, 0x00, 0x00, null, null)) .isEqualTo(new byte[0]);
assertThat(filterString, is("(serialNumber= PNOEE-" + SERIAL_NUMBER_QUERY + ")"));
assertThat(new LdapFilter(CN_QUERY).isSerialNumberSearch(), is(false));
assertThat(CryptoContainer.createContainerFileName("some-file.pdf")) .isEqualTo("some-file.cdoc");
assertThat(smartCardReader.transmit(0x00, 0x00, 0x00, 0x00, null, null)) .isEqualTo(new byte[] {0x01, 0x03, 0x05, 0x05, 0x04, 0x03, 0x02, 0x01});
assertEquals(user.getId(), id);
assertNotNull(user);
assertNotNull(result.getList());
assertEquals("test", name);
assertFalse(registry.containsKey("test")); assertEquals(plugin, test);
assertNull(name);
assertNotNull(bean);
assertArrayEquals(new Class<?>[]{BigDecimal.class, Float.class, Long.class, Integer.class}, classes.toArray());
assertEquals(this.plugin, test);
assertFalse(hasDependencies);
assertNotNull(plugin); assertNotNull(bean);
assertFalse(all.isEmpty()); assertEquals("test", ref.getName()); assertEquals(plugin, ref.get()); assertEquals(TestPlugin.class, ref.getType()); assertEquals("optional", ref.getName()); assertEquals(optionalPlugin, ref.get()); assertEquals(OptionalPlugin.class, ref.getType());
assertEquals(plugin, test);
assertEquals(plugins.size(), nodes.size()); assertTrue(plugins.contains(node.getRefClass()));
assertNotNull(plugin);
assertEquals(plugin, test);
assertEquals(plugin, test);
assertEquals(plugins.size(), nodes.size()); assertTrue(plugins.contains(node.getRefClass()));
assertTrue(registry.containsKey("test")); assertEquals(plugin, test);
assertTrue(registry.containsKey("test")); assertEquals(plugin, test);
assertFalse(dependencies.isEmpty());
assertTrue(registry.containsKey("test")); assertEquals(plugin, test);
assertTrue(hasDependencies);
assertFalse(registry.containsKey("test")); assertEquals(plugin, test);
assertEquals(1, plugins.size()); assertTrue(plugins.get(0) instanceof TestPlugin);
assertTrue(registry.containsKey("test")); assertEquals(plugin, test);
assertTrue(registry.containsKey("test")); assertEquals(plugin, test);
assertThat(e, instanceOf(CircularDependencyException.class));
assertThat(e, instanceOf(IllegalArgumentException.class));
assertEquals(1546041600, zdt.toInstant().getEpochSecond());
assertEquals(1, merged.size()); assertEquals(aggregation1.getClicks() + aggregation2.getClicks(), mergedItem.getLong("clicks")); assertEquals(aggregation1.getBids() + aggregation2.getBids(), mergedItem.getLong("bids")); assertEquals(aggregation1.getImps() + aggregation2.getImps(), mergedItem.getLong("imps"));
assertEquals(expected, JsonUtils.read(JsonUtils.write(expected), Location.class));
assertTrue(primaryKey.hasComponent(ItemMapper.CAMPAIGN_TABLE_HASH_KEY)); assertTrue(primaryKey.hasComponent(ItemMapper.PERIOD_TABLE_RANGE_KEY));
assertEquals(itemMapper.primaryKey(aggregation2_item), itemMapper.primaryKey(resultItem)); assertEquals(aggregation1.getClicks() + aggregation2.getClicks(), resultItem.getLong("clicks")); assertEquals(aggregation1.getBids() + aggregation2.getBids(), resultItem.getLong("bids")); assertEquals(aggregation1.getImps() + aggregation2.getImps(), resultItem.getLong("imps"));
assertEquals(itemMapper.primaryKey(item), itemMapper.key(ByteBuffer.wrap(bytes)));
assertArrayEquals(expected.toArray(), result.toArray());
assertEquals((long) aggregation.getCampaignItemId(), item.getLong("campaign_item_id")); assertEquals((long) aggregation.getClicks(), item.getLong("clicks")); assertEquals((long) aggregation.getImps(), item.getLong("imps")); assertEquals((long) aggregation.getBids(), item.getLong("bids"));
assertThat( new HomeController().home(), equalTo("home") );
assertThat(capturedRequest.getValue().url.toString(), endsWith("test%20test"));
assertThat(capturedRequest.getValue().url.toString(), endsWith("%20H"));
assertNotNull(map); assertEquals(1, map.size()); assertTrue(map.containsKey("result")); assertEquals("dummyResult", map.get("result"));
assertThat(capturedRequest.getValue().url.toString(), endsWith("Test+test"));
assertNull(testClient.getDefaultProject()); assertNotNull(defaultProject); assertEquals("<project ID>", defaultProject.getProjectId());
assertEquals(1, handleMap.size()); assertEquals(3, handleMap.get(TEST_COLLECTION).size()); assertEquals(0, handleMap.size()); assertEquals(0, handleMap.size());
assertNotNull(map); assertEquals(1, map.size()); assertTrue(map.containsKey(KeenConstants.KEEN_FAKE_JSON_ROOT)); assertNotNull(jsonArrayObj); assertTrue(jsonArrayObj instanceof List); assertEquals(1, ((List)jsonArrayObj).size()); assertEquals("dummyResult", ((List)jsonArrayObj).get(0));
assertTrue(result);
assertTrue(file.exists()); assertTrue(result); assertTrue(newFile.exists()); assertFalse(file.exists());
assertEquals(expResult, result);
assertTrue(result.isEmpty());
assertNull(result); assertNotNull("File listing came back null", result); assertFalse("There were no files listed", result.isEmpty()); assertNotNull(e);
assertTrue(file.exists()); assertTrue(result);
assertFalse(result);
assertThat(result, is(not(nullValue())));
assertThat(result.getLength(), equalTo(5)); assertThat(result.item(0).getTextContent(), equalTo("1")); assertThat(result.item(1).getTextContent(), equalTo("2")); assertThat(result.item(2).getTextContent(), equalTo("3"));
assertTrue(result.isEmpty());
assertTrue(result); assertFalse(result); assertFalse(result); assertFalse(result);
assertThat(result.getTextContent(), equalTo("1")); assertThat(result.getTextContent(), equalTo("2"));
assertTrue("Range should be 4x3 since they are buffered", (range[0].length() == 4 && range[1].length() == 3));
assertTrue(result.isEmpty());
assertEquals(expResult, result);
assertFalse(result); assertTrue(result);
assertTrue(result.isEmpty());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertNotNull(dimensionVariableMapping); assertThat(dimensionVariableMapping.size(), is(equalTo(3))); assertTrue(dimensionVariableMapping.containsKey("time")); assertTrue(dimensionVariableMapping.get("time").equals(timeRangeString)); assertTrue(dimensionVariableMapping.containsKey("lat")); assertTrue(dimensionVariableMapping.get("lat").equals(yRangeString)); assertTrue(dimensionVariableMapping.containsKey("lon")); assertTrue(dimensionVariableMapping.get("lon").equals(xRangeString));
assertEquals(expResult, result);
assertNotNull(result);
assertNotNull(result); assertEquals(result.getUpperRightPoint().getLatitude(), 0.0, 0.0); assertEquals(result.getUpperRightPoint().getLongitude(), -1.0, 0.0); assertEquals(result.getLowerLeftPoint().getLatitude(), -1.0, 0.0); assertEquals(result.getLowerLeftPoint().getLongitude(), 0.0, 0.0);
assertTrue("Range should be 3x3 since they are buffered", (range[0].length() == 3 && range[1].length() == 3));
assertThat(statement.execute("SELECT * FROM RESPONSE;"), is(true)); assertThat(statement.getResultSet().next(), is(true)); assertThat(statement.getResultSet().getString("REQUEST_ID"), is("test"));
assertTrue(file.exists()); assertTrue(result);
assertTrue(!result.isEmpty());
assertTrue("Range should be 4x4 since they are buffered", (range[0].length() == 4 && range[1].length() == 4));
assertEquals(expResult, result);
assertEquals("The geometry should have equal X to dataset", gcg.getCellCountX(), X_SIZE);
assertTrue(result.isEmpty());
assertFalse(result);
assertTrue(result); assertTrue(file2Date > file1Date);
assertNull(result); assertNotNull("File listing came back null", result); assertFalse("There were no files listed", result.isEmpty()); assertNotNull(e);
assertEquals(expResult, result);
assertNotNull(dimensionRawMapping); assertThat(dimensionRawMapping.size(), is(equalTo(3))); assertTrue(dimensionRawMapping.containsKey("time")); assertTrue(dimensionRawMapping.get("time").equals(timeRangeString)); assertTrue(dimensionRawMapping.containsKey("lat")); assertTrue(dimensionRawMapping.get("lat").equals(yRangeString)); assertTrue(dimensionRawMapping.containsKey("lon")); assertTrue(dimensionRawMapping.get("lon").equals(xRangeString));
assertEquals("The geometry should have equal Y to dataset", gcg.getCellCountY(), Y_SIZE);
assertThat(expResult, is(equalTo(result)));
assertTrue(result); assertNotNull(e); assertFalse(result);
assertNotNull("Geometry should not be null", gcg.getCellGeometry(0, 0));
assertTrue(result.isEmpty());
assertTrue(result);
assertTrue(createdDir.equals(""));
assertEquals(handlesFromCatalog.size(), 2); assertEquals(handlesFromCatalog.get(0).getDataset().getName(), "NCEP WaveWatch III: Atlantic (4 min grid)"); assertEquals(handlesFromCatalog.get(1).getDataset().getName(), "NCEP WaveWatch III: Atlantic (10 min grid)"); assertEquals(topLevelDatasets.size(), 1); assertEquals(topLevelDatasets.get(0).getName(), "NOAA-WW3"); assertEquals(handlesFromCatalog, handlesFromTopLevelDataset);
assertThat(result, is(not(nullValue()))); assertThat(result.length, is(equalTo(0)));
assertTrue("Range should be 3x4 since they are buffered", (range[0].length() == 3 && range[1].length() == 4));
assertTrue(result); assertNotNull(e); assertFalse(result);
assertTrue(result.isEmpty());
assertThat(expResult, is(equalTo(result)));
assertNotNull(range);
assertEquals(expResult, result);
assertThat(result, is(notNullValue())); assertThat(result.length(), is(not(equalTo(0)))); assertThat(result, containsString("GCS"));
assertNotNull(dimensionVariableMapping); assertThat(dimensionVariableMapping.size(), is(equalTo(3))); assertTrue(dimensionVariableMapping.containsKey("time")); assertTrue(dimensionVariableMapping.get("time").equals(timeRangeString)); assertTrue(dimensionVariableMapping.containsKey("lat")); assertTrue(dimensionVariableMapping.get("lat").equals(yRangeString)); assertTrue(dimensionVariableMapping.containsKey("lon")); assertTrue(dimensionVariableMapping.get("lon").equals(xRangeString));
assertNotNull(dimensionVariableMapping); assertThat(dimensionVariableMapping.size(), is(equalTo(3))); assertTrue(dimensionVariableMapping.containsKey("time")); assertTrue(dimensionVariableMapping.get("time").equals(timeRangeString)); assertTrue(dimensionVariableMapping.containsKey("y")); assertTrue(dimensionVariableMapping.get("y").equals(yRangeString)); assertTrue(dimensionVariableMapping.containsKey("x")); assertTrue(dimensionVariableMapping.get("x").equals(xRangeString));
assertTrue(containsFail);
assertNull(result);
assertNotNull("Geometry should not be null", gcg.getCellGeometry(0, 0));
assertNull(result);
assertThat(result.length, is(not(0))); assertThat(result.length, is(equalTo((int) input.length())));
assertNotNull(result); assertEquals(result, "2001-07-01T01:01:01Z|2002-07-15T01:01:01Z");
assertEquals(expResult, result);
assertThat(ex, instanceOf(IOException.class)); assertThat(ex.getCause(), instanceOf(FileNotFoundException.class));
assertFalse(FileUtils.listFiles(tempArea, null, true).isEmpty()); assertTrue(FileUtils.listFiles(tempArea, null, true).size() == 6);
assertEquals("The geometry gcs should match dataset\'s", gcg.getGridCoordSystem(), gcs);
assertTrue("Range should be 4x3 since they are buffered", (range[0].length() == 4 && range[1].length() == 3));
assertThat(result, is(true));
assertNotNull(dimensionRawMapping); assertThat(dimensionRawMapping.size(), is(equalTo(3))); assertTrue(dimensionRawMapping.containsKey("time")); assertTrue(dimensionRawMapping.get("time").equals(timeRangeString)); assertTrue(dimensionRawMapping.containsKey("y")); assertTrue(dimensionRawMapping.get("y").equals(yRangeString)); assertTrue(dimensionRawMapping.containsKey("x")); assertTrue(dimensionRawMapping.get("x").equals(xRangeString));
assertTrue("Range should be 3x3 since they are buffered", (range[0].length() == 3 && range[1].length() == 3));
assertFalse("".equals(result)); assertEquals("test@test.com", result);
assertNull(result);
assertTrue(result);
assertFalse(result);
assertFalse(result);
assertTrue("Range should be 3x3 since they are buffered", (range[0].length() == 3 && range[1].length() == 3));
assertNotNull(dimensionRawMapping); assertThat(dimensionRawMapping.size(), is(equalTo(3))); assertTrue(dimensionRawMapping.containsKey("time")); assertTrue(dimensionRawMapping.get("time").equals(timeRangeString)); assertTrue(dimensionRawMapping.containsKey("y")); assertTrue(dimensionRawMapping.get("y").equals(yRangeString)); assertTrue(dimensionRawMapping.containsKey("x")); assertTrue(dimensionRawMapping.get("x").equals(xRangeString));
assertTrue(result); assertTrue(result); assertFalse(result);
assertFalse(result);
assertFalse(createdDir.isEmpty());
assertTrue(result); assertFalse(result);
assertNotNull("FineFile did not find the file " + fileToLoad + " within " + rootDir, result); assertEquals("File loaded does not have the same name as the file suggested", fileToLoad, result.getName()); assertNull(result);
assertThat(expResult, is(equalTo(result)));
assertTrue(result.isEmpty());
assertEquals(expResult, result);
assertTrue(result);
assertTrue("Range should be 3x3 since they are buffered", (range[0].length() == 3 && range[1].length() == 3));
assertNotNull("Geometry should not be null", gcg.getCellGeometry(0, 0));
assertThat(result.length, is(not(nullValue()))); assertThat(result.length, is(equalTo(0)));
assertThat(result, equalTo(Boolean.TRUE)); assertThat(result, equalTo(Boolean.FALSE));
assertThat(expResult, is(equalTo(result)));
assertFalse(result); assertTrue(result);
assertEquals("The geometry should have equal cell count with dataset", gcg.getCellCount(), cellCount);
assertTrue(result);
assertNotNull(result); assertFalse("".equals(result));
assertEquals("force militaire avec 1 carte :", 1, joueur.getForceMilitaire()); assertEquals("joueur force militaire avec 3 carte :", 10, joueur.getForceMilitaire());
assertEquals(TAILLE_DECK_ATTENDU, testDuJeu.getDecks().get(0).size());
assertArrayEquals(new int[] { 1, 1, 1, 1, 1, 1, 1 }, getScoreJoueurs()); assertArrayEquals(new int[] { 0, 3, 0, 1, 1, 1, 1 }, getScoreJoueurs()); assertArrayEquals(new int[] { 0, 5, 6, 0, 1, 1, 1 }, getScoreJoueurs());
assertEquals(false, testDuJeu.finJeu()); assertEquals(true, testDuJeu.finJeu());
assertEquals(joueurs.get(j).getDeckMain(), joueurs.get(j + 1).getDeckMain()); assertEquals(joueurs.get(joueurs.size() - 1).getDeckMain(), first); assertEquals(joueurs.get(j).getDeckMain(), joueurs.get(j - 1).getDeckMain()); assertEquals(joueurs.get(0).getDeckMain(), last);
assertEquals(false, testDuJeu.finAge()); assertEquals(false, testDuJeu.finAge()); assertEquals(false, testDuJeu.finAge()); assertEquals(false, testDuJeu.finAge());
assertTrue(new File(pubKeyFile).exists()); assertTrue(SUT.loadKeys().iterator().hasNext());
assertTrue(r1.contains(r2)); assertTrue(r1.contains(makeRect(5, 5, 0, 0))); assertFalse(r1.contains(r3)); assertFalse(r1.contains(makeRect(5, 12, 0, 0)));
assertEquals(featureIterator.next(), geometry.toText());
assertEquals(spatialRDD.rawSpatialRDD.count(), count); assertEquals(featureIterator.next(), geometry.toText());
assertEquals(gtlbounds, myBounds);
assertEquals(featureIterator.next(), geometry.getUserData());
assertEquals(circle.getRadius(), 0.2, 0.01);
assertEquals(spatialRDD.rawSpatialRDD.count(), count); assertEquals(featureIterator.next(), geometry.toText());
assertEquals(0.1, circle.getRadius(), 0.01);
assertEquals(spatialRDD.rawSpatialRDD.count(), count); assertEquals(featureIterator.next(), geometry.toText());
assertEquals(wktRDD.rawSpatialRDD.count(), 103);
assertEquals(geojsonRDD.rawSpatialRDD.count(),1); assertEquals(geojsonRDD.fieldNames.size(), 3);
assertEquals(geojsonRDD.rawSpatialRDD.count(), 3);
assertEquals(geojsonRDD.rawSpatialRDD.count(), 1001); assertEquals(geojsonRDD.rawSpatialRDD.count(), 10); assertEquals(geojsonRDD.rawSpatialRDD.count(), 2); assertEquals(geojsonRDD.rawSpatialRDD.count(), 3);
assertEquals(geojsonRDD.rawSpatialRDD.count(), 1001); assertEquals(geojsonRDD.rawSpatialRDD.count(), 10);
assertFalse(shutdownOnPowerDisconnect.getValue());
assertTrue(shutdownOnPowerDisconnect.getValue());
assertTrue(CookbookUtils.isPrimitiveType("int"));
assertEquals(null, value);
assertEquals("5.0f", filter.apply(new Float(5.0), "float")); assertEquals("5.0f", filter.apply(5.0f, "float"));
assertEquals("int", filter.apply("int"));
assertEquals("isFoobar", filter.apply(param("foobar", "flag")));
assertFalse(CookbookUtils.isPrimitiveType("foobar"));
assertEquals("true", filter.apply(new Boolean(true), "flag")); assertEquals("false", filter.apply(false, "flag"));
assertEquals( "new String[]{\\"a\\", \\"b\\", \\"c\\"}", filter.apply(Lists.newArrayList("a", "b", "c"), "string[]"));
assertEquals(0.0f, value, 0.0);
assertEquals("(string | null)[]", filter.apply("string...", true));
assertTrue(CookbookUtils.isKnownType(cookbook, "MyEnum"));
assertEquals("String", filter.apply("string"));
assertEquals(false, value);
assertEquals("foobar", filter.apply("foobar"));
assertEquals(TestEnum.A, value);
assertFalse(ingredient.hasProperty("foo"));
assertEquals("foobar", filter.apply("foobar"));
assertEquals("-5.0f", filter.apply(new Float(-5.0), "float")); assertEquals("-5.0f", filter.apply(-5.0f, "float"));
assertEquals("\\"foobar\\"", filter.apply("foobar", "string"));
assertEquals(1, cookbook.getIngredients().get(0).getInitializers().size()); assertEquals(0, cookbook.getIngredients().get(0).getInitializers().get(0).getParams().size());
assertEquals("String[]", filter.apply("string...", true));
assertEquals("MyEnum.A", filter.apply("A", "MyEnum"));
assertEquals("getClass_", filter.apply(param("class", "string")));
assertEquals("(string | null)[]", filter.apply("string[]"));
assertTrue(CookbookUtils.enumHasValue(cookbook, "MyEnum", "A"));
assertTrue(CookbookUtils.isKnownType(cookbook, "flag"));
assertFalse(cake.hasContext());
assertTrue(CookbookUtils.isPrimitiveType("float"));
assertEquals("optionalField", cookbook.getIngredients().get(0).getOptionals().get(0).getName()); assertEquals("flag", cookbook.getIngredients().get(0).getOptionals().get(0).getType());
assertEquals("a" + Cake.SEPARATOR + "b", Cake.key("a", "b"));
assertEquals(1, cookbook.getEnums().size()); assertEquals("fooEnum", cookbook.getEnums().get(0).getName()); assertEquals(3, cookbook.getEnums().get(0).getValues().size()); assertEquals("A", cookbook.getEnums().get(0).getValues().get(0)); assertEquals("B", cookbook.getEnums().get(0).getValues().get(1)); assertEquals("C", cookbook.getEnums().get(0).getValues().get(2));
assertEquals("optional", cookbook.getIngredients().get(0).getOptionals().get(0).getName()); assertEquals( "param", cookbook.getIngredients().get(0).getOptionals().get(0).getParams().get(0).getName()); assertEquals( "string", cookbook.getIngredients().get(0).getOptionals().get(0).getParams().get(0).getType());
assertEquals("new int[]{1, 2, 3}", filter.apply(Lists.newArrayList(1, 2, 3), "int[]"));
assertEquals("boolean", filter.apply("boolean"));
assertEquals("string | null", filter.apply("string"));
assertTrue(CookbookUtils.isPrimitiveType("string"));
assertEquals("String[]", filter.apply("string[]"));
assertFalse(CookbookUtils.enumHasValue(cookbook, "MyEnum", "C"));
assertEquals("a", Cake.key("a"));
assertEquals("isFoobar", filter.apply(param("foobar", "boolean")));
assertEquals("MyEnum", filter.apply("MyEnum"));
assertEquals("(string | null)[][]", filter.apply("string[]..."));
assertTrue(CookbookUtils.isEnumType(cookbook, "MyEnum"));
assertEquals("bar", filter.apply(param("foo", "string")));
assertFalse(cookbook.getIngredients().get(0).isKeyed()); assertEquals(0, cookbook.getIngredients().get(0).getRequired().size()); assertEquals(0, cookbook.getIngredients().get(0).getInitializers().size()); assertEquals(0, cookbook.getIngredients().get(0).getOptionals().size());
assertEquals("boolean", filter.apply("boolean"));
assertTrue(cookbook.getIngredients().get(0).isKeyed()); assertEquals("required", cookbook.getIngredients().get(0).getDefaultKey());
assertEquals(0, cookbook.getIngredients().size());
assertEquals("number[]", filter.apply("int[]"));
assertEquals(0, cookbook.getIngredients().get(0).getInitializers().size());
assertEquals("number", filter.apply("float"));
assertEquals("int[]", filter.apply("int[]"));
assertEquals( "new MyEnum[]{MyEnum.A, MyEnum.B, MyEnum.C}", filter.apply(Lists.newArrayList("A", "B", "C"), "MyEnum[]"));
assertEquals(0, cookbook.getEnums().size());
assertFalse(cookbook.getIngredients().get(0).getOptionals().get(0).isRepeatable());
assertEquals("(string | null)[][]", filter.apply("string[]...", true));
assertEquals( "new String[]{\\"a\\", \\"b\\", \\"c\\"}", filter.apply(Lists.newArrayList("a", "b", "c"), "string..."));
assertEquals(null, value);
assertEquals("\\"\\\\\\"foobar\\"", filter.apply("\\"foobar", "string"));
assertEquals("-1", filter.apply(new Integer(-1), "int")); assertEquals("-1", filter.apply(-1, "int"));
assertEquals(0, value);
assertFalse(CookbookUtils.isFlagType("foobar"));
assertEquals("number[]", filter.apply("int..."));
assertEquals("true", filter.apply(new Boolean(true), "boolean")); assertEquals("false", filter.apply(false, "boolean"));
assertEquals("String[]...", filter.apply("string[]..."));
assertArrayEquals(new String[0], value);
assertEquals("number", filter.apply("int"));
assertEquals("bar: number[]", filter.apply(param("foo", "int[]")));
assertEquals("...foo", filter.apply(param("foo", "int...")));
assertTrue(CookbookUtils.isPrimitiveType("boolean"));
assertEquals("...foo: number[]", filter.apply(param("foo", "int...")));
assertEquals("5", filter.apply(new Integer(5), "int")); assertEquals("5", filter.apply(5, "int"));
assertFalse(CookbookUtils.isEnumType(cookbook, "foo"));
assertEquals("float", filter.apply("float"));
assertEquals("_number", filter.apply("number"));
assertEquals("String...", filter.apply("string..."));
assertNull(ingredient.getProperty("foo"));
assertTrue(CookbookUtils.isFlagType("flag"));
assertEquals("boolean", filter.apply("flag"));
assertEquals("getFoobar", filter.apply(param("foobar", "int")));
assertEquals("String[][]", filter.apply("string[]...", true));
assertEquals("null", filter.apply(null, "string"));
assertEquals("type identifier", filter.apply(param));
assertTrue(CookbookUtils.isKnownType(cookbook, "boolean"));
assertEquals("boolean", filter.apply("flag"));
assertEquals("_class", filter.apply("class"));
assertEquals("MyEnum", filter.apply("MyEnum"));
assertEquals("(string | null)[]", filter.apply("string..."));
assertFalse(CookbookUtils.isKnownType(cookbook, "foobar"));
assertEquals( "new String[][]{new String[]{\\"a\\"}, new String[]{\\"b\\", \\"c\\"}}", filter.apply( Lists.newArrayList(Lists.newArrayList("a"), Lists.newArrayList("b", "c")), "string[]..."));
assertThat(StringUtils.stripNasties("foo"), is(equalTo("foo"))); assertThat(StringUtils.stripNasties("foo bar"), is(equalTo("foo bar"))); assertThat(StringUtils.stripNasties("foo _ bar"), is(equalTo("foo _ bar")));
assertThat(listView.getAdapter(), is(notNullValue()));
assertTrue (stmt instanceof DropSchemaNode);
assertEquals("rows", rowOne, rowTwo); assertEquals("maps", mapOne, mapTwo);
assertNotNull(ais.getTable("s", "t")); assertTrue (stmt instanceof DropSchemaNode);
assertEquals(new TableName("test", "t_s_seq$1"), generator.generateIdentitySequenceName(ais, new TableName("test", "t"), "s"));
assertNotNull(ais.getTable("s", "t")); assertTrue (stmt instanceof CreateSchemaNode);
assertEquals("bytes", new WrappingByteSource(expected), actual);
assertEquals("failures", 1, validate(ais).size());
assertEquals("failures", 1, failures.size());
assertNotNull(ais.getTable("s", "t")); assertTrue (stmt instanceof CreateSchemaNode);
assertEquals(0, reports.length); assertEquals(2, reports.length); assertEquals(0x3, mask);
assertNotNull(ais.getTable("s", "t")); assertTrue (stmt instanceof CreateSchemaNode);
assertTrue (stmt instanceof DropTableNode);
assertEquals(expected, ColumnRanges.rangeAtNode(either));
assertTrue("someBytes was empty!", someBytes.length > 0);
assertEquals(2000, adjustTwoDigitYear(0)); assertEquals(2013, adjustTwoDigitYear(13)); assertEquals(2069, adjustTwoDigitYear(69)); assertEquals(1970, adjustTwoDigitYear(70)); assertEquals(1999, adjustTwoDigitYear(99)); assertEquals(100, adjustTwoDigitYear(100));
assertTrue (stmt instanceof CreateSchemaNode);
assertEquals("\\"a\\"", Strings.escapeIdentifier("a")); assertEquals("\\"A\\"", Strings.escapeIdentifier("A")); assertEquals("\\"a.b\\"", Strings.escapeIdentifier("a.b"));
assertEquals("equality std dev", 1.41421d, sampler.getEqualsStdDev(), 0.00001d);
assertEquals("mean equality", 3.0d, sampler.getEqualsMean(), 0.0);
assertNotNull("Null", array[i]); assertTrue("Not unique", array[i] != array[j]);
assertTrue (stmt instanceof DropTableNode);
assertEquals(input, expected, actual);
assertEquals ("bytes", expected, actual);
assertEquals("bytes", new WrappingByteSource(expected), actual);
assertEquals("removal value for 1", null, session.remove(key, 1));
assertTrue(node instanceof DropSchemaNode);
assertEquals(String.format("tuple(%d)", i), e, a);
assertNull("sorted list should be null", sorted);
assertEquals(MDateAndTime.encodeDate(2013, 1, 30), parseAndEncodeDate("13-01-30")); assertEquals(MDateAndTime.encodeDate(2013, 1, 30), parseAndEncodeDate("2013-01-30")); assertEquals(MDateAndTime.encodeDate(2013, 1, 30), parseAndEncodeDate("2013-01-30 10:11:12"));
assertEquals(MDateAndTime.encodeDateTime(2013, 1, 30, 0, 0, 0), parseAndEncodeDateTime("13-01-30")); assertEquals(MDateAndTime.encodeDateTime(2013, 1, 30, 0, 0, 0), parseAndEncodeDateTime("2013-01-30"));
assertEquals("00:00:00", timeToString(0, 0, 0)); assertEquals("-01:10:10", timeToString(-1, 10, 10)); assertEquals("838:59:59", timeToString(838, 59, 59));
assertEquals(expected, ColumnRanges.rangeAtNode(isNull));
assertNotNull (row); assertEquals(row.rowType(), customerPK);
assertEquals("", Strings.hex(new byte[]{})); assertEquals("00", Strings.hex(new byte[]{ 0 })); assertEquals("0001", Strings.hex(new byte[]{ 0, 1 })); assertEquals("00017F80FF", Strings.hex(new byte[]{ 0, 1, 127, (byte)128, (byte)255}));
assertEquals("failures", 1, validate(ais).size());
assertEquals("source value", 1234L, source.getInt64());
assertTrue (stmt instanceof DropTableNode);
assertEquals(expectedMap, actual);
assertEquals(target.valueAt(0).getInt32(),42); assertEquals(target.segments(), 1); assertEquals(target.segments(), 2); assertTrue (target.valueAt(1).isNull());
assertEquals(output, uuidString);
assertEquals(expected, f.format(c));
assertEquals("two different gets", a, b);
assertEquals( "messages", joined( "starting SimpleGamma", "started SimpleGamma" ), Strings.join(DummyInterfaces.messages()) );
assertNull("null byte buffer", shouldBeNull);
assertTrue (stmt instanceof DropSchemaNode);
assertEquals(new TableName("test", "t_s1_seq"), generator.generateIdentitySequenceName(ais, table, "s1"));
assertNull("sorted list should be null", sorted);
assertEquals("failures", 1, failures.size());
assertTrue(node instanceof DropTableNode);
assertEquals(expected, ColumnRanges.rangeAtNode(compare));
assertTrue (stmt instanceof DropTableNode);
assertTrue(node instanceof DropTableNode);
assertEquals(0.0f, num, 0);
assertThat(Strings.isBlank(nullString), is(true)); assertThat(Strings.isBlank(emptyString), is(true)); assertThat(Strings.isBlank(blankString), is(true)); assertThat(Strings.isBlank(string), is(false));
assertTrue(parser.isMyType(document));
assertEquals( new Date(1000), DateParser.parseW3CDateTime("1970-01-01T00:00:01+00:00 ", Locale.GERMANY) );
assertFalse(parser.isMyType(document));
assertNull(num);
assertEquals( new Date(1000), DateParser.parseW3CDateTime("1970-01-01T00:00:01+00:00", Locale.GERMANY) );
assertThat(Longs.parseDecimal(nullString), is(nullValue())); assertThat(Longs.parseDecimal(emptyString), is(nullValue())); assertThat(Longs.parseDecimal(longString), is(Long.MAX_VALUE)); assertThat(Longs.parseDecimal(decimalString), is((long) Double.MAX_VALUE));
assertThat(Strings.trimToEmpty(nullString), is("")); assertThat(Strings.trimToEmpty(emptyString), is("")); assertThat(Strings.trimToEmpty(blankString), is("")); assertThat(Strings.trimToEmpty(string), is("a"));
assertEquals("UTF-8", XmlReader.getXmlProlog(input, guessedEncoding));
assertTrue(parser.isMyType(document));
assertNull(num);
assertEquals(new Long(1L), num);
assertThat(Lists.emptyToNull(nullList), is(nullValue())); assertThat(Lists.emptyToNull(listWithoutEntries), is(nullValue())); assertThat(Lists.emptyToNull(listWithOneEntry), is(notNullValue()));
assertEquals("UTF-8", prologEncoding);
assertThat(Strings.isNull(nullString), is(true)); assertThat(Strings.isNull(emptyString), is(false)); assertThat(Strings.isNull(blankString), is(false)); assertThat(Strings.isNull(string), is(false));
assertThat(Lists.isEmpty(nullList), is(true)); assertThat(Lists.isEmpty(listWithoutEntries), is(true)); assertThat(Lists.isEmpty(listWithOneEntry), is(false));
assertThat(Strings.isNotEmpty(nullString), is(false)); assertThat(Strings.isNotEmpty(emptyString), is(false)); assertThat(Strings.isNotEmpty(blankString), is(true)); assertThat(Strings.isNotEmpty(string), is(true));
assertThat(Alternatives.firstNotNull(notNullInteger, nullInteger), is(notNullInteger)); assertThat(Alternatives.firstNotNull(nullInteger, notNullInteger), is(notNullInteger)); assertThat(Alternatives.firstNotNull(nullInteger, nullInteger), is(nullValue()));
assertEquals("TEST", prologEncoding);
assertThat(Lists.isNotEmpty(nullList), is(false)); assertThat(Lists.isNotEmpty(listWithoutEntries), is(false)); assertThat(Lists.isNotEmpty(listWithOneEntry), is(true));
assertEquals(new Float(1.0f), num);
assertThat(Strings.trimToNull(nullString), is(nullValue())); assertThat(Strings.trimToNull(emptyString), is(nullValue())); assertThat(Strings.trimToNull(blankString), is(nullValue())); assertThat(Strings.trimToNull(string), is("a"));
assertThat(Strings.toLowerCase(nullString), is(nullValue())); assertThat(Strings.toLowerCase(emptyString), is("")); assertThat(Strings.toLowerCase(blankString), is(" ")); assertThat(Strings.toLowerCase(string), is("a"));
assertThat(Lists.firstEntry(nullList), is(nullValue())); assertThat(Lists.firstEntry(listWithoutEntries), is(nullValue())); assertThat(Lists.firstEntry(listWithOneEntry), is(1)); assertThat(Lists.firstEntry(listWithTwoEntries), is(1));
assertThat(Strings.isEmpty(nullString), is(true)); assertThat(Strings.isEmpty(emptyString), is(true)); assertThat(Strings.isEmpty(blankString), is(false)); assertThat(Strings.isEmpty(string), is(false));
assertThat(Lists.sizeIs(nullList, 0), is(true)); assertThat(Lists.sizeIs(listWithoutEntries, 0), is(true)); assertThat(Lists.sizeIs(listWithOneEntry, 1), is(true));
assertNull(XmlReader.getXmlProlog(input, guessedEncoding));
assertThat(Integers.parse(nullString), is(nullValue())); assertThat(Integers.parse(emptyString), is(nullValue())); assertThat(Integers.parse(integerString), is(1)); assertThat(Integers.parse(decimalString), is(nullValue()));
assertEquals(1.0f, num, 0);
assertThat(create, is(notNullValue())); assertThat(create.size(), is(1)); assertThat(create, hasItem(1));
assertTrue(parser.isMyType(document));
assertEquals(1L, num);
assertThat(Doubles.parse(nullString), is(nullValue())); assertThat(Doubles.parse(emptyString), is(nullValue())); assertThat(Doubles.parse(integerString), is(1.0)); assertThat(Doubles.parse(decimalString), is(1.0));
assertEquals("CP1047", XmlReader.getXmlProlog(input, guessedEncoding));
assertTrue(parser.isMyType(document));
assertThat(Strings.trim(nullString), is(nullValue())); assertThat(Strings.trim(emptyString), is("")); assertThat(Strings.trim(blankString), is("")); assertThat(Strings.trim(string), is("a"));
assertThat(Lists.createWhenNull(list), is(notNullValue())); assertThat(Lists.createWhenNull(list), is(list)); assertThat(Lists.createWhenNull(nullList), is(notNullValue()));
assertEquals(0L, num);
assertNull(num);
assertEquals("UTF-16", XmlReader.getXmlProlog(input, guessedEncoding));
assertEquals(new Integer(1), num);
assertNull(XmlReader.getXmlProlog(input, guessedEncoding));
assertEquals("TEST", XmlReader.getXmlProlog(input, guessedEncoding));
assertThat(orderCaptor.getAllValues()).containsExactlyElementsOf(desiredOrders);
assertThat(graph.nodes()).hasSize(4); assertThat(graph.nodeOrThrow("Set<File>").dependencies()) .containsExactlyInAnyOrder(graph.nodeOrThrow("Object"), graph.nodeOrThrow("String")); assertThat(graph.nodeOrThrow("OkHttpClient").dependencies()) .containsExactly(graph.nodeOrThrow("Set<File>"));
assertNotNull(list);
assertEquals("0x2e95e3ce...7872dfb4fd", text);
assertNull(ShadowToast.getTextOfLatestToast());
assertEquals("0x2e...b4fd", text);
assertEquals(STATE_CONNECTED, peripheral.getState());
assertEquals(2, parser.getValue().length); assertEquals(2020, (int) parser.getIntValue(FORMAT_UINT16));
assertNotNull(peripheral);
assertEquals(2020, calendar.get(GregorianCalendar.YEAR)); assertEquals(1, calendar.get(GregorianCalendar.MONTH) + 1); assertEquals(2, calendar.get(GregorianCalendar.DAY_OF_MONTH)); assertEquals(10, calendar.get(GregorianCalendar.HOUR_OF_DAY)); assertEquals(21, calendar.get(GregorianCalendar.MINUTE)); assertEquals(48, calendar.get(GregorianCalendar.SECOND));
assertTrue(autoconnect); assertEquals(STATE_CONNECTED, peripheral.getState());
assertNotNull(peripherals); assertEquals(0, peripherals.size());
assertEquals(1, filters.size()); assertEquals(myAddress, address);
assertEquals(testString, parser.getStringValue(0)); assertEquals(testString+testString2, parser.getStringValue(0)); assertEquals("Hello Martijn", parser.getStringValue(0)); assertFalse(result); assertFalse(result);
assertEquals(1L, parser.getLongValue()); assertEquals(257L, parser.getLongValue()); assertEquals(72340172838076673L, parser.getLongValue()); assertEquals(72623859790382856L, parser.getLongValue());
assertEquals(scanResultCaptor.getValue(), scanResult); assertEquals(bluetoothPeripheralCaptor.getValue().getAddress(), "12:23:34:98:76:54");
assertNotNull(peripherals); assertEquals(1, peripherals.size()); assertEquals(peripheral, peripherals.get(0)); assertNotNull(peripherals2); assertEquals(0, peripherals2.size());
assertEquals(1L, parser.getLongValue()); assertEquals(257L, parser.getLongValue()); assertEquals(72340172838076673L, parser.getLongValue()); assertEquals(72623859790382856L, parser.getLongValue());
assertEquals("123456", string);
assertEquals(STATE_DISCONNECTING, peripheral.getState()); assertEquals(STATE_DISCONNECTED, peripheral.getState());
assertEquals(7, parser.getValue().length); assertEquals(2020, calendar.get(GregorianCalendar.YEAR)); assertEquals(1, calendar.get(GregorianCalendar.MONTH) + 1); assertEquals(6, calendar.get(GregorianCalendar.DAY_OF_MONTH)); assertEquals(12, calendar.get(GregorianCalendar.HOUR_OF_DAY)); assertEquals(40, calendar.get(GregorianCalendar.MINUTE)); assertEquals(12, calendar.get(GregorianCalendar.SECOND));
assertEquals(testString, parser.getStringValue()); assertEquals(testString, parser.getStringValue()); assertEquals(testString, parser.getStringValue());
assertNull(value);
assertEquals("12:23:34:98:76:54", peripheral.getAddress());
assertNull(value);
assertEquals(6, mergedArrays.length); assertEquals(array1[0], mergedArrays[0]); assertEquals(array1[1], mergedArrays[1]); assertEquals(array1[2], mergedArrays[2]); assertEquals(array2[0], mergedArrays[3]); assertEquals(array2[1], mergedArrays[4]); assertEquals(array2[2], mergedArrays[5]);
assertEquals(15, methods.size()); assertEquals(3, methods.size()); assertEquals("getDataFromBase", methods.get(0).getName()); assertEquals("onValueChangedBase", methods.get(1).getName()); assertEquals("setFooBar", methods.get(2).getName());
assertEquals( 1, findMethods( SubClassToExamine.class, "setFoo(.*)", new Class<?>[] { String.class, AnyClassOrPrimitive.class }).size());
assertEquals(2, methods.size()); assertEquals("getDataFromBase", methods.get(0).getName()); assertEquals("getDataFromSub", methods.get(1).getName());
assertEquals(com.vaadin.ui.VerticalLayout.class, layout.getClass()); assertEquals(1.0f, verticalLayout.getExpandRatio(button), 0.0f);
assertEquals(1, methods.size()); assertEquals("onValueChangedBase", methods.get(0).getName());
assertEquals(100, layout.getWidth(), 0); assertEquals(100, layout.getHeight(), 0); assertEquals(Unit.PERCENTAGE, layout.getWidthUnits()); assertEquals(Unit.PERCENTAGE, layout.getHeightUnits());
assertEquals(2, layout.getComponentCount());
assertEquals(1, assignedFields.size());
assertEquals(1337337477578L, value.getTime());
assertEquals( 1, findMethods(SubClassToExamine.class, "setFooBar", ParamCount.constant(0)).size());
assertEquals(2, fields.size()); assertEquals("textFieldBase", fields.get(0).getName()); assertEquals("textFieldSub", fields.get(1).getName());
assertEquals("caption-tab1", layout.getTab(0).getCaption()); assertEquals("caption-tab2", layout.getTab(1).getCaption());
assertEquals(true, checkBox.getValue());
assertEquals(new MarginInfo(true), ((VerticalLayout) layout).getMargin());
assertEquals(20, layout.getPosition(button).getTopValue(), 0); assertEquals(10, layout.getPosition(button).getLeftValue(), 0); assertEquals(Unit.PIXELS, layout.getPosition(button).getTopUnits()); assertEquals(Unit.PERCENTAGE, layout.getPosition(button).getLeftUnits());
assertEquals(1, assignedFields.size());
assertEquals(2, fields.size()); assertEquals("stringBase", fields.get(0).getName()); assertEquals("textFieldBase", fields.get(1).getName());
assertEquals(4, fields.size()); assertEquals("stringBase", fields.get(0).getName()); assertEquals("stringSub", fields.get(1).getName()); assertEquals("textFieldBase", fields.get(2).getName()); assertEquals("textFieldSub", fields.get(3).getName());
assertTrue(isComponent(Button.class)); assertFalse(isComponent(SubClassToExamine.class)); assertFalse(isComponent(null));
assertEquals(com.vaadin.ui.Button.class, Clara.findComponentById(view, "myButton").getClass()); assertEquals(null, Clara.findComponentById(view, "non-existing-id"));
assertEquals( 1, findMethods(SubClassToExamine.class, "setFoo(.*)", (Class<?>[]) null).size());
assertEquals(Alignment.TOP_RIGHT, layout.getComponentAlignment(child));
assertThat( current, allOf(not(instanceOf(UndeclaredThrowableException.class)), not(instanceOf(InvocationTargetException.class))));
assertEquals( 0, findMethods(SubClassToExamine.class, "setFooBar", ParamCount.constant(3)).size());
assertSame(button, controller.getMyButton());
assertEquals( 1, findMethods(SubClassToExamine.class, "setFooBar", ParamCount.constant(2)).size());
assertEquals(Button.class, component.getClass());
assertEquals(com.vaadin.ui.Button.class, button.getClass()); assertEquals("My Button", button.getCaption()); assertEquals(1, button.getTabIndex());
assertTrue(c instanceof Button); assertEquals("foobar", c.getId());
assertNull(c);
assertEquals(1, fields.size()); assertEquals("textFieldBase", fields.get(0).getName());
assertEquals( 4, findMethods(SubClassToExamine.class, "setFoo(.*)", ParamCount.fromTo(0, 2)).size());
assertEquals(200.0f, button200px.getWidth(), 0.0f);
assertEquals( 2, findMethods(SubClassToExamine.class, "setFooBar", ParamCount.constant(1)).size());
assertEquals(Button.class, component.getClass());
assertNotNull(Clara.build());
assertSame(button, controller.myButton);
assertEquals(1, panel.getComponentCount()); assertEquals(Button.class, panel.getContent().getClass());
assertTrue("Expected componentInflated to have been called", layout.isComponentInflatedCalled()); assertEquals( "Expected id to have been set before call to componentInflated", "idOfVerticalLayoutWithInflaterListener", layout.getIdAfterInflate()); assertEquals( "Expected child components to have been added before componentInflated", 1, layout.getComponentCountAfterInflate());
assertEquals(new MarginInfo(true, false, false, true), ((VerticalLayout) layout).getMargin());
assertEquals( 1, findMethods(SubClassToExamine.class, "setFoo(.*)", String.class) .size());
assertEquals(ContentMode.HTML, htmlModeLabel.getContentMode());
assertEquals(com.vaadin.ui.Button.class, button.getClass()); assertEquals("My Button", button.getCaption()); assertEquals(true, button.isReadOnly());
assertSame(button, controller.getMyButton());
assertEquals(new MarginInfo(false), ((VerticalLayout) layout.getComponent(0)).getMargin());
assertTrue(classes.containsKey(Test.class.getName()));
assertFalse(BindingConditions.anyAnnotationIsPresent(Seat.class, Inject.class, Qualifier.class).fulfilled(null, Seat.class, null, null, classLoader)); assertFalse(BindingConditions.anyAnnotationIsPresent(Seat.class, Drivers.class).fulfilled(null, Seat.class, null, null, classLoader)); assertFalse(BindingConditions.anyAnnotationIsPresent(Seat.class).fulfilled(null, Seat.class, null, null, classLoader));
assertTrue(BindingConditions.anyAnnotationIsPresent(Seat.class, Singleton.class, Inject.class).fulfilled(null, Seat.class, null, null, classLoader)); assertTrue(BindingConditions.anyAnnotationIsPresent(Seat.class, Singleton.class, Drivers.class).fulfilled(null, Seat.class, null, null, classLoader)); assertTrue(BindingConditions.anyAnnotationIsPresent(Seat.class, Singleton.class).fulfilled(null, Seat.class, null, null, classLoader));
assertTrue(BindingConditions.allAnnotationsArePresent(Seat.class, Singleton.class).fulfilled(null, Seat.class, null, null, classLoader)); assertTrue(BindingConditions.allAnnotationsArePresent(Drivers.class, Retention.class, Qualifier.class).fulfilled(null, Drivers.class, null, null, classLoader));
assertEquals(type, defaultTypeDeterminator.determineClass(type, candidates, anno, classLoader));
assertFalse(BindingConditions.isNamed(Tire.class, "spare").fulfilled(null, Tire.class, null, new Named() { @Override public Class<? extends Annotation> annotationType() { return Named.class; } @Override public String value() { return "notspare"; } }, classLoader));
assertNotNull(inheritances); assertEquals(0, inheritances.size());
assertEquals(type, defaultTypeDeterminator.determineClass(type, candidates, null, classLoader));
assertTrue(BindingConditions.isNamedIgnoringCase(Tire.class, "spare").fulfilled(null, Tire.class, null, new Named() { @Override public Class<? extends Annotation> annotationType() { return Named.class; } @Override public String value() { return "SPARE"; } }, classLoader));
assertEquals(SingleBean.class, defaultTypeDeterminator.determineClass(type, candidates, anno, classLoader));
assertFalse(BindingConditions.isNamedIgnoringCase(Tire.class, "spare").fulfilled(null, Tire.class, null, new Named() { @Override public Class<? extends Annotation> annotationType() { return Named.class; } @Override public String value() { return "notspare"; } }, classLoader));
assertNotNull(inheritances); assertEquals(3, inheritances.size()); assertEquals(Thread.class, inheritances.get(Runnable.class.getName())[0]); assertEquals(String.class, inheritances.get(CharSequence.class.getName())[0]); assertEquals(String.class, inheritances.get(Object.class.getName())[0]); assertEquals(Thread.class, inheritances.get(Object.class.getName())[1]);
assertNotNull(inheritances); assertEquals(0, inheritances.size());
assertFalse(BindingConditions.xor(confirming, confirming).fulfilled(null, Object.class, null, null, classLoader)); assertFalse(BindingConditions.xor(nonConfirming, nonConfirming).fulfilled(null, Object.class, null, null, classLoader)); assertTrue(BindingConditions.xor(confirming, nonConfirming).fulfilled(null, Object.class, null, null, classLoader)); assertTrue(BindingConditions.xor(nonConfirming, confirming).fulfilled(null, Object.class, null, null, classLoader));
assertTrue(BindingConditions.isNamed(Tire.class, "spare").fulfilled(null, Tire.class, null, new Named() { @Override public Class<? extends Annotation> annotationType() { return Named.class; } @Override public String value() { return "spare"; } }, classLoader));
assertFalse(BindingConditions.annotationIsPresent(Seat.class, Inject.class).fulfilled(null, Seat.class, null, null, classLoader));
assertTrue(BindingConditions.qualifierIs(Tire.class, Drivers.class).fulfilled(null, Tire.class, null, new Drivers() { @Override public Class<? extends Annotation> annotationType() { return Drivers.class; } }, classLoader));
assertFalse(BindingConditions.qualifierIs(Tire.class, Inject.class).fulfilled(null, Tire.class, null, new Drivers() { @Override public Class<? extends Annotation> annotationType() { return Drivers.class; } }, classLoader));
assertTrue(classes.containsKey(Test.class.getName()));
assertEquals(SingleBean.class, defaultTypeDeterminator.determineClass(type, candidates, anno, classLoader));
assertFalse(BindingConditions.allAnnotationsArePresent(Seat.class, Singleton.class, Inject.class).fulfilled(null, Seat.class, null, null, classLoader));
assertTrue(BindingConditions.annotationIsPresent(Seat.class, Singleton.class).fulfilled(null, Seat.class, null, new Singleton() { @Override public Class<? extends Annotation> annotationType() { return Singleton.class; } }, classLoader));
assertNotNull(item); assertEquals(0.004977343,adjpval,EPSILON);
assertEquals("artificial root term", rootT.getName()); assertEquals(TermId.of("owl:Thing"), ecto.getRootTermId()); assertFalse(termPrefixes.contains("NCIT")); assertFalse(termPrefixes.contains("CHEBI")); assertFalse(termPrefixes.contains("GO")); assertEquals(2271, ecto.countNonObsoleteTerms()); assertEquals(0, ecto.countAlternateTermIds());
assertEquals( ImmutableSet.of( TermId.of("HP:0000001"), TermId.of("HP:0000002"), TermId.of("HP:0000003"), TermId.of("HP:0000004"), TermId.of("HP:0000005") ), TermIds.augmentWithAncestors(ontology, Sets.newHashSet(id1), true));
assertEquals(TermId.of("owl:Thing"), permissiveOntology.getRootTermId()); assertEquals(8343, permissiveOntology.countNonObsoleteTerms()); assertEquals(4, permissiveOntology.countAlternateTermIds()); assertTrue(prefixes.contains("NCIT")); assertTrue(prefixes.contains("CHEBI")); assertTrue(prefixes.contains("GO")); assertEquals(2270, ectoTermCount);
assertEquals(3, diseaseModels.size());
assertNotNull(item); assertEquals(0.009954687,adjpval,EPSILON);
assertEquals(1.000,adjustedPValue,EPSILON);
assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);
assertEquals(expected, hypergeometric.logfact(4), EPSILON);
assertEquals(0.2945756, result, EPSILON);
assertNotNull(model); assertTrue(model.hasSexSpecificAnnotation());
assertEquals(expectedNumberOfPValues,pvallist.size());
assertEquals(expected, getParentTerms(ontology, id2)); assertNotEquals(expected, getParentTerms(ontology, id5)); assertEquals(expected, getParentTerms(ontology, id5));
assertNotNull(ontology);
assertEquals(15*0.0004,adjustedPValue,EPSILON);
assertEquals(RelationshipType.of("wibble", "thing"), RelationshipType.of("wibble", "thing"));
assertEquals(expected,result, EPSILON);
assertEquals(2, result.getNumTerms()); assertEquals("[HP:1, HP:2]", ImmutableSortedSet.copyOf(result.getObjectIds()).toString()); assertEquals(tid1, result.getObjectScoreDistribution(tid1).getObjectId()); assertEquals(tid2, result.getObjectScoreDistribution(tid2).getObjectId());
assertEquals(5, ontology.countAllTerms());
assertEquals(expected, hypergeometric.lNchooseK(7, 2), EPSILON);
assertEquals(TermId.of("MONDO:0000624"), ontology.getRootTermId());
assertEquals( "ScoreSamplingOptions [numThreads=1, minObjectId=1, maxObjectId=2, minNumTerms=3, maxNumTerms=4, numIterations=6, seed=5]", samplingOptions.toString());
assertEquals(0.0, similarity.computeScore(idBeet, idCarrot), 0.01); assertEquals(0.405, similarity.computeScore(idBlueCarrot, idCarrot), 0.01); assertEquals(0.0, similarity.computeScore(idPumpkin, idCarrot), 0.01); assertEquals(0.0, similarity.computeScore(idLeafVegetable, idCarrot), 0.01);
assertFalse(CurieUtilBuilder.defaultCurieMap().isEmpty());
assertEquals(genes.size(), 7);
assertEquals(expected, getDescendents(ontology, id5));
assertEquals(expected, getParentTerms(ontology, id1));
assertNotNull(model); assertEquals(expected_number_of_MP_terms,annots.size()); assertFalse(model.hasSexSpecificAnnotation());
assertEquals(0.00300000,adjustedPValue,EPSILON);
assertEquals(0.00950000,adjustedPValue,EPSILON);
assertTrue(diseasemap.containsKey(adamsOliver1Id)); assertEquals(1, geneList.size()); assertEquals(tbx5Id, gene.getId()); assertEquals(symbol, gene.getSymbol());
assertEquals(expected, getChildTerms(ontology, id5));
assertEquals(expected,PhenotypeDotHpoaFileWriter.getHeaderLine());
assertEquals(expected, getParentTerms(ontology, queryTerms));
assertNotNull(ontology);
assertEquals(6, ontology.countAllTerms());
assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);
assertEquals(expected, getAncestorTerms(ontology, id1));
assertEquals(ImmutableSet.of( TermId.of("VO:0000004"), TermId.of("VO:0000007"), TermId.of("VO:0000001"), TermId.of("VO:0000002")), OntologyTerms.parentsOf(idBlueCarrot, ontology));
assertEquals(expected_number_of_models,modelmap.size());
assertEquals(1, samplingResult.size());
assertEquals(6, ontology.countAllTerms());
assertEquals(expected, getChildTerms(ontology, id4)); assertEquals(expected, getChildTerms(ontology, id1));
assertEquals( ImmutableSet.of( TermId.of("VO:0000004"), TermId.of("VO:0000005"), TermId.of("VO:0000006"), TermId.of("VO:0000007"), TermId.of("VO:0000002")), OntologyTerms.childrenOf(idRootVegetable, ontology));
assertEquals(expected, getChildTerms(ontology, queryTerms));
assertEquals(expected, getParentTerms(ontology, id5));
assertTrue(diseasemap.containsKey(familialHypercholesterolemia)); assertEquals(7, geneList.size()); assertTrue(geneList.contains(APOA2)); assertTrue(geneList.contains(ITIH4)); assertTrue(geneList.contains(GHR)); assertTrue(geneList.contains(PPP1R17)); assertTrue(geneList.contains(EPHX2)); assertTrue(geneList.contains(ABCA1)); assertTrue(geneList.contains(LDLR));
assertNotNull(model); assertEquals(Kitl,model.getMarkerId());
assertEquals(userDefinedCurieMap, instance.getCurieMap());
assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);
assertEquals( ImmutableSet.of( TermId.of("VO:0000001"), TermId.of("VO:0000002"), TermId.of("VO:0000004"), TermId.of("VO:0000007")), parents);
assertEquals(results.size(), 1);
assertEquals(objScoreDist.getObjectIds().size(), 1);
assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);
assertEquals(expected, raw_pval, EPSILON);
assertEquals(objScoreDist.getObjectId(), termId);
assertNotEquals(oxycephaly1, oxycephaly2);
assertEquals(expected1, getAncestorTerms(ontology, id5, id1, true)); assertEquals(expected2, getAncestorTerms(ontology, id5, id1, false)); assertEquals(expected3, getAncestorTerms(ontology, id2, id1, true)); assertEquals(expected4, getAncestorTerms(ontology, id2, id1, false));
assertTrue(diseasemap.containsKey(holtOramId)); assertEquals(1, geneList.size()); assertEquals(tbx5Id, gene.getId()); assertEquals(symbol, gene.getSymbol());
assertEquals("Resnik similarity", similarity.getName()); assertTrue(similarity.isSymmetric()); assertEquals("{symmetric: true}", similarity.getParameters());
assertEquals(expected, hypergeometric.phypergeometric(m, m_t, n, n_t), EPSILON);
assertTrue(param.isMCMC());
assertEquals(geneMap.get(TermId.of("NCBIGene:2690")),"GHR"); assertEquals(geneMap.get(TermId.of("NCBIGene:2200")),"FBN1");
assertEquals(0.2140911, result, EPSILON);
assertEquals(5, map.size());
assertTrue(map.containsKey(test1)); assertEquals(3, map.size());
assertEquals( ImmutableSet.of( TermId.of("VO:0000002"), TermId.of("VO:0000004"), TermId.of("VO:0000005"), TermId.of("VO:0000006"), TermId.of("VO:0000007")), children);
assertEquals(0.9370032, result, EPSILON);
assertEquals(15*0.0001,adjustedPValue,EPSILON);
assertTrue(termSynonym.isLayperson());
assertEquals(r1, r2, EPSILON);
assertEquals(expected, getParentTerms(ontology, id1, false)); assertEquals(expected, getParentTerms(ontology, id5, false));
assertEquals(expected, getChildTerms(ontology, id5, false));
assertEquals(TermId.of("HP:0000005"), ontology.getRootTermId()); assertEquals( ImmutableSet.of( TermId.of("HP:0000001"), TermId.of("HP:0000002"), TermId.of("HP:0000003"), TermId.of("HP:0000004") ), TermIds.augmentWithAncestors(ontology, Sets.newHashSet(id1), false));
assertEquals( "ScoreSamplingOptions [numThreads=1, minObjectId=null, maxObjectId=null, minNumTerms=1, maxNumTerms=20, numIterations=100000, seed=42]", samplingOptions.toString());
assertNotNull(model); assertEquals(expected_number_of_MP_terms,annots.size()); assertFalse(model.hasSexSpecificAnnotation()); assertEquals(2,pmids.size());
assertNotNull(item); assertEquals(0.00150000,adjpval,EPSILON);
assertNotNull(pair);
assertTrue(NullValuePredicate.INSTANCE.apply(null));
assertEquals( String.format("Given regex = %s, isPartial = %s, and input = %s", regex, policy, value), expected, pred.apply(value));
assertFalse(NullValuePredicate.INSTANCE.apply(new Object()));
assertEquals(String.format("Given value = %s, and input = %s", value, inputValue), expected, pred.apply(inputValue));
assertEquals(event.getSentenceId(), 2L);
assertNotNull(mSentenceDetailPresenter.createViewModel());
assertFalse(bundle.getBoolean("IS_FAVORITE"));
assertTrue(sentence.getIsStar());
assertNotNull(mSentenceListPresenter.createViewModel());
assertTrue(bundle != null);
assertTrue(mModel.isNeedAutoFocused());
assertEquals(mLongCaptor.getValue(), (Long) time);
assertFalse(mModel.isNeedAutoFocused());
assertFalse(sentence.getIsStar());
assertThat(sentence, is(newSentence));
assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFavorite()); assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFirstLoad()); assertNull(callback);
assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFavorite()); assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFirstLoad()); assertNull(callback);
assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFavorite()); assertTrue(mLoadSentencesRequestParmsCaptor.getValue().isFirstLoad()); assertNotNull(callback);
assertFalse(sentence.getIsStar());
assertEquals(mSetPlayStyleParmsCaptor.getValue().intValue(), mModel.getPlayStyle());
assertEquals(mSetPlayStyleParmsCaptor.getValue().intValue(), mModel.getPlayStyle());
assertTrue(mModel.isNeedAutoFocused()); assertFalse(mUpdateManualFetchFabEventCaptor.getValue().getVisible());
assertTrue(sentence.getIsStar());
assertTrue(intent != null);
assertFalse(mLoadSentencesRequestParmsCaptor.getValue().isFavorite()); assertTrue(mLoadSentencesRequestParmsCaptor.getValue().isFirstLoad()); assertNotNull(callback);
assertEquals(mFetchSentenceAudioRequestParmsCaptor.getValue().getAudioUrl(), mModel.getCurrentAudioUrl()); assertEquals(mFetchSentenceAudioRequestParmsCaptor.getValue().getToken(), mModel.getPlayToken());
assertFalse(trial.isTrialPeriodFinished());
assertTrue(trial.isTrialPeriodFinished());
assertThat(s).isNull();
assertThat(tested.getSearchControls().getSearchScope()).as("SUBTREE_SCOPE, ").isEqualTo(SearchControls.SUBTREE_SCOPE);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(result.length).isEqualTo(6); assertThat(result[0]).isEqualTo((byte)0); assertThat(result[1]).isEqualTo((byte)0); assertThat(result[2]).isEqualTo((byte)0); assertThat(result[3]).isEqualTo((byte)18); assertThat(result[4]).isEqualTo((byte)15); assertThat(result[5]).isEqualTo((byte)-16);
assertThat(path.toString()).isEqualTo("ou=Roger \\\\\\"Bunny\\\\\\" Rabbit,dc=somecompany,dc=com");
assertThat(result < 0).isTrue();
assertThat(aq.encode()).isEqualTo("(a=b)");
assertThat(result instanceof BindOperationRecorder).isTrue(); assertThat(bindOperationRecorder.getLdapOperations()).isSameAs(ldapOperationsMock);
assertThat(path.toString()).isEqualTo("cn=foo/bar");
assertThat(dn).isSameAs(expectedName); assertThat(result).isSameAs(expectedResult);
assertThat(actual).isEqualTo(expected);
assertThat(true).isTrue();
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(string).isEqualTo("ou=EU");
assertThat(result).isSameAs(ldapPathAwareMock);
assertThat(result).isEqualTo(new DistinguishedName(expectedDn)); assertThat(true).isTrue();
assertThat(result).isSameAs(expectedContextSource);
assertThat(control).isNotNull();
assertThat(result).isNotNull(); assertThat(result.getID()).isEqualTo("1.2.840.113556.1.4.473"); assertThat(result.getEncodedValue().length).isEqualTo(9);
assertThat(true).isTrue();
assertThat(text).isEqualTo(expectedDn);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(actual).isEqualTo(expected);
assertThat(result < 0).isTrue();
assertThat(aq.encode()).isEqualTo("(&(a=b)(c=d)(e=f))");
assertThat(s).isNull();
assertThat(valid).isTrue(); assertThat(valid2).isFalse();
assertThat(path1.endsWith(ending1)).isFalse(); assertThat(path2.endsWith(ending2)).isFalse();
assertThat("GR").isEqualTo(LdapUtils.getValue(ldapName, "o"));
assertThat(adapter.getDn()).isEqualTo(DN); assertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);
assertThat(adapter.getDn()).isEqualTo(DN); assertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);
assertThat(expected.getCause()).as("Should be thrown exception").isSameAs(connectException);
assertThat(result).isNull();
assertThat(path1.size()).isEqualTo(0); assertThat(path2.size()).isEqualTo(4);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(path1.startsWith(path2)).isFalse();
assertThat(af.encode()).isEqualTo("foo");
assertThat(path2).as("Should be equal").isEqualTo(path1); assertThat(path1.equals(path2)).isFalse();
assertThat(result).isSameAs(ldapNameAwareMock);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat("john.doe").isEqualTo(LdapUtils.getValue(ldapName, "cn"));
assertThat(s).isNotNull(); assertThat(s.length).isEqualTo(0);
assertThat(result.getModificationOp()).isEqualTo(DirContext.REPLACE_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(object).isEqualTo("value1"); assertThat(resultAttribute.get(1)).isEqualTo("value2");
assertThat(targetContex).isSameAs(dirContextMock); assertThat(targetContex).isSameAs(dirContextMock);
assertThat(true).isTrue();
assertThat(true).isTrue();
assertThat(operation instanceof RenameOperationExecutor).isTrue(); assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock); assertThat(rollbackOperation.getNewDn().toString()).isEqualTo("ou=newou"); assertThat(rollbackOperation.getOriginalDn().toString()).isEqualTo("ou=someou");
assertThat(tested.getDn()).isEqualTo(LdapUtils.newLdapName("cn=john doe, ou=company"));
assertThat(name.toString()).isEqualTo("cn=john doe,ou=company"); assertThat(name.toString()).isEqualTo("cn=john doe, ou=company");
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(true).isTrue();
assertThat(result.getModificationOp()).isEqualTo(DirContext.ADD_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(object).isEqualTo("value1"); assertThat(resultAttribute.get(1)).isEqualTo("value2");
assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim"); assertThat(name.toString()).isEqualTo(dnString);
assertThat(result).isEqualTo("");
assertThat(result).isEqualTo(new LdapName(EXPECTED_DN_STRING));
assertThat(foundContextHolder.getCtx()).isSameAs(contextMock);
assertThat(filter.encode()).isEqualTo("(!(foo=*))"); assertThat(notFilter.encode()).isEqualTo("(!(!(foo=*)))"); assertThat(andFilter.encode()).isEqualTo("(&(!(foo=*))(!(bar=*)))"); assertThat(andFilter.encode()).isEqualTo("(&(!(foo=*))(!(!(bar=*))))");
assertThat(path.isEmpty()).isFalse();
assertThat(s).isNotNull(); assertThat(s).hasSize(2); assertThat(it.next()).isEqualTo("123"); assertThat(it.next()).isEqualTo("234");
assertThat(result).isNotNull(); assertThat(result instanceof CompensatingTransactionObject).isTrue(); assertThat(transactionObject.getHolder()).isNull();
assertThat(result).isEqualTo(0);
assertThat(result).isEqualTo("S-1-5-21-2127521184-1604012920-1887927527-72713");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(true).isTrue();
assertThat(result.getModificationOp()).isEqualTo(DirContext.REPLACE_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(result.getAttribute().get(0)).isEqualTo("value1"); assertThat(result.getAttribute().get(1)).isEqualTo("value2");
assertThat(of.encode()).isEqualTo("(|(a=b)(c=d)(e=f))");
assertThat(result).isEqualTo("dc=261consulting,dc=com");
assertThat(result < 0).isTrue();
assertThat(true).isTrue();
assertThat(dn).isSameAs(epectedDn); assertThat(mods).isSameAs(expectedModifications);
assertThat(true).isTrue();
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(filter.encode()).isEqualTo("(foo=*)"); assertThat(notFilter.encode()).isEqualTo("(!(foo=*))"); assertThat(andFilter.encode()).isEqualTo("(&(foo=*)(bar=*))"); assertThat(andFilter.encode()).isEqualTo("(&(foo=*)(!(bar=*)))");
assertThat(result).isSameAs(object);
assertThat(s).isNull();
assertThat(attr1.equals(attr2)).isFalse();
assertTrue(LdapTransactionUtils .isSupportedWriteTransactionOperation("bind")); assertTrue(LdapTransactionUtils .isSupportedWriteTransactionOperation("rebind")); assertTrue(LdapTransactionUtils .isSupportedWriteTransactionOperation("unbind")); assertTrue(LdapTransactionUtils .isSupportedWriteTransactionOperation("modifyAttributes")); assertTrue(LdapTransactionUtils .isSupportedWriteTransactionOperation("rename")); assertFalse(LdapTransactionUtils .isSupportedWriteTransactionOperation("lookup")); assertFalse(LdapTransactionUtils .isSupportedWriteTransactionOperation("search"));
assertThat(path.isEmpty()).isTrue();
assertThat(adapter.getDn()).isEqualTo(DN); assertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(text).isNull();
assertThat(path1.endsWith(ending1)).isTrue(); assertThat(path2.endsWith(ending2)).isTrue();
assertThat(result.length).isEqualTo(4); assertThat(result[0]).isEqualTo((byte)21); assertThat(result[1]).isEqualTo((byte)0); assertThat(result[2]).isEqualTo((byte)0); assertThat(result[3]).isEqualTo((byte)0);
assertThat("G").isEqualTo(LdapUtils.getValue(ldapName, 2));
assertThat(true).isTrue();
assertThat(rdn.encodeUrl()).isEqualTo("o=my%20organization");
assertThat(component2).as("Should be equal").isEqualTo(component1); assertThat(component1.compareTo(component2) == 0).as("0 should be returned by compareTo").isTrue();
assertThat(true).isTrue(); assertThat(true).isTrue();
assertThat(dn).isSameAs(dn); assertThat(result).isSameAs(expectedResult);
assertThat(items.length).isEqualTo(0); assertThat(items.length).isEqualTo(0);
assertThat(result.getModificationOp()).isEqualTo(DirContext.REMOVE_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(resultAttribute.size()).isEqualTo(0);
assertThat(list).hasSize(2); assertThat(list.get(0)).isEqualTo("value1"); assertThat(list.get(1)).isEqualTo("value2");
assertThat(result).isSameAs(expectedResult);
assertThat(path1.toString()).isEqualTo("ou=baz,ou=foo,ou=bar");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(result).isEqualTo("dc=261consulting%3F,dc=com");
assertThat(expected.getMessage()).contains("Missing converter from");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(result > 0).isTrue();
assertThat(true).isTrue();
assertThat(result).isEqualTo(0);
assertThat(result).isEqualTo(0);
assertThat(value).isEqualTo("Some company");
assertThat(LdapEncoder.filterEncode("*a*b(c)d*\\\\")).isEqualTo(correct);
assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim"); assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim");
assertThat(result).isNotNull(); assertThat(result.getID()).isEqualTo(OID_REQUEST);
assertThat(result).isNotNull(); assertThat(result instanceof LdapContext).isTrue(); assertThat(result instanceof DirContextProxy).isTrue();
assertThat(result).isFalse();
assertThat(path1.startsWith(start1)).isFalse(); assertThat(path2.startsWith(start2)).isFalse();
assertThat(result.isEmpty()).isFalse(); assertThat(result.peek()).isSameAs(operationExecutorMock);
assertThat(path1.startsWith(start1)).isTrue(); assertThat(path2.startsWith(start2)).isTrue();
assertThat(result.length).isEqualTo(6); assertThat(result[0]).isEqualTo((byte)0); assertThat(result[1]).isEqualTo((byte)0); assertThat(result[2]).isEqualTo((byte)0); assertThat(result[3]).isEqualTo((byte)0); assertThat(result[4]).isEqualTo((byte)0); assertThat(result[5]).isEqualTo((byte)5);
assertThat(result < 0).isTrue();
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(env.get(Context.SECURITY_AUTHENTICATION)).isEqualTo("simple"); assertThat(env.get(Context.SECURITY_PRINCIPAL)).isEqualTo("cn=John Doe"); assertThat(env.get(Context.SECURITY_CREDENTIALS)).isEqualTo("pw");
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(result.getModificationOp()).isEqualTo(DirContext.REMOVE_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(resultAttribute.size()).isEqualTo(0);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(principal).isEqualTo(DEFAULT_USER);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(ldapRdn).isEqualTo(new LdapRdn("ou=Some company"));
assertThat(result).isEqualTo(DUMMY_NAME.toString());
assertThat(rdn.encodeUrl()).isEqualTo("o=example.com");
assertThat(result.getModificationOp()).isEqualTo(DirContext.ADD_ATTRIBUTE); assertThat(resultAttribute.getID()).isEqualTo("someattr"); assertThat(object).isEqualTo("value1"); assertThat(resultAttribute.get(1)).isEqualTo("value2");
assertThat(true).isTrue();
assertThat(attributes.length).isEqualTo(1); assertThat(attributes[0]).isEqualTo("member"); assertThat(attributes.length).isEqualTo(1); assertThat(attributes[0]).isEqualTo("member;Range=0-10");
assertThat(attributes.length).isEqualTo(2); assertThat(attributes[0]).isEqualTo("member;Range=0-20"); assertThat(attributes[1]).isEqualTo("cn;Range=0-20");
assertThat((String) attr.get()).isEqualTo("123");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(component2.hashCode()).as("Should be equal").isEqualTo(component1.hashCode());
assertThat(s).isNull();
assertThat(control).isNotNull();
assertThat(path1.toString()).isEqualTo("ou=baz,ou=foo,ou=bar");
assertThat(result.toString()).isEqualTo("cn=john doe" + nextSequenceNo + ",ou=tempEntries");
assertThat(result > 0).isTrue();
assertThat(cause.getClass()).isEqualTo(javax.naming.OperationNotSupportedException.class); assertThat(cause.getMessage()).isEqualTo("[LDAP: error code 53 - Unwilling To Perform]"); assertThat(tested.getCookie()).isNotNull(); assertThat(tested.getCookie().getCookie().length).isEqualTo(0);
assertThat(tested.getSearchControls().getSearchScope()).as("OBJECT_SCOPE, ").isEqualTo(SearchControls.OBJECT_SCOPE);
assertThat(actual).isEqualTo(expected);
assertThat(result instanceof UnbindOperationRecorder).isTrue(); assertThat(recordingOperation.getLdapOperations()).isSameAs(ldapOperationsMock); assertThat(recordingOperation.getRenamingStrategy()).isSameAs(renamingStrategyMock);
assertThat(((CompensatingTransactionObject) result).getHolder()).isSameAs(expectedContextHolder);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(result).isEqualTo(DUMMY_NAME);
assertThat(result).isEqualTo(false);
assertThat(result).isNotSameAs(ldapName); assertThat(result).isEqualTo(new LdapName("cn=john.doe, OU=Users,OU=SE,OU=G"));
assertThat(result).isEqualTo("ou=some%20department,dc=261consulting,dc=com");
assertThat(true).isTrue();
assertThat(path.toString()).isEqualTo("ou=Roger \\\\\\"Bunny\\\\\\" Rabbit,dc=somecompany,dc=com");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(result > 0).isTrue();
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(path.toString()).isEqualTo("cn=foo/bar");
assertThat(path1.startsWith(path2)).isFalse();
assertThat(element).isEqualTo("o=example.com"); assertThat(element).isEqualTo("ou=EU"); assertThat(element).isEqualTo("ou=people"); assertThat(element).isEqualTo("uid=mtah.test");
assertThat(result).isFalse();
assertThat(result).isNotSameAs(ldapName); assertThat(result).isEqualTo(ldapName);
assertThat(result.toString()).isEqualTo("cn=john doe_temp,ou=somecompany,c=SE"); assertThat(result).isNotSameAs(expectedOriginalName);
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(ArrayUtils.isSameLength(expectedSid, result)).as("incorrect length of array").isTrue(); assertThat(expectedSid[i]).isEqualTo(result[i]);
assertThat(suffix.size()).isEqualTo(4); assertThat(suffix.size()).isEqualTo(2); assertThat(suffix.get(0)).isEqualTo("ou=people"); assertThat(suffix.size()).isEqualTo(0); assertThat(true).isTrue();
assertThat(af.toString()).isEqualTo("foo");
assertThat(path1.toString()).isEqualTo("ou=baz,ou=foo,ou=bar");
assertThat(tested.isUpdateMode()).isFalse(); assertThat(tested.isUpdateMode()).isTrue(); assertThat(tested.isUpdateMode()).isFalse();
assertThat(result < 0).isTrue();
assertThat(result).isNotNull(); assertThat(result).isSameAs(expectedResult);
assertThat(result).isSameAs(object);
assertThat(result).isNull();
assertThat(principal).isEqualTo("cn=someUser");
assertThat(result instanceof RebindOperationExecutor).isTrue(); assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock); assertThat(rollbackOperation.getOriginalDn()).isSameAs(expectedDn); assertThat(rollbackOperation.getTemporaryDn()).isSameAs(expectedTempDn); assertThat(rollbackOperation.getOriginalObject()).isSameAs(expectedObject); assertThat(rollbackOperation.getOriginalAttributes()).isSameAs(expectedAttributes);
assertThat(range.toString()).isEqualTo("Range=0-100"); assertThat(range.toString()).isEqualTo("Range=0-*"); assertThat(range.toString()).isEqualTo("Range=0");
assertThat(true).isTrue();
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(env.isEmpty()).isTrue();
assertThat(of.encode()).isEqualTo("(|(a=b)(c=d))");
assertThat(true).isTrue();
assertThat(url).isEqualTo("dc=jayway,dc=se");
assertThat(true).isTrue();
assertThat(result).isEqualTo(true);
assertThat(result.length).isEqualTo(4); assertThat(result[0]).isEqualTo((byte)-96); assertThat(result[1]).isEqualTo((byte)101); assertThat(result[2]).isEqualTo((byte)-49); assertThat(result[3]).isEqualTo((byte)126);
assertThat(tested.isSorted()).isEqualTo(false);
assertThat(result).isEqualTo(0);
assertThat(rdn2.hashCode()).as("Should be equal").isEqualTo(rdn1.hashCode());
assertThat(result).isEqualTo("S-1-5-21-2562418665-3218585558-1813906818-1576");
assertThat(filter.encode()).isEqualTo("(foo=a*b)"); assertThat(notFilter.encode()).isEqualTo("(!(foo=a*b))"); assertThat(andFilter.encode()).isEqualTo("(&(foo=a*b)(bar=a*b))"); assertThat(andFilter.encode()).isEqualTo("(&(foo=a*b)(!(bar=a*b)))");
assertThat(ldapName.toString()).isEqualTo("");
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat(notFilter.encode()).isEqualTo("(!(a=b))");
assertThat(result > 0).isTrue();
assertThat(true).isTrue();
assertThat(operation instanceof UnbindOperationExecutor).isTrue(); assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock); assertThat(rollbackOperation.getOriginalDn()).isSameAs(expectedDn); assertThat(rollbackOperation.getTemporaryDn()).isSameAs(expectedTempName);
assertNotNull( "Original exception resolvedObj after serialization should not be null", exception.getResolvedObj()); assertNull("De-serialized exception resolvedObj should be null", deSerializedException.getResolvedObj());
assertThat(true).isTrue();
assertThat(s[0]).isEqualTo("123"); assertThat(s[1]).isEqualTo("234"); assertThat(s.length).isEqualTo(2);
assertThat(result > 0).isTrue();
assertThat(result instanceof ModifyAttributesOperationRecorder).isTrue(); assertThat(recordingOperation.getLdapOperations()).isSameAs(ldapOperationsMock);
assertThat(result).as("Result should not be null").isNotNull(); assertThat(result instanceof DirContext).isTrue(); assertThat(result instanceof LdapContext).isFalse(); assertThat(result instanceof DirContextProxy).isTrue();
assertThat(result).hasSize(1); assertThat(result.get(0)).isSameAs(expectedResult);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(result).isEqualTo(DUMMY_NAME);
assertThat(adapter.getDn()).isEqualTo(DN); assertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);
assertThat(of.encode()).isEqualTo("(a=b)");
assertThat(result instanceof RebindOperationRecorder).isTrue(); assertThat(rebindOperationRecorder.getLdapOperations()).isSameAs(ldapOperationsMock); assertThat(rebindOperationRecorder.getRenamingStrategy()).isSameAs(renamingStrategyMock);
assertThat("M").isEqualTo(LdapUtils.getValue(ldapName, "ou"));
assertThat(result instanceof RenameOperationRecorder).isTrue(); assertThat(recordingOperation.getLdapOperations()).isSameAs(ldapOperationsMock);
assertThat(TransactionSynchronizationManager.getResource(contextSourceMock)).isNull(); assertThat(expectedContextHolder.getTransactionOperationManager()).isNull();
assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim"); assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim");
assertThat(result).isEqualTo(ldapName);
assertThat(name.toString()).isEqualTo("ou=foo,ou=bar,ou=baz,ou=bim"); assertThat(name.toString()).isEqualTo("OU=foo,OU=bar,OU=baz,OU=bim");
assertThat(result.toString()).isEqualTo("cn=john doe+sn=doe_temp,ou=somecompany,c=SE");
assertThat(path1.toString()).isEqualTo("ou=foo,ou=bar,cn=fie,ou=baz");
assertThat(ArrayUtils.isSameLength(expectedSid, result)).isTrue(); assertThat(expectedSid[i]).isEqualTo(result[i]);
assertThat(tested.getSearchControls().getSearchScope()).as("ONELEVEL_SCOPE, ").isEqualTo(SearchControls.ONELEVEL_SCOPE);
assertThat(path.toString()).isEqualTo("cn=john.doe,ou=Some Company,ou=G,ou=M");
assertThat(aq.encode()).isEqualTo("(&(a=b)(c=d))");
assertThat(true).isTrue();
assertThat(result < 0).isTrue();
assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult);
assertThat("I").isEqualTo(LdapUtils.getValue(ldapName, 1));
assertThat(result < 0).isTrue();
assertThat(result).isEqualTo("S-1-5-21-1-2-3-4");
assertThat(adapter.getDn().toString()).isEqualTo("ou=some unit"); assertThat(adapter.getNameInNamespace()).isEqualTo("ou=some unit,dc=jayway,dc=se"); assertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);
assertThat(prefix.size()).isEqualTo(0); assertThat(prefix.size()).isEqualTo(1); assertThat(prefix.get(0)).isEqualTo("o=example.com"); assertThat(prefix.size()).isEqualTo(2); assertThat(prefix.get(0)).isEqualTo("o=example.com"); assertThat(prefix.get(1)).isEqualTo("ou=EU");
assertThat(s).isEqualTo("def");
assertEquals(5, getAllChildrenWithData(curatorFramework, "/all/test3").count()); assertEquals(5, getAllChildrenWithData(curatorFramework, "/all/test3").count()); assertEquals(0, getAllChildrenWithData(curatorFramework, "/all/xyz/").count());
assertEquals(5, getAllChildren(curatorFramework, "/all/test1").count()); assertEquals(5, getAllChildren(curatorFramework, "/all/test1").count()); assertEquals(0, getAllChildren(curatorFramework, "/all/xyz/").count());
assertEquals(intDecode(curatorFramework.getData().forPath(TEST_PATH2)), LOOP);
assertEquals(setDecode(curatorFramework.getData().forPath(TEST_PATH)), Sets.newHashSet("1")); assertEquals(setDecode(curatorFramework.getData().forPath(TEST_PATH)), Sets.newHashSet());
assertNotNull(ret); assertEquals(2, ret.size());
assertTrue(rodps.isTableExist(null, table, null)); assertFalse(rodps.isTableExist(null, table + "not_exists", null));
assertNotNull(ret); assertEquals(0, ret.size()); assertNotNull(ret); assertEquals(0, ret.size());
assertTrue(matcher.matches("AABBCC")); assertFalse(matcher.matches("FFFF"));
assertFalse(agents.isEmpty()); assertNotNull(m); assertTrue(m.getHasSingleRequiredParameter()); assertTrue(m.getParameters().size() > 0);
assertFalse(steps.isEmpty()); assertThat(steps, hasItem(stepWithName("archiveArtifacts"))); assertThat(steps, not(hasItem(stepWithName("properties")))); assertThat(steps, not(hasItem(stepWithName("archive")))); assertThat(steps, hasItem(stepWithName("catchError"))); assertThat(steps, hasItem(stepWithName("withSonarQubeEnv")));
assertEquals("Can\'t access content from github: no credential found", e.getMessage());
assertEquals(null, resp.get("credentialId"));
assertTrue("should find bravo cap on BravoClass", Capabilities.hasCapability(bravo, "bravo")); assertFalse("should not find blahblah cap on BravoClass", Capabilities.hasCapability(bravo, "blahblah")); assertTrue("should find charlie cap on CharlieClass", Capabilities.hasCapability(charlie, "charlie")); assertFalse("should not find blahblah cap on CharlieClass", Capabilities.hasCapability(charlie, "blahblah"));
assertEquals("[c, d]", toS(r.apply(array))); assertEquals("[c, d]", toS(r.apply(list))); assertEquals("[c, d]", toS(r.apply(set)));
assertEquals(2, orgs.size()); assertEquals(BbCloudWireMock.USER_UUID, ((Map)orgs.get(0)).get("key")); assertEquals("Vivek Pandey", ((Map)orgs.get(0)).get("name")); assertEquals(BbCloudWireMock.TEAM_UUID, ((Map)orgs.get(1)).get("key")); assertEquals("Vivek\'s Team", ((Map)orgs.get(1)).get("name"));
assertFalse(wrappers.isEmpty()); assertNotNull(w);
assertNotNull(r); assertEquals(BitbucketServerScm.ID, r.get("id")); assertEquals(apiUrl, r.get("uri")); assertNull(r.get("credentialId"));
assertEquals("Jenkinsfile", content.getContent().getName()); assertEquals("e23b8ef5c2c4244889bf94db6c05cc08ea138aef", content.getContent().getSha()); assertEquals("PR-demo", content.getContent().getRepo()); assertEquals("cloudbeers", content.getContent().getOwner());
assertEquals("scmConfig.credentialId", errors.get(0).get("field")); assertEquals("NOT_FOUND", errors.get(0).get("code")); assertNull(getOrgRoot().getItem("demo"));
assertTrue("should find alpha cap on BravoClass", Capabilities.hasCapability(bravo, "alpha")); assertTrue("should find alpha cap on CharlieClass", Capabilities.hasCapability(charlie, "alpha"));
assertEquals("demo", r.get("name"));
assertEquals(credentialId, expectedCredId); assertEquals(normalizedUrl, r.get("uri")); assertEquals(expectedCredId, r.get("credentialId")); assertNotEquals(apiUrl, apiUrlWithSlash); assertEquals(normalizedUrl, normalizedUrlWithSlash); assertEquals(expectedCredId, expectedCredIdWithSlash); assertEquals(expectedCredId, r.get("credentialId")); assertEquals(normalizedUrl, r.get("uri"));
assertNotNull(freeStylePipeline); assertNotNull(blueRun); assertNotNull(links); assertNotNull(links.get("self"));
assertEquals("Can\'t access content from github: no credential found", e.getMessage());
assertNull(workflowRun);
assertEquals(1, jwtTokenServiceEndpoints.size()); assertEquals(Jenkins.getInstance().getRootUrl(), jwtTokenServiceEndpoints.get(0).getHostUrl());
assertEquals("Jenkinsfile", content.getContent().getName()); assertEquals("e23b8ef5c2c4244889bf94db6c05cc08ea138aef", content.getContent().getSha()); assertEquals("PR-demo", content.getContent().getRepo()); assertEquals("cloudbeers", content.getContent().getOwner());
assertNotNull(freeStylePipeline); assertNotNull(blueRun); assertEquals("/blue/rest/organizations/jenkins/pipelines/project/runs/1/changeSet/?start=0&limit=101", fetchData.getRestUrl());
assertEquals(resp.get("code"), 400); assertEquals(1, errors.size()); assertEquals(errors.get(0).toString(), "scmConfig.credentialId", errors.get(0).get("field")); assertEquals(errors.get(0).toString(), "INVALID", errors.get(0).get("code"));
assertTrue(matcher.matches("A Folder/Folder/Pipeline")); assertFalse(matcher.matches("A Folder/Sub/Pipeline"));
assertTrue(resp.get("message").toString().toLowerCase().contains("invalid url"));
assertThat(a1.getId(), is(not(a2.getId())));
assertNotNull(freeStylePipeline); assertNotNull(blueRun); assertNotNull(links); assertNotNull(links.get("self"));
assertFalse(tools.isEmpty()); assertNotNull(t); assertEquals("jdk", t.getSymbol());
assertEquals(workflowRun, run);
assertEquals("Can\'t access content from github: no credential found", e.getMessage());
assertTrue(matcher.matches("A Folder/Folder/Pipeline")); assertFalse(matcher.matches("A Folder/Sub/Pipeline"));
assertEquals("[e, f]", toS(r.apply(array))); assertEquals("[e, f]", toS(r.apply(list))); assertEquals("[e, f]", toS(r.apply(set)));
assertEquals("Redundant properties discovered: " + model.getProperties(), 1, model.getProperties().size());
assertEquals("ok", resp.get("status")); assertEquals("git:" + HTTPS_GITHUB_PUBLIC_HASH, resp2.get("credentialId"));
assertEquals("Jenkinsfile", content.getContent().getName()); assertEquals("e23b8ef5c2c4244889bf94db6c05cc08ea138aef", content.getContent().getSha()); assertEquals("PR-demo", content.getContent().getRepo()); assertEquals("cloudbeers", content.getContent().getOwner());
assertEquals(null, resp.get("credentialId"));
assertEquals("Jenkinsfile", content.getContent().getName()); assertEquals("e23b8ef5c2c4244889bf94db6c05cc08ea138aef", content.getContent().getSha()); assertEquals("PR-demo", content.getContent().getRepo()); assertEquals("cloudbeers", content.getContent().getOwner());
assertEquals("[a, b]", toS(r.apply(array))); assertEquals("[a, b]", toS(r.apply(list))); assertEquals("[a, b]", toS(r.apply(set)));
assertTrue(matcher.matches("AABBCC")); assertFalse(matcher.matches("FFFF"));
assertTrue(matcher.matches("AABBCC")); assertFalse(matcher.matches("FFFF"));
assertTrue(matcher.matches("AABBCC")); assertFalse(matcher.matches("FFFF"));
assertEquals(workflowRun, run);
assertNotNull(r); assertEquals(BitbucketCloudScm.ID, r.get("id")); assertEquals(apiUrl, r.get("uri")); assertNull(r.get("credentialId"));
assertTrue(PipelineJobFilters.isPullRequest(organizationFolder)); assertFalse(new PipelineJobFilters.OriginFilter().getFilter().apply(organizationFolder)); assertTrue(new PipelineJobFilters.PullRequestFilter().getFilter().apply(organizationFolder));
assertEquals("Can\'t access content from github: no credential found", e.getMessage());
assertTrue("should find alpha cap on AlphaClass", Capabilities.hasCapability(base, "alpha")); assertFalse("should not find bravo cap on AlphaClass", Capabilities.hasCapability(base, "bravo")); assertFalse("should not find blahblah cap on AlphaClass", Capabilities.hasCapability(base, "blahblah"));
assertEquals(2, orgs.size()); assertEquals(BbCloudWireMock.USER_UUID, ((Map)orgs.get(0)).get("key")); assertEquals("Vivek Pandey", ((Map)orgs.get(0)).get("name")); assertEquals(BbCloudWireMock.TEAM_UUID, ((Map)orgs.get(1)).get("key")); assertEquals("Vivek\'s Team", ((Map)orgs.get(1)).get("name"));
assertEquals(resp.get("code"), 400); assertEquals("scmConfig", errors.get(0).get("field")); assertEquals("MISSING", errors.get(0).get("code")); assertNull(getOrgRoot().getItem("demo"));
assertEquals(5, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertTrue(invalidContextsIds.contains(contextId_ok));
assertTrue("Contact Message has not one address", noAddresses);
assertNotNull("result could not be null", filteredList); assertTrue("Should filter out catalog-entry of TYPE_NODE", filteredList.isEmpty());
assertFalse("Wrong equals implementation, different types are recognized as equals ", one.equals(new Integer(1))); assertFalse("Wrong equals implementation, different objects are recognized as equals ", one.equals(two)); assertFalse("Wrong equals implementation, null value is recognized as equals ", one.equals(null)); assertTrue("Wrong equals implementation, same objects are NOT recognized as equals ", one.equals(sameRefAsOne)); assertTrue("Wrong equals implementation, same objecst are NOT recognized as equals ", one.equals(sameAsOne));
assertEquals("Wrong URI with type " + publisher.getSourceType(), testContextPathUri + "/url/RepositoryEntry/" + contextId + "/CourseNode/" + subContextId + "/path%3D" + sourceEntryId + "/0", uriToSourceEntry);
assertNull(subscriptionItem);
assertEquals("other :port appended.", expectedValue, serverUriWithContext); assertEquals("other :port appended.", expectedValue, serverUriWithContext);
assertTrue(thread != null); assertTrue(thread.size() == 0);
assertEquals("", MappingResult.NEW_MAPPING_BY_EMAIL, result);
assertNotNull(notificationsHandler);
assertEquals("no :port appended if default http port 80 is used.", expectedValue, serverUriScheme); assertEquals("other :port appended.", expectedValue, serverUriScheme); assertEquals("no :port appended if default https port 443 is used.", expectedValue, serverUriScheme); assertEquals("other :port appended.", expectedValue, serverUriScheme);
assertNotNull("result could not be null", filteredList); assertTrue("Should filter out catalog-entry of TYPE_NODE", filteredList.isEmpty());
assertEquals(0, statistics.getFailedCounter()); assertEquals(2, statistics.getDeliveredCounter()); assertEquals(2, statistics.getTotalCounter());
assertEquals("getSubscriber returns wrong subscriber", subscriber, resultSubscriber);
assertTrue(thread != null); assertTrue(thread.size() == 0);
assertEquals(message3, newTopMessage);
assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameRefAsOne.hashCode()); assertFalse("Wrong hashCode implementation, different objects have same hash-code", one.hashCode() == two.hashCode()); assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameAsOne.hashCode());
assertEquals(MailerResult.OK, result.getReturnCode());
assertEquals("Could not extract subContextId from \'" + subidentifier + "\'", Long.valueOf(subContextIdString), subContextId);
assertTrue(property.isOverwritten()); assertEquals(DEFAULT_VALUE, property.getDefaultValue());
assertTrue(days == 0);
assertTrue(AuthenticatorHelper.verifyPasswordStrength("test2", "aBcdef_1", "test2"));
assertNull("null input must return null", olatResourcable);
assertNotNull("Should not return null", subscriptions); assertEquals("Wrong number of subscriptions", 2, subscriptions.size());
assertTrue("last sent message should be successful", isSent); assertEquals(0.5, successRate, 0); assertEquals(2, getAllSent()); assertEquals(1, getSentFailed());
assertTrue(days < 0);
assertEquals("Wrong number of the size", 2, statistics.getChannel2StatusMap().size()); assertFalse(statistics.getChannel2StatusMap().get(Subscriber.Channel.EMAIL)); assertTrue(statistics.getChannel2StatusMap().get(null));
assertNull("Must return null, when more than one mapping exists", mappedIdentity);
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE); assertNotNull(resourceable.getResourceableId()); assertEquals(resourceable.getResourceableId(), DEFAULT_KEY);
assertFalse(isValid);
assertEquals("expected 4 unaccessible subscriptions for this identity", 4, contextList.size());
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE_WITH_SUBTYPE); assertNotNull(resourceable.getResourceableId()); assertEquals(resourceable.getResourceableId(), DEFAULT_KEY);
assertTrue(movedMessage.getParent() == null);
assertTrue("send message should be successful", isSent); assertEquals(1.0, successRate, 0); assertEquals(1, getAllSent()); assertEquals(0, getSentFailed());
assertTrue(message == null);
assertFalse(catalogService.isEntryWithinCategory(toBeCheckedEntry, entriesList));
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE); assertNull(resourceable.getResourceableId());
assertTrue(thread != null); assertTrue(thread.size() == 0);
assertEquals("Wrong URI with unkown type", testContextPathUri + "/url/UNKOWN/0", uriToContext);
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE_WITH_SUBTYPE); assertNull(resourceable.getResourceableId());
assertNotNull("Missing TitleAndDescriptionStatistik", titleAndDescriptionStatistik); assertFalse("Title should not be updated", titleAndDescriptionStatistik.isTitleUpdated()); assertTrue("Description should be updated", titleAndDescriptionStatistik.isDescriptionUpdated());
assertNotNull("Should not return null", subscriptions); assertTrue(subscriptions.isEmpty());
assertFalse("Wrong equals implementation, different types are recognized as equals ", leOne.equals(new Integer(1))); assertFalse("Wrong equals implementation, different users are recognized as equals ", leOne.equals(leThree)); assertFalse("Wrong equals implementation, null value is recognized as equals ", leOne.equals(null)); assertTrue("Wrong equals implementation, same users are NOT recognized as equals ", leOne.equals(leOne)); assertTrue("Wrong equals implementation, same users are NOT recognized as equals ", leOne.equals(sameAsLeOne));
assertTrue(failedLogin.isLoginBlocked(Long.valueOf(1))); assertFalse(failedLogin.isLoginBlocked(Long.valueOf(1)));
assertEquals("", MappingResult.NEW_MAPPING_BY_EMAIL, result);
assertNull("Must return null, when no mapping exists", mappedIdentity);
assertFalse("Wrong equals implementation, different types are recognized as equals ", one.equals(new Integer(1))); assertFalse("Wrong equals implementation, different objects are recognized as equals ", one.equals(two)); assertFalse("Wrong equals implementation, null value is recognized as equals ", one.equals(null)); assertTrue("Wrong equals implementation, same objects are NOT recognized as equals ", one.equals(sameRefAsOne)); assertTrue("Wrong equals implementation, same objecst are NOT recognized as equals ", one.equals(sameAsOne));
assertEquals("other :port appended.", expectedValue, serverUri); assertEquals("other :port appended.", expectedValue, serverUri);
assertTrue(thread != null); assertTrue(thread.size() == 1); assertEquals(oneTopMessage, thread.get(0));
assertFalse(result);
assertNotNull("Must return olatResourcable object and not null", olatResourcable); assertEquals("OLATResourceable has not same key like catalog-entry", olatResourcable.getResourceableId(), commonTestCatalogEntryMock.getKey()); assertEquals("Wrong OLATResourceable type name", olatResourcable.getResourceableTypeName(), CatalogService.CATALOGENTRY);
assertEquals("Wrong charset when charset is not supported, should return \'WebappHelper.getDefaultCharset()", charsetValue, WebappHelper.getDefaultCharset());
assertEquals("other :port appended.", expectedValue, serverUriWithContext); assertEquals("other :port appended.", expectedValue, serverUriWithContext);
assertFalse(newPasswordOK);
assertTrue(deFormattedDate.equals("09.06.2014"));
assertFalse(FileNameValidator.validate("..this_is_valid_file_name")); assertFalse(FileNameValidator.validate("..this_is_valid_file_name..."));
assertTrue(contextsOfSubscriber1.size() == 4); assertEquals("only one course is accessible for this identity", 1, contextIdToRepositoryEntryMap.size());
assertNotNull("Parent attribute should not be null", catalogEntry.getParent()); assertTrue("Parent attribute is not set correctly", catalogEntry.getParent() == commonTestCatalogEntryMock);
assertEquals("Wrong charset when charset is not supported, should return \'WebappHelper.getDefaultCharset()", charsetValue, WebappHelper.getDefaultCharset());
assertEquals("getPublisher returns wrong publisher", publisher, resultPublisher);
assertEquals("Wrong URI with type " + publisher.getSourceType(), testContextPathUri + "/url/RepositoryEntry/" + contextId + "/CourseNode/" + subContextId + "/path%3D" + sourceEntryId + "/0", uriToSourceEntry);
assertEquals("Wrong number of owners", 1, coOwners.size());
assertEquals("system is mail sender", ObjectMother.OLATADMIN_EMAIL, systemEmailer.mailfrom);
assertEquals("Wrong charset when charset is supported, should return this value", charsetValue, supportedCharset);
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SEND_FAILED_DUE_INVALID_ADDRESSES_550, sendStatus.getStatusCode()); assertFalse(sendStatus.canProceedWithWorkflow());
assertTrue(movedMessage.getParent() == null);
assertTrue("send confirmation should be successful", isSent); assertEquals(0.5, successRate, 0); assertEquals(2, getAllSent()); assertEquals(1, getSentFailed());
assertNotNull("Must return olatResourcable object and not null", olatResourcable); assertEquals("OLATResourceable has not same key like catalog-entry", olatResourcable.getResourceableId(), commonTestCatalogEntryMock.getKey()); assertEquals("Wrong OLATResourceable type name", olatResourcable.getResourceableTypeName(), CatalogService.CATALOGENTRY);
assertTrue(campusCourseLearnServiceImplTestObject.getCoursesWhichCouldBeCreated(identityMock, SapOlatUser.SapUserType.LECTURER).size() == 1);
assertEquals("", MappingResult.NEW_MAPPING_BY_PERSONAL_NR, result);
assertTrue("Asserts that the movedMessage has a new parent!", movedMessage.getParent() == moveTargetMessage);
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SUCCESSFULL_SENT_EMAILS, sendStatus.getStatusCode()); assertTrue(sendStatus.getStatusCode().isSuccessfullSentMails()); assertFalse(sendStatus.isSeverityError()); assertFalse(sendStatus.isSeverityWarn()); assertTrue(sendStatus.canProceedWithWorkflow());
assertTrue(escapedString.indexOf("<script>") == -1); assertTrue(escapedString.indexOf("&lt") != -1);
assertNotNull(statistics);
assertEquals("org.olat.data.group.area.BGAreaImpl", simpleProbeTO.getKey());
assertNotNull("result could not be null", filteredList); assertTrue("Should filter out catalog-entry of TYPE_NODE", filteredList.isEmpty());
assertFalse(CampusUtils.addIfNotAlreadyProcessed(processedIdsSet, new Long(100)));
assertTrue(thread != null); assertTrue(thread.size() == 0);
assertNotNull("Could not found NotificationTypeHandler for \'forum\'", forumTypeHandler); assertTrue("Wrong type-handler for forum", forumTypeHandler instanceof ForumNotificationTypeHandler);
assertEquals(1, simpleProbeTOList.size());
assertEquals(1, statistics.getFailedCounter()); assertEquals(1, statistics.getDeliveredCounter()); assertEquals(2, statistics.getTotalCounter());
assertNotNull("emailer was constructed", emailer); assertNotNull(ore);
assertNull(publicCourse);
assertEquals(4, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertFalse(invalidContextsIds.contains(contextId_ok));
assertEquals(0.0, successRate, 0); assertEquals(1, getAllSent()); assertEquals(1, getSentFailed());
assertTrue(VFSManager.sanitizePath(path1).equals(path1_expected)); assertTrue(VFSManager.sanitizePath(path2).equals(path2_expected)); assertTrue(VFSManager.sanitizePath(path3).equals(path3_expected)); assertTrue(VFSManager.sanitizePath(path4).equals(path4_expected)); assertTrue(VFSManager.sanitizePath(path5).equals(path5_expected)); assertTrue(VFSManager.sanitizePath(path6).equals(path6_expected));
assertTrue(newPasswordOK); assertTrue(newPasswordOK);
assertEquals("Wrong URI with type " + publisher.getSourceType(), testContextPathUri + "/url/RepositoryEntry/" + contextId + "/CourseNode/" + subContextId + "/Message/" + sourceEntryId, uriToSourceEntry);
assertTrue(AuthenticatorHelper.verifyPasswordStrength("test2", "aBcdef_1", ""));
assertNotNull("Parent attribute should not be null", catalogEntry.getParent()); assertTrue("Parent attribute is not set correctly", catalogEntry.getParent() == commonTestCatalogEntryMock);
assertNotNull("Could not found NotificationTypeHandler for \'forum\'", forumTypeHandler); assertTrue("Wrong type-handler for forum", forumTypeHandler instanceof ForumNotificationTypeHandler);
assertEquals("Wrong size of nodes", 7, allNodeIds.size()); assertTrue(allNodeIds.contains(rootNodeIdent)); assertTrue(allNodeIds.contains(firstChildNodeIdent)); assertTrue(allNodeIds.contains(secondChildNodeIdent)); assertTrue(allNodeIds.contains(firstChildNodeIdent + 1)); assertTrue(allNodeIds.contains(firstChildNodeIdent + 2)); assertTrue(allNodeIds.contains(secondChildNodeIdent + 1)); assertTrue(allNodeIds.contains(secondChildNodeIdent + 2));
assertEquals(MailerResult.OK, result.getReturnCode());
assertEquals("Wrong URI with unkown type", testContextPathUri + "/url/UNKOWN/0", uriToContext);
assertTrue(DateUtil.isMoreThanOneDayBefore(cal.getTime()));
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SMTP_AUTHENTICATION_FAILED, sendStatus.getStatusCode()); assertTrue(sendStatus.canProceedWithWorkflow());
assertFalse("Wrong equals implementation, different types are recognized as equals ", one.equals(new Integer(1))); assertFalse("Wrong equals implementation, different objects are recognized as equals ", one.equals(two)); assertFalse("Wrong equals implementation, null value is recognized as equals ", one.equals(null)); assertTrue("Wrong equals implementation, same objects are NOT recognized as equals ", one.equals(sameRefAsOne)); assertTrue("Wrong equals implementation, same objecst are NOT recognized as equals ", one.equals(sameAsOne));
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SEND_FAILED_DUE_INVALID_DOMAIN_NAME_553, sendStatus.getStatusCode()); assertFalse(sendStatus.canProceedWithWorkflow());
assertTrue("Event was not triggered, missing fireEventToListenersOf(...)", eventBusMock.firedEvent);
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE); assertNotNull(resourceable.getResourceableId()); assertEquals(resourceable.getResourceableId(), DEFAULT_KEY);
assertTrue(newPasswordOK);
assertEquals("Wrong charset when no property exists, should return \'WebappHelper.getDefaultCharset()", charsetValue, WebappHelper.getDefaultCharset());
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SEND_FAILED_DUE_UNKNOWN_SMTP_HOST, sendStatus.getStatusCode()); assertTrue(sendStatus.canProceedWithWorkflow());
assertNotNull("Must return an identity, when only one mapping exists", mappedIdentity);
assertEquals("getPublisher returns wrong publisher", publisher, resultPublisher);
assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameRefAsOne.hashCode()); assertFalse("Wrong hashCode implementation, different objects have same hash-code", one.hashCode() == two.hashCode()); assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameAsOne.hashCode());
assertNotNull(noSubscriptionInfo);
assertTrue(catalogService.isEntryWithinCategory(toBeCheckedEntry, entriesList));
assertEquals(course.getTitle(), "Title");
assertEquals("getSubscriber returns wrong subscriber", subscriber, resultSubscriber);
assertEquals("", MappingResult.MAPPING_ALREADY_EXIST, result);
assertEquals(4, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertFalse(invalidContextsIds.contains(contextId_ok));
assertNotNull("result could not be null", filteredList); assertTrue("Should filter out catalog-entry of TYPE_NODE", filteredList.isEmpty());
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SEND_FAILED_DUE_NO_RECIPIENTS_503, sendStatus.getStatusCode()); assertFalse(sendStatus.canProceedWithWorkflow());
assertTrue(message != null);
assertFalse(isValid);
assertEquals("Wrong number of owners", 2, coOwners.size());
assertEquals(2, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertFalse(invalidContextsIds.contains(contextId_ok));
assertEquals(typeName, CLASS_NAME_NO_PACKAGE);
assertNotNull("Should not return null", subscriptions); assertTrue(subscriptions.isEmpty());
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SENDER_OR_RECIPIENTS_NOK_553, sendStatus.getStatusCode()); assertFalse(sendStatus.canProceedWithWorkflow());
assertEquals("createAndSaveSubscription returns wrong subscription", subscription, createdSubscription);
assertEquals("Could not extract sourceId from \'" + data + "\'", Long.valueOf(sourceId), extractedSourceId);
assertEquals("Wrong URI with type " + publisher.getSourceType(), testContextPathUri + "/url/RepositoryEntry/" + contextId + "/CourseNode/" + subContextId + "/Message/" + sourceEntryId, uriToSourceEntry);
assertNotNull("Could not found NotificationTypeHandler for \'wiki\'", wikiTypeHandler); assertTrue("Wrong type-handler for forum", wikiTypeHandler instanceof WikiNotificationTypeHandler);
assertNotNull("result could not be null", filteredList); assertTrue("Result list should be empty, type_leaf and not-owner must be filtered", filteredList.isEmpty());
assertEquals("getPublisher returns wrong publisher", publisher, resultPublisher);
assertEquals("Wrong number of the size", 2, statistics.getChannel2StatusMap().size()); assertTrue(statistics.getChannel2StatusMap().get(Subscriber.Channel.EMAIL)); assertTrue(statistics.getChannel2StatusMap().get(null));
assertNull("null input must return null", olatResourcable);
assertNotNull(e);
assertTrue("Asserts that the movedMessage has a new parent!", movedMessage.getParent() == moveTargetMessage);
assertTrue(deFormattedDate.equals(today));
assertTrue(days == 0);
assertFalse(newPasswordOK);
assertTrue(realForum != null);
assertEquals("getSubscriber return wrong subscriber", subscriber, resultSubscriber);
assertEquals(5, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertTrue(invalidContextsIds.contains(contextId_ok));
assertTrue("Contact Message has at least one address", contactMessage.hasAtLeastOneAddress());
assertNull(statistics);
assertTrue(result);
assertEquals("Wrong size of nodes", 1, allNodeIds.size());
assertEquals("Wrong URI to context", testContextPathUri + "/url/RepositoryEntry/" + contextId, uriToContext);
assertNotNull(publicCourse);
assertEquals("Wrong URI to context", testContextPathUri + "/url/RepositoryEntry/" + contextId, uriToContext);
assertEquals(2, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertFalse(invalidContextsIds.contains(contextId_ok));
assertEquals("Wrong body text", mailObjectMother.bodyText, simpleMailTO.getBodyText());
assertFalse(failedLogin.isLoginBlocked(Long.valueOf(2)));
assertEquals("", MappingResult.COULD_NOT_MAP, result);
assertNull("Must return null, when no mapping exists", mappedIdentity);
assertNotNull(propertiesLoader.getProperty(ITCASE_DUMMY));
assertNotNull(statistics);
assertTrue(thread != null); assertTrue(thread.size() == 1); assertEquals(oneTopMessage, thread.get(0));
assertFalse(AuthenticatorHelper.verifyCharSets("_1a"));
assertEquals("other :port appended.", expectedValue, serverUri); assertEquals("other :port appended.", expectedValue, serverUri);
assertEquals(RESOURCEABLE_STRING_REPRESENTATION, oresStringRespresentation);
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE); assertNotNull(resourceable.getResourceableId()); assertEquals(resourceable.getResourceableId(), DEFAULT_KEY);
assertFalse(result);
assertNotNull("result could not be null", filteredList); assertTrue("Result list should be empty, type_leaf and not-owner must be filtered", filteredList.isEmpty());
assertFalse(newPasswordOK);
assertTrue("Contact Message has at least one address", contactMessage.hasAtLeastOneAddress());
assertNotNull("emailer was constructed", emailer); assertEquals(MessageSendStatusCode.SEND_FAILED_DUE_COULD_NOT_CONNECT_TO_SMTP_HOST, sendStatus.getStatusCode()); assertTrue(sendStatus.canProceedWithWorkflow());
assertTrue("Contact Message has at least one address", contactMessage.hasAtLeastOneAddress());
assertTrue(DateUtil.isMoreThanOneDayBefore(cal.getTime()));
assertEquals(message3, newTopMessage);
assertTrue(AuthenticatorHelper.verifyPasswordStrength("", "aBc_123_X", "username"));
assertTrue(CampusUtils.addIfNotAlreadyProcessed(processedIdsSet, new Long(100)));
assertEquals("Could not extract sourceId from \'" + data + "\'", Long.valueOf(sourceId), extractedSourceId);
assertEquals("no :port appended if default http port 80 is used.", expectedValue, serverUriScheme); assertEquals("other :port appended.", expectedValue, serverUriScheme); assertEquals("no :port appended if default https port 443 is used.", expectedValue, serverUriScheme); assertEquals("other :port appended.", expectedValue, serverUriScheme);
assertFalse(matches);
assertTrue(AuthenticatorHelper.verifyCharSets("_1aB"));
assertEquals("Wrong number of the size", 2, statistics.getChannel2StatusMap().size()); assertTrue(statistics.getChannel2StatusMap().get(Subscriber.Channel.EMAIL)); assertFalse(statistics.getChannel2StatusMap().get(null));
assertEquals("Type must be CHANGE", changeInfo.getType(), ChangeInfo.CHANGE); assertEquals("Wrong line content.", changeInfo.getLines()[0], "Dies ist ein Text."); assertEquals("Wrong line content.", changeInfo.getLines()[1], "Dies ist ein Text.Text2");
assertNotNull("Must return an identity, when only one mapping exists", mappedIdentity);
assertEquals(resultCourse, course); assertNull(duplicateCourse);
assertEquals("createAndSaveSubscription returns wrong subscription", subscription, createdSubscription);
assertEquals("Wrong number of owners, must 0 when value is empty", 0, coOwners.size());
assertTrue(OresHelper.isOfType(oLATResourceable, classInstance)); assertFalse(OresHelper.isOfType(oLATResourceable, ICourse.class));
assertEquals("Wrong lecture list", LECTURE_SOLL, generatedLecturesAsString);
assertEquals("peter bichsel is the email sender with its private mail.", ObjectMother.PETER_BICHSEL_INSTITUTIONAL_EMAIL, peterBichselEmailer.mailfrom);
assertTrue(catalogService.isEntryWithinCategory(toBeCheckedEntry, entriesList));
assertTrue("Contact Message has not one address", noAddresses);
assertNotNull(resourceable); assertNotNull(resourceable.getResourceableTypeName()); assertEquals(resourceable.getResourceableTypeName(), CLASS_NAME_NO_PACKAGE); assertNotNull(resourceable.getResourceableId()); assertEquals(resourceable.getResourceableId(), DEFAULT_KEY);
assertEquals("getSubscription returns wrong subscription", subscription, returnSubscription);
assertTrue("Modified-Event was not triggered, missing fireEventToListenersOf(...)", eventBusMock.firedEvent);
assertFalse("send confirmation should be unsuccessful", isSent); assertEquals(0, successRate, 0); assertEquals(2, getAllSent()); assertEquals(2, getSentFailed());
assertTrue("Expected to find at least an error in the olat.log", errormsg.size() > 0); assertTrue("expected: " + linecount, errormsg.size() == linecount);
assertEquals("Wrong subject", mailObjectMother.subject, simpleMailTO.getSubject()); assertEquals(mailObjectMother.bodyText, simpleMailTO.getBodyText());
assertTrue(isOK);
assertNotNull("Missing TitleAndDescriptionStatistik", titleAndDescriptionStatistik); assertFalse("Title should not be updated", titleAndDescriptionStatistik.isTitleUpdated()); assertFalse("Description should not be updated", titleAndDescriptionStatistik.isDescriptionUpdated());
assertEquals("Wrong number of owners, must be 0 when no identities exist", 0, coOwners.size());
assertNotNull(statistic);
assertEquals("", 0, publishDelegateTestObject.publishEvent(invalidPublishEventTO));
assertNotNull("result could not be null", filteredList); assertEquals("Missing catalog-entry in filtered list, type_leaf and owner must be in list", 1, filteredList.size());
assertEquals("Wrong number of owners, duplicate identity can be added only once", 1, coOwners.size());
assertEquals("", MappingResult.MAPPING_ALREADY_EXIST, result);
assertNotNull("result could not be null", filteredList); assertEquals("Missing catalog-entry in filtered list, type_leaf and owner must be in list", 1, filteredList.size());
assertTrue("Event was not triggered, missing fireEventToListenersOf(...)", eventBusMock.firedEvent);
assertTrue(message == null);
assertEquals("getPublisher returns wrong publisher", publisher, resultPublisher);
assertEquals(typeName, CLASS_NAME_NO_PACKAGE_WITH_SUBTYPE);
assertTrue("Contact Message has at least one address", contactMessage.hasAtLeastOneAddress());
assertTrue(property.hasComment()); assertEquals("a comment", property.getComment());
assertTrue(message != null);
assertTrue("Expected to find at least an error in the olat.log", errormsg.size() == 0);
assertEquals(mockForum, firstMessage.getForum()); assertEquals(initiatorIdentity, firstMessage.getCreator()); assertEquals(null, firstMessage.getParent()); assertEquals(null, firstMessage.getThreadtop());
assertEquals("Type must be MOVE", changeInfo.getType(), ChangeInfo.MOVE); assertEquals("Wrong line content.", changeInfo.getLines()[0], "Text2 Text2.1 Text2.2");
assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameRefAsOne.hashCode()); assertFalse("Wrong hashCode implementation, different objects have same hash-code", one.hashCode() == two.hashCode()); assertTrue("Wrong hashCode implementation, same objects have NOT same hash-code ", one.hashCode() == sameAsOne.hashCode());
assertEquals("getSubscriber return wrong subscriber", subscriber, resultSubscriber);
assertTrue("Wrong hashCode implementation, same users have NOT same hash-code ", leOne.hashCode() == leOne.hashCode()); assertFalse("Wrong hashCode implementation, different users have same hash-code", leOne.hashCode() == leThree.hashCode()); assertTrue("Wrong hashCode implementation, same users have NOT same hash-code ", leOne.hashCode() == sameAsLeOne.hashCode());
assertTrue(days > 0); assertTrue(oneDay == 1);
assertTrue(subscriptionInfoList.isEmpty());
assertEquals("", MappingResult.NEW_MAPPING_BY_MATRIKEL_NR, result);
assertEquals("getSubscription returns wrong subscription", subscription, returnSubscription);
assertFalse("Wrong equals implementation, different types are recognized as equals ", one.equals(new Integer(1))); assertFalse("Wrong equals implementation, different objects are recognized as equals ", one.equals(two)); assertFalse("Wrong equals implementation, null value is recognized as equals ", one.equals(null)); assertTrue("Wrong equals implementation, same objects are NOT recognized as equals ", one.equals(sameRefAsOne)); assertTrue("Wrong equals implementation, same objecst are NOT recognized as equals ", one.equals(sameAsOne));
assertTrue(realForum != null);
assertEquals("Could not extract subContextId from \'" + subidentifier + "\'", Long.valueOf(subidentifier), subContextId);
assertTrue("send confirmation should be successful", isSent); assertEquals(1.0, successRate, 0); assertEquals(1, getAllSent()); assertEquals(0, getSentFailed());
assertEquals("Wrong number of the size", 2, statistics.getChannel2StatusMap().size()); assertFalse(statistics.getChannel2StatusMap().get(Subscriber.Channel.EMAIL)); assertFalse(statistics.getChannel2StatusMap().get(null));
assertNotNull("Could not found NotificationTypeHandler for \'wiki\'", wikiTypeHandler); assertTrue("Wrong type-handler for forum", wikiTypeHandler instanceof WikiNotificationTypeHandler);
assertEquals("Wrong charset when no property exists, should return \'WebappHelper.getDefaultCharset()", charsetValue, WebappHelper.getDefaultCharset());
assertEquals("Testversion 42", propertiesLoader.getProperty(PropertyLocator.BUILD_VERSION.getPropertyName()));
assertEquals(typeName, CLASS_NAME_NO_PACKAGE_WITH_SUBTYPE);
assertTrue(AuthenticatorHelper.verifyPasswordStrength("test2", "aBc_123_X", "test2"));
assertFalse(catalogService.isEntryWithinCategory(toBeCheckedEntry, entriesList));
assertTrue(newPasswordOK);
assertEquals("Wrong charset when charset is supported, should return this value", charsetValue, supportedCharset);
assertNull("Must return null, when more than one mapping exists", mappedIdentity);
assertEquals(12, ((SimpleProbeObject) simpleProbeTOList.get(0)).getTotalSum());
assertEquals(mockForum, firstMessage.getForum()); assertEquals(initiatorIdentity, firstMessage.getCreator()); assertEquals(null, firstMessage.getParent()); assertEquals(null, firstMessage.getThreadtop());
assertEquals("89044050001000680000000000000170", eidData);
assertThat("testFindAll 0", all, notNullValue()); assertTrue("testFindAll 1", all.size() >= 1); assertTrue("testFindAll 2",added);
assertFalse("testRemoveItemAuth 0",isthere);
assertThat("testGetLogo 0",c.getLogo(), nullValue());
assertEquals("Returns the translation of the key if it is defined", expResult, result); assertEquals("Returns the key if it is not defined", expResult, result);
assertNotNull(" null returned", result); assertEquals(" username does not match configuration", result.getUserName(), USERNAME); assertEquals(" password does not match configuration", result.getPassword(), PASSWORD);
assertThat("testGetNamespace 0",ms.getNamespace(),notNullValue()); assertThat("testGetNamespace 1",ms.getNamespace(),not(equalTo("")));
assertThat("testComplete 0", instance.getDBConnection(), notNullValue()); assertThat("testComplete 1", instance.getDBConnection().isSessionAlive(), equalTo(true)); assertThat("testComplete 2", instance.isValid(), equalTo(true)); assertThat("testComplete 3", instance.getDBConnection(), nullValue()); assertThat("testComplete 4", instance.isValid(), equalTo(false));
assertTrue("\'msnbot\' didn\'t match pattern", spiderDetectorService.isSpider(req)); assertFalse("\'msnbot\' matched pattern", spiderDetectorService.isSpider(req)); assertTrue(candidate + " did not match DNS patterns", spiderDetectorService.isSpider(req)); assertFalse(candidate + " matched DNS patterns", spiderDetectorService.isSpider(req));
assertNotNull("Failed to load DSpaceObject by DOI.", dso);
assertEquals(testMessage, expectedResult, simpleDateFormat.parse(toParseDate).equals(result));
assertFalse("testEquals 0",c.equals(null)); assertFalse("testEquals 1",c.equals(communityService.create(null, context))); assertTrue("testEquals 2", c.equals(c));
assertNotNull("Minted DOI is null!", doi); assertFalse("Minted DOI is empty!", doi.isEmpty());
assertThat("testDeleteAdmin 0", b, nullValue());
assertThat("testSetPrimaryBitstreamID 0", b.getPrimaryBitstream(), equalTo(bs));
assertThat("testGetCurrentLocale 0", context.getCurrentLocale(), notNullValue()); assertThat("testGetCurrentLocale 1", context.getCurrentLocale(), equalTo(I18nUtil.DEFAULTLOCALE));
assertThat("testGetValueId 0",mv.getID(), notNullValue());
assertThat("testGetDBConnection 0", connection, notNullValue()); assertThat("testGetDBConnection 1", connection.isSessionAlive(), equalTo(true));
assertTrue(StringUtils.isNotBlank(ex.getMessage())); assertTrue(StringUtils.contains(ex.getMessage(), "Missing table"));
assertFalse("IPv6 full nonmatch succeeds", ip6FullMatcher .match(IP6_FULL_ADDRESS2));
assertThat("testGrantLicense 0",license, equalTo(defaultLicense));
assertThat("testGetName 0",c.getName(), equalTo(""));
assertEquals("deleteGroupEPersonMembers", ePerson.getGroups().size(), 0);
assertEquals("Pdf", urlSplitted[urlSplitted.length - 1]);
assertThat("testSetCurrentLocale 0", context.getCurrentLocale(), notNullValue()); assertThat("testSetCurrentLocale 1", context.getCurrentLocale(), equalTo(newLocale));
assertThat("testDeleteAllAuth 0",found,nullValue());
assertThat("testSetSpecialGroup 0", instance.isValid(), equalTo(false));
assertThat("testSetFormat 0", bs.getFormat(context), notNullValue()); assertThat("testSetFormat 1", bs.getFormat(context), equalTo(bitstreamFormatService.find(context, id)));
assertThat("testSetQualifier 0",mf.getQualifier(), equalTo(qual));
assertEquals(message, expResult, result);
assertTrue(ipMatcher.match("192.2.0.0"));
assertThat("testFindAll 0", all, notNullValue()); assertTrue("testFindAll 1",added);
assertThat("testAddBundleAuth 0", itemService.getBundles(it, name), notNullValue()); assertTrue("testAddBundleAuth 1", itemService.getBundles(it, name).size() == 1); assertThat("testAddBundleAuth 2", itemService.getBundles(it, name).get(0), equalTo(created));
assertThat("testGetAdministrators 0", collection.getAdministrators(), nullValue());
assertFalse(ipMatcher.match("192.1.2.2"));
assertTrue(comparator.compare(dso1, dso2) == 0);
assertTrue(exists); assertFalse(exists);
assertNotNull(prop); assertEquals("DSpace", prop); assertNotNull(array); assertEquals("itemA", array[0]); assertEquals("itemB", array[1]); assertEquals("itemC", array[2]); assertNotNull(number); assertEquals(new Integer(123), number); assertNotNull(bool); assertEquals(Boolean.TRUE, bool); assertTrue(b); assertEquals("XXX", prop);
assertThat("testAbort 0", instance.isValid(), equalTo(false)); assertThat("testAbort 1", found, nullValue());
assertThat("testGetName 0",s.getName(), equalTo(ConfigurationManager.getProperty("dspace.name"))); assertThat("testGetName 1",siteService.getName(s), equalTo(ConfigurationManager.getProperty("dspace.name")));
assertThat("testFindAll 0", found, notNullValue()); assertTrue("testFindAll 1", found.size() >= 1); assertTrue("testFindAll 2",added);
assertThat("testUpdateAuth 0",found.getID(), equalTo(metadataSchema.getID()));
assertTrue(comparator.compare(dso1, dso2) < 0);
assertTrue("testSetMultipleTitles 0", wi.hasMultipleTitles());
assertTrue(comparator.compare(dso1, null) > 0);
assertThat("testGetFormatDescription 0", bs.getFormatDescription(context), notNullValue()); assertThat("testGetFormatDescription 1", bs.getFormatDescription(context), not(equalTo(""))); assertThat("testGetFormatDescription 2", bs.getFormatDescription(context), equalTo(format));
assertThat("testSetPlace 0",mv.getPlace(), equalTo(place));
assertThat("testFindAll 0",found, notNullValue()); assertTrue("testFindAll 1",found.size() >= 1); assertTrue("testFindAll 2",added);
assertThat("testGetItem 0", wi.getItem(), notNullValue());
assertTrue("Cannot store DOI as item metadata value.", result);
assertFalse("testEquals 0", ic.equals(null)); assertFalse("testEquals 1", ic.equals("test one")); assertFalse("testEquals 2", ic.equals(target)); assertFalse("testEquals 3", ic.equals(target)); assertFalse("testEquals 4", ic.equals(target)); assertFalse("testEquals 5", ic.equals(target)); assertTrue("testEquals 6", ic.equals(target));
assertThat("testSetUserFormatDescription 0", bs.getUserFormatDescription() , notNullValue()); assertThat("testSetUserFormatDescription 1", bs.getUserFormatDescription() , not(equalTo(""))); assertThat("testSetUserFormatDescription 2", bs.getUserFormatDescription() , equalTo(userdescription));
assertThat("testGetName 0", bs.getName(), notNullValue()); assertThat("testGetName 1", bs.getName(), not(equalTo(""))); assertThat("testGetName 2", bs.getName(), equalTo(name));
assertEquals("large", urlSplitted[urlSplitted.length - 1]);
assertThat("testGetUserFormatDescription 0", bs.getUserFormatDescription() , nullValue());
assertThat("testFind 0",found, notNullValue()); assertThat("testFind 1",found.getID(), equalTo(id));
assertTrue(ipMatcher.match("192.86.100.75")); assertFalse(ipMatcher.match("192.86.100.71")); assertFalse(ipMatcher.match("192.86.100.80"));
assertTrue(ipMatcher.match("192.1.1.1"));
assertThat("testUpdateAuth 0",found.getID(), equalTo(m.getID()));
assertTrue("testGetLegacyID 0", c.getLegacyId() == null);
assertThat("testGetParentObject 0", itemService.getParentObject(context, it), notNullValue()); assertThat("testGetParentObject 1", itemService.getParentObject(context, it), notNullValue()); assertThat("testGetParentObject 2", (Collection) itemService.getParentObject(context, it), equalTo(parent));
assertThat("testGetLicenseCollection 0", collection.getLicenseCollection(), notNullValue()); assertThat("testGetLicenseCollection 1", collection.getLicenseCollection(), equalTo(""));
assertThat("testCollectionFind 0", found, notNullValue()); assertThat("testCollectionFind 1", found.getID(), equalTo(id)); assertThat("testCollectionFind 2", found.getName(), equalTo(""));
assertNotNull(l); assertEquals(1, l.size()); assertEquals("azeckoski", l.get(0).getName()); assertNotNull(l2); assertEquals(1, l2.size());
assertNotNull(sab); assertNotNull(l); assertEquals(2, l.size()); assertNotNull(e.getMessage());
assertThat("testGetSchemaID 0",ms.getID(), equalTo(metadataSchemaService.find(context, MetadataSchema.DC_SCHEMA).getID()));
assertThat("testGetAdministrators 0",c.getAdministrators(), nullValue());
assertThat("testGetSize 0", bs.getSize(), equalTo(size));
assertThat("testGetAuthority 0",mv.getAuthority(), nullValue());
assertNotNull(sab); assertNotNull(sampleAnnotationBean); assertEquals(sampleAnnotationBean, sab); assertNotNull(e.getMessage());
assertEquals("Should return Constants.EPERSON", expResult, result);
assertThat("testGetLogo 0",collection.getLogo(), nullValue());
assertThat("testIgnoreAuthorization 0", context.ignoreAuthorization(), equalTo(true)); assertThat("testIgnoreAuthorization 1", context.ignoreAuthorization(), equalTo(false));
assertTrue("testGetStageReached 0", wi.getStageReached() == -1);
assertThat("testGetScopeNote 0",mf.getScopeNote(), equalTo(scopeNote));
assertTrue(ipMatcher.match("192.86.100.75")); assertFalse(ipMatcher.match("192.86.100.71")); assertFalse(ipMatcher.match("192.86.100.80"));
assertNotNull(services); assertTrue(services.size() > 3);
assertThat("testSetWorkflowGroup 0",collectionService.getWorkflowGroup(collection, step), notNullValue()); assertThat("testSetWorkflowGroup 1",collectionService.getWorkflowGroup(collection, step), equalTo(g));
assertThat("testRemoveAdministratorsAuth 0",collection.getAdministrators(), notNullValue()); assertThat("testRemoveAdministratorsAuth 1",collection.getAdministrators(), equalTo(result));
assertThat("testGetCollections 0",c.getCollections(), notNullValue()); assertTrue("testGetCollections 1", c.getCollections().size() == 0); assertTrue("testGetCollections 2",c.getCollections().get(0).getName().equals("collection A")); assertTrue("testGetCollections 3",c.getCollections().get(1).getName().equals("collection B")); assertTrue("testGetCollections 4",c.getCollections().get(2).getName().equals("collection C"));
assertTrue("IPv6 full match fails", ip6FullMatcher .match(IP6_FULL_ADDRESS1));
assertEquals("primary", urlSplitted[urlSplitted.length - 1]);
assertTrue("testSetPublishedBefore 0", wi.isPublishedBefore());
assertTrue("testSetMultipleFiles 0", wi.hasMultipleFiles());
assertThat("testGetSubmitter 0", wi.getSubmitter(), notNullValue()); assertThat("testGetSubmitter 1", wi.getSubmitter(), equalTo(context.getCurrentUser()));
assertTrue(groupService.isMember(context, topGroup)); assertTrue(groupService.isMember(context, level1Group)); assertTrue(groupService.isMember(context, level2Group)); assertTrue(groupService.isMember(context, specialGroup));
assertTrue(comparator.compare(null, dso2) < 0);
assertThat("testGetConfidence 0",mv.getConfidence(), equalTo(-1));
assertEquals(123, i); assertEquals(123, i); assertEquals(0, i); assertEquals(345, i);
assertThat("testSetSequenceID 0", bs.getSequenceID(), equalTo(val));
assertEquals(Locale.US.getDisplayCountry(), LocationUtils.getCountryName( "US")); assertEquals(UNKNOWN_COUNTRY, LocationUtils.getCountryName(null)); assertEquals("XX", LocationUtils.getCountryName("XX"));
assertThat("testSetDescription 0", bs.getDescription(), notNullValue()); assertThat("testSetDescription 1", bs.getDescription(), not(equalTo(""))); assertThat("testSetDescription 2", bs.getDescription(), equalTo(description));
assertThat("testGetPlace 0",mv.getPlace(), equalTo(1));
assertNotNull(providers.hashCode()); assertNotNull(providers.toString()); assertEquals(4, providers.size()); assertEquals(4, providers.size()); assertEquals(2, providers.size()); assertEquals(p1, providers.getProvider(0)); assertEquals(p2, providers.getProvider(1)); assertEquals(1, providers.size()); assertEquals(p2, providers.getProvider(0));
assertTrue(groupService.isMember(context, ePerson, topGroup.getName())); assertTrue(groupService.isMember(context, ePerson, level1Group.getName())); assertTrue(groupService.isMember(context, ePerson, level2Group.getName()));
assertTrue(comparator.compare(dso1, dso2) < 0);
assertThat("testGetName 0", bs.getName(), nullValue());
assertThat("testGetName 0",collection.getName(), equalTo(""));
assertThat("testSetScopeNote 0",mf.getScopeNote(), equalTo(scn));
assertThat("testRemoveSubmittersAuth 0", collection.getSubmitters(), nullValue());
assertNotNull(" getSession returned null", session);
assertThat("testGetType 0", collection.getType(), equalTo(Constants.COLLECTION));
assertTrue("testWithdrawAuth 0", it.isWithdrawn());
assertTrue(identifier + " is supported", result);
assertFalse(ipMatcher.match("0:0:0:0:0:0:0:1"));
assertThat("testSetElement 0",mf.getElement(), equalTo(elem));
assertThat("testGetCollections 0", it.getCollections(), notNullValue()); assertTrue("testGetCollections 1", it.getCollections().size() == 3); assertTrue("testGetCollections 2", it.getCollections().get(1).getName().equals("collection A")); assertTrue("testGetCollections 3", it.getCollections().get(2).getName().equals("collection B"));
assertEquals(0, gm.getPDFURL().size());
assertThat("testUnsetPrimaryBitstreamID 0", b.getPrimaryBitstream(), equalTo(null));
assertThat("testCreateSubcommunityAuth 0",c.getSubcommunities(), notNullValue()); assertTrue("testCreateSubcommunityAuth 1", c.getSubcommunities().size() == 1); assertThat("testCreateSubcommunityAuth 2", c.getSubcommunities().get(0), equalTo(result));
assertTrue(currentSize > 0); assertNotNull(l); assertEquals("azeckoski", l.get(0).getName()); assertNotNull(l2); assertTrue(l2.size() >= 1);
assertThat("testGetElement 0",mf.getElement(), equalTo(element));
assertNull(prop); assertTrue(changed); assertNotNull(prop); assertEquals("1111111", prop); assertEquals(1111111, i); assertNull(prop); assertTrue(changed); assertNotNull(prop); assertEquals(Boolean.TRUE, prop); assertEquals(true, b); assertFalse(changed); assertTrue(changed); assertNull(prop); assertNull(prop); assertTrue(changed); assertNotNull(s); assertEquals("Hi There", s);
assertFalse("testHasMultipleFiles 0", wi.hasMultipleFiles());
assertThat("testSetSpecialGroup 0", instance.inSpecialGroup(groupID1), equalTo(true)); assertThat("testSetSpecialGroup 1", instance.inSpecialGroup(groupID2), equalTo(true)); assertThat("testSetSpecialGroup 2", instance.inSpecialGroup(UUID.randomUUID()), equalTo(false));
assertThat("testCreate 0", created, notNullValue()); assertThat("testCreate 1", created.getName(), equalTo(""));
assertNotNull(concrete); assertEquals("azeckoski", concrete.getName()); assertNotNull(sab); assertEquals(null, sab.getSampleValue());
assertNotNull(service); assertEquals("AZ", service);
assertFalse("testGetCollectionsNotLinked 0",isin);
assertThat("testGetTemplateItem 0", collection.getTemplateItem(), nullValue());
assertTrue(ipMatcher.match("0:0:0:1:ffff:ffff:ffff:ffff"));
assertTrue("testGetStoreNumber 0", bs.getStoreNumber() == 0);
assertThat("testSetExtraLogInfo 0", context.getExtraLogInfo(), notNullValue()); assertThat("testSetExtraLogInfo 1", context.getExtraLogInfo(), equalTo(newValue));
assertTrue("testSetPageReached 0", wi.getPageReached() == 4);
assertEquals(LocationUtils.getContinentCode("US"), "NA"); assertTrue(LocationUtils.getContinentCode(null).length() > 2); assertTrue(LocationUtils.getContinentCode("xyz").length() > 2);
assertThat("testGetSchemaID 0",mf.getMetadataSchema().getName(), equalTo(MetadataSchema.DC_SCHEMA));
assertThat("testGetURL 0",s.getURL(), equalTo(ConfigurationManager.getProperty("dspace.url")));
assertThat("testSetSource 0", bs.getSource(), notNullValue()); assertThat("testSetSource 1", bs.getSource(), not(equalTo(""))); assertThat("testSetSource 2", bs.getSource(), equalTo(source));
assertThat("testGetChecksum 0", bs.getChecksum(), notNullValue()); assertThat("testGetChecksum 1", bs.getChecksum(), not(equalTo(""))); assertThat("testGetChecksum 2", bs.getChecksum(), equalTo(checksum));
assertTrue(ipMatcher.match("::2"));
assertNotNull("Failed to loookup doi.", retrievedDOI); assertTrue("Loaded wrong DOI on lookup.", doi.equals(retrievedDOI));
assertThat("testItemFind 0", found, notNullValue()); assertThat("testItemFind 1", found.getID(), equalTo(id)); assertThat("testItemFind 2", found.getName(), nullValue());
assertTrue("testSetStageReached 0", wi.getStageReached() == 4);
assertThat("testCreate 0", created, notNullValue()); assertThat("testCreate 1", created.getName(), equalTo("")); assertThat("testCreate 2", son, notNullValue()); assertThat("testCreate 3", son.getName(), equalTo("")); assertTrue("testCreate 4", communityService.getAllParents(context, son).size() == 1); assertThat("testCreate 5", communityService.getAllParents(context, son).get(0), equalTo(created));
assertTrue(groupService.isMember(context, ePerson2, topGroup)); assertTrue(groupService.isMember(context, ePerson2, level1Group)); assertFalse(groupService.isMember(context, ePerson2, level2Group)); assertFalse(groupService.isMember(context, ePerson2, specialGroup)); assertTrue(groupService.isMember(context, ePerson1, level2Group)); assertTrue(groupService.isMember(context, ePerson1, specialGroup));
assertNotNull(service); assertEquals("AZ", service); assertNotNull(e.getMessage());
assertTrue(comparator.compare(dso1, dso2) > 0);
assertNotNull(names); assertTrue(names.size() >= 3);
assertTrue("DOI is supported", result);
assertEquals("testGetParentCommunity 0", c.getParentCommunities().size(), 0); assertThat("testGetParentCommunity 1",son.getParentCommunities().size(), not(0)); assertThat("testGetParentCommunity 2", son.getParentCommunities().get(0), equalTo(c));
assertFalse(ipMatcher.match("172.15.255.255"));
assertTrue(comparator.compare(null, null) == 0);
assertThat("testGetSpecialGroup 0", specialGroups.size(), equalTo(2)); assertThat("testGetSpecialGroup 1", specialGroups.get(0), equalTo(group)); assertThat("testGetSpecialGroup 1", specialGroups.get(1), equalTo(adminGroup));
assertTrue(ipMatcher.match("1.1.1.1"));
assertThat("testFindAll 0",found, notNullValue()); assertTrue("testFindAll 1",found.size() >= 1); assertTrue("testFindAll 2",added);
assertTrue("testGetLegacyID 0", bs.getLegacyId() == null);
assertNotNull(concrete); assertEquals("azeckoski", concrete.getName()); assertNotNull(sab); assertEquals(null, sab.getSampleValue());
assertThat("testSetLicense 0", collectionService.getLicense(collection), notNullValue()); assertThat("testSetLicense 1", collectionService.getLicense(collection), equalTo(license)); assertThat("testSetLicense 2", collection.getLicenseCollection(), notNullValue()); assertThat("testSetLicense 3", collection.getLicenseCollection(), equalTo(license));
assertThat("testSetAuthority 0",mv.getAuthority(), equalTo(value));
assertNotNull(array); assertEquals(3, array.length); assertEquals("itemA", array[0]); assertEquals("itemB", array[1]); assertEquals("itemC", array[2]); assertEquals(3, array.length); assertEquals(0, array.length); assertEquals(1, array.length); assertEquals("Hey", array[0]); assertEquals(1, array.length); assertEquals("A,B,C", array[0]);
assertNotNull(service); assertEquals("AZ", service); assertNotNull(e.getMessage());
assertThat("testRemoveAdministratorsAuth 0",collection.getAdministrators(), notNullValue()); assertThat("testRemoveAdministratorsAuth 1",collection.getAdministrators(), equalTo(result)); assertThat("testRemoveAdministratorsAuth 2", collection.getAdministrators(), nullValue());
assertThat("testCreateAuth 0",found.getID(), equalTo(m.getID()));
assertFalse("testHasMultipleTitles 0", wi.hasMultipleTitles());
assertTrue(ipMatcher.match("192.1.2.3"));
assertThat("findByName 1", group, notNullValue()); assertThat("findByName 2", group.getName(), notNullValue()); assertEquals("findByName 2", group.getName(), "topGroup");
assertEquals("size9", urlSplitted[urlSplitted.length - 1]);
assertFalse(ipMatcher.match("0:0:0:2::"));
assertNotNull(service); assertEquals("AZ", service);
assertThat("testSetName 0",ms.getName(),notNullValue()); assertThat("testSetName 1",ms.getName(),not(equalTo(""))); assertThat("testSetName 2",ms.getName(),equalTo(name));
assertThat("testRemoveAdministratorsAuth 0",c.getAdministrators(), notNullValue()); assertThat("testRemoveAdministratorsAuth 1",c.getAdministrators(), equalTo(result)); assertThat("testRemoveAdministratorsAuth 2",c.getAdministrators(), nullValue());
assertThat("testSetConfidence 0",mv.getConfidence(), equalTo(value));
assertEquals(true, configurationService.hasProperty("sample.array")); assertEquals(true, configurationService.hasProperty("sample.number")); assertEquals(false, configurationService.hasProperty("XXXXX")); assertEquals(false, configurationService.hasProperty("samplearray"));
assertFalse("testReplaceAllBitstreamPolicies 0",retrieved.isEmpty()); assertTrue("testReplaceAllBitstreamPolicies 1", equals);
assertThat("testSetWorkflowGroup 0",collectionService.getWorkflowGroup(collection, step), notNullValue()); assertThat("testSetWorkflowGroup 1",collectionService.getWorkflowGroup(collection, step), equalTo(g2));
assertThat("testSetCurrentUser 0", context.getCurrentUser(), notNullValue()); assertThat("testSetCurrentUser 1", context.getCurrentUser(), equalTo(newUser));
assertFalse("testEquals 0",collection.equals(null)); assertFalse("testEquals 1",collection.equals(collectionService.create(context, owningCommunity))); assertTrue("testEquals 2", collection.equals(collection));
assertNotNull("Minted DOI is null?!", retrievedDOI); assertEquals("Mint did not returned an existing DOI!", doi, retrievedDOI);
assertEquals("North America", LocationUtils.getContinentName( "NA", Locale.ENGLISH));
assertNotNull(prop); assertEquals("DSpace", prop); assertNull(prop);
assertThat("testCreateAdministratorsAuth 0",c.getAdministrators(), notNullValue()); assertThat("testCreateAdministratorsAuth 1",c.getAdministrators(), equalTo(result));
assertFalse("testIsDeleted 0", delBS.isDeleted()); assertTrue("testDelete 0", delBS.isDeleted()); assertThat("testExpunge 0", bitstreamService.find(context, bitstreamId), nullValue());
assertThat("testGetExtraLogInfo 0", context.getExtraLogInfo(), notNullValue()); assertThat("testGetExtraLogInfo 1", context.getExtraLogInfo(), equalTo(defaultValue));
assertThat("testGetName 0",ms.getName(),notNullValue()); assertThat("testGetName 1",ms.getName(),not(equalTo("")));
assertTrue(ipMatcher.match("::1"));
assertNotNull("Failed to load DOI by DSpaceObject.", retrievedDOI); assertTrue("Loaded wrong DOI by DSpaceObject.", doi.equals(retrievedDOI));
assertThat("testRemoveDSpaceLicenseAuth 0", itemService.getBundles(it, name), notNullValue()); assertTrue("testRemoveDSpaceLicenseAuth 1", itemService.getBundles(it, name).size() == 0);
assertThat("testCreate 2", sub, notNullValue()); assertThat("testCreate 3", sub.getName(), equalTo("")); assertTrue("testCreate 4", communityService.getAllParents(context, sub).size() == 1); assertThat("testCreate 5", communityService.getAllParents(context, sub).get(0), equalTo(c));
assertThat("testCreate 0", created, notNullValue()); assertThat("testCreate 1", created.getName(), nullValue());
assertNotNull("Failed to resolve DOI.", dso);
assertEquals(size, dscs.getProperties().size()); assertEquals(size + 2, dscs.getProperties().size()); assertEquals("World", dscs.getProperty("Hello")); assertEquals("There", dscs.getProperty("Hello")); assertEquals("There", dscs.getProperty("Hello")); assertNull(dscs.getProperty("Hello"));
assertTrue("testGetCommunities 0",collection.getCommunities().size() == 4); assertTrue("testGetCommunities 1",collection.getCommunities().get(1).getName().equals("community 1")); assertTrue("testGetCommunities 1",collection.getCommunities().get(2).getName().equals("community 2")); assertTrue("testGetCommunities 1",collection.getCommunities().get(3).getName().equals("community 3"));
assertThat("testFind 0",found, notNullValue()); assertThat("testFind 1",found.getID(), equalTo(mf.getID()));
assertThat("testGetName 0", b.getName(), equalTo("TESTBUNDLE"));
assertTrue("IPv6 masked match fails", ip6MaskedMatcher .match(IP6_FULL_ADDRESS2));
assertTrue(ipMatcher.match("0:0:0:0:0:0:0:2"));
assertThat("findAllNameSort 1", groups, notNullValue()); assertEquals("findAllNameSort compareLists", sortedNames, names);
assertThat("testGetSequenceID 0", bs.getSequenceID(), equalTo(-1));
assertThat("testFindAllTop 0", all, notNullValue()); assertTrue("testFindAllTop 1", all.size() >= 1); assertThat("testFindAllTop for", communityService.getAllParents(context, cm).size(), equalTo(0)); assertTrue("testFindAllTop 2",added);
assertThat("testRemoveTemplateItemAuth 0",collection.getTemplateItem(), nullValue());
assertFalse("testCanEditBooleanNoAuth 0", itemService.canEdit(context, it));
assertTrue("Old unsalted 1-trip MD5 hash", result);
assertEquals(0, configurationService.getProperties().size());
assertThat("testGetName 0",it.getName(),nullValue());
assertTrue("testCanEditBooleanAuth3 0", itemService.canEdit(context, it));
assertFalse("testEquals 0", it.equals(null)); assertFalse("testEquals 1",it.equals(item)); assertTrue("testEquals 2", it.equals(it));
assertThat("testFindByMetadataField 0",result,notNullValue()); assertFalse("testFindByMetadataField 1",result.hasNext()); assertThat("testFindByMetadataField 3",result,notNullValue()); assertTrue("testFindByMetadataField 4",result.hasNext()); assertTrue("testFindByMetadataField 5",result.next().equals(it));
assertTrue("testInheritCollectionDefaultPolicies 0", defaultCollectionPolicies.size() == bspolicies.size()); assertTrue("testInheritCollectionDefaultPolicies 1", equals); assertTrue("testInheritCollectionDefaultPolicies 2", exists);
assertThat("testGetValue 0",mv.getValue(), nullValue());
assertEquals(newPrefix + "/" + SUFFIX_1, itemService.find(context, item1.getID()).getHandle()); assertEquals(newPrefix + "/" + SUFFIX_2, itemService.find(context, item2.getID()).getHandle()); assertEquals(newPrefix + "/" + SUFFIX_3, itemService.find(context, item3.getID()).getHandle()); assertEquals("hdl:custom-prefix/" + SUFFIX_4, itemService.find(context, item4.getID()).getHandle());
assertTrue("testGetLegacyID 0", b.getLegacyId() == null);
assertTrue(comparator.compare(dso1, dso2) < 0);
assertEquals("North America", LocationUtils.getContinentName("NA")); assertEquals(UNKNOWN_CONTINENT, LocationUtils.getContinentName(null)); assertEquals(UNKNOWN_CONTINENT, LocationUtils.getContinentName("XXXX"));
assertThat("testGetCurrentUser 0", context.getCurrentUser(), notNullValue()); assertThat("testGetCurrentUser 1", context.getCurrentUser(), equalTo(eperson));
assertThat("testRemoveAdministratorsAuth 0",c.getAdministrators(), notNullValue()); assertThat("testRemoveAdministratorsAuth 1",c.getAdministrators(), equalTo(result));
assertTrue("testGetLegacyID 0", collection.getLegacyId() == null);
assertTrue(ipMatcher.match("172.16.1.1"));
assertFalse("testIsPublishedBefore 0", wi.isPublishedBefore());
assertFalse("Cannot remove DOI from item metadata.", foundDOI);
assertThat("testGetSubmitters 0", collection.getSubmitters(), nullValue());
assertEquals("United States", LocationUtils.getCountryName( "US", Locale.ENGLISH));
assertThat("testIsReadOnly 0", context.isReadOnly(), equalTo(false)); assertThat("testIsReadOnly 1", instance.isReadOnly(), equalTo(true));
assertThat("testSetName 0", b.getName(), notNullValue()); assertThat("testSetName 1", b.getName(), not(equalTo(""))); assertThat("testSetName 2", b.getName(), equalTo(name));
assertThat("testGetType 0", c.getType(), equalTo(Constants.COMMUNITY));
assertThat("testGetDescription 0", bs.getDescription(), nullValue());
assertEquals(true, b); assertEquals(true, b); assertEquals(false, b); assertEquals(true, b);
assertThat("testCommunityFind 0", found, notNullValue()); assertThat("testCommunityFind 1", found.getID(), equalTo(id)); assertThat("testCommunityFind 2", found.getName(), equalTo(""));
assertNotNull( configurationService.getConfiguration() ); assertEquals(numPropsLoaded, configurationService.getProperties().size() );
assertEquals("first", urlSplitted[urlSplitted.length - 1]);
assertThat("testGetBitstreams 0", b.getBitstreams(), notNullValue()); assertThat("testGetBitstreams 1", b.getBitstreams().size(), equalTo(0)); assertThat("testGetBitstreams 2", b.getBitstreams(), notNullValue()); assertThat("testGetBitstreams 3", b.getBitstreams().size(), equalTo(1)); assertThat("testGetBitstreams 4", b.getBitstreams().get(0).getName(), equalTo(name));
assertTrue("testGetID 0", wi.getID() >= 0);
assertThat("testCreateCollectionAuth 0", result, notNullValue()); assertThat("testCreateCollectionAuth 1", c.getCollections(), notNullValue()); assertThat("testCreateCollectionAuth 2", c.getCollections().get(0), equalTo(result));
assertFalse(ipMatcher.match("1.1.1.0"));
assertThat("testGetType 0", bs.getType(), equalTo(Constants.BITSTREAM));
assertTrue(candidate + " did not match IP patterns", spiderDetectorService.isSpider(candidate, null, null, null)); assertFalse(candidate + " matched IP patterns", spiderDetectorService.isSpider(candidate, null, null, null));
assertThat("testGetChecksumAlgorithm 0", bs.getChecksumAlgorithm(), notNullValue()); assertThat("testGetChecksumAlgorithm 1", bs.getChecksumAlgorithm(), not(equalTo(""))); assertThat("testGetChecksumAlgorithm 2", bs.getChecksumAlgorithm(), equalTo(alg));
assertTrue("\'msnbot\' didn\'t match pattern", spiderDetectorService.isSpider(req)); assertTrue("\'msnbot\' didn\'t match pattern", spiderDetectorService.isSpider(req)); assertTrue(candidate + " did not match DNS patterns", spiderDetectorService.isSpider(req)); assertTrue(candidate + " didn\'t match DNS patterns", spiderDetectorService.isSpider(req));
assertThat("testGetCollection 0", wi.getCollection(), notNullValue());
assertThat("testFindAllInSchema 0",found, notNullValue()); assertTrue("testFindAllInSchema 1",found.size() >= 1); assertTrue("testFindAllInSchema 2",found.size() <= metadataFieldService.findAll(context).size()); assertTrue("testFindAllInSchema 3",added);
assertTrue(groupService.isMember(context, topGroup)); assertTrue(groupService.isMember(context, level1Group)); assertFalse(groupService.isMember(context, level2Group)); assertTrue(groupService.isMember(context, specialGroup));
assertThat("testGetBundles 0", bs.getBundles(), notNullValue()); assertTrue("testGetBundles 1", bs.getBundles().size() == 0);
assertTrue("testAddItemAuth 0",added);
assertThat("testFindByEPerson 0",found,notNullValue()); assertTrue("testFindByEPerson 1",found.size() >= 1); assertTrue("testFindByEPerson 2",exists);
assertTrue("testGetFieldID 0",mf.getID() >= 0);
assertTrue("testGetPageReached 0", wi.getPageReached() == -1);
assertTrue(comparator.compare(dso1, dso2) < 0);
assertThat("testGetQualifier 0",mf.getQualifier(), equalTo(qualifier));
assertThat("testSetNamespace 0",ms.getNamespace(),notNullValue()); assertThat("testSetNamespace 1",ms.getNamespace(),not(equalTo(""))); assertThat("testSetNamespace 2",ms.getNamespace(),equalTo(namespace));
assertThat("testFindAll 0", all, notNullValue()); assertTrue("testFindAll 1", all.size() >= 1); assertTrue("testFindAll 2",added);
assertThat("testRemoveLicensesAuth 0", itemService.getBundles(it, name), notNullValue()); assertTrue("testRemoveLicensesAuth 1", itemService.getBundles(it, name).size() == 0);
assertNotNull(props); assertEquals(numPropsLoaded, props.size()); assertNotNull(props.get("service.name")); assertEquals("DSpace", props.get("service.name"));
assertThat("testGetSource 0", bs.getSource(), nullValue());
assertThat("testSetValue 0",mv.getValue(), equalTo(value));
assertTrue("\'msnbot\' didn\'t match pattern", spiderDetectorService.isSpider(req)); assertFalse("\'msnbot\' matched pattern", spiderDetectorService.isSpider(req)); assertTrue(candidate + " did not match DNS patterns", spiderDetectorService.isSpider(req)); assertFalse(candidate + " matched DNS patterns", spiderDetectorService.isSpider(req));
assertEquals("small", urlSplitted[urlSplitted.length - 1]);
assertNotNull(names); assertTrue(names.size() >= 3);
assertEquals(3000000000L, l); assertEquals(3000000000L, l); assertEquals(0, l); assertEquals(3000000001L, l);
assertThat("testGetFormat 0", bs.getFormat(context), notNullValue()); assertThat("testGetFormat 1", bs.getFormat(context), equalTo(bitstreamFormatService.findUnknown(context)));
assertFalse("testReinstate 0",it.isWithdrawn());
assertThat("testCreateTemplateItemAuth 0",collection.getTemplateItem(), notNullValue());
assertTrue("Failed to recognize DOI in item metadata.", doi.equals(provider.getDOIOutOfObject(item)));
assertThat("testFindBySubmitter 0", all, notNullValue()); assertTrue("testFindBySubmitter 1",added); assertThat("testFindBySubmitter 2", all, notNullValue()); assertFalse("testFindBySubmitter 3", all.hasNext());
assertTrue(ipMatcher.match("::2"));
assertTrue(exists); assertTrue(exists); assertTrue(exists); assertFalse(exists);
assertEquals(6.0, crossTableCom.data[rowTags.indexOf("f0")][colTags.indexOf("f2")], 10e-4);
assertEquals( HasPredMethod.PredMethod.valueOf(type.trim().toUpperCase()), HasPredMethod.PredMethod.AVG);
assertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), null, new SparseVector(11, new int[]{0, 10}, new double[]{1.0, 4.0}))).getField(1), null); assertEquals(mapper.getOutputSchema(), outSchema);
assertEquals(mapper.map(Row.of("a b c d a a ")).getField(0), new SparseVector(20, new int[] {7, 13, 14, 15}, new double[] {0.0, 0.06757751801802739, -0.25541281188299536, -0.047947012075296815})); assertEquals(mapper.getOutputSchema(), new TableSchema(new String[] {"sentence"}, new TypeInformation[] {VectorTypes.SPARSE_VECTOR}));
assertEquals(mapper.map(Row.of("a b c d a a ")).getField(0), new SparseVector(20, new int[] {7, 13, 14, 15}, new double[] {0.16666666666666666, 0.16666666666666666, 0.5, 0.16666666666666666}));
assertEquals(3, rowTags.size()); assertTrue(rowTags.contains("f0")); assertTrue(rowTags.contains("f1")); assertTrue(rowTags.contains("f2")); assertEquals(3.0, crossTable.data[rowTags.indexOf("f0")][colTags.indexOf("f2")], 10e-4);
assertEquals(mapper.map(Row.of("a b c d a a ")).getField(0), new SparseVector(20, new int[] {7, 13, 14, 15}, new double[] {1.0, 1.0, 1.0, 1.0}));
assertEquals(mapper.map(Row.of(1.1, true, "2", "A")).getField(4), new SparseVector(10, new int[]{0, 5, 9}, new double[]{1.0, 2.0, 1.0})); assertEquals(mapper.map(Row.of(2.1, true, "1", "B")).getField(4), new SparseVector(10, new int[]{1, 5, 6}, new double[]{2.0, 1.0, 1.0}));
assertEquals(mapper.map(Row.of("1.0, 1.0, 0.0, 1.0")).getField(1), 1); assertEquals(mapper.getOutputSchema(), new TableSchema(new String[] {"vec", "pred"}, new TypeInformation<?>[] {Types.STRING, Types.INT}));
assertEquals(mapper.map(Row.of("a b c d a a ")).getField(0), new SparseVector(20, new int[] {7, 13, 14, 15}, new double[] {0.0, 0.4054651081081644, -0.5108256237659907, -0.2876820724517809}));
assertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), "1", new SparseVector(11, new int[]{0, 10}, new double[]{1.0, 4.0}))).getField(1), new SparseVector(14, new int[]{0, 1, 2, 3, 13}, new double[]{3.0, 4.0, 1.0, 1.0, 4.0})); assertEquals(mapper.getOutputSchema(), outSchema);
assertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), 3.0, new SparseVector(3, new int[]{0, 2}, new double[]{1.0, 4.0}))).getField(3), new DenseVector(new double[]{3.0, 4.0, 3.0, 1.0, 0.0, 4.0})); assertEquals(mapper.getOutputSchema(), outSchema);
assertEquals(mapper.map(Row.of("a b c d a a ")).getField(0), new SparseVector(20, new int[] {7, 13, 14, 15}, new double[] {1.0, 1.0, 3.0, 1.0}));
assertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), 3.0, new SparseVector(11, new int[]{0, 10}, new double[]{1.0, 4.0}))).getField(1), new SparseVector(14, new int[]{0, 1, 2, 3, 13}, new double[]{3.0, 4.0, 3.0, 1.0, 4.0})); assertEquals(mapper.getOutputSchema(), outSchema);
assertEquals(mapper.map(Row.of("1.0, 1.0, 0.0, 1.0")).getField(0), 1); assertEquals(mapper.getOutputSchema(), new TableSchema(new String[] {"pred"}, new TypeInformation<?>[] {Types.INT}));
assertEquals( "SELECT `c0`,`c2`, func(`c0`,`c1`) as `c1` FROM input", clause);
assertEquals(res1, 70); assertEquals(res2, 2211);
assertEquals(mapper.map(Row.of("This is a unit test for filtering stopWords")).getField(0), "This unit test filtering stopWords"); assertEquals(mapper.map(Row.of("Filter stopWords test")).getField(0), "Filter stopWords test"); assertEquals(mapper.getOutputSchema(), schema);
assertTrue(result.containsKey(UTF_KEY)); assertTrue(result.getProperty(UTF_KEY).equals(UTF_VALUE));
assertEquals("foobar", cfg.someValue());
assertNotNull(uri);
assertTrue(available);
assertEquals("foobar", cfg.someValue());
assertEquals("foobar", cfg.someValue());
assertEquals("SGVsbG8gV29ybGQh", result);
assertEquals("The\\\\quick\\\\brown\\\\fox\\\\jumped\\\\over\\\\the\\\\lazy\\\\dog.", resolvedString);
assertEquals("\\\\baz\\\\\\\\foo\\\\The qui\\\\ck\\\\bro\\\\wn\\\\fo\\\\x jum\\\\ped over the la\\\\zy\\\\do\\\\g.\\\\bar\\\\\\\\qux\\\\", resolvedString);
assertEquals("Hello World!", new String(result));
assertEquals("The quick brown fox jumped over the lazy dog.", resolvedString);
assertEquals(RESOURCES_DIR, ConfigFactory.getProperty("mypath"));
assertNotNull(uri);
assertEquals("The quick brown fox jumped over the lazy dog.", resolvedString);
assertTrue(Arrays.equals(new Integer[] {1, 2, 3, 4, 5}, i)); assertTrue(Arrays.equals(new Integer[] {5, 4, 3, 2, 1}, result));
assertTrue(unmodifiable.entrySet().containsAll(props.entrySet()));
assertFalse(available);
assertEquals("foo1", sub.replace("foo%d", 1)); assertEquals("baz", sub.replace("baz")); assertEquals("foo.1.sfx", sub.replace("foo.%d.%s", 1, "sfx"));
assertEquals(expected, result);
assertNull(substitutor.replace(null));
assertEquals("this code should never be reached", err.getMessage());
assertNull(result);
assertThat(dataItemCaptor.getValue()).isEqualTo(FIRST_ITEM); assertThat(positionCaptor.getValue()).isEqualTo(position);
assertThat(dynamicRecyclerViewAdapter.getItemViewType(0)).isEqualTo(DynamicRecyclerViewAdapter.TITLE_TYPE); assertThat(dynamicRecyclerViewAdapter.getItemViewType(1)).isEqualTo(DynamicRecyclerViewAdapter.ITEM_TYPE); assertThat(dynamicRecyclerViewAdapter.getItemViewType(2)).isEqualTo(DynamicRecyclerViewAdapter.TITLE_TYPE); assertThat(dynamicRecyclerViewAdapter.getItemViewType(3)).isEqualTo(DynamicRecyclerViewAdapter.ITEM_TYPE);
assertThat(dataItemCaptor.getValue()).isEqualTo(SECOND_ITEM); assertThat(positionCaptor.getValue()).isEqualTo(position);
assertThat(dynamicRecyclerViewAdapter.getItemCount()).isEqualTo(4);
assertThat(expected1).hasValue(10); assertThat(expected2).hasValue(10);
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client.messages.get(0).getJMSReplyTo()) .isInstanceOf(Topic.class);
assertThat(expected1).hasValueBetween(4, 6); assertThat(expected2).hasValueBetween(4, 6);
assertThat(bean).isNotNull();
assertThat(message.getHeader("X-key")).contains("value"); assertThat(message.getHeaders("X-key")).containsExactly("value"); assertThat(message.getAddress()).isEqualTo(topic); assertThat(message.unwrap()).isNotNull(); assertThat(message.getReplyAddress()).isEmpty();
assertEquals(String.format("? super %s", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded)); assertEquals(String.format("? super %s", java.sql.Date.class.getName()), lowerBounded.toString()); assertEquals(String.format("? super %s", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable)); assertEquals(String.format("? super %s", iterableT0.getName()), lowerTypeVariable.toString());
assertThat(messages.stream() .map(EventBusMessage::getPayload) .collect(Collectors.toList())) .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
assertThat(last.get().body()).isEqualTo(9);
assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));
assertEquals(getClass().getName() + ":B", TypeUtils.toLongString(getClass().getTypeParameters()[0]));
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client.messages.get(0).getJMSReplyTo()) .isInstanceOf(Queue.class);
assertThat(messages.stream() .map(Message::getPayload) .map(x -> (byte[]) x) .collect(Collectors.toList())) .contains(large);
assertThat(check.call().getState()).isEqualTo(HealthCheckResponse.State.UP); assertThat(check.call().getData()).isEmpty();
assertThat(messages1.stream().map(EventBusMessage::getPayload) .collect(Collectors.toList())) .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9); assertThat(messages2.stream().map(EventBusMessage::getPayload) .collect(Collectors.toList())) .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
assertThat(latch.await(1, TimeUnit.MINUTES)).isTrue(); assertThat(expected).hasValue(10);
assertThat(latch.await(1, TimeUnit.MINUTES)).isTrue(); assertThat(expected).hasValue(10);
assertThat(list.stream().map(r -> (Integer) r.getPayload()).collect(Collectors.toList())) .containsAll(IntStream.of(49).boxed().collect(Collectors.toList()));
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello");
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client.messages.get(0).getJMSMessageID()).isNull(); assertThat(client.messages.get(0).getJMSTimestamp()).isEqualTo(0L);
assertThat(persons.size()).isEqualTo(10);
assertThat(expected).hasValue(10);
assertThat(expected).hasValue(10);
assertTrue(TypeUtils.isAssignable(fromType, failingToType));
assertThat(bean).isNotNull();
assertThat(latch.await(1, TimeUnit.MINUTES)).isTrue(); assertThat(expected).hasValue(10);
assertEquals("T extends java.lang.Enum<T>", TypeUtils.toString(method.getGenericReturnType()));
assertThat(messages.stream() .map(Message::getPayload) .map(x -> (byte[]) x) .map(bytes -> Integer.valueOf(new String(bytes))) .collect(Collectors.toList())) .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
assertThat(acked).isTrue(); assertThat(client1.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client2.messages.get(0).getBody(String.class)).isEqualTo("hello");
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client.messages.get(0).getJMSPriority()).isEqualTo(5); assertThat(client.messages.get(0).getJMSCorrelationID()).isEqualTo("my-correlation");
assertThat(acked).isTrue(); assertThat(client.messages.get(0).getBody(String.class)).isEqualTo("hello"); assertThat(client.messages.get(0).getJMSMessageID()).isNotNull(); assertThat(client.messages.get(0).getJMSTimestamp()).isPositive();
assertThat(check.call().getState()).isEqualTo(HealthCheckResponse.State.UP); assertThat(check.call().getData()).isEmpty();
assertFalse(TypeUtils.equals(wildcardType, nonWildcardType)); assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));
assertThat(list1.stream().map(r -> (Integer) r.getPayload()).collect(Collectors.toList())) .containsAll(IntStream.of(49).boxed().collect(Collectors.toList())); assertThat(list2.stream().map(r -> (Integer) r.getPayload()).collect(Collectors.toList())) .containsAll(IntStream.of(49).boxed().collect(Collectors.toList()));
assertThat(acked).isTrue(); assertThat(message.getBody(String.class)).isEqualTo("hello"); assertThat(message.getJMSCorrelationID()).isEqualTo("my-correlation-id"); assertThat(message.getJMSReplyTo()).isEqualTo(rt); assertThat(message.getJMSDeliveryMode()).isEqualTo(2); assertThat(message.getJMSType()).isEqualTo(String.class.getName());
assertThat(messages).isNotEmpty();
assertThat(messages.stream() .map(Message::getPayload) .map(x -> (byte[]) x) .map(bytes -> Integer.valueOf(new String(bytes))) .collect(Collectors.toList())) .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
assertTrue(splitMap.contains(1)); assertTrue(splitMap.contains(11)); assertTrue(splitMap.contains(1 << 16 | 1));
assertTrue(result.contains(1)); assertTrue(result.contains(2)); assertTrue(result.contains(1 << 16 | 1)); assertTrue(result.contains(1 << 16 | 2)); assertTrue(result.contains(1 << 17 | 1)); assertTrue(result.contains(1 << 17 | 2));
assertTrue(splitMap.contains(1)); assertTrue(splitMap.contains(11)); assertTrue(splitMap.contains(1 << 16 | 1));
assertEquals(2, all.size()); assertTrue(all.contains("foo")); assertTrue(all.contains("bar"));
assertEquals(writer.toSplitMap().getCardinality(), 4);
assertEquals("default", slice.get("foo"));
assertNull(index.get((short) 0));
assertTrue(result.contains(0)); assertTrue(result.contains(1 << 16));
assertNotNull(response); assertNotNull(response.getItems()); assertTrue(response.getItems().size() == 1); assertNotNull(response.getItems().get(0).getItem()); assertTrue(response.getItems().get(0).getItem().size() == 1); assertEquals(asin, item.getASIN()); assertNotNull(item.getItemAttributes());
assertNotNull(response); assertNotNull(response.getItems()); assertTrue(response.getItems().size() > 0);
assertNotNull(res); assertNotNull(response); assertNotNull(response.getItems()); assertTrue(response.getItems().size() > 0);
assertNotNull(response); assertNotNull(response.getItems()); assertTrue(response.getItems().size() == 1); assertNotNull(response.getItems().get(0).getItem()); assertTrue(response.getItems().get(0).getItem().size() == 1); assertEquals(asin, item.getASIN()); assertNotNull(item.getItemAttributes());
assertNotNull(response); assertNotNull(response.getItems()); assertTrue(response.getItems().size() == 1); assertNotNull(response.getItems().get(0).getItem()); assertTrue(response.getItems().get(0).getItem().size() == 1); assertEquals(r.expectedId, item.getASIN()); assertNotNull(item.getItemAttributes());
assertEquals(Integer.parseInt(excepted.get(i).trim()), value);
assertEquals(SessionLoginHelper.LoginStatus.SUCCESS, helper.getStatus());
assertArrayEquals(new byte[]{0, 0, 0, 19, 0, 16, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 115, 115, 115}, buffer);
assertEquals(excepted.get(i).trim(), str.trim());
assertEquals(12, creditCardInstallment.getTermByPosition(2));
assertFalse(creditCardInstallment.isInstallmentAvailable());
assertEquals(customerDetails.getAddress(), exampleText);
assertEquals(creditCardInstallment.getInstallment(), installmentMock);
assertEquals(creditCardInstallment.getTermSelected(), 6);
assertEquals(customerDetails.getName(), exampleText);
assertEquals(customerDetails.getEmail(), exampleText);
assertEquals(creditCardInstallment.getInstallment(), installmentMock);
assertFalse(cardTransaction.isInWhiteList(BIN_INVALID));
assertEquals(itemDetails.getQuantity(), exampleNumber);
assertEquals(itemDetails.getName(), exampleText);
assertEquals(6, term);
assertEquals(customerDetails.getPhone(), exampleText);
assertTrue(cardTransaction.isInWhiteList(BIN_VALID));
assertEquals(Double.valueOf(itemDetails.getPrice()), Double.valueOf(itemDetails.getPrice()));
assertThat(result, is("are".getBytes()));
assertThat((int) IOUtils.write(is, os), equalTo(TEXT.length()));
assertThat(ConfigUtils.isDefault("true"), is(true)); assertThat(ConfigUtils.isDefault("TRUE"), is(true)); assertThat(ConfigUtils.isDefault("default"), is(true)); assertThat(ConfigUtils.isDefault("DEFAULT"), is(true));
assertEquals(asList("aaa"), merged);
assertEquals(2, cache.cache.size()); assertTrue(config.isDestroyMethodRun()); assertTrue(configCopy.isDestroyMethodRun()); assertEquals(0, cache.cache.size());
assertThat(stream.markSupported(), is(true)); assertThat(stream.position(), is(2)); assertThat(stream.position(), is(1));
assertEquals("Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
assertThat(expected.getMessage(), containsString( "Not unique method for method name("));
assertThat(lookup.size(), is(0)); assertThat(lookup.size(), is(1));
assertThat(fstSerialization.getContentTypeId(), is((byte) 9));
assertEquals("Used the com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService as default.\\r\\nYou can cancel default service by command: cd /", result);
assertThat(result, is(1));
assertThat(result, is(true));
assertNull(CollectionUtils.joinAll(null, null)); assertNull(CollectionUtils.joinAll(null, "-")); assertEquals(expected, output);
assertTrue(registered.contains(serviceUrl)); assertEquals(1, registered.size());
assertThat(DubboAppender.logList, hasSize(0)); assertThat(DubboAppender.logList, hasSize(1)); assertThat(log.getLogThread(), equalTo("thread-name"));
assertThat(objectOutput, Matchers.<ObjectOutput>instanceOf(FstObjectOutput.class));
assertThat(IOUtils.read(reader), equalTo(TEXT));
assertThat(this.fastJsonObjectInput.readBytes(), is("ll".getBytes()));
assertThat(this.fastJsonObjectInput.readBytes(), is("hello".getBytes()));
assertThat(ConfigUtils.isNotEmpty("abc"), is(true));
assertEquals(expected, CollectionUtils.sort(list));
assertThat(result, is(nullValue()));
assertThat((String) p.get("a"), equalTo("12")); assertThat((String) p.get("b"), equalTo("34")); assertThat((String) p.get("c"), equalTo("56"));
assertEquals(3, get); assertEquals(3, i1.get()); assertEquals(127 + 3, get); assertEquals(127 + 3, i2.get()); assertEquals(2, get); assertEquals(2, i3.get());
assertEquals("No such port 20880", result);
assertThat(fastJsonObjectInput.readInt(), is(1));
assertThat(getCallerClassLoader(ClassHelperTest.class), sameInstance(ClassHelperTest.class.getClassLoader()));
assertEquals(0, copy.readerIndex()); assertEquals(buffer.readableBytes(), copy.writerIndex()); assertEquals(buffer.readableBytes(), copy.capacity()); assertEquals(buffer.getByte(i + readerIndex), copy.getByte(i)); assertTrue(buffer.getByte(readerIndex) != copy.getByte(0)); assertTrue(buffer.getByte(readerIndex + 1) != copy.getByte(1));
assertEquals(expected, p);
assertThat(new String(bos.toByteArray()), equalTo(TEXT + "\\n"));
assertEquals(serviceUrl.toFullString(), args.get().toFullString()); assertEquals(consumerUrl, arg.keySet().iterator().next());
assertNull(CollectionUtils.splitAll(null, null)); assertNull(CollectionUtils.splitAll(null, "-")); assertTrue(CollectionUtils.splitAll(new HashMap<String, List<String>>(), "-").isEmpty()); assertEquals(expected, CollectionUtils.splitAll(input, ":"));
assertThat(isNotEmpty(singleton("a")), is(true));
assertEquals(expected, p);
assertEquals("192.168.0.1" + ":10000", urls.get(0).getAddress()); assertEquals("192.168.0.2" + ":10000", urls.get(1).getAddress());
assertThat(this.fastJsonObjectInput.readByte(), is((byte) 123));
assertThat(provider.getProtocol().getName(), equalTo("protocol"));
assertThat(result, is(((byte) 222)));
assertEquals("Please input service name, eg: \\r\\ncd XxxService\\r\\ncd com.xxx.XxxService", result);
assertEquals(Integer.MAX_VALUE, get); assertEquals(Integer.MAX_VALUE, i1.get()); assertEquals(126, get); assertEquals(126, i2.get()); assertEquals(Integer.MAX_VALUE - 1, get); assertEquals(Integer.MAX_VALUE - 1, i3.get());
assertThat(ConfigUtils.getProperty("not-exist", "default"), equalTo("default"));
assertThat(forName("byte") == byte.class, is(true)); assertThat(forName("java.lang.String[]") == String[].class, is(true)); assertThat(forName("[Ljava.lang.String;") == String[].class, is(true));
assertThat(reader.ready(), is(true));
assertThat(ConfigUtils.getServerShutdownTimeout(), equalTo(1234 * 1000));
assertEquals("No such service demo", result);
assertEquals(asList(), merged);
assertEquals(expected, p);
assertThat(result, is(Byte.parseByte("123")));
assertThat(c == ClassHelper.class, is(true));
assertTrue(NetUtils.isValidAddress("10.20.130.230:20880")); assertFalse(NetUtils.isValidAddress("10.20.130.230")); assertFalse(NetUtils.isValidAddress("10.20.130.230:666666"));
assertEquals(100, i1.get()); assertThat(expected.getMessage(), allOf(containsString("new value"), containsString("< 0")));
assertEquals(forbid, newForbid);
assertThat(objectInput, Matchers.<ObjectInput>instanceOf(FstObjectInput.class));
assertThat(ConfigUtils.getServerShutdownTimeout(), equalTo(1234));
assertTrue(result.contains("CURRENT LOG APPENDER"));
assertThat((String)p.get("dubbo"), equalTo("properties"));
assertThat(toStringMap("key", "value"), equalTo(Collections.singletonMap("key", "value")));
assertEquals(expected, p); assertEquals(expected, p);
assertThat(forName(ClassHelperTest.class.getName()) == ClassHelperTest.class, is(true));
assertThat(result, is(12345678L));
assertThat(toShortString(null), equalTo("null")); assertThat(toShortString(new ClassHelperTest()), startsWith("ClassHelperTest@"));
assertThat(status.getLevel(), is(Status.Level.OK)); assertThat(status.getMessage(), is("test1,test2"));
assertEquals("Used the DemoService as default.\\r\\nYou can cancel default service by command: cd /", result);
assertEquals(expected, p);
assertThat(ConfigUtils.getServerShutdownTimeout(), equalTo(Constants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT));
assertThat(result, is(1.88d));
assertEquals(CAPACITY, buffer.capacity()); assertEquals(0, buffer.readerIndex());
assertNull(sorted.get(0)); assertNull(sorted.get(1));
assertThat(ConfigUtils.getProperty("dubbo"), equalTo("properties"));
assertEquals(0, i1.get()); assertEquals(127, i2.get()); assertEquals(Integer.MAX_VALUE, i3.get());
assertThat(consumer.getTimeout(), is(10)); assertThat(System.getProperty("sun.rmi.transport.tcp.responseTimeout"), equalTo("10"));
assertThat(result, is(fullAddress));
assertThat(objectOutput, Matchers.<ObjectOutput>instanceOf(FastJsonObjectOutput.class));
assertThat(result, not(nullValue())); assertThat(result.getName(), is("John")); assertThat(result.getAge(), is(30));
assertThat(result, is(-1.66d));
assertThat(readObject, not(nullValue())); assertThat(readObject.getString("name"), is("John")); assertThat(readObject.getInteger("age"), is(30));
assertThat(parameters, hasEntry("k1", "v1")); assertThat(parameters, hasEntry(Constants.ACCEPT_FOREIGN_IP, "true"));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertThat(fastJsonSerialization.getContentTypeId(), is((byte) 6));
assertThat(getClassLoader(ClassHelperTest.class), sameInstance(oldClassLoader)); assertThat(getClassLoader(ClassHelperTest.class), sameInstance(ClassHelperTest.class.getClassLoader()));
assertEquals(1, get); assertEquals(1, i1.get()); assertEquals(128, get); assertEquals(128, i2.get()); assertEquals(0, get); assertEquals(0, i3.get());
assertThat(skip, is(0L));
assertThat(logger1, is(logger2));
assertThat(result, is(1));
assertNull(newForbid);
assertThat(DubboAppender.logList, hasSize(1)); assertThat(DubboAppender.logList, hasSize(0));
assertEquals("Used the demo as default.\\r\\nYou can cancel default service by command: cd /", result);
assertThat(fastJsonObjectInput.readShort(), is((short) 2));
assertEquals(asList("aaa", "bbb", "fixed", "cached", "zzz"), merged);
assertThat((int) IOUtils.write(reader, writer), equalTo(TEXT.length()));
assertThat(result, is(1.66F));
assertThat(result, is(false));
assertEquals(0, get); assertEquals(100, i1.get()); assertThat(expected.getMessage(), allOf(containsString("new value"), containsString("< 0")));
assertThat(fastJsonSerialization.getContentType(), is("text/json"));
assertEquals(0, get); assertEquals(Integer.MAX_VALUE, i1.get()); assertEquals(127, get); assertEquals(126, i2.get()); assertEquals(Integer.MAX_VALUE, get); assertEquals(Integer.MAX_VALUE - 1, i3.get());
assertTrue(NetUtils.isInvalidPort(0)); assertTrue(NetUtils.isInvalidPort(65536)); assertFalse(NetUtils.isInvalidPort(1024));
assertThat(getClassLoader(), sameInstance(ClassHelper.class.getClassLoader()));
assertThat(status.getLevel(), is(Status.Level.ERROR));
assertThat(serviceConfig.getFilter(), equalTo("mockfilter")); assertThat(parameters, hasEntry(Constants.SERVICE_FILTER_KEY, "prefilter,mockfilter"));
assertThat(result, is((short) 1));
assertThat(server.isBound(), is(true));
assertThat((int) IOUtils.write(is, os, 16), equalTo(TEXT.length()));
assertEquals(null, url.getAbsolutePath()); assertEquals("/home/user1/route.js", url.getAbsolutePath());
assertEquals("", CollectionUtils.join(list, "/")); assertEquals("x", CollectionUtils.join(list, "-")); assertEquals("a/b", CollectionUtils.join(list, "/"));
assertEquals("Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
assertEquals("20887", result);
assertThat(expected.getMessage(), containsString("No such method ")); assertThat(expected.getMessage(), containsString("in class"));
assertThat(ConfigUtils.getSystemProperty("dubbo"), equalTo("system-only"));
assertThat(result, is(10L));
assertThat(animalEnum, is(AnimalEnum.cat));
assertThat(reader.markSupported(), is(true));
assertThat((String) ConfigUtils.getProperties().get("key1"), equalTo("value1"));
assertThat(lines.length, equalTo(3)); assertThat(lines[0], equalTo("a")); assertThat(lines[1], equalTo("b")); assertThat(lines[2], equalTo("c"));
assertThat(result, is("123456".getBytes()));
assertThat(fastJsonObjectInput.readBool(), is(true));
assertThat(this.fastJsonObjectInput.readDouble(), is(1.66d));
assertThat(status.getLevel(), is(Status.Level.ERROR));
assertThat(result, is((short) 1));
assertThat(url.getParameter(Constants.THREAD_NAME_KEY), equalTo("custom-thread-localhost:1234"));
assertThat(fstSerialization.getContentType(), is("x-application/fst"));
assertEquals(false, notified.get()); assertEquals(1, latch.getCount()); assertEquals(0, latch.getCount()); assertEquals(true, notified.get());
assertEquals(true, statItem.isAllowable()); assertEquals(true, statItem.isAllowable()); assertTrue(lastResetTime != statItem.getLastResetTime()); assertEquals(4, statItem.getToken());
assertThat(fastJsonObjectInput.readLong(), is(1000L));
assertEquals(asList("cached", "aaa"), merged);
assertThat(factory, not(nullValue()));
assertThat(monitor, not(nullValue())); assertThat(invoker.getUrl().getParameter(Constants.REFERENCE_FILTER_KEY), containsString("testFilter"));
assertThat(result, is("who are you".getBytes()));
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertThat(result, is(-666.66f));
assertThat(lines.length, equalTo(1)); assertThat(lines[0], equalTo(TEXT));
assertEquals("com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService", result);
assertEquals(s, "1ABC2ABC3"); assertEquals(s, "123");
assertThat((int) IOUtils.write(reader, writer, 16), equalTo(TEXT.length()));
assertThat(result, is("wording"));
assertThat((int) IOUtils.write(writer, TEXT), equalTo(TEXT.length()));
assertThat(this.fastJsonObjectInput.readFloat(), is(1.88f));
assertThat(status.getLevel(), is(Status.Level.OK));
assertThat(result, is(nullValue()));
assertEquals(2, cache.cache.size()); assertTrue(config.isDestroyMethodRun()); assertEquals(1, cache.cache.size()); assertTrue(configCopy.isDestroyMethodRun()); assertEquals(0, cache.cache.size());
assertEquals("Illegal port a, must be integer.", result);
assertThat(status.getLevel(), is(Status.Level.UNKNOWN));
assertThat(ConfigUtils.getProperty("dubbo"), equalTo("system"));
assertThat(bytes.length, is(0));
assertEquals(0, get); assertEquals(1, i1.get()); assertEquals(127, get); assertEquals(128, i2.get()); assertEquals(Integer.MAX_VALUE, get); assertEquals(0, i3.get());
assertThat(result, is(true)); assertThat(result, is(false));
assertThat(isEmpty(null), is(true)); assertThat(isEmpty(new HashSet()), is(true)); assertThat(isEmpty(emptyList()), is(true));
assertThat((String) p.get("dubbo"), equalTo("properties"));
assertThat(ConfigUtils.getPid(), greaterThan(0));
assertThat(objectInput, Matchers.<ObjectInput>instanceOf(FastJsonObjectInput.class));
assertEquals(1, count.get()); assertEquals(2, count.get());
assertEquals(asList("fixed", "cached", "aaa", "bbb", "default.custom"), merged);
assertThat(ExecutorUtil.isTerminated(executor), is(true)); assertThat(ExecutorUtil.isTerminated(executor2), is(false));
assertEquals(new AtomicPositiveInteger(), new AtomicPositiveInteger()); assertEquals(new AtomicPositiveInteger(1), new AtomicPositiveInteger(1));
assertThat(newIs, is(is));
assertEquals(1, dashboardService.getVisualizationDashboardItems( visualization ).size() ); assertEquals( 1, dashboard.getItemCount() ); assertEquals(0, dashboardService.getVisualizationDashboardItems( visualization ).size() ); assertEquals( 0, dashboard.getItemCount() );
assertTrue( may.isAfter( april ) ); assertFalse( april.isAfter( may ) ); assertFalse( may.isAfter( null ) );
assertEquals( expected, DataQueryParams.getMeasureCriteriaFromParam( "GT:100;LT:200" ) );
assertEquals( "A123456789A", DimensionalObjectUtils.getFirstIdentifer( "A123456789A.P123456789A" ) ); assertNull( DimensionalObjectUtils.getFirstIdentifer( "A123456789A" ) );
assertThat( actualDimensionalItems, is( empty() ) );
assertThat( actualTargetEntities, containsInAnyOrder( expectedTargetEntities.toArray() ) );
assertEquals( new ArrayList<>( Arrays.asList( "John", "Doe", "Main", "Road", "25" ) ), TextUtils.getTokens( "John Doe Main Road 25" ) ); assertEquals( new ArrayList<>( Arrays.asList( "Ted,Johnson", "Upper-Road", "45" ) ), TextUtils.getTokens( "Ted,Johnson Upper-Road 45" ) );
assertTrue( convertedMap.containsKey( "GauDLAiXPKT.kC1OT9Q1n1j-R9U8q7X1aJG" ) ); assertTrue( convertedMap.containsKey( "YkRvCLedQa4.h1dJ9W4dWor-Zrd4DAf8M99" ) ); assertTrue( convertedMap.containsKey( "PcfRp1HETO8.zqXKIEycBck-KBJBZopYMPV" ) );
assertEquals( map.get( cocA.getUid() ), cocA.getName() ); assertEquals( map.get( cocB.getUid() ), cocB.getName() );
assertEquals( "<wstxns1:lastUpdatedBy xmlns:wstxns1=\\"urn:test\\" id=\\"jshfdkd323\\" name=\\"Peter Brown\\"/>", jsonWriter.toString() );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( 4, queryEngine.query( query ).size() ); assertEquals( 2, queryEngine.query( query ).size() );
assertTrue( isCollection( colA ) ); assertTrue( isCollection( colB ) ); assertTrue( isCollection( colC ) ); assertFalse( isCollection( dataElementA ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 3 ) );
assertEquals( expected, params.getItemLegends() );
assertEquals( 3, AnalyticsUtils.getLevelFromOrgUnitDimensionName( "oulevel3" ) ); assertEquals( 5, AnalyticsUtils.getLevelFromOrgUnitDimensionName( "oulevel5" ) ); assertEquals( -1, AnalyticsUtils.getLevelFromOrgUnitDimensionName( "notalevel" ) ); assertEquals( -1, AnalyticsUtils.getLevelFromOrgUnitDimensionName( "oulevel" ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertThat( column, is( "ax.\\"" + dataElementA.getUid() + "\\"" ) );
assertEquals( Sets.newHashSet( 1, 2, 3, 4 ), map.get( "a" ) ); assertEquals( Sets.newHashSet( 5, 6 ), map.get( "b" ) );
assertEquals( 1, duplicates.size() ); assertTrue( duplicates.contains( iC ) );
assertThat( actualTtl, is( equalTo( expectedTtl ) ) );
assertEquals( 0, res.size() ); assertEquals( count, reservedValueStore.getCount() );
assertNotNull( children ); assertEquals( (parentMax * childMax) + 1, children.size() );
assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );
assertEquals( expected, unitD.getAncestorNames( null, false ) ); assertEquals( expected, unitD.getAncestorNames( null, true ) );
assertNotNull( value1 ); assertNotNull( value2 ); assertSame( 10, value1 ); assertSame( 100, value2 );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) );
assertEquals( Lists.newArrayList( groupA.getId(), groupD.getId(), groupF.getId() ), map.get( groupSetA ) ); assertEquals( Lists.newArrayList( groupB.getId(), groupE.getId() ), map.get( groupSetB ) ); assertEquals( Lists.newArrayList( groupC.getId() ), map.get( groupSetC ) ); assertNull( map.get( groupSetZ ) );
assertEquals( 6, queryEngine.query( query ).size() );
assertEquals( 2014, dateTimeUnit.getYear() ); assertEquals( 3, dateTimeUnit.getMonth() ); assertEquals( 20, dateTimeUnit.getDay() );
assertNull( dateRange.getStartDate() ); assertNull( dateRange.getEndDate() ); assertEquals( jan1, dateRange.getStartDate() ); assertEquals( jan6, dateRange.getEndDate() ); assertEquals( jan2, dateRange.getStartDate() ); assertEquals( jan6, dateRange.getEndDate() );
assertEquals( "a1-b1-c1", DimensionalObjectUtils.getKey( column, row ) ); assertEquals( "b1", DimensionalObjectUtils.getKey( new ArrayList<>(), row ) );
assertEquals( n, res.size() ); assertEquals( ( count + n ), reservedValueStore.getCount() );
assertThat( actualReturn, is( false ) );
assertEquals( 0, subject.validate( programA, null ).size() );
assertEquals( "Conflict", wm.getHttpStatus() ); assertEquals( 409, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "\'invalid\' is not valid value for property \'teiB\'", wm.getMessage() );
assertEquals( 1, objects.size() ); assertEquals( "abcdefghijA", objects.get( 0 ).getUid() );
assertNotNull( message ); assertEquals( BaseNotificationMessageRenderer.EMAIL_CHAR_LIMIT, message.getMessage().length() );
assertEquals( expected, actual );
assertThat( organisationUnit, is( notNullValue() ) ); assertThat( organisationUnit.getId(), is( 100L ) ); assertThat( organisationUnit.getUid(), is( "abcded" ) ); assertThat( organisationUnit.getCode(), is( "ALFA" ) ); assertThat( organisationUnit.getPath(), is( "/aaaa/bbbb/cccc/abcded" ) ); assertThat( organisationUnit.getHierarchyLevel(), is( 4 ) );
assertNotNull( CodeGenerator.getRandomUrlToken() ); assertNotNull( CodeGenerator.getRandomUrlToken() ); assertNotNull( CodeGenerator.getRandomUrlToken() ); assertEquals( 32, CodeGenerator.getRandomUrlToken().length() ); assertEquals( 32, CodeGenerator.getRandomUrlToken().length() ); assertEquals( 32, CodeGenerator.getRandomUrlToken().length() );
assertEquals( 12.0, MathUtils.getMax( array ), DELTA );
assertEquals( 3, map.size() ); assertEquals( "CodeA", map.get( "A123456789A" ) ); assertEquals( "CodeB", map.get( "A123456789B" ) ); assertEquals( null, map.get( "A123456789C" ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) );
assertThat( row, is( notNullValue() ) ); assertThat( row, hasSize( 4 ) ); assertThat( row.get( 0 ), is( "de1" ) );
assertThat( actualClasses, hasSize( 1 ) ); assertThat( actualClasses, containsInAnyOrder( expectedClasses ) );
assertEquals( 1, objects.size() ); assertEquals( "deabcdefghE", objects.get( 0 ).getUid() );
assertEquals( "NameA", getProperty( dataElementA, "name" ) ); assertNull( getProperty( dataElementA, "color" ) );
assertThat( expirationTime, is( valueOf( theExpectedTtlFactor ) ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 4 ) );
assertEquals( 1, objects.size() ); assertEquals( "deabcdefghF", objects.get( 0 ).getUid() );
assertThat( event.getNotes(), hasSize( 3 ) );
assertTrue( preheat.isEmpty() ); assertTrue( preheat.isEmpty( TrackerIdScheme.UID ) ); assertTrue( preheat.isEmpty( TrackerIdScheme.CODE ) );
assertEquals( new DateTime( 2020, 1, 15, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 4, 15, 0, 0 ).toDate(), 3 ) ); assertEquals( new DateTime( 2020, 3, 1, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 1, 1, 0, 0 ).toDate(), -2 ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertThat( event.getEnrollment(), is( nullValue() ) );
assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );
assertEquals( 1 , expressionList.size() );
assertEquals( "de_shortnamea_de_shortnameb_de_shortnamec", name );
assertEquals( new DateTimeUnit( 1993, 3, 21, true ), calendar.toIso( new DateTimeUnit( 1372, 1, 1 ) ) ); assertEquals( new DateTimeUnit( 2020, 3, 20, true ), calendar.toIso( new DateTimeUnit( 1399, 1, 1 ) ) ); assertEquals( new DateTimeUnit( 2020, 3, 20, true ), calendar.toIso( new DateTimeUnit( 2020, 3, 20 ) ) );
assertEquals( 0, deA.getOpenFuturePeriods() ); assertEquals( 0, deA.getOpenFuturePeriods() ); assertEquals( 3, deA.getOpenFuturePeriods() );
assertNull( params.getStartDate() ); assertNull( params.getEndDate() ); assertEquals( new DateTime( 2014, 4, 1, 0, 0 ).toDate(), params.getStartDate() ); assertEquals( new DateTime( 2014, 6, 30, 0, 0 ).toDate(), params.getEndDate() );
assertFalse( status );
assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );
assertEquals( metadataVersion.getType(), remoteMetadataVersion.getType() ); assertEquals( metadataVersion.getHashCode(), remoteMetadataVersion.getHashCode() ); assertEquals( metadataVersion.getName(), remoteMetadataVersion.getName() ); assertEquals( metadataVersion, remoteMetadataVersion );
assertEquals( 1, count ); assertEquals( 3, res.size() ); assertEquals( ( count + 3 ), reservedValueStore.getCount() );
assertEquals( " * ", QueryUtils.parseSelectFields( null ) );
assertEquals( new DateTime( 2020, 1, 15, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 10, 15, 0, 0 ).toDate(), 3 ) ); assertEquals( new DateTime( 2020, 7, 1, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 1, 1, 0, 0 ).toDate(), -2 ) );
assertThat( clause, is( "sum(ax.\\"fWIAEtYVEGk\\")" ) );
assertThat( event.getNotes(), hasSize( 5 ) );
assertThat( categoryOptionCombo, is( notNullValue() ) ); assertThat( sql, is( replace( SQL_GET_CATEGORYOPTIONCOMBO, "key", "categoryoptioncomboid", "resolvedScheme", "name = \'default\'" ) ) );
assertEquals( "Not Found", wm.getHttpStatus() ); assertEquals( 404, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "No potentialDuplicate records found with id \'0\'.", wm.getMessage() );
assertTrue( FileResourceBlocklist.isValid( frA ) ); assertTrue( FileResourceBlocklist.isValid( frB ) ); assertTrue( FileResourceBlocklist.isValid( frC ) );
assertNotNull( interval );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertTrue( convertedMap.containsKey( "GauDLAiXPKT-kC1OT9Q1n1j-R9U8q7X1aJG" ) ); assertTrue( convertedMap.containsKey( "YkRvCLedQa4-h1dJ9W4dWor-Zrd4DAf8M99" ) ); assertTrue( convertedMap.containsKey( "PcfRp1HETO8-zqXKIEycBck-KBJBZopYMPV" ) );
assertFalse( dataValue.isZero() ); assertFalse( dataValue.isZero() ); assertFalse( dataValue.isZero() ); assertFalse( dataValue.isZero() ); assertTrue( dataValue.isZero() ); assertTrue( dataValue.isZero() ); assertTrue( dataValue.isZero() );
assertEquals( "-28.94221", getLatitude( "[+37.99034,-28.94221]" ) ); assertEquals( "28.94221", getLatitude( "[37.99034,28.94221]" ) ); assertNull( getLatitude( "23.34343,56.3232" ) ); assertNull( getLatitude( null ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( 2, deA.getCategoryCombos().size() ); assertEquals( Sets.newHashSet( ccA, ccB ), deA.getCategoryCombos() ); assertEquals( 1, deB.getCategoryCombos().size() ); assertEquals( Sets.newHashSet( ccA ), deB.getCategoryCombos() );
assertNull( paramsFromMap.getVersion() );
assertFalse( optional.contains( "TEXT" ) ); assertFalse( optional.contains( "CURRENT_DATE" ) ); assertFalse( optional.contains( "ORG_UNIT_CODE" ) ); assertTrue( optional.contains( "SEQUENTIAL" ) ); assertEquals( 1, optional.size() );
assertEquals( "Array List", TextUtils.getPrettyClassName( ArrayList.class ) ); assertEquals( "Abstract Sequential List", TextUtils.getPrettyClassName( AbstractSequentialList.class ) );
assertNotNull( message ); assertEquals( BaseNotificationMessageRenderer.SMS_CHAR_LIMIT, message.getMessage().length() );
assertEquals( 1382, testDateTimeUnit.getYear() ); assertEquals( 5, testDateTimeUnit.getMonth() ); assertEquals( 20, testDateTimeUnit.getDay() ); assertEquals( 1381, testDateTimeUnit.getYear() ); assertEquals( 9, testDateTimeUnit.getMonth() ); assertEquals( 20, testDateTimeUnit.getDay() );
assertEquals( "2014-05-18T15:10:05", DateUtils.getLongDateString( date ) ); assertNull( DateUtils.getLongDateString( null ) );
assertTrue( convertedMap.containsKey( "GauDLAiXPKT.*.kC1OT9Q1n1j-2016" ) ); assertTrue( convertedMap.containsKey( "YkRvCLedQa4.*.h1dJ9W4dWor-2017" ) ); assertTrue( convertedMap.containsKey( "w1G4l0cSxOi.*.gQhAMdimKO4-2017" ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertThat( column, is( "lower(ax.\\"" + dataElementA.getUid() + "\\")" ) );
assertEquals( ListUtils.newList( "uidA", "uidB" ), TextUtils.getOptions( "uidA;uidB" ) ); assertEquals( ListUtils.newList( "uidA" ), TextUtils.getOptions( "uidA" ) ); assertEquals( ListUtils.newList(), TextUtils.getOptions( null ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertThat( actualResult, is( DATA_X_DIM_ID ) );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertFalse( cache.isCacheLoaded() ); assertTrue( cache.isCacheLoaded() );
assertNotNull( enrollment ); assertEquals( TEI_ATTRIBUTE_NEW_VALUE, attribute.getValue() );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() ); assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() ); assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( itemsBefore, params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems() ); assertEquals( itemsAfter, params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems() );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertTrue( DateUtils.isToday( today ) ); assertFalse( DateUtils.isToday( yesterday ) ); assertFalse( DateUtils.isToday( tomorrow ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( "Conflict", wm.getHttpStatus() ); assertEquals( 409, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "\'invalid\' is not valid value for property \'teiA\'", wm.getMessage() );
assertEquals( "Not Found", wm.getHttpStatus() ); assertEquals( 404, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "No potentialDuplicate records found with id \'0\'.", wm.getMessage() );
assertEquals( "Antibiotic resistant infection", TextUtils.getPrettyEnumName( Disease.ANTIBIOTIC_RESISTANT_INFECTION ) ); assertEquals( "Chronic wasting disease", TextUtils.getPrettyEnumName( Disease.CHRONIC_WASTING_DISEASE ) ); assertEquals( "Malaria", TextUtils.getPrettyEnumName( Disease.MALARIA ) );
assertEquals( 3, map.size() ); assertEquals( "DCodeA", map.get( "D123456789A" ) ); assertEquals( "DCodeB", map.get( "D123456789B" ) ); assertEquals( "CCodeA", map.get( "C123456789A" ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 5, AnalyticsUtils.getIntegerOrValue( 5d, pi ) ); assertEquals( "Male", AnalyticsUtils.getIntegerOrValue( "Male", de ) );
assertEquals( programInstance.getUid(), bundle.getObject() ); assertEquals( ProgramInstance.class, bundle.getKlass() ); assertTrue( bundle.getEnrollmentRuleEffects().containsKey( "test-enrollment" ) ); assertTrue( bundle.getEventRuleEffects().isEmpty() ); assertEquals( TrackerImportStrategy.CREATE, bundle.getImportStrategy() ); assertEquals( MessageType.TRACKER_SIDE_EFFECT, bundle.getMessageType() );
assertEquals( TrackerStatus.OK, report.getStatus() ); assertNotNull( report.getTypeReportMap() ); assertTrue( report.isEmpty() );
assertFalse( status );
assertThat( anyRootNode, is( notNullValue() ) ); assertThat( anyRootNode.getName(), is( equalTo( "any" ) ) ); assertThat( anyRootNode.getChildren(), is( empty() ) );
assertEquals( dimensionalItems.size(), 2);
assertTrue( runnableCaptor.getValue() instanceof TrackerNotificationThread );
assertEquals( "(\'x\',\'y\')", QueryUtils.convertCollectionValue( "[x,y]" ) ); assertEquals( "(1,2)", QueryUtils.convertCollectionValue( "[1,2]" ) );
assertThat( actualTtl, is( equalTo( expectedTtl ) ) );
assertNull( paramsFromMap.getVersion() );
assertTrue( usernameIsValid( "johnmichaeldoe" ) ); assertTrue( usernameIsValid( "ted@johnson.com" ) ); assertTrue( usernameIsValid( "harry@gmail.com" ) ); assertFalse( usernameIsValid( null ) ); assertFalse( usernameIsValid( CodeGenerator.generateCode( 400 ) ) );
assertFalse( filter.retain( organisationUnit ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 3 ) );
assertThat( periodTypePeriodMap.size(), is( 0 ) ); assertThat( periodTypePeriodMap.size(), is( 0 ) );
assertFalse( FileResourceBlocklist.isValid( frA ) ); assertFalse( FileResourceBlocklist.isValid( frB ) ); assertFalse( FileResourceBlocklist.isValid( frC ) ); assertFalse( FileResourceBlocklist.isValid( frD ) ); assertFalse( FileResourceBlocklist.isValid( null ) );
assertTrue( result ); assertFalse( result );
assertEquals( 3, map.get( "de1" + DIMENSION_SEP + "ou2" + DIMENSION_SEP + "pe1" ) ); assertEquals( 5, map.get( "de2" + DIMENSION_SEP + "ou3" + DIMENSION_SEP + "pe2" ) );
assertEquals( asMap.size(), 3 ); assertEquals( asMap.get( deA).intValue(), 10 ); assertEquals( asMap.get( deB).intValue(), 20 ); assertEquals( asMap.get( deC).intValue(), 30 );
assertThat( anyRootNode, is( notNullValue() ) ); assertThat( anyRootNode.getName(), is( equalTo( "any" ) ) ); assertThat( anyRootNode.getChildren(), is( empty() ) );
assertTrue( AnalyticsUtils.isPeriodInPeriods( "202001", periods ) ); assertFalse( AnalyticsUtils.isPeriodInPeriods( "202005", periods ) );
assertThat( column, is( "ax.\\"" + dataElementA.getUid() + "\\"" ) );
assertThat( actualReturn, is( true ) );
assertThat( actualCacheControl.toString().toLowerCase(), containsString( "public" ) );
assertThat( bundle.getObjects( Attribute.class, false ), hasSize( 0 ) ); assertThat( bundle.getObjects( Attribute.class, true ), hasSize( 0 ) ); assertThat( typeReport.getStats().getCreated(), is( 0 ) ); assertThat( typeReport.getStats().getUpdated(), is( 0 ) ); assertThat( typeReport.getStats().getDeleted(), is( 0 ) ); assertThat( typeReport.getStats().getIgnored(), is( 1 ) ); assertThat( typeReport.getObjectReports(), hasSize( 1 ) );
assertEquals( currentVersion, actualVersion );
assertEquals( 3, map.size() ); assertEquals( "CodeA", map.get( "A123456789A" ) ); assertEquals( "CodeB", map.get( "A123456789B" ) ); assertEquals( null, map.get( "A123456789C" ) );
assertEquals( 1, res.size() ); assertEquals(reservedValueStore.getCount(), count + 1);
assertTrue( allowedDataValues.containsAll( filteredEventDataValues ) );
assertEquals( "Forbidden", wm.getHttpStatus() ); assertEquals( 403, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "You don\'t have read access to \'ABCDEFGHIJ2\'.", wm.getMessage() );
assertTrue( MathUtils.isPercentage( "0" ) ); assertTrue( MathUtils.isPercentage( "15" ) ); assertTrue( MathUtils.isPercentage( "100" ) ); assertFalse( MathUtils.isPercentage( "abc" ) ); assertFalse( MathUtils.isPercentage( "-1" ) ); assertFalse( MathUtils.isPercentage( "12.5" ) ); assertFalse( MathUtils.isPercentage( "17,8" ) ); assertFalse( MathUtils.isPercentage( "101" ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( 3, query.getCriterions().size() );
assertThat( events, hasSize( 4 ) ); assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(), hasSize( 4 ) ); assertThat( event4.getUid(), is( uid ) ); assertThat( event4.getEvent(), is( uid ) );
assertEquals( "ougs.\\"Short name\\"", SqlUtils.quote( "ougs", "Short name" ) ); assertEquals( "ous.\\"uid\\"", SqlUtils.quote( "ous", "uid" ) );
assertEquals( diB, dashboard.getAvailableItemByType( DashboardItemType.REPORTS ) ); assertEquals( diC, dashboard.getAvailableItemByType( DashboardItemType.RESOURCES ) ); assertNull( dashboard.getAvailableItemByType( DashboardItemType.MAP ) );
assertEquals( 1, objects.size() );
assertEquals( 1, eventChart.getColumns().size() ); assertNotNull( dim ); assertEquals( DimensionType.PROGRAM_ATTRIBUTE, dim.getDimensionType() ); assertEquals( AnalyticsType.EVENT, dim.getAnalyticsType() ); assertEquals( tead.getFilter(), dim.getFilter() );
assertNull( metadataVersionStore.getVersionByName( "version1" ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertFalse(shouldStopSync);
assertThat( progressiveCacheFlag, is( true ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( 8, getId( dataElementA ) );
assertEquals( "abcdefghij", subString( STRING, 0, 10 ) ); assertEquals( "cdef", subString( STRING, 2, 4 ) ); assertEquals( "ghij", subString( STRING, 6, 4 ) ); assertEquals( "ghij", subString( STRING, 6, 6 ) ); assertEquals( "", subString( STRING, 11, 3 ) ); assertEquals( "j", subString( STRING, 9, 1 ) ); assertEquals( "", subString( STRING, 4, 0 ) );
assertEquals( "+37.99034", getLongitude( "[+37.99034,-28.94221]" ) ); assertEquals( "37.99034", getLongitude( "[37.99034,28.94221]" ) ); assertNull( getLongitude( "23.34343,56.3232" ) ); assertNull( getLongitude( null ) );
assertEquals( 1, objects.size() ); assertEquals( "deabcdefghA", objects.get( 0 ).getUid() );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 3 ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertEquals( reservedValueA, res.get( 0 ) ); assertEquals( 1, res.size() );
assertThat( progressiveCacheFlag, is( true ) );
assertEquals( expected, qiA.getOptionSetFilterItemsOrAll() ); assertEquals( expected, qiB.getOptionSetFilterItemsOrAll() );
assertTrue( MathUtils.isZero( "0" ) ); assertFalse( MathUtils.isZero( "+0" ) ); assertFalse( MathUtils.isZero( "-0" ) ); assertFalse( MathUtils.isZero( "2232" ) ); assertFalse( MathUtils.isZero( "2.17" ) ); assertFalse( MathUtils.isZero( "Hey" ) );
assertEquals( 2, map.size() ); assertEquals( "PCodeA.DCodeA", map.get( "P123456789A.D123456789A" ) ); assertEquals( "PCodeA.DCodeB", map.get( "P123456789A.D123456789B" ) );
assertNull( res );
assertFalse( status );
assertThat( expirationTime, is( theExpectedTtl ) );
assertEquals( 4, segments.size() ); assertEquals( segments.get( 0 ).getMethod(), TextPatternMethod.ORG_UNIT_CODE ); assertEquals( segments.get( 1 ).getMethod(), TextPatternMethod.CURRENT_DATE ); assertEquals( segments.get( 2 ).getMethod(), TextPatternMethod.RANDOM ); assertEquals( segments.get( 3 ).getMethod(), TextPatternMethod.TEXT );
assertNotNull( metadataVersionStore.getVersionByName( "newVersion" ) );
assertEquals( Sets.newHashSet( 1, 2, 3 ), map.get( "a" ) ); assertEquals( Sets.newHashSet( 4, 5 ), map.get( "b" ) ); assertEquals( Sets.newHashSet( 6 ), map.get( "c" ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) );
assertEquals( 1, ruleEffects.size() ); assertTrue( ruleAction instanceof RuleActionSendMessage ); assertEquals( "PNT-1", ruleActionSendMessage.notification() );
assertFalse( filter.retain( organisationUnit ) );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 6, objects.size() );
assertEquals( new DateTime( 2020, 1, 15, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2023, 1, 15, 0, 0 ).toDate(), 3 ) ); assertEquals( new DateTime( 2022, 1, 1, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 1, 1, 0, 0 ).toDate(), -2 ) );
assertEquals( "Tracker program page size", TextUtils.getPrettyPropertyName( "trackerProgramPageSize" ) ); assertEquals( "Data values page size", TextUtils.getPrettyPropertyName( "dataValuesPageSize" ) ); assertEquals( "Relative start", TextUtils.getPrettyPropertyName( "relativeStart" ) );
assertFalse( emailIsValid( "john@doe" ) ); assertTrue( emailIsValid( "john@doe.com" ) );
assertEquals( "0 0 0 15 */1 *", CronUtils.getMonthlyCronExpression( 0, 0, 15 ) );
assertFalse( reservedValueStore.isReserved( reservedValueA.getOwnerObject(), reservedValueA.getOwnerUid(), "100" ) );
assertEquals( 4, ExpressionUtils.evaluate( "d2:condition(\'3 > 2\',4,3)", null ) ); assertEquals( 3, ExpressionUtils.evaluate( "d2:condition(\'5 > 7\',4,3)", null ) );
assertEquals( 1381, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 25, testDateTimeUnit.getDay() );
assertEquals( "Conflict", wm.getHttpStatus() ); assertEquals( 409, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "No tracked entity instance found with id \'ABCDEFGHIJ0\'.", wm.getMessage() );
assertEquals( 365, calendar.daysInYear( 1389 ) ); assertEquals( 366, calendar.daysInYear( 1395 ) );
assertEquals( 2006, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 29, testDateTimeUnit.getDay() );
assertThat( event.getEnrollment(), is( nullValue() ) ); assertThat( programInstanceMap.get( event.getUid() ), is( nullValue() ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals(1, dashboardService.getEventReportDashboardItems( eventReport ).size() ); assertEquals( 1, dashboard.getItemCount() ); assertEquals(0, dashboardService.getEventReportDashboardItems( eventReport ).size() ); assertEquals( 0, dashboard.getItemCount() );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertEquals( 6, queryEngine.query( query ).size() );
assertEquals( 29, calendar.daysInMonth( 1389, 12 ) ); assertEquals( 30, calendar.daysInMonth( 1395, 12 ) );
assertEquals( 1, periodType.createPeriod().getPeriodSpan( periodType ) ); assertEquals( 2, new SixMonthlyPeriodType().createPeriod().getPeriodSpan( periodType ) ); assertEquals( 4, new YearlyPeriodType().createPeriod().getPeriodSpan( periodType ) );
assertEquals( 1, levels.get( 0 ).getLevel() ); assertEquals( 2, levels.get( 1 ).getLevel() ); assertEquals( 3, levels.get( 2 ).getLevel() );
assertThat( subject.getAnalyticsTableType(), is( AnalyticsTableType.EVENT ) );
assertEquals( 1994, interval.getTo().getYear() ); assertEquals( 9, interval.getTo().getMonth() ); assertEquals( 2, interval.getTo().getDay() );
assertEquals( 3, partitions.getPartitions().size() ); assertTrue( partitions.getPartitions().contains( 2018 ) ); assertTrue( partitions.getPartitions().contains( 2019 ) ); assertTrue( partitions.getPartitions().contains( 0 ) ); assertEquals( 1, partitions.getPartitions().size() ); assertTrue( partitions.getPartitions().contains( 2018 ) );
assertEquals( metadataVersion, metadataVersionStore.getVersionByName( "version1" ) ); assertNull( metadataVersionStore.getVersionByName( "non_existing" ) );
assertEquals( 2, calendar.weekday( new DateTimeUnit( 1372, 1, 2 ) ) );
assertThat( actualResponse, is( not( nullValue() ) ) ); assertThat( actualResponse.getStatusCode(), is( NOT_FOUND ) );
assertEquals( anyDimensionalItems, unchangedList );
assertEquals( periodType, de.getPeriodType() );
assertThat( TextUtils.getCommaDelimitedString( Arrays.asList( 1, 2, 3, 4, 5 ) ), is( "1, 2, 3, 4, 5" ) ); assertThat( TextUtils.getCommaDelimitedString( Collections.singletonList( 1 ) ), is( "1" ) ); assertThat( TextUtils.getCommaDelimitedString( null ), is( "" ) );
assertEquals( date2, DateUtils.max( date1, date2 ) ); assertEquals( date2, DateUtils.max( date2, date1 ) ); assertEquals( date1, DateUtils.max( date1, date3 ) ); assertEquals( date1, DateUtils.max( date3, date1 ) ); assertNull( DateUtils.max( date3, date4 ) );
assertEquals( expected, PartitionUtils.getPartitions( period ) ); assertEquals( expected, PartitionUtils.getPartitions( period ) );
assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );
assertEquals( "{\\"id\\":\\"jshfdkd323\\",\\"name\\":\\"Peter Brown\\"}", jsonWriter.toString() );
assertEquals( null, TextUtils.removeLastComma( null ) ); assertEquals( "", TextUtils.removeLastComma( "" ) ); assertEquals( "tom,john", TextUtils.removeLastComma( "tom,john," ) ); assertEquals( "tom, john", TextUtils.removeLastComma( "tom, john, " ) ); assertEquals( "tom, john", TextUtils.removeLastComma( "tom, john, " ) );
assertEquals( 1, objects.size() ); assertEquals( "deabcdefghA", objects.get( 0 ).getUid() );
assertEquals( 2.0, MathUtils.getMin( array ), DELTA );
assertEquals( "dimension:dx-dimension:pe-filter:ou-aggregationType:SUM-skipMeta:true", key ); assertEquals( "dimension:dx-filter:pe-filter:ou-aggregationType:AVERAGE-skipMeta:true", key );
assertThat( event.getEnrollment(), is( programInstance.getUid() ) ); assertThat( programInstanceMap.get( event.getUid() ), is( programInstance ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertFalse( errors.isEmpty() );
assertEquals( 2014, dateTimeUnit.getYear() ); assertEquals( 3, dateTimeUnit.getMonth() ); assertEquals( 20, dateTimeUnit.getDay() );
assertEquals( 1, objects.size() ); assertEquals( "abcdefghijB", objects.get( 0 ).getUid() );
assertEquals( 0, objects.size() );
assertEquals( 4, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( 2014, calendar.get( Calendar.YEAR ) ); assertEquals( 2, calendar.get( Calendar.MONTH ) ); assertEquals( 20, calendar.get( Calendar.DAY_OF_MONTH ) );
assertEquals( "abcdefgh", trimEnd( "abcdefghijkl", 4 ) );
assertEquals( 2010, testDate.getYear() ); assertEquals( 1, testDate.getMonthOfYear() ); assertEquals( 2010, testDate.getYear() ); assertEquals( 1, testDate.getMonthOfYear() );
assertEquals( 2, objects.size() );
assertThat( dataQueryParams.getPeriods(), hasSize( 4 ) );
assertThat( organisationUnit, is( notNullValue() ) ); assertThat( organisationUnit.getId(), is( 100L ) ); assertThat( organisationUnit.getUid(), is( "abcded" ) ); assertThat( organisationUnit.getCode(), is( "CODE1" ) ); assertThat( organisationUnit.getPath(), is( "/abcded" ) ); assertThat( organisationUnit.getHierarchyLevel(), is( 1 ) );
assertTrue( convertedMap.containsKey( "GauDLAiXPKT.kC1OT9Q1n1j" ) ); assertTrue( convertedMap.containsKey( "YkRvCLedQa4.h1dJ9W4dWor" ) ); assertTrue( convertedMap.containsKey( "PcfRp1HETO8.zqXKIEycBck" ) );
assertEquals( 5, objects.size() ); assertFalse( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertThat( theNewDate, is( greaterThan( anyInitialDate ) ) );
assertEquals( new DateTime( 2020, 1, 5, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 7, 5, 0, 0 ).toDate(), 3 ) ); assertEquals( new DateTime( 2020, 10, 10, 0, 0 ).toDate(), periodType.getRewindedDate( new DateTime( 2020, 6, 10, 0, 0 ).toDate(), -2 ) );
assertThat( periodMap.size(), is( 2 ) ); assertThat( periodMap.get( MonthlyPeriodType.NAME ), hasSize( 3 ) ); assertThat( periodMap.get( QuarterlyPeriodType.NAME ), hasSize( 3 ) );
assertEquals( metadataVersion, metadataSyncParams.getVersion() );
assertEquals( ColumnDataType.BIGINT, AnalyticsUtils.getColumnType( ValueType.INTEGER, true ) ); assertEquals( ColumnDataType.GEOMETRY_POINT, AnalyticsUtils.getColumnType( ValueType.COORDINATE, true ) ); assertEquals( ColumnDataType.TEXT, AnalyticsUtils.getColumnType( ValueType.COORDINATE, false ) );
assertTrue( reservedValueStore.isReserved( reservedValueA.getOwnerObject(), reservedValueA.getOwnerUid(), "001" ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 1 ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals(1, dashboardService.getEventChartDashboardItems( eventChart ).size() ); assertEquals( 1, dashboard.getItemCount() ); assertEquals(0, dashboardService.getEventChartDashboardItems( eventChart ).size() ); assertEquals( 0, dashboard.getItemCount() );
assertEquals(1, dashboardService.getMapDashboardItems( map ).size() ); assertEquals( 1, dashboard.getItemCount() ); assertEquals(0, dashboardService.getMapDashboardItems( map ).size() ); assertEquals( 0, dashboard.getItemCount() );
assertThat( actualTtl, is( equalTo( expectedTtl ) ) );
assertNotNull( programStageInstance ); assertNotNull( programStageInstance.getProgramStage() ); assertNotNull( programStageInstance.getProgramStage().getProgram() ); assertNotNull( programStageInstance.getOrganisationUnit() ); assertEquals( PROGRAM_UID, programStageInstance.getProgramStage().getProgram().getUid() ); assertEquals( PROGRAM_STAGE_UID, programStageInstance.getProgramStage().getUid() ); assertEquals( ORGANISATION_UNIT_UID, programStageInstance.getOrganisationUnit().getUid() );
assertEquals( expected, actual );
assertEquals( 3, typeReport0.getObjectReports().size() ); assertEquals( 3, typeReport0.getErrorReports().size() ); assertEquals( 3, typeReport1.getObjectReports().size() ); assertEquals( 3, typeReport1.getErrorReports().size() );
assertThat( event.getNotes(), hasSize( 5 ) );
assertEquals( 1, objects.size() ); assertEquals( "deabcdefghF", objects.get( 0 ).getUid() );
assertEquals( 0, objects.size() );
assertEquals( "ShortNameA", dataElementA.getShortName() );
assertThat( paginationData.getFirstResult(), is( 2600 ) ); assertThat( paginationData.getSize(), is( 200 ) );
assertEquals( "\'abc\'", QueryUtils.parseValue( "abc" ) ); assertEquals( "123", QueryUtils.parseValue( "123" ) );
assertEquals( "Conflict", wm.getHttpStatus() ); assertEquals( 409, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "\'ABCDEFGHIJ1\' and \'ABCDEFGHIJ2\' is already marked as a potential duplicate", wm.getMessage() );
assertEquals( 2, objects.size() );
assertEquals( new Long( 1 ), ExpressionFunctions.daysBetween( "2014-03-04", "2014-03-05" ) ); assertEquals( new Long( 32 ), ExpressionFunctions.daysBetween( "2015-04-04", "2015-05-06" ) );
assertThat( actualResult, is( true ) );
assertEquals( typeA, QueryPlannerUtils.getAggregationType( new AnalyticsAggregationType( AggregationType.SUM, AggregationType.AVERAGE ), ValueType.INTEGER, new QuarterlyPeriodType(), new YearlyPeriodType() ) ); assertEquals( typeB, QueryPlannerUtils.getAggregationType( new AnalyticsAggregationType( AggregationType.AVERAGE, AggregationType.AVERAGE ), ValueType.INTEGER, new QuarterlyPeriodType(), new YearlyPeriodType() ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() ); assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( 1, tables.size() ); assertNotNull( table ); assertNotNull( table.getTablePartitions() ); assertEquals( 1, table.getTablePartitions().size() ); assertNotNull( partition ); assertTrue( partition.isLatestPartition() ); assertEquals( lastFullTableUpdate, partition.getStartDate() ); assertEquals( startTime, partition.getEndDate() );
assertThat( actualReturn, is( true ) );
assertEquals( expected, SqlView.getCriteria( params ) );
assertEquals( 1, GridUtils.getGridIndexByDimensionItem( row, periods, 2 ) ); assertEquals( 2, GridUtils.getGridIndexByDimensionItem( row2, periods, 2 ) );
assertThat( actualClasses, hasSize( 2 ) ); assertThat( actualClasses, containsInAnyOrder( expectedClasses ) );
assertThat( resultingList, hasSize( 5 ) );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( "DataElement", getClassName( dataElementA ) );
assertEquals( 2014, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 29, testDateTimeUnit.getDay() ); assertEquals( 2013, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 30, testDateTimeUnit.getDay() );
assertThat( emptyDimensionalItems, is( emptyList() ) );
assertThat( actualTtl, is( equalTo( expectedTtl ) ) );
assertThat( resultingList, hasSize( 5 ) );
assertThat( actualTargetEntities, containsInAnyOrder( DATA_TYPE_ENTITY_MAP.values().toArray() ) );
assertEquals( 1, errors.size() ); assertEquals( errors.get( 0 ).getErrorCode(), ErrorCode.E6000 ); assertEquals( errors.get( 0 ).getMessage(), "Program `ProgramA` has more than one Program Instances" );
assertNotNull( ruleEffects ); assertEquals( ruleEffects.get( 0 ).data(), "10" );
assertEquals( TimeZone.getDefault(), new DateTimeUnit().getTimeZone() );
assertThat( resultingList, is( emptyDimensionalItems ) ); assertThat( resultingList, hasSize( 0 ) );
assertEquals( Sets.newHashSet( groupA, groupD, groupF ), map.get( groupSetA ) ); assertEquals( Sets.newHashSet( groupB, groupE ), map.get( groupSetB ) ); assertEquals( Sets.newHashSet( groupC ), map.get( groupSetC ) ); assertNull( map.get( groupSetZ ) );
assertEquals( 0, objects.size() );
assertFalse( pi.hasFilter() ); assertTrue( pi.hasFilter() );
assertEquals( 2, variables.size() ); assertTrue( variables.contains( "de_name" ) ); assertTrue( variables.contains( "de_aggregation_type" ) );
assertThat( actualResult, is( ORGUNIT_DIM_ID ) );
assertThat( actualCacheControl.toString().toLowerCase(), not( containsString( "private" ) ) ); assertThat( actualCacheControl.toString().toLowerCase(), not( containsString( "public" ) ) );
assertEquals( 0, objects.size() );
assertThat( actualCacheControl.toString().toLowerCase(), containsString( "private" ) );
assertThat( matrix.get( METADATA ).keySet(), hasSize( 6 ) );
assertEquals( Lists.newArrayList( groupA, groupD, groupF ), map.get( groupSetA ) ); assertEquals( Lists.newArrayList( groupB, groupE ), map.get( groupSetB ) ); assertEquals( Lists.newArrayList( groupC ), map.get( groupSetC ) ); assertNull( map.get( groupSetZ ) );
assertNull( version );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertThat( actualClass, is( notNullValue() ) ); assertThat( actualClass, is( equalTo( expectedClass ) ) );
assertEquals( 4, queryEngine.query( query ).size() ); assertEquals( 2, queryEngine.query( query ).size() );
assertEquals( aug17, DateUtils.getLatest( mar21, null, aug17, null, jan3, null ) ); assertEquals( null, DateUtils.getLatest( null, null ) );
assertTrue( code.substring( 0, 1 ).matches( "[a-zA-Z]" ) ); assertTrue( code.matches( "[0-9a-zA-Z]{11}" ) ); assertTrue( codes.add( code ) );
assertThat( resultingList, hasSize( 3 ) );
assertEquals( 12 * 30, daysInYear );
assertEquals( "DE ShortNameA DE ShortNameB DE ShortNameC", name );
assertThat( organisationUnit, is( notNullValue() ) ); assertThat( organisationUnit.getId(), is( 100L ) ); assertThat( organisationUnit.getUid(), is( "abcded" ) ); assertThat( organisationUnit.getCode(), is( "ALFA" ) ); assertThat( organisationUnit.getPath(), is( "/abcded" ) ); assertThat( organisationUnit.getHierarchyLevel(), is( 1 ) );
assertTrue( status );
assertThat( fixedCacheFlag, is( false ) );
assertThat( paginationData.getFirstResult(), is( 0 ) ); assertThat( paginationData.getSize(), is( 200 ) );
assertTrue( AccessStringHelper.canRead( access ) ); assertFalse( AccessStringHelper.canRead( access_will_fail ) );
assertEquals( 1, objects.size() ); assertEquals( "abcdefghijA", objects.get( 0 ).getUid() );
assertThat( actualDimensionalItems, containsInAnyOrder( expectedItemsFound.toArray() ) );
assertEquals( Lists.newArrayList( 1, 4, 6 ), map.get( "A" ) ); assertEquals( Lists.newArrayList( 2, 5 ), map.get( "B" ) ); assertEquals( Lists.newArrayList( 3 ), map.get( "C" ) ); assertNull( map.get( "Z" ) );
assertThat( systemInstance.getUrl(), is( EVENTS_URL_WITH_SYNC_STRATEGY ) );
assertTrue( res ); assertEquals( 0, reservedValueStore.getCount() );
assertEquals( "select * from dataelement where name = \'Foo\'", actual ); assertEquals( "Hi Frank and welcome to Oslo", actual );
assertEquals( 1, pA.getDaysInPeriod() ); assertEquals( 31, pB.getDaysInPeriod() ); assertEquals( 91, pC.getDaysInPeriod() );
assertEquals( 9, params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems().size() ); assertEquals( 2, params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems().size() ); assertTrue( params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems().contains( rrA ) ); assertTrue( params.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems().contains( rrB ) );
assertEquals( versionA, versionService.getInitialVersion() );
assertFalse( required.contains( "TEXT" ) ); assertFalse( required.contains( "CURRENT_DATE" ) ); assertTrue( required.contains( "ORG_UNIT_CODE" ) ); assertFalse( required.contains( "SEQUENTIAL" ) ); assertEquals( 1, required.size() );
assertFalse( errors.isEmpty() );
assertEquals( expected, params.getCategoryOptions() );
assertEquals( anyDimensionalItems, ascList );
assertEquals( 2004, startOfYear.getYear() ); assertEquals( 3, startOfYear.getMonth() ); assertEquals( 20, startOfYear.getDay() ); assertEquals( 2030, startOfYear.getYear() ); assertEquals( 3, startOfYear.getMonth() ); assertEquals( 21, startOfYear.getDay() );
assertThat( actualResponse, is( not( nullValue() ) ) ); assertThat( actualResponse.getStatusCode(), is( FOUND ) );
assertThat( periodMap.size(), is( 2 ) ); assertThat( periodMap.get( MonthlyPeriodType.NAME ), hasSize( 3 ) ); assertThat( periodMap.get( QuarterlyPeriodType.NAME ), hasSize( 1 ) );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) );
assertNotNull( QueryUtils.parseValue( ValueType.class, "INTEGER" ) ); assertNotNull( QueryUtils.parseValue( ValueType.class, "TEXT" ) );
assertTrue( preheat.isEmpty() ); assertTrue( preheat.isEmpty( PreheatIdentifier.UID ) ); assertTrue( preheat.isEmpty( PreheatIdentifier.CODE ) );
assertEquals( 3, locales.size() ); assertTrue( locales.contains( "en_UK_en" ) ); assertTrue( locales.contains( "en_UK" ) ); assertTrue( locales.contains( "en_UK" ) ); assertEquals( 2, LocaleUtils.getLocaleFallbacks( l2 ).size() ); assertEquals( 1, LocaleUtils.getLocaleFallbacks( l3 ).size() );
assertEquals( 6, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertThat( event.getNotes(), hasSize( 5 ) ); assertThat( value, containsInAnyOrder( newArrayList( concat( notes, existingNotes ) ).stream() .map( Note::getNote ).toArray() ) );
assertThat( matrix.get( METADATA ).keySet(), hasSize( 6 ) ); assertThat( matrix.get( TRACKER ).keySet(), hasSize( 6 ) ); assertThat( matrix.get( AGGREGATE ).keySet(), hasSize( 6 ) );
assertThat( paginationData.getFirstResult(), is( 0 ) ); assertThat( paginationData.getSize(), is( 20 ) );
assertEquals( user.getUid(), userDto.getId() ); assertEquals( "test", userDto.getUsername() );
assertEquals( 3, map.size() ); assertEquals( "AttributeValueA", map.get( "A123456789A" ) ); assertEquals( "AttributeValueB", map.get( "A123456789B" ) ); assertEquals( null, map.get( "A123456789C" ) );
assertEquals( map.get( deA.getDimensionItem() ), deA ); assertEquals( map.get( inA.getDimensionItem() ), inA ); assertEquals( map.get( dsA.getDimensionItem() ), dsA );
assertEquals( "P123456789A", DimensionalObjectUtils.getSecondIdentifer( "A123456789A.P123456789A" ) ); assertNull( DimensionalObjectUtils.getSecondIdentifer( "A123456789A" ) );
assertFalse( isValidHexColor( "abcpqr" ) ); assertFalse( isValidHexColor( "#qwerty" ) ); assertFalse( isValidHexColor( "FFAB#O" ) ); assertTrue( isValidHexColor( "#FF0" ) ); assertTrue( isValidHexColor( "#FF0000" ) ); assertTrue( isValidHexColor( "FFFFFF" ) ); assertTrue( isValidHexColor( "ffAAb4" ) ); assertTrue( isValidHexColor( "#4a6" ) ); assertTrue( isValidHexColor( "abc" ) );
assertEquals( 2, dsA.getDataSetElements().size() ); assertEquals( 1, dsB.getDataSetElements().size() ); assertEquals( 2, deA.getDataSetElements().size() ); assertEquals( 1, deB.getDataSetElements().size() );
assertEquals( reservedValueA, res.get( 0 ) ); assertEquals( 1, res.size() );
assertEquals( 2014, startOfYear.getYear() ); assertEquals( 9, startOfYear.getMonth() ); assertEquals( 11, startOfYear.getDay() );
assertEquals( metadataVersion, metadataVersionStore.getVersionByKey( metadataVersionStore.getCurrentVersion().getId() ) ); assertNull( metadataVersionStore.getVersionByKey( nonExistingId ) );
assertTrue( dataValueIsZeroAndInsignificant( "0", de ) ); assertFalse( dataValueIsZeroAndInsignificant( "0", de ) );
assertTrue( filter.retain( organisationUnit ) );
assertEquals( "TEXTOSL1" + (new SimpleDateFormat( "YYYY" ).format( new Date() )), result );
assertEquals( expected, actual );
assertThat(subject.fetch( null ), hasSize(0));
assertEquals( 0, metadataVersionStore.getAllVersionsInBetween( new Date(), new Date() ).size() ); assertEquals( 2, allVersionsInBetween.size() ); assertEquals( metadataVersion2, allVersionsInBetween.get( 0 ) ); assertEquals( metadataVersion3, allVersionsInBetween.get( 1 ) ); assertEquals( 0, metadataVersionStore.getAllVersionsInBetween( new Date(), new Date() ).size() );
assertThat( event.getStoredBy(), is( FALLBACK_USERNAME ) ); assertThat( event.getDataValues(), hasItems( allOf( Matchers.hasProperty( "storedBy", is( FALLBACK_USERNAME ) ) ) ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 0 ) );
assertEquals( 2, mv.getDataDimensionItems().size() ); assertEquals( 1, mv.getDataDimensionItems().size() ); assertEquals( deB, mv.getDataDimensionItems().get( 0 ).getDataElement() );
assertEquals( 3d, ExpressionUtils.evaluateToDouble( expression, null ), DELTA ); assertEquals( 2d, ExpressionUtils.evaluateToDouble( expression, null ), DELTA ); assertEquals( 3.5, ExpressionUtils.evaluateToDouble( expression, null ), DELTA );
assertEquals( expected, unitD.getPath() );
assertThat( theNewDate, is( lessThan( anyInitialDate ) ) );
assertEquals( 6, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( 1, periodType.createPeriod().getPeriodSpan( periodType ) ); assertEquals( 2, new BiMonthlyPeriodType().createPeriod().getPeriodSpan( periodType ) ); assertEquals( 3, new QuarterlyPeriodType().createPeriod().getPeriodSpan( periodType ) ); assertEquals( 6, new SixMonthlyPeriodType().createPeriod().getPeriodSpan( periodType ) ); assertEquals( 12, new YearlyPeriodType().createPeriod().getPeriodSpan( periodType ) );
assertThat( result, hasSize( 3 ) ); assertThat( result, IsIterableContainingInAnyOrder.containsInAnyOrder( allOf( hasProperty( "code", is( "abc" ) ), hasProperty( "id", is( 123456L ) ) ), allOf( hasProperty( "code", is( "bce" ) ), hasProperty( "id", is( 123888L ) ) ), allOf( hasProperty( "code", is( "def" ) ), hasProperty( "id", is( 123999L ) ) ) ) );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 2 ) );
assertThat( fixedCacheFlag, is( true ) );
assertThat( p1.getIsoDate(), is( "202101" ) ); assertThat( p2.getIsoDate(), is( "2023Q1" ) ); assertThat( p3.getIsoDate(), is( "2020W20" ) );
assertEquals( 6, objects.size() );
assertEquals( 3, result.size() ); assertTrue( result.contains( 1 ) ); assertTrue( result.contains( 2 ) ); assertTrue( result.contains( 3 ) ); assertEquals( 50, result.size() ); assertTrue( result.contains( 4 ) ); assertTrue( result.contains( 5 ) ); assertTrue( result.contains( 52 ) ); assertTrue( result.contains( 53 ) );
assertThat( theNewDate, is( greaterThan( anyInitialDate ) ) );
assertNotNull( message ); assertEquals( expected, message.getMessage() );
assertThat( anyRootNode, is( notNullValue() ) ); assertThat( anyRootNode.getName(), is( equalTo( "any" ) ) ); assertThat( anyRootNode.getChildren(), hasSize( 1 ) ); assertThat( anyRootNode.getChildren().get( 0 ).isCollection(), is( true ) );
assertEquals( 17.5, avg, 0 ); assertEquals( -12.5, avg, 0);
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) );
assertThat( anyRootNode, is( notNullValue() ) ); assertThat( anyRootNode.getName(), is( equalTo( "any" ) ) ); assertThat( anyRootNode.getChildren(), hasSize( 1 ) ); assertThat( anyRootNode.getChildren().get( 0 ).isComplex(), is( true ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() ); assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertFalse( params.hasPeriods() ); assertFalse( params.hasPeriods() ); assertFalse( params.hasPeriods() ); assertTrue( params.hasPeriods() );
assertTrue( AnalyticsUtils.hasPeriod( row, 1 ) ); assertFalse( AnalyticsUtils.hasPeriod( row, 3 ) ); assertFalse( AnalyticsUtils.hasPeriod( row, 4 ) ); assertFalse( AnalyticsUtils.hasPeriod( row, 2 ) ); assertFalse( AnalyticsUtils.hasPeriod( row, 1 ) );
assertEquals( anyDimensionalItems, ascList );
assertNull( PeriodType.getByIndex( -1 ) ); assertNotNull( yearly ); assertEquals( new YearlyPeriodType(), PeriodType.getByIndex( yearlyIndex ) ); assertNull( PeriodType.getByIndex( 999 ) );
assertFalse(shouldStopSync);
assertThat( orgUnits.size(), is( 20 ) );
assertEquals( expected, unitD.getAncestors() );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( 5, summaries.getImported() ); assertEquals( 4, summaries.getUpdated() ); assertEquals( 8, summaries.getIgnored() ); assertEquals( 5, summaries.getDeleted() );
assertEquals( 1, ruleEffects.size() ); assertTrue( ruleAction instanceof RuleActionSendMessage ); assertEquals( "PNT-1", ruleActionSendMessage.notification() );
assertTrue( optionComboA.isDefault() );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 1, objects.size() );
assertEquals( time.toInstant( ZoneOffset.UTC ).toEpochMilli(), date.getTime() );
assertThat( theNewDate, is( lessThan( anyInitialDate ) ) );
assertEquals( "Org-Facility-Registry", appA.getUrlFriendlyName() ); assertNull( appB.getUrlFriendlyName() );
assertEquals( "DataElementA, DataElementB, DataElementC", actual ); assertEquals( null, ObjectUtils.join( null, ", ", null ) );
assertTrue( SqlView.isValidQueryValue( "east" ) ); assertTrue( SqlView.isValidQueryValue( "NUMBER" ) ); assertTrue( SqlView.isValidQueryValue( "2015-03-01" ) ); assertTrue( SqlView.isValidQueryValue( "John Doe" ) ); assertTrue( SqlView.isValidQueryValue( "anc_1" ) ); assertFalse( SqlView.isValidQueryValue( "../var/dir" ) ); assertFalse( SqlView.isValidQueryValue( "delete from table;" ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) );
assertThat( expirationTime, is( theExpectedExpirationTime ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( expected, IdentifiableObjectUtils.join( Lists.newArrayList( deA, deB, deC ) ) ); assertNull( IdentifiableObjectUtils.join( null ) ); assertNull( IdentifiableObjectUtils.join( Lists.newArrayList() ) );
assertEquals( expected, params.getItemOptions() );
assertThat( dataValues, is( notNullValue() ) ); assertThat( dataValues.keySet(), hasSize( 1 ) ); assertThat( dataValues.get( event1.getUid() ), hasSize( 0 ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) );
assertEquals( 3, pages.size() ); assertEquals( 0, pages.get( 0 )[0] ); assertEquals( 5, pages.get( 0 )[1] ); assertEquals( 5, pages.get( 1 )[0] ); assertEquals( 10, pages.get( 1 )[1] ); assertEquals( 10, pages.get( 2 )[0] ); assertEquals( 12, pages.get( 2 )[1] );
assertEquals( 2014, dateTimeUnit.getYear() ); assertEquals( 3, dateTimeUnit.getMonth() ); assertEquals( 20, dateTimeUnit.getDay() );
assertEquals( 1, objects.size() );
assertThat( row, is( nullValue() ) );
assertTrue( persistedQuery.isPlannedQuery() ); assertEquals( persistedQuery.getCriterions().size(), 1 ); assertEquals( persistedQuery.getFirstResult().intValue(), 0 ); assertEquals( persistedQuery.getMaxResults().intValue(), Integer.MAX_VALUE ); assertEquals( persistedQuery.getRootJunctionType(), Junction.Type.OR ); assertEquals( nonPersistedQuery.getCriterions().size(), 0 ); assertTrue( nonPersistedQuery.isPlannedQuery() );
assertTrue( AccessStringHelper.canWrite( access1 ) ); assertTrue( AccessStringHelper.canWrite( access2 ) ); assertFalse( AccessStringHelper.canWrite( access_will_fail ) );
assertEquals( 1, mv.getDataDimensionItems().size() );
assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) );
assertEquals( peA.getDaysInPeriod(), params.getDaysForAvgSumIntAggregation() ); assertEquals( totalDays, params.getDaysForAvgSumIntAggregation() );
assertEquals( retryContext, metadataRetryContext.getRetryContext() );
assertNotNull( ruleEffects ); assertEquals( ruleEffects.get( 0 ).data(), "10" );
assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );
assertEquals( 0, res.size() );
assertTrue( result ); assertFalse( result );
assertEquals( 1381, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 20, testDateTimeUnit.getDay() );
assertEquals( 1 , expressionList.size() );
assertEquals( "\\"Some \\"\\"special\\"\\" value\\"", SqlUtils.quote( "Some \\"special\\" value" ) ); assertEquals( "\\"Data element\\"", SqlUtils.quote( "Data element" ) );
assertEquals( "0 0 0 */1 * *", CronUtils.getDailyCronExpression( 0, 0 ) );
assertEquals( 3, partitions.size() );
assertThat( systemInstance.getUsername(), is( USERNAME ) ); assertThat( systemInstance.getPassword(), is( PASSWORD ) ); assertThat( systemInstance.getUrl(), is( EVENTS_URL ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() ); assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertEquals( "teiA", pd.getTeiA() );
assertEquals( 7.5, MathUtils.getAverage( Arrays.asList( 5.0, 5.0, 10.0, 10.0 ) ), DELTA );
assertEquals( null, versionService.getVersionData( "myNonExistingVersion" ) );
assertEquals( 0, res.size() ); assertEquals( count, reservedValueStore.getCount() );
assertEquals( 2, objects.size() );
assertEquals( "Forbidden", wm.getHttpStatus() ); assertEquals( 403, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "You don\'t have read access to \'ABCDEFGHIJ1\'.", wm.getMessage() );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) );
assertEquals( 3, map.get( "de1" + DIMENSION_SEP + "ou2" + DIMENSION_SEP + "pe1" ) ); assertEquals( 5, map.get( "de2" + DIMENSION_SEP + "ou3" + DIMENSION_SEP + "pe2" ) );
assertEquals( 5, objects.size() ); assertFalse( collectionContainsUid( objects, "deabcdefghA" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertEquals( new DateTime( 2014, 5, 18, 0, 0, 0, 0 ).toDate(), DateUtils.getMediumDate( "2014-05-18" ) ); assertEquals( new DateTime( 2015, 11, 3, 0, 0, 0, 0 ).toDate(), DateUtils.getMediumDate( "2015-11-03" ) ); assertNull( DateUtils.getMediumDate( null ) );
assertTrue( runnableArgumentCaptor.getValue() instanceof TrackerRuleEngineThread );
assertThat( expirationTime, is( theExpectedTtl ) );
assertEquals( "1 2 3 4 5 6", CronUtils.getCronExpression( "1", "2", "3", "4", "5", "6" ) );
assertEquals( startDate.toDate(), period.getStartDate() ); assertEquals( endDate.toDate(), period.getEndDate() );
assertThat( key, startsWith( "document/" ) ); assertEquals( 36, key.substring( "document/".length() ).length() ); assertThat( key, is( "document/myKey" ) );
assertEquals( "2014-05-18", DateUtils.getMediumDateString( date ) ); assertNull( DateUtils.getMediumDateString( null ) );
assertEquals( expected, unitD.getParentNameGraph( roots, false ) ); assertEquals( expected, unitD.getParentNameGraph( null, false ) );
assertEquals( dec_2015, paramsA.getEarliestStartDate() ); assertEquals( jan_2016.getStartDate(), paramsB.getEarliestStartDate() ); assertEquals( jan_2016.getStartDate(), paramsC.getEarliestStartDate() );
assertEquals( 1, objects.size() ); assertEquals( "abcdefghijB", objects.get( 0 ).getUid() );
assertFalse( res ); assertEquals( 0, reservedValueStore.getCount() );
assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) ); assertThat( aBooleanDataValue, is( normalizedBooleanValue ) );
assertThat( actualResult, is( false ) );
assertFalse( passwordIsValid( "Johnd1" ) ); assertFalse( passwordIsValid( "johndoe1" ) ); assertFalse( passwordIsValid( "Johndoedoe" ) ); assertTrue( passwordIsValid( "Johndoe1" ) );
assertEquals( expected, params.getAllDataSets() );
assertEquals( IdScheme.UID, schemes.getDataElementIdScheme() ); assertEquals( IdScheme.CODE, schemes.getOrgUnitIdScheme() ); assertEquals( IdScheme.CODE, schemes.getIdScheme() );
assertThat( dataQueryParams.getPeriods(), hasSize( 2 ) );
assertThat( actualTargetEntities, containsInAnyOrder( expectedTargetEntities.toArray() ) );
assertTrue( TextPatternValidationUtils.validateValueType( textTP, valueType ) ); assertTrue( TextPatternValidationUtils.validateValueType( numberTP, valueType ) ); assertFalse( TextPatternValidationUtils.validateValueType( textTP, valueType ) ); assertFalse( TextPatternValidationUtils.validateValueType( numberTP, valueType ) );
assertNotNull( message ); assertEquals( BaseNotificationMessageRenderer.SUBJECT_CHAR_LIMIT, message.getSubject().length() );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) );
assertThat( paginationData.getFirstResult(), is( 0 ) ); assertThat( paginationData.getSize(), is( 0 ) ); assertThat( paginationData.hasPagination(), is( false ) );
assertEquals( num, reservedValueStore.getCount() );
assertEquals( date1, DateUtils.min( date1, date2 ) ); assertEquals( date1, DateUtils.min( date2, date1 ) ); assertEquals( date1, DateUtils.min( date1, date3 ) ); assertEquals( date1, DateUtils.min( date3, date1 ) ); assertNull( DateUtils.max( date3, date4 ) );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 1382, testDateTimeUnit.getYear() ); assertEquals( 2, testDateTimeUnit.getMonth() ); assertEquals( 17, testDateTimeUnit.getDay() );
assertEquals( 50, s50.getSeconds() ); assertEquals( 1200, m20.getSeconds() ); assertEquals( 7200, h2.getSeconds() ); assertEquals( 1209600, d14.getSeconds() ); assertNull( DateUtils.getDuration( "123x" ) ); assertNull( DateUtils.getDuration( "1y" ) ); assertNull( DateUtils.getDuration( "10ddd" ) );
assertEquals( "Conflict", wm.getHttpStatus() ); assertEquals( 409, wm.getHttpStatusCode().intValue() ); assertEquals( Status.ERROR, wm.getStatus() ); assertEquals( "Missing required property \'teiA\'", wm.getMessage() );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghB" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) );
assertEquals( 2, objects.size() ); assertTrue( collectionContainsUid( objects, "abcdefghijA" ) ); assertTrue( collectionContainsUid( objects, "abcdefghijB" ) );
assertEquals( expected, DimensionalObjectUtils.sortKey( "b-c-a" ) );
assertNotNull( res );
assertThat( actualCacheControl.toString(), is( expectedCacheControl.toString() ) );
assertEquals( 7, dimensions.size() ); assertEquals( doF, dimensions.get( 0 ) ); assertEquals( doB, dimensions.get( 1 ) ); assertEquals( doD, dimensions.get( 2 ) ); assertEquals( doA, dimensions.get( 3 ) ); assertEquals( doC, dimensions.get( 4 ) ); assertEquals( doE, dimensions.get( 5 ) ); assertEquals( doG, dimensions.get( 6 ) );
assertTrue( indexA.getIndexName( AnalyticsTableType.DATA_VALUE ).startsWith( QUOTE + "in_quarterly_ax_2017_" ) ); assertTrue( indexB.getIndexName( AnalyticsTableType.DATA_VALUE ).startsWith( QUOTE + "in_ax_co_ax_2018_" ) ); assertTrue( indexC.getIndexName( AnalyticsTableType.DATA_VALUE ).startsWith( QUOTE + "in_YtbsuPPo010_ax_2019_" ) );
assertTrue( de.periodTypeIsValid() ); assertFalse( de.periodTypeIsValid() );
assertThat( expirationTime, is( valueOf( CACHE_10_MINUTES.toSeconds() ) ) );
assertEquals( "ABC,DEF", QueryUtils.parseSelectFields( fields ) );
assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertFalse(shouldStopSync);
assertEquals( 2, objects.size() );
assertThat( comments, hasSize( 10 ) );
assertEquals( 4, objects.size() ); assertTrue( collectionContainsUid( objects, "deabcdefghC" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghD" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghE" ) ); assertTrue( collectionContainsUid( objects, "deabcdefghF" ) );
assertThat(r.getStatus()).isEqualTo(200);
assertThat(response.name).isEqualTo(response1.name);
assertThat(response.getStatus()).isEqualTo(200); assertThat(responseCookies).hasSize(1).containsOnlyKeys("session"); assertThat(authUser).isEqualTo(user);
assertThat(r.getStatus()).isEqualTo(500);
assertThat(client).isEqualTo(client1);
assertThat(authenticator.authenticate(SimplePrincipal.of("CN=disabled"), true)).isEmpty();
assertThat(missingUser).isEmpty();
assertThat(secretSeriesById).isEmpty(); assertThat(secretSeriesById.get().currentVersion().get()).isEqualTo(contentId); assertThat(secretSeriesById.get().updatedBy()).isEqualTo("updater"); assertThat(secretSeriesById.get().updatedAt().toEpochSecond()).isEqualTo(now + 3600);
assertThat(response.getHeaders()).doesNotContainKey(SET_COOKIE);
assertThat(secretSeries).isEqualToIgnoringGivenFields(secretSeries1, "id"); assertThat(aclDAO.getSecretSeriesFor(jooqContext.configuration(), client2, secret1.getName())) .isEmpty(); assertThat(secretSeries).isEqualToIgnoringGivenFields(secretSeries1, "id");
assertThat(asJson(sanitizedSecret)) .isEqualTo(jsonFixture("fixtures/sanitizedSecret.json"));
assertThat(clients).containsOnly(client1, client2);
assertThat(membershipsTableSize()).isEqualTo(before - 1); assertThat(membershipsTableSize()).isEqualTo(before - 2);
assertThat(response).containsOnly(client1, client2);
assertThat(response.groups).isEmpty(); assertThat(response.clients).isEmpty();
assertThat(actual).isEqualTo(expected);
assertThat(Subtles.secureCompare(a, b)).isTrue();
assertThat(asJson(cursor)) .isEqualTo("{\\"name\\":\\"test-secret\\",\\"expiry\\":1234567}");
assertThat(aclDAO.getSanitizedSecretFor(client1, secret1.getName())) .isEmpty();
assertThat(response.groups).containsOnly(group1, group2); assertThat(response.secrets).containsOnly(SanitizedSecret.fromSecret(secret));
assertThat(healthCheck.check().isHealthy()).isTrue();
assertThat(secretSeriesDAO.getMultipleSecretSeriesByName(List.of("non-existent"))).isEmpty();
assertThat(tableSize()).isEqualTo(before - 1); assertThat(clientDAO.getClients()).containsOnly(client2);
assertThat(groupDAO.getGroupById(group1.getId())).contains(group1);
assertThat(secretDAO.getSecretById(series2.id())).isEqualTo(Optional.of(secret2b));
assertThat(response).containsOnly(secret1, secret2);
assertThat(authenticator.authenticate(simplePrincipal, true)).isPresent();
assertThat(factory.provide(request)).isEqualTo(user);
assertThat(response.name).isEqualTo(response1.name);
assertThat(factory.provide(request, httpServletRequest)).isEqualTo(client);
assertThat(secrets).containsOnly( SecretDeliveryResponse.fromSanitizedSecret(SanitizedSecret.fromSecret(firstSecret)), SecretDeliveryResponse.fromSanitizedSecret(SanitizedSecret.fromSecret(secondSecret)));
assertThat(response.getStatus()).isEqualTo(204);
assertThat(response.getEntity()).isEqualTo(expectedResponse);
assertThat(factory.provide(request, httpServletRequest)).isEqualTo(automationClient);
assertThat(response).isEqualTo(SecretDeliveryResponse.fromSecret(secret));
assertThat(response.size()).isEqualTo(2); assertThat(response).contains(secret1); assertThat(response).contains(secret2b);
assertThat(returnedUser).isEqualTo(user);
assertThat(user).isEqualTo(User.named("sysadmin"));
assertThat(validator.isValid("asdfasdfasdf", null)).isTrue();
assertThat(response).containsOnly(group1, group2);
assertThat(retrievedHash).isEqualTo(hashedPassword);
assertThat(asJson(sanitizedSecretWithGroups)) .isEqualTo(jsonFixture("fixtures/sanitizedSecretWithGroups.json"));
assertThat(response.groups).isEmpty(); assertThat(response.secrets).isEmpty();
assertThat(validName("hello!")).isFalse(); assertThat(validName("hello world")).isFalse(); assertThat(validName("$$ bill yall")).isFalse(); assertThat(validName("blah/../../../etc/passwd")).isFalse(); assertThat(validName("bad/I-am-secret.yml")).isFalse(); assertThat(validName(".almostvalid")).isFalse(); assertThat(validName("bad\\tI-am-secret.yml")).isFalse();
assertThat(httpResponse.code()).isEqualTo(404);
assertThat(aclDAO.getSecretSeriesFor(jooqContext.configuration(), client1, secret1.getName())) .isEmpty();
assertThat(clients).hasSize(1); assertThat(clients.iterator().next().getName()).isEqualTo("test-client");
assertThat(secretSeriesDAO.getSecretSeriesById(id).get().currentVersion()).isPresent(); assertThat(secretSeriesDAO.getSecretSeriesById(id)).isEmpty();
assertThat(secretDAO.getSecrets(null, null, null, null, null)).containsOnly(secret1, secret2b);
assertThat(response.getStatus()).isEqualTo(200); assertThat(resultCookie) .contains("HttpOnly") .contains("Secure") .contains("Path=/admin;") .contains("session=expired;");
assertThat(validator.isValid("", null)).isTrue();
assertThat(decodedLength(base64)).isEqualTo(5); assertThat(decodedLength(base64)).isEqualTo(5); assertThat(decodedLength(longerBase64)).isEqualTo(15); assertThat(decodedLength(longerBase64)).isEqualTo(15); assertThat(decodedLength("")).isZero();
assertThat(tableSize()).isEqualTo(before + 1); assertThat(names).contains("newGroup");
assertThat(response.getStatus()).isEqualTo(204);
assertThat(accessGrantsTableSize()).isEqualTo(before + 1);
assertThat(authenticator.authenticate(simplePrincipal, true)).isEqualTo(Optional.of(client));
assertThat(secretDAO.getSecretById(series2.id())).isEmpty();
assertThat(secret).isEmpty();
assertThat(secretDAO.getSecretsNameOnly()).containsOnly( new SimpleEntry<>(series1.id(), series1.name()), new SimpleEntry<>(series2.id(), series2.name()));
assertThat(Subtles.secureCompare(a, b)).isFalse();
assertThat(asJson(secretDetailResponse)) .isEqualTo(jsonFixture("fixtures/v2/secretDetailResponse.json"));
assertThat(response).isEqualTo(expectedResponse);
assertThat(secretContentDAO.getSecretContentById(secretContent1.id())).contains(secretContent1);
assertThat(secrets).isEmpty();
assertThat(tableSize()).isEqualTo(before - 1); assertThat(groupDAO.getGroups()).containsOnly(group2);
assertThat(groupDAO.getGroups()).containsOnly(group1, group2);
assertThat(resource.getClientByName(user, "client")).isEqualTo(client);
assertThat(secretDAO.countDeletedSecrets()).isEqualTo(1); assertThat(secretDAO.countDeletedSecrets()).isEqualTo(2);
assertThat(response.id).isEqualTo(client.getId()); assertThat(response.name).isEqualTo(client.getName()); assertThat(response.description).isEqualTo(client.getDescription()); assertThat(response.creationDate).isEqualTo(client.getCreatedAt()); assertThat(response.createdBy).isEqualTo(client.getCreatedBy()); assertThat(response.updateDate).isEqualTo(client.getUpdatedAt()); assertThat(response.updatedBy).isEqualTo(client.getUpdatedBy());
assertThat(authenticator.authenticate(certPrincipal, false)).isEqualTo(Optional.of(client));
assertThat(httpResponse.code()).isEqualTo(201); assertThat(location.getPath()).isEqualTo("/automation/v2/secrets/secret3"); assertThat(httpResponse.code()).isEqualTo(201); assertThat(location.getPath()).isEqualTo("/automation/v2/secrets/secret3");
assertThat(tableSize()).isEqualTo(before + 2); assertThat(actual).contains(expected1); assertThat(actual).contains(expected2);
assertThat(response.getStatus()).isEqualTo(201); assertThat(response.getMetadata().get(HttpHeaders.LOCATION)) .containsExactly(new URI("/admin/secrets/" + secret.getName() + "/partialupdate"));
assertThat(resource.retrieveSecret(user, "name")) .isEqualTo(SanitizedSecret.fromSecret(secret));
assertThat(response.getEntity()).hasSameClassAs(expectedClient); assertThat(actualResponse).isEqualToComparingFieldByField(expectedClient);
assertThat(actual).isEqualTo(expected);
assertThat( fromJson(jsonFixture("fixtures/v2/modifyClientRequest.json"), ModifyClientRequestV2.class)) .isEqualTo(modifyClientRequest);
assertThat(asJson(secretDetailResponse)) .isEqualTo(jsonFixture("fixtures/v2/secretDetailResponse.json"));
assertThat(healthCheck.check().isHealthy()).isTrue(); assertThat(healthCheck.check().isHealthy()).isTrue();
assertThat(httpResponse.code()).isEqualTo(404);
assertThat(secrets).hasSize(1); assertThat(secrets.iterator().next().name()).isEqualTo("test-secret");
assertThat(response.getStatus()).isEqualTo(200);
assertThat(validName("hello")).isTrue(); assertThat(validName("hello_world")).isTrue(); assertThat(validName("Hello-World")).isTrue(); assertThat(validName("foo.yml")).isTrue(); assertThat(validName("I_am_secret.yml")).isTrue(); assertThat(validName("I-am-secret.yml")).isTrue();
assertThat(userDAO.getHashedPassword("non-user")).isEmpty();
assertThat(clientDAO.getClientByName("client1")).contains(client1);
assertThat(response.id()).isEqualTo(secret.getId()); assertThat(response.secret()).isEqualTo(secret.getSecret()); assertThat(response.name()).isEqualTo(secret.getDisplayName()); assertThat(response.metadata()).isEqualTo(secret.getMetadata());
assertThat(blah.getStatus()).isEqualTo(204);
assertThat(secretSeriesDAO.getSecretSeriesByName("toBeDeleted_deleteSecretSeriesByName") .get() .currentVersion()) .isPresent(); assertThat( secretSeriesDAO.getSecretSeriesByName("toBeDeleted_deleteSecretSeriesByName")).isEmpty(); assertThat(secretSeriesDAO.getSecretSeriesById(id)).isEmpty();
assertThat(getCookieMap(response)).contains( entry(newCookie1.getName(), newCookie1.getValue()));
assertThat(response.size()).isEqualTo(0);
assertThat(asJson(automationSecretResponse)) .isEqualTo(jsonFixture("fixtures/automationSecretResponse.json")); assertThat(asJson(automationSecretResponseWithMetadata)) .isEqualTo(jsonFixture("fixtures/automationSecretResponseWithMetadata.json"));
assertThat(listing()).containsAll(expected);
assertThat(aclDAO.getSecretSeriesFor(jooqContext.configuration(), client1, "non-existent")) .isEmpty();
assertThat(fromJson(jsonFixture("fixtures/loginRequest.json"), LoginRequest.class)) .isEqualTo(loginRequest);
assertThat(missingUser).isEmpty();
assertThat(response.groups).containsOnly(group1, group2); assertThat(response.clients).containsOnly(client);
assertThat(clientDAO.getClientByName("non-existent")).isEmpty();
assertThat(validator.isValid("ab cd", null)).isFalse();
assertThat(accessGrantsTableSize()).isEqualTo(before - 1); assertThat(accessGrantsTableSize()).isEqualTo(before - 2);
assertThat(response.getStatus()).isEqualTo(200);
assertThat(aclDAO.getSanitizedSecretFor(client1, "non-existent")).isEmpty();
assertThat(response.size()).isEqualTo(2); assertThat(response).contains(secret1); assertThat(response).contains(secret2b);
assertThat(validator.isValid(null, null)).isTrue();
assertThat(clientDAO.getClientById(-1)).isEmpty();
assertThat(validator.isValid("a+/", null)).isTrue(); assertThat(validator.isValid("b-_", null)).isFalse();
assertThat(response.getHeaders()).doesNotContainKey(SET_COOKIE);
assertThat(factory.provide(request, httpServletRequest)).isEqualTo(client);
assertThat(response).isEqualTo(SecretDeliveryResponse.fromSecret(versionedSecret));
assertThat(response).containsExactly(secret2, secret1); assertThat(response).containsExactly(secret1); assertThat(response).isEmpty();
assertThat(user).isEmpty();
assertThat(missingUser).isEmpty();
assertThat(membershipsTableSize()).isEqualTo(before + 1);
assertThat(response.getSecret()).isEqualTo(secretBase64.getSecret());
assertThat(listing()).containsAll(expected);
assertThat(accessGrantsTableSize()).isEqualTo(before + 1);
assertThat(response.getStatus()).isEqualTo(201);
assertThat(validator.isValid("+#$", null)).isFalse();
assertThat(secretDAO.getSecretByName(name)).isEmpty();
assertThat(Subtles.secureCompare(a, b)).isFalse();
assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_CREATED);
assertThat(group1.getName()).isEqualTo("group1"); assertThat(group1.getDescription()).isEqualTo("desc1"); assertThat(group1.getCreatedBy()).isEqualTo("creator1"); assertThat(group1.getUpdatedBy()).isEqualTo("updater1");
assertThat(groupsForSecrets.size()).isEqualTo(2); assertThat(groupsForSecrets.get(secret1.getId())).containsOnly(group1, group2); assertThat(groupsForSecrets.get(secret2.getId())).containsOnly(group1, group2);
assertThat(user).isEqualTo(User.named("sysadmin"));
assertThat(s.getSecret()).isEqualTo("1"); assertThat(s.getSecret()).isEqualTo("1");
assertThat(secretDAO.getSecretByName(name)).contains(secret2b);
assertThat(result.isHealthy()).isFalse(); assertThat(result.getMessage()).isEqualTo("Unhealthy connection to database.");
assertThat(secrets).containsOnly(SecretDeliveryResponse.fromSanitizedSecret( SanitizedSecret.fromSecret(firstSecret)));
assertThat(asJson(clientDetailResponse)) .isEqualTo(jsonFixture("fixtures/v2/clientDetailResponse_LastSeenNull.json"));
assertThat(tableSize()).isEqualTo(before + 1);
assertThat(membershipsTableSize()).isEqualTo(before + 1);
assertThat(destination).exists(); assertThat(keyStore.isKeyEntry(alias)).isTrue(); assertThat(key).isInstanceOf(SecretKey.class); assertThat(secretKey.getEncoded()).hasSize(keySize/8);
assertThat(response).containsOnly(secret1); assertThat(response).containsOnly(secret2); assertThat(response).containsOnly(secret2);
assertThat(secretDAO.countSecretsDeletedBeforeDate(DateTime.now().plusDays(30))).isEqualTo( initialCount + 1);
assertThat(response.getCookies()).isSameAs(immutableResponseCookies); assertThat(response.getHeaders()).doesNotContainKey(SET_COOKIE);
assertEquals(PathUtils.getLength(path), PATH_LENGTH); assertEquals(PathUtils.getLength(emptyPath), 0); assertEquals(PathUtils.getLength(null), 0);
assertFalse(encLocRef.isValid()); assertEquals(encLocRef.getReturnCode(), EncoderReturnCode.LOCATION_IS_EMPTY);
assertNotNull(mockedLocRefPoiWithAccess, "Required input object is null!"); assertEquals(decLocRef.getID(), mockedLocRefPoiWithAccess.getID()); assertEquals(decLocRefs.get(0).getID(), mockedLocRefPoiWithAccess.getID());
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertFalse(locRef.isValid());
assertFalse(lrh.isValid()); assertEquals(lrh.getReturnCode(), EncoderReturnCode.LOCATION_NOT_CONNECTED);
assertNotNull(rawLocationReference); assertEquals(rawLocationReference.getID(), "2"); assertEquals(rawLocationReference.getLocationType(), LocationType.GEO_COORDINATES); assertTrue(rawLocationReference.isValid());
assertTrue(encLocRef.isValid()); assertTrue(lengtIn > lengthOut); assertTrue(pOffIn != offOut.getPositiveOffset(0)); assertTrue(nOffIn != offOut.getNegativeOffset(0)); assertTrue(locationLengthIn == locationLengthOut);
assertFalse(result.isValid()); assertSame(result.getReturnCode(), MISSING_DATA); assertNotNull(result.toString()); assertNull(result.getLocationReferenceData());
assertTrue(IteratorHelper.contains(fruits.iterator(), "Apple")); assertFalse(IteratorHelper.contains(fruits.iterator(), "Potato")); assertNotNull(e); assertNotNull(e); assertEquals(IteratorHelper.size(fruits.iterator()), LIST_SIZE, "Unexpected size delivered."); assertNotNull(e);
assertEquals(bearingPointCalculator.calculateBearingDestinationInDirection(lrpLine, 500, 0), bearingDestination.getEndNode().getGeoCoordinates());
assertFalse(result.isValid()); assertEquals(result.getReturnCode(), DecoderReturnCode.INVALID_LOCATION_TYPE); assertNull(result.getAccessPoint()); assertNull(result.getPointLocation()); assertNull(result.getPoiLine()); assertNull(result.getOrientation()); assertNull(result.getSideOfRoad()); assertTrue(result.getLocationLines().isEmpty()); assertFalse(result.hasNegativeOffset()); assertFalse(result.hasPositiveOffset());
assertTrue(decLocRef.isValid()); assertEquals(coords.getLatitudeDeg(), inputPoi.getLatitudeDeg()); assertEquals(coords.getLongitudeDeg(), inputPoi.getLongitudeDeg()); assertEquals(accessP.getLongitudeDeg(), node5.getLongitudeDeg()); assertEquals(accessP.getLatitudeDeg(), node5.getLatitudeDeg()); assertNotNull(accessP.toString());
assertEquals(bearingPointCalculator.calculateBearingDestinationAgainstDirection(lrpLine, bearingDistance, projectionAlongLine), lrpLine.getStartNode().getGeoCoordinates());
assertNotNull(rawLocationReference); assertEquals("1", rawLocationReference.getID()); assertEquals(LocationType.GEO_COORDINATES, rawLocationReference.getLocationType()); assertNotNull(geoCoordinates); assertEquals(geoCoordinates.getLongitudeDeg(), 1.5); assertEquals(geoCoordinates.getLatitudeDeg(), 2.5);
assertNotNull(lrp); assertEquals(lrp.getSequenceNumber(), 3); assertEquals(lrp.getLongitudeDeg(), 2); assertEquals(lrp.getLatitudeDeg(), 51); assertEquals(lrp.getBearing(), 180); assertEquals(lrp.getFRC(), FunctionalRoadClass.FRC_4); assertEquals(lrp.getFOW(), FormOfWay.SINGLE_CARRIAGEWAY); assertEquals(lrp.isLastLRP(),true);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertFalse(result.isValid()); assertSame(result.getReturnCode(), MISSING_DATA);
assertFalse(locationRef.get(0).isValid());
assertEquals(GeometryUtils.distance(DISTANCE_POINT_A.x, DISTANCE_POINT_A.y, DISTANCE_POINT_A.x, DISTANCE_POINT_A.y), 0.0); assertEquals(GeometryUtils.distance(DISTANCE_POINT_A.x, DISTANCE_POINT_A.y, DISTANCE_POINT_B.x, DISTANCE_POINT_B.y), DISTANCE_RESULT);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertTrue(ref.isValid()); assertSame(ref.getVersion(), OpenLRBinaryConstants.BINARY_VERSION_3);
assertNotNull(decodeData.getOffsets().toString());
assertNotNull(lrp); assertTrue(lrp.hasCoordinates()); assertTrue(lrp.hasLineAttributes()); assertFalse(lrp.hasPathAttributes()); assertEquals(coordinates.getLongitude(), 5.6); assertEquals(coordinates.getLatitude(), 53.6); assertEquals(lineAttributes.getBearing(), 165); assertEquals(lineAttributes.getFrc(), FRC.FRC_4); assertEquals(lineAttributes.getFow(), FOW.FOW_MULTIPLE_CARRIAGEWAY);
assertFalse(ref.isValid()); assertSame(ref.getReturnCode(), INVALID_OFFSET);
assertTrue(encLocRef.isValid()); assertEquals(coords.getLatitudeDeg(), inputPoi.getLatitudeDeg()); assertEquals(coords.getLongitudeDeg(), inputPoi.getLongitudeDeg()); assertTrue(offsets.getPositiveOffset(0) <= 0); assertTrue(offsets.getNegativeOffset(0) <= 0);
assertEquals(bearingPointCalculator.calculateBearingDestinationInDirection(lrpLine, bearingDistance, projectionAlongLine), lrpLine.getEndNode().getGeoCoordinates());
assertNotNull(pair.toString());
assertNotNull(rawLocationReference); assertEquals(rawLocationReference.getID(), "1"); assertEquals(rawLocationReference.getLocationType(), LocationType.POLYGON); assertTrue(rawLocationReference.isValid());
assertTrue(PathUtils.checkPathConnection(path)); assertFalse(PathUtils.checkPathConnection(notConnectedPath)); assertTrue(PathUtils.checkPathConnection(null)); assertTrue(PathUtils.checkPathConnection(emptyPath));
assertTrue(ref.isValid()); assertSame(ref.getVersion(), OpenLRBinaryConstants.LATEST_BINARY_VERSION);
assertTrue(result.isValid());
assertTrue(decLocRef.isValid()); assertNotNull(decLocRef.toString());
assertFalse(locationReference.isValid()); assertEquals(locationReference.getReturnCode(), OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);
assertEquals(PathUtils.findElementInQueue(pq, l1), elem1); assertEquals(PathUtils.findElementInQueue(pq, l4), elem4); assertEquals(PathUtils.findElementInQueue(new PriorityQueue<PQElem>(), l4), null);
assertFalse(decLocRef.isValid()); assertEquals(decLocRef.getReturnCode().getID(), DecoderReturnCode.NO_ROUTE_FOUND.getID()); assertNotNull(decLocRef.toString()); assertEquals(decLocRef.getID(), id);
assertFalse(result.isValid()); assertSame(result.getReturnCode().toString(), EncoderReturnCode.INVALID_LOCATION_TYPE.toString()); assertEquals(result.getID(), id); assertNotNull(result.toString());
assertEquals(bearingPointCalculator.calculateBearingDestinationAgainstDirection(lrpLine, 500, lrpLine.getLineLength()), bearingDestination.getStartNode().getGeoCoordinates());
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertEquals(bearingDestinationAgainstDirection, parentLine.getGeoCoordinateAlongLine(distanceAlongPredecessorLine));
assertEquals(GeometryUtils.bearingDifference(0, 355), 5); assertEquals(GeometryUtils.bearingDifference(0, 5), 5); assertEquals(GeometryUtils.bearingDifference(15, 20), 5); assertEquals(GeometryUtils.bearingDifference(20, 15), 5); assertEquals(GeometryUtils.bearingDifference(90, 180), 90); assertEquals(GeometryUtils.bearingDifference(345, 10), 25); assertEquals(GeometryUtils.bearingDifference(150, 220), 70);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertEquals(bearingPointCalculator.calculateBearingDestinationAgainstDirection(lrpLine, bearingDistance, lrpLine.getLineLength()), lrpLine.getGeoCoordinateAlongLine(lrpLine.getLineLength() - bearingDistance));
assertEquals(bearingDestinationInDirection, mapDatabase.getLine(4L).getGeoCoordinateAlongLine(distanceAlongSuccessorLine));
assertNotNull(line.toString());
assertEquals(PathUtils.constructPath(elem4), path); assertEquals(PathUtils.constructPath(null), emptyPath); assertNull(PathUtils.constructPath(elem5));
assertEquals(bearingPointCalculator.calculateBearingDestinationInDirection(lrpLine, bearingDistance, 0), lrpLine.getGeoCoordinateAlongLine(bearingDistance));
assertEquals(lrp1.getLfrc(), FunctionalRoadClass.FRC_5); assertEquals(lrp1.getBearing(), EXPECTED_BEARING); assertEquals(lrp1.getDistanceToNext(), EXPECTED_DNP);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);
assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);
assertTrue(ref.isValid()); assertSame(ref.getVersion(), OpenLRBinaryConstants.LATEST_BINARY_VERSION);
assertEquals(PopUpPosition.LEFT, mPopUpCoachMarkPresenter. getCorrectPositionOfCoachMarkIfDefaultFails(point, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.BOTTOM,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.BOTTOM, mCoachMarkPixelInfo));
assertEquals(false, mPopUpCoachMarkPresenter.checkIfRightPossible(point, mCoachMarkPixelInfo)); assertEquals(true, mPopUpCoachMarkPresenter.checkIfRightPossible(point, mCoachMarkPixelInfo)); assertEquals(true, mPopUpCoachMarkPresenter.checkIfRightPossible(point, mCoachMarkPixelInfo)); assertEquals(false, mPopUpCoachMarkPresenter.checkIfRightPossible(point, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.BOTTOM, mPopUpCoachMarkPresenter. getCorrectPositionOfCoachMarkIfDefaultFails(point, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.RIGHT,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.LEFT, mCoachMarkPixelInfo));
assertEquals(100, mPopUpCoachMarkPresenter.getActualTopMargin(100, mCoachMarkPixelInfo)); assertEquals(900, mPopUpCoachMarkPresenter.getActualTopMargin(900, mCoachMarkPixelInfo));
assertEquals(400, mPopUpCoachMarkPresenter.getActualTopMargin(400, mCoachMarkPixelInfo)); assertEquals(800, mPopUpCoachMarkPresenter.getActualTopMargin(800, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.TOP,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.TOP, mCoachMarkPixelInfo));
assertEquals(140, mPopUpCoachMarkPresenter.getMarginLeftForNotch (.75, 190, 50)); assertEquals(25, mPopUpCoachMarkPresenter.getMarginLeftForNotch (.25, 100, 25));
assertEquals(PopUpPosition.LEFT,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.LEFT, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.RIGHT, mPopUpCoachMarkPresenter. getCorrectPositionOfCoachMarkIfDefaultFails(point, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.BOTTOM,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.RIGHT, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.LEFT,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.NONE, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.LEFT,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.BOTTOM, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.RIGHT,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.RIGHT, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.RIGHT, mPopUpCoachMarkPresenter. findCoachMarkTextPopUpDisplayPosition(pointTop, pointBottom, PopUpPosition.RIGHT, mCoachMarkPixelInfo));
assertEquals(PopUpPosition.BOTTOM,mPopUpCoachMarkPresenter.getDisplayPosition(point, PopUpPosition.TOP, mCoachMarkPixelInfo));
assertEquals(true, mPopUpCoachMarkPresenter.checkIfLeftPossible(point, mCoachMarkPixelInfo)); assertEquals(true, mPopUpCoachMarkPresenter.checkIfLeftPossible(point, mCoachMarkPixelInfo)); assertEquals(false, mPopUpCoachMarkPresenter.checkIfLeftPossible(point, mCoachMarkPixelInfo)); assertEquals(true, mPopUpCoachMarkPresenter.checkIfLeftPossible(point, mCoachMarkPixelInfo));
assertEquals("{\\"calendar\\":\\"1985-07-03T18:00:00.042Z\\"}", actual);
assertNull(host);
assertEquals(exp, obj.keySet()); assertEquals(exp, newHashSet(obj.keys()));
assertEquals("[1,null]", obj.toString());
assertNull(array.remove(55));
assertEquals("{\\"localDate\\":\\"1985-07-03\\"}", actual);
assertTrue(o.isEmpty()); assertFalse(o.isEmpty());
assertSame(JSONObject.NULL, JSONObject.stringToValue("null")); assertEquals(true, JSONObject.stringToValue("true")); assertEquals(false, JSONObject.stringToValue("false")); assertEquals(42, JSONObject.stringToValue("42")); assertEquals(45.25, JSONObject.stringToValue("45.25")); assertEquals(-45.25, JSONObject.stringToValue("-45.25"));
assertEquals(Arrays.asList("foo","bar","baz"), bodies);
assertEquals("[\\n" + " 1,\\n" + " 2,\\n" + " 3\\n" + "]", sw.toString());
assertEquals("[\\n" + " 33.5,\\n" + " 42,\\n" + " \\"foo\\",\\n" + " true,\\n" + " \\"apple\\"\\n" + "]", array.toString(3));
assertEquals("foo", test.text); assertEquals(42, test.nmbr.intValue()); assertEquals("bar", test.another.text); assertEquals(666, test.another.nmbr.intValue()); assertEquals(null, test.another.another);
assertEquals("foo", test.text); assertEquals(42, test.nmbr); assertEquals("bar", test.another.text); assertEquals(666, test.another.nmbr); assertEquals(null, test.another.another);
assertTrue(i.equals(i)); assertFalse(i.equals(null)); assertFalse(i.equals(new Object()));
assertEquals("{}", new JsonNode("").toString()); assertEquals("{}", new JsonNode(null).toString());
assertEquals("{\\n" + " \\"foo\\": 42,\\n" + " \\"bar\\": true\\n" + "}", obj.toString(3));
assertTrue(remove instanceof JSONObject); assertEquals(o, remove); assertEquals(1, array.length()); assertEquals(null, array.remove(55));
assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("GET")); assertEquals(HttpMethod.GET, HttpMethod.GET); assertNotEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("PUT")); assertNotEquals(HttpMethod.GET, HttpMethod.PUT);
assertNotSame( cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new StringResponse(new MockRawResponse(), ""), String.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), r -> new BasicResponse(new MockRawResponse(), ""), Empty.class) ); assertEquals(2, client.invokes);
assertEquals(Arrays.asList("foo","baz"), bodies);
assertSame(e, u.getCause());
assertSame(obj, obj.accumulate("bar", 33)); assertEquals(2, obj.getJSONArray("bar").length()); assertEquals(42, obj.getJSONArray("bar").get(0)); assertEquals(33, obj.getJSONArray("bar").get(1));
assertEquals( newHashSet("foo", "bar", "baz"), newHashSet(names.toList()) );
assertEquals("{\\n" + " \\"key1\\": \\"value\\",\\n" + " \\"key2\\": null\\n" + "}", obj.toString(3));
assertEquals(Config.DEFAULT_MAX_PER_ROUTE, config.getMaxPerRoutes());
assertTrue(ChronoUnit.MILLIS.between(request.getCreationTime(), Instant.now()) < 10);
assertEquals(null, processed.get(0));
assertEquals(Config.DEFAULT_MAX_CONNECTIONS, config.getMaxConnections());
assertEquals(foo, Util.tryCast(foo, Foo.class).get()); assertEquals(false, Util.tryCast("foo", Foo.class).isPresent()); assertEquals(false, Util.tryCast(null, Foo.class).isPresent()); assertEquals(true, Util.tryCast(new Bar(), Foo.class).isPresent());
assertEquals(str, sw.toString());
assertEquals(Config.DEFAULT_SOCKET_TIMEOUT, config.getSocketTimeout());
assertTrue(r instanceof MockResponse);
assertEquals(Config.DEFAULT_CONNECT_TIMEOUT, config.getConnectionTimeout());
assertSame(obj, obj.append("bar", 42)); assertEquals(2, obj.getJSONArray("bar").length()); assertEquals(42, obj.getJSONArray("bar").get(0)); assertEquals(33, obj.getJSONArray("bar").get(1));
assertEquals("{\\"calendar\\":\\"1985-07-03T00:00:00Z\\"}", actual);
assertEquals("foo", test.text); assertEquals(42, test.nmbr); assertEquals("bar", test.another.text); assertEquals(666, test.another.nmbr); assertEquals(null, test.another.another);
assertEquals(Arrays.asList("foo","baz"), processed);
assertEquals(new JSONPointer("/foo/4/n~0t/bar/1").toString(), pointer.toString());
assertEquals("{\\"localDateTime\\":\\"1985-07-03T18:00:00.042\\"}", actual);
assertEquals(42, obj.remove("foo")); assertNull(obj.remove("nothing")); assertEquals("{\\"bar\\":true}", obj.toString());
assertSame(config.getAsyncClient(), config.getAsyncClient());
assertEquals("42", JSONObject.doubleToString(42)); assertEquals("42.5643", JSONObject.doubleToString(42.5643));
assertEquals(r1.getCreationTime(), r2.getCreationTime()); assertEquals(50L, ChronoUnit.MINUTES.between(r1.getCreationTime(), r3.getCreationTime()));
assertSame(obj, obj.increment("cool-beans")); assertEquals(1, obj.get("cool-beans")); assertEquals(4, obj.get("cool-beans"));
assertEquals(88, manager.getMaxTotal()); assertEquals(42, manager.getDefaultMaxPerRoute());
assertEquals("{\\"status\\":\\"OK\\",\\"message\\":\\"hive_1597818501335\\"}", jsonObject.toString());
assertEquals("{\\"date\\":\\"1985-07-03T00:00:00Z\\"}", actual);
assertEquals("\\"\\\\\\"foo\\\\\\"hoo\\"", JSONObject.quote("\\"foo\\"hoo"));
assertEquals("foo", test.text); assertEquals(42, test.nmbr.intValue()); assertEquals("bar", test.another.text); assertEquals(666, test.another.nmbr.intValue()); assertEquals(null, test.another.another);
assertEquals("#/foo/g%7Eh/baz", new JSONPointer("/foo/g~h/baz").toURIFragment());
assertEquals(HttpMethod.valueOf("GET"), HttpMethod.valueOf("get"));
assertNull(o.toJSONArray(new JSONArray())); assertEquals(new JSONArray(asList("bar", 42)), o.toJSONArray(new JSONArray(asList("foo", "baz")))); assertEquals(new JSONArray(asList(null, null)), new JSONObject().toJSONArray(new JSONArray(asList("foo", "baz"))));
assertNotEquals(h, j);
assertEquals(42, JSONObject.wrap(42)); assertEquals(42.5, JSONObject.wrap(42.5)); assertSame(JSONObject.NULL, JSONObject.wrap(null)); assertEquals(true, JSONObject.wrap(true));
assertTrue(obj1.similar(obj2)); assertFalse(obj1.similar(obj2));
assertEquals(true, Util.tryCast(build, CloseableHttpAsyncClient.class).isPresent());
assertEquals("{\\"foo\\":42}", obj.toString());
assertEquals(h, j);
assertSame(obj, obj.putOnce("foo", "bar")); assertEquals("bar", obj.getString("foo"));
assertEquals("33.5, 42, \\"foo\\", true, \\"apple\\"", array.join(", "));
assertEquals("[33.5,42,\\"foo\\",true,\\"apple\\"]", array.toString());
assertEquals("{\\n" + " \\"foo\\": 42,\\n" + " \\"bar\\": true\\n" + "}", sw.toString());
assertEquals("{}", actual);
assertEquals(0, compound.size());
assertEquals("bar", obj.query("/foo/0").toString());
assertTrue(o.isNull("foo")); assertTrue(o.isNull("foo")); assertFalse(o.isNull("foo"));
assertSame( cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class), cache.wrap(client).request(new HttpRequestNoBody(config, GET, "/"), null, Object.class) ); assertEquals(1, client.invokes);
assertThat(array.get(0), instanceOf(Double.class)); assertThat(array.get(1), instanceOf(Integer.class)); assertThat(array.get(2), instanceOf(String.class)); assertThat(array.get(3), instanceOf(JSONObject.class)); assertThat(array.get(4), instanceOf(JSONArray.class));
assertSame( cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null,null, Empty.class), cache.wrapAsync(client).request(new HttpRequestNoBody(config, GET, "/"), null,null, Empty.class) ); assertEquals(1, client.invokes);
assertEquals("{\\"key1\\":\\"value\\",\\"key2\\":null}", obj.toString());
assertEquals("{\\"date\\":\\"1985-07-03T18:00:00.042Z\\"}", actual);
assertEquals(str, sw.toString());
assertEquals("application/json", h.getFirst("Accepts")); assertEquals("application/xml", h.getFirst("Content-Type"));
assertEquals("{\\"text\\":null,\\"nmbr\\":null,\\"another\\":null}", om.writeValue(testMe));
assertEquals("42", JSONObject.numberToString(42)); assertEquals("42.5643", JSONObject.numberToString(42.5643f));
assertArrayEquals(null, JSONObject.getNames(new JSONObject())); assertArrayEquals(new String[]{"a","b"}, JSONObject.getNames(new JSONObject(of("a",1,"b",2))));
assertEquals("{\\"zonedDateTime\\":\\"1985-07-03T18:00:00.042Z\\"}", actual);
assertEquals(null, _Arrays.mapCollection((List<Integer>)null, Long.class, Long::valueOf)); assertArrayEquals(new Long[] {}, _Arrays.mapCollection(Arrays.<Integer>asList(), Long.class, Long::valueOf)); assertArrayEquals(new Long[] {1L, 2L, 3L}, _Arrays.mapCollection(Arrays.asList(1,2,3), Long.class, Long::valueOf));
assertEquals(CanVector.empty(), new CanVector<String>(0));
assertFalse(objectAssociation.hasChoices());
assertThat(method, is(not(nullValue()))); assertThat(actual, is(not(nullValue()))); assertThat(actual.isPresent(), is(true)); assertThat(actual.orElse(null), is(method));
assertThat(wrappingObject, is(not(domainObject))); assertThat(createProxyCalledWithDomainObject, is(wrappedObject));
assertEquals("test", t1.toString());
assertTrue(m1.equals(m2));
assertThat(specAbstractSomeDomainObject.satisfiesTranslatable(null), is(nullValue()));
assertEquals(null, _Arrays.emptyToNull(null)); assertEquals(null, _Arrays.emptyToNull(new Integer[] {})); assertArrayEquals(new Integer[] {1}, _Arrays.emptyToNull(new Integer[] {1}));
assertEquals("first", title);
assertThat(specAbstractSomeDomainObject.satisfiesTranslatable(null), is(not(nullValue())));
assertEquals(null, _Arrays.map((Integer[])null, Long::valueOf)); assertArrayEquals(new Long[] {}, _Arrays.map(new Integer[] {}, Long::valueOf)); assertArrayEquals(new Long[] {1L, 2L, 3L}, _Arrays.map(new Integer[] {1, 2, 3}, Long::valueOf));
assertFalse(m1.isGreaterThanZero());
assertThat(wrappingObject, is(domainObject)); assertThat(createProxyCalledWithDomainObject, is(nullValue()));
assertThat(Reasons.coalesce("foobar", null), is("foobar"));
assertThat(fieldNameCandidates, is(not(nullValue()))); assertThat(fieldNameCandidates.size(), is(2)); assertThat(fieldNameCandidates.get(0), is("firstName")); assertThat(fieldNameCandidates.get(1), is("_firstName"));
assertEquals("add empty string", name, t1.toString()); assertEquals("append simple string", name, t1.toString()); assertEquals("append empty string with delimiter", name, t1.toString()); assertEquals("append null with delimiter", name, t1.toString()); assertEquals("append string with delimiter", name, t1.toString());
assertThat(specAbstractSomeDomainObject.satisfiesTranslatable(new String()), is(nullValue()));
assertEquals(100.0, m1.doubleValue(), 0.0);
assertArrayEquals( new Integer[] {1, 2, 3}, Stream.of(1,2,3) .collect(_Arrays.toArray(Integer.class, 3))); assertArrayEquals( new Integer[] {1, 2, 3, null}, Stream.of(1,2,3) .collect(_Arrays.toArray(Integer.class, 4)));
assertArrayEquals(new Integer[] {0, 2, 3}, output);
assertThat(permissionsByRole.get("role1"), is(equalTo((Set<String>)_Sets.of("foo","bar")))); assertThat(permissionsByRole.get("role2"), is(equalTo((Set<String>)_Sets.of("fiz:x","bip:bop:*")))); assertThat(permissionsByRole.get("role3"), is(equalTo((Set<String>)_Sets.of("*")))); assertThat(permissionsByRole.size(), is(3));
assertEquals(p1, p2); assertNotSame(p1, p2); assertFalse(p1.equals(p3));
assertThat(createProxyCalledWithDomainObject, is(domainObject)); assertThat(createProxyCalledWithSyncControl, is(not(nullValue())));
assertArrayEquals(new Integer[] {0, 1, 2}, output);
assertFalse(m1.equals(m2));
assertEquals("Test", t.toString());
assertEquals(100.16, m1.doubleValue(), 0.0);
assertEquals(null, _Arrays.inferComponentTypeIfAny(null)); assertEquals(int.class, _Arrays.inferComponentTypeIfAny(int[].class)); assertEquals(Integer.class, _Arrays.inferComponentTypeIfAny(Integer[].class));
assertThat(fieldNameCandidates, is(not(nullValue()))); assertThat(fieldNameCandidates.size(), is(0));
assertEquals(Optional.empty(), Bookmark.parse(null)); assertEquals(Optional.empty(), Bookmark.parse("")); assertEquals(Optional.empty(), Bookmark.parse("a")); assertEquals(Optional.empty(), Bookmark.parse("a:")); assertEquals(Optional.empty(), Bookmark.parse(":")); assertEquals(Optional.empty(), Bookmark.parse(":b"));
assertArrayEquals(new Integer[]{}, _Arrays.combine(new Integer[]{})); assertArrayEquals(new Integer[]{1, 2}, _Arrays.combine(new Integer[]{1, 2})); assertArrayEquals(new Integer[]{1, 2, 3}, _Arrays.combine(new Integer[]{1, 2}, 3)); assertArrayEquals(new Integer[]{1, 2, 3, 4}, _Arrays.combine(new Integer[]{1, 2}, 3, 4));
assertEquals(1, set.size());
assertArrayEquals( new Integer[] {1, 2, 3}, _Arrays.toArray(Samples.iterable(1, 2, 3), Integer.class) );
assertThat(Reasons.coalesce((String) null), is(nullValue()));
assertEquals(null, _Arrays.mapCollection((List<Integer>)null, Long::valueOf)); assertArrayEquals(new Long[] {}, _Arrays.mapCollection(Arrays.<Integer>asList(), Long::valueOf)); assertArrayEquals(new Long[] {1L, 2L, 3L}, _Arrays.mapCollection(Arrays.asList(1,2,3), Long::valueOf));
assertThat(facet, is(nullValue()));
assertEquals(LinkedHashSet.class, set.getClass());
assertThat(fieldNameCandidates, is(not(nullValue()))); assertThat(fieldNameCandidates.size(), is(0));
assertThat(facet, is(not(nullValue()))); assertThat(facet instanceof NotContributedFacetDerivedFromDomainServiceFacet, is(true)); assertThat(facetDerivedFromDomainServiceFacet.getNatureOfService(), equalTo(NatureOfService.DOMAIN));
assertTrue(m1.isGreaterThanZero());
assertFalse(objectAssociation.isMandatory());
assertNull(specificationCache.get(Customer.class.getName()));
assertTrue(m1.hasSameCurrency(m2)); assertFalse(m1.hasSameCurrency(m3));
assertThat(specAbstractSomeDomainObject.satisfiesTranslatable(Integer.valueOf(1)), is(nullValue()));
assertThat(facet, is(nullValue()));
assertTrue(m1.isEqualTo(m2));
assertArrayEquals(new Number[]{1L, 2L}, _Arrays.combineWithExplicitType(Number.class, 1L, 2L));
assertTrue(objectAssociation.isNotPersisted());
assertEquals(CopyOnWriteArraySet.class, set.getClass());
assertEquals("", t.toString());
assertEquals(1, set.size()); assertEquals(0, emptySet.size());
assertTrue(Color.BLACK.isLessThan(Color.WHITE));
assertTrue(m1.isZero());
assertThat(map.size(), is(0));
assertEquals(null, result.getReason());
assertFalse(m1.isEqualTo(m2));
assertEquals(null, _Arrays.map((Integer[])null, Long.class, Long::valueOf)); assertArrayEquals(new Long[] {}, _Arrays.map(new Integer[] {}, Long.class, Long::valueOf)); assertArrayEquals(new Long[] {1L, 2L, 3L}, _Arrays.map(new Integer[] {1, 2, 3}, Long.class, Long::valueOf));
assertEquals("a", bookmark.getObjectType()); assertEquals("b:c", bookmark.getIdentifier());
assertThat(Reasons.coalesce(null, "yada"), is("yada"));
assertThat(facet, is(nullValue()));
assertThat(specAbstractSomeDomainObject.satisfies(new SomeOtherDomainObject()), is(not(nullValue())));
assertFalse(m1.equals(m2));
assertEquals("", t.toString());
assertTrue(objectAssociation.isMandatory());
assertTrue(m1.isLessThanZero());
assertFalse(m1.isZero());
assertEquals(330.0, m3.doubleValue(), 0.0);
assertArrayEquals( new Integer[] {1, 2, 3}, _Arrays.toArray(Arrays.asList(1,2,3), Integer.class) );
assertThat(permissionsByRole.get("role1"), is(equalTo((Set<String>)_Sets.of("foo","bar")))); assertThat(permissionsByRole.get("role2"), is(equalTo((Set<String>)_Sets.of("fiz:x","bip:bop:*")))); assertThat(permissionsByRole.get("role3"), is(equalTo((Set<String>)_Sets.of("*")))); assertThat(permissionsByRole.size(), is(3));
assertThat(specAbstractSomeDomainObject.satisfies(new SomeDomainObject()), is(nullValue()));
assertEquals("Black", Color.BLACK.title()); assertEquals("White", Color.WHITE.title()); assertEquals("#FE231D", new Color(0xfe231D).title());
assertEquals(null, reason.getReason());
assertFalse(m1.isLessThanZero());
assertThat(fieldNameCandidates, is(not(nullValue()))); assertThat(fieldNameCandidates.size(), is(0));
assertNull(specificationCache.getByObjectType(ObjectSpecId.of("CUS")));
assertThat(facet, is(nullValue()));
assertArrayEquals(new Integer[] {}, _Arrays.toArray(_Sets.of(), Integer.class)); assertArrayEquals(new Integer[] {0, 1, -1, 3}, _Arrays.toArray(_Sets.of(0, 1, -1, 3), Integer.class));
assertEquals(BigDecimal.valueOf(10000, 2), m1.getAmount());
assertTrue(objectAssociation.hasChoices());
assertFalse(m2.isLessThan(m1));
assertFalse(objectAssociation.isNotPersisted());
assertThat(fieldNameCandidates, is(not(nullValue()))); assertThat(fieldNameCandidates.size(), is(2)); assertThat(fieldNameCandidates.get(0), is("firstName")); assertThat(fieldNameCandidates.get(1), is("_firstName"));
assertEquals(ConcurrentHashMap.KeySetView.class, set.getClass());
assertEquals("ABC Co.", t.toString());
assertEquals(100.15, m1.doubleValue(), 0.0);
assertThat(Enums.getEnumNameFromFriendly("Anywhere"), is("ANYWHERE")); assertThat(Enums.getEnumNameFromFriendly("All Tables"), is("ALL_TABLES"));
assertThat(specAbstractSomeDomainObject.satisfies(new SomeOtherDomainObject()), is(nullValue()));
assertTrue(p1.isLessThan(p3)); assertFalse(p3.isLessThan(p1)); assertFalse(p1.isLessThan(p1));
assertArrayEquals(new Integer[] {1, 2, 3}, output);
assertThat(map.get("foo"), is("bar")); assertThat(map.get("foz"), is("boz")); assertThat(map.size(), is(2));
assertThat(method, is(nullValue())); assertThat(actual, is(not(nullValue()))); assertThat(actual.isPresent(), is(false)); assertThat(actual.orElse(null), is(nullValue()));
assertThat(Reasons.coalesce("foobar", null, "yada"), is("foobar; yada"));
assertEquals(Optional.empty(), _Arrays.get(null, 99)); assertEquals(Optional.empty(), _Arrays.get(new Integer[] {}, 0)); assertEquals(Optional.empty(), _Arrays.get(new Integer[] {1}, 99)); assertEquals(Optional.of(1), _Arrays.get(new Integer[] {1}, 0));
assertTrue(objectAssociation.isNotPersisted());
assertThat(Reasons.coalesce("foobar", "yada"), is("foobar; yada"));
assertThat(specAbstractSomeDomainObject.satisfies(null), is(nullValue()));
assertEquals(HashSet.class, set.getClass());
assertThat(Reasons.coalesce("yada"), is("yada"));
assertThat(facet, is(nullValue()));
assertThat(specAbstractSomeDomainObject.satisfiesTranslatable(Integer.valueOf(1)), is(not(nullValue())));
assertThat(Enums.getFriendlyNameOf(Where.ANYWHERE), is("Anywhere")); assertThat(Enums.getFriendlyNameOf(Where.ALL_TABLES), is("All Tables"));
assertEquals(200.0, m3.doubleValue(), 0.0);
assertEquals("First", title);
assertThat(Reasons.coalesce(), is(nullValue()));
assertEquals(TreeSet.class, set.getClass());
assertTrue(p1.isEqualTo(p2)); assertFalse(p1.isEqualTo(p3));
assertArrayEquals( new Integer[] {1, 2, 3}, Stream.of(1,2,3) .collect(_Arrays.toArray(Integer.class)));
assertEquals(TreeSet.class, set.getClass());
assertFalse(_Arrays.testAnyMatch(a, b, Objects::equals)); assertEquals(i, j); assertTrue(_Arrays.testAnyMatch(a, b, Objects::equals)); assertTrue(_Arrays.testAnyMatch( new Integer[] {0, 1, 2, 9}, new Integer[] {1, 2, 3, 9}, Objects::equals)); assertFalse(_Arrays.testAnyMatch( new Integer[] {0, 1, 2, 3}, new Integer[] {1, 2, 3, 4}, Objects::equals));
assertThat(specAbstractSomeDomainObject.satisfies(null), is(not(nullValue())));
assertFalse(_Arrays.isArrayType(null)); assertFalse(_Arrays.isArrayType(Integer.class)); assertFalse(_Arrays.isArrayType(Enum.class)); assertFalse(_Arrays.isArrayType(Collection.class)); assertFalse(_Arrays.isArrayType(List.class)); assertFalse(_Arrays.isArrayType(Set.class)); assertTrue(_Arrays.isArrayType(int[].class)); assertTrue(_Arrays.isArrayType(int[][].class)); assertTrue(_Arrays.isArrayType(Object[][].class));
assertEquals("ABC Co.", t1.toString());
assertThat(facet, is(not(nullValue()))); assertThat(facet instanceof NotInServiceMenuFacetDerivedFromDomainServiceFacet, is(true)); assertThat(facetDerivedFromDomainServiceFacet.getNatureOfService(), equalTo(NatureOfService.DOMAIN));
assertTrue(m1.isLessThan(m2));
assertEquals(100.15, m1.doubleValue(), 0.0);
assertArrayEquals(new Integer[]{1}, _Arrays.combine(1)); assertArrayEquals(new Integer[]{1, 2}, _Arrays.combine(1, 2)); assertArrayEquals(new Integer[]{1, 2, 3}, _Arrays.combine(1, 2, 3)); assertArrayEquals(new Integer[]{1, 2, 3, 4}, _Arrays.combine(1, 2, 3, 4));
assertEquals("a", bookmark.getObjectType()); assertEquals("b", bookmark.getIdentifier());
assertEquals("java:comp/env/q1", argument.getValue().getQueue()); assertEquals("bla", argument.getValue().getText()); assertEquals("java:comp/env/q2", argument.getValue().getQueue()); assertEquals("blup", argument.getValue().getText());
assertThat(resultInStorage).hasSize(1); assertThat(first.getText()).isEqualTo("my awesome message \\uF609"); assertThat(first.getProps()).isEmpty();
assertThat(resultInStorage).hasSize(1); assertThat(first.getText()).isEqualTo("test"); assertThat(first.getQueue()).isEqualTo("myQueue"); assertThat(first.getProps()).hasSize(1).contains(entry("propA", "valA"));
assertThat(sut.getMessagesAfter(0)).isEmpty();
assertThat(result.getText()).isEqualTo("test"); assertThat(result.getStringProperty("mykey1")).isEqualTo("myval1"); assertThat(result.getStringProperty("mykey2")).isEqualTo("myval2"); assertThat(Collections.list(result.getPropertyNames())).hasSize(2);
assertThat(result.getText()).isEqualTo("test"); assertThat(Collections.list(result.getPropertyNames())).isEmpty();
assertThat(result, not(instanceOf(CachingConnectionFactory.class)));
assertThat(resultInStorage).hasSize(1); assertThat(first.getText()).isNotNull(); assertThat(first.getProps()).isEmpty();
assertThat(resultInStorage).hasSize(1); assertThat(first.getText()).isEqualTo("my awesome message"); assertThat(first.getProps()).isEmpty();
assertThat(sut.getStats().getPendingCount()).isEqualTo(1); assertThat(sut.getStats().getPendingCount()).isEqualTo(0);
assertFalse(persons.contains(person1)); assertTrue(persons.contains(person2));
assertEquals(Arrays.asList("1970-01-01", "1970-01-02", "1970-01-02"), getOutputStrings());
assertEquals(Arrays.asList("1970-01-01\\t1\\tfirst", "1970-01-02\\t2\\tsecond"), getOutputStrings());
assertEquals(Arrays.asList("10", "12", "22"), getOutputStrings());
assertEquals(Arrays.asList("0", "10", "12", "22"), getOutputStrings());
assertNotNull(e);
assertEquals(2, results.size()); assertEquals(Arrays.asList(new Tuple("first"), new Tuple("second")), results);
assertEquals(Arrays.asList(new Tuple(get), new Tuple(orElse)), results);
assertTrue(tokensString.contains(X.class.getName())); assertTrue(tokensString.contains(Y.class.getName())); assertTrue(tokensString.contains(X.class.getName())); assertTrue(tokensString.contains(Y.class.getName())); assertTrue(tokensString.contains(Z.class.getName()));
assertEquals(Arrays.asList("key1\\tvalue1"), outputStrings);
assertEquals(Arrays.asList("115200000", "0", "115200000", "asdf"), getOutputStrings());
assertEquals(Arrays.asList("115200000", "0", "115200000", "asdf"), getOutputStrings());
assertEquals(Arrays.asList("0", "115200000", "asdf"), getOutputStrings());
assertEquals(Arrays.asList("115200000", "0", "115200000"), getOutputStrings());
assertEquals(2, methodNodes.size()); assertEquals("method1", methodNodes.get(0).name); assertEquals("method2", methodNodes.get(1).name);
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Runnable")); assertTrue(info.getInterfaces().contains("java/util/concurrent/Future")); assertTrue(info.isInterface());
assertTrue(modifiedMainClassContent.length > classContent.length);
assertNull(info);
assertTrue(outputContent.length > inputContent.length);
assertEquals(var1.getType(), Type.LONG_TYPE); assertEquals(var1.getIndex(), 1); assertTrue(var1.isUsed()); assertEquals(var2.getType(), Type.BOOLEAN_TYPE); assertEquals(var2.getIndex(), 3); assertTrue(var2.isUsed());
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("fake/java/lang/Runnable")); assertTrue(info.getInterfaces().contains("fake/java/util/concurrent/Future")); assertTrue(info.isInterface());
assertEquals("fake/java/lang/Number", info.getSuperClassName()); assertEquals(1, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("fake/java/lang/Comparable")); assertFalse(info.isInterface());
assertEquals(1, methodNodes.size()); assertEquals("syncTest", methodNodes.get(0).name);
assertEquals("java/lang/Number", info.getSuperClassName()); assertEquals(1, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Comparable")); assertFalse(info.isInterface());
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Runnable")); assertTrue(info.getInterfaces().contains("java/util/concurrent/Future")); assertTrue(info.isInterface());
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("fake/java/lang/Comparable")); assertTrue(info.getInterfaces().contains("fake/java/io/Serializable")); assertFalse(info.isInterface());
assertEquals("method1", methodNode.name);
assertEquals(var.getType(), Type.LONG_TYPE); assertEquals(var.getIndex(), 1); assertTrue(var.isUsed());
assertEquals(1, methodNodes.size()); assertEquals("method1", methodNodes.get(0).name);
assertNull(info.getSuperClassName()); assertTrue(info.getInterfaces().isEmpty()); assertFalse(info.isInterface());
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Comparable")); assertTrue(info.getInterfaces().contains("java/io/Serializable")); assertFalse(info.isInterface());
assertEquals(var.getType(), Type.getObjectType(classNode.name)); assertEquals(var.getIndex(), 0); assertTrue(var.isUsed());
assertEquals(1, methodNodes.size()); assertEquals("method2", methodNodes.get(0).name);
assertEquals("java/lang/Object", info.getSuperClassName()); assertEquals(2, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Comparable")); assertTrue(info.getInterfaces().contains("java/io/Serializable")); assertFalse(info.isInterface());
assertNull(info);
assertEquals(2, reqStackCount);
assertEquals(1, methodNodes.size()); assertEquals("echo", methodNodes.get(0).name);
assertNull(info.getSuperClassName()); assertTrue(info.getInterfaces().isEmpty()); assertFalse(info.isInterface());
assertEquals("java/lang/Number", info.getSuperClassName()); assertEquals(1, info.getInterfaces().size()); assertTrue(info.getInterfaces().contains("java/lang/Comparable")); assertFalse(info.isInterface());
assertNull(info);
assertEquals(1, reqStackCount);
assertEquals(new BigDecimal(10), new Money(10).getAmount());
assertEquals(new Money(5), m2.subtract(m1));
assertTrue(m2.isGreaterThanOrEqual(m2)); assertTrue(m2.isGreaterThanOrEqual(m1));
assertEquals(new Money(25), m1.add(m2));
assertEquals( "SubRound{RoundState=null, round=null, timestamp=0}", new SubRound(null, null, 0).toString()); assertEquals( "SubRound{RoundState=SubRoundType{START_ROUND, order=0, duration:0}, round=Round{index=0, start timestamp=0}, timestamp=123}", new SubRound(new Round(), RoundState.START_ROUND, 123).toString());
assertThat(feature.equals(featureToCompare), is(false));
assertThat(propertyManager.getCustomPageTitle(), is("Cluecumber Report"));
assertThat(element.getEndTimeString(), endsWith(":47:03"));
assertThat(element.getEndDateTime().format(DateTimeFormatter.ISO_DATE_TIME), is("2019-04-11T10:47:03.668Z"));
assertThat(e.get(0).getScenarioIndex(), is(0)); assertThat(e.get(1).getScenarioIndex(), is(0)); assertThat(e.get(2).getScenarioIndex(), is(0)); assertThat(e.get(0).getScenarioIndex(), is(2)); assertThat(e.get(1).getScenarioIndex(), is(1)); assertThat(e.get(2).getScenarioIndex(), is(3));
assertThat(element.getStartTimeString(), endsWith(":00:23"));
assertThat(resultMatch.hasOutputs(), is(false)); assertThat(resultMatch.hasOutputs(), is(true));
assertThat(docString.returnWithClickableLinks(), is(""));
assertThat(allStepsPageCollection.getTotalNumberOfSteps(), is(2));
assertThat(step.returnNameWithArgumentPlaceholders(), is("This is a name with an {} inside."));
assertThat(urlFriendlyName, is(not(equalTo(""))));
assertThat(color, is("rgba(0, 255, 255, 1.000)"));
assertThat(customParameter.isUrl(), is(false));
assertThat(embedding.getData(), is("123")); assertThat(embedding.getFilename(), is("attachment001.png"));
assertThat(allStepsPageCollection.getTotalNumberOfSteps(), is(2)); assertThat(allStepsPageCollection.getTotalNumberOfFailed(), is(1)); assertThat(allStepsPageCollection.getTotalNumberOfPassed(), is(1)); assertThat(allStepsPageCollection.getTotalNumberOfSkipped(), is(1));
assertThat(embedding.isPlainText(), is(true));
assertThat(allScenariosPageCollection.hasFailedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasFailedScenarios(), is(true)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(false));
assertThat(tagStat.getPassed(), is(0)); assertThat(tagStat.getFailed(), is(0)); assertThat(tagStat.getSkipped(), is(5));
assertThat(color, is("rgba(0, 255, 0, 1.000)"));
assertThat(times.getMinimumTimeScenarioIndex(), is(1));
assertThat(resultMatch.getStatusString(), is("skipped"));
assertThat(allScenariosPageCollection.getTotalDurationString(), is("0m 05s 000ms"));
assertThat(allTagsPageCollection.getTotalNumberOfTags(), is(3)); assertThat(allTagsPageCollection.getTotalNumberOfFailed(), is(1)); assertThat(allTagsPageCollection.getTotalNumberOfPassed(), is(1)); assertThat(allTagsPageCollection.getTotalNumberOfSkipped(), is(1));
assertThat(allScenariosPageCollection.hasFailedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasFailedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(true)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(false));
assertThat(template.getName(), is("MyTemplate"));
assertThat(tagStats.size(), is(0));
assertThat(allScenariosPageCollection.hasCustomParameters(), is(false)); assertThat(allScenariosPageCollection.hasCustomParameters(), is(true));
assertThat(propertyManager.getCustomParametersFile(), is(customParametersFile)); assertThat(customParameters.size(), is(2)); assertThat(customParameters.get("Test_Property"), is("some value")); assertThat(customParameters.get("Test_Property2"), is("another value"));
assertThat(totalDuration, is(0L));
assertThat(element.getScenarioIndex(), is(0)); assertThat(element.getScenarioIndex(), is(0));
assertThat(linkedProperties.entrySet().size(), is(0));
assertThat(processedContent, is(""));
assertThat(linkedProperties.containsKey("key"), is(false)); assertThat(linkedProperties.containsKey("key"), is(true));
assertThat(times.getMinimumTimeString(), is("0m 00s 100ms"));
assertThat(allStepsPageCollection.getMaximumTimeFromStep(step), is("0m 00s 000ms"));
assertThat(feature.equals(featureToCompare), is(true));
assertThat(allScenariosPageCollection.hasFailedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasFailedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasPassedScenarios(), is(false)); assertThat(allScenariosPageCollection.hasSkippedScenarios(), is(true));
assertThat(feature.equals(featureToCompare), is(false));
assertThat(stepStats.size(), is(2)); assertThat(step1Stats.getTotal(), is(1)); assertThat(step1Stats.getPassed(), is(0)); assertThat(step1Stats.getFailed(), is(1)); assertThat(step1Stats.getSkipped(), is(0)); assertThat(step2Stats.getTotal(), is(2)); assertThat(step2Stats.getPassed(), is(1)); assertThat(step2Stats.getFailed(), is(0)); assertThat(step2Stats.getSkipped(), is(1));
assertThat(featureStats.size(), is(0));
assertThat(times.getAverageTimeString(), is("0m 00s 333ms"));
assertThat(allTagsPageCollection.getTags().size(), is(3));
assertThat(reportDetails.getDate(), is(notNullValue()));
assertThat(processedContent, is(""));
assertThat(element.hasDocStrings(), is(false)); assertThat(element.hasDocStrings(), is(true));
assertThat(tagStats.size(), is(0));
assertThat(resultMatch.isFailed(), is(false)); assertThat(resultMatch.isPassed(), is(false)); assertThat(resultMatch.isSkipped(), is(true));
assertThat(tagStat.getTotal(), is(127));
assertThat(result.hasErrorMessage(), is(false)); assertThat(result.hasErrorMessage(), is(true));
assertThat(resultMatch.isFailed(), is(true)); assertThat(resultMatch.isPassed(), is(false)); assertThat(resultMatch.isSkipped(), is(false));
assertThat(allStepsPageCollection.getAverageTimeFromStep(step), is("0m 00s 000ms"));
assertThat(feature.equals(featureToCompare), is(false));
assertThat(allStepsPageCollection.getMinimumTimeScenarioIndexFromStep(step), is(0));
assertThat(times.getMaximumTimeString(), is("0m 00s 500ms"));
assertThat(embedding.getDecodedData(), is("This is getDecodeData() Test !!!"));
assertThat(processedContent, is(""));
assertThat(propertiesMap.size(), is(2));
assertThat(linkedProperties.contains("value"), is(false)); assertThat(linkedProperties.containsValue("value"), is(true));
assertThat(linkedProperties.contains("value"), is(false));
assertThat(element.hasHooks(), is(false)); assertThat(element.hasHooks(), is(true));
assertThat(reports, is(nullValue()));
assertThat(linkedProperties.contains("value"), is(false)); assertThat(linkedProperties.contains("value"), is(true));
assertThat(report.getTotalDuration(), is(10000000L));
assertThat(allStepsPageCollection.getMaximumTimeScenarioIndexFromStep(step), is(0));
assertThat(allStepsPageCollection.getMinimumTimeFromStep(step), is("0m 00s 000ms"));
assertThat(times.getMaximumTimeScenarioIndex(), is(2));
assertThat(tagStat.getPassed(), is(3)); assertThat(tagStat.getFailed(), is(0)); assertThat(tagStat.getSkipped(), is(0));
assertThat(totalDuration, is(10000000000L));
assertThat(resultMatch.isFailed(), is(false)); assertThat(resultMatch.isPassed(), is(true)); assertThat(resultMatch.isSkipped(), is(false));
assertThat(linkedProperties.entrySet().size(), is(2));
assertThat(element.getStartDateTime().format(DateTimeFormatter.ISO_DATE_TIME), is("2019-04-11T08:00:23.668Z"));
assertThat(tagStat.getPassed(), is(0)); assertThat(tagStat.getFailed(), is(4)); assertThat(tagStat.getSkipped(), is(0));
assertThat(step.returnNameWithArguments(), is("This is a name with an <span class=\\"parameter\\">argument</span> inside."));
assertThat(color, is("rgba(255, 0, 0, 1.000)"));
assertThat(e.get(0).getScenarioIndex(), is(0)); assertThat(e.get(1).getScenarioIndex(), is(0)); assertThat(e.get(2).getScenarioIndex(), is(0)); assertThat(e.get(0).getScenarioIndex(), is(1)); assertThat(e.get(1).getScenarioIndex(), is(2)); assertThat(e.get(2).getScenarioIndex(), is(3));
assertThat(actualResult).isEmpty();
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualResult).isEmpty();
assertThat(actualResult).isEmpty();
assertNotNull(root); assertNotNull(mmo); assertNotNull(utterance); assertNotNull(phrase); assertNotNull(mapping); assertNotNull(candidate); assertEquals(candidate.getCandidateCUI(), "C0004096"); assertEquals(candidate.getCandidatePreferred(), "Asthma"); assertEquals(semType.getvalue(), "dsyn");
assertEquals(sorted.get(i).candidateScore, i);
assertEquals(sorted.get(i).candidateScore, i);
assertEquals(sortedDescriptions.get(i), sorted.get(i).candidatePreferred);
assertEquals(i18n.defaultBundle, bundle);
assertNotNull(determineRoute); assertNotNull(determineRoute.getRouteGeometry().getLineString()); assertTrue(determineRoute.getRouteGeometry().getLineString() .getPosList().getValue().size() > 0);
assertNotNull(OpenLSClient.post(object.getValue(), url));
assertThat(new DefinitionDocumentNameResolver(context).apply("DefinitionName")).isEqualTo("definitions.adoc");
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("paths.adoc");
assertThat(new OperationDocumentResolverDefault(context).apply(operation)) .isEqualTo("paths.adoc");
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")).isNull();
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("paths.md");
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isEqualTo(".." + fileSeparator + "definitions.adoc");
assertThat(new SecurityDocumentResolver(context).apply("petstore_auth")) .isEqualTo("security.md");
assertThat(new SecurityDocumentResolver(context).apply("petstore_auth")).isNull();
assertThat(new DefinitionDocumentNameResolver(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new DefinitionDocumentNameResolver(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isEqualTo("prefix_definitions.adoc");
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")) .isEqualTo("definitions.md");
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")) .isEqualTo("prefix_definitions.adoc");
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isEqualTo("definitions.md");
assertThat(new OperationDocumentResolverDefault(context).apply(operation)) .isEqualTo("paths.md");
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("operations" + fileSeparator + "test_get.adoc");
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")).isNull();
assertThat(config.isListDelimiterEnabled()).isEqualTo(true); assertThat(config.getListDelimiter()).isEqualTo(Character.valueOf('|')); assertThat(config.isListDelimiterEnabled()).isEqualTo(true);
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("paths.adoc");
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")) .isNull();
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")).isNull();
assertThat(new SecurityDocumentResolver(context).apply("petstore_auth")) .isEqualTo("prefix_security.adoc");
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")) .isEqualTo("DefinitionName.adoc");
assertThat(new OperationDocumentResolverDefault(context).apply(operation)) .isEqualTo("prefix_paths.adoc");
assertThat(new DefinitionDocumentNameResolver(context).apply("DefinitionName")) .isEqualTo("definitions.md");
assertThat(new DefinitionDocumentNameResolver(context).apply("DefinitionName")) .isEqualTo("definitions.adoc");
assertThat(new OperationDocumentNameResolver(context).apply(operation)).isEqualTo("paths.adoc");
assertThat(new SecurityDocumentResolver(context).apply("petstore_auth")) .isNull();
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isNull();
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")).isNull();
assertThat(new OperationDocumentResolverDefault(context).apply(operation)) .isEqualTo("operations" + fileSeparator + "test_get.adoc");
assertThat(new SecurityDocumentResolver(context).apply("petstore_auth")) .isEqualTo("security.adoc");
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("paths.adoc");
assertThat(new DefinitionDocumentResolverDefault(context).apply("DefinitionName")) .isEqualTo("definitions" + fileSeparator + "DefinitionName.adoc");
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")).isNull();
assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo("operations" + fileSeparator + "test_get.adoc");
assertThat(new OperationDocumentResolverDefault(context).apply(operation)).isNull();
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")).isNull();
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")) .isEqualTo("definitions.md");
assertThat(new DefinitionDocumentResolverFromDefinition(context).apply("DefinitionName")) .isEqualTo("prefix_definitions.adoc");
assertThat(new OperationDocumentResolverDefault(context).apply(operation)).isNull();
assertThat(new DefinitionDocumentResolverFromOperation(context).apply("DefinitionName")) .isEqualTo(".." + fileSeparator + "definitions" + fileSeparator + "DefinitionName.adoc");
assertThat(VolleyX.DEFAULT_REQUESTQUEUE, is(not(nullValue()))); assertThat(VolleyX.sRequestQueue, is(not(nullValue()))); assertThat(VolleyX.sContext, is(not(nullValue()))); assertThat(VolleyX.sInited, is(true));
assertThat(VolleyX.sRequestQueue, is(requestQueue));
assertThat(VolleyX.from(mockRequest, ""), is(instanceOf(Observable.class)));
assertThat(VolleyX.from(mockRequest), is(instanceOf(Observable.class)));
assertEquals(expect.length, output.length); assertEquals(expect[i], output[i]);
assertEquals(expect, output);
assertTrue( OSinfo.isWindows()||OSinfo.isLinux()||OSinfo.isMacOS()||OSinfo.isMacOSX());
assertFalse(result.contains(oldestCertificate));
assertNotNull(attributeValue); assertEquals(groupF.getName() + ", " + typeOfWorkplacesB, attributeValue);
assertThat(value).isEqualTo("John Doe");
assertThat(value).isEqualTo(defaultValue);
assertEquals("expected group should equal with result obtained from SCIM REST API", expectedResponse.getEntity(), result.getEntity());
assertTrue("audit should contain change of institutionsCountries",msgs.get(0).getMessage().contains("friendlyName=<institutionsCountries>"));
assertThat(value).isEqualTo(defaultValue);
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertEquals("Filled attribute should be the lowest from all resource and facility values", 999,attributeToCheck.getValue());
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertEquals("fillAttribute has filled different shells than expected", listOfShells, result);
assertEquals(testAttr, attribute);
assertTrue("Mela byt vyhozena vyjimka AttributeNotExistsException", (ex.getCause() instanceof AttributeNotExistsException));
assertNotNull(attributeValue); assertEquals(predefinedDisplayName, attributeValue);
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertThat(value).isEqualTo(1);
assertTrue("audit should contain change of institutionsCountries",msgs.get(0).getMessage().contains("friendlyName=<institutionsCountries>"));
assertThat(values).isEqualTo(defaultValue);
assertNotNull(attributeValue); assertEquals(groupE.getName() + ", " + groupC.getDescription() + ", " + typeOfWorkplacesC, attributeValue);
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertNotNull(attributeValue); assertEquals("MUNI, typeA", attributeValue);
assertNull("User\'s homeMountPoint was filled even they don\'t have an account there.", atr.getValue());
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertThat(value).isEqualTo(defaultValue);
assertTrue("A different homeMountPoint was filled than those available", ( listOfMntPts.getValue()).equals(filledAttribute.getValue()));
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertEquals("expected user should equal with result obtained from SCIM REST API", expectedResponse.getEntity(), result.getEntity());
assertThat(values).isEqualTo(defaultValue);
assertThat(attributeValue, is(notNullValue())); assertThat(attributeValue, equalTo(expectedValue));
assertThat(values).containsExactly(1, 2);
assertThat(values).containsExactly("one", "two");
assertThat(value).isEqualTo("John Doe");
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertThat(attributeValue, is(notNullValue())); assertThat(attributeValue, equalTo(expectedValue));
assertThat(value).isEqualTo(1);
assertThat(values).containsExactly(1, 2);
assertEquals(3, classInstance.getAttributeValue(session, user, virtAttributeCertificates).valueAsList().size());
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertNull("Atribut.getValue() ma byt null", attrResult.getValue());
assertThat(values).isEqualTo(defaultValues);
assertThat(attributeValue, is(notNullValue())); assertThat(attributeValue, equalTo(expectedValue));
assertThat(values).containsExactly(1, 2, 3);
assertNotNull(attributeValue); assertEquals(groupC.getName() + ", " + typeOfWorkplacesB, attributeValue);
assertTrue("Mela byt vyhozena vyjimka AttributeNotExistsException", (ex.getCause() instanceof AttributeNotExistsException));
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertNotNull(attributeValue); assertEquals(2, attributeValue.size()); assertTrue(attributeValue.contains(value1)); assertTrue(attributeValue.contains(value2));
assertNull(attributeValue);
assertNull(attributeValue);
assertEquals("fillAttribute spatne vyplnil value",shellName, result.getValue());
assertThat(values).containsExactly("one", "two");
assertThat(value).isEqualTo(defaultValue);
assertThat(values).isEqualTo(defaultValues);
assertEquals(testAttr, attribute);
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertTrue("audit should contain change of tcsMails",msgs.get(0).getMessage().contains(expectedTestOfMessage));
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertEquals("subjects should be same", expectedSubjects, actualSubjects);
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile));
assertEquals("unescapePropValue(" + instr + ")", expected, unescapedVal);
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertEquals("Number of resource strings", expectedData.length, resStrings.size()); assertEquals("Resource key at index " + idx, expected.key, key); assertEquals("Resource value at index " + idx, expected.value, value); assertEquals("Resource sequence number at index " + idx, expected.seq, seqNum);
assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE_ALL, tempFile, 1));
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertArrayEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST.toArray(), resStrList.toArray());
assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile, 19));
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertEquals("unescapePropKey(" + instr + ")", expected, unescapedKey);
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertEquals("escapeMessagePattern(" + testCase[0] + ", AUTO)", testCase[1], result); assertEquals("escapeMessagePattern(" + testCase[0] + ", ALL)", expected, result);
assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile));
assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile, 19));
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertTrue(ResourceTestUtil.compareFilesUpTo(EXPECTED_WRITE_FILE, tempFile, 5)); assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile, 6));
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists());
assertTrue("The input test file <" + INPUT_FILE + "> does not exist.", INPUT_FILE.exists()); assertEquals("ResourceStrings did not match.", EXPECTED_INPUT_RES_LIST, resStrList);
assertThat(Parser.parse("[S@+]([O-])(C)CC").toSmiles(), is("[S@+]([O-])(C)CC"));
assertThat(g.toSmiles(), is("C1=CC2=CC=CC2=C1")); assertThat(h.toSmiles(), is("C=1C=C2C=CC=C2C1")); assertThat(g.resonate().toSmiles(), is(h.resonate().toSmiles()));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5), Tuple.of(6, 7), Tuple.of(8, 9)));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertThat(Generator.generate(g), is(input));
assertThat(Generator.generate(g), is(input));
assertThat(new Parser("").decideBond(Bond.DOUBLE, Bond.DOUBLE, -1, CharBuffer.fromString("")), is(Bond.DOUBLE)); assertThat(new Parser("").decideBond(Bond.DOUBLE, Bond.IMPLICIT, -1, CharBuffer.fromString("")), is(Bond.DOUBLE)); assertThat(new Parser("").decideBond(Bond.IMPLICIT, Bond.DOUBLE, -1, CharBuffer.fromString("")), is(Bond.DOUBLE));
assertThat(g.topologyOf(4).configuration(), is(Configuration.AL1)); assertThat(g.permute(new int[]{1,0,2,3,4,5,6,7,8}) .toSmiles(), is("C(C)=C=C=[C@@]=C=C=CC"));
assertFalse(buffer.nextIsDigit());
assertThat(bc.components().size(), is(1)); assertThat(bc.components().get(0).size(), is(7));
assertThat(Functions.reverse(g).toSmiles(), is("OCCC(CC(C)CO)C"));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5), Tuple.of(6, 7)));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5), Tuple.of(6, 7)));
assertThat(g.edges(0).size(), is(1)); assertThat(g.edges(0), hasItem(new Edge(0, 1, Bond.IMPLICIT))); assertThat(g.edges(1).size(), is(2)); assertThat(g.edges(1), hasItems(new Edge(0, 1, Bond.IMPLICIT), new Edge(1, 0, Bond.IMPLICIT)));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5), Tuple.of(6, 7), Tuple.of(8, 9)));
assertThat(g.degree(0), is(1)); assertThat(g.degree(1), is(2));
assertThat(new Edge(0, 1, Bond.UP).hashCode(), is(new Edge(1, 0, Bond.DOWN).hashCode())); assertThat(new Edge(0, 1, Bond.UP).hashCode(), is(new Edge(1, 0, Bond.UP).hashCode()));
assertThat(Functions.bondBasedDBStereo(g).toSmiles(), is("CC=[C@]=CC"));
assertThat(Parser.parse("[Se@](=O)(C)CC").toSmiles(), is("[Se@](=O)(C)CC"));
assertThat(matching.matches(), IsIterableWithSize.<Tuple>iterableWithSize(0));
assertThat(g.topologyOf(4), is(Topology.unknown()));
assertThat(g.implHCount(0), is(2)); assertThat(g.implHCount(1), is(1)); assertThat(g.implHCount(2), is(1)); assertThat(g.implHCount(3), is(1)); assertThat(g.implHCount(4), is(0)); assertThat(g.implHCount(5), is(1));
assertThat(bc.components().size(), is(1)); assertThat(bc.components().get(0).size(), is(6));
assertThat(BondBasedConfiguration.configurationOf(g, 0, 1, 2, 3), is(Configuration.DoubleBond.TOGETHER));
assertThat(g.edge(0, 1), is(new Edge(0, 1, Bond.IMPLICIT))); assertThat(g.edge(1, 2), is(new Edge(1, 2, Bond.IMPLICIT)));
assertThat(BondBasedConfiguration.configurationOf(g, 0, 1, 2, 3), is(Configuration.DoubleBond.OPPOSITE));
assertThat(new Edge(0, 1, Bond.IMPLICIT).hashCode(), is(new Edge(1, 0, Bond.IMPLICIT).hashCode()));
assertFalse(empty.contains(rnd.nextInt()));
assertFalse(Localise.inSmallRing(g, g.edge(3, 6)));
assertThat(BondBasedConfiguration.configurationOf(g, 0, 1, 2, 3), is(Configuration.DoubleBond.TOGETHER));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3)));
assertFalse(Localise.inSmallRing(g, g.edge(0, 1)));
assertThat(bc.components().size(), is(1)); assertThat(bc.components().get(0).size(), is(8));
assertThat(stack.peek(), is(1)); assertThat(stack.size(), is(1)); assertThat(stack.peek(), is(2)); assertThat(stack.size(), is(2)); assertThat(stack.peek(), is(4)); assertThat(stack.size(), is(3));
assertThat(g.size(), is(0)); assertThat(g.size(), is(1)); assertThat(g.size(), is(2));
assertTrue(new IntStack(4).empty());
assertThat(Functions.bondBasedDBStereo(g).toSmiles(), is("F/C=C/F"));
assertThat(m.matches(), hasItems(Tuple.of(2, 3), Tuple.of(6, 7)));
assertFalse(one.contains(0)); assertFalse(one.contains(1)); assertTrue(one.contains(2)); assertFalse(one.contains(3)); assertTrue(one.contains(4)); assertFalse(one.contains(5));
assertThat(g.order(), is(0)); assertThat(g.order(), is(1)); assertThat(g.order(), is(2)); assertThat(g.order(), is(3)); assertThat(g.order(), is(4)); assertThat(g.order(), is(5));
assertThat(generator.string(), is("c1cc1c1ccc1"));
assertThat(Functions.atomBasedDBStereo(g).toSmiles(), is("F[C@H]=[C@@H]F"));
assertThat(g.atom(4).label(), is("Really?"));
assertTrue(universe.contains(rnd.nextInt()));
assertThat(m.matches(), hasItems(Tuple.of(1, 2), Tuple.of(3, 4)));
assertThat(m.matches(), IsIterableWithSize.<Tuple>iterableWithSize(6)); assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5), Tuple.of(6, 7), Tuple.of(8, 9), Tuple.of(10, 11)));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertTrue(it.hasNext()); assertNotNull(it.next()); assertTrue(it.hasNext()); assertNotNull(it.next()); assertTrue(it.hasNext()); assertNotNull(it.next()); assertTrue(it.hasNext()); assertNotNull(it.next()); assertFalse(it.hasNext());
assertThat(new Edge(2, 3, Bond.IMPLICIT).either(), is(2)); assertThat(new Edge(3, 2, Bond.IMPLICIT).either(), is(3));
assertThat(g.order(), is(2)); assertThat(g.toSmiles(), is("[2H][2H]"));
assertTrue(g.atom(0).aromatic()); assertThat(g.atom(0).element(), is(Element.Tellurium));
assertThat(bc.components().size(), is(1)); assertThat(bc.components().get(0).size(), is(11));
assertFalse(one.contains(0)); assertFalse(one.contains(1)); assertTrue(one.contains(2)); assertFalse(one.contains(3)); assertTrue(one.contains(4)); assertFalse(one.contains(5)); assertTrue(one.contains(6));
assertThat(m.matches(), IsIterableWithSize.<Tuple>iterableWithSize(2)); assertThat(m.matches(), hasItems(Tuple.of(1, 2), Tuple.of(3, 4)));
assertThat(stack.pop(), is(3)); assertThat(stack.pop(), is(2)); assertThat(stack.pop(), is(1));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertThat(bc.components().size(), is(2)); assertThat(bc.components().get(0).size(), is(6)); assertThat(bc.components().get(0).size(), is(6));
assertThat(bc.cyclic().cardinality(), is(12));
assertThat(g.order(), is(2)); assertThat(g.toSmiles(), is("[3H][3H]"));
assertThat(new Edge(2, 3, Bond.SINGLE).bond(), is(Bond.SINGLE)); assertThat(new Edge(2, 3, Bond.UP).bond(), is(Bond.UP)); assertThat(new Edge(2, 3, Bond.DOWN).bond(), is(Bond.DOWN));
assertThat(new Edge(2, 3, Bond.IMPLICIT).other(2), is(3)); assertThat(new Edge(2, 3, Bond.IMPLICIT).other(3), is(2)); assertThat(new Edge(3, 2, Bond.IMPLICIT).other(2), is(3)); assertThat(new Edge(3, 2, Bond.IMPLICIT).other(3), is(2));
assertThat(Topology.unknown() .configuration(), is(Configuration.UNKNOWN));
assertThat(m.matches(), IsIterableWithSize.<Tuple>iterableWithSize(3)); assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3), Tuple.of(4, 5)));
assertThat(CharBuffer.fromString("").position(), is(0)); assertThat(buffer.position(), is(0));
assertThat(m.matches(), hasItems(Tuple.of(1, 2)));
assertThat(h.toSmiles(), is("N1(C)CCC1"));
assertThat(uf.find(1), is(50)); assertThat(uf.find(5), is(50)); assertThat(uf.find(7), is(7)); assertThat(uf.find(8), is(8)); assertThat(uf.find(10), is(10)); assertThat(uf.find(11), is(10)); assertThat(uf.find(15), is(50)); assertThat(uf.find(50), is(50));
assertThat(e.bond(), is(Bond.AROMATIC));
assertTrue(Localise.inSmallRing(g, g.edge(0, 1)));
assertThat(Functions.bondBasedDBStereo(g).toSmiles(), is("F/N=N/F"));
assertThat(CharBuffer.fromString("").length(), is(0)); assertThat(CharBuffer.fromString(".").length(), is(1)); assertThat(CharBuffer.fromString("..").length(), is(2)); assertThat(CharBuffer.fromString("...").length(), is(3));
assertThat(g.getTitle(), is("ethanol"));
assertThat(Generator.generate(g), is(input));
assertThat(g.getTitle(), is("ethanol"));
assertThat(BondBasedConfiguration.configurationOf(g, 0, 1, 2, 3), is(Configuration.DoubleBond.OPPOSITE));
assertThat(m.matches(), hasItems(Tuple.of(1, 2), Tuple.of(3, 4)));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertThat(g.topologyOf(5), is(t));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertTrue(CharBuffer.isDigit(c)); assertFalse(CharBuffer.isDigit(c)); assertFalse(CharBuffer.isDigit(c));
assertThat(g.atom(4).label(), is("R"));
assertThat(g.addAtom(mock(Atom.class)), is(0)); assertThat(g.addAtom(mock(Atom.class)), is(1)); assertThat(g.addAtom(mock(Atom.class)), is(2)); assertThat(g.addAtom(mock(Atom.class)), is(3)); assertThat(g.addAtom(mock(Atom.class)), is(4));
assertThat(g.addAtom(mock(Atom.class)), is(0)); assertThat(g.addAtom(mock(Atom.class)), is(1)); assertThat(g.addAtom(mock(Atom.class)), is(2)); assertThat(g.addAtom(mock(Atom.class)), is(3)); assertThat(g.addAtom(mock(Atom.class)), is(4));
assertTrue(Localise.inSmallRing(g, g.edge(0, 1)));
assertThat(m.matches(), IsIterableWithSize.<Tuple>iterableWithSize(1)); assertThat(m.matches(), hasItem(Tuple.of(0, 1)));
assertThat(Generator.generate(Parser.parse(smi)), is(exp));
assertThat(Functions.reverse(g).toSmiles(), is("OCC"));
assertThat(g.atom(g.order() - 1).label(), is("a holo-[acyl-carrier protein]"));
assertThat(g.getTitle(), is("ethanol"));
assertTrue(uf.connected(1, 5)); assertTrue(uf.connected(1, 7)); assertTrue(uf.connected(1, 9)); assertTrue(uf.connected(1, 10)); assertTrue(uf.connected(1, 11)); assertTrue(uf.connected(1, 15)); assertTrue(uf.connected(1, 50));
assertThat(m.matches(), hasItems(Tuple.of(0, 1), Tuple.of(2, 3)));
assertTrue(g.adjacent(0, 1)); assertTrue(g.adjacent(1, 2)); assertFalse(g.adjacent(0, 2));
assertFalse(buffer.nextIsDigit());
assertFalse(buffer.nextIsDigit());
assertThat(new IntStack(4).size(), is(0));
assertThat(new Generator(g, new Generator.ReuseRingNumbering(1)).string(), is("C1CC1.C1CC1"));
assertThat(new Generator(g, new Generator.IterativeRingNumbering(1)).string(), is("C1CC1.C1CC1"));
assertThat(h.toSmiles(), is("O(CC)CC"));
assertThat(g.order(), is(2)); assertThat(g.toSmiles(), is("[H][H]"));
assertThat(m.matches(), hasItems(Tuple.of(1, 2), Tuple.of(3, 4)));
assertEquals("Unexpected columns size", 6, result.length);
assertNotNull(clusterSyncManager); assertThat(clusterSyncManager, instanceOf(ClusterSyncManager.class));
assertTrue("Expected value higher than zero", retry.shouldRetry());
assertNotNull(nodeStatusPath); assertEquals(STREAMING.ZK_EPHEMERAL_NODE_STATUS_PATH,nodeStatusPath);
assertEquals("Expected value not found", "name", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 0).getName()); assertEquals("Expected value not found", "timestamp", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 1).getName()); assertEquals("Expected value not found", "value", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 2).getName());
assertTrue("Expected true not found", listNames.contains(StreamsHelper.STREAM_NAME)); assertTrue("Expected true not found", listNames.contains(StreamsHelper.STREAM_NAME2));
assertNotNull("Expected exception after some errors", ex);
assertEquals( STREAMING.ZK_EPHEMERAL_NODE_STATUS_INITIALIZED, clusterSyncManager.initializedGroupStatus());
assertEquals("Expected value not found", 2, events.size());
assertEquals("Exception expected", 22d, SiddhiUtils.decodeSiddhiValue(22d, null));
assertEquals("Exception expected", "text", SiddhiUtils.decodeSiddhiValue("text", null));
assertTrue("Expected true value not found", snapshot.length > 0);
assertEquals("Expected keyspace not found", "\\"" + STREAMING.STREAMING_KEYSPACE_NAME + "\\"", insert.getKeyspace());
assertEquals("Expected null but exception found", null, ex);
assertTrue("Expected true not found", streamOperationsService.streamExist(StreamsHelper.STREAM_NAME));
assertEquals("Expected stream name not found", "testStream", message.getStreamName()); assertEquals("Expected value not found", "name", message.getColumns().get(0).getValue());
assertNull("Expected null byte array", persistenceModel.getSiddhiSnapshot());
assertEquals(nodeReply, reply);
assertTrue("Expected true value not found", new File(testDataDir).isDirectory()); assertTrue("Expected true value not found", new File(testConfDir).isDirectory());
assertEquals("Expected null but exception found", null, ex);
assertTrue(streamOperationsService.streamExist(StreamsHelper.STREAM_NAME)); assertFalse("Expected false not found", streamOperationsService.streamExist(StreamsHelper.STREAM_NAME));
assertEquals(STREAMING.ZK_EPHEMERAL_NODE_STATUS_GROUPS_DOWN, clusterSyncManager.initializedGroupStatus()) ;
assertEquals(2, messages.size()); assertEquals("Expected stream name not found", "testStream", messages.get(0).getStreamName()); assertEquals("Expected stream name not found", "testStream", messages.get(1).getStreamName());
assertEquals("Expected stream name not found", message.getStreamName(), des.getStreamName()); assertEquals("Expected size not found", message.getColumns().size(), des.getColumns().size());
assertEquals("Expected value not found", "name", event.getData(0)); assertEquals("Expected value not found", 3, event.getData(2)); assertEquals("Expected value not found", 13f, event.getData(5));
assertTrue("Expected true not found", streamOperationsService.streamExist(StreamsHelper.STREAM_NAME));
assertEquals("Expected null but exception found", null, ex);
assertTrue("Expected string is empty", persistenceModel.toString().length()>0);
assertEquals("Expected value not found", "test", ((ColumnNameTypeValue) message.getColumns().get(0).getValue()).getValue()); assertEquals("Expected value not found",10, ((ColumnNameTypeValue) message.getColumns().get(1).getValue()).getValue()); assertEquals("Expected value not found", true, ((ColumnNameTypeValue) message.getColumns().get(2).getValue()).getValue());
assertEquals("Expected value not found", 1, message.getQueries().size()); assertEquals("Expected value not found", 6, message.getColumns().size()); assertEquals("Expected value not found", 0, message.getActiveActions().size()); assertEquals("Expected value not found", 3, message.getColumns().size());
assertEquals("Expected value not found", 0, metadataService.getAttributePosition(StreamsHelper.STREAM_NAME, "name")); assertEquals("Expected value not found", 1, metadataService.getAttributePosition(StreamsHelper.STREAM_NAME, "timestamp")); assertEquals("Expected value not found", 2, metadataService.getAttributePosition(StreamsHelper.STREAM_NAME, "value"));
assertEquals("Expected size not found", 2, results.size());
assertTrue("Expected bytes array not found after convert", bytes.length>0);
assertTrue("Expected hashcode higher than zero", persistenceModel.hashCode()!=0);
assertNotNull(clusterSyncManager); assertThat(clusterSyncManager, instanceOf(ClusterSyncManager.class));
assertNull("Unexpected exception found", ex);
assertTrue("Expected true value not found", schemaFile.canRead());
assertEquals("Expected same size of Stream Statuses", 2, persistenceModel.getStreamStatuses().size());
assertEquals(2, number);
assertTrue("Expected attribute not found", SiddhiUtils.columnAlreadyExistsInStream(columnName, definition)); assertFalse("Unexpected attribute found", SiddhiUtils.columnAlreadyExistsInStream("NotExists", definition));
assertEquals("Unexpected time to wait value", 2000, retry.getTimeToWait()); assertEquals("Unexpected time to wait value", 1000, retry.getTimeToWait());
assertEquals("Expected value not found", 2, messages.size());
assertNull("Expected null value that means not exception", ex);
assertEquals("Expected value not found", 2, listActions.size()); assertTrue("Expected true not found", listActions.containsKey(StreamsHelper.STREAM_NAME)); assertTrue("Expected true not found", listActions.get(StreamsHelper.STREAM_NAME).equals(StreamsHelper.ACTION_LISTEN_TOKEN));
assertTrue("Given object is not equals", persistenceModel.equals(persistenceModel2));
assertNotNull(testClient.get(reachableURL)); assertNotNull(testClient.get(reachableURL)); assertNotNull(testClient.get(reachableURL));
assertThat(e, instanceOf(IOException.class)); assertThat(e.getMessage(), equalTo("Unable to get " + url.toString())); assertThat(e.getCause(), instanceOf(FileNotFoundException.class)); assertNull(testClient.get(url)); assertNull(testClient.get(url));
assertThat(e, instanceOf(IOException.class)); assertThat(e.getMessage(), equalTo("Unable to get " + unreachableURL.toString())); assertThat(e.getCause(), instanceOf(FileNotFoundException.class)); assertNull(testClient.get(unreachableURL)); assertNull(testClient.get(unreachableURL));
assertNotNull(testClient.get(url)); assertNotNull(testClient.get(url));
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isTrue(); assertThat(path.size()).isEqualTo(1); assertThat(path.segment(0)).isEqualTo("a");
assertThat(Conversions.toLocalDate(date)).isEqualTo(now);
assertThat(CollectionId.parse("rs0", "a")).isNull();
assertThat(tables.size()).isEqualTo(0); assertThat(dbName).isEqualTo("mydb"); assertThat(list.size()).isEqualTo(2); assertThat(list.get(0).type()).isEqualTo(EventType.CREATE_TABLE); assertThat(list.get(1).type()).isEqualTo(EventType.DROP_TABLE);
assertThat(Conversions.toLocalDate(now)).isSameAs(now);
assertThat(values).containsOnly(1, 2, 3, 42);
assertThat(Strings.startsWithIgnoreCase("INSERT INTO", "insert")).isTrue(); assertThat(Strings.startsWithIgnoreCase("INSERT INTO", "INSERT")).isTrue(); assertThat(Strings.startsWithIgnoreCase("insert INTO", "INSERT")).isTrue(); assertThat(Strings.startsWithIgnoreCase("INSERT INTO", "update")).isFalse();
assertThat(connector.isContainedWithin(server)).isTrue();
assertThat(Conversions.toLocalTime(now)).isSameAs(now);
assertThat(tokens.matches("select")).isFalse(); assertThat(tokens.matches("SElect")).isFalse(); assertThat(tokens.matches("Select")).isTrue();
assertThat(bytes).isEqualTo(new byte[]{ 0, 1, 10, 11, 15, 16, 99, 100, 101, 127, -128, -127, -1 });
assertThat(tokens.canConsume("SELECT")).isFalse(); assertThat(tokens.canConsume(TokenStream.ANY_VALUE)).isFalse(); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL)).isFalse();
assertThat(Strings.unquoteIdentifierPart("`Tab``le`")).isEqualTo("Tab`le");
assertThat(tables.size()).isEqualTo(0); assertThat(dbName).isEqualTo("other"); assertThat(list.size()).isEqualTo(2); assertThat(list.get(0).type()).isEqualTo(EventType.CREATE_TABLE); assertThat(list.get(1).type()).isEqualTo(EventType.DROP_TABLE);
assertThat(source.struct().getString(SourceInfo.COMMIT_LSN_KEY)).isEqualTo(Lsn.valueOf(new byte[]{ 0x02 }).toString());
assertThat(source.struct().getString(SourceInfo.DEBEZIUM_VERSION_KEY)).isEqualTo(Module.version());
assertThat(filters.databaseFilter().test("db1")).isFalse(); assertThat(filters.databaseFilter().test("db2")).isFalse();
assertThat(Strings.isNullOrEmpty("hello")).isFalse();
assertThat(tokens.canConsume("SELECT")).isFalse(); assertThat(tokens.canConsume(TokenStream.ANY_VALUE)).isFalse(); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL)).isFalse();
assertThat(((Struct) unwrapped.value()).get("prefix.op")).isEqualTo(Envelope.Operation.UPDATE.code()); assertThat(((Struct) unwrapped.value()).get("prefix.lsn")).isEqualTo(1234); assertThat(((Struct) unwrapped.value()).get("prefix.id")).isEqualTo("571");
assertThat(Strings.unquoteIdentifierPart("\'\'")).isEqualTo("");
assertThat(e).isExactlyInstanceOf(DataException.class);
assertEquals(65535, MySqlUnsignedIntegerConverter.convertUnsignedSmallint(-1)); assertEquals(65535, MySqlUnsignedIntegerConverter.convertUnsignedSmallint(65535));
assertThat(Module.version()).isNotNull(); assertThat(Module.version()).isNotEmpty();
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isTrue(); assertThat(path.size()).isEqualTo(1); assertThat(path.segment(0)).isEqualTo("a");
assertThat(Temporals.max(oneMilli, oneMillionNanos)).isEqualTo(oneMilli); assertThat(Temporals.max(oneMilli, oneMillionNanos)).isEqualTo(oneMillionNanos);
assertThat(filters.databaseFilter().test("db1")).isTrue();
assertTrue(history.exists()); assertFalse(history.exists());
assertThat(gtids.toString()).isEqualTo(UUID1 + ":1-191:193-199:1000-1033");
assertThat(Temporals.max(sixtyOneMinutes, oneHour)).isEqualTo(sixtyOneMinutes);
assertThat(pattern).isNotNull(); assertThat(type.arrayDimensions()).isNull(); assertThat(type.length()).isEqualTo(3); assertThat(type.scale()).isEqualTo(-1); assertThat(type.name()).isEqualTo("TEXT CHARACTER SET utf8 COLLATE utf8_bin"); assertThat(type.expression()).isEqualTo("TEXT(3) CHARACTER SET utf8 COLLATE utf8_bin"); assertThat(type.jdbcType()).isEqualTo(TYPE);
assertThat(Strings.isNumeric("123")).isTrue();
assertThat(pattern).isNotNull(); assertThat(type.arrayDimensions()).isNull(); assertThat(type.length()).isEqualTo(3); assertThat(type.scale()).isEqualTo(-1); assertThat(type.name()).isEqualTo("BIT"); assertThat(type.expression()).isEqualTo("BIT(3)"); assertThat(type.jdbcType()).isEqualTo(TYPE);
assertThat(gtids.toString()).isEqualTo(UUID1 + ":1-199");
assertThat(pattern).isNotNull(); assertThat(type.arrayDimensions()).isNull(); assertThat(type.length()).isEqualTo(3); assertThat(type.scale()).isEqualTo(2); assertThat(type.name()).isEqualTo("NUMBER"); assertThat(type.expression()).isEqualTo("NUMBER(3,2)"); assertThat(type.jdbcType()).isEqualTo(TYPE);
assertThat(Temporals.max(hundredMillis, thousandMillis)).isEqualTo(thousandMillis);
assertThat(Strings.isNumeric(null)).isFalse();
assertThat(Conversions.toLocalDate(now)).isEqualTo(now.toLocalDate());
assertThat(CollectionId.parse("rs0", "a.")).isNull();
assertEquals(4294967295L, MySqlUnsignedIntegerConverter.convertUnsignedInteger(-1L)); assertEquals(4294967295L, MySqlUnsignedIntegerConverter.convertUnsignedInteger(4294967295L));
assertThat(pattern).isNotNull(); assertThat(type).isNull();
assertThat(Strings.join(",", Arrays.asList("a", null, "c"))).isEqualTo("a,c");
assertThat(path.isRoot()).isTrue(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(0);
assertThat(filters.databaseFilter().test("db1")).isFalse();
assertThat(tokens.matches(BasicTokenizer.WORD, BasicTokenizer.WORD)).isTrue();
assertThat(tokens.canConsume("SELECT")).isFalse(); assertThat(tokens.canConsume(TokenStream.ANY_VALUE)).isFalse(); assertThat(tokens.canConsume(BasicTokenizer.SYMBOL)).isFalse();
assertThat(Strings.isNumeric("")).isFalse();
assertThat(gtids.toString()).isEqualTo(UUID1 + ":1-191:193-199");
assertThat(tokens.matches("ALL")).isFalse(); assertThat(tokens.matches("SElect")).isFalse(); assertThat(tokens.matches("SELECT")).isTrue();
assertThat(schemaAndValue.schema()).isEqualTo(Schema.OPTIONAL_BYTES_SCHEMA); assertThat(schemaAndValue.value()).isEqualTo(ByteBuffer.wrap(SAMPLE_BYTES));
assertEquals((short) 255, MySqlUnsignedIntegerConverter.convertUnsignedTinyint((short) -1)); assertEquals((short) 255, MySqlUnsignedIntegerConverter.convertUnsignedTinyint((short) 255));
assertThat(filters.databaseFilter().test("db1")).isTrue(); assertThat(filters.databaseFilter().test("db2")).isTrue();
assertThat(filters.databaseFilter().test("db2")).isTrue();
assertThat(e).isExactlyInstanceOf(DataException.class);
assertThat(address.getHost()).isEqualTo("::1/128"); assertThat(address.getPort()).isEqualTo(28017);
assertThat(XmlCharacters.isValidNcNameStart(':')).isFalse();
assertThat(bytes).isEqualTo(SAMPLE_BYTES);
assertThat(pattern).isNotNull(); assertThat(type.arrayDimensions()).isNull(); assertThat(type.length()).isEqualTo(3); assertThat(type.scale()).isEqualTo(-1); assertThat(type.name()).isEqualTo("BIT"); assertThat(type.expression()).isEqualTo("BIT(3)"); assertThat(type.jdbcType()).isEqualTo(TYPE);
assertThat(partition).isSameAs(source.partition(REPLICA_SET_NAME));
assertThat(Strings.unquoteIdentifierPart("\'Table\'")).isEqualTo("Table");
assertThat(SchemaUtil.asString(buffer)).isEqualTo("[11, 13, 17]");
assertThat((Object) document).isEqualTo(Document.create("a\\rb", 123));
assertThat(NanoDuration.durationNanos(6, 7, 1, 2, 3, 4, 5)).isEqualTo(years + months + days + hours + minutes + seconds + nanos);
assertThat(Strings.isNullOrEmpty(" ")).isFalse();
assertThat(bytes).isEqualTo(SAMPLE_BYTES);
assertThat(Strings.join(",", Arrays.asList("a", "b", "c"), s -> "_" + s)).isEqualTo("_a,_b,_c");
assertThat(addresses.size()).isEqualTo(0);
assertThat(tokens.canConsume("Select")).isFalse(); assertThat(tokens.canConsume("SELECT")).isTrue(); assertThat(tokens.canConsume("aLL")).isFalse(); assertThat(tokens.canConsume("all")).isFalse(); assertThat(tokens.canConsume("ALL")).isTrue();
assertThat(Strings.join(",", Arrays.asList(null, null, null))).isEqualTo("");
assertThat(Strings.getBegin(null, 10)).isNull(); assertThat(Strings.getBegin("", 10)).isEqualTo(""); assertThat(Strings.getBegin("INSERT ", 7)).isEqualTo("INSERT "); assertThat(Strings.getBegin("INSERT INTO", 7)).isEqualTo("INSERT "); assertThat(Strings.getBegin("UPDATE mytable", 7)).isEqualTo("UPDATE "); assertThat(Strings.getBegin("delete from ", 7).toUpperCase()).isEqualTo("DELETE ");
assertThat(HashCode.compute(1), is(not(0))); assertThat(HashCode.compute((long) 8), is(not(0))); assertThat(HashCode.compute((short) 3), is(not(0))); assertThat(HashCode.compute(1.0f), is(not(0))); assertThat(HashCode.compute(1.0d), is(not(0))); assertThat(HashCode.compute(true), is(not(0)));
assertThat(after.getString("field1")).isEqualTo("value"); assertThat(after.getInteger("field2")).isEqualTo(22); assertThat(after.size()).isEqualTo(3); assertThat(nested.getString("a")).isEqualTo("A"); assertThat(nested.getString("b")).isEqualTo("B"); assertThat(nested.size()).isEqualTo(2);
assertThat(address.getHost()).isEqualTo("localhost"); assertThat(address.getPort()).isEqualTo(28017);
assertThat(Conversions.toLocalDate(epochDay)).isEqualTo(now);
assertThat(partition.get(SourceInfo.REPLICA_SET_NAME)).isEqualTo(REPLICA_SET_NAME); assertThat(partition.get(SourceInfo.SERVER_ID_KEY)).isEqualTo("serverX"); assertThat(partition.size()).isEqualTo(2);
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(5); assertThat(path.segment(0)).isEqualTo("a"); assertThat(path.segment(1)).isEqualTo("b"); assertThat(path.segment(2)).isEqualTo("c"); assertThat(path.segment(3)).isEqualTo("d"); assertThat(path.segment(4)).isEqualTo("e");
assertThat(Strings.isNullOrEmpty(null)).isTrue();
assertThat(Strings.unquoteIdentifierPart("\'Tab\'\'le\'")).isEqualTo("Tab\'le");
assertThat(filters.databaseFilter().test("db1")).isFalse();
assertThat(bytes).isEqualTo(SAMPLE_BYTES);
assertThat(address.getHost()).isEqualTo("::1/128"); assertThat(address.getPort()).isEqualTo(ServerAddress.defaultPort());
assertThat(MongoUtil.replicaSetUsedIn("rs0/")).isEqualTo("rs0"); assertThat(MongoUtil.replicaSetUsedIn("rs0/localhost")).isEqualTo("rs0"); assertThat(MongoUtil.replicaSetUsedIn("rs0/[::1/128]")).isEqualTo("rs0");
assertThat(e).isExactlyInstanceOf(DataException.class);
assertThat(Conversions.toLocalTime(now)).isEqualTo(now.toLocalTime());
assertThat(connector.isContainedWithin(server)).isTrue();
assertThat(MongoUtil.replicaSetUsedIn("")).isNull(); assertThat(MongoUtil.replicaSetUsedIn("localhost")).isNull(); assertThat(MongoUtil.replicaSetUsedIn("[::1/128]")).isNull();
assertThat(Strings.unquoteIdentifierPart("table")).isEqualTo("table");
assertThat(pattern).isNotNull(); assertThat(type.arrayDimensions()).isNull(); assertThat(type.length()).isEqualTo(-1); assertThat(type.scale()).isEqualTo(-1); assertThat(type.name()).isEqualTo("TEXT CHARACTER SET"); assertThat(type.expression()).isEqualTo("TEXT CHARACTER SET"); assertThat(type.jdbcType()).isEqualTo(TYPE);
assertThat(after.getString("field1")).isEqualTo("value"); assertThat(after.getInteger("field2")).isEqualTo(22); assertThat(after.size()).isEqualTo(2);
assertThat(CollectionId.parse("rs0", ".a.b")).isNull();
assertThat(Strings.hexStringToByteArray(null)).isNull(); assertThat(Strings.hexStringToByteArray("00")).isEqualTo(new byte[]{ 0 }); assertThat(Strings.hexStringToByteArray("010203")).isEqualTo(new byte[]{ 1, 2, 3 }); assertThat(Strings.hexStringToByteArray("CAFEBABE")).isEqualTo(new byte[]{ -54, -2, -70, -66 });
assertThat(HashCode.compute((Object) null), is(0)); assertThat(HashCode.compute("abc", (Object) null), is(not(0)));
assertThat(after.getString("field")).isEqualTo("value"); assertThat(after.size()).isEqualTo(1);
assertThat(address.getHost()).isEqualTo("localhost"); assertThat(address.getPort()).isEqualTo(ServerAddress.defaultPort());
assertThat(schemaAndValue.schema()).isEqualTo(Schema.OPTIONAL_BYTES_SCHEMA); assertThat(schemaAndValue.value()).isNull();
assertThat(firstToken).isEqualTo("Select");
assertThat(gtids.toString()).isEqualTo(UUID1 + ":1-199:1000-1033:1035-1036:1038-1039");
assertThat(filters.databaseFilter().test("db1")).isTrue();
assertThat(HashCode.compute(1, 2, 3), is(not(0))); assertThat(HashCode.compute((long) 8, (long) 22, 33), is(not(0))); assertThat(HashCode.compute((short) 3, (long) 22, true), is(not(0)));
assertThat(tokens.matches(BasicTokenizer.WORD, BasicTokenizer.DECIMAL)).isFalse(); assertThat(tokens.matches(BasicTokenizer.DECIMAL, BasicTokenizer.WORD)).isFalse();
assertThat(source.struct().getString(SourceInfo.DEBEZIUM_CONNECTOR_KEY)).isEqualTo(Module.name());
assertThat(Strings.isNumeric(" ")).isFalse();
assertThat(bytes).isNull();
assertThat(HashCode.compute(), is(0));
assertThat(XmlCharacters.isValidNameStart(c)).isTrue(); assertThat(XmlCharacters.isValidNameStart(c)).isTrue();
assertThat(Conversions.toLocalDate(date)).isEqualTo(now);
assertThat(SchemaUtil.asString(struct)).isEqualTo("{\\"some_field\\" : [1, 3, 5, 7]}");
assertThat(Strings.join(",", Arrays.asList(null, "b", "c"))).isEqualTo("b,c");
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(2); assertThat(path.segment(0)).isEqualTo("a"); assertThat(path.segment(1)).isEqualTo("b");
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(2); assertThat(path.segment(0)).isEqualTo("a"); assertThat(path.segment(1)).isEqualTo("b");
assertEquals(new BigDecimal("18446744073709551615"), MySqlUnsignedIntegerConverter.convertUnsignedBigint(new BigDecimal("-1"))); assertEquals(new BigDecimal("18446744073709551615"), MySqlUnsignedIntegerConverter.convertUnsignedBigint(new BigDecimal("18446744073709551615")));
assertThat(filters.databaseFilter().test("db1")).isTrue(); assertThat(filters.databaseFilter().test("mongo2")).isTrue();
assertThat(filters.databaseFilter().test("db1")).isFalse(); assertThat(filters.databaseFilter().test("mongo2")).isFalse();
assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(2); assertThat(path.segment(0)).isEqualTo("a"); assertThat(path.segment(1)).isEqualTo("b");
assertThat(addresses.size()).isEqualTo(1); assertThat(addresses.get(0).getHost()).isEqualTo(ServerAddress.defaultHost()); assertThat(addresses.get(0).getPort()).isEqualTo(ServerAddress.defaultPort());
assertThat(SchemaUtil.asString(new byte[]{ 1, 3, 5, 7 })).isEqualTo("[1, 3, 5, 7]");
assertThat(gtids.toString()).isEqualTo(UUID1 + ":1-191");
assertThat(source.struct().getString(SourceInfo.CHANGE_LSN_KEY)).isEqualTo(Lsn.valueOf(new byte[]{ 0x01 }).toString());
assertEquals(16777215, MySqlUnsignedIntegerConverter.convertUnsignedMediumint(-1)); assertEquals(16777215, MySqlUnsignedIntegerConverter.convertUnsignedMediumint(16777215));
assertThat(Strings.isNullOrEmpty("")).isTrue();
assertEquals("One triple inserted", 1, i);
assertEquals(1, screenService.getScreen(screen.getId(), true, false).getOwners().size()); assertEquals(2, screenService.getScreen(screen.getId(), true, false).getOwners().size()); assertEquals("i1", owners.get(1).getUser().getUserId()); assertEquals(3, screenService.getScreen(screen.getId(), true, false).getOwners().size());
assertEquals(1, getPlaylist(playlist.getId()).getOwners().size()); assertEquals(2, getPlaylist(playlist.getId()).getOwners().size()); assertEquals("i1", owners.get(1).getUser().getUserId()); assertEquals(3, getPlaylist(playlist.getId()).getOwners().size());
assertEquals(0, getScreens().size()); assertEquals(1, screens.size()); assertEquals("s1", screens.get(0).getName()); assertNotNull(screens.get(0).getPlaylist()); assertEquals(1, screens.get(0).getOwners().size()); assertEquals(simpleUser.getUserId(), screens.get(0).getOwners().get(0).getUser().getUserId()); assertEquals(2, getScreens().size());
assertEquals(1, getPlaylists(false).size()); assertEquals(0, getPlaylists(false).size());
assertNotNull(fileService.getFile(file.getId())); assertEquals("f1", fileService.getFile(file.getId()).getName()); assertEquals("jpg", fileService.getFile(file.getId()).getFileType());
assertEquals("<div>-missing value-</div>-missing value-", helper.replace("<div>{{key2}}</div>{{key3}}", null)); assertEquals("<div>-missing value-</div>-missing value-", helper.replace("<div>{{key2}}</div>{{key3}}", "")); assertEquals("<div>/ui/img/image_preview.png</div>-missing value-", helper.replace("<div>{{key1}}</div>{{key3}}", null));
assertEquals("<div>/ui/img/image_preview.png</div>value3", helper.replace("<div>{{key1}}</div>{{key3}}", values));
assertEquals(1, fileService.getFile(file.getId()).getOwners().size()); assertEquals(2, fileService.getFile(file.getId()).getOwners().size()); assertEquals("i1", owners.get(1).getUser().getUserId()); assertEquals(3, fileService.getFile(file.getId()).getOwners().size());
assertEquals(null, helper.replace(null, values)); assertEquals("", helper.replace("", values));
assertNull(screenService.getScreenByKey("nonexisting", true, false, false, null));
assertEquals(1, screen.getOwners().size()); assertEquals(simpleUser.getUserId(), screen.getOwners().get(0).getUser().getUserId()); assertTrue(screen.getName().length() > 0);
assertEquals(1, getFiles().size()); assertEquals(0, getFiles().size());
assertEquals("<div>value2</div>value3", helper.replace("<div>{{key2}}</div>{{key3}}", testValues));
assertEquals(0, dbService.getUsers().size()); assertEquals(1, dbService.getUsers().size());
assertEquals("<div>/s/api/fileservice/files/42/content</div>value3", helper.replace("<div>{{key1}}</div>{{key3}}", testValues));
assertEquals("<div>value2</div>value3", helper.replace("<div>{{key2}}</div>{{key3}}", values));
assertEquals(0, dbService.getFiles().size()); assertEquals(1, dbService.getFiles().size());
assertNotNull(user); assertEquals(user.getUserId(), simpleUser.getUserId()); assertNotNull(user.getImageLink()); assertFalse(user.getImageLink().contains(("%")));
assertTrue(systemService.getConfigSections().size() > 0); assertTrue(systemService.getConfigSections().get(0).getParameters().size() > 0); assertNotNull(systemService.getConfigSections().get(0).getParameters().get(0).getCurrentValue());
assertEquals(3, pageService.getPage(page.getId()).getOwners().size()); assertEquals(2, pageService.getPage(page.getId()).getOwners().size()); assertEquals("i2", pageService.getPage(page.getId()).getOwners().get(1).getUser().getUserId());
assertNull(screen.getLastContainerAlive()); assertEquals(0, new EventHistoryDAO().getCount()); assertNotNull(screen.getLastContainerAlive()); assertEquals(1, new EventHistoryDAO().getCount()); assertEquals(EventHistory.EventType.ScreenAlive, event.getEventType()); assertEquals(screen.getId(), event.getEntityId()); assertNotNull(event.getEventDate());
assertEquals(2, getPlaylist(playlist.getId()).getPageReferences().size()); assertEquals(1, getPlaylist(playlist.getId()).getPageReferences().size()); assertEquals("p2", getPlaylist(playlist.getId()).getPageReferences().get(0).getPage().getName());
assertEquals(0, dbService.getPlaylists().size()); assertEquals(1, dbService.getPlaylists().size());
assertEquals("png", getFiles().get(0).getFileType()); assertEquals(1, getFiles().size()); assertEquals(500, file.getWidth()); assertEquals(300, file.getHeight()); assertEquals("jpg", file.getFileType());
assertEquals(2, playlists.size()); assertEquals("d2", playlists.get(1).getName()); assertEquals(copy.getId(), playlists.get(1).getId()); assertEquals(2, playlists.get(1).getPageReferences().size()); assertEquals(99, playlists.get(1).getPageReferences().get(0).getPageDisplayDurationOverride());
assertNotNull(user); assertEquals(simpleUser.getUserId(), user.getUserId());
assertEquals(0, getPages().size()); assertEquals(1, getPages().size()); assertEquals(2, pages.size()); assertEquals(1, pages.get(0).getOwners().size()); assertEquals(simpleUser.getUserId(), pages.get(0).getOwners().get(0).getUser().getUserId());
assertEquals(0, new UserDAO().getCount()); assertEquals(simpleUser.getUserId(), userService.getCurrentUser().getUserId()); assertEquals(1, new UserDAO().getCount()); assertEquals(simpleUser.getUserId().toUpperCase(), userService.getCurrentUser().getUserId()); assertEquals(1, new UserDAO().getCount());
assertEquals(simpleUser2.getUserId(), userService.getUser(simpleUser2.getId()).getUserId());
assertNotNull(pageService.getPage(page.getId())); assertEquals("p1", pageService.getPage(page.getId()).getName());
assertEquals(3, fileService.getFile(file.getId()).getOwners().size()); assertEquals(2, fileService.getFile(file.getId()).getOwners().size()); assertEquals("i2", fileService.getFile(file.getId()).getOwners().get(1).getUser().getUserId());
assertEquals("newowner", screen.getRequestedOwner()); assertEquals("newowner", screen.getOwners().get(0).getUser().getUserId());
assertNull(getPlaylist(-1));
assertEquals("d2", getPlaylist(db.getId()).getName());
assertEquals("<div>value2</div>value2value3", helper.replace("<div>{{key2}}</div>{{key2}}{{key3}}", values));
assertEquals(2, screens.size()); assertEquals("s2", screens.get(1).getName()); assertEquals(screen.getId(), screens.get(1).getId());
assertEquals(3, screenService.getScreen(screen.getId(), true, false).getOwners().size()); assertEquals(2, screenService.getScreen(screen.getId(), true, false).getOwners().size()); assertEquals("i2", screenService.getScreen(screen.getId(), true, false).getOwners().get(1).getUser().getUserId());
assertEquals("p1", pageService.getPage(page.getId()).getName()); assertEquals(values, pageService.getPage(page.getId()).getTemplateValues());
assertEquals("p2", pageService.getPage(page.getId()).getName());
assertEquals(3, getPlaylist(playlist.getId()).getOwners().size()); assertEquals(2, getPlaylist(playlist.getId()).getOwners().size()); assertEquals("i2", getPlaylist(playlist.getId()).getOwners().get(1).getUser().getUserId());
assertNotNull(getPlaylist(db.getId())); assertEquals(0, getPlaylist(db.getId()).getPageReferences().size());
assertEquals(0, dbService.getUsers().size());
assertEquals(0, getFiles().size()); assertEquals(0, getFiles().size()); assertEquals(1, getFiles().size()); assertEquals(2, getFiles().size());
assertEquals(1, pageService.getPage(page.getId()).getOwners().size()); assertEquals(2, pageService.getPage(page.getId()).getOwners().size()); assertEquals("i1", owners.get(1).getUser().getUserId()); assertEquals(3, pageService.getPage(page.getId()).getOwners().size());
assertEquals(2, pages.size()); assertEquals("p2", pages.get(1).getName()); assertEquals(page.getId(), pages.get(1).getId());
assertEquals(1, getPages().size()); assertEquals(0, getPages().size());
assertEquals(2, refs.getUserPlaylists().size()); assertEquals(1, refs.getForeignPlaylists()); assertEquals(1, refs.getUserPlaylists().size()); assertEquals(0, refs.getForeignPlaylists());
assertEquals(0, dbService.getPages().size()); assertEquals(1, dbService.getPages().size());
assertEquals(1, getScreens().size()); assertEquals(0, getScreens().size());
assertEquals(0, dbService.getScreens().size()); assertEquals(1, dbService.getScreens().size());
assertEquals("<div>{{key2}}</div>{{key3}}", helper.replace("<div>{{key2}}</div>{{key3}}", values)); assertEquals("<div>{{key2}}</div>{{key3}}", helper.replace("<div>{{key2}}</div>{{key3}}", values));
assertEquals("s2", screenService.getScreen(screen.getId(), true, false).getName());
assertThat(actualHierarchy).isEqualTo(hierarchyTreeNodeMock);
assertThat(actualIndex).isEqualTo(expectedIndex);
assertThat(actualHasAccess).isTrue();
assertThat(actualHasAccess).isFalse();
assertThat(actualPairs).isEmpty();
assertThat(actualOrder).containsExactlyElementsOf(expectedOrder);
assertThat(node.managersEqual(otherNode)).isTrue();
assertThat(actualHasBookmarked).isFalse();
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualStaff).containsExactly(otherUserMock);
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualHasAccess).isFalse();
assertThat(actualProjects).isEqualTo(expectedProjects);
assertThat(actualShouldUpdate).isTrue();
assertThat(user.bookmarks).isEmpty();
assertThat(node.managersEqual(node)).isTrue();
assertThat(actualData).isEqualTo(expectedData);
assertThat(actualRootNodes).containsExactly(rootNode);
assertThat(actualHasAccess).isTrue();
assertThat(hibernateSearchService.isIndexedEntity(String.class)).isFalse();
assertThat(actualHasAccess).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(hibernateSearchService.isIndexedEntity(NonIndexedEntity.class)).isFalse();
assertThat(node.isLeaf()).isFalse();
assertThat(actualHasPermission).isTrue();
assertThat(actualApplications).containsExactlyInAnyOrder(firstApplicationMock, secondApplicationMock);
assertThat(actualUser).isEqualTo(otherUserMock);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualIsAdmin).isFalse();
assertThat(scheduledJobExecutor.scheduledJobIdMap).containsExactly(Map.entry(jobMock, jobId));
assertThat(actualTemplatePath).isEqualTo(expectedTemplatePath);
assertThat(actualProject).isEqualTo(projectMock);
assertThat(actualProjection).isEqualTo(normalProjection);
assertThat(actualPairs).containsExactly(expectedPair);
assertThat(actualString).isEqualTo(expectedString);
assertThat(actualHasAccess).isFalse();
assertThat(actualEquals).isTrue();
assertThat(actualQueryString).isEqualTo(expectedQueryString);
assertThat(expectedQueryString).isEqualTo(actualQueryString);
assertThat(actualEquals).isFalse();
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(node.getRoot()).isSameAs(managerNode);
assertThat(actualTemplatePath).isEqualTo(expectedTemplatePath);
assertThat(node.managersEqual(otherNode)).isFalse();
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(actualHasBookmarked).isTrue();
assertThat(node.getRoot()).isSameAs(node);
assertThat(actualNearestRootTerm).isEqualTo(firstCalcRootTerm);
assertThat(actualHasPermission).isTrue();
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualQuery).isEqualTo(expectedQuery);
assertThat(actualHasPermission).isTrue();
assertThat(actualEquals).isFalse();
assertThat(actualManager).isEqualTo(otherUserMock);
assertThat(hibernateSearchService.isIndexedEntity(IndexedEntity.class)).isTrue();
assertThat(actualApplied).isFalse();
assertThat(actualProjects).isEqualTo(expectedProjects);
assertThat(actualPairs).containsExactly(expectedPair);
assertThat(actualAnnotatedClasses).containsExactlyInAnyOrderElementsOf(expectedReturnedClasses);
assertThat(actualHasAccess).isFalse();
assertThat(argumentResolver.supportsParameter(methodParameterMock)).isFalse();
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(actualIsAdmin).isTrue();
assertThat(actualUserData).containsExactly(userDataMock);
assertThat(actualExists).isFalse();
assertThat(actualAttrOptional) .isPresent() .contains(attributeMock);
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualEquals).isFalse();
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualProjectPage).containsExactly(projectMock);
assertThat(actual).isEqualTo(expected);
assertThat(actualEquals).isTrue();
assertThat(truncatedCar).isEqualTo(car);
assertThat(actualIdentifier).isEqualTo(expectedIdentifier);
assertThat(actualJobLog).isEqualTo(expectedJobLog);
assertThat(actualData).containsExactly(expectedData);
assertThat(actualMap) .containsOnly(MapEntry.entry(userMock, true), MapEntry.entry(otherUserMock, false));
assertThat(actualHasAccess).isFalse();
assertThat(actualIndex).isEqualTo(expectedIndex);
assertThat(actualProjection).isEqualTo(managerProjection);
assertThat(actualQueryString).isEmpty();
assertThat(actualAccessInterval).isEqualTo(accessIntervalMock);
assertThat(actualString).isEqualTo(expectedString);
assertThat(actualShouldUpdate).isTrue();
assertThat(actualLastName).isEqualTo(expectedFullName);
assertThat(actualHasPermission).isFalse();
assertThat(actualShouldUpdate).isTrue();
assertThat(argumentResolver.supportsParameter(methodParameterMock)).isTrue();
assertThat(actualManager).isEqualTo(userMock);
assertThat(scheduledJobExecutor.scheduledJobIdMap).containsExactly(Map.entry(jobMock, jobId));
assertThat(node.managersEqual(otherNode)).isFalse();
assertThat(actualBookmarks).containsExactly(projectMock);
assertThat(actualString).isEqualTo(expectedString);
assertThat(actualProjects).containsExactlyElementsOf(expectedProjects);
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualHasAccess).isTrue();
assertThat(actualHasPermission).isTrue();
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualProjects).containsExactlyElementsOf(expectedProjects);
assertThat(actualHasAccess).isTrue();
assertThat(actualHasPermission).isTrue();
assertThat(actualEquals).isFalse();
assertThat(scheduledJobExecutor.scheduledJobIdMap) .containsOnly(Map.entry(jobMock, existingJobId), Map.entry(otherJobMock, otherJobId));
assertThat(actualHasAccess).isFalse();
assertThat(actualEquals).isFalse();
assertThat(actualHasPermission).isTrue();
assertThat(actualIndex).isEqualTo(expectedIndex);
assertThat(actualAttrOptional) .isNotPresent();
assertThat(node.isLeaf()).isTrue();
assertThat(deletedApplication).isEqualTo(application);
assertThat(actualJobLog).isEqualTo(expectedJobLog);
assertThat(actualHasPermission).isTrue();
assertThat(actualPage).isEqualTo(expectedPage);
assertThat(actualApplications).containsExactlyInAnyOrder(expectedApplication);
assertThat(actualData).isEqualTo(userDataMock);
assertThat(actualProjects).containsExactly(projectMock);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualHasPermission).isFalse();
assertThat(node.isRoot()).isFalse();
assertThat(actualShouldUpdate).isTrue();
assertThat(actualEquals).isFalse();
assertThat(actualHasAccess).isTrue();
assertThat(actualPage).isEqualTo(expectedPage);
assertThat(actualIdentifier).isEqualTo(expectedIdentifier);
assertThat(actualMinDistance).isEqualTo(0);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(updatedProject).isEqualTo(projectMock);
assertThat(node.isRoot()).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(actualShouldAutoRegister).isTrue();
assertThat(actualProjection).isEqualTo(annotatedClass);
assertThat(actualNormalizedContainers).containsExactlyInAnyOrderElementsOf(expectedNormalizedContainers);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(actualHasAccess).isFalse();
assertThat(actualPairs).isEmpty();
assertThat(actualHasPermission).isTrue();
assertThat(actualNearestRootTerm).isEqualTo(secondCalcRootTerm);
assertThat(actualShouldUpdate).isFalse();
assertThat(actualHasAccess).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(actualLob).isEqualTo(expectedLob);
assertThat(actualMinDistance).isEqualTo(0);
assertThat(user.accessIntervals).isEmpty();
assertThat(actualPairs).containsExactly(expectedPair);
assertThat(actualShouldAutoRegister).isTrue();
assertThat(actualMinDistance).isEqualTo(expectedMinDistance);
assertThat(actualPairs).isEmpty();
assertThat(actualShouldUpdate).isFalse();
assertThat(actualUserData).isEqualTo(userDataMock);
assertThat(actualIdentifier).isEqualTo(expectedIdentifier);
assertThat(actualHasAccess).isFalse();
assertThat(actualApplied).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(actualHasPermission).isFalse();
assertThat(actualEquals).isFalse();
assertThat(actualEquals).isFalse();
assertThat(savedProjects).isEqualTo(expectedProjects);
assertThat(actualHasPermission).isTrue();
assertThat(actualHasAccess).isTrue();
assertThat(actualPairs).isEmpty();
assertThat(actualEquals).isFalse();
assertThat(actualHasPermission).isFalse();
assertThat(actualId).isEqualTo(USER_ID);
assertThat(actualProjectPage).containsExactly(projectMock);
assertThat(actualShouldAutoRegister).isFalse();
assertThat(actualQuery).isEqualTo(expectedSimpleQuery);
assertThat(actualShouldUpdate).isTrue();
assertThat(actualEquals).isFalse();
assertThat(actualPairs).isEmpty();
assertThat(truncatedCar).isEqualTo(car);
assertThat(actualExists).isTrue();
assertThat(actualData).isEqualTo(expectedData);
assertThat(actualAccessIntervalOptional).isNotPresent();
assertThat(actualString).isEqualTo(replacement);
assertThat(actualProjects).containsExactly(projectMock);
assertThat(node.isLeaf()).isFalse();
assertThat(actualHasPermission).isTrue();
assertThat(node.isLeaf()).isFalse();
assertThat(actualRootTerm).isEqualTo(term);
assertThat(actualProjection).isEqualTo(expectedProjection);
assertThat(user.accessIntervals).containsExactly(accessIntervalMock);
assertThat(actualAccessInterval).isEqualTo(expectedAccessIntervalMock);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(user.applications).isEmpty();
assertThat(actualIndex).isEqualTo(expectedIndex);
assertThat(truncatedCar).isEqualTo(expectedCar);
assertThat(actualPairs).containsExactlyInAnyOrderElementsOf(expectedPairs);
assertThat(actualResult).isEqualTo(expectedResult);
assertThat(actualShouldUpdate).isFalse();
assertThat(actualApplication).isEqualTo(expectedApplication);
assertThat(actualIndex).isEqualTo(expectedIndex);
assertThat(actualUser).isEqualTo(userMock);
assertThat(actualPairs).isEmpty();
assertThat(node.managersEqual(otherNode)).isTrue();
assertThat(actualPairs).containsExactly(expectedPair);
assertThat(actualProjection).isEqualTo(expectedProjection);
assertThat(truncatedCar).isEqualTo(car);
assertThat(actualEntry).isEqualTo(expectedEntry);
assertThat(actualProject).isEqualTo(projectMock);
assertThat(actualTimeStamp).isEqualTo(expectedTimestamp);
assertThat(actualLob).isEqualTo(expectedLob);
assertThat(actualFieldNames).containsExactlyInAnyOrderElementsOf(cachedFieldNames);
assertThat(user.applications).containsExactly(applicationMock);
assertThat(actualProjection).isEqualTo(annotatedClass);
assertThat(user.bookmarks).containsExactly(project);
assertThat(actualHasPermission).isTrue();
assertThat(savedProject).isEqualTo(projectMock);
assertThat(actualHasAccess).isTrue();
assertThat(actualContextMap).isEqualTo(expectedContextMap);
assertEquals(4, origData.count()); assertEquals(4, listSpark.size()); assertEquals(1 + 1, listSpark.get(i).size()); assertEquals(28 * 28, ((ArrayWritable) listSpark.get(i).iterator().next()).length()); assertEquals(4, list.size()); assertEquals(4, count);
assertEquals(now.getTime(),timeStampMilliVector.get(0));
assertEquals(Float.MIN_VALUE,vector.get(0),1e-2); assertEquals(Float.MAX_VALUE,vector.get(1),1e-2); assertEquals(Integer.MIN_VALUE,vectorInt.get(0),1e-2); assertEquals(Integer.MAX_VALUE,vectorInt.get(1),1e-2);
assertEquals(assertion,recordTest);
assertEquals(1, line.size()); assertFalse(rr.hasNext()); assertEquals(1, lineCount);
assertEquals(h, arr.length); assertEquals(w, arr[0].length); assertEquals(img.getRGB(j, i), arr[i][j]);
assertEquals(85, cropped1.rows()); assertEquals(60, cropped1.cols()); assertEquals(img1.channels(), cropped1.channels()); assertEquals(70, cropped2.rows()); assertEquals(95, cropped2.cols()); assertEquals(img2.channels(), cropped2.channels());
assertEquals(32, img.getFrame().imageHeight); assertEquals(32, img.getFrame().imageWidth); assertEquals(3, img.getFrame().imageChannels); assertEquals(4, array1.rank()); assertEquals(1, array1.size(0)); assertEquals(1, array1.size(1)); assertEquals(h1, array1.size(2)); assertEquals(w1, array1.size(3));
assertEquals(1, fromBase64.size(0));
assertEquals(srcColor, restoredColor);
assertEquals(3, fromBase64.size(0));
assertEquals(assertion,recordTest);
assertEquals(3, shape.length); assertEquals(ch, shape[0]); assertEquals(h, shape[1]); assertEquals(w, shape[2]); assertEquals(srcColor, dstColor);
assertEquals("Returned annotation must be \'Attribute\'.", "Attribute", mapper.getAttributeAnnotations(null)[0]);
assertThat(titleInfoEntityList, not(nullValue()));
assertThat( searchDataStore, is( notNullValue() ) );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( testSubscriber.getOnNextEvents().size(), is( 0 ) );
assertThat( videoDataStore ) .isNotNull() .isInstanceOf( MasterBackendVideoDataStore.class );
assertThat( defaultErrorBundle.getErrorMessage(), equalTo( "Unknown error" ) );
assertThat( mediaItemDataStore ) .isNotNull() .isInstanceOf( DiskMediaItemDataStore.class );
assertThat( recordedProgramEntityList, not( nullValue() ) );
assertThat( actualMessage, is( equalTo( expectedMessage ) ) );
assertThat( mediaItemDataStore ) .isNotNull() .isInstanceOf( MasterBackendMediaItemDataStore.class );
assertThat( searchDataStore, is( notNullValue() ) );
assertThat( recordedProgramEntity, not( nullValue() ) );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( actualMessage, is( equalTo( expectedMessage ) ) );
assertThat( userDataStore, is( notNullValue() ) ); assertThat( userDataStore, is( instanceOf( MasterBackendDvrDataStore.class ) ) );
assertThat( mediaItemDataStore ) .isNotNull() .isInstanceOf( MasterBackendMediaItemDataStore.class );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( programEntities, not(nullValue() ) ); assertThat( mediaItems, not( nullValue()) ); assertThat( mediaItems, hasSize(equalTo( 40 ) ) ); assertThat( mediaItem.isValid(), is( true ) ); assertThat( mediaItem.validationErrors(), hasSize( 0 ) );
assertThat( subscriber.getOnNextEvents() ) .isNotNull() .hasSize( 1 );
assertThat( booleanEntity, is( false ) );
assertTrue("The file returned for the resource path does not exist", resourceFile.exists()); assertTrue("The file returned is not a file but a directory.", !resourceFile.isDirectory());
assertTrue(f.exists());
assertEquals(vector, new SparseDoubleVector(sum));
assertTrue("Invalid process ID obtained", pid > 1);
assertFalse("The given set isn\'t refelxive, but calculation says it is.", this.set.isReflexive());
assertEquals(expectation, standardDeviation, .0);
assertEquals(10, vector1.dotProduct(vector2), DOUBLE_COMPARISON_DELTA);
assertEquals("Prediction vector and ground truth value vector are not of the same length", RELEVANT_LABELS.length, relevantLabels.length); assertEquals("Relevant labels do not match. Expected: " + Arrays.toString(RELEVANT_LABELS) + " actual: " + Arrays.toString(relevantLabels), RELEVANT_LABELS[i], relevantLabels[i]);
assertEquals("Loss not as expected.", 0.625, asymmetricLoss.loss(expected, predicted), 1E-8);
assertEquals(expectation, distance, 1.0E-5);
assertEquals("The folds of split " + i + " do not match.", this.testSplits.get(i), this.splitSet.getFolds(i));
assertEquals("Prediction vector and ground truth value vector are not of the same length", EXPECTED_THRESHOLDED_SINGLE.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ".", EXPECTED_THRESHOLDED_SINGLE[i], pred[i], DOUBLE_DELTA);
assertEquals(expectation, distance, 0);
assertArrayEquals(expectation, transformed, 0.0001);
assertEquals(i, l.get(index));
assertTrue("Node does not contain all labels", node.getLabels().containsAll(Arrays.asList(1, 2, 5)));
assertTrue(SetUtil.calculateNumberOfTotalOrderings(unorderedSet) == 24); assertTrue(SetUtil.calculateNumberOfTotalOrderings(sortedSetA) == 6); assertTrue(SetUtil.calculateNumberOfTotalOrderings(sortedSetB) == 4);
assertTrue(SetUtil.differenceNotEmpty(a, b));
assertEquals(String.format(message, complexity, expectation), expectation, complexity, 0.001);
assertEquals("Hamming loss differs", EXPECTED_HAM, owaLoss, DELTA);
assertEquals("The content of the read-in resource does not match the expected content", EXPECTED_CONTENT, actualContent);
assertFalse("c was removed but contains still says it\'s in.", this.set.contains("c")); assertTrue("Since c was removed from the set, d before a should be allowed but isn\'t.", this.set.allowsABeforeB(D, A)); assertTrue("Since c was removed from the set, d before b should be allowed but isn\'t.", this.set.allowsABeforeB(D, B));
assertEquals(expectedValue, vector.getValue(0), DOUBLE_COMPARISON_DELTA);
assertEquals(expectation, standardDeviation, 1e-5);
assertEquals("The elements returned by the FilteredIterable are not correct.", expected.toString(), actual.toString());
assertEquals("Subset 0/1 loss differs", EXPECTED_S01, owaLoss, DELTA);
assertEquals(expectation, variance, 1e-5);
assertEquals("ID not as expected.", "1", store.getAsString("id")); assertEquals("Column \'a\' not as expected.", "1", store.getAsString("a")); assertEquals("Column \'b\' not as expected.", "y", store.getAsString("b")); assertEquals("Column \'c\' not as expected.", "3", store.getAsString("c"));
assertEquals("The number of values is not correct", VALUES.size(), att.getValues().size()); assertTrue("The set of possible values is not correct", VALUES.containsAll(att.getValues()));
assertEquals(expectation, mean, .0);
assertEquals("The class index could not be read correctly", CLASS_INDEX, (int) store.getAsInt(ArffDatasetAdapter.K_CLASS_INDEX)); assertEquals("The relation name could not be extracted correctly", RELATION_NAME, store.getAsString(ArffDatasetAdapter.K_RELATION_NAME));
assertEquals(expectation, distance, 1.0E-5);
assertEquals(expectation, mean, .0);
assertFalse("TTest identifies different distributions which is not the case", StatisticsUtil.twoSampleTTestSignificance(posSampleA, posSampleB)); assertTrue("TTest did not detect different distributions although they are.", StatisticsUtil.twoSampleTTestSignificance(negSampleA, negSampleB));
assertEquals(this.readRes(resFile.getPathName()), this.readRes(res2File.getPathName()));
assertTrue("No entry added!", numEntriesAfter < numEntriesBefore);
assertEquals("F1Score not correct", f1score[i], ConfusionMetrics.getF1Score(tp(a[i], b[i]), fp(a[i], b[i]), fn(a[i], b[i])), 1E-8);
assertEquals(expectation, distance, 1.0E-5);
assertArrayEquals(expectation, transformed, 0.0001);
assertEquals(expectation, variance, 1e-5);
assertTrue("Difference IS empty, but SetUtil.differenceNotEmpty returns true", !SetUtil.differenceNotEmpty(a, b));
assertEquals("Recall not correct", recall[i], ConfusionMetrics.getRecall(tp(a[i], b[i]), fn(a[i], b[i])), 1E-8);
assertEquals("Prediction vector and ground truth value vector are not of the same length", GT_VECTOR.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ".", GT_VECTOR[i], pred[i], DOUBLE_DELTA);
assertEquals("Subset 0/1 loss differs", EXPECTED_S01, owaLoss, DELTA);
assertEquals("Prediction vector and ground truth value vector are not of the same length", EXPECTED_THRESHOLDED_VECTOR.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ".", EXPECTED_THRESHOLDED_VECTOR[i], pred[i], DOUBLE_DELTA);
assertEquals("Log loss does not work as expected.", -Math.log(1E-15), ll.loss(0, PREDICTED), 1E-8); assertEquals("Log loss does not work as expected.", -Math.log(0.4), ll.loss(1, PREDICTED), 1E-8); assertEquals("Log loss does not work as expected.", -Math.log(1.0 - 1E-15), ll.loss(2, PREDICTED), 1E-8);
assertEquals(expectedVector, vector);
assertEquals(expectation, distance, 1.0E-5);
assertTrue("No entry added!", numEntriesAfter > numEntriesBefore);
assertEquals("Hamming loss differs", EXPECTED_HAM, owaLoss, DELTA);
assertEquals(String.format(message, complexity, expectation), expectation, complexity, 0.001);
assertEquals(expectation, distance, 1e-5);
assertEquals(expectation, variance, 1e-5);
assertTrue(!SetUtil.differenceEmpty(a, b));
assertEquals("The number of folds does not match for the first split.", this.testSplits.get(0).size(), this.splitSet.getNumberOfFoldsPerSplit());
assertArrayEquals(data, vector.asArray(), DOUBLE_COMPARISON_DELTA);
assertEquals("Precision not correct", precision[i], ConfusionMetrics.getPrecision(tp(a[i], b[i]), fp(a[i], b[i])), 1E-8);
assertEquals(expectation, distance, 1.0E-5);
assertEquals(vector, new SparseDoubleVector(value2));
assertTrue(true);
assertEquals("Prediction vector and ground truth value vector are not of the same length", EXPECTED_THRESHOLDED_SINGLE.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ":" + j + ".", EXPECTED_THRESHOLDED_SINGLE[i][j], pred[i][j], DOUBLE_DELTA);
assertEquals(expectation, distance, 1e-5);
assertEquals(expectation, distance, 1.0E-5);
assertEquals(expectation, distance, 0);
assertTrue(true);
assertFalse("Wilcoxon Signed Rank Test detects different distributions which is not the case.", StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(posSampleA, posSampleB)); assertTrue("Wilcoxon Signed Rank Test did not detect different distributions although they are.", StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(negSampleA, negSampleB));
assertEquals(0.0, scaledFun.apply(0), 0.001); assertEquals(1000.0, scaledFun.apply(100), 0.001);
assertTrue(true);
assertEquals(expectation, distance, 1.0E-5);
assertArrayEquals(expectation, transformed, 0.0001);
assertEquals(String.format(message, complexity, expectation), expectation, complexity, 0.001);
assertArrayEquals(expectation, transformed, 0.0001);
assertEquals("Prediction vector and ground truth value vector are not of the same length", IRRELEVANT_LABELS.length, irrelevantLabels.length); assertEquals("Relevant labels do not match. Expected: " + Arrays.toString(IRRELEVANT_LABELS) + " actual: " + Arrays.toString(irrelevantLabels), IRRELEVANT_LABELS[i], irrelevantLabels[i]);
assertEquals("Prediction vector and ground truth value vector are not of the same length", EXPECTED_THRESHOLDED_VECTOR.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ":" + j + ".", EXPECTED_THRESHOLDED_VECTOR[i][j], pred[i][j], DOUBLE_DELTA);
assertEquals(expectation, standardDeviation, 1e-5);
assertEquals("Subset 0/1 loss differs", EXPECTED_S01, owaLoss, DELTA);
assertEquals(vector, new SparseDoubleVector(sum));
assertEquals(expectedNumInstances, result.getNumberOfInstances()); assertEquals(expectedNumSteps, result.getValues(0)[0].length); assertEquals(expectedNumVariables, result.getNumberOfVariables()); assertEquals(expectedNumTargets, result.getTargets().length);
assertEquals(expectation, distance, 1.0E-5);
assertEquals(10, vector1.dotProduct(vector2), DOUBLE_COMPARISON_DELTA);
assertEquals(String.format(message, complexity, expectation), expectation, complexity, 0.001);
assertEquals(expectedValue, vector.getValue(0), DOUBLE_COMPARISON_DELTA);
assertEquals(2, output.getValues(0)[0][0], 1.0E-5);
assertNotEquals(vector, vectorCopy);
assertEquals("Size must be 1", 1, col.size()); assertTrue("Must contain the label index itself", col.contains(LABEL_INDEX));
assertEquals(expectation, mostFrequentlabel);
assertEquals(expectedVector, vector);
assertArrayEquals(data, vector.asArray(), DOUBLE_COMPARISON_DELTA);
assertEquals(expectation, distance, 1.0E-5);
assertTrue("Difference IS empty, but SetUtil.differenceEmpty returns false", SetUtil.differenceEmpty(a, b));
assertEquals(expectation, distance, 1.0E-5);
assertNotEquals(vector, vectorCopy);
assertEquals(expectation, distance, 1.0E-5);
assertEquals(expectation, distance, 1.0E-5);
assertEquals("Loss must be 0.0", 0.0, asymmetricLoss.loss(expected, predicted), 1E-8);
assertEquals("Prediction vector and ground truth value vector are not of the same length", GT_MATRIX.length, pred.length); assertEquals("Prediction vector is not as expected for index " + i + ".", GT_MATRIX[i][j], pred[i][j], DOUBLE_DELTA);
assertEquals(expectation, distance, 0);
assertNotNull(preds);
assertTrue("Since a before e was added, this should also be allowed.", this.set.allowsABeforeB(A, e)); assertTrue("Since e before b was added, this should also be allowed.", this.set.allowsABeforeB(e, B)); assertTrue("Since e before b was added, this should also be allowed.", this.set.allowsABeforeB(e, C)); assertTrue("Since e before b was added, this should also be allowed.", this.set.allowsABeforeB(e, D));
assertEquals("The returned name of the attribute does not match the defined one.", this.getExpectedAttributeName(), this.getTestedAttribute().getName());
assertEquals("toString is not giving the correct result.", "J48(J48(1,2),5,7)", node.toString());
assertEquals(expectation, distance, 0.001);
assertEquals(expectation, distance, 0);
assertEquals(expectation, distance, 0);
assertEquals(vector, new SparseDoubleVector(value2));
assertEquals("Number of splits does not match", this.testSplits.size() + 1, this.splitSet.getNumberOfSplits()); assertEquals("Last split does not match the shape of the added split", this.splitSet.getNumberOfFoldsForSplit(this.splitSet.getNumberOfSplits() - 1), newSplit.size());
assertArrayEquals(expectation, mostFrequentLabels.stream().mapToInt(i -> i).toArray());
assertThat(ruleNames).hasSize(2); assertThat(ruleNames).contains("perSeconds", "perHours");
assertThat(time).isCloseTo(System.currentTimeMillis() / 1000L, Offset.offset(2L));
assertThat(ruleNames).hasSize(2); assertThat(ruleNames).contains("localhostPerSeconds", "localhostPerHours");
assertThat(rateLimiter1).isSameAs(rateLimiter2);
assertThat(scriptLoader.storedScript().block(Duration.ofSeconds(5)).getSha()).isNotEmpty(); assertThat(scriptLoader.storedScript().block(Duration.ofSeconds(5)).getSha()).isNotEmpty();
assertThat(rateLimiter1).isNotSameAs(rateLimiter2);
assertThat(sha).isNotEmpty(); assertThat(extension.getScriptingReactiveCommands().scriptExists(sha).blockFirst()).isTrue();
assertThat(rateLimiter1).isSameAs(rateLimiter2);
assertThat(rateLimiter1).isSameAs(rateLimiter2);
assertThat((String) extension.getScriptingReactiveCommands().evalsha(storedScript.getSha(), VALUE).blockFirst()).isEqualTo("hello world"); assertThat((String) extension.getScriptingReactiveCommands().evalsha(storedScript.getSha(), VALUE).blockFirst()).isEqualTo("hello world");
assertThat(ruleNames).hasSize(2); assertThat(ruleNames).contains("localhostPerSeconds", "localhostPerHours");
assertThat((String) result).isEqualTo("hello world");
assertThat(rateLimiter1).isSameAs(rateLimiter2);
assertThat(RateLimitUtils.coalesce(one, two)).isEqualTo(one);
assertThat(time).isNotNull().isNotNegative().isNotZero();
assertThat(sha).isNotEmpty(); assertThat(extension.getScriptingReactiveCommands().scriptExists(sha).blockFirst()).isTrue();
assertThat(RateLimitUtils.coalesce(one, two)).isEqualTo(two);
assertThat(time).isNotNull().isNotNegative().isNotZero();
assertThat(time).isCloseTo(System.currentTimeMillis() / 1000L, Offset.offset(2L));
assertThat(rateLimiter1).isNotSameAs(rateLimiter2);
assertEquals("Unknown command \\"test\\"", String.format(invocationOnMock.getArguments()[0].toString(), invocationOnMock.getArguments()[1])); assertEquals("test", Iterables.get(repl.history(), 0));
assertEquals("Unknown command \\"test\\"", String.format(invocationOnMock.getArguments()[0].toString(), invocationOnMock.getArguments()[1])); assertEquals("help test", Iterables.get(repl.history(), 0));
assertTrue(call.equals(call("cmd")));
assertEquals("Displaying help for \\"save\\"", String.format(invocationOnMock.getArguments()[0].toString(), invocationOnMock.getArguments()[1])); assertEquals("save", usage.command); assertEquals("help save", Iterables.get(repl.history(), 0));
assertArrayEquals(new String[] { "a", "t" }, commandInvocation.args());
assertTrue(call.equals(call("cmd"))); assertTrue(call.hashCode() == call("cmd").hashCode());
assertEquals("test", call.command()); assertArrayEquals(new String[0], call.args()); assertEquals(sessionState, ss); assertEquals("test", Iterables.get(repl.history(), 0));
assertTrue(Arrays.equals(CONTENT, uncompressedContentOut.toByteArray()));
assertThat(create()).isNotNull();
assertThat(sut.scheduler()).isNull();
assertThat(sut).isEqualTo(validRxNetworkInfoDetailed);
assertThat(sut).isNotEqualTo(null);
assertThat(sut.observe().blockingFirst()).isFalse();
assertThat(sut).isEqualTo(sut);
assertThat(isLessThanLollipop()).isTrue();
assertThat(sut.observe().blockingFirst()).isFalse();
assertThat(isAtLeastLollipop()).isTrue();
assertThat(sut.get()).isNotNull();
assertThat(npe).hasMessageContaining(ERROR_MESSAGE_ARG);
assertThat(sut).isEqualTo(DEFAULT_RXNETWORK_INFO);
assertThat(NON_NULL_ARG).isEqualTo(result);
assertThat(isAtLeastMarshmallow()).isTrue();
assertThat(sut).isEqualTo(validRxNetworkInfo);
assertThat(npe).hasMessage(ERROR_MESSAGE_RESULT);
assertThat(sut).isNotNull();
assertThat(sut).isEqualTo(DEFAULT_RXNETWORK_INFO);
assertThat(NON_NULL_ARG).isEqualTo(result);
assertThat(isLessThanMarshmallow()).isTrue();
assertThat(sut).isEqualTo(DEFAULT_RXNETWORK_INFO);
assertThat(NON_NULL_ARG).isEqualTo(result);
assertThat(sut).isNotEqualTo(NOT_RXNETWORK_INFO_INSTANCE);
assertTrue(cl.isIntersected()); assertEquals(0, cl.size());
assertFalse(test.isAlreadyAllShards(set("1"), null)); assertFalse(test.isAlreadyAllShards(set("1"), set())); assertEquals(IllegalStateException.class, e.getClass()); assertTrue(test.isAlreadyAllShards(set("1"), set("1")));
assertNotNull(plist); assertEquals(4, plist.size()); assertEquals("test", p.getName());
assertEquals(set(1), test.locateForBetween((exp(M, 1, 1))));
assertEquals("1", table.getShardId());
assertEquals(set(), test.locateForBetween((exp(M, 2, 1))));
assertEquals(4, dao.deleteBySample(sample)); assertEquals(0, dao.queryBySample(sample).size());
assertEquals(all, test.locateForLessThan(exp(M, 0))); assertEquals(all, test.locateForLessThan(exp(M, 1))); assertEquals(all, test.locateForLessThan(exp(M, 2))); assertEquals(all, test.locateForLessThan(exp(M, 3))); assertEquals(all, test.locateForLessThan(exp(M, 4)));
assertEquals(1, i); assertEquals(TABLE_MODE, ret.length); assertNull(dao.queryByPk(pk));
assertFalse(cl.isIntersected()); assertEquals(3, cl.size()); assertTrue(cl.get(1) instanceof ColumnCondition); assertTrue(cl.get(2) instanceof ColumnCondition); assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertEquals(1, dao.update(pk)); assertEquals("Tom", pk.getName()); assertEquals(100, pk.getCountryID().intValue()); assertEquals(200, pk.getCityID().intValue());
assertFalse(test.isShardByDb()); assertTrue(test.isShardByDb());
assertEquals(1000000, set.size());
assertEquals(1, i); assertEquals(4, ret.length); assertEquals("Tom", pk.getName()); assertEquals(100, pk.getCountryID().intValue()); assertEquals(200, pk.getCityID().intValue());
assertArrayEquals(new int[]{1, 1, 1}, ret); assertEquals("777", p.getName()); assertEquals("1777", p.getName()); assertEquals("2777", p.getName());
assertEquals("666", p.getName());
assertEquals(3, pl.size()); assertEquals(1, pl.get(0).getPeopleID().intValue()); assertEquals(2, pl.get(1).getPeopleID().intValue()); assertEquals(3, pl.get(2).getPeopleID().intValue());
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertEquals(getReferName() + " NOT IN ( ? )", c.notIn(values).build(bc));
assertEquals(1, i); assertEquals(TABLE_MODE, ret.length); assertNull(dao.queryByPk(pk));
assertFalse(DataSyncConfiguration.getInstance().isEnableSyncMode()); assertEquals("TestSynchronizer", dasDataSynchronizer1.getClass().getSimpleName()); assertEquals("TestSynchronizer", dasDataSynchronizer2.getClass().getSimpleName()); assertTrue(DataSyncConfiguration.getInstance().isEnableSyncMode());
assertEquals(1, i); assertEquals(4, ret.length); assertEquals("Tom", pk.getName()); assertEquals(100, pk.getCountryID().intValue()); assertEquals(200, pk.getCityID().intValue());
assertEquals(set("1", "2", "3"), test.getAllShards(exp(OperatorEnum.EQUAL, "sa")));
assertFalse(cl.isIntersected()); assertEquals(2, cl.size()); assertTrue(cl.get(0) instanceof ColumnCondition); assertTrue(cl.isIntersected()); assertEquals(3, cl.size()); assertTrue(cl.get(0) instanceof ColumnCondition); assertTrue(cl.get(1) instanceof ColumnCondition); assertTrue(cl.get(2) instanceof ColumnCondition);
assertEquals(0, dao.insert(Collections.emptyList()));
assertNotNull(p); assertEquals("test", p.getName());
assertEquals(3, plist.size()); assertEquals("test", plist.get(i).getName());
assertEquals("t.col", c.getReference(new DefaultBuilderContext()));
assertFalse(cl.isIntersected()); assertEquals(2, cl.size()); assertTrue(cl.get(1) instanceof ColumnCondition); assertEquals(2, cl.size());
assertEquals(set("2", "3"), test2.locateForCombination(exp(OperatorEnum.EQUAL, "1"), OperatorEnum.EQUAL, "2", OperatorEnum.EQUAL, "3")); assertEquals(set("2", "3"), test2.locateForCombination(ctx, OperatorEnum.EQUAL, "2", OperatorEnum.EQUAL, "3"));
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertNotNull(plist); assertEquals(4, plist.size()); assertEquals("test", pk.getName());
assertTrue(cl.isIntersected()); assertEquals(2, cl.size()); assertTrue(cl.get(0) instanceof ColumnCondition);
assertEquals(getReferName() + " AS c", c.build(new DefaultBuilderContext()));
assertNotNull(pk); assertEquals("test", pk.getName());
assertEquals(all, test.locateForGreaterThan(exp(M, 0))); assertEquals(all, test.locateForGreaterThan(exp(M, 1))); assertEquals(all, test.locateForGreaterThan(exp(M, 2))); assertEquals(all, test.locateForGreaterThan(exp(M, 3))); assertEquals(all, test.locateForGreaterThan(exp(M, 4)));
assertEquals(set(0), test.locateForEqual(exp(M, 0))); assertEquals(set(1), test.locateForEqual(exp(M, 1))); assertEquals(set(2), test.locateForEqual(exp(M, 2))); assertEquals(set(0), test.locateForEqual(exp(M, 3))); assertEquals(set(1), test.locateForEqual(exp(M, 4)));
assertEquals(4, plist.size()); assertEquals(i + 1, ((Number)plist.get(i)).intValue());
assertEquals(getReferName() + " NOT BETWEEN ? AND ?", column().notBetween(value, value).build(bc));
assertTrue(hints.getDiagnose().toString().contains(SegmentConstants.WITH_NO_LOCK.getText())); assertEquals(4, plist.size()); assertNotNull(p); assertEquals(k+1, pk.getPeopleID().intValue()); assertEquals("test", pk.getName());
assertEquals(IllegalArgumentException.class, e.getClass()); assertEquals(set(0), test.locateForEqual(exp(M, 0L))); assertEquals(set(0), test.locateForEqual(exp(M, new Long(0)))); assertEquals(set(0), test.locateForEqual(exp(M, "0"))); assertEquals(IllegalArgumentException.class, e.getClass());
assertEquals(getReferName() + " ASC", o.build(new DefaultBuilderContext()));
assertEquals("2", ctx.getValue()); assertEquals(OperatorEnum.BEWTEEN, ctx.getOperator());
assertEquals(0, i);
assertEquals(e.getClass(), IllegalArgumentException.class);
assertEquals(e.getClass(), IllegalArgumentException.class);
assertEquals("name", c.getColumnName()); assertEquals(JDBCType.VARBINARY, c.getType());
assertEquals(3, plist.size()); assertEquals(i + 1, ((Number)plist.get(i)).intValue());
assertEquals(0, i);
assertEquals(exp, test.locateTableShards(new TableShardingContext("appId", "logicDbName", null, all(), new Hints(), conditions)));
assertEquals(getReferName() + " IN ( ? )", c.in(values).build(bc));
assertEquals(getReferName() + " BETWEEN ? AND ?", c.between(value, value).build(bc));
assertEquals(4, dao.countBySample(pk)); assertEquals(1, dao.countBySample(pk)); assertEquals(1, dao.countBySample(pk));
assertTrue(e instanceof SQLException);
assertEquals("t ali", table.build(new DefaultBuilderContext()));
assertEquals(1, plist.size()); assertEquals("test", (String)plist.get(0));
assertFalse(cl.isIntersected()); assertEquals(4, cl.size()); assertTrue(cl.get(0) instanceof ColumnCondition); assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertTrue(hints.getDiagnose().toString().contains(SegmentConstants.WITH_NO_LOCK.getText())); assertEquals(TABLE_MODE, plist.size()); assertEquals(1, list.size()); assertNotNull(p); assertEquals(k+1, pk.getPeopleID().intValue()); assertEquals("test", pk.getName());
assertEquals("t", table.getName());
assertEquals("aaa", all[0].getColumnName()); assertEquals(JDBCType.BIGINT, all[0].getType()); assertEquals("bbb", all[1].getColumnName()); assertEquals(JDBCType.CHAR, all[1].getType());
assertEquals(set(), test2.locateForIntersection(ctx, OperatorEnum.EQUAL, "2", OperatorEnum.EQUAL, "3")); assertEquals(set("2"), test2.locateForIntersection(ctx, OperatorEnum.EQUAL, "2", OperatorEnum.EQUAL, "2"));
assertEquals(4, dao.deleteBySample(sample)); assertEquals(0, dao.queryBySample(sample).size());
assertTrue(cl.isIntersected()); assertEquals(4, cl.size());
assertNotNull(pk); assertEquals("test", pk.getName());
assertEquals(batchRet, x); assertEquals(TABLE_MODE, ret.length); assertNotNull(plist); assertEquals(TABLE_MODE, plist.size()); assertNotNull(p1.getPeopleID());
assertEquals(e.getClass(), IllegalArgumentException.class);
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertFalse(cl.isIntersected()); assertEquals(3, cl.size()); assertTrue(cl.get(1) instanceof ColumnCondition); assertTrue(cl.get(2) instanceof ColumnCondition); assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertEquals(4, n.longValue());
assertEquals(batchRet, x); assertEquals(TABLE_MODE, ret.length); assertNotNull(plist); assertEquals(TABLE_MODE, plist.size()); assertNotNull(p1.getPeopleID());
assertEquals(exp, test.locateDbShards(new ShardingContext("appId", "logicDbName", all(), new Hints(), conditions)));
assertNotSame(oldSingleDataSource, ((AtomicReference<SingleDataSource>)FieldUtils.readField(dataSource, "dataSourceReference", true)).get()); assertEquals(before, after);
assertNotNull(pk); assertEquals(j+1, pk.getPeopleID().intValue()); assertEquals("test", pk.getName()); assertEquals(4, n.longValue()); assertNotNull(pk); assertEquals(j+1, pk.getPeopleID().intValue()); assertEquals("test", pk.getName()); assertEquals(4, n.longValue());
assertFalse(hints.getDiagnose().toString().contains(SegmentConstants.WITH_NO_LOCK.getText())); assertFalse(plist.isEmpty());
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertEquals(0, x);
assertFalse(cl.isIntersected()); assertEquals(3, cl.size()); assertTrue(cl0.isIntersected()); assertEquals(2, cl0.size()); assertTrue(cl0.isIntersected()); assertEquals(2, cl0.size());
assertEquals(3, ret.length); assertEquals(1, i);
assertEquals(1, dao.update(pk)); assertEquals("Tom", pk.getName()); assertEquals(100, pk.getCountryID().intValue()); assertEquals(200, pk.getCityID().intValue());
assertFalse(cl.isIntersected()); assertEquals(3, cl.size()); assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertFalse(test.isShardByTable()); assertTrue(test.isShardByTable());
assertEquals(4, dao.countBySample(pk)); assertEquals(1, dao.countBySample(pk)); assertEquals(1, dao.countBySample(pk));
assertEquals(IllegalStateException.class, e.getClass());
assertEquals(getReferName() + " DESC", o.build(new DefaultBuilderContext()));
assertTrue(cl.isIntersected()); assertEquals(2, cl.size());
assertEquals(4L, count); assertEquals(-1, next.getLastSentModificationNumber()); assertNull(next.getVenOpt());
assertTrue(exception);
assertNotNull(createTrustStore); assertNotNull(createTrustStore); assertTrue(exception);
assertEquals(String.valueOf(scOk), post.getEiResponse().getResponseCode());
assertNotNull(oadrRequestReregistration);
assertEquals(String.valueOf(scOk), post.getEiResponse().getResponseCode());
assertNotNull(createKeyStore); assertTrue(exception);
assertEquals(3, findToSentEvent.getTotalElements()); assertEquals(2, findToSentEvent.getTotalElements()); assertEquals(1, findToSentEvent.getTotalElements()); assertEquals(1, findToSentEvent.getTotalElements()); assertEquals(2, findToSentEvent.getTotalElements()); assertEquals(3, findToSentEvent.getTotalElements());
assertNotNull(createTrustManagerFactory); assertNotNull(createTrustManagerFactory); assertTrue(exception);
assertNotNull(duration); assertEquals("PT0S", duration); assertNotNull(duration); assertEquals("PT2S", duration);
assertFalse(oadr20bVENEiEventService.isUpdatedEvent(VTN_SOURCE, requestId, createOadrEvent)); assertTrue(oadr20bVENEiEventService.isUpdatedEvent(VTN_SOURCE, requestId, createOadrEvent)); assertTrue(exception);
assertEquals(0, findMissingEventID.size()); assertEquals(1, findMissingEventID.size()); assertEquals(eventId2, findMissingEventID.get(0));
assertNotNull(createSSLContext);
assertEquals(new Long(0), andIncrease); assertEquals(new Long(1), andIncrease); assertEquals(new Long(2), andIncrease);
assertEquals(1, convertMvcResultToOadrUserDtoList.size()); assertEquals("admin", convertMvcResultToOadrUserDtoList.get(0).getUsername());
assertTrue(exception);
assertEquals(TestUtils.readFile(TestUtils.TEST_FINGERPRINT_20A), oadr20aFingerprint);
assertNotNull(parsePrivateKey); assertNotNull(parsePrivateKey); assertTrue(exception); assertTrue(exception);
assertNotNull(parseCertificate); assertNotNull(parseCertificate); assertTrue(exception); assertTrue(exception);
assertNull(duration); assertNotNull(duration); assertEquals(new Long(1000), duration); assertTrue(ex);
assertTrue(exception);
assertEquals("f2d3fcdce97f021064356321534e2fda", md5Hex);
assertEquals(1, findToSentEvent.size()); assertEquals(1, findToSentEvent.size());
assertEquals(2, convertMvcResultToVenDemandResponseEventDtoList.size());
assertEquals(1, oadr20bVENEiEventService.getOadrEvents(VTN_SOURCE).size()); assertNotNull(oadr20bVENEiEventService.getOadrEvents(VTN_SOURCE).get("event1"));
assertTrue(exception);
assertTrue(exception);
assertNotNull(duration); assertEquals(new Long(1000), duration); assertTrue(ex);
assertNull(findOneByUsername.getRegistrationId());
assertEquals(4L, count); assertEquals(2L, count); assertEquals(0L, count);
assertTrue(oadr20bVENEiEventService.getOadrEvents(VTN_SOURCE).isEmpty()); assertEquals(1, oadr20bVENEiEventService.getOadrEvents(VTN_SOURCE).size()); assertNotNull(oadr20bVENEiEventService.getOadrEvents(VTN_SOURCE).get(eventId));
assertEquals("2E:55:12:81:B9:EE:9C:46:72:1D", venConfig.getVenId()); assertEquals("oadr-ven.avob.com", venConfig.getVenName()); assertEquals(false, venConfig.getXmlSignature()); assertEquals(false, venConfig.getReportOnly()); assertEquals(false, venConfig.getPullModel()); assertEquals(new Long(5), venConfig.getPullFrequencySeconds());
assertEquals(1, convertMvcResultToOadrUserDtoList.size()); assertEquals("app", convertMvcResultToOadrUserDtoList.get(0).getUsername());
assertEquals(TestUtils.readFile(TestUtils.TEST_FINGERPRINT_20B), oadr20bFingerprint);
assertNotNull(resp); assertEquals(resp.getEiResponse().getResponseCode(), "200");
assertNotNull(dto); assertEquals("", mockHttpServletResponse.getContentAsString());
assertNotNull(createKeyManagerFactory); assertTrue(exception);
assertTrue(exception);
assertEquals(digestUserDetail.getPassword(), encodeDigest); assertEquals(grantDigestRole.getPassword(), encodeDigest); assertTrue(exception);
assertTrue(exception);
assertNotNull(resp); assertEquals(resp.getEiResponse().getResponseCode(), String.valueOf(Oadr20bApplicationLayerErrorCode.NOT_RECOGNIZED_453));
assertNotNull(createSSLContext); assertNotNull(createSSLContext); assertTrue(exception);
assertFalse(oadr20bVENEiEventService.isKnownEvent(VTN_SOURCE, createOadrEvent)); assertTrue(oadr20bVENEiEventService.isKnownEvent(VTN_SOURCE, createOadrEvent));
assertNotNull(oadr20bVENEiRegisterPartyService.getRegistration(multiConfig)); assertNotNull(oadrCanceledPartyRegistration); assertNull(oadr20bVENEiRegisterPartyService.getRegistration(multiConfig));
assertNotNull(duration); assertEquals("PT0S", duration); assertNotNull(duration); assertEquals("PT1S", duration); assertNotNull(duration); assertEquals("P1DT1H1M1S", duration); assertTrue(ex);
assertTrue(exception);
assertTrue(exception);
assertNotNull(resp); assertEquals(resp.getEiResponse().getResponseCode(), String.valueOf(Oadr20bApplicationLayerErrorCode.NOT_RECOGNIZED_453));
assertEquals("admin", convertMvcResultToOadrUserDto.getUsername()); assertTrue(convertMvcResultToOadrUserDto.getRoles().contains("ROLE_ADMIN")); assertEquals("app", convertMvcResultToOadrUserDto.getUsername()); assertTrue(convertMvcResultToOadrUserDto.getRoles().contains("ROLE_DEVICE_MANAGER"));
assertEquals(dimSet.size(), 4);
assertThat(dsSetList.size(), equalTo(1)); assertThat(dsSetList.get(0).getName(), equalTo("quark_default"));
assertEquals(dimSet.size(), 8);
assertEquals("auto-triggered", sensor.getStatus());
assertEquals(expected, out.toString());
assertNotNull(s);
assertNotNull(offering);
assertEquals("chips", sorter.bin()); assertNull(oven.bin()); assertNull(robot.location()); assertNull(robot.bin()); assertNull(robot.bin()); assertEquals(oven, robot.location()); assertNull(sorter.bin()); assertEquals("chips", oven.bin());
assertEquals("Number of scheduled offerings: 0\\n", buffer.toString());
assertEquals(1, analysis.size()); assertTrue(analysis.contains("Too few credits"));
assertTrue(result.equals(valid1) || result.equals(valid2));
assertTrue(matcher.match(expected, actual, clipLimit, delta)); assertTrue(!matcher.match(expected, actual, clipLimit, delta)); assertTrue(!matcher.match(expected, actual, clipLimit, delta));
assertEquals(srcWithPhoto, bitmap);
assertEquals(srcWithoutPhotoInactive, bitmap);
assertEquals(srcOwnPhotoInactive, bitmap);
assertEquals(srcWithPhotoInactive, bitmap);
assertEquals(srcOwnPhoto, bitmap);
assertEquals(srcWithoutPhoto, bitmap);
assertEquals(REFERENCE_RESOURCE_URI, result);
assertEquals(REFERENCE_NAME, result);
assertEquals(REFERENCE_URL, result);
assertThat(consumer.getCurrentValue(), is("First Time")); assertThat(consumer.getCurrentValue(), is("Do it again!"));
assertThat( logger.beforeUpdate, contains(CapturingLogger.BeforeUpdateArgs.create("mah model", 1)));
assertThat(action.getRunCount(), is(1)); assertThat(action.getRunCount(), is(2));
assertThat(underTest.getModel().name, equalTo("initial model"));
assertThat(recordedEvents.size(), equalTo(1)); assertThat(recordedEvents.get(0).name, equalTo("testable"));
assertThat(appender.list) .extracting(ILoggingEvent::getFormattedMessage) .containsExactly("Uncaught error"); assertThat(appender.list) .extracting((ILoggingEvent event) -> event.getThrowableProxy().getMessage()) .containsExactly("I\'m expected");
assertThat(consumer.getCurrentValue(), is(equalTo(null))); assertThat(consumer.getCurrentValue(), is("First Time"));
assertThat(action.getRunCount(), is(1)); assertThat(action.getRunCount(), is(2));
assertThat( logger.updateErrors, contains(CapturingLogger.UpdateErrorArgs.create("log this plx", 13, expected)));
assertThat( logger.afterUpdate, contains( CapturingLogger.AfterUpdateArgs.create( "mah model", 1, Next.next("mah model-", effects(false)))));
assertThat(service.isTerminated(), is(true));
assertThat(action.getRunCount(), is(0)); assertThat(action.getRunCount(), is(1));
assertThat(action.getRunCount(), is(1)); assertThat(action.getRunCount(), is(2));
assertThat( logger.afterInit, contains( CapturingLogger.AfterInitArgs.create( "tha modell", First.<String, Integer>first("tha modell"))));
assertThat( logger.initErrors, contains(CapturingLogger.InitErrorArgs.create("log this plx", expected)));
assertThat(recordingForegroundViewEffectObserver.valueCount(), equalTo(0)); assertThat(recordingBackgroundEffectObserver.valueCount(), equalTo(1));
assertThat(messages).containsExactly("hey hello");
assertThat(errorHandler.handledErrors).extracting(Throwable::getCause).contains(expected); assertThat(errorHandler.handledErrors) .extracting(Throwable::getMessage) .has( matching( containsString("here\'s an event that should be reported as the cause of failure")), atIndex(0));
assertThat(action.getRunCount(), is(0)); assertThat(action.getRunCount(), is(1));
assertThat(consumer.getCurrentValue(), is(equalTo(null))); assertThat(consumer.getCurrentValue(), is("First Time"));
assertThat(logger.beforeInit, contains("tha modell"));
assertThat(action.getRunCount(), is(0)); assertThat(action.getRunCount(), is(1));
assertThat( logger.history, contains( "before init: start", "after init: start, First{model=start, effects=[]}", "before update: start, 7", "after update: start, 7, Next{model=start7, effects=[false]}"));
assertThat(consumer.getCurrentValue(), is("First Time")); assertThat(consumer.getCurrentValue(), is("Do it again!"));
assertThat(testConnection.disposed, is(true));
assertThat(latch.getCount()).isEqualTo(0); assertThat(snapshot.getValues().length).isGreaterThanOrEqualTo(10);
assertThat(results).containsOnly(entry("hc1", r1));
assertThat(registry.getNames()).containsOnly("hc1", "hc2", "ahc");
assertThat(name) .isEqualTo(name("jdbi", getClass().getSimpleName(), "updatesTimerForShortSqlObjectStrategy")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(1000000000);
assertThat(gauge.getValue()) .isEqualTo(100L);
assertThat(snapshot.getMax()) .isEqualTo(5);
assertThat(e.getMessage()).contains("some-unknown-host");
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".fatal").getCount()) .isEqualTo(1);
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)) .isEqualTo("com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategyTest$Foo.update");
assertThat(name("one", (String) null)) .isEqualTo("one");
assertThat(gauge.getValue()) .isEqualTo(1L);
assertThat(emptySnapshot.getStdDev()) .isZero();
assertThat(weightedSnapshot.getMean()).isEqualTo(0);
assertThat(other.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertThat(meter1) .isSameAs(meter2);
assertThat(nextValues(receiver)).containsExactly(1d); assertThat(nextValues(receiver)).containsExactly(0d);
assertThat(on.getDomain()).isEqualTo("com.domain");
assertThat(gauge.getValue()).isNull();
assertThat(asyncDecorator.getHealthCheck()).isEqualTo(asyncHealthCheck);
assertThat(nan.getValue()) .isNaN();
assertThat(consoleOutput()) .isEqualTo(lines( dateHeader, "", "-- Gauges ----------------------------------------------------------------------", "gauge", " value = 1", "", "" ));
assertThat(counter.getCount()) .isZero();
assertThat(snapshot.size()) .isEqualTo(5);
assertThat(asyncDecorator.check().isHealthy()).isFalse();
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".error").getCount()) .isEqualTo(1);
assertThat(name) .isEqualTo(name("sql", "raw", "don\'t know what it is but it\'s not SQL")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(3000000000L);
assertThat(registry.register("thing", timer)) .isEqualTo(timer);
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)).isNull();
assertThat(name("one", "two", "three")) .isEqualTo("one.two.three");
assertThat(counter1) .isSameAs(counter2);
assertThat(buffers.getMetrics().keySet()) .containsOnly("direct.count", "direct.capacity", "direct.used");
assertThat(registry.runHealthCheck("hc1")).isEqualTo(r1);
assertThat(name("one", null, "three")) .isEqualTo("one.three");
assertThat(snapshot.getValue(0.0)) .isEqualTo(1.0, offset(0.1));
assertThat(snapshot.getMin()) .isEqualTo(1);
assertThat(((Gauge<?>) gauges.getMetrics().get("count")).getValue()) .isEqualTo(12);
assertThat(gauges.getMetrics().keySet()) .containsOnly("terminated.count", "new.count", "count", "timed_waiting.count", "deadlocks", "blocked.count", "waiting.count", "daemon.count", "runnable.count", "deadlock.count", "total_started.count", "peak.count");
assertThat(name) .isEqualTo(name("sql", "raw", "SELECT 1")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(2000000000);
assertThat(fileContents("test.counter.csv")) .isEqualTo(csv( "t,count", "19910191,100" ));
assertThat(registry.register("thing", meter)) .isEqualTo(meter);
assertThat(snapshot.getValue(1.0)) .isEqualTo(5.0, offset(0.1));
assertThat(emptySnapshot.getMax()) .isZero();
assertThat(gauge1) .isSameAs(gauge2);
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".trace").getCount()) .isEqualTo(1);
assertThat(stwm.calculateIndexOfTick(Instant.ofEpochSecond(0L)), is(0)); assertThat(stwm.calculateIndexOfTick(Instant.ofEpochSecond(1L)), is(1));
assertThat(SharedMetricRegistries.names()).contains("something_else"); assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount()) .isEqualTo(1);
assertThat(((Gauge<?>) gauges.getMetrics().get("total_started.count")).getValue()) .isEqualTo(42L);
assertThat(name) .isEqualTo(name(getClass(), "updatesTimerForSqlObjects")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(1000000000);
assertThat(registry.histogram(PREFIX + ".evictions").getCount()).isEqualTo(1); assertThat(registry.counter(PREFIX + ".evictions-weight").getCount()).isEqualTo(3);
assertThat(gauge.getValue()).isEqualTo(2L);
assertThat(file.getParentFile()).isEqualTo(dataDirectory); assertThat(file.getName()).isEqualTo("myfake.uri.csv");
assertThat(infinite.getValue()) .isNaN();
assertThat(new GarbageCollectorMetricSet().getMetrics().keySet()) .isNotEmpty();
assertTrue("Future " + i + " failed", futures.get(i).get());
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)).isEqualTo("custom-bar.find-by-id");
assertThat(((Gauge<?>) gauges.getMetrics().get("peak.count")).getValue()) .isEqualTo(30);
assertThat(name("one", null, null)) .isEqualTo("one");
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".warn").getCount()) .isEqualTo(1);
assertThat(registry.timer(PREFIX + ".loads-failure").getCount()).isEqualTo(1);
assertEquals(2.0E-5, reporter.convertDuration(20), 0.0);
assertThat(regular.getValue()) .isEqualTo(0.5);
assertThat(gauge.getValue()).isInstanceOf(Integer.class); assertThat((Integer) gauge.getValue()).isGreaterThan(0);
assertThat(emptySnapshot.getMin()) .isZero();
assertThat(healthCheck.execute()) .isEqualTo(result);
assertThat(registry.histogram(PREFIX + ".evictions").getCount()).isEqualTo(1); assertThat(registry.counter(PREFIX + ".evictions-weight").getCount()).isEqualTo(1);
assertThat(snapshot.size()) .isEqualTo(5);
assertThat(values.getPlugin()).isEqualTo("dash_illegal.slash_illegal");
assertThat(graphite.getFailures()) .isZero();
assertThat(registry.histogram(PREFIX + ".evictions." + cause.name()).getCount()).isEqualTo(1);
assertThat(snapshot.getValue(1.0)) .isEqualTo(5, offset(0.1));
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".debug").getCount()) .isEqualTo(1);
assertThat(e.getMessage()).isEqualTo("Already connected");
assertThat(gauge.getValue()) .isEqualTo("Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 23.7-b01 (1.7)");
assertThat(metrics.getMetrics().keySet()) .containsOnly("PS-OldGen.time", "PS-OldGen.count");
assertThat(timer1) .isSameAs(timer2);
assertThat(e.getMessage()) .isEqualTo("Already connected");
assertThat(metricName) .overridingErrorMessage("The default metrics prefix was changed") .startsWith(QueuedThreadPool.class.getName());
assertThat(((Gauge<?>) gauges.getMetrics().get("deadlock.count")).getValue()) .isEqualTo(1);
assertThat(output.toString()) .isEqualTo(String.format("1%n2%n3%n4%n5%n"));
assertThat(registry.counter(PREFIX + ".misses").getCount()).isEqualTo(2);
assertThat(name) .isEqualTo(name(getClass(), "SELECT 1")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(1000000000);
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(output.toString()) .isEqualTo(String.format("\\"runnable\\" id=100 state=RUNNABLE%n" + " at Blah.blee(Blah.java:100)%n" + "%n" + "%n"));
assertThat(on.getKeyProperty("name")).isEqualTo("something.with.dots");
assertThat(registry.register("thing", histogram)) .isEqualTo(histogram);
assertThat(((Gauge<?>) gauges.getMetrics().get("deadlocks")).getValue()) .isEqualTo(deadlocks);
assertThat(name(MetricRegistryTest.class, "one", "two")) .isEqualTo("com.codahale.metrics.MetricRegistryTest.one.two");
assertThat(e.getMessage()) .isEqualTo(unavailableHost);
assertThat(new ThreadDeadlockDetector().getDeadlockedThreads()) .isNotNull();
assertThat(gauge.getValue()) .isEqualTo("9928@example.com");
assertThat(registry.meter(METRIC_NAME_PREFIX + ".all").getCount()) .isEqualTo(1); assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount()) .isEqualTo(1);
assertThat(fileContents("gauge.csv")) .isEqualTo(csv( "t,value", "19910191,1" ));
assertThat(one).isSameAs(two);
assertThat(gauges.getMetrics().keySet()) .containsOnly("vendor", "name", "uptime");
assertThat(reservoir.getSnapshot().getMean()).isBetween(0.0, Double.MAX_VALUE);
assertThat(detector.getDeadlockedThreads()) .isEmpty();
assertThat(consoleOutput()) .isEqualTo(lines( dateHeader, "", "-- Counters --------------------------------------------------------------------", "test.counter", " count = 100", "", "" ));
assertThat(handler.getName()) .isEqualTo("handler");
assertThat(name) .isEqualTo(name("foo", "bar", "updatesTimerForTemplateFile")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(4000000000L);
assertThat(gauge.getValue()).isNull();
assertThat(divByZero.getValue()) .isNaN();
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(registry.register("thing", counter)) .isEqualTo(counter);
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)) .isEqualTo("com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategyTest$Foo.custom-update");
assertThat(name) .isEqualTo(name("my-group", "updatesTimerForContextGroupAndName", "")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(4000000000L);
assertThat(snapshot.getValue(0.0)) .isEqualTo(1, offset(0.1));
assertThat(singleItemSnapshot.getStdDev()) .isZero();
assertThat(gauge.getValue()).isNull();
assertThat(SharedMetricRegistries.names()).contains(InstrumentedAppender.DEFAULT_REGISTRY); assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount()) .isEqualTo(1);
assertThat(timer1) .isSameAs(timer2);
assertThat(gauge.getValue()).isPositive();
assertThat(emptySnapshot.getStdDev()) .isZero();
assertThat(fileContents("test.meter.csv")) .isEqualTo(csv( "t,count,mean_rate,m1_rate,m5_rate,m15_rate,rate_unit", "19910191,1,2.000000,3.000000,4.000000,5.000000,events/second" ));
assertThat(e.getMessage()) .isEqualTo("No health check named what exists");
assertThat(emptySnapshot.getMax()) .isZero();
assertThat(scatteredSnapshot.getMean()) .isEqualTo(2);
assertThat(e.getMessage()) .isEqualTo("Already connected");
assertThat(actual.isHealthy()) .isFalse(); assertThat(actual.getMessage()) .isEqualTo("oh noes"); assertThat(actual.getError()) .isEqualTo(e); assertThat(actual.getDetails()) .isNull(); assertThat(actual.getDuration()) .isGreaterThanOrEqualTo(0);
assertThat(snapshot.getMean()) .isEqualTo(3.0);
assertThat(emptySnapshot.getMean()) .isZero();
assertThat(one) .isSameAs(two);
assertThat(gauge.getValue()).isInstanceOf(Long.class); assertThat((Long) gauge.getValue()).isEqualTo(Long.MAX_VALUE);
assertThat(((Gauge<?>) set.getMetrics().get("count")).getValue()) .isNotNull(); assertThat(((Gauge<?>) set.getMetrics().get("deadlocks")).getValue()) .isNotNull();
assertThat(histogram.getSnapshot()) .isEqualTo(snapshot);
assertThat(name) .isEqualTo(name("sql", "empty")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(2000000000);
assertThat(gauge.getValue()) .isEqualTo(1); assertThat(gauge.getValue()) .isEqualTo(2); assertThat(gauge.getValue()) .isEqualTo(2);
assertThat(meter1) .isSameAs(meter2);
assertThat(results).contains(entry("hc1", r1)); assertThat(results).contains(entry("hc2", r2)); assertThat(results).containsKey("ahc");
assertThat(gauge.getValue()).isEqualTo(1L);
assertThat(emptySnapshot.getMean()) .isZero();
assertThat(gauge2.getValue()) .isEqualTo(3);
assertThat(decoratorCaptor.getValue().getHealthCheck()).isEqualTo(ahc);
assertThat(snapshot.getMax()) .isEqualTo(5);
assertThat((double) clock.getTime()) .isEqualTo(System.currentTimeMillis(), offset(200.0)); assertThat((double) clock.getTick()) .isEqualTo(ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime(), offset(1000000.0));
assertThat(snapshot.getStdDev()) .isEqualTo(1.5811, offset(0.0001));
assertThat(registry.timer(PREFIX + ".loads-success").getCount()).isEqualTo(1);
assertTrue(argumentCaptor.getValue().contains("some-other-name"));
assertThat(fileContents("test.histogram.csv")) .isEqualTo(csv( "t,count,max,mean,min,stddev,p50,p75,p95,p98,p99,p999", "19910191,1,2,3.000000,4,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000" ));
assertThat(Sanitize.name("foo\\u0000bar/baz-quux")).isEqualTo("foo_bar_baz_quux");
assertThat(Sanitize.name(longName)).isEqualTo(longName.substring(0, 63));
assertThat(singleItemSnapshot.getStdDev()) .isZero();
assertThat(snapshot.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(gauge.getValue()) .isEqualTo(1); assertThat(gauge.getValue()) .isEqualTo(1);
assertThat(Sanitize.instanceName("foo\\u0000bar/baz-quux")).isEqualTo("foo_bar_baz-quux");
assertThat(registry.register("thing", gauge)) .isEqualTo(gauge);
assertThat(name(g.getClass(), "one", "two")) .matches("com\\\\.codahale\\\\.metrics\\\\.MetricRegistryTest.+?\\\\.one\\\\.two");
assertThat(gauge.getValue()) .isEqualTo(2L);
assertThat(snapshot.getStdDev()) .isEqualTo(1.2688, offset(0.0001));
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(snapshot.getMin()) .isEqualTo(1);
assertThat(nextValues(receiver)).containsExactly(1d); assertThat(nextValues(receiver)).containsExactly(2d); assertThat(nextValues(receiver)).containsExactly(3d); assertThat(nextValues(receiver)).containsExactly(4d); assertThat(nextValues(receiver)).containsExactly(5d);
assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount()) .isEqualTo(1);
assertThat(registry.counter(PREFIX + ".hits").getCount()).isEqualTo(2);
assertThat(histogram1) .isSameAs(histogram2);
assertThat(histogram1) .isSameAs(histogram2);
assertThat(Clock.defaultClock()) .isInstanceOf(Clock.UserTimeClock.class);
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)).isNull();
assertThat(emptySnapshot.getMin()) .isZero();
assertThat(buffers.getMetrics().keySet()) .containsOnly("direct.count", "mapped.used", "mapped.capacity", "direct.capacity", "mapped.count", "direct.used");
assertThat(receiver.next()).isNull();
assertThat(gauge.getValue()) .isEqualTo(100);
assertThat(counter1) .isSameAs(counter2);
assertThat(name) .isEqualTo(name(getClass(), "updatesTimerForContextClass")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(3000000000L);
assertThat(name) .isEqualTo(name("my-group", "my-type", "updatesTimerForContextGroupTypeAndName")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(5000000000L);
assertThat(name) .isEqualTo(name("jdbi", getClass().getSimpleName(), "updatesTimerForShortContextClassStrategy")); assertThat(timer.getSnapshot().getMax()) .isEqualTo(3000000000L);
assertThat(timer.getSnapshot()) .isEqualTo(snapshot);
assertThat(results).isEmpty();
assertThat(name("one", "", "three")) .isEqualTo("one.three");
assertThat(snapshot.getMean()) .isEqualTo(2.7);
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)).isEqualTo("absolute-update");
assertThat(timedAnnotationNameStrategy.getStatementName(ctx)) .isEqualTo("com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategyTest$Bar.update");
assertThat(((Gauge<?>) gauges.getMetrics().get("daemon.count")).getValue()) .isEqualTo(10);
assertThat(file.getParentFile()).isEqualTo(dataDirectory); assertThat(file.getName()).isEqualTo("test.csv");
assertThat(output.toString()) .isEqualTo(String.format("1%n2%n3%n4%n5%n"));
assertThat(nextValues(receiver)).containsExactly(42d);
assertThat(snapshot.getValues()) .containsOnly(1, 2, 3, 4, 5);
assertEquals(2, urls.size()); assertTrue(urls.contains(resource1)); assertTrue(urls.contains(resource3));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertTrue(factory.create() instanceof BeanModel);
assertEquals(is, adapter.getNamedDispatcher("whatever"));
assertTrue("The value is not read only", resolver.isReadOnly(context, null, null));
assertNull(resolver.getType(elContext, new Integer(1), "whatever")); assertEquals(Boolean.class, resolver.getType(elContext, null, "responseCommitted")); assertEquals(Map.class, resolver.getType(elContext, null, "initParams"));
assertEquals("myDefinition", definition.getName()); assertEquals(templateAttribute, definition.getTemplateAttribute()); assertEquals(attribute1, definition.getAttribute("name1")); assertEquals(attribute2, definition.getAttribute("name2"));
assertTrue("The default renderer class is not correct", renderer instanceof ChainedDelegateRenderer);
assertNull(resolver.getType(context, new Integer(1), "whatever")); assertEquals("The requestScope object is not a map.", Map.class, resolver.getType(context, null, "requestScope")); assertEquals("The sessionScope object is not a map.", Map.class, resolver.getType(context, null, "sessionScope")); assertEquals("The applicationScope object is not a map.", Map.class, resolver.getType(context, null, "applicationScope"));
assertSame(wrapped, ((CachingTilesContainer) factory.createDecoratedContainer(wrapped, applicationContext)) .getWrappedContainer());
assertEquals("method", accessor.getSourceAccessor(context, 1, "property"));
assertEquals("id", tag.getId());
assertEquals(realDefinition, factory.getDefinition("myDefinition", request));
assertEquals("myDefinition".hashCode() + "myExtends".hashCode() + attributeContext.hashCode(), definition.hashCode());
assertEquals("The value is not correct", "value", resolver.getValue( context, null, "object1")); assertEquals("The value is not correct", new Integer(1), resolver .getValue(context, null, "object2")); assertEquals("The value is not correct", new Float(2.0), resolver .getValue(context, null, "object3")); assertNull(resolver.getValue(context, new Integer(1), "whatever"));
assertEquals("The type is not correct", String.class, resolver.getType( context, null, "object1")); assertEquals("The type is not correct", Integer.class, resolver.getType( context, null, "object2")); assertEquals("The type is not correct", Float.class, resolver.getType( context, null, "object3")); assertNull(resolver.getType(context, new Integer(1), "whatever")); assertNull(resolver.getType(context, null, "object4"));
assertEquals(nullSafeHashCode("my.value") + nullSafeHashCode(expression) + nullSafeHashCode(roles) + nullSafeHashCode("myrenderer"), attribute.hashCode());
assertEquals(is, adapter.getRequestDispatcher("whatever"));
assertEquals(functionMapper, context.getFunctionMapper());
assertEquals(".getContext(\\"one\\").get(index)", accessor.getSourceAccessor(null, request, "name1")); assertEquals(".getContext(\\"two\\").get(index)", accessor.getSourceAccessor(null, request, "name2")); assertNull(accessor.getSourceAccessor(null, request, "name3"));
assertEquals("The class is not correct", String.class, clazz); assertNull("The class for non root objects must be null", clazz);
assertTrue(factory.isTarget("one")); assertTrue(factory.isTarget("two")); assertTrue(factory.isTarget("three")); assertFalse(factory.isTarget("four"));
assertEquals(attribs.size(), 1); assertEquals(attribs.get(TilesAccess.CONTAINER_ATTRIBUTE), container);
assertEquals(2, extractedMap.size()); assertEquals("value1", extractedMap.get(1)); assertEquals("value2", extractedMap.get(2));
assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor("attribute", request));
assertEquals(definition, factory.getDefinition("myDefinition", request));
assertEquals(tool, tool.setCurrentContainer("myKey")); assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));
assertEquals("value", item.getLink());
assertSame(definition, container.getDefinition("definition", request));
assertTrue(initializer.createContainerFactory(context) instanceof CompleteAutoloadTilesContainerFactory);
assertEquals( "SimpleMenuItem[value=value, link=link, tooltip=tooltip, icon=icon, ]", item.toString());
assertEquals(1, resources.size()); assertTrue(resources.contains(resource));
assertTrue(attribute.isInherit()); assertFalse(attribute.isInherit());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertTrue(CompareUtil.nullSafeEquals(1, 1)); assertFalse(CompareUtil.nullSafeEquals(1, 2)); assertFalse(CompareUtil.nullSafeEquals(1, null)); assertFalse(CompareUtil.nullSafeEquals(null, 1)); assertTrue(CompareUtil.nullSafeEquals(null, null));
assertEquals(2, adapter.getMajorVersion());
assertEquals("nudef", nudef.getName()); assertNull(nudef.getTemplateAttribute()); assertEquals("valuevalue2", attribute.getValue()); assertEquals("valuevalue2value3", attribute.getValue());
assertEquals("myTemplate", attribute.getValue()); assertEquals("template", attribute.getRenderer());
assertEquals(requestMap.keySet(), beanInfo.getProperties(Request.class)); assertEquals(applicationMap.keySet(), beanInfo.getProperties(ApplicationContext.class));
assertTrue(factory.isTarget("header")); assertFalse(factory.isTarget("requestScope")); assertTrue(factory.isTarget("applicationScope")); assertFalse(factory.isTarget("blah"));
assertEquals(container, TilesAccess.getCurrentContainer(request));
assertSame(definition, container.getDefinition("definition", request));
assertEquals(applicationContextPropertyAccessor, factory.getPropertyAccessor("initParams", request));
assertNull("There are some spurious attributes", context .getLocalAttributeNames()); assertNull("There are some spurious attributes", context .getCascadedAttributeNames());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertTrue(TilesInitializer1.initialized); assertTrue(TilesInitializer2.initialized); assertTrue(TilesInitializer1.destroyed); assertTrue(TilesInitializer2.destroyed);
assertEquals(container, TilesAccess.getContainer(context, null)); assertEquals(container, TilesAccess.getContainer(context, "myKey"));
assertEquals("value", adapter.getContextPath());
assertEquals(1, attribs.size()); assertEquals(container, attribs.get("myKey")); assertEquals(0, attribs.size()); assertEquals(1, attribs.size()); assertEquals(container, attribs.get(TilesAccess.CONTAINER_ATTRIBUTE));
assertNull(resolver.getFeatureDescriptors(null, new Integer(1))); assertEquals("The feature is not the same", expectedIt.next(), featureIt.next()); assertTrue("The feature descriptors are not of the same size", !featureIt.hasNext() && !expectedIt.hasNext());
assertTrue(listener.createTilesInitializer() instanceof CompleteAutoloadTilesInitializer);
assertNotNull("rewrite.test definition not found.", definition); assertEquals("Incorrect initial template value", "/test.jsp", definition.getTemplateAttribute().getValue()); assertEquals("Factory should be fresh.", false, reloadable.refreshRequired()); assertEquals("Factory should be stale.", true, reloadable.refreshRequired());
assertEquals(applicationContext, extractor.getNestedObject(request));
assertNull(resolver.getValue(context, new Integer(1), "whatever")); assertEquals("The requestScope map does not correspond", requestScope, resolver.getValue(context, null, "requestScope")); assertEquals("The sessionScope map does not correspond", sessionScope, resolver.getValue(context, null, "sessionScope")); assertEquals("The applicationScope map does not correspond", applicationScope, resolver.getValue(context, null, "applicationScope"));
assertEquals("mymime", adapter.getMimeType("whatever"));
assertEquals("nudef", nudef.getName()); assertEquals( "some-value1-${requestScope.someVariable}-other-value2.jsp", nudef.getAttribute("something").getValue()); assertEquals( "some-value1-${requestScope.someVariable}-other-value2.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertSame(ComposeStackUtil.getComposeStack(request), requestScope.get(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME));
assertEquals("value", adapter.getAttribute("whatever"));
assertEquals("The class is not correct", String.class, clazz); assertNull("The class for non root objects must be null", clazz);
assertEquals("The value is not correct", "value", resolver .findObjectByProperty(context, "object1")); assertEquals("The value is not correct", new Integer(1), resolver .findObjectByProperty(context, "object2")); assertEquals("The value is not correct", new Float(2.0), resolver .findObjectByProperty(context, "object3"));
assertEquals(5, adapter.getMinorVersion());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertSame(attribute, wrapper.startContext(request));
assertEquals(2, attributes.size()); assertEquals("myEvaluatedValue", attributes.get("myName"));
assertTrue(factory.isPatternRecognized("my*pattern")); assertFalse(factory.isPatternRecognized("mypattern"));
assertTrue(factory.createDefinitionsReader(applicationContext) instanceof CompatibilityDigesterDefinitionsReader);
assertSame(applicationContext, wrapper.getApplicationContext());
assertEquals(1, attributes.size()); assertEquals("myValue", attribute.getValue()); assertEquals("myExpression", attribute.getExpressionObject().getExpression()); assertEquals("myRole", attribute.getRole()); assertEquals("myType", attribute.getRenderer()); assertEquals(1, attributes.size()); assertEquals("myBody", attribute.getValue()); assertEquals("myExpression", attribute.getExpressionObject() .getExpression()); assertEquals("myRole", attribute.getRole()); assertEquals("myType", attribute.getRenderer());
assertFalse(definition.isExtending()); assertTrue(definition.isExtending());
assertNotNull(result); assertEquals("testDefOne.messageTwo", result.getName()); assertEquals("/testOne.jsp", result.getTemplateAttribute().getValue()); assertEquals("messageTwo", result.getAttribute("body").getValue());
assertEquals("nudef", nudef.getName()); assertEquals( "some-${requestScope.someVariable}-other-value1-${requestScope.someOtherVariable}.jsp", nudef.getAttribute("something").getValue()); assertEquals( "some-${requestScope.someVariable}-other-value1-${requestScope.someOtherVariable}.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertTrue(attributeEvaluatorFactory instanceof BasicAttributeEvaluatorFactory); assertNotNull(attributeEvaluatorFactory.getAttributeEvaluator("EL")); assertNotNull(attributeEvaluatorFactory.getAttributeEvaluator("MVEL")); assertNotNull(attributeEvaluatorFactory.getAttributeEvaluator("OGNL"));
assertEquals(urls, adapter.getResourcePaths("whatever"));
assertEquals("value", item.getTooltip());
assertEquals("method", accessor.getSourceAccessor(context, 1, "property"));
assertNull(resolver.computeAttribute(container, null, "myName", null, true, null, "defaultRole", "defaultType", request));
assertEquals(TEST_VALUE.hashCode(), CompareUtil.nullSafeHashCode(TEST_VALUE)); assertEquals(0, CompareUtil.nullSafeHashCode(null));
assertTrue(renderer.isRenderable("my.definition", requestContext)); assertFalse(renderer.isRenderable(null, requestContext));
assertEquals(attribute, resolver.computeAttribute(container, attribute, null, null, false, null, null, null, request));
assertEquals(attributeContext, tool.startAttributeContext());
assertTrue(container.isValidDefinition("definition", request));
assertSame(ComposeStackUtil.getComposeStack(request), requestScope.get(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME));
assertEquals("myTemplate", attribute.getValue()); assertEquals("MYLANG", attribute.getExpressionObject().getLanguage()); assertEquals("myExpression", attribute.getExpressionObject().getExpression()); assertEquals("myType", attribute.getRenderer()); assertEquals(1, roles.size()); assertTrue(roles.contains("myRole"));
assertEquals("classname", tag.getClassname());
assertEquals(1, composeStack.size()); assertEquals("definition", attribute.getRenderer());
assertEquals("Hello!", renderable.toString()); assertTrue(renderable.getWriter() instanceof StringWriter); assertNull(renderable.getInternalContextAdapter());
assertEquals("Not written \'Result\'", "Result", writer.toString());
assertTrue(factory.createDefinitionPatternMatcher("myPattern", new Definition()) instanceof RegexpDefinitionPatternMatcher);
assertEquals(Map.class, resolver.getType()); assertEquals(header, resolver.getValue()); assertEquals(applicationScope, resolver.getValue()); assertEquals(Map.class, resolver.getType());
assertEquals("hello", expression.getExpression()); assertEquals("there", expression.getLanguage()); assertEquals("hello", expression.getExpression()); assertNull(expression.getLanguage()); assertNull(expression);
assertEquals("name", tag.getName());
assertEquals("defaultValue", attribute.getValue()); assertEquals("defaultRole", attribute.getRole()); assertEquals("defaultType", attribute.getRenderer());
assertEquals(descriptors, beanInfo.getDescriptors());
assertNull(attribute.getValue()); assertNull(attribute.getRenderer()); assertNull(attribute.getExpressionObject());
assertTrue(names.remove(name)); assertTrue(names.isEmpty());
assertTrue(initializer .createTilesApplicationContext(preliminaryContext) instanceof WildcardServletApplicationContext);
assertEquals( "{name=myDefinitionName, template=<null>, role=<null>, preparerInstance=null, attributes=null}", definition.toString()); assertEquals( "{name=myDefinitionName, template=myTemplate, role=null, preparerInstance=null, attributes=null}", definition.toString()); assertEquals( "{name=myDefinitionName, template=myTemplate, role=null, preparerInstance=null, " + "attributes={myAttributeName=myAttributeValue}}", definition.toString());
assertEquals(resolver, context.getELResolver());
assertEquals(attribute, resolver.computeAttribute(container, null, "myName", null, false, null, null, null, request));
assertEquals(templateAttribute.hashCode() + "my.preparer".hashCode() + attributes.hashCode() + cascadedAttributes.hashCode(), attributeContext.hashCode());
assertNull(functionMapper.resolveFunction("whatever", "it_IT"));
assertSame(definition, container.getDefinition("definition", request));
assertSame(attribute, wrapper.getAttributeContext(request));
assertEquals(attributeContext, tool.getAttributeContext());
assertEquals("nudef", nudef.getName()); assertEquals( "some-${requestScope.firstVariable}-${requestScope.secondVariable}.jsp", nudef.getAttribute("something").getValue()); assertEquals( "some-${requestScope.firstVariable}-${requestScope.secondVariable}.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertNotNull(result); assertEquals("testDefOne.messageTwo", result.getName()); assertEquals("/testOne.jsp", result.getTemplateAttribute().getValue()); assertEquals("messageTwo", result.getAttribute("body").getValue());
assertNull(reader.read(null));
assertSame(composeStack, ComposeStackUtil.getComposeStack(request));
assertSame(definition, container.getDefinition("definition", request));
assertEquals(oneScope, accessor.getProperty(null, request, "oneScope")); assertNull(accessor.getProperty(null, request, "whatever"));
assertEquals(LIST_SIZE, list.size()); assertEquals(attribute1, list.get(0)); assertEquals(attribute2, list.get(1)); assertEquals(attribute3, list.get(2));
assertEquals("my.value", attribute.toString()); assertNull(attribute.toString());
assertEquals("nudef", nudef.getName()); assertEquals( "value1/some-other-value2-${requestScope.someBoolean ? \'a\' : \'b\'}.jsp", nudef.getAttribute("something").getValue()); assertEquals( "value1/some-other-value2-${requestScope.someBoolean ? \'a\' : \'b\'}.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertEquals("method", accessor.getSourceSetter(context, 1, "property"));
assertTrue(wrapper.isValidDefinition("definition", request));
assertNull(attribute.getRole()); assertNull(attribute.getRole()); assertEquals("role1,role2", attribute.getRole());
assertEquals(is, adapter.getServlets());
assertNull(accessor.getSourceSetter(null, null, "whatever"));
assertEquals(list, attribute.getValue());
assertEquals("nudef", nudef.getName()); assertEquals("templatevalue1", attribute.getValue()); assertEquals("valuevalue2", attribute.getValue()); assertEquals("valuevalue2value3", attribute.getValue());
assertTrue(listener.createTilesInitializer() instanceof ModularTilesInitializer);
assertEquals("name", tag.getScriptingVariable()); assertEquals("id", tag.getScriptingVariable());
assertNull("Attribute name1 found", attribute); assertNotNull("Attribute name2 not found", attribute); assertEquals("Attribute name2 has not been set correctly", "value2", attribute.getValue()); assertNotNull("Attribute name3 not found", attribute); assertEquals("Attribute name3 has not been set correctly", "value3a", attribute.getValue());
assertTrue(toCompare.equals(attributeContext)); assertFalse(toCompare.equals(attributeContext)); assertFalse(toCompare.equals(attributeContext)); assertFalse(toCompare.equals(attributeContext)); assertFalse(toCompare.equals(attributeContext));
assertEquals("there:hello", expression.toString()); assertEquals("DEFAULT:hello", expression.toString());
assertEquals("value", attribute.getValue()); assertEquals("expression", attribute.getExpressionObject().getExpression()); assertEquals("language", attribute.getExpressionObject().getLanguage()); assertEquals("role", attribute.getRole()); assertEquals("renderer", attribute.getRenderer()); assertEquals("value", attribute.getValue()); assertEquals("expression", attribute.getExpressionObject().getExpression()); assertEquals("language", attribute.getExpressionObject().getLanguage()); assertEquals("role", attribute.getRole()); assertEquals("renderer", attribute.getRenderer());
assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor("attribute", request));
assertNull(variableMapper.resolveVariable("whatever")); assertEquals(expression, variableMapper.resolveVariable("var"));
assertEquals(0, composeStack.size());
assertEquals("mypath", adapter.getRealPath("whatever"));
assertNotNull("Attribute name1 not found", attribute); assertEquals("Attribute name1 has not been set correctly", "value1", attribute.getValue()); assertNull("Attribute name2 found", attribute); assertNotNull("Attribute name3 not found", attribute); assertEquals("Attribute name3 has not been set correctly", "value3", attribute.getValue());
assertEquals("value", accessor.getProperty(context, 1, "property"));
assertEquals(".getContext(\\"one\\")", accessor.getSourceAccessor(null, request, "oneScope")); assertNull(accessor.getSourceAccessor(null, request, "whatever"));
assertNull(initializer.getContainerKey(context));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertNotNull("Attribute name1 not found", attribute); assertEquals("Attribute name1 has not been set correctly", "value1", attribute.getValue()); assertNotNull("Attribute name2 not found", attribute); assertEquals("Attribute name2 has not been set correctly", "value2", attribute.getValue()); assertNotNull("Attribute name3 not found", attribute); assertEquals("Attribute name3 has not been set correctly", "value3", attribute.getValue());
assertEquals("hello".hashCode() + "there".hashCode(), expression.hashCode());
assertEquals("value", adapter.getServletContextName());
assertTrue(initializer.createContainerFactory(context) instanceof BasicTilesContainerFactory);
assertEquals(1, resolver.getValue()); assertEquals(Integer.class, resolver.getType()); assertEquals(2, resolver.getValue()); assertEquals("three", resolver.getValue()); assertEquals(Object.class, resolver.getType()); assertNull(resolver.getValue());
assertEquals("value", accessor.getProperty(context, 1, "property"));
assertEquals(integerValue2, ComposeStackUtil.findAncestorWithClass(composeStack, Integer.class)); assertEquals(longValue, ComposeStackUtil.findAncestorWithClass(composeStack, Long.class)); assertEquals(stringValue, ComposeStackUtil.findAncestorWithClass(composeStack, String.class)); assertEquals(integerValue2, ComposeStackUtil.findAncestorWithClass(composeStack, Object.class)); assertNull(ComposeStackUtil.findAncestorWithClass(composeStack, Date.class));
assertEquals("value", item.getValue());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertFalse(resolver.getFeatureDescriptors(elContext, new Integer(1)).hasNext()); assertEquals("oneScope", descriptor.getName()); assertEquals("twoScope", descriptor.getName()); assertFalse(descriptors.hasNext());
assertEquals(2, attributes.size()); assertEquals("myEvaluatedValue", attributes.get("myToName"));
assertSame(container, wrapper.getWrappedContainer());
assertTrue("There are local attributes", names == null || names.isEmpty()); assertTrue("There are cascaded attributes", names == null || names.isEmpty());
assertEquals(requestMap, beanInfo.getMappedDescriptors(Request.class)); assertEquals(applicationMap, beanInfo.getMappedDescriptors(ApplicationContext.class));
assertNotNull("Attribute name1 not found", attribute); assertEquals("Attribute name1 has not been set correctly", "Value 1", attribute.getValue()); assertNotNull("Attribute name2 not found", attribute); assertEquals("Attribute name2 has not been set correctly", "Value 2", attribute.getValue());
assertTrue("The value is not read only", resolver.isReadOnly(context, null, null));
assertEquals(expressionFactory, factory.getExpressionFactory());
assertSame(locale, resolver.resolveLocale(request));
assertEquals("hello", expression.getExpression()); assertNull(expression.getLanguage()); assertEquals("hello", expression.getExpression()); assertEquals("there", expression.getLanguage()); assertEquals("there_:hello", expression.getExpression()); assertNull(expression.getLanguage()); assertNull(Expression.createExpressionFromDescribedExpression(null));
assertEquals(LIST_SIZE, list.size()); assertEquals(attribute1, list.get(0)); assertEquals(attribute2, list.get(1)); assertEquals(attribute3, list.get(2));
assertEquals("method", accessor.getSourceSetter(context, 1, "property"));
assertEquals(is, adapter.getResourceAsStream("whatever"));
assertSame(definition, wrapper.getDefinition("definition", request));
assertEquals(requestResolver, resolver); assertEquals(requestResolver, resolver); assertEquals(applicationResolver, resolver); assertEquals(nextResolver, resolver);
assertSame(request, holder.getTilesRequestContext());
assertEquals(is, adapter.getServletNames());
assertTrue(resolver.isReadOnly(elContext, null, "whatever"));
assertEquals(is, adapter.getServlet("whatever"));
assertEquals(objectPropertyAccessor, factory.getPropertyAccessor("writer", request));
assertEquals(context, initializer.createTilesApplicationContext(context));
assertEquals(new Integer(1), wrapper.evaluate(attribute, request));
assertTrue(container.isValidDefinition("definition", request));
assertNotNull("Config file not found", configFile);
assertNull(resolver.getValue(elContext, new Integer(1), "whatever")); assertEquals(true, resolver.getValue(elContext, null, "responseCommitted")); assertEquals(map, resolver.getValue(elContext, null, "initParams"));
assertTrue(factory.createDefinitionPatternMatcher("myPattern", new Definition()) instanceof WildcardDefinitionPatternMatcher);
assertEquals("nudef", nudef.getName()); assertEquals( "some-value1-${requestScope.someVariable}.jsp", nudef.getAttribute("something").getValue()); assertEquals( "some-value1-${requestScope.someVariable}.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertTrue("Attribute name1 is not present", names.contains("name1")); assertFalse("Attribute name2 is present", names.contains("name2")); assertTrue("Attribute name3 is not present", names.contains("name3"));
assertNull(attribute.getValue());
assertEquals(1, resources.size()); assertTrue(resources.contains(resource1));
assertTrue(renderer.isRenderable("any-string", requestContext));
assertEquals("my.value", attribute.getValue()); assertEquals("myrenderer", attribute.getRenderer()); assertEquals(roles, attribute.getRoles()); assertEquals("my.expression", attribute.getExpressionObject().getExpression()); assertEquals("MYLANG", attribute.getExpressionObject().getLanguage());
assertEquals(container, TilesAccess.getContainer(context));
assertEquals(2, matchers.size()); assertEquals(firstMatcher, matchers.get(0)); assertEquals(thirdMatcher, matchers.get(1));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor("attribute", request));
assertFalse(factory.isTarget("header")); assertTrue(factory.isTarget("requestScope")); assertTrue(factory.isTarget("applicationScope")); assertFalse(factory.isTarget("blah"));
assertEquals(1, composeStack.size()); assertEquals(parent, composeStack.pop()); assertEquals(1, parent.getValue().size()); assertEquals("myRole", listAttribute.getRole());
assertEquals(".getContext(\\"one\\").put(index, target)", accessor.getSourceSetter(null, request, "name1")); assertEquals(".getContext(\\"two\\").put(index, target)", accessor.getSourceSetter(null, request, "name2")); assertEquals(".getContext(\\"one\\").put(index, target)", accessor.getSourceSetter(null, request, "name3"));
assertTrue(definition.equals(toCheck)); assertFalse(definition.equals(toCheck)); assertFalse(definition.equals(toCheck)); assertFalse(definition.equals(toCheck));
assertEquals(list.hashCode() + Boolean.TRUE.hashCode(), attribute.hashCode());
assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor("attribute", request));
assertFalse("Attribute name1 is present", names.contains("name1")); assertTrue("Attribute name2 is not present", names.contains("name2")); assertTrue("Attribute name3 is not present", names.contains("name3"));
assertEquals("nudef", nudef.getName()); assertEquals( "value1/{options[my_fallback}}/some-other-value2-${requestScope.someVariable}.jsp", nudef.getAttribute("something").getValue()); assertEquals( "value1/{options[my_fallback}}/some-other-value2-${requestScope.someVariable}.jsp", nudef.getAttribute("something").getExpressionObject().getExpression());
assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));
assertEquals(velociContext, renderable.getVelocityContext()); assertEquals(request, renderable.getRequest()); assertEquals(response, renderable.getResponse()); assertEquals(params, renderable.getParams());
assertTrue(attribute.isPermitted(requestContext)); assertTrue("The role is not permitted", attribute.isPermitted( requestContext)); assertFalse("The role is not permitted", attribute.isPermitted( requestContext));
assertEquals(resolver, factory.createVariable("myName", "myValue", String.class));
assertEquals("", tool.toString());
assertEquals("The expression has not been evaluated correctly", result, expression); assertEquals("The expression has not been evaluated correctly", result, expression);
assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));
assertEquals(attribute, toCheck);
assertTrue(factory.isResolveable("whatever"));
assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));
assertNull("Attribute name1 found", attribute); assertNotNull("Attribute name2 not found", attribute); assertEquals("Attribute name2 has not been set correctly", "value2", attribute.getValue());
assertEquals("info", adapter.getServerInfo());
assertEquals(otherContext, adapter.getContext("whatever"));
assertNotNull("Config file not found", configFile); assertEquals((list.get(0)).getValue(), "This is a value");
assertTrue(tag.isIgnore());
assertNull(resolver.getCommonPropertyType(elContext, new Integer(1))); assertEquals(Map.class, resolver.getCommonPropertyType(elContext, null));
assertEquals(is, adapter.getAttributeNames());
assertEquals(resolver, factory.createVariable("myName", "myValue"));
assertEquals(0, resolver.getFlags()); assertEquals("requestScope", resolver.getName()); assertEquals(Map.class, resolver.getType()); assertEquals(requestScope, resolver.getValue()); assertEquals(Map.class, resolver.getType()); assertEquals(requestScope, resolver.getValue()); assertEquals(applicationScope, resolver.getValue());
assertEquals(expression, expression2); assertFalse(expression.equals(expression2)); assertFalse(expression.equals(expression2)); assertEquals(expression, expression2);
assertTrue(resolver instanceof PrefixedPatternDefinitionResolver); assertEquals("blahX", result.getName()); assertEquals("whatX", result.getName());
assertEquals("value", item.getIcon());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals("value1", adapter.getInitParameter("one")); assertEquals("otherValue2", adapter.getInitParameter("two")); assertEquals("otherValue3", adapter.getInitParameter("three"));
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertNull(exception.getMessage()); assertNull(exception.getCause());
assertEquals("value1", accessor.getProperty(null, request, "name1")); assertEquals("value2", accessor.getProperty(null, request, "name2")); assertNull(accessor.getProperty(null, request, "name3"));
assertEquals(container, TilesAccess.getCurrentContainer(request));
assertEquals("The expression has not been evaluated correctly", result, expression); assertEquals("The expression has not been evaluated correctly", result, expression);
assertEquals(container, initializer.createContainer(context));
assertEquals("The value is not correct", "value", resolver.getObject( map, "object1")); assertNull("The value is not null", resolver.getObject(map, "object2")); assertNull("The value is not null", resolver.getObject(null, "object1"));
assertTrue(servlet.createTilesInitializer() instanceof DefaultTilesInitializer);
assertEquals(attribute, tool.clone(attribute));
assertEquals(variableMapper, context.getVariableMapper());
assertTrue(attribute.equals(attribute2)); assertFalse(attribute.equals(attribute2)); assertFalse(attribute.equals(attribute2)); assertFalse(attribute.equals(attribute2)); assertFalse(attribute.equals(attribute2));
assertEquals("scope", tag.getScope());
assertTrue(servlet.createTilesInitializer() instanceof DefaultTilesInitializer);
assertFalse(list.iterator().hasNext());
assertEquals(9, mPaginatingListComponent.getCount());
assertEquals(0, mListComponent.getCount());
assertEquals(new Range(0, 0), new AccordionList().span());
assertTrue(list.isEmpty());
assertEquals(Long.MAX_VALUE, TxUtils.getMaxVisibleTimestamp(Transaction.ALL_VISIBLE_LATEST));
assertTrue(bb.verify());
assertEquals(canonical.toURI().toURL(), resolver.resourceUrl("tName.txt", DefaultTemplateResolverTest.class)); assertEquals(canonical.toURI().toURL(), resolver.resourceUrl("/tName.txt", DefaultTemplateResolverTest.class));
assertEquals(expected, resolver.resourceUrl("tName.txt", DefaultTemplateResolverTest.class)); assertEquals(expected, resolver.resourceUrl("/tName.txt", DefaultTemplateResolverTest.class));
assertEquals(expected, resolver.resourceUrl("tName.txt", DefaultTemplateResolverTest.class)); assertEquals(expected, resolver.resourceUrl("/tName.txt", DefaultTemplateResolverTest.class));
assertEquals(canonical.toURI().toURL(), resolver.resourceUrl("tName.txt", DefaultTemplateResolverTest.class)); assertEquals(canonical.toURI().toURL(), resolver.resourceUrl("/tName.txt", DefaultTemplateResolverTest.class));
assertEquals(baseClasspathUrl("io/bootique/mvc/resolver/tName.txt"), resolver.resourceUrl("tName.txt", DefaultTemplateResolverTest.class));
assertFalse(validate.isEmpty()); assertEquals("The parking does not support fancy car", message);
assertTrue(validate.isEmpty());
assertFalse(validate.isEmpty()); assertEquals("There is not car cheap like that", message);
assertFalse(validate.isEmpty()); assertEquals("Invalid car plate", message);
assertFalse(validate.isEmpty()); assertEquals("Age should not be less than 18", message);
assertFalse(validate.isEmpty()); assertEquals("The car price must work with USD", message);
assertTrue(validate.isEmpty());
assertFalse(validate.isEmpty()); assertEquals("A driver must have a license", message);
assertFalse(validate.isEmpty()); assertEquals("Age should not be greater than 150", message);
assertFalse(validate.isEmpty()); assertEquals("It must have one car at least", message);
assertFalse(validate.isEmpty()); assertEquals("Email should be valid", message);
assertNotNull(responseBuilder);
assertThat(str, is(""));
assertTrue(textXmlContentType == otherTextXmlContentType);
assertThat(contentType, is(returnContentType));
assertTrue(textJsonContentType == otherTextJsonContentType);
assertThat(result, is(content));
assertTrue(applicationXmlContentType == otherApplicationXmlContentType);
assertTrue(wrapper.isRepeatable());
assertNull(entry);
assertEquals(httpContent.getBody(), request.getBody());
assertThat(wrapperFilename, is(nullValue()));
assertThat(contentType, is(returnContentType));
assertNull(str);
assertThat(result, is(filename));
assertThat(in.isClosed(), is(Boolean.TRUE));
assertNotNull(requestQueue);
assertThat(result, is(name));
assertNotNull(response.error);
assertThat(httpStack, is(instanceOf(MultipartHttpStackWrapper.class)));
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(UnsupportedEncodingException.class)));
assertThat(hit, is(value));
assertNotNull(boundary); assertTrue(boundary.length() > 0);
assertThat(isPresent, is(true));
assertThat(result, is(boundary));
assertThat(result, is(content));
assertThat(result, is(Boolean.valueOf(false)));
assertTrue(url.equals(newUrl));
assertThat(new String(result), is(expected));
assertEquals(network.getClass(), BasicNetwork.class);
assertThat(contentType, is(returnContentType));
assertThat(volleyer(requestQueue), is(volleyer(requestQueue)));
assertThat(configuration, is(otherConfiguration));
assertThat(result, is(expected));
assertNull(response.result); assertNull(response.cacheEntry);
assertEquals(clazz, request.getTargetClass());
assertThat(jsonContent, is(response.result));
assertThat(part.getContentType() , is(expected));
assertTrue(httpStack != null);
assertThat(result, is(Boolean.valueOf(true)));
assertThat(isPresent, is(false));
assertThat(result, is(expected));
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(JsonParseException.class)));
assertThat(result, is(Boolean.valueOf(true)));
assertNotNull(responseBuilder);
assertThat(isPresent, is(false));
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(UnrecognizedPropertyException.class)));
assertTrue(httpStack != null);
assertNotNull(str);
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(UnrecognizedPropertyException.class)));
assertTrue(textPlainContentType == otherTextPlainContentType);
assertThat(isPresent, is(false));
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(UnsupportedEncodingException.class)));
assertThat(list.size(), is(3)); assertTrue(list.contains(xmlContentType)); assertTrue(list.contains(jsonContentType)); assertTrue(list.contains(rssXmlContentType));
assertThat(oneStr.length(), is(one)); assertThat(str.length(), is(length)); assertThat(otherStr.length(), is(otherLength));
assertNotNull(response.error);
assertTrue(extender.getZoomLevel() == ImageViewZoomExtender.ORIGINAL_LEVEL);
assertThat(news.title, is("Volley extention has released"));
assertEquals(diskCache.getClass(), DiskBasedCache.class);
assertTrue(builder == newBuilder);
assertTrue(method.equals(newMethod));
assertEquals(httpContent.getHeaders(), request.getHeaders());
assertThat(response.isSuccess(), is(false));
assertThat(response.isSuccess(), is(true)); assertThat(response.result, is(content));
assertThat(testListener.isDelivered(), is(true));
assertTrue(keys.contains(key));
assertTrue(applicationJsonContentType == otherApplicationJsonContentType);
assertNull(response.result); assertThat(response.error, is(instanceOf(ParseError.class))); assertThat(response.error.getCause(), is(instanceOf(JsonMappingException.class)));
assertNotNull(dir);
assertEquals(404, response.getStatus()); assertEquals(404, response.getStatus()); assertEquals(200, response.getStatus()); assertEquals("ENTITY", response.getEntity());
assertNotNull("Resolver should not return null results", results); assertThat("Expected resolver to return a result", results, not(empty())); assertNotNull("Resolver should not return null results", results); assertThat("Expected resolver to return a result", results, not(empty()));
assertNotNull("Resolver should not return null results", results); assertThat("Expected resolver to return a result", results, not(empty())); assertEquals("Resolver returned unexpected result", "originalOne", Iterables.get(results, 0));
assertEquals("foo", rootName);
assertEquals("foobar", FileUtils.toString(bytes)); assertNull(FileUtils.toString((byte[]) null));
assertFalse(FileUtils.isCsvFile("foo.txt")); assertTrue(FileUtils.isCsvFile("foo.csv"));
assertEquals(1, files.size());
assertEquals("world", new Json("{ hello: \'world\' }").get("hello"));
assertNull(options.features); assertNull(options.tags); assertNull(options.name); assertNull(options.features); assertNull(options.tags); assertEquals("foo", options.name); assertNull(options.features); assertEquals("~@ignore", options.tags.get(0)); assertNull(options.name); assertEquals("foo.feature", options.features.get(0)); assertEquals("~@ignore", options.tags.get(0)); assertNull(options.name);
assertFalse(FileUtils.isTextFile("foo.xml")); assertTrue(FileUtils.isTextFile("foo.txt"));
assertEquals(ScriptValue.Type.STRING, value.getType()); assertEquals("barbaz", value.getValue()); assertEquals(ScriptValue.Type.PRIMITIVE, value.getType()); assertEquals(3.0, value.getValue());
assertEquals(Arrays.asList("bar", "baz"), tag.getValues());
assertEquals("hello world", hello.getValue());
assertEquals(5, tag.getLine());
assertNull(map);
assertFalse(FileUtils.isYamlFile("foo.txt")); assertTrue(FileUtils.isYamlFile("foo.yaml")); assertTrue(FileUtils.isYamlFile("foo.yml"));
assertEquals("hello", bar.getValue());
assertFalse(FileUtils.isJsonFile("foo.txt")); assertTrue(FileUtils.isJsonFile("foo.json"));
assertTrue(e.getCause() instanceof ParseException);
assertArrayEquals(bytes, FileUtils.toBytes("foobar")); assertNull(FileUtils.toBytes((String) null));
assertEquals("baz", bar.getValue()); assertNull(bar.getValue());
assertTrue(e instanceof KarateException);
assertTrue(Script.matchNamed(MatchType.EQUALS, "$", null, "{ foo: \'bar\' }", ctx).pass); assertTrue(Script.matchNamed(MatchType.EQUALS, "$.foo", null, "\'bar\'", ctx).pass);
assertFalse(FileUtils.isThisPath("foo/bar/baz")); assertTrue(FileUtils.isThisPath("this:/foo/bar/baz"));
assertEquals("foo", tag.getName());
assertEquals("foo=bar,baz", tag.getText());
assertEquals(2, sec);
assertTrue(doc.jsonString().contains("[\\"id\\",\\"name\\",\\"notes\\",\\"deleted\\"]"));
assertNull(StringUtils.trimToNull(null)); assertNull(StringUtils.trimToNull(" ")); assertEquals("foo", StringUtils.trimToNull(" foo "));
assertEquals(ScriptValue.Type.PRIMITIVE, value.getType()); assertEquals(3.0, value.getValue());
assertEquals(ScriptValue.Type.STRING, value.getType()); assertEquals("<root><foo>bar</foo></root>", value.getValue());
assertTrue(result.contains("karate"));
assertEquals(ScriptValue.Type.XML, value.getType()); assertEquals("<root><foo>bar</foo></root>", value.getAsString());
assertFalse(FileUtils.isJavaScriptFile("foo.txt")); assertTrue(FileUtils.isJavaScriptFile("foo.js"));
assertEquals(6, StringUtils.wrappedLinesEstimate("foobarbazfoobarbaz", 3)); assertEquals(1, StringUtils.wrappedLinesEstimate("foobarbazfoobarbaz", 20)); assertEquals(0, StringUtils.wrappedLinesEstimate("", 2));
assertEquals(1, result.get("a")); assertEquals("bar", temp.get("foo")); assertEquals("someValue", result.get("someConfig"));
assertTrue(tag.equals(tag)); assertFalse(tag.equals(null)); assertFalse(tag.equals(new Tag(0, "@baz=bar,foo"))); assertFalse(tag.equals("foo"));
assertEquals("[]", json); assertEquals("[{}]", json); assertEquals("[{},{}]", json);
assertEquals("e.textContent.trim().includes(\'Foo\') && e.tagName == \'A\'", condition);
assertEquals(1, resources.size()); assertEquals(file, resources.get(0).getPath().toFile());
assertEquals(ScriptValue.Type.STRING, value.getType()); assertEquals("bar5", value.getValue()); assertEquals(ScriptValue.Type.PRIMITIVE, value.getType()); assertEquals(3.0, value.getValue());
assertEquals("{}", json);
assertTrue(e instanceof ClassCastException);
assertEquals("the first line", feature.getName()); assertEquals("and the second", feature.getDescription());
assertEquals(new Pair("", ""), StringUtils.splitByFirstLineFeed(null)); assertEquals(new Pair("foo", ""), StringUtils.splitByFirstLineFeed("foo")); assertEquals(new Pair("foo", "bar"), StringUtils.splitByFirstLineFeed("foo\\nbar"));
assertFalse(FileUtils.isFeatureFile("foo.txt")); assertTrue(FileUtils.isFeatureFile("foo.feature"));
assertEquals("com.intuit.karate.cucumber.scenario", fixed); assertEquals("Users.Karate.scenario", fixed); assertEquals("Karate.scenario", fixed);
assertEquals(exitCode, 0);
assertEquals("bar", value);
assertEquals("world", hello.getValue());
assertEquals("hello", baz.getValue());
assertFalse(Script.matchNamed(MatchType.EQUALS, "a", null, "b", ctx).pass);
assertEquals("@foo=bar,baz", new Tag(5, "@foo=bar,baz").toString()); assertEquals("@foo=", new Tag(5, "@foo=").toString()); assertEquals("@foobar,baz", new Tag(5, "@foobar,baz").toString());
assertFalse(FileUtils.isGraphQlFile("foo.txt")); assertTrue(FileUtils.isGraphQlFile("foo.graphql")); assertTrue(FileUtils.isGraphQlFile("foo.gql"));
assertEquals(2, StringUtils.countLineFeeds("foo\\nbar\\n")); assertEquals(0, StringUtils.countLineFeeds("foobar"));
assertEquals("baz", FileUtils.removePrefix("foobar:baz")); assertEquals("foobarbaz", FileUtils.removePrefix("foobarbaz")); assertNull(FileUtils.removePrefix(null));
assertEquals("{\\"foo\\":\\"bar\\"}", foo.jsonString());
assertFalse(FileUtils.isXmlFile("foo.txt")); assertTrue(FileUtils.isXmlFile("foo.xml"));
assertEquals(ScriptValue.Type.XML, value.getType()); assertEquals("<root><foo>bar</foo></root>", value.getAsString());
assertEquals(result, "<foo>bar</foo>");
assertFalse(FileUtils.isFilePath("foo/bar/baz")); assertTrue(FileUtils.isFilePath("file:/foo/bar/baz"));
assertEquals("/", XmlUtils.stripNameSpacePrefixes("/")); assertEquals("/foo", XmlUtils.stripNameSpacePrefixes("/foo")); assertEquals("/bar", XmlUtils.stripNameSpacePrefixes("/foo:bar")); assertEquals("/bar/baz", XmlUtils.stripNameSpacePrefixes("/foo:bar/foo:baz")); assertEquals("/bar/baz/@ban", XmlUtils.stripNameSpacePrefixes("/foo:bar/foo:baz/@ban"));
assertEquals("classpath:com/intuit/karate", FileUtils.toRelativeClassPath(getClass()));
assertEquals(ScriptValue.Type.STRING, value.getType()); assertEquals("{\\"root\\":{\\"foo\\":\\"bar\\"}}", value.getAsString());
assertEquals(expected, StringUtils.toStringLines("foo\\nbar\\n"));
assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset("application/json; charset=UTF-8")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset("application/json; charset = UTF-8 ")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset("application/json; charset=UTF-8; version=1.2.3")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset("application/json; charset = UTF-8 ; version=1.2.3"));
assertTrue(step.isPrefixStar()); assertFalse(step.isPrint()); assertEquals("def a = 1", step.getText()); assertTrue(step.isPrefixStar()); assertTrue(step.isPrint()); assertEquals("print a", step.getText()); assertFalse(step.isPrefixStar()); assertTrue(step.isPrint()); assertEquals("print a", step.getText());
assertEquals(1, files.size()); assertEquals(3, files.get(0).getLine());
assertEquals(1, result.get("a")); assertEquals(2, result.get("b")); assertEquals("someValue", result.get("someConfig"));
assertFalse(FileUtils.isClassPath("foo/bar/baz")); assertTrue(FileUtils.isClassPath("classpath:foo/bar/baz"));
assertEquals(ScriptValue.Type.JSON, value.getType()); assertEquals("{\\"root\\":{\\"foo\\":\\"bar\\"}}", value.getAsString());
assertEquals("foo.bar", FileUtils.replaceFileExtension("foo.txt", "bar")); assertEquals("foo.baz", FileUtils.replaceFileExtension("foo", "baz"));
assertEquals("{\\"hello\\":25}", doc.jsonString());
assertEquals("foo-bar", StringUtils.toIdString("foo_bar"));
assertEquals("", StringUtils.trimToEmpty(null)); assertEquals("foo", StringUtils.trimToEmpty(" foo "));
assertEquals(new Pair("foo", "bar"), StringUtils.pair("foo", "bar"));
assertEquals(894422763, tag.hashCode());
assertEquals(new RandomGenerator().initialize(testSeed).toString(), new RandomGenerator().initialize(testSeed).toString());
assertTrue(mb.isOpen()); assertFalse(mb.isOpen());
assertEquals( q.toXML(), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<KVMessage type=\\"putreq\\">\\n<Key>I like pie</Key>\\n<Value>I like cake</Value>\\n</KVMessage>\\n");
assertFalse(c.next()); assertFalse(c.next()); assertFalse(c.next()); assertFalse(c.next()); assertFalse(c.next());
assertEquals(0x4000, b.getOldestId());
assertEquals( k.toXML(), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<KVMessage type=\\"putreq\\">\\n<Key>I like pie</Key>\\n<Value>I like cake</Value>\\n</KVMessage>\\n");
assertEquals(4096, getStoredLength(first)); assertEquals(4096 + 8192, getStoredLength(first));
assertEquals(expectedLength, ins.readInt()); assertEquals(expectedLength + 4, file.length()); assertEquals(expectedLength, file.length());
assertEquals(mess.getKey(), "hello"); assertEquals(mess.getValue(), "bye bye");
assertTrue(false);
assertEquals((byte)0x23, in.readByte()); assertEquals((short)0x1234, in.readShort()); assertEquals(0x12345678, in.readInt()); assertEquals(0x1234567898765432L, in.readLong()); assertEquals((short)0x4321, in.readShort()); assertEquals(0x1a2b3c4d, in.readInt()); assertEquals(0x1122334455667788L, in.readLong()); assertEquals((byte)i, data[i]);
assertEquals( q.toXML(), "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<KVMessage type=\\"putreq\\">\\n<Key>I like pie</Key>\\n<Value>I like cake</Value>\\n</KVMessage>\\n");
assertFalse(cookie.equals(nullObj)); assertFalse(cookie.equals(newCookie)); assertFalse(cookie.equals(cookie2)); assertTrue(cookie.equals(cookie1)); assertTrue(cookie.equals(newCookie.toCookie())); assertTrue(newCookie.equals(newCookie1)); assertFalse(newCookie.equals(newCookie2));
assertEquals("Unexpected produced media type content.", "UTF-8", MediaType.APPLICATION_XML_TYPE.withCharset("UTF-8") .getParameters().get(MediaType.CHARSET_PARAMETER)); assertEquals("Unexpected produced media type content.", "ISO-8859-13", MediaType.APPLICATION_XML_TYPE.withCharset("UTF-8").withCharset("ISO-8859-13") .getParameters().get(MediaType.CHARSET_PARAMETER));
assertThat(entityTag, equalTo(entityTag)); assertThat(entityTag.hashCode(), equalTo(entityTag.hashCode()));
assertEquals( "java.lang.ClassNotFoundException: Provider for jakarta.ws.rs.ext.RuntimeDelegate cannot be found", e.getMessage());
assertEquals(String[].class, new GenericType<String[]>() { }.getRawType());
assertEquals(List[].class, new GenericType<List<String>[]>() { }.getRawType());
assertThat(entityTag, not(equalTo(entityTagWithDifferentValue))); assertThat(entityTag.hashCode(), not(equalTo(entityTagWithDifferentValue.hashCode())));
assertThat(entityTag, equalTo(entityTagWithSameValues)); assertThat(entityTag.hashCode(), equalTo(entityTagWithSameValues.hashCode()));
assertNull(variant.getLanguageString());
assertThat(entityTag, not(equalTo(entityTagWithDifferentWeakSetting))); assertThat(entityTag.hashCode(), not(equalTo(entityTagWithDifferentWeakSetting.hashCode())));
assertTrue(quotaService.isQuotaExceeded("key"));
assertEquals(1L, registry.tick("host1"));
assertTrue(limitPolicy.isValid(9));
assertFalse(Clock.millis() > System.currentTimeMillis());
assertEquals(1L, registry.tick("aaa"));
assertEquals(expected, actual);
assertEquals(1L, intervalCount.resetIfExpiredAndTick()); assertEquals(1L, intervalCount.resetIfExpiredAndTick());
assertEquals(1L, registry.tick("aaa"));
assertEquals(expected, actual);
assertEquals(Long.MAX_VALUE, registry.tick("b1")); assertEquals(Long.MAX_VALUE, registry.tick("b1"));
assertFalse(quotaService.isQuotaExceeded("key"));
assertFalse(limitPolicy.isValid(11));
assertEquals(0L, registry.tick("g1")); assertEquals(0L, registry.tick("g1")); assertEquals(0L, registry.tick("g2"));
assertEquals(1L, registry.tick("bbb")); assertEquals(2L, registry.tick("aaa"));
assertEquals(1L, intervalCount.resetIfExpiredAndTick()); assertEquals(2L, intervalCount.resetIfExpiredAndTick());
assertFalse(quotaService.isQuotaExceeded("key"));
assertTrue(limitPolicy.isValid(10));
assertNull(this.resolver.resolvePrincipal(null)); assertNull(this.resolver.resolvePrincipal(credential)); assertNotNull(principal); assertEquals(userId, principal.getId()); assertEquals(param, principal.getAttributes());
assertThat(result).isEqualTo("2015-01-23 03:00:00"); assertThat(result).isEqualTo("2015-11-01 23:59:59");
assertEquals(2, remoteRepos.size()); assertTrue(remoteRepo.getId().equals("qa") || remoteRepo.getId().equals("foo"));
assertThat(result).isEqualTo("2015-01-23"); assertThat(result).isEqualTo("2015-11-01");
assertThat(df.format(result)).isEqualTo("2015-01-23 00:00:00");
assertEquals(3, split.length); assertEquals("a", split[0]); assertEquals("b", split[1]); assertEquals("c", split[2]);
assertNull(error);
assertEquals("0 15 10 * * ? 2005", new CronExpression("0 15 10 * * ? 2005").toString());
assertNotNull(drl); assertTrue(drl.isEmpty());
assertNotNull(drl); assertEquals(expectedDrl, drl);
assertThat(result).isEqualTo("2015-01"); assertThat(result).isEqualTo("2015-12");
assertNotNull(imports); assertEquals(3, imports.getImports().size()); assertEquals("java.lang.String", imports.getImports().get(0).getType()); assertEquals("java.lang.Double", imports.getImports().get(1).getType()); assertEquals("java.lang.Byte", imports.getImports().get(2).getType());
assertNotNull(is);
assertNotNull(imports); assertTrue(imports.getImports().isEmpty());
assertNotNull(drl); assertEquals(expectedDrl, drl);
assertEquals(3, split.length); assertEquals("a", split[0]); assertEquals(" b ", split[1]); assertEquals("c", split[2]);
assertEquals(fix, "select \\"ID\\" from table");
assertEquals(3, split.length); assertEquals("One sentence.", split[0]); assertEquals("Another one, but with comma.", split[1]); assertEquals("Third one. I\'ll make things, if possible, even more complicated.", split[2]);
assertNotNull( request ); assertEquals( 1, proxies.size() ); assertEquals( "MyProxy", proxies.get(0).getId() );
assertNotNull(imports); assertTrue(imports.getImports().isEmpty());
assertEquals(4, split.length); assertEquals("\'", split[0]); assertEquals("!", split[1]); assertEquals("%", split[2]); assertEquals(")", split[3]);
assertThat(df.format(result)).isEqualTo("2015-01-23 03:00:01");
assertNotNull(drl); assertEquals(expectedDrl, drl);
assertThat(df.format(result)).isEqualTo("2015-01-01 00:00:00");
assertNotNull(imports); assertTrue(imports.getImports().isEmpty());
assertThat(df.format(result)).isEqualTo("2015-01-23 03:01:00");
assertEquals(3, split.length); assertEquals("a", split[0]); assertEquals("b", split[1]); assertEquals("c", split[2]);
assertNotNull(imports); assertEquals(1, imports.getImports().size()); assertEquals("java.lang.String", imports.getImports().get(0).getType());
assertNotNull( packageName ); assertEquals( "", packageName );
assertNotNull( packageName ); assertEquals( "org.drools.guvnor.models.commons.backend.packages", packageName );
assertNotNull(drl); assertTrue(drl.isEmpty());
assertNotNull(drl); assertTrue(drl.isEmpty());
assertEquals("0 15 10 * * ? 2005", new CronExpression("0 15 10 * * ? 2005").getCronExpression());
assertNotNull(drl); assertTrue(drl.isEmpty());
assertThat(df.format(result)).isEqualTo("2015-01-23 03:00:00");
assertNotNull( request ); assertEquals( 2, remoteRepositories.size() ); assertTrue( remoteRepository.getId().equals( "central" ) || remoteRepository.getId().equals( "kie-wb-m2-repo" ) );
assertNotNull(error); assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_GROUP_REQUIRED);
assertEquals(defList.size(), 0);
assertNotNull(error); assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_TYPE); assertNotNull(error); assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_TYPE);
assertNotNull(error); assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_NUMBER);
assertNotNull( packageName ); assertEquals( "", packageName );
assertEquals(3, split.length); assertEquals("a", split[0]); assertEquals("b", split[1]); assertEquals("c", split[2]);
assertNotNull( packageName ); assertEquals( "org.drools.guvnor.models.commons.backend.packages", packageName );
assertThat(result).isEqualTo("2015-01-23 03"); assertThat(result).isEqualTo("2015-11-01 23");
assertNotNull( packageName ); assertEquals( "org.drools.guvnor.models.commons.backend.packages", packageName );
assertNotNull( request );
assertThat(result).isEqualTo("2015-01-23 03:00"); assertThat(result).isEqualTo("2015-11-01 23:59");
assertEquals(1, mavenProj.getArtifacts().size()); assertEquals(ARTIFACT_ID, dependencyArtifact.getArtifactId()); assertEquals(GROUP_ID, dependencyArtifact.getGroupId()); assertEquals(VERSION, dependencyArtifact.getVersion());
assertNotNull( packageName ); assertEquals( "", packageName );
assertNull("Expected a null FQN field class name", fqnFieldClassName); assertNull("Expected a null FQN field class name", fqnFieldClassName); assertEquals("Expected a null FQN field class name", fieldType, fqnFieldClassName);
assertNotNull(imports); assertEquals(2, imports.getImports().size()); assertEquals("java.lang.String", imports.getImports().get(0).getType()); assertEquals("java.lang.Double", imports.getImports().get(1).getType());
assertEquals(TEST, JDBCUtils.clobToString(clob)); assertTrue(JDBCUtils.clobToString(null).isEmpty()); assertTrue(JDBCUtils.clobToString(clob).isEmpty());
assertEquals(2, testServerRepos.size()); assertNotNull(remoteRepository.getProxy());
assertNotNull(error); assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_NUMBER);
assertThat(request.getEncodedParameter("missing", foobar), equalTo(Util.urlEncoder(foobar)));
assertThat(request.getRequestURL(), equalTo(url)); assertThat(request.getParameters(), equalTo(singletonMap(name, singletonList(value)))); assertThat(request.getParameters(name), equalTo(singletonList(value))); assertThat(request.getParameter(name), equalTo(value)); assertThat(request2.getParameters(name), equalTo(Arrays.asList(value, value)));
assertThat(request.getEncodedParameter(name), equalTo(encodedValue1));
assertThat(request.getEncodedParameter("foo"), equalTo("bar"));
assertThat(request.getEncodedParameter("k1"), equalTo("v1")); assertThat(request.getEncodedParameter("k2"), equalTo("v2")); assertThat(request.getEncodedParameter("k3"), equalTo("v3"));
assertThat(request.getRequestURL(), equalTo(url)); assertThat(request.getParameters(), equalTo(singletonMap(name, singletonList(value)))); assertThat(request.getParameters(name), equalTo(singletonList(value))); assertThat(request.getParameter(name), equalTo(value)); assertThat(request.getRequestURL(), equalTo(url)); assertTrue(request.getParameters().isEmpty()); assertTrue(request.getParameters(name).isEmpty()); assertNull(request.getParameter(name));
assertEquals(Coord3D.ORIGIN, result);
assertEquals(expected, result);
assertEquals(Coord3D.ORIGIN, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertThat(reorderings.size(), is(1)); assertThat(reorderings.get(0), is(5));
assertThat(reorderings.size(), is(1)); assertThat(reorderings.get(4), is(5));
assertThat(deletions.size(), is(1)); assertThat(deletions.get(0), is(true));
assertThat(insertions.size(), is(1)); assertThat(insertions.get(0), is(true));
assertThat(reorderings.size(), is(2)); assertThat(reorderings.get(0), is(5)); assertThat(reorderings.get(2), is(4));
assertThat(reorderings.size(), is(2)); assertThat(reorderings.get(5), is(0)); assertThat(reorderings.get(0), is(5));
assertThat(reorderings.size(), is(1)); assertThat(reorderings.get(4), is(5));
assertThat(reorderings.size(), is(1)); assertThat(reorderings.get(5), is(0));
assertThat(reorderings.size(), is(2)); assertThat(reorderings.get(5), is(0)); assertThat(reorderings.get(4), is(2));
assertThat(insertions.size(), is(1)); assertThat(insertions.get(6), is(true));
assertThat(deletions.size(), is(2)); assertThat(deletions.get(6), is(true)); assertThat(deletions.get(0), is(true));
assertThat(deletions.size(), is(1)); assertThat(deletions.get(6), is(true));
assertThat(insertions.size(), is(2)); assertThat(insertions.get(6), is(true)); assertThat(insertions.get(0), is(true));
assertEquals(actualNrOfSkips, expectedNrOfSkips);
assertNotNull("default cron schedule", TaskManager.scheduleDefault());
assertTrue(RepoHelp.isRepoAll("*")); assertTrue(RepoHelp.isRepoAll("all")); assertTrue(RepoHelp.isRepoAll("all_repo"));
assertThat(testSubscriber.getOnNextEvents().size(), is(0));
assertThat(loggedIn.getFilterId(), is(100073)); assertThat(loggedOut.getFilterId(), is(100073));
assertThat(interactions, is(expected));
assertThat(presenter.getListProvider().getCurrentPage(), is(1)); assertThat(presenter.getListProvider().getCurrentPage(), is(3));
assertThat(loggedIn.getSpoileredTagIds(), is(Arrays.asList( 41133, 41161, 42773, 114937, 173118, 173119, 173120, 173121, 173122, 173123, 173124))); assertThat(loggedOut.getSpoileredTagIds(), is(Collections.<Integer>emptyList()));
assertThat(loggedInBox.isLoggedIn(), is(true)); assertThat(loggedOutBox.isLoggedIn(), is(false));
assertThat(interactions, is(expected));
assertThat(action.getImageId(), is(imageId)); assertThat(action.getImageSource(), is(filterSource)); assertThat(action.getImageSource(), is(imageSource)); assertThat(action.getFilteredTagName(), is(tagName));
assertThat(loggedIn.getHiddenTagIds(), is(Arrays.asList( 61060, 89379, 20417, 86723, 94478))); assertThat(loggedOut.getHiddenTagIds(), is(Collections.<Integer>emptyList()));
assertThat(scoreButton.isEnabled(), is(false)); assertThat(faveButton.isEnabled(), is(false)); assertThat(upvoteButton.isEnabled(), is(false)); assertThat(downvoteButton.isEnabled(), is(false)); assertThat(scoreButton.isEnabled(), is(false)); assertThat(faveButton.isEnabled(), is(true)); assertThat(upvoteButton.isEnabled(), is(true)); assertThat(downvoteButton.isEnabled(), is(true));
assertThat(interactions, is(expected));
assertThat(loggedInBox.getFilterName(), is("Some Long Filter Name")); assertThat(loggedOutBox.getFilterName(), is("Some Long Filter Name"));
assertThat(element.tag().getName(), is("a")); assertThat(element.attr("href"), is(link)); assertThat(element.children().size(), is(1)); assertThat(element.children().first().tag().getName(), is("img")); assertThat(element.children().first().attr("src"), is(link));
assertThat(interactions, is(expected));
assertThat(interactions, is(expected));
assertThat(loggedIn.getUsername(), is("TestUserName = Test")); assertThat(loggedOut.getUsername(), is(""));
assertThat(interactionsHelper.getImageInteractionsForImage(10005), is(expected)); assertNotNull(loggedOut.getInteractions());
assertThat(driver.manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS), is(equalTo("driver.manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS)")));
assertThat(driver.switchTo().activeElement(), is(equalTo("driver.switchTo().activeElement()")));
assertThat(com.verifyEquals(condition, condition), is(equalTo("verifyEquals(" + condition + ", " + condition + ")")));
assertThat(com.tryCatch(action, "Exception ex", "Exception has been thrown"), is(equalTo("try{" + action + "} catch (Exception ex) {Exception has been thrown}")));
assertThat(driver.getPageSource(), is(equalTo("driver.getPageSource()")));
assertThat(com.verifyFalse(condition), is(equalTo("verifyFalse(" + condition + ")")));
assertThat(this.action.builder().perform(), is(equalTo("builder.perform()")));
assertThat(driver.navigate().back(), is(equalTo("driver.navigate().back()")));
assertThat(com.assertFalse(condition), is(equalTo("assertFalse(" + condition + ")")));
assertThat(com.ifNotAction(condition, action), is(equalTo("if(!" + condition + "){" + action + "}")));
assertThat(driver.switchTo().defaultContent(), is(equalTo("driver.switchTo().defaultContent()")));
assertThat(driver.manage().addCookie("YUM COOKIE!!"), is(equalTo("driver.manage().addCookie(\\"YUM COOKIE!!\\")")));
assertThat(this.action.builder().clickAndHold(), is(equalTo("builder.clickAndHold()")));
assertThat(this.action.mouse().mouseMove("10, 100"), is(equalTo("mouse.mouseMove(10, 100)")));
assertThat(this.action.keyboard().sendKeys("foobar"), is(equalTo("keyboard.sendKeys(\\"foobar\\")")));
assertThat(driver.getTitle(), is(equalTo("driver.getTitle()")));
assertThat(this.action.builder().sendKeys("foobar"), is(equalTo("builder.sendKeys(\\"foobar\\")")));
assertThat(driver.manage().getCookies(), is(equalTo("driver.manage().getCookies()")));
assertThat(driver.manage().deleteAllCookies(), is(equalTo("driver.manage().deleteAllCookies()")));
assertThat(driver.findElement(locator).getAttribute("href"), is(equalTo("driver.findElement(" + locator + ").getAttribute(\\"href\\")")));
assertThat(this.action.mouse().mouseMove("10, 100", 50, 25), is(equalTo("mouse.mouseMove(10, 100, 50, 25)")));
assertThat(com.assertTrue(condition), is(equalTo("assertTrue(" + condition + ")")));
assertThat(driver.switchTo().alert().sendKeys("bar"), is(equalTo("driver.switchTo().alert().sendKeys(\\"bar\\")")));
assertThat(com.verifyTrue(condition), is(equalTo("verifyTrue(" + condition + ")")));
assertThat(driver.switchTo().alert().dismiss(), is(equalTo("driver.switchTo().alert().dismiss()")));
assertThat(driver.findElement(locator).getLocation().getX(), is(equalTo("driver.findElement(" + locator + ").getLocation().getX()")));
assertThat(this.action.builder().keyUp(Keys.ENTER), is(equalTo("builder.keyUp(Keys.ENTER)")));
assertThat(com.verifyNotEquals(condition, condition), is(equalTo("verifyNotEquals(" + condition + ", " + condition + ")")));
assertThat(ebselen.window().takeScreenshot(), is(equalTo("ebselen.window().takeScreenshot()")));
assertThat(driver.findElements(locator).size(), is(equalTo("driver.findElements(" + locator + ").size()")));
assertThat(driver.findElement(locator).sendKeys("These keys are being sent!"), is(equalTo("driver.findElement(" + locator + ").sendKeys(\\"These keys are being sent!\\")")));
assertThat(this.action.mouse().contextClick("10, 100"), is(equalTo("mouse.contextClick(10, 100)")));
assertThat(driver.findElement(locator).submit(), is(equalTo("driver.findElement(" + locator + ").submit()")));
assertThat(this.support.getOptions(webElement), is(equalTo("Select select1 = new Select(driver.findElement(By.id(\\"" + webElement + "\\")));" + System.getProperty("line.separator") + "select1.getOptions()")));
assertThat(driver.findElement(locator).toString(), is(equalTo("driver.findElement(" + locator + ")")));
assertThat(driver.findElement(locator).isDisplayed(), is(equalTo("driver.findElement(" + locator + ").isDisplayed()")));
assertThat(com.assertEquals(condition, condition), is(equalTo("assertEquals(" + condition + ", " + condition + ")")));
assertThat(this.action.mouse().click("10, 100"), is(equalTo("mouse.click(10, 100)")));
assertThat(testExcelFile.getCellData(1, 1).getContents(), is(equalTo("Test Data"))); assertThat(testExcelFile.getCellData(1, 2).getContents(), is(equalTo("1")));
assertThat(driver.findElement(locator).getText(), is(equalTo("driver.findElement(" + locator + ").getText()")));
assertThat(this.support.getOptions(webElement), is(equalTo("select1.getOptions()")));
assertThat(driver.findElement(locator).getSize().getWidth(), is(equalTo("driver.findElement(" + locator + ").getSize().getWidth()")));
assertThat(driver.findElements(locator).toString(), is(equalTo("driver.findElements(" + locator + ")")));
assertThat(driver.getWindowHandles(), is(equalTo("driver.getWindowHandles()")));
assertThat(this.action.mouse().mouseUp("10, 100"), is(equalTo("mouse.mouseUp(10, 100)")));
assertThat(this.action.builder().doubleClick(), is(equalTo("builder.doubleClick()")));
assertThat(driver.findElement(locator).click(), is(equalTo("driver.findElement(" + locator + ").click()")));
assertThat(driver.getCurrentUrl(), is(equalTo("driver.getCurrentUrl()")));
assertThat(driver.switchTo().alert().getText(), is(equalTo("driver.switchTo().alert().getText()")));
assertThat(driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS), is(equalTo("driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS)")));
assertThat(com.assertNotEquals(condition, condition), is(equalTo("assertNotEquals(" + condition + ", " + condition + ")")));
assertThat(driver.manage().deleteCookie("YUM COOKIE!!"), is(equalTo("driver.manage().deleteCookie(\\"YUM COOKIE!!\\")")));
assertThat(driver.close(), is(equalTo("driver.close()")));
assertThat(driver.findElement(locator).getCssValue("background-color"), is(equalTo("driver.findElement(" + locator + ").getCssValue(\\"background-color\\")")));
assertThat(driver.getWindowHandle(), is(equalTo("driver.getWindowHandle()")));
assertThat(this.action.keyboard().pressKey(Keys.ADD), is(equalTo("keyboard.pressKey(Keys.ADD)")));
assertThat(this.action.keyboard().releaseKey(Keys.ADD), is(equalTo("keyboard.releaseKey(Keys.ADD)")));
assertThat(this.support.getOptions("foo"), is(equalTo("Select select2 = new Select(driver.findElement(By.id(\\"foo\\")));" + System.getProperty("line.separator") + "select2.getOptions()")));
assertThat(driver.findElement(locator).getSize().getHeight(), is(equalTo("driver.findElement(" + locator + ").getSize().getHeight()")));
assertThat(driver.findElement(locator).isEnabled(), is(equalTo("driver.findElement(" + locator + ").isEnabled()")));
assertThat(driver.navigate().refresh(), is(equalTo("driver.navigate().refresh()")));
assertThat(this.action.builder().keyDown(Keys.ENTER), is(equalTo("builder.keyDown(Keys.ENTER)")));
assertThat(this.action.builder().release(), is(equalTo("builder.release()")));
assertThat(driver.switchTo().alert().accept(), is(equalTo("driver.switchTo().alert().accept()")));
assertThat(driver.manage().deleteCookieNamed("YUM COOKIE!!"), is(equalTo("driver.manage().deleteCookieNamed(\\"YUM COOKIE!!\\")")));
assertThat(this.action.mouse().mouseDown("10, 100"), is(equalTo("mouse.mouseDown(10, 100)")));
assertThat(this.action.mouse().doubleClick("10, 100"), is(equalTo("mouse.doubleClick(10, 100)")));
assertThat(com.ifAction(condition, action), is(equalTo("if(" + condition + "){" + action + "}")));
assertThat(driver.navigate().forward(), is(equalTo("driver.navigate().forward()")));
assertThat(this.action.builder().click(), is(equalTo("builder.click()")));
assertThat(driver.findElement(locator).getLocation().getY(), is(equalTo("driver.findElement(" + locator + ").getLocation().getY()")));
assertThat(driver.findElement(locator).isSelected(), is(equalTo("driver.findElement(" + locator + ").isSelected()")));
assertThat(driver.switchTo().frame("foobar"), is(equalTo("driver.switchTo().frame(\\"foobar\\")")));
assertThat(driver.manage().getCookieNamed("YUM COOKIE!!"), is(equalTo("driver.manage().getCookieNamed(\\"YUM COOKIE!!\\")")));
assertThat(this.action.builder().moveByOffset("200", "30"), is(equalTo("builder.moveByOffset(200, 30)")));
assertThat(driver.switchTo().window("barfoo"), is(equalTo("driver.switchTo().window(\\"barfoo\\")")));
assertEquals(client.getId(), "0"); assertEquals(client.getGcmClientId(), "1");
assertEquals(client1, client1); assertEquals(client1, client2); assertNotEquals(client1, client3); assertNotEquals(client1, client4); assertNotEquals(client1, null); assertNotEquals(client1, new Object()); assertEquals(client1.hashCode(), client1.hashCode()); assertEquals(client1.hashCode(), client2.hashCode()); assertNotEquals(client1.hashCode(), client3.hashCode()); assertNotEquals(client1.hashCode(), client4.hashCode());
assertNotNull(distribution); assertFalse(distribution.keySet().isEmpty());
assertNotNull("Artifact from pom.xml", artifact);
assertEquals(response.getStatus(), HttpServletResponse.SC_OK);
assertEquals(doc.field("name"), root.getName()); assertEquals(listDocs.size(), listObjs.size()); assertTrue(listDocs.get(0) instanceof ODocument); assertTrue(listObjs.get(0) instanceof IDAOTestClass);
assertEquals(response.getStatus(), HttpServletResponse.SC_NOT_FOUND);
assertNotNull(testDocs); assertTrue("Size of test docs", testDocs.size()>0); assertTrue("Size of test docs", dao.countAll()>0); assertEquals(testDocs.size(), dao.countAll());
assertTrue("Dependencies from parent pom.xml", artifacts.size() > 0);
assertNotNull(doc.getDocument()); assertTrue(reloadRet == doc);
assertEquals(excludeVersion(OContentShareResource.urlFor(doc, "phone", "text/plain", false)), excludeVersion(ret)); assertEquals(excludeVersion(OContentShareResource.urlFor(doc, "phone", "text/plain", true)), excludeVersion(ret));
assertEquals(response.getStatus(), HttpServletResponse.SC_NOT_FOUND);
assertEquals("("+plons[i]+","+plats[i]+")",within[i],polygon.isWithin(toOsmLon(plons[i], OFFSET_X), toOsmLat(plats[i], OFFSET_Y)));
assertEquals("("+p0lons[i]+","+p0lats[i]+")-("+p1lons[i]+","+p1lats[i]+")",within[i],polyline.intersects(toOsmLon(p0lons[i], OFFSET_X), toOsmLat(p0lats[i], OFFSET_Y), toOsmLon(p1lons[i], OFFSET_X), toOsmLat(p1lats[i], OFFSET_Y)));
assertEquals("("+p0lons[i]+","+p0lats[i]+")-("+p1lons[i]+","+p1lats[i]+")",within[i],polygon.intersects(toOsmLon(p0lons[i], OFFSET_X), toOsmLat(p0lats[i], OFFSET_Y), toOsmLon(p1lons[i], OFFSET_X), toOsmLat(p1lats[i], OFFSET_Y)));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(loc, l); assertTrue(loc.equals(l)); assertEquals("testing", l.getName()); assertEquals("country", l.getCountry());
assertEquals(5, dvset.getDataValues().size());
assertEquals(expResult, result);
assertThat(expResult, not(equalTo(result)));
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(q1, qp1.getAsIsoString()); assertEquals(q2, qp2.getAsIsoString()); assertEquals(q3, qp3.getAsIsoString()); assertEquals(q4, qp4.getAsIsoString());
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(expResult, result);
assertEquals(3, importSummary.getDataValueCount().getImported()); assertEquals(0, importSummary.getDataValueCount().getUpdated()); assertEquals(1, importSummary.getDataValueCount().getIgnored());
assertEquals(Stream.of(1, 2, 3).collect(Collectors.toList()), instance.integerList);
assertThat( "initial value of top_secret", configProperty.value().get(), containsString("password1")); assertThat(configProperty.value().get(), containsString("new_password"));
assertEquals(1, instance.iii); assertEquals(1e7, instance.ddd); assertFalse(instance.bbb); assertEquals(1, instance.lll);
assertThat(configProperty.value().get(), containsString("password1")); assertThat(configProperty.value().get(), containsString("new_password"));
assertFalse(vaultInstance.container().isRunning()); assertThat(configProperty.value().get(), containsString(PASSWORD_PROPERTY_VALUE));
assertEquals(expectedMultimap, instance.integerMultimap);
assertEquals("just str", instance.str); assertEquals(Duration.ofMillis(100), instance.duration);
assertEquals(2, splitter.getPredicates().size());
assertEquals(1, splitter.getPredicates().size());
assertEquals(1, splitter.getPredicates().size());
assertEquals(3, splitter.getPredicates().size());
assertTrue("Pattern does not match", matches); assertEquals(Long.valueOf(3422), pattern.getValue());
assertNotNull(resource); assertNotNull(next); assertTrue(next instanceof CompoundPrologTerm); assertEquals("load_classical_b_from_list_of_facts", t.getFunctor()); assertEquals(2, t.getArity()); assertTrue(argument.isList());
assertEquals("true", ((EvalResult) value).getValue()); assertEquals("3", ((EvalResult) value).getSolutions().get("a"));
assertEquals(3, splitter.getPredicates().size());
assertEquals(3, splitter.getPredicates().size());
assertTrue("Pattern does not match", matches); assertEquals(Long.valueOf(3422), pattern.getValue());
assertNotNull(t); assertTrue(t instanceof CompoundPrologTerm); assertEquals("set_eclipse_preference", t.getFunctor()); assertEquals(2, t.getArity()); assertTrue(argument1.isAtom()); assertEquals("foo", argument1.toString()); assertTrue(argument2.isAtom()); assertEquals("bar", argument2.toString());
assertTrue("Pattern does not match", matches); assertEquals(Integer.valueOf(3422), pattern.getValue());
assertNotNull(info.get(InterruptRefPattern.class)); assertNotNull(info.get(PortPattern.class));
assertEquals(2, splitter.getPredicates().size());
assertNotNull(t); assertTrue(t instanceof CompoundPrologTerm); assertEquals("evaluate_formula", t.getFunctor()); assertEquals(3, t.getArity()); assertEquals("root", t1.getFunctor()); assertEquals("eval", t2.getFunctor()); assertEquals("Res", t3.getFunctor());
assertEquals(2, splitter.getPredicates().size());
assertTrue("Pattern does not match", matches); assertEquals(Integer.valueOf(3422), pattern.getValue());
assertTrue(roleManager.getRole() == HARole.ACTIVE);
assertTrue(wc1.hasCaptured()); assertTrue(OFMessageUtils.equalsIgnoreXid(m, po));
assertTrue(payload.getChecksum() == (short)0xfea8); assertTrue(payload.getChecksum() == (short)0xff03); assertTrue(payload.getChecksum() == (short)0xff09);
assertTrue(roleManager.getRole() == HARole.ACTIVE); assertTrue(roleManager.getRole() == HARole.ACTIVE);
assertTrue(ret == Command.CONTINUE); assertTrue(ret == Command.STOP);
assertThat("Write should have been written", cMsgList.hasCaptured(), equalTo(true)); assertThat("Should have captured MsgList", cMsgList.getValue(), Matchers.<OFMessage> contains(hello, packetOut));
assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 1); assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 1); assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 0);
assertFalse(vip1==null); assertFalse(vip2==null); assertFalse(lb.vips.containsKey(vip1.id)); assertFalse(lb.vips.containsKey(vip2.id));
assertEquals(2, resolver.resolveConflicts(Arrays.asList(concurrent, current, current, concurrent, current)).size());
assertEquals("Check that task ran", 1, ran);
assertEquals(3, resolver.resolveConflicts(Arrays.asList(concurrent, concurrent2, current, concurrent2, current, concurrent, current)).size());
assertTrue(Arrays.equals(pktSerialized, actual));
assertTrue(wc1.hasCaptured()); assertEquals(po, m);
assertEquals(later, resolver.resolveConflicts(Arrays.asList(current, prior, later)).get(0)); assertEquals(later, resolver.resolveConflicts(Arrays.asList(prior, current, later)).get(0)); assertEquals(later, resolver.resolveConflicts(Arrays.asList(later, current, prior)).get(0));
assertEquals(intIp, IPv4.toIPv4Address(stringIp)); assertEquals(intIp, IPv4.toIPv4Address(byteIp)); assertTrue(Arrays.equals(byteIp, IPv4.toIPv4AddressBytes(intIp))); assertTrue(Arrays.equals(byteIp, IPv4.toIPv4AddressBytes(stringIp)));
assertEquals(2, resolved.size()); assertTrue("Version not found", resolved.contains(current)); assertTrue("Version not found", resolved.contains(concurrent));
assertTrue(Arrays.equals(pktSerialized, pktSerialized1));
assertThat("Write should have been flushed", cMsgList.hasCaptured(), equalTo(true)); assertThat("Should have captured MsgList", cMsgList.getValue(), Matchers.<OFMessage> contains(packetOut));
assertTrue(wc1.hasCaptured()); assertTrue(OFMessageUtils.equalsIgnoreXid(m, po));
assertTrue(e.getFormattedEvent(LakeEvent.class, "test").getDataFields() .contains(new Metadata("Error", "java.lang.Integer cannot be cast to org.projectfloodlight.openflow.types.DatapathId"))); assertTrue(e2.getFormattedEvent(LakeEvent2.class, "test").getDataFields() .contains(new Metadata("Error", "java.lang.Integer cannot be cast to java.lang.Long")));
assertFalse(vip1==null); assertFalse(vip2==null); assertTrue(error==null); assertTrue(lb.vips.containsKey(vip1.id)); assertTrue(lb.vips.containsKey(vip2.id));
assertNull(linkDiscovery.switchLinks.get(lt.getSrc())); assertNull(linkDiscovery.switchLinks.get(lt.getDst())); assertNull(linkDiscovery.portLinks.get(lt.getSrc())); assertNull(linkDiscovery.portLinks.get(lt.getDst())); assertTrue(linkDiscovery.links.isEmpty());
assertTrue(wc1.hasCaptured()); assertEquals(po, m);
assertThat("Write should have been flushed", cMsgList.hasCaptured(), equalTo(true)); assertThat("Should have captured MsgList", cMsgList.getValue(), Matchers.<OFMessage> contains(packetOut));
assertTrue(Arrays.equals(expected, ethernet.serialize()));
assertTrue(roleManager.getRole() == HARole.STANDBY);
assertFalse("Check that task hasn\'t run yet", ran > 0); assertEquals("Check that task ran", 1, ran);
assertThat("Write should have been written", cMsgList.hasCaptured(), equalTo(true)); assertThat("Should have captured MsgList", cMsgList.getValue(), Matchers.<OFMessage> contains(hello, packetOut));
assertTrue(Arrays.equals(expected, ethernet.serialize()));
assertTrue(Arrays.equals(expected, ethernet.serialize()));
assertTrue(Arrays.equals(probePkt, serialized));
assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));
assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 1); assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 1); assertTrue(switchManager.getSwitchHandshakeHandlers().size() == 0);
assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:ff:ee:dd"))); assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:FF:EE:DD")));
assertEquals(1, resolved.size()); assertEquals(later2, resolved.get(0));
assertTrue(Arrays.equals(probePkt, pktarr)); assertEquals(expected, pkt);
assertEquals(HARole.STANDBY, info.getRole()); assertEquals(HARole.STANDBY, controller.getRole()); assertEquals(HARole.ACTIVE, info.getRole()); assertEquals("FooBar", info.getRoleChangeDescription()); assertEquals(HARole.ACTIVE, controller.getRole());
assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:ff:ee:dd"))); assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:FF:EE:DD")));
assertEquals(HARole.STANDBY, info.getRole()); assertEquals(HARole.STANDBY, controller.getRole()); assertEquals(HARole.ACTIVE, info.getRole()); assertEquals("FooBar", info.getRoleChangeDescription()); assertEquals(HARole.ACTIVE, controller.getRole());
assertTrue(ret == Command.CONTINUE);
assertTrue(ret == Command.CONTINUE);
assertTrue(ret == Command.CONTINUE);
assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:ff:ee:dd"))); assertTrue(Arrays.equals(address, Ethernet .toMACAddress("00:11:22:FF:EE:DD")));
assertNull(linkDiscovery.switchLinks.get(lt.getSrc())); assertNull(linkDiscovery.switchLinks.get(lt.getDst())); assertNull(linkDiscovery.portLinks.get(lt.getSrc())); assertNull(linkDiscovery.portLinks.get(lt.getDst())); assertTrue(linkDiscovery.links.isEmpty());
assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1)); assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1)); assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));
assertFalse("Check that task hasn\'t run yet", ran > 0); assertEquals("Check that task ran", 1, ran);
assertTrue(roleManager.getRole() == HARole.ACTIVE); assertTrue(roleManager.getRole() == HARole.STANDBY);
assertSame(dump, trace);
assertNotNull(feature); assertTrue(feature instanceof Feature); assertEquals("feature", feature.getName());
assertSame(source, exception.getSource());
assertTrue(Arrays.equals(base64DecodeResult, SOURCE_MSG));
assertEquals(itemList.size(), 1); assertNull(containerBefore); assertNotNull(containerAfter);
assertNotNull(w1); assertNotNull(w2); assertNotSame(w1, w2);
assertEquals("SELECT document FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb))) " + "ORDER BY(document#>\'{a}\')DESC " + "LIMIT(?)OFFSET(?)", body.toString());
assertSame(messageMock, envelopeCaptor.getValue().getValue(messageFN));
assertEquals(result.size(), 2); assertEquals(result.get(0), true); assertEquals(result.get(1), false);
assertEquals("CREATE INDEX ON test_collection USING BTREE ((parse_timestamp_immutable(document#>\'{a}\')));\\n", body.toString());
assertEquals(result, "1");
assertEquals("foo/bar", path.getPath());
assertEquals("SELECT COUNT(*) FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb)))", body.toString());
assertTrue("Must throw exception", false);
assertTrue(Arrays.equals(base64EncodeResult, BASE64_MSG));
assertSame(featureStatusMock1, status1); assertSame(featureStatusMock1, status2);
assertEquals("not_a_bug", new Feature(managerMock, "not_a_bug").getName());
assertSame(wrapperResolutionStrategyMock, map.get(stepConfMock)); assertSame(wrapperResolutionStrategyMock, map.get(stepConfMock));
assertEquals("val2", rule.resolve(request, "key2"));
assertTrue(false);
assertTrue(false);
assertTrue(false);
assertEquals("SELECT document FROM test_collection LIMIT(?)OFFSET(?)", body.toString());
assertEquals("CREATE INDEX ON test_collection USING BTREE ((parse_timestamp_immutable(document#>\'{a}\')));\\n" + "CREATE INDEX ON test_collection USING BTREE ((parse_timestamp_immutable(document#>\'{b}\')));\\n", body.toString());
assertNotNull(field); assertEquals(field.in(env), "1");
assertEquals(true, convertToBool(nonNull)); assertEquals(true, convertToBool(_true)); assertEquals(true, convertToBool(num)); assertEquals(true, convertToBool(nonEmptyStr)); assertEquals(false, convertToBool(_null)); assertEquals(false, convertToBool(_false)); assertEquals(false, convertToBool(nan)); assertEquals(false, convertToBool(zero)); assertEquals(false, convertToBool(emptyStr));
assertSame(dump, doneDump);
assertTrue("Must throw exception", false);
assertTrue(false);
assertTrue("Must throw exception", false);
assertNotNull(paths); assertEquals(1, paths.size()); assertEquals(dirPath.resolve("a").toString(), paths.iterator().next().getPath());
assertEquals( IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "checkpoint_failure_action"), new CheckpointFailureActionSectionStrategy().getSectionName() );
assertEquals(counter.times, 1);
assertEquals(strategy.getSectionName(), new FieldName("onFeatureLoading"));
assertTrue("Must throw exception", false);
assertNotNull(container.getKeyForKeyStorage()); assertNotNull(container.getKeyForKeyStorage().toString()); assertNotEquals(container.getKeyForKeyStorage(), container1.getKeyForKeyStorage()); assertNotEquals(container.getKeyForKeyStorage().toString(), container1.getKeyForKeyStorage().toString());
assertEquals(result.size(), 3); assertEquals(result.get(0), new Double(12.0)); assertEquals(result.get(1), new Double(5.7)); assertEquals(result.get(2), new Double(34.33));
assertEquals(result.size(), 3); assertEquals(result.get(0), new Long(1L)); assertEquals(result.get(1), "string"); assertEquals(result.get(2), object);
assertEquals("( resolver, fieldPath, b, [b] AND resolver, fieldPath, d, [b, d] )", body.toString());
assertEquals("SELECT COUNT(*) FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb)))", body.toString());
assertEquals(1, captor.getValue().size()); assertSame(entryMock.getState(), captor.getValue().get(0));
assertEquals("ORDER BY(document#>\'{testField}\')DESC,(document#>\'{anotherTestField}\')ASC", body.toString());
assertEquals(Collections.singletonList("the_object_name"), creator.enumIdentifiers(configMock, contextMock));
assertTrue(false);
assertNotNull(container.getIocKey()); assertNotNull(container.getIocKey().toString()); assertNotEquals(container.getIocKey(), container1.getIocKey()); assertNotEquals(container.getIocKey().toString(), container1.getIocKey().toString());
assertEquals(o, strategy.resolve("key")); assertEquals(o, strategy.resolve("key")); assertEquals(o, strategy.resolve("key")); assertEquals(counter.times, 1);
assertTrue(false);
assertTrue(Thread.interrupted());
assertNotNull(paths); assertEquals(1, paths.size()); assertEquals(dirPath.resolve("2a").toString(), paths.iterator().next().getPath());
assertTrue(receiverFlag.get()); assertFalse(receiverFlag.get()); assertFalse(receiverFlag.get());
assertEquals("LIMIT(?)OFFSET(?)", body.toString()); assertEquals(3, finalIndex);
assertEquals(result.size(), 3); assertEquals(result.get(0), new Character('1')); assertEquals(result.get(1), new Character('d')); assertEquals(result.get(2), new Character('+'));
assertNotNull(key1); assertNotNull(key2); assertEquals(key1, key2); assertNotEquals(key1, key3);
assertTrue("Equal object, return unequal hashcode test fails", !(xHashcode == notxHashcode)); assertTrue("Equal object, return unequal hashcode test fails", !(xHashcodeInt == notxHashcodeInt));
assertEquals(key.toString(), value);
assertEquals(new ArrayList<Object>(keys), router.enumerate());
assertEquals("SELECT COUNT(*) FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb)))", body.toString());
assertTrue("Must throw exception, but was not", false);
assertNotNull(key);
assertSame(managedTaskMock1, mt);
assertSame(entries[0], storage.getEntry("0"));
assertEquals(false, c("isPaused", null)); assertEquals(true, c("isRunning", null)); assertEquals(true, c("pause", null)); assertEquals(false, c("isPaused", null)); assertEquals(true, c("isRunning", null)); assertEquals(true, c("isPaused", null)); assertEquals(false, c("isRunning", null)); assertEquals("OK", c("continue", null)); assertEquals(false, c("isPaused", null)); assertEquals(true, c("isRunning", null));
assertEquals("SELECT COUNT(*) FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb)))", body.toString());
assertTrue(false);
assertTrue("Must throw exception", false);
assertNotNull(messageBusContainer); assertNotNull(messageBusContainer.getMessageBusKey());
assertTrue(Arrays.equals(hexDecodeResult, SOURCE_MSG));
assertEquals(result, "1");
assertTrue("Must throw exception", false);
assertNotNull(obj); assertEquals(obj, result.getValue(fieldName));
assertEquals("foo/bar", path.getPath());
assertTrue(testQueryStatement.compile(connection) == preparedStatement);
assertFalse("Passing incompatible object to equals should return false", Fixture.x.equals(Fixture.notx)); assertFalse("Passing incompatible object to equals should return false", Fixture.xInt.equals(Fixture.notxInt));
assertEquals("SELECT document FROM test_collection LIMIT(?)OFFSET(?)", body.toString());
assertEquals(result.getValue(new FieldName("key1")), 123); assertEquals(result.getValue(new FieldName("key2")), "value");
assertEquals(checker1.isChecked(), true); assertEquals(checker2.isChecked(), true);
assertEquals(1, e.getCause().getSuppressed().length); assertTrue(e.getCause().getSuppressed()[0] instanceof DeletionCheckException);
assertEquals(featureDescription.getValue(new FieldName("name")), "feature1"); assertEquals(featureDescription.getValue(new FieldName("version")), "0.0.0"); assertEquals(featureDescription.getValue(new FieldName("group")), "info.smart_tools.smartactors"); assertEquals(featureDescription.getValue(new FieldName("repositoryId")), "repository1"); assertEquals(featureDescription.getValue(new FieldName("type")), "default"); assertEquals(featureDescription.getValue(new FieldName("url")), "info.smart_tools.smartactors");
assertTrue(false);
assertEquals("SELECT document FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb))) " + "LIMIT(?)OFFSET(?)", body.toString());
assertEquals("val2", rule.resolve(request, "key2"));
assertEquals(result.size(), 4); assertEquals(result.get(0), new Long(1)); assertEquals(result.get(1), new Long(2)); assertEquals(result.get(2), new Long(5)); assertEquals(result.get(3), new Long(Long.MIN_VALUE));
assertEquals(result.size(), 4); assertEquals(result.get(0), new Integer(1)); assertEquals(result.get(1), new Integer(2)); assertEquals(result.get(2), new Integer(5)); assertEquals(result.get(3), new Integer(7));
assertEquals(name, fieldName.toString());
assertNull(storage.getEntry("666"));
assertTrue("Must throw exception, but was not", false);
assertSame(description, ((IDumpable) chain).dump(null));
assertTrue(field.in(env));
assertSame(id, strategy.chooseChain(messageProcessorMock));
assertSame(exception, e.getCause());
assertTrue("Must throw exception, but was not", false);
assertNotNull(plugin);
assertTrue(false);
assertSame(taskMock.getClass(), c);
assertEquals(json, obj.serialize());
assertEquals(queryStatementIsNull.getBodyWriter().toString().trim(), "(document#>\'{isNull}\') is null"); assertEquals(queryStatementIsNotNull.getBodyWriter().toString().trim(), "(document#>\'{isNull}\') is not null");
assertNull(it);
assertEquals("theChain", chain.getName());
assertTrue(matcher.matches("abcdef"));
assertNotNull(filesystemFacade.joinPaths(new Path("/"), new Path("."), null));
assertTrue("Must throw exception", false);
assertTrue(targetObject == new GetFirstNotNullRule().resolve(args)); assertTrue(targetObject == new GetFirstNotNullRule().resolve(args)); assertTrue(targetObject == new GetFirstNotNullRule().resolve(args));
assertEquals(result.size(), 2); assertEquals(result.get(0), new Integer(1)); assertEquals(result.get(1), new Integer(143));
assertEquals( IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "objects"), new ObjectsSectionProcessingStrategy().getSectionName() );
assertTrue(threadPool.tryExecute(task1)); assertTrue(threadPool.tryExecute(task2)); assertFalse(threadPool.tryExecute(task3));
assertEquals("SELECT document FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb))) " + "LIMIT(?)OFFSET(?)", body.toString());
assertEquals(4.2, convertToDouble(num), 0d); assertEquals(1d, convertToDouble(_true), 0d); assertEquals(0d, convertToDouble(_false), 0d); assertEquals(0d, convertToDouble(zero), 0d); assertEquals(0d, convertToDouble(emptyStr), 0d); assertEquals(Double.NaN, convertToDouble(_null), 0d); assertEquals(Double.NaN, convertToDouble(nan), 0d); assertEquals(Double.NaN, convertToDouble(nonEmptyStr), 0d);
assertEquals(checker.isChecked(), true);
assertEquals(2, args.length); assertEquals(1, args[0]); assertEquals("test", args[1]);
assertEquals(iObject, this.emptyIObject);
assertTrue(false);
assertTrue(Thread.interrupted());
assertSame(sr, new PrependSensorReceiverStrategy().resolve(null, sr));
assertTrue(Thread.interrupted());
assertEquals(1, countDBEntries() - iCnt);
assertNotSame(scope1, scope2); assertEquals(scope2, ScopeProvider.getCurrentScope()); assertEquals(scope1, ScopeProvider.getCurrentScope());
assertTrue(false);
assertEquals("(NOT( resolver, fieldPath, b, [b] AND resolver, fieldPath, d, [b, d] ))", body.toString());
assertNotNull(rg); assertNotNull(r); assertTrue(w.getGetterUsed()); assertTrue(w.getSetterUsed());
assertFalse(esop.recordProcessor(processors[0], 150)); assertFalse(esop.recordProcessor(processors[1], 150)); assertTrue(esop.recordProcessor(processors[2], 150));
assertEquals("( resolver, fieldPath, a, [a] OR resolver, fieldPath, b, [a, b] )", body.toString());
assertSame(ChainCreationException.class, e.getCause().getClass());
assertEquals("( resolver, fieldPath, b, [b] OR resolver, fieldPath, d, [b, d] )", body.toString());
assertEquals(result.size(), 2); assertEquals(result.get(0), new Byte((byte) 0xba)); assertEquals(result.get(1), new Byte((byte) 0x8a));
assertTrue(ok.getCause().getSuppressed()[0] instanceof ActionExecuteException);
assertTrue(item instanceof MethodBootstrapItem);
assertNull(co.iterator());
assertEquals("INSERT INTO test_collection (document) " + "VALUES (?::jsonb)", body.toString());
assertTrue(1000L > Math.abs(1337 - timeArgumentCaptor.getValue()));
assertNotNull(key);
assertSame(readValueException, e.getCause());
assertEquals(result.size(), 3); assertEquals(result.get(0), new Short("1")); assertEquals(result.get(1), new Short("2")); assertEquals(result.get(2), new Short("3"));
assertEquals("SELECT COUNT(*) FROM test_collection WHERE (TRUE)", body.toString());
assertNotNull(joined); assertEquals(String.format("foo%sbar%sbaz", File.separator, File.separator), joined.getPath());
assertEquals(itemList.size(), 1);
assertEquals("CREATE INDEX ON test_collection USING BTREE ((document#>\'{a}\'));\\n" + "CREATE INDEX ON test_collection USING BTREE ((document#>\'{b}\'));\\n", body.toString());
assertSame(constFieldName, strategy.getSectionName());
assertNull(rule.resolve(request, "key3"));
assertSame(description, chain.getChainDescription());
assertEquals(nestedField.in(object, String.class), "I am nested field");
assertEquals(result.getValue(fieldName1), 123); assertEquals(result.getValue(fieldName2), "value");
assertNotNull(result); assertEquals(result, key);
assertSame(receiverMock1, strategy.resolve( object, object.getClass().getMethod("method1", Object.class), configMock ));
assertSame(receiverMock2, strategy.resolve( object, object.getClass().getMethod("method1", Object.class), configMock ));
assertEquals("SELECT document FROM test_collection " + "WHERE (document#>\'{test_collectionID}\') = to_json(?)::jsonb", body.toString());
assertEquals("CREATE INDEX ON test_collection USING BTREE ((document#>\'{a}\'));\\n", body.toString());
assertEquals(new FieldName("asd").compareTo(new FieldName("qwe")), "asd".compareTo("qwe"));
assertNotNull(feature); assertTrue(feature instanceof Feature);
assertSame(timerMock, new EntryStorage(remoteEntryStorage, null).getTimer());
assertNotNull(new DependencyResolvingFeatureManager("/", remoteRepos) .newFeature(null, null));
assertTrue(strategy.resolve() instanceof String); assertNotEquals(strategy.resolve(), strategy.resolve());
assertTrue(false);
assertTrue(utf8DecodeResult.equals(SOURCE_MSG));
assertTrue(testPostgresConnection.compileQuery(statement) == query);
assertTrue(e.getCause() instanceof ActionExecuteException);
assertEquals("SELECT document FROM test_collection " + "WHERE ((NOT((((document#>\'{a}\')=to_json(?)::jsonb))AND(((document#>\'{c}\')=to_json(?)::jsonb))))) " + "LIMIT(?)OFFSET(?)", body.toString());
assertEquals("The quick brown actor", read);
assertEquals("stat_chain", conf.getValue(IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "statisticsChain"))); assertEquals("query sensor scheduler action", conf.getValue(IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "action"))); assertNotNull(handle);
assertEquals("( resolver, fieldPath, a, [a] AND resolver, fieldPath, b, [a, b] )", body.toString());
assertTrue(Arrays.equals(hexEncodeResult, HEX_MSG));
assertEquals("(NOT( resolver, fieldPath, a, [a] AND resolver, fieldPath, b, [a, b] ))", body.toString());
assertEquals(Boolean.TRUE, responseCaptor.getValue().getValue( IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "itIsAResponse") )); assertSame( nullResponseStrategyMock, context.getValue(IOC.resolve(Keys.getOrAdd("info.smart_tools.smartactors.iobject.ifield_name.IFieldName"), "responseStrategy")));
assertSame(featureStatusMock1, status);
assertTrue(receiverFlag.get());
assertEquals("bug", feature.getName());
assertEquals(itemList.size(), 1); assertNotNull(rg);
assertSame(configMock, IOC.resolve(Keys.getOrAdd("databaseKey")));
assertTrue("Must throw exception", false);
assertNotEquals(result, null); assertEquals(result, charSequenceEncodePassword);
assertEquals("Equal object, return equal hashcode test fails", xHashcode, yHashcode); assertEquals("Equal object, return equal hashcode test fails", xHashcodeInt, yHashcodeInt);
assertEquals(result.size(), 2); assertEquals(result.get(0), new Float(12.0)); assertEquals(result.get(1), new Float(5.7));
assertNotEquals(result, null); assertEquals(result, charSequenceEncodePassword);
assertEquals( Collections.singletonList(null), new HandlerRouterReceiverCreator(creatorMock, filterConfig, objectConfig).enumIdentifiers(objectConfig, context) );
assertNull(rule.resolve(request, "key3"));
assertEquals("UPDATE test_collection " + "SET document = ?::jsonb " + "WHERE (document#>\'{test_collectionID}\') = to_json(?)::jsonb", body.toString());
assertNull(container.resolve(new Object()));
assertEquals(false, c("isPaused", null)); assertEquals(true, c("isRunning", null));
assertEquals(2, args.length); assertEquals(1, args[0]); assertEquals("test", args[1]);
assertEquals(new HashSet<>(Arrays.asList(exceptional1, exceptional2)), eColl);
assertTrue("Must throw exception, but was not", false);
assertFalse(esop.recordProcessor(processors[0], 150));
assertTrue(testPostgresConnection.validate());
assertEquals(itemList.size(), 1);
assertEquals(Collections.singletonList(null), creator.enumIdentifiers(configMock, contextMock));
assertFalse(esop.isTimeCompleted(200)); assertTrue(esop.isTimeCompleted(201));
assertTrue(false);
assertTrue("Must throw exception", false);
assertTrue("Must throw exception", false);
assertEquals("SELECT document FROM test_collection " + "WHERE ((((document#>\'{a}\')=to_json(?)::jsonb))) " + "ORDER BY(document#>\'{a}\')DESC " + "LIMIT(?)OFFSET(?)", body.toString());
assertFalse(esop.recordProcessor(processors[0], 50));
assertEquals("SELECT document FROM test_collection WHERE (TRUE) LIMIT(?)OFFSET(?)", body.toString());
assertEquals("foo/bar", path.getPath());
assertSame(result, value);
assertTrue("Must throw exception", false);
assertTrue("Class equal to itself.", Fixture.x.equals(Fixture.x)); assertTrue("Class equal to itself.", Fixture.xInt.equals(Fixture.xInt));
assertNotNull(cl); assertSame(result[0], url1); assertSame(result[1], url2); assertEquals(result.length, 2);
assertFalse(Thread.interrupted()); assertTrue(Thread.interrupted());
assertTrue("Must throw exception", false);
assertTrue(Thread.interrupted());
assertNotNull(obj); assertEquals(1, obj.getValue(new FieldName("value"))); assertEquals("foo", obj.getValue(new FieldName("string")));
assertEquals("Consistent hashcode test fails", initialHashcode, Fixture.x.hashCode()); assertEquals("Consistent hashcode test fails", initialHashcodeInt, Fixture.xInt.hashCode());
assertTrue(false);
assertNotNull(pool.take());
assertTrue(Arrays.equals(utf8EncodeResult, UTF_8_MSG));
assertTrue(false);
assertEquals(featureDescription.getValue(new FieldName("name")), "test-feature"); assertEquals( featureDescription.getValue(new FieldName("featureLocation")), new Path("target/test-classes/test-feature-0.0.1-archive.zip") );
assertTrue(!testPostgresConnection.validate());
assertFalse("Passing null to equals should return false", Fixture.x.equals(null)); assertFalse("Passing null to equals should return false", Fixture.xInt.equals(null));
assertTrue(receiverFlag.get()); assertSame(exception, e.getCause());
assertNotNull(pool.take()); assertNotNull(pool.take()); assertNotNull(pool.take());
assertSame(exceptionMock, e.getCause());
assertTrue("Must throw exception", false);
assertSame(actionStub, list.get(0)); assertEquals(2, list.size());
assertTrue(Math.abs(System.currentTimeMillis() - new SystemTimeImpl().currentTimeMillis()) < 10);
assertEquals("SELECT COUNT(*) FROM test_collection", body.toString());
assertEquals(true, c("isPaused", null)); assertEquals(false, c("isRunning", null));
assertTrue("Reflexive test fail x,y", Fixture.x.equals(Fixture.y)); assertTrue("Symmetric test fail y", Fixture.y.equals(Fixture.x)); assertTrue("Reflexive test fail x,y", Fixture.xInt.equals(Fixture.yInt)); assertTrue("Symmetric test fail y", Fixture.yInt.equals(Fixture.xInt));
assertEquals(queryStatement.getBodyWriter().toString().trim(), "((document#>\'{in}\')in(to_json(?)::jsonb,to_json(?)::jsonb,to_json(?)::jsonb))");
assertNotNull(shutdownAwareTask);
assertEquals("SELECT COUNT(*) FROM test_collection", body.toString());
assertEquals(value, result); assertSame(value, result); assertTrue(checker.wasCalled);
assertSame(asynchronousOperationException, e.getCause());
assertNotSame(value, other); assertEquals(value, result); assertSame(value, result); assertEquals(other, result); assertNotSame(other, result);
assertEquals(value, result); assertSame(value, result); assertTrue(checker.wasCalled);
assertEquals((iObject.getValue(new FieldName("hello"))), "world"); assertEquals(iObject.getValue(new FieldName("messageMapId")), "hello");
assertEquals("CREATE INDEX ON test_collection USING GIN ((document#>\'{a}\'));\\n", body.toString());
assertEquals("CREATE INDEX ON test_collection USING GIN ((document#>\'{a}\'));\\n" + "CREATE INDEX ON test_collection USING GIN ((document#>\'{b}\'));\\n", body.toString());
assertEquals("DELETE FROM test_collection " + "WHERE (document#>\'{test_collectionID}\') = to_json(?)::jsonb", body.toString());
assertEquals(Binders.defaultBinder(), DefaultBinderConfiguration.INSTANCE.getBinder(null, 1));
assertEquals(Binders.defaultBinder(), DefaultBinderConfiguration.INSTANCE.getBinder(mockMetaData, 1));
assertEquals(2L, sequence.nextValue().longValue());
assertEquals("DbSetupTracker [lastSetupLaunched=null, nextLaunchSkipped=false]", tracker.toString());
assertEquals("DbSetup [destination=destination1, operation=operation1, binderConfiguration=config1]", setup1.toString());
assertEquals(LocalDate.now().atStartOfDay(ZoneId.systemDefault()), date);
assertEquals(1L, ValueGenerators.sequence().nextValue().longValue());
assertEquals("DataSourceDestination [dataSource=dataSource1]", new DataSourceDestination(dataSource1).toString());
assertSame(a, CompositeOperation.sequenceOf(a)); assertSame(a, CompositeOperation.sequenceOf(Collections.singletonList(a))); assertSame(a, Operations.sequenceOf(a)); assertSame(a, Operations.sequenceOf(Collections.singletonList(a)));
assertSame(connection, new DataSourceDestination(dataSource).getConnection());
assertEquals("CODE_1", ValueGenerators.stringSequence("CODE_").nextValue());
assertEquals("hello", constantGenerator.nextValue());
assertEquals("DriverManagerDestination [url=theUrl, user=theUser, password=thePassword]", new DriverManagerDestination("theUrl", "theUser", "thePassword").toString()); assertEquals("DriverManagerDestination [url=theUrl, user=null, password=null]", new DriverManagerDestination("theUrl", null, null).toString());
assertEquals("CODE_2", sequence.nextValue());
assertEquals("foo bar", iterator.stringFromCurrentPosition());
assertTrue(s1 + " should be before " + s2, posixComparator.compare(s1, s2) < 0); assertTrue(s3 + " should be after " + s4, posixComparator.compare(s3, s4) > 0);
assertEquals(readFile("src/test/resources/graal1"), writer.toString());
assertTrue(s1 + " should be before " + s2, posixComparator.compare(s1, s2) < 0); assertTrue(s3 + " should be before " + s4, posixComparator.compare(s3, s4) < 0); assertTrue(s5 + " should be after " + s6, posixComparator.compare(s5, s6) > 0);
assertEquals(pl.firstWord().word(), "command");
assertEquals(input, line.line());
assertEquals("foo bar", lineParser.parseLine("foo\\\\ bar", 7).selectedWord().word()); assertEquals("foo bar", lineParser.parseLine("ls foo\\\\ bar", 11).selectedWord().word());
assertEquals("foo bar", lineParser.parseLine("foo\\\\ bar", 8).selectedWordToCursor().word()); assertEquals("foo ba", lineParser.parseLine("foo\\\\ bar", 7).selectedWordToCursor().word()); assertEquals("foo bar", lineParser.parseLine("ls foo\\\\ bar", 12).selectedWordToCursor().word());
assertEquals("", exportManager.getValue("$FOO3")); assertEquals(null, exportManager.getValue("FOO3"));
assertEquals("foo", iterator.pollWord()); assertEquals("bar", iterator.pollWord()); assertFalse(iterator.hasNextWord()); assertNull(iterator.pollWord()); assertEquals(" foo", iterator.peekWord()); assertEquals(" foo", iterator.pollWord()); assertFalse(iterator.finished());
assertTrue(s1 + " should be after " + s2, posixComparator.compare(s1, s2) > 0); assertTrue(s3 + " should be after " + s4, posixComparator.compare(s3, s4) > 0);
assertEquals(readFile("src/test/resources/graal3"), writer.toString());
assertTrue(out.contains("_complete_gut")); assertTrue(out.contains("_command_gut")); assertTrue(out.contains("_command_help")); assertTrue(out.contains("_command_rebase")); assertTrue(out.contains("ArrContains")); assertTrue(out.contains("ArrContains COMP_WORDS CHILD0 && { _command_help; return $?; }"));
assertTrue(s1 + " should be before " + s2, posixComparator.compare(s1, s2) < 0); assertTrue(s3 + " should be before " + s4, posixComparator.compare(s3, s4) < 0);
assertNotNull(foo); assertNotNull(foo1); assertNotNull(foo2); assertNotNull(foo3); assertNotNull(foo4);
assertTrue(result.contains("/usr"));
assertFalse(reporter.foundManCommand); assertTrue(reporter.foundManCommand);
assertEquals(pl.firstWord().word(), "");
assertTrue(out.contains("_complete_test1")); assertTrue(out.contains("NO_VALUE_OPTIONS=\\"--help -h \\"")); assertTrue(out.contains("VALUE_OPTIONS=\\"--override -o --test -t \\""));
assertTrue(s1 + " should equals " + s2, posixComparator.compare(s1, s2) == 0);
assertEquals(readFile("src/test/resources/graal2"), writer.toString());
assertTrue(s1 + " should be after " + s2, posixComparator.compare(s1, s2) > 0); assertTrue(s3 + " should be before " + s4, posixComparator.compare(s3, s4) < 0);
assertEquals(15, math.multiply(5, 3));
assertEquals(5 + 0 + 0, math.add(2, 3));
assertEquals(5, math.divide(20, 4)); assertNotEquals(5.5, math.divide(11, 2));
assertEquals(5, math.subtract(7, 2));
assertEquals(1, count[0]); assertEquals(25, tempC); assertEquals(2, count[0]); assertEquals(2, count[0]);
assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertEquals("Unknown", p.getCarInsuranceName());
assertNotNull(infos); assertTrue(iter.hasNext()); assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertEquals(from[0], info.date); assertEquals(from[0], to.plusDays(1));
assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertEquals(1, count[0]); assertEquals(22, tempC); assertEquals(2, count[0]); assertEquals(2, count[0]);
assertEquals(2, filterWeather(infos, wi -> wi.getDesc().equals("Light rain shower")).size());
assertEquals("Unknown", p.getCarInsuranceName());
assertNotNull(infos); assertTrue(iter.hasNext()); assertEquals(parse("2019-02-01"), wi.date); assertEquals(14, wi.tempC); assertEquals(13.8, wi.precipMM); assertEquals("Patchy rain possible", wi.desc);
assertNotNull(infos); assertTrue(iter.hasNext()); assertEquals(li.getCountry(), "Spain"); assertEquals(li.getRegion(), "Galicia"); assertEquals(li.getLatitude(), 42.383); assertEquals(li.getLongitude(), -7.100);
assertEquals(8, filterWeather(infos, wi -> wi.getDesc().equals("Sunny")).size());
assertNotNull(infos); assertFalse(infos.isEmpty()); assertTrue(infos.size() > 0); assertEquals(li.getCountry(), "Portugal"); assertEquals(li.getRegion(), "Porto"); assertEquals(li.getLatitude(), 41.15); assertEquals(li.getLongitude(), -8.617);
assertNotNull(infos); assertTrue(iter.hasNext()); assertEquals(li.getCountry(), "Spain"); assertEquals(li.getRegion(), "Galicia"); assertEquals(li.getLatitude(), 42.383); assertEquals(li.getLongitude(), -7.100);
assertNotNull(infos); assertFalse(infos.isEmpty()); assertTrue(infos.size() > 0); assertEquals(li.getCountry(), "Portugal"); assertEquals(li.getRegion(), "Porto"); assertEquals(li.getLatitude(), 41.15); assertEquals(li.getLongitude(), -8.617);
assertEquals(expected, res);
assertEquals(14, maxDesc.getTempC()); assertEquals(24, maxDescAndTemp.getTempC());
assertNotNull(infos); assertFalse(infos.isEmpty()); assertTrue(infos.size() > 0); assertEquals(parse("2019-02-01"), wi.date); assertEquals(14, wi.tempC); assertEquals(13.8, wi.precipMM); assertEquals("Patchy rain possible", wi.desc);
assertEquals(14, maxDesc.getTempC()); assertEquals(22, maxDescAndTemp.getTempC());
assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertNotNull(infos); assertFalse(infos.isEmpty()); assertTrue(infos.size() > 0); assertEquals(parse("2019-02-01"), wi.date); assertEquals(14, wi.tempC); assertEquals(13.8, wi.precipMM); assertEquals("Patchy rain possible", wi.desc);
assertEquals(18, maxDesc.getTempC()); assertEquals(18, maxDescAndTemp.getTempC());
assertNotNull(infos); assertTrue(iter.hasNext()); assertEquals(parse("2019-02-01"), wi.getDate()); assertEquals(14, wi.getTempC()); assertEquals(13.8, wi.getPrecipMM()); assertEquals("Patchy rain possible", wi.getDesc());
assertEquals(newKind, kindAfter); assertEquals(kindBefore, kindAfter); assertEquals(stateClass.getCanonicalName(), ExampleServiceState.class.getCanonicalName());
assertEquals(20, this.config.getInteger(XenonConfigurationTest.class, this.foundProperty, -1)); assertEquals(5, this.config.getInteger(XenonConfigurationTest.class, this.undefined, 5)); assertEquals(7, this.config.getInteger(XenonConfigurationTest.class, this.foundProperty, 7));
assertEquals(1, dnf.size()); assertTrue(dnf.contains("c1=v1 AND NOT(c2=v2)"));
assertTrue(q.offer("k1", Operation.createGet(URI.create("/test")))); assertTrue(q.offer("k2", Operation.createGet(URI.create("/test")))); assertFalse(q.offer("k3", excess)); assertEquals(503, excess.getStatusCode()); assertTrue(excess.getErrorResponseBody().message.contains("sayonara"));
assertThat(ownerIds).as("all peers say same owner for %s. %s", path, map).hasSize(1);
assertEquals(TaskStage.FAILED, waitForServiceCompletion.taskInfo.stage);
assertEquals(4, dnf.size()); assertTrue(dnf.contains("c1=v1 AND c3=v3")); assertTrue(dnf.contains("c1=v1 AND c4=v4")); assertTrue(dnf.contains("c2=v2 AND c3=v3")); assertTrue(dnf.contains("c2=v2 AND c4=v4"));
assertNotNull(claims.getProperties()); assertEquals(0, claims.getProperties().size());
assertEquals(TaskStage.FINISHED, waitForServiceCompletion.taskInfo.stage); assertEquals(Long.valueOf(this.serviceCount), processedDocuments);
assertNull(deser.documentSelfLink); assertNull(deser.documentKind);
assertEquals(2, dnf.size()); assertTrue(dnf.contains("c1=v1")); assertTrue(dnf.contains("c2=v2"));
assertTrue(content != null); assertTrue(content.length >= expectedByteCount);
assertEquals(1, dnf.size()); assertTrue(dnf.contains("c1=v1 AND c3=v3"));
assertNotNull(kindStat); assertEquals(this.serviceCount, kindStat.latestValue, 0);
assertTrue(resultTask.tenantLinks.contains("/links/foo")); assertTrue(resultTask.tenantLinks.contains("bar"));
assertEquals("abc", this.config.getString(XenonConfigurationTest.class, this.foundProperty, "xyz")); assertEquals("hello", this.config.getString(XenonConfigurationTest.class, this.undefined, "hello")); assertEquals("abc", this.config.getSecret(XenonConfigurationTest.class, this.foundProperty, "xyz")); assertEquals("hello", this.config.getSecret(XenonConfigurationTest.class, this.undefined, "hello"));
assertNull(Utils.getServiceUiResourcePath(new MyService()));
assertEquals(cookies.get("key1"), "val1"); assertEquals(cookies.get("key2"), "val2"); assertEquals(cookies.get("foo"), "bar"); assertEquals(cookies.size(), 0); assertEquals(cookies.size(), 0); assertEquals(cookies.size(), 1); assertEquals(cookies.get("foo"), "bar");
assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(), values.getClass()); assertSame(Collections.unmodifiableCollection(Collections.emptyList()).getClass(), values.getClass());
assertEquals(result2.documentCount, mergeResult.documentCount);
assertNotEquals(sign1, sign2); assertNotEquals(sign2, sign3); assertNotEquals(sign1, sign3);
assertTrue(cfg.options.contains(ServiceOption.CONCURRENT_GET_HANDLING)); assertTrue(!cfg.options.contains(ServiceOption.CONCURRENT_GET_HANDLING));
assertEquals(expectedPropertyNames, queryPropertyNames);
assertNotNull(claims.getProperties()); assertEquals(1, claims.getProperties().size()); assertEquals(VALUE, claims.getProperties().get(KEY));
assertTrue(Utils.isWithinTimeComparisonEpsilon(l)); assertFalse(Utils.isWithinTimeComparisonEpsilon(l));
assertEquals("value1", testHolder.keyValues.get("prop1"));
assertNotEquals(asc.toString(), desc.toString()); assertNotEquals(asc.toString(), juh.toString()); assertNotEquals(asc.toString(), chm.toString()); assertEquals(ascH, descH); assertEquals(ascH, juhH); assertEquals(ascH, chmH);
assertTrue(json.contains(" "));
assertTrue(verifyMergeResult(mergeResult, new int[] { 9, 8, 7, 6, 5, 4, 3, 2, 10, 1 }));
assertEquals("Counter in persisted state should be updated", Long.valueOf(1), state.counter);
assertEquals(TaskStage.FINISHED, finalServiceState.taskInfo.stage); assertTrue(format("%d <= %d", this.serviceCount, processedDocuments), processed); assertEquals(Long.valueOf(expectedUpdateTime), finalServiceState.latestSourceUpdateTimeMicros);
assertTrue(kind.hashCode() == k.hashCode());
assertEquals("joe", claims.getIssuer()); assertEquals(new Long(1300819380), claims.getExpirationTime()); assertEquals(true, claims.getIsRoot());
assertEquals(body, op.getBody(String.class)); assertNull(op.getRequestHeader(Operation.CONTENT_ENCODING_HEADER));
assertEquals("/a/b", UriUtils.getParentPath("/a/b/c")); assertEquals("/a", UriUtils.getParentPath("/a/b")); assertEquals("/", UriUtils.getParentPath("/a")); assertEquals(null, UriUtils.getParentPath("/"));
assertTrue(verifyMergeResult(mergeResult, new int[] { 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }));
assertEquals(Operation.STATUS_CODE_OK, putResponseOp.getStatusCode()); assertTrue(putResponseOp.hasBody()); assertEquals("response of put should be the one specified in request", newName, putResponseBody.name); assertEquals("document should not be updated", "init", getBody.name); assertEquals("document should not be updated", initialVersion, getBody.documentVersion); assertFalse("subscription should not be called for non modification", isSubscriptionCalled.get());
assertEquals(ERROR_MESSAGE_EN, message);
assertNull(e[0]);
assertEquals(0, this.minimalTestStates.size()); assertEquals(1, this.minimalTestStates.size()); assertEquals(minimalTestState.documentSelfLink, this.minimalTestStates.get(0).documentSelfLink); assertEquals(this.idValue1, this.minimalTestStates.get(0).id); assertEquals(0, this.minimalTestStates.size());
assertFalse(op.isNotification()); assertFalse(op.isNotification()); assertTrue(op.isNotification()); assertTrue(op.isNotification()); assertFalse(op.isNotification());
assertEquals(RoundingMode.CEILING, this.config .getChoice(XenonConfigurationTest.class, this.foundProperty, RoundingMode.class, RoundingMode.HALF_UP)); assertEquals(RoundingMode.FLOOR, this.config .getChoice(XenonConfigurationTest.class, this.undefined, RoundingMode.class, RoundingMode.FLOOR)); assertEquals(RoundingMode.UP, this.config .getChoice(XenonConfigurationTest.class, this.foundProperty, RoundingMode.class, RoundingMode.UP));
assertNotNull("op2 should fail with error", e); assertTrue("op1 should be called", called[0]); assertTrue("op2 should be called", called[1]); assertFalse("op3 should not be called", called[2]);
assertNotNull(privateKey); assertEquals("PKCS#8", privateKey.getFormat());
assertEquals(stringHash, stringHash2); assertTrue(keys.add(k)); assertTrue(hash != 0);
assertEquals(TaskStage.FINISHED, finalServiceState.taskInfo.stage);
assertEquals("/my-index-service", uri.getPath());
assertEquals(expected, actual);
assertEquals(SYSTEM_EX_MESSAGE, message);
assertEquals(TaskStage.FINISHED, finalState.taskInfo.stage); assertFalse(stats.entries.containsKey(MigrationTaskService.STAT_NAME_PROCESSED_DOCUMENTS));
assertEquals(size, b.length); assertTrue(b.hashCode() == bSame.hashCode()); assertTrue(b.hashCode() != bLarger.hashCode()); assertTrue(veryLarge.hashCode() != veryLargeSecond.hashCode());
assertEquals(1.5, this.config.getDecimal(XenonConfigurationTest.class, this.foundProperty, 20), 0.001); assertEquals(7, this.config.getDecimal(XenonConfigurationTest.class, this.undefined, 7), 0.001); assertEquals(7, this.config.getDecimal(XenonConfigurationTest.class, this.foundProperty, 7), 0.001);
assertEquals(Operation.STATUS_CODE_BAD_REQUEST, response.op.getStatusCode()); assertEquals(Operation.STATUS_CODE_BAD_REQUEST, response.op.getStatusCode()); assertEquals(Operation.STATUS_CODE_BAD_REQUEST, response.op.getStatusCode()); assertEquals(Operation.STATUS_CODE_BAD_REQUEST, response.op.getStatusCode());
assertTrue(q.offer("k1", Operation.createGet(URI.create("/test")))); assertTrue(q.offer("k1", Operation.createGet(URI.create("/test")))); assertFalse(q.offer("k1", excess)); assertEquals(503, excess.getStatusCode()); assertTrue(excess.getErrorResponseBody().message.contains("sayonara"));
assertTrue(Arrays.equals(gzippedBody, encodedBody)); assertEquals(op.getResponseHeader(Operation.CONTENT_ENCODING_HEADER), Operation.CONTENT_ENCODING_GZIP);
assertEquals(rfc7515A1jwt, signer.sign(claims));
assertEquals("http", u.getScheme()); assertEquals(basePath, u.getPath()); assertEquals(u.getQuery(), query); assertEquals("https", u.getScheme()); assertEquals(basePath, u.getPath()); assertEquals(8000, u.getPort()); assertEquals(u.getQuery(), query);
assertEquals(0, this.minimalTestStates.size()); assertEquals(1, this.minimalTestStates.size()); assertEquals(minimalTestState.documentSelfLink, this.minimalTestStates.get(0).documentSelfLink); assertEquals(this.idValue1, this.minimalTestStates.get(0).id); assertEquals(0, this.minimalTestStates.size());
assertEquals(waitForServiceCompletion.taskInfo.stage, TaskStage.FAILED); assertTrue("Invalid message received: " + waitForServiceCompletion.taskInfo.failure.message, waitForServiceCompletion.taskInfo.failure.message.contains( "Failed to verify availability of source factory service"));
assertEquals(expected, actual);
assertTrue(e.getInput().contains("</script>")); assertTrue(e.getInput().contains("%3C%2Fscript%3E"));
assertTrue(queueDepthStat.name.contains(ServiceUriPaths.CORE_AUTHZ_GUEST_USER));
assertEquals(TaskStage.FINISHED, finalServiceState.taskInfo.stage); assertEquals(0L, (long) res.documentCount); assertTrue(res.documentLinks.isEmpty()); assertEquals(states.size(), (long) res.documentCount); assertEquals(states.size(), res.documentLinks.size());
assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result)); assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result)); assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result)); assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result)); assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result)); assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));
assertTrue(verifyMergeResult(mergeResult, new int[] {}));
assertTrue(verifyMergeResult(mergeResult, new int[] { 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }));
assertTrue(javaClientRsp.name.equals(initialState.name)); assertTrue(javaClientRsp.name.equals(s.name)); assertEquals(Operation.STATUS_CODE_NOT_FOUND, r.statusCode);
assertEquals(TaskStage.FINISHED, finalState.taskInfo.stage);
assertEquals(1, dnf.size()); assertTrue(dnf.contains("c1=v1 AND c2=v2"));
assertEquals(exampleService.getOptions(), config.options); assertEquals(exampleService.getMaintenanceIntervalMicros(), config.maintenanceIntervalMicros); assertEquals(ExampleServiceState.VERSION_RETENTION_LIMIT, config.versionRetentionLimit); assertEquals(ExampleServiceState.VERSION_RETENTION_FLOOR, config.versionRetentionFloor); assertEquals(exampleService.getPeerNodeSelectorPath(), config.peerNodeSelectorPath); assertEquals(exampleService.getDocumentIndexPath(), config.documentIndexPath);
assertEquals(TaskStage.FINISHED, finalState.taskInfo.stage); assertNotNull("estimatedTotalServiceCount should be populated", statValue); assertEquals("estimatedTotalServiceCount", this.serviceCount, (long) statValue.latestValue);
assertTrue(ops.size() == this.count); assertTrue(q.isEmpty()); assertEquals(pragma, op.getRequestHeader(Operation.PRAGMA_HEADER));
assertEquals(COUNT, counter); assertEquals(COUNT, counter);
assertNotNull(privateKey); assertEquals("PKCS#8", privateKey.getFormat());
assertEquals(this.serviceCount, res.documentLinks.size());
assertTrue(val1.equals("val1")); assertTrue(val2.size() == 2); assertTrue(val2.contains("val21")); assertTrue(val2.contains("val22")); assertTrue(val3.size() == 2); assertTrue(val3.containsKey("key31")); assertTrue(val3.containsKey("key32"));
assertEquals(1, results.size()); assertEquals(20, results.get(0).intValue());
assertTrue(ops.size() == this.count); assertTrue(!q.isEmpty()); assertEquals(pragma, op.getRequestHeader(Operation.PRAGMA_HEADER)); assertTrue(q.isEmpty());
assertEquals(2, dnf.size()); assertTrue(dnf.contains("c1=v1 AND c2=v2")); assertTrue(dnf.contains("c3=v3 AND c4=v4"));
assertFalse("callback should not be called before populating data.(nothing to commit)", isNotified.get()); assertTrue("Something should be committed", sequenceNumber.get() > -1);
assertEquals(TaskStage.FAILED, finalState.taskInfo.stage);
assertEquals(s.size(), s1.size()); assertEquals(s.get(e.getKey()), e.getValue());
assertTrue(verifyMergeResult(mergeResult, new int[] { 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }));
assertEquals(rsp.getErrorCode(), 123123); assertEquals(rsp.getErrorCode(), 0x81234567);
assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(), values.getClass()); assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(), values.getClass());
assertEquals(TaskStage.FINISHED, finalState.taskInfo.stage);
assertEquals("/foo", nr); assertEquals("/foo", nr); assertEquals("", nr);
assertEquals(2, dnf.size()); assertTrue(dnf.contains("c1=match AND NOT(c2=match)")); assertTrue(dnf.contains("c1=match AND c3=match"));
assertNotNull(result); assertEquals(initState.destinationFactoryLink, result.destinationFactoryLink); assertEquals(initState.destinationNodeGroupReference, result.destinationNodeGroupReference); assertEquals(initState.sourceFactoryLink, result.sourceFactoryLink); assertEquals(initState.sourceNodeGroupReference, result.sourceNodeGroupReference);
assertEquals( "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.DMCAvRgzrcf5w0Z879BsqzcrnDFKBY_GN6c3qKOUFtQ", jwt);
assertEquals(body, op.getBody(String.class)); assertNull(op.getResponseHeader(Operation.CONTENT_ENCODING_HEADER));
assertEquals(json, "null");
assertEquals(1, dnf.size()); assertTrue(dnf.contains("nc1.ns1=v1"));
assertTrue("op success should call success handler", isSuccessHandlerCalled[0]); assertFalse("op success should NOT call success handler", isFailureHandlerCalled[0]); assertFalse("op failure should NOT call success handler", isSuccessHandlerCalled[0]); assertTrue("op failure should call success handler", isFailureHandlerCalled[0]);
assertEquals(expectedPropertyNames, queryPropertyNames);
assertNotNull(claims);
assertNotNull(peerNode); assertEquals(TaskStage.FINISHED, waitForServiceCompletion.taskInfo.stage); assertEquals(this.serviceCount * iteration, result.documentLinks.size());
assertTrue(f.buildDefaultChildSelfLink().startsWith(idHash)); assertTrue(f.buildDefaultChildSelfLink() != null); assertTrue(UUID.randomUUID().toString() != null);
assertEquals(COUNT, counter);
assertEquals(TaskStage.FAILED, waitForServiceCompletion.taskInfo.stage);
assertEquals(path, Utils.getServiceUiResourcePath(new MyService()));
assertNotNull(ManagementFactory.getPlatformMBeanServer().getMBeanInfo(new ObjectName(mbeanName)));
assertThat(attributeAddressForProfile.get() .getSelectedObjects()).isEqualTo(this.captureObjectsE);
assertThat(deviceLogItems.size()).isEqualTo(1);
assertThat(events.size()).isEqualTo(1);
assertThat(this.circuitBreaker.isClosed()).withFailMessage("Initial status should be CLOSED").isTrue();
assertThat(stacktrace).startsWith(this.getClass().getCanonicalName()).contains("\\n at ");
assertThat(new String(decrypted)).isEqualTo("hallo");
assertThat(logMessage).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(zipFile.exists()).isTrue(); assertThat(zipFile).hasExtension("zip"); assertThat(zipFile.length()).isNotZero(); assertThat(csvFile.exists()).isTrue(); assertThat(csvFile).hasExtension("csv"); assertThat(csvFile.length()).isNotZero(); assertThat(numberOfLines).isEqualTo(2l);
assertThat(filteredList.size()).isEqualTo(1);
assertThat(dateInSummerTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInSummerTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArraySummerTime());
assertThat(dateInSummerTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInSummerTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArraySummerTime());
assertThat(SearchUtil.replaceWildcards(input)).isNull();
assertThat(actual).isEqualTo(expected);
assertThat(dateInSummerTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInSummerTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArraySummerTime());
assertThat(attributeAddressForProfile.get() .getSelectedObjects()).isEqualTo(this.captureObjectsCombined);
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo(expected);
assertThat(this.validator.isValid(input, null)).isTrue();
assertThat(actual).isInstanceOf(expected);
assertThat(received).has(value(this.message));
assertThat(dateInWinterTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInWinterTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArrayWinterTime());
assertThat(actual).isEqualTo(expected);
assertThat(attributeAddress.isPresent()).isFalse();
assertThat(result).isSameAs(accessResultCode);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(attributeAddress.isPresent()).isFalse();
assertThat(actual).isEqualTo(DEFAULT_QUEUE);
assertThat(res).isEqualTo(AccessResultCode.SUCCESS); assertThat(this.setParametersReceived.size()).isEqualTo(1); assertThat((long) this.setParametersReceived.get(0).getData().getValue()).isEqualTo(9);
assertThat(this.validator.isValid(input, null)).isFalse();
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo("TST-11%");
assertThat(e.getExceptionType()).isEqualTo(FunctionalExceptionType.EXISTING_DEVICE); assertThat(e.getComponentType()).isEqualTo(ComponentType.DOMAIN_SMART_METERING);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isTrue();
assertThat(this.instance.handles(Protocol.SMR_5_0_0)).isTrue(); assertThat(this.instance.handles(Protocol.SMR_5_1)).isTrue(); assertThat(this.instance.handles(Protocol.DSMR_4_2_2)).isFalse(); assertThat(this.instance.handles(Protocol.OTHER_PROTOCOL)).isFalse(); assertThat(this.instance.handles(null)).isFalse();
assertThat(actual == 1).as("Message group id should be the same for same device").isTrue();
assertThat(actual).isEqualTo(expected);
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo("TS___-111");
assertThat(device.getLastSuccessfulConnectionTimestamp()).isNull(); assertThat(device.getLastSuccessfulConnectionTimestamp()).isNotNull();
assertThat(actual).isCloseTo(expected, within(0.001f));
assertThat(amrStatusCodeFlags.contains(AmrProfileStatusCodeFlagDto.DATA_NOT_VALID)).isTrue(); assertThat(amrStatusCodeFlags.contains(AmrProfileStatusCodeFlagDto.CLOCK_ADJUSTED)).isTrue();
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo("TST-1\\\\_1");
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo("TST\\\\%-111\\\\%");
assertThat(cosemDateTime.isDateTimeSpecified()).isTrue(); assertThat(ISODateTimeFormat.dateTime().print(dateInWinterTime)).isEqualTo("2015-02-21T14:53:07.230+01:00");
assertThat(actual).isEqualTo(expected);
assertThat(values.getIdentificationNumber()).isEqualTo(null);
assertThat(this.validator.isValid(input, null)).isFalse();
assertThat(filteredList.size()).isEqualTo(1);
assertThat(message.getValue().getOrganisationIdentification()).isEqualTo(ORGANISATION_IDENTIFICATION); assertThat(message.getValue().getDeviceIdentification()).isEqualTo(DEVICE_IDENTIFICATION); assertThat(actionList.size()).isEqualTo(this.actionRequestMockList.size()); assertThat(actionList.get(i)).isEqualTo(this.actionRequestMockList.get(i));
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo("TS\\\\\\\\T-1\\\\\\\\11");
assertThat(this.circuitBreaker.isClosed()).withFailMessage("Should be OPEN after explicit open circuit request") .isFalse();
assertThat(actual).isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(this.instance.handles(Protocol.SMR_5_0_0)).isTrue(); assertThat(this.instance.handles(Protocol.SMR_5_1)).isTrue(); assertThat(this.instance.handles(Protocol.DSMR_4_2_2)).isFalse(); assertThat(this.instance.handles(Protocol.OTHER_PROTOCOL)).isFalse(); assertThat(this.instance.handles(null)).isFalse();
assertThat(attributeAddressForProfile.get() .getSelectedObjects()).isEqualTo(expectedSelectedObjects);
assertThat(actual).isEqualTo(CUSTOM_USE_BACKOFF);
assertThat(actual).isEqualTo(expected);
assertThat(filteredList.size()).isEqualTo(1);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(result).isEqualToComparingFieldByField(expected); assertThat(result.getConnection()).isSameAs(this.connection);
assertThat(result).isSameAs(connectionManager);
assertThat(actual).isEqualTo(expected);
assertThat(this.validator.isValid(input, null)).isTrue();
assertThat(new DlmsDeviceBuilder().withHls5Active(true).withProtocol("SMR").build().needsInvocationCounter()) .isTrue(); assertThat(new DlmsDeviceBuilder().withHls5Active(false).withProtocol("SMR").build().needsInvocationCounter()) .isFalse(); assertThat(new DlmsDeviceBuilder().withHls5Active(true).withProtocol("DSMR").build().needsInvocationCounter()) .isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(cosemDateTime.isDateTimeSpecified()).isTrue(); assertThat(ISODateTimeFormat.dateTime().print(dateInSummerTime)).isEqualTo("2015-07-21T14:53:07.230+02:00");
assertThat(actual).isTrue();
assertThat(events.size()).isEqualTo(10);
assertThat((int) this.helperService.toBitPosition(AmrProfileStatusCodeFlagDto.CLOCK_INVALID)).isEqualTo(1); assertThat((int) this.helperService.toBitPosition(AmrProfileStatusCodeFlagDto.DAYLIGHT_SAVING)).isEqualTo(3); assertThat((int) this.helperService.toBitPosition(AmrProfileStatusCodeFlagDto.POWER_DOWN)).isEqualTo(7);
assertThat(filteredList.size()).isEqualTo(0);
assertThat(e.getExceptionType()).isEqualTo(FunctionalExceptionType.UNKNOWN_PROTOCOL_NAME_OR_VERSION); assertThat(e.getComponentType()).isEqualTo(ComponentType.DOMAIN_SMART_METERING);
assertThat(res).isEqualTo(AccessResultCode.SUCCESS); assertThat(this.setParametersReceived.size()).isEqualTo(0);
assertThat(device.isInvocationCounterInitialized()).isFalse();
assertThat(actual).isFalse();
assertThat(this.circuitBreaker.isClosed()).withFailMessage("Status should be OPEN after 2 failures").isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(versionsNotInHistory).withFailMessage("List should be empty").isEmpty();
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(versionsNotInHistory).withFailMessage("Lists should be equal").isEqualTo(expected);
assertThat(result).isSameAs(connectionManager);
assertThat(actual >= 0 && actual < this.messageGroupCacheSize) .as("Message group id should be between 0 and cache size " + this.messageGroupCacheSize).isTrue();
assertThat(res).isEqualTo(AccessResultCode.SUCCESS); assertThat(this.setParametersReceived.size()).isEqualTo(1); assertThat((long) this.setParametersReceived.get(0).getData().getValue()).isEqualTo(11);
assertThat(actual).isEqualTo(expected);
assertThat(actualConnection).isEqualTo(expectedConnection);
assertThat(actual <= this.messageGroupCacheSize) .as("Number of message groups should not exceed cache size " + this.messageGroupCacheSize).isTrue();
assertThat(resultCode).isEqualTo(AccessResultCode.SUCCESS);
assertThat(value).isEqualTo(GPRS_OPERATION_MODE.getNumber());
assertThat(result).isEqualToComparingFieldByField(expected); assertThat(result.getConnection()).isSameAs(this.connection);
assertThat(logItemCaptor.getValue().getMessage()).isEqualTo(asduCaptor.getValue().toString());
assertThat(result).isSameAs(this.configurationObjectDto);
assertThat(this.validator.isValid(input, null)).isTrue();
assertThat(actualConnection).isEqualTo(expectedConnection);
assertThat(actualConnection).isEqualTo(expectedConnection);
assertThat(s).isEqualTo((short) 131);
assertThat(actual).isEqualTo(expected);
assertThat(savedSecret).isNotNull(); assertThat(savedSecret.getDeviceIdentification()).isEqualTo("SOME_DEVICE"); assertThat(savedSecret.getSecretType()).isEqualTo(typedSecret.getSecretType()); assertThat(savedSecret.getEncodedSecret()).isEqualTo(HexUtils.toHexString(encryptedSecret.getSecret())); assertThat(savedSecret.getEncryptionKeyReference()).isEqualTo(keyReference); assertThat(savedSecret.getCreationTime()).isNotNull();
assertThat(actual).isEqualTo(expected);
assertThat(actualConnection).isEqualTo(expectedConnection);
assertThat(result).isEqualToComparingFieldByField(expected); assertThat(result.getConnection()).isSameAs(this.connection);
assertThat(actual).isEqualTo(expected);
assertThat(SearchUtil.replaceWildcards(input)).isEqualTo(input);
assertThat(this.instance.handles(Protocol.SMR_5_0_0)).isFalse(); assertThat(this.instance.handles(Protocol.SMR_5_1)).isFalse(); assertThat(this.instance.handles(Protocol.DSMR_4_2_2)).isTrue(); assertThat(this.instance.handles(Protocol.OTHER_PROTOCOL)).isFalse(); assertThat(this.instance.handles(null)).isFalse();
assertThat(this.validator.isValid(input, null)).isFalse();
assertThat(this.circuitBreaker.isClosed()) .withFailMessage("Should be CLOSED after explicit close circuit request") .isTrue();
assertThat(typedSecrets).isNotNull(); assertThat(typedSecrets.size()).isEqualTo(1); assertThat(typedSecret.getSecret()).isEqualTo(HexUtils.toHexString("secret".getBytes())); assertThat(typedSecret.getSecretType()).isEqualTo(SecretType.E_METER_MASTER_KEY);
assertThat((long) this.alarmHelperService.toLongValue(alarmTypes)).isEqualTo(17895681L);
assertThat(decrypted_prepended.length).isEqualTo(16);
assertThat(e).isEqualTo(fe);
assertThat(actual).isEqualTo(DEFAULT_USE_BACKOFF);
assertThat(values.getPrimaryAddress()).isEqualTo(PRIMARY_ADDRESS); assertThat(values.getIdentificationNumber()).isEqualTo(String.valueOf(IDENTIFICATION_NUMBER)); assertThat(values.getManufacturerIdentification()).isEqualTo(MANUFACTURER_IDENTIFICATION_AS_TEXT); assertThat(values.getVersion()).isEqualTo(VERSION); assertThat(values.getDeviceTypeIdentification()).isEqualTo(DEVICE_TYPE);
assertThat(this.circuitBreaker.isClosed()).withFailMessage("Status should be CLOSED after waiting for 35 ms") .isTrue();
assertThat(actual).isEqualTo(expected);
assertThat(filteredList.size()).isEqualTo(1);
assertThat(value).isEqualTo(GPRS_OPERATION_MODE.getNumber());
assertThat(filteredList.size()).isEqualTo(1);
assertThat(actual).isEqualTo(expected);
assertThat(FindMatchingChannelHelper.matches(requestData, channelValues)) .withFailMessage(requestData + " should match " + channelValues) .isTrue();
assertThat(actual).usingRecursiveComparison().isEqualTo(expected);
assertThat(zipFile.exists()).isTrue(); assertThat(zipFile).hasExtension("zip"); assertThat(zipFile.length()).isNotZero(); assertThat(csvFile.exists()).isTrue(); assertThat(csvFile).hasExtension("csv"); assertThat(csvFile.length()).isNotZero(); assertThat(numberOfLines).isEqualTo(2l);
assertThat(actual).isTrue();
assertThat(dateInWinterTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInWinterTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArrayWinterTime());
assertThat(this.validator.isValid(input, null)).isTrue();
assertThat(dateInWinterTimeDataObject.isCosemDateFormat()).isTrue(); assertThat(dateInWinterTimeDataObject.getValue() instanceof CosemDateTime).isTrue(); assertThat(cosemDateTime.encode()).isEqualTo(this.byteArrayWinterTime());
assertThat(filteredList.size()).isEqualTo(0);
assertThat(deviceLogItems.size()).isEqualTo(10);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(cosemDateTime.isDateTimeSpecified()).isFalse(); assertThat(cosemDateTime.isLocalDateSpecified()).isFalse(); assertThat(cosemDateTime.isLocalDateTimeSpecified()).isFalse(); assertThat(cosemDateTime.isLocalTimeSpecified()).isFalse(); assertThat(cosemDateTime.isDeviationSpecified()).isFalse(); assertThat(cosemDateTime.asDateTime()).isNull();
assertThat(filteredList.size()).isEqualTo(0);
assertThat(this.validator.isValid(input, null)).isFalse();
assertThat(result).isSameAs(this.getService);
assertThat(actual).isNull();
assertThat(actual).isEqualTo(CUSTOM_QUEUE);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(expected);
assertThat(this.device.getLastSuccessfulConnectionTimestamp()).isNull(); assertThat(this.device.getLastSuccessfulConnectionTimestamp()).isNotNull();
assertThat((short) this.helperService.toValue(amrStatusCodeFlags)).isEqualTo((short) 132);
assertThat(this.instance.handles(Protocol.SMR_5_0_0)).isFalse(); assertThat(this.instance.handles(Protocol.SMR_5_1)).isFalse(); assertThat(this.instance.handles(Protocol.DSMR_4_2_2)).isTrue(); assertThat(this.instance.handles(Protocol.OTHER_PROTOCOL)).isFalse(); assertThat(this.instance.handles(null)).isFalse();
assertThat(zipFilePath).isEqualTo(this.filePath + ".zip"); assertThat(zipFile).isNotNull(); assertThat(zipFile.exists()).isTrue();
assertThat(actual).isEqualTo(expected);
assertEquals(this.messageMetadata.getDeviceIdentification(), savedDevice.getDeviceIdentification()); assertEquals(DEFAULT_QOS.name(), savedDevice.getQos()); assertEquals(this.messageMetadata.getIpAddress(), savedDevice.getHost()); assertEquals(DEFAULT_TOPICS, savedDevice.getTopics()); assertEquals(DEFAULT_PORT, savedDevice.getPort());
assertThat(actual).isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(filteredList.size()).isEqualTo(0);
assertThat(filterLocations.length, equalTo(0));
assertThat(classNames.length, equalTo(0));
assertThat(classNames.length, equalTo(1)); assertThat(classNames[0], equalTo(expectedClass.getCanonicalName()));
assertThat(classNames.length, equalTo(1)); assertThat(classNames[0], equalTo(expectedClass.getCanonicalName()));
assertThat(filterLocations.length, equalTo(3)); assertThat(filterLocations[1], equalTo("outbound"));
assertEquals("GET", httpRequest.getMethod());
assertEquals(speakable.getDocument(), receivedDocument);
assertEquals(speakable1.getDocument(), receivedObject);
assertEquals(uriString, httpRequestString);
assertEquals(uriString, httpRequestString);
assertEquals(uriString, httpRequestString);
assertEquals(BASE_URL, httpRequestString);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(dbAuthenticator.checkValid(null, "dbuser", "password".getBytes()));
assertEquals(50, n.get());
assertTrue(authorizations.canRead(new Topic("/weather/italy/anemometer"), "", "")); assertTrue(authorizations.canWrite(new Topic("/weather/italy/anemometer"), "", ""));
assertEquals(MqttQoS.AT_LEAST_ONCE, lowerQosToTheSubscriptionDesired(subQos1, MqttQoS.EXACTLY_ONCE)); assertEquals(MqttQoS.EXACTLY_ONCE, lowerQosToTheSubscriptionDesired(subQos2, MqttQoS.EXACTLY_ONCE));
assertTrue(authorizations.canRead(new Topic("/weather/+/anemometer"), "", "")); assertTrue(authorizations.canWrite(new Topic("/weather/+/anemometer"), "", ""));
assertEquals(70, n.get());
assertFalse(dbAuthenticator.checkValid(null, "dbuser", "wrongPassword".getBytes()));
assertFalse("Node on path /humidity can\'t be present", matchedNode.isPresent());
assertFalse(dbAuthenticator.checkValid(null, "dbuser2", "password".getBytes()));
assertEquals(60, n.get());
assertTrue(authorizations.isEmpty());
assertThat(new Topic("finance/stock/ibm")).containsToken("finance", "stock", "ibm"); assertThat(new Topic("/finance/stock/ibm")).containsToken(Token.EMPTY, "finance", "stock", "ibm"); assertThat(new Topic("/")).containsToken(Token.EMPTY, Token.EMPTY);
assertEquals(40, n.get());
assertTrue(authorizations.canRead(new Topic("/weather/italy/anemometer/#"), "", "")); assertTrue(authorizations.canWrite(new Topic("/weather/italy/anemometer/#"), "", ""));
assertTrue(this.sessionsRepository.sessionForClient(FAKE_PUBLISHER_ID).isEmptyQueue());
assertEquals(80, n.get());
assertEquals("93834", getManifestValue(new File("src/test/resources/small_program.jar"), "test-attribute").get());
assertEquals(RS_Ping.newBuilder().build(), ((RS_Ping.Builder) rs).build());
assertNotNull(fileCreated); assertEquals("added.txt", fileCreated.getName()); assertEquals(UpdateType.ENTRY_CREATE, fileCreated.getUpdateType()); assertEquals(0, eventQueue.size(), "Unexpected events: " + Arrays.toString(eventQueue.toArray()));
assertEquals(88, getResourceSize(new File("src/test/resources/small_program.jar"), "/META-INF/MANIFEST.MF")); assertEquals(88, getResourceSize(new File("src/test/resources/small_program.jar"), "META-INF/MANIFEST.MF"));
assertTrue(rq != null); assertEquals(InstanceType.CLIENT, rq.getInstance()); assertEquals(InstanceFlavor.MEGA, rq.getInstanceFlavor()); assertEquals("testuuid", rq.getUuid());
assertTrue(rand >= min); assertTrue(rand <= max);
assertFalse(checkPort("127.0.0.1", 8923)); assertTrue(checkPort("127.0.0.1", 8923)); assertFalse(checkPort("127.0.0.1", 8923));
assertEquals("", RandUtil.nextNumeric(0));
assertEquals("", RandUtil.nextAlphabetic(0)); assertTrue(Character.isLetter(c));
assertFalse(version("5.0.0--0")); assertFalse(version("5.0.0-")); assertTrue(version("5.0.0-9")); assertTrue(version("5.0.0-92833434"));
assertFalse(port(null)); assertFalse(port("")); assertFalse(port("123456789")); assertFalse(port("4000g")); assertFalse(port("test")); assertFalse(port("-5000")); assertTrue(port("80")); assertTrue(port("8080")); assertTrue(port("10101"));
assertTrue(DnsUtil.getPort("invalid123").isEmpty()); assertTrue(DnsUtil.getPort("test.google.com").isEmpty());
assertNotNull(fileModified); assertEquals("test.txt", fileModified.getName()); assertEquals(UpdateType.ENTRY_MODIFY, fileModified.getUpdateType()); assertEquals(0, eventQueue.size(), "Unexpected events: " + Arrays.toString(eventQueue.toArray()));
assertTrue(fs.list().stream().anyMatch(listlet -> { return "test1".equals(listlet.getName()) && listlet.getDirectory() == true; })); assertTrue(fs.list().stream().anyMatch(listlet -> { return "small_file.txt".equals(listlet.getName()) && listlet.getDirectory() == false; })); assertEquals(2, fs.list().size());
assertTrue(getManifestValue(new File("src/test/resources/small_program.jar"), "nonexist-attribute").isEmpty()); assertTrue(getManifestValue(new File("src/test/resources/small_program.jar"), "").isEmpty());
assertEquals(new Date(1495861281000L), cert.getNotBefore()); assertEquals(new Date(1527397281000L), cert.getNotAfter());
assertEquals("3.6.0.Beta2", getLatestVersion("org.hibernate:hibernate:")); assertEquals("3.6.0.Beta2", getLatestVersion("org.hibernate:hibernate:3.5.4-Final"));
assertTrue(Files.exists(temp.resolve("unit-api-1.0.jar")));
assertFalse(path(null)); assertTrue(path("test/.test.txt"));
assertEquals(OidUtil.OTYPE_COLLECTION, OidUtil.getOidType(OidUtil.computeCollectionTag(12)));
assertEquals("ssh", serviceName(22).get()); assertEquals("sandpolis", serviceName(8768).get());
assertFalse(version(null)); assertFalse(version("5..0")); assertFalse(version("5..0.0")); assertFalse(version("5.0.0.0")); assertTrue(version("5.0.0")); assertTrue(version("05.00.00"));
assertFalse(username(null)); assertFalse(username("test user")); assertFalse(username("_test*")); assertFalse(username("")); assertFalse(username(RandUtil.nextAlphabetic(USER_MAX + 1))); assertFalse(username(RandUtil.nextAlphabetic(USER_MIN - 1))); assertTrue(username("cilki"));
assertTrue(rand >= min); assertTrue(rand <= max);
assertFalse(fs.down("test.txt"));
assertNotNull(fileDeleted); assertEquals("test.txt", fileDeleted.getName()); assertEquals(UpdateType.ENTRY_DELETE, fileDeleted.getUpdateType()); assertEquals(0, eventQueue.size(), "Unexpected events: " + Arrays.toString(eventQueue.toArray()));
assertFalse(group(null)); assertFalse(group("test group**")); assertFalse(group(RandUtil.nextAlphabetic(GROUP_MAX + 1))); assertFalse(group(RandUtil.nextAlphabetic(GROUP_MIN - 1))); assertTrue(group("test group"));
assertTrue(resourceExists(Paths.get("src/test/resources/small_program.jar"), "/META-INF/MANIFEST.MF")); assertTrue(resourceExists(Paths.get("src/test/resources/small_program.jar"), "META-INF/MANIFEST.MF")); assertFalse(resourceExists(Paths.get("src/test/resources/small_program.jar"), "META-INF/MANIFEST.MF2"));
assertTrue(fs.down("test1")); assertTrue(fs.down("test2")); assertTrue(fs.down("test3"));
assertEquals(new Date(1495861281000L), cert.getNotBefore()); assertEquals(new Date(1527397281000L), cert.getNotAfter());
assertEquals(null, HttpUrl.get(uri));
assertEquals(null, HttpUrl.get(uri));
assertEquals(null, HttpUrl.get(javaNetUrl));
assertEquals("text", mediaType.type()); assertEquals("plain", mediaType.subtype()); assertEquals("UTF-8", mediaType.charset().name()); assertEquals("text/plain;boundary=foo;charset=utf-8", mediaType.toString()); assertTrue(mediaType.equals(MediaType.parse("text/plain;boundary=foo;charset=utf-8"))); assertEquals(mediaType.hashCode(), MediaType.parse("text/plain;boundary=foo;charset=utf-8").hashCode());
assertThat(type(ExampleClass.class), matcherUnderTest);
assertThat(new ConvertObjectToClass().convert(new ExampleClass()), equalTo((Object) ExampleClass.class));
assertThat( new ConvertClassToReflectedType(new ReflectedTypeFactoryImpl()).convert(ExampleClass.class), reflectingOn(ExampleClass.class));
assertThat(new ConvertConstructorToReflectedConstructor<ExampleClass>( new ReflectedTypeFactoryImpl(), ExampleClass.class) .convert(ExampleClass.class .getDeclaredConstructor()), reflectingOnConstructor(ExampleClass.class .getDeclaredConstructor()));
assertThat(healthDescriptor.isEnabled()).isTrue(); assertThat(model.getSeries().get(0).getName()).isEqualTo("Excellent"); assertThat(model.getSeries().get(1).getName()).isEqualTo("Satisfactory"); assertThat(model.getSeries().get(2).getName()).isEqualTo("Failing");
assertThat(report.getErrorMessages()) .hasSize(2) .contains("Can\'t copy some affected workspace files to Jenkins build folder:", "- \'file.txt\', IO exception has been thrown: java.io.IOException"); assertThat(report.getInfoMessages()).hasSize(1); assertThat(message).contains("0 copied"); assertThat(message).contains("0 not in workspace"); assertThat(message).contains("0 not-found"); assertThat(message).contains("1 with I/O error");
assertThat(createdHtml).containsPattern( createWarningsLink( "Quality gate: <img src=\\"color\\" class=\\"icon-blue\\" alt=\\"Success\\" title=\\"Success\\"> Success"));
assertThat(model.validateJob(jobName)).isOk(); assertThat(model.validateJob(NO_REFERENCE_JOB)).isOk(); assertThat(model.validateJob("")).isOk();
assertThat(document.getElementsByClass("analysis-warning-title").html()) .isEqualTo("Hello <b>MessageLine1<br>Line2<br>Line3</b>"); assertThat(document.getElementsByClass("analysis-detail")).isEmpty(); assertThat(document.getElementsByClass("collapse-panel")).isEmpty();
assertThat(healthDescriptor.isEnabled()).isFalse(); assertThat(model.getSeries().get(0).getName()).isEqualTo("Total (health report disabled)");
assertThat(run).hasFixedSize(0); assertThat(run.add(first)).hasFixedSize(2); assertThat(run.add(second)).hasFixedSize(5);
assertThat(document.text()).isEqualToIgnoringWhitespace(expectedFile); assertThat(pre.text()).isEqualToIgnoringWhitespace(expectedFile);
assertThat(createdHtml).doesNotContain("Reference build:");
assertThat(qualityGate.evaluate(builder.build(), logger)).isEqualTo(QualityGateStatus.INACTIVE); assertThat(logger.getMessages()).containsExactly( "-> INACTIVE - No quality gate defined");
assertThat(value).isEqualTo(0);
assertThat(action.getDisplayName()).isEqualTo(LINK_NAME);
assertThat(createMessages().size()).isEqualTo( EXPECTED_PATTERNS + EXPECTED_CONTRIB_PATTERNS + EXPECTED_SECURITY_PATTERNS);
assertThat(createdHtml).contains("Reference build: <a href=\\"absoluteUrl\\">Job #15</a>");
assertThat(value).isEqualTo(1);
assertThat(selector.get(run)).isEmpty();
assertThat(value).isEqualTo(1);
assertThat(renderer.renderAffectedFileLink(issue)).matches("<a href=\\"source\\\\.[0-9a-f-]+/#20\\">Console Output:20</a>"); assertThat(renderer.renderAffectedFileLink(issue)).contains(issue.getId().toString());
assertThat(run).hasNewSize(0); assertThat(run.add(first)).hasNewSize(13); assertThat(run.add(second)).hasNewSize(26);
assertThat(createdHtml).contains(Messages.Tool_ParticipatingTools("CheckStyle, PMD"));
assertThat(document.getElementsByClass("analysis-warning-title").text()) .isEqualTo(MESSAGE); assertThat(document.getElementsByClass("analysis-detail")).isEmpty(); assertThat(document.getElementsByClass("collapse-panel")).isEmpty();
assertThat(configuration.getParsers()).isEmpty();
assertThat(createdHtml).doesNotContain(Messages.Tool_ParticipatingTools(""));
assertThat(filtered).hasSize(1); assertThat(report.get(0)).hasFileName("warning.txt");
assertThat(details).isInstanceOfSatisfying(IssuesDetail.class, d -> assertThat(d.getDisplayName()).isEqualTo("Static Analysis"));
assertThat(expandMacro(macro, run)).isEqualTo("1"); assertThat(expandMacro(macro, run)).isEqualTo("1"); assertThat(expandMacro(macro, run)).isEqualTo("0");
assertThat(selector.get(run)).isPresent();
assertThat(createdHtml).doesNotContain("No warnings for"); assertThat(createdHtml).contains("<a href=\\"test\\">One warning</a>");
assertThat(tasks).hasSize(2); assertThat(tasks.get(0)).hasMessage(PRIORITY_NORMAL_MESSAGE); assertThat(tasks.get(1)).hasMessage(PRIORITY_HIGH_MESSAGE);
assertThat(details).hasIssues(ALL_ISSUES); assertThat(details).hasFixedIssues(FIXED_ISSUES); assertThat(details).hasNewIssues(NEW_ISSUES); assertThat(details).hasOutstandingIssues(OUTSTANDING_ISSUES);
assertThat(value).isEqualTo(2);
assertThat(details).isInstanceOf(SourceDetail.class); assertThat(((SourceDetail) details).getSourceCode()).contains("IOException: file error");
assertThat(createdHtml).contains("<div id=\\"test-summary\\">"); assertThat(createdHtml).contains("id=\\"test-title\\"");
assertThat(consoleDetail.getSourceCode()) .doesNotContain("<b>CheckStyle</b> <script>execute</script>") .contains("&lt;b&gt;CheckStyle&lt;/b&gt; &lt;script&gt;execute&lt;");
assertThat(matcher.createIssue(null, builder, 0, FILE_NAME)).isEmpty();
assertThat(value).isEqualTo(2);
assertThat(value).isEqualTo(3);
assertThat(tasks).hasSize(1);
assertThat(run).hasTotalSize(0); assertThat(run.add(first)).hasTotalSize(10); assertThat(run.add(second)).hasTotalSize(36);
assertThat(action.getTrendName()).isEqualTo(TREND_NAME);
assertThat(summary.create()).contains( "Quality gate: <img src=\\"color\\" class=\\"icon-blue\\" alt=\\"Success\\" title=\\"Success\\"> Success " + "<button id=\\"test-resetReference\\" type=\\"button\\" class=\\"btn btn-outline-primary btn-sm\\">Reset quality gate</button>");
assertThat(createdHtml).doesNotContainPattern( createWarningsLink("<a href=\\"test/fixed\\">.* fixed warnings.*</a>"));
assertThat(tasks).hasSize(2);
assertThat(tasks).hasSize(12); assertThat(task.getType()).startsWith("TODO");
assertThat(model.validateJob(referenceJob)) .isError() .hasMessage("There is no such job - maybe the job has been renamed?");
assertThat(value).isEqualTo(2);
assertThat(data.get(0)).isEqualTo(new PieData("Error", 1)); assertThat(data.get(1)).isEqualTo(new PieData("High", 0)); assertThat(data.get(2)).isEqualTo(new PieData("Normal", 0)); assertThat(data.get(3)).isEqualTo(new PieData("Low", 0));
assertThat(model.getData().size()).isEqualTo(3); assertThat(model.getColors().size()).isEqualTo(3); assertThat(data.get(i).getName()).isEqualTo(names[i]); assertThat(data.get(i).getValue()).isEqualTo(sizes[i]); assertThat(model.getColors().get(i)).isEqualTo(colors[i].getNormal());
assertThat(expandMacro(macro, run)).isEqualTo("0"); assertThat(expandMacro(macro, run)).isEqualTo("0");
assertThat(createdHtml).containsPattern( createWarningsLink("<a href=\\"test/fixed\\">.*5 fixed warnings.*</a>"));
assertThat(modelHasDuplicateColors).isTrue();
assertThat(report.getErrorMessages()).isEmpty(); assertThat(report.getInfoMessages()).hasSize(1); assertThat(message).contains("1 copied"); assertThat(message).contains("0 not in workspace"); assertThat(message).contains("0 not-found"); assertThat(message).contains("0 with I/O error");
assertThat(expandMacro(macro, run)).isEqualTo("3"); assertThat(expandMacro(macro, run)).isEqualTo("1"); assertThat(expandMacro(macro, run)).isEqualTo("2"); assertThat(expandMacro(macro, run)).isEqualTo("0");
assertThat(createdHtml).contains("No warnings for"); assertThat(createdHtml).contains(Messages.Tool_ParticipatingTools("CheckStyle, PMD"));
assertThat(value).isEqualTo(2);
assertThat(actualModel).hasSize(2); assertThat(actualModel).containsExactly(NO_REFERENCE_JOB, name);
assertThat(twoFiles.getFiles()).containsExactlyInAnyOrder(absolute(TXT_FILE), absolute(JAVA_FILE)); assertThat(twoFiles.getLines(absolute(TXT_FILE))).containsExactly(1); assertThat(twoFiles.getLines(absolute(JAVA_FILE))).containsExactly(10);
assertThat(get(configuration, relativeUnix)).isEqualTo(getWorkspaceChild(relativeUnix)); assertThat(get(configuration, relativeWindows)).isEqualTo(getWorkspaceChild(relativeWindows)); assertThat(get(configuration, absoluteUnix)).isEqualTo(absoluteUnix); assertThat(get(configuration, absoluteWindows)).isEqualTo(normalize(absoluteWindows)); assertThat(get(configuration, absoluteWindowsNormalized)).isEqualTo(absoluteWindowsNormalized);
assertThat(data.get(0)).isEqualTo(new PieData("High", 0)); assertThat(data.get(1)).isEqualTo(new PieData("Normal", 0)); assertThat(data.get(2)).isEqualTo(new PieData("Low", 0));
assertThat(report).hasSize(3); assertThat(report.get(i)).hasBaseName(FILE_NAME).hasLineStart(i + 1).hasMessage(String.valueOf(i + 1));
assertThat(details).hasIssues(OUTSTANDING_ISSUES); assertThat(details).hasFixedIssues(NO_ISSUES); assertThat(details).hasNewIssues(NO_ISSUES); assertThat(details).hasOutstandingIssues(OUTSTANDING_ISSUES);
assertThat(action.getId()).isEqualTo(ID);
assertThat(result).isEqualTo(new IssueBuilder().setLineStart(15).setFileName("File.txt").buildOptional());
assertThat(report.getErrorMessages()).contains("Exception while reading the source code file \'\':");
assertThat(value).isEqualTo(1);
assertThat(data.get(0)).isEqualTo(new PieData("Error", 1)); assertThat(data.get(1)).isEqualTo(new PieData("High", 1)); assertThat(data.get(2)).isEqualTo(new PieData("Normal", 1)); assertThat(data.get(3)).isEqualTo(new PieData("Low", 1));
assertThat(outputStream.toString()) .isEqualTo(String.format("[%s] %s%n", LOG_HANDLER_NAME, LOGGER_MESSAGE));
assertThat(document.getElementsByClass("analysis-warning-title").text()) .isEqualTo(MESSAGE); assertThat(document.getElementsByClass("analysis-detail").text()) .isEqualTo(DESCRIPTION);
assertThat(details.getErrorMessages()).containsExactly(ERROR_MESSAGES); assertThat(details.getDisplayName()).contains(PARENT_NAME);
assertThat(value).isEqualTo(1);
assertThat(details).hasIssues(FIXED_ISSUES); assertThat(details).hasFixedIssues(FIXED_ISSUES); assertThat(details).hasNewIssues(NO_ISSUES); assertThat(details).hasOutstandingIssues(NO_ISSUES);
assertThat(report.getErrorMessages()).isEmpty(); assertThat(report.getInfoMessages()).hasSize(1); assertThat(message).contains("0 copied"); assertThat(message).contains("1 not in workspace"); assertThat(message).contains("0 not-found"); assertThat(message).contains("0 with I/O error");
assertThat(selector.get(run)).isEmpty();
assertThat(actualProperty).isEqualTo("category");
assertThat(details).hasIssues(NEW_ISSUES); assertThat(details).hasFixedIssues(NO_ISSUES); assertThat(details).hasNewIssues(NEW_ISSUES); assertThat(details).hasOutstandingIssues(NO_ISSUES);
assertThat(expandMacro(macro, run)).isEqualTo("3"); assertThat(expandMacro(macro, run)).isEqualTo("2"); assertThat(expandMacro(macro, run)).isEqualTo("1");
assertThat(emptyNameLabelProvider).hasId(ID); assertThat(emptyNameLabelProvider).hasName(emptyNameLabelProvider.getDefaultName()); assertThat(nullNameLabelProvider).hasId(ID); assertThat(nullNameLabelProvider).hasName(nullNameLabelProvider.getDefaultName()); assertThat(noNameLabelProvider).hasId(ID); assertThat(noNameLabelProvider).hasName(noNameLabelProvider.getDefaultName());
assertThat(document.text()).isEqualToIgnoringWhitespace(expectedFile); assertThat(pre.text()).isEqualToIgnoringWhitespace(expectedFile);
assertThat(document.getElementsByClass("analysis-warning-title").html()) .isEqualToIgnoringWhitespace("Hello <b>Message</b>"); assertThat(document.getElementsByClass("analysis-detail").html()) .isEqualToIgnoringWhitespace("Hello <b>Description</b>");
assertThat(value).isEqualTo(0);
assertThat(high).hasSize(1); assertThat(high.get(0)).hasType(FIXME); assertThat(normal).hasSize(1); assertThat(normal.get(0)).hasType(FIXME);
assertThat(series.size()).isEqualTo(2); assertThat(series.get(NewVersusFixedSeriesBuilder.NEW)).isEqualTo(newSize); assertThat(series.get(NewVersusFixedSeriesBuilder.FIXED)).isEqualTo(fixedSize);
assertThat(value).isEqualTo(2);
assertThat(value).isEqualTo(0);
assertThat(createdHtml).doesNotContain("Quality gate");
assertThat(tasks).hasSize(9); assertThat(task).hasType("TODO");
assertThat(tasks).hasSize(3);
assertThat(createdHtml).doesNotContainPattern( createWarningsLink("<a href=\\"test/new\\">.* new warnings.*</a>"));
assertThat(consoleDetail.getSourceCode()).contains("<td >1</td>"); assertThat(consoleDetail.getSourceCode()).contains("<td >10</td>");
assertThat(value).isEqualTo(0);
assertThat(createdHtml).containsPattern("No warnings for .* builds");
assertThat(value).isEqualTo(1);
assertThat(consoleDetail.getSourceCode()).contains("#FCAF3E\\">1</td>"); assertThat(consoleDetail.getSourceCode()).contains("#FCAF3E\\">2</td>"); assertThat(consoleDetail.getSourceCode()).contains("<td >3</td>"); assertThat(consoleDetail.getSourceCode()).contains("<td >12</td>"); assertThat(consoleDetail.getSourceCode()).doesNotContain("<td >13</td>");
assertThat(model.getRows()).hasSize(2); assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION) .hasAge("1") .hasPackageName(PACKAGE_NAME) .hasCategory("<a href=\\"category.1296530210/\\">category-1</a>") .hasType("<a href=\\"type.-858804642/\\">type-1</a>") .hasSeverity("<a href=\\"HIGH\\">High</a>");
assertThat(selector.get(run)).isPresent();
assertThat(allCharsets).isNotEmpty().contains("UTF-8", "ISO-8859-1");
assertThat(tasks).hasSize(12);
assertThat(singleLine.getFiles()).containsExactly(absolute(TXT_FILE)); assertThat(singleLine.getLines(absolute(TXT_FILE))).containsExactly(1);
assertThat(action.getOwner()).isEqualTo(job);
assertThat(consoleDetail.getSourceCode()).contains("<td >1</td>"); assertThat(consoleDetail.getSourceCode()).contains("<td >4</td>"); assertThat(consoleDetail.getSourceCode()).contains("#FCAF3E\\">5</td>"); assertThat(consoleDetail.getSourceCode()).contains("#FCAF3E\\">10</td>"); assertThat(consoleDetail.getSourceCode()).doesNotContain("<td >11</td>");
assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION) .hasAge("1") .hasAuthorsSize(ForensicsModel.UNDEFINED) .hasCommitsSize(ForensicsModel.UNDEFINED);
assertThat(createMatcher(TRUE_SCRIPT).run()).isEqualTo(true); assertThat(createMatcher(FALSE_SCRIPT).run()).isEqualTo(false);
assertThat(actualProperty).isEmpty();
assertThat(renderer.renderAffectedFileLink(issue)).matches("<a href=\\"source\\\\.[0-9a-f-]+/#20\\" data-toggle=\\"tooltip\\" data-placement=\\"bottom\\" title=\\"/path/to/affected/file.txt\\">file.txt:20</a>"); assertThat(renderer.renderAffectedFileLink(issue)).contains(issue.getId().toString());
assertThat(twoLines.getFiles()).containsExactly(absolute(TXT_FILE)); assertThat(twoLines.getLines(absolute(TXT_FILE))).containsExactly(1, 5);
assertThat(details).isInstanceOf(ConsoleDetail.class); assertThat(((ConsoleDetail) details).getSourceCode()).contains(AFFECTED_FILE_CONTENT);
assertThat(model.getCharset("UTF-8")).isEqualTo(StandardCharsets.UTF_8); assertThat(model.getCharset("nothing")).isEqualTo(Charset.defaultCharset()); assertThat(model.getCharset("")).isEqualTo(Charset.defaultCharset()); assertThat(model.getCharset(null)).isEqualTo(Charset.defaultCharset());
assertThat(deltaReport) .isEmpty() .hasNoAllIssues() .hasNoOutstandingIssues() .hasNoNewIssues() .hasNoFixedIssues() .hasReferenceBuildId(StringUtils.EMPTY);
assertThat(report).hasSize(3);
assertThat(createdHtml).contains("<svg class=\\"info-page-decorator svg-icon\\"><use href=\\"/path/to/error\\"></use></svg>");
assertThat(configuration.getSourceDirectories()).isEmpty(); assertThat(get(configuration, "")).isEqualTo(NORMALIZED); assertThat(get(configuration, "-")).isEqualTo(NORMALIZED); assertThat(get(configuration, ABSOLUTE_NOT_EXISTING)).isEqualTo(NORMALIZED); assertThat(get(configuration, RELATIVE)).isEqualTo(getWorkspaceChild(RELATIVE));
assertThat(tasks).hasSize(4);
assertThat(details).isInstanceOf(SourceDetail.class); assertThat(((SourceDetail) details).getSourceCode()).contains(AFFECTED_FILE_CONTENT);
assertThat(createdHtml).contains("<svg class=\\"info-page-decorator svg-icon\\"><use href=\\"/path/to/info\\"></use></svg>");
assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION) .hasAge("1") .hasAuthorsSize("15") .hasCommitsSize("20") .hasModifiedAt(25) .hasAddedAt(30);
assertThat(actualModel).hasSize(1); assertThat(actualModel).containsExactly(NO_REFERENCE_JOB);
assertThat(createdHtml).doesNotContain("No warnings for"); assertThat(createdHtml).contains("No warnings");
assertThat(empty.getFiles()).isEmpty();
assertThat(details).isInstanceOf(IssuesDetail.class); assertThat(filtered).hasSize(1); assertThat(filtered.get(0)).hasCategory("CATEGORY2").hasSeverity(Severity.WARNING_HIGH);
assertThat(tasks).hasSize(0);
assertThat(report.getErrorMessages()).isNotEmpty().contains("Can\'t read source file \'" + pathToFile.toString() + "\', defined encoding \'UTF-8\' seems to be wrong");
assertThat(selector.toString()).isEqualTo("io.jenkins.plugins.analysis.core.model.ResultAction with ID 1");
assertThat(issue.getType()).isEqualTo("Absence"); assertThat(issue.getFileName()).isEqualTo("-");
assertThat(report.getErrorMessages()).isEmpty(); assertThat(report.getInfoMessages()).hasSize(1); assertThat(message).contains("0 copied"); assertThat(message).contains("0 not in workspace"); assertThat(message).contains("0 not-found"); assertThat(message).contains("0 with I/O error");
assertThat(restored).hasTotalSize(14).hasNewSize(9).hasFixedSize(0); assertThat(restored.getTotals()).hasTotalSize(14).hasNewSize(9).hasFixedSize(0);
assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION) .hasAge("1") .hasCommit(COMMIT) .hasAuthor(NAME) .hasEmail(EMAIL) .hasAddedAt(TIME);
assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION) .hasAge("1") .hasCommit(BlamesModel.UNDEFINED) .hasAuthor(BlamesModel.UNDEFINED) .hasEmail(BlamesModel.UNDEFINED);
assertThat(tasks).hasSize(2);
assertThat(createdHtml).containsPattern( createWarningsLink("<a href=\\"test/new\\">.*3 new warnings.*</a>"));
assertThat(selector.get(run)).isEmpty();
assertThat(matcher.createIssue(null, builder, 0, FILE_NAME)).isEmpty();
assertThat(createdHtml).contains("<b>CheckStyle</b>"); assertThat(createdHtml).doesNotContain("<script>execute</script>");
assertThat(model.getAllJobs()).containsExactly(NO_REFERENCE_JOB);
assertThat(matcher.run(null, new IssueBuilder(), 0, FILE_NAME)).isEqualTo(Optional.empty());
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(recs, result0); assertEquals(emptyList(), result1);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(service.getHash(187525286248583168L).asLong(), -501962254452770615L);
assertTrue(indexDao.getListById(303277865741324292L).isEmpty()); assertNull(indexDao.getById(303277865741324292L, 1)); assertEquals(merkleTree.getLeafNodes().size(), 2); assertEquals(merkleTree.getLeafNodes().get(1).getHash(), new byte[]{4, 53, 117, -100, -81, -64, 16, 4, 0, 0, 0, 1, 0, 0, 0, 2});
assertEquals(idGeneratorService.getTimestamp(id), mills);
assertEquals((long) Streams.parallelize(3, () -> 42L) .filter(r -> !r.hasError()) .map(ResultWrapper::getResult) .reduce(0L, (a, b) -> a + b), 126L);
assertEquals(MerkleTree.difference(merkleTree1, merkleTree2).get(0).getRange(), Range.openClosed(42L, 43L));
assertEquals(Bytes.getArray(FileUtils.readFile(file, 0, 1))[0], 0x0); assertEquals(Bytes.getArray(FileUtils.readFile(file, 3, 1))[0], 0x3); assertEquals(Bytes.getArray(FileUtils.readFile(file, 0, 1))[0], 0x0);
assertEquals(FileUtils.getPercentOfDeleted(fileConfiguration, indexService, new Partition(0, 0)), 1);
assertEquals((long) Streams.parallelize(delays, delay -> () -> { try { Thread.sleep(delay); } catch (InterruptedException ignored) { } return delay + delay; }) .filter(r -> !r.hasError()) .map(ResultWrapper::getResult) .reduce(0L, (a, b) -> a + b), 4006L);
assertEquals(idGeneratorService.getShard(id), i);
assertEquals(channel.size(), 4);
assertEquals((long) Streams.parallelize(delays, delay -> () -> { if (delay == 1002L) { throw new RuntimeException(); } try { Thread.sleep(delay); } catch (InterruptedException ignored) { } return delay + delay; }) .filter(r -> !r.hasError()) .map(ResultWrapper::getResult) .reduce(0L, (a, b) -> a + b), 2002L);
assertTrue(ids.add(id));
assertEquals(ids.size(), threads * idsNum);
assertEquals(tree.getLeafNodes().get(0).getRange(), Range.openClosed(214803434770010111L, 214803434770010112L)); assertEquals(tree.getLeafNodes().get(0).getHash(), new byte[]{2, -5, 34, -107, -6, 0, 16, 0, 0, 0, 0, 1});
assertNotEquals(a, b);
assertThat(deserialized.getBbox(), is(equalTo("BOX(12.300000 -4.560000, 78.900000 8.760000)")));
assertThat(serialized.toString(), is(equalTo("[12.3,4.56]")));
assertEquals(fdc.compare(baseDate, fuzzilyEqualDate1), 0); assertEquals(fdc.compare(baseDate, fuzzilyEqualDate2), 0);
assertThat("#0400FF", is(equalTo(hex)));
assertThat(expResult, is(equalTo(result)));
assertFalse("the method should return a copy of the parameterized uri rather than modifying it", goodHttpsUri == actual); assertEquals(goodHttpsUri, actual);
assertThat("#FF0000", is(equalTo(hex)));
assertNotNull(zipDestination); assertTrue("path string should be non-empty", 0 < zipDestination.getAbsolutePath().length());
assertThat(ids.add(id), is(true));
assertEquals(7,gsonResp.size());
assertTrue("the correct token should be authorized", instance.isAuthorized(TEST_TOKEN));
assertEquals(goodHttpsUri, HttpUtil.convertUriToHttps(goodHttpUri));
assertEquals(expectedItems, actualItems);
assertEquals(i1, i2);
assertThat(serialized.toString(), is(equalTo("[12.3,4.56,78.9,8.76]")));
assertNotNull(id); assertNotNull(item);
assertThat(-1, is(equalTo(result)));
assertTrue(StringUtils.isNotBlank(result));
assertThat(deserialized.getX(), is(equalTo(12.3))); assertThat(deserialized.getY(), is(equalTo(4.56)));
assertThat("#FF0000", is(equalTo(hex)));
assertEquals(expectedItems, actualItems);
assertThat(expResult, is(equalTo(result)));
assertThat(true, is(false));
assertThat("#7F00FF", is(equalTo(hex)));
assertThat("#05FF00", is(equalTo(hex)));
assertEquals(fdc.compare(baseDate, notEqualDate1), -1); assertEquals(fdc.compare(baseDate, notEqualDate2), 1);
assertThat(result.size(), is(equalTo(4)));
assertEquals(goodHttpsUriStr, HttpUtil.convertUriToHttps(goodHttpsUriStr));
assertEquals(fdc.compare(baseDate, equalToBaseDate), 0);
assertTrue(result);
assertNull(actual);
assertEquals(existingTemplateId, aliasOriginalTemplateId);
assertNull(originalTemplateId);
assertEquals(expectedItems, actualItems);
assertEquals(expectedItems, actualItems);
assertEquals(new Double(10), points.getLeft().getLeft()); assertEquals(new Double(11), points.getLeft().getRight()); assertEquals(new Double(20), points.getRight().getLeft()); assertEquals(new Double(21), points.getRight().getRight());
assertEquals(fdc.compare(baseDate, baseDate), 0);
assertEquals(goodHttpsUriStr, HttpUtil.convertUriToHttps(goodHttpUriStr));
assertTrue("\'" + fileName +"\' is not a valid XML elment name", isValidXmlElementName(fileName));
assertThat(result.getArea(), is(equalTo(1.0)));
assertEquals(new Double(111319.490793), points.getLeft().getLeft()); assertEquals(new Double(111325.142866), points.getLeft().getRight()); assertEquals(new Double(333958.47238), points.getRight().getLeft()); assertEquals(new Double(222684.208506), points.getRight().getRight());
assertEquals(expectedItems, actualItems);
assertEquals(expectedItems, actualItems);
assertThat(expResult, is(equalTo(result)));
assertThat(ehcache.getSize(), is(equalTo(100))); assertThat(cleared, is(equalTo(true))); assertThat(ehcache.getSize(), is(equalTo(0)));
assertThat(item.getId(), is(equalTo("abc123")));
assertThat(bundle.version()).isEqualTo(123450000);
assertThat(image1.block(0)).isEqualTo(intArrayToByteArray(new int[]{ 0x00, 0x00, 0x2B, 0x65, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x7C, 0x41, 0x41, 0x41, 0x41, 0xFF, 0xFF, 0xFF, 0xFF })); assertThat(e).isNotNull();
assertThat(image.metadata()).isEqualTo(intArrayToByteArray(new int[] { 0x64, 0x00, 0x00, 0x7C, 0x41, 0x41, 0x41, 0x41, 0xFF, 0xFF, 0xFF, 0xFF }));
assertThat(Arrays.equals(payload, result)).isTrue();
assertThat(bundle.getNextImage()).isEqualTo(imageA); assertThat(bundle.getNextImage()).isEqualTo(imageB);
assertThat(result).isEqualTo("hwfoo");
assertThat(image1.blockCount()).isEqualTo(1); assertThat(image2.blockCount()).isEqualTo(3);
assertThat(image1.sizeBytes()).isEqualTo(16); assertThat(image2.sizeBytes()).isEqualTo(42);
assertThat(result).isEqualTo("fwfoo");
assertThat(bundle.getNextImage()).isEqualTo(imageA);
assertThat(WikiSite.supportedAuthority("fr.wikipedia.org"), is(true)); assertThat(WikiSite.supportedAuthority("fr.m.wikipedia.org"), is(true)); assertThat(WikiSite.supportedAuthority("roa-rup.wikipedia.org"), is(true)); assertThat(WikiSite.supportedAuthority("google.com"), is(false));
assertThat(subject.languageCode(), is("lang"));
assertThat(subject.isMainPage(), is(true));
assertThat(cookie.country(), is("")); assertThat(cookie.region(), is("")); assertThat(cookie.city(), is("")); assertThat(cookie.location(), is(nullValue()));
assertThat(UriUtil.removeFragment(TITLE + "#" + LEGAL_FRAGMENT_CHARS), is(TITLE));
assertThat(subject.dbName(), is("zh_yuewiki"));
assertThat(StringUtil.md5string("test"), is("98f6bcd4621d373cade4e832627b4f6"));
assertThat(StringUtil.getBase26String(1), is("A")); assertThat(StringUtil.getBase26String(26), is("Z")); assertThat(StringUtil.getBase26String(277), is("JQ")); assertThat(StringUtil.getBase26String(2777), is("DBU")); assertThat(StringUtil.getBase26String(27000), is("AMXL")); assertThat(StringUtil.getBase26String(52), is("AZ")); assertThat(StringUtil.getBase26String(53), is("BA"));
assertThat(subject.mobileAuthority(), is("m.wikipedia.org"));
assertThat(StringUtil.hasSectionAnchor("te_st"), is(false)); assertThat(StringUtil.hasSectionAnchor("#te_st"), is(true));
assertThat(DateUtil.iso8601DateFormat(DateUtil.getHttpLastModifiedDate(HTTP_DATE_HEADER)), is("2017-05-25T21:13:47Z"));
assertThat(StringUtil.removeSectionAnchor("#te_st"), is("")); assertThat(StringUtil.removeSectionAnchor("sec#te_st"), is("sec"));
assertThat(StringUtil.sanitizeText(" [1] test"), is("test")); assertThat(StringUtil.sanitizeText(" [1] (;test )"), is("(test )"));
assertThat(UriUtil.removeFragment(TITLE + "#"), is(TITLE));
assertThat(StringUtil.strip("test"), is("test")); assertThat(StringUtil.strip(" test "), is("test"));
assertThat(subject.dbName(), is("zh_min_nanwiki"));
assertThat(new PageTitle("wiki", wiki), is(wiki.titleForInternalLink("wiki"))); assertThat(new PageTitle("wiki", wiki), is(wiki.titleForInternalLink("/wiki/wiki"))); assertThat(new PageTitle("wiki/wiki", wiki), is(wiki.titleForInternalLink("/wiki/wiki/wiki")));
assertThat(subject.languageCode(), is(""));
assertThat(StringUtil.intToHexStr(1), is("x00000001"));
assertThat(UriUtil.removeFragment(TITLE + "##"), is(TITLE));
assertThat(cookie.country(), is("US")); assertThat(cookie.region(), is("California")); assertThat(cookie.city(), is("San Francisco")); assertThat(cookie.location(), is(notNullValue())); assertThat(cookie.location().getLatitude(), is(LATITUDE)); assertThat(cookie.location().getLongitude(), is(LONGITUDE));
assertThat(subject.mobileAuthority(), is("ru.m.wikipedia.org"));
assertThat(subject.authority(), is("test.wikipedia.org"));
assertThat(StringUtil.removeHTMLTags("<tag>te_st</tag>"), is("te_st"));
assertThat(GsonUnmarshaller.unmarshal(WikiSite.class, GsonMarshaller.marshal(wiki)), is(wiki));
assertThat(subject.authority(), is("test.wikipedia.org"));
assertThat(section.isLead(), is(true)); assertThat(section.isLead(), is(false)); assertThat(section.isLead(), is(false));
assertThat(DateUtil.getExtraShortDateString(DateUtil.getHttpLastModifiedDate(HTTP_DATE_HEADER)), is("May 25"));
assertThat(subject.path("Segment"), is("/w/Segment"));
assertThat(StringUtil.listToCsv(stringList), is("one,two"));
assertThat(HttpUrlUtil.isMobileView(url), is(true));
assertThat(subject.languageCode(), is("test"));
assertThat(subject.mobileAuthority(), is("no.m.wikipedia.org"));
assertThat(StringUtil.delimiterStringToList("one,two", ","), is(stringList));
assertThat(subject.isMainPage(), is(false));
assertThat(StringUtil.addUnderscores("te st"), is("te_st"));
assertThat(subject.isMainPage(), is(false));
assertThat(subject.languageCode(), is(""));
assertThat(subject.mobileAuthority(), is("m.wikipedia.org"));
assertThat(subject.dbName(), is("nowiki"));
assertThat(StringUtil.csvToList("one,two"), is(stringList));
assertThat(HttpUrlUtil.isRestBase(url), is(false));
assertThat(new PageTitle(null, "Test", enwiki).getWikiSite(), is(enwiki)); assertThat(WikiSite.forLanguageCode("en"), is(enwiki));
assertThat(subject.scheme(), is("https"));
assertThat(WikiSite.forLanguageCode("en"), is(WikiSite.forLanguageCode("en"))); assertThat(WikiSite.forLanguageCode("ta"), not(WikiSite.forLanguageCode("en"))); assertThat(WikiSite.forLanguageCode("ta").equals("ta.wikipedia.org"), is(false));
assertThat(subject.languageCode(), is("test"));
assertThat(cookie.country(), is("FR")); assertThat(cookie.region(), is("")); assertThat(cookie.city(), is("Paris")); assertThat(cookie.location(), is(nullValue()));
assertThat(subject.dbName(), is("enwiki"));
assertThat(StringUtil.removeUnderscores("te_st"), is("te st"));
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(result.toString()).isEqualTo("warning message");
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(version.hasBuiltInColor()).isTrue();
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(version.get()).isEqualTo("1.0.0");
assertThat(version.get()).isEqualTo("unknown-version");
assertThat(maven310.colorize(message)) .isEqualTo(ansi().fgBright(CYAN).a(message).reset().toString()); assertThat(maven350.colorize(message)) .isEqualTo(ansi().fgBright(CYAN).a(message).reset().toString());
assertThat(version.isGreaterThanOrEqualTo("0.1")).isTrue();
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(result.toString()).isEmpty();
assertThat(result.toString()).isEqualTo("[INFO] ");
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(result).isEqualTo(new ComparableVersion("0"));
assertThat(version.isGreaterThanOrEqualTo("2.0")).isFalse();
assertThat(maven310.colorize(message)).isEqualTo(message); assertThat(maven350.colorize(message)).isEqualTo(message);
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(maven310.colorize(message)).isEqualTo(ansi().fgBright(GREEN).bold().a(message).reset().toString()); assertThat(maven350.colorize(message)).isEqualTo(ansi().fgBright(GREEN).bold().a(message).reset().toString());
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(result).isEqualTo(new ComparableVersion("1.0"));
assertThat(result.toString()).isEqualTo("message");
assertThat(version.isGreaterThanOrEqualTo("1.0")).isTrue();
assertThat(maven350.colorize(message)).isEqualTo( ansi() .bold() .a("--- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ ") .reset().toString() + ansi() .fgBright(CYAN) .bold() .a("maven-color-logback") .reset().toString() + ansi() .bold() .a(" ---") .reset() .toString() );
assertThat(result).isEqualTo(new ComparableVersion("0"));
assertThat(result.toString()).isEqualTo(ansi().fgBright(YELLOW).bold().a("warning message").reset().toString());
assertThat(ColorActivation.isActivated()).isTrue();
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(result.toString()).isEqualTo("[INFO] ");
assertThat(version.hasBuiltInColor()).isFalse();
assertThat(result).isExactlyInstanceOf(DefaultColorization.class);
assertThat(maven310.colorize(message)).isEqualTo(ansi().fgBright(RED).bold().a(message).reset().toString()); assertThat(maven350.colorize(message)).isEqualTo(ansi().fgBright(RED).bold().a(message).reset().toString());
assertThat(version.get()).isEqualTo("unknown-version");
assertThat(maven310.colorize(message)).isEqualTo(ansi().fgBright(YELLOW).bold().a(message).reset().toString()); assertThat(maven350.colorize(message)).isEqualTo(ansi().fgBright(YELLOW).bold().a(message).reset().toString());
assertThat(result.toString()).isEmpty();
assertThat(result.getClass().getSimpleName()).isEqualTo("MyColor"); assertThat(result.colorize("SUCCESS")).isEqualTo(ansi().bold().a("SUCCESS").reset().toString());
assertThat(e.getMessage()).isEqualTo("maven.color must extends com.github.jcgay.maven.color.core.CustomColorization");
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(result).isExactlyInstanceOf(KeepMavenDefaultColor.class);
assertThat(ColorActivation.isActivated()).isFalse();
assertThat(ColorActivation.isActivated()).isFalse();
assertEquals(expectedOutput, new String(stream.toByteArray()));
assertEquals(expectedOutput, new String(stream.toByteArray()));
assertEquals("SimpleService1", model.name()); assertEquals(expectedServiceModel, model);
assertEquals("asdf\\n", new String(stream.toByteArray()));
assertEquals(1, model.innerServiceModels().size()); assertEquals(1, model.innerServiceModels().get(0).endpointModels().size()); assertEquals("", model.innerServiceModels().get(0).servicePath());
assertEquals("foo\\nbar", new String(stream.toByteArray()));
assertThat(preferences.getString("key1", null)).isEqualTo("value1"); assertThat(preferences.getString("key1", null)).isEqualTo("value2");
assertArrayEquals(bar, bos.toByteArray());
assertEquals("foobar", e.getMessage()); assertEquals(1, failAnswer.numCalls); assertEquals(0, finishAnswer.numCalls);
assertTrue(thread.hasIpV6Servers(config, servers)); assertFalse(thread.hasIpV6Servers(config, servers)); assertFalse(thread.hasIpV6Servers(config, servers)); assertFalse(thread.hasIpV6Servers(config, servers)); assertTrue(thread.hasIpV6Servers(config, servers));
assertSame(stream, FileHelper.openRead(mockContext, "file"));
assertEquals(42, FileHelper.poll(null, 0)); assertEquals(1, testResult);
assertNotEquals(0, watchdog.lastPacketReceived);
assertTrue(thread.upstreamDnsServers.isEmpty()); assertTrue(serversAdded.isEmpty()); assertTrue(thread.upstreamDnsServers.contains(i6addr)); assertEquals(2, ipv6Template[ipv6Template.length - 1]); assertTrue(serversAdded.contains(InetAddress.getByAddress(ipv6Template)));
assertNotNull(config.hosts); assertNotNull(config.hosts.items); assertNotNull(config.whitelist); assertNotNull(config.whitelist.items); assertNotNull(config.whitelist.itemsOnVpn); assertNotNull(config.dnsServers); assertNotNull(config.dnsServers.items); assertTrue(config.whitelist.items.contains("com.android.vending")); assertTrue(config.ipV6Support); assertFalse(config.watchDog); assertFalse(config.nightMode); assertTrue(config.showNotification); assertFalse(config.autoStart);
assertTrue(thread.upstreamDnsServers.contains(i4addr)); assertTrue(serversAdded.contains(InetAddress.getByName("192.168.0.2"))); assertTrue(thread.upstreamDnsServers.contains(i6addr)); assertEquals(3, ipv6Template[ipv6Template.length - 1]); assertTrue(serversAdded.contains(InetAddress.getByAddress(ipv6Template)));
assertFalse(itemUpdateRunnable.shouldDownload()); assertTrue(itemUpdateRunnable.shouldDownload());
assertNull(FileHelper.openItemFile(mockContext, item));
assertEquals(0, watchdog.initPenalty); assertEquals(200, watchdog.initPenalty); assertEquals(200 * i, watchdog.initPenalty); assertEquals(5000, watchdog.initPenalty); assertEquals(5000, watchdog.initPenalty);
assertSame(stream, FileHelper.openRead(mockContext, "file"));
assertNotNull(instance); assertTrue(instance.isEmpty()); assertFalse(instance.isBlocked("example.com"));
assertSame(fos, reader.startWrite());
assertSame(dnsServers, dnsPacketProxy.upstreamDnsServers);
assertTrue(serversAdded.isEmpty()); assertTrue(thread.upstreamDnsServers.isEmpty()); assertTrue(serversAdded.contains(InetAddress.getByName("192.168.0.2"))); assertTrue(thread.upstreamDnsServers.contains(i4addr));
assertSame(fos, FileHelper.openWrite(mockContext, "filename"));
assertSame(mockConfig, FileHelper.loadDefaultSettings(mockContext));
assertNull(FileHelper.closeOrWarn((Closeable) null, "tag", "msg")); assertEquals(0, testResult); assertNull(FileHelper.closeOrWarn(closeable, "tag", "msg")); assertEquals(0, testResult); assertNull(FileHelper.closeOrWarn(closeable, "tag", "msg")); assertEquals(1, testResult);
assertEquals(new File("/dir/https%3A%2F%2Fexample.com%2F"), FileHelper.getItemFile(mockContext, item)); assertNull(FileHelper.getItemFile(mockContext, item)); assertNull(null, FileHelper.getItemFile(mockContext, item)); assertNull(FileHelper.getItemFile(mockContext, item));
assertEquals(1000, watchdog.getPollTimeout()); assertEquals(7000, watchdog.getPollTimeout());
assertNotEquals(0, watchdog.lastPacketSent);
assertEquals(1000, watchdog.getPollTimeout()); assertEquals(4 * 1000, watchdog.getPollTimeout()); assertEquals(4 * 4 * 1000, watchdog.getPollTimeout()); assertEquals(4 * 4 * 4 * 4 * 4 * 4 * 1000, watchdog.getPollTimeout());
assertNull(FileHelper.closeOrWarn((FileDescriptor) null, "tag", "msg")); assertEquals(0, testResult); assertNull(FileHelper.closeOrWarn(fd, "tag", "msg")); assertEquals(0, testResult); assertNull(FileHelper.closeOrWarn(fd, "tag", "msg")); assertEquals(1, testResult);
assertEquals(1000, watchdog.getPollTimeout()); assertEquals(0, watchdog.lastPacketSent);
assertTrue("200 is OK", itemUpdateRunnable.validateResponse(connection)); assertEquals(0, realTask.errors.size()); assertFalse("404 is not OK", itemUpdateRunnable.validateResponse(connection)); assertEquals(1, realTask.errors.size()); assertFalse("304 is not OK", itemUpdateRunnable.validateResponse(connection)); assertEquals(1, realTask.errors.size());
assertSame(connection, itemUpdateRunnable.getHttpURLConnection(file, singleWriterMultipleReaderFile, url)); assertSame(connection, itemUpdateRunnable.getHttpURLConnection(file, singleWriterMultipleReaderFile, url)); assertEquals(1, setIfModifiedAnswer.numCalls); assertSame(connection, itemUpdateRunnable.getHttpURLConnection(file, singleWriterMultipleReaderFile, url)); assertEquals(0, setIfModifiedAnswer.numCalls);
assertEquals(42, e1.errno); assertSame(e, e1); assertEquals(1, testResult);
assertEquals(0, FileHelper.poll(null, 0)); assertEquals(2, testResult);
assertThat(json, is("{\\""+id+"\\":0}"));
assertThat(JSONUtil.toJSON(undefinedTestMap(cp), cfg), is(makeResult(buf)));
assertThat(json, is("{\\"x\\":27}"));
assertThat(json, is("{\\"x\\":\\"Some data\\\\nSome other data.\\"}"));
assertThat(json, is("{\\"x\\":100000}"));
assertThat(JSONUtil.toJSON(undefinedTestMap(cp), cfg), is(makeResult(escape)));
assertThat(JSONUtil.toJSON(surrogateTestMap(getRandomSurrogate(rand)), cfg), is(result));
assertThat(json, is("{\\"x\\":6.28}"));
assertThat(json, is("{\\"x\\":\\"bar\\"}"));
assertThat((String)obj.get("b"), is("x")); assertThat(((Number)jsonAble.get("b")).intValue(), is(2));
assertThat(json, is("{\\"x\\":[1,2,3]}"));
assertThat(JSONUtil.toJSON(surrogateTestMap(ch), cfg), is(makeResult(String.format("\\\\u%04X", (int)ch))));
assertThat(e.getMessage(), containsString(String.format("Undefined code point U+%04X at position", cp)));
assertThat(json, is("{\\"x\\":275}"));
assertThat(json, is("{\\"x\\":3.14}"));
assertThat(json, is("{\\"x\\":12345.67890}")); assertThat(json, is("{\\"x\\":9007199254740993}")); assertThat(json, is("{\\"x\\":\\"9007199254740993\\"}"));
assertThat(JSONUtil.toJSON(undefinedTestMap(getRandomUndefined(rand)), cfg), is(result));
assertThat(json, is("{\\"x\\":[1,2,3]}"));
assertThat(json, is("{\\"x\\":1.235}"));
assertThat(JSONUtil.toJSON(surrogateTestMap(ch), cfg), is(makeResult(ch)));
assertThat(json, is("{\\"x\\":68719476735}")); assertThat(json, is("{\\"x\\":9007199254740993}")); assertThat(json, is("{\\"x\\":\\"9007199254740993\\"}"));
assertThat(e.getMessage(), containsString("java.util.HashMap includes itself which would cause infinite recursion."));
assertThat(json, is("{\\"a\\":1,\\"b\\":\\"x\\",\\"c\\":[\\"1\\",\\"2\\",\\"3\\"],\\"d\\":[\\"1\\",\\"2\\",\\"3\\"],\\"e\\":[null,{\\"a\\":0,\\"b\\":2,\\"x\\":[1,2,3],\\"t\\":null},[\\"1\\",\\"2\\",\\"3\\"]]}"));
assertThat(e.getMessage(), containsString(String.format("Unmatched surrogate U+%04X at position", (int)ch)));
assertThat(JSONUtil.toJSON(surrogateTestMap(getRandomSurrogate(rand)), cfg), is(result));
assertThat(json, is("{\\"x\\":1234567890}")); assertThat(json, is("{\\"x\\":9007199254740993}")); assertThat(json, is("{\\"x\\":\\"9007199254740993\\"}"));
assertThat(JSONUtil.toJSON(undefinedTestMap(getRandomUndefined(rand)), cfg), is(result));
assertThat(json, is("{\\"x\\":\\"\\uD83D\\uDCA9\\"}"));
assertThat(e.getMessage(), is("Property x occurs twice in the same object."));
assertThat(json, is("{\\"t\\":true,\\"f\\":false}"));
assertEquals(Sets.newHashSet("table2", "table3"), service.getTablesToRepair(cluster, unit));
assertEquals(42L, compactionStats.getPendingCompactions().longValue());
assertThat(context.storage.getAllRepairSchedules()).hasSize(1);
assertEquals("1 minute 0 seconds", repairStatus.getDuration());
assertEquals(Sets.newHashSet("table2", "table3"), service.getTablesToRepair(cluster, unit));
assertEquals(30, RepairRunService.computeGlobalSegmentCount(10, endpointToRange));
assertTrue(SegmentGenerator.lowerThan(one, ten)); assertFalse(SegmentGenerator.lowerThan(ten, one)); assertFalse(SegmentGenerator.lowerThan(ten, ten)); assertTrue(SegmentGenerator.lowerThan(minusTen, one)); assertFalse(SegmentGenerator.lowerThan(one, minusTen));
assertEquals(Sets.newHashSet("table2", "table3"), service.getTablesToRepair(cluster, unit));
assertEquals("example2cluster", Cluster.toSymbolicName("Example2 Cluster")); assertEquals("example2_cluster", Cluster.toSymbolicName("Example2_Cluster"));
assertEquals(20, r0To20.span(ringSize200).intValue()); assertEquals(180, r20To0.span(ringSize200).intValue());
assertThat(validator.validate(config)).hasSize(1); assertThat(validator.validate(config)).hasSize(1); assertThat(validator.validate(config)).hasSize(0);
assertEquals(HttpStatus.CREATED_201, response.getStatus()); assertEquals(1, mocks.context.storage.getAllRepairSchedules().size()); assertEquals(1, mocks.context.storage.getRepairSchedulesForClusterAndKeyspace(CLUSTER_NAME, "keyspace1").size());
assertThat(context.storage.getAllRepairSchedules()).hasSize(0);
assertEquals("1 minute 30 seconds", repairStatus.getDuration());
assertThat(context.storage.getAllRepairSchedules()).hasSize(1);
assertTrue(SegmentGenerator.greaterThan(ten, one)); assertFalse(SegmentGenerator.greaterThan(one, ten)); assertFalse(SegmentGenerator.greaterThan(one, one)); assertFalse(SegmentGenerator.greaterThan(minusTen, one)); assertTrue(SegmentGenerator.greaterThan(one, minusTen));
assertEquals(seedHostSet, seedHostExpectedSet);
assertThat(context.storage.getAllRepairSchedules()).hasSize(2);
assertEquals(seedHostSet, seedHostExpectedSet);
assertEquals(Sets.newHashSet("table2"), service.getTablesToRepair(cluster, unit));
assertEquals("cluster one", clusterName.get());
assertEquals(ten, SegmentGenerator.max(one, ten)); assertEquals(ten, SegmentGenerator.max(ten, one)); assertEquals(one, SegmentGenerator.max(one, one)); assertEquals(one, SegmentGenerator.max(one, minusTen));
assertEquals("1 minute 30 seconds", repairStatus.getDuration());
assertTrue(r0To0.isWrapping()); assertFalse(r0To1.isWrapping()); assertTrue(r1To0.isWrapping());
assertEquals(endpointToRangeMap.entrySet().size(), 3); assertEquals(endpointToRangeMap.get("node1").size(), 4); assertEquals(endpointToRangeMap.get("node2").size(), 3); assertEquals(endpointToRangeMap.get("node3").size(), 2);
assertEquals(30, RepairRunService.computeGlobalSegmentCount(10, endpointToRange));
assertEquals("1 minute 50 seconds", repairStatus.getDuration());
assertEquals(-1L, compactionStats.getPendingCompactions().longValue());
assertEquals(Sets.newHashSet("table2"), service.getTablesToRepair(cluster, unit));
assertEquals(replicasToRangeMap.entrySet().size(), 3); assertEquals(replicasToRangeMap.get(Arrays.asList("node1", "node2", "node3")).size(), 3); assertEquals(replicasToRangeMap.get(Arrays.asList("node1")).size(), 1); assertEquals(replicasToRangeMap.get(Arrays.asList("node1", "node2")).size(), 2);
assertThat(context.storage.getAllRepairSchedules()).hasSize(1);
assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
assertEquals(Sets.newHashSet("table2"), service.getTablesToRepair(cluster, unit));
assertEquals(one, SegmentGenerator.min(one, ten)); assertEquals(one, SegmentGenerator.min(ten, one)); assertEquals(one, SegmentGenerator.min(one, one)); assertEquals(minusTen, SegmentGenerator.min(one, minusTen));
assertEquals(1, RepairRunner.getPossibleParallelRepairsCount(map, endpointsThreeNodes, DatacenterAvailability.ALL)); assertEquals(2, RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.ALL)); assertEquals(1, RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.SIDECAR));
assertEquals(Sets.newHashSet("table2"), service.getTablesToRepair(cluster, unit));
assertEquals("80", merged.getStart().toString()); assertEquals("50", merged.getEnd().toString());
assertEquals("2015-02-20T15:24:45Z", RepairRunStatus.dateTimeToIso8601(dateTime));
assertFalse(jmxCredentials.isPresent());
assertEquals(48, RepairRunService.computeGlobalSegmentCount(0, endpointToRange));
assertEquals(48, RepairRunService.computeGlobalSegmentCount(0, endpointToRange));
assertThat(context.storage.getAllRepairSchedules()).hasSize(2);
assertEquals("6b9d35b0-bab6-11e9-8e34-4d2f1172e8bc", list.get(0).getPlanId());
assertThat(context.storage.getAllRepairSchedules()).hasSize(0);
assertEquals(AnsiParser.parseText("Hello World"), new TextLeaf("Hello World"));
assertEquals("<b><font color=\'#96CBFE\'>T</font></b>", text.toHtml());
assertEquals(AnsiParser.parseText("Hello World\\nHello Mars"), new TextLeaf("Hello World\\nHello Mars"));
assertEquals(AnsiParser.parseText("\\u001B[33;1mWorker information\\u001B[0m"), textLeaf);
assertEquals(AnsiParser.parseText("Hello World\\nHello Mars\\u001B[0KTest"), new TextLeaf("Hello World"), new TextLeaf("Test"));
assertEquals(AnsiParser.parseText("\\u001B[0K"), new TextLeaf());
assertEquals(AnsiParser.parseText("\\u001B[0Ktravis_fold:start:system_info\\n" + "\\u001B[0K\\u001B[34mBuild system information\\u001B[0m\\n" + "Build language: android\\n"), new TextLeaf("travis_fold:start:system_info"), headerLeaf, new TextLeaf("\\nBuild language: android\\n"));
assertEquals(AnsiParser.parseText("Hello World\\u001B[0K"), new TextLeaf());
assertEquals(AnsiParser.parseText("Hello World\\b\\b\\b\\b\\b\\n\\bMars"), new TextLeaf("Hello Mars"));
assertEquals(AnsiParser.parseText(""), new TextLeaf());
assertNotNull("Missing org.apache.commons.chain2.cookbook.profile.Profile", profile);
assertNull(detectorResult);
assertEquals(actual,expected);
assertEquals(actual, expected);
assertEquals(expected, actual);
assertNotNull(manager); assertEquals(METRIC_TOPIC, manager.getMetricTopic()); assertEquals(OUTLIER_TOPIC, manager.getOutlierTopic()); assertEquals(BREAKOUT_TOPIC, manager.getBreakoutTopic()); assertEquals(TRACING_ENABLED, manager.getTracingEnabled());
assertNotNull(detector.getName()); assertEquals("constant-threshold", detector.getName());
assertEquals(1, metricFunctionsSpecList.size()); assertEquals("sumSeries(a.b.c)", metricFunctionsSpec.getFunction()); assertEquals(60, metricFunctionsSpec.getIntervalInSecs()); assertEquals(3, tags.size()); assertEquals("sample_app1", tags.get("app_name")); assertEquals("test", tags.get("env")); assertEquals("custom_tag_value", tags.get("custom_tag")); assertEquals(true, metricFunctionsSpec.getMergeTags());
assertEquals(detectorUuid, detectorUnderTest.getUuid()); assertEquals(pointForecaster, detectorUnderTest.getPointForecaster()); assertEquals(intervalForecaster, detectorUnderTest.getIntervalForecaster()); assertEquals(anomalyType, detectorUnderTest.getAnomalyType()); assertEquals(trusted, detectorUnderTest.isTrusted()); assertNotNull(detectorUnderTest.getName()); assertEquals("test", detectorUnderTest.getName());
assertNotNull(detectorUnderTest.getName());
assertTrue(true);
assertEquals(12.0, metricDataResult.getValue(), 0.1); assertEquals(1583039100, metricDataResult.getTimestamp()); assertEquals(2, tags.size()); assertEquals("sample_app2", tags.get("app_name")); assertEquals("test", tags.get("env"));
assertNotNull(detector); assertSame(ConstantThresholdDetector.class, detector.getClass()); assertEquals("e2e290a0-d1c1-471e-9d72-79d43282cfbd", detector.getUuid().toString()); assertEquals(AnomalyType.RIGHT_TAILED, params.getType()); assertEquals(16666.0, thresholds.getUpperStrong(), TOLERANCE); assertEquals(2161.0, thresholds.getUpperWeak(), TOLERANCE);
assertEquals(id, deleteResponse.getId()); assertEquals(elasticSearchProperties.getIndexName(), deleteResponse.getIndex()); assertEquals("DELETED", deleteResponse.getResult().toString());
assertNotNull(elasticsearchRestClient);
assertEquals(155.0, metricDataResult.getValue(), 0.1); assertEquals(1583125500, metricDataResult.getTimestamp());
assertNotNull(actualDetectors); assertSame(detectors, actualDetectors);
assertNotNull(DateUtil.now());
assertTrue(actualTimestamp < 0L);
assertEquals(datapoint.getTimestamp(), 1583125500); assertEquals(String.valueOf(datapoint.getValue()), "155.0");
assertNotNull(uuid);
assertEquals(ZonedDateTime.ofInstant(instant, UTC), DateUtil.instantToUTCDateTime(instant));
assertEquals("sum(test.metrics)", value);
assertNotNull(uuid);
assertNotNull(result); assertSame(outlierDetectorResult, result);
assertNull(actual);
assertTrue(anomalyConsumer.process(kafkaConsumer, true));
assertEquals(params, forecaster.getParams()); assertEquals(testRow.getMean(), forecaster.getMean(), TOLERANCE); assertEquals(testRow.getStd(), forecaster.getStdDev(), TOLERANCE);
assertArrayEquals(new double[] { 0.0, 1.0 }, scaled, TOLERANCE);
assertTrue(MetricUtil.defaultVTags().isEmpty());
assertNotNull(actualDetector);
assertEquals(new ArrayList<>(), actual);
assertTrue(res.startsWith(firstTwoLinesStackTrace()));
assertTrue(metricQueryService != null);
assertArrayEquals(expected, actual);
assertSame(detectorResult, actualResult);
assertEquals(expectedTimestamp, actualTimestamp);
assertNotNull(anomalyModels); assertTrue(anomalyModels.size() == 0);
assertNotNull(mappings); assertSame(mappings, mappings);
assertEquals("[ \\"apple\\", \\"banana\\", \\"cherry\\", \\"tomato\\" ]", result);
assertNotNull(haystackConfig.initTracer(haystackProperties));
assertNotNull(classBean);
assertNotNull(actualDetectors); assertSame(detectors, actualDetectors);
assertTrue(DateUtil.isBetweenHours(01, 00, 02));
assertTrue(DateUtil.isBetweenHours(00, 00, 00)); assertTrue(DateUtil.isBetweenHours(01, 01, 01));
assertEquals(49, result1.getLocation()); assertEquals(24.99, result1.getEnergyDistance(), TOLERANCE); assertEquals(49, result2.getLocation()); assertEquals(24.99, result2.getEnergyDistance(), TOLERANCE);
assertArrayEquals(new double[] { 0.0, 0.0 }, scaled, TOLERANCE);
assertTrue(DateUtil.crossesMidnight(23, 01)); assertFalse(DateUtil.crossesMidnight(00, 02)); assertFalse(DateUtil.crossesMidnight(22, 00));
assertEquals(pointForecast + params.getStrongValue(), forecastResult.getUpperStrong(), TOLERANCE); assertEquals(pointForecast + params.getWeakValue(), forecastResult.getUpperWeak(), TOLERANCE); assertEquals(pointForecast - params.getWeakValue(), forecastResult.getLowerWeak(), TOLERANCE); assertEquals(pointForecast - params.getStrongValue(), forecastResult.getLowerStrong(), TOLERANCE);
assertSame(mockDetectorResult, actualResult);
assertTrue(duration >= 450);
assertFalse(DateUtil.isBetweenHours(00, 01, 02));
assertNotNull(result); assertSame(outlierDetectorResult, result);
assertEquals(detectorMapping, results);
assertEquals(instString, actual);
assertNull(forecast); assertEquals(forecast.getValue(), prevValue, TOLERANCE);
assertEquals(1, results.size());
assertTrue(res.startsWith("java.lang.RuntimeException: dummy msg (at " + thisClass() + ".<clinit>(" + this.getClass().getSimpleName()));
assertEquals(params, forecaster.getParams()); assertEquals(observed0, forecaster.getMean(), TOLERANCE); assertEquals(testRow.getKnownMean(), forecaster.getMean(), TOLERANCE);
assertNotNull(result);
assertTrue(anomalyConsumer.process(kafkaConsumer, true));
assertEquals(1, metricFunctionsSpecList.size()); assertEquals(false, metricFunctionsSpec.getMergeTags());
assertEquals("", tags.get(MetricDefinition.UNIT)); assertEquals("gauge", tags.get(MetricDefinition.MTYPE));
assertNull(mapperUnderTest.toMetricData(null));
assertEquals(expectedTimestamp, actualTimestamp);
assertEquals(Instant.ofEpochSecond(INSTANT_IN_EPOCH_SECONDS), DateUtil.epochSecondToInstant(INSTANT_IN_EPOCH_SECONDS));
assertTrue(res.startsWith(firstTwoLinesStackTrace()));
assertTrue(true);
assertNotNull("Response can\'t be null", detectorMappings); assertEquals(1, detectorMappings.size()); assertEquals(UUID.fromString(detectorUuid), detectorMappings.get(0).getDetector().getUuid()); assertEquals(id, detectorMappings.get(0).getId());
assertNotNull(actualResults); assertEquals(1, actualResults.size());
assertEquals(0.0, metricData.getValue(), 0.001);
assertSame(detectorResult, actualDetectorResponse.getDetectorResult());
assertNotNull(actualDetectors);
assertNull(restHighLevelClient);
assertNotNull(actualDetectors); assertSame(detectors, actualDetectors);
assertNotNull(restHighLevelClient);
assertEquals(expected, actual);
assertNotNull(actualDetectors);
assertNotNull(actualDetector);
assertNotNull(actualDetectors); assertSame(detectors, actualDetectors);
assertNotNull(result);
assertEquals(8, result.getLocation()); assertEquals(0.455, result.getEnergyDistance(), TOLERANCE);
assertEquals(isActive, true);
assertNull(actual);
assertEquals(expected, actual);
assertNotNull(elasticsearchRestTemplate);
assertNotNull(source);
assertEquals(BOOTSTRAP_SERVERS, props.getProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG)); assertEquals(CLIENT_ID, props.getProperty(ProducerConfig.CLIENT_ID_CONFIG)); assertEquals(KEY_SER, props.getProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG)); assertEquals(VALUE_SER, props.getProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG));
assertNotNull("Response can\'t be null", detectorMapping); assertEquals(id, detectorMapping.getId()); assertEquals("test-user", detectorMapping.getUser().getId()); assertEquals(LastModifiedTimeInMillis, Long.valueOf(detectorMapping.getLastModifiedTimeInMillis())); assertEquals(CreatedTimeInMillis, Long.valueOf(detectorMapping.getCreatedTimeInMillis())); assertTrue(detectorMapping.isEnabled()); assertEquals(UUID.fromString(detectorUuid), detectorMapping.getDetector().getUuid());
assertEquals(1, results.size());
assertEquals(emptyResult, detectorResponse.getDetectorResult());
assertEquals(OutlierDetectorResult.class, result.getClass());
assertEquals("kafkasvc:9092", config.getString("streams.bootstrap.servers"));
assertTrue(actualTimestamp < 0L);
assertNull(actual);
assertEquals(75, result.getLocation()); assertEquals(2.569, result.getEnergyDistance(), TOLERANCE);
assertNotNull(actualDetectors);
assertFalse(result.isWarmup()); assertNotNull(result);
assertNotNull(profileExists);
assertNotNull(actualDetector);
assertEquals(testRow.getUpperStrong(), actual.getUpperStrong(), TOLERANCE); assertEquals(testRow.getUpperWeak(), actual.getUpperWeak(), TOLERANCE); assertEquals(testRow.getLowerWeak(), actual.getLowerWeak(), TOLERANCE); assertEquals(testRow.getLowerStrong(), actual.getLowerStrong(), TOLERANCE);
assertNotNull(dateTime); assertTrue(dateTime.contains("2020")); assertTrue(dateTime.contains("04")); assertTrue(dateTime.contains("23")); assertTrue(dateTime.contains("18")); assertTrue(dateTime.equalsIgnoreCase("2020-04-23T18:04:41.000+0000"));
assertEquals(i < bufferSize - 1, result.isWarmup());
assertNotNull(detectorUnderTest.getName()); assertEquals("edmx", detectorUnderTest.getName());
assertSame(detectorMatchResponse, result);
assertEquals(1, consumerDetectorMappings.size()); assertEquals(UUID.fromString(detectorUuid), consumerDetectorMappings.get(0).getUuid());
assertNotNull(metricSourceResults); assertEquals(2, metricSourceResults.size());
assertSame(mockNonOutlierResult, nonOutlierResponse.getDetectorResult());
assertNull(detector);
assertEquals("2000-01-01 00:00:00", actual);
assertEquals(datapoint.getTimestamp(), 1583039100); assertEquals(String.valueOf(datapoint.getValue()), "12.0");
assertNotNull(result); assertFalse(result.isWarmup()); assertEquals(AnomalyLevel.UNKNOWN, result.getAnomalyLevel());
assertSame(detectorResult, actualResult);
assertEquals(5040, frame.getNumRows()); assertEquals(9.0, frame.getMetricData().get(118).getValue(), 0.001);
assertArrayEquals(new double[] { 0.0, 1.0, 0.333 }, scaled0, TOLERANCE); assertArrayEquals(new double[] { 0.25, 0.50, 0.75, 0.0, 1.0 }, scaled1, TOLERANCE);
assertEquals("detectorResponse is marked non-null but is null", e.getMessage());
assertNotNull(response);
assertArrayEquals(expected, actual);
assertNotNull(result); assertEquals(updatedDetectors, result);
assertNull(result);
assertFalse(DateUtil.isBetweenHours(23, 00, 23)); assertFalse(DateUtil.isBetweenHours(00, 23, 00));
assertEquals(expected, actual);
assertNotNull(frame); assertTrue(frame.getNumRows() > 0); assertEquals(0.0, frame.getMetricDataPoint(0).getValue(), TOLERANCE); assertEquals(3.0, frame.getMetricDataPoint(15).getValue(), TOLERANCE);
assertEquals(pointForecast + strongWidth, forecastResult.getUpperStrong(), TOLERANCE); assertEquals(pointForecast + weakWidth, forecastResult.getUpperWeak(), TOLERANCE); assertEquals(pointForecast - weakWidth, forecastResult.getLowerWeak(), TOLERANCE); assertEquals(pointForecast - strongWidth, forecastResult.getLowerStrong(), TOLERANCE);
assertNotNull(actualResults); assertSame(results, actualResults);
assertEquals(expected, actual); assertEquals(noOfBinsInADay * windowLength, actual.size());
assertNotNull(anomalyModels); assertTrue(anomalyModels.size() == 2);
assertNotNull("Response can\'t be null", detectorMappings); assertEquals(0, detectorMappings.size());
assertNotNull(result); assertEquals(emptyList, result);
assertEquals(detectorMatchResponse, result);
assertEquals(id, detectorMappingsResponse.get(0).getId()); assertEquals(detectorUuid, detectorMappingsResponse.get(0).getDetector().getUuid().toString()); assertEquals("test-user", detectorMappingsResponse.get(0).getUser().getId());
assertNotNull(actualDetectors);
assertNotNull(actualDetectors); assertSame(detectors, actualDetectors);
assertTrue(result.isWarmup()); assertNotNull(result);
assertEquals("2020-03-12T00:00:00Z", DateUtil.epochSecondToString(INSTANT_IN_EPOCH_SECONDS));
assertNotNull(serviceTypeName); assertEquals("com.expedia.adaptivealerting.modelservice.metricsource.MetricSource", serviceTypeName);
assertEquals(NUM_OUTLIER_METRICS, outliers.size()); assertEquals(NUM_BREAKOUT_METRICS, breakouts.size());
assertEquals(BOOTSTRAP_SERVERS, props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG)); assertEquals(GROUP_ID, props.getProperty(ConsumerConfig.GROUP_ID_CONFIG)); assertEquals(KEY_DESER, props.getProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)); assertEquals(VALUE_DESER, props.getProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG));
assertNull(result);
assertEquals(expected, actual);
assertNotNull(tagCollection.getKv()); assertNotNull(tagCollection.getV());
assertNotNull(actualDetectors);
assertEquals(expected, actual);
assertNull(actualDetector);
assertFalse(anomalyConsumer.process(kafkaConsumer, true));
assertEquals(detectorUuid, actualKvTags.get(AnomalyToMetricMapper.AA_DETECTOR_UUID)); assertEquals(outlierLevel.toString(), actualKvTags.get(AnomalyToMetricMapper.AA_ANOMALY_LEVEL));
assertNotNull(actualDetectors);
assertTrue(diffCount > 0); assertArrayEquals(orig, copy, TOLERANCE);
assertNotNull(actualDetector);
assertNotNull(anomalyModels); assertTrue(anomalyModels.size() == 0);
assertEquals(1580901895, UNTIL_TIME_IN_SECONDS);
assertEquals(detectorMapping.toString(), detectorMappingsResponse);
assertNotNull(uuid);
assertEquals(7, result.getLocation()); assertEquals(1.986, result.getEnergyDistance(), TOLERANCE);
assertArrayEquals(expected, actual);
assertTrue(DateUtil.isBetweenHours(01, 01, 02)); assertTrue(DateUtil.isBetweenHours(23, 22, 00)); assertTrue(DateUtil.isBetweenHours(00, 23, 01)); assertTrue(DateUtil.isBetweenHours(00, 00, 23));
assertNotNull(detector); assertSame(ConstantThresholdDetector.class, detector.getClass()); assertEquals("42d242d2-42d2-42d2-42d2-42d242d242d2", detector.getUuid().toString());
assertNotNull(convertToJson(anomalyModel));
assertNotNull(mappings); assertSame(mappings, mappings);
assertTrue(true);
assertNull(actual);
assertEquals(-1, estBreakout.getLocation());
assertTrue(anomalyConsumer.process(kafkaConsumer, true));
assertNotNull(actualDetector);
assertEquals(scheme.fromBin(i + 1), hist.value(i / 10.0 + EPS), EPS);
assertThat(captor.getValue().getMessage(), is(msg));
assertThat(captor.getValue().getMessage(), is(msg));
assertEquals(systemLoader, systemKlass.getClassLoader()); assertEquals(pluginLoader, pluginKlass.getClassLoader()); assertNotEquals(pluginKlass, systemKlass); assertEquals(pluginKlass.getName(), systemKlass.getName());
assertThat(captor.getValue().getMessage(), is(msg));
assertThat(captor.getValue().getMessage(), is(msg));
assertThat(serialized, equalTo(SERIALIZED_MSG));
assertThat(captor.getValue().getMessage(), is(msg));
assertThat(deserialized, instanceOf(Map.class)); assertThat( deserialized, equalTo( ImmutableMap.of( "field1", "foobar", "field2", 123)));
assertThat(msg, equalTo(SERIALIZED_MSG));
assertThat(captor.getValue().getMessage(), is(msg));
assertTrue( message, matches );
assertFalse( "useProxyByPattern", useProxyByPattern );
assertEquals( "host", HOST, host );
assertEquals( "javaPattern", expected, javaPattern );
assertEquals( "protocol", "https", protocol );
assertTrue(localPeerBean.isLeader());
assertEquals("0x1", leaderBean.getCurrentZxid());
assertThat("isPortUnification property should return value of peer.shouldUsePortUnification()", qb.isPortUnification(), equalTo(true)); assertThat("isPortUnification property should return value of peer.shouldUsePortUnification()", qb.isPortUnification(), equalTo(false));
assertEquals(1, in.read(bs, 2, 2)); assertArrayEquals(expected, bs);
assertThat("Last client response size should be initialized with INIT_VALUE", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE)); assertThat("Last client response size should be greater then zero after client request was performed", clientResponseStats.getLastBufferSize(), greaterThan(0));
assertEquals(clientIP.getHostAddress(), hostString1); assertEquals(clientIP.getHostAddress(), hostString2);
assertNull(data);
assertEquals(1, cache.size()); assertEquals(1, cache.size()); assertEquals(1, cache.size()); assertEquals(0, cache.size());
assertNotNull(clientAddress); assertEquals(0, clientAddress.length());
assertEquals("Leader", leaderBean.getName());
assertNotNull(data); assertArrayEquals(baos.toByteArray(), data);
assertTrue(remotePeerBean.isLeader()); assertFalse(remotePeerBean.isLeader());
assertFalse(aclId.equals(cache.convertAcls(testACL2)));
assertEquals("", result); assertTrue(result.equals(ipv4) || result.equals(ipv6));
assertThat("getName property should return Bean name in the right format", qb.getName(), equalTo("ReplicatedServer_id1"));
assertEquals("", result); assertEquals(Integer.toString(secureClientPort), result);
assertThat("isSslQuorum property should return value of peer.isSslQuorum()", qb.isSslQuorum(), equalTo(true)); assertThat("isSslQuorum property should return value of peer.isSslQuorum()", qb.isSslQuorum(), equalTo(false));
assertEquals(2, deserializedCache.size()); assertEquals(aclId1, deserializedCache.convertAcls(acl1)); assertEquals(aclId2, deserializedCache.convertAcls(acl2)); assertFalse(acl3.equals(deserializedCache.convertAcls(acl3))); assertFalse(acl4.equals(deserializedCache.convertAcls(acl4))); assertFalse(acl5.equals(deserializedCache.convertAcls(acl5)));
assertEquals(1, in.read(bs, 2, 1)); assertArrayEquals(expected, bs);
assertEquals(1, leaderBean.getElectionTimeTaken());
assertThat("Last client response size should be initialized with INIT_VALUE", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE)); assertThat("Last client response size should be greater than 0 after client request was performed", clientResponseStats.getLastBufferSize(), greaterThan(0)); assertArrayEquals("unexpected data", "test".getBytes(StandardCharsets.UTF_8), contents);
assertEquals(-1, elapsedTime); assertNotEquals(-1, elapsedTime); assertEquals(elapsedTime, serverBean.getTxnLogElapsedSyncTime());
assertNull(data);
assertThat("getQuorumSize property should return value of peet.getQuorumSize()", qb.getQuorumSize(), equalTo(5));
assertFalse(localPeerBean.isLeader());
assertEquals(aclId, cache.convertAcls(testACL2));
assertNotNull(result); assertEquals(0, result.length()); assertTrue(result.equals(ipv4) || result.equals(ipv6)); assertEquals(expectedResult, result);
assertNotNull(data); assertArrayEquals(baos.toByteArray(), data);
assertThat("isHidden should return false", qb.isHidden(), equalTo(false));
assertEquals("True has to be returned in this case", preferredBlockSize, inf.getPreferredBlockSize());
assertFalse( "isResourceAvailable must return false if " + "disk usage is higher than threshold", nb.hasAvailableDiskSpace());
assertEquals("Multiple ranges should result in a 416 error", 416, response.getStatus()); assertEquals("No ranges should result in a 416 error", 416, response.getStatus()); assertEquals("Single (but invalid) range should result in a 416", 416, response.getStatus()); assertEquals("Single (valid) range should result in a 206", 206, response.getStatus()); assertArrayEquals("Byte range from 100-300", getOutputArray(100, 201), os.toByteArray());
assertTrue("Pairs array must be even", pairs.length % 2 == 0); assertArrayEquals("Reading " + pairs[i+1] + " bytes from offset " + pairs[i], getOutputArray(pairs[i], pairs[i+1]), os.toByteArray());
assertEquals("Should not check the same volume more than once.", 1, nb.getVolumesLowOnSpace().size());
assertEquals("True has to be returned in this case", replication, inf.getReplication());
assertTrue( "isResourceAvailable must return true if " + "disk usage is lower than threshold", nb.hasAvailableDiskSpace());
assertThat(dataPath.exists(), is(false)); assertThat(dataPath.getParentFile().list().length == 1, is(true)); assertThat(dataPath.exists(), is(false)); assertThat(dataPath.getParentFile().list().length == 2, is(true)); assertThat(dataPath.exists(), is(false)); assertThat(dataPath.getParentFile().list().length == 1, is(true));
assertTrue("NN resource monitor should be running", isNameNodeMonitorRunning); assertFalse("NN should not presently be in safe mode", cluster.getNameNode().isInSafeMode()); assertTrue("NN should be in safe mode after resources crossed threshold", cluster.getNameNode().isInSafeMode());
assertEquals("True has to be returned in this case", BLKSIZE_MAXVALUE, inf.getPreferredBlockSize());
assertThat(exampleData.getDataVersion() == 1, is(true)); assertThat(exampleData.read().equals("jiwan@taobao.com"), is(true)); assertThat(exampleData.getDataVersion() == 0, is(true)); assertThat(exampleData.read().isEmpty(), is(true));
assertEquals("Should not check the same volume more than once.", 1, nb.getVolumesLowOnSpace().size());
assertEquals(response.getStatus(), 400);
assertEquals(new JSONObject(), RestUtils.getObjectFromJsonld("[]")); assertEquals(new JSONObject(), RestUtils.getObjectFromJsonld("[{\'@graph\': []}]"));
assertFalse(result.isPresent());
assertFalse(statements.hasNext());
assertEquals(0, result.size());
assertFalse(result.isPresent());
assertTrue(commentOpt.isPresent()); assertEquals(comment1.getModel(), comment.getModel());
assertEquals(queryNoSpaces, parser.query().selectQuery().getText()); assertEquals(queryString, tokens.getText());
assertTrue(iri.isPresent()); assertEquals(IN_PROGRESS_COMMIT_IRI, iri.get());
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions"));
assertFalse(result.isPresent()); assertTrue(result.isPresent()); assertEquals(user, result.get());
assertNotEquals(preUpdateTime.get().stringValue(), postUpdateTime.get().stringValue());
assertTrue(record.getCatalog_resource().isPresent()); assertEquals(distributedCatalogId, record.getCatalog_resource().get()); assertTrue(record.getMasterBranch_resource().isPresent()); assertEquals(1, record.getBranch_resource().size());
assertEquals(queryOntology.asModel(mf).size(), result.size());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.modelToSkolemizedString(model, RDFFormat.JSONLD, transformer, service))); assertEquals(expectedTurtle, RestUtils.modelToSkolemizedString(model, RDFFormat.TURTLE, transformer, service)); assertTrue(equalsIgnoreNewline(expectedRdfxml, RestUtils.modelToSkolemizedString(model, RDFFormat.RDFXML, transformer, service)));
assertTrue(commit.getOnVersionedRDFRecord_resource().isPresent()); assertEquals(VERSIONED_RDF_RECORD_IRI, commit.getOnVersionedRDFRecord_resource().get());
assertEquals(response.getStatus(), 500);
assertFalse(commit.getModel().isEmpty()); assertEquals(IN_PROGRESS_COMMIT_IRI, commit.getResource());
assertEquals(response.getStatus(), 200);
assertEquals(1, ontology.getAllClassDataProperties(errorIRI).size());
assertEquals(2, result.size()); assertEquals(VALUE_FACTORY.createIRI(XSD.INT), literal.getDatatype()); assertTrue(Arrays.asList(1, 2).contains(literal.intValue()));
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(newIRI, record.getOntologyIRI().get());
assertEquals(providerClassLoader, classLoader);
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("commit")); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions")); assertTrue(commit.containsKey("@id")); assertEquals(commit.getString("@id"), COMMIT_IRIS[0]);
assertEquals(response.getStatus(), 200);
assertEquals(2, result.size()); assertEquals(request5.getResource(), it.next().getResource()); assertEquals(request4.getResource(), it.next().getResource());
assertEquals(response.getStatus(), 200); assertTrue(firstRecord.has("@id")); assertEquals(firstRecord.get("@id").textValue(), newIRI);
assertEquals(response.getStatus(), 201); assertEquals(comment2.getResource().stringValue(), response.readEntity(String.class));
assertEquals("com.cambridgesemantics.ontologies._2012._07.extendeddocumentmetadata", PackageNamer.packageFromUrl(extendedDocumentMetadata)); assertEquals("com.lilly.www.ontologies._2015.sdp.lillycore", PackageNamer.packageFromUrl(lillyCore)); assertEquals("com.lilly.www.ontologies._2015.sdp.lillyservices", PackageNamer.packageFromUrl(lillyService));
assertEquals(commit.getResource(), result);
assertEquals(expectedGroups.size(), groups.size());
assertEquals(owlIRI.getIRIString(), mobiIndividual.getIRI().stringValue());
assertEquals(1, ranges.size()); assertTrue(ranges.contains(classIRI));
assertFalse(conn.getStatements(null, null, null, EMPTY_IRI).hasNext()); assertEquals(record.getModel().size(), RepositoryResults.asModel(conn.getStatements(null, null, null, EMPTY_IRI), MODEL_FACTORY).size());
assertEquals(2, result.size()); assertEquals(request2.getResource(), it.next().getResource()); assertEquals(request1.getResource(), it.next().getResource());
assertEquals(response.getStatus(), 500);
assertEquals(1, result.size()); assertEquals(request1.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request2.getResource(), result.get(0).getResource());
assertTrue(result.isPresent()); assertEquals(cache, result.get()); assertFalse(result.isPresent());
assertEquals(0, map.size());
assertEquals(response.getStatus(), 200); assertEquals(user.getResource(), updatedUser.getResource()); assertEquals(0, updatedUser.getHasUserRole_resource().size());
assertEquals(response.getStatus(), 200); assertEquals(response.readEntity(String.class), UsernameTestFilter.USERNAME);
assertEquals(1, result.size()); assertEquals("Title", result.get(0).stringValue());
assertEquals(0, connection.size());
assertEquals(response.getStatus(), 404);
assertTrue(cache.remove(key1));
assertFalse(record.getModel().isEmpty()); assertEquals(RECORD_IRI, record.getResource());
assertEquals(2, ont1.getAllNoDomainObjectProperties().size());
assertEquals("tester", result);
assertTrue(optional.isPresent());
assertTrue(!commentOpt.isPresent());
assertTrue(conn.containsContext(additionsResource)); assertTrue(conn.containsContext(deletionsResource)); assertTrue(conn.containsContext(graph1AdditionsResource)); assertTrue(conn.containsContext(graph1DeletionsResource)); assertFalse(conn.containsContext(quadInProgressCommit)); assertFalse(conn.containsContext(additionsResource)); assertFalse(conn.containsContext(deletionsResource)); assertFalse(conn.containsContext(graph1AdditionsResource)); assertFalse(conn.containsContext(graph1DeletionsResource));
assertEquals(1, ontology.getAllNoDomainObjectProperties().size());
assertEquals(1, result.size()); assertEquals(4, result.size()); assertEquals(2, result.size()); assertEquals(1, result.size());
assertEquals(1, result.size()); assertEquals(request4.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request5.getResource(), result.get(0).getResource());
assertEquals(response.getStatus(), 400);
assertEquals(distributedCatalogId, result.getResource());
assertEquals(ontology1, ontology2);
assertEquals(response.getStatus(), 200);
assertEquals(0, entities.size());
assertEquals(context, provider.context);
assertEquals(response.getStatus(), 500);
assertEquals(expectedProps.size(), properties.size());
assertEquals(response.getStatus(), 500);
assertEquals(false, cache.isClosed());
assertEquals(response.getStatus(), 404);
assertTrue(conn.getStatements(UNVERSIONED_RECORD_IRI, distributionIRI, DISTRIBUTION_IRI, UNVERSIONED_RECORD_IRI).hasNext());
assertTrue(result); assertFalse(result);
assertTrue(cacheManager instanceof RepositoryCacheManager); assertEquals(repositoryCacheManager, cacheManager);
assertEquals(0, result.size());
assertEquals(queryString, tokens.getText());
assertEquals(expectedProps.size(), properties.size());
assertTrue(pool.getParallelism() > 0); assertEquals(pool.getParallelism(), 1); assertEquals(pool.getParallelism(), 1); assertEquals(pool.getParallelism(), 2);
assertEquals(0, ranges.size());
assertEquals(1, failedEmails.size()); assertEquals("badAddress", failedEmails.iterator().next());
assertEquals(response.getStatus(), 400);
assertFalse(factory.canCreateFromDocumentIRI(owlIRI)); assertTrue(factory.canCreateFromDocumentIRI(owlProtocolIRI));
assertFalse(result.isPresent());
assertEquals(ontNoImports, map.get(key1)); assertEquals(ontOneImport, map.get(key2)); assertEquals(ontMultipleImports, map.get(key3));
assertEquals(response.getStatus(), 200); assertEquals(result.getString("@id"), comment1.getResource().stringValue());
assertEquals(1, iris.size());
assertEquals(cacheManager, cache.getCacheManager());
assertEquals(response.getStatus(), 500);
assertTrue(record.getCatalog_resource().isPresent()); assertEquals(distributedCatalogId, record.getCatalog_resource().get());
assertEquals(response.getStatus(), 500);
assertEquals(MOBI_TOKEN, result);
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.groupedModelToSkolemizedString(model, RDFFormat.JSONLD, transformer, service))); assertEquals(expectedGroupedTurtle, RestUtils.groupedModelToSkolemizedString(model, RDFFormat.TURTLE, transformer, service)); assertTrue(equalsIgnoreNewline(expectedGroupedRdfxml, RestUtils.groupedModelToSkolemizedString(model, RDFFormat.RDFXML, transformer, service)));
assertEquals(response.getStatus(), 200); assertFalse(result.containsKey("@graph")); assertTrue(result.containsKey("@id")); assertEquals(result.getString("@id"), request1.getResource().stringValue());
assertTrue(result.isPresent()); assertEquals(request1.getModel(), result.get().getModel());
assertTrue(result.isPresent()); assertEquals(commit, result.get());
assertEquals(0, SimpleOntologyValues.owlapiAnnotation(anno).annotations().count());
assertEquals(1, result.size()); assertEquals(request1.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request2.getResource(), result.get(0).getResource());
assertNull(result); assertNotNull(result); assertEquals(user, result);
assertEquals(expected, RestUtils.getTypedObjectFromJsonld(jsonld, "urn:test"));
assertFalse(groupModel.isEmpty()); assertTrue(optGroup.isPresent()); assertTrue(savedGroup.getMember().isEmpty());
assertTrue(branch.getHead_resource().isPresent()); assertEquals(COMMIT_IRI, branch.getHead_resource().get());
assertEquals(response.getStatus(), 500);
assertEquals(expected, result);
assertEquals(response.getStatus(), 500);
assertEquals(2, ont1.getAllNoDomainDataProperties().size());
assertTrue(result.isPresent()); assertEquals(record, result.get());
assertEquals(response.getStatus(), 200);
assertFalse(ontology.containsClass(errorIRI));
assertTrue(result.isPresent()); assertEquals(branch, result.get());
assertTrue(record.getMasterBranch_resource().isPresent()); assertEquals(1, record.getBranch_resource().size());
assertEquals(removeWhitespace(replaceBlankNodeSuffix(IOUtils.toString(expected, Charset.defaultCharset()))), removeWhitespace(replaceBlankNodeSuffix(jsonld)));
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(newIRI, record.getOntologyIRI().get());
assertTrue(repositoryCachingProvider.isSupported(OptionalFeature.STORE_BY_REFERENCE)); assertFalse(repositoryCachingProvider.isSupported(null));
assertNotEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)), Optional.empty()); assertEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)).get().stringValue(), largeComment); assertEquals(response.getStatus(), 400);
assertEquals(commit.getResource(), result);
assertEquals(response.getStatus(), 200);
assertEquals(response.getStatus(), 200); assertEquals(result.size(), roles.size());
assertTrue(conn.getStatements(null, null, null, RECORD_IRI).hasNext());
assertTrue(result.isPresent()); assertEquals(version, result.get());
assertEquals(response.getStatus(), 500);
assertFalse(cache.containsKey(key1));
assertEquals(response.getStatus(), 500);
assertFalse(optional.isPresent());
assertEquals(response.getStatus(), 200);
assertTrue(conn.getStatements(null, null, null, RECORD_IRI).hasNext()); assertFalse(conn.getStatements(null, null, null, RECORD_IRI).hasNext());
assertTrue(groups.isEmpty()); assertEquals(1, groups.size());
assertEquals(response.getStatus(), 200);
assertTrue(roleOptional.isPresent()); assertEquals(role.getResource(), (VALUE_FACTORY.createIRI(userRoleId)));
assertEquals(expectedProps.size(), properties.size());
assertTrue(record.getCatalog_resource().isPresent()); assertEquals(distributedCatalogId, record.getCatalog_resource().get());
assertEquals(response.getStatus(), 200); assertEquals(group.getResource(), updatedGroup.getResource()); assertEquals(0, updatedGroup.getMember_resource().size());
assertEquals(SimpleTokenManager.TOKEN_NAME, result.getName()); assertEquals(MOBI_TOKEN, result.getValue()); assertTrue(result.isSecure()); assertEquals("/", result.getPath());
assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 200); assertEquals(group.getResource(), updatedGroup.getResource()); assertEquals(0, updatedGroup.getHasGroupRole_resource().size());
assertEquals(3, ontologies.size());
assertEquals(localCatalogId, provider.getLocalCatalogIRI());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.modelToString(model, RDFFormat.JSONLD, transformer))); assertEquals(expectedTurtle, RestUtils.modelToString(model, RDFFormat.TURTLE, transformer)); assertTrue(equalsIgnoreNewline(expectedRdfxml, RestUtils.modelToString(model, RDFFormat.RDFXML, transformer)));
assertEquals(response.getStatus(), 500);
assertFalse(service.optObject(MISSING_IRI, recordFactory, conn).isPresent()); assertFalse(service.optObject(EMPTY_IRI, recordFactory, conn).isPresent()); assertFalse(service.optObject(RANDOM_IRI, recordFactory, conn).isPresent()); assertFalse(service.optObject(DIFFERENT_IRI, recordFactory, conn).isPresent()); assertTrue(service.optObject(RECORD_IRI, recordFactory, conn).isPresent());
assertEquals(response.getStatus(), 500);
assertEquals(2, ontology.getAllClassObjectProperties(classIRI).size()); assertEquals(1, ontology.getAllClassObjectProperties(classIRIC).size()); assertEquals(1, ontology.getAllClassObjectProperties(classIRID).size()); assertEquals(1, ontology.getAllClassObjectProperties(classIRIE).size());
assertTrue(!versionIRIOpt.isPresent());
assertEquals(response.getStatus(), 500);
assertEquals(ontology1.hashCode(), ontology2.hashCode());
assertEquals(0, failedEmails.size()); assertEquals(1, emails.size()); assertEquals(SUBJECT_LINE, email.getHeaderValue("Subject")); assertEquals(TO_EMAIL_ADDRESS, email.getHeaderValue("From")); assertTrue(email.getBody().contains(TEXT_MESSAGE));
assertFalse(registry.getFactoryOfType(Error.class).isPresent());
assertTrue(result);
assertEquals(cFactory, result.get(0)); assertEquals(aFactory, result.get(result.size() - 1));
assertTrue(cache.replace(key1, ontOneImport));
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(originalIRI, record.getOntologyIRI().get());
assertEquals(response.getStatus(), 400);
assertEquals(2, result.size()); assertEquals(request2.getResource(), it.next().getResource()); assertEquals(request1.getResource(), it.next().getResource()); assertEquals(2, result.size()); assertEquals(request1.getResource(), it.next().getResource()); assertEquals(request2.getResource(), it.next().getResource());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.modelToString(model, "jsonld", transformer))); assertEquals(expectedTurtle, RestUtils.modelToString(model, "turtle", transformer)); assertTrue(equalsIgnoreNewline(expectedRdfxml, RestUtils.modelToString(model, "rdf/xml", transformer))); assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.modelToString(model, "something", transformer)));
assertFalse(roles.isEmpty()); assertTrue(roleIds.contains(VALUE_FACTORY.createIRI(userRoleId))); assertTrue(roleIds.contains(VALUE_FACTORY.createIRI(adminRoleId)));
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("commit")); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions")); assertTrue(commit.containsKey("@id")); assertEquals(commit.getString("@id"), COMMIT_IRIS[1]);
assertTrue(diff.getAdditions().contains(addStatement)); assertTrue(diff.getDeletions().contains(delStatement));
assertEquals(response.getStatus(), 500);
assertEquals(commit.getResource(), result);
assertTrue(manager.applicationExists(ID)); assertFalse(manager.applicationExists("error"));
assertTrue(result.isPresent()); assertEquals(record, result.get());
assertEquals(factory.createIRI(IRI), SimpleOntologyValues.mobiIRI(owlOntologyIRI));
assertEquals(1, distributions.size());
assertEquals(response.getStatus(), 200); assertEquals(group.getResource(), updatedGroup.getResource()); assertEquals(0, updatedGroup.getMember_resource().size());
assertEquals(response.getStatus(), 500);
assertFalse(optional.isPresent());
assertFalse(record.getModel().isEmpty()); assertEquals(RECORD_IRI, record.getResource());
assertEquals(response.getStatus(), 400);
assertEquals("Ontology Repository Cache", cache.getName());
assertEquals(response.getStatus(), 404);
assertEquals(3, comments.size()); assertTrue(OffsetDateTime.parse(firstThreadTime).isBefore(OffsetDateTime.parse(secondThreadTime)));
assertEquals(response.getStatus(), 404);
assertEquals(response.getStatus(), 200); assertTrue(firstRecord.has("@id")); assertEquals(firstRecord.get("@id").textValue(), RECORD_IRI);
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(originalIRI, record.getOntologyIRI().get());
assertFalse(result.isPresent()); assertTrue(roleOptional.isPresent()); assertEquals(roleOptional.get(), role);
assertEquals(response.getStatus(), 200); assertEquals(0, cookies.size()); assertEquals(removeWhitespace(VALID_USER), removeWhitespace(result.toString()));
assertEquals(commit.getResource(), result);
assertEquals(response.getStatus(), 500); assertEquals(response.getStatus(), 500);
assertEquals(1, result.size()); assertEquals(VALUE_FACTORY.createIRI(XSD.BOOLEAN), value.getDatatype()); assertEquals(true, value.booleanValue());
assertNotEquals(app, null); assertTrue(app.getModel().contains(VALUE_FACTORY.createIRI(namespace + "id"), VALUE_FACTORY.createIRI(RDF.TYPE.stringValue()), VALUE_FACTORY.createIRI(Application.TYPE)));
assertTrue(!commentOpt.isPresent());
assertEquals(1, result.size()); assertEquals(request1.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request2.getResource(), result.get(0).getResource());
assertEquals(sourceDiff, diff);
assertFalse(dist.getModel().isEmpty()); assertEquals(DISTRIBUTION_IRI, dist.getResource());
assertFalse(commit.getModel().isEmpty()); assertEquals(IN_PROGRESS_COMMIT_IRI, commit.getResource());
assertEquals(response.getStatus(), 201); assertEquals(response.readEntity(String.class), COMMIT_IRIS[0]);
assertEquals(owlIRI, SimpleOntologyValues.owlapiDataProperty(property).getIRI());
assertTrue(record.getCatalog_resource().isPresent()); assertEquals(distributedCatalogId, record.getCatalog_resource().get());
assertEquals(commit.getResource(), result);
assertEquals(model, result);
assertEquals(3, ont1.getAllClassObjectProperties(importedIRI0).size()); assertEquals(3, ont1.getAllClassObjectProperties(importedIRI).size());
assertTrue(result); assertFalse(result);
assertFalse(roleOptional.isPresent());
assertTrue(result); assertFalse(result);
assertEquals(response.getStatus(), 500); assertEquals(response.getStatus(), 500);
assertTrue(versionIRIOpt.isPresent()); assertEquals(versionIRI, versionIRIOpt.get());
assertEquals(TOTAL_SIZE, results.size()); assertTrue(results.contains(RECORD_IRI)); assertTrue(results.contains(UNVERSIONED_RECORD_IRI)); assertTrue(results.contains(VERSIONED_RECORD_IRI)); assertTrue(results.contains(VERSIONED_RDF_RECORD_IRI));
assertEquals(response.getStatus(), 400);
assertEquals(1, distributions.size());
assertEquals(commit.getResource(), result);
assertNotEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)), Optional.empty()); assertEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)).get().stringValue(), updateCommentText); assertEquals(response.getStatus(), 200);
assertTrue(result.isPresent()); assertEquals(application, result.get());
assertEquals(distributedCatalogId, provider.getDistributedCatalogIRI());
assertEquals(MOBI_TOKEN, result);
assertEquals(repo, provider.getRepository());
assertEquals(response.getStatus(), 200);
assertEquals(cFactory, result.get(0)); assertEquals(aFactory, result.get(result.size() - 1));
assertEquals(response.getStatus(), 200); assertFalse(result.containsKey("commit")); assertFalse(result.containsKey("additions")); assertFalse(result.containsKey("deletions")); assertTrue(result.containsKey("@id")); assertEquals(result.getString("@id"), COMMIT_IRIS[1]);
assertEquals(expectedUsernames.size(), users.size()); assertTrue(optUsername.isPresent()); assertTrue(expectedUsernames.contains(optUsername.get().stringValue()));
assertEquals(jwt, result);
assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 200); assertEquals(response.getStatus(), 200);
assertEquals(new HashSet<>(expected), result.collect(Collectors.toSet()));
assertEquals(owlIRI, SimpleOntologyValues.owlapiAnnotationProperty(property).getIRI());
assertEquals(response.getStatus(), 200); assertNotNull(id); assertEquals(id, policyId.stringValue());
assertTrue(conn.containsContext(request3.getResource())); assertTrue(conn.contains(request3.getResource(), null, null, request3.getResource()));
assertEquals(expected, RestUtils.getObjectFromJsonld(jsonld));
assertEquals(0, ontology.getDataPropertyRange(dataProperty).size());
assertEquals(commit, result);
assertEquals(1, annotations.size());
assertEquals(1, versions.size());
assertFalse(result); assertTrue(result);
assertTrue(ontology.containsClass(classIRI));
assertEquals(401, e.getResponse().getStatus());
assertEquals(PasswordLoginModule.class.getName(), provider.getModuleName());
assertEquals(commit.getResource(), result);
assertTrue(ontologyIRIOpt.isPresent()); assertTrue(ontologyIRIOpt.get().equals(ontologyIRI) || ontologyIRIOpt.get().equals(vf.createIRI("urn:ontologyIRI2")) || ontologyIRIOpt.get().equals(vf.createIRI("urn:ontologyIRI3")));
assertTrue(versionIRIOpt.isPresent()); assertTrue(versionIRIOpt.get().equals(versionIRI) || versionIRIOpt.get().equals(vf.createIRI("urn:versionIRI2")) || versionIRIOpt.get().equals(vf.createIRI("urn:versionIRI3")));
assertFalse(result.isPresent());
assertFalse(result); assertTrue(result);
assertEquals(0, annotations.size());
assertEquals(expectedQuery, tokens.getText());
assertEquals(response.getStatus(), 200); assertEquals(result.size(), 2);
assertEquals(response.getStatus(), 500);
assertFalse(stateModel.contains(state0.getResource(), VALUE_FACTORY.createIRI(State.stateResource_IRI), statement.getSubject())); assertTrue(conn.getStatements(statement.getSubject(), statement.getPredicate(), statement.getObject()).hasNext()); assertTrue(stateModel.contains(state0.getResource(), VALUE_FACTORY.createIRI(State.stateResource_IRI), statement.getSubject())); assertTrue(conn.getStatements(statement.getSubject(), statement.getPredicate(), statement.getObject()).hasNext());
assertEquals(response.getStatus(), 200);
assertTrue(result.isPresent()); assertEquals(result.get(), user.getUsername().get().stringValue()); assertFalse(result.isPresent());
assertEquals(response.getStatus(), 200); assertFalse(result.containsKey("@graph")); assertTrue(result.containsKey("@id")); assertEquals(result.getString("@id"), user.getResource().stringValue());
assertEquals(classIRI, SimpleOntologyValues.mobiClass(owlapiClass).getIRI());
assertEquals(response.getStatus(), 500);
assertTrue(groupOptional.isPresent()); assertEquals(group.getResource().stringValue(), groupId1);
assertEquals(response.getStatus(), 200); assertEquals(array.size(), 5); assertTrue(array.contains(recordFactory.getTypeIRI().stringValue())); assertTrue(array.contains(unversionedRecordFactory.getTypeIRI().stringValue())); assertTrue(array.contains(versionedRecordFactory.getTypeIRI().stringValue())); assertTrue(array.contains(versionedRDFRecordFactory.getTypeIRI().stringValue())); assertTrue(array.contains(mappingRecordFactory.getTypeIRI().stringValue()));
assertEquals(response.getStatus(), 200); assertEquals(result.size(), users.size());
assertEquals(record, result);
assertFalse(result); assertTrue(result);
assertEquals(expected, actual);
assertTrue(cache.putIfAbsent(key1, ontNoImports));
assertEquals(localCatalogId, result.getResource());
assertTrue(entries.containsKey(policyId.stringValue())); assertTrue(policy instanceof BalanaPolicy); assertEquals(policyId, policy.getId());
assertEquals(DATASET_REPLACEMENT, datasetText);
assertEquals(wrapper.applicationId, result);
assertEquals(response.getStatus(), 200); assertEquals(array.size(), 3); assertTrue(array.contains(DCTERMS.TITLE.stringValue())); assertTrue(array.contains(DCTERMS.MODIFIED.stringValue())); assertTrue(array.contains(DCTERMS.ISSUED.stringValue()));
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(originalIRI, record.getOntologyIRI().get());
assertTrue(result);
assertFalse(cache.replace(key1, ontOneImport));
assertEquals(ontologyIRI, ontology.getOntologyId().getOntologyIRI().get()); assertEquals(versionIRI, ontology.getOntologyId().getVersionIRI().get());
assertFalse(result.isPresent());
assertEquals(Decision.PERMIT, result.getDecision()); assertEquals(Status.OK, result.getStatus()); assertTrue(result.getPolicyIds().contains(policy1));
assertEquals(branch, result);
assertEquals(owlOntologyIRI, SimpleOntologyValues.owlapiIRI(ontologyIRI));
assertEquals(response.getStatus(), 200);
assertEquals(19, result.size());
assertEquals(response.getStatus(), 404);
assertNull(result); assertNotNull(result); assertEquals(group, result);
assertFalse(result.isPresent());
assertEquals(expectedTrig, result);
assertEquals(response.getStatus(), 200); assertEquals(str, modelToJsonld(stateModel));
assertEquals(owlIRI, SimpleOntologyValues.owlapiObjectProperty(property).getIRI());
assertEquals(owlOntology, factory.createOWLOntology(owlOntologyManager, id, owlProtocolIRI, handler));
assertFalse(userModel.isEmpty()); assertTrue(optUser.isPresent()); assertTrue(savedUser.getPassword().isPresent() && savedUser.getPassword().get().stringValue().equals("123")); assertTrue(savedUser.getUsername().isPresent() && savedUser.getUsername().get().stringValue().equals("user"));
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions"));
assertEquals(response.getStatus(), 404);
assertTrue(conn instanceof ReadOnlyRepositoryConnection);
assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 200); assertEquals(details, expected);
assertEquals(400, ex.getResponse().getStatus());
assertFalse(result.isPresent()); assertTrue(result.isPresent()); assertEquals(user, result.get());
assertTrue(conn.getStatements(VERSIONED_RDF_RECORD_IRI, BRANCH_CATALOG_IRI, noHeadBranchIRI, VERSIONED_RDF_RECORD_IRI).hasNext()); assertEquals(0, deletedCommits.size()); assertFalse(conn.getStatements(VERSIONED_RDF_RECORD_IRI, BRANCH_CATALOG_IRI, noHeadBranchIRI, VERSIONED_RDF_RECORD_IRI).hasNext());
assertTrue(cacheManager instanceof RepositoryCacheManager); assertEquals(repositoryCacheManager, cacheManager);
assertEquals(response.getStatus(), 200); assertEquals(result.size(), 1); assertNotNull(policyObj); assertNotNull(id); assertEquals(id, policyId.stringValue());
assertEquals(expected, RestUtils.getObjectFromJsonld(jsonld));
assertEquals(Decision.DENY, result.getDecision()); assertEquals(Status.OK, result.getStatus()); assertTrue(result.getPolicyIds().contains(policy2));
assertEquals(result, set);
assertEquals(response.getStatus(), 201); assertEquals(response.readEntity(String.class), NEW_INSTANCE_ID_STR);
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions"));
assertTrue(result.isPresent()); assertEquals(record, result.get());
assertEquals(1, ranges.size());
assertTrue(conn.getStatements(null, null, null, RECORD_IRI).hasNext()); assertFalse(conn.getStatements(null, null, null, RECORD_IRI).hasNext());
assertEquals(response.getStatus(), 500);
assertFalse(result.isPresent());
assertFalse(dist.getModel().isEmpty()); assertEquals(DISTRIBUTION_IRI, dist.getResource());
assertEquals(1, ranges.size());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(result));
assertEquals(0, connection.size());
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 500);
assertFalse(statements.hasNext()); assertFalse(statements.hasNext());
assertEquals(response.getStatus(), 500);
assertEquals(400, ex.getResponse().getStatus());
assertEquals(response.getStatus(), 200); assertFalse(result.containsKey("@graph")); assertTrue(result.containsKey("@id")); assertEquals(result.getString("@id"), group.getResource().stringValue());
assertTrue(conn.size(additionsResource) > 0); assertTrue(conn.size(deletionsResource) > 0); assertFalse(conn.getStatements(null, null, null, IN_PROGRESS_COMMIT_IRI).hasNext()); assertTrue(conn.size(additionsResource) == 0); assertTrue(conn.size(deletionsResource) == 0);
assertEquals(response.getStatus(), 200); assertTrue(cookies.containsKey(TOKEN_NAME)); assertEquals(ANON, cookies.get(TOKEN_NAME).getValue()); assertEquals(removeWhitespace(ANON_USER), removeWhitespace(result.toString()));
assertFalse(branch.getModel().isEmpty()); assertEquals(BRANCH_IRI, branch.getResource());
assertEquals(Decision.DENY, result.getDecision()); assertEquals(Status.OK, result.getStatus()); assertTrue(result.getPolicyIds().contains(policy3));
assertEquals(response.getStatus(), 200); assertEquals(result.size(), users.size());
assertFalse(result);
assertEquals(response.getStatus(), 200); assertEquals(responseArray.size(), 2);
assertTrue(result.isPresent()); assertEquals(cache, result.get());
assertTrue(expectedTypedJsonld.startsWith(result.toString(), 1));
assertEquals(response.getStatus(), 200);
assertEquals(1, groups.size());
assertFalse(registry.getFactoryOfType(Error.TYPE).isPresent());
assertEquals(response.getStatus(), 500);
assertFalse(roleOptional.isPresent()); assertTrue(roleOptional.isPresent()); assertEquals(roleOptional.get(), role);
assertEquals(OntologyRecord.TYPE, service.getTypeIRI());
assertFalse(local.isPresent());
assertEquals(1, ontology.getAllClassObjectProperties(errorIRI).size());
assertEquals(response.getStatus(), 200);
assertEquals(response.getStatus(), 200);
assertEquals(response.getStatus(), 200);
assertTrue(local.isPresent()); assertTrue(local.get().size() > 0);
assertEquals(record, result);
assertTrue(result.isEmpty());
assertEquals(response.getStatus(), 400);
assertFalse(result.isPresent());
assertEquals(1, record.getBranch_resource().size());
assertEquals(commit, result);
assertTrue(record.getLatestVersion_resource().isPresent()); assertEquals(NEW_IRI, record.getLatestVersion_resource().get()); assertEquals(1, record.getVersion_resource().size());
assertEquals(1, result.size()); assertEquals(request4.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request5.getResource(), result.get(0).getResource());
assertTrue(result); assertFalse(result);
assertEquals(jwt, result);
assertFalse(branch.getModel().isEmpty()); assertEquals(BRANCH_IRI, branch.getResource());
assertEquals(response.getStatus(), 500);
assertFalse(it.hasNext());
assertFalse(entries.containsKey(policyId.stringValue()));
assertTrue(result.getModel().contains(createActivity.getResource(), VALUE_FACTORY.createIRI(Activity.startedAtTime_IRI), null)); assertTrue(result.getModel().contains(createActivity.getResource(), VALUE_FACTORY.createIRI(predAtLocation), null));
assertEquals(user, result);
assertEquals(response.getStatus(), 200);
assertEquals(providerProperties, properties);
assertEquals(new HashSet<>(expected), result.collect(Collectors.toSet()));
assertFalse(iri.isPresent());
assertEquals(response.getStatus(), 200);
assertFalse(result.isPresent()); assertTrue(result.isPresent()); assertEquals(group, result.get());
assertEquals(response.getStatus(), 404);
assertEquals(1, result.size()); assertEquals(4, result.size()); assertEquals(2, result.size()); assertEquals(1, result.size());
assertEquals(response.getStatus(), 201); assertEquals(response.readEntity(String.class), DISTRIBUTION_IRI);
assertFalse(record.getModel().isEmpty()); assertEquals(RECORD_IRI, record.getResource());
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 200);
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 200); assertEquals(responseArray.size(), 13); assertEquals(response.getHeaders().get("X-Total-Count").get(0), "13");
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.groupedModelToString(model, RDFFormat.JSONLD, transformer))); assertEquals(expectedGroupedTurtle, RestUtils.groupedModelToString(model, RDFFormat.TURTLE, transformer)); assertTrue(equalsIgnoreNewline(expectedGroupedRdfxml, RestUtils.groupedModelToString(model, RDFFormat.RDFXML, transformer)));
assertEquals(response.getStatus(), 400);
assertEquals(0, failedEmails.size()); assertEquals(1, emails.size()); assertEquals(SUBJECT_LINE, email.getHeaderValue("Subject")); assertEquals(TO_EMAIL_ADDRESS, email.getHeaderValue("From")); assertTrue(email.getBody().contains(TEXT_MESSAGE));
assertEquals(1, ranges.size()); assertTrue(ranges.contains(vf.createIRI(XSD.INTEGER)));
assertEquals(response.getStatus(), 200); assertEquals(result.size(), roles.size());
assertEquals(2, result.size()); assertEquals(request2.getResource(), it.next().getResource()); assertEquals(request1.getResource(), it.next().getResource()); assertEquals(2, result.size()); assertEquals(request1.getResource(), it.next().getResource()); assertEquals(request2.getResource(), it.next().getResource());
assertTrue(userOptional.isPresent()); assertEquals(user.getResource().stringValue(), userId); assertTrue(user.getPassword().isPresent()); assertEquals(user.getPassword().get().stringValue(), password);
assertEquals(response.getStatus(), 201); assertEquals(response.readEntity(String.class), policyId.stringValue());
assertEquals(headers.get("X-Total-Count").get(0), "1"); assertEquals(response.getLinks().size(), 0); assertEquals(result.size(), 1);
assertEquals(response.getStatus(), 500);
assertEquals(0, result.size());
assertNull(result);
assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("commit")); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions")); assertTrue(commit.containsKey("@id")); assertEquals(commit.getString("@id"), COMMIT_IRIS[0]);
assertEquals(response.getStatus(), 200);
assertTrue(conn.getStatements(null, null, null, BRANCH_IRI).hasNext()); assertFalse(conn.getStatements(null, null, null, BRANCH_IRI).hasNext()); assertFalse(conn.getStatements(VERSIONED_RDF_RECORD_IRI, VALUE_FACTORY.createIRI(VersionedRDFRecord.branch_IRI), BRANCH_IRI, VERSIONED_RDF_RECORD_IRI).hasNext());
assertEquals(response.getStatus(), 200); assertTrue(instance.containsKey("@id")); assertEquals(instance.getString("@id"), INSTANCE_ID_STR);
assertEquals(400, e.getResponse().getStatus()); assertEquals(errorMessage, e.getResponse().getStatusInfo().getReasonPhrase()); assertEquals(400, e.getResponse().getStatus()); assertEquals(errorMessage, e.getResponse().getStatusInfo().getReasonPhrase());
assertEquals(1, branches.size());
assertFalse(result.isPresent());
assertEquals(response.getStatus(), 400);
assertTrue(result.isPresent()); assertEquals(commit, result.get());
assertEquals(response.getStatus(), 400);
assertEquals(1, record.getUnversionedDistribution_resource().size());
assertEquals(2, ontology.getAllClassDataProperties(classIRI).size()); assertEquals(1, ontology.getAllClassDataProperties(classIRIC).size()); assertEquals(1, ontology.getAllClassDataProperties(classIRID).size()); assertEquals(1, ontology.getAllClassDataProperties(classIRIE).size());
assertEquals(1, result.size()); assertEquals(request1.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request2.getResource(), result.get(0).getResource());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(result));
assertEquals(1, result.size()); assertEquals("Title", result.get(0).stringValue());
assertEquals(jwt, result);
assertTrue(policy instanceof BalanaPolicy); assertEquals(policyId, policy.getId()); assertEquals(policyType, policy.getJaxbPolicy());
assertTrue(result); assertFalse(result);
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 200); assertEquals(result.size(), 1); assertFalse(requestObj.containsKey("@graph")); assertTrue(requestObj.containsKey("@id")); assertEquals(requestObj.getString("@id"), request1.getResource().stringValue());
assertEquals(SimpleTokenLoginModule.class.getName(), provider.getModuleName());
assertTrue(commentOpt.isPresent()); assertEquals(comment1.getModel(), comment.getModel());
assertEquals(response.getStatus(), 404);
assertEquals(removeWhitespace(IOUtils.toString(expected, Charset.defaultCharset()).replaceAll("_:node[a-zA-Z0-9]+\\"", "\\"")), removeWhitespace(jsonld.replaceAll("_:node[a-zA-Z0-9]+\\"", "\\"")));
assertEquals(response.getStatus(), 400);
assertEquals(3, map.size()); assertEquals(map.get(key1), ontNoImports); assertEquals(map.get(key2), ontOneImport); assertEquals(map.get(key3), ontMultipleImports);
assertEquals(1, version.getVersionedDistribution_resource().size());
assertTrue(cache.containsKey(key1));
assertEquals(response.getStatus(), 200);
assertNull(result);
assertEquals(response.getStatus(), 400);
assertTrue(roles.isEmpty()); assertEquals(1, roles.size());
assertTrue(result.isPresent()); assertEquals(record, result.get());
assertEquals(5, ontology.getUnloadableImportIRIs().size());
assertFalse(local.isPresent());
assertEquals(response.getStatus(), 200);
assertEquals(SimpleTokenManager.TOKEN_NAME, result.getName()); assertEquals(MOBI_TOKEN, result.getValue()); assertTrue(result.getSecure()); assertEquals("/", result.getPath());
assertFalse(result.isPresent());
assertTrue(optional.isPresent());
assertEquals(COMMIT_IRI, iri);
assertTrue(conn.getStatements(VERSIONED_RECORD_IRI, latestIRI, LATEST_VERSION_IRI, VERSIONED_RECORD_IRI).hasNext()); assertTrue(conn.getStatements(VERSIONED_RECORD_IRI, versionIRI, LATEST_VERSION_IRI, VERSIONED_RECORD_IRI).hasNext());
assertEquals(1, result.size()); assertEquals(request1.getResource(), result.get(0).getResource()); assertEquals(1, result.size()); assertEquals(request2.getResource(), result.get(0).getResource());
assertEquals(response.getStatus(), 400);
assertEquals(1, result.size()); assertEquals(4, result2.size()); assertEquals(2, result3.size()); assertEquals(1, result4.size());
assertTrue(result);
assertEquals(response.getStatus(), 200);
assertEquals(commit.getResource(), result);
assertTrue(result.isPresent()); assertEquals(thingFactory, result.get()); assertTrue(result2.isPresent()); assertEquals(aFactory, result2.get()); assertTrue(result3.isPresent()); assertEquals(bFactory, result3.get()); assertTrue(result4.isPresent()); assertEquals(cFactory, result4.get());
assertNotEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)), Optional.empty()); assertEquals(comment.getProperty(vf.createIRI(_Thing.description_IRI)).get().stringValue(), updateCommentText); assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 400);
assertEquals(commit.getResource(), result);
assertEquals(response.getStatus(), 500);
assertEquals(commit.getResource(), result);
assertTrue(result.isPresent()); assertEquals(thingFactory, result.get()); assertTrue(result2.isPresent()); assertEquals(aFactory, result2.get()); assertTrue(result3.isPresent()); assertEquals(bFactory, result3.get()); assertTrue(result4.isPresent()); assertEquals(cFactory, result4.get());
assertEquals("test&test", service.generateKey("test", "test")); assertEquals("test&null", service.generateKey("test", null)); assertEquals("null&null", service.generateKey(null, null));
assertEquals(1, users.size());
assertFalse(registry.getFactoryOfType(errorIRI).isPresent());
assertTrue(!ontologyIRIOpt.isPresent());
assertFalse(result.isPresent()); assertTrue(result.isPresent()); assertEquals(group, result.get());
assertEquals(jwt, result);
assertEquals(response.getStatus(), 200); assertTrue(result.containsKey("additions")); assertTrue(result.containsKey("deletions"));
assertEquals(0, result.size());
assertEquals(response.getStatus(), 200);
assertEquals(response.getStatus(), 200);
assertFalse(result.isPresent());
assertEquals(expectedProps.size(), properties.size());
assertEquals(Status.OK, result.getStatus()); assertEquals(Decision.NOT_APPLICABLE, result.getDecision()); assertTrue(result.getPolicyIds().isEmpty());
assertEquals(response.getStatus(), 404);
assertEquals(0, result.size());
assertEquals(1, ontology.getAllNoDomainDataProperties().size());
assertTrue(!versionIRIOpt.isPresent());
assertFalse(result.isPresent());
assertFalse(factory.canAttemptLoading(source)); assertTrue(factory.canAttemptLoading(protocolSource));
assertEquals(commit.getResource(), result);
assertEquals(0, connection.size());
assertEquals(response.getStatus(), 400);
assertEquals(0, result.size());
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 400);
assertFalse(result.isPresent());
assertTrue(result.isPresent()); assertEquals(dist, result.get());
assertEquals(record, result);
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 200);
assertEquals(queryString, tokens.getText());
assertEquals(0, result.size());
assertTrue(users.isEmpty()); assertEquals(1, users.size());
assertTrue(result.isPresent()); assertEquals(dist, result.get());
assertFalse(version.getModel().isEmpty()); assertEquals(VERSION_IRI, version.getResource());
assertEquals(response.getStatus(), 200); assertEquals(result, JSONObject.fromObject(recordJson));
assertEquals(model, result);
assertFalse(result.isPresent());
assertTrue(ontologyIRIOpt.isPresent()); assertEquals(ontologyIRI, ontologyIRIOpt.get());
assertTrue(stateModel.contains(state.getResource(), VALUE_FACTORY.createIRI(State.stateResource_IRI), statement.getSubject())); assertTrue(conn.getStatements(statement.getSubject(), statement.getPredicate(), statement.getObject()).hasNext());
assertTrue(result);
assertTrue(conn.getStatements(null, null, null, localCatalogId).hasNext()); assertTrue(conn.getStatements(null, null, null, distributedCatalogId).hasNext());
assertTrue(record.getOntologyIRI().isPresent()); assertEquals(originalIRI, record.getOntologyIRI().get());
assertEquals(configuration, cache.getConfiguration(Configuration.class));
assertEquals(response.getStatus(), 400);
assertEquals(3, ont1.getAllClassDataProperties(importedIRI0).size()); assertEquals(3, ont1.getAllClassDataProperties(importedIRI).size());
assertEquals(headers.get("X-Total-Count").get(0), "1"); assertEquals(response.getLinks().size(), 0); assertEquals(result.size(), 1);
assertEquals(response.getStatus(), 400);
assertFalse(cache.replace(key1, ontOneImport, ontOneImport));
assertEquals(response.getStatus(), 200);
assertEquals("system", provider.getRepositoryId());
assertTrue(conn.getStatements(VERSION_IRI, distributionIRI, DISTRIBUTION_IRI, VERSION_IRI).hasNext());
assertEquals(expectedClasses.size(), classes.size());
assertEquals(0, comments.size());
assertTrue(result.isPresent()); assertEquals(jwt, result.get());
assertFalse(result.isPresent());
assertTrue(cacheManager instanceof RepositoryCacheManager); assertEquals(repositoryCacheManager, cacheManager);
assertEquals(response.getStatus(), 200); assertEquals(result.size(), groups.size());
assertNull(mapper.getDocumentIRI(owlIRI));
assertEquals(response.getStatus(), 404);
assertEquals(response.getStatus(), 200); assertEquals(results.size(), arr.size()); assertNotNull(object); assertTrue(results.keySet().contains(vf.createIRI(object.get("id").toString())));
assertEquals(vf.createIRI("urn:test"), validIRI);
assertEquals(response.getStatus(), 400);
assertEquals(Record.TYPE, recordService.getTypeIRI());
assertTrue(cacheManager instanceof RepositoryCacheManager); assertEquals(repositoryCacheManager, cacheManager);
assertEquals(1, failedEmails.size()); assertEquals("badAddress", failedEmails.iterator().next());
assertEquals(response.getStatus(), 404);
assertEquals(401, e.getResponse().getStatus());
assertEquals(response.getStatus(), 500);
assertEquals(expectedProps.size(), properties.size());
assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.groupedModelToString(model, "jsonld", transformer))); assertEquals(expectedGroupedTurtle, RestUtils.groupedModelToString(model, "turtle", transformer)); assertTrue(equalsIgnoreNewline(expectedGroupedRdfxml, RestUtils.groupedModelToString(model, "rdf/xml", transformer))); assertEquals(removeWhitespace(expectedJsonld), removeWhitespace(RestUtils.groupedModelToString(model, "something", transformer)));
assertTrue(result.isPresent()); assertEquals(thingFactory, result.get()); assertTrue(result2.isPresent()); assertEquals(aFactory, result2.get()); assertTrue(result3.isPresent()); assertEquals(bFactory, result3.get()); assertTrue(result4.isPresent()); assertEquals(cFactory, result4.get());
assertNull(ontology);
assertEquals(response.getStatus(), 400);
assertEquals(response.getStatus(), 200);
assertEquals(cFactory, result.get(0)); assertEquals(aFactory, result.get(result.size() - 1));
assertTrue(result.isPresent()); assertEquals(commit, result.get());
assertEquals(commit.getResource(), result);
assertFalse(conn.getStatements(VALUE_FACTORY.createIRI(namespace + "id"), null, null).hasNext());
assertEquals(response.getStatus(), 201); assertEquals(comment1.getResource().stringValue(), response.readEntity(String.class));
assertEquals(response.getStatus(), 500);
assertEquals(response.getStatus(), 404);
assertEquals(RepositoryCachingProvider.class.getName(), uri.getRawPath()); assertEquals(uri, providerUri);
assertEquals(response.getStatus(), 200);
assertEquals(expected, actual);
assertEquals(7, contexts.size());
assertEquals(context, provider.context);
assertEquals(1, roles.size());
assertEquals(response.getStatus(), 200);
assertTrue(ComponentCopyPropertiesMatch(fieldBaseOriginal, fieldBaseCopy)); assertTrue(fieldBaseOriginal.getShortLabel().equals(fieldBaseCopy.getShortLabel()));
assertTrue("Component fetched correctly", StringUtils.equals(components.get(0).getCode(),component.getCode()));
assertTrue("Found MySQL custom incrementer",mySQLMaxVal != null); assertTrue("Custom incrementer for MySQL should be mySQL5 for String val", StringUtils.equals(mySQLMaxVal.nextStringValue(),"mySQL5")); assertTrue("Found Oracle custom incrementer", oracleMaxVal != null);
assertEquals(Integer.class, readMethod.getReturnType()); assertEquals(Integer.class, readMethod.getReturnType()); assertEquals(Integer.class, readMethod.getReturnType()); assertEquals(Integer.class, readMethod.getReturnType()); assertEquals(Number.class, readMethod.getReturnType()); assertEquals(Integer.class, readMethod.getReturnType());
assertNotNull(pds.get("rwProp")); assertNotNull(pds.get("roProp")); assertNotNull(pds.get("woProp")); assertNull(pds.get("foobar"));
assertNotSame(newMockUserTransaction, userTransaction); assertEquals(newMockUserTransaction, Jta.getUserTransaction()); assertEquals(transactionManager, Jta.getTransactionManager());
assertTrue(values.size() == 3); assertTrue(values.contains("f1")); assertTrue(values.contains("f2")); assertTrue(values.contains("f3"));
assertEquals(TransactionManager.class, transactionManagerFactoryBean.getObjectType());
assertTrue("getAllComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 2); assertTrue("Component was returned", StringUtils.equals(component.getCode(), components.get(0).getCode())); assertTrue("Component was returned", StringUtils.equals(derivedComponent.getCode(), components.get(1).getCode()));
assertEquals("pi = 3.142", expectedVal); assertEquals(" z y x w", patterenedStringBuilder.sprintf("w", "x", "y", "z")); assertEquals("", patterenedStringBuilder.sprintf("somethingElse"));
assertNotNull(workflowEngine); assertTrue(workflowEngine instanceof BlanketApproveEngine); assertFalse(workflowEngine instanceof SimulationEngine);
assertTrue("Cannot create incrementer", mySQLMaxVal == null);
assertNull(getParameterRepositoryService().getParameterValueAsBoolean(key));
assertNotNull(qbcBuilder); assertTrue(greaterThan instanceof GreaterThanPredicate); assertEquals(((GreaterThanPredicate) greaterThan).getValue().getValue(), date);
assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), "needle");
assertTrue(transactionManagerFactoryBean.isSingleton());
assertEquals(UserTransaction.class, userTransactionFactoryBean.getObjectType());
assertNotNull(transactionManager); assertTrue(Proxy.isProxyClass(transactionManager.getClass()));
assertTrue(ComponentCopyPropertiesMatch(collectionGroupOriginal, collectionGroupCopy)); assertTrue(ComponentCopyPropertiesMatch( CopyUtils.unwrap((ComponentBase) collectionGroupOriginal.getAddLineItems().get(i)), CopyUtils.unwrap((ComponentBase) collectionGroupCopy.getAddLineItems().get(i)))); assertTrue(ComponentCopyPropertiesMatch( CopyUtils.unwrap((Component) collectionGroupOriginal.getAddLineActions().get(i)), CopyUtils.unwrap((Component) collectionGroupCopy.getAddLineActions().get(i))));
assertNotSame(newMockTransactionManager, transactionManager); assertEquals(newMockTransactionManager, Jta.getTransactionManager()); assertEquals(userTransaction, Jta.getUserTransaction());
assertNull(handler.getTarget()); assertEquals(this.transactionManager, handler.getTarget());
assertSame(findResult, service.find(Object.class, "id"));
assertEquals("<li>ID</li>",result);
assertTrue(component.getId().equalsIgnoreCase(componentId)); assertTrue(component.getId().equalsIgnoreCase(componentId + suffix));
assertNull(testObject.to(null));
assertTrue(parameterList.isEmpty());
assertEquals(VersionHelper.compareVersion("undefined", "2.1.3-snapshot"), -1); assertEquals(VersionHelper.compareVersion("2.1.3", "undefined"), -1);
assertNull(service.reduceCompoundKey(null));
assertTrue("Style fetched correctly",styleFetched != null && StringUtils.equals(styleFetched.getName(),style.getName()));
assertNotNull(result); assertEquals(3,result.size());
assertTrue("Parameter retrieved after update", param != null);
assertTrue(incrementer instanceof OracleSequenceMaxValueIncrementer); assertEquals("MY_SEQUENCE", oracleIncrementer.getIncrementerName()); assertSame(incrementer, MaxValueIncrementerFactory.getIncrementer(oracle, "MY_SEQUENCE")); assertNotSame(incrementer, MaxValueIncrementerFactory.getIncrementer(oracle, "MY_SEQUENCE_2"));
assertTrue("getAllComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 1); assertTrue("Component was returned", StringUtils.equals(component.getCode(), components.get(0).getCode()));
assertEquals(true, CriteriaMatcherInMemory.matchesEqual("a", "a")); assertEquals(false, CriteriaMatcherInMemory.matchesEqual("a", "b")); assertEquals(false, CriteriaMatcherInMemory.matchesEqual("b", "a"));
assertTrue("Checksums match",StringUtils.equals(checksum1,checksum2));
assertEquals("uif-formView", inquiryView.getCssClasses().get(0));
assertEquals(false, CriteriaMatcherInMemory.matchesLessThan("a", "a")); assertEquals(true, CriteriaMatcherInMemory.matchesLessThan("a", "b")); assertEquals(false, CriteriaMatcherInMemory.matchesLessThan("b", "a"));
assertSame(allResults, service.findAll(Object.class));
assertSame(findResult, service.find(Object.class, "id"));
assertEquals(123456L, service.reduceCompoundKey(singleKey));
assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), "needle");
assertEquals("f1", getParameterRepositoryService().getSubParameterValueAsString(key, "foo"));
assertTrue("getActiveComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 0);
assertNotNull(qbcBuilder); assertTrue(lessThan instanceof LessThanPredicate); assertEquals(((LessThanPredicate) lessThan).getValue().getValue(), date);
assertFalse("".equals(result)); assertTrue(null == result);
assertEquals(multiKey, service.reduceCompoundKey(multiKey));
assertEquals("bar", tb.getRwProp()); assertEquals("baz", tb.getNext().getNext().woProp);
assertEquals(transactionManager, Jta.getTransactionManager()); assertEquals(userTransaction, Jta.getUserTransaction());
assertFalse(((StandardWorkflowEngine)workflowEngine).isRunPostProcessorLogic());
assertTrue("Component fetched correctly", StringUtils.equals(components.get(0).getCode(),component.getCode())); assertTrue("Component fetched correctly", StringUtils.equals(components.get(1).getCode(),derivedComponent.getCode()));
assertEquals("Parameters are equal",param,parameter);
assertTrue(values.size() == 3); assertTrue(values.contains("f1")); assertTrue(values.contains("f2")); assertTrue(values.contains("f3"));
assertEquals(transactionManager, Jta.getTransactionManager()); assertEquals(userTransaction, Jta.getUserTransaction());
assertEquals("f1", getParameterRepositoryService().getSubParameterValueAsString(key, "foo"));
assertSame(headerMetadataMessage, ObjectPropertyUtils.getPropertyValue(formView, "header.metadataMessage"));
assertFalse(service.supports(String.class));
assertEquals("<ul><li>H</li></ul>", result);
assertTrue("Component was returned",getComponentService().getComponentByCode("blah", "blah")==null);
assertTrue(paramValueList != null && paramValueList.size() == 3 && paramValueList.contains("foo") && paramValueList.contains("bar") && paramValueList.contains("baz"));
assertNull(getParameterRepositoryService().getSubParameterValueAsString(key, "foo"));
assertNull(lda.getKnsLegacyDataAdapter());
assertEquals(false, CriteriaMatcherInMemory.matchesGreaterThan("a", "a")); assertEquals(false, CriteriaMatcherInMemory.matchesGreaterThan("a", "b")); assertEquals(true, CriteriaMatcherInMemory.matchesGreaterThan("b", "a"));
assertEquals(kradLegacyDataAdapter, lda.getKradLegacyDataAdapter());
assertEquals("34", action.getActionParameter("lineIndex"));
assertFalse(Jta.isEnabled()); assertTrue(Jta.isEnabled()); assertFalse(Jta.isEnabled());
assertNotNull(qbcBuilder); assertTrue(lessThanEqual instanceof LessThanOrEqualPredicate); assertEquals(((LessThanOrEqualPredicate) lessThanEqual).getValue().getValue(), date.plusDays(1));
assertTrue(((StandardWorkflowEngine)workflowEngine).isRunPostProcessorLogic());
assertNull(getParameterRepositoryService().getParameterValueAsString(key));
assertEquals("foobar", ObjectPropertyUtils.getPropertyValue(tb, "rwProp")); assertEquals("barbaz", ObjectPropertyUtils.getPropertyValue(tb, "roProp"));
assertSame(findMatchingResult, service.findMatching(Object.class, query));
assertEquals(false, new MessageMap().containsKeyMatchingPattern(MIXED_LIST_PATTERN));
assertEquals(5, serviceInfos.size());
assertEquals(1, deduplicatedActionRequestValues.size());
assertNotNull(userTransaction); assertTrue(Proxy.isProxyClass(userTransaction.getClass()));
assertSame(findMatchingResult, service.findMatching(Object.class, query));
assertEquals(String.class, ObjectPropertyUtils.getPropertyType(TestBean.class, "complexProp.fooProp")); assertEquals(null, ObjectPropertyUtils.getPropertyType(TestBean.class, "complexProp.foobar")); assertEquals(null, ObjectPropertyUtils.getPropertyType(TestBean.class, "foo")); assertEquals(null, ObjectPropertyUtils.getPropertyType(TestBean.class, "foo.bar"));
assertTrue("Component was returned", StringUtils.equals(component.getCode(), getComponentService().getComponentByCode(NAMESPACE_CODE, CODE).getCode()));
assertTrue(customizations.size() == 0);
assertEquals("Merged map is not correct size", 5, messages1.size());
assertNotNull(qbcBuilder); assertTrue(greaterThanEqual instanceof GreaterThanOrEqualPredicate); assertEquals(((GreaterThanOrEqualPredicate) greaterThanEqual).getValue().getValue(), date);
assertEquals("1234", service.reduceCompoundKey("1234"));
assertTrue(paramValueList != null && paramValueList.size() == 1 && paramValueList.contains("a value"));
assertEquals("A",data.getId()); assertEquals("B",data.getAgendaId()); assertEquals("H",data.getRuleId()); assertEquals("D",data.getSubAgendaId()); assertEquals("Q",data.getWhenTrueId()); assertEquals("S",data.getWhenFalseId()); assertEquals("U",data.getAlwaysId()); assertEquals(0L,(long)data.getVersionNumber()); assertNotNull(data.getRule()); assertNotNull(data.getWhenTrue()); assertNotNull(data.getWhenFalse()); assertNotNull(data.getAlways());
assertEquals(2, l1.size()); assertEquals("foo", l1.get(0)); assertEquals("bar", l1.get(1)); assertEquals(2, l2.size()); assertEquals("foo", l2.get(0)); assertEquals("bar", l2.get(1)); assertEquals(3, l3.size()); assertEquals("foo", l3.get(0)); assertEquals("bar-bar.baz", l3.get(1)); assertEquals("fez", l3.get(2));
assertTrue(values.isEmpty());
assertTrue(Jta.isFrozen()); assertFalse(Jta.isEnabled()); assertNull(Jta.getTransactionManager()); assertNull(Jta.getUserTransaction());
assertEquals(parameter.getValue(), getParameterRepositoryService().getParameterValueAsString(key));
assertTrue("Active passed as criteria for findMatching",StringUtils.contains(queryByCriteria.toString(), "active, true")); assertTrue("getActiveComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 1); assertTrue("Component was returned", StringUtils.equals(component.getCode(), components.get(0).getCode()));
assertEquals("foobar", tb.getRwProp()); assertEquals("barbaz", tb.woProp); assertEquals(now, tb.getDateProp().getTime()); assertEquals(expectedDate, tb.getDateProp());
assertTrue("getDerivedComponentSet is empty",components != null && components.isEmpty());
assertNull(getParameterRepositoryService().getParameterValueAsBoolean(key));
assertNull(transactionManagerFactoryBean.getObject());
assertEquals("01/03/13", ObjectPropertyUtils.getPropertyValueAsText(tb, "dateProp"));
assertNotNull(qbcBuilder); assertTrue(and instanceof AndPredicate); assertEquals(2, predicates.size()); assertEquals(greaterThanOrEqual.getValue().getValue(), lowerDate); assertEquals(lessThanOrEqual.getValue().getValue(), upperDate.plusDays(1)); assertTrue(foundProp4Lower); assertTrue(foundProp4Upper);
assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), "needle");
assertEquals(path, ObjectPropertyUtils.getCanonicalPath(path)); assertEquals("foo", ObjectPropertyUtils.getCanonicalPath(path)); assertEquals("foo.foo1.foo2", ObjectPropertyUtils.getCanonicalPath(path)); assertEquals("foo.foo1.foo2.foo3.foo4", ObjectPropertyUtils.getCanonicalPath(path));
assertTrue(tb.isBooleanProp());
assertNotNull(workflowEngine); assertFalse(workflowEngine instanceof BlanketApproveEngine); assertTrue(workflowEngine instanceof SimulationEngine);
assertTrue("Checksums match",StringUtils.equals(checksum1,checksum2));
assertEquals("generate event script is not correct", expectedHandler, onClickHandler);
assertEquals("ID-AA", CriteriaMatcherInMemory.extractValue("id", org)); assertEquals("AA", CriteriaMatcherInMemory.extractValue("namespace", org)); assertEquals("Automobile Association", CriteriaMatcherInMemory.extractValue("name", org)); assertEquals("Consumer", CriteriaMatcherInMemory.extractValue("typeId", org)); assertEquals("true", CriteriaMatcherInMemory.extractValue("active", org)); assertEquals("Automobile Association towing", CriteriaMatcherInMemory.extractValue("description", org));
assertNull(lda.getKradLegacyDataAdapter());
assertEquals("number was not converted to js value as expected", " -1 ", ScriptUtils.convertToJsValue(" -1 ")); assertEquals("number was not converted to js value as expected", "1.01 ", ScriptUtils.convertToJsValue("1.01 ")); assertEquals("string was not converted to js value as expected", "\\"1.o1 \\"", ScriptUtils.convertToJsValue("1.o1 "));
assertTrue(service.supports(String.class));
assertTrue(Jta.isFrozen()); assertSame(userTransaction, Jta.getUserTransaction());
assertTrue(Jta.isFrozen()); assertSame(transactionManager, Jta.getTransactionManager());
assertEquals(VersionHelper.compareVersion(verOne[i],verTwo[i]), intResults[i]); assertEquals(VersionHelper.compareVersion(verTwo[i],verOne[i]), -1*intResults[i]); assertEquals(VersionHelper.compareVersion("7.7.7","7.7.7"), 0);
assertTrue(incrementer instanceof MaxValueIncrementerFactory.EnhancedMySQLMaxValueIncrementer); assertEquals("MY_SEQUENCE", mysqlIncrementer.getIncrementerName()); assertEquals("ID", mysqlIncrementer.getColumnName()); assertSame(incrementer, MaxValueIncrementerFactory.getIncrementer(mysql, "MY_SEQUENCE")); assertNotSame(incrementer, MaxValueIncrementerFactory.getIncrementer(mysql, "MY_SEQUENCE_2"));
assertTrue(ComponentCopyPropertiesMatch(dataFieldOriginal, dataFieldCopy));
assertNotNull(workflowEngine); assertFalse(workflowEngine instanceof BlanketApproveEngine); assertFalse(workflowEngine instanceof SimulationEngine); assertTrue(workflowEngine instanceof StandardWorkflowEngine);
assertNotSame(incrementer1, incrementer2);
assertEquals(kualiInteger, criteriaValueKualiInteger.getValue());
assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), "needle");
assertTrue(userTransactionFactoryBean.isSingleton());
assertEquals("function was not converted to js value as expected", jsFunction, ScriptUtils.convertToJsValue(jsFunction));
assertEquals(knsLegacyDataAdapter, lda.getKnsLegacyDataAdapter());
assertEquals("wasn&apos;t", ScriptUtils.escapeHtml("wasn\'t"));
assertNull(handler.getTarget()); assertEquals(this.userTransaction, handler.getTarget());
assertTrue(Jta.isEnabled()); assertEquals(transactionManager, controller.acquireTransactionManager());
assertFalse(Jta.isFrozen()); assertTrue(Jta.isFrozen()); assertTrue(Jta.isEnabled()); assertSame(transactionManager, Jta.getTransactionManager()); assertSame(userTransaction, Jta.getUserTransaction()); assertFalse(Jta.isFrozen()); assertFalse(Jta.isEnabled());
assertEquals("array was not converted to js value as expected", " [-1, 4, 5] ", ScriptUtils.convertToJsValue(" [-1, 4, 5] ")); assertEquals("map was not converted to js value as expected", jsMap, ScriptUtils.convertToJsValue(jsMap));
assertTrue("Component fetched correctly", StringUtils.equals(components.get(0).getCode(),derivedComponent.getCode()));
assertTrue(PropertyUtils.isWriteable(tchh, "tch2.collection"));
assertTrue("Active passed as criteria for findMatching",StringUtils.contains( queryByCriteria.toString(),"active, true")); assertTrue("getAllComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 2); assertTrue("Component was returned", StringUtils.equals(component.getCode(), components.get(0).getCode())); assertTrue("Component was returned", StringUtils.equals(derivedComponent.getCode(), components.get(1).getCode()));
assertNull("Returned null parameter",getParameterRepositoryService().getParameter(key));
assertSame(incrementer1, incrementer2); assertSame(incrementer2, incrementer3);
assertSame(metadataRepository, service.getMetadataRepository());
assertEquals("uif-message", message.getCssClasses().get(0));
assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), "needle");
assertNull(testObject.from(null));
assertTrue("getAllComponentsByNamespaceCode not retrieved", components != null && components.isEmpty());
assertTrue(propertiesMatch(dataTableOriginal, dataTableCopy));
assertEquals("A",result.getId()); assertEquals("B",result.getAgendaId()); assertEquals("C",result.getRuleId()); assertEquals("G",result.getSubAgendaId()); assertEquals("J",result.getWhenTrueId()); assertEquals("Q",result.getWhenFalseId()); assertEquals("X",result.getAlwaysId()); assertEquals(0L,(long)result.getVersionNumber()); assertNotNull(result.getRule()); assertNotNull(result.getWhenTrue()); assertNotNull(result.getWhenFalse()); assertNotNull(result.getAlways());
assertFalse(Jta.isFrozen()); assertTrue(Jta.isFrozen());
assertNotNull(component.getSimpleDataAttributes()); assertEquals("simple attributes did not match", expected, component.getSimpleDataAttributes());
assertEquals("foobar", tb.getRwProp()); assertEquals(3, tb.getIntProp()); assertEquals(true, tb.isBooleanProp()); assertEquals(3, tb.getStuffs().size()); assertEquals("foo", tb.getStuffs().get(0)); assertEquals("bar", tb.getStuffs().get(1)); assertEquals("baz", tb.getStuffs().get(2));
assertTrue("Found MySQL custom incrementer",mySQLMaxVal != null); assertTrue("Custom incrementer for MySQL should be mySQL5 for String val", StringUtils.equals(mySQLMaxVal.nextStringValue(),"mySQL5")); assertTrue("Found Oracle custom incrementer", oracleMaxVal != null);
assertThat(actual).isEqualTo(expectedAdaptable);
assertThat(underTest.getMetadataHeadersToPut()).isEqualTo(expected);
assertThat(underTest.getFeature(FLUX_CAPACITOR_ID)).contains(FLUX_CAPACITOR);
assertThat(feature).isEqualTo(TestConstants.Feature.FLUX_CAPACITOR);
assertThat(UNDER_TEST.resolve(POLICY_ID, "id")).contains(POLICY_ID.toString());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(parsedCommandResponse).isEqualTo(commandResponse);
assertThat(ThingId.dummy().isDummy()).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(authenticationResult.isSuccess()).isTrue();
assertThat(underTest.isValid()).isTrue();
assertThat(commandFromJson).isEqualTo(underTest);
assertThat(underTest.answer()).isNotNull();
assertThat(actualJson).isEqualTo(expected);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.LE); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"4711\\""))).isFalse(); assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("W/\\"4711\\""))).isFalse();
assertThat(ConnectivityHeaders.isPayloadDebugLogEnabled(headers("PAYLOAD"))).isTrue();
assertThat(underTest.isNull()).isTrue();
assertThat(result) .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(acknowledgement));
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V1);
assertThat(underTest).isEqualTo(MISSING_THING_IDS_EXCEPTION);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "channel")).contains(KNOWN_CHANNEL.getName());
assertThat(filters).containsOnly(filterMock);
assertThat(jsonObject) .hasSize(1) .contains(JsonKey.of(DittoHeaderDefinition.RESPONSE_REQUIRED.getKey()), JsonFactory.newValue(false));
assertThat(underTest.gt(value)) .hasType(SearchFilter.Type.GT) .hasOnlyValue(value) .hasStringRepresentation("gt(" + PROPERTY_PATH + "," + value + ")");
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveFeatureTwinCommand.toString());
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(newAttributes) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(ifMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"4711\\""))).isTrue();
assertThat(parsed).isEqualTo(expected);
assertThat(copy).isEqualTo(MISSING_THING_IDS_EXCEPTION);
assertThat(filterNode.getComparisonValue().get(0)).isEqualTo("test1"); assertThat(filterNode.getComparisonValue().get(1)).isNull(); assertThat(filterNode.getComparisonValue().get(2)).isEqualTo("test2"); assertThat(filterNode.getComparisonValue().get(3)).isNull(); assertThat(filterNode.getComparisonValue().get(4)).isNull(); assertThat(filterNode.getComparisonValue().get(5)).isEqualTo("test3");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.createMessageMapperInstance(String.class.getCanonicalName())).isEmpty();
assertThat(filtered).isEqualTo(expected);
assertThat(underTest.isResponseRequired()).isFalse();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(resolvedParameters.get(0)).contains(firstParameter); assertThat(resolvedParameters.get(1)).contains(secondParameter); assertThat(resolvedParameters.get(2)).contains(thirdParameter);
assertThat(e).isInstanceOf(IllegalArgumentException.class);
assertThat(underTest.ne(ACME)) .hasType(SearchFilter.Type.NE) .hasOnlyValue(ACME) .hasStringRepresentation("ne(" + PROPERTY_PATH + ",\\"" + ACME + "\\")");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ifMatchPreconditionHeader.getKey()).isEqualTo("if-match");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat((Object) newJsonKey).isSameAs(oldJsonKey);
assertThat(underTest.answer()).isNotNull();
assertThat(underTest.answer()).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ImmutableSourceAddressPlaceholder.INSTANCE.resolve(SOME_MQTT_TOPIC, "invalid")).isEmpty();
assertThat(features.toJsonString()).isEqualTo("null");
assertThat(underTest).isNotNull();
assertThat(actual).isEqualTo(LOG_ENTRY_JSON);
assertThat(sut.getTags().keySet()).hasSize(1);
assertThat(parsedFirst).isInstanceOf(ImmutableJsonArray.class); assertThat(parsedSecond).isInstanceOf(ImmutableJsonArray.class); assertThat(parsedFirst.hashCode()).isEqualTo(parsedSecond.hashCode());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(green).isEqualTo(green); assertThat(green).isEqualTo(blue); assertThat(blue).isEqualTo(ImmutableJsonArrayNull.getInstance());
assertThat(headerInvalidException.getMessage()).isEqualTo(customMessage); assertThat(headerInvalidException.getDescription()).hasValue( "Verify that the header has the correct syntax and try again.");
assertThat(underTest).doesNotSupport(JsonValue::asArray); assertThat(underTest).doesNotSupport(JsonValue::asBoolean); assertThat(underTest).doesNotSupport(JsonValue::asString); assertThat(underTest).doesNotSupport(JsonValue::asInt); assertThat(underTest).doesNotSupport(JsonValue::asLong); assertThat(underTest).doesNotSupport(JsonValue::asDouble);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ack.getElementId()).isEqualTo(KNOWN_ELEMENT_ID); assertThat(ack.getStatus()).isEqualTo(StreamAck.Status.FAILURE);
assertThat(fieldExpression).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_FIELD_SELECTION);
assertThat(copy).isEqualTo(INVALID_FILTER_EXCEPTION);
assertThat(validationResult.isValid()).isFalse(); assertThat(validationResult.toException(DITTO_HEADERS).getDittoHeaders()).isEqualTo(DITTO_HEADERS);
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON .remove(Event.JsonFields.ID.getPointer()) .set(Event.JsonFields.TYPE, AclEntryModified.TYPE));
assertThat(actual).isEqualTo(expected);
assertThat(underTest.answer()).isNotNull();
assertThat(actual).isEqualTo(LOG_ENTRY);
assertThat(actual.getPayload().getValue()).contains(JsonObject.newBuilder() .set("filter", filter) .build());
assertThat(actual).isEqualTo(expected);
assertThat(parsedAcknowledgements).isEqualTo(acks);
assertThat(ifMatchPreconditionHeader.meetsConditionFor(null)).isFalse();
assertThat(UNDER_TEST.getSupportedNames()).containsExactlyInAnyOrder( EXPECTED_FUNCTION_NAMES.toArray(new String[0]));
assertThat(UNDER_TEST.resolve(THING_ID, "namespace")).contains(NAMESPACE);
assertThat(underTest.isRelevantFor("b:ar")).isFalse();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(existsNode.getProperty().getClass()).isEqualTo(String.class); assertThat(existsNode.getProperty()).isEqualTo("features/scanner");
assertThat(function.apply(input, params, expressionResolver)).contains(KNOWN_FALLBACK);
assertThat(dittoRuntimeException).isEqualTo(exceptionA);
assertThat(actual).isEqualTo(jsonNullLiteral);
assertThat(underTest).hasSize(3);
assertThat(message).contains("Acknowledged: Success");
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(value);
assertThat(filteredValue).isEqualTo(expectedArrayValue);
assertThat(sut.getTag("segment")).isEqualTo("overall");
assertThat(thing) .hasId(THING_ID) .hasPolicyId(POLICY_ID) .hasNoDefinition() .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(parameterResolver.apply(stringSingle, expressionResolver, DUMMY)).contains(value); assertThat(parameterResolver.apply(stringDouble, expressionResolver, DUMMY)).contains(value);
assertThat(actual).isEqualTo(FILTERED_ACKNOWLEDGEMENT_REQUEST);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(underTest).containsExactly(FIRST_IDENTIFIER, SECOND_IDENTIFIER);
assertThat(underTest).isNotNull(); assertThat((CharSequence) underTest.getEntityId()).isEqualTo(TestConstants.Policy.POLICY_ID); assertThat(underTest.getRevision()).isEqualTo(TestConstants.Policy.REVISION_NUMBER);
assertThat(actualJson).isEqualTo(KNOWN_COMPOSITE_COMPOSITE_STATUS_INFO_JSON);
assertThat(underTest.props(null, null, false)).isNotNull();
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(expected);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(jsonObject.getValue(DittoHeaderDefinition.TIMEOUT.getKey())) .contains(JsonValue.of(durationAmountSeconds * 1000 + "ms"));
assertThat(underTest.build()).isEqualTo(headerMap);
assertThat(deserialized) .isEqualTo(original);
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V1);
assertThat(newDeleteFeaturePropertiesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(underTest.toLong()).isEqualTo(DEFAULT_VALUE);
assertThat(parsedCommandResponse).isEqualTo(commandResponse);
assertThat(time.toEpochSecond()).isEqualTo(-12 * 60 * 60);
assertThat(underTest).containsExactly(SECOND_IDENTIFIER, THIRD_IDENTIFIER, FIRST_IDENTIFIER);
assertThat(underTest.gt(ACME)) .hasType(SearchFilter.Type.GT) .hasOnlyValue(ACME) .hasStringRepresentation("gt(" + PROPERTY_PATH + ",\\"" + ACME + "\\")");
assertThat(logger.isMuted()).isFalse();
assertThat(newModifyThingLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(searchResult.getItems()).isEqualTo(JsonFactory.newArray(itemsArray)); assertThat(searchResult.getNextPageOffset()).contains(nextPageOffset);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.EQ); assertThat(comparison.getComparisonProperty()).isEqualTo("username"); assertThat(comparison.getComparisonValue()).isNull();
assertThat(underTest).isNullLiteral();
assertThat(underTest.isEntriesSizeGreaterThan(comparisonSize)).isFalse();
assertThat(validator.canValidate(EntityTagMatchers.class)).isTrue();
assertThat(truncatedHeaders).isEqualTo(expected);
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(exception).hasMessageContaining("not valid");
assertThat(oldValue).isNull();
assertThat(info).hasEmptyBytePayload();
assertThat(function.apply(EMPTY_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).isEmpty();
assertThat(underTest.getSize()).isEqualTo(SIZE);
assertThat(underTest).hasLevelCount(expectedLevelCount);
assertThat(reasonOfFailure).isEqualTo(dre);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.getTimestamp()).contains(OffsetDateTime.parse(TIMESTAMP));
assertThat(thing).hasAttributes(ThingsModelFactory.emptyAttributes());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(jsonInt);
assertThat(underTest).isEqualTo(allKnownHeaders);
assertThat(underTest.mapperOf("test", ctx)).isEmpty();
assertThat(actual.getValue("MongoDB-Service")).isEqualTo(expectedMongoDbServiceConfig);
assertThat(underTest.getOffset()).isEqualTo(KNOWN_OFFSET);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(actual).contains(knownAcknowledgementsGetEntityJsonRepresentation);
assertThat(commandFromJson).isEqualTo(underTest);
assertThat(underTest.isValid()).isFalse();
assertThat(underTestCreated).isNotNull();
assertThat(underTest).isNotNull();
assertThat(underTest.getMetadataHeadersToPut()).isEmpty();
assertThat(underTest.answer()).isNotNull();
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(underTest.toJsonString()).isEqualTo(expectedJson);
assertThat(underTest.length()).isEqualTo(KNOWN_TYPE_VALUE.length());
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(twinCommand.getFeatureId());
assertThat(thing).hasNoAttributes();
assertThat( UNDER_TEST.resolve("fn:default(\'constant\')", PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER)) .contains(HEADER_VAL);
assertThat(reconstructed).isEqualTo(underTest);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(mappingResult).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(substituted).isEqualTo(REPLACED_1);
assertThat(response).isEqualTo(expectedCommandWithPlaceholders);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(reconstructed).isEqualTo(underTest);
assertThat(defined).isFalse();
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"4711\\""))).isFalse(); assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"foo\\""))).isFalse();
assertThat(hasChild).as("Has child \'%s\'", child).isTrue();
assertThat(mappedAdaptable).isEqualTo(jsonifiableInputAdaptable);
assertThat(underTest.apply(key, value)).isEqualTo(value);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.apply(key, value)).isEqualTo(value);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveFeaturePropertyTwinCommand.toString());
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V2) .hasId(THING_ID) .hasPolicyId(POLICY_ID) .hasAttributes(ATTRIBUTES) .hasDefinition(newDefinition) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(function.getName()).isEqualTo("default");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(jsonBoolean);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.apply(command)).isEqualTo(expectedCommand);
assertThat(underTest.like(BOSCH)) .hasType(SearchFilter.Type.LIKE) .hasOnlyValue(BOSCH) .hasStringRepresentation("like(" + PROPERTY_PATH + ",\\"" + BOSCH + "\\")");
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(0L);
assertThat(underTest.isMarkedAs(schemaVersionMarkerMock, regularTypeMarkerMock)).isTrue();
assertThat((CharSequence) thingIdOne).isSameAs(thingIdTwo);
assertThat(underTest.isObject()).isTrue();
assertThat(field.getName()).isEqualTo(name); assertThat(field.getValue()).isEqualTo(value);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveThingTwinCommand.toString());
assertThat(UNDER_TEST.resolve("fn:filter(\'false\',\'eq\',\'true\')", PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER)) .isEmpty();
assertThat(escaped).isEqualTo(expected);
assertThat(underTest).isNumber(); assertThat(underTest.asLong()).isEqualTo(longValue);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.eq(null)) .hasType(SearchFilter.Type.EQ) .hasOnlyValue(JsonValue.nullLiteral()) .hasStringRepresentation("eq(" + PROPERTY_PATH + ",null)");
assertThat(mapped).isEqualTo(stringValue);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest).isNotNull();
assertThat(UNDER_TEST.resolve(POLICY_ID, "policy_id")).isEmpty();
assertThat(actual).isEqualTo(MEASUREMENT_JSON);
assertThat(underTest).isEqualTo(initialHeaders);
assertThat((CharSequence) msg1.getConnectionEntityId()).isEqualTo(connectionId1); assertThat((CharSequence) msg2.getConnectionEntityId()).isEqualTo(connectionId3);
assertThat(underTest.getActorName()).isEqualTo(KafkaPublisherActor.ACTOR_NAME);
assertThat(applicable).isTrue();
assertThat(snapshot.getSubscribers(Arrays.asList("1", "2", "3"))).containsExactlyInAnyOrder(ACTOR1, ACTOR2); assertThat(underTest.subscriberToTopic.size()).isEqualTo(2); assertThat(underTest.topicToData.size()).isEqualTo(6); assertThat(snapshot).isEqualTo(getVennDiagram().snapshot()); assertThat(snapshot).isNotEqualTo(underTest.snapshot());
assertThat((CharSequence) migratedConnection.getId()).isEqualTo(ID); assertThat(migratedConnection.getName()).contains(NAME); assertThat((Object) migratedConnection.getConnectionType()).isEqualTo(TYPE); assertThat(migratedConnection.getUri()).isEqualTo(URI);
assertThat(mappingResult.get(0).getPayload().getPath().getFeatureId()) .contains(individualFeatureId);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(NAMESPACE);
assertThat(thing).hasModified(TestConstants.Thing.MODIFIED);
assertThat(underTest.isValid(getConnectionWithSaslMechanism(null))).isTrue();
assertThat(BinaryToHexConverter.toHexString(allocate)).isEqualTo(CborTestUtils.serializeToHexString(testValue));
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getAttributePointer()).isEqualTo(twinCommand.getAttributePointer());
assertThat(logger1).isNotNull() .isEqualTo(logger2) .isSameAs(logger2);
assertThat(actualBasicDocument).isEqualTo(expectedBsonDocument);
assertThat(underTest.mapperOf("test", ctx)).isPresent();
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_FIELD_SELECTION);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(newFeatures) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(newAcl) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(parsed).isEqualTo(expected);
assertThat(underTest.apply(command)).isEqualTo(expected);
assertThat(recordedValues.length).isEqualTo(1); assertThat(recordedValues[0]).isCloseTo(4711L, Percentage.withPercentage(1));
assertThat(underTest.getDirection()).isEqualTo(DIRECTION);
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(thing).hasLifecycle(TestConstants.Thing.LIFECYCLE);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasNotAttribute(attributePath) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(headerInvalidException.getMessage()) .isEqualTo("The value \'theValue\' of the header \'theHeaderName\' is not a valid theExpectedType."); assertThat(headerInvalidException.getDescription()) .hasValue("Verify that the value of the header \'theHeaderName\' is a valid \'theExpectedType\' " + "and try again.");
assertThat(UNDER_TEST.resolve(POLICY_ID, "namespace")).contains(NAMESPACE);
assertThat(underTest.toString()).isEqualTo(expected);
assertThat(BinaryToHexConverter.toHexString(new ByteArrayInputStream(TEST_VECTOR))).isEqualTo(EXPECTED_STRING);
assertThat(dittoHeaders).isEqualTo(headerMap);
assertThat(function.getName()).isEqualTo("upper");
assertThat(reasonOfFailure).isEqualTo(dre);
assertThat(underTest.asObject()).isEqualTo(JsonFactory.nullObject());
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(appliedCommand.getDittoHeaders()).isEqualTo(expectedHeaders); assertThat(appliedCommand).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(ifMatchPreconditionHeader.getValue()).isEqualTo("\\"4711\\"");
assertThat(new LogicalNode("and").toString()).startsWith("LogicalNode ");
assertThat(connectionFailure1.getOrigin()).contains(origin.ref()); assertThat(connectionFailure1.getFailure().cause()).isSameAs(exception);
assertThat(underTest.getErrorCode()).isEqualTo(JsonParseException.ERROR_CODE);
assertThat(thing.getEntityId()).isPresent();
assertThat(newContext).isEqualTo(expectedContext);
assertThat(info) .hasThingId(thingId) .hasCorrelationId(correlationId) .hasTimestampBetween(before, after);
assertThat(actual).isEqualTo(expected);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "action-subject")).contains(KNOWN_ACTION.getName());
assertThat(authenticationResult.isSuccess()).isFalse();
assertThat(actual).containsExactlyElementsOf(expectedConstants);
assertThat(outboundSignal).isInstanceOf(OutboundSignal.class);
assertThat(newModifyAttributeLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(thing.getPolicyEntityId()).isEmpty();
assertThat(underTest.apply(headerDefinition.getKey(), "")).isNull();
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getAttributes()).isEqualTo(twinCommand.getAttributes());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(info) .hasNoThingId() .hasDefaultCorrelationId() .hasTimestampBetween(before, after);
assertThat(contains).isTrue();
assertThat(fieldExpression).isEqualTo(expected);
assertThat(actualJsonValue).isEqualTo(expectedJsonObject);
assertThat(copy).isEqualTo(TestConstants.Thing.POLICY_INVALID_EXCEPTION);
assertThat(underTest).isSameAs(LiveCommandFactory.getInstance());
assertThat(function.apply(KNOWN_INPUT, "()", expressionResolver)).contains(LOWER_CASE);
assertThat(Objects.equals(underTest.getValueType(), valueType)).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual.toJsonString()).isEqualTo("{}");
assertEquals("foo", UriEncoding.encodePath("foo")); assertEquals("/top/sub", UriEncoding.encodePath("/top/sub")); assertEquals("!%22%23$%25&\'()*+,/:;=%3F@%5B%5C%5D%7B%7C%7D%20%C3%A4aZ0", UriEncoding.encodePath(MANY_DIFFERENT_CHARS));
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(underTest.getGranted()).isEqualTo(grantedMap);
assertThat(thing).hasFeatures(ThingsModelFactory.nullFeatures());
assertThat(newEntity).isEqualTo(expectedEntity);
assertEquals("foo", UriEncoding.encodePathSegment("foo")); assertEquals("%2Ftop%2Fsub", UriEncoding.encodePathSegment("/top/sub")); assertEquals("!%22%23$%25&\'()*+,%2F:;=%3F@%5B%5C%5D%7B%7C%7D%20%C3%A4aZ0", UriEncoding.encodePathSegment(MANY_DIFFERENT_CHARS));
assertThat(result).isEqualTo(testValue);
assertThat(underTest.answer()).isNotNull();
assertThat(fieldExpression).isEqualTo(expected);
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasNoLifecycle() .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(mappingResult.get(0).getPayload().getPath().getFeatureId()) .contains(DEFAULT_FEATURE_ID);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(and.getName()).isEqualTo("and"); assertThat(and.getType()).isEqualTo(LogicalNode.Type.AND); assertThat(and.getChildren().size()).isEqualTo(3);
assertThat(result).hasSize(1); assertThat(externalMessage.getBytePayload()).isEmpty(); assertThat(externalMessage.getTextPayload()).isEmpty(); assertThat(externalMessage.getHeaders()).containsAllEntriesOf(message.getHeaders());
assertThat(adaptables).hasSize(1); assertThat(adaptables.get(0).getPayload().getValue()).contains(JsonObject.of(payload)); assertThat(signal).isInstanceOf(SendThingMessage.class); assertThat(sendThingMessage.getEntityId().toString()).isEqualTo("thing:id"); assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()).isEqualTo(JsonObject.of(payload));
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON_CREATED);
assertThat(hasPermissions).isTrue();
assertThat(userInformation.toJson()).isEqualTo(json);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat((CharSequence) underTest.getThingEntityId()).isEqualTo(THING_ID);
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(value);
assertThat(sut.getName()).isEqualTo("TestTimer");
assertThat(ifNoneMatchPreconditionHeader.getValue()).isEqualTo("\\"4711\\"");
assertThat(defined).isTrue();
assertThat(thing).isEqualTo(TestConstants.Thing.THING_V1);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(mapped).isNullLiteral().isEmpty();
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(underTest).isBoolean(); assertThat(underTest.asBoolean()).isFalse();
assertThat(response.getDittoHeaders()).isEqualTo(DITTO_HEADERS); assertThat(response.getEntity()).isEqualTo(USER_INFORMATION.toJson());
assertThat(actual).isEqualTo(jsonDouble);
assertThat(underTestUpdated).isNotNull();
assertThat(parsed).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.getStatusCode()).contains(STATUS_CODE);
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V2);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(newAcl) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.getName()).isEqualTo("filter");
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).contains(KNOWN_VALUE); assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(randomThingId.getNamespace()).isEmpty();
assertThat(underTest.getStatusCode()).isEqualTo(cause.getStatusCode()); assertThat(underTest.getDescription().orElseThrow(() -> new AssertionError("Expect description"))) .contains(cause.getErrorCode()) .contains(cause.getMessage()) .contains(cause.getDescription().orElse("-----NOT POSSIBLE-----"));
assertThat(underTest.answer()).isNotNull();
assertThat(result) .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(commandResponse));
assertThat(newRetrieveAttributesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(expiredJsonWebToken.isExpired()).isEqualTo(true);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(withoutFluxCapacitor).hasNotFeatureWithId(FLUX_CAPACITOR_ID);
assertThat(indexLengthRestrictionEnforcer.enforce(JsonPointer.of(key), JsonValue.of(value))) .isEmpty();
assertThat(retrieveThings).isEqualTo(retrieveThings2);
assertThat(underTest.isEmpty()).isTrue();
assertThat(applicable).isFalse();
assertThat(underTest.isApplicable(connection)).isFalse();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toJson()).isEqualTo(expectedJson);
assertThat(underTest).isObject(); assertThat(underTest).isEmpty(); assertThat(underTest).isNotNullLiteral();
assertThat(signal).isInstanceOf(ModifyFeature.class); assertThat(getDefinitionIdentifier(modifyFeature)).contains(ConnectionStatusMessageMapper.FEATURE_DEFINITION); assertThat(extractProperty(modifyFeature, FEATURE_PROPERTY_READY_SINCE)).contains( JsonValue.of(CREATION_TIME.toString())); assertThat(extractProperty(modifyFeature, FEATURE_PROPERTY_READY_UNTIL)).contains( JsonValue.of(EXPECTED_READY_UNTIL_IN_DISTANT_FUTURE));
assertThat(underTest.isMarkedAs(schemaVersionMarkerMock, regularTypeMarkerMock)).isFalse();
assertThat(function.apply(EMPTY_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).isEmpty();
assertThat(filters).hasSize(4);
assertThat(logs) .hasSize(SUCCESS_CAPACITY + FAILURE_CAPACITY);
assertThat(thing).hasNoAcl();
assertThat(UNDER_TEST.resolve("fn:default(\'constant\')", PipelineElement.unresolved(), EXPRESSION_RESOLVER)) .contains("constant");
assertThat(sinkProbe.expectError()).isInstanceOf(InvalidRqlExpressionException.class);
assertThat(underTest).isNotNull();
assertThat(thing).hasNoFeatures();
assertThat(adaptables).hasSize(1); assertThat(signal).isInstanceOf(SendThingMessage.class); assertThat(sendThingMessage.getEntityId().toString()).isEqualTo("thing:id"); assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()).isEqualTo(payload);
assertThat(newModifyFeatureDefinitionLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(DittoAuthorizationContextType.contains(authorizationContextType)).isTrue();
assertThat(existsNode.getProperty()).isEqualTo("propertyName");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(result).hasMessageContaining(differentType.toString()); assertThat(result.getStatusCode()).isEqualTo(HttpStatusCode.UNSUPPORTED_MEDIA_TYPE);
assertThat(underTest.isApplicable(defaultConnection)).isTrue();
assertThat(underTest.toString()) .contains("pointer") .contains("valueType") .contains("double") .contains("checkJavaTypeFunction") .contains("mappingFunction") .contains("markers");
assertThat(underTest.charAt(charIndex)).isEqualTo(KNOWN_TYPE_VALUE.charAt(charIndex));
assertThat(contains).isTrue();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.GT); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasNoFeatures() .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(pointerLocation).isSameAs(PointerLocation.ABOVE);
assertThat(parameterResolver.apply(params, expressionResolver, DUMMY)).contains(KNOWN_VALUE);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(thing).hasNoAcl();
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty();
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasNoCreated();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(POLICY_ID, "namespace")).contains(NAMESPACE);
assertThat(underTest.toJson(FieldType.HIDDEN)).isEmpty();
assertThat(publicKeyFromEndpoint).isNotEmpty(); assertThat(publicKeyFromCache).contains(publicKeyFromEndpoint.get()); assertThat(publicKeyFromCache).isNotEmpty();
assertThat(result).hasSize(1); assertThat(result.get(0).getBytePayload()).isEmpty(); assertThat(result.get(0).getTextPayload()).contains("hello world"); assertThat(result.get(0).getHeaders()).containsExactlyEntriesOf(message.getHeaders());
assertThat(json).isEqualTo(JSON_MINIMAL_V1);
assertThat(UNDER_TEST.resolve("fn:filter(\'true\',\'eq\',\'true\')", PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER)) .contains(HEADER_VAL);
assertThat(policy) .hasId(POLICY_ID) .hasNamespace(POLICY_NS);
assertThat(userInformation.getDefaultSubject()).contains(defaultSubjectId); assertThat(userInformation.getSubjects()).containsExactly(defaultSubjectId, otherSubjectId);
assertThat(newRetrieveThingLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(thing).hasNotAttribute(ATTRIBUTE_PATH);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(underTest.getType()) .contains(underTest.getDittoHeaders().toString()) .contains(underTest.getCategory().toString()) .contains(knownShutdownReason.toString());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.getId()).isEqualTo(underTest.getNamespace());
assertThat(DefaultConnectionMonitor.builder(counter, logger)).isNotNull();
assertThat(underTest.answer()).isNotNull();
assertThat(exception).hasMessageContaining("validation failed...");
assertThat(sourceWithMapping.getPayloadMapping().getMappings()).containsExactly("mapping");
assertThat(actual).isEqualTo(RESOURCE_STATUS);
assertThat(underTest.ge(value)) .hasType(SearchFilter.Type.GE) .hasOnlyValue(value) .hasStringRepresentation("ge(" + PROPERTY_PATH + "," + value + ")");
assertThat(UNDER_TEST.resolve(POLICY_ID, "name")).contains(NAME);
assertThat(sut.getStartTimeStamp()).isGreaterThan(0);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(permissionSubjectsMap) .isSameAs(underTest) .isEmpty();
assertThat(defined).isTrue();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo(" ");
assertThat(underTest).isNotNull();
assertThat(parameterResolver.apply(params, expressionResolver, DUMMY)).contains(KNOWN_VALUE);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "entityId")).contains(KNOWN_ID);
assertThat(builder).isInstanceOf(MongoQueryBuilder.class);
assertThat(UNDER_TEST.resolve("fn:lower()", PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER)) .contains(HEADER_VAL.toLowerCase());
assertThat(newRetrieveFeaturePropertyLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(json).isEqualTo(JSON_MINIMAL_V2);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(parsedCommandResponse).isEqualTo(commandResponse);
assertThat(underTest.eq(BOSCH)) .hasType(SearchFilter.Type.EQ) .hasOnlyValue(BOSCH) .hasStringRepresentation("eq(" + PROPERTY_PATH + ",\\"" + BOSCH + "\\")");
assertThat((CharSequence) namespacedEntityIdOne).isSameAs(namespacedEntityIdTwo);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ack.getElementId()).isEqualTo(KNOWN_ELEMENT_ID); assertThat(ack.getStatus()).isEqualTo(StreamAck.Status.SUCCESS);
assertThat(underTest).isNumber(); assertThat(underTest.asInt()).isEqualTo(intValue);
assertThat(underTest.add(Permission.WRITE)).isFalse();
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(twinCommand.getFeatureId());
assertThat(substituted).isEqualTo(REPLACED_1);
assertThat(searchResult) .hasNoNextPage() .isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()).isEqualTo(expected);
assertThat(commandFromJson).isEqualTo(underTest);
assertThat(result) .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(commandResponse));
assertThat(ifMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"4711\\""))).isTrue(); assertThat(ifMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"foo\\""))).isTrue();
assertThat(ShutdownReasonFactory.fromJson(jsonObject)).isEqualTo(ShutdownNoReason.INSTANCE);
assertThat(underTest.le(BOSCH)) .hasType(SearchFilter.Type.LE) .hasOnlyValue(BOSCH) .hasStringRepresentation("le(" + PROPERTY_PATH + ",\\"" + BOSCH + "\\")");
assertThat(underTest.ne(null)) .hasType(SearchFilter.Type.NE) .hasOnlyValue(JsonValue.nullLiteral()) .hasStringRepresentation("ne(" + PROPERTY_PATH + ",null)");
assertThat((CharSequence) migratedConnection.getId()).isEqualTo(ID); assertThat(migratedConnection.getName()).contains(NAME); assertThat((Object) migratedConnection.getConnectionType()).isEqualTo(TYPE); assertThat(migratedConnection.getUri()).isEqualTo(URI);
assertThat(validationResult.isValid()).isFalse();
assertThat(modifyAttribute.getType()).isEqualTo(ModifyAttribute.TYPE); assertThat(modifyAttribute.getDittoHeaders().getAuthorizationContext()).isEqualTo( expectedMessageAuthContext);
assertThat(jsonStr).isEqualTo( "{\\"__schemaVersion\\":" + 2 + ",\\"items\\":" + itemsArray + ",\\"nextPageOffset\\":" + nextPageOffset + "}");
assertThat(underTest.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(actual).isEqualTo(SOURCE_JSON_WITH_AUTH_CONTEXT);
assertThat(newDeleteAttributesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(underTest).isBoolean(); assertThat(underTest.asBoolean()).isTrue();
assertThat(underTest).containsExactly(expectedField);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON_REPRESENTATION);
assertThat(underTest.mapperOf("test", ctx)).isEmpty();
assertThat(topicPath.getNamespace()).isEqualTo(NAMESPACE); assertThat(topicPath.getId()).isEqualTo(ID); assertThat(topicPath.getChannel()).isEqualTo(TopicPath.Channel.TWIN); assertThat(topicPath.getGroup()).isEqualTo(TopicPath.Group.THINGS); assertThat(topicPath.getCriterion()).isEqualTo(TopicPath.Criterion.COMMANDS); assertThat(topicPath.getAction()).contains(TopicPath.Action.MODIFY);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(expectUpdateThingResponse(writeModels.get(i).getMetadata().getThingId())) .describedAs("response is failure") .returns(false, UpdateThingResponse::isSuccess); assertThat(message).contains("Acknowledged: PartialSuccess");
assertThat(topicPath.getNamespace()).isEqualTo(NAMESPACE); assertThat(topicPath.getId()).isEqualTo(ID); assertThat(topicPath.getChannel()).isEqualTo(TopicPath.Channel.TWIN); assertThat(topicPath.getGroup()).isEqualTo(TopicPath.Group.THINGS); assertThat(topicPath.getCriterion()).isEqualTo(TopicPath.Criterion.COMMANDS); assertThat(topicPath.getAction()).contains(TopicPath.Action.MODIFY);
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(null)).isTrue();
assertThat(parsed).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(POLICY_ID, "id")).contains(POLICY_ID.toString());
assertThat(connectionFailure1.getOrigin()).contains(origin.ref()); assertThat(connectionFailure1.getFailure().cause()).isSameAs(exception);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(grantRevokeIndex).isEqualTo(expectedGrantRevokeIndex);
assertThat(json).isEqualTo(JSON_MINIMAL_V2);
assertThat(underTest.apply(key, value)).isEqualTo(value);
assertThat(underTest.ge(ACME)) .hasType(SearchFilter.Type.GE) .hasOnlyValue(ACME) .hasStringRepresentation("ge(" + PROPERTY_PATH + ",\\"" + ACME + "\\")");
assertThat(underTest.toString()).isEqualTo(expected);
assertThat(thing).hasDefinition(TestConstants.Thing.DEFINITION);
assertThat(pointerLocation).isSameAs(PointerLocation.SAME);
assertThat(oldValue).isEqualTo(weightedSubjectId);
assertThat(underTest.getKey()).isEqualTo(key);
assertThat(underTest.getDescription()).contains(description);
assertThat(underTest.isBoolean()).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ifNoneMatchPreconditionHeader.get().getKey()).isEqualTo("if-none-match"); assertThat(ifNoneMatchPreconditionHeader.get().getValue()).isEqualTo("*");
assertThat(underTest).containsExactly(eddard, cersei, robert, john, hodor);
assertThat(defined).isFalse();
assertThat(UNDER_TEST.resolve(THING_ID, "name")).contains(NAME);
assertThat(thing.getDefinition()).isEmpty();
assertThat(sut.getDuration().toNanos()).isGreaterThan(0);
assertThat(info).hasPayload(expectedTextPayload);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(info).hasPayload(expectedBase64Payload);
assertThat(actual).contains(knownAcknowledgementsGetEntityJsonRepresentation);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(NAMESPACE);
assertThat(hasPermissions).isFalse();
assertThat(parsed).isEqualTo(expected);
assertThat(searchResult).isEqualTo(searchResultBuilder.build());
assertThat(actual.isEmpty()).isTrue();
assertThat(actual).isEqualTo(jsonLong);
assertThat(sut.getTotalTime()).isCloseTo(TimeUnit.SECONDS.toNanos(1), Percentage.withPercentage(1)); assertThat(sut.getTotalTime()).isEqualTo(0);
assertThat(underTest.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(ImmutableSourceAddressPlaceholder.INSTANCE.resolve(SOME_MQTT_TOPIC, "address")).contains(SOME_MQTT_TOPIC);
assertThat(contains).isTrue();
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V2);
assertThat(underTest.getPointer()).isEqualTo(KNOWN_JSON_POINTER);
assertThat(thing) .hasNoId() .hasNoNamespace() .hasNoAcl() .hasNoAttributes() .hasNoFeatures() .hasNoRevision() .hasNoLifecycle() .hasNoModified();
assertThat(connected.getOrigin()).contains(origin.ref());
assertThat(newDeleteFeaturePropertyLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(mappingResult).isEmpty();
assertThat(mappingResult).isEmpty();
assertThat(underTest.answer()).isNotNull();
assertThat(fieldSelector).isEmpty();
assertThat(streamThings.getSortValues()).contains(JsonArray.of(JsonValue.of(lastEventId)));
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("abc\\nyz");
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(underTest.getFeatureId()).contains(FEATURE_ID);
assertThat(underTest.getRevoked()).isEqualTo(revokedMap);
assertThat(underTest.isMarkedAs(schemaVersionMarkerMock, regularTypeMarkerMock)).isTrue();
assertThat(function.apply(UNMATCHING_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).isEmpty();
assertThat(underTest.toJson()).isEqualTo(expectedJson);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT1, "subject")).contains(KNOWN_SUBJECT);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(thing).hasNotAttribute(ATTRIBUTE_PATH);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_FIELD_SELECTION);
assertThat(underTest.mapperOf("test", ctx)).isEmpty();
assertThat(underTest.mapValue(nullLiteral)).isNull();
assertThat(message).isNotNull();
assertThat(info).hasPayload(textPayload);
assertThat(searchResult) .hasNoNextPage() .isEmpty();
assertThat(jsonString.isString()).isTrue(); assertThat(jsonString.toString()).isEqualTo(expectedJsonString);
assertThat(actual).isEqualTo(KNOWN_MESSAGE);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_NULL_DEFINITION);
assertThat(builder).isInstanceOf(MongoQueryBuilder.class);
assertThat(underTest.in(one, two, three)) .hasType(SearchFilter.Type.IN) .hasOnlyValue(one, two, three) .hasStringRepresentation( "in(" + PROPERTY_PATH + "," + one + "," + two + "," + three + ")");
assertThat((Object) unchangedFeatures).isSameAs(underTest);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(underTest) .hasStringRepresentation( "in(" + THING_ID_PATH + ",\\"foo\\",\\"bar\\",\\"baz\\")");
assertThat(actualStrategyClasses).hasSameElementsAs(expectedStrategyClasses);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasNoAttributes() .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.getSize()).isZero();
assertThat(thing).hasModified(TestConstants.Thing.MODIFIED);
assertThat(thing) .hasId(THING_ID) .hasNoAcl() .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(actual).isEqualTo(expected);
assertThat(underTest.getSubject()).isEqualTo(SUBJECT);
assertThat(underTest.toString()).isEqualTo("false");
assertThat(underTest.isActiveForConnection(connectionId)).isFalse(); assertThat(underTest.isActiveForConnection(connectionId)).isTrue(); assertThat(underTest.isActiveForConnection(connectionId)).isFalse();
assertThat(function.apply(input, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(underTest.isValid(getConnectionWithSaslMechanism(KNOWN_PLAIN_SASL_MECHANISM))).isTrue(); assertThat(underTest.isValid(getConnectionWithSaslMechanism(KNOWN_SHA256_SASL_MECHANISM))).isTrue(); assertThat(underTest.isValid(getConnectionWithSaslMechanism(KNOWN_SHA512_SASL_MECHANISM))).isTrue();
assertThat(adaptables).hasSize(1); assertThat(signal).isInstanceOf(SendFeatureMessageResponse.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatusCode.IM_A_TEAPOT); assertThat(response.getEntityId().toString()).isEqualTo("thing:id"); assertThat(response.getFeatureId()).isEqualTo("accelerometer"); assertThat(response.getMessage().getPayload().orElseThrow()).isEqualTo(JsonObject.of(payload));
assertThat(fieldExpression).isEqualTo(expected);
assertThat(sut.get()).isEqualTo(5L); assertThat(sut.get()).isEqualTo(4L);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "action")).contains(KNOWN_ACTION.getName());
assertThat(topicPath.getNamespace()).isEqualTo(NAMESPACE); assertThat(topicPath.getId()).isEqualTo(ID); assertThat(topicPath.getChannel()).isEqualTo(TopicPath.Channel.NONE); assertThat(topicPath.getGroup()).isEqualTo(TopicPath.Group.POLICIES); assertThat(topicPath.getCriterion()).isEqualTo(TopicPath.Criterion.COMMANDS); assertThat(topicPath.getAction()).contains(TopicPath.Action.MODIFY);
assertThat(thing).hasAttribute(ATTRIBUTE_PATH, ATTRIBUTE_VALUE);
assertThat(result.getDittoHeaders()).isEqualTo(dittoHeaders);
assertThat(underTest).isNotNull(); assertThat((CharSequence) underTest.getEntityId()).isEqualTo(TestConstants.Thing.THING_ID);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.createActorName()).isEqualTo(createExpectedName("a")); assertThat(underTest.createActorName()).isEqualTo(createExpectedName("b"));
assertThat(underTest).hasPath(THING_ID_PATH);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(and.getName()).isEqualTo("or"); assertThat(and.getType()).isEqualTo(LogicalNode.Type.OR); assertThat(and.getChildren().size()).isEqualTo(3);
assertThat(unmappedOutboundSignal.getSource()).isEqualTo(attributeModified);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(RESOURCE_STATUS_JSON);
assertThat(indexLengthRestrictionEnforcer.enforce(JsonPointer.of(key), JsonValue.of(value))) .contains(JsonValue.of(value));
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveAttributesTwinCommand.toString());
assertThat(fieldExpression).isEqualTo(expected);
assertThat(result).isEqualTo(testValue);
assertThat(dittoMappers).hasSize(1); assertThat(dittoMapper).isInstanceOf(WrappingMessageMapper.class); assertThat(dittoMapper.getId()).isEqualTo("Ditto"); assertThat(((WrappingMessageMapper) dittoMapper).getDelegate()).isInstanceOf(DittoMessageMapper.class);
assertThat(createdException.getMessage()).isEqualTo(expectedMessage);
assertThat(sut.get()).isEqualTo(5L); assertThat(sut.get()).isEqualTo(6L);
assertThat(json).isEqualTo(JSON_MINIMAL);
assertThat(key1).isEqualTo(key2); assertThat(key1).isEqualTo(key3); assertThat(key1).isEqualTo(key4);
assertThat(searchResult) .hasNoNextPage() .isEmpty();
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON_CREATED);
assertEquals("foo", UriEncoding.encodeQuery("foo", RFC3986)); assertEquals("foo=bar/%2B&baz=1", UriEncoding.encodeQuery("foo=bar/+&baz=1", RFC3986)); assertEquals("!%22%23$%25&\'()*%2B,/:;=?@%5B%5C%5D%7B%7C%7D%20%C3%A4aZ0", UriEncoding.encodeQuery(MANY_DIFFERENT_CHARS, RFC3986));
assertThat(sut.getName()).isEqualTo("TestTimer");
assertThat(referencePlaceholder).isPresent(); assertThat(referencePlaceholder.get().getReferencedEntityId().toString()).isEqualTo(THING_ID.toString()); assertThat(referencePlaceholder.get().getReferencedEntityType()).isEqualTo( ReferencePlaceholder.ReferencedEntityType.THINGS);
assertThat(actual).isInstanceOf(ThingEvent.class); assertThat((CharSequence) event.getThingEntityId()).isEqualTo(TestConstants.Thing.THING_ID); assertThat(event.getName()).isEqualTo(AttributesDeleted.NAME); assertThat(event.getType()).isEqualTo(AttributesDeleted.TYPE); assertThat(event).isInstanceOf(AttributesDeleted.class); assertThat((CharSequence) attributesDeleted.getThingEntityId()).isEqualTo(TestConstants.Thing.THING_ID);
assertThat(dittoHeaders.getAuthorizationContext()).isEqualTo(authorizationContextWithDuplicates); assertThat(dittoHeaders.get(DittoHeaderDefinition.AUTHORIZATION_CONTEXT.getKey())) .isEqualTo(authorizationContextWithoutDuplicates.toJsonString());
assertThat(underTest.exists()) .hasType(SearchFilter.Type.EXISTS) .hasNoValue() .hasStringRepresentation("exists(" + PROPERTY_PATH + ")");
assertThat(messageHeaders.getFeatureId()).contains(FEATURE_ID);
assertThat(UNDER_TEST.resolve(POLICY_ID, "policy_id")).isEmpty();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo(" ");
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(properties.toJsonString()).isEqualTo("{}");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.createMessageMapperInstance("test")).isPresent();
assertThat(PurgeNamespaceReason.fromJson(knownJsonRepresentation)).isEqualTo(underTest);
assertThat(authenticationResult.isSuccess()).isTrue();
assertThat(topicPath.getNamespace()).isEqualTo(NAMESPACE); assertThat(topicPath.getId()).isEqualTo(TopicPath.ID_PLACEHOLDER); assertThat(topicPath.getChannel()).isEqualTo(TopicPath.Channel.TWIN); assertThat(topicPath.getGroup()).isEqualTo(TopicPath.Group.THINGS); assertThat(topicPath.getCriterion()).isEqualTo(TopicPath.Criterion.COMMANDS); assertThat(topicPath.getAction()).contains(TopicPath.Action.MODIFY);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty(); assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty();
assertThat(correlationIdOfAdjustedCommand).isEqualTo(correlationIdFromCommand); assertThat(correlationIdOfAdjustedCommand).isNotEqualTo(getCorrelationId(underTest));
assertThat(underTest).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(json).isEqualTo(JSON_MINIMAL_V2);
assertThat(ifMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"baz\\""))).isFalse();
assertThat(firstObtainedInstance).isSameAs(secondObtainedInstance);
assertThat(Shutdown.fromJson(knownJsonRepresentation, dittoHeaders)).isEqualTo(underTest);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("true");
assertThat(fooMapper).isInstanceOf(WrappingMessageMapper.class); assertThat(((WrappingMessageMapper) fooMapper).getDelegate()).isInstanceOf(MockMapper.class); assertThat(defaultMapper).isInstanceOf(WrappingMessageMapper.class); assertThat(((WrappingMessageMapper) defaultMapper).getDelegate()).isInstanceOf(DittoMessageMapper.class);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(newRetrieveAttributeLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.isEntriesSizeGreaterThan(0)).isFalse();
assertThat(underTest.getCount()).isEqualTo(KNOWN_COUNT);
assertThat(underTest.apply(command)).isEqualTo(expectedCommand);
assertThat(actual).isEqualTo(METRIC_JSON);
assertThat(thing).hasFeatures(ThingsModelFactory.emptyFeatures());
assertThat(actual).isEqualTo(ADDRESS_METRIC);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "foo")).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest).containsExactly(FIRST_IDENTIFIER, THIRD_IDENTIFIER, SECOND_IDENTIFIER);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(jsonKeyIterator).toIterable().containsExactlyElementsOf(expectedJsonKeys);
assertThat(ConnectivityHeaders.isHeadersDebugLogEnabled(headers("HEADER"))).isTrue();
assertThat(info).hasEmptyTextPayload();
assertThat(thing).hasAttributes(ThingsModelFactory.nullAttributes());
assertThat(stringResolver.apply(stringSingle, expressionResolver, DUMMY)).contains(KNOWN_VALUE); assertThat(stringResolver.apply(stringDouble, expressionResolver, DUMMY)).contains(KNOWN_VALUE);
assertThat(underTest) .hasType(SearchFilter.Type.AND) .containsAmountOfFilters(4) .containsOnlyFilter(searchFilterMock);
assertThat(messageHeaders.getStatusCode()).contains(HttpStatusCode.NOT_FOUND);
assertThat(jsonValue).isEqualTo(KNOWN_JSON);
assertThat(mergedObject).isEqualTo(JsonFactory.nullObject());
assertThat(ConnectivityHeaders.isHeadersDebugLogEnabled(DittoHeaders.empty())).isTrue(); assertThat(ConnectivityHeaders.isHeadersDebugLogEnabled(headers("ALL"))).isTrue();
assertThat(actual).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(query.getCriteria()).isEqualTo(KNOWN_CRIT);
assertThat(newModifyFeatureLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITHOUT_REVISION);
assertThat(actualSubjectId).isEqualTo(subjectId);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty(); assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(jsonObject).isEqualTo(KNOWN_JSON);
assertThat(authenticationResult.isSuccess()).isTrue();
assertThat(underTest.get("nonExisting")).isNull();
assertThat(underTest) .hasType(SearchFilter.Type.OR) .containsAmountOfFilters(4) .containsOnlyFilter(searchFilterMock);
assertThat(underTest.answer()).isNotNull();
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"bar\\""))).isFalse();
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(EMPTY_FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.answer()).isNotNull();
assertThat(time.toEpochSecond()).isEqualTo(-12 * 60 * 60);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(rawMessage.findContentType()).contains(DittoConstants.DITTO_PROTOCOL_CONTENT_TYPE); assertThat(rawMessage.findHeader(HEADER_CORRELATION_ID)).contains(correlationId); assertThat(rawMessage.isTextMessage()).isTrue();
assertThat(function.apply(KNOWN_INPUT, "()", expressionResolver)).contains(UPPER_CASE);
assertThat(result) .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(acknowledgement));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(jwtSubjectIssuersConfig.getConfigItem(googleItem.getIssuer())).contains(googleItem); assertThat(jwtSubjectIssuersConfig.getConfigItem(additionalItem.getIssuer())).contains(additionalItem);
assertThat(underTest.ne(value)) .hasType(SearchFilter.Type.NE) .hasOnlyValue(value) .hasStringRepresentation("ne(" + PROPERTY_PATH + "," + value + ")");
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(sut.isRunning()).isTrue(); assertThat(sut.isRunning()).isFalse();
assertThat(info).hasHeaders(headers);
assertThat(underTestCreated).isNotNull();
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON .remove(Event.JsonFields.ID.getPointer()) .set(Event.JsonFields.TYPE, AclEntryCreated.TYPE));
assertThat(instance.getTypes()).contains(JsonTypeNotParsableException.ERROR_CODE);
assertThat(ConnectivityHeaders.isHeadersDebugLogEnabled(headers("OFF"))).isFalse();
assertThat(adaptables).isEmpty();
assertThat(DefaultMetadataHeaders.parseMetadataHeaders("")).isEmpty();
assertThat(actualExternalMessages).isEqualTo(expectedExternalMessages);
assertThat(UNDER_TEST.resolve(String.format("fn:filter(thing:id,\'eq\',\'%s\')", THING_ID.toString()), PipelineElement.resolved(HEADER_VAL), EXPRESSION_RESOLVER)) .contains(HEADER_VAL);
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasNoRevision() .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(info) .hasNoThingId() .hasCorrelationId(correlationId) .hasTimestampBetween(before, after);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(and.getName()).isEqualTo("not"); assertThat(and.getType()).isEqualTo(LogicalNode.Type.NOT); assertThat(and.getChildren().size()).isEqualTo(1);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(jsonObject).isEqualTo(KNOWN_JSON);
assertThat(underTest) .withType(retrieveFeatureTwinCommand.getType()) .withDittoHeaders(retrieveFeatureTwinCommand.getDittoHeaders()) .withId(retrieveFeatureTwinCommand.getThingEntityId()) .withManifest(retrieveFeatureTwinCommand.getManifest()) .withResourcePath(retrieveFeatureTwinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(retrieveFeatureTwinCommand.getFeatureId());
assertThat(result).isEqualTo(expectedResult);
assertThat(thing).hasRevision(TestConstants.Thing.REVISION);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasNoFeatures() .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.resolveAsPipelineElement("header:unknown")) .isEmpty(); assertThat(underTest.resolveAsPipelineElement("fn:substring-before(\'\')")) .isEmpty();
assertThat(underTest.isMarkedAs(regularTypeMarkerMock)).isTrue();
assertThat(properties.toJsonString()).isEqualTo("null");
assertThat(pointerLocation).isSameAs(PointerLocation.DIFFERENT);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(knownNamespace);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(firstObtainedInstance).isSameAs(secondObtainedInstance);
assertThat(configItem).hasValue(JWT_SUBJECT_ISSUER_CONFIG_GOOGLE);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(SHARDED_MESSAGE_ENVELOPE);
assertThat(fieldExpression).isEqualTo(expected);
assertThat(noParamResolver.test("(thing:id)")).isFalse(); assertThat(noParamResolver.test("(\\"val\\")")).isFalse(); assertThat(noParamResolver.test("(\\\'val\\\')")).isFalse();
assertThat(underTest.contains(TestConstants.Policy.PERMISSION_READ)).isTrue(); assertThat(underTest.contains(TestConstants.Policy.PERMISSION_WRITE)).isTrue(); assertThat(underTest.contains(TestConstants.Policy.PERMISSION_READ, TestConstants.Policy.PERMISSION_WRITE)).isTrue(); assertThat(underTest.contains(TestConstants.Policy.PERMISSION_READ)).isTrue();
assertThat(ifMatchPreconditionHeader.meetsConditionFor(null)).isFalse();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Boolean.class); assertThat(comparison.getComparisonValue()).isEqualTo(false);
assertThat(thing).hasNoFeatures();
assertThat(fieldExpression).isEqualTo(expected);
assertThat(underTest.isEntriesSizeGreaterThan(comparisonSize)).isTrue();
assertThat(appliedCommand.getDittoHeaders()).isEqualTo(expectedHeaders); assertThat(appliedCommand).isEqualTo(expectedCommand);
assertThat(sut.getSegments().keySet()).hasSize(0); assertThat(segments).hasSize(1); assertThat(segments.get("TEST")).isEqualTo(testSegment);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Double.class); assertThat(comparison.getComparisonValue()).isEqualTo(-123.7);
assertThat(thingWithEventApplied).isEqualTo(expected);
assertThat(underTest.subSequence(sequenceStart, sequenceEnd)) .isEqualTo(KNOWN_TYPE_VALUE.subSequence(sequenceStart, sequenceEnd));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(actual).isEqualTo(SHARDED_MESSAGE_ENVELOPE_JSON);
assertThat(parsedCommandResponse).isEqualTo(commandResponse);
assertThat(underTest).isNotNull();
assertThat(manifest).isEqualTo(commandResponse.getType());
assertThat(parameterResolver.apply(params, expressionResolver, DUMMY)).contains(KNOWN_VALUE);
assertThat(result).hasValueSatisfying( resultFuture -> assertThat(resultFuture).isCompletedWithValue(expectedResponse));
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttribute(attributePath, newAttributeValue) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.getType()).isEqualTo(purgeNamespaceType);
assertEquals("foo", UriEncoding.encodeQueryParam("foo", RFC3986)); assertEquals("foo%3Dbar/%2B%26baz%3D1", UriEncoding.encodeQueryParam("foo=bar/+&baz=1", RFC3986)); assertEquals(MANY_DIFFERENT_CHARS_QUERY_PARAM_ENCODED_RFC3986, UriEncoding.encodeQueryParam(MANY_DIFFERENT_CHARS, RFC3986));
assertThat(underTest.mapperOf("some-id", ctx)).isEmpty();
assertThat(parsed).isEqualTo(expected);
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V2);
assertThat(time.getLong(ChronoField.OFFSET_SECONDS)).isEqualTo(3 * 60 * 60 + 59 * 60 + 59);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(firstInstance).isSameAs(secondInstance);
assertThat(features).isEqualTo(expectedFeatures);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(dittoHeaders.toJson()).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(searchResult) .containsExactlyElementsOf(itemsArray) .hasNextPageOffset(nextPageOffset);
assertThat(UNDER_TEST.resolve(THING_ID, "namespace")).contains(NAMESPACE);
assertThat(underTest.toJson(FieldType.HIDDEN)).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.answer()).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "group")).contains(KNOWN_GROUP.getName());
assertThat(disconnected.getOrigin()).contains(origin.ref());
assertThat(disconnected.getOrigin()).contains(origin.ref());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(parameter.blue.isCompatibleOrThrow(parameter.green)).isTrue();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Double.class); assertThat(comparison.getComparisonValue()).isEqualTo(-0.7);
assertThat(policy).hasLabel(END_USER_LABEL); assertThat(policy).hasLabel(SUPPORT_LABEL); assertThat(policyModified).hasLabel(END_USER_LABEL); assertThat(policyModified).doesNotHaveLabel(SUPPORT_LABEL);
assertThat(underTest.isMarkedAs(regularTypeMarkerMock)).isTrue();
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(value);
assertThat(underTest.createMessageMapperInstance("test")).isPresent();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertSame("escapingNotNecessary", KeyEscapeUtil.escape("escapingNotNecessary")); assertEquals("~1org~2eclipse~2~0ditto", KeyEscapeUtil.escape("$org.eclipse.~ditto"));
assertThat(underTest.getType()).isEqualTo(purgeEntitiesType);
assertThat(jsonifiable).isInstanceOf(ModifyFeatureProperty.class);
assertThat(result).isEqualTo(testValue);
assertThat( ThingsSearchCursor.decode("null", actorSystem) .<Object>map(x -> x) .recover(new PFBuilder<Throwable, Object>().matchAny(x -> x).build()) .runWith(Sink.head(), actorSystem) .toCompletableFuture() .join()) .isInstanceOf(InvalidOptionException.class);
assertThat(jsonValue).isEqualTo(KNOWN_JSON);
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(ImmutablePayload.fromJson(knownJsonRepresentation)).isEqualTo(knownPayload);
assertThat(underTest.apply(command)).isEqualTo(expected);
assertThat(logger.isMuted()).isTrue();
assertThat(json).isEqualTo(JSON_MINIMAL_V1);
assertThat(newModifyFeaturesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(shutdown.toJson()).isEqualTo(expectedJson);
assertThat(underTest.apply(command)).isEqualTo(expected);
assertThat(underTest.isValid( getConnectionWithSaslMechanism(KNOWN_UNSUPPORTED_OAUTHBEARER_SASL_MECHANISM))).isFalse(); assertThat( underTest.isValid(getConnectionWithSaslMechanism(KNOWN_UNSUPPORTED_GSSAPI_SASL_MECHANISM))).isFalse(); assertThat(underTest.isValid(getConnectionWithSaslMechanism(UNKNOWN_SASL_MECHANISM))).isFalse();
assertThat(strategy).isEmpty();
assertThat(underTest.answer()).isNotNull();
assertThat(defined).isFalse();
assertThat(underTest.isValid()).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(copy).isEqualTo(UNDER_TEST);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(newDeleteThingLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(copy).isEqualTo(TestConstants.INVALID_OPTION_EXCEPTION);
assertThat(jsonValue).isEqualTo(KNOWN_JSON);
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getFeatures()).isEqualTo(twinCommand.getFeatures());
assertThat(fieldExpression).isEqualTo(expected);
assertThat(newDeleteFeatureDefinitionLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(underTest).containsOnly( newAclEntry(authSubject, Permission.READ, Permission.WRITE, Permission.ADMINISTRATE));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.getTrustedCertificates()).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat((CharSequence) policyIdOne).isSameAs(policyIdTwo);
assertThat(parsedCommandResponse).isEqualTo(aggregatedDevOpsCommandResponse); assertThat(parsedCommandResponse.toJson()).isEqualTo(responseToJson);
assertThat(underTest).isNotNull();
assertThat(validator.canValidate(JsonArray.class)).isTrue();
assertThat(underTest.answer()).isNotNull();
assertThat(underTest).containsOnly(expected);
assertThat(BinaryToHexConverter.toHexString(ByteBuffer.wrap(TEST_VECTOR))).isEqualTo(EXPECTED_STRING);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(ThingLifecycle.DELETED) .hasRevision(REVISION);
assertThat(thing) .hasId(THING_ID) .hasNoPolicyId() .hasDefinition(DEFINITION) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(filters).hasSize(4);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.EQ); assertThat(comparison.getComparisonProperty()).isEqualTo("username"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "criterion")).contains(KNOWN_CRITERION.getName());
assertThat(adaptables).hasSize(1); assertThat(signal).isInstanceOf(SendThingMessage.class); assertThat(sendThingMessage.getEntityId().toString()).isEqualTo("thing:id"); assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()).isEqualTo(payload);
assertThat(thing).hasFeature(FLUX_CAPACITOR);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat((Long) retrieveConnectionLogsResponse.getConnectionLogs().stream() .map(LogEntry::toJsonString) .map(String::length) .mapToLong(Integer::intValue) .sum()) .isLessThan(LOGGER_CONFIG.maxLogSizeInBytes());
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(sut.getCount()).isEqualTo(0); assertThat(sut.getCount()).isEqualTo(1); assertThat(sut.getCount()).isEqualTo(0);
assertThat(underTest.toString()).isEqualTo(expected);
assertThat(fieldExpression).isEqualTo(expected);
assertThat(ifMatchPreconditionHeader).isPresent(); assertThat(ifMatchPreconditionHeader.get().getKey()).isEqualTo("if-match"); assertThat(ifMatchPreconditionHeader.get().getValue()).isEqualTo("*");
assertThat(searchFilter) .hasType(SearchFilter.Type.NOT) .containsOnlyFilter(searchFilterMock);
assertThat(function.apply(KNOWN_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).contains(EXPECTED_RESULT);
assertThat(underTest.in(foo, bar, baz)) .hasType(SearchFilter.Type.IN) .hasOnlyValue(foo, bar, baz);
assertThat(underTest.getMappers(newPayloadMapping("eclipse"))).containsExactly(defaultMapper);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveThingTwinCommand.toString()) .contains("namespace=null");
assertThat(thing).hasFeature(TestConstants.Feature.FLUX_CAPACITOR);
assertThat(validationResult).extracting(HostValidationResult::isValid).isEqualTo(false); assertThat(exception.getDittoHeaders()).isEqualTo(DITTO_HEADERS); assertThat(exception.getMessage()).contains("The configured host \'ditto\' is invalid");
assertThat(retrieveThingsResponse.getThings()).containsExactlyElementsOf(thingList);
assertThat(actual).isEmpty();
assertThat(firstMappedSignal).isInstanceOf(CreateThing.class); assertThat(createThing.getThing().getEntityId()).isEqualTo(expectedThing.getEntityId()); assertThat(createThing.getThing().getPolicyEntityId()).isEqualTo(expectedThing.getPolicyEntityId());
assertThat(thing).hasFeatures(ThingsModelFactory.nullFeatures());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(monitor.getCounter()).isEqualTo(counter);
assertThat(underTest.isMarkedAs(schemaVersionMarkerMock, regularTypeMarkerMock)).isFalse();
assertThat(newDeleteAttributeLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(thing).hasNotFeatureProperty(FLUX_CAPACITOR_ID, PROPERTY_PATH);
assertThat(sut.get()).isEqualTo(5L); assertThat(sut.get()).isEqualTo(0L);
assertThat(newRetrieveFeatureDefinitionLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(ConnectivityHeaders.isPayloadDebugLogEnabled(DittoHeaders.empty())).isTrue(); assertThat(ConnectivityHeaders.isPayloadDebugLogEnabled(headers("ALL"))).isTrue();
assertThat(actual).isEqualTo(expected);
assertThat(newRetrieveFeatureLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(thing).hasAttributes(TestConstants.Thing.ATTRIBUTES);
assertThat(searchQuery).isNotNull();
assertThat(mappingResult.get(0).getTopicPath().getId()) .isEqualTo(ThingId.of(validHeader.get(HEADER_HONO_DEVICE_ID)).getName());
assertThat(DittoAuthorizationContextType.contains(null)).isFalse();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(validator.canValidate(DittoDuration.class)).isTrue();
assertThat(mapped).isEqualTo(sourceArray);
assertThat(underTest).isArray(); assertThat(underTest).isNotNullLiteral(); assertThat(underTest).isNotEmpty(); assertThat(underTest).hasSize(expectedSize); assertThat(underTest).isNotObject(); assertThat(underTest).contains("one"); assertThat(underTest).contains("two"); assertThat(underTest).contains("three");
assertThat(manifest).isEqualTo(retrieveThing.getType());
assertThat(underTest.answer()).isNotNull();
assertThat(UNDER_TEST.resolve(THING_ID, "thing_id")).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty();
assertThat(DittoAcknowledgementLabel.contains(DittoAcknowledgementLabel.TWIN_PERSISTED)).isTrue();
assertThat(underTest).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(contains).isFalse();
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(expected);
assertThat(thing.getEntityId()).isPresent();
assertThat(thing) .hasNoId() .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest).isNotNull();
assertThat(UNDER_TEST.resolve(HEADERS, "thing_id")).isEmpty();
assertThat(started1.getStartTimeStamp()).isNotEqualTo(started2.getStartTimeStamp());
assertThat(contains).isFalse();
assertThat(result).isEmpty();
assertThat(underTest.isRelevantFor(knownNamespace)).isTrue();
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveAttributeTwinCommand.toString());
assertThat(time.toEpochSecond()).isEqualTo(2287785600L);
assertThat(underTest).isEqualTo(TestConstants.INVALID_OPTION_EXCEPTION);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "namespace")).contains(KNOWN_NAMESPACE);
assertThat(actual).isEqualTo(expected);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Double.class); assertThat(comparison.getComparisonValue()).isEqualTo(123.7);
assertThat(actualJson).isEqualTo(KNOWN_MESSAGE_JSON);
assertThat(underTest.getPointer()).isEqualTo(KNOWN_JSON_POINTER);
assertThat(underTest).isArray(); assertThat(underTest).isEmpty();
assertThat(resolvedParameters.get(0)).contains(firstParameter); assertThat(resolvedParameters.get(1)).contains(secondParameter); assertThat(resolvedParameters.get(2)).contains(thirdParameter);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(servers).containsExactlyInAnyOrder(BOOTSTRAP_SERVERS); assertThat(properties).contains( new AbstractMap.SimpleEntry<>("connections.max.idle.ms", 543210), new AbstractMap.SimpleEntry<>("reconnect.backoff.ms", 500), new AbstractMap.SimpleEntry<>("reconnect.backoff.max.ms", 10000) );
assertThat(mappingResult).isEmpty();
assertThat(noParamResolver.test("()")).isTrue(); assertThat(noParamResolver.test("( )")).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.mapperOf("missing-mapper-id", ctx)).isEmpty();
assertThat(underTest.toLong()).isEqualTo(DEFAULT_LONG_VALUE);
assertThat(knownPayload.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.getMessage()).isNull();
assertThat(UNDER_TEST.resolve("fn:default(\\"constant\\")", PipelineElement.unresolved(), EXPRESSION_RESOLVER)) .contains("constant");
assertThat(Objects.equals(underTest.getValueType(), valueType)).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_EMPTY_PAYLOAD);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(ShutdownReasonFactory.fromJson(shutdownReasonWithUnknownType)).isEqualTo(ShutdownNoReason.INSTANCE);
assertThat(underTest.mapValue(nullLiteral)).isNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_FIELD_SELECTION);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(EMPTY_FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(filterNode.getComparisonType()).isEqualTo( MultiComparisonNode.Type.IN); assertThat(filterNode.getComparisonProperty()).isEqualTo("propertyName"); assertThat(filterNode.getComparisonValue()).isEmpty(); assertThat(filterNode.getComparisonValue().get(0)).isEqualTo("test");
assertThat(underTest.remove(administrate)).isTrue();
assertThat(underTest.isRelevantFor(knownNamespace + "X")).isFalse();
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V2) .hasId(THING_ID) .hasPolicyId(POLICY_ID) .hasAttributes(ATTRIBUTES) .hasDefinition(newDefinition) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(withoutLabel.getLabel()).isEmpty(); assertThat(actual).isEqualTo(expected);
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasNoAttributes() .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasModified(MODIFIED) .hasCreated(CREATED) .hasMetadata(METADATA);
assertThat(sut.getCount()).isEqualTo(1);
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatureProperty(FLUX_CAPACITOR_ID, propertyPath, newPropertyValue) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(response).describedAs("response is failure").returns(false, UpdateThingResponse::isSuccess); assertThat(message).contains("ConsistencyError[indexOutOfBound]");
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(NAMESPACE);
assertThat(dittoHeaders.get(DittoHeaderDefinition.AUTHORIZATION_CONTEXT.getKey())).isEqualTo( expectedWithoutDups);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(underTest).isNumber(); assertThat(underTest.asDouble()).isEqualTo(doubleValue);
assertThat(underTest.getId()).isEqualTo(underTest.getNamespace());
assertThat(dittoRuntimeException).isEqualTo(expectedException);
assertThat(newModifyFeaturePropertiesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(mappingResult).isNotEmpty(); assertThat(signal).isInstanceOf(ModifyFeatureProperty.class); assertThat(modifyFeatureProperty.getPropertyValue()) .isEqualTo(JsonValue.of(CREATION_TIME.toString()));
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(deserialized).isEqualTo(UNDER_TEST);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).containsExactlyElementsOf(expectedConstants);
assertThat(DittoAcknowledgementLabel.contains(acknowledgementLabel)).isFalse();
assertThat(actual).isEqualTo(expected);
assertThat(actual).isEqualTo(knownJsonArray);
assertThat(entityIdFoo.isCompatibleOrThrow(entityIdFoo)).isTrue();
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT2, "action-subject")).contains(KNOWN_SUBJECT2);
assertThat(thing).hasAttributes(ThingsModelFactory.nullAttributes());
assertThat(underTest).hasType(type);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(adaptables).hasSize(1); assertThat(signal).isInstanceOf(SendThingMessage.class); assertThat(sendThingMessage.getEntityId().toString()).isEqualTo("thing:id"); assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()) .isEqualTo(ByteBuffer.wrap(payload.getBytes()));
assertThat(mappingResult).isEmpty();
assertThat(underTest).hasSize(3); assertThat(underTest) .hasSize(3) .containsOnly(toAclEntry(KNOWN_AUTH_SUBJECT_FOO.getId(), Permission.READ), toAclEntry(KNOWN_AUTH_SUBJECT_BAR.getId(), Permission.READ), toAclEntry(KNOWN_AUTH_SUBJECT_BAZ.getId(), Permission.READ));
assertThat(parsedCommand).isEqualTo(command);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.NE); assertThat(comparison.getComparisonProperty()).isEqualTo("username"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(jsonObject).contains(SudoRetrieveThing.JSON_USE_ORIGINAL_SCHEMA_VERSION, JsonFactory.newValue(true));
assertThat(json).isEqualTo(JSON_ALL_FIELDS_V1);
assertThat(thing).hasAttributes(ATTRIBUTES);
assertThat(parameterResolver.apply(stringSingle, expressionResolver, DUMMY)).contains(KNOWN_VALUE); assertThat(parameterResolver.apply(stringDouble, expressionResolver, DUMMY)).contains(KNOWN_VALUE); assertThat(parameterResolver.apply(stringPlaceholder, expressionResolver, DUMMY)).contains(KNOWN_VALUE);
assertThat(underTest.getStatusCode()).isSameAs(HttpStatusCode.OK);
assertThat(underTest.answer()).isNotNull();
assertThat(underTest).isNotNull();
assertThat(parameterResolver.apply(stringPlaceholder, expressionResolver, DUMMY)).isEmpty();
assertThat(DittoAuthorizationContextType.contains(DittoAuthorizationContextType.PRE_AUTHENTICATED_CONNECTION)).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTestUpdated).isNotNull();
assertThat(underTest.lt(BOSCH)) .hasType(SearchFilter.Type.LT) .hasOnlyValue(BOSCH) .hasStringRepresentation("lt(" + PROPERTY_PATH + ",\\"" + BOSCH + "\\")");
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(-123L);
assertThat(underTest.getReason()).isEqualTo(knownShutdownReason);
assertThat(DefaultConnectionMonitorRegistry.fromConfig(TestConstants.MONITORING_CONFIG)) .isNotNull();
assertThat(underTest.toString()) .contains("pointer") .contains("valueType") .contains("JsonArray") .contains("checkJavaTypeFunction") .contains("mappingFunction") .contains("markers");
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(underTest.mapperOf("test", ctx)).isPresent();
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(parsedCommand).isEqualTo(command);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(hasPermissions).isFalse();
assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(TARGET_JSON_WITH_AUTH_CONTEXT);
assertThat(textPayload).isEqualTo(PAYLOAD); assertThat(bytePayload.getBuffer()).isEqualTo(BYTES);
assertThat(function.getName()).isEqualTo("lower");
assertThat(actual).isEqualTo(REPLY_TARGET);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.LT); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(newDeleteFeaturesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(underTest.apply(command)).isEqualTo(expected);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(thing).hasNoAttributes();
assertThat(validator.canValidate(EntityTag.class)).isTrue();
assertThat(underTest.getTrustedCertificates()).isEmpty();
assertThat(actual).isEqualTo(FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON);
assertThat(leftJsonObject).isEqualTo(rightJsonObject);
assertThat(underTest.getEntityId().toString()).isEqualTo(underTest.getNamespace());
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT2, "subject")).contains(KNOWN_SUBJECT2);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(ConnectivityHeaders.isPayloadDebugLogEnabled(headers("OFF"))).isFalse();
assertThat(underTest.getReasonForInvalidity()).isEqualTo(expectedReasonForInvalidity);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT1, "action-subject")).contains(KNOWN_SUBJECT);
assertThat(policyWithEventApplied).isNotNull(); assertThat(policyWithEventApplied.getModified()).contains(instant); assertThat(policyWithEventApplied.getRevision()).contains(PolicyRevision.newInstance(10L));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest) .withType(retrieveThingTwinCommand.getType()) .withDittoHeaders(retrieveThingTwinCommand.getDittoHeaders()) .withId(retrieveThingTwinCommand.getThingEntityId()) .withManifest(retrieveThingTwinCommand.getManifest()) .withResourcePath(retrieveThingTwinCommand.getResourcePath()); assertThat(underTest.getThingEntityIds()).isEqualTo(retrieveThingTwinCommand.getThingEntityIds());
assertThat(underTest).isNotNull();
assertThat(underTest.getPath()).isEqualTo(PROPERTY_PATH);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "subject")).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve("fn:default(thing:id)", PipelineElement.unresolved(), EXPRESSION_RESOLVER)) .contains(THING_ID.toString());
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON .remove(Event.JsonFields.ID.getPointer()) .set(Event.JsonFields.TYPE, AclEntryDeleted.TYPE));
assertThat(underTest) .hasSameSizeAs(permissions) .containsEntry("READ", weightedSubjectIds) .containsEntry("WRITE", weightedSubjectIds);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(adaptables).hasSize(1); assertThat(adaptables.get(0).getPayload().getValue()).contains(JsonValue.of("AQIDBAUG")); assertThat(signal).isInstanceOf(SendThingMessage.class); assertThat(sendThingMessage.getEntityId().toString()).isEqualTo("thing:id"); assertThat(sendThingMessage.getMessage().getRawPayload().orElseThrow()).isEqualTo(payload);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON .remove(Event.JsonFields.ID.getPointer()) .set(Event.JsonFields.TYPE, AclModified.TYPE));
assertThat(PlaceholderFilter.apply("testTargetAmqpCon4_{{thing:namespace}}:{{thing:name}}", THING_ID, thingPlaceholder)) .isEqualTo("testTargetAmqpCon4_eclipse:ditto");
assertThat(underTest).isNotNull();
assertThat(appliedCommand.getDittoHeaders()).isEqualTo(expectedHeaders); assertThat(appliedCommand).isEqualTo(expected);
assertThat(value).startsWith(enforcedValue); assertThat(enforcedValueBytes).isLessThanOrEqualTo(maxAllowedValueForKey); assertThat(enforcedValueBytes).isCloseTo(maxAllowedValueForKey, Offset.offset(maxUtf8Bytes));
assertThat(underTest.resolve("one")) .contains("1"); assertThat(underTest.resolve("two")) .contains("2");
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(onStopHandlers).hasSize(1); assertThat(onStopHandlers).contains(onStopHandler);
assertThat(UNDER_TEST.resolve(THING_ID, "name")).contains(NAME);
assertThat(createdJsonView).isEqualTo(expectedJsonView);
assertThat(actual).isEqualTo(KNOWN_JSON_REPRESENTATION);
assertThat(actual).containsExactly(pointerC, pointerA, pointerB);
assertThat(mappingResult).isEmpty();
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(unmuted.getLogs()).isEqualTo(entries);
assertThat(underTest.getEntityId().toString()).isEqualTo(underTest.getNamespace());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(newRetrieveFeaturesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actual).isEqualTo(REPLY_TARGET_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveFeaturePropertiesTwinCommand.toString());
assertThat(underTest.toString()).isEqualTo(expected);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(createPolicy).isNotNull();
assertThat(jsonStr).isEqualTo("{\\"items\\":" + itemsArray + ",\\"nextPageOffset\\":" + nextPageOffset + "}");
assertThat(applicable).isTrue();
assertThat(applicable).isTrue();
assertThat(underTest).isNotNull();
assertThat(copy) .isNotSameAs(underTest) .isEmpty();
assertThat(newModifyAttributesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(parsedEvent).isEqualTo(event);
assertThat(underTest).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve("fn:substring-before(\\"-\\")", PipelineElement.resolved(THING_NAME), EXPRESSION_RESOLVER)) .contains("test");
assertThat(parsedAcknowledgements).isEqualTo(knownAcknowledgements);
assertThat(contains).isFalse();
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(HEADERS, "device_id")).contains(DEVICE_ID);
assertThat(PlaceholderFilter.apply(THING_ID.toString(), HEADERS, headersPlaceholder)) .isEqualTo(THING_ID.toString()); assertThat( PlaceholderFilter.apply("eclipse:ditto:{{ header:device-id }}", HEADERS, headersPlaceholder)).isEqualTo( "eclipse:ditto:device-12345");
assertThat(underTest.toString()).isEqualTo(KNOWN_TYPE_VALUE);
assertThat((CharSequence) retrieveThing.getThingEntityId()).isEqualTo(THING_ID); assertThat(retrieveThing.getSelectedFields()).contains(JsonFieldSelector.newInstance("policyId")); assertThat(policyIdCS.toCompletableFuture()) .hasFailedWithThrowableThat() .isInstanceOf(GatewayInternalErrorException.class);
assertThat(thing).hasFeatures(FEATURES);
assertThat(underTest.answer()).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(targetMetrics.getAddressMetrics().get(TARGET).getMeasurements()).containsExactlyInAnyOrder(expected);
assertThat(underTest).isNotNull();
assertThat(underTest).isNotNull();
assertThat(actual).isEqualTo(MQTT_SOURCE_JSON);
assertThat(thing).hasNoFeatures();
assertThat(actual).isEqualTo(MEASUREMENT);
assertThat(searchProperty.getPath().toString()).isEqualTo(THING_ID_KEY);
assertThat(DefaultMetadataHeaders.parseMetadataHeaders(metadataHeaderValue)).isEmpty();
assertThat(description).isPresent(); assertThat(description.get()).contains("Check if the JSON was valid");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_FIELD_SELECTION);
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(twinCommand.getFeatureId());
assertThat(DittoAcknowledgementLabel.contains(null)).isFalse();
assertThat(underTest).containsExactly(entryToAdd);
assertThat(ifNoneMatchPreconditionHeader.getKey()).isEqualTo("if-none-match");
assertThat(BinaryToHexConverter.toHexString(TEST_VECTOR)).isEqualTo(EXPECTED_STRING);
assertThat(authenticationResult.isSuccess()).isFalse();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(result.getStatusCode()).isEqualTo(HttpStatusCode.UNSUPPORTED_MEDIA_TYPE);
assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH, "full")).contains(KNOWN_TOPIC_PATH.getPath());
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"baz\\""))).isTrue();
assertThat(modifyAttribute.getType()).isEqualTo(ModifyAttribute.TYPE); assertThat(modifyAttribute.getDittoHeaders().getCorrelationId()).contains(correlationId); assertThat(modifyAttribute.getDittoHeaders().getAuthorizationContext().getAuthorizationSubjects()) .isEqualTo(expectedAuthContext.getAuthorizationSubjects()); assertThat(modifyAttribute.getDittoHeaders().get("source")) .contains("integration:" + correlationId + ":hub-application/json");
assertThat(actual).isEqualTo(TARGET_WITH_AUTH_CONTEXT);
assertThat(messageHeaders).containsAllEntriesOf(validHeaders);
assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON);
assertThat(underTest).isNumber(); assertThat(underTest.asInt()).isEqualTo(intValue);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(MQTT_TARGET_JSON);
assertThat(substituted).isEqualTo(input);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.LIKE); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("test*");
assertThat(underTest.receivedAllRequestedAcknowledgements()).isTrue();
assertThat(newRetrieveThingsLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(appliedCommand.getDittoHeaders()).isEqualTo(expectedHeaders); assertThat(appliedCommand).isEqualTo(expectedCommand);
assertThat(result) .hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(commandResponse));
assertThat(newRetrieveFeaturePropertiesLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(underTest.isRelevantFor("f:oo")).isTrue();
assertThat(actualJsonValue).isEqualTo(expectedJsonObject);
assertThat(function.getName()).isEqualTo("substring-after");
assertThat(adaptables).hasSize(1); assertThat(signal).isInstanceOf(DeleteThingResponse.class);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.answer()).isNotNull();
assertThat(underTest.createMessageMapperInstance("strong-smell-wasabi")).isEmpty();
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(ifMatchPreconditionHeader.meetsConditionFor(EntityTag.fromString("\\"bar\\""))).isTrue();
assertThat(builtEntry).isEqualTo(LOG_ENTRY);
assertThat(underTest.toJson()).isEqualTo(knownJsonRepresentation);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(jsonString.isString()).isFalse(); assertThat(jsonString.isNull()).isTrue();
assertThat(result).hasValueSatisfying(resultFuture -> assertThat(resultFuture).isCompletedWithValue(null));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(thing).hasFeatures(TestConstants.Feature.FEATURES);
assertThat(time.getOffset().getLong(ChronoField.OFFSET_SECONDS)).isEqualTo(0);
assertThat(underTest.eq(value)) .hasType(SearchFilter.Type.EQ) .hasOnlyValue(value) .hasStringRepresentation("eq(" + PROPERTY_PATH + "," + value + ")");
assertThat(underTest.answer()).isNotNull();
assertThat(commandFromJson).isEqualTo(underTest);
assertThat(json).isEqualTo(JSON_MINIMAL_V1);
assertThat(DittoAuthorizationContextType.contains(authorizationContextType)).isFalse();
assertThat(underTest).hasLevelCount(expectedLevelCount);
assertThat(function.getName()).isEqualTo("substring-before");
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(function.apply(UNMATCHING_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).isEmpty();
assertThat(info).hasHeaders(headers);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(dittoHeaders).isEqualTo(anotherDittoHeaders);
assertThat(unicodeEscaped) .describedAs("Do not escape character %s", Integer.toHexString(character)) .startsWith("\\\\u"); assertThat(Integer.parseInt(unicodeEscaped.substring(2), 16)).isEqualTo(character);
assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON);
assertThat(maxWeightForAllPermissions).isEmpty();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.LIKE); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("test*");
assertThat(searchResult) .containsExactlyElementsOf(itemsArray) .hasNextPageOffset(nextPageOffset);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("abc\\nyz");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(validationResult.isValid()).isTrue();
assertThat(pointerLocation).isSameAs(PointerLocation.BELOW);
assertThat(underTest.getCursor()).isEqualTo(CURSOR);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(resolvedParameters.get(0)).contains(firstParameter); assertThat(resolvedParameters.get(1)).contains(secondParameter); assertThat(resolvedParameters.get(2)).contains(thirdParameter);
assertThat(without).isEqualTo(with);
assertThat(underTest.add(read)).isTrue();
assertThat(newContext).isEqualTo(expectedContext);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(thing).isEqualTo(TestConstants.Thing.THING_V2);
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(underTest.getStatusCode()).isEqualTo(HttpStatusCode.INTERNAL_SERVER_ERROR);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(underTest).isNotNull();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(fieldExpression).isEqualTo(expected);
assertThat(actualJson).isEqualTo(expected);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V2) .hasId(THING_ID) .hasPolicyId(POLICY_ID) .hasAttributes(ATTRIBUTES) .hasNoDefinition() .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(jsonValue).isNotNull(); assertThat(jsonValue).isArray(); assertThat((JsonArray) jsonValue).contains("two");
assertThat(thing) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION) .hasCreated(CREATED) .hasMetadata(METADATA) .hasNoModified();
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(UNDER_TEST.resolve(THING_ID, "id")).contains(THING_ID.toString());
assertThat(newModifyFeaturePropertyLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(underTest).isNumber(); assertThat(underTest.asLong()).isEqualTo(longValue);
assertThat(rawMessageOpt).isEmpty();
assertThat(command.getType()).isEqualTo(ModifyAttribute.TYPE); assertThat(command.getDittoHeaders().getCorrelationId()).contains(correlationId); assertThat(((ModifyAttribute) command).getAttributePointer()).isEqualTo(JsonPointer.of("/foo")); assertThat(((ModifyAttribute) command).getAttributeValue()).isEqualTo(JsonValue.of(plainPayload));
assertThat(thingWithEventApplied).isEqualTo(expected);
assertThat(ImmutableEntityIdWithResourceType.readFrom(EXPECTED_SERIALIZED_ENTITY_ID)).isEqualTo(ENTITY_ID);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(String.class); assertThat(comparison.getComparisonValue()).isEqualTo("te\'st");
assertThat(actual).isEqualTo(KNOWN_JSON_REPRESENTATION);
assertThat(underTest).isEqualTo(INVALID_FILTER_EXCEPTION);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest).doesNotSupport(JsonValue::asObject); assertThat(underTest).doesNotSupport(JsonValue::asBoolean); assertThat(underTest).doesNotSupport(JsonValue::asString); assertThat(underTest).doesNotSupport(JsonValue::asInt); assertThat(underTest).doesNotSupport(JsonValue::asLong); assertThat(underTest).doesNotSupport(JsonValue::asDouble);
assertThat(newDeleteFeatureLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(actual).isEqualTo(knownJsonObject);
assertThat(builder.build()).isEmpty();
assertThat(defined).isFalse();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(validator.canValidate(EntityTagMatcher.class)).isTrue();
assertThat(mapped).hasSize(1); assertThat(mapped.get(0)).isEqualTo(adaptable);
assertThat(ifNoneMatchPreconditionHeader.meetsConditionFor(null)).isTrue();
assertThat(function.apply(KNOWN_INPUT, "(\'" + SUBSTRING_AT + "\')", expressionResolver)).contains(EXPECTED_RESULT);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest).containsOnly(SECOND_IDENTIFIER);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasFeatureProperties(FLUX_CAPACITOR_ID, newFeatureProperties) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(UNDER_TEST.resolve("fn:upper()", PipelineElement.resolved(THING_ID.toString()), EXPRESSION_RESOLVER)) .contains(THING_ID.toString().toUpperCase());
assertThat(actual).isEqualTo(KNOWN_JSON);
assertThat(underTest.answer()).isNotNull();
assertThat(UNDER_TEST.resolve("fn:substring-after(\\"-\\")", PipelineElement.resolved(THING_NAME), EXPRESSION_RESOLVER)) .contains("id");
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_DISTINCT_NAMESPACE);
assertThat(underTest.apply("foo", value)).isEqualTo(value);
assertThat(result).isEqualTo(testValue);
assertThat(underTest.resolve("full")) .contains(fullPath); assertThat(underTest.resolve("namespace")) .contains("org.eclipse.ditto"); assertThat(underTest.resolve("entityId")) .contains("foo23"); assertThat(underTest.resolve("group")) .contains("things"); assertThat(underTest.resolve("channel")) .contains("twin"); assertThat(underTest.resolve("criterion")) .contains("commands"); assertThat(underTest.resolve("action")) .contains("modify");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveFeatureDefinitionTwinCommand.toString());
assertThat(rawMessage.findContentType()).contains(DittoConstants.DITTO_PROTOCOL_CONTENT_TYPE); assertThat(rawMessage.findHeader(HEADER_CORRELATION_ID)).contains(correlationId); assertThat(rawMessage.isTextMessage()).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(function.apply(input, params, expressionResolver)).contains(KNOWN_VALUE);
assertThat(underTest).hasOnlyValue(valueFoo, valueBar, valueBaz);
assertThat(actual).isEqualTo(expected);
assertThat(dittoHeaders) .containsEntry(DittoHeaderDefinition.RESPONSE_REQUIRED.getKey(), Boolean.FALSE.toString());
assertThat(thing).hasLifecycle(TestConstants.Thing.LIFECYCLE);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(twinCommand.toString());
assertThat(withoutFeatureProperty).hasNotFeatureProperty(FLUX_CAPACITOR_ID, KNOWN_FEATURE_PROPERTY_PATH);
assertThat(levelsFromIteration).containsExactly(knownLevels.toArray(new JsonKey[knownLevels.size()]));
assertThat(UNDER_TEST.resolve(THING_ID, "id")).contains(THING_ID.toString());
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .hasNotFeatureProperty(FLUX_CAPACITOR_ID, propertyPath) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(underTest.substitute(notResolvableInput, DITTO_HEADERS)).isEqualTo(notResolvableInput);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Boolean.class); assertThat(comparison.getComparisonValue()).isEqualTo(true);
assertThat(configItem).hasValue(JWT_SUBJECT_ISSUER_CONFIG_GOOGLE); assertThat(configItem2).hasValue(JWT_SUBJECT_ISSUER_CONFIG_GOOGLE_DE);
assertThat(actualJsonValue).isEqualTo(JsonArray.newBuilder().build());
assertThat(actual).isEqualTo(MQTT_TARGET);
assertThat(streamThings.getFilter()).contains(filter); assertThat(streamThings.getNamespaces()).contains(Set.of("a", "b", "c")); assertThat(streamThings.getSort()).contains("sort(-/policyId,+/thingId)");
assertThat(underTest) .withType(retrieveFeaturePropertiesTwinCommand.getType()) .withDittoHeaders(retrieveFeaturePropertiesTwinCommand.getDittoHeaders()) .withId(retrieveFeaturePropertiesTwinCommand.getThingEntityId()) .withManifest(retrieveFeaturePropertiesTwinCommand.getManifest()) .withResourcePath(retrieveFeaturePropertiesTwinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(retrieveFeaturePropertiesTwinCommand.getFeatureId());
assertThat(builtETagValue).isNotPresent();
assertThat(fieldExpression).isEqualTo(expected);
assertThat(underTest.apply(KNOWN_INPUT, params, expressionResolver)).isEmpty();
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Double.class); assertThat(comparison.getComparisonValue()).isEqualTo(0.7);
assertThat(newCreateThingLiveCommand).withDittoHeaders(emptyDittoHeaders);
assertThat(UNDER_TEST.resolve(POLICY_ID, "name")).contains(NAME);
assertThat(PurgeEntitiesReason.fromJson(knownJsonRepresentation)).isEqualTo(underTest);
assertThat(fieldExpression).isEqualTo(expected);
assertThat(underTest.getId()).isEqualTo(underTest.getNamespace());
assertThat(underTest.apply(command)).isEqualTo(expectedCommand);
assertThat(underTest) .withType(retrieveAttributeTwinCommand.getType()) .withDittoHeaders(retrieveAttributeTwinCommand.getDittoHeaders()) .withId(retrieveAttributeTwinCommand.getThingEntityId()) .withManifest(retrieveAttributeTwinCommand.getManifest()) .withResourcePath(retrieveAttributeTwinCommand.getResourcePath()); assertThat(underTest.getAttributePointer()).isEqualTo(retrieveAttributeTwinCommand.getAttributePointer());
assertThat(sourceMetrics.getAddressMetrics().get(SOURCE).getMeasurements()).containsExactlyInAnyOrder(expected);
assertThat(rawMessage.findContentType()).contains(DittoConstants.DITTO_PROTOCOL_CONTENT_TYPE); assertThat(rawMessage.findHeader(HEADER_CORRELATION_ID)).contains(correlationId); assertThat(rawMessage.isTextMessage()).isTrue();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat((CharSequence) underTest.getResourcePath()).isEqualTo(TestConstants.Policy.RESOURCE_PATH);
assertThat(parsedEvent).isEqualTo(event);
assertThat(underTest.apply(headerDefinition.getKey(), ackRequestsJsonArray.toString())).isNull();
assertThat(thing).hasNotFeatureProperty(FLUX_CAPACITOR_ID, PROPERTY_PATH);
assertThat(root).isNotNull(); assertThat(root.getChildren().size()).isEqualTo(1); assertThat(comparison.getComparisonType()).isEqualTo(SingleComparisonNode.Type.GE); assertThat(comparison.getComparisonProperty()).isEqualTo("width"); assertThat(comparison.getComparisonValue().getClass()).isEqualTo(Long.class); assertThat(comparison.getComparisonValue()).isEqualTo(123L);
assertThat(underTest).isNotNull(); assertThat((CharSequence) underTest.getThingEntityId()).isEqualTo(THING_ID); assertThat(underTest.getMessageType()).isEqualTo(SendThingMessage.NAME); assertThat(underTest.getMessage()).isEqualTo(MESSAGE_EMPTY_PAYLOAD); assertThat(underTest.getMessage().getPayload()).isEmpty(); assertThat(underTest.getMessage().getRawPayload()).isEmpty();
assertThat(actual).isEqualTo(knownJsonRepresentation);
assertThat(underTest).containsOnly( toAclEntry("ed420ff0-b1c96661e4-9070-3863bbc77d82", Permission.READ, Permission.WRITE), toAclEntry("edca04a0-b1c96661e4-9070-3863bbc77d82", Permission.READ));
assertThat(thing).hasFeatures(ThingsModelFactory.emptyFeatures());
assertThat((CharSequence) other).isEqualTo(underTest);
assertThat(userInformation.getDefaultSubject()).contains(defaultSubjectId); assertThat(userInformation.getSubjects()).containsExactly(defaultSubjectId, otherSubjectId);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(underTest) .withType(retrieveFeatureDefinitionTwinCommand.getType()) .withDittoHeaders(retrieveFeatureDefinitionTwinCommand.getDittoHeaders()) .withId(retrieveFeatureDefinitionTwinCommand.getThingEntityId()) .withManifest(retrieveFeatureDefinitionTwinCommand.getManifest()) .withResourcePath(retrieveFeatureDefinitionTwinCommand.getResourcePath()); assertThat(underTest.getFeatureId()).isEqualTo(retrieveFeatureDefinitionTwinCommand.getFeatureId());
assertThat(createdException.getMessage()).isEqualTo(expectedMessage);
assertThat(actualJson).isEqualToIgnoringFieldDefinitions(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(copy.getMessage()).isEqualTo(underTest.getMessage()); assertThat(copy.getDescription()).isEqualTo(underTest.getDescription()); assertThat(copy.getHref()).isEqualTo(underTest.getHref()); assertThat(copy.getDittoHeaders()).isEqualTo(underTest.getDittoHeaders());
assertThat(jsonStr).isEqualTo("{\\"__schemaVersion\\":" + 2 + ",\\"items\\":[],\\"nextPageOffset\\":-1}");
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON_WITH_SNAPSHOT_REVISION);
assertThat(underTest) .withType(twinCommand.getType()) .withDittoHeaders(twinCommand.getDittoHeaders()) .withId(twinCommand.getThingEntityId()) .withManifest(twinCommand.getManifest()) .withResourcePath(twinCommand.getResourcePath()); assertThat(underTest.getThing()).isEqualTo(twinCommand.getThing());
assertThat(monitor.getLogger()).isEqualTo(logger);
assertThat(unchangedFeatures).isSameAs(underTest);
assertThat(underTest.getPublicKey("google.com", KEY_ID).get(LATCH_TIMEOUT, TimeUnit.SECONDS)).isEmpty(); assertThat(underTest.getPublicKey("google.com", KEY_ID).get(LATCH_TIMEOUT, TimeUnit.SECONDS)).isEmpty();
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(command.getType()).isEqualTo(ModifyAttribute.TYPE); assertThat(command.getDittoHeaders().getCorrelationId()).contains(correlationId); assertThat(((ModifyAttribute) command).getAttributePointer()).isEqualTo(JsonPointer.of("/foo")); assertThat(((ModifyAttribute) command).getAttributeValue()).isEqualTo(JsonValue.of(plainPayload));
assertThat(getStrategyUnderTest().handle(getPolicyEvent(instant, policy), null, 0L)).isNull();
assertThat(authenticationResult.isSuccess()).isFalse();
assertThat(underTest).containsOnly(newAclEntry(KNOWN_AUTH_SUBJECT_FOO, permission), newAclEntry(KNOWN_AUTH_SUBJECT_BAZ, permission));
assertThat(actual).isEqualTo(expected);
assertThat(emptyAudience.getPrinciples()).isEmpty();
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(ACL) .hasAttributes(ATTRIBUTES) .featureHasNoProperties(FLUX_CAPACITOR_ID) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertThat(thing).hasAttribute(ATTRIBUTE_PATH, ATTRIBUTE_VALUE);
assertThat(underTest.isEntriesSizeGreaterThan(0)).isTrue();
assertThat(mappingResult).isEmpty();
assertThat(underTest) .hasStringRepresentation( "exists(" + THING_ID_PATH + ")");
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains("command=") .contains(retrieveFeaturesTwinCommand.toString());
assertThat(mapped).isEqualTo(intValue);
assertThat(info) .hasNoThingId() .hasCorrelationId(correlationId) .hasTimestampBetween(before, after);
assertThat(manifest).isEqualTo(exception.getErrorCode());
assertThat(thing).hasRevision(TestConstants.Thing.REVISION);
assertThat(underTest.toString()) .contains(underTest.getClass().getSimpleName()) .contains(knownEntityIds.toString());
assertThat(createdJsonView).isEqualTo(expectedJsonView);
assertThat(underTest.getResourceType()).isEqualTo(TestConstants.Policy.RESOURCE_TYPE);
assertThat(underTest.toString()).isEqualTo(String.valueOf(DEFAULT_VALUE));
assertThat(actualJson).isEqualTo(KNOWN_JSON);
assertThat(actual).isEqualTo(KNOWN_COMPOSITE_COMPOSITE_STATUS_INFO);
assertThat(changedThing) .isNotSameAs(KNOWN_THING_V1) .hasId(THING_ID) .hasAcl(newAcl) .hasAttributes(ATTRIBUTES) .hasFeatures(FEATURES) .hasLifecycle(LIFECYCLE) .hasRevision(REVISION);
assertEquals(String.format("Different at index %d. Expected <%d>, was <%d>.", i, sortedRanks[i], ranks[i]), ranks[i], sortedRanks[i]); assertEquals(people, Arrays.asList("One", "Two", "Three"));
assertEquals(String.format("Different at index %d. Expected <%d>, was <%d>.", i, sortedRanks[i], ranks[i]), ranks[i], sortedRanks[i]); assertEquals(people, Arrays.asList("One", "Two1", "Two2", "Four", "Five"));
assertEquals(1, users.size());
assertNotNull(writtenRules.getList()); assertEquals(2, rules.getList().size());
assertEquals(auditingFilesManager.getOutputFile(), expectedOutputFile);
assertEquals(1, mapped.size()); assertEquals("B", mapped.iterator().next().getAuthority());
assertEquals(2, writtenRules.size()); assertNotNull(userRule.getUser()); assertNull(userRule.getGroup()); assertEquals((Long)userId, userRule.getUser().getId()); assertEquals((Long)resourceId, userRule.getResource().getId()); assertNotNull(groupRule.getGroup()); assertNull(groupRule.getUser()); assertEquals((Long)groupId, groupRule.getGroup().getId()); assertEquals((Long)resourceId, groupRule.getResource().getId());
assertEquals(result.getCount(), grpTestUserNum);
assertEquals(((List)headers.get("Cache-Control")).get(0), "no-cache"); assertEquals(((List)headers.get("Expires")).get(0), "-1"); assertEquals(((List)headers.get("Test")).get(0), new String("Test"));
assertEquals("r1", res.getName()); assertEquals("r1", loaded.getName()); assertTrue(loaded.isCanEdit()); assertTrue(loaded.isCanDelete()); assertEquals("r1", loaded.getName()); assertEquals(Status.FORBIDDEN, ex.getResponse().getClientResponseStatus()); assertEquals("r1", loaded.getName()); assertFalse(loaded.isCanEdit());
assertFalse(dud.isValid());
assertTrue(true);
assertEquals(((List)headers.get("Expires")).get(0), "-1"); assertEquals(((List)headers.get("Cache-Control")).get(0), "no-cache");
assertEquals(2, l.size()); assertEquals("e2", l.get(0)); assertEquals("e0", l.get(1));
assertEquals(3,u.getGroupsNames().size());
assertEquals(1, userService.getByAttribute(attribute).size());
assertEquals(1, user.getAttribute().size()); assertEquals("transformed", user.getAttribute().get(0).getName()); assertEquals("myemail@email.com", user.getAttribute().get(0).getValue());
assertEquals(1, users.size());
assertEquals(1, ul.getList().size()); assertNull(u.getGroupsNames());
assertNotNull(GeoStoreJAXBContext.getContext());
assertEquals(1, user.getAttribute().size()); assertEquals("transformed", user.getAttribute().get(0).getName()); assertEquals("mock", user.getAttribute().get(0).getValue());
assertTrue(details instanceof UserDetailsWithAttributes); assertEquals("mock", detailsWithAttribute.getAttribute("FullName"));
assertEquals(2, l.size()); assertEquals("e2", l.get(0)); assertEquals("e0", l.get(1)); assertEquals(2, kl.size()); assertEquals("e3", kl.get(0)); assertEquals("e2", kl.get(1)); assertEquals(2, l.size()); assertEquals("e3", l.get(0)); assertEquals("e2", l.get(1)); assertEquals(1, kl.size()); assertEquals("e3", kl.get(0));
assertEquals(0, resourceService.getCount(null)); assertEquals(0, resourceService.getCount(null)); assertTrue(error);
assertEquals(1, user.getAttribute().size()); assertEquals("transformed", user.getAttribute().get(0).getName()); assertEquals("myemail@email.com", user.getAttribute().get(0).getValue());
assertSame(message1, message2); assertSame(str1, str2);
assertEquals(22.55, PriceCalculator.calculatePrice(product1), 0); assertEquals(15.00, PriceCalculator.calculatePrice(product2), 0);
assertEquals(2, tweetService.findAll().size()-2);
assertEquals("FOO!", client.greetUser("doesn\'t matter"));
assertSame(message1, message2); assertSame(str1, str2);
assertEquals("hola gente!!!", tweetService.findById(tweet1.getId()).getText());
assertEquals(0, tweetService.size());
assertEquals("Output of EdgeListStreamWriter is correct", expectedOutput, outputStream.toString());
assertFalse(reader.hasNextEdge());
assertFalse(reader.hasNextVertex());
assertEquals("Output of VertexListStreamWriter is correct", expectedOutput, outputStream.toString());
assertThat(resolver.resolve("env_type_variable")).isEqualTo("new env type var");
assertThat(testObject.getMap()).containsEntry("a","1").containsEntry("b", "2").containsEntry("c", "3");
assertThat(proposition).hasSize(0);
assertThat(compatibleCapabilities).hasSize(1); assertThat(compatibleCapabilities).containsKeys("db_endpoint");
assertThat(testObject.getMap()).hasSize(1); assertThat(testObject.getMap()).containsEntry("b", "2");
assertThat(resolver.resolve("a4c.application.name")).isEqualTo("originalAppName");
assertNull(capability);
assertThat(compatibleCapabilities).hasSize(0);
assertThat(resourceSecuredSaved.getPermissions(Subject.APPLICATION, "subject1")).containsExactly(Permission.READ); assertThat(resourceSecuredSaved.getPermissions(Subject.APPLICATION, "subject2")).isEmpty(); assertThat(resourceSecuredSaved.getPermissions(Subject.APPLICATION, "subject3")).containsExactlyInAnyOrder(Permission.ADMIN, Permission.READ);
assertThat(complex).isInstanceOf(Map.class); assertThat(((Map) complex).get("string_list")).isEqualTo(Arrays.asList("item 1", "item 2", "item 3")); assertThat(((Map) complex).get("complex_list")).isEqualTo(Arrays.asList( ImmutableMap.of("item10", "value10", "item11", "value11"), ImmutableMap.of("item20", "value20", "item21", "value21")) );
assertNull(capability);
assertEquals(ParsingErrorLevel.ERROR, contextExecution.getParsingErrors().get(0).getErrorLevel()); assertEquals(ErrorCode.ALIEN_MAPPING_ERROR, contextExecution.getParsingErrors().get(0).getErrorCode());
assertThat(spelExpressionProcessor.process("#{ #var1 }", String.class)).isEqualTo("var1 value"); assertThat(spelExpressionProcessor.process("#{ #var2 }", Object.class)).isEqualTo(ImmutableMap.of("sub", "subvar value")); assertThat(spelExpressionProcessor.process("#{true == true}", Boolean.class)).isEqualTo(true); assertThat(spelExpressionProcessor.process("#{true == false}", Boolean.class)).isEqualTo(false);
assertThat(proposition).hasSize(1); assertThat(proposition.get(0).isService()).isTrue();
assertThat(resolver.resolve("float_variable", Float.class)).isEqualTo(3.14f);
assertThat(proposition).hasSize(1); assertThat(proposition.get(0).isService()).isTrue();
assertThat(compatibleCapabilities).hasSize(1); assertThat(compatibleCapabilities).containsKeys("db_endpoint");
assertThat(testObject.getMap()).hasSize(1); assertThat(testObject.getMap()).containsEntry("b", "2");
assertThat(s).isEqualTo("subValue");
assertThat(resolver.resolve("int_variable", Integer.class)).isEqualTo(1);
assertThat(listVariable).isInstanceOf(List.class); assertThat((List<String>) listVariable).containsExactly("item 1", "item 2", "item 3");
assertThat(listVariable).isInstanceOf(List.class); assertThat((List<String>) listVariable).containsExactly("item true", "item false", "item 3");
assertThat(proposition).hasSize(1);
assertThat(compatibleCapabilities).hasSize(0);
assertThat(complex.get("complex")).isEqualTo(ImmutableMap.builder().put("subfield", "text").build());
assertThat(resolver.resolve("complex_variable.complex", Map.class)).isEqualTo(ImmutableMap.builder().put("subfield", "subValue").build());
assertThat(proposition).hasSize(0);
assertThat(resolver.findAllEnvironmentSetupLocalPath("my_app")).hasSize(2);
assertThat(resolver.resolve("spel_variable", String.class)).isEqualTo("true");
assertThat(config).isNotNull(); assertThat(config.getId()).isEqualTo(existingId); assertThat(Files.exists(configLocalPath)).isTrue();
assertThat(testObject.getMap()).hasSize(1); assertThat(testObject.getMap()).containsEntry("d", "4");
assertThat(list).isInstanceOf(Collection.class); assertThat(((Collection<Object>) list)).hasSize(2); assertThat(((Collection<Object>) list)).containsExactly( ImmutableMap.of("item10", "value10", "item11", "value11"), ImmutableMap.of("item20", "value20", "item21", "value21") );
assertThat(resolver.resolve("mix_spel_and_variable", String.class)).isEqualTo("1 true");
assertThat(testObject.getMap()).containsEntry("a","2").containsEntry("b", "2");
assertThat(RepositoryManager.isGitRepository(localGitPath)).isTrue();
assertSame(nodeCapability, capability); assertSame(nodeCapability, capability);
assertThat(complex.get("complex_from_var")).isEqualTo(ImmutableMap.of("complex", ImmutableMap.builder().put("subfield", "text").build()));
assertThat(map).isEqualTo(ImmutableMap.builder().put("value", "3.14").build());
assertThat(resolver.resolve("env_variable")).isEqualTo("new env var");
assertThat(complex.get("complex")).isEqualTo(ImmutableMap.builder().put("subfield", "subValue").build());
assertThat(proposition).hasSize(0);
assertThat(s).isEqualTo("1 - text");
assertThat(complex).isInstanceOf(Map.class); assertThat(((Map<String, Object>) complex)).containsExactly( entry("subfield1", "text"), entry("subfield2", ImmutableMap.of("sublist", Arrays.asList("item 1", "item 2", "item 3.14"))));
assertThat(result.getMissingVariables()).hasSize(4); assertThat(result.getMissingVariables()).contains("missing_inner_variable", "missing_float_variable", "missing_string_variable", "missing_int_variable"); assertThat(result.getUnresolved()).hasSize(4); assertThat(result.getUnresolved()).contains("int_input", "float_input", "string_input", "complex_input");
assertSame(nodeCapability, capability); assertSame(nodeCapability, capability);
assertThat(resolver.resolve("string_variable")).isEqualTo("text");
assertThat(resolver.resolve("overidden_variable")).isEqualTo("ok");
assertThat(dao.findById(DeploymentInputs.class, "unknown")).isNull();
assertThat(dispatcher.getEstimatedCapacity(NOW), is(Integer.MAX_VALUE));
assertThat(response, is(expected));
assertThat(dispatcher.getEstimatedCapacity(NOW), is(not(Integer.MAX_VALUE))); assertThat(dispatcher.getEstimatedCapacity(NOW), is(Integer.MAX_VALUE));
assertEquals(true, validateTor.isPinCode("282001"));
assertEquals(true, validateTor.hasAtleastOneLowercaseCharacter("abcde1")); assertEquals(true, validateTor.hasAtleastOneLowercaseCharacter("a1b2c3")); assertEquals(true, validateTor.hasAtleastOneLowercaseCharacter("123abc")); assertEquals(true, validateTor.hasAtleastOneLowercaseCharacter("abcdef")); assertEquals(true, validateTor.hasAtleastOneLowercaseCharacter("aBcD123#"));
assertEquals(true, threwException);
assertEquals(false, validateTor.hasAtleastOneUppercaseCharacter("123456")); assertEquals(false, validateTor.hasAtleastOneUppercaseCharacter("11#$")); assertEquals(false, validateTor.hasAtleastOneUppercaseCharacter("#$%^&")); assertEquals(false, validateTor.hasAtleastOneUppercaseCharacter("abc")); assertEquals(false, validateTor.hasAtleastOneUppercaseCharacter("abcde1"));
assertEquals(true, regexMatcher.validate(str, RegexPresetPattern.ALPHA));
assertEquals(true, validateTor.isEmail("a&d@somedomain.com")); assertEquals(true, validateTor.isEmail("a*d@somedomain.com")); assertEquals(true, validateTor.isEmail("a/d@somedomain.com"));
assertTrue(validateTor.isJSON("[]")); assertTrue(validateTor.isJSON("[{\\"id\\":1}]"));
assertEquals(false, validateTor.isPinCode("28200")); assertEquals(false, validateTor.isPinCode("a28200")); assertEquals(false, validateTor.isPinCode("123"));
assertEquals(true, validateTor.containsSubstring("abcdEfgHiJK", "def")); assertEquals(true, validateTor.containsSubstring("abcdEfgHiJK", "DEFG")); assertEquals(true, validateTor.containsSubstring("abcdEfgHiJK", "f")); assertEquals(true, validateTor.containsSubstring("abcdEfgHiJK", "F")); assertEquals(true, validateTor.containsSubstring("abcdEfgHiJK", "E"));
assertEquals(false, validateTor.isEmail(".abc@somedomain.com")); assertEquals(false, validateTor.isEmail("bc.@somedomain.com")); assertEquals(false, validateTor.isEmail("a>b@somedomain.com"));
assertEquals(false, validateTor.isLowercase("aBC")); assertEquals(false, validateTor.isLowercase("ABC")); assertEquals(false, validateTor.isLowercase("AbC"));
assertEquals(false, validateTor.hasAtleastOneSpecialCharacter("123456")); assertEquals(false, validateTor.hasAtleastOneSpecialCharacter("abc")); assertEquals(false, validateTor.hasAtleastOneSpecialCharacter("ABC")); assertEquals(false, validateTor.hasAtleastOneSpecialCharacter("ABCdef123")); assertEquals(false, validateTor.hasAtleastOneSpecialCharacter("abcde1"));
assertEquals(true, validateTor.isDecimal("1.000")); assertEquals(true, validateTor.isDecimal("0012.0")); assertEquals(true, validateTor.isDecimal("123.000")); assertEquals(true, validateTor.isDecimal(".003"));
assertEquals(false, validateTor.isAtMostLength("abc", 2)); assertEquals(false, validateTor.isAtMostLength("abc", 1));
assertEquals(false, regexMatcher.validate(str, RegexPresetPattern.ALPHA));
assertEquals(false, validateTor.containsSubstring("abcdEfgHiJK", "acd"));
assertEquals(false, validateTor.hasAtleastOneLowercaseCharacter("123456")); assertEquals(false, validateTor.hasAtleastOneLowercaseCharacter("11#$")); assertEquals(false, validateTor.hasAtleastOneLowercaseCharacter("#$%^&")); assertEquals(false, validateTor.hasAtleastOneLowercaseCharacter("ABC")); assertEquals(false, validateTor.hasAtleastOneLowercaseCharacter("ABC123"));
assertEquals(true, validateTor.isIPAddress("10.255.255.254")); assertEquals(true, validateTor.isIPAddress("192.168.0.0")); assertEquals(true, validateTor.isIPAddress("0:0:0:0:0:0:0:1")); assertEquals(true, validateTor.isIPAddress("0.0.0.1"));
assertEquals(false, regexMatcher.validate(null, RegexPresetPattern.ALPHA));
assertEquals(true, validateTor.isAtleastLength("abc", 2)); assertEquals(true, validateTor.isAtleastLength("abc", 3)); assertEquals(true, validateTor.isAtleastLength("abcdef", 5));
assertEquals(true, validateTor.isHexadecimal("3FA7"));
assertEquals(false, validateTor.isAlpha("1")); assertEquals(false, validateTor.isAlpha("&")); assertEquals(false, validateTor.isAlpha("abc123")); assertEquals(false, validateTor.isAlpha("123abc")); assertEquals(false, validateTor.isAlpha(" ")); assertEquals(false, validateTor.isAlpha(" "));
assertEquals(true, validateTor.isLowercase("abc"));
assertEquals(true, validateTor.isInteger("123"));
assertEquals(false, validateTor.isHexadecimal("GFA7"));
assertEquals(false, validateTor.isAlphanumeric("#")); assertEquals(false, validateTor.isAlphanumeric("%")); assertEquals(false, validateTor.isAlphanumeric("\\r")); assertEquals(false, validateTor.isAlphanumeric("123(")); assertEquals(false, validateTor.isAlphanumeric("123(abc")); assertEquals(false, validateTor.isAlphanumeric(" ")); assertEquals(false, validateTor.isAlphanumeric(" "));
assertEquals(true, validateTor.isBoolean("true")); assertEquals(true, validateTor.isBoolean("True")); assertEquals(true, validateTor.isBoolean("TRUE")); assertEquals(true, validateTor.isBoolean("TrUe")); assertEquals(true, validateTor.isBoolean("false")); assertEquals(true, validateTor.isBoolean("False")); assertEquals(true, validateTor.isBoolean("FALSE")); assertEquals(true, validateTor.isBoolean("fAlSe"));
assertEquals(true, validateTor.isAlphanumeric("abcd123")); assertEquals(true, validateTor.isAlphanumeric("12452abcd")); assertEquals(true, validateTor.isAlphanumeric("abcdEfgHiJK"));
assertEquals(true, validateTor.isNumeric("1234"));
assertEquals(false, validateTor.hasAtleastOneDigit("abcde")); assertEquals(false, validateTor.hasAtleastOneDigit("aaaa")); assertEquals(false, validateTor.hasAtleastOneDigit("#$%^&"));
assertEquals(true, validateTor.isAtMostLength("abc", 5)); assertEquals(true, validateTor.isAtMostLength("abc", 3)); assertEquals(true, validateTor.isAtMostLength("abcdef", 10));
assertEquals(true, validateTor.isValidMD5("5d41402abc4b2a76b9719d911017c592"));
assertEquals(true, regexMatcher.validate(str, "[a-zA-Z]+"));
assertEquals(false, validateTor.isBoolean("fals1")); assertEquals(false, validateTor.isBoolean("1False")); assertEquals(false, validateTor.isBoolean("Trye1")); assertEquals(false, validateTor.isBoolean("True1"));
assertEquals(true, validateTor.isAlpha("abcdEfgHiJK")); assertEquals(true, validateTor.isAlpha("abcd")); assertEquals(true, validateTor.isAlpha("A")); assertEquals(true, validateTor.isAlpha("Ab")); assertEquals(true, validateTor.isAlpha("bC"));
assertEquals(false, validateTor.isIn("a1", new String[]{"a2", "a3", "a4"}));
assertEquals(false, validateTor.hasAtleastOneLetter("123456")); assertEquals(false, validateTor.hasAtleastOneLetter("11#$")); assertEquals(false, validateTor.hasAtleastOneLetter("#$%^&"));
assertEquals(true, validateTor.hasAtleastOneDigit("abcde1")); assertEquals(true, validateTor.hasAtleastOneDigit("a1b2c3")); assertEquals(true, validateTor.hasAtleastOneDigit("123"));
assertEquals(false, validateTor.isInteger("a12")); assertEquals(false, validateTor.isInteger("abc"));
assertEquals(false, validateTor.isUppercase("123a")); assertEquals(false, validateTor.isUppercase("abc123"));
assertEquals(false, validateTor.isValidMD5("5d41402abc4b2a76b9719d911017"));
assertEquals(true, validateTor.hasAtleastOneUppercaseCharacter("ABC123")); assertEquals(true, validateTor.hasAtleastOneUppercaseCharacter("A1B2C3")); assertEquals(true, validateTor.hasAtleastOneUppercaseCharacter("123ABC")); assertEquals(true, validateTor.hasAtleastOneUppercaseCharacter("ABC")); assertEquals(true, validateTor.hasAtleastOneUppercaseCharacter("aBcD123#"));
assertEquals(false, validateTor.isUppercase("aBC")); assertEquals(false, validateTor.isUppercase("abc")); assertEquals(false, validateTor.isUppercase("AbC"));
assertEquals(false, validateTor.isPhoneNumber("000-000-0000")); assertEquals(false, validateTor.isPhoneNumber("123-456-7890")); assertEquals(false, validateTor.isPhoneNumber("2126661234"));
assertEquals(false, validateTor.isAtleastLength("abc", 4)); assertEquals(false, validateTor.isAtleastLength("abc", 5));
assertEquals(true, threwException);
assertEquals(true, validateTor.isPhoneNumber("800-555-5555")); assertEquals(true, validateTor.isPhoneNumber("333-444-5555")); assertEquals(true, validateTor.isPhoneNumber("212-666-1234"));
assertEquals(true, validateTor.isUppercase("ABC"));
assertEquals(true, validateTor.isIn("a1", new String[]{"a1", "a2", "a3", "a4"}));
assertThat(decision, is(Optional.of(false)));
assertThat(decision, is(Optional.of(false)));
assertEquals(decision, Optional.of(false));
assertThat(Stream.of(violation1, violation2).filter(firstAlternativeViolation()).count(), is(2L));
assertThat(weight, is(0.5));
assertThat(weight, is(3.0));
assertTrue(filter.test(violation, Collections.singleton(instance)));
assertThat(weight, is(0.5));
assertTrue(filter.test(violation, Collections.singleton(instance)));
assertThat(largerWeight - smallerWeight, is(greaterThan(largestWeight - largerWeight)));
assertThat(patterns, is(empty()));
assertFalse(strategy.apply(overlap).isPresent());
assertThat(decision, is(Optional.empty()));
assertThat(weightFunction.getWeight(instance, overlaps, model), is(0.25));
assertThat(weight, is(closeTo(1/3.0, 0.00001)));
assertEquals(decision, Optional.of(false));
assertThat(decision, is(Optional.of(false)));
assertThat(weight, is(1.0));
assertThat(decision, is(Optional.empty()));
assertThat(weightWithEqualImportance, is(lessThan(weightWithMissingNodeDoubleImportance)));
assertThat(decision, is(Optional.of(false)));
assertThat(decision, is(Optional.of(false)));
assertTrue(strategy.apply(overlap).orElse(false));
assertThat(weight, is(1.0));
assertThat(weight, is(0.5));
assertThat(weight, is(1.0));
assertThat(weight, is(0.5));
assertThat(violations, contains( new Violation(violation2, 1.0, "1"), new Violation(violation1, 1.0, "1"), new Violation(violation3, 1.0, "1")));
assertThat(smallerWeight, is(lessThan(1.0))); assertThat(smallerWeight, is(greaterThan(0.0)));
assertThat(decision, is(Optional.of(false)));
assertThat(decision, is(Optional.empty()));
assertThat(decision, is(Optional.empty()));
assertThat(patterns, is(not(empty())));
assertThat(weightWithEqualImportance, is(lessThan(weightWithMissingNodeDoubleImportance)));
assertFalse(filter.test(violation, Arrays.asList(instance1, instance2)));
assertTrue(strategy.apply(overlap).orElse(false));
assertTrue(hierarchy.isA("A", "A"));
assertThat(violations, contains( new Violation(violation2, 0.7, "0.7"), new Violation(violation1, 0.5, "0.5")));
assertThat(weight, is(1.0));
assertThat(weight, is(1.0));
assertFalse(filter.test(violation, Collections.singleton(instance)));
assertThat(decision, is(Optional.of(false)));
assertFalse(filter.test(violation, Collections.emptyList()));
assertThat(weight, is(0.5));
assertThat(weight, is(1.0));
assertThat(decision, is(Optional.empty()));
assertThat(patterns, is(not(empty())));
assertThat(weight, is(0.5));
assertThat(decision, is(Optional.of(false)));
assertFalse(hierarchy.isA("int", "String"));
assertThat(Stream.of(violation1, violation2, violation3).filter(firstAlternativeViolation()).count(), is(1L));
assertThat(weight, is(42.0));
assertThat(decision, is(Optional.of(false)));
assertThat(smallerWeight, is(lessThan(largerWeight)));
assertThat(weight, is(1.0));
assertThat(decision, is(Optional.of(false)));
assertTrue(hierarchy.isA("int", "long"));
assertThat(decision, is(Optional.empty()));
assertThat(weight, is(1.0));
assertTrue(hierarchy.isA("A", "S"));
assertThat(patterns, is(not(empty())));
assertThat(actual, is(not(strings))); assertThat(actual.size(), is(2)); assertThat(actual.get(0), is("1")); assertThat(actual.get(1), is("3"));
assertEquals("1", RxOptional.maybe("1").get());
assertEquals("1", RxOptional.maybe(null).or("1").get());
assertThat(System.getProperty("c")).isEqualTo("2");
assertThat(numberOfCorrectCoffee).isBetween(expectedCount - variation, expectedCount + variation);
assertThat(result).contains(MapEntry.entry("a", "1"), MapEntry.entry("-Dc", "2"));
assertEquals("foo", cl.bucket); assertEquals("localhost:1234", cl.zk);
assertEquals("foo", cl.bucket); assertEquals("localhost:2181", cl.zk);
assertTrue(cl instanceof CommandHelp);
assertArrayEquals(pk1, pk2);
assertNotNull("Affinity group \'group1\' of type \'mock\' failed to create ", group);
assertEquals(result, expected);
assertTrue(NetUtils.isValidIpv6("fc00::1")); assertFalse(NetUtils.isValidIpv6("")); assertFalse(NetUtils.isValidIpv6(null)); assertFalse(NetUtils.isValidIpv6("1234:5678::1/64"));
assertNotNull(map); assertEquals(map.size(),1);
assertThat(answer.getResult(), equalTo(true));
assertEquals(StringUtils.getPreferredCharset(), Charset.forName("UTF-8")); assertNotEquals(StringUtils.getPreferredCharset(), Charset.forName("UTF-8"));
assertTrue(cidr + " does not contain " + subnet,NetUtils.isIpWithtInCidrRange(subnet, cidr));
assertThat(updatedRows, hasSize(0));
assertEquals(null, NetUtils.countIp6InRange("-1234:5678::0"));
assertThat("Wrong Uuid in the newly created SecurityProfile", actualSecProfile, hasProperty("uuid", equalTo(UUID))); assertThat("Wrong Href in the newly created SecurityProfile", actualSecProfile, hasProperty("href", equalTo(HREF))); assertThat("Wrong Schema in the newly created SecurityProfile", actualSecProfile, hasProperty("schema", equalTo(SCHEMA)));
assertEquals(TransactionLegacy.CLOUD_DB, TransactionLegacy.currentTxn().getDatabaseId().shortValue()); assertEquals("Panic!", e.getMessage());
assertFalse(UuidUtils.validateUUID(serviceUuid));
assertFalse("It should fail! 32 bit prefix.", is31PrefixCidr);
assertEquals("123", NetUtils.getPrimaryPvlanFromUri(NetUtils.generateUriForPvlan("123", "456")));
assertEquals(result, expected);
assertTrue(" does not compute " + cidrsize,netbits == 16);
assertTrue(answer instanceof GroupAnswer); assertEquals(2, ((GroupAnswer)answer).getResults().length); assertTrue(answer.getResult());
assertTrue(e.getMessage().contains("is expected to exist at"));
assertEquals(false, NetUtils.isNetworksOverlap("", null));
assertTrue(answer instanceof GroupAnswer); assertEquals(2, ((GroupAnswer)answer).getResults().length); assertTrue(answer.getResult());
assertEquals(result, expected);
assertTrue(NetUtils.isSameIpRange(cidrFirst, cidrFirst)); assertTrue(NetUtils.isSameIpRange(cidrFirst, cidrSecond)); assertFalse(NetUtils.isSameIpRange(cidrFirst, cidrThird)); assertFalse(NetUtils.isSameIpRange(cidrFirst, "10.3.6.5/50"));
assertNull(deployment.sourceNatIp); assertEquals("SourceNatIP should remain null given a non public network", null, deployment.sourceNatIp);
assertEquals(result, expected);
assertFalse("It should overlap, but it\'s a 31-bit ip", doesOverlap);
assertEquals("mask not right: " + mask, 0x80000000, mask); assertEquals("mask not right: " + mask, 0xffffffff, mask);
assertEquals("127.0.0.1", NetUtils.long2Ip(0x7f000001l)); assertEquals("192.168.0.1", NetUtils.long2Ip(0xc0a80001l)); assertEquals("8.8.8.8", NetUtils.long2Ip(0x08080808l));
assertThat(bareMetalRemovalUpdater.createUpdatedValue("baremetal"), is(equalTo(""))); assertThat(bareMetalRemovalUpdater.createUpdatedValue("baremetal,"), is(equalTo(""))); assertThat(bareMetalRemovalUpdater.createUpdatedValue(",baremetal,"), is(equalTo("")));
assertTrue(NetUtils.isValidCidrList(cidrFirst)); assertTrue(NetUtils.isValidCidrList(cidrSecond)); assertTrue(NetUtils.isValidCidrList(cidrThird));
assertTrue(NetUtils.isValidCIDR(cidrFirst)); assertTrue(NetUtils.isValidCIDR(cidrSecond)); assertTrue(NetUtils.isValidCIDR(cidrThird));
assertEquals(result, expected);
assertEquals("New account shouldn\'t have been updated", mockOwner, deployment.owner);
assertTrue("The builder ignored redundancy from its inner network", deployment.isRedundant()); assertFalse("The builder ignored redundancy from its inner network", deployment.isRedundant());
assertTrue("Check if the subnetUtils.setInclusiveHostCount(true) has been called.", isInRange);
assertThat(updatedRows, hasSize(1)); assertThat(updatedRows, contains( allOf( hasEntry(BareMetalRemovalUpdater.VALUE, "hypervisor_a"), hasEntry(BareMetalRemovalUpdater.CATEGORY, "someCategory"), hasEntry(BareMetalRemovalUpdater.INSTANCE, "someInstance"), hasEntry(BareMetalRemovalUpdater.COMPONENT, "someComponent"), hasEntry(BareMetalRemovalUpdater.NAME, "someName") ) ));
assertFalse(agentAttache1.equals(agentAttache2));
assertEquals(result, expected);
assertThat(object, notNullValue()); assertThat(object, equalTo(existingObject));
assertEquals(result, expected);
assertTrue("can not even start to create a router", done);
assertTrue("we won !?!", true); assertTrue("we won !?!", true);
assertEquals(result, expected);
assertEquals(result, expected);
assertEquals(result, expected);
assertTrue(e.getMessage().contains("do not appear to be the same resource"));
assertTrue(" does not compute " + cidrsize,netbits == 16);
assertTrue(answer.getResult()); assertTrue(answer.getResult());
assertThat(bareMetalRemovalUpdater.hasReferenceToBareMetal(""), is(false)); assertThat(bareMetalRemovalUpdater.hasReferenceToBareMetal("something"), is(false)); assertThat(bareMetalRemovalUpdater.hasReferenceToBareMetal("baremeta"), is(false)); assertThat(bareMetalRemovalUpdater.hasReferenceToBareMetal("aremetal"), is(false)); assertThat(bareMetalRemovalUpdater.hasReferenceToBareMetal("baretal"), is(false));
assertTrue("It didn\'t create the expected SQL query.", sb.toString().equals(EXPECTED_QUERY));
assertThat(response, notNullValue()); assertThat(response, sameInstance(mockResponse));
assertEquals(virtualSize.longValue(), QCOW2Utils.getVirtualSize(inputStream));
assertTrue(NetUtils.validateGuestCidr(guestCidr));
assertTrue(answer instanceof GroupAnswer); assertEquals(((GroupAnswer) answer).getResults().length, 2); assertTrue(answer.getResult());
assertTrue(cidr + " does not generate valid netmask " + netmask,NetUtils.isValidNetmask(netmask));
assertThat(client, notNullValue());
assertEquals(new BigInteger("1"), NetUtils.countIp6InRange("1234:5678::2"));
assertEquals("Minimal address not created", "0.0.0.0", min.addr());
assertEquals("Since there is no service offering associated with VPC offering, offering id should have matched default one", DEFAULT_OFFERING_ID, deployment.serviceOfferingId.longValue());
assertNotNull(set.getApplicationContext("base"));
assertNull(deployment.sourceNatIp); assertEquals("SourceNatIP was not correctly found and set", sourceNatIp, deployment.sourceNatIp);
assertEquals(result, expected);
assertEquals("Minimal address not created", "127.255.255.255", eve.addr()); assertEquals("Minimal address not created", "128.0.0.0", dawn.addr());
assertThat(updatedRows, hasSize(0));
assertEquals(aclList.get(i).getNumber(), i+1);
assertThat(updatedRows, hasSize(0));
assertThat(resourceChecker.checkIfPodExists(1L), is(hostPod));
assertEquals("Panic!", e.getMessage());
assertEquals(NON_EXPECTED_COMMAND_NAME, CMD1_NAME, cmd1.getActualCommandName()); assertEquals(NON_EXPECTED_COMMAND_NAME, CMD2_NAME, cmd2.getActualCommandName());
assertThat(bytes, greaterThan(0L));
assertEquals(new BigInteger("2"), NetUtils.countIp6InRange("1234:5678::1-1234:5678::2"));
assertEquals(FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED, deployment.dest, foundDestinations.get(0)); assertEquals(FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED, 1, foundDestinations.size());
assertTrue(answer.getResult());
assertFalse(agentAttache1.equals("abc"));
assertEquals(NetUtils.getIp6CidrSize("1234:5678::1/32"), 32); assertEquals(NetUtils.getIp6CidrSize("1234:5678::1"), 0);
assertTrue("no cigar for network daddy",done);
assertEquals(5, context.callWithContext(new Callable<Integer>() { @Override public Integer call() throws Exception { return 5; } }).intValue());
assertEquals(result, expected);
assertEquals(result, expected);
assertEquals(StringUtils.getDefaultCharset(), Charset.defaultCharset());
assertTrue("Check if the subnetUtils.setInclusiveHostCount(true) has been called.", isInRange);
assertNull(HttpUtils.findCookie(cookies, cookieName)); assertNull(HttpUtils.findCookie(cookies, cookieName)); assertNull(HttpUtils.findCookie(cookies, "aalasiLangur")); assertNotNull(HttpUtils.findCookie(cookies, cookieName));
assertThat(object, notNullValue()); assertThat(object, equalTo(newObject));
assertTrue(Transaction.execute(new TransactionCallbackWithExceptionNoReturn<FileNotFoundException>() { @Override public void doInTransactionWithoutResult(TransactionStatus status) throws FileNotFoundException { i.incrementAndGet(); } })); assertEquals(1, i.get());
assertEquals("Didn\'t find and set the VirtualRouterProvider as expected", vrProvider, deployment.getVirtualProvider());
assertTrue(UuidUtils.validateUUID(serviceUuid));
assertNull(results);
assertTrue(answer.getResult());
assertEquals(0x7f000001l, NetUtils.ip2Long("127.0.0.1")); assertEquals(0xc0a80001l, NetUtils.ip2Long("192.168.0.1")); assertEquals(0x08080808l, NetUtils.ip2Long("8.8.8.8"));
assertEquals(false, NetUtils.isNetworkAWithinNetworkB("", null));
assertTrue("The builder ignored redundancy from its inner network", deployment.isRedundant()); assertFalse("The builder ignored redundancy from its inner network", deployment.isRedundant());
assertNotNull("Affinity group \'group1\' of type \'mock\' failed to create ", group);
assertEquals(false, NetUtils.areCidrsNotEmpty("", " "));
assertEquals(DIDN_T_GET_THE_EXPECTED_IP4_ADDRESS, IP4_ADDRES1, ip4address);
assertEquals(0L,mac.toLong());
assertTrue(answer.getResult());
assertEquals(result, expected);
assertEquals("a-b-c", StringUtils.join("-", "a", "b", "c")); assertEquals("", StringUtils.join("-"));
assertEquals("First router to deploy was not added to list of available routers", routerVO1, deployment.routers.get(0)); assertEquals("Second router to deploy was not added to list of available routers", routerVO2, deployment.routers.get(1));
assertTrue(NetUtils.isValidIp6Cidr("1234:5678::1/64")); assertFalse(NetUtils.isValidIp6Cidr("1234:5678::1"));
assertNull(set.getApplicationContext("excluded")); assertNull(set.getApplicationContext("excluded2")); assertNull(set.getApplicationContext("orphan-of-excluded"));
assertThat(updatedRows, hasSize(2));
assertEquals(expectedResult, flattenProperties(bean, Bean.class));
assertNull(deployment.tableLockId);
assertEquals(result, expected);
assertEquals("unexpected cidrsize " + netbits[1],10l, netbits[1].longValue()); assertEquals("(un)expected <" + 0x0ac00000L + "> netaddress " + netbits[0].longValue(),netbits[0].longValue(),0x0ac00000l);
assertTrue(agentAttache1.equals(agentAttache2));
assertEquals("456", NetUtils.getIsolatedPvlanFromUri(NetUtils.generateUriForPvlan("123", "456")));
assertTrue(e.getMessage().contains("Missing name property"));
assertTrue(answer.getResult());
assertTrue(answer.getResult());
assertEquals("New account owner not properly set", newAccountOwner, deployment.owner);
assertEquals(24, QCOW2Utils.getVirtualSizeHeaderLocation());
assertNotNull(LOCK_NOT_CORRECTLY_GOT, deployment.tableLockId); assertEquals(LOCK_NOT_CORRECTLY_GOT, VPC_ID, deployment.tableLockId.longValue());
assertEquals(result, expected);
assertEquals(NetUtils.getIp6FromRange("1234:5678::1-1234:5678::1"), "1234:5678::1"); assertThat(ip, anyOf(equalTo("1234:5678::1"), equalTo("1234:5678::2"))); assertThat(ip, greaterThanOrEqualTo(ipStart)); assertThat(ip, lessThanOrEqualTo(ipEnd));
assertEquals(result, expected);
assertEquals("Maximal address not created", "255.255.255.255", max.addr());
assertTrue("It should pass! 31 bit prefix.", is31PrefixCidr);
assertEquals("a,b,c", StringUtils.listToCsvTags(Arrays.asList("a","b", "c"))); assertEquals("", StringUtils.listToCsvTags(new ArrayList<String>()));
assertTrue(answer.getResult());
assertEquals(result, expected);
assertEquals(result, expected);
assertTrue(" does not compute " + cidrsize,netbits == 16);
assertTrue(answer.getResult()); assertTrue(answer.getResult());
assertTrue(answer.getResult());
assertNull(deployment.tableLockId);
assertEquals(false, NetUtils.areCidrsNotEmpty(null, null));
assertThat(answer.getResult(), equalTo(false));
assertTrue("It overlaps!", doesOverlap);
assertEquals(true, NetUtils.areCidrsNotEmpty("10.10.0.0/16", "10.1.2.3/16"));
assertEquals("New account owner not properly set", newAccountOwner, deployment.owner);
assertTrue(answer.getResult());
assertEquals(expectedResult, flattenProperties(bean, Bean.class));
assertTrue(answer.getResult()); assertTrue(answer.getResult()); assertTrue(answer.getResult());
assertEquals(result, expected);
assertTrue(!InitTest.initted); assertEquals("a string", set.getApplicationContext("child1").getBean("override", String.class));
assertTrue("Didn\'t create complete errors. It should create 2 errors: 8 item1 and 16 item2", matcher.find());
assertTrue(answer.getResult());
assertEquals("06:01:25:00:45:67", NetUtils.generateMacOnIncrease(mac, 2)); assertEquals("06:01:33:00:45:67", NetUtils.generateMacOnIncrease(mac, 16)); assertEquals("06:00:00:00:45:67", NetUtils.generateMacOnIncrease(mac, 1)); assertEquals("06:00:0f:00:45:67", NetUtils.generateMacOnIncrease(mac, 16));
assertEquals(emptyList(), flattenProperties(null, Bean.class));
assertEquals("Service offering id not matching the one associated with VPC offering", VPC_OFFERING_ID, deployment.serviceOfferingId.longValue());
assertEquals(ONLY_THE_PROVIDED_AS_DEFAULT_DESTINATION_WAS_EXPECTED, 1, destinations.size()); assertEquals(ONLY_THE_PROVIDED_AS_DEFAULT_DESTINATION_WAS_EXPECTED, mockDestination, destinations.get(0));
assertTrue(answer.getResult()); assertTrue(answer.getResult()); assertTrue(answer.getResult());
assertEquals("SourceNatIp returned by the VpcManager was not correctly set", publicIp, deployment.sourceNatIp); assertEquals("SourceNatIp returned by the VpcManager was not correctly set", null, deployment.sourceNatIp);
assertFalse(agentAttache1.equals(agentAttache2));
assertEquals(result, expected);
assertTrue(answer instanceof GroupAnswer); assertEquals(((GroupAnswer) answer).getResults().length, 2); assertTrue(answer.getResult());
assertFalse("Out of the range. Why did it return true?", isInRange);
assertTrue(answer.getResult());
assertEquals("1.0000 TB", NumbersUtil.toReadableSize((1024l * 1024l * 1024l * 1024l))); assertEquals("1.00 GB", NumbersUtil.toReadableSize(1024 * 1024 * 1024)); assertEquals("1.00 MB", NumbersUtil.toReadableSize(1024 * 1024)); assertEquals("1.00 KB", NumbersUtil.toReadableSize((1024))); assertEquals("1023 bytes", NumbersUtil.toReadableSize((1023)));
assertEquals(42L, Transaction.execute(new TransactionCallback<Object>() { @Override public Object doInTransaction(TransactionStatus status) { return 42L; } }));
assertThat(answer.getResult(), equalTo(false));
assertFalse(NetUtils.isIp6InNetwork("1234:5678:abcd::1", "1234:5678::/64")); assertTrue(NetUtils.isIp6InNetwork("1234:5678::1", "1234:5678::/64")); assertTrue(NetUtils.isIp6InNetwork("1234:5678::ffff:ffff:ffff:ffff", "1234:5678::/64")); assertTrue(NetUtils.isIp6InNetwork("1234:5678::", "1234:5678::/64"));
assertEquals(NetUtils.standardizeIp6Address("1234:0000:0000:5678:0000:0000:ABCD:0001"), "1234::5678:0:0:abcd:1"); assertEquals(NetUtils.standardizeIp6Cidr("1234:0000:0000:5678:0000:0000:ABCD:0001/64"), "1234:0:0:5678::/64");
assertEquals(result, expected);
assertThat(resourceChecker.checkIfDataCenterExists(1L), is(dataCenter));
assertEquals(0, NumbersUtil.bytesToLong(new byte[] {0, 0, 0, 0, 0, 0, 0, 0})); assertEquals(1, NumbersUtil.bytesToLong(new byte[] {0, 0, 0, 0, 0, 0, 0, 1})); assertEquals(257, NumbersUtil.bytesToLong(new byte[] {0, 0, 0, 0, 0, 0, 1, 1}));
assertNotNull(NetUtils.getLocalIPString());
assertThat(HttpStatusCodeHelper.isUnauthorized(HttpStatus.SC_TEMPORARY_REDIRECT), equalTo(false)); assertThat(HttpStatusCodeHelper.isUnauthorized(HttpStatus.SC_BAD_REQUEST), equalTo(false)); assertThat(HttpStatusCodeHelper.isUnauthorized(HttpStatus.SC_UNAUTHORIZED), equalTo(true)); assertThat(HttpStatusCodeHelper.isUnauthorized(HttpStatus.SC_PAYMENT_REQUIRED), equalTo(false)); assertThat(HttpStatusCodeHelper.isUnauthorized(HttpStatus.SC_FORBIDDEN), equalTo(false));
assertEquals(null, NetUtils.countIp6InRange("1234:5678::2-1234:5678::0"));
assertEquals("VpcOffering should be created for Region Level Vpc", true, result);
assertTrue(e.getMessage().contains("Missing name property"));
assertFalse(agentAttache1.equals(null));
assertThat(response, notNullValue()); assertThat(response, sameInstance(mockResponse));
assertEquals(SupersetOrSubset.errorInCidrFormat, NetUtils.isNetowrkASubsetOrSupersetOfNetworkB("", null));
assertEquals(1L,mac.toLong());
assertTrue(element.canHandle(net, Service.Connectivity)); assertFalse(element.canHandle(net, Service.Connectivity)); assertFalse(element.canHandle(net, Service.Connectivity)); assertFalse(element.canHandle(net, Service.Connectivity)); assertFalse(element.canHandle(net, Service.Dhcp));
assertEquals(result, expected);
assertNotNull(LOCK_NOT_CORRECTLY_GOT, deployment.tableLockId); assertEquals(LOCK_NOT_CORRECTLY_GOT, NW_ID_1, NW_ID_1, deployment.tableLockId.longValue());
assertNotNull("Computation of commitment failed - null", comm.getValue()); assertTrue("Invalid commitment", comm.verify(msg));
assertTrue("Bad length of hex string", conv.length() == 8); assertArrayEquals("Conversion of bytes to hex string failed", rand, b);
assertFalse("makeRand failed - hash of all zeros", Arrays.equals(r, Digest.digest(new byte[Digest.HASH_SIZE_BYTES])));
assertTrue("Bad length of long byte array", bytes.length == 8); assertTrue("Conversion of non-neg long to bytes failed: l = "+l, num == l); assertTrue("Conversion of negative long to bytes failed: l = "+l, num == l);
assertNotNull("Computation of hash failed - null", hash); assertFalse("Computation of hash failed - hash is all zeros", Arrays.equals(hash, new byte[Digest.HASH_SIZE_BYTES]));
assertThat(asgardBundle.getBundleName()).isEqualTo("sample-auth-bundle1-2048-SNAPSHOT-release"); assertThat(extractPath.exists()).isTrue(); assertThat(bundleClassPath.exists() && bundleClassPath.isDirectory()).isTrue(); assertThat(bundleJarPath.exists() && bundleJarPath.isDirectory()).isTrue(); assertThat(metaInfPath.exists() && metaInfPath.isDirectory()).isTrue();
assertEquals(32.000022, log2Work, 0.0000001);
assertEquals(3, txns.size()); assertTrue(txns.contains(send1)); assertTrue(txns.contains(send1b)); assertTrue(txns.contains(send1c));
assertFalse(isConsistent);
assertEquals(2020, block481829.getTransactions().size());
assertEquals(1, watchedAddresses.size()); assertEquals(watchedAddress, watchedAddresses.get(0));
assertFalse(future.isDone()); assertFalse(future.isDone()); assertFalse(future.isDone()); assertTrue(peerGroup.waitForPeersOfVersion(1, newVer).isDone()); assertTrue(future.isDone());
assertEquals("", w1.toString()); assertEquals("NULL NULL", w2.toString()); assertEquals("123aaa 123bbb 123ccc", w3.toString());
assertEquals(1, flag.get());
assertTrue(Arrays.equals(expected, actual));
assertEquals("0", MonetaryFormat.UBTC.noCode().shift(0).format(Coin.ZERO).toString()); assertEquals("dBTC 0", MonetaryFormat.UBTC.noCode().code(1, "dBTC").shift(1).format(Coin.ZERO).toString());
assertFalse(wallet.isAddressWatched(addr)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertNull(new UlordURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?message=").getMessage());
assertFalse(isConsistent);
assertTrue(e.getMessage().contains("address"));
assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, Utils.reverseBytes(new byte[]{5, 4, 3, 2, 1}));
assertNotEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertNotEquals(0, wallet.getTransactions(false).size()); assertNotEquals(0, wallet.getUnspents().size()); assertEquals(Coin.ZERO, wallet.getBalance(Wallet.BalanceType.ESTIMATED)); assertEquals(0, wallet.getTransactions(false).size()); assertEquals(0, wallet.getUnspents().size());
assertEquals(CENT, valueOf(0, 1)); assertEquals(SATOSHI, valueOf(1)); assertEquals(NEGATIVE_SATOSHI, valueOf(-1)); assertEquals(MAX_MONEY, valueOf(MAX_MONEY.value)); assertEquals(MAX_MONEY.negate(), valueOf(MAX_MONEY.value * -1));
assertEquals(tx, outbound(channels[1])); assertEquals(tx, outbound(channels[2])); assertEquals(tx, outbound(channels[4])); assertEquals(RejectedTransactionException.class, e.getCause().getClass());
assertEquals(1, parseCoinInexact("0.00000001").value); assertEquals(1, parseCoinInexact("0.000000011").value);
assertTrue(testNetChain.add(b1)); assertFalse(future.isDone()); assertTrue(testNetChain.add(b2)); assertTrue(future.isDone()); assertEquals(2, future.get().getHeight());
assertEquals(0, Utils.maxOfMostFreq()); assertEquals(0, Utils.maxOfMostFreq(0, 0, 1)); assertEquals(2, Utils.maxOfMostFreq(1, 1, 2, 2)); assertEquals(1, Utils.maxOfMostFreq(1, 1, 2, 2, 1)); assertEquals(-1, Utils.maxOfMostFreq(-1, -1, 2, 2, -1));
assertEquals(12, wallet.getKeyChainSeed().getMnemonicCode().size());
assertEquals("1.00", NO_CODE.format(Coin.COIN).toString());
assertEquals(op1, msg1.getOutPoints().get(0)); assertEquals(op2, msg2.getOutPoints().get(0)); assertEquals(1, msg1.getOutPoints().size()); assertFalse(future1.isDone()); assertEquals(future1.get(), response1); assertEquals(future2.get(), response2);
assertEquals(nanos, tx1.getValueSentToMe(wallet)); assertTrue(tx1.getWalletOutputs(wallet).size() >= 1); assertEquals(nanos, send2.getValueSentFromMe(wallet)); assertEquals(ZERO.subtract(valueOf(0, 10)), send2.getValue(wallet));
assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(1416135273781L)); assertEquals("2014-11-16T10:54:33Z", Utils.dateTimeFormat(new Date(1416135273781L)));
assertTrue(Arrays.equals(expected, actual));
assertEquals("aardvark=zebra", new UlordURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?label=aardvark=zebra").getLabel());
assertTrue(Arrays.equals(expected, actual));
assertTrue(testNetChain.add(getBlock1())); assertTrue(testNetChain.add(b2)); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Difficulty target is bad")); assertTrue(e.getMessage(), e.getCause().getMessage().contains("Unexpected change in difficulty"));
assertEquals("Hello World", testObject.getMessage());
assertEquals("Hello World", testObject.getLabel());
assertNull(new UlordURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?label=").getLabel());
assertFalse(wallet.isAddressWatched(watchedAddress)); assertFalse(wallet.isRequiringUpdateAllBloomFilter());
assertTrue(Arrays.equals(expected, actual));
assertTrue(e.getMessage().contains("amount")); assertTrue(e.getMessage().contains("amount"));
assertEquals("ulord:" + MAINNET_GOOD_SEGWIT_ADDRESS + "?message=segwit%20rules", UlordURI.convertToBitcoinURI( SegwitAddress.fromBech32(MAINNET, MAINNET_GOOD_SEGWIT_ADDRESS), null, null, "segwit rules"));
assertEquals(tx.toString().contains("No inputs!"), true);
assertEquals(1, wallet.getImportedKeys().size()); assertEquals(key, wallet.getImportedKeys().get(0)); assertEquals("5ca8cd6c01aa004d3c5396c628b78a4a89462f412f460a845b594ac42eceaa264b0e14dcd4fe73d4ed08ce06f4c28facfa85042d26d784ab2798a870bb7af556", seed);
assertTrue(wallet.isConsistent()); assertEquals("Wrong number of PENDING", 1, wallet.getPoolSize(WalletTransaction.Pool.PENDING)); assertEquals("Wrong number of UNSPENT", 0, wallet.getPoolSize(WalletTransaction.Pool.UNSPENT)); assertEquals("Wrong number of ALL", 2, wallet.getTransactions(true).size()); assertEquals(valueOf(0, 50), wallet.getBalance(Wallet.BalanceType.ESTIMATED));
assertFalse(wallet.isWatching()); assertTrue(watchingWallet.isWatching()); assertFalse(wallet.isWatching());
assertEquals("1.00 BTC", COIN.toFriendlyString()); assertEquals("1.23 BTC", valueOf(1, 23).toFriendlyString()); assertEquals("0.001 BTC", COIN.divide(1000).toFriendlyString()); assertEquals("-1.23 BTC", valueOf(1, 23).negate().toFriendlyString());
assertEquals(CENT, parseCoin("0.01")); assertEquals(CENT, parseCoin("1E-2")); assertEquals(COIN.add(CENT), parseCoin("1.01")); assertEquals(COIN.negate(), parseCoin("-1")); assertEquals(1, parseCoin("0.00000001").value); assertEquals(1, parseCoin("0.000000010").value);
assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax")); assertTrue(e.getMessage().contains("Bad URI syntax"));
assertTrue(e.getMessage().contains("Bad address"));
assertEquals( "UlordURI[\'amount\'=\'654321000000000\',\'label\'=\'Hello World\',\'message\'=\'Be well\',\'address\'=\'1KzTSfqjF2iKCduwz59nv2uqh1W2JsTxZH\']", testObject.toString());
assertEquals(ONE_EURO, NO_CODE.parseFiat("EUR", "1"));
assertEquals("2016-02-13T22:59:39Z", Utils.dateTimeFormat(block700000.getTime()));
assertEquals("B", p.get("A").toString()); assertEquals("D", p.get("C").toString()); assertEquals("D", p.get("A").toString()); assertEquals("E", p.get("B").toString()); assertEquals("D", p.get("C").toString());
assertEquals(doc1.getDocumentElement().getChildNodes().getLength(), 5); assertEquals(doc2.getDocumentElement().getChildNodes().getLength(), 5);
assertEquals(p.get("A").toString(), "B"); assertEquals(p.get("C").toString(), "D");
assertEquals(Tuple4.class, schema.getTypeInfo().getTypeClass()); assertEquals("Java Tuple2<String, Java Tuple4<Integer, Long, String, Double>>", tuple2TypeInformation.toString());
assertEquals(String.class, schema.getTypeInfo().getTypeClass()); assertEquals("Java Tuple2<String, String>", tuple2TypeInformation.toString());
assertEquals(5, tuple5.getArity()); assertArrayEquals(row, new Object[]{ tuple5.f0, tuple5.f1, tuple5.f2, tuple5.f3, tuple5.f4 });
assertTrue("Type information should be PojoTypeInfo", typeInfo instanceof PojoTypeInfo); assertEquals(Event.class, schema.getTypeInfo().getTypeClass()); assertEquals("Java Tuple2<String, PojoType<org.apache.flink.streaming.siddhi.source.Event, fields = [id: Integer, name: String, price: Double, timestamp: Long]>>", tuple2TypeInformation.toString());
assertThat(listOfLanguageStats.size(), is(2)); assertThat(listOfLanguageStats, hasItem(new LanguageStatsMatcher(JAVA, Lists.newArrayList(1), Lists.newArrayList(snapshotDate)))); assertThat(listOfLanguageStats, hasItem(new LanguageStatsMatcher(PYTHON, Lists.newArrayList(1), Lists.newArrayList(snapshotDate))));
assertThat(str, stringContainsInOrder(asList("id", ":", "123456789"))); assertThat(str, stringContainsInOrder(asList("organizationId", ":", "987654321"))); assertThat(str, stringContainsInOrder(asList("snapshotDate", ":", "" + date)));
assertThat(projectList, hasSize(1)); assertThat(projectList.get(0), equalTo(p));
assertThat(LanguageStats.buildStats(Lists.newArrayList()), empty());
assertThat(languageStats.getLanguageName(), is("unknown"));
assertEquals(20 + 10 + 5 + 2, scorer.score(project)); assertEquals(0, scorer.score(project));
assertEquals(1, galantos.size()); assertFalse(projects.isEmpty()); assertFalse(contributors.isEmpty());
assertThat(listOfLanguageStats.size(), is(1));
assertEquals(converter.convertToDatabaseColumn(list), "[\\"element_1\\",\\"element_2\\"]");
assertEquals(100, connStr);
assertEquals(converter.convertToDatabaseColumn(set), "[1,2]");
assertEquals(json, sourceString);
assertEquals(10000, connStr);
assertEquals(set.size(), 2);
assertEquals(list.size(), 2);
assertEquals(10000L, connStr);
assertEquals(set.size(), 2);
assertEquals(converter.convertToDatabaseColumn(list), "[1,2]");
assertEquals(list.size(), 2);
assertEquals(new ObjectMapper().writeValueAsString(componentSource), sourceString);
assertEquals("localhost", connStr);
assertEquals(true, connStr);
assertTrue(valid);
assertEquals(actual, expected);
assertEquals("\'\\\\\'\'", ForcePreparedStatement.toSoqlStringParam("\'")); assertEquals("\'\\\\\\\\\'", ForcePreparedStatement.toSoqlStringParam("\\\\")); assertEquals("\'\\\\\';DELETE DATABASE \\\\\\\\a\'", ForcePreparedStatement.toSoqlStringParam("\';DELETE DATABASE \\\\a"));
assertEquals(actual, expected);
assertEquals(String.class, ForcePreparedStatement.getParamClass("test")); assertEquals(Long.class, ForcePreparedStatement.getParamClass(1L)); assertEquals(Object.class, ForcePreparedStatement.getParamClass(new SimpleDateFormat())); assertNull(ForcePreparedStatement.getParamClass(null));
assertEquals(3, actuals.size()); assertEquals("Name", fieldDef.getName()); assertEquals("string", fieldDef.getType()); assertEquals("Id", fieldDef.getName()); assertEquals("id", fieldDef.getType()); assertEquals("maxLastName", fieldDef.getName()); assertEquals("string", fieldDef.getType()); assertEquals("Id", fieldDef.getName()); assertEquals("id", fieldDef.getType());
assertEquals(actual, expected);
assertEquals(1, actuals.size()); assertEquals("Name", actuals.get(0).getName()); assertEquals("string", actuals.get(0).getType());
assertEquals(" select name from Account", statement.removeCacheHints(" Cache global select name from Account"));
assertEquals(actual, expected);
assertEquals("int", actual.typeName); assertEquals(Types.INTEGER, actual.sqlDataType);
assertEquals(actual, expected);
assertEquals(actual, expected);
assertEquals(2017, calendar.get(Calendar.YEAR)); assertEquals(Calendar.JUNE, calendar.get(Calendar.MONTH)); assertEquals(23, calendar.get(Calendar.DAY_OF_MONTH));
assertEquals(1, actuals.size()); assertEquals("MIN", actuals.get(0).getName()); assertEquals("string", actuals.get(0).getType());
assertEquals(1, actuals.size()); assertEquals("Count", actuals.get(0).getName()); assertEquals("int", actuals.get(0).getType());
assertEquals(ForcePreparedStatement.CacheMode.SESSION, statement.getCacheMode("CACHE SESSION select name from Account")); assertEquals(ForcePreparedStatement.CacheMode.GLOBAL, statement.getCacheMode(" Cache global select name from Account")); assertEquals(ForcePreparedStatement.CacheMode.NO_CACHE, statement.getCacheMode("select name from Account")); assertEquals(ForcePreparedStatement.CacheMode.NO_CACHE, statement.getCacheMode(" Cache unknown select name from Account"));
assertEquals(expected.size(), actual.size()); assertTrue(actual.contains(l));
assertEquals(1, actuals.size()); assertEquals("nameCount", actuals.get(0).getName()); assertEquals("int", actuals.get(0).getType());
assertEquals("SELECT Something FROM Anything WERE name = \'one\' AND age > 123", actual);
assertEquals(2, actuals.size()); assertEquals("Id", actuals.get(0).getName()); assertEquals("id", actuals.get(0).getType()); assertEquals("Name", actuals.get(1).getName()); assertEquals("string", actuals.get(1).getType());
assertEquals(1, actuals.size()); assertEquals("Id", actuals.get(0).getName()); assertEquals("id", actuals.get(0).getType());
assertEquals("other", actual.typeName); assertEquals(Types.OTHER, actual.sqlDataType);
assertEquals(3, actuals.size()); assertEquals("one", actuals.get(0)); assertEquals("two", actuals.get(2)); assertNull(actuals.get(1));
assertEquals(expected, actual);
assertThat(merged.getColumnsCount(), is(2)); assertThat(merged.getRowsCount(), is(5)); assertThat(merged.getColumn(0), is(Arrays.asList("Vehicle type", "Car", "Car", "Truck", "Truck"))); assertThat(merged.getColumn(1), is(Arrays.asList("Brand", "Audi", "Mercedes", "Volvo", "DAF"))); assertThat(dt.getColumnsCount(), is(3));
assertEquals(expected, victim.process(prefix, nameRequest().originalName(originalName)));
assertTrue(outline.hasChildren()); assertEquals(2, outline.getOpenCount());
assertTrue("Different exception expected.", e.getMessage().startsWith("Wrong files map size"));
assertEquals("34_prefix_", victim.process("prefix_", nameRequest().page(34)));
assertEquals(new PDRectangle(0, 0, 595f, 842), page.getMediaBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getCropBox()); assertEquals(new PDRectangle(50, 100, 300, 600), page.getArtBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getBleedBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getTrimBox());
assertEquals(1, victim.getPageDestinationsForLevel(2).getPages().size());
assertEquals(3, outFolder.list().length);
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(file.getParent(), tmp.getParent());
assertNotNull(instance);
assertEquals(6, victim.getPages(20).size());
assertNotNull(provider.getConfigurationStream());
assertEquals("1-2", new PageRange(1, 2).toString()); assertEquals("2", new PageRange(2, 2).toString()); assertEquals("2-", new PageRange(2).toString());
assertTrue(victim.isValid(BigDecimal.ONE, null));
assertNotNull(IOUtils.createTemporaryBuffer(new FileTaskOutput(new File("test.pdf"))));
assertThat(Arrays.asList(outputFolder.getRoot().list()), hasItem("existing(3).pdf"));
assertThat(merged.getColumnsCount(), is(3)); assertThat(merged.getColumn(0), is(Arrays.asList("H1", "A1", "A2", "A3"))); assertThat(merged.getColumn(1), is(Arrays.asList("H2", "B1", "B2", ""))); assertThat(merged.getColumn(2), is(Arrays.asList("H4", "D1", "E2", "")));
assertThat(new PageNumbersListAdapter("1").getPageNumbers(), contains(1)); assertThat(new PageNumbersListAdapter("1,3,6").getPageNumbers(), contains(1, 3, 6)); assertThat(new PageNumbersListAdapter(" 1, 3, 6 ").getPageNumbers(), contains(1, 3, 6));
assertEquals(new PDRectangle(0, 0, 892.5f, 1263f), page.getMediaBox()); assertEquals(new PDRectangle(0, 0, 600, 1200), page.getCropBox()); assertEquals(new PDRectangle(0, 0, 300, 600), page.getArtBox()); assertEquals(new PDRectangle(0, 0, 300, 600), page.getBleedBox()); assertEquals(new PDRectangle(0, 0, 300, 600), page.getTrimBox());
assertEquals("stringValue", XMLUtils.nullSafeGetStringAttribute(node, "stringAttr")); assertNull(XMLUtils.nullSafeGetStringAttribute(node, "chuckNorris")); assertNull(node2); assertNull(XMLUtils.nullSafeGetStringAttribute(node2, "kick"));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(SystemUtils.getJavaIoTmpDir().getAbsolutePath(), tmp.getParent());
assertTrue(victim.isValid(0.3f, null));
assertNotNull(provider.getConfigurationStream());
assertTrue(victim.isValid(mockFile, null));
assertFalse(victim.isValid(box, null));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(dir.getAbsolutePath(), tmp.getParent());
assertFalse(annotations.isEmpty()); assertNull(parent.getPopup());
assertEquals(0, doc.getNumberOfPages()); assertEquals(1, doc.getNumberOfPages());
assertThat(dt.getColumn(1), is(Arrays.asList("", "Audi", "Mercedes", "Volvo", "DAF")));
assertTrue(victim.isUnbounded());
assertEquals(1, dest.list().length); assertEquals(1, context.notifiableTaskMetadata().taskOutput().size()); assertThat(context.notifiableTaskMetadata().taskOutput().get(0).getName(), startsWith("1")); assertThat(context.notifiableTaskMetadata().taskOutput().get(0).getName(), endsWith("1.pdf"));
assertEquals(dest, OutlineUtils.toPageDestination(victim, catalog).get());
assertTrue(widget.getCOSObject().containsKey(COSName.V)); assertTrue(widget.getCOSObject().containsKey(COSName.SV)); assertTrue(widget.getCOSObject().containsKey(COSName.LOCK));
assertFalse(new OptimizationRuler(OptimizationPolicy.NO).apply(mock(PDDocument.class)));
assertEquals(0, newPage.getAnnotations().size()); assertTrue(annotationsLookup.isEmpty());
assertTrue(new OptimizationRuler(OptimizationPolicy.YES).apply(mock(PDDocument.class)));
assertTrue(victim.isValid(mockFile, null));
assertEquals(0, victim.getPageDestinationsForLevel(2).getPages().size()); assertEquals(1, victim.getPageDestinationsForLevel(3).getPages().size());
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(3840)); assertTrue("Decrypted bytes should be used", IOUtils.contentEquals( result.getCOSObject().getFilteredStream(), customNonPdfInput("image/large.jpg").getSource() ) );
assertFalse(victim.isValid(params, context));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertTrue(outline.hasChildren()); assertEquals(1, outline.getOpenCount());
assertEquals(2, victim.getPages().size());
assertTrue(victim.isValid(null, null));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(SystemUtils.getJavaIoTmpDir().getAbsolutePath(), tmp.getParent());
assertThat(victim.styledLabelFor(110), is("110"));
assertThat(victim.getFilteredStream(), instanceOf(DeflaterInputStream.class));
assertTrue("Different exception expected.", e.getMessage().endsWith("must be a file."));
assertEquals(expected, victim.process(prefix, nameRequest(SejdaFileExtensions.TXT_EXTENSION)));
assertEquals(1, out.list().length);
assertFalse(victim.isValid(box, null));
assertEquals(2, flat.size()); assertEquals("child2", flat.get(0).title);
assertThat(new PdfTextExtractorByArea().extractFooterText(page).trim(), isEmptyOrNullString());
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(560)); assertThat(result.getWidth(), is(1400)); assertFalse("Original bytes should not be used; the image should be converted from CMYK to RGB", IOUtils.contentEquals(result.getCOSObject().getFilteredStream(), customNonPdfInput("image/cmyk.jpg").getSource()));
assertFalse("temporary file not deleted", tempFile.exists()); assertEquals(out.size(), tempFile.length());
assertFalse(victim.isValid(new BigInteger("-3"), null));
assertFalse(victim.isValid(params, context));
assertEquals(prefix, victim.process(prefix, null));
assertNull(result.getPassword()); assertThat(result.getSource(), CombinableMatcher.<File> either(is(new File("/tmp/inputFile1.pdf"))).or( is(new File("c:\\\\tmp\\\\inputFile1.pdf"))));
assertEquals(oldPage.getAnnotations().size(), newPage.getAnnotations().size()); assertEquals(secondOld.getAnnotations().size(), secondNew.getAnnotations().size());
assertFalse(victim.isValid(mockFile, null));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertEquals("prefix_5_name.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name").page(5)));
assertTrue(victim.isValid(null, null));
assertFalse(widget.getCOSObject().containsKey(COSName.V)); assertFalse(widget.getCOSObject().containsKey(COSName.SV)); assertFalse(widget.getCOSObject().containsKey(COSName.LOCK));
assertEquals(0, Margins.inchesToPoints(0), 0); assertEquals(144, Margins.inchesToPoints(2), 0); assertEquals(100.8, Margins.inchesToPoints(1.4), 0);
assertTrue(intoThis.isNeedAppearances());
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals("Unable to open \'dumbo.pdf\' due to a wrong password.", e.getMessage());
assertFalse(victim.isValid(new BigDecimal("-1.111"), null));
assertTrue(to.isBold()); assertTrue(to.isItalic()); assertEquals("Chuck", to.getTitle()); assertNull(to.getCOSObject().getDictionaryObject(COSName.C));
assertEquals("O", to.getMotion());
assertEquals(2, victim.getFilteredLength());
assertTrue("Different exception expected.", e.getMessage().startsWith("Unable to write"));
assertTrue(OutlineUtils.getFlatOutline(doc).isEmpty());
assertTrue(victim.isValid(null, null));
assertTrue(victim.getPageDestinationsForLevel(4).getPages().isEmpty()); assertEquals(2, victim.getPageDestinationsForLevel(2).getPages().size()); assertEquals(1, victim.getPageDestinationsForLevel(3).getPages().size());
assertTrue(victim.getPageSelection().isEmpty()); assertFalse(victim2.getPageSelection().isEmpty());
assertTrue(field.getCOSObject().containsKey(COSName.V)); assertTrue(field.getCOSObject().containsKey(COSName.SV)); assertTrue(field.getCOSObject().containsKey(COSName.LOCK));
assertTrue(victim.isValid(null, null));
assertEquals(5, OutlineUtils.getFlatOutline(doc).size());
assertTrue(victim.isValid(null, null));
assertEquals("prefix_3_name.txt", new PrefixTypesChain(prefix).process(prefix, nameRequest("txt").originalName("name.pdf").fileNumber(3)));
assertFalse(victim.isValid(box, null));
assertEquals(0, newPage.getAnnotations().size()); assertTrue(annotationsLookup.isEmpty());
assertTrue(victim.isValid(params, null));
assertThat(cloned, is(instanceOf(PDPageFitHeightDestination.class))); assertEquals(newPage, cloned.getPage()); assertEquals(20, ((PDPageFitHeightDestination) cloned).getLeft());
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertFalse("Original bytes should not be used; the image should be converted from ICC Gray to RGB", IOUtils.contentEquals(result.getCOSObject().getFilteredStream(), customNonPdfInput("image/icc_profile_gray.png").getSource()));
assertFalse(victim.isValid(BigInteger.ZERO, null));
assertTrue(victim.isAllPages()); assertFalse(victim.isAllPages());
assertFalse(victim.isValid(BigDecimal.ZERO, null));
assertEquals(3, levels.size()); assertTrue(levels.contains(1)); assertTrue(levels.contains(2)); assertTrue(levels.contains(3));
assertTrue(new OptimizationRuler(OptimizationPolicy.AUTO).apply(document));
assertEquals(2, dest.list().length); assertEquals(2, context.notifiableTaskMetadata().taskOutput().size()); assertEquals("1_of_2.pdf", context.notifiableTaskMetadata().taskOutput().get(0).getName()); assertEquals("2_of_2.pdf", context.notifiableTaskMetadata().taskOutput().get(1).getName());
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertThat(HumanReadableSize.toString(12345L), is("12.35 KB")); assertThat(HumanReadableSize.toString(12345L, true), is("12 KB"));
assertEquals("I", to.getMotion());
assertFalse(victim.isValid(-1l, null));
assertFalse(victim.isValid(params, null));
assertFalse(victim.isValid(mockFile, null));
assertFalse(victim.isValid(-0.1d, null));
assertTrue(victim.isValid(params, null));
assertEquals(prefix, victim.process(prefix, nameRequest()));
assertNotNull(handler.getUnderlyingPDDocument()); assertNotNull(handler.getUnderlyingPDDocument());
assertEquals(3, victim.getPdfFileSources().size());
assertEquals(3, new MultiplePageRangeSetAdapter("all:12-14:32,12-14,4,34-:").ranges().size());
assertTrue(victim.isValid(null, null));
assertThat(mergedList.size(), is(1)); assertThat(merged.toString(), is("\\n" + "+--------------+\\n" + "|H1| | |H2|H3|\\n" + "+--------------+\\n" + "|A1| | |A2|A3|\\n" + "+--------------+\\n" + "|C1|CX|CY|C2|C3|\\n" + "+--------------+\\n"));
assertTrue(victim.isValid(null, null));
assertTrue(victim.isValid(params, null));
assertTrue(victim.isValid(0.3d, null));
assertTrue(victim.isValid(mockFile, null));
assertEquals(2, dest.list().length); assertEquals(1, context.notifiableTaskMetadata().taskOutput().size());
assertTrue(victim.isValid(null, null));
assertTrue(victim.isValid(1l, null)); assertTrue(victim.isValid(0l, null));
assertFalse(OutlineUtils.toPageDestination(victim, null).isPresent());
assertEquals(0, intoThis.getQuadding());
assertEquals(PdfVersion.VERSION_1_4, new PdfVersionAdapterWithFallback("4").getVersion());
assertEquals(3, victim.getPdfFileSources().size());
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals(1, victim.tocNumberOfPages());
assertFalse("temporary file not deleted", tempFile.exists()); assertTrue(out.size() > 0);
assertTrue(base.intersects(intersecion)); assertTrue(base.intersects(included)); assertFalse(base.intersects(noIntersection));
assertEquals(2, result.size()); assertFalse(result.get(0).isAllPages()); assertTrue(result.get(1).isAllPages());
assertFalse(victim.isValid(new Dimension(-10, -20), null));
assertEquals("", IOUtils.toSafeFilename(null));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertEquals(5, list.size()); assertEquals("1 Hello world.pdf", list.get(0).getName()); assertEquals("2 test_file.pdf", list.get(1).getName()); assertEquals("3 test_file.pdf", list.get(2).getName()); assertEquals("10 Blablabla.pdf", list.get(3).getName()); assertEquals("11 test_file.pdf", list.get(4).getName());
assertEquals(COSInteger.THREE, victim.getItem(COSName.A));
assertTrue(new OptimizationRuler(OptimizationPolicy.AUTO).apply(document));
assertEquals(2, victim.tocNumberOfPages());
assertEquals(0, noRotation.getLeft()); assertEquals((int) PDRectangle.A4.getHeight(), noRotation.getTop()); assertEquals(0, rotation90.getLeft()); assertEquals(0, rotation90.getTop()); assertEquals((int) PDRectangle.A4.getWidth(), rotation180.getLeft()); assertEquals(0, rotation180.getTop()); assertEquals((int) PDRectangle.A4.getWidth(), rotation270.getLeft()); assertEquals((int) PDRectangle.A4.getHeight(), rotation270.getTop());
assertEquals(5, OutlineUtils.toPageDestination(victim, catalog).get().getPageNumber());
assertThat(DataTableUtils.areComplementary( Arrays.asList("Header", "", " "), Arrays.asList("", "Value1", "Value2") ), is(true)); assertThat(DataTableUtils.areComplementary( Arrays.asList("Header1", "ValueA", ""), Arrays.asList("Header2", "", "Value2") ), is(false));
assertEquals(expected, page.getMediaBox()); assertEquals(expected, page.getCropBox()); assertEquals(expected, page.getArtBox()); assertEquals(expected, page.getBleedBox()); assertEquals(expected, page.getTrimBox());
assertThat(clonedDest, is(instanceOf(PDPageXYZDestination.class))); assertEquals(759, ((PDPageXYZDestination) clonedDest).getTop()); assertEquals(56, ((PDPageXYZDestination) clonedDest).getLeft());
assertEquals(0, intoThis.getQuadding());
assertThat(new DataTable(1).getPagesAsString(), is("Page 1")); assertThat(new DataTable(new TreeSet<>(Arrays.asList(2, 3))).getPagesAsString(), is("Pages 2, 3")); assertThat(new DataTable(new TreeSet<>(Arrays.asList(1, 3, 5))).getPagesAsString(), is("Pages 1, 3, 5")); assertThat(new DataTable(new TreeSet<>(Arrays.asList(2, 3, 4, 5))).getPagesAsString(), is("Pages 2-5"));
assertFalse(victim.isValid(-0.1d, null));
assertFalse(victim.isValid(box, null));
assertTrue("Different exception expected, got: " + e.getMessage(), e.getMessage().startsWith("Unable to generate a new filename that does not exist"));
assertEquals("prefix_", victim.process("prefix_", null));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(file.getParent(), tmp.getParent());
assertNotNull(new DefaultPdfSourceOpener().open(PdfStreamSource.newInstanceWithPassword( getClass().getClassLoader().getResourceAsStream("pdf/encrypted_AES256_user_pwd.pdf"), "my source", "test")));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(SystemUtils.getJavaIoTmpDir().getAbsolutePath(), tmp.getParent());
assertEquals(new PDRectangle(0, 0, 595f, 842), page.getMediaBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getCropBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getArtBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getBleedBox()); assertEquals(new PDRectangle(0, 0, 400, 800), page.getTrimBox());
assertEquals("I", to.getMotion());
assertEquals("that", intoThis.getDefaultAppearance());
assertThat(dt.getRowsCount(), is(5));
assertEquals(0, newPage.getAnnotations().size()); assertTrue(annotationsLookup.isEmpty());
assertEquals(3, victim.getPageDestinationsForLevel(1).getPages().size());
assertNotNull(instance);
assertEquals(9, victim.getPages(50).size()); assertEquals(16, victim2.getPages(25).size());
assertEquals("O", to.getMotion());
assertEquals(0, victim.tocNumberOfPages());
assertTrue(victim.isValid(params, null));
assertTrue(victim.isValid(null, null));
assertEquals(2, keys.size()); assertTrue(keys.contains(PdfMetadataFields.AUTHOR)); assertTrue(keys.contains(PdfMetadataFields.CREATOR)); assertFalse(keys.contains(PdfMetadataFields.KEYWORDS));
assertTrue(victim.encryptable()); assertTrue(victim.encryptable());
assertThat(dt.getColumnsCount(), is(3));
assertNotNull(new DefaultPdfSourceOpener().open(PdfStreamSource.newInstanceWithPassword( getClass().getClassLoader().getResourceAsStream("pdf/encrypted_AES128_user_pwd.pdf"), "my source", "test")));
assertTrue(victim.isValid(null, null));
assertTrue(SignatureClipper.clipSignature(field)); assertFalse(field.getCOSObject().containsKey(COSName.V)); assertFalse(field.getCOSObject().containsKey(COSName.SV)); assertFalse(field.getCOSObject().containsKey(COSName.LOCK));
assertThat(new RectangularBoxAdapter("[2:3][10:20]").getRectangularBox(), is(RectangularBox.newInstance(2, 3, 10, 20)));
assertEquals(1, victim.getBottom()); assertEquals(0, victim.getLeft()); assertEquals(9, victim.getTop()); assertEquals(10, victim.getRight());
assertEquals(2, dest.list().length); assertEquals(2, context.notifiableTaskMetadata().taskOutput().size());
assertEquals("1_Invoice#0001", IOUtils.toSafeFilename("1_Invoice#0001:*<>/\\\\")); assertEquals("..test", IOUtils.toSafeFilename("../test")); assertEquals("..test", IOUtils.toSafeFilename("..\\\\test")); assertEquals(".test", IOUtils.toSafeFilename("./test")); assertEquals("rest", IOUtils.toSafeFilename("\\r\\n\\t\\frest"));
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertTrue(victim.isValid(BigInteger.ONE, null)); assertTrue(victim.isValid(BigInteger.ZERO, null));
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(3840)); assertThat(result.getWidth(), is(5760)); assertTrue("Original bytes should be used", IOUtils.contentEquals(result.getCOSObject().getFilteredStream(), customNonPdfInput("image/large.jpg").getSource()));
assertEquals(6, annots.size()); assertThat(annots.stream().map(PDAnnotation::getAnnotationName).collect(Collectors.toList()), Matchers.contains(annotations.stream().map(PDAnnotation::getAnnotationName) .map(d -> Matchers.equalTo(d)).collect(Collectors.toList())));
assertFalse(victim.isValid(mockFile, null));
assertTrue(victim.isValid(BigInteger.ONE, null));
assertFalse(victim.isValid(params, null));
assertThat(HumanReadableSize.toString(123456789L), is("123.46 MB")); assertThat(HumanReadableSize.toString(123456789L, true), is("123 MB"));
assertEquals(PDViewerPreferences.READING_DIRECTION.L2R, ViewerPreferencesUtils.getDirection(PdfDirection.LEFT_TO_RIGHT)); assertEquals(PDViewerPreferences.READING_DIRECTION.R2L, ViewerPreferencesUtils.getDirection(PdfDirection.RIGHT_TO_LEFT));
assertTrue(victim.isValid(params, null));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertEquals(1, levels.size()); assertTrue(levels.contains(3));
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(103)); assertThat(result.getWidth(), is(248));
assertEquals("I", to.getMotion());
assertFalse(victim.isValid(mockFile, null));
assertTrue(victim.isValid(new File("I will be created"), null));
assertEquals(5, flatOutline.size()); assertEquals(1, flatOutline.get(0).page); assertEquals(1, flatOutline.get(1).page); assertEquals(3, flatOutline.get(2).page); assertEquals(3, flatOutline.get(3).page); assertEquals(5, flatOutline.get(4).page);
assertThat(new NumberingAdapter("22:arabic").getNumbering().getLogicalPageNumber(), is(22)); assertThat(new NumberingAdapter("1:arabic").getNumbering().getNumberingStyle(), is(NumberingStyle.ARABIC));
assertFalse(victim.isValid(mockFile, null));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(dir.getAbsolutePath(), tmp.getParent());
assertTrue(victim.isValid(box, null));
assertNull(from.getTitle()); assertNotNull(to.getTitle());
assertThat(mergedList.size(), is(1)); assertThat(merged.toString(), is("\\n" + "+--------------+\\n" + "|H1| |H2| |H3|\\n" + "+--------------+\\n" + "|A1|AX|A2| |A3|\\n" + "+--------------+\\n" + "|C1| |C2|CX|C3|\\n" + "+--------------+\\n"));
assertNotNull(OutlineUtils.resolvePageDestination((PDPageDestination) child2.getDestination(), document)); assertNotNull(OutlineUtils.resolvePageDestination((PDPageDestination) child.getDestination(), document)); assertNull(OutlineUtils.resolvePageDestination(negative, document)); assertNull(OutlineUtils.resolvePageDestination(notFound, document));
assertEquals(annotationsLookup.lookup(annotation2), newPage.getAnnotations().get(0));
assertTrue(XMLUtils.nullSafeGetBooleanAttribute(node, "chuckNorris", true));
assertTrue(victim.isValid(params, null));
assertFalse(victim.isValid(-0.1f, null));
assertNotNull(new DefaultPdfSourceOpener().open(PdfStreamSource.newInstanceNoPassword( getClass().getClassLoader().getResourceAsStream("pdf/test_file.pdf"), "my source")));
assertEquals(new PDRectangle(0, 0, 595, 842), page.getMediaBox()); assertEquals(cropBox, page.getCropBox()); assertEquals(new PDRectangle(150, 300, 100, 200), page.getArtBox()); assertEquals(new PDRectangle(150, 300, 100, 200), page.getBleedBox()); assertEquals(new PDRectangle(150, 300, 100, 200), page.getTrimBox());
assertEquals("prefix_name.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name")));
assertThat(RectangleUtils.translate(100, 50, in), is(new PDRectangle(100, 50, 396, 612)));
assertEquals(0, existing.length()); assertEquals(1, existing.getParentFile().list().length); assertEquals(0, existing.getParentFile().listFiles()[0].length());
assertTrue(outline.hasChildren());
assertFalse(victim.isValid(box, null));
assertTrue(victim.isValid(1l, null));
assertEquals(expected, victim.process(prefix, nameRequest().originalName(originalName)));
assertTrue(listener.isStarted());
assertEquals("prefix_name.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name")));
assertFalse(Files.isDirectory(out)); assertTrue(Files.isDirectory(out));
assertEquals(0, existing.length()); assertEquals(1, existing.getParentFile().list().length); assertEquals(4, existing.getParentFile().listFiles()[0].length());
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals("5_prefix_name.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name").page(5)));
assertFalse(prefix.equals(victim.process(prefix, nameRequest())));
assertEquals(2, destination.getQuadding()); assertEquals("/ArialMT 0 Tf 0 g ", destination.getDefaultAppearance()); assertTrue(destination.isNeedAppearances()); assertTrue(destination.getDefaultResources().getCOSObject().size() > 0);
assertTrue(victim.isValid(new Dimension(10, 20), null));
assertEquals(2, outFile.getParentFile().list().length);
assertThat(merged.getRowsCount(), is(5)); assertThat(merged.getColumnsCount(), is(2)); assertThat(merged.getColumn(0), is(Arrays.asList("Vehicle type", "Car", "Car", "Truck", "Truck"))); assertThat(merged.getColumn(1), is(Arrays.asList("Brand", "Audi", "Mercedes", "Volvo", "DAF")));
assertThat(new RectangularBoxAdapter("[2:3][10:]").getRectangularBox(), is(RectangularBox.newInstance(2, 3, 10, 20)));
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals("chuck.norris", tmp.getName());
assertEquals(prefix, victim.process(prefix, nameRequest()));
assertTrue("Different exception expected.", e.getMessage().startsWith("Unable to make destination"));
assertNull(fontOrFallback("\\u1B2A\\u1B35\\u1B31\\u1B29\\u1B2E\\u1B36, \\u1B29\\u1B32\\u1B29\\u1B2E\\u1B36", HELVETICA, new PDDocument()));
assertEquals(PDViewerPreferences.PRINT_SCALING.None, ViewerPreferencesUtils.getPrintScaling(PdfPrintScaling.NONE)); assertEquals(PDViewerPreferences.PRINT_SCALING.AppDefault, ViewerPreferencesUtils.getPrintScaling(PdfPrintScaling.APP_DEFAULT));
assertEquals(HELVETICA, fontOrFallback("Chuck", HELVETICA, new PDDocument()));
assertEquals(1, newPage.getAnnotations().size());
assertNotNull(new FileOutputAdapter(folder.newFile().getAbsolutePath()).getFileOutput());
assertEquals(PercentageOfWorkDoneChangedEvent.class, ReflectionUtils.inferParameterClass(victim.getClass(), "onEvent"));
assertFalse(annotations.isEmpty()); assertEquals(1, parent.size()); assertTrue(annotations.contains(parent.get(0)));
assertTrue(new OptimizationRuler(OptimizationPolicy.AUTO).apply(document));
assertTrue(victim.isValid(params, null));
assertEquals("prefix_", victim.process("prefix_", null));
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(560)); assertThat(result.getWidth(), is(1400)); assertFalse("Original bytes should not be used; the image should be converted from CMYK to RGB", IOUtils.contentEquals(result.getCOSObject().getFilteredStream(), customNonPdfInput("image/cmyk.jpg").getSource()));
assertEquals(PDViewerPreferences.DUPLEX.Simplex, ViewerPreferencesUtils.getDuplex(PdfDuplex.SIMPLEX)); assertEquals(PDViewerPreferences.DUPLEX.DuplexFlipLongEdge, ViewerPreferencesUtils.getDuplex(PdfDuplex.DUPLEX_FLIP_LONG_EDGE)); assertEquals(PDViewerPreferences.DUPLEX.DuplexFlipShortEdge, ViewerPreferencesUtils.getDuplex(PdfDuplex.DUPLEX_FLIP_SHORT_EDGE));
assertTrue(victim.isValid(0.3d, null)); assertTrue(victim.isValid(0d, null));
assertEquals(expected, victim.process(prefix, nameRequest().originalName(originalName)));
assertEquals("chuck(1).norris", IOUtils.findNewNameThatDoesNotExist(file).getName()); assertEquals("chuck(2).norris", IOUtils.findNewNameThatDoesNotExist(file).getName());
assertTrue(tmp.exists()); assertTrue(tmp.isFile()); assertEquals(dir.getAbsolutePath(), tmp.getParent());
assertTrue(victim.isValid(null, null));
assertFalse(annotations.isEmpty()); assertEquals(1, parent.size()); assertTrue(annotations.contains(parent.get(0)));
assertEquals(1, victim.getPages(5).size()); assertEquals(2, victim.getPages(10).size()); assertThat(victim.getPages(15), CoreMatchers.hasItems(5, 10, 15));
assertEquals("prefix_", victim.process("prefix_", nameRequest()));
assertEquals(0, victim.getPageDestinationsForLevel(2).getPages().size());
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertTrue(XMLUtils.nullSafeGetBooleanAttribute(node, "boolVal")); assertFalse(XMLUtils.nullSafeGetBooleanAttribute(node, "chuckNorris"));
assertTrue(victim.isValid(null, null));
assertEquals("one.txt", victim.getSpecificResultFilename(1, ".txt")); assertEquals("two.pdf", victim.getSpecificResultFilename(2)); assertEquals("three.json", victim.getSpecificResultFilename(3, "")); assertNull(victim.getSpecificResultFilename(10));
assertEquals(annotationsLookup.lookup(annotation2), newPage.getAnnotations().get(0));
assertTrue("Different exception expected.", e.getMessage().startsWith("Unable to write"));
assertThat(HumanReadableSize.toString(123L), is("123 bytes")); assertThat(HumanReadableSize.toString(123L, true), is("123 bytes"));
assertEquals(PdfVersion.VERSION_1_6, new PdfVersionAdapterWithFallback("1.6").getVersion());
assertThat(result.getPassword(), is("secret123")); assertThat(result.getSource(), CombinableMatcher.<File> either(is(new File("/tmp/inputFile1.pdf"))).or( is(new File("c:\\\\tmp\\\\inputFile1.pdf"))));
assertEquals("prefix_name", victim.process("prefix_", nameRequest().originalName("name")));
assertEquals(destination.getPage(), OutlineUtils.toPageDestination(victim, null).get().getPage());
assertEquals(new Point(10, 50), new PointAdatper("10,50").getPoint()); assertEquals(new Point(-10, -550), new PointAdatper("-10,-550").getPoint());
assertEquals("I", to.getMotion());
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertEquals(new Dimension(100, 50), new DimensionAdapter("100x50").getDimension());
assertEquals(1, victim.getPdfFileSources().size());
assertEquals("1_Invoice0001", IOUtils.toStrictFilename("1_Invoice#0001:*<>/\\\\"));
assertEquals(3, victim.getPdfFileSources().size()); assertEquals("7.pdf", victim.getPdfFileSources().get(0).getName()); assertEquals("14.pdf", victim.getPdfFileSources().get(1).getName()); assertEquals("44.pdf", victim.getPdfFileSources().get(2).getName());
assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE)); assertThat(result.getHeight(), is(103));
assertEquals("O", to.getMotion());
assertFalse(victim.isValid(new Dimension(10, -20), null));
assertFalse(victim.isEmpty());
assertEquals("MCMX", RomanNumbersUtils.toRoman(1910)); assertEquals("MCMLIV", RomanNumbersUtils.toRoman(1954)); assertEquals("MCMXC", RomanNumbersUtils.toRoman(1990)); assertEquals("C", RomanNumbersUtils.toRoman(100));
assertTrue(victim.isValid(folder.newFolder(), null));
assertFalse(victim.hasToc()); assertTrue(victim.hasToc());
assertTrue(victim.hasId()); assertEquals(id, victim.id());
assertTrue(outline.hasChildren());
assertEquals(0, newPage.getAnnotations().size()); assertTrue(annotationsLookup.isEmpty());
assertFalse(OutlineUtils.toPageDestination(victim, catalog).isPresent());
assertEquals(annotationsLookup.lookup(annotation), newPage.getAnnotations().get(0));
assertThat(result.getPassword(), is("secret.pdf:password")); assertThat(result.getSource(), CombinableMatcher.<File> either(is(new File("/tmp/inputFile1.pdf"))).or( is(new File("c:\\\\tmp\\\\inputFile1.pdf"))));
assertThat(victim.styledLabelFor(110), is("CX"));
assertTrue(victim.isValid(params, null));
assertNotNull(handler.getUnderlyingPDDocument());
assertFalse(victim.isValid(-0.1f, null));
assertTrue(victim.isValid(BigDecimal.ONE, null)); assertTrue(victim.isValid(BigDecimal.ZERO, null));
assertFalse(victim.isValid(new SetMetadataParameters(), null));
assertTrue(new OptimizationRuler(OptimizationPolicy.AUTO).apply(document));
assertTrue(victim.indirectLength()); assertTrue(victim.indirectLength());
assertFalse(victim.isValid(PredefinedSetOfPages.ALL_PAGES, null));
assertEquals(annotationsLookup.lookup(annotation), newPage.getAnnotations().get(0));
assertTrue(victim.isValid(params, null));
assertThat(new RectangularBoxAdapter("[2:3][10]").getRectangularBox(), is(RectangularBox.newInstance(2, 3, 10, 20)));
assertEquals(new PDRectangle(0, 0, 595f, 842), page.getMediaBox()); assertEquals(new PDRectangle(0, 0, 595f, 842), page.getCropBox()); assertEquals(new PDRectangle(0, 0, 595f, 842), page.getArtBox()); assertEquals(new PDRectangle(0, 0, 595f, 842), page.getBleedBox()); assertEquals(new PDRectangle(0, 0, 595f, 842), page.getTrimBox());
assertEquals(null, ReflectionUtils.inferParameterClass(victim.getClass(), "onEvent"));
assertTrue(victim.isValid(box, null));
assertEquals(annotationsLookup.lookup(annotation2), newPage.getAnnotations().get(0));
assertTrue(tmp.exists()); assertTrue(tmp.isFile());
assertEquals(annotationsLookup.lookup(annotation), newPage.getAnnotations().get(0));
assertEquals(prefix, victim.process(prefix, nameRequest()));
assertTrue(victim.isValid(0.3f, null)); assertTrue(victim.isValid(0f, null));
assertEquals(PdfPageTransitionStyle.GLITTER_LEFT_TO_RIGHT, victim.getPdfPageTransition().getStyle()); assertEquals(2, victim.getPdfPageTransition().getTransitionDuration()); assertEquals(3, victim.getPdfPageTransition().getDisplayDuration());
assertEquals("prefix_5.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name").page(5)));
assertThat(Arrays.asList(outputFolder.getRoot().list()), hasItem("ok.pdf"));
assertTrue("Different exception expected.", e.getMessage().startsWith("Wrong output destination"));
assertThat(textAndFonts.get(0).getFont().getName(), is("Helvetica")); assertThat(textAndFonts.get(0).getText(), is("ab cd"));
assertNull(intoThis.getDefaultResources().getCOSObject().getItem(COSName.FONT));
assertEquals("prefix_", victim.process("prefix_", nameRequest()));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertTrue(victim.isValid(mockFile, null));
assertFalse(OutlineUtils.toPageDestination(victim, null).isPresent());
assertEquals(5, victim.getPages(10).size()); assertEquals(4, victim2.getPages(15).size());
assertTrue(outline.hasChildren()); assertEquals(3, outlineChildCount);
assertFalse(victim.isValid(new Dimension(-10, 20), null));
assertFalse(victim.isValid(box, null));
assertTrue(victim.isUndetermined());
assertFalse(SignatureClipper.clipSignature(null));
assertEquals(expected, page.getMediaBox()); assertEquals(expected, page.getCropBox()); assertEquals(expected, page.getTrimBox()); assertEquals(expected, page.getArtBox()); assertEquals(expected, page.getBleedBox());
assertNull(handler.addBlankPageIfOdd(new PDRectangle(10, 10))); assertNotNull(handler.addBlankPageIfOdd(new PDRectangle(10, 10)));
assertEquals("5_prefix_name.pdf", new PrefixTypesChain(prefix).process(prefix, nameRequest().originalName("name").page(5)));
assertFalse(victim.isValid(params, context));
assertTrue(new TableOfContentsCreator(params, new PDDocument()).shouldGenerateToC()); assertFalse(new TableOfContentsCreator(new MergeParameters(), new PDDocument()).shouldGenerateToC()); assertFalse(new TableOfContentsCreator(new MergeParameters(), new PDDocument()).shouldGenerateToC());
assertEquals(expected, victim.process(prefix, nameRequest()));
assertEquals(0, out.length()); assertEquals(4, out.length());
assertFalse(victim.hasToc()); assertTrue(victim.hasToc());
assertFalse(victim.isValid(-1l, null));
assertTrue(outline.hasChildren()); assertEquals(5, outline.getOpenCount());
assertFalse(victim.isValid(folder.newFile(), null));
assertFalse(outline.hasChildren());
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertEquals(annotationsLookup.lookup(annotation), newPage.getAnnotations().get(0));
assertEquals(90, rotation);
assertTrue(victim.isValid(null, null));
assertThat(font.getName(), is("Arial-BoldMT")); assertThat(FontUtils.canDisplay("Redacted out :)", font), is(false));
assertEquals(2, outFile.getParentFile().list().length);
assertEquals(90, d.getPage(1).getRotation());
assertTrue(victim.isValid(params, null));
assertEquals(1, victim.getPages(5).size()); assertEquals(2, victim.getPages(15).size());
assertEquals(expected, victim.process(prefix, nameRequest().originalName(originalName)));
assertEquals(expected, victim.process(prefix, nameRequest().page(page)));
assertThat(dt.getRow(0), is(Arrays.asList("H1", "", "H2", "H3"))); assertThat(dt.getRow(1), is(Arrays.asList("A1", "", "A2", "A3")));
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertEquals(expected, victim.process(prefix, nameRequest().fileNumber(fileNumber)));
assertThat(e.getMessage(), containsString("does not exist"));
assertTrue(new PageRange(1,1).contains(1)); assertTrue(new PageRange(1,2).contains(1)); assertTrue(new PageRange(1,2).contains(2)); assertTrue(new PageRange(1).contains(1)); assertTrue(new PageRange(1).contains(2)); assertFalse(new PageRange(2).contains(1)); assertFalse(new PageRange(2, 3).contains(1)); assertFalse(new PageRange(2, 3).contains(4));
assertEquals(1, dest.list().length); assertEquals(1, context.notifiableTaskMetadata().taskOutput().size()); assertThat(context.notifiableTaskMetadata().taskOutput().get(0).getName(), startsWith("1")); assertThat(context.notifiableTaskMetadata().taskOutput().get(0).getName(), endsWith("a.pdf")); assertThat(context.notifiableTaskMetadata().taskOutput().get(0).getName().length(), is(lessThan(256)));
assertEquals(1, out.list().length);
assertEquals(1, intoThis.getQuadding());
assertTrue(widget.getCOSObject().containsKey(COSName.V)); assertTrue(widget.getCOSObject().containsKey(COSName.SV)); assertTrue(widget.getCOSObject().containsKey(COSName.LOCK));
assertThat(result.getHeight(), is(103));
assertNotNull(instance);
assertTrue(victim.hasNextPage()); assertThat(new PdfTextExtractorByArea() .extractTextFromArea(victim.nextPage(), new Rectangle(54, 56, 60, 21)).trim(), is("First page")); assertTrue(victim.hasNextPage()); assertThat(new PdfTextExtractorByArea() .extractTextFromArea(victim.nextPage(), new Rectangle(54, 56, 60, 21)).trim(), is("Second page")); assertFalse(victim.hasNextPage());
assertThat(clonedDest, is(instanceOf(PDPageFitWidthDestination.class))); assertEquals(806, ((PDPageFitWidthDestination) clonedDest).getTop());
assertThat(new PdfTextExtractorByArea().extractFooterText(page).trim(), is("My Footer 20"));
assertNotNull(new DirectoryOutputAdapter(folder.newFolder().getAbsolutePath()).getPdfDirectoryOutput());
assertThat(videoEncoder.getInputCommandQueue()).isEmpty(); assertThat(videoEncoder.getOutputCommandQueue()).isEmpty();
assertEquals(create.byteBuffer(2, 2, 2), decoderInputBuffer);
assertEquals(pair1, pair2); assertEquals(pair1.hashCode(), pair2.hashCode());
assertEquals(250, mediaFormatCaptor.getValue().getVideoBitRateInKBytes());
assertThat(encoder.getInputCommandQueue()).isEmpty(); assertThat(encoder.getOutputCommandQueue()).isEmpty();
assertNull(frame);
assertEquals(0, frame.getBufferIndex()); assertEquals(1, frame.getBufferIndex());
assertFalse(eof.equals(frame)); assertFalse(frame.equals(eof));
assertEquals(300, multipleMediaSource.getSegmentsDurationInMicroSec());
assertEquals(create.byteBuffer(1, 2, 3), decoderInputBuffer);
assertEquals(MediaFormatType.VIDEO, videoEncoder.getMediaFormatType());
assertEquals(1, videoEncoder.getTrackId());
assertThat(encoder.getInputCommandQueue()).isEmpty();
assertFalse(frameBuffer.canPull());
assertEquals(Frame.EOF(), Frame.EOF()); assertTrue(Frame.EOF().equals(Frame.EOF()));
assertEquals(250, mediaFormatCaptor.getValue().getVideoBitRateInKBytes());
assertEquals(Frame.EOF(), actualFrame);
assertThat(decoder.getInputCommandQueue()).contains(Command.NeedData, 0);
assertEquals("(NULL, 0)", pair.toString());
assertTrue(shouldBeTrue);
assertEquals(100, actualVideoFormat.getValue().getVideoBitRateInKBytes()); assertEquals(10, actualVideoFormat.getValue().getVideoFrameRate()); assertEquals(1, actualVideoFormat.getValue().getVideoIFrameInterval()); assertEquals(2130708361, actualVideoFormat.getValue().getInteger("color-format"));
assertEquals(pair1, pair2); assertEquals(pair1.hashCode(), pair2.hashCode());
assertEquals(null, effector.getFrame());
assertThat(encoder.getInputCommandQueue()).equalsTo(Command.NeedData);
assertThat(encoder.getInputCommandQueue()).equalsTo(Command.NeedData);
assertTrue(eof.equals(frame)); assertTrue(frame.equals(eof));
assertThat(decoder.getInputCommandQueue()).equalsTo(new Pair<Command, Integer>(Command.NextPair, 0), new Pair<Command, Integer>(Command.NeedData, 0));
assertEquals("(NULL, NULL)", pair.toString());
assertFalse(decoder.isLastFile());
assertEquals("(HasData, NULL)", pair.toString());
assertNull(commandQueue.first());
assertNull(decoder.getSurface());
assertEquals(listener, videoEncoder.listeners.get(0));
assertEquals(MediaFormatType.AUDIO, audioEncoder.getMediaFormatType());
assertThat(encoder.getInputCommandQueue()).equalsTo(Command.NeedData, Command.NeedData);
assertEquals("Conversion from celsius to fahrenheit failed", expected, actual, 0.001);
assertThat("Conversion from celsius to fahrenheit failed", expected, is(actual));
assertEquals("Conversion from celsius to fahrenheit failed", expected, actual, 0.001);
assertThat("Conversion from celsius to fahrenheit failed", expected, is(actual));
assertEquals("Conversion from celsius to fahrenheit failed", expected, actual, 0.001);
assertEquals("Conversion from celsius to fahrenheit failed", expected, actual, 0.001);
assertEquals("someone%27s%20badNULL%20url", UrlEncoder.FULL_PATH_INSTANCE.encode("someone\'s bad\\0 url", CharEncoding.UTF_8));
assertEquals("1234567890987654321234567890987654321234567890987654321", bigInteger.toString());
assertEquals(1234567890987654321L, bigInteger.longValue());
assertEquals(-1234567890987654321L, bigInteger.longValue());
assertEquals("-1234567890987654321234567890987654321234567890987654321", bigInteger.toString());
assertFalse("\'null\' folders are not deleted.", Files.removeFolder(null)); assertFalse("Non existing folders are not deleted.", Files.removeFolder(new File( "/somethingThatDoesntExistsOnMostMachines-111111111111111111111111111111"))); assertTrue(folder.isDirectory()); assertTrue(file.exists()); assertTrue("Should be able to delete a folder.", Files.removeFolder(folder));
assertEquals(12345, bigInteger.intValue());
assertEquals("someone%27s%20bad%20url", UrlEncoder.FULL_PATH_INSTANCE.encode("someone\'s bad url", CharEncoding.UTF_8));
assertEquals(File.separator + "file with whitespace", Files.getLocalFileFromUrl(url).getPath());
assertTrue(Duration.seconds(0.5).lessThan(Duration.benchmark(new Runnable() { @Override public void run() { Duration.seconds(1.5).sleep(); } }))); assertTrue(Duration.seconds(1).greaterThan(Duration.benchmark(new Runnable() { @Override public void run() { Duration.hours(-1).sleep(); } })));
assertEquals("path;jsessionid=1234567890", encoded);
assertEquals(-12345, bigInteger.intValue());
assertThat(lines).contains("line1", "line2", "line3");
assertThat(config.createProvider().isPresent()).isFalse();
assertThat(outputStream.toString()).containsIgnoringCase("please supply a business key");
assertThat(SecurityGroups.formatNameFromBusinessKey("test")).isEqualTo("network-test");
assertThat(content) .contains("download_file {\\"/opt/test.tar.gz\\":\\n" + " uri => \\"http: "}") .contains("download_file {\\"/opt/google.html\\":\\n" + " uri => \\"http: "}"); assertThat(activity.createAdditionalFiles(pool, null)).isEmpty();
assertThat(content).contains(username) .contains(adminAccess.getPublicKey().split(" ")[1]) .contains(String.format("user { \\"%s\\":", username)) .contains(String.format("file { \\"/home/%s/.ssh\\":", username));
assertThat(machines).hasSize(2); assertThat(machines.get(0).getPublicDnsName()).isEqualTo("i1.amazonaws.com");
assertThat((Boolean) collector.getVariable(RESULT)).isFalse();
assertThat(outputStream.toString()).contains("jenkins").contains("cdh3");
assertThat((Boolean) collector.getVariable(RESULT)).isTrue();
assertThat(outputStream.toString()).isEqualTo("Services: p1, p2\\n");
assertThat(headers).containsAll(ImmutableList.of("a", "b", "c"));
assertThat(entries).containsAll(ImmutableList.of( Maps.immutableEntry("a", "1"), Maps.immutableEntry("b", "2")));
assertThat((Boolean) collector.getVariable(RESULT)).isTrue();
assertThat(cells).contains(Tables.immutableCell("0", "a", "1"));
assertThat(content).contains( "Package { ensure => \\"installed\\" }\\n" + "\\n" + "package { \\"git-core\\": }\\n" + "package { \\"vim\\": }\\n" );
assertThat(provisionr.convertTimeoutToISO8601TimeDuration(600)).isEqualTo("PT10M"); assertThat(provisionr.convertTimeoutToISO8601TimeDuration(601)).isEqualTo("PT601S"); assertThat(provisionr.convertTimeoutToISO8601TimeDuration(300)).isEqualTo("PT5M"); assertThat(provisionr.convertTimeoutToISO8601TimeDuration(42)).isEqualTo("PT42S");
assertThat((Boolean) collector.getVariable(RESULT)).isFalse();
assertThat(provider.isPresent()).isTrue(); assertThat(provider.get().getEndpoint().isPresent()).isFalse(); assertThat(provider.get().getOptions().containsKey("region")).isFalse();
assertThat(byteArrayOutputStream.toString()).contains("template-1").contains("template-one");
assertThat((Boolean) collector.getVariable(RESULT)).isTrue();
assertThat(byteArrayOutputStream.toString()).contains("No option specified");
assertThat(collectStdOutput()) .contains("[diagrams/test-bpm-2.bpmn20.xml]") .contains("[diagrams/test-bpm-3.bpmn20.xml]") .contains("[diagrams/test-bpm-1.bpmn20.xml]") .contains("[ListActivitiCommandTest.testListCommand]");
assertThat(result) .contains("zone-1") .contains("zone-one") .contains("false");
assertEquals(emptySet(), headers.headerNames());
assertEquals(3, contentTypes.size()); assertTrue(contentTypes.contains(ContentType.valueOf("application/json"))); assertTrue(contentTypes.contains(ContentType.valueOf("text/plain"))); assertTrue(contentTypes.contains(ContentType.valueOf("application/octet-stream")));
assertEquals(singletonList("[{\\"partition\\":\\"0\\",\\"offset\\":\\"0\\"},{\\"partition\\":\\"1\\",\\"offset\\":\\"10\\"}"), headers.get("X-Nakadi-Cursors"));
assertEquals(-1L, headers.getContentLength());
assertThat(request.getHeaders().headerNames(), contains(Headers.AUTHORIZATION)); assertThat(request.getHeaders().getFirst(Headers.AUTHORIZATION), equalTo(BEARER_TOKEN));
assertEquals("from listener", e.getMessage());
assertThat(serializer.deserialize(null), is(nullValue()));
assertEquals("from listener", e.getMessage());
assertThat(serializer.deserialize(null), is(nullValue()));
assertEquals(emptyList(), headers.get("Content-Type"));
assertThat(taskFromMarkFlow).isEqualTo(task);
assertThat(all).isNotNull(); assertThat(all).isNotEmpty(); assertThat(firstWorkspace.getId()).isPositive(); assertThat(firstWorkspace.getName()).isNotEmpty();
assertThat(usedAuthProvider).isInstanceOf(ApiKeyAuthProvider.class);
assertThat(all.size()).isEqualTo(100);
assertThat(usedAuthProvider).isInstanceOf(ApiKeyAuthProvider.class);
assertThat(encodedString).contains("task[title]=Title"); assertThat(encodedString).contains("&"); assertThat(encodedString).contains("task[task_type_name]=Bug");
assertThat(task.getReadyToPull()).isTrue();
assertThat(usedAuthProvider).isInstanceOf(ApiKeyAuthProvider.class);
assertThat(workspace).isNotNull(); assertThat(workspace.getId()).isPositive(); assertThat(workspace.getName()).isEqualTo(givenWorkspaceName);
assertThat(workspace).isNotNull(); assertThat(workspace.getId()).isPositive(); assertThat(workspace.getName()).isEqualTo(givenWorkspaceName);
assertThat(fetchedIssue.getId()).isEqualTo(issue.getId()); assertThat(fetchedIssue).isEqualTo(issue);
assertThat(usedAuthProvider).isInstanceOf(UserPassAuthProvider.class);
assertThat(underscoredName).isEqualTo("account_id");
assertThat(task.getReadyToPull()).isFalse();
assertThat(union.union().get(FieldName.of("first")).deprecated()).isNotPresent(); assertThat(union.union().get(FieldName.of("second")).deprecated()).hasValue("Use \'first\'.");
assertThat(FieldNameValidator.capitalize(FieldName.of("my-variant"))).isEqualTo("My-variant"); assertThat(FieldNameValidator.capitalize(FieldName.of("my_variant"))).isEqualTo("My_variant");
assertThat(conjure.types() .imports() .get(TypeName.of("ExampleAnyImport")) .baseType()) .isEqualTo(PrimitiveType.fromString("any"));
assertThat(CaseConverter.toCase("foo-bar-baz", CaseConverter.Case.LOWER_CAMEL_CASE)) .isEqualTo("fooBarBaz"); assertThat(CaseConverter.toCase("foo-bar-baz", CaseConverter.Case.SNAKE_CASE)) .isEqualTo("foo_bar_baz");
assertThat(object.fields().get(FieldName.of("old")).deprecated()).hasValue("Test deprecated.");
assertThat(conjure.types().conjureImports()).containsKey(Namespace.of("imports"));
assertThat(one.value()).isEqualTo("ONE"); assertThat(one.deprecated()).isNotPresent(); assertThat(two.value()).isEqualTo("TWO"); assertThat(two.deprecated()).hasValue("Prefer ONE.");
assertThat(CaseConverter.toCase("foo_bar_baz", CaseConverter.Case.KEBAB_CASE)) .isEqualTo("foo-bar-baz"); assertThat(CaseConverter.toCase("foo_bar_baz", CaseConverter.Case.LOWER_CAMEL_CASE)) .isEqualTo("fooBarBaz");
assertThat(FieldNameValidator.capitalize(FieldName.of("myVariant"))).isEqualTo("MyVariant");
assertThat(CaseConverter.toCase("fooBarBaz", CaseConverter.Case.KEBAB_CASE)) .isEqualTo("foo-bar-baz"); assertThat(CaseConverter.toCase("fooBarBaz", CaseConverter.Case.SNAKE_CASE)) .isEqualTo("foo_bar_baz");
assertThat(PackageValidator.components("foo.bar.baz")).containsExactly("foo", "bar", "baz");
assertThat(result.types().conjureImports()).isNotEmpty();
assertEquals(json, writer.toString());
assertEquals("0 rows X 0 cols", table1.shape());
assertEquals(fromCol, fromIdx);
assertEquals(3, col1.countUnique()); assertEquals(3, col1.unique().size());
assertEquals(table.columnNames(), row.columnNames());
assertEquals(0, t.missingValueCounts().doubleColumn(1).get(0), 0.00001);
assertEquals(11, column1.countUnique());
assertNotNull(table); assertEquals(3, table.columnCount());
assertEquals( " bush.csv " + LINE_END + " date | approval | who |" + LINE_END + "-----------------------------------" + LINE_END + " 2004-02-04 | 53 | fox |", row.toString());
assertEquals( "\\"colA\\",\\"colB\\"\\n\\"a\\",\\"1\\"\\n\\"b\\",\\"2\\"\\n", writer.toString().replaceAll("\\\\r\\\\n", "\\n"));
assertTrue( thrown .getMessage() .contains("Class TableSlice does not support the removeColumns operation"));
assertEquals(14, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals("fox", result.getString(0, "who")); assertFalse(result.getString(0, "who").startsWith("f"));
assertEquals(16, joined.columnCount()); assertEquals(14, joined.rowCount());
assertEquals(5, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(1, column.getDouble(4), 0.0); assertEquals(0, column.getDouble(0), 0.0);
assertEquals(12, getMonthValue(day2)); assertEquals(2010, getYear(day2)); assertEquals(30, getDayOfMonth(day2));
assertTrue(Arrays.deepEquals(expected, results));
assertEquals(aggregated.rowCount(), group.size());
assertEquals(8, joined.columnCount()); assertEquals(3, joined.rowCount());
assertEquals("", c1.get(0)); assertEquals("Value 1", c1.get(1)); assertEquals("Value 2", c1.get(2));
assertArrayEquals( new double[] {0.181, 0.181, 0.181, 0.186, 0.181, 0.181, missing}, col.asDoubleArray());
assertEquals(0, Table.create("t").columnCount()); assertEquals(1, table.columnCount());
assertEquals(Double.NaN, result.getDouble(0), 0.0); assertEquals(1, result.getDouble(1), 0.0); assertEquals(0, result.getDouble(2), 0.0); assertEquals(1, result.getDouble(3), 0.0); assertEquals(2, result.getDouble(4), 0.0);
assertEquals(4, table.columnCount()); assertEquals("[C0, C1, C3, C4]", table.columnNames().toString());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(fromCol, fromIdx);
assertEquals("colA,colB\\na,1\\nb,2\\n", writer.toString().replaceAll("\\\\r\\\\n", "\\n"));
assertEquals(TextColumnType.instance(), types[0]); assertEquals(DateColumnType.instance(), types[1]); assertEquals(StringColumnType.instance(), types[2]);
assertEquals(0, table.rowCount()); assertEquals(1, table.rowCount()); assertEquals(2, table.rowCount());
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual);
assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before CURRENT_ROW"));
assertTrue(thrown.getMessage().contains("Cannot build when a column is staged"));
assertEquals(3, column.size());
assertEquals(3, column1.countUnique());
assertTrue(empty.isEmpty()); assertEquals(doubles.name(), empty.name());
assertEquals(3, joined.columnCount()); assertEquals(8, joined.rowCount()); assertEquals(8, joined.column("Animal").size()); assertEquals(0, joined.column("Animal").countMissing()); assertEquals(8, joined.column("Name").size()); assertEquals(2, joined.column("Name").countMissing()); assertEquals(8, joined.column("Feed").size()); assertEquals(2, joined.column("Feed").countMissing());
assertEquals(aggregated1.rowCount(), aggregated2.rowCount());
assertEquals(dc1.get(0).plusDays(100), dc2.get(0));
assertEquals(3, joined.columnCount()); assertEquals(3, joined.rowCount()); assertEquals(3, joined.column("ID").size());
assertEquals(4, column.size());
assertNotNull(winsModel.toString());
assertEquals(31, lengthOfMonth(packed)); assertEquals(30, lengthOfMonth(packed));
assertEquals("11", t.getString(0, "Value")); assertEquals("1", t.getString(1, "Value")); assertEquals("00:04:02", t.getString(2, "Value")); assertEquals("18:04:02", t.getString(3, "Value"));
assertEquals(1, countMissing.summarize(c), 0.0001); assertEquals(11, countWithMissing.summarize(c), 0.0001); assertEquals(StatUtils.percentile(values, 90), percentile90.summarize(c), 0.0001); assertEquals(StatUtils.percentile(values, 95), percentile95.summarize(c), 0.0001); assertEquals(StatUtils.percentile(values, 99), percentile99.summarize(c), 0.0001); assertEquals(10, countUnique.summarize(c), 0.0001);
assertTrue(count < 575_000); assertTrue(count > 425_000);
assertEquals((short) (rowVal + 1), row.getShort(1)); assertEquals(rowVal + 2, row.getShort("approval"));
assertEquals("Value 2", c1.get(0)); assertEquals("Value 3", c1.get(1)); assertEquals("", c1.get(3));
assertEquals(1, t.stringColumn(0).countMissing()); assertEquals(1, t.numberColumn(1).countMissing()); assertEquals(1, t.numberColumn(2).countMissing());
assertEquals(3, result);
assertNotNull(table); assertEquals(3, table.columnCount());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(table1.columnNames(), metadata1.columnNames());
assertEquals(30, joined.columnCount()); assertEquals(14, joined.rowCount());
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual);
assertEquals(3, joined.columnCount()); assertEquals(6, joined.rowCount()); assertEquals(6, joined.column("Animal").size());
assertTrue( thrown.getMessage().contains("Function: SUM Is not compatible with column type: STRING"));
assertEquals(asLocalDate(day2), day.plusWeeks(2));
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(table1.name(), metadata1.getTableName());
assertEquals(0, doubles.countMissing()); assertEquals(10, doubles.countMissing());
assertEquals(source.columns().get(0).size(), slice.columns().get(0).size());
assertEquals(fromCol, fromIdx);
assertEquals(7, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals(asLocalDate(day2), day.minusWeeks(5));
assertNotNull(slice.get(0, 1)); assertEquals(source.get(10, 1), slice.get(0, 1));
assertEquals(8, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(5, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(2, joined.columnCount()); assertEquals(8, joined.rowCount());
assertEquals(8, joined.columnCount()); assertEquals(9, joined.rowCount());
assertEquals(3, joined.columnCount()); assertEquals(6, joined.rowCount()); assertEquals(6, joined.column("Date").size());
assertNotNull(test.summary());
assertEquals(9, n.get(0), 0); assertEquals(12, n.get(1), 0); assertEquals(15, n.get(2), 0);
assertFalse(doubles.isEmpty()); assertTrue(doubles.isEmpty());
assertEquals(3, column1.countUnique());
assertSame(t.column("c2"), second); assertSame(t.column("c1"), first); assertSame(t.column("c2"), replacement); assertEquals(t.columnIndex(replacement), colIndex);
assertEquals(fromCol, fromIdx);
assertEquals(5, table.rowCount());
assertEquals(2, instanceColumn.isEqualTo(afterInst).get(0));
assertFalse(table.isEmpty());
assertTrue(slice.isEmpty()); assertFalse(source.isEmpty());
assertEquals(c.name(), cmd.getName());
assertEquals(2, dataframe.nrows());
assertEquals(11, getMonthValue(day2)); assertEquals(2010, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertTrue(Arrays.deepEquals(expected, results));
assertEquals(localTime.until(localTime2, MINUTES), minutesUntil(packedTime2, packedTime));
assertEquals(20, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(3, t1.rowCount()); assertEquals(LocalDate.of(2004, 2, 5), t1.dateColumn(0).get(2));
assertEquals(2, result.rowCount());
assertEquals(10, joined.columnCount()); assertEquals(8, joined.rowCount());
assertEquals(15, joined.columnCount()); assertEquals(10, joined.rowCount());
assertEquals(7, getMonthValue(day2)); assertEquals(2011, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertEquals(nameList, options.getSelectedColumns());
assertTrue(Arrays.deepEquals(expected, results));
assertArrayEquals(expected, actual);
assertFalse(table.isEmpty());
assertEquals(3, joined.columnCount()); assertEquals(8, joined.rowCount()); assertEquals(8, joined.column("Animal").size()); assertEquals(0, joined.column("Animal").countMissing()); assertEquals(8, joined.column("Name").size()); assertEquals(2, joined.column("Name").countMissing()); assertEquals(8, joined.column("Feed").size()); assertEquals(2, joined.column("Feed").countMissing());
assertEquals(table1.rowCount(), metadata1.getRowCount());
assertEquals(3, column1.countUnique());
assertEquals(table.dateColumn(0).getIntInternal(row.getRowNumber()), row.getPackedDate(0)); assertEquals( table.dateColumn("date").getIntInternal(row.getRowNumber()), row.getPackedDate("date"));
assertEquals(fromCol, fromIdx);
assertEquals(fromCol, fromIdx);
assertEquals(1, getMonthValue(day2)); assertEquals(2012, getYear(day2)); assertEquals(10, getDayOfMonth(day2));
assertFalse(column.none()); assertTrue(filtered.none());
assertEquals(table.doubleColumn(6).getDouble(row.getRowNumber()), row.getDouble(6), 0.01); assertEquals( table.doubleColumn("OBP").getDouble(row.getRowNumber()), row.getDouble("OBP"), 0.01);
assertTrue(count < 575_000); assertTrue(count > 425_000);
assertEquals(3, column.size());
assertEquals(3, ints.countUnique()); assertEquals(3, ints.unique().size());
assertEquals(t.rowCount(), results[0].rowCount() + results[1].rowCount());
assertEquals(fromCol, fromIdx);
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(15, joined.columnCount()); assertEquals(10, joined.rowCount()); assertEquals(10, joined.column("State").size()); assertEquals(10, joined.column("Age").size());
assertEquals("Alaska", selection.get(0)); assertEquals("Arizona", selection.get(1)); assertEquals("Arkansas", selection.get(2)); assertEquals(49, selection.size());
assertEquals(INTEGER, columnTypes[3]); assertEquals(INTEGER, columnTypes[7]);
assertEquals(now.getSecond(), getSecond(pack(now)));
assertEquals(58.0, slice.reduce("approval", sum), 0.0001);
assertEquals(1.0, xtab.doubleColumn(xtab.columnCount() - 1).getDouble(0), 0.00001);
assertEquals( table.dateTimeColumn(11).getLongInternal(row.getRowNumber()), row.getPackedDateTime(11)); assertEquals( table.dateTimeColumn("DateTime").getLongInternal(row.getRowNumber()), row.getPackedDateTime("DateTime"));
assertEquals(tableSlice.column("approval").asList(), source.column("approval").asList());
assertEquals(8, joined.columnCount()); assertEquals(3, joined.rowCount());
assertArrayEquals(expected, actual);
assertTrue(thrown.getMessage().contains("duplicate column"));
assertEquals(table1.columnCount(), metadata1.columnCount());
assertEquals(source.columnNames(), slice.columnNames());
assertEquals(366, lengthOfYear(packed)); assertEquals(365, lengthOfYear(packed));
assertEquals(column2.getIntInternal(i + 2), column1.getIntInternal(i));
assertEquals(2, table.columnCount()); assertEquals(3, table.rowCount()); assertEquals("Date", table.column(0).name()); assertEquals("Value", table.column(1).name()); assertEquals(ColumnType.LONG, table.columnTypes()[0]); assertEquals(1453438800000L, table.column("Date").get(0));
assertEquals(3, column1.countMissing());
assertEquals(first.get(0, 1), slice.get(0, 1)); assertEquals(first.get(0, 1), source.get(2, 1));
assertEquals(fromCol, fromIdx);
assertArrayEquals(new double[] {1.0, 2.0, 3.0, 4.0}, col.asDoubleArray());
assertArrayEquals( expected.asDoubleArray(), col1.set(col1.isMissing(), 7.0).asDoubleArray(), 0.0001);
assertEquals(fromCol, fromIdx);
assertTrue(out.contains("3.0E-6")); assertTrue(out.contains("123.000003"));
assertTrue( thrown .getMessage() .contains("must be greater than the number preceding at the end of the window "));
assertEquals(time.getLong(ChronoField.NANO_OF_DAY), toNanoOfDay(pTime));
assertEquals(today.getYear(), getYear(pack(today)));
assertEquals(table.stringColumn(2).get(row.getRowNumber()), row.getString(2)); assertEquals(table.stringColumn("who").get(row.getRowNumber()), row.getString("who"));
assertEquals(table.floatColumn(6).getFloat(row.getRowNumber()), row.getFloat(6), 0.01); assertEquals( table.floatColumn("OBP").getFloat(row.getRowNumber()), row.getFloat("OBP"), 0.01);
assertEquals(updateVal1, row.getText(2)); assertEquals(updateVal2, row.getText("who"));
assertEquals(4, table.columnCount()); assertEquals("[stop_id, stop_name, stop_lat, stop_lon]", table.columnNames().toString());
assertEquals(ColumnType.INTEGER, actual.columnTypes()[0]); assertEquals(expected.column("A").asList(), actual.column("A").asList()); assertEquals(expected.column("B").asList(), actual.column("B").asList()); assertEquals(expected.column("C").asList(), actual.column("C").asList());
assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)));
assertEquals(table1.shape(), metadata1.shape());
assertEquals(20957.0, slice.reduce("approval", sum), 0.0001);
assertFalse(fromIdx.isEmpty()); assertEquals(fromCol, fromIdx); assertEquals(fromCol, fromIdx1);
assertEquals(2, table.rowCount());
assertEquals(date.getDayOfWeek(), getDayOfWeek(dateTime));
assertEquals(3, longs.countUnique()); assertEquals(3, longs.unique().size());
assertEquals(now.getMinute(), getMinute(pack(now)));
assertEquals(4, dummies.size());
assertEquals(0, instanceColumn.isBefore(baselineInst).get(0)); assertEquals(1, instanceColumn.isBefore(afterInst).get(1));
assertEquals("Column col2 is not present in table myTable", thrown.getMessage());
assertEquals(5, joined.rowCount()); assertEquals(2, joined.columnCount());
assertEquals("0 rows X 0 cols", table1.shape());
assertEquals(5, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(javaScript, Center.centerBuilder(1, 2, 3).build().asJavascript());
assertEquals(2, summary.columnCount()); assertEquals(2, summary.rowCount()); assertEquals("false", summary.getUnformatted(0, 0)); assertEquals("5.0", summary.getUnformatted(0, 1)); assertEquals("true", summary.getUnformatted(1, 0)); assertEquals("2.0", summary.getUnformatted(1, 1));
assertArrayEquals(new double[] {2.0, 6.0}, col.asDoubleArray());
assertEquals(-1, column.firstIndexOf("test"));
assertEquals(DOUBLE, columnTypes[3]); assertEquals(DOUBLE, columnTypes[7]);
assertEquals( "ISO-8859-1", Source.getCharSet(Paths.get("../data", "urb_cpop1_1_Data.csv").toFile()).name());
assertEquals(LocalTime.NOON, column1.get(0)); assertEquals(LocalTime.NOON, column1.get(1)); assertNotEquals(LocalTime.NOON, column1.get(2)); assertNotEquals(LocalTime.NOON, column1.get(3));
assertNotNull(table); assertEquals(3, table.columnCount());
assertEquals(rowVal + (float) Math.PI, row.getFloat(6), 0.001); assertEquals(rowVal + 2 * (float) Math.PI, row.getFloat("OBP"), 0.001);
assertEquals(6, tables.size());
assertEquals(javaScript, Eye.eyeBuilder(1, 2, 3).build().asJavascript());
assertFalse(table.row(0).isMissing("approval")); assertTrue(table.row(0).isMissing("approval"));
assertNotNull(t1); assertEquals(time.getHour(), t1.getHour()); assertEquals(time.getMinute(), t1.getMinute()); assertEquals(time.getSecond(), t1.getSecond()); assertEquals(time.get(ChronoField.MILLI_OF_SECOND), t1.get(ChronoField.MILLI_OF_SECOND));
assertTrue(pivot.columnNames().contains("who")); assertTrue(pivot.columnNames().contains("2001")); assertTrue(pivot.columnNames().contains("2002")); assertTrue(pivot.columnNames().contains("2003")); assertTrue(pivot.columnNames().contains("2004")); assertEquals(6, pivot.rowCount());
assertEquals(localTime.until(localTime2, HOURS), hoursUntil(packedTime2, packedTime));
assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual);
assertTrue(out.contains("2004-02-04")); assertTrue(out.contains("53")); assertTrue(out.contains("fox"));
assertEquals(2, second.get(0), 0.001); assertEquals(30, second.get(1), 0.001); assertNull(second.get(2));
assertEquals(5, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(2, table.columnCount()); assertEquals(3, table.rowCount()); assertEquals(ColumnType.LONG, table.columnTypes()[0]);
assertEquals(fromCol, fromIdx);
assertEquals(4, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(4, joined.columnCount()); assertEquals(2, joined.rowCount());
assertTrue(thrown.getMessage().contains("duplicate columns"));
assertEquals(dateTime.getDayOfYear(), upacked.getDayOfYear()); assertEquals(dateTime.getHour(), upacked.getHour()); assertEquals(dateTime.getMinute(), upacked.getMinute()); assertEquals(dateTime.getSecond(), upacked.getSecond());
assertEquals(rowVal + Math.PI, row.getDouble(6), 0.001); assertEquals(rowVal + 2 * Math.PI, row.getDouble("OBP"), 0.001);
assertEquals("Alaska", selection.get(0)); assertEquals("Arizona", selection.get(1)); assertEquals("Arkansas", selection.get(2)); assertEquals(49, selection.size());
assertEquals(5, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(2, metadata1.getVersion());
assertEquals(table.columnCount(), row.columnCount());
assertEquals(10, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals(6, joined.columnCount()); assertEquals(2, joined.rowCount()); assertEquals(2, joined.column("Bedrooms").size());
assertEquals(5, table.intColumn("approval").get(table.rowCount() - 1));
assertEquals(source.print(), slice.print());
assertEquals(4, column1.size()); assertEquals(5, column1.size());
assertEquals(5, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(fromCol, fromIdx);
assertEquals(7, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(fromCol, fromIdx); assertEquals(fromCol, fromIdx1);
assertEquals(json, output);
assertEquals(9, joined.columnCount()); assertEquals(18, joined.rowCount());
assertTrue(result.getString(0, "who").startsWith("f"));
assertEquals(6, xtab.columnCount()); assertEquals(1.0, xtab.doubleColumn(1).getDouble(xtab.rowCount() - 1), 0.00001);
assertEquals(985, table.rowCount());
assertEquals( 1.0, xtab.doubleColumn(xtab.columnCount() - 1).getDouble(xtab.rowCount() - 1), 0.00001);
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(3, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(table.booleanColumn(9).get(row.getRowNumber()), row.getBoolean(9)); assertEquals( table.booleanColumn("Playoffs").get(row.getRowNumber()), row.getBoolean("Playoffs"));
assertEquals(3, getMonthValue(day2)); assertEquals(2020, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertEquals(5, joined.columnCount()); assertEquals(32, joined.rowCount());
assertTrue(t.stream().anyMatch(doable));
assertEquals(layout, figure.getLayout()); assertTrue(String.valueOf(figure.getContext().get("figure")).contains(title));
assertEquals(rowVal + 1, row.getLong(1)); assertEquals(rowVal + 2, row.getLong("approval"));
assertArrayEquals(sma5, result.asObjectArray());
assertEquals(table.rowCount(), count);
assertArrayEquals(new double[] {1.0, 2.0, 3.0, 4.0, 5.0}, arr);
assertArrayEquals(new double[] {2.0}, col.asDoubleArray());
assertEquals(0, joined.rowCount()); assertEquals(0, column.size());
assertArrayEquals( expected.asDoubleArray(), col1.set(col1.isMissing(), col2).asDoubleArray(), 0.0001);
assertEquals(now.getMinute(), getMinute(pack(now)));
assertEquals(table1.structure().toString(), metadata1.structure().toString());
assertEquals(source.rowCount(), slice.rowCount()); assertEquals(100, slice1.rowCount());
assertEquals(2, result.size()); assertTrue(result.contains("Alabama")); assertEquals(2, result2.size()); assertTrue(stringColumn.contains("Alabama"));
assertEquals(ColumnType.DOUBLE, SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0));
assertTrue(thrown.getMessage().contains("Cannot stage a column while another is staged"));
assertEquals(instant, parser.parse(instant.toString()));
assertEquals(2, table.rowCount());
assertEquals(15, joined.columnCount()); assertEquals(10, joined.rowCount());
assertEquals(now.get(ChronoField.DAY_OF_WEEK), getDayOfWeek(pack(now)).getValue());
assertNotNull(result);
assertEquals(3, instanceColumn.isMissing().get(0));
assertEquals(10, t.rowCount()); assertEquals(source.get(1, 1), t.get(0, 1));
assertEquals("", c1.get(0)); assertEquals("Value 1", c1.get(1)); assertEquals("Value 2", c1.get(2));
assertArrayEquals( new double[] {missing, 1.0, 2.0, 3.0, 4.0, 5.0, missing}, col.asDoubleArray());
assertEquals(Collections.singletonList(LOCAL_DATE), actual);
assertEquals(0, doubles.isMissing().size()); assertEquals(10, doubles.isNotMissing().size()); assertEquals(10, doubles.isMissing().size()); assertEquals(0, doubles.isNotMissing().size());
assertEquals(dttm_less5, row.getDateTime(11)); assertEquals(dttm_add5, row.getDateTime("DateTime"));
assertFalse(column.all()); assertTrue(filtered.all());
assertArrayEquals( new double[] {0.0, 1.0, 2.0, 0.0, 3.0, 4.0, 5.0, 6.0, 1.0}, result, 0.000_000_1);
assertEquals(fromCol, fromIdx);
assertEquals(3, getMonthValue(day2)); assertEquals(2001, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertEquals(3, joined.columnCount()); assertEquals(3, joined.rowCount());
assertEquals(now.getHour(), getHour(pack(now)));
assertEquals(9, joined.columnCount()); assertEquals(18, joined.rowCount());
assertEquals(15, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(expectedSampleSize, table.rowCount()); assertEquals("[recipe, mix, temp, y]", table.columnNames().toString());
assertEquals(1, t.columnCount()); assertEquals(expectedSampleSize, t.rowCount()); assertEquals(INTEGER, t.column(0).type()); assertEquals(true, values.containsAll(intValues));
assertEquals(source.columnCount(), slice.columnCount());
assertEquals(7, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals(7, joined.columnCount()); assertEquals(8, joined.rowCount());
assertEquals(4, column1.size());
assertEquals(json, writer.toString());
assertEquals(7, joined.columnCount()); assertEquals(6, joined.rowCount());
assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)), 0.0001);
assertEquals(12, getMonthValue(dateTime));
assertEquals(today.getDayOfMonth(), getDayOfMonth(pack(today)));
assertArrayEquals(expected, actual);
assertEquals(date, row.getDate(0)); assertEquals(date, row.getDate("date"));
assertEquals(11, column1.size()); assertEquals(0, column1.size());
assertEquals(dttm_less5, row.getTime(1)); assertEquals(dttm_add5, row.getTime("Time"));
assertEquals(2, table.columnCount()); assertEquals(3, table.rowCount()); assertEquals("a", table.column(0).name()); assertEquals("b.c", table.column(1).name()); assertEquals(ColumnType.LONG, table.columnTypes()[0]);
assertEquals(4, minute.get(0), 0.001); assertEquals(15, minute.get(1), 0.001); assertNull(minute.get(2));
assertEquals(3 * rowCount, t1.rowCount()); assertEquals(rowCount, t1.rowCount());
assertTrue(Arrays.deepEquals(expected, results));
assertEquals(9, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(4, summary.rowCount()); assertEquals(2, summary.columnCount()); assertEquals("Measure", summary.column(0).name()); assertEquals("Value", summary.column(1).name());
assertEquals(323, table.rowCount()); assertEquals("[date, approval, who]", table.columnNames().toString());
assertEquals(instant, parser.parse(col.getUnformattedString(0)));
assertEquals(dateIncrementedByOne, row.getDate(0)); assertEquals(dateIncrementedByTwo, row.getDate("date"));
assertEquals(fromCol, fromIdx);
assertArrayEquals( new double[] {0.0, 1.0, 2.0, 0.0, 3.0, 4.0, 5.0, 1.0}, result.asDoubleArray(), 0.000_000_1);
assertEquals(fromCol, fromIdx);
assertEquals(updateVal1, row.getString(2)); assertEquals(updateVal2, row.getString("who"));
assertEquals(fromCol, fromIdx); assertEquals(fromCol, fromIdx1);
assertEquals(t.rowCount(), results[0].rowCount() + results[1].rowCount()); assertEquals(.75, (double) stratifiedFoxCount / totalFoxCount, 0.0);
assertEquals(9, n.get(0), 0); assertEquals(12, n.get(1), 0); assertEquals(15, n.get(2), 0);
assertEquals(DateColumnType.DEFAULT_PARSER.parse("2013-10-23"), actual);
assertEquals(3, joined.columnCount()); assertEquals(6, joined.rowCount()); assertEquals(6, joined.column("Animal").size());
assertTrue(out.contains(" "));
assertEquals(3, getMonthValue(day2)); assertEquals(2021, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertEquals(result.size(), stringColumn.size() - 1); assertFalse(result.contains("Alabama")); assertEquals(51, stringColumn.size());
assertEquals(sum1, rowConsumer.getSum());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(source.columnIndex("who"), slice.columnIndex("who")); assertEquals(source.columnIndex(who), slice.columnIndex(who));
assertEquals(source.name(), slice.name());
assertEquals(16, joined.columnCount()); assertEquals(14, joined.rowCount());
assertTrue(out.contains("0.000003"));
assertEquals(rowVal + 1, row.getInt(3)); assertEquals(rowVal + 2, row.getInt("RS"));
assertEquals(now.get(ChronoField.SECOND_OF_DAY), getSecondOfDay(pack(now)), 0.0001);
assertEquals(localTime.until(localTime2, SECONDS), secondsUntil(packedTime2, packedTime));
assertEquals(3, shorts.countUnique()); assertEquals(3, shorts.unique().size());
assertEquals(10001, options.getThreadPoolSize());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(table.textColumn(2).get(row.getRowNumber()), row.getText(2)); assertEquals(table.textColumn("who").get(row.getRowNumber()), row.getText("who"));
assertEquals(0, instanceColumn.isNotMissing().get(0)); assertEquals(1, instanceColumn.isNotMissing().get(1)); assertEquals(2, instanceColumn.isNotMissing().get(2));
assertEquals(0, joined.rowCount()); assertEquals(0, column.size());
assertEquals(javaScript, Up.upBuilder(1, 2, 3).build().asJavascript());
assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)));
assertEquals(6, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(53.0, table.row(0).getNumber("approval"));
assertEquals(14, joined.columnCount()); assertEquals(18, joined.rowCount());
assertEquals(8, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(fromCol, fromIdx);
assertEquals(now.getHour(), getHour(pack(now)));
assertEquals(7, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals(nameList, options.getSelectedColumns());
assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before PRECEDING"));
assertEquals(2, instanceColumn.isAfter(baselineInst).get(0));
assertEquals(-1, column.firstIndexOf("test"));
assertEquals(3, doubles.countUnique()); assertEquals(3, doubles.unique().size());
assertEquals(3, joined.columnCount()); assertEquals(8, joined.rowCount()); assertEquals(8, joined.column("Animal").size()); assertEquals(0, joined.column("Animal").countMissing()); assertEquals(8, joined.column("Name").size()); assertEquals(2, joined.column("Name").countMissing()); assertEquals(8, joined.column("Feed").size()); assertEquals(2, joined.column("Feed").countMissing());
assertTrue(out.contains("0.000003"));
assertEquals(3, floats.countUnique()); assertEquals(3, floats.unique().size());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount()); assertEquals(4, joined.column("ID").size());
assertEquals(24, joined.columnCount()); assertEquals(14, joined.rowCount());
assertEquals(!rowVal, row.getBoolean(9)); assertEquals(rowVal, row.getBoolean("Playoffs"));
assertEquals(table.dateColumn(0).get(row.getRowNumber()), row.getObject(0)); assertEquals(table.dateColumn("date").get(row.getRowNumber()), row.getObject("date"));
assertEquals(7, joined.columnCount()); assertEquals(8, joined.rowCount());
assertNotNull(table); assertEquals(3, table.columnCount());
assertEquals(fromCol, fromIdx);
assertTrue(Arrays.equals(array, DoubleArrays.toN(3)));
assertEquals(6, joined.columnCount()); assertEquals(5, joined.rowCount());
assertEquals(name.get(i), name3.get(i));
assertEquals(Collections.singletonList(LOCAL_TIME), actual);
assertEquals(5, joined.rowCount()); assertEquals(1, joined.columnCount());
assertEquals(49, result.rowCount()); assertEquals(3, result.columnCount()); assertEquals( "4.580805569368441", result.where(result.stringColumn("state").isEqualTo("AL")).doubleColumn(1).getString(0));
assertTrue(column.any());
assertFalse(column.none()); assertTrue(column.none());
assertArrayEquals(expected, result, 0.000_000_1);
assertEquals(15, joined.columnCount()); assertEquals(3, joined.rowCount());
assertArrayEquals(expected.asDoubleArray(), col1.set(isMissing, col2).asDoubleArray(), 0.0001);
assertEquals(11, joined.columnCount()); assertEquals(2, joined.rowCount());
assertEquals(now.get(ChronoField.SECOND_OF_DAY), getSecondOfDay(pack(now)), 0.0001);
assertTrue(Arrays.deepEquals(expected, results));
assertNotNull(table, "No table read from multiplesheets.xlsx"); assertEquals("multiplesheets.xlsx#Sheet2", table.name(), "table name is different"); assertNotNull(tableImplicit, "No table read from multiplesheets.xlsx");
assertEquals(time, row.getTime(1)); assertEquals(time, row.getTime("Time"));
assertEquals(t.row(i).getString("who text"), t2.row(i).getString("who"));
assertFalse(parser.canParse("foobar")); assertTrue(parser.canParse(Instant.now().toString()));
assertEquals(2, t.columnCount()); assertEquals(2, t.rowCount());
assertEquals(1, t.columnCount()); assertEquals(6, t.rowCount());
assertEquals(table.timeColumn(1).getIntInternal(row.getRowNumber()), row.getPackedTime(1)); assertEquals( table.timeColumn("Time").getIntInternal(row.getRowNumber()), row.getPackedTime("Time"));
assertEquals("Value 2", c1.get(0)); assertEquals("Value 3", c1.get(1)); assertEquals("", c1.get(3));
assertNotNull(d1); assertNotNull(t1); assertEquals(date.toString(), d1.toString());
assertEquals( "[stop_id, stop_name, stop_desc, stop_lat, stop_lon]", table.columnNames().toString());
assertTrue(out.contains("33.33333206176758")); assertTrue(out.contains("900719902720")); assertTrue(out.contains("9007199232")); assertTrue(out.contains("90071992")); assertTrue(out.contains("90071.109375"));
assertEquals(table.longColumn(1).getLong(row.getRowNumber()), row.getLong(1)); assertEquals( table.longColumn("approval").getLong(row.getRowNumber()), row.getLong("approval"));
assertArrayEquals(expected.asDoubleArray(), col1.set(isMissing, 7.0).asDoubleArray(), 0.0001);
assertEquals("Alabama", selection.get(0)); assertEquals("Texas", selection.get(1)); assertEquals(2, selection.size());
assertEquals( "Column col1 is of type LOCAL_DATE and cannot be cast to LOCAL_TIME." + " Use the method for LOCAL_DATE.", thrown.getMessage());
assertTrue( thrown .getMessage() .contains("must be less than the number following at the end of the window"));
assertEquals("1 rows X 10001 cols", table1.shape());
assertEquals(today.getYear(), getYear(pack(today)));
assertEquals(.285714, column.proportionTrue(), 0.00001);
assertArrayEquals( new double[] {missing, missing, 0.181, 0.186, 0.186, 0.186, 0.181}, col.asDoubleArray());
assertEquals("test strings", sc.name()); assertEquals("48392", sc.get(0)); assertEquals(StringColumnType.missingValueIndicator(), sc.get(1));
assertEquals(expected, windowSpecification.toSqlString());
assertEquals(5, joined.rowCount()); assertEquals(2, joined.columnCount());
assertEquals(2, getMonthValue(day2)); assertEquals(2012, getYear(day2)); assertEquals(9, getDayOfMonth(day2));
assertEquals(originalColumns, newColumns);
assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)));
assertEquals(9, getDayOfMonth(pack(day)));
assertEquals(table.shortColumn(1).getShort(row.getRowNumber()), row.getShort(1)); assertEquals( table.shortColumn("approval").getShort(row.getRowNumber()), row.getShort("approval"));
assertEquals(4, getDayOfMonth(day2)); assertEquals(2011, getYear(day2));
assertEquals(8, joined.columnCount()); assertEquals(6, joined.rowCount());
assertEquals("12423", numberColumn.getString(numberColumn.size() - 1));
assertArrayEquals(sma5, result.asDoubleArray(), 0.000001); assertEquals("data 5-period Mean", result.name());
assertNotNull(column1);
assertTrue(n >= last); assertTrue(n <= last); assertTrue(n <= last);
assertEquals(7, column.size());
assertTrue(Arrays.deepEquals(expected, results));
assertEquals( "<table>" + LINE_END + " <thead>" + LINE_END + " <tr>" + LINE_END + " <th>data</th>" + LINE_END + " </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + " <tr>" + LINE_END + " <td><p>foo</p></td>" + LINE_END + " </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output);
assertEquals(0.0, result[0], 0.01); assertEquals(0.0, result[1], 0.01); assertEquals(0.0, result[2], 0.01); assertEquals(0.0, result[3], 0.01); assertEquals(1.0, result[4], 0.01); assertEquals(1.0, result[5], 0.01); assertEquals(0.0, result[6], 0.01);
assertEquals(fromCol, fromIdx);
assertEquals(expected.columnNames(), actual.columnNames()); assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList());
assertNotNull(test.summary());
assertEquals("test strings", sc.name()); assertEquals("48392.2932", sc.get(0)); assertEquals(StringColumnType.missingValueIndicator(), sc.get(1));
assertEquals("foo", slice.name()); assertNotEquals("foo", source.name());
assertEquals(3, joined.columnCount()); assertEquals(4, joined.rowCount());
assertEquals(4, column.size());
assertTrue(column1.contains(LocalTime.of(5, 15, 30))); assertTrue(column1.contains(LocalTime.of(10, 15, 30))); assertFalse(column1.contains(LocalTime.of(9, 15, 30)));
assertTrue(t.containsColumn(sc)); assertTrue(t.containsColumn(sc2)); assertFalse(t.containsColumn(sc1)); assertFalse(t.containsColumn(sc3));
assertEquals( "v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output);
assertEquals(now.getSecond(), getSecond(pack(now)));
assertEquals(dttm, row.getDateTime(11)); assertEquals(dttm, row.getDateTime("DateTime"));
assertEquals(4, joined.columnCount()); assertEquals(1, joined.rowCount());
assertEquals(column2.getIntInternal(i), column1.getIntInternal(i)); assertEquals(column1.name(), column2.name());
assertEquals(323, table.rowCount()); assertEquals("[date, approval, who]", table.columnNames().toString());
assertEquals(source.column(1).name(), slice.column(1).name()); assertTrue(source.rowCount() > slice.column(1).size()); assertEquals(source.column("date").name(), slice.column("date").name()); assertTrue(source.rowCount() > slice.column("date").size()); assertEquals(slice.column(1).size(), slice.column("date").size()); assertEquals(4, slice.column("date").size());
assertEquals("Alabama", selection.get(0)); assertEquals("Texas", selection.get(1)); assertEquals(2, selection.size());
assertEquals(15, joined.columnCount()); assertEquals(10, joined.rowCount());
assertTrue(out.contains("33.3333333333333")); assertTrue(out.contains("9007199254740992")); assertTrue(out.contains("900719925474099.1")); assertTrue(out.contains("90071992547409.11"));
