assertNotNull(r.getLegendItems()); assertEquals(0, r.getLegendItems().getItemCount()); assertEquals(0, r.getLegendItems().getItemCount()); assertEquals(1, lic.getItemCount()); assertEquals("S1", lic.get(0).getLabel());
assertEquals(100.0, s1.getMinY(), EPSILON); assertEquals(102.0, s1.getMaxY(), EPSILON); assertEquals(100.0, s2.getMinY(), EPSILON); assertEquals(101.0, s2.getMaxY(), EPSILON); assertEquals(101.0, s3.getMinY(), EPSILON); assertEquals(102.0, s3.getMaxY(), EPSILON);
assertEquals(l1, l2);
assertTrue(l1.equals(l2)); assertTrue(l2.equals(l2));
assertEquals(-1, s.getMaxMiddleIndex()); assertEquals(0, s.getMaxMiddleIndex()); assertEquals(1, s.getMaxMiddleIndex()); assertEquals(1, s.getMaxMiddleIndex()); assertEquals(1, s.getMaxMiddleIndex());
assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek()); assertEquals(34, w.getWeek()); assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek()); assertEquals(35, w.getWeek()); assertEquals(34, w.getWeek());
assertEquals(" title=\"abc\" alt=\"\"", g.generateToolTipFragment("abc")); assertEquals(" title=\"Series &quot;A&quot;, 100.0\" alt=\"\"", g.generateToolTipFragment("Series \"A\", 100.0"));
assertNull(plot.getDataset()); assertTrue(dataset.hasListener(plot));
assertTrue(pass);
assertEquals(1, data.getIndex("B")); assertEquals(-1, data.getIndex("B")); assertTrue(pass);
assertEquals(1, data.getIndex("B")); assertEquals(-1, data.getIndex("B")); assertTrue(pass);
assertEquals(-1, v.getIndex("K1")); assertEquals(0, v.getIndex("K1")); assertEquals(-1, v.getIndex("K1"));
assertEquals(-1, v.getIndex("K1")); assertEquals(0, v.getIndex("K1")); assertEquals(-1, v.getIndex("K1"));
assertEquals(0, plot.getRangeAxisIndex(rangeAxis1)); assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2)); assertEquals(1, plot.getRangeAxisIndex(rangeAxis2)); assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis("Y2"))); assertTrue(pass);
assertEquals(0, plot.getDomainAxisIndex(domainAxis1)); assertEquals(-1, plot.getDomainAxisIndex(domainAxis2)); assertEquals(1, plot.getDomainAxisIndex(domainAxis2)); assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis("X2"))); assertTrue(pass);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(1.0, m.getValue(), EPSILON); assertEquals(Color.red, m.getPaint()); assertEquals(stroke, m.getStroke()); assertEquals(Color.blue, m.getOutlinePaint()); assertEquals(outlineStroke, m.getOutlineStroke()); assertEquals(0.5f, m.getAlpha(), EPSILON);
assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false)); assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true)); assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false)); assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true)); assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false)); assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true)); assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false)); assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));
assertEquals(1, data.getRowCount()); assertEquals(1, data.getColumnCount()); assertEquals("Obj1", data.getObject(0, 0));
assertEquals(1, data.getRowCount()); assertEquals(1, data.getColumnCount()); assertEquals("Obj1", data.getObject(0, 0));
assertEquals(1, data.getRowCount()); assertEquals(1, data.getColumnCount()); assertEquals("Obj1", data.getObject(0, 0));
assertEquals(1, data.getRowCount()); assertEquals(1, data.getColumnCount()); assertEquals("Obj1", data.getObject(0, 0));
assertEquals(1, data.getRowCount()); assertEquals(1, data.getColumnCount()); assertEquals("Obj1", data.getObject(0, 0));
assertEquals(r1, r2); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2)); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2)); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2));
assertEquals(r1, r2); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2)); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2)); assertFalse(r1.equals(r2)); assertTrue(r1.equals(r2));
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(passed);
assertEquals(chart, chart2); assertTrue(passed);
assertEquals(chart, chart2); assertTrue(passed);
assertEquals(chart, chart2); assertTrue(passed);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertTrue(success);
assertEquals("module$baz", pass.guessCJSModuleName("foo/baz.js")); assertEquals("module$baz", pass.guessCJSModuleName("foo\\baz.js")); assertEquals("module$bar$baz", pass.guessCJSModuleName("foo\\bar\\baz.js"));
assertEquals("module$foo$baz", ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js")); assertEquals("module$foo$baz_bar", ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js")); assertEquals("module$baz", ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js")); assertEquals("module$baz", ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js")); assertEquals("module$baz", ProcessCommonJSModules.toModuleName( "../../../baz.js", "foo/bar/abc/xyz.js"));
assertEquals(result, lastCompiler.toSource());
assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());
assertEquals("{loop: number, number: number, string: string}", record.toString()); assertEquals("{loop: {...}, number: number, string: string}", record.toString()); assertEquals("{loop: ?, number: number, string: string}", record.toAnnotationString());
assertEquals("{loop: number, number: number, string: string}", record.toString()); assertEquals("{loop: {...}, number: number, string: string}", record.toString()); assertEquals("{loop: ?, number: number, string: string}", record.toAnnotationString());
assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}", record.toString()); assertEquals( "{a1: number, a2: number, a3: number, a4: number," + " a5: number, a6: number}", record.toAnnotationString());
assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}", record.toString()); assertEquals( "{a1: number, a2: number, a3: number, a4: number," + " a5: number, a6: number}", record.toAnnotationString());
assertEquals("Foo", x.toString()); assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); assertEquals("?", x.getPropertyType("bar").toString()); assertTrue(x.isPropertyTypeInferred("bar"));
assertEquals("Foo", x.toString()); assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); assertEquals("?", x.getPropertyType("bar").toString()); assertTrue(x.isPropertyTypeInferred("bar"));
assertEquals("Foo", x.toString()); assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); assertEquals("?", x.getPropertyType("bar").toString()); assertTrue(x.isPropertyTypeInferred("bar"));
assertEquals("Foo", x.toString()); assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); assertEquals("?", x.getPropertyType("bar").toString()); assertTrue(x.isPropertyTypeInferred("bar"));
assertEquals("Foo", x.toString()); assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); assertEquals("?", x.getPropertyType("bar").toString()); assertTrue(x.isPropertyTypeInferred("bar"));
assertEquals("foo2:first line", provider.getSourceLine("foo2", 1)); assertEquals("foo2:second line", provider.getSourceLine("foo2", 2)); assertEquals("foo2:third line", provider.getSourceLine("foo2", 3)); assertEquals(null, provider.getSourceLine("foo2", 4));
assertTrue(e.getMessage().contains("JSCompiler errors\n")); assertTrue(e.getMessage().contains( "testcode:1: ERROR - Parse error. syntax error\n")); assertTrue(e.getMessage().contains("if (true) {}}\n"));
assertTrue(e.getMessage().contains("JSCompiler errors\n")); assertTrue(e.getMessage().contains( "testcode:2: ERROR - Parse error. syntax error\n")); assertTrue(e.getMessage().contains("if (true) {}}\n"));
assertEquals("javascript/complex.js:1: ERROR - error description here\n" + "assert (1;\n" + "          ^\n", formatter.formatError(error));
assertEquals("javascript/complex.js:6: ERROR - error description here\n" + "if (foo\n" + "       ^\n", formatter.formatError(error));
assertEquals("'use strict'", outputSource.substring(0, 12)); assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1);
assertEquals(100.0, getTypedPercent(js), 0.1);
assertEquals(100.0, getTypedPercent(js), 0.1);
assertFalse(NodeUtil.isBooleanResult(getNode("1"))); assertTrue(NodeUtil.isBooleanResult(getNode("true"))); assertFalse(NodeUtil.isBooleanResult(getNode("+true"))); assertFalse(NodeUtil.isBooleanResult(getNode("+1"))); assertFalse(NodeUtil.isBooleanResult(getNode("-1"))); assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity"))); assertFalse(NodeUtil.isBooleanResult(getNode("Infinity"))); assertFalse(NodeUtil.isBooleanResult(getNode("NaN"))); assertFalse(NodeUtil.isBooleanResult(getNode("undefined"))); assertFalse(NodeUtil.isBooleanResult(getNode("void 0"))); assertFalse(NodeUtil.isBooleanResult(getNode("a << b"))); assertFalse(NodeUtil.isBooleanResult(getNode("a >> b"))); assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a == b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a != b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a === b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a !== b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a < b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a > b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a <= b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a >= b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a in b"))); assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b"))); assertFalse(NodeUtil.isBooleanResult(getNode("'a'"))); assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b"))); assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'"))); assertFalse(NodeUtil.isBooleanResult(getNode("a+b"))); assertFalse(NodeUtil.isBooleanResult(getNode("a()"))); assertFalse(NodeUtil.isBooleanResult(getNode("''.a"))); assertFalse(NodeUtil.isBooleanResult(getNode("a.b"))); assertFalse(NodeUtil.isBooleanResult(getNode("a.b()"))); assertFalse(NodeUtil.isBooleanResult(getNode("a().b()"))); assertFalse(NodeUtil.isBooleanResult(getNode("new a()"))); assertTrue(NodeUtil.isBooleanResult(getNode("delete a"))); assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])"))); assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})"))); assertTrue(NodeUtil.isBooleanResult(getNode("true && false"))); assertTrue(NodeUtil.isBooleanResult(getNode("true || false"))); assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false"))); assertTrue(NodeUtil.isBooleanResult(getNode("a,true"))); assertTrue(NodeUtil.isBooleanResult(getNode("a=true"))); assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
assertTrue(LEAST_FUNCTION_TYPE.isEmptyType()); assertFalse(GREATEST_FUNCTION_TYPE.isEmptyType());
assertNotNull(globalScope.getVar("ns.foo")); assertEquals( "function (number): undefined", globalScope.getVar("ns.foo").getType().toString());
assertEquals(NO_OBJECT_TYPE, errUnion.getGreatestSubtype(STRING_OBJECT_TYPE));
assertEquals(" Foo \n @author Charlie Brown ", node.getJSDocInfo().getLicense());
assertEquals("function (): undefined", functionAType.toString()); assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1")); assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2"));
assertEquals("function (): undefined", type.toString());
assertEquals("function (): undefined", type.toString());
assertEquals("function (): undefined", type.toString());
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertEquals("function (): undefined", functionAType.toString()); assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1")); assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2"));
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertEquals(0, compiler.getErrorCount()); assertEquals(0, compiler.getWarningCount()); assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
assertNotNull(ctor); assertTrue(ctor.isConstructor()); assertEquals("function (this:goog.Foo): undefined", ctor.toString());
assertEquals("function (this:I): ?", i.getType().toString()); assertTrue(i.getType().isInterface()); assertEquals("I.prototype", iPrototype.toString()); assertTrue(iPrototype.isFunctionPrototypeType()); assertEquals("number", iPrototype.getPropertyType("bar").toString()); assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString()); assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
assertEquals("function (this:I): ?", i.getType().toString()); assertTrue(i.getType().isInterface()); assertEquals("I.prototype", iPrototype.toString()); assertTrue(iPrototype.isFunctionPrototypeType()); assertEquals("number", iPrototype.getPropertyType("bar").toString()); assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString()); assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertTrue(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertTrue(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertTrue(foo.hasProperty("Bar")); assertFalse(foo.isPropertyTypeInferred("Bar")); assertEquals("function (this:foo.Bar): undefined", fooBar.toString()); assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));
assertTrue(foo.hasProperty("Bar")); assertFalse(foo.isPropertyTypeInferred("Bar")); assertEquals("function (this:foo.Bar): undefined", fooBar.toString()); assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));
assertTrue(foo.hasProperty("Bar")); assertFalse(foo.isPropertyTypeInferred("Bar")); assertEquals("function (this:foo.Bar): undefined", fooBar.toString()); assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));
assertTrue(goog.hasProperty("foo")); assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); assertTrue(goog.isPropertyTypeDeclared("foo")); assertEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo"));
assertTrue(goog.hasProperty("foo")); assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); assertTrue(goog.isPropertyTypeDeclared("foo")); assertEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo"));
assertTrue(goog.hasProperty("foo")); assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); assertTrue(goog.isPropertyTypeDeclared("foo")); assertEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo"));
assertTrue(goog.hasProperty("foo")); assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); assertTrue(goog.isPropertyTypeDeclared("foo")); assertEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo"));
assertTrue(goog.hasProperty("foo")); assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); assertTrue(goog.isPropertyTypeDeclared("foo")); assertEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo"));
assertEquals("f", x.toString()); assertTrue(x.hasProperty("foo")); assertEquals("function (this:f): number", x.getPropertyType("foo").toString()); assertFalse(x.isPropertyTypeInferred("foo"));
assertEquals("f", x.toString()); assertTrue(x.hasProperty("foo")); assertEquals("function (this:f): number", x.getPropertyType("foo").toString()); assertFalse(x.isPropertyTypeInferred("foo"));
assertEquals("f", x.toString()); assertTrue(x.hasProperty("foo")); assertEquals("function (this:f): number", x.getPropertyType("foo").toString()); assertFalse(x.isPropertyTypeInferred("foo"));
assertEquals(Token.OBJECTLIT, objectLit.getType()); assertEquals(Token.STRING, number.getType()); assertNotNull(number.getJSDocInfo());
assertEquals(Token.OBJECTLIT, objectLit.getType()); assertEquals(Token.STRING, number.getType()); assertNotNull(number.getJSDocInfo());
assertTrue(recordA.isSubtype(recordB)); assertTrue(recordB.isSubtype(recordA));
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertFalse(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertFalse(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertFalse(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertEquals("Window", x.toString()); assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); assertFalse(x.isPropertyTypeDeclared("alert")); assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
assertEquals(mk.hashCode(), mk2.hashCode());
assertEquals(mk.hashCode(), mk2.hashCode());
assertEquals(0, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(1, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(2, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(2, parser.getLineNumber()); assertNull(parser.getRecord());
assertEquals(0, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(1, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(2, parser.getLineNumber()); assertNotNull(parser.getRecord()); assertEquals(2, parser.getLineNumber()); assertNull(parser.getRecord());
assertThat(lexer.nextToken(new Token()), hasContent("character\\NEscaped"));
assertThat(lexer.nextToken(new Token()), hasContent("character\\aEscaped"));
assertTrue(records.size() > 0);
assertNotNull(formatStr); assertFalse(formatStr.endsWith("null"));
assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString());
assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString());
assertEquals("\\", sw.toString());
assertEquals("\\\\", sw.toString());
assertEquals("\\\\", sw.toString());
assertEquals("\\", sw.toString());
assertEquals("\\\\", sw.toString());
assertEquals("\\\\", sw.toString());
assertEquals(EURO_CH + ",Deux" + recordSeparator, sw.toString());
assertEquals(String.valueOf(recordNumber), record.get(0)); assertEquals(String.valueOf(recordNumber), record.get(0)); assertEquals(String.valueOf(recordNumber), record.get(0)); assertEquals(String.valueOf(recordNumber), record.get(0)); assertEquals(String.valueOf(recordNumber), record.get(0)); assertEquals(String.valueOf(recordNumber), record.get(0));
assertEquals(0L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(1, loc.getColumnNr()); assertEquals(1L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(2, loc.getColumnNr());
assertEquals(0L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(1, loc.getColumnNr()); assertEquals(1L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(2, loc.getColumnNr());
assertEquals(0L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(1, loc.getColumnNr()); assertEquals(1L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(2, loc.getColumnNr());
assertEquals(0L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(1, loc.getColumnNr()); assertEquals(1L, loc.getByteOffset()); assertEquals(-1L, loc.getCharOffset()); assertEquals(1, loc.getLineNr()); assertEquals(2, loc.getColumnNr());
assertEquals(0, ptr.getMatchingIndex()); assertEquals(-1, ptr.getMatchingIndex());
assertEquals(JsonToken.START_OBJECT, p.nextToken()); assertEquals(JsonToken.FIELD_NAME, p.nextToken()); assertEquals(1L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_STRING, p.nextToken()); assertEquals(6L, p.getTokenLocation().getCharOffset()); assertEquals("f2", p.nextFieldName()); assertEquals(11L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.START_OBJECT, p.nextValue()); assertEquals(16L, p.getTokenLocation().getCharOffset()); assertEquals("f3", p.nextFieldName()); assertEquals(17L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_STRING, p.nextValue()); assertEquals(22L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_OBJECT, p.nextToken()); assertEquals("f4", p.nextFieldName()); assertEquals(28L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.START_ARRAY, p.nextValue()); assertEquals(33L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_TRUE, p.nextValue()); assertEquals(34L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_FALSE, p.nextValue()); assertEquals(39L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_ARRAY, p.nextToken()); assertEquals("f5", p.nextFieldName()); assertEquals(46L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken()); assertEquals(51L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_OBJECT, p.nextToken());
assertEquals(JsonToken.START_OBJECT, p.nextToken()); assertEquals(JsonToken.FIELD_NAME, p.nextToken()); assertEquals(1L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_STRING, p.nextToken()); assertEquals(6L, p.getTokenLocation().getCharOffset()); assertEquals("f2", p.nextFieldName()); assertEquals(11L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.START_OBJECT, p.nextValue()); assertEquals(16L, p.getTokenLocation().getCharOffset()); assertEquals("f3", p.nextFieldName()); assertEquals(17L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_STRING, p.nextValue()); assertEquals(22L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_OBJECT, p.nextToken()); assertEquals("f4", p.nextFieldName()); assertEquals(28L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.START_ARRAY, p.nextValue()); assertEquals(33L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_TRUE, p.nextValue()); assertEquals(34L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_FALSE, p.nextValue()); assertEquals(39L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_ARRAY, p.nextToken()); assertEquals("f5", p.nextFieldName()); assertEquals(46L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken()); assertEquals(51L, p.getTokenLocation().getCharOffset()); assertEquals(JsonToken.END_OBJECT, p.nextToken());
assertEquals(2, seq.getIntValue()); assertEquals(3, seq.getIntValue());
assertEquals(2, seq.getIntValue()); assertEquals(3, seq.getIntValue());
assertFalse(p.hasCurrentToken()); assertNull(p.getCurrentToken()); assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId()); assertFalse(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.START_OBJECT, p.getCurrentToken()); assertTrue(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken()); assertEquals("ob", p.getCurrentName()); assertEquals("ob", p.getCurrentName()); assertEquals("value", p.getCurrentName()); assertEquals("value", p.getText()); assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken()); assertEquals(NumberType.INT, p.getNumberType()); assertEquals(3, p.getIntValue()); assertEquals("value", p.getCurrentName()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertNull(p.getCurrentToken());
assertFalse(p.hasCurrentToken()); assertNull(p.getCurrentToken()); assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId()); assertFalse(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.START_OBJECT, p.getCurrentToken()); assertTrue(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken()); assertEquals("ob", p.getCurrentName()); assertEquals("ob", p.getCurrentName()); assertEquals("value", p.getCurrentName()); assertEquals("value", p.getText()); assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken()); assertEquals(NumberType.INT, p.getNumberType()); assertEquals(3, p.getIntValue()); assertEquals("value", p.getCurrentName()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertNull(p.getCurrentToken());
assertFalse(p.hasCurrentToken()); assertNull(p.getCurrentToken()); assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId()); assertFalse(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.START_OBJECT, p.getCurrentToken()); assertTrue(p.isExpectedStartObjectToken()); assertFalse(p.isExpectedStartArrayToken()); assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken()); assertEquals("ob", p.getCurrentName()); assertEquals("ob", p.getCurrentName()); assertEquals("value", p.getCurrentName()); assertEquals("value", p.getText()); assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken()); assertEquals(NumberType.INT, p.getNumberType()); assertEquals(3, p.getIntValue()); assertEquals("value", p.getCurrentName()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertNull(p.getCurrentToken());
assertEquals(aposToQuotes("{'ob':{'value':3}}"), result);
assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertNull(p.nextToken());
assertEquals(JsonToken.END_OBJECT, p.getCurrentToken()); assertNull(p.nextToken());
assertEquals(aposToQuotes("{'a':123}"), result); assertEquals(1, p.getMatchCount());
assertEquals(aposToQuotes("{\"ob\":{\"value\":3,\"value\":{\"value0\":2}},\"value\":\"val\"}"), result); assertEquals(3, p.getMatchCount());
assertEquals(aposToQuotes("{\"array\":[2],\"ob\":{\"array\":[4]}}"), result); assertEquals(2, p.getMatchCount());
assertEquals(aposToQuotes("{'ob':{'value0':2,'value2':4}}"), result); assertEquals(2, p.getMatchCount());
assertEquals(aposToQuotes("{'ob':{'value':3},'b':true}"), result); assertEquals(2, p.getMatchCount());
assertEquals(aposToQuotes("{'root':{'a':{'value':3},'b':{'value':\"foo\"}}}"), result); assertEquals(2, p.getMatchCount());
assertEquals(aposToQuotes("3"), result); assertEquals(1, p.getMatchCount());
assertEquals(aposToQuotes("3"), result); assertEquals(1, p.getMatchCount());
assertEquals(aposToQuotes("2"), result); assertEquals(1, p.getMatchCount());
assertEquals(aposToQuotes("{'array':[2]}"), result); assertEquals(1, p.getMatchCount()); assertEquals(aposToQuotes("{'array':[1]}"), result); assertEquals(1, p.getMatchCount());
assertEquals(aposToQuotes("{'array':[1,2]}"), readAndWrite(JSON_F, p)); assertEquals(2, p.getMatchCount()); assertEquals(aposToQuotes("{'array':[2,4],'b':[2]}"), readAndWrite(JSON_F, p)); assertEquals(3, p.getMatchCount());
assertEquals(aposToQuotes("3 {\"value0\":2} \"val\""), result); assertEquals(3, p.getMatchCount());
assertEquals(JsonToken.START_ARRAY, parser.nextToken()); assertEquals(1, parser.getCurrentLocation().getByteOffset()); assertEquals(1, parser.getTokenLocation().getByteOffset()); assertEquals(1, parser.getCurrentLocation().getLineNr()); assertEquals(1, parser.getTokenLocation().getLineNr()); assertEquals(2, parser.getCurrentLocation().getColumnNr()); assertEquals(1, parser.getTokenLocation().getColumnNr()); assertEquals(JsonToken.START_ARRAY, parser.nextToken()); assertEquals(2, parser.getCurrentLocation().getByteOffset()); assertEquals(2, parser.getTokenLocation().getByteOffset()); assertEquals(1, parser.getCurrentLocation().getLineNr()); assertEquals(1, parser.getTokenLocation().getLineNr()); assertEquals(3, parser.getCurrentLocation().getColumnNr()); assertEquals(2, parser.getTokenLocation().getColumnNr());
assertEquals(JsonToken.START_ARRAY, parser.nextToken()); assertEquals(1, parser.getCurrentLocation().getByteOffset()); assertEquals(1, parser.getTokenLocation().getByteOffset()); assertEquals(1, parser.getCurrentLocation().getLineNr()); assertEquals(1, parser.getTokenLocation().getLineNr()); assertEquals(2, parser.getCurrentLocation().getColumnNr()); assertEquals(1, parser.getTokenLocation().getColumnNr()); assertEquals(JsonToken.START_ARRAY, parser.nextToken()); assertEquals(2, parser.getCurrentLocation().getByteOffset()); assertEquals(2, parser.getTokenLocation().getByteOffset()); assertEquals(1, parser.getCurrentLocation().getLineNr()); assertEquals(1, parser.getTokenLocation().getLineNr()); assertEquals(3, parser.getCurrentLocation().getColumnNr()); assertEquals(2, parser.getTokenLocation().getColumnNr());
assertEquals("max", xp.getCurrentName()); assertEquals("7", xp.nextTextValue()); assertEquals("offset", xp.getCurrentName()); assertEquals("offset", xp.getText()); assertEquals("9", xp.nextTextValue()); assertEquals("9", xp.getText());
assertEquals("max", xp.getCurrentName()); assertEquals("7", xp.nextTextValue()); assertEquals("offset", xp.getCurrentName()); assertEquals("offset", xp.getText()); assertEquals("9", xp.nextTextValue()); assertEquals("9", xp.getText());
assertEquals("max", xp.getCurrentName()); assertEquals("7", xp.nextTextValue()); assertEquals("offset", xp.getCurrentName()); assertEquals("offset", xp.getText()); assertEquals("9", xp.nextTextValue()); assertEquals("9", xp.getText());
assertEquals("max", xp.getCurrentName()); assertEquals("7", xp.nextTextValue()); assertEquals("offset", xp.getCurrentName()); assertEquals("offset", xp.getText()); assertEquals("9", xp.nextTextValue()); assertEquals("9", xp.getText());
assertTrue(e.getCause() instanceof JXPathAbstractFactoryException);
assertTrue("sample=" + sample, 0 <= sample); assertTrue("sample=" + sample, sample <= n);
assertEquals(Complex.ZERO.reciprocal(), Complex.INF);
assertEquals(1.5, optimum.getPoint()[0], 1.0e-10); assertEquals(0.0, optimum.getValue(), 1.0e-10); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 180); assertTrue(optimizer.getEvaluations() < 220); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 180); assertTrue(optimizer.getEvaluations() < 220); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 180); assertTrue(optimizer.getEvaluations() < 220); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 180); assertTrue(optimizer.getEvaluations() < 220); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 180); assertTrue(optimizer.getEvaluations() < 220); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); assertTrue(optimizer.getEvaluations() > 120); assertTrue(optimizer.getEvaluations() < 150); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); assertTrue(optimizer.getEvaluations() > 60); assertTrue(optimizer.getEvaluations() < 90); assertTrue(optimizer.getIterations() > 0);
assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0);
assertEquals(0, pp.getValue(), 1.0e-15); assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15); assertEquals(FastMath.PI, pn.getValue(), 1.0e-15); assertEquals(0, np.getValue(), 1.0e-15); assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15); assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);
assertEquals(uni.density(v), multi.density(new double[] { v }), tol);
assertEquals(Math.pow(x, y), FastMath.pow(x, y), 0); assertEquals(Math.pow(x, -y), FastMath.pow(x, -y), 0);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(0, maxErr, 3); assertEquals(0, maxErr, 3);
assertEquals(resNoBound, resNearLo, 1e-3); assertEquals(resNoBound, resNearHi, 1e-3);
assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")", result[0] <= upper[0]);
assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16); assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16); assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16); assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16); assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16); assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16); assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16); assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16); assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); assertTrue(root.subtract(base).getNorm() > 0.3);
assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); assertTrue(root.subtract(base).getNorm() > 0.3);
assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); assertTrue(root.subtract(base).getNorm() > 0.3);
assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); assertTrue(root.subtract(base).getNorm() > 0.3);
assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));
assertTrue(result > 0.1);
assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0); assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0); assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0); assertEquals(2.0d, solution.getValue(), epsilon);
assertEquals(5, large.floatValue(), 1e-15);
assertEquals(5, large.doubleValue(), 1e-15);
assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY)); assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));
assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0); assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);
assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0);
assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0);
assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0);
assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0);
assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0);
assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0);
assertEquals(target, tEnd, 1.0e-10); assertEquals(32.0, y[0], 1.0e-10);
assertTrue(Complex.I.atan().isNaN());
assertEquals(z, Complex.NaN);
assertTrue(Complex.I.atan().isInfinite());
assertEquals(z, Complex.INF);
assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15); assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15); assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15); assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15); assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15); assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15); assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15); assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15); assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15); assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15); assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15); assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15); assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
assertTrue(z.isNaN()); assertTrue(Double.isNaN(w.getReal())); assertTrue(Double.isNaN(w.getImaginary()));
assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN); assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN); assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON); assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN); assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN); assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON); assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN); assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN); assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON); assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
assertEquals("Wrong iteration at " + i, i, uniDimIndex); assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]", expected[i][dimIndex], iter.getCount(dimIndex)); assertEquals("Wrong unidimensional index for [" + i + "]", c.getCount(expected[i]), uniDimIndex); assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]", expected[i][dimIndex], indices[dimIndex]);
assertTrue(uniquePointIsCenter);
assertEquals("min(" + pair[0] + ", " + pair[1] + ")", Math.min(pair[0], pair[1]), FastMath.min(pair[0], pair[1]), MathUtils.EPSILON); assertEquals("min(" + pair[1] + ", " + pair[0] + ")", Math.min(pair[1], pair[0]), FastMath.min(pair[1], pair[0]), MathUtils.EPSILON); assertEquals("max(" + pair[0] + ", " + pair[1] + ")", Math.max(pair[0], pair[1]), FastMath.max(pair[0], pair[1]), MathUtils.EPSILON); assertEquals("max(" + pair[1] + ", " + pair[0] + ")", Math.max(pair[1], pair[0]), FastMath.max(pair[1], pair[0]), MathUtils.EPSILON);
assertEquals("min(" + pair[0] + ", " + pair[1] + ")", Math.min(pair[0], pair[1]), FastMath.min(pair[0], pair[1]), MathUtils.EPSILON); assertEquals("min(" + pair[1] + ", " + pair[0] + ")", Math.min(pair[1], pair[0]), FastMath.min(pair[1], pair[0]), MathUtils.EPSILON); assertEquals("max(" + pair[0] + ", " + pair[1] + ")", Math.max(pair[0], pair[1]), FastMath.max(pair[0], pair[1]), MathUtils.EPSILON); assertEquals("max(" + pair[1] + ", " + pair[0] + ")", Math.max(pair[1], pair[0]), FastMath.max(pair[1], pair[0]), MathUtils.EPSILON);
assertEquals(-0.2719561293, optimum.getPoint(), 1e-9); assertEquals(-0.0443342695, optimum.getValue(), 1e-9); assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9); assertTrue(optimizer.getEvaluations() >= 50); assertTrue(optimizer.getEvaluations() <= 100);
assertEquals(-0.2719561293, optimum.getPoint(), 1e-9); assertEquals(-0.0443342695, optimum.getValue(), 1e-9); assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9); assertTrue(optimizer.getEvaluations() >= 50); assertTrue(optimizer.getEvaluations() <= 100);
assertEquals(-0.2719561293, optimum.getPoint(), 1e-9); assertEquals(-0.0443342695, optimum.getValue(), 1e-9); assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9); assertTrue(optimizer.getEvaluations() >= 50); assertTrue(optimizer.getEvaluations() <= 100);
assertEquals(-0.2719561293, optimum.getPoint(), 1e-9); assertEquals(-0.0443342695, optimum.getValue(), 1e-9); assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9); assertTrue(optimizer.getEvaluations() >= 50); assertTrue(optimizer.getEvaluations() <= 100);
assertFalse(MathUtils.equals(new double[] { 1d }, null)); assertFalse(MathUtils.equals(null, new double[] { 1d })); assertTrue(MathUtils.equals((double[]) null, (double[]) null)); assertFalse(MathUtils.equals(new double[] { 1d }, new double[0])); assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d })); assertTrue(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1d, 0d }, new double[] { Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1d, 0d })); assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN })); assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY }, new double[] { Double.NEGATIVE_INFINITY })); assertFalse(MathUtils.equals(new double[] { 1d }, new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,      1.0e-10); assertEquals(48.13516790438953, center.y,      1.0e-10); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); assertEquals(0.004, errors[0], 0.001); assertEquals(0.004, errors[1], 0.001);
assertEquals(-0.2719561270319131, result, 1.0e-13); assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 120); assertTrue(minimizer.getEvaluations()    <= 170); assertTrue(minimizer.getIterationCount() >= 120); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.2719561270319131, result, 1.0e-13); assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 120); assertTrue(minimizer.getEvaluations()    <= 170); assertTrue(minimizer.getIterationCount() >= 120); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.2719561270319131, result, 1.0e-13); assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 120); assertTrue(minimizer.getEvaluations()    <= 170); assertTrue(minimizer.getIterationCount() >= 120); assertTrue(minimizer.getIterationCount() <= 170);
assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8); assertEquals(-1.0, f.value(optima[i]), 1.0e-10); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations() > 150); assertTrue(minimizer.getEvaluations() < 250);
assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8); assertEquals(-1.0, f.value(optima[i]), 1.0e-10); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations() > 150); assertTrue(minimizer.getEvaluations() < 250);
assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8); assertEquals(-1.0, f.value(optima[i]), 1.0e-10); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations() > 150); assertTrue(minimizer.getEvaluations() < 250);
assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811); assertEquals(medianIter, 17, Math.ulp(1d)); assertEquals(medianEval, 18, Math.ulp(1d));
assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811); assertEquals(medianIter, 17, Math.ulp(1d)); assertEquals(medianEval, 18, Math.ulp(1d));
assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811); assertEquals(medianIter, 17, Math.ulp(1d)); assertEquals(medianEval, 18, Math.ulp(1d));
assertEquals(200, minimizer.getMaxEvaluations()); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertTrue(minimizer.getEvaluations()    <= 100); assertTrue(minimizer.getEvaluations()    >=  15);
assertEquals(200, minimizer.getMaxEvaluations()); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertTrue(minimizer.getEvaluations()    <= 100); assertTrue(minimizer.getEvaluations()    >=  15);
assertEquals(200, minimizer.getMaxEvaluations()); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy()); assertTrue(minimizer.getIterationCount() <= 50); assertTrue(minimizer.getEvaluations()    <= 100); assertTrue(minimizer.getEvaluations()    >=  15);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13); assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13); assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13); assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10); assertTrue(minimizer.getEvaluations()    >= 510); assertTrue(minimizer.getEvaluations()    <= 530); assertTrue(minimizer.getIterationCount() >= 150); assertTrue(minimizer.getIterationCount() <= 170);
assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);
assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);
assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy()); assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
assertTrue(integ.getEvaluations() > 140); assertTrue(integ.getEvaluations() < 90);
assertEquals("one pct",0.25,f.getPct(1),tolerance); assertEquals("two pct",0.25,f.getPct(Long.valueOf(2)),tolerance); assertEquals("three pct",0.5,f.getPct(threeL),tolerance); assertEquals("three (Object) pct",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance); assertEquals("five pct",0,f.getPct(5),tolerance); assertEquals("foo pct",0,f.getPct("foo"),tolerance); assertEquals("one cum pct",0.25,f.getCumPct(1),tolerance); assertEquals("two cum pct",0.50,f.getCumPct(Long.valueOf(2)),tolerance); assertEquals("Integer argument",0.50,f.getCumPct(Integer.valueOf(2)),tolerance); assertEquals("three cum pct",1.0,f.getCumPct(threeL),tolerance); assertEquals("five cum pct",1.0,f.getCumPct(5),tolerance); assertEquals("zero cum pct",0.0,f.getCumPct(0),tolerance); assertEquals("foo cum pct",0,f.getCumPct("foo"),tolerance);
assertEquals(reference.length, singularValues.length); assertEquals(reference[i], singularValues[i], 4.0e-13); assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13); assertEquals(rm.getColumnDimension(), resSVD.length); assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
assertEquals(reference.length, singularValues.length); assertEquals(reference[i], singularValues[i], 4.0e-13); assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13); assertEquals(rm.getColumnDimension(), resSVD.length); assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
assertEquals(reference.length, singularValues.length); assertEquals(reference[i], singularValues[i], 4.0e-13); assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13); assertEquals(rm.getColumnDimension(), resSVD.length); assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
assertEquals(reference.length, singularValues.length); assertEquals(reference[i], singularValues[i], 4.0e-13); assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13); assertEquals(rm.getColumnDimension(), resSVD.length); assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
assertEquals(10.0, solution.getValue(), .0000001);
assertEquals(10.0, solution.getValue(), .0000001);
assertEquals(10.0, solution.getValue(), .0000001);
assertEquals(6.9, solution.getValue(), .0000001);
assertEquals(6.9, solution.getValue(), .0000001);
assertEquals(10.0, solution.getPoint()[0], 0.0); assertEquals(30.0, solution.getValue(), 0.0);
assertEquals(10.0, solution.getPoint()[0], 0.0); assertEquals(30.0, solution.getValue(), 0.0);
assertEquals(10.0, solution.getPoint()[0], 0.0); assertEquals(30.0, solution.getValue(), 0.0);
assertEquals(0.0, solution.getPoint()[0], .0000001); assertEquals(1.0, solution.getPoint()[1], .0000001); assertEquals(1.0, solution.getPoint()[2], .0000001); assertEquals(3.0, solution.getValue(), .0000001);
assertEquals(0.0, solution.getPoint()[0], .0000001); assertEquals(1.0, solution.getPoint()[1], .0000001); assertEquals(1.0, solution.getPoint()[2], .0000001); assertEquals(3.0, solution.getValue(), .0000001);
assertEquals(0.0, solution.getPoint()[0], .0000001); assertEquals(1.0, solution.getPoint()[1], .0000001); assertEquals(1.0, solution.getPoint()[2], .0000001); assertEquals(3.0, solution.getValue(), .0000001);
assertEquals(0.0, solution.getPoint()[0], .0000001); assertEquals(1.0, solution.getPoint()[1], .0000001); assertEquals(1.0, solution.getPoint()[2], .0000001); assertEquals(3.0, solution.getValue(), .0000001);
assertEquals(0, first.compareTo(first)); assertEquals(0, first.compareTo(third)); assertEquals(1, first.compareTo(second)); assertEquals(-1, second.compareTo(first)); assertEquals(-1, pi1.compareTo(pi2)); assertEquals( 1, pi2.compareTo(pi1)); assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);
assertEquals(0, first.compareTo(first)); assertEquals(0, first.compareTo(third)); assertEquals(1, first.compareTo(second)); assertEquals(-1, second.compareTo(first)); assertEquals(-1, pi1.compareTo(pi2)); assertEquals( 1, pi2.compareTo(pi1)); assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);
assertEquals(n+","+k, shouldThrow, didThrow); assertEquals(n+","+k, exactResult, ourResult); assertTrue(n+","+k, (n > 66 || !didThrow)); assertEquals(exactResult, ourResult); assertEquals(exactResult, ourResult); assertEquals(exactResult, ourResult);
assertEquals(i + "! ", factorial(i), MathUtils.factorial(i)); assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE); assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12); assertEquals("0", 1, MathUtils.factorial(0)); assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14); assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
assertEquals(i + "! ", factorial(i), MathUtils.factorial(i)); assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE); assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12); assertEquals("0", 1, MathUtils.factorial(0)); assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14); assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
assertEquals(i + "! ", factorial(i), MathUtils.factorial(i)); assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE); assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12); assertEquals("0", 1, MathUtils.factorial(0)); assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14); assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
assertEquals(0, MathUtils.gcd(0, 0)); assertEquals(b, MathUtils.gcd(0, b)); assertEquals(a, MathUtils.gcd(a, 0)); assertEquals(b, MathUtils.gcd(0, -b)); assertEquals(a, MathUtils.gcd(-a, 0)); assertEquals(10, MathUtils.gcd(a, b)); assertEquals(10, MathUtils.gcd(-a, b)); assertEquals(10, MathUtils.gcd(a, -b)); assertEquals(10, MathUtils.gcd(-a, -b)); assertEquals(1, MathUtils.gcd(a, c)); assertEquals(1, MathUtils.gcd(-a, c)); assertEquals(1, MathUtils.gcd(a, -c)); assertEquals(1, MathUtils.gcd(-a, -c)); assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));
assertEquals("chi-square p-value", 0.0, cst, 1E-3); assertEquals( "chi-square test statistic", 114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);
assertEquals("chi-square p-value", 0.0, cst, 1E-3); assertEquals( "chi-square test statistic", 114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);
assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12); assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10); assertEquals( "chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10); assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9); assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08)); assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05));
assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12); assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10); assertEquals( "chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10); assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9); assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08)); assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05));
assertEquals("chi-square p-value", 0.0, cst, 1E-3); assertEquals( "chi-square test statistic", 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);
assertEquals("chi-square p-value", 0.0, cst, 1E-3); assertEquals( "chi-square test statistic", 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);
assertEquals("chi-square statistic", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12); assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10); assertEquals( "chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10); assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9); assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07)); assertTrue("chi-square test accept", !TestUtils.chiSquareTest(expected1, observed1, 0.05));
assertEquals("chi-square statistic", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12); assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10); assertEquals( "chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10); assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9); assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07)); assertTrue("chi-square test accept", !TestUtils.chiSquareTest(expected1, observed1, 0.05));
assertTrue(reg.getSumSquaredErrors() >= 0.0);
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
assertEquals(expected, date.weekyear().addToCopy(-2004));
assertEquals(expected, date.plusYears(-2004));
assertNotNull(zone[0]);
assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
assertEquals(expected, LocalDate.fromCalendarFields(cal));
assertEquals(expected, LocalDate.fromCalendarFields(cal));
assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p)); assertEquals("P-54Y", ISOPeriodFormat.standard().print(p)); assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p)); assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p)); assertEquals("PT-23S", ISOPeriodFormat.standard().print(p)); assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
assertEquals(expected, result);
assertEquals(expected, result);
assertEquals(1, f.parseInto(result, "5", 0)); assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);
assertEquals(1, f.parseInto(result, "1", 0)); assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);
assertEquals(1, f.parseInto(result, "5", 0)); assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);
assertEquals(1, f.parseInto(result, "5", 0)); assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);
assertEquals(4, f.parseInto(result, "2 29", 0)); assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
assertEquals(4, f.parseInto(result, "2 29", 0)); assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
assertEquals(2, f.parseInto(result, "12", 0)); assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);
assertSame(base, base.withEarlierOffsetAtOverlap()); assertSame(base, base.withLaterOffsetAtOverlap()); assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
assertSame(base, base.withEarlierOffsetAtOverlap()); assertSame(base, base.withLaterOffsetAtOverlap()); assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
assertEquals("2011-10-30T01:15:00.000+01:00", base.toString()); assertEquals("2011-10-30T01:15:00.000Z", base.plusHours(1).toString());
assertEquals(0, test.getYears()); assertEquals(0, test.getMonths()); assertEquals(0, test.getWeeks()); assertEquals(0, test.getDays()); assertEquals((450 * 24) + 5, test.getHours()); assertEquals(6, test.getMinutes()); assertEquals(7, test.getSeconds()); assertEquals(8, test.getMillis());
assertEquals(PeriodType.standard(), test.getPeriodType()); assertEquals(0, test.getYears()); assertEquals(0, test.getMonths()); assertEquals(0, test.getWeeks()); assertEquals(0, test.getDays()); assertEquals((450 * 24) + 5, test.getHours()); assertEquals(6, test.getMinutes()); assertEquals(7, test.getSeconds()); assertEquals(8, test.getMillis());
assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01"));
assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01"));
assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01"));
assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01"));
assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01"));
assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01"));
assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate("2016-01-01"));
assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());
assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());
assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());
assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());
assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());
assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString()); assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());
assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
assertEquals("true", commandLine.getOptionValue( debugOpt )); assertEquals("true", commandLine.getOptionValue( 'd' )); assertTrue(commandLine.hasOption( 'd')); assertTrue(commandLine.hasOption( debugOpt));
assertEquals("true", commandLine.getOptionValue( debugOpt )); assertEquals("true", commandLine.getOptionValue( 'd' )); assertTrue(commandLine.hasOption( 'd')); assertTrue(commandLine.hasOption( debugOpt));
assertEquals("true", commandLine.getOptionValue( debugOpt )); assertEquals("true", commandLine.getOptionValue( 'd' )); assertTrue(commandLine.hasOption( 'd')); assertTrue(commandLine.hasOption( debugOpt));
assertEquals("flag a", "foo", line.getOptionValue("a")); assertEquals("flag a", "foo", line.getOptionValue('a')); assertEquals("string flag a", "foo", line.getOptionObject("a")); assertEquals("string flag a", "foo", line.getOptionObject('a')); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject("b")); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject('b')); assertEquals("boolean true flag c", true, line.hasOption("c")); assertEquals("boolean true flag c", true, line.hasOption('c')); assertEquals("boolean false flag d", false, line.hasOption("d")); assertEquals("boolean false flag d", false, line.hasOption('d')); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject("e")); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject('e')); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject("f")); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject('f')); assertEquals("number flag n", new Double(4.5), line.getOptionObject("n")); assertEquals("number flag n", new Double(4.5), line.getOptionObject('n')); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject("t")); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject('t'));
assertEquals("flag a", "foo", line.getOptionValue("a")); assertEquals("flag a", "foo", line.getOptionValue('a')); assertEquals("string flag a", "foo", line.getOptionObject("a")); assertEquals("string flag a", "foo", line.getOptionObject('a')); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject("b")); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject('b')); assertEquals("boolean true flag c", true, line.hasOption("c")); assertEquals("boolean true flag c", true, line.hasOption('c')); assertEquals("boolean false flag d", false, line.hasOption("d")); assertEquals("boolean false flag d", false, line.hasOption('d')); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject("e")); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject('e')); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject("f")); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject('f')); assertEquals("number flag n", new Double(4.5), line.getOptionObject("n")); assertEquals("number flag n", new Double(4.5), line.getOptionObject('n')); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject("t")); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject('t'));
assertEquals("flag a", "foo", line.getOptionValue("a")); assertEquals("flag a", "foo", line.getOptionValue('a')); assertEquals("string flag a", "foo", line.getOptionObject("a")); assertEquals("string flag a", "foo", line.getOptionObject('a')); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject("b")); assertEquals("object flag b", new java.util.Vector(), line.getOptionObject('b')); assertEquals("boolean true flag c", true, line.hasOption("c")); assertEquals("boolean true flag c", true, line.hasOption('c')); assertEquals("boolean false flag d", false, line.hasOption("d")); assertEquals("boolean false flag d", false, line.hasOption('d')); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject("e")); assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject('e')); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject("f")); assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject('f')); assertEquals("number flag n", new Double(4.5), line.getOptionObject("n")); assertEquals("number flag n", new Double(4.5), line.getOptionObject('n')); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject("t")); assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject('t'));
assertTrue(option instanceof GroupImpl); assertEquals("[-h]",i.next().toString()); assertEquals("-c <arg>",i.next().toString()); assertFalse(i.hasNext());
assertTrue(option instanceof GroupImpl); assertEquals("[-h]",i.next().toString()); assertEquals("-c <arg>",i.next().toString()); assertFalse(i.hasNext());
assertEquals("single line text", expected, sb.toString()); assertEquals("single line padded text", expected, sb.toString()); assertEquals("single line padded text 2", expected, sb.toString()); assertEquals("multi line text", expected, sb.toString()); assertEquals("multi-line padded text", expected, sb.toString());
assertEquals("usage: app -f" + EOL, out.toString());
assertEquals("bar", cl.getOptionValue("foo"));
assertEquals("bar", cl.getOptionValue("foo"));
assertTrue( "Confirm -a is set", cl.hasOption("a") ); assertFalse( "Confirm -c is not set", cl.hasOption("c") ); assertTrue( "Confirm  1 extra arg: " + cl.getArgList().size(), cl.getArgList().size() == 1); assertTrue(cl.getArgList().contains("zc"));
assertFalse("Confirm -a is not set", cl.hasOption("a")); assertTrue("Confirm  3 extra args: " + cl.getArgList().size(), cl.getArgList().size() == 3);
assertFalse("Confirm -a is not set", cl.hasOption("a")); assertFalse("Confirm -b is not set", cl.hasOption("b")); assertTrue("Confirm  3 extra args: " + cl.getArgList().size(), cl.getArgList().size() == 3);
assertTrue( cmd.hasOption("a") ); assertTrue( cmd.hasOption("c") ); assertTrue( cmd.hasOption("e") ); assertTrue( !cmd.hasOption("a") ); assertTrue( !cmd.hasOption("c") ); assertTrue( cmd.hasOption("e") ); assertTrue( cmd.hasOption("a") ); assertTrue( !cmd.hasOption("c") ); assertTrue( cmd.hasOption("e") ); assertTrue( !cmd.hasOption("a") ); assertTrue( !cmd.hasOption("c") ); assertTrue( cmd.hasOption("e") );
assertEquals("foo", Util.stripLeadingAndTrailingQuotes("\"foo\"")); assertEquals("foo \"bar\"", Util.stripLeadingAndTrailingQuotes("foo \"bar\"")); assertEquals("\"foo\" bar", Util.stripLeadingAndTrailingQuotes("\"foo\" bar")); assertEquals("\"foo\" and \"bar\"", Util.stripLeadingAndTrailingQuotes("\"foo\" and \"bar\"")); assertEquals("\"", Util.stripLeadingAndTrailingQuotes("\""));
assertEquals("usage: app -f <argument>" + EOL, out.toString());
assertEquals("wrap position", 7, hf.findWrapPos(text, 8, 0)); assertEquals("wrap position 2", -1, hf.findWrapPos(text, 8, 8)); assertEquals("wrap position 3", 3, hf.findWrapPos(text, 3, 0)); assertEquals("wrap position 4", 6, hf.findWrapPos(text, 6, 0)); assertEquals("wrap position 4", -1, hf.findWrapPos(text, 6, 7));
assertEquals( "usage: foobar" + EOL + "  Header1" + EOL + "  Header2" + EOL + "" + EOL + "  Footer1" + EOL + "  Footer2" + EOL , out.toString());
assertEquals(123, ((Number) cmd.getParsedOptionValue("i")).intValue()); assertEquals("foo", cmd.getParsedOptionValue("f"));
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertEquals( String.class, simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() );
assertTrue(commandLine.hasOption("t1")); assertNotEquals("Second option has been used as value for first option", "-last", commandLine.getOptionValue("t1")); assertTrue("Second option has not been detected", commandLine.hasOption("last"));
assertTrue(commandLine.hasOption("t1")); assertNull(commandLine.getOptionValue("t1")); assertTrue(commandLine.hasOption("a")); assertTrue(commandLine.hasOption("b")); assertFalse(commandLine.hasOption("last"));
assertNotNull("option g not parsed", parsedReadableFileStream); assertTrue("option g not FileInputStream", parsedReadableFileStream instanceof FileInputStream);
assertNull("option f parsed", line.getOptionObject("f"));
assertEquals("Test [" + i + "]=" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));
assertTrue("Encoder test-" + i, b);
assertTrue("BinaryEncoder test-" + i, b);
assertEquals(qpdata, qpcodec.encode(expected)); assertEquals(qpdata, qpcodec.encode(decoded));
assertEquals(expected, qpcodec.encode(plain)); assertEquals(expected, qpcodec.encode(plain)); assertEquals(expected, qpcodec.encode(plain)); assertEquals(expected, qpcodec.encode(plain));
assertEquals(expected, qpcodec.encode(plain)); assertEquals(expected, qpcodec.encode(plain));
assertEquals(1, b32stream.available()); assertEquals(3, b32stream.skip(10)); assertEquals(0, b32stream.available()); assertEquals(-1, b32stream.read()); assertEquals(-1, b32stream.read()); assertEquals(0, b32stream.available());
assertEquals(1, b64stream.available()); assertEquals(6, b64stream.skip(10)); assertEquals(0, b64stream.available()); assertEquals(-1, b64stream.read()); assertEquals(-1, b64stream.read()); assertEquals(0, b64stream.available());
assertEquals(encode(args, true, "abram"), "Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom"); assertEquals(encode(args, true, "Bendzin"), "bndzn|bntsn|bnzn|vndzn|vntsn"); assertEquals(encode(args, true, "abram"), "Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom"); assertEquals(encode(args, true, "Halpern"), "YlpYrn|Ylpirn|alpYrn|alpirn|olpYrn|olpirn|xalpirn|xolpirn");
assertFalse(entry1.equals(entry2));
assertEquals("\u00e4/", zae.getName());
assertNull(zf.getEntry("\u00e4\\\u00fc.txt")); assertNotNull(zf.getEntry("\u00e4/\u00fc.txt"));
assertEquals(entry1, entry2); assertFalse(entry1.equals(entry3)); assertFalse(entry2.equals(entry3));
assertEquals(1024, bzipIn.read(buffer, 0, 1024)); assertEquals(0, bzipIn.read(buffer, 1024, 0)); assertEquals(1024, bzipIn.read(buffer, 0, 1024));
assertEquals(expected, ArchiveUtils.sanitize(input));
assertEquals(23, bin.readBits(5)); assertEquals(714595605644185962l, bin.readBits(63)); assertEquals(1186, bin.readBits(12)); assertEquals(-1 , bin.readBits(1));
assertEquals(10, bin.readBits(5)); assertEquals(8274274654740644818l, bin.readBits(63)); assertEquals(330, bin.readBits(12)); assertEquals(-1 , bin.readBits(1));
assertFalse(ze.isUnixSymlink());
assertArrayEquals(new byte[] { 20, 0 }, versionInLFH); assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH); assertArrayEquals(new byte[] { 20, 0 }, versionInCDH); assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH); assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart)); assertEquals(3, sizeFromLFH); assertEquals(crcFromLFH, crcFromCDH); assertEquals(cSizeFromLFH, cSizeFromCDH); assertEquals(sizeFromLFH, sizeFromCDH);
assertTrue(zis.canReadEntryData(e)); assertTrue(zis.canReadEntryData(e)); assertFalse(zis.canReadEntryData(e));
assertEquals(NUMBER, reader.peek()); assertEquals("-0", reader.nextString());
assertEquals(NUMBER, reader.peek()); assertEquals("-0", reader.nextString());
assertEquals(NUMBER, reader.peek()); assertEquals("-0", reader.nextString());
assertEquals($Gson$Types.supertypeOf(Number.class), $Gson$Types.supertypeOf($Gson$Types.supertypeOf(Number.class)));
assertEquals($Gson$Types.subtypeOf(Object.class), $Gson$Types.subtypeOf($Gson$Types.supertypeOf(Number.class)));
assertEquals($Gson$Types.subtypeOf(Object.class), $Gson$Types.subtypeOf($Gson$Types.supertypeOf(Number.class)));
assertEquals($Gson$Types.subtypeOf(Number.class), $Gson$Types.subtypeOf($Gson$Types.subtypeOf(Number.class)));
assertEquals($Gson$Types.subtypeOf(Object.class), $Gson$Types.supertypeOf($Gson$Types.subtypeOf(Number.class)));
assertEquals($Gson$Types.subtypeOf(Object.class), $Gson$Types.supertypeOf($Gson$Types.subtypeOf(Number.class)));
assertEquals("[null,\"bar\"]", MAPPER.writeValueAsString(new TwoStringsBean()));
assertEquals(EXP, json); assertTrue("Expected Object, got "+tree.getNodeType(), tree.isObject()); assertEquals(EXP, MAPPER.writeValueAsString(tree));
assertEquals(1, refs.size()); assertEquals(1, refs.get(0).getIndex()); assertEquals(1, refs.size()); assertEquals(1, refs.get(0).getIndex()); assertEquals(2, refs.size()); assertEquals(-1, refs.get(0).getIndex()); assertEquals("keys", refs.get(0).getFieldName()); assertEquals(1, refs.get(1).getIndex()); assertNull(refs.get(1).getFieldName());
assertEquals(1, refs.size()); assertEquals(1, refs.get(0).getIndex()); assertEquals(1, refs.size()); assertEquals(1, refs.get(0).getIndex()); assertEquals(2, refs.size()); assertEquals(-1, refs.get(0).getIndex()); assertEquals("keys", refs.get(0).getFieldName()); assertEquals(1, refs.get(1).getIndex()); assertNull(refs.get(1).getFieldName());
assertEquals("{\"stuff\":\"[key/value]\"}", json);
assertNotNull(m); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass());
assertNotNull(m); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass()); assertEquals(CharSequence.class, t.getRawClass());
assertEquals("{\"bar\":\"result\"}", result);
assertEquals(2, props.size()); assertEquals("13", props.getProperty("B")); assertEquals("129", props.getProperty("A"));
assertEquals(2, props.size()); assertEquals("13", props.getProperty("B")); assertEquals("129", props.getProperty("A"));
assertEquals(3, props.size()); assertEquals("foo", props.getProperty("a")); assertEquals("123", props.getProperty("b")); assertEquals("true", props.getProperty("c"));
assertEquals(MapType.class, t.getClass()); assertSame(Properties.class, t.getRawClass()); assertSame(String.class, ((MapType) t).getKeyType().getRawClass()); assertSame(String.class, ((MapType) t).getContentType().getRawClass());
assertEquals("[\"b\",\"a\"]", json); assertNotNull(result); assertEquals(2, result.length); assertSame(EnumWithPropertyAnno.B, result[0]); assertSame(EnumWithPropertyAnno.A, result[1]);
assertEquals("[\"b\",\"a\"]", json); assertNotNull(result); assertEquals(2, result.length); assertSame(EnumWithPropertyAnno.B, result[0]); assertSame(EnumWithPropertyAnno.A, result[1]);
assertEquals("{\"str\":\"\"}", defMapper.writeValueAsString(str)); assertEquals("{}", inclMapper.writeValueAsString(str)); assertEquals("{}", inclMapper.writeValueAsString(new StringWrapper())); assertEquals("{\"value\":\"x\"}", defMapper.writeValueAsString(new NonEmptyString("x"))); assertEquals("{}", defMapper.writeValueAsString(new NonEmptyString(""))); assertEquals("{\"value\":12}", defMapper.writeValueAsString(new NonEmptyInt(12))); assertEquals("{}", defMapper.writeValueAsString(new NonEmptyInt(0))); assertEquals("{\"value\":1.25}", defMapper.writeValueAsString(new NonEmptyDouble(1.25))); assertEquals("{}", defMapper.writeValueAsString(new NonEmptyDouble(0.0))); assertEquals("{\"i\":0}", defMapper.writeValueAsString(zero)); assertEquals("{}", inclMapper.writeValueAsString(zero));
assertEquals(tz1, tz1); assertEquals(tz2, tz2); assertEquals(tz1, mapper.getSerializationConfig().getTimeZone()); assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone()); assertEquals(tz1, mapper.writer().getConfig().getTimeZone()); assertEquals(tz1, mapper.reader().getConfig().getTimeZone()); assertEquals(tz1, mapper.getSerializationConfig().getTimeZone()); assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone()); assertEquals(tz1, mapper.writer().getConfig().getTimeZone()); assertEquals(tz1, mapper.reader().getConfig().getTimeZone());
assertNotNull(m); assertEquals(1, m.size()); assertEquals(Point.class, ob.getClass()); assertEquals(3, p.x); assertEquals(5, p.getY());
assertNotNull(l); assertEquals(2, l.size()); assertEquals(Point.class, ob.getClass()); assertEquals(1, p.x); assertEquals(2, p.getY());
assertNotNull(msg); assertNotNull(msg.payload); assertEquals("foo", msg.type); assertNotNull(msg); assertNotNull(msg.payload); assertEquals("foo", msg.type);
assertEquals("{\"aleph\":\"b\"}", MAPPER.writeValueAsString(input));
assertEquals(aposToQuotes("{}"), mapper.writeValueAsString(new Issue1351Bean(null, (double) 0))); assertEquals(aposToQuotes("{}"), mapper.writeValueAsString(new Issue1351NonBean(0)));
assertEquals(String.format(aposToQuotes("{'color':%s}"), Color.GREEN.ordinal()), MAPPER.writeValueAsString(new ColorWrapper(Color.GREEN)));
assertEquals(1234, person.getId()); assertNotNull(person.getName()); assertEquals("John", person.getName().getFirst()); assertEquals("Doe", person.getName().getLast()); assertEquals(30, person.getAge()); assertEquals(true, person.isAlive());
assertEquals(1234, animal.getId()); assertNotNull(animal.getName()); assertEquals("John", animal.getName().getFirst()); assertEquals("Doe", animal.getName().getLast()); assertEquals(30, animal.getAge()); assertEquals(true, animal.isAlive());
assertEquals(1234, person.getId()); assertNotNull(person.getName()); assertEquals("John", person.getName().getFirst()); assertEquals("Doe", person.getName().getLast()); assertEquals(30, person.getAge()); assertEquals(true, person.isAlive());
assertEquals(1234, animal.getId()); assertNotNull(animal.getName()); assertEquals("John", animal.getName().getFirst()); assertEquals("Doe", animal.getName().getLast()); assertEquals(30, animal.getAge()); assertEquals(true, animal.isAlive());
assertEquals(aposToQuotes("{'alwaysClass':1,'alwaysProp':2}"), json);
assertEquals(aposToQuotes("{'id':123}"), json); assertEquals("jack", des.getName());
assertEquals("{\"base\":1,\"sub\":2}", serialized);
assertEquals("{\"base\":1,\"sub\":2}", serialized);
assertEquals(aposToQuotes("{'date':'1970-01-01X01:00:00'}"), json);
assertEquals(aposToQuotes("{'date':'1970-01-01X01:00:00'}"), json);
assertNotNull(baseTypeFromSub.getSuperClass());
assertNotNull(baseTypeFromSub.getSuperClass());
assertEquals("{\"base\":1,\"sub\":2}", serialized);
assertEquals("{\"base\":1,\"sub\":2}", serialized);
assertEquals(date1, date2); assertEquals(1970, c.get(Calendar.YEAR)); assertEquals(Calendar.JANUARY, c.get(Calendar.MONTH)); assertEquals(1, c.get(Calendar.DAY_OF_MONTH)); assertEquals(2, c.get(Calendar.HOUR_OF_DAY));
assertEquals("java.util.Calendar", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.ArrayList<java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.concurrent.atomic.AtomicReference<java.lang.Long>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals(List.class, t.getRawClass()); assertEquals(CollectionType.class, t.getClass()); assertEquals(Object.class, t.getContentType().getRawClass()); assertEquals("java.util.List<java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can));
assertEquals("java.util.Calendar", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.ArrayList<java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals("java.util.concurrent.atomic.AtomicReference<java.lang.Long>", can); assertEquals(t, tf.constructFromCanonical(can)); assertEquals(List.class, t.getRawClass()); assertEquals(CollectionType.class, t.getClass()); assertEquals(Object.class, t.getContentType().getRawClass()); assertEquals("java.util.List<java.lang.Object>", can); assertEquals(t, tf.constructFromCanonical(can));
assertEquals(1, bean.x); assertEquals(2, bean.w.a); assertEquals(3, bean.y); assertEquals(4, bean.w.b);
assertEquals("\"1980+04+14\"", mapper.writeValueAsString(java.sql.Date.valueOf("1980-04-14")));
assertEquals ("foo bar baz", doc.text());
assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html()));
assertEquals("<table><tr><td>1</td></tr><tr><td>2</td></tr></table>", TextUtil.stripNewlines(doc.body().html()));
assertEquals("<table><tr><td>2</td></tr><tr><td>1</td></tr></table>", TextUtil.stripNewlines(doc.body().html()));
assertEquals("<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>", TextUtil.stripNewlines(doc.body().html()));
assertEquals("http://jsoup.org/path/file?foo", a1.absUrl("href")); assertEquals("http://jsoup.org/path/bar.html?foo", a2.absUrl("href"));
assertEquals("http://jsoup.org/path/file?foo", a1.absUrl("href")); assertEquals("http://jsoup.org/path/bar.html?foo", a2.absUrl("href"));
assertEquals("http://jsoup.org/path/file?foo", a1.absUrl("href")); assertEquals("http://jsoup.org/path/bar.html?foo", a2.absUrl("href"));
assertEquals(2, divs1.size()); assertEquals("0", divs1.get(0).id()); assertEquals("1", divs1.get(1).id()); assertEquals(1, divs2.size()); assertEquals("1", divs2.get(0).id()); assertEquals(3, divs3.size()); assertEquals("0", divs3.get(0).id()); assertEquals("1", divs3.get(1).id()); assertEquals("2", divs3.get(2).id()); assertEquals(3, els1.size()); assertEquals("body", els1.first().tagName()); assertEquals("0", els1.get(1).id()); assertEquals("2", els1.get(2).id());
assertEquals(2, divs1.size()); assertEquals("0", divs1.get(0).id()); assertEquals("1", divs1.get(1).id()); assertEquals(1, divs2.size()); assertEquals("1", divs2.get(0).id()); assertEquals(3, divs3.size()); assertEquals("0", divs3.get(0).id()); assertEquals("1", divs3.get(1).id()); assertEquals("2", divs3.get(2).id()); assertEquals(3, els1.size()); assertEquals("body", els1.first().tagName()); assertEquals("0", els1.get(1).id()); assertEquals("2", els1.get(2).id());
assertEquals(2, divs1.size()); assertEquals("0", divs1.get(0).id()); assertEquals("1", divs1.get(1).id()); assertEquals(1, divs2.size()); assertEquals("1", divs2.get(0).id()); assertEquals(3, divs3.size()); assertEquals("0", divs3.get(0).id()); assertEquals("1", divs3.get(1).id()); assertEquals("2", divs3.get(2).id()); assertEquals(3, els1.size()); assertEquals("body", els1.first().tagName()); assertEquals("0", els1.get(1).id()); assertEquals("2", els1.get(2).id());
assertFalse(one.hasAttr("abs:href")); assertTrue(one.hasAttr("href")); assertEquals("", one.absUrl("href")); assertTrue(two.hasAttr("abs:href")); assertTrue(two.hasAttr("href")); assertEquals("http://jsoup.org/", two.absUrl("href"));
assertFalse(one.hasAttr("abs:href")); assertTrue(one.hasAttr("href")); assertEquals("", one.absUrl("href")); assertTrue(two.hasAttr("abs:href")); assertTrue(two.hasAttr("href")); assertEquals("http://jsoup.org/", two.absUrl("href"));
assertFalse(one.hasAttr("abs:href")); assertTrue(one.hasAttr("href")); assertEquals("", one.absUrl("href")); assertTrue(two.hasAttr("abs:href")); assertTrue(two.hasAttr("href")); assertEquals("http://jsoup.org/", two.absUrl("href"));
assertEquals("/foo", a.attr("href")); assertEquals("http://jsoup.org/foo", a.attr("abs:href")); assertTrue(a.hasAttr("abs:href"));
assertEquals("/foo", a.attr("href")); assertEquals("http://jsoup.org/foo", a.attr("abs:href")); assertTrue(a.hasAttr("abs:href"));
assertEquals("/foo", a.attr("href")); assertEquals("http://jsoup.org/foo", a.attr("abs:href")); assertTrue(a.hasAttr("abs:href"));
assertEquals("", one.attr("abs:href")); assertEquals("http://jsoup.org", two.attr("abs:href")); assertEquals("http://jsoup.org", both.attr("abs:href"));
assertFalse(one.hasAttr("abs:href")); assertTrue(two.hasAttr("abs:href")); assertTrue(both.hasAttr("abs:href"));
assertEquals("one", t.text()); assertEquals("two", doc.select("p").get(1).text());
assertEquals("one", t.text()); assertEquals("two", doc.select("p").get(1).text());
assertEquals("One <b>Two <b>Three", one.title()); assertEquals("Test", one.select("p").first().text()); assertEquals("One", two.title()); assertEquals("<b>Two <p>Test</p></b>", two.body().html());
assertEquals("One <b>Two <b>Three", one.title()); assertEquals("Test", one.select("p").first().text()); assertEquals("One", two.title()); assertEquals("<b>Two <p>Test</p></b>", two.body().html());
assertEquals("<!DOCTYPE html>", html5.outerHtml()); assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml()); assertEquals("<!DOCTYPE html \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml()); assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml());
assertEquals("0\n<p>0</p>", doc.body().html());
assertEquals("one ", first); assertEquals("\n two \n three", r.consumeToEnd());
assertEquals("one ", first); assertEquals("\n two \n three", r.consumeToEnd());
assertEquals(in, toEnd); assertTrue(r.isEmpty());
assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html());
assertEquals("<img /> \n<img />", dropped); assertEquals("<img src=\"cid:12345\" /> \n<img src=\"data:gzzt\" />", preserved);
assertEquals("Two", p2.text()); assertEquals(2, els.size()); assertEquals("<p>One</p>", els.get(0).outerHtml()); assertEquals("<p>Three</p>", els.get(1).outerHtml());
assertEquals("Two", p2.text()); assertEquals(2, nodes.size()); assertEquals("<p>One</p>", nodes.get(0).outerHtml()); assertEquals("<p>Three</p>", nodes.get(1).outerHtml());
assertEquals("<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>", node.body().html());
assertEquals(expect, el.text()); assertEquals(expect, el.val()); assertEquals(expect, el.html()); assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml());
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 ")); assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8")); assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1")); assertEquals(null, DataUtil.getCharsetFromContentType("text/html")); assertEquals(null, DataUtil.getCharsetFromContentType(null)); assertEquals(null, DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));
assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\"")); assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\"")); assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\"")); assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
assertEquals(string, Entities.unescape(string));
assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"));
assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"));
assertEquals("?foo=bar&mid&lt=true", els.first().attr("href")); assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"));
assertEquals("?foo=bar&mid&lt=true", els.first().attr("href")); assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"));
assertEquals("?foo=bar&mid&lt=true", els.first().attr("href")); assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"));
assertEquals(StringUtil.normaliseWhitespace("&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;"), doc.body().html());
assertEquals(StringUtil.normaliseWhitespace("&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;"), doc.body().html());
assertEquals("", noTitle.title()); assertEquals("Hello", noTitle.title()); assertEquals("Hello", noTitle.select("title").first().text()); assertEquals("First", withTitle.title()); assertEquals("Hello", withTitle.title()); assertEquals("Hello", withTitle.select("title").first().text()); assertEquals("Hello there now", normaliseTitle.title());
assertTrue(Jsoup.isValid(ok, Whitelist.basic())); assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));
assertEquals("<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->", StringUtil.normaliseWhitespace(doc.outerHtml())); assertEquals("#declaration", doc.childNode(0).nodeName()); assertEquals("#comment", doc.childNode(2).nodeName());
assertEquals("<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->", StringUtil.normaliseWhitespace(doc.outerHtml())); assertEquals("#declaration", doc.childNode(0).nodeName()); assertEquals("#comment", doc.childNode(2).nodeName());
assertEquals("<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->", StringUtil.normaliseWhitespace(doc.outerHtml())); assertEquals("#declaration", doc.childNode(0).nodeName()); assertEquals("#comment", doc.childNode(2).nodeName());
assertEquals(2, classes.size()); assertTrue(classes.contains("one")); assertTrue(classes.contains("two")); assertEquals(2, copyClasses.size()); assertTrue(copyClasses.contains("one")); assertTrue(copyClasses.contains("two")); assertTrue(classes.contains("one")); assertFalse(classes.contains("three")); assertFalse(copyClasses.contains("one")); assertTrue(copyClasses.contains("three")); assertEquals("", div.html()); assertEquals("", copy.html());
assertEquals(8, els.size()); assertEquals(e0, e1); assertEquals(e0, e4); assertEquals(e0, e5); assertFalse(e0.equals(e2)); assertFalse(e0.equals(e3)); assertFalse(e0.equals(e6)); assertFalse(e0.equals(e7)); assertEquals(e0.hashCode(), e1.hashCode()); assertEquals(e0.hashCode(), e4.hashCode()); assertEquals(e0.hashCode(), e5.hashCode()); assertFalse(e0.hashCode() == (e2.hashCode())); assertFalse(e0.hashCode() == (e3).hashCode()); assertFalse(e0.hashCode() == (e6).hashCode()); assertFalse(e0.hashCode() == (e7).hashCode());
assertEquals(6, data.size()); assertEquals("one=two", data.get(0).toString()); assertEquals("three=four", data.get(1).toString()); assertEquals("three=five", data.get(2).toString()); assertEquals("six=seven", data.get(3).toString()); assertEquals("seven=on", data.get(4).toString()); assertEquals("eight=on", data.get(5).toString());
assertEquals("on", data.get(0).value()); assertEquals("foo", data.get(0).key());
assertTrue(0 == ps.get(0).elementSiblingIndex()); assertTrue(1 == ps.get(1).elementSiblingIndex()); assertTrue(2 == ps.get(2).elementSiblingIndex());
assertEquals("there", p.text()); assertEquals("Hello", p.previousElementSibling().text()); assertEquals("this", p.nextElementSibling().text()); assertEquals("this", p.nextElementSibling().nextElementSibling().text()); assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text()); assertEquals("Hello", p.firstElementSibling().text()); assertEquals("element", p.lastElementSibling().text());
assertEquals("there", p.text()); assertEquals("Hello", p.previousElementSibling().text()); assertEquals("this", p.nextElementSibling().text()); assertEquals("this", p.nextElementSibling().nextElementSibling().text()); assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text()); assertEquals("Hello", p.firstElementSibling().text()); assertEquals("element", p.lastElementSibling().text());
assertEquals("there", p.text()); assertEquals("Hello", p.previousElementSibling().text()); assertEquals("this", p.nextElementSibling().text()); assertEquals("this", p.nextElementSibling().nextElementSibling().text()); assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text()); assertEquals("Hello", p.firstElementSibling().text()); assertEquals("element", p.lastElementSibling().text());
assertEquals("there", p.text()); assertEquals("Hello", p.previousElementSibling().text()); assertEquals("this", p.nextElementSibling().text()); assertEquals("this", p.nextElementSibling().nextElementSibling().text()); assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text()); assertEquals("Hello", p.firstElementSibling().text()); assertEquals("element", p.lastElementSibling().text());
assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml()); assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml());
assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml()); assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml());
assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);
assertTrue(Jsoup.isValid(ok, Whitelist.basic())); assertTrue(Jsoup.isValid(ok1, Whitelist.basic())); assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); assertFalse(Jsoup.isValid(nok3, Whitelist.basic())); assertFalse(Jsoup.isValid(nok4, Whitelist.basic())); assertFalse(Jsoup.isValid(nok5, Whitelist.basic())); assertFalse(Jsoup.isValid(nok6, Whitelist.basic())); assertFalse(Jsoup.isValid(ok, Whitelist.none())); assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));
assertTrue(cleaner.isValid(okDoc)); assertFalse(cleaner.isValid(Jsoup.parse(nok))); assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));
assertTrue(one.hasClass("One")); assertTrue(one.hasClass("ONE")); assertTrue(two.hasClass("TWO")); assertTrue(two.hasClass("Two")); assertTrue(thr.hasClass("ThreE")); assertTrue(thr.hasClass("three"));
assertEquals(elsFromAttr.size(), elsFromClass.size()); assertEquals(3, elsFromClass.size()); assertEquals("Two", elsFromClass.get(1).text());
assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()));
assertEquals(2, data.size()); assertEquals("user", data.get(0).key()); assertEquals("login", data.get(1).key()); assertEquals(null, doc.selectFirst("input[name=pass]"));
assertEquals("One\nTwo", pre.text()); assertEquals("\nOne\nTwo\n", pre.wholeText());
assertEquals("", attributes.get("hidden")); assertEquals("hidden", first.getKey()); assertEquals("", first.getValue());
assertEquals(6, data.size()); assertEquals("one=two", data.get(0).toString()); assertEquals("three=four", data.get(1).toString()); assertEquals("three=five", data.get(2).toString()); assertEquals("six=seven", data.get(3).toString()); assertEquals("seven=on", data.get(4).toString()); assertEquals("eight=on", data.get(5).toString());
assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float); assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double); assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
assertEquals("Incorrect codepoint consumption", 3, result); assertEquals("Incorrect value", "two", out.toString());
assertNotNull("Cannot find another timezone", anotherZone); assertEquals(expectedValue, actualValue);
assertTrue(StringUtils.equals(null, null)); assertTrue(StringUtils.equals(fooCs, fooCs)); assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO))); assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' }))); assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO))); assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs)); assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' }))); assertFalse(StringUtils.equals(fooCs, barCs)); assertFalse(StringUtils.equals(fooCs, null)); assertFalse(StringUtils.equals(null, fooCs)); assertFalse(StringUtils.equals(fooCs, foobarCs)); assertFalse(StringUtils.equals(foobarCs, fooCs));
assertEquals(input, escaped);
assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2)); assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4)); assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));
assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(2, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(22, f.getNumerator()); assertEquals(7, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(11, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); assertEquals(1, f.getDenominator());
assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(2, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(22, f.getNumerator()); assertEquals(7, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(11, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); assertEquals(1, f.getDenominator());
assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(2, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(22, f.getNumerator()); assertEquals(7, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(-3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(5, f.getDenominator()); assertEquals(0, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(1, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(3, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(11, f.getNumerator()); assertEquals(2, f.getDenominator()); assertEquals(1, f.getNumerator()); assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); assertEquals(1, f.getDenominator());
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO); assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); assertEquals(1, result.getDenominator());
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO); assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); assertEquals(1, result.getDenominator());
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO); assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); assertEquals(1, result.getDenominator());
assertTrue("One or more errors detected",success);
assertEquals("Failed to unescape numeric entities supplementary characters", expected, result);
assertEquals(0, SystemUtils.toJavaVersionInt(null)); assertEquals(0, SystemUtils.toJavaVersionInt("")); assertEquals(0, SystemUtils.toJavaVersionInt("0")); assertEquals(110, SystemUtils.toJavaVersionInt("1.1")); assertEquals(120, SystemUtils.toJavaVersionInt("1.2")); assertEquals(130, SystemUtils.toJavaVersionInt("1.3.0")); assertEquals(131, SystemUtils.toJavaVersionInt("1.3.1")); assertEquals(140, SystemUtils.toJavaVersionInt("1.4.0")); assertEquals(141, SystemUtils.toJavaVersionInt("1.4.1")); assertEquals(142, SystemUtils.toJavaVersionInt("1.4.2")); assertEquals(150, SystemUtils.toJavaVersionInt("1.5.0")); assertEquals(160, SystemUtils.toJavaVersionInt("1.6.0")); assertEquals(131, SystemUtils.toJavaVersionInt("JavaVM-1.3.1")); assertEquals(131, SystemUtils.toJavaVersionInt("1.3.1 subset")); assertEquals(130, SystemUtils.toJavaVersionInt("XXX-1.3.x"));
assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray())); assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray())); assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray())); assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray())); assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000)); assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001)); assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000)); assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001)); assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));
assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); assertEquals(false, StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));
assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001)); assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001)); assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh)); assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));
assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray())); assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray())); assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray())); assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));
assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));
assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001)); assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));
assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));
assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray())); assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray())); assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray())); assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray())); assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray())); assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray())); assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000)); assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001)); assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
assertEquals( this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]", ToStringBuilder.reflectionToString(objects));
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals( basicToString + "[{{" + basicToString + "," + basicToString + "},{" + basicToString + "," + basicToString + "}}]", ToStringBuilder.reflectionToString(objects));
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals( this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]", ToStringBuilder.reflectionToString(objects)); assertEquals( this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]", ToStringBuilder.reflectionToString(objectsLevel2));
assertEquals( this.toBaseString(objects) + "[{" + this.toBaseString(simple) + "[o=" + this.toBaseString(objects) + "]" + "}]", ToStringBuilder.reflectionToString(objects)); assertEquals( this.toBaseString(simple) + "[o={" + this.toBaseString(simple) + "}]", ToStringBuilder.reflectionToString(simple));
assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertEquals("dateTime", dateTime, format.format(cal));
assertTrue(Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1], StringUtils .containsIgnoreCase(tdata[j][0], tdata[j][1])); assertFalse(Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1], StringUtils .containsIgnoreCase(fdata[j][0], fdata[j][1]));
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); assertEquals("", ClassUtils.getShortClassName((Class) null)); assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); assertEquals("byte", ClassUtils.getShortClassName(byte.class)); assertEquals("char", ClassUtils.getShortClassName(char.class)); assertEquals("short", ClassUtils.getShortClassName(short.class)); assertEquals("int", ClassUtils.getShortClassName(int.class)); assertEquals("long", ClassUtils.getShortClassName(long.class)); assertEquals("float", ClassUtils.getShortClassName(float.class)); assertEquals("double", ClassUtils.getShortClassName(double.class)); assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
assertEquals("java.lang", ClassUtils.getPackageName(String.class)); assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); assertEquals("", ClassUtils.getPackageName((Class)null)); assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); assertEquals("", ClassUtils.getPackageName(boolean[].class)); assertEquals("", ClassUtils.getPackageName(byte[].class)); assertEquals("", ClassUtils.getPackageName(char[].class)); assertEquals("", ClassUtils.getPackageName(short[].class)); assertEquals("", ClassUtils.getPackageName(int[].class)); assertEquals("", ClassUtils.getPackageName(long[].class)); assertEquals("", ClassUtils.getPackageName(float[].class)); assertEquals("", ClassUtils.getPackageName(double[].class)); assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
assertEquals( "High unicode was not escaped correctly", "&#119650;", escaped);
assertEquals( "High unicode was not escaped correctly", "&#119650;", escaped);
assertEquals(expected, actual);
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO);
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO);
assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertEquals(-2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(2, result.getNumerator()); assertEquals(3, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(f, result); assertEquals(0, result.getNumerator()); assertEquals(1, result.getDenominator()); assertSame(result, Fraction.ZERO);
assertSame(Locale.GERMANY, format1.getLocale()); assertSame(Locale.US, format2.getLocale()); assertSame(Locale.GERMANY, format3.getLocale()); assertTrue(format1 != format2); assertTrue(format2 != format3);
assertSame(Locale.GERMANY, format1.getLocale()); assertSame(Locale.US, format2.getLocale()); assertSame(Locale.GERMANY, format3.getLocale()); assertTrue(format1 != format2); assertTrue(format2 != format3);
assertEquals(null, StringEscapeUtils.escapeJavaScript(null)); assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeJavaScript("He didn't say, \"stop!\"")); assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';", StringEscapeUtils.escapeJavaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';"));
assertFalse( "The contains(char) method is looking beyond the end of the string", sb.contains('h')); assertEquals( "The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h'));
assertEquals(-1, sb.indexOf("three"));
assertTrue(delegatingMethod.equals(equal));
assertTrue(delegatingMethod.equals(delegatingMethod));
assertEquals(1, set.size());
assertEquals(false, values.returnValueFor(Boolean.TYPE)); assertEquals((char) 0, values.returnValueFor(Character.TYPE)); assertEquals((byte) 0, values.returnValueFor(Byte.TYPE)); assertEquals((short) 0, values.returnValueFor(Short.TYPE)); assertEquals(0, values.returnValueFor(Integer.TYPE)); assertEquals(0L, values.returnValueFor(Long.TYPE)); assertEquals(0F, values.returnValueFor(Float.TYPE)); assertEquals(0D, values.returnValueFor(Double.TYPE));
assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, "booleanMethod"))); assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, "charMethod"))); assertEquals((byte) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, "byteMethod"))); assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, "shortMethod"))); assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, "intMethod"))); assertEquals(0L, answer.answer(invocationOf(HasPrimitiveMethods.class, "longMethod"))); assertEquals(0f, answer.answer(invocationOf(HasPrimitiveMethods.class, "floatMethod"))); assertEquals(0d, answer.answer(invocationOf(HasPrimitiveMethods.class, "doubleMethod")));
assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, "booleanMethod"))); assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, "charMethod"))); assertEquals((byte) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, "byteMethod"))); assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, "shortMethod"))); assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, "intMethod"))); assertEquals(0L,        answer.answer(invocationOf(HasPrimitiveMethods.class, "longMethod"))); assertEquals(0f,        answer.answer(invocationOf(HasPrimitiveMethods.class, "floatMethod"))); assertEquals(0d,        answer.answer(invocationOf(HasPrimitiveMethods.class, "doubleMethod")));
assertTrue("Exception message should include oompa and lumpa, but was: " + message, message.contains("oompa, lumpa"));
assertEquals("SmartNull returned by unstubbed withArgs(oompa, lumpa) method on mock", smartNull + "");
